{"pr_number": 8985, "pr_title": "VSDecoder: use symbolic constants in locations tables", "pr_createdAt": "2020-09-01T13:08:34Z", "pr_url": "https://github.com/JMRI/JMRI/pull/8985", "timeline": [{"oid": "4b253fd3e7e018b6cb87409133793d345f3586d1", "url": "https://github.com/JMRI/JMRI/commit/4b253fd3e7e018b6cb87409133793d345f3586d1", "message": "use symbolic constants in locations tables", "committedDate": "2020-09-01T13:01:22Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTE3ODk2Mw==", "url": "https://github.com/JMRI/JMRI/pull/8985#discussion_r481178963", "bodyText": "Have you checked the case when user name is null? getUserName() may return null if there is no user name, while getDisplayName() always return a string.", "author": "danielb987", "createdAt": "2020-09-01T14:26:59Z", "path": "java/src/jmri/jmrit/vsdecoder/swing/ManageLocationsAction.java", "diffHunk": "@@ -53,51 +66,49 @@ public void actionPerformed(ActionEvent e) {\n             listenerLoc = VSDecoderManager.instance().getVSDecoderPreferences().getListenerPosition();\n \n             // Handle Reporters\n-            ReporterManager rmgr = jmri.InstanceManager.getDefault(jmri.ReporterManager.class);\n+            ReporterManager rmgr = jmri.InstanceManager.getDefault(ReporterManager.class);\n             Set<Reporter> reporterSet = rmgr.getNamedBeanSet();\n             Object[][] reporterTable = new Object[reporterSet.size()][7];\n             int i = 0;\n             for (Reporter r : reporterSet) {\n                 if (r != null) {\n                     if (r instanceof PhysicalLocationReporter) {\n                         PhysicalLocation p = ((PhysicalLocationReporter) r).getPhysicalLocation();\n-                        reporterTable[i][0] = r.getSystemName();\n-                        reporterTable[i][1] = r.getDisplayName();\n-                        reporterTable[i][2] = true;\n-                        reporterTable[i][3] = p.getX();\n-                        reporterTable[i][4] = p.getY();\n-                        reporterTable[i][5] = p.getZ();\n-                        reporterTable[i][6] = p.isTunnel();\n+                        reporterTable[i][SYSNAMECOL] = r.getSystemName();\n+                        reporterTable[i][USERNAMECOL] = r.getUserName();", "originalCommit": "4b253fd3e7e018b6cb87409133793d345f3586d1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTIyMzcwOA==", "url": "https://github.com/JMRI/JMRI/pull/8985#discussion_r481223708", "bodyText": "Yes, and it works for a jmri.Block and a jmri.Reporter. Will change it to getDisplayName(). Thanks!", "author": "klk32003", "createdAt": "2020-09-01T15:17:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTE3ODk2Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTE4NTI0Mg==", "url": "https://github.com/JMRI/JMRI/pull/8985#discussion_r481185242", "bodyText": "I think it would be better to move this class to its own file, ReporterBlockTableModel.java, instead of moving it to the ManageLocationsAction class.\nThere is no reference to ReporterBlockTableModel in the ManageLocationsAction class, so I don't think ReporterBlockTableModel should belong to ManageLocationsAction.", "author": "danielb987", "createdAt": "2020-09-01T14:34:57Z", "path": "java/src/jmri/jmrit/vsdecoder/swing/ManageLocationsAction.java", "diffHunk": "@@ -131,4 +142,273 @@ public void actionPerformed(ActionEvent e) {\n \n     private final static Logger log = LoggerFactory.getLogger(ManageLocationsAction.class);\n \n+    /**\n+     * class to serve as TableModel for Reporters and Blocks\n+     */\n+    static class ReporterBlockTableModel extends AbstractTableModel {", "originalCommit": "4b253fd3e7e018b6cb87409133793d345f3586d1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTIyNTcxNw==", "url": "https://github.com/JMRI/JMRI/pull/8985#discussion_r481225717", "bodyText": "OK, will change it. Thanks!", "author": "klk32003", "createdAt": "2020-09-01T15:20:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTE4NTI0Mg=="}], "type": "inlineReview"}, {"oid": "38017c7275529e6ab1d43007ac3f685f1627c971", "url": "https://github.com/JMRI/JMRI/commit/38017c7275529e6ab1d43007ac3f685f1627c971", "message": "update due to the review", "committedDate": "2020-09-02T11:55:14Z", "type": "commit"}, {"oid": "6b04cb744a2258a5d10e4b357c13718ba08c62e7", "url": "https://github.com/JMRI/JMRI/commit/6b04cb744a2258a5d10e4b357c13718ba08c62e7", "message": "add JUnit test", "committedDate": "2020-09-02T11:56:31Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjA4ODQwOA==", "url": "https://github.com/JMRI/JMRI/pull/8985#discussion_r482088408", "bodyText": "This import is redundant. You don't need to import from the same package. Sometimes I have seen that the IDE (for example NetBeans) has added these wrongly.\nThe PR looks good, but the Static Analysis CI check complains about it so it needs to be fixed before the PR is merged.", "author": "danielb987", "createdAt": "2020-09-02T13:55:43Z", "path": "java/src/jmri/jmrit/vsdecoder/swing/ManageLocationsFrame.java", "diffHunk": "@@ -33,6 +32,7 @@\n import jmri.jmrit.operations.setup.Setup;\n import jmri.jmrit.vsdecoder.VSDecoderManager;\n import jmri.jmrit.vsdecoder.listener.ListeningSpot;\n+import jmri.jmrit.vsdecoder.swing.ManageLocationsTableModel;", "originalCommit": "6b04cb744a2258a5d10e4b357c13718ba08c62e7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjEyNzM3MQ==", "url": "https://github.com/JMRI/JMRI/pull/8985#discussion_r482127371", "bodyText": "Thank you. Now fixed. It was my mistake.", "author": "klk32003", "createdAt": "2020-09-02T14:46:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjA4ODQwOA=="}], "type": "inlineReview"}, {"oid": "26ac093b5d944c95dbe62f6ac599b499301d480a", "url": "https://github.com/JMRI/JMRI/commit/26ac093b5d944c95dbe62f6ac599b499301d480a", "message": "remove not needed import", "committedDate": "2020-09-02T14:12:19Z", "type": "commit"}]}