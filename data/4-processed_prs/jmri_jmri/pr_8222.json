{"pr_number": 8222, "pr_title": "Page on example use of XSL to generate decoder xml contents.", "pr_createdAt": "2020-03-08T20:38:57Z", "pr_url": "https://github.com/JMRI/JMRI/pull/8222", "timeline": [{"oid": "ec5d2f3eeeca6b24ec8728a99a44d6d5730ece92", "url": "https://github.com/JMRI/JMRI/commit/ec5d2f3eeeca6b24ec8728a99a44d6d5730ece92", "message": "Page on example use of XSL to generate decoder xml contents.", "committedDate": "2020-03-08T20:27:26Z", "type": "commit"}, {"oid": "aa7056e3c0404cf1e6561e5f96aceca0db0d7d40", "url": "https://github.com/JMRI/JMRI/commit/aa7056e3c0404cf1e6561e5f96aceca0db0d7d40", "message": "Escaped tag in the example text.", "committedDate": "2020-04-10T21:09:44Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAzNTEyNw==", "url": "https://github.com/JMRI/JMRI/pull/8222#discussion_r407035127", "bodyText": "Should be xml/decoders with the final s?", "author": "bobjacobsen", "createdAt": "2020-04-11T08:22:53Z", "path": "help/en/html/apps/DecoderPro/TransformDecoder.shtml", "diffHunk": "@@ -0,0 +1,402 @@\n+<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\"\n+\"http://www.w3.org/TR/html4/strict.dtd\">\n+\n+<html lang=\"en\">\n+<head>\n+  <!-- Copyright Bob Jacobsen 2008 -->\n+\n+  <title>JMRI: DecoderPro User Guide - Use XSLT Transformation for complex decoders\n+  File</title>\n+  <!-- Style -->\n+  <meta http-equiv=\"Content-Type\" content=\n+  \"text/html; charset=us-ascii\">\n+  <link rel=\"stylesheet\" type=\"text/css\" href=\"/css/default.css\"\n+  media=\"screen\">\n+  <link rel=\"stylesheet\" type=\"text/css\" href=\"/css/print.css\"\n+  media=\"print\">\n+  <link rel=\"icon\" href=\"/images/jmri.ico\" type=\"image/png\">\n+  <link rel=\"home\" title=\"Home\" href=\"/\">\n+  <!-- /Style -->\n+</head>\n+\n+<body>\n+  <!--#include virtual=\"/Header\" -->\n+  <div id=\"mBody\">\n+    <!--#include virtual=\"Sidebar.shtml\" -->\n+    <div id=\"mainContent\">\n+\n+    <h1>JMRI: DecoderPro User Guide</h1>\n+\n+      <h2>Use XSLT Transformation for complex decoders</h2>\n+\n+      <p>\n+          Some decoders contain <b>repeated blocks</b> of CVs, for example to\n+          define behaviour of several accessories, each controlled by multiple\n+          CVs. An advanced turnout decoder may for example define multiple paths,\n+          each containing several turnouts and their desired position to form\n+          the travel path on the layout.\n+      </p>\n+      <p>\n+          Although the decoder file must define dozens or even hundreds of CVs\n+          and their appearance on panes in total, only a fraction of the CVs or\n+          displays are actually unique: the rest can be <b>generated from a template</b>.\n+          While creating template, and the transformation recipe is <b>a lot more complex</b>\n+          than copy-pasting CV definitions, the benefit is <b>a lot easier maintenance</b>\n+          once the hard part is done: each change propagates consistently to\n+          all generated parts.\n+      </p>\n+      <p>\n+          To give some example of simplification possible - let's take the decoder file\n+          <code>Public_Domain_dccdoma_ARD_SCOM_MX.xm</code>. It configures a decoder, capable\n+          of displaying signal aspects on several signal masts. The configuration contains\n+          over 500 of CVs - yet the basic idea behind the configuration is dead simple:\n+     </p>\n+          <ul>\n+            <li>a default aspect for each signal mast</li>\n+            <li>for each signal mast AND for each one of 32 possible aspects, the number of signal to be displayed, \n+                interpreted by the decoder itself</li>\n+          </ul>\n+     <p>\n+          A few statistics:\n+     </p>\n+          <ul>\n+              <li>original decoder's definition: <b>870 kByte</b> 20608 lines.</li>\n+              <li>stylesheet file: <b>12 kByte</b>, 257 lines.</li>\n+              <li>decoder file template: <b>18 kByte</b>, 390 lines.</li>\n+          </ul>\n+     <p>\n+          For JMRI itself or the speed of DecoderPro operation, these two approaches are the same: the file template\n+          is internally transformed (expanded) to the decode definition XML and processed as if it was written\n+          entirely by hand. For <b>maintenance</b>, it is a way easier to maintain ~600 lines of XML than 20600.\n+     </p>\n+     <p>\n+          JMRI provides an option to apply a <b>XSLT stylesheet</b> to a decoder file,\n+          <b>before</b> the file is loaded into DecoderPro and before it is interpreted\n+          as CV variables and panels. This allows to hand-write unique CV definitions\n+          and their panes, and <b>add generated</b> content where appropriate. \n+      </p>\n+      <h2>\n+          Example files\n+      </h2>\n+      <p>\n+          To illustrate the techniques described here, a few example files are provided; all the files are licensed under\n+          GNU GPL.\n+      </p>\n+      <ul>\n+          <li><b><a href=\"resources/decoder-template.xml\">decoder-template.xml</a></b> - the decoder definition <b>template</b> \n+          <li><b><a href=\"resources/scom.xsl\">scom.xsl</a></b> - the stylesheet</li>\n+      </ul>\n+      <p>\n+          The decoder template should be placed into the <b>xml/decoders</b> folder of the JMRI installation. It is <b>based on Petr Sidlo's\n+          dccdoma.cz - ARD-SCOM-MX decoder</b> - generates the same decoder panels as the original one (as of 12/2019). The stylesheet\n+          (<b>scom.xsl</b>) should be placed also into <b><code>xml/decoder</code></b> folder of the JMRI installation.", "originalCommit": "aa7056e3c0404cf1e6561e5f96aceca0db0d7d40", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAzNTU2Nw==", "url": "https://github.com/JMRI/JMRI/pull/8222#discussion_r407035567", "bodyText": "I'll wait ~72hours for feedback / wording and stylistic corrections, then attempt to fix. I am not a native speaker, so if some wording is clumsy or not fitting, please suggest an appropriate phrase. Thanks.", "author": "svatoun", "createdAt": "2020-04-11T08:27:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAzNTEyNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAzNTI3MA==", "url": "https://github.com/JMRI/JMRI/pull/8222#discussion_r407035270", "bodyText": "Should this mention you have to be in the xml/decoders directory for that line to work?  Or it could be xsltproc xml/decoders/scom.xsl xml/decoders/decoder-template.xml > decoder-gen.xml", "author": "bobjacobsen", "createdAt": "2020-04-11T08:24:18Z", "path": "help/en/html/apps/DecoderPro/TransformDecoder.shtml", "diffHunk": "@@ -0,0 +1,402 @@\n+<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\"\n+\"http://www.w3.org/TR/html4/strict.dtd\">\n+\n+<html lang=\"en\">\n+<head>\n+  <!-- Copyright Bob Jacobsen 2008 -->\n+\n+  <title>JMRI: DecoderPro User Guide - Use XSLT Transformation for complex decoders\n+  File</title>\n+  <!-- Style -->\n+  <meta http-equiv=\"Content-Type\" content=\n+  \"text/html; charset=us-ascii\">\n+  <link rel=\"stylesheet\" type=\"text/css\" href=\"/css/default.css\"\n+  media=\"screen\">\n+  <link rel=\"stylesheet\" type=\"text/css\" href=\"/css/print.css\"\n+  media=\"print\">\n+  <link rel=\"icon\" href=\"/images/jmri.ico\" type=\"image/png\">\n+  <link rel=\"home\" title=\"Home\" href=\"/\">\n+  <!-- /Style -->\n+</head>\n+\n+<body>\n+  <!--#include virtual=\"/Header\" -->\n+  <div id=\"mBody\">\n+    <!--#include virtual=\"Sidebar.shtml\" -->\n+    <div id=\"mainContent\">\n+\n+    <h1>JMRI: DecoderPro User Guide</h1>\n+\n+      <h2>Use XSLT Transformation for complex decoders</h2>\n+\n+      <p>\n+          Some decoders contain <b>repeated blocks</b> of CVs, for example to\n+          define behaviour of several accessories, each controlled by multiple\n+          CVs. An advanced turnout decoder may for example define multiple paths,\n+          each containing several turnouts and their desired position to form\n+          the travel path on the layout.\n+      </p>\n+      <p>\n+          Although the decoder file must define dozens or even hundreds of CVs\n+          and their appearance on panes in total, only a fraction of the CVs or\n+          displays are actually unique: the rest can be <b>generated from a template</b>.\n+          While creating template, and the transformation recipe is <b>a lot more complex</b>\n+          than copy-pasting CV definitions, the benefit is <b>a lot easier maintenance</b>\n+          once the hard part is done: each change propagates consistently to\n+          all generated parts.\n+      </p>\n+      <p>\n+          To give some example of simplification possible - let's take the decoder file\n+          <code>Public_Domain_dccdoma_ARD_SCOM_MX.xm</code>. It configures a decoder, capable\n+          of displaying signal aspects on several signal masts. The configuration contains\n+          over 500 of CVs - yet the basic idea behind the configuration is dead simple:\n+     </p>\n+          <ul>\n+            <li>a default aspect for each signal mast</li>\n+            <li>for each signal mast AND for each one of 32 possible aspects, the number of signal to be displayed, \n+                interpreted by the decoder itself</li>\n+          </ul>\n+     <p>\n+          A few statistics:\n+     </p>\n+          <ul>\n+              <li>original decoder's definition: <b>870 kByte</b> 20608 lines.</li>\n+              <li>stylesheet file: <b>12 kByte</b>, 257 lines.</li>\n+              <li>decoder file template: <b>18 kByte</b>, 390 lines.</li>\n+          </ul>\n+     <p>\n+          For JMRI itself or the speed of DecoderPro operation, these two approaches are the same: the file template\n+          is internally transformed (expanded) to the decode definition XML and processed as if it was written\n+          entirely by hand. For <b>maintenance</b>, it is a way easier to maintain ~600 lines of XML than 20600.\n+     </p>\n+     <p>\n+          JMRI provides an option to apply a <b>XSLT stylesheet</b> to a decoder file,\n+          <b>before</b> the file is loaded into DecoderPro and before it is interpreted\n+          as CV variables and panels. This allows to hand-write unique CV definitions\n+          and their panes, and <b>add generated</b> content where appropriate. \n+      </p>\n+      <h2>\n+          Example files\n+      </h2>\n+      <p>\n+          To illustrate the techniques described here, a few example files are provided; all the files are licensed under\n+          GNU GPL.\n+      </p>\n+      <ul>\n+          <li><b><a href=\"resources/decoder-template.xml\">decoder-template.xml</a></b> - the decoder definition <b>template</b> \n+          <li><b><a href=\"resources/scom.xsl\">scom.xsl</a></b> - the stylesheet</li>\n+      </ul>\n+      <p>\n+          The decoder template should be placed into the <b>xml/decoders</b> folder of the JMRI installation. It is <b>based on Petr Sidlo's\n+          dccdoma.cz - ARD-SCOM-MX decoder</b> - generates the same decoder panels as the original one (as of 12/2019). The stylesheet\n+          (<b>scom.xsl</b>) should be placed also into <b><code>xml/decoder</code></b> folder of the JMRI installation.\n+      </p>\n+      <p>\n+          The template can be processed from the commandline to generate the decoder XML, so you can inspect effects of changing the\n+          stylesheet and/or data embedded in the decoder template. The commandline for Linux:\n+      </p>\n+      <pre>\n+xsltproc scom.xsl decoder-template.xml > decoder-gen.xml", "originalCommit": "aa7056e3c0404cf1e6561e5f96aceca0db0d7d40", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAzNTMzMw==", "url": "https://github.com/JMRI/JMRI/pull/8222#discussion_r407035333", "bodyText": "Oops, just saw the paragraph later. Never mind.", "author": "bobjacobsen", "createdAt": "2020-04-11T08:25:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAzNTI3MA=="}], "type": "inlineReview"}, {"oid": "992442e0f40a2e452c23b767ca05bf756827380b", "url": "https://github.com/JMRI/JMRI/commit/992442e0f40a2e452c23b767ca05bf756827380b", "message": "Added usage of XML fragments + links to TVD as example.", "committedDate": "2020-04-18T08:16:18Z", "type": "forcePushed"}, {"oid": "d2497491f30e3281b0b04fae604ec1dc92ba458f", "url": "https://github.com/JMRI/JMRI/commit/d2497491f30e3281b0b04fae604ec1dc92ba458f", "message": "Added usage of XML fragments + links to TVD as example.", "committedDate": "2020-04-18T08:46:35Z", "type": "commit"}, {"oid": "d2497491f30e3281b0b04fae604ec1dc92ba458f", "url": "https://github.com/JMRI/JMRI/commit/d2497491f30e3281b0b04fae604ec1dc92ba458f", "message": "Added usage of XML fragments + links to TVD as example.", "committedDate": "2020-04-18T08:46:35Z", "type": "forcePushed"}]}