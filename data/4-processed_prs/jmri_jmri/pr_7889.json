{"pr_number": 7889, "pr_title": "Add info on using GitHub desktop", "pr_createdAt": "2020-01-07T15:31:32Z", "pr_url": "https://github.com/JMRI/JMRI/pull/7889", "timeline": [{"oid": "bf9125778ee74bd747f9e9e2625ee14acb58d8d7", "url": "https://github.com/JMRI/JMRI/commit/bf9125778ee74bd747f9e9e2625ee14acb58d8d7", "message": "from DanielB", "committedDate": "2020-01-06T22:41:50Z", "type": "commit"}, {"oid": "90db6305451643e7c316d345a883ec0512d11a66", "url": "https://github.com/JMRI/JMRI/commit/90db6305451643e7c316d345a883ec0512d11a66", "message": "formatting of DanielB text", "committedDate": "2020-01-06T22:42:33Z", "type": "commit"}, {"oid": "01a9e7a425bb698651aafa1b3222be09ea050dd0", "url": "https://github.com/JMRI/JMRI/commit/01a9e7a425bb698651aafa1b3222be09ea050dd0", "message": "rel note", "committedDate": "2020-01-06T22:45:49Z", "type": "commit"}, {"oid": "be2b263f3f2ad9d865027bec834dfceab3bbbd1c", "url": "https://github.com/JMRI/JMRI/commit/be2b263f3f2ad9d865027bec834dfceab3bbbd1c", "message": "add GH DEsktop links", "committedDate": "2020-01-07T15:30:21Z", "type": "commit"}, {"oid": "efa7be3f565e3854eb86401da9b3c88dd3c0880a", "url": "https://github.com/JMRI/JMRI/commit/efa7be3f565e3854eb86401da9b3c88dd3c0880a", "message": "fix lnk", "committedDate": "2020-01-07T15:40:27Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzgyMDg4Nw==", "url": "https://github.com/JMRI/JMRI/pull/7889#discussion_r363820887", "bodyText": "This should be GHD_Image_10_PublishBranch.png instead.", "author": "danielb987", "createdAt": "2020-01-07T16:03:03Z", "path": "help/en/html/doc/Technical/githubdesktopinto.shtml", "diffHunk": "@@ -0,0 +1,320 @@\n+<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\"\n+\"http://www.w3.org/TR/html4/strict.dtd\">\n+\n+<html lang=\"en\">\n+<head>\n+  <title>JMRI: Using GitHub Desktop</title>\n+  <meta name=\"keywords\" content=\"JMRI Git Github desktop\">\n+  <!--#include virtual=\"/Style.shtml\" -->\n+</head>\n+<!--#include virtual=\"/Header.shtml\" -->\n+\n+<body>\n+  <div id=\"mBody\">\n+    <!--#include virtual=\"Sidebar.shtml\" -->\n+    <div id=\"mainContent\">\n+\n+      <h1>JMRI: Using GitHub Desktop</h1>\n+\n+First some useful definitions:\n+<dl>\n+<dt>Git:</dt><dd>A version control system, used by the developers of JMRI</dd>\n+<dt>GitHub:</dt><dd>A web site and a host for projects using Git</dd>\n+<dt>GitHub Desktop:</dt><dd>A graphical front end for Git.</dd>\n+</dl>\n+\n+Before using GitHub Desktop, we need to fork the JMRI repository to our own repository.\n+For this, we log in to https://github.com/ , go to the JMRI repository https://github.com/JMRI/JMRI\n+and click the button \"Fork\" on the top right side of the GitHub web site.\n+\n+<p>\n+We then start GitHub Desktop. We now need to clone our JMRI repository to the local computer.\n+\n+<br/><a href=\"images/GHD_1_Clone.png\"><img src=\"images/GHD_Image_1_Clone.png\" height=\"50%\" width=\"50%\"></a><br/>\n+\n+<br/><a href=\"images/GHD_Image_2_Clone.png\"><img src=\"images/GHD_Image_2_Clone.png\" height=\"50%\" width=\"50%\"></a><br/>\n+\n+This tutorial was created by GitHub user danielb987 so the JMRI repository is danielb987/JMRI.\n+<p>\n+Depending on the speed of the Internet connection, cloning the JMRI repository to your\n+computer may take a while. It's about two gigabyte of data to download. Be patient!\n+\n+<h3>GitHub Desktop user interface</h3>\n+\n+<br/><a href=\"images/GHD_Image_3_GitHubDesktop.png\"><img src=\"images/GHD_Image_3_GitHubDesktop.png\" height=\"50%\" width=\"50%\"></a><br/>\n+\n+The GitHub Desktop application has on the top a menu. It can also be accessed by pressing\n+the \"Alt\" key, which is useful if GitHub Desktop is in full screen mode and the menu is\n+invisible.\n+<p>\n+Below the menu, there is three \"buttons\": Current repository, current branch and the\n+Fetch-button. The button \"Current branch\" is used to select another branch or to create a\n+new branch. Note that branches are cheap, so there is no problem creating new ones as needed.\n+<p>\n+The last button, \"Fetch origin\", sends data to and from the GitHub web server. When it says\n+\"Fetch origin\", it only sync the computer with the server, but once there is commits to either\n+download from the GitHub server to the local computer, or commits to upload from the local\n+computer to the server, this button will tell you about it and once you press the button,\n+the commits will be downloaded or uploaded to the server.\n+\n+<h3>Keeping our branches up to date with JMRI</h3>\n+\n+There are several developers on the JMRI project, adding and changing code all the time.\n+We therefore need to keep our local branches up to date with the JMRI master branch.\n+<p>\n+First, select the \"master\" branch to keep it up to date with the JMRI master branch.\n+Then go to the main menu, click on \"Branch\" and \"Merge into current branch\".\n+\n+<br/><a href=\"images/GHD_Image_4_MergeInto.png\"><img src=\"images/GHD_Image_4_MergeInto.png\" height=\"50%\" width=\"50%\"></a><br/>\n+\n+Then select the upstream/master branch. It's at the bottom of the list.\n+\n+<br/><a href=\"images/GHD_Image_5_MergeInto.png\"><img src=\"images/GHD_Image_5_MergeInto.png\" height=\"50%\" width=\"50%\"></a><br/>\n+\n+The text \"20 hours ago\" tells you when the last change was made to the upstream/master\n+branch. The text \"This will merge 14 commits from upstream/master into master\" tells you\n+how many commits that are to be merged, from which branch and to which branch. Ensure\n+you have choosen the correct branches!\n+<p>\n+Click on the button \"Merge upstream/master into master\" to do the merge. When it's finish,\n+you will see this:\n+\n+<br/><a href=\"images/GHD_Image_6_MergeIntoDone.png\"><img src=\"images/GHD_Image_6_MergeIntoDone.png\" height=\"50%\" width=\"50%\"></a><br/>\n+\n+The button \"Fetch origin\" has now changed its name to \"Push origin\". The number 14 tells\n+that there is 14 commits to upload to the server.\n+<p>\n+But wait! Why do we want to _upload_ the commits? Haven't we just downloaded them from\n+JMRI?\n+<p>\n+Yes, we have downloaded the commits from upstream/master into our local master on the\n+local computer. It's now time to upload these commits to our repository on the GitHub\n+server.\n+<p>\n+What's happening is this:\n+We are working with three different repositories. For me, my user name on GitHub is\n+danielb987, so I'm working with these three repositories:\n+<ul>\n+    <li>JMRI/JMRI - The main repository for the JMRI project on the GitHub server\n+    <li>danielb987/JMRI - My repository on the GitHub server\n+    <li>The repository on the local computer\n+</ul>\n+What has happen is that we merged \"upstream/master\" from JMRI/JMRI to our \"master\" branch\n+in our repository on our local computer. Then we need to upload the changes to our \"master\"\n+branch on our local computer to our GitHub repository on the GitHub server, which for me\n+is \"danielb987/JMRI\".\n+\n+<h3>The workflow of JMRI development</h3>\n+\n+The workflow we use:\n+<ol>\n+<li>Select the branch \"master\"\n+\n+<li>Ensure \"master\" is up to date with upstream/master. If it's not, we merge branch\n+   \"upstream/master\" into \"master\" sa previously described.\n+\n+<li>Create a new branch. Please use only english letters, digits and underscore for\n+   the name of the branch. GitHub Desktop can handle international characters, but\n+   if you need help from one of the maintainers, it can be tricky for them to handle\n+   the branch if it has international characters.\n+   Note that \"branches\" are cheap. It's no problem to have many of them.\n+\n+<li>Do a commit then a part of the work is finished. It's often better to have many\n+   small commits than one big commit. But it's good if the project at least can compile\n+   each commit.\n+\n+<li>Do the work you need. If it takes a long time, it's highly recommended to merge\n+   upstream/master into the branch once a week.\n+\n+<li>Once the work is done, a \"Pull Request\" is created. A Pull Request, or PR, is a\n+   way to tell the maintainers of JMRI that you have done this work and you want it\n+   included into JMRI.\n+\n+<li>Then a Pull Request, PR, is created, some automatic tools, for example Travis and\n+   AppVeyor, will start to compile the code and run a big number of tests against it.\n+   Most, but not all, of these tools must succed for the maintainers to be able to\n+   merge your work into JMRI.\n+\n+<li>Once the automatic tools are finished, the maintainers will look at the Pull Request\n+   and check it, and if everything seems OK they will merge your work into JMRI.\n+</ol>\n+\n+<h3>Creating a new branch to work with</h3>\n+\n+First select the master branch and ensure it's up to date. If it's not, please merge\n+upstream/master into master. Se above.\n+<P>\n+Click on the button \"Current branch\" and then click on the button \"New branch\" and give\n+the new branch a name.\n+\n+<br/><a href=\"images/GHD_Image_7_NewBranch.png\"><img src=\"images/GHD_Image_7_NewBranch.png\" height=\"50%\" width=\"50%\"></a><br/>\n+\n+<br/><a href=\"images/GHD_Image_8_NewBranchName.png\"><img src=\"images/GHD_Image_8_NewBranchName.png\" height=\"50%\" width=\"50%\"></a><br/>\n+\n+It's not recommended to use international characters or spaces in the branch name. It\n+may cause problems for the maintainers later.\n+<P>\n+It's possible to create the branch from another branch than the master branch. For\n+example, JMRI may use the branch \"development\" as the branch to base developent on.\n+If this is the case, you select the development branch, then merge the branch\n+\"upstream/development\" into the branch \"development\" and then create the branch from\n+development. Note that if you do this, GitHub desktop will warn you and ask if you\n+really want to start from the development branch or start from the master branch.\n+Select the \"development\" branch in this case.\n+\n+<br/><a href=\"images/GHD_Image_9_NewBranch_Development.png\"><img src=\"images/GHD_Image_9_NewBranch_Development.png\" height=\"50%\" width=\"50%\"></a><br/>\n+\n+When a new branch is created, it only exists on your local computer. In order to push\n+it to the server, we click on the button \"Publish branch\".\n+\n+<br/><a href=\"images/GHD_Image_9_NewBranch_Development.png\"><img src=\"images/GHD_Image_9_NewBranch_Development.png\" height=\"50%\" width=\"50%\"></a><br/>", "originalCommit": "efa7be3f565e3854eb86401da9b3c88dd3c0880a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzgyOTUwNw==", "url": "https://github.com/JMRI/JMRI/pull/7889#discussion_r363829507", "bodyText": "fixed", "author": "bobjacobsen", "createdAt": "2020-01-07T16:20:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzgyMDg4Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzgyMzEwNQ==", "url": "https://github.com/JMRI/JMRI/pull/7889#discussion_r363823105", "bodyText": "This should be GHD_Image_14_CreatePullRequest.png instead.", "author": "danielb987", "createdAt": "2020-01-07T16:07:35Z", "path": "help/en/html/doc/Technical/githubdesktopinto.shtml", "diffHunk": "@@ -0,0 +1,320 @@\n+<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\"\n+\"http://www.w3.org/TR/html4/strict.dtd\">\n+\n+<html lang=\"en\">\n+<head>\n+  <title>JMRI: Using GitHub Desktop</title>\n+  <meta name=\"keywords\" content=\"JMRI Git Github desktop\">\n+  <!--#include virtual=\"/Style.shtml\" -->\n+</head>\n+<!--#include virtual=\"/Header.shtml\" -->\n+\n+<body>\n+  <div id=\"mBody\">\n+    <!--#include virtual=\"Sidebar.shtml\" -->\n+    <div id=\"mainContent\">\n+\n+      <h1>JMRI: Using GitHub Desktop</h1>\n+\n+First some useful definitions:\n+<dl>\n+<dt>Git:</dt><dd>A version control system, used by the developers of JMRI</dd>\n+<dt>GitHub:</dt><dd>A web site and a host for projects using Git</dd>\n+<dt>GitHub Desktop:</dt><dd>A graphical front end for Git.</dd>\n+</dl>\n+\n+Before using GitHub Desktop, we need to fork the JMRI repository to our own repository.\n+For this, we log in to https://github.com/ , go to the JMRI repository https://github.com/JMRI/JMRI\n+and click the button \"Fork\" on the top right side of the GitHub web site.\n+\n+<p>\n+We then start GitHub Desktop. We now need to clone our JMRI repository to the local computer.\n+\n+<br/><a href=\"images/GHD_1_Clone.png\"><img src=\"images/GHD_Image_1_Clone.png\" height=\"50%\" width=\"50%\"></a><br/>\n+\n+<br/><a href=\"images/GHD_Image_2_Clone.png\"><img src=\"images/GHD_Image_2_Clone.png\" height=\"50%\" width=\"50%\"></a><br/>\n+\n+This tutorial was created by GitHub user danielb987 so the JMRI repository is danielb987/JMRI.\n+<p>\n+Depending on the speed of the Internet connection, cloning the JMRI repository to your\n+computer may take a while. It's about two gigabyte of data to download. Be patient!\n+\n+<h3>GitHub Desktop user interface</h3>\n+\n+<br/><a href=\"images/GHD_Image_3_GitHubDesktop.png\"><img src=\"images/GHD_Image_3_GitHubDesktop.png\" height=\"50%\" width=\"50%\"></a><br/>\n+\n+The GitHub Desktop application has on the top a menu. It can also be accessed by pressing\n+the \"Alt\" key, which is useful if GitHub Desktop is in full screen mode and the menu is\n+invisible.\n+<p>\n+Below the menu, there is three \"buttons\": Current repository, current branch and the\n+Fetch-button. The button \"Current branch\" is used to select another branch or to create a\n+new branch. Note that branches are cheap, so there is no problem creating new ones as needed.\n+<p>\n+The last button, \"Fetch origin\", sends data to and from the GitHub web server. When it says\n+\"Fetch origin\", it only sync the computer with the server, but once there is commits to either\n+download from the GitHub server to the local computer, or commits to upload from the local\n+computer to the server, this button will tell you about it and once you press the button,\n+the commits will be downloaded or uploaded to the server.\n+\n+<h3>Keeping our branches up to date with JMRI</h3>\n+\n+There are several developers on the JMRI project, adding and changing code all the time.\n+We therefore need to keep our local branches up to date with the JMRI master branch.\n+<p>\n+First, select the \"master\" branch to keep it up to date with the JMRI master branch.\n+Then go to the main menu, click on \"Branch\" and \"Merge into current branch\".\n+\n+<br/><a href=\"images/GHD_Image_4_MergeInto.png\"><img src=\"images/GHD_Image_4_MergeInto.png\" height=\"50%\" width=\"50%\"></a><br/>\n+\n+Then select the upstream/master branch. It's at the bottom of the list.\n+\n+<br/><a href=\"images/GHD_Image_5_MergeInto.png\"><img src=\"images/GHD_Image_5_MergeInto.png\" height=\"50%\" width=\"50%\"></a><br/>\n+\n+The text \"20 hours ago\" tells you when the last change was made to the upstream/master\n+branch. The text \"This will merge 14 commits from upstream/master into master\" tells you\n+how many commits that are to be merged, from which branch and to which branch. Ensure\n+you have choosen the correct branches!\n+<p>\n+Click on the button \"Merge upstream/master into master\" to do the merge. When it's finish,\n+you will see this:\n+\n+<br/><a href=\"images/GHD_Image_6_MergeIntoDone.png\"><img src=\"images/GHD_Image_6_MergeIntoDone.png\" height=\"50%\" width=\"50%\"></a><br/>\n+\n+The button \"Fetch origin\" has now changed its name to \"Push origin\". The number 14 tells\n+that there is 14 commits to upload to the server.\n+<p>\n+But wait! Why do we want to _upload_ the commits? Haven't we just downloaded them from\n+JMRI?\n+<p>\n+Yes, we have downloaded the commits from upstream/master into our local master on the\n+local computer. It's now time to upload these commits to our repository on the GitHub\n+server.\n+<p>\n+What's happening is this:\n+We are working with three different repositories. For me, my user name on GitHub is\n+danielb987, so I'm working with these three repositories:\n+<ul>\n+    <li>JMRI/JMRI - The main repository for the JMRI project on the GitHub server\n+    <li>danielb987/JMRI - My repository on the GitHub server\n+    <li>The repository on the local computer\n+</ul>\n+What has happen is that we merged \"upstream/master\" from JMRI/JMRI to our \"master\" branch\n+in our repository on our local computer. Then we need to upload the changes to our \"master\"\n+branch on our local computer to our GitHub repository on the GitHub server, which for me\n+is \"danielb987/JMRI\".\n+\n+<h3>The workflow of JMRI development</h3>\n+\n+The workflow we use:\n+<ol>\n+<li>Select the branch \"master\"\n+\n+<li>Ensure \"master\" is up to date with upstream/master. If it's not, we merge branch\n+   \"upstream/master\" into \"master\" sa previously described.\n+\n+<li>Create a new branch. Please use only english letters, digits and underscore for\n+   the name of the branch. GitHub Desktop can handle international characters, but\n+   if you need help from one of the maintainers, it can be tricky for them to handle\n+   the branch if it has international characters.\n+   Note that \"branches\" are cheap. It's no problem to have many of them.\n+\n+<li>Do a commit then a part of the work is finished. It's often better to have many\n+   small commits than one big commit. But it's good if the project at least can compile\n+   each commit.\n+\n+<li>Do the work you need. If it takes a long time, it's highly recommended to merge\n+   upstream/master into the branch once a week.\n+\n+<li>Once the work is done, a \"Pull Request\" is created. A Pull Request, or PR, is a\n+   way to tell the maintainers of JMRI that you have done this work and you want it\n+   included into JMRI.\n+\n+<li>Then a Pull Request, PR, is created, some automatic tools, for example Travis and\n+   AppVeyor, will start to compile the code and run a big number of tests against it.\n+   Most, but not all, of these tools must succed for the maintainers to be able to\n+   merge your work into JMRI.\n+\n+<li>Once the automatic tools are finished, the maintainers will look at the Pull Request\n+   and check it, and if everything seems OK they will merge your work into JMRI.\n+</ol>\n+\n+<h3>Creating a new branch to work with</h3>\n+\n+First select the master branch and ensure it's up to date. If it's not, please merge\n+upstream/master into master. Se above.\n+<P>\n+Click on the button \"Current branch\" and then click on the button \"New branch\" and give\n+the new branch a name.\n+\n+<br/><a href=\"images/GHD_Image_7_NewBranch.png\"><img src=\"images/GHD_Image_7_NewBranch.png\" height=\"50%\" width=\"50%\"></a><br/>\n+\n+<br/><a href=\"images/GHD_Image_8_NewBranchName.png\"><img src=\"images/GHD_Image_8_NewBranchName.png\" height=\"50%\" width=\"50%\"></a><br/>\n+\n+It's not recommended to use international characters or spaces in the branch name. It\n+may cause problems for the maintainers later.\n+<P>\n+It's possible to create the branch from another branch than the master branch. For\n+example, JMRI may use the branch \"development\" as the branch to base developent on.\n+If this is the case, you select the development branch, then merge the branch\n+\"upstream/development\" into the branch \"development\" and then create the branch from\n+development. Note that if you do this, GitHub desktop will warn you and ask if you\n+really want to start from the development branch or start from the master branch.\n+Select the \"development\" branch in this case.\n+\n+<br/><a href=\"images/GHD_Image_9_NewBranch_Development.png\"><img src=\"images/GHD_Image_9_NewBranch_Development.png\" height=\"50%\" width=\"50%\"></a><br/>\n+\n+When a new branch is created, it only exists on your local computer. In order to push\n+it to the server, we click on the button \"Publish branch\".\n+\n+<br/><a href=\"images/GHD_Image_9_NewBranch_Development.png\"><img src=\"images/GHD_Image_9_NewBranch_Development.png\" height=\"50%\" width=\"50%\"></a><br/>\n+\n+<h3>Do a commit</h3>\n+\n+Using your favourite development tool, for example Eclipse or NetBeans, do the changes\n+you want. For the purpose of this text, we create a simple class HelloWord.java.\n+\n+<br/><a href=\"images/GHD_Image_11_NewClass.png\"><img src=\"images/GHD_Image_11_NewClass.png\" height=\"50%\" width=\"50%\"></a><br/>\n+\n+GitHub Desktop will now show the changes we have done, in this case added a new class.\n+We add a description for the commit that describes what this commit does and then click\n+on the button \"Commit to ...\". The branch we are commiting to is \"hello_world\" so the\n+button shows \"Commit to hello_world\".\n+\n+<br/><a href=\"images/GHD_Image_12_CreateCommit.png\"><img src=\"images/GHD_Image_12_CreateCommit.png\" height=\"50%\" width=\"50%\"></a><br/>\n+\n+We then click the button \"Push origin\" to upload our commit to the GitHub server. Note\n+that this sends the commit to my repository, not the JMRI repository.\n+\n+<h3>Create a Pull Request, PR</h3>\n+\n+When we have done the commits we want, it's time to do a Pull Request, PR. It tells the\n+maintainers of JMRI that you want this code to be included into JMRI.\n+<P>\n+In order to do that, we click on the button \"Create Pull Request\".\n+\n+<br/><a href=\"images/GHD_Image_13_CreatePullRequest.png\"><img src=\"images/GHD_Image_13_CreatePullRequest.png\" height=\"50%\" width=\"50%\"></a><br/>\n+\n+This will open a web browser. If you are not logged in to GitHub, you need to log in.\n+When you have logged in, you will see the web page for creation of a Pull Request.\n+\n+<br/><a href=\"images/GHD_Image_13_CreatePullRequest.png\"><img src=\"images/GHD_Image_13_CreatePullRequest.png\" height=\"50%\" width=\"50%\"></a><br/>", "originalCommit": "efa7be3f565e3854eb86401da9b3c88dd3c0880a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzgyOTIyMQ==", "url": "https://github.com/JMRI/JMRI/pull/7889#discussion_r363829221", "bodyText": "Image_14_CreatePullRequest.png should be renamed to GHD_Image_14_CreatePullRequest.png", "author": "danielb987", "createdAt": "2020-01-07T16:19:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzgyMzEwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzgzMDI2Mw==", "url": "https://github.com/JMRI/JMRI/pull/7889#discussion_r363830263", "bodyText": "I don't have a file by that name. Could it be the \"15\" one?\nhelp/en/html/doc/Technical/images/GHD_Image_10_PublishBranch.png\nhelp/en/html/doc/Technical/images/GHD_Image_11_NewClass.png\nhelp/en/html/doc/Technical/images/GHD_Image_12_CreateCommit.png\nhelp/en/html/doc/Technical/images/GHD_Image_12_PushCommit.png\nhelp/en/html/doc/Technical/images/GHD_Image_13_CreatePullRequest.png\nhelp/en/html/doc/Technical/images/GHD_Image_15_CreatePullRequest.png\nhelp/en/html/doc/Technical/images/GHD_Image_16_CreatePullRequestDone.png\nhelp/en/html/doc/Technical/images/GHD_Image_17_Conflict.png\nhelp/en/html/doc/Technical/images/GHD_Image_18_Conflict.png\nhelp/en/html/doc/Technical/images/GHD_Image_19_Conflict.png\nhelp/en/html/doc/Technical/images/GHD_Image_1_Clone.png\nhelp/en/html/doc/Technical/images/GHD_Image_20_ConflictSolving.png\nhelp/en/html/doc/Technical/images/GHD_Image_21_ConflictSolving.png\nhelp/en/html/doc/Technical/images/GHD_Image_22_ConflictSolving.png\nhelp/en/html/doc/Technical/images/GHD_Image_2_Clone.png\nhelp/en/html/doc/Technical/images/GHD_Image_3_GitHubDesktop.png\nhelp/en/html/doc/Technical/images/GHD_Image_4_MergeInto.png\nhelp/en/html/doc/Technical/images/GHD_Image_5_MergeInto.png\nhelp/en/html/doc/Technical/images/GHD_Image_6_MergeIntoDone.png\nhelp/en/html/doc/Technical/images/GHD_Image_7_NewBranch.png\nhelp/en/html/doc/Technical/images/GHD_Image_8_NewBranchName.png\nhelp/en/html/doc/Technical/images/GHD_Image_9_NewBranch_Development.png", "author": "bobjacobsen", "createdAt": "2020-01-07T16:22:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzgyMzEwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzgzMzkxMQ==", "url": "https://github.com/JMRI/JMRI/pull/7889#discussion_r363833911", "bodyText": "The file is in the PR, but has the wrong name.\nhelp/en/html/doc/Technical/images/Image_14_CreatePullRequest.png", "author": "danielb987", "createdAt": "2020-01-07T16:29:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzgyMzEwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzgzOTU2Mg==", "url": "https://github.com/JMRI/JMRI/pull/7889#discussion_r363839562", "bodyText": "Thanks! Fixed, I think.", "author": "bobjacobsen", "createdAt": "2020-01-07T16:40:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzgyMzEwNQ=="}], "type": "inlineReview"}, {"oid": "5daf758c6e1344f2c9d0589e18f054e2da1f9cd6", "url": "https://github.com/JMRI/JMRI/commit/5daf758c6e1344f2c9d0589e18f054e2da1f9cd6", "message": "fix link", "committedDate": "2020-01-07T16:20:22Z", "type": "commit"}, {"oid": "0294624a4772284eca2edf96458bc87449e67806", "url": "https://github.com/JMRI/JMRI/commit/0294624a4772284eca2edf96458bc87449e67806", "message": "proper imafge file name", "committedDate": "2020-01-07T16:40:19Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzg0ODM1Nw==", "url": "https://github.com/JMRI/JMRI/pull/7889#discussion_r363848357", "bodyText": "The link is changed but not the image tag....    :)", "author": "danielb987", "createdAt": "2020-01-07T16:58:12Z", "path": "help/en/html/doc/Technical/githubdesktopinto.shtml", "diffHunk": "@@ -0,0 +1,320 @@\n+<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\"\n+\"http://www.w3.org/TR/html4/strict.dtd\">\n+\n+<html lang=\"en\">\n+<head>\n+  <title>JMRI: Using GitHub Desktop</title>\n+  <meta name=\"keywords\" content=\"JMRI Git Github desktop\">\n+  <!--#include virtual=\"/Style.shtml\" -->\n+</head>\n+<!--#include virtual=\"/Header.shtml\" -->\n+\n+<body>\n+  <div id=\"mBody\">\n+    <!--#include virtual=\"Sidebar.shtml\" -->\n+    <div id=\"mainContent\">\n+\n+      <h1>JMRI: Using GitHub Desktop</h1>\n+\n+First some useful definitions:\n+<dl>\n+<dt>Git:</dt><dd>A version control system, used by the developers of JMRI</dd>\n+<dt>GitHub:</dt><dd>A web site and a host for projects using Git</dd>\n+<dt>GitHub Desktop:</dt><dd>A graphical front end for Git.</dd>\n+</dl>\n+\n+Before using GitHub Desktop, we need to fork the JMRI repository to our own repository.\n+For this, we log in to https://github.com/ , go to the JMRI repository https://github.com/JMRI/JMRI\n+and click the button \"Fork\" on the top right side of the GitHub web site.\n+\n+<p>\n+We then start GitHub Desktop. We now need to clone our JMRI repository to the local computer.\n+\n+<br/><a href=\"images/GHD_1_Clone.png\"><img src=\"images/GHD_Image_1_Clone.png\" height=\"50%\" width=\"50%\"></a><br/>\n+\n+<br/><a href=\"images/GHD_Image_2_Clone.png\"><img src=\"images/GHD_Image_2_Clone.png\" height=\"50%\" width=\"50%\"></a><br/>\n+\n+This tutorial was created by GitHub user danielb987 so the JMRI repository is danielb987/JMRI.\n+<p>\n+Depending on the speed of the Internet connection, cloning the JMRI repository to your\n+computer may take a while. It's about two gigabyte of data to download. Be patient!\n+\n+<h3>GitHub Desktop user interface</h3>\n+\n+<br/><a href=\"images/GHD_Image_3_GitHubDesktop.png\"><img src=\"images/GHD_Image_3_GitHubDesktop.png\" height=\"50%\" width=\"50%\"></a><br/>\n+\n+The GitHub Desktop application has on the top a menu. It can also be accessed by pressing\n+the \"Alt\" key, which is useful if GitHub Desktop is in full screen mode and the menu is\n+invisible.\n+<p>\n+Below the menu, there is three \"buttons\": Current repository, current branch and the\n+Fetch-button. The button \"Current branch\" is used to select another branch or to create a\n+new branch. Note that branches are cheap, so there is no problem creating new ones as needed.\n+<p>\n+The last button, \"Fetch origin\", sends data to and from the GitHub web server. When it says\n+\"Fetch origin\", it only sync the computer with the server, but once there is commits to either\n+download from the GitHub server to the local computer, or commits to upload from the local\n+computer to the server, this button will tell you about it and once you press the button,\n+the commits will be downloaded or uploaded to the server.\n+\n+<h3>Keeping our branches up to date with JMRI</h3>\n+\n+There are several developers on the JMRI project, adding and changing code all the time.\n+We therefore need to keep our local branches up to date with the JMRI master branch.\n+<p>\n+First, select the \"master\" branch to keep it up to date with the JMRI master branch.\n+Then go to the main menu, click on \"Branch\" and \"Merge into current branch\".\n+\n+<br/><a href=\"images/GHD_Image_4_MergeInto.png\"><img src=\"images/GHD_Image_4_MergeInto.png\" height=\"50%\" width=\"50%\"></a><br/>\n+\n+Then select the upstream/master branch. It's at the bottom of the list.\n+\n+<br/><a href=\"images/GHD_Image_5_MergeInto.png\"><img src=\"images/GHD_Image_5_MergeInto.png\" height=\"50%\" width=\"50%\"></a><br/>\n+\n+The text \"20 hours ago\" tells you when the last change was made to the upstream/master\n+branch. The text \"This will merge 14 commits from upstream/master into master\" tells you\n+how many commits that are to be merged, from which branch and to which branch. Ensure\n+you have choosen the correct branches!\n+<p>\n+Click on the button \"Merge upstream/master into master\" to do the merge. When it's finish,\n+you will see this:\n+\n+<br/><a href=\"images/GHD_Image_6_MergeIntoDone.png\"><img src=\"images/GHD_Image_6_MergeIntoDone.png\" height=\"50%\" width=\"50%\"></a><br/>\n+\n+The button \"Fetch origin\" has now changed its name to \"Push origin\". The number 14 tells\n+that there is 14 commits to upload to the server.\n+<p>\n+But wait! Why do we want to _upload_ the commits? Haven't we just downloaded them from\n+JMRI?\n+<p>\n+Yes, we have downloaded the commits from upstream/master into our local master on the\n+local computer. It's now time to upload these commits to our repository on the GitHub\n+server.\n+<p>\n+What's happening is this:\n+We are working with three different repositories. For me, my user name on GitHub is\n+danielb987, so I'm working with these three repositories:\n+<ul>\n+    <li>JMRI/JMRI - The main repository for the JMRI project on the GitHub server\n+    <li>danielb987/JMRI - My repository on the GitHub server\n+    <li>The repository on the local computer\n+</ul>\n+What has happen is that we merged \"upstream/master\" from JMRI/JMRI to our \"master\" branch\n+in our repository on our local computer. Then we need to upload the changes to our \"master\"\n+branch on our local computer to our GitHub repository on the GitHub server, which for me\n+is \"danielb987/JMRI\".\n+\n+<h3>The workflow of JMRI development</h3>\n+\n+The workflow we use:\n+<ol>\n+<li>Select the branch \"master\"\n+\n+<li>Ensure \"master\" is up to date with upstream/master. If it's not, we merge branch\n+   \"upstream/master\" into \"master\" sa previously described.\n+\n+<li>Create a new branch. Please use only english letters, digits and underscore for\n+   the name of the branch. GitHub Desktop can handle international characters, but\n+   if you need help from one of the maintainers, it can be tricky for them to handle\n+   the branch if it has international characters.\n+   Note that \"branches\" are cheap. It's no problem to have many of them.\n+\n+<li>Do a commit then a part of the work is finished. It's often better to have many\n+   small commits than one big commit. But it's good if the project at least can compile\n+   each commit.\n+\n+<li>Do the work you need. If it takes a long time, it's highly recommended to merge\n+   upstream/master into the branch once a week.\n+\n+<li>Once the work is done, a \"Pull Request\" is created. A Pull Request, or PR, is a\n+   way to tell the maintainers of JMRI that you have done this work and you want it\n+   included into JMRI.\n+\n+<li>Then a Pull Request, PR, is created, some automatic tools, for example Travis and\n+   AppVeyor, will start to compile the code and run a big number of tests against it.\n+   Most, but not all, of these tools must succed for the maintainers to be able to\n+   merge your work into JMRI.\n+\n+<li>Once the automatic tools are finished, the maintainers will look at the Pull Request\n+   and check it, and if everything seems OK they will merge your work into JMRI.\n+</ol>\n+\n+<h3>Creating a new branch to work with</h3>\n+\n+First select the master branch and ensure it's up to date. If it's not, please merge\n+upstream/master into master. Se above.\n+<P>\n+Click on the button \"Current branch\" and then click on the button \"New branch\" and give\n+the new branch a name.\n+\n+<br/><a href=\"images/GHD_Image_7_NewBranch.png\"><img src=\"images/GHD_Image_7_NewBranch.png\" height=\"50%\" width=\"50%\"></a><br/>\n+\n+<br/><a href=\"images/GHD_Image_8_NewBranchName.png\"><img src=\"images/GHD_Image_8_NewBranchName.png\" height=\"50%\" width=\"50%\"></a><br/>\n+\n+It's not recommended to use international characters or spaces in the branch name. It\n+may cause problems for the maintainers later.\n+<P>\n+It's possible to create the branch from another branch than the master branch. For\n+example, JMRI may use the branch \"development\" as the branch to base developent on.\n+If this is the case, you select the development branch, then merge the branch\n+\"upstream/development\" into the branch \"development\" and then create the branch from\n+development. Note that if you do this, GitHub desktop will warn you and ask if you\n+really want to start from the development branch or start from the master branch.\n+Select the \"development\" branch in this case.\n+\n+<br/><a href=\"images/GHD_Image_9_NewBranch_Development.png\"><img src=\"images/GHD_Image_9_NewBranch_Development.png\" height=\"50%\" width=\"50%\"></a><br/>\n+\n+When a new branch is created, it only exists on your local computer. In order to push\n+it to the server, we click on the button \"Publish branch\".\n+\n+<br/><a href=\"images/GHD_Image_10_PublishBranch.png\"><img src=\"images/GHD_Image_10_PublishBranch.png\" height=\"50%\" width=\"50%\"></a><br/>\n+\n+<h3>Do a commit</h3>\n+\n+Using your favourite development tool, for example Eclipse or NetBeans, do the changes\n+you want. For the purpose of this text, we create a simple class HelloWord.java.\n+\n+<br/><a href=\"images/GHD_Image_11_NewClass.png\"><img src=\"images/GHD_Image_11_NewClass.png\" height=\"50%\" width=\"50%\"></a><br/>\n+\n+GitHub Desktop will now show the changes we have done, in this case added a new class.\n+We add a description for the commit that describes what this commit does and then click\n+on the button \"Commit to ...\". The branch we are commiting to is \"hello_world\" so the\n+button shows \"Commit to hello_world\".\n+\n+<br/><a href=\"images/GHD_Image_12_CreateCommit.png\"><img src=\"images/GHD_Image_12_CreateCommit.png\" height=\"50%\" width=\"50%\"></a><br/>\n+\n+We then click the button \"Push origin\" to upload our commit to the GitHub server. Note\n+that this sends the commit to my repository, not the JMRI repository.\n+\n+<h3>Create a Pull Request, PR</h3>\n+\n+When we have done the commits we want, it's time to do a Pull Request, PR. It tells the\n+maintainers of JMRI that you want this code to be included into JMRI.\n+<P>\n+In order to do that, we click on the button \"Create Pull Request\".\n+\n+<br/><a href=\"images/GHD_Image_13_CreatePullRequest.png\"><img src=\"images/GHD_Image_13_CreatePullRequest.png\" height=\"50%\" width=\"50%\"></a><br/>\n+\n+This will open a web browser. If you are not logged in to GitHub, you need to log in.\n+When you have logged in, you will see the web page for creation of a Pull Request.\n+\n+<br/><a href=\"images/GHD_Image_14_CreatePullRequest.png\"><img src=\"images/GHD_Image_13_CreatePullRequest.png\" height=\"50%\" width=\"50%\"></a><br/>", "originalCommit": "0294624a4772284eca2edf96458bc87449e67806", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "c2da3d03f13651e9a95f3646a81e7e8ad8678677", "url": "https://github.com/JMRI/JMRI/commit/c2da3d03f13651e9a95f3646a81e7e8ad8678677", "message": "fix image", "committedDate": "2020-01-07T17:06:59Z", "type": "commit"}]}