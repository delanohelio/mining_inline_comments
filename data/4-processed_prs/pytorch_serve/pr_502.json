{"pr_number": 502, "pr_title": "Refactor BaseHandler", "pr_createdAt": "2020-07-07T19:19:34Z", "pr_url": "https://github.com/pytorch/serve/pull/502", "timeline": [{"oid": "0982cecab6dc5ca3512669aa3b792ba5fbe1e9cf", "url": "https://github.com/pytorch/serve/commit/0982cecab6dc5ca3512669aa3b792ba5fbe1e9cf", "message": "Refactor BaseHandler", "committedDate": "2020-07-07T13:23:35Z", "type": "commit"}, {"oid": "5c9acb4a8b6d0b7bea2f1f2a825f2d842e3655b0", "url": "https://github.com/pytorch/serve/commit/5c9acb4a8b6d0b7bea2f1f2a825f2d842e3655b0", "message": "Adding in unit tests", "committedDate": "2020-07-07T14:19:30Z", "type": "commit"}, {"oid": "3cfe6199f1ec3ac72f69f494ecc5c59d70b6843b", "url": "https://github.com/pytorch/serve/commit/3cfe6199f1ec3ac72f69f494ecc5c59d70b6843b", "message": "Fixed gitignore in this branch", "committedDate": "2020-07-07T14:24:16Z", "type": "commit"}, {"oid": "c5aadbc706c0ab65eb1b8ada0cc721446ced5bc5", "url": "https://github.com/pytorch/serve/commit/c5aadbc706c0ab65eb1b8ada0cc721446ced5bc5", "message": "Fix a bug with Image Segmenter", "committedDate": "2020-07-07T16:52:28Z", "type": "commit"}, {"oid": "fd2b428920e12e57bbe5f63fc87cbd2e8ca4869f", "url": "https://github.com/pytorch/serve/commit/fd2b428920e12e57bbe5f63fc87cbd2e8ca4869f", "message": "Updated Object Detector to reuse functionality; consistency", "committedDate": "2020-07-07T19:14:48Z", "type": "commit"}, {"oid": "5ebbd9fd9441e0c6cace142cc19aad2cc46190f3", "url": "https://github.com/pytorch/serve/commit/5ebbd9fd9441e0c6cace142cc19aad2cc46190f3", "message": "Fix pylint errors", "committedDate": "2020-07-08T00:26:33Z", "type": "commit"}, {"oid": "61d447117e21bb942aec0b7a6ceb72e329385cbe", "url": "https://github.com/pytorch/serve/commit/61d447117e21bb942aec0b7a6ceb72e329385cbe", "message": "Backwards compat for index_names.json", "committedDate": "2020-07-08T02:25:46Z", "type": "commit"}, {"oid": "7b7743c558652a240963a1e1dda804be7014a4b4", "url": "https://github.com/pytorch/serve/commit/7b7743c558652a240963a1e1dda804be7014a4b4", "message": "Fixed Image Segmenter again", "committedDate": "2020-07-08T04:52:27Z", "type": "commit"}, {"oid": "45ac4999fb081a97de0a3d80b2fb095e5e74b126", "url": "https://github.com/pytorch/serve/commit/45ac4999fb081a97de0a3d80b2fb095e5e74b126", "message": "Made the compat layer in text actually compat.", "committedDate": "2020-07-08T14:58:39Z", "type": "commit"}, {"oid": "7e6619a78ef420e29fe4b83e6f26c017221663a3", "url": "https://github.com/pytorch/serve/commit/7e6619a78ef420e29fe4b83e6f26c017221663a3", "message": "Removed batching from text classifier", "committedDate": "2020-07-08T16:47:12Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTY4NzExNg==", "url": "https://github.com/pytorch/serve/pull/502#discussion_r451687116", "bodyText": "should we enforce this?\nI guess it makes sense, not sure what the side effects are?\nIt's probably worth passing this through the regression test suite", "author": "mycpuorg", "createdAt": "2020-07-08T16:50:01Z", "path": "ts/torch_handler/base_handler.py", "diffHunk": "@@ -69,37 +62,61 @@ def initialize(self, context):\n         # Read the mapping file, index to object name\n         mapping_file_path = os.path.join(model_dir, \"index_to_name.json\")\n \n-        if os.path.isfile(mapping_file_path):\n-            with open(mapping_file_path) as f:\n-                self.mapping = json.load(f)\n-        else:\n-            logger.warning('Missing the index_to_name.json file. Inference output will not include class name.')\n+        # Load class mapping for classifiers\n+        mapping_file_path = os.path.join(model_dir, \"index_to_name.json\")\n+        self.mapping = load_label_mapping(mapping_file_path)\n \n         self.initialized = True\n \n+    def _load_torchscript_model(self, model_pt_path):\n+        return torch.jit.load(model_pt_path)\n+\n+    def _load_pickled_model(self, model_dir, model_file, model_pt_path):\n+        model_def_path = os.path.join(model_dir, model_file)\n+        if not os.path.isfile(model_def_path):\n+            raise RuntimeError(\"Missing the model.py file\")\n+\n+        module = importlib.import_module(model_file.split(\".\")[0])\n+        model_class_definitions = list_classes_from_module(module)\n+        if len(model_class_definitions) != 1:\n+            raise ValueError(\"Expected only one class as model definition. {}\".format(\n+                model_class_definitions))\n+\n+        model_class = model_class_definitions[0]\n+        state_dict = torch.load(model_pt_path)\n+        model = model_class()\n+        model.load_state_dict(state_dict)\n+        return model\n+\n+\n+\n     def preprocess(self, data):\n         \"\"\"\n         Override to customize the pre-processing\n-        :param data: input data\n-        :return: input data\n+        :param data: Python list of data items\n+        :return: input tensor on a device\n         \"\"\"\n-        return data\n+        return torch.as_tensor(data, device=self.device)", "originalCommit": "45ac4999fb081a97de0a3d80b2fb095e5e74b126", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTk0ODUwMA==", "url": "https://github.com/pytorch/serve/pull/502#discussion_r451948500", "bodyText": "Mostly this is to clarify what should happen so developers can consume the other methods without overriding.", "author": "htappen", "createdAt": "2020-07-09T03:52:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTY4NzExNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTY4NzYyNg==", "url": "https://github.com/pytorch/serve/pull/502#discussion_r451687626", "bodyText": "same comment as above", "author": "mycpuorg", "createdAt": "2020-07-08T16:50:46Z", "path": "ts/torch_handler/base_handler.py", "diffHunk": "@@ -69,37 +62,61 @@ def initialize(self, context):\n         # Read the mapping file, index to object name\n         mapping_file_path = os.path.join(model_dir, \"index_to_name.json\")\n \n-        if os.path.isfile(mapping_file_path):\n-            with open(mapping_file_path) as f:\n-                self.mapping = json.load(f)\n-        else:\n-            logger.warning('Missing the index_to_name.json file. Inference output will not include class name.')\n+        # Load class mapping for classifiers\n+        mapping_file_path = os.path.join(model_dir, \"index_to_name.json\")\n+        self.mapping = load_label_mapping(mapping_file_path)\n \n         self.initialized = True\n \n+    def _load_torchscript_model(self, model_pt_path):\n+        return torch.jit.load(model_pt_path)\n+\n+    def _load_pickled_model(self, model_dir, model_file, model_pt_path):\n+        model_def_path = os.path.join(model_dir, model_file)\n+        if not os.path.isfile(model_def_path):\n+            raise RuntimeError(\"Missing the model.py file\")\n+\n+        module = importlib.import_module(model_file.split(\".\")[0])\n+        model_class_definitions = list_classes_from_module(module)\n+        if len(model_class_definitions) != 1:\n+            raise ValueError(\"Expected only one class as model definition. {}\".format(\n+                model_class_definitions))\n+\n+        model_class = model_class_definitions[0]\n+        state_dict = torch.load(model_pt_path)\n+        model = model_class()\n+        model.load_state_dict(state_dict)\n+        return model\n+\n+\n+\n     def preprocess(self, data):\n         \"\"\"\n         Override to customize the pre-processing\n-        :param data: input data\n-        :return: input data\n+        :param data: Python list of data items\n+        :return: input tensor on a device\n         \"\"\"\n-        return data\n+        return torch.as_tensor(data, device=self.device)\n \n     def inference(self, data):\n         \"\"\"\n         Override to customize the inference\n-        :param data: pre-processed data\n-        :return: prediction output\n+        :param data: Torch tensor, matching the model input shape\n+        :return: Prediction output as Torch tensor\n         \"\"\"\n-        return self.model(data)\n+        marshalled_data = data.to(self.device)", "originalCommit": "45ac4999fb081a97de0a3d80b2fb095e5e74b126", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTk0ODYyNg==", "url": "https://github.com/pytorch/serve/pull/502#discussion_r451948626", "bodyText": "Yes, this is mostly to make it clear what should come out of preprocess and allow for using inference without an override.", "author": "htappen", "createdAt": "2020-07-09T03:53:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTY4NzYyNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTY4ODYxOQ==", "url": "https://github.com/pytorch/serve/pull/502#discussion_r451688619", "bodyText": "something something imagenet data flag here?", "author": "mycpuorg", "createdAt": "2020-07-08T16:52:20Z", "path": "ts/torch_handler/image_classifier.py", "diffHunk": "@@ -17,77 +15,24 @@ class ImageClassifier(VisionHandler):\n     and returns the name of object in that image.\n     \"\"\"\n \n-    TOP_FIVE_CLASSES = 5\n-\n-    def __init__(self):\n-        super(ImageClassifier, self).__init__()\n-        self.topk = ImageClassifier.TOP_FIVE_CLASSES\n+    topk = 5\n+    image_processing = transforms.Compose([\n+        transforms.Resize(256),\n+        transforms.CenterCrop(224),\n+        transforms.ToTensor(),\n+        transforms.Normalize(mean=[0.485, 0.456, 0.406],", "originalCommit": "45ac4999fb081a97de0a3d80b2fb095e5e74b126", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTk0ODcwNQ==", "url": "https://github.com/pytorch/serve/pull/502#discussion_r451948705", "bodyText": "Sorry, I didn't quite understand. Do you mean adding a comment?", "author": "htappen", "createdAt": "2020-07-09T03:53:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTY4ODYxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTk4NDE4Nw==", "url": "https://github.com/pytorch/serve/pull/502#discussion_r451984187", "bodyText": "Since this is same for image classifier and segmenter, can you move it as a generic method which returns this to VisionHandler and probably override it in object detector?", "author": "dhaniram-kshirsagar", "createdAt": "2020-07-09T06:08:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTY4ODYxOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTcxNTI3Nw==", "url": "https://github.com/pytorch/serve/pull/502#discussion_r451715277", "bodyText": "Might be worth keeping the output of example inputs somewhere for people to cross verify. Maybe example_output.json", "author": "mycpuorg", "createdAt": "2020-07-08T17:37:00Z", "path": "examples/image_segmenter/README.md", "diffHunk": "@@ -18,90 +18,4 @@ wget https://download.pytorch.org/models/fcn_resnet101_coco-7ecb50ca.pth\n     curl http://127.0.0.1:8080/predictions/fcn -T examples/image_segmenter/fcn/persons.jpg\n     ```\n * Output\n-\n-```json\n-[[[11.49452    11.49452    11.49452    ... 10.846567   10.846567", "originalCommit": "45ac4999fb081a97de0a3d80b2fb095e5e74b126", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTk0ODg4Nw==", "url": "https://github.com/pytorch/serve/pull/502#discussion_r451948887", "bodyText": "I can update this example. As far as I could tell, image_segmenter never actually worked correctly. So, I had to delete this big mass of text to replace it with a working example.", "author": "htappen", "createdAt": "2020-07-09T03:54:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTcxNTI3Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTcxNjcxMw==", "url": "https://github.com/pytorch/serve/pull/502#discussion_r451716713", "bodyText": "This would break existing handlers, I don't see a strong reason to do this.", "author": "mycpuorg", "createdAt": "2020-07-08T17:39:31Z", "path": "examples/object_detector/index_to_name.json", "diffHunk": "@@ -1,14 +1,93 @@\n-{\"object_type_names\" : [\n-    \"__background__\", \"person\", \"bicycle\", \"car\", \"motorcycle\", \"airplane\", \"bus\",\n-    \"train\", \"truck\", \"boat\", \"traffic light\", \"fire hydrant\", \"N/A\", \"stop sign\",\n-    \"parking meter\", \"bench\", \"bird\", \"cat\", \"dog\", \"horse\", \"sheep\", \"cow\",\n-    \"elephant\", \"bear\", \"zebra\", \"giraffe\", \"N/A\", \"backpack\", \"umbrella\", \"N/A\", \"N/A\",\n-    \"handbag\", \"tie\", \"suitcase\", \"frisbee\", \"skis\", \"snowboard\", \"sports ball\",\n-    \"kite\", \"baseball bat\", \"baseball glove\", \"skateboard\", \"surfboard\", \"tennis racket\",\n-    \"bottle\", \"N/A\", \"wine glass\", \"cup\", \"fork\", \"knife\", \"spoon\", \"bowl\",\n-    \"banana\", \"apple\", \"sandwich\", \"orange\", \"broccoli\", \"carrot\", \"hot dog\", \"pizza\",\n-    \"donut\", \"cake\", \"chair\", \"couch\", \"potted plant\", \"bed\", \"N/A\", \"dining table\",\n-    \"N/A\", \"N/A\", \"toilet\", \"N/A\", \"tv\", \"laptop\", \"mouse\", \"remote\", \"keyboard\", \"cell phone\",\n-    \"microwave\", \"oven\", \"toaster\", \"sink\", \"refrigerator\", \"N/A\", \"book\",\n-    \"clock\", \"vase\", \"scissors\", \"teddy bear\", \"hair drier\", \"toothbrush\"\n-]}\n\\ No newline at end of file\n+{", "originalCommit": "45ac4999fb081a97de0a3d80b2fb095e5e74b126", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTk0OTk2NA==", "url": "https://github.com/pytorch/serve/pull/502#discussion_r451949964", "bodyText": "The actual handler code can still handle the old case, so it's backwards compatible. This change was to bring consistency between classifiers and object detectors which had no reason as far as I could tell to have a different format for index_to_name.json", "author": "htappen", "createdAt": "2020-07-09T03:58:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTcxNjcxMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTcxODU5Mg==", "url": "https://github.com/pytorch/serve/pull/502#discussion_r451718592", "bodyText": "Deleting this example?", "author": "mycpuorg", "createdAt": "2020-07-08T17:42:39Z", "path": "examples/image_classifier/resnet_152_batch/resnet152_handler.py", "diffHunk": "@@ -1,38 +0,0 @@\n-import torch\n-", "originalCommit": "45ac4999fb081a97de0a3d80b2fb095e5e74b126", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTk1MDA0NA==", "url": "https://github.com/pytorch/serve/pull/502#discussion_r451950044", "bodyText": "Yes. The native handlers can now handle batching, so this extra handler is unnecessary.", "author": "htappen", "createdAt": "2020-07-09T03:58:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTcxODU5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTk4MTkzNg==", "url": "https://github.com/pytorch/serve/pull/502#discussion_r451981936", "bodyText": "Can you update associated doc https://github.com/pytorch/serve/blob/master/docs/batch_inference_with_ts.md", "author": "dhaniram-kshirsagar", "createdAt": "2020-07-09T06:01:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTcxODU5Mg=="}], "type": "inlineReview"}, {"oid": "59e7add4998d97b1cf5d9b3cfa0d046c49fb896a", "url": "https://github.com/pytorch/serve/commit/59e7add4998d97b1cf5d9b3cfa0d046c49fb896a", "message": "Adding comments per review.", "committedDate": "2020-07-09T03:58:58Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTk1NjUwMA==", "url": "https://github.com/pytorch/serve/pull/502#discussion_r451956500", "bodyText": "duplicate line. Also, can we move this line to function itself?", "author": "dhaniram-kshirsagar", "createdAt": "2020-07-09T04:27:25Z", "path": "ts/torch_handler/base_handler.py", "diffHunk": "@@ -69,37 +62,61 @@ def initialize(self, context):\n         # Read the mapping file, index to object name\n         mapping_file_path = os.path.join(model_dir, \"index_to_name.json\")\n \n-        if os.path.isfile(mapping_file_path):\n-            with open(mapping_file_path) as f:\n-                self.mapping = json.load(f)\n-        else:\n-            logger.warning('Missing the index_to_name.json file. Inference output will not include class name.')\n+        # Load class mapping for classifiers\n+        mapping_file_path = os.path.join(model_dir, \"index_to_name.json\")", "originalCommit": "59e7add4998d97b1cf5d9b3cfa0d046c49fb896a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjMzNjIzOA==", "url": "https://github.com/pytorch/serve/pull/502#discussion_r452336238", "bodyText": "Removed the duplicate. Moving it to the function seems a bit odd -- most methods in Python regarding files accept a full path instead of dir + filename.", "author": "htappen", "createdAt": "2020-07-09T16:18:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTk1NjUwMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTk1ODQ5Nw==", "url": "https://github.com/pytorch/serve/pull/502#discussion_r451958497", "bodyText": "This seems redundant. Can we remove it?\nNOTE, In general, we found that try...except for identifying scripted model is not good and some times problematic as well. Based on the fact that an eager model needs a model file, we have changed this in different PR which has been already merged.", "author": "dhaniram-kshirsagar", "createdAt": "2020-07-09T04:36:02Z", "path": "ts/torch_handler/base_handler.py", "diffHunk": "@@ -32,35 +30,30 @@ def initialize(self, context):\n \n         self.manifest = context.manifest\n         properties = context.system_properties\n-        model_dir = properties.get(\"model_dir\")\n+\n         self.device = torch.device(\"cuda:\" + str(properties.get(\"gpu_id\")) if torch.cuda.is_available() else \"cpu\")\n \n-        # Read model serialize/pt file\n+        # Read in the model\n+        model_dir = properties.get(\"model_dir\")\n         serialized_file = self.manifest['model']['serializedFile']\n         model_pt_path = os.path.join(model_dir, serialized_file)\n+\n         if not os.path.isfile(model_pt_path):\n             raise RuntimeError(\"Missing the model.pt file\")\n \n+        # Torchscript is better, so try to read that first\n+        is_torchscript = True\n         try:\n             logger.debug('Loading torchscript model')\n-            self.model = torch.jit.load(model_pt_path)\n+            self.model = self._load_torchscript_model(model_pt_path)\n         except RuntimeError as e:\n-            # Read model definition file\n+            is_torchscript = False\n+\n+        if not is_torchscript:", "originalCommit": "59e7add4998d97b1cf5d9b3cfa0d046c49fb896a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjMzNzI0Mw==", "url": "https://github.com/pytorch/serve/pull/502#discussion_r452337243", "bodyText": "Fixed. I'll merge in the other PR when this branch merges in.", "author": "htappen", "createdAt": "2020-07-09T16:20:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTk1ODQ5Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTk4NjE2NQ==", "url": "https://github.com/pytorch/serve/pull/502#discussion_r451986165", "bodyText": "remove this as handler has been removed", "author": "dhaniram-kshirsagar", "createdAt": "2020-07-09T06:14:34Z", "path": "examples/image_classifier/resnet_152_batch/README.md", "diffHunk": "@@ -3,7 +3,7 @@ Run the commands given in following steps from the parent directory of the root\n \n ```bash", "originalCommit": "59e7add4998d97b1cf5d9b3cfa0d046c49fb896a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjMzODQ0Nw==", "url": "https://github.com/pytorch/serve/pull/502#discussion_r452338447", "bodyText": "Sorry, I didn't quite understand that. The readme has been updated to remove the custom handler. Did you mean to remove the whole example?", "author": "htappen", "createdAt": "2020-07-09T16:22:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTk4NjE2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM1NTY1MA==", "url": "https://github.com/pytorch/serve/pull/502#discussion_r452355650", "bodyText": "Please ignore. Looks good to me.", "author": "dhaniram-kshirsagar", "createdAt": "2020-07-09T16:50:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTk4NjE2NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTk4NjY3Mg==", "url": "https://github.com/pytorch/serve/pull/502#discussion_r451986672", "bodyText": "Will the user be able to repro the segmented image with this response?", "author": "dhaniram-kshirsagar", "createdAt": "2020-07-09T06:15:39Z", "path": "examples/image_segmenter/README.md", "diffHunk": "@@ -18,90 +18,18 @@ wget https://download.pytorch.org/models/fcn_resnet101_coco-7ecb50ca.pth\n     curl http://127.0.0.1:8080/predictions/fcn -T examples/image_segmenter/fcn/persons.jpg\n     ```\n * Output\n+An array of shape [ Batch, Height, Width, 2] where the final dimensions are [class, probability]\n \n ```json\n-[[[11.49452    11.49452    11.49452    ... 10.846567   10.846567\n-   10.846567  ]\n-  [11.49452    11.49452    11.49452    ... 10.846567   10.846567\n-   10.846567  ]\n-  [11.49452    11.49452    11.49452    ... 10.846567   10.846567\n-   10.846567  ]\n-  ...\n-  [10.028987   10.028987   10.028987   ...  9.980104    9.980104\n-    9.980104  ]\n-  [10.028987   10.028987   10.028987   ...  9.980104    9.980105\n-    9.980105  ]\n-  [10.028987   10.028987   10.028987   ...  9.980104    9.980105\n-    9.980105  ]]\n-\n- [[-2.524181   -2.524181   -2.524181   ... -1.4157648  -1.4157648\n-   -1.4157648 ]\n-  [-2.524181   -2.524181   -2.524181   ... -1.4157648  -1.4157648\n-   -1.4157648 ]\n-  [-2.524181   -2.524181   -2.524181   ... -1.4157648  -1.4157648\n-   -1.4157648 ]\n-  ...\n-  [-0.52271044 -0.52271044 -0.52271044 ... -0.910931   -0.910931\n-   -0.910931  ]\n-  [-0.52271044 -0.52271044 -0.52271044 ... -0.910931   -0.910931\n-   -0.910931  ]\n-  [-0.52271044 -0.52271044 -0.52271044 ... -0.910931   -0.910931\n-   -0.910931  ]]\n-\n- [[-1.1300591  -1.1300591  -1.1300591  ... -0.88538504 -0.88538504\n-   -0.88538504]\n-  [-1.1300591  -1.1300591  -1.1300591  ... -0.88538504 -0.88538504\n-   -0.88538504]\n-  [-1.1300591  -1.1300591  -1.1300591  ... -0.88538504 -0.88538504\n-   -0.88538504]\n-  ...\n-  [-1.1726367  -1.1726367  -1.1726367  ... -1.6144376  -1.6144376\n-   -1.6144376 ]\n-  [-1.1726367  -1.1726367  -1.1726367  ... -1.6144376  -1.6144376\n-   -1.6144376 ]\n-  [-1.1726367  -1.1726367  -1.1726367  ... -1.6144376  -1.6144376\n-   -1.6144376 ]]\n-\n- ...\n-\n- [[-0.27236405 -0.27236405 -0.27236405 ... -0.791381   -0.79138106\n-   -0.79138106]\n-  [-0.27236405 -0.27236405 -0.27236405 ... -0.791381   -0.79138106\n-   -0.79138106]\n-  [-0.27236405 -0.27236405 -0.27236405 ... -0.791381   -0.79138106\n-   -0.79138106]\n-  ...\n-  [-0.16645516 -0.16645516 -0.16645516 ...  0.4377911   0.4377911\n-    0.4377911 ]\n-  [-0.16645516 -0.16645516 -0.16645516 ...  0.4377911   0.4377911\n-    0.4377911 ]\n-  [-0.16645516 -0.16645516 -0.16645516 ...  0.4377911   0.4377911\n-    0.4377911 ]]\n-\n- [[-0.70757735 -0.70757735 -0.70757735 ... -1.0088179  -1.0088179\n-   -1.0088179 ]\n-  [-0.70757735 -0.70757735 -0.70757735 ... -1.0088179  -1.0088179\n-   -1.0088179 ]\n-  [-0.70757735 -0.70757735 -0.70757735 ... -1.0088179  -1.0088179\n-   -1.0088179 ]\n-  ...\n-  [ 0.44139242  0.44139242  0.44139242 ...  0.28535858  0.28535858\n-    0.28535858]\n-  [ 0.44139242  0.44139242  0.44139242 ...  0.28535858  0.28535858\n-    0.28535858]\n-  [ 0.44139242  0.44139242  0.44139242 ...  0.28535858  0.28535858\n-    0.28535858]]\n-\n- [[-0.47415262 -0.47415262 -0.47415262 ... -0.4314881  -0.43148813\n-   -0.43148813]\n-  [-0.47415262 -0.47415262 -0.47415262 ... -0.4314881  -0.43148813\n-   -0.43148813]\n-  [-0.47415262 -0.47415262 -0.47415262 ... -0.4314881  -0.43148813\n-   -0.43148813]\n-  ...\n-  [ 0.04289126  0.04289126  0.04289126 ... -0.42638034 -0.42638034\n-   -0.42638034]\n-  [ 0.04289126  0.04289126  0.04289126 ... -0.42638034 -0.42638034\n-   -0.42638034]\n-  [ 0.04289126  0.04289126  0.04289126 ... -0.42638034 -0.42638034]\n-```\n+[[", "originalCommit": "59e7add4998d97b1cf5d9b3cfa0d046c49fb896a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM1OTYwMA==", "url": "https://github.com/pytorch/serve/pull/502#discussion_r452359600", "bodyText": "Updated this doc with the same output from the example.", "author": "htappen", "createdAt": "2020-07-09T16:57:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTk4NjY3Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjAxNTk0OA==", "url": "https://github.com/pytorch/serve/pull/502#discussion_r452015948", "bodyText": "As far as I understood this, it will do end to end testing of default handlers without deploying them. However, it seems this will be a manual step. We are already doing end to end tests for default handlers however with deployment via torchserve_sanity.sh. Is there any other advantage of adding this? If yes, then we should make it part of sanity testing.", "author": "dhaniram-kshirsagar", "createdAt": "2020-07-09T07:24:53Z", "path": "ts/torch_handler/unit_tests/run_unit_tests.sh", "diffHunk": "@@ -0,0 +1,54 @@\n+#!/bin/bash", "originalCommit": "59e7add4998d97b1cf5d9b3cfa0d046c49fb896a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjMzOTI1Mg==", "url": "https://github.com/pytorch/serve/pull/502#discussion_r452339252", "bodyText": "The main advantage is being able to quickly test changes on just the handlers without having to run the whole torchserve_sanity.sh script. I found it faster to iterate this way.", "author": "htappen", "createdAt": "2020-07-09T16:23:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjAxNTk0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM1NTI2Ng==", "url": "https://github.com/pytorch/serve/pull/502#discussion_r452355266", "bodyText": "Can we document it in  default handler doc. Also, need to document batch support in default handlers [excpet text class..].", "author": "dhaniram-kshirsagar", "createdAt": "2020-07-09T16:49:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjAxNTk0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM1OTQ2OQ==", "url": "https://github.com/pytorch/serve/pull/502#discussion_r452359469", "bodyText": "Added to the doc.", "author": "htappen", "createdAt": "2020-07-09T16:56:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjAxNTk0OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjAxNjgwNg==", "url": "https://github.com/pytorch/serve/pull/502#discussion_r452016806", "bodyText": "I see that you have modified the json files and made them consistent with respect to formats. Can you please document this somewhere so that some planning to use this util method will know what is expected.", "author": "dhaniram-kshirsagar", "createdAt": "2020-07-09T07:26:34Z", "path": "ts/utils/util.py", "diffHunk": "@@ -21,3 +26,54 @@ def list_classes_from_module(module, parent_class=None):\n         return [c for c in classes if issubclass(c, parent_class)]\n \n     return classes\n+\n+def load_label_mapping(mapping_file_path):\n+    \"\"\"\n+    Load a JSON mapping { class ID -> friendly class name }.\n+    Used in BaseHandler.\n+    \"\"\"\n+    if not os.path.isfile(mapping_file_path):\n+        logger.warning('Missing the index_to_name.json file. Inference output will not include class name.')\n+        return None\n+\n+    with open(mapping_file_path) as f:\n+        mapping = json.load(f)\n+    if not isinstance(mapping, dict):\n+        raise Exception('index_to_name mapping should be in \"class\":\"label\" json format')\n+\n+    # Older examples had a different syntax than others. This code accommodates those.\n+    if 'object_type_names' in mapping and isinstance(mapping['object_type_names'], list):\n+        mapping = {str(k): v for k, v in enumerate(mapping['object_type_names'])}\n+        return mapping\n+\n+    for key, value in mapping.items():\n+        new_value = value\n+        if isinstance(new_value, list):\n+            new_value = value[-1]\n+        if not isinstance(new_value, str):\n+            raise Exception('labels in index_to_name must be either str or [str]')\n+        mapping[key] = new_value\n+    return mapping\n+\n+def map_class_to_label(probs, mapping=None, lbl_classes=None):", "originalCommit": "59e7add4998d97b1cf5d9b3cfa0d046c49fb896a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM0ODU2OQ==", "url": "https://github.com/pytorch/serve/pull/502#discussion_r452348569", "bodyText": "Added to the docs in next commit.", "author": "htappen", "createdAt": "2020-07-09T16:38:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjAxNjgwNg=="}], "type": "inlineReview"}, {"oid": "0b90357124daa6bea47fc6161f554b92b8855f6d", "url": "https://github.com/pytorch/serve/commit/0b90357124daa6bea47fc6161f554b92b8855f6d", "message": "Fixing doc feedback.", "committedDate": "2020-07-09T16:39:05Z", "type": "commit"}, {"oid": "c60e08dc6c7f8dea1907b1a187452cd7202f9dc3", "url": "https://github.com/pytorch/serve/commit/c60e08dc6c7f8dea1907b1a187452cd7202f9dc3", "message": "Updating docs about batching.", "committedDate": "2020-07-09T16:56:06Z", "type": "commit"}]}