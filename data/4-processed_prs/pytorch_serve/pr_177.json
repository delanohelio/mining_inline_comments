{"pr_number": 177, "pr_title": "doc review of metrics and rest_api", "pr_createdAt": "2020-04-09T21:19:08Z", "pr_url": "https://github.com/pytorch/serve/pull/177", "timeline": [{"oid": "859ce216f7abb2307dd2733a26461d8958586a7a", "url": "https://github.com/pytorch/serve/commit/859ce216f7abb2307dd2733a26461d8958586a7a", "message": "doc review of metrics and rest_api", "committedDate": "2020-04-09T21:15:01Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg5NTgwMA==", "url": "https://github.com/pytorch/serve/pull/177#discussion_r406895800", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            ## Contents of this Document\n          \n          \n            \n            ## Contents of this document", "author": "aaronmarkham", "createdAt": "2020-04-10T18:56:15Z", "path": "docs/metrics.md", "diffHunk": "@@ -1,73 +1,77 @@\n-# Metrics on TorchServe\n+# TorchServe Metrics\n \n ## Contents of this Document", "originalCommit": "859ce216f7abb2307dd2733a26461d8958586a7a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg5NTkwMg==", "url": "https://github.com/pytorch/serve/pull/177#discussion_r406895902", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            TorchServe collects system level metrics in regular intervals, and also provides an API to collect custom metrics.\n          \n          \n            \n            TorchServe collects system-level metrics in regular intervals, and also provides an API to collect custom metrics.", "author": "aaronmarkham", "createdAt": "2020-04-10T18:56:33Z", "path": "docs/metrics.md", "diffHunk": "@@ -1,73 +1,77 @@\n-# Metrics on TorchServe\n+# TorchServe Metrics\n \n ## Contents of this Document\n+\n * [Introduction](#introduction)\n * [System metrics](#system-metrics)\n * [Formatting](#formatting)\n * [Custom Metrics API](#custom-metrics-api)\n * [Logging the custom metrics](#logging-the-custom-metrics)\n \n ## Introduction\n-TorchServe collects system level metrics in regular intervals, and also provides an API for custom metrics to be collected. Metrics collected by metrics are logged and can be aggregated by metric agents.\n-The system level metrics are collected every minute. Metrics defined by the custom service code, can be collected per request or a batch of requests. TorchServe logs these two sets of metrics to different log files.\n+\n+TorchServe collects system level metrics in regular intervals, and also provides an API to collect custom metrics.", "originalCommit": "859ce216f7abb2307dd2733a26461d8958586a7a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg5NjEzMA==", "url": "https://github.com/pytorch/serve/pull/177#discussion_r406896130", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            | CPUUtilization | host | percentage | cpu utillization on host |\n          \n          \n            \n            | CPUUtilization | host | percentage | CPU utilization on host |", "author": "aaronmarkham", "createdAt": "2020-04-10T18:57:04Z", "path": "docs/metrics.md", "diffHunk": "@@ -1,73 +1,77 @@\n-# Metrics on TorchServe\n+# TorchServe Metrics\n \n ## Contents of this Document\n+\n * [Introduction](#introduction)\n * [System metrics](#system-metrics)\n * [Formatting](#formatting)\n * [Custom Metrics API](#custom-metrics-api)\n * [Logging the custom metrics](#logging-the-custom-metrics)\n \n ## Introduction\n-TorchServe collects system level metrics in regular intervals, and also provides an API for custom metrics to be collected. Metrics collected by metrics are logged and can be aggregated by metric agents.\n-The system level metrics are collected every minute. Metrics defined by the custom service code, can be collected per request or a batch of requests. TorchServe logs these two sets of metrics to different log files.\n+\n+TorchServe collects system level metrics in regular intervals, and also provides an API to collect custom metrics.\n+Metrics collected by metrics are logged and can be aggregated by metric agents.\n+The system level metrics are collected every minute. Metrics defined by the custom service code can be collected per request or per a batch of requests.\n+TorchServe logs these two sets of metrics to different log files.\n Metrics are collected by default at:\n+\n * System metrics - log_directory/ts_metrics.log\n * Custom metrics - log directory/model_metrics.log\n \n-The location of log files and metric files can be configured at [log4j.properties](https://github.com/pytorch/serve/blob/master/frontend/server/src/main/resources/log4j.properties) file\n-\n+The location of log files and metric files can be configured i in the [log4j.properties](https://github.com/pytorch/serve/blob/master/frontend/server/src/main/resources/log4j.properties) file\n \n ## System Metrics\n \n-|\tMetric Name\t|\tDimension\t|\tUnit\t|\tSemantics\t|\n+| Metric Name | Dimension | Unit | Semantics |\n |---|---|---|---|\n-|\tCPUUtilization\t|\thost\t|\tpercentage\t|\tcpu utillization on host\t|\n-|\tDiskAvailable\t|\thost\t|\tGB\t|\tdisk available on host\t|\n-|\tDiskUsed\t|\thost\t|\tGB\t|\tdisk used on host\t|\n-|\tDiskUtilization\t|\thost\t|\tpercentage\t|\tdisk used on host\t|\n-|\tMemoryAvailable\t|\thost\t|\tMB\t|\tmemory available on host\t|\n-|\tMemoryUsed\t|\thost\t|\tMB\t|\tmemory used on host\t|\n-|\tMemoryUtilization\t|\thost\t|\tpercentage\t|\tmemory used on host\t|\n-|\tRequests2XX\t|\thost\t|\tcount\t|\tlogged for every request responded in 200-300 status code range\t|\n-|\tRequests4XX\t|\thost\t|\tcount\t|\tlogged for every request responded in 400-500 status code range |\n-|\tRequests5XX\t|\thost\t|\tcount\t|\tlogged for every request responded with status code above 500 |\n-\n+| CPUUtilization | host | percentage | cpu utillization on host |", "originalCommit": "859ce216f7abb2307dd2733a26461d8958586a7a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg5NjU3Mg==", "url": "https://github.com/pytorch/serve/pull/177#discussion_r406896572", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            | MemoryUtilization | host | percentage | memory used on host |\n          \n          \n            \n            | MemoryUtilization | host | percentage | memory utilization on host |", "author": "aaronmarkham", "createdAt": "2020-04-10T18:58:14Z", "path": "docs/metrics.md", "diffHunk": "@@ -1,73 +1,77 @@\n-# Metrics on TorchServe\n+# TorchServe Metrics\n \n ## Contents of this Document\n+\n * [Introduction](#introduction)\n * [System metrics](#system-metrics)\n * [Formatting](#formatting)\n * [Custom Metrics API](#custom-metrics-api)\n * [Logging the custom metrics](#logging-the-custom-metrics)\n \n ## Introduction\n-TorchServe collects system level metrics in regular intervals, and also provides an API for custom metrics to be collected. Metrics collected by metrics are logged and can be aggregated by metric agents.\n-The system level metrics are collected every minute. Metrics defined by the custom service code, can be collected per request or a batch of requests. TorchServe logs these two sets of metrics to different log files.\n+\n+TorchServe collects system level metrics in regular intervals, and also provides an API to collect custom metrics.\n+Metrics collected by metrics are logged and can be aggregated by metric agents.\n+The system level metrics are collected every minute. Metrics defined by the custom service code can be collected per request or per a batch of requests.\n+TorchServe logs these two sets of metrics to different log files.\n Metrics are collected by default at:\n+\n * System metrics - log_directory/ts_metrics.log\n * Custom metrics - log directory/model_metrics.log\n \n-The location of log files and metric files can be configured at [log4j.properties](https://github.com/pytorch/serve/blob/master/frontend/server/src/main/resources/log4j.properties) file\n-\n+The location of log files and metric files can be configured i in the [log4j.properties](https://github.com/pytorch/serve/blob/master/frontend/server/src/main/resources/log4j.properties) file\n \n ## System Metrics\n \n-|\tMetric Name\t|\tDimension\t|\tUnit\t|\tSemantics\t|\n+| Metric Name | Dimension | Unit | Semantics |\n |---|---|---|---|\n-|\tCPUUtilization\t|\thost\t|\tpercentage\t|\tcpu utillization on host\t|\n-|\tDiskAvailable\t|\thost\t|\tGB\t|\tdisk available on host\t|\n-|\tDiskUsed\t|\thost\t|\tGB\t|\tdisk used on host\t|\n-|\tDiskUtilization\t|\thost\t|\tpercentage\t|\tdisk used on host\t|\n-|\tMemoryAvailable\t|\thost\t|\tMB\t|\tmemory available on host\t|\n-|\tMemoryUsed\t|\thost\t|\tMB\t|\tmemory used on host\t|\n-|\tMemoryUtilization\t|\thost\t|\tpercentage\t|\tmemory used on host\t|\n-|\tRequests2XX\t|\thost\t|\tcount\t|\tlogged for every request responded in 200-300 status code range\t|\n-|\tRequests4XX\t|\thost\t|\tcount\t|\tlogged for every request responded in 400-500 status code range |\n-|\tRequests5XX\t|\thost\t|\tcount\t|\tlogged for every request responded with status code above 500 |\n-\n+| CPUUtilization | host | percentage | cpu utillization on host |\n+| DiskAvailable | host | GB | disk available on host |\n+| DiskUsed | host | GB | disk used on host |\n+| DiskUtilization | host | percentage | disk used on host |\n+| MemoryAvailable | host | MB | memory available on host |\n+| MemoryUsed | host | MB | memory used on host |\n+| MemoryUtilization | host | percentage | memory used on host |", "originalCommit": "859ce216f7abb2307dd2733a26461d8958586a7a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg5ODQzNQ==", "url": "https://github.com/pytorch/serve/pull/177#discussion_r406898435", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            TorchServe enables the custom service code to emit metrics that are then logged by the system\n          \n          \n            \n            TorchServe enables the custom service code to emit metrics that are then logged by the system.", "author": "aaronmarkham", "createdAt": "2020-04-10T19:03:20Z", "path": "docs/metrics.md", "diffHunk": "@@ -84,17 +88,18 @@ Once enabled the format emitted to logs, will look as follows\n \n ## Custom Metrics API\n \n-TorchServe enables the custom service code to emit metrics, that are then logged by the system\n+TorchServe enables the custom service code to emit metrics that are then logged by the system", "originalCommit": "859ce216f7abb2307dd2733a26461d8958586a7a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg5OTE0MQ==", "url": "https://github.com/pytorch/serve/pull/177#discussion_r406899141", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The custom service code is provided with a [context](https://github.com/pytorch/serve/blob/master/ts/context.py) of the current request.\n          \n          \n            \n            The custom service code is provided with a [context](https://github.com/pytorch/serve/blob/master/ts/context.py) of the current request with a metrics object:", "author": "aaronmarkham", "createdAt": "2020-04-10T19:05:03Z", "path": "docs/metrics.md", "diffHunk": "@@ -84,17 +88,18 @@ Once enabled the format emitted to logs, will look as follows\n \n ## Custom Metrics API\n \n-TorchServe enables the custom service code to emit metrics, that are then logged by the system\n+TorchServe enables the custom service code to emit metrics that are then logged by the system\n \n The custom service code is provided with a [context](https://github.com/pytorch/serve/blob/master/ts/context.py) of the current request.", "originalCommit": "859ce216f7abb2307dd2733a26461d8958586a7a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg5OTE4NQ==", "url": "https://github.com/pytorch/serve/pull/177#discussion_r406899185", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Which has a metrics object.", "author": "aaronmarkham", "createdAt": "2020-04-10T19:05:11Z", "path": "docs/metrics.md", "diffHunk": "@@ -84,17 +88,18 @@ Once enabled the format emitted to logs, will look as follows\n \n ## Custom Metrics API\n \n-TorchServe enables the custom service code to emit metrics, that are then logged by the system\n+TorchServe enables the custom service code to emit metrics that are then logged by the system\n \n The custom service code is provided with a [context](https://github.com/pytorch/serve/blob/master/ts/context.py) of the current request.\n \n-Which has metrics object.\n+Which has a metrics object.", "originalCommit": "859ce216f7abb2307dd2733a26461d8958586a7a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg5OTM3NQ==", "url": "https://github.com/pytorch/serve/pull/177#discussion_r406899375", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            ### Creating dimension object(s)\n          \n          \n            \n            ### Create dimension object(s)", "author": "aaronmarkham", "createdAt": "2020-04-10T19:05:45Z", "path": "docs/metrics.md", "diffHunk": "@@ -84,17 +88,18 @@ Once enabled the format emitted to logs, will look as follows\n \n ## Custom Metrics API\n \n-TorchServe enables the custom service code to emit metrics, that are then logged by the system\n+TorchServe enables the custom service code to emit metrics that are then logged by the system\n \n The custom service code is provided with a [context](https://github.com/pytorch/serve/blob/master/ts/context.py) of the current request.\n \n-Which has metrics object.\n+Which has a metrics object.\n \n ```python\n # Access context metrics as follows\n metrics = context.metrics\n ```\n-All metrics collected with in the context \n+\n+All metrics are collected within the context.\n \n ### Creating dimension object(s)", "originalCommit": "859ce216f7abb2307dd2733a26461d8958586a7a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg5OTQ4OA==", "url": "https://github.com/pytorch/serve/pull/177#discussion_r406899488", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            ### Add Time based metrics\n          \n          \n            \n            ### Add time-based metrics", "author": "aaronmarkham", "createdAt": "2020-04-10T19:06:07Z", "path": "docs/metrics.md", "diffHunk": "@@ -147,11 +153,12 @@ Function API\n metrics.add_metric('DistanceInKM', distance, 'km', dimensions=dimensions)\n ```\n \n-\n ### Add Time based metrics", "originalCommit": "859ce216f7abb2307dd2733a26461d8958586a7a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg5OTU2OA==", "url": "https://github.com/pytorch/serve/pull/177#discussion_r406899568", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            To add custom tim- based metrics:\n          \n          \n            \n            To add custom time-based metrics:", "author": "aaronmarkham", "createdAt": "2020-04-10T19:06:20Z", "path": "docs/metrics.md", "diffHunk": "@@ -176,7 +183,7 @@ Note that the default unit in this case is 'ms'\n \n **Supported units**: ['ms', 's']\n \n-To add custom time based metrics\n+To add custom tim- based metrics:", "originalCommit": "859ce216f7abb2307dd2733a26461d8958586a7a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg5OTY0MQ==", "url": "https://github.com/pytorch/serve/pull/177#discussion_r406899641", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            ### Add Size-based metrics\n          \n          \n            \n            ### Add size-based metrics", "author": "aaronmarkham", "createdAt": "2020-04-10T19:06:32Z", "path": "docs/metrics.md", "diffHunk": "@@ -185,10 +192,12 @@ To add custom time based metrics\n metrics.add_time('InferenceTime', end_time-start_time, None, 'ms', dimensions)\n ```\n \n-### Add Size based metrics\n-Size based metrics can be added by invoking the following method\n+### Add Size-based metrics", "originalCommit": "859ce216f7abb2307dd2733a26461d8958586a7a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg5OTg1OA==", "url": "https://github.com/pytorch/serve/pull/177#discussion_r406899858", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Note that the default unit in this case is 'ms'.\n          \n          \n            \n            Note that the default unit in this case is milliseconds (ms).", "author": "aaronmarkham", "createdAt": "2020-04-10T19:07:13Z", "path": "docs/metrics.md", "diffHunk": "@@ -209,7 +218,7 @@ Function API\n         \"\"\"\n ```\n \n-Note that the default unit in this case is 'ms'\n+Note that the default unit in this case is 'ms'.", "originalCommit": "859ce216f7abb2307dd2733a26461d8958586a7a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg5OTk4Nw==", "url": "https://github.com/pytorch/serve/pull/177#discussion_r406899987", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            ### Add Counter-based metrics\n          \n          \n            \n            ### Add counter-based metrics", "author": "aaronmarkham", "createdAt": "2020-04-10T19:07:38Z", "path": "docs/metrics.md", "diffHunk": "@@ -254,11 +264,12 @@ To add custom percentage based metrics\n metrics.add_percent('MemoryUtilization', utilization_percent, None, dimensions)\n ```\n \n-### Add Counter based metrics\n+### Add Counter-based metrics", "originalCommit": "859ce216f7abb2307dd2733a26461d8958586a7a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkwMDEwMA==", "url": "https://github.com/pytorch/serve/pull/177#discussion_r406900100", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            ### Logging the custom metrics\n          \n          \n            \n            ### Log custom metrics", "author": "aaronmarkham", "createdAt": "2020-04-10T19:07:57Z", "path": "docs/metrics.md", "diffHunk": "@@ -296,7 +308,6 @@ metrics.add_counter('LoopCount', -1, None, dimensions)\n \n ```\n \n-\n ### Logging the custom metrics", "originalCommit": "859ce216f7abb2307dd2733a26461d8958586a7a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkwMDQ1Ng==", "url": "https://github.com/pytorch/serve/pull/177#discussion_r406900456", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            TorchServe use RESTful API for both inference and management calls. The API is compliance with [OpenAPI specification 3.0](https://swagger.io/specification/).\n          \n          \n            \n            TorchServe uses a RESTful API for both inference and management calls. The API is compliant with the [OpenAPI specification 3.0](https://swagger.io/specification/).", "author": "aaronmarkham", "createdAt": "2020-04-10T19:08:54Z", "path": "docs/rest_api.md", "diffHunk": "@@ -1,10 +1,12 @@\n # TorchServe REST API\n \n-TorchServe use RESTful API for both inference and management calls. The API is compliance with [OpenAPI specification 3.0](https://swagger.io/specification/). User can easily generate client side code for Java, Scala, C#, Javascript use [swagger codegen](https://swagger.io/swagger-codegen/).\n+TorchServe use RESTful API for both inference and management calls. The API is compliance with [OpenAPI specification 3.0](https://swagger.io/specification/).", "originalCommit": "859ce216f7abb2307dd2733a26461d8958586a7a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkwMDU5NQ==", "url": "https://github.com/pytorch/serve/pull/177#discussion_r406900595", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            YOu can easily generate client side code for Java, Scala, C#, or Javascript by using [swagger codegen](https://swagger.io/swagger-codegen/).\n          \n          \n            \n            You can easily generate client side code for Java, Scala, C#, or Javascript by using [swagger codegen](https://swagger.io/swagger-codegen/).", "author": "aaronmarkham", "createdAt": "2020-04-10T19:09:14Z", "path": "docs/rest_api.md", "diffHunk": "@@ -1,10 +1,12 @@\n # TorchServe REST API\n \n-TorchServe use RESTful API for both inference and management calls. The API is compliance with [OpenAPI specification 3.0](https://swagger.io/specification/). User can easily generate client side code for Java, Scala, C#, Javascript use [swagger codegen](https://swagger.io/swagger-codegen/).\n+TorchServe use RESTful API for both inference and management calls. The API is compliance with [OpenAPI specification 3.0](https://swagger.io/specification/).\n+YOu can easily generate client side code for Java, Scala, C#, or Javascript by using [swagger codegen](https://swagger.io/swagger-codegen/).", "originalCommit": "859ce216f7abb2307dd2733a26461d8958586a7a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkwMDcyMw==", "url": "https://github.com/pytorch/serve/pull/177#discussion_r406900723", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Both APIs are accessible only from localhost by default. To enaboe access from a remote host, see [TorchServe Configuration](configuration.md).\n          \n          \n            \n            Both APIs are accessible only from localhost by default. To enable access from a remote host, see [TorchServe Configuration](configuration.md).", "author": "aaronmarkham", "createdAt": "2020-04-10T19:09:42Z", "path": "docs/rest_api.md", "diffHunk": "@@ -1,10 +1,12 @@\n # TorchServe REST API\n \n-TorchServe use RESTful API for both inference and management calls. The API is compliance with [OpenAPI specification 3.0](https://swagger.io/specification/). User can easily generate client side code for Java, Scala, C#, Javascript use [swagger codegen](https://swagger.io/swagger-codegen/).\n+TorchServe use RESTful API for both inference and management calls. The API is compliance with [OpenAPI specification 3.0](https://swagger.io/specification/).\n+YOu can easily generate client side code for Java, Scala, C#, or Javascript by using [swagger codegen](https://swagger.io/swagger-codegen/).\n+\n+When TorchServe starts, it starts two web services:\n \n-When TorchServe startup, it start two web services:\n * [Inference API](inference_api.md)\n * [Management API](management_api.md)\n \n-By default, TorchServe listening on 8080 port for Inference API and 8081 on Management API.\n-Both API is only accessible from localhost. Please see [TorchServe Configuration](configuration.md) for how to enable access from remote host. \n+By default, TorchServe listens on port 8080 for the Inference API and 8081 for the Management API.\n+Both APIs are accessible only from localhost by default. To enaboe access from a remote host, see [TorchServe Configuration](configuration.md).", "originalCommit": "859ce216f7abb2307dd2733a26461d8958586a7a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "9514a14a2e7d157a98752c6950aa8135022757be", "url": "https://github.com/pytorch/serve/commit/9514a14a2e7d157a98752c6950aa8135022757be", "message": "Apply suggestions from code review\r\n\r\nAccepted all review suggestions.\n\nCo-Authored-By: Aaron Markham <markhama@amazon.com>", "committedDate": "2020-04-10T19:50:46Z", "type": "commit"}]}