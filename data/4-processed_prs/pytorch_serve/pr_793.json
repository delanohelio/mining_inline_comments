{"pr_number": 793, "pr_title": "Feature: Add Torchserve GKE support", "pr_createdAt": "2020-11-22T12:43:57Z", "pr_url": "https://github.com/pytorch/serve/pull/793", "timeline": [{"oid": "1d282554d2512ddc6e8979248709bb616caeb2e6", "url": "https://github.com/pytorch/serve/commit/1d282554d2512ddc6e8979248709bb616caeb2e6", "message": "Merge branch 'master' into ts-gke", "committedDate": "2020-12-01T22:50:06Z", "type": "commit"}, {"oid": "c652f93722e991716dc8035516aec280ff9a2eab", "url": "https://github.com/pytorch/serve/commit/c652f93722e991716dc8035516aec280ff9a2eab", "message": "Merge branch 'master' into ts-gke", "committedDate": "2020-12-01T22:53:02Z", "type": "commit"}, {"oid": "7fdb331eef23a8e347dbab9a681617af9d286182", "url": "https://github.com/pytorch/serve/commit/7fdb331eef23a8e347dbab9a681617af9d286182", "message": "use UUID as the name of model directory", "committedDate": "2020-07-20T02:17:43Z", "type": "commit"}, {"oid": "50e57c2813be378df3121bdafb4a9ed1ddadd903", "url": "https://github.com/pytorch/serve/commit/50e57c2813be378df3121bdafb4a9ed1ddadd903", "message": "fit", "committedDate": "2020-07-20T09:28:02Z", "type": "commit"}, {"oid": "16fee7b7e21630d9bf90260df2b84997d025ecc6", "url": "https://github.com/pytorch/serve/commit/16fee7b7e21630d9bf90260df2b84997d025ecc6", "message": "fit", "committedDate": "2020-07-20T09:28:27Z", "type": "commit"}, {"oid": "6eb1e6a5e9bfee2f43c3a50c4797978282e04839", "url": "https://github.com/pytorch/serve/commit/6eb1e6a5e9bfee2f43c3a50c4797978282e04839", "message": "fit", "committedDate": "2020-07-20T09:32:27Z", "type": "commit"}, {"oid": "998fd0a5cf491dde23865d387385ff2cee430af3", "url": "https://github.com/pytorch/serve/commit/998fd0a5cf491dde23865d387385ff2cee430af3", "message": "fit", "committedDate": "2020-07-20T10:03:30Z", "type": "commit"}, {"oid": "b6133488dbb6a65892ce742fd59b00f6e5065868", "url": "https://github.com/pytorch/serve/commit/b6133488dbb6a65892ce742fd59b00f6e5065868", "message": "fit", "committedDate": "2020-07-20T10:13:45Z", "type": "commit"}, {"oid": "27fe8d20df583442429322bbd84e1de526523aa0", "url": "https://github.com/pytorch/serve/commit/27fe8d20df583442429322bbd84e1de526523aa0", "message": "fit", "committedDate": "2020-07-21T01:21:46Z", "type": "commit"}, {"oid": "b7df01f64c949dd95be9eb09ca529e407893a729", "url": "https://github.com/pytorch/serve/commit/b7df01f64c949dd95be9eb09ca529e407893a729", "message": "fit", "committedDate": "2020-07-21T01:34:22Z", "type": "commit"}, {"oid": "e4647637c6f129625aacbe1dcefdd23e180bc78a", "url": "https://github.com/pytorch/serve/commit/e4647637c6f129625aacbe1dcefdd23e180bc78a", "message": "fit", "committedDate": "2020-07-21T01:37:19Z", "type": "commit"}, {"oid": "ee6600fe3d4c1c247c66236002d8b64b90a2eea9", "url": "https://github.com/pytorch/serve/commit/ee6600fe3d4c1c247c66236002d8b64b90a2eea9", "message": "fit", "committedDate": "2020-07-21T02:01:29Z", "type": "commit"}, {"oid": "34a4058027693065e8515a0833f76067b572509d", "url": "https://github.com/pytorch/serve/commit/34a4058027693065e8515a0833f76067b572509d", "message": "fit", "committedDate": "2020-07-21T02:08:42Z", "type": "commit"}, {"oid": "34116b90d171d25cb0de12e5cbcd593ace3b7b59", "url": "https://github.com/pytorch/serve/commit/34116b90d171d25cb0de12e5cbcd593ace3b7b59", "message": "fit", "committedDate": "2020-07-21T02:14:03Z", "type": "commit"}, {"oid": "ddf72d5ec394bee13f1de4952e3c567919b83d5b", "url": "https://github.com/pytorch/serve/commit/ddf72d5ec394bee13f1de4952e3c567919b83d5b", "message": "fit", "committedDate": "2020-07-21T02:22:06Z", "type": "commit"}, {"oid": "9c508c60f53401c824a64829e23b23850da86f8d", "url": "https://github.com/pytorch/serve/commit/9c508c60f53401c824a64829e23b23850da86f8d", "message": "fit", "committedDate": "2020-07-21T02:25:20Z", "type": "commit"}, {"oid": "a27f976d09d9fa29e3b6aaa3e7757a65afa30dca", "url": "https://github.com/pytorch/serve/commit/a27f976d09d9fa29e3b6aaa3e7757a65afa30dca", "message": "fit", "committedDate": "2020-07-21T02:45:41Z", "type": "commit"}, {"oid": "62f94003db6cbb1a7d4179134e3333d541af5b00", "url": "https://github.com/pytorch/serve/commit/62f94003db6cbb1a7d4179134e3333d541af5b00", "message": "fit", "committedDate": "2020-07-21T02:48:12Z", "type": "commit"}, {"oid": "735f1568d8470b6a07c432db5dfb4229b52f1581", "url": "https://github.com/pytorch/serve/commit/735f1568d8470b6a07c432db5dfb4229b52f1581", "message": "fit", "committedDate": "2020-07-21T02:55:32Z", "type": "commit"}, {"oid": "ad3a1f92e3bea303dad6b6b9ea22569ad041d7dd", "url": "https://github.com/pytorch/serve/commit/ad3a1f92e3bea303dad6b6b9ea22569ad041d7dd", "message": "fit", "committedDate": "2020-07-21T03:04:42Z", "type": "commit"}, {"oid": "e7d1d88d16b34e5585bca5dcb82e8f72c8f575f7", "url": "https://github.com/pytorch/serve/commit/e7d1d88d16b34e5585bca5dcb82e8f72c8f575f7", "message": "fit", "committedDate": "2020-07-21T03:14:41Z", "type": "commit"}, {"oid": "0b9fae276fecbe56763eb4423e5e6e5ca833df42", "url": "https://github.com/pytorch/serve/commit/0b9fae276fecbe56763eb4423e5e6e5ca833df42", "message": "fit", "committedDate": "2020-07-21T03:18:56Z", "type": "commit"}, {"oid": "3151b3e6e8c482dedd9afe21bdaa779425671b95", "url": "https://github.com/pytorch/serve/commit/3151b3e6e8c482dedd9afe21bdaa779425671b95", "message": "fit", "committedDate": "2020-07-21T03:22:06Z", "type": "commit"}, {"oid": "6aa27c2ad0e274adb86f0118a15edbc76dcd8b7c", "url": "https://github.com/pytorch/serve/commit/6aa27c2ad0e274adb86f0118a15edbc76dcd8b7c", "message": "fit", "committedDate": "2020-07-21T03:25:51Z", "type": "commit"}, {"oid": "7022173e47e53981bff64c75e2a2f15e61e8b2a5", "url": "https://github.com/pytorch/serve/commit/7022173e47e53981bff64c75e2a2f15e61e8b2a5", "message": "fit", "committedDate": "2020-07-21T03:28:53Z", "type": "commit"}, {"oid": "cf0844519f6a3e14e61067f44454b935cd7bfce2", "url": "https://github.com/pytorch/serve/commit/cf0844519f6a3e14e61067f44454b935cd7bfce2", "message": "fit:", "committedDate": "2020-07-21T03:33:26Z", "type": "commit"}, {"oid": "0d3461c31e54f9c983c559e38904c25b195c9e68", "url": "https://github.com/pytorch/serve/commit/0d3461c31e54f9c983c559e38904c25b195c9e68", "message": "Name the model file with UUID", "committedDate": "2020-07-21T03:49:03Z", "type": "commit"}, {"oid": "582b7ce729b3decf1637c4ea7e4c585fc115bb4d", "url": "https://github.com/pytorch/serve/commit/582b7ce729b3decf1637c4ea7e4c585fc115bb4d", "message": "Name model files whith UUID", "committedDate": "2020-07-21T06:18:18Z", "type": "commit"}, {"oid": "6f64c575d757511d5cf3665dd0dfe6394ecf6212", "url": "https://github.com/pytorch/serve/commit/6f64c575d757511d5cf3665dd0dfe6394ecf6212", "message": "fix", "committedDate": "2020-07-21T08:50:47Z", "type": "commit"}, {"oid": "43e334428b7e9bbca1b47951eaee910343f46810", "url": "https://github.com/pytorch/serve/commit/43e334428b7e9bbca1b47951eaee910343f46810", "message": "remove .idea files", "committedDate": "2020-07-21T09:15:40Z", "type": "commit"}, {"oid": "ca0912a3c40aee70b2452d68ba05dcd5c7229715", "url": "https://github.com/pytorch/serve/commit/ca0912a3c40aee70b2452d68ba05dcd5c7229715", "message": "delete .idea files", "committedDate": "2020-07-21T09:26:30Z", "type": "commit"}, {"oid": "3a669ce2de7294979d07ba8eaf2643232e95ead6", "url": "https://github.com/pytorch/serve/commit/3a669ce2de7294979d07ba8eaf2643232e95ead6", "message": "delete .gitignore", "committedDate": "2020-07-21T09:28:10Z", "type": "commit"}, {"oid": "f39ca7c6740f08baa65c3e3a497710fc2fc7bd79", "url": "https://github.com/pytorch/serve/commit/f39ca7c6740f08baa65c3e3a497710fc2fc7bd79", "message": "fit", "committedDate": "2020-07-21T13:41:32Z", "type": "commit"}, {"oid": "a89b2fbcb0b2ec1232705bbf34f7fd8772fbba60", "url": "https://github.com/pytorch/serve/commit/a89b2fbcb0b2ec1232705bbf34f7fd8772fbba60", "message": "fit", "committedDate": "2020-07-21T13:43:28Z", "type": "commit"}, {"oid": "33b046c3f5b4d318cfc59e24eeb884a4e2e078ff", "url": "https://github.com/pytorch/serve/commit/33b046c3f5b4d318cfc59e24eeb884a4e2e078ff", "message": "Merge branch 'master' into master", "committedDate": "2020-07-28T04:49:15Z", "type": "commit"}, {"oid": "3ff22d3172f457beeda19c9c454b819249220bf5", "url": "https://github.com/pytorch/serve/commit/3ff22d3172f457beeda19c9c454b819249220bf5", "message": "Merge branch 'master' into master", "committedDate": "2020-07-30T03:23:41Z", "type": "commit"}, {"oid": "a770a9dd10de10c4f53386e734c44f17b8845b4f", "url": "https://github.com/pytorch/serve/commit/a770a9dd10de10c4f53386e734c44f17b8845b4f", "message": "Merge branch 'master' into master", "committedDate": "2020-07-31T23:48:18Z", "type": "commit"}, {"oid": "1a47ecef9170b43119ff1f34c024bfb0ee0f41ea", "url": "https://github.com/pytorch/serve/commit/1a47ecef9170b43119ff1f34c024bfb0ee0f41ea", "message": "Merge branch 'master' into master", "committedDate": "2020-08-04T02:06:23Z", "type": "commit"}, {"oid": "6d4197690a735b704452b54a58674565b626155f", "url": "https://github.com/pytorch/serve/commit/6d4197690a735b704452b54a58674565b626155f", "message": "Merge branch 'master' into master", "committedDate": "2020-08-06T15:49:58Z", "type": "commit"}, {"oid": "3686231d5ef152ebc6377cb5edff2ac021ebfbfe", "url": "https://github.com/pytorch/serve/commit/3686231d5ef152ebc6377cb5edff2ac021ebfbfe", "message": "TorchServe on AKS", "committedDate": "2020-08-25T01:42:31Z", "type": "commit"}, {"oid": "43208afba832476c5038d504a4996765720d6ebf", "url": "https://github.com/pytorch/serve/commit/43208afba832476c5038d504a4996765720d6ebf", "message": "fit", "committedDate": "2020-08-25T02:16:36Z", "type": "commit"}, {"oid": "2f616289ebddfd7065060621be73d17364b4b78a", "url": "https://github.com/pytorch/serve/commit/2f616289ebddfd7065060621be73d17364b4b78a", "message": "fit", "committedDate": "2020-08-25T02:34:16Z", "type": "commit"}, {"oid": "bf75ce7eebce14f4f8c2cda68ad0e261c35cb2bd", "url": "https://github.com/pytorch/serve/commit/bf75ce7eebce14f4f8c2cda68ad0e261c35cb2bd", "message": "fit", "committedDate": "2020-08-25T08:48:02Z", "type": "commit"}, {"oid": "7e1da852c2e38b731640b2975c184346595db916", "url": "https://github.com/pytorch/serve/commit/7e1da852c2e38b731640b2975c184346595db916", "message": "fit", "committedDate": "2020-08-25T09:01:08Z", "type": "commit"}, {"oid": "985b4f041dba79b47f485677b4fad93c4c798f00", "url": "https://github.com/pytorch/serve/commit/985b4f041dba79b47f485677b4fad93c4c798f00", "message": "fit", "committedDate": "2020-08-26T01:14:18Z", "type": "commit"}, {"oid": "60debba1acf30f20d02dd4deacec0f032b1941e3", "url": "https://github.com/pytorch/serve/commit/60debba1acf30f20d02dd4deacec0f032b1941e3", "message": "Merge branch 'master' into aks", "committedDate": "2020-08-26T01:16:43Z", "type": "commit"}, {"oid": "69d652cb2885175c06586d38b2cb16e029de7831", "url": "https://github.com/pytorch/serve/commit/69d652cb2885175c06586d38b2cb16e029de7831", "message": "add document", "committedDate": "2020-08-31T12:14:48Z", "type": "commit"}, {"oid": "c8923f2a058ff581be4a55de4788f0381012bc8e", "url": "https://github.com/pytorch/serve/commit/c8923f2a058ff581be4a55de4788f0381012bc8e", "message": "add TorchServe-GPU", "committedDate": "2020-09-01T06:40:32Z", "type": "commit"}, {"oid": "952956fa97fc4ad5a557ec12d05bb5e8f112cbab", "url": "https://github.com/pytorch/serve/commit/952956fa97fc4ad5a557ec12d05bb5e8f112cbab", "message": "Merge branch 'master' into aks", "committedDate": "2020-09-03T02:16:25Z", "type": "commit"}, {"oid": "89114a2911ae785713e8f94816dc86bfcb7a4d55", "url": "https://github.com/pytorch/serve/commit/89114a2911ae785713e8f94816dc86bfcb7a4d55", "message": "Share Helm Chart between EKS & AKS", "committedDate": "2020-09-03T07:28:06Z", "type": "commit"}, {"oid": "f01033505c1a084ceb3734c9b12cd853b88cb073", "url": "https://github.com/pytorch/serve/commit/f01033505c1a084ceb3734c9b12cd853b88cb073", "message": "Merge branch 'master' into aks", "committedDate": "2020-09-09T18:55:55Z", "type": "commit"}, {"oid": "5353b27cd850f3fd33b0c52e57bbae200b466e12", "url": "https://github.com/pytorch/serve/commit/5353b27cd850f3fd33b0c52e57bbae200b466e12", "message": "add Azure File as PV", "committedDate": "2020-09-10T12:29:50Z", "type": "commit"}, {"oid": "d7c81cb55db4213827f1c7c4080b2c58bffffbf5", "url": "https://github.com/pytorch/serve/commit/d7c81cb55db4213827f1c7c4080b2c58bffffbf5", "message": "fit", "committedDate": "2020-09-10T12:53:10Z", "type": "commit"}, {"oid": "669d6b9f9a340651f8da600667d72b0f41f8e968", "url": "https://github.com/pytorch/serve/commit/669d6b9f9a340651f8da600667d72b0f41f8e968", "message": "delete .DS_store", "committedDate": "2020-09-10T12:56:09Z", "type": "commit"}, {"oid": "ad4f0bdbd45fcf4f6b589c1793a878e19cb15c41", "url": "https://github.com/pytorch/serve/commit/ad4f0bdbd45fcf4f6b589c1793a878e19cb15c41", "message": "Merge branch 'master' into aks", "committedDate": "2020-09-14T02:29:45Z", "type": "commit"}, {"oid": "534a6712ee31a880b221573ec1c8c5275ad1d249", "url": "https://github.com/pytorch/serve/commit/534a6712ee31a880b221573ec1c8c5275ad1d249", "message": "Update kubernetes/AKS/README.md\r\n\r\nRemove reference to locale-specific documentation", "committedDate": "2020-09-19T22:08:11Z", "type": "commit"}, {"oid": "91ef6ee8f4987290cc9ca3096fa710463e0a1b9a", "url": "https://github.com/pytorch/serve/commit/91ef6ee8f4987290cc9ca3096fa710463e0a1b9a", "message": "EN-US", "committedDate": "2020-09-21T03:49:47Z", "type": "commit"}, {"oid": "abccc6fc8d0c953885b5d510263ed1984783e1bc", "url": "https://github.com/pytorch/serve/commit/abccc6fc8d0c953885b5d510263ed1984783e1bc", "message": "Merge branch 'master' into aks", "committedDate": "2020-09-23T03:15:57Z", "type": "commit"}, {"oid": "d43bb7f0f4b0cca1b26a38f5da562223a4f084b4", "url": "https://github.com/pytorch/serve/commit/d43bb7f0f4b0cca1b26a38f5da562223a4f084b4", "message": "Update kubernetes/EKS/README.md\n\nCo-authored-by: jeremiahschung <70922646+jeremiahschung@users.noreply.github.com>", "committedDate": "2020-09-24T01:16:28Z", "type": "commit"}, {"oid": "8576978b9a99877ef68ddcde1a227fed199bc0eb", "url": "https://github.com/pytorch/serve/commit/8576978b9a99877ef68ddcde1a227fed199bc0eb", "message": "Update kubernetes/EKS/README.md\n\nCo-authored-by: jeremiahschung <70922646+jeremiahschung@users.noreply.github.com>", "committedDate": "2020-09-24T01:16:48Z", "type": "commit"}, {"oid": "ef5445cde2a73cad0da5f83fe6043fb68306fd16", "url": "https://github.com/pytorch/serve/commit/ef5445cde2a73cad0da5f83fe6043fb68306fd16", "message": "Merge branch 'master' into aks", "committedDate": "2020-09-24T01:21:30Z", "type": "commit"}, {"oid": "970b9c0a5d85f6cc54140a508cbbad21a12b0135", "url": "https://github.com/pytorch/serve/commit/970b9c0a5d85f6cc54140a508cbbad21a12b0135", "message": "Update kubernetes/EKS/README.md\n\nCo-authored-by: jeremiahschung <70922646+jeremiahschung@users.noreply.github.com>", "committedDate": "2020-09-30T06:16:10Z", "type": "commit"}, {"oid": "24acfc3183df93c578e7465bf09a67331eca60dc", "url": "https://github.com/pytorch/serve/commit/24acfc3183df93c578e7465bf09a67331eca60dc", "message": "merge", "committedDate": "2020-09-30T06:31:24Z", "type": "commit"}, {"oid": "00e26377161ffd511d7e8b0fe47daf9de71fb2c0", "url": "https://github.com/pytorch/serve/commit/00e26377161ffd511d7e8b0fe47daf9de71fb2c0", "message": "Update kubernetes/AKS/README.md\n\nCo-authored-by: Aaqib <maaquib@gmail.com>", "committedDate": "2020-10-01T07:49:31Z", "type": "commit"}, {"oid": "bf41c6e246f405bf71409875d34b3c87bc7a9435", "url": "https://github.com/pytorch/serve/commit/bf41c6e246f405bf71409875d34b3c87bc7a9435", "message": "Update kubernetes/AKS/README.md\n\nCo-authored-by: jeremiahschung <70922646+jeremiahschung@users.noreply.github.com>", "committedDate": "2020-10-09T03:22:22Z", "type": "commit"}, {"oid": "3e4019c4705c37faf682848db7f00a0a0d383594", "url": "https://github.com/pytorch/serve/commit/3e4019c4705c37faf682848db7f00a0a0d383594", "message": "Merge branch 'master' into aks", "committedDate": "2020-10-09T03:27:44Z", "type": "commit"}, {"oid": "a5494269753cd8a9d3547a659cbfffa5c8c2b640", "url": "https://github.com/pytorch/serve/commit/a5494269753cd8a9d3547a659cbfffa5c8c2b640", "message": "change the order of AKS/README.md", "committedDate": "2020-10-09T03:34:17Z", "type": "commit"}, {"oid": "32765dbb08cd8e16d5561041f41b2cebff44237a", "url": "https://github.com/pytorch/serve/commit/32765dbb08cd8e16d5561041f41b2cebff44237a", "message": "change azurefile name", "committedDate": "2020-10-09T03:54:21Z", "type": "commit"}, {"oid": "e79e281b64fc33bedca1738fdc9031e90b72f4c7", "url": "https://github.com/pytorch/serve/commit/e79e281b64fc33bedca1738fdc9031e90b72f4c7", "message": "Merge branch 'master' of https://github.com/pytorch/serve into pytorch-master", "committedDate": "2020-11-19T05:07:09Z", "type": "commit"}, {"oid": "954843d7e7b00198204f7d0caf6b1cb2f12e086c", "url": "https://github.com/pytorch/serve/commit/954843d7e7b00198204f7d0caf6b1cb2f12e086c", "message": "Merge branch 'pytorch-master' into master", "committedDate": "2020-11-19T05:07:37Z", "type": "commit"}, {"oid": "c40639d2d8012024741cf27d61b92c3c61545f69", "url": "https://github.com/pytorch/serve/commit/c40639d2d8012024741cf27d61b92c3c61545f69", "message": "Merge branch 'master' into aks", "committedDate": "2020-11-19T05:13:38Z", "type": "commit"}, {"oid": "f8c9dde88d70f8c04721931ff602b725dcb97ef7", "url": "https://github.com/pytorch/serve/commit/f8c9dde88d70f8c04721931ff602b725dcb97ef7", "message": "Update kubernetes/AKS/README.md\n\nCo-authored-by: jeremiahschung <70922646+jeremiahschung@users.noreply.github.com>", "committedDate": "2020-11-19T05:13:45Z", "type": "commit"}, {"oid": "a8de326aa4dd2fa37ce1ea7c2bc64c4d50517916", "url": "https://github.com/pytorch/serve/commit/a8de326aa4dd2fa37ce1ea7c2bc64c4d50517916", "message": "Update kubernetes/AKS/README.md\n\nCo-authored-by: jeremiahschung <70922646+jeremiahschung@users.noreply.github.com>", "committedDate": "2020-11-19T05:13:47Z", "type": "commit"}, {"oid": "1f5604a9f5c54970fa7fe6f2eb101469f8e52ec5", "url": "https://github.com/pytorch/serve/commit/1f5604a9f5c54970fa7fe6f2eb101469f8e52ec5", "message": "Update kubernetes/AKS/README.md\n\nCo-authored-by: jeremiahschung <70922646+jeremiahschung@users.noreply.github.com>", "committedDate": "2020-11-19T05:13:49Z", "type": "commit"}, {"oid": "4623034a030d990cbb040d7b57e7c1c9693d8215", "url": "https://github.com/pytorch/serve/commit/4623034a030d990cbb040d7b57e7c1c9693d8215", "message": "Update kubernetes/AKS/README.md\n\nCo-authored-by: jeremiahschung <70922646+jeremiahschung@users.noreply.github.com>", "committedDate": "2020-11-19T05:13:51Z", "type": "commit"}, {"oid": "bf71d6e802398687fa1cbc2013447673e0021cde", "url": "https://github.com/pytorch/serve/commit/bf71d6e802398687fa1cbc2013447673e0021cde", "message": "Update kubernetes/AKS/README.md\n\nCo-authored-by: jeremiahschung <70922646+jeremiahschung@users.noreply.github.com>", "committedDate": "2020-11-19T05:13:53Z", "type": "commit"}, {"oid": "6b4eaf863fef63f4730a6ecabc8783cb3a0ad88b", "url": "https://github.com/pytorch/serve/commit/6b4eaf863fef63f4730a6ecabc8783cb3a0ad88b", "message": "Update kubernetes/AKS/README.md\n\nCo-authored-by: jeremiahschung <70922646+jeremiahschung@users.noreply.github.com>", "committedDate": "2020-11-19T05:13:55Z", "type": "commit"}, {"oid": "82a895f84408459402e835c369bd74f1d8fea7df", "url": "https://github.com/pytorch/serve/commit/82a895f84408459402e835c369bd74f1d8fea7df", "message": "add result to bash block", "committedDate": "2020-11-19T05:13:57Z", "type": "commit"}, {"oid": "eb1c33c7eec53c3e5b0ff189012fbb167e36bcdd", "url": "https://github.com/pytorch/serve/commit/eb1c33c7eec53c3e5b0ff189012fbb167e36bcdd", "message": "add result to bash block", "committedDate": "2020-11-19T05:13:59Z", "type": "commit"}, {"oid": "814a1c52255ff1a2895a0822f4b0d175c6108014", "url": "https://github.com/pytorch/serve/commit/814a1c52255ff1a2895a0822f4b0d175c6108014", "message": "Update with section to remove aks cluster and resource group", "committedDate": "2020-11-19T05:14:01Z", "type": "commit"}, {"oid": "de263f92fa6b5469043dc6c4324650c25dd04ba7", "url": "https://github.com/pytorch/serve/commit/de263f92fa6b5469043dc6c4324650c25dd04ba7", "message": "Merge branch 'master' into aks", "committedDate": "2020-11-19T21:28:54Z", "type": "commit"}, {"oid": "8838ef7e5c228747ba13af7e827e4c3e8930b7bc", "url": "https://github.com/pytorch/serve/commit/8838ef7e5c228747ba13af7e827e4c3e8930b7bc", "message": "Merge branch 'master' into aks", "committedDate": "2020-11-21T02:51:26Z", "type": "commit"}, {"oid": "d19973ad72da4cdd6b00f2c6642aeb180b839927", "url": "https://github.com/pytorch/serve/commit/d19973ad72da4cdd6b00f2c6642aeb180b839927", "message": "Remove dup archiveTest() test case", "committedDate": "2020-11-21T03:18:44Z", "type": "commit"}, {"oid": "009d24449ce00327fc6390fe4419b3741c800636", "url": "https://github.com/pytorch/serve/commit/009d24449ce00327fc6390fe4419b3741c800636", "message": "Feature: Torchserve gke support", "committedDate": "2020-11-22T12:24:30Z", "type": "commit"}, {"oid": "55002383c5c49b1204425aa41279cfeb8d47e3f8", "url": "https://github.com/pytorch/serve/commit/55002383c5c49b1204425aa41279cfeb8d47e3f8", "message": "Feature: Add troubleshooting steps for gke support", "committedDate": "2020-11-25T05:23:08Z", "type": "commit"}, {"oid": "cb62a6ae6127cf148b3e50eaeaa5d82102464654", "url": "https://github.com/pytorch/serve/commit/cb62a6ae6127cf148b3e50eaeaa5d82102464654", "message": "Fix: Update readme docs for torchserve gke support", "committedDate": "2020-11-26T14:50:24Z", "type": "commit"}, {"oid": "c9543cd29dcd05055e62c0765f5828924f4e42c5", "url": "https://github.com/pytorch/serve/commit/c9543cd29dcd05055e62c0765f5828924f4e42c5", "message": "Merge branch 'master' into ts-gke", "committedDate": "2020-11-27T00:12:37Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTI2MjczMw==", "url": "https://github.com/pytorch/serve/pull/793#discussion_r531262733", "bodyText": "@jagadeeshi2i Please add steps for cleanup of the nfs-disk as well", "author": "chauhang", "createdAt": "2020-11-27T00:34:19Z", "path": "kubernetes/GKE/README.md", "diffHunk": "@@ -0,0 +1,520 @@\n+## TorchServe on Google Kubernetes Engine (AKS)\n+\n+### 1 Create an GKE cluster\n+\n+This quickstart requires that you are running the gcloud version 319.0.0 or later. Run `gcloud --version` to find the version. If you need to install or upgrade, see [Install gcloud SDK](https://cloud.google.com/sdk/docs/install).\n+\n+#### 1.1 Set Gcloud account information\n+\n+```bash\n+gcloud init\n+```\n+\n+#### 1.2 Create GKE cluster\n+\n+Use the [gcloud container clusters create](https://cloud.google.com/kubernetes-engine/docs/how-to/creating-a-zonal-cluster) command to create an GKE cluster. The following example creates a cluster named *torchserve* with one node with a *nvidia-tesla-t4* GPU. This will take several minutes to complete.\n+\n+```bash\n+gcloud container clusters create torchserve --machine-type n1-standard-4 --accelerator type=nvidia-tesla-t4,count=1 --num-nodes 1 --region us-west1 --node-locations us-west1-a\n+\n+WARNING: Warning: basic authentication is deprecated, and will be removed in GKE control plane versions 1.19 and newer. For a list of recommended authentication methods, see: https://cloud.google.com/kubernetes-engine/docs/how-to/api-server-authentication\n+WARNING: Currently VPC-native is not the default mode during cluster creation. In the future, this will become the default mode and can be disabled using `--no-enable-ip-alias` flag. Use `--[no-]enable-ip-alias` flag to suppress this warning.\n+WARNING: Newly created clusters and node-pools will have node auto-upgrade enabled by default. This can be disabled using the `--no-enable-autoupgrade` flag.\n+WARNING: Starting with version 1.18, clusters will have shielded GKE nodes by default.\n+WARNING: Your Pod address range (`--cluster-ipv4-cidr`) can accommodate at most 1008 node(s). \n+WARNING: Starting with version 1.19, newly created clusters and node-pools will have COS_CONTAINERD as the default node image when no image type is specified.\n+Machines with GPUs have certain limitations which may affect your workflow. Learn more at https://cloud.google.com/kubernetes-engine/docs/how-to/gpus\n+Creating cluster ts in us-west1... Cluster is being health-checked (master is healthy)...done.                                                                    \n+Created [https://container.googleapis.com/v1/projects/pytorch-tests-261423/zones/us-west1/clusters/ts].\n+To inspect the contents of your cluster, go to: https://console.cloud.google.com/kubernetes/workload_/gcloud/us-west1/ts?project=pytorch-tests-261423\n+kubeconfig entry generated for ts.\n+NAME  LOCATION  MASTER_VERSION   MASTER_IP      MACHINE_TYPE   NODE_VERSION     NUM_NODES  STATUS\n+ts    us-west1  1.16.13-gke.401  34.83.140.167  n1-standard-4  1.16.13-gke.401  1          RUNNING\n+```\n+\n+#### 1.3 Connect to the cluster\n+\n+To manage a Kubernetes cluster, you use [kubectl](https://kubernetes.io/docs/user-guide/kubectl/), the Kubernetes command-line client. If you use GKE Cloud Shell, `kubectl` is already installed. To install `kubectl` locally, use the [gcloud components install](https://kubernetes.io/docs/tasks/tools/install-kubectl/) command:\n+\n+```bash\n+gcloud components install kubectl\n+```\n+\n+To configure `kubectl` to connect to your Kubernetes cluster, use the [gcloud container clusters get-credentials](https://cloud.google.com/sdk/gcloud/reference/container/clusters/get-credentials) command. This command downloads credentials and configures the Kubernetes CLI to use them.\n+\n+```bash\n+gcloud container clusters get-credentials torchserve --region us-west1 --project pytorch-tests-261423\n+Fetching cluster endpoint and auth data.\n+kubeconfig entry generated for torchserve.\n+```\n+\n+#### 1.4 Install helm\n+\n+```bash\n+curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3\n+chmod 700 get_helm.sh\n+./get_helm.sh\n+```\n+\n+### 2 Deploy TorchServe on GKE\n+\n+#### 2.1 Download the github repository and enter the kubernetes directory\n+\n+```bash\n+git clone https://github.com/pytorch/serve.git\n+\n+cd serve/kubernetes/GKE\n+```\n+\n+#### 2.2 Install NVIDIA device plugin\n+\n+Before the GPUs in the nodes can be used, you must deploy a DaemonSet for the NVIDIA device plugin. This DaemonSet runs a pod on each node to provide the required drivers for the GPUs.\n+\n+```bash\n+kubectl apply -f https://raw.githubusercontent.com/GoogleCloudPlatform/container-engine-accelerators/master/nvidia-driver-installer/cos/daemonset-preloaded.yaml\n+daemonset.apps/nvidia-driver-installer created\n+```\n+\n+```bash\n+kubectl get nodes \"-o=custom-columns=NAME:.metadata.name,MEMORY:.status.allocatable.memory,CPU:.status.allocatable.cpu,GPU:.status.allocatable.nvidia\\.com/gpu\"\n+``` \n+should show something similar to:\n+\n+```bash\n+NAME                                        MEMORY       CPU     GPU\n+gke-torchserve-default-pool-aa9f7d99-ggc9   12698376Ki   3920m   1\n+```\n+\n+#### 2.3 Create a storage disk\n+\n+A standard storage class is created with google compute disk. If multiple pods need concurrent access to the same storage volume, you need Google NFS. Create the storage disk named *nfs-disk* with the following command:\n+\n+```bash\n+gcloud compute disks create --size=200GB --zone=us-west1-a nfs-disk\n+\n+NAME     ZONE        SIZE_GB  TYPE         STATUS\n+nfs-disk  us-west1-a  200      pd-standard  READY\n+\n+New disks are unformatted. You must format and mount a disk before it\n+can be used. You can find instructions on how to do this at:\n+\n+https://cloud.google.com/compute/docs/disks/add-persistent-disk#formatting\n+\n+```\n+\n+#### 2.4 Create NFS Server\n+\n+Modify the values.yaml in the nfs-provisioner with persistent volume name, disk name and node affinity zones and install nfs-provisioner using helm.\n+\n+```bash\n+cd GKE\n+\n+helm install mynfs ./nfs-provisioner/\n+```\n+\n+```kubectl get pods``` should show something similiar to:\n+\n+```bash\n+NAME                                             READY   STATUS    RESTARTS   AGE\n+pod/mynfs-nfs-provisioner-bcc7c96cc-5xr2k   1/1     Running   0          19h\n+```\n+\n+#### 2.5 Create PV and PVC\n+\n+Run the below command and get NFS server IP:\n+\n+```bash\n+kubectl get svc -n default mynfs-nfs-provisioner -o jsonpath='{.spec.clusterIP}'\n+```\n+\n+Replace storage size and server IP in pv_pvc.yaml with the server IP got from above command. Run the below kubectl command and create PV and PVC\n+\n+```bash\n+kubectl apply -f templates/pv_pvc.yaml -n default\n+```\n+\n+Verify that the PVC / PV is created by excuting.\n+\n+```bash\n+kubectl get pvc,pv -n default\n+```\n+\n+Your output should look similar to\n+\n+```bash\n+NAME                   CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS   CLAIM         STORAGECLASS   REASON   AGE\n+persistentvolume/nfs   10Gi       RWX            Retain           Bound    default/nfs                           20h\n+\n+NAME                        STATUS   VOLUME   CAPACITY   ACCESS MODES   STORAGECLASS   AGE\n+persistentvolumeclaim/nfs   Bound    nfs      10Gi       RWX                           20h\n+```\n+\n+#### 2.6 Create a pod and copy MAR / config files\n+\n+Create a pod named `pod/model-store-pod` with PersistentVolume mounted so that we can copy the MAR / config files.\n+\n+```bash\n+kubectl apply -f templates/pod.yaml\n+```\n+\n+Your output should look similar to\n+\n+```bash\n+pod/model-store-pod created\n+```\n+\n+Verify that the pod is created by excuting.\n+\n+```bash\n+kubectl get po\n+```\n+\n+Your output should look similar to\n+\n+```bash\n+NAME                                              READY   STATUS    RESTARTS   AGE\n+model-store-pod                                   1/1     Running   0          143m\n+```\n+\n+#### 2.6 Down and copy MAR / config files\n+\n+```bash\n+wget https://torchserve.pytorch.org/mar_files/squeezenet1_1.mar\n+wget https://torchserve.pytorch.org/mar_files/mnist.mar\n+\n+kubectl exec --tty pod/model-store-pod -- mkdir /pv/model-store/\n+kubectl cp squeezenet1_1.mar model-store-pod:/pv/model-store/squeezenet1_1.mar\n+kubectl cp mnist.mar model-store-pod:/pv/model-store/mnist.mar\n+\n+kubectl exec --tty pod/model-store-pod -- mkdir /pv/config/\n+kubectl cp config.properties model-store-pod:/pv/config/config.properties\n+```\n+\n+Verify that the MAR / config files have been copied to the directory.\n+\n+```bash\n+kubectl exec --tty pod/model-store-pod -- ls -lR /pv/\n+```\n+\n+Your output should look similar to\n+\n+```bash\n+/pv/:\n+total 28\n+drwxr-xr-x 2 root root  4096 Nov 21 16:30 config\n+-rw-r--r-- 1 root root    16 Nov 21 15:42 index.html\n+drwx------ 2 root root 16384 Nov 21 15:42 lost+found\n+drwxr-xr-x 2 root root  4096 Nov 21 16:12 model-store\n+\n+/pv/config:\n+total 4\n+-rw-rw-r-- 1 1000 1000 579 Nov 21 16:30 config.properties\n+\n+/pv/lost+found:\n+total 0\n+\n+/pv/model-store:\n+total 8864\n+-rw-rw-r-- 1 1000 1000 4463882 Nov 21 16:12 mnist.mar\n+-rw-rw-r-- 1 1000 1000 4609382 Nov 21 16:11 squeezenet1_1.mar\n+```\n+\n+Delete model store pod.\n+\n+```bash\n+kubectl delete pod/model-store-pod\n+pod \"model-store-pod\" deleted\n+```\n+\n+#### 2.7 Install Torchserve using Helm Charts\n+\n+Enter the Helm directory and install TorchServe using Helm Charts.\n+\n+```bash\n+cd ../Helm\n+```\n+\n+```bash\n+helm install ts .\n+```\n+\n+Your output should look similar to\n+\n+```bash\n+NAME: ts\n+LAST DEPLOYED: Thu Aug 20 02:07:38 2020\n+NAMESPACE: default\n+STATUS: deployed\n+REVISION: 1\n+TEST SUITE: None\n+```\n+\n+#### 2.8 Check the status of TorchServe\n+\n+```bash\n+kubectl get po\n+```\n+\n+The installation will take a few minutes. Output like this means the installation is not completed yet.\n+\n+```bash\n+NAME                               READY   STATUS              RESTARTS   AGE\n+torchserve-75f5b67469-5hnsn        0/1     ContainerCreating   0          6s\n+\n+Output like this means the installation is completed.\n+\n+NAME                               READY   STATUS    RESTARTS   AGE\n+torchserve-75f5b67469-5hnsn        1/1     Running   0          2m36s\n+```\n+\n+### 3 Test Torchserve Installation\n+\n+#### 3.1 Fetch the Load Balancer Extenal IP\n+\n+Fetch the Load Balancer Extenal IP by executing.\n+\n+```bash\n+kubectl get svc\n+```\n+\n+Your output should look similar to\n+\n+```bash\n+NAME               TYPE           CLUSTER-IP     EXTERNAL-IP    PORT(S)                         AGE\n+kubernetes         ClusterIP      10.0.0.1       <none>         443/TCP                         5d19h\n+torchserve         LoadBalancer   10.0.39.88     your-external-IP   8080:30306/TCP,8081:30442/TCP   48s\n+```\n+\n+#### 3.2 Test Management / Prediction APIs\n+\n+```bash\n+curl http://your-external-IP:8081/models\n+```\n+\n+Your output should look similar to\n+\n+```json\n+{\n+  \"models\": [\n+    {\n+      \"modelName\": \"mnist\",\n+      \"modelUrl\": \"mnist.mar\"\n+    },\n+    {\n+      \"modelName\": \"squeezenet1_1\",\n+      \"modelUrl\": \"squeezenet1_1.mar\"\n+    }\n+  ]\n+}\n+```\n+\n+```bash\n+curl http://your-external-IP:8081/models/mnist\n+```\n+\n+Your output should look similar to\n+\n+```json\n+[\n+  {\n+    \"modelName\": \"mnist\",\n+    \"modelVersion\": \"1.0\",\n+    \"modelUrl\": \"mnist.mar\",\n+    \"runtime\": \"python\",\n+    \"minWorkers\": 5,\n+    \"maxWorkers\": 5,\n+    \"batchSize\": 1,\n+    \"maxBatchDelay\": 200,\n+    \"loadedAtStartup\": false,\n+    \"workers\": [\n+      {\n+        \"id\": \"9003\",\n+        \"startTime\": \"2020-08-20T03:06:38.435Z\",\n+        \"status\": \"READY\",\n+        \"gpu\": false,\n+        \"memoryUsage\": 32194560\n+      },\n+      {\n+        \"id\": \"9004\",\n+        \"startTime\": \"2020-08-20T03:06:38.436Z\",\n+        \"status\": \"READY\",\n+        \"gpu\": false,\n+        \"memoryUsage\": 31842304\n+      },\n+      {\n+        \"id\": \"9005\",\n+        \"startTime\": \"2020-08-20T03:06:38.436Z\",\n+        \"status\": \"READY\",\n+        \"gpu\": false,\n+        \"memoryUsage\": 44621824\n+      },\n+      {\n+        \"id\": \"9006\",\n+        \"startTime\": \"2020-08-20T03:06:38.436Z\",\n+        \"status\": \"READY\",\n+        \"gpu\": false,\n+        \"memoryUsage\": 42045440\n+      },\n+      {\n+        \"id\": \"9007\",\n+        \"startTime\": \"2020-08-20T03:06:38.436Z\",\n+        \"status\": \"READY\",\n+        \"gpu\": false,\n+        \"memoryUsage\": 31584256\n+      }\n+    ]\n+  }\n+]\n+```\n+\n+```bash\n+curl -v http://your-external-IP:8080/predictions/mnist -T ../../examples/image_classifier/mnist/test_data/0.png\n+\n+*   Trying 34.82.176.215...\n+* Connected to 34.82.176.215 (34.82.176.215) port 8080 (#0)\n+> PUT /predictions/mnist HTTP/1.1\n+> Host: 34.82.176.215:8080\n+> User-Agent: curl/7.47.0\n+> Accept: */*\n+> Content-Length: 272\n+> Expect: 100-continue\n+> \n+< HTTP/1.1 100 Continue\n+* We are completely uploaded and fine\n+< HTTP/1.1 200 \n+< x-request-id: 0a70761f-0df4-40dd-9620-2cd98cb810d5\n+< Pragma: no-cache\n+< Cache-Control: no-cache; no-store, must-revalidate, private\n+< Expires: Thu, 01 Jan 1970 00:00:00 UTC\n+< content-length: 1\n+< connection: keep-alive\n+< \n+* Connection #0 to host 34.82.176.215 left intact\n+0\n+```\n+\n+### 4 Troubleshooting\n+\n+#### 4.1 Troubleshooting GKE Cluster Creation**\n+\n+Possible errors in this step may be a result of\n+\n+* IAM limits.\n+* Quota restrictions during cluster creation - [GKE Quotas](https://cloud.google.com/compute/quotas)\n+\n+You should able be able to find the following resources at the end of this step in the respective Gcoud consoles\n+\n+* GKE -> Cluser in the Gcloud Console\n+\n+#### 4.2 Troubleshooting NFS Persitant Volume Creation\n+\n+Possible error in this step may be a result of one of the following. Your pod my be struck in *Init / Creating* forever / persitant volume claim may be in *Pending* forever.\n+\n+* Storage disk not created / wrong storage disk name.\n+\n+  * Check if the storage is created and the correct name is given in the values.yaml\n+\n+* Node affinity does not match\n+\n+  * Check affinity zone in values.yaml to match the storage disk.\n+\n+* Wrong Server IP\n+  \n+  * Check the server IP mentioned in the pv_pvc.yaml\n+\n+* You can execute the following commands to inspect the pods / events to debug NFS Issues\n+\n+    ```bash\n+    kubectl get events --sort-by='.metadata.creationTimestamp'\n+    kubectl get pod --all-namespaces # Get the Pod ID\n+    kubectl logs pod/mynfs-nfs-provisioner-YOUR_POD\n+    kubectl logs pod/mynfs-nfs-provisioner-YOUR_POD\n+    kubectl describe pod/mynfs-nfs-provisioner-YOUR_POD\n+    ```\n+\n+#### 4.3 Troubleshooting Torchserve Helm Chart\n+\n+Possible errors in this step may be a result of\n+\n+* Incorrect values in ``values.yaml``\n+  * Changing values in `torchserve.pvd_mount`  would need corresponding change in `config.properties`\n+* Invalid `config.properties`\n+  * You can verify these values by running this for local TS installation\n+* TS Pods in *Pending* state\n+  * Ensure you have available Nodes in Node Group\n+\n+* Helm Installation\n+  * You may inspect the values by running ``helm list`` and `helm get all ts` to verify if the values used for the installation\n+  * You can uninstall / reinstall the helm chart by executing  `helm uninstall ts` and `helm install ts .`\n+  * If you get an error `invalid: data: Too long: must have at most 1048576 characters`, ensure that you dont have any stale files in your kubernetes dir. Else add them to .helmignore file.\n+\n+#### 4.4 Troubleshooting Torchserve\n+\n+* Check pod logs\n+\n+  ```bash\n+  kubectl logs torchserve-75f5b67469-5hnsn -c torchserve -n default\n+\n+  2020-11-26 14:33:22,974 [INFO ] main org.pytorch.serve.ModelServer - \n+  Torchserve version: 0.1.1\n+  TS Home: /home/venv/lib/python3.6/site-packages\n+  Current directory: /home/model-server\n+  Temp directory: /home/model-server/tmp\n+  Number of GPUs: 1\n+  Number of CPUs: 1\n+  Max heap size: 989 M\n+  Python executable: /home/venv/bin/python3\n+  Config file: /home/model-server/shared/config/config.properties\n+  Inference address: http://0.0.0.0:8080\n+  Management address: http://0.0.0.0:8081\n+  Model Store: /home/model-server/shared/model-store\n+  Initial Models: N/A\n+  Log dir: /home/model-server/logs\n+  Metrics dir: /home/model-server/logs\n+  Netty threads: 32\n+  Netty client threads: 0\n+  Default workers per model: 1\n+  Blacklist Regex: N/A\n+  Maximum Response Size: 6553500\n+  Maximum Request Size: 6553500\n+  Prefer direct buffer: false\n+  2020-11-26 14:33:23,004 [INFO ] main org.pytorch.serve.snapshot.SnapshotManager - Started restoring models from snapshot {\"name\":\"startup.cfg\",\"modelCount\":2,\"models\":{\"squeezenet1_1\":{\"1.0\":{\"defaultVersion\":true,\"marName\":\"squeezenet1_1.mar\",\"minWorkers\":3,\"maxWorkers\":3,\"batchSize\":1,\"maxBatchDelay\":100,\"responseTimeout\":120}},\"mnist\":{\"1.0\":{\"defaultVersion\":true,\"marName\":\"mnist.mar\",\"minWorkers\":5,\"maxWorkers\":5,\"batchSize\":1,\"maxBatchDelay\":200,\"responseTimeout\":60}}}}\n+  ```\n+\n+* Inspect pod\n+\n+  ```bash\n+  kubectl exec -it torchserve-75f5b67469-5hnsn -c torchserve -n default -- bash\n+  ```\n+\n+#### 4.5 Delete the Resources", "originalCommit": "c9543cd29dcd05055e62c0765f5828924f4e42c5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTI2Mjg0Mg==", "url": "https://github.com/pytorch/serve/pull/793#discussion_r531262842", "bodyText": "Obfuscate the project name in the logs", "author": "chauhang", "createdAt": "2020-11-27T00:35:00Z", "path": "kubernetes/GKE/README.md", "diffHunk": "@@ -0,0 +1,520 @@\n+## TorchServe on Google Kubernetes Engine (AKS)\n+\n+### 1 Create an GKE cluster\n+\n+This quickstart requires that you are running the gcloud version 319.0.0 or later. Run `gcloud --version` to find the version. If you need to install or upgrade, see [Install gcloud SDK](https://cloud.google.com/sdk/docs/install).\n+\n+#### 1.1 Set Gcloud account information\n+\n+```bash\n+gcloud init\n+```\n+\n+#### 1.2 Create GKE cluster\n+\n+Use the [gcloud container clusters create](https://cloud.google.com/kubernetes-engine/docs/how-to/creating-a-zonal-cluster) command to create an GKE cluster. The following example creates a cluster named *torchserve* with one node with a *nvidia-tesla-t4* GPU. This will take several minutes to complete.\n+\n+```bash\n+gcloud container clusters create torchserve --machine-type n1-standard-4 --accelerator type=nvidia-tesla-t4,count=1 --num-nodes 1 --region us-west1 --node-locations us-west1-a\n+\n+WARNING: Warning: basic authentication is deprecated, and will be removed in GKE control plane versions 1.19 and newer. For a list of recommended authentication methods, see: https://cloud.google.com/kubernetes-engine/docs/how-to/api-server-authentication\n+WARNING: Currently VPC-native is not the default mode during cluster creation. In the future, this will become the default mode and can be disabled using `--no-enable-ip-alias` flag. Use `--[no-]enable-ip-alias` flag to suppress this warning.\n+WARNING: Newly created clusters and node-pools will have node auto-upgrade enabled by default. This can be disabled using the `--no-enable-autoupgrade` flag.\n+WARNING: Starting with version 1.18, clusters will have shielded GKE nodes by default.\n+WARNING: Your Pod address range (`--cluster-ipv4-cidr`) can accommodate at most 1008 node(s). \n+WARNING: Starting with version 1.19, newly created clusters and node-pools will have COS_CONTAINERD as the default node image when no image type is specified.\n+Machines with GPUs have certain limitations which may affect your workflow. Learn more at https://cloud.google.com/kubernetes-engine/docs/how-to/gpus\n+Creating cluster ts in us-west1... Cluster is being health-checked (master is healthy)...done.                                                                    \n+Created [https://container.googleapis.com/v1/projects/pytorch-tests-261423/zones/us-west1/clusters/ts].\n+To inspect the contents of your cluster, go to: https://console.cloud.google.com/kubernetes/workload_/gcloud/us-west1/ts?project=pytorch-tests-261423", "originalCommit": "c9543cd29dcd05055e62c0765f5828924f4e42c5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTI2MzEzNA==", "url": "https://github.com/pytorch/serve/pull/793#discussion_r531263134", "bodyText": "mention user has to specify their own project name. It will be better to define it as a ENV config variable at the beginning and just reference that here", "author": "chauhang", "createdAt": "2020-11-27T00:36:47Z", "path": "kubernetes/GKE/README.md", "diffHunk": "@@ -0,0 +1,520 @@\n+## TorchServe on Google Kubernetes Engine (AKS)\n+\n+### 1 Create an GKE cluster\n+\n+This quickstart requires that you are running the gcloud version 319.0.0 or later. Run `gcloud --version` to find the version. If you need to install or upgrade, see [Install gcloud SDK](https://cloud.google.com/sdk/docs/install).\n+\n+#### 1.1 Set Gcloud account information\n+\n+```bash\n+gcloud init\n+```\n+\n+#### 1.2 Create GKE cluster\n+\n+Use the [gcloud container clusters create](https://cloud.google.com/kubernetes-engine/docs/how-to/creating-a-zonal-cluster) command to create an GKE cluster. The following example creates a cluster named *torchserve* with one node with a *nvidia-tesla-t4* GPU. This will take several minutes to complete.\n+\n+```bash\n+gcloud container clusters create torchserve --machine-type n1-standard-4 --accelerator type=nvidia-tesla-t4,count=1 --num-nodes 1 --region us-west1 --node-locations us-west1-a\n+\n+WARNING: Warning: basic authentication is deprecated, and will be removed in GKE control plane versions 1.19 and newer. For a list of recommended authentication methods, see: https://cloud.google.com/kubernetes-engine/docs/how-to/api-server-authentication\n+WARNING: Currently VPC-native is not the default mode during cluster creation. In the future, this will become the default mode and can be disabled using `--no-enable-ip-alias` flag. Use `--[no-]enable-ip-alias` flag to suppress this warning.\n+WARNING: Newly created clusters and node-pools will have node auto-upgrade enabled by default. This can be disabled using the `--no-enable-autoupgrade` flag.\n+WARNING: Starting with version 1.18, clusters will have shielded GKE nodes by default.\n+WARNING: Your Pod address range (`--cluster-ipv4-cidr`) can accommodate at most 1008 node(s). \n+WARNING: Starting with version 1.19, newly created clusters and node-pools will have COS_CONTAINERD as the default node image when no image type is specified.\n+Machines with GPUs have certain limitations which may affect your workflow. Learn more at https://cloud.google.com/kubernetes-engine/docs/how-to/gpus\n+Creating cluster ts in us-west1... Cluster is being health-checked (master is healthy)...done.                                                                    \n+Created [https://container.googleapis.com/v1/projects/pytorch-tests-261423/zones/us-west1/clusters/ts].\n+To inspect the contents of your cluster, go to: https://console.cloud.google.com/kubernetes/workload_/gcloud/us-west1/ts?project=pytorch-tests-261423\n+kubeconfig entry generated for ts.\n+NAME  LOCATION  MASTER_VERSION   MASTER_IP      MACHINE_TYPE   NODE_VERSION     NUM_NODES  STATUS\n+ts    us-west1  1.16.13-gke.401  34.83.140.167  n1-standard-4  1.16.13-gke.401  1          RUNNING\n+```\n+\n+#### 1.3 Connect to the cluster\n+\n+To manage a Kubernetes cluster, you use [kubectl](https://kubernetes.io/docs/user-guide/kubectl/), the Kubernetes command-line client. If you use GKE Cloud Shell, `kubectl` is already installed. To install `kubectl` locally, use the [gcloud components install](https://kubernetes.io/docs/tasks/tools/install-kubectl/) command:\n+\n+```bash\n+gcloud components install kubectl\n+```\n+\n+To configure `kubectl` to connect to your Kubernetes cluster, use the [gcloud container clusters get-credentials](https://cloud.google.com/sdk/gcloud/reference/container/clusters/get-credentials) command. This command downloads credentials and configures the Kubernetes CLI to use them.\n+\n+```bash\n+gcloud container clusters get-credentials torchserve --region us-west1 --project pytorch-tests-261423", "originalCommit": "c9543cd29dcd05055e62c0765f5828924f4e42c5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTI2MzIzMQ==", "url": "https://github.com/pytorch/serve/pull/793#discussion_r531263231", "bodyText": "@jagadeeshi2i Please include steps for CPU only cluster as well. Current steps are for a GPU cluster", "author": "chauhang", "createdAt": "2020-11-27T00:37:26Z", "path": "kubernetes/GKE/README.md", "diffHunk": "@@ -0,0 +1,520 @@\n+## TorchServe on Google Kubernetes Engine (AKS)\n+\n+### 1 Create an GKE cluster\n+\n+This quickstart requires that you are running the gcloud version 319.0.0 or later. Run `gcloud --version` to find the version. If you need to install or upgrade, see [Install gcloud SDK](https://cloud.google.com/sdk/docs/install).\n+\n+#### 1.1 Set Gcloud account information\n+\n+```bash\n+gcloud init\n+```\n+\n+#### 1.2 Create GKE cluster\n+\n+Use the [gcloud container clusters create](https://cloud.google.com/kubernetes-engine/docs/how-to/creating-a-zonal-cluster) command to create an GKE cluster. The following example creates a cluster named *torchserve* with one node with a *nvidia-tesla-t4* GPU. This will take several minutes to complete.\n+\n+```bash\n+gcloud container clusters create torchserve --machine-type n1-standard-4 --accelerator type=nvidia-tesla-t4,count=1 --num-nodes 1 --region us-west1 --node-locations us-west1-a\n+\n+WARNING: Warning: basic authentication is deprecated, and will be removed in GKE control plane versions 1.19 and newer. For a list of recommended authentication methods, see: https://cloud.google.com/kubernetes-engine/docs/how-to/api-server-authentication\n+WARNING: Currently VPC-native is not the default mode during cluster creation. In the future, this will become the default mode and can be disabled using `--no-enable-ip-alias` flag. Use `--[no-]enable-ip-alias` flag to suppress this warning.\n+WARNING: Newly created clusters and node-pools will have node auto-upgrade enabled by default. This can be disabled using the `--no-enable-autoupgrade` flag.\n+WARNING: Starting with version 1.18, clusters will have shielded GKE nodes by default.\n+WARNING: Your Pod address range (`--cluster-ipv4-cidr`) can accommodate at most 1008 node(s). \n+WARNING: Starting with version 1.19, newly created clusters and node-pools will have COS_CONTAINERD as the default node image when no image type is specified.\n+Machines with GPUs have certain limitations which may affect your workflow. Learn more at https://cloud.google.com/kubernetes-engine/docs/how-to/gpus\n+Creating cluster ts in us-west1... Cluster is being health-checked (master is healthy)...done.                                                                    \n+Created [https://container.googleapis.com/v1/projects/pytorch-tests-261423/zones/us-west1/clusters/ts].\n+To inspect the contents of your cluster, go to: https://console.cloud.google.com/kubernetes/workload_/gcloud/us-west1/ts?project=pytorch-tests-261423\n+kubeconfig entry generated for ts.\n+NAME  LOCATION  MASTER_VERSION   MASTER_IP      MACHINE_TYPE   NODE_VERSION     NUM_NODES  STATUS\n+ts    us-west1  1.16.13-gke.401  34.83.140.167  n1-standard-4  1.16.13-gke.401  1          RUNNING\n+```\n+\n+#### 1.3 Connect to the cluster\n+\n+To manage a Kubernetes cluster, you use [kubectl](https://kubernetes.io/docs/user-guide/kubectl/), the Kubernetes command-line client. If you use GKE Cloud Shell, `kubectl` is already installed. To install `kubectl` locally, use the [gcloud components install](https://kubernetes.io/docs/tasks/tools/install-kubectl/) command:\n+\n+```bash\n+gcloud components install kubectl\n+```\n+\n+To configure `kubectl` to connect to your Kubernetes cluster, use the [gcloud container clusters get-credentials](https://cloud.google.com/sdk/gcloud/reference/container/clusters/get-credentials) command. This command downloads credentials and configures the Kubernetes CLI to use them.\n+\n+```bash\n+gcloud container clusters get-credentials torchserve --region us-west1 --project pytorch-tests-261423\n+Fetching cluster endpoint and auth data.\n+kubeconfig entry generated for torchserve.\n+```\n+\n+#### 1.4 Install helm\n+\n+```bash\n+curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3\n+chmod 700 get_helm.sh\n+./get_helm.sh\n+```\n+\n+### 2 Deploy TorchServe on GKE\n+\n+#### 2.1 Download the github repository and enter the kubernetes directory\n+\n+```bash\n+git clone https://github.com/pytorch/serve.git\n+\n+cd serve/kubernetes/GKE\n+```\n+\n+#### 2.2 Install NVIDIA device plugin", "originalCommit": "c9543cd29dcd05055e62c0765f5828924f4e42c5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTI2MzM3NQ==", "url": "https://github.com/pytorch/serve/pull/793#discussion_r531263375", "bodyText": "@jagadeeshi2i Please mention that one needs to update the nfs-provisioner/values.yaml and change the  to match the name that user used for creating", "author": "chauhang", "createdAt": "2020-11-27T00:38:41Z", "path": "kubernetes/GKE/README.md", "diffHunk": "@@ -0,0 +1,520 @@\n+## TorchServe on Google Kubernetes Engine (AKS)\n+\n+### 1 Create an GKE cluster\n+\n+This quickstart requires that you are running the gcloud version 319.0.0 or later. Run `gcloud --version` to find the version. If you need to install or upgrade, see [Install gcloud SDK](https://cloud.google.com/sdk/docs/install).\n+\n+#### 1.1 Set Gcloud account information\n+\n+```bash\n+gcloud init\n+```\n+\n+#### 1.2 Create GKE cluster\n+\n+Use the [gcloud container clusters create](https://cloud.google.com/kubernetes-engine/docs/how-to/creating-a-zonal-cluster) command to create an GKE cluster. The following example creates a cluster named *torchserve* with one node with a *nvidia-tesla-t4* GPU. This will take several minutes to complete.\n+\n+```bash\n+gcloud container clusters create torchserve --machine-type n1-standard-4 --accelerator type=nvidia-tesla-t4,count=1 --num-nodes 1 --region us-west1 --node-locations us-west1-a\n+\n+WARNING: Warning: basic authentication is deprecated, and will be removed in GKE control plane versions 1.19 and newer. For a list of recommended authentication methods, see: https://cloud.google.com/kubernetes-engine/docs/how-to/api-server-authentication\n+WARNING: Currently VPC-native is not the default mode during cluster creation. In the future, this will become the default mode and can be disabled using `--no-enable-ip-alias` flag. Use `--[no-]enable-ip-alias` flag to suppress this warning.\n+WARNING: Newly created clusters and node-pools will have node auto-upgrade enabled by default. This can be disabled using the `--no-enable-autoupgrade` flag.\n+WARNING: Starting with version 1.18, clusters will have shielded GKE nodes by default.\n+WARNING: Your Pod address range (`--cluster-ipv4-cidr`) can accommodate at most 1008 node(s). \n+WARNING: Starting with version 1.19, newly created clusters and node-pools will have COS_CONTAINERD as the default node image when no image type is specified.\n+Machines with GPUs have certain limitations which may affect your workflow. Learn more at https://cloud.google.com/kubernetes-engine/docs/how-to/gpus\n+Creating cluster ts in us-west1... Cluster is being health-checked (master is healthy)...done.                                                                    \n+Created [https://container.googleapis.com/v1/projects/pytorch-tests-261423/zones/us-west1/clusters/ts].\n+To inspect the contents of your cluster, go to: https://console.cloud.google.com/kubernetes/workload_/gcloud/us-west1/ts?project=pytorch-tests-261423\n+kubeconfig entry generated for ts.\n+NAME  LOCATION  MASTER_VERSION   MASTER_IP      MACHINE_TYPE   NODE_VERSION     NUM_NODES  STATUS\n+ts    us-west1  1.16.13-gke.401  34.83.140.167  n1-standard-4  1.16.13-gke.401  1          RUNNING\n+```\n+\n+#### 1.3 Connect to the cluster\n+\n+To manage a Kubernetes cluster, you use [kubectl](https://kubernetes.io/docs/user-guide/kubectl/), the Kubernetes command-line client. If you use GKE Cloud Shell, `kubectl` is already installed. To install `kubectl` locally, use the [gcloud components install](https://kubernetes.io/docs/tasks/tools/install-kubectl/) command:\n+\n+```bash\n+gcloud components install kubectl\n+```\n+\n+To configure `kubectl` to connect to your Kubernetes cluster, use the [gcloud container clusters get-credentials](https://cloud.google.com/sdk/gcloud/reference/container/clusters/get-credentials) command. This command downloads credentials and configures the Kubernetes CLI to use them.\n+\n+```bash\n+gcloud container clusters get-credentials torchserve --region us-west1 --project pytorch-tests-261423\n+Fetching cluster endpoint and auth data.\n+kubeconfig entry generated for torchserve.\n+```\n+\n+#### 1.4 Install helm\n+\n+```bash\n+curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3\n+chmod 700 get_helm.sh\n+./get_helm.sh\n+```\n+\n+### 2 Deploy TorchServe on GKE\n+\n+#### 2.1 Download the github repository and enter the kubernetes directory\n+\n+```bash\n+git clone https://github.com/pytorch/serve.git\n+\n+cd serve/kubernetes/GKE\n+```\n+\n+#### 2.2 Install NVIDIA device plugin\n+\n+Before the GPUs in the nodes can be used, you must deploy a DaemonSet for the NVIDIA device plugin. This DaemonSet runs a pod on each node to provide the required drivers for the GPUs.\n+\n+```bash\n+kubectl apply -f https://raw.githubusercontent.com/GoogleCloudPlatform/container-engine-accelerators/master/nvidia-driver-installer/cos/daemonset-preloaded.yaml\n+daemonset.apps/nvidia-driver-installer created\n+```\n+\n+```bash\n+kubectl get nodes \"-o=custom-columns=NAME:.metadata.name,MEMORY:.status.allocatable.memory,CPU:.status.allocatable.cpu,GPU:.status.allocatable.nvidia\\.com/gpu\"\n+``` \n+should show something similar to:\n+\n+```bash\n+NAME                                        MEMORY       CPU     GPU\n+gke-torchserve-default-pool-aa9f7d99-ggc9   12698376Ki   3920m   1\n+```\n+\n+#### 2.3 Create a storage disk\n+\n+A standard storage class is created with google compute disk. If multiple pods need concurrent access to the same storage volume, you need Google NFS. Create the storage disk named *nfs-disk* with the following command:\n+\n+```bash\n+gcloud compute disks create --size=200GB --zone=us-west1-a nfs-disk\n+\n+NAME     ZONE        SIZE_GB  TYPE         STATUS\n+nfs-disk  us-west1-a  200      pd-standard  READY\n+\n+New disks are unformatted. You must format and mount a disk before it\n+can be used. You can find instructions on how to do this at:\n+\n+https://cloud.google.com/compute/docs/disks/add-persistent-disk#formatting\n+\n+```\n+\n+#### 2.4 Create NFS Server\n+\n+Modify the values.yaml in the nfs-provisioner with persistent volume name, disk name and node affinity zones and install nfs-provisioner using helm.\n+\n+```bash\n+cd GKE\n+\n+helm install mynfs ./nfs-provisioner/", "originalCommit": "c9543cd29dcd05055e62c0765f5828924f4e42c5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTI3Mjg4OQ==", "url": "https://github.com/pytorch/serve/pull/793#discussion_r531272889", "bodyText": "@jagadeeshi2i The model-store pod is not getting created, using the commands specified Seeing following error in the describe pods:\n\n(base) gchauhan-mbp:GKE gchauhan$ kubectl describe pod/model-store-pod\nName:         model-store-pod\nNamespace:    default\nPriority:     0\nNode:         \nLabels:       \nAnnotations:  kubectl.kubernetes.io/last-applied-configuration:\n{\"apiVersion\":\"v1\",\"kind\":\"Pod\",\"metadata\":{\"annotations\":{},\"name\":\"model-store-pod\",\"namespace\":\"default\"},\"spec\":{\"containers\":[{\"args\"...\nkubernetes.io/limit-ranger: LimitRanger plugin set: cpu request for container model-store\nStatus:       Pending\nIP:\nIPs:          \nContainers:\nmodel-store:\nImage:      ubuntu\nPort:       \nHost Port:  \nCommand:\nsleep\nArgs:\ninfinity\nRequests:\ncpu:        100m\nEnvironment:  \nMounts:\n/pv from mypvc (rw)\n/var/run/secrets/kubernetes.io/serviceaccount from default-token-8qsvr (ro)\nConditions:\nType           Status\nPodScheduled   False\nVolumes:\nmypvc:\nType:       PersistentVolumeClaim (a reference to a PersistentVolumeClaim in the same namespace)\nClaimName:  nfs\nReadOnly:   false\ndefault-token-8qsvr:\nType:        Secret (a volume populated by a Secret)\nSecretName:  default-token-8qsvr\nOptional:    false\nQoS Class:       Burstable\nNode-Selectors:  \nTolerations:     node.kubernetes.io/not-ready:NoExecute for 300s\nnode.kubernetes.io/unreachable:NoExecute for 300s\nEvents:\nType     Reason             Age                  From                Message\n\nNormal   NotTriggerScaleUp  2m57s                cluster-autoscaler  pod didn't trigger scale-up (it wouldn't fit if a new node is added):\nWarning  FailedScheduling   14s (x3 over 2m59s)  default-scheduler   persistentvolumeclaim \"nfs\" not found\n\nChecking the pvc claim returns\n\n(base) gchauhan-mbp:GKE gchauhan$ kubectl get pvc,pv -n default\nNAME                                      STATUS   VOLUME   CAPACITY   ACCESS MODES   STORAGECLASS   AGE\npersistentvolumeclaim/model-store-claim   Bound    nfs      10Gi       RWX                           3m51s\nNAME                   CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS   CLAIM                       STORAGECLASS   REASON   AGE\npersistentvolume/nfs   10Gi       RWX            Retain           Bound    default/model-store-claim                           3m51s", "author": "chauhang", "createdAt": "2020-11-27T00:50:13Z", "path": "kubernetes/GKE/README.md", "diffHunk": "@@ -0,0 +1,520 @@\n+## TorchServe on Google Kubernetes Engine (AKS)\n+\n+### 1 Create an GKE cluster\n+\n+This quickstart requires that you are running the gcloud version 319.0.0 or later. Run `gcloud --version` to find the version. If you need to install or upgrade, see [Install gcloud SDK](https://cloud.google.com/sdk/docs/install).\n+\n+#### 1.1 Set Gcloud account information\n+\n+```bash\n+gcloud init\n+```\n+\n+#### 1.2 Create GKE cluster\n+\n+Use the [gcloud container clusters create](https://cloud.google.com/kubernetes-engine/docs/how-to/creating-a-zonal-cluster) command to create an GKE cluster. The following example creates a cluster named *torchserve* with one node with a *nvidia-tesla-t4* GPU. This will take several minutes to complete.\n+\n+```bash\n+gcloud container clusters create torchserve --machine-type n1-standard-4 --accelerator type=nvidia-tesla-t4,count=1 --num-nodes 1 --region us-west1 --node-locations us-west1-a\n+\n+WARNING: Warning: basic authentication is deprecated, and will be removed in GKE control plane versions 1.19 and newer. For a list of recommended authentication methods, see: https://cloud.google.com/kubernetes-engine/docs/how-to/api-server-authentication\n+WARNING: Currently VPC-native is not the default mode during cluster creation. In the future, this will become the default mode and can be disabled using `--no-enable-ip-alias` flag. Use `--[no-]enable-ip-alias` flag to suppress this warning.\n+WARNING: Newly created clusters and node-pools will have node auto-upgrade enabled by default. This can be disabled using the `--no-enable-autoupgrade` flag.\n+WARNING: Starting with version 1.18, clusters will have shielded GKE nodes by default.\n+WARNING: Your Pod address range (`--cluster-ipv4-cidr`) can accommodate at most 1008 node(s). \n+WARNING: Starting with version 1.19, newly created clusters and node-pools will have COS_CONTAINERD as the default node image when no image type is specified.\n+Machines with GPUs have certain limitations which may affect your workflow. Learn more at https://cloud.google.com/kubernetes-engine/docs/how-to/gpus\n+Creating cluster ts in us-west1... Cluster is being health-checked (master is healthy)...done.                                                                    \n+Created [https://container.googleapis.com/v1/projects/pytorch-tests-261423/zones/us-west1/clusters/ts].\n+To inspect the contents of your cluster, go to: https://console.cloud.google.com/kubernetes/workload_/gcloud/us-west1/ts?project=pytorch-tests-261423\n+kubeconfig entry generated for ts.\n+NAME  LOCATION  MASTER_VERSION   MASTER_IP      MACHINE_TYPE   NODE_VERSION     NUM_NODES  STATUS\n+ts    us-west1  1.16.13-gke.401  34.83.140.167  n1-standard-4  1.16.13-gke.401  1          RUNNING\n+```\n+\n+#### 1.3 Connect to the cluster\n+\n+To manage a Kubernetes cluster, you use [kubectl](https://kubernetes.io/docs/user-guide/kubectl/), the Kubernetes command-line client. If you use GKE Cloud Shell, `kubectl` is already installed. To install `kubectl` locally, use the [gcloud components install](https://kubernetes.io/docs/tasks/tools/install-kubectl/) command:\n+\n+```bash\n+gcloud components install kubectl\n+```\n+\n+To configure `kubectl` to connect to your Kubernetes cluster, use the [gcloud container clusters get-credentials](https://cloud.google.com/sdk/gcloud/reference/container/clusters/get-credentials) command. This command downloads credentials and configures the Kubernetes CLI to use them.\n+\n+```bash\n+gcloud container clusters get-credentials torchserve --region us-west1 --project pytorch-tests-261423\n+Fetching cluster endpoint and auth data.\n+kubeconfig entry generated for torchserve.\n+```\n+\n+#### 1.4 Install helm\n+\n+```bash\n+curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3\n+chmod 700 get_helm.sh\n+./get_helm.sh\n+```\n+\n+### 2 Deploy TorchServe on GKE\n+\n+#### 2.1 Download the github repository and enter the kubernetes directory\n+\n+```bash\n+git clone https://github.com/pytorch/serve.git\n+\n+cd serve/kubernetes/GKE\n+```\n+\n+#### 2.2 Install NVIDIA device plugin\n+\n+Before the GPUs in the nodes can be used, you must deploy a DaemonSet for the NVIDIA device plugin. This DaemonSet runs a pod on each node to provide the required drivers for the GPUs.\n+\n+```bash\n+kubectl apply -f https://raw.githubusercontent.com/GoogleCloudPlatform/container-engine-accelerators/master/nvidia-driver-installer/cos/daemonset-preloaded.yaml\n+daemonset.apps/nvidia-driver-installer created\n+```\n+\n+```bash\n+kubectl get nodes \"-o=custom-columns=NAME:.metadata.name,MEMORY:.status.allocatable.memory,CPU:.status.allocatable.cpu,GPU:.status.allocatable.nvidia\\.com/gpu\"\n+``` \n+should show something similar to:\n+\n+```bash\n+NAME                                        MEMORY       CPU     GPU\n+gke-torchserve-default-pool-aa9f7d99-ggc9   12698376Ki   3920m   1\n+```\n+\n+#### 2.3 Create a storage disk\n+\n+A standard storage class is created with google compute disk. If multiple pods need concurrent access to the same storage volume, you need Google NFS. Create the storage disk named *nfs-disk* with the following command:\n+\n+```bash\n+gcloud compute disks create --size=200GB --zone=us-west1-a nfs-disk\n+\n+NAME     ZONE        SIZE_GB  TYPE         STATUS\n+nfs-disk  us-west1-a  200      pd-standard  READY\n+\n+New disks are unformatted. You must format and mount a disk before it\n+can be used. You can find instructions on how to do this at:\n+\n+https://cloud.google.com/compute/docs/disks/add-persistent-disk#formatting\n+\n+```\n+\n+#### 2.4 Create NFS Server\n+\n+Modify the values.yaml in the nfs-provisioner with persistent volume name, disk name and node affinity zones and install nfs-provisioner using helm.\n+\n+```bash\n+cd GKE\n+\n+helm install mynfs ./nfs-provisioner/\n+```\n+\n+```kubectl get pods``` should show something similiar to:\n+\n+```bash\n+NAME                                             READY   STATUS    RESTARTS   AGE\n+pod/mynfs-nfs-provisioner-bcc7c96cc-5xr2k   1/1     Running   0          19h\n+```\n+\n+#### 2.5 Create PV and PVC\n+\n+Run the below command and get NFS server IP:\n+\n+```bash\n+kubectl get svc -n default mynfs-nfs-provisioner -o jsonpath='{.spec.clusterIP}'\n+```\n+\n+Replace storage size and server IP in pv_pvc.yaml with the server IP got from above command. Run the below kubectl command and create PV and PVC\n+\n+```bash\n+kubectl apply -f templates/pv_pvc.yaml -n default\n+```\n+\n+Verify that the PVC / PV is created by excuting.\n+\n+```bash\n+kubectl get pvc,pv -n default\n+```\n+\n+Your output should look similar to\n+\n+```bash\n+NAME                   CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS   CLAIM         STORAGECLASS   REASON   AGE\n+persistentvolume/nfs   10Gi       RWX            Retain           Bound    default/nfs                           20h\n+\n+NAME                        STATUS   VOLUME   CAPACITY   ACCESS MODES   STORAGECLASS   AGE\n+persistentvolumeclaim/nfs   Bound    nfs      10Gi       RWX                           20h\n+```\n+\n+#### 2.6 Create a pod and copy MAR / config files\n+\n+Create a pod named `pod/model-store-pod` with PersistentVolume mounted so that we can copy the MAR / config files.\n+\n+```bash\n+kubectl apply -f templates/pod.yaml\n+```\n+\n+Your output should look similar to\n+\n+```bash\n+pod/model-store-pod created\n+```\n+\n+Verify that the pod is created by excuting.\n+\n+```bash\n+kubectl get po", "originalCommit": "c9543cd29dcd05055e62c0765f5828924f4e42c5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTI4MjAyNg==", "url": "https://github.com/pytorch/serve/pull/793#discussion_r531282026", "bodyText": "Had to change claim name from nfs to model-store-claim in the templates/pod.yaml file to make the above steps work. @jagadeeshi2i Please update with correct values in the readme", "author": "chauhang", "createdAt": "2020-11-27T01:00:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTI3Mjg4OQ=="}], "type": "inlineReview"}, {"oid": "194b5651308252d596eef8a7b50156a314d24af3", "url": "https://github.com/pytorch/serve/commit/194b5651308252d596eef8a7b50156a314d24af3", "message": "Fix: Update readme docs and model-store-pod yaml", "committedDate": "2020-11-27T11:25:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjMyMTk0Mg==", "url": "https://github.com/pytorch/serve/pull/793#discussion_r532321942", "bodyText": "@jagadeeshi2i In addition to these, when the cluster is created one will use CPU node pool. Mention that for the cluster creation", "author": "chauhang", "createdAt": "2020-11-30T02:54:57Z", "path": "kubernetes/GKE/README.md", "diffHunk": "@@ -66,7 +81,15 @@ git clone https://github.com/pytorch/serve.git\n cd serve/kubernetes/GKE\n ```\n \n-#### 2.2 Install NVIDIA device plugin\n+**_NOTE:_** By default the helm chart installs GPU version of torchserve. Follow steps in section [2.2](####-2.2-For-CPU-setup) for running in a CPU only cluster. For GPU setup section [2.2](####-2.2-For-CPU-setup) can be skipped.\n+\n+#### 2.2 For CPU setup\n+\n+* Change torchserve image in Helm/values.yaml to the CPU version\n+* Set `n_gpu` to `0` in Helm/values.yaml\n+* Skip NVIDIA plugin installation in section [2.3](#####-2.3-Install-NVIDIA-device-plugin)", "originalCommit": "194b5651308252d596eef8a7b50156a314d24af3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjMyMjEzMw==", "url": "https://github.com/pytorch/serve/pull/793#discussion_r532322133", "bodyText": "Add a note that this is only needed if deploying for GPU nodes", "author": "chauhang", "createdAt": "2020-11-30T02:55:36Z", "path": "kubernetes/GKE/README.md", "diffHunk": "@@ -66,7 +81,15 @@ git clone https://github.com/pytorch/serve.git\n cd serve/kubernetes/GKE\n ```\n \n-#### 2.2 Install NVIDIA device plugin\n+**_NOTE:_** By default the helm chart installs GPU version of torchserve. Follow steps in section [2.2](####-2.2-For-CPU-setup) for running in a CPU only cluster. For GPU setup section [2.2](####-2.2-For-CPU-setup) can be skipped.\n+\n+#### 2.2 For CPU setup\n+\n+* Change torchserve image in Helm/values.yaml to the CPU version\n+* Set `n_gpu` to `0` in Helm/values.yaml\n+* Skip NVIDIA plugin installation in section [2.3](#####-2.3-Install-NVIDIA-device-plugin)\n+  \n+#### 2.3 Install NVIDIA device plugin\n \n Before the GPUs in the nodes can be used, you must deploy a DaemonSet for the NVIDIA device plugin. This DaemonSet runs a pod on each node to provide the required drivers for the GPUs.", "originalCommit": "194b5651308252d596eef8a7b50156a314d24af3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjQ1Njc2MQ==", "url": "https://github.com/pytorch/serve/pull/793#discussion_r532456761", "bodyText": "By default Torchserve uses GPU, i have added in section 2.2 CPU setup we have to set n_gpu to 0 and skip nvidia Daemoset.", "author": "jagadeeshi2i", "createdAt": "2020-11-30T09:33:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjMyMjEzMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjMyMjYzNg==", "url": "https://github.com/pytorch/serve/pull/793#discussion_r532322636", "bodyText": "Will these steps work if no explicit region is specified?\nAlso add a note that \"accelerator\" parameter is optional, use it for creating cluster for GPU nodes. It will be help to include example of command for CPU cluster to remove an confusion", "author": "chauhang", "createdAt": "2020-11-30T02:58:00Z", "path": "kubernetes/GKE/README.md", "diffHunk": "@@ -6,16 +6,31 @@ This quickstart requires that you are running the gcloud version 319.0.0 or late\n \n #### 1.1 Set Gcloud account information\n \n+Create a gcloud configuration with account and project info.\n+\n ```bash\n gcloud init\n ```\n \n+Set compute/region and compute/zone in config\n+\n+```bash\n+gcloud config set compute/region us-west1\n+gcloud config set compute/zone us-west1-a\n+```\n+\n+If you have multiple configurations, activate required config.\n+\n+```bash\n+gcloud config configurations activate <config_name>\n+```\n+\n #### 1.2 Create GKE cluster\n \n Use the [gcloud container clusters create](https://cloud.google.com/kubernetes-engine/docs/how-to/creating-a-zonal-cluster) command to create an GKE cluster. The following example creates a cluster named *torchserve* with one node with a *nvidia-tesla-t4* GPU. This will take several minutes to complete.\n \n ```bash\n-gcloud container clusters create torchserve --machine-type n1-standard-4 --accelerator type=nvidia-tesla-t4,count=1 --num-nodes 1 --region us-west1 --node-locations us-west1-a\n+gcloud container clusters create torchserve --machine-type n1-standard-4 --accelerator type=nvidia-tesla-t4,count=1 --num-nodes 1", "originalCommit": "194b5651308252d596eef8a7b50156a314d24af3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjM4MjQwMw==", "url": "https://github.com/pytorch/serve/pull/793#discussion_r532382403", "bodyText": "Yes, the region will be set from glcoud config.", "author": "jagadeeshi2i", "createdAt": "2020-11-30T07:02:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjMyMjYzNg=="}], "type": "inlineReview"}, {"oid": "0b4f08c3f94457d42bb066e134a60ba6e6a88bd6", "url": "https://github.com/pytorch/serve/commit/0b4f08c3f94457d42bb066e134a60ba6e6a88bd6", "message": "Fix: Update readme docs for gke support\n\n - add cpu cluster creation\n - add comments to pv, pvc and pod yaml\n - add comments to values yaml", "committedDate": "2020-11-30T10:37:30Z", "type": "commit"}, {"oid": "295d2c8b7663d1bdfcc51aacef01154d3ca61a15", "url": "https://github.com/pytorch/serve/commit/295d2c8b7663d1bdfcc51aacef01154d3ca61a15", "message": "Fix: Update readme docs\n\n - remove eks setup and add links for aws, google, azure clsuter", "committedDate": "2020-12-01T14:06:33Z", "type": "commit"}]}