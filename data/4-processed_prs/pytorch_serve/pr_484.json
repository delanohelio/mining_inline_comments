{"pr_number": 484, "pr_title": "Multi-node deployment behind ELB", "pr_createdAt": "2020-06-30T00:57:40Z", "pr_url": "https://github.com/pytorch/serve/pull/484", "timeline": [{"oid": "786a7ef98f055f48d4407511f733c6988373e78b", "url": "https://github.com/pytorch/serve/commit/786a7ef98f055f48d4407511f733c6988373e78b", "message": "Init multi-node deployment behind ELB", "committedDate": "2020-06-30T00:54:57Z", "type": "commit"}, {"oid": "f261c536085d1202810474f217c92710da19ea41", "url": "https://github.com/pytorch/serve/commit/f261c536085d1202810474f217c92710da19ea41", "message": "Verified ASG working for management and infer APIs", "committedDate": "2020-07-02T02:47:52Z", "type": "commit"}, {"oid": "f261c536085d1202810474f217c92710da19ea41", "url": "https://github.com/pytorch/serve/commit/f261c536085d1202810474f217c92710da19ea41", "message": "Verified ASG working for management and infer APIs", "committedDate": "2020-07-02T02:47:52Z", "type": "forcePushed"}, {"oid": "d6c070c12da5b397c95215b5df69ba243a0747f2", "url": "https://github.com/pytorch/serve/commit/d6c070c12da5b397c95215b5df69ba243a0747f2", "message": "Merge branch 'master' into issue_88_multi_ec2", "committedDate": "2020-07-02T18:46:12Z", "type": "commit"}, {"oid": "efafb96347e4c94bd3c3a1511e43dced266ce5af", "url": "https://github.com/pytorch/serve/commit/efafb96347e4c94bd3c3a1511e43dced266ce5af", "message": "Verified ASG working for management and infer APIs", "committedDate": "2020-07-02T19:15:40Z", "type": "commit"}, {"oid": "4bdc6bc4a5653f8fa2f73fd22919b8cb174e271b", "url": "https://github.com/pytorch/serve/commit/4bdc6bc4a5653f8fa2f73fd22919b8cb174e271b", "message": "Merge branch 'master' into issue_88_multi_ec2", "committedDate": "2020-07-06T19:19:52Z", "type": "commit"}, {"oid": "8d002f4d7883922a0c3f6145da2aa0c720fbd94d", "url": "https://github.com/pytorch/serve/commit/8d002f4d7883922a0c3f6145da2aa0c720fbd94d", "message": "Merge branch 'master' into issue_88_multi_ec2", "committedDate": "2020-07-21T22:36:13Z", "type": "commit"}, {"oid": "22faf5e496f1e37429a2097e853a52325d1b0229", "url": "https://github.com/pytorch/serve/commit/22faf5e496f1e37429a2097e853a52325d1b0229", "message": "Adding EFS mount support to multi-node deployments", "committedDate": "2020-07-22T00:32:51Z", "type": "commit"}, {"oid": "69acfd707b9b4c2d0a00b06034bc206f6f03c3fa", "url": "https://github.com/pytorch/serve/commit/69acfd707b9b4c2d0a00b06034bc206f6f03c3fa", "message": "Merge branch 'master' into issue_88_multi_ec2", "committedDate": "2020-07-22T16:33:22Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTAxOTIwMg==", "url": "https://github.com/pytorch/serve/pull/484#discussion_r459019202", "bodyText": "if mgmt and inference addresses set are HTTP then do we need these key and cert config?", "author": "dhaniram-kshirsagar", "createdAt": "2020-07-22T19:05:33Z", "path": "cloudformation/ec2-asg.yaml", "diffHunk": "@@ -0,0 +1,603 @@\n+AWSTemplateFormatVersion: '2010-09-09'\n+Description: >-\n+  AWS CloudFormation TorchServe: Creates a TorchServe stack using\n+  an EC2 autoscaling group running Ubuntu 18.04 behind an Elastic Load Balancer,\n+  installss the packages and files necessary to deploy.\n+  Additionally, creates a CPUUtilization based scale up/down policy as an example.\n+  **WARNING** This template creates an Amazon EC2 instance. You will be billed for\n+  the AWS resources used if you create a stack from this template.\n+Parameters:\n+  KeyName:\n+    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance\n+    Type: AWS::EC2::KeyPair::KeyName\n+    ConstraintDescription: Must be the name of an existing EC2 KeyPair.\n+  InstanceType:\n+    Description: TorchServe EC2 instance type\n+    Type: String\n+    Default: c5.4xlarge\n+    ConstraintDescription: Must be a valid EC2 instance type.\n+  MinNodeNumber:\n+    Description: Minimum number of nodes ins the ASG\n+    Type: String\n+    Default: '3'\n+  MaxNodeNumber:\n+    Description: Minimum number of nodes ins the ASG\n+    Type: String\n+    Default: '5'\n+  ManagementLocation:\n+    Description: 'The IP address range that can call management endpoint of TorchServe'\n+    Type: String\n+    MinLength: '9'\n+    MaxLength: '18'\n+    Default: '0.0.0.0/0'\n+    AllowedPattern: (\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})\n+    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x.\n+  ModelPath:\n+    Description: 'The location to download the model archive file from. e.g. https://torchserve.s3.amazonaws.com/mar_files/mnist.mar'\n+    Type: String\n+    ConstraintDescription: Must be a valid url.\n+  SSHLocation:\n+    Description: 'The IP address range that can be used to SSH to the EC2 instances'\n+    Type: String\n+    MinLength: '9'\n+    MaxLength: '18'\n+    Default: '0.0.0.0/0'\n+    AllowedPattern: (\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})\n+    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x.\n+Mappings:\n+  AWSRegion2AMI:\n+    us-east-1:\n+      AMI: ami-085925f297f89fce1\n+    us-west-2:\n+      AMI: ami-003634241a8fcdec0\n+    eu-west-1:\n+      AMI: ami-0dad359ff462124ca\n+    us-east-2:\n+      AMI: ami-07c1207a9d40bc3bd\n+    ap-southeast-2:\n+      AMI: ami-04fcc97b5f6edcd89\n+    ap-northeast-1:\n+      AMI: ami-0278fe6949f6b1a06\n+    ap-northeast-2:\n+      AMI: ami-00edfb46b107f643c\n+    ap-south-1:\n+      AMI: ami-0b44050b2d893d5f7\n+    eu-central-1:\n+      AMI: ami-0e342d72b12109f91\n+    ap-southeast-1:\n+      AMI: ami-0f7719e8b7ba25c61\n+    us-west-1:\n+      AMI: ami-0f56279347d2fa43e\n+  SubnetConfig:\n+    VPC:\n+      CIDR: 10.0.0.0/16\n+    PublicA:\n+      CIDR: 10.0.0.0/24\n+    PublicB:\n+      CIDR: 10.0.1.0/24\n+Resources:\n+  CloudwatchIAMRole:\n+    Type: AWS::IAM::Role\n+    Properties:\n+      AssumeRolePolicyDocument:\n+          Version: 2012-10-17\n+          Statement:\n+            - Effect: Allow\n+              Principal:\n+                Service:\n+                  - ec2.amazonaws.com\n+              Action:\n+                - sts:AssumeRole\n+      ManagedPolicyArns:\n+        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy\n+  CloudwatchInstanceProfile:\n+    Type: AWS::IAM::InstanceProfile\n+    Properties:\n+      Roles:\n+        - !Ref CloudwatchIAMRole\n+  VPC:\n+    Type: AWS::EC2::VPC\n+    Properties:\n+      EnableDnsSupport: 'true'\n+      EnableDnsHostnames: 'true'\n+      CidrBlock: !FindInMap\n+        - SubnetConfig\n+        - VPC\n+        - CIDR\n+      Tags:\n+        - Key: Application\n+          Value: !Ref 'AWS::StackName'\n+        - Key: Network\n+          Value: Public\n+  PublicSubnetA:\n+    Type: AWS::EC2::Subnet\n+    Properties:\n+      VpcId: !Ref 'VPC'\n+      CidrBlock: !FindInMap\n+        - SubnetConfig\n+        - PublicA\n+        - CIDR\n+      AvailabilityZone: !Select [ 0, !GetAZs \"\" ]\n+      Tags:\n+        - Key: Application\n+          Value: !Ref 'AWS::StackName'\n+        - Key: Network\n+          Value: Public\n+  PublicSubnetB:\n+    Type: AWS::EC2::Subnet\n+    Properties:\n+      VpcId: !Ref 'VPC'\n+      CidrBlock: !FindInMap\n+        - SubnetConfig\n+        - PublicB\n+        - CIDR\n+      AvailabilityZone: !Select [ 1, !GetAZs \"\" ]\n+      Tags:\n+        - Key: Application\n+          Value: !Ref 'AWS::StackName'\n+        - Key: Network\n+          Value: Public\n+  InternetGateway:\n+    Type: AWS::EC2::InternetGateway\n+    Properties:\n+      Tags:\n+        - Key: Application\n+          Value: !Ref 'AWS::StackName'\n+        - Key: Network\n+          Value: Public\n+  GatewayToInternet:\n+    Type: AWS::EC2::VPCGatewayAttachment\n+    Properties:\n+      VpcId: !Ref 'VPC'\n+      InternetGatewayId: !Ref 'InternetGateway'\n+  PublicRouteTable:\n+    Type: AWS::EC2::RouteTable\n+    Properties:\n+      VpcId: !Ref 'VPC'\n+      Tags:\n+        - Key: Application\n+          Value: !Ref 'AWS::StackName'\n+        - Key: Network\n+          Value: Public\n+  PublicRoute:\n+    Type: AWS::EC2::Route\n+    DependsOn: GatewayToInternet\n+    Properties:\n+      RouteTableId: !Ref 'PublicRouteTable'\n+      DestinationCidrBlock: '0.0.0.0/0'\n+      GatewayId: !Ref 'InternetGateway'\n+  PublicSubnetARouteTableAssociation:\n+    Type: AWS::EC2::SubnetRouteTableAssociation\n+    Properties:\n+      SubnetId: !Ref 'PublicSubnetA'\n+      RouteTableId: !Ref 'PublicRouteTable'\n+  PublicSubnetBRouteTableAssociation:\n+    Type: AWS::EC2::SubnetRouteTableAssociation\n+    Properties:\n+      SubnetId: !Ref 'PublicSubnetB'\n+      RouteTableId: !Ref 'PublicRouteTable'\n+  PublicNetworkAcl:\n+    Type: AWS::EC2::NetworkAcl\n+    Properties:\n+      VpcId: !Ref 'VPC'\n+      Tags:\n+        - Key: Application\n+          Value: !Ref 'AWS::StackName'\n+        - Key: Network\n+          Value: Public\n+  InboundManagementPublicNetworkAclEntry:\n+    Type: AWS::EC2::NetworkAclEntry\n+    Properties:\n+      NetworkAclId: !Ref 'PublicNetworkAcl'\n+      RuleNumber: '100'\n+      Protocol: '6'\n+      RuleAction: allow\n+      Egress: 'false'\n+      CidrBlock: !Ref 'ManagementLocation'\n+      PortRange:\n+        From: '8081'\n+        To: '8081'\n+  InboundInferencePublicNetworkAclEntry:\n+    Type: AWS::EC2::NetworkAclEntry\n+    Properties:\n+      NetworkAclId: !Ref 'PublicNetworkAcl'\n+      RuleNumber: '101'\n+      Protocol: '6'\n+      RuleAction: allow\n+      Egress: 'false'\n+      CidrBlock: '0.0.0.0/0'\n+      PortRange:\n+        From: '8080'\n+        To: '8080'\n+  InboundSSHPublicNetworkAclEntry:\n+    Type: AWS::EC2::NetworkAclEntry\n+    Properties:\n+      NetworkAclId: !Ref 'PublicNetworkAcl'\n+      RuleNumber: '102'\n+      Protocol: '6'\n+      RuleAction: allow\n+      Egress: 'false'\n+      CidrBlock: !Ref 'SSHLocation'\n+      PortRange:\n+        From: '22'\n+        To: '22'\n+  InboundEphemeralPublicNetworkAclEntry:\n+    Type: AWS::EC2::NetworkAclEntry\n+    Properties:\n+      NetworkAclId: !Ref 'PublicNetworkAcl'\n+      RuleNumber: '103'\n+      Protocol: '6'\n+      RuleAction: allow\n+      Egress: 'false'\n+      CidrBlock: '0.0.0.0/0'\n+      PortRange:\n+        From: '10000'\n+        To: '65535'\n+  OutboundPublicNetworkAclEntry:\n+    Type: AWS::EC2::NetworkAclEntry\n+    Properties:\n+      NetworkAclId: !Ref 'PublicNetworkAcl'\n+      RuleNumber: '100'\n+      Protocol: '6'\n+      RuleAction: allow\n+      Egress: 'true'\n+      CidrBlock: '0.0.0.0/0'\n+      PortRange:\n+        From: '0'\n+        To: '65535'\n+  PublicSubnetANetworkAclAssociation:\n+    Type: AWS::EC2::SubnetNetworkAclAssociation\n+    Properties:\n+      SubnetId: !Ref 'PublicSubnetA'\n+      NetworkAclId: !Ref 'PublicNetworkAcl'\n+  PublicSubnetBNetworkAclAssociation:\n+    Type: AWS::EC2::SubnetNetworkAclAssociation\n+    Properties:\n+      SubnetId: !Ref 'PublicSubnetB'\n+      NetworkAclId: !Ref 'PublicNetworkAcl'\n+  TorcheServeSecurityGroup:\n+    Type: AWS::EC2::SecurityGroup\n+    Properties:\n+      GroupDescription: Enable access for ssh, inference and management endpoints\n+      VpcId: !Ref 'VPC'\n+      SecurityGroupIngress:\n+        - IpProtocol: tcp\n+          FromPort: '8080'\n+          ToPort: '8080'\n+          CidrIp: '0.0.0.0/0'\n+        - IpProtocol: tcp\n+          FromPort: '8081'\n+          ToPort: '8081'\n+          CidrIp: !Ref 'ManagementLocation'\n+        - IpProtocol: tcp\n+          FromPort: '22'\n+          ToPort: '22'\n+          CidrIp: !Ref 'SSHLocation'\n+  TorchServeScaleUpPolicy:\n+    Type: AWS::AutoScaling::ScalingPolicy\n+    Properties:\n+      AdjustmentType: ChangeInCapacity\n+      AutoScalingGroupName: !Ref 'TorchServeASG'\n+      Cooldown: '60'\n+      ScalingAdjustment: '1'\n+  TorchServeScaleDownPolicy:\n+    Type: AWS::AutoScaling::ScalingPolicy\n+    Properties:\n+      AdjustmentType: ChangeInCapacity\n+      AutoScalingGroupName: !Ref 'TorchServeASG'\n+      Cooldown: '60'\n+      ScalingAdjustment: '-1'\n+  CPUAlarmHigh:\n+    Type: AWS::CloudWatch::Alarm\n+    Properties:\n+      AlarmDescription: Scale-up if CPU > 90% for 10 minutes\n+      MetricName: CPUUtilization\n+      Namespace: AWS/EC2\n+      Statistic: Average\n+      Period: '300'\n+      EvaluationPeriods: '2'\n+      Threshold: '90'\n+      AlarmActions:\n+        - !Ref 'TorchServeScaleUpPolicy'\n+      Dimensions:\n+        - Name: AutoScalingGroupName\n+          Value: !Ref 'TorchServeASG'\n+      ComparisonOperator: GreaterThanThreshold\n+  CPUAlarmLow:\n+    Type: AWS::CloudWatch::Alarm\n+    Properties:\n+      AlarmDescription: Scale-down if CPU < 70% for 10 minutes\n+      MetricName: CPUUtilization\n+      Namespace: AWS/EC2\n+      Statistic: Average\n+      Period: '300'\n+      EvaluationPeriods: '2'\n+      Threshold: '70'\n+      AlarmActions:\n+        - !Ref 'TorchServeScaleDownPolicy'\n+      Dimensions:\n+        - Name: AutoScalingGroupName\n+          Value: !Ref 'TorchServeASG'\n+      ComparisonOperator: LessThanThreshold\n+  ApplicationLoadBalancer:\n+    Type: AWS::ElasticLoadBalancingV2::LoadBalancer\n+    Properties:\n+      Subnets: [!Ref PublicSubnetA, !Ref PublicSubnetB]\n+      SecurityGroups: [!Ref TorcheServeSecurityGroup]\n+  ALBManagementTargetGroup:\n+    Type: AWS::ElasticLoadBalancingV2::TargetGroup\n+    Properties:\n+      HealthCheckIntervalSeconds: 30\n+      HealthCheckTimeoutSeconds: 5\n+      HealthyThresholdCount: 3\n+      HealthCheckPath: /ping\n+      HealthCheckPort: 8080\n+      HealthCheckProtocol: HTTP\n+      Port: 8081\n+      Protocol: HTTP\n+      UnhealthyThresholdCount: 5\n+      VpcId: !Ref 'VPC'\n+  ALBInferenceTargetGroup:\n+    Type: AWS::ElasticLoadBalancingV2::TargetGroup\n+    Properties:\n+      HealthCheckIntervalSeconds: 30\n+      HealthCheckTimeoutSeconds: 5\n+      HealthyThresholdCount: 3\n+      HealthCheckPath: /ping\n+      HealthCheckProtocol: HTTP\n+      Port: 8080\n+      Protocol: HTTP\n+      UnhealthyThresholdCount: 5\n+      VpcId: !Ref 'VPC'\n+  ALBManagementListener:\n+    Type: AWS::ElasticLoadBalancingV2::Listener\n+    Properties:\n+      DefaultActions:\n+        - Type: forward\n+          TargetGroupArn: !Ref 'ALBManagementTargetGroup'\n+      LoadBalancerArn: !Ref 'ApplicationLoadBalancer'\n+      Port: '8081'\n+      Protocol: HTTP\n+  ALBInferenceListener:\n+    Type: AWS::ElasticLoadBalancingV2::Listener\n+    Properties:\n+      DefaultActions:\n+        - Type: forward\n+          TargetGroupArn: !Ref 'ALBInferenceTargetGroup'\n+      LoadBalancerArn: !Ref 'ApplicationLoadBalancer'\n+      Port: '8080'\n+      Protocol: HTTP\n+  TorchServeASG:\n+    Type: AWS::AutoScaling::AutoScalingGroup\n+    DependsOn: GatewayToInternet\n+    Properties:\n+      VPCZoneIdentifier: [!Ref PublicSubnetA, !Ref PublicSubnetB]\n+      LaunchConfigurationName: !Ref 'LaunchConfig'\n+      MinSize: !Ref 'MinNodeNumber'\n+      MaxSize: !Ref 'MaxNodeNumber'\n+      TargetGroupARNs:\n+        - !Ref 'ALBInferenceTargetGroup'\n+        - !Ref 'ALBManagementTargetGroup'\n+    CreationPolicy:\n+      ResourceSignal:\n+        Timeout: PT30M\n+        Count: '1'\n+    UpdatePolicy:\n+      AutoScalingRollingUpdate:\n+        MinInstancesInService: '1'\n+        MaxBatchSize: '1'\n+        PauseTime: PT30M\n+        WaitOnResourceSignals: 'true'\n+  EFSSecurityGroup:\n+    Type: AWS::EC2::SecurityGroup\n+    Properties:\n+      GroupDescription: EFS security group\n+      SecurityGroupIngress:\n+        - SourceSecurityGroupId: !Ref TorcheServeSecurityGroup\n+          FromPort: 2049\n+          IpProtocol: tcp\n+          ToPort: 2049\n+      VpcId: !Ref 'VPC'\n+  TorchServeEFS:\n+    Type: AWS::EFS::FileSystem\n+    Properties:\n+      Encrypted: false\n+  TorchServeMountTargetA:\n+    Type: AWS::EFS::MountTarget\n+    Properties:\n+      FileSystemId: !Ref TorchServeEFS\n+      SecurityGroups:\n+        - !Ref EFSSecurityGroup\n+      SubnetId: !Ref PublicSubnetA\n+  TorchServeMountTargetB:\n+    Type: AWS::EFS::MountTarget\n+    Properties:\n+      FileSystemId: !Ref TorchServeEFS\n+      SecurityGroups:\n+        - !Ref EFSSecurityGroup\n+      SubnetId: !Ref PublicSubnetB\n+  LaunchConfig:\n+    Type: AWS::AutoScaling::LaunchConfiguration\n+    DependsOn: GatewayToInternet\n+    Metadata:\n+      AWS::CloudFormation::Init:\n+        configSets:\n+          InstallAndRun:\n+            - TorchServeSetup\n+            - CloudwatchSetup\n+            - CFNSetup\n+        TorchServeSetup:\n+          files:\n+            /etc/torchserve/config.properties:\n+               content: !Sub |\n+                 inference_address=http://0.0.0.0:8080\n+                 management_address=http://0.0.0.0:8081\n+                 private_key_file=/etc/torchserve/server.key", "originalCommit": "69acfd707b9b4c2d0a00b06034bc206f6f03c3fa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTAzNTM4NA==", "url": "https://github.com/pytorch/serve/pull/484#discussion_r459035384", "bodyText": "@dhanainme Good catch. Will remove", "author": "maaquib", "createdAt": "2020-07-22T19:35:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTAxOTIwMg=="}], "type": "inlineReview"}, {"oid": "e050b1222caf0c61041d344a0aac1da1ab970231", "url": "https://github.com/pytorch/serve/commit/e050b1222caf0c61041d344a0aac1da1ab970231", "message": "Removing key/cert from config", "committedDate": "2020-07-22T21:00:44Z", "type": "commit"}, {"oid": "96a191c01091267d3c84a53d0db83d726405101a", "url": "https://github.com/pytorch/serve/commit/96a191c01091267d3c84a53d0db83d726405101a", "message": "Merge branch 'master' into issue_88_multi_ec2", "committedDate": "2020-07-22T21:05:40Z", "type": "commit"}, {"oid": "a8791349db16c34b1759e987d351ff27bf51e008", "url": "https://github.com/pytorch/serve/commit/a8791349db16c34b1759e987d351ff27bf51e008", "message": "Merge branch 'master' into issue_88_multi_ec2", "committedDate": "2020-07-22T21:16:43Z", "type": "commit"}, {"oid": "1eb047c934536e4e3f91f829ffff9cb89f8806a6", "url": "https://github.com/pytorch/serve/commit/1eb047c934536e4e3f91f829ffff9cb89f8806a6", "message": "Merge branch 'master' into issue_88_multi_ec2", "committedDate": "2020-07-22T22:59:52Z", "type": "commit"}]}