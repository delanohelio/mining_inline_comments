{"pr_number": 622, "pr_title": "Environment information header in regression and sanity suite", "pr_createdAt": "2020-08-17T14:26:33Z", "pr_url": "https://github.com/pytorch/serve/pull/622", "timeline": [{"oid": "27e4f1da2ba56444cdeeecf2235486e915f3334c", "url": "https://github.com/pytorch/serve/commit/27e4f1da2ba56444cdeeecf2235486e915f3334c", "message": "Merge pull request #1 from pytorch/master\n\nMerging the current changes", "committedDate": "2020-08-14T09:56:19Z", "type": "commit"}, {"oid": "992fbfcaa63532d5e9982cee4ba6f3b9fbab83a7", "url": "https://github.com/pytorch/serve/commit/992fbfcaa63532d5e9982cee4ba6f3b9fbab83a7", "message": "Added environment header in Sanity & Regression test suite", "committedDate": "2020-08-14T10:10:57Z", "type": "commit"}, {"oid": "34ca16898ee8499de550c3b7c51fd5c6ea7691bf", "url": "https://github.com/pytorch/serve/commit/34ca16898ee8499de550c3b7c51fd5c6ea7691bf", "message": "Added collect_env.py python script", "committedDate": "2020-08-14T10:11:56Z", "type": "commit"}, {"oid": "13167db2510113aff6e628c19a074f10fa9d178d", "url": "https://github.com/pytorch/serve/commit/13167db2510113aff6e628c19a074f10fa9d178d", "message": "Update regression_tests.sh", "committedDate": "2020-08-17T13:54:09Z", "type": "commit"}, {"oid": "d781baa6dcc382696a0a310cfc08b94514a48425", "url": "https://github.com/pytorch/serve/commit/d781baa6dcc382696a0a310cfc08b94514a48425", "message": "Merge branch 'master' into issue_598", "committedDate": "2020-08-17T14:27:23Z", "type": "commit"}, {"oid": "35b3e284ad436158d1b98d39074e93873d08a8b7", "url": "https://github.com/pytorch/serve/commit/35b3e284ad436158d1b98d39074e93873d08a8b7", "message": "Updated test suite to include environement header logs", "committedDate": "2020-08-20T11:16:39Z", "type": "commit"}, {"oid": "a59d3ab0f359615142c9bb4c0b6f8cc1e3373821", "url": "https://github.com/pytorch/serve/commit/a59d3ab0f359615142c9bb4c0b6f8cc1e3373821", "message": "Added print_env_info.py file", "committedDate": "2020-08-20T11:17:28Z", "type": "commit"}, {"oid": "4075fc25b66adf704922d89932a0d2b100d1f5a5", "url": "https://github.com/pytorch/serve/commit/4075fc25b66adf704922d89932a0d2b100d1f5a5", "message": "Updated regression and sanity test suite", "committedDate": "2020-08-20T11:42:53Z", "type": "commit"}, {"oid": "4828537ab2123c69caf6ded1ac25cde9249e0ac6", "url": "https://github.com/pytorch/serve/commit/4828537ab2123c69caf6ded1ac25cde9249e0ac6", "message": "Update print_env_info.py", "committedDate": "2020-08-20T12:12:47Z", "type": "commit"}, {"oid": "97864f1a3c25092d5ac05d6e2d5b9433acf87e44", "url": "https://github.com/pytorch/serve/commit/97864f1a3c25092d5ac05d6e2d5b9433acf87e44", "message": "Update regression_tests.sh", "committedDate": "2020-08-21T07:11:38Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjI4NzczMA==", "url": "https://github.com/pytorch/serve/pull/622#discussion_r476287730", "bodyText": "Name it torchserve_env . In namedtuple as well.", "author": "dhaniram-kshirsagar", "createdAt": "2020-08-25T08:54:07Z", "path": "test/print_env_info.py", "diffHunk": "@@ -0,0 +1,373 @@\n+# This script outputs relevant system environment info\n+# Run it with `python print_env_info.py`.\n+from __future__ import absolute_import, division, print_function, unicode_literals\n+import locale\n+import re\n+import subprocess\n+import sys\n+import os\n+from collections import namedtuple\n+\n+try:\n+    import torch\n+    TORCH_AVAILABLE = True\n+except (ImportError, NameError, AttributeError):\n+    TORCH_AVAILABLE = False\n+\n+# System Environment Information\n+SystemEnv = namedtuple('SystemEnv', [", "originalCommit": "97864f1a3c25092d5ac05d6e2d5b9433acf87e44", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDUwOTY2NA==", "url": "https://github.com/pytorch/serve/pull/622#discussion_r504509664", "bodyText": "Done.", "author": "harshbafna", "createdAt": "2020-10-14T08:49:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjI4NzczMA=="}], "type": "inlineReview"}, {"oid": "657880f256adfa71d020162e1c890a4348edaa0f", "url": "https://github.com/pytorch/serve/commit/657880f256adfa71d020162e1c890a4348edaa0f", "message": "Merge branch 'master' into issue_598", "committedDate": "2020-08-25T13:23:00Z", "type": "commit"}, {"oid": "af5e082cee85b9f11d88144ff50f2796948c9e84", "url": "https://github.com/pytorch/serve/commit/af5e082cee85b9f11d88144ff50f2796948c9e84", "message": "Updated Env header script", "committedDate": "2020-08-27T14:26:05Z", "type": "commit"}, {"oid": "0d4203d0904ef612ca5acbc72a8ae2eafd906fb3", "url": "https://github.com/pytorch/serve/commit/0d4203d0904ef612ca5acbc72a8ae2eafd906fb3", "message": "Updated print_env_info.py file", "committedDate": "2020-08-27T14:41:17Z", "type": "commit"}, {"oid": "1ee61ed154d61e4c4cdb8940d644cfc2a32cb3cc", "url": "https://github.com/pytorch/serve/commit/1ee61ed154d61e4c4cdb8940d644cfc2a32cb3cc", "message": "Updated print_env_info.py", "committedDate": "2020-08-27T15:03:55Z", "type": "commit"}, {"oid": "c26904a6fb95faf4384df9ce9916c37c02c13285", "url": "https://github.com/pytorch/serve/commit/c26904a6fb95faf4384df9ce9916c37c02c13285", "message": "Added Env header warnings", "committedDate": "2020-08-27T16:02:46Z", "type": "commit"}, {"oid": "830bd38b6d2a01161b75f7782d5f8a9eea3ed121", "url": "https://github.com/pytorch/serve/commit/830bd38b6d2a01161b75f7782d5f8a9eea3ed121", "message": "Updated print_env_info.py", "committedDate": "2020-08-27T16:38:28Z", "type": "commit"}, {"oid": "e0cf308daddc0451b11d764d8c15a6751a440403", "url": "https://github.com/pytorch/serve/commit/e0cf308daddc0451b11d764d8c15a6751a440403", "message": "Fixed file not found error", "committedDate": "2020-08-27T17:05:18Z", "type": "commit"}, {"oid": "ef841dc885a48de136ac3fb08b77c40c8f9ad5f1", "url": "https://github.com/pytorch/serve/commit/ef841dc885a48de136ac3fb08b77c40c8f9ad5f1", "message": "Updated Environment headers scripts", "committedDate": "2020-08-28T12:40:47Z", "type": "commit"}, {"oid": "710c93d2fa8a4f9ccad7b71f949ea5bece9ae6f4", "url": "https://github.com/pytorch/serve/commit/710c93d2fa8a4f9ccad7b71f949ea5bece9ae6f4", "message": "Updated Test suite for Environment headers support", "committedDate": "2020-08-28T17:36:11Z", "type": "commit"}, {"oid": "6b0e64919d830169cf6a0238d65116fac6b0bbe5", "url": "https://github.com/pytorch/serve/commit/6b0e64919d830169cf6a0238d65116fac6b0bbe5", "message": "Modified regression_test.sh", "committedDate": "2020-09-01T05:31:01Z", "type": "commit"}, {"oid": "390b3096477e03df56101cebcd681dc90d28cded", "url": "https://github.com/pytorch/serve/commit/390b3096477e03df56101cebcd681dc90d28cded", "message": "Modified torchserve_sanity.sh file", "committedDate": "2020-09-01T05:39:43Z", "type": "commit"}, {"oid": "8bde8f9d7692c75bd5622f5d469a6cff21fc928e", "url": "https://github.com/pytorch/serve/commit/8bde8f9d7692c75bd5622f5d469a6cff21fc928e", "message": "Modified print_env_info.py file", "committedDate": "2020-09-10T11:37:41Z", "type": "commit"}, {"oid": "d4c4250bce89c4806687f5426fb906a93c4f8c30", "url": "https://github.com/pytorch/serve/commit/d4c4250bce89c4806687f5426fb906a93c4f8c30", "message": "Modified print_env_info.py file", "committedDate": "2020-09-10T12:00:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzY4MzEyNg==", "url": "https://github.com/pytorch/serve/pull/622#discussion_r497683126", "bodyText": "Why are we removing the option to provide a custom branch? It will be helpful to have this option if I want to run regression suite on a standalone basis", "author": "maaquib", "createdAt": "2020-09-30T17:29:47Z", "path": "test/regression_tests.sh", "diffHunk": "@@ -4,7 +4,7 @@ set -x\n #set -e\n \n TS_REPO=\"https://github.com/pytorch/serve\"\n-BRANCH=${1:-master}\n+BRANCH=\"master\"", "originalCommit": "d4c4250bce89c4806687f5426fb906a93c4f8c30", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDUwODcyNw==", "url": "https://github.com/pytorch/serve/pull/622#discussion_r504508727", "bodyText": "This was buggy, we have already enhanced the script to take branch name as argument, else the default value will be \"master\"", "author": "harshbafna", "createdAt": "2020-10-14T08:48:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzY4MzEyNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzY4NjkyNA==", "url": "https://github.com/pytorch/serve/pull/622#discussion_r497686924", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            def get_gpu_info(run):\n          \n          \n            \n            def get_nvidia_gpu_info(run):", "author": "maaquib", "createdAt": "2020-09-30T17:36:33Z", "path": "test/print_env_info.py", "diffHunk": "@@ -0,0 +1,327 @@\n+# This script outputs relevant system environment info\n+# Run it with `python print_env_info.py`.\n+from __future__ import absolute_import, division, print_function, unicode_literals\n+import locale\n+import re\n+import subprocess\n+import sys\n+import os\n+from collections import namedtuple\n+\n+try:\n+    import torch\n+    TORCH_AVAILABLE = True\n+except (ImportError, NameError, AttributeError):\n+    TORCH_AVAILABLE = False\n+\n+torchserve_env = {\n+    \"torch\" : \"**Warning: torch not present ..\",\n+    \"torch_model_archiver\" : \"**Warning: torch-model-archiver not installed ..\",\n+    \"torchserve\" : \"**Warning: torchserve not installed ..\",\n+    \"torchtext\" : \"**Warning: torchtext not present ..\",\n+    \"torchvision\" : \"**Warning: torchvision not present ..\",\n+    \"torchaudio\" : \"**Warning: torchaudio not present ..\"\n+}\n+\n+python_env = {\n+    \"python_version\" : \"N/A\",\n+    \"pip_version\" : \"\",\n+    \"pip_packages\" : []\n+}\n+\n+java_env = {\n+    \"java_version\" : []\n+}\n+\n+os_info = {\n+    \"os\" : \"\",\n+    \"gcc_version\" : \"\",\n+    \"clang_version\" : \"N/A\",\n+    \"cmake_version\" : \"N/A\"\n+}\n+\n+cuda_env = {\n+    \"is_cuda_available\" : \"No\",\n+    \"cuda_runtime_version\" : \"N/A\",\n+    \"nvidia_gpu_models\" : [],\n+    \"nvidia_driver_version\" : \"N/A\",\n+    \"cudnn_version\" : []\n+}\n+\n+def run(command):\n+    \"\"\"Returns (return-code, stdout, stderr)\"\"\"\n+    p = subprocess.Popen(command, stdout=subprocess.PIPE,\n+                         stderr=subprocess.PIPE, shell=True)\n+    output, err = p.communicate()\n+    rc = p.returncode\n+    enc = locale.getpreferredencoding()\n+    output = output.decode(enc)\n+    err = err.decode(enc)\n+    return rc, output.strip(), err.strip()\n+\n+def run_and_read_all(run, command):\n+    \"\"\"Reads and returns entire output if rc is 0\"\"\"\n+    rc, out, _ = run(command)\n+    if rc != 0:\n+        return \"N/A\"\n+    return out\n+\n+def run_and_parse_first_match(run, command, regex):\n+    \"\"\"Returns the first regex match if it exists\"\"\"\n+    rc, out, _ = run(command)\n+    if rc != 0:\n+        return \"N/A\"\n+    match = re.search(regex, out)\n+    if match is None:\n+        return \"N/A\"\n+    return match.group(1)\n+\n+def get_pip_packages(run, package_name=None):\n+    \"\"\"Returns `pip list` output. \"\"\"\n+    # systems generally have `pip` as `pip` or `pip3`\n+    def run_with_pip(pip):\n+        if package_name == \"torch\":\n+            grep_cmd = 'grep \"' + package_name + '\"'\n+        else:\n+            grep_cmd = r'grep \"numpy\\|pytest\\|pylint\"'\n+        return run_and_read_all(run, pip + ' list --format=freeze | ' + grep_cmd)\n+    out = run_with_pip('pip3')\n+    if out == \"N/A\":\n+        out = None\n+    return 'pip3', out\n+\n+def get_java_version(run):\n+    rc, out, _ = run(\"java --version\")\n+    if rc != 0:\n+        return \"**Warning: java not installed...\"\n+    return out\n+\n+def get_platform():\n+    if sys.platform.startswith('linux'):\n+        return 'linux'\n+    elif sys.platform.startswith('cygwin'):\n+        return 'cygwin'\n+    elif sys.platform.startswith('darwin'):\n+        return 'darwin'\n+    else:\n+        return sys.platform\n+\n+def get_mac_version(run):\n+    return run_and_parse_first_match(run, 'sw_vers -productVersion', r'(.*)')\n+\n+def get_lsb_version(run):\n+    return run_and_parse_first_match(run, 'lsb_release -a', r'Description:\\t(.*)')\n+\n+def check_release_file(run):\n+    return run_and_parse_first_match(run, 'cat /etc/*-release', r'PRETTY_NAME=\"(.*)\"')\n+\n+def get_os(run):\n+    from platform import machine\n+    platform = get_platform()\n+    if platform == 'darwin':\n+        version = get_mac_version(run)\n+        if version is None:\n+            return None\n+        return 'Mac OSX {} ({})'.format(version, machine())\n+    if platform == 'linux':\n+        # Ubuntu/Debian based\n+        desc = get_lsb_version(run)\n+        if desc is not None:\n+            return desc\n+        # Try reading /etc/*-release\n+        desc = check_release_file(run)\n+        if desc is not None:\n+            return desc\n+        return '{} ({})'.format(platform, machine())\n+    # Unknown platform\n+    return platform\n+\n+def get_gcc_version(run):\n+    return run_and_parse_first_match(run, 'gcc --version', r'gcc (.*)')\n+\n+def get_clang_version(run):\n+    return run_and_parse_first_match(run, 'clang --version', r'clang version (.*)')\n+\n+def get_cmake_version(run):\n+    return run_and_parse_first_match(run, 'cmake --version', r'cmake (.*)')\n+\n+def get_nvidia_driver_version(run):\n+    if get_platform() == 'darwin':\n+        cmd = 'kextstat | grep -i cuda'\n+        return run_and_parse_first_match(run, cmd, r'com[.]nvidia[.]CUDA [(](.*?)[)]')\n+    smi = get_nvidia_smi()\n+    return run_and_parse_first_match(run, smi, r'Driver Version: (.*?) ')\n+\n+def get_gpu_info(run):", "originalCommit": "d4c4250bce89c4806687f5426fb906a93c4f8c30", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDUxMDcyMw==", "url": "https://github.com/pytorch/serve/pull/622#discussion_r504510723", "bodyText": "Done.", "author": "harshbafna", "createdAt": "2020-10-14T08:51:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzY4NjkyNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzY4Nzc5NA==", "url": "https://github.com/pytorch/serve/pull/622#discussion_r497687794", "bodyText": "Why is this a function?", "author": "maaquib", "createdAt": "2020-09-30T17:38:00Z", "path": "test/print_env_info.py", "diffHunk": "@@ -0,0 +1,327 @@\n+# This script outputs relevant system environment info\n+# Run it with `python print_env_info.py`.\n+from __future__ import absolute_import, division, print_function, unicode_literals\n+import locale\n+import re\n+import subprocess\n+import sys\n+import os\n+from collections import namedtuple\n+\n+try:\n+    import torch\n+    TORCH_AVAILABLE = True\n+except (ImportError, NameError, AttributeError):\n+    TORCH_AVAILABLE = False\n+\n+torchserve_env = {\n+    \"torch\" : \"**Warning: torch not present ..\",\n+    \"torch_model_archiver\" : \"**Warning: torch-model-archiver not installed ..\",\n+    \"torchserve\" : \"**Warning: torchserve not installed ..\",\n+    \"torchtext\" : \"**Warning: torchtext not present ..\",\n+    \"torchvision\" : \"**Warning: torchvision not present ..\",\n+    \"torchaudio\" : \"**Warning: torchaudio not present ..\"\n+}\n+\n+python_env = {\n+    \"python_version\" : \"N/A\",\n+    \"pip_version\" : \"\",\n+    \"pip_packages\" : []\n+}\n+\n+java_env = {\n+    \"java_version\" : []\n+}\n+\n+os_info = {\n+    \"os\" : \"\",\n+    \"gcc_version\" : \"\",\n+    \"clang_version\" : \"N/A\",\n+    \"cmake_version\" : \"N/A\"\n+}\n+\n+cuda_env = {\n+    \"is_cuda_available\" : \"No\",\n+    \"cuda_runtime_version\" : \"N/A\",\n+    \"nvidia_gpu_models\" : [],\n+    \"nvidia_driver_version\" : \"N/A\",\n+    \"cudnn_version\" : []\n+}\n+\n+def run(command):\n+    \"\"\"Returns (return-code, stdout, stderr)\"\"\"\n+    p = subprocess.Popen(command, stdout=subprocess.PIPE,\n+                         stderr=subprocess.PIPE, shell=True)\n+    output, err = p.communicate()\n+    rc = p.returncode\n+    enc = locale.getpreferredencoding()\n+    output = output.decode(enc)\n+    err = err.decode(enc)\n+    return rc, output.strip(), err.strip()\n+\n+def run_and_read_all(run, command):\n+    \"\"\"Reads and returns entire output if rc is 0\"\"\"\n+    rc, out, _ = run(command)\n+    if rc != 0:\n+        return \"N/A\"\n+    return out\n+\n+def run_and_parse_first_match(run, command, regex):\n+    \"\"\"Returns the first regex match if it exists\"\"\"\n+    rc, out, _ = run(command)\n+    if rc != 0:\n+        return \"N/A\"\n+    match = re.search(regex, out)\n+    if match is None:\n+        return \"N/A\"\n+    return match.group(1)\n+\n+def get_pip_packages(run, package_name=None):\n+    \"\"\"Returns `pip list` output. \"\"\"\n+    # systems generally have `pip` as `pip` or `pip3`\n+    def run_with_pip(pip):\n+        if package_name == \"torch\":\n+            grep_cmd = 'grep \"' + package_name + '\"'\n+        else:\n+            grep_cmd = r'grep \"numpy\\|pytest\\|pylint\"'\n+        return run_and_read_all(run, pip + ' list --format=freeze | ' + grep_cmd)\n+    out = run_with_pip('pip3')\n+    if out == \"N/A\":\n+        out = None\n+    return 'pip3', out\n+\n+def get_java_version(run):\n+    rc, out, _ = run(\"java --version\")\n+    if rc != 0:\n+        return \"**Warning: java not installed...\"\n+    return out\n+\n+def get_platform():\n+    if sys.platform.startswith('linux'):\n+        return 'linux'\n+    elif sys.platform.startswith('cygwin'):\n+        return 'cygwin'\n+    elif sys.platform.startswith('darwin'):\n+        return 'darwin'\n+    else:\n+        return sys.platform\n+\n+def get_mac_version(run):\n+    return run_and_parse_first_match(run, 'sw_vers -productVersion', r'(.*)')\n+\n+def get_lsb_version(run):\n+    return run_and_parse_first_match(run, 'lsb_release -a', r'Description:\\t(.*)')\n+\n+def check_release_file(run):\n+    return run_and_parse_first_match(run, 'cat /etc/*-release', r'PRETTY_NAME=\"(.*)\"')\n+\n+def get_os(run):\n+    from platform import machine\n+    platform = get_platform()\n+    if platform == 'darwin':\n+        version = get_mac_version(run)\n+        if version is None:\n+            return None\n+        return 'Mac OSX {} ({})'.format(version, machine())\n+    if platform == 'linux':\n+        # Ubuntu/Debian based\n+        desc = get_lsb_version(run)\n+        if desc is not None:\n+            return desc\n+        # Try reading /etc/*-release\n+        desc = check_release_file(run)\n+        if desc is not None:\n+            return desc\n+        return '{} ({})'.format(platform, machine())\n+    # Unknown platform\n+    return platform\n+\n+def get_gcc_version(run):\n+    return run_and_parse_first_match(run, 'gcc --version', r'gcc (.*)')\n+\n+def get_clang_version(run):\n+    return run_and_parse_first_match(run, 'clang --version', r'clang version (.*)')\n+\n+def get_cmake_version(run):\n+    return run_and_parse_first_match(run, 'cmake --version', r'cmake (.*)')\n+\n+def get_nvidia_driver_version(run):\n+    if get_platform() == 'darwin':\n+        cmd = 'kextstat | grep -i cuda'\n+        return run_and_parse_first_match(run, cmd, r'com[.]nvidia[.]CUDA [(](.*?)[)]')\n+    smi = get_nvidia_smi()\n+    return run_and_parse_first_match(run, smi, r'Driver Version: (.*?) ')\n+\n+def get_gpu_info(run):\n+    if get_platform() == 'darwin':\n+        if TORCH_AVAILABLE and torch.cuda.is_available():\n+            return torch.cuda.get_device_name(None)\n+        return None\n+    smi = get_nvidia_smi()\n+    uuid_regex = re.compile(r' \\(UUID: .+?\\)')\n+    rc, out, _ = run(smi + ' -L')\n+    if rc != 0:\n+        return None\n+    # Anonymize GPUs by removing their UUID\n+    return \"\\n\" + re.sub(uuid_regex, '', out)\n+\n+def get_running_cuda_version(run):\n+    return run_and_parse_first_match(run, 'nvcc --version', r'V(.*)$')\n+\n+def get_cudnn_version(run):\n+    \"\"\"This will return a list of libcudnn.so; it's hard to tell which one is being used\"\"\"\n+    if get_platform() == 'darwin':\n+        # CUDA libraries and drivers can be found in /usr/local/cuda/. See\n+        cudnn_cmd = 'ls /usr/local/cuda/lib/libcudnn*'\n+    else:\n+        cudnn_cmd = 'ldconfig -p | grep libcudnn | rev | cut -d\" \" -f1 | rev'\n+    rc, out, _ = run(cudnn_cmd)\n+    # find will return 1 if there are permission errors or if not found\n+    if len(out) == 0 or (rc != 1 and rc != 0):\n+        l = os.environ.get('CUDNN_LIBRARY')\n+        if l is not None and os.path.isfile(l):\n+            return os.path.realpath(l)\n+        return None\n+    files = set()\n+    for fn in out.split('\\n'):\n+        fn = os.path.realpath(fn)  # eliminate symbolic links\n+        if os.path.isfile(fn):\n+            files.add(fn)\n+    if not files:\n+        return None\n+    # Alphabetize the result because the order is non-deterministic otherwise\n+    files = list(sorted(files))\n+    if len(files) == 1:\n+        return files[0]\n+    result = '\\n'.join(files)\n+    return 'Probably one of the following:\\n{}'.format(result)\n+\n+def get_nvidia_smi():", "originalCommit": "d4c4250bce89c4806687f5426fb906a93c4f8c30", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDUxMDk4MA==", "url": "https://github.com/pytorch/serve/pull/622#discussion_r504510980", "bodyText": "Moved to module-level variable,", "author": "harshbafna", "createdAt": "2020-10-14T08:51:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzY4Nzc5NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzY4OTU4OQ==", "url": "https://github.com/pytorch/serve/pull/622#discussion_r497689589", "bodyText": "It seems to be making an assumption that the script will be invoked from the top level directory. We should make the path relative to this script. Same for get_torch_model_archiver", "author": "maaquib", "createdAt": "2020-09-30T17:41:06Z", "path": "test/print_env_info.py", "diffHunk": "@@ -0,0 +1,327 @@\n+# This script outputs relevant system environment info\n+# Run it with `python print_env_info.py`.\n+from __future__ import absolute_import, division, print_function, unicode_literals\n+import locale\n+import re\n+import subprocess\n+import sys\n+import os\n+from collections import namedtuple\n+\n+try:\n+    import torch\n+    TORCH_AVAILABLE = True\n+except (ImportError, NameError, AttributeError):\n+    TORCH_AVAILABLE = False\n+\n+torchserve_env = {\n+    \"torch\" : \"**Warning: torch not present ..\",\n+    \"torch_model_archiver\" : \"**Warning: torch-model-archiver not installed ..\",\n+    \"torchserve\" : \"**Warning: torchserve not installed ..\",\n+    \"torchtext\" : \"**Warning: torchtext not present ..\",\n+    \"torchvision\" : \"**Warning: torchvision not present ..\",\n+    \"torchaudio\" : \"**Warning: torchaudio not present ..\"\n+}\n+\n+python_env = {\n+    \"python_version\" : \"N/A\",\n+    \"pip_version\" : \"\",\n+    \"pip_packages\" : []\n+}\n+\n+java_env = {\n+    \"java_version\" : []\n+}\n+\n+os_info = {\n+    \"os\" : \"\",\n+    \"gcc_version\" : \"\",\n+    \"clang_version\" : \"N/A\",\n+    \"cmake_version\" : \"N/A\"\n+}\n+\n+cuda_env = {\n+    \"is_cuda_available\" : \"No\",\n+    \"cuda_runtime_version\" : \"N/A\",\n+    \"nvidia_gpu_models\" : [],\n+    \"nvidia_driver_version\" : \"N/A\",\n+    \"cudnn_version\" : []\n+}\n+\n+def run(command):\n+    \"\"\"Returns (return-code, stdout, stderr)\"\"\"\n+    p = subprocess.Popen(command, stdout=subprocess.PIPE,\n+                         stderr=subprocess.PIPE, shell=True)\n+    output, err = p.communicate()\n+    rc = p.returncode\n+    enc = locale.getpreferredencoding()\n+    output = output.decode(enc)\n+    err = err.decode(enc)\n+    return rc, output.strip(), err.strip()\n+\n+def run_and_read_all(run, command):\n+    \"\"\"Reads and returns entire output if rc is 0\"\"\"\n+    rc, out, _ = run(command)\n+    if rc != 0:\n+        return \"N/A\"\n+    return out\n+\n+def run_and_parse_first_match(run, command, regex):\n+    \"\"\"Returns the first regex match if it exists\"\"\"\n+    rc, out, _ = run(command)\n+    if rc != 0:\n+        return \"N/A\"\n+    match = re.search(regex, out)\n+    if match is None:\n+        return \"N/A\"\n+    return match.group(1)\n+\n+def get_pip_packages(run, package_name=None):\n+    \"\"\"Returns `pip list` output. \"\"\"\n+    # systems generally have `pip` as `pip` or `pip3`\n+    def run_with_pip(pip):\n+        if package_name == \"torch\":\n+            grep_cmd = 'grep \"' + package_name + '\"'\n+        else:\n+            grep_cmd = r'grep \"numpy\\|pytest\\|pylint\"'\n+        return run_and_read_all(run, pip + ' list --format=freeze | ' + grep_cmd)\n+    out = run_with_pip('pip3')\n+    if out == \"N/A\":\n+        out = None\n+    return 'pip3', out\n+\n+def get_java_version(run):\n+    rc, out, _ = run(\"java --version\")\n+    if rc != 0:\n+        return \"**Warning: java not installed...\"\n+    return out\n+\n+def get_platform():\n+    if sys.platform.startswith('linux'):\n+        return 'linux'\n+    elif sys.platform.startswith('cygwin'):\n+        return 'cygwin'\n+    elif sys.platform.startswith('darwin'):\n+        return 'darwin'\n+    else:\n+        return sys.platform\n+\n+def get_mac_version(run):\n+    return run_and_parse_first_match(run, 'sw_vers -productVersion', r'(.*)')\n+\n+def get_lsb_version(run):\n+    return run_and_parse_first_match(run, 'lsb_release -a', r'Description:\\t(.*)')\n+\n+def check_release_file(run):\n+    return run_and_parse_first_match(run, 'cat /etc/*-release', r'PRETTY_NAME=\"(.*)\"')\n+\n+def get_os(run):\n+    from platform import machine\n+    platform = get_platform()\n+    if platform == 'darwin':\n+        version = get_mac_version(run)\n+        if version is None:\n+            return None\n+        return 'Mac OSX {} ({})'.format(version, machine())\n+    if platform == 'linux':\n+        # Ubuntu/Debian based\n+        desc = get_lsb_version(run)\n+        if desc is not None:\n+            return desc\n+        # Try reading /etc/*-release\n+        desc = check_release_file(run)\n+        if desc is not None:\n+            return desc\n+        return '{} ({})'.format(platform, machine())\n+    # Unknown platform\n+    return platform\n+\n+def get_gcc_version(run):\n+    return run_and_parse_first_match(run, 'gcc --version', r'gcc (.*)')\n+\n+def get_clang_version(run):\n+    return run_and_parse_first_match(run, 'clang --version', r'clang version (.*)')\n+\n+def get_cmake_version(run):\n+    return run_and_parse_first_match(run, 'cmake --version', r'cmake (.*)')\n+\n+def get_nvidia_driver_version(run):\n+    if get_platform() == 'darwin':\n+        cmd = 'kextstat | grep -i cuda'\n+        return run_and_parse_first_match(run, cmd, r'com[.]nvidia[.]CUDA [(](.*?)[)]')\n+    smi = get_nvidia_smi()\n+    return run_and_parse_first_match(run, smi, r'Driver Version: (.*?) ')\n+\n+def get_gpu_info(run):\n+    if get_platform() == 'darwin':\n+        if TORCH_AVAILABLE and torch.cuda.is_available():\n+            return torch.cuda.get_device_name(None)\n+        return None\n+    smi = get_nvidia_smi()\n+    uuid_regex = re.compile(r' \\(UUID: .+?\\)')\n+    rc, out, _ = run(smi + ' -L')\n+    if rc != 0:\n+        return None\n+    # Anonymize GPUs by removing their UUID\n+    return \"\\n\" + re.sub(uuid_regex, '', out)\n+\n+def get_running_cuda_version(run):\n+    return run_and_parse_first_match(run, 'nvcc --version', r'V(.*)$')\n+\n+def get_cudnn_version(run):\n+    \"\"\"This will return a list of libcudnn.so; it's hard to tell which one is being used\"\"\"\n+    if get_platform() == 'darwin':\n+        # CUDA libraries and drivers can be found in /usr/local/cuda/. See\n+        cudnn_cmd = 'ls /usr/local/cuda/lib/libcudnn*'\n+    else:\n+        cudnn_cmd = 'ldconfig -p | grep libcudnn | rev | cut -d\" \" -f1 | rev'\n+    rc, out, _ = run(cudnn_cmd)\n+    # find will return 1 if there are permission errors or if not found\n+    if len(out) == 0 or (rc != 1 and rc != 0):\n+        l = os.environ.get('CUDNN_LIBRARY')\n+        if l is not None and os.path.isfile(l):\n+            return os.path.realpath(l)\n+        return None\n+    files = set()\n+    for fn in out.split('\\n'):\n+        fn = os.path.realpath(fn)  # eliminate symbolic links\n+        if os.path.isfile(fn):\n+            files.add(fn)\n+    if not files:\n+        return None\n+    # Alphabetize the result because the order is non-deterministic otherwise\n+    files = list(sorted(files))\n+    if len(files) == 1:\n+        return files[0]\n+    result = '\\n'.join(files)\n+    return 'Probably one of the following:\\n{}'.format(result)\n+\n+def get_nvidia_smi():\n+    smi = 'nvidia-smi'\n+    return smi\n+\n+def get_torchserve_version():\n+    #fetch the torchserve version from version.txt file\n+    with open(\"ts/version.txt\", 'r') as file:", "originalCommit": "d4c4250bce89c4806687f5426fb906a93c4f8c30", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDUxMTEwOQ==", "url": "https://github.com/pytorch/serve/pull/622#discussion_r504511109", "bodyText": "Fixed.", "author": "harshbafna", "createdAt": "2020-10-14T08:52:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzY4OTU4OQ=="}], "type": "inlineReview"}, {"oid": "1d7b08c95fa3faff8c14c35327f395c2b2c092d4", "url": "https://github.com/pytorch/serve/commit/1d7b08c95fa3faff8c14c35327f395c2b2c092d4", "message": "Merge branch 'master' into issue_598", "committedDate": "2020-09-30T17:45:35Z", "type": "commit"}, {"oid": "fb7b858b5d01a2909e207ae23cb851f3ecf9c151", "url": "https://github.com/pytorch/serve/commit/fb7b858b5d01a2909e207ae23cb851f3ecf9c151", "message": "Merge branch 'master' into issue_598", "committedDate": "2020-10-14T05:49:57Z", "type": "commit"}, {"oid": "15040851fc762b99456d7cb7e6dba81734202fb2", "url": "https://github.com/pytorch/serve/commit/15040851fc762b99456d7cb7e6dba81734202fb2", "message": "incorporated review comments and cleanup", "committedDate": "2020-10-14T08:17:43Z", "type": "commit"}, {"oid": "9e179014c82153cba18e90f007e2c05ac92f7b9d", "url": "https://github.com/pytorch/serve/commit/9e179014c82153cba18e90f007e2c05ac92f7b9d", "message": "Merge branch 'issue_598' of https://github.com/AshwinChafale/serve into issue_598", "committedDate": "2020-10-14T08:18:00Z", "type": "commit"}, {"oid": "fc2632e7ac237363848cb79eaa1c6b0cb6e88bcb", "url": "https://github.com/pytorch/serve/commit/fc2632e7ac237363848cb79eaa1c6b0cb6e88bcb", "message": "change cwd to file path", "committedDate": "2020-10-14T08:47:35Z", "type": "commit"}, {"oid": "f0c7b02087ab9ce93b2f1042d6fa546e6215acb4", "url": "https://github.com/pytorch/serve/commit/f0c7b02087ab9ce93b2f1042d6fa546e6215acb4", "message": "renamed function", "committedDate": "2020-10-14T09:09:18Z", "type": "commit"}, {"oid": "e488d4e31e1024dd877723343be09bb33b9a99b5", "url": "https://github.com/pytorch/serve/commit/e488d4e31e1024dd877723343be09bb33b9a99b5", "message": "Merge branch 'master' into issue_598", "committedDate": "2020-10-28T04:53:07Z", "type": "commit"}, {"oid": "1778296389d337a8da81a054735c4314ed324e29", "url": "https://github.com/pytorch/serve/commit/1778296389d337a8da81a054735c4314ed324e29", "message": "added python executable path", "committedDate": "2020-10-28T05:12:09Z", "type": "commit"}]}