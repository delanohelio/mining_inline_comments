{"pr_number": 212, "pr_title": "0.1 documentation updates (rollup)", "pr_createdAt": "2020-04-17T13:54:14Z", "pr_url": "https://github.com/pytorch/serve/pull/212", "timeline": [{"oid": "23164a3e25b66ae0d9a5593b927c690217182673", "url": "https://github.com/pytorch/serve/commit/23164a3e25b66ae0d9a5593b927c690217182673", "message": "fixed broken lins", "committedDate": "2020-04-11T04:00:33Z", "type": "commit"}, {"oid": "f879457979ed8e3706fa3c1f7595ad50a21dc7c6", "url": "https://github.com/pytorch/serve/commit/f879457979ed8e3706fa3c1f7595ad50a21dc7c6", "message": "Corrected examples doc", "committedDate": "2020-04-13T13:18:39Z", "type": "commit"}, {"oid": "d68f3c37d2f3525ada72ac9be2cb2cbd02fd335d", "url": "https://github.com/pytorch/serve/commit/d68f3c37d2f3525ada72ac9be2cb2cbd02fd335d", "message": "direct link to image classifier instead of individual model", "committedDate": "2020-04-13T13:35:36Z", "type": "commit"}, {"oid": "725a391e06ea9ec531a7b0ba216795f3e48565cb", "url": "https://github.com/pytorch/serve/commit/725a391e06ea9ec531a7b0ba216795f3e48565cb", "message": "Update README.md", "committedDate": "2020-04-13T13:40:54Z", "type": "commit"}, {"oid": "01d8c8555f0f4c9ffbe6b63a6b5f77ed456d858f", "url": "https://github.com/pytorch/serve/commit/01d8c8555f0f4c9ffbe6b63a6b5f77ed456d858f", "message": "Update README.md", "committedDate": "2020-04-13T13:45:27Z", "type": "commit"}, {"oid": "cde0b26731fac231eba3688a47c81651b7835c83", "url": "https://github.com/pytorch/serve/commit/cde0b26731fac231eba3688a47c81651b7835c83", "message": "documentation: edited main README.md, fixed links in docs/README.md, and removed redundant docs/quick_start.md topic", "committedDate": "2020-04-13T19:57:14Z", "type": "commit"}, {"oid": "33c61cbcad9607f869f37cce01297242564cd5ed", "url": "https://github.com/pytorch/serve/commit/33c61cbcad9607f869f37cce01297242564cd5ed", "message": "documentation: added clone repo info to serve quick start example on README.md", "committedDate": "2020-04-14T02:44:51Z", "type": "commit"}, {"oid": "843ecd283048a5caab10e2385dc41b8611eac4b9", "url": "https://github.com/pytorch/serve/commit/843ecd283048a5caab10e2385dc41b8611eac4b9", "message": "fixed minor doc issues found during testing", "committedDate": "2020-04-14T14:06:36Z", "type": "commit"}, {"oid": "5a31ad61603632878b4d4699e6f4e25ec145c734", "url": "https://github.com/pytorch/serve/commit/5a31ad61603632878b4d4699e6f4e25ec145c734", "message": "documentation: removed mention of CentOS from README.md", "committedDate": "2020-04-14T16:13:59Z", "type": "commit"}, {"oid": "096223769a563424e515027cf77073033a004ec5", "url": "https://github.com/pytorch/serve/commit/096223769a563424e515027cf77073033a004ec5", "message": "Merge branch 'eric_readme' into 0.1_docs", "committedDate": "2020-04-17T10:53:23Z", "type": "commit"}, {"oid": "158732c84273726102c24d01723350edae9d2d19", "url": "https://github.com/pytorch/serve/commit/158732c84273726102c24d01723350edae9d2d19", "message": "Merge branch 'imageclass_links' into 0.1_docs", "committedDate": "2020-04-17T10:54:02Z", "type": "commit"}, {"oid": "42773497378776841df1cd43d31496509be9a8b1", "url": "https://github.com/pytorch/serve/commit/42773497378776841df1cd43d31496509be9a8b1", "message": "Merge branch 'examples_readme' into 0.1_docs", "committedDate": "2020-04-17T10:55:17Z", "type": "commit"}, {"oid": "5f36fd2074ae6ec6c1004fe9c10dcad9ec2be91d", "url": "https://github.com/pytorch/serve/commit/5f36fd2074ae6ec6c1004fe9c10dcad9ec2be91d", "message": "revert readme changes", "committedDate": "2020-04-17T11:10:38Z", "type": "commit"}, {"oid": "f7173882317fb5ecc0829c9608537cbfb401b3a1", "url": "https://github.com/pytorch/serve/commit/f7173882317fb5ecc0829c9608537cbfb401b3a1", "message": "Merge branch 'random_fixes' into 0.1_docs", "committedDate": "2020-04-17T11:12:52Z", "type": "commit"}, {"oid": "b6207b6d548e0d01bdbb177c0b9b9a1bcec6a5c1", "url": "https://github.com/pytorch/serve/commit/b6207b6d548e0d01bdbb177c0b9b9a1bcec6a5c1", "message": "simply install instructions; clarify Docker quickstart", "committedDate": "2020-04-17T12:47:00Z", "type": "commit"}, {"oid": "697be8274a27e45ce546c3af55510d33a307c4b1", "url": "https://github.com/pytorch/serve/commit/697be8274a27e45ce546c3af55510d33a307c4b1", "message": "add pip instructions and java note", "committedDate": "2020-04-17T12:58:57Z", "type": "commit"}, {"oid": "ade8e7d98326417d73be19b754172790e6e39876", "url": "https://github.com/pytorch/serve/commit/ade8e7d98326417d73be19b754172790e6e39876", "message": "Merge pull request #209 from aaronmarkham/0.1_docs\n\nCombine docs updates", "committedDate": "2020-04-17T13:03:02Z", "type": "commit"}, {"oid": "20a34fd21f70836fa19370001ef3bd6378ca3344", "url": "https://github.com/pytorch/serve/commit/20a34fd21f70836fa19370001ef3bd6378ca3344", "message": "fix bullets", "committedDate": "2020-04-17T13:05:54Z", "type": "commit"}, {"oid": "2f68b8ea2b16133cead87df44afd728f8efcb0f1", "url": "https://github.com/pytorch/serve/commit/2f68b8ea2b16133cead87df44afd728f8efcb0f1", "message": "Merge pull request #210 from aaronmarkham/0.1_docs\n\nfix bullets", "committedDate": "2020-04-17T13:08:45Z", "type": "commit"}, {"oid": "1eb3c2abdfb97c6517ef9f00d5b1a44d852e6a27", "url": "https://github.com/pytorch/serve/commit/1eb3c2abdfb97c6517ef9f00d5b1a44d852e6a27", "message": "change static links to relative", "committedDate": "2020-04-17T13:50:07Z", "type": "commit"}, {"oid": "aa074d3c61c64d8a23c83cafb9a5cfeba7f6709b", "url": "https://github.com/pytorch/serve/commit/aa074d3c61c64d8a23c83cafb9a5cfeba7f6709b", "message": "Merge pull request #211 from aaronmarkham/0.1_docs\n\nchange static links to relative", "committedDate": "2020-04-17T13:52:56Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQyNzI4Ng==", "url": "https://github.com/pytorch/serve/pull/212#discussion_r410427286", "bodyText": "This is fine on a CPU machine, but does not give the Docker container access to GPU devices. Switching to @harshbafna's command line from Issue #205, doesn't seem to help, either.\nBecause of the lack of GPU instructions, this is incomplete, but I recommend leaving it so until there's a fix for the GPU Docker container.", "author": "fbbradheintz", "createdAt": "2020-04-17T19:29:20Z", "path": "README.md", "diffHunk": "@@ -2,208 +2,237 @@\n \n TorchServe is a flexible and easy to use tool for serving PyTorch models.\n \n-For full documentation, see [Model Server for PyTorch Documentation](docs/README.md).\n+**For full documentation, see [Model Server for PyTorch Documentation](docs/README.md).**\n \n ## Contents of this Document\n \n * [Install TorchServe](#install-torchserve)\n-* [Quick Start with docker](#quick-start-with-docker)\n-* [Quick Start for local environment](#quick-start-guide-for-local-environment)\n * [Serve a Model](#serve-a-model)\n-* [Other Features](#other-features)\n+* [Quick start with docker](#quick-start-with-docker)\n * [Contributing](#contributing)\n \n ## Install TorchServe\n \n-## Quick Start with docker\n+Conda instructions are provided in more detail, but you may also use `pip` and `virtualenv` if that is your preference.\n+**Note:** Java 11 is required. Instructions for installing Java 11 for Ubuntu or macOS are provided in the [Install with Conda](#install-with-conda) section.\n \n-### Start TorchServe using docker image\n+### Install with pip\n+To use `pip` to install TorchServe and the model archiver:\n \n-#### Prerequisites\n-\n-* docker - Refer [official docker installation guide](https://docs.docker.com/install/)\n-* git    - Refer [official git set-up guide](https://help.github.com/en/github/getting-started-with-github/set-up-git)\n-\n-#### Building docker image\n-\n-```bash\n-git clone https://github.com/pytorch/serve.git\n-cd serve\n-./build_image.sh\n ```\n-\n-The above command builds the TorchServe image for CPU device with `master` branch\n-\n-To create image for specific branch use following command :\n-```bash\n-./build_image.sh -b <branch_name>\n+pip install torchserve torch-model-archiver\n ```\n \n-To create image for GPU device use following command :\n-```bash\n-./build_image.sh --gpu\n-```\n-\n-To create image for GPU device with specific branch use following command :\n-```bash\n-./build_image.sh -b <branch_name> --gpu\n-```\n-\n-**Running docker image and starting TorchServe inside container with pre-registered resnet-18 image classification model**\n-\n-```bash\n-./start.sh\n-```\n-\n-**For pre-trained and pre-packaged models-archives refer [TorchServe model zoo](docs/model_zoo.md)**\n-**For managing models with TorchServe refer [management api documentation](docs/management_api.md)**\n-**For running inference on registered models with TorchServe refer [inference api documentation](docs/inference_api.md)**\n-\n-## Quick Start for local environment\n-\n-### Prerequisites\n-\n-Before proceeding further with this document, make sure you have the following prerequisites.\n-\n-1. Ubuntu, CentOS, or macOS. Windows support is experimental. The following instructions will focus on Linux and macOS only.\n-1. Python     - TorchServe requires python to run the workers.\n-1. pip        - Pip is a python package management system.\n-1. Java 11    - TorchServe requires Java 11 to start. You have the following options for installing Java 11:\n-\n-    For Ubuntu:\n+### Install with Conda\n+_Ubuntu_\n \n+1. Install Java 11\n     ```bash\n     sudo apt-get install openjdk-11-jdk\n     ```\n-\n-    For CentOS:\n-\n+1. Install Conda (https://docs.conda.io/projects/conda/en/latest/user-guide/install/linux.html)\n+1. Create an environment and install torchserve and torch-model-archiver\n+    ```bash\n+    conda create --name torchserve torchserve torch-model-archiver -c pytorch\n+    ```\n+1. Activate the environment\n     ```bash\n-    openjdk-11-jdk\n-    sudo yum install java-11-openjdk\n+    source activate torchserve\n     ```\n \n-    For macOS\n+_macOS_\n \n+1. Install Java 11\n     ```bash\n     brew tap AdoptOpenJDK/openjdk\n     brew cask install adoptopenjdk11\n     ```\n+1. Install Conda (https://docs.conda.io/projects/conda/en/latest/user-guide/install/linux.html)\n+1. Create an environment and install torchserve and torch-model-archiver\n+    ```bash\n+    conda create --name torchserve torchserve torch-model-archiver -c pytorch\n+    ```\n+1. Activate the environment\n+    ```bash\n+    source activate torchserve\n+    ```\n \n-### Installing TorchServe with pip\n+Now you are ready to [package and serve models with TorchServe](#serve-a-model).\n \n-#### Setup\n+### Install TorchServe for development\n \n-**Step 1:** Setup a Virtual Environment\n+If you plan to develop with TorchServe and change some of the source code, install it from source code and make your changes executable with this command:\n \n-We recommend installing and running TorchServe in a virtual environment. It's a good practice to run and install all of the Python dependencies in virtual environments. This will provide isolation of the dependencies and ease dependency management.\n+```bash\n+pip install -e .\n+```\n \n-* **Use Virtualenv** : This is used to create virtual Python environments. You may install and activate a virtualenv for Python 3.7 as follows:\n+* To develop with torch-model-archiver:\n \n ```bash\n-pip install virtualenv\n+cd serve/model-archiver\n+pip install -e .\n ```\n \n-Then create a virtual environment:\n+To upgrade TorchServe or model archiver from source code and make changes executable, run:\n \n ```bash\n-# Assuming we want to run python3.7 in /usr/local/bin/python3.7\n-virtualenv -p /usr/local/bin/python3.7 /tmp/pyenv3\n-# Enter this virtual environment as follows\n-source /tmp/pyenv3/bin/activate\n+pip install -U -e .\n ```\n \n-Refer to the [Virtualenv documentation](https://virtualenv.pypa.io/en/stable/) for further information.\n+For information about the model archiver, see [detailed documentation](model-archiver/README.md).\n+\n+## Serve a model\n \n-* **Use Anaconda** : This is package, dependency and environment manager. You may download and install Anaconda as follows :\n-[Download anaconda distribution](https://www.anaconda.com/distribution/#download-section)\n+This section shows a simple example of serving a model with TorchServe. To complete this example, you must have already installed TorchServe and the model archiver.\n \n-Then create a virtual environment using conda.\n+To run this example, clone the TorchServe repository and navigate to the root of the repository:\n \n ```bash\n-conda create -n myenv\n-source activate myenv\n+git clone https://github.com/pytorch/serve.git\n+cd serve\n ```\n \n-**Step 2:** Install torch\n+Then run the following steps from the root of the repository.\n+\n+### Store a Model\n \n-TorchServe won't install the PyTorch engine by default. If it isn't already installed in your virtual environment, you must install the PyTorch pip packages.\n+To serve a model with TorchServe, first archive the model as a MAR file. You can use the model archiver to package a model.\n+You can also create model stores to store your archived models.\n \n-* For virtualenv\n+The following code gets a trained model, archives the model by using the model archiver, and then stores the model in a model store.\n \n ```bash\n-#For CPU/GPU\n-pip install torch torchvision torchtext\n+wget https://download.pytorch.org/models/densenet161-8d451a50.pth\n+torch-model-archiver --model-name densenet161 --version 1.0 --model-file examples/image_classifier/densenet_161/model.py --serialized-file densenet161-8d451a50.pth --extra-files examples/image_classifier/index_to_name.json --handler image_classifier\n+mkdir model_store\n+mv densenet161.mar model_store/\n ```\n \n-* For conda\n+For more information about the model archiver, see [Torch Model archiver for TorchServe](../model-archiver/README.md)\n \n-The `torchtext` package has a dependency on `sentencepiece`, which is not available via Anaconda. You can install it via `pip`:\n+### Start TorchServe to serve the model\n+\n+After you archive and store the model, use the `torchserve` command to serve the model.\n \n ```bash\n-pip install sentencepiece\n+torchserve --start --model-store model_store --models densenet161=densenet161.mar\n ```\n \n+After you execute the `torchserve` command above, TorchServe runs on your host, listening for inference requests.\n+\n+**Note**: If you specify model(s) when you run TorchServe, it automatically scales backend workers to the number equal to available vCPUs (if you run on a CPU instance) or to the number of available GPUs (if you run on a GPU instance). In case of powerful hosts with a lot of compute resoures (vCPUs or GPUs). This start up and autoscaling process might take considerable time. If you want to minimize TorchServe start up time you avoid registering and scaling the model during start up time and move that to a later point by using corresponding [Management API](docs/management_api.md#register-a-model), which allows finer grain control of the resources that are allocated for any particular model).\n+\n+### Get predictions from a model\n+\n+To test the model server, send a request to the server's `predictions` API.\n+\n+Complete the following steps:\n+\n+* Open a new terminal window (other than the one running TorchServe).\n+* Use `curl` to download one of these [cute pictures of a kitten](https://www.google.com/search?q=cute+kitten&tbm=isch&hl=en&cr=&safe=images)\n+  and use the  `-o` flag to name it `kitten.jpg` for you.\n+* Use `curl` to send `POST` to the TorchServe `predict` endpoint with the kitten's image.\n+\n+![kitten](docs/images/kitten_small.jpg)\n+\n+The following code completes all three steps:\n+\n ```bash\n-#For CPU\n-conda install psutil pytorch torchvision torchtext -c pytorch\n+curl -O https://s3.amazonaws.com/model-server/inputs/kitten.jpg\n+curl -X POST http://127.0.0.1:8080/predictions/densenet161 -T kitten.jpg\n+```\n+\n+The predict endpoint returns a prediction response in JSON. It will look something like the following result:\n+\n+```json\n+[\n+  {\n+    \"tiger_cat\": 0.46933549642562866\n+  },\n+  {\n+    \"tabby\": 0.4633878469467163\n+  },\n+  {\n+    \"Egyptian_cat\": 0.06456148624420166\n+  },\n+  {\n+    \"lynx\": 0.0012828214094042778\n+  },\n+  {\n+    \"plastic_bag\": 0.00023323034110944718\n+  }\n+]\n ```\n \n+You will see this result in the response to your `curl` call to the predict endpoint, and in the server logs in the terminal window running TorchServe. It's also being [logged locally with metrics](docs/metrics.md).\n+\n+Now you've seen how easy it can be to serve a deep learning model with TorchServe! [Would you like to know more?](docs/server.md)\n+\n+### Stop the running TorchServe\n+\n+To stop the currently running TorchServe instance, run the following command:\n+\n ```bash\n-#For GPU\n-conda install future psutil pytorch torchvision cudatoolkit=10.1 torchtext -c pytorch\n+torchserve --stop\n ```\n \n-**Step 3:** Install TorchServe as follows:\n+You see output specifying that TorchServe has stopped.\n+\n+## Quick Start with Docker\n+\n+### Prerequisites\n+\n+* docker - Refer to the [official docker installation guide](https://docs.docker.com/install/)\n+* git    - Refer to the [official git set-up guide](https://help.github.com/en/github/getting-started-with-github/set-up-git)\n+* TorchServe source code. Clone and enter the repo as follows:\n \n ```bash\n git clone https://github.com/pytorch/serve.git\n cd serve\n-pip install .\n ```\n \n-**Notes:**\n-\n-* If `pip install .`  fails, run `python setup.py install` and install the following python packages using `pip install` : Pillow, psutil, future\n-* See the [advanced installation](docs/install.md) page for more options and troubleshooting.\n+### Build the TorchServe Docker image\n \n-### Install torch-model-archiver\n+The following are examples on how to use the `build_image.sh` script to build Docker images to support CPU or GPU inference.\n \n-* Install torch-model-archiver as follows:\n+Build the TorchServe image for a CPU device using the `master` branch:\n \n ```bash\n-cd serve/model-archiver\n-pip install .\n+./build_image.sh\n ```\n \n-For information about the model archiver, see [detailed documentation](model-archiver/README.md).\n+Create a Docker image for a specific branch, use the following command:\n \n-### Install TorchServe for development\n+```bash\n+./build_image.sh -b <branch_name>\n+```\n \n-If you plan to develop with TorchServe and change some of the source code, install it from source code and make your changes executable with this command:\n+To create a Docker image for a GPU device, use the following command:\n \n ```bash\n-pip install -e .\n+./build_image.sh --gpu\n ```\n \n-To upgrade TorchServe from source code and make changes executable, run:\n+To create a Docker image for a GPU device with a specific branch, use following command:\n \n ```bash\n-pip install -U -e .\n+./build_image.sh -b <branch_name> --gpu\n ```\n \n-## Troubleshoot Installation\n-\n-Here is an easy example for serving an object classification model (make sure to run it at the root of the repository):\n+To run your TorchServe Docker image and start TorchServe inside the container with a pre-registered resnet-18 image classification model, use the following command:\n \n ```bash\n-wget https://download.pytorch.org/models/densenet161-8d451a50.pth\n-torch-model-archiver --model-name densenet161 --version 1.0 --model-file examples/image_classifier/densenet_161/model.py --serialized-file densenet161-8d451a50.pth --extra-files examples/image_classifier/index_to_name.json --handler image_classifier\n-mkdir model_store\n-mv densenet161.mar model_store/\n-torchserve --start --model-store model_store --models densenet161=densenet161.mar\n+./start.sh", "originalCommit": "aa074d3c61c64d8a23c83cafb9a5cfeba7f6709b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDcxNzE5NQ==", "url": "https://github.com/pytorch/serve/pull/212#discussion_r410717195", "bodyText": "resolving this since the fix will come later and we'll update accordingly", "author": "aaronmarkham", "createdAt": "2020-04-18T16:13:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQyNzI4Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ4ODA3MQ==", "url": "https://github.com/pytorch/serve/pull/212#discussion_r410488071", "bodyText": "This should also include the step of checking out the source repository and moving into that folder:\ngit clone https://github.com/pytorch/serve\ncd serve", "author": "fbbradheintz", "createdAt": "2020-04-17T21:53:34Z", "path": "README.md", "diffHunk": "@@ -2,208 +2,237 @@\n \n TorchServe is a flexible and easy to use tool for serving PyTorch models.\n \n-For full documentation, see [Model Server for PyTorch Documentation](docs/README.md).\n+**For full documentation, see [Model Server for PyTorch Documentation](docs/README.md).**\n \n ## Contents of this Document\n \n * [Install TorchServe](#install-torchserve)\n-* [Quick Start with docker](#quick-start-with-docker)\n-* [Quick Start for local environment](#quick-start-guide-for-local-environment)\n * [Serve a Model](#serve-a-model)\n-* [Other Features](#other-features)\n+* [Quick start with docker](#quick-start-with-docker)\n * [Contributing](#contributing)\n \n ## Install TorchServe\n \n-## Quick Start with docker\n+Conda instructions are provided in more detail, but you may also use `pip` and `virtualenv` if that is your preference.\n+**Note:** Java 11 is required. Instructions for installing Java 11 for Ubuntu or macOS are provided in the [Install with Conda](#install-with-conda) section.\n \n-### Start TorchServe using docker image\n+### Install with pip\n+To use `pip` to install TorchServe and the model archiver:\n \n-#### Prerequisites\n-\n-* docker - Refer [official docker installation guide](https://docs.docker.com/install/)\n-* git    - Refer [official git set-up guide](https://help.github.com/en/github/getting-started-with-github/set-up-git)\n-\n-#### Building docker image\n-\n-```bash\n-git clone https://github.com/pytorch/serve.git\n-cd serve\n-./build_image.sh\n ```\n-\n-The above command builds the TorchServe image for CPU device with `master` branch\n-\n-To create image for specific branch use following command :\n-```bash\n-./build_image.sh -b <branch_name>\n+pip install torchserve torch-model-archiver\n ```\n \n-To create image for GPU device use following command :\n-```bash\n-./build_image.sh --gpu\n-```\n-\n-To create image for GPU device with specific branch use following command :\n-```bash\n-./build_image.sh -b <branch_name> --gpu\n-```\n-\n-**Running docker image and starting TorchServe inside container with pre-registered resnet-18 image classification model**\n-\n-```bash\n-./start.sh\n-```\n-\n-**For pre-trained and pre-packaged models-archives refer [TorchServe model zoo](docs/model_zoo.md)**\n-**For managing models with TorchServe refer [management api documentation](docs/management_api.md)**\n-**For running inference on registered models with TorchServe refer [inference api documentation](docs/inference_api.md)**\n-\n-## Quick Start for local environment\n-\n-### Prerequisites\n-\n-Before proceeding further with this document, make sure you have the following prerequisites.\n-\n-1. Ubuntu, CentOS, or macOS. Windows support is experimental. The following instructions will focus on Linux and macOS only.\n-1. Python     - TorchServe requires python to run the workers.\n-1. pip        - Pip is a python package management system.\n-1. Java 11    - TorchServe requires Java 11 to start. You have the following options for installing Java 11:\n-\n-    For Ubuntu:\n+### Install with Conda\n+_Ubuntu_\n \n+1. Install Java 11\n     ```bash\n     sudo apt-get install openjdk-11-jdk\n     ```\n-\n-    For CentOS:\n-\n+1. Install Conda (https://docs.conda.io/projects/conda/en/latest/user-guide/install/linux.html)\n+1. Create an environment and install torchserve and torch-model-archiver\n+    ```bash\n+    conda create --name torchserve torchserve torch-model-archiver -c pytorch\n+    ```\n+1. Activate the environment\n     ```bash\n-    openjdk-11-jdk\n-    sudo yum install java-11-openjdk\n+    source activate torchserve\n     ```\n \n-    For macOS\n+_macOS_\n \n+1. Install Java 11\n     ```bash\n     brew tap AdoptOpenJDK/openjdk\n     brew cask install adoptopenjdk11\n     ```\n+1. Install Conda (https://docs.conda.io/projects/conda/en/latest/user-guide/install/linux.html)\n+1. Create an environment and install torchserve and torch-model-archiver\n+    ```bash\n+    conda create --name torchserve torchserve torch-model-archiver -c pytorch\n+    ```\n+1. Activate the environment\n+    ```bash\n+    source activate torchserve\n+    ```\n \n-### Installing TorchServe with pip\n+Now you are ready to [package and serve models with TorchServe](#serve-a-model).\n \n-#### Setup\n+### Install TorchServe for development\n \n-**Step 1:** Setup a Virtual Environment\n+If you plan to develop with TorchServe and change some of the source code, install it from source code and make your changes executable with this command:\n \n-We recommend installing and running TorchServe in a virtual environment. It's a good practice to run and install all of the Python dependencies in virtual environments. This will provide isolation of the dependencies and ease dependency management.\n+```bash", "originalCommit": "aa074d3c61c64d8a23c83cafb9a5cfeba7f6709b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ5MDg1NA==", "url": "https://github.com/pytorch/serve/pull/212#discussion_r410490854", "bodyText": "This is a minor usability nitpick: If someone has installed with conda or pip, then this has them creating the model store (and, if they start TorchServe, their logs & metrics folder) inside the cloned repository, rather than in the folder where they'd rather have these things.\nThese instructions could benefit from two tweaks:\n\nSkipping the cd serve step - it's extraneous here\nChanging the file paths in the torch-model-archiver command to be serve/examples/blah/blah rather than examples/blah/blah", "author": "fbbradheintz", "createdAt": "2020-04-17T22:00:58Z", "path": "README.md", "diffHunk": "@@ -2,208 +2,237 @@\n \n TorchServe is a flexible and easy to use tool for serving PyTorch models.\n \n-For full documentation, see [Model Server for PyTorch Documentation](docs/README.md).\n+**For full documentation, see [Model Server for PyTorch Documentation](docs/README.md).**\n \n ## Contents of this Document\n \n * [Install TorchServe](#install-torchserve)\n-* [Quick Start with docker](#quick-start-with-docker)\n-* [Quick Start for local environment](#quick-start-guide-for-local-environment)\n * [Serve a Model](#serve-a-model)\n-* [Other Features](#other-features)\n+* [Quick start with docker](#quick-start-with-docker)\n * [Contributing](#contributing)\n \n ## Install TorchServe\n \n-## Quick Start with docker\n+Conda instructions are provided in more detail, but you may also use `pip` and `virtualenv` if that is your preference.\n+**Note:** Java 11 is required. Instructions for installing Java 11 for Ubuntu or macOS are provided in the [Install with Conda](#install-with-conda) section.\n \n-### Start TorchServe using docker image\n+### Install with pip\n+To use `pip` to install TorchServe and the model archiver:\n \n-#### Prerequisites\n-\n-* docker - Refer [official docker installation guide](https://docs.docker.com/install/)\n-* git    - Refer [official git set-up guide](https://help.github.com/en/github/getting-started-with-github/set-up-git)\n-\n-#### Building docker image\n-\n-```bash\n-git clone https://github.com/pytorch/serve.git\n-cd serve\n-./build_image.sh\n ```\n-\n-The above command builds the TorchServe image for CPU device with `master` branch\n-\n-To create image for specific branch use following command :\n-```bash\n-./build_image.sh -b <branch_name>\n+pip install torchserve torch-model-archiver\n ```\n \n-To create image for GPU device use following command :\n-```bash\n-./build_image.sh --gpu\n-```\n-\n-To create image for GPU device with specific branch use following command :\n-```bash\n-./build_image.sh -b <branch_name> --gpu\n-```\n-\n-**Running docker image and starting TorchServe inside container with pre-registered resnet-18 image classification model**\n-\n-```bash\n-./start.sh\n-```\n-\n-**For pre-trained and pre-packaged models-archives refer [TorchServe model zoo](docs/model_zoo.md)**\n-**For managing models with TorchServe refer [management api documentation](docs/management_api.md)**\n-**For running inference on registered models with TorchServe refer [inference api documentation](docs/inference_api.md)**\n-\n-## Quick Start for local environment\n-\n-### Prerequisites\n-\n-Before proceeding further with this document, make sure you have the following prerequisites.\n-\n-1. Ubuntu, CentOS, or macOS. Windows support is experimental. The following instructions will focus on Linux and macOS only.\n-1. Python     - TorchServe requires python to run the workers.\n-1. pip        - Pip is a python package management system.\n-1. Java 11    - TorchServe requires Java 11 to start. You have the following options for installing Java 11:\n-\n-    For Ubuntu:\n+### Install with Conda\n+_Ubuntu_\n \n+1. Install Java 11\n     ```bash\n     sudo apt-get install openjdk-11-jdk\n     ```\n-\n-    For CentOS:\n-\n+1. Install Conda (https://docs.conda.io/projects/conda/en/latest/user-guide/install/linux.html)\n+1. Create an environment and install torchserve and torch-model-archiver\n+    ```bash\n+    conda create --name torchserve torchserve torch-model-archiver -c pytorch\n+    ```\n+1. Activate the environment\n     ```bash\n-    openjdk-11-jdk\n-    sudo yum install java-11-openjdk\n+    source activate torchserve\n     ```\n \n-    For macOS\n+_macOS_\n \n+1. Install Java 11\n     ```bash\n     brew tap AdoptOpenJDK/openjdk\n     brew cask install adoptopenjdk11\n     ```\n+1. Install Conda (https://docs.conda.io/projects/conda/en/latest/user-guide/install/linux.html)\n+1. Create an environment and install torchserve and torch-model-archiver\n+    ```bash\n+    conda create --name torchserve torchserve torch-model-archiver -c pytorch\n+    ```\n+1. Activate the environment\n+    ```bash\n+    source activate torchserve\n+    ```\n \n-### Installing TorchServe with pip\n+Now you are ready to [package and serve models with TorchServe](#serve-a-model).\n \n-#### Setup\n+### Install TorchServe for development\n \n-**Step 1:** Setup a Virtual Environment\n+If you plan to develop with TorchServe and change some of the source code, install it from source code and make your changes executable with this command:\n \n-We recommend installing and running TorchServe in a virtual environment. It's a good practice to run and install all of the Python dependencies in virtual environments. This will provide isolation of the dependencies and ease dependency management.\n+```bash\n+pip install -e .\n+```\n \n-* **Use Virtualenv** : This is used to create virtual Python environments. You may install and activate a virtualenv for Python 3.7 as follows:\n+* To develop with torch-model-archiver:\n \n ```bash\n-pip install virtualenv\n+cd serve/model-archiver\n+pip install -e .\n ```\n \n-Then create a virtual environment:\n+To upgrade TorchServe or model archiver from source code and make changes executable, run:\n \n ```bash\n-# Assuming we want to run python3.7 in /usr/local/bin/python3.7\n-virtualenv -p /usr/local/bin/python3.7 /tmp/pyenv3\n-# Enter this virtual environment as follows\n-source /tmp/pyenv3/bin/activate\n+pip install -U -e .\n ```\n \n-Refer to the [Virtualenv documentation](https://virtualenv.pypa.io/en/stable/) for further information.\n+For information about the model archiver, see [detailed documentation](model-archiver/README.md).\n+\n+## Serve a model\n \n-* **Use Anaconda** : This is package, dependency and environment manager. You may download and install Anaconda as follows :\n-[Download anaconda distribution](https://www.anaconda.com/distribution/#download-section)\n+This section shows a simple example of serving a model with TorchServe. To complete this example, you must have already installed TorchServe and the model archiver.\n \n-Then create a virtual environment using conda.\n+To run this example, clone the TorchServe repository and navigate to the root of the repository:\n \n ```bash\n-conda create -n myenv\n-source activate myenv\n+git clone https://github.com/pytorch/serve.git\n+cd serve\n ```\n \n-**Step 2:** Install torch\n+Then run the following steps from the root of the repository.\n+\n+### Store a Model\n \n-TorchServe won't install the PyTorch engine by default. If it isn't already installed in your virtual environment, you must install the PyTorch pip packages.\n+To serve a model with TorchServe, first archive the model as a MAR file. You can use the model archiver to package a model.\n+You can also create model stores to store your archived models.\n \n-* For virtualenv\n+The following code gets a trained model, archives the model by using the model archiver, and then stores the model in a model store.\n \n ```bash\n-#For CPU/GPU\n-pip install torch torchvision torchtext\n+wget https://download.pytorch.org/models/densenet161-8d451a50.pth\n+torch-model-archiver --model-name densenet161 --version 1.0 --model-file examples/image_classifier/densenet_161/model.py --serialized-file densenet161-8d451a50.pth --extra-files examples/image_classifier/index_to_name.json --handler image_classifier", "originalCommit": "aa074d3c61c64d8a23c83cafb9a5cfeba7f6709b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDU4MzY0Mw==", "url": "https://github.com/pytorch/serve/pull/212#discussion_r410583643", "bodyText": "Ya, not a fan of this flow really. Will update.", "author": "aaronmarkham", "createdAt": "2020-04-18T03:15:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ5MDg1NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ5NDU3Ng==", "url": "https://github.com/pytorch/serve/pull/212#discussion_r410494576", "bodyText": "Two things:\n\nThere's a weird comma in there\nEveryplace else, we talk about making \"custom handlers\" - the model handler code is the custom part that interfaces with TorchServe. Do we want to change the \"custom service\" verbiage to \"custom handler\"?", "author": "fbbradheintz", "createdAt": "2020-04-17T22:12:20Z", "path": "docs/custom_service.md", "diffHunk": "@@ -9,16 +9,16 @@\n \n ## Introduction\n \n-A custom service , is the code that is packaged into model archive, that is executed by Model Server for PyTorch (TorchServe). \n+A custom service , is the code that is packaged into model archive, that is executed by Model Server for PyTorch (TorchServe).", "originalCommit": "aa074d3c61c64d8a23c83cafb9a5cfeba7f6709b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDcyMTU1Nw==", "url": "https://github.com/pytorch/serve/pull/212#discussion_r410721557", "bodyText": "I fixed the comma, but swapping custom service out is too big of a change. If someone wants to go for changing all the py files where custom service is used, then it should be a separate PR, and probably not just before launch.", "author": "aaronmarkham", "createdAt": "2020-04-18T16:49:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ5NDU3Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ5NTUyMw==", "url": "https://github.com/pytorch/serve/pull/212#discussion_r410495523", "bodyText": "Was there meant to be a link associated with \"[mar]\"?", "author": "fbbradheintz", "createdAt": "2020-04-17T22:15:29Z", "path": "examples/README.md", "diffHunk": "@@ -1,18 +1,15 @@\n # Contents of this Document\n * [Creating mar file for an eager mode model](#creating-mar-file-for-eager-mode-model)\n-* [Creating mar file for an eager mode model](#creating-mar-file-for-torchscript-mode-model)\n-* [Serving torchvision image classification models in TorchServe](#serving-torchvision-image-classification-models-in-torchserve)\n-  * [Serving densenet161 model](#serving-torchvision-image-classification-models)\n-  * [Serving resnet18 model](#example-to-serve-resnet18-image-classification-model)\n+* [Creating mar file for torchscript mode model](#creating-mar-file-for-torchscript-mode-model)\n+* [Serving torchvision image classification models in TorchServe](#examples-torchvision-image-classification-models-in-torchserve)\n * [Serving custom model with custom service handler](#example-to-serve-a-custom-model-with-custom-service-handler)\n * [Serving text classification model](#example-to-serve-text-classification-model)\n * [Serving object detection model](#example-to-serve-object-detection-model)\n * [Serving image segmentation model](#example-to-serve-image-segmentation-model)\n-* [Serving speech synthesis model](#example-to-serve-speech-synthesis-model)\n \n # TorchServe Examples\n \n-The following are examples on how to create and serve model archives with TorchServe.\n+The following are examples on how to create and serve model archives [mar] with TorchServe.", "originalCommit": "aa074d3c61c64d8a23c83cafb9a5cfeba7f6709b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ5NjAyMg==", "url": "https://github.com/pytorch/serve/pull/212#discussion_r410496022", "bodyText": "This should be a \"model archive file\".", "author": "fbbradheintz", "createdAt": "2020-04-17T22:17:00Z", "path": "examples/image_classifier/README.md", "diffHunk": "@@ -2,15 +2,15 @@\n \n * TorchVision Image Classification Models : Download a pre-trained model state_dict for computer vision model that classifies images from the following :\n \n-  * [Image Classification with AlexNet](image_classifier/alexnet) - https://download.pytorch.org/models/alexnet-owt-4df8aa71.pth\n-  * [Image Classification with DenseNet161](image_classifier/densenet_161) - https://download.pytorch.org/models/densenet161-8d451a50.pth\n-  * [Image Classification with ResNet18](image_classifier/resnet_18) - https://download.pytorch.org/models/resnet18-5c106cde.pth\n-  * [Image Classification with SqueezeNet 1_1](image_classifier/squeezenet) - https://download.pytorch.org/models/squeezenet1_1-f364aa15.pth\n-  * [Image Classification with VGG11](image_classifier/vgg_11) - https://download.pytorch.org/models/vgg11-bbd30ac9.pth\n+  * [Image Classification with AlexNet](alexnet) - https://download.pytorch.org/models/alexnet-owt-4df8aa71.pth\n+  * [Image Classification with DenseNet161](densenet_161) - https://download.pytorch.org/models/densenet161-8d451a50.pth\n+  * [Image Classification with ResNet18](resnet_18) - https://download.pytorch.org/models/resnet18-5c106cde.pth\n+  * [Image Classification with SqueezeNet 1_1](squeezenet) - https://download.pytorch.org/models/squeezenet1_1-f364aa15.pth\n+  * [Image Classification with VGG11](vgg_11) - https://download.pytorch.org/models/vgg11-bbd30ac9.pth\n \n * Create a model architecture file (model-file) based on selected model or use the sample provided with above examples.", "originalCommit": "aa074d3c61c64d8a23c83cafb9a5cfeba7f6709b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "ffa1d9c0a0cf0825a43b11de776ef34982f69fca", "url": "https://github.com/pytorch/serve/commit/ffa1d9c0a0cf0825a43b11de776ef34982f69fca", "message": "resolve feedback; fix formatting issues", "committedDate": "2020-04-18T17:33:25Z", "type": "commit"}, {"oid": "0c0869a691408410f2319acee9e04b8a9d066644", "url": "https://github.com/pytorch/serve/commit/0c0869a691408410f2319acee9e04b8a9d066644", "message": "Merge pull request #214 from aaronmarkham/0.1_docs\n\nresolve feedback; fix formatting issues", "committedDate": "2020-04-18T17:35:23Z", "type": "commit"}, {"oid": "930b8bb3f0cbc95e8362d5111ee27166929e27e5", "url": "https://github.com/pytorch/serve/commit/930b8bb3f0cbc95e8362d5111ee27166929e27e5", "message": "fixed broken lins", "committedDate": "2020-04-20T16:36:19Z", "type": "commit"}, {"oid": "31caf208ec9e93293ffef4e6f90761ccfdeaca96", "url": "https://github.com/pytorch/serve/commit/31caf208ec9e93293ffef4e6f90761ccfdeaca96", "message": "Corrected examples doc", "committedDate": "2020-04-20T16:36:19Z", "type": "commit"}, {"oid": "22e00fb79d38aaf5efab1abe36063ddbca5f7708", "url": "https://github.com/pytorch/serve/commit/22e00fb79d38aaf5efab1abe36063ddbca5f7708", "message": "direct link to image classifier instead of individual model", "committedDate": "2020-04-20T16:36:19Z", "type": "commit"}, {"oid": "5a9854038d75302ee004854c3e57dd3ff671b240", "url": "https://github.com/pytorch/serve/commit/5a9854038d75302ee004854c3e57dd3ff671b240", "message": "Update README.md", "committedDate": "2020-04-20T16:36:19Z", "type": "commit"}, {"oid": "f2b2f43b29e7a7111ebd5ba85e83815a2fbb4fc5", "url": "https://github.com/pytorch/serve/commit/f2b2f43b29e7a7111ebd5ba85e83815a2fbb4fc5", "message": "Update README.md", "committedDate": "2020-04-20T16:36:19Z", "type": "commit"}, {"oid": "a273005801267b548e70536033db630c4dbcaace", "url": "https://github.com/pytorch/serve/commit/a273005801267b548e70536033db630c4dbcaace", "message": "documentation: edited main README.md, fixed links in docs/README.md, and removed redundant docs/quick_start.md topic", "committedDate": "2020-04-20T16:36:19Z", "type": "commit"}, {"oid": "3521183043fb2374e0343588232871d1791c9683", "url": "https://github.com/pytorch/serve/commit/3521183043fb2374e0343588232871d1791c9683", "message": "documentation: added clone repo info to serve quick start example on README.md", "committedDate": "2020-04-20T16:36:19Z", "type": "commit"}, {"oid": "421276d423d40ef483ed4fb4b329d1b4c931bea6", "url": "https://github.com/pytorch/serve/commit/421276d423d40ef483ed4fb4b329d1b4c931bea6", "message": "fixed minor doc issues found during testing", "committedDate": "2020-04-20T16:37:15Z", "type": "commit"}, {"oid": "a885fc868d10140db6982955b5b2f83e67c65a04", "url": "https://github.com/pytorch/serve/commit/a885fc868d10140db6982955b5b2f83e67c65a04", "message": "documentation: removed mention of CentOS from README.md", "committedDate": "2020-04-20T16:37:32Z", "type": "commit"}, {"oid": "210ba53573948ab122405e7ae6890f2044ab08b3", "url": "https://github.com/pytorch/serve/commit/210ba53573948ab122405e7ae6890f2044ab08b3", "message": "revert readme changes", "committedDate": "2020-04-20T16:37:44Z", "type": "commit"}, {"oid": "20b084016b7cd16c6be2880ea6ea8f2d1f788fb9", "url": "https://github.com/pytorch/serve/commit/20b084016b7cd16c6be2880ea6ea8f2d1f788fb9", "message": "simply install instructions; clarify Docker quickstart", "committedDate": "2020-04-20T16:37:57Z", "type": "commit"}, {"oid": "13f86af0ba810aaca0281e8835662253220a7c38", "url": "https://github.com/pytorch/serve/commit/13f86af0ba810aaca0281e8835662253220a7c38", "message": "add pip instructions and java note", "committedDate": "2020-04-20T16:37:57Z", "type": "commit"}, {"oid": "42d9d73f85936c19d9021921013aa6b9c711263e", "url": "https://github.com/pytorch/serve/commit/42d9d73f85936c19d9021921013aa6b9c711263e", "message": "fix bullets", "committedDate": "2020-04-20T16:37:57Z", "type": "commit"}, {"oid": "80e809ba94ea3fe9d1319e6edf446fefc12625b4", "url": "https://github.com/pytorch/serve/commit/80e809ba94ea3fe9d1319e6edf446fefc12625b4", "message": "change static links to relative", "committedDate": "2020-04-20T16:37:57Z", "type": "commit"}, {"oid": "b74b981b061eae9db5edc947e0e1b740922a1620", "url": "https://github.com/pytorch/serve/commit/b74b981b061eae9db5edc947e0e1b740922a1620", "message": "resolve feedback; fix formatting issues", "committedDate": "2020-04-20T16:37:57Z", "type": "commit"}, {"oid": "4d6f68bc0fc09d20df73b728a674189509fc9935", "url": "https://github.com/pytorch/serve/commit/4d6f68bc0fc09d20df73b728a674189509fc9935", "message": "Merge pull request #227 from aaronmarkham/0.1_docs\n\n0.1 docs", "committedDate": "2020-04-20T16:40:20Z", "type": "commit"}, {"oid": "f3835f946ac5f199a69edc8ee4dfe1b055acd2da", "url": "https://github.com/pytorch/serve/commit/f3835f946ac5f199a69edc8ee4dfe1b055acd2da", "message": "fixed broken lins", "committedDate": "2020-04-20T17:25:57Z", "type": "commit"}, {"oid": "9918d90ddf05285fcdb672d89c404fbda50ba591", "url": "https://github.com/pytorch/serve/commit/9918d90ddf05285fcdb672d89c404fbda50ba591", "message": "Corrected examples doc", "committedDate": "2020-04-20T17:25:57Z", "type": "commit"}, {"oid": "760b07b4875bd7c8b8529cd38ff2fe47a0a10816", "url": "https://github.com/pytorch/serve/commit/760b07b4875bd7c8b8529cd38ff2fe47a0a10816", "message": "direct link to image classifier instead of individual model", "committedDate": "2020-04-20T17:25:57Z", "type": "commit"}, {"oid": "ad3a2ca9950bd2f904eb693fb3ddccb2eec15d08", "url": "https://github.com/pytorch/serve/commit/ad3a2ca9950bd2f904eb693fb3ddccb2eec15d08", "message": "Update README.md", "committedDate": "2020-04-20T17:25:57Z", "type": "commit"}, {"oid": "1ff4d44de6b344c71c900cce517375493d4c453d", "url": "https://github.com/pytorch/serve/commit/1ff4d44de6b344c71c900cce517375493d4c453d", "message": "Update README.md", "committedDate": "2020-04-20T17:25:57Z", "type": "commit"}, {"oid": "2281d23d9358004fbe0a358aee444c5f3a4695de", "url": "https://github.com/pytorch/serve/commit/2281d23d9358004fbe0a358aee444c5f3a4695de", "message": "documentation: edited main README.md, fixed links in docs/README.md, and removed redundant docs/quick_start.md topic", "committedDate": "2020-04-20T17:25:57Z", "type": "commit"}, {"oid": "222040d1a043fc4c96c84a8f99ddb7b19572b761", "url": "https://github.com/pytorch/serve/commit/222040d1a043fc4c96c84a8f99ddb7b19572b761", "message": "documentation: added clone repo info to serve quick start example on README.md", "committedDate": "2020-04-20T17:25:57Z", "type": "commit"}, {"oid": "a70d0681c4c7dfa4b80b6095d24707a754c53757", "url": "https://github.com/pytorch/serve/commit/a70d0681c4c7dfa4b80b6095d24707a754c53757", "message": "fixed minor doc issues found during testing", "committedDate": "2020-04-20T17:25:57Z", "type": "commit"}, {"oid": "cddd5cf4d8e2820d6d247aaaaf0cbaa23ef9c5b0", "url": "https://github.com/pytorch/serve/commit/cddd5cf4d8e2820d6d247aaaaf0cbaa23ef9c5b0", "message": "documentation: removed mention of CentOS from README.md", "committedDate": "2020-04-20T17:25:57Z", "type": "commit"}, {"oid": "d020a3b84c44092cf3f07553ae4640472c532d99", "url": "https://github.com/pytorch/serve/commit/d020a3b84c44092cf3f07553ae4640472c532d99", "message": "revert readme changes", "committedDate": "2020-04-20T17:25:57Z", "type": "commit"}, {"oid": "82d3ace994e163abb3345f7c1c9b6318763ab151", "url": "https://github.com/pytorch/serve/commit/82d3ace994e163abb3345f7c1c9b6318763ab151", "message": "simply install instructions; clarify Docker quickstart", "committedDate": "2020-04-20T17:25:57Z", "type": "commit"}, {"oid": "631f07b5e425da8eb2ac629380dd9a8233fd245b", "url": "https://github.com/pytorch/serve/commit/631f07b5e425da8eb2ac629380dd9a8233fd245b", "message": "add pip instructions and java note", "committedDate": "2020-04-20T17:25:57Z", "type": "commit"}, {"oid": "7b69d1da8bdd28d0819f9aa5d0e71990750f0bca", "url": "https://github.com/pytorch/serve/commit/7b69d1da8bdd28d0819f9aa5d0e71990750f0bca", "message": "fix bullets", "committedDate": "2020-04-20T17:25:57Z", "type": "commit"}, {"oid": "a2b6125ac75fe4bb2454345688754906f49260c9", "url": "https://github.com/pytorch/serve/commit/a2b6125ac75fe4bb2454345688754906f49260c9", "message": "change static links to relative", "committedDate": "2020-04-20T17:25:57Z", "type": "commit"}, {"oid": "74f205a71de476b42ddbf41ec8a45346402fb468", "url": "https://github.com/pytorch/serve/commit/74f205a71de476b42ddbf41ec8a45346402fb468", "message": "resolve feedback; fix formatting issues", "committedDate": "2020-04-20T17:25:57Z", "type": "commit"}, {"oid": "0335cd37f2fedc6c63b706b3d62840d03a8b3afb", "url": "https://github.com/pytorch/serve/commit/0335cd37f2fedc6c63b706b3d62840d03a8b3afb", "message": "Merge pull request #229 from aaronmarkham/0.1_docs\n\n0.1 docs", "committedDate": "2020-04-20T17:27:14Z", "type": "commit"}, {"oid": "97c4950d8444e15daf83be1ae3adbbef872a7322", "url": "https://github.com/pytorch/serve/commit/97c4950d8444e15daf83be1ae3adbbef872a7322", "message": "Improve SSL instructions usage\n\nThe examples with SSL usage section show you how to\ncreate a self-signed ceritficate. If the user follows\nthis then they should be passing appropriate flags to\ntheir http client. Show the correct flags for curl.", "committedDate": "2020-04-20T22:34:03Z", "type": "commit"}, {"oid": "dbe9d9a536fd0f445cb41570bb51cb23e3330eb2", "url": "https://github.com/pytorch/serve/commit/dbe9d9a536fd0f445cb41570bb51cb23e3330eb2", "message": "Merge pull request #231 from pytorch/ssl_usage\n\nImprove SSL instructions usage", "committedDate": "2020-04-20T22:42:03Z", "type": "commit"}]}