{"pr_number": 1002, "pr_title": "Add option to download MTAR from url", "pr_createdAt": "2020-12-01T11:00:13Z", "pr_url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/1002", "timeline": [{"oid": "4e628f4c2d2de898f4a30903b17b78272b0eee1f", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/4e628f4c2d2de898f4a30903b17b78272b0eee1f", "message": "Add option to download MTAR from url\n\nLMCROSSITXSADEPLOY-1981", "committedDate": "2020-12-10T13:35:25Z", "type": "forcePushed"}, {"oid": "9031a8b6685ab6f7ecc0a3631038e2cb473715e4", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/9031a8b6685ab6f7ecc0a3631038e2cb473715e4", "message": "Add option to download MTAR from url\n\nLMCROSSITXSADEPLOY-1981", "committedDate": "2020-12-15T11:17:49Z", "type": "forcePushed"}, {"oid": "ed270f7c4b2dc3e306b804bd3387184fa1e7d10a", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/ed270f7c4b2dc3e306b804bd3387184fa1e7d10a", "message": "Add option to download MTAR from url\n\nLMCROSSITXSADEPLOY-1981", "committedDate": "2021-01-12T13:58:36Z", "type": "forcePushed"}, {"oid": "baaa2537536362c9e090e63b0cecec0452d51853", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/baaa2537536362c9e090e63b0cecec0452d51853", "message": "Add option to download MTAR from url\n\nLMCROSSITXSADEPLOY-1981", "committedDate": "2021-01-15T17:11:15Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTg3MjI3NA==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/1002#discussion_r561872274", "bodyText": "Add the URL to the exception and make sure that the response contains the error message, so that users will be able to see what went wrong.", "author": "nictas", "createdAt": "2021-01-21T13:17:35Z", "path": "multiapps-controller-web/src/main/java/org/cloudfoundry/multiapps/controller/web/api/impl/FilesApiServiceImpl.java", "diffHunk": "@@ -138,4 +154,55 @@ private FileMetadata parseFileEntry(FileEntry fileEntry) {\n                                     .namespace(fileEntry.getNamespace())\n                                     .build();\n     }\n+\n+    private FileEntry uploadFileFromUrl(String spaceGuid, String namespace, String mtarEndpoint) throws FileStorageException, IOException {\n+        if (!UriUtil.isValidUrl(mtarEndpoint)) {\n+            throw new SLException(\"Invalid URL\");", "originalCommit": "baaa2537536362c9e090e63b0cecec0452d51853", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTg3MzMyMg==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/1002#discussion_r561873322", "bodyText": "Wouldn't it be better to call the method validateUrl and throw an exception if the URl is invalid, so that the error message shown to the user contains some additional details?", "author": "nictas", "createdAt": "2021-01-21T13:19:00Z", "path": "multiapps-controller-core/src/main/java/org/cloudfoundry/multiapps/controller/core/util/UriUtil.java", "diffHunk": "@@ -46,4 +48,14 @@ public static String prettyPrintRoutes(Set<CloudRouteSummary> routes) {\n                      .map(CloudRouteSummary::toUriString)\n                      .collect(Collectors.joining(\", \"));\n     }\n+\n+    public static boolean isValidUrl(String url) {", "originalCommit": "baaa2537536362c9e090e63b0cecec0452d51853", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTg3OTk5OA==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/1002#discussion_r561879998", "bodyText": "Not sure if this is a good idea. RestUtil is more of an internal class for the client facade. It'd be nice to have the option of changing it whenever we want, without having to touch the deploy-service codebase.", "author": "nictas", "createdAt": "2021-01-21T13:29:00Z", "path": "multiapps-controller-web/src/main/java/org/cloudfoundry/multiapps/controller/web/api/impl/FilesApiServiceImpl.java", "diffHunk": "@@ -138,4 +154,55 @@ private FileMetadata parseFileEntry(FileEntry fileEntry) {\n                                     .namespace(fileEntry.getNamespace())\n                                     .build();\n     }\n+\n+    private FileEntry uploadFileFromUrl(String spaceGuid, String namespace, String mtarEndpoint) throws FileStorageException, IOException {\n+        if (!UriUtil.isValidUrl(mtarEndpoint)) {\n+            throw new SLException(\"Invalid URL\");\n+        }\n+        String decodedUrl = URLDecoder.decode(mtarEndpoint, StandardCharsets.UTF_8);\n+        WebClient client = new RestUtil().createWebClient(false);", "originalCommit": "baaa2537536362c9e090e63b0cecec0452d51853", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjUwNzc0MA==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/1002#discussion_r562507740", "bodyText": "Agreed.\nChanged to WebClientFactory::getWebClient() which is in the deploy-service codebase", "author": "radito3", "createdAt": "2021-01-22T09:41:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTg3OTk5OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTg4MTU0NA==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/1002#discussion_r561881544", "bodyText": "Is this the only validation for downloading a bigger MTAR than allowed? From a security PoV, the server could return a Content-Length header with a small value, but proceed to send an enormous MTAR.", "author": "nictas", "createdAt": "2021-01-21T13:31:23Z", "path": "multiapps-controller-web/src/main/java/org/cloudfoundry/multiapps/controller/web/api/impl/FilesApiServiceImpl.java", "diffHunk": "@@ -138,4 +154,55 @@ private FileMetadata parseFileEntry(FileEntry fileEntry) {\n                                     .namespace(fileEntry.getNamespace())\n                                     .build();\n     }\n+\n+    private FileEntry uploadFileFromUrl(String spaceGuid, String namespace, String mtarEndpoint) throws FileStorageException, IOException {\n+        if (!UriUtil.isValidUrl(mtarEndpoint)) {\n+            throw new SLException(\"Invalid URL\");\n+        }\n+        String decodedUrl = URLDecoder.decode(mtarEndpoint, StandardCharsets.UTF_8);\n+        WebClient client = new RestUtil().createWebClient(false);\n+\n+        ClientResponse response = client.get()\n+                                        .uri(decodedUrl)\n+                                        .exchange()\n+                                        .block();\n+        long fileSize = response.headers()\n+                                .contentLength()\n+                                .orElseThrow(() -> new SLException(\"MTAR endpoint did not return Content-Length header\"));\n+        long maxUploadSize = new Configuration().getMaxUploadSize();\n+        if (fileSize > maxUploadSize) {", "originalCommit": "baaa2537536362c9e090e63b0cecec0452d51853", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTkzNzE1OQ==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/1002#discussion_r565937159", "bodyText": "Added a LimitedInputStream wrapper to the content stream", "author": "radito3", "createdAt": "2021-01-28T09:22:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTg4MTU0NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTg4MzE2OQ==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/1002#discussion_r561883169", "bodyText": "When will this throw an exception? Also, isn't there anything here that would do the job:\nhttps://commons.apache.org/proper/commons-io/apidocs/org/apache/commons/io/FilenameUtils.html", "author": "nictas", "createdAt": "2021-01-21T13:34:07Z", "path": "multiapps-controller-core/src/main/java/org/cloudfoundry/multiapps/controller/core/util/FileUtils.java", "diffHunk": "@@ -72,6 +72,16 @@ public static void cleanUp(Path filePath, Logger logger) {\n         }\n     }\n \n+    public static boolean isFilenameValid(String file) {\n+        File f = new File(file);\n+        try {\n+            f.getCanonicalPath();", "originalCommit": "baaa2537536362c9e090e63b0cecec0452d51853", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTkzODUyMw==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/1002#discussion_r565938523", "bodyText": "Changed to FilenameUtils::validatePath", "author": "radito3", "createdAt": "2021-01-28T09:25:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTg4MzE2OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTg4NjE4OA==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/1002#discussion_r561886188", "bodyText": "Why not:\nString[] pathFragments = new URI(uri).getPath().split(\"/\");\n// Get the last element of pathFragments", "author": "nictas", "createdAt": "2021-01-21T13:38:34Z", "path": "multiapps-controller-web/src/main/java/org/cloudfoundry/multiapps/controller/web/api/impl/FilesApiServiceImpl.java", "diffHunk": "@@ -138,4 +154,55 @@ private FileMetadata parseFileEntry(FileEntry fileEntry) {\n                                     .namespace(fileEntry.getNamespace())\n                                     .build();\n     }\n+\n+    private FileEntry uploadFileFromUrl(String spaceGuid, String namespace, String mtarEndpoint) throws FileStorageException, IOException {\n+        if (!UriUtil.isValidUrl(mtarEndpoint)) {\n+            throw new SLException(\"Invalid URL\");\n+        }\n+        String decodedUrl = URLDecoder.decode(mtarEndpoint, StandardCharsets.UTF_8);\n+        WebClient client = new RestUtil().createWebClient(false);\n+\n+        ClientResponse response = client.get()\n+                                        .uri(decodedUrl)\n+                                        .exchange()\n+                                        .block();\n+        long fileSize = response.headers()\n+                                .contentLength()\n+                                .orElseThrow(() -> new SLException(\"MTAR endpoint did not return Content-Length header\"));\n+        long maxUploadSize = new Configuration().getMaxUploadSize();\n+        if (fileSize > maxUploadSize) {\n+            throw new SLException(MessageFormat.format(Messages.MAX_UPLOAD_SIZE_EXCEEDED, maxUploadSize));\n+        }\n+\n+        String fileName = extractFileName(decodedUrl);\n+        try (InputStream content = response.body(this::extractContent)) {\n+            return fileService.addFile(spaceGuid, namespace, fileName, content, fileSize);\n+        }\n+    }\n+\n+    private String extractFileName(String url) {\n+        int fragmentIdx = url.indexOf('#');", "originalCommit": "baaa2537536362c9e090e63b0cecec0452d51853", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzI4OTAzNg==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/1002#discussion_r563289036", "bodyText": "Done as suggested", "author": "radito3", "createdAt": "2021-01-24T12:58:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTg4NjE4OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTg4NzE4OA==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/1002#discussion_r561887188", "bodyText": "The context doesn't seem to be used here.", "author": "nictas", "createdAt": "2021-01-21T13:40:05Z", "path": "multiapps-controller-web/src/main/java/org/cloudfoundry/multiapps/controller/web/api/impl/FilesApiServiceImpl.java", "diffHunk": "@@ -138,4 +154,55 @@ private FileMetadata parseFileEntry(FileEntry fileEntry) {\n                                     .namespace(fileEntry.getNamespace())\n                                     .build();\n     }\n+\n+    private FileEntry uploadFileFromUrl(String spaceGuid, String namespace, String mtarEndpoint) throws FileStorageException, IOException {\n+        if (!UriUtil.isValidUrl(mtarEndpoint)) {\n+            throw new SLException(\"Invalid URL\");\n+        }\n+        String decodedUrl = URLDecoder.decode(mtarEndpoint, StandardCharsets.UTF_8);\n+        WebClient client = new RestUtil().createWebClient(false);\n+\n+        ClientResponse response = client.get()\n+                                        .uri(decodedUrl)\n+                                        .exchange()\n+                                        .block();\n+        long fileSize = response.headers()\n+                                .contentLength()\n+                                .orElseThrow(() -> new SLException(\"MTAR endpoint did not return Content-Length header\"));\n+        long maxUploadSize = new Configuration().getMaxUploadSize();\n+        if (fileSize > maxUploadSize) {\n+            throw new SLException(MessageFormat.format(Messages.MAX_UPLOAD_SIZE_EXCEEDED, maxUploadSize));\n+        }\n+\n+        String fileName = extractFileName(decodedUrl);\n+        try (InputStream content = response.body(this::extractContent)) {\n+            return fileService.addFile(spaceGuid, namespace, fileName, content, fileSize);\n+        }\n+    }\n+\n+    private String extractFileName(String url) {\n+        int fragmentIdx = url.indexOf('#');\n+        if (fragmentIdx != -1) {\n+            url = url.substring(0, fragmentIdx);\n+        }\n+        int queryIdx = url.indexOf('?');\n+        if (queryIdx != -1) {\n+            url = url.substring(0, queryIdx);\n+        }\n+        int startIdx = url.lastIndexOf('/') + 1;\n+        String fileName = url.substring(startIdx);\n+        if (!FileUtils.isFilenameValid(fileName)) {\n+            throw new SLException(\"Invalid MTAR name\");\n+        }\n+        return fileName;\n+    }\n+\n+    private InputStream extractContent(ReactiveHttpInputMessage httpResponse, BodyExtractor.Context context) {", "originalCommit": "baaa2537536362c9e090e63b0cecec0452d51853", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTg5MTgyNQ==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/1002#discussion_r561891825", "bodyText": "Yes, but we need it to use this method as a method reference", "author": "radito3", "createdAt": "2021-01-21T13:46:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTg4NzE4OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTg4ODM0NA==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/1002#discussion_r561888344", "bodyText": "I think this will create a SequenceInputStream from multiple ByteArrayInputStreams, which means that the entire file content will be stored in-memory. Can you check, please? If I'm right, find another way to download the file.", "author": "nictas", "createdAt": "2021-01-21T13:41:54Z", "path": "multiapps-controller-web/src/main/java/org/cloudfoundry/multiapps/controller/web/api/impl/FilesApiServiceImpl.java", "diffHunk": "@@ -138,4 +154,55 @@ private FileMetadata parseFileEntry(FileEntry fileEntry) {\n                                     .namespace(fileEntry.getNamespace())\n                                     .build();\n     }\n+\n+    private FileEntry uploadFileFromUrl(String spaceGuid, String namespace, String mtarEndpoint) throws FileStorageException, IOException {\n+        if (!UriUtil.isValidUrl(mtarEndpoint)) {\n+            throw new SLException(\"Invalid URL\");\n+        }\n+        String decodedUrl = URLDecoder.decode(mtarEndpoint, StandardCharsets.UTF_8);\n+        WebClient client = new RestUtil().createWebClient(false);\n+\n+        ClientResponse response = client.get()\n+                                        .uri(decodedUrl)\n+                                        .exchange()\n+                                        .block();\n+        long fileSize = response.headers()\n+                                .contentLength()\n+                                .orElseThrow(() -> new SLException(\"MTAR endpoint did not return Content-Length header\"));\n+        long maxUploadSize = new Configuration().getMaxUploadSize();\n+        if (fileSize > maxUploadSize) {\n+            throw new SLException(MessageFormat.format(Messages.MAX_UPLOAD_SIZE_EXCEEDED, maxUploadSize));\n+        }\n+\n+        String fileName = extractFileName(decodedUrl);\n+        try (InputStream content = response.body(this::extractContent)) {\n+            return fileService.addFile(spaceGuid, namespace, fileName, content, fileSize);\n+        }\n+    }\n+\n+    private String extractFileName(String url) {\n+        int fragmentIdx = url.indexOf('#');\n+        if (fragmentIdx != -1) {\n+            url = url.substring(0, fragmentIdx);\n+        }\n+        int queryIdx = url.indexOf('?');\n+        if (queryIdx != -1) {\n+            url = url.substring(0, queryIdx);\n+        }\n+        int startIdx = url.lastIndexOf('/') + 1;\n+        String fileName = url.substring(startIdx);\n+        if (!FileUtils.isFilenameValid(fileName)) {\n+            throw new SLException(\"Invalid MTAR name\");\n+        }\n+        return fileName;\n+    }\n+\n+    private InputStream extractContent(ReactiveHttpInputMessage httpResponse, BodyExtractor.Context context) {\n+        return httpResponse.getBody()\n+                           .map(dataBuffer -> dataBuffer.asInputStream(true))\n+                           .collectList()\n+                           .map(list -> new SequenceInputStream(Collections.enumeration(list)))", "originalCommit": "baaa2537536362c9e090e63b0cecec0452d51853", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "faa14c44637e0f0804bafb2384c17218ff6f5bc1", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/faa14c44637e0f0804bafb2384c17218ff6f5bc1", "message": "Add option to download MTAR from url\n\nLMCROSSITXSADEPLOY-1981", "committedDate": "2021-01-22T12:31:30Z", "type": "forcePushed"}, {"oid": "53bf1614562e55c8a3bde34f348bacb47adde7b7", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/53bf1614562e55c8a3bde34f348bacb47adde7b7", "message": "Add option to download MTAR from url\n\nLMCROSSITXSADEPLOY-1981", "committedDate": "2021-01-28T09:24:15Z", "type": "forcePushed"}, {"oid": "39ec22e184282b85f435967e4df4b8370b877ed3", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/39ec22e184282b85f435967e4df4b8370b877ed3", "message": "Add option to download MTAR from url\n\nLMCROSSITXSADEPLOY-1981", "committedDate": "2021-01-29T13:24:13Z", "type": "forcePushed"}, {"oid": "68e691f5efc7dbda5af12614bb2abe2fd3fd28c5", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/68e691f5efc7dbda5af12614bb2abe2fd3fd28c5", "message": "Add option to download MTAR from url\n\nLMCROSSITXSADEPLOY-1981", "committedDate": "2021-02-01T13:22:46Z", "type": "forcePushed"}, {"oid": "a49596462e0dc628016d178a63d661c795085bb8", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/a49596462e0dc628016d178a63d661c795085bb8", "message": "Add option to download files from url\n\nLMCROSSITXSADEPLOY-1981", "committedDate": "2021-02-02T10:02:26Z", "type": "forcePushed"}, {"oid": "6303daf21b30b97340919f83a2ebef66ffc7487f", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/6303daf21b30b97340919f83a2ebef66ffc7487f", "message": "Add option to download files from url\n\nLMCROSSITXSADEPLOY-1981", "committedDate": "2021-02-02T13:40:17Z", "type": "commit"}, {"oid": "6303daf21b30b97340919f83a2ebef66ffc7487f", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/6303daf21b30b97340919f83a2ebef66ffc7487f", "message": "Add option to download files from url\n\nLMCROSSITXSADEPLOY-1981", "committedDate": "2021-02-02T13:40:17Z", "type": "forcePushed"}]}