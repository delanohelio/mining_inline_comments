{"pr_number": 888, "pr_title": "Fix cleanup of processes in Flowable tables", "pr_createdAt": "2020-06-30T12:33:01Z", "pr_url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/888", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY2MTExNw==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/888#discussion_r447661117", "bodyText": "I think this will throw an exception if there's no process with this ID. Also rename the variable operationId to processId.", "author": "nictas", "createdAt": "2020-06-30T12:58:13Z", "path": "com.sap.cloud.lm.sl.cf.process/src/main/java/com/sap/cloud/lm/sl/cf/process/jobs/AbortedOperationsCleaner.java", "diffHunk": "@@ -56,18 +51,7 @@ public void execute(Date expirationTime) {\n     }\n \n     private boolean isInActiveState(String operationId) {\n-        Operation operation = getOperation(operationId);\n-        return operation != null && operation.getState() == null;\n-    }\n-\n-    private Operation getOperation(String operationId) {\n-        try {\n-            return operationService.createQuery()\n-                                   .processId(operationId)\n-                                   .singleResult();\n-        } catch (NoResultException e) {\n-            return null;\n-        }\n+        return flowableFacade.getProcessInstance(operationId) != null;", "originalCommit": "6691e3424550e4985c3e75557076c2b4cd397978", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc1NzQ0Mw==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/888#discussion_r447757443", "bodyText": "I had checked code in flowable and it will throw exception if result from sql query is more than 1 entry. If the result is empty, it will return null.", "author": "theghost5800", "createdAt": "2020-06-30T15:06:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY2MTExNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY2MjQ1OA==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/888#discussion_r447662458", "bodyText": "Flowable uses \"process\" as a term and not \"operation\". Operations exist only in our codebase and we're not using the OperationService here, so the current name is a little confusing and misleading. I suggest renaming this class to FlowableDataCleaner, which will be consistent with FlowableHistoricDataCleaner.", "author": "nictas", "createdAt": "2020-06-30T13:00:18Z", "path": "com.sap.cloud.lm.sl.cf.process/src/main/java/com/sap/cloud/lm/sl/cf/process/jobs/FlowableOperationsCleaner.java", "diffHunk": "@@ -0,0 +1,51 @@\n+package com.sap.cloud.lm.sl.cf.process.jobs;\n+\n+import java.text.MessageFormat;\n+import java.util.Date;\n+import java.util.List;\n+\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+\n+import org.flowable.engine.runtime.ProcessInstance;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.core.annotation.Order;\n+\n+import com.sap.cloud.lm.sl.cf.process.Messages;\n+import com.sap.cloud.lm.sl.cf.process.flowable.FlowableFacade;\n+import com.sap.cloud.lm.sl.cf.web.api.model.Operation;\n+\n+@Named\n+@Order(30)\n+public class FlowableOperationsCleaner implements Cleaner {", "originalCommit": "6691e3424550e4985c3e75557076c2b4cd397978", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY2NDg2NQ==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/888#discussion_r447664865", "bodyText": "Does the formatting look that bad without this comment?", "author": "nictas", "createdAt": "2020-06-30T13:04:08Z", "path": "com.sap.cloud.lm.sl.cf.process/src/test/java/com/sap/cloud/lm/sl/cf/process/jobs/FlowableOperationsCleanerTest.java", "diffHunk": "@@ -0,0 +1,68 @@\n+package com.sap.cloud.lm.sl.cf.process.jobs;\n+\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.flowable.engine.impl.persistence.entity.ExecutionEntityImpl;\n+import org.flowable.engine.runtime.ProcessInstance;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import org.mockito.Mock;\n+import org.mockito.MockitoAnnotations;\n+\n+import com.sap.cloud.lm.sl.cf.process.flowable.FlowableFacade;\n+\n+public class FlowableOperationsCleanerTest {\n+\n+    @Mock\n+    private FlowableFacade flowableFacade;\n+\n+    private FlowableOperationsCleaner flowableOperationsCleaner;\n+\n+    @BeforeEach\n+    void setUp() {\n+        MockitoAnnotations.initMocks(this);\n+        flowableOperationsCleaner = new FlowableOperationsCleaner(flowableFacade);\n+    }\n+\n+    static Stream<Arguments> testDeleteInvocation() {\n+        // @formatter:off", "originalCommit": "6691e3424550e4985c3e75557076c2b4cd397978", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc2MDM5Ng==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/888#discussion_r447760396", "bodyText": "Without formatting looks like this:\nreturn Stream.of(Arguments.of(Arrays.asList(\"process-id-1\"), 1), Arguments.of(Arrays.asList(\"process-id-1\", \"process-id-2\"), 2), Arguments.of(Collections.emptyList(), 0));", "author": "theghost5800", "createdAt": "2020-06-30T15:10:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY2NDg2NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY2NTg2Mw==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/888#discussion_r447665863", "bodyText": "Pass some real Date object here and test whether it's being passed to the Flowable facade.", "author": "nictas", "createdAt": "2020-06-30T13:05:35Z", "path": "com.sap.cloud.lm.sl.cf.process/src/test/java/com/sap/cloud/lm/sl/cf/process/jobs/FlowableOperationsCleanerTest.java", "diffHunk": "@@ -0,0 +1,68 @@\n+package com.sap.cloud.lm.sl.cf.process.jobs;\n+\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.flowable.engine.impl.persistence.entity.ExecutionEntityImpl;\n+import org.flowable.engine.runtime.ProcessInstance;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import org.mockito.Mock;\n+import org.mockito.MockitoAnnotations;\n+\n+import com.sap.cloud.lm.sl.cf.process.flowable.FlowableFacade;\n+\n+public class FlowableOperationsCleanerTest {\n+\n+    @Mock\n+    private FlowableFacade flowableFacade;\n+\n+    private FlowableOperationsCleaner flowableOperationsCleaner;\n+\n+    @BeforeEach\n+    void setUp() {\n+        MockitoAnnotations.initMocks(this);\n+        flowableOperationsCleaner = new FlowableOperationsCleaner(flowableFacade);\n+    }\n+\n+    static Stream<Arguments> testDeleteInvocation() {\n+        // @formatter:off\n+             return Stream.of(\n+                              Arguments.of(Arrays.asList(\"process-id-1\"), 1),\n+                              Arguments.of(Arrays.asList(\"process-id-1\", \"process-id-2\"), 2),\n+                              Arguments.of(Collections.emptyList(), 0)\n+             );\n+        // @formatter:on\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource\n+    void testDeleteInvocation(List<String> processIds, int deleteTimes) {\n+        prepareFlowableFacade(processIds);\n+        flowableOperationsCleaner.execute(null);", "originalCommit": "6691e3424550e4985c3e75557076c2b4cd397978", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY2NjE2OQ==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/888#discussion_r447666169", "bodyText": "Make a separate verification call for each process ID in the list.", "author": "nictas", "createdAt": "2020-06-30T13:06:05Z", "path": "com.sap.cloud.lm.sl.cf.process/src/test/java/com/sap/cloud/lm/sl/cf/process/jobs/FlowableOperationsCleanerTest.java", "diffHunk": "@@ -0,0 +1,68 @@\n+package com.sap.cloud.lm.sl.cf.process.jobs;\n+\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.flowable.engine.impl.persistence.entity.ExecutionEntityImpl;\n+import org.flowable.engine.runtime.ProcessInstance;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import org.mockito.Mock;\n+import org.mockito.MockitoAnnotations;\n+\n+import com.sap.cloud.lm.sl.cf.process.flowable.FlowableFacade;\n+\n+public class FlowableOperationsCleanerTest {\n+\n+    @Mock\n+    private FlowableFacade flowableFacade;\n+\n+    private FlowableOperationsCleaner flowableOperationsCleaner;\n+\n+    @BeforeEach\n+    void setUp() {\n+        MockitoAnnotations.initMocks(this);\n+        flowableOperationsCleaner = new FlowableOperationsCleaner(flowableFacade);\n+    }\n+\n+    static Stream<Arguments> testDeleteInvocation() {\n+        // @formatter:off\n+             return Stream.of(\n+                              Arguments.of(Arrays.asList(\"process-id-1\"), 1),\n+                              Arguments.of(Arrays.asList(\"process-id-1\", \"process-id-2\"), 2),\n+                              Arguments.of(Collections.emptyList(), 0)\n+             );\n+        // @formatter:on\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource\n+    void testDeleteInvocation(List<String> processIds, int deleteTimes) {\n+        prepareFlowableFacade(processIds);\n+        flowableOperationsCleaner.execute(null);\n+        verify(flowableFacade, times(deleteTimes)).deleteProcessInstance(anyString(), anyString());", "originalCommit": "6691e3424550e4985c3e75557076c2b4cd397978", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY2NjUyOA==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/888#discussion_r447666528", "bodyText": "Use @InjectMocks instead of creating the object \"manually\" in the setUp method.", "author": "nictas", "createdAt": "2020-06-30T13:06:35Z", "path": "com.sap.cloud.lm.sl.cf.process/src/test/java/com/sap/cloud/lm/sl/cf/process/jobs/FlowableOperationsCleanerTest.java", "diffHunk": "@@ -0,0 +1,68 @@\n+package com.sap.cloud.lm.sl.cf.process.jobs;\n+\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.flowable.engine.impl.persistence.entity.ExecutionEntityImpl;\n+import org.flowable.engine.runtime.ProcessInstance;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import org.mockito.Mock;\n+import org.mockito.MockitoAnnotations;\n+\n+import com.sap.cloud.lm.sl.cf.process.flowable.FlowableFacade;\n+\n+public class FlowableOperationsCleanerTest {\n+\n+    @Mock\n+    private FlowableFacade flowableFacade;\n+\n+    private FlowableOperationsCleaner flowableOperationsCleaner;", "originalCommit": "6691e3424550e4985c3e75557076c2b4cd397978", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY2ODExNw==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/888#discussion_r447668117", "bodyText": "Don't use the term \"operation\". Use \"process\" instead.", "author": "nictas", "createdAt": "2020-06-30T13:09:04Z", "path": "com.sap.cloud.lm.sl.cf.process/src/test/java/com/sap/cloud/lm/sl/cf/process/jobs/AbortedOperationsCleanerTest.java", "diffHunk": "@@ -80,56 +78,53 @@ public void testExecute() {\n \n     @Test\n     public void testExecuteWithMixedOperations() {\n-        prepareMocksWithOperations(Arrays.asList(createOperation(\"foo\", null), createOperation(\"bar\", Operation.State.FINISHED)));\n+        prepareMocksWithOperations(Arrays.asList(new CustomOperation(\"foo\", true), new CustomOperation(\"bar\", false)));\n \n         abortedOperationsCleaner.execute(new Date()); // Passed argument is not used.\n \n-        Mockito.verify(operationService, Mockito.times(2))\n-               .createQuery();\n+        Mockito.verify(flowableFacade, Mockito.times(2))\n+               .getProcessInstance(anyString());\n         Mockito.verify(flowableFacade)\n                .deleteProcessInstance(\"foo\", Operation.State.ABORTED.name());\n         Mockito.verify(flowableFacade, Mockito.never())\n                .deleteProcessInstance(\"bar\", Operation.State.ABORTED.name());\n     }\n \n-    private void prepareMocksWithOperations(List<Operation> operations) {\n+    private void prepareMocksWithOperations(List<CustomOperation> operations) {\n         HistoricOperationEventQuery historicOperationEventQuery = Mockito.mock(HistoricOperationEventQuery.class, Mockito.RETURNS_SELF);\n         Mockito.when(historicOperationEventQuery.list())\n                .thenReturn(createAbortedEvents(operations));\n         Mockito.when(historicOperationEventService.createQuery())\n                .thenReturn(historicOperationEventQuery);\n+        operations.stream()\n+                  .filter(operation -> operation.isActive)\n+                  .forEach(operation -> Mockito.when(flowableFacade.getProcessInstance(operation.processId))\n+                                               .thenReturn(Mockito.mock(ProcessInstance.class)));\n \n-        OperationQuery commonOperationQuery = Mockito.mock(OperationQuery.class, Mockito.RETURNS_SELF);\n-        Mockito.when(operationService.createQuery())\n-               .thenReturn(commonOperationQuery);\n-        for (Operation operation : operations) {\n-            OperationQuery operationQuery = Mockito.mock(OperationQuery.class, Mockito.RETURNS_SELF);\n-            Mockito.doReturn(operation)\n-                   .when(operationQuery)\n-                   .singleResult();\n-            Mockito.when(commonOperationQuery.processId(operation.getProcessId()))\n-                   .thenReturn(operationQuery);\n-        }\n     }\n \n-    private List<HistoricOperationEvent> createAbortedEvents(List<Operation> operations) {\n+    private List<HistoricOperationEvent> createAbortedEvents(List<CustomOperation> operations) {\n         return operations.stream()\n                          .map(this::createAbortedEvent)\n                          .collect(Collectors.toList());\n     }\n \n-    private HistoricOperationEvent createAbortedEvent(Operation operation) {\n+    private HistoricOperationEvent createAbortedEvent(CustomOperation operation) {\n         return ImmutableHistoricOperationEvent.builder()\n-                                              .processId(operation.getProcessId())\n+                                              .processId(operation.processId)\n                                               .type(EventType.ABORTED)\n                                               .build();\n     }\n \n-    private Operation createOperation(String processId, State state) {\n-        return ImmutableOperation.builder()\n-                                 .processId(processId)\n-                                 .state(state)\n-                                 .build();\n+    private class CustomOperation {", "originalCommit": "6691e3424550e4985c3e75557076c2b4cd397978", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "560de88501670e86af15705475a326ae13e2a5b9", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/560de88501670e86af15705475a326ae13e2a5b9", "message": "Fix cleanup of processes in Flowable tables\n\nChange logic for searching active operations in AbortProcessListener and\nadd new cleaner which will delete all left processes in act_ru_execution\ntable by TTL\n\nJIRA:LMCROSSITXSADEPLOY-2120", "committedDate": "2020-07-01T07:34:13Z", "type": "commit"}, {"oid": "560de88501670e86af15705475a326ae13e2a5b9", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/560de88501670e86af15705475a326ae13e2a5b9", "message": "Fix cleanup of processes in Flowable tables\n\nChange logic for searching active operations in AbortProcessListener and\nadd new cleaner which will delete all left processes in act_ru_execution\ntable by TTL\n\nJIRA:LMCROSSITXSADEPLOY-2120", "committedDate": "2020-07-01T07:34:13Z", "type": "forcePushed"}]}