{"pr_number": 983, "pr_title": "Namespace to routes merge", "pr_createdAt": "2020-10-30T11:25:00Z", "pr_url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/983", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTIxMDM1MQ==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/983#discussion_r515210351", "bodyText": "maybe rename this to initValidators instead of get, since it should be called more than once in the constructor of an instance; or just put this in the constructor and overwrite in child class", "author": "ikasarov", "createdAt": "2020-10-30T16:07:46Z", "path": "multiapps-controller-core/src/main/java/org/cloudfoundry/multiapps/controller/core/validators/parameters/RoutesValidator.java", "diffHunk": "@@ -21,15 +20,17 @@\n     private final Map<String, ParameterValidator> validators;\n     private final Set<String> supportedParamsWithoutValidators;\n \n-    public RoutesValidator() {\n-        this.validators = new HashMap<>();\n-        ParameterValidator routeValidator = new RouteValidator();\n-        this.validators.put(routeValidator.getParameterName(), routeValidator);\n-\n-        this.supportedParamsWithoutValidators = new TreeSet<>();\n+    public RoutesValidator(String namespace, boolean applyNamespaceGlobal) {\n+        this.validators = getRoutesValidators(namespace, applyNamespaceGlobal);\n+\t\tthis.supportedParamsWithoutValidators = new TreeSet<>();\n         this.supportedParamsWithoutValidators.add(SupportedParameters.NO_HOSTNAME);\n     }\n \n+    protected Map<String, ParameterValidator> getRoutesValidators(String namespace, boolean applyNamespaceGlobal) {", "originalCommit": "cdd0b30ee3ed25c9005eef0d777e2d8b8af51b73", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjAzMTU1NQ==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/983#discussion_r516031555", "bodyText": "If make it as first suggestion, I have to move initialization of validators in method but then I have to remove final modifier. In the second option you cannot override parent constructor because child class always calls parent constructor and then initialize itself.", "author": "theghost5800", "createdAt": "2020-11-02T15:01:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTIxMDM1MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU1MTQxNA==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/983#discussion_r516551414", "bodyText": "Maybe just rename and either remove final or keep final and setting outside then. Can always keep it as it is, I just find the 'get' word to be confusing in this case.", "author": "ikasarov", "createdAt": "2020-11-03T10:08:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTIxMDM1MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTIxMDgyNQ==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/983#discussion_r515210825", "bodyText": "same here", "author": "ikasarov", "createdAt": "2020-10-30T16:08:30Z", "path": "multiapps-controller-core/src/main/java/org/cloudfoundry/multiapps/controller/core/validators/parameters/RoutePartValidator.java", "diffHunk": "@@ -1,22 +1,37 @@\n package org.cloudfoundry.multiapps.controller.core.validators.parameters;\n \n+import java.util.Collections;\n import java.util.Locale;\n import java.util.Map;\n+import java.util.Set;\n \n import org.cloudfoundry.multiapps.common.SLException;\n+import org.cloudfoundry.multiapps.common.util.MapUtil;\n+import org.cloudfoundry.multiapps.controller.core.model.SupportedParameters;\n import org.cloudfoundry.multiapps.controller.core.util.NameUtil;\n import org.cloudfoundry.multiapps.mta.model.Module;\n \n public abstract class RoutePartValidator implements ParameterValidator {\n \n+    protected final String namespace;\n+    protected final boolean applyNamespaceGlobal;\n+\n+    public RoutePartValidator(String namespace, boolean applyNamespaceGlobal) {\n+        this.namespace = namespace;\n+        this.applyNamespaceGlobal = applyNamespaceGlobal;\n+    }\n+\n     @Override\n     public String attemptToCorrect(Object routePart, final Map<String, Object> context) {\n         if (!(routePart instanceof String)) {\n             throw new SLException(getErrorMessage(), routePart);\n         }\n \n-        String result = (String) routePart;\n-        result = NameUtil.getNameWithProperLength(result, getRoutePartMaxLength());\n+        // FIXME This logic does not work in case where apply-namespace is set to false", "originalCommit": "cdd0b30ee3ed25c9005eef0d777e2d8b8af51b73", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjAzMjc1MA==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/983#discussion_r516032750", "bodyText": "Actually this is fixed with next commit \"Add namespace to routes parameters only\"", "author": "theghost5800", "createdAt": "2020-11-02T15:03:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTIxMDgyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU1MTgzNA==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/983#discussion_r516551834", "bodyText": "yeah, forgot to delete this comment as I saw the other commit afterwards", "author": "ikasarov", "createdAt": "2020-11-03T10:09:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTIxMDgyNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTIyNTQ5NA==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/983#discussion_r515225494", "bodyText": "does this need to be in a separate method? it seems to only hide what the method is actually doing with the generic 'getRouteName'", "author": "ikasarov", "createdAt": "2020-10-30T16:32:41Z", "path": "multiapps-controller-core/src/main/java/org/cloudfoundry/multiapps/controller/core/validators/parameters/RoutePartValidator.java", "diffHunk": "@@ -43,6 +27,10 @@ public String attemptToCorrect(Object routePart, final Map<String, Object> conte\n         return result;\n     }\n \n+    protected String getRouteName(Object routePart, Map<String, Object> context) {", "originalCommit": "3450d38736712928ef4199278c85ef299c8f7d26", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjA0MDU1NQ==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/983#discussion_r516040555", "bodyText": "In the frist place I placed the logic about namespace in RoutePartValidator class but then I realized that namespace is used only on HostValidator implementation, so I put it there. So If remove getRouteName method, I have to override the whole attemptToCorrect method and execute almost the same with only difference calling another method from NameUtil class.", "author": "theghost5800", "createdAt": "2020-11-02T15:14:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTIyNTQ5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU1NzYxNA==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/983#discussion_r516557614", "bodyText": "ah, I see; still, maybe make method name more descriptive i.e. modifyAndShortenRoutePart or similar;\nalso, just realized that\nresult = result.replaceAll(\"^(-)\", \"\");\nresult = result.replaceAll(\"(-)$\", \"\");\nthis code should probably happen before that method invocation, as it also has the potential of shortening the value and possibly bringing it down to acceptable size.", "author": "ikasarov", "createdAt": "2020-11-03T10:18:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTIyNTQ5NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTIzMjEyMw==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/983#discussion_r515232123", "bodyText": "is it guaranteed that these parameters are in the context? this way of processing does not specify a default value if they are not present.\nAlso this whole method is a bit hard to understand. Maybe also name 'updatedParameters' something more clear e.g. globalParameterValues", "author": "ikasarov", "createdAt": "2020-10-30T16:43:56Z", "path": "multiapps-controller-core/src/main/java/org/cloudfoundry/multiapps/controller/core/validators/parameters/RoutesValidator.java", "diffHunk": "@@ -74,22 +73,42 @@ public Object attemptToCorrect(Object routes, final Map<String, Object> context)\n         }\n \n         return routesList.stream()\n-                         .map(route -> attemptToCorrectParameterMap(route, context))\n+                         .map(routesElement -> getRelatedParametersForContext(routesElement, context))\n+                         .map(this::attemptToCorrectParameterMap)\n                          .collect(Collectors.toList());\n     }\n \n-    private Map<String, Object> attemptToCorrectParameterMap(Map<String, Object> originalElem, Map<String, Object> context) {\n+    private Map<String, Object> getRelatedParametersForContext(Map<String, Object> routesElement, Map<String, Object> context) {\n+        Map<String, Object> updatedContext = new HashMap<>(routesElement);\n+        Set<String> relatedParameters = getRelatedParameterNames();\n+        Map<String, Object> updatedParamters = relatedParameters.stream()\n+                                                                .filter(relatedParameter -> doesParameterMissingInRoutesElement(relatedParameter,\n+                                                                                                                                routesElement,\n+                                                                                                                                context))\n+                                                                .collect(Collectors.toMap(Function.identity(), context::get));", "originalCommit": "3450d38736712928ef4199278c85ef299c8f7d26", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjUyMDE4Nw==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/983#discussion_r516520187", "bodyText": "About the first question the answer is yes, in isGlobalParameterValueOverridden method there is a check does context contains this parameter key. I have tried to reproduce scenario where the key is present but the value is null but this is not possible because when in yaml set value of key to null, then it is ignored.\nAbout the second topic, change of updateParameters to globalParamtersValues is it okay?", "author": "theghost5800", "createdAt": "2020-11-03T09:18:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTIzMjEyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU1OTA3Ng==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/983#discussion_r516559076", "bodyText": "yes", "author": "ikasarov", "createdAt": "2020-11-03T10:20:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTIzMjEyMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTIzMzUzNg==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/983#discussion_r515233536", "bodyText": "rename this method to isParameterMissingInRoutes or maybe even isGlobalParameterValueOverridden", "author": "ikasarov", "createdAt": "2020-10-30T16:46:04Z", "path": "multiapps-controller-core/src/main/java/org/cloudfoundry/multiapps/controller/core/validators/parameters/RoutesValidator.java", "diffHunk": "@@ -74,22 +73,42 @@ public Object attemptToCorrect(Object routes, final Map<String, Object> context)\n         }\n \n         return routesList.stream()\n-                         .map(route -> attemptToCorrectParameterMap(route, context))\n+                         .map(routesElement -> getRelatedParametersForContext(routesElement, context))\n+                         .map(this::attemptToCorrectParameterMap)\n                          .collect(Collectors.toList());\n     }\n \n-    private Map<String, Object> attemptToCorrectParameterMap(Map<String, Object> originalElem, Map<String, Object> context) {\n+    private Map<String, Object> getRelatedParametersForContext(Map<String, Object> routesElement, Map<String, Object> context) {\n+        Map<String, Object> updatedContext = new HashMap<>(routesElement);\n+        Set<String> relatedParameters = getRelatedParameterNames();\n+        Map<String, Object> updatedParamters = relatedParameters.stream()\n+                                                                .filter(relatedParameter -> doesParameterMissingInRoutesElement(relatedParameter,\n+                                                                                                                                routesElement,\n+                                                                                                                                context))\n+                                                                .collect(Collectors.toMap(Function.identity(), context::get));\n+        updatedContext.putAll(updatedParamters);\n+        return updatedContext;\n+    }\n+\n+    private boolean doesParameterMissingInRoutesElement(String relatedParameter, Map<String, Object> routesElement,", "originalCommit": "3450d38736712928ef4199278c85ef299c8f7d26", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU0NDExNA==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/983#discussion_r516544114", "bodyText": "Can we use List.of(...)?", "author": "IvanBorislavovDimitrov", "createdAt": "2020-11-03T09:56:29Z", "path": "multiapps-controller-core/src/main/java/org/cloudfoundry/multiapps/controller/core/helpers/MtaDescriptorPropertiesResolver.java", "diffHunk": "@@ -42,8 +41,7 @@ public MtaDescriptorPropertiesResolver(MtaDescriptorPropertiesResolverContext co\n     }\n \n     public List<ParameterValidator> getValidatorsList() {\n-        return Arrays.asList(new HostValidator(context.getNamespace(), context.applyNamespace()),\n-                             new IdleHostValidator(context.getNamespace(), context.applyNamespace()), new DomainValidator(),\n+        return Arrays.asList(new HostValidator(), new DomainValidator(),", "originalCommit": "3450d38736712928ef4199278c85ef299c8f7d26", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU0NjU3NA==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/983#discussion_r516546574", "bodyText": "Can we use StringUtils.startsWith(routePart, namespace)?", "author": "IvanBorislavovDimitrov", "createdAt": "2020-11-03T10:00:22Z", "path": "multiapps-controller-core/src/main/java/org/cloudfoundry/multiapps/controller/core/validators/parameters/HostValidator.java", "diffHunk": "@@ -1,15 +1,39 @@\n package org.cloudfoundry.multiapps.controller.core.validators.parameters;\n \n+import java.util.Collections;\n import java.util.Map;\n+import java.util.Set;\n \n-import org.apache.commons.lang3.StringUtils;\n+import org.cloudfoundry.multiapps.common.util.MapUtil;\n import org.cloudfoundry.multiapps.controller.core.Messages;\n import org.cloudfoundry.multiapps.controller.core.model.SupportedParameters;\n+import org.cloudfoundry.multiapps.controller.core.util.NameUtil;\n \n public class HostValidator extends RoutePartValidator {\n \n+    private final String namespace;\n+    private final boolean applyNamespaceGlobal;\n+\n+    public HostValidator() {\n+        this.namespace = null;\n+        this.applyNamespaceGlobal = false;\n+    }\n+\n     public HostValidator(String namespace, boolean applyNamespaceGlobal) {\n-        super(namespace, applyNamespaceGlobal);\n+        this.namespace = namespace;\n+        this.applyNamespaceGlobal = applyNamespaceGlobal;\n+    }\n+\n+    @Override\n+    public boolean isValid(Object routePart, final Map<String, Object> context) {\n+        boolean validRoutePart = super.isValid(routePart, context);\n+        if (!validRoutePart) {\n+            return false;\n+        }\n+        if (shouldApplyNamespace(context)) {\n+            return ((String) routePart).startsWith(namespace);", "originalCommit": "3450d38736712928ef4199278c85ef299c8f7d26", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjYzODc3NA==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/983#discussion_r516638774", "bodyText": "Why? StringUtils.startsWith require again to cast Object to String. The only difference which I see is that if namespace is null, it will not throw NPE but this scenario shouldn't be possible to occur.", "author": "theghost5800", "createdAt": "2020-11-03T12:44:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU0NjU3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjY3Nzk3OA==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/983#discussion_r516677978", "bodyText": "I agree, it cannot be null, but it just seems a bit more error-prone without a null check but ok", "author": "IvanBorislavovDimitrov", "createdAt": "2020-11-03T13:48:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU0NjU3NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU0OTQ2NQ==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/983#discussion_r516549465", "bodyText": "This value is always true, maybe it will be easier if we return true instead of validRoutePart.", "author": "IvanBorislavovDimitrov", "createdAt": "2020-11-03T10:05:11Z", "path": "multiapps-controller-core/src/main/java/org/cloudfoundry/multiapps/controller/core/validators/parameters/HostValidator.java", "diffHunk": "@@ -1,15 +1,39 @@\n package org.cloudfoundry.multiapps.controller.core.validators.parameters;\n \n+import java.util.Collections;\n import java.util.Map;\n+import java.util.Set;\n \n-import org.apache.commons.lang3.StringUtils;\n+import org.cloudfoundry.multiapps.common.util.MapUtil;\n import org.cloudfoundry.multiapps.controller.core.Messages;\n import org.cloudfoundry.multiapps.controller.core.model.SupportedParameters;\n+import org.cloudfoundry.multiapps.controller.core.util.NameUtil;\n \n public class HostValidator extends RoutePartValidator {\n \n+    private final String namespace;\n+    private final boolean applyNamespaceGlobal;\n+\n+    public HostValidator() {\n+        this.namespace = null;\n+        this.applyNamespaceGlobal = false;\n+    }\n+\n     public HostValidator(String namespace, boolean applyNamespaceGlobal) {\n-        super(namespace, applyNamespaceGlobal);\n+        this.namespace = namespace;\n+        this.applyNamespaceGlobal = applyNamespaceGlobal;\n+    }\n+\n+    @Override\n+    public boolean isValid(Object routePart, final Map<String, Object> context) {\n+        boolean validRoutePart = super.isValid(routePart, context);\n+        if (!validRoutePart) {\n+            return false;\n+        }\n+        if (shouldApplyNamespace(context)) {\n+            return ((String) routePart).startsWith(namespace);\n+        }\n+        return validRoutePart;", "originalCommit": "3450d38736712928ef4199278c85ef299c8f7d26", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU1OTM4MA==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/983#discussion_r516559380", "bodyText": "updatedParamteres", "author": "IvanBorislavovDimitrov", "createdAt": "2020-11-03T10:20:59Z", "path": "multiapps-controller-core/src/main/java/org/cloudfoundry/multiapps/controller/core/validators/parameters/RoutesValidator.java", "diffHunk": "@@ -74,22 +73,42 @@ public Object attemptToCorrect(Object routes, final Map<String, Object> context)\n         }\n \n         return routesList.stream()\n-                         .map(route -> attemptToCorrectParameterMap(route, context))\n+                         .map(routesElement -> getRelatedParametersForContext(routesElement, context))\n+                         .map(this::attemptToCorrectParameterMap)\n                          .collect(Collectors.toList());\n     }\n \n-    private Map<String, Object> attemptToCorrectParameterMap(Map<String, Object> originalElem, Map<String, Object> context) {\n+    private Map<String, Object> getRelatedParametersForContext(Map<String, Object> routesElement, Map<String, Object> context) {\n+        Map<String, Object> updatedContext = new HashMap<>(routesElement);\n+        Set<String> relatedParameters = getRelatedParameterNames();\n+        Map<String, Object> updatedParamters = relatedParameters.stream()", "originalCommit": "3450d38736712928ef4199278c85ef299c8f7d26", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU2MDQ2OQ==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/983#discussion_r516560469", "bodyText": "maybe isParameterMissingInRoutesElement?", "author": "IvanBorislavovDimitrov", "createdAt": "2020-11-03T10:22:44Z", "path": "multiapps-controller-core/src/main/java/org/cloudfoundry/multiapps/controller/core/validators/parameters/RoutesValidator.java", "diffHunk": "@@ -74,22 +73,42 @@ public Object attemptToCorrect(Object routes, final Map<String, Object> context)\n         }\n \n         return routesList.stream()\n-                         .map(route -> attemptToCorrectParameterMap(route, context))\n+                         .map(routesElement -> getRelatedParametersForContext(routesElement, context))\n+                         .map(this::attemptToCorrectParameterMap)\n                          .collect(Collectors.toList());\n     }\n \n-    private Map<String, Object> attemptToCorrectParameterMap(Map<String, Object> originalElem, Map<String, Object> context) {\n+    private Map<String, Object> getRelatedParametersForContext(Map<String, Object> routesElement, Map<String, Object> context) {\n+        Map<String, Object> updatedContext = new HashMap<>(routesElement);\n+        Set<String> relatedParameters = getRelatedParameterNames();\n+        Map<String, Object> updatedParamters = relatedParameters.stream()\n+                                                                .filter(relatedParameter -> doesParameterMissingInRoutesElement(relatedParameter,\n+                                                                                                                                routesElement,", "originalCommit": "3450d38736712928ef4199278c85ef299c8f7d26", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU2MjU1Nw==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/983#discussion_r516562557", "bodyText": "orginialElement looks better in my opinion", "author": "IvanBorislavovDimitrov", "createdAt": "2020-11-03T10:26:07Z", "path": "multiapps-controller-core/src/main/java/org/cloudfoundry/multiapps/controller/core/validators/parameters/RoutesValidator.java", "diffHunk": "@@ -74,22 +73,42 @@ public Object attemptToCorrect(Object routes, final Map<String, Object> context)\n         }\n \n         return routesList.stream()\n-                         .map(route -> attemptToCorrectParameterMap(route, context))\n+                         .map(routesElement -> getRelatedParametersForContext(routesElement, context))\n+                         .map(this::attemptToCorrectParameterMap)\n                          .collect(Collectors.toList());\n     }\n \n-    private Map<String, Object> attemptToCorrectParameterMap(Map<String, Object> originalElem, Map<String, Object> context) {\n+    private Map<String, Object> getRelatedParametersForContext(Map<String, Object> routesElement, Map<String, Object> context) {\n+        Map<String, Object> updatedContext = new HashMap<>(routesElement);\n+        Set<String> relatedParameters = getRelatedParameterNames();\n+        Map<String, Object> updatedParamters = relatedParameters.stream()\n+                                                                .filter(relatedParameter -> doesParameterMissingInRoutesElement(relatedParameter,\n+                                                                                                                                routesElement,\n+                                                                                                                                context))\n+                                                                .collect(Collectors.toMap(Function.identity(), context::get));\n+        updatedContext.putAll(updatedParamters);\n+        return updatedContext;\n+    }\n+\n+    private boolean doesParameterMissingInRoutesElement(String relatedParameter, Map<String, Object> routesElement,\n+                                                        Map<String, Object> context) {\n+        return !routesElement.containsKey(relatedParameter) && context.containsKey(relatedParameter);\n+    }\n+\n+    private Map<String, Object> attemptToCorrectParameterMap(Map<String, Object> originalElem) {", "originalCommit": "3450d38736712928ef4199278c85ef299c8f7d26", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU4NzI5MA==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/983#discussion_r516587290", "bodyText": "Can we move this in the Builder class?", "author": "IvanBorislavovDimitrov", "createdAt": "2020-11-03T11:08:03Z", "path": "multiapps-controller-core/src/main/java/org/cloudfoundry/multiapps/controller/core/helpers/SystemParameters.java", "diffHunk": "@@ -54,6 +55,9 @@ public SystemParameters(Builder builder) {\n         this.credentialsGenerator = builder.credentialsGenerator;\n         this.reserveTemporaryRoutes = builder.reserveTemporaryRoutes;\n         this.timestampSupplier = builder.timestampSupplier;\n+        this.namespace = builder.namespace;\n+        this.applyNamespace = builder.applyNamespace;\n+        this.hostValidator = new HostValidator(namespace, applyNamespace);", "originalCommit": "3450d38736712928ef4199278c85ef299c8f7d26", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "6fa8385a41fd5469e5f2d59ba5f8448d98ba4e3c", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/6fa8385a41fd5469e5f2d59ba5f8448d98ba4e3c", "message": "Add namespace to routes\n\nJIRA:LMCROSSITXSADEPLOY-2124", "committedDate": "2020-11-05T10:59:11Z", "type": "forcePushed"}, {"oid": "dd31019409757de8297e367dd7769ccc19d62239", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/dd31019409757de8297e367dd7769ccc19d62239", "message": "Add namespace to routes\n\nJIRA:LMCROSSITXSADEPLOY-2124", "committedDate": "2020-11-05T13:37:23Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODA2NDYyMg==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/983#discussion_r518064622", "bodyText": "Is this constructor even needed now?", "author": "ikasarov", "createdAt": "2020-11-05T13:50:56Z", "path": "multiapps-controller-core/src/main/java/org/cloudfoundry/multiapps/controller/core/validators/parameters/IdleRoutesValidator.java", "diffHunk": "@@ -0,0 +1,24 @@\n+package org.cloudfoundry.multiapps.controller.core.validators.parameters;\n+\n+import java.util.Map;\n+\n+import org.cloudfoundry.multiapps.controller.core.model.SupportedParameters;\n+\n+public class IdleRoutesValidator extends RoutesValidator {\n+\n+    public IdleRoutesValidator(String namespace, boolean applyNamespaceGlobal) {", "originalCommit": "dd31019409757de8297e367dd7769ccc19d62239", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODA4MTQwNg==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/983#discussion_r518081406", "bodyText": "Yes, because it is necessary to initialize parent constructor", "author": "theghost5800", "createdAt": "2020-11-05T14:14:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODA2NDYyMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODA2NjM4Ng==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/983#discussion_r518066386", "bodyText": "doesn't this check the opposite of what the method name implies? my mistake - you can negate the check or name it isGlobalParameterValueInAction or isGlobalParameterValueNotOverridden :D", "author": "ikasarov", "createdAt": "2020-11-05T13:53:25Z", "path": "multiapps-controller-core/src/main/java/org/cloudfoundry/multiapps/controller/core/validators/parameters/RoutesValidator.java", "diffHunk": "@@ -71,22 +74,42 @@ public Object attemptToCorrect(Object routes, final Map<String, Object> context)\n         }\n \n         return routesList.stream()\n+                         .map(originalElement -> getUpdatedAllRouteElements(originalElement, context))\n                          .map(this::attemptToCorrectParameterMap)\n                          .collect(Collectors.toList());\n     }\n \n-    private Map<String, Object> attemptToCorrectParameterMap(Map<String, Object> originalElem) {\n+    private Map<String, Object> getUpdatedAllRouteElements(Map<String, Object> routeElement, Map<String, Object> context) {\n+        Map<String, Object> updatedAllRouteElements = new HashMap<>(routeElement);\n+        Set<String> relatedParameters = getRelatedParameterNames();\n+        Map<String, Object> globalParametersValues = relatedParameters.stream()\n+                                                                      .filter(relatedParameter -> isGlobalParameterValueOverridden(relatedParameter,\n+                                                                                                                                   routeElement,\n+                                                                                                                                   context))\n+                                                                      .collect(Collectors.toMap(Function.identity(), context::get));\n+        updatedAllRouteElements.putAll(globalParametersValues);\n+        return updatedAllRouteElements;\n+    }\n+\n+    private boolean isGlobalParameterValueOverridden(String relatedParameter, Map<String, Object> routeElement,", "originalCommit": "dd31019409757de8297e367dd7769ccc19d62239", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODA4Mjk3Mw==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/983#discussion_r518082973", "bodyText": "Do we really need namespace and applyNamespace in the Builder class? Is it possible to have a method in CollectSystemParametersStep which creates HostValidator and passes it to the builder? This way the builder won't need to create the HostValidator it will be injected instead.", "author": "IvanBorislavovDimitrov", "createdAt": "2020-11-05T14:16:23Z", "path": "multiapps-controller-process/src/main/java/org/cloudfoundry/multiapps/controller/process/steps/CollectSystemParametersStep.java", "diffHunk": "@@ -111,6 +113,8 @@ private SystemParameters createSystemParameters(ProcessContext context, CloudCon\n                                              .reserveTemporaryRoutes(reserveTemporaryRoutes)\n                                              .credentialsGenerator(credentialsGeneratorSupplier.get())\n                                              .timestampSupplier(timestampSupplier)\n+                                             .namespace(namespace)\n+                                             .applyNamespace(applyNamespace)", "originalCommit": "dd31019409757de8297e367dd7769ccc19d62239", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODA4NTk3Nw==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/983#discussion_r518085977", "bodyText": "List.of() ?", "author": "IvanBorislavovDimitrov", "createdAt": "2020-11-05T14:20:17Z", "path": "multiapps-controller-core/src/main/java/org/cloudfoundry/multiapps/controller/core/validators/parameters/RouteValidator.java", "diffHunk": "@@ -17,8 +17,8 @@\n \n     private final List<ParameterValidator> validators;\n \n-    public RouteValidator() {\n-        this.validators = Arrays.asList(new HostValidator(), new DomainValidator());\n+    public RouteValidator(String namespace, boolean applyNamespaceGlobal) {\n+        this.validators = Arrays.asList(new HostValidator(namespace, applyNamespaceGlobal), new DomainValidator());", "originalCommit": "dd31019409757de8297e367dd7769ccc19d62239", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODA4OTkwMA==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/983#discussion_r518089900", "bodyText": "Cool!", "author": "IvanBorislavovDimitrov", "createdAt": "2020-11-05T14:25:14Z", "path": "multiapps-controller-core/src/test/java/org/cloudfoundry/multiapps/controller/core/helpers/SystemParametersTest.java", "diffHunk": "@@ -54,26 +61,18 @@ void initialize() throws Exception {\n                .thenReturn(TIMESTAMP);\n     }\n \n-    @Test\n-    void testGeneralParametersWithoutReserveTemporaryRoutes() throws Exception {\n-        testGeneralParameters(false);\n-    }\n-\n-    @Test\n-    void testGeneralParametersWithReserveTemporaryRoutes() throws Exception {\n-        testGeneralParameters(true);\n-    }\n-\n-    private void testGeneralParameters(Boolean reserveTemporaryRoutes) throws Exception {\n-        SystemParameters testedClass = createSystemParameters(reserveTemporaryRoutes);\n+    @ParameterizedTest\n+    @ValueSource(booleans = { false, true })", "originalCommit": "dd31019409757de8297e367dd7769ccc19d62239", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODA5MDk2MA==", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/983#discussion_r518090960", "bodyText": "Can we use assertEquals instead of if/else?", "author": "IvanBorislavovDimitrov", "createdAt": "2020-11-05T14:26:44Z", "path": "multiapps-controller-core/src/test/java/org/cloudfoundry/multiapps/controller/core/helpers/SystemParametersTest.java", "diffHunk": "@@ -194,6 +198,12 @@ private void verifyModuleParameters(String moduleName, Map<String, Object> modul\n             assertFalse(moduleParameters.containsKey(SupportedParameters.IDLE_DOMAIN));\n         }\n \n+        if (applyNamespace) {", "originalCommit": "dd31019409757de8297e367dd7769ccc19d62239", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "947e2f35874a80f918c3932a7cc2b0d72c8818e9", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/947e2f35874a80f918c3932a7cc2b0d72c8818e9", "message": "Add namespace to routes\n\nJIRA:LMCROSSITXSADEPLOY-2124", "committedDate": "2020-11-05T15:36:28Z", "type": "commit"}, {"oid": "947e2f35874a80f918c3932a7cc2b0d72c8818e9", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/947e2f35874a80f918c3932a7cc2b0d72c8818e9", "message": "Add namespace to routes\n\nJIRA:LMCROSSITXSADEPLOY-2124", "committedDate": "2020-11-05T15:36:28Z", "type": "forcePushed"}]}