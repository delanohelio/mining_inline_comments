{"pr_number": 243, "pr_title": "[Microservice] Elastic IP Manager", "pr_createdAt": "2020-06-10T15:06:00Z", "pr_url": "https://github.com/futurewei-cloud/alcor/pull/243", "timeline": [{"oid": "9b3962095afe6ed398e2258e59526d3367b415c7", "url": "https://github.com/futurewei-cloud/alcor/commit/9b3962095afe6ed398e2258e59526d3367b415c7", "message": "upload elastic ip allocation initial codes", "committedDate": "2020-07-07T01:51:09Z", "type": "commit"}, {"oid": "93264853355dc2b92aa4eb37a71034b401a4de8a", "url": "https://github.com/futurewei-cloud/alcor/commit/93264853355dc2b92aa4eb37a71034b401a4de8a", "message": "update doc by adding some description about allocation algorithm and API", "committedDate": "2020-07-07T01:51:09Z", "type": "commit"}, {"oid": "af16f4f30cff08963dd0f0108f8dd9d8240b5ef4", "url": "https://github.com/futurewei-cloud/alcor/commit/af16f4f30cff08963dd0f0108f8dd9d8240b5ef4", "message": "update elastic ip allocation algorithm", "committedDate": "2020-07-07T01:51:10Z", "type": "commit"}, {"oid": "58ed0306f555b12414ec6d497c5241cd6344665e", "url": "https://github.com/futurewei-cloud/alcor/commit/58ed0306f555b12414ec6d497c5241cd6344665e", "message": "update codes", "committedDate": "2020-07-07T01:51:10Z", "type": "commit"}, {"oid": "eb09abd00d5c9bd75450dcb5387e02c1b743055d", "url": "https://github.com/futurewei-cloud/alcor/commit/eb09abd00d5c9bd75450dcb5387e02c1b743055d", "message": "update codes", "committedDate": "2020-07-07T01:51:10Z", "type": "commit"}, {"oid": "295816a1ae88648a6290ee5ed334039e070e4c7f", "url": "https://github.com/futurewei-cloud/alcor/commit/295816a1ae88648a6290ee5ed334039e070e4c7f", "message": "update codes", "committedDate": "2020-07-07T01:51:18Z", "type": "commit"}, {"oid": "9675e595152b13cbf9e85af910114e35d7cc4c50", "url": "https://github.com/futurewei-cloud/alcor/commit/9675e595152b13cbf9e85af910114e35d7cc4c50", "message": "revert wrong changes", "committedDate": "2020-07-07T01:51:41Z", "type": "commit"}, {"oid": "f8516efb6752fdf04820735bd4d0f69ebe41c6ed", "url": "https://github.com/futurewei-cloud/alcor/commit/f8516efb6752fdf04820735bd4d0f69ebe41c6ed", "message": "revert wrong changes", "committedDate": "2020-07-07T01:51:47Z", "type": "commit"}, {"oid": "a59aa8ec23fed67626ef73f97b66139c54f9e413", "url": "https://github.com/futurewei-cloud/alcor/commit/a59aa8ec23fed67626ef73f97b66139c54f9e413", "message": "fix a ut bugs", "committedDate": "2020-07-07T01:51:48Z", "type": "commit"}, {"oid": "925f3e29bf084454398f1f4093e0b370ae1d6de0", "url": "https://github.com/futurewei-cloud/alcor/commit/925f3e29bf084454398f1f4093e0b370ae1d6de0", "message": "fix a ut bugs", "committedDate": "2020-07-07T01:51:48Z", "type": "commit"}, {"oid": "7d6185bb16d9d29d1ec63810b385bf22ea51ecf5", "url": "https://github.com/futurewei-cloud/alcor/commit/7d6185bb16d9d29d1ec63810b385bf22ea51ecf5", "message": "lock parameters use default value instead of changing all services configuration file", "committedDate": "2020-07-07T01:51:48Z", "type": "commit"}, {"oid": "279ab33fc20a8f4d8c212f9775e49b914f64942e", "url": "https://github.com/futurewei-cloud/alcor/commit/279ab33fc20a8f4d8c212f9775e49b914f64942e", "message": "add function descriptions", "committedDate": "2020-07-07T01:51:49Z", "type": "commit"}, {"oid": "357ec6cacf14982372e75f696814791a05d3eb2d", "url": "https://github.com/futurewei-cloud/alcor/commit/357ec6cacf14982372e75f696814791a05d3eb2d", "message": "upload elastic ip allocation initial codes", "committedDate": "2020-07-07T01:52:08Z", "type": "commit"}, {"oid": "cfced6582a86a1b9973ed9a2d729819512a41487", "url": "https://github.com/futurewei-cloud/alcor/commit/cfced6582a86a1b9973ed9a2d729819512a41487", "message": "upload elastic ip allocation initial codes", "committedDate": "2020-07-07T01:52:08Z", "type": "commit"}, {"oid": "596886f581e3f747f305b020bf5dc3040110d2eb", "url": "https://github.com/futurewei-cloud/alcor/commit/596886f581e3f747f305b020bf5dc3040110d2eb", "message": "fix compile error", "committedDate": "2020-07-07T01:52:08Z", "type": "commit"}, {"oid": "ac830ec9a0ad8d9207abd56457522b1419c82750", "url": "https://github.com/futurewei-cloud/alcor/commit/ac830ec9a0ad8d9207abd56457522b1419c82750", "message": "upload elastic ip allocation initial codes", "committedDate": "2020-07-07T01:52:09Z", "type": "commit"}, {"oid": "c4f79a5c4014aee245d56a1078b49c86b2066c00", "url": "https://github.com/futurewei-cloud/alcor/commit/c4f79a5c4014aee245d56a1078b49c86b2066c00", "message": "upload elastic ip allocation initial codes", "committedDate": "2020-07-07T01:52:09Z", "type": "commit"}, {"oid": "10afe5387636942cd97c717ad46eaead62b4a4fd", "url": "https://github.com/futurewei-cloud/alcor/commit/10afe5387636942cd97c717ad46eaead62b4a4fd", "message": "fix compile error", "committedDate": "2020-07-07T01:52:09Z", "type": "commit"}, {"oid": "2df2cddafa8e15e64f62d41e961f8181b1101044", "url": "https://github.com/futurewei-cloud/alcor/commit/2df2cddafa8e15e64f62d41e961f8181b1101044", "message": "update doc by adding some description about allocation algorithm and API", "committedDate": "2020-07-07T01:52:25Z", "type": "commit"}, {"oid": "9a2957c6da32e9ad1bb7fc4386f98e839d4d761f", "url": "https://github.com/futurewei-cloud/alcor/commit/9a2957c6da32e9ad1bb7fc4386f98e839d4d761f", "message": "update elastic ip allocation algorithm", "committedDate": "2020-07-07T01:52:35Z", "type": "commit"}, {"oid": "3ba7255753510850277960358070ea678b2a1cf6", "url": "https://github.com/futurewei-cloud/alcor/commit/3ba7255753510850277960358070ea678b2a1cf6", "message": "update codes", "committedDate": "2020-07-07T01:52:57Z", "type": "commit"}, {"oid": "624e92a2f399a733a7957ab70ad04a32aee02ccd", "url": "https://github.com/futurewei-cloud/alcor/commit/624e92a2f399a733a7957ab70ad04a32aee02ccd", "message": "update codes", "committedDate": "2020-07-07T01:53:04Z", "type": "commit"}, {"oid": "8d72ecf0956fe1062fe65d3f740a88d2ffb9afd1", "url": "https://github.com/futurewei-cloud/alcor/commit/8d72ecf0956fe1062fe65d3f740a88d2ffb9afd1", "message": "update codes", "committedDate": "2020-07-07T01:53:20Z", "type": "commit"}, {"oid": "c430bc7eabc04551e6774c47826bcd87882a764e", "url": "https://github.com/futurewei-cloud/alcor/commit/c430bc7eabc04551e6774c47826bcd87882a764e", "message": "upload elastic ip allocation initial codes", "committedDate": "2020-07-07T01:53:31Z", "type": "commit"}, {"oid": "9a4388956b9653acd17fca88e2a9fd417b594301", "url": "https://github.com/futurewei-cloud/alcor/commit/9a4388956b9653acd17fca88e2a9fd417b594301", "message": "upload elastic ip allocation initial codes", "committedDate": "2020-07-07T01:53:31Z", "type": "commit"}, {"oid": "d041caac26e1f4db396bcb4364c0a5fb95428970", "url": "https://github.com/futurewei-cloud/alcor/commit/d041caac26e1f4db396bcb4364c0a5fb95428970", "message": "fix compile error", "committedDate": "2020-07-07T01:53:32Z", "type": "commit"}, {"oid": "a1191eb4245e70a8c1bb11ec60697b65ba7f9900", "url": "https://github.com/futurewei-cloud/alcor/commit/a1191eb4245e70a8c1bb11ec60697b65ba7f9900", "message": "upload elastic ip allocation initial codes", "committedDate": "2020-07-07T01:53:42Z", "type": "commit"}, {"oid": "893fb78eb359f018d73c7129c7234a7b8904b513", "url": "https://github.com/futurewei-cloud/alcor/commit/893fb78eb359f018d73c7129c7234a7b8904b513", "message": "upload elastic ip allocation initial codes", "committedDate": "2020-07-07T01:53:53Z", "type": "commit"}, {"oid": "9b8f0782b34897669196592cc09b807c74b4bb10", "url": "https://github.com/futurewei-cloud/alcor/commit/9b8f0782b34897669196592cc09b807c74b4bb10", "message": "fix compile error", "committedDate": "2020-07-07T01:53:53Z", "type": "commit"}, {"oid": "becf92458c5e20b6985f148c07a672a3c9a1111f", "url": "https://github.com/futurewei-cloud/alcor/commit/becf92458c5e20b6985f148c07a672a3c9a1111f", "message": "update doc by adding some description about allocation algorithm and API", "committedDate": "2020-07-07T01:54:00Z", "type": "commit"}, {"oid": "106f4e5121d22f5b7c5af27bb3f6623f94522c26", "url": "https://github.com/futurewei-cloud/alcor/commit/106f4e5121d22f5b7c5af27bb3f6623f94522c26", "message": "update elastic ip allocation algorithm", "committedDate": "2020-07-07T01:54:08Z", "type": "commit"}, {"oid": "40feeed6b405c745853c6423407c6d6a79292e11", "url": "https://github.com/futurewei-cloud/alcor/commit/40feeed6b405c745853c6423407c6d6a79292e11", "message": "update codes", "committedDate": "2020-07-07T01:54:30Z", "type": "commit"}, {"oid": "537c7b130933f5c8705555263eb3c3a3a0885d7d", "url": "https://github.com/futurewei-cloud/alcor/commit/537c7b130933f5c8705555263eb3c3a3a0885d7d", "message": "update codes", "committedDate": "2020-07-07T01:54:39Z", "type": "commit"}, {"oid": "e961970a495177f7bb19e8f209010719713cae7e", "url": "https://github.com/futurewei-cloud/alcor/commit/e961970a495177f7bb19e8f209010719713cae7e", "message": "update codes", "committedDate": "2020-07-07T01:54:53Z", "type": "commit"}, {"oid": "b822fa117295ae2afd6aea94fcd5ad8f3f2f0485", "url": "https://github.com/futurewei-cloud/alcor/commit/b822fa117295ae2afd6aea94fcd5ad8f3f2f0485", "message": "revert wrong changes", "committedDate": "2020-07-07T01:55:16Z", "type": "commit"}, {"oid": "cfa1a6bc005f4fb805aba957e70bed17b560b18b", "url": "https://github.com/futurewei-cloud/alcor/commit/cfa1a6bc005f4fb805aba957e70bed17b560b18b", "message": "revert wrong changes", "committedDate": "2020-07-07T01:55:25Z", "type": "commit"}, {"oid": "24688157c11b6b5121aa8689d1daed58a2d606fa", "url": "https://github.com/futurewei-cloud/alcor/commit/24688157c11b6b5121aa8689d1daed58a2d606fa", "message": "fix a ut bugs", "committedDate": "2020-07-07T01:55:31Z", "type": "commit"}, {"oid": "278d6c2c4fa6a50d0cb3eedbc47213b1772a0259", "url": "https://github.com/futurewei-cloud/alcor/commit/278d6c2c4fa6a50d0cb3eedbc47213b1772a0259", "message": "fix a ut bugs", "committedDate": "2020-07-07T01:55:37Z", "type": "commit"}, {"oid": "2fb76d31284aa29e296da09ae049b1a2539ad2bd", "url": "https://github.com/futurewei-cloud/alcor/commit/2fb76d31284aa29e296da09ae049b1a2539ad2bd", "message": "lock parameters use default value instead of changing all services configuration file", "committedDate": "2020-07-07T01:55:38Z", "type": "commit"}, {"oid": "d15c3d79ce73c516ee9b6822c1961608f14dc895", "url": "https://github.com/futurewei-cloud/alcor/commit/d15c3d79ce73c516ee9b6822c1961608f14dc895", "message": "add ut test cases and fixed some bugs", "committedDate": "2020-07-07T01:55:45Z", "type": "commit"}, {"oid": "d572a6516700e3a0fa343802f044fb606c26081e", "url": "https://github.com/futurewei-cloud/alcor/commit/d572a6516700e3a0fa343802f044fb606c26081e", "message": "update codes", "committedDate": "2020-07-07T01:55:53Z", "type": "commit"}, {"oid": "ef4766f104befc50d387fe1a917d6531982564d0", "url": "https://github.com/futurewei-cloud/alcor/commit/ef4766f104befc50d387fe1a917d6531982564d0", "message": "sync codes and fix conflicts", "committedDate": "2020-07-08T14:42:47Z", "type": "commit"}, {"oid": "bace8769728eddae7d549e7b0c9993eb5760cce9", "url": "https://github.com/futurewei-cloud/alcor/commit/bace8769728eddae7d549e7b0c9993eb5760cce9", "message": "Merge branch 'elastic_ip_minimal' of https://github.com/Eric-Yuan/alcor into elastic_ip_minimal", "committedDate": "2020-07-08T14:47:48Z", "type": "commit"}, {"oid": "eb73da756fcc1161bed357ac69d72d5fc7b96e4b", "url": "https://github.com/futurewei-cloud/alcor/commit/eb73da756fcc1161bed357ac69d72d5fc7b96e4b", "message": "revert wrong changes", "committedDate": "2020-07-08T15:02:11Z", "type": "commit"}, {"oid": "af3cd287532bdbc64613686582f9370cf952061d", "url": "https://github.com/futurewei-cloud/alcor/commit/af3cd287532bdbc64613686582f9370cf952061d", "message": "fix a swagger test bug", "committedDate": "2020-07-09T01:11:22Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTk1MjU4OA==", "url": "https://github.com/futurewei-cloud/alcor/pull/243#discussion_r451952588", "bodyText": "Not sure why we make the main JDK version here. Is it a merge issue?", "author": "xieus", "createdAt": "2020-07-09T04:10:08Z", "path": "pom.xml", "diffHunk": "@@ -11,9 +11,9 @@\n     <description>Alcor Controller Project</description>\n \n     <properties>\n-        <java.version>11</java.version>\n-        <maven.compiler.source>11</maven.compiler.source>\n-        <maven.compiler.target>11</maven.compiler.target>\n+        <java.version>1.8</java.version>", "originalCommit": "af3cd287532bdbc64613686582f9370cf952061d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTk4ODgxMw==", "url": "https://github.com/futurewei-cloud/alcor/pull/243#discussion_r451988813", "bodyText": "sorry, It is a merge issue... I fixed it", "author": "Eric-Yuan", "createdAt": "2020-07-09T06:21:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTk1MjU4OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTk1MzIwNQ==", "url": "https://github.com/futurewei-cloud/alcor/pull/243#discussion_r451953205", "bodyText": "Like the comprehensive set of UTs. This is really good.", "author": "xieus", "createdAt": "2020-07-09T04:12:34Z", "path": "services/elastic_ip_manager/src/test/java/com/futurewei/alcor/elasticipmanager/ElasticIpControllerTests.java", "diffHunk": "@@ -0,0 +1,1029 @@\n+/*\n+Copyright 2020 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.elasticipmanager;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.futurewei.alcor.common.db.CacheFactory;\n+import com.futurewei.alcor.common.db.ICache;\n+import com.futurewei.alcor.common.db.ignite.MockIgniteServer;\n+import com.futurewei.alcor.common.utils.Ipv4AddrUtil;\n+import com.futurewei.alcor.common.utils.Ipv6AddrUtil;\n+import com.futurewei.alcor.elasticipmanager.config.UnitTestConfig;\n+import com.futurewei.alcor.elasticipmanager.entity.ElasticIpAllocatedIpv4;\n+import com.futurewei.alcor.elasticipmanager.entity.ElasticIpAllocatedIpv6;\n+import com.futurewei.alcor.elasticipmanager.entity.ElasticIpAvailableBucketsSet;\n+import com.futurewei.alcor.web.entity.elasticip.*;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.context.annotation.ComponentScan;\n+import org.springframework.http.MediaType;\n+import org.springframework.test.context.junit4.SpringRunner;\n+import org.springframework.test.web.servlet.MockMvc;\n+import org.springframework.test.web.servlet.result.MockMvcResultMatchers;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.BitSet;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.put;\n+import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+\n+@RunWith(SpringRunner.class)\n+@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT,\n+        properties = {\"httpbin=http://localhost:${wiremock.server.port}\"})\n+@AutoConfigureMockMvc\n+@ComponentScan(value = \"com.futurewei.alcor.common.test.config\")\n+public class ElasticIpControllerTests extends MockIgniteServer {\n+\n+    @Autowired\n+    private MockMvc mockMvc;\n+\n+    @Autowired\n+    CacheFactory cacheFactor;\n+\n+    private void perpareRange() throws Exception {\n+        try {\n+            // create ipv4 elastic ip range\n+            List<ElasticIpRange.AllocationRange> allocationRanges = new ArrayList<>();\n+            allocationRanges.add(new ElasticIpRange.AllocationRange(\n+                    UnitTestConfig.elasticIpRangeStart1,\n+                    UnitTestConfig.elasticIpRangeEnd1));\n+\n+            ElasticIpRange eipRange = new ElasticIpRange(\n+                    UnitTestConfig.elasticIpRange1,\n+                    UnitTestConfig.elasticIpRangeName1,\n+                    UnitTestConfig.elasticIpRangeDescription1,\n+                    UnitTestConfig.elasticIpVersion1,\n+                    allocationRanges);\n+\n+            ElasticIpRangeInfoWrapper rangeRequest = new ElasticIpRangeInfoWrapper(new ElasticIpRangeInfo(eipRange));\n+            ObjectMapper mapper = new ObjectMapper();\n+            String rangeRequestStr =  mapper.writeValueAsString(rangeRequest);\n+            String createRangeUri = \"/elasticip-ranges\";\n+\n+            this.mockMvc.perform(post(createRangeUri).contentType(MediaType.APPLICATION_JSON)\n+                    .content(rangeRequestStr))\n+                    .andDo(print())\n+                    .andExpect(status().isCreated())\n+                    .andExpect(MockMvcResultMatchers.jsonPath(\"$.elasticip-range.id\")\n+                            .value(UnitTestConfig.elasticIpRange1));\n+\n+            // get the elastic ip range and check cidrs\n+            String getEipRangeUri = \"/elasticip-ranges/\" + UnitTestConfig.elasticIpRange1;\n+            String responseStr = this.mockMvc.perform(get(getEipRangeUri))\n+                    .andDo(print())\n+                    .andExpect(status().isOk())\n+                    .andReturn().getResponse().getContentAsString();\n+\n+            ElasticIpRangeInfoWrapper response = mapper.readValue(responseStr, ElasticIpRangeInfoWrapper.class);\n+            Assert.assertEquals(UnitTestConfig.elasticIpRange1, response.getElasticIpRange().getId());\n+            Assert.assertEquals(UnitTestConfig.elasticIpRangeStart1,\n+                    response.getElasticIpRange().getAllocationRanges().get(0).getStart());\n+            Assert.assertEquals(UnitTestConfig.elasticIpRangeEnd1,\n+                    response.getElasticIpRange().getAllocationRanges().get(0).getEnd());\n+\n+            // create ipv6 elastic ip range\n+            List<ElasticIpRange.AllocationRange> allocationRangesIpv6 = new ArrayList<>();\n+            allocationRangesIpv6.add(new ElasticIpRange.AllocationRange(\n+                    UnitTestConfig.elasticIpRangeStart2,\n+                    UnitTestConfig.elasticIpRangeEnd2));\n+\n+            ElasticIpRange eipRangeIpv6 = new ElasticIpRange(\n+                    UnitTestConfig.elasticIpRange2,\n+                    UnitTestConfig.elasticIpRangeName2,\n+                    UnitTestConfig.elasticIpRangeDescription2,\n+                    UnitTestConfig.elasticIpVersion2,\n+                    allocationRangesIpv6);\n+\n+            ElasticIpRangeInfoWrapper rangeRequestIpv6 = new ElasticIpRangeInfoWrapper(new ElasticIpRangeInfo(eipRangeIpv6));\n+            String rangeRequestIpv6Str = mapper.writeValueAsString(rangeRequestIpv6);\n+\n+            this.mockMvc.perform(post(createRangeUri).contentType(MediaType.APPLICATION_JSON)\n+                    .content(rangeRequestIpv6Str))\n+                    .andDo(print())\n+                    .andExpect(status().isCreated())\n+                    .andExpect(MockMvcResultMatchers.jsonPath(\"$.elasticip-range.id\")\n+                            .value(UnitTestConfig.elasticIpRange2));\n+\n+            // get the ipv6 elastic ip range and check cidrs\n+            getEipRangeUri = \"/elasticip-ranges/\" + UnitTestConfig.elasticIpRange2;\n+            responseStr = this.mockMvc.perform(get(getEipRangeUri))\n+                    .andDo(print())\n+                    .andExpect(status().isOk())\n+                    .andReturn().getResponse().getContentAsString();\n+\n+            response = mapper.readValue(responseStr, ElasticIpRangeInfoWrapper.class);\n+            Assert.assertEquals(UnitTestConfig.elasticIpRange2, response.getElasticIpRange().getId());\n+            Assert.assertEquals(UnitTestConfig.elasticIpRangeStart2,\n+                    response.getElasticIpRange().getAllocationRanges().get(0).getStart());\n+            Assert.assertEquals(UnitTestConfig.elasticIpRangeEnd2,\n+                    response.getElasticIpRange().getAllocationRanges().get(0).getEnd());\n+\n+        } catch (Exception e) {\n+            e.printStackTrace();\n+            throw e;\n+        }\n+    }\n+\n+    private void cleanRange() throws Exception {\n+        try {\n+            String deleteRangeUri = \"/elasticip-ranges/\" + UnitTestConfig.elasticIpRange1;\n+            this.mockMvc.perform(delete(deleteRangeUri))\n+                    .andDo(print())\n+                    .andExpect(status().isOk());\n+\n+            deleteRangeUri = \"/elasticip-ranges/\" + UnitTestConfig.elasticIpRange2;\n+            this.mockMvc.perform(delete(deleteRangeUri))\n+                    .andDo(print())\n+                    .andExpect(status().isOk());\n+\n+        } catch (Exception e) {\n+            e.printStackTrace();\n+            throw e;\n+        }\n+    }\n+\n+    private void showIPv4AllocationInfo() throws Exception {\n+        try {\n+            ICache<String, ElasticIpAvailableBucketsSet> availableBuckets = cacheFactor.getCache(\n+                    ElasticIpAvailableBucketsSet.class);\n+            System.out.print(\"\\nIpv4 available buckets: \\n\");\n+            for (Map.Entry<String, ElasticIpAvailableBucketsSet> item : availableBuckets.getAll().entrySet()) {\n+                System.out.print(\"Key \" + item.getKey() + \"\\n\");\n+                BitSet bitset = item.getValue().getAvailableBucketsBitset();\n+                int i = bitset.nextSetBit(0);\n+                while (i != -1 && i < 256 ) {\n+                    System.out.print(i + \" \");\n+                    i = bitset.nextSetBit(i + 1);\n+                }\n+            }\n+\n+            ICache<String, ElasticIpAllocatedIpv4> allocatedIpv4Cache = cacheFactor.getCache(ElasticIpAllocatedIpv4.class);\n+            for (Map.Entry<String, ElasticIpAllocatedIpv4> item : allocatedIpv4Cache.getAll().entrySet()) {\n+                System.out.print(\"\\nIpv4 allocation bucket \" + item.getKey() + \"\\n\");\n+                ElasticIpAllocatedIpv4 loop = item.getValue();\n+                System.out.print(\"Ipv4 allocation bucket allocated ips: \");\n+                for (Long allocatedIp: loop.getAllocatedIps()) {\n+                    System.out.print(Ipv4AddrUtil.longToIpv4(allocatedIp) + \", \");\n+                }\n+                System.out.print(\"\\n Ipv4 allocation bucket available ips: \");\n+                for (Long availableIp: loop.getAvailableIps()) {\n+                    System.out.print(Ipv4AddrUtil.longToIpv4(availableIp) + \", \");\n+                }\n+            }\n+        } catch (Exception e) {\n+            e.printStackTrace();\n+            throw e;\n+        }\n+    }\n+\n+    private void showIPv6AllocationInfo() throws Exception {\n+        try {\n+            ICache<String, ElasticIpAllocatedIpv6> allocatedIpv6Cache = cacheFactor.getCache(ElasticIpAllocatedIpv6.class);\n+            System.out.print(\"\\nIpv6 allocated ips: \\n\");\n+            for (Map.Entry<String, ElasticIpAllocatedIpv6> item : allocatedIpv6Cache.getAll().entrySet()) {\n+                ElasticIpAllocatedIpv6 loop = item.getValue();\n+                System.out.print(loop.getAllocatedIpv6());\n+            }\n+        } catch (Exception e) {\n+            e.printStackTrace();\n+            throw e;\n+        }\n+    }\n+\n+    @Test\n+    public void elasticIp_IpSpecified_create_update_delete() throws Exception {\n+        this.perpareRange();\n+\n+        // create the elastic ip\n+        ElasticIp postRequest = new ElasticIp();\n+        postRequest.setProjectId(UnitTestConfig.projectId1);\n+        postRequest.setElasticIp(UnitTestConfig.elasticIpv4Address1);\n+        postRequest.setElasticIpVersion(UnitTestConfig.elasticIpVersion1);\n+        postRequest.setName(UnitTestConfig.elasticIpName1);\n+        postRequest.setDescription(UnitTestConfig.elasticIpDescription1);\n+\n+        ElasticIpInfoWrapper requestWraper = new ElasticIpInfoWrapper(new ElasticIpInfo(postRequest));\n+        ObjectMapper mapper = new ObjectMapper();\n+        String requestStr =  mapper.writeValueAsString(requestWraper);\n+        String createEipUri = \"/project/\" + UnitTestConfig.projectId1 + \"/elasticips\";\n+        String responseStr = this.mockMvc.perform(post(createEipUri).contentType(MediaType.APPLICATION_JSON)\n+                .content(requestStr))\n+                .andDo(print())\n+                .andExpect(status().isCreated())\n+                .andExpect(MockMvcResultMatchers.jsonPath(\"$.elasticip.elastic_ip\")\n+                        .value(UnitTestConfig.elasticIpv4Address1))\n+                .andReturn().getResponse().getContentAsString();\n+        ElasticIpInfoWrapper response = mapper.readValue(responseStr, ElasticIpInfoWrapper.class);\n+        String elasticIpId = response.getElasticip().getId();\n+\n+        // get the elastic ip and check the ip address\n+        String getEipUri = \"/project/\" + UnitTestConfig.projectId1 + \"/elasticips/\" + elasticIpId;\n+        responseStr = this.mockMvc.perform(get(getEipUri))\n+                .andDo(print())\n+                .andExpect(status().isOk())\n+                .andReturn().getResponse().getContentAsString();\n+\n+        response = mapper.readValue(responseStr, ElasticIpInfoWrapper.class);\n+        Assert.assertEquals(UnitTestConfig.elasticIpv4Address1, response.getElasticip().getElasticIp());\n+        Assert.assertEquals(UnitTestConfig.elasticIpVersion1, response.getElasticip().getElasticIpVersion());\n+        Assert.assertEquals(UnitTestConfig.elasticIpName1, response.getElasticip().getName());\n+        Assert.assertEquals(UnitTestConfig.elasticIpDescription1, response.getElasticip().getDescription());\n+        Assert.assertEquals(elasticIpId, response.getElasticip().getId());\n+\n+\n+        // update the address of the elastic ip\n+        ElasticIp putRequest = new ElasticIp();\n+        putRequest.setProjectId(UnitTestConfig.projectId1);\n+        putRequest.setId(elasticIpId);\n+        putRequest.setElasticIp(UnitTestConfig.elasticIpv4Address2);\n+        putRequest.setElasticIpVersion(UnitTestConfig.elasticIpVersion1);\n+\n+        requestWraper = new ElasticIpInfoWrapper(new ElasticIpInfo(putRequest));\n+        mapper = new ObjectMapper();\n+        requestStr =  mapper.writeValueAsString(requestWraper);\n+\n+        String updateEipUri = \"/project/\" + UnitTestConfig.projectId1 + \"/elasticips/\" + elasticIpId;\n+        this.mockMvc.perform(put(updateEipUri).contentType(MediaType.APPLICATION_JSON)\n+                .content(requestStr))\n+                .andDo(print())\n+                .andExpect(status().isBadRequest());\n+\n+        // this.showIPv4AllocationInfo();\n+\n+        // delete the elastic ip\n+        String deleteEipUri = \"/project/\" + UnitTestConfig.projectId1 + \"/elasticips/\" + elasticIpId;\n+        this.mockMvc.perform(delete(deleteEipUri))\n+                .andDo(print())\n+                .andExpect(status().isOk());\n+\n+        // this.showIPv4AllocationInfo();\n+\n+        // check the elastic ip does not exist\n+        this.mockMvc.perform(get(deleteEipUri))\n+                .andDo(print())\n+                .andExpect(status().isNotFound());\n+\n+        this.cleanRange();\n+    }\n+\n+    @Test\n+    public void elasticIp_IpNotSpecified_create_delete() throws Exception {\n+        this.perpareRange();\n+\n+        // create the elastic ip\n+        ElasticIp postRequest = new ElasticIp();\n+        postRequest.setProjectId(UnitTestConfig.projectId1);\n+\n+        ElasticIpInfoWrapper requestWraper = new ElasticIpInfoWrapper(new ElasticIpInfo(postRequest));\n+        ObjectMapper mapper = new ObjectMapper();\n+        String requestStr =  mapper.writeValueAsString(requestWraper);\n+        String createEipUri = \"/project/\" + UnitTestConfig.projectId1 + \"/elasticips\";\n+        String responseStr = this.mockMvc.perform(post(createEipUri).contentType(MediaType.APPLICATION_JSON)\n+                .content(requestStr))\n+                .andDo(print())\n+                .andExpect(status().isCreated())\n+                .andReturn().getResponse().getContentAsString();\n+        ElasticIpInfoWrapper response = mapper.readValue(responseStr, ElasticIpInfoWrapper.class);\n+        String elasticIpId = response.getElasticip().getId();\n+\n+        // check the elastic ip exists\n+        String getEipUri = \"/project/\" + UnitTestConfig.projectId1 + \"/elasticips/\" + elasticIpId;\n+        this.mockMvc.perform(get(getEipUri))\n+                .andDo(print())\n+                .andExpect(status().isOk());\n+\n+        // this.showIPv4AllocationInfo();\n+\n+        // delete the elastic ip\n+        String deleteEipUri = \"/project/\" + UnitTestConfig.projectId1 + \"/elasticips/\" + elasticIpId;\n+        this.mockMvc.perform(delete(deleteEipUri))\n+                .andDo(print())\n+                .andExpect(status().isOk());\n+\n+        // this.showIPv4AllocationInfo();\n+\n+        // check the elastic ip does not exist\n+        this.mockMvc.perform(get(deleteEipUri))\n+                .andDo(print())\n+                .andExpect(status().isNotFound());\n+\n+        this.cleanRange();\n+    }\n+\n+    @Test\n+    public void elasticIp_Ipv6Specified_create_update_delete() throws Exception {\n+        this.perpareRange();\n+\n+        // create the elastic ip (version IPv6)\n+        ElasticIp postRequest = new ElasticIp();\n+        postRequest.setProjectId(UnitTestConfig.projectId1);\n+        postRequest.setElasticIp(UnitTestConfig.elasticIpv6Address1);\n+        postRequest.setElasticIpVersion(UnitTestConfig.elasticIpVersion2);\n+        postRequest.setName(UnitTestConfig.elasticIpName2);\n+        postRequest.setDescription(UnitTestConfig.elasticIpDescription2);\n+\n+        this.showIPv6AllocationInfo();\n+\n+        ElasticIpInfoWrapper requestWraper = new ElasticIpInfoWrapper(new ElasticIpInfo(postRequest));\n+        ObjectMapper mapper = new ObjectMapper();\n+        String requestStr =  mapper.writeValueAsString(requestWraper);\n+        String createEipUri = \"/project/\" + UnitTestConfig.projectId1 + \"/elasticips\";\n+        String responseStr = this.mockMvc.perform(post(createEipUri).contentType(MediaType.APPLICATION_JSON)\n+                .content(requestStr))\n+                .andDo(print())\n+                .andExpect(status().isCreated())\n+                .andExpect(MockMvcResultMatchers.jsonPath(\"$.elasticip.elastic_ip\")\n+                        .value(UnitTestConfig.elasticIpv6Address1))\n+                .andReturn().getResponse().getContentAsString();\n+        ElasticIpInfoWrapper response = mapper.readValue(responseStr, ElasticIpInfoWrapper.class);\n+        String elasticIpId = response.getElasticip().getId();\n+\n+        // get the elastic ip and check the ip address\n+        String getEipUri = \"/project/\" + UnitTestConfig.projectId1 + \"/elasticips/\" + elasticIpId;\n+        responseStr = this.mockMvc.perform(get(getEipUri))\n+                .andDo(print())\n+                .andExpect(status().isOk())\n+                .andReturn().getResponse().getContentAsString();\n+\n+        response = mapper.readValue(responseStr, ElasticIpInfoWrapper.class);\n+        Assert.assertEquals(UnitTestConfig.elasticIpv6Address1, response.getElasticip().getElasticIp());\n+        Assert.assertEquals(UnitTestConfig.elasticIpVersion2, response.getElasticip().getElasticIpVersion());\n+        Assert.assertEquals(UnitTestConfig.elasticIpName2, response.getElasticip().getName());\n+        Assert.assertEquals(UnitTestConfig.elasticIpDescription2, response.getElasticip().getDescription());\n+        Assert.assertEquals(elasticIpId, response.getElasticip().getId());\n+\n+        // update the address of the elastic ip\n+        ElasticIp putRequest = new ElasticIp();\n+        putRequest.setProjectId(UnitTestConfig.projectId1);\n+        putRequest.setId(elasticIpId);\n+        putRequest.setElasticIp(UnitTestConfig.elasticIpv6Address2);\n+        putRequest.setElasticIpVersion(UnitTestConfig.elasticIpVersion2);\n+\n+        requestWraper = new ElasticIpInfoWrapper(new ElasticIpInfo(putRequest));\n+        mapper = new ObjectMapper();\n+        requestStr =  mapper.writeValueAsString(requestWraper);\n+\n+        String updateEipUri = \"/project/\" + UnitTestConfig.projectId1 + \"/elasticips/\" + elasticIpId;\n+        this.mockMvc.perform(put(updateEipUri).contentType(MediaType.APPLICATION_JSON)\n+                .content(requestStr))\n+                .andDo(print())\n+                .andExpect(status().isBadRequest());\n+\n+        // this.showIPv6AllocationInfo();\n+\n+        // delete the elastic ip\n+        String deleteEipUri = \"/project/\" + UnitTestConfig.projectId1 + \"/elasticips/\" + elasticIpId;\n+        this.mockMvc.perform(delete(deleteEipUri))\n+                .andDo(print())\n+                .andExpect(status().isOk());\n+\n+        // this.showIPv6AllocationInfo();\n+\n+        // check the elastic ip does not exist\n+        this.mockMvc.perform(get(deleteEipUri))\n+                .andDo(print())\n+                .andExpect(status().isNotFound());\n+\n+        this.cleanRange();\n+    }\n+\n+    @Test\n+    public void elasticIp_Ipv6NotSpecified_create_delete() throws Exception {\n+        this.perpareRange();\n+\n+        // create the elastic ip (version IPv6)\n+        ElasticIp postRequest = new ElasticIp();\n+        postRequest.setProjectId(UnitTestConfig.projectId1);\n+        postRequest.setElasticIpVersion(UnitTestConfig.elasticIpVersion2);\n+\n+        ElasticIpInfoWrapper requestWraper = new ElasticIpInfoWrapper(new ElasticIpInfo(postRequest));\n+        ObjectMapper mapper = new ObjectMapper();\n+        String requestStr =  mapper.writeValueAsString(requestWraper);\n+        String createEipUri = \"/project/\" + UnitTestConfig.projectId1 + \"/elasticips\";\n+        String responseStr = this.mockMvc.perform(post(createEipUri).contentType(MediaType.APPLICATION_JSON)\n+                .content(requestStr))\n+                .andDo(print())\n+                .andExpect(status().isCreated())\n+                .andExpect(MockMvcResultMatchers.jsonPath(\"$.elasticip.elastic_ip_version\")\n+                        .value(UnitTestConfig.elasticIpVersion2))\n+                .andReturn().getResponse().getContentAsString();\n+        ElasticIpInfoWrapper response = mapper.readValue(responseStr, ElasticIpInfoWrapper.class);\n+        String elasticIpId = response.getElasticip().getId();\n+        String ipv6Address = response.getElasticip().getElasticIp();\n+\n+        // get the elastic ip and check the ip address\n+        String getEipUri = \"/project/\" + UnitTestConfig.projectId1 + \"/elasticips/\" + elasticIpId;\n+        responseStr = this.mockMvc.perform(get(getEipUri))\n+                .andDo(print())\n+                .andExpect(status().isOk())\n+                .andReturn().getResponse().getContentAsString();\n+\n+        response = mapper.readValue(responseStr, ElasticIpInfoWrapper.class);\n+        Assert.assertEquals(ipv6Address, response.getElasticip().getElasticIp());\n+        Assert.assertEquals(UnitTestConfig.elasticIpVersion2, response.getElasticip().getElasticIpVersion());\n+        Assert.assertEquals(elasticIpId, response.getElasticip().getId());\n+\n+        // delete the elastic ip\n+        String deleteEipUri = \"/project/\" + UnitTestConfig.projectId1 + \"/elasticips/\" + elasticIpId;\n+        this.mockMvc.perform(delete(deleteEipUri))\n+                .andDo(print())\n+                .andExpect(status().isOk());\n+\n+        // this.showIPv6AllocationInfo();\n+\n+        // check the elastic ip does not exist\n+        this.mockMvc.perform(get(deleteEipUri))\n+                .andDo(print())\n+                .andExpect(status().isNotFound());\n+\n+        this.cleanRange();\n+    }\n+\n+    @Test\n+    public void elasticIpRange_ipv4Range_update_delete() throws Exception {\n+        this.perpareRange();\n+\n+        // create an Ipv4 elastic ip\n+        ElasticIp postRequest = new ElasticIp();\n+        postRequest.setProjectId(UnitTestConfig.projectId1);\n+        postRequest.setElasticIp(UnitTestConfig.elasticIpv4Address1);\n+        postRequest.setElasticIpVersion(UnitTestConfig.elasticIpVersion1);\n+\n+        ElasticIpInfoWrapper requestWraper = new ElasticIpInfoWrapper(new ElasticIpInfo(postRequest));\n+        ObjectMapper mapper = new ObjectMapper();\n+        String requestStr =  mapper.writeValueAsString(requestWraper);\n+        String createEipUri = \"/project/\" + UnitTestConfig.projectId1 + \"/elasticips\";\n+        String responseStr = this.mockMvc.perform(post(createEipUri).contentType(MediaType.APPLICATION_JSON)\n+                .content(requestStr))\n+                .andDo(print())\n+                .andExpect(status().isCreated())\n+                .andReturn().getResponse().getContentAsString();\n+        ElasticIpInfoWrapper response = mapper.readValue(responseStr, ElasticIpInfoWrapper.class);\n+        String elasticIpId = response.getElasticip().getId();\n+\n+        // try to delete the range\n+        String deleteRangeUri = \"/elasticip-ranges/\" + UnitTestConfig.elasticIpRange1;\n+        this.mockMvc.perform(delete(deleteRangeUri))\n+                .andDo(print())\n+                .andExpect(status().isNotAcceptable());\n+\n+        // try to update the allocation ranges to new ranges\n+        ElasticIpRange putRequest = new ElasticIpRange();\n+\n+        List<ElasticIpRange.AllocationRange> allocationRanges = new ArrayList<>();\n+        allocationRanges.add(new ElasticIpRange.AllocationRange(\n+                UnitTestConfig.elasticIpRangeStart3,\n+                UnitTestConfig.elasticIpRangeEnd3));\n+        putRequest.setAllocationRanges(allocationRanges);\n+        putRequest.setId(UnitTestConfig.elasticIpRange1);\n+\n+        ElasticIpRangeInfoWrapper rangeRequestWraper = new ElasticIpRangeInfoWrapper(new ElasticIpRangeInfo(putRequest));\n+        mapper = new ObjectMapper();\n+        requestStr =  mapper.writeValueAsString(rangeRequestWraper);\n+        String updateEipRangeUri = \"/elasticip-ranges/\" + UnitTestConfig.elasticIpRange1;\n+        this.mockMvc.perform(put(updateEipRangeUri).contentType(MediaType.APPLICATION_JSON)\n+                .content(requestStr))\n+                .andDo(print())\n+                .andExpect(status().isNotAcceptable());\n+\n+        // add new range to allocation ranges\n+        putRequest = new ElasticIpRange();\n+        allocationRanges = new ArrayList<>();\n+        allocationRanges.add(new ElasticIpRange.AllocationRange(\n+                UnitTestConfig.elasticIpRangeStart1,\n+                UnitTestConfig.elasticIpRangeEnd1));\n+        allocationRanges.add(new ElasticIpRange.AllocationRange(\n+                UnitTestConfig.elasticIpRangeStart3,\n+                UnitTestConfig.elasticIpRangeEnd3));\n+        putRequest.setAllocationRanges(allocationRanges);\n+        putRequest.setId(UnitTestConfig.elasticIpRange1);\n+\n+        rangeRequestWraper = new ElasticIpRangeInfoWrapper(new ElasticIpRangeInfo(putRequest));\n+        mapper = new ObjectMapper();\n+        requestStr =  mapper.writeValueAsString(rangeRequestWraper);\n+        updateEipRangeUri = \"/elasticip-ranges/\" + UnitTestConfig.elasticIpRange1;\n+        responseStr = this.mockMvc.perform(put(updateEipRangeUri).contentType(MediaType.APPLICATION_JSON)\n+                .content(requestStr))\n+                .andDo(print())\n+                .andExpect(status().isOk())\n+                .andReturn().getResponse().getContentAsString();\n+        ElasticIpRangeInfoWrapper rangeResponse = mapper.readValue(responseStr, ElasticIpRangeInfoWrapper.class);\n+        List<ElasticIpRange.AllocationRange> resultRanges = rangeResponse.getElasticIpRange().getAllocationRanges();\n+        Assert.assertEquals(2, resultRanges.size());\n+\n+        // create an new Ipv4 elastic ip using new ranges\n+        postRequest = new ElasticIp();\n+        postRequest.setProjectId(UnitTestConfig.projectId1);\n+        postRequest.setElasticIp(UnitTestConfig.elasticIpv4Address3);\n+        postRequest.setElasticIpVersion(UnitTestConfig.elasticIpVersion1);\n+\n+        requestWraper = new ElasticIpInfoWrapper(new ElasticIpInfo(postRequest));\n+        mapper = new ObjectMapper();\n+        requestStr =  mapper.writeValueAsString(requestWraper);\n+        createEipUri = \"/project/\" + UnitTestConfig.projectId1 + \"/elasticips\";\n+        responseStr = this.mockMvc.perform(post(createEipUri).contentType(MediaType.APPLICATION_JSON)\n+                .content(requestStr))\n+                .andDo(print())\n+                .andExpect(status().isCreated())\n+                .andReturn().getResponse().getContentAsString();\n+        response = mapper.readValue(responseStr, ElasticIpInfoWrapper.class);\n+        String elasticIpId2 = response.getElasticip().getId();\n+\n+        // delete the new created elastic ip\n+        String deleteEipUri = \"/project/\" + UnitTestConfig.projectId1 + \"/elasticips/\" + elasticIpId2;\n+        this.mockMvc.perform(delete(deleteEipUri))\n+                .andDo(print())\n+                .andExpect(status().isOk());\n+\n+        // remove a range from allocation ranges\n+        putRequest = new ElasticIpRange();\n+        allocationRanges = new ArrayList<>();\n+        allocationRanges.add(new ElasticIpRange.AllocationRange(\n+                UnitTestConfig.elasticIpRangeStart1,\n+                UnitTestConfig.elasticIpRangeEnd1));\n+        putRequest.setAllocationRanges(allocationRanges);\n+        putRequest.setId(UnitTestConfig.elasticIpRange1);\n+\n+        rangeRequestWraper = new ElasticIpRangeInfoWrapper(new ElasticIpRangeInfo(putRequest));\n+        mapper = new ObjectMapper();\n+        requestStr =  mapper.writeValueAsString(rangeRequestWraper);\n+        updateEipRangeUri = \"/elasticip-ranges/\" + UnitTestConfig.elasticIpRange1;\n+        responseStr = this.mockMvc.perform(put(updateEipRangeUri).contentType(MediaType.APPLICATION_JSON)\n+                .content(requestStr))\n+                .andDo(print())\n+                .andExpect(status().isOk())\n+                .andReturn().getResponse().getContentAsString();\n+        rangeResponse = mapper.readValue(responseStr, ElasticIpRangeInfoWrapper.class);\n+        resultRanges = rangeResponse.getElasticIpRange().getAllocationRanges();\n+        Assert.assertEquals(1, resultRanges.size());\n+\n+        // delete the elastic ip\n+        deleteEipUri = \"/project/\" + UnitTestConfig.projectId1 + \"/elasticips/\" + elasticIpId;\n+        this.mockMvc.perform(delete(deleteEipUri))\n+                .andDo(print())\n+                .andExpect(status().isOk());\n+\n+        this.cleanRange();\n+    }\n+\n+    @Test\n+    public void elasticIpRange_ipv6Range_update_delete() throws Exception {\n+        this.perpareRange();\n+\n+        // create an Ipv6 elastic ip\n+        ElasticIp postRequest = new ElasticIp();\n+        postRequest.setProjectId(UnitTestConfig.projectId1);\n+        postRequest.setElasticIp(UnitTestConfig.elasticIpv6Address1);\n+        postRequest.setElasticIpVersion(UnitTestConfig.elasticIpVersion2);\n+\n+        ElasticIpInfoWrapper requestWraper = new ElasticIpInfoWrapper(new ElasticIpInfo(postRequest));\n+        ObjectMapper mapper = new ObjectMapper();\n+        String requestStr =  mapper.writeValueAsString(requestWraper);\n+        String createEipUri = \"/project/\" + UnitTestConfig.projectId1 + \"/elasticips\";\n+        String responseStr = this.mockMvc.perform(post(createEipUri).contentType(MediaType.APPLICATION_JSON)\n+                .content(requestStr))\n+                .andDo(print())\n+                .andExpect(status().isCreated())\n+                .andReturn().getResponse().getContentAsString();\n+        ElasticIpInfoWrapper response = mapper.readValue(responseStr, ElasticIpInfoWrapper.class);\n+        String elasticIpId = response.getElasticip().getId();\n+\n+        // try to delete the range\n+        String deleteRangeUri = \"/elasticip-ranges/\" + UnitTestConfig.elasticIpRange2;\n+        this.mockMvc.perform(delete(deleteRangeUri))\n+                .andDo(print())\n+                .andExpect(status().isNotAcceptable());\n+\n+        // try to update the allocation ranges to new ranges\n+        ElasticIpRange putRequest = new ElasticIpRange();\n+\n+        List<ElasticIpRange.AllocationRange> allocationRanges = new ArrayList<>();\n+        allocationRanges.add(new ElasticIpRange.AllocationRange(\n+                UnitTestConfig.elasticIpRangeStart4,\n+                UnitTestConfig.elasticIpRangeEnd4));\n+        putRequest.setIpVersion(UnitTestConfig.elasticIpRangeIpVersion2);\n+        putRequest.setAllocationRanges(allocationRanges);\n+        putRequest.setId(UnitTestConfig.elasticIpRange2);\n+\n+        ElasticIpRangeInfoWrapper rangeRequestWraper = new ElasticIpRangeInfoWrapper(new ElasticIpRangeInfo(putRequest));\n+        mapper = new ObjectMapper();\n+        requestStr =  mapper.writeValueAsString(rangeRequestWraper);\n+        String updateEipRangeUri = \"/elasticip-ranges/\" + UnitTestConfig.elasticIpRange2;\n+        this.mockMvc.perform(put(updateEipRangeUri).contentType(MediaType.APPLICATION_JSON)\n+                .content(requestStr))\n+                .andDo(print())\n+                .andExpect(status().isNotAcceptable());\n+\n+        // add new range to allocation ranges\n+        putRequest = new ElasticIpRange();\n+        allocationRanges = new ArrayList<>();\n+        allocationRanges.add(new ElasticIpRange.AllocationRange(\n+                UnitTestConfig.elasticIpRangeStart2,\n+                UnitTestConfig.elasticIpRangeEnd2));\n+        allocationRanges.add(new ElasticIpRange.AllocationRange(\n+                UnitTestConfig.elasticIpRangeStart4,\n+                UnitTestConfig.elasticIpRangeEnd4));\n+        putRequest.setIpVersion(UnitTestConfig.elasticIpRangeIpVersion2);\n+        putRequest.setAllocationRanges(allocationRanges);\n+        putRequest.setId(UnitTestConfig.elasticIpRange2);\n+\n+        rangeRequestWraper = new ElasticIpRangeInfoWrapper(new ElasticIpRangeInfo(putRequest));\n+        mapper = new ObjectMapper();\n+        requestStr =  mapper.writeValueAsString(rangeRequestWraper);\n+        updateEipRangeUri = \"/elasticip-ranges/\" + UnitTestConfig.elasticIpRange2;\n+        responseStr = this.mockMvc.perform(put(updateEipRangeUri).contentType(MediaType.APPLICATION_JSON)\n+                .content(requestStr))\n+                .andDo(print())\n+                .andExpect(status().isOk())\n+                .andReturn().getResponse().getContentAsString();\n+        ElasticIpRangeInfoWrapper rangeResponse = mapper.readValue(responseStr, ElasticIpRangeInfoWrapper.class);\n+        List<ElasticIpRange.AllocationRange> resultRanges = rangeResponse.getElasticIpRange().getAllocationRanges();\n+        Assert.assertEquals(2, resultRanges.size());\n+\n+        // create an Ipv6 elastic ip using new ranges\n+        postRequest = new ElasticIp();\n+        postRequest.setProjectId(UnitTestConfig.projectId1);\n+        postRequest.setElasticIp(UnitTestConfig.elasticIpv6Address3);\n+        postRequest.setElasticIpVersion(UnitTestConfig.elasticIpVersion2);\n+\n+        requestWraper = new ElasticIpInfoWrapper(new ElasticIpInfo(postRequest));\n+        mapper = new ObjectMapper();\n+        requestStr =  mapper.writeValueAsString(requestWraper);\n+        createEipUri = \"/project/\" + UnitTestConfig.projectId1 + \"/elasticips\";\n+        responseStr = this.mockMvc.perform(post(createEipUri).contentType(MediaType.APPLICATION_JSON)\n+                .content(requestStr))\n+                .andDo(print())\n+                .andExpect(status().isCreated())\n+                .andReturn().getResponse().getContentAsString();\n+        response = mapper.readValue(responseStr, ElasticIpInfoWrapper.class);\n+        String elasticIpId2 = response.getElasticip().getId();\n+\n+        // delete the new created elastic ip\n+        String deleteEipUri = \"/project/\" + UnitTestConfig.projectId1 + \"/elasticips/\" + elasticIpId2;\n+        this.mockMvc.perform(delete(deleteEipUri))\n+                .andDo(print())\n+                .andExpect(status().isOk());\n+\n+        // remove a range from allocation ranges\n+        putRequest = new ElasticIpRange();\n+        allocationRanges = new ArrayList<>();\n+        allocationRanges.add(new ElasticIpRange.AllocationRange(\n+                UnitTestConfig.elasticIpRangeStart2,\n+                UnitTestConfig.elasticIpRangeEnd2));\n+        putRequest.setAllocationRanges(allocationRanges);\n+        putRequest.setIpVersion(UnitTestConfig.elasticIpRangeIpVersion2);\n+        putRequest.setId(UnitTestConfig.elasticIpRange2);\n+\n+        rangeRequestWraper = new ElasticIpRangeInfoWrapper(new ElasticIpRangeInfo(putRequest));\n+        mapper = new ObjectMapper();\n+        requestStr =  mapper.writeValueAsString(rangeRequestWraper);\n+        updateEipRangeUri = \"/elasticip-ranges/\" + UnitTestConfig.elasticIpRange2;\n+        responseStr = this.mockMvc.perform(put(updateEipRangeUri).contentType(MediaType.APPLICATION_JSON)\n+                .content(requestStr))\n+                .andDo(print())\n+                .andExpect(status().isOk())\n+                .andReturn().getResponse().getContentAsString();\n+        rangeResponse = mapper.readValue(responseStr, ElasticIpRangeInfoWrapper.class);\n+        resultRanges = rangeResponse.getElasticIpRange().getAllocationRanges();\n+        Assert.assertEquals(1, resultRanges.size());\n+\n+        // delete the elastic ip\n+        deleteEipUri = \"/project/\" + UnitTestConfig.projectId1 + \"/elasticips/\" + elasticIpId;\n+        this.mockMvc.perform(delete(deleteEipUri))\n+                .andDo(print())\n+                .andExpect(status().isOk());\n+\n+        this.cleanRange();\n+    }\n+\n+    @Test\n+    public void elasticIp_updateDns() throws Exception {\n+        this.perpareRange();\n+\n+        // create the elastic ip\n+        ElasticIp postRequest = new ElasticIp();\n+        postRequest.setProjectId(UnitTestConfig.projectId1);\n+        postRequest.setElasticIpVersion(UnitTestConfig.elasticIpVersion1);\n+\n+        ElasticIpInfoWrapper requestWraper = new ElasticIpInfoWrapper(new ElasticIpInfo(postRequest));\n+        ObjectMapper mapper = new ObjectMapper();\n+        String requestStr =  mapper.writeValueAsString(requestWraper);\n+        String createEipUri = \"/project/\" + UnitTestConfig.projectId1 + \"/elasticips\";\n+        String responseStr = this.mockMvc.perform(post(createEipUri).contentType(MediaType.APPLICATION_JSON)\n+                .content(requestStr))\n+                .andDo(print())\n+                .andExpect(status().isCreated())\n+                .andReturn().getResponse().getContentAsString();\n+        ElasticIpInfoWrapper response = mapper.readValue(responseStr, ElasticIpInfoWrapper.class);\n+        String elasticIpId = response.getElasticip().getId();\n+\n+        // get the elastic ip and check dns config is empty\n+        String getEipUri = \"/project/\" + UnitTestConfig.projectId1 + \"/elasticips/\" + elasticIpId;\n+        responseStr = this.mockMvc.perform(get(getEipUri))\n+                .andDo(print())\n+                .andExpect(status().isOk())\n+                .andReturn().getResponse().getContentAsString();\n+\n+        response = mapper.readValue(responseStr, ElasticIpInfoWrapper.class);\n+        Assert.assertEquals(\"\", response.getElasticip().getDnsDomain());\n+        Assert.assertEquals(\"\", response.getElasticip().getDnsName());\n+\n+        // update dns config of the elastic ip\n+        ElasticIp putRequest = new ElasticIp();\n+        putRequest.setProjectId(UnitTestConfig.projectId1);\n+        putRequest.setId(elasticIpId);\n+        putRequest.setDnsDomain(UnitTestConfig.elasticIpDnsDomain1);\n+        putRequest.setDnsName(UnitTestConfig.elasticIpDnsName1);\n+\n+        requestWraper = new ElasticIpInfoWrapper(new ElasticIpInfo(putRequest));\n+        mapper = new ObjectMapper();\n+        requestStr =  mapper.writeValueAsString(requestWraper);\n+\n+        String updateEipUri = \"/project/\" + UnitTestConfig.projectId1 + \"/elasticips/\" + elasticIpId;\n+        this.mockMvc.perform(put(updateEipUri).contentType(MediaType.APPLICATION_JSON)\n+                .content(requestStr))\n+                .andDo(print())\n+                .andExpect(status().isOk());\n+\n+        // get the elastic ip and check dns config success\n+        getEipUri = \"/project/\" + UnitTestConfig.projectId1 + \"/elasticips/\" + elasticIpId;\n+        responseStr = this.mockMvc.perform(get(getEipUri))\n+                .andDo(print())\n+                .andExpect(status().isOk())\n+                .andExpect(MockMvcResultMatchers.jsonPath(\"$.elasticip.dns_domain\")\n+                        .value(UnitTestConfig.elasticIpDnsDomain1))\n+                .andExpect(MockMvcResultMatchers.jsonPath(\"$.elasticip.dns_name\")\n+                        .value(UnitTestConfig.elasticIpDnsName1))\n+                .andReturn().getResponse().getContentAsString();\n+\n+        response = mapper.readValue(responseStr, ElasticIpInfoWrapper.class);\n+        Assert.assertEquals(UnitTestConfig.elasticIpDnsDomain1, response.getElasticip().getDnsDomain());\n+        Assert.assertEquals(UnitTestConfig.elasticIpDnsName1, response.getElasticip().getDnsName());\n+\n+        // update other config of the elastic ip and check dns config not changed\n+        putRequest = new ElasticIp();\n+        putRequest.setProjectId(UnitTestConfig.projectId1);\n+        putRequest.setId(elasticIpId);\n+        putRequest.setDescription(UnitTestConfig.elasticIpRangeDescription1);\n+\n+        requestWraper = new ElasticIpInfoWrapper(new ElasticIpInfo(putRequest));\n+        mapper = new ObjectMapper();\n+        requestStr =  mapper.writeValueAsString(requestWraper);\n+\n+        updateEipUri = \"/project/\" + UnitTestConfig.projectId1 + \"/elasticips/\" + elasticIpId;\n+        this.mockMvc.perform(put(updateEipUri).contentType(MediaType.APPLICATION_JSON)\n+                .content(requestStr))\n+                .andDo(print())\n+                .andExpect(status().isOk())\n+                .andExpect(MockMvcResultMatchers.jsonPath(\"$.elasticip.dns_domain\")\n+                        .value(UnitTestConfig.elasticIpDnsDomain1))\n+                .andExpect(MockMvcResultMatchers.jsonPath(\"$.elasticip.dns_name\")\n+                        .value(UnitTestConfig.elasticIpDnsName1));\n+\n+        // update dns config of the elastic ip to empty str\n+        putRequest = new ElasticIp();\n+        putRequest.setProjectId(UnitTestConfig.projectId1);\n+        putRequest.setId(elasticIpId);\n+        putRequest.setDnsDomain(\"\");\n+        putRequest.setDnsName(\"\");\n+\n+        requestWraper = new ElasticIpInfoWrapper(new ElasticIpInfo(putRequest));\n+        mapper = new ObjectMapper();\n+        requestStr =  mapper.writeValueAsString(requestWraper);\n+\n+        updateEipUri = \"/project/\" + UnitTestConfig.projectId1 + \"/elasticips/\" + elasticIpId;\n+        this.mockMvc.perform(put(updateEipUri).contentType(MediaType.APPLICATION_JSON)\n+                .content(requestStr))\n+                .andDo(print())\n+                .andExpect(status().isOk())\n+                .andExpect(MockMvcResultMatchers.jsonPath(\"$.elasticip.dns_domain\").value(\"\"))\n+                .andExpect(MockMvcResultMatchers.jsonPath(\"$.elasticip.dns_name\").value(\"\"));\n+\n+        // delete the elastic ip\n+        String deleteEipUri = \"/project/\" + UnitTestConfig.projectId1 + \"/elasticips/\" + elasticIpId;\n+        this.mockMvc.perform(delete(deleteEipUri))\n+                .andDo(print())\n+                .andExpect(status().isOk());\n+\n+        this.cleanRange();\n+    }\n+\n+    @Test\n+    public void elasticIp_updateNameAndDescription() throws Exception {\n+        this.perpareRange();\n+\n+        // create the elastic ip\n+        ElasticIp postRequest = new ElasticIp();\n+        postRequest.setProjectId(UnitTestConfig.projectId1);\n+        postRequest.setElasticIpVersion(UnitTestConfig.elasticIpVersion1);\n+\n+        ElasticIpInfoWrapper requestWraper = new ElasticIpInfoWrapper(new ElasticIpInfo(postRequest));\n+        ObjectMapper mapper = new ObjectMapper();\n+        String requestStr =  mapper.writeValueAsString(requestWraper);\n+        String createEipUri = \"/project/\" + UnitTestConfig.projectId1 + \"/elasticips\";\n+        String responseStr = this.mockMvc.perform(post(createEipUri).contentType(MediaType.APPLICATION_JSON)\n+                .content(requestStr))\n+                .andDo(print())\n+                .andExpect(status().isCreated())\n+                .andReturn().getResponse().getContentAsString();\n+        ElasticIpInfoWrapper response = mapper.readValue(responseStr, ElasticIpInfoWrapper.class);\n+        String elasticIpId = response.getElasticip().getId();\n+\n+        // get the elastic ip and check name and description are empty\n+        String getEipUri = \"/project/\" + UnitTestConfig.projectId1 + \"/elasticips/\" + elasticIpId;\n+        responseStr = this.mockMvc.perform(get(getEipUri))\n+                .andDo(print())\n+                .andExpect(status().isOk())\n+                .andReturn().getResponse().getContentAsString();\n+\n+        response = mapper.readValue(responseStr, ElasticIpInfoWrapper.class);\n+        Assert.assertEquals(\"\", response.getElasticip().getName());\n+        Assert.assertEquals(\"\", response.getElasticip().getDescription());\n+\n+        // update name and description of the elastic ip\n+        ElasticIp putRequest = new ElasticIp();\n+        putRequest.setProjectId(UnitTestConfig.projectId1);\n+        putRequest.setId(elasticIpId);\n+        putRequest.setName(UnitTestConfig.elasticIpName1);\n+        putRequest.setDescription(UnitTestConfig.elasticIpDescription1);\n+\n+        requestWraper = new ElasticIpInfoWrapper(new ElasticIpInfo(putRequest));\n+        mapper = new ObjectMapper();\n+        requestStr =  mapper.writeValueAsString(requestWraper);\n+\n+        String updateEipUri = \"/project/\" + UnitTestConfig.projectId1 + \"/elasticips/\" + elasticIpId;\n+        this.mockMvc.perform(put(updateEipUri).contentType(MediaType.APPLICATION_JSON)\n+                .content(requestStr))\n+                .andDo(print())\n+                .andExpect(status().isOk());\n+\n+        // get the elastic ip and check name and descritpion config success\n+        getEipUri = \"/project/\" + UnitTestConfig.projectId1 + \"/elasticips/\" + elasticIpId;\n+        responseStr = this.mockMvc.perform(get(getEipUri))\n+                .andDo(print())\n+                .andExpect(status().isOk())\n+                .andExpect(MockMvcResultMatchers.jsonPath(\"$.elasticip.name\")\n+                        .value(UnitTestConfig.elasticIpName1))\n+                .andExpect(MockMvcResultMatchers.jsonPath(\"$.elasticip.description\")\n+                        .value(UnitTestConfig.elasticIpDescription1))\n+                .andReturn().getResponse().getContentAsString();\n+\n+        response = mapper.readValue(responseStr, ElasticIpInfoWrapper.class);\n+        Assert.assertEquals(UnitTestConfig.elasticIpName1, response.getElasticip().getName());\n+        Assert.assertEquals(UnitTestConfig.elasticIpDescription1, response.getElasticip().getDescription());\n+\n+        // update other config of the elastic ip and name and description not changed\n+        putRequest = new ElasticIp();\n+        putRequest.setProjectId(UnitTestConfig.projectId1);\n+        putRequest.setId(elasticIpId);\n+        putRequest.setDnsDomain(UnitTestConfig.elasticIpDnsDomain1);\n+        putRequest.setDnsName(UnitTestConfig.elasticIpDnsName1);\n+\n+        requestWraper = new ElasticIpInfoWrapper(new ElasticIpInfo(putRequest));\n+        mapper = new ObjectMapper();\n+        requestStr =  mapper.writeValueAsString(requestWraper);\n+\n+        updateEipUri = \"/project/\" + UnitTestConfig.projectId1 + \"/elasticips/\" + elasticIpId;\n+        this.mockMvc.perform(put(updateEipUri).contentType(MediaType.APPLICATION_JSON)\n+                .content(requestStr))\n+                .andDo(print())\n+                .andExpect(status().isOk())\n+                .andExpect(MockMvcResultMatchers.jsonPath(\"$.elasticip.name\")\n+                        .value(UnitTestConfig.elasticIpName1))\n+                .andExpect(MockMvcResultMatchers.jsonPath(\"$.elasticip.description\")\n+                        .value(UnitTestConfig.elasticIpDescription1));\n+\n+        // update name and description of the elastic ip to empty str\n+        putRequest = new ElasticIp();\n+        putRequest.setProjectId(UnitTestConfig.projectId1);\n+        putRequest.setId(elasticIpId);\n+        putRequest.setName(\"\");\n+        putRequest.setDescription(\"\");\n+\n+        requestWraper = new ElasticIpInfoWrapper(new ElasticIpInfo(putRequest));\n+        mapper = new ObjectMapper();\n+        requestStr =  mapper.writeValueAsString(requestWraper);\n+\n+        updateEipUri = \"/project/\" + UnitTestConfig.projectId1 + \"/elasticips/\" + elasticIpId;\n+        this.mockMvc.perform(put(updateEipUri).contentType(MediaType.APPLICATION_JSON)\n+                .content(requestStr))\n+                .andDo(print())\n+                .andExpect(status().isOk())\n+                .andExpect(MockMvcResultMatchers.jsonPath(\"$.elasticip.name\").value(\"\"))\n+                .andExpect(MockMvcResultMatchers.jsonPath(\"$.elasticip.description\").value(\"\"));\n+\n+        // delete the elastic ip\n+        String deleteEipUri = \"/project/\" + UnitTestConfig.projectId1 + \"/elasticips/\" + elasticIpId;\n+        this.mockMvc.perform(delete(deleteEipUri))\n+                .andDo(print())\n+                .andExpect(status().isOk());\n+\n+        this.cleanRange();\n+    }\n+\n+    @Test\n+    public void elasticIpRange_updateNameAndDescription() throws Exception {\n+        this.perpareRange();\n+\n+        // update other config and check name and description not changed\n+        ElasticIpRange putRequest = new ElasticIpRange();\n+        List<ElasticIpRange.AllocationRange> allocationRanges = new ArrayList<>();\n+        allocationRanges.add(new ElasticIpRange.AllocationRange(\n+                UnitTestConfig.elasticIpRangeStart1,\n+                UnitTestConfig.elasticIpRangeEnd1));\n+        allocationRanges.add(new ElasticIpRange.AllocationRange(\n+                UnitTestConfig.elasticIpRangeStart3,\n+                UnitTestConfig.elasticIpRangeEnd3));\n+        putRequest.setAllocationRanges(allocationRanges);\n+        putRequest.setId(UnitTestConfig.elasticIpRange1);\n+\n+        ElasticIpRangeInfoWrapper rangeRequestWraper = new ElasticIpRangeInfoWrapper(new ElasticIpRangeInfo(putRequest));\n+        ObjectMapper mapper = new ObjectMapper();\n+        String requestStr =  mapper.writeValueAsString(rangeRequestWraper);\n+        String updateEipRangeUri = \"/elasticip-ranges/\" + UnitTestConfig.elasticIpRange1;\n+        this.mockMvc.perform(put(updateEipRangeUri).contentType(MediaType.APPLICATION_JSON)\n+                .content(requestStr))\n+                .andDo(print())\n+                .andExpect(status().isOk())\n+                .andExpect(MockMvcResultMatchers.jsonPath(\"$.elasticip-range.name\")\n+                        .value(UnitTestConfig.elasticIpRangeName1))\n+                .andExpect(MockMvcResultMatchers.jsonPath(\"$.elasticip-range.description\")\n+                        .value(UnitTestConfig.elasticIpRangeDescription1));\n+\n+        String getEipUri = \"/elasticip-ranges/\" + UnitTestConfig.elasticIpRange1;\n+        this.mockMvc.perform(get(getEipUri))\n+                .andDo(print())\n+                .andExpect(status().isOk())\n+                .andExpect(MockMvcResultMatchers.jsonPath(\"$.elasticip-range.name\")\n+                        .value(UnitTestConfig.elasticIpRangeName1))\n+                .andExpect(MockMvcResultMatchers.jsonPath(\"$.elasticip-range.description\")\n+                        .value(UnitTestConfig.elasticIpRangeDescription1));\n+\n+        // update name and description of the elastic ip range to empty str\n+        putRequest = new ElasticIpRange();\n+        putRequest.setName(\"\");\n+        putRequest.setDescription(\"\");\n+        putRequest.setId(UnitTestConfig.elasticIpRange1);\n+\n+        rangeRequestWraper = new ElasticIpRangeInfoWrapper(new ElasticIpRangeInfo(putRequest));\n+        mapper = new ObjectMapper();\n+        requestStr =  mapper.writeValueAsString(rangeRequestWraper);\n+        updateEipRangeUri = \"/elasticip-ranges/\" + UnitTestConfig.elasticIpRange1;\n+        this.mockMvc.perform(put(updateEipRangeUri).contentType(MediaType.APPLICATION_JSON)\n+                .content(requestStr))\n+                .andDo(print())\n+                .andExpect(status().isOk())\n+                .andExpect(MockMvcResultMatchers.jsonPath(\"$.elasticip-range.name\")\n+                        .value(\"\"))\n+                .andExpect(MockMvcResultMatchers.jsonPath(\"$.elasticip-range.description\")\n+                        .value(\"\"));\n+\n+        getEipUri = \"/elasticip-ranges/\" + UnitTestConfig.elasticIpRange1;\n+        this.mockMvc.perform(get(getEipUri))\n+                .andDo(print())\n+                .andExpect(status().isOk())\n+                .andExpect(MockMvcResultMatchers.jsonPath(\"$.elasticip-range.name\")\n+                        .value(\"\"))\n+                .andExpect(MockMvcResultMatchers.jsonPath(\"$.elasticip-range.description\")\n+                        .value(\"\"));\n+\n+        this.cleanRange();", "originalCommit": "af3cd287532bdbc64613686582f9370cf952061d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "ad7c06b0b718085034f97e7e749632df49b8f831", "url": "https://github.com/futurewei-cloud/alcor/commit/ad7c06b0b718085034f97e7e749632df49b8f831", "message": "revert pom.xml wrong changes", "committedDate": "2020-07-09T06:16:57Z", "type": "commit"}, {"oid": "410fdccf1d5ac8c85c1f1dd08f4c36376a21b480", "url": "https://github.com/futurewei-cloud/alcor/commit/410fdccf1d5ac8c85c1f1dd08f4c36376a21b480", "message": "Merge pull request #1 from futurewei-cloud/master\n\npull update from source", "committedDate": "2020-05-20T07:08:59Z", "type": "commit"}, {"oid": "9607d43218cb7f6da4e5a49937194f8bb3cb2edd", "url": "https://github.com/futurewei-cloud/alcor/commit/9607d43218cb7f6da4e5a49937194f8bb3cb2edd", "message": "Merge pull request #2 from futurewei-cloud/master\n\nsync original repository codes", "committedDate": "2020-05-23T03:46:29Z", "type": "commit"}, {"oid": "d2f7e537c9dff63b3623d0a4b10b5c448e505d05", "url": "https://github.com/futurewei-cloud/alcor/commit/d2f7e537c9dff63b3623d0a4b10b5c448e505d05", "message": "Merge pull request #3 from futurewei-cloud/master\n\nsyns origin repo", "committedDate": "2020-05-26T12:54:19Z", "type": "commit"}, {"oid": "9d0451df87561ed40be2935d948672854d4b7a7e", "url": "https://github.com/futurewei-cloud/alcor/commit/9d0451df87561ed40be2935d948672854d4b7a7e", "message": "Merge pull request #4 from futurewei-cloud/master\n\nsync codes", "committedDate": "2020-06-10T14:51:39Z", "type": "commit"}, {"oid": "79ada1b01bee01b9d812cb7a71c012e895b7665f", "url": "https://github.com/futurewei-cloud/alcor/commit/79ada1b01bee01b9d812cb7a71c012e895b7665f", "message": "upload elastic ip allocation initial codes", "committedDate": "2020-06-10T15:03:19Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODIwMTY2Nw==", "url": "https://github.com/futurewei-cloud/alcor/pull/243#discussion_r438201667", "bodyText": "Please add the following new plugins to this pom.xml file to enable code coverage report (ref: https://github.com/futurewei-cloud/alcor/pull/241/files#diff-9fe0ed938fde38c66436944093832b38)\n        <plugin>\n             <groupId>org.jacoco</groupId>\n             <artifactId>jacoco-maven-plugin</artifactId>\n             <version>0.8.5</version>\n             <executions>\n                 <execution>\n                     <goals>\n                         <goal>prepare-agent</goal>\n                     </goals>\n                 </execution>\n                 <!-- attached to Maven test phase -->\n                 <execution>\n                     <id>report</id>\n                     <phase>test</phase>\n                     <goals>\n                         <goal>report</goal>\n                     </goals>\n                 </execution>\n             </executions>\n         </plugin>", "author": "xieus", "createdAt": "2020-06-10T15:13:56Z", "path": "services/elastic_ip_manager/pom.xml", "diffHunk": "@@ -0,0 +1,138 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+    <parent>\n+        <groupId>org.springframework.boot</groupId>\n+        <artifactId>spring-boot-starter-parent</artifactId>\n+        <version>2.2.6.RELEASE</version>\n+        <relativePath/> <!-- lookup parent from repository -->\n+    </parent>\n+    <groupId>com.futurewei.alcor</groupId>\n+    <artifactId>elasticipmanager</artifactId>\n+    <version>0.1.0-SNAPSHOT</version>\n+    <name>AlcorElasticIpManager</name>\n+    <description>Alcor Elastic Ip Manager Module</description>\n+\n+    <properties>\n+        <java.version>1.8</java.version>\n+        <swagger.output.dir>${project.build.directory}/swagger</swagger.output.dir>\n+        <swagger2markup.version>1.2.0</swagger2markup.version>\n+    </properties>\n+\n+    <repositories>\n+        <repository>\n+            <snapshots>\n+                <enabled>false</enabled>\n+            </snapshots>\n+            <id>jcenter-releases</id>\n+            <name>jcenter</name>\n+            <url>https://jcenter.bintray.com</url>\n+        </repository>\n+    </repositories>\n+\n+    <dependencies>\n+\n+        <!--Service Basic dependencies-->\n+        <dependency>\n+            <groupId>org.springframework.boot</groupId>\n+            <artifactId>spring-boot-starter-actuator</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.springframework.boot</groupId>\n+            <artifactId>spring-boot-starter-web</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.apache.commons</groupId>\n+            <artifactId>commons-pool2</artifactId>\n+            <version>2.4.2</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.springframework.boot</groupId>\n+            <artifactId>spring-boot-starter-test</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+\n+        <!--Swagger dependencies-->\n+        <dependency>\n+            <groupId>io.springfox</groupId>\n+            <artifactId>springfox-swagger2</artifactId>\n+            <version>2.6.1</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.springfox</groupId>\n+            <artifactId>springfox-swagger-ui</artifactId>\n+            <version>2.2.2</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.github.swagger2markup</groupId>\n+            <artifactId>swagger2markup-spring-restdocs-ext</artifactId>\n+            <version>${swagger2markup.version}</version>\n+            <scope>test</scope>\n+        </dependency>\n+\n+        <!--Internal dependencies-->\n+        <dependency>\n+            <groupId>com.futurewei.alcor</groupId>\n+            <artifactId>common</artifactId>\n+            <version>0.1.0-SNAPSHOT</version>\n+            <scope>compile</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>com.futurewei.alcor</groupId>\n+            <artifactId>schema</artifactId>\n+            <version>0.1.0-SNAPSHOT</version>\n+            <scope>compile</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>com.futurewei.alcor</groupId>\n+            <artifactId>web</artifactId>\n+            <version>0.1.0-SNAPSHOT</version>\n+            <scope>compile</scope>\n+        </dependency>\n+\n+    </dependencies>\n+\n+    <build>\n+        <extensions>\n+            <extension>\n+                <groupId>kr.motd.maven</groupId>\n+                <artifactId>os-maven-plugin</artifactId>\n+                <version>1.4.1.Final</version>\n+            </extension>\n+        </extensions>\n+        <plugins>", "originalCommit": "79ada1b01bee01b9d812cb7a71c012e895b7665f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODIwMzAxMA==", "url": "https://github.com/futurewei-cloud/alcor/pull/243#discussion_r438203010", "bodyText": "Like it.", "author": "xieus", "createdAt": "2020-06-10T15:15:46Z", "path": "lib/src/main/java/com/futurewei/alcor/common/entity/Resource.java", "diffHunk": "@@ -0,0 +1,25 @@\n+package com.futurewei.alcor.common.entity;\r\n+\r\n+import com.fasterxml.jackson.annotation.JsonProperty;\r\n+\r\n+import java.io.Serializable;\r\n+\r\n+public class Resource implements Serializable {\r", "originalCommit": "79ada1b01bee01b9d812cb7a71c012e895b7665f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODIxMzM0OQ==", "url": "https://github.com/futurewei-cloud/alcor/pull/243#discussion_r438213349", "bodyText": "Please consider to make the thread sleep time configurable (in a application.properties file or other configuration file) with a default value of your choice, or keep it in a constant file.", "author": "xieus", "createdAt": "2020-06-10T15:28:08Z", "path": "lib/src/main/java/com/futurewei/alcor/common/db/ignite/IgniteDistributedLock.java", "diffHunk": "@@ -0,0 +1,67 @@\n+package com.futurewei.alcor.common.db.ignite;\r\n+\r\n+import com.futurewei.alcor.common.db.IDistributedLock;\r\n+import com.futurewei.alcor.common.exception.DistributedLockException;\r\n+import com.futurewei.alcor.common.logging.Logger;\r\n+import com.futurewei.alcor.common.logging.LoggerFactory;\r\n+import org.apache.ignite.client.ClientCache;\r\n+import org.apache.ignite.client.ClientException;\r\n+import org.apache.ignite.client.IgniteClient;\r\n+import org.springframework.util.Assert;\r\n+\r\n+import java.util.logging.Level;\r\n+\r\n+public class IgniteDistributedLock implements IDistributedLock {\r\n+    private static final Logger logger = LoggerFactory.getLogger();\r\n+    private String name;\r\n+    private ClientCache<String, String> cache;\r\n+    private IgniteClient igniteClient;\r\n+\r\n+    public IgniteDistributedLock(IgniteClient igniteClient, String name) {\r\n+        this.igniteClient = igniteClient;\r\n+        this.name = name;\r\n+\r\n+        try {\r\n+            cache = igniteClient.getOrCreateCache(name);\r\n+        } catch (ClientException e) {\r\n+            logger.log(Level.WARNING, \"Create distributed lock cache failed:\" + e.getMessage());\r\n+        } catch (Exception e) {\r\n+            logger.log(Level.WARNING, \"Unexpected failure:\" + e.getMessage());\r\n+        }\r\n+\r\n+        Assert.notNull(igniteClient, \"Create distributed lock failed\");\r\n+    }\r\n+\r\n+    @Override\r\n+    public void lock(String lockKey) throws DistributedLockException {\r\n+        Boolean locked = false;\r\n+        String lockKeyWithPrefix = name + \" lock:\" + lockKey;\r\n+\r\n+        try {\r\n+            while (!locked) {\r\n+                locked = cache.putIfAbsent(lockKeyWithPrefix, \"lock\");\r\n+                Assert.notNull(locked, \"Redis lock should not run within a transaction\");\r\n+                if (!locked) {\r\n+                    Thread.sleep(10);\r", "originalCommit": "79ada1b01bee01b9d812cb7a71c012e895b7665f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc2OTA5Mw==", "url": "https://github.com/futurewei-cloud/alcor/pull/243#discussion_r438769093", "bodyText": "Done", "author": "Eric-Yuan", "createdAt": "2020-06-11T13:10:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODIxMzM0OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODIxNDA3MA==", "url": "https://github.com/futurewei-cloud/alcor/pull/243#discussion_r438214070", "bodyText": "\"Redis lock\" => \"Ignite lock\"", "author": "xieus", "createdAt": "2020-06-10T15:29:10Z", "path": "lib/src/main/java/com/futurewei/alcor/common/db/ignite/IgniteDistributedLock.java", "diffHunk": "@@ -0,0 +1,67 @@\n+package com.futurewei.alcor.common.db.ignite;\r\n+\r\n+import com.futurewei.alcor.common.db.IDistributedLock;\r\n+import com.futurewei.alcor.common.exception.DistributedLockException;\r\n+import com.futurewei.alcor.common.logging.Logger;\r\n+import com.futurewei.alcor.common.logging.LoggerFactory;\r\n+import org.apache.ignite.client.ClientCache;\r\n+import org.apache.ignite.client.ClientException;\r\n+import org.apache.ignite.client.IgniteClient;\r\n+import org.springframework.util.Assert;\r\n+\r\n+import java.util.logging.Level;\r\n+\r\n+public class IgniteDistributedLock implements IDistributedLock {\r\n+    private static final Logger logger = LoggerFactory.getLogger();\r\n+    private String name;\r\n+    private ClientCache<String, String> cache;\r\n+    private IgniteClient igniteClient;\r\n+\r\n+    public IgniteDistributedLock(IgniteClient igniteClient, String name) {\r\n+        this.igniteClient = igniteClient;\r\n+        this.name = name;\r\n+\r\n+        try {\r\n+            cache = igniteClient.getOrCreateCache(name);\r\n+        } catch (ClientException e) {\r\n+            logger.log(Level.WARNING, \"Create distributed lock cache failed:\" + e.getMessage());\r\n+        } catch (Exception e) {\r\n+            logger.log(Level.WARNING, \"Unexpected failure:\" + e.getMessage());\r\n+        }\r\n+\r\n+        Assert.notNull(igniteClient, \"Create distributed lock failed\");\r\n+    }\r\n+\r\n+    @Override\r\n+    public void lock(String lockKey) throws DistributedLockException {\r\n+        Boolean locked = false;\r\n+        String lockKeyWithPrefix = name + \" lock:\" + lockKey;\r\n+\r\n+        try {\r\n+            while (!locked) {\r\n+                locked = cache.putIfAbsent(lockKeyWithPrefix, \"lock\");\r\n+                Assert.notNull(locked, \"Redis lock should not run within a transaction\");\r", "originalCommit": "79ada1b01bee01b9d812cb7a71c012e895b7665f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc2OTE3MQ==", "url": "https://github.com/futurewei-cloud/alcor/pull/243#discussion_r438769171", "bodyText": "Done", "author": "Eric-Yuan", "createdAt": "2020-06-11T13:10:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODIxNDA3MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODIxNTE5NA==", "url": "https://github.com/futurewei-cloud/alcor/pull/243#discussion_r438215194", "bodyText": "Recommend to use this.name instead of name.", "author": "xieus", "createdAt": "2020-06-10T15:30:41Z", "path": "lib/src/main/java/com/futurewei/alcor/common/db/ignite/IgniteDistributedLock.java", "diffHunk": "@@ -0,0 +1,67 @@\n+package com.futurewei.alcor.common.db.ignite;\r\n+\r\n+import com.futurewei.alcor.common.db.IDistributedLock;\r\n+import com.futurewei.alcor.common.exception.DistributedLockException;\r\n+import com.futurewei.alcor.common.logging.Logger;\r\n+import com.futurewei.alcor.common.logging.LoggerFactory;\r\n+import org.apache.ignite.client.ClientCache;\r\n+import org.apache.ignite.client.ClientException;\r\n+import org.apache.ignite.client.IgniteClient;\r\n+import org.springframework.util.Assert;\r\n+\r\n+import java.util.logging.Level;\r\n+\r\n+public class IgniteDistributedLock implements IDistributedLock {\r\n+    private static final Logger logger = LoggerFactory.getLogger();\r\n+    private String name;\r\n+    private ClientCache<String, String> cache;\r\n+    private IgniteClient igniteClient;\r\n+\r\n+    public IgniteDistributedLock(IgniteClient igniteClient, String name) {\r\n+        this.igniteClient = igniteClient;\r\n+        this.name = name;\r\n+\r\n+        try {\r\n+            cache = igniteClient.getOrCreateCache(name);\r\n+        } catch (ClientException e) {\r\n+            logger.log(Level.WARNING, \"Create distributed lock cache failed:\" + e.getMessage());\r\n+        } catch (Exception e) {\r\n+            logger.log(Level.WARNING, \"Unexpected failure:\" + e.getMessage());\r\n+        }\r\n+\r\n+        Assert.notNull(igniteClient, \"Create distributed lock failed\");\r\n+    }\r\n+\r\n+    @Override\r\n+    public void lock(String lockKey) throws DistributedLockException {\r\n+        Boolean locked = false;\r\n+        String lockKeyWithPrefix = name + \" lock:\" + lockKey;\r", "originalCommit": "79ada1b01bee01b9d812cb7a71c012e895b7665f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc2OTI0OA==", "url": "https://github.com/futurewei-cloud/alcor/pull/243#discussion_r438769248", "bodyText": "Done", "author": "Eric-Yuan", "createdAt": "2020-06-11T13:10:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODIxNTE5NA=="}], "type": "inlineReview"}, {"oid": "937e54347380c16f87d80a8fb4e3e33986358694", "url": "https://github.com/futurewei-cloud/alcor/commit/937e54347380c16f87d80a8fb4e3e33986358694", "message": "upload elastic ip allocation initial codes", "committedDate": "2020-06-11T13:04:38Z", "type": "commit"}, {"oid": "fe541831861e1dd863a96453e6333b0d76f988ca", "url": "https://github.com/futurewei-cloud/alcor/commit/fe541831861e1dd863a96453e6333b0d76f988ca", "message": "Merge branch 'elastic_ip_minimal' of https://github.com/Eric-Yuan/alcor into elastic_ip_minimal", "committedDate": "2020-06-11T13:08:52Z", "type": "commit"}, {"oid": "e5c1fce893b02e32ef79462ab59937cc09df1412", "url": "https://github.com/futurewei-cloud/alcor/commit/e5c1fce893b02e32ef79462ab59937cc09df1412", "message": "fix compile error", "committedDate": "2020-06-11T13:13:13Z", "type": "commit"}, {"oid": "78baaef96838a6d09a1e90d4958a7a83f85bfcb2", "url": "https://github.com/futurewei-cloud/alcor/commit/78baaef96838a6d09a1e90d4958a7a83f85bfcb2", "message": "Merge pull request #5 from futurewei-cloud/master\n\n[Code Coverage] Added code coverage information for services (#241)", "committedDate": "2020-06-11T13:33:41Z", "type": "commit"}, {"oid": "52be1a8284e1acfbebe203956bf8c18b91c6303d", "url": "https://github.com/futurewei-cloud/alcor/commit/52be1a8284e1acfbebe203956bf8c18b91c6303d", "message": "upload elastic ip allocation initial codes", "committedDate": "2020-06-11T13:34:31Z", "type": "commit"}, {"oid": "b4dc9d318c669a56a332722f13899c641ab3f3e9", "url": "https://github.com/futurewei-cloud/alcor/commit/b4dc9d318c669a56a332722f13899c641ab3f3e9", "message": "upload elastic ip allocation initial codes", "committedDate": "2020-06-11T13:36:04Z", "type": "commit"}, {"oid": "d8d291cd2283fb656f6b77cd6357c22fa8dd068a", "url": "https://github.com/futurewei-cloud/alcor/commit/d8d291cd2283fb656f6b77cd6357c22fa8dd068a", "message": "fix compile error", "committedDate": "2020-06-11T14:03:32Z", "type": "commit"}, {"oid": "bd1d5c22c0171871702ddebacf466262780d673f", "url": "https://github.com/futurewei-cloud/alcor/commit/bd1d5c22c0171871702ddebacf466262780d673f", "message": "Merge branch 'elastic_ip_minimal' of https://github.com/Eric-Yuan/alcor into elastic_ip_minimal", "committedDate": "2020-06-11T14:03:48Z", "type": "commit"}, {"oid": "0f9d34393487cfaf68c4e1444a548822b2e545c7", "url": "https://github.com/futurewei-cloud/alcor/commit/0f9d34393487cfaf68c4e1444a548822b2e545c7", "message": "Merge branch 'elastic_ip_minimal' of https://github.com/Eric-Yuan/alcor into elastic_ip_minimal", "committedDate": "2020-06-11T14:21:22Z", "type": "commit"}, {"oid": "2277d5cd21446aac6452ed33d0ec874534675d6b", "url": "https://github.com/futurewei-cloud/alcor/commit/2277d5cd21446aac6452ed33d0ec874534675d6b", "message": "Merge branch 'elastic_ip_minimal' of https://github.com/Eric-Yuan/alcor into elastic_ip_minimal", "committedDate": "2020-06-11T14:21:32Z", "type": "commit"}, {"oid": "53a7720484770d34f8d633836dd1d589e0488d6f", "url": "https://github.com/futurewei-cloud/alcor/commit/53a7720484770d34f8d633836dd1d589e0488d6f", "message": "Merge branch 'elastic_ip_minimal' of https://github.com/Eric-Yuan/alcor into elastic_ip_minimal", "committedDate": "2020-06-11T14:33:08Z", "type": "commit"}, {"oid": "c37f67188298aca95c0c7f922d171438de4364e1", "url": "https://github.com/futurewei-cloud/alcor/commit/c37f67188298aca95c0c7f922d171438de4364e1", "message": "Merge branch 'elastic_ip_minimal' of https://github.com/Eric-Yuan/alcor into elastic_ip_minimal", "committedDate": "2020-06-11T14:33:16Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODIxOTcwNA==", "url": "https://github.com/futurewei-cloud/alcor/pull/243#discussion_r438219704", "bodyText": "License statement is needed :-)", "author": "xieus", "createdAt": "2020-06-10T15:37:06Z", "path": "services/elastic_ip_manager/src/main/java/com/futurewei/alcor/elasticipmanager/exception/ElasticIpExistsException.java", "diffHunk": "@@ -0,0 +1,8 @@\n+package com.futurewei.alcor.elasticipmanager.exception;\r", "originalCommit": "79ada1b01bee01b9d812cb7a71c012e895b7665f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQ0MzIyNA==", "url": "https://github.com/futurewei-cloud/alcor/pull/243#discussion_r447443224", "bodyText": "Done", "author": "Eric-Yuan", "createdAt": "2020-06-30T06:37:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODIxOTcwNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTMxNzU4MA==", "url": "https://github.com/futurewei-cloud/alcor/pull/243#discussion_r441317580", "bodyText": "Quick question: I see these two configurations are added to the pom file of AlcorLib which means that it will applied to multiple microservices. Do you expect the need of customizing it differently?", "author": "xieus", "createdAt": "2020-06-17T06:49:22Z", "path": "lib/src/main/java/com/futurewei/alcor/common/db/DistributedLockFactory.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\r\n+Copyright 2019 The Alcor Authors.\r\n+\r\n+Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+        you may not use this file except in compliance with the License.\r\n+        You may obtain a copy of the License at\r\n+\r\n+        http://www.apache.org/licenses/LICENSE-2.0\r\n+\r\n+        Unless required by applicable law or agreed to in writing, software\r\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+        See the License for the specific language governing permissions and\r\n+        limitations under the License.\r\n+*/\r\n+package com.futurewei.alcor.common.db;\r\n+\r\n+import com.futurewei.alcor.common.db.ignite.IgniteDistributedLock;\r\n+import com.futurewei.alcor.common.db.redis.RedisDistributedLock;\r\n+import org.apache.ignite.client.IgniteClient;\r\n+import org.springframework.beans.factory.annotation.Autowired;\r\n+import org.springframework.beans.factory.annotation.Value;\r\n+import org.springframework.context.annotation.ComponentScan;\r\n+import org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory;\r\n+import org.springframework.data.redis.core.StringRedisTemplate;\r\n+import org.springframework.stereotype.Component;\r\n+\r\n+@ComponentScan\r\n+@Component\r\n+public class DistributedLockFactory {\r\n+    @Autowired(required = false)\r\n+    private IgniteClient igniteClient;\r\n+\r\n+    @Value(\"${lock.try.interval}\")\r", "originalCommit": "c37f67188298aca95c0c7f922d171438de4364e1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzExMTEyNw==", "url": "https://github.com/futurewei-cloud/alcor/pull/243#discussion_r443111127", "bodyText": "No, it is no need to set different values at those two configurations. I am just not familiar with the usage of configuration file...", "author": "Eric-Yuan", "createdAt": "2020-06-20T07:53:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTMxNzU4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzk4NTg0Nw==", "url": "https://github.com/futurewei-cloud/alcor/pull/243#discussion_r443985847", "bodyText": "oh okay. Got it :-)", "author": "xieus", "createdAt": "2020-06-23T06:17:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTMxNzU4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQ0NDc4Mg==", "url": "https://github.com/futurewei-cloud/alcor/pull/243#discussion_r447444782", "bodyText": "Done. Changed to use default values instead of modifying all configuration files", "author": "Eric-Yuan", "createdAt": "2020-06-30T06:40:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTMxNzU4MA=="}], "type": "inlineReview"}, {"oid": "d55327207528796a67c1c42c0efd63a8cd5a2b1a", "url": "https://github.com/futurewei-cloud/alcor/commit/d55327207528796a67c1c42c0efd63a8cd5a2b1a", "message": "update doc by adding some description about allocation algorithm and API", "committedDate": "2020-06-20T09:40:08Z", "type": "commit"}, {"oid": "72be7d88d071e67d5472ae59a6333606bfa23938", "url": "https://github.com/futurewei-cloud/alcor/commit/72be7d88d071e67d5472ae59a6333606bfa23938", "message": "update elastic ip allocation algorithm", "committedDate": "2020-06-25T02:49:45Z", "type": "commit"}, {"oid": "c2aabc072bb68f91336f529373feb0d939d2e3f2", "url": "https://github.com/futurewei-cloud/alcor/commit/c2aabc072bb68f91336f529373feb0d939d2e3f2", "message": "update codes", "committedDate": "2020-06-28T14:19:46Z", "type": "commit"}, {"oid": "eea2f533b22046ba413d6c5026364f0f0c5d78ad", "url": "https://github.com/futurewei-cloud/alcor/commit/eea2f533b22046ba413d6c5026364f0f0c5d78ad", "message": "update codes", "committedDate": "2020-06-28T15:09:16Z", "type": "commit"}, {"oid": "0cc60a508ad0d3e5e728a447f90a5979fbad20de", "url": "https://github.com/futurewei-cloud/alcor/commit/0cc60a508ad0d3e5e728a447f90a5979fbad20de", "message": "update codes", "committedDate": "2020-06-29T13:07:01Z", "type": "commit"}, {"oid": "7fbe467fee3c4dad5bf95ee427cfcdeff1c8ad84", "url": "https://github.com/futurewei-cloud/alcor/commit/7fbe467fee3c4dad5bf95ee427cfcdeff1c8ad84", "message": "Merge pull request #6 from futurewei-cloud/master\n\nsync upstream repo codes", "committedDate": "2020-06-29T13:19:54Z", "type": "commit"}, {"oid": "80f61121715923c9f1bf3a6f6e37f7bb6410caa9", "url": "https://github.com/futurewei-cloud/alcor/commit/80f61121715923c9f1bf3a6f6e37f7bb6410caa9", "message": "upload elastic ip allocation initial codes", "committedDate": "2020-06-29T13:48:45Z", "type": "commit"}, {"oid": "a5b61caa0912e998d7e36b20ab31876d82a50871", "url": "https://github.com/futurewei-cloud/alcor/commit/a5b61caa0912e998d7e36b20ab31876d82a50871", "message": "upload elastic ip allocation initial codes", "committedDate": "2020-06-29T13:48:45Z", "type": "commit"}, {"oid": "b34567e1f54447bfa529b279c6ab0785c54f059c", "url": "https://github.com/futurewei-cloud/alcor/commit/b34567e1f54447bfa529b279c6ab0785c54f059c", "message": "fix compile error", "committedDate": "2020-06-29T13:48:46Z", "type": "commit"}, {"oid": "4060bb8ad5e90e455c7b3c2ae81cfa2d107c9ff8", "url": "https://github.com/futurewei-cloud/alcor/commit/4060bb8ad5e90e455c7b3c2ae81cfa2d107c9ff8", "message": "upload elastic ip allocation initial codes", "committedDate": "2020-06-29T13:49:31Z", "type": "commit"}, {"oid": "9bdcccc16583abc6102b1ddde57b5e0ad48d9a49", "url": "https://github.com/futurewei-cloud/alcor/commit/9bdcccc16583abc6102b1ddde57b5e0ad48d9a49", "message": "upload elastic ip allocation initial codes", "committedDate": "2020-06-29T14:04:55Z", "type": "commit"}, {"oid": "1e451ae3ef30e4bb45349c90f203174cc61c1a44", "url": "https://github.com/futurewei-cloud/alcor/commit/1e451ae3ef30e4bb45349c90f203174cc61c1a44", "message": "fix compile error", "committedDate": "2020-06-29T14:04:57Z", "type": "commit"}, {"oid": "a7641b09ada86fa81f902eebc208e76a874b5d30", "url": "https://github.com/futurewei-cloud/alcor/commit/a7641b09ada86fa81f902eebc208e76a874b5d30", "message": "update doc by adding some description about allocation algorithm and API", "committedDate": "2020-06-29T14:04:57Z", "type": "commit"}, {"oid": "af896e86ca7576ecbefcd6328163f48e5cdfc9ea", "url": "https://github.com/futurewei-cloud/alcor/commit/af896e86ca7576ecbefcd6328163f48e5cdfc9ea", "message": "update elastic ip allocation algorithm", "committedDate": "2020-06-29T14:04:58Z", "type": "commit"}, {"oid": "b1455ba04e824773c966a8790ae2cc3306756038", "url": "https://github.com/futurewei-cloud/alcor/commit/b1455ba04e824773c966a8790ae2cc3306756038", "message": "update codes", "committedDate": "2020-06-29T14:05:17Z", "type": "commit"}, {"oid": "949898047b33104d9953723fc91c67b621bf13ea", "url": "https://github.com/futurewei-cloud/alcor/commit/949898047b33104d9953723fc91c67b621bf13ea", "message": "update codes", "committedDate": "2020-06-29T14:05:17Z", "type": "commit"}, {"oid": "eac196693e1b136c79b70328b7809015e1207627", "url": "https://github.com/futurewei-cloud/alcor/commit/eac196693e1b136c79b70328b7809015e1207627", "message": "update codes", "committedDate": "2020-06-29T14:12:51Z", "type": "commit"}, {"oid": "14eef69ec95bd452c2f9549e06b5e4f865b7bf49", "url": "https://github.com/futurewei-cloud/alcor/commit/14eef69ec95bd452c2f9549e06b5e4f865b7bf49", "message": "Merge branch 'elastic_ip_minimal' of https://github.com/Eric-Yuan/alcor into elastic_ip_minimal", "committedDate": "2020-06-29T14:16:52Z", "type": "commit"}, {"oid": "a2906b16a30f7883206f7670aa3aef337e44a483", "url": "https://github.com/futurewei-cloud/alcor/commit/a2906b16a30f7883206f7670aa3aef337e44a483", "message": "revert wrong changes", "committedDate": "2020-06-29T14:23:35Z", "type": "commit"}, {"oid": "8ff377535f3aa406b590cfd5c153618c17b6628b", "url": "https://github.com/futurewei-cloud/alcor/commit/8ff377535f3aa406b590cfd5c153618c17b6628b", "message": "revert wrong changes", "committedDate": "2020-06-29T14:32:36Z", "type": "commit"}, {"oid": "5c62499332e61a7e94e0635bb71b920b41c9d8c2", "url": "https://github.com/futurewei-cloud/alcor/commit/5c62499332e61a7e94e0635bb71b920b41c9d8c2", "message": "Merge branch 'elastic_ip_minimal' of https://github.com/Eric-Yuan/alcor into elastic_ip_minimal\n\n# Conflicts:\n#\tservices/private_ip_manager/src/main/java/com/futurewei/alcor/privateipmanager/controller/IpAddrController.java\n#\tservices/private_ip_manager/src/main/java/com/futurewei/alcor/privateipmanager/repo/IpAddrRangeRepo.java\n#\tservices/private_ip_manager/src/main/java/com/futurewei/alcor/privateipmanager/repo/VpcIpRangeRepo.java\n#\tservices/private_ip_manager/src/main/java/com/futurewei/alcor/privateipmanager/service/implement/IpAddrServiceImpl.java", "committedDate": "2020-06-29T14:36:01Z", "type": "commit"}, {"oid": "9c7c4cf52721dcb04c19b5f73de9489fa9813f2d", "url": "https://github.com/futurewei-cloud/alcor/commit/9c7c4cf52721dcb04c19b5f73de9489fa9813f2d", "message": "fix a ut bugs", "committedDate": "2020-06-29T14:51:36Z", "type": "commit"}, {"oid": "65f9eee840b72cfc320c17547a19dc7b90cbedd5", "url": "https://github.com/futurewei-cloud/alcor/commit/65f9eee840b72cfc320c17547a19dc7b90cbedd5", "message": "fix a ut bugs", "committedDate": "2020-06-29T15:00:32Z", "type": "commit"}, {"oid": "a98e38a52b21de308d6f885c67a16e434188c0f3", "url": "https://github.com/futurewei-cloud/alcor/commit/a98e38a52b21de308d6f885c67a16e434188c0f3", "message": "Merge branch 'elastic_ip_minimal' of https://github.com/Eric-Yuan/alcor into elastic_ip_minimal", "committedDate": "2020-06-29T15:00:41Z", "type": "commit"}, {"oid": "52dc126fb56313b9c5489dc4ea32b85276f28e6b", "url": "https://github.com/futurewei-cloud/alcor/commit/52dc126fb56313b9c5489dc4ea32b85276f28e6b", "message": "lock parameters use default value instead of changing all services configuration file", "committedDate": "2020-06-30T04:00:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQyMDQzNg==", "url": "https://github.com/futurewei-cloud/alcor/pull/243#discussion_r447420436", "bodyText": "Is range_id an optional or a required parameter here?", "author": "xieus", "createdAt": "2020-06-30T05:35:23Z", "path": "docs/modules/ROOT/pages/mgmt_services/elastic_ip_manager.adoc", "diffHunk": "@@ -50,153 +50,727 @@ Note that those IP ranges should be owned by cloud provider.\n \n == REST APIs\n \n-TBD: to follow REST API specification.\n-\n === API Snapshot\n \n [width=\"100%\",cols=\"22%,12%,50%,17%\"]\n |===\n |*API Name* |*Method* |*Request*|*Response*\n \n-//|Verify IP State\n-//|GET\n-//|/ips/{range_id}/{ip}\n-//|ip state\n-//<<IP_Get,[sample]>>\n-//\n-//|List all allocated IP State\n-//|GET\n-//|/ips/{range_id}\n-//|ip state list\n-//<<IP_List,[sample]>>\n-//\n-//|Create IP State\n-//|POST\n-//|/ips\n-//|ip state\n-//<<IP_Post,[sample]>>\n-//\n-//|Create IP State Bulk\n-//|POST\n-//|/ips/bulk\n-//|ip state list\n-//<<IP_Post_Bulk,[sample]>>\n-//\n-//|Activate IP Address\n-//|PUT\n-//|/ips\n-//|ip state\n-//<<IP_Put1,[sample]>>\n-//\n-//|Activate IP Address Bulk\n-//|PUT\n-//|/ips/bulk\n-//|ip state list\n-//<<IP_Put1_Bulk,[sample]>>\n-//\n-//|Deactivate IP Address\n-//|PUT\n-//|/ips\n-//|ip state\n-//<<IP_Put2,[sample]>>\n-//\n-//|Deactivate IP Address Bulk\n-//|PUT\n-//|/ips/bulk\n-//|ip state list\n-//<<IP_Put2_Bulk,[sample]>>\n-//\n-//|Release IP State\n-//|DELETE\n-//|/ips/{range_id}/{ip}\n-//|ip state\n-//<<IP_Delete,[sample]>>\n-//\n-//|Release IP State Bulk\n-//|DELETE\n-//|/ips/bulk\n-//|ip state list\n-//<<IP_Delete_Bulk,[sample]>>\n-//\n-//|Create IP Range\n-//|POST\n-//|/ips/range\n-//|ip range\n-//<<IP_Range_Post,[sample]>>\n-//\n-//|Get IP Range\n-//|GET\n-//|/ips/range/{range_id}\n-//|ip range\n-//<<IP_Range_Get,[sample]>>\n-//\n-//|List all IP Range\n-//|GET\n-//|/ips/range\n-//|ip range list\n-//<<IP_Range_List,[sample]>>\n+|Create an elastic IP\n+|POST\n+|/project/{project_id}/elasticips\n+|elasticip info\n+<<Elastic_IP_Create,[sample]>>\n+\n+|Get the elastic IP\n+|GET\n+|/project/{project_id}/elasticips/{elasticip_id}\n+|elasticip info\n+<<Elastic_IP_Get,[sample]>>\n+\n+|Get all elastic IPs\n+|GET\n+|/project/{project_id}/elasticips\n+|elasticip info list\n+<<Elastic_IP_Get_List,[sample]>>\n+\n+|Delete the elastic IP\n+|DELETE\n+|/project/{project_id}/elasticips/{elasticip_id}\n+|\n+<<Elastic_IP_Delete,[sample]>>\n+\n+|Bulk create elastic IPs\n+|POST\n+|/project/{project_id}/elasticips\n+|elasticip info list\n+<<Elastic_IP_Bulk_Create,[sample]>>\n+\n+|Bulk delete elastic IPs\n+|DELETE\n+|/project/{project_id}/elasticips\n+|\n+<<Elastic_IP_Bulk_Delete,[sample]>>\n+\n+|Update the elastic IP\n+|PUT\n+|/project/{project_id}/elasticips/{elasticip_id}\n+|elasticip info\n+<<Elastic_IP_Update,[sample]>>\n+\n+|Create an elastic IP range\n+|POST\n+|/elasticip-ranges\n+|elasticip range info\n+<<Elastic_IP_Range_Create,[sample]>>\n+\n+|Get the elastic IP range\n+|GET\n+|/elasticip-ranges/{elasticip_range_id}\n+|elasticip range info\n+<<Elastic_IP_Range_Get,[sample]>>\n+\n+|Get all elastic IP ranges\n+|GET\n+|/elasticip-ranges\n+|elasticip range info list\n+<<Elastic_IP_Range_Get_List,[sample]>>\n+\n+|Delete the elastic IP range\n+|DELETE\n+|/elasticip-ranges/{elasticip_range_id}\n+|\n+<<Elastic_IP_Range_Delete,[sample]>>\n+\n+|Update the elastic IP range\n+|PUT\n+|/project/{project_id}/elasticip-ranges/{elasticip_range_id}\n+|elasticip range info\n+<<Elastic_IP_Range_Update,[sample]>>\n+\n |===\n \n === API Specification\n \n-NOTE: The follows is an example from link:private_ip_manager.adoc[private IP manager].\n+anchor:Elastic_IP_Create[]\n+**(1) Create an elastic IP**\n+\n+* Method: `POST`\n+\n+* Request: `/project/{project_id}/elasticips`\n+\n+* Request Parameter: `@PathVariable String project_id, @RequestBody ElasticIpStateJson elasticip`\n+\n+* Response: elastic ip info\n+* Normal response codes: 200\n+* Error response codes: 400, 412, 500\n+\n+* Example\n+\n+....\n+Request:\n+http://127.0.0.1:8080/elasticips\n+\n+Body:\n+{\n+    \"elasticip\":\n+    {\n+        \"id\": null,\n+        \"project_id\":\"11223344-5566-7788-990011223300\",\n+        \"name\":\"eip1\",\n+        \"description\":\"elastic ip 1\",\n+        \"range_id\":\"11223344-5566-7788-990011223301\",", "originalCommit": "52dc126fb56313b9c5489dc4ea32b85276f28e6b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQzODg2Ng==", "url": "https://github.com/futurewei-cloud/alcor/pull/243#discussion_r447438866", "bodyText": "you are right, in mostly scenarios there is only one existing elasticip range. I will remove the range_id parameter", "author": "Eric-Yuan", "createdAt": "2020-06-30T06:26:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQyMDQzNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODEzMzQ5OA==", "url": "https://github.com/futurewei-cloud/alcor/pull/243#discussion_r448133498", "bodyText": "Cool thanks!", "author": "xieus", "createdAt": "2020-07-01T06:03:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQyMDQzNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQyNTU0NQ==", "url": "https://github.com/futurewei-cloud/alcor/pull/243#discussion_r447425545", "bodyText": "Recommend to add comments to public controller methods as well as important private methods.", "author": "xieus", "createdAt": "2020-06-30T05:51:38Z", "path": "services/elastic_ip_manager/src/main/java/com/futurewei/alcor/elasticipmanager/controller/ElasticIpController.java", "diffHunk": "@@ -0,0 +1,412 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+\n+package com.futurewei.alcor.elasticipmanager.controller;\n+\n+import com.futurewei.alcor.common.entity.ResponseId;\n+import com.futurewei.alcor.common.utils.Ipv4AddrUtil;\n+import com.futurewei.alcor.common.utils.Ipv6AddrUtil;\n+import com.futurewei.alcor.elasticipmanager.config.IpVersion;\n+import com.futurewei.alcor.elasticipmanager.exception.ElasticIpIdConfilictException;\n+import com.futurewei.alcor.elasticipmanager.exception.ElasticIpNoProjectIdException;\n+import com.futurewei.alcor.elasticipmanager.exception.ElasticIpProjectIdConflictException;\n+import com.futurewei.alcor.elasticipmanager.exception.elasticip.*;\n+import com.futurewei.alcor.elasticipmanager.exception.ElasticIpQueryFormatException;\n+import com.futurewei.alcor.elasticipmanager.exception.elasticiprange.ElasticIpRangeBadRangesException;\n+import com.futurewei.alcor.elasticipmanager.exception.elasticiprange.ElasticIpRangeNoIdException;\n+import com.futurewei.alcor.elasticipmanager.exception.elasticiprange.ElasticIpRangeVersionException;\n+import com.futurewei.alcor.elasticipmanager.service.ElasticIpRangeService;\n+import com.futurewei.alcor.elasticipmanager.service.ElasticIpService;\n+import com.futurewei.alcor.web.entity.elasticip.*;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.util.StringUtils;\n+import org.springframework.web.bind.annotation.*;\n+\n+import java.math.BigInteger;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+\n+@RestController\n+public class ElasticIpController {\n+    private static final Logger LOG = LoggerFactory.getLogger(ElasticIpController.class);\n+\n+    @Autowired\n+    ElasticIpService elasticipService;\n+\n+    @Autowired\n+    ElasticIpRangeService elasticIpRangeService;\n+\n+    private boolean isIpAddressInvalid(String ipAddress, Integer ipVersion) {\n+        boolean isInvalid = true;\n+        if (ipVersion.equals(IpVersion.IPV4.getVersion())) {\n+            isInvalid = !Ipv4AddrUtil.formatCheck(ipAddress);\n+        } else if (ipVersion.equals(IpVersion.IPV6.getVersion())) {\n+            isInvalid = !Ipv6AddrUtil.formatCheck(ipAddress);\n+        }\n+\n+        return isInvalid;\n+    }\n+\n+    private boolean isIpVersionInvalid(Integer ipVersion) {\n+        return !ipVersion.equals(IpVersion.IPV4.getVersion()) && !ipVersion.equals(IpVersion.IPV6.getVersion());\n+    }\n+\n+    private boolean isAllocationRangesInvalid(Integer ipVersion,\n+                                              List<ElasticIpRange.AllocationRange> allocationRanges) {\n+\n+        boolean isInvalid = false;\n+        if (allocationRanges != null) {\n+\n+            try {\n+                if (ipVersion.equals(IpVersion.IPV4.getVersion())) {\n+                    for (ElasticIpRange.AllocationRange range: allocationRanges) {\n+                        long start = Ipv4AddrUtil.ipv4ToLong(range.getStart());\n+                        long end = Ipv4AddrUtil.ipv4ToLong(range.getEnd());\n+                        if (start > end) {\n+                            isInvalid = true;\n+                        }\n+                    }\n+                } else if (ipVersion.equals(IpVersion.IPV6.getVersion())) {\n+                    for (ElasticIpRange.AllocationRange range: allocationRanges) {\n+                        BigInteger start = Ipv6AddrUtil.ipv6ToBitInt(range.getStart());\n+                        BigInteger end = Ipv6AddrUtil.ipv6ToBitInt(range.getEnd());\n+                        if (start.compareTo(end) > 0) {\n+                            isInvalid = true;\n+                        }\n+                    }\n+                }\n+            } catch (NumberFormatException e) {\n+                isInvalid = true;\n+            }\n+        }\n+        return isInvalid;\n+    }\n+\n+    private void createElasticIpParameterProcess(String projectId, ElasticIpInfo elasticIpInfo) throws Exception {\n+\n+        if (elasticIpInfo == null) {\n+            throw new ElasticIpQueryFormatException();\n+        }\n+\n+        if (StringUtils.isEmpty(projectId)) {\n+            throw new ElasticIpNoProjectIdException();\n+        } else if (elasticIpInfo.getProjectId() == null) {\n+            elasticIpInfo.setProjectId(projectId);\n+        } else if (!projectId.equals(elasticIpInfo.getProjectId())) {\n+            throw new ElasticIpProjectIdConflictException();\n+        }\n+\n+        if (StringUtils.isEmpty(elasticIpInfo.getRangeId())) {\n+            throw new ElasticIpNoRangeIdException();\n+        }\n+\n+        if (elasticIpInfo.getElasticIpVersion() == null) {\n+            elasticIpInfo.setElasticIpVersion(IpVersion.IPV4.getVersion());\n+        } else if (this.isIpVersionInvalid(elasticIpInfo.getElasticIpVersion())) {\n+            throw new ElasticIpEipVersionException();\n+        }\n+\n+        if (elasticIpInfo.getElasticIp() != null) {\n+            if (this.isIpAddressInvalid(elasticIpInfo.getElasticIp(), elasticIpInfo.getElasticIpVersion())) {\n+                throw new ElasticIpEipAddressException();\n+            }\n+        }\n+\n+        if (StringUtils.isEmpty(elasticIpInfo.getPortId())) {\n+            if (elasticIpInfo.getPrivateIp()!= null || elasticIpInfo.getPrivateIpVersion() != null) {\n+                throw new ElasticIpNoPortIdException();\n+            }\n+        } else {\n+            if (elasticIpInfo.getPrivateIpVersion() == null) {\n+                elasticIpInfo.setPrivateIpVersion(IpVersion.IPV4.getVersion());\n+            } else if (this.isIpVersionInvalid(elasticIpInfo.getPrivateIpVersion())) {\n+                throw new ElasticIpPipVersionException();\n+            }\n+\n+            if (elasticIpInfo.getPrivateIp() != null) {\n+                if (this.isIpAddressInvalid(elasticIpInfo.getPrivateIp(), elasticIpInfo.getPrivateIpVersion())) {\n+                    throw new ElasticIpPipAddressException();\n+                }\n+            }\n+        }\n+\n+        if (elasticIpInfo.getName() == null) {\n+            elasticIpInfo.setName(\"\");\n+        }\n+\n+        if (elasticIpInfo.getDescription() == null) {\n+            elasticIpInfo.setDescription(\"\");\n+        }\n+    }\n+\n+    private void updateElasticIpParameterProcess(String projectId, String elasticIpId, ElasticIpInfo elasticIpInfo)\n+            throws Exception {\n+\n+        if (elasticIpInfo == null) {\n+            throw new ElasticIpQueryFormatException();\n+        }\n+\n+        if (StringUtils.isEmpty(projectId)) {\n+            throw new ElasticIpNoProjectIdException();\n+        } else if (elasticIpInfo.getProjectId() == null) {\n+            elasticIpInfo.setProjectId(projectId);\n+        } else if (!projectId.equals(elasticIpInfo.getProjectId())) {\n+            throw new ElasticIpProjectIdConflictException();\n+        }\n+\n+        if (StringUtils.isEmpty(elasticIpId)) {\n+            throw new ElasticIpNoIdException();\n+        } else if (elasticIpInfo.getId() == null) {\n+            elasticIpInfo.setId(elasticIpId);\n+        } else if (!elasticIpId.equals(elasticIpInfo.getId())) {\n+            throw new ElasticIpIdConfilictException();\n+        }\n+\n+        if (elasticIpInfo.getElasticIpVersion() != null &&\n+                this.isIpVersionInvalid(elasticIpInfo.getElasticIpVersion())) {\n+            throw new ElasticIpEipVersionException();\n+        }\n+\n+        if (elasticIpInfo.getElasticIp() != null) {\n+            if (elasticIpInfo.getElasticIpVersion() == null) {\n+                elasticIpInfo.setElasticIpVersion(IpVersion.IPV4.getVersion());\n+            }\n+            if (this.isIpAddressInvalid(elasticIpInfo.getElasticIp(), elasticIpInfo.getElasticIpVersion())) {\n+                throw new ElasticIpEipAddressException();\n+            }\n+        }\n+\n+        if (StringUtils.isEmpty(elasticIpInfo.getPortId())) {\n+            if (elasticIpInfo.getPrivateIp() != null || elasticIpInfo.getPrivateIpVersion() != null) {\n+                throw new ElasticIpNoPortIdException();\n+            }\n+        } else {\n+            if (elasticIpInfo.getPrivateIpVersion() != null &&\n+                    this.isIpVersionInvalid(elasticIpInfo.getPrivateIpVersion())) {\n+                throw new ElasticIpPipVersionException();\n+            }\n+\n+            if (elasticIpInfo.getPrivateIp() != null) {\n+                if (elasticIpInfo.getPrivateIp() == null) {\n+                    elasticIpInfo.setPrivateIpVersion(IpVersion.IPV4.getVersion());\n+                }\n+                if (this.isIpAddressInvalid(elasticIpInfo.getPrivateIp(), elasticIpInfo.getPrivateIpVersion())) {\n+                    throw new ElasticIpPipAddressException();\n+                }\n+            }\n+        }\n+    }\n+\n+    private void createElasticIpRangeParameterProcess(ElasticIpRangeInfo elasticIpRangeInfo) throws Exception {\n+\n+        if (elasticIpRangeInfo == null) {\n+            throw new ElasticIpQueryFormatException();\n+        }\n+\n+        if (elasticIpRangeInfo.getIpVersion() == null) {\n+            elasticIpRangeInfo.setIpVersion(IpVersion.IPV4.getVersion());\n+        } else if (this.isIpVersionInvalid(elasticIpRangeInfo.getIpVersion())) {\n+            throw new ElasticIpRangeVersionException();\n+        }\n+\n+        List<ElasticIpRange.AllocationRange> allocationRanges = elasticIpRangeInfo.getAllocationRanges();\n+        if (allocationRanges != null) {\n+            if (this.isAllocationRangesInvalid(elasticIpRangeInfo.getIpVersion(), allocationRanges)) {\n+                throw new ElasticIpRangeBadRangesException();\n+            }\n+        } else {\n+            elasticIpRangeInfo.setAllocationRanges(new ArrayList<>());\n+        }\n+\n+        if (elasticIpRangeInfo.getName() == null) {\n+            elasticIpRangeInfo.setName(\"\");\n+        }\n+\n+        if (elasticIpRangeInfo.getDescription() == null) {\n+            elasticIpRangeInfo.setDescription(\"\");\n+        }\n+    }\n+\n+    private void updateElasticIpRangeParameterProcess(String elasticipRangeId,\n+                                                      ElasticIpRangeInfo elasticIpRangeInfo) throws Exception {\n+\n+        if (elasticIpRangeInfo == null) {\n+            throw new ElasticIpQueryFormatException();\n+        }\n+\n+        if (StringUtils.isEmpty(elasticipRangeId)) {\n+            throw new ElasticIpRangeNoIdException();\n+        } else if (elasticIpRangeInfo.getId() == null) {\n+            elasticIpRangeInfo.setId(elasticipRangeId);\n+        } else if (!elasticipRangeId.equals(elasticIpRangeInfo.getId())) {\n+            throw new ElasticIpIdConfilictException();\n+        }\n+\n+        if (elasticIpRangeInfo.getIpVersion() != null && this.isIpVersionInvalid(elasticIpRangeInfo.getIpVersion())) {\n+            throw new ElasticIpRangeVersionException();\n+        }\n+\n+        List<ElasticIpRange.AllocationRange> allocationRanges = elasticIpRangeInfo.getAllocationRanges();\n+        if (allocationRanges != null) {\n+            if (this.isAllocationRangesInvalid(elasticIpRangeInfo.getIpVersion(), allocationRanges)) {\n+                throw new ElasticIpRangeBadRangesException();\n+            }\n+        }\n+    }\n+\n+    @PostMapping(\"/project/{project_id}/elasticips\")", "originalCommit": "52dc126fb56313b9c5489dc4ea32b85276f28e6b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQzOTMzMQ==", "url": "https://github.com/futurewei-cloud/alcor/pull/243#discussion_r447439331", "bodyText": "Yes, I will do that", "author": "Eric-Yuan", "createdAt": "2020-06-30T06:28:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQyNTU0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTg5NTAwMw==", "url": "https://github.com/futurewei-cloud/alcor/pull/243#discussion_r449895003", "bodyText": "Thank you! Those comments are all good.", "author": "xieus", "createdAt": "2020-07-05T16:27:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQyNTU0NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQyNjE2MA==", "url": "https://github.com/futurewei-cloud/alcor/pull/243#discussion_r447426160", "bodyText": "I think range id is not available to our end users.", "author": "xieus", "createdAt": "2020-06-30T05:53:24Z", "path": "services/elastic_ip_manager/src/main/java/com/futurewei/alcor/elasticipmanager/service/implement/ElasticIpServiceImpl.java", "diffHunk": "@@ -0,0 +1,231 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+\n+package com.futurewei.alcor.elasticipmanager.service.implement;\n+\n+import com.futurewei.alcor.elasticipmanager.dao.ElasticIpAllocator;\n+import com.futurewei.alcor.elasticipmanager.dao.ElasticIpRangeRepo;\n+import com.futurewei.alcor.elasticipmanager.dao.ElasticIpRepo;\n+import com.futurewei.alcor.elasticipmanager.exception.elasticip.ElasticIpAllocationException;\n+import com.futurewei.alcor.elasticipmanager.exception.elasticip.ElasticIpInUseException;\n+import com.futurewei.alcor.elasticipmanager.exception.elasticip.ElasticIpNotFoundException;\n+import com.futurewei.alcor.elasticipmanager.exception.ElasticIpQueryFormatException;\n+import com.futurewei.alcor.elasticipmanager.exception.elasticiprange.ElasticIpRangeInUseException;\n+import com.futurewei.alcor.elasticipmanager.exception.elasticiprange.ElasticIpRangeNotFoundException;\n+import com.futurewei.alcor.elasticipmanager.service.ElasticIpService;\n+import com.futurewei.alcor.web.entity.elasticip.ElasticIp;\n+import com.futurewei.alcor.web.entity.elasticip.ElasticIpRange;\n+import com.futurewei.alcor.web.entity.elasticip.ElasticIpInfo;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+import java.util.*;\n+\n+\n+@Service\n+public class ElasticIpServiceImpl implements ElasticIpService {\n+    private static final Logger LOG = LoggerFactory.getLogger(ElasticIpServiceImpl.class);\n+\n+    @Autowired\n+    ElasticIpRepo elasticIpRepo;\n+\n+    @Autowired\n+    ElasticIpRangeRepo elasticIpRangeRepo;\n+\n+    @Autowired\n+    ElasticIpAllocator elasticIpAllocator;\n+\n+    public ElasticIpInfo createElasticIp(ElasticIpInfo request) throws Exception {\n+        LOG.debug(\"Create an elastic ip, request: {}\", request);\n+\n+        String rangeId = request.getRangeId();\n+        ElasticIpRange range = elasticIpRangeRepo.findItem(rangeId);", "originalCommit": "52dc126fb56313b9c5489dc4ea32b85276f28e6b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQzOTUyNQ==", "url": "https://github.com/futurewei-cloud/alcor/pull/243#discussion_r447439525", "bodyText": "OK", "author": "Eric-Yuan", "createdAt": "2020-06-30T06:28:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQyNjE2MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQyODAwMA==", "url": "https://github.com/futurewei-cloud/alcor/pull/243#discussion_r447428000", "bodyText": "Like it!", "author": "xieus", "createdAt": "2020-06-30T05:58:23Z", "path": "services/elastic_ip_manager/src/main/java/com/futurewei/alcor/elasticipmanager/dao/ElasticIpAllocator.java", "diffHunk": "@@ -0,0 +1,685 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.elasticipmanager.dao;\n+\n+import com.futurewei.alcor.common.db.*;\n+import com.futurewei.alcor.common.exception.DistributedLockException;\n+import com.futurewei.alcor.common.utils.Ipv4AddrUtil;\n+import com.futurewei.alcor.common.utils.Ipv6AddrUtil;\n+import com.futurewei.alcor.elasticipmanager.entity.ElasticIpAllocatedIpv4;\n+import com.futurewei.alcor.elasticipmanager.entity.ElasticIpAllocatedIpv6;\n+import com.futurewei.alcor.elasticipmanager.entity.ElasticIpAvailableBucketsSet;\n+import com.futurewei.alcor.elasticipmanager.exception.elasticip.ElasticIpExistsException;\n+import com.futurewei.alcor.elasticipmanager.exception.ElasticIpQueryFormatException;\n+import com.futurewei.alcor.elasticipmanager.exception.elasticiprange.ElasticIpRangeInUseException;\n+import com.futurewei.alcor.web.entity.elasticip.ElasticIpRange;\n+import com.futurewei.alcor.web.entity.ip.IpVersion;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.ComponentScan;\n+import org.springframework.stereotype.Repository;\n+\n+import java.math.BigInteger;\n+import java.util.*;\n+\n+\n+@ComponentScan(value=\"com.futurewei.alcor.common.db\")\n+@Repository\n+public class ElasticIpAllocator {\n+    private static final Random random = new Random(System.currentTimeMillis());\n+    private static final Logger LOG = LoggerFactory.getLogger(ElasticIpAllocator.class);\n+    public static final int IPv4_BUCKETS_COUNT = 256;\n+    private static final int IPV4_ALLOCATION_MAX_RETRY_COUNT = 10;\n+    private static final int IPV6_ALLOCATION_MAX_RETRY_COUNT = 2000;\n+    public static final BigInteger EIGHT_BYTES_SCOPE_RANGE = BigInteger.valueOf(Long.MAX_VALUE).multiply(\n+            BigInteger.valueOf(2)).add(BigInteger.valueOf(2));\n+\n+    private final ICache<String, ElasticIpAllocatedIpv4> allocatedIpv4Cache;\n+    private final ICache<String, ElasticIpAllocatedIpv6> allocatedIpv6Cache;\n+    private final ICache<String, ElasticIpAvailableBucketsSet> availableBucketsCache;\n+    private final IDistributedLock allocatedIpv4Lock;\n+    private final IDistributedLock allocatedIpv6Lock;\n+    private final IDistributedLock availableBucketsLock;\n+\n+    @Autowired\n+    public ElasticIpAllocator(CacheFactory cacheFactor, DistributedLockFactory lockFactory) {", "originalCommit": "52dc126fb56313b9c5489dc4ea32b85276f28e6b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQyODYxNg==", "url": "https://github.com/futurewei-cloud/alcor/pull/243#discussion_r447428616", "bodyText": "I know you are working on the UTs. I would recommend to add extensive UTs to cover ElasticIpAllocator. So important :)", "author": "xieus", "createdAt": "2020-06-30T06:00:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQyODAwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQ0MzA1Nw==", "url": "https://github.com/futurewei-cloud/alcor/pull/243#discussion_r447443057", "bodyText": "OK, I plan to take the mocks deeper to the database operations level, that should cover mostly function paths of ElasticIpAllocator. The existing one UT is just for test ;)", "author": "Eric-Yuan", "createdAt": "2020-06-30T06:36:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQyODAwMA=="}], "type": "inlineReview"}, {"oid": "4f45a082f4ddecf0062e25f68af6834629622749", "url": "https://github.com/futurewei-cloud/alcor/commit/4f45a082f4ddecf0062e25f68af6834629622749", "message": "Merge pull request #7 from futurewei-cloud/master\n\nsync codes", "committedDate": "2020-07-01T06:39:39Z", "type": "commit"}, {"oid": "30e440fab251abd7b94bcb449d07410e1c4f1a69", "url": "https://github.com/futurewei-cloud/alcor/commit/30e440fab251abd7b94bcb449d07410e1c4f1a69", "message": "Merge pull request #8 from futurewei-cloud/master\n\nsync codes", "committedDate": "2020-07-01T08:13:15Z", "type": "commit"}, {"oid": "43650bf8b1f6c63a847911835bfa48da282898b2", "url": "https://github.com/futurewei-cloud/alcor/commit/43650bf8b1f6c63a847911835bfa48da282898b2", "message": "upload elastic ip allocation initial codes", "committedDate": "2020-07-01T09:50:15Z", "type": "commit"}, {"oid": "ce44e0ad7c2cb6c42939fb59b87f97d4f0972278", "url": "https://github.com/futurewei-cloud/alcor/commit/ce44e0ad7c2cb6c42939fb59b87f97d4f0972278", "message": "upload elastic ip allocation initial codes", "committedDate": "2020-07-01T09:50:16Z", "type": "commit"}, {"oid": "8cea176ad71fc4d612ca3186e4d685a921ca8b26", "url": "https://github.com/futurewei-cloud/alcor/commit/8cea176ad71fc4d612ca3186e4d685a921ca8b26", "message": "fix compile error", "committedDate": "2020-07-01T09:50:16Z", "type": "commit"}, {"oid": "8427fe8155017c123a03b025a186b1744b10be9d", "url": "https://github.com/futurewei-cloud/alcor/commit/8427fe8155017c123a03b025a186b1744b10be9d", "message": "upload elastic ip allocation initial codes", "committedDate": "2020-07-01T09:50:16Z", "type": "commit"}, {"oid": "f72383f9fadffd33c510df055383c6fdf02b9e58", "url": "https://github.com/futurewei-cloud/alcor/commit/f72383f9fadffd33c510df055383c6fdf02b9e58", "message": "upload elastic ip allocation initial codes", "committedDate": "2020-07-01T09:50:16Z", "type": "commit"}, {"oid": "1d93de579b44eb263cb766b71b521933381f98f8", "url": "https://github.com/futurewei-cloud/alcor/commit/1d93de579b44eb263cb766b71b521933381f98f8", "message": "fix compile error", "committedDate": "2020-07-01T09:50:17Z", "type": "commit"}, {"oid": "d4f776f08e783b6bea65a43ac4339493287756f5", "url": "https://github.com/futurewei-cloud/alcor/commit/d4f776f08e783b6bea65a43ac4339493287756f5", "message": "update doc by adding some description about allocation algorithm and API", "committedDate": "2020-07-01T09:50:17Z", "type": "commit"}, {"oid": "503139d134cab30395102cb374b4741ea0378f48", "url": "https://github.com/futurewei-cloud/alcor/commit/503139d134cab30395102cb374b4741ea0378f48", "message": "update elastic ip allocation algorithm", "committedDate": "2020-07-01T09:50:17Z", "type": "commit"}, {"oid": "3bf85bde6761e25570a99cad8ecc2d568bb783a9", "url": "https://github.com/futurewei-cloud/alcor/commit/3bf85bde6761e25570a99cad8ecc2d568bb783a9", "message": "update codes", "committedDate": "2020-07-01T09:50:17Z", "type": "commit"}, {"oid": "b541d731303651d5b93c6e597b583e244f192676", "url": "https://github.com/futurewei-cloud/alcor/commit/b541d731303651d5b93c6e597b583e244f192676", "message": "update codes", "committedDate": "2020-07-01T09:50:18Z", "type": "commit"}, {"oid": "867f426cd736d4145a670ebaebd327f9c4279307", "url": "https://github.com/futurewei-cloud/alcor/commit/867f426cd736d4145a670ebaebd327f9c4279307", "message": "update codes", "committedDate": "2020-07-01T09:51:37Z", "type": "commit"}, {"oid": "dba6f99f77be36c89162a9ced6a47f50b621f8fd", "url": "https://github.com/futurewei-cloud/alcor/commit/dba6f99f77be36c89162a9ced6a47f50b621f8fd", "message": "upload elastic ip allocation initial codes", "committedDate": "2020-07-01T09:52:12Z", "type": "commit"}, {"oid": "2a0b6eeddd798ee4f0b40d8802f5b2b8469a189f", "url": "https://github.com/futurewei-cloud/alcor/commit/2a0b6eeddd798ee4f0b40d8802f5b2b8469a189f", "message": "upload elastic ip allocation initial codes", "committedDate": "2020-07-01T09:52:12Z", "type": "commit"}, {"oid": "0c707f9d819cab39ff5346d9f5529f1ec79702d3", "url": "https://github.com/futurewei-cloud/alcor/commit/0c707f9d819cab39ff5346d9f5529f1ec79702d3", "message": "fix compile error", "committedDate": "2020-07-01T09:52:13Z", "type": "commit"}, {"oid": "454b8d7d9209e5223b553c04505693e4bffce466", "url": "https://github.com/futurewei-cloud/alcor/commit/454b8d7d9209e5223b553c04505693e4bffce466", "message": "upload elastic ip allocation initial codes", "committedDate": "2020-07-01T09:52:21Z", "type": "commit"}, {"oid": "47926426dbed4258deef88ad95f74c9fdd9df841", "url": "https://github.com/futurewei-cloud/alcor/commit/47926426dbed4258deef88ad95f74c9fdd9df841", "message": "upload elastic ip allocation initial codes", "committedDate": "2020-07-01T09:52:40Z", "type": "commit"}, {"oid": "016402973744dbb9c86e9a3e7fdd942556229cf8", "url": "https://github.com/futurewei-cloud/alcor/commit/016402973744dbb9c86e9a3e7fdd942556229cf8", "message": "fix compile error", "committedDate": "2020-07-01T09:52:41Z", "type": "commit"}, {"oid": "cce4f131c0fdfe38ee7d9423ccb4e7afe4877d85", "url": "https://github.com/futurewei-cloud/alcor/commit/cce4f131c0fdfe38ee7d9423ccb4e7afe4877d85", "message": "update doc by adding some description about allocation algorithm and API", "committedDate": "2020-07-01T09:52:46Z", "type": "commit"}, {"oid": "7d636ec9ee32c0f5cea716b0a1e309db29b62fc5", "url": "https://github.com/futurewei-cloud/alcor/commit/7d636ec9ee32c0f5cea716b0a1e309db29b62fc5", "message": "update elastic ip allocation algorithm", "committedDate": "2020-07-01T09:52:54Z", "type": "commit"}, {"oid": "a70844fcbfb68c6564937a644529c678949ec485", "url": "https://github.com/futurewei-cloud/alcor/commit/a70844fcbfb68c6564937a644529c678949ec485", "message": "update codes", "committedDate": "2020-07-01T09:53:36Z", "type": "commit"}, {"oid": "af5c092b88df89d9760ad6a116974091b0b8daa1", "url": "https://github.com/futurewei-cloud/alcor/commit/af5c092b88df89d9760ad6a116974091b0b8daa1", "message": "update codes", "committedDate": "2020-07-01T09:53:37Z", "type": "commit"}, {"oid": "7eecdea07543bcc89da43052065d1bfc28896b43", "url": "https://github.com/futurewei-cloud/alcor/commit/7eecdea07543bcc89da43052065d1bfc28896b43", "message": "update codes", "committedDate": "2020-07-01T09:53:46Z", "type": "commit"}, {"oid": "2159d148500dccfbc3124a9ef52cd47e378215c1", "url": "https://github.com/futurewei-cloud/alcor/commit/2159d148500dccfbc3124a9ef52cd47e378215c1", "message": "revert wrong changes", "committedDate": "2020-07-01T09:53:46Z", "type": "commit"}, {"oid": "363dfb5b47b7b478d62603cc2d0fd4d2cd63e007", "url": "https://github.com/futurewei-cloud/alcor/commit/363dfb5b47b7b478d62603cc2d0fd4d2cd63e007", "message": "revert wrong changes", "committedDate": "2020-07-01T09:53:55Z", "type": "commit"}, {"oid": "74eb5a3e260ad5ae4aa039dfe77db76d2a19fbf4", "url": "https://github.com/futurewei-cloud/alcor/commit/74eb5a3e260ad5ae4aa039dfe77db76d2a19fbf4", "message": "fix a ut bugs", "committedDate": "2020-07-01T09:53:55Z", "type": "commit"}, {"oid": "1bb2b6614045da05a6d659dc8326e0259de72471", "url": "https://github.com/futurewei-cloud/alcor/commit/1bb2b6614045da05a6d659dc8326e0259de72471", "message": "fix a ut bugs", "committedDate": "2020-07-01T09:53:57Z", "type": "commit"}, {"oid": "8a388283bf8e001468296e43dac7589bc79e397f", "url": "https://github.com/futurewei-cloud/alcor/commit/8a388283bf8e001468296e43dac7589bc79e397f", "message": "lock parameters use default value instead of changing all services configuration file", "committedDate": "2020-07-01T09:56:48Z", "type": "commit"}, {"oid": "13086177113c12418ece5dd7e515037b4205d9ac", "url": "https://github.com/futurewei-cloud/alcor/commit/13086177113c12418ece5dd7e515037b4205d9ac", "message": "add function descriptions", "committedDate": "2020-07-01T11:23:37Z", "type": "commit"}, {"oid": "19918381e8f75b75d50dd353483fee4644f4665f", "url": "https://github.com/futurewei-cloud/alcor/commit/19918381e8f75b75d50dd353483fee4644f4665f", "message": "Merge branch 'elastic_ip_minimal' of https://github.com/Eric-Yuan/alcor into elastic_ip_minimal", "committedDate": "2020-07-01T11:32:55Z", "type": "commit"}, {"oid": "19d914e4a81e6bb8752a5b008d6d9ac0b70af2bc", "url": "https://github.com/futurewei-cloud/alcor/commit/19d914e4a81e6bb8752a5b008d6d9ac0b70af2bc", "message": "Merge branch 'elastic_ip_minimal' of https://github.com/Eric-Yuan/alcor into elastic_ip_minimal", "committedDate": "2020-07-01T11:57:46Z", "type": "commit"}, {"oid": "7ad33a7cd1a9b1ed1a6285c077ce3366899ebab8", "url": "https://github.com/futurewei-cloud/alcor/commit/7ad33a7cd1a9b1ed1a6285c077ce3366899ebab8", "message": "Merge branch 'elastic_ip_minimal' of https://github.com/Eric-Yuan/alcor into elastic_ip_minimal", "committedDate": "2020-07-01T11:57:57Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTg5NDQyNg==", "url": "https://github.com/futurewei-cloud/alcor/pull/243#discussion_r449894426", "bodyText": "ElasticIpAllocatedIpv4 support a set of ip address while Ipv6 has an individual ip. Do we expect to extend it to a set later?", "author": "xieus", "createdAt": "2020-07-05T16:20:43Z", "path": "services/elastic_ip_manager/src/main/java/com/futurewei/alcor/elasticipmanager/entity/ElasticIpAllocatedIpv6.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\r\n+Copyright 2019 The Alcor Authors.\r\n+\r\n+Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+        you may not use this file except in compliance with the License.\r\n+        You may obtain a copy of the License at\r\n+\r\n+        http://www.apache.org/licenses/LICENSE-2.0\r\n+\r\n+        Unless required by applicable law or agreed to in writing, software\r\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+        See the License for the specific language governing permissions and\r\n+        limitations under the License.\r\n+*/\r\n+\r\n+package com.futurewei.alcor.elasticipmanager.entity;\r\n+\r\n+\r\n+import com.fasterxml.jackson.annotation.JsonProperty;\r\n+\r\n+\r\n+public class ElasticIpAllocatedIpv6 {\r\n+\r\n+    @JsonProperty(\"range_id\")\r\n+    private String rangeId;\r\n+\r\n+    @JsonProperty(\"allocated_ipv6\")\r\n+    private String allocatedIpv6;\r", "originalCommit": "7ad33a7cd1a9b1ed1a6285c077ce3366899ebab8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTg5NDQ3NA==", "url": "https://github.com/futurewei-cloud/alcor/pull/243#discussion_r449894474", "bodyText": "Like the bucket design and impl!", "author": "xieus", "createdAt": "2020-07-05T16:21:20Z", "path": "services/elastic_ip_manager/src/main/java/com/futurewei/alcor/elasticipmanager/entity/ElasticIpAvailableBucketsSet.java", "diffHunk": "@@ -0,0 +1,43 @@\n+package com.futurewei.alcor.elasticipmanager.entity;\r\n+\r\n+import com.fasterxml.jackson.annotation.JsonProperty;\r\n+\r\n+import java.util.BitSet;\r\n+\r\n+\r\n+public class ElasticIpAvailableBucketsSet {\r\n+    @JsonProperty(\"range_id\")\r\n+    private String rangeId;\r\n+\r\n+    @JsonProperty(\"available_buckets_bitset\")\r\n+    private BitSet AvailableBucketsBitset;\r\n+\r\n+    public ElasticIpAvailableBucketsSet(String rangeId, BitSet availableBucketsBitset) {\r", "originalCommit": "7ad33a7cd1a9b1ed1a6285c077ce3366899ebab8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTg5NDkzMQ==", "url": "https://github.com/futurewei-cloud/alcor/pull/243#discussion_r449894931", "bodyText": "To make the controller method a bit explicit, I would recommend to create a controllerUtil class and move the private methods there.", "author": "xieus", "createdAt": "2020-07-05T16:26:53Z", "path": "services/elastic_ip_manager/src/main/java/com/futurewei/alcor/elasticipmanager/controller/ElasticIpController.java", "diffHunk": "@@ -0,0 +1,484 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+\n+package com.futurewei.alcor.elasticipmanager.controller;\n+\n+import com.futurewei.alcor.common.entity.ResponseId;\n+import com.futurewei.alcor.common.utils.Ipv4AddrUtil;\n+import com.futurewei.alcor.common.utils.Ipv6AddrUtil;\n+import com.futurewei.alcor.elasticipmanager.config.IpVersion;\n+import com.futurewei.alcor.elasticipmanager.exception.ElasticIpIdConfilictException;\n+import com.futurewei.alcor.elasticipmanager.exception.ElasticIpNoProjectIdException;\n+import com.futurewei.alcor.elasticipmanager.exception.ElasticIpProjectIdConflictException;\n+import com.futurewei.alcor.elasticipmanager.exception.elasticip.*;\n+import com.futurewei.alcor.elasticipmanager.exception.ElasticIpQueryFormatException;\n+import com.futurewei.alcor.elasticipmanager.exception.elasticiprange.ElasticIpRangeBadRangesException;\n+import com.futurewei.alcor.elasticipmanager.exception.elasticiprange.ElasticIpRangeNoIdException;\n+import com.futurewei.alcor.elasticipmanager.exception.elasticiprange.ElasticIpRangeVersionException;\n+import com.futurewei.alcor.elasticipmanager.service.ElasticIpRangeService;\n+import com.futurewei.alcor.elasticipmanager.service.ElasticIpService;\n+import com.futurewei.alcor.web.entity.elasticip.*;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.util.StringUtils;\n+import org.springframework.web.bind.annotation.*;\n+\n+import java.math.BigInteger;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+\n+@RestController\n+public class ElasticIpController {\n+    private static final Logger LOG = LoggerFactory.getLogger(ElasticIpController.class);\n+\n+    @Autowired\n+    ElasticIpService elasticipService;\n+\n+    @Autowired\n+    ElasticIpRangeService elasticIpRangeService;\n+\n+    private boolean isIpAddressInvalid(String ipAddress, Integer ipVersion) {", "originalCommit": "7ad33a7cd1a9b1ed1a6285c077ce3366899ebab8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDI3NTM2OA==", "url": "https://github.com/futurewei-cloud/alcor/pull/243#discussion_r450275368", "bodyText": "OK, will do", "author": "Eric-Yuan", "createdAt": "2020-07-06T14:49:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTg5NDkzMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDI4ODY1OA==", "url": "https://github.com/futurewei-cloud/alcor/pull/243#discussion_r450288658", "bodyText": "Done", "author": "Eric-Yuan", "createdAt": "2020-07-06T15:08:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTg5NDkzMQ=="}], "type": "inlineReview"}, {"oid": "9424de454b2ab7d1c6685f2bb52b9f2e659e0224", "url": "https://github.com/futurewei-cloud/alcor/commit/9424de454b2ab7d1c6685f2bb52b9f2e659e0224", "message": "add ut test cases and fixed some bugs", "committedDate": "2020-07-06T14:24:39Z", "type": "commit"}, {"oid": "aa49d011c8612f63ce57ee2d758dca5041f3069e", "url": "https://github.com/futurewei-cloud/alcor/commit/aa49d011c8612f63ce57ee2d758dca5041f3069e", "message": "update codes", "committedDate": "2020-07-06T15:07:50Z", "type": "commit"}, {"oid": "4b702f6b53184ee15145ca4449632aa24a1615c3", "url": "https://github.com/futurewei-cloud/alcor/commit/4b702f6b53184ee15145ca4449632aa24a1615c3", "message": "Merge remote-tracking branch 'upstream/master'", "committedDate": "2020-07-07T01:39:05Z", "type": "commit"}, {"oid": "0e6dc4bce1dac75cd383b38a57fcb8bb21a6c83c", "url": "https://github.com/futurewei-cloud/alcor/commit/0e6dc4bce1dac75cd383b38a57fcb8bb21a6c83c", "message": "upload elastic ip allocation initial codes", "committedDate": "2020-07-07T01:50:43Z", "type": "commit"}, {"oid": "641786b65ec97023a314a60f5fb0bdab51bbbaa4", "url": "https://github.com/futurewei-cloud/alcor/commit/641786b65ec97023a314a60f5fb0bdab51bbbaa4", "message": "upload elastic ip allocation initial codes", "committedDate": "2020-07-07T01:50:44Z", "type": "commit"}, {"oid": "8bda8daa515caced04c612f1e28f99f8e7376a53", "url": "https://github.com/futurewei-cloud/alcor/commit/8bda8daa515caced04c612f1e28f99f8e7376a53", "message": "fix compile error", "committedDate": "2020-07-07T01:50:44Z", "type": "commit"}, {"oid": "dcfa05feb3a68a0d677c30e6a03d89ea5eb1da7a", "url": "https://github.com/futurewei-cloud/alcor/commit/dcfa05feb3a68a0d677c30e6a03d89ea5eb1da7a", "message": "upload elastic ip allocation initial codes", "committedDate": "2020-07-07T01:50:44Z", "type": "commit"}, {"oid": "d7a92cb6ed1aecba6bf2e28704767cd376100f2e", "url": "https://github.com/futurewei-cloud/alcor/commit/d7a92cb6ed1aecba6bf2e28704767cd376100f2e", "message": "upload elastic ip allocation initial codes", "committedDate": "2020-07-07T01:50:44Z", "type": "commit"}, {"oid": "c95e4df2a9d87855d98a608a9a4b0b75c24e603e", "url": "https://github.com/futurewei-cloud/alcor/commit/c95e4df2a9d87855d98a608a9a4b0b75c24e603e", "message": "fix compile error", "committedDate": "2020-07-07T01:50:44Z", "type": "commit"}, {"oid": "54f9311e03ab04b72f0d2bb56b9233f6b5ea950f", "url": "https://github.com/futurewei-cloud/alcor/commit/54f9311e03ab04b72f0d2bb56b9233f6b5ea950f", "message": "update doc by adding some description about allocation algorithm and API", "committedDate": "2020-07-07T01:50:45Z", "type": "commit"}, {"oid": "6bfa73d2c7423c863b2634186865c28f96619f15", "url": "https://github.com/futurewei-cloud/alcor/commit/6bfa73d2c7423c863b2634186865c28f96619f15", "message": "update elastic ip allocation algorithm", "committedDate": "2020-07-07T01:50:45Z", "type": "commit"}, {"oid": "ca00c088cfc94624183ee227466b5f53fc97c2ac", "url": "https://github.com/futurewei-cloud/alcor/commit/ca00c088cfc94624183ee227466b5f53fc97c2ac", "message": "update codes", "committedDate": "2020-07-07T01:50:45Z", "type": "commit"}, {"oid": "37a32976b350eb67bc7c120187b55feaff4b786f", "url": "https://github.com/futurewei-cloud/alcor/commit/37a32976b350eb67bc7c120187b55feaff4b786f", "message": "update codes", "committedDate": "2020-07-07T01:50:46Z", "type": "commit"}, {"oid": "a6cb032e49f1406988202bcad174ad495521e61e", "url": "https://github.com/futurewei-cloud/alcor/commit/a6cb032e49f1406988202bcad174ad495521e61e", "message": "update codes", "committedDate": "2020-07-07T01:51:07Z", "type": "commit"}, {"oid": "41abaffa5cfb968ad5db2dca4c3b70475b6f0868", "url": "https://github.com/futurewei-cloud/alcor/commit/41abaffa5cfb968ad5db2dca4c3b70475b6f0868", "message": "upload elastic ip allocation initial codes", "committedDate": "2020-07-07T01:51:08Z", "type": "commit"}, {"oid": "b2c2ae5d3211e03530aab0238375f084b75d3256", "url": "https://github.com/futurewei-cloud/alcor/commit/b2c2ae5d3211e03530aab0238375f084b75d3256", "message": "upload elastic ip allocation initial codes", "committedDate": "2020-07-07T01:51:08Z", "type": "commit"}, {"oid": "6b6a6642a72f1c4af3810d11ece461e9e02a6e99", "url": "https://github.com/futurewei-cloud/alcor/commit/6b6a6642a72f1c4af3810d11ece461e9e02a6e99", "message": "fix compile error", "committedDate": "2020-07-07T01:51:08Z", "type": "commit"}, {"oid": "9b3962095afe6ed398e2258e59526d3367b415c7", "url": "https://github.com/futurewei-cloud/alcor/commit/9b3962095afe6ed398e2258e59526d3367b415c7", "message": "upload elastic ip allocation initial codes", "committedDate": "2020-07-07T01:51:09Z", "type": "commit"}, {"oid": "6e093918da8ea7a44cc65125eabcde0a169c7700", "url": "https://github.com/futurewei-cloud/alcor/commit/6e093918da8ea7a44cc65125eabcde0a169c7700", "message": "upload elastic ip allocation initial codes", "committedDate": "2020-07-07T01:51:09Z", "type": "commit"}]}