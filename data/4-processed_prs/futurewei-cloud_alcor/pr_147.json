{"pr_number": 147, "pr_title": "[Microservices] MAC address manager", "pr_createdAt": "2020-04-06T10:18:56Z", "pr_url": "https://github.com/futurewei-cloud/alcor/pull/147", "timeline": [{"oid": "d933b0d519b9ec6b8753a93d26f19ab66cb720ad", "url": "https://github.com/futurewei-cloud/alcor/commit/d933b0d519b9ec6b8753a93d26f19ab66cb720ad", "message": "[Microservices] Mac address manager", "committedDate": "2020-04-06T10:14:58Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM5NjQ4Mg==", "url": "https://github.com/futurewei-cloud/alcor/pull/147#discussion_r404396482", "bodyText": "Can you check the latest vpc_manager codes? We have updated its pom.file to exclude a generated jar file in the dependencies list?", "author": "xieus", "createdAt": "2020-04-06T21:22:33Z", "path": "services/mac_manager/pom.xml", "diffHunk": "@@ -0,0 +1,128 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\t<modelVersion>4.0.0</modelVersion>\n+\t<parent>\n+\t\t<groupId>org.springframework.boot</groupId>\n+\t\t<artifactId>spring-boot-starter-parent</artifactId>\n+\t\t<version>2.2.6.RELEASE</version>\n+\t\t<relativePath/> <!-- lookup parent from repository -->\n+\t</parent>\n+\t<groupId>com.futurewei.alcor.macmanager</groupId>\n+\t<artifactId>AlcorMacManager</artifactId>\n+\t<version>0.0.1-SNAPSHOT</version>\n+\t<name>AlcorMacManager</name>\n+\t<description>Virtual Mac Address Manager Module</description>\n+\n+\t<properties>\n+\t\t<java.version>1.8</java.version>\n+\t</properties>\n+\n+\t<dependencies>\n+\t\t<dependency>\n+\t\t\t<groupId>org.springframework.boot</groupId>\n+\t\t\t<artifactId>spring-boot-starter-actuator</artifactId>\n+\t\t</dependency>\n+\t\t<dependency>\n+\t\t\t<groupId>org.springframework.boot</groupId>\n+\t\t\t<artifactId>spring-boot-starter-data-redis</artifactId>\n+\t\t</dependency>\n+\t\t<dependency>\n+\t\t\t<groupId>org.springframework.boot</groupId>\n+\t\t\t<artifactId>spring-boot-starter-thymeleaf</artifactId>\n+\t\t</dependency>\n+\t\t<dependency>\n+\t\t\t<groupId>org.springframework.boot</groupId>\n+\t\t\t<artifactId>spring-boot-starter-web</artifactId>\n+\t\t</dependency>\n+\t\t<dependency>\n+\t\t\t<groupId>org.apache.kafka</groupId>\n+\t\t\t<artifactId>kafka-clients</artifactId>\n+\t\t\t<version>2.3.0</version>\n+\t\t</dependency>\n+\t\t<dependency>\n+\t\t\t<groupId>com.google.protobuf</groupId>\n+\t\t\t<artifactId>protobuf-java</artifactId>\n+\t\t\t<version>3.8.0</version>\n+\t\t</dependency>\n+\t\t<dependency>\n+\t\t\t<groupId>org.projectlombok</groupId>\n+\t\t\t<artifactId>lombok</artifactId>\n+\t\t\t<version>1.18.0</version>\n+\t\t</dependency>\n+\t\t<dependency>\n+\t\t\t<groupId>com.futurewei.alcor.common</groupId>\n+\t\t\t<artifactId>alcor_common_lib</artifactId>", "originalCommit": "d933b0d519b9ec6b8753a93d26f19ab66cb720ad", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY0ODUwMQ==", "url": "https://github.com/futurewei-cloud/alcor/pull/147#discussion_r404648501", "bodyText": "the dependency is fixed & updated", "author": "kimeunju108", "createdAt": "2020-04-07T08:57:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM5NjQ4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA3OTM5MQ==", "url": "https://github.com/futurewei-cloud/alcor/pull/147#discussion_r405079391", "bodyText": "Thanks!", "author": "xieus", "createdAt": "2020-04-07T20:06:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM5NjQ4Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM5Njc1Mw==", "url": "https://github.com/futurewei-cloud/alcor/pull/147#discussion_r404396753", "bodyText": "All grpc dependencies are not needed at this time.", "author": "xieus", "createdAt": "2020-04-06T21:23:03Z", "path": "services/mac_manager/pom.xml", "diffHunk": "@@ -0,0 +1,128 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\t<modelVersion>4.0.0</modelVersion>\n+\t<parent>\n+\t\t<groupId>org.springframework.boot</groupId>\n+\t\t<artifactId>spring-boot-starter-parent</artifactId>\n+\t\t<version>2.2.6.RELEASE</version>\n+\t\t<relativePath/> <!-- lookup parent from repository -->\n+\t</parent>\n+\t<groupId>com.futurewei.alcor.macmanager</groupId>\n+\t<artifactId>AlcorMacManager</artifactId>\n+\t<version>0.0.1-SNAPSHOT</version>\n+\t<name>AlcorMacManager</name>\n+\t<description>Virtual Mac Address Manager Module</description>\n+\n+\t<properties>\n+\t\t<java.version>1.8</java.version>\n+\t</properties>\n+\n+\t<dependencies>\n+\t\t<dependency>\n+\t\t\t<groupId>org.springframework.boot</groupId>\n+\t\t\t<artifactId>spring-boot-starter-actuator</artifactId>\n+\t\t</dependency>\n+\t\t<dependency>\n+\t\t\t<groupId>org.springframework.boot</groupId>\n+\t\t\t<artifactId>spring-boot-starter-data-redis</artifactId>\n+\t\t</dependency>\n+\t\t<dependency>\n+\t\t\t<groupId>org.springframework.boot</groupId>\n+\t\t\t<artifactId>spring-boot-starter-thymeleaf</artifactId>\n+\t\t</dependency>\n+\t\t<dependency>\n+\t\t\t<groupId>org.springframework.boot</groupId>\n+\t\t\t<artifactId>spring-boot-starter-web</artifactId>\n+\t\t</dependency>\n+\t\t<dependency>\n+\t\t\t<groupId>org.apache.kafka</groupId>\n+\t\t\t<artifactId>kafka-clients</artifactId>\n+\t\t\t<version>2.3.0</version>\n+\t\t</dependency>\n+\t\t<dependency>\n+\t\t\t<groupId>com.google.protobuf</groupId>\n+\t\t\t<artifactId>protobuf-java</artifactId>\n+\t\t\t<version>3.8.0</version>\n+\t\t</dependency>\n+\t\t<dependency>\n+\t\t\t<groupId>org.projectlombok</groupId>\n+\t\t\t<artifactId>lombok</artifactId>\n+\t\t\t<version>1.18.0</version>\n+\t\t</dependency>\n+\t\t<dependency>\n+\t\t\t<groupId>com.futurewei.alcor.common</groupId>\n+\t\t\t<artifactId>alcor_common_lib</artifactId>\n+\t\t\t<version>0.1.0</version>\n+\t\t\t<scope>system</scope>\n+\t\t\t<systemPath>${pom.basedir}/lib/alcor_common_lib-0.1.0-SNAPSHOT.jar</systemPath>\n+\t\t</dependency>\n+\t\t<dependency>\n+\t\t\t<groupId>mysql</groupId>\n+\t\t\t<artifactId>mysql-connector-java</artifactId>\n+\t\t\t<scope>runtime</scope>\n+\t\t</dependency>\n+\t\t<dependency>\n+\t\t\t<groupId>org.apache.commons</groupId>\n+\t\t\t<artifactId>commons-pool2</artifactId>\n+\t\t\t<version>2.4.2</version>\n+\t\t</dependency>\n+\t\t<dependency>\n+\t\t\t<groupId>io.grpc</groupId>\n+\t\t\t<artifactId>grpc-netty-shaded</artifactId>\n+\t\t\t<version>1.23.0</version>\n+\t\t</dependency>\n+\t\t<dependency>\n+\t\t\t<groupId>io.grpc</groupId>\n+\t\t\t<artifactId>grpc-protobuf</artifactId>\n+\t\t\t<version>1.23.0</version>\n+\t\t</dependency>\n+\t\t<dependency>\n+\t\t\t<groupId>io.grpc</groupId>", "originalCommit": "d933b0d519b9ec6b8753a93d26f19ab66cb720ad", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY1MDIyMw==", "url": "https://github.com/futurewei-cloud/alcor/pull/147#discussion_r404650223", "bodyText": "all grpc dependencies were deleted.", "author": "kimeunju108", "createdAt": "2020-04-07T09:00:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM5Njc1Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM5NzY3Nw==", "url": "https://github.com/futurewei-cloud/alcor/pull/147#discussion_r404397677", "bodyText": "\"macs\" or \"mac addresses\"", "author": "xieus", "createdAt": "2020-04-06T21:24:42Z", "path": "services/mac_manager/src/main/java/com/futurewei/alcor/macmanager/controller/MacController.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+\n+package com.futurewei.alcor.macmanager.controller;\n+\n+import com.futurewei.alcor.common.exception.ParameterNullOrEmptyException;\n+import com.futurewei.alcor.common.exception.ResourcePersistenceException;\n+import com.futurewei.alcor.macmanager.entity.MacState;\n+import com.futurewei.alcor.macmanager.entity.MacStateJson;\n+import com.futurewei.alcor.macmanager.service.MacAddressService;\n+import com.futurewei.alcor.macmanager.utils.RestPreconditionsUtil;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.web.bind.annotation.*;\n+\n+import java.util.Map;\n+\n+import static org.springframework.web.bind.annotation.RequestMethod.GET;\n+import static org.springframework.web.bind.annotation.RequestMethod.POST;\n+\n+@RestController\n+public class MacController {\n+\n+    final String DELIMITER = \"/\";\n+\n+    @Autowired\n+    private MacAddressService service;\n+\n+    @RequestMapping(\n+            method = GET,\n+            value = {\"/macaddress/{macaddress}\", \"/v4/macaddress/{macaddress}\"})", "originalCommit": "d933b0d519b9ec6b8753a93d26f19ab66cb720ad", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY1MTQzOA==", "url": "https://github.com/futurewei-cloud/alcor/pull/147#discussion_r404651438", "bodyText": "It is changed to \"macs\".", "author": "kimeunju108", "createdAt": "2020-04-07T09:02:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM5NzY3Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQwMjU1OQ==", "url": "https://github.com/futurewei-cloud/alcor/pull/147#discussion_r404402559", "bodyText": "What is OuiState used for?", "author": "xieus", "createdAt": "2020-04-06T21:34:22Z", "path": "services/mac_manager/src/main/java/com/futurewei/alcor/macmanager/entity/OuiState.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.macmanager.entity;\n+\n+import lombok.Data;\n+\n+import java.io.Serializable;\n+\n+@Data\n+public class OuiState implements Serializable {", "originalCommit": "d933b0d519b9ec6b8753a93d26f19ab66cb720ad", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY1Mjc1Ng==", "url": "https://github.com/futurewei-cloud/alcor/pull/147#discussion_r404652756", "bodyText": "OUI is Orgarnization Unit Identifier.  A mac address is composed of two parts (OUI and NIC).", "author": "kimeunju108", "createdAt": "2020-04-07T09:04:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQwMjU1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA4MDQ2OA==", "url": "https://github.com/futurewei-cloud/alcor/pull/147#discussion_r405080468", "bodyText": "Cool. Let us leave some comments on the source file so that the community could understand as well. Ideally we could add some links to external resources.", "author": "xieus", "createdAt": "2020-04-07T20:08:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQwMjU1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY1MTU2NA==", "url": "https://github.com/futurewei-cloud/alcor/pull/147#discussion_r407651564", "bodyText": "After our discussion, OuiState is removed and now it is configurable.", "author": "kimeunju108", "createdAt": "2020-04-13T18:54:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQwMjU1OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQwMjc4MQ==", "url": "https://github.com/futurewei-cloud/alcor/pull/147#discussion_r404402781", "bodyText": "Remove line 36.", "author": "xieus", "createdAt": "2020-04-06T21:34:51Z", "path": "services/mac_manager/src/main/java/com/futurewei/alcor/macmanager/entity/MacState.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+\n+package com.futurewei.alcor.macmanager.entity;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import lombok.Data;\n+import java.io.Serializable;\n+\n+@Data\n+public class MacState implements Serializable {\n+\n+    @JsonProperty(\"mac_address\")\n+    private String macAddress;\n+\n+    @JsonProperty(\"project_id\")\n+    private String projectId;\n+\n+    @JsonProperty(\"vpc_id\")\n+    private String vpcId;\n+\n+    @JsonProperty(\"port_id\")\n+", "originalCommit": "d933b0d519b9ec6b8753a93d26f19ab66cb720ad", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY1MzI4NA==", "url": "https://github.com/futurewei-cloud/alcor/pull/147#discussion_r404653284", "bodyText": "Done", "author": "kimeunju108", "createdAt": "2020-04-07T09:05:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQwMjc4MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQwNTM3Nw==", "url": "https://github.com/futurewei-cloud/alcor/pull/147#discussion_r404405377", "bodyText": "We have RestPreconditionsUtil in the alcor/lib folder, which already contains the commonly shared funcs. Could you remove those common functions and only leave the mac-specific ones here?", "author": "xieus", "createdAt": "2020-04-06T21:40:17Z", "path": "services/mac_manager/src/main/java/com/futurewei/alcor/macmanager/utils/RestPreconditionsUtil.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+\n+package com.futurewei.alcor.macmanager.utils;\n+\n+import com.futurewei.alcor.common.exception.*;\n+import com.futurewei.alcor.macmanager.entity.MacState;\n+import org.thymeleaf.util.StringUtils;\n+\n+public class RestPreconditionsUtil {", "originalCommit": "d933b0d519b9ec6b8753a93d26f19ab66cb720ad", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY2NzYzNQ==", "url": "https://github.com/futurewei-cloud/alcor/pull/147#discussion_r404667635", "bodyText": "Done.", "author": "kimeunju108", "createdAt": "2020-04-07T09:28:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQwNTM3Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQwNTg0NQ==", "url": "https://github.com/futurewei-cloud/alcor/pull/147#discussion_r404405845", "bodyText": "As a next step, we should start adding more UTs in the MacManager module.", "author": "xieus", "createdAt": "2020-04-06T21:41:13Z", "path": "services/mac_manager/src/test/java/com/futurewei/alcor/macmanager/AlcorMacManager/MacManagerApplicationTests.java", "diffHunk": "@@ -0,0 +1,15 @@\n+package com.futurewei.alcor.macmanager.AlcorMacManager;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.test.context.junit4.SpringRunner;\n+\n+@RunWith(SpringRunner.class)\n+@SpringBootTest\n+class MacManagerApplicationTests {", "originalCommit": "d933b0d519b9ec6b8753a93d26f19ab66cb720ad", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY2OTA3Mg==", "url": "https://github.com/futurewei-cloud/alcor/pull/147#discussion_r404669072", "bodyText": "3 more UTs are added and I will add more UTs.", "author": "kimeunju108", "createdAt": "2020-04-07T09:30:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQwNTg0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkwMDI1NQ==", "url": "https://github.com/futurewei-cloud/alcor/pull/147#discussion_r406900255", "bodyText": "Thank you! That is a great start.", "author": "xieus", "createdAt": "2020-04-10T19:08:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQwNTg0NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQwNjEzNg==", "url": "https://github.com/futurewei-cloud/alcor/pull/147#discussion_r404406136", "bodyText": "We will need extensive UTs to make sure our mac generation codes cover many corner cases.", "author": "xieus", "createdAt": "2020-04-06T21:41:54Z", "path": "services/mac_manager/src/main/java/com/futurewei/alcor/macmanager/service/MacAddressService.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.macmanager.service;\n+\n+import com.futurewei.alcor.macmanager.dao.MacRedisRepository;\n+import com.futurewei.alcor.macmanager.dao.OuiRedisRepository;\n+import com.futurewei.alcor.macmanager.entity.MacState;\n+import com.futurewei.alcor.macmanager.entity.OuiState;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+import java.util.Map;\n+import java.util.concurrent.ThreadLocalRandom;\n+\n+@Service\n+public class MacAddressService {\n+\n+    final String DELIMITER1 = \"/\";\n+    final String DELIMITER2 = \":\";\n+    final int KEY_LENGTH = 8;\n+\n+    @Autowired\n+    private OuiRedisRepository ouiRedisRepository;\n+\n+    @Autowired\n+    private MacRedisRepository macRedisRepository;\n+\n+    public MacState getMacStateByMacAddress(String macAddress) {\n+        String key = getKey(macAddress);\n+        macRedisRepository.setKey(key);\n+        MacState macState = macRedisRepository.findItem(macAddress);\n+        return macState;\n+    }\n+\n+    public Map getMacStateByVpcIdPort(String projectId, String vpcId, String portId) {\n+        String hk = makeKey(projectId, vpcId, portId);\n+        String oui = ouiRedisRepository.findOui(hk);\n+        macRedisRepository.setKey(oui);\n+        return macRedisRepository.findMacAddressesbyVpcPort(portId);\n+    }\n+\n+    public MacState createMacState(MacState macState) throws Exception {\n+        String macAddress;\n+        String projectId = macState.getProjectId();\n+        String vpcId = macState.getVpcId();\n+        String portId = macState.getPortId();\n+        String oui = generateOui(projectId, vpcId);\n+        String nic = generateNic(oui, projectId, vpcId, portId);\n+        macAddress = oui + DELIMITER2 + nic;\n+        macState.setMacAddress(macAddress);\n+        return macState;\n+    }\n+\n+    private String generateOui(String projectId, String vpcId) {\n+        long randomOui;\n+        String hk = projectId + DELIMITER1 + vpcId;\n+        String oui = ouiRedisRepository.findOui(hk);\n+        if (oui == null) {\n+            while (oui == null) {\n+                randomOui = ThreadLocalRandom.current().nextLong(0, 2 ^ 24);\n+                String ouiTemp = hexToMac(Long.toHexString(randomOui));\n+                if (macRedisRepository.exisingOui(ouiTemp) == false)\n+                    oui = ouiTemp;\n+            }\n+            ouiRedisRepository.addItem(new OuiState(projectId + DELIMITER1 + vpcId, oui));\n+        }\n+        return oui;\n+    }\n+\n+    private String generateNic(String oui, String projectId, String vpcId, String portId) {", "originalCommit": "d933b0d519b9ec6b8753a93d26f19ab66cb720ad", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY2OTMzNA==", "url": "https://github.com/futurewei-cloud/alcor/pull/147#discussion_r404669334", "bodyText": "I agree and I will do it.", "author": "kimeunju108", "createdAt": "2020-04-07T09:30:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQwNjEzNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA4MzkwNw==", "url": "https://github.com/futurewei-cloud/alcor/pull/147#discussion_r409083907", "bodyText": "See quite a few UTs are added. Thanks!", "author": "xieus", "createdAt": "2020-04-15T19:31:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQwNjEzNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQwNjY4MQ==", "url": "https://github.com/futurewei-cloud/alcor/pull/147#discussion_r404406681", "bodyText": "If multiple clients try to allocate mac addresses, what is the current concurrency handling at mac manager?", "author": "xieus", "createdAt": "2020-04-06T21:43:09Z", "path": "services/mac_manager/src/main/java/com/futurewei/alcor/macmanager/exception/UniquenessViolationException.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.macmanager.exception;\n+\n+public class UniquenessViolationException extends Exception {", "originalCommit": "d933b0d519b9ec6b8753a93d26f19ab66cb720ad", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY4MjM3MQ==", "url": "https://github.com/futurewei-cloud/alcor/pull/147#discussion_r404682371", "bodyText": "I added this concurrency handling function to requirement list. There are several things to consider for concurrency control such as concurrency in API server and storage system.", "author": "kimeunju108", "createdAt": "2020-04-07T09:51:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQwNjY4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA4MDgyMg==", "url": "https://github.com/futurewei-cloud/alcor/pull/147#discussion_r405080822", "bodyText": "Cool this is very important next-step.", "author": "xieus", "createdAt": "2020-04-07T20:08:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQwNjY4MQ=="}], "type": "inlineReview"}, {"oid": "f6316b456a7398ce2a74e0eb9a8992c4cd436bb9", "url": "https://github.com/futurewei-cloud/alcor/commit/f6316b456a7398ce2a74e0eb9a8992c4cd436bb9", "message": "[Microservices] Mac address manager - APIs create, get, delete", "committedDate": "2020-04-06T22:10:44Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQxNTM3MQ==", "url": "https://github.com/futurewei-cloud/alcor/pull/147#discussion_r404415371", "bodyText": "do we really need this 2 lines since we do not exclude the src previously", "author": "haboy52581", "createdAt": "2020-04-06T22:02:07Z", "path": "services/mac_manager/.gitignore", "diffHunk": "@@ -0,0 +1,31 @@\n+HELP.md\n+target/\n+!.mvn/wrapper/maven-wrapper.jar\n+!**/src/main/**", "originalCommit": "d933b0d519b9ec6b8753a93d26f19ab66cb720ad", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzYyOTQwMQ==", "url": "https://github.com/futurewei-cloud/alcor/pull/147#discussion_r407629401", "bodyText": "This is the file automatically generated. I will check if it is fine to delete.", "author": "kimeunju108", "createdAt": "2020-04-13T18:14:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQxNTM3MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQxNTc5Mg==", "url": "https://github.com/futurewei-cloud/alcor/pull/147#discussion_r404415792", "bodyText": "should we extract the common part to constant since the next static final are mostly the same", "author": "haboy52581", "createdAt": "2020-04-06T22:03:11Z", "path": "services/mac_manager/.mvn/wrapper/MavenWrapperDownloader.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Copyright 2007-present the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import java.net.*;\n+import java.io.*;\n+import java.nio.channels.*;\n+import java.util.Properties;\n+\n+public class MavenWrapperDownloader {\n+\n+    private static final String WRAPPER_VERSION = \"0.5.6\";\n+    /**\n+     * Default URL to download the maven-wrapper.jar from, if no 'downloadUrl' is provided.\n+     */\n+    private static final String DEFAULT_DOWNLOAD_URL = \"https://repo.maven.apache.org/maven2/io/takari/maven-wrapper/\"\n+        + WRAPPER_VERSION + \"/maven-wrapper-\" + WRAPPER_VERSION + \".jar\";\n+\n+    /**\n+     * Path to the maven-wrapper.properties file, which might contain a downloadUrl property to\n+     * use instead of the default one.\n+     */\n+    private static final String MAVEN_WRAPPER_PROPERTIES_PATH =", "originalCommit": "d933b0d519b9ec6b8753a93d26f19ab66cb720ad", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzYyOTgwMw==", "url": "https://github.com/futurewei-cloud/alcor/pull/147#discussion_r407629803", "bodyText": "This file was automatically generated. I will check if it is fine to delete.", "author": "kimeunju108", "createdAt": "2020-04-13T18:14:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQxNTc5Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQxNjQ0NA==", "url": "https://github.com/futurewei-cloud/alcor/pull/147#discussion_r404416444", "bodyText": "please avoid using System.out , maybe we could try using spring boot logging Logger logger = LoggerFactory.getLogger(MavenWrapperDownloader .class); so that it would has more options to do different level print", "author": "haboy52581", "createdAt": "2020-04-06T22:04:30Z", "path": "services/mac_manager/.mvn/wrapper/MavenWrapperDownloader.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Copyright 2007-present the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import java.net.*;\n+import java.io.*;\n+import java.nio.channels.*;\n+import java.util.Properties;\n+\n+public class MavenWrapperDownloader {\n+\n+    private static final String WRAPPER_VERSION = \"0.5.6\";\n+    /**\n+     * Default URL to download the maven-wrapper.jar from, if no 'downloadUrl' is provided.\n+     */\n+    private static final String DEFAULT_DOWNLOAD_URL = \"https://repo.maven.apache.org/maven2/io/takari/maven-wrapper/\"\n+        + WRAPPER_VERSION + \"/maven-wrapper-\" + WRAPPER_VERSION + \".jar\";\n+\n+    /**\n+     * Path to the maven-wrapper.properties file, which might contain a downloadUrl property to\n+     * use instead of the default one.\n+     */\n+    private static final String MAVEN_WRAPPER_PROPERTIES_PATH =\n+            \".mvn/wrapper/maven-wrapper.properties\";\n+\n+    /**\n+     * Path where the maven-wrapper.jar will be saved to.\n+     */\n+    private static final String MAVEN_WRAPPER_JAR_PATH =\n+            \".mvn/wrapper/maven-wrapper.jar\";\n+\n+    /**\n+     * Name of the property which should be used to override the default download url for the wrapper.\n+     */\n+    private static final String PROPERTY_NAME_WRAPPER_URL = \"wrapperUrl\";\n+\n+    public static void main(String args[]) {\n+        System.out.println(\"- Downloader started\");", "originalCommit": "d933b0d519b9ec6b8753a93d26f19ab66cb720ad", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY0Njc1Nw==", "url": "https://github.com/futurewei-cloud/alcor/pull/147#discussion_r407646757", "bodyText": "This file was automatically generated. I will check if it is fine to delete.", "author": "kimeunju108", "createdAt": "2020-04-13T18:45:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQxNjQ0NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQxNjkzNg==", "url": "https://github.com/futurewei-cloud/alcor/pull/147#discussion_r404416936", "bodyText": "please using log error", "author": "haboy52581", "createdAt": "2020-04-06T22:05:35Z", "path": "services/mac_manager/.mvn/wrapper/MavenWrapperDownloader.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Copyright 2007-present the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import java.net.*;\n+import java.io.*;\n+import java.nio.channels.*;\n+import java.util.Properties;\n+\n+public class MavenWrapperDownloader {\n+\n+    private static final String WRAPPER_VERSION = \"0.5.6\";\n+    /**\n+     * Default URL to download the maven-wrapper.jar from, if no 'downloadUrl' is provided.\n+     */\n+    private static final String DEFAULT_DOWNLOAD_URL = \"https://repo.maven.apache.org/maven2/io/takari/maven-wrapper/\"\n+        + WRAPPER_VERSION + \"/maven-wrapper-\" + WRAPPER_VERSION + \".jar\";\n+\n+    /**\n+     * Path to the maven-wrapper.properties file, which might contain a downloadUrl property to\n+     * use instead of the default one.\n+     */\n+    private static final String MAVEN_WRAPPER_PROPERTIES_PATH =\n+            \".mvn/wrapper/maven-wrapper.properties\";\n+\n+    /**\n+     * Path where the maven-wrapper.jar will be saved to.\n+     */\n+    private static final String MAVEN_WRAPPER_JAR_PATH =\n+            \".mvn/wrapper/maven-wrapper.jar\";\n+\n+    /**\n+     * Name of the property which should be used to override the default download url for the wrapper.\n+     */\n+    private static final String PROPERTY_NAME_WRAPPER_URL = \"wrapperUrl\";\n+\n+    public static void main(String args[]) {\n+        System.out.println(\"- Downloader started\");\n+        File baseDirectory = new File(args[0]);\n+        System.out.println(\"- Using base directory: \" + baseDirectory.getAbsolutePath());\n+\n+        // If the maven-wrapper.properties exists, read it and check if it contains a custom\n+        // wrapperUrl parameter.\n+        File mavenWrapperPropertyFile = new File(baseDirectory, MAVEN_WRAPPER_PROPERTIES_PATH);\n+        String url = DEFAULT_DOWNLOAD_URL;\n+        if(mavenWrapperPropertyFile.exists()) {\n+            FileInputStream mavenWrapperPropertyFileInputStream = null;\n+            try {\n+                mavenWrapperPropertyFileInputStream = new FileInputStream(mavenWrapperPropertyFile);\n+                Properties mavenWrapperProperties = new Properties();\n+                mavenWrapperProperties.load(mavenWrapperPropertyFileInputStream);\n+                url = mavenWrapperProperties.getProperty(PROPERTY_NAME_WRAPPER_URL, url);\n+            } catch (IOException e) {\n+                System.out.println(\"- ERROR loading '\" + MAVEN_WRAPPER_PROPERTIES_PATH + \"'\");\n+            } finally {\n+                try {\n+                    if(mavenWrapperPropertyFileInputStream != null) {\n+                        mavenWrapperPropertyFileInputStream.close();\n+                    }\n+                } catch (IOException e) {\n+                    // Ignore ...\n+                }\n+            }\n+        }\n+        System.out.println(\"- Downloading from: \" + url);\n+\n+        File outputFile = new File(baseDirectory.getAbsolutePath(), MAVEN_WRAPPER_JAR_PATH);\n+        if(!outputFile.getParentFile().exists()) {\n+            if(!outputFile.getParentFile().mkdirs()) {\n+                System.out.println(\n+                        \"- ERROR creating output directory '\" + outputFile.getParentFile().getAbsolutePath() + \"'\");\n+            }\n+        }\n+        System.out.println(\"- Downloading to: \" + outputFile.getAbsolutePath());\n+        try {\n+            downloadFileFromURL(url, outputFile);\n+            System.out.println(\"Done\");\n+            System.exit(0);\n+        } catch (Throwable e) {\n+            System.out.println(\"- Error downloading\");", "originalCommit": "d933b0d519b9ec6b8753a93d26f19ab66cb720ad", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY0NzE0NA==", "url": "https://github.com/futurewei-cloud/alcor/pull/147#discussion_r407647144", "bodyText": "This file was automatically generated. I will check if it is fine to change.", "author": "kimeunju108", "createdAt": "2020-04-13T18:46:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQxNjkzNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQyMDI1Nw==", "url": "https://github.com/futurewei-cloud/alcor/pull/147#discussion_r404420257", "bodyText": "should we use Optional in jdk8 to avoid the null pointer check?", "author": "haboy52581", "createdAt": "2020-04-06T22:13:19Z", "path": "services/mac_manager/.mvn/wrapper/MavenWrapperDownloader.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Copyright 2007-present the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import java.net.*;\n+import java.io.*;\n+import java.nio.channels.*;\n+import java.util.Properties;\n+\n+public class MavenWrapperDownloader {\n+\n+    private static final String WRAPPER_VERSION = \"0.5.6\";\n+    /**\n+     * Default URL to download the maven-wrapper.jar from, if no 'downloadUrl' is provided.\n+     */\n+    private static final String DEFAULT_DOWNLOAD_URL = \"https://repo.maven.apache.org/maven2/io/takari/maven-wrapper/\"\n+        + WRAPPER_VERSION + \"/maven-wrapper-\" + WRAPPER_VERSION + \".jar\";\n+\n+    /**\n+     * Path to the maven-wrapper.properties file, which might contain a downloadUrl property to\n+     * use instead of the default one.\n+     */\n+    private static final String MAVEN_WRAPPER_PROPERTIES_PATH =\n+            \".mvn/wrapper/maven-wrapper.properties\";\n+\n+    /**\n+     * Path where the maven-wrapper.jar will be saved to.\n+     */\n+    private static final String MAVEN_WRAPPER_JAR_PATH =\n+            \".mvn/wrapper/maven-wrapper.jar\";\n+\n+    /**\n+     * Name of the property which should be used to override the default download url for the wrapper.\n+     */\n+    private static final String PROPERTY_NAME_WRAPPER_URL = \"wrapperUrl\";\n+\n+    public static void main(String args[]) {\n+        System.out.println(\"- Downloader started\");\n+        File baseDirectory = new File(args[0]);\n+        System.out.println(\"- Using base directory: \" + baseDirectory.getAbsolutePath());\n+\n+        // If the maven-wrapper.properties exists, read it and check if it contains a custom\n+        // wrapperUrl parameter.\n+        File mavenWrapperPropertyFile = new File(baseDirectory, MAVEN_WRAPPER_PROPERTIES_PATH);\n+        String url = DEFAULT_DOWNLOAD_URL;\n+        if(mavenWrapperPropertyFile.exists()) {\n+            FileInputStream mavenWrapperPropertyFileInputStream = null;\n+            try {\n+                mavenWrapperPropertyFileInputStream = new FileInputStream(mavenWrapperPropertyFile);\n+                Properties mavenWrapperProperties = new Properties();\n+                mavenWrapperProperties.load(mavenWrapperPropertyFileInputStream);\n+                url = mavenWrapperProperties.getProperty(PROPERTY_NAME_WRAPPER_URL, url);\n+            } catch (IOException e) {\n+                System.out.println(\"- ERROR loading '\" + MAVEN_WRAPPER_PROPERTIES_PATH + \"'\");\n+            } finally {\n+                try {\n+                    if(mavenWrapperPropertyFileInputStream != null) {\n+                        mavenWrapperPropertyFileInputStream.close();\n+                    }\n+                } catch (IOException e) {\n+                    // Ignore ...\n+                }\n+            }\n+        }\n+        System.out.println(\"- Downloading from: \" + url);\n+\n+        File outputFile = new File(baseDirectory.getAbsolutePath(), MAVEN_WRAPPER_JAR_PATH);\n+        if(!outputFile.getParentFile().exists()) {\n+            if(!outputFile.getParentFile().mkdirs()) {\n+                System.out.println(\n+                        \"- ERROR creating output directory '\" + outputFile.getParentFile().getAbsolutePath() + \"'\");\n+            }\n+        }\n+        System.out.println(\"- Downloading to: \" + outputFile.getAbsolutePath());\n+        try {\n+            downloadFileFromURL(url, outputFile);\n+            System.out.println(\"Done\");\n+            System.exit(0);\n+        } catch (Throwable e) {\n+            System.out.println(\"- Error downloading\");\n+            e.printStackTrace();\n+            System.exit(1);\n+        }\n+    }\n+\n+    private static void downloadFileFromURL(String urlString, File destination) throws Exception {\n+        if (System.getenv(\"MVNW_USERNAME\") != null && System.getenv(\"MVNW_PASSWORD\") != null) {", "originalCommit": "d933b0d519b9ec6b8753a93d26f19ab66cb720ad", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQyMDgxNA==", "url": "https://github.com/futurewei-cloud/alcor/pull/147#discussion_r404420814", "bodyText": "we should add try catch instead of throwing one exception to get more detail control during exception", "author": "haboy52581", "createdAt": "2020-04-06T22:14:32Z", "path": "services/mac_manager/.mvn/wrapper/MavenWrapperDownloader.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Copyright 2007-present the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import java.net.*;\n+import java.io.*;\n+import java.nio.channels.*;\n+import java.util.Properties;\n+\n+public class MavenWrapperDownloader {\n+\n+    private static final String WRAPPER_VERSION = \"0.5.6\";\n+    /**\n+     * Default URL to download the maven-wrapper.jar from, if no 'downloadUrl' is provided.\n+     */\n+    private static final String DEFAULT_DOWNLOAD_URL = \"https://repo.maven.apache.org/maven2/io/takari/maven-wrapper/\"\n+        + WRAPPER_VERSION + \"/maven-wrapper-\" + WRAPPER_VERSION + \".jar\";\n+\n+    /**\n+     * Path to the maven-wrapper.properties file, which might contain a downloadUrl property to\n+     * use instead of the default one.\n+     */\n+    private static final String MAVEN_WRAPPER_PROPERTIES_PATH =\n+            \".mvn/wrapper/maven-wrapper.properties\";\n+\n+    /**\n+     * Path where the maven-wrapper.jar will be saved to.\n+     */\n+    private static final String MAVEN_WRAPPER_JAR_PATH =\n+            \".mvn/wrapper/maven-wrapper.jar\";\n+\n+    /**\n+     * Name of the property which should be used to override the default download url for the wrapper.\n+     */\n+    private static final String PROPERTY_NAME_WRAPPER_URL = \"wrapperUrl\";\n+\n+    public static void main(String args[]) {\n+        System.out.println(\"- Downloader started\");\n+        File baseDirectory = new File(args[0]);\n+        System.out.println(\"- Using base directory: \" + baseDirectory.getAbsolutePath());\n+\n+        // If the maven-wrapper.properties exists, read it and check if it contains a custom\n+        // wrapperUrl parameter.\n+        File mavenWrapperPropertyFile = new File(baseDirectory, MAVEN_WRAPPER_PROPERTIES_PATH);\n+        String url = DEFAULT_DOWNLOAD_URL;\n+        if(mavenWrapperPropertyFile.exists()) {\n+            FileInputStream mavenWrapperPropertyFileInputStream = null;\n+            try {\n+                mavenWrapperPropertyFileInputStream = new FileInputStream(mavenWrapperPropertyFile);\n+                Properties mavenWrapperProperties = new Properties();\n+                mavenWrapperProperties.load(mavenWrapperPropertyFileInputStream);\n+                url = mavenWrapperProperties.getProperty(PROPERTY_NAME_WRAPPER_URL, url);\n+            } catch (IOException e) {\n+                System.out.println(\"- ERROR loading '\" + MAVEN_WRAPPER_PROPERTIES_PATH + \"'\");\n+            } finally {\n+                try {\n+                    if(mavenWrapperPropertyFileInputStream != null) {\n+                        mavenWrapperPropertyFileInputStream.close();\n+                    }\n+                } catch (IOException e) {\n+                    // Ignore ...\n+                }\n+            }\n+        }\n+        System.out.println(\"- Downloading from: \" + url);\n+\n+        File outputFile = new File(baseDirectory.getAbsolutePath(), MAVEN_WRAPPER_JAR_PATH);\n+        if(!outputFile.getParentFile().exists()) {\n+            if(!outputFile.getParentFile().mkdirs()) {\n+                System.out.println(\n+                        \"- ERROR creating output directory '\" + outputFile.getParentFile().getAbsolutePath() + \"'\");\n+            }\n+        }\n+        System.out.println(\"- Downloading to: \" + outputFile.getAbsolutePath());\n+        try {\n+            downloadFileFromURL(url, outputFile);\n+            System.out.println(\"Done\");\n+            System.exit(0);\n+        } catch (Throwable e) {\n+            System.out.println(\"- Error downloading\");\n+            e.printStackTrace();\n+            System.exit(1);\n+        }\n+    }\n+\n+    private static void downloadFileFromURL(String urlString, File destination) throws Exception {\n+        if (System.getenv(\"MVNW_USERNAME\") != null && System.getenv(\"MVNW_PASSWORD\") != null) {\n+            String username = System.getenv(\"MVNW_USERNAME\");\n+            char[] password = System.getenv(\"MVNW_PASSWORD\").toCharArray();\n+            Authenticator.setDefault(new Authenticator() {\n+                @Override\n+                protected PasswordAuthentication getPasswordAuthentication() {\n+                    return new PasswordAuthentication(username, password);\n+                }\n+            });\n+        }\n+        URL website = new URL(urlString);\n+        ReadableByteChannel rbc;\n+        rbc = Channels.newChannel(website.openStream());\n+        FileOutputStream fos = new FileOutputStream(destination);\n+        fos.getChannel().transferFrom(rbc, 0, Long.MAX_VALUE);", "originalCommit": "d933b0d519b9ec6b8753a93d26f19ab66cb720ad", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQyMTg1MQ==", "url": "https://github.com/futurewei-cloud/alcor/pull/147#discussion_r404421851", "bodyText": "please only import the needed one", "author": "haboy52581", "createdAt": "2020-04-06T22:17:08Z", "path": "services/mac_manager/src/main/java/com/futurewei/alcor/macmanager/controller/MacController.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+\n+package com.futurewei.alcor.macmanager.controller;\n+\n+import com.futurewei.alcor.common.exception.ParameterNullOrEmptyException;\n+import com.futurewei.alcor.common.exception.ResourcePersistenceException;\n+import com.futurewei.alcor.macmanager.entity.MacState;\n+import com.futurewei.alcor.macmanager.entity.MacStateJson;\n+import com.futurewei.alcor.macmanager.service.MacAddressService;\n+import com.futurewei.alcor.macmanager.utils.RestPreconditionsUtil;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.web.bind.annotation.*;", "originalCommit": "d933b0d519b9ec6b8753a93d26f19ab66cb720ad", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkwMjcyMA==", "url": "https://github.com/futurewei-cloud/alcor/pull/147#discussion_r406902720", "bodyText": "+1", "author": "xieus", "createdAt": "2020-04-10T19:14:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQyMTg1MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQyMjc4Ng==", "url": "https://github.com/futurewei-cloud/alcor/pull/147#discussion_r404422786", "bodyText": "I think we should detail which kind of exception in the list and add error log during exception happening, also why we catch then throw the same one without any operation?", "author": "haboy52581", "createdAt": "2020-04-06T22:19:20Z", "path": "services/mac_manager/src/main/java/com/futurewei/alcor/macmanager/controller/MacController.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+\n+package com.futurewei.alcor.macmanager.controller;\n+\n+import com.futurewei.alcor.common.exception.ParameterNullOrEmptyException;\n+import com.futurewei.alcor.common.exception.ResourcePersistenceException;\n+import com.futurewei.alcor.macmanager.entity.MacState;\n+import com.futurewei.alcor.macmanager.entity.MacStateJson;\n+import com.futurewei.alcor.macmanager.service.MacAddressService;\n+import com.futurewei.alcor.macmanager.utils.RestPreconditionsUtil;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.web.bind.annotation.*;\n+\n+import java.util.Map;\n+\n+import static org.springframework.web.bind.annotation.RequestMethod.GET;\n+import static org.springframework.web.bind.annotation.RequestMethod.POST;\n+\n+@RestController\n+public class MacController {\n+\n+    final String DELIMITER = \"/\";\n+\n+    @Autowired\n+    private MacAddressService service;\n+\n+    @RequestMapping(\n+            method = GET,\n+            value = {\"/macaddress/{macaddress}\", \"/v4/macaddress/{macaddress}\"})\n+    public MacStateJson getMacStateByMacAddress(@PathVariable String macaddress) throws Exception {\n+\n+        MacState macState = null;\n+\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(macaddress);\n+            RestPreconditionsUtil.verifyResourceFound(macaddress);\n+            macState = this.service.getMacStateByMacAddress(macaddress);\n+        } catch (ParameterNullOrEmptyException e) {\n+            //TODO: REST error code\n+            throw new Exception(e);\n+        }\n+\n+        if (macState == null) {\n+            //TODO: REST error code\n+            return new MacStateJson();\n+        }\n+        return new MacStateJson(macState);\n+    }\n+\n+    @RequestMapping(\n+            method = GET,\n+            value = {\"/project/{projectid}/vpcs/{vpcid}/port/{portid}\", \"/v4/{projectid}/vpcs/{vpcid}/port/{portid}\"})\n+    public MacStateJson getMacStateByVpcIdPort(@PathVariable String projectid, @PathVariable String vpcid, @PathVariable String portid) throws Exception {\n+\n+        MacState macState = null;\n+        Map map = null;\n+\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(vpcid);\n+            RestPreconditionsUtil.verifyResourceFound(portid);\n+            map = service.getMacStateByVpcIdPort(projectid, vpcid, portid);\n+        } catch (ParameterNullOrEmptyException e) {\n+            //TODO: REST error code\n+            throw new Exception(e);\n+        }\n+\n+        if (macState == null) {\n+            //TODO: REST error code\n+            return new MacStateJson();\n+        }\n+        return new MacStateJson(macState);\n+    }\n+\n+    @RequestMapping(\n+            method = POST,\n+            value = {\"/mac\", \"/v4/mac\"})\n+    @ResponseStatus(HttpStatus.CREATED)\n+    public MacStateJson createMacState(@RequestBody MacStateJson resource) throws Exception {\n+        MacState macState = null;\n+\n+        try {\n+            MacState inMacState = resource.getMacState();\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(inMacState);\n+            macState = service.createMacState(inMacState);\n+            if (macState == null) {\n+                throw new ResourcePersistenceException();\n+            }\n+        } catch (ParameterNullOrEmptyException e) {", "originalCommit": "d933b0d519b9ec6b8753a93d26f19ab66cb720ad", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY0NTY1MA==", "url": "https://github.com/futurewei-cloud/alcor/pull/147#discussion_r407645650", "bodyText": "I agree with your idea. This will be in agenda.", "author": "kimeunju108", "createdAt": "2020-04-13T18:43:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQyMjc4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA4NTExNw==", "url": "https://github.com/futurewei-cloud/alcor/pull/147#discussion_r409085117", "bodyText": "+1. Let us document different exceptions and logging messages.", "author": "xieus", "createdAt": "2020-04-15T19:33:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQyMjc4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTEyODI3Nw==", "url": "https://github.com/futurewei-cloud/alcor/pull/147#discussion_r409128277", "bodyText": "I am working on updating document.", "author": "kimeunju108", "createdAt": "2020-04-15T20:55:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQyMjc4Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQyMzA3Mw==", "url": "https://github.com/futurewei-cloud/alcor/pull/147#discussion_r404423073", "bodyText": "I think we should apply on the same code format to all ines, e.g line 75 and here why has different space line", "author": "haboy52581", "createdAt": "2020-04-06T22:20:02Z", "path": "services/mac_manager/src/main/java/com/futurewei/alcor/macmanager/dao/MacRedisRepository.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+\n+package com.futurewei.alcor.macmanager.dao;\n+\n+import com.futurewei.alcor.common.logging.Logger;\n+import com.futurewei.alcor.common.logging.LoggerFactory;\n+import com.futurewei.alcor.common.repo.ICacheRepository;\n+import com.futurewei.alcor.macmanager.entity.MacState;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.data.redis.core.HashOperations;\n+import org.springframework.data.redis.core.RedisTemplate;\n+import org.springframework.stereotype.Repository;\n+\n+import javax.annotation.PostConstruct;\n+import java.util.Map;\n+import java.util.logging.Level;\n+\n+@Repository\n+public class MacRedisRepository implements ICacheRepository<MacState> {\n+\n+    private String KEY;\n+\n+    private RedisTemplate<String, MacState> redisTemplate;\n+\n+    private HashOperations hashOperations;\n+\n+    @Autowired\n+    public MacRedisRepository(RedisTemplate<String, MacState> redisTemplate) {\n+\n+        this.redisTemplate = redisTemplate;\n+    }\n+\n+    @PostConstruct\n+    private void init() {\n+        hashOperations = redisTemplate.opsForHash();\n+    }\n+\n+    @Override\n+    public MacState findItem(String id) {\n+\n+        return (MacState) hashOperations.get(KEY, id);\n+    }\n+\n+    @Override\n+    public Map findAllItems() {\n+        return hashOperations.entries(KEY);\n+    }\n+\n+    @Override\n+    public void addItem(MacState newItem) {\n+        Logger logger = LoggerFactory.getLogger();\n+        logger.log(Level.INFO, \"mac address:\" + newItem.getMacAddress());\n+        hashOperations.put(KEY, newItem.getMacAddress(), newItem);\n+    }\n+\n+    @Override\n+    public void deleteItem(String id) {\n+        hashOperations.delete(KEY, id);\n+    }\n+\n+    public Map findMacAddressesbyVpcPort(String portId) {\n+        return null;\n+    }\n+\n+    public MacState findMac(String id) {\n+        return (MacState) hashOperations.get(KEY, id);\n+    }\n+\n+    public void setKey(String key) {\n+        KEY = key;\n+    }\n+\n+    public boolean exisingOui(String oui) {\n+", "originalCommit": "d933b0d519b9ec6b8753a93d26f19ab66cb720ad", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkwMzE3NQ==", "url": "https://github.com/futurewei-cloud/alcor/pull/147#discussion_r406903175", "bodyText": "Will auto reformatting in Intellji IDE (Ctrl + Shift + L) solve this problem?", "author": "xieus", "createdAt": "2020-04-10T19:16:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQyMzA3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY0NDYxNg==", "url": "https://github.com/futurewei-cloud/alcor/pull/147#discussion_r407644616", "bodyText": "Reformatting is done.", "author": "kimeunju108", "createdAt": "2020-04-13T18:42:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQyMzA3Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQyMzQ4Mw==", "url": "https://github.com/futurewei-cloud/alcor/pull/147#discussion_r404423483", "bodyText": "why we need space line sometime?", "author": "haboy52581", "createdAt": "2020-04-06T22:21:03Z", "path": "services/mac_manager/src/main/java/com/futurewei/alcor/macmanager/dao/OuiRedisRepository.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.macmanager.dao;\n+\n+import com.futurewei.alcor.common.logging.Logger;\n+import com.futurewei.alcor.common.logging.LoggerFactory;\n+import com.futurewei.alcor.common.repo.ICacheRepository;\n+import com.futurewei.alcor.macmanager.entity.OuiState;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.data.redis.core.HashOperations;\n+import org.springframework.data.redis.core.RedisTemplate;\n+import org.springframework.stereotype.Repository;\n+\n+import javax.annotation.PostConstruct;\n+import java.util.Map;\n+import java.util.logging.Level;\n+\n+@Repository\n+public class OuiRedisRepository implements ICacheRepository<OuiState> {\n+\n+    private static final String KEY = \"OuiState\";\n+\n+    private RedisTemplate<String, String> redisTemplate;\n+\n+    private HashOperations hashOperations;\n+\n+    @Autowired\n+    public OuiRedisRepository(RedisTemplate<String, String> redisTemplate) {\n+        this.redisTemplate = redisTemplate;\n+    }\n+\n+    @PostConstruct\n+    private void init() {\n+        hashOperations = redisTemplate.opsForHash();\n+    }\n+\n+    @Override\n+    public OuiState findItem(String id) {\n+", "originalCommit": "d933b0d519b9ec6b8753a93d26f19ab66cb720ad", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY0NDExNQ==", "url": "https://github.com/futurewei-cloud/alcor/pull/147#discussion_r407644115", "bodyText": "The file is reorganized.", "author": "kimeunju108", "createdAt": "2020-04-13T18:41:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQyMzQ4Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQyNDU0MA==", "url": "https://github.com/futurewei-cloud/alcor/pull/147#discussion_r404424540", "bodyText": "is there any sample input/output here to make people easy to understand the data format?", "author": "haboy52581", "createdAt": "2020-04-06T22:23:18Z", "path": "services/mac_manager/src/main/java/com/futurewei/alcor/macmanager/service/MacAddressService.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.macmanager.service;\n+\n+import com.futurewei.alcor.macmanager.dao.MacRedisRepository;\n+import com.futurewei.alcor.macmanager.dao.OuiRedisRepository;\n+import com.futurewei.alcor.macmanager.entity.MacState;\n+import com.futurewei.alcor.macmanager.entity.OuiState;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+import java.util.Map;\n+import java.util.concurrent.ThreadLocalRandom;\n+\n+@Service\n+public class MacAddressService {\n+\n+    final String DELIMITER1 = \"/\";\n+    final String DELIMITER2 = \":\";\n+    final int KEY_LENGTH = 8;\n+\n+    @Autowired\n+    private OuiRedisRepository ouiRedisRepository;\n+\n+    @Autowired\n+    private MacRedisRepository macRedisRepository;\n+\n+    public MacState getMacStateByMacAddress(String macAddress) {\n+        String key = getKey(macAddress);\n+        macRedisRepository.setKey(key);\n+        MacState macState = macRedisRepository.findItem(macAddress);\n+        return macState;\n+    }\n+\n+    public Map getMacStateByVpcIdPort(String projectId, String vpcId, String portId) {\n+        String hk = makeKey(projectId, vpcId, portId);\n+        String oui = ouiRedisRepository.findOui(hk);\n+        macRedisRepository.setKey(oui);\n+        return macRedisRepository.findMacAddressesbyVpcPort(portId);\n+    }\n+\n+    public MacState createMacState(MacState macState) throws Exception {\n+        String macAddress;\n+        String projectId = macState.getProjectId();\n+        String vpcId = macState.getVpcId();\n+        String portId = macState.getPortId();\n+        String oui = generateOui(projectId, vpcId);\n+        String nic = generateNic(oui, projectId, vpcId, portId);\n+        macAddress = oui + DELIMITER2 + nic;\n+        macState.setMacAddress(macAddress);\n+        return macState;\n+    }\n+\n+    private String generateOui(String projectId, String vpcId) {\n+        long randomOui;\n+        String hk = projectId + DELIMITER1 + vpcId;\n+        String oui = ouiRedisRepository.findOui(hk);\n+        if (oui == null) {\n+            while (oui == null) {\n+                randomOui = ThreadLocalRandom.current().nextLong(0, 2 ^ 24);\n+                String ouiTemp = hexToMac(Long.toHexString(randomOui));\n+                if (macRedisRepository.exisingOui(ouiTemp) == false)\n+                    oui = ouiTemp;\n+            }\n+            ouiRedisRepository.addItem(new OuiState(projectId + DELIMITER1 + vpcId, oui));\n+        }\n+        return oui;\n+    }\n+\n+    private String generateNic(String oui, String projectId, String vpcId, String portId) {", "originalCommit": "d933b0d519b9ec6b8753a93d26f19ab66cb720ad", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY0MjU3Ng==", "url": "https://github.com/futurewei-cloud/alcor/pull/147#discussion_r407642576", "bodyText": "Alcor Rest API document includes those formats.", "author": "kimeunju108", "createdAt": "2020-04-13T18:38:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQyNDU0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA4NTY5Ng==", "url": "https://github.com/futurewei-cloud/alcor/pull/147#discussion_r409085696", "bodyText": "We have the API document which are manually generated. We still need to auto way to generate the doc.", "author": "xieus", "createdAt": "2020-04-15T19:34:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQyNDU0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTEyOTk0NA==", "url": "https://github.com/futurewei-cloud/alcor/pull/147#discussion_r409129944", "bodyText": "I agree with you. Once every test cases are passed, I will convert them .", "author": "kimeunju108", "createdAt": "2020-04-15T20:58:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQyNDU0MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQyOTUwMg==", "url": "https://github.com/futurewei-cloud/alcor/pull/147#discussion_r404429502", "bodyText": "I know this is commented out but do we really want to show our password to the public", "author": "haboy52581", "createdAt": "2020-04-06T22:35:55Z", "path": "services/mac_manager/src/main/resources/application.properties", "diffHunk": "@@ -0,0 +1,20 @@\n+#Machine configuration\n+#VPCManager.machine.config=classpath:.\\\\config\\\\machine.json\n+#Connecton configuration\n+spring.redis.host=127.0.0.1\n+# Please check redis pod service cluster IP\n+#spring.redis.host=10.99.0.27\n+spring.redis.port=6379\n+apache.kafka.address=172.17.0.1:9092\n+#Logging configuration\n+logging.level.root=info\n+logging.level.org.springframework.web=info\n+logging.file.path=.\n+logging.type=file\n+#Ignite configuration\n+#ignite.host=localhost\n+#ignite.port=10800\n+#ignite.key-store-path=F:\\\\work\\\\alcor\\\\git\\\\chenpp\\\\alcor\\\\src\\\\resources\\\\keystore.jks\n+#ignite.key-store-password=123456\n+#ignite.trust-store-path=F:\\\\work\\\\alcor\\\\git\\\\chenpp\\\\alcor\\\\src\\\\resources\\\\truststore.jks", "originalCommit": "d933b0d519b9ec6b8753a93d26f19ab66cb720ad", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkwMTg1OA==", "url": "https://github.com/futurewei-cloud/alcor/pull/147#discussion_r406901858", "bodyText": "@haboy52581 Feel free to add this comment on the other PR #153, @chenpiaoping could definitely help to address your comment.", "author": "xieus", "createdAt": "2020-04-10T19:12:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQyOTUwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgxMjAzMQ==", "url": "https://github.com/futurewei-cloud/alcor/pull/147#discussion_r407812031", "bodyText": "@haboy52581, Thank you for your review. I appreciate it.", "author": "kimeunju108", "createdAt": "2020-04-14T01:27:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQyOTUwMg=="}], "type": "inlineReview"}, {"oid": "e4b56046bc4480a83cfc4c90f4ab28fbf8a6009a", "url": "https://github.com/futurewei-cloud/alcor/commit/e4b56046bc4480a83cfc4c90f4ab28fbf8a6009a", "message": "[Microservices] Mac manager - update pom file and lib files", "committedDate": "2020-04-07T16:15:26Z", "type": "commit"}, {"oid": "336e49951d5c8139cf18d02832a79c5348760e37", "url": "https://github.com/futurewei-cloud/alcor/commit/336e49951d5c8139cf18d02832a79c5348760e37", "message": "[Microservies] Macmanager document update", "committedDate": "2020-04-08T09:12:46Z", "type": "commit"}, {"oid": "969841bd85896316dc6ecaebeaa043d49cd68179", "url": "https://github.com/futurewei-cloud/alcor/commit/969841bd85896316dc6ecaebeaa043d49cd68179", "message": "Revert \"[Microservies] Macmanager document update\"\n\nThis reverts commit 336e49951d5c8139cf18d02832a79c5348760e37.", "committedDate": "2020-04-08T19:49:58Z", "type": "commit"}, {"oid": "55d9c5905edc138cdb9b0220754c8115536922ef", "url": "https://github.com/futurewei-cloud/alcor/commit/55d9c5905edc138cdb9b0220754c8115536922ef", "message": "update macmanager design such as api and data structure", "committedDate": "2020-04-09T00:30:55Z", "type": "commit"}, {"oid": "677cf6e23b6ac72ed53c5fb320400a5ab41aa511", "url": "https://github.com/futurewei-cloud/alcor/commit/677cf6e23b6ac72ed53c5fb320400a5ab41aa511", "message": "Add design sketch for new requirements", "committedDate": "2020-04-09T05:20:02Z", "type": "commit"}, {"oid": "449d6e691ab8671cf472d5416d37f557889b99fb", "url": "https://github.com/futurewei-cloud/alcor/commit/449d6e691ab8671cf472d5416d37f557889b99fb", "message": "Update mac manager design doc", "committedDate": "2020-04-09T05:57:43Z", "type": "commit"}, {"oid": "5886a7797013af2b20a41104926ab5946a98e8ac", "url": "https://github.com/futurewei-cloud/alcor/commit/5886a7797013af2b20a41104926ab5946a98e8ac", "message": "[Microservices] Mac manager - updated unit test cases", "committedDate": "2020-04-10T02:21:27Z", "type": "commit"}, {"oid": "feb5a2058bff82254436c14d98bacc8446c84891", "url": "https://github.com/futurewei-cloud/alcor/commit/feb5a2058bff82254436c14d98bacc8446c84891", "message": "[Microservices] Mac manager - updated unit test cases", "committedDate": "2020-04-10T02:27:09Z", "type": "commit"}, {"oid": "c5dd02172a3f19199546623325a088abce14442f", "url": "https://github.com/futurewei-cloud/alcor/commit/c5dd02172a3f19199546623325a088abce14442f", "message": "Merge branch 'eunju/macmanager' of https://github.com/kimeunju108/alcor into eunju/macmanager", "committedDate": "2020-04-10T02:28:52Z", "type": "commit"}, {"oid": "391ba8314e4af6f21f8342c704a40c7fe779e501", "url": "https://github.com/futurewei-cloud/alcor/commit/391ba8314e4af6f21f8342c704a40c7fe779e501", "message": "Merge from featurewei/alcor master and resolve conflicts on macmanager doc", "committedDate": "2020-04-10T15:28:08Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkwMjU1MA==", "url": "https://github.com/futurewei-cloud/alcor/pull/147#discussion_r406902550", "bodyText": "I think we could remove some of the dependencies here, for example apache.kafka, gRPC etc.", "author": "xieus", "createdAt": "2020-04-10T19:14:27Z", "path": "services/mac_manager/pom.xml", "diffHunk": "@@ -0,0 +1,100 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\t<modelVersion>4.0.0</modelVersion>\n+\t<parent>\n+\t\t<groupId>org.springframework.boot</groupId>\n+\t\t<artifactId>spring-boot-starter-parent</artifactId>\n+\t\t<version>2.2.6.RELEASE</version>\n+\t\t<relativePath/> <!-- lookup parent from repository -->\n+\t</parent>\n+\t<groupId>com.futurewei.alcor.macmanager</groupId>\n+\t<artifactId>AlcorMacManager</artifactId>\n+\t<version>0.0.1-SNAPSHOT</version>\n+\t<name>AlcorMacManager</name>\n+\t<description>Virtual Mac Address Manager Module</description>\n+\n+\t<properties>\n+\t\t<java.version>1.8</java.version>\n+\t</properties>\n+\n+\t<dependencies>\n+\t\t<dependency>\n+\t\t\t<groupId>org.springframework.boot</groupId>\n+\t\t\t<artifactId>spring-boot-starter-actuator</artifactId>\n+\t\t</dependency>\n+\t\t<dependency>\n+\t\t\t<groupId>org.springframework.boot</groupId>\n+\t\t\t<artifactId>spring-boot-starter-data-redis</artifactId>\n+\t\t</dependency>\n+\t\t<dependency>\n+\t\t\t<groupId>org.springframework.boot</groupId>\n+\t\t\t<artifactId>spring-boot-starter-thymeleaf</artifactId>\n+\t\t</dependency>\n+\t\t<dependency>\n+\t\t\t<groupId>org.springframework.boot</groupId>\n+\t\t\t<artifactId>spring-boot-starter-web</artifactId>\n+\t\t</dependency>\n+\t\t<dependency>\n+\t\t\t<groupId>org.apache.kafka</groupId>\n+\t\t\t<artifactId>kafka-clients</artifactId>\n+\t\t\t<version>2.3.0</version>\n+\t\t</dependency>\n+\t\t<dependency>\n+\t\t\t<groupId>com.google.protobuf</groupId>\n+\t\t\t<artifactId>protobuf-java</artifactId>\n+\t\t\t<version>3.8.0</version>\n+\t\t</dependency>\n+\t\t<dependency>\n+\t\t\t<groupId>org.projectlombok</groupId>\n+\t\t\t<artifactId>lombok</artifactId>\n+\t\t\t<version>1.18.0</version>\n+\t\t</dependency>\n+\t\t<dependency>\n+\t\t\t<groupId>org.apache.commons</groupId>", "originalCommit": "391ba8314e4af6f21f8342c704a40c7fe779e501", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY0MTU2Nw==", "url": "https://github.com/futurewei-cloud/alcor/pull/147#discussion_r407641567", "bodyText": "They were removed", "author": "kimeunju108", "createdAt": "2020-04-13T18:36:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkwMjU1MA=="}], "type": "inlineReview"}, {"oid": "62957d39e628a69f365dcd6c0fe2fd752985ff22", "url": "https://github.com/futurewei-cloud/alcor/commit/62957d39e628a69f365dcd6c0fe2fd752985ff22", "message": "[Microservices] Mac manager - updated pictures and unit test cases", "committedDate": "2020-04-11T01:41:14Z", "type": "commit"}, {"oid": "935e57f666a0222d90b34cb4e8096f516ed08a13", "url": "https://github.com/futurewei-cloud/alcor/commit/935e57f666a0222d90b34cb4e8096f516ed08a13", "message": "[Microservices] Mac manager - added mac range and mac address pool", "committedDate": "2020-04-13T18:04:14Z", "type": "commit"}, {"oid": "4d1f37abb6ffa6ab0aa1f44c1a7a4b3b3f850585", "url": "https://github.com/futurewei-cloud/alcor/commit/4d1f37abb6ffa6ab0aa1f44c1a7a4b3b3f850585", "message": "Merge branch 'eunju/macmanager' of https://github.com/kimeunju108/alcor into eunju/macmanager", "committedDate": "2020-04-13T18:06:27Z", "type": "commit"}, {"oid": "ca953aec5d0bb6f7736e90a20a2d699ed0df85b3", "url": "https://github.com/futurewei-cloud/alcor/commit/ca953aec5d0bb6f7736e90a20a2d699ed0df85b3", "message": "Merge branch 'master' into eunju/macmanager", "committedDate": "2020-04-14T00:10:06Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc4Mzg0NQ==", "url": "https://github.com/futurewei-cloud/alcor/pull/147#discussion_r407783845", "bodyText": "apache.kafka should be deleted as discussed previously.", "author": "xieus", "createdAt": "2020-04-13T23:49:15Z", "path": "services/mac_manager/pom.xml", "diffHunk": "@@ -0,0 +1,100 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\t<modelVersion>4.0.0</modelVersion>\n+\t<parent>\n+\t\t<groupId>org.springframework.boot</groupId>\n+\t\t<artifactId>spring-boot-starter-parent</artifactId>\n+\t\t<version>2.2.6.RELEASE</version>\n+\t\t<relativePath/> <!-- lookup parent from repository -->\n+\t</parent>\n+\t<groupId>com.futurewei.alcor.macmanager</groupId>\n+\t<artifactId>AlcorMacManager</artifactId>\n+\t<version>0.0.1-SNAPSHOT</version>\n+\t<name>AlcorMacManager</name>\n+\t<description>Virtual Mac Address Manager Module</description>\n+\n+\t<properties>\n+\t\t<java.version>1.8</java.version>\n+\t</properties>\n+\n+\t<dependencies>\n+\t\t<dependency>\n+\t\t\t<groupId>org.springframework.boot</groupId>\n+\t\t\t<artifactId>spring-boot-starter-actuator</artifactId>\n+\t\t</dependency>\n+\t\t<dependency>\n+\t\t\t<groupId>org.springframework.boot</groupId>\n+\t\t\t<artifactId>spring-boot-starter-data-redis</artifactId>\n+\t\t</dependency>\n+\t\t<dependency>\n+\t\t\t<groupId>org.springframework.boot</groupId>\n+\t\t\t<artifactId>spring-boot-starter-thymeleaf</artifactId>\n+\t\t</dependency>\n+\t\t<dependency>\n+\t\t\t<groupId>org.springframework.boot</groupId>\n+\t\t\t<artifactId>spring-boot-starter-web</artifactId>\n+\t\t</dependency>\n+\t\t<dependency>\n+\t\t\t<groupId>org.apache.kafka</groupId>", "originalCommit": "4d1f37abb6ffa6ab0aa1f44c1a7a4b3b3f850585", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgxMTgyMg==", "url": "https://github.com/futurewei-cloud/alcor/pull/147#discussion_r407811822", "bodyText": "I will remove them.", "author": "kimeunju108", "createdAt": "2020-04-14T01:26:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc4Mzg0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA4NzA0OQ==", "url": "https://github.com/futurewei-cloud/alcor/pull/147#discussion_r409087049", "bodyText": "If we haven't cleaned up the dependencies, here is an example for clean pom: https://github.com/futurewei-cloud/alcor/pull/164/files#diff-7b4475d284b9ffe96a9f7dd20be9f3d3\nonly needed dependencies should be added.", "author": "xieus", "createdAt": "2020-04-15T19:37:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc4Mzg0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTEzMzk5Mw==", "url": "https://github.com/futurewei-cloud/alcor/pull/147#discussion_r409133993", "bodyText": "I would recommend you to look into the example pom file in IP manager. That one has way less dependencies than Mac Manager. These two managers should have very similar dependencies.", "author": "xieus", "createdAt": "2020-04-15T21:06:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc4Mzg0NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc4NDk1NA==", "url": "https://github.com/futurewei-cloud/alcor/pull/147#discussion_r407784954", "bodyText": "This deserves a API, instead of \"debug2\" :-)\nHow about /macs/activeranges or similar?", "author": "xieus", "createdAt": "2020-04-13T23:53:19Z", "path": "services/mac_manager/src/main/java/com/futurewei/alcor/macmanager/controller/MacController.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+\n+package com.futurewei.alcor.macmanager.controller;\n+\n+import com.futurewei.alcor.common.entity.ResponseId;\n+import com.futurewei.alcor.common.exception.ParameterNullOrEmptyException;\n+import com.futurewei.alcor.common.exception.ResourcePersistenceException;\n+import com.futurewei.alcor.macmanager.entity.MacRange;\n+import com.futurewei.alcor.macmanager.entity.MacState;\n+import com.futurewei.alcor.macmanager.entity.MacStateJson;\n+import com.futurewei.alcor.macmanager.service.MacAddressService;\n+import com.futurewei.alcor.macmanager.utils.RestPreconditionsUtil;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+\n+import java.util.Vector;\n+\n+import static org.springframework.web.bind.annotation.RequestMethod.*;\n+\n+@RestController\n+public class MacController {\n+\n+    @Autowired\n+    private MacAddressService service;\n+\n+\n+    @RequestMapping(\n+            method = GET,\n+            value = {\"/macs/debug\", \"/v4/macs/debug\"})\n+    public MacStateJson getDebug1() throws Exception {\n+        MacState macState = null;\n+\n+        if (macState == null) {\n+            //TODO: REST error code\n+            return new MacStateJson();\n+        }\n+        return new MacStateJson(macState);\n+    }\n+\n+    @RequestMapping(\n+            method = GET,\n+            value = {\"/macs/debug2\", \"/v4/macs/debug2\"})", "originalCommit": "4d1f37abb6ffa6ab0aa1f44c1a7a4b3b3f850585", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgxMTY1OA==", "url": "https://github.com/futurewei-cloud/alcor/pull/147#discussion_r407811658", "bodyText": "I removed them.", "author": "kimeunju108", "createdAt": "2020-04-14T01:26:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc4NDk1NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgwMDcwOA==", "url": "https://github.com/futurewei-cloud/alcor/pull/147#discussion_r407800708", "bodyText": "For MacAddressService, I would suggest to split into two layers, service layer and service impl layer.\nService Layer: Show the interface\nService Impl Layer: Show the implementation of the interface. This design allows different implementations later on.\nOne example of the above design is SubnetManager:\nhttps://github.com/kevin-zhonghao/alcor/tree/feature/route_manager/services/subnet_manager/src/main/java/com/futurewei/alcor/subnet/service", "author": "xieus", "createdAt": "2020-04-14T00:46:31Z", "path": "services/mac_manager/src/main/java/com/futurewei/alcor/macmanager/service/MacAddressService.java", "diffHunk": "@@ -0,0 +1,149 @@\n+/*Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.macmanager.service;\n+\n+import com.futurewei.alcor.common.exception.ResourceNotFoundException;\n+import com.futurewei.alcor.macmanager.dao.MacPoolRedisRepository;\n+import com.futurewei.alcor.macmanager.dao.MacRangeRedisRepository;\n+import com.futurewei.alcor.macmanager.dao.MacRedisRepository;\n+import com.futurewei.alcor.macmanager.entity.MacAddress;\n+import com.futurewei.alcor.macmanager.entity.MacRange;\n+import com.futurewei.alcor.macmanager.entity.MacState;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.stereotype.Service;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Vector;\n+import java.util.concurrent.ThreadLocalRandom;\n+\n+@Service\n+public class MacAddressService {", "originalCommit": "ca953aec5d0bb6f7736e90a20a2d699ed0df85b3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgxMjI1NA==", "url": "https://github.com/futurewei-cloud/alcor/pull/147#discussion_r407812254", "bodyText": "Actually, this is a great idea. I will do it.", "author": "kimeunju108", "createdAt": "2020-04-14T01:28:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgwMDcwOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgwMDg1Ng==", "url": "https://github.com/futurewei-cloud/alcor/pull/147#discussion_r407800856", "bodyText": "Do you mean \"MAC_ADDRESS_LENGTH\u201c?", "author": "xieus", "createdAt": "2020-04-14T00:46:57Z", "path": "services/mac_manager/src/main/java/com/futurewei/alcor/macmanager/entity/MacAddress.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+\n+\n+package com.futurewei.alcor.macmanager.entity;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import lombok.Data;\n+\n+\n+@Data\n+public class MacAddress {\n+\n+    public static final String MAC_DELIMITER = \"-\";\n+    public static final int NIC_LENGTH = 24;", "originalCommit": "ca953aec5d0bb6f7736e90a20a2d699ed0df85b3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgxMTI0Mg==", "url": "https://github.com/futurewei-cloud/alcor/pull/147#discussion_r407811242", "bodyText": "No, MAC_ADDRESS_LENGTH is fixed as 48 ( OUI: 24, NIC: 24) NIC_LENGTH is the bytes we use to generate mac address because OUI is fixed. By default, this is 24, but it can be 12, 6, etc in future if needed.", "author": "kimeunju108", "createdAt": "2020-04-14T01:24:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgwMDg1Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODIzMDk5MQ==", "url": "https://github.com/futurewei-cloud/alcor/pull/147#discussion_r408230991", "bodyText": "okay make sense.", "author": "xieus", "createdAt": "2020-04-14T15:31:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgwMDg1Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgwMjA3NA==", "url": "https://github.com/futurewei-cloud/alcor/pull/147#discussion_r407802074", "bodyText": "Do we need to verify the post return?", "author": "xieus", "createdAt": "2020-04-14T00:51:40Z", "path": "services/mac_manager/src/test/java/com/futurewei/alcor/macmanager/controller/MacControllerTest.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.macmanager.controller;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.futurewei.alcor.macmanager.entity.MacState;\n+import com.futurewei.alcor.macmanager.entity.MacStateJson;\n+import com.futurewei.alcor.macmanager.service.MacAddressService;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.boot.test.mock.mockito.MockBean;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.MediaType;\n+import org.springframework.test.context.junit4.SpringRunner;\n+import org.springframework.test.web.servlet.MockMvc;\n+import org.springframework.test.web.servlet.MvcResult;\n+\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;\n+import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+\n+@RunWith(SpringRunner.class)\n+@SpringBootTest\n+@AutoConfigureMockMvc\n+public class MacControllerTest {\n+\n+    private static final ObjectMapper om = new ObjectMapper();\n+\n+    public MacState testMacState;\n+    @Autowired\n+    MacAddressService service;\n+    String strTestMac = \"\";\n+    @Autowired\n+    private MockMvc mockMvc;\n+    @MockBean\n+    private MacController mockController;\n+\n+    @Before\n+    public void init() {\n+        MacState macState = new MacState(\"\", \"project1\", \"vpc1\", \"port1\", \"active\");\n+        MacStateJson macStateJson = new MacStateJson(macState);\n+        ObjectMapper objectMapper = new ObjectMapper();\n+\n+        try {\n+            String json = objectMapper.writeValueAsString(macStateJson);\n+            MacState macState2 = service.createMacState(macState);\n+            strTestMac = macState2.getMacAddress();\n+        } catch (Exception e) {\n+            e.printStackTrace();\n+        }\n+    }\n+\n+    @Test\n+    public void test_index() throws Exception {\n+        this.mockMvc.perform(get(\"/start.html\"))\n+                .andDo(print())\n+                .andExpect(status().isOk());\n+    }\n+\n+    @Test\n+    public void test_createMacState() throws Exception {\n+        MacState macState = new MacState(\"\", \"project1\", \"vpc1\", \"port2\", \"active\");\n+        MacStateJson macStateJson = new MacStateJson(macState);\n+        ObjectMapper objectMapper = new ObjectMapper();\n+        String json = objectMapper.writeValueAsString(macStateJson);\n+\n+        System.out.println(json);\n+        MvcResult mvcResult = this.mockMvc.perform(post(\"/macs\")\n+                .content(json)\n+                .header(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON))\n+                .andExpect(status().isCreated())\n+                .andDo(print())\n+                .andReturn();", "originalCommit": "ca953aec5d0bb6f7736e90a20a2d699ed0df85b3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgxODc1Mw==", "url": "https://github.com/futurewei-cloud/alcor/pull/147#discussion_r407818753", "bodyText": "Yes, this returns a created mac address, which is necessary information to test other APIs such as delete or get. Usually return is not needed, but in mac manager, we don't know Mac address until it is created.", "author": "kimeunju108", "createdAt": "2020-04-14T01:52:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgwMjA3NA=="}], "type": "inlineReview"}, {"oid": "00e766c97e7fd81ccc018ac94790375165ab462e", "url": "https://github.com/futurewei-cloud/alcor/commit/00e766c97e7fd81ccc018ac94790375165ab462e", "message": "[Microservices] Mac manager - added macmanager service interface and implemention layer", "committedDate": "2020-04-14T02:51:06Z", "type": "commit"}, {"oid": "3f44896506e154777b1d2315a89ab050e97bb8a2", "url": "https://github.com/futurewei-cloud/alcor/commit/3f44896506e154777b1d2315a89ab050e97bb8a2", "message": "Merge branch 'eunju/macmanager' of https://github.com/kimeunju108/alcor into eunju/macmanager", "committedDate": "2020-04-14T02:51:40Z", "type": "commit"}, {"oid": "33466fbbf6320d1edf7bfea551d189982f5c5856", "url": "https://github.com/futurewei-cloud/alcor/commit/33466fbbf6320d1edf7bfea551d189982f5c5856", "message": "[Microservices] Mac manager - add MAC range APIs and MAC allocation activate/deactivate APIs", "committedDate": "2020-04-14T11:59:02Z", "type": "commit"}, {"oid": "6f05522a1ca0f1a77e51b25861b90aba70f82f2c", "url": "https://github.com/futurewei-cloud/alcor/commit/6f05522a1ca0f1a77e51b25861b90aba70f82f2c", "message": "[Microservices] Macmanager - combined activate/deactivate APIs to update API", "committedDate": "2020-04-15T17:36:38Z", "type": "commit"}, {"oid": "0d23506232d1f52c4faf9f5f6cf7b6354433405b", "url": "https://github.com/futurewei-cloud/alcor/commit/0d23506232d1f52c4faf9f5f6cf7b6354433405b", "message": "Fix broken maven CI workflow", "committedDate": "2020-04-15T20:47:13Z", "type": "commit"}, {"oid": "7ca5df635fa137889458ecd0c37ce15149cbf69d", "url": "https://github.com/futurewei-cloud/alcor/commit/7ca5df635fa137889458ecd0c37ce15149cbf69d", "message": "[Microservices] MAC manager - update a pom file", "committedDate": "2020-04-15T21:23:51Z", "type": "commit"}, {"oid": "2137d4c88ba85bd717e06f2f4eb0422050540c65", "url": "https://github.com/futurewei-cloud/alcor/commit/2137d4c88ba85bd717e06f2f4eb0422050540c65", "message": "Merge branch 'eunju/macmanager' of https://github.com/kimeunju108/alcor into eunju/macmanager", "committedDate": "2020-04-15T21:24:31Z", "type": "commit"}]}