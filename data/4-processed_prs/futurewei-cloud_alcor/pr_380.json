{"pr_number": 380, "pr_title": "[Microservice] Route Manager Supports VPC Routing ", "pr_createdAt": "2020-09-08T23:18:38Z", "pr_url": "https://github.com/futurewei-cloud/alcor/pull/380", "timeline": [{"oid": "cdd80c501f24f830b5a2cb5adbca26a427b76621", "url": "https://github.com/futurewei-cloud/alcor/commit/cdd80c501f24f830b5a2cb5adbca26a427b76621", "message": "Add vpc/subnet pumls", "committedDate": "2020-05-04T00:01:32Z", "type": "commit"}, {"oid": "af326f99a5440277b980c53e19823ed6ea0a838f", "url": "https://github.com/futurewei-cloud/alcor/commit/af326f99a5440277b980c53e19823ed6ea0a838f", "message": "Merge branch 'master' into docs/design", "committedDate": "2020-05-04T00:26:12Z", "type": "commit"}, {"oid": "62f6e39f50159b544953c567411ca7977a90eab3", "url": "https://github.com/futurewei-cloud/alcor/commit/62f6e39f50159b544953c567411ca7977a90eab3", "message": "update vpc puml and system flow adoc", "committedDate": "2020-05-04T18:44:36Z", "type": "commit"}, {"oid": "ef2d71766150bf3870ee763d3485fa6e519d09f0", "url": "https://github.com/futurewei-cloud/alcor/commit/ef2d71766150bf3870ee763d3485fa6e519d09f0", "message": "Add vm/vpc workflows and puml template", "committedDate": "2020-05-07T06:18:33Z", "type": "commit"}, {"oid": "ad7fd056e2afb4ea7527865b97e02188e27cc4a0", "url": "https://github.com/futurewei-cloud/alcor/commit/ad7fd056e2afb4ea7527865b97e02188e27cc4a0", "message": "Merge from xieus/master", "committedDate": "2020-05-08T23:09:55Z", "type": "commit"}, {"oid": "f58577c232e8b996d62730971ad05db136017ad4", "url": "https://github.com/futurewei-cloud/alcor/commit/f58577c232e8b996d62730971ad05db136017ad4", "message": "Squashed commit of the following:\n\ncommit dec9dd9a7a80aabc9cb801b244d20e840b5ed206\nAuthor: kaidong <shikaidong@126.com>\nDate:   Sat May 9 12:06:38 2020 +0800\n\n    [Alcor Tools] Set up a Swagger UI (#187)", "committedDate": "2020-05-09T04:25:47Z", "type": "commit"}, {"oid": "592bdd0d0d0faf7526d97f5fa22a998ccd2bf49e", "url": "https://github.com/futurewei-cloud/alcor/commit/592bdd0d0d0faf7526d97f5fa22a998ccd2bf49e", "message": "Add a set of new workflows and start services docs", "committedDate": "2020-05-14T15:49:39Z", "type": "commit"}, {"oid": "1804923b6ea2134d89b13e5267069ab804179c74", "url": "https://github.com/futurewei-cloud/alcor/commit/1804923b6ea2134d89b13e5267069ab804179c74", "message": "Clean node manager pom.xml and modify docker file", "committedDate": "2020-05-14T20:46:39Z", "type": "commit"}, {"oid": "c3fd4b583c2f30434e3fedcf05f99eec34c8c3b2", "url": "https://github.com/futurewei-cloud/alcor/commit/c3fd4b583c2f30434e3fedcf05f99eec34c8c3b2", "message": "Clean mac manager pom.xml and modify docker file", "committedDate": "2020-05-14T20:57:50Z", "type": "commit"}, {"oid": "584e38ac59f84b0381519fac4e4b694d4b71e591", "url": "https://github.com/futurewei-cloud/alcor/commit/584e38ac59f84b0381519fac4e4b694d4b71e591", "message": "Clean port manager pom.xml and modify docker file", "committedDate": "2020-05-14T21:08:35Z", "type": "commit"}, {"oid": "c58eaf795036ba2ff35cd4363114f8d6713b3f81", "url": "https://github.com/futurewei-cloud/alcor/commit/c58eaf795036ba2ff35cd4363114f8d6713b3f81", "message": "Clean ip manager pom.xml and modify docker file", "committedDate": "2020-05-14T21:19:10Z", "type": "commit"}, {"oid": "c1775e024d5837afab979288c41c882692bc1f51", "url": "https://github.com/futurewei-cloud/alcor/commit/c1775e024d5837afab979288c41c882692bc1f51", "message": "Clean route manager pom.xml and modify docker file", "committedDate": "2020-05-14T21:54:32Z", "type": "commit"}, {"oid": "ad76d8c84f81cd98d32853d60f8c551c7a34bb2a", "url": "https://github.com/futurewei-cloud/alcor/commit/ad76d8c84f81cd98d32853d60f8c551c7a34bb2a", "message": "Add maven compile plugin to route pom", "committedDate": "2020-05-15T05:30:15Z", "type": "commit"}, {"oid": "fc7961b7897d8dd68410a5296746fd78b701aefc", "url": "https://github.com/futurewei-cloud/alcor/commit/fc7961b7897d8dd68410a5296746fd78b701aefc", "message": "Clean subnet manager pom.xml and modify docker file", "committedDate": "2020-05-15T05:43:09Z", "type": "commit"}, {"oid": "a532098b5683f02c5d010092569b2f6411df840a", "url": "https://github.com/futurewei-cloud/alcor/commit/a532098b5683f02c5d010092569b2f6411df840a", "message": "Clean vpc manager pom.xml and modify docker file", "committedDate": "2020-05-15T05:52:24Z", "type": "commit"}, {"oid": "d7082249e149011e4a66bb61dd63e996074d2d27", "url": "https://github.com/futurewei-cloud/alcor/commit/d7082249e149011e4a66bb61dd63e996074d2d27", "message": "Clean API gateway pom.xml and modify docker file", "committedDate": "2020-05-15T06:07:19Z", "type": "commit"}, {"oid": "1647924aa1ff875b71e905a5547da7e9ace9bd66", "url": "https://github.com/futurewei-cloud/alcor/commit/1647924aa1ff875b71e905a5547da7e9ace9bd66", "message": "Update pom for lib, web and all other services", "committedDate": "2020-05-15T06:27:20Z", "type": "commit"}, {"oid": "19674f040e1c2961633528bfd6cc35e11aa8412c", "url": "https://github.com/futurewei-cloud/alcor/commit/19674f040e1c2961633528bfd6cc35e11aa8412c", "message": "Update main pom file", "committedDate": "2020-05-15T06:33:46Z", "type": "commit"}, {"oid": "f257f57eb0d3e5261cd63cc037e2654a13fcb196", "url": "https://github.com/futurewei-cloud/alcor/commit/f257f57eb0d3e5261cd63cc037e2654a13fcb196", "message": "Update schema pom files and add dependencies to all service pom", "committedDate": "2020-05-15T06:44:09Z", "type": "commit"}, {"oid": "c19ce7d44edec66d973d8a90beebb272e6406c84", "url": "https://github.com/futurewei-cloud/alcor/commit/c19ce7d44edec66d973d8a90beebb272e6406c84", "message": "Merge branch 'master' of https://github.com/futurewei-cloud/alcor", "committedDate": "2020-05-15T21:22:42Z", "type": "commit"}, {"oid": "eb3877f158cfffe66540b4974c06a94134fbac5d", "url": "https://github.com/futurewei-cloud/alcor/commit/eb3877f158cfffe66540b4974c06a94134fbac5d", "message": "Temp disable mac manager UTs for further investigation", "committedDate": "2020-05-16T13:04:55Z", "type": "commit"}, {"oid": "5ae43cdf94d8ecfaadf9f075b93f5bf9b106c163", "url": "https://github.com/futurewei-cloud/alcor/commit/5ae43cdf94d8ecfaadf9f075b93f5bf9b106c163", "message": "Merge branch 'master' of https://github.com/futurewei-cloud/alcor", "committedDate": "2020-05-16T13:20:39Z", "type": "commit"}, {"oid": "7912c8d664226f79ece168959eb51ff98e975f0d", "url": "https://github.com/futurewei-cloud/alcor/commit/7912c8d664226f79ece168959eb51ff98e975f0d", "message": "Merge from master", "committedDate": "2020-05-16T13:28:26Z", "type": "commit"}, {"oid": "a566f2fbdaa179dc120e53cbb60ce6d3f61f6f03", "url": "https://github.com/futurewei-cloud/alcor/commit/a566f2fbdaa179dc120e53cbb60ce6d3f61f6f03", "message": "Outline design doc for dpm,mq,nhm,nmm, update controller and toc docs", "committedDate": "2020-05-18T05:28:15Z", "type": "commit"}, {"oid": "8c0052bcd12e90a2aaefe166cd6d8029b1af7481", "url": "https://github.com/futurewei-cloud/alcor/commit/8c0052bcd12e90a2aaefe166cd6d8029b1af7481", "message": "Add nova integration doc", "committedDate": "2020-05-18T06:25:01Z", "type": "commit"}, {"oid": "e6fdcd1a75f2c184b8299363bfa7c82e20f929d4", "url": "https://github.com/futurewei-cloud/alcor/commit/e6fdcd1a75f2c184b8299363bfa7c82e20f929d4", "message": "Update openstack workflow link", "committedDate": "2020-05-18T06:29:58Z", "type": "commit"}, {"oid": "9158ce312ef1432f339463e5f0860bbe89790c24", "url": "https://github.com/futurewei-cloud/alcor/commit/9158ce312ef1432f339463e5f0860bbe89790c24", "message": "update link", "committedDate": "2020-05-18T06:32:04Z", "type": "commit"}, {"oid": "105a37dda47a6d9328e2825b256731da5fe5f607", "url": "https://github.com/futurewei-cloud/alcor/commit/105a37dda47a6d9328e2825b256731da5fe5f607", "message": "update puml file link", "committedDate": "2020-05-18T06:43:02Z", "type": "commit"}, {"oid": "f3da89dd7b333893240d37e40c421a6fa573d6d1", "url": "https://github.com/futurewei-cloud/alcor/commit/f3da89dd7b333893240d37e40c421a6fa573d6d1", "message": "add a temp vm_create puml under design and update puml file link in nova doc", "committedDate": "2020-05-18T06:44:47Z", "type": "commit"}, {"oid": "7ea3c7ba629dd1d866bbf2be882c27e76d0b1111", "url": "https://github.com/futurewei-cloud/alcor/commit/7ea3c7ba629dd1d866bbf2be882c27e76d0b1111", "message": "update puml file link", "committedDate": "2020-05-18T06:51:42Z", "type": "commit"}, {"oid": "b8afc29cc70d9e88d0e8314e34282fddc2638a23", "url": "https://github.com/futurewei-cloud/alcor/commit/b8afc29cc70d9e88d0e8314e34282fddc2638a23", "message": "update puml file link", "committedDate": "2020-05-18T07:01:18Z", "type": "commit"}, {"oid": "16658012d802dc45fca32d1f7d567ace9bbb8f34", "url": "https://github.com/futurewei-cloud/alcor/commit/16658012d802dc45fca32d1f7d567ace9bbb8f34", "message": "update puml file link", "committedDate": "2020-05-18T07:08:28Z", "type": "commit"}, {"oid": "a8f1ce36053138154832101c687528f06dab9ad1", "url": "https://github.com/futurewei-cloud/alcor/commit/a8f1ce36053138154832101c687528f06dab9ad1", "message": "Clean mac manager pom.xml and modify docker file", "committedDate": "2020-05-18T07:26:58Z", "type": "commit"}, {"oid": "5094345e0d61b676819fba07b949c0957e7ea776", "url": "https://github.com/futurewei-cloud/alcor/commit/5094345e0d61b676819fba07b949c0957e7ea776", "message": "Clean vpc manager pom.xml and modify docker file", "committedDate": "2020-05-18T07:31:28Z", "type": "commit"}, {"oid": "67cdfc92d7a5cb370aa5ae7531d4f769ee4b67df", "url": "https://github.com/futurewei-cloud/alcor/commit/67cdfc92d7a5cb370aa5ae7531d4f769ee4b67df", "message": "Update pom for lib, web and all other services", "committedDate": "2020-05-18T07:36:23Z", "type": "commit"}, {"oid": "8b47084799d9f925511761285d9a443f961fdf83", "url": "https://github.com/futurewei-cloud/alcor/commit/8b47084799d9f925511761285d9a443f961fdf83", "message": "Update schema pom files and add dependencies to all service pom", "committedDate": "2020-05-18T07:37:00Z", "type": "commit"}, {"oid": "3bca77c7269c34316078510ec05c3f5b37d80d17", "url": "https://github.com/futurewei-cloud/alcor/commit/3bca77c7269c34316078510ec05c3f5b37d80d17", "message": "Temp disable mac manager UTs for further investigation", "committedDate": "2020-05-18T07:37:00Z", "type": "commit"}, {"oid": "2709c68cb3c9570309f3cf311ff4455b6b3777a6", "url": "https://github.com/futurewei-cloud/alcor/commit/2709c68cb3c9570309f3cf311ff4455b6b3777a6", "message": "Merge branch 'master' of https://github.com/xieus/alcor", "committedDate": "2020-05-18T07:37:22Z", "type": "commit"}, {"oid": "b2446b1298068226cdd40de25f5a19436e1dc1b2", "url": "https://github.com/futurewei-cloud/alcor/commit/b2446b1298068226cdd40de25f5a19436e1dc1b2", "message": "Merge branch 'upstream_master' into docs/design", "committedDate": "2020-05-18T20:41:46Z", "type": "commit"}, {"oid": "f01530339a016aeb06352f7f2daf00b4713bb01c", "url": "https://github.com/futurewei-cloud/alcor/commit/f01530339a016aeb06352f7f2daf00b4713bb01c", "message": "Reorg design docs into an Antora-supported structure", "committedDate": "2020-05-20T03:48:40Z", "type": "commit"}, {"oid": "77ef00fce2aa59c2d258aa73836af3888092b058", "url": "https://github.com/futurewei-cloud/alcor/commit/77ef00fce2aa59c2d258aa73836af3888092b058", "message": "update antora.yml and rename toc to index", "committedDate": "2020-05-20T04:13:30Z", "type": "commit"}, {"oid": "466a23736d6ed95acf1950a0e70fd9117afe00fa", "url": "https://github.com/futurewei-cloud/alcor/commit/466a23736d6ed95acf1950a0e70fd9117afe00fa", "message": "Add playbook yml", "committedDate": "2020-05-20T05:05:19Z", "type": "commit"}, {"oid": "b895a4dbdd5b425f1987ca8d2193263000dcd687", "url": "https://github.com/futurewei-cloud/alcor/commit/b895a4dbdd5b425f1987ca8d2193263000dcd687", "message": "add nav adoc", "committedDate": "2020-05-22T04:25:43Z", "type": "commit"}, {"oid": "67def70c07d33b72ad8704b3493fad20d74a336c", "url": "https://github.com/futurewei-cloud/alcor/commit/67def70c07d33b72ad8704b3493fad20d74a336c", "message": "update antora.yml", "committedDate": "2020-05-22T04:37:18Z", "type": "commit"}, {"oid": "e7dd1799661ebe96b32e8cd5698b41ae9e618db9", "url": "https://github.com/futurewei-cloud/alcor/commit/e7dd1799661ebe96b32e8cd5698b41ae9e618db9", "message": "update antora.yml format", "committedDate": "2020-05-22T04:38:26Z", "type": "commit"}, {"oid": "7794ff04d34c004c639b7589cfc273cf26b16852", "url": "https://github.com/futurewei-cloud/alcor/commit/7794ff04d34c004c639b7589cfc273cf26b16852", "message": "Merge pull request #2 from xieus/docs/design\n\nDocs/design", "committedDate": "2020-05-22T04:47:49Z", "type": "commit"}, {"oid": "44e57fd6d7778dd47bc711df05cce044ee113bc7", "url": "https://github.com/futurewei-cloud/alcor/commit/44e57fd6d7778dd47bc711df05cce044ee113bc7", "message": "Move adoc files under pages folder", "committedDate": "2020-05-22T05:41:09Z", "type": "commit"}, {"oid": "622ad96e2ecfd695cea2d94aaad05392707a1d04", "url": "https://github.com/futurewei-cloud/alcor/commit/622ad96e2ecfd695cea2d94aaad05392707a1d04", "message": "update antora playbook", "committedDate": "2020-05-22T18:47:06Z", "type": "commit"}, {"oid": "e9de51011a6d2ad63ffae4d2e9822f90be1f4e1e", "url": "https://github.com/futurewei-cloud/alcor/commit/e9de51011a6d2ad63ffae4d2e9822f90be1f4e1e", "message": "update links in README", "committedDate": "2020-05-22T19:00:10Z", "type": "commit"}, {"oid": "17fbbca02794392f339b93684ce8abc315ce084d", "url": "https://github.com/futurewei-cloud/alcor/commit/17fbbca02794392f339b93684ce8abc315ce084d", "message": "move image and workflow up to ROOT", "committedDate": "2020-05-22T19:19:04Z", "type": "commit"}, {"oid": "a55ff88f509492b40e4796d96ae1cbe291ac2924", "url": "https://github.com/futurewei-cloud/alcor/commit/a55ff88f509492b40e4796d96ae1cbe291ac2924", "message": "update links in affected docs", "committedDate": "2020-05-22T19:19:47Z", "type": "commit"}, {"oid": "c15dc8513262a277de2d066776407449acc1668b", "url": "https://github.com/futurewei-cloud/alcor/commit/c15dc8513262a277de2d066776407449acc1668b", "message": "Merge from alcor/master", "committedDate": "2020-05-22T19:24:51Z", "type": "commit"}, {"oid": "5085ddf22df64db3eb7f2b6fbb2b60e37a13abd3", "url": "https://github.com/futurewei-cloud/alcor/commit/5085ddf22df64db3eb7f2b6fbb2b60e37a13abd3", "message": "sync up", "committedDate": "2020-07-02T19:19:09Z", "type": "commit"}, {"oid": "98a447c223acc90eb9e22bec60ce85dfb194da34", "url": "https://github.com/futurewei-cloud/alcor/commit/98a447c223acc90eb9e22bec60ce85dfb194da34", "message": "Merge remote-tracking branch 'remotes/upstream/master' into new_master\n\n# Conflicts:\n#\tREADME.md\n#\tdocs/modules/ROOT/pages/comm_protocol/fast_path.adoc\n#\tdocs/modules/ROOT/pages/comm_protocol/rescue_path.adoc\n#\tdocs/modules/ROOT/pages/controller.adoc\n#\tdocs/modules/ROOT/pages/db_services/data_store.adoc\n#\tdocs/modules/ROOT/pages/deploy_related/deployment.adoc\n#\tdocs/modules/ROOT/pages/deploy_related/integration_nova.adoc\n#\tdocs/modules/ROOT/pages/high_level/system_flow.adoc\n#\tdocs/modules/ROOT/pages/mgmt_services/private_ip_manager.adoc\n#\tdocs/modules/ROOT/pages/mgmt_services/security_group_manager.adoc\n#\tdocs/modules/ROOT/pages/mgmt_services/virtual_mac_manager.adoc\n#\tdocs/modules/ROOT/pages/mgmt_services/vpc_manager.adoc\n#\tdocs/modules/ROOT/pages/sys_monitoring/monitoring.adoc", "committedDate": "2020-07-02T19:56:24Z", "type": "commit"}, {"oid": "f6d42f243e6239ec644eccd9d9e3ddc0f0f2c00a", "url": "https://github.com/futurewei-cloud/alcor/commit/f6d42f243e6239ec644eccd9d9e3ddc0f0f2c00a", "message": "Merge branch 'master' of https://github.com/futurewei-cloud/alcor into new_master", "committedDate": "2020-07-02T22:08:20Z", "type": "commit"}, {"oid": "ee965e7414da815da766c51c93d24aebe9c2757a", "url": "https://github.com/futurewei-cloud/alcor/commit/ee965e7414da815da766c51c93d24aebe9c2757a", "message": "sync up", "committedDate": "2020-07-07T18:09:11Z", "type": "commit"}, {"oid": "3f811965a191ef019d422da05c8f715a439e4fad", "url": "https://github.com/futurewei-cloud/alcor/commit/3f811965a191ef019d422da05c8f715a439e4fad", "message": "Merge branch 'master' of https://github.com/futurewei-cloud/alcor into new_master", "committedDate": "2020-07-07T18:09:47Z", "type": "commit"}, {"oid": "df99b38bb5153d6c53ab9a5fde2a7fb28fb7f789", "url": "https://github.com/futurewei-cloud/alcor/commit/df99b38bb5153d6c53ab9a5fde2a7fb28fb7f789", "message": "Merge branch 'master' of https://github.com/futurewei-cloud/alcor into new_master", "committedDate": "2020-07-08T17:50:29Z", "type": "commit"}, {"oid": "d8b23d4d602105b10c1360b2ad128e549efc0473", "url": "https://github.com/futurewei-cloud/alcor/commit/d8b23d4d602105b10c1360b2ad128e549efc0473", "message": "Merge branch 'master' of https://github.com/futurewei-cloud/alcor into new_master", "committedDate": "2020-07-09T15:51:35Z", "type": "commit"}, {"oid": "af3a28c764aed051d184ab56dbe37d035baad59c", "url": "https://github.com/futurewei-cloud/alcor/commit/af3a28c764aed051d184ab56dbe37d035baad59c", "message": "Merge branch 'master' of https://github.com/futurewei-cloud/alcor into new_master", "committedDate": "2020-07-16T22:56:12Z", "type": "commit"}, {"oid": "2d8cf02f301e200cd07ac3e91b9803eddd139906", "url": "https://github.com/futurewei-cloud/alcor/commit/2d8cf02f301e200cd07ac3e91b9803eddd139906", "message": "Merge branch 'master' of https://github.com/futurewei-cloud/alcor into new_master", "committedDate": "2020-07-17T18:03:02Z", "type": "commit"}, {"oid": "95d4e011f42dfa269b4264ebbb0d0da1ec2ea62a", "url": "https://github.com/futurewei-cloud/alcor/commit/95d4e011f42dfa269b4264ebbb0d0da1ec2ea62a", "message": "Merge branch 'master' of https://github.com/futurewei-cloud/alcor into new_master", "committedDate": "2020-07-20T21:43:50Z", "type": "commit"}, {"oid": "a2c6e9552ff119b5418ee0c8c7db22ab31bc93ff", "url": "https://github.com/futurewei-cloud/alcor/commit/a2c6e9552ff119b5418ee0c8c7db22ab31bc93ff", "message": ":Merge branch 'master' of https://github.com/futurewei-cloud/alcor into new_master", "committedDate": "2020-07-28T01:13:44Z", "type": "commit"}, {"oid": "8731f2388a6aed46dff689d40c998c8810a7595d", "url": "https://github.com/futurewei-cloud/alcor/commit/8731f2388a6aed46dff689d40c998c8810a7595d", "message": "Merge branch 'master' of https://github.com/futurewei-cloud/alcor into new_master", "committedDate": "2020-07-29T18:08:49Z", "type": "commit"}, {"oid": "a54029e3a0c7cf2a79771e8133b82aa5984771b2", "url": "https://github.com/futurewei-cloud/alcor/commit/a54029e3a0c7cf2a79771e8133b82aa5984771b2", "message": "Merge branch 'master' of https://github.com/futurewei-cloud/alcor into new_master", "committedDate": "2020-07-30T05:07:37Z", "type": "commit"}, {"oid": "fc4af489afb7bab2e571e776f12be1b2d2c7f92b", "url": "https://github.com/futurewei-cloud/alcor/commit/fc4af489afb7bab2e571e776f12be1b2d2c7f92b", "message": "Merge branch 'master' of https://github.com/futurewei-cloud/alcor into new_master", "committedDate": "2020-07-31T21:19:16Z", "type": "commit"}, {"oid": "56f75e48b3cf79e76e0fe693ed7a3cc3d05b53b0", "url": "https://github.com/futurewei-cloud/alcor/commit/56f75e48b3cf79e76e0fe693ed7a3cc3d05b53b0", "message": "Merge branch 'master' of https://github.com/futurewei-cloud/alcor into new_master", "committedDate": "2020-08-04T21:12:35Z", "type": "commit"}, {"oid": "b969fa4db254b05f5a1f434684dc8a4d63511e46", "url": "https://github.com/futurewei-cloud/alcor/commit/b969fa4db254b05f5a1f434684dc8a4d63511e46", "message": "Merge branch 'master' of https://github.com/futurewei-cloud/alcor into new_master", "committedDate": "2020-08-05T17:18:41Z", "type": "commit"}, {"oid": "55451d842f65429c1b888a363fccd0f1b5dc6bc6", "url": "https://github.com/futurewei-cloud/alcor/commit/55451d842f65429c1b888a363fccd0f1b5dc6bc6", "message": "Merge branch 'master' of https://github.com/futurewei-cloud/alcor into new_master", "committedDate": "2020-08-11T17:44:06Z", "type": "commit"}, {"oid": "04b612d24dcfc8afdb80654388203772e59de081", "url": "https://github.com/futurewei-cloud/alcor/commit/04b612d24dcfc8afdb80654388203772e59de081", "message": "Merge branch 'master' of https://github.com/futurewei-cloud/alcor into new_master", "committedDate": "2020-08-12T17:44:30Z", "type": "commit"}, {"oid": "4c46856b56799c1f22cbbba538cd511bc0349094", "url": "https://github.com/futurewei-cloud/alcor/commit/4c46856b56799c1f22cbbba538cd511bc0349094", "message": "Merge branch 'master' of https://github.com/futurewei-cloud/alcor into new_master", "committedDate": "2020-08-14T18:11:28Z", "type": "commit"}, {"oid": "dbe2be74eacabbfddefc02bd000e48f21d9f66b2", "url": "https://github.com/futurewei-cloud/alcor/commit/dbe2be74eacabbfddefc02bd000e48f21d9f66b2", "message": "Merge branch 'master' of https://github.com/futurewei-cloud/alcor into new_master", "committedDate": "2020-08-17T23:57:02Z", "type": "commit"}, {"oid": "a3934053afb2e72a83edeb16c6e7ef1f2563d1b2", "url": "https://github.com/futurewei-cloud/alcor/commit/a3934053afb2e72a83edeb16c6e7ef1f2563d1b2", "message": "Merge branch 'master' of https://github.com/futurewei-cloud/alcor into new_master", "committedDate": "2020-08-18T17:55:51Z", "type": "commit"}, {"oid": "eabd2005e4a47445db6c3cc275a2e5db8ac57ea8", "url": "https://github.com/futurewei-cloud/alcor/commit/eabd2005e4a47445db6c3cc275a2e5db8ac57ea8", "message": "Merge branch 'master' of https://github.com/futurewei-cloud/alcor into new_master", "committedDate": "2020-08-19T16:40:01Z", "type": "commit"}, {"oid": "b3eec6580983ad9b25623159c8bd488e679c0fe3", "url": "https://github.com/futurewei-cloud/alcor/commit/b3eec6580983ad9b25623159c8bd488e679c0fe3", "message": "Merge branch 'master' of https://github.com/futurewei-cloud/alcor into new_master", "committedDate": "2020-08-21T17:36:23Z", "type": "commit"}, {"oid": "88b02b7823fac516ff5a2ef18dcef9c154397267", "url": "https://github.com/futurewei-cloud/alcor/commit/88b02b7823fac516ff5a2ef18dcef9c154397267", "message": "Merge branch 'master' of https://github.com/futurewei-cloud/alcor into new_master", "committedDate": "2020-08-28T02:46:04Z", "type": "commit"}, {"oid": "4bce0d7107dfacbaf2e4ae7854fc8ede90d7bdfe", "url": "https://github.com/futurewei-cloud/alcor/commit/4bce0d7107dfacbaf2e4ae7854fc8ede90d7bdfe", "message": "Merge branch 'master' of https://github.com/futurewei-cloud/alcor into new_master", "committedDate": "2020-09-02T00:10:35Z", "type": "commit"}, {"oid": "dee095b8468a23badc58443118e85c78e1d9afb5", "url": "https://github.com/futurewei-cloud/alcor/commit/dee095b8468a23badc58443118e85c78e1d9afb5", "message": "Merge branch 'master' of https://github.com/futurewei-cloud/alcor into new_master", "committedDate": "2020-09-08T17:06:20Z", "type": "commit"}, {"oid": "dc1aced6c4912dd09ba4188a8ac9f38cd2ec47ea", "url": "https://github.com/futurewei-cloud/alcor/commit/dc1aced6c4912dd09ba4188a8ac9f38cd2ec47ea", "message": "update", "committedDate": "2020-09-08T23:11:50Z", "type": "commit"}, {"oid": "3e45fc5f8999e75a07aa82c506079cb276849c1e", "url": "https://github.com/futurewei-cloud/alcor/commit/3e45fc5f8999e75a07aa82c506079cb276849c1e", "message": "update", "committedDate": "2020-09-10T21:20:22Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzMxNDY0OQ==", "url": "https://github.com/futurewei-cloud/alcor/pull/380#discussion_r487314649", "bodyText": "@kevin-zhonghao This function is for updateSubnetRouteTable, why the 'check resource' uses  checkVpcDefaultRouteTableWebJsonResourceIsValid(resource)", "author": "cj-chung", "createdAt": "2020-09-11T22:17:16Z", "path": "services/route_manager/src/main/java/com/futurewei/alcor/route/controller/RouterController.java", "diffHunk": "@@ -15,14 +15,287 @@\n */\n package com.futurewei.alcor.route.controller;\n \n+import com.futurewei.alcor.common.entity.ResponseId;\n+import com.futurewei.alcor.common.exception.DatabasePersistenceException;\n+import com.futurewei.alcor.common.exception.ParameterNullOrEmptyException;\n+import com.futurewei.alcor.common.exception.ResourceNotValidException;\n import com.futurewei.alcor.common.logging.*;\n+import com.futurewei.alcor.common.stats.DurationStatistics;\n+import com.futurewei.alcor.route.exception.CanNotFindSubnet;\n+import com.futurewei.alcor.route.exception.CanNotFindVpc;\n+import com.futurewei.alcor.route.exception.ExistMultipleSubnetRouteTable;\n+import com.futurewei.alcor.route.exception.VpcRouterContainsSubnetRoutingTables;\n+import com.futurewei.alcor.route.service.RouteTableDatabaseService;\n+import com.futurewei.alcor.route.service.RouterDatabaseService;\n+import com.futurewei.alcor.route.service.RouterService;\n+import com.futurewei.alcor.route.utils.RestPreconditionsUtil;\n+import com.futurewei.alcor.route.utils.RouteManagerUtil;\n+import com.futurewei.alcor.web.entity.route.*;\n+import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.context.annotation.ComponentScan;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n import org.springframework.web.bind.annotation.RestController;\n \n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.logging.Level;\n+\n+import static org.springframework.web.bind.annotation.RequestMethod.*;\n+\n @RestController\n @ComponentScan(value = \"com.futurewei.alcor.common.stats\")\n public class RouterController {\n \n     private Logger logger = LoggerFactory.getLogger();\n \n+    @Autowired\n+    private RouterDatabaseService routerDatabaseService;\n+\n+    @Autowired\n+    private RouterService routerService;\n+\n+    @Autowired\n+    private RouteTableDatabaseService routeTableDatabaseService;\n+\n+    @RequestMapping(\n+            method = GET,\n+            value = {\"/project/{projectid}/vpcs/{vpcid}/router\"})\n+    @DurationStatistics\n+    public RouterWebJson getOrCreateVpcRouter(@PathVariable String projectid, @PathVariable String vpcid) throws Exception {\n+\n+        Router router = null;\n+\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(vpcid);\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+            RestPreconditionsUtil.verifyResourceFound(projectid);\n+\n+            router = this.routerService.getOrCreateVpcRouter(projectid, vpcid);\n+\n+        } catch (ParameterNullOrEmptyException e) {\n+            throw e;\n+        } catch (CanNotFindVpc e) {\n+            logger.log(Level.WARNING, e.getMessage() + \" : \" + vpcid);\n+            throw e;\n+        } catch (DatabasePersistenceException e) {\n+            throw e;\n+        }\n+\n+        return new RouterWebJson(router);\n+    }\n+\n+    @RequestMapping(\n+            method = DELETE,\n+            value = {\"/project/{projectid}/vpcs/{vpcid}/router\"})\n+    @DurationStatistics\n+    public ResponseId deleteVpcRouter(@PathVariable String projectid, @PathVariable String vpcid) throws Exception {\n+\n+        String routerId = null;\n+\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(vpcid);\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+            RestPreconditionsUtil.verifyResourceFound(projectid);\n+\n+            routerId = this.routerService.deleteVpcRouter(projectid, vpcid);\n+\n+        } catch (ParameterNullOrEmptyException e) {\n+            throw e;\n+        } catch (CanNotFindVpc e) {\n+            logger.log(Level.WARNING, e.getMessage() + \" : \" + vpcid);\n+            throw e;\n+        } catch (VpcRouterContainsSubnetRoutingTables e) {\n+            logger.log(Level.WARNING, e.getMessage() + \" : \" + vpcid);\n+            throw e;\n+        }\n+\n+        return new ResponseId(routerId);\n+    }\n+\n+    @RequestMapping(\n+            method = GET,\n+            value = {\"/project/{projectid}/vpcs/{vpcid}/vpcroutetable\"})\n+    @DurationStatistics\n+    public RouteTableWebJson getOrCreateVpcRouteTable(@PathVariable String projectid, @PathVariable String vpcid) throws Exception {\n+\n+        RouteTable routetable = null;\n+\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(vpcid);\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+            RestPreconditionsUtil.verifyResourceFound(projectid);\n+\n+            routetable = this.routerService.getOrCreateVpcRouteTable(projectid, vpcid);\n+\n+        } catch (ParameterNullOrEmptyException e) {\n+            throw e;\n+        } catch (CanNotFindVpc e) {\n+            logger.log(Level.WARNING, e.getMessage() + \" : \" + vpcid);\n+            throw e;\n+        } catch (DatabasePersistenceException e) {\n+            throw e;\n+        }\n+\n+        return new RouteTableWebJson(routetable);\n+    }\n+\n+    @RequestMapping(\n+            method = PUT,\n+            value = {\"/project/{projectid}/vpcs/{vpcid}/vpcroutetable\"})\n+    @DurationStatistics\n+    public RouteTableWebJson updateVpcRouteTable(@PathVariable String projectid, @PathVariable String vpcid, @RequestBody RouteTableWebJson resource) throws Exception {\n+\n+        RouteTable routetable = null;\n+\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(vpcid);\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+            RestPreconditionsUtil.verifyResourceFound(projectid);\n+\n+            // check resource\n+            if (!RouteManagerUtil.checkVpcDefaultRouteTableWebJsonResourceIsValid(resource)) {\n+                throw new ResourceNotValidException(\"request resource is invalid\");\n+            }\n+\n+            routetable = this.routerService.updateVpcRouteTable(projectid, vpcid, resource);\n+\n+        } catch (ParameterNullOrEmptyException e) {\n+            throw e;\n+        } catch (CanNotFindVpc e) {\n+            logger.log(Level.WARNING, e.getMessage() + \" : \" + vpcid);\n+            throw e;\n+        } catch (DatabasePersistenceException e) {\n+            throw e;\n+        }\n+\n+        return new RouteTableWebJson(routetable);\n+    }\n+\n+    @RequestMapping(\n+            method = GET,\n+            value = {\"/project/{projectid}/vpcs/{vpcid}/routetables\"})\n+    @DurationStatistics\n+    public RouteTablesWebJson getVpcRouteTables(@PathVariable String projectid, @PathVariable String vpcid) throws Exception {\n+\n+        List<RouteTable> routetables = new ArrayList<>();\n+\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(vpcid);\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+            RestPreconditionsUtil.verifyResourceFound(projectid);\n+\n+            routetables = this.routerService.getVpcRouteTables(projectid, vpcid);\n+\n+        } catch (Exception e) {\n+            throw e;\n+        }\n+\n+        return new RouteTablesWebJson(routetables);\n+    }\n+\n+    @RequestMapping(\n+            method = GET,\n+            value = {\"/project/{projectid}/routetables/{routetableid}\"})\n+    @DurationStatistics\n+    public RouteTableWebJson getVpcRouteTableById(@PathVariable String projectid, @PathVariable String routetableid) throws Exception {\n+\n+        RouteTable routetable = null;\n+\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(routetableid);\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+            RestPreconditionsUtil.verifyResourceFound(projectid);\n+\n+            routetable = this.routeTableDatabaseService.getByRouteTableId(routetableid);\n+\n+        } catch (ParameterNullOrEmptyException e) {\n+            throw e;\n+        }\n+\n+        return new RouteTableWebJson(routetable);\n+    }\n+\n+    @RequestMapping(\n+            method = GET,\n+            value = {\"/project/{projectid}/subnets/{subnetid}/routetable\"})\n+    @DurationStatistics\n+    public RouteTableWebJson getOrCreateSubnetRouteTable(@PathVariable String projectid, @PathVariable String subnetid) throws Exception {\n+\n+        RouteTable routeTable = null;\n+\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(subnetid);\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+            RestPreconditionsUtil.verifyResourceFound(projectid);\n+\n+            routeTable = this.routerService.getOrCreateSubnetRouteTable(projectid, subnetid);\n+\n+        } catch (ParameterNullOrEmptyException e) {\n+            throw e;\n+        } catch (ExistMultipleSubnetRouteTable e) {\n+            logger.log(Level.WARNING, e.getMessage() + \" , subnetId: \" + subnetid);\n+            throw e;\n+        } catch (DatabasePersistenceException e) {\n+            throw e;\n+        }\n+\n+        return new RouteTableWebJson(routeTable);\n+    }\n+\n+    @RequestMapping(\n+            method = PUT,\n+            value = {\"/project/{projectid}/subnets/{subnetid}/routetable\"})\n+    @DurationStatistics\n+    public RouteTableWebJson updateSubnetRouteTable(@PathVariable String projectid, @PathVariable String subnetid, @RequestBody RouteTableWebJson resource) throws Exception {\n+\n+        RouteTable routetable = null;\n+\n+        try {\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(subnetid);\n+            RestPreconditionsUtil.verifyParameterNotNullorEmpty(projectid);\n+            RestPreconditionsUtil.verifyResourceFound(projectid);\n+\n+            // check resource\n+            if (!RouteManagerUtil.checkVpcDefaultRouteTableWebJsonResourceIsValid(resource)) {\n+                throw new ResourceNotValidException(\"request resource is invalid\");\n+            }", "originalCommit": "3e45fc5f8999e75a07aa82c506079cb276849c1e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODg1NjQxOQ==", "url": "https://github.com/futurewei-cloud/alcor/pull/380#discussion_r488856419", "bodyText": "That's a name mistake, it's already changed to checkSubnetRouteTableWebJsonResourceIsValid", "author": "kevin-zhonghao", "createdAt": "2020-09-15T17:51:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzMxNDY0OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzMzNjcxMA==", "url": "https://github.com/futurewei-cloud/alcor/pull/380#discussion_r487336710", "bodyText": "What's the DEFAULT_TARGET value here?\nFor the VPC local network, such as 10.0.0.0/16, it's TARGET should be 'local' (same as AWS).", "author": "cj-chung", "createdAt": "2020-09-11T23:53:10Z", "path": "services/route_manager/src/main/java/com/futurewei/alcor/route/service/Impl/RouterServiceImpl.java", "diffHunk": "@@ -0,0 +1,316 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.route.service.Impl;\n+\n+import com.futurewei.alcor.common.db.CacheException;\n+import com.futurewei.alcor.common.enumClass.RouteTableType;\n+import com.futurewei.alcor.common.exception.DatabasePersistenceException;\n+import com.futurewei.alcor.common.logging.Logger;\n+import com.futurewei.alcor.common.logging.LoggerFactory;\n+import com.futurewei.alcor.route.entity.RouteConstant;\n+import com.futurewei.alcor.route.exception.*;\n+import com.futurewei.alcor.route.service.*;\n+import com.futurewei.alcor.route.utils.RouteManagerUtil;\n+import com.futurewei.alcor.web.entity.route.*;\n+import com.futurewei.alcor.web.entity.vpc.VpcEntity;\n+import com.futurewei.alcor.web.entity.vpc.VpcWebJson;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+import java.util.*;\n+\n+@Service\n+public class RouterServiceImpl implements RouterService {\n+\n+    private Logger logger = LoggerFactory.getLogger();\n+\n+    @Autowired\n+    private RouterDatabaseService routerDatabaseService;\n+\n+    @Autowired\n+    private VpcRouterToVpcService vpcRouterToVpcService;\n+\n+    @Autowired\n+    private RouteTableDatabaseService routeTableDatabaseService;\n+\n+    @Autowired\n+    private RouteEntryDatabaseService routeEntryDatabaseService;\n+\n+\n+    @Override\n+    public Router getOrCreateVpcRouter(String projectId, String vpcId) throws CanNotFindVpc, DatabasePersistenceException, CacheException, ExistMultipleVpcRouter {\n+        Router router = null;\n+\n+        // If VPC already has a router, return the router state\n+        Map<String, Router> routerMap = null;\n+        Map<String, Object[]> queryParams = new HashMap<>();\n+        Object[] values = new Object[1];\n+        values[0] = vpcId;\n+        queryParams.put(\"owner\", values);\n+\n+        routerMap = this.routerDatabaseService.getAllRouters(queryParams);\n+\n+        if (routerMap == null) {\n+            routerMap = new HashMap<>();\n+        }\n+\n+        if (routerMap.size() > 1) {\n+            throw new ExistMultipleVpcRouter();\n+        } else if (routerMap.size() == 1) {\n+            for (Map.Entry<String, Router> entry : routerMap.entrySet()) {\n+                router = (Router)entry.getValue();\n+                return router;\n+            }\n+        } else {\n+            // get vpc entity to create default route table and route route rule\n+            VpcWebJson vpcResponse = this.vpcRouterToVpcService.getVpcWebJson(projectId, vpcId);\n+            VpcEntity vpcEntity = vpcResponse.getNetwork();\n+\n+\n+            // If VPC doesn\u2019t have a router, create a new router, create a VPC routing table and pump-in the VPC default routing rules\n+            router = createDefaultVpcRouter(projectId, vpcEntity);\n+        }\n+\n+        return router;\n+    }\n+\n+    @Override\n+    public Router createDefaultVpcRouter(String projectId, VpcEntity vpcEntity) throws DatabasePersistenceException {\n+        String routerId = UUID.randomUUID().toString();\n+        String routeTableId = UUID.randomUUID().toString();\n+        String routeEntryId = UUID.randomUUID().toString();\n+        String owner = vpcEntity.getId();\n+        String destination = vpcEntity.getCidr();\n+        List<RouteTable> vpcRouteTables = new ArrayList<>();\n+        List<String> ports = new ArrayList<>();\n+        List<RouteEntry> routeEntities = new ArrayList<>();\n+\n+        // create a VPC routing table and pump-in the VPC default routing rules\n+        RouteEntry routeEntry = new RouteEntry(projectId, routeEntryId, \"default_vpc_routeEntry\", \"\", destination, RouteConstant.DEFAULT_TARGET, RouteConstant.DEFAULT_PRIORITY, routeTableId, null);\n+        routeEntities.add(routeEntry);\n+        this.routeEntryDatabaseService.addRouteEntry(routeEntry);", "originalCommit": "3e45fc5f8999e75a07aa82c506079cb276849c1e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODAxODE3Ng==", "url": "https://github.com/futurewei-cloud/alcor/pull/380#discussion_r488018176", "bodyText": "We may need to define several type for TARGET, such as 'local', 'internet_gw', 'nat_gw', etc..., similar to AWS.", "author": "cj-chung", "createdAt": "2020-09-14T15:22:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzMzNjcxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODg2ODIyMA==", "url": "https://github.com/futurewei-cloud/alcor/pull/380#discussion_r488868220", "bodyText": "DEFAULT_TARGET = \"Local\"", "author": "kevin-zhonghao", "createdAt": "2020-09-15T18:12:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzMzNjcxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODg3NzIzNQ==", "url": "https://github.com/futurewei-cloud/alcor/pull/380#discussion_r488877235", "bodyText": "okay ~ I will create the Target Enum", "author": "kevin-zhonghao", "createdAt": "2020-09-15T18:29:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzMzNjcxMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzMzNzQ2MA==", "url": "https://github.com/futurewei-cloud/alcor/pull/380#discussion_r487337460", "bodyText": "Router doesn't have type, it's owner should look like \"VPC:vpc_id\".", "author": "cj-chung", "createdAt": "2020-09-11T23:57:14Z", "path": "services/route_manager/src/main/java/com/futurewei/alcor/route/service/Impl/RouterServiceImpl.java", "diffHunk": "@@ -0,0 +1,316 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.route.service.Impl;\n+\n+import com.futurewei.alcor.common.db.CacheException;\n+import com.futurewei.alcor.common.enumClass.RouteTableType;\n+import com.futurewei.alcor.common.exception.DatabasePersistenceException;\n+import com.futurewei.alcor.common.logging.Logger;\n+import com.futurewei.alcor.common.logging.LoggerFactory;\n+import com.futurewei.alcor.route.entity.RouteConstant;\n+import com.futurewei.alcor.route.exception.*;\n+import com.futurewei.alcor.route.service.*;\n+import com.futurewei.alcor.route.utils.RouteManagerUtil;\n+import com.futurewei.alcor.web.entity.route.*;\n+import com.futurewei.alcor.web.entity.vpc.VpcEntity;\n+import com.futurewei.alcor.web.entity.vpc.VpcWebJson;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+import java.util.*;\n+\n+@Service\n+public class RouterServiceImpl implements RouterService {\n+\n+    private Logger logger = LoggerFactory.getLogger();\n+\n+    @Autowired\n+    private RouterDatabaseService routerDatabaseService;\n+\n+    @Autowired\n+    private VpcRouterToVpcService vpcRouterToVpcService;\n+\n+    @Autowired\n+    private RouteTableDatabaseService routeTableDatabaseService;\n+\n+    @Autowired\n+    private RouteEntryDatabaseService routeEntryDatabaseService;\n+\n+\n+    @Override\n+    public Router getOrCreateVpcRouter(String projectId, String vpcId) throws CanNotFindVpc, DatabasePersistenceException, CacheException, ExistMultipleVpcRouter {\n+        Router router = null;\n+\n+        // If VPC already has a router, return the router state\n+        Map<String, Router> routerMap = null;\n+        Map<String, Object[]> queryParams = new HashMap<>();\n+        Object[] values = new Object[1];\n+        values[0] = vpcId;\n+        queryParams.put(\"owner\", values);\n+\n+        routerMap = this.routerDatabaseService.getAllRouters(queryParams);\n+\n+        if (routerMap == null) {\n+            routerMap = new HashMap<>();\n+        }\n+\n+        if (routerMap.size() > 1) {\n+            throw new ExistMultipleVpcRouter();\n+        } else if (routerMap.size() == 1) {\n+            for (Map.Entry<String, Router> entry : routerMap.entrySet()) {\n+                router = (Router)entry.getValue();\n+                return router;\n+            }\n+        } else {\n+            // get vpc entity to create default route table and route route rule\n+            VpcWebJson vpcResponse = this.vpcRouterToVpcService.getVpcWebJson(projectId, vpcId);\n+            VpcEntity vpcEntity = vpcResponse.getNetwork();\n+\n+\n+            // If VPC doesn\u2019t have a router, create a new router, create a VPC routing table and pump-in the VPC default routing rules\n+            router = createDefaultVpcRouter(projectId, vpcEntity);\n+        }\n+\n+        return router;\n+    }\n+\n+    @Override\n+    public Router createDefaultVpcRouter(String projectId, VpcEntity vpcEntity) throws DatabasePersistenceException {\n+        String routerId = UUID.randomUUID().toString();\n+        String routeTableId = UUID.randomUUID().toString();\n+        String routeEntryId = UUID.randomUUID().toString();\n+        String owner = vpcEntity.getId();\n+        String destination = vpcEntity.getCidr();\n+        List<RouteTable> vpcRouteTables = new ArrayList<>();\n+        List<String> ports = new ArrayList<>();\n+        List<RouteEntry> routeEntities = new ArrayList<>();\n+\n+        // create a VPC routing table and pump-in the VPC default routing rules\n+        RouteEntry routeEntry = new RouteEntry(projectId, routeEntryId, \"default_vpc_routeEntry\", \"\", destination, RouteConstant.DEFAULT_TARGET, RouteConstant.DEFAULT_PRIORITY, routeTableId, null);\n+        routeEntities.add(routeEntry);\n+        this.routeEntryDatabaseService.addRouteEntry(routeEntry);\n+\n+        RouteTable routeTable = new RouteTable(projectId, routeTableId, \"default_vpc_routeTable\", \"\", routeEntities, RouteTableType.VPC, owner);\n+        vpcRouteTables.add(routeTable);\n+        this.routeTableDatabaseService.addRouteTable(routeTable);\n+\n+        Router router = new Router(projectId, routerId, \"default_vpc_router\", \"\",\n+                null, vpcRouteTables, owner, ports, projectId, true, null, null);\n+        this.routerDatabaseService.addRouter(router);", "originalCommit": "3e45fc5f8999e75a07aa82c506079cb276849c1e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODkxNTk5NA==", "url": "https://github.com/futurewei-cloud/alcor/pull/380#discussion_r488915994", "bodyText": "Sure", "author": "kevin-zhonghao", "createdAt": "2020-09-15T19:27:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzMzNzQ2MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODAyNjMxOQ==", "url": "https://github.com/futurewei-cloud/alcor/pull/380#discussion_r488026319", "bodyText": "The logic here is not correct! We shouldn't block the updating for VPC default routing table when there are subnets using it. So, I think we don't need to check 'if the VPC router contains subnet routing table' here.", "author": "cj-chung", "createdAt": "2020-09-14T15:30:50Z", "path": "services/route_manager/src/main/java/com/futurewei/alcor/route/service/Impl/RouterServiceImpl.java", "diffHunk": "@@ -0,0 +1,316 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.route.service.Impl;\n+\n+import com.futurewei.alcor.common.db.CacheException;\n+import com.futurewei.alcor.common.enumClass.RouteTableType;\n+import com.futurewei.alcor.common.exception.DatabasePersistenceException;\n+import com.futurewei.alcor.common.logging.Logger;\n+import com.futurewei.alcor.common.logging.LoggerFactory;\n+import com.futurewei.alcor.route.entity.RouteConstant;\n+import com.futurewei.alcor.route.exception.*;\n+import com.futurewei.alcor.route.service.*;\n+import com.futurewei.alcor.route.utils.RouteManagerUtil;\n+import com.futurewei.alcor.web.entity.route.*;\n+import com.futurewei.alcor.web.entity.vpc.VpcEntity;\n+import com.futurewei.alcor.web.entity.vpc.VpcWebJson;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+import java.util.*;\n+\n+@Service\n+public class RouterServiceImpl implements RouterService {\n+\n+    private Logger logger = LoggerFactory.getLogger();\n+\n+    @Autowired\n+    private RouterDatabaseService routerDatabaseService;\n+\n+    @Autowired\n+    private VpcRouterToVpcService vpcRouterToVpcService;\n+\n+    @Autowired\n+    private RouteTableDatabaseService routeTableDatabaseService;\n+\n+    @Autowired\n+    private RouteEntryDatabaseService routeEntryDatabaseService;\n+\n+\n+    @Override\n+    public Router getOrCreateVpcRouter(String projectId, String vpcId) throws CanNotFindVpc, DatabasePersistenceException, CacheException, ExistMultipleVpcRouter {\n+        Router router = null;\n+\n+        // If VPC already has a router, return the router state\n+        Map<String, Router> routerMap = null;\n+        Map<String, Object[]> queryParams = new HashMap<>();\n+        Object[] values = new Object[1];\n+        values[0] = vpcId;\n+        queryParams.put(\"owner\", values);\n+\n+        routerMap = this.routerDatabaseService.getAllRouters(queryParams);\n+\n+        if (routerMap == null) {\n+            routerMap = new HashMap<>();\n+        }\n+\n+        if (routerMap.size() > 1) {\n+            throw new ExistMultipleVpcRouter();\n+        } else if (routerMap.size() == 1) {\n+            for (Map.Entry<String, Router> entry : routerMap.entrySet()) {\n+                router = (Router)entry.getValue();\n+                return router;\n+            }\n+        } else {\n+            // get vpc entity to create default route table and route route rule\n+            VpcWebJson vpcResponse = this.vpcRouterToVpcService.getVpcWebJson(projectId, vpcId);\n+            VpcEntity vpcEntity = vpcResponse.getNetwork();\n+\n+\n+            // If VPC doesn\u2019t have a router, create a new router, create a VPC routing table and pump-in the VPC default routing rules\n+            router = createDefaultVpcRouter(projectId, vpcEntity);\n+        }\n+\n+        return router;\n+    }\n+\n+    @Override\n+    public Router createDefaultVpcRouter(String projectId, VpcEntity vpcEntity) throws DatabasePersistenceException {\n+        String routerId = UUID.randomUUID().toString();\n+        String routeTableId = UUID.randomUUID().toString();\n+        String routeEntryId = UUID.randomUUID().toString();\n+        String owner = vpcEntity.getId();\n+        String destination = vpcEntity.getCidr();\n+        List<RouteTable> vpcRouteTables = new ArrayList<>();\n+        List<String> ports = new ArrayList<>();\n+        List<RouteEntry> routeEntities = new ArrayList<>();\n+\n+        // create a VPC routing table and pump-in the VPC default routing rules\n+        RouteEntry routeEntry = new RouteEntry(projectId, routeEntryId, \"default_vpc_routeEntry\", \"\", destination, RouteConstant.DEFAULT_TARGET, RouteConstant.DEFAULT_PRIORITY, routeTableId, null);\n+        routeEntities.add(routeEntry);\n+        this.routeEntryDatabaseService.addRouteEntry(routeEntry);\n+\n+        RouteTable routeTable = new RouteTable(projectId, routeTableId, \"default_vpc_routeTable\", \"\", routeEntities, RouteTableType.VPC, owner);\n+        vpcRouteTables.add(routeTable);\n+        this.routeTableDatabaseService.addRouteTable(routeTable);\n+\n+        Router router = new Router(projectId, routerId, \"default_vpc_router\", \"\",\n+                null, vpcRouteTables, owner, ports, projectId, true, null, null);\n+        this.routerDatabaseService.addRouter(router);\n+\n+        return router;\n+    }\n+\n+    @Override\n+    public String deleteVpcRouter(String projectId, String vpcId) throws Exception {\n+        VpcWebJson vpcResponse = this.vpcRouterToVpcService.getVpcWebJson(projectId, vpcId);\n+        VpcEntity vpcEntity = vpcResponse.getNetwork();\n+        Router router = vpcEntity.getRouter();\n+        if (router == null) {\n+            return null;\n+        }\n+\n+        // check if the VPC router contains subnet routing table\n+        List<RouteTable> vpcRouteTable = router.getVpcRouteTable();\n+        if (vpcRouteTable == null || vpcRouteTable.size() == 0) {\n+            return null;\n+        }\n+        for (RouteTable routeTable : vpcRouteTable) {\n+            String routeTableType = routeTable.getRouteTableType().getRouteTableType();\n+            if (RouteTableType.PRIVATE_SUBNET.getRouteTableType().equals(routeTableType) || RouteTableType.PUBLIC_SUBNET.getRouteTableType().equals(routeTableType)) {\n+                throw new VpcRouterContainsSubnetRoutingTables();\n+            }\n+        }", "originalCommit": "3e45fc5f8999e75a07aa82c506079cb276849c1e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODAyNzU1OQ==", "url": "https://github.com/futurewei-cloud/alcor/pull/380#discussion_r488027559", "bodyText": "Instead, we need to check if there is any subnet exists in the VPC. If VPC contains subnet, we cannot delete VPC router and VPC default routing table.", "author": "cj-chung", "createdAt": "2020-09-14T15:32:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODAyNjMxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk1MDAxOQ==", "url": "https://github.com/futurewei-cloud/alcor/pull/380#discussion_r488950019", "bodyText": "Yeah you are right, I'll modify the checking process", "author": "kevin-zhonghao", "createdAt": "2020-09-15T20:21:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODAyNjMxOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODAzMjQwNA==", "url": "https://github.com/futurewei-cloud/alcor/pull/380#discussion_r488032404", "bodyText": "These lines of code same as the lines in the getOrCreateVpcRouter function. Since one VPC has only one router and default routing table. Should we merge createDefaultVpcRouteTable into getOrCreateVpcRouter ?", "author": "cj-chung", "createdAt": "2020-09-14T15:39:20Z", "path": "services/route_manager/src/main/java/com/futurewei/alcor/route/service/Impl/RouterServiceImpl.java", "diffHunk": "@@ -0,0 +1,316 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.route.service.Impl;\n+\n+import com.futurewei.alcor.common.db.CacheException;\n+import com.futurewei.alcor.common.enumClass.RouteTableType;\n+import com.futurewei.alcor.common.exception.DatabasePersistenceException;\n+import com.futurewei.alcor.common.logging.Logger;\n+import com.futurewei.alcor.common.logging.LoggerFactory;\n+import com.futurewei.alcor.route.entity.RouteConstant;\n+import com.futurewei.alcor.route.exception.*;\n+import com.futurewei.alcor.route.service.*;\n+import com.futurewei.alcor.route.utils.RouteManagerUtil;\n+import com.futurewei.alcor.web.entity.route.*;\n+import com.futurewei.alcor.web.entity.vpc.VpcEntity;\n+import com.futurewei.alcor.web.entity.vpc.VpcWebJson;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+import java.util.*;\n+\n+@Service\n+public class RouterServiceImpl implements RouterService {\n+\n+    private Logger logger = LoggerFactory.getLogger();\n+\n+    @Autowired\n+    private RouterDatabaseService routerDatabaseService;\n+\n+    @Autowired\n+    private VpcRouterToVpcService vpcRouterToVpcService;\n+\n+    @Autowired\n+    private RouteTableDatabaseService routeTableDatabaseService;\n+\n+    @Autowired\n+    private RouteEntryDatabaseService routeEntryDatabaseService;\n+\n+\n+    @Override\n+    public Router getOrCreateVpcRouter(String projectId, String vpcId) throws CanNotFindVpc, DatabasePersistenceException, CacheException, ExistMultipleVpcRouter {\n+        Router router = null;\n+\n+        // If VPC already has a router, return the router state\n+        Map<String, Router> routerMap = null;\n+        Map<String, Object[]> queryParams = new HashMap<>();\n+        Object[] values = new Object[1];\n+        values[0] = vpcId;\n+        queryParams.put(\"owner\", values);\n+\n+        routerMap = this.routerDatabaseService.getAllRouters(queryParams);\n+\n+        if (routerMap == null) {\n+            routerMap = new HashMap<>();\n+        }\n+\n+        if (routerMap.size() > 1) {\n+            throw new ExistMultipleVpcRouter();\n+        } else if (routerMap.size() == 1) {\n+            for (Map.Entry<String, Router> entry : routerMap.entrySet()) {\n+                router = (Router)entry.getValue();\n+                return router;\n+            }\n+        } else {\n+            // get vpc entity to create default route table and route route rule\n+            VpcWebJson vpcResponse = this.vpcRouterToVpcService.getVpcWebJson(projectId, vpcId);\n+            VpcEntity vpcEntity = vpcResponse.getNetwork();\n+\n+\n+            // If VPC doesn\u2019t have a router, create a new router, create a VPC routing table and pump-in the VPC default routing rules\n+            router = createDefaultVpcRouter(projectId, vpcEntity);\n+        }\n+\n+        return router;\n+    }\n+\n+    @Override\n+    public Router createDefaultVpcRouter(String projectId, VpcEntity vpcEntity) throws DatabasePersistenceException {\n+        String routerId = UUID.randomUUID().toString();\n+        String routeTableId = UUID.randomUUID().toString();\n+        String routeEntryId = UUID.randomUUID().toString();\n+        String owner = vpcEntity.getId();\n+        String destination = vpcEntity.getCidr();\n+        List<RouteTable> vpcRouteTables = new ArrayList<>();\n+        List<String> ports = new ArrayList<>();\n+        List<RouteEntry> routeEntities = new ArrayList<>();\n+\n+        // create a VPC routing table and pump-in the VPC default routing rules\n+        RouteEntry routeEntry = new RouteEntry(projectId, routeEntryId, \"default_vpc_routeEntry\", \"\", destination, RouteConstant.DEFAULT_TARGET, RouteConstant.DEFAULT_PRIORITY, routeTableId, null);\n+        routeEntities.add(routeEntry);\n+        this.routeEntryDatabaseService.addRouteEntry(routeEntry);\n+\n+        RouteTable routeTable = new RouteTable(projectId, routeTableId, \"default_vpc_routeTable\", \"\", routeEntities, RouteTableType.VPC, owner);\n+        vpcRouteTables.add(routeTable);\n+        this.routeTableDatabaseService.addRouteTable(routeTable);\n+\n+        Router router = new Router(projectId, routerId, \"default_vpc_router\", \"\",\n+                null, vpcRouteTables, owner, ports, projectId, true, null, null);\n+        this.routerDatabaseService.addRouter(router);\n+\n+        return router;\n+    }\n+\n+    @Override\n+    public String deleteVpcRouter(String projectId, String vpcId) throws Exception {\n+        VpcWebJson vpcResponse = this.vpcRouterToVpcService.getVpcWebJson(projectId, vpcId);\n+        VpcEntity vpcEntity = vpcResponse.getNetwork();\n+        Router router = vpcEntity.getRouter();\n+        if (router == null) {\n+            return null;\n+        }\n+\n+        // check if the VPC router contains subnet routing table\n+        List<RouteTable> vpcRouteTable = router.getVpcRouteTable();\n+        if (vpcRouteTable == null || vpcRouteTable.size() == 0) {\n+            return null;\n+        }\n+        for (RouteTable routeTable : vpcRouteTable) {\n+            String routeTableType = routeTable.getRouteTableType().getRouteTableType();\n+            if (RouteTableType.PRIVATE_SUBNET.getRouteTableType().equals(routeTableType) || RouteTableType.PUBLIC_SUBNET.getRouteTableType().equals(routeTableType)) {\n+                throw new VpcRouterContainsSubnetRoutingTables();\n+            }\n+        }\n+\n+        // delete router and route tables\n+        this.routerDatabaseService.deleteRouter(router.getId());\n+        for (RouteTable routeTable : vpcRouteTable) {\n+            this.routeTableDatabaseService.deleteRouteTable(routeTable.getId());\n+        }\n+\n+        return router.getId();\n+    }\n+\n+    @Override\n+    public RouteTable getOrCreateVpcRouteTable(String projectId, String vpcId) throws DatabasePersistenceException, CanNotFindVpc, CacheException, ExistMultipleVpcRouter {\n+        RouteTable routeTable = null;\n+\n+        // Get or create a router for a Vpc\n+        Router router = getOrCreateVpcRouter(projectId, vpcId);\n+\n+        // If VPC has a VPC routing table, return the routing table\u2019s state\n+        List<RouteTable> vpcRouteTables = router.getVpcRouteTable();\n+        for (RouteTable vpcRouteTable : vpcRouteTables) {\n+            String routeTableType = vpcRouteTable.getRouteTableType().getRouteTableType();\n+            if (RouteTableType.VPC.getRouteTableType().equals(routeTableType)) {\n+                return vpcRouteTable;\n+            }\n+        }\n+\n+        // If VPC doesn\u2019t have a VPC routing table, this operation will create a VPC routing table and pump-in the VPC default routing rules.\n+        routeTable = createDefaultVpcRouteTable(projectId, router);\n+\n+        return routeTable;\n+    }\n+\n+    @Override\n+    public RouteTable createDefaultVpcRouteTable(String projectId, Router router) throws DatabasePersistenceException {\n+        String routeTableId = UUID.randomUUID().toString();\n+        String routeEntryId = UUID.randomUUID().toString();\n+        String owner = router.getOwner();\n+        List<RouteTable> vpcRouteTables = router.getVpcRouteTable();\n+        List<RouteEntry> routeEntities = new ArrayList<>();\n+\n+        // create a VPC routing table and pump-in the VPC default routing rules\n+        RouteEntry routeEntry = new RouteEntry(projectId, routeEntryId, \"default_vpc_routeEntry\", \"\", null, RouteConstant.DEFAULT_TARGET, RouteConstant.DEFAULT_PRIORITY, routeTableId, null);\n+        routeEntities.add(routeEntry);\n+        this.routeEntryDatabaseService.addRouteEntry(routeEntry);\n+\n+        RouteTable routeTable = new RouteTable(projectId, routeTableId, \"default_vpc_routeTable\", \"\", routeEntities, RouteTableType.VPC, owner);\n+        vpcRouteTables.add(routeTable);\n+        this.routeTableDatabaseService.addRouteTable(routeTable);\n+\n+        vpcRouteTables.add(routeTable);\n+        router.setVpcRouteTable(vpcRouteTables);\n+        this.routerDatabaseService.addRouter(router);", "originalCommit": "3e45fc5f8999e75a07aa82c506079cb276849c1e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk3MzUxNw==", "url": "https://github.com/futurewei-cloud/alcor/pull/380#discussion_r488973517", "bodyText": "Although some codes here are same as createDefaultVpcRouter, it is not convenient to merge them. They are used for different method and the parameters passed in are dfferent, either", "author": "kevin-zhonghao", "createdAt": "2020-09-15T21:07:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODAzMjQwNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODAzNDYzOA==", "url": "https://github.com/futurewei-cloud/alcor/pull/380#discussion_r488034638", "bodyText": "VPC default route table has only one for each VPC. We shouldn't look-up all routing tables to get it.", "author": "cj-chung", "createdAt": "2020-09-14T15:42:34Z", "path": "services/route_manager/src/main/java/com/futurewei/alcor/route/service/Impl/RouterServiceImpl.java", "diffHunk": "@@ -0,0 +1,316 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.route.service.Impl;\n+\n+import com.futurewei.alcor.common.db.CacheException;\n+import com.futurewei.alcor.common.enumClass.RouteTableType;\n+import com.futurewei.alcor.common.exception.DatabasePersistenceException;\n+import com.futurewei.alcor.common.logging.Logger;\n+import com.futurewei.alcor.common.logging.LoggerFactory;\n+import com.futurewei.alcor.route.entity.RouteConstant;\n+import com.futurewei.alcor.route.exception.*;\n+import com.futurewei.alcor.route.service.*;\n+import com.futurewei.alcor.route.utils.RouteManagerUtil;\n+import com.futurewei.alcor.web.entity.route.*;\n+import com.futurewei.alcor.web.entity.vpc.VpcEntity;\n+import com.futurewei.alcor.web.entity.vpc.VpcWebJson;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+import java.util.*;\n+\n+@Service\n+public class RouterServiceImpl implements RouterService {\n+\n+    private Logger logger = LoggerFactory.getLogger();\n+\n+    @Autowired\n+    private RouterDatabaseService routerDatabaseService;\n+\n+    @Autowired\n+    private VpcRouterToVpcService vpcRouterToVpcService;\n+\n+    @Autowired\n+    private RouteTableDatabaseService routeTableDatabaseService;\n+\n+    @Autowired\n+    private RouteEntryDatabaseService routeEntryDatabaseService;\n+\n+\n+    @Override\n+    public Router getOrCreateVpcRouter(String projectId, String vpcId) throws CanNotFindVpc, DatabasePersistenceException, CacheException, ExistMultipleVpcRouter {\n+        Router router = null;\n+\n+        // If VPC already has a router, return the router state\n+        Map<String, Router> routerMap = null;\n+        Map<String, Object[]> queryParams = new HashMap<>();\n+        Object[] values = new Object[1];\n+        values[0] = vpcId;\n+        queryParams.put(\"owner\", values);\n+\n+        routerMap = this.routerDatabaseService.getAllRouters(queryParams);\n+\n+        if (routerMap == null) {\n+            routerMap = new HashMap<>();\n+        }\n+\n+        if (routerMap.size() > 1) {\n+            throw new ExistMultipleVpcRouter();\n+        } else if (routerMap.size() == 1) {\n+            for (Map.Entry<String, Router> entry : routerMap.entrySet()) {\n+                router = (Router)entry.getValue();\n+                return router;\n+            }\n+        } else {\n+            // get vpc entity to create default route table and route route rule\n+            VpcWebJson vpcResponse = this.vpcRouterToVpcService.getVpcWebJson(projectId, vpcId);\n+            VpcEntity vpcEntity = vpcResponse.getNetwork();\n+\n+\n+            // If VPC doesn\u2019t have a router, create a new router, create a VPC routing table and pump-in the VPC default routing rules\n+            router = createDefaultVpcRouter(projectId, vpcEntity);\n+        }\n+\n+        return router;\n+    }\n+\n+    @Override\n+    public Router createDefaultVpcRouter(String projectId, VpcEntity vpcEntity) throws DatabasePersistenceException {\n+        String routerId = UUID.randomUUID().toString();\n+        String routeTableId = UUID.randomUUID().toString();\n+        String routeEntryId = UUID.randomUUID().toString();\n+        String owner = vpcEntity.getId();\n+        String destination = vpcEntity.getCidr();\n+        List<RouteTable> vpcRouteTables = new ArrayList<>();\n+        List<String> ports = new ArrayList<>();\n+        List<RouteEntry> routeEntities = new ArrayList<>();\n+\n+        // create a VPC routing table and pump-in the VPC default routing rules\n+        RouteEntry routeEntry = new RouteEntry(projectId, routeEntryId, \"default_vpc_routeEntry\", \"\", destination, RouteConstant.DEFAULT_TARGET, RouteConstant.DEFAULT_PRIORITY, routeTableId, null);\n+        routeEntities.add(routeEntry);\n+        this.routeEntryDatabaseService.addRouteEntry(routeEntry);\n+\n+        RouteTable routeTable = new RouteTable(projectId, routeTableId, \"default_vpc_routeTable\", \"\", routeEntities, RouteTableType.VPC, owner);\n+        vpcRouteTables.add(routeTable);\n+        this.routeTableDatabaseService.addRouteTable(routeTable);\n+\n+        Router router = new Router(projectId, routerId, \"default_vpc_router\", \"\",\n+                null, vpcRouteTables, owner, ports, projectId, true, null, null);\n+        this.routerDatabaseService.addRouter(router);\n+\n+        return router;\n+    }\n+\n+    @Override\n+    public String deleteVpcRouter(String projectId, String vpcId) throws Exception {\n+        VpcWebJson vpcResponse = this.vpcRouterToVpcService.getVpcWebJson(projectId, vpcId);\n+        VpcEntity vpcEntity = vpcResponse.getNetwork();\n+        Router router = vpcEntity.getRouter();\n+        if (router == null) {\n+            return null;\n+        }\n+\n+        // check if the VPC router contains subnet routing table\n+        List<RouteTable> vpcRouteTable = router.getVpcRouteTable();\n+        if (vpcRouteTable == null || vpcRouteTable.size() == 0) {\n+            return null;\n+        }\n+        for (RouteTable routeTable : vpcRouteTable) {\n+            String routeTableType = routeTable.getRouteTableType().getRouteTableType();\n+            if (RouteTableType.PRIVATE_SUBNET.getRouteTableType().equals(routeTableType) || RouteTableType.PUBLIC_SUBNET.getRouteTableType().equals(routeTableType)) {\n+                throw new VpcRouterContainsSubnetRoutingTables();\n+            }\n+        }\n+\n+        // delete router and route tables\n+        this.routerDatabaseService.deleteRouter(router.getId());\n+        for (RouteTable routeTable : vpcRouteTable) {\n+            this.routeTableDatabaseService.deleteRouteTable(routeTable.getId());\n+        }\n+\n+        return router.getId();\n+    }\n+\n+    @Override\n+    public RouteTable getOrCreateVpcRouteTable(String projectId, String vpcId) throws DatabasePersistenceException, CanNotFindVpc, CacheException, ExistMultipleVpcRouter {\n+        RouteTable routeTable = null;\n+\n+        // Get or create a router for a Vpc\n+        Router router = getOrCreateVpcRouter(projectId, vpcId);\n+\n+        // If VPC has a VPC routing table, return the routing table\u2019s state\n+        List<RouteTable> vpcRouteTables = router.getVpcRouteTable();\n+        for (RouteTable vpcRouteTable : vpcRouteTables) {\n+            String routeTableType = vpcRouteTable.getRouteTableType().getRouteTableType();\n+            if (RouteTableType.VPC.getRouteTableType().equals(routeTableType)) {\n+                return vpcRouteTable;\n+            }\n+        }\n+\n+        // If VPC doesn\u2019t have a VPC routing table, this operation will create a VPC routing table and pump-in the VPC default routing rules.\n+        routeTable = createDefaultVpcRouteTable(projectId, router);\n+\n+        return routeTable;\n+    }\n+\n+    @Override\n+    public RouteTable createDefaultVpcRouteTable(String projectId, Router router) throws DatabasePersistenceException {\n+        String routeTableId = UUID.randomUUID().toString();\n+        String routeEntryId = UUID.randomUUID().toString();\n+        String owner = router.getOwner();\n+        List<RouteTable> vpcRouteTables = router.getVpcRouteTable();\n+        List<RouteEntry> routeEntities = new ArrayList<>();\n+\n+        // create a VPC routing table and pump-in the VPC default routing rules\n+        RouteEntry routeEntry = new RouteEntry(projectId, routeEntryId, \"default_vpc_routeEntry\", \"\", null, RouteConstant.DEFAULT_TARGET, RouteConstant.DEFAULT_PRIORITY, routeTableId, null);\n+        routeEntities.add(routeEntry);\n+        this.routeEntryDatabaseService.addRouteEntry(routeEntry);\n+\n+        RouteTable routeTable = new RouteTable(projectId, routeTableId, \"default_vpc_routeTable\", \"\", routeEntities, RouteTableType.VPC, owner);\n+        vpcRouteTables.add(routeTable);\n+        this.routeTableDatabaseService.addRouteTable(routeTable);\n+\n+        vpcRouteTables.add(routeTable);\n+        router.setVpcRouteTable(vpcRouteTables);\n+        this.routerDatabaseService.addRouter(router);\n+\n+        return routeTable;\n+    }\n+\n+    @Override\n+    public RouteTable updateVpcRouteTable(String projectId, String vpcId, RouteTableWebJson resource) throws DatabasePersistenceException, CanNotFindVpc, CacheException, ExistMultipleVpcRouter {\n+        RouteTable routeTable = null;\n+        RouteTable inRoutetable = resource.getRoutetable();\n+\n+        // Get or create a router for a Vpc\n+        Router router = getOrCreateVpcRouter(projectId, vpcId);\n+\n+        // check if there is a vpc default routetable\n+        List<RouteTable> vpcRouteTables = router.getVpcRouteTable();\n+        for (RouteTable vpcRouteTable : vpcRouteTables) {\n+            String routeTableType = vpcRouteTable.getRouteTableType().getRouteTableType();\n+            if (RouteTableType.VPC.getRouteTableType().equals(routeTableType)) {\n+                routeTable = vpcRouteTable;\n+                vpcRouteTables.remove(vpcRouteTable);\n+                break;\n+            }\n+        }", "originalCommit": "3e45fc5f8999e75a07aa82c506079cb276849c1e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTA2MzExNw==", "url": "https://github.com/futurewei-cloud/alcor/pull/380#discussion_r489063117", "bodyText": "Already add a field \"vpcDefaultRouteTableId\" in Router to map vpc default route table", "author": "kevin-zhonghao", "createdAt": "2020-09-15T23:12:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODAzNDYzOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODAzNTU3NA==", "url": "https://github.com/futurewei-cloud/alcor/pull/380#discussion_r488035574", "bodyText": "We don't need to check this, see my comment in the  deleteVpcRouter.", "author": "cj-chung", "createdAt": "2020-09-14T15:43:57Z", "path": "services/route_manager/src/main/java/com/futurewei/alcor/route/service/Impl/RouterServiceImpl.java", "diffHunk": "@@ -0,0 +1,316 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.route.service.Impl;\n+\n+import com.futurewei.alcor.common.db.CacheException;\n+import com.futurewei.alcor.common.enumClass.RouteTableType;\n+import com.futurewei.alcor.common.exception.DatabasePersistenceException;\n+import com.futurewei.alcor.common.logging.Logger;\n+import com.futurewei.alcor.common.logging.LoggerFactory;\n+import com.futurewei.alcor.route.entity.RouteConstant;\n+import com.futurewei.alcor.route.exception.*;\n+import com.futurewei.alcor.route.service.*;\n+import com.futurewei.alcor.route.utils.RouteManagerUtil;\n+import com.futurewei.alcor.web.entity.route.*;\n+import com.futurewei.alcor.web.entity.vpc.VpcEntity;\n+import com.futurewei.alcor.web.entity.vpc.VpcWebJson;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+import java.util.*;\n+\n+@Service\n+public class RouterServiceImpl implements RouterService {\n+\n+    private Logger logger = LoggerFactory.getLogger();\n+\n+    @Autowired\n+    private RouterDatabaseService routerDatabaseService;\n+\n+    @Autowired\n+    private VpcRouterToVpcService vpcRouterToVpcService;\n+\n+    @Autowired\n+    private RouteTableDatabaseService routeTableDatabaseService;\n+\n+    @Autowired\n+    private RouteEntryDatabaseService routeEntryDatabaseService;\n+\n+\n+    @Override\n+    public Router getOrCreateVpcRouter(String projectId, String vpcId) throws CanNotFindVpc, DatabasePersistenceException, CacheException, ExistMultipleVpcRouter {\n+        Router router = null;\n+\n+        // If VPC already has a router, return the router state\n+        Map<String, Router> routerMap = null;\n+        Map<String, Object[]> queryParams = new HashMap<>();\n+        Object[] values = new Object[1];\n+        values[0] = vpcId;\n+        queryParams.put(\"owner\", values);\n+\n+        routerMap = this.routerDatabaseService.getAllRouters(queryParams);\n+\n+        if (routerMap == null) {\n+            routerMap = new HashMap<>();\n+        }\n+\n+        if (routerMap.size() > 1) {\n+            throw new ExistMultipleVpcRouter();\n+        } else if (routerMap.size() == 1) {\n+            for (Map.Entry<String, Router> entry : routerMap.entrySet()) {\n+                router = (Router)entry.getValue();\n+                return router;\n+            }\n+        } else {\n+            // get vpc entity to create default route table and route route rule\n+            VpcWebJson vpcResponse = this.vpcRouterToVpcService.getVpcWebJson(projectId, vpcId);\n+            VpcEntity vpcEntity = vpcResponse.getNetwork();\n+\n+\n+            // If VPC doesn\u2019t have a router, create a new router, create a VPC routing table and pump-in the VPC default routing rules\n+            router = createDefaultVpcRouter(projectId, vpcEntity);\n+        }\n+\n+        return router;\n+    }\n+\n+    @Override\n+    public Router createDefaultVpcRouter(String projectId, VpcEntity vpcEntity) throws DatabasePersistenceException {\n+        String routerId = UUID.randomUUID().toString();\n+        String routeTableId = UUID.randomUUID().toString();\n+        String routeEntryId = UUID.randomUUID().toString();\n+        String owner = vpcEntity.getId();\n+        String destination = vpcEntity.getCidr();\n+        List<RouteTable> vpcRouteTables = new ArrayList<>();\n+        List<String> ports = new ArrayList<>();\n+        List<RouteEntry> routeEntities = new ArrayList<>();\n+\n+        // create a VPC routing table and pump-in the VPC default routing rules\n+        RouteEntry routeEntry = new RouteEntry(projectId, routeEntryId, \"default_vpc_routeEntry\", \"\", destination, RouteConstant.DEFAULT_TARGET, RouteConstant.DEFAULT_PRIORITY, routeTableId, null);\n+        routeEntities.add(routeEntry);\n+        this.routeEntryDatabaseService.addRouteEntry(routeEntry);\n+\n+        RouteTable routeTable = new RouteTable(projectId, routeTableId, \"default_vpc_routeTable\", \"\", routeEntities, RouteTableType.VPC, owner);\n+        vpcRouteTables.add(routeTable);\n+        this.routeTableDatabaseService.addRouteTable(routeTable);\n+\n+        Router router = new Router(projectId, routerId, \"default_vpc_router\", \"\",\n+                null, vpcRouteTables, owner, ports, projectId, true, null, null);\n+        this.routerDatabaseService.addRouter(router);\n+\n+        return router;\n+    }\n+\n+    @Override\n+    public String deleteVpcRouter(String projectId, String vpcId) throws Exception {\n+        VpcWebJson vpcResponse = this.vpcRouterToVpcService.getVpcWebJson(projectId, vpcId);\n+        VpcEntity vpcEntity = vpcResponse.getNetwork();\n+        Router router = vpcEntity.getRouter();\n+        if (router == null) {\n+            return null;\n+        }\n+\n+        // check if the VPC router contains subnet routing table\n+        List<RouteTable> vpcRouteTable = router.getVpcRouteTable();\n+        if (vpcRouteTable == null || vpcRouteTable.size() == 0) {\n+            return null;\n+        }\n+        for (RouteTable routeTable : vpcRouteTable) {\n+            String routeTableType = routeTable.getRouteTableType().getRouteTableType();\n+            if (RouteTableType.PRIVATE_SUBNET.getRouteTableType().equals(routeTableType) || RouteTableType.PUBLIC_SUBNET.getRouteTableType().equals(routeTableType)) {\n+                throw new VpcRouterContainsSubnetRoutingTables();\n+            }\n+        }\n+\n+        // delete router and route tables\n+        this.routerDatabaseService.deleteRouter(router.getId());\n+        for (RouteTable routeTable : vpcRouteTable) {\n+            this.routeTableDatabaseService.deleteRouteTable(routeTable.getId());\n+        }\n+\n+        return router.getId();\n+    }\n+\n+    @Override\n+    public RouteTable getOrCreateVpcRouteTable(String projectId, String vpcId) throws DatabasePersistenceException, CanNotFindVpc, CacheException, ExistMultipleVpcRouter {\n+        RouteTable routeTable = null;\n+\n+        // Get or create a router for a Vpc\n+        Router router = getOrCreateVpcRouter(projectId, vpcId);\n+\n+        // If VPC has a VPC routing table, return the routing table\u2019s state\n+        List<RouteTable> vpcRouteTables = router.getVpcRouteTable();\n+        for (RouteTable vpcRouteTable : vpcRouteTables) {\n+            String routeTableType = vpcRouteTable.getRouteTableType().getRouteTableType();\n+            if (RouteTableType.VPC.getRouteTableType().equals(routeTableType)) {\n+                return vpcRouteTable;\n+            }\n+        }\n+\n+        // If VPC doesn\u2019t have a VPC routing table, this operation will create a VPC routing table and pump-in the VPC default routing rules.\n+        routeTable = createDefaultVpcRouteTable(projectId, router);\n+\n+        return routeTable;\n+    }\n+\n+    @Override\n+    public RouteTable createDefaultVpcRouteTable(String projectId, Router router) throws DatabasePersistenceException {\n+        String routeTableId = UUID.randomUUID().toString();\n+        String routeEntryId = UUID.randomUUID().toString();\n+        String owner = router.getOwner();\n+        List<RouteTable> vpcRouteTables = router.getVpcRouteTable();\n+        List<RouteEntry> routeEntities = new ArrayList<>();\n+\n+        // create a VPC routing table and pump-in the VPC default routing rules\n+        RouteEntry routeEntry = new RouteEntry(projectId, routeEntryId, \"default_vpc_routeEntry\", \"\", null, RouteConstant.DEFAULT_TARGET, RouteConstant.DEFAULT_PRIORITY, routeTableId, null);\n+        routeEntities.add(routeEntry);\n+        this.routeEntryDatabaseService.addRouteEntry(routeEntry);\n+\n+        RouteTable routeTable = new RouteTable(projectId, routeTableId, \"default_vpc_routeTable\", \"\", routeEntities, RouteTableType.VPC, owner);\n+        vpcRouteTables.add(routeTable);\n+        this.routeTableDatabaseService.addRouteTable(routeTable);\n+\n+        vpcRouteTables.add(routeTable);\n+        router.setVpcRouteTable(vpcRouteTables);\n+        this.routerDatabaseService.addRouter(router);\n+\n+        return routeTable;\n+    }\n+\n+    @Override\n+    public RouteTable updateVpcRouteTable(String projectId, String vpcId, RouteTableWebJson resource) throws DatabasePersistenceException, CanNotFindVpc, CacheException, ExistMultipleVpcRouter {\n+        RouteTable routeTable = null;\n+        RouteTable inRoutetable = resource.getRoutetable();\n+\n+        // Get or create a router for a Vpc\n+        Router router = getOrCreateVpcRouter(projectId, vpcId);\n+\n+        // check if there is a vpc default routetable\n+        List<RouteTable> vpcRouteTables = router.getVpcRouteTable();\n+        for (RouteTable vpcRouteTable : vpcRouteTables) {\n+            String routeTableType = vpcRouteTable.getRouteTableType().getRouteTableType();\n+            if (RouteTableType.VPC.getRouteTableType().equals(routeTableType)) {\n+                routeTable = vpcRouteTable;\n+                vpcRouteTables.remove(vpcRouteTable);\n+                break;\n+            }\n+        }\n+\n+        if (routeTable == null) {\n+            String routeTableId = inRoutetable.getId();\n+            if (routeTableId == null) {\n+                routeTableId = UUID.randomUUID().toString();\n+                inRoutetable.setId(routeTableId);\n+            }\n+            inRoutetable.setRouteTableType(RouteTableType.VPC);\n+            vpcRouteTables.add(inRoutetable);\n+            router.setVpcRouteTable(vpcRouteTables);\n+            this.routerDatabaseService.addRouter(router);\n+\n+            return inRoutetable;\n+        } else {\n+            List<RouteEntry> routeEntities = routeTable.getRouteEntities();\n+            List<RouteEntry> inRouteEntities = inRoutetable.getRouteEntities();\n+\n+            for (RouteEntry routeEntry : routeEntities) {\n+                if (!inRouteEntities.contains(routeEntry)) {\n+                    // TODO: check if existing rules are currently used by other subnet\u2019s routing table\n+                }\n+            }", "originalCommit": "3e45fc5f8999e75a07aa82c506079cb276849c1e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk3ODk1OQ==", "url": "https://github.com/futurewei-cloud/alcor/pull/380#discussion_r488978959", "bodyText": "sure", "author": "kevin-zhonghao", "createdAt": "2020-09-15T21:18:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODAzNTU3NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODAzODIzOA==", "url": "https://github.com/futurewei-cloud/alcor/pull/380#discussion_r488038238", "bodyText": "This function should return all routing tables within this VPC, including VPC default routing table and all subnets' routing tables, not just only VPC default route table.", "author": "cj-chung", "createdAt": "2020-09-14T15:47:35Z", "path": "services/route_manager/src/main/java/com/futurewei/alcor/route/service/Impl/RouterServiceImpl.java", "diffHunk": "@@ -0,0 +1,316 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.route.service.Impl;\n+\n+import com.futurewei.alcor.common.db.CacheException;\n+import com.futurewei.alcor.common.enumClass.RouteTableType;\n+import com.futurewei.alcor.common.exception.DatabasePersistenceException;\n+import com.futurewei.alcor.common.logging.Logger;\n+import com.futurewei.alcor.common.logging.LoggerFactory;\n+import com.futurewei.alcor.route.entity.RouteConstant;\n+import com.futurewei.alcor.route.exception.*;\n+import com.futurewei.alcor.route.service.*;\n+import com.futurewei.alcor.route.utils.RouteManagerUtil;\n+import com.futurewei.alcor.web.entity.route.*;\n+import com.futurewei.alcor.web.entity.vpc.VpcEntity;\n+import com.futurewei.alcor.web.entity.vpc.VpcWebJson;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+import java.util.*;\n+\n+@Service\n+public class RouterServiceImpl implements RouterService {\n+\n+    private Logger logger = LoggerFactory.getLogger();\n+\n+    @Autowired\n+    private RouterDatabaseService routerDatabaseService;\n+\n+    @Autowired\n+    private VpcRouterToVpcService vpcRouterToVpcService;\n+\n+    @Autowired\n+    private RouteTableDatabaseService routeTableDatabaseService;\n+\n+    @Autowired\n+    private RouteEntryDatabaseService routeEntryDatabaseService;\n+\n+\n+    @Override\n+    public Router getOrCreateVpcRouter(String projectId, String vpcId) throws CanNotFindVpc, DatabasePersistenceException, CacheException, ExistMultipleVpcRouter {\n+        Router router = null;\n+\n+        // If VPC already has a router, return the router state\n+        Map<String, Router> routerMap = null;\n+        Map<String, Object[]> queryParams = new HashMap<>();\n+        Object[] values = new Object[1];\n+        values[0] = vpcId;\n+        queryParams.put(\"owner\", values);\n+\n+        routerMap = this.routerDatabaseService.getAllRouters(queryParams);\n+\n+        if (routerMap == null) {\n+            routerMap = new HashMap<>();\n+        }\n+\n+        if (routerMap.size() > 1) {\n+            throw new ExistMultipleVpcRouter();\n+        } else if (routerMap.size() == 1) {\n+            for (Map.Entry<String, Router> entry : routerMap.entrySet()) {\n+                router = (Router)entry.getValue();\n+                return router;\n+            }\n+        } else {\n+            // get vpc entity to create default route table and route route rule\n+            VpcWebJson vpcResponse = this.vpcRouterToVpcService.getVpcWebJson(projectId, vpcId);\n+            VpcEntity vpcEntity = vpcResponse.getNetwork();\n+\n+\n+            // If VPC doesn\u2019t have a router, create a new router, create a VPC routing table and pump-in the VPC default routing rules\n+            router = createDefaultVpcRouter(projectId, vpcEntity);\n+        }\n+\n+        return router;\n+    }\n+\n+    @Override\n+    public Router createDefaultVpcRouter(String projectId, VpcEntity vpcEntity) throws DatabasePersistenceException {\n+        String routerId = UUID.randomUUID().toString();\n+        String routeTableId = UUID.randomUUID().toString();\n+        String routeEntryId = UUID.randomUUID().toString();\n+        String owner = vpcEntity.getId();\n+        String destination = vpcEntity.getCidr();\n+        List<RouteTable> vpcRouteTables = new ArrayList<>();\n+        List<String> ports = new ArrayList<>();\n+        List<RouteEntry> routeEntities = new ArrayList<>();\n+\n+        // create a VPC routing table and pump-in the VPC default routing rules\n+        RouteEntry routeEntry = new RouteEntry(projectId, routeEntryId, \"default_vpc_routeEntry\", \"\", destination, RouteConstant.DEFAULT_TARGET, RouteConstant.DEFAULT_PRIORITY, routeTableId, null);\n+        routeEntities.add(routeEntry);\n+        this.routeEntryDatabaseService.addRouteEntry(routeEntry);\n+\n+        RouteTable routeTable = new RouteTable(projectId, routeTableId, \"default_vpc_routeTable\", \"\", routeEntities, RouteTableType.VPC, owner);\n+        vpcRouteTables.add(routeTable);\n+        this.routeTableDatabaseService.addRouteTable(routeTable);\n+\n+        Router router = new Router(projectId, routerId, \"default_vpc_router\", \"\",\n+                null, vpcRouteTables, owner, ports, projectId, true, null, null);\n+        this.routerDatabaseService.addRouter(router);\n+\n+        return router;\n+    }\n+\n+    @Override\n+    public String deleteVpcRouter(String projectId, String vpcId) throws Exception {\n+        VpcWebJson vpcResponse = this.vpcRouterToVpcService.getVpcWebJson(projectId, vpcId);\n+        VpcEntity vpcEntity = vpcResponse.getNetwork();\n+        Router router = vpcEntity.getRouter();\n+        if (router == null) {\n+            return null;\n+        }\n+\n+        // check if the VPC router contains subnet routing table\n+        List<RouteTable> vpcRouteTable = router.getVpcRouteTable();\n+        if (vpcRouteTable == null || vpcRouteTable.size() == 0) {\n+            return null;\n+        }\n+        for (RouteTable routeTable : vpcRouteTable) {\n+            String routeTableType = routeTable.getRouteTableType().getRouteTableType();\n+            if (RouteTableType.PRIVATE_SUBNET.getRouteTableType().equals(routeTableType) || RouteTableType.PUBLIC_SUBNET.getRouteTableType().equals(routeTableType)) {\n+                throw new VpcRouterContainsSubnetRoutingTables();\n+            }\n+        }\n+\n+        // delete router and route tables\n+        this.routerDatabaseService.deleteRouter(router.getId());\n+        for (RouteTable routeTable : vpcRouteTable) {\n+            this.routeTableDatabaseService.deleteRouteTable(routeTable.getId());\n+        }\n+\n+        return router.getId();\n+    }\n+\n+    @Override\n+    public RouteTable getOrCreateVpcRouteTable(String projectId, String vpcId) throws DatabasePersistenceException, CanNotFindVpc, CacheException, ExistMultipleVpcRouter {\n+        RouteTable routeTable = null;\n+\n+        // Get or create a router for a Vpc\n+        Router router = getOrCreateVpcRouter(projectId, vpcId);\n+\n+        // If VPC has a VPC routing table, return the routing table\u2019s state\n+        List<RouteTable> vpcRouteTables = router.getVpcRouteTable();\n+        for (RouteTable vpcRouteTable : vpcRouteTables) {\n+            String routeTableType = vpcRouteTable.getRouteTableType().getRouteTableType();\n+            if (RouteTableType.VPC.getRouteTableType().equals(routeTableType)) {\n+                return vpcRouteTable;\n+            }\n+        }\n+\n+        // If VPC doesn\u2019t have a VPC routing table, this operation will create a VPC routing table and pump-in the VPC default routing rules.\n+        routeTable = createDefaultVpcRouteTable(projectId, router);\n+\n+        return routeTable;\n+    }\n+\n+    @Override\n+    public RouteTable createDefaultVpcRouteTable(String projectId, Router router) throws DatabasePersistenceException {\n+        String routeTableId = UUID.randomUUID().toString();\n+        String routeEntryId = UUID.randomUUID().toString();\n+        String owner = router.getOwner();\n+        List<RouteTable> vpcRouteTables = router.getVpcRouteTable();\n+        List<RouteEntry> routeEntities = new ArrayList<>();\n+\n+        // create a VPC routing table and pump-in the VPC default routing rules\n+        RouteEntry routeEntry = new RouteEntry(projectId, routeEntryId, \"default_vpc_routeEntry\", \"\", null, RouteConstant.DEFAULT_TARGET, RouteConstant.DEFAULT_PRIORITY, routeTableId, null);\n+        routeEntities.add(routeEntry);\n+        this.routeEntryDatabaseService.addRouteEntry(routeEntry);\n+\n+        RouteTable routeTable = new RouteTable(projectId, routeTableId, \"default_vpc_routeTable\", \"\", routeEntities, RouteTableType.VPC, owner);\n+        vpcRouteTables.add(routeTable);\n+        this.routeTableDatabaseService.addRouteTable(routeTable);\n+\n+        vpcRouteTables.add(routeTable);\n+        router.setVpcRouteTable(vpcRouteTables);\n+        this.routerDatabaseService.addRouter(router);\n+\n+        return routeTable;\n+    }\n+\n+    @Override\n+    public RouteTable updateVpcRouteTable(String projectId, String vpcId, RouteTableWebJson resource) throws DatabasePersistenceException, CanNotFindVpc, CacheException, ExistMultipleVpcRouter {\n+        RouteTable routeTable = null;\n+        RouteTable inRoutetable = resource.getRoutetable();\n+\n+        // Get or create a router for a Vpc\n+        Router router = getOrCreateVpcRouter(projectId, vpcId);\n+\n+        // check if there is a vpc default routetable\n+        List<RouteTable> vpcRouteTables = router.getVpcRouteTable();\n+        for (RouteTable vpcRouteTable : vpcRouteTables) {\n+            String routeTableType = vpcRouteTable.getRouteTableType().getRouteTableType();\n+            if (RouteTableType.VPC.getRouteTableType().equals(routeTableType)) {\n+                routeTable = vpcRouteTable;\n+                vpcRouteTables.remove(vpcRouteTable);\n+                break;\n+            }\n+        }\n+\n+        if (routeTable == null) {\n+            String routeTableId = inRoutetable.getId();\n+            if (routeTableId == null) {\n+                routeTableId = UUID.randomUUID().toString();\n+                inRoutetable.setId(routeTableId);\n+            }\n+            inRoutetable.setRouteTableType(RouteTableType.VPC);\n+            vpcRouteTables.add(inRoutetable);\n+            router.setVpcRouteTable(vpcRouteTables);\n+            this.routerDatabaseService.addRouter(router);\n+\n+            return inRoutetable;\n+        } else {\n+            List<RouteEntry> routeEntities = routeTable.getRouteEntities();\n+            List<RouteEntry> inRouteEntities = inRoutetable.getRouteEntities();\n+\n+            for (RouteEntry routeEntry : routeEntities) {\n+                if (!inRouteEntities.contains(routeEntry)) {\n+                    // TODO: check if existing rules are currently used by other subnet\u2019s routing table\n+                }\n+            }\n+            routeTable.setRouteEntities(inRouteEntities);\n+            vpcRouteTables.add(routeTable);\n+            router.setVpcRouteTable(vpcRouteTables);\n+            this.routerDatabaseService.addRouter(router);\n+\n+            return routeTable;\n+        }\n+\n+    }\n+\n+    @Override\n+    public List<RouteTable> getVpcRouteTables(String projectId, String vpcId) throws CanNotFindVpc {\n+        VpcWebJson vpcResponse = this.vpcRouterToVpcService.getVpcWebJson(projectId, vpcId);\n+        VpcEntity vpcEntity = vpcResponse.getNetwork();\n+        Router router = vpcEntity.getRouter();", "originalCommit": "3e45fc5f8999e75a07aa82c506079cb276849c1e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTAwOTIyMQ==", "url": "https://github.com/futurewei-cloud/alcor/pull/380#discussion_r489009221", "bodyText": "What is returned here is a List", "author": "kevin-zhonghao", "createdAt": "2020-09-15T22:01:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODAzODIzOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODAzOTE2Mg==", "url": "https://github.com/futurewei-cloud/alcor/pull/380#discussion_r488039162", "bodyText": "I am not quite understand the logic here. Why you return new ArrayList<RouteTable>() when you cannot find router?", "author": "cj-chung", "createdAt": "2020-09-14T15:48:56Z", "path": "services/route_manager/src/main/java/com/futurewei/alcor/route/service/Impl/RouterServiceImpl.java", "diffHunk": "@@ -0,0 +1,316 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.route.service.Impl;\n+\n+import com.futurewei.alcor.common.db.CacheException;\n+import com.futurewei.alcor.common.enumClass.RouteTableType;\n+import com.futurewei.alcor.common.exception.DatabasePersistenceException;\n+import com.futurewei.alcor.common.logging.Logger;\n+import com.futurewei.alcor.common.logging.LoggerFactory;\n+import com.futurewei.alcor.route.entity.RouteConstant;\n+import com.futurewei.alcor.route.exception.*;\n+import com.futurewei.alcor.route.service.*;\n+import com.futurewei.alcor.route.utils.RouteManagerUtil;\n+import com.futurewei.alcor.web.entity.route.*;\n+import com.futurewei.alcor.web.entity.vpc.VpcEntity;\n+import com.futurewei.alcor.web.entity.vpc.VpcWebJson;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+import java.util.*;\n+\n+@Service\n+public class RouterServiceImpl implements RouterService {\n+\n+    private Logger logger = LoggerFactory.getLogger();\n+\n+    @Autowired\n+    private RouterDatabaseService routerDatabaseService;\n+\n+    @Autowired\n+    private VpcRouterToVpcService vpcRouterToVpcService;\n+\n+    @Autowired\n+    private RouteTableDatabaseService routeTableDatabaseService;\n+\n+    @Autowired\n+    private RouteEntryDatabaseService routeEntryDatabaseService;\n+\n+\n+    @Override\n+    public Router getOrCreateVpcRouter(String projectId, String vpcId) throws CanNotFindVpc, DatabasePersistenceException, CacheException, ExistMultipleVpcRouter {\n+        Router router = null;\n+\n+        // If VPC already has a router, return the router state\n+        Map<String, Router> routerMap = null;\n+        Map<String, Object[]> queryParams = new HashMap<>();\n+        Object[] values = new Object[1];\n+        values[0] = vpcId;\n+        queryParams.put(\"owner\", values);\n+\n+        routerMap = this.routerDatabaseService.getAllRouters(queryParams);\n+\n+        if (routerMap == null) {\n+            routerMap = new HashMap<>();\n+        }\n+\n+        if (routerMap.size() > 1) {\n+            throw new ExistMultipleVpcRouter();\n+        } else if (routerMap.size() == 1) {\n+            for (Map.Entry<String, Router> entry : routerMap.entrySet()) {\n+                router = (Router)entry.getValue();\n+                return router;\n+            }\n+        } else {\n+            // get vpc entity to create default route table and route route rule\n+            VpcWebJson vpcResponse = this.vpcRouterToVpcService.getVpcWebJson(projectId, vpcId);\n+            VpcEntity vpcEntity = vpcResponse.getNetwork();\n+\n+\n+            // If VPC doesn\u2019t have a router, create a new router, create a VPC routing table and pump-in the VPC default routing rules\n+            router = createDefaultVpcRouter(projectId, vpcEntity);\n+        }\n+\n+        return router;\n+    }\n+\n+    @Override\n+    public Router createDefaultVpcRouter(String projectId, VpcEntity vpcEntity) throws DatabasePersistenceException {\n+        String routerId = UUID.randomUUID().toString();\n+        String routeTableId = UUID.randomUUID().toString();\n+        String routeEntryId = UUID.randomUUID().toString();\n+        String owner = vpcEntity.getId();\n+        String destination = vpcEntity.getCidr();\n+        List<RouteTable> vpcRouteTables = new ArrayList<>();\n+        List<String> ports = new ArrayList<>();\n+        List<RouteEntry> routeEntities = new ArrayList<>();\n+\n+        // create a VPC routing table and pump-in the VPC default routing rules\n+        RouteEntry routeEntry = new RouteEntry(projectId, routeEntryId, \"default_vpc_routeEntry\", \"\", destination, RouteConstant.DEFAULT_TARGET, RouteConstant.DEFAULT_PRIORITY, routeTableId, null);\n+        routeEntities.add(routeEntry);\n+        this.routeEntryDatabaseService.addRouteEntry(routeEntry);\n+\n+        RouteTable routeTable = new RouteTable(projectId, routeTableId, \"default_vpc_routeTable\", \"\", routeEntities, RouteTableType.VPC, owner);\n+        vpcRouteTables.add(routeTable);\n+        this.routeTableDatabaseService.addRouteTable(routeTable);\n+\n+        Router router = new Router(projectId, routerId, \"default_vpc_router\", \"\",\n+                null, vpcRouteTables, owner, ports, projectId, true, null, null);\n+        this.routerDatabaseService.addRouter(router);\n+\n+        return router;\n+    }\n+\n+    @Override\n+    public String deleteVpcRouter(String projectId, String vpcId) throws Exception {\n+        VpcWebJson vpcResponse = this.vpcRouterToVpcService.getVpcWebJson(projectId, vpcId);\n+        VpcEntity vpcEntity = vpcResponse.getNetwork();\n+        Router router = vpcEntity.getRouter();\n+        if (router == null) {\n+            return null;\n+        }\n+\n+        // check if the VPC router contains subnet routing table\n+        List<RouteTable> vpcRouteTable = router.getVpcRouteTable();\n+        if (vpcRouteTable == null || vpcRouteTable.size() == 0) {\n+            return null;\n+        }\n+        for (RouteTable routeTable : vpcRouteTable) {\n+            String routeTableType = routeTable.getRouteTableType().getRouteTableType();\n+            if (RouteTableType.PRIVATE_SUBNET.getRouteTableType().equals(routeTableType) || RouteTableType.PUBLIC_SUBNET.getRouteTableType().equals(routeTableType)) {\n+                throw new VpcRouterContainsSubnetRoutingTables();\n+            }\n+        }\n+\n+        // delete router and route tables\n+        this.routerDatabaseService.deleteRouter(router.getId());\n+        for (RouteTable routeTable : vpcRouteTable) {\n+            this.routeTableDatabaseService.deleteRouteTable(routeTable.getId());\n+        }\n+\n+        return router.getId();\n+    }\n+\n+    @Override\n+    public RouteTable getOrCreateVpcRouteTable(String projectId, String vpcId) throws DatabasePersistenceException, CanNotFindVpc, CacheException, ExistMultipleVpcRouter {\n+        RouteTable routeTable = null;\n+\n+        // Get or create a router for a Vpc\n+        Router router = getOrCreateVpcRouter(projectId, vpcId);\n+\n+        // If VPC has a VPC routing table, return the routing table\u2019s state\n+        List<RouteTable> vpcRouteTables = router.getVpcRouteTable();\n+        for (RouteTable vpcRouteTable : vpcRouteTables) {\n+            String routeTableType = vpcRouteTable.getRouteTableType().getRouteTableType();\n+            if (RouteTableType.VPC.getRouteTableType().equals(routeTableType)) {\n+                return vpcRouteTable;\n+            }\n+        }\n+\n+        // If VPC doesn\u2019t have a VPC routing table, this operation will create a VPC routing table and pump-in the VPC default routing rules.\n+        routeTable = createDefaultVpcRouteTable(projectId, router);\n+\n+        return routeTable;\n+    }\n+\n+    @Override\n+    public RouteTable createDefaultVpcRouteTable(String projectId, Router router) throws DatabasePersistenceException {\n+        String routeTableId = UUID.randomUUID().toString();\n+        String routeEntryId = UUID.randomUUID().toString();\n+        String owner = router.getOwner();\n+        List<RouteTable> vpcRouteTables = router.getVpcRouteTable();\n+        List<RouteEntry> routeEntities = new ArrayList<>();\n+\n+        // create a VPC routing table and pump-in the VPC default routing rules\n+        RouteEntry routeEntry = new RouteEntry(projectId, routeEntryId, \"default_vpc_routeEntry\", \"\", null, RouteConstant.DEFAULT_TARGET, RouteConstant.DEFAULT_PRIORITY, routeTableId, null);\n+        routeEntities.add(routeEntry);\n+        this.routeEntryDatabaseService.addRouteEntry(routeEntry);\n+\n+        RouteTable routeTable = new RouteTable(projectId, routeTableId, \"default_vpc_routeTable\", \"\", routeEntities, RouteTableType.VPC, owner);\n+        vpcRouteTables.add(routeTable);\n+        this.routeTableDatabaseService.addRouteTable(routeTable);\n+\n+        vpcRouteTables.add(routeTable);\n+        router.setVpcRouteTable(vpcRouteTables);\n+        this.routerDatabaseService.addRouter(router);\n+\n+        return routeTable;\n+    }\n+\n+    @Override\n+    public RouteTable updateVpcRouteTable(String projectId, String vpcId, RouteTableWebJson resource) throws DatabasePersistenceException, CanNotFindVpc, CacheException, ExistMultipleVpcRouter {\n+        RouteTable routeTable = null;\n+        RouteTable inRoutetable = resource.getRoutetable();\n+\n+        // Get or create a router for a Vpc\n+        Router router = getOrCreateVpcRouter(projectId, vpcId);\n+\n+        // check if there is a vpc default routetable\n+        List<RouteTable> vpcRouteTables = router.getVpcRouteTable();\n+        for (RouteTable vpcRouteTable : vpcRouteTables) {\n+            String routeTableType = vpcRouteTable.getRouteTableType().getRouteTableType();\n+            if (RouteTableType.VPC.getRouteTableType().equals(routeTableType)) {\n+                routeTable = vpcRouteTable;\n+                vpcRouteTables.remove(vpcRouteTable);\n+                break;\n+            }\n+        }\n+\n+        if (routeTable == null) {\n+            String routeTableId = inRoutetable.getId();\n+            if (routeTableId == null) {\n+                routeTableId = UUID.randomUUID().toString();\n+                inRoutetable.setId(routeTableId);\n+            }\n+            inRoutetable.setRouteTableType(RouteTableType.VPC);\n+            vpcRouteTables.add(inRoutetable);\n+            router.setVpcRouteTable(vpcRouteTables);\n+            this.routerDatabaseService.addRouter(router);\n+\n+            return inRoutetable;\n+        } else {\n+            List<RouteEntry> routeEntities = routeTable.getRouteEntities();\n+            List<RouteEntry> inRouteEntities = inRoutetable.getRouteEntities();\n+\n+            for (RouteEntry routeEntry : routeEntities) {\n+                if (!inRouteEntities.contains(routeEntry)) {\n+                    // TODO: check if existing rules are currently used by other subnet\u2019s routing table\n+                }\n+            }\n+            routeTable.setRouteEntities(inRouteEntities);\n+            vpcRouteTables.add(routeTable);\n+            router.setVpcRouteTable(vpcRouteTables);\n+            this.routerDatabaseService.addRouter(router);\n+\n+            return routeTable;\n+        }\n+\n+    }\n+\n+    @Override\n+    public List<RouteTable> getVpcRouteTables(String projectId, String vpcId) throws CanNotFindVpc {\n+        VpcWebJson vpcResponse = this.vpcRouterToVpcService.getVpcWebJson(projectId, vpcId);\n+        VpcEntity vpcEntity = vpcResponse.getNetwork();\n+        Router router = vpcEntity.getRouter();\n+        if (router == null) {\n+            return new ArrayList<RouteTable>();\n+        }\n+        return router.getVpcRouteTable();\n+    }", "originalCommit": "3e45fc5f8999e75a07aa82c506079cb276849c1e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTAxMDk3OA==", "url": "https://github.com/futurewei-cloud/alcor/pull/380#discussion_r489010978", "bodyText": "I changed here return null, is it correct?", "author": "kevin-zhonghao", "createdAt": "2020-09-15T22:04:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODAzOTE2Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODA0NDI3OQ==", "url": "https://github.com/futurewei-cloud/alcor/pull/380#discussion_r488044279", "bodyText": "We may need to change this API's name. Each subnet has a default routing table which is the VPC default route table. If user change it for a subnet, the subnet will create its own route table. Therefore, here we just need to return the current subnet's route table. If the subnet doesn't have a route table which means it uses VPC default route table, we just return VPC's default route table. If the subnet contains its own route table, then we just return its current route table.", "author": "cj-chung", "createdAt": "2020-09-14T15:56:16Z", "path": "services/route_manager/src/main/java/com/futurewei/alcor/route/service/Impl/RouterServiceImpl.java", "diffHunk": "@@ -0,0 +1,316 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.route.service.Impl;\n+\n+import com.futurewei.alcor.common.db.CacheException;\n+import com.futurewei.alcor.common.enumClass.RouteTableType;\n+import com.futurewei.alcor.common.exception.DatabasePersistenceException;\n+import com.futurewei.alcor.common.logging.Logger;\n+import com.futurewei.alcor.common.logging.LoggerFactory;\n+import com.futurewei.alcor.route.entity.RouteConstant;\n+import com.futurewei.alcor.route.exception.*;\n+import com.futurewei.alcor.route.service.*;\n+import com.futurewei.alcor.route.utils.RouteManagerUtil;\n+import com.futurewei.alcor.web.entity.route.*;\n+import com.futurewei.alcor.web.entity.vpc.VpcEntity;\n+import com.futurewei.alcor.web.entity.vpc.VpcWebJson;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+import java.util.*;\n+\n+@Service\n+public class RouterServiceImpl implements RouterService {\n+\n+    private Logger logger = LoggerFactory.getLogger();\n+\n+    @Autowired\n+    private RouterDatabaseService routerDatabaseService;\n+\n+    @Autowired\n+    private VpcRouterToVpcService vpcRouterToVpcService;\n+\n+    @Autowired\n+    private RouteTableDatabaseService routeTableDatabaseService;\n+\n+    @Autowired\n+    private RouteEntryDatabaseService routeEntryDatabaseService;\n+\n+\n+    @Override\n+    public Router getOrCreateVpcRouter(String projectId, String vpcId) throws CanNotFindVpc, DatabasePersistenceException, CacheException, ExistMultipleVpcRouter {\n+        Router router = null;\n+\n+        // If VPC already has a router, return the router state\n+        Map<String, Router> routerMap = null;\n+        Map<String, Object[]> queryParams = new HashMap<>();\n+        Object[] values = new Object[1];\n+        values[0] = vpcId;\n+        queryParams.put(\"owner\", values);\n+\n+        routerMap = this.routerDatabaseService.getAllRouters(queryParams);\n+\n+        if (routerMap == null) {\n+            routerMap = new HashMap<>();\n+        }\n+\n+        if (routerMap.size() > 1) {\n+            throw new ExistMultipleVpcRouter();\n+        } else if (routerMap.size() == 1) {\n+            for (Map.Entry<String, Router> entry : routerMap.entrySet()) {\n+                router = (Router)entry.getValue();\n+                return router;\n+            }\n+        } else {\n+            // get vpc entity to create default route table and route route rule\n+            VpcWebJson vpcResponse = this.vpcRouterToVpcService.getVpcWebJson(projectId, vpcId);\n+            VpcEntity vpcEntity = vpcResponse.getNetwork();\n+\n+\n+            // If VPC doesn\u2019t have a router, create a new router, create a VPC routing table and pump-in the VPC default routing rules\n+            router = createDefaultVpcRouter(projectId, vpcEntity);\n+        }\n+\n+        return router;\n+    }\n+\n+    @Override\n+    public Router createDefaultVpcRouter(String projectId, VpcEntity vpcEntity) throws DatabasePersistenceException {\n+        String routerId = UUID.randomUUID().toString();\n+        String routeTableId = UUID.randomUUID().toString();\n+        String routeEntryId = UUID.randomUUID().toString();\n+        String owner = vpcEntity.getId();\n+        String destination = vpcEntity.getCidr();\n+        List<RouteTable> vpcRouteTables = new ArrayList<>();\n+        List<String> ports = new ArrayList<>();\n+        List<RouteEntry> routeEntities = new ArrayList<>();\n+\n+        // create a VPC routing table and pump-in the VPC default routing rules\n+        RouteEntry routeEntry = new RouteEntry(projectId, routeEntryId, \"default_vpc_routeEntry\", \"\", destination, RouteConstant.DEFAULT_TARGET, RouteConstant.DEFAULT_PRIORITY, routeTableId, null);\n+        routeEntities.add(routeEntry);\n+        this.routeEntryDatabaseService.addRouteEntry(routeEntry);\n+\n+        RouteTable routeTable = new RouteTable(projectId, routeTableId, \"default_vpc_routeTable\", \"\", routeEntities, RouteTableType.VPC, owner);\n+        vpcRouteTables.add(routeTable);\n+        this.routeTableDatabaseService.addRouteTable(routeTable);\n+\n+        Router router = new Router(projectId, routerId, \"default_vpc_router\", \"\",\n+                null, vpcRouteTables, owner, ports, projectId, true, null, null);\n+        this.routerDatabaseService.addRouter(router);\n+\n+        return router;\n+    }\n+\n+    @Override\n+    public String deleteVpcRouter(String projectId, String vpcId) throws Exception {\n+        VpcWebJson vpcResponse = this.vpcRouterToVpcService.getVpcWebJson(projectId, vpcId);\n+        VpcEntity vpcEntity = vpcResponse.getNetwork();\n+        Router router = vpcEntity.getRouter();\n+        if (router == null) {\n+            return null;\n+        }\n+\n+        // check if the VPC router contains subnet routing table\n+        List<RouteTable> vpcRouteTable = router.getVpcRouteTable();\n+        if (vpcRouteTable == null || vpcRouteTable.size() == 0) {\n+            return null;\n+        }\n+        for (RouteTable routeTable : vpcRouteTable) {\n+            String routeTableType = routeTable.getRouteTableType().getRouteTableType();\n+            if (RouteTableType.PRIVATE_SUBNET.getRouteTableType().equals(routeTableType) || RouteTableType.PUBLIC_SUBNET.getRouteTableType().equals(routeTableType)) {\n+                throw new VpcRouterContainsSubnetRoutingTables();\n+            }\n+        }\n+\n+        // delete router and route tables\n+        this.routerDatabaseService.deleteRouter(router.getId());\n+        for (RouteTable routeTable : vpcRouteTable) {\n+            this.routeTableDatabaseService.deleteRouteTable(routeTable.getId());\n+        }\n+\n+        return router.getId();\n+    }\n+\n+    @Override\n+    public RouteTable getOrCreateVpcRouteTable(String projectId, String vpcId) throws DatabasePersistenceException, CanNotFindVpc, CacheException, ExistMultipleVpcRouter {\n+        RouteTable routeTable = null;\n+\n+        // Get or create a router for a Vpc\n+        Router router = getOrCreateVpcRouter(projectId, vpcId);\n+\n+        // If VPC has a VPC routing table, return the routing table\u2019s state\n+        List<RouteTable> vpcRouteTables = router.getVpcRouteTable();\n+        for (RouteTable vpcRouteTable : vpcRouteTables) {\n+            String routeTableType = vpcRouteTable.getRouteTableType().getRouteTableType();\n+            if (RouteTableType.VPC.getRouteTableType().equals(routeTableType)) {\n+                return vpcRouteTable;\n+            }\n+        }\n+\n+        // If VPC doesn\u2019t have a VPC routing table, this operation will create a VPC routing table and pump-in the VPC default routing rules.\n+        routeTable = createDefaultVpcRouteTable(projectId, router);\n+\n+        return routeTable;\n+    }\n+\n+    @Override\n+    public RouteTable createDefaultVpcRouteTable(String projectId, Router router) throws DatabasePersistenceException {\n+        String routeTableId = UUID.randomUUID().toString();\n+        String routeEntryId = UUID.randomUUID().toString();\n+        String owner = router.getOwner();\n+        List<RouteTable> vpcRouteTables = router.getVpcRouteTable();\n+        List<RouteEntry> routeEntities = new ArrayList<>();\n+\n+        // create a VPC routing table and pump-in the VPC default routing rules\n+        RouteEntry routeEntry = new RouteEntry(projectId, routeEntryId, \"default_vpc_routeEntry\", \"\", null, RouteConstant.DEFAULT_TARGET, RouteConstant.DEFAULT_PRIORITY, routeTableId, null);\n+        routeEntities.add(routeEntry);\n+        this.routeEntryDatabaseService.addRouteEntry(routeEntry);\n+\n+        RouteTable routeTable = new RouteTable(projectId, routeTableId, \"default_vpc_routeTable\", \"\", routeEntities, RouteTableType.VPC, owner);\n+        vpcRouteTables.add(routeTable);\n+        this.routeTableDatabaseService.addRouteTable(routeTable);\n+\n+        vpcRouteTables.add(routeTable);\n+        router.setVpcRouteTable(vpcRouteTables);\n+        this.routerDatabaseService.addRouter(router);\n+\n+        return routeTable;\n+    }\n+\n+    @Override\n+    public RouteTable updateVpcRouteTable(String projectId, String vpcId, RouteTableWebJson resource) throws DatabasePersistenceException, CanNotFindVpc, CacheException, ExistMultipleVpcRouter {\n+        RouteTable routeTable = null;\n+        RouteTable inRoutetable = resource.getRoutetable();\n+\n+        // Get or create a router for a Vpc\n+        Router router = getOrCreateVpcRouter(projectId, vpcId);\n+\n+        // check if there is a vpc default routetable\n+        List<RouteTable> vpcRouteTables = router.getVpcRouteTable();\n+        for (RouteTable vpcRouteTable : vpcRouteTables) {\n+            String routeTableType = vpcRouteTable.getRouteTableType().getRouteTableType();\n+            if (RouteTableType.VPC.getRouteTableType().equals(routeTableType)) {\n+                routeTable = vpcRouteTable;\n+                vpcRouteTables.remove(vpcRouteTable);\n+                break;\n+            }\n+        }\n+\n+        if (routeTable == null) {\n+            String routeTableId = inRoutetable.getId();\n+            if (routeTableId == null) {\n+                routeTableId = UUID.randomUUID().toString();\n+                inRoutetable.setId(routeTableId);\n+            }\n+            inRoutetable.setRouteTableType(RouteTableType.VPC);\n+            vpcRouteTables.add(inRoutetable);\n+            router.setVpcRouteTable(vpcRouteTables);\n+            this.routerDatabaseService.addRouter(router);\n+\n+            return inRoutetable;\n+        } else {\n+            List<RouteEntry> routeEntities = routeTable.getRouteEntities();\n+            List<RouteEntry> inRouteEntities = inRoutetable.getRouteEntities();\n+\n+            for (RouteEntry routeEntry : routeEntities) {\n+                if (!inRouteEntities.contains(routeEntry)) {\n+                    // TODO: check if existing rules are currently used by other subnet\u2019s routing table\n+                }\n+            }\n+            routeTable.setRouteEntities(inRouteEntities);\n+            vpcRouteTables.add(routeTable);\n+            router.setVpcRouteTable(vpcRouteTables);\n+            this.routerDatabaseService.addRouter(router);\n+\n+            return routeTable;\n+        }\n+\n+    }\n+\n+    @Override\n+    public List<RouteTable> getVpcRouteTables(String projectId, String vpcId) throws CanNotFindVpc {\n+        VpcWebJson vpcResponse = this.vpcRouterToVpcService.getVpcWebJson(projectId, vpcId);\n+        VpcEntity vpcEntity = vpcResponse.getNetwork();\n+        Router router = vpcEntity.getRouter();\n+        if (router == null) {\n+            return new ArrayList<RouteTable>();\n+        }\n+        return router.getVpcRouteTable();\n+    }\n+\n+    @Override\n+    public RouteTable getOrCreateSubnetRouteTable(String projectId, String subnetId) throws CacheException, ExistMultipleSubnetRouteTable, DatabasePersistenceException {\n+        RouteTable routeTable = null;", "originalCommit": "3e45fc5f8999e75a07aa82c506079cb276849c1e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODA0NTc2NQ==", "url": "https://github.com/futurewei-cloud/alcor/pull/380#discussion_r488045765", "bodyText": "So, just change getOrCreateSubnetRouteTable to getSubnetRouteTable. This API can also apply to Neutron router, since Neutron is explicitly create subnet route table, so just return what it has in the subnet.", "author": "cj-chung", "createdAt": "2020-09-14T15:58:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODA0NDI3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTA1MTcxMw==", "url": "https://github.com/futurewei-cloud/alcor/pull/380#discussion_r489051713", "bodyText": "NP", "author": "kevin-zhonghao", "createdAt": "2020-09-15T22:56:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODA0NDI3OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODA1MDQ0OQ==", "url": "https://github.com/futurewei-cloud/alcor/pull/380#discussion_r488050449", "bodyText": "If we follow the logic and comments I gave before, we should able to get the subnet's routing table with subnet_id and update its routing rules. If the subnet doesn't have its own route table, that's mean it currently uses VPC's default route table. Then we just create a new route table for it and push routing rules it has into the route table.", "author": "cj-chung", "createdAt": "2020-09-14T16:05:36Z", "path": "services/route_manager/src/main/java/com/futurewei/alcor/route/service/Impl/RouterServiceImpl.java", "diffHunk": "@@ -0,0 +1,316 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.route.service.Impl;\n+\n+import com.futurewei.alcor.common.db.CacheException;\n+import com.futurewei.alcor.common.enumClass.RouteTableType;\n+import com.futurewei.alcor.common.exception.DatabasePersistenceException;\n+import com.futurewei.alcor.common.logging.Logger;\n+import com.futurewei.alcor.common.logging.LoggerFactory;\n+import com.futurewei.alcor.route.entity.RouteConstant;\n+import com.futurewei.alcor.route.exception.*;\n+import com.futurewei.alcor.route.service.*;\n+import com.futurewei.alcor.route.utils.RouteManagerUtil;\n+import com.futurewei.alcor.web.entity.route.*;\n+import com.futurewei.alcor.web.entity.vpc.VpcEntity;\n+import com.futurewei.alcor.web.entity.vpc.VpcWebJson;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+import java.util.*;\n+\n+@Service\n+public class RouterServiceImpl implements RouterService {\n+\n+    private Logger logger = LoggerFactory.getLogger();\n+\n+    @Autowired\n+    private RouterDatabaseService routerDatabaseService;\n+\n+    @Autowired\n+    private VpcRouterToVpcService vpcRouterToVpcService;\n+\n+    @Autowired\n+    private RouteTableDatabaseService routeTableDatabaseService;\n+\n+    @Autowired\n+    private RouteEntryDatabaseService routeEntryDatabaseService;\n+\n+\n+    @Override\n+    public Router getOrCreateVpcRouter(String projectId, String vpcId) throws CanNotFindVpc, DatabasePersistenceException, CacheException, ExistMultipleVpcRouter {\n+        Router router = null;\n+\n+        // If VPC already has a router, return the router state\n+        Map<String, Router> routerMap = null;\n+        Map<String, Object[]> queryParams = new HashMap<>();\n+        Object[] values = new Object[1];\n+        values[0] = vpcId;\n+        queryParams.put(\"owner\", values);\n+\n+        routerMap = this.routerDatabaseService.getAllRouters(queryParams);\n+\n+        if (routerMap == null) {\n+            routerMap = new HashMap<>();\n+        }\n+\n+        if (routerMap.size() > 1) {\n+            throw new ExistMultipleVpcRouter();\n+        } else if (routerMap.size() == 1) {\n+            for (Map.Entry<String, Router> entry : routerMap.entrySet()) {\n+                router = (Router)entry.getValue();\n+                return router;\n+            }\n+        } else {\n+            // get vpc entity to create default route table and route route rule\n+            VpcWebJson vpcResponse = this.vpcRouterToVpcService.getVpcWebJson(projectId, vpcId);\n+            VpcEntity vpcEntity = vpcResponse.getNetwork();\n+\n+\n+            // If VPC doesn\u2019t have a router, create a new router, create a VPC routing table and pump-in the VPC default routing rules\n+            router = createDefaultVpcRouter(projectId, vpcEntity);\n+        }\n+\n+        return router;\n+    }\n+\n+    @Override\n+    public Router createDefaultVpcRouter(String projectId, VpcEntity vpcEntity) throws DatabasePersistenceException {\n+        String routerId = UUID.randomUUID().toString();\n+        String routeTableId = UUID.randomUUID().toString();\n+        String routeEntryId = UUID.randomUUID().toString();\n+        String owner = vpcEntity.getId();\n+        String destination = vpcEntity.getCidr();\n+        List<RouteTable> vpcRouteTables = new ArrayList<>();\n+        List<String> ports = new ArrayList<>();\n+        List<RouteEntry> routeEntities = new ArrayList<>();\n+\n+        // create a VPC routing table and pump-in the VPC default routing rules\n+        RouteEntry routeEntry = new RouteEntry(projectId, routeEntryId, \"default_vpc_routeEntry\", \"\", destination, RouteConstant.DEFAULT_TARGET, RouteConstant.DEFAULT_PRIORITY, routeTableId, null);\n+        routeEntities.add(routeEntry);\n+        this.routeEntryDatabaseService.addRouteEntry(routeEntry);\n+\n+        RouteTable routeTable = new RouteTable(projectId, routeTableId, \"default_vpc_routeTable\", \"\", routeEntities, RouteTableType.VPC, owner);\n+        vpcRouteTables.add(routeTable);\n+        this.routeTableDatabaseService.addRouteTable(routeTable);\n+\n+        Router router = new Router(projectId, routerId, \"default_vpc_router\", \"\",\n+                null, vpcRouteTables, owner, ports, projectId, true, null, null);\n+        this.routerDatabaseService.addRouter(router);\n+\n+        return router;\n+    }\n+\n+    @Override\n+    public String deleteVpcRouter(String projectId, String vpcId) throws Exception {\n+        VpcWebJson vpcResponse = this.vpcRouterToVpcService.getVpcWebJson(projectId, vpcId);\n+        VpcEntity vpcEntity = vpcResponse.getNetwork();\n+        Router router = vpcEntity.getRouter();\n+        if (router == null) {\n+            return null;\n+        }\n+\n+        // check if the VPC router contains subnet routing table\n+        List<RouteTable> vpcRouteTable = router.getVpcRouteTable();\n+        if (vpcRouteTable == null || vpcRouteTable.size() == 0) {\n+            return null;\n+        }\n+        for (RouteTable routeTable : vpcRouteTable) {\n+            String routeTableType = routeTable.getRouteTableType().getRouteTableType();\n+            if (RouteTableType.PRIVATE_SUBNET.getRouteTableType().equals(routeTableType) || RouteTableType.PUBLIC_SUBNET.getRouteTableType().equals(routeTableType)) {\n+                throw new VpcRouterContainsSubnetRoutingTables();\n+            }\n+        }\n+\n+        // delete router and route tables\n+        this.routerDatabaseService.deleteRouter(router.getId());\n+        for (RouteTable routeTable : vpcRouteTable) {\n+            this.routeTableDatabaseService.deleteRouteTable(routeTable.getId());\n+        }\n+\n+        return router.getId();\n+    }\n+\n+    @Override\n+    public RouteTable getOrCreateVpcRouteTable(String projectId, String vpcId) throws DatabasePersistenceException, CanNotFindVpc, CacheException, ExistMultipleVpcRouter {\n+        RouteTable routeTable = null;\n+\n+        // Get or create a router for a Vpc\n+        Router router = getOrCreateVpcRouter(projectId, vpcId);\n+\n+        // If VPC has a VPC routing table, return the routing table\u2019s state\n+        List<RouteTable> vpcRouteTables = router.getVpcRouteTable();\n+        for (RouteTable vpcRouteTable : vpcRouteTables) {\n+            String routeTableType = vpcRouteTable.getRouteTableType().getRouteTableType();\n+            if (RouteTableType.VPC.getRouteTableType().equals(routeTableType)) {\n+                return vpcRouteTable;\n+            }\n+        }\n+\n+        // If VPC doesn\u2019t have a VPC routing table, this operation will create a VPC routing table and pump-in the VPC default routing rules.\n+        routeTable = createDefaultVpcRouteTable(projectId, router);\n+\n+        return routeTable;\n+    }\n+\n+    @Override\n+    public RouteTable createDefaultVpcRouteTable(String projectId, Router router) throws DatabasePersistenceException {\n+        String routeTableId = UUID.randomUUID().toString();\n+        String routeEntryId = UUID.randomUUID().toString();\n+        String owner = router.getOwner();\n+        List<RouteTable> vpcRouteTables = router.getVpcRouteTable();\n+        List<RouteEntry> routeEntities = new ArrayList<>();\n+\n+        // create a VPC routing table and pump-in the VPC default routing rules\n+        RouteEntry routeEntry = new RouteEntry(projectId, routeEntryId, \"default_vpc_routeEntry\", \"\", null, RouteConstant.DEFAULT_TARGET, RouteConstant.DEFAULT_PRIORITY, routeTableId, null);\n+        routeEntities.add(routeEntry);\n+        this.routeEntryDatabaseService.addRouteEntry(routeEntry);\n+\n+        RouteTable routeTable = new RouteTable(projectId, routeTableId, \"default_vpc_routeTable\", \"\", routeEntities, RouteTableType.VPC, owner);\n+        vpcRouteTables.add(routeTable);\n+        this.routeTableDatabaseService.addRouteTable(routeTable);\n+\n+        vpcRouteTables.add(routeTable);\n+        router.setVpcRouteTable(vpcRouteTables);\n+        this.routerDatabaseService.addRouter(router);\n+\n+        return routeTable;\n+    }\n+\n+    @Override\n+    public RouteTable updateVpcRouteTable(String projectId, String vpcId, RouteTableWebJson resource) throws DatabasePersistenceException, CanNotFindVpc, CacheException, ExistMultipleVpcRouter {\n+        RouteTable routeTable = null;\n+        RouteTable inRoutetable = resource.getRoutetable();\n+\n+        // Get or create a router for a Vpc\n+        Router router = getOrCreateVpcRouter(projectId, vpcId);\n+\n+        // check if there is a vpc default routetable\n+        List<RouteTable> vpcRouteTables = router.getVpcRouteTable();\n+        for (RouteTable vpcRouteTable : vpcRouteTables) {\n+            String routeTableType = vpcRouteTable.getRouteTableType().getRouteTableType();\n+            if (RouteTableType.VPC.getRouteTableType().equals(routeTableType)) {\n+                routeTable = vpcRouteTable;\n+                vpcRouteTables.remove(vpcRouteTable);\n+                break;\n+            }\n+        }\n+\n+        if (routeTable == null) {\n+            String routeTableId = inRoutetable.getId();\n+            if (routeTableId == null) {\n+                routeTableId = UUID.randomUUID().toString();\n+                inRoutetable.setId(routeTableId);\n+            }\n+            inRoutetable.setRouteTableType(RouteTableType.VPC);\n+            vpcRouteTables.add(inRoutetable);\n+            router.setVpcRouteTable(vpcRouteTables);\n+            this.routerDatabaseService.addRouter(router);\n+\n+            return inRoutetable;\n+        } else {\n+            List<RouteEntry> routeEntities = routeTable.getRouteEntities();\n+            List<RouteEntry> inRouteEntities = inRoutetable.getRouteEntities();\n+\n+            for (RouteEntry routeEntry : routeEntities) {\n+                if (!inRouteEntities.contains(routeEntry)) {\n+                    // TODO: check if existing rules are currently used by other subnet\u2019s routing table\n+                }\n+            }\n+            routeTable.setRouteEntities(inRouteEntities);\n+            vpcRouteTables.add(routeTable);\n+            router.setVpcRouteTable(vpcRouteTables);\n+            this.routerDatabaseService.addRouter(router);\n+\n+            return routeTable;\n+        }\n+\n+    }\n+\n+    @Override\n+    public List<RouteTable> getVpcRouteTables(String projectId, String vpcId) throws CanNotFindVpc {\n+        VpcWebJson vpcResponse = this.vpcRouterToVpcService.getVpcWebJson(projectId, vpcId);\n+        VpcEntity vpcEntity = vpcResponse.getNetwork();\n+        Router router = vpcEntity.getRouter();\n+        if (router == null) {\n+            return new ArrayList<RouteTable>();\n+        }\n+        return router.getVpcRouteTable();\n+    }\n+\n+    @Override\n+    public RouteTable getOrCreateSubnetRouteTable(String projectId, String subnetId) throws CacheException, ExistMultipleSubnetRouteTable, DatabasePersistenceException {\n+        RouteTable routeTable = null;\n+\n+        Map<String, RouteTable> routeTableMap = null;\n+        Map<String, Object[]> queryParams = new HashMap<>();\n+        Object[] values = new Object[1];\n+        values[0] = subnetId;\n+        queryParams.put(\"owner\", values);\n+\n+        routeTableMap = this.routeTableDatabaseService.getAllRouteTables(queryParams);\n+        if (routeTableMap == null) {\n+            routeTableMap = new HashMap<>();\n+        }\n+\n+        if (routeTableMap.size() == 0) {\n+            // TODO: call subnet API to create Subnet route table and route rule\n+            return routeTable;\n+        } else if (routeTableMap.size() > 1) {\n+            throw new ExistMultipleSubnetRouteTable();\n+        } else {\n+            for (Map.Entry<String, RouteTable> entry : routeTableMap.entrySet()) {\n+                routeTable = (RouteTable)entry.getValue();\n+            }\n+        }\n+\n+        return routeTable;\n+    }\n+\n+    @Override\n+    public RouteTable updateSubnetRouteTable(String projectId, String subnetId, RouteTableWebJson resource) throws CacheException, DatabasePersistenceException, ExistMultipleSubnetRouteTable {\n+        RouteTable routeTable = new RouteTable();\n+        RouteTable inRoutetable = resource.getRoutetable();\n+        // Get or create a router for a Subnet\n+        routeTable = getOrCreateSubnetRouteTable(projectId, subnetId);", "originalCommit": "3e45fc5f8999e75a07aa82c506079cb276849c1e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "312577a97406227d0249d5dd39243c5b6bd7641d", "url": "https://github.com/futurewei-cloud/alcor/commit/312577a97406227d0249d5dd39243c5b6bd7641d", "message": "UTs", "committedDate": "2020-09-14T23:44:31Z", "type": "commit"}, {"oid": "a347ef2edb5cf16d08d418cde180cc4ca93f2e65", "url": "https://github.com/futurewei-cloud/alcor/commit/a347ef2edb5cf16d08d418cde180cc4ca93f2e65", "message": "update", "committedDate": "2020-09-15T00:26:52Z", "type": "commit"}, {"oid": "7974891151457130261f97dc5276396d3781147e", "url": "https://github.com/futurewei-cloud/alcor/commit/7974891151457130261f97dc5276396d3781147e", "message": "update", "committedDate": "2020-09-16T00:21:50Z", "type": "commit"}, {"oid": "a5d875c684447222305e91e92ec5779dcdf179a6", "url": "https://github.com/futurewei-cloud/alcor/commit/a5d875c684447222305e91e92ec5779dcdf179a6", "message": "update", "committedDate": "2020-09-17T23:44:06Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI3MTU4MQ==", "url": "https://github.com/futurewei-cloud/alcor/pull/380#discussion_r492271581", "bodyText": "@kevin-zhonghao @cj-chung We might want to describe each enum value a bit more, either in the code or in the design doc.", "author": "xieus", "createdAt": "2020-09-21T18:44:25Z", "path": "lib/src/main/java/com/futurewei/alcor/common/enumClass/RouteTableType.java", "diffHunk": "@@ -20,7 +20,8 @@\n     PUBLIC_SUBNET(\"public_subnet\"),\n     PRIVATE_SUBNET(\"private_subnet\"),\n     VPC(\"vpc\"),\n-    NEUTRON(\"neutron\");\n+    NEUTRON_ROUTER(\"neutron_router\"),", "originalCommit": "a5d875c684447222305e91e92ec5779dcdf179a6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjM3NDU1NQ==", "url": "https://github.com/futurewei-cloud/alcor/pull/380#discussion_r492374555", "bodyText": "Agree", "author": "kevin-zhonghao", "createdAt": "2020-09-21T22:10:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI3MTU4MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI3NDczNQ==", "url": "https://github.com/futurewei-cloud/alcor/pull/380#discussion_r492274735", "bodyText": "ExistingMutlipleSubnetRouteTable\n=>OwnMultipleSubnetRouteTablesException\n\"exist multiple subnet routetable searched by subnet id\"\n=> \"There exist multiple subnet route tables for the same subnet id\"", "author": "xieus", "createdAt": "2020-09-21T18:50:08Z", "path": "services/route_manager/src/main/java/com/futurewei/alcor/route/exception/ExistMultipleSubnetRouteTable.java", "diffHunk": "@@ -0,0 +1,23 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.route.exception;\n+\n+import org.springframework.http.HttpStatus;\n+import org.springframework.web.bind.annotation.ResponseStatus;\n+\n+@ResponseStatus(code= HttpStatus.INTERNAL_SERVER_ERROR, reason=\"exist multiple subnet routetable searched by subnet id\")", "originalCommit": "a5d875c684447222305e91e92ec5779dcdf179a6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjM3NTA5Nw==", "url": "https://github.com/futurewei-cloud/alcor/pull/380#discussion_r492375097", "bodyText": "Agree", "author": "kevin-zhonghao", "createdAt": "2020-09-21T22:11:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI3NDczNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI3NTE0Ng==", "url": "https://github.com/futurewei-cloud/alcor/pull/380#discussion_r492275146", "bodyText": "Please update class name and description based on the comment above.", "author": "xieus", "createdAt": "2020-09-21T18:50:54Z", "path": "services/route_manager/src/main/java/com/futurewei/alcor/route/exception/ExistMultipleVpcRouter.java", "diffHunk": "@@ -0,0 +1,23 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.route.exception;\n+\n+import org.springframework.http.HttpStatus;\n+import org.springframework.web.bind.annotation.ResponseStatus;\n+\n+@ResponseStatus(code= HttpStatus.INTERNAL_SERVER_ERROR, reason=\"exist multiple vpc router searched by vpc id\")\n+public class ExistMultipleVpcRouter extends Exception {", "originalCommit": "a5d875c684447222305e91e92ec5779dcdf179a6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjM3NTIxNA==", "url": "https://github.com/futurewei-cloud/alcor/pull/380#discussion_r492375214", "bodyText": "NP", "author": "kevin-zhonghao", "createdAt": "2020-09-21T22:12:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI3NTE0Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI3NjAzOQ==", "url": "https://github.com/futurewei-cloud/alcor/pull/380#discussion_r492276039", "bodyText": "VpcContainsSubnet => VpcNonEmptyException\n\"there are some subnets exist in the VPC. We cannot delete VPC router and VPC default routing table.\"\n=> VPC router and route tables can't be deleted as the associated VPC contains subnets", "author": "xieus", "createdAt": "2020-09-21T18:52:28Z", "path": "services/route_manager/src/main/java/com/futurewei/alcor/route/exception/VpcContainsSubnet.java", "diffHunk": "@@ -0,0 +1,23 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.route.exception;\n+\n+import org.springframework.http.HttpStatus;\n+import org.springframework.web.bind.annotation.ResponseStatus;\n+\n+@ResponseStatus(code= HttpStatus.CONFLICT, reason=\"there are some subnets exist in the VPC. We cannot delete VPC router and VPC default routing table.\")\n+public class VpcContainsSubnet extends Exception{\n+}", "originalCommit": "a5d875c684447222305e91e92ec5779dcdf179a6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjM3NjAyMg==", "url": "https://github.com/futurewei-cloud/alcor/pull/380#discussion_r492376022", "bodyText": "Agree", "author": "kevin-zhonghao", "createdAt": "2020-09-21T22:13:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI3NjAzOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI3Njg2MQ==", "url": "https://github.com/futurewei-cloud/alcor/pull/380#discussion_r492276861", "bodyText": "Why do we need getRouteTableType()", "author": "xieus", "createdAt": "2020-09-21T18:54:07Z", "path": "services/route_manager/src/main/java/com/futurewei/alcor/route/service/Impl/NeutronRouterServiceImpl.java", "diffHunk": "@@ -98,7 +98,7 @@ public NeutronRouterWebRequestObject saveRouterAndRouterExtraAttribute(NeutronRo\n             String routeTableId = UUID.randomUUID().toString();\n             routeTable.setId(routeTableId);\n             routeTable.setRouteEntities(routeEntities);\n-            routeTable.setRouteTableType(RouteTableType.NEUTRON);\n+            routeTable.setRouteTableType(RouteTableType.NEUTRON_ROUTER.getRouteTableType());", "originalCommit": "a5d875c684447222305e91e92ec5779dcdf179a6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjM3NjUxMw==", "url": "https://github.com/futurewei-cloud/alcor/pull/380#discussion_r492376513", "bodyText": "Because I changed the RouteTableType field class type", "author": "kevin-zhonghao", "createdAt": "2020-09-21T22:15:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI3Njg2MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI3NzEzMQ==", "url": "https://github.com/futurewei-cloud/alcor/pull/380#discussion_r492277131", "bodyText": "Should stick to RouteTableType.", "author": "xieus", "createdAt": "2020-09-21T18:54:36Z", "path": "services/route_manager/src/main/java/com/futurewei/alcor/route/service/Impl/NeutronRouterServiceImpl.java", "diffHunk": "@@ -444,11 +444,11 @@ public ConnectedSubnetsWebResponse getConnectedSubnets(String projectId, String\n         if (routeTable == null) {\n             return null;\n         }\n-        RouteTableType routeTableType = routeTable.getRouteTableType();\n+        String routeTableType = routeTable.getRouteTableType();", "originalCommit": "a5d875c684447222305e91e92ec5779dcdf179a6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI3NzQ5Mw==", "url": "https://github.com/futurewei-cloud/alcor/pull/380#discussion_r492277493", "bodyText": "Enum can do comparison easier. No need to convert it to String.", "author": "xieus", "createdAt": "2020-09-21T18:55:12Z", "path": "services/route_manager/src/main/java/com/futurewei/alcor/route/service/Impl/NeutronRouterServiceImpl.java", "diffHunk": "@@ -444,11 +444,11 @@ public ConnectedSubnetsWebResponse getConnectedSubnets(String projectId, String\n         if (routeTable == null) {\n             return null;\n         }\n-        RouteTableType routeTableType = routeTable.getRouteTableType();\n+        String routeTableType = routeTable.getRouteTableType();\n \n         if (routeTableType == null) {\n             return null;\n-        } else if(routeTableType.getRouteTableType().equals(\"neutron\")){\n+        } else if(routeTableType.equals(\"neutron\")){", "originalCommit": "a5d875c684447222305e91e92ec5779dcdf179a6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI3Nzg1Mw==", "url": "https://github.com/futurewei-cloud/alcor/pull/380#discussion_r492277853", "bodyText": "Remove if usused.", "author": "xieus", "createdAt": "2020-09-21T18:55:48Z", "path": "services/route_manager/src/main/java/com/futurewei/alcor/route/service/Impl/RouterServiceImpl.java", "diffHunk": "@@ -0,0 +1,326 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.route.service.Impl;\n+\n+import com.futurewei.alcor.common.db.CacheException;\n+import com.futurewei.alcor.common.enumClass.RouteTableType;\n+import com.futurewei.alcor.common.enumClass.VpcRouteTarget;\n+import com.futurewei.alcor.common.exception.DatabasePersistenceException;\n+import com.futurewei.alcor.common.exception.ResourceNotFoundException;\n+import com.futurewei.alcor.common.exception.ResourcePersistenceException;\n+import com.futurewei.alcor.common.logging.Logger;\n+import com.futurewei.alcor.common.logging.LoggerFactory;\n+import com.futurewei.alcor.route.entity.RouteConstant;\n+import com.futurewei.alcor.route.exception.*;\n+import com.futurewei.alcor.route.service.*;\n+import com.futurewei.alcor.route.utils.RouteManagerUtil;\n+import com.futurewei.alcor.web.entity.route.*;\n+import com.futurewei.alcor.web.entity.subnet.SubnetEntity;\n+import com.futurewei.alcor.web.entity.subnet.SubnetWebJson;\n+import com.futurewei.alcor.web.entity.subnet.SubnetsWebJson;\n+import com.futurewei.alcor.web.entity.vpc.VpcEntity;\n+import com.futurewei.alcor.web.entity.vpc.VpcWebJson;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+import java.util.*;\n+\n+@Service\n+public class RouterServiceImpl implements RouterService {\n+\n+    private Logger logger = LoggerFactory.getLogger();\n+\n+    @Autowired\n+    private RouterDatabaseService routerDatabaseService;\n+\n+    @Autowired\n+    private VpcRouterToVpcService vpcRouterToVpcService;\n+\n+    @Autowired\n+    private VpcRouterToSubnetService vpcRouterToSubnetService;\n+\n+    @Autowired\n+    private RouteTableDatabaseService routeTableDatabaseService;\n+\n+    @Autowired\n+    private RouteEntryDatabaseService routeEntryDatabaseService;\n+\n+\n+    @Override\n+    public Router getOrCreateVpcRouter(String projectId, String vpcId) throws CanNotFindVpc, DatabasePersistenceException, CacheException, ExistMultipleVpcRouter {\n+        Router router = null;\n+\n+        // If VPC already has a router, return the router state\n+        Map<String, Router> routerMap = null;\n+        Map<String, Object[]> queryParams = new HashMap<>();\n+        Object[] values = new Object[1];\n+        values[0] = vpcId;\n+        queryParams.put(\"owner\", values);\n+\n+        routerMap = this.routerDatabaseService.getAllRouters(queryParams);\n+\n+        if (routerMap == null) {\n+            routerMap = new HashMap<>();\n+        }\n+\n+        if (routerMap.size() > 1) {\n+            throw new ExistMultipleVpcRouter();\n+        } else if (routerMap.size() == 1) {\n+            for (Map.Entry<String, Router> entry : routerMap.entrySet()) {\n+                router = (Router)entry.getValue();\n+                return router;\n+            }\n+        } else {\n+            // get vpc entity to create default route table and route route rule\n+            VpcWebJson vpcResponse = this.vpcRouterToVpcService.getVpcWebJson(projectId, vpcId);\n+            VpcEntity vpcEntity = vpcResponse.getNetwork();\n+\n+\n+            // If VPC doesn\u2019t have a router, create a new router, create a VPC routing table and pump-in the VPC default routing rules\n+            router = createDefaultVpcRouter(projectId, vpcEntity);\n+        }\n+\n+        return router;\n+    }\n+\n+    @Override\n+    public Router createDefaultVpcRouter(String projectId, VpcEntity vpcEntity) throws DatabasePersistenceException {\n+        String routerId = UUID.randomUUID().toString();\n+        String routeTableId = UUID.randomUUID().toString();\n+        String routeEntryId = UUID.randomUUID().toString();\n+        String owner = vpcEntity.getId();\n+        String destination = vpcEntity.getCidr();\n+        List<RouteTable> vpcRouteTables = new ArrayList<>();\n+        List<String> ports = new ArrayList<>();\n+        List<RouteEntry> routeEntities = new ArrayList<>();\n+\n+        // create a VPC routing table and pump-in the VPC default routing rules\n+        RouteEntry routeEntry = new RouteEntry(projectId, routeEntryId, \"default_vpc_routeEntry\", \"\", destination, VpcRouteTarget.LOCAL.getVpcRouteTarget(), RouteConstant.DEFAULT_PRIORITY, routeTableId, null);\n+        routeEntities.add(routeEntry);\n+        this.routeEntryDatabaseService.addRouteEntry(routeEntry);\n+\n+        RouteTable routeTable = new RouteTable(projectId, routeTableId, \"default_vpc_routeTable\", \"\", routeEntities, RouteTableType.VPC.getRouteTableType(), owner);\n+        vpcRouteTables.add(routeTable);\n+        this.routeTableDatabaseService.addRouteTable(routeTable);\n+\n+        Router router = new Router(projectId, routerId, \"default_vpc_router\", \"\",\n+                null, vpcRouteTables, \"VPC:\" + owner, ports, projectId, true, null, null, routeTableId);\n+        this.routerDatabaseService.addRouter(router);\n+\n+        return router;\n+    }\n+\n+    @Override\n+    public String deleteVpcRouter(String projectId, String vpcId) throws Exception {\n+        Router router = getOrCreateVpcRouter(projectId, vpcId);\n+        if (router == null) {\n+            return null;\n+        }\n+\n+        // check if there is any subnet exists in the VPC\n+        List<RouteTable> vpcRouteTable = router.getVpcRouteTable();\n+        SubnetsWebJson subnetsWebJson = this.vpcRouterToSubnetService.getSubnetsByVpcId(projectId, vpcId);\n+        if (subnetsWebJson != null) {\n+            ArrayList<SubnetEntity> subnets = subnetsWebJson.getSubnets();\n+            if (subnets != null && subnets.size() > 0) {\n+                throw new VpcContainsSubnet();\n+            }\n+        }\n+\n+        // delete router and route tables\n+        this.routerDatabaseService.deleteRouter(router.getId());\n+        for (RouteTable routeTable : vpcRouteTable) {\n+            String routeTableType = routeTable.getRouteTableType();\n+            if (RouteTableType.VPC.getRouteTableType().equals(routeTableType)) {\n+                this.routeTableDatabaseService.deleteRouteTable(routeTable.getId());\n+            }\n+        }\n+\n+        return router.getId();\n+    }\n+\n+    @Override\n+    public RouteTable getOrCreateVpcRouteTable(String projectId, String vpcId) throws DatabasePersistenceException, CanNotFindVpc, CacheException, ExistMultipleVpcRouter {\n+        RouteTable routeTable = null;\n+\n+        // Get or create a router for a Vpc\n+        Router router = getOrCreateVpcRouter(projectId, vpcId);\n+\n+        // If VPC has a VPC routing table, return the routing table\u2019s state\n+        List<RouteTable> vpcRouteTables = router.getVpcRouteTable();\n+        for (RouteTable vpcRouteTable : vpcRouteTables) {\n+            String routeTableType = vpcRouteTable.getRouteTableType();\n+            if (RouteTableType.VPC.getRouteTableType().equals(routeTableType)) {\n+                return vpcRouteTable;\n+            }\n+        }\n+\n+        // If VPC doesn\u2019t have a VPC routing table, this operation will create a VPC routing table and pump-in the VPC default routing rules.\n+        routeTable = createDefaultVpcRouteTable(projectId, router);\n+\n+        return routeTable;\n+    }\n+\n+    @Override\n+    public RouteTable createDefaultVpcRouteTable(String projectId, Router router) throws DatabasePersistenceException {\n+        String routeTableId = UUID.randomUUID().toString();\n+        String routeEntryId = UUID.randomUUID().toString();\n+        String owner = router.getOwner();\n+        List<RouteTable> vpcRouteTables = router.getVpcRouteTable();\n+        List<RouteEntry> routeEntities = new ArrayList<>();\n+\n+        // create a VPC routing table and pump-in the VPC default routing rules\n+        RouteEntry routeEntry = new RouteEntry(projectId, routeEntryId, \"default_vpc_routeEntry\", \"\", null, VpcRouteTarget.LOCAL.getVpcRouteTarget(), RouteConstant.DEFAULT_PRIORITY, routeTableId, null);\n+        routeEntities.add(routeEntry);\n+        this.routeEntryDatabaseService.addRouteEntry(routeEntry);\n+\n+        RouteTable routeTable = new RouteTable(projectId, routeTableId, \"default_vpc_routeTable\", \"\", routeEntities, RouteTableType.VPC.getRouteTableType(), owner);\n+        vpcRouteTables.add(routeTable);\n+        this.routeTableDatabaseService.addRouteTable(routeTable);\n+\n+        vpcRouteTables.add(routeTable);\n+        router.setVpcRouteTable(vpcRouteTables);\n+        this.routerDatabaseService.addRouter(router);\n+\n+        return routeTable;\n+    }\n+\n+    @Override\n+    public RouteTable updateVpcRouteTable(String projectId, String vpcId, RouteTableWebJson resource) throws DatabasePersistenceException, CanNotFindVpc, CacheException, ExistMultipleVpcRouter, ResourceNotFoundException, ResourcePersistenceException {\n+        RouteTable routeTable = null;\n+        RouteTable inRoutetable = resource.getRoutetable();\n+\n+        // Get or create a router for a Vpc\n+        Router router = getOrCreateVpcRouter(projectId, vpcId);\n+\n+        // check if there is a vpc default routetable\n+        List<RouteTable> vpcRouteTables = router.getVpcRouteTable();\n+//        for (RouteTable vpcRouteTable : vpcRouteTables) {\n+//            String routeTableType = vpcRouteTable.getRouteTableType();\n+//            if (RouteTableType.VPC.getRouteTableType().equals(routeTableType)) {\n+//                routeTable = vpcRouteTable;\n+//                vpcRouteTables.remove(vpcRouteTable);\n+//                break;\n+//            }\n+//        }", "originalCommit": "a5d875c684447222305e91e92ec5779dcdf179a6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjM3NjcxOQ==", "url": "https://github.com/futurewei-cloud/alcor/pull/380#discussion_r492376719", "bodyText": "Sure", "author": "kevin-zhonghao", "createdAt": "2020-09-21T22:15:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI3Nzg1Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI3ODY1NQ==", "url": "https://github.com/futurewei-cloud/alcor/pull/380#discussion_r492278655", "bodyText": "Same. Should get rid of getRouteTableType() here.", "author": "xieus", "createdAt": "2020-09-21T18:57:19Z", "path": "services/route_manager/src/test/java/com/futurewei/alcor/route/NeutronRouterTests.java", "diffHunk": "@@ -542,7 +542,7 @@ public void removeRoutesToNeutronRouter_RouterOrSubnetAndPortNotExistOrNotVisibl\n     public void getConnectedSubnets_pass () throws Exception {\n         Mockito.when(routerDatabaseService.getByRouterId(UnitTestConfig.routerId))\n                 .thenReturn(new Router(){{setId(UnitTestConfig.routerId);setPorts(new ArrayList<>());\n-                    setNeutronRouteTable(new RouteTable(){{setRouteEntities(new ArrayList<>());setRouteTableType(RouteTableType.NEUTRON);}});}});\n+                    setNeutronRouteTable(new RouteTable(){{setRouteEntities(new ArrayList<>());setRouteTableType(RouteTableType.NEUTRON_ROUTER.getRouteTableType());}});}});", "originalCommit": "a5d875c684447222305e91e92ec5779dcdf179a6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI3OTEzMA==", "url": "https://github.com/futurewei-cloud/alcor/pull/380#discussion_r492279130", "bodyText": "Keep RouteTableType if possible.", "author": "xieus", "createdAt": "2020-09-21T18:58:10Z", "path": "web/src/main/java/com/futurewei/alcor/web/entity/route/RouteTable.java", "diffHunk": "@@ -29,15 +29,15 @@\n     private List<RouteEntry> routeEntities;\n \n     @JsonProperty(\"route_table_type\")\n-    private RouteTableType routeTableType;\n+    private String routeTableType;", "originalCommit": "a5d875c684447222305e91e92ec5779dcdf179a6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjM3NDIwMQ==", "url": "https://github.com/futurewei-cloud/alcor/pull/380#discussion_r492374201", "bodyText": "If I keep RouteTableType, it is difficult to mock requestBody in UTs", "author": "kevin-zhonghao", "createdAt": "2020-09-21T22:09:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI3OTEzMA=="}], "type": "inlineReview"}, {"oid": "a9970dce53cd52e47aa0f7c80c3fe62ef196652d", "url": "https://github.com/futurewei-cloud/alcor/commit/a9970dce53cd52e47aa0f7c80c3fe62ef196652d", "message": "update", "committedDate": "2020-09-21T22:12:06Z", "type": "commit"}, {"oid": "d745b478545745a95b502158cf07d0037b3cf241", "url": "https://github.com/futurewei-cloud/alcor/commit/d745b478545745a95b502158cf07d0037b3cf241", "message": "Update design documents and table of content", "committedDate": "2019-10-01T01:24:32Z", "type": "commit"}, {"oid": "1fc253ec962a7f0b4e60d095009ceecadf7dab77", "url": "https://github.com/futurewei-cloud/alcor/commit/1fc253ec962a7f0b4e60d095009ceecadf7dab77", "message": "Update README.md", "committedDate": "2019-10-02T08:28:06Z", "type": "commit"}, {"oid": "9b0efb64a961e93b07ce9413ea7ddecc360703d6", "url": "https://github.com/futurewei-cloud/alcor/commit/9b0efb64a961e93b07ce9413ea7ddecc360703d6", "message": "Add cloud-native key word", "committedDate": "2019-10-02T09:03:47Z", "type": "commit"}, {"oid": "db0a6990b01f2715002377cf551095253f16ca50", "url": "https://github.com/futurewei-cloud/alcor/commit/db0a6990b01f2715002377cf551095253f16ca50", "message": "Merge branch 'docs/design' of https://github.com/futurewei-cloud/AliothController into docs/design", "committedDate": "2019-10-02T17:09:04Z", "type": "commit"}, {"oid": "424dd5b140784fa974e7cc61766a005ffa720a9a", "url": "https://github.com/futurewei-cloud/alcor/commit/424dd5b140784fa974e7cc61766a005ffa720a9a", "message": "Start docs for comm and controller", "committedDate": "2019-10-02T17:12:00Z", "type": "commit"}, {"oid": "b41edb9be73f2ab9f6a19ce4ca10e85b07281aee", "url": "https://github.com/futurewei-cloud/alcor/commit/b41edb9be73f2ab9f6a19ce4ca10e85b07281aee", "message": "Add design sketch", "committedDate": "2019-10-08T18:54:10Z", "type": "commit"}, {"oid": "3e54c578a01355d6286175bb87a7612df1f37b93", "url": "https://github.com/futurewei-cloud/alcor/commit/3e54c578a01355d6286175bb87a7612df1f37b93", "message": "Design spec round 1", "committedDate": "2019-10-19T18:09:59Z", "type": "commit"}, {"oid": "d7d8ad9a143d2622e54d45d3523ea18b9496f6fe", "url": "https://github.com/futurewei-cloud/alcor/commit/d7d8ad9a143d2622e54d45d3523ea18b9496f6fe", "message": "Rename fast path file and start feature comparison", "committedDate": "2019-10-20T18:52:59Z", "type": "commit"}, {"oid": "4c6588e9cddbc1340254665fff874e495159c58d", "url": "https://github.com/futurewei-cloud/alcor/commit/4c6588e9cddbc1340254665fff874e495159c58d", "message": "Update rescue path doc [DRAFT]", "committedDate": "2019-10-24T01:08:42Z", "type": "commit"}, {"oid": "cceaa68d2838fcbac5b2bd2d0737fd01e432d3fa", "url": "https://github.com/futurewei-cloud/alcor/commit/cceaa68d2838fcbac5b2bd2d0737fd01e432d3fa", "message": "upload rescue_path.GIF", "committedDate": "2019-10-24T01:12:52Z", "type": "commit"}, {"oid": "978565619e33c5cc44a406fdc7d361f67eb46c7c", "url": "https://github.com/futurewei-cloud/alcor/commit/978565619e33c5cc44a406fdc7d361f67eb46c7c", "message": "update rescue path needed change table", "committedDate": "2019-10-24T01:18:15Z", "type": "commit"}, {"oid": "3e2b63ef9dbdab9de7b3879732430d7400ea1325", "url": "https://github.com/futurewei-cloud/alcor/commit/3e2b63ef9dbdab9de7b3879732430d7400ea1325", "message": "rescue_path.GIF", "committedDate": "2019-10-25T16:51:22Z", "type": "commit"}, {"oid": "f8fc472b93a1c5211f1d821fb6c4518d2a93e226", "url": "https://github.com/futurewei-cloud/alcor/commit/f8fc472b93a1c5211f1d821fb6c4518d2a93e226", "message": "rescue_path.adoc", "committedDate": "2019-10-25T21:48:30Z", "type": "commit"}, {"oid": "2480dd186fdac3ea59d1663439bc126aec67758e", "url": "https://github.com/futurewei-cloud/alcor/commit/2480dd186fdac3ea59d1663439bc126aec67758e", "message": "Design spec round 2", "committedDate": "2019-10-25T22:14:01Z", "type": "commit"}, {"oid": "68eda0bf67ff271cb833fc12b19655abed2739e8", "url": "https://github.com/futurewei-cloud/alcor/commit/68eda0bf67ff271cb833fc12b19655abed2739e8", "message": "Monitoring design outline", "committedDate": "2019-10-26T06:08:35Z", "type": "commit"}, {"oid": "c1c9cc7bccfaf86cb118c291ad375dfe5afe7d2f", "url": "https://github.com/futurewei-cloud/alcor/commit/c1c9cc7bccfaf86cb118c291ad375dfe5afe7d2f", "message": "Update comm docs", "committedDate": "2019-10-26T06:29:57Z", "type": "commit"}, {"oid": "79e91fef8cd18e945ff737d61c661fe0870b3387", "url": "https://github.com/futurewei-cloud/alcor/commit/79e91fef8cd18e945ff737d61c661fe0870b3387", "message": "Update data storage design", "committedDate": "2019-10-26T19:12:06Z", "type": "commit"}, {"oid": "ca69892a7e60866df3f8b21ef783681ebcc8b0d5", "url": "https://github.com/futurewei-cloud/alcor/commit/ca69892a7e60866df3f8b21ef783681ebcc8b0d5", "message": "Merge branch 'docs/design' of https://github.com/futurewei-cloud/AliothController into docs/design", "committedDate": "2019-10-26T19:12:18Z", "type": "commit"}, {"oid": "8b154ab0b4f4ba863aa65c0718b0fe2c345d7c2d", "url": "https://github.com/futurewei-cloud/alcor/commit/8b154ab0b4f4ba863aa65c0718b0fe2c345d7c2d", "message": "Update data store", "committedDate": "2019-10-28T15:55:14Z", "type": "commit"}, {"oid": "4561d1eb71805b1db4d0240f7c2a2b9dfd48181b", "url": "https://github.com/futurewei-cloud/alcor/commit/4561d1eb71805b1db4d0240f7c2a2b9dfd48181b", "message": "Complete review of existing dbs", "committedDate": "2019-10-29T00:10:31Z", "type": "commit"}, {"oid": "ca4610e5a5431d989e0f76d57fbe77c4d9427c60", "url": "https://github.com/futurewei-cloud/alcor/commit/ca4610e5a5431d989e0f76d57fbe77c4d9427c60", "message": "Update review table", "committedDate": "2019-10-29T00:12:52Z", "type": "commit"}, {"oid": "24b4a365811ffd398134f09a4f4320f242c4c09e", "url": "https://github.com/futurewei-cloud/alcor/commit/24b4a365811ffd398134f09a4f4320f242c4c09e", "message": "Adjust table column width", "committedDate": "2019-10-29T00:19:56Z", "type": "commit"}, {"oid": "45774dafcd131273a3ba9cfac8e8e9bb911252b4", "url": "https://github.com/futurewei-cloud/alcor/commit/45774dafcd131273a3ba9cfac8e8e9bb911252b4", "message": "Update feature comparsion table", "committedDate": "2019-10-29T15:09:20Z", "type": "commit"}, {"oid": "18e500c5f9e3d6702299f534ac9e609eb59c033d", "url": "https://github.com/futurewei-cloud/alcor/commit/18e500c5f9e3d6702299f534ac9e609eb59c033d", "message": "Finalize review section in data store", "committedDate": "2019-10-29T23:04:43Z", "type": "commit"}, {"oid": "cc99d1454b188d516a309fa19783d20285f0f8d5", "url": "https://github.com/futurewei-cloud/alcor/commit/cc99d1454b188d516a309fa19783d20285f0f8d5", "message": "Add design diagram", "committedDate": "2019-10-30T18:42:14Z", "type": "commit"}, {"oid": "a9c82327fa2cc2a20e8a9595e9ed0535de7eb8ec", "url": "https://github.com/futurewei-cloud/alcor/commit/a9c82327fa2cc2a20e8a9595e9ed0535de7eb8ec", "message": "Add a design diagram", "committedDate": "2019-10-30T19:49:41Z", "type": "commit"}, {"oid": "2823921cbf3c75cb048163beec45672807e55ee4", "url": "https://github.com/futurewei-cloud/alcor/commit/2823921cbf3c75cb048163beec45672807e55ee4", "message": "Add files via upload", "committedDate": "2019-10-30T21:29:45Z", "type": "commit"}, {"oid": "47b7e452f0f946671211a775713d97717f99e848", "url": "https://github.com/futurewei-cloud/alcor/commit/47b7e452f0f946671211a775713d97717f99e848", "message": "fix \"design\" session level", "committedDate": "2019-10-30T21:43:08Z", "type": "commit"}, {"oid": "8c9c004d8af7eff0aba83732bd57617faa1f8321", "url": "https://github.com/futurewei-cloud/alcor/commit/8c9c004d8af7eff0aba83732bd57617faa1f8321", "message": "Update monitoring.adoc", "committedDate": "2019-10-30T21:45:22Z", "type": "commit"}, {"oid": "41804505b2625ccdb789e0e4f2251beca0506327", "url": "https://github.com/futurewei-cloud/alcor/commit/41804505b2625ccdb789e0e4f2251beca0506327", "message": "Update monitoring.adoc", "committedDate": "2019-10-30T22:51:18Z", "type": "commit"}, {"oid": "dc3958943753c8e6e86f31268f1c45534077e5b8", "url": "https://github.com/futurewei-cloud/alcor/commit/dc3958943753c8e6e86f31268f1c45534077e5b8", "message": "Add architectural design discussion", "committedDate": "2019-10-30T23:51:12Z", "type": "commit"}, {"oid": "847900e5b28fc711f2317fc48da2bcbbb5d4cd00", "url": "https://github.com/futurewei-cloud/alcor/commit/847900e5b28fc711f2317fc48da2bcbbb5d4cd00", "message": "Merge branch 'docs/design' of https://github.com/futurewei-cloud/AliothController into docs/design", "committedDate": "2019-10-30T23:51:43Z", "type": "commit"}, {"oid": "088feffee3e81b3c21122b3c8893d047517424b7", "url": "https://github.com/futurewei-cloud/alcor/commit/088feffee3e81b3c21122b3c8893d047517424b7", "message": "Update architecture image link", "committedDate": "2019-10-31T00:57:48Z", "type": "commit"}, {"oid": "a16e184d3e255452012a3519fd08b33489b3778b", "url": "https://github.com/futurewei-cloud/alcor/commit/a16e184d3e255452012a3519fd08b33489b3778b", "message": "Finalize storage design", "committedDate": "2019-10-31T07:43:22Z", "type": "commit"}, {"oid": "041b203e62657ec985bbeabff6f2f5657adc8be0", "url": "https://github.com/futurewei-cloud/alcor/commit/041b203e62657ec985bbeabff6f2f5657adc8be0", "message": "Update a few subtitles", "committedDate": "2019-10-31T07:52:06Z", "type": "commit"}, {"oid": "359463e72ac61fbafd75bfd46d07c45adce1a8d0", "url": "https://github.com/futurewei-cloud/alcor/commit/359463e72ac61fbafd75bfd46d07c45adce1a8d0", "message": "Minor grammar fixes", "committedDate": "2019-10-31T08:42:54Z", "type": "commit"}, {"oid": "5d178e49281143f6c1c7f5cfafb260e304457582", "url": "https://github.com/futurewei-cloud/alcor/commit/5d178e49281143f6c1c7f5cfafb260e304457582", "message": "Add controller architecture diagram", "committedDate": "2019-11-02T07:56:02Z", "type": "commit"}, {"oid": "ca474b040686d3a4acf5cad99f400a801c10b656", "url": "https://github.com/futurewei-cloud/alcor/commit/ca474b040686d3a4acf5cad99f400a801c10b656", "message": "Update node_monitoring.adoc", "committedDate": "2019-11-04T18:04:46Z", "type": "commit"}, {"oid": "35a4ce354775cc1807ab93b3f1124c6fb72ed046", "url": "https://github.com/futurewei-cloud/alcor/commit/35a4ce354775cc1807ab93b3f1124c6fb72ed046", "message": "Update monitoring.adoc", "committedDate": "2019-11-04T18:07:22Z", "type": "commit"}, {"oid": "4b97cfe3d18e9fcf8b92155d570f1e93f0ede3ff", "url": "https://github.com/futurewei-cloud/alcor/commit/4b97cfe3d18e9fcf8b92155d570f1e93f0ede3ff", "message": "Update monitoring.adoc", "committedDate": "2019-11-04T19:44:47Z", "type": "commit"}, {"oid": "0df003abc20ac49c23db3acc4bcf7f3a973aaecd", "url": "https://github.com/futurewei-cloud/alcor/commit/0df003abc20ac49c23db3acc4bcf7f3a973aaecd", "message": "Update node_monitoring.adoc", "committedDate": "2019-11-04T19:49:40Z", "type": "commit"}, {"oid": "72916af2b9100eddce5fcca3b16b28a13b8d7349", "url": "https://github.com/futurewei-cloud/alcor/commit/72916af2b9100eddce5fcca3b16b28a13b8d7349", "message": "Update monitoring.adoc", "committedDate": "2019-11-04T22:59:12Z", "type": "commit"}, {"oid": "db7c3ee998a6afad91c270345c1985e114155174", "url": "https://github.com/futurewei-cloud/alcor/commit/db7c3ee998a6afad91c270345c1985e114155174", "message": "Minor fixes for adoc file", "committedDate": "2019-11-05T00:08:12Z", "type": "commit"}, {"oid": "ed033951d5ec12a24ab39e525f7a9d691677d245", "url": "https://github.com/futurewei-cloud/alcor/commit/ed033951d5ec12a24ab39e525f7a9d691677d245", "message": "Update monitoring.adoc", "committedDate": "2019-11-05T00:15:22Z", "type": "commit"}, {"oid": "6e9944d6ee27dc6697ce20136ba38aeb5b60e906", "url": "https://github.com/futurewei-cloud/alcor/commit/6e9944d6ee27dc6697ce20136ba38aeb5b60e906", "message": "Fix references in monitoring doc", "committedDate": "2019-11-05T00:15:46Z", "type": "commit"}, {"oid": "c0723c03ce042bb0f57ba6d6be8010b1af598c65", "url": "https://github.com/futurewei-cloud/alcor/commit/c0723c03ce042bb0f57ba6d6be8010b1af598c65", "message": "Merge branch 'docs/design' of https://github.com/futurewei-cloud/AliothController into docs/design", "committedDate": "2019-11-05T00:18:42Z", "type": "commit"}, {"oid": "9a41b55283e85b9d465da904b9be0bf7f7510a76", "url": "https://github.com/futurewei-cloud/alcor/commit/9a41b55283e85b9d465da904b9be0bf7f7510a76", "message": "Update monitoring.adoc", "committedDate": "2019-11-05T00:29:25Z", "type": "commit"}, {"oid": "24dddf8e4ee519195b9613641ffdfd48e2e8907a", "url": "https://github.com/futurewei-cloud/alcor/commit/24dddf8e4ee519195b9613641ffdfd48e2e8907a", "message": "Update monitoring.adoc", "committedDate": "2019-11-05T00:31:24Z", "type": "commit"}, {"oid": "daf7f5560fa0706e89988f74cd8226f2e51c22a5", "url": "https://github.com/futurewei-cloud/alcor/commit/daf7f5560fa0706e89988f74cd8226f2e51c22a5", "message": "Add details based on disucssion", "committedDate": "2019-11-05T01:23:53Z", "type": "commit"}, {"oid": "f4bae19a9c4806d1e72f769ff401b33012c4aa34", "url": "https://github.com/futurewei-cloud/alcor/commit/f4bae19a9c4806d1e72f769ff401b33012c4aa34", "message": "Add a table of content", "committedDate": "2019-11-05T01:25:55Z", "type": "commit"}, {"oid": "f20d71f62700f3929a890487c7c084518406afa0", "url": "https://github.com/futurewei-cloud/alcor/commit/f20d71f62700f3929a890487c7c084518406afa0", "message": "Update monitoring.adoc", "committedDate": "2019-11-05T06:50:08Z", "type": "commit"}, {"oid": "a7530359c97a15750cb4fa1e7858947fc9a195b2", "url": "https://github.com/futurewei-cloud/alcor/commit/a7530359c97a15750cb4fa1e7858947fc9a195b2", "message": "Update node_monitoring.adoc", "committedDate": "2019-11-05T07:04:49Z", "type": "commit"}, {"oid": "691d65869fd7e84c1528b998752f530c4ce2bbec", "url": "https://github.com/futurewei-cloud/alcor/commit/691d65869fd7e84c1528b998752f530c4ce2bbec", "message": "Update monitoring.adoc", "committedDate": "2019-11-05T07:05:16Z", "type": "commit"}, {"oid": "310b51d6b4320737319b30cd7e96d1e281751773", "url": "https://github.com/futurewei-cloud/alcor/commit/310b51d6b4320737319b30cd7e96d1e281751773", "message": "Add one item for node monitoring", "committedDate": "2019-11-05T18:26:50Z", "type": "commit"}, {"oid": "b414287a5ffe83ac0f6cf9ee1bf9bc9bd2afc12b", "url": "https://github.com/futurewei-cloud/alcor/commit/b414287a5ffe83ac0f6cf9ee1bf9bc9bd2afc12b", "message": "Update node_monitoring.adoc", "committedDate": "2019-11-05T23:57:28Z", "type": "commit"}, {"oid": "5c8c86e628111807ff930b6c37f1e559edebfe0f", "url": "https://github.com/futurewei-cloud/alcor/commit/5c8c86e628111807ff930b6c37f1e559edebfe0f", "message": "Reorganize monitoring doc and update design doc metadata format", "committedDate": "2019-11-06T18:28:45Z", "type": "commit"}, {"oid": "1d0606e9cbae9151dfb7469822dd5c6ec79b583d", "url": "https://github.com/futurewei-cloud/alcor/commit/1d0606e9cbae9151dfb7469822dd5c6ec79b583d", "message": "Update rescue_path.adoc\n\nfix typos", "committedDate": "2019-11-08T21:39:14Z", "type": "commit"}, {"oid": "a632e484bf6456678dfcc3b6c748418e8dfaad1b", "url": "https://github.com/futurewei-cloud/alcor/commit/a632e484bf6456678dfcc3b6c748418e8dfaad1b", "message": "Add benchmark results", "committedDate": "2019-11-12T20:14:15Z", "type": "commit"}, {"oid": "fd3762db077af5568e8617f59ef2a3dd1037ea97", "url": "https://github.com/futurewei-cloud/alcor/commit/fd3762db077af5568e8617f59ef2a3dd1037ea97", "message": "Update rescue_path.adoc", "committedDate": "2019-11-20T23:54:43Z", "type": "commit"}, {"oid": "769f5455c972becaa2e30a64fc963ba8ff1546a0", "url": "https://github.com/futurewei-cloud/alcor/commit/769f5455c972becaa2e30a64fc963ba8ff1546a0", "message": "Update monitoring.adoc", "committedDate": "2019-11-21T00:12:54Z", "type": "commit"}, {"oid": "de441c39e008cea205bf1a1a2cb7953d37adc199", "url": "https://github.com/futurewei-cloud/alcor/commit/de441c39e008cea205bf1a1a2cb7953d37adc199", "message": "Update data model doc", "committedDate": "2020-02-05T16:16:14Z", "type": "commit"}, {"oid": "eebe7005176ddd004434e6aa6ea06d2a8e905de8", "url": "https://github.com/futurewei-cloud/alcor/commit/eebe7005176ddd004434e6aa6ea06d2a8e905de8", "message": "Merge from master", "committedDate": "2020-02-24T02:10:42Z", "type": "commit"}, {"oid": "4cbd99aebede3473651a64ee84853ce7ba335ca3", "url": "https://github.com/futurewei-cloud/alcor/commit/4cbd99aebede3473651a64ee84853ce7ba335ca3", "message": "Add API workflow chart for creation of vpc, subnet and port", "committedDate": "2020-02-27T01:27:40Z", "type": "commit"}, {"oid": "46215bfe3d2d6cd78a74c906a030d32d80872c59", "url": "https://github.com/futurewei-cloud/alcor/commit/46215bfe3d2d6cd78a74c906a030d32d80872c59", "message": "Update Create workflow chart", "committedDate": "2020-02-27T17:04:37Z", "type": "commit"}, {"oid": "9b1fbecd2ce9a70db1dc26a52a19e368047bb7c4", "url": "https://github.com/futurewei-cloud/alcor/commit/9b1fbecd2ce9a70db1dc26a52a19e368047bb7c4", "message": "Create dataplane_abstraction.adoc", "committedDate": "2020-03-02T06:26:41Z", "type": "commit"}, {"oid": "62ad9f4c76d8b28d8cb1863b8c48e165c7de8717", "url": "https://github.com/futurewei-cloud/alcor/commit/62ad9f4c76d8b28d8cb1863b8c48e165c7de8717", "message": "Update dataplane_abstraction.adoc", "committedDate": "2020-03-02T07:19:43Z", "type": "commit"}, {"oid": "9e52e6c93e3c51da6ea1d37d7ae1804939009612", "url": "https://github.com/futurewei-cloud/alcor/commit/9e52e6c93e3c51da6ea1d37d7ae1804939009612", "message": "Update dataplane_abstraction.adoc", "committedDate": "2020-03-02T17:26:39Z", "type": "commit"}, {"oid": "6b7975e7dde2edd461a6563f3bd60458b38ea5f8", "url": "https://github.com/futurewei-cloud/alcor/commit/6b7975e7dde2edd461a6563f3bd60458b38ea5f8", "message": "Update dataplane_abstraction.adoc", "committedDate": "2020-03-02T17:46:46Z", "type": "commit"}, {"oid": "ea356aeeafdd9576716558be137dac5f3df786b9", "url": "https://github.com/futurewei-cloud/alcor/commit/ea356aeeafdd9576716558be137dac5f3df786b9", "message": "Update dataplane_abstraction.adoc", "committedDate": "2020-03-02T20:18:03Z", "type": "commit"}, {"oid": "b9c563aedaa600f04d21c3dbce0b3a7c4814cba3", "url": "https://github.com/futurewei-cloud/alcor/commit/b9c563aedaa600f04d21c3dbce0b3a7c4814cba3", "message": "Update dataplane_abstraction.adoc", "committedDate": "2020-03-02T23:16:05Z", "type": "commit"}, {"oid": "6c071a0569c8ac30813e224a8ae5521f0b98e206", "url": "https://github.com/futurewei-cloud/alcor/commit/6c071a0569c8ac30813e224a8ae5521f0b98e206", "message": "Update dataplane_abstraction.adoc", "committedDate": "2020-03-10T00:00:32Z", "type": "commit"}, {"oid": "972869504ed928c8eda1d139f7e1d680dde454fb", "url": "https://github.com/futurewei-cloud/alcor/commit/972869504ed928c8eda1d139f7e1d680dde454fb", "message": "Update dataplane_abstraction.adoc", "committedDate": "2020-03-10T00:04:48Z", "type": "commit"}, {"oid": "a915d5b743e134e4b17f168f5cdcf19fd509e2c3", "url": "https://github.com/futurewei-cloud/alcor/commit/a915d5b743e134e4b17f168f5cdcf19fd509e2c3", "message": "Add workflow option 2", "committedDate": "2020-03-12T16:54:46Z", "type": "commit"}, {"oid": "ad49c7cda0dcbb01fda95cd5123068801582814d", "url": "https://github.com/futurewei-cloud/alcor/commit/ad49c7cda0dcbb01fda95cd5123068801582814d", "message": "Update system_flow.adoc", "committedDate": "2020-03-18T22:32:04Z", "type": "commit"}, {"oid": "c93da513f629a51a66fbe89298eba6e94d063901", "url": "https://github.com/futurewei-cloud/alcor/commit/c93da513f629a51a66fbe89298eba6e94d063901", "message": "added - Reference: Neutron High Level Flow", "committedDate": "2020-03-19T01:07:34Z", "type": "commit"}, {"oid": "7feebf8b1c2d4ef619cd911b212df2a54fd6d9e4", "url": "https://github.com/futurewei-cloud/alcor/commit/7feebf8b1c2d4ef619cd911b212df2a54fd6d9e4", "message": "Update system_flow.adoc", "committedDate": "2020-03-19T05:28:15Z", "type": "commit"}, {"oid": "7dc4d4b9f099ea84a4a36d162cdb28ae954cb926", "url": "https://github.com/futurewei-cloud/alcor/commit/7dc4d4b9f099ea84a4a36d162cdb28ae954cb926", "message": "Update creation workflow", "committedDate": "2020-03-19T16:57:27Z", "type": "commit"}, {"oid": "45ba64e9a77acf44cca397c9aa228e79fa5bc95b", "url": "https://github.com/futurewei-cloud/alcor/commit/45ba64e9a77acf44cca397c9aa228e79fa5bc95b", "message": "Update system_flow.adoc", "committedDate": "2020-03-19T21:28:52Z", "type": "commit"}, {"oid": "68b05532a943451f2bba05a01d0d6779efce59a4", "url": "https://github.com/futurewei-cloud/alcor/commit/68b05532a943451f2bba05a01d0d6779efce59a4", "message": "check permission", "committedDate": "2020-03-24T06:53:01Z", "type": "commit"}, {"oid": "0c0faa6270f07bfe3ef78862c74855ebe2cf7478", "url": "https://github.com/futurewei-cloud/alcor/commit/0c0faa6270f07bfe3ef78862c74855ebe2cf7478", "message": "api gateway draft", "committedDate": "2020-03-27T04:41:03Z", "type": "commit"}, {"oid": "4dcd9f510511d7d73085722e295617aaa3d589fc", "url": "https://github.com/futurewei-cloud/alcor/commit/4dcd9f510511d7d73085722e295617aaa3d589fc", "message": "Merge branch 'master' into docs/design", "committedDate": "2020-04-02T15:33:02Z", "type": "commit"}, {"oid": "ec05e706e79744bbb566b05bafcc9347401e83bd", "url": "https://github.com/futurewei-cloud/alcor/commit/ec05e706e79744bbb566b05bafcc9347401e83bd", "message": "update controller doc", "committedDate": "2020-04-03T04:52:10Z", "type": "commit"}, {"oid": "7b53131f46cdc4a97bd433fa546fc645ac2b3784", "url": "https://github.com/futurewei-cloud/alcor/commit/7b53131f46cdc4a97bd433fa546fc645ac2b3784", "message": "Merge branch 'master' into docs/design", "committedDate": "2020-04-04T01:24:13Z", "type": "commit"}, {"oid": "f0622e24c9a2cbece6cf009cf40ff65ff3a6282a", "url": "https://github.com/futurewei-cloud/alcor/commit/f0622e24c9a2cbece6cf009cf40ff65ff3a6282a", "message": "Update ToC with microservice doc link", "committedDate": "2020-04-07T17:57:56Z", "type": "commit"}, {"oid": "ab9736e04e8169db16a0e86f356eace84c6b0ff4", "url": "https://github.com/futurewei-cloud/alcor/commit/ab9736e04e8169db16a0e86f356eace84c6b0ff4", "message": "Update ToC and add vpc/mac manager design files", "committedDate": "2020-04-07T19:07:51Z", "type": "commit"}, {"oid": "f5a515446d1395cbc12d29528b686aa9274c1e83", "url": "https://github.com/futurewei-cloud/alcor/commit/f5a515446d1395cbc12d29528b686aa9274c1e83", "message": "Add key difference file", "committedDate": "2020-04-07T20:09:48Z", "type": "commit"}, {"oid": "a102fb184aabea76c8e655ba7e55c05a09889506", "url": "https://github.com/futurewei-cloud/alcor/commit/a102fb184aabea76c8e655ba7e55c05a09889506", "message": "Merge branch 'master' into docs/design", "committedDate": "2020-04-09T05:03:11Z", "type": "commit"}, {"oid": "ac115c62d164618771668134a50988a6a6652d3a", "url": "https://github.com/futurewei-cloud/alcor/commit/ac115c62d164618771668134a50988a6a6652d3a", "message": "Minor updates in system flow", "committedDate": "2020-04-09T21:45:31Z", "type": "commit"}, {"oid": "80b4a4d6005db7bd89fa86ef6a62d77ac5f713a5", "url": "https://github.com/futurewei-cloud/alcor/commit/80b4a4d6005db7bd89fa86ef6a62d77ac5f713a5", "message": "Add microservice snapshot table", "committedDate": "2020-04-09T23:35:04Z", "type": "commit"}, {"oid": "669c1e4e2e00c0bef3d2726775a63c3ea767e9d5", "url": "https://github.com/futurewei-cloud/alcor/commit/669c1e4e2e00c0bef3d2726775a63c3ea767e9d5", "message": "Add concurrency handling", "committedDate": "2020-04-10T00:43:25Z", "type": "commit"}, {"oid": "cb72f12952643062aef40aff34ef3d52dfbf2c84", "url": "https://github.com/futurewei-cloud/alcor/commit/cb72f12952643062aef40aff34ef3d52dfbf2c84", "message": "Update controller design doc", "committedDate": "2020-04-10T04:44:32Z", "type": "commit"}, {"oid": "516a4f2622e654de7bf1982bf73ff9023f64acce", "url": "https://github.com/futurewei-cloud/alcor/commit/516a4f2622e654de7bf1982bf73ff9023f64acce", "message": "update api_gateway file name", "committedDate": "2020-04-10T04:47:07Z", "type": "commit"}, {"oid": "8a63380c2aa198d5f265598b17605e402933c58e", "url": "https://github.com/futurewei-cloud/alcor/commit/8a63380c2aa198d5f265598b17605e402933c58e", "message": "update file names", "committedDate": "2020-04-10T04:49:38Z", "type": "commit"}, {"oid": "22b1e640c5901c3b381e020b39f6b1469fb392a1", "url": "https://github.com/futurewei-cloud/alcor/commit/22b1e640c5901c3b381e020b39f6b1469fb392a1", "message": "Merge mac manager design spec from eunju:feature/macmanager", "committedDate": "2020-04-10T05:23:09Z", "type": "commit"}, {"oid": "bdcb7c3bb580b7cb773b865b7db4ed4e38f63164", "url": "https://github.com/futurewei-cloud/alcor/commit/bdcb7c3bb580b7cb773b865b7db4ed4e38f63164", "message": "Merge from master", "committedDate": "2020-04-19T22:19:56Z", "type": "commit"}, {"oid": "83e691b73b5e2bb151aef85f4949fac5d9d31630", "url": "https://github.com/futurewei-cloud/alcor/commit/83e691b73b5e2bb151aef85f4949fac5d9d31630", "message": "Add API completeness doc", "committedDate": "2020-04-20T06:36:48Z", "type": "commit"}, {"oid": "ef6a1a8445bbc7e774bd6e540cca9f80621c0063", "url": "https://github.com/futurewei-cloud/alcor/commit/ef6a1a8445bbc7e774bd6e540cca9f80621c0063", "message": "Updtate api_completeness table", "committedDate": "2020-04-21T17:00:03Z", "type": "commit"}, {"oid": "057c314450e772422dba875b1d0a08d4dc544d5e", "url": "https://github.com/futurewei-cloud/alcor/commit/057c314450e772422dba875b1d0a08d4dc544d5e", "message": "Add API count", "committedDate": "2020-04-21T18:16:19Z", "type": "commit"}, {"oid": "66743d2c7c953a21fc725a081f018c4a1053c4d3", "url": "https://github.com/futurewei-cloud/alcor/commit/66743d2c7c953a21fc725a081f018c4a1053c4d3", "message": "Add references for OpenStack and Alcor", "committedDate": "2020-04-21T20:06:14Z", "type": "commit"}, {"oid": "fb74537fa01bb6509ab1e3bb0d2c4777808175d1", "url": "https://github.com/futurewei-cloud/alcor/commit/fb74537fa01bb6509ab1e3bb0d2c4777808175d1", "message": "Merge branch 'master' into docs/design", "committedDate": "2020-04-26T00:24:26Z", "type": "commit"}]}