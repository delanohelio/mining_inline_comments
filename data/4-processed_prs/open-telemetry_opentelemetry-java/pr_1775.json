{"pr_number": 1775, "pr_title": "changed B3Propagator to default to inject/extra single header", "pr_createdAt": "2020-10-08T22:05:03Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java/pull/1775", "timeline": [{"oid": "0bb4df0d60f291e4e5e416ab5d99253e97029e41", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/0bb4df0d60f291e4e5e416ab5d99253e97029e41", "message": "changed B3Propagator to default to inject/extra single header, and allow multiple headers to be injected by creating propagator via a builder", "committedDate": "2020-10-08T21:53:19Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjA3NjkzNg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1775#discussion_r502076936", "bodyText": "Any thoughts about using Optional<Context> as the return type, now that we have java 8?", "author": "jkwatson", "createdAt": "2020-10-08T23:28:22Z", "path": "extensions/trace_propagators/src/main/java/io/opentelemetry/extensions/trace/propagation/B3PropagatorExtractor.java", "diffHunk": "@@ -7,10 +7,12 @@\n \n import io.grpc.Context;\n import io.opentelemetry.context.propagation.TextMapPropagator;\n+import javax.annotation.Nullable;\n import javax.annotation.concurrent.Immutable;\n \n @Immutable\n interface B3PropagatorExtractor {\n \n+  @Nullable", "originalCommit": "0bb4df0d60f291e4e5e416ab5d99253e97029e41", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc2Njk2Nw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1775#discussion_r502766967", "bodyText": "Nice! I'm glad Java 8 is supported now :)\nYeh returning an Optional would be better than null.  I'll update it.", "author": "jarebudev", "createdAt": "2020-10-10T09:00:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjA3NjkzNg=="}], "type": "inlineReview"}, {"oid": "45d2d190961f0da7af9e62464f37130d52e29378", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/45d2d190961f0da7af9e62464f37130d52e29378", "message": "changed to return Optional instead of null from B3PropagatorExtractor", "committedDate": "2020-10-10T10:13:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzE3NjA2Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1775#discussion_r503176066", "bodyText": "Inject happens to headers, not from. But how about just injectMultipleHeaders?", "author": "anuraaga", "createdAt": "2020-10-12T09:49:58Z", "path": "extensions/trace_propagators/src/main/java/io/opentelemetry/extensions/trace/propagation/B3Propagator.java", "diffHunk": "@@ -31,44 +58,54 @@\n   private static final List<String> FIELDS =\n       Collections.unmodifiableList(Arrays.asList(TRACE_ID_HEADER, SPAN_ID_HEADER, SAMPLED_HEADER));\n \n+  private static final B3Propagator INSTANCE = B3Propagator.builder().build();\n+\n+  private final B3PropagatorExtractor singleHeaderExtractor =\n+      new B3PropagatorExtractorSingleHeader();\n+  private final B3PropagatorExtractor multipleHeadersExtractor =\n+      new B3PropagatorExtractorMultipleHeaders();\n   private final B3PropagatorInjector b3PropagatorInjector;\n-  private final B3PropagatorExtractor b3PropagatorExtractor;\n \n-  private static final B3Propagator SINGLE_HEADER =\n-      new B3Propagator(\n-          new B3PropagatorInjectorSingleHeader(), new B3PropagatorExtractorSingleHeader());\n-  private static final B3Propagator MULTI_HEADER =\n-      new B3Propagator(\n-          new B3PropagatorInjectorMultipleHeaders(), new B3PropagatorExtractorMultipleHeaders());\n+  private B3Propagator(B3PropagatorInjector b3PropagatorInjector) {\n+    this.b3PropagatorInjector = b3PropagatorInjector;\n+  }\n \n   /**\n-   * Returns an instance of {@link B3Propagator} with Single Header Implementation of B3 propagation\n-   * protocol. See <a\n-   * href=https://github.com/openzipkin/b3-propagation#single-header>openzipkin/b3-propagation#single-header</a>.\n-   *\n-   * @return Returns an instance of {@link B3Propagator} with Single Header implementation of B3\n-   *     propagation protocol.\n+   * Returns a new {@link B3Propagator.Builder} instance for configuring injection option for {@link\n+   * B3Propagator}.\n    */\n-  public static B3Propagator getSingleHeaderPropagator() {\n-    return SINGLE_HEADER;\n+  public static B3Propagator.Builder builder() {\n+    return new Builder();\n   }\n \n   /**\n-   * Returns an instance of {@link B3Propagator} with Multiple Header Implementation of B3\n-   * propagation protocol. See <a\n-   * href=https://github.com/openzipkin/b3-propagation#multiple-headers>openzipkin/b3-propagation#multiple-headers</a>.\n-   *\n-   * @return Returns an instance of {@link B3Propagator} with Multiple Header implementation of B3\n-   *     propagation protocol.\n+   * Enables the creation of an {@link B3Propagator} instance with the ability to switch injector\n+   * from single header (default) to multiple headers.\n    */\n-  public static B3Propagator getMultipleHeaderPropagator() {\n-    return MULTI_HEADER;\n+  public static class Builder {\n+    private boolean injectSingleHeader;\n+\n+    private Builder() {\n+      injectSingleHeader = true;\n+    }\n+\n+    public Builder injectFromMultipleHeaders() {", "originalCommit": "45d2d190961f0da7af9e62464f37130d52e29378", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU0NzkxMQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1775#discussion_r503547911", "bodyText": "sounds good, i'll tidy it up", "author": "jarebudev", "createdAt": "2020-10-12T21:38:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzE3NjA2Ng=="}], "type": "inlineReview"}, {"oid": "a03dd37f63bd1f4762c266d27e36faa0346fdbd5", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/a03dd37f63bd1f4762c266d27e36faa0346fdbd5", "message": "tidy up method name in B3Propagator builder", "committedDate": "2020-10-12T21:44:22Z", "type": "commit"}]}