{"pr_number": 2319, "pr_title": "Only apply java-library to projects and configure reactively.", "pr_createdAt": "2020-12-16T08:28:59Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java/pull/2319", "timeline": [{"oid": "5eea9b9d4562018bef8084ad8559cd9245fbd5b5", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/5eea9b9d4562018bef8084ad8559cd9245fbd5b5", "message": "Use java-library", "committedDate": "2020-12-16T07:57:33Z", "type": "commit"}, {"oid": "837eda7efc00494268f3be5e6b1c418fc5c93f60", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/837eda7efc00494268f3be5e6b1c418fc5c93f60", "message": "Only apply java-library to projects and configure reactively.", "committedDate": "2020-12-16T08:23:46Z", "type": "commit"}, {"oid": "2cd9d4a335b3fc37e143bbbf008b354a24f0db0c", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/2cd9d4a335b3fc37e143bbbf008b354a24f0db0c", "message": "Merge branch 'master' of github.com:open-telemetry/opentelemetry-java into java-library-all", "committedDate": "2020-12-16T08:24:45Z", "type": "commit"}, {"oid": "0e57f973b49c29b640676723a293db100c06e2bc", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/0e57f973b49c29b640676723a293db100c06e2bc", "message": "Consistency", "committedDate": "2020-12-16T08:27:37Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDEwNDE4Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2319#discussion_r544104186", "bodyText": "Only change in this big block is\n\nChange apply:  to plugins.apply since former doesn't work in subblocks\nRemoved signing plugin", "author": "anuraaga", "createdAt": "2020-12-16T08:29:45Z", "path": "build.gradle", "diffHunk": "@@ -45,10 +41,385 @@ if (file('.git').exists()) {\n subprojects {\n     group = \"io.opentelemetry\"\n \n-    plugins.withId(\"maven-publish\") {\n+    plugins.withId(\"java\") {\n+        plugins.apply('checkstyle')", "originalCommit": "0e57f973b49c29b640676723a293db100c06e2bc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDEwNDQ5NA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2319#discussion_r544104494", "bodyText": "Also changed pluginManager to plugins - I don't think there's any real difference, I've always used the latter since it's shorter.", "author": "anuraaga", "createdAt": "2020-12-16T08:30:14Z", "path": "build.gradle", "diffHunk": "@@ -45,10 +41,385 @@ if (file('.git').exists()) {\n subprojects {\n     group = \"io.opentelemetry\"\n \n-    plugins.withId(\"maven-publish\") {\n+    plugins.withId(\"java\") {\n+        plugins.apply('checkstyle')\n+        plugins.apply('eclipse')\n+        plugins.apply('idea')\n+        plugins.apply('jacoco')\n+\n+        plugins.apply('com.diffplug.spotless')\n+        plugins.apply('net.ltgt.errorprone')\n+\n+        repositories {\n+            mavenCentral()\n+            jcenter()\n+            mavenLocal()\n+        }\n+\n+        java {\n+            sourceCompatibility = JavaVersion.VERSION_1_8\n+            targetCompatibility = JavaVersion.VERSION_1_8\n+\n+            toolchain {\n+                languageVersion = JavaLanguageVersion.of(11)\n+            }\n+\n+            withJavadocJar()\n+            withSourcesJar()\n+        }\n+\n+        javadoc {\n+            exclude 'io/opentelemetry/internal/**'\n+        }\n+\n+        def testJava8 = tasks.register('testJava8', Test) {\n+            javaLauncher = javaToolchains.launcherFor {\n+                languageVersion = JavaLanguageVersion.of(8)\n+            }\n+\n+            jacoco.enabled = false\n+        }\n+        if (rootProject.findProperty('testAdditionalJavaVersions') == 'true') {\n+            tasks.named(\"check\").configure {\n+                dependsOn(testJava8)\n+            }\n+        }\n+\n+        tasks.withType(JavaCompile) {\n+            it.options.release = 8\n+\n+            it.options.compilerArgs += [\n+                    \"-Xlint:all\",\n+                    // We suppress the \"try\" warning because it disallows managing an auto-closeable with\n+                    // try-with-resources without referencing the auto-closeable within the try block.\n+                    \"-Xlint:-try\",\n+                    // We suppress the \"processing\" warning as suggested in\n+                    // https://groups.google.com/forum/#!topic/bazel-discuss/_R3A9TJSoPM\n+                    \"-Xlint:-processing\",\n+                    // We suppress the \"options\" warning because it prevents compilation on modern JDKs\n+                    \"-Xlint:-options\",\n+            ]\n+            it.options.errorprone.disableWarningsInGeneratedCode = true\n+            it.options.errorprone.allDisabledChecksAsWarnings = true\n+\n+            // Doesn't currently use Var annotations.\n+            it.options.errorprone.disable(\"Var\") // \"-Xep:Var:OFF\"\n+\n+            // ImmutableRefactoring suggests using com.google.errorprone.annotations.Immutable,\n+            // but currently uses javax.annotation.concurrent.Immutable\n+            it.options.errorprone.disable(\"ImmutableRefactoring\") // \"-Xep:ImmutableRefactoring:OFF\"\n+\n+\n+            // AutoValueImmutableFields suggests returning Guava types from API methods\n+            it.options.errorprone.disable(\"AutoValueImmutableFields\")\n+            // \"-Xep:AutoValueImmutableFields:OFF\"\n+\n+            it.options.encoding = \"UTF-8\"\n+\n+            // Ignore warnings for protobuf and jmh generated files.\n+            it.options.errorprone.excludedPaths = \".*generated.*\"\n+            // \"-XepExcludedPaths:.*/build/generated/source/proto/.*\"\n+\n+            it.options.errorprone.disable(\"Java7ApiChecker\")\n+            it.options.errorprone.disable(\"AndroidJdkLibsChecker\")\n+            //apparently disabling android doesn't disable this\n+            it.options.errorprone.disable(\"StaticOrDefaultInterfaceMethod\")\n+\n+            //until we have everything converted, we need these\n+            it.options.errorprone.disable(\"JdkObsolete\")\n+            it.options.errorprone.disable(\"UnnecessaryAnonymousClass\")\n+\n+            it.options.compilerArgs += [\"-Werror\"]\n+        }\n+\n+        compileTestJava {\n+            // serialVersionUID is basically guaranteed to be useless in tests\n+            options.compilerArgs += [\"-Xlint:-serial\"]\n+        }\n+\n+        jar.manifest {\n+            attributes('Implementation-Title': name,\n+                    'Implementation-Version': version,\n+                    'Built-By': System.getProperty('user.name'),\n+                    'Built-JDK': System.getProperty('java.version'),\n+                    'Source-Compatibility': sourceCompatibility,\n+                    'Target-Compatibility': targetCompatibility)\n+        }\n+\n+        ext {\n+            armeriaVersion = '1.3.0'\n+            autoValueVersion = '1.7.4'\n+            errorProneVersion = '2.4.0'\n+            errorProneJavacVersion = '9+181-r4173-1'\n+            findBugsJsr305Version = '3.0.2'\n+            grpcVersion = '1.33.1'\n+            guavaVersion = '30.0-android'\n+            jacksonVersion = '2.11.3'\n+            jmhVersion = '1.26'\n+            junitVersion = '5.7.0'\n+            mockitoVersion = '3.6.0'\n+            opencensusVersion = '0.28.2'\n+            opentracingVersion = '0.33.0'\n+            prometheusVersion = '0.9.0'\n+            protobufVersion = '3.14.0'\n+            protocVersion = '3.14.0'\n+            zipkinReporterVersion = '2.12.2'\n+            zipkinVersion = '2.18.3'\n+\n+            boms = [\n+                    \"com.linecorp.armeria:armeria-bom:${armeriaVersion}\",\n+                    \"io.grpc:grpc-bom:${grpcVersion}\",\n+                    \"com.google.guava:guava-bom:${guavaVersion}\",\n+                    \"com.fasterxml.jackson:jackson-bom:2.11.3\",\n+                    \"org.junit:junit-bom:${junitVersion}\",\n+                    \"com.google.protobuf:protobuf-bom:${protobufVersion}\",\n+                    \"io.zipkin.reporter2:zipkin-reporter-bom:${zipkinReporterVersion}\"\n+            ]\n+\n+            libraries = [\n+                    auto_value                  : \"com.google.auto.value:auto-value:${autoValueVersion}\",\n+                    auto_value_annotation       : \"com.google.auto.value:auto-value-annotations:${autoValueVersion}\",\n+                    disruptor                   : \"com.lmax:disruptor:3.4.2\",\n+                    errorprone_annotation       : \"com.google.errorprone:error_prone_annotations:${errorProneVersion}\",\n+                    errorprone_core             : \"com.google.errorprone:error_prone_core:${errorProneVersion}\",\n+                    errorprone_javac            : \"com.google.errorprone:javac:${errorProneJavacVersion}\",\n+                    grpc_api                    : \"io.grpc:grpc-api\",\n+                    grpc_context                : \"io.grpc:grpc-context\",\n+                    grpc_protobuf               : \"io.grpc:grpc-protobuf\",\n+                    grpc_stub                   : \"io.grpc:grpc-stub\",\n+                    guava                       : \"com.google.guava:guava\",\n+                    javax_annotations           : \"javax.annotation:javax.annotation-api:1.3.2\",\n+                    jmh_core                    : \"org.openjdk.jmh:jmh-core:${jmhVersion}\",\n+                    jmh_bytecode                : \"org.openjdk.jmh:jmh-generator-bytecode:${jmhVersion}\",\n+                    jsr305                      : \"com.google.code.findbugs:jsr305:${findBugsJsr305Version}\",\n+                    prometheus_client           : \"io.prometheus:simpleclient:${prometheusVersion}\",\n+                    prometheus_client_common    : \"io.prometheus:simpleclient_common:${prometheusVersion}\",\n+                    protobuf                    : \"com.google.protobuf:protobuf-java\",\n+                    protobuf_util               : \"com.google.protobuf:protobuf-java-util\",\n+                    zipkin_reporter             : \"io.zipkin.reporter2:zipkin-reporter\",\n+                    zipkin_okhttp               : \"io.zipkin.reporter2:zipkin-sender-okhttp3\",\n+\n+                    // Compatibility layer\n+                    opencensus_api              : \"io.opencensus:opencensus-api:${opencensusVersion}\",\n+                    opencensus_impl             : \"io.opencensus:opencensus-impl:${opencensusVersion}\",\n+                    opencensus_impl_core        : \"io.opencensus:opencensus-impl-core:${opencensusVersion}\",\n+                    opencensus_metric_exporter  : \"io.opencensus:opencensus-exporter-metrics-util:${opencensusVersion}\",\n+                    opentracing                 : \"io.opentracing:opentracing-api:${opentracingVersion}\",\n+\n+                    // Test dependencies.\n+                    assertj                     : \"org.assertj:assertj-core:3.18.1\",\n+                    equals_verifier              : \"nl.jqno.equalsverifier:equalsverifier:3.5\",\n+                    guava_testlib               : \"com.google.guava:guava-testlib\",\n+                    junit                       : 'junit:junit:4.13.1',\n+                    junit_pioneer               : 'org.junit-pioneer:junit-pioneer:1.0.0',\n+                    junit_jupiter_api           : 'org.junit.jupiter:junit-jupiter-api',\n+                    junit_jupiter_engine        : 'org.junit.jupiter:junit-jupiter-engine',\n+                    junit_vintage_engine        : 'org.junit.vintage:junit-vintage-engine',\n+                    mockito                     : \"org.mockito:mockito-core:${mockitoVersion}\",\n+                    mockito_junit_jupiter       : \"org.mockito:mockito-junit-jupiter:${mockitoVersion}\",\n+                    okhttp                      : 'com.squareup.okhttp3:okhttp:3.14.9',\n+                    system_rules                : 'com.github.stefanbirkner:system-rules:1.19.0', // env and system properties\n+                    slf4jsimple                 : 'org.slf4j:slf4j-simple:1.7.30', // Compatibility layer\n+                    awaitility                  : 'org.awaitility:awaitility:4.0.3',\n+                    testcontainers              : 'org.testcontainers:junit-jupiter:1.15.0',\n+                    rest_assured                : 'io.rest-assured:rest-assured:4.2.0',\n+                    jaeger_client               : 'io.jaegertracing:jaeger-client:1.5.0', // Jaeger Client\n+                    zipkin_junit                : \"io.zipkin.zipkin2:zipkin-junit:${zipkinVersion}\",  // Zipkin JUnit rule\n+                    archunit                    : 'com.tngtech.archunit:archunit-junit4:0.14.1', //Architectural constraints\n+                    jqf                         : 'edu.berkeley.cs.jqf:jqf-fuzz:1.6', // fuzz testing\n+\n+                    // Tooling\n+                    android_signature       : 'com.toasttab.android:gummy-bears-api-24:0.3.0:coreLib@signature'\n+            ]\n+        }\n+\n+        checkstyle {\n+            configDirectory = file(\"$rootDir/buildscripts/\")\n+            toolVersion = \"8.12\"\n+            ignoreFailures = false\n+            configProperties[\"rootDir\"] = rootDir\n+        }\n+\n+        jacoco { toolVersion = \"0.8.6\" }\n+\n+        // https://docs.gradle.org/current/samples/sample_jvm_multi_project_with_code_coverage.html\n+\n+        // Do not generate reports for individual projects\n+        tasks.named('jacocoTestReport') {\n+            enabled = false\n+        }\n+\n+        configurations {\n+            transitiveSourceElements {\n+                visible = false\n+                canBeResolved = false\n+                canBeConsumed = true\n+                extendsFrom(configurations.implementation)\n+                attributes {\n+                    attribute(Usage.USAGE_ATTRIBUTE, objects.named(Usage, Usage.JAVA_RUNTIME))\n+                    attribute(Category.CATEGORY_ATTRIBUTE, objects.named(Category, Category.DOCUMENTATION))\n+                    attribute(DocsType.DOCS_TYPE_ATTRIBUTE, objects.named(DocsType, 'source-folders'))\n+                }\n+                sourceSets.main.java.srcDirs.forEach {\n+                    outgoing.artifact(it)\n+                }\n+            }\n+\n+            coverageDataElements {\n+                visible = false\n+                canBeResolved = false\n+                canBeConsumed = true\n+                extendsFrom(configurations.implementation)\n+                attributes {\n+                    attribute(Usage.USAGE_ATTRIBUTE, objects.named(Usage, Usage.JAVA_RUNTIME))\n+                    attribute(Category.CATEGORY_ATTRIBUTE, objects.named(Category, Category.DOCUMENTATION))\n+                    attribute(DocsType.DOCS_TYPE_ATTRIBUTE, objects.named(DocsType, 'jacoco-coverage-data'))\n+                }\n+                // This will cause the test task to run if the coverage data is requested by the aggregation task\n+                outgoing.artifact(tasks.named(\"test\").map { task ->\n+                    task.extensions.getByType(JacocoTaskExtension).destinationFile\n+                })\n+            }\n+        }\n+\n+        spotless {\n+            java {\n+                googleJavaFormat(\"1.9\")\n+                licenseHeaderFile rootProject.file('buildscripts/spotless.license.java'), '(package|import|class|// Includes work from:)'\n+            }\n+        }\n+\n+        configurations {\n+            compile {\n+                // Detect Maven Enforcer's dependencyConvergence failures. We only\n+                // care for artifacts used as libraries by others.\n+                // TODO: Enable failOnVersionConflict()\n+                resolutionStrategy.preferProjectModules()\n+            }\n+        }\n+\n+        dependencies {\n+            configurations.all {\n+                // Kotlin compiler classpaths don't support BOM nor need it.\n+                if (it.name.endsWith('Classpath') && !it.name.startsWith('kotlin')) {\n+                    boms.each {bom ->\n+                        add(it.name, enforcedPlatform(bom))\n+                    }\n+                }\n+            }\n+\n+            compileOnly libraries.auto_value_annotation,\n+                    libraries.errorprone_annotation,\n+                    libraries.jsr305\n+\n+            testCompileOnly libraries.auto_value_annotation,\n+                    libraries.errorprone_annotation,\n+                    libraries.jsr305\n+\n+            testImplementation libraries.junit_jupiter_api,\n+                    libraries.equals_verifier,\n+                    libraries.mockito,\n+                    libraries.mockito_junit_jupiter,\n+                    libraries.assertj,\n+                    libraries.awaitility\n+\n+            testRuntimeOnly libraries.junit_jupiter_engine,\n+                    libraries.junit_vintage_engine\n+\n+            // The ErrorProne plugin defaults to the latest, which would break our\n+            // build if error prone releases a new version with a new check\n+            errorprone libraries.errorprone_core\n+\n+            annotationProcessor \"com.google.guava:guava-beta-checker:1.0\"\n+\n+            // Workaround for @javax.annotation.Generated\n+            // see: https://github.com/grpc/grpc-java/issues/3633\n+            compileOnly libraries.javax_annotations\n+        }\n+\n+        tasks.withType(Test) {\n+            useJUnitPlatform()\n+\n+            // At a test failure, log the stack trace to the console so that we don't\n+            // have to open the HTML in a browser.\n+            testLogging {\n+                exceptionFormat = 'full'\n+                showExceptions = true\n+                showCauses = true\n+                showStackTraces = true\n+            }\n+            maxHeapSize = '1500m'\n+        }\n+\n+        javadoc.options {\n+            source = \"8\"\n+            encoding = \"UTF-8\"\n+            links 'https://docs.oracle.com/javase/8/docs/api/'\n+            addBooleanOption('Xdoclint:all,-missing', true)\n+        }\n+\n+        afterEvaluate {\n+            jar {\n+                inputs.property(\"moduleName\", moduleName)\n+\n+                manifest {\n+                    attributes('Automatic-Module-Name': moduleName)\n+                }\n+            }\n+        }\n+\n+        plugins.withId(\"ru.vyarus.animalsniffer\") {\n+            animalsnifferTest {\n+                enabled = false\n+            }\n+            // If JMH enabled ignore animalsniffer.\n+            plugins.withId(\"me.champeau.gradle.jmh\") {\n+                animalsnifferJmh {\n+                    enabled = false\n+                }\n+            }\n+        }\n+\n+        plugins.withId(\"me.champeau.gradle.jmh\") {\n+            // Always include the jmhreport plugin and run it after jmh task.\n+            plugins.apply \"io.morethan.jmhreport\"", "originalCommit": "0e57f973b49c29b640676723a293db100c06e2bc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDEwNDY3Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2319#discussion_r544104676", "bodyText": "Copied from previous block as-is", "author": "anuraaga", "createdAt": "2020-12-16T08:30:33Z", "path": "build.gradle", "diffHunk": "@@ -111,6 +482,10 @@ subprojects {\n             }\n         }\n \n+        signing {", "originalCommit": "0e57f973b49c29b640676723a293db100c06e2bc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDU2MDIzNQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2319#discussion_r544560235", "bodyText": "curious why this is necessary. Doesn't the sdk depend on the api?", "author": "jkwatson", "createdAt": "2020-12-16T19:21:26Z", "path": "integration-tests/build.gradle", "diffHunk": "@@ -14,13 +14,12 @@ task fatJar(type: Jar) {\n }\n \n dependencies {\n-    api project(':opentelemetry-api')\n-\n-    implementation project(':opentelemetry-sdk'),\n-        project(':opentelemetry-exporter-jaeger'),\n-        libraries.grpc_protobuf,\n-        libraries.protobuf,\n-        \"io.grpc:grpc-netty-shaded:${grpcVersion}\"\n+    implementation project(':opentelemetry-api'),", "originalCommit": "0e57f973b49c29b640676723a293db100c06e2bc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "5ffa6b5743ed34759e3a5db3f77b3dc6e2a81045", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/5ffa6b5743ed34759e3a5db3f77b3dc6e2a81045", "message": "Cleanup", "committedDate": "2020-12-16T23:57:59Z", "type": "commit"}]}