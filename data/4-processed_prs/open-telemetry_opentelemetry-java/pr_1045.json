{"pr_number": 1045, "pr_title": "Fill in the Metrics details in the Getting Started guide.", "pr_createdAt": "2020-03-27T07:54:23Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java/pull/1045", "timeline": [{"oid": "42808a8cf9ea8fc4b12de9e97f231ebf4b74cf08", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/42808a8cf9ea8fc4b12de9e97f231ebf4b74cf08", "message": "#1002 Fill in the Metrics details in the Getting Started guide.\n\nSigned-off-by: Sergei Malafeev <sergeymalafeev@gmail.com>", "committedDate": "2020-03-27T07:52:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTA4OTgzMg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1045#discussion_r399089832", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Meter meter = OpenTelemetry.getMeterProvider().get(\"library_name\");\n          \n          \n            \n            Meter meter = OpenTelemetry.getMeterProvider().get(\"instrumentation-library-name\",\"semver:1.0.0\");\n          \n      \n    \n    \n  \n\nI'd use the same as in the examples above.", "author": "arminru", "createdAt": "2020-03-27T07:59:38Z", "path": "QUICKSTART.md", "diffHunk": "@@ -225,6 +225,36 @@ public void handle(HttpExchange he) {\n \n ## Metrics\n \n+Spans are a great way to get detailed information about what your application is doing, but\n+what about a more aggregated perspective? OpenTelemetry provides supports for metrics, a time series\n+of numbers that might express things such as CPU utilization, request count for an HTTP server, or a\n+business metric such as transactions.\n+\n+All metrics can be annotated with labels: additional qualifiers that help describe what\n+subdivision of the measurements the metric represents.\n+\n+The following is an example of metric usage:\n+\n+```java\n+// Gets or creates a named meter instance\n+Meter meter = OpenTelemetry.getMeterProvider().get(\"library_name\");", "originalCommit": "42808a8cf9ea8fc4b12de9e97f231ebf4b74cf08", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTA5ODk4Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1045#discussion_r399098986", "bodyText": "done", "author": "malafeev", "createdAt": "2020-03-27T08:21:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTA4OTgzMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTA5NDU0NQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1045#discussion_r399094545", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            BoundLongCounter someWorkBound = counter.bind(\"SomeWork\");\n          \n          \n            \n            \n          \n          \n            \n            // Record data\n          \n          \n            \n            someWorkBound.add(123);\n          \n          \n            \n            BoundLongCounter someWorkCounter = counter.bind(\"Key\", \"SomeWork\");\n          \n          \n            \n            \n          \n          \n            \n            // Record data\n          \n          \n            \n            someWorkCounter .add(123);\n          \n      \n    \n    \n  \n\nbind needs to be supplied with a list of key/value pairs, not just the values.\nAlso the use of \"Bound\" as a subject name was dropped a while ago.", "author": "arminru", "createdAt": "2020-03-27T08:11:17Z", "path": "QUICKSTART.md", "diffHunk": "@@ -225,6 +225,36 @@ public void handle(HttpExchange he) {\n \n ## Metrics\n \n+Spans are a great way to get detailed information about what your application is doing, but\n+what about a more aggregated perspective? OpenTelemetry provides supports for metrics, a time series\n+of numbers that might express things such as CPU utilization, request count for an HTTP server, or a\n+business metric such as transactions.\n+\n+All metrics can be annotated with labels: additional qualifiers that help describe what\n+subdivision of the measurements the metric represents.\n+\n+The following is an example of metric usage:\n+\n+```java\n+// Gets or creates a named meter instance\n+Meter meter = OpenTelemetry.getMeterProvider().get(\"library_name\");\n+\n+// Build counter e.g. LongCounter \n+LongCounter counter = meter\n+        .longCounterBuilder(\"processed_jobs\")\n+        .setDescription(\"Processed jobs\")\n+        .setUnit(\"1\")\n+        .setLabelKeys(Collections.singletonList(\"Key\"))\n+        .build();\n+\n+// It is recommended that the API user keep a reference to a Bound Counter\n+BoundLongCounter someWorkBound = counter.bind(\"SomeWork\");\n+\n+// Record data\n+someWorkBound.add(123);", "originalCommit": "42808a8cf9ea8fc4b12de9e97f231ebf4b74cf08", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTA5OTA5OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1045#discussion_r399099099", "bodyText": "updated", "author": "malafeev", "createdAt": "2020-03-27T08:21:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTA5NDU0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTA5OTIyNQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1045#discussion_r399099225", "bodyText": "The proper code would be:\nBoundLongCounter someWorkCounter = counter.bind(meter.createLabelSet(\"Key\", \"SomeWork\"));", "author": "thisthat", "createdAt": "2020-03-27T08:21:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTA5NDU0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTEwMDY5NA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1045#discussion_r399100694", "bodyText": "method meter.createLabelSet(...) doesn't exist", "author": "malafeev", "createdAt": "2020-03-27T08:24:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTA5NDU0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTEwMTAxNA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1045#discussion_r399101014", "bodyText": "@thisthat not anymore since LabelSet was removed in #992", "author": "arminru", "createdAt": "2020-03-27T08:25:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTA5NDU0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTEwMjAxNg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1045#discussion_r399102016", "bodyText": "Ops! I have to get up2date with the Metric API then! \ud83d\ude05", "author": "thisthat", "createdAt": "2020-03-27T08:27:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTA5NDU0NQ=="}], "type": "inlineReview"}, {"oid": "4dde8dd883786a53b9c57a4d2e7e3460e351f663", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/4dde8dd883786a53b9c57a4d2e7e3460e351f663", "message": "#1002 implement suggested changes\n\nSigned-off-by: Sergei Malafeev <sergeymalafeev@gmail.com>", "committedDate": "2020-03-27T08:20:29Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTMwMDI3OA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1045#discussion_r399300278", "bodyText": "Consider to remove for the moment the set label key. For the moment we don't do anything with that.", "author": "bogdandrutu", "createdAt": "2020-03-27T14:22:56Z", "path": "QUICKSTART.md", "diffHunk": "@@ -225,6 +225,36 @@ public void handle(HttpExchange he) {\n \n ## Metrics\n \n+Spans are a great way to get detailed information about what your application is doing, but\n+what about a more aggregated perspective? OpenTelemetry provides supports for metrics, a time series\n+of numbers that might express things such as CPU utilization, request count for an HTTP server, or a\n+business metric such as transactions.\n+\n+All metrics can be annotated with labels: additional qualifiers that help describe what\n+subdivision of the measurements the metric represents.\n+\n+The following is an example of metric usage:\n+\n+```java\n+// Gets or creates a named meter instance\n+Meter meter = OpenTelemetry.getMeterProvider().get(\"instrumentation-library-name\",\"semver:1.0.0\");\n+\n+// Build counter e.g. LongCounter \n+LongCounter counter = meter\n+        .longCounterBuilder(\"processed_jobs\")\n+        .setDescription(\"Processed jobs\")\n+        .setUnit(\"1\")\n+        .setLabelKeys(Collections.singletonList(\"Key\"))", "originalCommit": "4dde8dd883786a53b9c57a4d2e7e3460e351f663", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTkxMzYwNw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1045#discussion_r399913607", "bodyText": "done", "author": "malafeev", "createdAt": "2020-03-30T03:52:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTMwMDI3OA=="}], "type": "inlineReview"}, {"oid": "a5d6f92ca173b957630428c13b0ff9bf2dd79de6", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/a5d6f92ca173b957630428c13b0ff9bf2dd79de6", "message": "#1002 remove set label key\n\nSigned-off-by: Sergei Malafeev <sergeymalafeev@gmail.com>", "committedDate": "2020-03-30T03:51:44Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMyMzM4Nw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1045#discussion_r400323387", "bodyText": "We should specify that we expect this to stay alive for the entire time or call unbind when no-longer needed.", "author": "bogdandrutu", "createdAt": "2020-03-30T16:22:19Z", "path": "QUICKSTART.md", "diffHunk": "@@ -225,6 +225,35 @@ public void handle(HttpExchange he) {\n \n ## Metrics\n \n+Spans are a great way to get detailed information about what your application is doing, but\n+what about a more aggregated perspective? OpenTelemetry provides supports for metrics, a time series\n+of numbers that might express things such as CPU utilization, request count for an HTTP server, or a\n+business metric such as transactions.\n+\n+All metrics can be annotated with labels: additional qualifiers that help describe what\n+subdivision of the measurements the metric represents.\n+\n+The following is an example of metric usage:\n+\n+```java\n+// Gets or creates a named meter instance\n+Meter meter = OpenTelemetry.getMeterProvider().get(\"instrumentation-library-name\",\"semver:1.0.0\");\n+\n+// Build counter e.g. LongCounter \n+LongCounter counter = meter\n+        .longCounterBuilder(\"processed_jobs\")\n+        .setDescription(\"Processed jobs\")\n+        .setUnit(\"1\")\n+        .build();\n+\n+// It is recommended that the API user keep a reference to a Bound Counter\n+BoundLongCounter someWorkCounter = counter.bind(\"Key\", \"SomeWork\");", "originalCommit": "a5d6f92ca173b957630428c13b0ff9bf2dd79de6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMyNzk0MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1045#discussion_r400327941", "bodyText": "updated", "author": "malafeev", "createdAt": "2020-03-30T16:28:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMyMzM4Nw=="}], "type": "inlineReview"}, {"oid": "1511a7f7c9475f29b4d3d92eb69441ff087db9ee", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/1511a7f7c9475f29b4d3d92eb69441ff087db9ee", "message": "#1002 add clarification to counter bind\n\nSigned-off-by: Sergei Malafeev <sergeymalafeev@gmail.com>", "committedDate": "2020-03-30T16:28:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM1Nzk3OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1045#discussion_r400357979", "bodyText": "I'd remove the \"semver:\" from the beginning of the version.", "author": "jkwatson", "createdAt": "2020-03-30T17:14:44Z", "path": "QUICKSTART.md", "diffHunk": "@@ -225,6 +225,36 @@ public void handle(HttpExchange he) {\n \n ## Metrics\n \n+Spans are a great way to get detailed information about what your application is doing, but\n+what about a more aggregated perspective? OpenTelemetry provides supports for metrics, a time series\n+of numbers that might express things such as CPU utilization, request count for an HTTP server, or a\n+business metric such as transactions.\n+\n+All metrics can be annotated with labels: additional qualifiers that help describe what\n+subdivision of the measurements the metric represents.\n+\n+The following is an example of metric usage:\n+\n+```java\n+// Gets or creates a named meter instance\n+Meter meter = OpenTelemetry.getMeterProvider().get(\"instrumentation-library-name\",\"semver:1.0.0\");", "originalCommit": "1511a7f7c9475f29b4d3d92eb69441ff087db9ee", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ3Nzk4NA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1045#discussion_r400477984", "bodyText": "That is in the version semantic convention", "author": "bogdandrutu", "createdAt": "2020-03-30T20:36:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM1Nzk3OQ=="}], "type": "inlineReview"}]}