{"pr_number": 746, "pr_title": "Add base aggregator and double/long sum aggregator", "pr_createdAt": "2020-01-10T23:37:44Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java/pull/746", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQ3Mjg1Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/746#discussion_r365472853", "bodyText": "the naming is inconsistent here. BaseLongAggregator vs. DoubleAggregator", "author": "jkwatson", "createdAt": "2020-01-10T23:43:41Z", "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/aggregators/BaseAggregator.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright 2019, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.metrics.aggregators;\n+\n+import javax.annotation.concurrent.ThreadSafe;\n+\n+/** BaseAggregator represents the base class for all the available aggregations. */\n+@ThreadSafe\n+public abstract class BaseAggregator {\n+\n+  /**\n+   * Merge aggregated values between the current instance and the given {@code aggregator}.\n+   *\n+   * @param aggregator value to merge with.\n+   */\n+  public abstract void merge(BaseAggregator aggregator);\n+\n+  /**\n+   * BaseLongAggregator represents the base class for all the available aggregations that work with\n+   * long values.\n+   */\n+  @ThreadSafe\n+  public abstract static class BaseLongAggregator extends BaseAggregator {\n+\n+    /**\n+     * Updates the current aggregator with a newly recorded value.\n+     *\n+     * @param value the new {@code long} value to be added.\n+     */\n+    public abstract void update(long value);\n+  }\n+\n+  /**\n+   * DoubleAggregator represents the base class for all the available aggregations that work with\n+   * double values.\n+   */\n+  @ThreadSafe\n+  public abstract static class DoubleAggregator extends BaseAggregator {", "originalCommit": "4a8ed62afd6c168c2de113607658218aae2b3989", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU0NjAxNg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/746#discussion_r366546016", "bodyText": "done.", "author": "bogdandrutu", "createdAt": "2020-01-14T20:04:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQ3Mjg1Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQ3MjkyMA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/746#discussion_r365472920", "bodyText": "\ud83e\udd1e", "author": "jkwatson", "createdAt": "2020-01-10T23:44:07Z", "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/aggregators/DoubleSumAggregator.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Copyright 2019, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.metrics.aggregators;\n+\n+import com.google.common.util.concurrent.AtomicDouble;\n+import io.opentelemetry.sdk.metrics.aggregators.BaseAggregator.DoubleAggregator;\n+import javax.annotation.concurrent.ThreadSafe;\n+\n+/** DoubleSumAggregator aggregates double values by computing a Sum. */\n+@ThreadSafe\n+public class DoubleSumAggregator extends DoubleAggregator {\n+  // TODO: Change to use DoubleAdder when changed to java8.", "originalCommit": "4a8ed62afd6c168c2de113607658218aae2b3989", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU0NTk5Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/746#discussion_r366545992", "bodyText": "will see the result of the issue.", "author": "bogdandrutu", "createdAt": "2020-01-14T20:03:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQ3MjkyMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTk1NjY3MA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/746#discussion_r365956670", "bodyText": "Can we make all of these interfaces, rather than an abstract classes? Since there's no implementation of the methods, sticking with interfaces will be much cleaner, I think.", "author": "jkwatson", "createdAt": "2020-01-13T18:25:32Z", "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/aggregators/BaseAggregator.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright 2019, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.metrics.aggregators;\n+\n+import javax.annotation.concurrent.ThreadSafe;\n+\n+/** BaseAggregator represents the base class for all the available aggregations. */\n+@ThreadSafe\n+public abstract class BaseAggregator {", "originalCommit": "4a8ed62afd6c168c2de113607658218aae2b3989", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU0NTc1Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/746#discussion_r366545756", "bodyText": "done.", "author": "bogdandrutu", "createdAt": "2020-01-14T20:03:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTk1NjY3MA=="}], "type": "inlineReview"}, {"oid": "b64244920de1bb8b7c4d53a809160e164782fb38", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/b64244920de1bb8b7c4d53a809160e164782fb38", "message": "Add base aggregator and double/long sum aggregator\n\nSigned-off-by: Bogdan Drutu <bogdandrutu@gmail.com>", "committedDate": "2020-01-13T20:53:10Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjAzOTIyMw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/746#discussion_r366039223", "bodyText": "What would you think about adding a type parameter like\npublic interface BaseAggregator<T extends BaseAggregator<?>> and then having this method take T as the parameter? Then, you can implement exactly what you can merge with in the concrete implementations, rather than having to check for the self-type on every merge call.", "author": "jkwatson", "createdAt": "2020-01-13T21:31:45Z", "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/aggregators/BaseAggregator.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright 2019, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.metrics.aggregators;\n+\n+import javax.annotation.concurrent.ThreadSafe;\n+\n+/** BaseAggregator represents the base class for all the available aggregations. */\n+@ThreadSafe\n+public interface BaseAggregator {\n+\n+  /**\n+   * Merge aggregated values between the current instance and the given {@code aggregator}.\n+   *\n+   * @param aggregator value to merge with.\n+   */\n+  void merge(BaseAggregator aggregator);", "originalCommit": "b64244920de1bb8b7c4d53a809160e164782fb38", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "09f6d127c9fcdca856810ff022089abe4fce7a7f", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/09f6d127c9fcdca856810ff022089abe4fce7a7f", "message": "Add base aggregator and double/long sum aggregator\n\nSigned-off-by: Bogdan Drutu <bogdandrutu@gmail.com>", "committedDate": "2020-01-14T02:14:48Z", "type": "forcePushed"}, {"oid": "a111d3455490902bab6c6f3adc464c291eeaf674", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/a111d3455490902bab6c6f3adc464c291eeaf674", "message": "Update to use templates and move to main package\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>", "committedDate": "2020-01-23T02:42:45Z", "type": "forcePushed"}, {"oid": "5f1ee02eeba6736851d7ff7f8f4fd27ec119ef1b", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/5f1ee02eeba6736851d7ff7f8f4fd27ec119ef1b", "message": "Move inner classes to top level\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>", "committedDate": "2020-01-24T21:51:44Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg2MTQ1OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/746#discussion_r370861459", "bodyText": "2020 \ud83d\ude09", "author": "jkwatson", "createdAt": "2020-01-24T21:59:50Z", "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/BaseAggregator.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright 2019, OpenTelemetry Authors", "originalCommit": "5f1ee02eeba6736851d7ff7f8f4fd27ec119ef1b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg2NjIxNw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/746#discussion_r370866217", "bodyText": "done.", "author": "bogdandrutu", "createdAt": "2020-01-24T22:14:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg2MTQ1OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg2MTYxNA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/746#discussion_r370861614", "bodyText": "2020", "author": "jkwatson", "createdAt": "2020-01-24T22:00:26Z", "path": "sdk/src/test/java/io/opentelemetry/sdk/metrics/LongSumAggregatorTest.java", "diffHunk": "@@ -0,0 +1,31 @@\n+/*\n+ * Copyright 2019, OpenTelemetry Authors", "originalCommit": "5f1ee02eeba6736851d7ff7f8f4fd27ec119ef1b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg2NjIzMg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/746#discussion_r370866232", "bodyText": "done.", "author": "bogdandrutu", "createdAt": "2020-01-24T22:14:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg2MTYxNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjgzMzQzMw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/746#discussion_r372833433", "bodyText": "Nit: Aggregator", "author": "thisthat", "createdAt": "2020-01-30T09:16:30Z", "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/Aggregator.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.metrics;\n+\n+import javax.annotation.concurrent.ThreadSafe;\n+\n+/** BaseAggregator represents the base class for all the available aggregations. */", "originalCommit": "03ca6b03546756c6fbd133522a2e64b98294dfee", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzE2MjY1OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/746#discussion_r373162659", "bodyText": "Done.", "author": "bogdandrutu", "createdAt": "2020-01-30T19:57:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjgzMzQzMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjgzMzU3NA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/746#discussion_r372833574", "bodyText": "Nit: LongAggregator", "author": "thisthat", "createdAt": "2020-01-30T09:16:45Z", "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/Aggregator.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.metrics;\n+\n+import javax.annotation.concurrent.ThreadSafe;\n+\n+/** BaseAggregator represents the base class for all the available aggregations. */\n+@ThreadSafe\n+interface Aggregator<T extends Aggregator<?>> {\n+\n+  /**\n+   * Merge aggregated values between the current instance and the given {@code aggregator}.\n+   *\n+   * @param aggregator value to merge with.\n+   */\n+  void merge(T aggregator);\n+\n+  /**\n+   * BaseLongAggregator represents the base class for all the available aggregations that work with", "originalCommit": "03ca6b03546756c6fbd133522a2e64b98294dfee", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzE2MjcwMg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/746#discussion_r373162702", "bodyText": "Done.", "author": "bogdandrutu", "createdAt": "2020-01-30T19:57:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjgzMzU3NA=="}], "type": "inlineReview"}, {"oid": "c53affce106fc262255cc58012793c508679f437", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/c53affce106fc262255cc58012793c508679f437", "message": "Add base aggregator and double/long sum aggregator\n\nSigned-off-by: Bogdan Drutu <bogdandrutu@gmail.com>", "committedDate": "2020-01-30T19:56:51Z", "type": "commit"}, {"oid": "345f984434d021dd75dab3807614ed70d66c3608", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/345f984434d021dd75dab3807614ed70d66c3608", "message": "Update to use templates and move to main package\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>", "committedDate": "2020-01-30T19:56:51Z", "type": "commit"}, {"oid": "16c1a665713a655997b77f06a260d0750e5ccd4a", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/16c1a665713a655997b77f06a260d0750e5ccd4a", "message": "Move inner classes to top level\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>", "committedDate": "2020-01-30T19:56:51Z", "type": "commit"}, {"oid": "89c31a9f6b90ea3bbb98f288be8b7be2a21a8093", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/89c31a9f6b90ea3bbb98f288be8b7be2a21a8093", "message": "Rename BaseAggregator to Aggregator.\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>", "committedDate": "2020-01-30T19:56:51Z", "type": "commit"}, {"oid": "563c48b2b53db9ceec2c0bd381cd195aebfbb8d0", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/563c48b2b53db9ceec2c0bd381cd195aebfbb8d0", "message": "Update copyright\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>", "committedDate": "2020-01-30T19:56:51Z", "type": "commit"}, {"oid": "e2dfdfb43b85b3c87fc22f21e8e259da514c84f8", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/e2dfdfb43b85b3c87fc22f21e8e259da514c84f8", "message": "./gradlew goJF\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>", "committedDate": "2020-01-30T19:56:51Z", "type": "commit"}, {"oid": "49276380d58fce86dc81a051225e058dfaae151c", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/49276380d58fce86dc81a051225e058dfaae151c", "message": "Fix comments\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>", "committedDate": "2020-01-30T19:57:33Z", "type": "commit"}, {"oid": "49276380d58fce86dc81a051225e058dfaae151c", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/49276380d58fce86dc81a051225e058dfaae151c", "message": "Fix comments\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>", "committedDate": "2020-01-30T19:57:33Z", "type": "forcePushed"}]}