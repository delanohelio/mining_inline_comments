{"pr_number": 1168, "pr_title": "Add system/env vars and properties configuration for Metric classes", "pr_createdAt": "2020-05-04T14:06:22Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java/pull/1168", "timeline": [{"oid": "399fdc6794398848259f4ec4e269a0139f637bba", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/399fdc6794398848259f4ec4e269a0139f637bba", "message": "Add configuration to IntervalMetricReader", "committedDate": "2020-05-02T09:10:47Z", "type": "commit"}, {"oid": "8029a3cf67ae4b20f11f7d8f407c2a7a87a7945e", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/8029a3cf67ae4b20f11f7d8f407c2a7a87a7945e", "message": "Add configuration to OTLP", "committedDate": "2020-05-02T09:57:28Z", "type": "commit"}, {"oid": "71aa34761667908f14ac1ef8ab156e24568c4f19", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/71aa34761667908f14ac1ef8ab156e24568c4f19", "message": "Add documentation", "committedDate": "2020-05-04T14:02:42Z", "type": "commit"}, {"oid": "95f07918390b94eea8677b9224cd7195c951200a", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/95f07918390b94eea8677b9224cd7195c951200a", "message": "Fix year copyright", "committedDate": "2020-05-04T14:04:08Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTU5NjE4MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1168#discussion_r419596181", "bodyText": "Still says Jaeger in here, FYI.", "author": "jkwatson", "createdAt": "2020-05-04T17:18:07Z", "path": "exporters/otlp/src/main/java/io/opentelemetry/exporters/otlp/OtlpGrpcMetricExporter.java", "diffHunk": "@@ -40,8 +43,8 @@\n    * Creates a new Jaeger gRPC Metric Reporter with the given name, using the given channel.\n    *\n    * @param channel the channel to use when communicating with the Jaeger Collector.", "originalCommit": "95f07918390b94eea8677b9224cd7195c951200a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDM2ODAxMQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1168#discussion_r420368011", "bodyText": "do you want to update the javadoc while you're in here, updating other javadoc?  ;)", "author": "jkwatson", "createdAt": "2020-05-05T19:54:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTU5NjE4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU0ODYzMQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1168#discussion_r420548631", "bodyText": "Better do it now before this slips through again ;) Done in d013f7b", "author": "thisthat", "createdAt": "2020-05-06T05:11:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTU5NjE4MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTYwMTAxOQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1168#discussion_r419601019", "bodyText": "Is the purpose of these overrides just to provide a handle for documenting the properties? If so, could we do that just in the class javadoc, rather than introducing a ton of lines of code simply for repeating documentation?", "author": "jkwatson", "createdAt": "2020-05-04T17:26:00Z", "path": "exporters/otlp/src/main/java/io/opentelemetry/exporters/otlp/OtlpGrpcMetricExporter.java", "diffHunk": "@@ -146,5 +163,77 @@ public OtlpGrpcMetricExporter build() {\n     }\n \n     private Builder() {}\n+\n+    /**\n+     * Sets the configuration values from the given configuration map for only the available keys.\n+     * This method looks for the following keys:\n+     *\n+     * <ul>\n+     *   <li>{@code otel.otlp.metric.timeout}: to set the max waiting time for the collector to\n+     *       process each metric batch.\n+     * </ul>\n+     *\n+     * @param configMap {@link Map} holding the configuration values.\n+     * @return this.\n+     */\n+    @Override\n+    protected Builder fromConfigMap(\n+        Map<String, String> configMap, NamingConvention namingConvention) {\n+      configMap = namingConvention.normalize(configMap);\n+      Long value = getLongProperty(KEY_METRIC_TIMEOUT, configMap);\n+      if (value != null) {\n+        this.setDeadlineMs(value);\n+      }\n+      return this;\n+    }\n+\n+    /**\n+     * Sets the configuration values from the given properties object for only the available keys.\n+     * This method looks for the following keys:\n+     *\n+     * <ul>\n+     *   <li>{@code otel.otlp.metric.timeout}: to set the max waiting time for the collector to\n+     *       process each metric batch.\n+     * </ul>\n+     *\n+     * @param properties {@link Properties} holding the configuration values.\n+     * @return this.\n+     */\n+    @Override\n+    public Builder readProperties(Properties properties) {", "originalCommit": "95f07918390b94eea8677b9224cd7195c951200a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTg2ODMwNg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1168#discussion_r419868306", "bodyText": "As for now, all overrides have the function to provide better documentation w.r.t. the variables that they require.", "author": "thisthat", "createdAt": "2020-05-05T05:17:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTYwMTAxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE5MjMyOQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1168#discussion_r420192329", "bodyText": "My preference would be to have the documentation not repeated, but have it just in the class-level javadoc and in the package-info.", "author": "jkwatson", "createdAt": "2020-05-05T15:19:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTYwMTAxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDM1NTQyMg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1168#discussion_r420355422", "bodyText": "I agree! I would, however, suggest doing this doc refactoring in a follow-up PR where I address this in all the different classes that use a configuration.", "author": "thisthat", "createdAt": "2020-05-05T19:31:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTYwMTAxOQ=="}], "type": "inlineReview"}, {"oid": "d013f7b9adc05be5d7c2662c92506a2dcf589851", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/d013f7b9adc05be5d7c2662c92506a2dcf589851", "message": "Removing Jaeger from javadoc", "committedDate": "2020-05-06T05:10:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTUzMjAzMg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1168#discussion_r421532032", "bodyText": "0.5?", "author": "bogdandrutu", "createdAt": "2020-05-07T14:07:06Z", "path": "exporters/otlp/src/main/java/io/opentelemetry/exporters/otlp/OtlpGrpcMetricExporter.java", "diffHunk": "@@ -96,6 +99,18 @@ public static Builder newBuilder() {\n     return new Builder();\n   }\n \n+  /**\n+   * Returns a new {@link OtlpGrpcMetricExporter} reading the configuration values from the\n+   * environment and from system properties. System properties override values defined in the\n+   * environment. If a configuration value is missing, it uses the default value.\n+   *\n+   * @return a new {@link OtlpGrpcMetricExporter} instance.\n+   * @since 0.4.0", "originalCommit": "d013f7b9adc05be5d7c2662c92506a2dcf589851", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTUzNDUyMw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1168#discussion_r421534523", "bodyText": "I expect that everything that is not possible to configure via eng/sysprop to be passed as an argument to a factory method create", "author": "bogdandrutu", "createdAt": "2020-05-07T14:10:23Z", "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/export/README.md", "diffHunk": "@@ -41,7 +41,13 @@ public final class PushExporter {\n   public PushExporter(Collection<MetricProducer> producers) {\n     metricExporter = new PushMetricExporter();\n     intervalMetricReader =\n-        new IntervalMetricReader(producers, metricExporter, 60 /* export interval sec*/);\n+        IntervalMetricReader.builder()\n+                    .readEnvironment() // Read configuration from environment variables\n+                    .readSystemProperties() // Read configuration from system properties\n+                    .setExportIntervalMillis(100_000) \n+                    .setMetricExporter(metricExporter)\n+                    .setMetricProducers(Collections.singletonList(producers))", "originalCommit": "d013f7b9adc05be5d7c2662c92506a2dcf589851", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTUzNTc1NA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1168#discussion_r421535754", "bodyText": "This is just a suggestion, please let me know if you think it is better.", "author": "bogdandrutu", "createdAt": "2020-05-07T14:12:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTUzNDUyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTU4NDA5MA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1168#discussion_r421584090", "bodyText": "I'm not clear on how the suggestion would work. Would the create method take the builder as a parameter? Would the Builder have a create method that took the non-env-configurable parameters, rather than having a build() method?", "author": "jkwatson", "createdAt": "2020-05-07T15:14:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTUzNDUyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTU5NTI1Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1168#discussion_r421595252", "bodyText": "I was thinking that Config contains only things that can be configured via env or sysprop everything else is passed as argument to a factory method.\nSo in this case: create(Config, List<MetricProducer>, MetricExporter)", "author": "bogdandrutu", "createdAt": "2020-05-07T15:29:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTUzNDUyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTYxMTQyMw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1168#discussion_r421611423", "bodyText": "What class exposes the create method, though?", "author": "jkwatson", "createdAt": "2020-05-07T15:52:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTUzNDUyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTYyOTE0Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1168#discussion_r421629142", "bodyText": "Now I am more confused, because I thought that we do the model of having a Config class as an inner class (see https://github.com/open-telemetry/opentelemetry-java/blob/master/sdk/src/main/java/io/opentelemetry/sdk/trace/export/BatchSpansProcessor.java#L313), something like this:\npublic final class IntervalMetricReader {\n \n  public create(Config, List<MetricProducer>, MetricExporter);\n\n  public static final Config {\n     public static Config defaultConfig();\n     public static Builder newBuilder();\n\n     public static final Builder extends ConfigBuilder<> {\n       public Config build();\n     }\n  }\n}", "author": "bogdandrutu", "createdAt": "2020-05-07T16:18:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTUzNDUyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk1NDcyNg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1168#discussion_r421954726", "bodyText": "Only while I was working on the metrics I noticed that having a config object for a single parameter it's a bit overkill and the same result can be archived enhancing the existing builder.\nHowever, I agree that we have different API for different components:\n\nSpan classes use a config object;\nMetric classes do that directly in the builder.\n\nSo, either we use config objects in all classes, or every class uses the standard builder pattern enhanced with support to env/sys vars.\nI am more in favor of the latter since currently, a Config object makes sense IMHO only for the BatchSpanProcessor.", "author": "thisthat", "createdAt": "2020-05-08T05:58:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTUzNDUyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjI1NTA4Nw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1168#discussion_r422255087", "bodyText": "I am asking for consistency. If we believe builder pattern + support for env/sysprop config in that builder pattern is good then we should go with that model everywhere.", "author": "bogdandrutu", "createdAt": "2020-05-08T16:56:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTUzNDUyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjUyNDA0OA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1168#discussion_r422524048", "bodyText": "I would argue to use the build pattern + support of env/sys. My motivation is that this way, the API surface is not increased and memory is not used to store the Configuration class. I have changed the PR message so it does not resolve the issue and I will adapt the span processors to use only the builder.", "author": "thisthat", "createdAt": "2020-05-09T17:36:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTUzNDUyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU4MDg4NA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1168#discussion_r422580884", "bodyText": "Sure thing, @trask does that work for you in auto instrumentation?", "author": "bogdandrutu", "createdAt": "2020-05-10T04:04:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTUzNDUyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU4NTMxMQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1168#discussion_r422585311", "bodyText": "Yes, this is looking good @thisthat \ud83d\udc4d. Thanks for including readProperties(Properties), we will probably use that for something like an opentelemetry-auto.properties file (in addition to calling readEnvironment and readSystemProperties).\nOnly (very) minor thought is maybe rename readEnvironment to readEnvironmentVariables.", "author": "trask", "createdAt": "2020-05-10T05:03:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTUzNDUyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU4ODc1MA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1168#discussion_r422588750", "bodyText": "Oh, I forgot, what about endpoint configuration for the otlp exporters? Are we waiting for open-telemetry/opentelemetry-specification#172 to be resolved before adding? Just curious. Thanks.", "author": "trask", "createdAt": "2020-05-10T05:36:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTUzNDUyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY1NTA5MA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1168#discussion_r422655090", "bodyText": "I was waiting to resolve #996 and then report in open-telemetry/opentelemetry-specification#572 what the Java current implementation uses for the variable names. I don't think open-telemetry/opentelemetry-specification#172 is blocking us since it is a matter of renaming of few constants and updating the documentation in the worst case", "author": "thisthat", "createdAt": "2020-05-10T14:45:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTUzNDUyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY1ODkyNg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1168#discussion_r422658926", "bodyText": "Filed #1194 to not forget about the suggestion from @trask", "author": "bogdandrutu", "createdAt": "2020-05-10T15:17:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTUzNDUyMw=="}], "type": "inlineReview"}, {"oid": "436af1c2599e35c5a12d13959140c360c9ace12c", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/436af1c2599e35c5a12d13959140c360c9ace12c", "message": "0.4.0 -> 0.5.0", "committedDate": "2020-05-08T05:48:28Z", "type": "commit"}, {"oid": "436af1c2599e35c5a12d13959140c360c9ace12c", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/436af1c2599e35c5a12d13959140c360c9ace12c", "message": "0.4.0 -> 0.5.0", "committedDate": "2020-05-08T05:48:28Z", "type": "forcePushed"}]}