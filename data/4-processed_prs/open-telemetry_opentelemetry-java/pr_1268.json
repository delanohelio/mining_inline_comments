{"pr_number": 1268, "pr_title": "Expose RandomIdsGenerator so it can be delegated to.", "pr_createdAt": "2020-05-23T05:08:38Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java/pull/1268", "timeline": [{"oid": "49a22d0c190f52c5450d740fd5cf311e5ef4f507", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/49a22d0c190f52c5450d740fd5cf311e5ef4f507", "message": "Expose RandomIdsGenerator for delegation and allow customizing Random.", "committedDate": "2020-05-23T05:45:42Z", "type": "commit"}, {"oid": "49a22d0c190f52c5450d740fd5cf311e5ef4f507", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/49a22d0c190f52c5450d740fd5cf311e5ef4f507", "message": "Expose RandomIdsGenerator for delegation and allow customizing Random.", "committedDate": "2020-05-23T05:45:42Z", "type": "forcePushed"}, {"oid": "59b1d29d8a41661ae933256320b0dc6d05f1cd6e", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/59b1d29d8a41661ae933256320b0dc6d05f1cd6e", "message": "Unit tests", "committedDate": "2020-05-23T10:35:54Z", "type": "commit"}, {"oid": "bb08931423d7a320eb8af7a4f675f6ce4c542c5c", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/bb08931423d7a320eb8af7a4f675f6ce4c542c5c", "message": "checkNotNull", "committedDate": "2020-05-23T10:38:34Z", "type": "commit"}, {"oid": "0a38453d2580a678c1803dcfc822944448bcd4c7", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/0a38453d2580a678c1803dcfc822944448bcd4c7", "message": "More interesting test", "committedDate": "2020-05-23T10:41:18Z", "type": "commit"}, {"oid": "7f4eb411593912ddd6e3e26421ffda8e28029e8e", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/7f4eb411593912ddd6e3e26421ffda8e28029e8e", "message": "format", "committedDate": "2020-05-23T10:44:21Z", "type": "commit"}, {"oid": "e5bcdd8c3a1218c470edc30088467bb28b143f85", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/e5bcdd8c3a1218c470edc30088467bb28b143f85", "message": "Checkstyle", "committedDate": "2020-05-23T12:00:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU1MjM0Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1268#discussion_r429552343", "bodyText": "Use Java Objects.requireNotNull", "author": "bogdandrutu", "createdAt": "2020-05-23T14:48:16Z", "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/RandomIdsGenerator.java", "diffHunk": "@@ -16,17 +16,56 @@\n \n package io.opentelemetry.sdk.trace;\n \n+import io.opentelemetry.internal.Utils;\n import io.opentelemetry.trace.SpanId;\n import io.opentelemetry.trace.TraceId;\n+import java.util.Random;\n import java.util.concurrent.ThreadLocalRandom;\n \n-final class RandomIdsGenerator implements IdsGenerator {\n+/** The default {@link IdsGenerator} which generates IDs as random numbers. */\n+public final class RandomIdsGenerator implements IdsGenerator {\n+\n   private static final long INVALID_ID = 0;\n \n+  /**\n+   * A supplier of the {@link Random} that will be used to generate random IDs. This is a functional\n+   * interface and can be safely initialized as a lambda.\n+   */\n+  public interface RandomSupplier {\n+    /** Returns the {@link Random} to use for generating IDs. */\n+    Random get();\n+  }\n+\n+  /** Creates a {@link RandomIdsGenerator} which uses {@link ThreadLocalRandom} to generate IDs. */\n+  public RandomIdsGenerator() {\n+    this(\n+        new RandomSupplier() {\n+          @Override\n+          public Random get() {\n+            return ThreadLocalRandom.current();\n+          }\n+\n+          @Override\n+          public String toString() {\n+            return \"ThreadLocalRandom\";\n+          }\n+        });\n+  }\n+\n+  /**\n+   * Creates a {@link RandomIdsGenerator} which uses the provided {@link RandomSupplier} to generate\n+   * IDs.\n+   */\n+  public RandomIdsGenerator(RandomSupplier randomSupplier) {\n+    this.randomSupplier = Utils.checkNotNull(randomSupplier, \"randomSupplier\");", "originalCommit": "e5bcdd8c3a1218c470edc30088467bb28b143f85", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "97a21427d8ed23ea8176df8b516390c5ae9aee65", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/97a21427d8ed23ea8176df8b516390c5ae9aee65", "message": "requireNonNull", "committedDate": "2020-05-25T23:37:39Z", "type": "commit"}, {"oid": "11f32d31bca1c6dba120b634046edacf879200a1", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/11f32d31bca1c6dba120b634046edacf879200a1", "message": "Revert RandomSupplier", "committedDate": "2020-05-26T02:05:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDEyMjM0MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1268#discussion_r430122341", "bodyText": "Maybe worth generating 1K ids to check?", "author": "bogdandrutu", "createdAt": "2020-05-26T02:09:11Z", "path": "sdk/src/test/java/io/opentelemetry/sdk/trace/RandomIdsGeneratorTest.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.trace;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import io.opentelemetry.trace.SpanId;\n+import io.opentelemetry.trace.TraceId;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+@RunWith(JUnit4.class)\n+public class RandomIdsGeneratorTest {\n+\n+  @Test\n+  public void defaults() {\n+    RandomIdsGenerator generator = new RandomIdsGenerator();\n+\n+    // Can't assert values but can assert they're valid.\n+    TraceId traceId = generator.generateTraceId();\n+    assertThat(traceId).isNotEqualTo(TraceId.getInvalid());\n+\n+    SpanId spanId = generator.generateSpanId();\n+    assertThat(spanId).isNotEqualTo(SpanId.getInvalid());", "originalCommit": "11f32d31bca1c6dba120b634046edacf879200a1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDEyMzA5NA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1268#discussion_r430123094", "bodyText": "Sure - for the record, even with 1K test only takes 41ms on my macbook pro", "author": "anuraaga", "createdAt": "2020-05-26T02:13:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDEyMjM0MQ=="}], "type": "inlineReview"}, {"oid": "5e3dcf6361f02112d4a474b3ae6c7d9a37abaf7b", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/5e3dcf6361f02112d4a474b3ae6c7d9a37abaf7b", "message": "Format and fuzz", "committedDate": "2020-05-26T02:12:59Z", "type": "commit"}]}