{"pr_number": 1504, "pr_title": "Wrote benchmark tests for the zPages module", "pr_createdAt": "2020-08-04T22:27:29Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java/pull/1504", "timeline": [{"oid": "ec31e3e9cb0212c75133331290246b258f445b13", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/ec31e3e9cb0212c75133331290246b258f445b13", "message": "Removed URLEncoder", "committedDate": "2020-07-18T00:27:58Z", "type": "commit"}, {"oid": "e0fe0ede7bbd0e660feab6b0eac647f972224a12", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/e0fe0ede7bbd0e660feab6b0eac647f972224a12", "message": "Fixed typo", "committedDate": "2020-07-18T00:44:15Z", "type": "commit"}, {"oid": "cf7f5c8f7890ffb19aabcd675ca4bcc7f4a5739a", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/cf7f5c8f7890ffb19aabcd675ca4bcc7f4a5739a", "message": "Added URLDecoding", "committedDate": "2020-07-20T21:20:21Z", "type": "commit"}, {"oid": "9db8e7e6edd7b8188fe3b4deda6b091cf2f92a66", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/9db8e7e6edd7b8188fe3b4deda6b091cf2f92a66", "message": "Included comment for string replacement", "committedDate": "2020-07-20T21:29:32Z", "type": "commit"}, {"oid": "412797843fe71d406538cd0173d414afd3872019", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/412797843fe71d406538cd0173d414afd3872019", "message": "Added unit tests for special characters in span names", "committedDate": "2020-07-20T23:50:41Z", "type": "commit"}, {"oid": "e17c337050a0c57947eea07b53c36393805fc3e3", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/e17c337050a0c57947eea07b53c36393805fc3e3", "message": "Resolved URL decoding issues", "committedDate": "2020-07-21T20:34:47Z", "type": "commit"}, {"oid": "bb58b26018ed710133ff0493894b58d70b977640", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/bb58b26018ed710133ff0493894b58d70b977640", "message": "Moved url decoding to parseQueryMap and updated the corresponding unit tests", "committedDate": "2020-07-21T22:08:18Z", "type": "commit"}, {"oid": "80a5ccf2b19dbdb2cd3fad4a968962318131883f", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/80a5ccf2b19dbdb2cd3fad4a968962318131883f", "message": "Added a README file for zPage quickstart", "committedDate": "2020-07-22T20:39:04Z", "type": "commit"}, {"oid": "dcbd9aa23db84e85639a17f02f25d2e54d5b5f4b", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/dcbd9aa23db84e85639a17f02f25d2e54d5b5f4b", "message": "Add images for README", "committedDate": "2020-07-22T20:42:13Z", "type": "commit"}, {"oid": "24ffce2bb7b6a24ba3ad8e86e476710be7ccd76a", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/24ffce2bb7b6a24ba3ad8e86e476710be7ccd76a", "message": "Updated README", "committedDate": "2020-07-22T21:02:18Z", "type": "commit"}, {"oid": "5047849b2843b486649d3a286cc36ab627f76901", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/5047849b2843b486649d3a286cc36ab627f76901", "message": "Add frontend images", "committedDate": "2020-07-22T21:52:04Z", "type": "commit"}, {"oid": "85a539ed8b5539985017b3a96e9539dd11f70aa1", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/85a539ed8b5539985017b3a96e9539dd11f70aa1", "message": "Add backend images", "committedDate": "2020-07-22T22:05:05Z", "type": "commit"}, {"oid": "4156123799670059e9ea44cb1a0174b8a65c9aed", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/4156123799670059e9ea44cb1a0174b8a65c9aed", "message": "Added our design doc", "committedDate": "2020-07-22T23:32:06Z", "type": "commit"}, {"oid": "265cf27c704f368c0b28c04c555568f1be926e9a", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/265cf27c704f368c0b28c04c555568f1be926e9a", "message": "Added details on package", "committedDate": "2020-07-23T17:19:22Z", "type": "commit"}, {"oid": "c102e45b016ccb12458c3f657fe8cf64c0cc5d2a", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/c102e45b016ccb12458c3f657fe8cf64c0cc5d2a", "message": "Reworded a few lines", "committedDate": "2020-07-23T19:17:16Z", "type": "commit"}, {"oid": "e977dcf1146700915bbe6d1a2d095aaa79ed131f", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/e977dcf1146700915bbe6d1a2d095aaa79ed131f", "message": "Merge branch 'master' of https://github.com/open-telemetry/opentelemetry-java into master", "committedDate": "2020-07-23T19:26:44Z", "type": "commit"}, {"oid": "ed8ef33353ece317374cb46b29209c030781460c", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/ed8ef33353ece317374cb46b29209c030781460c", "message": "Moved DESIGN.md to a docs folder and changed gradle config to implementation", "committedDate": "2020-07-24T17:09:38Z", "type": "commit"}, {"oid": "f595909769797804702ce7ccca807df9b177e197", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/f595909769797804702ce7ccca807df9b177e197", "message": "Changed wording regarding HttpServer requirement", "committedDate": "2020-07-27T14:34:34Z", "type": "commit"}, {"oid": "806b6322ef2e6440c0569e255ffa954cf97da42d", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/806b6322ef2e6440c0569e255ffa954cf97da42d", "message": "Added zpages folder under docs, resolved broken image links", "committedDate": "2020-07-27T15:12:53Z", "type": "commit"}, {"oid": "9e4dde8cdcae5bcd69322b04d30fd4b3d85887c2", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/9e4dde8cdcae5bcd69322b04d30fd4b3d85887c2", "message": "Resolved comments for the design md file", "committedDate": "2020-07-27T18:00:10Z", "type": "commit"}, {"oid": "86c2a517f201cc217acf5f747a62dd55078cafa1", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/86c2a517f201cc217acf5f747a62dd55078cafa1", "message": "Made a few wording changes", "committedDate": "2020-07-27T20:40:52Z", "type": "commit"}, {"oid": "a3c9a5a03bb2e2ea9ad1d62eadc3110794c5c823", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/a3c9a5a03bb2e2ea9ad1d62eadc3110794c5c823", "message": "Wrote a benchmark test for TracezSpanBuckets (#23)\n\n* Scaffolded logic for basic benchmark tests\r\n\r\n* Wrote benchmark tests for TracezSpanBuckets\r\n\r\n* Updated README with benchmark tests\r\n\r\n* Changed the wording slightly", "committedDate": "2020-07-29T22:02:47Z", "type": "commit"}, {"oid": "07b2fcf7564f64347c0d4fa4b2e482fec28d247e", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/07b2fcf7564f64347c0d4fa4b2e482fec28d247e", "message": "Updated README file (#25)", "committedDate": "2020-08-04T18:57:44Z", "type": "commit"}, {"oid": "542f7569c7d47c1565c76912bdddd7ab245c429f", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/542f7569c7d47c1565c76912bdddd7ab245c429f", "message": "Wrote benchmark tests for TracezDataAggregator (#24)\n\n* Scaffolded logic for basic benchmark tests\r\n\r\n* Wrote benchmark tests for TracezSpanBuckets\r\n\r\n* Updated README with benchmark tests\r\n\r\n* Changed the wording slightly\r\n\r\n* Added a set of benchmark tests for TracezDataAggregator\r\n\r\n* Modified README formatting\r\n\r\n* Changed benchmark test to negate dead code elimination", "committedDate": "2020-08-04T22:17:07Z", "type": "commit"}, {"oid": "fe056e3a4dce4816efd2c6e3a7ae626a54e396bc", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/fe056e3a4dce4816efd2c6e3a7ae626a54e396bc", "message": "Merged with original repo", "committedDate": "2020-08-04T22:20:58Z", "type": "commit"}, {"oid": "f714b4397ad69538999336a4283c08c7a1b0e0a9", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/f714b4397ad69538999336a4283c08c7a1b0e0a9", "message": "Added Javadocs to the TracezDataAggregator benchmark tests", "committedDate": "2020-08-05T00:27:38Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUwMzU5MA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1504#discussion_r465503590", "bodyText": "I would add a sentence that describes the hardware (CPU/RAM/OS) used to obtain these results.", "author": "thisthat", "createdAt": "2020-08-05T06:34:21Z", "path": "sdk_extensions/zpages/README.md", "diffHunk": "@@ -98,4 +98,123 @@ details. For example, here are the details of the `ChildSpan` latency sample (ro\n The /traceconfigz zPage displays information about the currently active tracing configuration and \n provides an interface for users to modify relevant parameters. Here is what the web page looks like:\n \n-![traceconfigz](img/traceconfigz.png)\n\\ No newline at end of file\n+![traceconfigz](img/traceconfigz.png)\n+\n+## Benchmark Testing\n+\n+This module contains two sets of benchmark tests: one for adding spans to an instance of\n+TracezSpanBuckets and another for retrieving counts and spans with TracezDataAggregator. You can run\n+the tests yourself with the following commands:\n+\n+```\n+./gradlew -PjmhIncludeSingleClass=TracezSpanBucketsBenchmark clean :opentelemetry-sdk-extension-zpages:jmh\n+./gradlew -PjmhIncludeSingleClass=TracezDataAggregatorBenchmark clean :opentelemetry-sdk-extension-zpages:jmh\n+```\n+\n+The expected results for `TracezSpanBucketsBenchmark` are as follows:", "originalCommit": "f714b4397ad69538999336a4283c08c7a1b0e0a9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUwNjM3Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1504#discussion_r465506376", "bodyText": "Yeah I'd personally leave these out of READMEs and paste them in PR to provide some history along with code changes. Especially, it's too hard to repro even with specs about the CPU (except if using a cloud VM) that we couldn't call them expected results.\nHaving JMH to measure future code changes in a relative way is great.", "author": "anuraaga", "createdAt": "2020-08-05T06:41:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUwMzU5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTg5Nzk5OA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1504#discussion_r465897998", "bodyText": "I agree. Leave them out of the README and keep them in the PR description, along with some indication of JVM version and hardware that they were run on.", "author": "jkwatson", "createdAt": "2020-08-05T17:45:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUwMzU5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTk3ODkzNw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1504#discussion_r465978937", "bodyText": "Updated the top level comment.", "author": "williamhu99", "createdAt": "2020-08-05T20:17:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUwMzU5MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUwNjkyMw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1504#discussion_r465506923", "bodyText": "Can you add an @Param for this size?", "author": "anuraaga", "createdAt": "2020-08-05T06:42:32Z", "path": "sdk_extensions/zpages/src/jmh/java/io/opentelemetry/sdk/extensions/zpages/TracezDataAggregatorBenchmark.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.extensions.zpages;\n+\n+import io.opentelemetry.sdk.OpenTelemetrySdk;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Status;\n+import io.opentelemetry.trace.Tracer;\n+import java.util.concurrent.TimeUnit;\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Level;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Threads;\n+import org.openjdk.jmh.annotations.Warmup;\n+import org.openjdk.jmh.infra.Blackhole;\n+\n+/** Benchmark class for {@link TracezDataAggregator}. */\n+@State(Scope.Benchmark)\n+public class TracezDataAggregatorBenchmark {\n+\n+  private static final String runningSpan = \"RUNNING_SPAN\";\n+  private static final String latencySpan = \"LATENCY_SPAN\";\n+  private static final String errorSpan = \"ERROR_SPAN\";\n+  private final Tracer tracer =\n+      OpenTelemetrySdk.getTracerProvider().get(\"TracezDataAggregatorBenchmark\");\n+  private final TracezSpanProcessor spanProcessor = TracezSpanProcessor.newBuilder().build();\n+  private final TracezDataAggregator dataAggregator = new TracezDataAggregator(spanProcessor);\n+\n+  @Setup(Level.Trial)\n+  public final void setup() {\n+    // Generate 1 million running spans, span latencies, and error spans\n+    for (int i = 0; i < 1000000; i++) {", "originalCommit": "f714b4397ad69538999336a4283c08c7a1b0e0a9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUwODU5Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1504#discussion_r465508593", "bodyText": "Actually I guess we could use a constant for completed spans and a param for running spans, that seems to have more variable overhead. The main observation here is 1 million concurrent requests in a single app is probably not possible for almost all apps!", "author": "anuraaga", "createdAt": "2020-08-05T06:46:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUwNjkyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTk2OTg1Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1504#discussion_r465969852", "bodyText": "What should the constant be and what values should the param take? I left them as 1 million for now.", "author": "williamhu99", "createdAt": "2020-08-05T20:00:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUwNjkyMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUwNzYxNA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1504#discussion_r465507614", "bodyText": "I think it should be possible to pass this as a Gradle parameter if we need to tweak it, we don't need to copy the same benchmark over and over just to check many threads. On the flip side, it's probably nicer to just have a benchmark for each method that's a more important axis for comparison.", "author": "anuraaga", "createdAt": "2020-08-05T06:44:16Z", "path": "sdk_extensions/zpages/src/jmh/java/io/opentelemetry/sdk/extensions/zpages/TracezDataAggregatorBenchmark.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.extensions.zpages;\n+\n+import io.opentelemetry.sdk.OpenTelemetrySdk;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Status;\n+import io.opentelemetry.trace.Tracer;\n+import java.util.concurrent.TimeUnit;\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Level;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Threads;\n+import org.openjdk.jmh.annotations.Warmup;\n+import org.openjdk.jmh.infra.Blackhole;\n+\n+/** Benchmark class for {@link TracezDataAggregator}. */\n+@State(Scope.Benchmark)\n+public class TracezDataAggregatorBenchmark {\n+\n+  private static final String runningSpan = \"RUNNING_SPAN\";\n+  private static final String latencySpan = \"LATENCY_SPAN\";\n+  private static final String errorSpan = \"ERROR_SPAN\";\n+  private final Tracer tracer =\n+      OpenTelemetrySdk.getTracerProvider().get(\"TracezDataAggregatorBenchmark\");\n+  private final TracezSpanProcessor spanProcessor = TracezSpanProcessor.newBuilder().build();\n+  private final TracezDataAggregator dataAggregator = new TracezDataAggregator(spanProcessor);\n+\n+  @Setup(Level.Trial)\n+  public final void setup() {\n+    // Generate 1 million running spans, span latencies, and error spans\n+    for (int i = 0; i < 1000000; i++) {\n+      tracer.spanBuilder(runningSpan).startSpan();\n+      tracer.spanBuilder(latencySpan).startSpan().end();\n+      Span error = tracer.spanBuilder(errorSpan).startSpan();\n+      error.setStatus(Status.UNKNOWN);\n+      error.end();\n+    }\n+  }\n+\n+  /** Get span counts with 1 thread. */\n+  @Benchmark\n+  @Threads(value = 1)", "originalCommit": "f714b4397ad69538999336a4283c08c7a1b0e0a9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTg5NjMxMg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1504#discussion_r465896312", "bodyText": "Does JMH support this? I think this is one of the major limitations of the framework right now.", "author": "jkwatson", "createdAt": "2020-08-05T17:43:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUwNzYxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA4NjQ1Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1504#discussion_r466086452", "bodyText": "Ah I didn't think about wanting to generate the numbers for all the thread counts in one go. It seems fine then", "author": "anuraaga", "createdAt": "2020-08-06T01:06:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUwNzYxNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUwODk3NA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1504#discussion_r465508974", "bodyText": "Ditto thread can be passed in with a Gradle command, so we don't need to duplicate benchmarks for it.", "author": "anuraaga", "createdAt": "2020-08-05T06:47:30Z", "path": "sdk_extensions/zpages/src/jmh/java/io/opentelemetry/sdk/extensions/zpages/TracezSpanBucketsBenchmark.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.extensions.zpages;\n+\n+import io.opentelemetry.sdk.OpenTelemetrySdk;\n+import io.opentelemetry.sdk.trace.ReadableSpan;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Tracer;\n+import java.util.concurrent.TimeUnit;\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Level;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Threads;\n+import org.openjdk.jmh.annotations.Warmup;\n+\n+/** Benchmark class for {@link TracezSpanBuckets}. */\n+@State(Scope.Benchmark)\n+public class TracezSpanBucketsBenchmark {\n+\n+  private static final String spanName = \"BENCHMARK_SPAN\";\n+  private static ReadableSpan readableSpan;\n+  private TracezSpanBuckets bucket;\n+\n+  @Setup(Level.Trial)\n+  public final void setup() {\n+    bucket = new TracezSpanBuckets();\n+    Tracer tracer = OpenTelemetrySdk.getTracerProvider().get(\"TracezZPageBenchmark\");\n+    Span span = tracer.spanBuilder(spanName).startSpan();\n+    span.end();\n+    readableSpan = (ReadableSpan) span;\n+  }\n+\n+  @Benchmark\n+  @Threads(value = 1)\n+  @Fork(1)\n+  @Warmup(iterations = 5, time = 1)\n+  @Measurement(iterations = 10, time = 1)\n+  @OutputTimeUnit(TimeUnit.MILLISECONDS)\n+  public void addToBucket_01Thread() {", "originalCommit": "f714b4397ad69538999336a4283c08c7a1b0e0a9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTg5OTIxNA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1504#discussion_r465899214", "bodyText": "I actually disagree. Having all the thread options in one benchmark result is better than having to run them over and over again and collate the results from all the runs. If JMH supported passing in a range of thread values to test with, and it would do the collating, then I'd be more in favor of this approach.", "author": "jkwatson", "createdAt": "2020-08-05T17:48:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUwODk3NA=="}], "type": "inlineReview"}, {"oid": "922e95059d3616de987e26e7b127d7924cca8358", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/922e95059d3616de987e26e7b127d7924cca8358", "message": "Removed benchmark results from README and added a param to the TracezDataAggregator benchmark tests", "committedDate": "2020-08-05T20:15:45Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA4NzA0NA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1504#discussion_r466087044", "bodyText": "Can just pick some \"by feeling\" tiny, small, medium, large, huge numbers, maybe 1, 10, 1000, 1000000", "author": "anuraaga", "createdAt": "2020-08-06T01:08:24Z", "path": "sdk_extensions/zpages/src/jmh/java/io/opentelemetry/sdk/extensions/zpages/TracezDataAggregatorBenchmark.java", "diffHunk": "@@ -0,0 +1,167 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.extensions.zpages;\n+\n+import io.opentelemetry.sdk.OpenTelemetrySdk;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Status;\n+import io.opentelemetry.trace.Tracer;\n+import java.util.concurrent.TimeUnit;\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Level;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Param;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Threads;\n+import org.openjdk.jmh.annotations.Warmup;\n+import org.openjdk.jmh.infra.Blackhole;\n+\n+/** Benchmark class for {@link TracezDataAggregator}. */\n+@State(Scope.Benchmark)\n+public class TracezDataAggregatorBenchmark {\n+\n+  private static final String runningSpan = \"RUNNING_SPAN\";\n+  private static final String latencySpan = \"LATENCY_SPAN\";\n+  private static final String errorSpan = \"ERROR_SPAN\";\n+  private final Tracer tracer =\n+      OpenTelemetrySdk.getTracerProvider().get(\"TracezDataAggregatorBenchmark\");\n+  private final TracezSpanProcessor spanProcessor = TracezSpanProcessor.newBuilder().build();\n+  private final TracezDataAggregator dataAggregator = new TracezDataAggregator(spanProcessor);\n+\n+  @Param({\"1000000\"})", "originalCommit": "922e95059d3616de987e26e7b127d7924cca8358", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA4NzA5OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1504#discussion_r466087099", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // Generate 1 million running spans, span latencies, and error spans", "author": "anuraaga", "createdAt": "2020-08-06T01:08:34Z", "path": "sdk_extensions/zpages/src/jmh/java/io/opentelemetry/sdk/extensions/zpages/TracezDataAggregatorBenchmark.java", "diffHunk": "@@ -0,0 +1,167 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.extensions.zpages;\n+\n+import io.opentelemetry.sdk.OpenTelemetrySdk;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Status;\n+import io.opentelemetry.trace.Tracer;\n+import java.util.concurrent.TimeUnit;\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Level;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Param;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Threads;\n+import org.openjdk.jmh.annotations.Warmup;\n+import org.openjdk.jmh.infra.Blackhole;\n+\n+/** Benchmark class for {@link TracezDataAggregator}. */\n+@State(Scope.Benchmark)\n+public class TracezDataAggregatorBenchmark {\n+\n+  private static final String runningSpan = \"RUNNING_SPAN\";\n+  private static final String latencySpan = \"LATENCY_SPAN\";\n+  private static final String errorSpan = \"ERROR_SPAN\";\n+  private final Tracer tracer =\n+      OpenTelemetrySdk.getTracerProvider().get(\"TracezDataAggregatorBenchmark\");\n+  private final TracezSpanProcessor spanProcessor = TracezSpanProcessor.newBuilder().build();\n+  private final TracezDataAggregator dataAggregator = new TracezDataAggregator(spanProcessor);\n+\n+  @Param({\"1000000\"})\n+  private int numberOfSpans;\n+\n+  @Setup(Level.Trial)\n+  public final void setup() {\n+    // Generate 1 million running spans, span latencies, and error spans", "originalCommit": "922e95059d3616de987e26e7b127d7924cca8358", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "13d82c49fb7daa1bdeb2640dbfca59fdb275cb5d", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/13d82c49fb7daa1bdeb2640dbfca59fdb275cb5d", "message": "Update sdk_extensions/zpages/src/jmh/java/io/opentelemetry/sdk/extensions/zpages/TracezDataAggregatorBenchmark.java\n\nCo-authored-by: Anuraag Agrawal <anuraaga@gmail.com>", "committedDate": "2020-08-06T17:40:54Z", "type": "commit"}, {"oid": "5ab6f6afdbb19f3cb393ccb3be29fe4dd1893556", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/5ab6f6afdbb19f3cb393ccb3be29fe4dd1893556", "message": "Added multiple param values for TracezDataAggregatorBenchmark", "committedDate": "2020-08-06T18:10:19Z", "type": "commit"}, {"oid": "18a4141a519f15b4fa308d36501585f0f5c3f20d", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/18a4141a519f15b4fa308d36501585f0f5c3f20d", "message": "Merge branch 'master' of github.com:williamhu99/opentelemetry-java into master", "committedDate": "2020-08-06T18:10:36Z", "type": "commit"}]}