{"pr_number": 842, "pr_title": "AbstractBoundInstrument refcounts and keeps the state of mapped.", "pr_createdAt": "2020-02-10T18:57:23Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java/pull/842", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzg3NzYxOQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/842#discussion_r377877619", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Abstract class that extends the functionality of the BoundInstrument.\n          \n          \n            \n             * Abstract class that implements the basic functionality of the BoundInstrument.", "author": "jkwatson", "createdAt": "2020-02-11T20:24:01Z", "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/AbstractBoundInstrument.java", "diffHunk": "@@ -17,35 +17,64 @@\n package io.opentelemetry.sdk.metrics;\n \n import io.opentelemetry.metrics.InstrumentWithBinding.BoundInstrument;\n-import io.opentelemetry.metrics.LabelSet;\n+import java.util.concurrent.atomic.AtomicLong;\n \n+/**\n+ * Abstract class that extends the functionality of the BoundInstrument.", "originalCommit": "c2bb46c586dd8767f5cb329f9777c730a591a24f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQyMDgzNw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/842#discussion_r378420837", "bodyText": "done.", "author": "bogdandrutu", "createdAt": "2020-02-12T18:04:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzg3NzYxOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzg4MzMzMA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/842#discussion_r377883330", "bodyText": "why did you stop passing in the labelset?", "author": "jkwatson", "createdAt": "2020-02-11T20:35:55Z", "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/DoubleCounterSdk.java", "diffHunk": "@@ -38,14 +38,14 @@ private DoubleCounterSdk(\n \n   @Override\n   public void add(double delta, LabelSet labelSet) {\n-    BoundDoubleCounter boundDoubleCounter = bind(labelSet);\n-    boundDoubleCounter.add(delta);\n-    boundDoubleCounter.unbind();\n+    BoundInstrument boundInstrument = bind(labelSet);\n+    boundInstrument.add(delta);\n+    boundInstrument.unbind();\n   }\n \n   @Override\n-  public BoundDoubleCounter bind(LabelSet labelSet) {\n-    return new BoundInstrument(labelSet, monotonic);\n+  public BoundInstrument bind(LabelSet labelSet) {\n+    return new BoundInstrument(monotonic);", "originalCommit": "c2bb46c586dd8767f5cb329f9777c730a591a24f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ1MDg1Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/842#discussion_r378450852", "bodyText": "The mapping between LabelSet and bound will be in the AbstractInstrumentWithBinding (from #831 ) so unnecessary memory usage in the Bound to also keep a reference to the LabelSet.", "author": "bogdandrutu", "createdAt": "2020-02-12T19:01:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzg4MzMzMA=="}], "type": "inlineReview"}, {"oid": "12af5520ad04ee1ef2dd67825c130516401c251e", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/12af5520ad04ee1ef2dd67825c130516401c251e", "message": "AbstractBoundInstrument refcounts and keeps the state of mapped.\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>", "committedDate": "2020-02-12T18:03:30Z", "type": "forcePushed"}, {"oid": "219d1febce2c7310ee1db5a4eae7e1a748e1444c", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/219d1febce2c7310ee1db5a4eae7e1a748e1444c", "message": "AbstractBoundInstrument refcounts and keeps the state of mapped.\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>", "committedDate": "2020-02-12T18:04:49Z", "type": "commit"}, {"oid": "219d1febce2c7310ee1db5a4eae7e1a748e1444c", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/219d1febce2c7310ee1db5a4eae7e1a748e1444c", "message": "AbstractBoundInstrument refcounts and keeps the state of mapped.\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>", "committedDate": "2020-02-12T18:04:49Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ1OTcyOA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/842#discussion_r378459728", "bodyText": "don't we need to be passing the labelset in to the ABI here?", "author": "jkwatson", "createdAt": "2020-02-12T19:18:36Z", "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/DoubleCounterSdk.java", "diffHunk": "@@ -73,13 +73,12 @@ public int hashCode() {\n     return result;\n   }\n \n-  private static final class BoundInstrument extends AbstractBoundInstrument\n-      implements BoundDoubleCounter {\n+  static final class BoundInstrument extends AbstractBoundInstrument implements BoundDoubleCounter {\n \n     private final boolean monotonic;\n \n-    BoundInstrument(LabelSet labelSet, boolean monotonic) {\n-      super(labelSet);\n+    BoundInstrument(boolean monotonic) {\n+      super(null);", "originalCommit": "219d1febce2c7310ee1db5a4eae7e1a748e1444c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ2Mzc0Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/842#discussion_r378463743", "bodyText": "This is now the aggregation, will pass in a later PR :)", "author": "bogdandrutu", "createdAt": "2020-02-12T19:26:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ1OTcyOA=="}], "type": "inlineReview"}]}