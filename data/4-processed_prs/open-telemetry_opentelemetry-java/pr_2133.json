{"pr_number": 2133, "pr_title": "handle case insensitive logic for keys on context extraction in OpenTracing TracerShim", "pr_createdAt": "2020-11-25T12:41:17Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java/pull/2133", "timeline": [{"oid": "30f9442bf7db9ee2b33db8043e0f37d58b8addcc", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/30f9442bf7db9ee2b33db8043e0f37d58b8addcc", "message": "#2122 handle case insensitive logic for keys on context extraction in OpenTracing TracerShim\n\nSigned-off-by: Sergei Malafeev <sergei@malafeev.org>", "committedDate": "2020-11-25T12:40:37Z", "type": "commit"}, {"oid": "e40517a4ce049a7b7e6012fad539029bc4f78e3e", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/e40517a4ce049a7b7e6012fad539029bc4f78e3e", "message": "#2122 fix test\n\nSigned-off-by: Sergei Malafeev <sergei@malafeev.org>", "committedDate": "2020-11-25T13:08:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQ0MTMwNw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2133#discussion_r530441307", "bodyText": "If we plan to iterate over all the values per get() call, we should get rid of the intermediate temporary Map.", "author": "carlosalberto", "createdAt": "2020-11-25T15:05:37Z", "path": "opentracing-shim/src/main/java/io/opentelemetry/opentracingshim/Propagation.java", "diffHunk": "@@ -73,7 +73,12 @@ private TextMapGetter() {}\n \n     @Override\n     public String get(Map<String, String> carrier, String key) {\n-      return carrier.get(key);\n+      for (Map.Entry<String, String> entry : carrier.entrySet()) {", "originalCommit": "e40517a4ce049a7b7e6012fad539029bc4f78e3e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQ1NjMzMA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2133#discussion_r530456330", "bodyText": "I didn't remove temporary map because we need to implement\n@Override\npublic Iterable<String> keys(Map<String, String> carrier) {\n      return carrier.keySet();\n}\n\nif carrier will be TextMapExtract then to get keys I will need to create something temporal...", "author": "malafeev", "createdAt": "2020-11-25T15:26:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQ0MTMwNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDYwNDQ1NQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2133#discussion_r530604455", "bodyText": "do we need to sortByStartTime any more if we're not going to rely on the order? Also, why did this change make the times change?", "author": "jkwatson", "createdAt": "2020-11-25T19:39:34Z", "path": "opentracing-shim/src/test/java/io/opentelemetry/opentracingshim/testbed/clientserver/TestClientServerTest.java", "diffHunk": "@@ -47,17 +48,33 @@ void after() throws InterruptedException {\n   @Test\n   void test() throws Exception {\n     Client client = new Client(queue, tracer);\n-    client.send();\n+    client.send(false);\n+    verify();\n+  }\n+\n+  @Test\n+  public void testUpperCaseKeys() throws Exception {\n+    Client client = new Client(queue, tracer);\n+    client.send(true);\n+    verify();\n+  }\n \n+  private void verify() {\n     await().atMost(Duration.ofSeconds(15)).until(finishedSpansSize(otelTesting), equalTo(2));\n \n     List<SpanData> finished = otelTesting.getSpans();\n     assertThat(finished).hasSize(2);\n \n     finished = sortByStartTime(finished);\n     assertThat(finished.get(1).getTraceId()).isEqualTo(finished.get(0).getTraceId());\n-    assertThat(finished.get(0).getKind()).isEqualTo(Kind.CLIENT);\n-    assertThat(finished.get(1).getKind()).isEqualTo(Kind.SERVER);\n+    Kind firstSpanKind = finished.get(0).getKind();\n+    if (firstSpanKind == Kind.CLIENT) {", "originalCommit": "e40517a4ce049a7b7e6012fad539029bc4f78e3e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDczODkwOA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2133#discussion_r530738908", "bodyText": "I removed sorting. I guess that client and server spans are created too fast and we have kind of floating of nano seconds. If I put sleep(100) in the client then sorted order is client->server, but I prefer to avoid adding sleep.", "author": "malafeev", "createdAt": "2020-11-26T02:29:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDYwNDQ1NQ=="}], "type": "inlineReview"}, {"oid": "1028ebebde6adda595592a59beefe4df7807517f", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/1028ebebde6adda595592a59beefe4df7807517f", "message": "#2122 remove sort\n\nSigned-off-by: Sergei Malafeev <sergei@malafeev.org>", "committedDate": "2020-11-26T02:25:16Z", "type": "commit"}]}