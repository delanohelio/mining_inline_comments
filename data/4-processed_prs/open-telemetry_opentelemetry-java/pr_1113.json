{"pr_number": 1113, "pr_title": "Add flush method to [Span|Metric] Exporters", "pr_createdAt": "2020-04-15T14:02:03Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java/pull/1113", "timeline": [{"oid": "6f187905be7ed044aebcbf01ee8d0691e95a6918", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/6f187905be7ed044aebcbf01ee8d0691e95a6918", "message": "Add flush to exporters", "committedDate": "2020-04-15T10:36:48Z", "type": "commit"}, {"oid": "793364fa562f7f8e843b94f7c65eca0b32563d47", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/793364fa562f7f8e843b94f7c65eca0b32563d47", "message": "Add javadoc", "committedDate": "2020-04-15T14:01:03Z", "type": "commit"}, {"oid": "954bb24f75472f963ce1f400c58463d7f6702149", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/954bb24f75472f963ce1f400c58463d7f6702149", "message": "format", "committedDate": "2020-04-15T14:20:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkyNzE0Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1113#discussion_r408927143", "bodyText": "you can use an AtomicBoolean for this, and it reads a little bit cleaner.", "author": "jkwatson", "createdAt": "2020-04-15T15:21:02Z", "path": "exporters/logging/src/test/java/io/opentelemetry/exporters/logging/LoggingMetricExporterTest.java", "diffHunk": "@@ -96,4 +114,19 @@ public void testExport() {\n                         ImmutableMap.of(\"1\", \"2\", \"3\", \"4\"),\n                         33.7767)))));\n   }\n+\n+  @Test\n+  public void testFlush() {\n+    final boolean[] flushed = {false};", "originalCommit": "954bb24f75472f963ce1f400c58463d7f6702149", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkyNzc0OA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1113#discussion_r408927748", "bodyText": "I'd use the word \"export\" in here, rather than \"Process\"", "author": "jkwatson", "createdAt": "2020-04-15T15:21:53Z", "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/export/MetricExporter.java", "diffHunk": "@@ -52,6 +52,14 @@\n    */\n   ResultCode export(Collection<MetricData> metrics);\n \n+  /**\n+   * Processes the collection of {@link MetricData} that have not yet been processed.", "originalCommit": "954bb24f75472f963ce1f400c58463d7f6702149", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkyOTY0NA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1113#discussion_r408929644", "bodyText": "Same comment about using the word \"Export\", rather than \"Process\"", "author": "jkwatson", "createdAt": "2020-04-15T15:24:23Z", "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/export/SpanExporter.java", "diffHunk": "@@ -46,6 +46,14 @@\n    */\n   ResultCode export(Collection<SpanData> spans);\n \n+  /**\n+   * Processes the collection of sampled {@code Span}s that have not yet been processed.", "originalCommit": "954bb24f75472f963ce1f400c58463d7f6702149", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "053485b25e1193d27c29622fa96ca205b98e881e", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/053485b25e1193d27c29622fa96ca205b98e881e", "message": "Wording and tests", "committedDate": "2020-04-16T05:42:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTY0MzQ3Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1113#discussion_r409643473", "bodyText": "Should it continue trying to flush others?\nShould it log the exception?", "author": "Oberon00", "createdAt": "2020-04-16T15:22:19Z", "path": "exporters/logging/src/main/java/io/opentelemetry/exporters/logging/LoggingMetricExporter.java", "diffHunk": "@@ -34,6 +35,23 @@ public ResultCode export(Collection<MetricData> metrics) {\n     return ResultCode.SUCCESS;\n   }\n \n+  /**\n+   * Flushes the data.\n+   *\n+   * @return the result of the operation\n+   */\n+  @Override\n+  public ResultCode flush() {\n+    for (Handler handler : logger.getHandlers()) {\n+      try {\n+        handler.flush();\n+      } catch (Throwable t) {\n+        return ResultCode.FAILURE;", "originalCommit": "053485b25e1193d27c29622fa96ca205b98e881e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTY0NDA3Nw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1113#discussion_r409644077", "bodyText": "This should probably call flush.", "author": "Oberon00", "createdAt": "2020-04-16T15:23:11Z", "path": "exporters/logging/src/main/java/io/opentelemetry/exporters/logging/LoggingMetricExporter.java", "diffHunk": "@@ -34,6 +35,23 @@ public ResultCode export(Collection<MetricData> metrics) {\n     return ResultCode.SUCCESS;\n   }\n \n+  /**\n+   * Flushes the data.\n+   *\n+   * @return the result of the operation\n+   */\n+  @Override\n+  public ResultCode flush() {\n+    for (Handler handler : logger.getHandlers()) {\n+      try {\n+        handler.flush();\n+      } catch (Throwable t) {\n+        return ResultCode.FAILURE;\n+      }\n+    }\n+    return ResultCode.SUCCESS;\n+  }\n+\n   @Override\n   public void shutdown() {", "originalCommit": "053485b25e1193d27c29622fa96ca205b98e881e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "1b9e940a6f59d7895b1722dfa90ce2059a959226", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/1b9e940a6f59d7895b1722dfa90ce2059a959226", "message": "Flush all handler", "committedDate": "2020-04-17T13:40:59Z", "type": "commit"}, {"oid": "0410e09f25c686e238b53861db64f08d89bfb632", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/0410e09f25c686e238b53861db64f08d89bfb632", "message": "formatting", "committedDate": "2020-04-17T13:52:37Z", "type": "commit"}]}