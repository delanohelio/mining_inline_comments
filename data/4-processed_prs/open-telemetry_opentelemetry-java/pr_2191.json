{"pr_number": 2191, "pr_title": "Add array implementation of Context.", "pr_createdAt": "2020-12-03T09:51:17Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java/pull/2191", "timeline": [{"oid": "4c0e55c5c5224ea42eaade8b5e5651fe07673b26", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/4c0e55c5c5224ea42eaade8b5e5651fe07673b26", "message": "Add array implementation of Context.", "committedDate": "2020-12-03T09:45:12Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTQwMDM2MA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2191#discussion_r535400360", "bodyText": "Are we sure we want reference equality on this check?  It's probably an edge case, but you could avoid the .clone() in the .equals() case (at the expense of .equals()).", "author": "breedx-splk", "createdAt": "2020-12-03T16:46:13Z", "path": "context/src/main/java/io/opentelemetry/context/ArrayBasedContext.java", "diffHunk": "@@ -42,5 +45,40 @@ static Context root() {\n     return ROOT;\n   }\n \n-  private DefaultContext() {}\n+  private final Object[] entries;\n+\n+  private ArrayBasedContext(Object[] entries) {\n+    this.entries = entries;\n+  }\n+\n+  @Override\n+  @Nullable\n+  public <V> V get(ContextKey<V> key) {\n+    for (int i = 0; i < entries.length; i += 2) {\n+      if (entries[i] == key) {\n+        @SuppressWarnings(\"unchecked\")\n+        V result = (V) entries[i + 1];\n+        return result;\n+      }\n+    }\n+    return null;\n+  }\n+\n+  @Override\n+  public <V> Context with(ContextKey<V> key, V value) {\n+    for (int i = 0; i < entries.length; i += 2) {\n+      if (entries[i] == key) {\n+        if (entries[i + 1] == value) {", "originalCommit": "4c0e55c5c5224ea42eaade8b5e5651fe07673b26", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTc0MTE3NA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2191#discussion_r535741174", "bodyText": "Hmm - I think reference check is a no-brainer since there's no chance of any corner case. We haven't ever define whether values are treated by equals or not in the Context, the previous implementation just replaced the node without any sort of value check anyways. I'd like to stick to the safer approach at least for now.", "author": "anuraaga", "createdAt": "2020-12-04T00:15:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTQwMDM2MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTQwMjYxMA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2191#discussion_r535402610", "bodyText": "I haven't looked recently, but I heard a while ago that ArrayList does a size doubling thing to avoid extra allocations/copying.  Would that make sense here too?  Would probably also want to account for this in the get() by maintaining an additional size field or stopping on first null key.", "author": "breedx-splk", "createdAt": "2020-12-03T16:48:38Z", "path": "context/src/main/java/io/opentelemetry/context/ArrayBasedContext.java", "diffHunk": "@@ -42,5 +45,40 @@ static Context root() {\n     return ROOT;\n   }\n \n-  private DefaultContext() {}\n+  private final Object[] entries;\n+\n+  private ArrayBasedContext(Object[] entries) {\n+    this.entries = entries;\n+  }\n+\n+  @Override\n+  @Nullable\n+  public <V> V get(ContextKey<V> key) {\n+    for (int i = 0; i < entries.length; i += 2) {\n+      if (entries[i] == key) {\n+        @SuppressWarnings(\"unchecked\")\n+        V result = (V) entries[i + 1];\n+        return result;\n+      }\n+    }\n+    return null;\n+  }\n+\n+  @Override\n+  public <V> Context with(ContextKey<V> key, V value) {\n+    for (int i = 0; i < entries.length; i += 2) {\n+      if (entries[i] == key) {\n+        if (entries[i + 1] == value) {\n+          return this;\n+        }\n+        Object[] newEntries = entries.clone();\n+        newEntries[i + 1] = value;\n+        return new ArrayBasedContext(newEntries);\n+      }\n+    }\n+    Object[] newEntries = Arrays.copyOf(entries, entries.length + 2);", "originalCommit": "4c0e55c5c5224ea42eaade8b5e5651fe07673b26", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTc0NjQ5OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2191#discussion_r535746499", "bodyText": "I don't think so since context is immutable - we need to copy to a new array anytime a new context is created, so we wouldn't be able to take advantage of preallocated space I believe.", "author": "anuraaga", "createdAt": "2020-12-04T00:29:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTQwMjYxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIyNDIyNQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2191#discussion_r536224225", "bodyText": "Ah good point!  \ud83d\udc4d I overlooked that.", "author": "breedx-splk", "createdAt": "2020-12-04T16:31:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTQwMjYxMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTQwNTg5Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2191#discussion_r535405896", "bodyText": "Depending on whether or not you stick with == vs. .equals(), might be nice either way to have coverage that demonstrates the subtle difference (you get a new context instance when .equals() but not ==.", "author": "breedx-splk", "createdAt": "2020-12-03T16:51:55Z", "path": "context/src/test/java/io/opentelemetry/context/ContextTest.java", "diffHunk": "@@ -174,6 +174,10 @@ void withValues() {\n \n     assertThat(context4.get(ANIMAL)).isEqualTo(\"dog\");\n     assertThat(context4.get(BAG)).isNull();\n+\n+    Context context5 = context4.with(ANIMAL, \"dog\");\n+    assertThat(context5.get(ANIMAL)).isEqualTo(\"dog\");\n+    assertThat(context5).isSameAs(context4);\n   }", "originalCommit": "4c0e55c5c5224ea42eaade8b5e5651fe07673b26", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTc0NjcwMw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2191#discussion_r535746703", "bodyText": "Thanks this is a nice point, added a test.", "author": "anuraaga", "createdAt": "2020-12-04T00:29:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTQwNTg5Ng=="}], "type": "inlineReview"}, {"oid": "1c86a63cb37bd7ddacc99488ec3dda3717c88956", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/1c86a63cb37bd7ddacc99488ec3dda3717c88956", "message": "More test", "committedDate": "2020-12-04T03:52:52Z", "type": "commit"}, {"oid": "a8610a6c8527c02c84c5d339acce6fcd127d202b", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/a8610a6c8527c02c84c5d339acce6fcd127d202b", "message": "Merge branch 'master' of github.com:open-telemetry/opentelemetry-java into context-array", "committedDate": "2020-12-07T02:37:27Z", "type": "commit"}]}