{"pr_number": 1925, "pr_title": "Initial list of best practices to follow in our project", "pr_createdAt": "2020-10-29T20:58:34Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java/pull/1925", "timeline": [{"oid": "9f36bb5c13afc73482f473d4a402fec028d44332", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/9f36bb5c13afc73482f473d4a402fec028d44332", "message": "Initial list of best practices to follow in our project\n\nSigned-off-by: Bogdan Drutu <bogdandrutu@gmail.com>", "committedDate": "2020-10-29T20:59:13Z", "type": "commit"}, {"oid": "9f36bb5c13afc73482f473d4a402fec028d44332", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/9f36bb5c13afc73482f473d4a402fec028d44332", "message": "Initial list of best practices to follow in our project\n\nSigned-off-by: Bogdan Drutu <bogdandrutu@gmail.com>", "committedDate": "2020-10-29T20:59:13Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU2MzU0OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1925#discussion_r514563549", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * Use `final` everywhere is possible, this ensures that classes cannot be extended when the API does not intend to offer that functionality;\n          \n          \n            \n            * Use `final` classes everywhere it is possible, this ensures that these classes cannot be extended when the API does not intend to offer that functionality;", "author": "jkwatson", "createdAt": "2020-10-29T21:00:17Z", "path": "CONTRIBUTING.md", "diffHunk": "@@ -43,6 +43,13 @@ which uses [google-java-format](https://github.com/google/google-java-format) li\n \n `./gradlew spotless`\n \n+### Best practices that we follow\n+\n+* Avoid exposing publicly any class/method/variable that don't need to be public;\n+* By default, all arguments/members are treated as non-null. Every argument/member that can be `null` must be annotated with `@Nullable`;\n+* The project aims to provide a consistent experience across all the public APIs. It is important to ensure consistency (same look and feel) across different public packages;\n+* Use `final` everywhere is possible, this ensures that classes cannot be extended when the API does not intend to offer that functionality;", "originalCommit": "9f36bb5c13afc73482f473d4a402fec028d44332", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "d0470ab8a0d2aee14e115074954918f2e19d0554", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/d0470ab8a0d2aee14e115074954918f2e19d0554", "message": "Update CONTRIBUTING.md\n\nCo-authored-by: John Watson <jkwatson@gmail.com>", "committedDate": "2020-10-29T21:00:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYzNDM1Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1925#discussion_r514634352", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * Avoid exposing publicly any class/method/variable that don't need to be public;\n          \n          \n            \n            * By default, all arguments/members are treated as non-null. Every argument/member that can be `null` must be annotated with `@Nullable`;\n          \n          \n            \n            * The project aims to provide a consistent experience across all the public APIs. It is important to ensure consistency (same look and feel) across different public packages;\n          \n          \n            \n            * Use `final` classes everywhere it is possible, this ensures that these classes cannot be extended when the API does not intend to offer that functionality;\n          \n          \n            \n            * Avoid exposing publicly any class/method/variable that don't need to be public.\n          \n          \n            \n            * By default, all arguments/members are treated as non-null. Every argument/member that can be `null` must be annotated with `@Nullable`.\n          \n          \n            \n            * The project aims to provide a consistent experience across all the public APIs. It is important to ensure consistency (same look and feel) across different public packages.\n          \n          \n            \n            * Use `final` for public classes everywhere it is possible, this ensures that these classes cannot be extended when the API does not intend to offer that functionality.\n          \n          \n            \n            \n          \n          \n            \n            If you notice any practice being applied in the project consistently that isn't listed here, please consider a pull request to add it.", "author": "anuraaga", "createdAt": "2020-10-30T00:01:12Z", "path": "CONTRIBUTING.md", "diffHunk": "@@ -43,6 +43,13 @@ which uses [google-java-format](https://github.com/google/google-java-format) li\n \n `./gradlew spotless`\n \n+### Best practices that we follow\n+\n+* Avoid exposing publicly any class/method/variable that don't need to be public;\n+* By default, all arguments/members are treated as non-null. Every argument/member that can be `null` must be annotated with `@Nullable`;\n+* The project aims to provide a consistent experience across all the public APIs. It is important to ensure consistency (same look and feel) across different public packages;\n+* Use `final` classes everywhere it is possible, this ensures that these classes cannot be extended when the API does not intend to offer that functionality;", "originalCommit": "d0470ab8a0d2aee14e115074954918f2e19d0554", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYzNDY4NA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1925#discussion_r514634684", "bodyText": "Just some formatting and a note about adding to these when something's found.\nFor final classes do you mean public? I tend to not nit for package-private classes though we could be more strict about that if the consistency helps.", "author": "anuraaga", "createdAt": "2020-10-30T00:02:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYzNDM1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYzNTE2MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1925#discussion_r514635161", "bodyText": "I agree. It's most important for public classes on the API. Let's not go overboard if we don't have a good reason to.", "author": "jkwatson", "createdAt": "2020-10-30T00:04:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYzNDM1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYzNjU0Nw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1925#discussion_r514636547", "bodyText": "Cool - edited my suggestion to add \"for public\" to final", "author": "anuraaga", "createdAt": "2020-10-30T00:09:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYzNDM1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDkzMDUyNw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1925#discussion_r514930527", "bodyText": "If you notice any practice being applied in the project that isn't listed here, it would be great to add it\n\nI don't understand this sentence in the context of consistent experience. Also \"would be great to\" is not particularly actionable :)", "author": "iNikem", "createdAt": "2020-10-30T08:12:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYzNDM1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDk0MTYwMw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1925#discussion_r514941603", "bodyText": "I thought there may be things noticed that are consistent but not documented here so wanted to encourage people adding them. Is there a better wording, or should I remove it if it's too unclear?", "author": "anuraaga", "createdAt": "2020-10-30T08:36:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYzNDM1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDk1NjQxMA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1925#discussion_r514956410", "bodyText": "Encouragement may be good, but I think it should be as a separate sentence then. Not part of consistency section. Because that section does not actually list anything, so I got confused: \"listed here\" - where?", "author": "iNikem", "createdAt": "2020-10-30T09:05:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYzNDM1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDk1OTk0Nw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1925#discussion_r514959947", "bodyText": "Ah I see yeah - tried separating it out", "author": "anuraaga", "createdAt": "2020-10-30T09:12:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYzNDM1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTExMjc3Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1925#discussion_r515112772", "bodyText": "I would prefer for all the classes to use final (for consistency and showing clearly the intent), but definitely it is very important for everything that is public.", "author": "bogdandrutu", "createdAt": "2020-10-30T13:52:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYzNDM1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTExMzU5Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1925#discussion_r515113593", "bodyText": "Also @jkwatson made that correction for only classes, but methods as well in case the class is not final for whatever reason.", "author": "bogdandrutu", "createdAt": "2020-10-30T13:53:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYzNDM1Mg=="}], "type": "inlineReview"}, {"oid": "726ff76df9117c40ebcfcb325fca0f53d852210c", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/726ff76df9117c40ebcfcb325fca0f53d852210c", "message": "Update CONTRIBUTING.md\n\nCo-authored-by: Anuraag Agrawal <anuraaga@gmail.com>", "committedDate": "2020-10-30T13:51:08Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTI2NDYwMw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1925#discussion_r515264603", "bodyText": "Doesn't this somehow contradict #1935?\nBut note that this requirement might be annoying to follow in combination with Mockito which cannot mock final classes.", "author": "Oberon00", "createdAt": "2020-10-30T17:31:59Z", "path": "CONTRIBUTING.md", "diffHunk": "@@ -43,6 +43,15 @@ which uses [google-java-format](https://github.com/google/google-java-format) li\n \n `./gradlew spotless`\n \n+### Best practices that we follow\n+\n+* Avoid exposing publicly any class/method/variable that don't need to be public.\n+* By default, all arguments/members are treated as non-null. Every argument/member that can be `null` must be annotated with `@Nullable`.\n+* The project aims to provide a consistent experience across all the public APIs. It is important to ensure consistency (same look and feel) across different public packages.\n+* Use `final` for public classes everywhere it is possible, this ensures that these classes cannot be extended when the API does not intend to offer that functionality.", "originalCommit": "726ff76df9117c40ebcfcb325fca0f53d852210c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTI2OTY3Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1925#discussion_r515269672", "bodyText": "It says to use it for classes, but if there's an interface, obviously that can't be final. I think we should prefer interfaces to public classes in the public API, at least as much as we can.", "author": "jkwatson", "createdAt": "2020-10-30T17:37:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTI2NDYwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQ0ODI5MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1925#discussion_r515448291", "bodyText": "Mockito can mock final classes now adays and it's awesome :)", "author": "anuraaga", "createdAt": "2020-10-31T03:10:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTI2NDYwMw=="}], "type": "inlineReview"}]}