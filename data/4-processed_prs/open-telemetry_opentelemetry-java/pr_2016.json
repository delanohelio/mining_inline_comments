{"pr_number": 2016, "pr_title": "Implement baggage using array of key/value pairs instead of Map.", "pr_createdAt": "2020-11-05T10:14:11Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java/pull/2016", "timeline": [{"oid": "aa2b0dfb13ee4b83baf56da5f285aa5137ffd5ef", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/aa2b0dfb13ee4b83baf56da5f285aa5137ffd5ef", "message": "Implement baggage using array of key/value pairs instead of Map.", "committedDate": "2020-11-05T10:11:08Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk0NjU2Nw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2016#discussion_r518946567", "bodyText": "I believe the original implementation intentionally was built not to make copies of all the data, but rely on traversing up the stack. I've been told by @bogdandrutu that this was a very large CPU/memory savings at google. Something to consider before we remove that implementation detail.", "author": "jkwatson", "createdAt": "2020-11-06T19:01:54Z", "path": "api/src/main/java/io/opentelemetry/api/baggage/ImmutableBaggage.java", "diffHunk": "@@ -160,38 +97,48 @@ public String toString() {\n \n     @Override\n     public Baggage.Builder put(String key, String value, EntryMetadata entryMetadata) {\n-      entries.put(\n-          Objects.requireNonNull(key, \"key\"),\n-          Entry.create(\n-              key,\n-              Objects.requireNonNull(value, \"value\"),\n-              Objects.requireNonNull(entryMetadata, \"entryMetadata\")));\n+      requireNonNull(key, \"key\");\n+      requireNonNull(value, \"value\");\n+      requireNonNull(entryMetadata, \"entryMetadata\");\n+\n+      data.add(key);\n+      data.add(Entry.create(key, value, entryMetadata));\n       return this;\n     }\n \n     @Override\n     public Baggage.Builder put(String key, String value) {\n-      entries.put(\n-          Objects.requireNonNull(key, \"key\"),\n-          Entry.create(key, Objects.requireNonNull(value, \"value\"), EntryMetadata.EMPTY));\n-      return this;\n+      requireNonNull(key, \"key\");\n+      requireNonNull(value, \"value\");\n+      return put(key, value, EntryMetadata.EMPTY);\n     }\n \n     @Override\n     public Baggage.Builder remove(String key) {\n-      entries.remove(Objects.requireNonNull(key, \"key\"));\n-      if (parent != null && parent.getEntryValue(key) != null) {\n-        entries.put(key, null);\n-      }\n+      requireNonNull(key, \"key\");\n+      data.add(key);\n+      data.add(null);\n       return this;\n     }\n \n     @Override\n-    public ImmutableBaggage build() {\n+    public Baggage build() {\n       if (parent == null && !noImplicitParent) {\n         parent = Baggage.current();\n       }\n-      return new ImmutableBaggage(entries, parent);\n+\n+      List<Object> data = this.data;\n+      if (parent != null && !parent.isEmpty()) {\n+        List<Object> merged = new ArrayList<>(parent.size() * 2 + data.size());\n+        parent.forEach(\n+            (key, value, metadata) -> {\n+              merged.add(key);\n+              merged.add(Entry.create(key, value, metadata));\n+            });\n+        merged.addAll(data);", "originalCommit": "aa2b0dfb13ee4b83baf56da5f285aa5137ffd5ef", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTE1MDczOA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2016#discussion_r519150738", "bodyText": "Yeah but I don't know if we can make it efficient. Previously we were actually copying everything when calling getEntries. Now with forEach, there's still the questionable seenKeys stuff. And I can't think of a way to fix the bug with equals without similar copying with the parent approach - actually it's exactly what Sleuth is currently doing to work around our equals being broken :P So the up-front copy seems ok to me.", "author": "anuraaga", "createdAt": "2020-11-07T08:05:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk0NjU2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTMwNzk5Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2016#discussion_r519307993", "bodyText": "By the way, noticed that opencensus API doesn't actually allow end users to access tags (baggage)\nhttps://github.com/census-instrumentation/opencensus-java/blob/master/api/src/main/java/io/opencensus/tags/TagContext.java#L42\nIt appears the default implementation does seem to not use parenting and expose the tags directly, presumably requiring a downcast though not sure.\nhttps://github.com/census-instrumentation/opencensus-java/blob/master/impl_core/src/main/java/io/opencensus/implcore/tags/TagMapImpl.java\nIt seems this latter one is closer to our spec and is what we want to implement here. I think a custom baggage propagator + baggage implementation should be possible still for those that want to prioritize marshalling at the expense of access speed, but I don't think it should be our default.", "author": "anuraaga", "createdAt": "2020-11-08T09:08:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk0NjU2Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk0ODAwMQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2016#discussion_r518948001", "bodyText": "this does bum me out quite a bit. By making this public, we've now exposed implementation details on all of Attributes, Labels and Baggage that could easily be abused. Can we make this protected, so the subclasses get access, but the public does not?", "author": "jkwatson", "createdAt": "2020-11-06T19:04:59Z", "path": "api/src/main/java/io/opentelemetry/api/internal/ImmutableKeyValuePairs.java", "diffHunk": "@@ -3,34 +3,36 @@\n  * SPDX-License-Identifier: Apache-2.0\n  */\n \n-package io.opentelemetry.api.common;\n+package io.opentelemetry.api.internal;\n \n import static io.opentelemetry.api.internal.Utils.checkArgument;\n \n+import io.opentelemetry.api.common.Attributes;\n+import io.opentelemetry.api.common.Labels;\n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.List;\n import javax.annotation.Nullable;\n import javax.annotation.concurrent.Immutable;\n \n /**\n- * An immutable set of key-value pairs. Keys are only {@link String} typed.\n+ * An immutable set of key-value pairs.\n  *\n  * <p>Key-value pairs are dropped for {@code null} or empty keys.\n  *\n  * <p>Note: for subclasses of this, null keys will be removed, but if your key has another concept\n- * of being \"empty\", you'll need to remove them before calling {@link #sortAndFilter(Object[])},\n- * assuming you don't want the \"empty\" keys to be kept in your collection.\n+ * of being \"empty\", you'll need to remove them before calling {@link #sortAndFilter(Object[],\n+ * boolean)}, assuming you don't want the \"empty\" keys to be kept in your collection.\n  *\n  * @param <V> The type of the values contained in this.\n  * @see Labels\n  * @see Attributes\n  */\n @SuppressWarnings(\"rawtypes\")\n @Immutable\n-abstract class ImmutableKeyValuePairs<K, V> {\n+public abstract class ImmutableKeyValuePairs<K, V> {\n \n-  List<Object> data() {\n+  public List<Object> data() {", "originalCommit": "aa2b0dfb13ee4b83baf56da5f285aa5137ffd5ef", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk0ODk5NA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2016#discussion_r518948994", "bodyText": "Just tried it locally, and yes, we can make this protected. I'll feel much better about things then.", "author": "jkwatson", "createdAt": "2020-11-06T19:06:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk0ODAwMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk1NTI5Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2016#discussion_r518955292", "bodyText": "and also all the subclasses can likewise have their overrides made protected.", "author": "jkwatson", "createdAt": "2020-11-06T19:20:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk0ODAwMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTE1MDM2Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2016#discussion_r519150362", "bodyText": "Sweet thanks!", "author": "anuraaga", "createdAt": "2020-11-07T08:01:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk0ODAwMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk1Mjk4MA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2016#discussion_r518952980", "bodyText": "could we send in true here, and get rid of lines 175-177?", "author": "jkwatson", "createdAt": "2020-11-06T19:15:27Z", "path": "api/src/main/java/io/opentelemetry/api/common/Attributes.java", "diffHunk": "@@ -175,7 +176,8 @@ private static Attributes sortAndFilterToAttributes(Object... data) {\n         data[i] = null;\n       }\n     }\n-    return new AutoValue_Attributes_ArrayBackedAttributes(sortAndFilter(data));\n+    return new AutoValue_Attributes_ArrayBackedAttributes(\n+        sortAndFilter(data, /* filterNullValues= */ false));", "originalCommit": "aa2b0dfb13ee4b83baf56da5f285aa5137ffd5ef", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "ca8249a69026b7a78999090a7e9cae36906f2f1d", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/ca8249a69026b7a78999090a7e9cae36906f2f1d", "message": "Cleanup", "committedDate": "2020-11-07T08:02:42Z", "type": "commit"}]}