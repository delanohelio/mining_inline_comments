{"pr_number": 951, "pr_title": "A very simple logging metric exporter", "pr_createdAt": "2020-02-28T23:01:56Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java/pull/951", "timeline": [{"oid": "d173e69d0c22eaf3133bdda7727cad4cde9cc92a", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/d173e69d0c22eaf3133bdda7727cad4cde9cc92a", "message": "A very simple logging exporter for metrics.", "committedDate": "2020-02-28T23:01:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk2NTYwOQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/951#discussion_r385965609", "bodyText": "I think we should plugin this with the interval reader so that it prints periodically to the logs.", "author": "bogdandrutu", "createdAt": "2020-02-28T23:19:23Z", "path": "exporters/logging/src/main/java/io/opentelemetry/exporters/logging/LoggingMetricExporter.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.exporters.logging;\n+\n+import io.opentelemetry.sdk.metrics.data.MetricData;\n+import io.opentelemetry.sdk.metrics.export.MetricExporter;\n+import java.util.Collection;\n+import java.util.logging.Logger;\n+\n+public class LoggingMetricExporter implements MetricExporter {\n+  private static final Logger logger = Logger.getLogger(LoggingMetricExporter.class.getName());\n+\n+  @Override\n+  public ResultCode export(Collection<MetricData> metrics) {\n+    logger.info(\"Received a collection of \" + metrics.size() + \" metrics for export.\");\n+    for (MetricData metricData : metrics) {\n+      logger.info(\"metric: \" + metricData);\n+    }\n+    return ResultCode.SUCCESS;\n+  }\n+}", "originalCommit": "d173e69d0c22eaf3133bdda7727cad4cde9cc92a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk2Njk0Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/951#discussion_r385966943", "bodyText": "I think so too. Wasn't sure if it should be part of this PR, or a follow-on.", "author": "jkwatson", "createdAt": "2020-02-28T23:24:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk2NTYwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk2Njk5Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/951#discussion_r385966993", "bodyText": "also, that hasn't been merged yet. ;)", "author": "jkwatson", "createdAt": "2020-02-28T23:24:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk2NTYwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA1OTY5OA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/951#discussion_r386059698", "bodyText": "Hey, what do you think about using the {} placeholder? just to avoid the toString in case of warn log level", "author": "davebarda", "createdAt": "2020-02-29T22:22:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk2NTYwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjUxOTE1NQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/951#discussion_r386519155", "bodyText": "Probably not a big deal with this particular use-case, since these exporters aren't really meant to be used outside of experimental/demo cases, and not in production. I can put a PR in to change them, though, as it is better to demonstrate the proper usage.", "author": "jkwatson", "createdAt": "2020-03-02T16:55:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk2NTYwOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk3ODU5Nw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/951#discussion_r385978597", "bodyText": "Please add the comment for the test class :)", "author": "bogdandrutu", "createdAt": "2020-02-29T00:20:00Z", "path": "exporters/logging/src/test/java/io/opentelemetry/exporters/logging/LoggingMetricExporterTest.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.exporters.logging;\n+\n+import com.google.common.collect.ImmutableMap;\n+import io.opentelemetry.sdk.common.InstrumentationLibraryInfo;\n+import io.opentelemetry.sdk.metrics.data.MetricData;\n+import io.opentelemetry.sdk.metrics.data.MetricData.Descriptor;\n+import io.opentelemetry.sdk.metrics.data.MetricData.Descriptor.Type;\n+import io.opentelemetry.sdk.metrics.data.MetricData.DoublePoint;\n+import io.opentelemetry.sdk.metrics.data.MetricData.LongPoint;\n+import io.opentelemetry.sdk.metrics.data.MetricData.Point;\n+import io.opentelemetry.sdk.metrics.data.MetricData.SummaryPoint;\n+import io.opentelemetry.sdk.metrics.data.MetricData.ValueAtPercentile;\n+import io.opentelemetry.sdk.resources.Resource;\n+import io.opentelemetry.trace.AttributeValue;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import org.junit.Test;\n+\n+public class LoggingMetricExporterTest {", "originalCommit": "d173e69d0c22eaf3133bdda7727cad4cde9cc92a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk5NDc5Nw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/951#discussion_r385994797", "bodyText": "Can do. But, is there a reason why we're doing this? I've literally never seen this done before.", "author": "jkwatson", "createdAt": "2020-02-29T02:53:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk3ODU5Nw=="}], "type": "inlineReview"}, {"oid": "1729fcd21973ebf1370d7809f281a84b1aae231b", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/1729fcd21973ebf1370d7809f281a84b1aae231b", "message": "add comments about what we're testing.", "committedDate": "2020-02-29T02:55:36Z", "type": "commit"}, {"oid": "2338f709807cc367163b5bf6a0b97c758fd8f522", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/2338f709807cc367163b5bf6a0b97c758fd8f522", "message": "follow the rules", "committedDate": "2020-02-29T02:59:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA0NDEwMw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/951#discussion_r386044103", "bodyText": "not sure if we follow the standard of uppercase for static final?\nchange to LOGGER?", "author": "sfriberg", "createdAt": "2020-02-29T17:52:25Z", "path": "exporters/logging/src/main/java/io/opentelemetry/exporters/logging/LoggingMetricExporter.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.exporters.logging;\n+\n+import io.opentelemetry.sdk.metrics.data.MetricData;\n+import io.opentelemetry.sdk.metrics.export.MetricExporter;\n+import java.util.Collection;\n+import java.util.logging.Logger;\n+\n+public class LoggingMetricExporter implements MetricExporter {\n+  private static final Logger logger = Logger.getLogger(LoggingMetricExporter.class.getName());", "originalCommit": "2338f709807cc367163b5bf6a0b97c758fd8f522", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA0OTIxNw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/951#discussion_r386049217", "bodyText": "The standard says to use upper case for immutable classes, and not sure if Logger is", "author": "bogdandrutu", "createdAt": "2020-02-29T19:16:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA0NDEwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA1NDIwMA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/951#discussion_r386054200", "bodyText": "??? citation needed.\nWhat standard is this?", "author": "jkwatson", "createdAt": "2020-02-29T20:38:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA0NDEwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA1ODYyMw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/951#discussion_r386058623", "bodyText": "https://google.github.io/styleguide/javaguide.html#s5.2.4-constant-names\nDidn't know it also took the object immutability into account.", "author": "sfriberg", "createdAt": "2020-02-29T22:01:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA0NDEwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjEyNTIxNg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/951#discussion_r386125216", "bodyText": "@jkwatson here is the prof that we use that standard :) https://github.com/open-telemetry/opentelemetry-java/blob/master/CONTRIBUTING.md#style-guideline", "author": "bogdandrutu", "createdAt": "2020-03-01T17:26:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA0NDEwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjUxODQ2OA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/951#discussion_r386518468", "bodyText": "Interesting. Yes, loggers are definitely not side-effect free, so not \"immutable\" by this definition, I guess? Thanks for the links!", "author": "jkwatson", "createdAt": "2020-03-02T16:54:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA0NDEwMw=="}], "type": "inlineReview"}]}