{"pr_number": 952, "pr_title": "Implement collectAll for observers, need to still install default aggregation", "pr_createdAt": "2020-02-29T00:50:26Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java/pull/952", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk5NTUzOQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/952#discussion_r385995539", "bodyText": "Probably a minor issue, since this is only called once per collection cycle, but I'd prefer to see this be a concrete, rather than anonymous class.", "author": "jkwatson", "createdAt": "2020-02-29T03:08:21Z", "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/LongObserverSdk.java", "diffHunk": "@@ -34,8 +43,31 @@\n   }\n \n   @Override\n-  public void setCallback(Callback<LongObserver.ResultLongObserver> metricUpdater) {\n-    throw new UnsupportedOperationException(\"to be implemented\");\n+  List<MetricData> collectAll() {\n+    Callback<ResultLongObserver> currentMetricUpdater = metricUpdater;\n+    if (currentMetricUpdater == null) {\n+      return Collections.emptyList();\n+    }\n+    final ActiveBatcher activeBatcher = getActiveBatcher();\n+    currentMetricUpdater.update(\n+        new ResultLongObserver() {", "originalCommit": "05943b393aeb9629d094fb9480dfcfe9f03e7e62", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjEzMzk4OA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/952#discussion_r386133988", "bodyText": "Done.", "author": "bogdandrutu", "createdAt": "2020-03-01T19:33:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk5NTUzOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk5NTYyMA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/952#discussion_r385995620", "bodyText": "same comment here about having this be a concrete, rather than an anonymous class.", "author": "jkwatson", "createdAt": "2020-02-29T03:09:43Z", "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/DoubleObserverSdk.java", "diffHunk": "@@ -33,9 +42,32 @@\n         monotonic);\n   }\n \n+  @Override\n+  List<MetricData> collectAll() {\n+    Callback<ResultDoubleObserver> currentMetricUpdater = metricUpdater;\n+    if (currentMetricUpdater == null) {\n+      return Collections.emptyList();\n+    }\n+    final ActiveBatcher activeBatcher = getActiveBatcher();\n+    currentMetricUpdater.update(\n+        new ResultDoubleObserver() {", "originalCommit": "05943b393aeb9629d094fb9480dfcfe9f03e7e62", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjEzNDAyMw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/952#discussion_r386134023", "bodyText": "Done.", "author": "bogdandrutu", "createdAt": "2020-03-01T19:33:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk5NTYyMA=="}], "type": "inlineReview"}, {"oid": "17ea5f7173af5da161475c03e779e5cb57aa8e89", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/17ea5f7173af5da161475c03e779e5cb57aa8e89", "message": "Implement collectAll for observers, need to still install default aggregation\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>", "committedDate": "2020-03-01T19:29:36Z", "type": "commit"}, {"oid": "af84c5dbfb22e0ec67bec391b884fcbe6058a772", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/af84c5dbfb22e0ec67bec391b884fcbe6058a772", "message": "Move result callbacks as inner classes.\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>", "committedDate": "2020-03-01T19:34:00Z", "type": "commit"}, {"oid": "af84c5dbfb22e0ec67bec391b884fcbe6058a772", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/af84c5dbfb22e0ec67bec391b884fcbe6058a772", "message": "Move result callbacks as inner classes.\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>", "committedDate": "2020-03-01T19:34:00Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjIzMzg1MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/952#discussion_r386233851", "bodyText": "Since you check for null values in collectAll(), I would drop this requirement. This way, we can remove a callback after it is set", "author": "thisthat", "createdAt": "2020-03-02T07:39:01Z", "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/DoubleObserverSdk.java", "diffHunk": "@@ -33,9 +42,20 @@\n         monotonic);\n   }\n \n+  @Override\n+  List<MetricData> collectAll() {\n+    Callback<ResultDoubleObserver> currentMetricUpdater = metricUpdater;\n+    if (currentMetricUpdater == null) {\n+      return Collections.emptyList();\n+    }\n+    final ActiveBatcher activeBatcher = getActiveBatcher();\n+    currentMetricUpdater.update(new ResultDoubleObserverSdk(activeBatcher, isMonotonic()));\n+    return activeBatcher.completeCollectionCycle();\n+  }\n+\n   @Override\n   public void setCallback(Callback<DoubleObserver.ResultDoubleObserver> metricUpdater) {\n-    throw new UnsupportedOperationException(\"to be implemented\");\n+    this.metricUpdater = Utils.checkNotNull(metricUpdater, \"metricUpdater\");", "originalCommit": "af84c5dbfb22e0ec67bec391b884fcbe6058a772", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA3MjczMQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/952#discussion_r387072731", "bodyText": "Not sure if that is the behavior I am looking for, I would like to start more restrictive than open the requirements instead of the other way around (backwards incompatible change).", "author": "bogdandrutu", "createdAt": "2020-03-03T14:53:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjIzMzg1MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzUyMDM4MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/952#discussion_r387520381", "bodyText": "Thx for the explanation! I now agree with you \ud83d\ude04", "author": "thisthat", "createdAt": "2020-03-04T08:46:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjIzMzg1MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjIzNDA1OA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/952#discussion_r386234058", "bodyText": "The same comment applies here", "author": "thisthat", "createdAt": "2020-03-02T07:39:43Z", "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/LongObserverSdk.java", "diffHunk": "@@ -34,8 +43,19 @@\n   }\n \n   @Override\n-  public void setCallback(Callback<LongObserver.ResultLongObserver> metricUpdater) {\n-    throw new UnsupportedOperationException(\"to be implemented\");\n+  List<MetricData> collectAll() {\n+    Callback<ResultLongObserver> currentMetricUpdater = metricUpdater;\n+    if (currentMetricUpdater == null) {\n+      return Collections.emptyList();\n+    }\n+    final ActiveBatcher activeBatcher = getActiveBatcher();\n+    currentMetricUpdater.update(new ResultLongObserverSdk(activeBatcher, isMonotonic()));\n+    return activeBatcher.completeCollectionCycle();\n+  }\n+\n+  @Override\n+  public void setCallback(Callback<ResultLongObserver> metricUpdater) {\n+    this.metricUpdater = Utils.checkNotNull(metricUpdater, \"metricUpdater\");", "originalCommit": "af84c5dbfb22e0ec67bec391b884fcbe6058a772", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}