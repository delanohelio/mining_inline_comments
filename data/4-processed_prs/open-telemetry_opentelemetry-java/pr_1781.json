{"pr_number": 1781, "pr_title": "Add GitHub workflows to automate releases", "pr_createdAt": "2020-10-12T06:33:37Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java/pull/1781", "timeline": [{"oid": "064a1d5015e1b95d9c80b2423138d511bae90eed", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/064a1d5015e1b95d9c80b2423138d511bae90eed", "message": "Add GitHub workflows to automate releases", "committedDate": "2020-10-12T06:34:19Z", "type": "commit"}, {"oid": "064a1d5015e1b95d9c80b2423138d511bae90eed", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/064a1d5015e1b95d9c80b2423138d511bae90eed", "message": "Add GitHub workflows to automate releases", "committedDate": "2020-10-12T06:34:19Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzA5MDE1Nw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1781#discussion_r503090157", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        enable.docker.tests=trued\n          \n          \n            \n                        enable.docker.tests=true", "author": "iNikem", "createdAt": "2020-10-12T07:28:12Z", "path": ".github/workflows/patch-release-build.yml", "diffHunk": "@@ -0,0 +1,99 @@\n+name: Patch Release Build\n+on:\n+  workflow_dispatch:\n+    inputs:\n+      version:\n+        description: The version to tag the release with, e.g., 1.2.1, 1.2.2\n+        required: true\n+      commits:\n+        description: Comma separated list of commit shas to cherrypick\n+        required: true\n+\n+jobs:\n+  prepare-release-branch:\n+    runs-on: ubuntu-latest\n+    outputs:\n+      release-branch-name: ${{ steps.parse-release-branch.outputs.release-branch-name }}\n+    steps:\n+      - id: parse-release-branch\n+        name: Parse release branch name\n+        run: |\n+          # Sets the release-branch-name output to the version number with the last non-period element replaced with an 'x' and preprended with v.\n+          echo \"::set-output name=release-branch-name::$(echo '${{ github.event.inputs.version }}' | sed -E 's/([^.]+)\\.([^.]+)\\.([^.]+)/v\\1.\\2.x/')\"\n+          # Sets the release-tag-name output to the version number with the last non-period element replace with a '0' and prepended with v\n+          echo \"::set-output name=release-tag-name::$(echo '${{ github.event.inputs.version }}' | sed -E 's/([^.]+)\\.([^.]+)\\.([^.]+)/v\\1.\\2.0/')\"\n+      - id: checkout-release-branch\n+        name: Check out release branch\n+        continue-on-error: true\n+        uses: actions/checkout@v2\n+        with:\n+          ref: ${{ steps.parse-release-branch.outputs.release-branch-name }}\n+      - id: checkout-release-tag\n+        name: Check out release tag\n+        if: ${{ steps.checkout-release-branch.outcome == 'failure' }}\n+        uses: actions/checkout@v2\n+        with:\n+          ref: ${{ steps.parse-release-branch.outputs.release-tag-name }}\n+      - name: Create release branch\n+        if: ${{ steps.checkout-release-tag.outcome == 'success' }}\n+        run: |\n+          git checkout -b ${{ steps.parse-release-branch.outputs.release-branch-name }}\n+          git push --set-upstream origin ${{ steps.parse-release-branch.outputs.release-branch-name }}\n+  build:\n+    runs-on: ubuntu-latest\n+    needs: prepare-release-branch\n+    steps:\n+      - name: Checkout release branch\n+        uses: actions/checkout@v2\n+        with:\n+          ref: ${{ needs.prepare-release-branch.outputs.release-branch-name }}\n+          submodules: true\n+      - uses: actions/setup-java@v1\n+        with:\n+          java-version: 11\n+      - name: Setup git name\n+        run: |\n+          git config user.name github-actions\n+          git config user.email github-actions@github.com\n+      - name: Cherrypicks\n+        run: |\n+          git fetch origin master\n+          echo ${{ github.event.inputs.commits }} | sed -n 1'p' | tr ',' '\\n' | while read word; do\n+              # Trim whitespaces and cherrypick\n+              echo $word | sed 's/ *$//g' | sed 's/^ *//g' | git cherry-pick --stdin\n+          done\n+      - uses: burrunan/gradle-cache-action@v1.5\n+        with:\n+          job-id: jdk11\n+          remote-build-cache-proxy-enabled: false\n+          arguments: build --stacktrace -Prelease.version=${{ github.event.inputs.version }}\n+          properties: |\n+            enable.docker.tests=true\n+      - name: Publish artifacts\n+        uses: burrunan/gradle-cache-action@v1.5\n+        with:\n+          job-id: jdk11\n+          remote-build-cache-proxy-enabled: false\n+          arguments: final --stacktrace -Prelease.version=${{ github.event.inputs.version }}\n+          properties: |\n+            enable.docker.tests=trued", "originalCommit": "064a1d5015e1b95d9c80b2423138d511bae90eed", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzA5MDMxOQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1781#discussion_r503090319", "bodyText": "Isn't this set by GHA?", "author": "iNikem", "createdAt": "2020-10-12T07:28:29Z", "path": ".github/workflows/patch-release-build.yml", "diffHunk": "@@ -0,0 +1,99 @@\n+name: Patch Release Build\n+on:\n+  workflow_dispatch:\n+    inputs:\n+      version:\n+        description: The version to tag the release with, e.g., 1.2.1, 1.2.2\n+        required: true\n+      commits:\n+        description: Comma separated list of commit shas to cherrypick\n+        required: true\n+\n+jobs:\n+  prepare-release-branch:\n+    runs-on: ubuntu-latest\n+    outputs:\n+      release-branch-name: ${{ steps.parse-release-branch.outputs.release-branch-name }}\n+    steps:\n+      - id: parse-release-branch\n+        name: Parse release branch name\n+        run: |\n+          # Sets the release-branch-name output to the version number with the last non-period element replaced with an 'x' and preprended with v.\n+          echo \"::set-output name=release-branch-name::$(echo '${{ github.event.inputs.version }}' | sed -E 's/([^.]+)\\.([^.]+)\\.([^.]+)/v\\1.\\2.x/')\"\n+          # Sets the release-tag-name output to the version number with the last non-period element replace with a '0' and prepended with v\n+          echo \"::set-output name=release-tag-name::$(echo '${{ github.event.inputs.version }}' | sed -E 's/([^.]+)\\.([^.]+)\\.([^.]+)/v\\1.\\2.0/')\"\n+      - id: checkout-release-branch\n+        name: Check out release branch\n+        continue-on-error: true\n+        uses: actions/checkout@v2\n+        with:\n+          ref: ${{ steps.parse-release-branch.outputs.release-branch-name }}\n+      - id: checkout-release-tag\n+        name: Check out release tag\n+        if: ${{ steps.checkout-release-branch.outcome == 'failure' }}\n+        uses: actions/checkout@v2\n+        with:\n+          ref: ${{ steps.parse-release-branch.outputs.release-tag-name }}\n+      - name: Create release branch\n+        if: ${{ steps.checkout-release-tag.outcome == 'success' }}\n+        run: |\n+          git checkout -b ${{ steps.parse-release-branch.outputs.release-branch-name }}\n+          git push --set-upstream origin ${{ steps.parse-release-branch.outputs.release-branch-name }}\n+  build:\n+    runs-on: ubuntu-latest\n+    needs: prepare-release-branch\n+    steps:\n+      - name: Checkout release branch\n+        uses: actions/checkout@v2\n+        with:\n+          ref: ${{ needs.prepare-release-branch.outputs.release-branch-name }}\n+          submodules: true\n+      - uses: actions/setup-java@v1\n+        with:\n+          java-version: 11\n+      - name: Setup git name\n+        run: |\n+          git config user.name github-actions\n+          git config user.email github-actions@github.com\n+      - name: Cherrypicks\n+        run: |\n+          git fetch origin master\n+          echo ${{ github.event.inputs.commits }} | sed -n 1'p' | tr ',' '\\n' | while read word; do\n+              # Trim whitespaces and cherrypick\n+              echo $word | sed 's/ *$//g' | sed 's/^ *//g' | git cherry-pick --stdin\n+          done\n+      - uses: burrunan/gradle-cache-action@v1.5\n+        with:\n+          job-id: jdk11\n+          remote-build-cache-proxy-enabled: false\n+          arguments: build --stacktrace -Prelease.version=${{ github.event.inputs.version }}\n+          properties: |\n+            enable.docker.tests=true\n+      - name: Publish artifacts\n+        uses: burrunan/gradle-cache-action@v1.5\n+        with:\n+          job-id: jdk11\n+          remote-build-cache-proxy-enabled: false\n+          arguments: final --stacktrace -Prelease.version=${{ github.event.inputs.version }}\n+          properties: |\n+            enable.docker.tests=trued\n+        env:\n+          CI: true", "originalCommit": "064a1d5015e1b95d9c80b2423138d511bae90eed", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzA5MDY0Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1781#discussion_r503090643", "bodyText": "What does this do after final task above?", "author": "iNikem", "createdAt": "2020-10-12T07:29:10Z", "path": ".github/workflows/patch-release-build.yml", "diffHunk": "@@ -0,0 +1,99 @@\n+name: Patch Release Build\n+on:\n+  workflow_dispatch:\n+    inputs:\n+      version:\n+        description: The version to tag the release with, e.g., 1.2.1, 1.2.2\n+        required: true\n+      commits:\n+        description: Comma separated list of commit shas to cherrypick\n+        required: true\n+\n+jobs:\n+  prepare-release-branch:\n+    runs-on: ubuntu-latest\n+    outputs:\n+      release-branch-name: ${{ steps.parse-release-branch.outputs.release-branch-name }}\n+    steps:\n+      - id: parse-release-branch\n+        name: Parse release branch name\n+        run: |\n+          # Sets the release-branch-name output to the version number with the last non-period element replaced with an 'x' and preprended with v.\n+          echo \"::set-output name=release-branch-name::$(echo '${{ github.event.inputs.version }}' | sed -E 's/([^.]+)\\.([^.]+)\\.([^.]+)/v\\1.\\2.x/')\"\n+          # Sets the release-tag-name output to the version number with the last non-period element replace with a '0' and prepended with v\n+          echo \"::set-output name=release-tag-name::$(echo '${{ github.event.inputs.version }}' | sed -E 's/([^.]+)\\.([^.]+)\\.([^.]+)/v\\1.\\2.0/')\"\n+      - id: checkout-release-branch\n+        name: Check out release branch\n+        continue-on-error: true\n+        uses: actions/checkout@v2\n+        with:\n+          ref: ${{ steps.parse-release-branch.outputs.release-branch-name }}\n+      - id: checkout-release-tag\n+        name: Check out release tag\n+        if: ${{ steps.checkout-release-branch.outcome == 'failure' }}\n+        uses: actions/checkout@v2\n+        with:\n+          ref: ${{ steps.parse-release-branch.outputs.release-tag-name }}\n+      - name: Create release branch\n+        if: ${{ steps.checkout-release-tag.outcome == 'success' }}\n+        run: |\n+          git checkout -b ${{ steps.parse-release-branch.outputs.release-branch-name }}\n+          git push --set-upstream origin ${{ steps.parse-release-branch.outputs.release-branch-name }}\n+  build:\n+    runs-on: ubuntu-latest\n+    needs: prepare-release-branch\n+    steps:\n+      - name: Checkout release branch\n+        uses: actions/checkout@v2\n+        with:\n+          ref: ${{ needs.prepare-release-branch.outputs.release-branch-name }}\n+          submodules: true\n+      - uses: actions/setup-java@v1\n+        with:\n+          java-version: 11\n+      - name: Setup git name\n+        run: |\n+          git config user.name github-actions\n+          git config user.email github-actions@github.com\n+      - name: Cherrypicks\n+        run: |\n+          git fetch origin master\n+          echo ${{ github.event.inputs.commits }} | sed -n 1'p' | tr ',' '\\n' | while read word; do\n+              # Trim whitespaces and cherrypick\n+              echo $word | sed 's/ *$//g' | sed 's/^ *//g' | git cherry-pick --stdin\n+          done\n+      - uses: burrunan/gradle-cache-action@v1.5\n+        with:\n+          job-id: jdk11\n+          remote-build-cache-proxy-enabled: false\n+          arguments: build --stacktrace -Prelease.version=${{ github.event.inputs.version }}\n+          properties: |\n+            enable.docker.tests=true\n+      - name: Publish artifacts\n+        uses: burrunan/gradle-cache-action@v1.5\n+        with:\n+          job-id: jdk11\n+          remote-build-cache-proxy-enabled: false\n+          arguments: final --stacktrace -Prelease.version=${{ github.event.inputs.version }}\n+          properties: |\n+            enable.docker.tests=trued\n+        env:\n+          CI: true\n+          BINTRAY_USER: ${{ secrets.BINTRAY_USER }}\n+          BINTRAY_KEY: ${{ secrets.BINTRAY_KEY }}\n+          GRGIT_USER: ${{ github.actor }}\n+          GRGIT_PASS: ${{ secrets.GITHUB_TOKEN }}\n+      - run: git push\n+      - name: Checkout master\n+        uses: actions/checkout@v2\n+        with:\n+           submodules: true\n+      - uses: burrunan/gradle-cache-action@v1.5\n+        with:\n+          job-id: jdk11\n+          remote-build-cache-proxy-enabled: false\n+          arguments: prepareRelease --stacktrace -Prelease.version=${{ github.event.inputs.version }}", "originalCommit": "064a1d5015e1b95d9c80b2423138d511bae90eed", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzExNTY4Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1781#discussion_r503115682", "bodyText": "Yeah I should just rename to updateReadme instead of prepareRelease, I didn't notice this use case of needing to do it on a different branch from the release at the time. Should I do it in this PR?", "author": "anuraaga", "createdAt": "2020-10-12T08:14:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzA5MDY0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzIxNzAyMA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1781#discussion_r503217020", "bodyText": "I think so", "author": "iNikem", "createdAt": "2020-10-12T11:03:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzA5MDY0Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzA5MDgyNA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1781#discussion_r503090824", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                      job-id: jdk8\n          \n          \n            \n                      job-id: jdk11", "author": "iNikem", "createdAt": "2020-10-12T07:29:36Z", "path": ".github/workflows/release-build.yml", "diffHunk": "@@ -0,0 +1,42 @@\n+name: Release Build\n+on:\n+  workflow_dispatch:\n+    inputs:\n+      version:\n+        description: The version to tag the release with, e.g., 1.2.0, 1.2.1-alpha.1\n+        required: true\n+\n+jobs:\n+  build:\n+    name: Build and release\n+    runs-on: ubuntu-latest\n+    steps:\n+      - uses: actions/checkout@v2\n+        with:\n+          submodules: true\n+      - uses: actions/setup-java@v1\n+        with:\n+          java-version: 11\n+      - uses: burrunan/gradle-cache-action@v1.5\n+        with:\n+          job-id: jdk8", "originalCommit": "064a1d5015e1b95d9c80b2423138d511bae90eed", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzA5MTE0OA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1781#discussion_r503091148", "bodyText": "This releases current HEAD of the main branch, correct?", "author": "iNikem", "createdAt": "2020-10-12T07:30:11Z", "path": ".github/workflows/release-build.yml", "diffHunk": "@@ -0,0 +1,42 @@\n+name: Release Build\n+on:\n+  workflow_dispatch:\n+    inputs:\n+      version:\n+        description: The version to tag the release with, e.g., 1.2.0, 1.2.1-alpha.1", "originalCommit": "064a1d5015e1b95d9c80b2423138d511bae90eed", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzExNjMzNA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1781#discussion_r503116334", "bodyText": "Yup, added a comment.", "author": "anuraaga", "createdAt": "2020-10-12T08:15:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzA5MTE0OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzA5MTUwMg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1781#discussion_r503091502", "bodyText": "Cannot you just create a correct tag on the main branch for the current released version?", "author": "iNikem", "createdAt": "2020-10-12T07:30:52Z", "path": "Makefile", "diffHunk": "@@ -24,7 +24,8 @@ verify-format:\n .PHONY: publish-snapshots\n publish-snapshots:\n ifeq ($(CIRCLE_BRANCH),master)\n-\t./gradlew artifactoryPublish\n+  # TODO(anuraaga): Remove version specificer after next release creates a tag on master.\n+\t./gradlew artifactoryPublish -Prelease.version=0.10.0-SNAPSHOT", "originalCommit": "064a1d5015e1b95d9c80b2423138d511bae90eed", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzExNjg0MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1781#discussion_r503116841", "bodyText": "Well, we already have a tag referring to a release branch which is what we built from. While moving it to the main branch could be effectively the same, I think it's some rewriting history that I want to avoid, this workaround isn't so bad I think.", "author": "anuraaga", "createdAt": "2020-10-12T08:16:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzA5MTUwMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzA5MjI0Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1781#discussion_r503092243", "bodyText": "This will run them even if releaseTask fails, are you sure?", "author": "iNikem", "createdAt": "2020-10-12T07:32:25Z", "path": "build.gradle", "diffHunk": "@@ -11,15 +14,35 @@ ext {\n     opentelemetryProjects = subprojects - project(\":opentelemetry-bom\")\n }\n \n+release {\n+    defaultVersionStrategy = Strategies.getSNAPSHOT()\n+}\n+\n+nebulaRelease {\n+    addReleaseBranchPattern(/v\\d+\\.\\d+\\.x/)\n+}\n+\n+def releaseTask = tasks.named(\"release\")\n+releaseTask.configure {\n+    mustRunAfter(\"snapshotSetup\", \"finalSetup\")\n+}\n+\n subprojects {\n     group = \"io.opentelemetry\"\n-    version = \"0.10.0-SNAPSHOT\" // CURRENT_OPEN_TELEMETRY_VERSION\n \n     plugins.withId(\"maven-publish\") {\n         // Always include the artifactory/bintray plugins to do the deployment.\n         pluginManager.apply \"com.jfrog.artifactory\"\n         pluginManager.apply \"com.jfrog.bintray\"\n \n+        releaseTask.configure {\n+            if (version.toString().endsWith('-SNAPSHOT')) {\n+                finalizedBy(tasks.named('artifactoryPublish'))", "originalCommit": "064a1d5015e1b95d9c80b2423138d511bae90eed", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzExNzIxNA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1781#discussion_r503117214", "bodyText": "releaseTask is just a placeholder, so it can't fail. I think it's ok - it's the simplest way to have publishing guaranteed to happen after the dependencies of releaseTask instead of wiring dependencies if needed.", "author": "anuraaga", "createdAt": "2020-10-12T08:17:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzA5MjI0Mw=="}], "type": "inlineReview"}, {"oid": "6f47ae53aba1573c69b1288019459903d9a569bd", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/6f47ae53aba1573c69b1288019459903d9a569bd", "message": "Cleanup", "committedDate": "2020-10-12T08:17:36Z", "type": "commit"}, {"oid": "9c561064964a520ce490ef9cf7d529243ab1f5f3", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/9c561064964a520ce490ef9cf7d529243ab1f5f3", "message": "Tab", "committedDate": "2020-10-12T08:19:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQzMTU2MA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1781#discussion_r503431560", "bodyText": "In case we need a patch that can't be done with a simple cherrypick, do we have a description of what that process would look like? An example would be a bugfix change that was done against the main branch, but where the main branch APIs have changed from what was on the release branch.", "author": "jkwatson", "createdAt": "2020-10-12T17:18:18Z", "path": ".github/workflows/patch-release-build.yml", "diffHunk": "@@ -0,0 +1,100 @@\n+# Releases a patch by cherrypicking commits into a release branch based on the previous\n+# release tag.\n+name: Patch Release Build\n+on:\n+  workflow_dispatch:\n+    inputs:\n+      version:\n+        description: The version to tag the release with, e.g., 1.2.1, 1.2.2\n+        required: true\n+      commits:\n+        description: Comma separated list of commit shas to cherrypick", "originalCommit": "9c561064964a520ce490ef9cf7d529243ab1f5f3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzY2NzU4MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1781#discussion_r503667581", "bodyText": "Great callout - I added docs for this case.", "author": "anuraaga", "createdAt": "2020-10-13T04:59:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQzMTU2MA=="}], "type": "inlineReview"}, {"oid": "7f0c032f14026768b7e92f0ae0186071c3231b3b", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/7f0c032f14026768b7e92f0ae0186071c3231b3b", "message": "Rename prepareRelease and manual patch release instructions.", "committedDate": "2020-10-13T04:59:26Z", "type": "commit"}]}