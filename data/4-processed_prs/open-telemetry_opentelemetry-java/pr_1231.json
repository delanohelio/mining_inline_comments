{"pr_number": 1231, "pr_title": "Return a wrapped span for SpanData so only the mutable data is copied.", "pr_createdAt": "2020-05-15T21:12:05Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java/pull/1231", "timeline": [{"oid": "32ceeff2ea0f1b1d6fba01395d89407ba2527418", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/32ceeff2ea0f1b1d6fba01395d89407ba2527418", "message": "tweak the benchmark a bit", "committedDate": "2020-05-19T21:16:41Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzY1ODI5Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1231#discussion_r427658293", "bodyText": "Add some events too", "author": "bogdandrutu", "createdAt": "2020-05-19T23:33:48Z", "path": "sdk/src/jmh/java/io/opentelemetry/sdk/trace/SpanPipelineBenchmark.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.trace;\n+\n+import io.opentelemetry.common.AttributeValue;\n+import io.opentelemetry.sdk.OpenTelemetrySdk;\n+import io.opentelemetry.sdk.trace.data.SpanData;\n+import io.opentelemetry.sdk.trace.export.SimpleSpanProcessor;\n+import io.opentelemetry.sdk.trace.export.SpanExporter;\n+import io.opentelemetry.trace.Link;\n+import io.opentelemetry.trace.Span;\n+import io.opentelemetry.trace.Span.Kind;\n+import io.opentelemetry.trace.SpanContext;\n+import io.opentelemetry.trace.Status;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Level;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Threads;\n+import org.openjdk.jmh.annotations.Warmup;\n+\n+@State(Scope.Benchmark)\n+public class SpanPipelineBenchmark {\n+\n+  private final TracerSdk tracerSdk = OpenTelemetrySdk.getTracerProvider().get(\"benchmarkTracer\");\n+\n+  @Setup(Level.Trial)\n+  public final void setup() {\n+    SpanExporter exporter = new NoOpSpanExporter();\n+    OpenTelemetrySdk.getTracerProvider()\n+        .addSpanProcessor(SimpleSpanProcessor.newBuilder(exporter).build());\n+  }\n+\n+  @Benchmark\n+  @Threads(value = 5)\n+  @Fork(1)\n+  @Warmup(iterations = 5, time = 1)\n+  @Measurement(iterations = 5, time = 1)\n+  @OutputTimeUnit(TimeUnit.MILLISECONDS)\n+  public void runThePipeline_05Threads() {\n+    doWork();\n+  }\n+\n+  private void doWork() {", "originalCommit": "32ceeff2ea0f1b1d6fba01395d89407ba2527418", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzY1ODgwNQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1231#discussion_r427658805", "bodyText": "Do we need to copy these? Just wrapping in a unmodifiable map should be enough. After the span ends :) before it is needed.", "author": "bogdandrutu", "createdAt": "2020-05-19T23:35:23Z", "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/SpanWrapper.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.trace;\n+\n+import com.google.auto.value.AutoValue;\n+import io.opentelemetry.common.AttributeValue;\n+import io.opentelemetry.sdk.common.InstrumentationLibraryInfo;\n+import io.opentelemetry.sdk.resources.Resource;\n+import io.opentelemetry.sdk.trace.data.SpanData;\n+import io.opentelemetry.trace.Span.Kind;\n+import io.opentelemetry.trace.SpanId;\n+import io.opentelemetry.trace.Status;\n+import io.opentelemetry.trace.TraceFlags;\n+import io.opentelemetry.trace.TraceId;\n+import io.opentelemetry.trace.TraceState;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import javax.annotation.concurrent.Immutable;\n+\n+@Immutable\n+@AutoValue\n+abstract class SpanWrapper implements SpanData {\n+  abstract RecordEventsReadableSpan delegate();\n+\n+  abstract List<Link> resolvedLinks();\n+\n+  abstract List<Event> resolvedEvents();\n+\n+  abstract Map<String, AttributeValue> attributes();\n+\n+  abstract int totalAttributeCount();\n+\n+  abstract int totalRecordedEvents();\n+\n+  abstract Status status();\n+\n+  static SpanWrapper create(\n+      RecordEventsReadableSpan delegate,\n+      List<Link> links,\n+      List<Event> events,\n+      Map<String, AttributeValue> attributes,\n+      int totalAttributeCount,\n+      int totalRecordedEvents,\n+      Status status) {\n+    return new AutoValue_SpanWrapper(\n+        delegate,\n+        links,\n+        events,\n+        new HashMap<>(attributes),", "originalCommit": "32ceeff2ea0f1b1d6fba01395d89407ba2527418", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODA5MjExNw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1231#discussion_r428092117", "bodyText": "good call. I'll make that change and re-benchmark", "author": "jkwatson", "createdAt": "2020-05-20T15:11:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzY1ODgwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODA5NzE3Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1231#discussion_r428097173", "bodyText": "Actually, are you suggesting we do this inside the RERS when the span ends? If we did that, we'd need to have an extra field to hold it, unless we created a version of the AttributesMap that was immutable.", "author": "jkwatson", "createdAt": "2020-05-20T15:18:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzY1ODgwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODA5OTM5Nw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1231#discussion_r428099397", "bodyText": "AttributeMap is immutable after end.", "author": "bogdandrutu", "createdAt": "2020-05-20T15:21:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzY1ODgwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODEwMzE1OA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1231#discussion_r428103158", "bodyText": "It isn't right now, if we let it escape the RERS. Are you saying we should make it so?", "author": "jkwatson", "createdAt": "2020-05-20T15:26:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzY1ODgwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODExNzY0OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1231#discussion_r428117649", "bodyText": "Not sure I understand the concern. We call the wrapper using Collections.unmodifiableMap(attributeMap). So nobody can change the attributeMap via SpanData, and nobody can change attributeMap via RERS because hasEnded is true so no changes will happen.", "author": "bogdandrutu", "createdAt": "2020-05-20T15:45:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzY1ODgwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODEyMTU5OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1231#discussion_r428121599", "bodyText": "Right, if we do the wrapping here, then everything is fine. I thought maybe you were considering doing the wrapping earlier, immediately on the span ending, rather than on the call to toSpanData.", "author": "jkwatson", "createdAt": "2020-05-20T15:51:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzY1ODgwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODEyNzE5Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1231#discussion_r428127196", "bodyText": "Also, I think we should wrap the links and events, as well.", "author": "jkwatson", "createdAt": "2020-05-20T15:59:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzY1ODgwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODE2NDM5Nw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1231#discussion_r428164397", "bodyText": "We can do both later. Let's merge it as it is for the moment. I think this is a good start.", "author": "bogdandrutu", "createdAt": "2020-05-20T16:53:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzY1ODgwNQ=="}], "type": "inlineReview"}, {"oid": "fc28d955fb4998de8d9f366815d6c4b63e34e455", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/fc28d955fb4998de8d9f366815d6c4b63e34e455", "message": "Return a wrapped span so only the mutable data is copied.", "committedDate": "2020-05-20T18:49:28Z", "type": "commit"}, {"oid": "c1350835f927d13011ff5315d0f96bfe41673423", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/c1350835f927d13011ff5315d0f96bfe41673423", "message": "Add a benchmark for the span pipeline", "committedDate": "2020-05-20T18:49:28Z", "type": "commit"}, {"oid": "2d4a38520640fc32a022491f6b96a64dcf38dd78", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/2d4a38520640fc32a022491f6b96a64dcf38dd78", "message": "tweak the benchmark a bit", "committedDate": "2020-05-20T18:49:28Z", "type": "commit"}, {"oid": "b187b7f841cd347dd28fabc312bc7dd02f545006", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/b187b7f841cd347dd28fabc312bc7dd02f545006", "message": "use unmodifiable wrappers around the collections in the wrapper.", "committedDate": "2020-05-20T18:49:28Z", "type": "commit"}, {"oid": "b187b7f841cd347dd28fabc312bc7dd02f545006", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/b187b7f841cd347dd28fabc312bc7dd02f545006", "message": "use unmodifiable wrappers around the collections in the wrapper.", "committedDate": "2020-05-20T18:49:28Z", "type": "forcePushed"}]}