{"pr_number": 782, "pr_title": "Solves #767 HttpTraceContext should not throw exceptions for non-fatal cases", "pr_createdAt": "2020-01-22T20:42:35Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java/pull/782", "timeline": [{"oid": "6f7eeb40ec214d5f02e6bd27013c53ccb498e459", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/6f7eeb40ec214d5f02e6bd27013c53ccb498e459", "message": "fix: HttpTraceContext::extract() fails on traceparent == null (#767)", "committedDate": "2020-01-22T20:39:47Z", "type": "commit"}, {"oid": "c3387089d59008158d14b619518af96dc35ece2a", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/c3387089d59008158d14b619518af96dc35ece2a", "message": "fix: HttpTraceContext::extract() fails on traceparent == null (#767)", "committedDate": "2020-01-22T21:01:25Z", "type": "commit"}, {"oid": "5ec24c0298a1df0109e6f22e18d88abd4e6f207e", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/5ec24c0298a1df0109e6f22e18d88abd4e6f207e", "message": "fix: HttpTraceContext::extract() fails on traceparent == null (#767)", "committedDate": "2020-01-22T21:02:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTgzMTQxOA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/782#discussion_r369831418", "bodyText": "Is this the right answer here, or are we pushing the problem one level up the stack?", "author": "jkwatson", "createdAt": "2020-01-22T22:09:17Z", "path": "opentracing_shim/src/main/java/io/opentelemetry/opentracingshim/Propagation.java", "diffHunk": "@@ -48,7 +49,9 @@ public SpanContextShim extractTextFormat(TextMapExtract carrier) {\n         tracer().getHttpTextFormat().extract(carrierMap, TextMapGetter.INSTANCE);\n     io.opentelemetry.correlationcontext.CorrelationContext distContext =\n         contextManager().getHttpTextFormat().extract(carrierMap, TextMapGetter.INSTANCE);\n-\n+    if (context == SpanContext.getInvalid()) {\n+      throw new IllegalArgumentException(\"Extracted span context is invalid\");", "originalCommit": "5ec24c0298a1df0109e6f22e18d88abd4e6f207e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg2MDY4Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/782#discussion_r369860686", "bodyText": "In OT we are not throwing any exceptions  at the propagation layer, merely returning null for extract(). I suggest this part remains untouched, and another PR handles this properly (either you or me can write that one ;) )", "author": "carlosalberto", "createdAt": "2020-01-22T23:24:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTgzMTQxOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDAyNzY4OA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/782#discussion_r370027688", "bodyText": "I wanted to keep behavior for shim, otherwise  it starts to return not null but INVALID span context\n  @Test\n  public void extract_nullContext() {\n    SpanContext result =\n        tracerShim.extract(\n            Format.Builtin.TEXT_MAP, new TextMapAdapter(Collections.<String, String>emptyMap()));\n    assertNull(result);\n  }\n\nas i get u right - should i change this test assert to Span.Invalid?", "author": "DotSpy", "createdAt": "2020-01-23T10:04:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTgzMTQxOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQyNTE2OA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/782#discussion_r370425168", "bodyText": "Right, I had forgotten about this test case. So lets keep this check - and in general I'd be up for actually checking if the SpanContext is invalid (which also is mentioned in the Specification):\nif (!spanContext.isValid()) {\n  return null;\n}", "author": "carlosalberto", "createdAt": "2020-01-24T00:30:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTgzMTQxOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg1NjEyMg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/782#discussion_r369856122", "bodyText": "I remember we didn't want to expose the SpanContext.getInvalid() instance, in order to prevent users abusing it. So we either lift that restriction or we use, for the TraceContext propagator, our own INVALID instance (build out from invalid ids).\ncc @yurishkuro", "author": "carlosalberto", "createdAt": "2020-01-22T23:10:59Z", "path": "api/src/main/java/io/opentelemetry/trace/SpanContext.java", "diffHunk": "@@ -44,7 +44,7 @@\n    *\n    * @return the invalid {@code SpanContext}.\n    */\n-  static SpanContext getInvalid() {\n+  public static SpanContext getInvalid() {", "originalCommit": "5ec24c0298a1df0109e6f22e18d88abd4e6f207e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDAyMTcyMQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/782#discussion_r370021721", "bodyText": "our own INVALID instance will be the same as SpanContext.getInvalid() maybe we should move it to same base part were both of SpanContext and other parts of opentelemetry can construct INVALID instance", "author": "DotSpy", "createdAt": "2020-01-23T09:53:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg1NjEyMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQyNTUzNQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/782#discussion_r370425535", "bodyText": "Let's keep our own invalid instance of SpanContext for now and create a ticket discussing whether we should keep a public accessor for INVALID.", "author": "carlosalberto", "createdAt": "2020-01-24T00:32:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg1NjEyMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg1OTkwOA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/782#discussion_r369859908", "bodyText": "*the extracted value or an invalid span context if the getter", "author": "carlosalberto", "createdAt": "2020-01-22T23:21:59Z", "path": "context_prop/src/main/java/io/opentelemetry/context/propagation/HttpTextFormat.java", "diffHunk": "@@ -95,7 +95,8 @@\n    * @param carrier holds propagation fields. For example, an outgoing message or http request.\n    * @param getter invoked for each propagation key to get.\n    * @param <C> carrier of propagation fields, such as an http request.\n-   * @return the extracted value, never {@code null}.\n+   * @return the extracted value or invalid span context if getter returned {@code null}, never", "originalCommit": "5ec24c0298a1df0109e6f22e18d88abd4e6f207e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "a581bac749127cdc8a4292dec815b83d6e1fc66f", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/a581bac749127cdc8a4292dec815b83d6e1fc66f", "message": "docs: add an", "committedDate": "2020-01-23T10:08:30Z", "type": "commit"}, {"oid": "043f5d8b8ac78103c967f8f48c774f9b67c44fae", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/043f5d8b8ac78103c967f8f48c774f9b67c44fae", "message": "refactor: use invalid span context from HttpTraceContext", "committedDate": "2020-01-24T16:30:26Z", "type": "commit"}, {"oid": "3ca82bc3e2404e5b0e37f844d4a9c79be2e2208c", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/3ca82bc3e2404e5b0e37f844d4a9c79be2e2208c", "message": "style: apply google code style", "committedDate": "2020-01-24T16:34:18Z", "type": "commit"}]}