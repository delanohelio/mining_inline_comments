{"pr_number": 1640, "pr_title": "Add config to allow disabling of resource providers", "pr_createdAt": "2020-09-14T11:40:35Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java/pull/1640", "timeline": [{"oid": "c1eb92b850c843f31569497ab7807ba590b1bfe9", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/c1eb92b850c843f31569497ab7807ba590b1bfe9", "message": "Add config to allow disabling of resource providers", "committedDate": "2020-09-14T11:37:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg3MjExNA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1640#discussion_r487872114", "bodyText": "I would make the newBuilder method of ResourcesConfig public.", "author": "thisthat", "createdAt": "2020-09-14T12:28:07Z", "path": "sdk/common/src/main/java/io/opentelemetry/sdk/resources/Resource.java", "diffHunk": "@@ -61,6 +61,11 @@\n           .build()\n           .merge(TELEMETRY_SDK)\n           .merge(readResourceFromProviders());\n+  private static final ResourcesConfig RESOURCES_CONFIG =\n+      ResourcesConfig.getDefault().toBuilder()", "originalCommit": "c1eb92b850c843f31569497ab7807ba590b1bfe9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg5ODU3NA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1640#discussion_r487898574", "bodyText": "I would change this name to OTEL_JAVA_DISABLE_RESOURCES_PROVIDES. According to the spec, this is a language-specific feature which requires the convention OTEL_{LANGUAGE}_{FEATURE}: Spec link", "author": "thisthat", "createdAt": "2020-09-14T13:09:21Z", "path": "sdk/common/src/main/java/io/opentelemetry/sdk/resources/ResourcesConfig.java", "diffHunk": "@@ -0,0 +1,176 @@\n+/*\n+ * Copyright 2019, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.resources;\n+\n+import com.google.auto.value.AutoValue;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Preconditions;\n+import com.google.common.collect.ImmutableSet;\n+import io.opentelemetry.sdk.common.export.ConfigBuilder;\n+import io.opentelemetry.trace.Span;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.Set;\n+import javax.annotation.Nonnull;\n+import javax.annotation.concurrent.Immutable;\n+\n+/**\n+ * Class that holds global resources parameters.\n+ *\n+ * <p>Configuration options for {@link ResourcesConfig} can be read from system properties,\n+ * environment variables, or {@link Properties} objects.\n+ *\n+ * <p>For system properties and {@link Properties} objects, {@link ResourcesConfig} will look for\n+ * the following names:\n+ *\n+ * <ul>\n+ *   <li>{@code otel.config.resources.providers.disable}: to set the ResourceProvider service\n+ *       providers found on the classpath to be disabled.\n+ * </ul>\n+ *\n+ * <p>For environment variables, {@link ResourcesConfig} will look for the following names:\n+ *\n+ * <ul>\n+ *   <li>{@code OTEL_CONFIG_RESOURCES_PROVIDERS_DISABLE}: to set the ResourceProvider service", "originalCommit": "c1eb92b850c843f31569497ab7807ba590b1bfe9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg5OTIwNw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1640#discussion_r487899207", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * @since 0.1.0\n          \n          \n            \n               * @since 0.9.0", "author": "thisthat", "createdAt": "2020-09-14T13:10:14Z", "path": "sdk/common/src/main/java/io/opentelemetry/sdk/resources/ResourcesConfig.java", "diffHunk": "@@ -0,0 +1,176 @@\n+/*\n+ * Copyright 2019, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.resources;\n+\n+import com.google.auto.value.AutoValue;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Preconditions;\n+import com.google.common.collect.ImmutableSet;\n+import io.opentelemetry.sdk.common.export.ConfigBuilder;\n+import io.opentelemetry.trace.Span;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.Set;\n+import javax.annotation.Nonnull;\n+import javax.annotation.concurrent.Immutable;\n+\n+/**\n+ * Class that holds global resources parameters.\n+ *\n+ * <p>Configuration options for {@link ResourcesConfig} can be read from system properties,\n+ * environment variables, or {@link Properties} objects.\n+ *\n+ * <p>For system properties and {@link Properties} objects, {@link ResourcesConfig} will look for\n+ * the following names:\n+ *\n+ * <ul>\n+ *   <li>{@code otel.config.resources.providers.disable}: to set the ResourceProvider service\n+ *       providers found on the classpath to be disabled.\n+ * </ul>\n+ *\n+ * <p>For environment variables, {@link ResourcesConfig} will look for the following names:\n+ *\n+ * <ul>\n+ *   <li>{@code OTEL_CONFIG_RESOURCES_PROVIDERS_DISABLE}: to set the ResourceProvider service\n+ *       providers found on the classpath to be disabled.\n+ * </ul>\n+ */\n+@AutoValue\n+@Immutable\n+public abstract class ResourcesConfig {\n+  // These values are the default values for all the global parameters.\n+  private static final ImmutableSet<String> DEFAULT_RESOURCES_PROVIDERS_DISABLE = ImmutableSet.of();\n+\n+  /**\n+   * Returns the default {@code ResourcesConfig}.\n+   *\n+   * @return the default {@code ResourcesConfig}.\n+   * @since 0.1.0", "originalCommit": "c1eb92b850c843f31569497ab7807ba590b1bfe9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg5OTY1OA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1640#discussion_r487899658", "bodyText": "You can remove these methods", "author": "thisthat", "createdAt": "2020-09-14T13:10:52Z", "path": "sdk/common/src/main/java/io/opentelemetry/sdk/resources/ResourcesConfig.java", "diffHunk": "@@ -0,0 +1,176 @@\n+/*\n+ * Copyright 2019, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.resources;\n+\n+import com.google.auto.value.AutoValue;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Preconditions;\n+import com.google.common.collect.ImmutableSet;\n+import io.opentelemetry.sdk.common.export.ConfigBuilder;\n+import io.opentelemetry.trace.Span;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.Set;\n+import javax.annotation.Nonnull;\n+import javax.annotation.concurrent.Immutable;\n+\n+/**\n+ * Class that holds global resources parameters.\n+ *\n+ * <p>Configuration options for {@link ResourcesConfig} can be read from system properties,\n+ * environment variables, or {@link Properties} objects.\n+ *\n+ * <p>For system properties and {@link Properties} objects, {@link ResourcesConfig} will look for\n+ * the following names:\n+ *\n+ * <ul>\n+ *   <li>{@code otel.config.resources.providers.disable}: to set the ResourceProvider service\n+ *       providers found on the classpath to be disabled.\n+ * </ul>\n+ *\n+ * <p>For environment variables, {@link ResourcesConfig} will look for the following names:\n+ *\n+ * <ul>\n+ *   <li>{@code OTEL_CONFIG_RESOURCES_PROVIDERS_DISABLE}: to set the ResourceProvider service\n+ *       providers found on the classpath to be disabled.\n+ * </ul>\n+ */\n+@AutoValue\n+@Immutable\n+public abstract class ResourcesConfig {\n+  // These values are the default values for all the global parameters.\n+  private static final ImmutableSet<String> DEFAULT_RESOURCES_PROVIDERS_DISABLE = ImmutableSet.of();\n+\n+  /**\n+   * Returns the default {@code ResourcesConfig}.\n+   *\n+   * @return the default {@code ResourcesConfig}.\n+   * @since 0.1.0\n+   */\n+  public static ResourcesConfig getDefault() {\n+    return DEFAULT;\n+  }\n+\n+  private static final ResourcesConfig DEFAULT = ResourcesConfig.newBuilder().build();\n+\n+  /**\n+   * Returns the ResourceProvider service providers found on the classpath to be disabled.\n+   *\n+   * @return the ResourceProvider service providers found on the classpath to be disabled.\n+   */\n+  public abstract Set<String> getDisabledResourceProviders();\n+\n+  /**\n+   * Returns a new {@link Builder}.\n+   *\n+   * @return a new {@link Builder}.\n+   */\n+  private static Builder newBuilder() {\n+    return new AutoValue_ResourcesConfig.Builder()\n+        .setDisabledResourceProviders(DEFAULT_RESOURCES_PROVIDERS_DISABLE);\n+  }\n+\n+  /**\n+   * Returns a {@link Builder} initialized to the same property values as the current instance.\n+   *\n+   * @return a {@link Builder} initialized to the same property values as the current instance.\n+   */\n+  public abstract Builder toBuilder();\n+\n+  /** Builder for {@link ResourcesConfig}. */\n+  @AutoValue.Builder\n+  public abstract static class Builder extends ConfigBuilder<Builder> {\n+\n+    private static final String OTEL_CONFIG_RESOURCES_PROVIDERS_DISABLE =\n+        \"otel.config.resources.providers.disable\";\n+\n+    Builder() {}\n+\n+    /**\n+     * Sets the configuration values from the given configuration map for only the available keys.\n+     *\n+     * @param configMap {@link Map} holding the configuration values.\n+     * @return this\n+     */\n+    @VisibleForTesting\n+    @Override\n+    protected Builder fromConfigMap(\n+        Map<String, String> configMap, NamingConvention namingConvention) {\n+      configMap = namingConvention.normalize(configMap);\n+\n+      String stringValue = getStringProperty(OTEL_CONFIG_RESOURCES_PROVIDERS_DISABLE, configMap);\n+      if (stringValue != null) {\n+        this.setDisabledResourceProviders(ImmutableSet.copyOf(stringValue.split(\",\")));\n+      }\n+      return this;\n+    }\n+\n+    /**\n+     * * Sets the configuration values from the given properties object for only the available keys.\n+     *\n+     * @param properties {@link Properties} holding the configuration values.\n+     * @return this\n+     */\n+    @Override\n+    public Builder readProperties(Properties properties) {\n+      return super.readProperties(properties);\n+    }\n+\n+    /**\n+     * * Sets the configuration values from environment variables for only the available keys.\n+     *\n+     * @return this.\n+     */\n+    @Override\n+    public Builder readEnvironmentVariables() {\n+      return super.readEnvironmentVariables();\n+    }\n+\n+    /**\n+     * * Sets the configuration values from system properties for only the available keys.\n+     *\n+     * @return this.\n+     */\n+    @Override\n+    public Builder readSystemProperties() {\n+      return super.readSystemProperties();\n+    }", "originalCommit": "c1eb92b850c843f31569497ab7807ba590b1bfe9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODA3NDMyOQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1640#discussion_r488074329", "bodyText": "I'm concerned with this relying on the toString() implementation of a given ResourceProvider.  In general, toString should be reserved for debugging purposes, rather than actual runtime functionality. If we need to have a way to identify resource provider implementations, we should add a method to the interface for this purpose. I recommend something like getId() or getIdentifier() or getName().", "author": "jkwatson", "createdAt": "2020-09-14T16:43:36Z", "path": "sdk/common/src/main/java/io/opentelemetry/sdk/resources/Resource.java", "diffHunk": "@@ -78,6 +83,9 @@ private static String readVersion() {\n   private static Resource readResourceFromProviders() {\n     Resource result = Resource.EMPTY;\n     for (ResourceProvider resourceProvider : ServiceLoader.load(ResourceProvider.class)) {\n+      if (RESOURCES_CONFIG.getDisabledResourceProviders().contains(resourceProvider.toString())) {", "originalCommit": "c1eb92b850c843f31569497ab7807ba590b1bfe9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "8b263304f26d4e65a501ef1441f2f6e5182d1fed", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/8b263304f26d4e65a501ef1441f2f6e5182d1fed", "message": "Review changes", "committedDate": "2020-09-15T06:13:18Z", "type": "commit"}, {"oid": "62d4680e67e19e2e822cdb29cdce01e82b669957", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/62d4680e67e19e2e822cdb29cdce01e82b669957", "message": "Formatting", "committedDate": "2020-09-15T06:17:22Z", "type": "commit"}, {"oid": "ce25f08bf978b3475e0f7ca9549fa033f8cb83a7", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/ce25f08bf978b3475e0f7ca9549fa033f8cb83a7", "message": "Fix", "committedDate": "2020-09-15T06:23:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQxMzYxMQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1640#discussion_r488413611", "bodyText": "I think properties are usually nouns, not verbs. So disabled?", "author": "anuraaga", "createdAt": "2020-09-15T06:20:58Z", "path": "sdk/common/src/main/java/io/opentelemetry/sdk/resources/ResourcesConfig.java", "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Copyright 2019, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.resources;\n+\n+import com.google.auto.value.AutoValue;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Preconditions;\n+import com.google.common.collect.ImmutableSet;\n+import io.opentelemetry.sdk.common.export.ConfigBuilder;\n+import io.opentelemetry.trace.Span;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.Set;\n+import javax.annotation.concurrent.Immutable;\n+\n+/**\n+ * Class that holds global resources parameters.\n+ *\n+ * <p>Configuration options for {@link ResourcesConfig} can be read from system properties,\n+ * environment variables, or {@link Properties} objects.\n+ *\n+ * <p>For system properties and {@link Properties} objects, {@link ResourcesConfig} will look for\n+ * the following names:\n+ *\n+ * <ul>\n+ *   <li>{@code otel.java.disable.resources.providers}: to set the ResourceProvider service", "originalCommit": "62d4680e67e19e2e822cdb29cdce01e82b669957", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQxNjQ2OA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1640#discussion_r488416468", "bodyText": "And I guess I'd probably go with otel.java.disabled.resource_providers. I can imagine us also having otel.java.disabled.tracer_providers in the future as a similar pattern.", "author": "anuraaga", "createdAt": "2020-09-15T06:27:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQxMzYxMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQxMzkwOQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1640#discussion_r488413909", "bodyText": "to set the fully qualified class names of {@link ResourceProvider} implementations that are found on the classpath but should be disabled", "author": "anuraaga", "createdAt": "2020-09-15T06:21:43Z", "path": "sdk/common/src/main/java/io/opentelemetry/sdk/resources/ResourcesConfig.java", "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Copyright 2019, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.resources;\n+\n+import com.google.auto.value.AutoValue;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Preconditions;\n+import com.google.common.collect.ImmutableSet;\n+import io.opentelemetry.sdk.common.export.ConfigBuilder;\n+import io.opentelemetry.trace.Span;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.Set;\n+import javax.annotation.concurrent.Immutable;\n+\n+/**\n+ * Class that holds global resources parameters.\n+ *\n+ * <p>Configuration options for {@link ResourcesConfig} can be read from system properties,\n+ * environment variables, or {@link Properties} objects.\n+ *\n+ * <p>For system properties and {@link Properties} objects, {@link ResourcesConfig} will look for\n+ * the following names:\n+ *\n+ * <ul>\n+ *   <li>{@code otel.java.disable.resources.providers}: to set the ResourceProvider service", "originalCommit": "62d4680e67e19e2e822cdb29cdce01e82b669957", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQxNDc5OA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1640#discussion_r488414798", "bodyText": "I didn't look at other config classes and suspect we may have a pattern here - I find it hard to read that we have two constants with the same name here. I think it's fine to just inline ImmutableSet.of() in newBuilder()", "author": "anuraaga", "createdAt": "2020-09-15T06:23:42Z", "path": "sdk/common/src/main/java/io/opentelemetry/sdk/resources/ResourcesConfig.java", "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Copyright 2019, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.resources;\n+\n+import com.google.auto.value.AutoValue;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Preconditions;\n+import com.google.common.collect.ImmutableSet;\n+import io.opentelemetry.sdk.common.export.ConfigBuilder;\n+import io.opentelemetry.trace.Span;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.Set;\n+import javax.annotation.concurrent.Immutable;\n+\n+/**\n+ * Class that holds global resources parameters.\n+ *\n+ * <p>Configuration options for {@link ResourcesConfig} can be read from system properties,\n+ * environment variables, or {@link Properties} objects.\n+ *\n+ * <p>For system properties and {@link Properties} objects, {@link ResourcesConfig} will look for\n+ * the following names:\n+ *\n+ * <ul>\n+ *   <li>{@code otel.java.disable.resources.providers}: to set the ResourceProvider service\n+ *       providers found on the classpath to be disabled.\n+ * </ul>\n+ *\n+ * <p>For environment variables, {@link ResourcesConfig} will look for the following names:\n+ *\n+ * <ul>\n+ *   <li>{@code OTEL_JAVA_DISABLE_RESOURCES_PROVIDERS}: to set the ResourceProvider service\n+ *       providers found on the classpath to be disabled.\n+ * </ul>\n+ */\n+@AutoValue\n+@Immutable\n+public abstract class ResourcesConfig {\n+  // These values are the default values for all the global parameters.\n+  private static final ImmutableSet<String> OTEL_JAVA_DISABLE_RESOURCES_PROVIDERS =", "originalCommit": "62d4680e67e19e2e822cdb29cdce01e82b669957", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQxNTEwNA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1640#discussion_r488415104", "bodyText": "Use a Guava Splitter and do omitEmptyValues and trimResults\nhttps://guava.dev/releases/23.0/api/docs/com/google/common/base/Splitter.html", "author": "anuraaga", "createdAt": "2020-09-15T06:24:26Z", "path": "sdk/common/src/main/java/io/opentelemetry/sdk/resources/ResourcesConfig.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/*\n+ * Copyright 2019, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.resources;\n+\n+import com.google.auto.value.AutoValue;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Preconditions;\n+import com.google.common.collect.ImmutableSet;\n+import io.opentelemetry.sdk.common.export.ConfigBuilder;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.Set;\n+import javax.annotation.concurrent.Immutable;\n+\n+/**\n+ * Class that holds global resources parameters.\n+ *\n+ * <p>Configuration options for {@link ResourcesConfig} can be read from system properties,\n+ * environment variables, or {@link Properties} objects.\n+ *\n+ * <p>For system properties and {@link Properties} objects, {@link ResourcesConfig} will look for\n+ * the following names:\n+ *\n+ * <ul>\n+ *   <li>{@code otel.java.disable.resources.providers}: to set the ResourceProvider service\n+ *       providers found on the classpath to be disabled.\n+ * </ul>\n+ *\n+ * <p>For environment variables, {@link ResourcesConfig} will look for the following names:\n+ *\n+ * <ul>\n+ *   <li>{@code OTEL_JAVA_DISABLE_RESOURCES_PROVIDERS}: to set the ResourceProvider service\n+ *       providers found on the classpath to be disabled.\n+ * </ul>\n+ */\n+@AutoValue\n+@Immutable\n+public abstract class ResourcesConfig {\n+  // These values are the default values for all the global parameters.\n+  private static final ImmutableSet<String> OTEL_JAVA_DISABLE_RESOURCES_PROVIDERS =\n+      ImmutableSet.of();\n+\n+  /**\n+   * Returns the default {@code ResourcesConfig}.\n+   *\n+   * @return the default {@code ResourcesConfig}.\n+   * @since 0.9.0\n+   */\n+  public static ResourcesConfig getDefault() {\n+    return DEFAULT;\n+  }\n+\n+  private static final ResourcesConfig DEFAULT = ResourcesConfig.newBuilder().build();\n+\n+  /**\n+   * Returns the ResourceProvider service providers found on the classpath to be disabled.\n+   *\n+   * @return the ResourceProvider service providers found on the classpath to be disabled.\n+   */\n+  public abstract Set<String> getDisabledResourceProviders();\n+\n+  /**\n+   * Returns a new {@link Builder}.\n+   *\n+   * @return a new {@link Builder}.\n+   */\n+  public static Builder newBuilder() {\n+    return new AutoValue_ResourcesConfig.Builder()\n+        .setDisabledResourceProviders(OTEL_JAVA_DISABLE_RESOURCES_PROVIDERS);\n+  }\n+\n+  /**\n+   * Returns a {@link Builder} initialized to the same property values as the current instance.\n+   *\n+   * @return a {@link Builder} initialized to the same property values as the current instance.\n+   */\n+  public abstract Builder toBuilder();\n+\n+  /** Builder for {@link ResourcesConfig}. */\n+  @AutoValue.Builder\n+  public abstract static class Builder extends ConfigBuilder<Builder> {\n+\n+    private static final String OTEL_JAVA_DISABLE_RESOURCES_PROVIDERS =\n+        \"otel.java.disable.resources.providers\";\n+\n+    Builder() {}\n+\n+    /**\n+     * Sets the configuration values from the given configuration map for only the available keys.\n+     *\n+     * @param configMap {@link Map} holding the configuration values.\n+     * @return this\n+     */\n+    @VisibleForTesting\n+    @Override\n+    protected Builder fromConfigMap(\n+        Map<String, String> configMap, NamingConvention namingConvention) {\n+      configMap = namingConvention.normalize(configMap);\n+\n+      String stringValue = getStringProperty(OTEL_JAVA_DISABLE_RESOURCES_PROVIDERS, configMap);\n+      if (stringValue != null) {\n+        this.setDisabledResourceProviders(ImmutableSet.copyOf(stringValue.split(\",\")));", "originalCommit": "ce25f08bf978b3475e0f7ca9549fa033f8cb83a7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQxNTIyNA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1640#discussion_r488415224", "bodyText": "Interestingly we already are using disabled here :-)", "author": "anuraaga", "createdAt": "2020-09-15T06:24:43Z", "path": "sdk/common/src/main/java/io/opentelemetry/sdk/resources/ResourcesConfig.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/*\n+ * Copyright 2019, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.resources;\n+\n+import com.google.auto.value.AutoValue;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Preconditions;\n+import com.google.common.collect.ImmutableSet;\n+import io.opentelemetry.sdk.common.export.ConfigBuilder;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.Set;\n+import javax.annotation.concurrent.Immutable;\n+\n+/**\n+ * Class that holds global resources parameters.\n+ *\n+ * <p>Configuration options for {@link ResourcesConfig} can be read from system properties,\n+ * environment variables, or {@link Properties} objects.\n+ *\n+ * <p>For system properties and {@link Properties} objects, {@link ResourcesConfig} will look for\n+ * the following names:\n+ *\n+ * <ul>\n+ *   <li>{@code otel.java.disable.resources.providers}: to set the ResourceProvider service\n+ *       providers found on the classpath to be disabled.\n+ * </ul>\n+ *\n+ * <p>For environment variables, {@link ResourcesConfig} will look for the following names:\n+ *\n+ * <ul>\n+ *   <li>{@code OTEL_JAVA_DISABLE_RESOURCES_PROVIDERS}: to set the ResourceProvider service\n+ *       providers found on the classpath to be disabled.\n+ * </ul>\n+ */\n+@AutoValue\n+@Immutable\n+public abstract class ResourcesConfig {\n+  // These values are the default values for all the global parameters.\n+  private static final ImmutableSet<String> OTEL_JAVA_DISABLE_RESOURCES_PROVIDERS =\n+      ImmutableSet.of();\n+\n+  /**\n+   * Returns the default {@code ResourcesConfig}.\n+   *\n+   * @return the default {@code ResourcesConfig}.\n+   * @since 0.9.0\n+   */\n+  public static ResourcesConfig getDefault() {\n+    return DEFAULT;\n+  }\n+\n+  private static final ResourcesConfig DEFAULT = ResourcesConfig.newBuilder().build();\n+\n+  /**\n+   * Returns the ResourceProvider service providers found on the classpath to be disabled.\n+   *\n+   * @return the ResourceProvider service providers found on the classpath to be disabled.\n+   */\n+  public abstract Set<String> getDisabledResourceProviders();\n+\n+  /**\n+   * Returns a new {@link Builder}.\n+   *\n+   * @return a new {@link Builder}.\n+   */\n+  public static Builder newBuilder() {\n+    return new AutoValue_ResourcesConfig.Builder()\n+        .setDisabledResourceProviders(OTEL_JAVA_DISABLE_RESOURCES_PROVIDERS);\n+  }\n+\n+  /**\n+   * Returns a {@link Builder} initialized to the same property values as the current instance.\n+   *\n+   * @return a {@link Builder} initialized to the same property values as the current instance.\n+   */\n+  public abstract Builder toBuilder();\n+\n+  /** Builder for {@link ResourcesConfig}. */\n+  @AutoValue.Builder\n+  public abstract static class Builder extends ConfigBuilder<Builder> {\n+\n+    private static final String OTEL_JAVA_DISABLE_RESOURCES_PROVIDERS =\n+        \"otel.java.disable.resources.providers\";\n+\n+    Builder() {}\n+\n+    /**\n+     * Sets the configuration values from the given configuration map for only the available keys.\n+     *\n+     * @param configMap {@link Map} holding the configuration values.\n+     * @return this\n+     */\n+    @VisibleForTesting\n+    @Override\n+    protected Builder fromConfigMap(\n+        Map<String, String> configMap, NamingConvention namingConvention) {\n+      configMap = namingConvention.normalize(configMap);\n+\n+      String stringValue = getStringProperty(OTEL_JAVA_DISABLE_RESOURCES_PROVIDERS, configMap);\n+      if (stringValue != null) {\n+        this.setDisabledResourceProviders(ImmutableSet.copyOf(stringValue.split(\",\")));\n+      }\n+      return this;\n+    }\n+\n+    /**\n+     * @param disabledResourceProviders the ResourceProvider service providers found on the\n+     *     classpath to be disabled.\n+     * @return this.\n+     */\n+    public abstract Builder setDisabledResourceProviders(Set<String> disabledResourceProviders);", "originalCommit": "ce25f08bf978b3475e0f7ca9549fa033f8cb83a7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQxNTg3MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1640#discussion_r488415871", "bodyText": "Instead of adding getName which might have conflicting values and is a bit annoying to implement in resource providers, let's just match getClass().getName() vs the property", "author": "anuraaga", "createdAt": "2020-09-15T06:26:14Z", "path": "sdk_extensions/resources/src/main/java/io/opentelemetry/sdk/extensions/resources/ProcessResource.java", "diffHunk": "@@ -79,4 +81,9 @@ protected Attributes getAttributes() {\n \n     return attributes.build();\n   }\n+\n+  @Override\n+  public String getName() {", "originalCommit": "62d4680e67e19e2e822cdb29cdce01e82b669957", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "8134008aff918dd2b7d8049c9f148e1892305100", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/8134008aff918dd2b7d8049c9f148e1892305100", "message": "Review changes", "committedDate": "2020-09-15T06:43:05Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQyNDE4Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1640#discussion_r488424182", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                      .contains(resourceProvider.getClass().getSimpleName())) {\n          \n          \n            \n                      .contains(resourceProvider.getClass().getName())) {\n          \n      \n    \n    \n  \n\nSo it's fully qualified", "author": "anuraaga", "createdAt": "2020-09-15T06:45:52Z", "path": "sdk/common/src/main/java/io/opentelemetry/sdk/resources/Resource.java", "diffHunk": "@@ -78,6 +80,11 @@ private static String readVersion() {\n   private static Resource readResourceFromProviders() {\n     Resource result = Resource.EMPTY;\n     for (ResourceProvider resourceProvider : ServiceLoader.load(ResourceProvider.class)) {\n+      if (RESOURCES_CONFIG\n+          .getDisabledResourceProviders()\n+          .contains(resourceProvider.getClass().getSimpleName())) {", "originalCommit": "8134008aff918dd2b7d8049c9f148e1892305100", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQyNDQ0Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1640#discussion_r488424442", "bodyText": "Copy over comment from above", "author": "anuraaga", "createdAt": "2020-09-15T06:46:22Z", "path": "sdk/common/src/main/java/io/opentelemetry/sdk/resources/ResourcesConfig.java", "diffHunk": "@@ -0,0 +1,143 @@\n+/*\n+ * Copyright 2019, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.resources;\n+\n+import com.google.auto.value.AutoValue;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Preconditions;\n+import com.google.common.base.Splitter;\n+import com.google.common.collect.ImmutableSet;\n+import io.opentelemetry.sdk.common.export.ConfigBuilder;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.Set;\n+import javax.annotation.concurrent.Immutable;\n+\n+/**\n+ * Class that holds global resources parameters.\n+ *\n+ * <p>Configuration options for {@link ResourcesConfig} can be read from system properties,\n+ * environment variables, or {@link Properties} objects.\n+ *\n+ * <p>For system properties and {@link Properties} objects, {@link ResourcesConfig} will look for\n+ * the following names:\n+ *\n+ * <ul>\n+ *   <li>{@code otel.java.disabled.resource_providers}: to set the fully qualified class names of\n+ *       {@link ResourceProvider} implementations that are found on the classpath but should be\n+ *       disabled.\n+ * </ul>\n+ *\n+ * <p>For environment variables, {@link ResourcesConfig} will look for the following names:\n+ *\n+ * <ul>\n+ *   <li>{@code OTEL_JAVA_DISABLED_RESOURCES_PROVIDERS}: to set the ResourceProvider service", "originalCommit": "8134008aff918dd2b7d8049c9f148e1892305100", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "e5e944467b8ce2032e6962b252afb4b5649664a9", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/e5e944467b8ce2032e6962b252afb4b5649664a9", "message": "Review changes", "committedDate": "2020-09-15T06:51:30Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQzOTkxOA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1640#discussion_r488439918", "bodyText": "Please add this also to package-info.java", "author": "thisthat", "createdAt": "2020-09-15T07:16:44Z", "path": "sdk/common/src/main/java/io/opentelemetry/sdk/resources/ResourcesConfig.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Copyright 2019, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.resources;\n+\n+import com.google.auto.value.AutoValue;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Preconditions;\n+import com.google.common.base.Splitter;\n+import com.google.common.collect.ImmutableSet;\n+import io.opentelemetry.sdk.common.export.ConfigBuilder;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.Set;\n+import javax.annotation.concurrent.Immutable;\n+\n+/**\n+ * Class that holds global resources parameters.\n+ *\n+ * <p>Configuration options for {@link ResourcesConfig} can be read from system properties,\n+ * environment variables, or {@link Properties} objects.\n+ *\n+ * <p>For system properties and {@link Properties} objects, {@link ResourcesConfig} will look for\n+ * the following names:\n+ *\n+ * <ul>\n+ *   <li>{@code otel.java.disabled.resource_providers}: to set the fully qualified class names of\n+ *       {@link ResourceProvider} implementations that are found on the classpath but should be\n+ *       disabled.\n+ * </ul>\n+ *\n+ * <p>For environment variables, {@link ResourcesConfig} will look for the following names:\n+ *\n+ * <ul>\n+ *   <li>{@code OTEL_JAVA_DISABLED_RESOURCES_PROVIDERS}: to set the fully qualified class names of", "originalCommit": "e5e944467b8ce2032e6962b252afb4b5649664a9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "141a1cb0fc53037deab365cc08a16ac9a34b1024", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/141a1cb0fc53037deab365cc08a16ac9a34b1024", "message": "Review changes + Tests", "committedDate": "2020-09-15T08:07:57Z", "type": "commit"}, {"oid": "4e0fac1c0410b9b3102bfd4efebf8292b17a9abf", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/4e0fac1c0410b9b3102bfd4efebf8292b17a9abf", "message": "Remove extra line", "committedDate": "2020-09-15T08:09:21Z", "type": "commit"}]}