{"pr_number": 907, "pr_title": "Add an InstrumentRegistry that tracks all created Instruments", "pr_createdAt": "2020-02-21T21:09:58Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java/pull/907", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjgxMDIyNA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/907#discussion_r382810224", "bodyText": "My only concern here is the values here are backed by the map, so changes to the underlying map while iterating over the resulting collection can result in surprising or ill-defined behaviors. This might not be an issue, but it's something to be aware of.", "author": "jkwatson", "createdAt": "2020-02-21T21:18:13Z", "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/InstrumentRegistry.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.metrics;\n+\n+import java.util.Collection;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+\n+// Basic registry class for metrics instruments. The current implementation allows instruments to be\n+// registered only once for a given name.\n+//\n+// TODO: Discuss what is the right behavior when an already registered Instrument with the same name\n+// is present.\n+// TODO: Decide what is the identifier for an Instrument? Only name?\n+// TODO: How do we know if an registered instrument is the same as the provided one?\n+final class InstrumentRegistry {\n+  private final ConcurrentMap<String, AbstractInstrument> registry = new ConcurrentHashMap<>();\n+\n+  /**\n+   * Registers the given {@code instrument} to this registry.\n+   *\n+   * @param descriptor the descriptor of the {@code Instrument}.\n+   * @param instrument the newly created {@code Instrument}.\n+   * @return {@code true} if the instrument is successfully registered.\n+   */\n+  boolean register(InstrumentDescriptor descriptor, AbstractInstrument instrument) {\n+    AbstractInstrument oldInstrument = registry.putIfAbsent(descriptor.getName(), instrument);\n+    return oldInstrument == null;\n+  }\n+\n+  /**\n+   * Returns a {@code Collection} view of the registered instruments.\n+   *\n+   * @return a {@code Collection} view of the registered instruments.\n+   */\n+  Collection<AbstractInstrument> getRegisteredInstruments() {\n+    return registry.values();", "originalCommit": "3ef1abea46180c014d6de4b8e0b654ef09974d8a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjgxMTQ0Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/907#discussion_r382811442", "bodyText": "I don't think we can have ill-defined behaviors, how else do you suggest to iterate?", "author": "bogdandrutu", "createdAt": "2020-02-21T21:21:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjgxMDIyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjgxMjI5MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/907#discussion_r382812291", "bodyText": "I think the only sure way is to make a copy of values collection before returning them.", "author": "jkwatson", "createdAt": "2020-02-21T21:23:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjgxMDIyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjgxNjI5OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/907#discussion_r382816299", "bodyText": "That has the same problem correct? During copying the same problems can be faced.", "author": "bogdandrutu", "createdAt": "2020-02-21T21:34:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjgxMDIyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjgyMDM5Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/907#discussion_r382820396", "bodyText": "That is true, but at least once the values leave this method then they will be stable for consumers.", "author": "jkwatson", "createdAt": "2020-02-21T21:45:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjgxMDIyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU0Njk3NQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/907#discussion_r383546975", "bodyText": "Done.", "author": "bogdandrutu", "createdAt": "2020-02-24T22:15:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjgxMDIyNA=="}], "type": "inlineReview"}, {"oid": "76ce81b2ec3c1db8360deeb3d281e14f54e3838b", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/76ce81b2ec3c1db8360deeb3d281e14f54e3838b", "message": "Add an InstrumentRegistry that tracks all created Instruments\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>", "committedDate": "2020-02-24T22:15:19Z", "type": "commit"}, {"oid": "76ce81b2ec3c1db8360deeb3d281e14f54e3838b", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/76ce81b2ec3c1db8360deeb3d281e14f54e3838b", "message": "Add an InstrumentRegistry that tracks all created Instruments\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>", "committedDate": "2020-02-24T22:15:19Z", "type": "forcePushed"}]}