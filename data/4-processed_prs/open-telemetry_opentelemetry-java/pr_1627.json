{"pr_number": 1627, "pr_title": "Add rationale.md to document design decisions that people may be curi\u2026", "pr_createdAt": "2020-09-08T08:14:22Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java/pull/1627", "timeline": [{"oid": "c924dde372d5157e12814d3d74b2bbb7c992e15f", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/c924dde372d5157e12814d3d74b2bbb7c992e15f", "message": "Add rationale.md to document design decisions that people may be curious about later.", "committedDate": "2020-09-08T08:14:15Z", "type": "commit"}, {"oid": "c924dde372d5157e12814d3d74b2bbb7c992e15f", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/c924dde372d5157e12814d3d74b2bbb7c992e15f", "message": "Add rationale.md to document design decisions that people may be curious about later.", "committedDate": "2020-09-08T08:14:15Z", "type": "forcePushed"}, {"oid": "58a4de1eb6719288b04a4214c7d763099750b4d4", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/58a4de1eb6719288b04a4214c7d763099750b4d4", "message": "Formatting", "committedDate": "2020-09-08T08:14:53Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDc0NDI3MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1627#discussion_r484744271", "bodyText": "In that case, wouldn't the compiler tell you that span is not available anymore? So you could then switch to using a nested try/catch or a try/finally instead of try().", "author": "Oberon00", "createdAt": "2020-09-08T08:30:38Z", "path": "docs/rationale.md", "diffHunk": "@@ -0,0 +1,26 @@\n+# OpenTelemetry Rationale\n+\n+When creating a library, often times designs and decisions are made that get lost over time. This\n+document tries to collect information on design decisions to answer common questions that may come\n+up when you explore the SDK.\n+\n+## Span not `Closeable`\n+\n+Because a `Span` has a lifecycle, where it is started and MUST be ended, it seems intuitive that a\n+`Span` should implement `Closeable` or `AutoCloseable` to allow usage with Java try-with-resources\n+construct. However, `Span`s are unique in that they must still be alive when handling exceptions,\n+which try-with-resources does not allow. Take this example:\n+\n+```java\n+Span span = tracer.buildSpan(\"someWork\").start();\n+try (Scope scope = tracer.scopeManager().activate(span)) {\n+    // Do things.\n+} catch (Exception ex) {\n+    span.recordException(ex);\n+} finally {\n+    span.finish();\n+}\n+```\n+\n+It would not be possible to call `recordException` if `span` was also using try-with-resources.\n+Because this is a common usage for spans, we do not support try-with-resources.", "originalCommit": "58a4de1eb6719288b04a4214c7d763099750b4d4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTM1NDI3Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1627#discussion_r485354276", "bodyText": "My reading of the attached issue is this is the rationale for the decision (@arminru you originally provided the link to the OT issue so maybe you can confirm) and for this PR I want to capture it as directly as possible, attempts by me to backport additional rationale or change it would be like rewriting history ;) Also, main motivation for the PR itself is to have a location to continue to add even more rationale when things come up (or more concretely, to knock out a required-for-ga issue :)).", "author": "anuraaga", "createdAt": "2020-09-09T05:52:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDc0NDI3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTM5Njg0NQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1627#discussion_r485396845", "bodyText": "I was not part in making that decision since this was merely taken over from OT (without taking over a rationale doc) and only dug up the explanation in the issue linked above when I was wondering myself.\nA nested try/catch would work but not having Span implement Closeable at all, makes it even harder to build a structure that makes recording errors impossible. Personally, I think this should be left to the user to decide how they want to use things (maybe they don't have any means of getting a reasonable exception or error status/message to set and with Span.Status being removed there's nothing left at all to do) but I don't have strong opinion here (one could always add a wrapper to make their span closeable).\nEither way, this seems to be the original rationale from back when the decision was made (@carlosalberto please confirm), so it would be the correct reason to state in this doc.", "author": "arminru", "createdAt": "2020-09-09T07:29:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDc0NDI3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTc2MzE1OA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1627#discussion_r485763158", "bodyText": "That's indeed the original rationale - that's also why this is not allowed (worth adding it?):\ntry (Scope scope = tracer.spanBuilder().startAsCurrentSpan()) {\n} catch (Exception e) {\n  // Cannot report the error AND there's no handle to `Span` at this point.\n}", "author": "carlosalberto", "createdAt": "2020-09-09T16:42:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDc0NDI3MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDc0NTgwNA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1627#discussion_r484745804", "bodyText": "I don't think we have a \"scopeManager\" method on tracer. Should this be:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            try (Scope scope = tracer.scopeManager().activate(span)) {\n          \n          \n            \n            try (Scope scope = tracer.withSpan(span)) {", "author": "Oberon00", "createdAt": "2020-09-08T08:32:54Z", "path": "docs/rationale.md", "diffHunk": "@@ -0,0 +1,26 @@\n+# OpenTelemetry Rationale\n+\n+When creating a library, often times designs and decisions are made that get lost over time. This\n+document tries to collect information on design decisions to answer common questions that may come\n+up when you explore the SDK.\n+\n+## Span not `Closeable`\n+\n+Because a `Span` has a lifecycle, where it is started and MUST be ended, it seems intuitive that a\n+`Span` should implement `Closeable` or `AutoCloseable` to allow usage with Java try-with-resources\n+construct. However, `Span`s are unique in that they must still be alive when handling exceptions,\n+which try-with-resources does not allow. Take this example:\n+\n+```java\n+Span span = tracer.buildSpan(\"someWork\").start();\n+try (Scope scope = tracer.scopeManager().activate(span)) {", "originalCommit": "58a4de1eb6719288b04a4214c7d763099750b4d4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDk3OTg1Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1627#discussion_r484979853", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                span.finish();\n          \n          \n            \n                span.end();", "author": "jkwatson", "createdAt": "2020-09-08T14:48:14Z", "path": "docs/rationale.md", "diffHunk": "@@ -0,0 +1,26 @@\n+# OpenTelemetry Rationale\n+\n+When creating a library, often times designs and decisions are made that get lost over time. This\n+document tries to collect information on design decisions to answer common questions that may come\n+up when you explore the SDK.\n+\n+## Span not `Closeable`\n+\n+Because a `Span` has a lifecycle, where it is started and MUST be ended, it seems intuitive that a\n+`Span` should implement `Closeable` or `AutoCloseable` to allow usage with Java try-with-resources\n+construct. However, `Span`s are unique in that they must still be alive when handling exceptions,\n+which try-with-resources does not allow. Take this example:\n+\n+```java\n+Span span = tracer.buildSpan(\"someWork\").start();\n+try (Scope scope = tracer.scopeManager().activate(span)) {\n+    // Do things.\n+} catch (Exception ex) {\n+    span.recordException(ex);\n+} finally {\n+    span.finish();", "originalCommit": "58a4de1eb6719288b04a4214c7d763099750b4d4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "9078df8ed139493790322af6ac442cb703ff8ecd", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/9078df8ed139493790322af6ac442cb703ff8ecd", "message": "OT -> OTel", "committedDate": "2020-09-09T05:43:08Z", "type": "commit"}]}