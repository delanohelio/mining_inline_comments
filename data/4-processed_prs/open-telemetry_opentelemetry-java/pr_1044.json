{"pr_number": 1044, "pr_title": "Update release instructions.", "pr_createdAt": "2020-03-26T21:53:01Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java/pull/1044", "timeline": [{"oid": "c1f6e9f9d117211415115f93245893b4b3335d75", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/c1f6e9f9d117211415115f93245893b4b3335d75", "message": "Update release instructions.\n\nSigned-off-by: Bogdan Drutu <bogdandrutu@gmail.com>", "committedDate": "2020-03-26T21:50:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk1NjQ1NA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1044#discussion_r398956454", "bodyText": "This sounds great to me, and it sounds we might use the same pattern on other languages, btw (as a recommendation, and if it applies, of course).", "author": "carlosalberto", "createdAt": "2020-03-26T23:43:46Z", "path": "RELEASING.md", "diffHunk": "@@ -0,0 +1,148 @@\n+# OpenTelemetry Release Process\n+\n+## Tagging the Release\n+\n+The first step in the release process is to create a release branch, bump versions, and create a tag\n+for the release. Our release branches follow the naming convention of v<major>.<minor>.x, while the\n+tags include the patch version v<major>.<minor>.<patch>. For example, the same branch v0.3.x would\n+be used to create all v0.3.* tags (e.g. v0.3.0, v0.3.1).", "originalCommit": "c1f6e9f9d117211415115f93245893b4b3335d75", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk2NzExNA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1044#discussion_r398967114", "bodyText": "yes, already applied this to proto :). Please push this to python :))", "author": "bogdandrutu", "createdAt": "2020-03-27T00:18:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk1NjQ1NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk1Nzc5Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1044#discussion_r398957793", "bodyText": "I still think we should have the version change more automated (without the deployment part). In Maven there's a plugin to update all artifact versions, which doesn't seem to be the case for Gradle (that I know). Should we create an issue for this?", "author": "carlosalberto", "createdAt": "2020-03-26T23:48:03Z", "path": "RELEASING.md", "diffHunk": "@@ -0,0 +1,148 @@\n+# OpenTelemetry Release Process\n+\n+## Tagging the Release\n+\n+The first step in the release process is to create a release branch, bump versions, and create a tag\n+for the release. Our release branches follow the naming convention of v<major>.<minor>.x, while the\n+tags include the patch version v<major>.<minor>.<patch>. For example, the same branch v0.3.x would\n+be used to create all v0.3.* tags (e.g. v0.3.0, v0.3.1).\n+\n+In this section upstream repository refers to the main opentelemetry-java github repository.\n+\n+Before any push to the upstream repository you need to create a\n+[personal access token](https://help.github.com/en/github/authenticating-to-github/creating-a-personal-access-token-for-the-command-line).\n+\n+1.  Create the release branch and push it to GitHub:\n+\n+    ```bash\n+    $ MAJOR=0 MINOR=4 PATCH=0 # Set appropriately for new release\n+    $ VERSION_FILES=(\n+      build.gradle\n+      )\n+    $ git checkout -b v$MAJOR.$MINOR.x master\n+    $ git push upstream v$MAJOR.$MINOR.x\n+    ```\n+    The branch will be automatically protected by the GitHub branch protection rule for release\n+    branches.\n+\n+2.  For `master` branch:\n+\n+    -   Change root build files to the next minor snapshot (e.g.\n+        `0.4.0-SNAPSHOT`).\n+\n+    ```bash\n+    $ git checkout -b bump-version master\n+    # Change version to next minor (and keep -SNAPSHOT)\n+    $ sed -i 's/[0-9]\\+\\.[0-9]\\+\\.[0-9]\\+\\(.*CURRENT_OPEN_TELEMETRY_VERSION\\)/'$MAJOR.$((MINOR+1)).0'\\1/' \\", "originalCommit": "c1f6e9f9d117211415115f93245893b4b3335d75", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk2NjQ1OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1044#discussion_r398966459", "bodyText": "Sure, for the moment I put the instructions to do this manually (automated :)) )", "author": "bogdandrutu", "createdAt": "2020-03-27T00:16:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk1Nzc5Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk1Nzk2Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1044#discussion_r398957963", "bodyText": "+1", "author": "carlosalberto", "createdAt": "2020-03-26T23:48:33Z", "path": "RELEASING.md", "diffHunk": "@@ -0,0 +1,148 @@\n+# OpenTelemetry Release Process\n+\n+## Tagging the Release\n+\n+The first step in the release process is to create a release branch, bump versions, and create a tag\n+for the release. Our release branches follow the naming convention of v<major>.<minor>.x, while the\n+tags include the patch version v<major>.<minor>.<patch>. For example, the same branch v0.3.x would\n+be used to create all v0.3.* tags (e.g. v0.3.0, v0.3.1).\n+\n+In this section upstream repository refers to the main opentelemetry-java github repository.\n+\n+Before any push to the upstream repository you need to create a\n+[personal access token](https://help.github.com/en/github/authenticating-to-github/creating-a-personal-access-token-for-the-command-line).\n+\n+1.  Create the release branch and push it to GitHub:\n+\n+    ```bash\n+    $ MAJOR=0 MINOR=4 PATCH=0 # Set appropriately for new release\n+    $ VERSION_FILES=(\n+      build.gradle\n+      )\n+    $ git checkout -b v$MAJOR.$MINOR.x master\n+    $ git push upstream v$MAJOR.$MINOR.x\n+    ```\n+    The branch will be automatically protected by the GitHub branch protection rule for release\n+    branches.\n+\n+2.  For `master` branch:\n+\n+    -   Change root build files to the next minor snapshot (e.g.\n+        `0.4.0-SNAPSHOT`).\n+\n+    ```bash\n+    $ git checkout -b bump-version master\n+    # Change version to next minor (and keep -SNAPSHOT)\n+    $ sed -i 's/[0-9]\\+\\.[0-9]\\+\\.[0-9]\\+\\(.*CURRENT_OPEN_TELEMETRY_VERSION\\)/'$MAJOR.$((MINOR+1)).0'\\1/' \\\n+      \"${VERSION_FILES[@]}\"\n+    $ ./gradlew build\n+    $ git commit -a -m \"Start $MAJOR.$((MINOR+1)).0 development cycle\"\n+    ```\n+\n+    -   Go through PR review and push the master branch to GitHub.\n+       \n+3.  For `vMajor.Minor.x` branch:\n+\n+    -   Change root build files to remove \"-SNAPSHOT\" for the next release\n+        version (e.g. `0.3.0`). Commit the result and make a tag:\n+\n+    ```bash\n+    $ git checkout -b release v$MAJOR.$MINOR.x\n+    # Change version to remove -SNAPSHOT\n+    $ sed -i 's/-SNAPSHOT\\(.*CURRENT_OPEN_TELEMETRY_VERSION\\)/\\1/' \"${VERSION_FILES[@]}\"\n+    $ ./gradlew build\n+    $ git commit -a -m \"Bump version to $MAJOR.$MINOR.$PATCH\"\n+    $ git tag -a v$MAJOR.$MINOR.$PATCH -m \"Version $MAJOR.$MINOR.$PATCH\"\n+    ```\n+\n+    -   Change root build files to the next snapshot version (e.g.\n+        `0.3.1-SNAPSHOT`). Commit the result:\n+\n+    ```bash\n+    # Change version to next patch and add -SNAPSHOT\n+    $ sed -i 's/[0-9]\\+\\.[0-9]\\+\\.[0-9]\\+\\(.*CURRENT_OPEN_TELEMETRY_VERSION\\)/'$MAJOR.$MINOR.$((PATCH+1))-SNAPSHOT'\\1/' \\\n+     \"${VERSION_FILES[@]}\"\n+    $ ./gradlew build\n+    $ git commit -a -m \"Bump version to $MAJOR.$MINOR.$((PATCH+1))-SNAPSHOT\"\n+    ```\n+\n+    -   Go through PR review and push the release tag and updated release branch\n+        to GitHub (note: do not squash the commits when you merge otherwise you\n+        will lose the release tag):\n+\n+    ```bash\n+    $ git checkout v$MAJOR.$MINOR.x\n+    $ git merge --ff-only release", "originalCommit": "c1f6e9f9d117211415115f93245893b4b3335d75", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk1ODAzMw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1044#discussion_r398958033", "bodyText": "+1", "author": "carlosalberto", "createdAt": "2020-03-26T23:48:50Z", "path": "RELEASING.md", "diffHunk": "@@ -0,0 +1,148 @@\n+# OpenTelemetry Release Process\n+\n+## Tagging the Release\n+\n+The first step in the release process is to create a release branch, bump versions, and create a tag\n+for the release. Our release branches follow the naming convention of v<major>.<minor>.x, while the\n+tags include the patch version v<major>.<minor>.<patch>. For example, the same branch v0.3.x would\n+be used to create all v0.3.* tags (e.g. v0.3.0, v0.3.1).\n+\n+In this section upstream repository refers to the main opentelemetry-java github repository.\n+\n+Before any push to the upstream repository you need to create a\n+[personal access token](https://help.github.com/en/github/authenticating-to-github/creating-a-personal-access-token-for-the-command-line).\n+\n+1.  Create the release branch and push it to GitHub:\n+\n+    ```bash\n+    $ MAJOR=0 MINOR=4 PATCH=0 # Set appropriately for new release\n+    $ VERSION_FILES=(\n+      build.gradle\n+      )\n+    $ git checkout -b v$MAJOR.$MINOR.x master\n+    $ git push upstream v$MAJOR.$MINOR.x\n+    ```\n+    The branch will be automatically protected by the GitHub branch protection rule for release\n+    branches.\n+\n+2.  For `master` branch:\n+\n+    -   Change root build files to the next minor snapshot (e.g.\n+        `0.4.0-SNAPSHOT`).\n+\n+    ```bash\n+    $ git checkout -b bump-version master\n+    # Change version to next minor (and keep -SNAPSHOT)\n+    $ sed -i 's/[0-9]\\+\\.[0-9]\\+\\.[0-9]\\+\\(.*CURRENT_OPEN_TELEMETRY_VERSION\\)/'$MAJOR.$((MINOR+1)).0'\\1/' \\\n+      \"${VERSION_FILES[@]}\"\n+    $ ./gradlew build\n+    $ git commit -a -m \"Start $MAJOR.$((MINOR+1)).0 development cycle\"\n+    ```\n+\n+    -   Go through PR review and push the master branch to GitHub.\n+       \n+3.  For `vMajor.Minor.x` branch:\n+\n+    -   Change root build files to remove \"-SNAPSHOT\" for the next release\n+        version (e.g. `0.3.0`). Commit the result and make a tag:\n+\n+    ```bash\n+    $ git checkout -b release v$MAJOR.$MINOR.x\n+    # Change version to remove -SNAPSHOT\n+    $ sed -i 's/-SNAPSHOT\\(.*CURRENT_OPEN_TELEMETRY_VERSION\\)/\\1/' \"${VERSION_FILES[@]}\"\n+    $ ./gradlew build\n+    $ git commit -a -m \"Bump version to $MAJOR.$MINOR.$PATCH\"\n+    $ git tag -a v$MAJOR.$MINOR.$PATCH -m \"Version $MAJOR.$MINOR.$PATCH\"\n+    ```\n+\n+    -   Change root build files to the next snapshot version (e.g.\n+        `0.3.1-SNAPSHOT`). Commit the result:\n+\n+    ```bash\n+    # Change version to next patch and add -SNAPSHOT\n+    $ sed -i 's/[0-9]\\+\\.[0-9]\\+\\.[0-9]\\+\\(.*CURRENT_OPEN_TELEMETRY_VERSION\\)/'$MAJOR.$MINOR.$((PATCH+1))-SNAPSHOT'\\1/' \\\n+     \"${VERSION_FILES[@]}\"\n+    $ ./gradlew build\n+    $ git commit -a -m \"Bump version to $MAJOR.$MINOR.$((PATCH+1))-SNAPSHOT\"\n+    ```\n+\n+    -   Go through PR review and push the release tag and updated release branch\n+        to GitHub (note: do not squash the commits when you merge otherwise you\n+        will lose the release tag):\n+\n+    ```bash\n+    $ git checkout v$MAJOR.$MINOR.x\n+    $ git merge --ff-only release\n+    $ git push upstream v$MAJOR.$MINOR.$PATCH\n+    $ git push upstream v$MAJOR.$MINOR.x\n+    ```\n+\n+## Announcement\n+   \n+Once deployment is done by Circle CI (controlled by the Bintray plugin) , go to Github [release\n+page](https://github.com/open-telemetry/opentelemetry-java/releases), press\n+`Draft a new release` to write release notes about the new release.\n+\n+You can use `git log upstream/v$MAJOR.$((MINOR-1)).x..upstream/v$MAJOR.$MINOR.x --graph --first-parent`", "originalCommit": "c1f6e9f9d117211415115f93245893b4b3335d75", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}