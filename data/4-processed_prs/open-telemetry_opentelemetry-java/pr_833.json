{"pr_number": 833, "pr_title": "Refactor Aggregator to avoid too many templates.", "pr_createdAt": "2020-02-07T02:59:45Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java/pull/833", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjI2MTgzNA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/833#discussion_r376261834", "bodyText": "I would prefer to have this.current for readability.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                current.getAndAdd(other.current.get());\n          \n          \n            \n                this.current.getAndAdd(other.current.get());", "author": "thisthat", "createdAt": "2020-02-07T08:16:51Z", "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/DoubleSumAggregator.java", "diffHunk": "@@ -18,21 +18,26 @@\n \n import com.google.common.util.concurrent.AtomicDouble;\n \n-final class DoubleSumAggregator implements Aggregator.DoubleAggregator<DoubleSumAggregator> {\n+final class DoubleSumAggregator implements Aggregator<DoubleSumAggregator> {\n   // TODO: Change to use DoubleAdder when changed to java8.\n-  private final AtomicDouble value;\n+  private final AtomicDouble current;\n \n   DoubleSumAggregator() {\n-    this.value = new AtomicDouble();\n+    this.current = new AtomicDouble(0.0);\n   }\n \n   @Override\n   public void merge(DoubleSumAggregator other) {\n-    this.value.addAndGet(other.value.get());\n+    current.getAndAdd(other.current.get());", "originalCommit": "bbb300fd84a1b988604c0753437a291926ddba8f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ2ODY0Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/833#discussion_r376468646", "bodyText": "done.", "author": "bogdandrutu", "createdAt": "2020-02-07T15:58:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjI2MTgzNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjI2MjAwOQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/833#discussion_r376262009", "bodyText": "The same comment applies here", "author": "thisthat", "createdAt": "2020-02-07T08:17:23Z", "path": "sdk/src/main/java/io/opentelemetry/sdk/metrics/LongSumAggregator.java", "diffHunk": "@@ -18,21 +18,26 @@\n \n import java.util.concurrent.atomic.AtomicLong;\n \n-final class LongSumAggregator implements Aggregator.LongAggregator<LongSumAggregator> {\n+final class LongSumAggregator implements Aggregator<LongSumAggregator> {\n   // TODO: Change to use LongAdder when changed to java8.\n-  private final AtomicLong value;\n+  private final AtomicLong current;\n \n   LongSumAggregator() {\n-    this.value = new AtomicLong();\n+    this.current = new AtomicLong(0L);\n   }\n \n   @Override\n   public void merge(LongSumAggregator other) {\n-    this.value.addAndGet(other.value.get());\n+    current.getAndAdd(other.current.get());", "originalCommit": "bbb300fd84a1b988604c0753437a291926ddba8f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ2ODcxNw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/833#discussion_r376468717", "bodyText": "done.", "author": "bogdandrutu", "createdAt": "2020-02-07T15:58:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjI2MjAwOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjI2Mjc1OA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/833#discussion_r376262758", "bodyText": "Could you please also add a test class for DoubleSumAggregator?", "author": "thisthat", "createdAt": "2020-02-07T08:19:01Z", "path": "sdk/src/test/java/io/opentelemetry/sdk/metrics/LongSumAggregatorTest.java", "diffHunk": "@@ -26,6 +26,6 @@\n   @Test\n   public void longSumAggregation() {\n     LongSumAggregator longSumAggregator = new LongSumAggregator();\n-    longSumAggregator.update(12);\n+    longSumAggregator.recordLong(12);\n   }\n }", "originalCommit": "bbb300fd84a1b988604c0753437a291926ddba8f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ2OTUzNQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/833#discussion_r376469535", "bodyText": "Added, so far this is a trivial test until I defined the entire Aggregation class.", "author": "bogdandrutu", "createdAt": "2020-02-07T16:00:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjI2Mjc1OA=="}], "type": "inlineReview"}, {"oid": "c677c19eccbda6ad273af4db114ad63f4dd71d1d", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/c677c19eccbda6ad273af4db114ad63f4dd71d1d", "message": "Refactor Aggregator to avoid too many templates.\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>", "committedDate": "2020-02-07T15:56:46Z", "type": "commit"}, {"oid": "2462f3e76ddff9df4d7efb0d4cf40c51f4e52bd9", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/2462f3e76ddff9df4d7efb0d4cf40c51f4e52bd9", "message": "Fix comments from review\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>", "committedDate": "2020-02-07T15:59:59Z", "type": "commit"}, {"oid": "2462f3e76ddff9df4d7efb0d4cf40c51f4e52bd9", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/2462f3e76ddff9df4d7efb0d4cf40c51f4e52bd9", "message": "Fix comments from review\n\nSigned-off-by: Bogdan Cristian Drutu <bogdandrutu@gmail.com>", "committedDate": "2020-02-07T15:59:59Z", "type": "forcePushed"}]}