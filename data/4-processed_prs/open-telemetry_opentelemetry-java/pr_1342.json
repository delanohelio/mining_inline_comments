{"pr_number": 1342, "pr_title": "Extension packages should not use \"internal\" API package", "pr_createdAt": "2020-06-17T19:24:08Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java/pull/1342", "timeline": [{"oid": "0bd226f9a36f7600bae156c4a0e1d4c0de9d3737", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/0bd226f9a36f7600bae156c4a0e1d4c0de9d3737", "message": "Extension packages should not use \"internal\" API package\n\nAdd InternalApiProtectionTest which uses ArchUnit to enforce architectural constraints.\nThis change only verifies that classes in `extensions` packages do not use classes in `internal` package of API module.\n\nTest was added into `opentelemetry-all` module because the latter depends on all other submodules\nand therefore sees all classes in the project.", "committedDate": "2020-06-17T19:22:09Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc4MzU0NA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1342#discussion_r441783544", "bodyText": "Use truth for this", "author": "bogdandrutu", "createdAt": "2020-06-17T19:29:28Z", "path": "extensions/trace_propagators/src/test/java/io/opentelemetry/extensions/trace/propagation/StringUtilsTest.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.extensions.trace.propagation;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+import static org.junit.Assert.assertEquals;", "originalCommit": "0bd226f9a36f7600bae156c4a0e1d4c0de9d3737", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc4Mzc3NA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1342#discussion_r441783774", "bodyText": "Use assertThat", "author": "bogdandrutu", "createdAt": "2020-06-17T19:29:55Z", "path": "extensions/trace_propagators/src/test/java/io/opentelemetry/extensions/trace/propagation/StringUtilsTest.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.extensions.trace.propagation;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.fail;\n+\n+import org.junit.Test;\n+\n+public class StringUtilsTest {\n+\n+  @Test\n+  public void isNullOrEmpty() {\n+    assertThat(StringUtils.isNullOrEmpty(\"\")).isTrue();\n+    assertThat(StringUtils.isNullOrEmpty(null)).isTrue();\n+    assertThat(StringUtils.isNullOrEmpty(\"hello\")).isFalse();\n+    assertThat(StringUtils.isNullOrEmpty(\" \")).isFalse();\n+  }\n+\n+  @Test\n+  public void padLeft() {\n+    assertEquals(StringUtils.padLeft(\"value\", 10), \"00000value\");", "originalCommit": "0bd226f9a36f7600bae156c4a0e1d4c0de9d3737", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMyNzc2Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1342#discussion_r442327762", "bodyText": "This was just ignored and marked as resolved, please don't do this in the future, if you disagree say it and don't resolve the comment.", "author": "bogdandrutu", "createdAt": "2020-06-18T15:49:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc4Mzc3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMzMjc2Nw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1342#discussion_r442332767", "bodyText": "Oh sorry, I fixed that in another test case below, that's why I marked as resolved. I have totally missed this one.", "author": "iNikem", "createdAt": "2020-06-18T15:56:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc4Mzc3NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTgxNjg0MA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1342#discussion_r441816840", "bodyText": "we should use the junit ExpectedException for this, rather than try/fail", "author": "jkwatson", "createdAt": "2020-06-17T20:34:14Z", "path": "extensions/trace_propagators/src/test/java/io/opentelemetry/extensions/trace/propagation/StringUtilsTest.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.extensions.trace.propagation;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.fail;\n+\n+import org.junit.Test;\n+\n+public class StringUtilsTest {\n+\n+  @Test\n+  public void isNullOrEmpty() {\n+    assertThat(StringUtils.isNullOrEmpty(\"\")).isTrue();\n+    assertThat(StringUtils.isNullOrEmpty(null)).isTrue();\n+    assertThat(StringUtils.isNullOrEmpty(\"hello\")).isFalse();\n+    assertThat(StringUtils.isNullOrEmpty(\" \")).isFalse();\n+  }\n+\n+  @Test\n+  public void padLeft() {\n+    assertEquals(StringUtils.padLeft(\"value\", 10), \"00000value\");\n+  }\n+\n+  @Test\n+  public void padLeft_throws_for_null_value() {\n+    try {\n+      StringUtils.padLeft(null, 10);\n+      fail(\"Expected exception not\");\n+    } catch (NullPointerException expected) {", "originalCommit": "0bd226f9a36f7600bae156c4a0e1d4c0de9d3737", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTg0OTAwNg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1342#discussion_r441849006", "bodyText": "or simple:\n  @Rule public ExpectedException thrown = ExpectedException.none();\n\n    thrown.expect(NullPointerException.class);\n    thrown.expectMessage(\"name\");\n    StringUtils.padLeft(null, 10);", "author": "bogdandrutu", "createdAt": "2020-06-17T21:38:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTgxNjg0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTg0OTQ2MA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1342#discussion_r441849460", "bodyText": "@jkwatson there is also an errorprone check for this which we can enable now with tests being java8 about this exact pattern.", "author": "bogdandrutu", "createdAt": "2020-06-17T21:39:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTgxNjg0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTg2OTU0OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1342#discussion_r441869549", "bodyText": "yeah, @iNikem disabled it in this PR. that's why it caught my eye.  :)", "author": "jkwatson", "createdAt": "2020-06-17T22:31:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTgxNjg0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk3NDU3NQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1342#discussion_r441974575", "bodyText": "Should we prefer ExpectedException or, as we have java8 in tests now, assertThrows?", "author": "iNikem", "createdAt": "2020-06-18T05:22:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTgxNjg0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjI4MDA2MA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1342#discussion_r442280060", "bodyText": "I think ExpectedException does a better job for this.", "author": "bogdandrutu", "createdAt": "2020-06-18T14:41:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTgxNjg0MA=="}], "type": "inlineReview"}, {"oid": "8da60127d5e0730e0872c6235c6d8ffe668096fa", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/8da60127d5e0730e0872c6235c6d8ffe668096fa", "message": "Polish", "committedDate": "2020-06-18T15:34:04Z", "type": "commit"}, {"oid": "19495768d8696646c2aa247c2fa0595488e2fd82", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/19495768d8696646c2aa247c2fa0595488e2fd82", "message": "Polish", "committedDate": "2020-06-18T15:58:02Z", "type": "commit"}]}