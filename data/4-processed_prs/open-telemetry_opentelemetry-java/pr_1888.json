{"pr_number": 1888, "pr_title": "Add test for otel in brave", "pr_createdAt": "2020-10-27T02:49:54Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java/pull/1888", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM4NTQxMg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1888#discussion_r512385412", "bodyText": "Instead of this, I may be able to check for DefaultContext but that may not work for everyone, so to show how to do it I wrapped it.", "author": "bogdandrutu", "createdAt": "2020-10-27T02:50:57Z", "path": "context/src/otelInBraveTest/java/io/opentelemetry/context/BraveContextStorageProvider.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.context;\n+\n+import brave.Tracing;\n+import brave.propagation.CurrentTraceContext;\n+import brave.propagation.TraceContext;\n+import java.util.List;\n+import javax.annotation.Nullable;\n+\n+public class BraveContextStorageProvider implements ContextStorageProvider {\n+\n+  @Override\n+  public ContextStorage get() {\n+    return BraveContextStorage.INSTANCE;\n+  }\n+\n+  @SuppressWarnings(\"ReferenceEquality\")\n+  private enum BraveContextStorage implements ContextStorage {\n+    INSTANCE;\n+\n+    @Override\n+    public Scope attach(Context toAttach) {\n+      CurrentTraceContext currentTraceContext = Tracing.current().currentTraceContext();\n+      TraceContext currentBraveContext = currentTraceContext.get();\n+      ContextWrapper currentContext = fromBraveContext(currentBraveContext);\n+      if (currentContext == ContextWrapper.ROOT\n+          && (toAttach == null || toAttach == Context.root())) {\n+        // It may be possible that in the current brave we have null, and asked to add root,\n+        // but the behavior of Current is to never return null, so it is fine to return noop.\n+        return Scope.noop();\n+      }\n+\n+      TraceContext newBraveContext =\n+          currentBraveContext.toBuilder().addExtra(new ContextWrapper(toAttach)).build();\n+      CurrentTraceContext.Scope braveScope = currentTraceContext.newScope(newBraveContext);\n+      return braveScope::close;\n+    }\n+\n+    @Override\n+    public Context current() {\n+      TraceContext currentBraveContext = Tracing.current().currentTraceContext().get();\n+      if (currentBraveContext == null) {\n+        return Context.root();\n+      }\n+      return fromBraveContext(currentBraveContext);\n+    }\n+\n+    private static ContextWrapper fromBraveContext(TraceContext braveContext) {\n+      ContextWrapper currentContext = findContextWrapper(braveContext.extra());\n+      return currentContext == null ? ContextWrapper.ROOT : currentContext;\n+    }\n+\n+    static ContextWrapper findContextWrapper(List<Object> extra) {\n+      for (int i = extra.size() - 1; i >= 0; i--) {\n+        Object nextExtra = extra.get(i);\n+        if (nextExtra.getClass() == ContextWrapper.class) return (ContextWrapper) nextExtra;\n+      }\n+      return null;\n+    }\n+  }\n+\n+  // Need to wrap the Context because brave findExtra searches for perfect match of the class.\n+  static final class ContextWrapper implements Context {", "originalCommit": "73d809b877008f3431e9957e6358fdf1f214bbf2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "50fa60df235ed310d5783de0a6d85b030b876cff", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/50fa60df235ed310d5783de0a6d85b030b876cff", "message": "Add test for otel in brave\n\nSigned-off-by: Bogdan Drutu <bogdandrutu@gmail.com>", "committedDate": "2020-10-27T02:54:08Z", "type": "forcePushed"}, {"oid": "4a6b14abd03c17c5c88e61145391d296529ffdbf", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/4a6b14abd03c17c5c88e61145391d296529ffdbf", "message": "Ensure all propagation works\n\nSigned-off-by: Bogdan Drutu <bogdandrutu@gmail.com>", "committedDate": "2020-10-27T17:45:32Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjk4Nzk4Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1888#discussion_r512987986", "bodyText": "an unusual animal. :)", "author": "jkwatson", "createdAt": "2020-10-27T19:51:45Z", "path": "context/src/otelInBraveTest/java/io/opentelemetry/context/OtelInBraveTest.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.context;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import brave.Tracing;\n+import brave.propagation.CurrentTraceContext;\n+import brave.propagation.TraceContext;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.atomic.AtomicReference;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+\n+class OtelInBraveTest {\n+\n+  private static final ContextKey<String> ANIMAL = ContextKey.named(\"animal\");\n+  private static final Context CONTEXT_WITH_ANIMAL = Context.root().with(ANIMAL, \"japan\");", "originalCommit": "91347daaa3207edd611fadc7ae02e00267e9d455", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzAyMjU5NQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1888#discussion_r513022595", "bodyText": "@anuraaga is guilty for this :)) and me that I copied paste", "author": "bogdandrutu", "createdAt": "2020-10-27T20:52:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjk4Nzk4Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA5OTI0MA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1888#discussion_r513099240", "bodyText": "Don't think it hurts but is there something we get with covariant types here?", "author": "anuraaga", "createdAt": "2020-10-27T23:53:27Z", "path": "context/src/main/java/io/opentelemetry/context/DefaultContext.java", "diffHunk": "@@ -61,22 +61,22 @@ private DefaultContext(PersistentHashArrayMappedTrie.Node<ContextKey<?>, Object>\n   }\n \n   @Override\n-  public <V> Context with(ContextKey<V> k1, V v1) {\n+  public <V> DefaultContext with(ContextKey<V> k1, V v1) {", "originalCommit": "91347daaa3207edd611fadc7ae02e00267e9d455", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzE0MjgzNg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1888#discussion_r513142836", "bodyText": "Ah realized it does hurt a bit since bytecode instrumentation doesn't work anymore (root() being the important one)", "author": "anuraaga", "createdAt": "2020-10-28T02:30:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA5OTI0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTUzNzE3NQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1888#discussion_r515537175", "bodyText": "You approved this PR. Is this ok, @anuraaga ?", "author": "jkwatson", "createdAt": "2020-10-31T20:41:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA5OTI0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTU1MTE1NQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1888#discussion_r515551155", "bodyText": "Can you explain what is the problem?", "author": "bogdandrutu", "createdAt": "2020-10-31T23:12:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA5OTI0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTU3MzkyNg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1888#discussion_r515573926", "bodyText": "Yeah - root() is intercepted by auto instrumentation to return an agent managed context. We need the return value to be the public type.", "author": "anuraaga", "createdAt": "2020-11-01T04:30:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA5OTI0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjM1NDczMQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1888#discussion_r516354731", "bodyText": "No more changes.", "author": "bogdandrutu", "createdAt": "2020-11-03T00:17:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA5OTI0MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzEwMDY4MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1888#discussion_r513100681", "bodyText": "Does it work to check class != ContextWrapper? This test is lucky to have package private access but a real provider wouldn't.", "author": "anuraaga", "createdAt": "2020-10-27T23:57:49Z", "path": "context/src/otelInBraveTest/java/io/opentelemetry/context/BraveContextStorageProvider.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.context;\n+\n+import brave.Tracing;\n+import brave.propagation.CurrentTraceContext;\n+import brave.propagation.TraceContext;\n+import java.util.List;\n+import javax.annotation.Nullable;\n+\n+public class BraveContextStorageProvider implements ContextStorageProvider {\n+\n+  @Override\n+  public ContextStorage get() {\n+    return BraveContextStorage.INSTANCE;\n+  }\n+\n+  @SuppressWarnings(\"ReferenceEquality\")\n+  private enum BraveContextStorage implements ContextStorage {\n+    INSTANCE;\n+\n+    @Override\n+    public Scope attach(Context toAttach) {\n+      CurrentTraceContext currentTraceContext = Tracing.current().currentTraceContext();\n+      TraceContext currentBraveContext = currentTraceContext.get();\n+      if (currentBraveContext == null) {\n+        if (toAttach == Context.root()) {\n+          return Scope.noop();\n+        }\n+      } else {\n+        Context currentContext = ContextWrapper.fromBraveContext(currentBraveContext);\n+        if (currentContext == toAttach) {\n+          return Scope.noop();\n+        }\n+      }\n+\n+      TraceContext newBraveContext;\n+      if (toAttach instanceof ContextWrapper) {\n+        newBraveContext = ((ContextWrapper) toAttach).toBraveContext();\n+      } else {\n+        TraceContext.Builder builder =\n+            currentBraveContext == null\n+                ? TraceContext.newBuilder()\n+                : currentBraveContext.toBuilder();\n+        newBraveContext = builder.addExtra(toAttach).build();\n+      }\n+\n+      if (currentBraveContext == newBraveContext) {\n+        return Scope.noop();\n+      }\n+      CurrentTraceContext.Scope braveScope = currentTraceContext.newScope(newBraveContext);\n+      return braveScope::close;\n+    }\n+\n+    @Override\n+    public Context current() {\n+      TraceContext currentBraveContext = Tracing.current().currentTraceContext().get();\n+      if (currentBraveContext == null) {\n+        return Context.root();\n+      }\n+      return new ContextWrapper(\n+          currentBraveContext, ContextWrapper.fromBraveContext(currentBraveContext));\n+    }\n+  }\n+\n+  // Need to wrap the Context because brave findExtra searches for perfect match of the class.\n+  static final class ContextWrapper implements Context {\n+    private final TraceContext baseBraveContext;\n+    private final DefaultContext context;\n+\n+    ContextWrapper(TraceContext baseBraveContext, DefaultContext context) {\n+      this.baseBraveContext = baseBraveContext;\n+      this.context = context;\n+    }\n+\n+    TraceContext toBraveContext() {\n+      if (fromBraveContext(baseBraveContext) == context) {\n+        return baseBraveContext;\n+      }\n+      return baseBraveContext.toBuilder().addExtra(context).build();\n+    }\n+\n+    @Nullable\n+    @Override\n+    public <V> V get(ContextKey<V> key) {\n+      return context.get(key);\n+    }\n+\n+    @Override\n+    public <V> Context with(ContextKey<V> k1, V v1) {\n+      return new ContextWrapper(baseBraveContext, context.with(k1, v1));\n+    }\n+\n+    private static DefaultContext fromBraveContext(TraceContext braveContext) {\n+      List<Object> extra = braveContext.extra();\n+      for (int i = extra.size() - 1; i >= 0; i--) {\n+        Object nextExtra = extra.get(i);\n+        if (nextExtra.getClass() == DefaultContext.class) {", "originalCommit": "91347daaa3207edd611fadc7ae02e00267e9d455", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDUzODkxNQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1888#discussion_r514538915", "bodyText": "We cannot add ContextWrapper because it will create a circular reference. So if that is the case I need another ContextWrapper that wraps only the otel Context.", "author": "bogdandrutu", "createdAt": "2020-10-29T20:14:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzEwMDY4MQ=="}], "type": "inlineReview"}, {"oid": "889a639f7c90a17a98fa59f7665a706ebd08382d", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/889a639f7c90a17a98fa59f7665a706ebd08382d", "message": "Add test for otel in brave\n\nSigned-off-by: Bogdan Drutu <bogdandrutu@gmail.com>", "committedDate": "2020-11-02T23:59:11Z", "type": "commit"}, {"oid": "e6c25889f647ed01d46a4aefa38a628cf26bbc8a", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/e6c25889f647ed01d46a4aefa38a628cf26bbc8a", "message": "Ensure all propagation works\n\nSigned-off-by: Bogdan Drutu <bogdandrutu@gmail.com>", "committedDate": "2020-11-02T23:59:48Z", "type": "commit"}, {"oid": "d18fcd20a7aa1f6e1859187abb6009c861d7698d", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/d18fcd20a7aa1f6e1859187abb6009c861d7698d", "message": "Fix nullpointer exception\n\nSigned-off-by: Bogdan Drutu <bogdandrutu@gmail.com>", "committedDate": "2020-11-03T00:17:02Z", "type": "commit"}, {"oid": "d18fcd20a7aa1f6e1859187abb6009c861d7698d", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/d18fcd20a7aa1f6e1859187abb6009c861d7698d", "message": "Fix nullpointer exception\n\nSigned-off-by: Bogdan Drutu <bogdandrutu@gmail.com>", "committedDate": "2020-11-03T00:17:02Z", "type": "forcePushed"}]}