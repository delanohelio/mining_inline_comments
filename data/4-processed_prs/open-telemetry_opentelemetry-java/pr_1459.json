{"pr_number": 1459, "pr_title": "Update database attributes", "pr_createdAt": "2020-07-24T01:24:04Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java/pull/1459", "timeline": [{"oid": "677aedfbb5c7e8719c10b976e7ebad50979470b4", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/677aedfbb5c7e8719c10b976e7ebad50979470b4", "message": "Add new database attributes", "committedDate": "2020-07-24T01:20:33Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg3MDA5Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1459#discussion_r459870092", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              /** Database type. For any SQL database, \"sql\". For others, the lower-case database category. */\n          \n          \n            \n              An identifier for the database management system (DBMS) product being used.", "author": "thisthat", "createdAt": "2020-07-24T06:17:39Z", "path": "api/src/main/java/io/opentelemetry/trace/attributes/SemanticAttributes.java", "diffHunk": "@@ -142,18 +142,66 @@\n   public static final LongAttributeSetter MESSAGE_UNCOMPRESSED_SIZE =\n       LongAttributeSetter.create(\"message.uncompressed_size\");\n   /** Database type. For any SQL database, \"sql\". For others, the lower-case database category. */", "originalCommit": "677aedfbb5c7e8719c10b976e7ebad50979470b4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg3MDc0Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1459#discussion_r459870742", "bodyText": "db.url was removed from the semantic conventions", "author": "thisthat", "createdAt": "2020-07-24T06:20:11Z", "path": "api/src/main/java/io/opentelemetry/trace/attributes/SemanticAttributes.java", "diffHunk": "@@ -142,18 +142,66 @@\n   public static final LongAttributeSetter MESSAGE_UNCOMPRESSED_SIZE =\n       LongAttributeSetter.create(\"message.uncompressed_size\");\n   /** Database type. For any SQL database, \"sql\". For others, the lower-case database category. */\n-  public static final StringAttributeSetter DB_TYPE = StringAttributeSetter.create(\"db.type\");\n-  /** Database instance name. */\n-  public static final StringAttributeSetter DB_INSTANCE =\n-      StringAttributeSetter.create(\"db.instance\");\n+  public static final StringAttributeSetter DB_SYSTEM = StringAttributeSetter.create(\"db.system\");\n+  /** Database name. */\n+  public static final StringAttributeSetter DB_NAME = StringAttributeSetter.create(\"db.name\");\n+  /**\n+   * The connection string used to connect to the database. It's recommended to remove embedded\n+   * credentials.\n+   */\n+  public static final StringAttributeSetter DB_CONNECTION_STRING =\n+      StringAttributeSetter.create(\"db.connection_string\");\n   /** Database statement for the given database type. */\n   public static final StringAttributeSetter DB_STATEMENT =\n       StringAttributeSetter.create(\"db.statement\");\n+  /** Database operation that is being executed. */\n+  public static final StringAttributeSetter DB_OPERATION =\n+      StringAttributeSetter.create(\"db.operation\");\n   /** Username for accessing database. */\n   public static final StringAttributeSetter DB_USER = StringAttributeSetter.create(\"db.user\");\n   /** JDBC substring like \"mysql://db.example.com:3306\" */\n   public static final StringAttributeSetter DB_URL = StringAttributeSetter.create(\"db.url\");", "originalCommit": "677aedfbb5c7e8719c10b976e7ebad50979470b4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE2ODE0NQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1459#discussion_r460168145", "bodyText": "Good point, but this is required when making a connection.  Maybe it was missing from the database.md?", "author": "heyams", "createdAt": "2020-07-24T16:44:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg3MDc0Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE4MTYwMw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1459#discussion_r460181603", "bodyText": "I just realized i added db_connection_string, i can remove db_url.  Please confirm if that's what you meant.  @thisthat", "author": "heyams", "createdAt": "2020-07-24T17:10:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg3MDc0Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDIyMTM5MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1459#discussion_r460221391", "bodyText": "Deleted.", "author": "heyams", "createdAt": "2020-07-24T18:31:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg3MDc0Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg3MTI3Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1459#discussion_r459871273", "bodyText": "I think this comment is out of date, the list of identifiers has e.g., mysql, postgresql now. How about linking to the list?\nhttps://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/trace/semantic_conventions/database.md#notes-and-well-known-identifiers-for-dbsystem", "author": "anuraaga", "createdAt": "2020-07-24T06:22:06Z", "path": "api/src/main/java/io/opentelemetry/trace/attributes/SemanticAttributes.java", "diffHunk": "@@ -142,18 +142,66 @@\n   public static final LongAttributeSetter MESSAGE_UNCOMPRESSED_SIZE =\n       LongAttributeSetter.create(\"message.uncompressed_size\");\n   /** Database type. For any SQL database, \"sql\". For others, the lower-case database category. */", "originalCommit": "677aedfbb5c7e8719c10b976e7ebad50979470b4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg3MTgyNg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1459#discussion_r459871826", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * Connection-level attributes for specific technologies. The instance name connecting to. This\n          \n          \n            \n               * name is used to determine the port of a named instance.\n          \n          \n            \n               */\n          \n          \n            \n               * For db.system == mssql, the instance name connecting to. This\n          \n          \n            \n               * name is used to determine the port of a named instance. When set, {@link #NET_PEER_PORT} is not required\n          \n          \n            \n               * but recommended when connecting to a non-standard port.\n          \n          \n            \n               */", "author": "anuraaga", "createdAt": "2020-07-24T06:24:15Z", "path": "api/src/main/java/io/opentelemetry/trace/attributes/SemanticAttributes.java", "diffHunk": "@@ -142,18 +142,66 @@\n   public static final LongAttributeSetter MESSAGE_UNCOMPRESSED_SIZE =\n       LongAttributeSetter.create(\"message.uncompressed_size\");\n   /** Database type. For any SQL database, \"sql\". For others, the lower-case database category. */\n-  public static final StringAttributeSetter DB_TYPE = StringAttributeSetter.create(\"db.type\");\n-  /** Database instance name. */\n-  public static final StringAttributeSetter DB_INSTANCE =\n-      StringAttributeSetter.create(\"db.instance\");\n+  public static final StringAttributeSetter DB_SYSTEM = StringAttributeSetter.create(\"db.system\");\n+  /** Database name. */\n+  public static final StringAttributeSetter DB_NAME = StringAttributeSetter.create(\"db.name\");\n+  /**\n+   * The connection string used to connect to the database. It's recommended to remove embedded\n+   * credentials.\n+   */\n+  public static final StringAttributeSetter DB_CONNECTION_STRING =\n+      StringAttributeSetter.create(\"db.connection_string\");\n   /** Database statement for the given database type. */\n   public static final StringAttributeSetter DB_STATEMENT =\n       StringAttributeSetter.create(\"db.statement\");\n+  /** Database operation that is being executed. */\n+  public static final StringAttributeSetter DB_OPERATION =\n+      StringAttributeSetter.create(\"db.operation\");\n   /** Username for accessing database. */\n   public static final StringAttributeSetter DB_USER = StringAttributeSetter.create(\"db.user\");\n   /** JDBC substring like \"mysql://db.example.com:3306\" */\n   public static final StringAttributeSetter DB_URL = StringAttributeSetter.create(\"db.url\");\n \n+  /**\n+   * Connection-level attributes for specific technologies. The instance name connecting to. This\n+   * name is used to determine the port of a named instance.\n+   */", "originalCommit": "677aedfbb5c7e8719c10b976e7ebad50979470b4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg3MTk0MA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1459#discussion_r459871940", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public static final StringAttributeSetter MICROSOFT_SQL_SERVER =\n          \n          \n            \n              public static final StringAttributeSetter MSSQL_INSTANCE_NAME =\n          \n      \n    \n    \n  \n\nIf this was a setter of all the attributes for MSSQL, this name would make sense but it's referring to a specific key.", "author": "anuraaga", "createdAt": "2020-07-24T06:24:44Z", "path": "api/src/main/java/io/opentelemetry/trace/attributes/SemanticAttributes.java", "diffHunk": "@@ -142,18 +142,66 @@\n   public static final LongAttributeSetter MESSAGE_UNCOMPRESSED_SIZE =\n       LongAttributeSetter.create(\"message.uncompressed_size\");\n   /** Database type. For any SQL database, \"sql\". For others, the lower-case database category. */\n-  public static final StringAttributeSetter DB_TYPE = StringAttributeSetter.create(\"db.type\");\n-  /** Database instance name. */\n-  public static final StringAttributeSetter DB_INSTANCE =\n-      StringAttributeSetter.create(\"db.instance\");\n+  public static final StringAttributeSetter DB_SYSTEM = StringAttributeSetter.create(\"db.system\");\n+  /** Database name. */\n+  public static final StringAttributeSetter DB_NAME = StringAttributeSetter.create(\"db.name\");\n+  /**\n+   * The connection string used to connect to the database. It's recommended to remove embedded\n+   * credentials.\n+   */\n+  public static final StringAttributeSetter DB_CONNECTION_STRING =\n+      StringAttributeSetter.create(\"db.connection_string\");\n   /** Database statement for the given database type. */\n   public static final StringAttributeSetter DB_STATEMENT =\n       StringAttributeSetter.create(\"db.statement\");\n+  /** Database operation that is being executed. */\n+  public static final StringAttributeSetter DB_OPERATION =\n+      StringAttributeSetter.create(\"db.operation\");\n   /** Username for accessing database. */\n   public static final StringAttributeSetter DB_USER = StringAttributeSetter.create(\"db.user\");\n   /** JDBC substring like \"mysql://db.example.com:3306\" */\n   public static final StringAttributeSetter DB_URL = StringAttributeSetter.create(\"db.url\");\n \n+  /**\n+   * Connection-level attributes for specific technologies. The instance name connecting to. This\n+   * name is used to determine the port of a named instance.\n+   */\n+  public static final StringAttributeSetter MICROSOFT_SQL_SERVER =", "originalCommit": "677aedfbb5c7e8719c10b976e7ebad50979470b4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg3MjEyNw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1459#discussion_r459872127", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * Connection-level attributes for specific technologies. The fully-qualified class name of the\n          \n          \n            \n               * Java Database Connectivity (JDBC) driver used to connect, e.g. \"org.postgresql.Driver\" or\n          \n          \n            \n               * \"com.microsoft.sqlserver.jdbc.SQLServerDriver\".\n          \n          \n            \n               * For JDBC clients, the fully-qualified class name of the\n          \n          \n            \n               * Java Database Connectivity (JDBC) driver used to connect, e.g. \"org.postgresql.Driver\" or\n          \n          \n            \n               * \"com.microsoft.sqlserver.jdbc.SQLServerDriver\".", "author": "anuraaga", "createdAt": "2020-07-24T06:25:22Z", "path": "api/src/main/java/io/opentelemetry/trace/attributes/SemanticAttributes.java", "diffHunk": "@@ -142,18 +142,66 @@\n   public static final LongAttributeSetter MESSAGE_UNCOMPRESSED_SIZE =\n       LongAttributeSetter.create(\"message.uncompressed_size\");\n   /** Database type. For any SQL database, \"sql\". For others, the lower-case database category. */\n-  public static final StringAttributeSetter DB_TYPE = StringAttributeSetter.create(\"db.type\");\n-  /** Database instance name. */\n-  public static final StringAttributeSetter DB_INSTANCE =\n-      StringAttributeSetter.create(\"db.instance\");\n+  public static final StringAttributeSetter DB_SYSTEM = StringAttributeSetter.create(\"db.system\");\n+  /** Database name. */\n+  public static final StringAttributeSetter DB_NAME = StringAttributeSetter.create(\"db.name\");\n+  /**\n+   * The connection string used to connect to the database. It's recommended to remove embedded\n+   * credentials.\n+   */\n+  public static final StringAttributeSetter DB_CONNECTION_STRING =\n+      StringAttributeSetter.create(\"db.connection_string\");\n   /** Database statement for the given database type. */\n   public static final StringAttributeSetter DB_STATEMENT =\n       StringAttributeSetter.create(\"db.statement\");\n+  /** Database operation that is being executed. */\n+  public static final StringAttributeSetter DB_OPERATION =\n+      StringAttributeSetter.create(\"db.operation\");\n   /** Username for accessing database. */\n   public static final StringAttributeSetter DB_USER = StringAttributeSetter.create(\"db.user\");\n   /** JDBC substring like \"mysql://db.example.com:3306\" */\n   public static final StringAttributeSetter DB_URL = StringAttributeSetter.create(\"db.url\");\n \n+  /**\n+   * Connection-level attributes for specific technologies. The instance name connecting to. This\n+   * name is used to determine the port of a named instance.\n+   */\n+  public static final StringAttributeSetter MICROSOFT_SQL_SERVER =\n+      StringAttributeSetter.create(\"db.mssql.instance_name\");\n+  /**\n+   * Connection-level attributes for specific technologies. The fully-qualified class name of the\n+   * Java Database Connectivity (JDBC) driver used to connect, e.g. \"org.postgresql.Driver\" or\n+   * \"com.microsoft.sqlserver.jdbc.SQLServerDriver\".", "originalCommit": "677aedfbb5c7e8719c10b976e7ebad50979470b4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg3MjE3OA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1459#discussion_r459872178", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public static final StringAttributeSetter JDBC_CLIENTS =\n          \n          \n            \n              public static final StringAttributeSetter JDBC_DRIVER_CLASSNAME =", "author": "anuraaga", "createdAt": "2020-07-24T06:25:35Z", "path": "api/src/main/java/io/opentelemetry/trace/attributes/SemanticAttributes.java", "diffHunk": "@@ -142,18 +142,66 @@\n   public static final LongAttributeSetter MESSAGE_UNCOMPRESSED_SIZE =\n       LongAttributeSetter.create(\"message.uncompressed_size\");\n   /** Database type. For any SQL database, \"sql\". For others, the lower-case database category. */\n-  public static final StringAttributeSetter DB_TYPE = StringAttributeSetter.create(\"db.type\");\n-  /** Database instance name. */\n-  public static final StringAttributeSetter DB_INSTANCE =\n-      StringAttributeSetter.create(\"db.instance\");\n+  public static final StringAttributeSetter DB_SYSTEM = StringAttributeSetter.create(\"db.system\");\n+  /** Database name. */\n+  public static final StringAttributeSetter DB_NAME = StringAttributeSetter.create(\"db.name\");\n+  /**\n+   * The connection string used to connect to the database. It's recommended to remove embedded\n+   * credentials.\n+   */\n+  public static final StringAttributeSetter DB_CONNECTION_STRING =\n+      StringAttributeSetter.create(\"db.connection_string\");\n   /** Database statement for the given database type. */\n   public static final StringAttributeSetter DB_STATEMENT =\n       StringAttributeSetter.create(\"db.statement\");\n+  /** Database operation that is being executed. */\n+  public static final StringAttributeSetter DB_OPERATION =\n+      StringAttributeSetter.create(\"db.operation\");\n   /** Username for accessing database. */\n   public static final StringAttributeSetter DB_USER = StringAttributeSetter.create(\"db.user\");\n   /** JDBC substring like \"mysql://db.example.com:3306\" */\n   public static final StringAttributeSetter DB_URL = StringAttributeSetter.create(\"db.url\");\n \n+  /**\n+   * Connection-level attributes for specific technologies. The instance name connecting to. This\n+   * name is used to determine the port of a named instance.\n+   */\n+  public static final StringAttributeSetter MICROSOFT_SQL_SERVER =\n+      StringAttributeSetter.create(\"db.mssql.instance_name\");\n+  /**\n+   * Connection-level attributes for specific technologies. The fully-qualified class name of the\n+   * Java Database Connectivity (JDBC) driver used to connect, e.g. \"org.postgresql.Driver\" or\n+   * \"com.microsoft.sqlserver.jdbc.SQLServerDriver\".\n+   */\n+  public static final StringAttributeSetter JDBC_CLIENTS =", "originalCommit": "677aedfbb5c7e8719c10b976e7ebad50979470b4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg3MjQ4Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1459#discussion_r459872482", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * Call-level attributes for specific technologies. The name of the keyspace being accessed. To be\n          \n          \n            \n               * used instead of the generic db.name attribute.\n          \n          \n            \n               * For db.system == cassandra, the name of the keyspace being accessed. To be\n          \n          \n            \n               * used instead of the generic db.name attribute.", "author": "anuraaga", "createdAt": "2020-07-24T06:26:42Z", "path": "api/src/main/java/io/opentelemetry/trace/attributes/SemanticAttributes.java", "diffHunk": "@@ -142,18 +142,66 @@\n   public static final LongAttributeSetter MESSAGE_UNCOMPRESSED_SIZE =\n       LongAttributeSetter.create(\"message.uncompressed_size\");\n   /** Database type. For any SQL database, \"sql\". For others, the lower-case database category. */\n-  public static final StringAttributeSetter DB_TYPE = StringAttributeSetter.create(\"db.type\");\n-  /** Database instance name. */\n-  public static final StringAttributeSetter DB_INSTANCE =\n-      StringAttributeSetter.create(\"db.instance\");\n+  public static final StringAttributeSetter DB_SYSTEM = StringAttributeSetter.create(\"db.system\");\n+  /** Database name. */\n+  public static final StringAttributeSetter DB_NAME = StringAttributeSetter.create(\"db.name\");\n+  /**\n+   * The connection string used to connect to the database. It's recommended to remove embedded\n+   * credentials.\n+   */\n+  public static final StringAttributeSetter DB_CONNECTION_STRING =\n+      StringAttributeSetter.create(\"db.connection_string\");\n   /** Database statement for the given database type. */\n   public static final StringAttributeSetter DB_STATEMENT =\n       StringAttributeSetter.create(\"db.statement\");\n+  /** Database operation that is being executed. */\n+  public static final StringAttributeSetter DB_OPERATION =\n+      StringAttributeSetter.create(\"db.operation\");\n   /** Username for accessing database. */\n   public static final StringAttributeSetter DB_USER = StringAttributeSetter.create(\"db.user\");\n   /** JDBC substring like \"mysql://db.example.com:3306\" */\n   public static final StringAttributeSetter DB_URL = StringAttributeSetter.create(\"db.url\");\n \n+  /**\n+   * Connection-level attributes for specific technologies. The instance name connecting to. This\n+   * name is used to determine the port of a named instance.\n+   */\n+  public static final StringAttributeSetter MICROSOFT_SQL_SERVER =\n+      StringAttributeSetter.create(\"db.mssql.instance_name\");\n+  /**\n+   * Connection-level attributes for specific technologies. The fully-qualified class name of the\n+   * Java Database Connectivity (JDBC) driver used to connect, e.g. \"org.postgresql.Driver\" or\n+   * \"com.microsoft.sqlserver.jdbc.SQLServerDriver\".\n+   */\n+  public static final StringAttributeSetter JDBC_CLIENTS =\n+      StringAttributeSetter.create(\"db.jdbc.driver_classname\");\n+\n+  /**\n+   * Call-level attributes for specific technologies. The name of the keyspace being accessed. To be\n+   * used instead of the generic db.name attribute.", "originalCommit": "677aedfbb5c7e8719c10b976e7ebad50979470b4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg3MjUyNA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1459#discussion_r459872524", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public static final StringAttributeSetter CASSANDRA =\n          \n          \n            \n              public static final StringAttributeSetter CASSANDRA_NAMESPACE =", "author": "anuraaga", "createdAt": "2020-07-24T06:26:54Z", "path": "api/src/main/java/io/opentelemetry/trace/attributes/SemanticAttributes.java", "diffHunk": "@@ -142,18 +142,66 @@\n   public static final LongAttributeSetter MESSAGE_UNCOMPRESSED_SIZE =\n       LongAttributeSetter.create(\"message.uncompressed_size\");\n   /** Database type. For any SQL database, \"sql\". For others, the lower-case database category. */\n-  public static final StringAttributeSetter DB_TYPE = StringAttributeSetter.create(\"db.type\");\n-  /** Database instance name. */\n-  public static final StringAttributeSetter DB_INSTANCE =\n-      StringAttributeSetter.create(\"db.instance\");\n+  public static final StringAttributeSetter DB_SYSTEM = StringAttributeSetter.create(\"db.system\");\n+  /** Database name. */\n+  public static final StringAttributeSetter DB_NAME = StringAttributeSetter.create(\"db.name\");\n+  /**\n+   * The connection string used to connect to the database. It's recommended to remove embedded\n+   * credentials.\n+   */\n+  public static final StringAttributeSetter DB_CONNECTION_STRING =\n+      StringAttributeSetter.create(\"db.connection_string\");\n   /** Database statement for the given database type. */\n   public static final StringAttributeSetter DB_STATEMENT =\n       StringAttributeSetter.create(\"db.statement\");\n+  /** Database operation that is being executed. */\n+  public static final StringAttributeSetter DB_OPERATION =\n+      StringAttributeSetter.create(\"db.operation\");\n   /** Username for accessing database. */\n   public static final StringAttributeSetter DB_USER = StringAttributeSetter.create(\"db.user\");\n   /** JDBC substring like \"mysql://db.example.com:3306\" */\n   public static final StringAttributeSetter DB_URL = StringAttributeSetter.create(\"db.url\");\n \n+  /**\n+   * Connection-level attributes for specific technologies. The instance name connecting to. This\n+   * name is used to determine the port of a named instance.\n+   */\n+  public static final StringAttributeSetter MICROSOFT_SQL_SERVER =\n+      StringAttributeSetter.create(\"db.mssql.instance_name\");\n+  /**\n+   * Connection-level attributes for specific technologies. The fully-qualified class name of the\n+   * Java Database Connectivity (JDBC) driver used to connect, e.g. \"org.postgresql.Driver\" or\n+   * \"com.microsoft.sqlserver.jdbc.SQLServerDriver\".\n+   */\n+  public static final StringAttributeSetter JDBC_CLIENTS =\n+      StringAttributeSetter.create(\"db.jdbc.driver_classname\");\n+\n+  /**\n+   * Call-level attributes for specific technologies. The name of the keyspace being accessed. To be\n+   * used instead of the generic db.name attribute.\n+   */\n+  public static final StringAttributeSetter CASSANDRA =", "originalCommit": "677aedfbb5c7e8719c10b976e7ebad50979470b4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg3MjYzMQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1459#discussion_r459872631", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * Call-level attributes for specific technologies. The HBase namespace being accessed. To be used\n          \n          \n            \n               * For db.system == hbase, the HBase namespace being accessed. To be used", "author": "anuraaga", "createdAt": "2020-07-24T06:27:18Z", "path": "api/src/main/java/io/opentelemetry/trace/attributes/SemanticAttributes.java", "diffHunk": "@@ -142,18 +142,66 @@\n   public static final LongAttributeSetter MESSAGE_UNCOMPRESSED_SIZE =\n       LongAttributeSetter.create(\"message.uncompressed_size\");\n   /** Database type. For any SQL database, \"sql\". For others, the lower-case database category. */\n-  public static final StringAttributeSetter DB_TYPE = StringAttributeSetter.create(\"db.type\");\n-  /** Database instance name. */\n-  public static final StringAttributeSetter DB_INSTANCE =\n-      StringAttributeSetter.create(\"db.instance\");\n+  public static final StringAttributeSetter DB_SYSTEM = StringAttributeSetter.create(\"db.system\");\n+  /** Database name. */\n+  public static final StringAttributeSetter DB_NAME = StringAttributeSetter.create(\"db.name\");\n+  /**\n+   * The connection string used to connect to the database. It's recommended to remove embedded\n+   * credentials.\n+   */\n+  public static final StringAttributeSetter DB_CONNECTION_STRING =\n+      StringAttributeSetter.create(\"db.connection_string\");\n   /** Database statement for the given database type. */\n   public static final StringAttributeSetter DB_STATEMENT =\n       StringAttributeSetter.create(\"db.statement\");\n+  /** Database operation that is being executed. */\n+  public static final StringAttributeSetter DB_OPERATION =\n+      StringAttributeSetter.create(\"db.operation\");\n   /** Username for accessing database. */\n   public static final StringAttributeSetter DB_USER = StringAttributeSetter.create(\"db.user\");\n   /** JDBC substring like \"mysql://db.example.com:3306\" */\n   public static final StringAttributeSetter DB_URL = StringAttributeSetter.create(\"db.url\");\n \n+  /**\n+   * Connection-level attributes for specific technologies. The instance name connecting to. This\n+   * name is used to determine the port of a named instance.\n+   */\n+  public static final StringAttributeSetter MICROSOFT_SQL_SERVER =\n+      StringAttributeSetter.create(\"db.mssql.instance_name\");\n+  /**\n+   * Connection-level attributes for specific technologies. The fully-qualified class name of the\n+   * Java Database Connectivity (JDBC) driver used to connect, e.g. \"org.postgresql.Driver\" or\n+   * \"com.microsoft.sqlserver.jdbc.SQLServerDriver\".\n+   */\n+  public static final StringAttributeSetter JDBC_CLIENTS =\n+      StringAttributeSetter.create(\"db.jdbc.driver_classname\");\n+\n+  /**\n+   * Call-level attributes for specific technologies. The name of the keyspace being accessed. To be\n+   * used instead of the generic db.name attribute.\n+   */\n+  public static final StringAttributeSetter CASSANDRA =\n+      StringAttributeSetter.create(\"db.cassandra.keyspace\");\n+  /**\n+   * Call-level attributes for specific technologies. The HBase namespace being accessed. To be used", "originalCommit": "677aedfbb5c7e8719c10b976e7ebad50979470b4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg3MjY3Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1459#discussion_r459872673", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public static final StringAttributeSetter HBASE =\n          \n          \n            \n              public static final StringAttributeSetter HBASE_NAMESPACE =", "author": "anuraaga", "createdAt": "2020-07-24T06:27:27Z", "path": "api/src/main/java/io/opentelemetry/trace/attributes/SemanticAttributes.java", "diffHunk": "@@ -142,18 +142,66 @@\n   public static final LongAttributeSetter MESSAGE_UNCOMPRESSED_SIZE =\n       LongAttributeSetter.create(\"message.uncompressed_size\");\n   /** Database type. For any SQL database, \"sql\". For others, the lower-case database category. */\n-  public static final StringAttributeSetter DB_TYPE = StringAttributeSetter.create(\"db.type\");\n-  /** Database instance name. */\n-  public static final StringAttributeSetter DB_INSTANCE =\n-      StringAttributeSetter.create(\"db.instance\");\n+  public static final StringAttributeSetter DB_SYSTEM = StringAttributeSetter.create(\"db.system\");\n+  /** Database name. */\n+  public static final StringAttributeSetter DB_NAME = StringAttributeSetter.create(\"db.name\");\n+  /**\n+   * The connection string used to connect to the database. It's recommended to remove embedded\n+   * credentials.\n+   */\n+  public static final StringAttributeSetter DB_CONNECTION_STRING =\n+      StringAttributeSetter.create(\"db.connection_string\");\n   /** Database statement for the given database type. */\n   public static final StringAttributeSetter DB_STATEMENT =\n       StringAttributeSetter.create(\"db.statement\");\n+  /** Database operation that is being executed. */\n+  public static final StringAttributeSetter DB_OPERATION =\n+      StringAttributeSetter.create(\"db.operation\");\n   /** Username for accessing database. */\n   public static final StringAttributeSetter DB_USER = StringAttributeSetter.create(\"db.user\");\n   /** JDBC substring like \"mysql://db.example.com:3306\" */\n   public static final StringAttributeSetter DB_URL = StringAttributeSetter.create(\"db.url\");\n \n+  /**\n+   * Connection-level attributes for specific technologies. The instance name connecting to. This\n+   * name is used to determine the port of a named instance.\n+   */\n+  public static final StringAttributeSetter MICROSOFT_SQL_SERVER =\n+      StringAttributeSetter.create(\"db.mssql.instance_name\");\n+  /**\n+   * Connection-level attributes for specific technologies. The fully-qualified class name of the\n+   * Java Database Connectivity (JDBC) driver used to connect, e.g. \"org.postgresql.Driver\" or\n+   * \"com.microsoft.sqlserver.jdbc.SQLServerDriver\".\n+   */\n+  public static final StringAttributeSetter JDBC_CLIENTS =\n+      StringAttributeSetter.create(\"db.jdbc.driver_classname\");\n+\n+  /**\n+   * Call-level attributes for specific technologies. The name of the keyspace being accessed. To be\n+   * used instead of the generic db.name attribute.\n+   */\n+  public static final StringAttributeSetter CASSANDRA =\n+      StringAttributeSetter.create(\"db.cassandra.keyspace\");\n+  /**\n+   * Call-level attributes for specific technologies. The HBase namespace being accessed. To be used\n+   * instead of the generic db.name attribute.\n+   */\n+  public static final StringAttributeSetter HBASE =", "originalCommit": "677aedfbb5c7e8719c10b976e7ebad50979470b4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg3Mjk2OA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1459#discussion_r459872968", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * Call-level attributes for specific technologies. The index of the database being accessed as\n          \n          \n            \n               * For db.system == redis, the index of the database being accessed as", "author": "anuraaga", "createdAt": "2020-07-24T06:28:34Z", "path": "api/src/main/java/io/opentelemetry/trace/attributes/SemanticAttributes.java", "diffHunk": "@@ -142,18 +142,66 @@\n   public static final LongAttributeSetter MESSAGE_UNCOMPRESSED_SIZE =\n       LongAttributeSetter.create(\"message.uncompressed_size\");\n   /** Database type. For any SQL database, \"sql\". For others, the lower-case database category. */\n-  public static final StringAttributeSetter DB_TYPE = StringAttributeSetter.create(\"db.type\");\n-  /** Database instance name. */\n-  public static final StringAttributeSetter DB_INSTANCE =\n-      StringAttributeSetter.create(\"db.instance\");\n+  public static final StringAttributeSetter DB_SYSTEM = StringAttributeSetter.create(\"db.system\");\n+  /** Database name. */\n+  public static final StringAttributeSetter DB_NAME = StringAttributeSetter.create(\"db.name\");\n+  /**\n+   * The connection string used to connect to the database. It's recommended to remove embedded\n+   * credentials.\n+   */\n+  public static final StringAttributeSetter DB_CONNECTION_STRING =\n+      StringAttributeSetter.create(\"db.connection_string\");\n   /** Database statement for the given database type. */\n   public static final StringAttributeSetter DB_STATEMENT =\n       StringAttributeSetter.create(\"db.statement\");\n+  /** Database operation that is being executed. */\n+  public static final StringAttributeSetter DB_OPERATION =\n+      StringAttributeSetter.create(\"db.operation\");\n   /** Username for accessing database. */\n   public static final StringAttributeSetter DB_USER = StringAttributeSetter.create(\"db.user\");\n   /** JDBC substring like \"mysql://db.example.com:3306\" */\n   public static final StringAttributeSetter DB_URL = StringAttributeSetter.create(\"db.url\");\n \n+  /**\n+   * Connection-level attributes for specific technologies. The instance name connecting to. This\n+   * name is used to determine the port of a named instance.\n+   */\n+  public static final StringAttributeSetter MICROSOFT_SQL_SERVER =\n+      StringAttributeSetter.create(\"db.mssql.instance_name\");\n+  /**\n+   * Connection-level attributes for specific technologies. The fully-qualified class name of the\n+   * Java Database Connectivity (JDBC) driver used to connect, e.g. \"org.postgresql.Driver\" or\n+   * \"com.microsoft.sqlserver.jdbc.SQLServerDriver\".\n+   */\n+  public static final StringAttributeSetter JDBC_CLIENTS =\n+      StringAttributeSetter.create(\"db.jdbc.driver_classname\");\n+\n+  /**\n+   * Call-level attributes for specific technologies. The name of the keyspace being accessed. To be\n+   * used instead of the generic db.name attribute.\n+   */\n+  public static final StringAttributeSetter CASSANDRA =\n+      StringAttributeSetter.create(\"db.cassandra.keyspace\");\n+  /**\n+   * Call-level attributes for specific technologies. The HBase namespace being accessed. To be used\n+   * instead of the generic db.name attribute.\n+   */\n+  public static final StringAttributeSetter HBASE =\n+      StringAttributeSetter.create(\"db.hbase.namespace\");\n+  /**\n+   * Call-level attributes for specific technologies. The index of the database being accessed as", "originalCommit": "677aedfbb5c7e8719c10b976e7ebad50979470b4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg3MzA1NA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1459#discussion_r459873054", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public static final StringAttributeSetter REDIS =\n          \n          \n            \n              public static final StringAttributeSetter REDIS_DATABASE_INDEX =", "author": "anuraaga", "createdAt": "2020-07-24T06:28:54Z", "path": "api/src/main/java/io/opentelemetry/trace/attributes/SemanticAttributes.java", "diffHunk": "@@ -142,18 +142,66 @@\n   public static final LongAttributeSetter MESSAGE_UNCOMPRESSED_SIZE =\n       LongAttributeSetter.create(\"message.uncompressed_size\");\n   /** Database type. For any SQL database, \"sql\". For others, the lower-case database category. */\n-  public static final StringAttributeSetter DB_TYPE = StringAttributeSetter.create(\"db.type\");\n-  /** Database instance name. */\n-  public static final StringAttributeSetter DB_INSTANCE =\n-      StringAttributeSetter.create(\"db.instance\");\n+  public static final StringAttributeSetter DB_SYSTEM = StringAttributeSetter.create(\"db.system\");\n+  /** Database name. */\n+  public static final StringAttributeSetter DB_NAME = StringAttributeSetter.create(\"db.name\");\n+  /**\n+   * The connection string used to connect to the database. It's recommended to remove embedded\n+   * credentials.\n+   */\n+  public static final StringAttributeSetter DB_CONNECTION_STRING =\n+      StringAttributeSetter.create(\"db.connection_string\");\n   /** Database statement for the given database type. */\n   public static final StringAttributeSetter DB_STATEMENT =\n       StringAttributeSetter.create(\"db.statement\");\n+  /** Database operation that is being executed. */\n+  public static final StringAttributeSetter DB_OPERATION =\n+      StringAttributeSetter.create(\"db.operation\");\n   /** Username for accessing database. */\n   public static final StringAttributeSetter DB_USER = StringAttributeSetter.create(\"db.user\");\n   /** JDBC substring like \"mysql://db.example.com:3306\" */\n   public static final StringAttributeSetter DB_URL = StringAttributeSetter.create(\"db.url\");\n \n+  /**\n+   * Connection-level attributes for specific technologies. The instance name connecting to. This\n+   * name is used to determine the port of a named instance.\n+   */\n+  public static final StringAttributeSetter MICROSOFT_SQL_SERVER =\n+      StringAttributeSetter.create(\"db.mssql.instance_name\");\n+  /**\n+   * Connection-level attributes for specific technologies. The fully-qualified class name of the\n+   * Java Database Connectivity (JDBC) driver used to connect, e.g. \"org.postgresql.Driver\" or\n+   * \"com.microsoft.sqlserver.jdbc.SQLServerDriver\".\n+   */\n+  public static final StringAttributeSetter JDBC_CLIENTS =\n+      StringAttributeSetter.create(\"db.jdbc.driver_classname\");\n+\n+  /**\n+   * Call-level attributes for specific technologies. The name of the keyspace being accessed. To be\n+   * used instead of the generic db.name attribute.\n+   */\n+  public static final StringAttributeSetter CASSANDRA =\n+      StringAttributeSetter.create(\"db.cassandra.keyspace\");\n+  /**\n+   * Call-level attributes for specific technologies. The HBase namespace being accessed. To be used\n+   * instead of the generic db.name attribute.\n+   */\n+  public static final StringAttributeSetter HBASE =\n+      StringAttributeSetter.create(\"db.hbase.namespace\");\n+  /**\n+   * Call-level attributes for specific technologies. The index of the database being accessed as\n+   * used in the SELECT command, provided as an integer. To be used instead of the generic db.name\n+   * attribute.\n+   */\n+  public static final StringAttributeSetter REDIS =", "originalCommit": "677aedfbb5c7e8719c10b976e7ebad50979470b4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg3MzE5OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1459#discussion_r459873199", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * Call-level attributes for specific technologies. The collection being accessed within the\n          \n          \n            \n               * For db.system == monbodb, the collection being accessed within the", "author": "anuraaga", "createdAt": "2020-07-24T06:29:27Z", "path": "api/src/main/java/io/opentelemetry/trace/attributes/SemanticAttributes.java", "diffHunk": "@@ -142,18 +142,66 @@\n   public static final LongAttributeSetter MESSAGE_UNCOMPRESSED_SIZE =\n       LongAttributeSetter.create(\"message.uncompressed_size\");\n   /** Database type. For any SQL database, \"sql\". For others, the lower-case database category. */\n-  public static final StringAttributeSetter DB_TYPE = StringAttributeSetter.create(\"db.type\");\n-  /** Database instance name. */\n-  public static final StringAttributeSetter DB_INSTANCE =\n-      StringAttributeSetter.create(\"db.instance\");\n+  public static final StringAttributeSetter DB_SYSTEM = StringAttributeSetter.create(\"db.system\");\n+  /** Database name. */\n+  public static final StringAttributeSetter DB_NAME = StringAttributeSetter.create(\"db.name\");\n+  /**\n+   * The connection string used to connect to the database. It's recommended to remove embedded\n+   * credentials.\n+   */\n+  public static final StringAttributeSetter DB_CONNECTION_STRING =\n+      StringAttributeSetter.create(\"db.connection_string\");\n   /** Database statement for the given database type. */\n   public static final StringAttributeSetter DB_STATEMENT =\n       StringAttributeSetter.create(\"db.statement\");\n+  /** Database operation that is being executed. */\n+  public static final StringAttributeSetter DB_OPERATION =\n+      StringAttributeSetter.create(\"db.operation\");\n   /** Username for accessing database. */\n   public static final StringAttributeSetter DB_USER = StringAttributeSetter.create(\"db.user\");\n   /** JDBC substring like \"mysql://db.example.com:3306\" */\n   public static final StringAttributeSetter DB_URL = StringAttributeSetter.create(\"db.url\");\n \n+  /**\n+   * Connection-level attributes for specific technologies. The instance name connecting to. This\n+   * name is used to determine the port of a named instance.\n+   */\n+  public static final StringAttributeSetter MICROSOFT_SQL_SERVER =\n+      StringAttributeSetter.create(\"db.mssql.instance_name\");\n+  /**\n+   * Connection-level attributes for specific technologies. The fully-qualified class name of the\n+   * Java Database Connectivity (JDBC) driver used to connect, e.g. \"org.postgresql.Driver\" or\n+   * \"com.microsoft.sqlserver.jdbc.SQLServerDriver\".\n+   */\n+  public static final StringAttributeSetter JDBC_CLIENTS =\n+      StringAttributeSetter.create(\"db.jdbc.driver_classname\");\n+\n+  /**\n+   * Call-level attributes for specific technologies. The name of the keyspace being accessed. To be\n+   * used instead of the generic db.name attribute.\n+   */\n+  public static final StringAttributeSetter CASSANDRA =\n+      StringAttributeSetter.create(\"db.cassandra.keyspace\");\n+  /**\n+   * Call-level attributes for specific technologies. The HBase namespace being accessed. To be used\n+   * instead of the generic db.name attribute.\n+   */\n+  public static final StringAttributeSetter HBASE =\n+      StringAttributeSetter.create(\"db.hbase.namespace\");\n+  /**\n+   * Call-level attributes for specific technologies. The index of the database being accessed as\n+   * used in the SELECT command, provided as an integer. To be used instead of the generic db.name\n+   * attribute.\n+   */\n+  public static final StringAttributeSetter REDIS =\n+      StringAttributeSetter.create(\"db.redis.database_index\");\n+  /**\n+   * Call-level attributes for specific technologies. The collection being accessed within the", "originalCommit": "677aedfbb5c7e8719c10b976e7ebad50979470b4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg3MzM2MA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1459#discussion_r459873360", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public static final StringAttributeSetter MONGODB =\n          \n          \n            \n              public static final StringAttributeSetter MONGODB_COLLECTION =", "author": "anuraaga", "createdAt": "2020-07-24T06:29:56Z", "path": "api/src/main/java/io/opentelemetry/trace/attributes/SemanticAttributes.java", "diffHunk": "@@ -142,18 +142,66 @@\n   public static final LongAttributeSetter MESSAGE_UNCOMPRESSED_SIZE =\n       LongAttributeSetter.create(\"message.uncompressed_size\");\n   /** Database type. For any SQL database, \"sql\". For others, the lower-case database category. */\n-  public static final StringAttributeSetter DB_TYPE = StringAttributeSetter.create(\"db.type\");\n-  /** Database instance name. */\n-  public static final StringAttributeSetter DB_INSTANCE =\n-      StringAttributeSetter.create(\"db.instance\");\n+  public static final StringAttributeSetter DB_SYSTEM = StringAttributeSetter.create(\"db.system\");\n+  /** Database name. */\n+  public static final StringAttributeSetter DB_NAME = StringAttributeSetter.create(\"db.name\");\n+  /**\n+   * The connection string used to connect to the database. It's recommended to remove embedded\n+   * credentials.\n+   */\n+  public static final StringAttributeSetter DB_CONNECTION_STRING =\n+      StringAttributeSetter.create(\"db.connection_string\");\n   /** Database statement for the given database type. */\n   public static final StringAttributeSetter DB_STATEMENT =\n       StringAttributeSetter.create(\"db.statement\");\n+  /** Database operation that is being executed. */\n+  public static final StringAttributeSetter DB_OPERATION =\n+      StringAttributeSetter.create(\"db.operation\");\n   /** Username for accessing database. */\n   public static final StringAttributeSetter DB_USER = StringAttributeSetter.create(\"db.user\");\n   /** JDBC substring like \"mysql://db.example.com:3306\" */\n   public static final StringAttributeSetter DB_URL = StringAttributeSetter.create(\"db.url\");\n \n+  /**\n+   * Connection-level attributes for specific technologies. The instance name connecting to. This\n+   * name is used to determine the port of a named instance.\n+   */\n+  public static final StringAttributeSetter MICROSOFT_SQL_SERVER =\n+      StringAttributeSetter.create(\"db.mssql.instance_name\");\n+  /**\n+   * Connection-level attributes for specific technologies. The fully-qualified class name of the\n+   * Java Database Connectivity (JDBC) driver used to connect, e.g. \"org.postgresql.Driver\" or\n+   * \"com.microsoft.sqlserver.jdbc.SQLServerDriver\".\n+   */\n+  public static final StringAttributeSetter JDBC_CLIENTS =\n+      StringAttributeSetter.create(\"db.jdbc.driver_classname\");\n+\n+  /**\n+   * Call-level attributes for specific technologies. The name of the keyspace being accessed. To be\n+   * used instead of the generic db.name attribute.\n+   */\n+  public static final StringAttributeSetter CASSANDRA =\n+      StringAttributeSetter.create(\"db.cassandra.keyspace\");\n+  /**\n+   * Call-level attributes for specific technologies. The HBase namespace being accessed. To be used\n+   * instead of the generic db.name attribute.\n+   */\n+  public static final StringAttributeSetter HBASE =\n+      StringAttributeSetter.create(\"db.hbase.namespace\");\n+  /**\n+   * Call-level attributes for specific technologies. The index of the database being accessed as\n+   * used in the SELECT command, provided as an integer. To be used instead of the generic db.name\n+   * attribute.\n+   */\n+  public static final StringAttributeSetter REDIS =\n+      StringAttributeSetter.create(\"db.redis.database_index\");\n+  /**\n+   * Call-level attributes for specific technologies. The collection being accessed within the\n+   * database stated in db.name\n+   */\n+  public static final StringAttributeSetter MONGODB =", "originalCommit": "677aedfbb5c7e8719c10b976e7ebad50979470b4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "ecef6fc421e4f01e7b688f3723ae02c64f4fbe3b", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/ecef6fc421e4f01e7b688f3723ae02c64f4fbe3b", "message": "Address comments", "committedDate": "2020-07-24T16:51:15Z", "type": "commit"}, {"oid": "d31a34ad48ac019f2bc28dd654d3f863e6694838", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/d31a34ad48ac019f2bc28dd654d3f863e6694838", "message": "Update javadoc and rename", "committedDate": "2020-07-24T17:01:54Z", "type": "commit"}, {"oid": "fe24112147e8dcd5bc6ad8a1ac6a7e502dae753f", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/fe24112147e8dcd5bc6ad8a1ac6a7e502dae753f", "message": "Update javadoc for Cassandra.\n\nCo-authored-by: Anuraag Agrawal <anuraaga@gmail.com>", "committedDate": "2020-07-24T17:03:48Z", "type": "commit"}, {"oid": "d956c32273929f314468715fe74d1cc8f723cf86", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/d956c32273929f314468715fe74d1cc8f723cf86", "message": "Rename Cassandra constant.\n\nCo-authored-by: Anuraag Agrawal <anuraaga@gmail.com>", "committedDate": "2020-07-24T17:04:18Z", "type": "commit"}, {"oid": "df8b81a8b3f211b4708f6928ff744988ab475bf0", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/df8b81a8b3f211b4708f6928ff744988ab475bf0", "message": "Apply GoogleJavaFormat", "committedDate": "2020-07-24T17:07:12Z", "type": "commit"}, {"oid": "b891e854a521f46f88ff560cd3c95635f3414353", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/b891e854a521f46f88ff560cd3c95635f3414353", "message": "Fix javadoc exception", "committedDate": "2020-07-24T18:02:21Z", "type": "commit"}, {"oid": "2a95e4126c89b17703a35b0787655295fab4d8cd", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/2a95e4126c89b17703a35b0787655295fab4d8cd", "message": "Delete db.url", "committedDate": "2020-07-24T18:30:54Z", "type": "commit"}]}