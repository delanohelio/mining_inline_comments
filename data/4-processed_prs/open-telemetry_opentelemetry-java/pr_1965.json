{"pr_number": 1965, "pr_title": "Add point to contributor document about preserving semantic versioning.", "pr_createdAt": "2020-11-02T04:55:32Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java/pull/1965", "timeline": [{"oid": "d3fb460aa4314f73b18a15dbf7809cc33d50f0e7", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/d3fb460aa4314f73b18a15dbf7809cc33d50f0e7", "message": "Add point to contributor document about preserving semantic versioning.", "committedDate": "2020-11-02T04:54:30Z", "type": "commit"}, {"oid": "1953f27f218d3ccdcb53063d136b5e9449538fca", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/1953f27f218d3ccdcb53063d136b5e9449538fca", "message": "Add link to semver.org", "committedDate": "2020-11-02T04:56:56Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjAzMjcyNQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1965#discussion_r516032725", "bodyText": "Is the example for ABI really breaking? Because if that is breaking I think adding a new method is also breaking correct?\nAlso changing an argument from String -> CharSequence I thought it is fine, I know it breaks the sdk implementation but does it break an artifact that depends on small API version + new API + new SDK?", "author": "bogdandrutu", "createdAt": "2020-11-02T15:02:59Z", "path": "CONTRIBUTING.md", "diffHunk": "@@ -45,6 +45,9 @@ which uses [google-java-format](https://github.com/google/google-java-format) li\n \n ### Best practices that we follow\n \n+* This project uses [semantic versioning](https://semver.org/). Except for major versions, a user should be able to update\n+their dependency version on this project and have nothing break. This means we do not make breaking\n+changes to the API (e.g., remove a public method) or to the ABI (e.g., change return type from void to non-void).", "originalCommit": "1953f27f218d3ccdcb53063d136b5e9449538fca", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjAzNjgzOQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1965#discussion_r516036839", "bodyText": "So what you are saying is that we make a special exception for ABI compatibility to allow changes that would break SDK implementations but from which we hope that they do not break typical uses of the API package for instrumentation? We need to document that then. EDIT: Note that technically implementing the API is just a special case of \"using the API\".", "author": "Oberon00", "createdAt": "2020-11-02T15:09:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjAzMjcyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjAzNzEwNg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1965#discussion_r516037106", "bodyText": "Adding new method is not breaking. Changing return type is breaking because invokevirtual/invokeinterface bytecoe instruction contain method descriptor to call. That descriptor contains return value. When method with such return value is not found when called, the AbstractMethodError is thrown.", "author": "iNikem", "createdAt": "2020-11-02T15:09:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjAzMjcyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjA1MTUxMg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1965#discussion_r516051512", "bodyText": "I found a very good and detailed explication of the ABI compatibility https://docs.oracle.com/javase/specs/jls/se7/html/jls-13.html\nIndeed changing the return type, or the type of an argument even if it is source compatible as in my example with the String is considered backwards incompatible.", "author": "bogdandrutu", "createdAt": "2020-11-02T15:29:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjAzMjcyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjA1MzgzOA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1965#discussion_r516053838", "bodyText": "@Oberon00 have not read the entire document, but at first it seems that adding a new method to an interface (even without default) is considered backwards compatible, but that may break SDK implementation. I would not aim to fix that problem personally.", "author": "bogdandrutu", "createdAt": "2020-11-02T15:32:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjAzMjcyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjA1NTEwNg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1965#discussion_r516055106", "bodyText": "Implementing the API is a special case, but that special case is not supposed to be included in other libraries so does not require ABI compatibility if I understand correctly", "author": "bogdandrutu", "createdAt": "2020-11-02T15:34:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjAzMjcyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjM4MTU0Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1965#discussion_r516381543", "bodyText": "Enforcing version coupling for API + SDK, including custom SDKs is ok I think though especially for the case of custom SDKs we need to declare that clearly (hopefully separate from this PR).\nStill, ideally we can avoid it, and default interface methods help with that.", "author": "anuraaga", "createdAt": "2020-11-03T01:21:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjAzMjcyNQ=="}], "type": "inlineReview"}]}