{"pr_number": 1366, "pr_title": "Add SDK Telemetry resources", "pr_createdAt": "2020-06-22T05:20:15Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java/pull/1366", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzMyMzA3Nw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1366#discussion_r443323077", "bodyText": "I don't think this is doing what you expect, this code is run during the Gradle configuration, not during any task which is not good for several reasons.\nInstead, add a new task and set it as a builtBy source\nhttps://github.com/aws/aws-xray-sdk-java/blob/master/build.gradle.kts#L63\nhttps://github.com/aws/aws-xray-sdk-java/blob/master/build.gradle.kts#L131", "author": "anuraaga", "createdAt": "2020-06-22T05:24:35Z", "path": "sdk/build.gradle", "diffHunk": "@@ -30,3 +30,10 @@ animalsniffer {\n             sourceSets.main\n     ]\n }\n+\n+processResources {\n+    new File(", "originalCommit": "f032e616294936c8f08d9f21df1508a0d66edc08", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzMyMzYwOQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1366#discussion_r443323609", "bodyText": "I think we should put this into a package, e.g. io/opentelemetry/sdk/version.properties", "author": "anuraaga", "createdAt": "2020-06-22T05:26:38Z", "path": "sdk/build.gradle", "diffHunk": "@@ -30,3 +30,10 @@ animalsniffer {\n             sourceSets.main\n     ]\n }\n+\n+processResources {\n+    new File(\n+            projectDir.getAbsolutePath() + File.separator + [\"src\", \"main\", \"resources\"].join(File.separator),\n+            \"version.properties\"", "originalCommit": "f032e616294936c8f08d9f21df1508a0d66edc08", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzMyNDExNA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1366#discussion_r443324114", "bodyText": "I think FileInputStream only works when loading from the file system, e.g., IntelliJ and unit tests but not from a JAR. Instead\nResource.class.getResourceAsAstream(\"version.properties\") can handle both", "author": "anuraaga", "createdAt": "2020-06-22T05:28:48Z", "path": "sdk/src/main/java/io/opentelemetry/sdk/resources/Resource.java", "diffHunk": "@@ -45,6 +47,26 @@\n   private static final String ERROR_MESSAGE_INVALID_VALUE =\n       \" should be a ASCII string with a length not exceed \" + MAX_LENGTH + \" characters.\";\n   private static final Resource EMPTY = create(Attributes.empty());\n+  private static final Resource TELEMETRY_SDK =\n+      create(\n+          Attributes.newBuilder()\n+              .setAttribute(\"telemetry.sdk.name\", \"opentelemetry\")\n+              .setAttribute(\"telemetry.sdk.language\", \"java\")\n+              .setAttribute(\"telemetry.sdk.version\", readVersion())\n+              .build());\n+\n+  @Nullable\n+  private static String readVersion() {\n+    Properties properties = new Properties();\n+    try {\n+      properties.load(\n+          new FileInputStream(Resource.class.getResource(\"version.properties\").getFile()));", "originalCommit": "f032e616294936c8f08d9f21df1508a0d66edc08", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzMyNDU0MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1366#discussion_r443324541", "bodyText": "So when a user wants to define their own Resource, they always have to merge the default one to get these values. I think this is OK, but it could also be good independently of this PR to think if Resource would make sense to have its own SPI, so that any ResourceProvider in the app are automatically registered without having to manually merge them all. Of course, there could be ordering problems with this, but it's probably still simpler than manual merging in many cases.", "author": "anuraaga", "createdAt": "2020-06-22T05:30:44Z", "path": "sdk/src/main/java/io/opentelemetry/sdk/trace/TracerSdkProvider.java", "diffHunk": "@@ -138,7 +138,7 @@ public void forceFlush() {\n \n     private Clock clock = MillisClock.getInstance();\n     private IdsGenerator idsGenerator = new RandomIdsGenerator();\n-    private Resource resource = EnvVarResource.getResource();\n+    private Resource resource = Resource.getTelemetrySdk().merge(EnvVarResource.getResource());", "originalCommit": "f032e616294936c8f08d9f21df1508a0d66edc08", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY1MDc0Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1366#discussion_r443650743", "bodyText": "Let's definitely address this case in another PR (we have meant to implement the Resource part you mention, in some way or another, for some time now, so hopefully we will have it soon).", "author": "carlosalberto", "createdAt": "2020-06-22T15:38:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzMyNDU0MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzMyNTQ4NQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1366#discussion_r443325485", "bodyText": "Think it's better to avoid the forEach\nassertThat(attributes.get(\"telemetry.sdk.name\")).isEqualTo(stringAttributeValue(\"opentelemetry\"));\nassertThat(attributes.get(\"telemetry.sdk.language\")).isEqualTo(stringAttributeValue(\"java\"));\nassertThat(attributes.get(\"telemetry.sdk.version\")).isNotNull();\n/cc PS @jkwatson Would love to have getString :D", "author": "anuraaga", "createdAt": "2020-06-22T05:35:04Z", "path": "sdk/src/test/java/io/opentelemetry/sdk/resource/ResourceTest.java", "diffHunk": "@@ -148,4 +150,15 @@ public void testMergeResources_Resource2_Null() {\n     Resource resource = DEFAULT_RESOURCE.merge(resource1).merge(null);\n     assertThat(resource.getAttributes()).isEqualTo(expectedAttributes);\n   }\n+\n+  @Test\n+  public void testSdkTelemetryResources() {\n+    Resource resource = Resource.getTelemetrySdk();\n+    ReadableAttributes attributes = resource.getAttributes();\n+    String[] keys = {\"telemetry.sdk.name\", \"telemetry.sdk.language\", \"telemetry.sdk.version\"};", "originalCommit": "f032e616294936c8f08d9f21df1508a0d66edc08", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY1Mjg3Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1366#discussion_r443652873", "bodyText": "I'be initially against adding too many public methods to Attributes, as this is in general a class expected to be used by the SDK processing, not by end users. get() IMHO is enough for this purpose (and having to write more code in our side won't kill us ;) )", "author": "carlosalberto", "createdAt": "2020-06-22T15:42:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzMyNTQ4NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzcxNjY5MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1366#discussion_r443716691", "bodyText": "This test could be made simpler by just building the Attributes object you expect and asserting that what you get back is equal to it.", "author": "jkwatson", "createdAt": "2020-06-22T17:28:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzMyNTQ4NQ=="}], "type": "inlineReview"}, {"oid": "4bc6a89b9f479d407170b0f8ae689a554723bb04", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/4bc6a89b9f479d407170b0f8ae689a554723bb04", "message": "Add SDK Telemetry resources", "committedDate": "2020-06-23T06:40:43Z", "type": "commit"}, {"oid": "d63d6314df3c3f3bf614aa2c20c6c94eba0daaad", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/d63d6314df3c3f3bf614aa2c20c6c94eba0daaad", "message": "Address feedback", "committedDate": "2020-06-23T06:41:09Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzk5NDM2Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1366#discussion_r443994362", "bodyText": "Can you delete this file? We want to generate into build at build time, not into the codebase. If you remove this and apply the suggestions and tests still pass, then you should be good", "author": "anuraaga", "createdAt": "2020-06-23T06:40:41Z", "path": "sdk/src/main/resources/io/opentelemetry/sdk/version.properties", "diffHunk": "@@ -0,0 +1 @@\n+sdk.version=0.6.0-SNAPSHOT", "originalCommit": "976244341cff4f7913ddcf8575b472be4bead6cc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzk5NDU0Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1366#discussion_r443994546", "bodyText": "Don't generate to source, generate to build, e.g. build/generated/properties/io/opentelemetry/sdk", "author": "anuraaga", "createdAt": "2020-06-23T06:41:07Z", "path": "sdk/build.gradle", "diffHunk": "@@ -8,6 +8,7 @@ plugins {\n \n description = 'OpenTelemetry SDK'\n ext.moduleName = \"io.opentelemetry.sdk\"\n+ext.propertiesDir = \"src/main/resources/io/opentelemetry/sdk\"", "originalCommit": "976244341cff4f7913ddcf8575b472be4bead6cc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzk5NDczNg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1366#discussion_r443994736", "bodyText": "Here you would register build/generated/properties I believe", "author": "anuraaga", "createdAt": "2020-06-23T06:41:34Z", "path": "sdk/build.gradle", "diffHunk": "@@ -24,16 +25,24 @@ dependencies {\n     signature \"net.sf.androidscents.signature:android-api-level-24:7.0_r2@signature\"\n }\n \n+sourceSets {\n+    main {\n+        output.dir(propertiesDir, builtBy: 'generateVersionResource')", "originalCommit": "976244341cff4f7913ddcf8575b472be4bead6cc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "8e3fb8700884fa63c3e99b33d3772a2ffcae6218", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/8e3fb8700884fa63c3e99b33d3772a2ffcae6218", "message": "Generate version.properties", "committedDate": "2020-06-23T06:46:58Z", "type": "commit"}, {"oid": "8e3fb8700884fa63c3e99b33d3772a2ffcae6218", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/8e3fb8700884fa63c3e99b33d3772a2ffcae6218", "message": "Generate version.properties", "committedDate": "2020-06-23T06:46:58Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzk5OTg0MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1366#discussion_r443999841", "bodyText": "Just noticed null value is allowed - @jkwatson does that seem OK? Wouldn't be surprised if it causes a NPE during export.\nEither way, what about setting to unknown?", "author": "anuraaga", "createdAt": "2020-06-23T06:53:10Z", "path": "sdk/src/main/java/io/opentelemetry/sdk/resources/Resource.java", "diffHunk": "@@ -45,6 +46,27 @@\n   private static final String ERROR_MESSAGE_INVALID_VALUE =\n       \" should be a ASCII string with a length not exceed \" + MAX_LENGTH + \" characters.\";\n   private static final Resource EMPTY = create(Attributes.empty());\n+  private static final Resource TELEMETRY_SDK =\n+      create(\n+          Attributes.newBuilder()\n+              .setAttribute(\"telemetry.sdk.name\", \"opentelemetry\")\n+              .setAttribute(\"telemetry.sdk.language\", \"java\")\n+              .setAttribute(\"telemetry.sdk.version\", readVersion())\n+              .build());\n+\n+  @Nullable\n+  private static String readVersion() {\n+\n+    Properties properties = new Properties();\n+    try {\n+      properties.load(\n+          Resource.class.getResourceAsStream(\"/io/opentelemetry/sdk/version.properties\"));\n+    } catch (Exception e) {\n+      // we left the attribute empty\n+      return null;", "originalCommit": "8e3fb8700884fa63c3e99b33d3772a2ffcae6218", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDAwNTgwMQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1366#discussion_r444005801", "bodyText": "My choice is based on the following spec:\n\nAttribute values of null are considered to be not set and get discarded as if that SetAttribute call had never been made.\n\nHowever, I noticed that the value is currently not discarded and, instead, a StringAttribute with value null is created. I was about to investigate a bit before opening an issue \ud83d\ude09", "author": "thisthat", "createdAt": "2020-06-23T07:06:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzk5OTg0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDIwOTUxMg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1366#discussion_r444209512", "bodyText": "Related: to me, it sounds like the build itself should fail if the version is not properly detected.", "author": "carlosalberto", "createdAt": "2020-06-23T13:08:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzk5OTg0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDIxNDMzOA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1366#discussion_r444214338", "bodyText": "The build will make sure there is a version in the jar, but due to shading or similar, it may not make it into a user's app. I've seen a similar setup in Armeria cause NPE for users because of not accounting for the possibility before ><", "author": "anuraaga", "createdAt": "2020-06-23T13:16:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzk5OTg0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTg2NzU1Nw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1366#discussion_r445867557", "bodyText": "Yes, I would prefer \"unknown\" to be here, rather than possible nulls to confound an exporter that wasn't expecting it.", "author": "jkwatson", "createdAt": "2020-06-25T22:12:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzk5OTg0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njc4MTk2MA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1366#discussion_r446781960", "bodyText": "Done in 6f113c0", "author": "thisthat", "createdAt": "2020-06-29T05:35:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzk5OTg0MQ=="}], "type": "inlineReview"}, {"oid": "6f113c0d5f7a174eedf2107a1a9df2e0ec2430a8", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/6f113c0d5f7a174eedf2107a1a9df2e0ec2430a8", "message": "Use unknown when version not available", "committedDate": "2020-06-29T05:35:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzEzNTMyNg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1366#discussion_r447135326", "bodyText": "With such a generic filename, it seems like there's a possibility this could collide with other projects version file. What do you think about making this be something super clear like \"opentelemetry-sdk-version.properties\" ?", "author": "jkwatson", "createdAt": "2020-06-29T17:28:56Z", "path": "sdk/build.gradle", "diffHunk": "@@ -24,9 +25,24 @@ dependencies {\n     signature \"net.sf.androidscents.signature:android-api-level-24:7.0_r2@signature\"\n }\n \n+sourceSets {\n+    main {\n+        output.dir(\"build/generated/properties\", builtBy: 'generateVersionResource')\n+    }\n+}\n+\n animalsniffer {\n     // Don't check sourceSets.jmh and sourceSets.test\n     sourceSets = [\n             sourceSets.main\n     ]\n }\n+\n+task generateVersionResource {\n+    doLast {\n+        def folder = file(propertiesDir)\n+        folder.mkdirs()\n+        def propertiesFile = new File(folder.getAbsolutePath(), \"version.properties\")", "originalCommit": "6f113c0d5f7a174eedf2107a1a9df2e0ec2430a8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzEzNTc0NA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1366#discussion_r447135744", "bodyText": "oh, never mind. I see that the folder will be included in here, as well. It's all good!", "author": "jkwatson", "createdAt": "2020-06-29T17:29:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzEzNTMyNg=="}], "type": "inlineReview"}]}