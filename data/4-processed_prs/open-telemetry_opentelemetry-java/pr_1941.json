{"pr_number": 1941, "pr_title": "Prevent SDK from throwing on null instrumentation name", "pr_createdAt": "2020-10-30T14:23:31Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java/pull/1941", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTI1NTQ1Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1941#discussion_r515255456", "bodyText": "I don't think this is a good idea. If the compiler can catch someone explicitly passing in a null version, then that person can change to use the method that doesn't take one at all.", "author": "jkwatson", "createdAt": "2020-10-30T17:19:40Z", "path": "api/src/main/java/io/opentelemetry/api/OpenTelemetry.java", "diffHunk": "@@ -169,7 +170,7 @@ default Tracer getTracer(String instrumentationName) {\n    *     \"semver:1.0.0\").\n    * @return a tracer instance.\n    */\n-  default Tracer getTracer(String instrumentationName, String instrumentationVersion) {\n+  default Tracer getTracer(String instrumentationName, @Nullable String instrumentationVersion) {", "originalCommit": "9bc71afab3d788f7d5bb994afd14a01b60caee1b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTI1NzA2Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1941#discussion_r515257066", "bodyText": "Agreed, null is not allowed here, we just make do somehow with it.", "author": "Oberon00", "createdAt": "2020-10-30T17:22:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTI1NTQ1Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTI1NjI3NA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1941#discussion_r515256274", "bodyText": "why get rid of this convenience method?", "author": "jkwatson", "createdAt": "2020-10-30T17:21:01Z", "path": "sdk/common/src/main/java/io/opentelemetry/sdk/internal/ComponentRegistry.java", "diffHunk": "@@ -22,18 +22,6 @@\n \n   private final ConcurrentMap<InstrumentationLibraryInfo, V> registry = new ConcurrentHashMap<>();\n \n-  /**\n-   * Returns the registered value associated with this name and {@code null} version if any,\n-   * otherwise creates a new instance and associates it with the given name and {@code null}\n-   * version.\n-   *\n-   * @param instrumentationName the name of the instrumentation library.\n-   * @return the registered value associated with this name and {@code null} version.\n-   */\n-  public final V get(String instrumentationName) {", "originalCommit": "9bc71afab3d788f7d5bb994afd14a01b60caee1b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTYxMzc0MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1941#discussion_r515613741", "bodyText": "The method was no longer used by code within this repository after I changed how MeterSdkProvider and TracerSdkProvider worked. Since it is in the internal package, I figured it wasn't intended for public consumption, and rather than having the unused method in the repo, I removed it.\nIf I should leave it, please let me know and I'll happily undo the change to remove it :)", "author": "MariusVolkhart", "createdAt": "2020-11-01T12:06:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTI1NjI3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjEwNzMwMw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1941#discussion_r516107303", "bodyText": "@MariusVolkhart I suggest undoing this change and removing it in a follow-up PR ;)", "author": "carlosalberto", "createdAt": "2020-11-02T16:46:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTI1NjI3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjIwOTY2OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1941#discussion_r516209669", "bodyText": "I've reverted my changes, so the ComponentRegistry is untouched. Thanks @carlosalberto", "author": "MariusVolkhart", "createdAt": "2020-11-02T19:37:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTI1NjI3NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTI1NzQyNQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1941#discussion_r515257425", "bodyText": "we prefer capitalizing constant names, so change to DEFAULT_METER_NAME", "author": "jkwatson", "createdAt": "2020-10-30T17:22:57Z", "path": "sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/MeterSdkProvider.java", "diffHunk": "@@ -29,6 +31,8 @@\n  */\n public final class MeterSdkProvider implements MeterProvider {\n \n+  private static final Logger logger = Logger.getLogger(MeterSdkProvider.class.getName());\n+  private static final String defaultMeterName = \"unknown\";", "originalCommit": "9bc71afab3d788f7d5bb994afd14a01b60caee1b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTUwNzQxNg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1941#discussion_r515507416", "bodyText": "We follow the Google's style guide, so we should enforce not prefer :)", "author": "bogdandrutu", "createdAt": "2020-10-31T15:21:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTI1NzQyNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTI1ODEyMA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1941#discussion_r515258120", "bodyText": "I'd lower this log level, maybe to FINE. We don't want to spam user logs if an instrumentation library has not passed in a name.", "author": "jkwatson", "createdAt": "2020-10-30T17:24:04Z", "path": "sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/MeterSdkProvider.java", "diffHunk": "@@ -41,11 +45,17 @@ private MeterSdkProvider(Clock clock, Resource resource) {\n \n   @Override\n   public MeterSdk get(String instrumentationName) {\n-    return registry.get(instrumentationName);\n+    return get(instrumentationName, null);\n   }\n \n   @Override\n-  public MeterSdk get(String instrumentationName, String instrumentationVersion) {\n+  public MeterSdk get(String instrumentationName, @Nullable String instrumentationVersion) {\n+    // Per the spec, both null and empty are \"invalid\" and a \"default\" should be used. See commit\n+    //   message for further details.\n+    if (instrumentationName == null || instrumentationName.isEmpty()) {\n+      logger.warning(\"Meter requested without instrumentation name.\");", "originalCommit": "9bc71afab3d788f7d5bb994afd14a01b60caee1b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTI1ODM4Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1941#discussion_r515258386", "bodyText": "same comment on constant naming.", "author": "jkwatson", "createdAt": "2020-10-30T17:24:25Z", "path": "sdk/tracing/src/main/java/io/opentelemetry/sdk/trace/TracerSdkProvider.java", "diffHunk": "@@ -28,6 +29,7 @@\n  */\n public class TracerSdkProvider implements TracerProvider, TracerSdkManagement {\n   private static final Logger logger = Logger.getLogger(TracerSdkProvider.class.getName());\n+  private static final String defaultTracerName = \"unknown\";", "originalCommit": "9bc71afab3d788f7d5bb994afd14a01b60caee1b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTI1ODYxNA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1941#discussion_r515258614", "bodyText": "maybe make the constant package access so we don't have to fix up tests if the default value is decided to change?", "author": "jkwatson", "createdAt": "2020-10-30T17:24:49Z", "path": "sdk/metrics/src/test/java/io/opentelemetry/sdk/metrics/MeterSdkRegistryTest.java", "diffHunk": "@@ -101,4 +101,22 @@ void metricProducer_GetAllMetrics() {\n                 Collections.singletonList(\n                     LongPoint.create(testClock.now(), testClock.now(), Labels.empty(), 10))));\n   }\n+\n+  @Test\n+  void suppliesDefaultMeterForNullName() {\n+    MeterSdk meter = meterProvider.get(null);\n+    assertThat(meter.getInstrumentationLibraryInfo().getName()).isEqualTo(\"unknown\");\n+\n+    meter = meterProvider.get(null, null);\n+    assertThat(meter.getInstrumentationLibraryInfo().getName()).isEqualTo(\"unknown\");\n+  }\n+\n+  @Test\n+  void suppliesDefaultMeterForEmptyName() {\n+    MeterSdk meter = meterProvider.get(\"\");\n+    assertThat(meter.getInstrumentationLibraryInfo().getName()).isEqualTo(\"unknown\");", "originalCommit": "9bc71afab3d788f7d5bb994afd14a01b60caee1b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTI1OTUxNw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1941#discussion_r515259517", "bodyText": "I'm not a fan of referring to commit messages in explanatory comments. Over time, finding the correct commit could be a pretty large chore for someone reading this. I think first sentence should suffice here (and in the meter case as well).", "author": "jkwatson", "createdAt": "2020-10-30T17:26:16Z", "path": "sdk/tracing/src/main/java/io/opentelemetry/sdk/trace/TracerSdkProvider.java", "diffHunk": "@@ -47,11 +49,17 @@ private TracerSdkProvider(Clock clock, IdsGenerator idsGenerator, Resource resou\n \n   @Override\n   public Tracer get(String instrumentationName) {\n-    return tracerSdkComponentRegistry.get(instrumentationName);\n+    return get(instrumentationName, null);\n   }\n \n   @Override\n-  public Tracer get(String instrumentationName, String instrumentationVersion) {\n+  public Tracer get(String instrumentationName, @Nullable String instrumentationVersion) {\n+    // Per the spec, both null and empty are \"invalid\" and a \"default\" should be used. See commit\n+    //   message for further details.", "originalCommit": "9bc71afab3d788f7d5bb994afd14a01b60caee1b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "c3ad26c40371312eb7a3170a130b179b636f1c80", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/c3ad26c40371312eb7a3170a130b179b636f1c80", "message": "fixup! Provide a default Tracer and Meter for invalid instrumentation names", "committedDate": "2020-11-01T11:58:31Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjI3MjU3OA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1941#discussion_r516272578", "bodyText": "I think this will be a common case, I would suggest to actually resolve this as a static variable and return the instance.", "author": "bogdandrutu", "createdAt": "2020-11-02T21:45:26Z", "path": "sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/MeterSdkProvider.java", "diffHunk": "@@ -41,11 +45,16 @@ private MeterSdkProvider(Clock clock, Resource resource) {\n \n   @Override\n   public MeterSdk get(String instrumentationName) {\n-    return registry.get(instrumentationName);\n+    return get(instrumentationName, null);\n   }\n \n   @Override\n-  public MeterSdk get(String instrumentationName, String instrumentationVersion) {\n+  public MeterSdk get(String instrumentationName, @Nullable String instrumentationVersion) {\n+    // Per the spec, both null and empty are \"invalid\" and a \"default\" should be used.\n+    if (instrumentationName == null || instrumentationName.isEmpty()) {\n+      LOGGER.fine(\"Meter requested without instrumentation name.\");\n+      instrumentationName = DEFAULT_METER_NAME;", "originalCommit": "d2b0ca709b921baf1cd39f3f782051dbdb3f6ffe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzM5NDg2NQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1941#discussion_r517394865", "bodyText": "I'm not sure I understand. Are you suggesting a static MeterSdk to represent the default, rather than loading the cached instance from the registry? Are we OK with ignoring the potentially valid version number provided when returning the static instance?\nI don't think we should use a static here. Firstly, we have the cache, and secondly, optimizing the code for what is supposed to be a \"don't do this\" use case seems wrong. If this will be a common case, then it feels like there should be a stronger push on the spec to make null a valid value.", "author": "MariusVolkhart", "createdAt": "2020-11-04T14:44:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjI3MjU3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODEzMDcwMQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1941#discussion_r518130701", "bodyText": "Just have a \"private static Meter DEFAULT_METER = registry.get(DEFAULT_NAME, null)\" and return that if no name instead of always asking the registry to return the value.", "author": "bogdandrutu", "createdAt": "2020-11-05T15:18:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjI3MjU3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODEzMTk5NA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1941#discussion_r518131994", "bodyText": "I understand that this is a no in the specs, but I do believe users will do this a lot :)). We can do that later", "author": "bogdandrutu", "createdAt": "2020-11-05T15:20:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjI3MjU3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODEzMjk3OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1941#discussion_r518132979", "bodyText": "If we don't throw exception, user will use this most of the time, that is my theory", "author": "bogdandrutu", "createdAt": "2020-11-05T15:21:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjI3MjU3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODEzODk1MA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1941#discussion_r518138950", "bodyText": "Should we keep throwing an exception then? The instrumentation name should not be a dynamically generated string that can accidentally be null at runtime anyway.", "author": "Oberon00", "createdAt": "2020-11-05T15:29:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjI3MjU3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODY3MjgwMw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1941#discussion_r518672803", "bodyText": "I drafted #2036 which goes the route of not only throwing the exception in the SDK, but also in the API. By doing so, 3rd-party library authors who consume just the API are less likely to create a library that works until the application developer drops in the SDK.", "author": "MariusVolkhart", "createdAt": "2020-11-06T10:52:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjI3MjU3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODg1ODA4Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1941#discussion_r518858086", "bodyText": "Unfortunately, we explicitly can't do what you put into #2036. We cannot break applications that have poorly written instrumentation in them.", "author": "jkwatson", "createdAt": "2020-11-06T16:20:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjI3MjU3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODg4MTU0MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1941#discussion_r518881541", "bodyText": "OK. But can we log a SEVERE at least? The logspam should be enough pressure to fix an empty instrumentation name hopefully.", "author": "Oberon00", "createdAt": "2020-11-06T16:59:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjI3MjU3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODg4ODI5MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1941#discussion_r518888291", "bodyText": "We definitely should not spam an end-application's logs, as this can crash the app (run out of disk space, etc). And, if the end-user's application is using a library with bad instrumentation built in to it, they may not even have the option of fixing it (and they may not even be using OpenTelemetry at all!)", "author": "jkwatson", "createdAt": "2020-11-06T17:11:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjI3MjU3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTE5NjM1NA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1941#discussion_r519196354", "bodyText": "My original motivation for opening this issue and submitting a PR was that I was instrumenting an internal library that another team consumes. It was unclear to me as a library author what value I was supposed to provide as the instrumentationName, so I tried null. The API accepted it without crashing! It wasn't until later, when I did some testing and added the SDK, that it crashed. That would have been the consuming team who publish the app.\nAs the author of a library, I wish my code had failed when just the API artifact was on the classpath, or at least complained loudly about it to me. But, since the spec declares that null should be treated as \"use a default\", I made this PR to modify the SDK to be lenient (thereby matching the API).\n\nI think this PR meets the requirements of the current spec. More importantly, it makes the SDK and API artifacts behave consistently on invalid inputs, so there are no surprises when the SDK is used with instrumented code. It does not optimize for the case that the spec says is invalid, and it doesn't help developers adding instrumentation to \"do it right\".\nI'll happily try to improve documentation or samples to give both library developers and application developers a better idea of what a meaningful instrumentationName is for their use case, and why it is important. My \"using Otel for the first time\" experience is still relatively fresh in my memory.", "author": "MariusVolkhart", "createdAt": "2020-11-07T16:57:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjI3MjU3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTE5OTM4NA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1941#discussion_r519199384", "bodyText": "I'm 100% ok with the SDK not blowing up when a null instrumentation name is used. But, we should not change the API parameter annotations to make it something that is \"approved\", nor should we make the API throw exceptions if a null name is passed in.", "author": "jkwatson", "createdAt": "2020-11-07T17:31:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjI3MjU3OA=="}], "type": "inlineReview"}, {"oid": "72e0c0454c8b2ef8754755913c689cea88db17f7", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/72e0c0454c8b2ef8754755913c689cea88db17f7", "message": "fixup! Remove ComponentRegistry#get(String) overload\n\nThis reverts commit db56814c", "committedDate": "2020-11-07T16:49:17Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjU5MjM5OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1941#discussion_r522592399", "bodyText": "@MariusVolkhart Thanks for this change - the implementation looks good, but I agree that we don't need to add the @Nullable annotation to parameters that, we defensively check, but still expect to not be null. Do you think you can remove the annotations?", "author": "anuraaga", "createdAt": "2020-11-13T03:34:38Z", "path": "api/src/main/java/io/opentelemetry/api/metrics/MeterProvider.java", "diffHunk": "@@ -43,5 +44,5 @@ static MeterProvider getDefault() {\n    * @param instrumentationVersion The version of the instrumentation library.\n    * @return a tracer instance.\n    */\n-  Meter get(String instrumentationName, String instrumentationVersion);\n+  Meter get(String instrumentationName, @Nullable String instrumentationVersion);", "originalCommit": "72e0c0454c8b2ef8754755913c689cea88db17f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjg5NDMyNA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1941#discussion_r522894324", "bodyText": "Done! :)", "author": "MariusVolkhart", "createdAt": "2020-11-13T11:32:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjU5MjM5OQ=="}], "type": "inlineReview"}, {"oid": "1165a3a138317462f23808cdc2c2431b60e73285", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/1165a3a138317462f23808cdc2c2431b60e73285", "message": "Provide a default Tracer and Meter for invalid instrumentation names\n\nAccording to the spec, https://github.com/open-telemetry/opentelemetry-specification/blob/v0.6.0/specification/trace/api.md#tracerprovider-operations both a null and empty instrumentation name are invalid and a default implementation should be provided.\n\nHowever, the spec is vague on what default means. See https://github.com/open-telemetry/opentelemetry-specification/issues/586#issuecomment-669856711\n\nThis change interprets \"default\" as meaning, \"it should still work, but it's not ideal\". Accordingly, a real Tracer or Meter implementation from the SDK is used. It meets the requirements of exporters and such by using a valid instrumentation name. It meets the requirements of application developers by producing valid tracing data. It also warns library and application developers by logging at the WARN level that an invalid value has been given.\n\nThe rational for this interpretation is that things should always work for the application developer. If an app developer doesn't provide a name, they should be chided, but they are instrumenting their own app, and likely don't care about the lack of name. If an app developer incorporates a library that doesn't specify the instrumentation name, the instrumentation should still be made available to application devs, but they should be able to turn if off (hence a valid name) and be made aware of something not being right (hence the logging) so they can report it to the library maintainers.\n\nFies #1879", "committedDate": "2020-11-13T17:38:14Z", "type": "commit"}, {"oid": "5439914070c2d7c959ba67980cd59a8e7ac5e03a", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/5439914070c2d7c959ba67980cd59a8e7ac5e03a", "message": "Mark instrumentation version nullable in MeterProvider and TracerProvider\n\nThe spec dictates this to be optional, and the implementations treat it as nullable already.", "committedDate": "2020-11-13T17:38:14Z", "type": "commit"}, {"oid": "3117f9c15adedcd72dfa34c490b7734d176d5669", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/3117f9c15adedcd72dfa34c490b7734d176d5669", "message": "Remove ComponentRegistry#get(String) overload\n\nThis overload is not no longer used by our code.", "committedDate": "2020-11-13T17:38:15Z", "type": "commit"}, {"oid": "962d044eed28fe61e26b9a8a60252f0826e8bbd3", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/962d044eed28fe61e26b9a8a60252f0826e8bbd3", "message": "fixup! Mark instrumentation version nullable in MeterProvider and TracerProvider", "committedDate": "2020-11-13T17:38:15Z", "type": "commit"}, {"oid": "dd0d342084c6f8bd50827df135af820f077ec109", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/dd0d342084c6f8bd50827df135af820f077ec109", "message": "fixup! Provide a default Tracer and Meter for invalid instrumentation names", "committedDate": "2020-11-13T17:38:15Z", "type": "commit"}, {"oid": "7219ccd57c6d0bee9bbb019afe7d1719951c0854", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/7219ccd57c6d0bee9bbb019afe7d1719951c0854", "message": "fixup! Provide a default Tracer and Meter for invalid instrumentation names", "committedDate": "2020-11-13T17:38:15Z", "type": "commit"}, {"oid": "674df9d78def990651f8ab6f58a50d83b101f8f4", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/674df9d78def990651f8ab6f58a50d83b101f8f4", "message": "fixup! Remove ComponentRegistry#get(String) overload\n\nThis reverts commit db56814c", "committedDate": "2020-11-13T17:38:15Z", "type": "commit"}, {"oid": "49d2b4e7e887b21055c1575adc3318a2b0f6c84b", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/49d2b4e7e887b21055c1575adc3318a2b0f6c84b", "message": "Revert \"Mark instrumentation version nullable in MeterProvider and TracerProvider\"\n\nThis reverts commit 7e92b396", "committedDate": "2020-11-13T17:38:15Z", "type": "commit"}, {"oid": "49d2b4e7e887b21055c1575adc3318a2b0f6c84b", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/49d2b4e7e887b21055c1575adc3318a2b0f6c84b", "message": "Revert \"Mark instrumentation version nullable in MeterProvider and TracerProvider\"\n\nThis reverts commit 7e92b396", "committedDate": "2020-11-13T17:38:15Z", "type": "forcePushed"}]}