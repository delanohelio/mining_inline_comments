{"pr_number": 2413, "pr_title": "Change MetricData to expose the Point type that is expected for each data type", "pr_createdAt": "2020-12-28T18:03:04Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java/pull/2413", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDgzMTg3MA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2413#discussion_r550831870", "bodyText": "this could be replaced with a single default:", "author": "jkwatson", "createdAt": "2021-01-02T02:08:25Z", "path": "sdk/metrics/src/main/java/io/opentelemetry/sdk/metrics/aggregation/DoubleLastValueAggregation.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Copyright The OpenTelemetry Authors\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package io.opentelemetry.sdk.metrics.aggregation;\n+\n+import io.opentelemetry.api.common.Labels;\n+import io.opentelemetry.sdk.common.InstrumentationLibraryInfo;\n+import io.opentelemetry.sdk.metrics.accumulation.DoubleAccumulation;\n+import io.opentelemetry.sdk.metrics.aggregator.Aggregator;\n+import io.opentelemetry.sdk.metrics.aggregator.DoubleLastValueAggregator;\n+import io.opentelemetry.sdk.metrics.common.InstrumentDescriptor;\n+import io.opentelemetry.sdk.metrics.data.MetricData;\n+import io.opentelemetry.sdk.resources.Resource;\n+import java.util.List;\n+import java.util.Map;\n+import javax.annotation.concurrent.Immutable;\n+\n+@Immutable\n+final class DoubleLastValueAggregation extends AbstractAggregation<DoubleAccumulation> {\n+  static final DoubleLastValueAggregation INSTANCE =\n+      new DoubleLastValueAggregation(DoubleLastValueAggregator.getInstance());\n+\n+  private DoubleLastValueAggregation(Aggregator<DoubleAccumulation> aggregator) {\n+    super(aggregator);\n+  }\n+\n+  @Override\n+  public DoubleAccumulation merge(DoubleAccumulation a1, DoubleAccumulation a2) {\n+    // TODO: Define the order between accumulation.\n+    return a2;\n+  }\n+\n+  @Override\n+  public MetricData toMetricData(\n+      Resource resource,\n+      InstrumentationLibraryInfo instrumentationLibraryInfo,\n+      InstrumentDescriptor descriptor,\n+      Map<Labels, DoubleAccumulation> accumulationByLabels,\n+      long startEpochNanos,\n+      long epochNanos) {\n+    List<MetricData.DoublePoint> points =\n+        MetricDataUtils.toDoublePointList(accumulationByLabels, startEpochNanos, epochNanos);\n+\n+    switch (descriptor.getType()) {\n+      case SUM_OBSERVER:\n+        return MetricDataUtils.toDoubleSumMetricData(\n+            resource, instrumentationLibraryInfo, descriptor, points, /* isMonotonic= */ true);\n+      case UP_DOWN_SUM_OBSERVER:\n+        return MetricDataUtils.toDoubleSumMetricData(\n+            resource, instrumentationLibraryInfo, descriptor, points, /* isMonotonic= */ false);\n+      case VALUE_OBSERVER:\n+        return MetricData.createDoubleGauge(\n+            resource,\n+            instrumentationLibraryInfo,\n+            descriptor.getName(),\n+            descriptor.getDescription(),\n+            descriptor.getUnit(),\n+            MetricData.DoubleGaugeData.create(points));\n+      case COUNTER:\n+      case UP_DOWN_COUNTER:\n+      case VALUE_RECORDER:", "originalCommit": "db5bfd4917bb99667d7b104c3d0246ea661e32dc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDkwOTk3NA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2413#discussion_r550909974", "bodyText": "I tend to not do that so when we add a new option it forces me to update all switch statements and think about the implications, if I add default errorprone will not complain when adding a new value", "author": "bogdandrutu", "createdAt": "2021-01-02T18:55:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDgzMTg3MA=="}], "type": "inlineReview"}, {"oid": "204c90d5479cc9f2ca23464954e8060b9ef69056", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/204c90d5479cc9f2ca23464954e8060b9ef69056", "message": "Change MetricData to expose the Point type that is expected for each data type\n\nSigned-off-by: Bogdan Drutu <bogdandrutu@gmail.com>", "committedDate": "2021-01-03T16:17:40Z", "type": "commit"}, {"oid": "204c90d5479cc9f2ca23464954e8060b9ef69056", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/204c90d5479cc9f2ca23464954e8060b9ef69056", "message": "Change MetricData to expose the Point type that is expected for each data type\n\nSigned-off-by: Bogdan Drutu <bogdandrutu@gmail.com>", "committedDate": "2021-01-03T16:17:40Z", "type": "forcePushed"}]}