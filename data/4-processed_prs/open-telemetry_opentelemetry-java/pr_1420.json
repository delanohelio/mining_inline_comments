{"pr_number": 1420, "pr_title": "Fixed immutable list sorting bug in TraceZ zPage", "pr_createdAt": "2020-07-15T20:51:12Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java/pull/1420", "timeline": [{"oid": "00201dcd1c37e79facbb88815994e6f3fb4a506b", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/00201dcd1c37e79facbb88815994e6f3fb4a506b", "message": "Fixed immutable list sorting bug", "committedDate": "2020-07-15T20:47:26Z", "type": "commit"}, {"oid": "293bb7aa55feb73b6fee380c1cd856842cc4cd86", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/293bb7aa55feb73b6fee380c1cd856842cc4cd86", "message": "Added more test covering SpanDetails section", "committedDate": "2020-07-15T21:17:32Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQwOTAyNg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1420#discussion_r455409026", "bodyText": "you can pull this sort call up one level, right? Since it's the same in both the if and the else branches?", "author": "jkwatson", "createdAt": "2020-07-15T22:49:42Z", "path": "sdk_extensions/zpages/src/main/java/io/opentelemetry/sdk/extensions/zpages/TracezZPageHandler.java", "diffHunk": "@@ -486,18 +486,19 @@ private void emitHtmlBody(Map<String, String> queryMap, PrintStream out)\n               // Display latency based span\n               LatencyBoundary latencyBoundary = LatencyBoundary.values()[subtype];\n               spans =\n-                  dataAggregator.getOkSpans(\n-                      spanName,\n-                      latencyBoundary.getLatencyLowerBound(),\n-                      latencyBoundary.getLatencyUpperBound());\n+                  new ArrayList<>(\n+                      dataAggregator.getOkSpans(\n+                          spanName,\n+                          latencyBoundary.getLatencyLowerBound(),\n+                          latencyBoundary.getLatencyUpperBound()));\n               Collections.sort(spans, new SpanDataComparator(/* incremental= */ false));\n             } else {\n               if (subtype < 0 || subtype >= CanonicalCode.values().length) {\n                 // N/A or out-of-bound cueck for error based subtype, valid values: [0, 15]\n                 return;\n               }\n               // Display error based span\n-              spans = dataAggregator.getErrorSpans(spanName);\n+              spans = new ArrayList<>(dataAggregator.getErrorSpans(spanName));\n               Collections.sort(spans, new SpanDataComparator(/* incremental= */ false));", "originalCommit": "293bb7aa55feb73b6fee380c1cd856842cc4cd86", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQyMTc1MA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1420#discussion_r455421750", "bodyText": "Hmm yes, I think originally it's meant for sorting in a different order, but now it's all the same, I'll pull them out", "author": "wtyanan", "createdAt": "2020-07-15T23:27:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQwOTAyNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQyNzY1NQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1420#discussion_r455427655", "bodyText": "We may as well stick with immutable ImmutableList.sortedCopyOf. I guess one problem was that we didn't go \"all-in\" on ImmutableList, if we did then issues like sorting a collection become more obviously a bug. Let's try to keep the standard in this code that all the containers are immutable.", "author": "anuraaga", "createdAt": "2020-07-15T23:45:31Z", "path": "sdk_extensions/zpages/src/main/java/io/opentelemetry/sdk/extensions/zpages/TracezZPageHandler.java", "diffHunk": "@@ -486,18 +486,19 @@ private void emitHtmlBody(Map<String, String> queryMap, PrintStream out)\n               // Display latency based span\n               LatencyBoundary latencyBoundary = LatencyBoundary.values()[subtype];\n               spans =\n-                  dataAggregator.getOkSpans(\n-                      spanName,\n-                      latencyBoundary.getLatencyLowerBound(),\n-                      latencyBoundary.getLatencyUpperBound());\n+                  new ArrayList<>(", "originalCommit": "293bb7aa55feb73b6fee380c1cd856842cc4cd86", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQ0MzM2MA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1420#discussion_r455443360", "bodyText": "So instead of new ArrayList<>(), I should use ImmutableList.sortedCopyOf?", "author": "wtyanan", "createdAt": "2020-07-16T00:39:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQyNzY1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQ0NTQ0Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1420#discussion_r455445442", "bodyText": "Yeah", "author": "anuraaga", "createdAt": "2020-07-16T00:46:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQyNzY1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQ0ODI1OA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1420#discussion_r455448258", "bodyText": "I will remove new ArrayList<>() and instead of Collections.sort, I will do spans = ImmutableList.sortedCopyOf(comparator, spans). Is this a reasonable approach as well?", "author": "wtyanan", "createdAt": "2020-07-16T00:57:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQyNzY1NQ=="}], "type": "inlineReview"}, {"oid": "2a25e0e14a7fa55eec76f7332236e57b8258c956", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/2a25e0e14a7fa55eec76f7332236e57b8258c956", "message": "Used ImmutableList.sortedCopyOf instead of ArrayList, added a test for unknown ztype", "committedDate": "2020-07-16T04:11:10Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTUzNzE3OA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1420#discussion_r455537178", "bodyText": "Not a big deal but it's a bit less verbose to use ImmutableMap.of, it's very close in feeling to a map literal.", "author": "anuraaga", "createdAt": "2020-07-16T06:26:25Z", "path": "sdk_extensions/zpages/src/test/java/io/opentelemetry/sdk/extensions/zpages/TracezZPageHandlerTest.java", "diffHunk": "@@ -274,18 +274,94 @@ public void summaryTable_linkForErrorSpans() {\n   }\n \n   @Test\n-  public void spanDetails_emitSpanNameCorrectly() {\n+  public void spanDetails_emitRunningSpanDetailsCorrectly() {\n+    OutputStream output = new ByteArrayOutputStream();\n+    Map<String, String> queryMap = new HashMap<String, String>();\n+    Span runningSpan = tracer.spanBuilder(RUNNING_SPAN).startSpan();\n+\n+    queryMap.put(\"zspanname\", RUNNING_SPAN);", "originalCommit": "2a25e0e14a7fa55eec76f7332236e57b8258c956", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "15d5d18bd7cd332cfb31a3b4ee66e3c2a19774e8", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/15d5d18bd7cd332cfb31a3b4ee66e3c2a19774e8", "message": "Switched to immutableMap and immutableList", "committedDate": "2020-07-16T14:02:39Z", "type": "commit"}]}