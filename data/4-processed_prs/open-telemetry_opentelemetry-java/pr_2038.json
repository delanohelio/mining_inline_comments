{"pr_number": 2038, "pr_title": "1911 b3 propagator debug flag", "pr_createdAt": "2020-11-06T21:09:41Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java/pull/2038", "timeline": [{"oid": "b36ba7a64ca7482a029d2cb6b48ba37a6bb328af", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/b36ba7a64ca7482a029d2cb6b48ba37a6bb328af", "message": "b3 propagator supports inject/extract of debug flag", "committedDate": "2020-11-05T22:31:39Z", "type": "commit"}, {"oid": "bcfea35ec117694e2ed4f158a69907ba99576850", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/bcfea35ec117694e2ed4f158a69907ba99576850", "message": "rebase with master", "committedDate": "2020-11-05T22:54:54Z", "type": "commit"}, {"oid": "52ba177d2fa869baa501ec2025d842512cf27e2a", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/52ba177d2fa869baa501ec2025d842512cf27e2a", "message": "rename context key", "committedDate": "2020-11-06T20:58:13Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTI4ODQ5Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2038#discussion_r519288493", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              static final String DEBUG_CONTEXT_KEY = \"b3-debug\";\n          \n          \n            \n              static final ContextKey<String> DEBUG_CONTEXT = ContextKey.named(B3Propagator.DEBUG_CONTEXT_KEY);\n          \n          \n            \n              static final ContextKey<String> DEBUG_CONTEXT_KEY = ContextKey.named(\"b3-debug);\n          \n      \n    \n    \n  \n\nThe string form isn't really used, and it's the ContextKey that is actually the context key :)", "author": "anuraaga", "createdAt": "2020-11-08T08:20:23Z", "path": "extensions/trace-propagators/src/main/java/io/opentelemetry/extension/trace/propagation/B3Propagator.java", "diffHunk": "@@ -49,12 +50,16 @@\n   static final String TRACE_ID_HEADER = \"X-B3-TraceId\";\n   static final String SPAN_ID_HEADER = \"X-B3-SpanId\";\n   static final String SAMPLED_HEADER = \"X-B3-Sampled\";\n+  static final String DEBUG_HEADER = \"X-B3-Flags\";\n   static final String COMBINED_HEADER = \"b3\";\n   static final String COMBINED_HEADER_DELIMITER = \"-\";\n+  static final String DEBUG_CONTEXT_KEY = \"b3-debug\";\n+  static final ContextKey<String> DEBUG_CONTEXT = ContextKey.named(B3Propagator.DEBUG_CONTEXT_KEY);", "originalCommit": "52ba177d2fa869baa501ec2025d842512cf27e2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTI4ODgwMQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2038#discussion_r519288801", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                if (!StringUtils.isNullOrEmpty(debug) && debug.contentEquals(Common.TRUE_INT)) {\n          \n          \n            \n                if (Common.TRUE_INT.equals(debug)) {\n          \n      \n    \n    \n  \n\nthroughout PR. Empty check is redundant, and it's always String, not CharSequence so can use equals.", "author": "anuraaga", "createdAt": "2020-11-08T08:21:19Z", "path": "extensions/trace-propagators/src/main/java/io/opentelemetry/extension/trace/propagation/B3PropagatorExtractorMultipleHeaders.java", "diffHunk": "@@ -28,33 +28,38 @@\n       Context context, C carrier, TextMapPropagator.Getter<C> getter) {\n     Objects.requireNonNull(carrier, \"carrier\");\n     Objects.requireNonNull(getter, \"getter\");\n-    SpanContext spanContext = getSpanContextFromMultipleHeaders(carrier, getter);\n-    if (!spanContext.isValid()) {\n-      return Optional.empty();\n-    }\n-\n-    return Optional.of(context.with(Span.wrap(spanContext)));\n+    return extractSpanContextFromMultipleHeaders(context, carrier, getter);\n   }\n \n-  private static <C> SpanContext getSpanContextFromMultipleHeaders(\n-      C carrier, TextMapPropagator.Getter<C> getter) {\n+  private static <C> Optional<Context> extractSpanContextFromMultipleHeaders(\n+      Context context, C carrier, TextMapPropagator.Getter<C> getter) {\n     String traceId = getter.get(carrier, TRACE_ID_HEADER);\n     if (StringUtils.isNullOrEmpty(traceId)) {\n-      return SpanContext.getInvalid();\n+      return Optional.empty();\n     }\n     if (!Common.isTraceIdValid(traceId)) {\n       logger.fine(\n           \"Invalid TraceId in B3 header: \" + traceId + \"'. Returning INVALID span context.\");\n-      return SpanContext.getInvalid();\n+      return Optional.empty();\n     }\n \n     String spanId = getter.get(carrier, SPAN_ID_HEADER);\n     if (!Common.isSpanIdValid(spanId)) {\n       logger.fine(\"Invalid SpanId in B3 header: \" + spanId + \"'. Returning INVALID span context.\");\n-      return SpanContext.getInvalid();\n+      return Optional.empty();\n+    }\n+\n+    // if debug flag is set, then set sampled flag, and also store the B3 debug flag in the context\n+    // for onward use by B3 injector\n+    String debug = getter.get(carrier, DEBUG_HEADER);\n+    if (!StringUtils.isNullOrEmpty(debug) && debug.contentEquals(Common.TRUE_INT)) {", "originalCommit": "52ba177d2fa869baa501ec2025d842512cf27e2a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTQ3NzI5OA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2038#discussion_r519477298", "bodyText": "tidied this up", "author": "jarebudev", "createdAt": "2020-11-08T21:07:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTI4ODgwMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTI4OTk4Nw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2038#discussion_r519289987", "bodyText": "In some cases we pass debug, others Common.TRUE_INT - I'd pass Common.TRUE_INT everywhere", "author": "anuraaga", "createdAt": "2020-11-08T08:24:15Z", "path": "extensions/trace-propagators/src/main/java/io/opentelemetry/extension/trace/propagation/B3PropagatorExtractorMultipleHeaders.java", "diffHunk": "@@ -28,33 +28,38 @@\n       Context context, C carrier, TextMapPropagator.Getter<C> getter) {\n     Objects.requireNonNull(carrier, \"carrier\");\n     Objects.requireNonNull(getter, \"getter\");\n-    SpanContext spanContext = getSpanContextFromMultipleHeaders(carrier, getter);\n-    if (!spanContext.isValid()) {\n-      return Optional.empty();\n-    }\n-\n-    return Optional.of(context.with(Span.wrap(spanContext)));\n+    return extractSpanContextFromMultipleHeaders(context, carrier, getter);\n   }\n \n-  private static <C> SpanContext getSpanContextFromMultipleHeaders(\n-      C carrier, TextMapPropagator.Getter<C> getter) {\n+  private static <C> Optional<Context> extractSpanContextFromMultipleHeaders(\n+      Context context, C carrier, TextMapPropagator.Getter<C> getter) {\n     String traceId = getter.get(carrier, TRACE_ID_HEADER);\n     if (StringUtils.isNullOrEmpty(traceId)) {\n-      return SpanContext.getInvalid();\n+      return Optional.empty();\n     }\n     if (!Common.isTraceIdValid(traceId)) {\n       logger.fine(\n           \"Invalid TraceId in B3 header: \" + traceId + \"'. Returning INVALID span context.\");\n-      return SpanContext.getInvalid();\n+      return Optional.empty();\n     }\n \n     String spanId = getter.get(carrier, SPAN_ID_HEADER);\n     if (!Common.isSpanIdValid(spanId)) {\n       logger.fine(\"Invalid SpanId in B3 header: \" + spanId + \"'. Returning INVALID span context.\");\n-      return SpanContext.getInvalid();\n+      return Optional.empty();\n+    }\n+\n+    // if debug flag is set, then set sampled flag, and also store the B3 debug flag in the context\n+    // for onward use by B3 injector\n+    String debug = getter.get(carrier, DEBUG_HEADER);\n+    if (!StringUtils.isNullOrEmpty(debug) && debug.contentEquals(Common.TRUE_INT)) {\n+      return Optional.of(\n+          context\n+              .with(B3Propagator.DEBUG_CONTEXT, debug)\n+              .with(Span.wrap(Common.buildSpanContext(traceId, spanId, debug))));", "originalCommit": "52ba177d2fa869baa501ec2025d842512cf27e2a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTQ3NzMxNg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2038#discussion_r519477316", "bodyText": "done", "author": "jarebudev", "createdAt": "2020-11-08T21:08:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTI4OTk4Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTI5MDk5Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2038#discussion_r519290992", "bodyText": "I believe we're missing two test cases for when both sampled and debug are set. Especially sampled = false and debug = true is important.", "author": "anuraaga", "createdAt": "2020-11-08T08:26:45Z", "path": "extensions/trace-propagators/src/test/java/io/opentelemetry/extension/trace/propagation/B3PropagatorTest.java", "diffHunk": "@@ -599,4 +600,62 @@ void extract_emptyCarrier() {\n     assertThat(getSpanContext(b3Propagator.extract(Context.current(), emptyHeaders, getter)))\n         .isEqualTo(SpanContext.getInvalid());\n   }\n+\n+  @Test\n+  void extract_DebugContext_SingleHeader() {\n+    Map<String, String> carrier = new LinkedHashMap<>();\n+    carrier.put(B3Propagator.COMBINED_HEADER, TRACE_ID + \"-\" + SPAN_ID + \"-\" + \"d\");\n+\n+    Context context = b3Propagator.extract(Context.current(), carrier, getter);\n+    assertThat(getSpanContext(context))\n+        .isEqualTo(\n+            SpanContext.createFromRemoteParent(\n+                TRACE_ID, SPAN_ID, SAMPLED_TRACE_OPTIONS, TRACE_STATE_DEFAULT));\n+    assertThat(context.get(DEBUG_CONTEXT)).isEqualTo(Common.TRUE_INT);\n+  }\n+\n+  @Test\n+  void extract_DebugContext_MultipleHeaders() {\n+    Map<String, String> carrier = new LinkedHashMap<>();\n+    carrier.put(B3Propagator.TRACE_ID_HEADER, TRACE_ID);\n+    carrier.put(B3Propagator.SPAN_ID_HEADER, SPAN_ID);\n+    carrier.put(B3Propagator.DEBUG_HEADER, Common.TRUE_INT);", "originalCommit": "52ba177d2fa869baa501ec2025d842512cf27e2a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTQ3NzI1Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2038#discussion_r519477256", "bodyText": "added", "author": "jarebudev", "createdAt": "2020-11-08T21:07:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTI5MDk5Mg=="}], "type": "inlineReview"}, {"oid": "37a522cee8bdfd51439373f37cea1910e64d52a6", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/37a522cee8bdfd51439373f37cea1910e64d52a6", "message": "Update extensions/trace-propagators/src/main/java/io/opentelemetry/extension/trace/propagation/B3Propagator.java\n\nCo-authored-by: Anuraag Agrawal <anuraaga@gmail.com>", "committedDate": "2020-11-08T20:22:28Z", "type": "commit"}, {"oid": "a730fdb34829175f2248078ffbefb49e74ddb352", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/a730fdb34829175f2248078ffbefb49e74ddb352", "message": "changes as per code review comments", "committedDate": "2020-11-08T21:06:41Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA2NDQ2OA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2038#discussion_r520064468", "bodyText": "We should use the constant defined in the B3Propagator class here", "author": "jkwatson", "createdAt": "2020-11-09T19:25:22Z", "path": "extensions/trace-propagators/src/main/java/io/opentelemetry/extension/trace/propagation/B3PropagatorExtractorSingleHeader.java", "diffHunk": "@@ -50,25 +44,34 @@\n     if (parts.length < 2 || parts.length > 4) {\n       logger.fine(\n           \"Invalid combined header '\" + COMBINED_HEADER + \". Returning INVALID span context.\");\n-      return SpanContext.getInvalid();\n+      return Optional.empty();\n     }\n \n     String traceId = parts[0];\n     if (!Common.isTraceIdValid(traceId)) {\n       logger.fine(\n           \"Invalid TraceId in B3 header: \" + COMBINED_HEADER + \". Returning INVALID span context.\");\n-      return SpanContext.getInvalid();\n+      return Optional.empty();\n     }\n \n     String spanId = parts[1];\n     if (!Common.isSpanIdValid(spanId)) {\n       logger.fine(\n           \"Invalid SpanId in B3 header: \" + COMBINED_HEADER + \". Returning INVALID span context.\");\n-      return SpanContext.getInvalid();\n+      return Optional.empty();\n     }\n \n     String sampled = parts.length >= 3 ? parts[2] : null;\n \n-    return Common.buildSpanContext(traceId, spanId, sampled);\n+    // if sampled is marked as 'd'ebug, then set sampled flag, and also store the B3 debug flag in\n+    // the context for onward use by the B3 injector\n+    if (sampled != null && sampled.equals(\"d\")) {", "originalCommit": "a730fdb34829175f2248078ffbefb49e74ddb352", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA3MTE2Nw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2038#discussion_r520071167", "bodyText": "And, if you flip the .equals, you can skip the null check as well.", "author": "jkwatson", "createdAt": "2020-11-09T19:37:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA2NDQ2OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA2NjQ1NA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2038#discussion_r520066454", "bodyText": "Shouldn't this be comparing to B3Propagator.DEBUG_SAMPLED, since we're extracting it from the incoming request?", "author": "jkwatson", "createdAt": "2020-11-09T19:28:48Z", "path": "extensions/trace-propagators/src/main/java/io/opentelemetry/extension/trace/propagation/B3PropagatorExtractorMultipleHeaders.java", "diffHunk": "@@ -28,33 +28,37 @@\n       Context context, C carrier, TextMapPropagator.Getter<C> getter) {\n     Objects.requireNonNull(carrier, \"carrier\");\n     Objects.requireNonNull(getter, \"getter\");\n-    SpanContext spanContext = getSpanContextFromMultipleHeaders(carrier, getter);\n-    if (!spanContext.isValid()) {\n-      return Optional.empty();\n-    }\n-\n-    return Optional.of(context.with(Span.wrap(spanContext)));\n+    return extractSpanContextFromMultipleHeaders(context, carrier, getter);\n   }\n \n-  private static <C> SpanContext getSpanContextFromMultipleHeaders(\n-      C carrier, TextMapPropagator.Getter<C> getter) {\n+  private static <C> Optional<Context> extractSpanContextFromMultipleHeaders(\n+      Context context, C carrier, TextMapPropagator.Getter<C> getter) {\n     String traceId = getter.get(carrier, TRACE_ID_HEADER);\n     if (StringUtils.isNullOrEmpty(traceId)) {\n-      return SpanContext.getInvalid();\n+      return Optional.empty();\n     }\n     if (!Common.isTraceIdValid(traceId)) {\n       logger.fine(\n           \"Invalid TraceId in B3 header: \" + traceId + \"'. Returning INVALID span context.\");\n-      return SpanContext.getInvalid();\n+      return Optional.empty();\n     }\n \n     String spanId = getter.get(carrier, SPAN_ID_HEADER);\n     if (!Common.isSpanIdValid(spanId)) {\n       logger.fine(\"Invalid SpanId in B3 header: \" + spanId + \"'. Returning INVALID span context.\");\n-      return SpanContext.getInvalid();\n+      return Optional.empty();\n+    }\n+\n+    // if debug flag is set, then set sampled flag, and also store the B3 debug flag in the context\n+    // for onward use by B3 injector\n+    if (Common.TRUE_INT.equals(getter.get(carrier, DEBUG_HEADER))) {", "originalCommit": "a730fdb34829175f2248078ffbefb49e74ddb352", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA2ODQ5Nw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2038#discussion_r520068497", "bodyText": "er wait. that's \"d\" where as the format specifies a \"1\" for the debug flag. What is the \"d\" for?", "author": "jkwatson", "createdAt": "2020-11-09T19:32:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA2NjQ1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA3MDUzNw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2038#discussion_r520070537", "bodyText": "I got it. \"d\" is used for single-header and \"1\" is used for multi-header. I recommend not using the Common constant here, but putting a separate constant in the B3Propagator class for B3 multi-header in particular.", "author": "jkwatson", "createdAt": "2020-11-09T19:36:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA2NjQ1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDE3MDk0OA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2038#discussion_r520170948", "bodyText": "Sure, what I've done is add a couple of constants in B3Propagator which should hopefully make this clearer\n  static final String MULTI_HEADER_DEBUG = \"1\";\n  static final String SINGLE_HEADER_DEBUG = \"d\";", "author": "jarebudev", "createdAt": "2020-11-09T22:49:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA2NjQ1NA=="}], "type": "inlineReview"}, {"oid": "e7ce0aec45d16016329b392b724263aa709db2ed", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/e7ce0aec45d16016329b392b724263aa709db2ed", "message": "added constants for b3propagator debug propagation", "committedDate": "2020-11-09T22:52:06Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDIxMjU4NQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2038#discussion_r520212585", "bodyText": "Should we use the new constant here, MULTI_HEADER_DEBUG?", "author": "anuraaga", "createdAt": "2020-11-10T00:43:38Z", "path": "extensions/trace-propagators/src/main/java/io/opentelemetry/extension/trace/propagation/B3PropagatorInjectorMultipleHeaders.java", "diffHunk": "@@ -26,6 +26,12 @@\n \n     String sampled = spanContext.isSampled() ? Common.TRUE_INT : Common.FALSE_INT;\n \n+    String debug = context.get(B3Propagator.DEBUG_CONTEXT_KEY);\n+    if (!StringUtils.isNullOrEmpty(debug) && debug.contentEquals(Common.TRUE_INT)) {\n+      setter.set(carrier, B3Propagator.DEBUG_HEADER, Common.TRUE_INT);", "originalCommit": "e7ce0aec45d16016329b392b724263aa709db2ed", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDg2NjA5OA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2038#discussion_r520866098", "bodyText": "yeh, have changed it/tidied it up.", "author": "jarebudev", "createdAt": "2020-11-10T20:51:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDIxMjU4NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDIxMjcxMQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2038#discussion_r520212711", "bodyText": "Common.TRUE_INT.equals(debug) for this and next file I think", "author": "anuraaga", "createdAt": "2020-11-10T00:44:06Z", "path": "extensions/trace-propagators/src/main/java/io/opentelemetry/extension/trace/propagation/B3PropagatorInjectorMultipleHeaders.java", "diffHunk": "@@ -26,6 +26,12 @@\n \n     String sampled = spanContext.isSampled() ? Common.TRUE_INT : Common.FALSE_INT;\n \n+    String debug = context.get(B3Propagator.DEBUG_CONTEXT_KEY);\n+    if (!StringUtils.isNullOrEmpty(debug) && debug.contentEquals(Common.TRUE_INT)) {", "originalCommit": "e7ce0aec45d16016329b392b724263aa709db2ed", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "205102c41d7eac38794c0d72e2852f21c7950ad4", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/205102c41d7eac38794c0d72e2852f21c7950ad4", "message": "tidy up", "committedDate": "2020-11-10T20:48:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDg5MDk1OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2038#discussion_r520890959", "bodyText": "Hm. In this case, aren't we putting Common.TRUE_INT into the context, not B3Propagator.MULTI_HEADER_DEBUG? They might happen to have the same value at the moment, but I don't think we should confuse the constant from the wire protocol with the constant that we're using internally for propagation.", "author": "jkwatson", "createdAt": "2020-11-10T21:40:01Z", "path": "extensions/trace-propagators/src/main/java/io/opentelemetry/extension/trace/propagation/B3PropagatorInjectorMultipleHeaders.java", "diffHunk": "@@ -26,6 +26,11 @@\n \n     String sampled = spanContext.isSampled() ? Common.TRUE_INT : Common.FALSE_INT;\n \n+    if (B3Propagator.MULTI_HEADER_DEBUG.equals(context.get(B3Propagator.DEBUG_CONTEXT_KEY))) {", "originalCommit": "205102c41d7eac38794c0d72e2852f21c7950ad4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTA5ODQxNw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2038#discussion_r521098417", "bodyText": "Ah good point - whether the b3 debug was enabled or not is sort of independent of how it was actually modeled in the header, and it might be converted from single to multiple, or vice versa. @jarebudev How about just using a Boolean context value for this?", "author": "anuraaga", "createdAt": "2020-11-11T04:02:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDg5MDk1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY2NTgzMA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2038#discussion_r521665830", "bodyText": "Yeh makes sense. I've changed it to set a boolean, hopefully this sorts it!", "author": "jarebudev", "createdAt": "2020-11-11T22:04:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDg5MDk1OQ=="}], "type": "inlineReview"}, {"oid": "520b7b03dab0a1aedeb9f049ff56bb164e1ae8a5", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/520b7b03dab0a1aedeb9f049ff56bb164e1ae8a5", "message": "changed b3 propagator to store a boolean in context", "committedDate": "2020-11-11T21:56:06Z", "type": "commit"}]}