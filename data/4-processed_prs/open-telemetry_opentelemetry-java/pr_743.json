{"pr_number": 743, "pr_title": "Add AWS support to SDK", "pr_createdAt": "2020-01-09T23:35:20Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java/pull/743", "timeline": [{"oid": "b5f2b655470fd8a602614982d33c95e2839fb2dc", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/b5f2b655470fd8a602614982d33c95e2839fb2dc", "message": "Initial dev of XRay ids generator", "committedDate": "2020-01-07T22:59:17Z", "type": "commit"}, {"oid": "e39200179b33c3deca0c4bae2fbee089dfceccf5", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/e39200179b33c3deca0c4bae2fbee089dfceccf5", "message": "Initial dev of EC2 resource labels retrieval and population", "committedDate": "2020-01-08T15:52:29Z", "type": "commit"}, {"oid": "161c11712f94d1eadf28a774bfddd8e58aae3922", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/161c11712f94d1eadf28a774bfddd8e58aae3922", "message": "Merge branch 'master' into add-aws-support", "committedDate": "2020-01-09T23:30:33Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTAxMzcwMA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/743#discussion_r365013700", "bodyText": "will any of this need to change for the AWS 2.x SDK? If so, we might want to label this as a 1.x version in the module and description.", "author": "jkwatson", "createdAt": "2020-01-09T23:42:52Z", "path": "sdk_contrib/aws_support/build.gradle", "diffHunk": "@@ -0,0 +1,19 @@\n+description = 'OpenTelemetry SDK AWS Support'\n+\n+sourceCompatibility = 1.8\n+targetCompatibility = 1.8\n+\n+dependencies {\n+    api project(':opentelemetry-api'),\n+            project(':opentelemetry-sdk')\n+\n+    implementation libraries.guava,\n+            libraries.disruptor\n+\n+    implementation 'com.amazonaws:aws-xray-recorder-sdk-core:2.4.0'\n+    implementation 'com.amazonaws:aws-java-sdk-core:1.11.701'", "originalCommit": "161c11712f94d1eadf28a774bfddd8e58aae3922", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTI1NTY1NA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/743#discussion_r365255654", "bodyText": "Package names are completely different in the v2 SDK. I did some renaming so the AWS SDK which is being used is emphasized.", "author": "kbrockhoff", "createdAt": "2020-01-10T14:22:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTAxMzcwMA=="}], "type": "inlineReview"}, {"oid": "00f1b4609ca9d7161b808eef94276e1ca547764b", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/00f1b4609ca9d7161b808eef94276e1ca547764b", "message": "renamed module to emphasize it uses v1 of AWS SDK", "committedDate": "2020-01-10T14:12:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTI5Njc0MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/743#discussion_r365296741", "bodyText": "Why this dependency?", "author": "bogdandrutu", "createdAt": "2020-01-10T15:44:12Z", "path": "sdk_contrib/aws_v1_support/build.gradle", "diffHunk": "@@ -0,0 +1,19 @@\n+description = 'OpenTelemetry SDK AWS SDK v1.x Support'\n+\n+sourceCompatibility = 1.8\n+targetCompatibility = 1.8\n+\n+dependencies {\n+    api project(':opentelemetry-api'),\n+            project(':opentelemetry-sdk')\n+\n+    implementation libraries.guava,\n+            libraries.disruptor", "originalCommit": "00f1b4609ca9d7161b808eef94276e1ca547764b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTMxNzk5NA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/743#discussion_r365317994", "bodyText": "Just as a follow-on, we have this dependency in the SDK right now, as well, and it should probably be removed, until we actually want to change the implementation of the SpanProcessors to use it (if we ever want to).", "author": "jkwatson", "createdAt": "2020-01-10T16:26:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTI5Njc0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTM5NDIwMA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/743#discussion_r365394200", "bodyText": "do we? I don't see that. https://github.com/open-telemetry/opentelemetry-java/blob/master/sdk/build.gradle", "author": "bogdandrutu", "createdAt": "2020-01-10T19:27:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTI5Njc0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTM5NTA5OA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/743#discussion_r365395098", "bodyText": "https://github.com/open-telemetry/opentelemetry-java/blob/master/build.gradle#L120", "author": "jkwatson", "createdAt": "2020-01-10T19:29:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTI5Njc0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTM5NTIyNg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/743#discussion_r365395226", "bodyText": "not the SDK, sorry..the root of the project.", "author": "jkwatson", "createdAt": "2020-01-10T19:29:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTI5Njc0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTM5NzEwOA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/743#discussion_r365397108", "bodyText": "That's where we define the dependency but it needs to be added to the api/implementation to become a real dependency for the artifact. We use it in the async_span_processor artifact.", "author": "bogdandrutu", "createdAt": "2020-01-10T19:34:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTI5Njc0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQwOTM4Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/743#discussion_r365409383", "bodyText": "that's fair. just seems weird to declare it here, when it's only used in one sub-module.", "author": "jkwatson", "createdAt": "2020-01-10T20:05:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTI5Njc0MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTI5ODE0OA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/743#discussion_r365298148", "bodyText": "This seems to me that you always generate the same traceid, please comment and explain if I understand wrong.\nMaybe consider a different PR for id generator and ec2 resource.", "author": "bogdandrutu", "createdAt": "2020-01-10T15:46:50Z", "path": "sdk_contrib/aws_v1_support/src/main/java/io/opentelemetry/sdk/contrib/trace/aws/AwsXRayIdsGenerator.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.contrib.trace.aws;\n+\n+import com.amazonaws.xray.ThreadLocalStorage;\n+import com.amazonaws.xray.entities.TraceID;\n+import io.opentelemetry.sdk.trace.IdsGenerator;\n+import io.opentelemetry.trace.SpanId;\n+import io.opentelemetry.trace.TraceId;\n+\n+/**\n+ * Generates tracing ids compatible with the AWS X-Ray tracing service. In the X-Ray system the\n+ * first 32 bits of the trace id are the Unix epoch time in secords. Spans (AWS calls them segments)\n+ * submit with trace id timestamps outside of the last 30 days are rejected.\n+ *\n+ * @see <a\n+ *     href=\"https://docs.aws.amazon.com/xray/latest/devguide/xray-api-sendingdata.html#xray-api-traceids\">Generating\n+ *     Trace IDs</a>\n+ */\n+public class AwsXRayIdsGenerator implements IdsGenerator {\n+\n+  @Override\n+  public SpanId generateSpanId() {\n+    String awsIdStr = generateId();\n+    return SpanId.fromLowerBase16(awsIdStr, 0);\n+  }\n+\n+  @Override\n+  public TraceId generateTraceId() {\n+    String traceIdStr = new TraceID().toString();", "originalCommit": "00f1b4609ca9d7161b808eef94276e1ca547764b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTM4NTgzMw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/743#discussion_r365385833", "bodyText": "It will be a new trace id each time. This is the constructor code.\npublic TraceID() {\nthis(Instant.now().getEpochSecond());\n}\npublic TraceID(long startTime) {\n    number = new BigInteger(96, ThreadLocalStorage.getRandom());\n    this.startTime = startTime;\n}", "author": "kbrockhoff", "createdAt": "2020-01-10T19:06:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTI5ODE0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTM5MzQxNA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/743#discussion_r365393414", "bodyText": "ahhhh, that is the instance from aws :( can we use the full qualified name (including package) when we use that instance to make the code more readable?", "author": "bogdandrutu", "createdAt": "2020-01-10T19:25:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTI5ODE0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQyNTY1MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/743#discussion_r365425651", "bodyText": "Changed", "author": "kbrockhoff", "createdAt": "2020-01-10T20:52:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTI5ODE0OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTI5OTI2NQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/743#discussion_r365299265", "bodyText": "why public?", "author": "bogdandrutu", "createdAt": "2020-01-10T15:48:55Z", "path": "sdk_contrib/aws_v1_support/src/main/java/io/opentelemetry/sdk/contrib/trace/aws/Ec2Resource.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.contrib.trace.aws;\n+\n+import static com.google.common.base.Strings.isNullOrEmpty;\n+\n+import com.amazonaws.util.EC2MetadataUtils;\n+import com.amazonaws.util.EC2MetadataUtils.InstanceInfo;\n+import io.opentelemetry.sdk.resources.Resource;\n+import io.opentelemetry.sdk.resources.ResourceConstants;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/** Provides for lookup and population of {@link Resource} labels when running on AWS EC2. */\n+public class Ec2Resource {\n+\n+  /** OpenTelemetry semantic convention identifier for AWS cloud. */\n+  public static final String CLOUD_PROVIDER_AWS = \"aws\";", "originalCommit": "00f1b4609ca9d7161b808eef94276e1ca547764b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQyNTcwNA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/743#discussion_r365425704", "bodyText": "Changed", "author": "kbrockhoff", "createdAt": "2020-01-10T20:52:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTI5OTI2NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTMwMTIwMg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/743#discussion_r365301202", "bodyText": "split refactor this class:\npublic static Resource getResource() {\n  return getResourceFromInfoAndHost(EC2MetadataUtils.getInstanceInfo(),  EC2MetadataUtils.getLocalHostName());\n}\n\n// This can be tested now with a fake info and host.\nstatic Resource getResourceFromInfoAndHost(@Nullable InstanceInfo info, @Nullable String hostname) {\n    Map<String, String> labels = new HashMap<>();\n    labels.put(ResourceConstants.CLOUD_PROVIDER, CLOUD_PROVIDER_AWS);\n    if (info != null) {\n      labels.put(ResourceConstants.CLOUD_ACCOUNT, info.getAccountId());\n      labels.put(ResourceConstants.CLOUD_REGION, info.getRegion());\n      labels.put(ResourceConstants.CLOUD_ZONE, info.getAvailabilityZone());\n      labels.put(ResourceConstants.HOST_ID, info.getInstanceId());\n      labels.put(ResourceConstants.HOST_NAME, info.getPrivateIp());\n      labels.put(ResourceConstants.HOST_TYPE, info.getInstanceType());\n    }\n    if (!isNullOrEmpty(hostname)) {\n      labels.put(ResourceConstants.HOST_HOSTNAME, hostname);\n    }\n    return Resource.create(labels);\n}", "author": "bogdandrutu", "createdAt": "2020-01-10T15:52:24Z", "path": "sdk_contrib/aws_v1_support/src/main/java/io/opentelemetry/sdk/contrib/trace/aws/Ec2Resource.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.contrib.trace.aws;\n+\n+import static com.google.common.base.Strings.isNullOrEmpty;\n+\n+import com.amazonaws.util.EC2MetadataUtils;\n+import com.amazonaws.util.EC2MetadataUtils.InstanceInfo;\n+import io.opentelemetry.sdk.resources.Resource;\n+import io.opentelemetry.sdk.resources.ResourceConstants;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/** Provides for lookup and population of {@link Resource} labels when running on AWS EC2. */\n+public class Ec2Resource {\n+\n+  /** OpenTelemetry semantic convention identifier for AWS cloud. */\n+  public static final String CLOUD_PROVIDER_AWS = \"aws\";\n+\n+  /**\n+   * Returns a resource with all host and cloud labels populated with the information obtained from\n+   * the EC2 metadata endpoint.\n+   *\n+   * @return the resource\n+   */\n+  public static Resource getResource() {\n+    Map<String, String> labels = new HashMap<>();\n+    labels.put(ResourceConstants.CLOUD_PROVIDER, CLOUD_PROVIDER_AWS);\n+    addEc2InstanceData(labels);\n+    return Resource.create(labels);\n+  }\n+\n+  private static void addEc2InstanceData(Map<String, String> labels) {", "originalCommit": "00f1b4609ca9d7161b808eef94276e1ca547764b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQyNTc1Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/743#discussion_r365425753", "bodyText": "Changed", "author": "kbrockhoff", "createdAt": "2020-01-10T20:53:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTMwMTIwMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTM0ODQ4NQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/743#discussion_r365348485", "bodyText": "can we add an assertion about the label key that was supplied?", "author": "jkwatson", "createdAt": "2020-01-10T17:34:11Z", "path": "sdk_contrib/aws_v1_support/src/test/java/io/opentelemetry/sdk/contrib/trace/aws/Ec2ResourceTest.java", "diffHunk": "@@ -0,0 +1,31 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.contrib.trace.aws;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+import io.opentelemetry.sdk.resources.Resource;\n+import org.junit.Test;\n+\n+public class Ec2ResourceTest {\n+\n+  @Test\n+  public void shouldReturnResourceWithOnlyCloudProviderLabelIfNotRunningOnEc2() {\n+    Resource resource = Ec2Resource.getResource();\n+    assertEquals(1, resource.getLabels().size());", "originalCommit": "00f1b4609ca9d7161b808eef94276e1ca547764b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTM1MTQxMg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/743#discussion_r365351412", "bodyText": "Based on one of my comments I think tests will be improved by the proposed refactoring.", "author": "bogdandrutu", "createdAt": "2020-01-10T17:41:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTM0ODQ4NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQyNTgxNg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/743#discussion_r365425816", "bodyText": "Done", "author": "kbrockhoff", "createdAt": "2020-01-10T20:53:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTM0ODQ4NQ=="}], "type": "inlineReview"}, {"oid": "badf99a033c5296ee0542ee30312471a83ce93e3", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/badf99a033c5296ee0542ee30312471a83ce93e3", "message": "fix code review issues", "committedDate": "2020-01-10T20:51:38Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQ3MjMxNQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/743#discussion_r365472315", "bodyText": "use truth for asserts to be compatible with the rest of the code.", "author": "bogdandrutu", "createdAt": "2020-01-10T23:40:49Z", "path": "sdk_contrib/aws_v1_support/src/test/java/io/opentelemetry/sdk/contrib/trace/aws/Ec2ResourceTest.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.contrib.trace.aws;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+import com.amazonaws.util.EC2MetadataUtils.InstanceInfo;\n+import io.opentelemetry.sdk.resources.Resource;\n+import io.opentelemetry.sdk.resources.ResourceConstants;\n+import org.junit.Test;\n+\n+public class Ec2ResourceTest {\n+\n+  @Test\n+  public void shouldReturnResourceWithOnlyCloudProviderLabelIfNotRunningOnEc2() {\n+    Resource resource = Ec2Resource.getResource();\n+    assertEquals(", "originalCommit": "badf99a033c5296ee0542ee30312471a83ce93e3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTUzMzU4Ng==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/743#discussion_r365533586", "bodyText": "Done", "author": "kbrockhoff", "createdAt": "2020-01-11T17:48:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQ3MjMxNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQ3MjM3Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/743#discussion_r365472373", "bodyText": "This class may deserve some tests :)", "author": "bogdandrutu", "createdAt": "2020-01-10T23:41:06Z", "path": "sdk_contrib/aws_v1_support/src/main/java/io/opentelemetry/sdk/contrib/trace/aws/AwsXRayIdsGenerator.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.contrib.trace.aws;\n+\n+import com.amazonaws.xray.ThreadLocalStorage;\n+import io.opentelemetry.sdk.trace.IdsGenerator;\n+import io.opentelemetry.trace.SpanId;\n+import io.opentelemetry.trace.TraceId;\n+\n+/**\n+ * Generates tracing ids compatible with the AWS X-Ray tracing service. In the X-Ray system the\n+ * first 32 bits of the trace id are the Unix epoch time in secords. Spans (AWS calls them segments)\n+ * submit with trace id timestamps outside of the last 30 days are rejected.\n+ *\n+ * @see <a\n+ *     href=\"https://docs.aws.amazon.com/xray/latest/devguide/xray-api-sendingdata.html#xray-api-traceids\">Generating\n+ *     Trace IDs</a>\n+ */\n+public class AwsXRayIdsGenerator implements IdsGenerator {", "originalCommit": "badf99a033c5296ee0542ee30312471a83ce93e3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTUzMzYyNA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/743#discussion_r365533624", "bodyText": "It had tests. I added an additional test to verify it works correctly in multi-threaded environment.", "author": "kbrockhoff", "createdAt": "2020-01-11T17:49:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQ3MjM3Mw=="}], "type": "inlineReview"}, {"oid": "2b97cfc48e7bb2bb9359bb69714d047fe2ceb76d", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/2b97cfc48e7bb2bb9359bb69714d047fe2ceb76d", "message": "fix test code review issues", "committedDate": "2020-01-11T14:51:58Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTkyOTkxNg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/743#discussion_r365929916", "bodyText": "/** Unit tests for {@link AwsXRayIdsGenerator}. */\n@RunWith(JUnit4.class)\nFor the other test class as well.", "author": "bogdandrutu", "createdAt": "2020-01-13T17:28:05Z", "path": "sdk_contrib/aws_v1_support/src/test/java/io/opentelemetry/sdk/contrib/trace/aws/AwsXRayIdsGeneratorTest.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Copyright 2020, OpenTelemetry Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.opentelemetry.sdk.contrib.trace.aws;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import io.opentelemetry.sdk.trace.IdsGenerator;\n+import io.opentelemetry.trace.SpanId;\n+import io.opentelemetry.trace.TraceId;\n+import java.util.Set;\n+import java.util.concurrent.BrokenBarrierException;\n+import java.util.concurrent.CopyOnWriteArraySet;\n+import java.util.concurrent.CyclicBarrier;\n+import java.util.concurrent.Executor;\n+import java.util.concurrent.Executors;\n+import org.junit.Test;\n+\n+/** Unit tests for {@link AwsXRayIdsGenerator}. */\n+public class AwsXRayIdsGeneratorTest {", "originalCommit": "2b97cfc48e7bb2bb9359bb69714d047fe2ceb76d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "a025c70121ecf63381611c68a51ae3fc8bd0d8be", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/a025c70121ecf63381611c68a51ae3fc8bd0d8be", "message": "Add RunWith annotation", "committedDate": "2020-01-13T19:14:14Z", "type": "commit"}]}