{"pr_number": 1548, "pr_title": "Add ResourceProvider SPI to allow for custom Resources", "pr_createdAt": "2020-08-18T10:19:20Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java/pull/1548", "timeline": [{"oid": "15f7d1af43e25d018c5466d8984c04faa8be76d5", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/15f7d1af43e25d018c5466d8984c04faa8be76d5", "message": "Add ResourceProvider SPI to allow for custom Resources", "committedDate": "2020-08-18T10:18:13Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjA3NTU0NA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1548#discussion_r472075544", "bodyText": "We should probably add a property with a CSV list of implementation class name to exclude to allow users to disable resources they don't want to include automatically.", "author": "anuraaga", "createdAt": "2020-08-18T10:24:50Z", "path": "sdk/src/main/java/io/opentelemetry/sdk/resources/Resource.java", "diffHunk": "@@ -74,6 +75,14 @@ private static String readVersion() {\n     return properties.getProperty(\"sdk.version\");\n   }\n \n+  private static Resource readResourceFromProviders() {\n+    Resource result = Resource.EMPTY;\n+    for (ResourceProvider resourceProvider : ServiceLoader.load(ResourceProvider.class)) {", "originalCommit": "15f7d1af43e25d018c5466d8984c04faa8be76d5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjA4NzIxOQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1548#discussion_r472087219", "bodyText": "Cannot the same be achieved via controlling application classpath?", "author": "iNikem", "createdAt": "2020-08-18T10:47:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjA3NTU0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjEwMzM5Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1548#discussion_r472103393", "bodyText": "If every resource provider is in a separate artifact I think so but will that be the case? Not sure - but I sort of figured that SDK will have one extension artifact with a few providers so disabling one of them only by classpath manipulation could be tough.", "author": "anuraaga", "createdAt": "2020-08-18T11:21:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjA3NTU0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjEyMjg5Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1548#discussion_r472122893", "bodyText": "The only use-case for this that I currently know of is for auto-instrumentation to provide telemetry.auto.version. Which, btw, I wouldn't want end-users to disable :)", "author": "iNikem", "createdAt": "2020-08-18T11:57:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjA3NTU0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjE0NDcxMQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1548#discussion_r472144711", "bodyText": "There are many resources we haven't implemented in Java yet, like docker container ID or process. I figure they should also be implemented with this SPI\nopen-telemetry/opentelemetry-specification#811 (comment)\nWe'll probably have a lot of these providers for full data coverage but for startup time or possible privacy reasons presumably they should be disablable and classpath probably won't be enough. In agent we would probably bundle everything and need a property anyways I think?", "author": "anuraaga", "createdAt": "2020-08-18T12:36:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjA3NTU0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjIwNDQ4NQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1548#discussion_r472204485", "bodyText": "Ok, fair enough.\n\nShould I do this in this very same PR?\nShould new config property go to TraceConfig?", "author": "iNikem", "createdAt": "2020-08-18T13:39:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjA3NTU0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjIxNTEwNA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1548#discussion_r472215104", "bodyText": "Think follow-up PR is fine.\nProbably not TraceConfig - we'd have to stop using the static instance, and I guess this doesn't need to be programmatic (can just programmatically set Resource instead) so it's only for control from command line.", "author": "anuraaga", "createdAt": "2020-08-18T13:54:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjA3NTU0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI3NTk2NA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1548#discussion_r472275964", "bodyText": "Added #1551", "author": "iNikem", "createdAt": "2020-08-18T15:16:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjA3NTU0NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjA3NTc4Nw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1548#discussion_r472075787", "bodyText": "Attributes is immutable guess you don't need to copy?", "author": "anuraaga", "createdAt": "2020-08-18T10:25:12Z", "path": "sdk/src/main/java/io/opentelemetry/sdk/resources/ResourceProvider.java", "diffHunk": "@@ -0,0 +1,37 @@\n+package io.opentelemetry.sdk.resources;\n+\n+import io.opentelemetry.common.AttributeValue;\n+import io.opentelemetry.common.Attributes;\n+import io.opentelemetry.common.ReadableKeyValuePairs.KeyValueConsumer;\n+import javax.annotation.concurrent.ThreadSafe;\n+\n+/**\n+ * ResourceProvider is a service provider for additional {@link Resource}s.\n+ * Users of OpenTelemetry SDK can use it to add custom {@link Resource} attributes.\n+ *\n+ * <p>Fully qualified class name of the implementation should be registered in {@code\n+ * META-INF/services/io.opentelemetry.sdk.resources.ResourceProvider}.\n+ *\n+ * <p>Resources specified via system properties or environment variables will take precedence\n+ * over any value supplied via {@code ResourceProvider}.\n+ *\n+ * @see EnvAutodetectResource\n+ */\n+@ThreadSafe\n+public abstract class ResourceProvider {\n+\n+  public Resource create() {\n+    final Attributes.Builder attrBuilder = Attributes.newBuilder();", "originalCommit": "15f7d1af43e25d018c5466d8984c04faa8be76d5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjA3ODY1NA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/1548#discussion_r472078654", "bodyText": "oi, indeed", "author": "iNikem", "createdAt": "2020-08-18T10:31:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjA3NTc4Nw=="}], "type": "inlineReview"}, {"oid": "3b586893ab376c33d700f17360cc559e1d14b154", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/3b586893ab376c33d700f17360cc559e1d14b154", "message": "Polish", "committedDate": "2020-08-18T10:46:53Z", "type": "commit"}, {"oid": "cfd907fc5ca7f68b85b5917c5f1057c272ce229a", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/cfd907fc5ca7f68b85b5917c5f1057c272ce229a", "message": "Polish", "committedDate": "2020-08-18T12:28:47Z", "type": "commit"}]}