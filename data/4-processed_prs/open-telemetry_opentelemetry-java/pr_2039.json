{"pr_number": 2039, "pr_title": "Add a way to enforce default context storage implementation", "pr_createdAt": "2020-11-07T03:31:53Z", "pr_url": "https://github.com/open-telemetry/opentelemetry-java/pull/2039", "timeline": [{"oid": "e5e12228a1fe39f9412ae5fbbbe9fbe6ae765f87", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/e5e12228a1fe39f9412ae5fbbbe9fbe6ae765f87", "message": "Add a way to enforce default context storage implementation", "committedDate": "2020-11-07T03:30:20Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTE0OTY1Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2039#discussion_r519149652", "bodyText": "Why a second system property? As discussed on the issue, a single one would be simpler.", "author": "Oberon00", "createdAt": "2020-11-07T07:53:04Z", "path": "context/src/main/java/io/opentelemetry/context/LazyStorage.java", "diffHunk": "@@ -83,6 +85,10 @@ static ContextStorage get() {\n \n   static ContextStorage createStorage(AtomicReference<Throwable> deferredStorageFailure) {\n     String providerClassName = System.getProperty(CONTEXT_STORAGE_PROVIDER_PROPERTY, \"\");\n+    boolean enforceDefault = Boolean.getBoolean(CONTEXT_STORAGE_PROVIDER_ENFORCE_DEFAULT_PROPERTY);", "originalCommit": "e5e12228a1fe39f9412ae5fbbbe9fbe6ae765f87", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTE1MTQxNg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2039#discussion_r519151416", "bodyText": "My bad. It's my misunderstand your point. Can you review again? thanks.", "author": "dengliming", "createdAt": "2020-11-07T08:14:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTE0OTY1Mg=="}], "type": "inlineReview"}, {"oid": "b655b89821c9d85a2ea52232fcb40b9cc5ee4e5e", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/b655b89821c9d85a2ea52232fcb40b9cc5ee4e5e", "message": "Fix review", "committedDate": "2020-11-07T08:13:33Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTI1Mjc5MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2039#discussion_r519252791", "bodyText": "I don't think we can test this sort of behavior with other ones since the system property is only loaded once. Can you extract another testset for this case? I think context will be full of many test sets because of his global initialization logic :)", "author": "anuraaga", "createdAt": "2020-11-08T03:57:07Z", "path": "context/src/test/java/io/opentelemetry/context/LazyStorageTest.java", "diffHunk": "@@ -76,6 +76,13 @@ public void set_storage_provider_property_matches_one_provides() throws Exceptio\n     }\n   }\n \n+  @Test\n+  public void enforce_default_thread_local_storage() {", "originalCommit": "b655b89821c9d85a2ea52232fcb40b9cc5ee4e5e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTI2MTg3Mg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2039#discussion_r519261872", "bodyText": "Actually since we're not testing the public method it looks ok. But we should still make sure the system properties are cleaned up. I realize this already affects the existing tests, but can you use junit pioneer?\n\n  \n    \n      opentelemetry-java/sdk/common/src/test/java/io/opentelemetry/sdk/common/export/ConfigBuilderTest.java\n    \n    \n         Line 238\n      in\n      71ba8e1\n    \n    \n    \n    \n\n        \n          \n           @SetSystemProperty(key = \"int\", value = \"1\")", "author": "anuraaga", "createdAt": "2020-11-08T06:11:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTI1Mjc5MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTI2MjIyOQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2039#discussion_r519262229", "bodyText": "I already clearup the properties in aftereach. It is not enough?\n@AfterEach\n  public void after() {\n    System.clearProperty(CONTEXT_STORAGE_PROVIDER_PROPERTY);\n  }", "author": "dengliming", "createdAt": "2020-11-08T06:16:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTI1Mjc5MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTI2NDIxNw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2039#discussion_r519264217", "bodyText": "Using the annotation is more self-documenting and I guess less error-prone. It's not so clear which tests depend on that AfterEach existing, so the annotation is nice to make it very self-documenting / clear so someone doesn't accidentally delete the cleanup function. It's not a blocking change but I think it's a good idea.", "author": "anuraaga", "createdAt": "2020-11-08T06:43:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTI1Mjc5MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTI2NjkxMw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2039#discussion_r519266913", "bodyText": "You are right. Thanks for help. That makes it more simpler and clearer. : )", "author": "dengliming", "createdAt": "2020-11-08T07:15:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTI1Mjc5MQ=="}], "type": "inlineReview"}, {"oid": "19c7f4d7e245e47a97ccf7309eec70f12a573936", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/19c7f4d7e245e47a97ccf7309eec70f12a573936", "message": "Add testcase", "committedDate": "2020-11-08T04:16:04Z", "type": "commit"}, {"oid": "3724e44c4f33d0070881e9b6a7e4bc8aabcd0f31", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/3724e44c4f33d0070881e9b6a7e4bc8aabcd0f31", "message": "Use junit_pioneer", "committedDate": "2020-11-08T07:15:08Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTI4NTg3MA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2039#discussion_r519285870", "bodyText": "Just one last nit, if you can change the methods to be package-private, since junit5, that would be swell, not a required change though.", "author": "anuraaga", "createdAt": "2020-11-08T08:13:26Z", "path": "context/src/test/java/io/opentelemetry/context/LazyStorageTest.java", "diffHunk": "@@ -13,37 +13,36 @@\n import java.io.Writer;\n import java.net.URL;\n import java.util.concurrent.atomic.AtomicReference;\n-import org.junit.jupiter.api.AfterEach;\n import org.junit.jupiter.api.Test;\n+import org.junitpioneer.jupiter.ClearSystemProperty;\n+import org.junitpioneer.jupiter.SetSystemProperty;\n \n class LazyStorageTest {\n \n   private static final String CONTEXT_STORAGE_PROVIDER_PROPERTY =\n       \"io.opentelemetry.context.contextStorageProvider\";\n+  private static final String MOCK_CONTEXT_STORAGE_PROVIDER =\n+      \"io.opentelemetry.context.LazyStorageTest$MockContextStorageProvider\";\n   private static final AtomicReference<Throwable> DEFERRED_STORAGE_FAILURE =\n       new AtomicReference<>();\n \n-  @AfterEach\n-  public void after() {\n-    System.clearProperty(CONTEXT_STORAGE_PROVIDER_PROPERTY);\n-  }\n-\n   @Test\n-  public void empty_provides() {\n+  @ClearSystemProperty(key = CONTEXT_STORAGE_PROVIDER_PROPERTY)\n+  public void empty_providers() {", "originalCommit": "3724e44c4f33d0070881e9b6a7e4bc8aabcd0f31", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTI5MTY1OQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2039#discussion_r519291659", "bodyText": "Thanks. That was done.", "author": "dengliming", "createdAt": "2020-11-08T08:28:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTI4NTg3MA=="}], "type": "inlineReview"}, {"oid": "1ba446e4b33a709323abf05d13f92d96ad9bf811", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/1ba446e4b33a709323abf05d13f92d96ad9bf811", "message": "Change the methods to be package-private", "committedDate": "2020-11-08T08:27:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTk1MjQwNA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2039#discussion_r519952404", "bodyText": "shouldn't we change the default value here to ENFORCE_DEFAULT_VALUE, rather than an empty String?", "author": "jkwatson", "createdAt": "2020-11-09T16:40:00Z", "path": "context/src/main/java/io/opentelemetry/context/LazyStorage.java", "diffHunk": "@@ -83,6 +84,10 @@ static ContextStorage get() {\n \n   static ContextStorage createStorage(AtomicReference<Throwable> deferredStorageFailure) {\n     String providerClassName = System.getProperty(CONTEXT_STORAGE_PROVIDER_PROPERTY, \"\");", "originalCommit": "1ba446e4b33a709323abf05d13f92d96ad9bf811", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTk1NjQyNg==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2039#discussion_r519956426", "bodyText": "oh, probably not, since we want the SPI to load before we fall back to this value. hmm. This code has ended up pretty confusing. Maybe some additional comments about the priorities here would be helpful.", "author": "jkwatson", "createdAt": "2020-11-09T16:45:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTk1MjQwNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTk2MDY2OA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2039#discussion_r519960668", "bodyText": "How are we choosing between calling this method, vs. ContextStorage.defaultStorage() which return the same thing?", "author": "jkwatson", "createdAt": "2020-11-09T16:48:57Z", "path": "context/src/main/java/io/opentelemetry/context/LazyStorage.java", "diffHunk": "@@ -83,6 +84,10 @@ static ContextStorage get() {\n \n   static ContextStorage createStorage(AtomicReference<Throwable> deferredStorageFailure) {\n     String providerClassName = System.getProperty(CONTEXT_STORAGE_PROVIDER_PROPERTY, \"\");\n+    // enforceDefault\n+    if (ENFORCE_DEFAULT_VALUE.equals(providerClassName)) {\n+      return DefaultContext.threadLocalStorage();", "originalCommit": "1ba446e4b33a709323abf05d13f92d96ad9bf811", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDIzNDQ2MQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2039#discussion_r520234461", "bodyText": "yes. they return the same thing. what about calling ContextStorage.defaultStorage() consistently?", "author": "dengliming", "createdAt": "2020-11-10T01:50:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTk2MDY2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDIzODAzMA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2039#discussion_r520238030", "bodyText": "@anuraaga I would really appreciate it If you can also share your opinion here.  : )", "author": "dengliming", "createdAt": "2020-11-10T02:02:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTk2MDY2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI0MTg1Mw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2039#discussion_r520241853", "bodyText": "Yeah let's remove DefaultContext.threadLocalStorage, that is a leftover from refactoring during the initial implementation. I was thinking of doing it after this PR if you weren't to do so :P", "author": "anuraaga", "createdAt": "2020-11-10T02:15:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTk2MDY2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI4MTM0NA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2039#discussion_r520281344", "bodyText": "@jkwatson Should we remove DefaultContext.threadLocalStorage  in this PR?", "author": "dengliming", "createdAt": "2020-11-10T04:38:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTk2MDY2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDY5OTQ0MA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2039#discussion_r520699440", "bodyText": "If we don't, please create an issue for it, so we don't lose track.", "author": "jkwatson", "createdAt": "2020-11-10T16:30:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTk2MDY2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDcwMjk5NQ==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2039#discussion_r520702995", "bodyText": "Let's remove it now. : )", "author": "dengliming", "createdAt": "2020-11-10T16:35:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTk2MDY2OA=="}], "type": "inlineReview"}, {"oid": "d65656dc22db62211e9dfb8a7d6e1df3e2b9cf03", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/d65656dc22db62211e9dfb8a7d6e1df3e2b9cf03", "message": "Add some comments", "committedDate": "2020-11-10T02:05:03Z", "type": "commit"}, {"oid": "0e3cde5f9f2d473b8a1facb1dc63387eab6ff79e", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/0e3cde5f9f2d473b8a1facb1dc63387eab6ff79e", "message": "Remove DefaultContext.threadLocalStorage", "committedDate": "2020-11-10T16:45:16Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc2MzM3NA==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2039#discussion_r520763374", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private static final String ENFORCE_DEFAULT_VALUE = \"default\";\n          \n          \n            \n              private static final String ENFORCE_DEFAULT_STORAGE_VALUE = \"default\";", "author": "Oberon00", "createdAt": "2020-11-10T18:02:27Z", "path": "context/src/main/java/io/opentelemetry/context/LazyStorage.java", "diffHunk": "@@ -65,6 +65,7 @@ static ContextStorage get() {\n \n   private static final String CONTEXT_STORAGE_PROVIDER_PROPERTY =\n       \"io.opentelemetry.context.contextStorageProvider\";\n+  private static final String ENFORCE_DEFAULT_VALUE = \"default\";", "originalCommit": "0e3cde5f9f2d473b8a1facb1dc63387eab6ff79e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc2MzYzMw==", "url": "https://github.com/open-telemetry/opentelemetry-java/pull/2039#discussion_r520763633", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                String providerClassName = System.getProperty(CONTEXT_STORAGE_PROVIDER_PROPERTY, \"\");\n          \n          \n            \n                final String providerClassName = System.getProperty(CONTEXT_STORAGE_PROVIDER_PROPERTY, \"\");", "author": "Oberon00", "createdAt": "2020-11-10T18:02:57Z", "path": "context/src/main/java/io/opentelemetry/context/LazyStorage.java", "diffHunk": "@@ -82,7 +83,12 @@ static ContextStorage get() {\n   }\n \n   static ContextStorage createStorage(AtomicReference<Throwable> deferredStorageFailure) {\n+    // Get the specified SPI implementation first here\n     String providerClassName = System.getProperty(CONTEXT_STORAGE_PROVIDER_PROPERTY, \"\");", "originalCommit": "0e3cde5f9f2d473b8a1facb1dc63387eab6ff79e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "28381128326449c17a8e31b45a8f16f643d0f935", "url": "https://github.com/open-telemetry/opentelemetry-java/commit/28381128326449c17a8e31b45a8f16f643d0f935", "message": "Fix review", "committedDate": "2020-11-10T18:10:26Z", "type": "commit"}]}