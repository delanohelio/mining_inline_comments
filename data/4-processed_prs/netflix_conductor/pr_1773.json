{"pr_number": 1773, "pr_title": "added back the changes necessary to handle subworkflow termination", "pr_createdAt": "2020-07-09T20:12:46Z", "pr_url": "https://github.com/Netflix/conductor/pull/1773", "timeline": [{"oid": "0effd7497d99a96d2be7dd0adc9d34ea7b26e326", "url": "https://github.com/Netflix/conductor/commit/0effd7497d99a96d2be7dd0adc9d34ea7b26e326", "message": "added back the changes necessary to handle the termination of subworkflows", "committedDate": "2020-07-09T20:08:31Z", "type": "commit"}, {"oid": "8d667ec48cefa4abb2a1b4a2fe80a2ceb4700c8e", "url": "https://github.com/Netflix/conductor/commit/8d667ec48cefa4abb2a1b4a2fe80a2ceb4700c8e", "message": "Merge branch 'dev' of https://github.com/Netflix/conductor into terminate-task-handle-nonterminal-tasks", "committedDate": "2020-07-21T14:08:01Z", "type": "commit"}, {"oid": "54f8dac3cab52e0a560142d9d3252bfa1915fd94", "url": "https://github.com/Netflix/conductor/commit/54f8dac3cab52e0a560142d9d3252bfa1915fd94", "message": "work on test cases", "committedDate": "2020-07-27T19:34:28Z", "type": "commit"}, {"oid": "fe8e8e8bfd0563e486f8776cefe4e15b8a753c58", "url": "https://github.com/Netflix/conductor/commit/fe8e8e8bfd0563e486f8776cefe4e15b8a753c58", "message": "add test case for parent workflow with terminate task and subworkflow", "committedDate": "2020-07-28T19:47:44Z", "type": "commit"}, {"oid": "ef3db221c0813a67d5011a0555eaf2be5c51d801", "url": "https://github.com/Netflix/conductor/commit/ef3db221c0813a67d5011a0555eaf2be5c51d801", "message": "add import of TaskResult", "committedDate": "2020-07-28T20:13:22Z", "type": "commit"}, {"oid": "a5e628b1ffc16b86ba883f0f1c25892adba31b1a", "url": "https://github.com/Netflix/conductor/commit/a5e628b1ffc16b86ba883f0f1c25892adba31b1a", "message": "allow SUB_WORKFLOW to be in either SCHEDULED or IN_PROGRESS state", "committedDate": "2020-07-28T20:43:24Z", "type": "commit"}, {"oid": "eb4f87b9469d4a8bd14f98d00ae5f2f32e999d53", "url": "https://github.com/Netflix/conductor/commit/eb4f87b9469d4a8bd14f98d00ae5f2f32e999d53", "message": "allow SUB_WORKFLOW to be in either SCHEDULED or IN_PROGRESS state", "committedDate": "2020-07-28T20:53:02Z", "type": "commit"}, {"oid": "d4215ac3b3d3efcb5016e28b59a3b4ea2c7c7143", "url": "https://github.com/Netflix/conductor/commit/d4215ac3b3d3efcb5016e28b59a3b4ea2c7c7143", "message": "take out condition for SUB_WORKFLOW status, not necessary", "committedDate": "2020-07-28T21:13:33Z", "type": "commit"}, {"oid": "069cd39089e55ebb367a7fd61c456f91347e5e92", "url": "https://github.com/Netflix/conductor/commit/069cd39089e55ebb367a7fd61c456f91347e5e92", "message": "make new test fail with the old code to verify that the new code fixed it", "committedDate": "2020-07-28T21:34:16Z", "type": "commit"}, {"oid": "0126592a1381b3596b78168576d92dca8d49c999", "url": "https://github.com/Netflix/conductor/commit/0126592a1381b3596b78168576d92dca8d49c999", "message": "add back new code to fix the issue", "committedDate": "2020-07-28T21:36:34Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjYxOTYzMA==", "url": "https://github.com/Netflix/conductor/pull/1773#discussion_r462619630", "bodyText": "Instead of checking for negation, can we explicitly check for expected state? In this case SKIPPED.", "author": "kishorebanala", "createdAt": "2020-07-29T22:11:37Z", "path": "test-harness/src/test/groovy/com/netflix/counductor/integration/test/LambdaAndTerminalTaskSpec.groovy", "diffHunk": "@@ -110,6 +119,62 @@ class LambdaAndTerminalTaskSpec extends Specification {\n         }\n     }\n \n+    def \"Test workflow with a terminate task when the workflow has a subworkflow\"() {\n+        given: \"workflow input\"\n+        def workflowInput = new HashMap()\n+        workflowInput['a'] = 1\n+\n+        when: \"Start the workflow which has the terminate task\"\n+        def workflowInstanceId = workflowExecutor.startWorkflow(PARENT_WORKFLOW_WITH_TERMINATE_TASK, 1,\n+                '', workflowInput, null, null, null)\n+\n+        then: \"verify that the workflow has started and the tasks are as expected\"\n+        with(workflowExecutionService.getExecutionStatus(workflowInstanceId, true)) {\n+            status == Workflow.WorkflowStatus.RUNNING\n+            tasks.size() == 6\n+            tasks[0].status == Task.Status.COMPLETED\n+            tasks[0].taskType == 'FORK'\n+            tasks[1].status == Task.Status.COMPLETED\n+            tasks[1].taskType == 'LAMBDA'\n+            tasks[1].referenceTaskName == 'lambdaTask1'\n+            tasks[2].status == Task.Status.COMPLETED\n+            tasks[2].taskType == 'LAMBDA'\n+            tasks[2].referenceTaskName == 'lambdaTask2'\n+            tasks[3].status == Task.Status.IN_PROGRESS\n+            tasks[3].taskType == 'JOIN'\n+            tasks[4].taskType == 'SUB_WORKFLOW'\n+            tasks[5].status == Task.Status.IN_PROGRESS\n+            tasks[5].taskType == 'WAIT'\n+        }\n+\n+        when: \"Complete the WAIT task that should cause the TERMINATE task to execute\"\n+        def waitTask = workflowExecutionService.getExecutionStatus(workflowInstanceId, true).tasks[5]\n+        waitTask.status = Task.Status.COMPLETED\n+        workflowExecutor.updateTask(new TaskResult(waitTask))\n+\n+        then:\"Verify that the workflow has completed and the SUB_WORKFLOW is not still IN_PROGRESS (should be SKIPPED)\"\n+        with(workflowExecutionService.getExecutionStatus(workflowInstanceId, true)) {\n+            status == Workflow.WorkflowStatus.COMPLETED\n+            tasks.size() == 7\n+            tasks[0].status == Task.Status.COMPLETED\n+            tasks[0].taskType == 'FORK'\n+            tasks[1].status == Task.Status.COMPLETED\n+            tasks[1].taskType == 'LAMBDA'\n+            tasks[1].referenceTaskName == 'lambdaTask1'\n+            tasks[2].status == Task.Status.COMPLETED\n+            tasks[2].taskType == 'LAMBDA'\n+            tasks[2].referenceTaskName == 'lambdaTask2'\n+            tasks[3].status != Task.Status.IN_PROGRESS\n+            tasks[3].taskType == 'JOIN'\n+            tasks[4].status != Task.Status.IN_PROGRESS", "originalCommit": "0126592a1381b3596b78168576d92dca8d49c999", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjYxOTk5NA==", "url": "https://github.com/Netflix/conductor/pull/1773#discussion_r462619994", "bodyText": "Shall we also verify that the Subworkflow is not IN_PROGRESS as mentioned in the test method name, to close the verifications loop.", "author": "kishorebanala", "createdAt": "2020-07-29T22:12:32Z", "path": "test-harness/src/test/groovy/com/netflix/counductor/integration/test/LambdaAndTerminalTaskSpec.groovy", "diffHunk": "@@ -110,6 +119,62 @@ class LambdaAndTerminalTaskSpec extends Specification {\n         }\n     }\n \n+    def \"Test workflow with a terminate task when the workflow has a subworkflow\"() {\n+        given: \"workflow input\"\n+        def workflowInput = new HashMap()\n+        workflowInput['a'] = 1\n+\n+        when: \"Start the workflow which has the terminate task\"\n+        def workflowInstanceId = workflowExecutor.startWorkflow(PARENT_WORKFLOW_WITH_TERMINATE_TASK, 1,\n+                '', workflowInput, null, null, null)\n+\n+        then: \"verify that the workflow has started and the tasks are as expected\"\n+        with(workflowExecutionService.getExecutionStatus(workflowInstanceId, true)) {\n+            status == Workflow.WorkflowStatus.RUNNING\n+            tasks.size() == 6\n+            tasks[0].status == Task.Status.COMPLETED\n+            tasks[0].taskType == 'FORK'\n+            tasks[1].status == Task.Status.COMPLETED\n+            tasks[1].taskType == 'LAMBDA'\n+            tasks[1].referenceTaskName == 'lambdaTask1'\n+            tasks[2].status == Task.Status.COMPLETED\n+            tasks[2].taskType == 'LAMBDA'\n+            tasks[2].referenceTaskName == 'lambdaTask2'\n+            tasks[3].status == Task.Status.IN_PROGRESS\n+            tasks[3].taskType == 'JOIN'\n+            tasks[4].taskType == 'SUB_WORKFLOW'\n+            tasks[5].status == Task.Status.IN_PROGRESS\n+            tasks[5].taskType == 'WAIT'\n+        }\n+\n+        when: \"Complete the WAIT task that should cause the TERMINATE task to execute\"\n+        def waitTask = workflowExecutionService.getExecutionStatus(workflowInstanceId, true).tasks[5]\n+        waitTask.status = Task.Status.COMPLETED\n+        workflowExecutor.updateTask(new TaskResult(waitTask))\n+\n+        then:\"Verify that the workflow has completed and the SUB_WORKFLOW is not still IN_PROGRESS (should be SKIPPED)\"\n+        with(workflowExecutionService.getExecutionStatus(workflowInstanceId, true)) {\n+            status == Workflow.WorkflowStatus.COMPLETED\n+            tasks.size() == 7\n+            tasks[0].status == Task.Status.COMPLETED\n+            tasks[0].taskType == 'FORK'\n+            tasks[1].status == Task.Status.COMPLETED\n+            tasks[1].taskType == 'LAMBDA'\n+            tasks[1].referenceTaskName == 'lambdaTask1'\n+            tasks[2].status == Task.Status.COMPLETED\n+            tasks[2].taskType == 'LAMBDA'\n+            tasks[2].referenceTaskName == 'lambdaTask2'\n+            tasks[3].status != Task.Status.IN_PROGRESS\n+            tasks[3].taskType == 'JOIN'\n+            tasks[4].status != Task.Status.IN_PROGRESS\n+            tasks[4].taskType == 'SUB_WORKFLOW'\n+            tasks[5].status == Task.Status.COMPLETED\n+            tasks[5].taskType == 'WAIT'\n+            tasks[6].status == Task.Status.COMPLETED\n+            tasks[6].taskType == 'TERMINATE'", "originalCommit": "0126592a1381b3596b78168576d92dca8d49c999", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjkyMjc1Mw==", "url": "https://github.com/Netflix/conductor/pull/1773#discussion_r462922753", "bodyText": "@kishorebanala I made the changes  you recommended. In the case of SUB_WORKFLOW before the WAIT task is COMPLETED, I had to put an 'either SCHEDULED or IN_PROGRESS' because it depends on the timing of when it gets changed to IN_PROGRESS. If I do it locally in Swagger it is in IN_PROGRESS status but in the spock test it is SCHEDULED. I don't want to make the test case unreliable so I used the OR condition.", "author": "rickfish", "createdAt": "2020-07-30T11:10:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjYxOTk5NA=="}], "type": "inlineReview"}, {"oid": "e50dced5fcd2ab062c9167f8123e988750b2d202", "url": "https://github.com/Netflix/conductor/commit/e50dced5fcd2ab062c9167f8123e988750b2d202", "message": "Merge branch 'dev' of https://github.com/Netflix/conductor into terminate-task-handle-nonterminal-tasks", "committedDate": "2020-07-30T10:58:32Z", "type": "commit"}, {"oid": "0cc242056b509c8e35033d889206df582a9c7110", "url": "https://github.com/Netflix/conductor/commit/0cc242056b509c8e35033d889206df582a9c7110", "message": "made changes to test cases based on feedback", "committedDate": "2020-07-30T11:02:56Z", "type": "commit"}]}