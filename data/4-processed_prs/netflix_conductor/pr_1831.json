{"pr_number": 1831, "pr_title": "JSON_JQ_TRANSFORM - complete system task development", "pr_createdAt": "2020-08-17T13:29:57Z", "pr_url": "https://github.com/Netflix/conductor/pull/1831", "timeline": [{"oid": "be3f2ff43da059e1474baad63d80628cac2dac37", "url": "https://github.com/Netflix/conductor/commit/be3f2ff43da059e1474baad63d80628cac2dac37", "message": "JSON_JQ_TRANSFORM - complete system task development", "committedDate": "2020-08-17T13:20:09Z", "type": "commit"}, {"oid": "16c0f049661c6ac2228d551917b0ce7ba13883b1", "url": "https://github.com/Netflix/conductor/commit/16c0f049661c6ac2228d551917b0ce7ba13883b1", "message": "JSON_JQ_TRANSFORM - remove unused dep from test", "committedDate": "2020-08-17T14:03:19Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTg0MjUxNQ==", "url": "https://github.com/Netflix/conductor/pull/1831#discussion_r471842515", "bodyText": "Please add license header", "author": "apanicker-nflx", "createdAt": "2020-08-18T00:16:21Z", "path": "core/src/test/java/com/netflix/conductor/core/execution/mapper/JsonJQTransformTaskMapperTest.java", "diffHunk": "@@ -0,0 +1,106 @@\n+package com.netflix.conductor.core.execution.mapper;", "originalCommit": "16c0f049661c6ac2228d551917b0ce7ba13883b1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjA3ODk4Nw==", "url": "https://github.com/Netflix/conductor/pull/1831#discussion_r472078987", "bodyText": "@apanicker-nflx done", "author": "elisherer", "createdAt": "2020-08-18T10:31:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTg0MjUxNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTg0Mjc5OQ==", "url": "https://github.com/Netflix/conductor/pull/1831#discussion_r471842799", "bodyText": "This is great, thanks for adding documentation.", "author": "apanicker-nflx", "createdAt": "2020-08-18T00:17:21Z", "path": "docs/docs/configuration/systask.md", "diffHunk": "@@ -675,3 +675,42 @@ Do while task does NOT support domain or isolation group execution. Nesting of D\n ```\n If any of loopover task will be failed then do while task will be failed. In such case retry will start iteration from 1. TaskType SUB_WORKFLOW is not supported as a part of loopover task. Since loopover tasks will be executed in loop inside scope of parent do while task, crossing branching outside of DO_WHILE task will not be respected. Branching inside loopover task will be supported.\n In case of exception while evaluating loopCondition, do while task will be failed with FAILED_WITH_TERMINAL_ERROR.\n+\n+## JSON JQ Transform Task", "originalCommit": "16c0f049661c6ac2228d551917b0ce7ba13883b1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "5d62b4d9f65be762c7096bb2294e149243b0d6ce", "url": "https://github.com/Netflix/conductor/commit/5d62b4d9f65be762c7096bb2294e149243b0d6ce", "message": "JSON_JQ_TRANSFORM - Add integration tests", "committedDate": "2020-08-18T10:30:37Z", "type": "commit"}, {"oid": "b5ca2121c384189b79d720b044e44d9c048c11f1", "url": "https://github.com/Netflix/conductor/commit/b5ca2121c384189b79d720b044e44d9c048c11f1", "message": "Add WorkflowTaskTypeConstraintTest with JSON_JQ_TRANSFORM tests", "committedDate": "2020-08-18T11:12:10Z", "type": "commit"}, {"oid": "d62cd9a362a9aaf5bdf619b4288d38bbe0cc837f", "url": "https://github.com/Netflix/conductor/commit/d62cd9a362a9aaf5bdf619b4288d38bbe0cc837f", "message": "System Tasks markdown typo", "committedDate": "2020-08-18T11:15:53Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjgzODY3NQ==", "url": "https://github.com/Netflix/conductor/pull/1831#discussion_r476838675", "bodyText": "+1", "author": "kishorebanala", "createdAt": "2020-08-25T23:12:03Z", "path": "test-harness/src/test/groovy/com/netflix/counductor/integration/test/JsonJQTransformTaskSpec.groovy", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.netflix.counductor.integration.test\n+\n+import com.fasterxml.jackson.databind.ObjectMapper\n+import com.netflix.archaius.guice.ArchaiusModule\n+import com.netflix.conductor.common.metadata.tasks.Task\n+import com.netflix.conductor.common.run.Workflow\n+import com.netflix.conductor.common.utils.JsonMapperProvider\n+import com.netflix.conductor.contribs.json.JsonJqTransform\n+import com.netflix.conductor.core.execution.WorkflowExecutor\n+import com.netflix.conductor.service.ExecutionService\n+import com.netflix.conductor.test.util.WorkflowTestUtil\n+import com.netflix.conductor.tests.utils.TestModule\n+import com.netflix.governator.guice.test.ModulesForTesting\n+import spock.lang.Shared\n+import spock.lang.Specification\n+\n+import javax.inject.Inject\n+\n+@ModulesForTesting([TestModule.class, ArchaiusModule.class])\n+class JsonJQTransformTaskSpec extends Specification {\n+\n+    @Inject\n+    ExecutionService workflowExecutionService\n+\n+    @Inject\n+    WorkflowExecutor workflowExecutor\n+\n+    @Inject\n+    WorkflowTestUtil workflowTestUtil\n+\n+    @Shared\n+    ObjectMapper objectMapper = new JsonMapperProvider().get()\n+\n+    @Shared\n+    def JSON_JQ_TRANSFORM_WF = 'test_json_jq_transform_wf'\n+\n+    def setup() {\n+        // We do this to register the JSON JQ TRANSFORM task type as a system task since it's in the contrib module\n+        new JsonJqTransform(objectMapper)\n+\n+        workflowTestUtil.registerWorkflows(\n+            'simple_json_jq_transform_integration_test.json',\n+        )\n+    }\n+\n+    def cleanup() {\n+        workflowTestUtil.clearWorkflows()\n+    }\n+\n+    /**\n+     * Given the following input JSON\n+     * {\n+     *   \"in1\": {\n+     *     \"array\": [ \"a\", \"b\" ]\n+     *   },\n+     *   \"in2\": {\n+     *     \"array\": [ \"c\", \"d\" ]\n+     *   }\n+     * }\n+     * expect the workflow task to transform to following result:\n+     * {\n+     *     out: [ \"a\", \"b\", \"c\", \"d\" ]\n+     * }\n+     */\n+    def \"Test workflow with json jq transform task succeeds\"() {", "originalCommit": "d62cd9a362a9aaf5bdf619b4288d38bbe0cc837f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}