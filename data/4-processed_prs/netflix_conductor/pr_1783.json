{"pr_number": 1783, "pr_title": "Rate limit, concurrency execution limit, event based workflow, wait t\u2026", "pr_createdAt": "2020-07-14T17:44:15Z", "pr_url": "https://github.com/Netflix/conductor/pull/1783", "timeline": [{"oid": "631dae9db96528b5395888d5db2990b5513b7d42", "url": "https://github.com/Netflix/conductor/commit/631dae9db96528b5395888d5db2990b5513b7d42", "message": "Rate limit, concurrency execution limit, event based workflow, wait task based workflow and terminate task based workflow integration tests", "committedDate": "2020-07-14T17:39:38Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU0MTQ5OA==", "url": "https://github.com/Netflix/conductor/pull/1783#discussion_r454541498", "bodyText": "Please add license header", "author": "apanicker-nflx", "createdAt": "2020-07-14T17:59:13Z", "path": "test-harness/src/test/groovy/com/netflix/counductor/integration/test/EventWorkflowSpec.groovy", "diffHunk": "@@ -0,0 +1,82 @@\n+package com.netflix.counductor.integration.test", "originalCommit": "631dae9db96528b5395888d5db2990b5513b7d42", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU0MjQ3MQ==", "url": "https://github.com/Netflix/conductor/pull/1783#discussion_r454542471", "bodyText": "Please add license header", "author": "apanicker-nflx", "createdAt": "2020-07-14T18:00:43Z", "path": "test-harness/src/test/groovy/com/netflix/counductor/integration/test/LambdaAndTerminalTaskSpec.groovy", "diffHunk": "@@ -0,0 +1,124 @@\n+package com.netflix.counductor.integration.test", "originalCommit": "631dae9db96528b5395888d5db2990b5513b7d42", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU0NTQ5Mg==", "url": "https://github.com/Netflix/conductor/pull/1783#discussion_r454545492", "bodyText": "@Shared annotation?", "author": "apanicker-nflx", "createdAt": "2020-07-14T18:05:46Z", "path": "test-harness/src/test/groovy/com/netflix/counductor/integration/test/LambdaAndTerminalTaskSpec.groovy", "diffHunk": "@@ -0,0 +1,124 @@\n+package com.netflix.counductor.integration.test\n+\n+import com.netflix.conductor.common.metadata.tasks.Task\n+import com.netflix.conductor.common.run.Workflow\n+import com.netflix.conductor.core.execution.WorkflowExecutor\n+import com.netflix.conductor.core.execution.WorkflowSweeper\n+import com.netflix.conductor.service.ExecutionService\n+import com.netflix.conductor.service.MetadataService\n+import com.netflix.conductor.test.util.WorkflowTestUtil\n+import com.netflix.conductor.tests.utils.TestModule\n+import com.netflix.governator.guice.test.ModulesForTesting\n+import spock.lang.Shared\n+import spock.lang.Specification\n+\n+import javax.inject.Inject\n+\n+@ModulesForTesting([TestModule.class])\n+class LambdaAndTerminalTaskSpec extends Specification {\n+\n+    @Inject\n+    ExecutionService workflowExecutionService\n+\n+    @Inject\n+    MetadataService metadataService\n+\n+    @Inject\n+    WorkflowExecutor workflowExecutor\n+\n+    @Inject\n+    WorkflowSweeper workflowSweeper\n+\n+    @Inject\n+    WorkflowTestUtil workflowTestUtil\n+\n+    @Shared\n+    def WORKFLOW_WITH_TERMINATE_TASK = 'test_terminate_task_wf'\n+\n+    @Shared\n+    def WORKFLOW_WITH_TERMINATE_TASK_FAILED = 'test_terminate_task_failed_wf'\n+\n+    def  WORKFLOW_WITH_LAMBDA_TASK = 'test_lambda_wf'", "originalCommit": "631dae9db96528b5395888d5db2990b5513b7d42", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU0NjQ5MQ==", "url": "https://github.com/Netflix/conductor/pull/1783#discussion_r454546491", "bodyText": "Is this a null check? If so, we probably need to add it to all the features in all specs.", "author": "apanicker-nflx", "createdAt": "2020-07-14T18:07:31Z", "path": "test-harness/src/test/groovy/com/netflix/counductor/integration/test/LambdaAndTerminalTaskSpec.groovy", "diffHunk": "@@ -0,0 +1,124 @@\n+package com.netflix.counductor.integration.test\n+\n+import com.netflix.conductor.common.metadata.tasks.Task\n+import com.netflix.conductor.common.run.Workflow\n+import com.netflix.conductor.core.execution.WorkflowExecutor\n+import com.netflix.conductor.core.execution.WorkflowSweeper\n+import com.netflix.conductor.service.ExecutionService\n+import com.netflix.conductor.service.MetadataService\n+import com.netflix.conductor.test.util.WorkflowTestUtil\n+import com.netflix.conductor.tests.utils.TestModule\n+import com.netflix.governator.guice.test.ModulesForTesting\n+import spock.lang.Shared\n+import spock.lang.Specification\n+\n+import javax.inject.Inject\n+\n+@ModulesForTesting([TestModule.class])\n+class LambdaAndTerminalTaskSpec extends Specification {\n+\n+    @Inject\n+    ExecutionService workflowExecutionService\n+\n+    @Inject\n+    MetadataService metadataService\n+\n+    @Inject\n+    WorkflowExecutor workflowExecutor\n+\n+    @Inject\n+    WorkflowSweeper workflowSweeper\n+\n+    @Inject\n+    WorkflowTestUtil workflowTestUtil\n+\n+    @Shared\n+    def WORKFLOW_WITH_TERMINATE_TASK = 'test_terminate_task_wf'\n+\n+    @Shared\n+    def WORKFLOW_WITH_TERMINATE_TASK_FAILED = 'test_terminate_task_failed_wf'\n+\n+    def  WORKFLOW_WITH_LAMBDA_TASK = 'test_lambda_wf'\n+\n+    def setup() {\n+        workflowTestUtil.registerWorkflows(\n+                'failure_workflow_for_terminate_task_workflow.json',\n+                'terminate_task_completed_workflow_integration_test.json',\n+                'terminate_task_failed_workflow_integration.json',\n+                'simple_lambda_workflow_integration_test.json'\n+        )\n+    }\n+\n+    def cleanup() {\n+        workflowTestUtil.clearWorkflows()\n+    }\n+\n+    def \"Test workflow with a terminate task when the status is completed\"() {\n+        given: \"workflow input\"\n+        def workflowInput = new HashMap()\n+        workflowInput['a'] = 1\n+\n+        when: \"Start the workflow which has the terminate task\"\n+        def workflowInstanceId = workflowExecutor.startWorkflow(WORKFLOW_WITH_TERMINATE_TASK, 1,\n+                '', workflowInput, null, null, null)\n+\n+        then: \"Ensure that the workflow has started and the first task is in scheduled state\"\n+        workflowInstanceId", "originalCommit": "631dae9db96528b5395888d5db2990b5513b7d42", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU1NTg2NA==", "url": "https://github.com/Netflix/conductor/pull/1783#discussion_r454555864", "bodyText": "We don't need this, it is a redundant check, the following verification with() would fail if the returned value is null.", "author": "pctreddy", "createdAt": "2020-07-14T18:23:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU0NjQ5MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU0NzYxNg==", "url": "https://github.com/Netflix/conductor/pull/1783#discussion_r454547616", "bodyText": "Unused?", "author": "apanicker-nflx", "createdAt": "2020-07-14T18:09:32Z", "path": "test-harness/src/test/groovy/com/netflix/counductor/integration/test/TaskLimitsWorkflowSpec.groovy", "diffHunk": "@@ -0,0 +1,174 @@\n+package com.netflix.counductor.integration.test\n+\n+import com.netflix.conductor.common.metadata.tasks.Task\n+import com.netflix.conductor.common.run.Workflow\n+import com.netflix.conductor.core.execution.WorkflowExecutor\n+import com.netflix.conductor.core.execution.WorkflowSweeper\n+import com.netflix.conductor.dao.QueueDAO\n+import com.netflix.conductor.service.ExecutionService\n+import com.netflix.conductor.service.MetadataService\n+import com.netflix.conductor.test.util.WorkflowTestUtil\n+import com.netflix.conductor.tests.utils.TestModule\n+import com.netflix.conductor.tests.utils.UserTask\n+import com.netflix.governator.guice.test.ModulesForTesting\n+import spock.lang.Specification\n+\n+import javax.inject.Inject\n+\n+@ModulesForTesting([TestModule.class])\n+class TaskLimitsWorkflowSpec extends Specification {\n+\n+    @Inject\n+    ExecutionService workflowExecutionService\n+\n+    @Inject\n+    MetadataService metadataService\n+\n+    @Inject\n+    WorkflowExecutor workflowExecutor\n+\n+    @Inject\n+    WorkflowSweeper workflowSweeper", "originalCommit": "631dae9db96528b5395888d5db2990b5513b7d42", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU0Nzk1NA==", "url": "https://github.com/Netflix/conductor/pull/1783#discussion_r454547954", "bodyText": "Unused?", "author": "apanicker-nflx", "createdAt": "2020-07-14T18:10:07Z", "path": "test-harness/src/test/groovy/com/netflix/counductor/integration/test/TaskLimitsWorkflowSpec.groovy", "diffHunk": "@@ -0,0 +1,174 @@\n+package com.netflix.counductor.integration.test\n+\n+import com.netflix.conductor.common.metadata.tasks.Task\n+import com.netflix.conductor.common.run.Workflow\n+import com.netflix.conductor.core.execution.WorkflowExecutor\n+import com.netflix.conductor.core.execution.WorkflowSweeper\n+import com.netflix.conductor.dao.QueueDAO\n+import com.netflix.conductor.service.ExecutionService\n+import com.netflix.conductor.service.MetadataService\n+import com.netflix.conductor.test.util.WorkflowTestUtil\n+import com.netflix.conductor.tests.utils.TestModule\n+import com.netflix.conductor.tests.utils.UserTask\n+import com.netflix.governator.guice.test.ModulesForTesting\n+import spock.lang.Specification\n+\n+import javax.inject.Inject\n+\n+@ModulesForTesting([TestModule.class])\n+class TaskLimitsWorkflowSpec extends Specification {\n+\n+    @Inject\n+    ExecutionService workflowExecutionService\n+\n+    @Inject\n+    MetadataService metadataService", "originalCommit": "631dae9db96528b5395888d5db2990b5513b7d42", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU0ODg1MA==", "url": "https://github.com/Netflix/conductor/pull/1783#discussion_r454548850", "bodyText": "This can be injected from TestModule.", "author": "apanicker-nflx", "createdAt": "2020-07-14T18:11:40Z", "path": "test-harness/src/test/groovy/com/netflix/counductor/integration/test/TaskLimitsWorkflowSpec.groovy", "diffHunk": "@@ -0,0 +1,174 @@\n+package com.netflix.counductor.integration.test\n+\n+import com.netflix.conductor.common.metadata.tasks.Task\n+import com.netflix.conductor.common.run.Workflow\n+import com.netflix.conductor.core.execution.WorkflowExecutor\n+import com.netflix.conductor.core.execution.WorkflowSweeper\n+import com.netflix.conductor.dao.QueueDAO\n+import com.netflix.conductor.service.ExecutionService\n+import com.netflix.conductor.service.MetadataService\n+import com.netflix.conductor.test.util.WorkflowTestUtil\n+import com.netflix.conductor.tests.utils.TestModule\n+import com.netflix.conductor.tests.utils.UserTask\n+import com.netflix.governator.guice.test.ModulesForTesting\n+import spock.lang.Specification\n+\n+import javax.inject.Inject\n+\n+@ModulesForTesting([TestModule.class])\n+class TaskLimitsWorkflowSpec extends Specification {\n+\n+    @Inject\n+    ExecutionService workflowExecutionService\n+\n+    @Inject\n+    MetadataService metadataService\n+\n+    @Inject\n+    WorkflowExecutor workflowExecutor\n+\n+    @Inject\n+    WorkflowSweeper workflowSweeper\n+\n+    @Inject\n+    WorkflowTestUtil workflowTestUtil\n+\n+    @Inject\n+    QueueDAO queueDAO\n+\n+    def RATE_LIMITED_WORKFLOW = 'test_rate_limit_task_workflow'\n+\n+    def CONCURRENCY_EXECUTION_LIMITED_WORKFLOW = 'test_concurrency_limits_workflow'\n+\n+    def setup() {\n+        workflowTestUtil.registerWorkflows(\n+                'rate_limited_task_workflow_integration_test.json',\n+                'concurrency_limited_task_workflow_integration_test.json'\n+        )\n+    }\n+\n+    def cleanup() {\n+        workflowTestUtil.clearWorkflows()\n+    }\n+\n+    def \"Verify that the rate limiting of the tasks is honored\"() {\n+        when: \"Start a workflow that has a rate limited task in it\"\n+        def workflowInstanceId = workflowExecutor.startWorkflow(RATE_LIMITED_WORKFLOW, 1,\n+                '', [:], null, null, null)\n+\n+        then: \"verify that the workflow is in a running state\"\n+        with(workflowExecutionService.getExecutionStatus(workflowInstanceId, true)) {\n+            status == Workflow.WorkflowStatus.RUNNING\n+            tasks.size() == 1\n+            tasks[0].taskType == 'USER_TASK'\n+            tasks[0].status == Task.Status.SCHEDULED\n+        }\n+\n+        when: \"Execute the user task\"\n+        def scheduledTask1 = workflowExecutionService.getExecutionStatus(workflowInstanceId, true).tasks[0]\n+        def userTask = new UserTask()", "originalCommit": "631dae9db96528b5395888d5db2990b5513b7d42", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU0OTU4Mg==", "url": "https://github.com/Netflix/conductor/pull/1783#discussion_r454549582", "bodyText": "Unused?", "author": "apanicker-nflx", "createdAt": "2020-07-14T18:12:49Z", "path": "test-harness/src/test/groovy/com/netflix/counductor/integration/test/EventWorkflowSpec.groovy", "diffHunk": "@@ -0,0 +1,82 @@\n+package com.netflix.counductor.integration.test\n+\n+import com.netflix.conductor.common.metadata.tasks.Task\n+import com.netflix.conductor.common.metadata.workflow.TaskType\n+import com.netflix.conductor.common.run.Workflow\n+import com.netflix.conductor.core.execution.WorkflowExecutor\n+import com.netflix.conductor.core.execution.WorkflowSweeper\n+import com.netflix.conductor.service.ExecutionService\n+import com.netflix.conductor.service.MetadataService\n+import com.netflix.conductor.test.util.WorkflowTestUtil\n+import com.netflix.conductor.tests.utils.TestModule\n+import com.netflix.governator.guice.test.ModulesForTesting\n+import spock.lang.Specification\n+\n+import javax.inject.Inject\n+\n+import static com.netflix.conductor.test.util.WorkflowTestUtil.verifyPolledAndAcknowledgedTask\n+\n+@ModulesForTesting([TestModule.class])\n+class EventWorkflowSpec extends Specification {\n+\n+    @Inject\n+    ExecutionService workflowExecutionService\n+\n+    @Inject\n+    MetadataService metadataService", "originalCommit": "631dae9db96528b5395888d5db2990b5513b7d42", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU0OTYzOQ==", "url": "https://github.com/Netflix/conductor/pull/1783#discussion_r454549639", "bodyText": "Unused?", "author": "apanicker-nflx", "createdAt": "2020-07-14T18:12:55Z", "path": "test-harness/src/test/groovy/com/netflix/counductor/integration/test/EventWorkflowSpec.groovy", "diffHunk": "@@ -0,0 +1,82 @@\n+package com.netflix.counductor.integration.test\n+\n+import com.netflix.conductor.common.metadata.tasks.Task\n+import com.netflix.conductor.common.metadata.workflow.TaskType\n+import com.netflix.conductor.common.run.Workflow\n+import com.netflix.conductor.core.execution.WorkflowExecutor\n+import com.netflix.conductor.core.execution.WorkflowSweeper\n+import com.netflix.conductor.service.ExecutionService\n+import com.netflix.conductor.service.MetadataService\n+import com.netflix.conductor.test.util.WorkflowTestUtil\n+import com.netflix.conductor.tests.utils.TestModule\n+import com.netflix.governator.guice.test.ModulesForTesting\n+import spock.lang.Specification\n+\n+import javax.inject.Inject\n+\n+import static com.netflix.conductor.test.util.WorkflowTestUtil.verifyPolledAndAcknowledgedTask\n+\n+@ModulesForTesting([TestModule.class])\n+class EventWorkflowSpec extends Specification {\n+\n+    @Inject\n+    ExecutionService workflowExecutionService\n+\n+    @Inject\n+    MetadataService metadataService\n+\n+    @Inject\n+    WorkflowExecutor workflowExecutor\n+\n+    @Inject\n+    WorkflowSweeper workflowSweeper", "originalCommit": "631dae9db96528b5395888d5db2990b5513b7d42", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU0OTc4NA==", "url": "https://github.com/Netflix/conductor/pull/1783#discussion_r454549784", "bodyText": "Unused?", "author": "apanicker-nflx", "createdAt": "2020-07-14T18:13:12Z", "path": "test-harness/src/test/groovy/com/netflix/counductor/integration/test/LambdaAndTerminalTaskSpec.groovy", "diffHunk": "@@ -0,0 +1,124 @@\n+package com.netflix.counductor.integration.test\n+\n+import com.netflix.conductor.common.metadata.tasks.Task\n+import com.netflix.conductor.common.run.Workflow\n+import com.netflix.conductor.core.execution.WorkflowExecutor\n+import com.netflix.conductor.core.execution.WorkflowSweeper\n+import com.netflix.conductor.service.ExecutionService\n+import com.netflix.conductor.service.MetadataService\n+import com.netflix.conductor.test.util.WorkflowTestUtil\n+import com.netflix.conductor.tests.utils.TestModule\n+import com.netflix.governator.guice.test.ModulesForTesting\n+import spock.lang.Shared\n+import spock.lang.Specification\n+\n+import javax.inject.Inject\n+\n+@ModulesForTesting([TestModule.class])\n+class LambdaAndTerminalTaskSpec extends Specification {\n+\n+    @Inject\n+    ExecutionService workflowExecutionService\n+\n+    @Inject\n+    MetadataService metadataService\n+\n+    @Inject\n+    WorkflowExecutor workflowExecutor\n+\n+    @Inject\n+    WorkflowSweeper workflowSweeper", "originalCommit": "631dae9db96528b5395888d5db2990b5513b7d42", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU0OTg0MQ==", "url": "https://github.com/Netflix/conductor/pull/1783#discussion_r454549841", "bodyText": "Unused?", "author": "apanicker-nflx", "createdAt": "2020-07-14T18:13:18Z", "path": "test-harness/src/test/groovy/com/netflix/counductor/integration/test/LambdaAndTerminalTaskSpec.groovy", "diffHunk": "@@ -0,0 +1,124 @@\n+package com.netflix.counductor.integration.test\n+\n+import com.netflix.conductor.common.metadata.tasks.Task\n+import com.netflix.conductor.common.run.Workflow\n+import com.netflix.conductor.core.execution.WorkflowExecutor\n+import com.netflix.conductor.core.execution.WorkflowSweeper\n+import com.netflix.conductor.service.ExecutionService\n+import com.netflix.conductor.service.MetadataService\n+import com.netflix.conductor.test.util.WorkflowTestUtil\n+import com.netflix.conductor.tests.utils.TestModule\n+import com.netflix.governator.guice.test.ModulesForTesting\n+import spock.lang.Shared\n+import spock.lang.Specification\n+\n+import javax.inject.Inject\n+\n+@ModulesForTesting([TestModule.class])\n+class LambdaAndTerminalTaskSpec extends Specification {\n+\n+    @Inject\n+    ExecutionService workflowExecutionService\n+\n+    @Inject\n+    MetadataService metadataService", "originalCommit": "631dae9db96528b5395888d5db2990b5513b7d42", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU1MTUxNg==", "url": "https://github.com/Netflix/conductor/pull/1783#discussion_r454551516", "bodyText": "Please add license header", "author": "apanicker-nflx", "createdAt": "2020-07-14T18:16:05Z", "path": "test-harness/src/test/groovy/com/netflix/counductor/integration/test/TaskLimitsWorkflowSpec.groovy", "diffHunk": "@@ -0,0 +1,174 @@\n+package com.netflix.counductor.integration.test", "originalCommit": "631dae9db96528b5395888d5db2990b5513b7d42", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU1MTYzMg==", "url": "https://github.com/Netflix/conductor/pull/1783#discussion_r454551632", "bodyText": "Please add license header", "author": "apanicker-nflx", "createdAt": "2020-07-14T18:16:17Z", "path": "test-harness/src/test/groovy/com/netflix/counductor/integration/test/WaitWorkflowSpec.groovy", "diffHunk": "@@ -0,0 +1,93 @@\n+package com.netflix.counductor.integration.test", "originalCommit": "631dae9db96528b5395888d5db2990b5513b7d42", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU1MTc4Nw==", "url": "https://github.com/Netflix/conductor/pull/1783#discussion_r454551787", "bodyText": "Unused?", "author": "apanicker-nflx", "createdAt": "2020-07-14T18:16:33Z", "path": "test-harness/src/test/groovy/com/netflix/counductor/integration/test/WaitWorkflowSpec.groovy", "diffHunk": "@@ -0,0 +1,93 @@\n+package com.netflix.counductor.integration.test\n+\n+import com.netflix.conductor.common.metadata.tasks.Task\n+import com.netflix.conductor.common.metadata.tasks.TaskResult\n+import com.netflix.conductor.common.metadata.workflow.TaskType\n+import com.netflix.conductor.common.run.Workflow\n+import com.netflix.conductor.core.execution.WorkflowExecutor\n+import com.netflix.conductor.core.execution.WorkflowSweeper\n+import com.netflix.conductor.service.ExecutionService\n+import com.netflix.conductor.service.MetadataService\n+import com.netflix.conductor.test.util.WorkflowTestUtil\n+import com.netflix.conductor.tests.utils.TestModule\n+import com.netflix.governator.guice.test.ModulesForTesting\n+import spock.lang.Shared\n+import spock.lang.Specification\n+\n+import javax.inject.Inject\n+\n+import static com.netflix.conductor.test.util.WorkflowTestUtil.verifyPolledAndAcknowledgedTask\n+\n+@ModulesForTesting([TestModule.class])\n+class WaitWorkflowSpec extends Specification {\n+\n+    @Inject\n+    ExecutionService workflowExecutionService\n+\n+    @Inject\n+    MetadataService metadataService", "originalCommit": "631dae9db96528b5395888d5db2990b5513b7d42", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU1MTkxMw==", "url": "https://github.com/Netflix/conductor/pull/1783#discussion_r454551913", "bodyText": "Unused?", "author": "apanicker-nflx", "createdAt": "2020-07-14T18:16:44Z", "path": "test-harness/src/test/groovy/com/netflix/counductor/integration/test/WaitWorkflowSpec.groovy", "diffHunk": "@@ -0,0 +1,93 @@\n+package com.netflix.counductor.integration.test\n+\n+import com.netflix.conductor.common.metadata.tasks.Task\n+import com.netflix.conductor.common.metadata.tasks.TaskResult\n+import com.netflix.conductor.common.metadata.workflow.TaskType\n+import com.netflix.conductor.common.run.Workflow\n+import com.netflix.conductor.core.execution.WorkflowExecutor\n+import com.netflix.conductor.core.execution.WorkflowSweeper\n+import com.netflix.conductor.service.ExecutionService\n+import com.netflix.conductor.service.MetadataService\n+import com.netflix.conductor.test.util.WorkflowTestUtil\n+import com.netflix.conductor.tests.utils.TestModule\n+import com.netflix.governator.guice.test.ModulesForTesting\n+import spock.lang.Shared\n+import spock.lang.Specification\n+\n+import javax.inject.Inject\n+\n+import static com.netflix.conductor.test.util.WorkflowTestUtil.verifyPolledAndAcknowledgedTask\n+\n+@ModulesForTesting([TestModule.class])\n+class WaitWorkflowSpec extends Specification {\n+\n+    @Inject\n+    ExecutionService workflowExecutionService\n+\n+    @Inject\n+    MetadataService metadataService\n+\n+    @Inject\n+    WorkflowExecutor workflowExecutor\n+\n+    @Inject\n+    WorkflowSweeper workflowSweeper", "originalCommit": "631dae9db96528b5395888d5db2990b5513b7d42", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "81b2fdd302ae68df43c86ee9db1240dabfbe7ee1", "url": "https://github.com/Netflix/conductor/commit/81b2fdd302ae68df43c86ee9db1240dabfbe7ee1", "message": "clean up", "committedDate": "2020-07-14T21:48:31Z", "type": "commit"}]}