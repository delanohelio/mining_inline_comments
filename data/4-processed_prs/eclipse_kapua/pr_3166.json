{"pr_number": 3166, "pr_title": "MFA authentication and CRUD operations via REST API", "pr_createdAt": "2020-12-02T19:40:09Z", "pr_url": "https://github.com/eclipse/kapua/pull/3166", "timeline": [{"oid": "e81f4627273ab38560ccd0177cd03c1737380f20", "url": "https://github.com/eclipse/kapua/commit/e81f4627273ab38560ccd0177cd03c1737380f20", "message": "MFA authentication and CRUD operations via REST API\n\nSigned-off-by: Gianluca Barbon <gianluca.barbon@eurotech.com>", "committedDate": "2020-12-04T20:14:12Z", "type": "forcePushed"}, {"oid": "4082f88a7e6af075ea314a42153c0c9802a1facb", "url": "https://github.com/eclipse/kapua/commit/4082f88a7e6af075ea314a42153c0c9802a1facb", "message": "MFA authentication and CRUD operations via REST API\n\nSigned-off-by: Gianluca Barbon <gianluca.barbon@eurotech.com>", "committedDate": "2020-12-04T20:23:45Z", "type": "forcePushed"}, {"oid": "ae1a9e2152ff90da229598e13dcafd6ded6b6e8c", "url": "https://github.com/eclipse/kapua/commit/ae1a9e2152ff90da229598e13dcafd6ded6b6e8c", "message": "MFA authentication and CRUD operations via REST API\n\nSigned-off-by: Gianluca Barbon <gianluca.barbon@eurotech.com>", "committedDate": "2020-12-07T10:13:09Z", "type": "forcePushed"}, {"oid": "28ba4fbc1a9f084d69ce692b12a7672cf526ea1d", "url": "https://github.com/eclipse/kapua/commit/28ba4fbc1a9f084d69ce692b12a7672cf526ea1d", "message": "Preventing Mfa creation from other users, only self management is allowed\n\nSigned-off-by: Gianluca Barbon <gianluca.barbon@eurotech.com>", "committedDate": "2020-12-09T16:39:09Z", "type": "forcePushed"}, {"oid": "aa79af2a3c61e3d3f9bfc4ddf4059f0fa12412d1", "url": "https://github.com/eclipse/kapua/commit/aa79af2a3c61e3d3f9bfc4ddf4059f0fa12412d1", "message": "Preventing Mfa creation from other users, only self management is allowed\n\nSigned-off-by: Gianluca Barbon <gianluca.barbon@eurotech.com>", "committedDate": "2020-12-10T09:46:39Z", "type": "forcePushed"}, {"oid": "700c05e9f90aedf210d10224d03897407c6f1312", "url": "https://github.com/eclipse/kapua/commit/700c05e9f90aedf210d10224d03897407c6f1312", "message": "MFA trust key security improved\n\nSigned-off-by: Gianluca Barbon <gianluca.barbon@eurotech.com>", "committedDate": "2020-12-14T11:52:07Z", "type": "forcePushed"}, {"oid": "28cd039b596d03a6ab83ba944279eb379dcf0e48", "url": "https://github.com/eclipse/kapua/commit/28cd039b596d03a6ab83ba944279eb379dcf0e48", "message": "MFA trust key security improved\n\nSigned-off-by: Gianluca Barbon <gianluca.barbon@eurotech.com>", "committedDate": "2020-12-14T13:54:39Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTkxMDkzMQ==", "url": "https://github.com/eclipse/kapua/pull/3166#discussion_r535910931", "bodyText": "@path(\"{scopeId}/users/{userId}/mfa\")", "author": "Coduz", "createdAt": "2020-12-04T08:11:38Z", "path": "rest-api/resources/src/main/java/org/eclipse/kapua/app/api/resources/v1/resources/MfaOptions.java", "diffHunk": "@@ -0,0 +1,205 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.app.api.resources.v1.resources;\n+\n+import org.eclipse.kapua.KapuaEntityNotFoundException;\n+import org.eclipse.kapua.KapuaException;\n+import org.eclipse.kapua.app.api.resources.v1.resources.model.CountResult;\n+import org.eclipse.kapua.app.api.resources.v1.resources.model.EntityId;\n+import org.eclipse.kapua.app.api.resources.v1.resources.model.ScopeId;\n+import org.eclipse.kapua.locator.KapuaLocator;\n+import org.eclipse.kapua.model.query.predicate.AndPredicate;\n+import org.eclipse.kapua.service.KapuaService;\n+import org.eclipse.kapua.service.authentication.credential.mfa.MfaOption;\n+import org.eclipse.kapua.service.authentication.credential.mfa.MfaOptionAttributes;\n+import org.eclipse.kapua.service.authentication.credential.mfa.MfaOptionCreator;\n+import org.eclipse.kapua.service.authentication.credential.mfa.MfaOptionFactory;\n+import org.eclipse.kapua.service.authentication.credential.mfa.MfaOptionListResult;\n+import org.eclipse.kapua.service.authentication.credential.mfa.MfaOptionQuery;\n+import org.eclipse.kapua.service.authentication.credential.mfa.MfaOptionService;\n+\n+import javax.ws.rs.Consumes;\n+import javax.ws.rs.DELETE;\n+import javax.ws.rs.DefaultValue;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.QueryParam;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+\n+@Path(\"{scopeId}/mfaoptions\")", "originalCommit": "d00018025bc42dba27aed52697c9339c960da062", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTkxMjg0Mg==", "url": "https://github.com/eclipse/kapua/pull/3166#discussion_r535912842", "bodyText": "@PathParam(\"userId\") EntityId userId,", "author": "Coduz", "createdAt": "2020-12-04T08:15:09Z", "path": "rest-api/resources/src/main/java/org/eclipse/kapua/app/api/resources/v1/resources/MfaOptions.java", "diffHunk": "@@ -0,0 +1,205 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.app.api.resources.v1.resources;\n+\n+import org.eclipse.kapua.KapuaEntityNotFoundException;\n+import org.eclipse.kapua.KapuaException;\n+import org.eclipse.kapua.app.api.resources.v1.resources.model.CountResult;\n+import org.eclipse.kapua.app.api.resources.v1.resources.model.EntityId;\n+import org.eclipse.kapua.app.api.resources.v1.resources.model.ScopeId;\n+import org.eclipse.kapua.locator.KapuaLocator;\n+import org.eclipse.kapua.model.query.predicate.AndPredicate;\n+import org.eclipse.kapua.service.KapuaService;\n+import org.eclipse.kapua.service.authentication.credential.mfa.MfaOption;\n+import org.eclipse.kapua.service.authentication.credential.mfa.MfaOptionAttributes;\n+import org.eclipse.kapua.service.authentication.credential.mfa.MfaOptionCreator;\n+import org.eclipse.kapua.service.authentication.credential.mfa.MfaOptionFactory;\n+import org.eclipse.kapua.service.authentication.credential.mfa.MfaOptionListResult;\n+import org.eclipse.kapua.service.authentication.credential.mfa.MfaOptionQuery;\n+import org.eclipse.kapua.service.authentication.credential.mfa.MfaOptionService;\n+\n+import javax.ws.rs.Consumes;\n+import javax.ws.rs.DELETE;\n+import javax.ws.rs.DefaultValue;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.QueryParam;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+\n+@Path(\"{scopeId}/mfaoptions\")\n+public class MfaOptions extends AbstractKapuaResource {\n+\n+    private final KapuaLocator locator = KapuaLocator.getInstance();\n+    private final MfaOptionService mfaOptionService = locator.getService(MfaOptionService.class);\n+    private final MfaOptionFactory mfaOptionFactory = locator.getFactory(MfaOptionFactory.class);\n+\n+    /**\n+     * Gets the {@link MfaOption} list in the scope.\n+     *\n+     * @param scopeId The {@link ScopeId} in which to search results.\n+     * @param offset  The result set offset.\n+     * @param limit   The result set limit.\n+     * @return The {@link MfaOptionListResult} of all the MfaOptions associated to the current selected scope.\n+     * @throws KapuaException Whenever something bad happens. See specific {@link KapuaService} exceptions.\n+     * @since 1.4.0\n+     */\n+    @GET\n+    @Produces({MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML})\n+    public MfaOptionListResult simpleQuery(\n+            @PathParam(\"scopeId\") ScopeId scopeId,\n+            @QueryParam(\"userId\") EntityId userId,", "originalCommit": "d00018025bc42dba27aed52697c9339c960da062", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTkxMzYyNQ==", "url": "https://github.com/eclipse/kapua/pull/3166#discussion_r535913625", "bodyText": "@path(\"trust\")", "author": "Coduz", "createdAt": "2020-12-04T08:16:38Z", "path": "rest-api/resources/src/main/java/org/eclipse/kapua/app/api/resources/v1/resources/MfaOptions.java", "diffHunk": "@@ -0,0 +1,205 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.app.api.resources.v1.resources;\n+\n+import org.eclipse.kapua.KapuaEntityNotFoundException;\n+import org.eclipse.kapua.KapuaException;\n+import org.eclipse.kapua.app.api.resources.v1.resources.model.CountResult;\n+import org.eclipse.kapua.app.api.resources.v1.resources.model.EntityId;\n+import org.eclipse.kapua.app.api.resources.v1.resources.model.ScopeId;\n+import org.eclipse.kapua.locator.KapuaLocator;\n+import org.eclipse.kapua.model.query.predicate.AndPredicate;\n+import org.eclipse.kapua.service.KapuaService;\n+import org.eclipse.kapua.service.authentication.credential.mfa.MfaOption;\n+import org.eclipse.kapua.service.authentication.credential.mfa.MfaOptionAttributes;\n+import org.eclipse.kapua.service.authentication.credential.mfa.MfaOptionCreator;\n+import org.eclipse.kapua.service.authentication.credential.mfa.MfaOptionFactory;\n+import org.eclipse.kapua.service.authentication.credential.mfa.MfaOptionListResult;\n+import org.eclipse.kapua.service.authentication.credential.mfa.MfaOptionQuery;\n+import org.eclipse.kapua.service.authentication.credential.mfa.MfaOptionService;\n+\n+import javax.ws.rs.Consumes;\n+import javax.ws.rs.DELETE;\n+import javax.ws.rs.DefaultValue;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.QueryParam;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+\n+@Path(\"{scopeId}/mfaoptions\")\n+public class MfaOptions extends AbstractKapuaResource {\n+\n+    private final KapuaLocator locator = KapuaLocator.getInstance();\n+    private final MfaOptionService mfaOptionService = locator.getService(MfaOptionService.class);\n+    private final MfaOptionFactory mfaOptionFactory = locator.getFactory(MfaOptionFactory.class);\n+\n+    /**\n+     * Gets the {@link MfaOption} list in the scope.\n+     *\n+     * @param scopeId The {@link ScopeId} in which to search results.\n+     * @param offset  The result set offset.\n+     * @param limit   The result set limit.\n+     * @return The {@link MfaOptionListResult} of all the MfaOptions associated to the current selected scope.\n+     * @throws KapuaException Whenever something bad happens. See specific {@link KapuaService} exceptions.\n+     * @since 1.4.0\n+     */\n+    @GET\n+    @Produces({MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML})\n+    public MfaOptionListResult simpleQuery(\n+            @PathParam(\"scopeId\") ScopeId scopeId,\n+            @QueryParam(\"userId\") EntityId userId,\n+            @QueryParam(\"offset\") @DefaultValue(\"0\") int offset,\n+            @QueryParam(\"limit\") @DefaultValue(\"50\") int limit) throws KapuaException {\n+        MfaOptionQuery query = mfaOptionFactory.newQuery(scopeId);\n+\n+        AndPredicate andPredicate = query.andPredicate();\n+        if (userId != null) {\n+            andPredicate.and(query.attributePredicate(MfaOptionAttributes.USER_ID, userId));\n+        }\n+        query.setPredicate(andPredicate);\n+        query.setOffset(offset);\n+        query.setLimit(limit);\n+\n+        return query(scopeId, query);\n+    }\n+\n+    /**\n+     * Queries the results with the given {@link MfaOptionQuery} parameter.\n+     *\n+     * @param scopeId The {@link ScopeId} in which to search results.\n+     * @param query   The {@link MfaOptionQuery} to use to filter results.\n+     * @return The {@link MfaOptionListResult} of all the result matching the given {@link MfaOptionQuery} parameter.\n+     * @throws KapuaException Whenever something bad happens. See specific {@link KapuaService} exceptions.\n+     * @since 1.4.0\n+     */\n+    @POST\n+    @Path(\"_query\")\n+    @Consumes({MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON})\n+    @Produces({MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON})\n+    public MfaOptionListResult query(\n+            @PathParam(\"scopeId\") ScopeId scopeId,\n+            MfaOptionQuery query) throws KapuaException {\n+        query.setScopeId(scopeId);\n+\n+        return (MfaOptionListResult) mfaOptionService.query(query);  // FIXME: it does not seems to work without the cast, why?\n+    }\n+\n+    /**\n+     * Counts the results with the given {@link MfaOptionQuery} parameter.\n+     *\n+     * @param scopeId The {@link ScopeId} in which to search results.\n+     * @param query   The {@link MfaOptionQuery} to use to filter results.\n+     * @return The count of all the result matching the given {@link MfaOptionQuery} parameter.\n+     * @throws KapuaException Whenever something bad happens. See specific {@link KapuaService} exceptions.\n+     * @since 1.4.0\n+     */\n+    @POST\n+    @Path(\"_count\")\n+    @Consumes({MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON})\n+    @Produces({MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON})\n+    public CountResult count(\n+            @PathParam(\"scopeId\") ScopeId scopeId,\n+            MfaOptionQuery query) throws KapuaException {\n+        query.setScopeId(scopeId);\n+\n+        return new CountResult(mfaOptionService.count(query));\n+    }\n+\n+    /**\n+     * Creates a new {@link MfaOption} based on the information provided in {@link MfaOptionCreator} parameter.\n+     *\n+     * @param scopeId          The {@link ScopeId} in which to create the {@link MfaOption}\n+     * @param mfaOptionCreator Provides the information for the new {@link MfaOption} to be created.\n+     * @return The newly created {@link MfaOption} object.\n+     * @throws KapuaException Whenever something bad happens. See specific {@link KapuaService} exceptions.\n+     * @since 1.4.0\n+     */\n+    @POST\n+    @Consumes({MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON})\n+    @Produces({MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON})\n+    public Response create(\n+            @PathParam(\"scopeId\") ScopeId scopeId,\n+            MfaOptionCreator mfaOptionCreator) throws KapuaException {\n+        mfaOptionCreator.setScopeId(scopeId);\n+\n+        return returnCreated(mfaOptionService.create(mfaOptionCreator));\n+    }\n+\n+    /**\n+     * Returns the {@link MfaOption} specified by the \"mfaOptionId\" path parameter.\n+     *\n+     * @param scopeId     The {@link ScopeId} of the requested {@link MfaOption}.\n+     * @param mfaOptionId The id of the requested {@link MfaOption}.\n+     * @return The requested {@link MfaOption} object.\n+     * @throws KapuaException Whenever something bad happens. See specific {@link KapuaService} exceptions.\n+     * @since 1.4.0\n+     */\n+    @GET\n+    @Path(\"{mfaOptionId}\")\n+    @Produces({MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML})\n+    public MfaOption find(\n+            @PathParam(\"scopeId\") ScopeId scopeId,\n+            @PathParam(\"mfaOptionId\") EntityId mfaOptionId) throws KapuaException {\n+        MfaOption mfaOption = mfaOptionService.find(scopeId, mfaOptionId);\n+\n+        if (mfaOption == null) {\n+            throw new KapuaEntityNotFoundException(MfaOption.TYPE, mfaOptionId);\n+        }\n+\n+        return mfaOption;\n+    }\n+\n+    /**\n+     * Deletes the {@link MfaOption} specified by the \"mfaOptionId\" path parameter.\n+     *\n+     * @param mfaOptionId The id of the {@link MfaOption} to be deleted.\n+     * @return HTTP 200 if operation has completed successfully.\n+     * @throws KapuaException Whenever something bad happens. See specific {@link KapuaService} exceptions.\n+     * @since 1.4.0\n+     */\n+    @DELETE\n+    @Path(\"{mfaOptionId}\")\n+    public Response deleteMfaOption(\n+            @PathParam(\"scopeId\") ScopeId scopeId,\n+            @PathParam(\"mfaOptionId\") EntityId mfaOptionId) throws KapuaException {\n+        mfaOptionService.delete(scopeId, mfaOptionId);\n+\n+        return returnNoContent();\n+    }\n+\n+    /**\n+     * Disable trusted machine for a given {@link MfaOption}.\n+     *\n+     * @param scopeId     The ScopeId of the requested {@link MfaOption}.\n+     * @param mfaOptionId The id of the {@link MfaOption}\n+     * @return HTTP 200 if operation has completed successfully.\n+     * @throws KapuaException Whenever something bad happens. See specific {@link KapuaService} exceptions.\n+     * @since 1.4.0\n+     */\n+    @POST\n+    @Path(\"{mfaOptionId}/disabletrust\")", "originalCommit": "d00018025bc42dba27aed52697c9339c960da062", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTkxMzcwMw==", "url": "https://github.com/eclipse/kapua/pull/3166#discussion_r535913703", "bodyText": "@DELETE", "author": "Coduz", "createdAt": "2020-12-04T08:16:48Z", "path": "rest-api/resources/src/main/java/org/eclipse/kapua/app/api/resources/v1/resources/MfaOptions.java", "diffHunk": "@@ -0,0 +1,205 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Eurotech and/or its affiliates and others\n+ *\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *     Eurotech - initial API and implementation\n+ *******************************************************************************/\n+package org.eclipse.kapua.app.api.resources.v1.resources;\n+\n+import org.eclipse.kapua.KapuaEntityNotFoundException;\n+import org.eclipse.kapua.KapuaException;\n+import org.eclipse.kapua.app.api.resources.v1.resources.model.CountResult;\n+import org.eclipse.kapua.app.api.resources.v1.resources.model.EntityId;\n+import org.eclipse.kapua.app.api.resources.v1.resources.model.ScopeId;\n+import org.eclipse.kapua.locator.KapuaLocator;\n+import org.eclipse.kapua.model.query.predicate.AndPredicate;\n+import org.eclipse.kapua.service.KapuaService;\n+import org.eclipse.kapua.service.authentication.credential.mfa.MfaOption;\n+import org.eclipse.kapua.service.authentication.credential.mfa.MfaOptionAttributes;\n+import org.eclipse.kapua.service.authentication.credential.mfa.MfaOptionCreator;\n+import org.eclipse.kapua.service.authentication.credential.mfa.MfaOptionFactory;\n+import org.eclipse.kapua.service.authentication.credential.mfa.MfaOptionListResult;\n+import org.eclipse.kapua.service.authentication.credential.mfa.MfaOptionQuery;\n+import org.eclipse.kapua.service.authentication.credential.mfa.MfaOptionService;\n+\n+import javax.ws.rs.Consumes;\n+import javax.ws.rs.DELETE;\n+import javax.ws.rs.DefaultValue;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.QueryParam;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+\n+@Path(\"{scopeId}/mfaoptions\")\n+public class MfaOptions extends AbstractKapuaResource {\n+\n+    private final KapuaLocator locator = KapuaLocator.getInstance();\n+    private final MfaOptionService mfaOptionService = locator.getService(MfaOptionService.class);\n+    private final MfaOptionFactory mfaOptionFactory = locator.getFactory(MfaOptionFactory.class);\n+\n+    /**\n+     * Gets the {@link MfaOption} list in the scope.\n+     *\n+     * @param scopeId The {@link ScopeId} in which to search results.\n+     * @param offset  The result set offset.\n+     * @param limit   The result set limit.\n+     * @return The {@link MfaOptionListResult} of all the MfaOptions associated to the current selected scope.\n+     * @throws KapuaException Whenever something bad happens. See specific {@link KapuaService} exceptions.\n+     * @since 1.4.0\n+     */\n+    @GET\n+    @Produces({MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML})\n+    public MfaOptionListResult simpleQuery(\n+            @PathParam(\"scopeId\") ScopeId scopeId,\n+            @QueryParam(\"userId\") EntityId userId,\n+            @QueryParam(\"offset\") @DefaultValue(\"0\") int offset,\n+            @QueryParam(\"limit\") @DefaultValue(\"50\") int limit) throws KapuaException {\n+        MfaOptionQuery query = mfaOptionFactory.newQuery(scopeId);\n+\n+        AndPredicate andPredicate = query.andPredicate();\n+        if (userId != null) {\n+            andPredicate.and(query.attributePredicate(MfaOptionAttributes.USER_ID, userId));\n+        }\n+        query.setPredicate(andPredicate);\n+        query.setOffset(offset);\n+        query.setLimit(limit);\n+\n+        return query(scopeId, query);\n+    }\n+\n+    /**\n+     * Queries the results with the given {@link MfaOptionQuery} parameter.\n+     *\n+     * @param scopeId The {@link ScopeId} in which to search results.\n+     * @param query   The {@link MfaOptionQuery} to use to filter results.\n+     * @return The {@link MfaOptionListResult} of all the result matching the given {@link MfaOptionQuery} parameter.\n+     * @throws KapuaException Whenever something bad happens. See specific {@link KapuaService} exceptions.\n+     * @since 1.4.0\n+     */\n+    @POST\n+    @Path(\"_query\")\n+    @Consumes({MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON})\n+    @Produces({MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON})\n+    public MfaOptionListResult query(\n+            @PathParam(\"scopeId\") ScopeId scopeId,\n+            MfaOptionQuery query) throws KapuaException {\n+        query.setScopeId(scopeId);\n+\n+        return (MfaOptionListResult) mfaOptionService.query(query);  // FIXME: it does not seems to work without the cast, why?\n+    }\n+\n+    /**\n+     * Counts the results with the given {@link MfaOptionQuery} parameter.\n+     *\n+     * @param scopeId The {@link ScopeId} in which to search results.\n+     * @param query   The {@link MfaOptionQuery} to use to filter results.\n+     * @return The count of all the result matching the given {@link MfaOptionQuery} parameter.\n+     * @throws KapuaException Whenever something bad happens. See specific {@link KapuaService} exceptions.\n+     * @since 1.4.0\n+     */\n+    @POST\n+    @Path(\"_count\")\n+    @Consumes({MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON})\n+    @Produces({MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON})\n+    public CountResult count(\n+            @PathParam(\"scopeId\") ScopeId scopeId,\n+            MfaOptionQuery query) throws KapuaException {\n+        query.setScopeId(scopeId);\n+\n+        return new CountResult(mfaOptionService.count(query));\n+    }\n+\n+    /**\n+     * Creates a new {@link MfaOption} based on the information provided in {@link MfaOptionCreator} parameter.\n+     *\n+     * @param scopeId          The {@link ScopeId} in which to create the {@link MfaOption}\n+     * @param mfaOptionCreator Provides the information for the new {@link MfaOption} to be created.\n+     * @return The newly created {@link MfaOption} object.\n+     * @throws KapuaException Whenever something bad happens. See specific {@link KapuaService} exceptions.\n+     * @since 1.4.0\n+     */\n+    @POST\n+    @Consumes({MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON})\n+    @Produces({MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON})\n+    public Response create(\n+            @PathParam(\"scopeId\") ScopeId scopeId,\n+            MfaOptionCreator mfaOptionCreator) throws KapuaException {\n+        mfaOptionCreator.setScopeId(scopeId);\n+\n+        return returnCreated(mfaOptionService.create(mfaOptionCreator));\n+    }\n+\n+    /**\n+     * Returns the {@link MfaOption} specified by the \"mfaOptionId\" path parameter.\n+     *\n+     * @param scopeId     The {@link ScopeId} of the requested {@link MfaOption}.\n+     * @param mfaOptionId The id of the requested {@link MfaOption}.\n+     * @return The requested {@link MfaOption} object.\n+     * @throws KapuaException Whenever something bad happens. See specific {@link KapuaService} exceptions.\n+     * @since 1.4.0\n+     */\n+    @GET\n+    @Path(\"{mfaOptionId}\")\n+    @Produces({MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML})\n+    public MfaOption find(\n+            @PathParam(\"scopeId\") ScopeId scopeId,\n+            @PathParam(\"mfaOptionId\") EntityId mfaOptionId) throws KapuaException {\n+        MfaOption mfaOption = mfaOptionService.find(scopeId, mfaOptionId);\n+\n+        if (mfaOption == null) {\n+            throw new KapuaEntityNotFoundException(MfaOption.TYPE, mfaOptionId);\n+        }\n+\n+        return mfaOption;\n+    }\n+\n+    /**\n+     * Deletes the {@link MfaOption} specified by the \"mfaOptionId\" path parameter.\n+     *\n+     * @param mfaOptionId The id of the {@link MfaOption} to be deleted.\n+     * @return HTTP 200 if operation has completed successfully.\n+     * @throws KapuaException Whenever something bad happens. See specific {@link KapuaService} exceptions.\n+     * @since 1.4.0\n+     */\n+    @DELETE\n+    @Path(\"{mfaOptionId}\")\n+    public Response deleteMfaOption(\n+            @PathParam(\"scopeId\") ScopeId scopeId,\n+            @PathParam(\"mfaOptionId\") EntityId mfaOptionId) throws KapuaException {\n+        mfaOptionService.delete(scopeId, mfaOptionId);\n+\n+        return returnNoContent();\n+    }\n+\n+    /**\n+     * Disable trusted machine for a given {@link MfaOption}.\n+     *\n+     * @param scopeId     The ScopeId of the requested {@link MfaOption}.\n+     * @param mfaOptionId The id of the {@link MfaOption}\n+     * @return HTTP 200 if operation has completed successfully.\n+     * @throws KapuaException Whenever something bad happens. See specific {@link KapuaService} exceptions.\n+     * @since 1.4.0\n+     */\n+    @POST", "originalCommit": "d00018025bc42dba27aed52697c9339c960da062", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "e22f8cfeb4e66d396189f97db3d1479d0e39abb0", "url": "https://github.com/eclipse/kapua/commit/e22f8cfeb4e66d396189f97db3d1479d0e39abb0", "message": "Fixed QA failure caused by TriggerNeverFiresException\n\nSigned-off-by: Gianluca Barbon <gianluca.barbon@eurotech.com>", "committedDate": "2020-12-15T13:24:25Z", "type": "commit"}, {"oid": "74326cbb374f8f89a5072d28f8897b037cdaa40d", "url": "https://github.com/eclipse/kapua/commit/74326cbb374f8f89a5072d28f8897b037cdaa40d", "message": "MFA authentication and CRUD operations via REST API\n\nSigned-off-by: Gianluca Barbon <gianluca.barbon@eurotech.com>", "committedDate": "2020-12-15T14:05:57Z", "type": "commit"}, {"oid": "79fb44fabd35ed48c44d978981846d63f59f5b2b", "url": "https://github.com/eclipse/kapua/commit/79fb44fabd35ed48c44d978981846d63f59f5b2b", "message": "Preventing Mfa creation from other users, only self management is allowed\n\nSigned-off-by: Gianluca Barbon <gianluca.barbon@eurotech.com>", "committedDate": "2020-12-15T14:05:57Z", "type": "commit"}, {"oid": "8328b635fa4041dd896f5c0d29b30e238de22469", "url": "https://github.com/eclipse/kapua/commit/8328b635fa4041dd896f5c0d29b30e238de22469", "message": "Disabling MFA for external non-internal users\n\nSigned-off-by: Gianluca Barbon <gianluca.barbon@eurotech.com>", "committedDate": "2020-12-15T14:05:57Z", "type": "commit"}, {"oid": "0688906c190600e344e09637514b33a6e857eab4", "url": "https://github.com/eclipse/kapua/commit/0688906c190600e344e09637514b33a6e857eab4", "message": "Sso docker-compose aligned to latest datastore changes and elasticsearch v. 6.8.7\n\nSigned-off-by: Gianluca Barbon <gianluca.barbon@eurotech.com>", "committedDate": "2020-12-15T14:05:57Z", "type": "commit"}, {"oid": "e3c41a85726676589e2b7f9a75d08c8bec15dbc4", "url": "https://github.com/eclipse/kapua/commit/e3c41a85726676589e2b7f9a75d08c8bec15dbc4", "message": "MFA trust key security improved\n\nSigned-off-by: Gianluca Barbon <gianluca.barbon@eurotech.com>", "committedDate": "2020-12-15T14:05:57Z", "type": "commit"}, {"oid": "e3c41a85726676589e2b7f9a75d08c8bec15dbc4", "url": "https://github.com/eclipse/kapua/commit/e3c41a85726676589e2b7f9a75d08c8bec15dbc4", "message": "MFA trust key security improved\n\nSigned-off-by: Gianluca Barbon <gianluca.barbon@eurotech.com>", "committedDate": "2020-12-15T14:05:57Z", "type": "forcePushed"}]}