{"pr_number": 8151, "pr_title": "SAK-43560 Move sakai-date-picker to use Flatpickr", "pr_createdAt": "2020-04-16T14:21:26Z", "pr_url": "https://github.com/sakaiproject/sakai/pull/8151", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTU5NjE3Mw==", "url": "https://github.com/sakaiproject/sakai/pull/8151#discussion_r409596173", "bodyText": "Looks like there's a label missing for this input. That makes it hard for people using screen readers or voice control to use the input.", "author": "accesslint", "createdAt": "2020-04-16T14:21:35Z", "path": "webcomponents/tool/src/main/frontend/js/sakai-date-picker.js", "diffHunk": "@@ -3,44 +3,90 @@ import {html} from \"./assets/lit-element/lit-element.js\";\n \n class SakaiDatePicker extends SakaiElement {\n \n+  constructor() {\n+\n+    super();\n+\n+    this.hoursFromNow = 0;\n+\n+    this.idSalt = Math.floor(Math.random() * Math.floor(1000));\n+    this.start = moment();\n+\n+    this.i18n = {};\n+    this.loadTranslations(\"date-picker-wc\").then(r => this.i18n = r);\n+  }\n+\n   static get properties() {\n \n     return {\n-      initialValue: { attribute: \"initial-value\", type : String },\n-      parseFormat: { attribute: \"parse-format\", type: String },\n+      hoursFromNow: { attribute: \"hours-from-now\", type: Number },\n+      initialValue: { attribute: \"initial-value\", type: Number }\n     };\n+  }\n+\n+  set initialValue(newValue) {\n \n+    this._initialValue = newValue;\n+    this.start = this.getPreferredSakaiDatetime(newValue);\n   }\n \n-  constructor() {\n+  get initialValue() {\n+    return this._initialValue;\n+  }\n \n-    super();\n+  set hoursFromNow(newValue) {\n+\n+    this._hoursFromNow = newValue;\n+    this.start = moment(this.start).add(this.hoursFromNow, \"hours\");\n+  }\n \n-    this.parseFormat = \"YYYY-MM-DDTHH:mm:ssZ\";\n-    this.inputId = `date-picker-${Math.floor(Math.random() * Math.floor(1000))}`;\n+  get hoursFromNow() {\n+    return this._hoursFromNow;\n   }\n \n   firstUpdated(changedProperties) {\n \n-    localDatePicker({\n-      input: `#${this.inputId}`,\n-      useTime: 1,\n-      val: this.initialValue,\n-      parseFormat: this.parseFormat,\n-      onDateTimeSelected: (v) => this.fireEvent(v),\n-    });\n+    const self = this;\n+\n+    let config = {\n+      enableTime: true,\n+      locale: portal.locale.split(\"-\")[0],\n+      time_24hr: true,\n+      allowInput: true,\n+      defaultHour: this.start.hours(),\n+      defaultMinute: this.start.minutes(),\n+      static: true,\n+      onReady() {\n+        this.showTimeInput = true;\n+        this.setDate(self.start.toDate());\n+      },\n+      onChange(selectedDates) {\n+        self.dispatchEvent(new CustomEvent(\"datetime-selected\", { detail: { epochMillis: selectedDates[0].getTime() }, bubbles: true }));\n+      }\n+    };\n+\n+    config.locale = window.top.portal && window.top.portal.locale ? window.top.portal.locale.split(\"-\")[0] : \"default\";\n+    if (config.locale === \"en\") config.locale = \"default\";\n+\n+    flatpickr(`#picker-${this.idSalt}`, config);\n   }\n \n   render() {\n \n     return html`\n-      <input id=\"${this.inputId}\" type=\"text\" />\n-      <div>${this.dateTime}</div>\n+      <input type=\"text\" id=\"picker-${this.idSalt}\" size=\"30\" placeholder=\"${this.i18n[\"input_placeholder\"]}\" />", "originalCommit": "b92e33c89c2865c2219cf0679a63ef53a88f88f2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "b8856b46fc1b1ad84eac7fd26fe12a599c153aeb", "url": "https://github.com/sakaiproject/sakai/commit/b8856b46fc1b1ad84eac7fd26fe12a599c153aeb", "message": "SAK-43560 Move sakai-date-picker to use Flatpickr\n\nhttps://jira.sakaiproject.org/browse/SAK-43560", "committedDate": "2020-04-16T14:23:00Z", "type": "forcePushed"}, {"oid": "458d96201a5c4c00a35f65de66b5bcaf99371306", "url": "https://github.com/sakaiproject/sakai/commit/458d96201a5c4c00a35f65de66b5bcaf99371306", "message": "SAK-43560 Move sakai-date-picker to use Flatpickr\n\nhttps://jira.sakaiproject.org/browse/SAK-43560", "committedDate": "2020-04-16T15:43:57Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTY2MDM5MA==", "url": "https://github.com/sakaiproject/sakai/pull/8151#discussion_r409660390", "bodyText": "Looks like there's a label missing for this input. That makes it hard for people using screen readers or voice control to use the input.", "author": "accesslint", "createdAt": "2020-04-16T15:45:14Z", "path": "webcomponents/tool/src/main/frontend/js/sakai-date-picker.js", "diffHunk": "@@ -1,46 +1,113 @@\n import {SakaiElement} from \"./sakai-element.js\";\n import {html} from \"./assets/lit-element/lit-element.js\";\n \n+/**\n+ * Renders an input which, when clicked, launches a Flatpickr instance. This tag relies\n+ * on both flatpickr.js and moment.js being in scope.\n+ *\n+ * @example <caption>Usage:</caption>\n+ * <sakai-date-picker epoch-millis=\"345922925445\" @/>\n+ * <sakai-date-picker hours-from-now=\"5\" />\n+ *\n+ * The tag fires the event 'datetime-selected'. You'd handle that with (vanillajs):\n+ *\n+ * sakaiDatePicker.addEventListener(\"datetime-selected\", (e) => console.log(e.detail.epochMillis));\n+ *\n+ * @extends SakaiElement\n+ * @author Adrian Fish <adrian.r.fish@gmail.com>\n+ */\n class SakaiDatePicker extends SakaiElement {\n \n+  constructor() {\n+\n+    super();\n+\n+    this.hoursFromNow = 0;\n+\n+    this.idSalt = Math.floor(Math.random() * Math.floor(1000));\n+    this.start = moment();\n+\n+    this.i18n = {};\n+    this.loadTranslations(\"date-picker-wc\").then(r => this.i18n = r);\n+  }\n+\n   static get properties() {\n \n     return {\n-      initialValue: { attribute: \"initial-value\", type : String },\n-      parseFormat: { attribute: \"parse-format\", type: String },\n+      hoursFromNow: { attribute: \"hours-from-now\", type: Number },\n+      initialValue: { attribute: \"initial-value\", type: Number }\n     };\n+  }\n+\n+  set initialValue(newValue) {\n+\n+    this._initialValue = newValue;\n \n+    if (newValue) {\n+      this.start = this.getPreferredSakaiDatetime(newValue);\n+    }\n   }\n \n-  constructor() {\n+  get initialValue() {\n+    return this._initialValue;\n+  }\n \n-    super();\n+  set hoursFromNow(newValue) {\n+\n+    this._hoursFromNow = newValue;\n+\n+    if (newValue) {\n+      this.start = moment(this.start).add(this.hoursFromNow, \"hours\");\n+    }\n+  }\n \n-    this.parseFormat = \"YYYY-MM-DDTHH:mm:ssZ\";\n-    this.inputId = `date-picker-${Math.floor(Math.random() * Math.floor(1000))}`;\n+  get hoursFromNow() {\n+    return this._hoursFromNow;\n   }\n \n   firstUpdated(changedProperties) {\n \n-    localDatePicker({\n-      input: `#${this.inputId}`,\n-      useTime: 1,\n-      val: this.initialValue,\n-      parseFormat: this.parseFormat,\n-      onDateTimeSelected: (v) => this.fireEvent(v),\n-    });\n+    const self = this;\n+\n+    let config = {\n+      enableTime: true,\n+      locale: portal.locale.split(\"-\")[0],\n+      time_24hr: true,\n+      allowInput: true,\n+      defaultHour: this.start.hours(),\n+      defaultMinute: this.start.minutes(),\n+      static: true,\n+      onReady() {\n+        this.showTimeInput = true;\n+        this.setDate(self.start.toDate());\n+      },\n+      onChange(selectedDates) {\n+        self.dispatchEvent(new CustomEvent(\"datetime-selected\", { detail: { epochMillis: selectedDates[0].getTime() }, bubbles: true }));\n+      }\n+    };\n+\n+    config.locale = window.top.portal && window.top.portal.locale ? window.top.portal.locale.split(\"-\")[0] : \"default\";\n+    if (config.locale === \"en\") config.locale = \"default\";\n+\n+    flatpickr(`#picker-${this.idSalt}`, config);\n   }\n \n   render() {\n \n     return html`\n-      <input id=\"${this.inputId}\" type=\"text\" />\n-      <div>${this.dateTime}</div>\n+      <input type=\"text\" id=\"picker-${this.idSalt}\" size=\"30\" placeholder=\"${this.i18n[\"input_placeholder\"]}\" />", "originalCommit": "458d96201a5c4c00a35f65de66b5bcaf99371306", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "44cf1351bd3ac988c50f9e56a0dcfb3efd48ecb9", "url": "https://github.com/sakaiproject/sakai/commit/44cf1351bd3ac988c50f9e56a0dcfb3efd48ecb9", "message": "SAK-43560 Move sakai-date-picker to use Flatpickr\n\nhttps://jira.sakaiproject.org/browse/SAK-43560", "committedDate": "2020-04-16T15:51:46Z", "type": "forcePushed"}, {"oid": "f4c2851c4949d4ba4df305df67d63da59e3eb846", "url": "https://github.com/sakaiproject/sakai/commit/f4c2851c4949d4ba4df305df67d63da59e3eb846", "message": "SAK-43560 Move sakai-date-picker to use Flatpickr\n\nhttps://jira.sakaiproject.org/browse/SAK-43560", "committedDate": "2020-04-16T16:04:06Z", "type": "forcePushed"}, {"oid": "045c6d9a38cef99e920233699edbc57574b52e18", "url": "https://github.com/sakaiproject/sakai/commit/045c6d9a38cef99e920233699edbc57574b52e18", "message": "SAK-43560 Move sakai-date-picker to use Flatpickr\n\nhttps://jira.sakaiproject.org/browse/SAK-43560", "committedDate": "2020-04-16T18:57:48Z", "type": "commit"}, {"oid": "045c6d9a38cef99e920233699edbc57574b52e18", "url": "https://github.com/sakaiproject/sakai/commit/045c6d9a38cef99e920233699edbc57574b52e18", "message": "SAK-43560 Move sakai-date-picker to use Flatpickr\n\nhttps://jira.sakaiproject.org/browse/SAK-43560", "committedDate": "2020-04-16T18:57:48Z", "type": "forcePushed"}]}