{"pr_number": 7998, "pr_title": "SAK-39989 Sitestats unit test modernization", "pr_createdAt": "2020-03-10T05:49:25Z", "pr_url": "https://github.com/sakaiproject/sakai/pull/7998", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDExODg5Mw==", "url": "https://github.com/sakaiproject/sakai/pull/7998#discussion_r390118893", "bodyText": "Add an EOF here", "author": "mpellicer", "createdAt": "2020-03-10T06:41:43Z", "path": "sitestats/sitestats-impl/src/test/org/sakaiproject/sitestats/test/SiteStatsTestConfiguration.java", "diffHunk": "@@ -0,0 +1,329 @@\n+package org.sakaiproject.sitestats.test;\n+\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.spy;\n+import static org.mockito.Mockito.when;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Properties;\n+import java.util.Set;\n+\n+import javax.annotation.Resource;\n+import javax.sql.DataSource;\n+\n+import org.hibernate.SessionFactory;\n+import org.hibernate.dialect.HSQLDialect;\n+import org.hsqldb.jdbcDriver;\n+import org.sakaiproject.alias.api.AliasService;\n+import org.sakaiproject.announcement.api.AnnouncementService;\n+import org.sakaiproject.api.app.scheduler.ScheduledInvocationManager;\n+import org.sakaiproject.api.app.scheduler.SchedulerManager;\n+import org.sakaiproject.authz.api.AuthzGroupService;\n+import org.sakaiproject.authz.api.FunctionManager;\n+import org.sakaiproject.authz.api.SecurityService;\n+import org.sakaiproject.calendar.api.CalendarService;\n+import org.sakaiproject.component.api.ServerConfigurationService;\n+import org.sakaiproject.content.api.ContentHostingService;\n+import org.sakaiproject.content.api.ContentTypeImageService;\n+import org.sakaiproject.db.api.SqlService;\n+import org.sakaiproject.email.api.DigestService;\n+import org.sakaiproject.entity.api.EntityManager;\n+import org.sakaiproject.entitybroker.DeveloperHelperService;\n+import org.sakaiproject.entitybroker.entityprovider.EntityProviderManager;\n+import org.sakaiproject.event.api.EventTrackingService;\n+import org.sakaiproject.event.api.LearningResourceStoreService;\n+import org.sakaiproject.event.api.UsageSessionService;\n+import org.sakaiproject.exception.IdUnusedException;\n+import org.sakaiproject.lessonbuildertool.model.SimplePageToolDao;\n+import org.sakaiproject.memory.api.MemoryService;\n+import org.sakaiproject.site.api.SiteService;\n+import org.sakaiproject.sitestats.api.StatsManager;\n+import org.sakaiproject.sitestats.test.data.FakeData;\n+import org.sakaiproject.sitestats.test.mocks.FakeEntityManager;\n+import org.sakaiproject.springframework.orm.hibernate.AdditionalHibernateMappings;\n+import org.sakaiproject.time.api.TimeService;\n+import org.sakaiproject.time.api.UserTimeService;\n+import org.sakaiproject.tool.api.SessionManager;\n+import org.sakaiproject.tool.api.Tool;\n+import org.sakaiproject.tool.api.ToolManager;\n+import org.sakaiproject.user.api.PreferencesService;\n+import org.sakaiproject.user.api.UserDirectoryService;\n+import org.sakaiproject.util.ResourceLoader;\n+import org.sakaiproject.util.api.FormattedText;\n+import org.sakaiproject.util.api.LinkMigrationHelper;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.ImportResource;\n+import org.springframework.context.annotation.PropertySource;\n+import org.springframework.core.env.Environment;\n+import org.springframework.jdbc.datasource.DriverManagerDataSource;\n+import org.springframework.orm.hibernate4.HibernateTransactionManager;\n+import org.springframework.orm.hibernate4.LocalSessionFactoryBuilder;\n+import org.springframework.transaction.PlatformTransactionManager;\n+import org.springframework.transaction.annotation.EnableTransactionManagement;\n+\n+@Configuration\n+@EnableTransactionManagement\n+@ImportResource(\"classpath:/WEB-INF/components.xml\")\n+@PropertySource(\"classpath:/hibernate.properties\")\n+public class SiteStatsTestConfiguration {\n+\n+    @Autowired\n+    private Environment environment;\n+\n+    @Resource(name = \"org.sakaiproject.springframework.orm.hibernate.AdditionalHibernateMappings.sitestats\")\n+    private AdditionalHibernateMappings hibernateMappings;\n+\n+    private DataSource dataSource;\n+    private PlatformTransactionManager platformTransactionManager;\n+    private SessionFactory sessionFactory;\n+\n+    static {\n+        System.setProperty(\"sakai.tests.enabled\", \"true\");\n+    }\n+\n+    @Bean(name = \"org.sakaiproject.springframework.orm.hibernate.GlobalSessionFactory\")\n+    public SessionFactory sessionFactory() throws IOException {\n+        if (sessionFactory == null) {\n+            LocalSessionFactoryBuilder sfb = new LocalSessionFactoryBuilder(dataSource());\n+            hibernateMappings.processAdditionalMappings(sfb);\n+            sfb.addProperties(hibernateProperties());\n+            sessionFactory = sfb.buildSessionFactory();\n+        }\n+        return sessionFactory;\n+    }\n+\n+    @Bean(name = \"javax.sql.DataSource\")\n+    public DataSource dataSource() {\n+        if (dataSource == null) {\n+            DriverManagerDataSource db = new DriverManagerDataSource();\n+            db.setDriverClassName(environment.getProperty(org.hibernate.cfg.Environment.DRIVER, jdbcDriver.class.getName()));\n+            db.setUrl(environment.getProperty(org.hibernate.cfg.Environment.URL, \"jdbc:hsqldb:mem:test\"));\n+            db.setUsername(environment.getProperty(org.hibernate.cfg.Environment.USER, \"sa\"));\n+            db.setPassword(environment.getProperty(org.hibernate.cfg.Environment.PASS, \"\"));\n+            dataSource = db;\n+        }\n+        return dataSource;\n+    }\n+\n+    @Bean\n+    public Properties hibernateProperties() {\n+        return new Properties() {\n+            {\n+                setProperty(org.hibernate.cfg.Environment.DIALECT, environment.getProperty(org.hibernate.cfg.Environment.DIALECT, HSQLDialect.class.getName()));\n+                setProperty(org.hibernate.cfg.Environment.HBM2DDL_AUTO, environment.getProperty(org.hibernate.cfg.Environment.HBM2DDL_AUTO));\n+                setProperty(org.hibernate.cfg.Environment.ENABLE_LAZY_LOAD_NO_TRANS, environment.getProperty(org.hibernate.cfg.Environment.ENABLE_LAZY_LOAD_NO_TRANS, \"true\"));\n+            }\n+        };\n+    }\n+\n+    @Bean(name = \"org.sakaiproject.springframework.orm.hibernate.GlobalTransactionManager\")\n+    public PlatformTransactionManager transactionManager() throws IOException {\n+        if (platformTransactionManager == null) {\n+            if (sessionFactory == null) {\n+                sessionFactory();\n+            }\n+            HibernateTransactionManager txManager = new HibernateTransactionManager();\n+            txManager.setSessionFactory(sessionFactory);\n+            platformTransactionManager = txManager;\n+        }\n+        return platformTransactionManager;\n+    }\n+\n+    @Bean(name = \"org.sakaiproject.alias.api.AliasService\")\n+    public AliasService aliasService() {\n+        return mock(AliasService.class);\n+    }\n+\n+    @Bean(name = \"org.sakaiproject.announcement.api.AnnouncementService\")\n+    public AnnouncementService announcementService() {\n+        return mock(AnnouncementService.class);\n+    }\n+\n+    @Bean(name = \"org.sakaiproject.authz.api.AuthzGroupService\")\n+    public AuthzGroupService authzGroupService() {\n+        return mock(AuthzGroupService.class);\n+    }\n+\n+    @Bean(name = \"org.sakaiproject.calendar.api.CalendarService\")\n+    public CalendarService calendarService() {\n+        return mock(CalendarService.class);\n+    }\n+\n+    @Bean(name = \"org.sakaiproject.content.api.ContentHostingService\")\n+    public ContentHostingService contentHostingService() {\n+        return mock(ContentHostingService.class);\n+    }\n+\n+    @Bean(name = \"org.sakaiproject.content.api.ContentTypeImageService\")\n+    public ContentTypeImageService contentTypeImageService() {\n+        ContentTypeImageService contentTypeImageService = mock(ContentTypeImageService.class);\n+        when(contentTypeImageService.getContentTypeImage(\"folder\")).thenReturn(\"sakai/folder.gif\");\n+        when(contentTypeImageService.getContentTypeImage(\"image/png\")).thenReturn(\"sakai/image.gif\");\n+        return contentTypeImageService;\n+    }\n+\n+    @Bean(name = \"org.sakaiproject.sitestats.test.DB\")\n+    public DB db() throws IOException {\n+        DB db = new DB();\n+        if (sessionFactory == null) {\n+            sessionFactory();\n+        }\n+        db.setSessionFactory(sessionFactory);\n+        return db;\n+    }\n+\n+    @Bean(name = \"org.sakaiproject.entitybroker.DeveloperHelperService\")\n+    public DeveloperHelperService developerHelperService() {\n+        return mock(DeveloperHelperService.class);\n+    }\n+\n+    @Bean(name = \"org.sakaiproject.email.api.DigestService\")\n+    public DigestService digestService() {\n+        return mock(DigestService.class);\n+    }\n+\n+    @Bean(name = \"org.sakaiproject.entity.api.EntityManager\")\n+    public EntityManager entityManager() {\n+        return spy(FakeEntityManager.class);\n+    }\n+\n+    @Bean(name = \"org.sakaiproject.entitybroker.entityprovider.EntityProviderManager\")\n+    public EntityProviderManager entityProviderManager() {\n+        return mock(EntityProviderManager.class);\n+    }\n+\n+    @Bean(name = \"org.sakaiproject.event.api.EventTrackingService\")\n+    public EventTrackingService eventTrackingService() {\n+        return mock(EventTrackingService.class);\n+    }\n+\n+    @Bean(name = \"org.sakaiproject.util.api.FormattedText\")\n+    public FormattedText formattedText() {\n+        return mock(FormattedText.class);\n+    }\n+\n+    @Bean(name = \"org.sakaiproject.authz.api.FunctionManager\")\n+    public FunctionManager functionManager() {\n+        return mock(FunctionManager.class);\n+    }\n+\n+    @Bean(name = \"org.sakaiproject.event.api.LearningResourceStoreService\")\n+    public LearningResourceStoreService learningResourceStoreService() {\n+        return mock(LearningResourceStoreService.class);\n+    }\n+\n+    @Bean(name = \"org.sakaiproject.util.api.LinkMigrationHelper\")\n+    public LinkMigrationHelper linkMigrationHelper() {\n+        return mock(LinkMigrationHelper.class);\n+    }\n+\n+    @Bean(name = \"org.sakaiproject.memory.api.MemoryService\")\n+    public MemoryService memoryService() {\n+        MemoryService memoryService = new org.sakaiproject.memory.mock.MemoryService();\n+        return memoryService;\n+    }\n+\n+    @Bean(name = \"org.sakaiproject.user.api.PreferencesService\")\n+    public PreferencesService preferencesService() {\n+        return mock(PreferencesService.class);\n+    }\n+\n+    @Bean(name = \"org.sakaiproject.util.ResourceLoader.sitestats\")\n+    public ResourceLoader resourceLoader() {\n+        ResourceLoader resourceLoader = mock(ResourceLoader.class);\n+        when(resourceLoader.getString(\"report_content_attachments\")).thenReturn(\"Attachments\");\n+        when(resourceLoader.getString(\"th_site\")).thenReturn(\"Site\");\n+        when(resourceLoader.getString(\"th_id\")).thenReturn(\"User ID\");\n+        when(resourceLoader.getString(\"th_user\")).thenReturn(\"name\");\n+        when(resourceLoader.getString(\"th_total\")).thenReturn(\"Total\");\n+        return resourceLoader;\n+    }\n+\n+    @Bean(name = \"org.sakaiproject.api.app.scheduler.ScheduledInvocationManager\")\n+    public ScheduledInvocationManager scheduledInvocationManager() {\n+        return mock(ScheduledInvocationManager.class);\n+    }\n+\n+    @Bean(name = \"org.sakaiproject.api.app.scheduler.SchedulerManager\")\n+    public SchedulerManager schedulerManager() {\n+        return mock(SchedulerManager.class);\n+    }\n+\n+    @Bean(name = \"org.sakaiproject.authz.api.SecurityService\")\n+    public SecurityService securityService() {\n+        return mock(SecurityService.class);\n+    }\n+\n+    @Bean(name = \"org.sakaiproject.component.api.ServerConfigurationService\")\n+    public ServerConfigurationService serverConfigurationService() {\n+        ServerConfigurationService scs = mock(ServerConfigurationService.class);\n+        when(scs.getString(\"sitestats.db\", \"internal\")).thenReturn(\"internal\");\n+        when(scs.getString(\"hibernate.dialect\", \"org.hibernate.dialect.HSQLDialect\")).thenReturn(\"org.hibernate.dialect.HSQLDialect\");\n+        when(scs.getBoolean(\"auto.ddl\", true)).thenReturn(true);\n+        when(scs.getServerUrl()).thenReturn(\"http://localhost:8080\");\n+        return scs;\n+    }\n+\n+    @Bean(name = \"org.sakaiproject.tool.api.SessionManager\")\n+    public SessionManager sessionManager() {\n+        return mock(SessionManager.class);\n+    }\n+\n+    @Bean(name = \"org.sakaiproject.lessonbuildertool.model.SimplePageToolDao\")\n+    public SimplePageToolDao simplePageToolDao() {\n+        return mock(SimplePageToolDao.class);\n+    }\n+\n+    @Bean(name = \"org.sakaiproject.db.api.SqlService\")\n+    public SqlService sqlService() {\n+        return mock(SqlService.class);\n+    }\n+\n+    @Bean(name = \"org.sakaiproject.site.api.SiteService\")\n+    public SiteService siteService() throws IdUnusedException {\n+        SiteService siteService = mock(SiteService.class);\n+        when(siteService.getSite(null)).thenThrow(new IdUnusedException(\"null\"));\n+        when(siteService.getSite(\"non_existent_site\")).thenThrow(new IdUnusedException(\"non_existent_site\"));\n+        when(siteService.isUserSite(\"non_existent_site\")).thenReturn(false);\n+        when(siteService.isSpecialSite(\"non_existent_site\")).thenReturn(false);\n+\n+        return siteService;\n+    }\n+\n+    @Bean(name = \"org.sakaiproject.time.api.TimeService\")\n+    public TimeService timeService() {\n+        return mock(TimeService.class);\n+    }\n+\n+    @Bean(name = \"org.sakaiproject.tool.api.ToolManager\")\n+    public ToolManager toolManager() {\n+        ToolManager toolManager = mock(ToolManager.class);\n+        Tool chatTool = mock(Tool.class);\n+        when(chatTool.getId()).thenReturn(FakeData.TOOL_CHAT);\n+        Tool resourcesTool = mock(Tool.class);\n+        when(resourcesTool.getId()).thenReturn(StatsManager.RESOURCES_TOOLID);\n+        Set<Tool> tools = new HashSet<>(Arrays.asList(chatTool, resourcesTool));\n+        when(toolManager.findTools(null, null)).thenReturn(tools);\n+        return toolManager;\n+    }\n+\n+    @Bean(name = \"org.sakaiproject.user.api.UserDirectoryService\")\n+    public UserDirectoryService userDirectoryService() {\n+        return mock(UserDirectoryService.class);\n+    }\n+\n+    @Bean(name = \"org.sakaiproject.event.api.UsageSessionService\")\n+    public UsageSessionService usageSessionService() {\n+        return mock(UsageSessionService.class);\n+    }\n+\n+    @Bean(name = \"org.sakaiproject.time.api.UserTimeService\")\n+    public UserTimeService userTimeService() {\n+        return mock(UserTimeService.class);\n+    }\n+\n+}", "originalCommit": "f761fb664571f5a9ec2bd9def4b5664b54839b9a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "fb0aa79f257bff8a49e6855a345c51db0c33134e", "url": "https://github.com/sakaiproject/sakai/commit/fb0aa79f257bff8a49e6855a345c51db0c33134e", "message": "SAK-39989 Sitestats unit test modernization", "committedDate": "2020-04-30T22:29:05Z", "type": "forcePushed"}, {"oid": "e20a07afa52f803a6c3c4aa5189e23d27763a71b", "url": "https://github.com/sakaiproject/sakai/commit/e20a07afa52f803a6c3c4aa5189e23d27763a71b", "message": "SAK-39989 Sitestats unit test modernization", "committedDate": "2020-05-01T14:09:20Z", "type": "commit"}, {"oid": "e20a07afa52f803a6c3c4aa5189e23d27763a71b", "url": "https://github.com/sakaiproject/sakai/commit/e20a07afa52f803a6c3c4aa5189e23d27763a71b", "message": "SAK-39989 Sitestats unit test modernization", "committedDate": "2020-05-01T14:09:20Z", "type": "forcePushed"}]}