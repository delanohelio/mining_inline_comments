{"pr_number": 7909, "pr_title": "SAK-42959 Default lang-datepicker to user's local timestamp", "pr_createdAt": "2020-02-18T20:27:50Z", "pr_url": "https://github.com/sakaiproject/sakai/pull/7909", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk0NzgyMg==", "url": "https://github.com/sakaiproject/sakai/pull/7909#discussion_r380947822", "bodyText": "Just one method called addUserTimezoneInfo ? And then we add 3-4 new vars around time?", "author": "ottenhoff", "createdAt": "2020-02-18T21:33:27Z", "path": "portal/portal-impl/impl/src/java/org/sakaiproject/portal/charon/handlers/SiteHandler.java", "diffHunk": "@@ -556,6 +556,10 @@ public void doSite(HttpServletRequest req, HttpServletResponse res, Session sess\n \t\trcontext.put(\"showFavStarsOnAllFavSites\",ServerConfigurationService.getBoolean(SAK_PROP_SHOW_FAV_STARS_ON_ALL, SAK_PROP_SHOW_FAV_STARS_ON_ALL_DFLT));\n \t\t\n \t\taddLocale(rcontext, site, session.getUserId());\n+\n+\t\taddServerTime(rcontext);\n+\n+\t\taddUserTimezoneOffset(rcontext);", "originalCommit": "f9af75b3e54be203c85db3ae6e700c56fdccf543", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk0ODM3OA==", "url": "https://github.com/sakaiproject/sakai/pull/7909#discussion_r380948378", "bodyText": "while we are here, why don't we add the user's current (localized) date/time as ISO-8601 .... and might as well add their preferred timezone (e.g., Europe/Stockholm) .......", "author": "ottenhoff", "createdAt": "2020-02-18T21:34:28Z", "path": "portal/portal-impl/impl/src/java/org/sakaiproject/portal/charon/handlers/BasePortalHandler.java", "diffHunk": "@@ -209,4 +210,14 @@ protected void addLocale(PortalRenderContext rcontext, Site site, String userId)\n \t\t\ttimeService.clearLocalTimeZone(userId);\n \t\t}\n \t}\n+\n+\tprotected void addServerTime(PortalRenderContext rcontext) {\n+\t\trcontext.put(\"serverTime\", Instant.now().toEpochMilli());\n+\t}\n+\n+\tprotected void addUserTimezoneOffset(PortalRenderContext rcontext) {\n+\n+\t\tint offset = timeService.getLocalTimeZone().getOffset(Instant.now().toEpochMilli());\n+\t\trcontext.put(\"userTimezoneOffset\", offset);\n+\t}", "originalCommit": "f9af75b3e54be203c85db3ae6e700c56fdccf543", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk0ODY2OQ==", "url": "https://github.com/sakaiproject/sakai/pull/7909#discussion_r380948669", "bodyText": "you GMT developers live in an offset-free world!\n var osTzOffset = (new Date()).getTimezoneOffset();\n            initVal = moment(parseInt(portal.serverTime))\n              .add(portal.userTimezoneOffset, 'ms')\n              .add(osTzOffset, 'm')\n              .toDate();", "author": "ottenhoff", "createdAt": "2020-02-18T21:35:07Z", "path": "library/src/webapp/js/lang-datepicker/lang-datepicker.js", "diffHunk": "@@ -1684,40 +1684,47 @@ if(c&&c._defaults.timeOnly&&b.input.val()!==b.lastVal)try{$.datepicker._updateDa\n \t\t\t}\n \t\t}\n \n-\t\t/**\n-\t\t * Initiallizes the base date for the picker.\n-\t\t * This gets the date that should be displayed to the user.\n-\t\t * \n-\t\t */\n-\t\tvar initDateTime = function () {\n-\t\t\tvar initVal;\n+    /**\n+     * Initiallizes the base date for the picker.\n+     * This gets the date that should be displayed to the user.\n+     *\n+     */\n+    var initDateTime = function () {\n \n- \t\t\t// If val is undefined, we assume we're to use the input value \n-\t\t\tif (typeof options.val === 'undefined' && $(options.input).val() !== '') {\n-\t\t\t\tinitVal = $(options.input).val();\n-\t\t\t}\n+      var initVal;\n \n-\t\t\t// if val is set, use it\n-\t\t\tif (typeof options.val !== 'undefined') {\n-\t\t\t\tinitVal = options.val;\n-\t\t\t}\n+      // If val is undefined, we assume we're to use the input value\n+      if (typeof options.val === 'undefined' && $(options.input).val() !== '') {\n+        initVal = $(options.input).val();\n+      }\n \n-\t\t\t// if getval is set, this will override val\n-\t\t\tif (typeof options.getval !== 'undefined') {\n-\t\t\t\tinitVal = $(options.getval).val();\n-\t\t\t}\n+      // if val is set, use it\n+      if (typeof options.val !== 'undefined') {\n+        initVal = options.val;\n+      }\n \n-\t\t\t// finally trim the initVal and make sure it is set so we don't Dec 1969 the user\n-\t\t\tinitVal = jQuery.trim(initVal);\n+      // if getval is set, this will override val\n+      if (typeof options.getval !== 'undefined') {\n+        initVal = $(options.getval).val();\n+      }\n \n-\t\t\tif (!(initVal == \"\" && options.allowEmptyDate)){\n-\t\t\t\tif (!initVal) initVal = new Date();\n-\t\t\t}\n+      // finally trim the initVal and make sure it is set so we don't Dec 1969 the user\n+      initVal = jQuery.trim(initVal);\n \n+      if (!(initVal == \"\" && options.allowEmptyDate)){\n+        if (!initVal) {\n+          if (portal.serverTime && portal.userTimezoneOffset) {\n+            initVal = moment.utc(parseInt(portal.serverTime)).add(portal.userTimezoneOffset/1000, \"seconds\").toDate();", "originalCommit": "f9af75b3e54be203c85db3ae6e700c56fdccf543", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "ab490516ab88bb2a21b51b4881989d26c42bc38d", "url": "https://github.com/sakaiproject/sakai/commit/ab490516ab88bb2a21b51b4881989d26c42bc38d", "message": "SAK-42959 Default lang-datepicker to user's local timestamp\n\nhttps://jira.sakaiproject.org/browse/SAK-42959", "committedDate": "2020-02-19T08:45:10Z", "type": "forcePushed"}, {"oid": "81f489eb9e280bc443ab2fbdd48fbd15d850ec15", "url": "https://github.com/sakaiproject/sakai/commit/81f489eb9e280bc443ab2fbdd48fbd15d850ec15", "message": "SAK-42959 Default lang-datepicker to user's local timestamp\n\nhttps://jira.sakaiproject.org/browse/SAK-42959", "committedDate": "2020-02-19T10:09:35Z", "type": "forcePushed"}, {"oid": "1af1ad207e5d9041367725ac15eeb5ce967d0d54", "url": "https://github.com/sakaiproject/sakai/commit/1af1ad207e5d9041367725ac15eeb5ce967d0d54", "message": "SAK-42959 Default lang-datepicker to user's local timestamp\n\nhttps://jira.sakaiproject.org/browse/SAK-42959", "committedDate": "2020-02-19T20:06:57Z", "type": "forcePushed"}, {"oid": "15288745b67d0a5f8976322907591b75d3f43b21", "url": "https://github.com/sakaiproject/sakai/commit/15288745b67d0a5f8976322907591b75d3f43b21", "message": "SAK-42959 Default lang-datepicker to user's local timestamp\n\nhttps://jira.sakaiproject.org/browse/SAK-42959", "committedDate": "2020-02-19T20:24:33Z", "type": "forcePushed"}, {"oid": "b67e16e3e1c1db3f5c997c42f20f294c2982c9f7", "url": "https://github.com/sakaiproject/sakai/commit/b67e16e3e1c1db3f5c997c42f20f294c2982c9f7", "message": "SAK-42959 Default lang-datepicker to user's local timestamp\n\nhttps://jira.sakaiproject.org/browse/SAK-42959", "committedDate": "2020-02-19T20:29:47Z", "type": "commit"}, {"oid": "b67e16e3e1c1db3f5c997c42f20f294c2982c9f7", "url": "https://github.com/sakaiproject/sakai/commit/b67e16e3e1c1db3f5c997c42f20f294c2982c9f7", "message": "SAK-42959 Default lang-datepicker to user's local timestamp\n\nhttps://jira.sakaiproject.org/browse/SAK-42959", "committedDate": "2020-02-19T20:29:47Z", "type": "forcePushed"}]}