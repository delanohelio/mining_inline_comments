{"pr_number": 264, "pr_title": "FM2-185: Immunization Resource as CIEL:1421 obs group.", "pr_createdAt": "2020-07-27T15:09:25Z", "pr_url": "https://github.com/openmrs/openmrs-module-fhir2/pull/264", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzA1MzA4Ng==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/264#discussion_r463053086", "bodyText": "It seems like this could be simplified using our FhirService interface, so this can just become:\npublic interface FhirImmunizationService extends FhirService<Immunization> {\n\n\n    IBundleProvider searchForImmunizations(ReferenceAndListParam patientParam, @Sort SortSpec sort);\n}", "author": "ibacher", "createdAt": "2020-07-30T14:49:03Z", "path": "api/src/main/java/org/openmrs/module/fhir2/api/FhirImmunizationService.java", "diffHunk": "@@ -0,0 +1,30 @@\n+/*\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.module.fhir2.api;\n+\n+import javax.validation.constraints.NotNull;\n+\n+import java.util.Collection;\n+\n+import ca.uhn.fhir.rest.annotation.Sort;\n+import ca.uhn.fhir.rest.api.SortSpec;\n+import ca.uhn.fhir.rest.param.ReferenceAndListParam;\n+import org.hl7.fhir.r4.model.Immunization;\n+\n+public interface FhirImmunizationService {", "originalCommit": "2212b3940e3971528badd8c52fca0a41f5c9eaa0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTY1MjgzNQ==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/264#discussion_r479652835", "bodyText": "Addressed here.", "author": "mks-d", "createdAt": "2020-08-29T14:01:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzA1MzA4Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzA1ODMzOQ==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/264#discussion_r463058339", "bodyText": "For now, if we're really only supporting a single patient record per-lookup, I would just use the ReferenceParam type for patientParam everywhere. The difference is that ReferenceParam just supports queries like:\n/Immunization?patient.identifier=<blah>\nWhereas ReferenceAndParam is for supporting this kind of thing:\n/Immunization?patient=4,15,37&patient.identifier=MRN| (i.e., get the immunizations for any of patients 4, 15, or 37 if they have an identifier of type MRN). (Yes, this is horribly contrived!)", "author": "ibacher", "createdAt": "2020-07-30T14:56:16Z", "path": "api/src/main/java/org/openmrs/module/fhir2/api/impl/FhirImmunizationServiceImpl.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/*\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.module.fhir2.api.impl;\n+\n+import static org.hl7.fhir.r4.model.Patient.SP_IDENTIFIER;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import ca.uhn.fhir.rest.api.SortSpec;\n+import ca.uhn.fhir.rest.param.ReferenceAndListParam;\n+import org.apache.commons.collections.CollectionUtils;\n+import org.apache.commons.lang.StringUtils;\n+import org.hl7.fhir.r4.model.Immunization;\n+import org.openmrs.Obs;\n+import org.openmrs.Patient;\n+import org.openmrs.api.EncounterService;\n+import org.openmrs.api.ObsService;\n+import org.openmrs.api.PatientService;\n+import org.openmrs.module.fhir2.api.FhirImmunizationService;\n+import org.openmrs.module.fhir2.api.translators.ImmunizationTranslator;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class FhirImmunizationServiceImpl implements FhirImmunizationService {\n+\t\n+\t@Autowired\n+\tprivate ImmunizationTranslator translator;\n+\t\n+\t@Autowired\n+\tprivate ObsService obsService;\n+\t\n+\t@Autowired\n+\tprivate EncounterService encounterService;\n+\t\n+\tprivate PatientService patientService;\n+\t\n+\t@Autowired\n+\tpublic void setPatientService(PatientService patientService) {\n+\t\tthis.patientService = patientService;\n+\t}\n+\t\n+\t@Override\n+\tpublic Immunization getImmunizationByUuid(String uuid) {\n+\t\tObs obs = obsService.getObsByUuid(uuid);\n+\t\treturn translator.toFhirResource(obs);\n+\t}\n+\t\n+\t@Override\n+\tpublic Immunization createImmunization(Immunization newImmunization) {\n+\t\tObs obs = translator.toOpenmrsType(newImmunization);\n+\t\tif (obs.getEncounter().getId() == null) {\n+\t\t\tencounterService.saveEncounter(obs.getEncounter());\n+\t\t}\n+\t\tobs = obsService.saveObs(obs, \"Created when translating a FHIR Immunization resource.\");\n+\t\tnewImmunization = translator.toFhirResource(obs);\n+\t\treturn newImmunization;\n+\t}\n+\t\n+\t@Override\n+\tpublic Immunization updateImmunization(String uuid, Immunization updatedImmunization) {\n+\t\tObs existingObs = obsService.getObsByUuid(uuid);\n+\t\tObs obs = translator.toOpenmrsType(existingObs, updatedImmunization);\n+\t\tobs = obsService.saveObs(obs, \"Updated when translating a FHIR Immunization resource.\");\n+\t\treturn translator.toFhirResource(obs);\n+\t}\n+\t\n+\tpublic Patient getPatient(ReferenceAndListParam patientParam) {", "originalCommit": "2212b3940e3971528badd8c52fca0a41f5c9eaa0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzA4MTA3NA==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/264#discussion_r463081074", "bodyText": "Alternatively, this could be re-written to use something like our BaseDao abstraction to properly support these more complicated kinds of queries. Generally speaking the BaseDao exists for two reasons: 1) to be able to support FHIR's AND / OR logic and some other niceties that don't really matter here (at least until we support other search parameters) 2) to try to do as much of the initial selection work in a single query.", "author": "ibacher", "createdAt": "2020-07-30T15:27:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzA1ODMzOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTY1MzE5NQ==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/264#discussion_r479653195", "bodyText": "I changed all references to ReferenceAndListParam to become ReferenceParam, I adapted the tests  accordingly... etc. My understanding is that right now either of those two can be done:\n/Immunization?patient.identifier=10001X\n\n/Immunization?patient=26678f02-7da5-428e-9497-a0ee5d44fbe4\n\nI hope that this is ok though in ImmunizationFhirResourceProvider ?", "author": "mks-d", "createdAt": "2020-08-29T14:06:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzA1ODMzOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzA2MjY4NQ==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/264#discussion_r463062685", "bodyText": "I don't love having a public reference lookup method on the translator class, though I understand that it might be easy to implement given the internals of the translator. My preference would be for this to be on the service class.", "author": "ibacher", "createdAt": "2020-07-30T15:02:01Z", "path": "api/src/main/java/org/openmrs/module/fhir2/api/translators/ImmunizationTranslator.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.module.fhir2.api.translators;\n+\n+import org.openmrs.Concept;\n+import org.openmrs.Obs;\n+\n+public interface ImmunizationTranslator extends OpenmrsFhirUpdatableTranslator<Obs, org.hl7.fhir.r4.model.Immunization> {\n+\t\n+\t/**\n+\t * Maps an OpenMRS immunization obs construct to a {@link org.hl7.fhir.r4.model.Immunization}\n+\t *\n+\t * @param openMrsImmunization the OpenMRS immunization to translate\n+\t * @return the corresponding FHIR immunization resource\n+\t */\n+\t@Override\n+\torg.hl7.fhir.r4.model.Immunization toFhirResource(Obs openMrsImmunization);\n+\t\n+\t/**\n+\t * Maps a {@link org.hl7.fhir.r4.model.Immunization} to an OpenMRS immunization obs construct\n+\t *\n+\t * @param fhirImmunization the FHIR immunization to translate\n+\t * @return the corresponding OpenMRS immunization obs construct\n+\t */\n+\t@Override\n+\tObs toOpenmrsType(org.hl7.fhir.r4.model.Immunization fhirImmunization);\n+\t\n+\t/**\n+\t * Fetches the OpenMRS concept used to capture immunization obs groups.\n+\t * \n+\t * @return The OpenMRS immunization concept.\n+\t */\n+\tConcept getOpenmrsImmunizationConcept();", "originalCommit": "2212b3940e3971528badd8c52fca0a41f5c9eaa0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzA4ODM0NA==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/264#discussion_r463088344", "bodyText": "I'm kind of just wondering why this class exists? I know we have way too many interfaces, but I've at least being trying to keep the number of concrete classes down to some kind of minimum. Would there be a reason for anything other than the ImmunizationTranslatorImpl class to use these methods?", "author": "ibacher", "createdAt": "2020-07-30T15:38:36Z", "path": "api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/BaseImmunizationTranslator.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.module.fhir2.api.translators.impl;\n+\n+import static org.openmrs.module.fhir2.api.translators.impl.ImmunizationTranslatorImpl.immunizationConcepts;\n+import static org.openmrs.module.fhir2.api.translators.impl.ImmunizationTranslatorImpl.immunizationGroupingConcept;\n+\n+import java.util.Arrays;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import com.google.common.collect.Sets;\n+import lombok.AccessLevel;\n+import lombok.Setter;\n+import org.apache.commons.lang.StringUtils;\n+import org.hl7.fhir.r4.model.Immunization.ImmunizationPerformerComponent;\n+import org.openmrs.Concept;\n+import org.openmrs.EncounterRole;\n+import org.openmrs.Obs;\n+import org.openmrs.Provider;\n+import org.openmrs.api.APIException;\n+import org.openmrs.api.ConceptService;\n+import org.openmrs.module.fhir2.FhirActivator;\n+\n+@Setter(AccessLevel.PACKAGE)\n+public class BaseImmunizationTranslator {", "originalCommit": "2212b3940e3971528badd8c52fca0a41f5c9eaa0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODY4OTY5MA==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/264#discussion_r478689690", "bodyText": "I'm kind of just wondering why this class exists?\n\n@ibacher good point, and probably sketchy design on my end to use inheritance here. In fact this should all be wrapped up in a immunizations helper/utils class that would help keep the actual translator thinner. Would that be ok with you? And if yes, where should this class live?", "author": "mks-d", "createdAt": "2020-08-27T20:54:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzA4ODM0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTY1MzI3Mw==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/264#discussion_r479653273", "bodyText": "I did introduce a new non-bean ImmunizationObsGroupHelper.", "author": "mks-d", "createdAt": "2020-08-29T14:07:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzA4ODM0NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU4MjMzMQ==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/264#discussion_r463582331", "bodyText": "Here, I would use our default ConceptTranslator to translate the OpenMRS concept into a codeable concept.", "author": "ibacher", "createdAt": "2020-07-31T12:31:23Z", "path": "api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/ImmunizationTranslatorImpl.java", "diffHunk": "@@ -0,0 +1,215 @@\n+/*\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.module.fhir2.api.translators.impl;\n+\n+import static org.openmrs.module.fhir2.FhirConstants.ENCOUNTER;\n+import static org.openmrs.module.fhir2.FhirConstants.PATIENT;\n+import static org.openmrs.module.fhir2.FhirConstants.PRACTITIONER;\n+\n+import java.util.Arrays;\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import lombok.AccessLevel;\n+import lombok.Setter;\n+import org.apache.commons.collections.CollectionUtils;\n+import org.apache.commons.lang.StringUtils;\n+import org.hl7.fhir.r4.model.CodeableConcept;\n+import org.hl7.fhir.r4.model.Coding;\n+import org.hl7.fhir.r4.model.DateTimeType;\n+import org.hl7.fhir.r4.model.Immunization;\n+import org.hl7.fhir.r4.model.Immunization.ImmunizationPerformerComponent;\n+import org.hl7.fhir.r4.model.Immunization.ImmunizationProtocolAppliedComponent;\n+import org.hl7.fhir.r4.model.Immunization.ImmunizationStatus;\n+import org.hl7.fhir.r4.model.PositiveIntType;\n+import org.hl7.fhir.r4.model.Reference;\n+import org.openmrs.Concept;\n+import org.openmrs.Encounter;\n+import org.openmrs.EncounterRole;\n+import org.openmrs.EncounterType;\n+import org.openmrs.Location;\n+import org.openmrs.Obs;\n+import org.openmrs.Patient;\n+import org.openmrs.Provider;\n+import org.openmrs.Visit;\n+import org.openmrs.api.ConceptService;\n+import org.openmrs.api.ProviderService;\n+import org.openmrs.api.context.Context;\n+import org.openmrs.module.fhir2.FhirActivator;\n+import org.openmrs.module.fhir2.api.translators.ImmunizationTranslator;\n+import org.openmrs.module.fhir2.api.translators.PatientReferenceTranslator;\n+import org.openmrs.module.fhir2.api.translators.VisitReferenceTranslator;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+@Setter(AccessLevel.PACKAGE)\n+public class ImmunizationTranslatorImpl extends BaseImmunizationTranslator implements ImmunizationTranslator {\n+\t\n+\t@Autowired\n+\tpublic ImmunizationTranslatorImpl(ConceptService conceptService) {\n+\t\tsuper(conceptService);\n+\t}\n+\t\n+\tpublic static final String immunizationGroupingConcept = \"CIEL:1421\";\n+\t\n+\tpublic static final String[] immunizationConcepts = { \"CIEL:984\", \"CIEL:1410\", \"CIEL:1418\", \"CIEL:1419\", \"CIEL:1420\",\n+\t        \"CIEL:165907\" };\n+\t\n+\tpublic static final String ciel984 = immunizationConcepts[0];\n+\t\n+\tpublic static final String ciel1410 = immunizationConcepts[1];\n+\t\n+\tpublic static final String ciel1418 = immunizationConcepts[2];\n+\t\n+\tpublic static final String ciel1419 = immunizationConcepts[3];\n+\t\n+\tpublic static final String ciel1420 = immunizationConcepts[4];\n+\t\n+\tpublic static final String ciel165907 = immunizationConcepts[5];\n+\t\n+\t@Autowired\n+\tprivate PatientReferenceTranslator patientReferenceTranslator;\n+\t\n+\t@Autowired\n+\tprivate VisitReferenceTranslator visitReferenceTranslator;\n+\t\n+\t@Autowired\n+\tprivate ProviderService providerService;\n+\t\n+\t@Override\n+\tpublic Obs toOpenmrsType(Immunization fhirImmunization) {\n+\t\treturn toOpenmrsType(newImmunizationObsGroup(), fhirImmunization);\n+\t}\n+\t\n+\t@Override\n+\tpublic Obs toOpenmrsType(Obs openMrsImmunization, Immunization fhirImmunization) {\n+\t\t\n+\t\tif (openMrsImmunization.getId() != null) {\n+\t\t\tvalidateImmunizationObsGroup(openMrsImmunization);\n+\t\t}\n+\t\t\n+\t\tPatient patient = patientReferenceTranslator.toOpenmrsType(fhirImmunization.getPatient());\n+\t\tList<ImmunizationPerformerComponent> performers = fhirImmunization.getPerformer();\n+\t\t\n+\t\tif (CollectionUtils.size(performers) != 1) {\n+\t\t\tthrow new IllegalArgumentException(\n+\t\t\t        \"Either no performer was found or multiple performers were found. Only strictly one performer is currently supported for each immunization.\");\n+\t\t}\n+\t\tImmunizationPerformerComponent performer = performers.get(0);\n+\t\t\n+\t\t//      Provider provider = practitionerReferenceTranslator.toOpenmrsType(performer.getActor());\n+\t\tProvider provider = providerService.getProviderByUuid(getProviderUuid(performer));\n+\t\t\n+\t\tVisit visit = visitReferenceTranslator.toOpenmrsType(fhirImmunization.getEncounter());\n+\t\tLocation location = visit.getLocation();\n+\t\t\n+\t\tif (!patient.equals(visit.getPatient())) {\n+\t\t\tthrow new IllegalArgumentException(\n+\t\t\t        \"The visit '\" + visit.getUuid() + \"' does not belong to patient '\" + patient.getUuid() + \"'.\");\n+\t\t}\n+\t\t\n+\t\tEncounterType encounterType = FhirActivator.getImmunizationsEncounterTypeOrCreateIfMissing();\n+\t\tEncounterRole encounterRole = FhirActivator.getAdministeringEncounterRoleOrCreateIfMissing();\n+\t\t\n+\t\t// taking the visit's most recent immunization encounter\n+\t\tOptional<Encounter> encounter = visit.getEncounters().stream()\n+\t\t        .filter(e -> encounterType.equals(e.getEncounterType()))\n+\t\t        .max(Comparator.comparing(Encounter::getEncounterDatetime));\n+\t\t\n+\t\tfinal Encounter newEncounter = new Encounter();\n+\t\tnewEncounter.setVisit(visit);\n+\t\tnewEncounter.setLocation(location);\n+\t\tnewEncounter.setEncounterType(encounterType);\n+\t\tnewEncounter.setPatient(patient);\n+\t\tnewEncounter.setProvider(encounterRole, provider);\n+\t\tif (visit != null && visit.getStopDatetime() != null) {\n+\t\t\tnewEncounter.setEncounterDatetime(visit.getStopDatetime());\n+\t\t} else {\n+\t\t\tnewEncounter.setEncounterDatetime(openMrsImmunization.getObsDatetime());\n+\t\t}\n+\t\t\n+\t\topenMrsImmunization.setPerson(patient);\n+\t\topenMrsImmunization.setLocation(location);\n+\t\topenMrsImmunization.setEncounter(encounter.orElse(newEncounter));\n+\t\topenMrsImmunization.getGroupMembers().stream().forEach(obs -> {\n+\t\t\tobs.setPerson(patient);\n+\t\t\tobs.setLocation(location);\n+\t\t\tobs.setEncounter(encounter.orElse(newEncounter));\n+\t\t});\n+\t\t\n+\t\tMap<String, Obs> members = getObsMembersMap(openMrsImmunization);\n+\t\t\n+\t\tCoding coding = fhirImmunization.getVaccineCode().getCoding().stream()\n+\t\t        .filter(code -> StringUtils.isEmpty(code.getSystem())).reduce((code1, code2) -> {\n+\t\t\t        throw new IllegalArgumentException(\"Multiple system-less coding found for the immunization's vaccine: \"\n+\t\t\t                + code1.getCode() + \" and \" + code2.getCode()\n+\t\t\t                + \". No unique system concept could be identified as the coded answer.\");\n+\t\t        }).get();\n+\t\tmembers.get(ciel984).setValueCoded(getConceptService().getConceptByUuid(coding.getCode()));\n+\t\t\n+\t\tmembers.get(ciel1410).setValueDatetime(fhirImmunization.getOccurrenceDateTimeType().getValue());\n+\t\t\n+\t\tif (CollectionUtils.size(fhirImmunization.getProtocolApplied()) != 1) {\n+\t\t\tthrow new IllegalArgumentException(\n+\t\t\t        \"Either no protocol applied was found or multiple protocols applied were found. Only strictly one protocol is currently supported for each immunization.\");\n+\t\t}\n+\t\tImmunizationProtocolAppliedComponent protocolApplied = fhirImmunization.getProtocolApplied().get(0);\n+\t\tmembers.get(ciel1418).setValueNumeric(protocolApplied.getDoseNumberPositiveIntType().getValue().doubleValue());\n+\t\t\n+\t\tmembers.get(ciel1419).setValueText(fhirImmunization.getManufacturer().getDisplay());\n+\t\t\n+\t\tmembers.get(ciel1420).setValueText(fhirImmunization.getLotNumber());\n+\t\t\n+\t\tmembers.get(ciel165907).setValueDatetime(fhirImmunization.getExpirationDate());\n+\t\t\n+\t\treturn openMrsImmunization;\n+\t}\n+\t\n+\t@Override\n+\tpublic Immunization toFhirResource(Obs openMrsImmunization) {\n+\t\tvalidateImmunizationObsGroup(openMrsImmunization);\n+\t\t\n+\t\tImmunization immunization = new Immunization();\n+\t\timmunization.setId(openMrsImmunization.getUuid());\n+\t\timmunization.setStatus(ImmunizationStatus.COMPLETED);\n+\t\timmunization.setPatient(\n+\t\t    new Reference().setType(PATIENT).setReference(PATIENT + \"/\" + openMrsImmunization.getPerson().getUuid()));\n+\t\timmunization.setEncounter(new Reference().setType(ENCOUNTER)\n+\t\t        .setReference(ENCOUNTER + \"/\" + openMrsImmunization.getEncounter().getVisit().getUuid()));\n+\t\timmunization.setPerformer(Arrays.asList(new ImmunizationPerformerComponent(new Reference().setType(PRACTITIONER)\n+\t\t        .setReference(PRACTITIONER + \"/\" + getAdministeringProvider(openMrsImmunization).getUuid()))));\n+\t\t\n+\t\tMap<String, Obs> members = getObsMembersMap(openMrsImmunization);\n+\t\t\n+\t\tCodeableConcept codeableConcept = new CodeableConcept();", "originalCommit": "2212b3940e3971528badd8c52fca0a41f5c9eaa0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTY1MzMxMQ==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/264#discussion_r479653311", "bodyText": "Addressed here.", "author": "mks-d", "createdAt": "2020-08-29T14:08:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU4MjMzMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU4NDc2Mg==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/264#discussion_r463584762", "bodyText": "Here, I would use our methods from BaseReferenceHandlingTranslator or use the corresponding  PatientReferenceTranslator and PractitionerReferenceTranslator classes as well as the VisitReferenceTranslator class you added. While there's nothing wrong with this, it does help ensure some consistency in what we're populating (e.g., our default implementations of patient references and practitioner references include the display field, which in turn helps populate the narrative, etc).", "author": "ibacher", "createdAt": "2020-07-31T12:36:46Z", "path": "api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/ImmunizationTranslatorImpl.java", "diffHunk": "@@ -0,0 +1,215 @@\n+/*\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.module.fhir2.api.translators.impl;\n+\n+import static org.openmrs.module.fhir2.FhirConstants.ENCOUNTER;\n+import static org.openmrs.module.fhir2.FhirConstants.PATIENT;\n+import static org.openmrs.module.fhir2.FhirConstants.PRACTITIONER;\n+\n+import java.util.Arrays;\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import lombok.AccessLevel;\n+import lombok.Setter;\n+import org.apache.commons.collections.CollectionUtils;\n+import org.apache.commons.lang.StringUtils;\n+import org.hl7.fhir.r4.model.CodeableConcept;\n+import org.hl7.fhir.r4.model.Coding;\n+import org.hl7.fhir.r4.model.DateTimeType;\n+import org.hl7.fhir.r4.model.Immunization;\n+import org.hl7.fhir.r4.model.Immunization.ImmunizationPerformerComponent;\n+import org.hl7.fhir.r4.model.Immunization.ImmunizationProtocolAppliedComponent;\n+import org.hl7.fhir.r4.model.Immunization.ImmunizationStatus;\n+import org.hl7.fhir.r4.model.PositiveIntType;\n+import org.hl7.fhir.r4.model.Reference;\n+import org.openmrs.Concept;\n+import org.openmrs.Encounter;\n+import org.openmrs.EncounterRole;\n+import org.openmrs.EncounterType;\n+import org.openmrs.Location;\n+import org.openmrs.Obs;\n+import org.openmrs.Patient;\n+import org.openmrs.Provider;\n+import org.openmrs.Visit;\n+import org.openmrs.api.ConceptService;\n+import org.openmrs.api.ProviderService;\n+import org.openmrs.api.context.Context;\n+import org.openmrs.module.fhir2.FhirActivator;\n+import org.openmrs.module.fhir2.api.translators.ImmunizationTranslator;\n+import org.openmrs.module.fhir2.api.translators.PatientReferenceTranslator;\n+import org.openmrs.module.fhir2.api.translators.VisitReferenceTranslator;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+@Setter(AccessLevel.PACKAGE)\n+public class ImmunizationTranslatorImpl extends BaseImmunizationTranslator implements ImmunizationTranslator {\n+\t\n+\t@Autowired\n+\tpublic ImmunizationTranslatorImpl(ConceptService conceptService) {\n+\t\tsuper(conceptService);\n+\t}\n+\t\n+\tpublic static final String immunizationGroupingConcept = \"CIEL:1421\";\n+\t\n+\tpublic static final String[] immunizationConcepts = { \"CIEL:984\", \"CIEL:1410\", \"CIEL:1418\", \"CIEL:1419\", \"CIEL:1420\",\n+\t        \"CIEL:165907\" };\n+\t\n+\tpublic static final String ciel984 = immunizationConcepts[0];\n+\t\n+\tpublic static final String ciel1410 = immunizationConcepts[1];\n+\t\n+\tpublic static final String ciel1418 = immunizationConcepts[2];\n+\t\n+\tpublic static final String ciel1419 = immunizationConcepts[3];\n+\t\n+\tpublic static final String ciel1420 = immunizationConcepts[4];\n+\t\n+\tpublic static final String ciel165907 = immunizationConcepts[5];\n+\t\n+\t@Autowired\n+\tprivate PatientReferenceTranslator patientReferenceTranslator;\n+\t\n+\t@Autowired\n+\tprivate VisitReferenceTranslator visitReferenceTranslator;\n+\t\n+\t@Autowired\n+\tprivate ProviderService providerService;\n+\t\n+\t@Override\n+\tpublic Obs toOpenmrsType(Immunization fhirImmunization) {\n+\t\treturn toOpenmrsType(newImmunizationObsGroup(), fhirImmunization);\n+\t}\n+\t\n+\t@Override\n+\tpublic Obs toOpenmrsType(Obs openMrsImmunization, Immunization fhirImmunization) {\n+\t\t\n+\t\tif (openMrsImmunization.getId() != null) {\n+\t\t\tvalidateImmunizationObsGroup(openMrsImmunization);\n+\t\t}\n+\t\t\n+\t\tPatient patient = patientReferenceTranslator.toOpenmrsType(fhirImmunization.getPatient());\n+\t\tList<ImmunizationPerformerComponent> performers = fhirImmunization.getPerformer();\n+\t\t\n+\t\tif (CollectionUtils.size(performers) != 1) {\n+\t\t\tthrow new IllegalArgumentException(\n+\t\t\t        \"Either no performer was found or multiple performers were found. Only strictly one performer is currently supported for each immunization.\");\n+\t\t}\n+\t\tImmunizationPerformerComponent performer = performers.get(0);\n+\t\t\n+\t\t//      Provider provider = practitionerReferenceTranslator.toOpenmrsType(performer.getActor());\n+\t\tProvider provider = providerService.getProviderByUuid(getProviderUuid(performer));\n+\t\t\n+\t\tVisit visit = visitReferenceTranslator.toOpenmrsType(fhirImmunization.getEncounter());\n+\t\tLocation location = visit.getLocation();\n+\t\t\n+\t\tif (!patient.equals(visit.getPatient())) {\n+\t\t\tthrow new IllegalArgumentException(\n+\t\t\t        \"The visit '\" + visit.getUuid() + \"' does not belong to patient '\" + patient.getUuid() + \"'.\");\n+\t\t}\n+\t\t\n+\t\tEncounterType encounterType = FhirActivator.getImmunizationsEncounterTypeOrCreateIfMissing();\n+\t\tEncounterRole encounterRole = FhirActivator.getAdministeringEncounterRoleOrCreateIfMissing();\n+\t\t\n+\t\t// taking the visit's most recent immunization encounter\n+\t\tOptional<Encounter> encounter = visit.getEncounters().stream()\n+\t\t        .filter(e -> encounterType.equals(e.getEncounterType()))\n+\t\t        .max(Comparator.comparing(Encounter::getEncounterDatetime));\n+\t\t\n+\t\tfinal Encounter newEncounter = new Encounter();\n+\t\tnewEncounter.setVisit(visit);\n+\t\tnewEncounter.setLocation(location);\n+\t\tnewEncounter.setEncounterType(encounterType);\n+\t\tnewEncounter.setPatient(patient);\n+\t\tnewEncounter.setProvider(encounterRole, provider);\n+\t\tif (visit != null && visit.getStopDatetime() != null) {\n+\t\t\tnewEncounter.setEncounterDatetime(visit.getStopDatetime());\n+\t\t} else {\n+\t\t\tnewEncounter.setEncounterDatetime(openMrsImmunization.getObsDatetime());\n+\t\t}\n+\t\t\n+\t\topenMrsImmunization.setPerson(patient);\n+\t\topenMrsImmunization.setLocation(location);\n+\t\topenMrsImmunization.setEncounter(encounter.orElse(newEncounter));\n+\t\topenMrsImmunization.getGroupMembers().stream().forEach(obs -> {\n+\t\t\tobs.setPerson(patient);\n+\t\t\tobs.setLocation(location);\n+\t\t\tobs.setEncounter(encounter.orElse(newEncounter));\n+\t\t});\n+\t\t\n+\t\tMap<String, Obs> members = getObsMembersMap(openMrsImmunization);\n+\t\t\n+\t\tCoding coding = fhirImmunization.getVaccineCode().getCoding().stream()\n+\t\t        .filter(code -> StringUtils.isEmpty(code.getSystem())).reduce((code1, code2) -> {\n+\t\t\t        throw new IllegalArgumentException(\"Multiple system-less coding found for the immunization's vaccine: \"\n+\t\t\t                + code1.getCode() + \" and \" + code2.getCode()\n+\t\t\t                + \". No unique system concept could be identified as the coded answer.\");\n+\t\t        }).get();\n+\t\tmembers.get(ciel984).setValueCoded(getConceptService().getConceptByUuid(coding.getCode()));\n+\t\t\n+\t\tmembers.get(ciel1410).setValueDatetime(fhirImmunization.getOccurrenceDateTimeType().getValue());\n+\t\t\n+\t\tif (CollectionUtils.size(fhirImmunization.getProtocolApplied()) != 1) {\n+\t\t\tthrow new IllegalArgumentException(\n+\t\t\t        \"Either no protocol applied was found or multiple protocols applied were found. Only strictly one protocol is currently supported for each immunization.\");\n+\t\t}\n+\t\tImmunizationProtocolAppliedComponent protocolApplied = fhirImmunization.getProtocolApplied().get(0);\n+\t\tmembers.get(ciel1418).setValueNumeric(protocolApplied.getDoseNumberPositiveIntType().getValue().doubleValue());\n+\t\t\n+\t\tmembers.get(ciel1419).setValueText(fhirImmunization.getManufacturer().getDisplay());\n+\t\t\n+\t\tmembers.get(ciel1420).setValueText(fhirImmunization.getLotNumber());\n+\t\t\n+\t\tmembers.get(ciel165907).setValueDatetime(fhirImmunization.getExpirationDate());\n+\t\t\n+\t\treturn openMrsImmunization;\n+\t}\n+\t\n+\t@Override\n+\tpublic Immunization toFhirResource(Obs openMrsImmunization) {\n+\t\tvalidateImmunizationObsGroup(openMrsImmunization);\n+\t\t\n+\t\tImmunization immunization = new Immunization();\n+\t\timmunization.setId(openMrsImmunization.getUuid());\n+\t\timmunization.setStatus(ImmunizationStatus.COMPLETED);\n+\t\timmunization.setPatient(", "originalCommit": "2212b3940e3971528badd8c52fca0a41f5c9eaa0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTY1MzM0NQ==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/264#discussion_r479653345", "bodyText": "Addressed here.", "author": "mks-d", "createdAt": "2020-08-29T14:08:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU4NDc2Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU4NjYwMA==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/264#discussion_r463586600", "bodyText": "For at least a couple of these, you could use the ObservationValueTranslator, though it won't work for the Immunization.protocolApplied", "author": "ibacher", "createdAt": "2020-07-31T12:40:42Z", "path": "api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/ImmunizationTranslatorImpl.java", "diffHunk": "@@ -0,0 +1,215 @@\n+/*\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.module.fhir2.api.translators.impl;\n+\n+import static org.openmrs.module.fhir2.FhirConstants.ENCOUNTER;\n+import static org.openmrs.module.fhir2.FhirConstants.PATIENT;\n+import static org.openmrs.module.fhir2.FhirConstants.PRACTITIONER;\n+\n+import java.util.Arrays;\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import lombok.AccessLevel;\n+import lombok.Setter;\n+import org.apache.commons.collections.CollectionUtils;\n+import org.apache.commons.lang.StringUtils;\n+import org.hl7.fhir.r4.model.CodeableConcept;\n+import org.hl7.fhir.r4.model.Coding;\n+import org.hl7.fhir.r4.model.DateTimeType;\n+import org.hl7.fhir.r4.model.Immunization;\n+import org.hl7.fhir.r4.model.Immunization.ImmunizationPerformerComponent;\n+import org.hl7.fhir.r4.model.Immunization.ImmunizationProtocolAppliedComponent;\n+import org.hl7.fhir.r4.model.Immunization.ImmunizationStatus;\n+import org.hl7.fhir.r4.model.PositiveIntType;\n+import org.hl7.fhir.r4.model.Reference;\n+import org.openmrs.Concept;\n+import org.openmrs.Encounter;\n+import org.openmrs.EncounterRole;\n+import org.openmrs.EncounterType;\n+import org.openmrs.Location;\n+import org.openmrs.Obs;\n+import org.openmrs.Patient;\n+import org.openmrs.Provider;\n+import org.openmrs.Visit;\n+import org.openmrs.api.ConceptService;\n+import org.openmrs.api.ProviderService;\n+import org.openmrs.api.context.Context;\n+import org.openmrs.module.fhir2.FhirActivator;\n+import org.openmrs.module.fhir2.api.translators.ImmunizationTranslator;\n+import org.openmrs.module.fhir2.api.translators.PatientReferenceTranslator;\n+import org.openmrs.module.fhir2.api.translators.VisitReferenceTranslator;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+@Setter(AccessLevel.PACKAGE)\n+public class ImmunizationTranslatorImpl extends BaseImmunizationTranslator implements ImmunizationTranslator {\n+\t\n+\t@Autowired\n+\tpublic ImmunizationTranslatorImpl(ConceptService conceptService) {\n+\t\tsuper(conceptService);\n+\t}\n+\t\n+\tpublic static final String immunizationGroupingConcept = \"CIEL:1421\";\n+\t\n+\tpublic static final String[] immunizationConcepts = { \"CIEL:984\", \"CIEL:1410\", \"CIEL:1418\", \"CIEL:1419\", \"CIEL:1420\",\n+\t        \"CIEL:165907\" };\n+\t\n+\tpublic static final String ciel984 = immunizationConcepts[0];\n+\t\n+\tpublic static final String ciel1410 = immunizationConcepts[1];\n+\t\n+\tpublic static final String ciel1418 = immunizationConcepts[2];\n+\t\n+\tpublic static final String ciel1419 = immunizationConcepts[3];\n+\t\n+\tpublic static final String ciel1420 = immunizationConcepts[4];\n+\t\n+\tpublic static final String ciel165907 = immunizationConcepts[5];\n+\t\n+\t@Autowired\n+\tprivate PatientReferenceTranslator patientReferenceTranslator;\n+\t\n+\t@Autowired\n+\tprivate VisitReferenceTranslator visitReferenceTranslator;\n+\t\n+\t@Autowired\n+\tprivate ProviderService providerService;\n+\t\n+\t@Override\n+\tpublic Obs toOpenmrsType(Immunization fhirImmunization) {\n+\t\treturn toOpenmrsType(newImmunizationObsGroup(), fhirImmunization);\n+\t}\n+\t\n+\t@Override\n+\tpublic Obs toOpenmrsType(Obs openMrsImmunization, Immunization fhirImmunization) {\n+\t\t\n+\t\tif (openMrsImmunization.getId() != null) {\n+\t\t\tvalidateImmunizationObsGroup(openMrsImmunization);\n+\t\t}\n+\t\t\n+\t\tPatient patient = patientReferenceTranslator.toOpenmrsType(fhirImmunization.getPatient());\n+\t\tList<ImmunizationPerformerComponent> performers = fhirImmunization.getPerformer();\n+\t\t\n+\t\tif (CollectionUtils.size(performers) != 1) {\n+\t\t\tthrow new IllegalArgumentException(\n+\t\t\t        \"Either no performer was found or multiple performers were found. Only strictly one performer is currently supported for each immunization.\");\n+\t\t}\n+\t\tImmunizationPerformerComponent performer = performers.get(0);\n+\t\t\n+\t\t//      Provider provider = practitionerReferenceTranslator.toOpenmrsType(performer.getActor());\n+\t\tProvider provider = providerService.getProviderByUuid(getProviderUuid(performer));\n+\t\t\n+\t\tVisit visit = visitReferenceTranslator.toOpenmrsType(fhirImmunization.getEncounter());\n+\t\tLocation location = visit.getLocation();\n+\t\t\n+\t\tif (!patient.equals(visit.getPatient())) {\n+\t\t\tthrow new IllegalArgumentException(\n+\t\t\t        \"The visit '\" + visit.getUuid() + \"' does not belong to patient '\" + patient.getUuid() + \"'.\");\n+\t\t}\n+\t\t\n+\t\tEncounterType encounterType = FhirActivator.getImmunizationsEncounterTypeOrCreateIfMissing();\n+\t\tEncounterRole encounterRole = FhirActivator.getAdministeringEncounterRoleOrCreateIfMissing();\n+\t\t\n+\t\t// taking the visit's most recent immunization encounter\n+\t\tOptional<Encounter> encounter = visit.getEncounters().stream()\n+\t\t        .filter(e -> encounterType.equals(e.getEncounterType()))\n+\t\t        .max(Comparator.comparing(Encounter::getEncounterDatetime));\n+\t\t\n+\t\tfinal Encounter newEncounter = new Encounter();\n+\t\tnewEncounter.setVisit(visit);\n+\t\tnewEncounter.setLocation(location);\n+\t\tnewEncounter.setEncounterType(encounterType);\n+\t\tnewEncounter.setPatient(patient);\n+\t\tnewEncounter.setProvider(encounterRole, provider);\n+\t\tif (visit != null && visit.getStopDatetime() != null) {\n+\t\t\tnewEncounter.setEncounterDatetime(visit.getStopDatetime());\n+\t\t} else {\n+\t\t\tnewEncounter.setEncounterDatetime(openMrsImmunization.getObsDatetime());\n+\t\t}\n+\t\t\n+\t\topenMrsImmunization.setPerson(patient);\n+\t\topenMrsImmunization.setLocation(location);\n+\t\topenMrsImmunization.setEncounter(encounter.orElse(newEncounter));\n+\t\topenMrsImmunization.getGroupMembers().stream().forEach(obs -> {\n+\t\t\tobs.setPerson(patient);\n+\t\t\tobs.setLocation(location);\n+\t\t\tobs.setEncounter(encounter.orElse(newEncounter));\n+\t\t});\n+\t\t\n+\t\tMap<String, Obs> members = getObsMembersMap(openMrsImmunization);\n+\t\t\n+\t\tCoding coding = fhirImmunization.getVaccineCode().getCoding().stream()\n+\t\t        .filter(code -> StringUtils.isEmpty(code.getSystem())).reduce((code1, code2) -> {\n+\t\t\t        throw new IllegalArgumentException(\"Multiple system-less coding found for the immunization's vaccine: \"\n+\t\t\t                + code1.getCode() + \" and \" + code2.getCode()\n+\t\t\t                + \". No unique system concept could be identified as the coded answer.\");\n+\t\t        }).get();\n+\t\tmembers.get(ciel984).setValueCoded(getConceptService().getConceptByUuid(coding.getCode()));\n+\t\t\n+\t\tmembers.get(ciel1410).setValueDatetime(fhirImmunization.getOccurrenceDateTimeType().getValue());\n+\t\t\n+\t\tif (CollectionUtils.size(fhirImmunization.getProtocolApplied()) != 1) {\n+\t\t\tthrow new IllegalArgumentException(\n+\t\t\t        \"Either no protocol applied was found or multiple protocols applied were found. Only strictly one protocol is currently supported for each immunization.\");\n+\t\t}\n+\t\tImmunizationProtocolAppliedComponent protocolApplied = fhirImmunization.getProtocolApplied().get(0);\n+\t\tmembers.get(ciel1418).setValueNumeric(protocolApplied.getDoseNumberPositiveIntType().getValue().doubleValue());\n+\t\t\n+\t\tmembers.get(ciel1419).setValueText(fhirImmunization.getManufacturer().getDisplay());\n+\t\t\n+\t\tmembers.get(ciel1420).setValueText(fhirImmunization.getLotNumber());\n+\t\t\n+\t\tmembers.get(ciel165907).setValueDatetime(fhirImmunization.getExpirationDate());\n+\t\t\n+\t\treturn openMrsImmunization;\n+\t}\n+\t\n+\t@Override\n+\tpublic Immunization toFhirResource(Obs openMrsImmunization) {\n+\t\tvalidateImmunizationObsGroup(openMrsImmunization);\n+\t\t\n+\t\tImmunization immunization = new Immunization();\n+\t\timmunization.setId(openMrsImmunization.getUuid());\n+\t\timmunization.setStatus(ImmunizationStatus.COMPLETED);\n+\t\timmunization.setPatient(\n+\t\t    new Reference().setType(PATIENT).setReference(PATIENT + \"/\" + openMrsImmunization.getPerson().getUuid()));\n+\t\timmunization.setEncounter(new Reference().setType(ENCOUNTER)\n+\t\t        .setReference(ENCOUNTER + \"/\" + openMrsImmunization.getEncounter().getVisit().getUuid()));\n+\t\timmunization.setPerformer(Arrays.asList(new ImmunizationPerformerComponent(new Reference().setType(PRACTITIONER)\n+\t\t        .setReference(PRACTITIONER + \"/\" + getAdministeringProvider(openMrsImmunization).getUuid()))));\n+\t\t\n+\t\tMap<String, Obs> members = getObsMembersMap(openMrsImmunization);\n+\t\t\n+\t\tCodeableConcept codeableConcept = new CodeableConcept();\n+\t\tCoding coding = new Coding();\n+\t\tcoding.setCode(members.get(ciel984).getValueCoded().getUuid());\n+\t\tcoding.setDisplay(members.get(ciel984).getValueCoded().getFullySpecifiedName(Context.getLocale()).getName());\n+\t\tcodeableConcept.addCoding(coding);\n+\t\timmunization.setVaccineCode(codeableConcept);", "originalCommit": "2212b3940e3971528badd8c52fca0a41f5c9eaa0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTk1NzE1MA==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/264#discussion_r479957150", "bodyText": "I actually could only do it for the vaccine occurrence here because it takes a Type as argument. For all those that do not take a Type I'm not sure if there is a recommended way to do it?", "author": "mks-d", "createdAt": "2020-08-31T07:49:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU4NjYwMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU4ODY0Mg==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/264#discussion_r463588642", "bodyText": "It would be preferable, I think, to use the module-specific FhirLocationDao.", "author": "ibacher", "createdAt": "2020-07-31T12:44:55Z", "path": "api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/LocationReferenceTranslatorImpl.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.module.fhir2.api.translators.impl;\n+\n+import lombok.AccessLevel;\n+import lombok.Setter;\n+import org.hl7.fhir.r4.model.Reference;\n+import org.openmrs.Location;\n+import org.openmrs.api.LocationService;\n+import org.openmrs.module.fhir2.api.translators.LocationReferenceTranslator;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+@Setter(AccessLevel.PACKAGE)\n+public class LocationReferenceTranslatorImpl extends BaseReferenceHandlingTranslator implements LocationReferenceTranslator {\n+\t\n+\t@Autowired\n+\tprivate LocationService locationService;", "originalCommit": "2212b3940e3971528badd8c52fca0a41f5c9eaa0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTY1MzQwMw==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/264#discussion_r479653403", "bodyText": "It turned out that LocationReferenceTranslator wasn't needed (yet), I removed it for now.", "author": "mks-d", "createdAt": "2020-08-29T14:09:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU4ODY0Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU4OTI0MQ==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/264#discussion_r463589241", "bodyText": "patientParam", "author": "ibacher", "createdAt": "2020-07-31T12:46:17Z", "path": "api/src/main/java/org/openmrs/module/fhir2/providers/r4/ImmunizationFhirResourceProvider.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.module.fhir2.providers.r4;\n+\n+import javax.validation.constraints.NotNull;\n+\n+import java.util.Collection;\n+import java.util.List;\n+\n+import ca.uhn.fhir.rest.annotation.Create;\n+import ca.uhn.fhir.rest.annotation.History;\n+import ca.uhn.fhir.rest.annotation.IdParam;\n+import ca.uhn.fhir.rest.annotation.OptionalParam;\n+import ca.uhn.fhir.rest.annotation.Read;\n+import ca.uhn.fhir.rest.annotation.ResourceParam;\n+import ca.uhn.fhir.rest.annotation.Search;\n+import ca.uhn.fhir.rest.annotation.Sort;\n+import ca.uhn.fhir.rest.annotation.Update;\n+import ca.uhn.fhir.rest.api.MethodOutcome;\n+import ca.uhn.fhir.rest.api.SortSpec;\n+import ca.uhn.fhir.rest.param.ReferenceAndListParam;\n+import ca.uhn.fhir.rest.server.IResourceProvider;\n+import ca.uhn.fhir.rest.server.exceptions.InvalidRequestException;\n+import ca.uhn.fhir.rest.server.exceptions.ResourceNotFoundException;\n+import lombok.AccessLevel;\n+import lombok.Setter;\n+import org.hl7.fhir.instance.model.api.IBaseResource;\n+import org.hl7.fhir.r4.model.IdType;\n+import org.hl7.fhir.r4.model.Immunization;\n+import org.hl7.fhir.r4.model.Patient;\n+import org.hl7.fhir.r4.model.Resource;\n+import org.openmrs.module.fhir2.api.FhirImmunizationService;\n+import org.openmrs.module.fhir2.providers.util.FhirProviderUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.stereotype.Component;\n+\n+@Component(\"ImmunizationFhirR4ResourceProvider\")\n+@Qualifier(\"fhirResources\")\n+@Setter(AccessLevel.PACKAGE)\n+public class ImmunizationFhirResourceProvider implements IResourceProvider {\n+\t\n+\t@Autowired\n+\tprivate FhirImmunizationService immunizationService;\n+\t\n+\t@Override\n+\tpublic Class<? extends IBaseResource> getResourceType() {\n+\t\treturn Immunization.class;\n+\t}\n+\t\n+\t@Read\n+\tpublic Immunization getImmunizationByUuid(@IdParam @NotNull IdType id) {\n+\t\tImmunization immunization = immunizationService.getImmunizationByUuid(id.getIdPart());\n+\t\tif (immunization == null) {\n+\t\t\tthrow new ResourceNotFoundException(\"Could not find Immunization with Id \" + id.getIdPart());\n+\t\t}\n+\t\treturn immunization;\n+\t}\n+\t\n+\t@History\n+\t@SuppressWarnings(\"unused\")\n+\tpublic List<Resource> getImmunizationHistoryById(@IdParam @NotNull IdType id) {\n+\t\tImmunization immunization = immunizationService.getImmunizationByUuid(id.getIdPart());\n+\t\tif (immunization == null) {\n+\t\t\tthrow new ResourceNotFoundException(\"Could not find Immunization with Id \" + id.getIdPart());\n+\t\t}\n+\t\treturn immunization.getContained();\n+\t}\n+\t\n+\t@Create\n+\t@SuppressWarnings(\"unused\")\n+\tpublic MethodOutcome createImmunization(@ResourceParam Immunization newImmunization) {\n+\t\treturn FhirProviderUtils.buildCreate(immunizationService.createImmunization(newImmunization));\n+\t}\n+\t\n+\t@Update\n+\tpublic MethodOutcome updateImmunization(@IdParam IdType id, @ResourceParam Immunization existingImmunization) {\n+\t\tif (id == null || id.getIdPart() == null) {\n+\t\t\tthrow new InvalidRequestException(\"id must be specified to update resource\");\n+\t\t}\n+\t\t\n+\t\texistingImmunization.setId(id.getIdPart());\n+\t\t\n+\t\treturn FhirProviderUtils.buildUpdate(immunizationService.updateImmunization(id.getIdPart(), existingImmunization));\n+\t}\n+\t\n+\t@Search\n+\t@SuppressWarnings(\"unused\")\n+\tpublic Collection<Immunization> searchImmunizations(@OptionalParam(name = Immunization.SP_PATIENT, chainWhitelist = { \"\",\n+\t        Patient.SP_IDENTIFIER }) ReferenceAndListParam patienParam, @Sort SortSpec sort) {", "originalCommit": "2212b3940e3971528badd8c52fca0a41f5c9eaa0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "95f3b30d2427ea888ebc3d0618bbc4015063cfcb", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/95f3b30d2427ea888ebc3d0618bbc4015063cfcb", "message": "FM2-185: Moving back CIEL constants to impl class.", "committedDate": "2020-08-29T13:59:05Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjk0ODQzMw==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/264#discussion_r482948433", "bodyText": "Wouldn't it be cleaner to make the ImmunizationObsGroupHelper a Spring bean and just have that autowired into this class?", "author": "ibacher", "createdAt": "2020-09-03T12:44:10Z", "path": "api/src/main/java/org/openmrs/module/fhir2/api/impl/FhirImmunizationServiceImpl.java", "diffHunk": "@@ -0,0 +1,139 @@\n+/*\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.module.fhir2.api.impl;\n+\n+import static org.hl7.fhir.r4.model.Patient.SP_IDENTIFIER;\n+import static org.openmrs.module.fhir2.api.translators.impl.ImmunizationTranslatorImpl.immunizationGroupingConcept;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import ca.uhn.fhir.rest.api.SortSpec;\n+import ca.uhn.fhir.rest.param.ReferenceParam;\n+import org.apache.commons.collections.CollectionUtils;\n+import org.apache.commons.lang.StringUtils;\n+import org.hl7.fhir.r4.model.Immunization;\n+import org.openmrs.Concept;\n+import org.openmrs.Obs;\n+import org.openmrs.Patient;\n+import org.openmrs.api.ConceptService;\n+import org.openmrs.api.EncounterService;\n+import org.openmrs.api.ObsService;\n+import org.openmrs.api.PatientService;\n+import org.openmrs.module.fhir2.api.FhirImmunizationService;\n+import org.openmrs.module.fhir2.api.translators.ImmunizationTranslator;\n+import org.openmrs.module.fhir2.api.translators.impl.ImmunizationObsGroupHelper;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class FhirImmunizationServiceImpl implements FhirImmunizationService {\n+\t\n+\t@Autowired\n+\tprivate ImmunizationTranslator translator;\n+\t\n+\t@Autowired\n+\tprivate ObsService obsService;\n+\t\n+\t@Autowired\n+\tprivate EncounterService encounterService;\n+\t\n+\tprivate PatientService patientService;\n+\t\n+\tprivate ImmunizationObsGroupHelper helper;\n+\t\n+\t@Autowired\n+\tpublic void setPatientService(PatientService patientService) {\n+\t\tthis.patientService = patientService;\n+\t}\n+\t\n+\t@Autowired\n+\tpublic void setImmunizationHelper(ConceptService conceptService) {", "originalCommit": "95f3b30d2427ea888ebc3d0618bbc4015063cfcb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjk1MjAwMA==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/264#discussion_r482952000", "bodyText": "Here's a point where if this service class extended our BaseFhirService and used the FhirObservationDaoImpl, you'd get some logic we need for free (the logic is primarily related to proper handling of the FHIR API. See here for the implementation details I'm talking about.", "author": "ibacher", "createdAt": "2020-09-03T12:50:00Z", "path": "api/src/main/java/org/openmrs/module/fhir2/api/impl/FhirImmunizationServiceImpl.java", "diffHunk": "@@ -0,0 +1,139 @@\n+/*\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.module.fhir2.api.impl;\n+\n+import static org.hl7.fhir.r4.model.Patient.SP_IDENTIFIER;\n+import static org.openmrs.module.fhir2.api.translators.impl.ImmunizationTranslatorImpl.immunizationGroupingConcept;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import ca.uhn.fhir.rest.api.SortSpec;\n+import ca.uhn.fhir.rest.param.ReferenceParam;\n+import org.apache.commons.collections.CollectionUtils;\n+import org.apache.commons.lang.StringUtils;\n+import org.hl7.fhir.r4.model.Immunization;\n+import org.openmrs.Concept;\n+import org.openmrs.Obs;\n+import org.openmrs.Patient;\n+import org.openmrs.api.ConceptService;\n+import org.openmrs.api.EncounterService;\n+import org.openmrs.api.ObsService;\n+import org.openmrs.api.PatientService;\n+import org.openmrs.module.fhir2.api.FhirImmunizationService;\n+import org.openmrs.module.fhir2.api.translators.ImmunizationTranslator;\n+import org.openmrs.module.fhir2.api.translators.impl.ImmunizationObsGroupHelper;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class FhirImmunizationServiceImpl implements FhirImmunizationService {\n+\t\n+\t@Autowired\n+\tprivate ImmunizationTranslator translator;\n+\t\n+\t@Autowired\n+\tprivate ObsService obsService;\n+\t\n+\t@Autowired\n+\tprivate EncounterService encounterService;\n+\t\n+\tprivate PatientService patientService;\n+\t\n+\tprivate ImmunizationObsGroupHelper helper;\n+\t\n+\t@Autowired\n+\tpublic void setPatientService(PatientService patientService) {\n+\t\tthis.patientService = patientService;\n+\t}\n+\t\n+\t@Autowired\n+\tpublic void setImmunizationHelper(ConceptService conceptService) {\n+\t\tthis.helper = new ImmunizationObsGroupHelper(conceptService);\n+\t}\n+\t\n+\t@Override\n+\tpublic Immunization get(String uuid) {", "originalCommit": "95f3b30d2427ea888ebc3d0618bbc4015063cfcb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjk1Mjk1Mg==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/264#discussion_r482952952", "bodyText": "Instead of doing this, it might be simpler just to not publish a delete method on the ImmunizationResourceProvider, that way the request will be rejected anyways.", "author": "ibacher", "createdAt": "2020-09-03T12:51:38Z", "path": "api/src/main/java/org/openmrs/module/fhir2/api/impl/FhirImmunizationServiceImpl.java", "diffHunk": "@@ -0,0 +1,139 @@\n+/*\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.module.fhir2.api.impl;\n+\n+import static org.hl7.fhir.r4.model.Patient.SP_IDENTIFIER;\n+import static org.openmrs.module.fhir2.api.translators.impl.ImmunizationTranslatorImpl.immunizationGroupingConcept;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import ca.uhn.fhir.rest.api.SortSpec;\n+import ca.uhn.fhir.rest.param.ReferenceParam;\n+import org.apache.commons.collections.CollectionUtils;\n+import org.apache.commons.lang.StringUtils;\n+import org.hl7.fhir.r4.model.Immunization;\n+import org.openmrs.Concept;\n+import org.openmrs.Obs;\n+import org.openmrs.Patient;\n+import org.openmrs.api.ConceptService;\n+import org.openmrs.api.EncounterService;\n+import org.openmrs.api.ObsService;\n+import org.openmrs.api.PatientService;\n+import org.openmrs.module.fhir2.api.FhirImmunizationService;\n+import org.openmrs.module.fhir2.api.translators.ImmunizationTranslator;\n+import org.openmrs.module.fhir2.api.translators.impl.ImmunizationObsGroupHelper;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class FhirImmunizationServiceImpl implements FhirImmunizationService {\n+\t\n+\t@Autowired\n+\tprivate ImmunizationTranslator translator;\n+\t\n+\t@Autowired\n+\tprivate ObsService obsService;\n+\t\n+\t@Autowired\n+\tprivate EncounterService encounterService;\n+\t\n+\tprivate PatientService patientService;\n+\t\n+\tprivate ImmunizationObsGroupHelper helper;\n+\t\n+\t@Autowired\n+\tpublic void setPatientService(PatientService patientService) {\n+\t\tthis.patientService = patientService;\n+\t}\n+\t\n+\t@Autowired\n+\tpublic void setImmunizationHelper(ConceptService conceptService) {\n+\t\tthis.helper = new ImmunizationObsGroupHelper(conceptService);\n+\t}\n+\t\n+\t@Override\n+\tpublic Immunization get(String uuid) {\n+\t\tObs obs = obsService.getObsByUuid(uuid);\n+\t\treturn translator.toFhirResource(obs);\n+\t}\n+\t\n+\t@Override\n+\tpublic Immunization create(Immunization newImmunization) {\n+\t\tObs obs = translator.toOpenmrsType(newImmunization);\n+\t\tif (obs.getEncounter().getId() == null) {\n+\t\t\tencounterService.saveEncounter(obs.getEncounter());\n+\t\t}\n+\t\tobs = obsService.saveObs(obs, \"Created when translating a FHIR Immunization resource.\");\n+\t\tnewImmunization = translator.toFhirResource(obs);\n+\t\treturn newImmunization;\n+\t}\n+\t\n+\t@Override\n+\tpublic Immunization update(String uuid, Immunization updatedImmunization) {\n+\t\tObs existingObs = obsService.getObsByUuid(uuid);\n+\t\tObs obs = translator.toOpenmrsType(existingObs, updatedImmunization);\n+\t\tobs = obsService.saveObs(obs, \"Updated when translating a FHIR Immunization resource.\");\n+\t\treturn translator.toFhirResource(obs);\n+\t}\n+\t\n+\t@Override\n+\tpublic Immunization delete(String uuid) {\n+\t\t// TODO Simply void the underlying obs\n+\t\tthrow new UnsupportedOperationException(\"Deleting a FHIR Immunization resource is currently not supported.\");\n+\t}", "originalCommit": "95f3b30d2427ea888ebc3d0618bbc4015063cfcb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzY2MTQ0MA==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/264#discussion_r483661440", "bodyText": "@ibacher the idea here is that we would in fact support it \"shortly\", this was a temporary measure in the meantime. Can we keep it for now?", "author": "mks-d", "createdAt": "2020-09-04T14:46:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjk1Mjk1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk3MTI3NQ==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/264#discussion_r498971275", "bodyText": "Sure. Btw, obsDao.delete(uuid) should at least void the main obs.", "author": "ibacher", "createdAt": "2020-10-02T18:04:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjk1Mjk1Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjk1NzA3OQ==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/264#discussion_r482957079", "bodyText": "For implementing search, I think we need to seriously think about using the existing infrastructure in this module. There are a few reasons for this:\n\nFor the most part, searches done using our API minimize the number of database queries.\nUsing that API, we can effectively page search results (which is necessary when the number of immunizations gets quite large).\nIt will maintenance of this class easier if it is in line with the other classes in the module.", "author": "ibacher", "createdAt": "2020-09-03T12:57:57Z", "path": "api/src/main/java/org/openmrs/module/fhir2/api/impl/FhirImmunizationServiceImpl.java", "diffHunk": "@@ -0,0 +1,139 @@\n+/*\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.module.fhir2.api.impl;\n+\n+import static org.hl7.fhir.r4.model.Patient.SP_IDENTIFIER;\n+import static org.openmrs.module.fhir2.api.translators.impl.ImmunizationTranslatorImpl.immunizationGroupingConcept;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import ca.uhn.fhir.rest.api.SortSpec;\n+import ca.uhn.fhir.rest.param.ReferenceParam;\n+import org.apache.commons.collections.CollectionUtils;\n+import org.apache.commons.lang.StringUtils;\n+import org.hl7.fhir.r4.model.Immunization;\n+import org.openmrs.Concept;\n+import org.openmrs.Obs;\n+import org.openmrs.Patient;\n+import org.openmrs.api.ConceptService;\n+import org.openmrs.api.EncounterService;\n+import org.openmrs.api.ObsService;\n+import org.openmrs.api.PatientService;\n+import org.openmrs.module.fhir2.api.FhirImmunizationService;\n+import org.openmrs.module.fhir2.api.translators.ImmunizationTranslator;\n+import org.openmrs.module.fhir2.api.translators.impl.ImmunizationObsGroupHelper;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class FhirImmunizationServiceImpl implements FhirImmunizationService {\n+\t\n+\t@Autowired\n+\tprivate ImmunizationTranslator translator;\n+\t\n+\t@Autowired\n+\tprivate ObsService obsService;\n+\t\n+\t@Autowired\n+\tprivate EncounterService encounterService;\n+\t\n+\tprivate PatientService patientService;\n+\t\n+\tprivate ImmunizationObsGroupHelper helper;\n+\t\n+\t@Autowired\n+\tpublic void setPatientService(PatientService patientService) {\n+\t\tthis.patientService = patientService;\n+\t}\n+\t\n+\t@Autowired\n+\tpublic void setImmunizationHelper(ConceptService conceptService) {\n+\t\tthis.helper = new ImmunizationObsGroupHelper(conceptService);\n+\t}\n+\t\n+\t@Override\n+\tpublic Immunization get(String uuid) {\n+\t\tObs obs = obsService.getObsByUuid(uuid);\n+\t\treturn translator.toFhirResource(obs);\n+\t}\n+\t\n+\t@Override\n+\tpublic Immunization create(Immunization newImmunization) {\n+\t\tObs obs = translator.toOpenmrsType(newImmunization);\n+\t\tif (obs.getEncounter().getId() == null) {\n+\t\t\tencounterService.saveEncounter(obs.getEncounter());\n+\t\t}\n+\t\tobs = obsService.saveObs(obs, \"Created when translating a FHIR Immunization resource.\");\n+\t\tnewImmunization = translator.toFhirResource(obs);\n+\t\treturn newImmunization;\n+\t}\n+\t\n+\t@Override\n+\tpublic Immunization update(String uuid, Immunization updatedImmunization) {\n+\t\tObs existingObs = obsService.getObsByUuid(uuid);\n+\t\tObs obs = translator.toOpenmrsType(existingObs, updatedImmunization);\n+\t\tobs = obsService.saveObs(obs, \"Updated when translating a FHIR Immunization resource.\");\n+\t\treturn translator.toFhirResource(obs);\n+\t}\n+\t\n+\t@Override\n+\tpublic Immunization delete(String uuid) {\n+\t\t// TODO Simply void the underlying obs\n+\t\tthrow new UnsupportedOperationException(\"Deleting a FHIR Immunization resource is currently not supported.\");\n+\t}\n+\t\n+\t@Override\n+\tpublic Concept getOpenmrsImmunizationConcept() {\n+\t\treturn helper.concept(immunizationGroupingConcept);\n+\t}\n+\t\n+\tpublic Patient getPatient(ReferenceParam patientParam) {\n+\t\t\n+\t\tPatient patient = null;\n+\t\t\n+\t\tif (StringUtils.equals(patientParam.getChain(), SP_IDENTIFIER)) {\n+\t\t\tfinal String identifier = patientParam.getValue();\n+\t\t\t\n+\t\t\tList<Patient> patients = patientService.getPatients(identifier, false, 0, 1);\n+\t\t\tif (CollectionUtils.isEmpty(patients)) {\n+\t\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t        \"No patient could be found for the following OpenMRS identifier: '\" + identifier + \"'.\");\n+\t\t\t}\n+\t\t\tif (CollectionUtils.size(patients) > 1) {\n+\t\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t        \"Multiple patients were found for the following OpenMRS identifier: '\" + identifier + \"'.\");\n+\t\t\t}\n+\t\t\tpatient = patients.get(0);\n+\t\t} else if (StringUtils.isEmpty(patientParam.getChain())) {\n+\t\t\tfinal String uuid = patientParam.getValue();\n+\t\t\tpatient = patientService.getPatientByUuid(uuid);\n+\t\t\tif (patient == null) {\n+\t\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t        \"No patient could be found for the following OpenMRS UUID: '\" + uuid + \"'.\");\n+\t\t\t}\n+\t\t}\n+\t\t\n+\t\treturn patient;\n+\t}\n+\t\n+\t@Override\n+\tpublic Collection<Immunization> searchImmunizations(ReferenceParam patientParam, SortSpec sort) {", "originalCommit": "95f3b30d2427ea888ebc3d0618bbc4015063cfcb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzY2NDg3Nw==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/264#discussion_r483664877", "bodyText": "Yes, I'm about to push those changes. Actually I had to revert to using ReferenceAndListParam rather than just ReferenceParam in order to being able to leverage FhirObservationDao out of the box:\npublic Collection<Immunization> searchImmunizations(ReferenceAndListParam patientParam, SortSpec sort) { ...", "author": "mks-d", "createdAt": "2020-09-04T14:50:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjk1NzA3OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjk2MTE1MA==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/264#discussion_r482961150", "bodyText": "I get the motivation here with the IllegalArgumentExceptions, but they're going to provide a sub-optimal experience for the FHIR client trying to consume these. If we are going to throw exceptions at this point, it's probably best to use HAPI's UnprocessableEntityException for this, which results in a FHIR-readable error with an appropriate structure including the message.", "author": "ibacher", "createdAt": "2020-09-03T13:04:33Z", "path": "api/src/main/java/org/openmrs/module/fhir2/api/impl/FhirImmunizationServiceImpl.java", "diffHunk": "@@ -0,0 +1,139 @@\n+/*\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.module.fhir2.api.impl;\n+\n+import static org.hl7.fhir.r4.model.Patient.SP_IDENTIFIER;\n+import static org.openmrs.module.fhir2.api.translators.impl.ImmunizationTranslatorImpl.immunizationGroupingConcept;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import ca.uhn.fhir.rest.api.SortSpec;\n+import ca.uhn.fhir.rest.param.ReferenceParam;\n+import org.apache.commons.collections.CollectionUtils;\n+import org.apache.commons.lang.StringUtils;\n+import org.hl7.fhir.r4.model.Immunization;\n+import org.openmrs.Concept;\n+import org.openmrs.Obs;\n+import org.openmrs.Patient;\n+import org.openmrs.api.ConceptService;\n+import org.openmrs.api.EncounterService;\n+import org.openmrs.api.ObsService;\n+import org.openmrs.api.PatientService;\n+import org.openmrs.module.fhir2.api.FhirImmunizationService;\n+import org.openmrs.module.fhir2.api.translators.ImmunizationTranslator;\n+import org.openmrs.module.fhir2.api.translators.impl.ImmunizationObsGroupHelper;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class FhirImmunizationServiceImpl implements FhirImmunizationService {\n+\t\n+\t@Autowired\n+\tprivate ImmunizationTranslator translator;\n+\t\n+\t@Autowired\n+\tprivate ObsService obsService;\n+\t\n+\t@Autowired\n+\tprivate EncounterService encounterService;\n+\t\n+\tprivate PatientService patientService;\n+\t\n+\tprivate ImmunizationObsGroupHelper helper;\n+\t\n+\t@Autowired\n+\tpublic void setPatientService(PatientService patientService) {\n+\t\tthis.patientService = patientService;\n+\t}\n+\t\n+\t@Autowired\n+\tpublic void setImmunizationHelper(ConceptService conceptService) {\n+\t\tthis.helper = new ImmunizationObsGroupHelper(conceptService);\n+\t}\n+\t\n+\t@Override\n+\tpublic Immunization get(String uuid) {\n+\t\tObs obs = obsService.getObsByUuid(uuid);\n+\t\treturn translator.toFhirResource(obs);\n+\t}\n+\t\n+\t@Override\n+\tpublic Immunization create(Immunization newImmunization) {\n+\t\tObs obs = translator.toOpenmrsType(newImmunization);\n+\t\tif (obs.getEncounter().getId() == null) {\n+\t\t\tencounterService.saveEncounter(obs.getEncounter());\n+\t\t}\n+\t\tobs = obsService.saveObs(obs, \"Created when translating a FHIR Immunization resource.\");\n+\t\tnewImmunization = translator.toFhirResource(obs);\n+\t\treturn newImmunization;\n+\t}\n+\t\n+\t@Override\n+\tpublic Immunization update(String uuid, Immunization updatedImmunization) {\n+\t\tObs existingObs = obsService.getObsByUuid(uuid);\n+\t\tObs obs = translator.toOpenmrsType(existingObs, updatedImmunization);\n+\t\tobs = obsService.saveObs(obs, \"Updated when translating a FHIR Immunization resource.\");\n+\t\treturn translator.toFhirResource(obs);\n+\t}\n+\t\n+\t@Override\n+\tpublic Immunization delete(String uuid) {\n+\t\t// TODO Simply void the underlying obs\n+\t\tthrow new UnsupportedOperationException(\"Deleting a FHIR Immunization resource is currently not supported.\");\n+\t}\n+\t\n+\t@Override\n+\tpublic Concept getOpenmrsImmunizationConcept() {\n+\t\treturn helper.concept(immunizationGroupingConcept);\n+\t}\n+\t\n+\tpublic Patient getPatient(ReferenceParam patientParam) {", "originalCommit": "95f3b30d2427ea888ebc3d0618bbc4015063cfcb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzY2OTQyMA==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/264#discussion_r483669420", "bodyText": "This method will be gone :-)\nI may have used IllegalArgumentExceptions in other places though, we'll see.", "author": "mks-d", "createdAt": "2020-09-04T14:53:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjk2MTE1MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjk2MzE0MQ==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/264#discussion_r482963141", "bodyText": "So, in the interim between when you started working on this and now, we added a VisitReferenceTranslatorImpl class, which can be gotten by requesting an instance of EncounterReferenceTranslator<Visit>. It would probably be a good idea to use that.", "author": "ibacher", "createdAt": "2020-09-03T13:07:37Z", "path": "api/src/main/java/org/openmrs/module/fhir2/api/translators/VisitReferenceTranslator.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.module.fhir2.api.translators;\n+\n+import org.hl7.fhir.r4.model.Reference;\n+import org.openmrs.Encounter;\n+import org.openmrs.Visit;\n+\n+public interface VisitReferenceTranslator extends OpenmrsFhirTranslator<Visit, Reference> {", "originalCommit": "95f3b30d2427ea888ebc3d0618bbc4015063cfcb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "e047d8d8078b16f4a90abadb87c8aa4761a81cbc", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/e047d8d8078b16f4a90abadb87c8aa4761a81cbc", "message": "FM2-185: Removing redundant VisitReferenceTranslator.FM2-185: Removing redundant VisitReferenceTranslator.", "committedDate": "2020-09-04T14:57:29Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzY3NDQ4Nw==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/264#discussion_r483674487", "bodyText": "\u2191 above is the last reference to ObsService, however uncommenting the line that switches to using FhirObservationDao instead does throw the infamous \"cannot change immutable obs\" exception. Any idea?", "author": "mks-d", "createdAt": "2020-09-04T15:01:05Z", "path": "api/src/main/java/org/openmrs/module/fhir2/api/impl/FhirImmunizationServiceImpl.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.module.fhir2.api.impl;\n+\n+import static org.openmrs.module.fhir2.FhirConstants.CODED_SEARCH_HANDLER;\n+import static org.openmrs.module.fhir2.FhirConstants.PATIENT_REFERENCE_SEARCH_HANDLER;\n+import static org.openmrs.module.fhir2.api.translators.impl.ImmunizationTranslatorImpl.immunizationGroupingConcept;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import ca.uhn.fhir.rest.api.SortSpec;\n+import ca.uhn.fhir.rest.param.ReferenceAndListParam;\n+import ca.uhn.fhir.rest.param.TokenAndListParam;\n+import ca.uhn.fhir.rest.param.TokenParam;\n+import org.hl7.fhir.r4.model.Immunization;\n+import org.openmrs.Concept;\n+import org.openmrs.Obs;\n+import org.openmrs.api.EncounterService;\n+import org.openmrs.api.ObsService;\n+import org.openmrs.module.fhir2.api.FhirImmunizationService;\n+import org.openmrs.module.fhir2.api.dao.FhirObservationDao;\n+import org.openmrs.module.fhir2.api.search.param.SearchParameterMap;\n+import org.openmrs.module.fhir2.api.translators.ImmunizationTranslator;\n+import org.openmrs.module.fhir2.api.translators.impl.ImmunizationObsGroupHelper;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class FhirImmunizationServiceImpl implements FhirImmunizationService {\n+\t\n+\t@Autowired\n+\tprivate ImmunizationTranslator translator;\n+\t\n+\t@Autowired\n+\tprivate FhirObservationDao obsDao;\n+\t\n+\t@Autowired\n+\tprivate ObsService obsService;\n+\t\n+\t@Autowired\n+\tprivate EncounterService encounterService;\n+\t\n+\t@Autowired\n+\tprivate ImmunizationObsGroupHelper helper;\n+\t\n+\t@Override\n+\tpublic Immunization get(String uuid) {\n+\t\treturn translator.toFhirResource(obsDao.get(uuid));\n+\t}\n+\t\n+\t@Override\n+\tpublic Immunization create(Immunization newImmunization) {\n+\t\tObs obs = translator.toOpenmrsType(newImmunization);\n+\t\tif (obs.getEncounter().getId() == null) {\n+\t\t\tencounterService.saveEncounter(obs.getEncounter());\n+\t\t}\n+\t\tobs = obsDao.createOrUpdate(obs);\n+\t\treturn translator.toFhirResource(obs);\n+\t}\n+\t\n+\t@Override\n+\tpublic Immunization update(String uuid, Immunization updatedImmunization) {\n+\t\tObs obs = translator.toOpenmrsType(obsDao.get(uuid), updatedImmunization);\n+\t\tobs = obsService.saveObs(obs, \"Updated when translating a FHIR Immunization resource.\");\n+\t\t//\t\tobs = obsDao.createOrUpdate(obs);", "originalCommit": "e047d8d8078b16f4a90abadb87c8aa4761a81cbc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk3MDgzOQ==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/264#discussion_r498970839", "bodyText": "Hmmmm... yeah. This is actually why I'm not planning on implementing the \"update\" interaction for observations, mostly because the immutability requirement means that the UUID will change and so you have a PUT request operating to create a new resource and no good way to communicate that to the client. So, actually, my first recommendation would just be to not implement updates at all.\nIf we really do need to support updates to immunization resources, the only other alternative I could think of would be to essentially leave the main Obs itself alone, but void and replace the existing group members.", "author": "ibacher", "createdAt": "2020-10-02T18:03:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzY3NDQ4Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjgzOTIxNw==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/264#discussion_r512839217", "bodyText": "@mks-d Apart from this unresolved issue, I think the code looks good.", "author": "ibacher", "createdAt": "2020-10-27T16:24:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzY3NDQ4Nw=="}], "type": "inlineReview"}, {"oid": "8e797315fa3d4af5c37316fa53853e95eab103d2", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/8e797315fa3d4af5c37316fa53853e95eab103d2", "message": "FM2-185: Removing redundant VisitReferenceTranslator.", "committedDate": "2020-09-04T15:36:32Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzc0ODg3OQ==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/264#discussion_r483748879", "bodyText": "@ibacher I found this in a Spring test, and, I've got an issue with it.\nMostly that getSearchResults breaks down with an empty second param.\nFor now I'm doing some trials to work around that with an ugly if, but surely there's a better way that I don't know of to do something equivalent.", "author": "mks-d", "createdAt": "2020-09-04T17:01:30Z", "path": "api/src/main/java/org/openmrs/module/fhir2/api/impl/FhirImmunizationServiceImpl.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.module.fhir2.api.impl;\n+\n+import static org.openmrs.module.fhir2.FhirConstants.CODED_SEARCH_HANDLER;\n+import static org.openmrs.module.fhir2.FhirConstants.PATIENT_REFERENCE_SEARCH_HANDLER;\n+import static org.openmrs.module.fhir2.api.translators.impl.ImmunizationTranslatorImpl.immunizationGroupingConcept;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import ca.uhn.fhir.rest.api.SortSpec;\n+import ca.uhn.fhir.rest.param.ReferenceAndListParam;\n+import ca.uhn.fhir.rest.param.TokenAndListParam;\n+import ca.uhn.fhir.rest.param.TokenParam;\n+import org.hl7.fhir.r4.model.Immunization;\n+import org.openmrs.Concept;\n+import org.openmrs.Obs;\n+import org.openmrs.api.EncounterService;\n+import org.openmrs.api.ObsService;\n+import org.openmrs.module.fhir2.api.FhirImmunizationService;\n+import org.openmrs.module.fhir2.api.dao.FhirObservationDao;\n+import org.openmrs.module.fhir2.api.search.param.SearchParameterMap;\n+import org.openmrs.module.fhir2.api.translators.ImmunizationTranslator;\n+import org.openmrs.module.fhir2.api.translators.impl.ImmunizationObsGroupHelper;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class FhirImmunizationServiceImpl implements FhirImmunizationService {\n+\t\n+\t@Autowired\n+\tprivate ImmunizationTranslator translator;\n+\t\n+\t@Autowired\n+\tprivate FhirObservationDao obsDao;\n+\t\n+\t@Autowired\n+\tprivate ObsService obsService;\n+\t\n+\t@Autowired\n+\tprivate EncounterService encounterService;\n+\t\n+\t@Autowired\n+\tprivate ImmunizationObsGroupHelper helper;\n+\t\n+\t@Override\n+\tpublic Immunization get(String uuid) {\n+\t\treturn translator.toFhirResource(obsDao.get(uuid));\n+\t}\n+\t\n+\t@Override\n+\tpublic Immunization create(Immunization newImmunization) {\n+\t\tObs obs = translator.toOpenmrsType(newImmunization);\n+\t\tif (obs.getEncounter().getId() == null) {\n+\t\t\tencounterService.saveEncounter(obs.getEncounter());\n+\t\t}\n+\t\tobs = obsDao.createOrUpdate(obs);\n+\t\treturn translator.toFhirResource(obs);\n+\t}\n+\t\n+\t@Override\n+\tpublic Immunization update(String uuid, Immunization updatedImmunization) {\n+\t\tObs obs = translator.toOpenmrsType(obsDao.get(uuid), updatedImmunization);\n+\t\tobs = obsService.saveObs(obs, \"Updated when translating a FHIR Immunization resource.\");\n+\t\t//\t\tobs = obsDao.createOrUpdate(obs);\n+\t\treturn translator.toFhirResource(obs);\n+\t}\n+\t\n+\t@Override\n+\tpublic Immunization delete(String uuid) {\n+\t\t// TODO Simply void the underlying obs\n+\t\tthrow new UnsupportedOperationException(\"Deleting a FHIR Immunization resource is currently not supported.\");\n+\t}\n+\t\n+\t@Override\n+\tpublic Concept getOpenmrsImmunizationConcept() {\n+\t\treturn helper.concept(immunizationGroupingConcept);\n+\t}\n+\t\n+\t@Override\n+\tpublic Collection<Immunization> searchImmunizations(ReferenceAndListParam patientParam, SortSpec sort) {\n+\t\t\n+\t\tSearchParameterMap searchParams = new SearchParameterMap();\n+\t\tsearchParams.addParameter(PATIENT_REFERENCE_SEARCH_HANDLER, patientParam);\n+\t\tTokenAndListParam conceptParam = new TokenAndListParam();\n+\t\tTokenParam token = new TokenParam();\n+\t\ttoken.setValue(getOpenmrsImmunizationConcept().getId().toString());\n+\t\tconceptParam.addAnd(token);\n+\t\tsearchParams.addParameter(CODED_SEARCH_HANDLER, conceptParam);\n+\t\t\n+\t\tList<String> matchingResourceUuids = obsDao.getSearchResultUuids(searchParams);\n+\t\tCollection<Obs> obs = obsDao.getSearchResults(searchParams, matchingResourceUuids);", "originalCommit": "8e797315fa3d4af5c37316fa53853e95eab103d2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTU3MjE2Mg==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/264#discussion_r499572162", "bodyText": "You should really be returning a SearchQueryBundleProvider from this method to support paging, etc. The SearchQueryBundleProvider is also designed to do those DAO calls directly. See how things our structured in our other service classes.", "author": "ibacher", "createdAt": "2020-10-05T12:48:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzc0ODg3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTEyMjYwOQ==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/264#discussion_r509122609", "bodyText": "Thanks @ibacher that was a very helpful tip, I did use SearchQueryBundleProvider in my next commit \ud83d\udc4d", "author": "mks-d", "createdAt": "2020-10-21T09:18:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzc0ODg3OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk3MzY4OA==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/264#discussion_r498973688", "bodyText": "So here's the last thing I'm a little hesitant about with this: should we be automatically creating metadata like this? I think I'd be happier if we just bailed with an error in the case where the necessary metadata didn't exist. This is because while we're creating default mapping for FHIR resources, part of the goal is to have the implementations be reasonably easy to override locally to meet whatever requirements, so I don't love the idea of creating unnecessary encounters for people who decide to create their own implementation of the Immunization resource.", "author": "ibacher", "createdAt": "2020-10-02T18:09:43Z", "path": "api/src/main/java/org/openmrs/module/fhir2/FhirActivator.java", "diffHunk": "@@ -19,8 +25,58 @@\n @Slf4j\n public class FhirActivator extends BaseModuleActivator {\n \t\n+\t/**\n+\t * @return The immunizations encounter type\n+\t */\n+\tpublic static EncounterType getImmunizationsEncounterTypeOrCreateIfMissing() {", "originalCommit": "538da4eea76c6219ce54da12bdaf011b22c09f7d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTM3MTE4OQ==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/264#discussion_r509371189", "bodyText": "I just changed that, the activator is now left alone ;-)", "author": "mks-d", "createdAt": "2020-10-21T15:09:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk3MzY4OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk3NTA4Mg==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/264#discussion_r498975082", "bodyText": "Is there any reason that this throws an IllegalArgumentException wrapped inside another IllegalArgumentException?", "author": "ibacher", "createdAt": "2020-10-02T18:13:00Z", "path": "api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/ImmunizationObsGroupHelper.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/*\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.module.fhir2.api.translators.impl;\n+\n+import static org.openmrs.module.fhir2.api.translators.impl.ImmunizationTranslatorImpl.immunizationConcepts;\n+import static org.openmrs.module.fhir2.api.translators.impl.ImmunizationTranslatorImpl.immunizationGroupingConcept;\n+\n+import java.util.Arrays;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import lombok.AccessLevel;\n+import lombok.Setter;\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.commons.lang.Validate;\n+import org.hl7.fhir.r4.model.Immunization.ImmunizationPerformerComponent;\n+import org.openmrs.Concept;\n+import org.openmrs.EncounterRole;\n+import org.openmrs.Obs;\n+import org.openmrs.Provider;\n+import org.openmrs.api.APIException;\n+import org.openmrs.api.ConceptService;\n+import org.openmrs.module.fhir2.FhirActivator;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+@Setter(AccessLevel.PACKAGE)\n+public class ImmunizationObsGroupHelper {\n+\t\n+\t@Autowired\n+\tpublic ImmunizationObsGroupHelper(ConceptService conceptService) {\n+\t\tthis.conceptService = conceptService;\n+\t}\n+\t\n+\tprivate ConceptService conceptService;\n+\t\n+\tpublic Concept concept(String refTerm) throws IllegalStateException, APIException {\n+\t\tString[] mapping = refTerm.split(\":\");\n+\t\treturn Optional.of(conceptService.getConceptByMapping(mapping[1], mapping[0])).orElseThrow(\n+\t\t    () -> new IllegalStateException(\n+\t\t            \"The reference term '\" + refTerm + \"' is either mapped to no concepts or to more than one concept.\"));\n+\t}\n+\t\n+\tpublic Obs newImmunizationObsGroup() {\n+\t\tObs obs = new Obs();\n+\t\tobs.setConcept(concept(immunizationGroupingConcept));\n+\t\tobs.setObsDatetime(new Date());\n+\t\t\n+\t\tArrays.asList(immunizationConcepts).stream().forEach(refTerm -> {\n+\t\t\tObs o = new Obs();\n+\t\t\to.setConcept(concept(refTerm));\n+\t\t\to.setObsDatetime(obs.getObsDatetime());\n+\t\t\tobs.addGroupMember(o);\n+\t\t});\n+\t\t\n+\t\treturn obs;\n+\t}\n+\t\n+\tpublic Provider getAdministeringProvider(Obs obs) throws IllegalArgumentException {\n+\t\tEncounterRole role = FhirActivator.getAdministeringEncounterRoleOrCreateIfMissing();\n+\t\treturn obs.getEncounter().getProvidersByRole(role).stream().findFirst()\n+\t\t        .orElseThrow(() -> new IllegalArgumentException(new IllegalArgumentException(", "originalCommit": "538da4eea76c6219ce54da12bdaf011b22c09f7d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTU2MjM2OQ==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/264#discussion_r499562369", "bodyText": "This should still return a valid FHIR reference, so it needs to be Encounter/<uuid> rather than Visit/<uuid>.", "author": "ibacher", "createdAt": "2020-10-05T12:31:44Z", "path": "api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/BaseReferenceHandlingTranslator.java", "diffHunk": "@@ -43,6 +44,10 @@ protected Reference createEncounterReference(@NotNull OpenmrsObject encounter) {\n \t\t        .setType(FhirConstants.ENCOUNTER);\n \t}\n \t\n+\tprotected Reference createVisitReference(@NotNull Visit visit) {\n+\t\treturn new Reference().setReference(FhirConstants.VISIT + \"/\" + visit.getUuid()).setType(FhirConstants.ENCOUNTER);", "originalCommit": "538da4eea76c6219ce54da12bdaf011b22c09f7d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTA1MjQ3MA==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/264#discussion_r509052470", "bodyText": "Turns out that this wasn't needed anymore, removing it.", "author": "mks-d", "createdAt": "2020-10-21T07:34:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTU2MjM2OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTU2NzI5Mg==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/264#discussion_r499567292", "bodyText": "Aside from populating the constants below, this seems to always be cast to a List using Arrays.asList() when it's read. It seems like it would be better to just create a list here (even if it's just Arrays.asList(new String[] { \"CIEL:984\", \"CIEL:1410\", \"CIEL:1418\", \"CIEL:1419\", \"CIEL:1420\", \"CIEL:165907\" })), since that involves allocating and deallocating fewer objects.", "author": "ibacher", "createdAt": "2020-10-05T12:40:17Z", "path": "api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/ImmunizationTranslatorImpl.java", "diffHunk": "@@ -0,0 +1,206 @@\n+/*\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.module.fhir2.api.translators.impl;\n+\n+import java.util.Arrays;\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import lombok.AccessLevel;\n+import lombok.Setter;\n+import org.apache.commons.collections.CollectionUtils;\n+import org.apache.commons.lang.StringUtils;\n+import org.hl7.fhir.r4.model.Coding;\n+import org.hl7.fhir.r4.model.Immunization;\n+import org.hl7.fhir.r4.model.Immunization.ImmunizationPerformerComponent;\n+import org.hl7.fhir.r4.model.Immunization.ImmunizationProtocolAppliedComponent;\n+import org.hl7.fhir.r4.model.Immunization.ImmunizationStatus;\n+import org.hl7.fhir.r4.model.PositiveIntType;\n+import org.hl7.fhir.r4.model.Reference;\n+import org.openmrs.Encounter;\n+import org.openmrs.EncounterRole;\n+import org.openmrs.EncounterType;\n+import org.openmrs.Location;\n+import org.openmrs.Obs;\n+import org.openmrs.Patient;\n+import org.openmrs.Provider;\n+import org.openmrs.Visit;\n+import org.openmrs.api.ConceptService;\n+import org.openmrs.module.fhir2.FhirActivator;\n+import org.openmrs.module.fhir2.api.translators.ConceptTranslator;\n+import org.openmrs.module.fhir2.api.translators.EncounterReferenceTranslator;\n+import org.openmrs.module.fhir2.api.translators.ImmunizationTranslator;\n+import org.openmrs.module.fhir2.api.translators.ObservationValueTranslator;\n+import org.openmrs.module.fhir2.api.translators.PatientReferenceTranslator;\n+import org.openmrs.module.fhir2.api.translators.PractitionerReferenceTranslator;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+@Setter(AccessLevel.PACKAGE)\n+public class ImmunizationTranslatorImpl implements ImmunizationTranslator {\n+\t\n+\tpublic static final String immunizationGroupingConcept = \"CIEL:1421\";\n+\t\n+\tpublic static final String[] immunizationConcepts = { \"CIEL:984\", \"CIEL:1410\", \"CIEL:1418\", \"CIEL:1419\", \"CIEL:1420\",", "originalCommit": "538da4eea76c6219ce54da12bdaf011b22c09f7d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTU2ODE4NA==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/264#discussion_r499568184", "bodyText": "I'd tend to prefer this being externalised in a file, but there's no real harm.", "author": "ibacher", "createdAt": "2020-10-05T12:41:48Z", "path": "api/src/test/java/org/openmrs/module/fhir2/api/FhirImmunizationServiceTest.java", "diffHunk": "@@ -0,0 +1,262 @@\n+/*\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.module.fhir2.api;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hl7.fhir.r4.model.Patient.SP_IDENTIFIER;\n+import static org.openmrs.module.fhir2.FhirConstants.ENCOUNTER;\n+import static org.openmrs.module.fhir2.FhirConstants.PATIENT;\n+import static org.openmrs.module.fhir2.FhirConstants.PRACTITIONER;\n+import static org.openmrs.module.fhir2.api.translators.impl.ImmunizationTranslatorImpl.ciel1410;\n+import static org.openmrs.module.fhir2.api.translators.impl.ImmunizationTranslatorImpl.ciel1418;\n+import static org.openmrs.module.fhir2.api.translators.impl.ImmunizationTranslatorImpl.ciel1419;\n+import static org.openmrs.module.fhir2.api.translators.impl.ImmunizationTranslatorImpl.ciel1420;\n+import static org.openmrs.module.fhir2.api.translators.impl.ImmunizationTranslatorImpl.ciel165907;\n+import static org.openmrs.module.fhir2.api.translators.impl.ImmunizationTranslatorImpl.ciel984;\n+\n+import java.text.ParseException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import ca.uhn.fhir.context.FhirContext;\n+import ca.uhn.fhir.parser.IParser;\n+import ca.uhn.fhir.rest.param.ReferenceAndListParam;\n+import ca.uhn.fhir.rest.param.ReferenceOrListParam;\n+import ca.uhn.fhir.rest.param.ReferenceParam;\n+import org.hl7.fhir.r4.model.Coding;\n+import org.hl7.fhir.r4.model.DateTimeType;\n+import org.hl7.fhir.r4.model.Immunization;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.openmrs.EncounterRole;\n+import org.openmrs.EncounterType;\n+import org.openmrs.GlobalProperty;\n+import org.openmrs.Obs;\n+import org.openmrs.Provider;\n+import org.openmrs.api.AdministrationService;\n+import org.openmrs.api.ConceptService;\n+import org.openmrs.api.ObsService;\n+import org.openmrs.module.fhir2.FhirActivator;\n+import org.openmrs.module.fhir2.FhirConstants;\n+import org.openmrs.module.fhir2.TestFhirSpringConfiguration;\n+import org.openmrs.module.fhir2.api.translators.impl.ImmunizationObsGroupHelper;\n+import org.openmrs.test.BaseModuleContextSensitiveTest;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.test.context.ContextConfiguration;\n+\n+@ContextConfiguration(classes = TestFhirSpringConfiguration.class, inheritLocations = false)\n+public class FhirImmunizationServiceTest extends BaseModuleContextSensitiveTest {\n+\t\n+\tprivate static final String IMMUNIZATIONS_METADATA_XML = \"org/openmrs/module/fhir2/api/translators/ImmunizationTranslator_metadata.xml\";\n+\t\n+\tprivate static final String IMMUNIZATIONS_INITIAL_DATA_XML = \"org/openmrs/module/fhir2/api/FhirImmunizationService_initial_data.xml\";\n+\t\n+\tprivate static final String PRACTITIONER_INITIAL_DATA_XML = \"org/openmrs/module/fhir2/api/dao/impl/FhirPractitionerDaoImplTest_initial_data.xml\";\n+\t\n+\t@Autowired\n+\tprivate FhirImmunizationService service;\n+\t\n+\t@Autowired\n+\tprivate ObsService obsService;\n+\t\n+\t@Autowired\n+\tprivate ConceptService conceptService;\n+\t\n+\t@Autowired\n+\tprivate AdministrationService adminService;\n+\t\n+\tprivate EncounterRole administeringRole = null;\n+\t\n+\tprivate EncounterType immunizationEncounterType = null;\n+\t\n+\t@Before\n+\tpublic void setup() throws Exception {\n+\t\tadminService.saveGlobalProperty(\n+\t\t    new GlobalProperty(FhirConstants.IMMUNIZATIONS_ENCOUNTER_TYPE_PROPERTY, \"29c02aff-9a93-46c9-bf6f-48b552fcb1fa\"));\n+\t\tadminService.saveGlobalProperty(\n+\t\t    new GlobalProperty(FhirConstants.ADMINISTERING_ENCOUNTER_ROLE_PROPERTY, \"546cce2d-6d58-4097-ba92-206c1a2a0462\"));\n+\t\texecuteDataSet(IMMUNIZATIONS_METADATA_XML);\n+\t\tadministeringRole = FhirActivator.getAdministeringEncounterRoleOrCreateIfMissing();\n+\t\timmunizationEncounterType = FhirActivator.getImmunizationsEncounterTypeOrCreateIfMissing();\n+\t\texecuteDataSet(IMMUNIZATIONS_INITIAL_DATA_XML);\n+\t\texecuteDataSet(PRACTITIONER_INITIAL_DATA_XML);\n+\t}\n+\t\n+\t/**\n+\t * Asserts the commons parts between the grouping obs and its members.\n+\t * \n+\t * @param obs The obs to assert.\n+\t * @param patientUuid The UUID of the patient to be verified.\n+\t * @param visitUuid The UUID of the visit to be verified.\n+\t * @param providerUuid The UUID of the provider to be verified.\n+\t */\n+\tprivate void assertObsCommons(Obs obs, String patientUuid, String visitUuid, String providerUuid) {\n+\t\tassertThat(obs.getPerson().getUuid(), is(patientUuid));\n+\t\tassertThat(obs.getEncounter().getEncounterType(), is(immunizationEncounterType));\n+\t\tassertThat(obs.getEncounter().getVisit().getUuid(), is(visitUuid));\n+\t\tSet<Provider> providers = obs.getEncounter().getProvidersByRole(administeringRole);\n+\t\tassertThat(providers.size(), is(1));\n+\t\tassertThat(providers.stream().findFirst().get().getUuid(), is(providerUuid));\n+\t}\n+\t\n+\t@Test\n+\tpublic void saveImmunization_shouldCreateEncounterAndObsGroupWhenNewImmunization() throws ParseException {\n+\t\t\n+\t\t// setup\n+\t\tFhirContext ctx = FhirContext.forR4();\n+\t\tIParser parser = ctx.newJsonParser();\n+\t\tImmunization newImmunization = parser.parseResource(Immunization.class, \"{\\n\"\n+\t\t        + \"  \\\"resourceType\\\": \\\"Immunization\\\",\\n\" + \"  \\\"status\\\": \\\"completed\\\",\\n\" + \"  \\\"vaccineCode\\\": {\\n\"\n+\t\t        + \"    \\\"coding\\\": [\\n\" + \"      {\\n\" + \"        \\\"code\\\": \\\"15f83cd6-64e9-4e06-a5f9-364d3b14a43d\\\",\\n\"\n+\t\t        + \"        \\\"display\\\": \\\"Aspirin as a vaccine\\\"\\n\" + \"      }\\n\" + \"    ]\\n\" + \"  },\\n\"\n+\t\t        + \"  \\\"patient\\\": {\\n\" + \"    \\\"reference\\\": \\\"Patient/a7e04421-525f-442f-8138-05b619d16def\\\",\\n\"\n+\t\t        + \"    \\\"type\\\": \\\"Patient\\\"\\n\" + \"  },\\n\" + \"  \\\"encounter\\\": {\\n\"\n+\t\t        + \"    \\\"reference\\\": \\\"Encounter/7d8c1980-6b78-11e0-93c3-18a905e044dc\\\",\\n\"\n+\t\t        + \"    \\\"type\\\": \\\"Encounter\\\"\\n\" + \"  },\\n\" + \"  \\\"occurrenceDateTime\\\": \\\"2020-07-08T18:30:00.000Z\\\",\\n\"\n+\t\t        + \"  \\\"manufacturer\\\": {\\n\" + \"    \\\"display\\\": \\\"Acme\\\"\\n\" + \"  },\\n\" + \"  \\\"lotNumber\\\": \\\"FOO1234\\\",\\n\"\n+\t\t        + \"  \\\"expirationDate\\\": \\\"2022-07-31T18:30:00.000Z\\\",\\n\" + \"  \\\"performer\\\": [\\n\" + \"    {\\n\"\n+\t\t        + \"      \\\"actor\\\": {\\n\" + \"        \\\"reference\\\": \\\"Practitioner/f9badd80-ab76-11e2-9e96-0800200c9a66\\\",\\n\"\n+\t\t        + \"        \\\"type\\\": \\\"Practitioner\\\"\\n\" + \"      }\\n\" + \"    }\\n\" + \"  ],\\n\" + \"  \\\"protocolApplied\\\": [\\n\"\n+\t\t        + \"    {\\n\" + \"      \\\"doseNumberPositiveInt\\\": 2,\\n\" + \"      \\\"series\\\": \\\"Dose 2\\\"\\n\" + \"    }\\n\"\n+\t\t        + \"  ]\\n\" + \"}\");\n+\t\t\n+\t\t// replay\n+\t\tImmunization savedImmunization = service.create(newImmunization);\n+\t\tObs obs = obsService.getObsByUuid(savedImmunization.getId());\n+\t\t\n+\t\t// verify\n+\t\tImmunizationObsGroupHelper helper = new ImmunizationObsGroupHelper(conceptService);\n+\t\thelper.validateImmunizationObsGroup(obs);\n+\t\tassertObsCommons(obs, \"a7e04421-525f-442f-8138-05b619d16def\", \"7d8c1980-6b78-11e0-93c3-18a905e044dc\",\n+\t\t    \"f9badd80-ab76-11e2-9e96-0800200c9a66\");\n+\t\t\n+\t\tobs.getGroupMembers().forEach(o -> {\n+\t\t\tassertObsCommons(o, \"a7e04421-525f-442f-8138-05b619d16def\", \"7d8c1980-6b78-11e0-93c3-18a905e044dc\",\n+\t\t\t    \"f9badd80-ab76-11e2-9e96-0800200c9a66\");\n+\t\t});\n+\t\t\n+\t\tMap<String, Obs> members = helper.getObsMembersMap(obs);\n+\t\tassertThat(members.get(ciel984).getValueCoded().getUuid(), is(\"15f83cd6-64e9-4e06-a5f9-364d3b14a43d\"));\n+\t\tassertThat(members.get(ciel1410).getValueDatetime(),\n+\t\t    equalTo(new DateTimeType(\"2020-07-08T18:30:00.000Z\").getValue()));\n+\t\tassertThat(members.get(ciel1418).getValueNumeric(), equalTo(2.0));\n+\t\tassertThat(members.get(ciel1419).getValueText(), is(\"Acme\"));\n+\t\tassertThat(members.get(ciel1420).getValueText(), is(\"FOO1234\"));\n+\t\tassertThat(members.get(ciel165907).getValueDatetime(),\n+\t\t    equalTo(new DateTimeType(\"2022-07-31T18:30:00.000Z\").getValue()));\n+\t}\n+\t\n+\t@Test\n+\tpublic void updateImmunization_shouldUpdateImmunizationAccordingly() throws ParseException {\n+\t\t\n+\t\t// setup\n+\t\tFhirContext ctx = FhirContext.forR4();\n+\t\tIParser parser = ctx.newJsonParser();\n+\t\tImmunization updatedImmunization = parser.parseResource(Immunization.class,", "originalCommit": "538da4eea76c6219ce54da12bdaf011b22c09f7d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTEzMjUxOQ==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/264#discussion_r509132519", "bodyText": "I hear you, however for the ease of debugging I'll currently leave those to not be in test resources, if that's ok?", "author": "mks-d", "createdAt": "2020-10-21T09:33:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTU2ODE4NA=="}], "type": "inlineReview"}, {"oid": "f90cffaf54eba642d5bbe8b8cf239bca6e3565be", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/f90cffaf54eba642d5bbe8b8cf239bca6e3565be", "message": "FM2-185: Started off with immunization translator implementation and tests.", "committedDate": "2020-10-21T07:09:23Z", "type": "commit"}, {"oid": "88ed66a43f5bb5363d1dd6efadc4cdecabe9c359", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/88ed66a43f5bb5363d1dd6efadc4cdecabe9c359", "message": "FM2-185: First complete service test when creating new immunization.", "committedDate": "2020-10-21T07:13:50Z", "type": "commit"}, {"oid": "f6afaeb5959a7762205c0d638c57cae7edb9c142", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/f6afaeb5959a7762205c0d638c57cae7edb9c142", "message": "FM2-185: Started toFhirResource(..) implementation.", "committedDate": "2020-10-21T07:13:50Z", "type": "commit"}, {"oid": "a0e2eff403143a76aec51f0eec72e04f40ec574d", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/a0e2eff403143a76aec51f0eec72e04f40ec574d", "message": "FM2-185: First attempt at finalising toFhirResource(Obs).", "committedDate": "2020-10-21T07:13:50Z", "type": "commit"}, {"oid": "7b5265e659e345d37529f5a21e2fd9b0ed9c2e04", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/7b5265e659e345d37529f5a21e2fd9b0ed9c2e04", "message": "FM2-185: Testing updateImmunization(..) and first stab at searchImmunizations(..).", "committedDate": "2020-10-21T07:13:50Z", "type": "commit"}, {"oid": "716cc88e61891dcffd833d8490609a439fd0ebbc", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/716cc88e61891dcffd833d8490609a439fd0ebbc", "message": "FM2-185: Equaling concepts with .equals(..) - Removing unused test.", "committedDate": "2020-10-21T07:13:50Z", "type": "commit"}, {"oid": "f28e1ec2eec0276c4cb82c5eca7af7cdd7521953", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/f28e1ec2eec0276c4cb82c5eca7af7cdd7521953", "message": "FM2-185: Better handling of encounter role and type UUIDs.", "committedDate": "2020-10-21T07:13:50Z", "type": "commit"}, {"oid": "808c43e9b809cb9f14a70e0ac27341a9fb8a435b", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/808c43e9b809cb9f14a70e0ac27341a9fb8a435b", "message": "FM2-185: Minor formatting changes.", "committedDate": "2020-10-21T07:13:50Z", "type": "commit"}, {"oid": "ffe18ef6c0483963623c2131b352a559e214f4f7", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/ffe18ef6c0483963623c2131b352a559e214f4f7", "message": "FM2-185: Asserting fetched immunizations.", "committedDate": "2020-10-21T07:13:50Z", "type": "commit"}, {"oid": "0ace5cce24821385e5274b4aa63d4d65b8cf17e1", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/0ace5cce24821385e5274b4aa63d4d65b8cf17e1", "message": "FM2-185: Addressed points 1, 3, 4, 9.", "committedDate": "2020-10-21T07:13:50Z", "type": "commit"}, {"oid": "5a0b459d68775db41d48144cbbcb31a2544747c6", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/5a0b459d68775db41d48144cbbcb31a2544747c6", "message": "FM2-185: Addressed point 2.", "committedDate": "2020-10-21T07:13:50Z", "type": "commit"}, {"oid": "44aef8fcc74deb53992bd7630ee4a413031e7ae6", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/44aef8fcc74deb53992bd7630ee4a413031e7ae6", "message": "FM2-185: Addressed point 5.", "committedDate": "2020-10-21T07:13:50Z", "type": "commit"}, {"oid": "88f7453cc320cf55e23b344a702e0ed09b69db1a", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/88f7453cc320cf55e23b344a702e0ed09b69db1a", "message": "FM2-185: Addressed point 6.", "committedDate": "2020-10-21T07:13:50Z", "type": "commit"}, {"oid": "2882d8a48cf89ce517eb959bcb9211f3df9e3a22", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/2882d8a48cf89ce517eb959bcb9211f3df9e3a22", "message": "FM2-185: Addressed point 7.", "committedDate": "2020-10-21T07:13:50Z", "type": "commit"}, {"oid": "cfb80fd5739bf5f351973f8c0538613d9295ca14", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/cfb80fd5739bf5f351973f8c0538613d9295ca14", "message": "FM2-185: Addressed point 8.", "committedDate": "2020-10-21T07:13:50Z", "type": "commit"}, {"oid": "7191afd4ff4a71f0918f5c9f07eaf5277f4f2cd1", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/7191afd4ff4a71f0918f5c9f07eaf5277f4f2cd1", "message": "FM2-185: Moving back CIEL constants to impl class.", "committedDate": "2020-10-21T07:13:50Z", "type": "commit"}, {"oid": "51db10b37450209c8c575d702ace589afad183b7", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/51db10b37450209c8c575d702ace589afad183b7", "message": "FM2-185: Leveraging FhirObservationDao in FhirImmunizationServiceImpl.", "committedDate": "2020-10-21T07:13:50Z", "type": "commit"}, {"oid": "5f6eea22113a24db8a4fd5bda94ce5beeef6c07d", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/5f6eea22113a24db8a4fd5bda94ce5beeef6c07d", "message": "FM2-185: Removing redundant VisitReferenceTranslator.", "committedDate": "2020-10-21T07:13:50Z", "type": "commit"}, {"oid": "b8e1ead91a1473a875500f86bb8ec7fc02d1d8df", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/b8e1ead91a1473a875500f86bb8ec7fc02d1d8df", "message": "FM2-185: Improving the obs group validator.", "committedDate": "2020-10-21T07:13:50Z", "type": "commit"}, {"oid": "2da37d51cd4d62129e0c10a8cefd06eb04efb768", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/2da37d51cd4d62129e0c10a8cefd06eb04efb768", "message": "FM2-185: Reverting to ObsService for create/update operations.", "committedDate": "2020-10-21T07:13:50Z", "type": "commit"}, {"oid": "ea37b1836ffa5238295722bddfc058b0713817c6", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/ea37b1836ffa5238295722bddfc058b0713817c6", "message": "FM2-185: Removed unnecessary BaseReferenceHandlingTranslator#createVisitReference.", "committedDate": "2020-10-21T07:33:29Z", "type": "commit"}, {"oid": "c7d845e931c62161f408aee33445f18a261383ce", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/c7d845e931c62161f408aee33445f18a261383ce", "message": "FM2-185: FhirImmunizationService's search to return IBundleProvider.", "committedDate": "2020-10-21T09:19:59Z", "type": "commit"}, {"oid": "ac339b4cf0fd2c86bad935eefb04ae4d65189977", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/ac339b4cf0fd2c86bad935eefb04ae4d65189977", "message": "FM2-185: ImmunizationTranslatorImpl.immunizationConcepts becomes an immutable ArrayList.", "committedDate": "2020-10-21T09:30:46Z", "type": "commit"}, {"oid": "bbbcea36add6d0684c4e097f98b1251d1b7e0978", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/bbbcea36add6d0684c4e097f98b1251d1b7e0978", "message": "FM2-185: Activator to not create immunizations-related metadata anymore.", "committedDate": "2020-10-21T15:05:40Z", "type": "commit"}, {"oid": "bbbcea36add6d0684c4e097f98b1251d1b7e0978", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/bbbcea36add6d0684c4e097f98b1251d1b7e0978", "message": "FM2-185: Activator to not create immunizations-related metadata anymore.", "committedDate": "2020-10-21T15:05:40Z", "type": "forcePushed"}, {"oid": "4a0cfa6e3783e4c74b0427adff5d69ede96e0350", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/4a0cfa6e3783e4c74b0427adff5d69ede96e0350", "message": "FM2-185: Throwing InvalidRequestExceptions with OperationOutcome.", "committedDate": "2020-10-21T15:30:43Z", "type": "commit"}, {"oid": "f2953accf2fbc909c5184f43d8f0967368b234eb", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/f2953accf2fbc909c5184f43d8f0967368b234eb", "message": "FM2-185: Replacing further IllegalArgumentExceptions.", "committedDate": "2020-10-21T15:46:58Z", "type": "commit"}, {"oid": "eb4075e7b508b16b48835e8467889436cfdabe82", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/eb4075e7b508b16b48835e8467889436cfdabe82", "message": "FM2-185: Removed unused \"Visit\" constant.", "committedDate": "2020-10-22T09:33:32Z", "type": "commit"}, {"oid": "e9f2e717e534a143ab12ad35a636f326070b62a4", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/e9f2e717e534a143ab12ad35a636f326070b62a4", "message": "FM2-185: Removing unused method + streamlining throws of InvalidRequestException.", "committedDate": "2020-10-23T10:28:16Z", "type": "commit"}]}