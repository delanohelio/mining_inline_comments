{"pr_number": 81, "pr_title": "FM2-82 : Allergy resource initial implementation", "pr_createdAt": "2020-02-21T11:58:59Z", "pr_url": "https://github.com/openmrs/openmrs-module-fhir2/pull/81", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjU1MjYzNg==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/81#discussion_r382552636", "bodyText": "private SessionFactory sessionFactory", "author": "corneliouzbett", "createdAt": "2020-02-21T12:20:41Z", "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirAllergyIntoleranceDaoImpl.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.module.fhir2.api.dao.impl;\n+\n+import static org.hibernate.criterion.Restrictions.eq;\n+\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+\n+import lombok.AccessLevel;\n+import lombok.Setter;\n+import org.hibernate.SessionFactory;\n+import org.openmrs.Allergy;\n+import org.openmrs.module.fhir2.api.dao.FhirAllergyIntoleranceDao;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+@Setter(AccessLevel.PACKAGE)\n+public class FhirAllergyIntoleranceDaoImpl implements FhirAllergyIntoleranceDao {\n+\t\n+\t@Inject\n+\t@Named(\"sessionFactory\")\n+\tSessionFactory sessionFactory;", "originalCommit": "0092fcec1dc7ec052fcf8813cfac5085db31704d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjU1NjEwNQ==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/81#discussion_r382556105", "bodyText": "Can you add documentation here", "author": "corneliouzbett", "createdAt": "2020-02-21T12:29:48Z", "path": "api/src/main/java/org/openmrs/module/fhir2/api/translators/AllergyIntoleranceTranslator.java", "diffHunk": "@@ -0,0 +1,22 @@\n+/*\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.module.fhir2.api.translators;\n+\n+import org.hl7.fhir.r4.model.AllergyIntolerance;\n+import org.openmrs.Allergy;\n+\n+public interface AllergyIntoleranceTranslator extends ToFhirTranslator<Allergy, AllergyIntolerance>, UpdatableOpenmrsTranslator<Allergy, AllergyIntolerance> {\n+\t\n+\t@Override\n+\tAllergyIntolerance toFhirResource(Allergy data);\n+\t\n+\t@Override\n+\tAllergy toOpenmrsType(Allergy allergy, AllergyIntolerance resource);", "originalCommit": "0092fcec1dc7ec052fcf8813cfac5085db31704d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "a8d8fe055a0dfffc55f4987e3d6819f3ff2984e9", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/a8d8fe055a0dfffc55f4987e3d6819f3ff2984e9", "message": "FM2-82 : Allergy resource initial implementation", "committedDate": "2020-02-21T16:16:51Z", "type": "forcePushed"}, {"oid": "1d922aa2590104882cbdc06901b77c82f8bd2ca9", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/1d922aa2590104882cbdc06901b77c82f8bd2ca9", "message": "FM2-82 : Allergy resource initial implementation", "committedDate": "2020-02-21T16:17:30Z", "type": "forcePushed"}, {"oid": "70d6e94b30ed90b9aa83400f675a1c52d344176c", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/70d6e94b30ed90b9aa83400f675a1c52d344176c", "message": "FM2-82 : Allergy resource initial implementation", "committedDate": "2020-02-21T16:19:36Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjY3NTI4Mw==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/81#discussion_r382675283", "bodyText": "Just need the one /", "author": "ibacher", "createdAt": "2020-02-21T16:22:11Z", "path": "api/src/main/java/org/openmrs/module/fhir2/FhirConstants.java", "diffHunk": "@@ -29,6 +31,9 @@\n \tpublic static final String CONDITION_VERIFICATION_STATUS_VALUE_SET_URI = HL7_FHIR_VALUE_SET_PREFIX\n \t        + \"/condition-ver-status\";\n \t\n+\tpublic static final String ALLERGY_INTOLERANCE_CLINICAL_STATUS_VALUE_SET = HL7_FHIR_CODE_SYSTEM_PREFIX\n+\t        + \"//allergyintolerance-clinical\";", "originalCommit": "70d6e94b30ed90b9aa83400f675a1c52d344176c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjY3NTc0OA==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/81#discussion_r382675748", "bodyText": "Add a blank line before this line", "author": "ibacher", "createdAt": "2020-02-21T16:22:59Z", "path": "api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/AllergyIntoleranceTranslatorImpl.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.module.fhir2.api.translators.impl;\n+\n+import lombok.AccessLevel;\n+import lombok.Setter;\n+import org.hl7.fhir.r4.model.AllergyIntolerance;\n+import org.hl7.fhir.r4.model.CodeableConcept;\n+import org.hl7.fhir.r4.model.Coding;\n+import org.openmrs.Allergen;\n+import org.openmrs.AllergenType;\n+import org.openmrs.Allergy;\n+import org.openmrs.module.fhir2.FhirConstants;\n+import org.openmrs.module.fhir2.api.translators.AllergyIntoleranceTranslator;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+@Setter(AccessLevel.PACKAGE)\n+public class AllergyIntoleranceTranslatorImpl implements AllergyIntoleranceTranslator {\n+\t\n+\t@Override\n+\tpublic AllergyIntolerance toFhirResource(Allergy omrsAllergy) {\n+\t\tif (omrsAllergy == null) {\n+\t\t\treturn null;\n+\t\t}\n+\t\tAllergyIntolerance allergy = new AllergyIntolerance();", "originalCommit": "70d6e94b30ed90b9aa83400f675a1c52d344176c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjY3NjA0Nw==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/81#discussion_r382676047", "bodyText": "Add a blank line before this line", "author": "ibacher", "createdAt": "2020-02-21T16:23:32Z", "path": "api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/AllergyIntoleranceTranslatorImpl.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.module.fhir2.api.translators.impl;\n+\n+import lombok.AccessLevel;\n+import lombok.Setter;\n+import org.hl7.fhir.r4.model.AllergyIntolerance;\n+import org.hl7.fhir.r4.model.CodeableConcept;\n+import org.hl7.fhir.r4.model.Coding;\n+import org.openmrs.Allergen;\n+import org.openmrs.AllergenType;\n+import org.openmrs.Allergy;\n+import org.openmrs.module.fhir2.FhirConstants;\n+import org.openmrs.module.fhir2.api.translators.AllergyIntoleranceTranslator;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+@Setter(AccessLevel.PACKAGE)\n+public class AllergyIntoleranceTranslatorImpl implements AllergyIntoleranceTranslator {\n+\t\n+\t@Override\n+\tpublic AllergyIntolerance toFhirResource(Allergy omrsAllergy) {\n+\t\tif (omrsAllergy == null) {\n+\t\t\treturn null;\n+\t\t}\n+\t\tAllergyIntolerance allergy = new AllergyIntolerance();\n+\t\tallergy.setId(omrsAllergy.getUuid());\n+\t\tif (omrsAllergy.getAllergen() != null) {\n+\t\t\tswitch (omrsAllergy.getAllergen().getAllergenType()) {\n+\t\t\t\tcase DRUG:\n+\t\t\t\t\tallergy.addCategory(AllergyIntolerance.AllergyIntoleranceCategory.MEDICATION);\n+\t\t\t\t\tbreak;\n+\t\t\t\tcase FOOD:\n+\t\t\t\t\tallergy.addCategory(AllergyIntolerance.AllergyIntoleranceCategory.FOOD);\n+\t\t\t\t\tbreak;\n+\t\t\t\tcase ENVIRONMENT:\n+\t\t\t\t\tallergy.addCategory(AllergyIntolerance.AllergyIntoleranceCategory.ENVIRONMENT);\n+\t\t\t\t\tbreak;\n+\t\t\t\tcase OTHER:\n+\t\t\t\tdefault:\n+\t\t\t\t\treturn allergy.addCategory(null);\n+\t\t\t}\n+\t\t}\n+\t\tallergy.setClinicalStatus(setClinicalStatus(omrsAllergy.getVoided()));\n+\t\treturn allergy;", "originalCommit": "70d6e94b30ed90b9aa83400f675a1c52d344176c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjY3NjY1Nw==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/81#discussion_r382676657", "bodyText": "Add a blank line before here", "author": "ibacher", "createdAt": "2020-02-21T16:24:31Z", "path": "api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/AllergyIntoleranceTranslatorImpl.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.module.fhir2.api.translators.impl;\n+\n+import lombok.AccessLevel;\n+import lombok.Setter;\n+import org.hl7.fhir.r4.model.AllergyIntolerance;\n+import org.hl7.fhir.r4.model.CodeableConcept;\n+import org.hl7.fhir.r4.model.Coding;\n+import org.openmrs.Allergen;\n+import org.openmrs.AllergenType;\n+import org.openmrs.Allergy;\n+import org.openmrs.module.fhir2.FhirConstants;\n+import org.openmrs.module.fhir2.api.translators.AllergyIntoleranceTranslator;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+@Setter(AccessLevel.PACKAGE)\n+public class AllergyIntoleranceTranslatorImpl implements AllergyIntoleranceTranslator {\n+\t\n+\t@Override\n+\tpublic AllergyIntolerance toFhirResource(Allergy omrsAllergy) {\n+\t\tif (omrsAllergy == null) {\n+\t\t\treturn null;\n+\t\t}\n+\t\tAllergyIntolerance allergy = new AllergyIntolerance();\n+\t\tallergy.setId(omrsAllergy.getUuid());\n+\t\tif (omrsAllergy.getAllergen() != null) {\n+\t\t\tswitch (omrsAllergy.getAllergen().getAllergenType()) {\n+\t\t\t\tcase DRUG:\n+\t\t\t\t\tallergy.addCategory(AllergyIntolerance.AllergyIntoleranceCategory.MEDICATION);\n+\t\t\t\t\tbreak;\n+\t\t\t\tcase FOOD:\n+\t\t\t\t\tallergy.addCategory(AllergyIntolerance.AllergyIntoleranceCategory.FOOD);\n+\t\t\t\t\tbreak;\n+\t\t\t\tcase ENVIRONMENT:\n+\t\t\t\t\tallergy.addCategory(AllergyIntolerance.AllergyIntoleranceCategory.ENVIRONMENT);\n+\t\t\t\t\tbreak;\n+\t\t\t\tcase OTHER:\n+\t\t\t\tdefault:\n+\t\t\t\t\treturn allergy.addCategory(null);\n+\t\t\t}\n+\t\t}\n+\t\tallergy.setClinicalStatus(setClinicalStatus(omrsAllergy.getVoided()));\n+\t\treturn allergy;\n+\t}\n+\t\n+\t@Override\n+\tpublic Allergy toOpenmrsType(Allergy allergy, AllergyIntolerance fhirAllergy) {\n+\t\tif (fhirAllergy == null) {\n+\t\t\treturn null;\n+\t\t}\n+\t\tallergy.setUuid(fhirAllergy.getId());\n+\t\tif (allergy.getAllergen() == null) {\n+\t\t\tAllergen allergen = new Allergen();\n+\t\t\tallergy.setAllergen(allergen);\n+\t\t}\n+\t\tif (fhirAllergy.getCategory().size() > 0) {\n+\t\t\tswitch (fhirAllergy.getCategory().get(0).getValue()) {\n+\t\t\t\tcase MEDICATION:\n+\t\t\t\t\tallergy.getAllergen().setAllergenType(AllergenType.DRUG);\n+\t\t\t\t\tbreak;\n+\t\t\t\tcase FOOD:\n+\t\t\t\t\tallergy.getAllergen().setAllergenType(AllergenType.FOOD);\n+\t\t\t\t\tbreak;\n+\t\t\t\tcase ENVIRONMENT:\n+\t\t\t\t\tallergy.getAllergen().setAllergenType(AllergenType.ENVIRONMENT);\n+\t\t\t\t\tbreak;\n+\t\t\t\tcase BIOLOGIC:\n+\t\t\t\tcase NULL:\n+\t\t\t\tdefault:\n+\t\t\t\t\tallergy.getAllergen().setAllergenType(null);\n+\t\t\t}\n+\t\t}\n+\t\tallergy.setVoided(getAllergyStatus(fhirAllergy.getClinicalStatus()));\n+\t\treturn allergy;\n+\t}\n+\t\n+\tprivate CodeableConcept setClinicalStatus(boolean voided) {\n+\t\tCodeableConcept status = new CodeableConcept();\n+\t\tif (voided == true) {\n+\t\t\tstatus.setText(\"Inactive\");\n+\t\t\tstatus.addCoding(\n+\t\t\t    new Coding(FhirConstants.ALLERGY_INTOLERANCE_CLINICAL_STATUS_VALUE_SET, \"inactive\", \"Inactive\"));\n+\t\t} else {\n+\t\t\tstatus.setText(\"Active\");\n+\t\t\tstatus.addCoding(new Coding(FhirConstants.ALLERGY_INTOLERANCE_CLINICAL_STATUS_VALUE_SET, \"active\", \"Active\"));\n+\t\t}\n+\t\treturn status;\n+\t}\n+\t\n+\tprivate boolean getAllergyStatus(CodeableConcept status) {\n+\t\tif (status.getCoding().size() == 0) {\n+\t\t\treturn false;\n+\t\t}\n+\t\tif (status.getCoding().get(0).getCode().equals(\"active\")) {", "originalCommit": "70d6e94b30ed90b9aa83400f675a1c52d344176c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjY3NjgyOQ==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/81#discussion_r382676829", "bodyText": "Add a blank line before here", "author": "ibacher", "createdAt": "2020-02-21T16:24:49Z", "path": "api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/AllergyIntoleranceTranslatorImpl.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.module.fhir2.api.translators.impl;\n+\n+import lombok.AccessLevel;\n+import lombok.Setter;\n+import org.hl7.fhir.r4.model.AllergyIntolerance;\n+import org.hl7.fhir.r4.model.CodeableConcept;\n+import org.hl7.fhir.r4.model.Coding;\n+import org.openmrs.Allergen;\n+import org.openmrs.AllergenType;\n+import org.openmrs.Allergy;\n+import org.openmrs.module.fhir2.FhirConstants;\n+import org.openmrs.module.fhir2.api.translators.AllergyIntoleranceTranslator;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+@Setter(AccessLevel.PACKAGE)\n+public class AllergyIntoleranceTranslatorImpl implements AllergyIntoleranceTranslator {\n+\t\n+\t@Override\n+\tpublic AllergyIntolerance toFhirResource(Allergy omrsAllergy) {\n+\t\tif (omrsAllergy == null) {\n+\t\t\treturn null;\n+\t\t}\n+\t\tAllergyIntolerance allergy = new AllergyIntolerance();\n+\t\tallergy.setId(omrsAllergy.getUuid());\n+\t\tif (omrsAllergy.getAllergen() != null) {\n+\t\t\tswitch (omrsAllergy.getAllergen().getAllergenType()) {\n+\t\t\t\tcase DRUG:\n+\t\t\t\t\tallergy.addCategory(AllergyIntolerance.AllergyIntoleranceCategory.MEDICATION);\n+\t\t\t\t\tbreak;\n+\t\t\t\tcase FOOD:\n+\t\t\t\t\tallergy.addCategory(AllergyIntolerance.AllergyIntoleranceCategory.FOOD);\n+\t\t\t\t\tbreak;\n+\t\t\t\tcase ENVIRONMENT:\n+\t\t\t\t\tallergy.addCategory(AllergyIntolerance.AllergyIntoleranceCategory.ENVIRONMENT);\n+\t\t\t\t\tbreak;\n+\t\t\t\tcase OTHER:\n+\t\t\t\tdefault:\n+\t\t\t\t\treturn allergy.addCategory(null);\n+\t\t\t}\n+\t\t}\n+\t\tallergy.setClinicalStatus(setClinicalStatus(omrsAllergy.getVoided()));\n+\t\treturn allergy;\n+\t}\n+\t\n+\t@Override\n+\tpublic Allergy toOpenmrsType(Allergy allergy, AllergyIntolerance fhirAllergy) {\n+\t\tif (fhirAllergy == null) {\n+\t\t\treturn null;\n+\t\t}\n+\t\tallergy.setUuid(fhirAllergy.getId());\n+\t\tif (allergy.getAllergen() == null) {\n+\t\t\tAllergen allergen = new Allergen();\n+\t\t\tallergy.setAllergen(allergen);\n+\t\t}\n+\t\tif (fhirAllergy.getCategory().size() > 0) {\n+\t\t\tswitch (fhirAllergy.getCategory().get(0).getValue()) {\n+\t\t\t\tcase MEDICATION:\n+\t\t\t\t\tallergy.getAllergen().setAllergenType(AllergenType.DRUG);\n+\t\t\t\t\tbreak;\n+\t\t\t\tcase FOOD:\n+\t\t\t\t\tallergy.getAllergen().setAllergenType(AllergenType.FOOD);\n+\t\t\t\t\tbreak;\n+\t\t\t\tcase ENVIRONMENT:\n+\t\t\t\t\tallergy.getAllergen().setAllergenType(AllergenType.ENVIRONMENT);\n+\t\t\t\t\tbreak;\n+\t\t\t\tcase BIOLOGIC:\n+\t\t\t\tcase NULL:\n+\t\t\t\tdefault:\n+\t\t\t\t\tallergy.getAllergen().setAllergenType(null);\n+\t\t\t}\n+\t\t}\n+\t\tallergy.setVoided(getAllergyStatus(fhirAllergy.getClinicalStatus()));\n+\t\treturn allergy;\n+\t}\n+\t\n+\tprivate CodeableConcept setClinicalStatus(boolean voided) {\n+\t\tCodeableConcept status = new CodeableConcept();\n+\t\tif (voided == true) {\n+\t\t\tstatus.setText(\"Inactive\");\n+\t\t\tstatus.addCoding(\n+\t\t\t    new Coding(FhirConstants.ALLERGY_INTOLERANCE_CLINICAL_STATUS_VALUE_SET, \"inactive\", \"Inactive\"));\n+\t\t} else {\n+\t\t\tstatus.setText(\"Active\");\n+\t\t\tstatus.addCoding(new Coding(FhirConstants.ALLERGY_INTOLERANCE_CLINICAL_STATUS_VALUE_SET, \"active\", \"Active\"));\n+\t\t}\n+\t\treturn status;\n+\t}\n+\t\n+\tprivate boolean getAllergyStatus(CodeableConcept status) {\n+\t\tif (status.getCoding().size() == 0) {\n+\t\t\treturn false;\n+\t\t}\n+\t\tif (status.getCoding().get(0).getCode().equals(\"active\")) {\n+\t\t\treturn false;\n+\t\t}\n+\t\tif (status.getCoding().get(0).getCode().equals(\"inactive\")) {", "originalCommit": "70d6e94b30ed90b9aa83400f675a1c52d344176c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjY3ODg1Mw==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/81#discussion_r382678853", "bodyText": "This could be coded like this:\nreturn status.getCoding().stream().filter(c -> FhirConstants.ALLERGY_INTOLERANCE_CLINICAL_STATUS_VALUE_SET.equals(c.getSystem())).anyMatch(c -> \"inactive\".equals(c.getCode()))", "author": "ibacher", "createdAt": "2020-02-21T16:28:20Z", "path": "api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/AllergyIntoleranceTranslatorImpl.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.module.fhir2.api.translators.impl;\n+\n+import lombok.AccessLevel;\n+import lombok.Setter;\n+import org.hl7.fhir.r4.model.AllergyIntolerance;\n+import org.hl7.fhir.r4.model.CodeableConcept;\n+import org.hl7.fhir.r4.model.Coding;\n+import org.openmrs.Allergen;\n+import org.openmrs.AllergenType;\n+import org.openmrs.Allergy;\n+import org.openmrs.module.fhir2.FhirConstants;\n+import org.openmrs.module.fhir2.api.translators.AllergyIntoleranceTranslator;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+@Setter(AccessLevel.PACKAGE)\n+public class AllergyIntoleranceTranslatorImpl implements AllergyIntoleranceTranslator {\n+\t\n+\t@Override\n+\tpublic AllergyIntolerance toFhirResource(Allergy omrsAllergy) {\n+\t\tif (omrsAllergy == null) {\n+\t\t\treturn null;\n+\t\t}\n+\t\tAllergyIntolerance allergy = new AllergyIntolerance();\n+\t\tallergy.setId(omrsAllergy.getUuid());\n+\t\tif (omrsAllergy.getAllergen() != null) {\n+\t\t\tswitch (omrsAllergy.getAllergen().getAllergenType()) {\n+\t\t\t\tcase DRUG:\n+\t\t\t\t\tallergy.addCategory(AllergyIntolerance.AllergyIntoleranceCategory.MEDICATION);\n+\t\t\t\t\tbreak;\n+\t\t\t\tcase FOOD:\n+\t\t\t\t\tallergy.addCategory(AllergyIntolerance.AllergyIntoleranceCategory.FOOD);\n+\t\t\t\t\tbreak;\n+\t\t\t\tcase ENVIRONMENT:\n+\t\t\t\t\tallergy.addCategory(AllergyIntolerance.AllergyIntoleranceCategory.ENVIRONMENT);\n+\t\t\t\t\tbreak;\n+\t\t\t\tcase OTHER:\n+\t\t\t\tdefault:\n+\t\t\t\t\treturn allergy.addCategory(null);\n+\t\t\t}\n+\t\t}\n+\t\tallergy.setClinicalStatus(setClinicalStatus(omrsAllergy.getVoided()));\n+\t\treturn allergy;\n+\t}\n+\t\n+\t@Override\n+\tpublic Allergy toOpenmrsType(Allergy allergy, AllergyIntolerance fhirAllergy) {\n+\t\tif (fhirAllergy == null) {\n+\t\t\treturn null;\n+\t\t}\n+\t\tallergy.setUuid(fhirAllergy.getId());\n+\t\tif (allergy.getAllergen() == null) {\n+\t\t\tAllergen allergen = new Allergen();\n+\t\t\tallergy.setAllergen(allergen);\n+\t\t}\n+\t\tif (fhirAllergy.getCategory().size() > 0) {\n+\t\t\tswitch (fhirAllergy.getCategory().get(0).getValue()) {\n+\t\t\t\tcase MEDICATION:\n+\t\t\t\t\tallergy.getAllergen().setAllergenType(AllergenType.DRUG);\n+\t\t\t\t\tbreak;\n+\t\t\t\tcase FOOD:\n+\t\t\t\t\tallergy.getAllergen().setAllergenType(AllergenType.FOOD);\n+\t\t\t\t\tbreak;\n+\t\t\t\tcase ENVIRONMENT:\n+\t\t\t\t\tallergy.getAllergen().setAllergenType(AllergenType.ENVIRONMENT);\n+\t\t\t\t\tbreak;\n+\t\t\t\tcase BIOLOGIC:\n+\t\t\t\tcase NULL:\n+\t\t\t\tdefault:\n+\t\t\t\t\tallergy.getAllergen().setAllergenType(null);\n+\t\t\t}\n+\t\t}\n+\t\tallergy.setVoided(getAllergyStatus(fhirAllergy.getClinicalStatus()));\n+\t\treturn allergy;\n+\t}\n+\t\n+\tprivate CodeableConcept setClinicalStatus(boolean voided) {\n+\t\tCodeableConcept status = new CodeableConcept();\n+\t\tif (voided == true) {\n+\t\t\tstatus.setText(\"Inactive\");\n+\t\t\tstatus.addCoding(\n+\t\t\t    new Coding(FhirConstants.ALLERGY_INTOLERANCE_CLINICAL_STATUS_VALUE_SET, \"inactive\", \"Inactive\"));\n+\t\t} else {\n+\t\t\tstatus.setText(\"Active\");\n+\t\t\tstatus.addCoding(new Coding(FhirConstants.ALLERGY_INTOLERANCE_CLINICAL_STATUS_VALUE_SET, \"active\", \"Active\"));\n+\t\t}\n+\t\treturn status;\n+\t}\n+\t\n+\tprivate boolean getAllergyStatus(CodeableConcept status) {", "originalCommit": "70d6e94b30ed90b9aa83400f675a1c52d344176c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjY3OTQ1Mg==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/81#discussion_r382679452", "bodyText": "I would rename this something more descriptive like isAllergyInactive() or isStatusInactive()", "author": "ibacher", "createdAt": "2020-02-21T16:29:26Z", "path": "api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/AllergyIntoleranceTranslatorImpl.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.module.fhir2.api.translators.impl;\n+\n+import lombok.AccessLevel;\n+import lombok.Setter;\n+import org.hl7.fhir.r4.model.AllergyIntolerance;\n+import org.hl7.fhir.r4.model.CodeableConcept;\n+import org.hl7.fhir.r4.model.Coding;\n+import org.openmrs.Allergen;\n+import org.openmrs.AllergenType;\n+import org.openmrs.Allergy;\n+import org.openmrs.module.fhir2.FhirConstants;\n+import org.openmrs.module.fhir2.api.translators.AllergyIntoleranceTranslator;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+@Setter(AccessLevel.PACKAGE)\n+public class AllergyIntoleranceTranslatorImpl implements AllergyIntoleranceTranslator {\n+\t\n+\t@Override\n+\tpublic AllergyIntolerance toFhirResource(Allergy omrsAllergy) {\n+\t\tif (omrsAllergy == null) {\n+\t\t\treturn null;\n+\t\t}\n+\t\tAllergyIntolerance allergy = new AllergyIntolerance();\n+\t\tallergy.setId(omrsAllergy.getUuid());\n+\t\tif (omrsAllergy.getAllergen() != null) {\n+\t\t\tswitch (omrsAllergy.getAllergen().getAllergenType()) {\n+\t\t\t\tcase DRUG:\n+\t\t\t\t\tallergy.addCategory(AllergyIntolerance.AllergyIntoleranceCategory.MEDICATION);\n+\t\t\t\t\tbreak;\n+\t\t\t\tcase FOOD:\n+\t\t\t\t\tallergy.addCategory(AllergyIntolerance.AllergyIntoleranceCategory.FOOD);\n+\t\t\t\t\tbreak;\n+\t\t\t\tcase ENVIRONMENT:\n+\t\t\t\t\tallergy.addCategory(AllergyIntolerance.AllergyIntoleranceCategory.ENVIRONMENT);\n+\t\t\t\t\tbreak;\n+\t\t\t\tcase OTHER:\n+\t\t\t\tdefault:\n+\t\t\t\t\treturn allergy.addCategory(null);\n+\t\t\t}\n+\t\t}\n+\t\tallergy.setClinicalStatus(setClinicalStatus(omrsAllergy.getVoided()));\n+\t\treturn allergy;\n+\t}\n+\t\n+\t@Override\n+\tpublic Allergy toOpenmrsType(Allergy allergy, AllergyIntolerance fhirAllergy) {\n+\t\tif (fhirAllergy == null) {\n+\t\t\treturn null;\n+\t\t}\n+\t\tallergy.setUuid(fhirAllergy.getId());\n+\t\tif (allergy.getAllergen() == null) {\n+\t\t\tAllergen allergen = new Allergen();\n+\t\t\tallergy.setAllergen(allergen);\n+\t\t}\n+\t\tif (fhirAllergy.getCategory().size() > 0) {\n+\t\t\tswitch (fhirAllergy.getCategory().get(0).getValue()) {\n+\t\t\t\tcase MEDICATION:\n+\t\t\t\t\tallergy.getAllergen().setAllergenType(AllergenType.DRUG);\n+\t\t\t\t\tbreak;\n+\t\t\t\tcase FOOD:\n+\t\t\t\t\tallergy.getAllergen().setAllergenType(AllergenType.FOOD);\n+\t\t\t\t\tbreak;\n+\t\t\t\tcase ENVIRONMENT:\n+\t\t\t\t\tallergy.getAllergen().setAllergenType(AllergenType.ENVIRONMENT);\n+\t\t\t\t\tbreak;\n+\t\t\t\tcase BIOLOGIC:\n+\t\t\t\tcase NULL:\n+\t\t\t\tdefault:\n+\t\t\t\t\tallergy.getAllergen().setAllergenType(null);\n+\t\t\t}\n+\t\t}\n+\t\tallergy.setVoided(getAllergyStatus(fhirAllergy.getClinicalStatus()));\n+\t\treturn allergy;\n+\t}\n+\t\n+\tprivate CodeableConcept setClinicalStatus(boolean voided) {\n+\t\tCodeableConcept status = new CodeableConcept();\n+\t\tif (voided == true) {\n+\t\t\tstatus.setText(\"Inactive\");\n+\t\t\tstatus.addCoding(\n+\t\t\t    new Coding(FhirConstants.ALLERGY_INTOLERANCE_CLINICAL_STATUS_VALUE_SET, \"inactive\", \"Inactive\"));\n+\t\t} else {\n+\t\t\tstatus.setText(\"Active\");\n+\t\t\tstatus.addCoding(new Coding(FhirConstants.ALLERGY_INTOLERANCE_CLINICAL_STATUS_VALUE_SET, \"active\", \"Active\"));\n+\t\t}\n+\t\treturn status;\n+\t}\n+\t\n+\tprivate boolean getAllergyStatus(CodeableConcept status) {", "originalCommit": "70d6e94b30ed90b9aa83400f675a1c52d344176c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "101c7ed688ffdd343d87ee196dff6b331ba3d6fd", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/101c7ed688ffdd343d87ee196dff6b331ba3d6fd", "message": "FM2-82 : Allergy resource initial implementation", "committedDate": "2020-02-21T17:00:09Z", "type": "commit"}, {"oid": "101c7ed688ffdd343d87ee196dff6b331ba3d6fd", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/101c7ed688ffdd343d87ee196dff6b331ba3d6fd", "message": "FM2-82 : Allergy resource initial implementation", "committedDate": "2020-02-21T17:00:09Z", "type": "forcePushed"}]}