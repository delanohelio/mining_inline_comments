{"pr_number": 289, "pr_title": "FM2-283:  Add Integration Tests for AllergyIntolerance", "pr_createdAt": "2020-08-15T20:16:59Z", "pr_url": "https://github.com/openmrs/openmrs-module-fhir2/pull/289", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjAwNzM2NQ==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/289#discussion_r472007365", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tassertThat(entries, everyItem(hasResource(validResource())));\n          \n          \n            \n            \t\t\n          \n          \n            \n            \t}\n          \n          \n            \n            \t\tassertThat(entries, everyItem(hasResource(validResource())));\n          \n          \n            \n            \t}", "author": "corneliouzbett", "createdAt": "2020-08-18T08:29:08Z", "path": "integration-tests/src/test/java/org/openmrs/module/fhir2/providers/r3/AllergyIntoleranceFhirResourceProviderIntegrationTest.java", "diffHunk": "@@ -0,0 +1,511 @@\n+/*\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.module.fhir2.providers.r3;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.containsInRelativeOrder;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.everyItem;\n+import static org.hamcrest.Matchers.hasProperty;\n+import static org.hamcrest.Matchers.instanceOf;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.notNullValue;\n+import static org.hamcrest.Matchers.startsWith;\n+\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.util.List;\n+import java.util.Objects;\n+\n+import lombok.AccessLevel;\n+import lombok.Getter;\n+import org.apache.commons.io.IOUtils;\n+import org.hl7.fhir.dstu3.model.AllergyIntolerance;\n+import org.hl7.fhir.dstu3.model.Bundle;\n+import org.hl7.fhir.dstu3.model.Enumeration;\n+import org.hl7.fhir.dstu3.model.OperationOutcome;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.mock.web.MockHttpServletResponse;\n+\n+public class AllergyIntoleranceFhirResourceProviderIntegrationTest extends BaseFhirR3IntegrationTest<AllergyIntoleranceFhirResourceProvider, AllergyIntolerance> {\n+\t\n+\tprivate static final String ALLERGY_INTOLERANCE_INITIAL_DATA_XML = \"org/openmrs/module/fhir2/api/dao/impl/FhirAllergyIntoleranceDaoImplTest_initial_data.xml\";\n+\t\n+\tprivate static final String JSON_CREATE_ALLERGY_DOCUMENT = \"org/openmrs/module/fhir2/providers/AllergyIntoleranceWebTest_create.json\";\n+\t\n+\tprivate static final String XML_CREATE_ALLERGY_DOCUMENT = \"org/openmrs/module/fhir2/providers/AllergyIntoleranceWebTest_create.xml\";\n+\t\n+\tprivate static final String ALLERGY_UUID = \"1085AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\";\n+\t\n+\tprivate static final String UNKNOWN_ALLERGY_UUID = \"1080AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\";\n+\t\n+\t@Getter(AccessLevel.PUBLIC)\n+\t@Autowired\n+\tprivate AllergyIntoleranceFhirResourceProvider resourceProvider;\n+\t\n+\t@Before\n+\t@Override\n+\tpublic void setup() throws Exception {\n+\t\tsuper.setup();\n+\t\texecuteDataSet(ALLERGY_INTOLERANCE_INITIAL_DATA_XML);\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReturnExistingAllergyAsJson() throws Exception {\n+\t\tMockHttpServletResponse response = get(\"/AllergyIntolerance/\" + ALLERGY_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tAllergyIntolerance allergyIntolerance = readResponse(response);\n+\t\t\n+\t\tassertThat(allergyIntolerance, notNullValue());\n+\t\tassertThat(allergyIntolerance.getIdElement().getIdPart(), equalTo(ALLERGY_UUID));\n+\t\tassertThat(allergyIntolerance, validResource());\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReturnNotFoundWhenAllergyNotFoundAsJson() throws Exception {\n+\t\tMockHttpServletResponse response = get(\"/AllergyIntolerance/\" + UNKNOWN_ALLERGY_UUID).accept(FhirMediaTypes.JSON)\n+\t\t        .go();\n+\t\t\n+\t\tassertThat(response, isNotFound());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tOperationOutcome operationOutcome = readOperationOutcome(response);\n+\t\t\n+\t\tassertThat(operationOutcome, notNullValue());\n+\t\tassertThat(operationOutcome.hasIssue(), is(true));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReturnExistingAllergyAsXML() throws Exception {\n+\t\tMockHttpServletResponse response = get(\"/AllergyIntolerance/\" + ALLERGY_UUID).accept(FhirMediaTypes.XML).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.XML.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tAllergyIntolerance allergyIntolerance = readResponse(response);\n+\t\t\n+\t\tassertThat(allergyIntolerance, notNullValue());\n+\t\tassertThat(allergyIntolerance.getIdElement().getIdPart(), equalTo(ALLERGY_UUID));\n+\t\tassertThat(allergyIntolerance, validResource());\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReturnNotFoundWhenAllergyNotFoundAsXML() throws Exception {\n+\t\tMockHttpServletResponse response = get(\"/AllergyIntolerance/\" + UNKNOWN_ALLERGY_UUID).accept(FhirMediaTypes.XML)\n+\t\t        .go();\n+\t\t\n+\t\tassertThat(response, isNotFound());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.XML.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tOperationOutcome operationOutcome = readOperationOutcome(response);\n+\t\t\n+\t\tassertThat(operationOutcome, notNullValue());\n+\t\tassertThat(operationOutcome.hasIssue(), is(true));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldCreateNewAllergyAsJson() throws Exception {\n+\t\t// read JSON record\n+\t\tString jsonAllergy;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_CREATE_ALLERGY_DOCUMENT)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonAllergy = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\t\n+\t\t// create allergy\n+\t\tMockHttpServletResponse response = post(\"/AllergyIntolerance\").accept(FhirMediaTypes.JSON).jsonContent(jsonAllergy)\n+\t\t        .go();\n+\t\t\n+\t\t// verify created correctly\n+\t\tassertThat(response, isCreated());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tAllergyIntolerance allergy = readResponse(response);\n+\t\t\n+\t\tassertThat(allergy, notNullValue());\n+\t\tassertThat(allergy.getPatient().getReferenceElement().getIdPart(), equalTo(\"da7f524f-27ce-4bb2-86d6-6d1d05312bd5\"));\n+\t\tassertThat(allergy.getRecorder().getReferenceElement().getIdPart(), equalTo(\"c98a1558-e131-11de-babe-001e378eb67e\"));\n+\t\tassertThat(allergy.getCategory().get(0).getValue().toCode(), equalTo(\"medication\"));\n+\t\tassertThat(allergy.getReactionFirstRep().getSeverity().toCode(), equalTo(\"severe\"));\n+\t\tassertThat(allergy.getReactionFirstRep().getManifestationFirstRep().getCodingFirstRep().getCode(),\n+\t\t    equalTo(\"5088AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\"));\n+\t\tassertThat(allergy.getReactionFirstRep().getManifestationFirstRep().getText(), equalTo(\"manifestation text\"));\n+\t\tassertThat(allergy.getCode().getCodingFirstRep().getCode(), equalTo(\"5085AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\"));\n+\t\tassertThat(allergy.getClinicalStatus().toCode(), equalTo(\"active\"));\n+\t\tassertThat(allergy.getVerificationStatus().toCode(), equalTo(\"confirmed\"));\n+\t\tassertThat(allergy.getType().toCode(), equalTo(\"allergy\"));\n+\t\tassertThat(allergy, validResource());\n+\t\t\n+\t\t// try to get new allergy\n+\t\tresponse = get(\"/AllergyIntolerance/\" + allergy.getIdElement().getIdPart()).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\t\n+\t\tAllergyIntolerance newAllergy = readResponse(response);\n+\t\t\n+\t\tassertThat(newAllergy.getId(), equalTo(allergy.getId()));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldCreateNewAllergyAsXML() throws Exception {\n+\t\t// read XML record\n+\t\tString jsonAllergy;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(XML_CREATE_ALLERGY_DOCUMENT)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonAllergy = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\t\n+\t\t// create allergy\n+\t\tMockHttpServletResponse response = post(\"/AllergyIntolerance\").accept(FhirMediaTypes.XML).xmlContext(jsonAllergy)\n+\t\t        .go();\n+\t\t\n+\t\t// verify created correctly\n+\t\tassertThat(response, isCreated());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.XML.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tAllergyIntolerance allergy = readResponse(response);\n+\t\t\n+\t\tassertThat(allergy, notNullValue());\n+\t\tassertThat(allergy.getPatient().getReferenceElement().getIdPart(), equalTo(\"da7f524f-27ce-4bb2-86d6-6d1d05312bd5\"));\n+\t\tassertThat(allergy.getRecorder().getReferenceElement().getIdPart(), equalTo(\"c98a1558-e131-11de-babe-001e378eb67e\"));\n+\t\tassertThat(allergy.getCategory().get(0).getValue().toCode(), equalTo(\"medication\"));\n+\t\tassertThat(allergy.getReactionFirstRep().getSeverity().toCode(), equalTo(\"severe\"));\n+\t\tassertThat(allergy.getReactionFirstRep().getManifestationFirstRep().getCodingFirstRep().getCode(),\n+\t\t    equalTo(\"5088AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\"));\n+\t\tassertThat(allergy.getReactionFirstRep().getManifestationFirstRep().getText(), equalTo(\"manifestation text\"));\n+\t\tassertThat(allergy.getCode().getCodingFirstRep().getCode(), equalTo(\"5085AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\"));\n+\t\tassertThat(allergy.getClinicalStatus().toCode(), equalTo(\"active\"));\n+\t\tassertThat(allergy.getVerificationStatus().toCode(), equalTo(\"confirmed\"));\n+\t\tassertThat(allergy.getType().toCode(), equalTo(\"allergy\"));\n+\t\tassertThat(allergy, validResource());\n+\t\t\n+\t\t// try to get new allergy\n+\t\tresponse = get(\"/AllergyIntolerance/\" + allergy.getIdElement().getIdPart()).accept(FhirMediaTypes.XML).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\t\n+\t\tAllergyIntolerance newAllergy = readResponse(response);\n+\t\t\n+\t\tassertThat(newAllergy.getId(), equalTo(allergy.getId()));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldUpdateExistingAllergyAsJson() throws Exception {\n+\t\t// get the existing record\n+\t\tMockHttpServletResponse response = get(\"/AllergyIntolerance/\" + ALLERGY_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\tAllergyIntolerance allergy = readResponse(response);\n+\t\t\n+\t\t// update the existing record\n+\t\tEnumeration<AllergyIntolerance.AllergyIntoleranceCategory> category = new Enumeration(\n+\t\t        new AllergyIntolerance.AllergyIntoleranceCategoryEnumFactory());\n+\t\tcategory.setValue(AllergyIntolerance.AllergyIntoleranceCategory.ENVIRONMENT);\n+\t\tallergy.getCategory().set(0, category);\n+\t\t\n+\t\t// send the update to the server\n+\t\tresponse = put(\"/AllergyIntolerance/\" + ALLERGY_UUID).jsonContent(toJson(allergy)).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\t// read the updated record\n+\t\tAllergyIntolerance updatedAllergy = readResponse(response);\n+\t\t\n+\t\tassertThat(updatedAllergy, notNullValue());\n+\t\tassertThat(updatedAllergy.getIdElement().getIdPart(), equalTo(ALLERGY_UUID));\n+\t\tassertThat(updatedAllergy.getCategory().get(0).getValue().toCode(), equalTo(\"environment\"));\n+\t\tassertThat(updatedAllergy, validResource());\n+\t\t\n+\t\t// double-check the record returned via get\n+\t\tresponse = get(\"/AllergyIntolerance/\" + ALLERGY_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\tAllergyIntolerance reReadAllergy = readResponse(response);\n+\t\t\n+\t\tassertThat(reReadAllergy.getCategory().get(0).getValue().toCode(), equalTo(\"environment\"));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReturnBadRequestWhenDocumentIdDoesNotMatchAllergyIdAsJson() throws Exception {\n+\t\t// get the existing record\n+\t\tMockHttpServletResponse response = get(\"/AllergyIntolerance/\" + ALLERGY_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\tAllergyIntolerance allergy = readResponse(response);\n+\t\t\n+\t\t// update the existing record\n+\t\tallergy.setId(UNKNOWN_ALLERGY_UUID);\n+\t\t\n+\t\t// send the update to the server\n+\t\tresponse = put(\"/AllergyIntolerance/\" + ALLERGY_UUID).jsonContent(toJson(allergy)).go();\n+\t\t\n+\t\tassertThat(response, isBadRequest());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tOperationOutcome operationOutcome = readOperationOutcome(response);\n+\t\t\n+\t\tassertThat(operationOutcome, notNullValue());\n+\t\tassertThat(operationOutcome.hasIssue(), is(true));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReturnNotFoundWhenUpdatingNonExistentAllergyAsJson() throws Exception {\n+\t\t// get the existing record\n+\t\tMockHttpServletResponse response = get(\"/AllergyIntolerance/\" + ALLERGY_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\tAllergyIntolerance allergy = readResponse(response);\n+\t\t\n+\t\t// update the existing record\n+\t\tallergy.setId(UNKNOWN_ALLERGY_UUID);\n+\t\t\n+\t\t// send the update to the server\n+\t\tresponse = put(\"/AllergyIntolerance/\" + UNKNOWN_ALLERGY_UUID).jsonContent(toJson(allergy)).go();\n+\t\t\n+\t\tassertThat(response, isNotFound());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tOperationOutcome operationOutcome = readOperationOutcome(response);\n+\t\t\n+\t\tassertThat(operationOutcome, notNullValue());\n+\t\tassertThat(operationOutcome.hasIssue(), is(true));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldUpdateExistingAllergyAsXML() throws Exception {\n+\t\t// get the existing record\n+\t\tMockHttpServletResponse response = get(\"/AllergyIntolerance/\" + ALLERGY_UUID).accept(FhirMediaTypes.XML).go();\n+\t\tAllergyIntolerance allergy = readResponse(response);\n+\t\t\n+\t\t// update the existing record\n+\t\tEnumeration<AllergyIntolerance.AllergyIntoleranceCategory> category = new Enumeration(\n+\t\t        new AllergyIntolerance.AllergyIntoleranceCategoryEnumFactory());\n+\t\tcategory.setValue(AllergyIntolerance.AllergyIntoleranceCategory.ENVIRONMENT);\n+\t\tallergy.getCategory().set(0, category);\n+\t\t\n+\t\t// send the update to the server\n+\t\tresponse = put(\"/AllergyIntolerance/\" + ALLERGY_UUID).xmlContext(toXML(allergy)).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.XML.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\t// read the updated record\n+\t\tAllergyIntolerance updatedAllergy = readResponse(response);\n+\t\t\n+\t\tassertThat(updatedAllergy, notNullValue());\n+\t\tassertThat(updatedAllergy.getIdElement().getIdPart(), equalTo(ALLERGY_UUID));\n+\t\tassertThat(updatedAllergy.getCategory().get(0).getValue().toCode(), equalTo(\"environment\"));\n+\t\tassertThat(updatedAllergy, validResource());\n+\t\t\n+\t\t// double-check the record returned via get\n+\t\tresponse = get(\"/AllergyIntolerance/\" + ALLERGY_UUID).accept(FhirMediaTypes.XML).go();\n+\t\tAllergyIntolerance reReadAllergy = readResponse(response);\n+\t\t\n+\t\tassertThat(reReadAllergy.getCategory().get(0).getValue().toCode(), equalTo(\"environment\"));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReturnBadRequestWhenDocumentIdDoesNotMatchAllergyIdAsXML() throws Exception {\n+\t\t// get the existing record\n+\t\tMockHttpServletResponse response = get(\"/AllergyIntolerance/\" + ALLERGY_UUID).accept(FhirMediaTypes.XML).go();\n+\t\tAllergyIntolerance allergy = readResponse(response);\n+\t\t\n+\t\t// update the existing record\n+\t\tallergy.setId(UNKNOWN_ALLERGY_UUID);\n+\t\t\n+\t\t// send the update to the server\n+\t\tresponse = put(\"/AllergyIntolerance/\" + ALLERGY_UUID).xmlContext(toXML(allergy)).go();\n+\t\t\n+\t\tassertThat(response, isBadRequest());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.XML.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tOperationOutcome operationOutcome = readOperationOutcome(response);\n+\t\t\n+\t\tassertThat(operationOutcome, notNullValue());\n+\t\tassertThat(operationOutcome.hasIssue(), is(true));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReturnNotFoundWhenUpdatingNonExistentAllergyAsXML() throws Exception {\n+\t\t// get the existing record\n+\t\tMockHttpServletResponse response = get(\"/AllergyIntolerance/\" + ALLERGY_UUID).accept(FhirMediaTypes.XML).go();\n+\t\tAllergyIntolerance allergy = readResponse(response);\n+\t\t\n+\t\t// update the existing record\n+\t\tallergy.setId(UNKNOWN_ALLERGY_UUID);\n+\t\t\n+\t\t// send the update to the server\n+\t\tresponse = put(\"/AllergyIntolerance/\" + UNKNOWN_ALLERGY_UUID).xmlContext(toXML(allergy)).go();\n+\t\t\n+\t\tassertThat(response, isNotFound());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.XML.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tOperationOutcome operationOutcome = readOperationOutcome(response);\n+\t\t\n+\t\tassertThat(operationOutcome, notNullValue());\n+\t\tassertThat(operationOutcome.hasIssue(), is(true));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldDeleteExistingAllergyAsJson() throws Exception {\n+\t\tMockHttpServletResponse response = delete(\"/AllergyIntolerance/\" + ALLERGY_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\t\n+\t\tresponse = get(\"/AllergyIntolerance/\" + ALLERGY_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, statusEquals(HttpStatus.GONE));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReturnNotFoundWhenDeletingNonExistentAllergyAsJson() throws Exception {\n+\t\tMockHttpServletResponse response = delete(\"/AllergyIntolerance/\" + UNKNOWN_ALLERGY_UUID).accept(FhirMediaTypes.JSON)\n+\t\t        .go();\n+\t\t\n+\t\tassertThat(response, isNotFound());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tOperationOutcome operationOutcome = readOperationOutcome(response);\n+\t\t\n+\t\tassertThat(operationOutcome, notNullValue());\n+\t\tassertThat(operationOutcome.hasIssue(), is(true));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldDeleteExistingAllergyAsXML() throws Exception {\n+\t\tMockHttpServletResponse response = delete(\"/AllergyIntolerance/\" + ALLERGY_UUID).accept(FhirMediaTypes.XML).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\t\n+\t\tresponse = get(\"/AllergyIntolerance/\" + ALLERGY_UUID).accept(FhirMediaTypes.XML).go();\n+\t\t\n+\t\tassertThat(response, statusEquals(HttpStatus.GONE));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReturnNotFoundWhenDeletingNonExistentAllergyAsXML() throws Exception {\n+\t\tMockHttpServletResponse response = delete(\"/AllergyIntolerance/\" + UNKNOWN_ALLERGY_UUID).accept(FhirMediaTypes.XML)\n+\t\t        .go();\n+\t\t\n+\t\tassertThat(response, isNotFound());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.XML.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tOperationOutcome operationOutcome = readOperationOutcome(response);\n+\t\t\n+\t\tassertThat(operationOutcome, notNullValue());\n+\t\tassertThat(operationOutcome.hasIssue(), is(true));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldSearchForExistingAllergyAsJson() throws Exception {\n+\t\tMockHttpServletResponse response = get(\"/AllergyIntolerance\").accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tBundle results = readBundleResponse(response);\n+\t\t\n+\t\tassertThat(results, notNullValue());\n+\t\tassertThat(results.getType(), equalTo(Bundle.BundleType.SEARCHSET));\n+\t\tassertThat(results.hasEntry(), is(true));\n+\t\t\n+\t\tList<Bundle.BundleEntryComponent> entries = results.getEntry();\n+\t\t\n+\t\tassertThat(entries,\n+\t\t    everyItem(hasProperty(\"fullUrl\", startsWith(\"http://localhost/ws/fhir2/R3/AllergyIntolerance/\"))));\n+\t\tassertThat(entries, everyItem(hasResource(instanceOf(AllergyIntolerance.class))));\n+\t\tassertThat(entries, everyItem(hasResource(validResource())));\n+\t\t\n+\t\tresponse = get(\"/AllergyIntolerance?patient.identifier=M4001-1&_sort=severity\").accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tresults = readBundleResponse(response);\n+\t\t\n+\t\tassertThat(results, notNullValue());\n+\t\tassertThat(results.getType(), equalTo(Bundle.BundleType.SEARCHSET));\n+\t\tassertThat(results.hasEntry(), is(true));\n+\t\t\n+\t\tentries = results.getEntry();\n+\t\t\n+\t\tassertThat(entries, everyItem(\n+\t\t    hasResource(hasProperty(\"patient\", hasProperty(\"identifier\", hasProperty(\"value\", equalTo(\"M4001-1\")))))));\n+\t\tassertThat(entries,\n+\t\t    containsInRelativeOrder(hasResource(hasProperty(\"criticality\", hasProperty(\"display\", equalTo(\"Low Risk\")))), // mild\n+\t\t        hasResource(hasProperty(\"criticality\", hasProperty(\"display\", equalTo(\"Unable to Assess Risk\")))), // moderate\n+\t\t        hasResource(hasProperty(\"criticality\", hasProperty(\"display\", equalTo(\"High Risk\")))), // severe\n+\t\t        hasResource(hasProperty(\"criticality\", equalTo(null))))); // null\n+\t\tassertThat(entries, everyItem(hasResource(validResource())));\n+\t\t\n+\t}", "originalCommit": "df2a6ce2f31a8418e31fc7891d146ebd1c5eb1df", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjAwNzc1MQ==", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/289#discussion_r472007751", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t        hasResource(hasProperty(\"criticality\", equalTo(null))))); // null\n          \n          \n            \n            \t\tassertThat(entries, everyItem(hasResource(validResource())));\n          \n          \n            \n            \t\t\n          \n          \n            \n            \t}\n          \n          \n            \n            \t\n          \n          \n            \n            }\n          \n          \n            \n            \t\t        hasResource(hasProperty(\"criticality\", equalTo(null))))); // null\n          \n          \n            \n            \t\tassertThat(entries, everyItem(hasResource(validResource())));\n          \n          \n            \n            \t}\n          \n          \n            \n            }", "author": "corneliouzbett", "createdAt": "2020-08-18T08:29:45Z", "path": "integration-tests/src/test/java/org/openmrs/module/fhir2/providers/r3/AllergyIntoleranceFhirResourceProviderIntegrationTest.java", "diffHunk": "@@ -0,0 +1,511 @@\n+/*\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.module.fhir2.providers.r3;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.containsInRelativeOrder;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.everyItem;\n+import static org.hamcrest.Matchers.hasProperty;\n+import static org.hamcrest.Matchers.instanceOf;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.notNullValue;\n+import static org.hamcrest.Matchers.startsWith;\n+\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.util.List;\n+import java.util.Objects;\n+\n+import lombok.AccessLevel;\n+import lombok.Getter;\n+import org.apache.commons.io.IOUtils;\n+import org.hl7.fhir.dstu3.model.AllergyIntolerance;\n+import org.hl7.fhir.dstu3.model.Bundle;\n+import org.hl7.fhir.dstu3.model.Enumeration;\n+import org.hl7.fhir.dstu3.model.OperationOutcome;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.mock.web.MockHttpServletResponse;\n+\n+public class AllergyIntoleranceFhirResourceProviderIntegrationTest extends BaseFhirR3IntegrationTest<AllergyIntoleranceFhirResourceProvider, AllergyIntolerance> {\n+\t\n+\tprivate static final String ALLERGY_INTOLERANCE_INITIAL_DATA_XML = \"org/openmrs/module/fhir2/api/dao/impl/FhirAllergyIntoleranceDaoImplTest_initial_data.xml\";\n+\t\n+\tprivate static final String JSON_CREATE_ALLERGY_DOCUMENT = \"org/openmrs/module/fhir2/providers/AllergyIntoleranceWebTest_create.json\";\n+\t\n+\tprivate static final String XML_CREATE_ALLERGY_DOCUMENT = \"org/openmrs/module/fhir2/providers/AllergyIntoleranceWebTest_create.xml\";\n+\t\n+\tprivate static final String ALLERGY_UUID = \"1085AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\";\n+\t\n+\tprivate static final String UNKNOWN_ALLERGY_UUID = \"1080AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\";\n+\t\n+\t@Getter(AccessLevel.PUBLIC)\n+\t@Autowired\n+\tprivate AllergyIntoleranceFhirResourceProvider resourceProvider;\n+\t\n+\t@Before\n+\t@Override\n+\tpublic void setup() throws Exception {\n+\t\tsuper.setup();\n+\t\texecuteDataSet(ALLERGY_INTOLERANCE_INITIAL_DATA_XML);\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReturnExistingAllergyAsJson() throws Exception {\n+\t\tMockHttpServletResponse response = get(\"/AllergyIntolerance/\" + ALLERGY_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tAllergyIntolerance allergyIntolerance = readResponse(response);\n+\t\t\n+\t\tassertThat(allergyIntolerance, notNullValue());\n+\t\tassertThat(allergyIntolerance.getIdElement().getIdPart(), equalTo(ALLERGY_UUID));\n+\t\tassertThat(allergyIntolerance, validResource());\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReturnNotFoundWhenAllergyNotFoundAsJson() throws Exception {\n+\t\tMockHttpServletResponse response = get(\"/AllergyIntolerance/\" + UNKNOWN_ALLERGY_UUID).accept(FhirMediaTypes.JSON)\n+\t\t        .go();\n+\t\t\n+\t\tassertThat(response, isNotFound());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tOperationOutcome operationOutcome = readOperationOutcome(response);\n+\t\t\n+\t\tassertThat(operationOutcome, notNullValue());\n+\t\tassertThat(operationOutcome.hasIssue(), is(true));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReturnExistingAllergyAsXML() throws Exception {\n+\t\tMockHttpServletResponse response = get(\"/AllergyIntolerance/\" + ALLERGY_UUID).accept(FhirMediaTypes.XML).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.XML.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tAllergyIntolerance allergyIntolerance = readResponse(response);\n+\t\t\n+\t\tassertThat(allergyIntolerance, notNullValue());\n+\t\tassertThat(allergyIntolerance.getIdElement().getIdPart(), equalTo(ALLERGY_UUID));\n+\t\tassertThat(allergyIntolerance, validResource());\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReturnNotFoundWhenAllergyNotFoundAsXML() throws Exception {\n+\t\tMockHttpServletResponse response = get(\"/AllergyIntolerance/\" + UNKNOWN_ALLERGY_UUID).accept(FhirMediaTypes.XML)\n+\t\t        .go();\n+\t\t\n+\t\tassertThat(response, isNotFound());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.XML.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tOperationOutcome operationOutcome = readOperationOutcome(response);\n+\t\t\n+\t\tassertThat(operationOutcome, notNullValue());\n+\t\tassertThat(operationOutcome.hasIssue(), is(true));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldCreateNewAllergyAsJson() throws Exception {\n+\t\t// read JSON record\n+\t\tString jsonAllergy;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_CREATE_ALLERGY_DOCUMENT)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonAllergy = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\t\n+\t\t// create allergy\n+\t\tMockHttpServletResponse response = post(\"/AllergyIntolerance\").accept(FhirMediaTypes.JSON).jsonContent(jsonAllergy)\n+\t\t        .go();\n+\t\t\n+\t\t// verify created correctly\n+\t\tassertThat(response, isCreated());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tAllergyIntolerance allergy = readResponse(response);\n+\t\t\n+\t\tassertThat(allergy, notNullValue());\n+\t\tassertThat(allergy.getPatient().getReferenceElement().getIdPart(), equalTo(\"da7f524f-27ce-4bb2-86d6-6d1d05312bd5\"));\n+\t\tassertThat(allergy.getRecorder().getReferenceElement().getIdPart(), equalTo(\"c98a1558-e131-11de-babe-001e378eb67e\"));\n+\t\tassertThat(allergy.getCategory().get(0).getValue().toCode(), equalTo(\"medication\"));\n+\t\tassertThat(allergy.getReactionFirstRep().getSeverity().toCode(), equalTo(\"severe\"));\n+\t\tassertThat(allergy.getReactionFirstRep().getManifestationFirstRep().getCodingFirstRep().getCode(),\n+\t\t    equalTo(\"5088AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\"));\n+\t\tassertThat(allergy.getReactionFirstRep().getManifestationFirstRep().getText(), equalTo(\"manifestation text\"));\n+\t\tassertThat(allergy.getCode().getCodingFirstRep().getCode(), equalTo(\"5085AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\"));\n+\t\tassertThat(allergy.getClinicalStatus().toCode(), equalTo(\"active\"));\n+\t\tassertThat(allergy.getVerificationStatus().toCode(), equalTo(\"confirmed\"));\n+\t\tassertThat(allergy.getType().toCode(), equalTo(\"allergy\"));\n+\t\tassertThat(allergy, validResource());\n+\t\t\n+\t\t// try to get new allergy\n+\t\tresponse = get(\"/AllergyIntolerance/\" + allergy.getIdElement().getIdPart()).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\t\n+\t\tAllergyIntolerance newAllergy = readResponse(response);\n+\t\t\n+\t\tassertThat(newAllergy.getId(), equalTo(allergy.getId()));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldCreateNewAllergyAsXML() throws Exception {\n+\t\t// read XML record\n+\t\tString jsonAllergy;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(XML_CREATE_ALLERGY_DOCUMENT)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonAllergy = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\t\n+\t\t// create allergy\n+\t\tMockHttpServletResponse response = post(\"/AllergyIntolerance\").accept(FhirMediaTypes.XML).xmlContext(jsonAllergy)\n+\t\t        .go();\n+\t\t\n+\t\t// verify created correctly\n+\t\tassertThat(response, isCreated());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.XML.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tAllergyIntolerance allergy = readResponse(response);\n+\t\t\n+\t\tassertThat(allergy, notNullValue());\n+\t\tassertThat(allergy.getPatient().getReferenceElement().getIdPart(), equalTo(\"da7f524f-27ce-4bb2-86d6-6d1d05312bd5\"));\n+\t\tassertThat(allergy.getRecorder().getReferenceElement().getIdPart(), equalTo(\"c98a1558-e131-11de-babe-001e378eb67e\"));\n+\t\tassertThat(allergy.getCategory().get(0).getValue().toCode(), equalTo(\"medication\"));\n+\t\tassertThat(allergy.getReactionFirstRep().getSeverity().toCode(), equalTo(\"severe\"));\n+\t\tassertThat(allergy.getReactionFirstRep().getManifestationFirstRep().getCodingFirstRep().getCode(),\n+\t\t    equalTo(\"5088AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\"));\n+\t\tassertThat(allergy.getReactionFirstRep().getManifestationFirstRep().getText(), equalTo(\"manifestation text\"));\n+\t\tassertThat(allergy.getCode().getCodingFirstRep().getCode(), equalTo(\"5085AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\"));\n+\t\tassertThat(allergy.getClinicalStatus().toCode(), equalTo(\"active\"));\n+\t\tassertThat(allergy.getVerificationStatus().toCode(), equalTo(\"confirmed\"));\n+\t\tassertThat(allergy.getType().toCode(), equalTo(\"allergy\"));\n+\t\tassertThat(allergy, validResource());\n+\t\t\n+\t\t// try to get new allergy\n+\t\tresponse = get(\"/AllergyIntolerance/\" + allergy.getIdElement().getIdPart()).accept(FhirMediaTypes.XML).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\t\n+\t\tAllergyIntolerance newAllergy = readResponse(response);\n+\t\t\n+\t\tassertThat(newAllergy.getId(), equalTo(allergy.getId()));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldUpdateExistingAllergyAsJson() throws Exception {\n+\t\t// get the existing record\n+\t\tMockHttpServletResponse response = get(\"/AllergyIntolerance/\" + ALLERGY_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\tAllergyIntolerance allergy = readResponse(response);\n+\t\t\n+\t\t// update the existing record\n+\t\tEnumeration<AllergyIntolerance.AllergyIntoleranceCategory> category = new Enumeration(\n+\t\t        new AllergyIntolerance.AllergyIntoleranceCategoryEnumFactory());\n+\t\tcategory.setValue(AllergyIntolerance.AllergyIntoleranceCategory.ENVIRONMENT);\n+\t\tallergy.getCategory().set(0, category);\n+\t\t\n+\t\t// send the update to the server\n+\t\tresponse = put(\"/AllergyIntolerance/\" + ALLERGY_UUID).jsonContent(toJson(allergy)).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\t// read the updated record\n+\t\tAllergyIntolerance updatedAllergy = readResponse(response);\n+\t\t\n+\t\tassertThat(updatedAllergy, notNullValue());\n+\t\tassertThat(updatedAllergy.getIdElement().getIdPart(), equalTo(ALLERGY_UUID));\n+\t\tassertThat(updatedAllergy.getCategory().get(0).getValue().toCode(), equalTo(\"environment\"));\n+\t\tassertThat(updatedAllergy, validResource());\n+\t\t\n+\t\t// double-check the record returned via get\n+\t\tresponse = get(\"/AllergyIntolerance/\" + ALLERGY_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\tAllergyIntolerance reReadAllergy = readResponse(response);\n+\t\t\n+\t\tassertThat(reReadAllergy.getCategory().get(0).getValue().toCode(), equalTo(\"environment\"));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReturnBadRequestWhenDocumentIdDoesNotMatchAllergyIdAsJson() throws Exception {\n+\t\t// get the existing record\n+\t\tMockHttpServletResponse response = get(\"/AllergyIntolerance/\" + ALLERGY_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\tAllergyIntolerance allergy = readResponse(response);\n+\t\t\n+\t\t// update the existing record\n+\t\tallergy.setId(UNKNOWN_ALLERGY_UUID);\n+\t\t\n+\t\t// send the update to the server\n+\t\tresponse = put(\"/AllergyIntolerance/\" + ALLERGY_UUID).jsonContent(toJson(allergy)).go();\n+\t\t\n+\t\tassertThat(response, isBadRequest());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tOperationOutcome operationOutcome = readOperationOutcome(response);\n+\t\t\n+\t\tassertThat(operationOutcome, notNullValue());\n+\t\tassertThat(operationOutcome.hasIssue(), is(true));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReturnNotFoundWhenUpdatingNonExistentAllergyAsJson() throws Exception {\n+\t\t// get the existing record\n+\t\tMockHttpServletResponse response = get(\"/AllergyIntolerance/\" + ALLERGY_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\tAllergyIntolerance allergy = readResponse(response);\n+\t\t\n+\t\t// update the existing record\n+\t\tallergy.setId(UNKNOWN_ALLERGY_UUID);\n+\t\t\n+\t\t// send the update to the server\n+\t\tresponse = put(\"/AllergyIntolerance/\" + UNKNOWN_ALLERGY_UUID).jsonContent(toJson(allergy)).go();\n+\t\t\n+\t\tassertThat(response, isNotFound());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tOperationOutcome operationOutcome = readOperationOutcome(response);\n+\t\t\n+\t\tassertThat(operationOutcome, notNullValue());\n+\t\tassertThat(operationOutcome.hasIssue(), is(true));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldUpdateExistingAllergyAsXML() throws Exception {\n+\t\t// get the existing record\n+\t\tMockHttpServletResponse response = get(\"/AllergyIntolerance/\" + ALLERGY_UUID).accept(FhirMediaTypes.XML).go();\n+\t\tAllergyIntolerance allergy = readResponse(response);\n+\t\t\n+\t\t// update the existing record\n+\t\tEnumeration<AllergyIntolerance.AllergyIntoleranceCategory> category = new Enumeration(\n+\t\t        new AllergyIntolerance.AllergyIntoleranceCategoryEnumFactory());\n+\t\tcategory.setValue(AllergyIntolerance.AllergyIntoleranceCategory.ENVIRONMENT);\n+\t\tallergy.getCategory().set(0, category);\n+\t\t\n+\t\t// send the update to the server\n+\t\tresponse = put(\"/AllergyIntolerance/\" + ALLERGY_UUID).xmlContext(toXML(allergy)).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.XML.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\t// read the updated record\n+\t\tAllergyIntolerance updatedAllergy = readResponse(response);\n+\t\t\n+\t\tassertThat(updatedAllergy, notNullValue());\n+\t\tassertThat(updatedAllergy.getIdElement().getIdPart(), equalTo(ALLERGY_UUID));\n+\t\tassertThat(updatedAllergy.getCategory().get(0).getValue().toCode(), equalTo(\"environment\"));\n+\t\tassertThat(updatedAllergy, validResource());\n+\t\t\n+\t\t// double-check the record returned via get\n+\t\tresponse = get(\"/AllergyIntolerance/\" + ALLERGY_UUID).accept(FhirMediaTypes.XML).go();\n+\t\tAllergyIntolerance reReadAllergy = readResponse(response);\n+\t\t\n+\t\tassertThat(reReadAllergy.getCategory().get(0).getValue().toCode(), equalTo(\"environment\"));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReturnBadRequestWhenDocumentIdDoesNotMatchAllergyIdAsXML() throws Exception {\n+\t\t// get the existing record\n+\t\tMockHttpServletResponse response = get(\"/AllergyIntolerance/\" + ALLERGY_UUID).accept(FhirMediaTypes.XML).go();\n+\t\tAllergyIntolerance allergy = readResponse(response);\n+\t\t\n+\t\t// update the existing record\n+\t\tallergy.setId(UNKNOWN_ALLERGY_UUID);\n+\t\t\n+\t\t// send the update to the server\n+\t\tresponse = put(\"/AllergyIntolerance/\" + ALLERGY_UUID).xmlContext(toXML(allergy)).go();\n+\t\t\n+\t\tassertThat(response, isBadRequest());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.XML.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tOperationOutcome operationOutcome = readOperationOutcome(response);\n+\t\t\n+\t\tassertThat(operationOutcome, notNullValue());\n+\t\tassertThat(operationOutcome.hasIssue(), is(true));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReturnNotFoundWhenUpdatingNonExistentAllergyAsXML() throws Exception {\n+\t\t// get the existing record\n+\t\tMockHttpServletResponse response = get(\"/AllergyIntolerance/\" + ALLERGY_UUID).accept(FhirMediaTypes.XML).go();\n+\t\tAllergyIntolerance allergy = readResponse(response);\n+\t\t\n+\t\t// update the existing record\n+\t\tallergy.setId(UNKNOWN_ALLERGY_UUID);\n+\t\t\n+\t\t// send the update to the server\n+\t\tresponse = put(\"/AllergyIntolerance/\" + UNKNOWN_ALLERGY_UUID).xmlContext(toXML(allergy)).go();\n+\t\t\n+\t\tassertThat(response, isNotFound());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.XML.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tOperationOutcome operationOutcome = readOperationOutcome(response);\n+\t\t\n+\t\tassertThat(operationOutcome, notNullValue());\n+\t\tassertThat(operationOutcome.hasIssue(), is(true));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldDeleteExistingAllergyAsJson() throws Exception {\n+\t\tMockHttpServletResponse response = delete(\"/AllergyIntolerance/\" + ALLERGY_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\t\n+\t\tresponse = get(\"/AllergyIntolerance/\" + ALLERGY_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, statusEquals(HttpStatus.GONE));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReturnNotFoundWhenDeletingNonExistentAllergyAsJson() throws Exception {\n+\t\tMockHttpServletResponse response = delete(\"/AllergyIntolerance/\" + UNKNOWN_ALLERGY_UUID).accept(FhirMediaTypes.JSON)\n+\t\t        .go();\n+\t\t\n+\t\tassertThat(response, isNotFound());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tOperationOutcome operationOutcome = readOperationOutcome(response);\n+\t\t\n+\t\tassertThat(operationOutcome, notNullValue());\n+\t\tassertThat(operationOutcome.hasIssue(), is(true));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldDeleteExistingAllergyAsXML() throws Exception {\n+\t\tMockHttpServletResponse response = delete(\"/AllergyIntolerance/\" + ALLERGY_UUID).accept(FhirMediaTypes.XML).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\t\n+\t\tresponse = get(\"/AllergyIntolerance/\" + ALLERGY_UUID).accept(FhirMediaTypes.XML).go();\n+\t\t\n+\t\tassertThat(response, statusEquals(HttpStatus.GONE));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReturnNotFoundWhenDeletingNonExistentAllergyAsXML() throws Exception {\n+\t\tMockHttpServletResponse response = delete(\"/AllergyIntolerance/\" + UNKNOWN_ALLERGY_UUID).accept(FhirMediaTypes.XML)\n+\t\t        .go();\n+\t\t\n+\t\tassertThat(response, isNotFound());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.XML.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tOperationOutcome operationOutcome = readOperationOutcome(response);\n+\t\t\n+\t\tassertThat(operationOutcome, notNullValue());\n+\t\tassertThat(operationOutcome.hasIssue(), is(true));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldSearchForExistingAllergyAsJson() throws Exception {\n+\t\tMockHttpServletResponse response = get(\"/AllergyIntolerance\").accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tBundle results = readBundleResponse(response);\n+\t\t\n+\t\tassertThat(results, notNullValue());\n+\t\tassertThat(results.getType(), equalTo(Bundle.BundleType.SEARCHSET));\n+\t\tassertThat(results.hasEntry(), is(true));\n+\t\t\n+\t\tList<Bundle.BundleEntryComponent> entries = results.getEntry();\n+\t\t\n+\t\tassertThat(entries,\n+\t\t    everyItem(hasProperty(\"fullUrl\", startsWith(\"http://localhost/ws/fhir2/R3/AllergyIntolerance/\"))));\n+\t\tassertThat(entries, everyItem(hasResource(instanceOf(AllergyIntolerance.class))));\n+\t\tassertThat(entries, everyItem(hasResource(validResource())));\n+\t\t\n+\t\tresponse = get(\"/AllergyIntolerance?patient.identifier=M4001-1&_sort=severity\").accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tresults = readBundleResponse(response);\n+\t\t\n+\t\tassertThat(results, notNullValue());\n+\t\tassertThat(results.getType(), equalTo(Bundle.BundleType.SEARCHSET));\n+\t\tassertThat(results.hasEntry(), is(true));\n+\t\t\n+\t\tentries = results.getEntry();\n+\t\t\n+\t\tassertThat(entries, everyItem(\n+\t\t    hasResource(hasProperty(\"patient\", hasProperty(\"identifier\", hasProperty(\"value\", equalTo(\"M4001-1\")))))));\n+\t\tassertThat(entries,\n+\t\t    containsInRelativeOrder(hasResource(hasProperty(\"criticality\", hasProperty(\"display\", equalTo(\"Low Risk\")))), // mild\n+\t\t        hasResource(hasProperty(\"criticality\", hasProperty(\"display\", equalTo(\"Unable to Assess Risk\")))), // moderate\n+\t\t        hasResource(hasProperty(\"criticality\", hasProperty(\"display\", equalTo(\"High Risk\")))), // severe\n+\t\t        hasResource(hasProperty(\"criticality\", equalTo(null))))); // null\n+\t\tassertThat(entries, everyItem(hasResource(validResource())));\n+\t\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldSearchForExistingAllergyAsXML() throws Exception {\n+\t\tMockHttpServletResponse response = get(\"/AllergyIntolerance\").accept(FhirMediaTypes.XML).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.XML.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tBundle results = readBundleResponse(response);\n+\t\t\n+\t\tassertThat(results, notNullValue());\n+\t\tassertThat(results.getType(), equalTo(Bundle.BundleType.SEARCHSET));\n+\t\tassertThat(results.hasEntry(), is(true));\n+\t\t\n+\t\tList<Bundle.BundleEntryComponent> entries = results.getEntry();\n+\t\t\n+\t\tassertThat(entries,\n+\t\t    everyItem(hasProperty(\"fullUrl\", startsWith(\"http://localhost/ws/fhir2/R3/AllergyIntolerance/\"))));\n+\t\tassertThat(entries, everyItem(hasResource(instanceOf(AllergyIntolerance.class))));\n+\t\tassertThat(entries, everyItem(hasResource(validResource())));\n+\t\t\n+\t\tresponse = get(\"/AllergyIntolerance?patient.identifier=M4001-1&_sort=severity\").accept(FhirMediaTypes.XML).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.XML.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tresults = readBundleResponse(response);\n+\t\t\n+\t\tassertThat(results, notNullValue());\n+\t\tassertThat(results.getType(), equalTo(Bundle.BundleType.SEARCHSET));\n+\t\tassertThat(results.hasEntry(), is(true));\n+\t\t\n+\t\tentries = results.getEntry();\n+\t\t\n+\t\tassertThat(entries, everyItem(\n+\t\t    hasResource(hasProperty(\"patient\", hasProperty(\"identifier\", hasProperty(\"value\", equalTo(\"M4001-1\")))))));\n+\t\tassertThat(entries,\n+\t\t    containsInRelativeOrder(hasResource(hasProperty(\"criticality\", hasProperty(\"display\", equalTo(\"Low Risk\")))), // mild\n+\t\t        hasResource(hasProperty(\"criticality\", hasProperty(\"display\", equalTo(\"Unable to Assess Risk\")))), // moderate\n+\t\t        hasResource(hasProperty(\"criticality\", hasProperty(\"display\", equalTo(\"High Risk\")))), // severe\n+\t\t        hasResource(hasProperty(\"criticality\", equalTo(null))))); // null\n+\t\tassertThat(entries, everyItem(hasResource(validResource())));\n+\t\t\n+\t}\n+\t\n+}", "originalCommit": "df2a6ce2f31a8418e31fc7891d146ebd1c5eb1df", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "bddf1b6adbca5a7099f0a4dbfe27f7dcce8f9685", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/bddf1b6adbca5a7099f0a4dbfe27f7dcce8f9685", "message": "FM2-283:  Add Integration Tests for AllergyIntolerance", "committedDate": "2020-08-20T19:30:48Z", "type": "commit"}, {"oid": "bddf1b6adbca5a7099f0a4dbfe27f7dcce8f9685", "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/bddf1b6adbca5a7099f0a4dbfe27f7dcce8f9685", "message": "FM2-283:  Add Integration Tests for AllergyIntolerance", "committedDate": "2020-08-20T19:30:48Z", "type": "forcePushed"}]}