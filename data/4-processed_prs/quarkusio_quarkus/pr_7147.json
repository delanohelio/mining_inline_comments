{"pr_number": 7147, "pr_title": "MongoDB with Panache multi-update", "pr_createdAt": "2020-02-11T17:04:49Z", "pr_url": "https://github.com/quarkusio/quarkus/pull/7147", "timeline": [{"oid": "80742a767581acb3e6ff587ba9c46a72c7657a39", "url": "https://github.com/quarkusio/quarkus/commit/80742a767581acb3e6ff587ba9c46a72c7657a39", "message": "MongoDB with Panache multi-update\n\nFixes 5924", "committedDate": "2020-02-14T15:21:14Z", "type": "forcePushed"}, {"oid": "8f417431dc04295e267ea2e5b6bad29005e7b216", "url": "https://github.com/quarkusio/quarkus/commit/8f417431dc04295e267ea2e5b6bad29005e7b216", "message": "MongoDB with Panache multi-update\n\nFixes 5924", "committedDate": "2020-02-17T10:06:06Z", "type": "forcePushed"}, {"oid": "809ad9b6c37fa93ca2a0a35394670fcbc54c6137", "url": "https://github.com/quarkusio/quarkus/commit/809ad9b6c37fa93ca2a0a35394670fcbc54c6137", "message": "MongoDB with Panache multi-update\n\nFixes 5924", "committedDate": "2020-02-26T16:46:22Z", "type": "forcePushed"}, {"oid": "5f725128b8f9aaee6ed15c511d7f1e36dd823e4c", "url": "https://github.com/quarkusio/quarkus/commit/5f725128b8f9aaee6ed15c511d7f1e36dd823e4c", "message": "MongoDB with Panache multi-update\n\nFixes 5924", "committedDate": "2020-02-27T09:48:50Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc5OTgxMA==", "url": "https://github.com/quarkusio/quarkus/pull/7147#discussion_r388799810", "bodyText": "This looks like you mixed up the query/update part, no? It's not updating all living persons, but all persons with a Moral name (does that even compile?) to make them Alive, no?\nThat kinda proves the API is confusing, no? It's not clear to me if the query or update should be first.", "author": "FroMage", "createdAt": "2020-03-06T09:36:32Z", "path": "docs/src/main/asciidoc/mongodb-panache.adoc", "diffHunk": "@@ -378,6 +381,9 @@ personRepository.delete(\"status\", Status.Alive);\n \n // delete all persons\n personRepository.deleteAll();\n+\n+// update all living persons", "originalCommit": "5f725128b8f9aaee6ed15c511d7f1e36dd823e4c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTAyMzUyMQ==", "url": "https://github.com/quarkusio/quarkus/pull/7147#discussion_r389023521", "bodyText": "Query is first, then the update document (query is a filter in MongoDB terms), what is confusing is that you can pass parameters on both side and it takes the parameters as if the query is a unique one ... Using varags parameters it is not very readable.\nMaybe we need to introduce an UpdateQuery object that will allow to intoduce the two \"query part\" one by one\nPerson.update(\"name = ?1\", \"Mortal\").with(\"status = ?1\", Status.Alive);\n\nWDYT ?", "author": "loicmathieu", "createdAt": "2020-03-06T16:58:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc5OTgxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTUyMTI0Mg==", "url": "https://github.com/quarkusio/quarkus/pull/7147#discussion_r389521242", "bodyText": "I like that idea. That's more readable. It also supports shortcut syntax: Person.update(\"name\", \"Mortal\").with(\"status\", Status.Alive);", "author": "FroMage", "createdAt": "2020-03-09T08:40:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc5OTgxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTUyMjA5NA==", "url": "https://github.com/quarkusio/quarkus/pull/7147#discussion_r389522094", "bodyText": "OK, I'll give it a try", "author": "loicmathieu", "createdAt": "2020-03-09T08:42:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc5OTgxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTYwNTQ3NQ==", "url": "https://github.com/quarkusio/quarkus/pull/7147#discussion_r389605475", "bodyText": "The new impl is done, can you have a look ?", "author": "loicmathieu", "createdAt": "2020-03-09T11:35:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc5OTgxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTY2NDAyMA==", "url": "https://github.com/quarkusio/quarkus/pull/7147#discussion_r389664020", "bodyText": "The comment here (and above) are still wrong: this does not update all living persons. It sets all persons named \"Mortal\" to living.", "author": "FroMage", "createdAt": "2020-03-09T13:29:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc5OTgxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTY3MTI2MQ==", "url": "https://github.com/quarkusio/quarkus/pull/7147#discussion_r389671261", "bodyText": "@emmanuelbernard can you give this an eye? I think it looks good, but it's different to the ORM version. Given that queries can be native here, I think it's fine.", "author": "FroMage", "createdAt": "2020-03-09T13:35:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc5OTgxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTcwODIzMA==", "url": "https://github.com/quarkusio/quarkus/pull/7147#discussion_r389708230", "bodyText": "The comment here (and above) are still wrong: this does not update all living persons. It sets all persons named \"Mortal\" to living.\n\nThis was copied from the Hibernate with Panache documentation, I'll change it there also.", "author": "loicmathieu", "createdAt": "2020-03-09T14:07:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc5OTgxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTcxMTA5OQ==", "url": "https://github.com/quarkusio/quarkus/pull/7147#discussion_r389711099", "bodyText": "Hah, I was afraid this would turn out to be the case ;) Thanks!", "author": "FroMage", "createdAt": "2020-03-09T14:10:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc5OTgxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDU1Njk3OA==", "url": "https://github.com/quarkusio/quarkus/pull/7147#discussion_r390556978", "bodyText": "Are you asking me for my opinion on\nupdate(\"name\", \"Mortal\").with(\"status\", Status.Alive);\nbeing different than\nupdate(\"name = 'Mortal' where status = ?1\", Status.Alive);\nWould be cool to be unified but I imagine there is a reason behind that difference?\nWhat makes me uneasy is how can I do a update all name to \"Mortal\" without condition of being alive? And the counter reason is how is it clear that I am not changing all the DB by accident by forgetting the \"where clause\" - that could not have happened ever to one of us, right so this is purely hypothetical that an ecomerce site did update its catalog with price=0 for all products ;P", "author": "emmanuelbernard", "createdAt": "2020-03-10T19:24:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc5OTgxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDU2OTM0Mw==", "url": "https://github.com/quarkusio/quarkus/pull/7147#discussion_r390569343", "bodyText": "@emmanuelbernard in fact the implementation is\nupdate(filter, params).with(document, params)\nSo\nupdate(\"name\", \"Mortal\").with(\"status\", Status.Alive);\nCorrespond to the following one implemented on Hibernate with Panache (but cannot be done easily with MongoDB)\nupdate(\"name = ?1 where status = ?2\", \"Mortal\", Status.Alive);\nTo update without filter you could use the empty String or null (worth testing it)\nupdate(\"\").with(\"status\", Status.Alive);\nWe can also add an overload of update with no parameters for this case, good point :)", "author": "loicmathieu", "createdAt": "2020-03-10T19:47:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc5OTgxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk4OTU0NQ==", "url": "https://github.com/quarkusio/quarkus/pull/7147#discussion_r390989545", "bodyText": "Would be cool to be unified but I imagine there is a reason behind that difference?\n\nYeah, and the reason is that both the query and the update need to support native queries so we can't have them as a single String param, and having two String params for the query and update parts is confusing (their order is).\nNow, you're right that we do need another version with no query part. We can't go with update(\"\").with(...) because it looks silly. We could do update().with(...) but it pains me that we're going through all that trouble for native queries, which in theory is the less common case.\nAt this point, we could have update().with(update) and update(query).with(update) OR update(panacheQlQuery) and updateNative(nativeQuery?).with(updateQuery).\nNot sure yet which I prefer.", "author": "FroMage", "createdAt": "2020-03-11T13:59:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc5OTgxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk5ODQzMQ==", "url": "https://github.com/quarkusio/quarkus/pull/7147#discussion_r390998431", "bodyText": "We choose to swith panacheql/nativeql by inspecting the query string for the presence of {.\nI would really prefere to keep it this way so I favor update().with(update, params).\nThe issue is that a MongoDB update is two queries and not one (a filter query and an update document), and we need to provide parameters substitution for both.\nAs an alternative (that I don't really support), we can add set support for the current panacheQL so we can write a MongoDB update query as update(\"query with set\", params) method. But I feel this would not be natural for MongoDB users.\nIn this case, native query could be supported by providing the , inside the first varags parameters, the update document (a String or a BSON Document) ...\nExamples:\nupdate(\"where name=?1 set status=?2\", \"Mortal\", Status.ALIVE);\nupdate(\"{'name'=?1}\", \"{'status'=?2\"}, \"Mortal\", Status.ALIVE);\n\nFor this example to works we need to support set inside the PanacheQL parser and the MongoParserVisitor.\nAs I said, I'm not a big fan of it and prefere to stick with update(query, param).with(document, param).", "author": "loicmathieu", "createdAt": "2020-03-11T14:12:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc5OTgxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTA4NDkwNw==", "url": "https://github.com/quarkusio/quarkus/pull/7147#discussion_r391084907", "bodyText": "@emmanuelbernard in fact the implementation is\nupdate(filter, params).with(document, params)\nSo\nupdate(\"name\", \"Mortal\").with(\"status\", Status.Alive);\nCorrespond to the following one implemented on Hibernate with Panache (but cannot be done easily with MongoDB)\nupdate(\"name = ?1 where status = ?2\", \"Mortal\", Status.Alive);\nTo update without filter you could use the empty String or null (worth testing it)\nupdate(\"\").with(\"status\", Status.Alive);\nWe can also add an overload of update with no parameters for this case, good point :)\n\nI am a bit confused. What you call filter is not the filter but the transformation clause. And the narrowing (filtering) is in the with operator? The way you describe it seems to be the opposite but your examples seems ot disagree with your text. In my head that is.", "author": "emmanuelbernard", "createdAt": "2020-03-11T16:06:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc5OTgxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTA4OTgzNA==", "url": "https://github.com/quarkusio/quarkus/pull/7147#discussion_r391089834", "bodyText": "So I think it's likely ok to have the double methods currently explored. But you guys still confuse the hell out of me and I still can't figure out where to put my transformations and where to put my narrowing predicate. Which makes me feel the names can be improved. Proposed alternative names\n\nupdate(...).where(...) (e.g. update(\"some field changes\").where(\"some restrictions on fields\") with where being optional\nupdate(...).for(...) with same semantic above", "author": "emmanuelbernard", "createdAt": "2020-03-11T16:13:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc5OTgxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTA5NTgyNw==", "url": "https://github.com/quarkusio/quarkus/pull/7147#discussion_r391095827", "bodyText": "This is update(filter, params).with(newDocument, params). The fact that you are confuse show that the examples was not clear and maybe the API is not clear enougth !\nKeep in mind that a typical MongoDB multi-update looks like this (from the mongo shell or a tool like Robot3T) :\ndp.persons.update(\n    {\"name\": \"Mortal\"}, \n    {\"status\": \"Alive\"},\n    {\"multi\": true}\n); \n\nThis is a JavaScript method call with 3 parameters: filter, update document and options.\nWe can replace it with update().filter(filter, params).withDocument(newDocument, params) so that it is be more clear and the filter could be optional to provides update on all documents.\nWith this new API, there will be one more method call ...\nThe other advantage of this new API is that we can also add it to Hibernate with Panache if some people think it will be a good addition to the existing multi-update support :)", "author": "loicmathieu", "createdAt": "2020-03-11T16:21:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc5OTgxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTU3NjQzMQ==", "url": "https://github.com/quarkusio/quarkus/pull/7147#discussion_r391576431", "bodyText": "So I guess you copied the notion of filter and document from Mongo (where document is roughly equivalent to SQL SET section - again if I understood but I\u2019m still not sure). So the core or my problem is that the Mongo API confuses me. I would prefer the semantic I proposed earlier (update and where methods) which align with SQL and JP-QL and feel more natural to me.", "author": "emmanuelbernard", "createdAt": "2020-03-12T12:07:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc5OTgxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTYzNTk0OA==", "url": "https://github.com/quarkusio/quarkus/pull/7147#discussion_r391635948", "bodyText": "Yes, your guess is right :)\nI'm OK with update(updateDocument, params).where(filter, params);, it will be a little less natural for peoples used to MongoDB but is still easy to understand.\nFor the records Spring Data do it this way:\nmongoTemplate.updateMulti(\n    new Query(where(\"accounts.accountType\").is(Account.Type.SAVINGS)),\n    new Update().inc(\"accounts.$.balance\", 50.00), \n   Account.class\n);", "author": "loicmathieu", "createdAt": "2020-03-12T13:54:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc5OTgxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTY2MjU1OA==", "url": "https://github.com/quarkusio/quarkus/pull/7147#discussion_r391662558", "bodyText": "Can you do the same query but with our API, with parameters and all? Looks like it will be more compact and readable.", "author": "emmanuelbernard", "createdAt": "2020-03-12T14:32:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc5OTgxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTY3MDM3OQ==", "url": "https://github.com/quarkusio/quarkus/pull/7147#discussion_r391670379", "bodyText": "The Spring data example is based on their QueryDsl, a type safe query DSL that is very verbose.\nI think that our aproach of update().with() or update().where() better match the Panache way (compact, defines query with strings, parameters, ...).\nSo I can propose the following API:\nupdate(filter, params).with(updateDocument, params)// 1\nupdate(updateDocument, params).where(filter, params)// 2\nupdate().filter(filter, params).set(updateDocument, params)// 3\n\nWe can change the name of the method (I use filter because it matches MongoDB terms but you can use where instead).\nIf we plan to integrate the same facility inside Hibernate with Panache in addition to the current multi-update we need to choose terms that are not tied to SQL nor MongoDB ...", "author": "loicmathieu", "createdAt": "2020-03-12T14:44:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc5OTgxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTc1MDY4NQ==", "url": "https://github.com/quarkusio/quarkus/pull/7147#discussion_r391750685", "bodyText": "2", "author": "emmanuelbernard", "createdAt": "2020-03-12T16:43:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc5OTgxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzU5MjY2Mg==", "url": "https://github.com/quarkusio/quarkus/pull/7147#discussion_r393592662", "bodyText": "So you don't want a panache-ql version after all?\nHow about when there's no filter?\nOne possibility would be:\nupdate(\"foo = ?1 where foo is null\", something) // panache-ql\nupdateNative(\"{'foo'=?1}\", something).where(\"{'status'=?1\"}, Status.Alive); // native update queries\nupdateNative(\"{'foo'=?1}\", something).all(); // or some other no-filter term", "author": "FroMage", "createdAt": "2020-03-17T10:52:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc5OTgxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY1MTA5MQ==", "url": "https://github.com/quarkusio/quarkus/pull/7147#discussion_r393651091", "bodyText": "update(\"foo = ?1 where foo is null\", something)\nThis didn't feels right to me, it's realy not the way to do it in MongoDB. And we cannot have a panache-ql version and the update(update, params).where(query, params) that we discuss with  @emmanuelbernard and the last one has my preference.\nI would also prefere to keep the same methods for both native and non-native query as we did for all the other methods, at least inside PanacheMongoEntityBase and PanacheMongoRepositoryBase that already contains a lot of methods.\nFor the case there is no filter, I add a update(update, params).where() I ask in a comment wheter to have an empty where() or to have all() instead, none have my preference so you can choose ...", "author": "loicmathieu", "createdAt": "2020-03-17T12:44:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc5OTgxMA=="}], "type": "inlineReview"}, {"oid": "4605eb6a87468b713de8bad6c1bf2064db3941f5", "url": "https://github.com/quarkusio/quarkus/commit/4605eb6a87468b713de8bad6c1bf2064db3941f5", "message": "MongoDB with Panache multi-update\n\nFixes 5924", "committedDate": "2020-03-09T11:34:08Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTY2NDg1Nw==", "url": "https://github.com/quarkusio/quarkus/pull/7147#discussion_r389664857", "bodyText": "I'm not sure what the mandatory here means. It should be removed.", "author": "FroMage", "createdAt": "2020-03-09T13:29:48Z", "path": "extensions/panache/mongodb-panache/runtime/src/main/java/io/quarkus/mongodb/panache/PanacheMongoEntityBase.java", "diffHunk": "@@ -864,6 +864,49 @@ public static void persistOrUpdate(Object firstEntity, Object... entities) {\n         MongoOperations.persistOrUpdate(firstEntity, entities);\n     }\n \n+    /**\n+     * Update all entities of this type matching the given query, with mandatory indexed parameters.", "originalCommit": "4605eb6a87468b713de8bad6c1bf2064db3941f5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTY2NTcwNA==", "url": "https://github.com/quarkusio/quarkus/pull/7147#discussion_r389665704", "bodyText": "Below (for repository) it's optional\u2026", "author": "FroMage", "createdAt": "2020-03-09T13:30:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTY2NDg1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTcwNjM3NQ==", "url": "https://github.com/quarkusio/quarkus/pull/7147#discussion_r389706375", "bodyText": "It's copied from the JavaDoc of Hibernate with Panache where mandatory is used. I think it's wrong as we should be able to use it without any parameters : Person.update(\"set person.status = 'Dead' where person.status='Alive');\nI check the code of the Hibernate with Panache implementation and no parameters are allowed at code level, I'll update the documentation with optional here also.", "author": "loicmathieu", "createdAt": "2020-03-09T14:06:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTY2NDg1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTcxMjAxMQ==", "url": "https://github.com/quarkusio/quarkus/pull/7147#discussion_r389712011", "bodyText": "Yeah, I've no idea how this could have slipped through. Thanks for fixing it there too.", "author": "FroMage", "createdAt": "2020-03-09T14:10:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTY2NDg1Nw=="}], "type": "inlineReview"}, {"oid": "fbd38da2a026840a59b3033756adce2856c09e1d", "url": "https://github.com/quarkusio/quarkus/commit/fbd38da2a026840a59b3033756adce2856c09e1d", "message": "Fix Hibernate with Panache update documentation", "committedDate": "2020-03-09T14:32:04Z", "type": "forcePushed"}, {"oid": "3bf8c101f77e3621e99f11b990d62c22ad03599d", "url": "https://github.com/quarkusio/quarkus/commit/3bf8c101f77e3621e99f11b990d62c22ad03599d", "message": "fix: multi-update", "committedDate": "2020-03-13T11:07:09Z", "type": "forcePushed"}, {"oid": "3cceb4a1f6086adbcc432a91703039fead7144ca", "url": "https://github.com/quarkusio/quarkus/commit/3cceb4a1f6086adbcc432a91703039fead7144ca", "message": "fix: multi-update", "committedDate": "2020-03-13T11:09:21Z", "type": "forcePushed"}, {"oid": "f61f683d365bb3452df423f61c3899a028985825", "url": "https://github.com/quarkusio/quarkus/commit/f61f683d365bb3452df423f61c3899a028985825", "message": "fix: multi-update", "committedDate": "2020-03-13T11:11:08Z", "type": "forcePushed"}, {"oid": "defef83511bfe25bb5e14f6687a3838350bc1b0e", "url": "https://github.com/quarkusio/quarkus/commit/defef83511bfe25bb5e14f6687a3838350bc1b0e", "message": "fix: multi-update", "committedDate": "2020-03-13T11:15:24Z", "type": "forcePushed"}, {"oid": "35b1b1b5de14d6526076b987306066091031adfa", "url": "https://github.com/quarkusio/quarkus/commit/35b1b1b5de14d6526076b987306066091031adfa", "message": "fix: multi-update", "committedDate": "2020-03-13T11:22:56Z", "type": "forcePushed"}, {"oid": "2588a29c19edeb7a658bdbfdbb9d565c8f3e326d", "url": "https://github.com/quarkusio/quarkus/commit/2588a29c19edeb7a658bdbfdbb9d565c8f3e326d", "message": "Fix Hibernate with Panache update documentation", "committedDate": "2020-03-23T11:46:58Z", "type": "forcePushed"}, {"oid": "ac38f3d025eaeec68519b86c1f3c949eab19058c", "url": "https://github.com/quarkusio/quarkus/commit/ac38f3d025eaeec68519b86c1f3c949eab19058c", "message": "Fix Hibernate with Panache update documentation", "committedDate": "2020-03-30T11:08:22Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDE0NTg0MA==", "url": "https://github.com/quarkusio/quarkus/pull/7147#discussion_r400145840", "bodyText": "This is not what it does. It updates all living persons to change their name to Mortal. As a result, the mongodb equivalent example should probably be changed to reflect that.", "author": "FroMage", "createdAt": "2020-03-30T12:18:55Z", "path": "docs/src/main/asciidoc/hibernate-orm-panache.adoc", "diffHunk": "@@ -385,8 +385,8 @@ personRepository.deleteAll();\n // delete by id\n boolean deleted = personRepository.deleteById(personId);\n \n-// update all living persons\n-personRepository.update(\"name = 'Moral' where status = ?1\", Status.Alive);\n+// set all persons named \"Mortal\" to living.", "originalCommit": "ac38f3d025eaeec68519b86c1f3c949eab19058c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDcwODYyMA==", "url": "https://github.com/quarkusio/quarkus/pull/7147#discussion_r400708620", "bodyText": "I update all comments and switch the MongoDB examples to mimic the one from Hibernate with Panache guide.", "author": "loicmathieu", "createdAt": "2020-03-31T07:48:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDE0NTg0MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDE0NjkxNw==", "url": "https://github.com/quarkusio/quarkus/pull/7147#discussion_r400146917", "bodyText": "It's not really a document here, is it?", "author": "FroMage", "createdAt": "2020-03-30T12:20:37Z", "path": "extensions/panache/mongodb-panache/runtime/src/main/java/io/quarkus/mongodb/panache/PanacheMongoEntityBase.java", "diffHunk": "@@ -875,6 +875,55 @@ public static void persistOrUpdate(Object firstEntity, Object... entities) {\n         MongoOperations.persistOrUpdate(firstEntity, entities);\n     }\n \n+    /**\n+     * Update all entities of this type by the given update document, with optional indexed parameters.", "originalCommit": "ac38f3d025eaeec68519b86c1f3c949eab19058c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDE1MDU5Mg==", "url": "https://github.com/quarkusio/quarkus/pull/7147#discussion_r400150592", "bodyText": "Also, I read the whole PR and I'm not sure what syntax is allowed in the update param besides the mongo native query. It says this is a query string, but it's not, is it?\nCan I do foo = :name, bar = :lastname or gee = 2?", "author": "FroMage", "createdAt": "2020-03-30T12:26:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDE0NjkxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDY5Mjc5Nw==", "url": "https://github.com/quarkusio/quarkus/pull/7147#discussion_r400692797", "bodyText": "Yes, you can do it.\nIn reality, everything is a document in MongoDB, so there is no difference between what we called a query (MongoDB called it a filter document) and a stored document.\nSo you can use PanacheQL to express the update document, all the following are working update document:\nFooBar.update(\"foo = :name and bar = :lastname\", parameters).all()\nFooBar.update(\"foo = :name, bar = :lastname\", parameters).all()\nFooBar.update(\"foo = ?1 and bar = ?2\", name, lastname).all()\nFooBar.update(\"foo = ?1, bar = ?2\", name, lastname).all()\nFooBar.update(\"{'foo' : :name, 'bar' : :lastname}\", parameters).all()\nFooBar.update(\"{'foo' : ?1, 'bar' : ?2}\", name, lastname).all()\nFooBar.update(\"foo\", name).all()", "author": "loicmathieu", "createdAt": "2020-03-31T07:19:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDE0NjkxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDcwODk2NQ==", "url": "https://github.com/quarkusio/quarkus/pull/7147#discussion_r400708965", "bodyText": "I added some sentence on the guide to document this inside the 'Simplified query' section.", "author": "loicmathieu", "createdAt": "2020-03-31T07:49:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDE0NjkxNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDE0NzEyNw==", "url": "https://github.com/quarkusio/quarkus/pull/7147#discussion_r400147127", "bodyText": "This talks about a query.", "author": "FroMage", "createdAt": "2020-03-30T12:21:00Z", "path": "extensions/panache/mongodb-panache/runtime/src/main/java/io/quarkus/mongodb/panache/PanacheMongoEntityBase.java", "diffHunk": "@@ -875,6 +875,55 @@ public static void persistOrUpdate(Object firstEntity, Object... entities) {\n         MongoOperations.persistOrUpdate(firstEntity, entities);\n     }\n \n+    /**\n+     * Update all entities of this type by the given update document, with optional indexed parameters.\n+     * The returned {@link PanacheUpdate} object will allow to restrict on which document the update should be applied.\n+     *\n+     * @param update the update document, if it didn't contain <code>$set</code> we add it.\n+     *        It can also be expressed as a {@link io.quarkus.mongodb.panache query string}.\n+     * @param params optional sequence of indexed parameters\n+     * @return a new {@link PanacheUpdate} instance for the given update query\n+     * @see #update(String, Map)\n+     * @see #update(String, Parameters)\n+     */\n+    @GenerateBridge\n+    public static PanacheUpdate update(String update, Object... params) {\n+        throw MongoOperations.implementationInjectionMissing();\n+    }\n+\n+    /**\n+     * Update all entities of this type matching the given query, with named parameters.", "originalCommit": "ac38f3d025eaeec68519b86c1f3c949eab19058c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDcwOTIyNQ==", "url": "https://github.com/quarkusio/quarkus/pull/7147#discussion_r400709225", "bodyText": "I fixed the javadoc in all places.", "author": "loicmathieu", "createdAt": "2020-03-31T07:49:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDE0NzEyNw=="}], "type": "inlineReview"}, {"oid": "2b45b9075bb72362171b515d8eef867ee929cd45", "url": "https://github.com/quarkusio/quarkus/commit/2b45b9075bb72362171b515d8eef867ee929cd45", "message": "Fix Hibernate with Panache update documentation", "committedDate": "2020-03-31T07:47:53Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDc3MDk5Mw==", "url": "https://github.com/quarkusio/quarkus/pull/7147#discussion_r400770993", "bodyText": "If it works with , instead of and as the separator I'd prefer we document that and leave the and syntax undocumented, because the and makes it look like a query rather than a set of update commands.", "author": "FroMage", "createdAt": "2020-03-31T09:30:56Z", "path": "docs/src/main/asciidoc/mongodb-panache.adoc", "diffHunk": "@@ -511,6 +517,17 @@ The MongoDB POJO codec doesn't support `ZonedDateTime` and `OffsetDateTime` so y\n \n MongoDB with Panache also supports extended MongoDB queries by providing a `Document` query, this is supported by the find/list/stream/count/delete methods.\n \n+MongoDB with Panache offers operations to update multiple documents based on an update document and a query :\n+`Person.update(\"foo = ?1 and bar = ?2\", fooName, barName).where(\"name = ?1\", name)`.", "originalCommit": "2b45b9075bb72362171b515d8eef867ee929cd45", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDc5MzE1MQ==", "url": "https://github.com/quarkusio/quarkus/pull/7147#discussion_r400793151", "bodyText": "Yes, it works, I tested it.\nI just updated the documentation part.", "author": "loicmathieu", "createdAt": "2020-03-31T10:06:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDc3MDk5Mw=="}], "type": "inlineReview"}, {"oid": "85c207405a36a1d1b9b7ed4e69dda08c254b3912", "url": "https://github.com/quarkusio/quarkus/commit/85c207405a36a1d1b9b7ed4e69dda08c254b3912", "message": "MongoDB with Panache multi-update\n\nFixes #5924", "committedDate": "2020-03-31T10:05:49Z", "type": "commit"}, {"oid": "ce3d644fe84ec045e867b5df88bc61411cdad16a", "url": "https://github.com/quarkusio/quarkus/commit/ce3d644fe84ec045e867b5df88bc61411cdad16a", "message": "Fix Hibernate with Panache update documentation", "committedDate": "2020-03-31T10:05:49Z", "type": "commit"}, {"oid": "ce3d644fe84ec045e867b5df88bc61411cdad16a", "url": "https://github.com/quarkusio/quarkus/commit/ce3d644fe84ec045e867b5df88bc61411cdad16a", "message": "Fix Hibernate with Panache update documentation", "committedDate": "2020-03-31T10:05:49Z", "type": "forcePushed"}]}