{"pr_number": 8934, "pr_title": "Speed up Liquibase startup", "pr_createdAt": "2020-04-29T04:27:05Z", "pr_url": "https://github.com/quarkusio/quarkus/pull/8934", "timeline": [{"oid": "08797b4a27052fec96536bd57fd53d366a37a2a0", "url": "https://github.com/quarkusio/quarkus/commit/08797b4a27052fec96536bd57fd53d366a37a2a0", "message": "Speed up Liquibase startup", "committedDate": "2020-04-29T04:50:10Z", "type": "forcePushed"}, {"oid": "dbea372e749bf6c55043fe02dc85c66f958a0996", "url": "https://github.com/quarkusio/quarkus/commit/dbea372e749bf6c55043fe02dc85c66f958a0996", "message": "Speed up Liquibase startup", "committedDate": "2020-04-29T06:07:13Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzEyMjMyNQ==", "url": "https://github.com/quarkusio/quarkus/pull/8934#discussion_r417122325", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    <id>extract-liqibase-for-indexing</id>\n          \n          \n            \n                                    <id>extract-liquibase-for-indexing</id>", "author": "gsmet", "createdAt": "2020-04-29T07:38:49Z", "path": "extensions/liquibase/deployment/pom.xml", "diffHunk": "@@ -64,6 +64,72 @@\n                     </annotationProcessorPaths>\n                 </configuration>\n             </plugin>\n+\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-dependency-plugin</artifactId>\n+                <executions>\n+                    <execution>\n+                        <id>extract-liqibase-for-indexing</id>", "originalCommit": "dbea372e749bf6c55043fe02dc85c66f958a0996", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzEyMjYwNA==", "url": "https://github.com/quarkusio/quarkus/pull/8934#discussion_r417122604", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    <id>copy-liqibase-index</id>\n          \n          \n            \n                                    <id>copy-liquibase-index</id>", "author": "gsmet", "createdAt": "2020-04-29T07:39:22Z", "path": "extensions/liquibase/deployment/pom.xml", "diffHunk": "@@ -64,6 +64,72 @@\n                     </annotationProcessorPaths>\n                 </configuration>\n             </plugin>\n+\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-dependency-plugin</artifactId>\n+                <executions>\n+                    <execution>\n+                        <id>extract-liqibase-for-indexing</id>\n+                        <phase>generate-sources</phase>\n+                        <goals>\n+                            <goal>unpack-dependencies</goal>\n+                        </goals>\n+                        <configuration>\n+                            <includeGroupIds>org.liquibase</includeGroupIds>\n+                            <outputDirectory>${project.build.directory}/liquibase-extracted</outputDirectory>\n+                        </configuration>\n+                    </execution>\n+                </executions>\n+            </plugin>\n+\n+            <plugin>\n+                <groupId>org.jboss.jandex</groupId>\n+                <artifactId>jandex-maven-plugin</artifactId>\n+                <executions>\n+                    <execution>\n+                        <id>make-index</id>\n+                        <goals>\n+                            <goal>jandex</goal>\n+                        </goals>\n+                        <phase>process-sources</phase>\n+                        <configuration>\n+                            <indexName>liquibase.idx</indexName>\n+                            <processDefaultFileSet>false</processDefaultFileSet>\n+                            <fileSets>\n+                                <fileSet>\n+                                    <directory>${project.build.directory}/liquibase-extracted</directory>\n+                                </fileSet>\n+                            </fileSets>\n+                        </configuration>\n+                    </execution>\n+                </executions>\n+            </plugin>\n+\n+            <plugin>\n+                <artifactId>maven-resources-plugin</artifactId>\n+                <executions>\n+                    <execution>\n+                        <id>copy-liqibase-index</id>", "originalCommit": "dbea372e749bf6c55043fe02dc85c66f958a0996", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzEyMzQ2OA==", "url": "https://github.com/quarkusio/quarkus/pull/8934#discussion_r417123468", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        //if we known what DB types are in use we limit them\n          \n          \n            \n                        //if we know what DB types are in use we limit them", "author": "gsmet", "createdAt": "2020-04-29T07:41:06Z", "path": "extensions/liquibase/deployment/src/main/java/io/quarkus/liquibase/LiquibaseProcessor.java", "diffHunk": "@@ -55,11 +74,92 @@\n \n     LiquibaseBuildTimeConfig liquibaseBuildConfig;\n \n+    private static final Map<String, String> KIND_TO_IMPL;\n+\n+    static {\n+        Map<String, String> knownKindsToImpl = new HashMap<>();\n+        knownKindsToImpl.put(DatabaseKind.DERBY, DerbyDatabase.class.getName());\n+        knownKindsToImpl.put(DatabaseKind.H2, H2Database.class.getName());\n+        knownKindsToImpl.put(DatabaseKind.MARIADB, MariaDBDatabase.class.getName());\n+        knownKindsToImpl.put(DatabaseKind.MSSQL, MSSQLDatabase.class.getName());\n+        knownKindsToImpl.put(DatabaseKind.MYSQL, MySQLDatabase.class.getName());\n+        knownKindsToImpl.put(DatabaseKind.POSTGRESQL, PostgresDatabase.class.getName());\n+        KIND_TO_IMPL = Collections.unmodifiableMap(knownKindsToImpl);\n+    }\n+\n     @BuildStep\n     CapabilityBuildItem capability() {\n         return new CapabilityBuildItem(Capabilities.LIQUIBASE);\n     }\n \n+    /**\n+     * The default service loader is super slow\n+     *\n+     * As part of the extension build we index liquibase, then we use this index to find all implementations of services\n+     */\n+    @BuildStep(onlyIfNot = NativeBuild.class)\n+    @Record(STATIC_INIT)\n+    public void fastServiceLoader(LiquibaseRecorder recorder,\n+            List<JdbcDataSourceBuildItem> jdbcDataSourceBuildItems) throws IOException {\n+        DotName liquibaseServiceName = DotName.createSimple(LiquibaseService.class.getName());\n+        try (InputStream in = Thread.currentThread().getContextClassLoader().getResourceAsStream(\"META-INF/liquibase.idx\")) {\n+            IndexReader reader = new IndexReader(in);\n+            Index index = reader.read();\n+            Map<String, List<String>> services = new HashMap<>();\n+            for (Class<?> c : Arrays.asList(liquibase.diff.compare.DatabaseObjectComparator.class,\n+                    liquibase.parser.NamespaceDetails.class,\n+                    liquibase.precondition.Precondition.class,\n+                    liquibase.database.Database.class,\n+                    liquibase.parser.ChangeLogParser.class,\n+                    liquibase.change.Change.class,\n+                    liquibase.snapshot.SnapshotGenerator.class,\n+                    liquibase.changelog.ChangeLogHistoryService.class,\n+                    liquibase.datatype.LiquibaseDataType.class,\n+                    liquibase.executor.Executor.class,\n+                    liquibase.lockservice.LockService.class,\n+                    liquibase.sqlgenerator.SqlGenerator.class,\n+                    liquibase.license.LicenseService.class)) {\n+                List<String> impls = new ArrayList<>();\n+                services.put(c.getName(), impls);\n+                Set<ClassInfo> classes = new HashSet<>();\n+                if (c.isInterface()) {\n+                    classes.addAll(index.getAllKnownImplementors(DotName.createSimple(c.getName())));\n+                } else {\n+                    classes.addAll(index.getAllKnownSubclasses(DotName.createSimple(c.getName())));\n+                }\n+                for (ClassInfo found : classes) {\n+                    if (Modifier.isAbstract(found.flags()) ||\n+                            Modifier.isInterface(found.flags()) ||\n+                            !found.hasNoArgsConstructor() ||\n+                            !Modifier.isPublic(found.flags())) {\n+                        continue;\n+                    }\n+                    AnnotationInstance annotationInstance = found.classAnnotation(liquibaseServiceName);\n+                    if (annotationInstance == null || !annotationInstance.value(\"skip\").asBoolean()) {\n+                        impls.add(found.name().toString());\n+                    }\n+                }\n+            }\n+            //if we known what DB types are in use we limit them", "originalCommit": "dbea372e749bf6c55043fe02dc85c66f958a0996", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzEzNDYwOQ==", "url": "https://github.com/quarkusio/quarkus/pull/8934#discussion_r417134609", "bodyText": "liquibase", "author": "fbricon", "createdAt": "2020-04-29T08:01:47Z", "path": "extensions/liquibase/runtime/src/main/java/io/quarkus/liquibase/runtime/LiquibaseRecorder.java", "diffHunk": "@@ -100,4 +107,28 @@ private void validate(BeanContainer container, AnnotationLiteral<? extends Annot\n             liquibase.validate();\n         }\n     }\n+\n+    public void setJvmServiceImplementations(Map<String, List<String>> services) {\n+        ServiceLocator.setInstance(new ServiceLocator() {\n+\n+            @Override\n+            public <T> Class<? extends T>[] findClasses(Class<T> requiredInterface) throws ServiceNotFoundException {\n+                List<String> found = services.get(requiredInterface.getName());\n+                if (found == null) {\n+                    log.warnf(\"Failed to find pre-indexed service %s, falling back to slow classpath scanning\",\n+                            requiredInterface);\n+                    return super.findClasses(requiredInterface);\n+                }\n+                List<Class<? extends T>> ret = new ArrayList<>();\n+                for (String i : found) {\n+                    try {\n+                        ret.add((Class<? extends T>) Class.forName(i, false, Thread.currentThread().getContextClassLoader()));\n+                    } catch (ClassNotFoundException e) {\n+                        log.error(\"Failed to load liqibase service\", e);", "originalCommit": "dbea372e749bf6c55043fe02dc85c66f958a0996", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzE1MTU3OQ==", "url": "https://github.com/quarkusio/quarkus/pull/8934#discussion_r417151579", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    log.error(\"Failed to load liqibase service\", e);\n          \n          \n            \n                                    log.error(\"Failed to load Liquibase service\", e);", "author": "gsmet", "createdAt": "2020-04-29T08:33:37Z", "path": "extensions/liquibase/runtime/src/main/java/io/quarkus/liquibase/runtime/LiquibaseRecorder.java", "diffHunk": "@@ -100,4 +107,28 @@ private void validate(BeanContainer container, AnnotationLiteral<? extends Annot\n             liquibase.validate();\n         }\n     }\n+\n+    public void setJvmServiceImplementations(Map<String, List<String>> services) {\n+        ServiceLocator.setInstance(new ServiceLocator() {\n+\n+            @Override\n+            public <T> Class<? extends T>[] findClasses(Class<T> requiredInterface) throws ServiceNotFoundException {\n+                List<String> found = services.get(requiredInterface.getName());\n+                if (found == null) {\n+                    log.warnf(\"Failed to find pre-indexed service %s, falling back to slow classpath scanning\",\n+                            requiredInterface);\n+                    return super.findClasses(requiredInterface);\n+                }\n+                List<Class<? extends T>> ret = new ArrayList<>();\n+                for (String i : found) {\n+                    try {\n+                        ret.add((Class<? extends T>) Class.forName(i, false, Thread.currentThread().getContextClassLoader()));\n+                    } catch (ClassNotFoundException e) {\n+                        log.error(\"Failed to load liqibase service\", e);", "originalCommit": "dbea372e749bf6c55043fe02dc85c66f958a0996", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "f31622ffb9e152dcb6e332eaa93eb5dcf71da7ed", "url": "https://github.com/quarkusio/quarkus/commit/f31622ffb9e152dcb6e332eaa93eb5dcf71da7ed", "message": "Speed up Liquibase startup", "committedDate": "2020-04-29T08:34:23Z", "type": "commit"}, {"oid": "f31622ffb9e152dcb6e332eaa93eb5dcf71da7ed", "url": "https://github.com/quarkusio/quarkus/commit/f31622ffb9e152dcb6e332eaa93eb5dcf71da7ed", "message": "Speed up Liquibase startup", "committedDate": "2020-04-29T08:34:23Z", "type": "forcePushed"}]}