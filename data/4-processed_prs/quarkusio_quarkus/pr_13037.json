{"pr_number": 13037, "pr_title": "Support micrometer StatsD meter registry", "pr_createdAt": "2020-10-30T18:34:19Z", "pr_url": "https://github.com/quarkusio/quarkus/pull/13037", "timeline": [{"oid": "57fd7c690a17ff431d12548a47f1358717462faa", "url": "https://github.com/quarkusio/quarkus/commit/57fd7c690a17ff431d12548a47f1358717462faa", "message": "General IT for meter registry startup", "committedDate": "2020-10-30T19:38:37Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM0NTg2MA==", "url": "https://github.com/quarkusio/quarkus/pull/13037#discussion_r515345860", "bodyText": "This class can extend NativeMeterRegistriesTest?", "author": "machi1990", "createdAt": "2020-10-30T19:56:19Z", "path": "integration-tests/micrometer-native/src/test/java/io/quarkus/it/micrometer/native_mode/NativeMeterRegistriesIT.java", "diffHunk": "@@ -0,0 +1,36 @@\n+package io.quarkus.it.micrometer.native_mode;\n+\n+import static io.restassured.RestAssured.given;\n+\n+import java.util.List;\n+\n+import org.hamcrest.MatcherAssert;\n+import org.hamcrest.Matchers;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+\n+import io.quarkus.test.junit.NativeImageTest;\n+import io.restassured.response.Response;\n+\n+@NativeImageTest\n+class NativeMeterRegistriesIT {", "originalCommit": "57fd7c690a17ff431d12548a47f1358717462faa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQzNTc0MA==", "url": "https://github.com/quarkusio/quarkus/pull/13037#discussion_r515435740", "bodyText": "It can, sure, but as the results are different in native mode vs. not, it isn't running the same test.\nSince there is a general expectation that one will extend the other, I've put that back, but I've also added an @OverRide annotation to hopefully call more attention to the fact that the native mode test is not the same.", "author": "ebullient", "createdAt": "2020-10-31T00:52:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM0NTg2MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM0NjAzNA==", "url": "https://github.com/quarkusio/quarkus/pull/13037#discussion_r515346034", "bodyText": "wildcard imports are not used throughtout the codebase.", "author": "machi1990", "createdAt": "2020-10-30T19:56:44Z", "path": "integration-tests/micrometer-native/src/main/java/io/quarkus/it/micrometer/native_mode/MessageResource.java", "diffHunk": "@@ -0,0 +1,40 @@\n+package io.quarkus.it.micrometer.native_mode;\n+\n+import java.lang.management.ManagementFactory;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Set;\n+\n+import javax.management.*;", "originalCommit": "57fd7c690a17ff431d12548a47f1358717462faa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQzMjY4OQ==", "url": "https://github.com/quarkusio/quarkus/pull/13037#discussion_r515432689", "bodyText": "It was also extraneous. ;) I removed it.", "author": "ebullient", "createdAt": "2020-10-31T00:29:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM0NjAzNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQxOTM1Ng==", "url": "https://github.com/quarkusio/quarkus/pull/13037#discussion_r515419356", "bodyText": "This one doesn't seem to be used?", "author": "gsmet", "createdAt": "2020-10-30T23:12:02Z", "path": "integration-tests/micrometer-native/src/main/java/io/quarkus/it/micrometer/native_mode/MessageResource.java", "diffHunk": "@@ -0,0 +1,40 @@\n+package io.quarkus.it.micrometer.native_mode;\n+\n+import java.lang.management.ManagementFactory;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Set;\n+\n+import javax.management.*;\n+\n+import io.micrometer.core.instrument.MeterRegistry;\n+import io.micrometer.core.instrument.composite.CompositeMeterRegistry;\n+import io.quarkus.vertx.web.Route;\n+import io.quarkus.vertx.web.RouteBase;\n+import io.vertx.core.http.HttpMethod;\n+\n+@RouteBase(path = \"/message\")\n+public class MessageResource {\n+\n+    private final MeterRegistry registry;\n+    private final MBeanServer mBeanServer = ManagementFactory.getPlatformMBeanServer();", "originalCommit": "57fd7c690a17ff431d12548a47f1358717462faa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQzMTg1MQ==", "url": "https://github.com/quarkusio/quarkus/pull/13037#discussion_r515431851", "bodyText": "you're right. will remove.", "author": "ebullient", "createdAt": "2020-10-31T00:23:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQxOTM1Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQxOTQ5MQ==", "url": "https://github.com/quarkusio/quarkus/pull/13037#discussion_r515419491", "bodyText": "What is the reason why we don't support native mode for all these exporters?", "author": "gsmet", "createdAt": "2020-10-30T23:12:49Z", "path": "extensions/micrometer/deployment/src/main/java/io/quarkus/micrometer/deployment/export/StatsdRegistryProcessor.java", "diffHunk": "@@ -0,0 +1,55 @@\n+package io.quarkus.micrometer.deployment.export;\n+\n+import java.util.function.BooleanSupplier;\n+\n+import org.jboss.logging.Logger;\n+\n+import io.quarkus.arc.deployment.AdditionalBeanBuildItem;\n+import io.quarkus.deployment.annotations.BuildProducer;\n+import io.quarkus.deployment.annotations.BuildStep;\n+import io.quarkus.deployment.pkg.steps.NativeBuild;\n+import io.quarkus.micrometer.deployment.MicrometerRegistryProviderBuildItem;\n+import io.quarkus.micrometer.runtime.MicrometerRecorder;\n+import io.quarkus.micrometer.runtime.config.MicrometerConfig;\n+import io.quarkus.micrometer.runtime.export.StatsdMeterRegistryProvider;\n+\n+/**\n+ * Add support for the StatsD Meter Registry. Note that the registry may not\n+ * be available at deployment time for some projects: Avoid direct class\n+ * references.\n+ */\n+public class StatsdRegistryProcessor {\n+    private static final Logger log = Logger.getLogger(StatsdRegistryProcessor.class);\n+\n+    static final String REGISTRY_CLASS_NAME = \"io.micrometer.statsd.StatsdMeterRegistry\";\n+    static final Class<?> REGISTRY_CLASS = MicrometerRecorder.getClassForName(REGISTRY_CLASS_NAME);\n+\n+    public static class StatsdRegistryEnabled implements BooleanSupplier {\n+        MicrometerConfig mConfig;\n+\n+        @Override\n+        public boolean getAsBoolean() {\n+            return REGISTRY_CLASS != null && mConfig.checkRegistryEnabledWithDefault(mConfig.export.statsd);\n+        }\n+    }\n+\n+    @BuildStep(onlyIf = { NativeBuild.class, StatsdRegistryEnabled.class })\n+    MicrometerRegistryProviderBuildItem nativeModeNotSupported() {\n+        log.info(\"The StatsD meter registry does not support running in native mode.\");", "originalCommit": "57fd7c690a17ff431d12548a47f1358717462faa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQzMjEzOQ==", "url": "https://github.com/quarkusio/quarkus/pull/13037#discussion_r515432139", "bodyText": "Because there is work to do in the upstreams to sort out why they don't work (dependencies, transport requirements, low-level protocol choices). Micrometer core and Prometheus work well in native mode, but some of these other (optional) registries have lower level dependencies that we have to work through.", "author": "ebullient", "createdAt": "2020-10-31T00:25:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQxOTQ5MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQzNDA2Nw==", "url": "https://github.com/quarkusio/quarkus/pull/13037#discussion_r515434067", "bodyText": "e.g. #11923 (comment) -- There are options i want to consider w/ micrometer team", "author": "ebullient", "createdAt": "2020-10-31T00:39:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQxOTQ5MQ=="}], "type": "inlineReview"}, {"oid": "677e83a6ece267318ec1b8ff589a1c086ea949e0", "url": "https://github.com/quarkusio/quarkus/commit/677e83a6ece267318ec1b8ff589a1c086ea949e0", "message": "General IT for meter registry startup", "committedDate": "2020-10-31T01:03:09Z", "type": "forcePushed"}, {"oid": "f2795823de60424a725bdb125366005c5ec807bf", "url": "https://github.com/quarkusio/quarkus/commit/f2795823de60424a725bdb125366005c5ec807bf", "message": "Support StatsD micrometer meter registry", "committedDate": "2020-11-01T17:49:46Z", "type": "commit"}, {"oid": "d7df387070ee079eb6b3ac809d31fcb31658c9c7", "url": "https://github.com/quarkusio/quarkus/commit/d7df387070ee079eb6b3ac809d31fcb31658c9c7", "message": "General IT for meter registry startup", "committedDate": "2020-11-01T17:49:46Z", "type": "commit"}, {"oid": "d7df387070ee079eb6b3ac809d31fcb31658c9c7", "url": "https://github.com/quarkusio/quarkus/commit/d7df387070ee079eb6b3ac809d31fcb31658c9c7", "message": "General IT for meter registry startup", "committedDate": "2020-11-01T17:49:46Z", "type": "forcePushed"}]}