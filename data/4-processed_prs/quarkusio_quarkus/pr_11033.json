{"pr_number": 11033, "pr_title": "Updating the GraphQL Guide with latest SmallRye features", "pr_createdAt": "2020-07-28T13:49:51Z", "pr_url": "https://github.com/quarkusio/quarkus/pull/11033", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTYzMDcyMA==", "url": "https://github.com/quarkusio/quarkus/pull/11033#discussion_r461630720", "bodyText": "I would have called the class GraphqlContext to be a bit more specific but I believe that ship has sailed :).", "author": "gsmet", "createdAt": "2020-07-28T14:34:53Z", "path": "docs/src/main/asciidoc/microprofile-graphql.adoc", "diffHunk": "@@ -631,6 +631,159 @@ query heroWithSurnames {\n }\n ----\n \n+== Context\n+\n+You can get information about the GraphQL request anywhere in your code, using this experimental, SmallRye specific feature:\n+\n+[source,java]\n+----\n+@Inject\n+Context context;", "originalCommit": "3394ca5c749a743662777decdf4ac2e2b2407d67", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTYzNDE5NQ==", "url": "https://github.com/quarkusio/quarkus/pull/11033#discussion_r461634195", "bodyText": "Yea, none of the GraphQL Objects start with GraphQLXxxxx, so we kept it consistent.", "author": "phillip-kruger", "createdAt": "2020-07-28T14:39:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTYzMDcyMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTYzMTQ2NA==", "url": "https://github.com/quarkusio/quarkus/pull/11033#discussion_r461631464", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            or to map complex object, that would typically create a `Type` or `Input` in GraphQL, to a existing scalar.\n          \n          \n            \n            or to map complex object, that would typically create a `Type` or `Input` in GraphQL, to an existing scalar.", "author": "gsmet", "createdAt": "2020-07-28T14:35:44Z", "path": "docs/src/main/asciidoc/microprofile-graphql.adoc", "diffHunk": "@@ -631,6 +631,159 @@ query heroWithSurnames {\n }\n ----\n \n+== Context\n+\n+You can get information about the GraphQL request anywhere in your code, using this experimental, SmallRye specific feature:\n+\n+[source,java]\n+----\n+@Inject\n+Context context;\n+----\n+\n+The context object allows you to get:\n+\n+- the original request (Query/Mutation)\n+- the arguments\n+- the path\n+- the selected fields\n+- any variables\n+\n+This allows you to optimize the downstream queries to the datastore.\n+\n+See the https://javadoc.io/doc/io.smallrye/smallrye-graphql-api/latest/io/smallrye/graphql/api/Context.html[JavaDoc] for more details.\n+\n+=== GraphQL-Java\n+\n+This context object also allows you to fall down to the underlying https://www.graphql-java.com/[graphql-java] features by using the leaky abstraction:\n+\n+[source,java]\n+----\n+DataFetchingEnvironment dfe = context.unwrap(DataFetchingEnvironment.class);\n+----\n+\n+You can also get access to the underlying `graphql-java` during schema generation, to add your own features directly:\n+\n+[source,java]\n+----\n+public GraphQLSchema.Builder addMyOwnEnum(@Observes GraphQLSchema.Builder builder) {\n+\n+    // Here add your own features directly, example adding an Enum\n+    GraphQLEnumType myOwnEnum = GraphQLEnumType.newEnum()\n+            .name(\"SomeEnum\")\n+            .description(\"Adding some enum type\")\n+            .value(\"value1\")\n+            .value(\"value2\").build();\n+\n+    return builder.additionalType(myOwnEnum);\n+}\n+----\n+\n+By using the `@Observer` you can add anything to the Schema builder. \n+\n+== Map to Scalar\n+\n+Another SmallRye specific experimental feature, allows you to map an existing scalar (that is mapped by the implementation to a certain Java type) to another type,\n+or to map complex object, that would typically create a `Type` or `Input` in GraphQL, to a existing scalar.", "originalCommit": "3394ca5c749a743662777decdf4ac2e2b2407d67", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTYzMTc4Mw==", "url": "https://github.com/quarkusio/quarkus/pull/11033#discussion_r461631783", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Above will map the `Long` java type to an `Int` Scalar type, rather then the https://download.eclipse.org/microprofile/microprofile-graphql-1.0/microprofile-graphql.html#scalars[default] `BigInteger`.\n          \n          \n            \n            Above will map the `Long` java type to an `Int` Scalar type, rather than the https://download.eclipse.org/microprofile/microprofile-graphql-1.0/microprofile-graphql.html#scalars[default] `BigInteger`.", "author": "gsmet", "createdAt": "2020-07-28T14:36:07Z", "path": "docs/src/main/asciidoc/microprofile-graphql.adoc", "diffHunk": "@@ -631,6 +631,159 @@ query heroWithSurnames {\n }\n ----\n \n+== Context\n+\n+You can get information about the GraphQL request anywhere in your code, using this experimental, SmallRye specific feature:\n+\n+[source,java]\n+----\n+@Inject\n+Context context;\n+----\n+\n+The context object allows you to get:\n+\n+- the original request (Query/Mutation)\n+- the arguments\n+- the path\n+- the selected fields\n+- any variables\n+\n+This allows you to optimize the downstream queries to the datastore.\n+\n+See the https://javadoc.io/doc/io.smallrye/smallrye-graphql-api/latest/io/smallrye/graphql/api/Context.html[JavaDoc] for more details.\n+\n+=== GraphQL-Java\n+\n+This context object also allows you to fall down to the underlying https://www.graphql-java.com/[graphql-java] features by using the leaky abstraction:\n+\n+[source,java]\n+----\n+DataFetchingEnvironment dfe = context.unwrap(DataFetchingEnvironment.class);\n+----\n+\n+You can also get access to the underlying `graphql-java` during schema generation, to add your own features directly:\n+\n+[source,java]\n+----\n+public GraphQLSchema.Builder addMyOwnEnum(@Observes GraphQLSchema.Builder builder) {\n+\n+    // Here add your own features directly, example adding an Enum\n+    GraphQLEnumType myOwnEnum = GraphQLEnumType.newEnum()\n+            .name(\"SomeEnum\")\n+            .description(\"Adding some enum type\")\n+            .value(\"value1\")\n+            .value(\"value2\").build();\n+\n+    return builder.additionalType(myOwnEnum);\n+}\n+----\n+\n+By using the `@Observer` you can add anything to the Schema builder. \n+\n+== Map to Scalar\n+\n+Another SmallRye specific experimental feature, allows you to map an existing scalar (that is mapped by the implementation to a certain Java type) to another type,\n+or to map complex object, that would typically create a `Type` or `Input` in GraphQL, to a existing scalar.\n+\n+=== Mapping an existing Scalar to another type:\n+\n+[source,java]\n+----\n+public class Movie {\n+\n+    @ToScalar(Scalar.Int.class)\n+    Long idLongThatShouldChangeToInt;\n+    \n+    // ....\n+}\n+----\n+\n+Above will map the `Long` java type to an `Int` Scalar type, rather then the https://download.eclipse.org/microprofile/microprofile-graphql-1.0/microprofile-graphql.html#scalars[default] `BigInteger`.", "originalCommit": "3394ca5c749a743662777decdf4ac2e2b2407d67", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTYzMTkyMA==", "url": "https://github.com/quarkusio/quarkus/pull/11033#discussion_r461631920", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            === Mapping an complex object to a Scalar type:\n          \n          \n            \n            === Mapping a complex object to a Scalar type:", "author": "gsmet", "createdAt": "2020-07-28T14:36:17Z", "path": "docs/src/main/asciidoc/microprofile-graphql.adoc", "diffHunk": "@@ -631,6 +631,159 @@ query heroWithSurnames {\n }\n ----\n \n+== Context\n+\n+You can get information about the GraphQL request anywhere in your code, using this experimental, SmallRye specific feature:\n+\n+[source,java]\n+----\n+@Inject\n+Context context;\n+----\n+\n+The context object allows you to get:\n+\n+- the original request (Query/Mutation)\n+- the arguments\n+- the path\n+- the selected fields\n+- any variables\n+\n+This allows you to optimize the downstream queries to the datastore.\n+\n+See the https://javadoc.io/doc/io.smallrye/smallrye-graphql-api/latest/io/smallrye/graphql/api/Context.html[JavaDoc] for more details.\n+\n+=== GraphQL-Java\n+\n+This context object also allows you to fall down to the underlying https://www.graphql-java.com/[graphql-java] features by using the leaky abstraction:\n+\n+[source,java]\n+----\n+DataFetchingEnvironment dfe = context.unwrap(DataFetchingEnvironment.class);\n+----\n+\n+You can also get access to the underlying `graphql-java` during schema generation, to add your own features directly:\n+\n+[source,java]\n+----\n+public GraphQLSchema.Builder addMyOwnEnum(@Observes GraphQLSchema.Builder builder) {\n+\n+    // Here add your own features directly, example adding an Enum\n+    GraphQLEnumType myOwnEnum = GraphQLEnumType.newEnum()\n+            .name(\"SomeEnum\")\n+            .description(\"Adding some enum type\")\n+            .value(\"value1\")\n+            .value(\"value2\").build();\n+\n+    return builder.additionalType(myOwnEnum);\n+}\n+----\n+\n+By using the `@Observer` you can add anything to the Schema builder. \n+\n+== Map to Scalar\n+\n+Another SmallRye specific experimental feature, allows you to map an existing scalar (that is mapped by the implementation to a certain Java type) to another type,\n+or to map complex object, that would typically create a `Type` or `Input` in GraphQL, to a existing scalar.\n+\n+=== Mapping an existing Scalar to another type:\n+\n+[source,java]\n+----\n+public class Movie {\n+\n+    @ToScalar(Scalar.Int.class)\n+    Long idLongThatShouldChangeToInt;\n+    \n+    // ....\n+}\n+----\n+\n+Above will map the `Long` java type to an `Int` Scalar type, rather then the https://download.eclipse.org/microprofile/microprofile-graphql-1.0/microprofile-graphql.html#scalars[default] `BigInteger`.\n+\n+=== Mapping an complex object to a Scalar type:", "originalCommit": "3394ca5c749a743662777decdf4ac2e2b2407d67", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTYzMjQ4NA==", "url": "https://github.com/quarkusio/quarkus/pull/11033#discussion_r461632484", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            You can add an error code on the error output in the GraphQL response by using the (SmalRye specific) `@ErrorCode`:\n          \n          \n            \n            You can add an error code on the error output in the GraphQL response by using the (SmallRye specific) `@ErrorCode`:", "author": "gsmet", "createdAt": "2020-07-28T14:36:58Z", "path": "docs/src/main/asciidoc/microprofile-graphql.adoc", "diffHunk": "@@ -631,6 +631,159 @@ query heroWithSurnames {\n }\n ----\n \n+== Context\n+\n+You can get information about the GraphQL request anywhere in your code, using this experimental, SmallRye specific feature:\n+\n+[source,java]\n+----\n+@Inject\n+Context context;\n+----\n+\n+The context object allows you to get:\n+\n+- the original request (Query/Mutation)\n+- the arguments\n+- the path\n+- the selected fields\n+- any variables\n+\n+This allows you to optimize the downstream queries to the datastore.\n+\n+See the https://javadoc.io/doc/io.smallrye/smallrye-graphql-api/latest/io/smallrye/graphql/api/Context.html[JavaDoc] for more details.\n+\n+=== GraphQL-Java\n+\n+This context object also allows you to fall down to the underlying https://www.graphql-java.com/[graphql-java] features by using the leaky abstraction:\n+\n+[source,java]\n+----\n+DataFetchingEnvironment dfe = context.unwrap(DataFetchingEnvironment.class);\n+----\n+\n+You can also get access to the underlying `graphql-java` during schema generation, to add your own features directly:\n+\n+[source,java]\n+----\n+public GraphQLSchema.Builder addMyOwnEnum(@Observes GraphQLSchema.Builder builder) {\n+\n+    // Here add your own features directly, example adding an Enum\n+    GraphQLEnumType myOwnEnum = GraphQLEnumType.newEnum()\n+            .name(\"SomeEnum\")\n+            .description(\"Adding some enum type\")\n+            .value(\"value1\")\n+            .value(\"value2\").build();\n+\n+    return builder.additionalType(myOwnEnum);\n+}\n+----\n+\n+By using the `@Observer` you can add anything to the Schema builder. \n+\n+== Map to Scalar\n+\n+Another SmallRye specific experimental feature, allows you to map an existing scalar (that is mapped by the implementation to a certain Java type) to another type,\n+or to map complex object, that would typically create a `Type` or `Input` in GraphQL, to a existing scalar.\n+\n+=== Mapping an existing Scalar to another type:\n+\n+[source,java]\n+----\n+public class Movie {\n+\n+    @ToScalar(Scalar.Int.class)\n+    Long idLongThatShouldChangeToInt;\n+    \n+    // ....\n+}\n+----\n+\n+Above will map the `Long` java type to an `Int` Scalar type, rather then the https://download.eclipse.org/microprofile/microprofile-graphql-1.0/microprofile-graphql.html#scalars[default] `BigInteger`.\n+\n+=== Mapping an complex object to a Scalar type:\n+\n+[source,java]\n+----\n+public class Person {\n+\n+    @ToScalar(Scalar.String.class)\n+    Phone phone;\n+    \n+    // ....\n+}\n+----\n+\n+This will, rather then creating a `Type` or `Input` in GraphQL, map to a String scalar.\n+\n+To be able to do the above, the `Phone` object needs to have a contructor that takes a String (or `Int` / `Date` / etc.), \n+or have a setter method for the String  (or `Int` / `Date` / etc.),\n+or have a `fromString` (or `fromInt` / `fromDate` - depending on the Scalar type) static method.\n+\n+For example:\n+\n+[source,java]\n+----\n+public class Phone {\n+\n+    private String number;\n+    \n+    // Getters and setters....\n+    \n+    public static Phone fromString(String number) {\n+        Phone phone = new Phone();\n+        phone.setNumber(number);\n+        return phone;\n+    }\n+}\n+----\n+\n+See more about the `@ToScalar` feature in the https://javadoc.io/static/io.smallrye/smallrye-graphql-api/1.0.6/index.html?io/smallrye/graphql/api/ToScalar.html[JavaDoc].\n+\n+== Error code\n+\n+You can add an error code on the error output in the GraphQL response by using the (SmalRye specific) `@ErrorCode`:", "originalCommit": "3394ca5c749a743662777decdf4ac2e2b2407d67", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjA2NDk2OA==", "url": "https://github.com/quarkusio/quarkus/pull/11033#discussion_r462064968", "bodyText": "then -> than", "author": "jmartisk", "createdAt": "2020-07-29T06:23:10Z", "path": "docs/src/main/asciidoc/microprofile-graphql.adoc", "diffHunk": "@@ -631,6 +631,159 @@ query heroWithSurnames {\n }\n ----\n \n+== Context\n+\n+You can get information about the GraphQL request anywhere in your code, using this experimental, SmallRye specific feature:\n+\n+[source,java]\n+----\n+@Inject\n+Context context;\n+----\n+\n+The context object allows you to get:\n+\n+- the original request (Query/Mutation)\n+- the arguments\n+- the path\n+- the selected fields\n+- any variables\n+\n+This allows you to optimize the downstream queries to the datastore.\n+\n+See the https://javadoc.io/doc/io.smallrye/smallrye-graphql-api/latest/io/smallrye/graphql/api/Context.html[JavaDoc] for more details.\n+\n+=== GraphQL-Java\n+\n+This context object also allows you to fall down to the underlying https://www.graphql-java.com/[graphql-java] features by using the leaky abstraction:\n+\n+[source,java]\n+----\n+DataFetchingEnvironment dfe = context.unwrap(DataFetchingEnvironment.class);\n+----\n+\n+You can also get access to the underlying `graphql-java` during schema generation, to add your own features directly:\n+\n+[source,java]\n+----\n+public GraphQLSchema.Builder addMyOwnEnum(@Observes GraphQLSchema.Builder builder) {\n+\n+    // Here add your own features directly, example adding an Enum\n+    GraphQLEnumType myOwnEnum = GraphQLEnumType.newEnum()\n+            .name(\"SomeEnum\")\n+            .description(\"Adding some enum type\")\n+            .value(\"value1\")\n+            .value(\"value2\").build();\n+\n+    return builder.additionalType(myOwnEnum);\n+}\n+----\n+\n+By using the `@Observer` you can add anything to the Schema builder. \n+\n+== Map to Scalar\n+\n+Another SmallRye specific experimental feature, allows you to map an existing scalar (that is mapped by the implementation to a certain Java type) to another type,\n+or to map complex object, that would typically create a `Type` or `Input` in GraphQL, to an existing scalar.\n+\n+=== Mapping an existing Scalar to another type:\n+\n+[source,java]\n+----\n+public class Movie {\n+\n+    @ToScalar(Scalar.Int.class)\n+    Long idLongThatShouldChangeToInt;\n+    \n+    // ....\n+}\n+----\n+\n+Above will map the `Long` java type to an `Int` Scalar type, rather than the https://download.eclipse.org/microprofile/microprofile-graphql-1.0/microprofile-graphql.html#scalars[default] `BigInteger`.\n+\n+=== Mapping a complex object to a Scalar type:\n+\n+[source,java]\n+----\n+public class Person {\n+\n+    @ToScalar(Scalar.String.class)\n+    Phone phone;\n+    \n+    // ....\n+}\n+----\n+\n+This will, rather then creating a `Type` or `Input` in GraphQL, map to a String scalar.", "originalCommit": "6deb4f0d6f5698d08ff16d1bc35cd7a676ad5c77", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjA3OTQ2OQ==", "url": "https://github.com/quarkusio/quarkus/pull/11033#discussion_r462079469", "bodyText": "contructor -> constructor", "author": "jmartisk", "createdAt": "2020-07-29T06:57:30Z", "path": "docs/src/main/asciidoc/microprofile-graphql.adoc", "diffHunk": "@@ -631,6 +631,159 @@ query heroWithSurnames {\n }\n ----\n \n+== Context\n+\n+You can get information about the GraphQL request anywhere in your code, using this experimental, SmallRye specific feature:\n+\n+[source,java]\n+----\n+@Inject\n+Context context;\n+----\n+\n+The context object allows you to get:\n+\n+- the original request (Query/Mutation)\n+- the arguments\n+- the path\n+- the selected fields\n+- any variables\n+\n+This allows you to optimize the downstream queries to the datastore.\n+\n+See the https://javadoc.io/doc/io.smallrye/smallrye-graphql-api/latest/io/smallrye/graphql/api/Context.html[JavaDoc] for more details.\n+\n+=== GraphQL-Java\n+\n+This context object also allows you to fall down to the underlying https://www.graphql-java.com/[graphql-java] features by using the leaky abstraction:\n+\n+[source,java]\n+----\n+DataFetchingEnvironment dfe = context.unwrap(DataFetchingEnvironment.class);\n+----\n+\n+You can also get access to the underlying `graphql-java` during schema generation, to add your own features directly:\n+\n+[source,java]\n+----\n+public GraphQLSchema.Builder addMyOwnEnum(@Observes GraphQLSchema.Builder builder) {\n+\n+    // Here add your own features directly, example adding an Enum\n+    GraphQLEnumType myOwnEnum = GraphQLEnumType.newEnum()\n+            .name(\"SomeEnum\")\n+            .description(\"Adding some enum type\")\n+            .value(\"value1\")\n+            .value(\"value2\").build();\n+\n+    return builder.additionalType(myOwnEnum);\n+}\n+----\n+\n+By using the `@Observer` you can add anything to the Schema builder. \n+\n+== Map to Scalar\n+\n+Another SmallRye specific experimental feature, allows you to map an existing scalar (that is mapped by the implementation to a certain Java type) to another type,\n+or to map complex object, that would typically create a `Type` or `Input` in GraphQL, to an existing scalar.\n+\n+=== Mapping an existing Scalar to another type:\n+\n+[source,java]\n+----\n+public class Movie {\n+\n+    @ToScalar(Scalar.Int.class)\n+    Long idLongThatShouldChangeToInt;\n+    \n+    // ....\n+}\n+----\n+\n+Above will map the `Long` java type to an `Int` Scalar type, rather than the https://download.eclipse.org/microprofile/microprofile-graphql-1.0/microprofile-graphql.html#scalars[default] `BigInteger`.\n+\n+=== Mapping a complex object to a Scalar type:\n+\n+[source,java]\n+----\n+public class Person {\n+\n+    @ToScalar(Scalar.String.class)\n+    Phone phone;\n+    \n+    // ....\n+}\n+----\n+\n+This will, rather then creating a `Type` or `Input` in GraphQL, map to a String scalar.\n+\n+To be able to do the above, the `Phone` object needs to have a contructor that takes a String (or `Int` / `Date` / etc.), ", "originalCommit": "6deb4f0d6f5698d08ff16d1bc35cd7a676ad5c77", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "fc7c348cbc0ea2e1ede46a6eb889ae78a33f979b", "url": "https://github.com/quarkusio/quarkus/commit/fc7c348cbc0ea2e1ede46a6eb889ae78a33f979b", "message": "Updating the GraphQL Guide with latest SmallRye features\n\nSigned-off-by: Phillip Kruger <phillip.kruger@gmail.com>", "committedDate": "2020-07-29T07:02:34Z", "type": "commit"}]}