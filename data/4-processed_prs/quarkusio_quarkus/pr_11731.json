{"pr_number": 11731, "pr_title": "guide for jbang integration", "pr_createdAt": "2020-08-30T05:10:46Z", "pr_url": "https://github.com/quarkusio/quarkus/pull/11731", "timeline": [{"oid": "b618bf2de885b41afc58f4e716284b4100a18fb0", "url": "https://github.com/quarkusio/quarkus/commit/b618bf2de885b41afc58f4e716284b4100a18fb0", "message": "guide for jbang integration", "committedDate": "2020-08-30T05:13:46Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTc1NTU2Nw==", "url": "https://github.com/quarkusio/quarkus/pull/11731#discussion_r479755567", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            This command generates that you can directly run on Linux and OS X, i.e. `./quarkusapp.java` - on Windows you need to use `jbang quarkusapp.java`\n          \n          \n            \n            This command generates a .java file that you can directly run on Linux and OS X, i.e. `./quarkusapp.java` - on Windows you need to use `jbang quarkusapp.java`", "author": "gastaldi", "createdAt": "2020-08-30T11:07:37Z", "path": "docs/src/main/asciidoc/scripting.adoc", "diffHunk": "@@ -0,0 +1,440 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Scripting with Quarkus\n+:extension-status: preview\n+\n+Quarkus provides integration with https://jbang.dev[jbang]] which allows you to write java scripts/applications requiring no maven nor gradle to get running.\n+\n+In this guide, we will see how you can write a REST application using just a singe java file.\n+\n+include::./status-include.adoc[]\n+\n+== Prerequisites\n+\n+To complete this guide, you need:\n+\n+* less than 5 minutes\n+* https://jbang.dev/download[jbang v0.40.3+]\n+* an IDE\n+* GraalVM installed if you want to run in native mode\n+\n+== Solution\n+\n+Normally we would link to a Git repository to clone but in this case there is no additional files than the following:\n+\n+[source,java,subs=attributes+]\n+----\n+//usr/bin/env jbang \"$0\" \"$@\" ; exit $?\n+//DEPS io.quarkus:quarkus-resteasy:999-SNAPSHOT\n+//JAVAC_OPTIONS -parameters\n+//JAVA_OPTIONS -Djava.util.logging.manager=org.jboss.logmanager.LogManager\n+\n+import io.quarkus.runtime.Quarkus;\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+import org.jboss.resteasy.annotations.jaxrs.PathParam;\n+import org.jboss.logging.Logger;\n+\n+@Path(\"/hello\")\n+@ApplicationScoped\n+public class quarkusapp {\n+\n+    @GET\n+    public String sayHello() {\n+        return \"hello\";\n+    }\n+\n+    public static void main(String[] args) {\n+        Quarkus.run(args);\n+    }\n+\n+    @Inject\n+    GreetingService service;\n+\n+    @GET\n+    @Produces(MediaType.TEXT_PLAIN)\n+    @Path(\"/greeting/{name}\")\n+    public String greeting(@PathParam String name) {\n+        return service.greeting(name);\n+    }\n+\n+    @ApplicationScoped\n+    static public class GreetingService {\n+\n+        public String greeting(String name) {\n+            return \"hello \" + name;\n+        }\n+    }\n+}\n+----\n+\n+== Architecture\n+\n+In this guide, we create a straightforward application serving a `hello` endpoint with a single source file, no additional build files like `pom.xml` or `build.gradle` needed. To demonstrate dependency injection, this endpoint uses a `greeting` bean.\n+\n+image::getting-started-architecture.png[alt=Architecture]\n+\n+== Creating the initial file\n+\n+First, we need a java file. jbang lets you create an initial version using:\n+\n+[source,shell,subs=attributes+]\n+----\n+jbang scripting/quarkusapp.java\n+cd scripting\n+----\n+\n+This command generates that you can directly run on Linux and OS X, i.e. `./quarkusapp.java` - on Windows you need to use `jbang quarkusapp.java`", "originalCommit": "b618bf2de885b41afc58f4e716284b4100a18fb0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTc1NTY3OQ==", "url": "https://github.com/quarkusio/quarkus/pull/11731#discussion_r479755679", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Is illustrating how you add dependencies to this script. This ia feature of `jbang`.\n          \n          \n            \n            Is illustrating how you add dependencies to this script. This is a feature of `jbang`.", "author": "gastaldi", "createdAt": "2020-08-30T11:08:35Z", "path": "docs/src/main/asciidoc/scripting.adoc", "diffHunk": "@@ -0,0 +1,440 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Scripting with Quarkus\n+:extension-status: preview\n+\n+Quarkus provides integration with https://jbang.dev[jbang]] which allows you to write java scripts/applications requiring no maven nor gradle to get running.\n+\n+In this guide, we will see how you can write a REST application using just a singe java file.\n+\n+include::./status-include.adoc[]\n+\n+== Prerequisites\n+\n+To complete this guide, you need:\n+\n+* less than 5 minutes\n+* https://jbang.dev/download[jbang v0.40.3+]\n+* an IDE\n+* GraalVM installed if you want to run in native mode\n+\n+== Solution\n+\n+Normally we would link to a Git repository to clone but in this case there is no additional files than the following:\n+\n+[source,java,subs=attributes+]\n+----\n+//usr/bin/env jbang \"$0\" \"$@\" ; exit $?\n+//DEPS io.quarkus:quarkus-resteasy:999-SNAPSHOT\n+//JAVAC_OPTIONS -parameters\n+//JAVA_OPTIONS -Djava.util.logging.manager=org.jboss.logmanager.LogManager\n+\n+import io.quarkus.runtime.Quarkus;\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+import org.jboss.resteasy.annotations.jaxrs.PathParam;\n+import org.jboss.logging.Logger;\n+\n+@Path(\"/hello\")\n+@ApplicationScoped\n+public class quarkusapp {\n+\n+    @GET\n+    public String sayHello() {\n+        return \"hello\";\n+    }\n+\n+    public static void main(String[] args) {\n+        Quarkus.run(args);\n+    }\n+\n+    @Inject\n+    GreetingService service;\n+\n+    @GET\n+    @Produces(MediaType.TEXT_PLAIN)\n+    @Path(\"/greeting/{name}\")\n+    public String greeting(@PathParam String name) {\n+        return service.greeting(name);\n+    }\n+\n+    @ApplicationScoped\n+    static public class GreetingService {\n+\n+        public String greeting(String name) {\n+            return \"hello \" + name;\n+        }\n+    }\n+}\n+----\n+\n+== Architecture\n+\n+In this guide, we create a straightforward application serving a `hello` endpoint with a single source file, no additional build files like `pom.xml` or `build.gradle` needed. To demonstrate dependency injection, this endpoint uses a `greeting` bean.\n+\n+image::getting-started-architecture.png[alt=Architecture]\n+\n+== Creating the initial file\n+\n+First, we need a java file. jbang lets you create an initial version using:\n+\n+[source,shell,subs=attributes+]\n+----\n+jbang scripting/quarkusapp.java\n+cd scripting\n+----\n+\n+This command generates that you can directly run on Linux and OS X, i.e. `./quarkusapp.java` - on Windows you need to use `jbang quarkusapp.java`\n+\n+This initial version will print `Hello World` when run.\n+\n+Once generated, look at the `quarkusapp.java`.\n+\n+You will find at the top a line looking like this:\n+\n+[source,java]\n+----\n+//usr/bin/env jbang \"$0\" \"$@\" ; exit $?\n+----\n+\n+This line is what on Linux and OS X allows you to run it as a script. On Windows this line is ignored.\n+\n+The next line\n+\n+[source,java]\n+----\n+// //DEPS <dependency1> <dependency2>\n+----\n+\n+Is illustrating how you add dependencies to this script. This ia feature of `jbang`.", "originalCommit": "b618bf2de885b41afc58f4e716284b4100a18fb0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTc1NTc4NA==", "url": "https://github.com/quarkusio/quarkus/pull/11731#discussion_r479755784", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            If you add dependenciees while editing you can get jbang to automatically refresh\n          \n          \n            \n            If you add dependencies while editing you can get jbang to automatically refresh", "author": "gastaldi", "createdAt": "2020-08-30T11:09:15Z", "path": "docs/src/main/asciidoc/scripting.adoc", "diffHunk": "@@ -0,0 +1,440 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Scripting with Quarkus\n+:extension-status: preview\n+\n+Quarkus provides integration with https://jbang.dev[jbang]] which allows you to write java scripts/applications requiring no maven nor gradle to get running.\n+\n+In this guide, we will see how you can write a REST application using just a singe java file.\n+\n+include::./status-include.adoc[]\n+\n+== Prerequisites\n+\n+To complete this guide, you need:\n+\n+* less than 5 minutes\n+* https://jbang.dev/download[jbang v0.40.3+]\n+* an IDE\n+* GraalVM installed if you want to run in native mode\n+\n+== Solution\n+\n+Normally we would link to a Git repository to clone but in this case there is no additional files than the following:\n+\n+[source,java,subs=attributes+]\n+----\n+//usr/bin/env jbang \"$0\" \"$@\" ; exit $?\n+//DEPS io.quarkus:quarkus-resteasy:999-SNAPSHOT\n+//JAVAC_OPTIONS -parameters\n+//JAVA_OPTIONS -Djava.util.logging.manager=org.jboss.logmanager.LogManager\n+\n+import io.quarkus.runtime.Quarkus;\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+import org.jboss.resteasy.annotations.jaxrs.PathParam;\n+import org.jboss.logging.Logger;\n+\n+@Path(\"/hello\")\n+@ApplicationScoped\n+public class quarkusapp {\n+\n+    @GET\n+    public String sayHello() {\n+        return \"hello\";\n+    }\n+\n+    public static void main(String[] args) {\n+        Quarkus.run(args);\n+    }\n+\n+    @Inject\n+    GreetingService service;\n+\n+    @GET\n+    @Produces(MediaType.TEXT_PLAIN)\n+    @Path(\"/greeting/{name}\")\n+    public String greeting(@PathParam String name) {\n+        return service.greeting(name);\n+    }\n+\n+    @ApplicationScoped\n+    static public class GreetingService {\n+\n+        public String greeting(String name) {\n+            return \"hello \" + name;\n+        }\n+    }\n+}\n+----\n+\n+== Architecture\n+\n+In this guide, we create a straightforward application serving a `hello` endpoint with a single source file, no additional build files like `pom.xml` or `build.gradle` needed. To demonstrate dependency injection, this endpoint uses a `greeting` bean.\n+\n+image::getting-started-architecture.png[alt=Architecture]\n+\n+== Creating the initial file\n+\n+First, we need a java file. jbang lets you create an initial version using:\n+\n+[source,shell,subs=attributes+]\n+----\n+jbang scripting/quarkusapp.java\n+cd scripting\n+----\n+\n+This command generates that you can directly run on Linux and OS X, i.e. `./quarkusapp.java` - on Windows you need to use `jbang quarkusapp.java`\n+\n+This initial version will print `Hello World` when run.\n+\n+Once generated, look at the `quarkusapp.java`.\n+\n+You will find at the top a line looking like this:\n+\n+[source,java]\n+----\n+//usr/bin/env jbang \"$0\" \"$@\" ; exit $?\n+----\n+\n+This line is what on Linux and OS X allows you to run it as a script. On Windows this line is ignored.\n+\n+The next line\n+\n+[source,java]\n+----\n+// //DEPS <dependency1> <dependency2>\n+----\n+\n+Is illustrating how you add dependencies to this script. This ia feature of `jbang`.\n+\n+Go ahead and update this line to include the `quarkus-resteasy` dependency like so:\n+\n+[source,shell,subs=attributes+]\n+----\n+//DEPS io.quarkus:quarkus-resteasy:{quarkus-version}\n+----\n+\n+Now, run `jbang quarkusapp.java` and you will see `jbang` resolving this dependency and building the jar with help from Quarkus jbang integration.\n+\n+[source,shell,subs=attributes+] \n+----\n+$ jbang quarkusapp.java\n+\u276f jbang quarkusapp.java\n+[jbang] Resolving dependencies...\n+[jbang]     Resolving io.quarkus:quarkus-resteasy:{quarkus-version}...Done\n+[jbang] Dependencies resolved\n+[jbang] Building jar...\n+[jbang] Post build with io.quarkus.launcher.JBangIntegration\n+Aug 30, 2020 5:40:55 AM org.jboss.threads.Version <clinit>\n+INFO: JBoss Threads version 3.1.1.Final\n+Aug 30, 2020 5:40:56 AM io.quarkus.deployment.QuarkusAugmentor run\n+INFO: Quarkus augmentation completed in 722ms\n+Hello World\n+----\n+\n+For now the application does nothing new.\n+\n+[TIP]\n+.How do I edit this file and get content assist ?\n+====\n+As there is nothing but a `.java` file most IDE's does not handle content assist well.\n+To work around that you can run `jbang edit quarkusapp.java` which will print out a directory that will have a temporary project setup you can use in your IDE.\n+\n+On Linux/OSX you can run `<idecommand> `jbang edit quarkusapp.java``.\n+\n+If you add dependenciees while editing you can get jbang to automatically refresh", "originalCommit": "b618bf2de885b41afc58f4e716284b4100a18fb0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTc1NTk0Mg==", "url": "https://github.com/quarkusio/quarkus/pull/11731#discussion_r479755942", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Normally you would add a seperate class, but as we are aiming to have it all in one file you will add a \n          \n          \n            \n            Normally you would add a separate class, but as we are aiming to have it all in one file you will add a", "author": "gastaldi", "createdAt": "2020-08-30T11:10:32Z", "path": "docs/src/main/asciidoc/scripting.adoc", "diffHunk": "@@ -0,0 +1,440 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Scripting with Quarkus\n+:extension-status: preview\n+\n+Quarkus provides integration with https://jbang.dev[jbang]] which allows you to write java scripts/applications requiring no maven nor gradle to get running.\n+\n+In this guide, we will see how you can write a REST application using just a singe java file.\n+\n+include::./status-include.adoc[]\n+\n+== Prerequisites\n+\n+To complete this guide, you need:\n+\n+* less than 5 minutes\n+* https://jbang.dev/download[jbang v0.40.3+]\n+* an IDE\n+* GraalVM installed if you want to run in native mode\n+\n+== Solution\n+\n+Normally we would link to a Git repository to clone but in this case there is no additional files than the following:\n+\n+[source,java,subs=attributes+]\n+----\n+//usr/bin/env jbang \"$0\" \"$@\" ; exit $?\n+//DEPS io.quarkus:quarkus-resteasy:999-SNAPSHOT\n+//JAVAC_OPTIONS -parameters\n+//JAVA_OPTIONS -Djava.util.logging.manager=org.jboss.logmanager.LogManager\n+\n+import io.quarkus.runtime.Quarkus;\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+import org.jboss.resteasy.annotations.jaxrs.PathParam;\n+import org.jboss.logging.Logger;\n+\n+@Path(\"/hello\")\n+@ApplicationScoped\n+public class quarkusapp {\n+\n+    @GET\n+    public String sayHello() {\n+        return \"hello\";\n+    }\n+\n+    public static void main(String[] args) {\n+        Quarkus.run(args);\n+    }\n+\n+    @Inject\n+    GreetingService service;\n+\n+    @GET\n+    @Produces(MediaType.TEXT_PLAIN)\n+    @Path(\"/greeting/{name}\")\n+    public String greeting(@PathParam String name) {\n+        return service.greeting(name);\n+    }\n+\n+    @ApplicationScoped\n+    static public class GreetingService {\n+\n+        public String greeting(String name) {\n+            return \"hello \" + name;\n+        }\n+    }\n+}\n+----\n+\n+== Architecture\n+\n+In this guide, we create a straightforward application serving a `hello` endpoint with a single source file, no additional build files like `pom.xml` or `build.gradle` needed. To demonstrate dependency injection, this endpoint uses a `greeting` bean.\n+\n+image::getting-started-architecture.png[alt=Architecture]\n+\n+== Creating the initial file\n+\n+First, we need a java file. jbang lets you create an initial version using:\n+\n+[source,shell,subs=attributes+]\n+----\n+jbang scripting/quarkusapp.java\n+cd scripting\n+----\n+\n+This command generates that you can directly run on Linux and OS X, i.e. `./quarkusapp.java` - on Windows you need to use `jbang quarkusapp.java`\n+\n+This initial version will print `Hello World` when run.\n+\n+Once generated, look at the `quarkusapp.java`.\n+\n+You will find at the top a line looking like this:\n+\n+[source,java]\n+----\n+//usr/bin/env jbang \"$0\" \"$@\" ; exit $?\n+----\n+\n+This line is what on Linux and OS X allows you to run it as a script. On Windows this line is ignored.\n+\n+The next line\n+\n+[source,java]\n+----\n+// //DEPS <dependency1> <dependency2>\n+----\n+\n+Is illustrating how you add dependencies to this script. This ia feature of `jbang`.\n+\n+Go ahead and update this line to include the `quarkus-resteasy` dependency like so:\n+\n+[source,shell,subs=attributes+]\n+----\n+//DEPS io.quarkus:quarkus-resteasy:{quarkus-version}\n+----\n+\n+Now, run `jbang quarkusapp.java` and you will see `jbang` resolving this dependency and building the jar with help from Quarkus jbang integration.\n+\n+[source,shell,subs=attributes+] \n+----\n+$ jbang quarkusapp.java\n+\u276f jbang quarkusapp.java\n+[jbang] Resolving dependencies...\n+[jbang]     Resolving io.quarkus:quarkus-resteasy:{quarkus-version}...Done\n+[jbang] Dependencies resolved\n+[jbang] Building jar...\n+[jbang] Post build with io.quarkus.launcher.JBangIntegration\n+Aug 30, 2020 5:40:55 AM org.jboss.threads.Version <clinit>\n+INFO: JBoss Threads version 3.1.1.Final\n+Aug 30, 2020 5:40:56 AM io.quarkus.deployment.QuarkusAugmentor run\n+INFO: Quarkus augmentation completed in 722ms\n+Hello World\n+----\n+\n+For now the application does nothing new.\n+\n+[TIP]\n+.How do I edit this file and get content assist ?\n+====\n+As there is nothing but a `.java` file most IDE's does not handle content assist well.\n+To work around that you can run `jbang edit quarkusapp.java` which will print out a directory that will have a temporary project setup you can use in your IDE.\n+\n+On Linux/OSX you can run `<idecommand> `jbang edit quarkusapp.java``.\n+\n+If you add dependenciees while editing you can get jbang to automatically refresh\n+the IDE project using `jbang edit --live=<idecommand> quarkusapp.java`.\n+====\n+\n+\n+=== The JAX-RS resources\n+\n+Now let us replace the class with one that uses Quarkus features.\n+\n+[source,java]\n+----\n+import io.quarkus.runtime.Quarkus;\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+\n+@Path(\"/hello\")\n+@ApplicationScoped\n+public class quarkusapp {\n+\n+    @GET\n+    public String sayHello() {\n+        return \"hello\";\n+    }\n+\n+    public static void main(String[] args) {\n+        Quarkus.run(args);\n+    }\n+}\n+----\n+\n+It's a very simple class with a main method that starts Quarkus with a REST endpoint, returning \"hello\" to requests on \"/hello\".\n+\n+[TIP]\n+.Why is the `main` method there ?\n+====\n+A `main` method is currently needed for the `jbang` integration to work - will be possible to remove in the future.\n+====\n+\n+== Running the application\n+\n+Now when youn run the application you will see Quarkus start up.\n+\n+Use: `jbang quarkusapp.java`:\n+\n+[source,shell,subs=attributes+]\n+----\n+$ jbang quarkusapp.java\n+ jbang quarkusapp.java\n+[jbang] Building jar...\n+[jbang] Post build with io.quarkus.launcher.JBangIntegration\n+Aug 30, 2020 5:49:01 AM org.jboss.threads.Version <clinit>\n+INFO: JBoss Threads version 3.1.1.Final\n+Aug 30, 2020 5:49:02 AM io.quarkus.deployment.QuarkusAugmentor run\n+INFO: Quarkus augmentation completed in 681ms\n+__  ____  __  _____   ___  __ ____  ______\n+ --/ __ \\/ / / / _ | / _ \\/ //_/ / / / __/\n+ -/ /_/ / /_/ / __ |/ , _/ ,< / /_/ /\\ \\\n+--\\___\\_\\____/_/ |_/_/|_/_/|_|\\____/___/\n+2020-08-30 05:49:03,255 INFO  [io.quarkus] (main) Quarkus {quarkus-version} on JVM started in 0.638s. Listening on: http://0.0.0.0:8080\n+2020-08-30 05:49:03,272 INFO  [io.quarkus] (main) Profile prod activated.\n+2020-08-30 05:49:03,272 INFO  [io.quarkus] (main) Installed features: [cdi, resteasy]\n+----\n+\n+Once started, you can request the provided endpoint:\n+\n+```\n+$ curl -w \"\\n\" http://localhost:8080/hello\n+hello\n+```\n+\n+Hit `CTRL+C` to stop the application, or keep it running and enjoy the blazing fast hot-reload.\n+\n+[TIP]\n+.Automatically add newline with `curl -w \"\\n\"`\n+====\n+We are using `curl -w \"\\n\"` in this example to avoid your terminal printing a '%' or put both result and next command prompt on the same line.\n+====\n+\n+[TIP]\n+.Why is `quarkus-resteasy` not resolved ? \n+====\n+In this second run you should not see a line saying it is resolving `quarkus-resteasy` as jbang caches the dependency resolution between runs.\n+If you want to clear the caches to force resolution use `jbang cache clear`\n+====\n+\n+== Using injection\n+\n+Dependency injection in Quarkus is based on ArC which is a CDI-based dependency injection solution tailored for Quarkus' architecture.\n+You can learn more about it in the link:cdi-reference[Contexts and Dependency Injection guide].\n+\n+ArC comes as a dependency of `quarkus-resteasy` so you already have it handy.\n+\n+Let's modify the application and add a companion bean.\n+\n+Normally you would add a seperate class, but as we are aiming to have it all in one file you will add a ", "originalCommit": "b618bf2de885b41afc58f4e716284b4100a18fb0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTc1NjAyNQ==", "url": "https://github.com/quarkusio/quarkus/pull/11731#discussion_r479756025", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              2. All java frameworks relying on introspection have challenges using top level classes as they are not as visible as public classes; and in java there can only be one top level public class in a file.\n          \n          \n            \n              2. All Java frameworks relying on introspection have challenges using top level classes as they are not as visible as public classes; and in java there can only be one top level public class in a file.", "author": "gastaldi", "createdAt": "2020-08-30T11:11:14Z", "path": "docs/src/main/asciidoc/scripting.adoc", "diffHunk": "@@ -0,0 +1,440 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Scripting with Quarkus\n+:extension-status: preview\n+\n+Quarkus provides integration with https://jbang.dev[jbang]] which allows you to write java scripts/applications requiring no maven nor gradle to get running.\n+\n+In this guide, we will see how you can write a REST application using just a singe java file.\n+\n+include::./status-include.adoc[]\n+\n+== Prerequisites\n+\n+To complete this guide, you need:\n+\n+* less than 5 minutes\n+* https://jbang.dev/download[jbang v0.40.3+]\n+* an IDE\n+* GraalVM installed if you want to run in native mode\n+\n+== Solution\n+\n+Normally we would link to a Git repository to clone but in this case there is no additional files than the following:\n+\n+[source,java,subs=attributes+]\n+----\n+//usr/bin/env jbang \"$0\" \"$@\" ; exit $?\n+//DEPS io.quarkus:quarkus-resteasy:999-SNAPSHOT\n+//JAVAC_OPTIONS -parameters\n+//JAVA_OPTIONS -Djava.util.logging.manager=org.jboss.logmanager.LogManager\n+\n+import io.quarkus.runtime.Quarkus;\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+import org.jboss.resteasy.annotations.jaxrs.PathParam;\n+import org.jboss.logging.Logger;\n+\n+@Path(\"/hello\")\n+@ApplicationScoped\n+public class quarkusapp {\n+\n+    @GET\n+    public String sayHello() {\n+        return \"hello\";\n+    }\n+\n+    public static void main(String[] args) {\n+        Quarkus.run(args);\n+    }\n+\n+    @Inject\n+    GreetingService service;\n+\n+    @GET\n+    @Produces(MediaType.TEXT_PLAIN)\n+    @Path(\"/greeting/{name}\")\n+    public String greeting(@PathParam String name) {\n+        return service.greeting(name);\n+    }\n+\n+    @ApplicationScoped\n+    static public class GreetingService {\n+\n+        public String greeting(String name) {\n+            return \"hello \" + name;\n+        }\n+    }\n+}\n+----\n+\n+== Architecture\n+\n+In this guide, we create a straightforward application serving a `hello` endpoint with a single source file, no additional build files like `pom.xml` or `build.gradle` needed. To demonstrate dependency injection, this endpoint uses a `greeting` bean.\n+\n+image::getting-started-architecture.png[alt=Architecture]\n+\n+== Creating the initial file\n+\n+First, we need a java file. jbang lets you create an initial version using:\n+\n+[source,shell,subs=attributes+]\n+----\n+jbang scripting/quarkusapp.java\n+cd scripting\n+----\n+\n+This command generates that you can directly run on Linux and OS X, i.e. `./quarkusapp.java` - on Windows you need to use `jbang quarkusapp.java`\n+\n+This initial version will print `Hello World` when run.\n+\n+Once generated, look at the `quarkusapp.java`.\n+\n+You will find at the top a line looking like this:\n+\n+[source,java]\n+----\n+//usr/bin/env jbang \"$0\" \"$@\" ; exit $?\n+----\n+\n+This line is what on Linux and OS X allows you to run it as a script. On Windows this line is ignored.\n+\n+The next line\n+\n+[source,java]\n+----\n+// //DEPS <dependency1> <dependency2>\n+----\n+\n+Is illustrating how you add dependencies to this script. This ia feature of `jbang`.\n+\n+Go ahead and update this line to include the `quarkus-resteasy` dependency like so:\n+\n+[source,shell,subs=attributes+]\n+----\n+//DEPS io.quarkus:quarkus-resteasy:{quarkus-version}\n+----\n+\n+Now, run `jbang quarkusapp.java` and you will see `jbang` resolving this dependency and building the jar with help from Quarkus jbang integration.\n+\n+[source,shell,subs=attributes+] \n+----\n+$ jbang quarkusapp.java\n+\u276f jbang quarkusapp.java\n+[jbang] Resolving dependencies...\n+[jbang]     Resolving io.quarkus:quarkus-resteasy:{quarkus-version}...Done\n+[jbang] Dependencies resolved\n+[jbang] Building jar...\n+[jbang] Post build with io.quarkus.launcher.JBangIntegration\n+Aug 30, 2020 5:40:55 AM org.jboss.threads.Version <clinit>\n+INFO: JBoss Threads version 3.1.1.Final\n+Aug 30, 2020 5:40:56 AM io.quarkus.deployment.QuarkusAugmentor run\n+INFO: Quarkus augmentation completed in 722ms\n+Hello World\n+----\n+\n+For now the application does nothing new.\n+\n+[TIP]\n+.How do I edit this file and get content assist ?\n+====\n+As there is nothing but a `.java` file most IDE's does not handle content assist well.\n+To work around that you can run `jbang edit quarkusapp.java` which will print out a directory that will have a temporary project setup you can use in your IDE.\n+\n+On Linux/OSX you can run `<idecommand> `jbang edit quarkusapp.java``.\n+\n+If you add dependenciees while editing you can get jbang to automatically refresh\n+the IDE project using `jbang edit --live=<idecommand> quarkusapp.java`.\n+====\n+\n+\n+=== The JAX-RS resources\n+\n+Now let us replace the class with one that uses Quarkus features.\n+\n+[source,java]\n+----\n+import io.quarkus.runtime.Quarkus;\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+\n+@Path(\"/hello\")\n+@ApplicationScoped\n+public class quarkusapp {\n+\n+    @GET\n+    public String sayHello() {\n+        return \"hello\";\n+    }\n+\n+    public static void main(String[] args) {\n+        Quarkus.run(args);\n+    }\n+}\n+----\n+\n+It's a very simple class with a main method that starts Quarkus with a REST endpoint, returning \"hello\" to requests on \"/hello\".\n+\n+[TIP]\n+.Why is the `main` method there ?\n+====\n+A `main` method is currently needed for the `jbang` integration to work - will be possible to remove in the future.\n+====\n+\n+== Running the application\n+\n+Now when youn run the application you will see Quarkus start up.\n+\n+Use: `jbang quarkusapp.java`:\n+\n+[source,shell,subs=attributes+]\n+----\n+$ jbang quarkusapp.java\n+ jbang quarkusapp.java\n+[jbang] Building jar...\n+[jbang] Post build with io.quarkus.launcher.JBangIntegration\n+Aug 30, 2020 5:49:01 AM org.jboss.threads.Version <clinit>\n+INFO: JBoss Threads version 3.1.1.Final\n+Aug 30, 2020 5:49:02 AM io.quarkus.deployment.QuarkusAugmentor run\n+INFO: Quarkus augmentation completed in 681ms\n+__  ____  __  _____   ___  __ ____  ______\n+ --/ __ \\/ / / / _ | / _ \\/ //_/ / / / __/\n+ -/ /_/ / /_/ / __ |/ , _/ ,< / /_/ /\\ \\\n+--\\___\\_\\____/_/ |_/_/|_/_/|_|\\____/___/\n+2020-08-30 05:49:03,255 INFO  [io.quarkus] (main) Quarkus {quarkus-version} on JVM started in 0.638s. Listening on: http://0.0.0.0:8080\n+2020-08-30 05:49:03,272 INFO  [io.quarkus] (main) Profile prod activated.\n+2020-08-30 05:49:03,272 INFO  [io.quarkus] (main) Installed features: [cdi, resteasy]\n+----\n+\n+Once started, you can request the provided endpoint:\n+\n+```\n+$ curl -w \"\\n\" http://localhost:8080/hello\n+hello\n+```\n+\n+Hit `CTRL+C` to stop the application, or keep it running and enjoy the blazing fast hot-reload.\n+\n+[TIP]\n+.Automatically add newline with `curl -w \"\\n\"`\n+====\n+We are using `curl -w \"\\n\"` in this example to avoid your terminal printing a '%' or put both result and next command prompt on the same line.\n+====\n+\n+[TIP]\n+.Why is `quarkus-resteasy` not resolved ? \n+====\n+In this second run you should not see a line saying it is resolving `quarkus-resteasy` as jbang caches the dependency resolution between runs.\n+If you want to clear the caches to force resolution use `jbang cache clear`\n+====\n+\n+== Using injection\n+\n+Dependency injection in Quarkus is based on ArC which is a CDI-based dependency injection solution tailored for Quarkus' architecture.\n+You can learn more about it in the link:cdi-reference[Contexts and Dependency Injection guide].\n+\n+ArC comes as a dependency of `quarkus-resteasy` so you already have it handy.\n+\n+Let's modify the application and add a companion bean.\n+\n+Normally you would add a seperate class, but as we are aiming to have it all in one file you will add a \n+nested class.\n+\n+Add the following *inside* the `quarkusapp` class body.\n+\n+[source, java]\n+----\n+@ApplicationScoped\n+static public class GreetingService {\n+\n+    public String greeting(String name) {\n+        return \"hello \" + name;\n+    }\n+\n+}\n+----\n+\n+[TIP]\n+.Use of nested static public classes\n+====\n+We are using a nested static public class instead of a top level class for two reasons:\n+\n+  1. jbang currently does not currently support multiple source files\n+  2. All java frameworks relying on introspection have challenges using top level classes as they are not as visible as public classes; and in java there can only be one top level public class in a file.", "originalCommit": "b618bf2de885b41afc58f4e716284b4100a18fb0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTc1NjYzMg==", "url": "https://github.com/quarkusio/quarkus/pull/11731#discussion_r479756632", "bodyText": "Only in Quarkus or is that per spec?", "author": "gastaldi", "createdAt": "2020-08-30T11:18:12Z", "path": "docs/src/main/asciidoc/scripting.adoc", "diffHunk": "@@ -0,0 +1,440 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Scripting with Quarkus\n+:extension-status: preview\n+\n+Quarkus provides integration with https://jbang.dev[jbang]] which allows you to write java scripts/applications requiring no maven nor gradle to get running.\n+\n+In this guide, we will see how you can write a REST application using just a singe java file.\n+\n+include::./status-include.adoc[]\n+\n+== Prerequisites\n+\n+To complete this guide, you need:\n+\n+* less than 5 minutes\n+* https://jbang.dev/download[jbang v0.40.3+]\n+* an IDE\n+* GraalVM installed if you want to run in native mode\n+\n+== Solution\n+\n+Normally we would link to a Git repository to clone but in this case there is no additional files than the following:\n+\n+[source,java,subs=attributes+]\n+----\n+//usr/bin/env jbang \"$0\" \"$@\" ; exit $?\n+//DEPS io.quarkus:quarkus-resteasy:999-SNAPSHOT\n+//JAVAC_OPTIONS -parameters\n+//JAVA_OPTIONS -Djava.util.logging.manager=org.jboss.logmanager.LogManager\n+\n+import io.quarkus.runtime.Quarkus;\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+import org.jboss.resteasy.annotations.jaxrs.PathParam;\n+import org.jboss.logging.Logger;\n+\n+@Path(\"/hello\")\n+@ApplicationScoped\n+public class quarkusapp {\n+\n+    @GET\n+    public String sayHello() {\n+        return \"hello\";\n+    }\n+\n+    public static void main(String[] args) {\n+        Quarkus.run(args);\n+    }\n+\n+    @Inject\n+    GreetingService service;\n+\n+    @GET\n+    @Produces(MediaType.TEXT_PLAIN)\n+    @Path(\"/greeting/{name}\")\n+    public String greeting(@PathParam String name) {\n+        return service.greeting(name);\n+    }\n+\n+    @ApplicationScoped\n+    static public class GreetingService {\n+\n+        public String greeting(String name) {\n+            return \"hello \" + name;\n+        }\n+    }\n+}\n+----\n+\n+== Architecture\n+\n+In this guide, we create a straightforward application serving a `hello` endpoint with a single source file, no additional build files like `pom.xml` or `build.gradle` needed. To demonstrate dependency injection, this endpoint uses a `greeting` bean.\n+\n+image::getting-started-architecture.png[alt=Architecture]\n+\n+== Creating the initial file\n+\n+First, we need a java file. jbang lets you create an initial version using:\n+\n+[source,shell,subs=attributes+]\n+----\n+jbang scripting/quarkusapp.java\n+cd scripting\n+----\n+\n+This command generates that you can directly run on Linux and OS X, i.e. `./quarkusapp.java` - on Windows you need to use `jbang quarkusapp.java`\n+\n+This initial version will print `Hello World` when run.\n+\n+Once generated, look at the `quarkusapp.java`.\n+\n+You will find at the top a line looking like this:\n+\n+[source,java]\n+----\n+//usr/bin/env jbang \"$0\" \"$@\" ; exit $?\n+----\n+\n+This line is what on Linux and OS X allows you to run it as a script. On Windows this line is ignored.\n+\n+The next line\n+\n+[source,java]\n+----\n+// //DEPS <dependency1> <dependency2>\n+----\n+\n+Is illustrating how you add dependencies to this script. This ia feature of `jbang`.\n+\n+Go ahead and update this line to include the `quarkus-resteasy` dependency like so:\n+\n+[source,shell,subs=attributes+]\n+----\n+//DEPS io.quarkus:quarkus-resteasy:{quarkus-version}\n+----\n+\n+Now, run `jbang quarkusapp.java` and you will see `jbang` resolving this dependency and building the jar with help from Quarkus jbang integration.\n+\n+[source,shell,subs=attributes+] \n+----\n+$ jbang quarkusapp.java\n+\u276f jbang quarkusapp.java\n+[jbang] Resolving dependencies...\n+[jbang]     Resolving io.quarkus:quarkus-resteasy:{quarkus-version}...Done\n+[jbang] Dependencies resolved\n+[jbang] Building jar...\n+[jbang] Post build with io.quarkus.launcher.JBangIntegration\n+Aug 30, 2020 5:40:55 AM org.jboss.threads.Version <clinit>\n+INFO: JBoss Threads version 3.1.1.Final\n+Aug 30, 2020 5:40:56 AM io.quarkus.deployment.QuarkusAugmentor run\n+INFO: Quarkus augmentation completed in 722ms\n+Hello World\n+----\n+\n+For now the application does nothing new.\n+\n+[TIP]\n+.How do I edit this file and get content assist ?\n+====\n+As there is nothing but a `.java` file most IDE's does not handle content assist well.\n+To work around that you can run `jbang edit quarkusapp.java` which will print out a directory that will have a temporary project setup you can use in your IDE.\n+\n+On Linux/OSX you can run `<idecommand> `jbang edit quarkusapp.java``.\n+\n+If you add dependenciees while editing you can get jbang to automatically refresh\n+the IDE project using `jbang edit --live=<idecommand> quarkusapp.java`.\n+====\n+\n+\n+=== The JAX-RS resources\n+\n+Now let us replace the class with one that uses Quarkus features.\n+\n+[source,java]\n+----\n+import io.quarkus.runtime.Quarkus;\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+\n+@Path(\"/hello\")\n+@ApplicationScoped\n+public class quarkusapp {\n+\n+    @GET\n+    public String sayHello() {\n+        return \"hello\";\n+    }\n+\n+    public static void main(String[] args) {\n+        Quarkus.run(args);\n+    }\n+}\n+----\n+\n+It's a very simple class with a main method that starts Quarkus with a REST endpoint, returning \"hello\" to requests on \"/hello\".\n+\n+[TIP]\n+.Why is the `main` method there ?\n+====\n+A `main` method is currently needed for the `jbang` integration to work - will be possible to remove in the future.\n+====\n+\n+== Running the application\n+\n+Now when youn run the application you will see Quarkus start up.\n+\n+Use: `jbang quarkusapp.java`:\n+\n+[source,shell,subs=attributes+]\n+----\n+$ jbang quarkusapp.java\n+ jbang quarkusapp.java\n+[jbang] Building jar...\n+[jbang] Post build with io.quarkus.launcher.JBangIntegration\n+Aug 30, 2020 5:49:01 AM org.jboss.threads.Version <clinit>\n+INFO: JBoss Threads version 3.1.1.Final\n+Aug 30, 2020 5:49:02 AM io.quarkus.deployment.QuarkusAugmentor run\n+INFO: Quarkus augmentation completed in 681ms\n+__  ____  __  _____   ___  __ ____  ______\n+ --/ __ \\/ / / / _ | / _ \\/ //_/ / / / __/\n+ -/ /_/ / /_/ / __ |/ , _/ ,< / /_/ /\\ \\\n+--\\___\\_\\____/_/ |_/_/|_/_/|_|\\____/___/\n+2020-08-30 05:49:03,255 INFO  [io.quarkus] (main) Quarkus {quarkus-version} on JVM started in 0.638s. Listening on: http://0.0.0.0:8080\n+2020-08-30 05:49:03,272 INFO  [io.quarkus] (main) Profile prod activated.\n+2020-08-30 05:49:03,272 INFO  [io.quarkus] (main) Installed features: [cdi, resteasy]\n+----\n+\n+Once started, you can request the provided endpoint:\n+\n+```\n+$ curl -w \"\\n\" http://localhost:8080/hello\n+hello\n+```\n+\n+Hit `CTRL+C` to stop the application, or keep it running and enjoy the blazing fast hot-reload.\n+\n+[TIP]\n+.Automatically add newline with `curl -w \"\\n\"`\n+====\n+We are using `curl -w \"\\n\"` in this example to avoid your terminal printing a '%' or put both result and next command prompt on the same line.\n+====\n+\n+[TIP]\n+.Why is `quarkus-resteasy` not resolved ? \n+====\n+In this second run you should not see a line saying it is resolving `quarkus-resteasy` as jbang caches the dependency resolution between runs.\n+If you want to clear the caches to force resolution use `jbang cache clear`\n+====\n+\n+== Using injection\n+\n+Dependency injection in Quarkus is based on ArC which is a CDI-based dependency injection solution tailored for Quarkus' architecture.\n+You can learn more about it in the link:cdi-reference[Contexts and Dependency Injection guide].\n+\n+ArC comes as a dependency of `quarkus-resteasy` so you already have it handy.\n+\n+Let's modify the application and add a companion bean.\n+\n+Normally you would add a seperate class, but as we are aiming to have it all in one file you will add a \n+nested class.\n+\n+Add the following *inside* the `quarkusapp` class body.\n+\n+[source, java]\n+----\n+@ApplicationScoped\n+static public class GreetingService {\n+\n+    public String greeting(String name) {\n+        return \"hello \" + name;\n+    }\n+\n+}\n+----\n+\n+[TIP]\n+.Use of nested static public classes\n+====\n+We are using a nested static public class instead of a top level class for two reasons:\n+\n+  1. jbang currently does not currently support multiple source files\n+  2. All java frameworks relying on introspection have challenges using top level classes as they are not as visible as public classes; and in java there can only be one top level public class in a file.\n+\n+====\n+\n+Edit the `quarksapp` class to inject the `GreetingService` and create a new endpoint using it, you should end up with something like:\n+\n+[source, java]\n+----\n+//usr/bin/env jbang \"$0\" \"$@\" ; exit $?\n+//DEPS io.quarkus:quarkus-resteasy:999-SNAPSHOT\n+\n+import io.quarkus.runtime.Quarkus;\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+import org.jboss.resteasy.annotations.jaxrs.PathParam;\n+\n+@Path(\"/hello\")\n+@ApplicationScoped\n+public class quarkusapp {\n+\n+    @GET\n+    public String sayHello() {\n+        return \"hello from Quarkus with jbang.dev\";\n+    }\n+\n+    public static void main(String[] args) {\n+        Quarkus.run(args);\n+    }\n+\n+    @Inject\n+    GreetingService service;\n+\n+    @GET\n+    @Produces(MediaType.TEXT_PLAIN)\n+    @Path(\"/greeting/{name}\")\n+    public String greeting(@PathParam String name) {\n+        return service.greeting(name);\n+    }\n+\n+    @ApplicationScoped\n+    static public class GreetingService {\n+\n+        public String greeting(String name) {\n+            return \"hello \" + name;\n+        }\n+    }\n+}\n+----\n+\n+Now when you run `jbang quarkusapp.java` you can check what the new end point returns:\n+\n+[source,shell,subs=attributes+]\n+----\n+$ curl -w \"\\n\" http://localhost:8080/hello/greeting/quarkus\n+hello null\n+----\n+\n+Now that is unexpected, why is it returning `hello null` and not `hello quarkus` ?\n+\n+The reason is that JAX-RS `@PathParam` relies on the `-parameters` compiler flag to be set to be able to map `{name}` to the `name` parameter.", "originalCommit": "b618bf2de885b41afc58f4e716284b4100a18fb0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTc1ODU3MA==", "url": "https://github.com/quarkusio/quarkus/pull/11731#discussion_r479758570", "bodyText": "Per spec.\nOpenjdk didn't enable it by default for whatever reasons :)", "author": "maxandersen", "createdAt": "2020-08-30T11:37:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTc1NjYzMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTc1Njk0NQ==", "url": "https://github.com/quarkusio/quarkus/pull/11731#discussion_r479756945", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            i.e. if you wanted to add the `smallrye-openapi` and `swagger-ui` and have the swagger-ui always show up you would add the foolowing:\n          \n          \n            \n            i.e. if you wanted to add the `smallrye-openapi` and `swagger-ui` and have the swagger-ui always show up you would add the following:", "author": "gastaldi", "createdAt": "2020-08-30T11:21:10Z", "path": "docs/src/main/asciidoc/scripting.adoc", "diffHunk": "@@ -0,0 +1,440 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Scripting with Quarkus\n+:extension-status: preview\n+\n+Quarkus provides integration with https://jbang.dev[jbang]] which allows you to write java scripts/applications requiring no maven nor gradle to get running.\n+\n+In this guide, we will see how you can write a REST application using just a singe java file.\n+\n+include::./status-include.adoc[]\n+\n+== Prerequisites\n+\n+To complete this guide, you need:\n+\n+* less than 5 minutes\n+* https://jbang.dev/download[jbang v0.40.3+]\n+* an IDE\n+* GraalVM installed if you want to run in native mode\n+\n+== Solution\n+\n+Normally we would link to a Git repository to clone but in this case there is no additional files than the following:\n+\n+[source,java,subs=attributes+]\n+----\n+//usr/bin/env jbang \"$0\" \"$@\" ; exit $?\n+//DEPS io.quarkus:quarkus-resteasy:999-SNAPSHOT\n+//JAVAC_OPTIONS -parameters\n+//JAVA_OPTIONS -Djava.util.logging.manager=org.jboss.logmanager.LogManager\n+\n+import io.quarkus.runtime.Quarkus;\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+import org.jboss.resteasy.annotations.jaxrs.PathParam;\n+import org.jboss.logging.Logger;\n+\n+@Path(\"/hello\")\n+@ApplicationScoped\n+public class quarkusapp {\n+\n+    @GET\n+    public String sayHello() {\n+        return \"hello\";\n+    }\n+\n+    public static void main(String[] args) {\n+        Quarkus.run(args);\n+    }\n+\n+    @Inject\n+    GreetingService service;\n+\n+    @GET\n+    @Produces(MediaType.TEXT_PLAIN)\n+    @Path(\"/greeting/{name}\")\n+    public String greeting(@PathParam String name) {\n+        return service.greeting(name);\n+    }\n+\n+    @ApplicationScoped\n+    static public class GreetingService {\n+\n+        public String greeting(String name) {\n+            return \"hello \" + name;\n+        }\n+    }\n+}\n+----\n+\n+== Architecture\n+\n+In this guide, we create a straightforward application serving a `hello` endpoint with a single source file, no additional build files like `pom.xml` or `build.gradle` needed. To demonstrate dependency injection, this endpoint uses a `greeting` bean.\n+\n+image::getting-started-architecture.png[alt=Architecture]\n+\n+== Creating the initial file\n+\n+First, we need a java file. jbang lets you create an initial version using:\n+\n+[source,shell,subs=attributes+]\n+----\n+jbang scripting/quarkusapp.java\n+cd scripting\n+----\n+\n+This command generates that you can directly run on Linux and OS X, i.e. `./quarkusapp.java` - on Windows you need to use `jbang quarkusapp.java`\n+\n+This initial version will print `Hello World` when run.\n+\n+Once generated, look at the `quarkusapp.java`.\n+\n+You will find at the top a line looking like this:\n+\n+[source,java]\n+----\n+//usr/bin/env jbang \"$0\" \"$@\" ; exit $?\n+----\n+\n+This line is what on Linux and OS X allows you to run it as a script. On Windows this line is ignored.\n+\n+The next line\n+\n+[source,java]\n+----\n+// //DEPS <dependency1> <dependency2>\n+----\n+\n+Is illustrating how you add dependencies to this script. This ia feature of `jbang`.\n+\n+Go ahead and update this line to include the `quarkus-resteasy` dependency like so:\n+\n+[source,shell,subs=attributes+]\n+----\n+//DEPS io.quarkus:quarkus-resteasy:{quarkus-version}\n+----\n+\n+Now, run `jbang quarkusapp.java` and you will see `jbang` resolving this dependency and building the jar with help from Quarkus jbang integration.\n+\n+[source,shell,subs=attributes+] \n+----\n+$ jbang quarkusapp.java\n+\u276f jbang quarkusapp.java\n+[jbang] Resolving dependencies...\n+[jbang]     Resolving io.quarkus:quarkus-resteasy:{quarkus-version}...Done\n+[jbang] Dependencies resolved\n+[jbang] Building jar...\n+[jbang] Post build with io.quarkus.launcher.JBangIntegration\n+Aug 30, 2020 5:40:55 AM org.jboss.threads.Version <clinit>\n+INFO: JBoss Threads version 3.1.1.Final\n+Aug 30, 2020 5:40:56 AM io.quarkus.deployment.QuarkusAugmentor run\n+INFO: Quarkus augmentation completed in 722ms\n+Hello World\n+----\n+\n+For now the application does nothing new.\n+\n+[TIP]\n+.How do I edit this file and get content assist ?\n+====\n+As there is nothing but a `.java` file most IDE's does not handle content assist well.\n+To work around that you can run `jbang edit quarkusapp.java` which will print out a directory that will have a temporary project setup you can use in your IDE.\n+\n+On Linux/OSX you can run `<idecommand> `jbang edit quarkusapp.java``.\n+\n+If you add dependenciees while editing you can get jbang to automatically refresh\n+the IDE project using `jbang edit --live=<idecommand> quarkusapp.java`.\n+====\n+\n+\n+=== The JAX-RS resources\n+\n+Now let us replace the class with one that uses Quarkus features.\n+\n+[source,java]\n+----\n+import io.quarkus.runtime.Quarkus;\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+\n+@Path(\"/hello\")\n+@ApplicationScoped\n+public class quarkusapp {\n+\n+    @GET\n+    public String sayHello() {\n+        return \"hello\";\n+    }\n+\n+    public static void main(String[] args) {\n+        Quarkus.run(args);\n+    }\n+}\n+----\n+\n+It's a very simple class with a main method that starts Quarkus with a REST endpoint, returning \"hello\" to requests on \"/hello\".\n+\n+[TIP]\n+.Why is the `main` method there ?\n+====\n+A `main` method is currently needed for the `jbang` integration to work - will be possible to remove in the future.\n+====\n+\n+== Running the application\n+\n+Now when youn run the application you will see Quarkus start up.\n+\n+Use: `jbang quarkusapp.java`:\n+\n+[source,shell,subs=attributes+]\n+----\n+$ jbang quarkusapp.java\n+ jbang quarkusapp.java\n+[jbang] Building jar...\n+[jbang] Post build with io.quarkus.launcher.JBangIntegration\n+Aug 30, 2020 5:49:01 AM org.jboss.threads.Version <clinit>\n+INFO: JBoss Threads version 3.1.1.Final\n+Aug 30, 2020 5:49:02 AM io.quarkus.deployment.QuarkusAugmentor run\n+INFO: Quarkus augmentation completed in 681ms\n+__  ____  __  _____   ___  __ ____  ______\n+ --/ __ \\/ / / / _ | / _ \\/ //_/ / / / __/\n+ -/ /_/ / /_/ / __ |/ , _/ ,< / /_/ /\\ \\\n+--\\___\\_\\____/_/ |_/_/|_/_/|_|\\____/___/\n+2020-08-30 05:49:03,255 INFO  [io.quarkus] (main) Quarkus {quarkus-version} on JVM started in 0.638s. Listening on: http://0.0.0.0:8080\n+2020-08-30 05:49:03,272 INFO  [io.quarkus] (main) Profile prod activated.\n+2020-08-30 05:49:03,272 INFO  [io.quarkus] (main) Installed features: [cdi, resteasy]\n+----\n+\n+Once started, you can request the provided endpoint:\n+\n+```\n+$ curl -w \"\\n\" http://localhost:8080/hello\n+hello\n+```\n+\n+Hit `CTRL+C` to stop the application, or keep it running and enjoy the blazing fast hot-reload.\n+\n+[TIP]\n+.Automatically add newline with `curl -w \"\\n\"`\n+====\n+We are using `curl -w \"\\n\"` in this example to avoid your terminal printing a '%' or put both result and next command prompt on the same line.\n+====\n+\n+[TIP]\n+.Why is `quarkus-resteasy` not resolved ? \n+====\n+In this second run you should not see a line saying it is resolving `quarkus-resteasy` as jbang caches the dependency resolution between runs.\n+If you want to clear the caches to force resolution use `jbang cache clear`\n+====\n+\n+== Using injection\n+\n+Dependency injection in Quarkus is based on ArC which is a CDI-based dependency injection solution tailored for Quarkus' architecture.\n+You can learn more about it in the link:cdi-reference[Contexts and Dependency Injection guide].\n+\n+ArC comes as a dependency of `quarkus-resteasy` so you already have it handy.\n+\n+Let's modify the application and add a companion bean.\n+\n+Normally you would add a seperate class, but as we are aiming to have it all in one file you will add a \n+nested class.\n+\n+Add the following *inside* the `quarkusapp` class body.\n+\n+[source, java]\n+----\n+@ApplicationScoped\n+static public class GreetingService {\n+\n+    public String greeting(String name) {\n+        return \"hello \" + name;\n+    }\n+\n+}\n+----\n+\n+[TIP]\n+.Use of nested static public classes\n+====\n+We are using a nested static public class instead of a top level class for two reasons:\n+\n+  1. jbang currently does not currently support multiple source files\n+  2. All java frameworks relying on introspection have challenges using top level classes as they are not as visible as public classes; and in java there can only be one top level public class in a file.\n+\n+====\n+\n+Edit the `quarksapp` class to inject the `GreetingService` and create a new endpoint using it, you should end up with something like:\n+\n+[source, java]\n+----\n+//usr/bin/env jbang \"$0\" \"$@\" ; exit $?\n+//DEPS io.quarkus:quarkus-resteasy:999-SNAPSHOT\n+\n+import io.quarkus.runtime.Quarkus;\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+import org.jboss.resteasy.annotations.jaxrs.PathParam;\n+\n+@Path(\"/hello\")\n+@ApplicationScoped\n+public class quarkusapp {\n+\n+    @GET\n+    public String sayHello() {\n+        return \"hello from Quarkus with jbang.dev\";\n+    }\n+\n+    public static void main(String[] args) {\n+        Quarkus.run(args);\n+    }\n+\n+    @Inject\n+    GreetingService service;\n+\n+    @GET\n+    @Produces(MediaType.TEXT_PLAIN)\n+    @Path(\"/greeting/{name}\")\n+    public String greeting(@PathParam String name) {\n+        return service.greeting(name);\n+    }\n+\n+    @ApplicationScoped\n+    static public class GreetingService {\n+\n+        public String greeting(String name) {\n+            return \"hello \" + name;\n+        }\n+    }\n+}\n+----\n+\n+Now when you run `jbang quarkusapp.java` you can check what the new end point returns:\n+\n+[source,shell,subs=attributes+]\n+----\n+$ curl -w \"\\n\" http://localhost:8080/hello/greeting/quarkus\n+hello null\n+----\n+\n+Now that is unexpected, why is it returning `hello null` and not `hello quarkus` ?\n+\n+The reason is that JAX-RS `@PathParam` relies on the `-parameters` compiler flag to be set to be able to map `{name}` to the `name` parameter.\n+\n+We fix that by adding the following comment instruction to the file:\n+\n+[source,shell,subs=attributes+]\n+----\n+//JAVAC_OPTIONS -parameters\n+----\n+\n+Now when you run with `jbang quarkusapp.java` the end point should return what you expect:\n+\n+[source,shell,subs=attributes+]\n+----\n+$ curl -w \"\\n\" http://localhost:8080/hello/greeting/quarkus\n+hello quarkus\n+----\n+\n+== Debugging\n+\n+To debug the application you use `jbang --debug quarkusapp.java` and you can use your IDE to connect on port 4004; if you want to use the\n+more traditonal Quarkus debug port you can use `jbang --debug=5005 quarkusapp.java`.\n+\n+Note: `jbang` debugging always suspends thus you need to connect the debugger to have the application run.\n+\n+== Logging\n+\n+To use logging in Quarkus scripting with jbang you do as usual, with configuring a logger, i.e.\n+\n+[source,java]\n+----\n+public static final Logger LOG = Logger.getLogger(quarkusapp.class);\n+----\n+\n+To get it to work you need to add a java option to ensure the logging is initialized properly, i.e.\n+\n+[source,java]\n+----\n+//JAVA_OPTIONS -Djava.util.logging.manager=org.jboss.logmanager.LogManager\n+----\n+\n+With that in place running `jbang quarkusapp.java` will log and render as expected.\n+\n+== Configuring Application\n+\n+You can use `//Q:CONFIG <property>=<value>` to setup static configuration for your application.\n+\n+i.e. if you wanted to add the `smallrye-openapi` and `swagger-ui` and have the swagger-ui always show up you would add the foolowing:", "originalCommit": "b618bf2de885b41afc58f4e716284b4100a18fb0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTc1NzEwMQ==", "url": "https://github.com/quarkusio/quarkus/pull/11731#discussion_r479757101", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            If you want to get started with Quarkus or write something quickly Quarkus Scripting with jbang lets you do that. No maven, no gradle - just a java file. In this guide we outlined the very basics on using Quarkus with jbang; if you want to learn more about what jbang can do go see https://jbang.dev.\n          \n          \n            \n            If you want to get started with Quarkus or write something quickly, Quarkus Scripting with jbang lets you do that. No Maven, no Gradle - just a java file. In this guide we outlined the very basics on using Quarkus with jbang; if you want to learn more about what jbang can do go see https://jbang.dev.", "author": "gastaldi", "createdAt": "2020-08-30T11:22:50Z", "path": "docs/src/main/asciidoc/scripting.adoc", "diffHunk": "@@ -0,0 +1,440 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Scripting with Quarkus\n+:extension-status: preview\n+\n+Quarkus provides integration with https://jbang.dev[jbang]] which allows you to write java scripts/applications requiring no maven nor gradle to get running.\n+\n+In this guide, we will see how you can write a REST application using just a singe java file.\n+\n+include::./status-include.adoc[]\n+\n+== Prerequisites\n+\n+To complete this guide, you need:\n+\n+* less than 5 minutes\n+* https://jbang.dev/download[jbang v0.40.3+]\n+* an IDE\n+* GraalVM installed if you want to run in native mode\n+\n+== Solution\n+\n+Normally we would link to a Git repository to clone but in this case there is no additional files than the following:\n+\n+[source,java,subs=attributes+]\n+----\n+//usr/bin/env jbang \"$0\" \"$@\" ; exit $?\n+//DEPS io.quarkus:quarkus-resteasy:999-SNAPSHOT\n+//JAVAC_OPTIONS -parameters\n+//JAVA_OPTIONS -Djava.util.logging.manager=org.jboss.logmanager.LogManager\n+\n+import io.quarkus.runtime.Quarkus;\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+import org.jboss.resteasy.annotations.jaxrs.PathParam;\n+import org.jboss.logging.Logger;\n+\n+@Path(\"/hello\")\n+@ApplicationScoped\n+public class quarkusapp {\n+\n+    @GET\n+    public String sayHello() {\n+        return \"hello\";\n+    }\n+\n+    public static void main(String[] args) {\n+        Quarkus.run(args);\n+    }\n+\n+    @Inject\n+    GreetingService service;\n+\n+    @GET\n+    @Produces(MediaType.TEXT_PLAIN)\n+    @Path(\"/greeting/{name}\")\n+    public String greeting(@PathParam String name) {\n+        return service.greeting(name);\n+    }\n+\n+    @ApplicationScoped\n+    static public class GreetingService {\n+\n+        public String greeting(String name) {\n+            return \"hello \" + name;\n+        }\n+    }\n+}\n+----\n+\n+== Architecture\n+\n+In this guide, we create a straightforward application serving a `hello` endpoint with a single source file, no additional build files like `pom.xml` or `build.gradle` needed. To demonstrate dependency injection, this endpoint uses a `greeting` bean.\n+\n+image::getting-started-architecture.png[alt=Architecture]\n+\n+== Creating the initial file\n+\n+First, we need a java file. jbang lets you create an initial version using:\n+\n+[source,shell,subs=attributes+]\n+----\n+jbang scripting/quarkusapp.java\n+cd scripting\n+----\n+\n+This command generates that you can directly run on Linux and OS X, i.e. `./quarkusapp.java` - on Windows you need to use `jbang quarkusapp.java`\n+\n+This initial version will print `Hello World` when run.\n+\n+Once generated, look at the `quarkusapp.java`.\n+\n+You will find at the top a line looking like this:\n+\n+[source,java]\n+----\n+//usr/bin/env jbang \"$0\" \"$@\" ; exit $?\n+----\n+\n+This line is what on Linux and OS X allows you to run it as a script. On Windows this line is ignored.\n+\n+The next line\n+\n+[source,java]\n+----\n+// //DEPS <dependency1> <dependency2>\n+----\n+\n+Is illustrating how you add dependencies to this script. This ia feature of `jbang`.\n+\n+Go ahead and update this line to include the `quarkus-resteasy` dependency like so:\n+\n+[source,shell,subs=attributes+]\n+----\n+//DEPS io.quarkus:quarkus-resteasy:{quarkus-version}\n+----\n+\n+Now, run `jbang quarkusapp.java` and you will see `jbang` resolving this dependency and building the jar with help from Quarkus jbang integration.\n+\n+[source,shell,subs=attributes+] \n+----\n+$ jbang quarkusapp.java\n+\u276f jbang quarkusapp.java\n+[jbang] Resolving dependencies...\n+[jbang]     Resolving io.quarkus:quarkus-resteasy:{quarkus-version}...Done\n+[jbang] Dependencies resolved\n+[jbang] Building jar...\n+[jbang] Post build with io.quarkus.launcher.JBangIntegration\n+Aug 30, 2020 5:40:55 AM org.jboss.threads.Version <clinit>\n+INFO: JBoss Threads version 3.1.1.Final\n+Aug 30, 2020 5:40:56 AM io.quarkus.deployment.QuarkusAugmentor run\n+INFO: Quarkus augmentation completed in 722ms\n+Hello World\n+----\n+\n+For now the application does nothing new.\n+\n+[TIP]\n+.How do I edit this file and get content assist ?\n+====\n+As there is nothing but a `.java` file most IDE's does not handle content assist well.\n+To work around that you can run `jbang edit quarkusapp.java` which will print out a directory that will have a temporary project setup you can use in your IDE.\n+\n+On Linux/OSX you can run `<idecommand> `jbang edit quarkusapp.java``.\n+\n+If you add dependenciees while editing you can get jbang to automatically refresh\n+the IDE project using `jbang edit --live=<idecommand> quarkusapp.java`.\n+====\n+\n+\n+=== The JAX-RS resources\n+\n+Now let us replace the class with one that uses Quarkus features.\n+\n+[source,java]\n+----\n+import io.quarkus.runtime.Quarkus;\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+\n+@Path(\"/hello\")\n+@ApplicationScoped\n+public class quarkusapp {\n+\n+    @GET\n+    public String sayHello() {\n+        return \"hello\";\n+    }\n+\n+    public static void main(String[] args) {\n+        Quarkus.run(args);\n+    }\n+}\n+----\n+\n+It's a very simple class with a main method that starts Quarkus with a REST endpoint, returning \"hello\" to requests on \"/hello\".\n+\n+[TIP]\n+.Why is the `main` method there ?\n+====\n+A `main` method is currently needed for the `jbang` integration to work - will be possible to remove in the future.\n+====\n+\n+== Running the application\n+\n+Now when youn run the application you will see Quarkus start up.\n+\n+Use: `jbang quarkusapp.java`:\n+\n+[source,shell,subs=attributes+]\n+----\n+$ jbang quarkusapp.java\n+ jbang quarkusapp.java\n+[jbang] Building jar...\n+[jbang] Post build with io.quarkus.launcher.JBangIntegration\n+Aug 30, 2020 5:49:01 AM org.jboss.threads.Version <clinit>\n+INFO: JBoss Threads version 3.1.1.Final\n+Aug 30, 2020 5:49:02 AM io.quarkus.deployment.QuarkusAugmentor run\n+INFO: Quarkus augmentation completed in 681ms\n+__  ____  __  _____   ___  __ ____  ______\n+ --/ __ \\/ / / / _ | / _ \\/ //_/ / / / __/\n+ -/ /_/ / /_/ / __ |/ , _/ ,< / /_/ /\\ \\\n+--\\___\\_\\____/_/ |_/_/|_/_/|_|\\____/___/\n+2020-08-30 05:49:03,255 INFO  [io.quarkus] (main) Quarkus {quarkus-version} on JVM started in 0.638s. Listening on: http://0.0.0.0:8080\n+2020-08-30 05:49:03,272 INFO  [io.quarkus] (main) Profile prod activated.\n+2020-08-30 05:49:03,272 INFO  [io.quarkus] (main) Installed features: [cdi, resteasy]\n+----\n+\n+Once started, you can request the provided endpoint:\n+\n+```\n+$ curl -w \"\\n\" http://localhost:8080/hello\n+hello\n+```\n+\n+Hit `CTRL+C` to stop the application, or keep it running and enjoy the blazing fast hot-reload.\n+\n+[TIP]\n+.Automatically add newline with `curl -w \"\\n\"`\n+====\n+We are using `curl -w \"\\n\"` in this example to avoid your terminal printing a '%' or put both result and next command prompt on the same line.\n+====\n+\n+[TIP]\n+.Why is `quarkus-resteasy` not resolved ? \n+====\n+In this second run you should not see a line saying it is resolving `quarkus-resteasy` as jbang caches the dependency resolution between runs.\n+If you want to clear the caches to force resolution use `jbang cache clear`\n+====\n+\n+== Using injection\n+\n+Dependency injection in Quarkus is based on ArC which is a CDI-based dependency injection solution tailored for Quarkus' architecture.\n+You can learn more about it in the link:cdi-reference[Contexts and Dependency Injection guide].\n+\n+ArC comes as a dependency of `quarkus-resteasy` so you already have it handy.\n+\n+Let's modify the application and add a companion bean.\n+\n+Normally you would add a seperate class, but as we are aiming to have it all in one file you will add a \n+nested class.\n+\n+Add the following *inside* the `quarkusapp` class body.\n+\n+[source, java]\n+----\n+@ApplicationScoped\n+static public class GreetingService {\n+\n+    public String greeting(String name) {\n+        return \"hello \" + name;\n+    }\n+\n+}\n+----\n+\n+[TIP]\n+.Use of nested static public classes\n+====\n+We are using a nested static public class instead of a top level class for two reasons:\n+\n+  1. jbang currently does not currently support multiple source files\n+  2. All java frameworks relying on introspection have challenges using top level classes as they are not as visible as public classes; and in java there can only be one top level public class in a file.\n+\n+====\n+\n+Edit the `quarksapp` class to inject the `GreetingService` and create a new endpoint using it, you should end up with something like:\n+\n+[source, java]\n+----\n+//usr/bin/env jbang \"$0\" \"$@\" ; exit $?\n+//DEPS io.quarkus:quarkus-resteasy:999-SNAPSHOT\n+\n+import io.quarkus.runtime.Quarkus;\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+import org.jboss.resteasy.annotations.jaxrs.PathParam;\n+\n+@Path(\"/hello\")\n+@ApplicationScoped\n+public class quarkusapp {\n+\n+    @GET\n+    public String sayHello() {\n+        return \"hello from Quarkus with jbang.dev\";\n+    }\n+\n+    public static void main(String[] args) {\n+        Quarkus.run(args);\n+    }\n+\n+    @Inject\n+    GreetingService service;\n+\n+    @GET\n+    @Produces(MediaType.TEXT_PLAIN)\n+    @Path(\"/greeting/{name}\")\n+    public String greeting(@PathParam String name) {\n+        return service.greeting(name);\n+    }\n+\n+    @ApplicationScoped\n+    static public class GreetingService {\n+\n+        public String greeting(String name) {\n+            return \"hello \" + name;\n+        }\n+    }\n+}\n+----\n+\n+Now when you run `jbang quarkusapp.java` you can check what the new end point returns:\n+\n+[source,shell,subs=attributes+]\n+----\n+$ curl -w \"\\n\" http://localhost:8080/hello/greeting/quarkus\n+hello null\n+----\n+\n+Now that is unexpected, why is it returning `hello null` and not `hello quarkus` ?\n+\n+The reason is that JAX-RS `@PathParam` relies on the `-parameters` compiler flag to be set to be able to map `{name}` to the `name` parameter.\n+\n+We fix that by adding the following comment instruction to the file:\n+\n+[source,shell,subs=attributes+]\n+----\n+//JAVAC_OPTIONS -parameters\n+----\n+\n+Now when you run with `jbang quarkusapp.java` the end point should return what you expect:\n+\n+[source,shell,subs=attributes+]\n+----\n+$ curl -w \"\\n\" http://localhost:8080/hello/greeting/quarkus\n+hello quarkus\n+----\n+\n+== Debugging\n+\n+To debug the application you use `jbang --debug quarkusapp.java` and you can use your IDE to connect on port 4004; if you want to use the\n+more traditonal Quarkus debug port you can use `jbang --debug=5005 quarkusapp.java`.\n+\n+Note: `jbang` debugging always suspends thus you need to connect the debugger to have the application run.\n+\n+== Logging\n+\n+To use logging in Quarkus scripting with jbang you do as usual, with configuring a logger, i.e.\n+\n+[source,java]\n+----\n+public static final Logger LOG = Logger.getLogger(quarkusapp.class);\n+----\n+\n+To get it to work you need to add a java option to ensure the logging is initialized properly, i.e.\n+\n+[source,java]\n+----\n+//JAVA_OPTIONS -Djava.util.logging.manager=org.jboss.logmanager.LogManager\n+----\n+\n+With that in place running `jbang quarkusapp.java` will log and render as expected.\n+\n+== Configuring Application\n+\n+You can use `//Q:CONFIG <property>=<value>` to setup static configuration for your application.\n+\n+i.e. if you wanted to add the `smallrye-openapi` and `swagger-ui` and have the swagger-ui always show up you would add the foolowing:\n+\n+[source,java,subs=attributes+]\n+----\n+//DEPS io.quarkus:quarkus-smallrye-openapi:{quarkus-version}\n+//DEPS io.quarkus:quarkus-swagger-ui:{quarkus-version}\n+//Q:CONFIG quarkus.swagger-ui.always-include=true\n+----\n+\n+Now during build the `quarkus.swagger-ui.always-include` will be generated into the resulting jar and `http://0.0.0.0:8080/swagger-ui` will be available when run.\n+\n+== Running as a native application\n+\n+If you have `native-image` binary installed and GRAALVM_HOME set you can get native binary built and run using `jbang --native quarkusapp.java`:\n+\n+[source,shell,subs=attributes+]\n+----\n+$ jbang --native quarkusapp\n+ jbang --native quarkusapp.java\n+[jbang] Building jar...\n+[jbang] Post build with io.quarkus.launcher.JBangIntegration\n+Aug 30, 2020 6:21:15 AM org.jboss.threads.Version <clinit>\n+INFO: JBoss Threads version 3.1.1.Final\n+Aug 30, 2020 6:21:16 AM io.quarkus.deployment.pkg.steps.JarResultBuildStep buildNativeImageThinJar\n+INFO: Building native image source jar: /var/folders/yb/sytszfld4sg8vwr1h0w20jlw0000gn/T/quarkus-jbang3291688251685023074/quarkus-application-native-image-source-jar/quarkus-application-runner.jar\n+Aug 30, 2020 6:21:16 AM io.quarkus.deployment.pkg.steps.NativeImageBuildStep build\n+INFO: Building native image from /var/folders/yb/sytszfld4sg8vwr1h0w20jlw0000gn/T/quarkus-jbang3291688251685023074/quarkus-application-native-image-source-jar/quarkus-application-runner.jar\n+Aug 30, 2020 6:21:16 AM io.quarkus.deployment.pkg.steps.NativeImageBuildStep checkGraalVMVersion\n+INFO: Running Quarkus native-image plugin on GraalVM Version 20.1.0 (Java Version 11.0.7)\n+Aug 30, 2020 6:21:16 AM io.quarkus.deployment.pkg.steps.NativeImageBuildStep build\n+INFO: /Users/max/.sdkman/candidates/java/20.1.0.r11-grl/bin/native-image -J-Djava.util.logging.manager=org.jboss.logmanager.LogManager -J-Dsun.nio.ch.maxUpdateArraySize=100 -J-Dvertx.logger-delegate-factory-class-name=io.quarkus.vertx.core.runtime.VertxLogDelegateFactory -J-Dvertx.disableDnsResolver=true -J-Dio.netty.leakDetection.level=DISABLED -J-Dio.netty.allocator.maxOrder=1 -J-Duser.language=en -J-Dfile.encoding=UTF-8 --initialize-at-build-time= -H:InitialCollectionPolicy=com.oracle.svm.core.genscavenge.CollectionPolicy\\$BySpaceAndTime -H:+JNI -jar quarkus-application-runner.jar -H:FallbackThreshold=0 -H:+ReportExceptionStackTraces -H:-AddAllCharsets -H:EnableURLProtocols=http --no-server -H:-UseServiceLoaderFeature -H:+StackTrace quarkus-application-runner\n+\n+Aug 30, 2020 6:22:31 AM io.quarkus.deployment.QuarkusAugmentor run\n+INFO: Quarkus augmentation completed in 76010ms\n+__  ____  __  _____   ___  __ ____  ______\n+ --/ __ \\/ / / / _ | / _ \\/ //_/ / / / __/\n+ -/ /_/ / /_/ / __ |/ , _/ ,< / /_/ /\\ \\\n+--\\___\\_\\____/_/ |_/_/|_/_/|_|\\____/___/\n+2020-08-30 06:22:32,012 INFO  [io.quarkus] (main) Quarkus {quarkus-version} native started in 0.017s. Listening on: http://0.0.0.0:8080\n+2020-08-30 06:22:32,013 INFO  [io.quarkus] (main) Profile prod activated.\n+2020-08-30 06:22:32,013 INFO  [io.quarkus] (main) Installed features: [cdi, resteasy]\n+----\n+\n+This native build will take some time on first run but any subsequent runs (without changing `quarkusapp.java`) will be close to instant:\n+\n+[source,shell,subs=attributes+]\n+----\n+$ jbang --native quarkusapp.java\n+__  ____  __  _____   ___  __ ____  ______\n+ --/ __ \\/ / / / _ | / _ \\/ //_/ / / / __/\n+ -/ /_/ / /_/ / __ |/ , _/ ,< / /_/ /\\ \\\n+--\\___\\_\\____/_/ |_/_/|_/_/|_|\\____/___/\n+2020-08-30 06:23:36,846 INFO  [io.quarkus] (main) Quarkus {quarkus-version} native started in 0.015s. Listening on: http://0.0.0.0:8080\n+2020-08-30 06:23:36,846 INFO  [io.quarkus] (main) Profile prod activated.\n+2020-08-30 06:23:36,846 INFO  [io.quarkus] (main) Installed features: [cdi, resteasy]\n+----\n+\n+=== Conclusion\n+\n+If you want to get started with Quarkus or write something quickly Quarkus Scripting with jbang lets you do that. No maven, no gradle - just a java file. In this guide we outlined the very basics on using Quarkus with jbang; if you want to learn more about what jbang can do go see https://jbang.dev.", "originalCommit": "b618bf2de885b41afc58f4e716284b4100a18fb0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "26ccdd2eea24660f5c25e71ff58320d65899b44a", "url": "https://github.com/quarkusio/quarkus/commit/26ccdd2eea24660f5c25e71ff58320d65899b44a", "message": "guide for jbang integration\n\nCo-authored-by: George Gastaldi <gegastaldi@gmail.com>", "committedDate": "2020-08-30T15:20:33Z", "type": "commit"}, {"oid": "26ccdd2eea24660f5c25e71ff58320d65899b44a", "url": "https://github.com/quarkusio/quarkus/commit/26ccdd2eea24660f5c25e71ff58320d65899b44a", "message": "guide for jbang integration\n\nCo-authored-by: George Gastaldi <gegastaldi@gmail.com>", "committedDate": "2020-08-30T15:20:33Z", "type": "forcePushed"}]}