{"pr_number": 13619, "pr_title": "Detect wrong usage of singleton annotations", "pr_createdAt": "2020-12-02T10:00:31Z", "pr_url": "https://github.com/quarkusio/quarkus/pull/13619", "timeline": [{"oid": "e995483a4375ac0f9a59445c7371b4cae4667271", "url": "https://github.com/quarkusio/quarkus/commit/e995483a4375ac0f9a59445c7371b4cae4667271", "message": "Detect wrong usage of singleton annotations\n\n- i.e. javax.ejb.Singleton", "committedDate": "2020-12-02T10:00:10Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDA0ODc0Nw==", "url": "https://github.com/quarkusio/quarkus/pull/13619#discussion_r534048747", "bodyText": "I'm completely fine with this, but maybe it makes sense to just catch anything other than our CDI Singleton?", "author": "geoand", "createdAt": "2020-12-02T10:14:13Z", "path": "extensions/arc/deployment/src/main/java/io/quarkus/arc/deployment/WrongAnnotationsProcessor.java", "diffHunk": "@@ -0,0 +1,88 @@\n+package io.quarkus.arc.deployment;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.function.Function;\n+\n+import org.jboss.jandex.AnnotationInstance;\n+import org.jboss.jandex.AnnotationTarget;\n+import org.jboss.jandex.DotName;\n+import org.jboss.jandex.IndexView;\n+\n+import io.quarkus.arc.deployment.ValidationPhaseBuildItem.ValidationErrorBuildItem;\n+import io.quarkus.deployment.annotations.BuildProducer;\n+import io.quarkus.deployment.annotations.BuildStep;\n+import io.quarkus.deployment.builditem.ApplicationIndexBuildItem;\n+\n+public class WrongAnnotationsProcessor {\n+\n+    @BuildStep\n+    void detect(ArcConfig config, ApplicationIndexBuildItem applicationIndex,\n+            BuildProducer<ValidationErrorBuildItem> validationError) {\n+\n+        if (!config.detectWrongAnnotations) {\n+            return;\n+        }\n+\n+        IndexView index = applicationIndex.getIndex();\n+        List<WrongAnnotation> wrongAnnotations = new ArrayList<>();\n+        Function<AnnotationInstance, String> singletonFun = new Function<AnnotationInstance, String>() {\n+\n+            @Override\n+            public String apply(AnnotationInstance annotationInstance) {\n+                return String.format(\"%s declared on %s, use @javax.inject.Singleton instead\",\n+                        annotationInstance.toString(false), getTargetInfo(annotationInstance));\n+            }\n+        };\n+        wrongAnnotations.add(new WrongAnnotation(DotName.createSimple(\"com.google.inject.Singleton\"), singletonFun));\n+        wrongAnnotations.add(new WrongAnnotation(DotName.createSimple(\"javax.ejb.Singleton\"), singletonFun));\n+        wrongAnnotations.add(new WrongAnnotation(DotName.createSimple(\"groovy.lang.Singleton\"), singletonFun));\n+        wrongAnnotations.add(new WrongAnnotation(DotName.createSimple(\"jakarta.ejb.Singleton\"), singletonFun));", "originalCommit": "e995483a4375ac0f9a59445c7371b4cae4667271", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDA1MTgxNQ==", "url": "https://github.com/quarkusio/quarkus/pull/13619#discussion_r534051815", "bodyText": "I don't understand. What do you mean with \"to just catch anything\"?", "author": "mkouba", "createdAt": "2020-12-02T10:18:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDA0ODc0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDA1MzY3OQ==", "url": "https://github.com/quarkusio/quarkus/pull/13619#discussion_r534053679", "bodyText": "I mean, if the simple class name is Singleton but the full class name is not javax.inject.Singleton, throw the exception", "author": "geoand", "createdAt": "2020-12-02T10:21:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDA0ODc0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDA1NTUwMg==", "url": "https://github.com/quarkusio/quarkus/pull/13619#discussion_r534055502", "bodyText": "I think that would be too dangerous and I would prefer we keep a list of the usual suspects.", "author": "gsmet", "createdAt": "2020-12-02T10:24:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDA0ODc0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDA1OTU0NA==", "url": "https://github.com/quarkusio/quarkus/pull/13619#discussion_r534059544", "bodyText": "I mean, if the simple class name is Singleton but the full class name is not javax.inject.Singleton, throw the exception\n\nWe would have to (1) iterate over all annotations in all classes, (2) identify all annotations with simple name == Singleton and then find all occurences of those... That might be quite expensive.\n\nI think that would be too dangerous and I would prefer we keep a list of the usual suspects.\n\nI agree. In theory, there can be a completely legit @*.Singleton used in the app.", "author": "mkouba", "createdAt": "2020-12-02T10:29:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDA0ODc0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDA1OTU3MA==", "url": "https://github.com/quarkusio/quarkus/pull/13619#discussion_r534059570", "bodyText": "I don't see how it would be dangerous, but I am perfectly fine with keeping it simple", "author": "geoand", "createdAt": "2020-12-02T10:29:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDA0ODc0Nw=="}], "type": "inlineReview"}]}