{"pr_number": 10423, "pr_title": "Created UberJarFormatWorksTest", "pr_createdAt": "2020-07-02T09:44:00Z", "pr_url": "https://github.com/quarkusio/quarkus/pull/10423", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk1NTk5OQ==", "url": "https://github.com/quarkusio/quarkus/pull/10423#discussion_r448955999", "bodyText": "No need to have this as static. It can probably just be private.", "author": "geoand", "createdAt": "2020-07-02T12:11:42Z", "path": "integration-tests/gradle/src/test/java/io/quarkus/gradle/UberJarFormatWorksTest.java", "diffHunk": "@@ -0,0 +1,85 @@\n+package io.quarkus.gradle;\n+\n+import io.quarkus.test.devmode.util.DevModeTestUtils;\n+import org.apache.commons.io.FileUtils;\n+import org.apache.log4j.Logger;\n+import org.awaitility.core.ConditionTimeoutException;\n+import org.junit.jupiter.api.Test;\n+\n+import java.io.File;\n+import java.nio.file.Path;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Supplier;\n+\n+import static io.quarkus.gradle.LaunchUtils.launch;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.awaitility.Awaitility.await;\n+\n+public class UberJarFormatWorksTest extends QuarkusGradleWrapperTestBase{\n+\n+    private static Future<?> jarRun;\n+\n+    @Test\n+    public void testUberJarFormatWorks() throws Exception {\n+\n+        final File projectDir = getProjectDir(\"test-uber-jar-format-works\");\n+        runGradleWrapper(projectDir, \"clean\", \"build\");\n+        final Path quarkusApp = projectDir.toPath().resolve(\"build\");\n+        assertThat(quarkusApp).exists();\n+        Path jar = quarkusApp.resolve(\"code-with-quarkus-1.0.0-SNAPSHOT-runner.jar\");\n+        assertThat(jar).exists();\n+\n+        File output = new File(projectDir, \"build/output.log\");\n+        output.createNewFile();\n+        Process process = launch(jar, output);\n+        try {\n+            // Wait until server up\n+            dumpFileContentOnFailure(() -> {\n+                await()\n+                        .pollDelay(1, TimeUnit.SECONDS)\n+                        .atMost(1, TimeUnit.MINUTES).until(() -> DevModeTestUtils.getHttpResponse(\"/hello\", 200));\n+                return null;\n+            }, output, ConditionTimeoutException.class);\n+\n+            String logs = FileUtils.readFileToString(output, \"UTF-8\");\n+\n+            assertThatOutputWorksCorrectly(logs);\n+\n+            // test that the application name and version are properly set\n+            assertThat(DevModeTestUtils.getHttpResponse(\"/hello\", getQuarkusDevBrokenReason()).equals(\"hello\"));\n+        } finally {\n+            process.destroy();\n+        }\n+\n+    }\n+\n+    static void assertThatOutputWorksCorrectly(String logs) {", "originalCommit": "ec0a3805da1c59d5ac9d3a4ef1bcfaa81c57fc5a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk1ODU4NA==", "url": "https://github.com/quarkusio/quarkus/pull/10423#discussion_r448958584", "bodyText": "Okk", "author": "Garima829", "createdAt": "2020-07-02T12:16:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk1NTk5OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk3MjIwOA==", "url": "https://github.com/quarkusio/quarkus/pull/10423#discussion_r448972208", "bodyText": "This is static in fast jar test as well,should I change there ?", "author": "Garima829", "createdAt": "2020-07-02T12:41:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk1NTk5OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk3Mjc1Mw==", "url": "https://github.com/quarkusio/quarkus/pull/10423#discussion_r448972753", "bodyText": "Yup", "author": "geoand", "createdAt": "2020-07-02T12:43:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk1NTk5OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk1NjIzOQ==", "url": "https://github.com/quarkusio/quarkus/pull/10423#discussion_r448956239", "bodyText": "This method is the same as what you added in the other test. Best not duplicate it", "author": "geoand", "createdAt": "2020-07-02T12:12:10Z", "path": "integration-tests/gradle/src/test/java/io/quarkus/gradle/UberJarFormatWorksTest.java", "diffHunk": "@@ -0,0 +1,85 @@\n+package io.quarkus.gradle;\n+\n+import io.quarkus.test.devmode.util.DevModeTestUtils;\n+import org.apache.commons.io.FileUtils;\n+import org.apache.log4j.Logger;\n+import org.awaitility.core.ConditionTimeoutException;\n+import org.junit.jupiter.api.Test;\n+\n+import java.io.File;\n+import java.nio.file.Path;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Supplier;\n+\n+import static io.quarkus.gradle.LaunchUtils.launch;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.awaitility.Awaitility.await;\n+\n+public class UberJarFormatWorksTest extends QuarkusGradleWrapperTestBase{\n+\n+    private static Future<?> jarRun;\n+\n+    @Test\n+    public void testUberJarFormatWorks() throws Exception {\n+\n+        final File projectDir = getProjectDir(\"test-uber-jar-format-works\");\n+        runGradleWrapper(projectDir, \"clean\", \"build\");\n+        final Path quarkusApp = projectDir.toPath().resolve(\"build\");\n+        assertThat(quarkusApp).exists();\n+        Path jar = quarkusApp.resolve(\"code-with-quarkus-1.0.0-SNAPSHOT-runner.jar\");\n+        assertThat(jar).exists();\n+\n+        File output = new File(projectDir, \"build/output.log\");\n+        output.createNewFile();\n+        Process process = launch(jar, output);\n+        try {\n+            // Wait until server up\n+            dumpFileContentOnFailure(() -> {\n+                await()\n+                        .pollDelay(1, TimeUnit.SECONDS)\n+                        .atMost(1, TimeUnit.MINUTES).until(() -> DevModeTestUtils.getHttpResponse(\"/hello\", 200));\n+                return null;\n+            }, output, ConditionTimeoutException.class);\n+\n+            String logs = FileUtils.readFileToString(output, \"UTF-8\");\n+\n+            assertThatOutputWorksCorrectly(logs);\n+\n+            // test that the application name and version are properly set\n+            assertThat(DevModeTestUtils.getHttpResponse(\"/hello\", getQuarkusDevBrokenReason()).equals(\"hello\"));\n+        } finally {\n+            process.destroy();\n+        }\n+\n+    }\n+\n+    static void assertThatOutputWorksCorrectly(String logs) {\n+        assertThat(logs.isEmpty()).isFalse();\n+        String infoLogLevel = \"INFO\";\n+        assertThat(logs.contains(infoLogLevel)).isTrue();\n+        assertThat(logs.contains(\"cdi, resteasy\")).isTrue();\n+    }\n+\n+    private void dumpFileContentOnFailure(final Callable<Void> operation, final File logFile,", "originalCommit": "ec0a3805da1c59d5ac9d3a4ef1bcfaa81c57fc5a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk1ODczNg==", "url": "https://github.com/quarkusio/quarkus/pull/10423#discussion_r448958736", "bodyText": "Okk", "author": "Garima829", "createdAt": "2020-07-02T12:16:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk1NjIzOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk1NjYyOA==", "url": "https://github.com/quarkusio/quarkus/pull/10423#discussion_r448956628", "bodyText": "The name of the method is incorrect since it has nothing to do with quarkus dev", "author": "geoand", "createdAt": "2020-07-02T12:12:52Z", "path": "integration-tests/gradle/src/test/java/io/quarkus/gradle/UberJarFormatWorksTest.java", "diffHunk": "@@ -0,0 +1,85 @@\n+package io.quarkus.gradle;\n+\n+import io.quarkus.test.devmode.util.DevModeTestUtils;\n+import org.apache.commons.io.FileUtils;\n+import org.apache.log4j.Logger;\n+import org.awaitility.core.ConditionTimeoutException;\n+import org.junit.jupiter.api.Test;\n+\n+import java.io.File;\n+import java.nio.file.Path;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Supplier;\n+\n+import static io.quarkus.gradle.LaunchUtils.launch;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.awaitility.Awaitility.await;\n+\n+public class UberJarFormatWorksTest extends QuarkusGradleWrapperTestBase{\n+\n+    private static Future<?> jarRun;\n+\n+    @Test\n+    public void testUberJarFormatWorks() throws Exception {\n+\n+        final File projectDir = getProjectDir(\"test-uber-jar-format-works\");\n+        runGradleWrapper(projectDir, \"clean\", \"build\");\n+        final Path quarkusApp = projectDir.toPath().resolve(\"build\");\n+        assertThat(quarkusApp).exists();\n+        Path jar = quarkusApp.resolve(\"code-with-quarkus-1.0.0-SNAPSHOT-runner.jar\");\n+        assertThat(jar).exists();\n+\n+        File output = new File(projectDir, \"build/output.log\");\n+        output.createNewFile();\n+        Process process = launch(jar, output);\n+        try {\n+            // Wait until server up\n+            dumpFileContentOnFailure(() -> {\n+                await()\n+                        .pollDelay(1, TimeUnit.SECONDS)\n+                        .atMost(1, TimeUnit.MINUTES).until(() -> DevModeTestUtils.getHttpResponse(\"/hello\", 200));\n+                return null;\n+            }, output, ConditionTimeoutException.class);\n+\n+            String logs = FileUtils.readFileToString(output, \"UTF-8\");\n+\n+            assertThatOutputWorksCorrectly(logs);\n+\n+            // test that the application name and version are properly set\n+            assertThat(DevModeTestUtils.getHttpResponse(\"/hello\", getQuarkusDevBrokenReason()).equals(\"hello\"));\n+        } finally {\n+            process.destroy();\n+        }\n+\n+    }\n+\n+    static void assertThatOutputWorksCorrectly(String logs) {\n+        assertThat(logs.isEmpty()).isFalse();\n+        String infoLogLevel = \"INFO\";\n+        assertThat(logs.contains(infoLogLevel)).isTrue();\n+        assertThat(logs.contains(\"cdi, resteasy\")).isTrue();\n+    }\n+\n+    private void dumpFileContentOnFailure(final Callable<Void> operation, final File logFile,\n+                                          final Class<? extends Throwable> failureType) throws Exception {\n+\n+        final Logger log = Logger.getLogger(FastJarFormatWorksTest.class);\n+        try {\n+            operation.call();\n+        } catch (Throwable t) {\n+            log.error(\"Dumping logs that were generated in \" + logFile + \" for an operation that resulted in \"\n+                    + t.getClass().getName() + \":\", t);\n+\n+            throw t;\n+        }\n+    }\n+\n+    private static Supplier<String> getQuarkusDevBrokenReason() {", "originalCommit": "ec0a3805da1c59d5ac9d3a4ef1bcfaa81c57fc5a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk1OTM1MQ==", "url": "https://github.com/quarkusio/quarkus/pull/10423#discussion_r448959351", "bodyText": "What should I use then ?", "author": "Garima829", "createdAt": "2020-07-02T12:18:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk1NjYyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk2MzUxOQ==", "url": "https://github.com/quarkusio/quarkus/pull/10423#discussion_r448963519", "bodyText": "It doesn't even need to be a method - it can be \"inlined\" into the call-site ( assertThat(DevModeTestUtils....)", "author": "geoand", "createdAt": "2020-07-02T12:25:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk1NjYyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk2NzA2MQ==", "url": "https://github.com/quarkusio/quarkus/pull/10423#discussion_r448967061", "bodyText": "Okk", "author": "Garima829", "createdAt": "2020-07-02T12:32:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk1NjYyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk3MTczNg==", "url": "https://github.com/quarkusio/quarkus/pull/10423#discussion_r448971736", "bodyText": "Should I do the same for Fast jar test too ?", "author": "Garima829", "createdAt": "2020-07-02T12:41:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk1NjYyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk3MjMzMw==", "url": "https://github.com/quarkusio/quarkus/pull/10423#discussion_r448972333", "bodyText": "Sure", "author": "geoand", "createdAt": "2020-07-02T12:42:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk1NjYyOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk1Njg5OQ==", "url": "https://github.com/quarkusio/quarkus/pull/10423#discussion_r448956899", "bodyText": "Let's give it a more descriptive name, like uber-jar-test", "author": "geoand", "createdAt": "2020-07-02T12:13:27Z", "path": "integration-tests/gradle/src/test/resources/test-uber-jar-format-works/settings.gradle", "diffHunk": "@@ -0,0 +1,11 @@\n+pluginManagement {\n+    repositories {\n+        mavenLocal()\n+        mavenCentral()\n+        gradlePluginPortal()\n+    }\n+    plugins {\n+      id 'io.quarkus' version \"${quarkusPluginVersion}\"\n+    }\n+}\n+rootProject.name='code-with-quarkus'", "originalCommit": "ec0a3805da1c59d5ac9d3a4ef1bcfaa81c57fc5a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk1OTQwMA==", "url": "https://github.com/quarkusio/quarkus/pull/10423#discussion_r448959400", "bodyText": "Cool", "author": "Garima829", "createdAt": "2020-07-02T12:18:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk1Njg5OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk1NzQyNw==", "url": "https://github.com/quarkusio/quarkus/pull/10423#discussion_r448957427", "bodyText": "This file shouldn't be needed", "author": "geoand", "createdAt": "2020-07-02T12:14:25Z", "path": "integration-tests/gradle/src/test/resources/test-uber-jar-format-works/src/test/resources/application.properties", "diffHunk": "@@ -0,0 +1,7 @@\n+# Configuration file", "originalCommit": "ec0a3805da1c59d5ac9d3a4ef1bcfaa81c57fc5a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk1OTQ5Mg==", "url": "https://github.com/quarkusio/quarkus/pull/10423#discussion_r448959492", "bodyText": "Okk", "author": "Garima829", "createdAt": "2020-07-02T12:18:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk1NzQyNw=="}], "type": "inlineReview"}, {"oid": "9f32403b68dd3a1c42bac3a2f3c8adad175166ae", "url": "https://github.com/quarkusio/quarkus/commit/9f32403b68dd3a1c42bac3a2f3c8adad175166ae", "message": "Updated Uber-Jar test", "committedDate": "2020-07-02T13:25:10Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTAwMzIyMw==", "url": "https://github.com/quarkusio/quarkus/pull/10423#discussion_r449003223", "bodyText": "This isn't a good idea since you introduce unnecessary coupling between the test classes. It would be better if you moved this method to LaunchUtils", "author": "geoand", "createdAt": "2020-07-02T13:31:01Z", "path": "integration-tests/gradle/src/test/java/io/quarkus/gradle/FastJarFormatWorksTest.java", "diffHunk": "@@ -50,20 +49,22 @@ public void testFastJarFormatWorks() throws Exception {\n             assertThatOutputWorksCorrectly(logs);\n \n             // test that the application name and version are properly set\n-            assertThat(DevModeTestUtils.getHttpResponse(\"/hello\", getQuarkusDevBrokenReason()).equals(\"hello\"));\n+            assertThat(DevModeTestUtils.getHttpResponse(\"/hello\", () -> {\n+                return jarRun == null ? null : jarRun.isDone() ? \"jar run mode has terminated\" : null;\n+            }).equals(\"hello\"));\n         } finally {\n             process.destroy();\n         }\n     }\n \n-    static void assertThatOutputWorksCorrectly(String logs) {\n+    private void assertThatOutputWorksCorrectly(String logs) {\n         assertThat(logs.isEmpty()).isFalse();\n         String infoLogLevel = \"INFO\";\n         assertThat(logs.contains(infoLogLevel)).isTrue();\n         assertThat(logs.contains(\"cdi, resteasy\")).isTrue();\n     }\n \n-    private void dumpFileContentOnFailure(final Callable<Void> operation, final File logFile,\n+    protected static void dumpFileContentOnFailure(final Callable<Void> operation, final File logFile,", "originalCommit": "9f32403b68dd3a1c42bac3a2f3c8adad175166ae", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTAwNjU4Mg==", "url": "https://github.com/quarkusio/quarkus/pull/10423#discussion_r449006582", "bodyText": "Okk", "author": "Garima829", "createdAt": "2020-07-02T13:36:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTAwMzIyMw=="}], "type": "inlineReview"}, {"oid": "42facc8c37ee0f6b746f2f5a0a2df1d594a10855", "url": "https://github.com/quarkusio/quarkus/commit/42facc8c37ee0f6b746f2f5a0a2df1d594a10855", "message": "Updated Uber-Jar & Fast-jar test", "committedDate": "2020-07-02T13:40:25Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTAxMjQ5MA==", "url": "https://github.com/quarkusio/quarkus/pull/10423#discussion_r449012490", "bodyText": "No need to have this protected, just make it public please", "author": "geoand", "createdAt": "2020-07-02T13:44:58Z", "path": "integration-tests/gradle/src/test/java/io/quarkus/gradle/LaunchUtils.java", "diffHunk": "@@ -21,4 +23,18 @@ protected static Process launch(Path jar, File output) throws IOException {\n         return processBuilder.start();\n     }\n \n+    protected static void dumpFileContentOnFailure(final Callable<Void> operation, final File logFile,", "originalCommit": "42facc8c37ee0f6b746f2f5a0a2df1d594a10855", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTAxNDE0MQ==", "url": "https://github.com/quarkusio/quarkus/pull/10423#discussion_r449014141", "bodyText": "Okk", "author": "Garima829", "createdAt": "2020-07-02T13:47:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTAxMjQ5MA=="}], "type": "inlineReview"}, {"oid": "2d5db752bc3729d6be1f09e26b0df7d060e4ce85", "url": "https://github.com/quarkusio/quarkus/commit/2d5db752bc3729d6be1f09e26b0df7d060e4ce85", "message": "Updated Uber-Jar & Fast-jar test", "committedDate": "2020-07-02T13:48:46Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTAxODc5Ng==", "url": "https://github.com/quarkusio/quarkus/pull/10423#discussion_r449018796", "bodyText": "Sorry, I missed this. You shouldn't this. A log is always per class. So just add\nprivate static final Logger log = Logger.getLogger(LaunchUtils.class);\n\nas a field of LaunchUtils and that in this method instead of creating the log in the method", "author": "geoand", "createdAt": "2020-07-02T13:53:51Z", "path": "integration-tests/gradle/src/test/java/io/quarkus/gradle/LaunchUtils.java", "diffHunk": "@@ -21,4 +23,18 @@ protected static Process launch(Path jar, File output) throws IOException {\n         return processBuilder.start();\n     }\n \n+    public static void dumpFileContentOnFailure(final Callable<Void> operation, final File logFile,\n+                                                   final Class<? extends Throwable> failureType) throws Exception {\n+\n+        final Logger log = Logger.getLogger(FastJarFormatWorksTest.class);", "originalCommit": "2d5db752bc3729d6be1f09e26b0df7d060e4ce85", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTAxOTMwNw==", "url": "https://github.com/quarkusio/quarkus/pull/10423#discussion_r449019307", "bodyText": "After making the change and ensuring that the test passes, you can mark the PR as ready for review", "author": "geoand", "createdAt": "2020-07-02T13:54:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTAxODc5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTAyMjM2NA==", "url": "https://github.com/quarkusio/quarkus/pull/10423#discussion_r449022364", "bodyText": "private static final Logger log gives two errors to make Logger not static and not private", "author": "Garima829", "createdAt": "2020-07-02T13:58:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTAxODc5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTAyNDM3Mw==", "url": "https://github.com/quarkusio/quarkus/pull/10423#discussion_r449024373", "bodyText": "Here is an example of what I mean: \n  \n    \n      quarkus/extensions/amazon-lambda/runtime/src/main/java/io/quarkus/amazon/lambda/runtime/AmazonLambdaRecorder.java\n    \n    \n         Line 30\n      in\n      259758b\n    \n    \n    \n    \n\n        \n          \n           private static final Logger log = Logger.getLogger(AmazonLambdaRecorder.class);", "author": "geoand", "createdAt": "2020-07-02T14:01:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTAxODc5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTAyNzQwMA==", "url": "https://github.com/quarkusio/quarkus/pull/10423#discussion_r449027400", "bodyText": "Got it, I was doing it inside the method that's why had the error", "author": "Garima829", "createdAt": "2020-07-02T14:06:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTAxODc5Ng=="}], "type": "inlineReview"}, {"oid": "dd023c5417cb6f03ba8ad54603aea6d0ffe95ba2", "url": "https://github.com/quarkusio/quarkus/commit/dd023c5417cb6f03ba8ad54603aea6d0ffe95ba2", "message": "Updated Uber-Jar,Fast-jar test and LaunchUtils", "committedDate": "2020-07-02T14:14:51Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTAzNTExNg==", "url": "https://github.com/quarkusio/quarkus/pull/10423#discussion_r449035116", "bodyText": "Let's get rid of this comment please", "author": "geoand", "createdAt": "2020-07-02T14:17:32Z", "path": "integration-tests/gradle/src/test/java/io/quarkus/gradle/LaunchUtils.java", "diffHunk": "@@ -5,10 +5,15 @@\n import java.nio.file.Path;\n import java.util.ArrayList;\n import java.util.List;\n+import java.util.concurrent.Callable;\n+\n+// import org.apache.log4j.Logger;", "originalCommit": "dd023c5417cb6f03ba8ad54603aea6d0ffe95ba2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTAzNTQxNg==", "url": "https://github.com/quarkusio/quarkus/pull/10423#discussion_r449035416", "bodyText": "I am so sorry", "author": "Garima829", "createdAt": "2020-07-02T14:18:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTAzNTExNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTAzNjU3NA==", "url": "https://github.com/quarkusio/quarkus/pull/10423#discussion_r449036574", "bodyText": "No worries", "author": "geoand", "createdAt": "2020-07-02T14:19:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTAzNTExNg=="}], "type": "inlineReview"}, {"oid": "b8872db079ae263e3d5eb9a2be498bb7e3bfe851", "url": "https://github.com/quarkusio/quarkus/commit/b8872db079ae263e3d5eb9a2be498bb7e3bfe851", "message": "Updated Uber-Jar,Fast-jar test and LaunchUtils", "committedDate": "2020-07-02T14:18:57Z", "type": "forcePushed"}, {"oid": "a763df576ef86bd829bbfb3aa0bf6ea94be8a9da", "url": "https://github.com/quarkusio/quarkus/commit/a763df576ef86bd829bbfb3aa0bf6ea94be8a9da", "message": "Updated Uber-Jar,Fast-jar test and LaunchUtils", "committedDate": "2020-07-02T14:20:40Z", "type": "commit"}, {"oid": "a763df576ef86bd829bbfb3aa0bf6ea94be8a9da", "url": "https://github.com/quarkusio/quarkus/commit/a763df576ef86bd829bbfb3aa0bf6ea94be8a9da", "message": "Updated Uber-Jar,Fast-jar test and LaunchUtils", "committedDate": "2020-07-02T14:20:40Z", "type": "forcePushed"}]}