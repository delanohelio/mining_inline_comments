{"pr_number": 9998, "pr_title": "Created Fast Jar test for Gradle", "pr_createdAt": "2020-06-15T06:45:05Z", "pr_url": "https://github.com/quarkusio/quarkus/pull/9998", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDAwMDcyMw==", "url": "https://github.com/quarkusio/quarkus/pull/9998#discussion_r440000723", "bodyText": "Please remove this if it's not going to be used.", "author": "geoand", "createdAt": "2020-06-15T08:09:33Z", "path": "devtools/gradle/src/functionalTest/java/io/quarkus/gradle/FastJarFormatWorksTest.java", "diffHunk": "@@ -0,0 +1,155 @@\n+package io.quarkus.gradle;\n+\n+import io.quarkus.test.devmode.util.DevModeTestUtils;\n+import io.quarkus.utilities.JavaBinFinder;\n+import org.apache.commons.io.FileUtils;\n+import org.gradle.testkit.runner.GradleRunner;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.InputStreamReader;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Predicate;\n+import java.util.regex.Pattern;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.fail;\n+import static org.awaitility.Awaitility.await;\n+\n+\n+public class FastJarFormatWorksTest extends QuarkusGradleTestBase{\n+\n+\n+    @Test\n+    public void testFastJarFormatWorks() throws IOException, URISyntaxException {\n+\n+        final File projectDir= getProjectDir(\"test-that-fast-jar-format-works-for-gradle\");\n+\n+        GradleRunner.create()\n+                .forwardOutput()\n+                .withPluginClasspath()\n+                .withArguments(arguments(\"package\", \"DskipTests\",\"-Dquarkus.package.type=fast-jar\"))\n+                .withProjectDir(projectDir)\n+                .build();\n+\n+//        await().atMost(1, TimeUnit.MINUTES).until(() -> result.getProcess() != null && !result.getProcess().isAlive());\n+//        assertThat(running.log()).containsIgnoringCase(\"BUILD SUCCESS\");\n+//        running.stop();", "originalCommit": "ff01c0ca313057d4cd7fdfae95824d6499a4a2c2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDE1Mzk2OQ==", "url": "https://github.com/quarkusio/quarkus/pull/9998#discussion_r440153969", "bodyText": "I wasn't able to replicate this part from the Maven test, do we actually need it here for testing the time limit?", "author": "Garima829", "createdAt": "2020-06-15T12:53:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDAwMDcyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDE1ODUyMA==", "url": "https://github.com/quarkusio/quarkus/pull/9998#discussion_r440158520", "bodyText": "Nope, we don't need it because it's handled automatically by Gradle", "author": "geoand", "createdAt": "2020-06-15T13:01:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDAwMDcyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDE3OTc2Mg==", "url": "https://github.com/quarkusio/quarkus/pull/9998#discussion_r440179762", "bodyText": "Okay", "author": "Garima829", "createdAt": "2020-06-15T13:35:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDAwMDcyMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDAwMTE1MQ==", "url": "https://github.com/quarkusio/quarkus/pull/9998#discussion_r440001151", "bodyText": "Same here", "author": "geoand", "createdAt": "2020-06-15T08:10:16Z", "path": "devtools/gradle/src/functionalTest/java/io/quarkus/gradle/FastJarFormatWorksTest.java", "diffHunk": "@@ -0,0 +1,155 @@\n+package io.quarkus.gradle;\n+\n+import io.quarkus.test.devmode.util.DevModeTestUtils;\n+import io.quarkus.utilities.JavaBinFinder;\n+import org.apache.commons.io.FileUtils;\n+import org.gradle.testkit.runner.GradleRunner;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.InputStreamReader;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Predicate;\n+import java.util.regex.Pattern;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.fail;\n+import static org.awaitility.Awaitility.await;\n+\n+\n+public class FastJarFormatWorksTest extends QuarkusGradleTestBase{\n+\n+\n+    @Test\n+    public void testFastJarFormatWorks() throws IOException, URISyntaxException {\n+\n+        final File projectDir= getProjectDir(\"test-that-fast-jar-format-works-for-gradle\");\n+\n+        GradleRunner.create()\n+                .forwardOutput()\n+                .withPluginClasspath()\n+                .withArguments(arguments(\"package\", \"DskipTests\",\"-Dquarkus.package.type=fast-jar\"))\n+                .withProjectDir(projectDir)\n+                .build();\n+\n+//        await().atMost(1, TimeUnit.MINUTES).until(() -> result.getProcess() != null && !result.getProcess().isAlive());\n+//        assertThat(running.log()).containsIgnoringCase(\"BUILD SUCCESS\");\n+//        running.stop();\n+\n+        Path jar=projectDir.toPath().toAbsolutePath().resolve(Paths.get(\"target/acme-1.0-SNAPSHOT-runner.jar\"));\n+        Assertions.assertFalse(Files.exists(jar));\n+\n+        jar = projectDir.toPath().toAbsolutePath().resolve(Paths.get(\"target/quarkus-app/quarkus-run.jar\"));\n+        Assertions.assertTrue(Files.exists(jar));\n+\n+        File output = new File(projectDir, \"target/output.log\");\n+        output.createNewFile();\n+\n+        Process process = doLaunch(jar, output);\n+        try {\n+            // Wait until server up\n+            await()\n+                    .pollDelay(1, TimeUnit.SECONDS)\n+                    .atMost(1, TimeUnit.MINUTES).until(() -> DevModeTestUtils.getHttpResponse(\"/app/hello/package\", 200));\n+\n+            String logs = FileUtils.readFileToString(output, \"UTF-8\");\n+\n+            assertThatOutputWorksCorrectly(logs);\n+\n+            // test that the application name and version are properly set\n+            assertApplicationPropertiesSetCorrectly();\n+            assertResourceReadingFromClassPathWorksCorrectly(\"\");\n+        } finally {\n+            process.destroy();\n+        }\n+\n+    }\n+\n+    private Process doLaunch(Path jar, File output) throws IOException {\n+        List<String> commands = new ArrayList<>();\n+        commands.add(JavaBinFinder.findBin());\n+        commands.add(\"-jar\");\n+        commands.add(jar.toString());\n+        ProcessBuilder processBuilder = new ProcessBuilder(commands.toArray(new String[0]));\n+        processBuilder.redirectOutput(output);\n+        processBuilder.redirectError(output);\n+        return processBuilder.start();\n+    }\n+\n+    static void assertResourceReadingFromClassPathWorksCorrectly(String path) {\n+        try {\n+            URL url = new URL(\"http://localhost:8080\" + path + \"/app/classpathResources\");\n+            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n+            // the default Accept header used by HttpURLConnection is not compatible with RESTEasy negotiation as it uses q=.2\n+            connection.setRequestProperty(\"Accept\", \"text/html, *; q=0.2, */*; q=0.2\");\n+            if (connection.getResponseCode() != HttpURLConnection.HTTP_OK) {\n+                failResourcesFromTheClasspath();\n+            }\n+            try (BufferedReader br = new BufferedReader(\n+                    new InputStreamReader(connection.getInputStream(), StandardCharsets.UTF_8))) {\n+                String output = br.readLine();\n+                assertThat(output).isEqualTo(\"success\");\n+            }\n+        } catch (IOException e) {\n+            failResourcesFromTheClasspath();\n+        }\n+    }\n+\n+    private static void failResourcesFromTheClasspath() {\n+        fail(\"Failed to assert that the application properly reads resources from the classpath\");\n+    }\n+\n+    // we don't use REST Assured because its bundled Groovy version clashes with Maven Invoker's (which is also used in this module)\n+    static void assertApplicationPropertiesSetCorrectly() {\n+        assertApplicationPropertiesSetCorrectly(\"\");\n+    }\n+\n+    // we don't use REST Assured because its bundled Groovy version clashes with Maven Invoker's (which is also used in this module)\n+    static void assertApplicationPropertiesSetCorrectly(String prefix) {", "originalCommit": "ff01c0ca313057d4cd7fdfae95824d6499a4a2c2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDE2MDI3Ng==", "url": "https://github.com/quarkusio/quarkus/pull/9998#discussion_r440160276", "bodyText": "Darn, it seems like this comment is out of context:\nI meant that I am pretty sure our Gradle tests have a much better way of doing this test. See method getHttpResponse from QuarkusDevGradleTestBase (which should probably be moved to QuarkusGradleTestBase)", "author": "geoand", "createdAt": "2020-06-15T13:04:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDAwMTE1MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDE4MzA2Ng==", "url": "https://github.com/quarkusio/quarkus/pull/9998#discussion_r440183066", "bodyText": "On it", "author": "Garima829", "createdAt": "2020-06-15T13:40:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDAwMTE1MQ=="}], "type": "inlineReview"}, {"oid": "bde0242fe4efee5adfbb0a221a25249077aad0a6", "url": "https://github.com/quarkusio/quarkus/commit/bde0242fe4efee5adfbb0a221a25249077aad0a6", "message": "Created Fast Jar test for Gradle\n\nMade changes in FastJarTest of Gradle Rebase", "committedDate": "2020-06-16T10:10:29Z", "type": "forcePushed"}, {"oid": "edb9ac7f7058ec8c90bb3d2e36b5184bfe8af9f2", "url": "https://github.com/quarkusio/quarkus/commit/edb9ac7f7058ec8c90bb3d2e36b5184bfe8af9f2", "message": "Created Fast Jar test for Gradle\n\nMade changes in FastJarTest of Gradle Rebase", "committedDate": "2020-06-16T12:40:10Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDg0MTU5Mg==", "url": "https://github.com/quarkusio/quarkus/pull/9998#discussion_r440841592", "bodyText": "This should probably also be replaced with the proper getHttpResponse", "author": "geoand", "createdAt": "2020-06-16T13:18:04Z", "path": "devtools/gradle/src/functionalTest/java/io/quarkus/gradle/FastJarFormatWorksTest.java", "diffHunk": "@@ -0,0 +1,134 @@\n+package io.quarkus.gradle;\n+\n+import io.quarkus.test.devmode.util.DevModeTestUtils;\n+import io.quarkus.utilities.JavaBinFinder;\n+import org.apache.commons.io.FileUtils;\n+import org.gradle.testkit.runner.GradleRunner;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.InputStreamReader;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Predicate;\n+import java.util.function.Supplier;\n+import java.util.regex.Pattern;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.fail;\n+import static org.awaitility.Awaitility.await;\n+\n+public class FastJarFormatWorksTest extends QuarkusGradleTestBase {\n+\n+    private Future<?> quarkusDev;\n+\n+    @Test\n+    public void testFastJarFormatWorks() throws IOException, URISyntaxException {\n+\n+        final File projectDir= getProjectDir(\"test-that-fast-jar-format-works-for-gradle\");\n+\n+        GradleRunner.create()\n+                .forwardOutput()\n+                .withPluginClasspath()\n+                .withArguments(arguments(\"package\", \"DskipTests\",\"-Dquarkus.package.type=fast-jar\"))\n+                .withProjectDir(projectDir)\n+                .build();\n+\n+        Path jar=projectDir.toPath().toAbsolutePath().resolve(Paths.get(\"target/acme-1.0-SNAPSHOT-runner.jar\"));\n+        Assertions.assertFalse(Files.exists(jar));\n+\n+        jar = projectDir.toPath().toAbsolutePath().resolve(Paths.get(\"target/quarkus-app/quarkus-run.jar\"));\n+        Assertions.assertTrue(Files.exists(jar));\n+\n+        File output = new File(projectDir, \"target/output.log\");\n+        output.createNewFile();\n+\n+        Process process = doLaunch(jar, output);\n+        try {\n+            // Wait until server up\n+            await()\n+                    .pollDelay(1, TimeUnit.SECONDS)\n+                    .atMost(1, TimeUnit.MINUTES).until(() -> DevModeTestUtils.getHttpResponse(\"/app/hello/package\", 200));\n+\n+            String logs = FileUtils.readFileToString(output, \"UTF-8\");\n+\n+            assertThatOutputWorksCorrectly(logs);\n+\n+            // test that the application name and version are properly set\n+            getHttpResponse();\n+            assertResourceReadingFromClassPathWorksCorrectly(\"\");\n+        } finally {\n+            process.destroy();\n+        }\n+\n+    }\n+\n+    private Process doLaunch(Path jar, File output) throws IOException {\n+        List<String> commands = new ArrayList<>();\n+        commands.add(JavaBinFinder.findBin());\n+        commands.add(\"-jar\");\n+        commands.add(jar.toString());\n+        ProcessBuilder processBuilder = new ProcessBuilder(commands.toArray(new String[0]));\n+        processBuilder.redirectOutput(output);\n+        processBuilder.redirectError(output);\n+        return processBuilder.start();\n+    }\n+\n+    static void assertResourceReadingFromClassPathWorksCorrectly(String path) {", "originalCommit": "edb9ac7f7058ec8c90bb3d2e36b5184bfe8af9f2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDg1Mzk5NQ==", "url": "https://github.com/quarkusio/quarkus/pull/9998#discussion_r440853995", "bodyText": "Okayy, will do", "author": "Garima829", "createdAt": "2020-06-16T13:35:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDg0MTU5Mg=="}], "type": "inlineReview"}, {"oid": "27289762095b2b56412b2f48bb4d6897f96367f3", "url": "https://github.com/quarkusio/quarkus/commit/27289762095b2b56412b2f48bb4d6897f96367f3", "message": "Updated the Fast Jar Format Works test, Assertion error still there", "committedDate": "2020-06-17T20:29:25Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzIwMTkxOA==", "url": "https://github.com/quarkusio/quarkus/pull/9998#discussion_r443201918", "bodyText": "This change doesn't look right...", "author": "geoand", "createdAt": "2020-06-21T09:45:49Z", "path": "integration-tests/gradle/src/test/java/io/quarkus/gradle/BasicJavaPlatformModuleTest.java", "diffHunk": "@@ -12,7 +12,7 @@\n     @Test\n     public void testBasicPlatformModuleBuild() throws Exception {\n \n-        final File projectDir = getProjectDir(\"basic-java-platform-module\");\n+        final File projectDir = getProjectDir(\"basic-java-p    latform-module\");", "originalCommit": "27289762095b2b56412b2f48bb4d6897f96367f3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzIwOTU1MQ==", "url": "https://github.com/quarkusio/quarkus/pull/9998#discussion_r443209551", "bodyText": "Yes, editing it", "author": "Garima829", "createdAt": "2020-06-21T11:22:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzIwMTkxOA=="}], "type": "inlineReview"}, {"oid": "915aeec9471a619811e795c448ce83e23a9e9ad6", "url": "https://github.com/quarkusio/quarkus/commit/915aeec9471a619811e795c448ce83e23a9e9ad6", "message": "Updates FastJarFormatWorksTest and ExampleResource", "committedDate": "2020-06-21T16:00:57Z", "type": "forcePushed"}, {"oid": "6bd024a8c261b5fa26e2fdc66ae6b5e833b14a54", "url": "https://github.com/quarkusio/quarkus/commit/6bd024a8c261b5fa26e2fdc66ae6b5e833b14a54", "message": "Updated ExampleResource and application.properties, deleted ExampleResourceTest for FastJarTest", "committedDate": "2020-06-22T12:21:15Z", "type": "forcePushed"}, {"oid": "e1167321ac89dcb7d50cbde7b517ff0f62f84327", "url": "https://github.com/quarkusio/quarkus/commit/e1167321ac89dcb7d50cbde7b517ff0f62f84327", "message": "FastJarTest updated and deleted .gradle directory", "committedDate": "2020-06-22T13:55:13Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzU3ODUxNA==", "url": "https://github.com/quarkusio/quarkus/pull/9998#discussion_r443578514", "bodyText": "This file can be deleted", "author": "geoand", "createdAt": "2020-06-22T13:59:43Z", "path": "integration-tests/gradle/src/test/resources/test-that-fast-jar-format-works/src/main/resources/META-INF/resources/index.html", "diffHunk": "@@ -0,0 +1,152 @@\n+<!DOCTYPE html>", "originalCommit": "e1167321ac89dcb7d50cbde7b517ff0f62f84327", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzU4MDQ1Mg==", "url": "https://github.com/quarkusio/quarkus/pull/9998#discussion_r443580452", "bodyText": "On it", "author": "Garima829", "createdAt": "2020-06-22T14:02:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzU3ODUxNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzU3ODc3Mg==", "url": "https://github.com/quarkusio/quarkus/pull/9998#discussion_r443578772", "bodyText": "Why were these changed?", "author": "geoand", "createdAt": "2020-06-22T14:00:07Z", "path": "pom.xml", "diffHunk": "@@ -31,7 +31,7 @@\n     </scm>\n \n     <properties>\n-        <graalvmHome>${env.GRAALVM_HOME}</graalvmHome>\n+        <graalvmHome>$GRAALVM_HOME</graalvmHome>", "originalCommit": "e1167321ac89dcb7d50cbde7b517ff0f62f84327", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzU4MDMyNg==", "url": "https://github.com/quarkusio/quarkus/pull/9998#discussion_r443580326", "bodyText": "It was giving some error, I changed these before the first commit i guess, should I undo this?", "author": "Garima829", "createdAt": "2020-06-22T14:02:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzU3ODc3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzU4MTU0Mg==", "url": "https://github.com/quarkusio/quarkus/pull/9998#discussion_r443581542", "bodyText": "Yes please", "author": "geoand", "createdAt": "2020-06-22T14:04:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzU3ODc3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzU4MTY4Ng==", "url": "https://github.com/quarkusio/quarkus/pull/9998#discussion_r443581686", "bodyText": "Okk", "author": "Garima829", "createdAt": "2020-06-22T14:04:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzU3ODc3Mg=="}], "type": "inlineReview"}, {"oid": "aeb95fa7936b090c378d84e70c73f66d1c82285f", "url": "https://github.com/quarkusio/quarkus/commit/aeb95fa7936b090c378d84e70c73f66d1c82285f", "message": "FastJarTest updated and deleted .gradle directory,\nindex.html deleted", "committedDate": "2020-06-22T14:07:37Z", "type": "forcePushed"}, {"oid": "ae5cac3da54025c3b1e5fbaed7694c9bf78fedce", "url": "https://github.com/quarkusio/quarkus/commit/ae5cac3da54025c3b1e5fbaed7694c9bf78fedce", "message": "FastJarTest updated and deleted .gradle directory,\nindex.html deleted", "committedDate": "2020-06-22T14:55:07Z", "type": "commit"}, {"oid": "ae5cac3da54025c3b1e5fbaed7694c9bf78fedce", "url": "https://github.com/quarkusio/quarkus/commit/ae5cac3da54025c3b1e5fbaed7694c9bf78fedce", "message": "FastJarTest updated and deleted .gradle directory,\nindex.html deleted", "committedDate": "2020-06-22T14:55:07Z", "type": "forcePushed"}]}