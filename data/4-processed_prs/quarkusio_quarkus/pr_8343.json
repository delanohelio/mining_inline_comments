{"pr_number": 8343, "pr_title": "Support having a bean enabled only when a build time profile is enabled or disabled", "pr_createdAt": "2020-04-02T07:41:22Z", "pr_url": "https://github.com/quarkusio/quarkus/pull/8343", "timeline": [{"oid": "e9c1e1472829e5a375b1603ed61ede692a8054bd", "url": "https://github.com/quarkusio/quarkus/commit/e9c1e1472829e5a375b1603ed61ede692a8054bd", "message": "Support having a bean enabled only when a build time profile is enabled", "committedDate": "2020-04-02T16:24:59Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc3OTM5NA==", "url": "https://github.com/quarkusio/quarkus/pull/8343#discussion_r402779394", "bodyText": "Hm, this should remove any annotation on a class that is annotated with a scope. Is that intentional? If so, then this could be replaced with something like:\nif (scopes.isScopeIn(ctx.getAnnotations())) {\n  ctx.transform().removeAll().done();\n}", "author": "mkouba", "createdAt": "2020-04-03T07:13:45Z", "path": "extensions/arc/deployment/src/main/java/io/quarkus/arc/deployment/WhenBuildTimeProfileProcessor.java", "diffHunk": "@@ -0,0 +1,90 @@\n+package io.quarkus.arc.deployment;\n+\n+import static io.quarkus.arc.processor.Annotations.find;\n+\n+import javax.enterprise.inject.Produces;\n+\n+import org.jboss.jandex.AnnotationInstance;\n+import org.jboss.jandex.AnnotationTarget;\n+import org.jboss.jandex.ClassInfo;\n+import org.jboss.jandex.DotName;\n+\n+import io.quarkus.arc.WhenBuildTimeProfile;\n+import io.quarkus.arc.processor.AnnotationsTransformer;\n+import io.quarkus.arc.processor.DotNames;\n+import io.quarkus.deployment.annotations.BuildProducer;\n+import io.quarkus.deployment.annotations.BuildStep;\n+import io.quarkus.runtime.configuration.ProfileManager;\n+\n+public class WhenBuildTimeProfileProcessor {\n+\n+    private static final DotName WHEN_BUILD_TIME_PROFILE = DotName.createSimple(WhenBuildTimeProfile.class.getName());\n+\n+    /**\n+     * Uses {@link AnnotationsTransformer} to:\n+     *\n+     * Remove the {@code @Produces} annotation from a producer method or field when that member is also annotated with\n+     * {@code @WhenBuildTimeProfile} and the current build profile doesn't match the one specified on the annotation\n+     *\n+     * Remove the scope annotation from a class bean that is also annotated with\n+     * {@code @WhenBuildTimeProfile} and the current build profile doesn't match the one specified on the annotation\n+     *\n+     * This effectively means that a bean annotated with {@code @WhenBuildTimeProfile} is only enabled when\n+     * the current profile matches that of the annotation\n+     */\n+    @BuildStep\n+    void annotationTransformer(BeanArchiveIndexBuildItem beanArchiveIndex,\n+            CustomScopeAnnotationsBuildItem scopes,\n+            BuildProducer<AnnotationsTransformerBuildItem> annotationsTransformer) {\n+        annotationsTransformer.produce(new AnnotationsTransformerBuildItem(new AnnotationsTransformer() {\n+            @Override\n+            public boolean appliesTo(AnnotationTarget.Kind kind) {\n+                return kind == AnnotationTarget.Kind.METHOD || kind == AnnotationTarget.Kind.CLASS\n+                        || kind == AnnotationTarget.Kind.FIELD;\n+            }\n+\n+            @Override\n+            public int getPriority() {\n+                // Make sure this annotation transformer is invoked after all others\n+                return 10;\n+            }\n+\n+            @Override\n+            public void transform(TransformationContext ctx) {\n+                AnnotationInstance whenBuildTimeProfileInstance = getWhenBuildTimeProfileInstance(ctx);\n+                if (whenBuildTimeProfileInstance == null) {\n+                    return;\n+                }\n+\n+                String profileOnInstance = whenBuildTimeProfileInstance.value().asString();\n+                if (profileOnInstance.equals(ProfileManager.getActiveProfile())) {\n+                    return;\n+                }\n+\n+                if (ctx.isMethod() || ctx.isField()) {\n+                    ctx.transform().remove(ann -> DotNames.PRODUCES.equals(ann.name())).done();\n+                } else if (ctx.isClass()) {\n+                    ctx.transform().remove(ann -> scopes.isScopeDeclaredOn(ann.target().asClass())).done();", "originalCommit": "e9c1e1472829e5a375b1603ed61ede692a8054bd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc4NzU4MA==", "url": "https://github.com/quarkusio/quarkus/pull/8343#discussion_r402787580", "bodyText": "The intention was to remove only scope annotations, but now I see that I pulled the trigger a little to quickly on it :)", "author": "geoand", "createdAt": "2020-04-03T07:30:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc3OTM5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc5NjU3MQ==", "url": "https://github.com/quarkusio/quarkus/pull/8343#discussion_r402796571", "bodyText": "Actually, you should also remove stereotypes. And additional bean defining annotations may declare a default scope too...", "author": "mkouba", "createdAt": "2020-04-03T07:48:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc3OTM5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjgwNDU1OQ==", "url": "https://github.com/quarkusio/quarkus/pull/8343#discussion_r402804559", "bodyText": "So should we just go with removeAll? I wanted to avoid that if possible.", "author": "geoand", "createdAt": "2020-04-03T07:58:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc3OTM5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjgxMzcxNA==", "url": "https://github.com/quarkusio/quarkus/pull/8343#discussion_r402813714", "bodyText": "I don't think just stereotypes will do.\nIf you don't want a class picked up as a bean, you'd need to remove any bean defining annotation from it. That can be scope, qualifier, stereotype, interceptor binding. See spec. Note that in Quarkus we can also have additional bean defining annotation.", "author": "manovotn", "createdAt": "2020-04-03T08:09:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc3OTM5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjgxNjA5Ng==", "url": "https://github.com/quarkusio/quarkus/pull/8343#discussion_r402816096", "bodyText": "So it seems that removing all the annotations is innevitable with this approach, right?", "author": "geoand", "createdAt": "2020-04-03T08:12:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc3OTM5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjg0MTU2Ng==", "url": "https://github.com/quarkusio/quarkus/pull/8343#discussion_r402841566", "bodyText": "Probably... but at that point it might be easier to instead just temper with Alternative and priority.\nBTW how many build time profiles are there? This approach will make a bean exclusively available in one of them, what if you want the bean to be available in two or more profiles but not in third?", "author": "manovotn", "createdAt": "2020-04-03T08:41:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc3OTM5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjg0NTExOA==", "url": "https://github.com/quarkusio/quarkus/pull/8343#discussion_r402845118", "bodyText": "For now I just pushed removeAll. I'll give the Alternatives approach a go later on.\nVery good question about the profiles! There is always a single active build profile (but a user could decide to use name he/she likes, although by default there are three, dev, test, prod), so maybe we should also introduce the WhenNotBuildTimeProfile. How does that sound?", "author": "geoand", "createdAt": "2020-04-03T08:45:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc3OTM5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjg1NTI3MA==", "url": "https://github.com/quarkusio/quarkus/pull/8343#discussion_r402855270", "bodyText": "@geoand sounds good. Or you could make WhenBuildTimeProfile a repeating annotation.", "author": "manovotn", "createdAt": "2020-04-03T08:56:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc3OTM5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjg2MzMxOQ==", "url": "https://github.com/quarkusio/quarkus/pull/8343#discussion_r402863319", "bodyText": "What is the usual CDI strategy in \"similar\" cases?\nBest try and be consistent if possible.", "author": "geoand", "createdAt": "2020-04-03T09:06:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc3OTM5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjg2NzAyNg==", "url": "https://github.com/quarkusio/quarkus/pull/8343#discussion_r402867026", "bodyText": "I don't see similarities that we could stick to here, might just be lack of caffeine though :)\nMaybe @mkouba has some ideas?", "author": "manovotn", "createdAt": "2020-04-03T09:10:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc3OTM5NA=="}], "type": "inlineReview"}, {"oid": "1f432c266285dbf2530fc61aa28672f42585498a", "url": "https://github.com/quarkusio/quarkus/commit/1f432c266285dbf2530fc61aa28672f42585498a", "message": "Support having a bean enabled only when a build time profile is enabled", "committedDate": "2020-04-03T08:42:17Z", "type": "forcePushed"}, {"oid": "b7912e48fdab44c94cb01594727e08708745508d", "url": "https://github.com/quarkusio/quarkus/commit/b7912e48fdab44c94cb01594727e08708745508d", "message": "Support having a bean enabled only when a build time profile is enabled\n\nCo-Authored-By: Martin Kouba <mkouba@redhat.com>", "committedDate": "2020-04-06T06:15:17Z", "type": "forcePushed"}, {"oid": "80c5bdfb9ed71e19ba42b974760e186983711e6a", "url": "https://github.com/quarkusio/quarkus/commit/80c5bdfb9ed71e19ba42b974760e186983711e6a", "message": "Support having a bean enabled only when a build time profile is enabled\n\nCo-Authored-By: Martin Kouba <mkouba@redhat.com>", "committedDate": "2020-04-06T06:16:34Z", "type": "forcePushed"}, {"oid": "e1eee0d67de86fabb3af4d51c18a5968670dc98d", "url": "https://github.com/quarkusio/quarkus/commit/e1eee0d67de86fabb3af4d51c18a5968670dc98d", "message": "Support having a bean enabled only when a build time profile is enabled\n\nCo-Authored-By: Martin Kouba <mkouba@redhat.com>", "committedDate": "2020-04-06T06:31:17Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzk1NzA1MA==", "url": "https://github.com/quarkusio/quarkus/pull/8343#discussion_r403957050", "bodyText": "Recently we added the ability to enable alternatives via config file and those also use Integer.MAX_VALUE.\nSo if a user has an alternative bean that is enabled that way and then adds another bean just for one given profile, he will actually end up with two alternatives with maximum priority (which I think should blow up). Not sure if this corner case is something we want to address right away, just writing it down :)", "author": "manovotn", "createdAt": "2020-04-06T09:38:10Z", "path": "extensions/arc/deployment/src/main/java/io/quarkus/arc/deployment/BuildTimeProfileProcessor.java", "diffHunk": "@@ -0,0 +1,115 @@\n+package io.quarkus.arc.deployment;\n+\n+import static io.quarkus.arc.processor.Annotations.find;\n+\n+import org.jboss.jandex.AnnotationInstance;\n+import org.jboss.jandex.AnnotationTarget;\n+import org.jboss.jandex.AnnotationValue;\n+import org.jboss.jandex.DotName;\n+\n+import io.quarkus.arc.WhenBuildTimeProfile;\n+import io.quarkus.arc.WhenNotBuildTimeProfile;\n+import io.quarkus.arc.processor.AnnotationsTransformer;\n+import io.quarkus.arc.processor.DotNames;\n+import io.quarkus.arc.processor.Transformation;\n+import io.quarkus.deployment.annotations.BuildProducer;\n+import io.quarkus.deployment.annotations.BuildStep;\n+import io.quarkus.runtime.configuration.ProfileManager;\n+\n+public class BuildTimeProfileProcessor {\n+\n+    private static final DotName WHEN_BUILD_TIME_PROFILE = DotName.createSimple(WhenBuildTimeProfile.class.getName());\n+    private static final DotName WHEN_NOT_BUILD_TIME_PROFILE = DotName.createSimple(WhenNotBuildTimeProfile.class.getName());\n+\n+    /**\n+     * Uses {@link AnnotationsTransformer} to do the following:\n+     *\n+     * Adds the {@code @Alternative} annotation to any class or producer that is annotated with {code @WhenBuildTimeProfile}\n+     * when the specified profile doesn't match the current one.\n+     *\n+     * Adds the {@code @AlternativePriority} annotation to any class or producer that is annotated with\n+     * {code @WhenBuildTimeProfile} when the specified profile does match the current one.\n+     *\n+     * This effectively means that a bean annotated with {@code @WhenBuildTimeProfile} is only enabled when\n+     * the current profile matches that of the annotation\n+     */\n+    @BuildStep\n+    void whenBuildTimeProfile(BeanArchiveIndexBuildItem beanArchiveIndex,\n+            CustomScopeAnnotationsBuildItem scopes,\n+            BuildProducer<AnnotationsTransformerBuildItem> annotationsTransformer) {\n+        annotationsTransformer.produce(new AnnotationsTransformerBuildItem(new AnnotationsTransformer() {\n+            @Override\n+            public boolean appliesTo(AnnotationTarget.Kind kind) {\n+                return kind == AnnotationTarget.Kind.METHOD || kind == AnnotationTarget.Kind.CLASS\n+                        || kind == AnnotationTarget.Kind.FIELD;\n+            }\n+\n+            @Override\n+            public void transform(TransformationContext ctx) {\n+                AnnotationInstance whenBuildTimeProfileInstance = find(ctx.getAnnotations(), WHEN_BUILD_TIME_PROFILE);\n+                if (whenBuildTimeProfileInstance == null) {\n+                    return;\n+                }\n+\n+                Transformation transform = ctx.transform();\n+\n+                String profileOnInstance = whenBuildTimeProfileInstance.value().asString();\n+                if (profileOnInstance.equals(ProfileManager.getActiveProfile())) {\n+                    transform.add(DotNames.ALTERNATIVE_PRIORITY,", "originalCommit": "c44b9c4ea62bd5b06443fcfeea53302c67f802c8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDAwOTk2Nw==", "url": "https://github.com/quarkusio/quarkus/pull/8343#discussion_r404009967", "bodyText": "Hm, yes that would blow up with ambiguous dependency. But I'd say that it's more like a corner case and maybe we could add a note to the docs? Or even use Intereg.MAX_VALUE - 1 ;-).", "author": "mkouba", "createdAt": "2020-04-06T11:11:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzk1NzA1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDAxNDI5Ng==", "url": "https://github.com/quarkusio/quarkus/pull/8343#discussion_r404014296", "bodyText": "How about goign with Intereg.MAX_VALUE - 1 for now and revisiting if this every becomes a problem?\nSeems like an extreme corner case to me.", "author": "geoand", "createdAt": "2020-04-06T11:19:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzk1NzA1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDAxNzA1Mg==", "url": "https://github.com/quarkusio/quarkus/pull/8343#discussion_r404017052", "bodyText": "+1 to Intereg.MAX_VALUE - 1, it just occurred to me so I thought I'd mention it :)", "author": "manovotn", "createdAt": "2020-04-06T11:24:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzk1NzA1MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzk2MDY3Nw==", "url": "https://github.com/quarkusio/quarkus/pull/8343#discussion_r403960677", "bodyText": "Accidental double grave accent(`) around WhenNotBuildTimeProfile?", "author": "manovotn", "createdAt": "2020-04-06T09:43:41Z", "path": "docs/src/main/asciidoc/cdi-reference.adoc", "diffHunk": "@@ -426,6 +426,57 @@ public class CustomTracerConfiguration {\n `@DefaultBean` allows extensions (or any other code for that matter) to provide defaults while backing off if beans of that type are supplied in any\n way Quarkus supports.\n \n+=== Enabling Beans for Quarkus Build Profile\n+\n+Quarkus adds a capability that CDI currently does not support which is to conditionally enable a bean when a Quarkus build-time profile is enabled,\n+via the `@WhenBuildTimeProfile` and ``@WhenNotBuildTimeProfile`` annotations.", "originalCommit": "c44b9c4ea62bd5b06443fcfeea53302c67f802c8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDAwMjMwNw==", "url": "https://github.com/quarkusio/quarkus/pull/8343#discussion_r404002307", "bodyText": "Good catch, thanks!", "author": "geoand", "createdAt": "2020-04-06T10:56:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzk2MDY3Nw=="}], "type": "inlineReview"}, {"oid": "f24caf7ebe6a849e990cea161f167dc27552793f", "url": "https://github.com/quarkusio/quarkus/commit/f24caf7ebe6a849e990cea161f167dc27552793f", "message": "Support having a bean enabled only when a build time profile is not enabled\n\nCo-Authored-By: Martin Kouba <mkouba@redhat.com>\nCo-Authored-By: Matej Novotny <manovotn@redhat.com>", "committedDate": "2020-04-06T11:35:47Z", "type": "commit"}, {"oid": "f24caf7ebe6a849e990cea161f167dc27552793f", "url": "https://github.com/quarkusio/quarkus/commit/f24caf7ebe6a849e990cea161f167dc27552793f", "message": "Support having a bean enabled only when a build time profile is not enabled\n\nCo-Authored-By: Martin Kouba <mkouba@redhat.com>\nCo-Authored-By: Matej Novotny <manovotn@redhat.com>", "committedDate": "2020-04-06T11:35:47Z", "type": "forcePushed"}]}