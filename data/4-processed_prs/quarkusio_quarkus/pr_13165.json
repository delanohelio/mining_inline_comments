{"pr_number": 13165, "pr_title": "Add Vault Transit key administration", "pr_createdAt": "2020-11-07T09:17:17Z", "pr_url": "https://github.com/quarkusio/quarkus/pull/13165", "timeline": [{"oid": "b3f8090aea1c9c71c64817a657fb50532b4ba6d9", "url": "https://github.com/quarkusio/quarkus/commit/b3f8090aea1c9c71c64817a657fb50532b4ba6d9", "message": "Add Vault Transit key administration", "committedDate": "2020-11-07T12:05:23Z", "type": "forcePushed"}, {"oid": "964f248d02c0574429100702bed69a8f812ddbe3", "url": "https://github.com/quarkusio/quarkus/commit/964f248d02c0574429100702bed69a8f812ddbe3", "message": "Add Vault Transit key administration", "committedDate": "2020-11-08T07:22:03Z", "type": "commit"}, {"oid": "964f248d02c0574429100702bed69a8f812ddbe3", "url": "https://github.com/quarkusio/quarkus/commit/964f248d02c0574429100702bed69a8f812ddbe3", "message": "Add Vault Transit key administration", "committedDate": "2020-11-08T07:22:03Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTc2MjExOQ==", "url": "https://github.com/quarkusio/quarkus/pull/13165#discussion_r519762119", "bodyText": "@vsevel Hi Vincent, did we discuss it earlier and agree that the admin operations should be part of the dedicated admin interface such as this one ? Right, that may not be exactly relevant to the transit key management but if we do it here, then the same question would apply to other interfaces, example, we hide from the users many low -level/admin operations\nDo you see some practical", "author": "sberyozkin", "createdAt": "2020-11-09T12:12:02Z", "path": "extensions/vault/runtime/src/main/java/io/quarkus/vault/VaultTransitSecretEngine.java", "diffHunk": "@@ -202,11 +205,67 @@\n      * against, and an optional transit context used for key derivation, if applicable.\n      * If the signature does not match, or if any other error occurs,\n      * the service will throw a {@link VaultVerificationBatchException}\n-     * \n-     * @see <a href=\"https://www.vaultproject.io/api/secret/transit/index.html#verify-signed-data\">verify signed data</a>\n+     *\n      * @param keyName the key that was used to sign the input\n      * @param requests a list of items specifying an input and a signature to match against\n+     * @see <a href=\"https://www.vaultproject.io/api/secret/transit/index.html#verify-signed-data\">verify signed data</a>\n      */\n     void verifySignature(String keyName, List<VerificationRequest> requests);\n \n+    // --- admin operations", "originalCommit": "964f248d02c0574429100702bed69a8f812ddbe3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTkwMjk2Ng==", "url": "https://github.com/quarkusio/quarkus/pull/13165#discussion_r519902966", "bodyText": "hello @sberyozkin\nI do not remember, may be ;)\nVaultSystemBackendEngine maps directly to the System Backend. it turns out that all operations on the System Backend may be considered admin\nthat is not the case for many of the other vault endpoints.\nI do not mind mixing what could be considered as admin vs non admin to some standards. that is what SB is doing actually in VaultTransitOperations.\nso I did no think we would need to make this separation. do you? would you rather introduce a VaultAdminTransitSecretEngine?", "author": "vsevel", "createdAt": "2020-11-09T15:33:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTc2MjExOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDY3MzI1NQ==", "url": "https://github.com/quarkusio/quarkus/pull/13165#discussion_r520673255", "bodyText": "Hi Vincent, @vsevel, well, yeah, we spent weeks debating it :-)\nActually I was thinking about it, about my last comment; so you refer to SB. The difference between what we have in Quarkus (what you created) and in SB and likely other providers is that here we have a very user centric interface which is unique enough for Quarkus; the interfaces like this one where whatever is available in a given Vault engine is mixed up in the same interface do not impress me :-), it is just the enumeration of all the operations, not the best approach IMHO.\nI don't want to make this PR delayed etc, just a general consideration which I'd consider applying myself.\nRe VaultAdminTransitSecretEngine - IMHO it would offer the right separation of concerns. I reckon it is fair enough to assume that no-one will for example create a secret key and then use it to sign/encrypt something in context of a single client request (executed in a server context) - as it will require 2 background remote operations - we'd have either some management service where these keys are provisioned or a user service where they are used.\nThe only concern I'd have about VaultAdminTransitSecretEngine is that we'd end up with twice as many interfaces as we have now, if we do it per every other interface. But the separation of the concerns seems more important. These inerfaces can sit in a admin sub-package for example and even extend the simple ones, ex, VaultAdminTransitSecretEngine extends VaultTransitSecretEngine...\nIs it convincing enough :-) ? It is really a proposal to discuss as opposed to a review change request as I agree that it will work in the current PR form too\nthanks", "author": "sberyozkin", "createdAt": "2020-11-10T15:56:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTc2MjExOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDczNjg0MA==", "url": "https://github.com/quarkusio/quarkus/pull/13165#discussion_r520736840", "bodyText": "yes, I guess it is a matter\n\nof sticking to the original api to avoid surprising the users (after all hashicorp did not create 2 interfaces admin/non-admin, and sometimes it is difficult to figure out which is which - is readSecret non-admin, and writeSecret admin? - today we both have them in VaultKVSecretEngine and that feels right),\nor creating another abstraction to provide a clearer separation of concerns that we determine was missing in the original api, and would undermine clarity for the users.\n\nin that case, I was leaning toward the first option, because as a user, if I decided to use the transit secret engine, I would search for a class with that name and expect everything to be there. but again there is no right or wrong. it would be nice to have a third opinion. @gsmet?\nno strong feeling on my side if a separation of interfaces means better respecting the quarkus philosophy, just a preference for consistency against the original api. but I will do whatever you guys believe is right for the product.", "author": "vsevel", "createdAt": "2020-11-10T17:22:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTc2MjExOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjkzMTQ1Nw==", "url": "https://github.com/quarkusio/quarkus/pull/13165#discussion_r522931457", "bodyText": "Hi @vsevel\nYeah, they have the endpoint and it is indeed simpler for them to just have a single endpoint dealing with all the operations.\nHave a look at VaultClient. We also have, for example, a super simple for the users to understand interface,  VaultKVSecretEngine - I recall writeSecret was added at a user request as there was a concrete use case, etc.\nAt some point there was only VaultClient and I do feel the fact that the KV engine users don't see most of VaultClient operations is a good thing for them :-)\nHowever some interfaces are less strict about it, Kubernetes one for ex.\nI guess we just need to try to be conservative as to how much of the management operations we can put into the otherwise user centric interfaces.\nPerhaps in the case of this specific PR it is OK.", "author": "sberyozkin", "createdAt": "2020-11-13T12:53:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTc2MjExOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjkzNzk1Nw==", "url": "https://github.com/quarkusio/quarkus/pull/13165#discussion_r522937957", "bodyText": "hello @sberyozkin\n\nHave a look at VaultClient\n\nwell I think this one is a bad example ;) for one it is an implementation detail, and we should have refactored it as we were adding more and more methods. and even as an implemation detail, it is too much. I will split at some point.\n\nI do feel the fact that the KV engine users don't see most of VaultClient operations is a good thing for them :-)\n\ndefinitely", "author": "vsevel", "createdAt": "2020-11-13T13:06:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTc2MjExOQ=="}], "type": "inlineReview"}]}