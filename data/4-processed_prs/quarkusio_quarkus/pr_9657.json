{"pr_number": 9657, "pr_title": "Static method interception", "pr_createdAt": "2020-05-28T12:38:27Z", "pr_url": "https://github.com/quarkusio/quarkus/pull/9657", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTgzMDYzMw==", "url": "https://github.com/quarkusio/quarkus/pull/9657#discussion_r431830633", "bodyText": "When I said to try double and long primitives that's not what I meant ;) I mean, your ASM code looks right, but this is not testing it ;)", "author": "FroMage", "createdAt": "2020-05-28T13:23:22Z", "path": "extensions/arc/deployment/src/test/java/io/quarkus/arc/test/interceptor/staticmethods/InterceptedStaticMethodTest.java", "diffHunk": "@@ -0,0 +1,98 @@\n+package io.quarkus.arc.test.interceptor.staticmethods;\n+\n+import static java.lang.annotation.ElementType.METHOD;\n+import static java.lang.annotation.ElementType.TYPE;\n+import static java.lang.annotation.RetentionPolicy.RUNTIME;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.Target;\n+import java.lang.reflect.Modifier;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import javax.annotation.Priority;\n+import javax.interceptor.AroundInvoke;\n+import javax.interceptor.Interceptor;\n+import javax.interceptor.InterceptorBinding;\n+import javax.interceptor.InvocationContext;\n+\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+import org.opentest4j.AssertionFailedError;\n+\n+import io.quarkus.test.QuarkusUnitTest;\n+\n+public class InterceptedStaticMethodTest {\n+\n+    @RegisterExtension\n+    static final QuarkusUnitTest config = new QuarkusUnitTest()\n+            .setArchiveProducer(() -> ShrinkWrap.create(JavaArchive.class)\n+                    .addClasses(InterceptMe.class, Simple.class, SimpleInterceptor.class));\n+\n+    @Test\n+    public void testInterceptor() {\n+        assertEquals(\"OK:PONG\", Simple.ping(\"pong\"));\n+        Simple.pong();\n+        assertEquals(42.0, Simple.testDouble(2.0));\n+        assertEquals(1, SimpleInterceptor.VOID_INTERCEPTIONS.get());\n+    }\n+\n+    public static class Simple {\n+\n+        @InterceptMe\n+        public static String ping(String val) {\n+            return val.toUpperCase();\n+        }\n+\n+        @InterceptMe\n+        static void pong() {\n+        }\n+\n+        @InterceptMe\n+        protected static Double testDouble(Double val) {", "originalCommit": "7c30d82960dd60e443778f134551f6d143c63947", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTgzNDM2Ng==", "url": "https://github.com/quarkusio/quarkus/pull/9657#discussion_r431834366", "bodyText": "Ah, I'm boxing the params automatically in my head ;-)", "author": "mkouba", "createdAt": "2020-05-28T13:28:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTgzMDYzMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTgzMTI0Mw==", "url": "https://github.com/quarkusio/quarkus/pull/9657#discussion_r431831243", "bodyText": "Shouldn't we use getMethod().containing-class... here then?", "author": "FroMage", "createdAt": "2020-05-28T13:24:15Z", "path": "extensions/narayana-jta/runtime/src/main/java/io/quarkus/narayana/jta/runtime/interceptor/TransactionalInterceptorBase.java", "diffHunk": "@@ -83,7 +83,11 @@ private Transactional getTransactional(InvocationContext ic) {\n     private TransactionConfiguration getTransactionConfiguration(InvocationContext ic) {\n         TransactionConfiguration configuration = ic.getMethod().getAnnotation(TransactionConfiguration.class);\n         if (configuration == null) {\n-            return ic.getTarget().getClass().getAnnotation(TransactionConfiguration.class);\n+            Object target = ic.getTarget();", "originalCommit": "7c30d82960dd60e443778f134551f6d143c63947", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTgzNTYwNw==", "url": "https://github.com/quarkusio/quarkus/pull/9657#discussion_r431835607", "bodyText": "Hm, yes you're right, it should work in this particular case.", "author": "mkouba", "createdAt": "2020-05-28T13:30:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTgzMTI0Mw=="}], "type": "inlineReview"}, {"oid": "db20f3ae1ccdc0647cac01301bf2d1fdd1db62aa", "url": "https://github.com/quarkusio/quarkus/commit/db20f3ae1ccdc0647cac01301bf2d1fdd1db62aa", "message": "Add support for static method interception\n\n- non-standard CDI feature\n- only method-level bindings are considered for backward compatibility\nreasons\n- private static methods are never intercepted", "committedDate": "2020-05-28T13:51:38Z", "type": "forcePushed"}, {"oid": "bcd5907dab1329d96a4c6044464e00a3b062fe42", "url": "https://github.com/quarkusio/quarkus/commit/bcd5907dab1329d96a4c6044464e00a3b062fe42", "message": "Interception of static methods - update docs", "committedDate": "2020-06-01T08:06:59Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzc0MDIwNw==", "url": "https://github.com/quarkusio/quarkus/pull/9657#discussion_r433740207", "bodyText": "Looks like you ignored the first note, so I assume this limitation is no longer necessary?\nI think you should have kept the second note and FIXME comment.", "author": "FroMage", "createdAt": "2020-06-02T09:23:26Z", "path": "extensions/panache/hibernate-orm-panache/deployment/src/main/java/io/quarkus/hibernate/orm/panache/deployment/PanacheHibernateResourceProcessor.java", "diffHunk": "@@ -106,27 +127,13 @@ void build(CombinedIndexBuildItem index,\n \n         PanacheJpaEntityEnhancer modelEnhancer = new PanacheJpaEntityEnhancer(index.getIndex(), methodCustomizers);\n         Set<String> modelClasses = new HashSet<>();\n-        // Note that we do this in two passes because for some reason Jandex does not give us subtypes\n-        // of PanacheEntity if we ask for subtypes of PanacheEntityBase\n-        // NOTE: we don't skip abstract/generic entities because they still need accessors\n-        for (ClassInfo classInfo : index.getIndex().getAllKnownSubclasses(DOTNAME_PANACHE_ENTITY_BASE)) {", "originalCommit": "5165ac9f5cddb9875f3d111f558fc8f75d581bfe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzc1OTk3OQ==", "url": "https://github.com/quarkusio/quarkus/pull/9657#discussion_r433759979", "bodyText": "The tests passed locally and TBH I've never observed such a limitation in jandex.\nThe FIXME was not present in the mongo version so I though it's no longer a problem.\nI can keep the second note and FIXME of couse ;-).", "author": "mkouba", "createdAt": "2020-06-02T09:57:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzc0MDIwNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzc2MTcwOQ==", "url": "https://github.com/quarkusio/quarkus/pull/9657#discussion_r433761709", "bodyText": "Yes please. Glad to know the tests pass with this, then. I mean, that code was there initially for a reason, so something must have happened, but glad we can get rid of it.", "author": "FroMage", "createdAt": "2020-06-02T10:00:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzc0MDIwNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzc2MjQ3Ng==", "url": "https://github.com/quarkusio/quarkus/pull/9657#discussion_r433762476", "bodyText": "Hopefully the test coverage is good enough ;-)", "author": "mkouba", "createdAt": "2020-06-02T10:01:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzc0MDIwNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDk0MTkyOQ==", "url": "https://github.com/quarkusio/quarkus/pull/9657#discussion_r434941929", "bodyText": "This would have happened if the jar containing PanacheEntityBase was not indexed. I think originally this was the case which is why this would not have worked, but it is indexed now.", "author": "stuartwdouglas", "createdAt": "2020-06-04T01:28:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzc0MDIwNw=="}], "type": "inlineReview"}, {"oid": "48ca849841bdffb66a8005a4a3234a6661c0487d", "url": "https://github.com/quarkusio/quarkus/commit/48ca849841bdffb66a8005a4a3234a6661c0487d", "message": "Collect Panache entities in a separate build step\n\n- to break the cycle with InterceptedStaticMethodsProcessor", "committedDate": "2020-06-02T10:00:28Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDU5NTU0Mw==", "url": "https://github.com/quarkusio/quarkus/pull/9657#discussion_r434595543", "bodyText": "Wouldn't it be more efficient to query the index for interceptor binding (annotation) uses instead of checking every known class and every known method?", "author": "manovotn", "createdAt": "2020-06-03T14:08:27Z", "path": "extensions/arc/deployment/src/main/java/io/quarkus/arc/deployment/staticmethods/InterceptedStaticMethodsProcessor.java", "diffHunk": "@@ -0,0 +1,495 @@\n+package io.quarkus.arc.deployment.staticmethods;\n+\n+import static io.quarkus.deployment.annotations.ExecutionTime.STATIC_INIT;\n+import static org.objectweb.asm.Opcodes.ACC_FINAL;\n+import static org.objectweb.asm.Opcodes.ACC_PRIVATE;\n+import static org.objectweb.asm.Opcodes.ACC_PUBLIC;\n+import static org.objectweb.asm.Opcodes.ACC_STATIC;\n+\n+import java.lang.reflect.Modifier;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.ListIterator;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Set;\n+import java.util.function.BiFunction;\n+import java.util.function.Function;\n+\n+import javax.enterprise.context.spi.Contextual;\n+import javax.enterprise.inject.spi.InterceptionType;\n+import javax.interceptor.InvocationContext;\n+\n+import org.jboss.jandex.AnnotationInstance;\n+import org.jboss.jandex.AnnotationTarget.Kind;\n+import org.jboss.jandex.ClassInfo;\n+import org.jboss.jandex.DotName;\n+import org.jboss.jandex.IndexView;\n+import org.jboss.jandex.MethodInfo;\n+import org.jboss.jandex.Type;\n+import org.jboss.logging.Logger;\n+import org.objectweb.asm.ClassVisitor;\n+import org.objectweb.asm.MethodVisitor;\n+import org.objectweb.asm.Opcodes;\n+\n+import io.quarkus.arc.InjectableInterceptor;\n+import io.quarkus.arc.deployment.BeanArchiveIndexBuildItem;\n+import io.quarkus.arc.deployment.BeanContainerBuildItem;\n+import io.quarkus.arc.deployment.BeanRegistrationPhaseBuildItem;\n+import io.quarkus.arc.deployment.InterceptorResolverBuildItem;\n+import io.quarkus.arc.impl.CreationalContextImpl;\n+import io.quarkus.arc.impl.InterceptedMethodMetadata;\n+import io.quarkus.arc.impl.InterceptedStaticMethods;\n+import io.quarkus.arc.impl.InterceptedStaticMethods.InterceptedStaticMethod;\n+import io.quarkus.arc.processor.AnnotationLiteralProcessor;\n+import io.quarkus.arc.processor.BeanProcessor;\n+import io.quarkus.arc.processor.DotNames;\n+import io.quarkus.arc.processor.InterceptorInfo;\n+import io.quarkus.arc.processor.MethodDescriptors;\n+import io.quarkus.arc.runtime.InterceptedStaticMethodsRecorder;\n+import io.quarkus.deployment.GeneratedClassGizmoAdaptor;\n+import io.quarkus.deployment.annotations.BuildProducer;\n+import io.quarkus.deployment.annotations.BuildStep;\n+import io.quarkus.deployment.annotations.Produce;\n+import io.quarkus.deployment.annotations.Record;\n+import io.quarkus.deployment.builditem.BytecodeTransformerBuildItem;\n+import io.quarkus.deployment.builditem.GeneratedClassBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.ReflectiveMethodBuildItem;\n+import io.quarkus.deployment.util.AsmUtil;\n+import io.quarkus.gizmo.BytecodeCreator;\n+import io.quarkus.gizmo.ClassCreator;\n+import io.quarkus.gizmo.ClassOutput;\n+import io.quarkus.gizmo.DescriptorUtils;\n+import io.quarkus.gizmo.FunctionCreator;\n+import io.quarkus.gizmo.Gizmo;\n+import io.quarkus.gizmo.MethodCreator;\n+import io.quarkus.gizmo.MethodDescriptor;\n+import io.quarkus.gizmo.ResultHandle;\n+\n+public class InterceptedStaticMethodsProcessor {\n+\n+    private static final Logger LOGGER = Logger.getLogger(InterceptedStaticMethodsProcessor.class);\n+\n+    static final MethodDescriptor INTERCEPTED_STATIC_METHODS_REGISTER = MethodDescriptor\n+            .ofMethod(InterceptedStaticMethods.class, \"register\", void.class, String.class, InterceptedStaticMethod.class);\n+    static final MethodDescriptor INTERCEPTED_STATIC_METHODS_AROUND_INVOKE = MethodDescriptor\n+            .ofMethod(InterceptedStaticMethods.class, \"aroundInvoke\", Object.class, String.class, Object[].class);\n+\n+    private static final String ORGINAL_METHOD_COPY_SUFFIX = \"_orig\";\n+    private static final String INITIALIZER_CLASS_SUFFIX = \"_InterceptorInitializer\";\n+\n+    @BuildStep\n+    void collectInterceptedStaticMethodsCandidates(BeanArchiveIndexBuildItem beanArchiveIndex,\n+            BuildProducer<InterceptedStaticMethodBuildItem> interceptedStaticMethods,\n+            InterceptorResolverBuildItem interceptorResolver) {\n+\n+        // In this step we collect all intercepted static methods, ie. static methods annotated with interceptor bindings  \n+        IndexView index = beanArchiveIndex.getIndex();\n+\n+        for (ClassInfo clazz : index.getKnownClasses()) {", "originalCommit": "48ca849841bdffb66a8005a4a3234a6661c0487d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDYxOTM1Nw==", "url": "https://github.com/quarkusio/quarkus/pull/9657#discussion_r434619357", "bodyText": "+1\nI'll update the PR tomorrow!", "author": "mkouba", "createdAt": "2020-06-03T14:39:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDU5NTU0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTA1MDEyMw==", "url": "https://github.com/quarkusio/quarkus/pull/9657#discussion_r435050123", "bodyText": "@manovotn done...", "author": "mkouba", "createdAt": "2020-06-04T07:33:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDU5NTU0Mw=="}], "type": "inlineReview"}, {"oid": "d6224e51af1777dbd60deb0c3c8ec2af8daf31af", "url": "https://github.com/quarkusio/quarkus/commit/d6224e51af1777dbd60deb0c3c8ec2af8daf31af", "message": "Collect Panache entities in a separate build step\n\n- to break the cycle with InterceptedStaticMethodsProcessor", "committedDate": "2020-06-04T07:33:02Z", "type": "forcePushed"}, {"oid": "1f85d01629b083a9006938d6f755653dcca14d77", "url": "https://github.com/quarkusio/quarkus/commit/1f85d01629b083a9006938d6f755653dcca14d77", "message": "Collect Panache entities in a separate build step\n\n- to break the cycle with InterceptedStaticMethodsProcessor", "committedDate": "2020-06-04T07:52:37Z", "type": "forcePushed"}, {"oid": "1cd2233adad3852299d659b53a59de8631b307f6", "url": "https://github.com/quarkusio/quarkus/commit/1cd2233adad3852299d659b53a59de8631b307f6", "message": "Collect Panache entities in a separate build step\n\n- to break the cycle with InterceptedStaticMethodsProcessor", "committedDate": "2020-06-04T08:54:05Z", "type": "forcePushed"}, {"oid": "f0891db6cbc357cf9713af3f23ecaf7a55dd690a", "url": "https://github.com/quarkusio/quarkus/commit/f0891db6cbc357cf9713af3f23ecaf7a55dd690a", "message": "Collect Panache entities in a separate build step\n\n- to break the cycle with InterceptedStaticMethodsProcessor", "committedDate": "2020-06-04T10:26:27Z", "type": "forcePushed"}, {"oid": "ff172c2779947f8257eae94237afc5c99caa50b7", "url": "https://github.com/quarkusio/quarkus/commit/ff172c2779947f8257eae94237afc5c99caa50b7", "message": "Collect Panache entities in a separate build step\n\n- to break the cycle with InterceptedStaticMethodsProcessor", "committedDate": "2020-06-04T19:48:33Z", "type": "forcePushed"}, {"oid": "944cf7f750d5f83f95e8525062e0b42b054fc3bb", "url": "https://github.com/quarkusio/quarkus/commit/944cf7f750d5f83f95e8525062e0b42b054fc3bb", "message": "Add support for static method interception\n\n- non-standard CDI feature\n- only method-level bindings are considered for backward compatibility\nreasons\n- private static methods are never intercepted\n- also collect Panache entities in a separate build step to break the cycle with InterceptedStaticMethodsProcessor", "committedDate": "2020-06-05T06:51:35Z", "type": "forcePushed"}, {"oid": "7cee5b9619fd43d42736e108f26177636f516f15", "url": "https://github.com/quarkusio/quarkus/commit/7cee5b9619fd43d42736e108f26177636f516f15", "message": "Add support for static method interception\n\n- non-standard CDI feature\n- only method-level bindings are considered for backward compatibility\nreasons\n- private static methods are never intercepted\n- also collect Panache entities in a separate build step to break the cycle with InterceptedStaticMethodsProcessor", "committedDate": "2020-06-08T10:57:49Z", "type": "commit"}, {"oid": "7cee5b9619fd43d42736e108f26177636f516f15", "url": "https://github.com/quarkusio/quarkus/commit/7cee5b9619fd43d42736e108f26177636f516f15", "message": "Add support for static method interception\n\n- non-standard CDI feature\n- only method-level bindings are considered for backward compatibility\nreasons\n- private static methods are never intercepted\n- also collect Panache entities in a separate build step to break the cycle with InterceptedStaticMethodsProcessor", "committedDate": "2020-06-08T10:57:49Z", "type": "forcePushed"}]}