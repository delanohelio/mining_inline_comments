{"pr_number": 7394, "pr_title": "Resolve Gradle's project's classes dir in case the JAR isn't availablable", "pr_createdAt": "2020-02-24T17:44:16Z", "pr_url": "https://github.com/quarkusio/quarkus/pull/7394", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzYxMzY0MA==", "url": "https://github.com/quarkusio/quarkus/pull/7394#discussion_r383613640", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        throw new RuntimeException(ERROR_COLLECTING_PROJECT_CLASSES, e);\n          \n          \n            \n                        throw new UncheckedIOException(ERROR_COLLECTING_PROJECT_CLASSES, e);", "author": "gastaldi", "createdAt": "2020-02-25T01:37:34Z", "path": "devtools/gradle/src/main/java/io/quarkus/gradle/tasks/QuarkusGradleUtils.java", "diffHunk": "@@ -1,19 +1,79 @@\n package io.quarkus.gradle.tasks;\n \n+import java.io.File;\n import java.io.IOException;\n import java.io.ObjectOutputStream;\n import java.nio.file.Files;\n import java.nio.file.Path;\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.stream.Stream;\n+\n+import org.gradle.api.file.FileCollection;\n+import org.gradle.api.internal.AbstractTask;\n+import org.gradle.api.tasks.SourceSet;\n \n import io.quarkus.bootstrap.model.AppModel;\n \n public class QuarkusGradleUtils {\n \n+    private static final String ERROR_COLLECTING_PROJECT_CLASSES = \"Failed to collect project's classes in a temporary dir\";\n+\n     public static Path serializeAppModel(final AppModel appModel) throws IOException {\n         final Path serializedModel = Files.createTempFile(\"quarkus-\", \"-gradle-test\");\n         try (ObjectOutputStream out = new ObjectOutputStream(Files.newOutputStream(serializedModel))) {\n             out.writeObject(appModel);\n         }\n         return serializedModel;\n     }\n+\n+    public static String getClassesDir(SourceSet sourceSet, AbstractTask context) {\n+        final Set<String> sourcePaths = new HashSet<>();\n+        for (File sourceDir : sourceSet.getAllJava().getSrcDirs()) {\n+            sourcePaths.add(sourceDir.getAbsolutePath());\n+        }\n+\n+        FileCollection classesDirs = sourceSet.getOutput().getClassesDirs();\n+        Set<File> classDirFiles = classesDirs.getFiles();\n+        if (classDirFiles.size() == 1) {\n+            return classesDirs.getAsPath();\n+        }\n+\n+        //there does not seem to be any sane way of dealing with multiple output dirs, as there does not seem\n+        //to be a way to map them. We will need to address this at some point, but for now we just stick them\n+        //all in a temp dir\n+\n+        final Path tmpClassesDir = context.getTemporaryDir().toPath().resolve(\"quarkus-app-classes\");\n+        try {\n+            Files.createDirectories(tmpClassesDir);\n+        } catch (IOException e) {\n+            throw new RuntimeException(ERROR_COLLECTING_PROJECT_CLASSES, e);", "originalCommit": "60c6c67468527ce677cbee14903a5a268b401565", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzYxNDg0OQ==", "url": "https://github.com/quarkusio/quarkus/pull/7394#discussion_r383614849", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            stream.forEach(s -> {\n          \n          \n            \n                            stream.filter(Files::isRegularFile).forEach (s-> {", "author": "gastaldi", "createdAt": "2020-02-25T01:42:26Z", "path": "devtools/gradle/src/main/java/io/quarkus/gradle/tasks/QuarkusGradleUtils.java", "diffHunk": "@@ -1,19 +1,79 @@\n package io.quarkus.gradle.tasks;\n \n+import java.io.File;\n import java.io.IOException;\n import java.io.ObjectOutputStream;\n import java.nio.file.Files;\n import java.nio.file.Path;\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.stream.Stream;\n+\n+import org.gradle.api.file.FileCollection;\n+import org.gradle.api.internal.AbstractTask;\n+import org.gradle.api.tasks.SourceSet;\n \n import io.quarkus.bootstrap.model.AppModel;\n \n public class QuarkusGradleUtils {\n \n+    private static final String ERROR_COLLECTING_PROJECT_CLASSES = \"Failed to collect project's classes in a temporary dir\";\n+\n     public static Path serializeAppModel(final AppModel appModel) throws IOException {\n         final Path serializedModel = Files.createTempFile(\"quarkus-\", \"-gradle-test\");\n         try (ObjectOutputStream out = new ObjectOutputStream(Files.newOutputStream(serializedModel))) {\n             out.writeObject(appModel);\n         }\n         return serializedModel;\n     }\n+\n+    public static String getClassesDir(SourceSet sourceSet, AbstractTask context) {\n+        final Set<String> sourcePaths = new HashSet<>();\n+        for (File sourceDir : sourceSet.getAllJava().getSrcDirs()) {\n+            sourcePaths.add(sourceDir.getAbsolutePath());\n+        }\n+\n+        FileCollection classesDirs = sourceSet.getOutput().getClassesDirs();\n+        Set<File> classDirFiles = classesDirs.getFiles();\n+        if (classDirFiles.size() == 1) {\n+            return classesDirs.getAsPath();\n+        }\n+\n+        //there does not seem to be any sane way of dealing with multiple output dirs, as there does not seem\n+        //to be a way to map them. We will need to address this at some point, but for now we just stick them\n+        //all in a temp dir\n+\n+        final Path tmpClassesDir = context.getTemporaryDir().toPath().resolve(\"quarkus-app-classes\");\n+        try {\n+            Files.createDirectories(tmpClassesDir);\n+        } catch (IOException e) {\n+            throw new RuntimeException(ERROR_COLLECTING_PROJECT_CLASSES, e);\n+        }\n+        for (File c : classDirFiles) {\n+            Path cd = c.toPath();\n+            if (!Files.exists(cd)) {\n+                continue;\n+            }\n+            try (Stream<Path> stream = Files.walk(cd)) {\n+                stream.forEach(s -> {", "originalCommit": "60c6c67468527ce677cbee14903a5a268b401565", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzYxNTE2NA==", "url": "https://github.com/quarkusio/quarkus/pull/7394#discussion_r383615164", "bodyText": "Files.copy(s, targetPath) is faster", "author": "gastaldi", "createdAt": "2020-02-25T01:43:45Z", "path": "devtools/gradle/src/main/java/io/quarkus/gradle/tasks/QuarkusGradleUtils.java", "diffHunk": "@@ -1,19 +1,79 @@\n package io.quarkus.gradle.tasks;\n \n+import java.io.File;\n import java.io.IOException;\n import java.io.ObjectOutputStream;\n import java.nio.file.Files;\n import java.nio.file.Path;\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.stream.Stream;\n+\n+import org.gradle.api.file.FileCollection;\n+import org.gradle.api.internal.AbstractTask;\n+import org.gradle.api.tasks.SourceSet;\n \n import io.quarkus.bootstrap.model.AppModel;\n \n public class QuarkusGradleUtils {\n \n+    private static final String ERROR_COLLECTING_PROJECT_CLASSES = \"Failed to collect project's classes in a temporary dir\";\n+\n     public static Path serializeAppModel(final AppModel appModel) throws IOException {\n         final Path serializedModel = Files.createTempFile(\"quarkus-\", \"-gradle-test\");\n         try (ObjectOutputStream out = new ObjectOutputStream(Files.newOutputStream(serializedModel))) {\n             out.writeObject(appModel);\n         }\n         return serializedModel;\n     }\n+\n+    public static String getClassesDir(SourceSet sourceSet, AbstractTask context) {\n+        final Set<String> sourcePaths = new HashSet<>();\n+        for (File sourceDir : sourceSet.getAllJava().getSrcDirs()) {\n+            sourcePaths.add(sourceDir.getAbsolutePath());\n+        }\n+\n+        FileCollection classesDirs = sourceSet.getOutput().getClassesDirs();\n+        Set<File> classDirFiles = classesDirs.getFiles();\n+        if (classDirFiles.size() == 1) {\n+            return classesDirs.getAsPath();\n+        }\n+\n+        //there does not seem to be any sane way of dealing with multiple output dirs, as there does not seem\n+        //to be a way to map them. We will need to address this at some point, but for now we just stick them\n+        //all in a temp dir\n+\n+        final Path tmpClassesDir = context.getTemporaryDir().toPath().resolve(\"quarkus-app-classes\");\n+        try {\n+            Files.createDirectories(tmpClassesDir);\n+        } catch (IOException e) {\n+            throw new RuntimeException(ERROR_COLLECTING_PROJECT_CLASSES, e);\n+        }\n+        for (File c : classDirFiles) {\n+            Path cd = c.toPath();\n+            if (!Files.exists(cd)) {\n+                continue;\n+            }\n+            try (Stream<Path> stream = Files.walk(cd)) {\n+                stream.forEach(s -> {\n+                    try {\n+                        if (Files.isDirectory(s)) {\n+                            return;\n+                        }\n+                        final Path file = cd.relativize(tmpClassesDir);\n+                        final Path targetPath = tmpClassesDir.resolve(file.toString());\n+                        Files.createDirectories(targetPath.getParent());\n+                        byte[] data = Files.readAllBytes(s);\n+                        Files.write(targetPath, data);", "originalCommit": "60c6c67468527ce677cbee14903a5a268b401565", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzYxNTIzMw==", "url": "https://github.com/quarkusio/quarkus/pull/7394#discussion_r383615233", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    throw new RuntimeException(ERROR_COLLECTING_PROJECT_CLASSES, e);\n          \n          \n            \n                                    throw new UncheckedIOException(ERROR_COLLECTING_PROJECT_CLASSES, e);", "author": "gastaldi", "createdAt": "2020-02-25T01:44:02Z", "path": "devtools/gradle/src/main/java/io/quarkus/gradle/tasks/QuarkusGradleUtils.java", "diffHunk": "@@ -1,19 +1,79 @@\n package io.quarkus.gradle.tasks;\n \n+import java.io.File;\n import java.io.IOException;\n import java.io.ObjectOutputStream;\n import java.nio.file.Files;\n import java.nio.file.Path;\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.stream.Stream;\n+\n+import org.gradle.api.file.FileCollection;\n+import org.gradle.api.internal.AbstractTask;\n+import org.gradle.api.tasks.SourceSet;\n \n import io.quarkus.bootstrap.model.AppModel;\n \n public class QuarkusGradleUtils {\n \n+    private static final String ERROR_COLLECTING_PROJECT_CLASSES = \"Failed to collect project's classes in a temporary dir\";\n+\n     public static Path serializeAppModel(final AppModel appModel) throws IOException {\n         final Path serializedModel = Files.createTempFile(\"quarkus-\", \"-gradle-test\");\n         try (ObjectOutputStream out = new ObjectOutputStream(Files.newOutputStream(serializedModel))) {\n             out.writeObject(appModel);\n         }\n         return serializedModel;\n     }\n+\n+    public static String getClassesDir(SourceSet sourceSet, AbstractTask context) {\n+        final Set<String> sourcePaths = new HashSet<>();\n+        for (File sourceDir : sourceSet.getAllJava().getSrcDirs()) {\n+            sourcePaths.add(sourceDir.getAbsolutePath());\n+        }\n+\n+        FileCollection classesDirs = sourceSet.getOutput().getClassesDirs();\n+        Set<File> classDirFiles = classesDirs.getFiles();\n+        if (classDirFiles.size() == 1) {\n+            return classesDirs.getAsPath();\n+        }\n+\n+        //there does not seem to be any sane way of dealing with multiple output dirs, as there does not seem\n+        //to be a way to map them. We will need to address this at some point, but for now we just stick them\n+        //all in a temp dir\n+\n+        final Path tmpClassesDir = context.getTemporaryDir().toPath().resolve(\"quarkus-app-classes\");\n+        try {\n+            Files.createDirectories(tmpClassesDir);\n+        } catch (IOException e) {\n+            throw new RuntimeException(ERROR_COLLECTING_PROJECT_CLASSES, e);\n+        }\n+        for (File c : classDirFiles) {\n+            Path cd = c.toPath();\n+            if (!Files.exists(cd)) {\n+                continue;\n+            }\n+            try (Stream<Path> stream = Files.walk(cd)) {\n+                stream.forEach(s -> {\n+                    try {\n+                        if (Files.isDirectory(s)) {\n+                            return;\n+                        }\n+                        final Path file = cd.relativize(tmpClassesDir);\n+                        final Path targetPath = tmpClassesDir.resolve(file.toString());\n+                        Files.createDirectories(targetPath.getParent());\n+                        byte[] data = Files.readAllBytes(s);\n+                        Files.write(targetPath, data);\n+                    } catch (IOException e) {\n+                        throw new RuntimeException(ERROR_COLLECTING_PROJECT_CLASSES, e);", "originalCommit": "60c6c67468527ce677cbee14903a5a268b401565", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzYxNTI4Ng==", "url": "https://github.com/quarkusio/quarkus/pull/7394#discussion_r383615286", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            throw new RuntimeException(ERROR_COLLECTING_PROJECT_CLASSES, e);\n          \n          \n            \n                            throw new UncheckedIOException(ERROR_COLLECTING_PROJECT_CLASSES, e);", "author": "gastaldi", "createdAt": "2020-02-25T01:44:17Z", "path": "devtools/gradle/src/main/java/io/quarkus/gradle/tasks/QuarkusGradleUtils.java", "diffHunk": "@@ -1,19 +1,79 @@\n package io.quarkus.gradle.tasks;\n \n+import java.io.File;\n import java.io.IOException;\n import java.io.ObjectOutputStream;\n import java.nio.file.Files;\n import java.nio.file.Path;\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.stream.Stream;\n+\n+import org.gradle.api.file.FileCollection;\n+import org.gradle.api.internal.AbstractTask;\n+import org.gradle.api.tasks.SourceSet;\n \n import io.quarkus.bootstrap.model.AppModel;\n \n public class QuarkusGradleUtils {\n \n+    private static final String ERROR_COLLECTING_PROJECT_CLASSES = \"Failed to collect project's classes in a temporary dir\";\n+\n     public static Path serializeAppModel(final AppModel appModel) throws IOException {\n         final Path serializedModel = Files.createTempFile(\"quarkus-\", \"-gradle-test\");\n         try (ObjectOutputStream out = new ObjectOutputStream(Files.newOutputStream(serializedModel))) {\n             out.writeObject(appModel);\n         }\n         return serializedModel;\n     }\n+\n+    public static String getClassesDir(SourceSet sourceSet, AbstractTask context) {\n+        final Set<String> sourcePaths = new HashSet<>();\n+        for (File sourceDir : sourceSet.getAllJava().getSrcDirs()) {\n+            sourcePaths.add(sourceDir.getAbsolutePath());\n+        }\n+\n+        FileCollection classesDirs = sourceSet.getOutput().getClassesDirs();\n+        Set<File> classDirFiles = classesDirs.getFiles();\n+        if (classDirFiles.size() == 1) {\n+            return classesDirs.getAsPath();\n+        }\n+\n+        //there does not seem to be any sane way of dealing with multiple output dirs, as there does not seem\n+        //to be a way to map them. We will need to address this at some point, but for now we just stick them\n+        //all in a temp dir\n+\n+        final Path tmpClassesDir = context.getTemporaryDir().toPath().resolve(\"quarkus-app-classes\");\n+        try {\n+            Files.createDirectories(tmpClassesDir);\n+        } catch (IOException e) {\n+            throw new RuntimeException(ERROR_COLLECTING_PROJECT_CLASSES, e);\n+        }\n+        for (File c : classDirFiles) {\n+            Path cd = c.toPath();\n+            if (!Files.exists(cd)) {\n+                continue;\n+            }\n+            try (Stream<Path> stream = Files.walk(cd)) {\n+                stream.forEach(s -> {\n+                    try {\n+                        if (Files.isDirectory(s)) {\n+                            return;\n+                        }\n+                        final Path file = cd.relativize(tmpClassesDir);\n+                        final Path targetPath = tmpClassesDir.resolve(file.toString());\n+                        Files.createDirectories(targetPath.getParent());\n+                        byte[] data = Files.readAllBytes(s);\n+                        Files.write(targetPath, data);\n+                    } catch (IOException e) {\n+                        throw new RuntimeException(ERROR_COLLECTING_PROJECT_CLASSES, e);\n+                    }\n+\n+                });\n+            } catch (IOException e) {\n+                throw new RuntimeException(ERROR_COLLECTING_PROJECT_CLASSES, e);", "originalCommit": "60c6c67468527ce677cbee14903a5a268b401565", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzYxNTQ0MQ==", "url": "https://github.com/quarkusio/quarkus/pull/7394#discussion_r383615441", "bodyText": "Better also add an assert in the constructor to make sure root is never null", "author": "gastaldi", "createdAt": "2020-02-25T01:44:53Z", "path": "independent-projects/bootstrap/core/src/main/java/io/quarkus/bootstrap/classloading/DirectoryClassPathElement.java", "diffHunk": "@@ -102,4 +102,9 @@ public ProtectionDomain getProtectionDomain(ClassLoader classLoader) {\n     public void close() throws IOException {\n         //noop\n     }\n+\n+    @Override\n+    public String toString() {\n+        return root.toAbsolutePath().toString();", "originalCommit": "60c6c67468527ce677cbee14903a5a268b401565", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "e245f48cd93cb37359e45c37a20c1c60cdd1083a", "url": "https://github.com/quarkusio/quarkus/commit/e245f48cd93cb37359e45c37a20c1c60cdd1083a", "message": "Resolve Gradle's project's classes dir in case the JAR isn't available yet", "committedDate": "2020-02-25T10:00:01Z", "type": "forcePushed"}, {"oid": "6dc99743f7b0ef941191ec596bb3283ddf054455", "url": "https://github.com/quarkusio/quarkus/commit/6dc99743f7b0ef941191ec596bb3283ddf054455", "message": "* Resolve Gradle's project's classes dir in case the JAR isn't available yet\n* Use only the direct extension deps when creating a detached deployment classpath config", "committedDate": "2020-02-25T15:56:02Z", "type": "commit"}, {"oid": "6dc99743f7b0ef941191ec596bb3283ddf054455", "url": "https://github.com/quarkusio/quarkus/commit/6dc99743f7b0ef941191ec596bb3283ddf054455", "message": "* Resolve Gradle's project's classes dir in case the JAR isn't available yet\n* Use only the direct extension deps when creating a detached deployment classpath config", "committedDate": "2020-02-25T15:56:02Z", "type": "forcePushed"}]}