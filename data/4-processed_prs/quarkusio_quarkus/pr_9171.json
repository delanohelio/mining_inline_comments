{"pr_number": 9171, "pr_title": "Support overriding prefix of @ConfigProperties at the injection point", "pr_createdAt": "2020-05-08T07:59:48Z", "pr_url": "https://github.com/quarkusio/quarkus/pull/9171", "timeline": [{"oid": "04278af261d355be35f85f4c73a7e5da4ce13690", "url": "https://github.com/quarkusio/quarkus/commit/04278af261d355be35f85f4c73a7e5da4ce13690", "message": "Support overriding prefix of @ConfigProperties at the injection point\n\nResolves #9136", "committedDate": "2020-05-08T08:09:25Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjA3NDQxMQ==", "url": "https://github.com/quarkusio/quarkus/pull/9171#discussion_r422074411", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            <1> At this injection point `greetingConfiguration` with use the `greeting` prefix since that is what has been defined on `@ConfigProperties`.\n          \n          \n            \n            <1> At this injection point `greetingConfiguration` will use the `greeting` prefix since that is what has been defined on `@ConfigProperties`.", "author": "machi1990", "createdAt": "2020-05-08T10:43:52Z", "path": "docs/src/main/asciidoc/config.adoc", "diffHunk": "@@ -313,6 +313,42 @@ If the validation fails with the given configuration, the application will fail\n In the case of an interface being annotated with `@ConfigProperties`, the interface is allowed to extend other interfaces and methods from\n the entire interface hierarchy are used to bind properties.\n \n+=== Using same ConfigProperties with different prefixes\n+\n+Quarkus also supports allows the use of the same `@ConfigProperties` object with different prefixes for each injection point using the `io.quarkus.arc.config.@ConfigPrefix` annotation.\n+Say for example that `GreetingConfiguration` from above needs to be used for both the `greeting` prefix and the `other` prefix.\n+In that case the code would look like so:\n+\n+`GreetingConfiguration.java`\n+[source,java]\n+----\n+@ConfigProperties(prefix = \"greeting\")\n+public class GreetingConfiguration {\n+\n+    @Size(min = 20)\n+    public String message;\n+    public String suffix = \"!\";\n+\n+}\n+----\n+\n+`SomeBean.java`\n+[source,java]\n+----\n+@ApplicationScoped\n+public class SomeBean {\n+\n+    @Inject <1>\n+    GreetingConfiguration greetingConfiguration;\n+\n+    @ConfigPrefix(\"other\") <2>\n+    GreetingConfiguration otherConfiguration;\n+\n+}\n+----\n+<1> At this injection point `greetingConfiguration` with use the `greeting` prefix since that is what has been defined on `@ConfigProperties`.", "originalCommit": "04278af261d355be35f85f4c73a7e5da4ce13690", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjA3NDUxNg==", "url": "https://github.com/quarkusio/quarkus/pull/9171#discussion_r422074516", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            <2> At this injection point `otherConfiguration` with use the `other` prefix from `@ConfigPrefix`. Notice that in this case `@Inject` is not required.\n          \n          \n            \n            <2> At this injection point `otherConfiguration` will use the `other` prefix from `@ConfigPrefix`. Notice that in this case `@Inject` is not required.", "author": "machi1990", "createdAt": "2020-05-08T10:44:03Z", "path": "docs/src/main/asciidoc/config.adoc", "diffHunk": "@@ -313,6 +313,42 @@ If the validation fails with the given configuration, the application will fail\n In the case of an interface being annotated with `@ConfigProperties`, the interface is allowed to extend other interfaces and methods from\n the entire interface hierarchy are used to bind properties.\n \n+=== Using same ConfigProperties with different prefixes\n+\n+Quarkus also supports allows the use of the same `@ConfigProperties` object with different prefixes for each injection point using the `io.quarkus.arc.config.@ConfigPrefix` annotation.\n+Say for example that `GreetingConfiguration` from above needs to be used for both the `greeting` prefix and the `other` prefix.\n+In that case the code would look like so:\n+\n+`GreetingConfiguration.java`\n+[source,java]\n+----\n+@ConfigProperties(prefix = \"greeting\")\n+public class GreetingConfiguration {\n+\n+    @Size(min = 20)\n+    public String message;\n+    public String suffix = \"!\";\n+\n+}\n+----\n+\n+`SomeBean.java`\n+[source,java]\n+----\n+@ApplicationScoped\n+public class SomeBean {\n+\n+    @Inject <1>\n+    GreetingConfiguration greetingConfiguration;\n+\n+    @ConfigPrefix(\"other\") <2>\n+    GreetingConfiguration otherConfiguration;\n+\n+}\n+----\n+<1> At this injection point `greetingConfiguration` with use the `greeting` prefix since that is what has been defined on `@ConfigProperties`.\n+<2> At this injection point `otherConfiguration` with use the `other` prefix from `@ConfigPrefix`. Notice that in this case `@Inject` is not required.", "originalCommit": "04278af261d355be35f85f4c73a7e5da4ce13690", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "4431e0dfff7e062a0544c63a1009e290318e94f6", "url": "https://github.com/quarkusio/quarkus/commit/4431e0dfff7e062a0544c63a1009e290318e94f6", "message": "Support overriding prefix of @ConfigProperties at the injection point\n\nResolves #9136\n\nCo-authored-by: Manyanda Chitimbo <manyanda.chitimbo@gmail.com>", "committedDate": "2020-05-08T11:09:14Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzAzODkzOQ==", "url": "https://github.com/quarkusio/quarkus/pull/9171#discussion_r423038939", "bodyText": "supports allows ?", "author": "mkouba", "createdAt": "2020-05-11T13:28:51Z", "path": "docs/src/main/asciidoc/config.adoc", "diffHunk": "@@ -313,6 +313,42 @@ If the validation fails with the given configuration, the application will fail\n In the case of an interface being annotated with `@ConfigProperties`, the interface is allowed to extend other interfaces and methods from\n the entire interface hierarchy are used to bind properties.\n \n+=== Using same ConfigProperties with different prefixes\n+\n+Quarkus also supports allows the use of the same `@ConfigProperties` object with different prefixes for each injection point using the `io.quarkus.arc.config.@ConfigPrefix` annotation.", "originalCommit": "4431e0dfff7e062a0544c63a1009e290318e94f6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzA0MDc3OQ==", "url": "https://github.com/quarkusio/quarkus/pull/9171#discussion_r423040779", "bodyText": "This annotation transformer is redundant - ConfigPrefix is a qualifier and so it should be handled by io.quarkus.arc.deployment.AutoInjectFieldProcessor.", "author": "mkouba", "createdAt": "2020-05-11T13:31:33Z", "path": "extensions/arc/deployment/src/main/java/io/quarkus/arc/deployment/configproperties/ConfigPropertiesBuildStep.java", "diffHunk": "@@ -29,13 +37,76 @@\n     @BuildStep\n     void produceConfigPropertiesMetadata(CombinedIndexBuildItem combinedIndex, ArcConfig arcConfig,\n             BuildProducer<ConfigPropertiesMetadataBuildItem> configPropertiesMetadataProducer) {\n-        for (AnnotationInstance annotation : combinedIndex.getIndex().getAnnotations(DotNames.CONFIG_PROPERTIES)) {\n+\n+        IndexView index = combinedIndex.getIndex();\n+\n+        Map<DotName, ConfigProperties.NamingStrategy> namingStrategies = new HashMap<>();\n+\n+        // handle @ConfigProperties\n+        for (AnnotationInstance instance : index.getAnnotations(DotNames.CONFIG_PROPERTIES)) {\n+            ClassInfo classInfo = instance.target().asClass();\n+\n+            ConfigProperties.NamingStrategy namingStrategy = getNamingStrategy(arcConfig, instance.value(\"namingStrategy\"));\n+            namingStrategies.put(classInfo.name(), namingStrategy);\n+\n+            configPropertiesMetadataProducer\n+                    .produce(new ConfigPropertiesMetadataBuildItem(classInfo, getPrefix(instance), namingStrategy, false));\n+        }\n+\n+        // handle @ConfigPrefix\n+        for (AnnotationInstance instance : index.getAnnotations(DotNames.CONFIG_PREFIX)) {\n+            ClassInfo classInfo;\n+            if (instance.target().kind() == AnnotationTarget.Kind.FIELD) {\n+                classInfo = index.getClassByName(instance.target().asField().type().name());\n+            } else if (instance.target().kind() == AnnotationTarget.Kind.METHOD_PARAMETER) {\n+                short position = instance.target().asMethodParameter().position();\n+                classInfo = index\n+                        .getClassByName(instance.target().asMethodParameter().method().parameters().get(position).name());\n+            } else {\n+                break;\n+            }\n+\n+            // if the class was annotated with @ConfigProperties, use the strategy that was defined there, otherwise fallback to the default\n+            ConfigProperties.NamingStrategy namingStrategy = namingStrategies.getOrDefault(classInfo.name(),\n+                    arcConfig.configPropertiesDefaultNamingStrategy);\n+\n             configPropertiesMetadataProducer\n-                    .produce(\n-                            new ConfigPropertiesMetadataBuildItem(annotation, arcConfig.configPropertiesDefaultNamingStrategy));\n+                    .produce(new ConfigPropertiesMetadataBuildItem(classInfo, instance.value().asString(),\n+                            namingStrategy, true));\n         }\n     }\n \n+    // allow @ConfigPrefix to be used without @Inject\n+    @BuildStep\n+    public AnnotationsTransformerBuildItem annotationsTransformer() {", "originalCommit": "4431e0dfff7e062a0544c63a1009e290318e94f6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzA3MjQxMw==", "url": "https://github.com/quarkusio/quarkus/pull/9171#discussion_r423072413", "bodyText": "Right! Forgot about that, thanks!", "author": "geoand", "createdAt": "2020-05-11T14:17:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzA0MDc3OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzA0MjIzMg==", "url": "https://github.com/quarkusio/quarkus/pull/9171#discussion_r423042232", "bodyText": "There is no need to use the getters for @Singleton beans - you could save quite a few lines of code ;-).", "author": "mkouba", "createdAt": "2020-05-11T13:33:39Z", "path": "extensions/arc/deployment/src/test/java/io/quarkus/arc/test/configproperties/MultipleClassConfigPrefixTest.java", "diffHunk": "@@ -0,0 +1,111 @@\n+package io.quarkus.arc.test.configproperties;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import javax.inject.Inject;\n+import javax.inject.Singleton;\n+\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.asset.StringAsset;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+\n+import io.quarkus.arc.config.ConfigPrefix;\n+import io.quarkus.arc.config.ConfigProperties;\n+import io.quarkus.test.QuarkusUnitTest;\n+\n+public class MultipleClassConfigPrefixTest {\n+\n+    @RegisterExtension\n+    static final QuarkusUnitTest config = new QuarkusUnitTest()\n+            .setArchiveProducer(() -> ShrinkWrap.create(JavaArchive.class)\n+                    .addClasses(DummyBean.class, DummyProperties.class)\n+                    .addAsResource(new StringAsset(\n+                            \"dummy.name=quarkus\\ndummy.someNumbers=1,2,3,4\\nother.name=redhat\\nother.someNumbers=3,2,1\"),\n+                            \"application.properties\"));\n+\n+    @Inject\n+    DummyBean dummyBean;\n+\n+    @Test\n+    public void testConfiguredValues() {\n+        assertEquals(\"quarkus\", dummyBean.getName());\n+        assertEquals(\"default\", dummyBean.getUnset());\n+        assertEquals(Arrays.asList(1, 2, 3, 4), dummyBean.getSomeNumbers());\n+\n+        assertEquals(\"redhat\", dummyBean.getName2());\n+        assertEquals(\"default\", dummyBean.getUnset2());\n+        assertEquals(Arrays.asList(3, 2, 1), dummyBean.getSomeNumbers2());\n+    }\n+\n+    @Singleton\n+    public static class DummyBean {\n+\n+        @Inject\n+        DummyProperties dummyProperties;\n+\n+        @ConfigPrefix(\"other\")\n+        DummyProperties dummyProperties2;\n+\n+        String getName() {", "originalCommit": "4431e0dfff7e062a0544c63a1009e290318e94f6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzA3MjMwNg==", "url": "https://github.com/quarkusio/quarkus/pull/9171#discussion_r423072306", "bodyText": "True, I'll do that :)", "author": "geoand", "createdAt": "2020-05-11T14:17:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzA0MjIzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzgwNTI3OQ==", "url": "https://github.com/quarkusio/quarkus/pull/9171#discussion_r423805279", "bodyText": "It would probably make sense for other tests as well. But it's just nitpicking ;-).", "author": "mkouba", "createdAt": "2020-05-12T15:01:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzA0MjIzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzgxMTE1OQ==", "url": "https://github.com/quarkusio/quarkus/pull/9171#discussion_r423811159", "bodyText": "Yeah for sure. When I need some very low effort task to do, I'll clean the rest up as well :)", "author": "geoand", "createdAt": "2020-05-12T15:08:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzA0MjIzMg=="}], "type": "inlineReview"}, {"oid": "dfe1a39cfe1f994f7f746b881e12442106b9499a", "url": "https://github.com/quarkusio/quarkus/commit/dfe1a39cfe1f994f7f746b881e12442106b9499a", "message": "Support overriding prefix of @ConfigProperties at the injection point\n\nResolves #9136\n\nCo-authored-by: Manyanda Chitimbo <manyanda.chitimbo@gmail.com>\nCo-authored-by: Martin Kouba <mkouba@redhat.com>", "committedDate": "2020-05-11T14:26:16Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzE3NjcxOA==", "url": "https://github.com/quarkusio/quarkus/pull/9171#discussion_r423176718", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            <2> At this injection point `otherConfiguration` will use the `other` prefix from `@ConfigPrefix`. Notice that in this case `@Inject` is not required.\n          \n          \n            \n            <2> At this injection point `otherConfiguration` will use the `other` prefix from `@ConfigPrefix` instead of the `greeting` prefix. Notice that in this case `@Inject` is not required.\n          \n      \n    \n    \n  \n\n? I think that's what you intented to do when you talked about it.\nTBH, I'm wondering if we should concatenate the prefixes instead of replacing them? I haven't looked at the implementation so it might be what you did.", "author": "gsmet", "createdAt": "2020-05-11T16:48:17Z", "path": "docs/src/main/asciidoc/config.adoc", "diffHunk": "@@ -313,6 +313,42 @@ If the validation fails with the given configuration, the application will fail\n In the case of an interface being annotated with `@ConfigProperties`, the interface is allowed to extend other interfaces and methods from\n the entire interface hierarchy are used to bind properties.\n \n+=== Using same ConfigProperties with different prefixes\n+\n+Quarkus also supports the use of the same `@ConfigProperties` object with different prefixes for each injection point using the `io.quarkus.arc.config.@ConfigPrefix` annotation.\n+Say for example that `GreetingConfiguration` from above needs to be used for both the `greeting` prefix and the `other` prefix.\n+In that case the code would look like so:\n+\n+`GreetingConfiguration.java`\n+[source,java]\n+----\n+@ConfigProperties(prefix = \"greeting\")\n+public class GreetingConfiguration {\n+\n+    @Size(min = 20)\n+    public String message;\n+    public String suffix = \"!\";\n+\n+}\n+----\n+\n+`SomeBean.java`\n+[source,java]\n+----\n+@ApplicationScoped\n+public class SomeBean {\n+\n+    @Inject <1>\n+    GreetingConfiguration greetingConfiguration;\n+\n+    @ConfigPrefix(\"other\") <2>\n+    GreetingConfiguration otherConfiguration;\n+\n+}\n+----\n+<1> At this injection point `greetingConfiguration` will use the `greeting` prefix since that is what has been defined on `@ConfigProperties`.\n+<2> At this injection point `otherConfiguration` will use the `other` prefix from `@ConfigPrefix`. Notice that in this case `@Inject` is not required.", "originalCommit": "dfe1a39cfe1f994f7f746b881e12442106b9499a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzE4MjY4OQ==", "url": "https://github.com/quarkusio/quarkus/pull/9171#discussion_r423182689", "bodyText": "We don't do concatenation, we replace the prefix. The reason is that the user has more flexibility that way. With concatenation you can't change the prefix", "author": "geoand", "createdAt": "2020-05-11T16:57:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzE3NjcxOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzE4NjI5Mw==", "url": "https://github.com/quarkusio/quarkus/pull/9171#discussion_r423186293", "bodyText": "Yeah, that's one way of seeing it :).\nLet's try your way of doing things and see how it goes!", "author": "gsmet", "createdAt": "2020-05-11T17:03:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzE3NjcxOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzE4Njk4OA==", "url": "https://github.com/quarkusio/quarkus/pull/9171#discussion_r423186988", "bodyText": "Also, this is what the OP reported", "author": "geoand", "createdAt": "2020-05-11T17:04:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzE3NjcxOA=="}], "type": "inlineReview"}, {"oid": "726977138e53ec51bb7b21c80612edbe78a64493", "url": "https://github.com/quarkusio/quarkus/commit/726977138e53ec51bb7b21c80612edbe78a64493", "message": "Support overriding prefix of @ConfigProperties at the injection point\n\nResolves #9136\n\nCo-authored-by: Manyanda Chitimbo <manyanda.chitimbo@gmail.com>\nCo-authored-by: Martin Kouba <mkouba@redhat.com>\nCo-authored-by: Guillaume Smet <guillaume.smet@gmail.com>", "committedDate": "2020-05-11T16:58:36Z", "type": "commit"}, {"oid": "726977138e53ec51bb7b21c80612edbe78a64493", "url": "https://github.com/quarkusio/quarkus/commit/726977138e53ec51bb7b21c80612edbe78a64493", "message": "Support overriding prefix of @ConfigProperties at the injection point\n\nResolves #9136\n\nCo-authored-by: Manyanda Chitimbo <manyanda.chitimbo@gmail.com>\nCo-authored-by: Martin Kouba <mkouba@redhat.com>\nCo-authored-by: Guillaume Smet <guillaume.smet@gmail.com>", "committedDate": "2020-05-11T16:58:36Z", "type": "forcePushed"}]}