{"pr_number": 7327, "pr_title": "Mongodb panache/mutiny", "pr_createdAt": "2020-02-21T09:21:08Z", "pr_url": "https://github.com/quarkusio/quarkus/pull/7327", "timeline": [{"oid": "89ec31f267348b8d510c33836e7c82d8620fc43b", "url": "https://github.com/quarkusio/quarkus/commit/89ec31f267348b8d510c33836e7c82d8620fc43b", "message": "Implement reactive panache with Mutiny", "committedDate": "2020-02-21T09:30:57Z", "type": "forcePushed"}, {"oid": "e9be51cab611da885f22d0e56f345c68d0bf8820", "url": "https://github.com/quarkusio/quarkus/commit/e9be51cab611da885f22d0e56f345c68d0bf8820", "message": "Implement reactive panache with Mutiny", "committedDate": "2020-02-24T15:25:06Z", "type": "forcePushed"}, {"oid": "14782e9a2f95c3745646f835ddcc825681d11196", "url": "https://github.com/quarkusio/quarkus/commit/14782e9a2f95c3745646f835ddcc825681d11196", "message": "Implement reactive panache with Mutiny", "committedDate": "2020-02-24T15:28:49Z", "type": "forcePushed"}, {"oid": "5695a259bb978facedd787d2e7c0fb8d00d922ca", "url": "https://github.com/quarkusio/quarkus/commit/5695a259bb978facedd787d2e7c0fb8d00d922ca", "message": "Implement reactive panache with Mutiny", "committedDate": "2020-02-24T16:05:14Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzM5NTAyNQ==", "url": "https://github.com/quarkusio/quarkus/pull/7327#discussion_r383395025", "bodyText": "They should return a Multi (which implement Publisher)", "author": "cescoffier", "createdAt": "2020-02-24T17:07:24Z", "path": "docs/src/main/asciidoc/mongodb-panache.adoc", "diffHunk": "@@ -623,43 +623,43 @@ person.birth = LocalDate.of(1910, Month.FEBRUARY, 1);\n person.status = Status.Alive;\n \n // persist it\n-CompletionStage<Void> cs1 = person.persist();\n+Uni<Void> cs1 = person.persist();\n \n person.status = Status.Dead;\n \n // Your must call update() in order to send your entity modifications to MongoDB\n-CompletionStage<Void> cs2 = person.update();\n+Uni<Void> cs2 = person.update();\n \n // delete it\n-CompletionStage<Void> cs3 = person.delete();\n+Uni<Void> cs3 = person.delete();\n \n // getting a list of all persons\n-CompletionStage<List<ReactivePerson>> allPersons = ReactivePerson.listAll();\n+Uni<List<ReactivePerson>> allPersons = ReactivePerson.listAll();\n \n // finding a specific person by ID\n-CompletionStage<ReactivePerson> personById = ReactivePerson.findById(personId);\n+Uni<ReactivePerson> personById = ReactivePerson.findById(personId);\n \n // finding a specific person by ID via an Optional\n-CompletionStage<Optional<ReactivePerson>> optional = ReactivePerson.findByIdOptional(personId);\n-personById = optional.thenApply(o -> o.orElseThrow(() -> new NotFoundException()));\n+Uni<Optional<ReactivePerson>> optional = ReactivePerson.findByIdOptional(personId);\n+personById = optional.map(o -> o.orElseThrow(() -> new NotFoundException()));\n \n // finding all living persons\n-CompletionStage<List<ReactivePerson>> livingPersons = ReactivePerson.list(\"status\", Status.Alive);\n+Uni<List<ReactivePerson>> livingPersons = ReactivePerson.list(\"status\", Status.Alive);\n \n // counting all persons\n-CompletionStage<Long> countAll = ReactivePerson.count();\n+Uni<Long> countAll = ReactivePerson.count();\n \n // counting all living persons\n-CompletionStage<Long> countAlive = ReactivePerson.count(\"status\", Status.Alive);\n+Uni<Long> countAlive = ReactivePerson.count(\"status\", Status.Alive);\n \n // delete all living persons\n-CompletionStage<Long>  deleteCount = ReactivePerson.delete(\"status\", Status.Alive);\n+Uni<Long>  deleteCount = ReactivePerson.delete(\"status\", Status.Alive);\n \n // delete all persons\n deleteCount = ReactivePerson.deleteAll();\n ----\n \n-TIP: If you use MongoDB with Panache in conjunction with RESTEasy, you can directly return a reactive type inside your JAX-RS resource endpoint as RESTEasy will handle it correctly.\n+TIP: If you use MongoDB with Panache in conjunction with RESTEasy, you can directly return a reactive type inside your JAX-RS resource endpoint as long as you include the `quarkus-resteasy-mutiny` extension.\n \n The same query facility exists for the reactive types, but the `stream()` methods act differently: they return a reactive stream `Publisher` instead of a `Stream`.", "originalCommit": "5695a259bb978facedd787d2e7c0fb8d00d922ca", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzcyNjA1MA==", "url": "https://github.com/quarkusio/quarkus/pull/7327#discussion_r383726050", "bodyText": "updated", "author": "loicmathieu", "createdAt": "2020-02-25T08:36:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzM5NTAyNQ=="}], "type": "inlineReview"}, {"oid": "c1758ebc1315eddc44b2336e1bbd3e238f43bffa", "url": "https://github.com/quarkusio/quarkus/commit/c1758ebc1315eddc44b2336e1bbd3e238f43bffa", "message": "Implement reactive panache with Mutiny", "committedDate": "2020-02-25T08:35:29Z", "type": "commit"}, {"oid": "c1758ebc1315eddc44b2336e1bbd3e238f43bffa", "url": "https://github.com/quarkusio/quarkus/commit/c1758ebc1315eddc44b2336e1bbd3e238f43bffa", "message": "Implement reactive panache with Mutiny", "committedDate": "2020-02-25T08:35:29Z", "type": "forcePushed"}]}