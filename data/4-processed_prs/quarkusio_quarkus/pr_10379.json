{"pr_number": 10379, "pr_title": "Add support for mutiny types in reactive routes", "pr_createdAt": "2020-06-30T16:15:56Z", "pr_url": "https://github.com/quarkusio/quarkus/pull/10379", "timeline": [{"oid": "7225af6aa695cd1577821697d745614435ada20d", "url": "https://github.com/quarkusio/quarkus/commit/7225af6aa695cd1577821697d745614435ada20d", "message": "Add support for Uni and synchronous result in reactive routes", "committedDate": "2020-06-28T17:57:38Z", "type": "commit"}, {"oid": "5c748c5f2b6163053033bcc57612981a04166933", "url": "https://github.com/quarkusio/quarkus/commit/5c748c5f2b6163053033bcc57612981a04166933", "message": "Add support for Multi to  Reactive Routes", "committedDate": "2020-06-29T13:23:13Z", "type": "commit"}, {"oid": "91e4741765370c374a37c99e9192b6b05cf1ca03", "url": "https://github.com/quarkusio/quarkus/commit/91e4741765370c374a37c99e9192b6b05cf1ca03", "message": "Add support for SSE response to Reactive Routes", "committedDate": "2020-06-30T09:21:20Z", "type": "commit"}, {"oid": "00a6480706294e28269bebc93681856e7e7d90ae", "url": "https://github.com/quarkusio/quarkus/commit/00a6480706294e28269bebc93681856e7e7d90ae", "message": "Extend reactive route documentation with the Mutiny support", "committedDate": "2020-06-30T16:14:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIzMDQ2MQ==", "url": "https://github.com/quarkusio/quarkus/pull/10379#discussion_r448230461", "bodyText": "Hm, does it make sense to always produce a JSON array? It's not very consistent with Uni<String> and String return types.", "author": "mkouba", "createdAt": "2020-07-01T09:16:31Z", "path": "docs/src/main/asciidoc/reactive-routes.adoc", "diffHunk": "@@ -163,6 +163,189 @@ public class SimpleRoutes {\n ----\n <1> The `path` value is used as a prefix for any route method declared on the class where `Route#path()` is used. The `produces` value is used for content-based routing for all routes where `Route#produces()` is empty.\n \n+=== Returning Unis\n+\n+In a reactive route, you can return a `Uni` directly:\n+\n+[source,java]\n+----\n+@Route(path = \"/hello\")\n+Uni<String> hello(RoutingContext context) {\n+    return Uni.createFrom().item(\"Hello world!\");\n+}\n+\n+@Route(path = \"/person\")\n+Uni<Person> getPerson(RoutingContext context) {\n+    return Uni.createFrom().item(() -> new Person(\"neo\", 12345));\n+}\n+----\n+\n+Returning `Unis` is convenient when using a reactive client:\n+\n+[source,java]\n+----\n+@Route(path = \"/mail\")\n+Uni<Void> sendEmail(RoutingContext context) {\n+    return mailer.send(...);\n+}\n+----\n+\n+The item produced by the returned `Uni` can be:\n+\n+* a string - written into the HTTP response directly\n+* a buffer - written into the HTTP response directly\n+* an object - written into the HTTP response after having been encoded into JSON.\n+The `content-type` header is set to `application/json` if not already set.\n+\n+If the returned `Uni` produces a failure (or is `null`), an HTTP 500 response is written.\n+\n+Returning a `Uni<Void>` produces a 204 response (no content).\n+\n+=== Returning results\n+\n+You can also return a result directly:\n+\n+[source, java]\n+----\n+@Route(path = \"/hello\")\n+String helloSync(RoutingContext context) {\n+    return \"Hello world\";\n+}\n+----\n+\n+Be aware, the processing must be **non-blocking** as reactive routes are invoked on the IO Thread.\n+Otherwise, use the `blocking` attribute of the `@Route` annotation.\n+\n+The method can return:\n+\n+* a string - written into the HTTP response directly\n+* a buffer - written into the HTTP response directly\n+* an object - written into the HTTP response after having been encoded into JSON.\n+The `content-type` header is set to `application/json` if not already set.\n+\n+=== Returning Multis\n+\n+A reactive route can return a `Multi`.\n+The items are written one by one, in the response.\n+The response `Transfer-Encoding` header is set to `chunked`.\n+\n+[source, java]\n+----\n+@Route(path = \"/hello\")\n+Multi<String> hellos(RoutingContext context) {\n+    return Multi.createFrom().items(\"hello\", \"world\", \"!\");  // <1>\n+}\n+----\n+1. Produces `[\"hello\", \"world\", \"!\"]`\n+\n+The method can return:\n+\n+* a `Multi<String>` - the items are written one by one in a JSON Array.", "originalCommit": "00a6480706294e28269bebc93681856e7e7d90ae", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODI1NDI3OQ==", "url": "https://github.com/quarkusio/quarkus/pull/10379#discussion_r448254279", "bodyText": "It the behavior used in other frameworks.\nFor raw output, use buffer.", "author": "cescoffier", "createdAt": "2020-07-01T09:58:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIzMDQ2MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODI3NTQwNQ==", "url": "https://github.com/quarkusio/quarkus/pull/10379#discussion_r448275405", "bodyText": "Well, I'm talking about use cases like io.quarkus.qute.TemplateInstance.publisher().\nWRT consistency - we don't encode the String and Uni<String> return values to JSON either...", "author": "mkouba", "createdAt": "2020-07-01T10:40:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIzMDQ2MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODI3NjY0MA==", "url": "https://github.com/quarkusio/quarkus/pull/10379#discussion_r448276640", "bodyText": "It the behavior used in other frameworks.\n\nWhat frameworks BWT? ;-)", "author": "mkouba", "createdAt": "2020-07-01T10:42:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIzMDQ2MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc2NTU1NQ==", "url": "https://github.com/quarkusio/quarkus/pull/10379#discussion_r448765555", "bodyText": "Spring Routes do this, I also remember that Micronaut does something similar.\nThe ideal would be to check the \"produces\" attribute from the Route annotation. However, at the moment, we generate one method per \"method\" which can have multiple Route annotations.", "author": "cescoffier", "createdAt": "2020-07-02T06:00:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIzMDQ2MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc3OTQ3MQ==", "url": "https://github.com/quarkusio/quarkus/pull/10379#discussion_r448779471", "bodyText": "Spring Routes do this...\n\nYes, it seems that they do this based on the media type.\n\nThe ideal would be to check the \"produces\" attribute from the Route annotation. However, at the moment, we generate one method per \"method\" which can have multiple Route annotations.\n\nThat would make perfect sense. But until we implement this I don't think it makes any sense to use some default (JSON) for Multi<String> but no default for Uni<String> and String.", "author": "mkouba", "createdAt": "2020-07-02T06:38:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIzMDQ2MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk3MjUxMg==", "url": "https://github.com/quarkusio/quarkus/pull/10379#discussion_r448972512", "bodyText": "@mkouba and I discussed it and we are going to use the same approach we use for SSE. I'm going to update the PR soon.", "author": "cescoffier", "createdAt": "2020-07-02T12:42:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIzMDQ2MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIzNTE5OQ==", "url": "https://github.com/quarkusio/quarkus/pull/10379#discussion_r448235199", "bodyText": "+1 if a method returns something we should make the context param optional...", "author": "mkouba", "createdAt": "2020-07-01T09:24:53Z", "path": "extensions/vertx-web/deployment/src/main/java/io/quarkus/vertx/web/deployment/VertxWebProcessor.java", "diffHunk": "@@ -496,25 +473,74 @@ void implementInvoke(BeanInfo bean, MethodInfo method, ClassCreator invokerCreat\n \n         ResultHandle paramHandle;\n         MethodDescriptor methodDescriptor;\n+        String returnType = descriptor.getReturnType().name().toString();\n+\n+        // TODO Make Routing Context optional, allow injected Response and Request individually.", "originalCommit": "00a6480706294e28269bebc93681856e7e7d90ae", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODI3ODI4NQ==", "url": "https://github.com/quarkusio/quarkus/pull/10379#discussion_r448278285", "bodyText": "I've created #10397", "author": "mkouba", "createdAt": "2020-07-01T10:45:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIzNTE5OQ=="}], "type": "inlineReview"}, {"oid": "673c1b5d56bf76491cc35d56af1e88caf93e0321", "url": "https://github.com/quarkusio/quarkus/commit/673c1b5d56bf76491cc35d56af1e88caf93e0321", "message": "Handle Json Array streaming separately from the unprocessed stream.", "committedDate": "2020-07-02T14:34:45Z", "type": "commit"}]}