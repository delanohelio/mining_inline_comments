{"pr_number": 8330, "pr_title": "Spring Boot properties extension guide #8186", "pr_createdAt": "2020-04-01T13:16:36Z", "pr_url": "https://github.com/quarkusio/quarkus/pull/8330", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTYwNzcyMw==", "url": "https://github.com/quarkusio/quarkus/pull/8330#discussion_r401607723", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            While a missing property in a configuration file will not cause your application to fail it will neither have a value set to it.\n          \n          \n            \n            While a missing property in a configuration file will not cause your application to fail, it will nevertheless not have a value set.", "author": "geoand", "createdAt": "2020-04-01T13:18:54Z", "path": "docs/src/main/asciidoc/spring-boot-properties.adoc", "diffHunk": "@@ -0,0 +1,373 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Accessing application properties with Spring Boot properties API\n+\n+include::./attributes.adoc[]\n+:extension-status: preview\n+\n+If you prefer to use Spring Boot `@ConfigurationProperties` annotated class to access application properties instead of a\n+Quarkus native `@ConfigProperties` or a MicroProfile `@ConfigProperty` approach, you can do that with this extension.\n+\n+include::./status-include.adoc[]\n+\n+== Prerequisites\n+\n+To complete this guide, you need:\n+\n+* less than 15 minutes\n+* an IDE\n+* JDK 1.8+ installed with `JAVA_HOME` configured appropriately\n+* Apache Maven {maven-version}\n+\n+== Solution\n+\n+We recommend that you follow the instructions in the next sections and create the application step by step.\n+However, you can go right to the completed example.\n+\n+Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive].\n+\n+The solution is located in the `spring-boot-properties-quickstart` {quickstarts-tree-url}/spring-boot-properties-quickstart[directory].\n+\n+== Creating the Maven project\n+\n+First, we need a new project. Create a new project with the following command:\n+\n+[source,shell,subs=attributes+]\n+----\n+mvn io.quarkus:quarkus-maven-plugin:{quarkus-version}:create \\\n+    -DprojectGroupId=org.acme \\\n+    -DprojectArtifactId=spring-boot-properties-quickstart \\\n+    -DclassName=\"org.acme.spring.boot.properties.GreetingResource\" \\\n+    -Dpath=\"/greeting\" \\\n+    -Dextensions=\"spring-boot-properties\"\n+cd spring-boot-properties-quickstart\n+----\n+\n+This command generates a Maven project with a REST endpoint and imports the `spring-boot-properties` extension.\n+\n+== GreetingController\n+\n+The Quarkus Maven plugin automatically generated a `GreetingResource` JAX-RS resource in the\n+`src/main/java/org/acme/spring/boot/properties/GreetingResource.java` file that looks like:\n+\n+[source,java]\n+----\n+package org.acme.spring.boot.properties;\n+\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+\n+@Path(\"/hello\")\n+public class GreetingResource {\n+\n+    @GET\n+    @Produces(MediaType.TEXT_PLAIN)\n+    public String hello() {\n+        return \"hello\";\n+    }\n+}\n+----\n+\n+== Injecting properties\n+\n+Create a new class `src/main/java/org/acme/spring/boot/properties/GreetingProperties.java` with a message field:\n+\n+[source,java]\n+----\n+package org.acme.spring.boot.properties;\n+\n+import org.springframework.boot.context.properties.ConfigurationProperties;\n+\n+@ConfigurationProperties(\"greeting\")\n+public class GreetingProperties {\n+\n+    public String text;\n+}\n+----\n+\n+Here `text` field is public, but it could also be a private field with getter and setter or just a public getter in an interface.\n+Because `text` does not have a default value it is considered required and unless it is defined in a configuration file (`application.properties` by default)  your application will fail to start.\n+Define this property in your `src/main/resources/application.properties` file:\n+\n+[source,shell]\n+----\n+# Your configuration properties\n+greeting.text = hello\n+----\n+\n+Now modify `GreetingResource` to start using the `GreetingProperties`:\n+\n+[source,java]\n+----\n+package org.acme.spring.boot.properties;\n+\n+import javax.inject.Inject;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+\n+@Path(\"/greeting\")\n+public class GreetingResource {\n+\n+    @Inject\n+    GreetingProperties properties;\n+\n+    @GET\n+    @Produces(MediaType.TEXT_PLAIN)\n+    public String hello() {\n+        return properties.text;\n+    }\n+}\n+----\n+\n+Run the tests to verify that application still functions correctly.\n+\n+== Package and run the application\n+\n+Run the application with: `./mvnw compile quarkus:dev`.\n+Open your browser to http://localhost:8080/greeting.\n+\n+Changing the configuration file is immediately reflected.\n+\n+As usual, the application can be packaged using `./mvnw clean package` and executed using the `-runner.jar` file.\n+You can also generate the native executable with `./mvnw clean package -Pnative`.\n+\n+== Default values\n+\n+Now let's add a suffix for a greeting which we'll set to have a default value.\n+\n+\n+Properties with default values can be configured in a configuration file just like any other property.\n+However, the default value will be used if the property was not defined in a configuration file.\n+\n+Go ahead and add the new field to the `GreetingProperties` class:\n+\n+[source,java]\n+----\n+package org.acme.spring.boot.properties;\n+\n+import org.springframework.boot.context.properties.ConfigurationProperties;\n+\n+@ConfigurationProperties(\"greeting\")\n+public class GreetingProperties {\n+\n+    public String text;\n+\n+    public String suffix = \"!\";\n+}\n+----\n+\n+And update the `GreetingResource` and its test `GreetingResourceTest`:\n+\n+[source,java]\n+----\n+package org.acme.spring.boot.properties;\n+\n+import javax.inject.Inject;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+\n+@Path(\"/greeting\")\n+public class GreetingResource {\n+\n+    @Inject\n+    GreetingProperties properties;\n+\n+    @GET\n+    @Produces(MediaType.TEXT_PLAIN)\n+    public String hello() {\n+        return properties.text + properties.suffix;\n+    }\n+}\n+----\n+\n+[source,java]\n+----\n+package org.acme.spring.boot.properties;\n+\n+import io.quarkus.test.junit.QuarkusTest;\n+import org.junit.jupiter.api.Test;\n+\n+import static io.restassured.RestAssured.given;\n+import static org.hamcrest.CoreMatchers.is;\n+\n+@QuarkusTest\n+public class GreetingResourceTest {\n+\n+    @Test\n+    public void testHelloEndpoint() {\n+        given()\n+          .when().get(\"/greeting\")\n+          .then()\n+             .statusCode(200)\n+             .body(is(\"hello!\"));\n+    }\n+}\n+----\n+\n+Run the tests to verify the change.\n+\n+== Optional values\n+\n+Properties with optional values are the middle-ground between standard and properties with default values.\n+While a missing property in a configuration file will not cause your application to fail it will neither have a value set to it.", "originalCommit": "9be673bb59e56cf6065692ee79b9c28a920884c6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTYwODI0NQ==", "url": "https://github.com/quarkusio/quarkus/pull/8330#discussion_r401608245", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            We use java `Optional` type to define such properties.\n          \n          \n            \n            We use `java.util.Optional` type to define such properties.", "author": "geoand", "createdAt": "2020-04-01T13:19:39Z", "path": "docs/src/main/asciidoc/spring-boot-properties.adoc", "diffHunk": "@@ -0,0 +1,373 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Accessing application properties with Spring Boot properties API\n+\n+include::./attributes.adoc[]\n+:extension-status: preview\n+\n+If you prefer to use Spring Boot `@ConfigurationProperties` annotated class to access application properties instead of a\n+Quarkus native `@ConfigProperties` or a MicroProfile `@ConfigProperty` approach, you can do that with this extension.\n+\n+include::./status-include.adoc[]\n+\n+== Prerequisites\n+\n+To complete this guide, you need:\n+\n+* less than 15 minutes\n+* an IDE\n+* JDK 1.8+ installed with `JAVA_HOME` configured appropriately\n+* Apache Maven {maven-version}\n+\n+== Solution\n+\n+We recommend that you follow the instructions in the next sections and create the application step by step.\n+However, you can go right to the completed example.\n+\n+Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive].\n+\n+The solution is located in the `spring-boot-properties-quickstart` {quickstarts-tree-url}/spring-boot-properties-quickstart[directory].\n+\n+== Creating the Maven project\n+\n+First, we need a new project. Create a new project with the following command:\n+\n+[source,shell,subs=attributes+]\n+----\n+mvn io.quarkus:quarkus-maven-plugin:{quarkus-version}:create \\\n+    -DprojectGroupId=org.acme \\\n+    -DprojectArtifactId=spring-boot-properties-quickstart \\\n+    -DclassName=\"org.acme.spring.boot.properties.GreetingResource\" \\\n+    -Dpath=\"/greeting\" \\\n+    -Dextensions=\"spring-boot-properties\"\n+cd spring-boot-properties-quickstart\n+----\n+\n+This command generates a Maven project with a REST endpoint and imports the `spring-boot-properties` extension.\n+\n+== GreetingController\n+\n+The Quarkus Maven plugin automatically generated a `GreetingResource` JAX-RS resource in the\n+`src/main/java/org/acme/spring/boot/properties/GreetingResource.java` file that looks like:\n+\n+[source,java]\n+----\n+package org.acme.spring.boot.properties;\n+\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+\n+@Path(\"/hello\")\n+public class GreetingResource {\n+\n+    @GET\n+    @Produces(MediaType.TEXT_PLAIN)\n+    public String hello() {\n+        return \"hello\";\n+    }\n+}\n+----\n+\n+== Injecting properties\n+\n+Create a new class `src/main/java/org/acme/spring/boot/properties/GreetingProperties.java` with a message field:\n+\n+[source,java]\n+----\n+package org.acme.spring.boot.properties;\n+\n+import org.springframework.boot.context.properties.ConfigurationProperties;\n+\n+@ConfigurationProperties(\"greeting\")\n+public class GreetingProperties {\n+\n+    public String text;\n+}\n+----\n+\n+Here `text` field is public, but it could also be a private field with getter and setter or just a public getter in an interface.\n+Because `text` does not have a default value it is considered required and unless it is defined in a configuration file (`application.properties` by default)  your application will fail to start.\n+Define this property in your `src/main/resources/application.properties` file:\n+\n+[source,shell]\n+----\n+# Your configuration properties\n+greeting.text = hello\n+----\n+\n+Now modify `GreetingResource` to start using the `GreetingProperties`:\n+\n+[source,java]\n+----\n+package org.acme.spring.boot.properties;\n+\n+import javax.inject.Inject;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+\n+@Path(\"/greeting\")\n+public class GreetingResource {\n+\n+    @Inject\n+    GreetingProperties properties;\n+\n+    @GET\n+    @Produces(MediaType.TEXT_PLAIN)\n+    public String hello() {\n+        return properties.text;\n+    }\n+}\n+----\n+\n+Run the tests to verify that application still functions correctly.\n+\n+== Package and run the application\n+\n+Run the application with: `./mvnw compile quarkus:dev`.\n+Open your browser to http://localhost:8080/greeting.\n+\n+Changing the configuration file is immediately reflected.\n+\n+As usual, the application can be packaged using `./mvnw clean package` and executed using the `-runner.jar` file.\n+You can also generate the native executable with `./mvnw clean package -Pnative`.\n+\n+== Default values\n+\n+Now let's add a suffix for a greeting which we'll set to have a default value.\n+\n+\n+Properties with default values can be configured in a configuration file just like any other property.\n+However, the default value will be used if the property was not defined in a configuration file.\n+\n+Go ahead and add the new field to the `GreetingProperties` class:\n+\n+[source,java]\n+----\n+package org.acme.spring.boot.properties;\n+\n+import org.springframework.boot.context.properties.ConfigurationProperties;\n+\n+@ConfigurationProperties(\"greeting\")\n+public class GreetingProperties {\n+\n+    public String text;\n+\n+    public String suffix = \"!\";\n+}\n+----\n+\n+And update the `GreetingResource` and its test `GreetingResourceTest`:\n+\n+[source,java]\n+----\n+package org.acme.spring.boot.properties;\n+\n+import javax.inject.Inject;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+\n+@Path(\"/greeting\")\n+public class GreetingResource {\n+\n+    @Inject\n+    GreetingProperties properties;\n+\n+    @GET\n+    @Produces(MediaType.TEXT_PLAIN)\n+    public String hello() {\n+        return properties.text + properties.suffix;\n+    }\n+}\n+----\n+\n+[source,java]\n+----\n+package org.acme.spring.boot.properties;\n+\n+import io.quarkus.test.junit.QuarkusTest;\n+import org.junit.jupiter.api.Test;\n+\n+import static io.restassured.RestAssured.given;\n+import static org.hamcrest.CoreMatchers.is;\n+\n+@QuarkusTest\n+public class GreetingResourceTest {\n+\n+    @Test\n+    public void testHelloEndpoint() {\n+        given()\n+          .when().get(\"/greeting\")\n+          .then()\n+             .statusCode(200)\n+             .body(is(\"hello!\"));\n+    }\n+}\n+----\n+\n+Run the tests to verify the change.\n+\n+== Optional values\n+\n+Properties with optional values are the middle-ground between standard and properties with default values.\n+While a missing property in a configuration file will not cause your application to fail it will neither have a value set to it.\n+We use java `Optional` type to define such properties.", "originalCommit": "9be673bb59e56cf6065692ee79b9c28a920884c6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTYwOTg4Ng==", "url": "https://github.com/quarkusio/quarkus/pull/8330#discussion_r401609886", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Now let's add a suffix for a greeting which we'll set to have a default value.\n          \n          \n            \n            Now let's add a suffix for a greeting on which we'll set a default value.", "author": "geoand", "createdAt": "2020-04-01T13:22:00Z", "path": "docs/src/main/asciidoc/spring-boot-properties.adoc", "diffHunk": "@@ -0,0 +1,373 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Accessing application properties with Spring Boot properties API\n+\n+include::./attributes.adoc[]\n+:extension-status: preview\n+\n+If you prefer to use Spring Boot `@ConfigurationProperties` annotated class to access application properties instead of a\n+Quarkus native `@ConfigProperties` or a MicroProfile `@ConfigProperty` approach, you can do that with this extension.\n+\n+include::./status-include.adoc[]\n+\n+== Prerequisites\n+\n+To complete this guide, you need:\n+\n+* less than 15 minutes\n+* an IDE\n+* JDK 1.8+ installed with `JAVA_HOME` configured appropriately\n+* Apache Maven {maven-version}\n+\n+== Solution\n+\n+We recommend that you follow the instructions in the next sections and create the application step by step.\n+However, you can go right to the completed example.\n+\n+Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive].\n+\n+The solution is located in the `spring-boot-properties-quickstart` {quickstarts-tree-url}/spring-boot-properties-quickstart[directory].\n+\n+== Creating the Maven project\n+\n+First, we need a new project. Create a new project with the following command:\n+\n+[source,shell,subs=attributes+]\n+----\n+mvn io.quarkus:quarkus-maven-plugin:{quarkus-version}:create \\\n+    -DprojectGroupId=org.acme \\\n+    -DprojectArtifactId=spring-boot-properties-quickstart \\\n+    -DclassName=\"org.acme.spring.boot.properties.GreetingResource\" \\\n+    -Dpath=\"/greeting\" \\\n+    -Dextensions=\"spring-boot-properties\"\n+cd spring-boot-properties-quickstart\n+----\n+\n+This command generates a Maven project with a REST endpoint and imports the `spring-boot-properties` extension.\n+\n+== GreetingController\n+\n+The Quarkus Maven plugin automatically generated a `GreetingResource` JAX-RS resource in the\n+`src/main/java/org/acme/spring/boot/properties/GreetingResource.java` file that looks like:\n+\n+[source,java]\n+----\n+package org.acme.spring.boot.properties;\n+\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+\n+@Path(\"/hello\")\n+public class GreetingResource {\n+\n+    @GET\n+    @Produces(MediaType.TEXT_PLAIN)\n+    public String hello() {\n+        return \"hello\";\n+    }\n+}\n+----\n+\n+== Injecting properties\n+\n+Create a new class `src/main/java/org/acme/spring/boot/properties/GreetingProperties.java` with a message field:\n+\n+[source,java]\n+----\n+package org.acme.spring.boot.properties;\n+\n+import org.springframework.boot.context.properties.ConfigurationProperties;\n+\n+@ConfigurationProperties(\"greeting\")\n+public class GreetingProperties {\n+\n+    public String text;\n+}\n+----\n+\n+Here `text` field is public, but it could also be a private field with getter and setter or just a public getter in an interface.\n+Because `text` does not have a default value it is considered required and unless it is defined in a configuration file (`application.properties` by default)  your application will fail to start.\n+Define this property in your `src/main/resources/application.properties` file:\n+\n+[source,shell]\n+----\n+# Your configuration properties\n+greeting.text = hello\n+----\n+\n+Now modify `GreetingResource` to start using the `GreetingProperties`:\n+\n+[source,java]\n+----\n+package org.acme.spring.boot.properties;\n+\n+import javax.inject.Inject;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+\n+@Path(\"/greeting\")\n+public class GreetingResource {\n+\n+    @Inject\n+    GreetingProperties properties;\n+\n+    @GET\n+    @Produces(MediaType.TEXT_PLAIN)\n+    public String hello() {\n+        return properties.text;\n+    }\n+}\n+----\n+\n+Run the tests to verify that application still functions correctly.\n+\n+== Package and run the application\n+\n+Run the application with: `./mvnw compile quarkus:dev`.\n+Open your browser to http://localhost:8080/greeting.\n+\n+Changing the configuration file is immediately reflected.\n+\n+As usual, the application can be packaged using `./mvnw clean package` and executed using the `-runner.jar` file.\n+You can also generate the native executable with `./mvnw clean package -Pnative`.\n+\n+== Default values\n+\n+Now let's add a suffix for a greeting which we'll set to have a default value.", "originalCommit": "42135bef01515e47e0d96ca66e9ef95999cfd63c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTYxNTAyNw==", "url": "https://github.com/quarkusio/quarkus/pull/8330#discussion_r401615027", "bodyText": "Maybe \"for which\"?", "author": "gytis", "createdAt": "2020-04-01T13:29:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTYwOTg4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTYyMDk4MA==", "url": "https://github.com/quarkusio/quarkus/pull/8330#discussion_r401620980", "bodyText": "Sounds better yeah", "author": "geoand", "createdAt": "2020-04-01T13:37:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTYwOTg4Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTYxMDIyNg==", "url": "https://github.com/quarkusio/quarkus/pull/8330#discussion_r401610226", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            While `name` could be considered more of a runtime property (and maybe could be passes as an HTTP query parameter in the future), `text` and `suffix` are used to define a message template.\n          \n          \n            \n            While `name` could be considered more of a runtime property (and maybe could be passed as an HTTP query parameter in the future), `text` and `suffix` are used to define a message template.", "author": "geoand", "createdAt": "2020-04-01T13:22:30Z", "path": "docs/src/main/asciidoc/spring-boot-properties.adoc", "diffHunk": "@@ -0,0 +1,373 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Accessing application properties with Spring Boot properties API\n+\n+include::./attributes.adoc[]\n+:extension-status: preview\n+\n+If you prefer to use Spring Boot `@ConfigurationProperties` annotated class to access application properties instead of a\n+Quarkus native `@ConfigProperties` or a MicroProfile `@ConfigProperty` approach, you can do that with this extension.\n+\n+include::./status-include.adoc[]\n+\n+== Prerequisites\n+\n+To complete this guide, you need:\n+\n+* less than 15 minutes\n+* an IDE\n+* JDK 1.8+ installed with `JAVA_HOME` configured appropriately\n+* Apache Maven {maven-version}\n+\n+== Solution\n+\n+We recommend that you follow the instructions in the next sections and create the application step by step.\n+However, you can go right to the completed example.\n+\n+Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive].\n+\n+The solution is located in the `spring-boot-properties-quickstart` {quickstarts-tree-url}/spring-boot-properties-quickstart[directory].\n+\n+== Creating the Maven project\n+\n+First, we need a new project. Create a new project with the following command:\n+\n+[source,shell,subs=attributes+]\n+----\n+mvn io.quarkus:quarkus-maven-plugin:{quarkus-version}:create \\\n+    -DprojectGroupId=org.acme \\\n+    -DprojectArtifactId=spring-boot-properties-quickstart \\\n+    -DclassName=\"org.acme.spring.boot.properties.GreetingResource\" \\\n+    -Dpath=\"/greeting\" \\\n+    -Dextensions=\"spring-boot-properties\"\n+cd spring-boot-properties-quickstart\n+----\n+\n+This command generates a Maven project with a REST endpoint and imports the `spring-boot-properties` extension.\n+\n+== GreetingController\n+\n+The Quarkus Maven plugin automatically generated a `GreetingResource` JAX-RS resource in the\n+`src/main/java/org/acme/spring/boot/properties/GreetingResource.java` file that looks like:\n+\n+[source,java]\n+----\n+package org.acme.spring.boot.properties;\n+\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+\n+@Path(\"/hello\")\n+public class GreetingResource {\n+\n+    @GET\n+    @Produces(MediaType.TEXT_PLAIN)\n+    public String hello() {\n+        return \"hello\";\n+    }\n+}\n+----\n+\n+== Injecting properties\n+\n+Create a new class `src/main/java/org/acme/spring/boot/properties/GreetingProperties.java` with a message field:\n+\n+[source,java]\n+----\n+package org.acme.spring.boot.properties;\n+\n+import org.springframework.boot.context.properties.ConfigurationProperties;\n+\n+@ConfigurationProperties(\"greeting\")\n+public class GreetingProperties {\n+\n+    public String text;\n+}\n+----\n+\n+Here `text` field is public, but it could also be a private field with getter and setter or just a public getter in an interface.\n+Because `text` does not have a default value it is considered required and unless it is defined in a configuration file (`application.properties` by default)  your application will fail to start.\n+Define this property in your `src/main/resources/application.properties` file:\n+\n+[source,shell]\n+----\n+# Your configuration properties\n+greeting.text = hello\n+----\n+\n+Now modify `GreetingResource` to start using the `GreetingProperties`:\n+\n+[source,java]\n+----\n+package org.acme.spring.boot.properties;\n+\n+import javax.inject.Inject;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+\n+@Path(\"/greeting\")\n+public class GreetingResource {\n+\n+    @Inject\n+    GreetingProperties properties;\n+\n+    @GET\n+    @Produces(MediaType.TEXT_PLAIN)\n+    public String hello() {\n+        return properties.text;\n+    }\n+}\n+----\n+\n+Run the tests to verify that application still functions correctly.\n+\n+== Package and run the application\n+\n+Run the application with: `./mvnw compile quarkus:dev`.\n+Open your browser to http://localhost:8080/greeting.\n+\n+Changing the configuration file is immediately reflected.\n+\n+As usual, the application can be packaged using `./mvnw clean package` and executed using the `-runner.jar` file.\n+You can also generate the native executable with `./mvnw clean package -Pnative`.\n+\n+== Default values\n+\n+Now let's add a suffix for a greeting which we'll set to have a default value.\n+\n+\n+Properties with default values can be configured in a configuration file just like any other property.\n+However, the default value will be used if the property was not defined in a configuration file.\n+\n+Go ahead and add the new field to the `GreetingProperties` class:\n+\n+[source,java]\n+----\n+package org.acme.spring.boot.properties;\n+\n+import org.springframework.boot.context.properties.ConfigurationProperties;\n+\n+@ConfigurationProperties(\"greeting\")\n+public class GreetingProperties {\n+\n+    public String text;\n+\n+    public String suffix = \"!\";\n+}\n+----\n+\n+And update the `GreetingResource` and its test `GreetingResourceTest`:\n+\n+[source,java]\n+----\n+package org.acme.spring.boot.properties;\n+\n+import javax.inject.Inject;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+\n+@Path(\"/greeting\")\n+public class GreetingResource {\n+\n+    @Inject\n+    GreetingProperties properties;\n+\n+    @GET\n+    @Produces(MediaType.TEXT_PLAIN)\n+    public String hello() {\n+        return properties.text + properties.suffix;\n+    }\n+}\n+----\n+\n+[source,java]\n+----\n+package org.acme.spring.boot.properties;\n+\n+import io.quarkus.test.junit.QuarkusTest;\n+import org.junit.jupiter.api.Test;\n+\n+import static io.restassured.RestAssured.given;\n+import static org.hamcrest.CoreMatchers.is;\n+\n+@QuarkusTest\n+public class GreetingResourceTest {\n+\n+    @Test\n+    public void testHelloEndpoint() {\n+        given()\n+          .when().get(\"/greeting\")\n+          .then()\n+             .statusCode(200)\n+             .body(is(\"hello!\"));\n+    }\n+}\n+----\n+\n+Run the tests to verify the change.\n+\n+== Optional values\n+\n+Properties with optional values are the middle-ground between standard and properties with default values.\n+While a missing property in a configuration file will not cause your application to fail, it will nevertheless not have a value set.\n+We use `java.util.Optional` type to define such properties.\n+\n+Add an optional `name` property to the `GreetingProperties`:\n+\n+[source,java]\n+----\n+package org.acme.spring.boot.properties;\n+\n+import java.util.Optional;\n+\n+import org.springframework.boot.context.properties.ConfigurationProperties;\n+\n+@ConfigurationProperties(\"greeting\")\n+public class GreetingProperties {\n+\n+    public String text;\n+\n+    public String suffix = \"!\";\n+\n+    public Optional<String> name;\n+}\n+----\n+\n+And update the `GreetingResource` and its test `GreetingResourceTest`:\n+\n+[source,java]\n+----\n+package org.acme.spring.boot.properties;\n+\n+import javax.inject.Inject;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+\n+@Path(\"/greeting\")\n+public class GreetingResource {\n+\n+    @Inject\n+    GreetingProperties properties;\n+\n+    @GET\n+    @Produces(MediaType.TEXT_PLAIN)\n+    public String hello() {\n+        return properties.text + \", \" + properties.name.orElse(\"You\") + properties.suffix;\n+    }\n+}\n+----\n+\n+[source,java]\n+----\n+package org.acme.spring.boot.properties;\n+\n+import io.quarkus.test.junit.QuarkusTest;\n+import org.junit.jupiter.api.Test;\n+\n+import static io.restassured.RestAssured.given;\n+import static org.hamcrest.CoreMatchers.is;\n+\n+@QuarkusTest\n+public class GreetingResourceTest {\n+\n+    @Test\n+    public void testHelloEndpoint() {\n+        given()\n+          .when().get(\"/greeting\")\n+          .then()\n+             .statusCode(200)\n+             .body(is(\"hello, You!\"));\n+    }\n+}\n+----\n+\n+Run the tests to verify the change.\n+\n+== Grouping properties\n+\n+Now we have three properties in our `GreetingProperties` class.\n+While `name` could be considered more of a runtime property (and maybe could be passes as an HTTP query parameter in the future), `text` and `suffix` are used to define a message template.", "originalCommit": "42135bef01515e47e0d96ca66e9ef95999cfd63c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTYxMDY4Ng==", "url": "https://github.com/quarkusio/quarkus/pull/8330#discussion_r401610686", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Because of an extra layer, our property names have changed.\n          \n          \n            \n            Because of the additional class, our property names have changed.", "author": "geoand", "createdAt": "2020-04-01T13:23:06Z", "path": "docs/src/main/asciidoc/spring-boot-properties.adoc", "diffHunk": "@@ -0,0 +1,373 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Accessing application properties with Spring Boot properties API\n+\n+include::./attributes.adoc[]\n+:extension-status: preview\n+\n+If you prefer to use Spring Boot `@ConfigurationProperties` annotated class to access application properties instead of a\n+Quarkus native `@ConfigProperties` or a MicroProfile `@ConfigProperty` approach, you can do that with this extension.\n+\n+include::./status-include.adoc[]\n+\n+== Prerequisites\n+\n+To complete this guide, you need:\n+\n+* less than 15 minutes\n+* an IDE\n+* JDK 1.8+ installed with `JAVA_HOME` configured appropriately\n+* Apache Maven {maven-version}\n+\n+== Solution\n+\n+We recommend that you follow the instructions in the next sections and create the application step by step.\n+However, you can go right to the completed example.\n+\n+Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive].\n+\n+The solution is located in the `spring-boot-properties-quickstart` {quickstarts-tree-url}/spring-boot-properties-quickstart[directory].\n+\n+== Creating the Maven project\n+\n+First, we need a new project. Create a new project with the following command:\n+\n+[source,shell,subs=attributes+]\n+----\n+mvn io.quarkus:quarkus-maven-plugin:{quarkus-version}:create \\\n+    -DprojectGroupId=org.acme \\\n+    -DprojectArtifactId=spring-boot-properties-quickstart \\\n+    -DclassName=\"org.acme.spring.boot.properties.GreetingResource\" \\\n+    -Dpath=\"/greeting\" \\\n+    -Dextensions=\"spring-boot-properties\"\n+cd spring-boot-properties-quickstart\n+----\n+\n+This command generates a Maven project with a REST endpoint and imports the `spring-boot-properties` extension.\n+\n+== GreetingController\n+\n+The Quarkus Maven plugin automatically generated a `GreetingResource` JAX-RS resource in the\n+`src/main/java/org/acme/spring/boot/properties/GreetingResource.java` file that looks like:\n+\n+[source,java]\n+----\n+package org.acme.spring.boot.properties;\n+\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+\n+@Path(\"/hello\")\n+public class GreetingResource {\n+\n+    @GET\n+    @Produces(MediaType.TEXT_PLAIN)\n+    public String hello() {\n+        return \"hello\";\n+    }\n+}\n+----\n+\n+== Injecting properties\n+\n+Create a new class `src/main/java/org/acme/spring/boot/properties/GreetingProperties.java` with a message field:\n+\n+[source,java]\n+----\n+package org.acme.spring.boot.properties;\n+\n+import org.springframework.boot.context.properties.ConfigurationProperties;\n+\n+@ConfigurationProperties(\"greeting\")\n+public class GreetingProperties {\n+\n+    public String text;\n+}\n+----\n+\n+Here `text` field is public, but it could also be a private field with getter and setter or just a public getter in an interface.\n+Because `text` does not have a default value it is considered required and unless it is defined in a configuration file (`application.properties` by default)  your application will fail to start.\n+Define this property in your `src/main/resources/application.properties` file:\n+\n+[source,shell]\n+----\n+# Your configuration properties\n+greeting.text = hello\n+----\n+\n+Now modify `GreetingResource` to start using the `GreetingProperties`:\n+\n+[source,java]\n+----\n+package org.acme.spring.boot.properties;\n+\n+import javax.inject.Inject;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+\n+@Path(\"/greeting\")\n+public class GreetingResource {\n+\n+    @Inject\n+    GreetingProperties properties;\n+\n+    @GET\n+    @Produces(MediaType.TEXT_PLAIN)\n+    public String hello() {\n+        return properties.text;\n+    }\n+}\n+----\n+\n+Run the tests to verify that application still functions correctly.\n+\n+== Package and run the application\n+\n+Run the application with: `./mvnw compile quarkus:dev`.\n+Open your browser to http://localhost:8080/greeting.\n+\n+Changing the configuration file is immediately reflected.\n+\n+As usual, the application can be packaged using `./mvnw clean package` and executed using the `-runner.jar` file.\n+You can also generate the native executable with `./mvnw clean package -Pnative`.\n+\n+== Default values\n+\n+Now let's add a suffix for a greeting which we'll set to have a default value.\n+\n+\n+Properties with default values can be configured in a configuration file just like any other property.\n+However, the default value will be used if the property was not defined in a configuration file.\n+\n+Go ahead and add the new field to the `GreetingProperties` class:\n+\n+[source,java]\n+----\n+package org.acme.spring.boot.properties;\n+\n+import org.springframework.boot.context.properties.ConfigurationProperties;\n+\n+@ConfigurationProperties(\"greeting\")\n+public class GreetingProperties {\n+\n+    public String text;\n+\n+    public String suffix = \"!\";\n+}\n+----\n+\n+And update the `GreetingResource` and its test `GreetingResourceTest`:\n+\n+[source,java]\n+----\n+package org.acme.spring.boot.properties;\n+\n+import javax.inject.Inject;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+\n+@Path(\"/greeting\")\n+public class GreetingResource {\n+\n+    @Inject\n+    GreetingProperties properties;\n+\n+    @GET\n+    @Produces(MediaType.TEXT_PLAIN)\n+    public String hello() {\n+        return properties.text + properties.suffix;\n+    }\n+}\n+----\n+\n+[source,java]\n+----\n+package org.acme.spring.boot.properties;\n+\n+import io.quarkus.test.junit.QuarkusTest;\n+import org.junit.jupiter.api.Test;\n+\n+import static io.restassured.RestAssured.given;\n+import static org.hamcrest.CoreMatchers.is;\n+\n+@QuarkusTest\n+public class GreetingResourceTest {\n+\n+    @Test\n+    public void testHelloEndpoint() {\n+        given()\n+          .when().get(\"/greeting\")\n+          .then()\n+             .statusCode(200)\n+             .body(is(\"hello!\"));\n+    }\n+}\n+----\n+\n+Run the tests to verify the change.\n+\n+== Optional values\n+\n+Properties with optional values are the middle-ground between standard and properties with default values.\n+While a missing property in a configuration file will not cause your application to fail, it will nevertheless not have a value set.\n+We use `java.util.Optional` type to define such properties.\n+\n+Add an optional `name` property to the `GreetingProperties`:\n+\n+[source,java]\n+----\n+package org.acme.spring.boot.properties;\n+\n+import java.util.Optional;\n+\n+import org.springframework.boot.context.properties.ConfigurationProperties;\n+\n+@ConfigurationProperties(\"greeting\")\n+public class GreetingProperties {\n+\n+    public String text;\n+\n+    public String suffix = \"!\";\n+\n+    public Optional<String> name;\n+}\n+----\n+\n+And update the `GreetingResource` and its test `GreetingResourceTest`:\n+\n+[source,java]\n+----\n+package org.acme.spring.boot.properties;\n+\n+import javax.inject.Inject;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+\n+@Path(\"/greeting\")\n+public class GreetingResource {\n+\n+    @Inject\n+    GreetingProperties properties;\n+\n+    @GET\n+    @Produces(MediaType.TEXT_PLAIN)\n+    public String hello() {\n+        return properties.text + \", \" + properties.name.orElse(\"You\") + properties.suffix;\n+    }\n+}\n+----\n+\n+[source,java]\n+----\n+package org.acme.spring.boot.properties;\n+\n+import io.quarkus.test.junit.QuarkusTest;\n+import org.junit.jupiter.api.Test;\n+\n+import static io.restassured.RestAssured.given;\n+import static org.hamcrest.CoreMatchers.is;\n+\n+@QuarkusTest\n+public class GreetingResourceTest {\n+\n+    @Test\n+    public void testHelloEndpoint() {\n+        given()\n+          .when().get(\"/greeting\")\n+          .then()\n+             .statusCode(200)\n+             .body(is(\"hello, You!\"));\n+    }\n+}\n+----\n+\n+Run the tests to verify the change.\n+\n+== Grouping properties\n+\n+Now we have three properties in our `GreetingProperties` class.\n+While `name` could be considered more of a runtime property (and maybe could be passes as an HTTP query parameter in the future), `text` and `suffix` are used to define a message template.\n+Let's group these two properties in a separate inner class:\n+\n+[source,java]\n+----\n+package org.acme.spring.boot.properties;\n+\n+import java.util.Optional;\n+\n+import org.springframework.boot.context.properties.ConfigurationProperties;\n+\n+@ConfigurationProperties(\"greeting\")\n+public class GreetingProperties {\n+\n+    public Message message;\n+\n+    public Optional<String> name;\n+\n+    public static class Message {\n+\n+        public String text;\n+\n+        public String suffix = \"!\";\n+    }\n+}\n+----\n+\n+Here `Message` properties class is defined as an inner class, but it could also be a top level class.\n+\n+Having such property groups brings more structure to your configuration.\n+This is especially useful when then number of properties grows.\n+\n+Because of an extra layer, our property names have changed.", "originalCommit": "42135bef01515e47e0d96ca66e9ef95999cfd63c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "949612367ed37a20b1606619e38a5ac9eabad6db", "url": "https://github.com/quarkusio/quarkus/commit/949612367ed37a20b1606619e38a5ac9eabad6db", "message": "Spring Boot properties extension guide #8186", "committedDate": "2020-04-01T15:58:44Z", "type": "forcePushed"}, {"oid": "ffdf51279a903212b945eb8d0418f0728f904aca", "url": "https://github.com/quarkusio/quarkus/commit/ffdf51279a903212b945eb8d0418f0728f904aca", "message": "Spring Boot properties extension guide #8186", "committedDate": "2020-04-01T15:59:28Z", "type": "commit"}, {"oid": "ffdf51279a903212b945eb8d0418f0728f904aca", "url": "https://github.com/quarkusio/quarkus/commit/ffdf51279a903212b945eb8d0418f0728f904aca", "message": "Spring Boot properties extension guide #8186", "committedDate": "2020-04-01T15:59:28Z", "type": "forcePushed"}]}