{"pr_number": 10329, "pr_title": "Add documentation on how to use Wiremock in Quarkus tests", "pr_createdAt": "2020-06-29T05:26:50Z", "pr_url": "https://github.com/quarkusio/quarkus/pull/10329", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkzNTE2NQ==", "url": "https://github.com/quarkusio/quarkus/pull/10329#discussion_r446935165", "bodyText": "I would use https://search.maven.org/artifact/com.github.tomakehurst/wiremock-jre8 instead.", "author": "gsmet", "createdAt": "2020-06-29T12:34:05Z", "path": "docs/src/main/asciidoc/rest-client.adoc", "diffHunk": "@@ -432,6 +432,113 @@ You should see a JSON object containing some basic information about Greece.\n As usual, the application can be packaged using `./mvnw clean package` and executed using the `-runner.jar` file.\n You can also generate the native executable with `./mvnw clean package -Pnative`.\n \n+== Using a Mock HTTP Server for tests\n+\n+Setting up a mock HTTP server, against which tests are run, is a common testing pattern.\n+Examples of such servers are link:http://wiremock.org/[Wiremock] and link:https://docs.hoverfly.io/projects/hoverfly-java/en/latest/index.html[Hoverfly].\n+In this section we'll demonstrate how Wiremock can be leveraged for testing the `CountriesService` which was developed above.\n+\n+First of all, Wiremock needs to be added as a test dependency. For a Maven project that would happen like so:\n+\n+[source,xml]\n+----\n+<dependency>\n+    <groupId>com.github.tomakehurst</groupId>\n+    <artifactId>wiremock-jre8</artifactId>\n+    <scope>test</scope>\n+    <version>${wiremock.version}</version> <1>\n+</dependency>\n+----\n+\n+<1> Use a proper Wiremock version. All available versions can be found link:https://mvnrepository.com/artifact/com.github.tomakehurst/wiremock-jre8[here].", "originalCommit": "39c60ea6de7694a771540ecac662a5a4358ccadb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkzNTQ0OQ==", "url": "https://github.com/quarkusio/quarkus/pull/10329#discussion_r446935449", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            For more details about `@QuarkusTestResource` refer to  link:getting-started-testing#quarkus-test-resource[this] part of the documentation.\n          \n          \n            \n            For more details about `@QuarkusTestResource` refer to  link:getting-started-testing#quarkus-test-resource[this part of the documentation].\n          \n      \n    \n    \n  \n\nbetter have a full link", "author": "gsmet", "createdAt": "2020-06-29T12:34:36Z", "path": "docs/src/main/asciidoc/rest-client.adoc", "diffHunk": "@@ -432,6 +432,113 @@ You should see a JSON object containing some basic information about Greece.\n As usual, the application can be packaged using `./mvnw clean package` and executed using the `-runner.jar` file.\n You can also generate the native executable with `./mvnw clean package -Pnative`.\n \n+== Using a Mock HTTP Server for tests\n+\n+Setting up a mock HTTP server, against which tests are run, is a common testing pattern.\n+Examples of such servers are link:http://wiremock.org/[Wiremock] and link:https://docs.hoverfly.io/projects/hoverfly-java/en/latest/index.html[Hoverfly].\n+In this section we'll demonstrate how Wiremock can be leveraged for testing the `CountriesService` which was developed above.\n+\n+First of all, Wiremock needs to be added as a test dependency. For a Maven project that would happen like so:\n+\n+[source,xml]\n+----\n+<dependency>\n+    <groupId>com.github.tomakehurst</groupId>\n+    <artifactId>wiremock-jre8</artifactId>\n+    <scope>test</scope>\n+    <version>${wiremock.version}</version> <1>\n+</dependency>\n+----\n+\n+<1> Use a proper Wiremock version. All available versions can be found link:https://mvnrepository.com/artifact/com.github.tomakehurst/wiremock-jre8[here].\n+\n+In Quarkus tests when some service needs to be started before the Quarkus tests are ran, we utilize the `@io.quarkus.test.common.QuarkusTestResource`\n+annotation to specify a `io.quarkus.test.common.QuarkusTestResourceLifecycleManager` which can start the service and supply configuration\n+values that Quarkus will use.\n+\n+[NOTE]\n+====\n+For more details about `@QuarkusTestResource` refer to  link:getting-started-testing#quarkus-test-resource[this] part of the documentation.", "originalCommit": "39c60ea6de7694a771540ecac662a5a4358ccadb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkzNjIyMA==", "url": "https://github.com/quarkusio/quarkus/pull/10329#discussion_r446936220", "bodyText": "I think that is a bad idea.", "author": "gsmet", "createdAt": "2020-06-29T12:35:42Z", "path": "docs/src/main/asciidoc/rest-client.adoc", "diffHunk": "@@ -432,6 +432,113 @@ You should see a JSON object containing some basic information about Greece.\n As usual, the application can be packaged using `./mvnw clean package` and executed using the `-runner.jar` file.\n You can also generate the native executable with `./mvnw clean package -Pnative`.\n \n+== Using a Mock HTTP Server for tests\n+\n+Setting up a mock HTTP server, against which tests are run, is a common testing pattern.\n+Examples of such servers are link:http://wiremock.org/[Wiremock] and link:https://docs.hoverfly.io/projects/hoverfly-java/en/latest/index.html[Hoverfly].\n+In this section we'll demonstrate how Wiremock can be leveraged for testing the `CountriesService` which was developed above.\n+\n+First of all, Wiremock needs to be added as a test dependency. For a Maven project that would happen like so:\n+\n+[source,xml]\n+----\n+<dependency>\n+    <groupId>com.github.tomakehurst</groupId>\n+    <artifactId>wiremock-jre8</artifactId>\n+    <scope>test</scope>\n+    <version>${wiremock.version}</version> <1>\n+</dependency>\n+----\n+\n+<1> Use a proper Wiremock version. All available versions can be found link:https://mvnrepository.com/artifact/com.github.tomakehurst/wiremock-jre8[here].\n+\n+In Quarkus tests when some service needs to be started before the Quarkus tests are ran, we utilize the `@io.quarkus.test.common.QuarkusTestResource`\n+annotation to specify a `io.quarkus.test.common.QuarkusTestResourceLifecycleManager` which can start the service and supply configuration\n+values that Quarkus will use.\n+\n+[NOTE]\n+====\n+For more details about `@QuarkusTestResource` refer to  link:getting-started-testing#quarkus-test-resource[this] part of the documentation.\n+====\n+\n+Let's create an implementation of `QuarkusTestResourceLifecycleManager` called `WiremockCountries` like so:\n+\n+[source,java]\n+----\n+package org.acme.rest.client;\n+\n+import java.util.Collections;\n+import java.util.Map;\n+\n+import com.github.tomakehurst.wiremock.WireMockServer;\n+import io.quarkus.test.common.QuarkusTestResourceLifecycleManager;\n+\n+import static com.github.tomakehurst.wiremock.client.WireMock.*; // <1>\n+\n+public class WiremockCountries implements QuarkusTestResourceLifecycleManager {  // <2>\n+\n+\tprivate WireMockServer wireMockServer;\n+\n+\t@Override\n+\tpublic Map<String, String> start() {\n+\t\twireMockServer = new WireMockServer();\n+\t\twireMockServer.start(); // <3>\n+\n+\t\tstubFor(get(urlEqualTo(\"/v2/name/GR\"))   // <4>\n+\t\t\t\t.willReturn(aResponse()\n+\t\t\t\t\t\t.withHeader(\"Content-Type\", \"application/json\")\n+\t\t\t\t\t\t.withBody( // <5>\n+\t\t\t\t\t\t\"\"\"\n+\t\t\t\t\t\t[\n+\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\t\"name\": \"\u0395\u03bb\u03bb\u03ac\u03b4\u03b1\",\n+\t\t\t\t\t\t\t\t\"capital\": \"\u0391\u03b8\u03ae\u03bd\u03b1\"\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t]\n+\t\t\t\t\t\t\"\"\"\n+\t\t\t\t\t\t)));\n+\n+\t\tstubFor(get(urlMatching(\".*\")).atPriority(10).willReturn(aResponse().proxiedFrom(\"https://restcountries.eu/rest\")));   // <6>\n+\n+\t\treturn Collections.singletonMap(\"org.acme.getting.started.country.CountriesService/mp-rest/url\", wireMockServer.baseUrl()); // <7>\n+\t}\n+\n+\t@Override\n+\tpublic void stop() {\n+\t\tif (null != wireMockServer) {\n+\t\t\twireMockServer.stop();  // <8>\n+\t\t}\n+\t}\n+}\n+----\n+\n+<1> Statically importing the methods in the Wiremock package makes it easier to read the test.\n+<2> The `start` method is invoked by Quarkus before any test is run and returns a `Map` of configuration properties that apply during the test execution.\n+<3> Launch Wiremock.\n+<4> Configure Wiremock to stub the calls to `/v2/name/GR` by returning a specific canned response.\n+<5> This examples uses Text Blocks from Java 14 because it makes the code a lot easier to read.", "originalCommit": "39c60ea6de7694a771540ecac662a5a4358ccadb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkzNzg0MQ==", "url": "https://github.com/quarkusio/quarkus/pull/10329#discussion_r446937841", "bodyText": "You prefer having crappy json in the document?", "author": "geoand", "createdAt": "2020-06-29T12:38:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkzNjIyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk2Nzc2Mg==", "url": "https://github.com/quarkusio/quarkus/pull/10329#discussion_r446967762", "bodyText": "Considering it's very short and simple, I would yes. At least as long as we target older versions of Java.", "author": "gsmet", "createdAt": "2020-06-29T13:24:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkzNjIyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk3MTAxMg==", "url": "https://github.com/quarkusio/quarkus/pull/10329#discussion_r446971012", "bodyText": "OK, fixed", "author": "geoand", "createdAt": "2020-06-29T13:28:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkzNjIyMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkzNjcwMQ==", "url": "https://github.com/quarkusio/quarkus/pull/10329#discussion_r446936701", "bodyText": "I wonder how well this will scale given you will probably want different mock implementations for different tests.\nWorks well for one test, but when you have several of them?", "author": "gsmet", "createdAt": "2020-06-29T12:36:33Z", "path": "docs/src/main/asciidoc/rest-client.adoc", "diffHunk": "@@ -432,6 +432,113 @@ You should see a JSON object containing some basic information about Greece.\n As usual, the application can be packaged using `./mvnw clean package` and executed using the `-runner.jar` file.\n You can also generate the native executable with `./mvnw clean package -Pnative`.\n \n+== Using a Mock HTTP Server for tests\n+\n+Setting up a mock HTTP server, against which tests are run, is a common testing pattern.\n+Examples of such servers are link:http://wiremock.org/[Wiremock] and link:https://docs.hoverfly.io/projects/hoverfly-java/en/latest/index.html[Hoverfly].\n+In this section we'll demonstrate how Wiremock can be leveraged for testing the `CountriesService` which was developed above.\n+\n+First of all, Wiremock needs to be added as a test dependency. For a Maven project that would happen like so:\n+\n+[source,xml]\n+----\n+<dependency>\n+    <groupId>com.github.tomakehurst</groupId>\n+    <artifactId>wiremock-jre8</artifactId>\n+    <scope>test</scope>\n+    <version>${wiremock.version}</version> <1>\n+</dependency>\n+----\n+\n+<1> Use a proper Wiremock version. All available versions can be found link:https://mvnrepository.com/artifact/com.github.tomakehurst/wiremock-jre8[here].\n+\n+In Quarkus tests when some service needs to be started before the Quarkus tests are ran, we utilize the `@io.quarkus.test.common.QuarkusTestResource`\n+annotation to specify a `io.quarkus.test.common.QuarkusTestResourceLifecycleManager` which can start the service and supply configuration\n+values that Quarkus will use.\n+\n+[NOTE]\n+====\n+For more details about `@QuarkusTestResource` refer to  link:getting-started-testing#quarkus-test-resource[this] part of the documentation.\n+====\n+\n+Let's create an implementation of `QuarkusTestResourceLifecycleManager` called `WiremockCountries` like so:\n+\n+[source,java]\n+----\n+package org.acme.rest.client;\n+\n+import java.util.Collections;\n+import java.util.Map;\n+\n+import com.github.tomakehurst.wiremock.WireMockServer;\n+import io.quarkus.test.common.QuarkusTestResourceLifecycleManager;\n+\n+import static com.github.tomakehurst.wiremock.client.WireMock.*; // <1>\n+\n+public class WiremockCountries implements QuarkusTestResourceLifecycleManager {  // <2>\n+\n+\tprivate WireMockServer wireMockServer;\n+\n+\t@Override\n+\tpublic Map<String, String> start() {\n+\t\twireMockServer = new WireMockServer();\n+\t\twireMockServer.start(); // <3>\n+\n+\t\tstubFor(get(urlEqualTo(\"/v2/name/GR\"))   // <4>\n+\t\t\t\t.willReturn(aResponse()\n+\t\t\t\t\t\t.withHeader(\"Content-Type\", \"application/json\")\n+\t\t\t\t\t\t.withBody( // <5>\n+\t\t\t\t\t\t\"\"\"\n+\t\t\t\t\t\t[\n+\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\t\"name\": \"\u0395\u03bb\u03bb\u03ac\u03b4\u03b1\",\n+\t\t\t\t\t\t\t\t\"capital\": \"\u0391\u03b8\u03ae\u03bd\u03b1\"\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t]\n+\t\t\t\t\t\t\"\"\"\n+\t\t\t\t\t\t)));\n+\n+\t\tstubFor(get(urlMatching(\".*\")).atPriority(10).willReturn(aResponse().proxiedFrom(\"https://restcountries.eu/rest\")));   // <6>\n+\n+\t\treturn Collections.singletonMap(\"org.acme.getting.started.country.CountriesService/mp-rest/url\", wireMockServer.baseUrl()); // <7>\n+\t}\n+\n+\t@Override\n+\tpublic void stop() {\n+\t\tif (null != wireMockServer) {\n+\t\t\twireMockServer.stop();  // <8>\n+\t\t}\n+\t}\n+}\n+----\n+\n+<1> Statically importing the methods in the Wiremock package makes it easier to read the test.\n+<2> The `start` method is invoked by Quarkus before any test is run and returns a `Map` of configuration properties that apply during the test execution.\n+<3> Launch Wiremock.\n+<4> Configure Wiremock to stub the calls to `/v2/name/GR` by returning a specific canned response.\n+<5> This examples uses Text Blocks from Java 14 because it makes the code a lot easier to read.\n+<6> All HTTP calls that have not been stubbed are handled by calling the real service. This is done for demonstration purposes, as it is not something that would usually happen in a real test.\n+<7> As the `start` method returns configuration that applies for tests, we set the rest-client property that controls the base URL which is used by the implementation\n+of `CountriesService` to the base URL where Wiremock is listening for incoming requests.\n+<8> When all tests have finished, shutdown Wiremock.\n+\n+\n+The `CountriesResourceTest` test class needs to be annotated like so:\n+\n+[source,java]\n+----\n+@QuarkusTest\n+@QuarkusTestResource(WiremockCountries.class)\n+public class CountriesResourceTest {\n+\n+}\n+----\n+\n+[WARNING]\n+====\n+`@QuarkusTestResource` applies to all tests, not just `CountriesResourceTest`.", "originalCommit": "39c60ea6de7694a771540ecac662a5a4358ccadb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkzNzYxMA==", "url": "https://github.com/quarkusio/quarkus/pull/10329#discussion_r446937610", "bodyText": "We don't yet have the capability to add different @QuarkusTestResource to different tests, but we will very soon.", "author": "geoand", "createdAt": "2020-06-29T12:38:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkzNjcwMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk2ODE2NQ==", "url": "https://github.com/quarkusio/quarkus/pull/10329#discussion_r446968165", "bodyText": "OK, that's important information :).\nIf we do, then I concur it makes sense to document it.", "author": "gsmet", "createdAt": "2020-06-29T13:24:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkzNjcwMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk3MTY0OA==", "url": "https://github.com/quarkusio/quarkus/pull/10329#discussion_r446971648", "bodyText": "Yeah, it's just a matter of me or Stuart looking at it. It should be easy, I just haven't got around to doing it", "author": "geoand", "createdAt": "2020-06-29T13:29:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkzNjcwMQ=="}], "type": "inlineReview"}, {"oid": "35be58187fd0007147899d2e4271e02298b2d97a", "url": "https://github.com/quarkusio/quarkus/commit/35be58187fd0007147899d2e4271e02298b2d97a", "message": "Add documentation on how to use Wiremock in Quarkus tests\n\nCo-authored-by: Guillaume Smet <guillaume.smet@gmail.com>", "committedDate": "2020-06-29T13:18:39Z", "type": "forcePushed"}, {"oid": "db21557225bab192c865212d7775c92175727769", "url": "https://github.com/quarkusio/quarkus/commit/db21557225bab192c865212d7775c92175727769", "message": "Add documentation on how to use Wiremock in Quarkus tests\n\nCo-authored-by: Guillaume Smet <guillaume.smet@gmail.com>", "committedDate": "2020-06-29T13:28:03Z", "type": "commit"}, {"oid": "db21557225bab192c865212d7775c92175727769", "url": "https://github.com/quarkusio/quarkus/commit/db21557225bab192c865212d7775c92175727769", "message": "Add documentation on how to use Wiremock in Quarkus tests\n\nCo-authored-by: Guillaume Smet <guillaume.smet@gmail.com>", "committedDate": "2020-06-29T13:28:03Z", "type": "forcePushed"}]}