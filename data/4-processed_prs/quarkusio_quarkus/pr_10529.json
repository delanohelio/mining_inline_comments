{"pr_number": 10529, "pr_title": "Docs - add \"Introduction to CDI\"", "pr_createdAt": "2020-07-07T13:16:02Z", "pr_url": "https://github.com/quarkusio/quarkus/pull/10529", "timeline": [{"oid": "63d155041a5447adba997da8577b662969847b05", "url": "https://github.com/quarkusio/quarkus/commit/63d155041a5447adba997da8577b662969847b05", "message": "Docs - add Introduction to CDI", "committedDate": "2020-07-07T13:17:00Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDg5NzQwMA==", "url": "https://github.com/quarkusio/quarkus/pull/10529#discussion_r450897400", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            == _Q: Wait a minute. What does it mean container-managed?_\n          \n          \n            \n            == _Q: Wait a minute. What does \"container-managed\" mean?_", "author": "geoand", "createdAt": "2020-07-07T14:14:52Z", "path": "docs/src/main/asciidoc/cdi.adoc", "diffHunk": "@@ -0,0 +1,361 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Introduction to Contexts and Dependency Injection\n+\n+include::./attributes.adoc[]\n+:numbered:\n+:sectnums:\n+:sectnumlevels: 4\n+:toc:\n+\n+In this guide we're going to describe the basic principles of the programming model used all over the Quarkus universe. \n+Quarkus programming model is based on the http://docs.jboss.org/cdi/spec/2.0/cdi-spec.html[Contexts and Dependency Injection for Java 2.0, window=\"_blank\"] specification.\n+However, a full CDI implementation is not used under the hood.\n+Quarkus only implements a subset of the CDI features - see also <<cdi-reference.adoc#supported_features,the list of supported features>> and <<cdi-reference.adoc#limitations,the list of limitations>>.\n+On the other hand, there are quite a few <<cdi-reference#nonstandard_features,non-standard features>> and <<cdi-reference.adoc#build_time_apis,Quarkus-specific APIs>>.\n+We believe that our efforts will drive the innovation of the CDI specification towards the build-time oriented developer stacks in the future.\n+\n+== _Q: OK. Let's start simple. What is a bean?_\n+\n+A: Well, a bean is a _container-managed_ object that supports a set of basic services, such as injection of dependencies, lifecycle callbacks and interceptors.\n+\n+== _Q: Wait a minute. What does it mean container-managed?_", "originalCommit": "63d155041a5447adba997da8577b662969847b05", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDg5NzY2OA==", "url": "https://github.com/quarkusio/quarkus/pull/10529#discussion_r450897668", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Instead, you can affect the lifecycle through the declarative means, such as annotations, configuration, etc.\n          \n          \n            \n            Instead, you can affect the lifecycle through declarative means, such as annotations, configuration, etc.", "author": "geoand", "createdAt": "2020-07-07T14:15:11Z", "path": "docs/src/main/asciidoc/cdi.adoc", "diffHunk": "@@ -0,0 +1,361 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Introduction to Contexts and Dependency Injection\n+\n+include::./attributes.adoc[]\n+:numbered:\n+:sectnums:\n+:sectnumlevels: 4\n+:toc:\n+\n+In this guide we're going to describe the basic principles of the programming model used all over the Quarkus universe. \n+Quarkus programming model is based on the http://docs.jboss.org/cdi/spec/2.0/cdi-spec.html[Contexts and Dependency Injection for Java 2.0, window=\"_blank\"] specification.\n+However, a full CDI implementation is not used under the hood.\n+Quarkus only implements a subset of the CDI features - see also <<cdi-reference.adoc#supported_features,the list of supported features>> and <<cdi-reference.adoc#limitations,the list of limitations>>.\n+On the other hand, there are quite a few <<cdi-reference#nonstandard_features,non-standard features>> and <<cdi-reference.adoc#build_time_apis,Quarkus-specific APIs>>.\n+We believe that our efforts will drive the innovation of the CDI specification towards the build-time oriented developer stacks in the future.\n+\n+== _Q: OK. Let's start simple. What is a bean?_\n+\n+A: Well, a bean is a _container-managed_ object that supports a set of basic services, such as injection of dependencies, lifecycle callbacks and interceptors.\n+\n+== _Q: Wait a minute. What does it mean container-managed?_\n+\n+A: Simply put, you don't control the lifecycle of the object instance directly.\n+Instead, you can affect the lifecycle through the declarative means, such as annotations, configuration, etc.", "originalCommit": "63d155041a5447adba997da8577b662969847b05", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDkwMjI2NQ==", "url": "https://github.com/quarkusio/quarkus/pull/10529#discussion_r450902265", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            A: An application developer can focus on the business logic rather than \"where and how\" to obtain a fully initialized component with all of its dependencies.\n          \n          \n            \n            A: An application developer can focus on the business logic rather than \"where and how\" of obtaining a fully initialized component with all of its dependencies.", "author": "geoand", "createdAt": "2020-07-07T14:21:11Z", "path": "docs/src/main/asciidoc/cdi.adoc", "diffHunk": "@@ -0,0 +1,361 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Introduction to Contexts and Dependency Injection\n+\n+include::./attributes.adoc[]\n+:numbered:\n+:sectnums:\n+:sectnumlevels: 4\n+:toc:\n+\n+In this guide we're going to describe the basic principles of the programming model used all over the Quarkus universe. \n+Quarkus programming model is based on the http://docs.jboss.org/cdi/spec/2.0/cdi-spec.html[Contexts and Dependency Injection for Java 2.0, window=\"_blank\"] specification.\n+However, a full CDI implementation is not used under the hood.\n+Quarkus only implements a subset of the CDI features - see also <<cdi-reference.adoc#supported_features,the list of supported features>> and <<cdi-reference.adoc#limitations,the list of limitations>>.\n+On the other hand, there are quite a few <<cdi-reference#nonstandard_features,non-standard features>> and <<cdi-reference.adoc#build_time_apis,Quarkus-specific APIs>>.\n+We believe that our efforts will drive the innovation of the CDI specification towards the build-time oriented developer stacks in the future.\n+\n+== _Q: OK. Let's start simple. What is a bean?_\n+\n+A: Well, a bean is a _container-managed_ object that supports a set of basic services, such as injection of dependencies, lifecycle callbacks and interceptors.\n+\n+== _Q: Wait a minute. What does it mean container-managed?_\n+\n+A: Simply put, you don't control the lifecycle of the object instance directly.\n+Instead, you can affect the lifecycle through the declarative means, such as annotations, configuration, etc.\n+The container is the _environment_ where your application runs.\n+It creates and destroys the instances of beans, associates the instances with a designated context, and injects them into other beans.\n+\n+== _Q: What is it good for?_\n+\n+A: An application developer can focus on the business logic rather than \"where and how\" to obtain a fully initialized component with all of its dependencies.", "originalCommit": "63d155041a5447adba997da8577b662969847b05", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQwNTAxNQ==", "url": "https://github.com/quarkusio/quarkus/pull/10529#discussion_r451405015", "bodyText": "Hm, that does not sound good to me. What about \"An application developer can focus on the business logic rather than finding out \"where and how\" to obtain a fully initialized component with all of its dependencies.\"?", "author": "mkouba", "createdAt": "2020-07-08T09:22:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDkwMjI2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQwNjU4Mw==", "url": "https://github.com/quarkusio/quarkus/pull/10529#discussion_r451406583", "bodyText": "Sure, that sounds good to me", "author": "geoand", "createdAt": "2020-07-08T09:24:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDkwMjI2NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDkwMzE0NQ==", "url": "https://github.com/quarkusio/quarkus/pull/10529#discussion_r450903145", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            == _Q: OK. And what does a bean look like?_\n          \n          \n            \n            == _Q: But does a bean look like?_", "author": "geoand", "createdAt": "2020-07-07T14:22:19Z", "path": "docs/src/main/asciidoc/cdi.adoc", "diffHunk": "@@ -0,0 +1,361 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Introduction to Contexts and Dependency Injection\n+\n+include::./attributes.adoc[]\n+:numbered:\n+:sectnums:\n+:sectnumlevels: 4\n+:toc:\n+\n+In this guide we're going to describe the basic principles of the programming model used all over the Quarkus universe. \n+Quarkus programming model is based on the http://docs.jboss.org/cdi/spec/2.0/cdi-spec.html[Contexts and Dependency Injection for Java 2.0, window=\"_blank\"] specification.\n+However, a full CDI implementation is not used under the hood.\n+Quarkus only implements a subset of the CDI features - see also <<cdi-reference.adoc#supported_features,the list of supported features>> and <<cdi-reference.adoc#limitations,the list of limitations>>.\n+On the other hand, there are quite a few <<cdi-reference#nonstandard_features,non-standard features>> and <<cdi-reference.adoc#build_time_apis,Quarkus-specific APIs>>.\n+We believe that our efforts will drive the innovation of the CDI specification towards the build-time oriented developer stacks in the future.\n+\n+== _Q: OK. Let's start simple. What is a bean?_\n+\n+A: Well, a bean is a _container-managed_ object that supports a set of basic services, such as injection of dependencies, lifecycle callbacks and interceptors.\n+\n+== _Q: Wait a minute. What does it mean container-managed?_\n+\n+A: Simply put, you don't control the lifecycle of the object instance directly.\n+Instead, you can affect the lifecycle through the declarative means, such as annotations, configuration, etc.\n+The container is the _environment_ where your application runs.\n+It creates and destroys the instances of beans, associates the instances with a designated context, and injects them into other beans.\n+\n+== _Q: What is it good for?_\n+\n+A: An application developer can focus on the business logic rather than \"where and how\" to obtain a fully initialized component with all of its dependencies.\n+\n+NOTE: You've probably heard of the _inversion of control_ (IoC) programming principle. Dependency injection is one of the implementation techniques of IoC. \n+\n+== _Q: OK. And what does a bean look like?_", "originalCommit": "63d155041a5447adba997da8577b662969847b05", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDk5ODkyOQ==", "url": "https://github.com/quarkusio/quarkus/pull/10529#discussion_r450998929", "bodyText": "There's a word missing in the suggestion.", "author": "gsmet", "createdAt": "2020-07-07T16:38:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDkwMzE0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQwNjE4Mw==", "url": "https://github.com/quarkusio/quarkus/pull/10529#discussion_r451406183", "bodyText": "@geoand did you mean \"But what does a bean look like?\". Maybe the simple \"What does a bean look like?\" would be the best here...", "author": "mkouba", "createdAt": "2020-07-08T09:24:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDkwMzE0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQwNzAyMg==", "url": "https://github.com/quarkusio/quarkus/pull/10529#discussion_r451407022", "bodyText": "There's a word missing in the suggestion.\n\nOf course there is... I wrote it :)\nI indeed meant But what does a bean look like?. I'm fine with What does a bean look like?", "author": "geoand", "createdAt": "2020-07-08T09:25:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDkwMzE0NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDkwMzk4NA==", "url": "https://github.com/quarkusio/quarkus/pull/10529#discussion_r450903984", "bodyText": "I am sure that users will not know what dependants means here. Wouldn't it better to say and used throughout the application?", "author": "geoand", "createdAt": "2020-07-07T14:23:21Z", "path": "docs/src/main/asciidoc/cdi.adoc", "diffHunk": "@@ -0,0 +1,361 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Introduction to Contexts and Dependency Injection\n+\n+include::./attributes.adoc[]\n+:numbered:\n+:sectnums:\n+:sectnumlevels: 4\n+:toc:\n+\n+In this guide we're going to describe the basic principles of the programming model used all over the Quarkus universe. \n+Quarkus programming model is based on the http://docs.jboss.org/cdi/spec/2.0/cdi-spec.html[Contexts and Dependency Injection for Java 2.0, window=\"_blank\"] specification.\n+However, a full CDI implementation is not used under the hood.\n+Quarkus only implements a subset of the CDI features - see also <<cdi-reference.adoc#supported_features,the list of supported features>> and <<cdi-reference.adoc#limitations,the list of limitations>>.\n+On the other hand, there are quite a few <<cdi-reference#nonstandard_features,non-standard features>> and <<cdi-reference.adoc#build_time_apis,Quarkus-specific APIs>>.\n+We believe that our efforts will drive the innovation of the CDI specification towards the build-time oriented developer stacks in the future.\n+\n+== _Q: OK. Let's start simple. What is a bean?_\n+\n+A: Well, a bean is a _container-managed_ object that supports a set of basic services, such as injection of dependencies, lifecycle callbacks and interceptors.\n+\n+== _Q: Wait a minute. What does it mean container-managed?_\n+\n+A: Simply put, you don't control the lifecycle of the object instance directly.\n+Instead, you can affect the lifecycle through the declarative means, such as annotations, configuration, etc.\n+The container is the _environment_ where your application runs.\n+It creates and destroys the instances of beans, associates the instances with a designated context, and injects them into other beans.\n+\n+== _Q: What is it good for?_\n+\n+A: An application developer can focus on the business logic rather than \"where and how\" to obtain a fully initialized component with all of its dependencies.\n+\n+NOTE: You've probably heard of the _inversion of control_ (IoC) programming principle. Dependency injection is one of the implementation techniques of IoC. \n+\n+== _Q: OK. And what does a bean look like?_\n+\n+A: There are several kinds of beans.\n+The most common ones are class-based beans:\n+\n+.Simple Bean Example\n+[source,java]\n+----\n+import javax.inject.Inject;\n+import javax.enterprise.context.ApplicationScoped;\n+import org.eclipse.microprofile.metrics.annotation.Counted;\n+\n+@ApplicationScoped <1>\n+public class Translator {\n+\n+    @Inject\n+    Dictionary dictionary; <2>\n+    \n+    @Counted  <3>\n+    String translate(String sentence) { \n+      // ...\n+    }\n+}\n+----\n+<1> This is a scope annotation. It tells the container which context to associate the bean instance with. In this particular case, a *single bean instance* is created for the application and used by all dependants.", "originalCommit": "63d155041a5447adba997da8577b662969847b05", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDkzNTEwMw==", "url": "https://github.com/quarkusio/quarkus/pull/10529#discussion_r450935103", "bodyText": "Or and used by all beans inside which it will be injected  (or a better sentence with the same meaning)", "author": "loicmathieu", "createdAt": "2020-07-07T15:03:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDkwMzk4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQwODA0NQ==", "url": "https://github.com/quarkusio/quarkus/pull/10529#discussion_r451408045", "bodyText": "Yeah, that sounds fine as well", "author": "geoand", "createdAt": "2020-07-08T09:27:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDkwMzk4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQwOTI5OQ==", "url": "https://github.com/quarkusio/quarkus/pull/10529#discussion_r451409299", "bodyText": "What about \"created for the application and used by all other beans that inject Translator.\"? It's not so precise but it reads well...", "author": "mkouba", "createdAt": "2020-07-08T09:29:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDkwMzk4NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDkxNTczOA==", "url": "https://github.com/quarkusio/quarkus/pull/10529#discussion_r450915738", "bodyText": "Should it also be mentioned that no @Inject is needed here since there is only one constructor?", "author": "geoand", "createdAt": "2020-07-07T14:38:42Z", "path": "docs/src/main/asciidoc/cdi.adoc", "diffHunk": "@@ -0,0 +1,361 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Introduction to Contexts and Dependency Injection\n+\n+include::./attributes.adoc[]\n+:numbered:\n+:sectnums:\n+:sectnumlevels: 4\n+:toc:\n+\n+In this guide we're going to describe the basic principles of the programming model used all over the Quarkus universe. \n+Quarkus programming model is based on the http://docs.jboss.org/cdi/spec/2.0/cdi-spec.html[Contexts and Dependency Injection for Java 2.0, window=\"_blank\"] specification.\n+However, a full CDI implementation is not used under the hood.\n+Quarkus only implements a subset of the CDI features - see also <<cdi-reference.adoc#supported_features,the list of supported features>> and <<cdi-reference.adoc#limitations,the list of limitations>>.\n+On the other hand, there are quite a few <<cdi-reference#nonstandard_features,non-standard features>> and <<cdi-reference.adoc#build_time_apis,Quarkus-specific APIs>>.\n+We believe that our efforts will drive the innovation of the CDI specification towards the build-time oriented developer stacks in the future.\n+\n+== _Q: OK. Let's start simple. What is a bean?_\n+\n+A: Well, a bean is a _container-managed_ object that supports a set of basic services, such as injection of dependencies, lifecycle callbacks and interceptors.\n+\n+== _Q: Wait a minute. What does it mean container-managed?_\n+\n+A: Simply put, you don't control the lifecycle of the object instance directly.\n+Instead, you can affect the lifecycle through the declarative means, such as annotations, configuration, etc.\n+The container is the _environment_ where your application runs.\n+It creates and destroys the instances of beans, associates the instances with a designated context, and injects them into other beans.\n+\n+== _Q: What is it good for?_\n+\n+A: An application developer can focus on the business logic rather than \"where and how\" to obtain a fully initialized component with all of its dependencies.\n+\n+NOTE: You've probably heard of the _inversion of control_ (IoC) programming principle. Dependency injection is one of the implementation techniques of IoC. \n+\n+== _Q: OK. And what does a bean look like?_\n+\n+A: There are several kinds of beans.\n+The most common ones are class-based beans:\n+\n+.Simple Bean Example\n+[source,java]\n+----\n+import javax.inject.Inject;\n+import javax.enterprise.context.ApplicationScoped;\n+import org.eclipse.microprofile.metrics.annotation.Counted;\n+\n+@ApplicationScoped <1>\n+public class Translator {\n+\n+    @Inject\n+    Dictionary dictionary; <2>\n+    \n+    @Counted  <3>\n+    String translate(String sentence) { \n+      // ...\n+    }\n+}\n+----\n+<1> This is a scope annotation. It tells the container which context to associate the bean instance with. In this particular case, a *single bean instance* is created for the application and used by all dependants.\n+<2> This is a field injection point. It tells the container that `Translator` depends on the `Dictionary` bean. If there is no matching bean the build fails.\n+<3> This is an interceptor binding annotation. In this case, the annotation comes from the MicroProfile Metrics. The relevant interceptor intercepts the invocation and updates the relevant metrics.\n+\n+== _Q: Nice. How does the dependency resolution work? I see no names or identifiers._\n+\n+A: That's a good question.\n+In CDI the process of matching a bean to an injection point is *type-safe*.\n+Each bean declares a set of bean types.\n+In our example above, the `Translator` bean has two bean types: `Translator` and `java.lang.Object`.\n+Subsequently, a bean is assignable to an injection point if the bean has a bean type that matches the _required type_ and has all the _required qualifiers_.\n+We'll talk about qualifiers later.\n+For now, it's enough to know that the bean above is assignable to an injection point of type `Translator` and `java.lang.Object`.\n+\n+== _Q: Hm, wait a minute. What happens if multiple beans declare the same type?_\n+\n+A: There is a simple rule: *exactly one bean must be assignable to an injection point, otherwise the build fails*.\n+If none is assignable the build fails with `UnsatisfiedResolutionException`.\n+If multiple are assignable the build fails with `AmbiguousResolutionException`.\n+This is very useful because your application fails fast whenever the container is not able to find an unambiguous dependency for any injection point.\n+\n+[TIP]\n+====\n+Your can use programmatic lookup via  `javax.enterprise.inject.Instance` to resolve ambiguities at runtime and even iterate over all beans implementing a given type:\n+\n+[source,java]\n+----\n+public class Translator {\n+\n+    @Inject\n+    Instance<Dictionary> dictionaries; <1>\n+    \n+    String translate(String sentence) { \n+      for (Dictionary dict : dictionaries) { <2>\n+         // ...\n+      }\n+    }\n+}\n+----\n+<1> This injection point will not result in an ambiguous dependency even if there are multiple beans that implement the `Dictionary` type.\n+<2> `javax.enterprise.inject.Instance` extends `Iterable`.\n+====\n+\n+== _Q: Can I use setter and constructor injection?_\n+\n+A: Yes, you can.\n+In fact, in CDI the \"setter injection\" is superseded by more powerful https://docs.jboss.org/cdi/spec/2.0/cdi-spec.html#initializer_methods[initializer methods, window=\"_blank\"].\n+Intializers may accept multiple parameters and don't have to follow the JavaBean naming conventions.\n+\n+.Initialized and Constructor Injection Example\n+[source,java]\n+----\n+@ApplicationScoped\n+public class Translator {\n+\n+    private final TranslatorHelper helper\n+\n+    Translator(TranslatorHelper helper) { <1>\n+       this.helper = helper;\n+    }\n+\n+    @Inject <2>\n+    void setDeps(Dictionary dic, LocalizationService locService) { <3>\n+      / ...\n+    }\n+}\n+----\n+<1> This is a constructor injection. In fact, this code would not work in regular CDI implementations where a bean with a normal scope must always declare a no-args constructor. In Quarkus we detect this problem and \"add\" such a constructor directly in the bytecode.", "originalCommit": "63d155041a5447adba997da8577b662969847b05", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTAwMTIyNw==", "url": "https://github.com/quarkusio/quarkus/pull/10529#discussion_r451001227", "bodyText": "I dunno if we should mention the fact that it's not supported by other implementations here. Do we really care?", "author": "gsmet", "createdAt": "2020-07-07T16:42:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDkxNTczOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTM5NDczNQ==", "url": "https://github.com/quarkusio/quarkus/pull/10529#discussion_r451394735", "bodyText": "+1 to mention you don't need @Inject\nAnd I think we can avoid the no-args comment instead, most users won't even know it's needed and the fact that it is required just rises more questions IMO", "author": "manovotn", "createdAt": "2020-07-08T09:04:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDkxNTczOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQxNjMzOA==", "url": "https://github.com/quarkusio/quarkus/pull/10529#discussion_r451416338", "bodyText": "...since there is only one constructor?\n\n+1\n\nDo we really care?\n\nWe do care because similar features simplify the development a lot.", "author": "mkouba", "createdAt": "2020-07-08T09:41:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDkxNTczOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDkxNzQ0Mw==", "url": "https://github.com/quarkusio/quarkus/pull/10529#discussion_r450917443", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * Circular dependencies in the dependency graph. Circular dependencies are \"bad design\" but sometimes they're inevitable. \n          \n          \n            \n            * Circular dependencies in the dependency graph. Having circular dependencies is often an indication that a redesign should be considered, but sometimes they're inevitable.", "author": "geoand", "createdAt": "2020-07-07T14:40:58Z", "path": "docs/src/main/asciidoc/cdi.adoc", "diffHunk": "@@ -0,0 +1,361 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Introduction to Contexts and Dependency Injection\n+\n+include::./attributes.adoc[]\n+:numbered:\n+:sectnums:\n+:sectnumlevels: 4\n+:toc:\n+\n+In this guide we're going to describe the basic principles of the programming model used all over the Quarkus universe. \n+Quarkus programming model is based on the http://docs.jboss.org/cdi/spec/2.0/cdi-spec.html[Contexts and Dependency Injection for Java 2.0, window=\"_blank\"] specification.\n+However, a full CDI implementation is not used under the hood.\n+Quarkus only implements a subset of the CDI features - see also <<cdi-reference.adoc#supported_features,the list of supported features>> and <<cdi-reference.adoc#limitations,the list of limitations>>.\n+On the other hand, there are quite a few <<cdi-reference#nonstandard_features,non-standard features>> and <<cdi-reference.adoc#build_time_apis,Quarkus-specific APIs>>.\n+We believe that our efforts will drive the innovation of the CDI specification towards the build-time oriented developer stacks in the future.\n+\n+== _Q: OK. Let's start simple. What is a bean?_\n+\n+A: Well, a bean is a _container-managed_ object that supports a set of basic services, such as injection of dependencies, lifecycle callbacks and interceptors.\n+\n+== _Q: Wait a minute. What does it mean container-managed?_\n+\n+A: Simply put, you don't control the lifecycle of the object instance directly.\n+Instead, you can affect the lifecycle through the declarative means, such as annotations, configuration, etc.\n+The container is the _environment_ where your application runs.\n+It creates and destroys the instances of beans, associates the instances with a designated context, and injects them into other beans.\n+\n+== _Q: What is it good for?_\n+\n+A: An application developer can focus on the business logic rather than \"where and how\" to obtain a fully initialized component with all of its dependencies.\n+\n+NOTE: You've probably heard of the _inversion of control_ (IoC) programming principle. Dependency injection is one of the implementation techniques of IoC. \n+\n+== _Q: OK. And what does a bean look like?_\n+\n+A: There are several kinds of beans.\n+The most common ones are class-based beans:\n+\n+.Simple Bean Example\n+[source,java]\n+----\n+import javax.inject.Inject;\n+import javax.enterprise.context.ApplicationScoped;\n+import org.eclipse.microprofile.metrics.annotation.Counted;\n+\n+@ApplicationScoped <1>\n+public class Translator {\n+\n+    @Inject\n+    Dictionary dictionary; <2>\n+    \n+    @Counted  <3>\n+    String translate(String sentence) { \n+      // ...\n+    }\n+}\n+----\n+<1> This is a scope annotation. It tells the container which context to associate the bean instance with. In this particular case, a *single bean instance* is created for the application and used by all dependants.\n+<2> This is a field injection point. It tells the container that `Translator` depends on the `Dictionary` bean. If there is no matching bean the build fails.\n+<3> This is an interceptor binding annotation. In this case, the annotation comes from the MicroProfile Metrics. The relevant interceptor intercepts the invocation and updates the relevant metrics.\n+\n+== _Q: Nice. How does the dependency resolution work? I see no names or identifiers._\n+\n+A: That's a good question.\n+In CDI the process of matching a bean to an injection point is *type-safe*.\n+Each bean declares a set of bean types.\n+In our example above, the `Translator` bean has two bean types: `Translator` and `java.lang.Object`.\n+Subsequently, a bean is assignable to an injection point if the bean has a bean type that matches the _required type_ and has all the _required qualifiers_.\n+We'll talk about qualifiers later.\n+For now, it's enough to know that the bean above is assignable to an injection point of type `Translator` and `java.lang.Object`.\n+\n+== _Q: Hm, wait a minute. What happens if multiple beans declare the same type?_\n+\n+A: There is a simple rule: *exactly one bean must be assignable to an injection point, otherwise the build fails*.\n+If none is assignable the build fails with `UnsatisfiedResolutionException`.\n+If multiple are assignable the build fails with `AmbiguousResolutionException`.\n+This is very useful because your application fails fast whenever the container is not able to find an unambiguous dependency for any injection point.\n+\n+[TIP]\n+====\n+Your can use programmatic lookup via  `javax.enterprise.inject.Instance` to resolve ambiguities at runtime and even iterate over all beans implementing a given type:\n+\n+[source,java]\n+----\n+public class Translator {\n+\n+    @Inject\n+    Instance<Dictionary> dictionaries; <1>\n+    \n+    String translate(String sentence) { \n+      for (Dictionary dict : dictionaries) { <2>\n+         // ...\n+      }\n+    }\n+}\n+----\n+<1> This injection point will not result in an ambiguous dependency even if there are multiple beans that implement the `Dictionary` type.\n+<2> `javax.enterprise.inject.Instance` extends `Iterable`.\n+====\n+\n+== _Q: Can I use setter and constructor injection?_\n+\n+A: Yes, you can.\n+In fact, in CDI the \"setter injection\" is superseded by more powerful https://docs.jboss.org/cdi/spec/2.0/cdi-spec.html#initializer_methods[initializer methods, window=\"_blank\"].\n+Intializers may accept multiple parameters and don't have to follow the JavaBean naming conventions.\n+\n+.Initialized and Constructor Injection Example\n+[source,java]\n+----\n+@ApplicationScoped\n+public class Translator {\n+\n+    private final TranslatorHelper helper\n+\n+    Translator(TranslatorHelper helper) { <1>\n+       this.helper = helper;\n+    }\n+\n+    @Inject <2>\n+    void setDeps(Dictionary dic, LocalizationService locService) { <3>\n+      / ...\n+    }\n+}\n+----\n+<1> This is a constructor injection. In fact, this code would not work in regular CDI implementations where a bean with a normal scope must always declare a no-args constructor. In Quarkus we detect this problem and \"add\" such a constructor directly in the bytecode.\n+<2> An initializer method must be annotated with `@Inject`. \n+<3> An initializer may accept multiple parameters - each one is an injection point.\n+\n+== _Q: You talked about some qualifiers?_\n+\n+A: https://docs.jboss.org/cdi/spec/2.0/cdi-spec.html#qualifiers[Qualifiers, window=\"_blank\"] are annotations that help the container to distinguish beans that implement the same type.\n+As we already said a bean is assignable to an injection point if it has all the required qualifiers.\n+If you declare no qualifier at an injection point the `@Default` qualifier is assumed.\n+\n+.Bean With Custom Qualifier Example\n+[source,java]\n+----\n+@Superior <1>\n+@ApplicationScoped\n+public class SuperiorTranslator extends Translator {\n+\n+    String translate(String sentence) { \n+      // ...\n+    }\n+}\n+----\n+<1> `@Superior` is a https://docs.jboss.org/cdi/spec/2.0/cdi-spec.html#defining_qualifier_types[qualifier annotation, window=\"_blank\"].\n+\n+This bean would be assignable to `@Inject @Superior Translator` and `@Inject @Superior SuperiorTranslator` but not in `@Inject Translator`.\n+The reason is that `@Inject Translator` is automatically transformed to `@Inject @Default Translator` during typesafe resolution.\n+And since our `SuperiorTranslator` does not declare `@Default` only the original `Translator` bean is assignable.\n+\n+== _Q: Looks good. What is the bean scope?_\n+\n+The scope of a bean determines the lifecycle of its instances, i.e. when and where an instance should be created and destroyed.\n+\n+NOTE: Every bean has exactly one scope.\n+\n+== _Q: What scopes can I actually use in my Quarkus application?_\n+\n+A: You can use all the built-in scopes mentioned by the specification except for `javax.enterprise.context.ConversationScoped`.\n+\n+[options=\"header\",cols=\"1,1\"]\n+|===\n+|Annotation   |Description   \n+//----------------------\n+|`@javax.enterprise.context.ApplicationScoped`   | A single bean instance is used for the application and shared among all injection points. The instance is created lazily, i.e. once a method is invoked upon the <<client_proxies, client proxy>>. \n+|`@javax.inject.Singleton`   | Just like `@ApplicationScoped` except that no client proxy is used. The instance is created eagerly.\n+|`@javax.enterprise.context.RequestScoped`   | The bean instance is associated with the current _request_ (usually an HTTP request). \n+|`@javax.enterprise.context.Dependent`   | This is a pseudo-scope. There is no context object that holds all dependent instances. Instead, a dependent instace is a dependent object of the bean it is injected into.\n+|`@javax.enterprise.context.SessionScoped`   | This scope is backed by an `javax.servlet.http.HttpSession` object. It's only available if `quarkus-undertow` extension is used.\n+|===\n+\n+NOTE: There can be other custom scopes provided by Quarkus extension. For example, `qquarkus-narayana-jta` provides `javax.transaction.TransactionScoped`.\n+\n+[[client_proxies]]\n+== _Q: I don't undestand the concept of client proxies._\n+\n+Indeed, the https://docs.jboss.org/cdi/spec/2.0/cdi-spec.html#client_proxies[client proxies, window=\"_blank\"] could be hard to grasp but they provide some useful functionality.\n+A client proxy is basically an object that delegates all method invocations to a target bean instance.\n+It's a container construct that implements `io.quarkus.arc.ClientProxy` and extends the bean class.\n+The client proxy instance is always injected instead of a contextual instance of a normal scoped bean (e.g. `@ApplicationScoped` and `@RequestScoped`).\n+Client proxies allow for:\n+\n+* Lazy instantiation - the instance is created once a method is invoked upon the proxy.\n+* Ability to inject a bean with \"narrower\" scope to a bean with \"wider\" scope; i.e. you can inject a `@RequestScoped` bean into an `@ApplicationScoped` bean.\n+* Circular dependencies in the dependency graph. Circular dependencies are \"bad design\" but sometimes they're inevitable. ", "originalCommit": "63d155041a5447adba997da8577b662969847b05", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDkxODU1Ng==", "url": "https://github.com/quarkusio/quarkus/pull/10529#discussion_r450918556", "bodyText": "Can we add a note that I personally hate producer fields? \ud83d\ude06", "author": "geoand", "createdAt": "2020-07-07T14:42:30Z", "path": "docs/src/main/asciidoc/cdi.adoc", "diffHunk": "@@ -0,0 +1,361 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Introduction to Contexts and Dependency Injection\n+\n+include::./attributes.adoc[]\n+:numbered:\n+:sectnums:\n+:sectnumlevels: 4\n+:toc:\n+\n+In this guide we're going to describe the basic principles of the programming model used all over the Quarkus universe. \n+Quarkus programming model is based on the http://docs.jboss.org/cdi/spec/2.0/cdi-spec.html[Contexts and Dependency Injection for Java 2.0, window=\"_blank\"] specification.\n+However, a full CDI implementation is not used under the hood.\n+Quarkus only implements a subset of the CDI features - see also <<cdi-reference.adoc#supported_features,the list of supported features>> and <<cdi-reference.adoc#limitations,the list of limitations>>.\n+On the other hand, there are quite a few <<cdi-reference#nonstandard_features,non-standard features>> and <<cdi-reference.adoc#build_time_apis,Quarkus-specific APIs>>.\n+We believe that our efforts will drive the innovation of the CDI specification towards the build-time oriented developer stacks in the future.\n+\n+== _Q: OK. Let's start simple. What is a bean?_\n+\n+A: Well, a bean is a _container-managed_ object that supports a set of basic services, such as injection of dependencies, lifecycle callbacks and interceptors.\n+\n+== _Q: Wait a minute. What does it mean container-managed?_\n+\n+A: Simply put, you don't control the lifecycle of the object instance directly.\n+Instead, you can affect the lifecycle through the declarative means, such as annotations, configuration, etc.\n+The container is the _environment_ where your application runs.\n+It creates and destroys the instances of beans, associates the instances with a designated context, and injects them into other beans.\n+\n+== _Q: What is it good for?_\n+\n+A: An application developer can focus on the business logic rather than \"where and how\" to obtain a fully initialized component with all of its dependencies.\n+\n+NOTE: You've probably heard of the _inversion of control_ (IoC) programming principle. Dependency injection is one of the implementation techniques of IoC. \n+\n+== _Q: OK. And what does a bean look like?_\n+\n+A: There are several kinds of beans.\n+The most common ones are class-based beans:\n+\n+.Simple Bean Example\n+[source,java]\n+----\n+import javax.inject.Inject;\n+import javax.enterprise.context.ApplicationScoped;\n+import org.eclipse.microprofile.metrics.annotation.Counted;\n+\n+@ApplicationScoped <1>\n+public class Translator {\n+\n+    @Inject\n+    Dictionary dictionary; <2>\n+    \n+    @Counted  <3>\n+    String translate(String sentence) { \n+      // ...\n+    }\n+}\n+----\n+<1> This is a scope annotation. It tells the container which context to associate the bean instance with. In this particular case, a *single bean instance* is created for the application and used by all dependants.\n+<2> This is a field injection point. It tells the container that `Translator` depends on the `Dictionary` bean. If there is no matching bean the build fails.\n+<3> This is an interceptor binding annotation. In this case, the annotation comes from the MicroProfile Metrics. The relevant interceptor intercepts the invocation and updates the relevant metrics.\n+\n+== _Q: Nice. How does the dependency resolution work? I see no names or identifiers._\n+\n+A: That's a good question.\n+In CDI the process of matching a bean to an injection point is *type-safe*.\n+Each bean declares a set of bean types.\n+In our example above, the `Translator` bean has two bean types: `Translator` and `java.lang.Object`.\n+Subsequently, a bean is assignable to an injection point if the bean has a bean type that matches the _required type_ and has all the _required qualifiers_.\n+We'll talk about qualifiers later.\n+For now, it's enough to know that the bean above is assignable to an injection point of type `Translator` and `java.lang.Object`.\n+\n+== _Q: Hm, wait a minute. What happens if multiple beans declare the same type?_\n+\n+A: There is a simple rule: *exactly one bean must be assignable to an injection point, otherwise the build fails*.\n+If none is assignable the build fails with `UnsatisfiedResolutionException`.\n+If multiple are assignable the build fails with `AmbiguousResolutionException`.\n+This is very useful because your application fails fast whenever the container is not able to find an unambiguous dependency for any injection point.\n+\n+[TIP]\n+====\n+Your can use programmatic lookup via  `javax.enterprise.inject.Instance` to resolve ambiguities at runtime and even iterate over all beans implementing a given type:\n+\n+[source,java]\n+----\n+public class Translator {\n+\n+    @Inject\n+    Instance<Dictionary> dictionaries; <1>\n+    \n+    String translate(String sentence) { \n+      for (Dictionary dict : dictionaries) { <2>\n+         // ...\n+      }\n+    }\n+}\n+----\n+<1> This injection point will not result in an ambiguous dependency even if there are multiple beans that implement the `Dictionary` type.\n+<2> `javax.enterprise.inject.Instance` extends `Iterable`.\n+====\n+\n+== _Q: Can I use setter and constructor injection?_\n+\n+A: Yes, you can.\n+In fact, in CDI the \"setter injection\" is superseded by more powerful https://docs.jboss.org/cdi/spec/2.0/cdi-spec.html#initializer_methods[initializer methods, window=\"_blank\"].\n+Intializers may accept multiple parameters and don't have to follow the JavaBean naming conventions.\n+\n+.Initialized and Constructor Injection Example\n+[source,java]\n+----\n+@ApplicationScoped\n+public class Translator {\n+\n+    private final TranslatorHelper helper\n+\n+    Translator(TranslatorHelper helper) { <1>\n+       this.helper = helper;\n+    }\n+\n+    @Inject <2>\n+    void setDeps(Dictionary dic, LocalizationService locService) { <3>\n+      / ...\n+    }\n+}\n+----\n+<1> This is a constructor injection. In fact, this code would not work in regular CDI implementations where a bean with a normal scope must always declare a no-args constructor. In Quarkus we detect this problem and \"add\" such a constructor directly in the bytecode.\n+<2> An initializer method must be annotated with `@Inject`. \n+<3> An initializer may accept multiple parameters - each one is an injection point.\n+\n+== _Q: You talked about some qualifiers?_\n+\n+A: https://docs.jboss.org/cdi/spec/2.0/cdi-spec.html#qualifiers[Qualifiers, window=\"_blank\"] are annotations that help the container to distinguish beans that implement the same type.\n+As we already said a bean is assignable to an injection point if it has all the required qualifiers.\n+If you declare no qualifier at an injection point the `@Default` qualifier is assumed.\n+\n+.Bean With Custom Qualifier Example\n+[source,java]\n+----\n+@Superior <1>\n+@ApplicationScoped\n+public class SuperiorTranslator extends Translator {\n+\n+    String translate(String sentence) { \n+      // ...\n+    }\n+}\n+----\n+<1> `@Superior` is a https://docs.jboss.org/cdi/spec/2.0/cdi-spec.html#defining_qualifier_types[qualifier annotation, window=\"_blank\"].\n+\n+This bean would be assignable to `@Inject @Superior Translator` and `@Inject @Superior SuperiorTranslator` but not in `@Inject Translator`.\n+The reason is that `@Inject Translator` is automatically transformed to `@Inject @Default Translator` during typesafe resolution.\n+And since our `SuperiorTranslator` does not declare `@Default` only the original `Translator` bean is assignable.\n+\n+== _Q: Looks good. What is the bean scope?_\n+\n+The scope of a bean determines the lifecycle of its instances, i.e. when and where an instance should be created and destroyed.\n+\n+NOTE: Every bean has exactly one scope.\n+\n+== _Q: What scopes can I actually use in my Quarkus application?_\n+\n+A: You can use all the built-in scopes mentioned by the specification except for `javax.enterprise.context.ConversationScoped`.\n+\n+[options=\"header\",cols=\"1,1\"]\n+|===\n+|Annotation   |Description   \n+//----------------------\n+|`@javax.enterprise.context.ApplicationScoped`   | A single bean instance is used for the application and shared among all injection points. The instance is created lazily, i.e. once a method is invoked upon the <<client_proxies, client proxy>>. \n+|`@javax.inject.Singleton`   | Just like `@ApplicationScoped` except that no client proxy is used. The instance is created eagerly.\n+|`@javax.enterprise.context.RequestScoped`   | The bean instance is associated with the current _request_ (usually an HTTP request). \n+|`@javax.enterprise.context.Dependent`   | This is a pseudo-scope. There is no context object that holds all dependent instances. Instead, a dependent instace is a dependent object of the bean it is injected into.\n+|`@javax.enterprise.context.SessionScoped`   | This scope is backed by an `javax.servlet.http.HttpSession` object. It's only available if `quarkus-undertow` extension is used.\n+|===\n+\n+NOTE: There can be other custom scopes provided by Quarkus extension. For example, `qquarkus-narayana-jta` provides `javax.transaction.TransactionScoped`.\n+\n+[[client_proxies]]\n+== _Q: I don't undestand the concept of client proxies._\n+\n+Indeed, the https://docs.jboss.org/cdi/spec/2.0/cdi-spec.html#client_proxies[client proxies, window=\"_blank\"] could be hard to grasp but they provide some useful functionality.\n+A client proxy is basically an object that delegates all method invocations to a target bean instance.\n+It's a container construct that implements `io.quarkus.arc.ClientProxy` and extends the bean class.\n+The client proxy instance is always injected instead of a contextual instance of a normal scoped bean (e.g. `@ApplicationScoped` and `@RequestScoped`).\n+Client proxies allow for:\n+\n+* Lazy instantiation - the instance is created once a method is invoked upon the proxy.\n+* Ability to inject a bean with \"narrower\" scope to a bean with \"wider\" scope; i.e. you can inject a `@RequestScoped` bean into an `@ApplicationScoped` bean.\n+* Circular dependencies in the dependency graph. Circular dependencies are \"bad design\" but sometimes they're inevitable. \n+* In rare cases it's practical to destroy the beans manually. A direct injected reference would lead to a stale bean instance.\n+ \n+ \n+== _Q: OK. You said that there are several kinds of beans?_\n+\n+A: Yes. In general, in Quarkus we distinguish:\n+\n+1. Class beans\n+2. Producer methods\n+3. Producer fields\n+4. Synthetic beans\n+\n+Producer methods are useful if you need additional control over instantiation of a bean.\n+They are also useful when integrating third-party libraries where you don't control the class source and may not add additional annotations etc.\n+\n+.Producer Method Example\n+[source,java]\n+----\n+@ApplicationScoped\n+public class PiProducer {\n+\n+    @Produces <1>\n+    double producePi() { \n+       return Math.PI; <2>\n+    }\n+}\n+\n+@ApplicationScoped\n+public class PiConsumer {\n+\n+   @Inject\n+   double pi; <3>\n+   \n+   double twoPis() {\n+     return pi * 2;\n+   }\n+} \n+----\n+<1> The container analyses the method annotations to build a bean metadata.\n+The return type is used to build the set of bean types. \n+In this case, it will be `double` and `java.lang.Object`.\n+No scope annotation is declared and so it's defaulted to `@Dependent`.\n+<2> The container will delegate to this method when creating the bean instance.\n+<3> `PiProducer#producePi()` is invoked and the result is set to `PiConsumer#pi` when the `PiConsumer` instance is created.\n+\n+NOTE: One of the limitations of producers is that interceptors are not applied to the result of a producer method/field.\n+\n+Producer fields are very similar to producer methods except that the field value is read when obtaining a bean instance.", "originalCommit": "63d155041a5447adba997da8577b662969847b05", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTAwNTE5Mw==", "url": "https://github.com/quarkusio/quarkus/pull/10529#discussion_r451005193", "bodyText": "Do producer fields bring something to the mix? If not, maybe I wouldn't introduce them here.", "author": "gsmet", "createdAt": "2020-07-07T16:49:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDkxODU1Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQwODI0Ng==", "url": "https://github.com/quarkusio/quarkus/pull/10529#discussion_r451408246", "bodyText": "Do producer fields bring something to the mix? If not, maybe I wouldn't introduce them here.\n\nThey are just \"simpler producer methods\" because sometimes you don't need whole method to declare it.\nThe text related to producer fields is so tiny, I would probably keep it.", "author": "manovotn", "createdAt": "2020-07-08T09:27:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDkxODU1Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQzNzM5NA==", "url": "https://github.com/quarkusio/quarkus/pull/10529#discussion_r451437394", "bodyText": "Can we add a note that I personally hate producer fields?\n\n@geoand why is that? They're nice ;-).", "author": "mkouba", "createdAt": "2020-07-08T10:19:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDkxODU1Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQzODQzNg==", "url": "https://github.com/quarkusio/quarkus/pull/10529#discussion_r451438436", "bodyText": "They just don't fit the mental model I have in my head of how things are produced. Having something produced by calling a method makes sense, reading it from a field does not :)", "author": "geoand", "createdAt": "2020-07-08T10:21:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDkxODU1Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDkxOTMwOQ==", "url": "https://github.com/quarkusio/quarkus/pull/10529#discussion_r450919309", "bodyText": "I think it makes sense to mention if the ordering is from highest to lowest or the inverse", "author": "geoand", "createdAt": "2020-07-07T14:43:24Z", "path": "docs/src/main/asciidoc/cdi.adoc", "diffHunk": "@@ -0,0 +1,361 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Introduction to Contexts and Dependency Injection\n+\n+include::./attributes.adoc[]\n+:numbered:\n+:sectnums:\n+:sectnumlevels: 4\n+:toc:\n+\n+In this guide we're going to describe the basic principles of the programming model used all over the Quarkus universe. \n+Quarkus programming model is based on the http://docs.jboss.org/cdi/spec/2.0/cdi-spec.html[Contexts and Dependency Injection for Java 2.0, window=\"_blank\"] specification.\n+However, a full CDI implementation is not used under the hood.\n+Quarkus only implements a subset of the CDI features - see also <<cdi-reference.adoc#supported_features,the list of supported features>> and <<cdi-reference.adoc#limitations,the list of limitations>>.\n+On the other hand, there are quite a few <<cdi-reference#nonstandard_features,non-standard features>> and <<cdi-reference.adoc#build_time_apis,Quarkus-specific APIs>>.\n+We believe that our efforts will drive the innovation of the CDI specification towards the build-time oriented developer stacks in the future.\n+\n+== _Q: OK. Let's start simple. What is a bean?_\n+\n+A: Well, a bean is a _container-managed_ object that supports a set of basic services, such as injection of dependencies, lifecycle callbacks and interceptors.\n+\n+== _Q: Wait a minute. What does it mean container-managed?_\n+\n+A: Simply put, you don't control the lifecycle of the object instance directly.\n+Instead, you can affect the lifecycle through the declarative means, such as annotations, configuration, etc.\n+The container is the _environment_ where your application runs.\n+It creates and destroys the instances of beans, associates the instances with a designated context, and injects them into other beans.\n+\n+== _Q: What is it good for?_\n+\n+A: An application developer can focus on the business logic rather than \"where and how\" to obtain a fully initialized component with all of its dependencies.\n+\n+NOTE: You've probably heard of the _inversion of control_ (IoC) programming principle. Dependency injection is one of the implementation techniques of IoC. \n+\n+== _Q: OK. And what does a bean look like?_\n+\n+A: There are several kinds of beans.\n+The most common ones are class-based beans:\n+\n+.Simple Bean Example\n+[source,java]\n+----\n+import javax.inject.Inject;\n+import javax.enterprise.context.ApplicationScoped;\n+import org.eclipse.microprofile.metrics.annotation.Counted;\n+\n+@ApplicationScoped <1>\n+public class Translator {\n+\n+    @Inject\n+    Dictionary dictionary; <2>\n+    \n+    @Counted  <3>\n+    String translate(String sentence) { \n+      // ...\n+    }\n+}\n+----\n+<1> This is a scope annotation. It tells the container which context to associate the bean instance with. In this particular case, a *single bean instance* is created for the application and used by all dependants.\n+<2> This is a field injection point. It tells the container that `Translator` depends on the `Dictionary` bean. If there is no matching bean the build fails.\n+<3> This is an interceptor binding annotation. In this case, the annotation comes from the MicroProfile Metrics. The relevant interceptor intercepts the invocation and updates the relevant metrics.\n+\n+== _Q: Nice. How does the dependency resolution work? I see no names or identifiers._\n+\n+A: That's a good question.\n+In CDI the process of matching a bean to an injection point is *type-safe*.\n+Each bean declares a set of bean types.\n+In our example above, the `Translator` bean has two bean types: `Translator` and `java.lang.Object`.\n+Subsequently, a bean is assignable to an injection point if the bean has a bean type that matches the _required type_ and has all the _required qualifiers_.\n+We'll talk about qualifiers later.\n+For now, it's enough to know that the bean above is assignable to an injection point of type `Translator` and `java.lang.Object`.\n+\n+== _Q: Hm, wait a minute. What happens if multiple beans declare the same type?_\n+\n+A: There is a simple rule: *exactly one bean must be assignable to an injection point, otherwise the build fails*.\n+If none is assignable the build fails with `UnsatisfiedResolutionException`.\n+If multiple are assignable the build fails with `AmbiguousResolutionException`.\n+This is very useful because your application fails fast whenever the container is not able to find an unambiguous dependency for any injection point.\n+\n+[TIP]\n+====\n+Your can use programmatic lookup via  `javax.enterprise.inject.Instance` to resolve ambiguities at runtime and even iterate over all beans implementing a given type:\n+\n+[source,java]\n+----\n+public class Translator {\n+\n+    @Inject\n+    Instance<Dictionary> dictionaries; <1>\n+    \n+    String translate(String sentence) { \n+      for (Dictionary dict : dictionaries) { <2>\n+         // ...\n+      }\n+    }\n+}\n+----\n+<1> This injection point will not result in an ambiguous dependency even if there are multiple beans that implement the `Dictionary` type.\n+<2> `javax.enterprise.inject.Instance` extends `Iterable`.\n+====\n+\n+== _Q: Can I use setter and constructor injection?_\n+\n+A: Yes, you can.\n+In fact, in CDI the \"setter injection\" is superseded by more powerful https://docs.jboss.org/cdi/spec/2.0/cdi-spec.html#initializer_methods[initializer methods, window=\"_blank\"].\n+Intializers may accept multiple parameters and don't have to follow the JavaBean naming conventions.\n+\n+.Initialized and Constructor Injection Example\n+[source,java]\n+----\n+@ApplicationScoped\n+public class Translator {\n+\n+    private final TranslatorHelper helper\n+\n+    Translator(TranslatorHelper helper) { <1>\n+       this.helper = helper;\n+    }\n+\n+    @Inject <2>\n+    void setDeps(Dictionary dic, LocalizationService locService) { <3>\n+      / ...\n+    }\n+}\n+----\n+<1> This is a constructor injection. In fact, this code would not work in regular CDI implementations where a bean with a normal scope must always declare a no-args constructor. In Quarkus we detect this problem and \"add\" such a constructor directly in the bytecode.\n+<2> An initializer method must be annotated with `@Inject`. \n+<3> An initializer may accept multiple parameters - each one is an injection point.\n+\n+== _Q: You talked about some qualifiers?_\n+\n+A: https://docs.jboss.org/cdi/spec/2.0/cdi-spec.html#qualifiers[Qualifiers, window=\"_blank\"] are annotations that help the container to distinguish beans that implement the same type.\n+As we already said a bean is assignable to an injection point if it has all the required qualifiers.\n+If you declare no qualifier at an injection point the `@Default` qualifier is assumed.\n+\n+.Bean With Custom Qualifier Example\n+[source,java]\n+----\n+@Superior <1>\n+@ApplicationScoped\n+public class SuperiorTranslator extends Translator {\n+\n+    String translate(String sentence) { \n+      // ...\n+    }\n+}\n+----\n+<1> `@Superior` is a https://docs.jboss.org/cdi/spec/2.0/cdi-spec.html#defining_qualifier_types[qualifier annotation, window=\"_blank\"].\n+\n+This bean would be assignable to `@Inject @Superior Translator` and `@Inject @Superior SuperiorTranslator` but not in `@Inject Translator`.\n+The reason is that `@Inject Translator` is automatically transformed to `@Inject @Default Translator` during typesafe resolution.\n+And since our `SuperiorTranslator` does not declare `@Default` only the original `Translator` bean is assignable.\n+\n+== _Q: Looks good. What is the bean scope?_\n+\n+The scope of a bean determines the lifecycle of its instances, i.e. when and where an instance should be created and destroyed.\n+\n+NOTE: Every bean has exactly one scope.\n+\n+== _Q: What scopes can I actually use in my Quarkus application?_\n+\n+A: You can use all the built-in scopes mentioned by the specification except for `javax.enterprise.context.ConversationScoped`.\n+\n+[options=\"header\",cols=\"1,1\"]\n+|===\n+|Annotation   |Description   \n+//----------------------\n+|`@javax.enterprise.context.ApplicationScoped`   | A single bean instance is used for the application and shared among all injection points. The instance is created lazily, i.e. once a method is invoked upon the <<client_proxies, client proxy>>. \n+|`@javax.inject.Singleton`   | Just like `@ApplicationScoped` except that no client proxy is used. The instance is created eagerly.\n+|`@javax.enterprise.context.RequestScoped`   | The bean instance is associated with the current _request_ (usually an HTTP request). \n+|`@javax.enterprise.context.Dependent`   | This is a pseudo-scope. There is no context object that holds all dependent instances. Instead, a dependent instace is a dependent object of the bean it is injected into.\n+|`@javax.enterprise.context.SessionScoped`   | This scope is backed by an `javax.servlet.http.HttpSession` object. It's only available if `quarkus-undertow` extension is used.\n+|===\n+\n+NOTE: There can be other custom scopes provided by Quarkus extension. For example, `qquarkus-narayana-jta` provides `javax.transaction.TransactionScoped`.\n+\n+[[client_proxies]]\n+== _Q: I don't undestand the concept of client proxies._\n+\n+Indeed, the https://docs.jboss.org/cdi/spec/2.0/cdi-spec.html#client_proxies[client proxies, window=\"_blank\"] could be hard to grasp but they provide some useful functionality.\n+A client proxy is basically an object that delegates all method invocations to a target bean instance.\n+It's a container construct that implements `io.quarkus.arc.ClientProxy` and extends the bean class.\n+The client proxy instance is always injected instead of a contextual instance of a normal scoped bean (e.g. `@ApplicationScoped` and `@RequestScoped`).\n+Client proxies allow for:\n+\n+* Lazy instantiation - the instance is created once a method is invoked upon the proxy.\n+* Ability to inject a bean with \"narrower\" scope to a bean with \"wider\" scope; i.e. you can inject a `@RequestScoped` bean into an `@ApplicationScoped` bean.\n+* Circular dependencies in the dependency graph. Circular dependencies are \"bad design\" but sometimes they're inevitable. \n+* In rare cases it's practical to destroy the beans manually. A direct injected reference would lead to a stale bean instance.\n+ \n+ \n+== _Q: OK. You said that there are several kinds of beans?_\n+\n+A: Yes. In general, in Quarkus we distinguish:\n+\n+1. Class beans\n+2. Producer methods\n+3. Producer fields\n+4. Synthetic beans\n+\n+Producer methods are useful if you need additional control over instantiation of a bean.\n+They are also useful when integrating third-party libraries where you don't control the class source and may not add additional annotations etc.\n+\n+.Producer Method Example\n+[source,java]\n+----\n+@ApplicationScoped\n+public class PiProducer {\n+\n+    @Produces <1>\n+    double producePi() { \n+       return Math.PI; <2>\n+    }\n+}\n+\n+@ApplicationScoped\n+public class PiConsumer {\n+\n+   @Inject\n+   double pi; <3>\n+   \n+   double twoPis() {\n+     return pi * 2;\n+   }\n+} \n+----\n+<1> The container analyses the method annotations to build a bean metadata.\n+The return type is used to build the set of bean types. \n+In this case, it will be `double` and `java.lang.Object`.\n+No scope annotation is declared and so it's defaulted to `@Dependent`.\n+<2> The container will delegate to this method when creating the bean instance.\n+<3> `PiProducer#producePi()` is invoked and the result is set to `PiConsumer#pi` when the `PiConsumer` instance is created.\n+\n+NOTE: One of the limitations of producers is that interceptors are not applied to the result of a producer method/field.\n+\n+Producer fields are very similar to producer methods except that the field value is read when obtaining a bean instance.\n+\n+TIP: There's more about producers. You can declare qualifiers, inject dependencies into the producer methods parameters, etc. You can read more about producers for example in the https://docs.jboss.org/weld/reference/latest/en-US/html/beanscdi.html#_producer_methods[Weld docs, window=\"_blank\"].\n+\n+Synthetic beans are usually provided by extensions.\n+A synthetic bean is not backed by a class/method/field.\n+Application developers usually only consume this kind of beans.\n+\n+== _Q: OK injection looks cool. What other services are provided?_\n+\n+=== Lifecycle Callbacks\n+\n+A bean class may declare lifecycle `@PostConstruct` and `@PreDestroy` callbacks:\n+\n+.Lifecycle Callbacks Example\n+[source,java]\n+----\n+import javax.annotation.PostConstruct;\n+import javax.annotation.PreDestroy;\n+\n+@ApplicationScoped\n+public class Translator {\n+\n+    @PostConstruct <1>\n+    void init() {\n+       // ...\n+    }\n+    \n+    @PreDestroy <2>\n+    void destroy() {\n+      // ...\n+    }\n+}\n+----\n+<1> This callback is invoked before the bean instance is put into service. It is safe to perform some initialization here.\n+<2> This callback is invoked before the bean instance is destroyed. It is safe to perform some cleanup tasks here.\n+\n+TIP: It's a good practice to keep the logic in the callbacks \"without side effects\", i.e. you should avoid calling other beans inside the callbacks.\n+\n+=== Interceptors\n+\n+Interceptors are used to separate cross-cutting concerns from business logic. \n+There is a separate specification - Java Interceptors - that defines the basic programming model and semantics.\n+\n+.Simple Interceptor Example\n+[source,java]\n+----\n+import javax.interceptor.Interceptor;\n+import javax.annotation.Priority;\n+\n+@Logged <1>\n+@Priority(2020) <2>\n+@Interceptor <3>\n+public class LoggingInterceptor {\n+\n+   @Inject <4>\n+   Logger logger;\n+\n+   @AroundInvoke <5>\n+   Objec logInvocation(InvocationContext context) {\n+      // ...log before\n+      Objec ret = context.proceed(); <6>\n+      // ...log after\n+      return ret;\n+   }\n+    \n+}\n+----\n+<1> This is an interceptor binding annotation that is used to bind our interceptor to a bean. Simply annotate a bean class with `@Logged`.\n+<2> `Priority` enables the interceptor and affects the the interceptor ordering. ", "originalCommit": "63d155041a5447adba997da8577b662969847b05", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQ0ODQ2Mw==", "url": "https://github.com/quarkusio/quarkus/pull/10529#discussion_r451448463", "bodyText": "We could mention this but it's slightly more complicated because \"Interceptors with smaller priority values are called first\" but that actually means that interceptors with higher priority are \"closer\" to the business method invocation:\n--> InterceptorWithPriority1 code before ctx.proceed()\n   ---> InterceptorWithPriority10 code before ctx.proceed()\n      ---> Business method\n   ---> InterceptorWithPriority10 code after ctx.proceed()\n--> InterceptorWithPriority1 code before ctx.proceed()\n\nWouldn't that confuse people even more? ;-)", "author": "mkouba", "createdAt": "2020-07-08T10:41:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDkxOTMwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQ1MDIzMw==", "url": "https://github.com/quarkusio/quarkus/pull/10529#discussion_r451450233", "bodyText": "I don't think it would confuse people. IMHO all I want to know as a user is which interceptor gets called first and which gets called last.", "author": "geoand", "createdAt": "2020-07-08T10:45:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDkxOTMwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQ1MjA3MA==", "url": "https://github.com/quarkusio/quarkus/pull/10529#discussion_r451452070", "bodyText": "Ok, no problem. Will add the \"Interceptors with smaller priority values are called first\" sentence here. All confused people pls blame @geoand :D !", "author": "mkouba", "createdAt": "2020-07-08T10:49:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDkxOTMwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQ1NDY3OQ==", "url": "https://github.com/quarkusio/quarkus/pull/10529#discussion_r451454679", "bodyText": "Send all the enraged users my way :)", "author": "geoand", "createdAt": "2020-07-08T10:54:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDkxOTMwOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDk0MzI5NA==", "url": "https://github.com/quarkusio/quarkus/pull/10529#discussion_r450943294", "bodyText": "This notion of \"depends\" disturb me.\nI didn't understand it clearly, for me it tells the container to set the field inside the bean, nothing more ...", "author": "loicmathieu", "createdAt": "2020-07-07T15:14:56Z", "path": "docs/src/main/asciidoc/cdi.adoc", "diffHunk": "@@ -0,0 +1,361 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Introduction to Contexts and Dependency Injection\n+\n+include::./attributes.adoc[]\n+:numbered:\n+:sectnums:\n+:sectnumlevels: 4\n+:toc:\n+\n+In this guide we're going to describe the basic principles of the programming model used all over the Quarkus universe. \n+Quarkus programming model is based on the http://docs.jboss.org/cdi/spec/2.0/cdi-spec.html[Contexts and Dependency Injection for Java 2.0, window=\"_blank\"] specification.\n+However, a full CDI implementation is not used under the hood.\n+Quarkus only implements a subset of the CDI features - see also <<cdi-reference.adoc#supported_features,the list of supported features>> and <<cdi-reference.adoc#limitations,the list of limitations>>.\n+On the other hand, there are quite a few <<cdi-reference#nonstandard_features,non-standard features>> and <<cdi-reference.adoc#build_time_apis,Quarkus-specific APIs>>.\n+We believe that our efforts will drive the innovation of the CDI specification towards the build-time oriented developer stacks in the future.\n+\n+== _Q: OK. Let's start simple. What is a bean?_\n+\n+A: Well, a bean is a _container-managed_ object that supports a set of basic services, such as injection of dependencies, lifecycle callbacks and interceptors.\n+\n+== _Q: Wait a minute. What does it mean container-managed?_\n+\n+A: Simply put, you don't control the lifecycle of the object instance directly.\n+Instead, you can affect the lifecycle through the declarative means, such as annotations, configuration, etc.\n+The container is the _environment_ where your application runs.\n+It creates and destroys the instances of beans, associates the instances with a designated context, and injects them into other beans.\n+\n+== _Q: What is it good for?_\n+\n+A: An application developer can focus on the business logic rather than \"where and how\" to obtain a fully initialized component with all of its dependencies.\n+\n+NOTE: You've probably heard of the _inversion of control_ (IoC) programming principle. Dependency injection is one of the implementation techniques of IoC. \n+\n+== _Q: OK. And what does a bean look like?_\n+\n+A: There are several kinds of beans.\n+The most common ones are class-based beans:\n+\n+.Simple Bean Example\n+[source,java]\n+----\n+import javax.inject.Inject;\n+import javax.enterprise.context.ApplicationScoped;\n+import org.eclipse.microprofile.metrics.annotation.Counted;\n+\n+@ApplicationScoped <1>\n+public class Translator {\n+\n+    @Inject\n+    Dictionary dictionary; <2>\n+    \n+    @Counted  <3>\n+    String translate(String sentence) { \n+      // ...\n+    }\n+}\n+----\n+<1> This is a scope annotation. It tells the container which context to associate the bean instance with. In this particular case, a *single bean instance* is created for the application and used by all dependants.\n+<2> This is a field injection point. It tells the container that `Translator` depends on the `Dictionary` bean. If there is no matching bean the build fails.", "originalCommit": "63d155041a5447adba997da8577b662969847b05", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDk5OTUxMA==", "url": "https://github.com/quarkusio/quarkus/pull/10529#discussion_r450999510", "bodyText": "Yeah I would focus on the fact that the service will be made available to the bean via injection.", "author": "gsmet", "createdAt": "2020-07-07T16:39:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDk0MzI5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTM4NzgwOA==", "url": "https://github.com/quarkusio/quarkus/pull/10529#discussion_r451387808", "bodyText": "Maybe just say that the field value is a bean set by container and keep the note of failure if there is no matching bean.", "author": "manovotn", "createdAt": "2020-07-08T08:53:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDk0MzI5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQxMzAwMg==", "url": "https://github.com/quarkusio/quarkus/pull/10529#discussion_r451413002", "bodyText": "I'm sorry but I don't understand. It's all about \"dependency injection\" so if a component depends on other component it must declare the dependency by means of an injection point.\n\"tells the container to set the field inside the bean, nothing more\". Not really. The container must validate all dependencies/injection points first.\n\"service will be made available to the bean via injection\" is IMHO cumbersome.", "author": "mkouba", "createdAt": "2020-07-08T09:35:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDk0MzI5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQ1ODc5OA==", "url": "https://github.com/quarkusio/quarkus/pull/10529#discussion_r451458798", "bodyText": "I suppose it boils down to how much detail you want in a beginner guide. But I get your point and on second thought, I'd keep it as is.", "author": "manovotn", "createdAt": "2020-07-08T11:02:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDk0MzI5NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDk0Mzc3OQ==", "url": "https://github.com/quarkusio/quarkus/pull/10529#discussion_r450943779", "bodyText": "Maybe introduce interceptor binding later on as it's a more complex principle and it's better to introduce one principle at a time", "author": "loicmathieu", "createdAt": "2020-07-07T15:15:37Z", "path": "docs/src/main/asciidoc/cdi.adoc", "diffHunk": "@@ -0,0 +1,361 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Introduction to Contexts and Dependency Injection\n+\n+include::./attributes.adoc[]\n+:numbered:\n+:sectnums:\n+:sectnumlevels: 4\n+:toc:\n+\n+In this guide we're going to describe the basic principles of the programming model used all over the Quarkus universe. \n+Quarkus programming model is based on the http://docs.jboss.org/cdi/spec/2.0/cdi-spec.html[Contexts and Dependency Injection for Java 2.0, window=\"_blank\"] specification.\n+However, a full CDI implementation is not used under the hood.\n+Quarkus only implements a subset of the CDI features - see also <<cdi-reference.adoc#supported_features,the list of supported features>> and <<cdi-reference.adoc#limitations,the list of limitations>>.\n+On the other hand, there are quite a few <<cdi-reference#nonstandard_features,non-standard features>> and <<cdi-reference.adoc#build_time_apis,Quarkus-specific APIs>>.\n+We believe that our efforts will drive the innovation of the CDI specification towards the build-time oriented developer stacks in the future.\n+\n+== _Q: OK. Let's start simple. What is a bean?_\n+\n+A: Well, a bean is a _container-managed_ object that supports a set of basic services, such as injection of dependencies, lifecycle callbacks and interceptors.\n+\n+== _Q: Wait a minute. What does it mean container-managed?_\n+\n+A: Simply put, you don't control the lifecycle of the object instance directly.\n+Instead, you can affect the lifecycle through the declarative means, such as annotations, configuration, etc.\n+The container is the _environment_ where your application runs.\n+It creates and destroys the instances of beans, associates the instances with a designated context, and injects them into other beans.\n+\n+== _Q: What is it good for?_\n+\n+A: An application developer can focus on the business logic rather than \"where and how\" to obtain a fully initialized component with all of its dependencies.\n+\n+NOTE: You've probably heard of the _inversion of control_ (IoC) programming principle. Dependency injection is one of the implementation techniques of IoC. \n+\n+== _Q: OK. And what does a bean look like?_\n+\n+A: There are several kinds of beans.\n+The most common ones are class-based beans:\n+\n+.Simple Bean Example\n+[source,java]\n+----\n+import javax.inject.Inject;\n+import javax.enterprise.context.ApplicationScoped;\n+import org.eclipse.microprofile.metrics.annotation.Counted;\n+\n+@ApplicationScoped <1>\n+public class Translator {\n+\n+    @Inject\n+    Dictionary dictionary; <2>\n+    \n+    @Counted  <3>\n+    String translate(String sentence) { \n+      // ...\n+    }\n+}\n+----\n+<1> This is a scope annotation. It tells the container which context to associate the bean instance with. In this particular case, a *single bean instance* is created for the application and used by all dependants.\n+<2> This is a field injection point. It tells the container that `Translator` depends on the `Dictionary` bean. If there is no matching bean the build fails.\n+<3> This is an interceptor binding annotation. In this case, the annotation comes from the MicroProfile Metrics. The relevant interceptor intercepts the invocation and updates the relevant metrics.", "originalCommit": "63d155041a5447adba997da8577b662969847b05", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDk5OTY3OA==", "url": "https://github.com/quarkusio/quarkus/pull/10529#discussion_r450999678", "bodyText": "Yeah, I would introduce it later too.", "author": "gsmet", "createdAt": "2020-07-07T16:40:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDk0Mzc3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQxNTQ0OQ==", "url": "https://github.com/quarkusio/quarkus/pull/10529#discussion_r451415449", "bodyText": "This example shows a typical bean (although simplified) and interceptors are very typical (metrics, transactions, fault tolerance, etc.). I will add a link to the \"Interceptors\" chapter.", "author": "mkouba", "createdAt": "2020-07-08T09:39:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDk0Mzc3OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDk0NjQ5NQ==", "url": "https://github.com/quarkusio/quarkus/pull/10529#discussion_r450946495", "bodyText": "Maybe explain when it will be created like for the other scopes.", "author": "loicmathieu", "createdAt": "2020-07-07T15:19:35Z", "path": "docs/src/main/asciidoc/cdi.adoc", "diffHunk": "@@ -0,0 +1,361 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Introduction to Contexts and Dependency Injection\n+\n+include::./attributes.adoc[]\n+:numbered:\n+:sectnums:\n+:sectnumlevels: 4\n+:toc:\n+\n+In this guide we're going to describe the basic principles of the programming model used all over the Quarkus universe. \n+Quarkus programming model is based on the http://docs.jboss.org/cdi/spec/2.0/cdi-spec.html[Contexts and Dependency Injection for Java 2.0, window=\"_blank\"] specification.\n+However, a full CDI implementation is not used under the hood.\n+Quarkus only implements a subset of the CDI features - see also <<cdi-reference.adoc#supported_features,the list of supported features>> and <<cdi-reference.adoc#limitations,the list of limitations>>.\n+On the other hand, there are quite a few <<cdi-reference#nonstandard_features,non-standard features>> and <<cdi-reference.adoc#build_time_apis,Quarkus-specific APIs>>.\n+We believe that our efforts will drive the innovation of the CDI specification towards the build-time oriented developer stacks in the future.\n+\n+== _Q: OK. Let's start simple. What is a bean?_\n+\n+A: Well, a bean is a _container-managed_ object that supports a set of basic services, such as injection of dependencies, lifecycle callbacks and interceptors.\n+\n+== _Q: Wait a minute. What does it mean container-managed?_\n+\n+A: Simply put, you don't control the lifecycle of the object instance directly.\n+Instead, you can affect the lifecycle through the declarative means, such as annotations, configuration, etc.\n+The container is the _environment_ where your application runs.\n+It creates and destroys the instances of beans, associates the instances with a designated context, and injects them into other beans.\n+\n+== _Q: What is it good for?_\n+\n+A: An application developer can focus on the business logic rather than \"where and how\" to obtain a fully initialized component with all of its dependencies.\n+\n+NOTE: You've probably heard of the _inversion of control_ (IoC) programming principle. Dependency injection is one of the implementation techniques of IoC. \n+\n+== _Q: OK. And what does a bean look like?_\n+\n+A: There are several kinds of beans.\n+The most common ones are class-based beans:\n+\n+.Simple Bean Example\n+[source,java]\n+----\n+import javax.inject.Inject;\n+import javax.enterprise.context.ApplicationScoped;\n+import org.eclipse.microprofile.metrics.annotation.Counted;\n+\n+@ApplicationScoped <1>\n+public class Translator {\n+\n+    @Inject\n+    Dictionary dictionary; <2>\n+    \n+    @Counted  <3>\n+    String translate(String sentence) { \n+      // ...\n+    }\n+}\n+----\n+<1> This is a scope annotation. It tells the container which context to associate the bean instance with. In this particular case, a *single bean instance* is created for the application and used by all dependants.\n+<2> This is a field injection point. It tells the container that `Translator` depends on the `Dictionary` bean. If there is no matching bean the build fails.\n+<3> This is an interceptor binding annotation. In this case, the annotation comes from the MicroProfile Metrics. The relevant interceptor intercepts the invocation and updates the relevant metrics.\n+\n+== _Q: Nice. How does the dependency resolution work? I see no names or identifiers._\n+\n+A: That's a good question.\n+In CDI the process of matching a bean to an injection point is *type-safe*.\n+Each bean declares a set of bean types.\n+In our example above, the `Translator` bean has two bean types: `Translator` and `java.lang.Object`.\n+Subsequently, a bean is assignable to an injection point if the bean has a bean type that matches the _required type_ and has all the _required qualifiers_.\n+We'll talk about qualifiers later.\n+For now, it's enough to know that the bean above is assignable to an injection point of type `Translator` and `java.lang.Object`.\n+\n+== _Q: Hm, wait a minute. What happens if multiple beans declare the same type?_\n+\n+A: There is a simple rule: *exactly one bean must be assignable to an injection point, otherwise the build fails*.\n+If none is assignable the build fails with `UnsatisfiedResolutionException`.\n+If multiple are assignable the build fails with `AmbiguousResolutionException`.\n+This is very useful because your application fails fast whenever the container is not able to find an unambiguous dependency for any injection point.\n+\n+[TIP]\n+====\n+Your can use programmatic lookup via  `javax.enterprise.inject.Instance` to resolve ambiguities at runtime and even iterate over all beans implementing a given type:\n+\n+[source,java]\n+----\n+public class Translator {\n+\n+    @Inject\n+    Instance<Dictionary> dictionaries; <1>\n+    \n+    String translate(String sentence) { \n+      for (Dictionary dict : dictionaries) { <2>\n+         // ...\n+      }\n+    }\n+}\n+----\n+<1> This injection point will not result in an ambiguous dependency even if there are multiple beans that implement the `Dictionary` type.\n+<2> `javax.enterprise.inject.Instance` extends `Iterable`.\n+====\n+\n+== _Q: Can I use setter and constructor injection?_\n+\n+A: Yes, you can.\n+In fact, in CDI the \"setter injection\" is superseded by more powerful https://docs.jboss.org/cdi/spec/2.0/cdi-spec.html#initializer_methods[initializer methods, window=\"_blank\"].\n+Intializers may accept multiple parameters and don't have to follow the JavaBean naming conventions.\n+\n+.Initialized and Constructor Injection Example\n+[source,java]\n+----\n+@ApplicationScoped\n+public class Translator {\n+\n+    private final TranslatorHelper helper\n+\n+    Translator(TranslatorHelper helper) { <1>\n+       this.helper = helper;\n+    }\n+\n+    @Inject <2>\n+    void setDeps(Dictionary dic, LocalizationService locService) { <3>\n+      / ...\n+    }\n+}\n+----\n+<1> This is a constructor injection. In fact, this code would not work in regular CDI implementations where a bean with a normal scope must always declare a no-args constructor. In Quarkus we detect this problem and \"add\" such a constructor directly in the bytecode.\n+<2> An initializer method must be annotated with `@Inject`. \n+<3> An initializer may accept multiple parameters - each one is an injection point.\n+\n+== _Q: You talked about some qualifiers?_\n+\n+A: https://docs.jboss.org/cdi/spec/2.0/cdi-spec.html#qualifiers[Qualifiers, window=\"_blank\"] are annotations that help the container to distinguish beans that implement the same type.\n+As we already said a bean is assignable to an injection point if it has all the required qualifiers.\n+If you declare no qualifier at an injection point the `@Default` qualifier is assumed.\n+\n+.Bean With Custom Qualifier Example\n+[source,java]\n+----\n+@Superior <1>\n+@ApplicationScoped\n+public class SuperiorTranslator extends Translator {\n+\n+    String translate(String sentence) { \n+      // ...\n+    }\n+}\n+----\n+<1> `@Superior` is a https://docs.jboss.org/cdi/spec/2.0/cdi-spec.html#defining_qualifier_types[qualifier annotation, window=\"_blank\"].\n+\n+This bean would be assignable to `@Inject @Superior Translator` and `@Inject @Superior SuperiorTranslator` but not in `@Inject Translator`.\n+The reason is that `@Inject Translator` is automatically transformed to `@Inject @Default Translator` during typesafe resolution.\n+And since our `SuperiorTranslator` does not declare `@Default` only the original `Translator` bean is assignable.\n+\n+== _Q: Looks good. What is the bean scope?_\n+\n+The scope of a bean determines the lifecycle of its instances, i.e. when and where an instance should be created and destroyed.\n+\n+NOTE: Every bean has exactly one scope.\n+\n+== _Q: What scopes can I actually use in my Quarkus application?_\n+\n+A: You can use all the built-in scopes mentioned by the specification except for `javax.enterprise.context.ConversationScoped`.\n+\n+[options=\"header\",cols=\"1,1\"]\n+|===\n+|Annotation   |Description   \n+//----------------------\n+|`@javax.enterprise.context.ApplicationScoped`   | A single bean instance is used for the application and shared among all injection points. The instance is created lazily, i.e. once a method is invoked upon the <<client_proxies, client proxy>>. \n+|`@javax.inject.Singleton`   | Just like `@ApplicationScoped` except that no client proxy is used. The instance is created eagerly.\n+|`@javax.enterprise.context.RequestScoped`   | The bean instance is associated with the current _request_ (usually an HTTP request). \n+|`@javax.enterprise.context.Dependent`   | This is a pseudo-scope. There is no context object that holds all dependent instances. Instead, a dependent instace is a dependent object of the bean it is injected into.", "originalCommit": "63d155041a5447adba997da8577b662969847b05", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQwMTcyNQ==", "url": "https://github.com/quarkusio/quarkus/pull/10529#discussion_r451401725", "bodyText": "I would be a bit more verbose, for a CDI newbie I think your description won't be clear enough (maybe I am not giving them enough credit though :)):\nThis is a pseudo-scope. The instances are not shared and every injection point spawns a new instance of dependent bean. The lifecycle of dependent bean is bound to the bean injecting it - it will be created and destroyed along with the bean injecting it.", "author": "manovotn", "createdAt": "2020-07-08T09:16:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDk0NjQ5NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDk3NDkwOQ==", "url": "https://github.com/quarkusio/quarkus/pull/10529#discussion_r450974909", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            NOTE: There can be other custom scopes provided by Quarkus extension. For example, `qquarkus-narayana-jta` provides `javax.transaction.TransactionScoped`.\n          \n          \n            \n            NOTE: There can be other custom scopes provided by Quarkus extension. For example, `quarkus-narayana-jta` provides `javax.transaction.TransactionScoped`.", "author": "loicmathieu", "createdAt": "2020-07-07T16:00:53Z", "path": "docs/src/main/asciidoc/cdi.adoc", "diffHunk": "@@ -0,0 +1,361 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Introduction to Contexts and Dependency Injection\n+\n+include::./attributes.adoc[]\n+:numbered:\n+:sectnums:\n+:sectnumlevels: 4\n+:toc:\n+\n+In this guide we're going to describe the basic principles of the programming model used all over the Quarkus universe. \n+Quarkus programming model is based on the http://docs.jboss.org/cdi/spec/2.0/cdi-spec.html[Contexts and Dependency Injection for Java 2.0, window=\"_blank\"] specification.\n+However, a full CDI implementation is not used under the hood.\n+Quarkus only implements a subset of the CDI features - see also <<cdi-reference.adoc#supported_features,the list of supported features>> and <<cdi-reference.adoc#limitations,the list of limitations>>.\n+On the other hand, there are quite a few <<cdi-reference#nonstandard_features,non-standard features>> and <<cdi-reference.adoc#build_time_apis,Quarkus-specific APIs>>.\n+We believe that our efforts will drive the innovation of the CDI specification towards the build-time oriented developer stacks in the future.\n+\n+== _Q: OK. Let's start simple. What is a bean?_\n+\n+A: Well, a bean is a _container-managed_ object that supports a set of basic services, such as injection of dependencies, lifecycle callbacks and interceptors.\n+\n+== _Q: Wait a minute. What does it mean container-managed?_\n+\n+A: Simply put, you don't control the lifecycle of the object instance directly.\n+Instead, you can affect the lifecycle through the declarative means, such as annotations, configuration, etc.\n+The container is the _environment_ where your application runs.\n+It creates and destroys the instances of beans, associates the instances with a designated context, and injects them into other beans.\n+\n+== _Q: What is it good for?_\n+\n+A: An application developer can focus on the business logic rather than \"where and how\" to obtain a fully initialized component with all of its dependencies.\n+\n+NOTE: You've probably heard of the _inversion of control_ (IoC) programming principle. Dependency injection is one of the implementation techniques of IoC. \n+\n+== _Q: OK. And what does a bean look like?_\n+\n+A: There are several kinds of beans.\n+The most common ones are class-based beans:\n+\n+.Simple Bean Example\n+[source,java]\n+----\n+import javax.inject.Inject;\n+import javax.enterprise.context.ApplicationScoped;\n+import org.eclipse.microprofile.metrics.annotation.Counted;\n+\n+@ApplicationScoped <1>\n+public class Translator {\n+\n+    @Inject\n+    Dictionary dictionary; <2>\n+    \n+    @Counted  <3>\n+    String translate(String sentence) { \n+      // ...\n+    }\n+}\n+----\n+<1> This is a scope annotation. It tells the container which context to associate the bean instance with. In this particular case, a *single bean instance* is created for the application and used by all dependants.\n+<2> This is a field injection point. It tells the container that `Translator` depends on the `Dictionary` bean. If there is no matching bean the build fails.\n+<3> This is an interceptor binding annotation. In this case, the annotation comes from the MicroProfile Metrics. The relevant interceptor intercepts the invocation and updates the relevant metrics.\n+\n+== _Q: Nice. How does the dependency resolution work? I see no names or identifiers._\n+\n+A: That's a good question.\n+In CDI the process of matching a bean to an injection point is *type-safe*.\n+Each bean declares a set of bean types.\n+In our example above, the `Translator` bean has two bean types: `Translator` and `java.lang.Object`.\n+Subsequently, a bean is assignable to an injection point if the bean has a bean type that matches the _required type_ and has all the _required qualifiers_.\n+We'll talk about qualifiers later.\n+For now, it's enough to know that the bean above is assignable to an injection point of type `Translator` and `java.lang.Object`.\n+\n+== _Q: Hm, wait a minute. What happens if multiple beans declare the same type?_\n+\n+A: There is a simple rule: *exactly one bean must be assignable to an injection point, otherwise the build fails*.\n+If none is assignable the build fails with `UnsatisfiedResolutionException`.\n+If multiple are assignable the build fails with `AmbiguousResolutionException`.\n+This is very useful because your application fails fast whenever the container is not able to find an unambiguous dependency for any injection point.\n+\n+[TIP]\n+====\n+Your can use programmatic lookup via  `javax.enterprise.inject.Instance` to resolve ambiguities at runtime and even iterate over all beans implementing a given type:\n+\n+[source,java]\n+----\n+public class Translator {\n+\n+    @Inject\n+    Instance<Dictionary> dictionaries; <1>\n+    \n+    String translate(String sentence) { \n+      for (Dictionary dict : dictionaries) { <2>\n+         // ...\n+      }\n+    }\n+}\n+----\n+<1> This injection point will not result in an ambiguous dependency even if there are multiple beans that implement the `Dictionary` type.\n+<2> `javax.enterprise.inject.Instance` extends `Iterable`.\n+====\n+\n+== _Q: Can I use setter and constructor injection?_\n+\n+A: Yes, you can.\n+In fact, in CDI the \"setter injection\" is superseded by more powerful https://docs.jboss.org/cdi/spec/2.0/cdi-spec.html#initializer_methods[initializer methods, window=\"_blank\"].\n+Intializers may accept multiple parameters and don't have to follow the JavaBean naming conventions.\n+\n+.Initialized and Constructor Injection Example\n+[source,java]\n+----\n+@ApplicationScoped\n+public class Translator {\n+\n+    private final TranslatorHelper helper\n+\n+    Translator(TranslatorHelper helper) { <1>\n+       this.helper = helper;\n+    }\n+\n+    @Inject <2>\n+    void setDeps(Dictionary dic, LocalizationService locService) { <3>\n+      / ...\n+    }\n+}\n+----\n+<1> This is a constructor injection. In fact, this code would not work in regular CDI implementations where a bean with a normal scope must always declare a no-args constructor. In Quarkus we detect this problem and \"add\" such a constructor directly in the bytecode.\n+<2> An initializer method must be annotated with `@Inject`. \n+<3> An initializer may accept multiple parameters - each one is an injection point.\n+\n+== _Q: You talked about some qualifiers?_\n+\n+A: https://docs.jboss.org/cdi/spec/2.0/cdi-spec.html#qualifiers[Qualifiers, window=\"_blank\"] are annotations that help the container to distinguish beans that implement the same type.\n+As we already said a bean is assignable to an injection point if it has all the required qualifiers.\n+If you declare no qualifier at an injection point the `@Default` qualifier is assumed.\n+\n+.Bean With Custom Qualifier Example\n+[source,java]\n+----\n+@Superior <1>\n+@ApplicationScoped\n+public class SuperiorTranslator extends Translator {\n+\n+    String translate(String sentence) { \n+      // ...\n+    }\n+}\n+----\n+<1> `@Superior` is a https://docs.jboss.org/cdi/spec/2.0/cdi-spec.html#defining_qualifier_types[qualifier annotation, window=\"_blank\"].\n+\n+This bean would be assignable to `@Inject @Superior Translator` and `@Inject @Superior SuperiorTranslator` but not in `@Inject Translator`.\n+The reason is that `@Inject Translator` is automatically transformed to `@Inject @Default Translator` during typesafe resolution.\n+And since our `SuperiorTranslator` does not declare `@Default` only the original `Translator` bean is assignable.\n+\n+== _Q: Looks good. What is the bean scope?_\n+\n+The scope of a bean determines the lifecycle of its instances, i.e. when and where an instance should be created and destroyed.\n+\n+NOTE: Every bean has exactly one scope.\n+\n+== _Q: What scopes can I actually use in my Quarkus application?_\n+\n+A: You can use all the built-in scopes mentioned by the specification except for `javax.enterprise.context.ConversationScoped`.\n+\n+[options=\"header\",cols=\"1,1\"]\n+|===\n+|Annotation   |Description   \n+//----------------------\n+|`@javax.enterprise.context.ApplicationScoped`   | A single bean instance is used for the application and shared among all injection points. The instance is created lazily, i.e. once a method is invoked upon the <<client_proxies, client proxy>>. \n+|`@javax.inject.Singleton`   | Just like `@ApplicationScoped` except that no client proxy is used. The instance is created eagerly.\n+|`@javax.enterprise.context.RequestScoped`   | The bean instance is associated with the current _request_ (usually an HTTP request). \n+|`@javax.enterprise.context.Dependent`   | This is a pseudo-scope. There is no context object that holds all dependent instances. Instead, a dependent instace is a dependent object of the bean it is injected into.\n+|`@javax.enterprise.context.SessionScoped`   | This scope is backed by an `javax.servlet.http.HttpSession` object. It's only available if `quarkus-undertow` extension is used.\n+|===\n+\n+NOTE: There can be other custom scopes provided by Quarkus extension. For example, `qquarkus-narayana-jta` provides `javax.transaction.TransactionScoped`.", "originalCommit": "63d155041a5447adba997da8577b662969847b05", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDk3NTk4Ng==", "url": "https://github.com/quarkusio/quarkus/pull/10529#discussion_r450975986", "bodyText": "contextual instance: maybe find a more straightforward term: instead of an object of the bean class.", "author": "loicmathieu", "createdAt": "2020-07-07T16:02:29Z", "path": "docs/src/main/asciidoc/cdi.adoc", "diffHunk": "@@ -0,0 +1,361 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Introduction to Contexts and Dependency Injection\n+\n+include::./attributes.adoc[]\n+:numbered:\n+:sectnums:\n+:sectnumlevels: 4\n+:toc:\n+\n+In this guide we're going to describe the basic principles of the programming model used all over the Quarkus universe. \n+Quarkus programming model is based on the http://docs.jboss.org/cdi/spec/2.0/cdi-spec.html[Contexts and Dependency Injection for Java 2.0, window=\"_blank\"] specification.\n+However, a full CDI implementation is not used under the hood.\n+Quarkus only implements a subset of the CDI features - see also <<cdi-reference.adoc#supported_features,the list of supported features>> and <<cdi-reference.adoc#limitations,the list of limitations>>.\n+On the other hand, there are quite a few <<cdi-reference#nonstandard_features,non-standard features>> and <<cdi-reference.adoc#build_time_apis,Quarkus-specific APIs>>.\n+We believe that our efforts will drive the innovation of the CDI specification towards the build-time oriented developer stacks in the future.\n+\n+== _Q: OK. Let's start simple. What is a bean?_\n+\n+A: Well, a bean is a _container-managed_ object that supports a set of basic services, such as injection of dependencies, lifecycle callbacks and interceptors.\n+\n+== _Q: Wait a minute. What does it mean container-managed?_\n+\n+A: Simply put, you don't control the lifecycle of the object instance directly.\n+Instead, you can affect the lifecycle through the declarative means, such as annotations, configuration, etc.\n+The container is the _environment_ where your application runs.\n+It creates and destroys the instances of beans, associates the instances with a designated context, and injects them into other beans.\n+\n+== _Q: What is it good for?_\n+\n+A: An application developer can focus on the business logic rather than \"where and how\" to obtain a fully initialized component with all of its dependencies.\n+\n+NOTE: You've probably heard of the _inversion of control_ (IoC) programming principle. Dependency injection is one of the implementation techniques of IoC. \n+\n+== _Q: OK. And what does a bean look like?_\n+\n+A: There are several kinds of beans.\n+The most common ones are class-based beans:\n+\n+.Simple Bean Example\n+[source,java]\n+----\n+import javax.inject.Inject;\n+import javax.enterprise.context.ApplicationScoped;\n+import org.eclipse.microprofile.metrics.annotation.Counted;\n+\n+@ApplicationScoped <1>\n+public class Translator {\n+\n+    @Inject\n+    Dictionary dictionary; <2>\n+    \n+    @Counted  <3>\n+    String translate(String sentence) { \n+      // ...\n+    }\n+}\n+----\n+<1> This is a scope annotation. It tells the container which context to associate the bean instance with. In this particular case, a *single bean instance* is created for the application and used by all dependants.\n+<2> This is a field injection point. It tells the container that `Translator` depends on the `Dictionary` bean. If there is no matching bean the build fails.\n+<3> This is an interceptor binding annotation. In this case, the annotation comes from the MicroProfile Metrics. The relevant interceptor intercepts the invocation and updates the relevant metrics.\n+\n+== _Q: Nice. How does the dependency resolution work? I see no names or identifiers._\n+\n+A: That's a good question.\n+In CDI the process of matching a bean to an injection point is *type-safe*.\n+Each bean declares a set of bean types.\n+In our example above, the `Translator` bean has two bean types: `Translator` and `java.lang.Object`.\n+Subsequently, a bean is assignable to an injection point if the bean has a bean type that matches the _required type_ and has all the _required qualifiers_.\n+We'll talk about qualifiers later.\n+For now, it's enough to know that the bean above is assignable to an injection point of type `Translator` and `java.lang.Object`.\n+\n+== _Q: Hm, wait a minute. What happens if multiple beans declare the same type?_\n+\n+A: There is a simple rule: *exactly one bean must be assignable to an injection point, otherwise the build fails*.\n+If none is assignable the build fails with `UnsatisfiedResolutionException`.\n+If multiple are assignable the build fails with `AmbiguousResolutionException`.\n+This is very useful because your application fails fast whenever the container is not able to find an unambiguous dependency for any injection point.\n+\n+[TIP]\n+====\n+Your can use programmatic lookup via  `javax.enterprise.inject.Instance` to resolve ambiguities at runtime and even iterate over all beans implementing a given type:\n+\n+[source,java]\n+----\n+public class Translator {\n+\n+    @Inject\n+    Instance<Dictionary> dictionaries; <1>\n+    \n+    String translate(String sentence) { \n+      for (Dictionary dict : dictionaries) { <2>\n+         // ...\n+      }\n+    }\n+}\n+----\n+<1> This injection point will not result in an ambiguous dependency even if there are multiple beans that implement the `Dictionary` type.\n+<2> `javax.enterprise.inject.Instance` extends `Iterable`.\n+====\n+\n+== _Q: Can I use setter and constructor injection?_\n+\n+A: Yes, you can.\n+In fact, in CDI the \"setter injection\" is superseded by more powerful https://docs.jboss.org/cdi/spec/2.0/cdi-spec.html#initializer_methods[initializer methods, window=\"_blank\"].\n+Intializers may accept multiple parameters and don't have to follow the JavaBean naming conventions.\n+\n+.Initialized and Constructor Injection Example\n+[source,java]\n+----\n+@ApplicationScoped\n+public class Translator {\n+\n+    private final TranslatorHelper helper\n+\n+    Translator(TranslatorHelper helper) { <1>\n+       this.helper = helper;\n+    }\n+\n+    @Inject <2>\n+    void setDeps(Dictionary dic, LocalizationService locService) { <3>\n+      / ...\n+    }\n+}\n+----\n+<1> This is a constructor injection. In fact, this code would not work in regular CDI implementations where a bean with a normal scope must always declare a no-args constructor. In Quarkus we detect this problem and \"add\" such a constructor directly in the bytecode.\n+<2> An initializer method must be annotated with `@Inject`. \n+<3> An initializer may accept multiple parameters - each one is an injection point.\n+\n+== _Q: You talked about some qualifiers?_\n+\n+A: https://docs.jboss.org/cdi/spec/2.0/cdi-spec.html#qualifiers[Qualifiers, window=\"_blank\"] are annotations that help the container to distinguish beans that implement the same type.\n+As we already said a bean is assignable to an injection point if it has all the required qualifiers.\n+If you declare no qualifier at an injection point the `@Default` qualifier is assumed.\n+\n+.Bean With Custom Qualifier Example\n+[source,java]\n+----\n+@Superior <1>\n+@ApplicationScoped\n+public class SuperiorTranslator extends Translator {\n+\n+    String translate(String sentence) { \n+      // ...\n+    }\n+}\n+----\n+<1> `@Superior` is a https://docs.jboss.org/cdi/spec/2.0/cdi-spec.html#defining_qualifier_types[qualifier annotation, window=\"_blank\"].\n+\n+This bean would be assignable to `@Inject @Superior Translator` and `@Inject @Superior SuperiorTranslator` but not in `@Inject Translator`.\n+The reason is that `@Inject Translator` is automatically transformed to `@Inject @Default Translator` during typesafe resolution.\n+And since our `SuperiorTranslator` does not declare `@Default` only the original `Translator` bean is assignable.\n+\n+== _Q: Looks good. What is the bean scope?_\n+\n+The scope of a bean determines the lifecycle of its instances, i.e. when and where an instance should be created and destroyed.\n+\n+NOTE: Every bean has exactly one scope.\n+\n+== _Q: What scopes can I actually use in my Quarkus application?_\n+\n+A: You can use all the built-in scopes mentioned by the specification except for `javax.enterprise.context.ConversationScoped`.\n+\n+[options=\"header\",cols=\"1,1\"]\n+|===\n+|Annotation   |Description   \n+//----------------------\n+|`@javax.enterprise.context.ApplicationScoped`   | A single bean instance is used for the application and shared among all injection points. The instance is created lazily, i.e. once a method is invoked upon the <<client_proxies, client proxy>>. \n+|`@javax.inject.Singleton`   | Just like `@ApplicationScoped` except that no client proxy is used. The instance is created eagerly.\n+|`@javax.enterprise.context.RequestScoped`   | The bean instance is associated with the current _request_ (usually an HTTP request). \n+|`@javax.enterprise.context.Dependent`   | This is a pseudo-scope. There is no context object that holds all dependent instances. Instead, a dependent instace is a dependent object of the bean it is injected into.\n+|`@javax.enterprise.context.SessionScoped`   | This scope is backed by an `javax.servlet.http.HttpSession` object. It's only available if `quarkus-undertow` extension is used.\n+|===\n+\n+NOTE: There can be other custom scopes provided by Quarkus extension. For example, `qquarkus-narayana-jta` provides `javax.transaction.TransactionScoped`.\n+\n+[[client_proxies]]\n+== _Q: I don't undestand the concept of client proxies._\n+\n+Indeed, the https://docs.jboss.org/cdi/spec/2.0/cdi-spec.html#client_proxies[client proxies, window=\"_blank\"] could be hard to grasp but they provide some useful functionality.\n+A client proxy is basically an object that delegates all method invocations to a target bean instance.\n+It's a container construct that implements `io.quarkus.arc.ClientProxy` and extends the bean class.\n+The client proxy instance is always injected instead of a contextual instance of a normal scoped bean (e.g. `@ApplicationScoped` and `@RequestScoped`).", "originalCommit": "63d155041a5447adba997da8577b662969847b05", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQwNDMyMw==", "url": "https://github.com/quarkusio/quarkus/pull/10529#discussion_r451404323", "bodyText": "contextual instance is a term used within CDI spec. I think it is good to introduce it so that the reader understands it if they decide to open the specification.", "author": "manovotn", "createdAt": "2020-07-08T09:21:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDk3NTk4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQzNjY5OQ==", "url": "https://github.com/quarkusio/quarkus/pull/10529#discussion_r451436699", "bodyText": "Hm, \"contextual instance\" is actually a well-defined term from the spec. \"object of the bean class\" is not always true because for intercepted beans it's actually an instance of a container construct (bean class subclass). I cann add a link to the spec plus show a generated client proxy pseudocode. As I said it's hard to find the balance ;-)", "author": "mkouba", "createdAt": "2020-07-08T10:17:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDk3NTk4Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDk3NzgyNg==", "url": "https://github.com/quarkusio/quarkus/pull/10529#discussion_r450977826", "bodyText": "As it didn't target developers, maybe don't introduce them ? It's and introduction guide we don't need to cover everything", "author": "loicmathieu", "createdAt": "2020-07-07T16:05:22Z", "path": "docs/src/main/asciidoc/cdi.adoc", "diffHunk": "@@ -0,0 +1,361 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Introduction to Contexts and Dependency Injection\n+\n+include::./attributes.adoc[]\n+:numbered:\n+:sectnums:\n+:sectnumlevels: 4\n+:toc:\n+\n+In this guide we're going to describe the basic principles of the programming model used all over the Quarkus universe. \n+Quarkus programming model is based on the http://docs.jboss.org/cdi/spec/2.0/cdi-spec.html[Contexts and Dependency Injection for Java 2.0, window=\"_blank\"] specification.\n+However, a full CDI implementation is not used under the hood.\n+Quarkus only implements a subset of the CDI features - see also <<cdi-reference.adoc#supported_features,the list of supported features>> and <<cdi-reference.adoc#limitations,the list of limitations>>.\n+On the other hand, there are quite a few <<cdi-reference#nonstandard_features,non-standard features>> and <<cdi-reference.adoc#build_time_apis,Quarkus-specific APIs>>.\n+We believe that our efforts will drive the innovation of the CDI specification towards the build-time oriented developer stacks in the future.\n+\n+== _Q: OK. Let's start simple. What is a bean?_\n+\n+A: Well, a bean is a _container-managed_ object that supports a set of basic services, such as injection of dependencies, lifecycle callbacks and interceptors.\n+\n+== _Q: Wait a minute. What does it mean container-managed?_\n+\n+A: Simply put, you don't control the lifecycle of the object instance directly.\n+Instead, you can affect the lifecycle through the declarative means, such as annotations, configuration, etc.\n+The container is the _environment_ where your application runs.\n+It creates and destroys the instances of beans, associates the instances with a designated context, and injects them into other beans.\n+\n+== _Q: What is it good for?_\n+\n+A: An application developer can focus on the business logic rather than \"where and how\" to obtain a fully initialized component with all of its dependencies.\n+\n+NOTE: You've probably heard of the _inversion of control_ (IoC) programming principle. Dependency injection is one of the implementation techniques of IoC. \n+\n+== _Q: OK. And what does a bean look like?_\n+\n+A: There are several kinds of beans.\n+The most common ones are class-based beans:\n+\n+.Simple Bean Example\n+[source,java]\n+----\n+import javax.inject.Inject;\n+import javax.enterprise.context.ApplicationScoped;\n+import org.eclipse.microprofile.metrics.annotation.Counted;\n+\n+@ApplicationScoped <1>\n+public class Translator {\n+\n+    @Inject\n+    Dictionary dictionary; <2>\n+    \n+    @Counted  <3>\n+    String translate(String sentence) { \n+      // ...\n+    }\n+}\n+----\n+<1> This is a scope annotation. It tells the container which context to associate the bean instance with. In this particular case, a *single bean instance* is created for the application and used by all dependants.\n+<2> This is a field injection point. It tells the container that `Translator` depends on the `Dictionary` bean. If there is no matching bean the build fails.\n+<3> This is an interceptor binding annotation. In this case, the annotation comes from the MicroProfile Metrics. The relevant interceptor intercepts the invocation and updates the relevant metrics.\n+\n+== _Q: Nice. How does the dependency resolution work? I see no names or identifiers._\n+\n+A: That's a good question.\n+In CDI the process of matching a bean to an injection point is *type-safe*.\n+Each bean declares a set of bean types.\n+In our example above, the `Translator` bean has two bean types: `Translator` and `java.lang.Object`.\n+Subsequently, a bean is assignable to an injection point if the bean has a bean type that matches the _required type_ and has all the _required qualifiers_.\n+We'll talk about qualifiers later.\n+For now, it's enough to know that the bean above is assignable to an injection point of type `Translator` and `java.lang.Object`.\n+\n+== _Q: Hm, wait a minute. What happens if multiple beans declare the same type?_\n+\n+A: There is a simple rule: *exactly one bean must be assignable to an injection point, otherwise the build fails*.\n+If none is assignable the build fails with `UnsatisfiedResolutionException`.\n+If multiple are assignable the build fails with `AmbiguousResolutionException`.\n+This is very useful because your application fails fast whenever the container is not able to find an unambiguous dependency for any injection point.\n+\n+[TIP]\n+====\n+Your can use programmatic lookup via  `javax.enterprise.inject.Instance` to resolve ambiguities at runtime and even iterate over all beans implementing a given type:\n+\n+[source,java]\n+----\n+public class Translator {\n+\n+    @Inject\n+    Instance<Dictionary> dictionaries; <1>\n+    \n+    String translate(String sentence) { \n+      for (Dictionary dict : dictionaries) { <2>\n+         // ...\n+      }\n+    }\n+}\n+----\n+<1> This injection point will not result in an ambiguous dependency even if there are multiple beans that implement the `Dictionary` type.\n+<2> `javax.enterprise.inject.Instance` extends `Iterable`.\n+====\n+\n+== _Q: Can I use setter and constructor injection?_\n+\n+A: Yes, you can.\n+In fact, in CDI the \"setter injection\" is superseded by more powerful https://docs.jboss.org/cdi/spec/2.0/cdi-spec.html#initializer_methods[initializer methods, window=\"_blank\"].\n+Intializers may accept multiple parameters and don't have to follow the JavaBean naming conventions.\n+\n+.Initialized and Constructor Injection Example\n+[source,java]\n+----\n+@ApplicationScoped\n+public class Translator {\n+\n+    private final TranslatorHelper helper\n+\n+    Translator(TranslatorHelper helper) { <1>\n+       this.helper = helper;\n+    }\n+\n+    @Inject <2>\n+    void setDeps(Dictionary dic, LocalizationService locService) { <3>\n+      / ...\n+    }\n+}\n+----\n+<1> This is a constructor injection. In fact, this code would not work in regular CDI implementations where a bean with a normal scope must always declare a no-args constructor. In Quarkus we detect this problem and \"add\" such a constructor directly in the bytecode.\n+<2> An initializer method must be annotated with `@Inject`. \n+<3> An initializer may accept multiple parameters - each one is an injection point.\n+\n+== _Q: You talked about some qualifiers?_\n+\n+A: https://docs.jboss.org/cdi/spec/2.0/cdi-spec.html#qualifiers[Qualifiers, window=\"_blank\"] are annotations that help the container to distinguish beans that implement the same type.\n+As we already said a bean is assignable to an injection point if it has all the required qualifiers.\n+If you declare no qualifier at an injection point the `@Default` qualifier is assumed.\n+\n+.Bean With Custom Qualifier Example\n+[source,java]\n+----\n+@Superior <1>\n+@ApplicationScoped\n+public class SuperiorTranslator extends Translator {\n+\n+    String translate(String sentence) { \n+      // ...\n+    }\n+}\n+----\n+<1> `@Superior` is a https://docs.jboss.org/cdi/spec/2.0/cdi-spec.html#defining_qualifier_types[qualifier annotation, window=\"_blank\"].\n+\n+This bean would be assignable to `@Inject @Superior Translator` and `@Inject @Superior SuperiorTranslator` but not in `@Inject Translator`.\n+The reason is that `@Inject Translator` is automatically transformed to `@Inject @Default Translator` during typesafe resolution.\n+And since our `SuperiorTranslator` does not declare `@Default` only the original `Translator` bean is assignable.\n+\n+== _Q: Looks good. What is the bean scope?_\n+\n+The scope of a bean determines the lifecycle of its instances, i.e. when and where an instance should be created and destroyed.\n+\n+NOTE: Every bean has exactly one scope.\n+\n+== _Q: What scopes can I actually use in my Quarkus application?_\n+\n+A: You can use all the built-in scopes mentioned by the specification except for `javax.enterprise.context.ConversationScoped`.\n+\n+[options=\"header\",cols=\"1,1\"]\n+|===\n+|Annotation   |Description   \n+//----------------------\n+|`@javax.enterprise.context.ApplicationScoped`   | A single bean instance is used for the application and shared among all injection points. The instance is created lazily, i.e. once a method is invoked upon the <<client_proxies, client proxy>>. \n+|`@javax.inject.Singleton`   | Just like `@ApplicationScoped` except that no client proxy is used. The instance is created eagerly.\n+|`@javax.enterprise.context.RequestScoped`   | The bean instance is associated with the current _request_ (usually an HTTP request). \n+|`@javax.enterprise.context.Dependent`   | This is a pseudo-scope. There is no context object that holds all dependent instances. Instead, a dependent instace is a dependent object of the bean it is injected into.\n+|`@javax.enterprise.context.SessionScoped`   | This scope is backed by an `javax.servlet.http.HttpSession` object. It's only available if `quarkus-undertow` extension is used.\n+|===\n+\n+NOTE: There can be other custom scopes provided by Quarkus extension. For example, `qquarkus-narayana-jta` provides `javax.transaction.TransactionScoped`.\n+\n+[[client_proxies]]\n+== _Q: I don't undestand the concept of client proxies._\n+\n+Indeed, the https://docs.jboss.org/cdi/spec/2.0/cdi-spec.html#client_proxies[client proxies, window=\"_blank\"] could be hard to grasp but they provide some useful functionality.\n+A client proxy is basically an object that delegates all method invocations to a target bean instance.\n+It's a container construct that implements `io.quarkus.arc.ClientProxy` and extends the bean class.\n+The client proxy instance is always injected instead of a contextual instance of a normal scoped bean (e.g. `@ApplicationScoped` and `@RequestScoped`).\n+Client proxies allow for:\n+\n+* Lazy instantiation - the instance is created once a method is invoked upon the proxy.\n+* Ability to inject a bean with \"narrower\" scope to a bean with \"wider\" scope; i.e. you can inject a `@RequestScoped` bean into an `@ApplicationScoped` bean.\n+* Circular dependencies in the dependency graph. Circular dependencies are \"bad design\" but sometimes they're inevitable. \n+* In rare cases it's practical to destroy the beans manually. A direct injected reference would lead to a stale bean instance.\n+ \n+ \n+== _Q: OK. You said that there are several kinds of beans?_\n+\n+A: Yes. In general, in Quarkus we distinguish:\n+\n+1. Class beans\n+2. Producer methods\n+3. Producer fields\n+4. Synthetic beans\n+\n+Producer methods are useful if you need additional control over instantiation of a bean.\n+They are also useful when integrating third-party libraries where you don't control the class source and may not add additional annotations etc.\n+\n+.Producer Method Example\n+[source,java]\n+----\n+@ApplicationScoped\n+public class PiProducer {\n+\n+    @Produces <1>\n+    double producePi() { \n+       return Math.PI; <2>\n+    }\n+}\n+\n+@ApplicationScoped\n+public class PiConsumer {\n+\n+   @Inject\n+   double pi; <3>\n+   \n+   double twoPis() {\n+     return pi * 2;\n+   }\n+} \n+----\n+<1> The container analyses the method annotations to build a bean metadata.\n+The return type is used to build the set of bean types. \n+In this case, it will be `double` and `java.lang.Object`.\n+No scope annotation is declared and so it's defaulted to `@Dependent`.\n+<2> The container will delegate to this method when creating the bean instance.\n+<3> `PiProducer#producePi()` is invoked and the result is set to `PiConsumer#pi` when the `PiConsumer` instance is created.\n+\n+NOTE: One of the limitations of producers is that interceptors are not applied to the result of a producer method/field.\n+\n+Producer fields are very similar to producer methods except that the field value is read when obtaining a bean instance.\n+\n+TIP: There's more about producers. You can declare qualifiers, inject dependencies into the producer methods parameters, etc. You can read more about producers for example in the https://docs.jboss.org/weld/reference/latest/en-US/html/beanscdi.html#_producer_methods[Weld docs, window=\"_blank\"].\n+\n+Synthetic beans are usually provided by extensions.\n+A synthetic bean is not backed by a class/method/field.\n+Application developers usually only consume this kind of beans.", "originalCommit": "63d155041a5447adba997da8577b662969847b05", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTAwNTUzNw==", "url": "https://github.com/quarkusio/quarkus/pull/10529#discussion_r451005537", "bodyText": "Yeah, I think they shouldn't be introduced here.", "author": "gsmet", "createdAt": "2020-07-07T16:49:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDk3NzgyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQwOTgxOA==", "url": "https://github.com/quarkusio/quarkus/pull/10529#discussion_r451409818", "bodyText": "I am biased about it. On one hand developers only consume them, OTOH they need to know they exist otherwise they will keep seeing injection of beans that have no classes/producers backing them and are seemingly conjured out of thin air.", "author": "manovotn", "createdAt": "2020-07-08T09:30:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDk3NzgyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQzNzUwMA==", "url": "https://github.com/quarkusio/quarkus/pull/10529#discussion_r451437500", "bodyText": "+1", "author": "mkouba", "createdAt": "2020-07-08T10:19:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDk3NzgyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQ0MDY1Ng==", "url": "https://github.com/quarkusio/quarkus/pull/10529#discussion_r451440656", "bodyText": "I only added a note to the list...", "author": "mkouba", "createdAt": "2020-07-08T10:25:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDk3NzgyNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDk3ODQ1Nw==", "url": "https://github.com/quarkusio/quarkus/pull/10529#discussion_r450978457", "bodyText": "Maybe add a note that Quarkus support custom callback global to the application via https://quarkus.io/guides/lifecycle ?", "author": "loicmathieu", "createdAt": "2020-07-07T16:06:22Z", "path": "docs/src/main/asciidoc/cdi.adoc", "diffHunk": "@@ -0,0 +1,361 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Introduction to Contexts and Dependency Injection\n+\n+include::./attributes.adoc[]\n+:numbered:\n+:sectnums:\n+:sectnumlevels: 4\n+:toc:\n+\n+In this guide we're going to describe the basic principles of the programming model used all over the Quarkus universe. \n+Quarkus programming model is based on the http://docs.jboss.org/cdi/spec/2.0/cdi-spec.html[Contexts and Dependency Injection for Java 2.0, window=\"_blank\"] specification.\n+However, a full CDI implementation is not used under the hood.\n+Quarkus only implements a subset of the CDI features - see also <<cdi-reference.adoc#supported_features,the list of supported features>> and <<cdi-reference.adoc#limitations,the list of limitations>>.\n+On the other hand, there are quite a few <<cdi-reference#nonstandard_features,non-standard features>> and <<cdi-reference.adoc#build_time_apis,Quarkus-specific APIs>>.\n+We believe that our efforts will drive the innovation of the CDI specification towards the build-time oriented developer stacks in the future.\n+\n+== _Q: OK. Let's start simple. What is a bean?_\n+\n+A: Well, a bean is a _container-managed_ object that supports a set of basic services, such as injection of dependencies, lifecycle callbacks and interceptors.\n+\n+== _Q: Wait a minute. What does it mean container-managed?_\n+\n+A: Simply put, you don't control the lifecycle of the object instance directly.\n+Instead, you can affect the lifecycle through the declarative means, such as annotations, configuration, etc.\n+The container is the _environment_ where your application runs.\n+It creates and destroys the instances of beans, associates the instances with a designated context, and injects them into other beans.\n+\n+== _Q: What is it good for?_\n+\n+A: An application developer can focus on the business logic rather than \"where and how\" to obtain a fully initialized component with all of its dependencies.\n+\n+NOTE: You've probably heard of the _inversion of control_ (IoC) programming principle. Dependency injection is one of the implementation techniques of IoC. \n+\n+== _Q: OK. And what does a bean look like?_\n+\n+A: There are several kinds of beans.\n+The most common ones are class-based beans:\n+\n+.Simple Bean Example\n+[source,java]\n+----\n+import javax.inject.Inject;\n+import javax.enterprise.context.ApplicationScoped;\n+import org.eclipse.microprofile.metrics.annotation.Counted;\n+\n+@ApplicationScoped <1>\n+public class Translator {\n+\n+    @Inject\n+    Dictionary dictionary; <2>\n+    \n+    @Counted  <3>\n+    String translate(String sentence) { \n+      // ...\n+    }\n+}\n+----\n+<1> This is a scope annotation. It tells the container which context to associate the bean instance with. In this particular case, a *single bean instance* is created for the application and used by all dependants.\n+<2> This is a field injection point. It tells the container that `Translator` depends on the `Dictionary` bean. If there is no matching bean the build fails.\n+<3> This is an interceptor binding annotation. In this case, the annotation comes from the MicroProfile Metrics. The relevant interceptor intercepts the invocation and updates the relevant metrics.\n+\n+== _Q: Nice. How does the dependency resolution work? I see no names or identifiers._\n+\n+A: That's a good question.\n+In CDI the process of matching a bean to an injection point is *type-safe*.\n+Each bean declares a set of bean types.\n+In our example above, the `Translator` bean has two bean types: `Translator` and `java.lang.Object`.\n+Subsequently, a bean is assignable to an injection point if the bean has a bean type that matches the _required type_ and has all the _required qualifiers_.\n+We'll talk about qualifiers later.\n+For now, it's enough to know that the bean above is assignable to an injection point of type `Translator` and `java.lang.Object`.\n+\n+== _Q: Hm, wait a minute. What happens if multiple beans declare the same type?_\n+\n+A: There is a simple rule: *exactly one bean must be assignable to an injection point, otherwise the build fails*.\n+If none is assignable the build fails with `UnsatisfiedResolutionException`.\n+If multiple are assignable the build fails with `AmbiguousResolutionException`.\n+This is very useful because your application fails fast whenever the container is not able to find an unambiguous dependency for any injection point.\n+\n+[TIP]\n+====\n+Your can use programmatic lookup via  `javax.enterprise.inject.Instance` to resolve ambiguities at runtime and even iterate over all beans implementing a given type:\n+\n+[source,java]\n+----\n+public class Translator {\n+\n+    @Inject\n+    Instance<Dictionary> dictionaries; <1>\n+    \n+    String translate(String sentence) { \n+      for (Dictionary dict : dictionaries) { <2>\n+         // ...\n+      }\n+    }\n+}\n+----\n+<1> This injection point will not result in an ambiguous dependency even if there are multiple beans that implement the `Dictionary` type.\n+<2> `javax.enterprise.inject.Instance` extends `Iterable`.\n+====\n+\n+== _Q: Can I use setter and constructor injection?_\n+\n+A: Yes, you can.\n+In fact, in CDI the \"setter injection\" is superseded by more powerful https://docs.jboss.org/cdi/spec/2.0/cdi-spec.html#initializer_methods[initializer methods, window=\"_blank\"].\n+Intializers may accept multiple parameters and don't have to follow the JavaBean naming conventions.\n+\n+.Initialized and Constructor Injection Example\n+[source,java]\n+----\n+@ApplicationScoped\n+public class Translator {\n+\n+    private final TranslatorHelper helper\n+\n+    Translator(TranslatorHelper helper) { <1>\n+       this.helper = helper;\n+    }\n+\n+    @Inject <2>\n+    void setDeps(Dictionary dic, LocalizationService locService) { <3>\n+      / ...\n+    }\n+}\n+----\n+<1> This is a constructor injection. In fact, this code would not work in regular CDI implementations where a bean with a normal scope must always declare a no-args constructor. In Quarkus we detect this problem and \"add\" such a constructor directly in the bytecode.\n+<2> An initializer method must be annotated with `@Inject`. \n+<3> An initializer may accept multiple parameters - each one is an injection point.\n+\n+== _Q: You talked about some qualifiers?_\n+\n+A: https://docs.jboss.org/cdi/spec/2.0/cdi-spec.html#qualifiers[Qualifiers, window=\"_blank\"] are annotations that help the container to distinguish beans that implement the same type.\n+As we already said a bean is assignable to an injection point if it has all the required qualifiers.\n+If you declare no qualifier at an injection point the `@Default` qualifier is assumed.\n+\n+.Bean With Custom Qualifier Example\n+[source,java]\n+----\n+@Superior <1>\n+@ApplicationScoped\n+public class SuperiorTranslator extends Translator {\n+\n+    String translate(String sentence) { \n+      // ...\n+    }\n+}\n+----\n+<1> `@Superior` is a https://docs.jboss.org/cdi/spec/2.0/cdi-spec.html#defining_qualifier_types[qualifier annotation, window=\"_blank\"].\n+\n+This bean would be assignable to `@Inject @Superior Translator` and `@Inject @Superior SuperiorTranslator` but not in `@Inject Translator`.\n+The reason is that `@Inject Translator` is automatically transformed to `@Inject @Default Translator` during typesafe resolution.\n+And since our `SuperiorTranslator` does not declare `@Default` only the original `Translator` bean is assignable.\n+\n+== _Q: Looks good. What is the bean scope?_\n+\n+The scope of a bean determines the lifecycle of its instances, i.e. when and where an instance should be created and destroyed.\n+\n+NOTE: Every bean has exactly one scope.\n+\n+== _Q: What scopes can I actually use in my Quarkus application?_\n+\n+A: You can use all the built-in scopes mentioned by the specification except for `javax.enterprise.context.ConversationScoped`.\n+\n+[options=\"header\",cols=\"1,1\"]\n+|===\n+|Annotation   |Description   \n+//----------------------\n+|`@javax.enterprise.context.ApplicationScoped`   | A single bean instance is used for the application and shared among all injection points. The instance is created lazily, i.e. once a method is invoked upon the <<client_proxies, client proxy>>. \n+|`@javax.inject.Singleton`   | Just like `@ApplicationScoped` except that no client proxy is used. The instance is created eagerly.\n+|`@javax.enterprise.context.RequestScoped`   | The bean instance is associated with the current _request_ (usually an HTTP request). \n+|`@javax.enterprise.context.Dependent`   | This is a pseudo-scope. There is no context object that holds all dependent instances. Instead, a dependent instace is a dependent object of the bean it is injected into.\n+|`@javax.enterprise.context.SessionScoped`   | This scope is backed by an `javax.servlet.http.HttpSession` object. It's only available if `quarkus-undertow` extension is used.\n+|===\n+\n+NOTE: There can be other custom scopes provided by Quarkus extension. For example, `qquarkus-narayana-jta` provides `javax.transaction.TransactionScoped`.\n+\n+[[client_proxies]]\n+== _Q: I don't undestand the concept of client proxies._\n+\n+Indeed, the https://docs.jboss.org/cdi/spec/2.0/cdi-spec.html#client_proxies[client proxies, window=\"_blank\"] could be hard to grasp but they provide some useful functionality.\n+A client proxy is basically an object that delegates all method invocations to a target bean instance.\n+It's a container construct that implements `io.quarkus.arc.ClientProxy` and extends the bean class.\n+The client proxy instance is always injected instead of a contextual instance of a normal scoped bean (e.g. `@ApplicationScoped` and `@RequestScoped`).\n+Client proxies allow for:\n+\n+* Lazy instantiation - the instance is created once a method is invoked upon the proxy.\n+* Ability to inject a bean with \"narrower\" scope to a bean with \"wider\" scope; i.e. you can inject a `@RequestScoped` bean into an `@ApplicationScoped` bean.\n+* Circular dependencies in the dependency graph. Circular dependencies are \"bad design\" but sometimes they're inevitable. \n+* In rare cases it's practical to destroy the beans manually. A direct injected reference would lead to a stale bean instance.\n+ \n+ \n+== _Q: OK. You said that there are several kinds of beans?_\n+\n+A: Yes. In general, in Quarkus we distinguish:\n+\n+1. Class beans\n+2. Producer methods\n+3. Producer fields\n+4. Synthetic beans\n+\n+Producer methods are useful if you need additional control over instantiation of a bean.\n+They are also useful when integrating third-party libraries where you don't control the class source and may not add additional annotations etc.\n+\n+.Producer Method Example\n+[source,java]\n+----\n+@ApplicationScoped\n+public class PiProducer {\n+\n+    @Produces <1>\n+    double producePi() { \n+       return Math.PI; <2>\n+    }\n+}\n+\n+@ApplicationScoped\n+public class PiConsumer {\n+\n+   @Inject\n+   double pi; <3>\n+   \n+   double twoPis() {\n+     return pi * 2;\n+   }\n+} \n+----\n+<1> The container analyses the method annotations to build a bean metadata.\n+The return type is used to build the set of bean types. \n+In this case, it will be `double` and `java.lang.Object`.\n+No scope annotation is declared and so it's defaulted to `@Dependent`.\n+<2> The container will delegate to this method when creating the bean instance.\n+<3> `PiProducer#producePi()` is invoked and the result is set to `PiConsumer#pi` when the `PiConsumer` instance is created.\n+\n+NOTE: One of the limitations of producers is that interceptors are not applied to the result of a producer method/field.\n+\n+Producer fields are very similar to producer methods except that the field value is read when obtaining a bean instance.\n+\n+TIP: There's more about producers. You can declare qualifiers, inject dependencies into the producer methods parameters, etc. You can read more about producers for example in the https://docs.jboss.org/weld/reference/latest/en-US/html/beanscdi.html#_producer_methods[Weld docs, window=\"_blank\"].\n+\n+Synthetic beans are usually provided by extensions.\n+A synthetic bean is not backed by a class/method/field.\n+Application developers usually only consume this kind of beans.\n+\n+== _Q: OK injection looks cool. What other services are provided?_\n+\n+=== Lifecycle Callbacks\n+\n+A bean class may declare lifecycle `@PostConstruct` and `@PreDestroy` callbacks:\n+\n+.Lifecycle Callbacks Example\n+[source,java]\n+----\n+import javax.annotation.PostConstruct;\n+import javax.annotation.PreDestroy;\n+\n+@ApplicationScoped\n+public class Translator {\n+\n+    @PostConstruct <1>\n+    void init() {\n+       // ...\n+    }\n+    \n+    @PreDestroy <2>\n+    void destroy() {\n+      // ...\n+    }\n+}\n+----\n+<1> This callback is invoked before the bean instance is put into service. It is safe to perform some initialization here.\n+<2> This callback is invoked before the bean instance is destroyed. It is safe to perform some cleanup tasks here.\n+\n+TIP: It's a good practice to keep the logic in the callbacks \"without side effects\", i.e. you should avoid calling other beans inside the callbacks.\n+", "originalCommit": "63d155041a5447adba997da8577b662969847b05", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQ0MTM1Mw==", "url": "https://github.com/quarkusio/quarkus/pull/10529#discussion_r451441353", "bodyText": "Hm, there is no relation between lifecycle callbacks and StartupEvent/@Startup.", "author": "mkouba", "createdAt": "2020-07-08T10:26:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDk3ODQ1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQ1MDU4MQ==", "url": "https://github.com/quarkusio/quarkus/pull/10529#discussion_r451450581", "bodyText": "Right, one is bean lifecycle and the other application lifecycle.\nMy suggestion was to add a note to distinguish between the two, but I'm OK to keep the doc as it is now.", "author": "loicmathieu", "createdAt": "2020-07-08T10:45:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDk3ODQ1Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDk3ODk2Mw==", "url": "https://github.com/quarkusio/quarkus/pull/10529#discussion_r450978963", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            <2> `Priority` enables the interceptor and affects the the interceptor ordering. \n          \n          \n            \n            <2> `Priority` enables the interceptor and affects the interceptor ordering.", "author": "loicmathieu", "createdAt": "2020-07-07T16:07:12Z", "path": "docs/src/main/asciidoc/cdi.adoc", "diffHunk": "@@ -0,0 +1,361 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Introduction to Contexts and Dependency Injection\n+\n+include::./attributes.adoc[]\n+:numbered:\n+:sectnums:\n+:sectnumlevels: 4\n+:toc:\n+\n+In this guide we're going to describe the basic principles of the programming model used all over the Quarkus universe. \n+Quarkus programming model is based on the http://docs.jboss.org/cdi/spec/2.0/cdi-spec.html[Contexts and Dependency Injection for Java 2.0, window=\"_blank\"] specification.\n+However, a full CDI implementation is not used under the hood.\n+Quarkus only implements a subset of the CDI features - see also <<cdi-reference.adoc#supported_features,the list of supported features>> and <<cdi-reference.adoc#limitations,the list of limitations>>.\n+On the other hand, there are quite a few <<cdi-reference#nonstandard_features,non-standard features>> and <<cdi-reference.adoc#build_time_apis,Quarkus-specific APIs>>.\n+We believe that our efforts will drive the innovation of the CDI specification towards the build-time oriented developer stacks in the future.\n+\n+== _Q: OK. Let's start simple. What is a bean?_\n+\n+A: Well, a bean is a _container-managed_ object that supports a set of basic services, such as injection of dependencies, lifecycle callbacks and interceptors.\n+\n+== _Q: Wait a minute. What does it mean container-managed?_\n+\n+A: Simply put, you don't control the lifecycle of the object instance directly.\n+Instead, you can affect the lifecycle through the declarative means, such as annotations, configuration, etc.\n+The container is the _environment_ where your application runs.\n+It creates and destroys the instances of beans, associates the instances with a designated context, and injects them into other beans.\n+\n+== _Q: What is it good for?_\n+\n+A: An application developer can focus on the business logic rather than \"where and how\" to obtain a fully initialized component with all of its dependencies.\n+\n+NOTE: You've probably heard of the _inversion of control_ (IoC) programming principle. Dependency injection is one of the implementation techniques of IoC. \n+\n+== _Q: OK. And what does a bean look like?_\n+\n+A: There are several kinds of beans.\n+The most common ones are class-based beans:\n+\n+.Simple Bean Example\n+[source,java]\n+----\n+import javax.inject.Inject;\n+import javax.enterprise.context.ApplicationScoped;\n+import org.eclipse.microprofile.metrics.annotation.Counted;\n+\n+@ApplicationScoped <1>\n+public class Translator {\n+\n+    @Inject\n+    Dictionary dictionary; <2>\n+    \n+    @Counted  <3>\n+    String translate(String sentence) { \n+      // ...\n+    }\n+}\n+----\n+<1> This is a scope annotation. It tells the container which context to associate the bean instance with. In this particular case, a *single bean instance* is created for the application and used by all dependants.\n+<2> This is a field injection point. It tells the container that `Translator` depends on the `Dictionary` bean. If there is no matching bean the build fails.\n+<3> This is an interceptor binding annotation. In this case, the annotation comes from the MicroProfile Metrics. The relevant interceptor intercepts the invocation and updates the relevant metrics.\n+\n+== _Q: Nice. How does the dependency resolution work? I see no names or identifiers._\n+\n+A: That's a good question.\n+In CDI the process of matching a bean to an injection point is *type-safe*.\n+Each bean declares a set of bean types.\n+In our example above, the `Translator` bean has two bean types: `Translator` and `java.lang.Object`.\n+Subsequently, a bean is assignable to an injection point if the bean has a bean type that matches the _required type_ and has all the _required qualifiers_.\n+We'll talk about qualifiers later.\n+For now, it's enough to know that the bean above is assignable to an injection point of type `Translator` and `java.lang.Object`.\n+\n+== _Q: Hm, wait a minute. What happens if multiple beans declare the same type?_\n+\n+A: There is a simple rule: *exactly one bean must be assignable to an injection point, otherwise the build fails*.\n+If none is assignable the build fails with `UnsatisfiedResolutionException`.\n+If multiple are assignable the build fails with `AmbiguousResolutionException`.\n+This is very useful because your application fails fast whenever the container is not able to find an unambiguous dependency for any injection point.\n+\n+[TIP]\n+====\n+Your can use programmatic lookup via  `javax.enterprise.inject.Instance` to resolve ambiguities at runtime and even iterate over all beans implementing a given type:\n+\n+[source,java]\n+----\n+public class Translator {\n+\n+    @Inject\n+    Instance<Dictionary> dictionaries; <1>\n+    \n+    String translate(String sentence) { \n+      for (Dictionary dict : dictionaries) { <2>\n+         // ...\n+      }\n+    }\n+}\n+----\n+<1> This injection point will not result in an ambiguous dependency even if there are multiple beans that implement the `Dictionary` type.\n+<2> `javax.enterprise.inject.Instance` extends `Iterable`.\n+====\n+\n+== _Q: Can I use setter and constructor injection?_\n+\n+A: Yes, you can.\n+In fact, in CDI the \"setter injection\" is superseded by more powerful https://docs.jboss.org/cdi/spec/2.0/cdi-spec.html#initializer_methods[initializer methods, window=\"_blank\"].\n+Intializers may accept multiple parameters and don't have to follow the JavaBean naming conventions.\n+\n+.Initialized and Constructor Injection Example\n+[source,java]\n+----\n+@ApplicationScoped\n+public class Translator {\n+\n+    private final TranslatorHelper helper\n+\n+    Translator(TranslatorHelper helper) { <1>\n+       this.helper = helper;\n+    }\n+\n+    @Inject <2>\n+    void setDeps(Dictionary dic, LocalizationService locService) { <3>\n+      / ...\n+    }\n+}\n+----\n+<1> This is a constructor injection. In fact, this code would not work in regular CDI implementations where a bean with a normal scope must always declare a no-args constructor. In Quarkus we detect this problem and \"add\" such a constructor directly in the bytecode.\n+<2> An initializer method must be annotated with `@Inject`. \n+<3> An initializer may accept multiple parameters - each one is an injection point.\n+\n+== _Q: You talked about some qualifiers?_\n+\n+A: https://docs.jboss.org/cdi/spec/2.0/cdi-spec.html#qualifiers[Qualifiers, window=\"_blank\"] are annotations that help the container to distinguish beans that implement the same type.\n+As we already said a bean is assignable to an injection point if it has all the required qualifiers.\n+If you declare no qualifier at an injection point the `@Default` qualifier is assumed.\n+\n+.Bean With Custom Qualifier Example\n+[source,java]\n+----\n+@Superior <1>\n+@ApplicationScoped\n+public class SuperiorTranslator extends Translator {\n+\n+    String translate(String sentence) { \n+      // ...\n+    }\n+}\n+----\n+<1> `@Superior` is a https://docs.jboss.org/cdi/spec/2.0/cdi-spec.html#defining_qualifier_types[qualifier annotation, window=\"_blank\"].\n+\n+This bean would be assignable to `@Inject @Superior Translator` and `@Inject @Superior SuperiorTranslator` but not in `@Inject Translator`.\n+The reason is that `@Inject Translator` is automatically transformed to `@Inject @Default Translator` during typesafe resolution.\n+And since our `SuperiorTranslator` does not declare `@Default` only the original `Translator` bean is assignable.\n+\n+== _Q: Looks good. What is the bean scope?_\n+\n+The scope of a bean determines the lifecycle of its instances, i.e. when and where an instance should be created and destroyed.\n+\n+NOTE: Every bean has exactly one scope.\n+\n+== _Q: What scopes can I actually use in my Quarkus application?_\n+\n+A: You can use all the built-in scopes mentioned by the specification except for `javax.enterprise.context.ConversationScoped`.\n+\n+[options=\"header\",cols=\"1,1\"]\n+|===\n+|Annotation   |Description   \n+//----------------------\n+|`@javax.enterprise.context.ApplicationScoped`   | A single bean instance is used for the application and shared among all injection points. The instance is created lazily, i.e. once a method is invoked upon the <<client_proxies, client proxy>>. \n+|`@javax.inject.Singleton`   | Just like `@ApplicationScoped` except that no client proxy is used. The instance is created eagerly.\n+|`@javax.enterprise.context.RequestScoped`   | The bean instance is associated with the current _request_ (usually an HTTP request). \n+|`@javax.enterprise.context.Dependent`   | This is a pseudo-scope. There is no context object that holds all dependent instances. Instead, a dependent instace is a dependent object of the bean it is injected into.\n+|`@javax.enterprise.context.SessionScoped`   | This scope is backed by an `javax.servlet.http.HttpSession` object. It's only available if `quarkus-undertow` extension is used.\n+|===\n+\n+NOTE: There can be other custom scopes provided by Quarkus extension. For example, `qquarkus-narayana-jta` provides `javax.transaction.TransactionScoped`.\n+\n+[[client_proxies]]\n+== _Q: I don't undestand the concept of client proxies._\n+\n+Indeed, the https://docs.jboss.org/cdi/spec/2.0/cdi-spec.html#client_proxies[client proxies, window=\"_blank\"] could be hard to grasp but they provide some useful functionality.\n+A client proxy is basically an object that delegates all method invocations to a target bean instance.\n+It's a container construct that implements `io.quarkus.arc.ClientProxy` and extends the bean class.\n+The client proxy instance is always injected instead of a contextual instance of a normal scoped bean (e.g. `@ApplicationScoped` and `@RequestScoped`).\n+Client proxies allow for:\n+\n+* Lazy instantiation - the instance is created once a method is invoked upon the proxy.\n+* Ability to inject a bean with \"narrower\" scope to a bean with \"wider\" scope; i.e. you can inject a `@RequestScoped` bean into an `@ApplicationScoped` bean.\n+* Circular dependencies in the dependency graph. Circular dependencies are \"bad design\" but sometimes they're inevitable. \n+* In rare cases it's practical to destroy the beans manually. A direct injected reference would lead to a stale bean instance.\n+ \n+ \n+== _Q: OK. You said that there are several kinds of beans?_\n+\n+A: Yes. In general, in Quarkus we distinguish:\n+\n+1. Class beans\n+2. Producer methods\n+3. Producer fields\n+4. Synthetic beans\n+\n+Producer methods are useful if you need additional control over instantiation of a bean.\n+They are also useful when integrating third-party libraries where you don't control the class source and may not add additional annotations etc.\n+\n+.Producer Method Example\n+[source,java]\n+----\n+@ApplicationScoped\n+public class PiProducer {\n+\n+    @Produces <1>\n+    double producePi() { \n+       return Math.PI; <2>\n+    }\n+}\n+\n+@ApplicationScoped\n+public class PiConsumer {\n+\n+   @Inject\n+   double pi; <3>\n+   \n+   double twoPis() {\n+     return pi * 2;\n+   }\n+} \n+----\n+<1> The container analyses the method annotations to build a bean metadata.\n+The return type is used to build the set of bean types. \n+In this case, it will be `double` and `java.lang.Object`.\n+No scope annotation is declared and so it's defaulted to `@Dependent`.\n+<2> The container will delegate to this method when creating the bean instance.\n+<3> `PiProducer#producePi()` is invoked and the result is set to `PiConsumer#pi` when the `PiConsumer` instance is created.\n+\n+NOTE: One of the limitations of producers is that interceptors are not applied to the result of a producer method/field.\n+\n+Producer fields are very similar to producer methods except that the field value is read when obtaining a bean instance.\n+\n+TIP: There's more about producers. You can declare qualifiers, inject dependencies into the producer methods parameters, etc. You can read more about producers for example in the https://docs.jboss.org/weld/reference/latest/en-US/html/beanscdi.html#_producer_methods[Weld docs, window=\"_blank\"].\n+\n+Synthetic beans are usually provided by extensions.\n+A synthetic bean is not backed by a class/method/field.\n+Application developers usually only consume this kind of beans.\n+\n+== _Q: OK injection looks cool. What other services are provided?_\n+\n+=== Lifecycle Callbacks\n+\n+A bean class may declare lifecycle `@PostConstruct` and `@PreDestroy` callbacks:\n+\n+.Lifecycle Callbacks Example\n+[source,java]\n+----\n+import javax.annotation.PostConstruct;\n+import javax.annotation.PreDestroy;\n+\n+@ApplicationScoped\n+public class Translator {\n+\n+    @PostConstruct <1>\n+    void init() {\n+       // ...\n+    }\n+    \n+    @PreDestroy <2>\n+    void destroy() {\n+      // ...\n+    }\n+}\n+----\n+<1> This callback is invoked before the bean instance is put into service. It is safe to perform some initialization here.\n+<2> This callback is invoked before the bean instance is destroyed. It is safe to perform some cleanup tasks here.\n+\n+TIP: It's a good practice to keep the logic in the callbacks \"without side effects\", i.e. you should avoid calling other beans inside the callbacks.\n+\n+=== Interceptors\n+\n+Interceptors are used to separate cross-cutting concerns from business logic. \n+There is a separate specification - Java Interceptors - that defines the basic programming model and semantics.\n+\n+.Simple Interceptor Example\n+[source,java]\n+----\n+import javax.interceptor.Interceptor;\n+import javax.annotation.Priority;\n+\n+@Logged <1>\n+@Priority(2020) <2>\n+@Interceptor <3>\n+public class LoggingInterceptor {\n+\n+   @Inject <4>\n+   Logger logger;\n+\n+   @AroundInvoke <5>\n+   Objec logInvocation(InvocationContext context) {\n+      // ...log before\n+      Objec ret = context.proceed(); <6>\n+      // ...log after\n+      return ret;\n+   }\n+    \n+}\n+----\n+<1> This is an interceptor binding annotation that is used to bind our interceptor to a bean. Simply annotate a bean class with `@Logged`.\n+<2> `Priority` enables the interceptor and affects the the interceptor ordering. ", "originalCommit": "63d155041a5447adba997da8577b662969847b05", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDk3OTgwNg==", "url": "https://github.com/quarkusio/quarkus/pull/10529#discussion_r450979806", "bodyText": "Maybe list the other interceptor pointcut ? (BeforeInvoke, AfterInvoke)", "author": "loicmathieu", "createdAt": "2020-07-07T16:08:27Z", "path": "docs/src/main/asciidoc/cdi.adoc", "diffHunk": "@@ -0,0 +1,361 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Introduction to Contexts and Dependency Injection\n+\n+include::./attributes.adoc[]\n+:numbered:\n+:sectnums:\n+:sectnumlevels: 4\n+:toc:\n+\n+In this guide we're going to describe the basic principles of the programming model used all over the Quarkus universe. \n+Quarkus programming model is based on the http://docs.jboss.org/cdi/spec/2.0/cdi-spec.html[Contexts and Dependency Injection for Java 2.0, window=\"_blank\"] specification.\n+However, a full CDI implementation is not used under the hood.\n+Quarkus only implements a subset of the CDI features - see also <<cdi-reference.adoc#supported_features,the list of supported features>> and <<cdi-reference.adoc#limitations,the list of limitations>>.\n+On the other hand, there are quite a few <<cdi-reference#nonstandard_features,non-standard features>> and <<cdi-reference.adoc#build_time_apis,Quarkus-specific APIs>>.\n+We believe that our efforts will drive the innovation of the CDI specification towards the build-time oriented developer stacks in the future.\n+\n+== _Q: OK. Let's start simple. What is a bean?_\n+\n+A: Well, a bean is a _container-managed_ object that supports a set of basic services, such as injection of dependencies, lifecycle callbacks and interceptors.\n+\n+== _Q: Wait a minute. What does it mean container-managed?_\n+\n+A: Simply put, you don't control the lifecycle of the object instance directly.\n+Instead, you can affect the lifecycle through the declarative means, such as annotations, configuration, etc.\n+The container is the _environment_ where your application runs.\n+It creates and destroys the instances of beans, associates the instances with a designated context, and injects them into other beans.\n+\n+== _Q: What is it good for?_\n+\n+A: An application developer can focus on the business logic rather than \"where and how\" to obtain a fully initialized component with all of its dependencies.\n+\n+NOTE: You've probably heard of the _inversion of control_ (IoC) programming principle. Dependency injection is one of the implementation techniques of IoC. \n+\n+== _Q: OK. And what does a bean look like?_\n+\n+A: There are several kinds of beans.\n+The most common ones are class-based beans:\n+\n+.Simple Bean Example\n+[source,java]\n+----\n+import javax.inject.Inject;\n+import javax.enterprise.context.ApplicationScoped;\n+import org.eclipse.microprofile.metrics.annotation.Counted;\n+\n+@ApplicationScoped <1>\n+public class Translator {\n+\n+    @Inject\n+    Dictionary dictionary; <2>\n+    \n+    @Counted  <3>\n+    String translate(String sentence) { \n+      // ...\n+    }\n+}\n+----\n+<1> This is a scope annotation. It tells the container which context to associate the bean instance with. In this particular case, a *single bean instance* is created for the application and used by all dependants.\n+<2> This is a field injection point. It tells the container that `Translator` depends on the `Dictionary` bean. If there is no matching bean the build fails.\n+<3> This is an interceptor binding annotation. In this case, the annotation comes from the MicroProfile Metrics. The relevant interceptor intercepts the invocation and updates the relevant metrics.\n+\n+== _Q: Nice. How does the dependency resolution work? I see no names or identifiers._\n+\n+A: That's a good question.\n+In CDI the process of matching a bean to an injection point is *type-safe*.\n+Each bean declares a set of bean types.\n+In our example above, the `Translator` bean has two bean types: `Translator` and `java.lang.Object`.\n+Subsequently, a bean is assignable to an injection point if the bean has a bean type that matches the _required type_ and has all the _required qualifiers_.\n+We'll talk about qualifiers later.\n+For now, it's enough to know that the bean above is assignable to an injection point of type `Translator` and `java.lang.Object`.\n+\n+== _Q: Hm, wait a minute. What happens if multiple beans declare the same type?_\n+\n+A: There is a simple rule: *exactly one bean must be assignable to an injection point, otherwise the build fails*.\n+If none is assignable the build fails with `UnsatisfiedResolutionException`.\n+If multiple are assignable the build fails with `AmbiguousResolutionException`.\n+This is very useful because your application fails fast whenever the container is not able to find an unambiguous dependency for any injection point.\n+\n+[TIP]\n+====\n+Your can use programmatic lookup via  `javax.enterprise.inject.Instance` to resolve ambiguities at runtime and even iterate over all beans implementing a given type:\n+\n+[source,java]\n+----\n+public class Translator {\n+\n+    @Inject\n+    Instance<Dictionary> dictionaries; <1>\n+    \n+    String translate(String sentence) { \n+      for (Dictionary dict : dictionaries) { <2>\n+         // ...\n+      }\n+    }\n+}\n+----\n+<1> This injection point will not result in an ambiguous dependency even if there are multiple beans that implement the `Dictionary` type.\n+<2> `javax.enterprise.inject.Instance` extends `Iterable`.\n+====\n+\n+== _Q: Can I use setter and constructor injection?_\n+\n+A: Yes, you can.\n+In fact, in CDI the \"setter injection\" is superseded by more powerful https://docs.jboss.org/cdi/spec/2.0/cdi-spec.html#initializer_methods[initializer methods, window=\"_blank\"].\n+Intializers may accept multiple parameters and don't have to follow the JavaBean naming conventions.\n+\n+.Initialized and Constructor Injection Example\n+[source,java]\n+----\n+@ApplicationScoped\n+public class Translator {\n+\n+    private final TranslatorHelper helper\n+\n+    Translator(TranslatorHelper helper) { <1>\n+       this.helper = helper;\n+    }\n+\n+    @Inject <2>\n+    void setDeps(Dictionary dic, LocalizationService locService) { <3>\n+      / ...\n+    }\n+}\n+----\n+<1> This is a constructor injection. In fact, this code would not work in regular CDI implementations where a bean with a normal scope must always declare a no-args constructor. In Quarkus we detect this problem and \"add\" such a constructor directly in the bytecode.\n+<2> An initializer method must be annotated with `@Inject`. \n+<3> An initializer may accept multiple parameters - each one is an injection point.\n+\n+== _Q: You talked about some qualifiers?_\n+\n+A: https://docs.jboss.org/cdi/spec/2.0/cdi-spec.html#qualifiers[Qualifiers, window=\"_blank\"] are annotations that help the container to distinguish beans that implement the same type.\n+As we already said a bean is assignable to an injection point if it has all the required qualifiers.\n+If you declare no qualifier at an injection point the `@Default` qualifier is assumed.\n+\n+.Bean With Custom Qualifier Example\n+[source,java]\n+----\n+@Superior <1>\n+@ApplicationScoped\n+public class SuperiorTranslator extends Translator {\n+\n+    String translate(String sentence) { \n+      // ...\n+    }\n+}\n+----\n+<1> `@Superior` is a https://docs.jboss.org/cdi/spec/2.0/cdi-spec.html#defining_qualifier_types[qualifier annotation, window=\"_blank\"].\n+\n+This bean would be assignable to `@Inject @Superior Translator` and `@Inject @Superior SuperiorTranslator` but not in `@Inject Translator`.\n+The reason is that `@Inject Translator` is automatically transformed to `@Inject @Default Translator` during typesafe resolution.\n+And since our `SuperiorTranslator` does not declare `@Default` only the original `Translator` bean is assignable.\n+\n+== _Q: Looks good. What is the bean scope?_\n+\n+The scope of a bean determines the lifecycle of its instances, i.e. when and where an instance should be created and destroyed.\n+\n+NOTE: Every bean has exactly one scope.\n+\n+== _Q: What scopes can I actually use in my Quarkus application?_\n+\n+A: You can use all the built-in scopes mentioned by the specification except for `javax.enterprise.context.ConversationScoped`.\n+\n+[options=\"header\",cols=\"1,1\"]\n+|===\n+|Annotation   |Description   \n+//----------------------\n+|`@javax.enterprise.context.ApplicationScoped`   | A single bean instance is used for the application and shared among all injection points. The instance is created lazily, i.e. once a method is invoked upon the <<client_proxies, client proxy>>. \n+|`@javax.inject.Singleton`   | Just like `@ApplicationScoped` except that no client proxy is used. The instance is created eagerly.\n+|`@javax.enterprise.context.RequestScoped`   | The bean instance is associated with the current _request_ (usually an HTTP request). \n+|`@javax.enterprise.context.Dependent`   | This is a pseudo-scope. There is no context object that holds all dependent instances. Instead, a dependent instace is a dependent object of the bean it is injected into.\n+|`@javax.enterprise.context.SessionScoped`   | This scope is backed by an `javax.servlet.http.HttpSession` object. It's only available if `quarkus-undertow` extension is used.\n+|===\n+\n+NOTE: There can be other custom scopes provided by Quarkus extension. For example, `qquarkus-narayana-jta` provides `javax.transaction.TransactionScoped`.\n+\n+[[client_proxies]]\n+== _Q: I don't undestand the concept of client proxies._\n+\n+Indeed, the https://docs.jboss.org/cdi/spec/2.0/cdi-spec.html#client_proxies[client proxies, window=\"_blank\"] could be hard to grasp but they provide some useful functionality.\n+A client proxy is basically an object that delegates all method invocations to a target bean instance.\n+It's a container construct that implements `io.quarkus.arc.ClientProxy` and extends the bean class.\n+The client proxy instance is always injected instead of a contextual instance of a normal scoped bean (e.g. `@ApplicationScoped` and `@RequestScoped`).\n+Client proxies allow for:\n+\n+* Lazy instantiation - the instance is created once a method is invoked upon the proxy.\n+* Ability to inject a bean with \"narrower\" scope to a bean with \"wider\" scope; i.e. you can inject a `@RequestScoped` bean into an `@ApplicationScoped` bean.\n+* Circular dependencies in the dependency graph. Circular dependencies are \"bad design\" but sometimes they're inevitable. \n+* In rare cases it's practical to destroy the beans manually. A direct injected reference would lead to a stale bean instance.\n+ \n+ \n+== _Q: OK. You said that there are several kinds of beans?_\n+\n+A: Yes. In general, in Quarkus we distinguish:\n+\n+1. Class beans\n+2. Producer methods\n+3. Producer fields\n+4. Synthetic beans\n+\n+Producer methods are useful if you need additional control over instantiation of a bean.\n+They are also useful when integrating third-party libraries where you don't control the class source and may not add additional annotations etc.\n+\n+.Producer Method Example\n+[source,java]\n+----\n+@ApplicationScoped\n+public class PiProducer {\n+\n+    @Produces <1>\n+    double producePi() { \n+       return Math.PI; <2>\n+    }\n+}\n+\n+@ApplicationScoped\n+public class PiConsumer {\n+\n+   @Inject\n+   double pi; <3>\n+   \n+   double twoPis() {\n+     return pi * 2;\n+   }\n+} \n+----\n+<1> The container analyses the method annotations to build a bean metadata.\n+The return type is used to build the set of bean types. \n+In this case, it will be `double` and `java.lang.Object`.\n+No scope annotation is declared and so it's defaulted to `@Dependent`.\n+<2> The container will delegate to this method when creating the bean instance.\n+<3> `PiProducer#producePi()` is invoked and the result is set to `PiConsumer#pi` when the `PiConsumer` instance is created.\n+\n+NOTE: One of the limitations of producers is that interceptors are not applied to the result of a producer method/field.\n+\n+Producer fields are very similar to producer methods except that the field value is read when obtaining a bean instance.\n+\n+TIP: There's more about producers. You can declare qualifiers, inject dependencies into the producer methods parameters, etc. You can read more about producers for example in the https://docs.jboss.org/weld/reference/latest/en-US/html/beanscdi.html#_producer_methods[Weld docs, window=\"_blank\"].\n+\n+Synthetic beans are usually provided by extensions.\n+A synthetic bean is not backed by a class/method/field.\n+Application developers usually only consume this kind of beans.\n+\n+== _Q: OK injection looks cool. What other services are provided?_\n+\n+=== Lifecycle Callbacks\n+\n+A bean class may declare lifecycle `@PostConstruct` and `@PreDestroy` callbacks:\n+\n+.Lifecycle Callbacks Example\n+[source,java]\n+----\n+import javax.annotation.PostConstruct;\n+import javax.annotation.PreDestroy;\n+\n+@ApplicationScoped\n+public class Translator {\n+\n+    @PostConstruct <1>\n+    void init() {\n+       // ...\n+    }\n+    \n+    @PreDestroy <2>\n+    void destroy() {\n+      // ...\n+    }\n+}\n+----\n+<1> This callback is invoked before the bean instance is put into service. It is safe to perform some initialization here.\n+<2> This callback is invoked before the bean instance is destroyed. It is safe to perform some cleanup tasks here.\n+\n+TIP: It's a good practice to keep the logic in the callbacks \"without side effects\", i.e. you should avoid calling other beans inside the callbacks.\n+\n+=== Interceptors\n+\n+Interceptors are used to separate cross-cutting concerns from business logic. \n+There is a separate specification - Java Interceptors - that defines the basic programming model and semantics.\n+\n+.Simple Interceptor Example\n+[source,java]\n+----\n+import javax.interceptor.Interceptor;\n+import javax.annotation.Priority;\n+\n+@Logged <1>\n+@Priority(2020) <2>\n+@Interceptor <3>\n+public class LoggingInterceptor {\n+\n+   @Inject <4>\n+   Logger logger;\n+\n+   @AroundInvoke <5>\n+   Objec logInvocation(InvocationContext context) {\n+      // ...log before\n+      Objec ret = context.proceed(); <6>\n+      // ...log after\n+      return ret;\n+   }\n+    \n+}\n+----\n+<1> This is an interceptor binding annotation that is used to bind our interceptor to a bean. Simply annotate a bean class with `@Logged`.\n+<2> `Priority` enables the interceptor and affects the the interceptor ordering. \n+<3> Marks an interceptor component.\n+<4> An interceptor instance may be the target of dependency injection.\n+<5> `AroundInvoke` denotes a method that interposes on business methods.", "originalCommit": "63d155041a5447adba997da8577b662969847b05", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTM0MTU5NA==", "url": "https://github.com/quarkusio/quarkus/pull/10529#discussion_r451341594", "bodyText": "I wouldn't complicate things here... BTW there is nothing like BeforeInvoke and AfterInvoke in the interceptors spec. There are @AroundConstruct and @PostConstruct and @PreDestroy interceptors...", "author": "mkouba", "createdAt": "2020-07-08T07:34:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDk3OTgwNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDk4MDA2OA==", "url": "https://github.com/quarkusio/quarkus/pull/10529#discussion_r450980068", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            NOTE: Instances of interceptors are dependent objects of the bean instance they intercept, i.e. a new interceptor instance is created for each intercepred bean.\n          \n          \n            \n            NOTE: Instances of interceptors are dependent objects of the bean instance they intercept, i.e. a new interceptor instance is created for each intercepted bean.", "author": "loicmathieu", "createdAt": "2020-07-07T16:08:51Z", "path": "docs/src/main/asciidoc/cdi.adoc", "diffHunk": "@@ -0,0 +1,361 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Introduction to Contexts and Dependency Injection\n+\n+include::./attributes.adoc[]\n+:numbered:\n+:sectnums:\n+:sectnumlevels: 4\n+:toc:\n+\n+In this guide we're going to describe the basic principles of the programming model used all over the Quarkus universe. \n+Quarkus programming model is based on the http://docs.jboss.org/cdi/spec/2.0/cdi-spec.html[Contexts and Dependency Injection for Java 2.0, window=\"_blank\"] specification.\n+However, a full CDI implementation is not used under the hood.\n+Quarkus only implements a subset of the CDI features - see also <<cdi-reference.adoc#supported_features,the list of supported features>> and <<cdi-reference.adoc#limitations,the list of limitations>>.\n+On the other hand, there are quite a few <<cdi-reference#nonstandard_features,non-standard features>> and <<cdi-reference.adoc#build_time_apis,Quarkus-specific APIs>>.\n+We believe that our efforts will drive the innovation of the CDI specification towards the build-time oriented developer stacks in the future.\n+\n+== _Q: OK. Let's start simple. What is a bean?_\n+\n+A: Well, a bean is a _container-managed_ object that supports a set of basic services, such as injection of dependencies, lifecycle callbacks and interceptors.\n+\n+== _Q: Wait a minute. What does it mean container-managed?_\n+\n+A: Simply put, you don't control the lifecycle of the object instance directly.\n+Instead, you can affect the lifecycle through the declarative means, such as annotations, configuration, etc.\n+The container is the _environment_ where your application runs.\n+It creates and destroys the instances of beans, associates the instances with a designated context, and injects them into other beans.\n+\n+== _Q: What is it good for?_\n+\n+A: An application developer can focus on the business logic rather than \"where and how\" to obtain a fully initialized component with all of its dependencies.\n+\n+NOTE: You've probably heard of the _inversion of control_ (IoC) programming principle. Dependency injection is one of the implementation techniques of IoC. \n+\n+== _Q: OK. And what does a bean look like?_\n+\n+A: There are several kinds of beans.\n+The most common ones are class-based beans:\n+\n+.Simple Bean Example\n+[source,java]\n+----\n+import javax.inject.Inject;\n+import javax.enterprise.context.ApplicationScoped;\n+import org.eclipse.microprofile.metrics.annotation.Counted;\n+\n+@ApplicationScoped <1>\n+public class Translator {\n+\n+    @Inject\n+    Dictionary dictionary; <2>\n+    \n+    @Counted  <3>\n+    String translate(String sentence) { \n+      // ...\n+    }\n+}\n+----\n+<1> This is a scope annotation. It tells the container which context to associate the bean instance with. In this particular case, a *single bean instance* is created for the application and used by all dependants.\n+<2> This is a field injection point. It tells the container that `Translator` depends on the `Dictionary` bean. If there is no matching bean the build fails.\n+<3> This is an interceptor binding annotation. In this case, the annotation comes from the MicroProfile Metrics. The relevant interceptor intercepts the invocation and updates the relevant metrics.\n+\n+== _Q: Nice. How does the dependency resolution work? I see no names or identifiers._\n+\n+A: That's a good question.\n+In CDI the process of matching a bean to an injection point is *type-safe*.\n+Each bean declares a set of bean types.\n+In our example above, the `Translator` bean has two bean types: `Translator` and `java.lang.Object`.\n+Subsequently, a bean is assignable to an injection point if the bean has a bean type that matches the _required type_ and has all the _required qualifiers_.\n+We'll talk about qualifiers later.\n+For now, it's enough to know that the bean above is assignable to an injection point of type `Translator` and `java.lang.Object`.\n+\n+== _Q: Hm, wait a minute. What happens if multiple beans declare the same type?_\n+\n+A: There is a simple rule: *exactly one bean must be assignable to an injection point, otherwise the build fails*.\n+If none is assignable the build fails with `UnsatisfiedResolutionException`.\n+If multiple are assignable the build fails with `AmbiguousResolutionException`.\n+This is very useful because your application fails fast whenever the container is not able to find an unambiguous dependency for any injection point.\n+\n+[TIP]\n+====\n+Your can use programmatic lookup via  `javax.enterprise.inject.Instance` to resolve ambiguities at runtime and even iterate over all beans implementing a given type:\n+\n+[source,java]\n+----\n+public class Translator {\n+\n+    @Inject\n+    Instance<Dictionary> dictionaries; <1>\n+    \n+    String translate(String sentence) { \n+      for (Dictionary dict : dictionaries) { <2>\n+         // ...\n+      }\n+    }\n+}\n+----\n+<1> This injection point will not result in an ambiguous dependency even if there are multiple beans that implement the `Dictionary` type.\n+<2> `javax.enterprise.inject.Instance` extends `Iterable`.\n+====\n+\n+== _Q: Can I use setter and constructor injection?_\n+\n+A: Yes, you can.\n+In fact, in CDI the \"setter injection\" is superseded by more powerful https://docs.jboss.org/cdi/spec/2.0/cdi-spec.html#initializer_methods[initializer methods, window=\"_blank\"].\n+Intializers may accept multiple parameters and don't have to follow the JavaBean naming conventions.\n+\n+.Initialized and Constructor Injection Example\n+[source,java]\n+----\n+@ApplicationScoped\n+public class Translator {\n+\n+    private final TranslatorHelper helper\n+\n+    Translator(TranslatorHelper helper) { <1>\n+       this.helper = helper;\n+    }\n+\n+    @Inject <2>\n+    void setDeps(Dictionary dic, LocalizationService locService) { <3>\n+      / ...\n+    }\n+}\n+----\n+<1> This is a constructor injection. In fact, this code would not work in regular CDI implementations where a bean with a normal scope must always declare a no-args constructor. In Quarkus we detect this problem and \"add\" such a constructor directly in the bytecode.\n+<2> An initializer method must be annotated with `@Inject`. \n+<3> An initializer may accept multiple parameters - each one is an injection point.\n+\n+== _Q: You talked about some qualifiers?_\n+\n+A: https://docs.jboss.org/cdi/spec/2.0/cdi-spec.html#qualifiers[Qualifiers, window=\"_blank\"] are annotations that help the container to distinguish beans that implement the same type.\n+As we already said a bean is assignable to an injection point if it has all the required qualifiers.\n+If you declare no qualifier at an injection point the `@Default` qualifier is assumed.\n+\n+.Bean With Custom Qualifier Example\n+[source,java]\n+----\n+@Superior <1>\n+@ApplicationScoped\n+public class SuperiorTranslator extends Translator {\n+\n+    String translate(String sentence) { \n+      // ...\n+    }\n+}\n+----\n+<1> `@Superior` is a https://docs.jboss.org/cdi/spec/2.0/cdi-spec.html#defining_qualifier_types[qualifier annotation, window=\"_blank\"].\n+\n+This bean would be assignable to `@Inject @Superior Translator` and `@Inject @Superior SuperiorTranslator` but not in `@Inject Translator`.\n+The reason is that `@Inject Translator` is automatically transformed to `@Inject @Default Translator` during typesafe resolution.\n+And since our `SuperiorTranslator` does not declare `@Default` only the original `Translator` bean is assignable.\n+\n+== _Q: Looks good. What is the bean scope?_\n+\n+The scope of a bean determines the lifecycle of its instances, i.e. when and where an instance should be created and destroyed.\n+\n+NOTE: Every bean has exactly one scope.\n+\n+== _Q: What scopes can I actually use in my Quarkus application?_\n+\n+A: You can use all the built-in scopes mentioned by the specification except for `javax.enterprise.context.ConversationScoped`.\n+\n+[options=\"header\",cols=\"1,1\"]\n+|===\n+|Annotation   |Description   \n+//----------------------\n+|`@javax.enterprise.context.ApplicationScoped`   | A single bean instance is used for the application and shared among all injection points. The instance is created lazily, i.e. once a method is invoked upon the <<client_proxies, client proxy>>. \n+|`@javax.inject.Singleton`   | Just like `@ApplicationScoped` except that no client proxy is used. The instance is created eagerly.\n+|`@javax.enterprise.context.RequestScoped`   | The bean instance is associated with the current _request_ (usually an HTTP request). \n+|`@javax.enterprise.context.Dependent`   | This is a pseudo-scope. There is no context object that holds all dependent instances. Instead, a dependent instace is a dependent object of the bean it is injected into.\n+|`@javax.enterprise.context.SessionScoped`   | This scope is backed by an `javax.servlet.http.HttpSession` object. It's only available if `quarkus-undertow` extension is used.\n+|===\n+\n+NOTE: There can be other custom scopes provided by Quarkus extension. For example, `qquarkus-narayana-jta` provides `javax.transaction.TransactionScoped`.\n+\n+[[client_proxies]]\n+== _Q: I don't undestand the concept of client proxies._\n+\n+Indeed, the https://docs.jboss.org/cdi/spec/2.0/cdi-spec.html#client_proxies[client proxies, window=\"_blank\"] could be hard to grasp but they provide some useful functionality.\n+A client proxy is basically an object that delegates all method invocations to a target bean instance.\n+It's a container construct that implements `io.quarkus.arc.ClientProxy` and extends the bean class.\n+The client proxy instance is always injected instead of a contextual instance of a normal scoped bean (e.g. `@ApplicationScoped` and `@RequestScoped`).\n+Client proxies allow for:\n+\n+* Lazy instantiation - the instance is created once a method is invoked upon the proxy.\n+* Ability to inject a bean with \"narrower\" scope to a bean with \"wider\" scope; i.e. you can inject a `@RequestScoped` bean into an `@ApplicationScoped` bean.\n+* Circular dependencies in the dependency graph. Circular dependencies are \"bad design\" but sometimes they're inevitable. \n+* In rare cases it's practical to destroy the beans manually. A direct injected reference would lead to a stale bean instance.\n+ \n+ \n+== _Q: OK. You said that there are several kinds of beans?_\n+\n+A: Yes. In general, in Quarkus we distinguish:\n+\n+1. Class beans\n+2. Producer methods\n+3. Producer fields\n+4. Synthetic beans\n+\n+Producer methods are useful if you need additional control over instantiation of a bean.\n+They are also useful when integrating third-party libraries where you don't control the class source and may not add additional annotations etc.\n+\n+.Producer Method Example\n+[source,java]\n+----\n+@ApplicationScoped\n+public class PiProducer {\n+\n+    @Produces <1>\n+    double producePi() { \n+       return Math.PI; <2>\n+    }\n+}\n+\n+@ApplicationScoped\n+public class PiConsumer {\n+\n+   @Inject\n+   double pi; <3>\n+   \n+   double twoPis() {\n+     return pi * 2;\n+   }\n+} \n+----\n+<1> The container analyses the method annotations to build a bean metadata.\n+The return type is used to build the set of bean types. \n+In this case, it will be `double` and `java.lang.Object`.\n+No scope annotation is declared and so it's defaulted to `@Dependent`.\n+<2> The container will delegate to this method when creating the bean instance.\n+<3> `PiProducer#producePi()` is invoked and the result is set to `PiConsumer#pi` when the `PiConsumer` instance is created.\n+\n+NOTE: One of the limitations of producers is that interceptors are not applied to the result of a producer method/field.\n+\n+Producer fields are very similar to producer methods except that the field value is read when obtaining a bean instance.\n+\n+TIP: There's more about producers. You can declare qualifiers, inject dependencies into the producer methods parameters, etc. You can read more about producers for example in the https://docs.jboss.org/weld/reference/latest/en-US/html/beanscdi.html#_producer_methods[Weld docs, window=\"_blank\"].\n+\n+Synthetic beans are usually provided by extensions.\n+A synthetic bean is not backed by a class/method/field.\n+Application developers usually only consume this kind of beans.\n+\n+== _Q: OK injection looks cool. What other services are provided?_\n+\n+=== Lifecycle Callbacks\n+\n+A bean class may declare lifecycle `@PostConstruct` and `@PreDestroy` callbacks:\n+\n+.Lifecycle Callbacks Example\n+[source,java]\n+----\n+import javax.annotation.PostConstruct;\n+import javax.annotation.PreDestroy;\n+\n+@ApplicationScoped\n+public class Translator {\n+\n+    @PostConstruct <1>\n+    void init() {\n+       // ...\n+    }\n+    \n+    @PreDestroy <2>\n+    void destroy() {\n+      // ...\n+    }\n+}\n+----\n+<1> This callback is invoked before the bean instance is put into service. It is safe to perform some initialization here.\n+<2> This callback is invoked before the bean instance is destroyed. It is safe to perform some cleanup tasks here.\n+\n+TIP: It's a good practice to keep the logic in the callbacks \"without side effects\", i.e. you should avoid calling other beans inside the callbacks.\n+\n+=== Interceptors\n+\n+Interceptors are used to separate cross-cutting concerns from business logic. \n+There is a separate specification - Java Interceptors - that defines the basic programming model and semantics.\n+\n+.Simple Interceptor Example\n+[source,java]\n+----\n+import javax.interceptor.Interceptor;\n+import javax.annotation.Priority;\n+\n+@Logged <1>\n+@Priority(2020) <2>\n+@Interceptor <3>\n+public class LoggingInterceptor {\n+\n+   @Inject <4>\n+   Logger logger;\n+\n+   @AroundInvoke <5>\n+   Objec logInvocation(InvocationContext context) {\n+      // ...log before\n+      Objec ret = context.proceed(); <6>\n+      // ...log after\n+      return ret;\n+   }\n+    \n+}\n+----\n+<1> This is an interceptor binding annotation that is used to bind our interceptor to a bean. Simply annotate a bean class with `@Logged`.\n+<2> `Priority` enables the interceptor and affects the the interceptor ordering. \n+<3> Marks an interceptor component.\n+<4> An interceptor instance may be the target of dependency injection.\n+<5> `AroundInvoke` denotes a method that interposes on business methods.\n+<6> Proceed to the next interceptor in the interceptor chain or invoke the intercepted business method.\n+\n+NOTE: Instances of interceptors are dependent objects of the bean instance they intercept, i.e. a new interceptor instance is created for each intercepred bean.", "originalCommit": "63d155041a5447adba997da8577b662969847b05", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDk4MjYxNg==", "url": "https://github.com/quarkusio/quarkus/pull/10529#discussion_r450982616", "bodyText": "Is event part of the CDI Spec ?\nWe already have the Vert.x eventbus for that purpose maybe we can skip this part or just link to the spec here.", "author": "loicmathieu", "createdAt": "2020-07-07T16:12:36Z", "path": "docs/src/main/asciidoc/cdi.adoc", "diffHunk": "@@ -0,0 +1,361 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Introduction to Contexts and Dependency Injection\n+\n+include::./attributes.adoc[]\n+:numbered:\n+:sectnums:\n+:sectnumlevels: 4\n+:toc:\n+\n+In this guide we're going to describe the basic principles of the programming model used all over the Quarkus universe. \n+Quarkus programming model is based on the http://docs.jboss.org/cdi/spec/2.0/cdi-spec.html[Contexts and Dependency Injection for Java 2.0, window=\"_blank\"] specification.\n+However, a full CDI implementation is not used under the hood.\n+Quarkus only implements a subset of the CDI features - see also <<cdi-reference.adoc#supported_features,the list of supported features>> and <<cdi-reference.adoc#limitations,the list of limitations>>.\n+On the other hand, there are quite a few <<cdi-reference#nonstandard_features,non-standard features>> and <<cdi-reference.adoc#build_time_apis,Quarkus-specific APIs>>.\n+We believe that our efforts will drive the innovation of the CDI specification towards the build-time oriented developer stacks in the future.\n+\n+== _Q: OK. Let's start simple. What is a bean?_\n+\n+A: Well, a bean is a _container-managed_ object that supports a set of basic services, such as injection of dependencies, lifecycle callbacks and interceptors.\n+\n+== _Q: Wait a minute. What does it mean container-managed?_\n+\n+A: Simply put, you don't control the lifecycle of the object instance directly.\n+Instead, you can affect the lifecycle through the declarative means, such as annotations, configuration, etc.\n+The container is the _environment_ where your application runs.\n+It creates and destroys the instances of beans, associates the instances with a designated context, and injects them into other beans.\n+\n+== _Q: What is it good for?_\n+\n+A: An application developer can focus on the business logic rather than \"where and how\" to obtain a fully initialized component with all of its dependencies.\n+\n+NOTE: You've probably heard of the _inversion of control_ (IoC) programming principle. Dependency injection is one of the implementation techniques of IoC. \n+\n+== _Q: OK. And what does a bean look like?_\n+\n+A: There are several kinds of beans.\n+The most common ones are class-based beans:\n+\n+.Simple Bean Example\n+[source,java]\n+----\n+import javax.inject.Inject;\n+import javax.enterprise.context.ApplicationScoped;\n+import org.eclipse.microprofile.metrics.annotation.Counted;\n+\n+@ApplicationScoped <1>\n+public class Translator {\n+\n+    @Inject\n+    Dictionary dictionary; <2>\n+    \n+    @Counted  <3>\n+    String translate(String sentence) { \n+      // ...\n+    }\n+}\n+----\n+<1> This is a scope annotation. It tells the container which context to associate the bean instance with. In this particular case, a *single bean instance* is created for the application and used by all dependants.\n+<2> This is a field injection point. It tells the container that `Translator` depends on the `Dictionary` bean. If there is no matching bean the build fails.\n+<3> This is an interceptor binding annotation. In this case, the annotation comes from the MicroProfile Metrics. The relevant interceptor intercepts the invocation and updates the relevant metrics.\n+\n+== _Q: Nice. How does the dependency resolution work? I see no names or identifiers._\n+\n+A: That's a good question.\n+In CDI the process of matching a bean to an injection point is *type-safe*.\n+Each bean declares a set of bean types.\n+In our example above, the `Translator` bean has two bean types: `Translator` and `java.lang.Object`.\n+Subsequently, a bean is assignable to an injection point if the bean has a bean type that matches the _required type_ and has all the _required qualifiers_.\n+We'll talk about qualifiers later.\n+For now, it's enough to know that the bean above is assignable to an injection point of type `Translator` and `java.lang.Object`.\n+\n+== _Q: Hm, wait a minute. What happens if multiple beans declare the same type?_\n+\n+A: There is a simple rule: *exactly one bean must be assignable to an injection point, otherwise the build fails*.\n+If none is assignable the build fails with `UnsatisfiedResolutionException`.\n+If multiple are assignable the build fails with `AmbiguousResolutionException`.\n+This is very useful because your application fails fast whenever the container is not able to find an unambiguous dependency for any injection point.\n+\n+[TIP]\n+====\n+Your can use programmatic lookup via  `javax.enterprise.inject.Instance` to resolve ambiguities at runtime and even iterate over all beans implementing a given type:\n+\n+[source,java]\n+----\n+public class Translator {\n+\n+    @Inject\n+    Instance<Dictionary> dictionaries; <1>\n+    \n+    String translate(String sentence) { \n+      for (Dictionary dict : dictionaries) { <2>\n+         // ...\n+      }\n+    }\n+}\n+----\n+<1> This injection point will not result in an ambiguous dependency even if there are multiple beans that implement the `Dictionary` type.\n+<2> `javax.enterprise.inject.Instance` extends `Iterable`.\n+====\n+\n+== _Q: Can I use setter and constructor injection?_\n+\n+A: Yes, you can.\n+In fact, in CDI the \"setter injection\" is superseded by more powerful https://docs.jboss.org/cdi/spec/2.0/cdi-spec.html#initializer_methods[initializer methods, window=\"_blank\"].\n+Intializers may accept multiple parameters and don't have to follow the JavaBean naming conventions.\n+\n+.Initialized and Constructor Injection Example\n+[source,java]\n+----\n+@ApplicationScoped\n+public class Translator {\n+\n+    private final TranslatorHelper helper\n+\n+    Translator(TranslatorHelper helper) { <1>\n+       this.helper = helper;\n+    }\n+\n+    @Inject <2>\n+    void setDeps(Dictionary dic, LocalizationService locService) { <3>\n+      / ...\n+    }\n+}\n+----\n+<1> This is a constructor injection. In fact, this code would not work in regular CDI implementations where a bean with a normal scope must always declare a no-args constructor. In Quarkus we detect this problem and \"add\" such a constructor directly in the bytecode.\n+<2> An initializer method must be annotated with `@Inject`. \n+<3> An initializer may accept multiple parameters - each one is an injection point.\n+\n+== _Q: You talked about some qualifiers?_\n+\n+A: https://docs.jboss.org/cdi/spec/2.0/cdi-spec.html#qualifiers[Qualifiers, window=\"_blank\"] are annotations that help the container to distinguish beans that implement the same type.\n+As we already said a bean is assignable to an injection point if it has all the required qualifiers.\n+If you declare no qualifier at an injection point the `@Default` qualifier is assumed.\n+\n+.Bean With Custom Qualifier Example\n+[source,java]\n+----\n+@Superior <1>\n+@ApplicationScoped\n+public class SuperiorTranslator extends Translator {\n+\n+    String translate(String sentence) { \n+      // ...\n+    }\n+}\n+----\n+<1> `@Superior` is a https://docs.jboss.org/cdi/spec/2.0/cdi-spec.html#defining_qualifier_types[qualifier annotation, window=\"_blank\"].\n+\n+This bean would be assignable to `@Inject @Superior Translator` and `@Inject @Superior SuperiorTranslator` but not in `@Inject Translator`.\n+The reason is that `@Inject Translator` is automatically transformed to `@Inject @Default Translator` during typesafe resolution.\n+And since our `SuperiorTranslator` does not declare `@Default` only the original `Translator` bean is assignable.\n+\n+== _Q: Looks good. What is the bean scope?_\n+\n+The scope of a bean determines the lifecycle of its instances, i.e. when and where an instance should be created and destroyed.\n+\n+NOTE: Every bean has exactly one scope.\n+\n+== _Q: What scopes can I actually use in my Quarkus application?_\n+\n+A: You can use all the built-in scopes mentioned by the specification except for `javax.enterprise.context.ConversationScoped`.\n+\n+[options=\"header\",cols=\"1,1\"]\n+|===\n+|Annotation   |Description   \n+//----------------------\n+|`@javax.enterprise.context.ApplicationScoped`   | A single bean instance is used for the application and shared among all injection points. The instance is created lazily, i.e. once a method is invoked upon the <<client_proxies, client proxy>>. \n+|`@javax.inject.Singleton`   | Just like `@ApplicationScoped` except that no client proxy is used. The instance is created eagerly.\n+|`@javax.enterprise.context.RequestScoped`   | The bean instance is associated with the current _request_ (usually an HTTP request). \n+|`@javax.enterprise.context.Dependent`   | This is a pseudo-scope. There is no context object that holds all dependent instances. Instead, a dependent instace is a dependent object of the bean it is injected into.\n+|`@javax.enterprise.context.SessionScoped`   | This scope is backed by an `javax.servlet.http.HttpSession` object. It's only available if `quarkus-undertow` extension is used.\n+|===\n+\n+NOTE: There can be other custom scopes provided by Quarkus extension. For example, `qquarkus-narayana-jta` provides `javax.transaction.TransactionScoped`.\n+\n+[[client_proxies]]\n+== _Q: I don't undestand the concept of client proxies._\n+\n+Indeed, the https://docs.jboss.org/cdi/spec/2.0/cdi-spec.html#client_proxies[client proxies, window=\"_blank\"] could be hard to grasp but they provide some useful functionality.\n+A client proxy is basically an object that delegates all method invocations to a target bean instance.\n+It's a container construct that implements `io.quarkus.arc.ClientProxy` and extends the bean class.\n+The client proxy instance is always injected instead of a contextual instance of a normal scoped bean (e.g. `@ApplicationScoped` and `@RequestScoped`).\n+Client proxies allow for:\n+\n+* Lazy instantiation - the instance is created once a method is invoked upon the proxy.\n+* Ability to inject a bean with \"narrower\" scope to a bean with \"wider\" scope; i.e. you can inject a `@RequestScoped` bean into an `@ApplicationScoped` bean.\n+* Circular dependencies in the dependency graph. Circular dependencies are \"bad design\" but sometimes they're inevitable. \n+* In rare cases it's practical to destroy the beans manually. A direct injected reference would lead to a stale bean instance.\n+ \n+ \n+== _Q: OK. You said that there are several kinds of beans?_\n+\n+A: Yes. In general, in Quarkus we distinguish:\n+\n+1. Class beans\n+2. Producer methods\n+3. Producer fields\n+4. Synthetic beans\n+\n+Producer methods are useful if you need additional control over instantiation of a bean.\n+They are also useful when integrating third-party libraries where you don't control the class source and may not add additional annotations etc.\n+\n+.Producer Method Example\n+[source,java]\n+----\n+@ApplicationScoped\n+public class PiProducer {\n+\n+    @Produces <1>\n+    double producePi() { \n+       return Math.PI; <2>\n+    }\n+}\n+\n+@ApplicationScoped\n+public class PiConsumer {\n+\n+   @Inject\n+   double pi; <3>\n+   \n+   double twoPis() {\n+     return pi * 2;\n+   }\n+} \n+----\n+<1> The container analyses the method annotations to build a bean metadata.\n+The return type is used to build the set of bean types. \n+In this case, it will be `double` and `java.lang.Object`.\n+No scope annotation is declared and so it's defaulted to `@Dependent`.\n+<2> The container will delegate to this method when creating the bean instance.\n+<3> `PiProducer#producePi()` is invoked and the result is set to `PiConsumer#pi` when the `PiConsumer` instance is created.\n+\n+NOTE: One of the limitations of producers is that interceptors are not applied to the result of a producer method/field.\n+\n+Producer fields are very similar to producer methods except that the field value is read when obtaining a bean instance.\n+\n+TIP: There's more about producers. You can declare qualifiers, inject dependencies into the producer methods parameters, etc. You can read more about producers for example in the https://docs.jboss.org/weld/reference/latest/en-US/html/beanscdi.html#_producer_methods[Weld docs, window=\"_blank\"].\n+\n+Synthetic beans are usually provided by extensions.\n+A synthetic bean is not backed by a class/method/field.\n+Application developers usually only consume this kind of beans.\n+\n+== _Q: OK injection looks cool. What other services are provided?_\n+\n+=== Lifecycle Callbacks\n+\n+A bean class may declare lifecycle `@PostConstruct` and `@PreDestroy` callbacks:\n+\n+.Lifecycle Callbacks Example\n+[source,java]\n+----\n+import javax.annotation.PostConstruct;\n+import javax.annotation.PreDestroy;\n+\n+@ApplicationScoped\n+public class Translator {\n+\n+    @PostConstruct <1>\n+    void init() {\n+       // ...\n+    }\n+    \n+    @PreDestroy <2>\n+    void destroy() {\n+      // ...\n+    }\n+}\n+----\n+<1> This callback is invoked before the bean instance is put into service. It is safe to perform some initialization here.\n+<2> This callback is invoked before the bean instance is destroyed. It is safe to perform some cleanup tasks here.\n+\n+TIP: It's a good practice to keep the logic in the callbacks \"without side effects\", i.e. you should avoid calling other beans inside the callbacks.\n+\n+=== Interceptors\n+\n+Interceptors are used to separate cross-cutting concerns from business logic. \n+There is a separate specification - Java Interceptors - that defines the basic programming model and semantics.\n+\n+.Simple Interceptor Example\n+[source,java]\n+----\n+import javax.interceptor.Interceptor;\n+import javax.annotation.Priority;\n+\n+@Logged <1>\n+@Priority(2020) <2>\n+@Interceptor <3>\n+public class LoggingInterceptor {\n+\n+   @Inject <4>\n+   Logger logger;\n+\n+   @AroundInvoke <5>\n+   Objec logInvocation(InvocationContext context) {\n+      // ...log before\n+      Objec ret = context.proceed(); <6>\n+      // ...log after\n+      return ret;\n+   }\n+    \n+}\n+----\n+<1> This is an interceptor binding annotation that is used to bind our interceptor to a bean. Simply annotate a bean class with `@Logged`.\n+<2> `Priority` enables the interceptor and affects the the interceptor ordering. \n+<3> Marks an interceptor component.\n+<4> An interceptor instance may be the target of dependency injection.\n+<5> `AroundInvoke` denotes a method that interposes on business methods.\n+<6> Proceed to the next interceptor in the interceptor chain or invoke the intercepted business method.\n+\n+NOTE: Instances of interceptors are dependent objects of the bean instance they intercept, i.e. a new interceptor instance is created for each intercepred bean.\n+\n+=== Events and Observers", "originalCommit": "63d155041a5447adba997da8577b662969847b05", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTAwNjU2Mg==", "url": "https://github.com/quarkusio/quarkus/pull/10529#discussion_r451006562", "bodyText": "I think it makes sense to have them here.", "author": "gsmet", "createdAt": "2020-07-07T16:51:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDk4MjYxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTM0MDU4MA==", "url": "https://github.com/quarkusio/quarkus/pull/10529#discussion_r451340580", "bodyText": "Yes, events and observers are the core part of the CDI spec.", "author": "mkouba", "createdAt": "2020-07-08T07:33:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDk4MjYxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQxMzU3Nw==", "url": "https://github.com/quarkusio/quarkus/pull/10529#discussion_r451413577", "bodyText": "Events and observers are part of core CDI. I don't think it's anyhow linked to Vert.x.", "author": "manovotn", "createdAt": "2020-07-08T09:36:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDk4MjYxNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDk5ODE5Ng==", "url": "https://github.com/quarkusio/quarkus/pull/10529#discussion_r450998196", "bodyText": "I think this part is too detailed for the introduction of this guide. I would put it at the end. Keep in mind that you target people not knowing CDI so they do not really care about this.", "author": "gsmet", "createdAt": "2020-07-07T16:37:43Z", "path": "docs/src/main/asciidoc/cdi.adoc", "diffHunk": "@@ -0,0 +1,361 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Introduction to Contexts and Dependency Injection\n+\n+include::./attributes.adoc[]\n+:numbered:\n+:sectnums:\n+:sectnumlevels: 4\n+:toc:\n+\n+In this guide we're going to describe the basic principles of the programming model used all over the Quarkus universe. \n+Quarkus programming model is based on the http://docs.jboss.org/cdi/spec/2.0/cdi-spec.html[Contexts and Dependency Injection for Java 2.0, window=\"_blank\"] specification.\n+However, a full CDI implementation is not used under the hood.\n+Quarkus only implements a subset of the CDI features - see also <<cdi-reference.adoc#supported_features,the list of supported features>> and <<cdi-reference.adoc#limitations,the list of limitations>>.\n+On the other hand, there are quite a few <<cdi-reference#nonstandard_features,non-standard features>> and <<cdi-reference.adoc#build_time_apis,Quarkus-specific APIs>>.\n+We believe that our efforts will drive the innovation of the CDI specification towards the build-time oriented developer stacks in the future.", "originalCommit": "63d155041a5447adba997da8577b662969847b05", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQwMzEwNg==", "url": "https://github.com/quarkusio/quarkus/pull/10529#discussion_r451403106", "bodyText": "OK, so move all sentences after However,...?", "author": "mkouba", "createdAt": "2020-07-08T09:19:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDk5ODE5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQ2MzIwMw==", "url": "https://github.com/quarkusio/quarkus/pull/10529#discussion_r451463203", "bodyText": "I think you need to choose between introduction to pure CDI where you would avoid Quarkus-specific examples (omitting no-args constructor for instance) and then you can move this text towards the end of the guide. Or you should state ahead that Quarkus does it slightly differently in the name of innovation and then we can keep the guide as-is. Just my 0.02$ :)", "author": "manovotn", "createdAt": "2020-07-08T11:11:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDk5ODE5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQ3MjE0Mg==", "url": "https://github.com/quarkusio/quarkus/pull/10529#discussion_r451472142", "bodyText": "I think you need to choose between introduction to pure CDI...\n\nI tend to disagree. IMHO it's ok to mix the contents. It's a quarkus guide anyway. I moved the sentences to the end.", "author": "mkouba", "createdAt": "2020-07-08T11:29:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDk5ODE5Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTAwMTc0Mw==", "url": "https://github.com/quarkusio/quarkus/pull/10529#discussion_r451001743", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            This bean would be assignable to `@Inject @Superior Translator` and `@Inject @Superior SuperiorTranslator` but not in `@Inject Translator`.\n          \n          \n            \n            This bean would be assignable to `@Inject @Superior Translator` and `@Inject @Superior SuperiorTranslator` but not to `@Inject Translator`.", "author": "gsmet", "createdAt": "2020-07-07T16:43:26Z", "path": "docs/src/main/asciidoc/cdi.adoc", "diffHunk": "@@ -0,0 +1,361 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Introduction to Contexts and Dependency Injection\n+\n+include::./attributes.adoc[]\n+:numbered:\n+:sectnums:\n+:sectnumlevels: 4\n+:toc:\n+\n+In this guide we're going to describe the basic principles of the programming model used all over the Quarkus universe. \n+Quarkus programming model is based on the http://docs.jboss.org/cdi/spec/2.0/cdi-spec.html[Contexts and Dependency Injection for Java 2.0, window=\"_blank\"] specification.\n+However, a full CDI implementation is not used under the hood.\n+Quarkus only implements a subset of the CDI features - see also <<cdi-reference.adoc#supported_features,the list of supported features>> and <<cdi-reference.adoc#limitations,the list of limitations>>.\n+On the other hand, there are quite a few <<cdi-reference#nonstandard_features,non-standard features>> and <<cdi-reference.adoc#build_time_apis,Quarkus-specific APIs>>.\n+We believe that our efforts will drive the innovation of the CDI specification towards the build-time oriented developer stacks in the future.\n+\n+== _Q: OK. Let's start simple. What is a bean?_\n+\n+A: Well, a bean is a _container-managed_ object that supports a set of basic services, such as injection of dependencies, lifecycle callbacks and interceptors.\n+\n+== _Q: Wait a minute. What does it mean container-managed?_\n+\n+A: Simply put, you don't control the lifecycle of the object instance directly.\n+Instead, you can affect the lifecycle through the declarative means, such as annotations, configuration, etc.\n+The container is the _environment_ where your application runs.\n+It creates and destroys the instances of beans, associates the instances with a designated context, and injects them into other beans.\n+\n+== _Q: What is it good for?_\n+\n+A: An application developer can focus on the business logic rather than \"where and how\" to obtain a fully initialized component with all of its dependencies.\n+\n+NOTE: You've probably heard of the _inversion of control_ (IoC) programming principle. Dependency injection is one of the implementation techniques of IoC. \n+\n+== _Q: OK. And what does a bean look like?_\n+\n+A: There are several kinds of beans.\n+The most common ones are class-based beans:\n+\n+.Simple Bean Example\n+[source,java]\n+----\n+import javax.inject.Inject;\n+import javax.enterprise.context.ApplicationScoped;\n+import org.eclipse.microprofile.metrics.annotation.Counted;\n+\n+@ApplicationScoped <1>\n+public class Translator {\n+\n+    @Inject\n+    Dictionary dictionary; <2>\n+    \n+    @Counted  <3>\n+    String translate(String sentence) { \n+      // ...\n+    }\n+}\n+----\n+<1> This is a scope annotation. It tells the container which context to associate the bean instance with. In this particular case, a *single bean instance* is created for the application and used by all dependants.\n+<2> This is a field injection point. It tells the container that `Translator` depends on the `Dictionary` bean. If there is no matching bean the build fails.\n+<3> This is an interceptor binding annotation. In this case, the annotation comes from the MicroProfile Metrics. The relevant interceptor intercepts the invocation and updates the relevant metrics.\n+\n+== _Q: Nice. How does the dependency resolution work? I see no names or identifiers._\n+\n+A: That's a good question.\n+In CDI the process of matching a bean to an injection point is *type-safe*.\n+Each bean declares a set of bean types.\n+In our example above, the `Translator` bean has two bean types: `Translator` and `java.lang.Object`.\n+Subsequently, a bean is assignable to an injection point if the bean has a bean type that matches the _required type_ and has all the _required qualifiers_.\n+We'll talk about qualifiers later.\n+For now, it's enough to know that the bean above is assignable to an injection point of type `Translator` and `java.lang.Object`.\n+\n+== _Q: Hm, wait a minute. What happens if multiple beans declare the same type?_\n+\n+A: There is a simple rule: *exactly one bean must be assignable to an injection point, otherwise the build fails*.\n+If none is assignable the build fails with `UnsatisfiedResolutionException`.\n+If multiple are assignable the build fails with `AmbiguousResolutionException`.\n+This is very useful because your application fails fast whenever the container is not able to find an unambiguous dependency for any injection point.\n+\n+[TIP]\n+====\n+Your can use programmatic lookup via  `javax.enterprise.inject.Instance` to resolve ambiguities at runtime and even iterate over all beans implementing a given type:\n+\n+[source,java]\n+----\n+public class Translator {\n+\n+    @Inject\n+    Instance<Dictionary> dictionaries; <1>\n+    \n+    String translate(String sentence) { \n+      for (Dictionary dict : dictionaries) { <2>\n+         // ...\n+      }\n+    }\n+}\n+----\n+<1> This injection point will not result in an ambiguous dependency even if there are multiple beans that implement the `Dictionary` type.\n+<2> `javax.enterprise.inject.Instance` extends `Iterable`.\n+====\n+\n+== _Q: Can I use setter and constructor injection?_\n+\n+A: Yes, you can.\n+In fact, in CDI the \"setter injection\" is superseded by more powerful https://docs.jboss.org/cdi/spec/2.0/cdi-spec.html#initializer_methods[initializer methods, window=\"_blank\"].\n+Intializers may accept multiple parameters and don't have to follow the JavaBean naming conventions.\n+\n+.Initialized and Constructor Injection Example\n+[source,java]\n+----\n+@ApplicationScoped\n+public class Translator {\n+\n+    private final TranslatorHelper helper\n+\n+    Translator(TranslatorHelper helper) { <1>\n+       this.helper = helper;\n+    }\n+\n+    @Inject <2>\n+    void setDeps(Dictionary dic, LocalizationService locService) { <3>\n+      / ...\n+    }\n+}\n+----\n+<1> This is a constructor injection. In fact, this code would not work in regular CDI implementations where a bean with a normal scope must always declare a no-args constructor. In Quarkus we detect this problem and \"add\" such a constructor directly in the bytecode.\n+<2> An initializer method must be annotated with `@Inject`. \n+<3> An initializer may accept multiple parameters - each one is an injection point.\n+\n+== _Q: You talked about some qualifiers?_\n+\n+A: https://docs.jboss.org/cdi/spec/2.0/cdi-spec.html#qualifiers[Qualifiers, window=\"_blank\"] are annotations that help the container to distinguish beans that implement the same type.\n+As we already said a bean is assignable to an injection point if it has all the required qualifiers.\n+If you declare no qualifier at an injection point the `@Default` qualifier is assumed.\n+\n+.Bean With Custom Qualifier Example\n+[source,java]\n+----\n+@Superior <1>\n+@ApplicationScoped\n+public class SuperiorTranslator extends Translator {\n+\n+    String translate(String sentence) { \n+      // ...\n+    }\n+}\n+----\n+<1> `@Superior` is a https://docs.jboss.org/cdi/spec/2.0/cdi-spec.html#defining_qualifier_types[qualifier annotation, window=\"_blank\"].\n+\n+This bean would be assignable to `@Inject @Superior Translator` and `@Inject @Superior SuperiorTranslator` but not in `@Inject Translator`.", "originalCommit": "63d155041a5447adba997da8577b662969847b05", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTAwMjExNw==", "url": "https://github.com/quarkusio/quarkus/pull/10529#discussion_r451002117", "bodyText": "Should we explain how you create a qualifier?", "author": "gsmet", "createdAt": "2020-07-07T16:44:01Z", "path": "docs/src/main/asciidoc/cdi.adoc", "diffHunk": "@@ -0,0 +1,361 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Introduction to Contexts and Dependency Injection\n+\n+include::./attributes.adoc[]\n+:numbered:\n+:sectnums:\n+:sectnumlevels: 4\n+:toc:\n+\n+In this guide we're going to describe the basic principles of the programming model used all over the Quarkus universe. \n+Quarkus programming model is based on the http://docs.jboss.org/cdi/spec/2.0/cdi-spec.html[Contexts and Dependency Injection for Java 2.0, window=\"_blank\"] specification.\n+However, a full CDI implementation is not used under the hood.\n+Quarkus only implements a subset of the CDI features - see also <<cdi-reference.adoc#supported_features,the list of supported features>> and <<cdi-reference.adoc#limitations,the list of limitations>>.\n+On the other hand, there are quite a few <<cdi-reference#nonstandard_features,non-standard features>> and <<cdi-reference.adoc#build_time_apis,Quarkus-specific APIs>>.\n+We believe that our efforts will drive the innovation of the CDI specification towards the build-time oriented developer stacks in the future.\n+\n+== _Q: OK. Let's start simple. What is a bean?_\n+\n+A: Well, a bean is a _container-managed_ object that supports a set of basic services, such as injection of dependencies, lifecycle callbacks and interceptors.\n+\n+== _Q: Wait a minute. What does it mean container-managed?_\n+\n+A: Simply put, you don't control the lifecycle of the object instance directly.\n+Instead, you can affect the lifecycle through the declarative means, such as annotations, configuration, etc.\n+The container is the _environment_ where your application runs.\n+It creates and destroys the instances of beans, associates the instances with a designated context, and injects them into other beans.\n+\n+== _Q: What is it good for?_\n+\n+A: An application developer can focus on the business logic rather than \"where and how\" to obtain a fully initialized component with all of its dependencies.\n+\n+NOTE: You've probably heard of the _inversion of control_ (IoC) programming principle. Dependency injection is one of the implementation techniques of IoC. \n+\n+== _Q: OK. And what does a bean look like?_\n+\n+A: There are several kinds of beans.\n+The most common ones are class-based beans:\n+\n+.Simple Bean Example\n+[source,java]\n+----\n+import javax.inject.Inject;\n+import javax.enterprise.context.ApplicationScoped;\n+import org.eclipse.microprofile.metrics.annotation.Counted;\n+\n+@ApplicationScoped <1>\n+public class Translator {\n+\n+    @Inject\n+    Dictionary dictionary; <2>\n+    \n+    @Counted  <3>\n+    String translate(String sentence) { \n+      // ...\n+    }\n+}\n+----\n+<1> This is a scope annotation. It tells the container which context to associate the bean instance with. In this particular case, a *single bean instance* is created for the application and used by all dependants.\n+<2> This is a field injection point. It tells the container that `Translator` depends on the `Dictionary` bean. If there is no matching bean the build fails.\n+<3> This is an interceptor binding annotation. In this case, the annotation comes from the MicroProfile Metrics. The relevant interceptor intercepts the invocation and updates the relevant metrics.\n+\n+== _Q: Nice. How does the dependency resolution work? I see no names or identifiers._\n+\n+A: That's a good question.\n+In CDI the process of matching a bean to an injection point is *type-safe*.\n+Each bean declares a set of bean types.\n+In our example above, the `Translator` bean has two bean types: `Translator` and `java.lang.Object`.\n+Subsequently, a bean is assignable to an injection point if the bean has a bean type that matches the _required type_ and has all the _required qualifiers_.\n+We'll talk about qualifiers later.\n+For now, it's enough to know that the bean above is assignable to an injection point of type `Translator` and `java.lang.Object`.\n+\n+== _Q: Hm, wait a minute. What happens if multiple beans declare the same type?_\n+\n+A: There is a simple rule: *exactly one bean must be assignable to an injection point, otherwise the build fails*.\n+If none is assignable the build fails with `UnsatisfiedResolutionException`.\n+If multiple are assignable the build fails with `AmbiguousResolutionException`.\n+This is very useful because your application fails fast whenever the container is not able to find an unambiguous dependency for any injection point.\n+\n+[TIP]\n+====\n+Your can use programmatic lookup via  `javax.enterprise.inject.Instance` to resolve ambiguities at runtime and even iterate over all beans implementing a given type:\n+\n+[source,java]\n+----\n+public class Translator {\n+\n+    @Inject\n+    Instance<Dictionary> dictionaries; <1>\n+    \n+    String translate(String sentence) { \n+      for (Dictionary dict : dictionaries) { <2>\n+         // ...\n+      }\n+    }\n+}\n+----\n+<1> This injection point will not result in an ambiguous dependency even if there are multiple beans that implement the `Dictionary` type.\n+<2> `javax.enterprise.inject.Instance` extends `Iterable`.\n+====\n+\n+== _Q: Can I use setter and constructor injection?_\n+\n+A: Yes, you can.\n+In fact, in CDI the \"setter injection\" is superseded by more powerful https://docs.jboss.org/cdi/spec/2.0/cdi-spec.html#initializer_methods[initializer methods, window=\"_blank\"].\n+Intializers may accept multiple parameters and don't have to follow the JavaBean naming conventions.\n+\n+.Initialized and Constructor Injection Example\n+[source,java]\n+----\n+@ApplicationScoped\n+public class Translator {\n+\n+    private final TranslatorHelper helper\n+\n+    Translator(TranslatorHelper helper) { <1>\n+       this.helper = helper;\n+    }\n+\n+    @Inject <2>\n+    void setDeps(Dictionary dic, LocalizationService locService) { <3>\n+      / ...\n+    }\n+}\n+----\n+<1> This is a constructor injection. In fact, this code would not work in regular CDI implementations where a bean with a normal scope must always declare a no-args constructor. In Quarkus we detect this problem and \"add\" such a constructor directly in the bytecode.\n+<2> An initializer method must be annotated with `@Inject`. \n+<3> An initializer may accept multiple parameters - each one is an injection point.\n+\n+== _Q: You talked about some qualifiers?_\n+\n+A: https://docs.jboss.org/cdi/spec/2.0/cdi-spec.html#qualifiers[Qualifiers, window=\"_blank\"] are annotations that help the container to distinguish beans that implement the same type.\n+As we already said a bean is assignable to an injection point if it has all the required qualifiers.\n+If you declare no qualifier at an injection point the `@Default` qualifier is assumed.\n+\n+.Bean With Custom Qualifier Example\n+[source,java]\n+----\n+@Superior <1>\n+@ApplicationScoped\n+public class SuperiorTranslator extends Translator {\n+\n+    String translate(String sentence) { \n+      // ...\n+    }\n+}\n+----\n+<1> `@Superior` is a https://docs.jboss.org/cdi/spec/2.0/cdi-spec.html#defining_qualifier_types[qualifier annotation, window=\"_blank\"].\n+\n+This bean would be assignable to `@Inject @Superior Translator` and `@Inject @Superior SuperiorTranslator` but not in `@Inject Translator`.\n+The reason is that `@Inject Translator` is automatically transformed to `@Inject @Default Translator` during typesafe resolution.\n+And since our `SuperiorTranslator` does not declare `@Default` only the original `Translator` bean is assignable.", "originalCommit": "63d155041a5447adba997da8577b662969847b05", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTMzOTc3OQ==", "url": "https://github.com/quarkusio/quarkus/pull/10529#discussion_r451339779", "bodyText": "+1", "author": "mkouba", "createdAt": "2020-07-08T07:31:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTAwMjExNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTM5NjA0Mg==", "url": "https://github.com/quarkusio/quarkus/pull/10529#discussion_r451396042", "bodyText": "I think that's covered in the links to spec. You literally just copy the code it links to.", "author": "manovotn", "createdAt": "2020-07-08T09:06:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTAwMjExNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTAwMjY2Mw==", "url": "https://github.com/quarkusio/quarkus/pull/10529#discussion_r451002663", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            |`@javax.enterprise.context.Dependent`   | This is a pseudo-scope. There is no context object that holds all dependent instances. Instead, a dependent instace is a dependent object of the bean it is injected into.\n          \n          \n            \n            |`@javax.enterprise.context.Dependent`   | This is a pseudo-scope. There is no context object that holds all dependent instances. Instead, a dependent instance is a dependent object of the bean it is injected into.", "author": "gsmet", "createdAt": "2020-07-07T16:44:55Z", "path": "docs/src/main/asciidoc/cdi.adoc", "diffHunk": "@@ -0,0 +1,361 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Introduction to Contexts and Dependency Injection\n+\n+include::./attributes.adoc[]\n+:numbered:\n+:sectnums:\n+:sectnumlevels: 4\n+:toc:\n+\n+In this guide we're going to describe the basic principles of the programming model used all over the Quarkus universe. \n+Quarkus programming model is based on the http://docs.jboss.org/cdi/spec/2.0/cdi-spec.html[Contexts and Dependency Injection for Java 2.0, window=\"_blank\"] specification.\n+However, a full CDI implementation is not used under the hood.\n+Quarkus only implements a subset of the CDI features - see also <<cdi-reference.adoc#supported_features,the list of supported features>> and <<cdi-reference.adoc#limitations,the list of limitations>>.\n+On the other hand, there are quite a few <<cdi-reference#nonstandard_features,non-standard features>> and <<cdi-reference.adoc#build_time_apis,Quarkus-specific APIs>>.\n+We believe that our efforts will drive the innovation of the CDI specification towards the build-time oriented developer stacks in the future.\n+\n+== _Q: OK. Let's start simple. What is a bean?_\n+\n+A: Well, a bean is a _container-managed_ object that supports a set of basic services, such as injection of dependencies, lifecycle callbacks and interceptors.\n+\n+== _Q: Wait a minute. What does it mean container-managed?_\n+\n+A: Simply put, you don't control the lifecycle of the object instance directly.\n+Instead, you can affect the lifecycle through the declarative means, such as annotations, configuration, etc.\n+The container is the _environment_ where your application runs.\n+It creates and destroys the instances of beans, associates the instances with a designated context, and injects them into other beans.\n+\n+== _Q: What is it good for?_\n+\n+A: An application developer can focus on the business logic rather than \"where and how\" to obtain a fully initialized component with all of its dependencies.\n+\n+NOTE: You've probably heard of the _inversion of control_ (IoC) programming principle. Dependency injection is one of the implementation techniques of IoC. \n+\n+== _Q: OK. And what does a bean look like?_\n+\n+A: There are several kinds of beans.\n+The most common ones are class-based beans:\n+\n+.Simple Bean Example\n+[source,java]\n+----\n+import javax.inject.Inject;\n+import javax.enterprise.context.ApplicationScoped;\n+import org.eclipse.microprofile.metrics.annotation.Counted;\n+\n+@ApplicationScoped <1>\n+public class Translator {\n+\n+    @Inject\n+    Dictionary dictionary; <2>\n+    \n+    @Counted  <3>\n+    String translate(String sentence) { \n+      // ...\n+    }\n+}\n+----\n+<1> This is a scope annotation. It tells the container which context to associate the bean instance with. In this particular case, a *single bean instance* is created for the application and used by all dependants.\n+<2> This is a field injection point. It tells the container that `Translator` depends on the `Dictionary` bean. If there is no matching bean the build fails.\n+<3> This is an interceptor binding annotation. In this case, the annotation comes from the MicroProfile Metrics. The relevant interceptor intercepts the invocation and updates the relevant metrics.\n+\n+== _Q: Nice. How does the dependency resolution work? I see no names or identifiers._\n+\n+A: That's a good question.\n+In CDI the process of matching a bean to an injection point is *type-safe*.\n+Each bean declares a set of bean types.\n+In our example above, the `Translator` bean has two bean types: `Translator` and `java.lang.Object`.\n+Subsequently, a bean is assignable to an injection point if the bean has a bean type that matches the _required type_ and has all the _required qualifiers_.\n+We'll talk about qualifiers later.\n+For now, it's enough to know that the bean above is assignable to an injection point of type `Translator` and `java.lang.Object`.\n+\n+== _Q: Hm, wait a minute. What happens if multiple beans declare the same type?_\n+\n+A: There is a simple rule: *exactly one bean must be assignable to an injection point, otherwise the build fails*.\n+If none is assignable the build fails with `UnsatisfiedResolutionException`.\n+If multiple are assignable the build fails with `AmbiguousResolutionException`.\n+This is very useful because your application fails fast whenever the container is not able to find an unambiguous dependency for any injection point.\n+\n+[TIP]\n+====\n+Your can use programmatic lookup via  `javax.enterprise.inject.Instance` to resolve ambiguities at runtime and even iterate over all beans implementing a given type:\n+\n+[source,java]\n+----\n+public class Translator {\n+\n+    @Inject\n+    Instance<Dictionary> dictionaries; <1>\n+    \n+    String translate(String sentence) { \n+      for (Dictionary dict : dictionaries) { <2>\n+         // ...\n+      }\n+    }\n+}\n+----\n+<1> This injection point will not result in an ambiguous dependency even if there are multiple beans that implement the `Dictionary` type.\n+<2> `javax.enterprise.inject.Instance` extends `Iterable`.\n+====\n+\n+== _Q: Can I use setter and constructor injection?_\n+\n+A: Yes, you can.\n+In fact, in CDI the \"setter injection\" is superseded by more powerful https://docs.jboss.org/cdi/spec/2.0/cdi-spec.html#initializer_methods[initializer methods, window=\"_blank\"].\n+Intializers may accept multiple parameters and don't have to follow the JavaBean naming conventions.\n+\n+.Initialized and Constructor Injection Example\n+[source,java]\n+----\n+@ApplicationScoped\n+public class Translator {\n+\n+    private final TranslatorHelper helper\n+\n+    Translator(TranslatorHelper helper) { <1>\n+       this.helper = helper;\n+    }\n+\n+    @Inject <2>\n+    void setDeps(Dictionary dic, LocalizationService locService) { <3>\n+      / ...\n+    }\n+}\n+----\n+<1> This is a constructor injection. In fact, this code would not work in regular CDI implementations where a bean with a normal scope must always declare a no-args constructor. In Quarkus we detect this problem and \"add\" such a constructor directly in the bytecode.\n+<2> An initializer method must be annotated with `@Inject`. \n+<3> An initializer may accept multiple parameters - each one is an injection point.\n+\n+== _Q: You talked about some qualifiers?_\n+\n+A: https://docs.jboss.org/cdi/spec/2.0/cdi-spec.html#qualifiers[Qualifiers, window=\"_blank\"] are annotations that help the container to distinguish beans that implement the same type.\n+As we already said a bean is assignable to an injection point if it has all the required qualifiers.\n+If you declare no qualifier at an injection point the `@Default` qualifier is assumed.\n+\n+.Bean With Custom Qualifier Example\n+[source,java]\n+----\n+@Superior <1>\n+@ApplicationScoped\n+public class SuperiorTranslator extends Translator {\n+\n+    String translate(String sentence) { \n+      // ...\n+    }\n+}\n+----\n+<1> `@Superior` is a https://docs.jboss.org/cdi/spec/2.0/cdi-spec.html#defining_qualifier_types[qualifier annotation, window=\"_blank\"].\n+\n+This bean would be assignable to `@Inject @Superior Translator` and `@Inject @Superior SuperiorTranslator` but not in `@Inject Translator`.\n+The reason is that `@Inject Translator` is automatically transformed to `@Inject @Default Translator` during typesafe resolution.\n+And since our `SuperiorTranslator` does not declare `@Default` only the original `Translator` bean is assignable.\n+\n+== _Q: Looks good. What is the bean scope?_\n+\n+The scope of a bean determines the lifecycle of its instances, i.e. when and where an instance should be created and destroyed.\n+\n+NOTE: Every bean has exactly one scope.\n+\n+== _Q: What scopes can I actually use in my Quarkus application?_\n+\n+A: You can use all the built-in scopes mentioned by the specification except for `javax.enterprise.context.ConversationScoped`.\n+\n+[options=\"header\",cols=\"1,1\"]\n+|===\n+|Annotation   |Description   \n+//----------------------\n+|`@javax.enterprise.context.ApplicationScoped`   | A single bean instance is used for the application and shared among all injection points. The instance is created lazily, i.e. once a method is invoked upon the <<client_proxies, client proxy>>. \n+|`@javax.inject.Singleton`   | Just like `@ApplicationScoped` except that no client proxy is used. The instance is created eagerly.\n+|`@javax.enterprise.context.RequestScoped`   | The bean instance is associated with the current _request_ (usually an HTTP request). \n+|`@javax.enterprise.context.Dependent`   | This is a pseudo-scope. There is no context object that holds all dependent instances. Instead, a dependent instace is a dependent object of the bean it is injected into.", "originalCommit": "63d155041a5447adba997da8577b662969847b05", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTAwMjg2Nw==", "url": "https://github.com/quarkusio/quarkus/pull/10529#discussion_r451002867", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            |`@javax.enterprise.context.SessionScoped`   | This scope is backed by an `javax.servlet.http.HttpSession` object. It's only available if `quarkus-undertow` extension is used.\n          \n          \n            \n            |`@javax.enterprise.context.SessionScoped`   | This scope is backed by an `javax.servlet.http.HttpSession` object. It's only available if the `quarkus-undertow` extension is used.", "author": "gsmet", "createdAt": "2020-07-07T16:45:13Z", "path": "docs/src/main/asciidoc/cdi.adoc", "diffHunk": "@@ -0,0 +1,361 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Introduction to Contexts and Dependency Injection\n+\n+include::./attributes.adoc[]\n+:numbered:\n+:sectnums:\n+:sectnumlevels: 4\n+:toc:\n+\n+In this guide we're going to describe the basic principles of the programming model used all over the Quarkus universe. \n+Quarkus programming model is based on the http://docs.jboss.org/cdi/spec/2.0/cdi-spec.html[Contexts and Dependency Injection for Java 2.0, window=\"_blank\"] specification.\n+However, a full CDI implementation is not used under the hood.\n+Quarkus only implements a subset of the CDI features - see also <<cdi-reference.adoc#supported_features,the list of supported features>> and <<cdi-reference.adoc#limitations,the list of limitations>>.\n+On the other hand, there are quite a few <<cdi-reference#nonstandard_features,non-standard features>> and <<cdi-reference.adoc#build_time_apis,Quarkus-specific APIs>>.\n+We believe that our efforts will drive the innovation of the CDI specification towards the build-time oriented developer stacks in the future.\n+\n+== _Q: OK. Let's start simple. What is a bean?_\n+\n+A: Well, a bean is a _container-managed_ object that supports a set of basic services, such as injection of dependencies, lifecycle callbacks and interceptors.\n+\n+== _Q: Wait a minute. What does it mean container-managed?_\n+\n+A: Simply put, you don't control the lifecycle of the object instance directly.\n+Instead, you can affect the lifecycle through the declarative means, such as annotations, configuration, etc.\n+The container is the _environment_ where your application runs.\n+It creates and destroys the instances of beans, associates the instances with a designated context, and injects them into other beans.\n+\n+== _Q: What is it good for?_\n+\n+A: An application developer can focus on the business logic rather than \"where and how\" to obtain a fully initialized component with all of its dependencies.\n+\n+NOTE: You've probably heard of the _inversion of control_ (IoC) programming principle. Dependency injection is one of the implementation techniques of IoC. \n+\n+== _Q: OK. And what does a bean look like?_\n+\n+A: There are several kinds of beans.\n+The most common ones are class-based beans:\n+\n+.Simple Bean Example\n+[source,java]\n+----\n+import javax.inject.Inject;\n+import javax.enterprise.context.ApplicationScoped;\n+import org.eclipse.microprofile.metrics.annotation.Counted;\n+\n+@ApplicationScoped <1>\n+public class Translator {\n+\n+    @Inject\n+    Dictionary dictionary; <2>\n+    \n+    @Counted  <3>\n+    String translate(String sentence) { \n+      // ...\n+    }\n+}\n+----\n+<1> This is a scope annotation. It tells the container which context to associate the bean instance with. In this particular case, a *single bean instance* is created for the application and used by all dependants.\n+<2> This is a field injection point. It tells the container that `Translator` depends on the `Dictionary` bean. If there is no matching bean the build fails.\n+<3> This is an interceptor binding annotation. In this case, the annotation comes from the MicroProfile Metrics. The relevant interceptor intercepts the invocation and updates the relevant metrics.\n+\n+== _Q: Nice. How does the dependency resolution work? I see no names or identifiers._\n+\n+A: That's a good question.\n+In CDI the process of matching a bean to an injection point is *type-safe*.\n+Each bean declares a set of bean types.\n+In our example above, the `Translator` bean has two bean types: `Translator` and `java.lang.Object`.\n+Subsequently, a bean is assignable to an injection point if the bean has a bean type that matches the _required type_ and has all the _required qualifiers_.\n+We'll talk about qualifiers later.\n+For now, it's enough to know that the bean above is assignable to an injection point of type `Translator` and `java.lang.Object`.\n+\n+== _Q: Hm, wait a minute. What happens if multiple beans declare the same type?_\n+\n+A: There is a simple rule: *exactly one bean must be assignable to an injection point, otherwise the build fails*.\n+If none is assignable the build fails with `UnsatisfiedResolutionException`.\n+If multiple are assignable the build fails with `AmbiguousResolutionException`.\n+This is very useful because your application fails fast whenever the container is not able to find an unambiguous dependency for any injection point.\n+\n+[TIP]\n+====\n+Your can use programmatic lookup via  `javax.enterprise.inject.Instance` to resolve ambiguities at runtime and even iterate over all beans implementing a given type:\n+\n+[source,java]\n+----\n+public class Translator {\n+\n+    @Inject\n+    Instance<Dictionary> dictionaries; <1>\n+    \n+    String translate(String sentence) { \n+      for (Dictionary dict : dictionaries) { <2>\n+         // ...\n+      }\n+    }\n+}\n+----\n+<1> This injection point will not result in an ambiguous dependency even if there are multiple beans that implement the `Dictionary` type.\n+<2> `javax.enterprise.inject.Instance` extends `Iterable`.\n+====\n+\n+== _Q: Can I use setter and constructor injection?_\n+\n+A: Yes, you can.\n+In fact, in CDI the \"setter injection\" is superseded by more powerful https://docs.jboss.org/cdi/spec/2.0/cdi-spec.html#initializer_methods[initializer methods, window=\"_blank\"].\n+Intializers may accept multiple parameters and don't have to follow the JavaBean naming conventions.\n+\n+.Initialized and Constructor Injection Example\n+[source,java]\n+----\n+@ApplicationScoped\n+public class Translator {\n+\n+    private final TranslatorHelper helper\n+\n+    Translator(TranslatorHelper helper) { <1>\n+       this.helper = helper;\n+    }\n+\n+    @Inject <2>\n+    void setDeps(Dictionary dic, LocalizationService locService) { <3>\n+      / ...\n+    }\n+}\n+----\n+<1> This is a constructor injection. In fact, this code would not work in regular CDI implementations where a bean with a normal scope must always declare a no-args constructor. In Quarkus we detect this problem and \"add\" such a constructor directly in the bytecode.\n+<2> An initializer method must be annotated with `@Inject`. \n+<3> An initializer may accept multiple parameters - each one is an injection point.\n+\n+== _Q: You talked about some qualifiers?_\n+\n+A: https://docs.jboss.org/cdi/spec/2.0/cdi-spec.html#qualifiers[Qualifiers, window=\"_blank\"] are annotations that help the container to distinguish beans that implement the same type.\n+As we already said a bean is assignable to an injection point if it has all the required qualifiers.\n+If you declare no qualifier at an injection point the `@Default` qualifier is assumed.\n+\n+.Bean With Custom Qualifier Example\n+[source,java]\n+----\n+@Superior <1>\n+@ApplicationScoped\n+public class SuperiorTranslator extends Translator {\n+\n+    String translate(String sentence) { \n+      // ...\n+    }\n+}\n+----\n+<1> `@Superior` is a https://docs.jboss.org/cdi/spec/2.0/cdi-spec.html#defining_qualifier_types[qualifier annotation, window=\"_blank\"].\n+\n+This bean would be assignable to `@Inject @Superior Translator` and `@Inject @Superior SuperiorTranslator` but not in `@Inject Translator`.\n+The reason is that `@Inject Translator` is automatically transformed to `@Inject @Default Translator` during typesafe resolution.\n+And since our `SuperiorTranslator` does not declare `@Default` only the original `Translator` bean is assignable.\n+\n+== _Q: Looks good. What is the bean scope?_\n+\n+The scope of a bean determines the lifecycle of its instances, i.e. when and where an instance should be created and destroyed.\n+\n+NOTE: Every bean has exactly one scope.\n+\n+== _Q: What scopes can I actually use in my Quarkus application?_\n+\n+A: You can use all the built-in scopes mentioned by the specification except for `javax.enterprise.context.ConversationScoped`.\n+\n+[options=\"header\",cols=\"1,1\"]\n+|===\n+|Annotation   |Description   \n+//----------------------\n+|`@javax.enterprise.context.ApplicationScoped`   | A single bean instance is used for the application and shared among all injection points. The instance is created lazily, i.e. once a method is invoked upon the <<client_proxies, client proxy>>. \n+|`@javax.inject.Singleton`   | Just like `@ApplicationScoped` except that no client proxy is used. The instance is created eagerly.\n+|`@javax.enterprise.context.RequestScoped`   | The bean instance is associated with the current _request_ (usually an HTTP request). \n+|`@javax.enterprise.context.Dependent`   | This is a pseudo-scope. There is no context object that holds all dependent instances. Instead, a dependent instace is a dependent object of the bean it is injected into.\n+|`@javax.enterprise.context.SessionScoped`   | This scope is backed by an `javax.servlet.http.HttpSession` object. It's only available if `quarkus-undertow` extension is used.", "originalCommit": "63d155041a5447adba997da8577b662969847b05", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTAwMzEwNg==", "url": "https://github.com/quarkusio/quarkus/pull/10529#discussion_r451003106", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            NOTE: There can be other custom scopes provided by Quarkus extension. For example, `qquarkus-narayana-jta` provides `javax.transaction.TransactionScoped`.\n          \n          \n            \n            NOTE: There can be other custom scopes provided by Quarkus extensions. For example, `quarkus-narayana-jta` provides `javax.transaction.TransactionScoped`.", "author": "gsmet", "createdAt": "2020-07-07T16:45:34Z", "path": "docs/src/main/asciidoc/cdi.adoc", "diffHunk": "@@ -0,0 +1,361 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Introduction to Contexts and Dependency Injection\n+\n+include::./attributes.adoc[]\n+:numbered:\n+:sectnums:\n+:sectnumlevels: 4\n+:toc:\n+\n+In this guide we're going to describe the basic principles of the programming model used all over the Quarkus universe. \n+Quarkus programming model is based on the http://docs.jboss.org/cdi/spec/2.0/cdi-spec.html[Contexts and Dependency Injection for Java 2.0, window=\"_blank\"] specification.\n+However, a full CDI implementation is not used under the hood.\n+Quarkus only implements a subset of the CDI features - see also <<cdi-reference.adoc#supported_features,the list of supported features>> and <<cdi-reference.adoc#limitations,the list of limitations>>.\n+On the other hand, there are quite a few <<cdi-reference#nonstandard_features,non-standard features>> and <<cdi-reference.adoc#build_time_apis,Quarkus-specific APIs>>.\n+We believe that our efforts will drive the innovation of the CDI specification towards the build-time oriented developer stacks in the future.\n+\n+== _Q: OK. Let's start simple. What is a bean?_\n+\n+A: Well, a bean is a _container-managed_ object that supports a set of basic services, such as injection of dependencies, lifecycle callbacks and interceptors.\n+\n+== _Q: Wait a minute. What does it mean container-managed?_\n+\n+A: Simply put, you don't control the lifecycle of the object instance directly.\n+Instead, you can affect the lifecycle through the declarative means, such as annotations, configuration, etc.\n+The container is the _environment_ where your application runs.\n+It creates and destroys the instances of beans, associates the instances with a designated context, and injects them into other beans.\n+\n+== _Q: What is it good for?_\n+\n+A: An application developer can focus on the business logic rather than \"where and how\" to obtain a fully initialized component with all of its dependencies.\n+\n+NOTE: You've probably heard of the _inversion of control_ (IoC) programming principle. Dependency injection is one of the implementation techniques of IoC. \n+\n+== _Q: OK. And what does a bean look like?_\n+\n+A: There are several kinds of beans.\n+The most common ones are class-based beans:\n+\n+.Simple Bean Example\n+[source,java]\n+----\n+import javax.inject.Inject;\n+import javax.enterprise.context.ApplicationScoped;\n+import org.eclipse.microprofile.metrics.annotation.Counted;\n+\n+@ApplicationScoped <1>\n+public class Translator {\n+\n+    @Inject\n+    Dictionary dictionary; <2>\n+    \n+    @Counted  <3>\n+    String translate(String sentence) { \n+      // ...\n+    }\n+}\n+----\n+<1> This is a scope annotation. It tells the container which context to associate the bean instance with. In this particular case, a *single bean instance* is created for the application and used by all dependants.\n+<2> This is a field injection point. It tells the container that `Translator` depends on the `Dictionary` bean. If there is no matching bean the build fails.\n+<3> This is an interceptor binding annotation. In this case, the annotation comes from the MicroProfile Metrics. The relevant interceptor intercepts the invocation and updates the relevant metrics.\n+\n+== _Q: Nice. How does the dependency resolution work? I see no names or identifiers._\n+\n+A: That's a good question.\n+In CDI the process of matching a bean to an injection point is *type-safe*.\n+Each bean declares a set of bean types.\n+In our example above, the `Translator` bean has two bean types: `Translator` and `java.lang.Object`.\n+Subsequently, a bean is assignable to an injection point if the bean has a bean type that matches the _required type_ and has all the _required qualifiers_.\n+We'll talk about qualifiers later.\n+For now, it's enough to know that the bean above is assignable to an injection point of type `Translator` and `java.lang.Object`.\n+\n+== _Q: Hm, wait a minute. What happens if multiple beans declare the same type?_\n+\n+A: There is a simple rule: *exactly one bean must be assignable to an injection point, otherwise the build fails*.\n+If none is assignable the build fails with `UnsatisfiedResolutionException`.\n+If multiple are assignable the build fails with `AmbiguousResolutionException`.\n+This is very useful because your application fails fast whenever the container is not able to find an unambiguous dependency for any injection point.\n+\n+[TIP]\n+====\n+Your can use programmatic lookup via  `javax.enterprise.inject.Instance` to resolve ambiguities at runtime and even iterate over all beans implementing a given type:\n+\n+[source,java]\n+----\n+public class Translator {\n+\n+    @Inject\n+    Instance<Dictionary> dictionaries; <1>\n+    \n+    String translate(String sentence) { \n+      for (Dictionary dict : dictionaries) { <2>\n+         // ...\n+      }\n+    }\n+}\n+----\n+<1> This injection point will not result in an ambiguous dependency even if there are multiple beans that implement the `Dictionary` type.\n+<2> `javax.enterprise.inject.Instance` extends `Iterable`.\n+====\n+\n+== _Q: Can I use setter and constructor injection?_\n+\n+A: Yes, you can.\n+In fact, in CDI the \"setter injection\" is superseded by more powerful https://docs.jboss.org/cdi/spec/2.0/cdi-spec.html#initializer_methods[initializer methods, window=\"_blank\"].\n+Intializers may accept multiple parameters and don't have to follow the JavaBean naming conventions.\n+\n+.Initialized and Constructor Injection Example\n+[source,java]\n+----\n+@ApplicationScoped\n+public class Translator {\n+\n+    private final TranslatorHelper helper\n+\n+    Translator(TranslatorHelper helper) { <1>\n+       this.helper = helper;\n+    }\n+\n+    @Inject <2>\n+    void setDeps(Dictionary dic, LocalizationService locService) { <3>\n+      / ...\n+    }\n+}\n+----\n+<1> This is a constructor injection. In fact, this code would not work in regular CDI implementations where a bean with a normal scope must always declare a no-args constructor. In Quarkus we detect this problem and \"add\" such a constructor directly in the bytecode.\n+<2> An initializer method must be annotated with `@Inject`. \n+<3> An initializer may accept multiple parameters - each one is an injection point.\n+\n+== _Q: You talked about some qualifiers?_\n+\n+A: https://docs.jboss.org/cdi/spec/2.0/cdi-spec.html#qualifiers[Qualifiers, window=\"_blank\"] are annotations that help the container to distinguish beans that implement the same type.\n+As we already said a bean is assignable to an injection point if it has all the required qualifiers.\n+If you declare no qualifier at an injection point the `@Default` qualifier is assumed.\n+\n+.Bean With Custom Qualifier Example\n+[source,java]\n+----\n+@Superior <1>\n+@ApplicationScoped\n+public class SuperiorTranslator extends Translator {\n+\n+    String translate(String sentence) { \n+      // ...\n+    }\n+}\n+----\n+<1> `@Superior` is a https://docs.jboss.org/cdi/spec/2.0/cdi-spec.html#defining_qualifier_types[qualifier annotation, window=\"_blank\"].\n+\n+This bean would be assignable to `@Inject @Superior Translator` and `@Inject @Superior SuperiorTranslator` but not in `@Inject Translator`.\n+The reason is that `@Inject Translator` is automatically transformed to `@Inject @Default Translator` during typesafe resolution.\n+And since our `SuperiorTranslator` does not declare `@Default` only the original `Translator` bean is assignable.\n+\n+== _Q: Looks good. What is the bean scope?_\n+\n+The scope of a bean determines the lifecycle of its instances, i.e. when and where an instance should be created and destroyed.\n+\n+NOTE: Every bean has exactly one scope.\n+\n+== _Q: What scopes can I actually use in my Quarkus application?_\n+\n+A: You can use all the built-in scopes mentioned by the specification except for `javax.enterprise.context.ConversationScoped`.\n+\n+[options=\"header\",cols=\"1,1\"]\n+|===\n+|Annotation   |Description   \n+//----------------------\n+|`@javax.enterprise.context.ApplicationScoped`   | A single bean instance is used for the application and shared among all injection points. The instance is created lazily, i.e. once a method is invoked upon the <<client_proxies, client proxy>>. \n+|`@javax.inject.Singleton`   | Just like `@ApplicationScoped` except that no client proxy is used. The instance is created eagerly.\n+|`@javax.enterprise.context.RequestScoped`   | The bean instance is associated with the current _request_ (usually an HTTP request). \n+|`@javax.enterprise.context.Dependent`   | This is a pseudo-scope. There is no context object that holds all dependent instances. Instead, a dependent instace is a dependent object of the bean it is injected into.\n+|`@javax.enterprise.context.SessionScoped`   | This scope is backed by an `javax.servlet.http.HttpSession` object. It's only available if `quarkus-undertow` extension is used.\n+|===\n+\n+NOTE: There can be other custom scopes provided by Quarkus extension. For example, `qquarkus-narayana-jta` provides `javax.transaction.TransactionScoped`.", "originalCommit": "63d155041a5447adba997da8577b662969847b05", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTM0MTEyMw==", "url": "https://github.com/quarkusio/quarkus/pull/10529#discussion_r451341123", "bodyText": "I'm not find of those examples that uses a CDI bean to produce String/long/doubles/...\nThis is not usually how we use them, we use them to instantiate and object from a third party library or to initialize complex objects.\nCan you use a different example to make more sense ?", "author": "loicmathieu", "createdAt": "2020-07-08T07:34:02Z", "path": "docs/src/main/asciidoc/cdi.adoc", "diffHunk": "@@ -0,0 +1,361 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Introduction to Contexts and Dependency Injection\n+\n+include::./attributes.adoc[]\n+:numbered:\n+:sectnums:\n+:sectnumlevels: 4\n+:toc:\n+\n+In this guide we're going to describe the basic principles of the programming model used all over the Quarkus universe. \n+Quarkus programming model is based on the http://docs.jboss.org/cdi/spec/2.0/cdi-spec.html[Contexts and Dependency Injection for Java 2.0, window=\"_blank\"] specification.\n+However, a full CDI implementation is not used under the hood.\n+Quarkus only implements a subset of the CDI features - see also <<cdi-reference.adoc#supported_features,the list of supported features>> and <<cdi-reference.adoc#limitations,the list of limitations>>.\n+On the other hand, there are quite a few <<cdi-reference#nonstandard_features,non-standard features>> and <<cdi-reference.adoc#build_time_apis,Quarkus-specific APIs>>.\n+We believe that our efforts will drive the innovation of the CDI specification towards the build-time oriented developer stacks in the future.\n+\n+== _Q: OK. Let's start simple. What is a bean?_\n+\n+A: Well, a bean is a _container-managed_ object that supports a set of basic services, such as injection of dependencies, lifecycle callbacks and interceptors.\n+\n+== _Q: Wait a minute. What does it mean container-managed?_\n+\n+A: Simply put, you don't control the lifecycle of the object instance directly.\n+Instead, you can affect the lifecycle through the declarative means, such as annotations, configuration, etc.\n+The container is the _environment_ where your application runs.\n+It creates and destroys the instances of beans, associates the instances with a designated context, and injects them into other beans.\n+\n+== _Q: What is it good for?_\n+\n+A: An application developer can focus on the business logic rather than \"where and how\" to obtain a fully initialized component with all of its dependencies.\n+\n+NOTE: You've probably heard of the _inversion of control_ (IoC) programming principle. Dependency injection is one of the implementation techniques of IoC. \n+\n+== _Q: OK. And what does a bean look like?_\n+\n+A: There are several kinds of beans.\n+The most common ones are class-based beans:\n+\n+.Simple Bean Example\n+[source,java]\n+----\n+import javax.inject.Inject;\n+import javax.enterprise.context.ApplicationScoped;\n+import org.eclipse.microprofile.metrics.annotation.Counted;\n+\n+@ApplicationScoped <1>\n+public class Translator {\n+\n+    @Inject\n+    Dictionary dictionary; <2>\n+    \n+    @Counted  <3>\n+    String translate(String sentence) { \n+      // ...\n+    }\n+}\n+----\n+<1> This is a scope annotation. It tells the container which context to associate the bean instance with. In this particular case, a *single bean instance* is created for the application and used by all dependants.\n+<2> This is a field injection point. It tells the container that `Translator` depends on the `Dictionary` bean. If there is no matching bean the build fails.\n+<3> This is an interceptor binding annotation. In this case, the annotation comes from the MicroProfile Metrics. The relevant interceptor intercepts the invocation and updates the relevant metrics.\n+\n+== _Q: Nice. How does the dependency resolution work? I see no names or identifiers._\n+\n+A: That's a good question.\n+In CDI the process of matching a bean to an injection point is *type-safe*.\n+Each bean declares a set of bean types.\n+In our example above, the `Translator` bean has two bean types: `Translator` and `java.lang.Object`.\n+Subsequently, a bean is assignable to an injection point if the bean has a bean type that matches the _required type_ and has all the _required qualifiers_.\n+We'll talk about qualifiers later.\n+For now, it's enough to know that the bean above is assignable to an injection point of type `Translator` and `java.lang.Object`.\n+\n+== _Q: Hm, wait a minute. What happens if multiple beans declare the same type?_\n+\n+A: There is a simple rule: *exactly one bean must be assignable to an injection point, otherwise the build fails*.\n+If none is assignable the build fails with `UnsatisfiedResolutionException`.\n+If multiple are assignable the build fails with `AmbiguousResolutionException`.\n+This is very useful because your application fails fast whenever the container is not able to find an unambiguous dependency for any injection point.\n+\n+[TIP]\n+====\n+Your can use programmatic lookup via  `javax.enterprise.inject.Instance` to resolve ambiguities at runtime and even iterate over all beans implementing a given type:\n+\n+[source,java]\n+----\n+public class Translator {\n+\n+    @Inject\n+    Instance<Dictionary> dictionaries; <1>\n+    \n+    String translate(String sentence) { \n+      for (Dictionary dict : dictionaries) { <2>\n+         // ...\n+      }\n+    }\n+}\n+----\n+<1> This injection point will not result in an ambiguous dependency even if there are multiple beans that implement the `Dictionary` type.\n+<2> `javax.enterprise.inject.Instance` extends `Iterable`.\n+====\n+\n+== _Q: Can I use setter and constructor injection?_\n+\n+A: Yes, you can.\n+In fact, in CDI the \"setter injection\" is superseded by more powerful https://docs.jboss.org/cdi/spec/2.0/cdi-spec.html#initializer_methods[initializer methods, window=\"_blank\"].\n+Intializers may accept multiple parameters and don't have to follow the JavaBean naming conventions.\n+\n+.Initialized and Constructor Injection Example\n+[source,java]\n+----\n+@ApplicationScoped\n+public class Translator {\n+\n+    private final TranslatorHelper helper\n+\n+    Translator(TranslatorHelper helper) { <1>\n+       this.helper = helper;\n+    }\n+\n+    @Inject <2>\n+    void setDeps(Dictionary dic, LocalizationService locService) { <3>\n+      / ...\n+    }\n+}\n+----\n+<1> This is a constructor injection. In fact, this code would not work in regular CDI implementations where a bean with a normal scope must always declare a no-args constructor. In Quarkus we detect this problem and \"add\" such a constructor directly in the bytecode.\n+<2> An initializer method must be annotated with `@Inject`. \n+<3> An initializer may accept multiple parameters - each one is an injection point.\n+\n+== _Q: You talked about some qualifiers?_\n+\n+A: https://docs.jboss.org/cdi/spec/2.0/cdi-spec.html#qualifiers[Qualifiers, window=\"_blank\"] are annotations that help the container to distinguish beans that implement the same type.\n+As we already said a bean is assignable to an injection point if it has all the required qualifiers.\n+If you declare no qualifier at an injection point the `@Default` qualifier is assumed.\n+\n+.Bean With Custom Qualifier Example\n+[source,java]\n+----\n+@Superior <1>\n+@ApplicationScoped\n+public class SuperiorTranslator extends Translator {\n+\n+    String translate(String sentence) { \n+      // ...\n+    }\n+}\n+----\n+<1> `@Superior` is a https://docs.jboss.org/cdi/spec/2.0/cdi-spec.html#defining_qualifier_types[qualifier annotation, window=\"_blank\"].\n+\n+This bean would be assignable to `@Inject @Superior Translator` and `@Inject @Superior SuperiorTranslator` but not in `@Inject Translator`.\n+The reason is that `@Inject Translator` is automatically transformed to `@Inject @Default Translator` during typesafe resolution.\n+And since our `SuperiorTranslator` does not declare `@Default` only the original `Translator` bean is assignable.\n+\n+== _Q: Looks good. What is the bean scope?_\n+\n+The scope of a bean determines the lifecycle of its instances, i.e. when and where an instance should be created and destroyed.\n+\n+NOTE: Every bean has exactly one scope.\n+\n+== _Q: What scopes can I actually use in my Quarkus application?_\n+\n+A: You can use all the built-in scopes mentioned by the specification except for `javax.enterprise.context.ConversationScoped`.\n+\n+[options=\"header\",cols=\"1,1\"]\n+|===\n+|Annotation   |Description   \n+//----------------------\n+|`@javax.enterprise.context.ApplicationScoped`   | A single bean instance is used for the application and shared among all injection points. The instance is created lazily, i.e. once a method is invoked upon the <<client_proxies, client proxy>>. \n+|`@javax.inject.Singleton`   | Just like `@ApplicationScoped` except that no client proxy is used. The instance is created eagerly.\n+|`@javax.enterprise.context.RequestScoped`   | The bean instance is associated with the current _request_ (usually an HTTP request). \n+|`@javax.enterprise.context.Dependent`   | This is a pseudo-scope. There is no context object that holds all dependent instances. Instead, a dependent instace is a dependent object of the bean it is injected into.\n+|`@javax.enterprise.context.SessionScoped`   | This scope is backed by an `javax.servlet.http.HttpSession` object. It's only available if `quarkus-undertow` extension is used.\n+|===\n+\n+NOTE: There can be other custom scopes provided by Quarkus extension. For example, `qquarkus-narayana-jta` provides `javax.transaction.TransactionScoped`.\n+\n+[[client_proxies]]\n+== _Q: I don't undestand the concept of client proxies._\n+\n+Indeed, the https://docs.jboss.org/cdi/spec/2.0/cdi-spec.html#client_proxies[client proxies, window=\"_blank\"] could be hard to grasp but they provide some useful functionality.\n+A client proxy is basically an object that delegates all method invocations to a target bean instance.\n+It's a container construct that implements `io.quarkus.arc.ClientProxy` and extends the bean class.\n+The client proxy instance is always injected instead of a contextual instance of a normal scoped bean (e.g. `@ApplicationScoped` and `@RequestScoped`).\n+Client proxies allow for:\n+\n+* Lazy instantiation - the instance is created once a method is invoked upon the proxy.\n+* Ability to inject a bean with \"narrower\" scope to a bean with \"wider\" scope; i.e. you can inject a `@RequestScoped` bean into an `@ApplicationScoped` bean.\n+* Circular dependencies in the dependency graph. Circular dependencies are \"bad design\" but sometimes they're inevitable. \n+* In rare cases it's practical to destroy the beans manually. A direct injected reference would lead to a stale bean instance.\n+ \n+ \n+== _Q: OK. You said that there are several kinds of beans?_\n+\n+A: Yes. In general, in Quarkus we distinguish:\n+\n+1. Class beans\n+2. Producer methods\n+3. Producer fields\n+4. Synthetic beans\n+\n+Producer methods are useful if you need additional control over instantiation of a bean.\n+They are also useful when integrating third-party libraries where you don't control the class source and may not add additional annotations etc.\n+\n+.Producer Method Example\n+[source,java]\n+----\n+@ApplicationScoped\n+public class PiProducer {\n+\n+    @Produces <1>\n+    double producePi() { \n+       return Math.PI; <2>\n+    }", "originalCommit": "63d155041a5447adba997da8577b662969847b05", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTM5NTk4NQ==", "url": "https://github.com/quarkusio/quarkus/pull/10529#discussion_r451395985", "bodyText": "Hm, I could redo the example to use some class from the JDK, e.g. List otherwise we would have to add one more class... Note that we want to demonstrate the principle and not a full-blown producer code.", "author": "mkouba", "createdAt": "2020-07-08T09:06:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTM0MTEyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTM5NzAzMg==", "url": "https://github.com/quarkusio/quarkus/pull/10529#discussion_r451397032", "bodyText": "Actually, I can convert the PI producer to a producer field and add a producer method for a list... that makes a lot of sense IMO.", "author": "mkouba", "createdAt": "2020-07-08T09:08:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTM0MTEyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQwMDUxNA==", "url": "https://github.com/quarkusio/quarkus/pull/10529#discussion_r451400514", "bodyText": "Maybe a GreatingService with a constructor that takes a greating String. This is a valid use case for a producer bean.\nAnd it clearly demonstrate the use case of the creation of a complex bean", "author": "loicmathieu", "createdAt": "2020-07-08T09:14:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTM0MTEyMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTM5Njc2Ng==", "url": "https://github.com/quarkusio/quarkus/pull/10529#discussion_r451396766", "bodyText": "Should we also mention why would you want to use qualifiers? E.g. to distinguish between several beans having same type(s)?", "author": "manovotn", "createdAt": "2020-07-08T09:08:14Z", "path": "docs/src/main/asciidoc/cdi.adoc", "diffHunk": "@@ -0,0 +1,361 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Introduction to Contexts and Dependency Injection\n+\n+include::./attributes.adoc[]\n+:numbered:\n+:sectnums:\n+:sectnumlevels: 4\n+:toc:\n+\n+In this guide we're going to describe the basic principles of the programming model used all over the Quarkus universe. \n+Quarkus programming model is based on the http://docs.jboss.org/cdi/spec/2.0/cdi-spec.html[Contexts and Dependency Injection for Java 2.0, window=\"_blank\"] specification.\n+However, a full CDI implementation is not used under the hood.\n+Quarkus only implements a subset of the CDI features - see also <<cdi-reference.adoc#supported_features,the list of supported features>> and <<cdi-reference.adoc#limitations,the list of limitations>>.\n+On the other hand, there are quite a few <<cdi-reference#nonstandard_features,non-standard features>> and <<cdi-reference.adoc#build_time_apis,Quarkus-specific APIs>>.\n+We believe that our efforts will drive the innovation of the CDI specification towards the build-time oriented developer stacks in the future.\n+\n+== _Q: OK. Let's start simple. What is a bean?_\n+\n+A: Well, a bean is a _container-managed_ object that supports a set of basic services, such as injection of dependencies, lifecycle callbacks and interceptors.\n+\n+== _Q: Wait a minute. What does it mean container-managed?_\n+\n+A: Simply put, you don't control the lifecycle of the object instance directly.\n+Instead, you can affect the lifecycle through the declarative means, such as annotations, configuration, etc.\n+The container is the _environment_ where your application runs.\n+It creates and destroys the instances of beans, associates the instances with a designated context, and injects them into other beans.\n+\n+== _Q: What is it good for?_\n+\n+A: An application developer can focus on the business logic rather than \"where and how\" to obtain a fully initialized component with all of its dependencies.\n+\n+NOTE: You've probably heard of the _inversion of control_ (IoC) programming principle. Dependency injection is one of the implementation techniques of IoC. \n+\n+== _Q: OK. And what does a bean look like?_\n+\n+A: There are several kinds of beans.\n+The most common ones are class-based beans:\n+\n+.Simple Bean Example\n+[source,java]\n+----\n+import javax.inject.Inject;\n+import javax.enterprise.context.ApplicationScoped;\n+import org.eclipse.microprofile.metrics.annotation.Counted;\n+\n+@ApplicationScoped <1>\n+public class Translator {\n+\n+    @Inject\n+    Dictionary dictionary; <2>\n+    \n+    @Counted  <3>\n+    String translate(String sentence) { \n+      // ...\n+    }\n+}\n+----\n+<1> This is a scope annotation. It tells the container which context to associate the bean instance with. In this particular case, a *single bean instance* is created for the application and used by all dependants.\n+<2> This is a field injection point. It tells the container that `Translator` depends on the `Dictionary` bean. If there is no matching bean the build fails.\n+<3> This is an interceptor binding annotation. In this case, the annotation comes from the MicroProfile Metrics. The relevant interceptor intercepts the invocation and updates the relevant metrics.\n+\n+== _Q: Nice. How does the dependency resolution work? I see no names or identifiers._\n+\n+A: That's a good question.\n+In CDI the process of matching a bean to an injection point is *type-safe*.\n+Each bean declares a set of bean types.\n+In our example above, the `Translator` bean has two bean types: `Translator` and `java.lang.Object`.\n+Subsequently, a bean is assignable to an injection point if the bean has a bean type that matches the _required type_ and has all the _required qualifiers_.\n+We'll talk about qualifiers later.\n+For now, it's enough to know that the bean above is assignable to an injection point of type `Translator` and `java.lang.Object`.\n+\n+== _Q: Hm, wait a minute. What happens if multiple beans declare the same type?_\n+\n+A: There is a simple rule: *exactly one bean must be assignable to an injection point, otherwise the build fails*.\n+If none is assignable the build fails with `UnsatisfiedResolutionException`.\n+If multiple are assignable the build fails with `AmbiguousResolutionException`.\n+This is very useful because your application fails fast whenever the container is not able to find an unambiguous dependency for any injection point.\n+\n+[TIP]\n+====\n+Your can use programmatic lookup via  `javax.enterprise.inject.Instance` to resolve ambiguities at runtime and even iterate over all beans implementing a given type:\n+\n+[source,java]\n+----\n+public class Translator {\n+\n+    @Inject\n+    Instance<Dictionary> dictionaries; <1>\n+    \n+    String translate(String sentence) { \n+      for (Dictionary dict : dictionaries) { <2>\n+         // ...\n+      }\n+    }\n+}\n+----\n+<1> This injection point will not result in an ambiguous dependency even if there are multiple beans that implement the `Dictionary` type.\n+<2> `javax.enterprise.inject.Instance` extends `Iterable`.\n+====\n+\n+== _Q: Can I use setter and constructor injection?_\n+\n+A: Yes, you can.\n+In fact, in CDI the \"setter injection\" is superseded by more powerful https://docs.jboss.org/cdi/spec/2.0/cdi-spec.html#initializer_methods[initializer methods, window=\"_blank\"].\n+Intializers may accept multiple parameters and don't have to follow the JavaBean naming conventions.\n+\n+.Initialized and Constructor Injection Example\n+[source,java]\n+----\n+@ApplicationScoped\n+public class Translator {\n+\n+    private final TranslatorHelper helper\n+\n+    Translator(TranslatorHelper helper) { <1>\n+       this.helper = helper;\n+    }\n+\n+    @Inject <2>\n+    void setDeps(Dictionary dic, LocalizationService locService) { <3>\n+      / ...\n+    }\n+}\n+----\n+<1> This is a constructor injection. In fact, this code would not work in regular CDI implementations where a bean with a normal scope must always declare a no-args constructor. In Quarkus we detect this problem and \"add\" such a constructor directly in the bytecode.\n+<2> An initializer method must be annotated with `@Inject`. \n+<3> An initializer may accept multiple parameters - each one is an injection point.\n+\n+== _Q: You talked about some qualifiers?_", "originalCommit": "63d155041a5447adba997da8577b662969847b05", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQ1NTY2MA==", "url": "https://github.com/quarkusio/quarkus/pull/10529#discussion_r451455660", "bodyText": "@manovotn isn't \"Qualifiers are annotations that help the container to distinguish beans that implement the same type\" clear enough?", "author": "mkouba", "createdAt": "2020-07-08T10:55:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTM5Njc2Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTM5ODcwNA==", "url": "https://github.com/quarkusio/quarkus/pull/10529#discussion_r451398704", "bodyText": "The notion of being created eagerly can be misleading. It is eager as in not having to call a method on the bean. However, not as eager as automatically creating it on app startup (which is something we cover with another annotation). I'd probably remove that.", "author": "manovotn", "createdAt": "2020-07-08T09:11:43Z", "path": "docs/src/main/asciidoc/cdi.adoc", "diffHunk": "@@ -0,0 +1,361 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Introduction to Contexts and Dependency Injection\n+\n+include::./attributes.adoc[]\n+:numbered:\n+:sectnums:\n+:sectnumlevels: 4\n+:toc:\n+\n+In this guide we're going to describe the basic principles of the programming model used all over the Quarkus universe. \n+Quarkus programming model is based on the http://docs.jboss.org/cdi/spec/2.0/cdi-spec.html[Contexts and Dependency Injection for Java 2.0, window=\"_blank\"] specification.\n+However, a full CDI implementation is not used under the hood.\n+Quarkus only implements a subset of the CDI features - see also <<cdi-reference.adoc#supported_features,the list of supported features>> and <<cdi-reference.adoc#limitations,the list of limitations>>.\n+On the other hand, there are quite a few <<cdi-reference#nonstandard_features,non-standard features>> and <<cdi-reference.adoc#build_time_apis,Quarkus-specific APIs>>.\n+We believe that our efforts will drive the innovation of the CDI specification towards the build-time oriented developer stacks in the future.\n+\n+== _Q: OK. Let's start simple. What is a bean?_\n+\n+A: Well, a bean is a _container-managed_ object that supports a set of basic services, such as injection of dependencies, lifecycle callbacks and interceptors.\n+\n+== _Q: Wait a minute. What does it mean container-managed?_\n+\n+A: Simply put, you don't control the lifecycle of the object instance directly.\n+Instead, you can affect the lifecycle through the declarative means, such as annotations, configuration, etc.\n+The container is the _environment_ where your application runs.\n+It creates and destroys the instances of beans, associates the instances with a designated context, and injects them into other beans.\n+\n+== _Q: What is it good for?_\n+\n+A: An application developer can focus on the business logic rather than \"where and how\" to obtain a fully initialized component with all of its dependencies.\n+\n+NOTE: You've probably heard of the _inversion of control_ (IoC) programming principle. Dependency injection is one of the implementation techniques of IoC. \n+\n+== _Q: OK. And what does a bean look like?_\n+\n+A: There are several kinds of beans.\n+The most common ones are class-based beans:\n+\n+.Simple Bean Example\n+[source,java]\n+----\n+import javax.inject.Inject;\n+import javax.enterprise.context.ApplicationScoped;\n+import org.eclipse.microprofile.metrics.annotation.Counted;\n+\n+@ApplicationScoped <1>\n+public class Translator {\n+\n+    @Inject\n+    Dictionary dictionary; <2>\n+    \n+    @Counted  <3>\n+    String translate(String sentence) { \n+      // ...\n+    }\n+}\n+----\n+<1> This is a scope annotation. It tells the container which context to associate the bean instance with. In this particular case, a *single bean instance* is created for the application and used by all dependants.\n+<2> This is a field injection point. It tells the container that `Translator` depends on the `Dictionary` bean. If there is no matching bean the build fails.\n+<3> This is an interceptor binding annotation. In this case, the annotation comes from the MicroProfile Metrics. The relevant interceptor intercepts the invocation and updates the relevant metrics.\n+\n+== _Q: Nice. How does the dependency resolution work? I see no names or identifiers._\n+\n+A: That's a good question.\n+In CDI the process of matching a bean to an injection point is *type-safe*.\n+Each bean declares a set of bean types.\n+In our example above, the `Translator` bean has two bean types: `Translator` and `java.lang.Object`.\n+Subsequently, a bean is assignable to an injection point if the bean has a bean type that matches the _required type_ and has all the _required qualifiers_.\n+We'll talk about qualifiers later.\n+For now, it's enough to know that the bean above is assignable to an injection point of type `Translator` and `java.lang.Object`.\n+\n+== _Q: Hm, wait a minute. What happens if multiple beans declare the same type?_\n+\n+A: There is a simple rule: *exactly one bean must be assignable to an injection point, otherwise the build fails*.\n+If none is assignable the build fails with `UnsatisfiedResolutionException`.\n+If multiple are assignable the build fails with `AmbiguousResolutionException`.\n+This is very useful because your application fails fast whenever the container is not able to find an unambiguous dependency for any injection point.\n+\n+[TIP]\n+====\n+Your can use programmatic lookup via  `javax.enterprise.inject.Instance` to resolve ambiguities at runtime and even iterate over all beans implementing a given type:\n+\n+[source,java]\n+----\n+public class Translator {\n+\n+    @Inject\n+    Instance<Dictionary> dictionaries; <1>\n+    \n+    String translate(String sentence) { \n+      for (Dictionary dict : dictionaries) { <2>\n+         // ...\n+      }\n+    }\n+}\n+----\n+<1> This injection point will not result in an ambiguous dependency even if there are multiple beans that implement the `Dictionary` type.\n+<2> `javax.enterprise.inject.Instance` extends `Iterable`.\n+====\n+\n+== _Q: Can I use setter and constructor injection?_\n+\n+A: Yes, you can.\n+In fact, in CDI the \"setter injection\" is superseded by more powerful https://docs.jboss.org/cdi/spec/2.0/cdi-spec.html#initializer_methods[initializer methods, window=\"_blank\"].\n+Intializers may accept multiple parameters and don't have to follow the JavaBean naming conventions.\n+\n+.Initialized and Constructor Injection Example\n+[source,java]\n+----\n+@ApplicationScoped\n+public class Translator {\n+\n+    private final TranslatorHelper helper\n+\n+    Translator(TranslatorHelper helper) { <1>\n+       this.helper = helper;\n+    }\n+\n+    @Inject <2>\n+    void setDeps(Dictionary dic, LocalizationService locService) { <3>\n+      / ...\n+    }\n+}\n+----\n+<1> This is a constructor injection. In fact, this code would not work in regular CDI implementations where a bean with a normal scope must always declare a no-args constructor. In Quarkus we detect this problem and \"add\" such a constructor directly in the bytecode.\n+<2> An initializer method must be annotated with `@Inject`. \n+<3> An initializer may accept multiple parameters - each one is an injection point.\n+\n+== _Q: You talked about some qualifiers?_\n+\n+A: https://docs.jboss.org/cdi/spec/2.0/cdi-spec.html#qualifiers[Qualifiers, window=\"_blank\"] are annotations that help the container to distinguish beans that implement the same type.\n+As we already said a bean is assignable to an injection point if it has all the required qualifiers.\n+If you declare no qualifier at an injection point the `@Default` qualifier is assumed.\n+\n+.Bean With Custom Qualifier Example\n+[source,java]\n+----\n+@Superior <1>\n+@ApplicationScoped\n+public class SuperiorTranslator extends Translator {\n+\n+    String translate(String sentence) { \n+      // ...\n+    }\n+}\n+----\n+<1> `@Superior` is a https://docs.jboss.org/cdi/spec/2.0/cdi-spec.html#defining_qualifier_types[qualifier annotation, window=\"_blank\"].\n+\n+This bean would be assignable to `@Inject @Superior Translator` and `@Inject @Superior SuperiorTranslator` but not in `@Inject Translator`.\n+The reason is that `@Inject Translator` is automatically transformed to `@Inject @Default Translator` during typesafe resolution.\n+And since our `SuperiorTranslator` does not declare `@Default` only the original `Translator` bean is assignable.\n+\n+== _Q: Looks good. What is the bean scope?_\n+\n+The scope of a bean determines the lifecycle of its instances, i.e. when and where an instance should be created and destroyed.\n+\n+NOTE: Every bean has exactly one scope.\n+\n+== _Q: What scopes can I actually use in my Quarkus application?_\n+\n+A: You can use all the built-in scopes mentioned by the specification except for `javax.enterprise.context.ConversationScoped`.\n+\n+[options=\"header\",cols=\"1,1\"]\n+|===\n+|Annotation   |Description   \n+//----------------------\n+|`@javax.enterprise.context.ApplicationScoped`   | A single bean instance is used for the application and shared among all injection points. The instance is created lazily, i.e. once a method is invoked upon the <<client_proxies, client proxy>>. \n+|`@javax.inject.Singleton`   | Just like `@ApplicationScoped` except that no client proxy is used. The instance is created eagerly.", "originalCommit": "63d155041a5447adba997da8577b662969847b05", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQ1NzYwNw==", "url": "https://github.com/quarkusio/quarkus/pull/10529#discussion_r451457607", "bodyText": "\"The instance is created when an injection point that resolves to a @Singleton bean is being injected.\"? I'd like to keep it because \"no client proxy\" info is not enough.", "author": "mkouba", "createdAt": "2020-07-08T10:59:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTM5ODcwNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQwNjgyMQ==", "url": "https://github.com/quarkusio/quarkus/pull/10529#discussion_r451406821", "bodyText": "Maybe we should also note that a producer method needs to be declared inside another bean?", "author": "manovotn", "createdAt": "2020-07-08T09:25:08Z", "path": "docs/src/main/asciidoc/cdi.adoc", "diffHunk": "@@ -0,0 +1,361 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Introduction to Contexts and Dependency Injection\n+\n+include::./attributes.adoc[]\n+:numbered:\n+:sectnums:\n+:sectnumlevels: 4\n+:toc:\n+\n+In this guide we're going to describe the basic principles of the programming model used all over the Quarkus universe. \n+Quarkus programming model is based on the http://docs.jboss.org/cdi/spec/2.0/cdi-spec.html[Contexts and Dependency Injection for Java 2.0, window=\"_blank\"] specification.\n+However, a full CDI implementation is not used under the hood.\n+Quarkus only implements a subset of the CDI features - see also <<cdi-reference.adoc#supported_features,the list of supported features>> and <<cdi-reference.adoc#limitations,the list of limitations>>.\n+On the other hand, there are quite a few <<cdi-reference#nonstandard_features,non-standard features>> and <<cdi-reference.adoc#build_time_apis,Quarkus-specific APIs>>.\n+We believe that our efforts will drive the innovation of the CDI specification towards the build-time oriented developer stacks in the future.\n+\n+== _Q: OK. Let's start simple. What is a bean?_\n+\n+A: Well, a bean is a _container-managed_ object that supports a set of basic services, such as injection of dependencies, lifecycle callbacks and interceptors.\n+\n+== _Q: Wait a minute. What does it mean container-managed?_\n+\n+A: Simply put, you don't control the lifecycle of the object instance directly.\n+Instead, you can affect the lifecycle through the declarative means, such as annotations, configuration, etc.\n+The container is the _environment_ where your application runs.\n+It creates and destroys the instances of beans, associates the instances with a designated context, and injects them into other beans.\n+\n+== _Q: What is it good for?_\n+\n+A: An application developer can focus on the business logic rather than \"where and how\" to obtain a fully initialized component with all of its dependencies.\n+\n+NOTE: You've probably heard of the _inversion of control_ (IoC) programming principle. Dependency injection is one of the implementation techniques of IoC. \n+\n+== _Q: OK. And what does a bean look like?_\n+\n+A: There are several kinds of beans.\n+The most common ones are class-based beans:\n+\n+.Simple Bean Example\n+[source,java]\n+----\n+import javax.inject.Inject;\n+import javax.enterprise.context.ApplicationScoped;\n+import org.eclipse.microprofile.metrics.annotation.Counted;\n+\n+@ApplicationScoped <1>\n+public class Translator {\n+\n+    @Inject\n+    Dictionary dictionary; <2>\n+    \n+    @Counted  <3>\n+    String translate(String sentence) { \n+      // ...\n+    }\n+}\n+----\n+<1> This is a scope annotation. It tells the container which context to associate the bean instance with. In this particular case, a *single bean instance* is created for the application and used by all dependants.\n+<2> This is a field injection point. It tells the container that `Translator` depends on the `Dictionary` bean. If there is no matching bean the build fails.\n+<3> This is an interceptor binding annotation. In this case, the annotation comes from the MicroProfile Metrics. The relevant interceptor intercepts the invocation and updates the relevant metrics.\n+\n+== _Q: Nice. How does the dependency resolution work? I see no names or identifiers._\n+\n+A: That's a good question.\n+In CDI the process of matching a bean to an injection point is *type-safe*.\n+Each bean declares a set of bean types.\n+In our example above, the `Translator` bean has two bean types: `Translator` and `java.lang.Object`.\n+Subsequently, a bean is assignable to an injection point if the bean has a bean type that matches the _required type_ and has all the _required qualifiers_.\n+We'll talk about qualifiers later.\n+For now, it's enough to know that the bean above is assignable to an injection point of type `Translator` and `java.lang.Object`.\n+\n+== _Q: Hm, wait a minute. What happens if multiple beans declare the same type?_\n+\n+A: There is a simple rule: *exactly one bean must be assignable to an injection point, otherwise the build fails*.\n+If none is assignable the build fails with `UnsatisfiedResolutionException`.\n+If multiple are assignable the build fails with `AmbiguousResolutionException`.\n+This is very useful because your application fails fast whenever the container is not able to find an unambiguous dependency for any injection point.\n+\n+[TIP]\n+====\n+Your can use programmatic lookup via  `javax.enterprise.inject.Instance` to resolve ambiguities at runtime and even iterate over all beans implementing a given type:\n+\n+[source,java]\n+----\n+public class Translator {\n+\n+    @Inject\n+    Instance<Dictionary> dictionaries; <1>\n+    \n+    String translate(String sentence) { \n+      for (Dictionary dict : dictionaries) { <2>\n+         // ...\n+      }\n+    }\n+}\n+----\n+<1> This injection point will not result in an ambiguous dependency even if there are multiple beans that implement the `Dictionary` type.\n+<2> `javax.enterprise.inject.Instance` extends `Iterable`.\n+====\n+\n+== _Q: Can I use setter and constructor injection?_\n+\n+A: Yes, you can.\n+In fact, in CDI the \"setter injection\" is superseded by more powerful https://docs.jboss.org/cdi/spec/2.0/cdi-spec.html#initializer_methods[initializer methods, window=\"_blank\"].\n+Intializers may accept multiple parameters and don't have to follow the JavaBean naming conventions.\n+\n+.Initialized and Constructor Injection Example\n+[source,java]\n+----\n+@ApplicationScoped\n+public class Translator {\n+\n+    private final TranslatorHelper helper\n+\n+    Translator(TranslatorHelper helper) { <1>\n+       this.helper = helper;\n+    }\n+\n+    @Inject <2>\n+    void setDeps(Dictionary dic, LocalizationService locService) { <3>\n+      / ...\n+    }\n+}\n+----\n+<1> This is a constructor injection. In fact, this code would not work in regular CDI implementations where a bean with a normal scope must always declare a no-args constructor. In Quarkus we detect this problem and \"add\" such a constructor directly in the bytecode.\n+<2> An initializer method must be annotated with `@Inject`. \n+<3> An initializer may accept multiple parameters - each one is an injection point.\n+\n+== _Q: You talked about some qualifiers?_\n+\n+A: https://docs.jboss.org/cdi/spec/2.0/cdi-spec.html#qualifiers[Qualifiers, window=\"_blank\"] are annotations that help the container to distinguish beans that implement the same type.\n+As we already said a bean is assignable to an injection point if it has all the required qualifiers.\n+If you declare no qualifier at an injection point the `@Default` qualifier is assumed.\n+\n+.Bean With Custom Qualifier Example\n+[source,java]\n+----\n+@Superior <1>\n+@ApplicationScoped\n+public class SuperiorTranslator extends Translator {\n+\n+    String translate(String sentence) { \n+      // ...\n+    }\n+}\n+----\n+<1> `@Superior` is a https://docs.jboss.org/cdi/spec/2.0/cdi-spec.html#defining_qualifier_types[qualifier annotation, window=\"_blank\"].\n+\n+This bean would be assignable to `@Inject @Superior Translator` and `@Inject @Superior SuperiorTranslator` but not in `@Inject Translator`.\n+The reason is that `@Inject Translator` is automatically transformed to `@Inject @Default Translator` during typesafe resolution.\n+And since our `SuperiorTranslator` does not declare `@Default` only the original `Translator` bean is assignable.\n+\n+== _Q: Looks good. What is the bean scope?_\n+\n+The scope of a bean determines the lifecycle of its instances, i.e. when and where an instance should be created and destroyed.\n+\n+NOTE: Every bean has exactly one scope.\n+\n+== _Q: What scopes can I actually use in my Quarkus application?_\n+\n+A: You can use all the built-in scopes mentioned by the specification except for `javax.enterprise.context.ConversationScoped`.\n+\n+[options=\"header\",cols=\"1,1\"]\n+|===\n+|Annotation   |Description   \n+//----------------------\n+|`@javax.enterprise.context.ApplicationScoped`   | A single bean instance is used for the application and shared among all injection points. The instance is created lazily, i.e. once a method is invoked upon the <<client_proxies, client proxy>>. \n+|`@javax.inject.Singleton`   | Just like `@ApplicationScoped` except that no client proxy is used. The instance is created eagerly.\n+|`@javax.enterprise.context.RequestScoped`   | The bean instance is associated with the current _request_ (usually an HTTP request). \n+|`@javax.enterprise.context.Dependent`   | This is a pseudo-scope. There is no context object that holds all dependent instances. Instead, a dependent instace is a dependent object of the bean it is injected into.\n+|`@javax.enterprise.context.SessionScoped`   | This scope is backed by an `javax.servlet.http.HttpSession` object. It's only available if `quarkus-undertow` extension is used.\n+|===\n+\n+NOTE: There can be other custom scopes provided by Quarkus extension. For example, `qquarkus-narayana-jta` provides `javax.transaction.TransactionScoped`.\n+\n+[[client_proxies]]\n+== _Q: I don't undestand the concept of client proxies._\n+\n+Indeed, the https://docs.jboss.org/cdi/spec/2.0/cdi-spec.html#client_proxies[client proxies, window=\"_blank\"] could be hard to grasp but they provide some useful functionality.\n+A client proxy is basically an object that delegates all method invocations to a target bean instance.\n+It's a container construct that implements `io.quarkus.arc.ClientProxy` and extends the bean class.\n+The client proxy instance is always injected instead of a contextual instance of a normal scoped bean (e.g. `@ApplicationScoped` and `@RequestScoped`).\n+Client proxies allow for:\n+\n+* Lazy instantiation - the instance is created once a method is invoked upon the proxy.\n+* Ability to inject a bean with \"narrower\" scope to a bean with \"wider\" scope; i.e. you can inject a `@RequestScoped` bean into an `@ApplicationScoped` bean.\n+* Circular dependencies in the dependency graph. Circular dependencies are \"bad design\" but sometimes they're inevitable. \n+* In rare cases it's practical to destroy the beans manually. A direct injected reference would lead to a stale bean instance.\n+ \n+ \n+== _Q: OK. You said that there are several kinds of beans?_\n+\n+A: Yes. In general, in Quarkus we distinguish:\n+\n+1. Class beans\n+2. Producer methods\n+3. Producer fields\n+4. Synthetic beans\n+\n+Producer methods are useful if you need additional control over instantiation of a bean.\n+They are also useful when integrating third-party libraries where you don't control the class source and may not add additional annotations etc.\n+\n+.Producer Method Example\n+[source,java]\n+----\n+@ApplicationScoped\n+public class PiProducer {\n+\n+    @Produces <1>\n+    double producePi() { \n+       return Math.PI; <2>\n+    }\n+}\n+\n+@ApplicationScoped\n+public class PiConsumer {\n+\n+   @Inject\n+   double pi; <3>\n+   \n+   double twoPis() {\n+     return pi * 2;\n+   }\n+} \n+----\n+<1> The container analyses the method annotations to build a bean metadata.", "originalCommit": "63d155041a5447adba997da8577b662969847b05", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQ2MzM1Nw==", "url": "https://github.com/quarkusio/quarkus/pull/10529#discussion_r451463357", "bodyText": "I wouldn't complicate things here... in quarkus you don't even have to add a bean defining annotation to a class if it declares @Produces. I mean it's a good point but why not mention disposers then? Static producers? Etc. WDYT?", "author": "mkouba", "createdAt": "2020-07-08T11:11:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQwNjgyMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQxMDMyOA==", "url": "https://github.com/quarkusio/quarkus/pull/10529#discussion_r451410328", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            == _Q: OK injection looks cool. What other services are provided?_\n          \n          \n            \n            == _Q: OK, injection looks cool. What other services are provided?_", "author": "manovotn", "createdAt": "2020-07-08T09:30:57Z", "path": "docs/src/main/asciidoc/cdi.adoc", "diffHunk": "@@ -0,0 +1,361 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Introduction to Contexts and Dependency Injection\n+\n+include::./attributes.adoc[]\n+:numbered:\n+:sectnums:\n+:sectnumlevels: 4\n+:toc:\n+\n+In this guide we're going to describe the basic principles of the programming model used all over the Quarkus universe. \n+Quarkus programming model is based on the http://docs.jboss.org/cdi/spec/2.0/cdi-spec.html[Contexts and Dependency Injection for Java 2.0, window=\"_blank\"] specification.\n+However, a full CDI implementation is not used under the hood.\n+Quarkus only implements a subset of the CDI features - see also <<cdi-reference.adoc#supported_features,the list of supported features>> and <<cdi-reference.adoc#limitations,the list of limitations>>.\n+On the other hand, there are quite a few <<cdi-reference#nonstandard_features,non-standard features>> and <<cdi-reference.adoc#build_time_apis,Quarkus-specific APIs>>.\n+We believe that our efforts will drive the innovation of the CDI specification towards the build-time oriented developer stacks in the future.\n+\n+== _Q: OK. Let's start simple. What is a bean?_\n+\n+A: Well, a bean is a _container-managed_ object that supports a set of basic services, such as injection of dependencies, lifecycle callbacks and interceptors.\n+\n+== _Q: Wait a minute. What does it mean container-managed?_\n+\n+A: Simply put, you don't control the lifecycle of the object instance directly.\n+Instead, you can affect the lifecycle through the declarative means, such as annotations, configuration, etc.\n+The container is the _environment_ where your application runs.\n+It creates and destroys the instances of beans, associates the instances with a designated context, and injects them into other beans.\n+\n+== _Q: What is it good for?_\n+\n+A: An application developer can focus on the business logic rather than \"where and how\" to obtain a fully initialized component with all of its dependencies.\n+\n+NOTE: You've probably heard of the _inversion of control_ (IoC) programming principle. Dependency injection is one of the implementation techniques of IoC. \n+\n+== _Q: OK. And what does a bean look like?_\n+\n+A: There are several kinds of beans.\n+The most common ones are class-based beans:\n+\n+.Simple Bean Example\n+[source,java]\n+----\n+import javax.inject.Inject;\n+import javax.enterprise.context.ApplicationScoped;\n+import org.eclipse.microprofile.metrics.annotation.Counted;\n+\n+@ApplicationScoped <1>\n+public class Translator {\n+\n+    @Inject\n+    Dictionary dictionary; <2>\n+    \n+    @Counted  <3>\n+    String translate(String sentence) { \n+      // ...\n+    }\n+}\n+----\n+<1> This is a scope annotation. It tells the container which context to associate the bean instance with. In this particular case, a *single bean instance* is created for the application and used by all dependants.\n+<2> This is a field injection point. It tells the container that `Translator` depends on the `Dictionary` bean. If there is no matching bean the build fails.\n+<3> This is an interceptor binding annotation. In this case, the annotation comes from the MicroProfile Metrics. The relevant interceptor intercepts the invocation and updates the relevant metrics.\n+\n+== _Q: Nice. How does the dependency resolution work? I see no names or identifiers._\n+\n+A: That's a good question.\n+In CDI the process of matching a bean to an injection point is *type-safe*.\n+Each bean declares a set of bean types.\n+In our example above, the `Translator` bean has two bean types: `Translator` and `java.lang.Object`.\n+Subsequently, a bean is assignable to an injection point if the bean has a bean type that matches the _required type_ and has all the _required qualifiers_.\n+We'll talk about qualifiers later.\n+For now, it's enough to know that the bean above is assignable to an injection point of type `Translator` and `java.lang.Object`.\n+\n+== _Q: Hm, wait a minute. What happens if multiple beans declare the same type?_\n+\n+A: There is a simple rule: *exactly one bean must be assignable to an injection point, otherwise the build fails*.\n+If none is assignable the build fails with `UnsatisfiedResolutionException`.\n+If multiple are assignable the build fails with `AmbiguousResolutionException`.\n+This is very useful because your application fails fast whenever the container is not able to find an unambiguous dependency for any injection point.\n+\n+[TIP]\n+====\n+Your can use programmatic lookup via  `javax.enterprise.inject.Instance` to resolve ambiguities at runtime and even iterate over all beans implementing a given type:\n+\n+[source,java]\n+----\n+public class Translator {\n+\n+    @Inject\n+    Instance<Dictionary> dictionaries; <1>\n+    \n+    String translate(String sentence) { \n+      for (Dictionary dict : dictionaries) { <2>\n+         // ...\n+      }\n+    }\n+}\n+----\n+<1> This injection point will not result in an ambiguous dependency even if there are multiple beans that implement the `Dictionary` type.\n+<2> `javax.enterprise.inject.Instance` extends `Iterable`.\n+====\n+\n+== _Q: Can I use setter and constructor injection?_\n+\n+A: Yes, you can.\n+In fact, in CDI the \"setter injection\" is superseded by more powerful https://docs.jboss.org/cdi/spec/2.0/cdi-spec.html#initializer_methods[initializer methods, window=\"_blank\"].\n+Intializers may accept multiple parameters and don't have to follow the JavaBean naming conventions.\n+\n+.Initialized and Constructor Injection Example\n+[source,java]\n+----\n+@ApplicationScoped\n+public class Translator {\n+\n+    private final TranslatorHelper helper\n+\n+    Translator(TranslatorHelper helper) { <1>\n+       this.helper = helper;\n+    }\n+\n+    @Inject <2>\n+    void setDeps(Dictionary dic, LocalizationService locService) { <3>\n+      / ...\n+    }\n+}\n+----\n+<1> This is a constructor injection. In fact, this code would not work in regular CDI implementations where a bean with a normal scope must always declare a no-args constructor. In Quarkus we detect this problem and \"add\" such a constructor directly in the bytecode.\n+<2> An initializer method must be annotated with `@Inject`. \n+<3> An initializer may accept multiple parameters - each one is an injection point.\n+\n+== _Q: You talked about some qualifiers?_\n+\n+A: https://docs.jboss.org/cdi/spec/2.0/cdi-spec.html#qualifiers[Qualifiers, window=\"_blank\"] are annotations that help the container to distinguish beans that implement the same type.\n+As we already said a bean is assignable to an injection point if it has all the required qualifiers.\n+If you declare no qualifier at an injection point the `@Default` qualifier is assumed.\n+\n+.Bean With Custom Qualifier Example\n+[source,java]\n+----\n+@Superior <1>\n+@ApplicationScoped\n+public class SuperiorTranslator extends Translator {\n+\n+    String translate(String sentence) { \n+      // ...\n+    }\n+}\n+----\n+<1> `@Superior` is a https://docs.jboss.org/cdi/spec/2.0/cdi-spec.html#defining_qualifier_types[qualifier annotation, window=\"_blank\"].\n+\n+This bean would be assignable to `@Inject @Superior Translator` and `@Inject @Superior SuperiorTranslator` but not in `@Inject Translator`.\n+The reason is that `@Inject Translator` is automatically transformed to `@Inject @Default Translator` during typesafe resolution.\n+And since our `SuperiorTranslator` does not declare `@Default` only the original `Translator` bean is assignable.\n+\n+== _Q: Looks good. What is the bean scope?_\n+\n+The scope of a bean determines the lifecycle of its instances, i.e. when and where an instance should be created and destroyed.\n+\n+NOTE: Every bean has exactly one scope.\n+\n+== _Q: What scopes can I actually use in my Quarkus application?_\n+\n+A: You can use all the built-in scopes mentioned by the specification except for `javax.enterprise.context.ConversationScoped`.\n+\n+[options=\"header\",cols=\"1,1\"]\n+|===\n+|Annotation   |Description   \n+//----------------------\n+|`@javax.enterprise.context.ApplicationScoped`   | A single bean instance is used for the application and shared among all injection points. The instance is created lazily, i.e. once a method is invoked upon the <<client_proxies, client proxy>>. \n+|`@javax.inject.Singleton`   | Just like `@ApplicationScoped` except that no client proxy is used. The instance is created eagerly.\n+|`@javax.enterprise.context.RequestScoped`   | The bean instance is associated with the current _request_ (usually an HTTP request). \n+|`@javax.enterprise.context.Dependent`   | This is a pseudo-scope. There is no context object that holds all dependent instances. Instead, a dependent instace is a dependent object of the bean it is injected into.\n+|`@javax.enterprise.context.SessionScoped`   | This scope is backed by an `javax.servlet.http.HttpSession` object. It's only available if `quarkus-undertow` extension is used.\n+|===\n+\n+NOTE: There can be other custom scopes provided by Quarkus extension. For example, `qquarkus-narayana-jta` provides `javax.transaction.TransactionScoped`.\n+\n+[[client_proxies]]\n+== _Q: I don't undestand the concept of client proxies._\n+\n+Indeed, the https://docs.jboss.org/cdi/spec/2.0/cdi-spec.html#client_proxies[client proxies, window=\"_blank\"] could be hard to grasp but they provide some useful functionality.\n+A client proxy is basically an object that delegates all method invocations to a target bean instance.\n+It's a container construct that implements `io.quarkus.arc.ClientProxy` and extends the bean class.\n+The client proxy instance is always injected instead of a contextual instance of a normal scoped bean (e.g. `@ApplicationScoped` and `@RequestScoped`).\n+Client proxies allow for:\n+\n+* Lazy instantiation - the instance is created once a method is invoked upon the proxy.\n+* Ability to inject a bean with \"narrower\" scope to a bean with \"wider\" scope; i.e. you can inject a `@RequestScoped` bean into an `@ApplicationScoped` bean.\n+* Circular dependencies in the dependency graph. Circular dependencies are \"bad design\" but sometimes they're inevitable. \n+* In rare cases it's practical to destroy the beans manually. A direct injected reference would lead to a stale bean instance.\n+ \n+ \n+== _Q: OK. You said that there are several kinds of beans?_\n+\n+A: Yes. In general, in Quarkus we distinguish:\n+\n+1. Class beans\n+2. Producer methods\n+3. Producer fields\n+4. Synthetic beans\n+\n+Producer methods are useful if you need additional control over instantiation of a bean.\n+They are also useful when integrating third-party libraries where you don't control the class source and may not add additional annotations etc.\n+\n+.Producer Method Example\n+[source,java]\n+----\n+@ApplicationScoped\n+public class PiProducer {\n+\n+    @Produces <1>\n+    double producePi() { \n+       return Math.PI; <2>\n+    }\n+}\n+\n+@ApplicationScoped\n+public class PiConsumer {\n+\n+   @Inject\n+   double pi; <3>\n+   \n+   double twoPis() {\n+     return pi * 2;\n+   }\n+} \n+----\n+<1> The container analyses the method annotations to build a bean metadata.\n+The return type is used to build the set of bean types. \n+In this case, it will be `double` and `java.lang.Object`.\n+No scope annotation is declared and so it's defaulted to `@Dependent`.\n+<2> The container will delegate to this method when creating the bean instance.\n+<3> `PiProducer#producePi()` is invoked and the result is set to `PiConsumer#pi` when the `PiConsumer` instance is created.\n+\n+NOTE: One of the limitations of producers is that interceptors are not applied to the result of a producer method/field.\n+\n+Producer fields are very similar to producer methods except that the field value is read when obtaining a bean instance.\n+\n+TIP: There's more about producers. You can declare qualifiers, inject dependencies into the producer methods parameters, etc. You can read more about producers for example in the https://docs.jboss.org/weld/reference/latest/en-US/html/beanscdi.html#_producer_methods[Weld docs, window=\"_blank\"].\n+\n+Synthetic beans are usually provided by extensions.\n+A synthetic bean is not backed by a class/method/field.\n+Application developers usually only consume this kind of beans.\n+\n+== _Q: OK injection looks cool. What other services are provided?_", "originalCommit": "63d155041a5447adba997da8577b662969847b05", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQxNDgxMw==", "url": "https://github.com/quarkusio/quarkus/pull/10529#discussion_r451414813", "bodyText": "I would add a second sample which will use qualifiers to demonstrate the typesafe resolution for observers.", "author": "manovotn", "createdAt": "2020-07-08T09:38:30Z", "path": "docs/src/main/asciidoc/cdi.adoc", "diffHunk": "@@ -0,0 +1,361 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Introduction to Contexts and Dependency Injection\n+\n+include::./attributes.adoc[]\n+:numbered:\n+:sectnums:\n+:sectnumlevels: 4\n+:toc:\n+\n+In this guide we're going to describe the basic principles of the programming model used all over the Quarkus universe. \n+Quarkus programming model is based on the http://docs.jboss.org/cdi/spec/2.0/cdi-spec.html[Contexts and Dependency Injection for Java 2.0, window=\"_blank\"] specification.\n+However, a full CDI implementation is not used under the hood.\n+Quarkus only implements a subset of the CDI features - see also <<cdi-reference.adoc#supported_features,the list of supported features>> and <<cdi-reference.adoc#limitations,the list of limitations>>.\n+On the other hand, there are quite a few <<cdi-reference#nonstandard_features,non-standard features>> and <<cdi-reference.adoc#build_time_apis,Quarkus-specific APIs>>.\n+We believe that our efforts will drive the innovation of the CDI specification towards the build-time oriented developer stacks in the future.\n+\n+== _Q: OK. Let's start simple. What is a bean?_\n+\n+A: Well, a bean is a _container-managed_ object that supports a set of basic services, such as injection of dependencies, lifecycle callbacks and interceptors.\n+\n+== _Q: Wait a minute. What does it mean container-managed?_\n+\n+A: Simply put, you don't control the lifecycle of the object instance directly.\n+Instead, you can affect the lifecycle through the declarative means, such as annotations, configuration, etc.\n+The container is the _environment_ where your application runs.\n+It creates and destroys the instances of beans, associates the instances with a designated context, and injects them into other beans.\n+\n+== _Q: What is it good for?_\n+\n+A: An application developer can focus on the business logic rather than \"where and how\" to obtain a fully initialized component with all of its dependencies.\n+\n+NOTE: You've probably heard of the _inversion of control_ (IoC) programming principle. Dependency injection is one of the implementation techniques of IoC. \n+\n+== _Q: OK. And what does a bean look like?_\n+\n+A: There are several kinds of beans.\n+The most common ones are class-based beans:\n+\n+.Simple Bean Example\n+[source,java]\n+----\n+import javax.inject.Inject;\n+import javax.enterprise.context.ApplicationScoped;\n+import org.eclipse.microprofile.metrics.annotation.Counted;\n+\n+@ApplicationScoped <1>\n+public class Translator {\n+\n+    @Inject\n+    Dictionary dictionary; <2>\n+    \n+    @Counted  <3>\n+    String translate(String sentence) { \n+      // ...\n+    }\n+}\n+----\n+<1> This is a scope annotation. It tells the container which context to associate the bean instance with. In this particular case, a *single bean instance* is created for the application and used by all dependants.\n+<2> This is a field injection point. It tells the container that `Translator` depends on the `Dictionary` bean. If there is no matching bean the build fails.\n+<3> This is an interceptor binding annotation. In this case, the annotation comes from the MicroProfile Metrics. The relevant interceptor intercepts the invocation and updates the relevant metrics.\n+\n+== _Q: Nice. How does the dependency resolution work? I see no names or identifiers._\n+\n+A: That's a good question.\n+In CDI the process of matching a bean to an injection point is *type-safe*.\n+Each bean declares a set of bean types.\n+In our example above, the `Translator` bean has two bean types: `Translator` and `java.lang.Object`.\n+Subsequently, a bean is assignable to an injection point if the bean has a bean type that matches the _required type_ and has all the _required qualifiers_.\n+We'll talk about qualifiers later.\n+For now, it's enough to know that the bean above is assignable to an injection point of type `Translator` and `java.lang.Object`.\n+\n+== _Q: Hm, wait a minute. What happens if multiple beans declare the same type?_\n+\n+A: There is a simple rule: *exactly one bean must be assignable to an injection point, otherwise the build fails*.\n+If none is assignable the build fails with `UnsatisfiedResolutionException`.\n+If multiple are assignable the build fails with `AmbiguousResolutionException`.\n+This is very useful because your application fails fast whenever the container is not able to find an unambiguous dependency for any injection point.\n+\n+[TIP]\n+====\n+Your can use programmatic lookup via  `javax.enterprise.inject.Instance` to resolve ambiguities at runtime and even iterate over all beans implementing a given type:\n+\n+[source,java]\n+----\n+public class Translator {\n+\n+    @Inject\n+    Instance<Dictionary> dictionaries; <1>\n+    \n+    String translate(String sentence) { \n+      for (Dictionary dict : dictionaries) { <2>\n+         // ...\n+      }\n+    }\n+}\n+----\n+<1> This injection point will not result in an ambiguous dependency even if there are multiple beans that implement the `Dictionary` type.\n+<2> `javax.enterprise.inject.Instance` extends `Iterable`.\n+====\n+\n+== _Q: Can I use setter and constructor injection?_\n+\n+A: Yes, you can.\n+In fact, in CDI the \"setter injection\" is superseded by more powerful https://docs.jboss.org/cdi/spec/2.0/cdi-spec.html#initializer_methods[initializer methods, window=\"_blank\"].\n+Intializers may accept multiple parameters and don't have to follow the JavaBean naming conventions.\n+\n+.Initialized and Constructor Injection Example\n+[source,java]\n+----\n+@ApplicationScoped\n+public class Translator {\n+\n+    private final TranslatorHelper helper\n+\n+    Translator(TranslatorHelper helper) { <1>\n+       this.helper = helper;\n+    }\n+\n+    @Inject <2>\n+    void setDeps(Dictionary dic, LocalizationService locService) { <3>\n+      / ...\n+    }\n+}\n+----\n+<1> This is a constructor injection. In fact, this code would not work in regular CDI implementations where a bean with a normal scope must always declare a no-args constructor. In Quarkus we detect this problem and \"add\" such a constructor directly in the bytecode.\n+<2> An initializer method must be annotated with `@Inject`. \n+<3> An initializer may accept multiple parameters - each one is an injection point.\n+\n+== _Q: You talked about some qualifiers?_\n+\n+A: https://docs.jboss.org/cdi/spec/2.0/cdi-spec.html#qualifiers[Qualifiers, window=\"_blank\"] are annotations that help the container to distinguish beans that implement the same type.\n+As we already said a bean is assignable to an injection point if it has all the required qualifiers.\n+If you declare no qualifier at an injection point the `@Default` qualifier is assumed.\n+\n+.Bean With Custom Qualifier Example\n+[source,java]\n+----\n+@Superior <1>\n+@ApplicationScoped\n+public class SuperiorTranslator extends Translator {\n+\n+    String translate(String sentence) { \n+      // ...\n+    }\n+}\n+----\n+<1> `@Superior` is a https://docs.jboss.org/cdi/spec/2.0/cdi-spec.html#defining_qualifier_types[qualifier annotation, window=\"_blank\"].\n+\n+This bean would be assignable to `@Inject @Superior Translator` and `@Inject @Superior SuperiorTranslator` but not in `@Inject Translator`.\n+The reason is that `@Inject Translator` is automatically transformed to `@Inject @Default Translator` during typesafe resolution.\n+And since our `SuperiorTranslator` does not declare `@Default` only the original `Translator` bean is assignable.\n+\n+== _Q: Looks good. What is the bean scope?_\n+\n+The scope of a bean determines the lifecycle of its instances, i.e. when and where an instance should be created and destroyed.\n+\n+NOTE: Every bean has exactly one scope.\n+\n+== _Q: What scopes can I actually use in my Quarkus application?_\n+\n+A: You can use all the built-in scopes mentioned by the specification except for `javax.enterprise.context.ConversationScoped`.\n+\n+[options=\"header\",cols=\"1,1\"]\n+|===\n+|Annotation   |Description   \n+//----------------------\n+|`@javax.enterprise.context.ApplicationScoped`   | A single bean instance is used for the application and shared among all injection points. The instance is created lazily, i.e. once a method is invoked upon the <<client_proxies, client proxy>>. \n+|`@javax.inject.Singleton`   | Just like `@ApplicationScoped` except that no client proxy is used. The instance is created eagerly.\n+|`@javax.enterprise.context.RequestScoped`   | The bean instance is associated with the current _request_ (usually an HTTP request). \n+|`@javax.enterprise.context.Dependent`   | This is a pseudo-scope. There is no context object that holds all dependent instances. Instead, a dependent instace is a dependent object of the bean it is injected into.\n+|`@javax.enterprise.context.SessionScoped`   | This scope is backed by an `javax.servlet.http.HttpSession` object. It's only available if `quarkus-undertow` extension is used.\n+|===\n+\n+NOTE: There can be other custom scopes provided by Quarkus extension. For example, `qquarkus-narayana-jta` provides `javax.transaction.TransactionScoped`.\n+\n+[[client_proxies]]\n+== _Q: I don't undestand the concept of client proxies._\n+\n+Indeed, the https://docs.jboss.org/cdi/spec/2.0/cdi-spec.html#client_proxies[client proxies, window=\"_blank\"] could be hard to grasp but they provide some useful functionality.\n+A client proxy is basically an object that delegates all method invocations to a target bean instance.\n+It's a container construct that implements `io.quarkus.arc.ClientProxy` and extends the bean class.\n+The client proxy instance is always injected instead of a contextual instance of a normal scoped bean (e.g. `@ApplicationScoped` and `@RequestScoped`).\n+Client proxies allow for:\n+\n+* Lazy instantiation - the instance is created once a method is invoked upon the proxy.\n+* Ability to inject a bean with \"narrower\" scope to a bean with \"wider\" scope; i.e. you can inject a `@RequestScoped` bean into an `@ApplicationScoped` bean.\n+* Circular dependencies in the dependency graph. Circular dependencies are \"bad design\" but sometimes they're inevitable. \n+* In rare cases it's practical to destroy the beans manually. A direct injected reference would lead to a stale bean instance.\n+ \n+ \n+== _Q: OK. You said that there are several kinds of beans?_\n+\n+A: Yes. In general, in Quarkus we distinguish:\n+\n+1. Class beans\n+2. Producer methods\n+3. Producer fields\n+4. Synthetic beans\n+\n+Producer methods are useful if you need additional control over instantiation of a bean.\n+They are also useful when integrating third-party libraries where you don't control the class source and may not add additional annotations etc.\n+\n+.Producer Method Example\n+[source,java]\n+----\n+@ApplicationScoped\n+public class PiProducer {\n+\n+    @Produces <1>\n+    double producePi() { \n+       return Math.PI; <2>\n+    }\n+}\n+\n+@ApplicationScoped\n+public class PiConsumer {\n+\n+   @Inject\n+   double pi; <3>\n+   \n+   double twoPis() {\n+     return pi * 2;\n+   }\n+} \n+----\n+<1> The container analyses the method annotations to build a bean metadata.\n+The return type is used to build the set of bean types. \n+In this case, it will be `double` and `java.lang.Object`.\n+No scope annotation is declared and so it's defaulted to `@Dependent`.\n+<2> The container will delegate to this method when creating the bean instance.\n+<3> `PiProducer#producePi()` is invoked and the result is set to `PiConsumer#pi` when the `PiConsumer` instance is created.\n+\n+NOTE: One of the limitations of producers is that interceptors are not applied to the result of a producer method/field.\n+\n+Producer fields are very similar to producer methods except that the field value is read when obtaining a bean instance.\n+\n+TIP: There's more about producers. You can declare qualifiers, inject dependencies into the producer methods parameters, etc. You can read more about producers for example in the https://docs.jboss.org/weld/reference/latest/en-US/html/beanscdi.html#_producer_methods[Weld docs, window=\"_blank\"].\n+\n+Synthetic beans are usually provided by extensions.\n+A synthetic bean is not backed by a class/method/field.\n+Application developers usually only consume this kind of beans.\n+\n+== _Q: OK injection looks cool. What other services are provided?_\n+\n+=== Lifecycle Callbacks\n+\n+A bean class may declare lifecycle `@PostConstruct` and `@PreDestroy` callbacks:\n+\n+.Lifecycle Callbacks Example\n+[source,java]\n+----\n+import javax.annotation.PostConstruct;\n+import javax.annotation.PreDestroy;\n+\n+@ApplicationScoped\n+public class Translator {\n+\n+    @PostConstruct <1>\n+    void init() {\n+       // ...\n+    }\n+    \n+    @PreDestroy <2>\n+    void destroy() {\n+      // ...\n+    }\n+}\n+----\n+<1> This callback is invoked before the bean instance is put into service. It is safe to perform some initialization here.\n+<2> This callback is invoked before the bean instance is destroyed. It is safe to perform some cleanup tasks here.\n+\n+TIP: It's a good practice to keep the logic in the callbacks \"without side effects\", i.e. you should avoid calling other beans inside the callbacks.\n+\n+=== Interceptors\n+\n+Interceptors are used to separate cross-cutting concerns from business logic. \n+There is a separate specification - Java Interceptors - that defines the basic programming model and semantics.\n+\n+.Simple Interceptor Example\n+[source,java]\n+----\n+import javax.interceptor.Interceptor;\n+import javax.annotation.Priority;\n+\n+@Logged <1>\n+@Priority(2020) <2>\n+@Interceptor <3>\n+public class LoggingInterceptor {\n+\n+   @Inject <4>\n+   Logger logger;\n+\n+   @AroundInvoke <5>\n+   Objec logInvocation(InvocationContext context) {\n+      // ...log before\n+      Objec ret = context.proceed(); <6>\n+      // ...log after\n+      return ret;\n+   }\n+    \n+}\n+----\n+<1> This is an interceptor binding annotation that is used to bind our interceptor to a bean. Simply annotate a bean class with `@Logged`.\n+<2> `Priority` enables the interceptor and affects the the interceptor ordering. \n+<3> Marks an interceptor component.\n+<4> An interceptor instance may be the target of dependency injection.\n+<5> `AroundInvoke` denotes a method that interposes on business methods.\n+<6> Proceed to the next interceptor in the interceptor chain or invoke the intercepted business method.\n+\n+NOTE: Instances of interceptors are dependent objects of the bean instance they intercept, i.e. a new interceptor instance is created for each intercepred bean.\n+\n+=== Events and Observers\n+\t\n+Beans may also produce and consume events to interact in a completely decoupled fashion.\n+Any Java object can serve as an event payload.\n+The optional qualifiers act as topic selectors.\n+\n+.Simple Event Example\n+[source,java]\n+----\n+\n+class TaskCompleted {\n+  // ...\n+}\n+\n+@ApplicationScoped\n+class ComplicatedService {\n+\n+   @Inject\n+   Event<Task> event; <1>\n+\n+   void doSomething() {\n+      // ...\n+      event.fire(new TaskCompleted()); <2>\n+   }\n+\n+}\n+\n+@ApplicationScoped\n+class Logger {\n+\n+   void onTaskCompleted(@Observes TaskCompleted task) { <3>", "originalCommit": "63d155041a5447adba997da8577b662969847b05", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQ1ODY5Mw==", "url": "https://github.com/quarkusio/quarkus/pull/10529#discussion_r451458693", "bodyText": "IMHO qualifiers are not used that often together with events/observers. I'd prefer to keep it simple. I will add a link to the weld docs though.", "author": "mkouba", "createdAt": "2020-07-08T11:02:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQxNDgxMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQxNTQxNQ==", "url": "https://github.com/quarkusio/quarkus/pull/10529#discussion_r451415415", "bodyText": "I am not sure linking to Weld makes sense here, I'd probably remove it.", "author": "manovotn", "createdAt": "2020-07-08T09:39:33Z", "path": "docs/src/main/asciidoc/cdi.adoc", "diffHunk": "@@ -0,0 +1,361 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Introduction to Contexts and Dependency Injection\n+\n+include::./attributes.adoc[]\n+:numbered:\n+:sectnums:\n+:sectnumlevels: 4\n+:toc:\n+\n+In this guide we're going to describe the basic principles of the programming model used all over the Quarkus universe. \n+Quarkus programming model is based on the http://docs.jboss.org/cdi/spec/2.0/cdi-spec.html[Contexts and Dependency Injection for Java 2.0, window=\"_blank\"] specification.\n+However, a full CDI implementation is not used under the hood.\n+Quarkus only implements a subset of the CDI features - see also <<cdi-reference.adoc#supported_features,the list of supported features>> and <<cdi-reference.adoc#limitations,the list of limitations>>.\n+On the other hand, there are quite a few <<cdi-reference#nonstandard_features,non-standard features>> and <<cdi-reference.adoc#build_time_apis,Quarkus-specific APIs>>.\n+We believe that our efforts will drive the innovation of the CDI specification towards the build-time oriented developer stacks in the future.\n+\n+== _Q: OK. Let's start simple. What is a bean?_\n+\n+A: Well, a bean is a _container-managed_ object that supports a set of basic services, such as injection of dependencies, lifecycle callbacks and interceptors.\n+\n+== _Q: Wait a minute. What does it mean container-managed?_\n+\n+A: Simply put, you don't control the lifecycle of the object instance directly.\n+Instead, you can affect the lifecycle through the declarative means, such as annotations, configuration, etc.\n+The container is the _environment_ where your application runs.\n+It creates and destroys the instances of beans, associates the instances with a designated context, and injects them into other beans.\n+\n+== _Q: What is it good for?_\n+\n+A: An application developer can focus on the business logic rather than \"where and how\" to obtain a fully initialized component with all of its dependencies.\n+\n+NOTE: You've probably heard of the _inversion of control_ (IoC) programming principle. Dependency injection is one of the implementation techniques of IoC. \n+\n+== _Q: OK. And what does a bean look like?_\n+\n+A: There are several kinds of beans.\n+The most common ones are class-based beans:\n+\n+.Simple Bean Example\n+[source,java]\n+----\n+import javax.inject.Inject;\n+import javax.enterprise.context.ApplicationScoped;\n+import org.eclipse.microprofile.metrics.annotation.Counted;\n+\n+@ApplicationScoped <1>\n+public class Translator {\n+\n+    @Inject\n+    Dictionary dictionary; <2>\n+    \n+    @Counted  <3>\n+    String translate(String sentence) { \n+      // ...\n+    }\n+}\n+----\n+<1> This is a scope annotation. It tells the container which context to associate the bean instance with. In this particular case, a *single bean instance* is created for the application and used by all dependants.\n+<2> This is a field injection point. It tells the container that `Translator` depends on the `Dictionary` bean. If there is no matching bean the build fails.\n+<3> This is an interceptor binding annotation. In this case, the annotation comes from the MicroProfile Metrics. The relevant interceptor intercepts the invocation and updates the relevant metrics.\n+\n+== _Q: Nice. How does the dependency resolution work? I see no names or identifiers._\n+\n+A: That's a good question.\n+In CDI the process of matching a bean to an injection point is *type-safe*.\n+Each bean declares a set of bean types.\n+In our example above, the `Translator` bean has two bean types: `Translator` and `java.lang.Object`.\n+Subsequently, a bean is assignable to an injection point if the bean has a bean type that matches the _required type_ and has all the _required qualifiers_.\n+We'll talk about qualifiers later.\n+For now, it's enough to know that the bean above is assignable to an injection point of type `Translator` and `java.lang.Object`.\n+\n+== _Q: Hm, wait a minute. What happens if multiple beans declare the same type?_\n+\n+A: There is a simple rule: *exactly one bean must be assignable to an injection point, otherwise the build fails*.\n+If none is assignable the build fails with `UnsatisfiedResolutionException`.\n+If multiple are assignable the build fails with `AmbiguousResolutionException`.\n+This is very useful because your application fails fast whenever the container is not able to find an unambiguous dependency for any injection point.\n+\n+[TIP]\n+====\n+Your can use programmatic lookup via  `javax.enterprise.inject.Instance` to resolve ambiguities at runtime and even iterate over all beans implementing a given type:\n+\n+[source,java]\n+----\n+public class Translator {\n+\n+    @Inject\n+    Instance<Dictionary> dictionaries; <1>\n+    \n+    String translate(String sentence) { \n+      for (Dictionary dict : dictionaries) { <2>\n+         // ...\n+      }\n+    }\n+}\n+----\n+<1> This injection point will not result in an ambiguous dependency even if there are multiple beans that implement the `Dictionary` type.\n+<2> `javax.enterprise.inject.Instance` extends `Iterable`.\n+====\n+\n+== _Q: Can I use setter and constructor injection?_\n+\n+A: Yes, you can.\n+In fact, in CDI the \"setter injection\" is superseded by more powerful https://docs.jboss.org/cdi/spec/2.0/cdi-spec.html#initializer_methods[initializer methods, window=\"_blank\"].\n+Intializers may accept multiple parameters and don't have to follow the JavaBean naming conventions.\n+\n+.Initialized and Constructor Injection Example\n+[source,java]\n+----\n+@ApplicationScoped\n+public class Translator {\n+\n+    private final TranslatorHelper helper\n+\n+    Translator(TranslatorHelper helper) { <1>\n+       this.helper = helper;\n+    }\n+\n+    @Inject <2>\n+    void setDeps(Dictionary dic, LocalizationService locService) { <3>\n+      / ...\n+    }\n+}\n+----\n+<1> This is a constructor injection. In fact, this code would not work in regular CDI implementations where a bean with a normal scope must always declare a no-args constructor. In Quarkus we detect this problem and \"add\" such a constructor directly in the bytecode.\n+<2> An initializer method must be annotated with `@Inject`. \n+<3> An initializer may accept multiple parameters - each one is an injection point.\n+\n+== _Q: You talked about some qualifiers?_\n+\n+A: https://docs.jboss.org/cdi/spec/2.0/cdi-spec.html#qualifiers[Qualifiers, window=\"_blank\"] are annotations that help the container to distinguish beans that implement the same type.\n+As we already said a bean is assignable to an injection point if it has all the required qualifiers.\n+If you declare no qualifier at an injection point the `@Default` qualifier is assumed.\n+\n+.Bean With Custom Qualifier Example\n+[source,java]\n+----\n+@Superior <1>\n+@ApplicationScoped\n+public class SuperiorTranslator extends Translator {\n+\n+    String translate(String sentence) { \n+      // ...\n+    }\n+}\n+----\n+<1> `@Superior` is a https://docs.jboss.org/cdi/spec/2.0/cdi-spec.html#defining_qualifier_types[qualifier annotation, window=\"_blank\"].\n+\n+This bean would be assignable to `@Inject @Superior Translator` and `@Inject @Superior SuperiorTranslator` but not in `@Inject Translator`.\n+The reason is that `@Inject Translator` is automatically transformed to `@Inject @Default Translator` during typesafe resolution.\n+And since our `SuperiorTranslator` does not declare `@Default` only the original `Translator` bean is assignable.\n+\n+== _Q: Looks good. What is the bean scope?_\n+\n+The scope of a bean determines the lifecycle of its instances, i.e. when and where an instance should be created and destroyed.\n+\n+NOTE: Every bean has exactly one scope.\n+\n+== _Q: What scopes can I actually use in my Quarkus application?_\n+\n+A: You can use all the built-in scopes mentioned by the specification except for `javax.enterprise.context.ConversationScoped`.\n+\n+[options=\"header\",cols=\"1,1\"]\n+|===\n+|Annotation   |Description   \n+//----------------------\n+|`@javax.enterprise.context.ApplicationScoped`   | A single bean instance is used for the application and shared among all injection points. The instance is created lazily, i.e. once a method is invoked upon the <<client_proxies, client proxy>>. \n+|`@javax.inject.Singleton`   | Just like `@ApplicationScoped` except that no client proxy is used. The instance is created eagerly.\n+|`@javax.enterprise.context.RequestScoped`   | The bean instance is associated with the current _request_ (usually an HTTP request). \n+|`@javax.enterprise.context.Dependent`   | This is a pseudo-scope. There is no context object that holds all dependent instances. Instead, a dependent instace is a dependent object of the bean it is injected into.\n+|`@javax.enterprise.context.SessionScoped`   | This scope is backed by an `javax.servlet.http.HttpSession` object. It's only available if `quarkus-undertow` extension is used.\n+|===\n+\n+NOTE: There can be other custom scopes provided by Quarkus extension. For example, `qquarkus-narayana-jta` provides `javax.transaction.TransactionScoped`.\n+\n+[[client_proxies]]\n+== _Q: I don't undestand the concept of client proxies._\n+\n+Indeed, the https://docs.jboss.org/cdi/spec/2.0/cdi-spec.html#client_proxies[client proxies, window=\"_blank\"] could be hard to grasp but they provide some useful functionality.\n+A client proxy is basically an object that delegates all method invocations to a target bean instance.\n+It's a container construct that implements `io.quarkus.arc.ClientProxy` and extends the bean class.\n+The client proxy instance is always injected instead of a contextual instance of a normal scoped bean (e.g. `@ApplicationScoped` and `@RequestScoped`).\n+Client proxies allow for:\n+\n+* Lazy instantiation - the instance is created once a method is invoked upon the proxy.\n+* Ability to inject a bean with \"narrower\" scope to a bean with \"wider\" scope; i.e. you can inject a `@RequestScoped` bean into an `@ApplicationScoped` bean.\n+* Circular dependencies in the dependency graph. Circular dependencies are \"bad design\" but sometimes they're inevitable. \n+* In rare cases it's practical to destroy the beans manually. A direct injected reference would lead to a stale bean instance.\n+ \n+ \n+== _Q: OK. You said that there are several kinds of beans?_\n+\n+A: Yes. In general, in Quarkus we distinguish:\n+\n+1. Class beans\n+2. Producer methods\n+3. Producer fields\n+4. Synthetic beans\n+\n+Producer methods are useful if you need additional control over instantiation of a bean.\n+They are also useful when integrating third-party libraries where you don't control the class source and may not add additional annotations etc.\n+\n+.Producer Method Example\n+[source,java]\n+----\n+@ApplicationScoped\n+public class PiProducer {\n+\n+    @Produces <1>\n+    double producePi() { \n+       return Math.PI; <2>\n+    }\n+}\n+\n+@ApplicationScoped\n+public class PiConsumer {\n+\n+   @Inject\n+   double pi; <3>\n+   \n+   double twoPis() {\n+     return pi * 2;\n+   }\n+} \n+----\n+<1> The container analyses the method annotations to build a bean metadata.\n+The return type is used to build the set of bean types. \n+In this case, it will be `double` and `java.lang.Object`.\n+No scope annotation is declared and so it's defaulted to `@Dependent`.\n+<2> The container will delegate to this method when creating the bean instance.\n+<3> `PiProducer#producePi()` is invoked and the result is set to `PiConsumer#pi` when the `PiConsumer` instance is created.\n+\n+NOTE: One of the limitations of producers is that interceptors are not applied to the result of a producer method/field.\n+\n+Producer fields are very similar to producer methods except that the field value is read when obtaining a bean instance.\n+\n+TIP: There's more about producers. You can declare qualifiers, inject dependencies into the producer methods parameters, etc. You can read more about producers for example in the https://docs.jboss.org/weld/reference/latest/en-US/html/beanscdi.html#_producer_methods[Weld docs, window=\"_blank\"].\n+\n+Synthetic beans are usually provided by extensions.\n+A synthetic bean is not backed by a class/method/field.\n+Application developers usually only consume this kind of beans.\n+\n+== _Q: OK injection looks cool. What other services are provided?_\n+\n+=== Lifecycle Callbacks\n+\n+A bean class may declare lifecycle `@PostConstruct` and `@PreDestroy` callbacks:\n+\n+.Lifecycle Callbacks Example\n+[source,java]\n+----\n+import javax.annotation.PostConstruct;\n+import javax.annotation.PreDestroy;\n+\n+@ApplicationScoped\n+public class Translator {\n+\n+    @PostConstruct <1>\n+    void init() {\n+       // ...\n+    }\n+    \n+    @PreDestroy <2>\n+    void destroy() {\n+      // ...\n+    }\n+}\n+----\n+<1> This callback is invoked before the bean instance is put into service. It is safe to perform some initialization here.\n+<2> This callback is invoked before the bean instance is destroyed. It is safe to perform some cleanup tasks here.\n+\n+TIP: It's a good practice to keep the logic in the callbacks \"without side effects\", i.e. you should avoid calling other beans inside the callbacks.\n+\n+=== Interceptors\n+\n+Interceptors are used to separate cross-cutting concerns from business logic. \n+There is a separate specification - Java Interceptors - that defines the basic programming model and semantics.\n+\n+.Simple Interceptor Example\n+[source,java]\n+----\n+import javax.interceptor.Interceptor;\n+import javax.annotation.Priority;\n+\n+@Logged <1>\n+@Priority(2020) <2>\n+@Interceptor <3>\n+public class LoggingInterceptor {\n+\n+   @Inject <4>\n+   Logger logger;\n+\n+   @AroundInvoke <5>\n+   Objec logInvocation(InvocationContext context) {\n+      // ...log before\n+      Objec ret = context.proceed(); <6>\n+      // ...log after\n+      return ret;\n+   }\n+    \n+}\n+----\n+<1> This is an interceptor binding annotation that is used to bind our interceptor to a bean. Simply annotate a bean class with `@Logged`.\n+<2> `Priority` enables the interceptor and affects the the interceptor ordering. \n+<3> Marks an interceptor component.\n+<4> An interceptor instance may be the target of dependency injection.\n+<5> `AroundInvoke` denotes a method that interposes on business methods.\n+<6> Proceed to the next interceptor in the interceptor chain or invoke the intercepted business method.\n+\n+NOTE: Instances of interceptors are dependent objects of the bean instance they intercept, i.e. a new interceptor instance is created for each intercepred bean.\n+\n+=== Events and Observers\n+\t\n+Beans may also produce and consume events to interact in a completely decoupled fashion.\n+Any Java object can serve as an event payload.\n+The optional qualifiers act as topic selectors.\n+\n+.Simple Event Example\n+[source,java]\n+----\n+\n+class TaskCompleted {\n+  // ...\n+}\n+\n+@ApplicationScoped\n+class ComplicatedService {\n+\n+   @Inject\n+   Event<Task> event; <1>\n+\n+   void doSomething() {\n+      // ...\n+      event.fire(new TaskCompleted()); <2>\n+   }\n+\n+}\n+\n+@ApplicationScoped\n+class Logger {\n+\n+   void onTaskCompleted(@Observes TaskCompleted task) { <3>\n+      // ...log the task\n+   }\n+\n+}\n+----\n+<1> `javax.enterprise.event.Event` is used to fire events.\n+<2> Fire the event synchronously.\n+<3> This method is notified when a `TaskCompleted` event is fired.\n+\n+== Conclusion\n+\n+CDI is very mature and powerful technology.\n+In this guide, we've covered some of the basic topics.\n+There is a Quarkus link:cdi-reference[CDI Reference Guide] that covers some Quarkus-specific features and limitations.\n+We also recommend you to read the http://docs.jboss.org/cdi/spec/2.0/cdi-spec.html[CDI specification] and the https://docs.jboss.org/weld/reference/latest/en-US/html/[Weld documentation] (Weld is a CDI Reference Implementation) to get acquainted with more complex topics.", "originalCommit": "63d155041a5447adba997da8577b662969847b05", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQ1OTkyMw==", "url": "https://github.com/quarkusio/quarkus/pull/10529#discussion_r451459923", "bodyText": "The Weld docs are a good source of info about CDI. I'm +10 to keep the link. BTW there are quite a few links to the Weld docs in the guide anyway....", "author": "mkouba", "createdAt": "2020-07-08T11:04:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQxNTQxNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQxNjA0OA==", "url": "https://github.com/quarkusio/quarkus/pull/10529#discussion_r451416048", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            There is a Quarkus link:cdi-reference[CDI Reference Guide] that covers some Quarkus-specific features and limitations.\n          \n          \n            \n            If you wish to learn more, there is a Quarkus link:cdi-reference[CDI Reference Guide] that covers some Quarkus-specific features and limitations.", "author": "manovotn", "createdAt": "2020-07-08T09:40:40Z", "path": "docs/src/main/asciidoc/cdi.adoc", "diffHunk": "@@ -0,0 +1,361 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Introduction to Contexts and Dependency Injection\n+\n+include::./attributes.adoc[]\n+:numbered:\n+:sectnums:\n+:sectnumlevels: 4\n+:toc:\n+\n+In this guide we're going to describe the basic principles of the programming model used all over the Quarkus universe. \n+Quarkus programming model is based on the http://docs.jboss.org/cdi/spec/2.0/cdi-spec.html[Contexts and Dependency Injection for Java 2.0, window=\"_blank\"] specification.\n+However, a full CDI implementation is not used under the hood.\n+Quarkus only implements a subset of the CDI features - see also <<cdi-reference.adoc#supported_features,the list of supported features>> and <<cdi-reference.adoc#limitations,the list of limitations>>.\n+On the other hand, there are quite a few <<cdi-reference#nonstandard_features,non-standard features>> and <<cdi-reference.adoc#build_time_apis,Quarkus-specific APIs>>.\n+We believe that our efforts will drive the innovation of the CDI specification towards the build-time oriented developer stacks in the future.\n+\n+== _Q: OK. Let's start simple. What is a bean?_\n+\n+A: Well, a bean is a _container-managed_ object that supports a set of basic services, such as injection of dependencies, lifecycle callbacks and interceptors.\n+\n+== _Q: Wait a minute. What does it mean container-managed?_\n+\n+A: Simply put, you don't control the lifecycle of the object instance directly.\n+Instead, you can affect the lifecycle through the declarative means, such as annotations, configuration, etc.\n+The container is the _environment_ where your application runs.\n+It creates and destroys the instances of beans, associates the instances with a designated context, and injects them into other beans.\n+\n+== _Q: What is it good for?_\n+\n+A: An application developer can focus on the business logic rather than \"where and how\" to obtain a fully initialized component with all of its dependencies.\n+\n+NOTE: You've probably heard of the _inversion of control_ (IoC) programming principle. Dependency injection is one of the implementation techniques of IoC. \n+\n+== _Q: OK. And what does a bean look like?_\n+\n+A: There are several kinds of beans.\n+The most common ones are class-based beans:\n+\n+.Simple Bean Example\n+[source,java]\n+----\n+import javax.inject.Inject;\n+import javax.enterprise.context.ApplicationScoped;\n+import org.eclipse.microprofile.metrics.annotation.Counted;\n+\n+@ApplicationScoped <1>\n+public class Translator {\n+\n+    @Inject\n+    Dictionary dictionary; <2>\n+    \n+    @Counted  <3>\n+    String translate(String sentence) { \n+      // ...\n+    }\n+}\n+----\n+<1> This is a scope annotation. It tells the container which context to associate the bean instance with. In this particular case, a *single bean instance* is created for the application and used by all dependants.\n+<2> This is a field injection point. It tells the container that `Translator` depends on the `Dictionary` bean. If there is no matching bean the build fails.\n+<3> This is an interceptor binding annotation. In this case, the annotation comes from the MicroProfile Metrics. The relevant interceptor intercepts the invocation and updates the relevant metrics.\n+\n+== _Q: Nice. How does the dependency resolution work? I see no names or identifiers._\n+\n+A: That's a good question.\n+In CDI the process of matching a bean to an injection point is *type-safe*.\n+Each bean declares a set of bean types.\n+In our example above, the `Translator` bean has two bean types: `Translator` and `java.lang.Object`.\n+Subsequently, a bean is assignable to an injection point if the bean has a bean type that matches the _required type_ and has all the _required qualifiers_.\n+We'll talk about qualifiers later.\n+For now, it's enough to know that the bean above is assignable to an injection point of type `Translator` and `java.lang.Object`.\n+\n+== _Q: Hm, wait a minute. What happens if multiple beans declare the same type?_\n+\n+A: There is a simple rule: *exactly one bean must be assignable to an injection point, otherwise the build fails*.\n+If none is assignable the build fails with `UnsatisfiedResolutionException`.\n+If multiple are assignable the build fails with `AmbiguousResolutionException`.\n+This is very useful because your application fails fast whenever the container is not able to find an unambiguous dependency for any injection point.\n+\n+[TIP]\n+====\n+Your can use programmatic lookup via  `javax.enterprise.inject.Instance` to resolve ambiguities at runtime and even iterate over all beans implementing a given type:\n+\n+[source,java]\n+----\n+public class Translator {\n+\n+    @Inject\n+    Instance<Dictionary> dictionaries; <1>\n+    \n+    String translate(String sentence) { \n+      for (Dictionary dict : dictionaries) { <2>\n+         // ...\n+      }\n+    }\n+}\n+----\n+<1> This injection point will not result in an ambiguous dependency even if there are multiple beans that implement the `Dictionary` type.\n+<2> `javax.enterprise.inject.Instance` extends `Iterable`.\n+====\n+\n+== _Q: Can I use setter and constructor injection?_\n+\n+A: Yes, you can.\n+In fact, in CDI the \"setter injection\" is superseded by more powerful https://docs.jboss.org/cdi/spec/2.0/cdi-spec.html#initializer_methods[initializer methods, window=\"_blank\"].\n+Intializers may accept multiple parameters and don't have to follow the JavaBean naming conventions.\n+\n+.Initialized and Constructor Injection Example\n+[source,java]\n+----\n+@ApplicationScoped\n+public class Translator {\n+\n+    private final TranslatorHelper helper\n+\n+    Translator(TranslatorHelper helper) { <1>\n+       this.helper = helper;\n+    }\n+\n+    @Inject <2>\n+    void setDeps(Dictionary dic, LocalizationService locService) { <3>\n+      / ...\n+    }\n+}\n+----\n+<1> This is a constructor injection. In fact, this code would not work in regular CDI implementations where a bean with a normal scope must always declare a no-args constructor. In Quarkus we detect this problem and \"add\" such a constructor directly in the bytecode.\n+<2> An initializer method must be annotated with `@Inject`. \n+<3> An initializer may accept multiple parameters - each one is an injection point.\n+\n+== _Q: You talked about some qualifiers?_\n+\n+A: https://docs.jboss.org/cdi/spec/2.0/cdi-spec.html#qualifiers[Qualifiers, window=\"_blank\"] are annotations that help the container to distinguish beans that implement the same type.\n+As we already said a bean is assignable to an injection point if it has all the required qualifiers.\n+If you declare no qualifier at an injection point the `@Default` qualifier is assumed.\n+\n+.Bean With Custom Qualifier Example\n+[source,java]\n+----\n+@Superior <1>\n+@ApplicationScoped\n+public class SuperiorTranslator extends Translator {\n+\n+    String translate(String sentence) { \n+      // ...\n+    }\n+}\n+----\n+<1> `@Superior` is a https://docs.jboss.org/cdi/spec/2.0/cdi-spec.html#defining_qualifier_types[qualifier annotation, window=\"_blank\"].\n+\n+This bean would be assignable to `@Inject @Superior Translator` and `@Inject @Superior SuperiorTranslator` but not in `@Inject Translator`.\n+The reason is that `@Inject Translator` is automatically transformed to `@Inject @Default Translator` during typesafe resolution.\n+And since our `SuperiorTranslator` does not declare `@Default` only the original `Translator` bean is assignable.\n+\n+== _Q: Looks good. What is the bean scope?_\n+\n+The scope of a bean determines the lifecycle of its instances, i.e. when and where an instance should be created and destroyed.\n+\n+NOTE: Every bean has exactly one scope.\n+\n+== _Q: What scopes can I actually use in my Quarkus application?_\n+\n+A: You can use all the built-in scopes mentioned by the specification except for `javax.enterprise.context.ConversationScoped`.\n+\n+[options=\"header\",cols=\"1,1\"]\n+|===\n+|Annotation   |Description   \n+//----------------------\n+|`@javax.enterprise.context.ApplicationScoped`   | A single bean instance is used for the application and shared among all injection points. The instance is created lazily, i.e. once a method is invoked upon the <<client_proxies, client proxy>>. \n+|`@javax.inject.Singleton`   | Just like `@ApplicationScoped` except that no client proxy is used. The instance is created eagerly.\n+|`@javax.enterprise.context.RequestScoped`   | The bean instance is associated with the current _request_ (usually an HTTP request). \n+|`@javax.enterprise.context.Dependent`   | This is a pseudo-scope. There is no context object that holds all dependent instances. Instead, a dependent instace is a dependent object of the bean it is injected into.\n+|`@javax.enterprise.context.SessionScoped`   | This scope is backed by an `javax.servlet.http.HttpSession` object. It's only available if `quarkus-undertow` extension is used.\n+|===\n+\n+NOTE: There can be other custom scopes provided by Quarkus extension. For example, `qquarkus-narayana-jta` provides `javax.transaction.TransactionScoped`.\n+\n+[[client_proxies]]\n+== _Q: I don't undestand the concept of client proxies._\n+\n+Indeed, the https://docs.jboss.org/cdi/spec/2.0/cdi-spec.html#client_proxies[client proxies, window=\"_blank\"] could be hard to grasp but they provide some useful functionality.\n+A client proxy is basically an object that delegates all method invocations to a target bean instance.\n+It's a container construct that implements `io.quarkus.arc.ClientProxy` and extends the bean class.\n+The client proxy instance is always injected instead of a contextual instance of a normal scoped bean (e.g. `@ApplicationScoped` and `@RequestScoped`).\n+Client proxies allow for:\n+\n+* Lazy instantiation - the instance is created once a method is invoked upon the proxy.\n+* Ability to inject a bean with \"narrower\" scope to a bean with \"wider\" scope; i.e. you can inject a `@RequestScoped` bean into an `@ApplicationScoped` bean.\n+* Circular dependencies in the dependency graph. Circular dependencies are \"bad design\" but sometimes they're inevitable. \n+* In rare cases it's practical to destroy the beans manually. A direct injected reference would lead to a stale bean instance.\n+ \n+ \n+== _Q: OK. You said that there are several kinds of beans?_\n+\n+A: Yes. In general, in Quarkus we distinguish:\n+\n+1. Class beans\n+2. Producer methods\n+3. Producer fields\n+4. Synthetic beans\n+\n+Producer methods are useful if you need additional control over instantiation of a bean.\n+They are also useful when integrating third-party libraries where you don't control the class source and may not add additional annotations etc.\n+\n+.Producer Method Example\n+[source,java]\n+----\n+@ApplicationScoped\n+public class PiProducer {\n+\n+    @Produces <1>\n+    double producePi() { \n+       return Math.PI; <2>\n+    }\n+}\n+\n+@ApplicationScoped\n+public class PiConsumer {\n+\n+   @Inject\n+   double pi; <3>\n+   \n+   double twoPis() {\n+     return pi * 2;\n+   }\n+} \n+----\n+<1> The container analyses the method annotations to build a bean metadata.\n+The return type is used to build the set of bean types. \n+In this case, it will be `double` and `java.lang.Object`.\n+No scope annotation is declared and so it's defaulted to `@Dependent`.\n+<2> The container will delegate to this method when creating the bean instance.\n+<3> `PiProducer#producePi()` is invoked and the result is set to `PiConsumer#pi` when the `PiConsumer` instance is created.\n+\n+NOTE: One of the limitations of producers is that interceptors are not applied to the result of a producer method/field.\n+\n+Producer fields are very similar to producer methods except that the field value is read when obtaining a bean instance.\n+\n+TIP: There's more about producers. You can declare qualifiers, inject dependencies into the producer methods parameters, etc. You can read more about producers for example in the https://docs.jboss.org/weld/reference/latest/en-US/html/beanscdi.html#_producer_methods[Weld docs, window=\"_blank\"].\n+\n+Synthetic beans are usually provided by extensions.\n+A synthetic bean is not backed by a class/method/field.\n+Application developers usually only consume this kind of beans.\n+\n+== _Q: OK injection looks cool. What other services are provided?_\n+\n+=== Lifecycle Callbacks\n+\n+A bean class may declare lifecycle `@PostConstruct` and `@PreDestroy` callbacks:\n+\n+.Lifecycle Callbacks Example\n+[source,java]\n+----\n+import javax.annotation.PostConstruct;\n+import javax.annotation.PreDestroy;\n+\n+@ApplicationScoped\n+public class Translator {\n+\n+    @PostConstruct <1>\n+    void init() {\n+       // ...\n+    }\n+    \n+    @PreDestroy <2>\n+    void destroy() {\n+      // ...\n+    }\n+}\n+----\n+<1> This callback is invoked before the bean instance is put into service. It is safe to perform some initialization here.\n+<2> This callback is invoked before the bean instance is destroyed. It is safe to perform some cleanup tasks here.\n+\n+TIP: It's a good practice to keep the logic in the callbacks \"without side effects\", i.e. you should avoid calling other beans inside the callbacks.\n+\n+=== Interceptors\n+\n+Interceptors are used to separate cross-cutting concerns from business logic. \n+There is a separate specification - Java Interceptors - that defines the basic programming model and semantics.\n+\n+.Simple Interceptor Example\n+[source,java]\n+----\n+import javax.interceptor.Interceptor;\n+import javax.annotation.Priority;\n+\n+@Logged <1>\n+@Priority(2020) <2>\n+@Interceptor <3>\n+public class LoggingInterceptor {\n+\n+   @Inject <4>\n+   Logger logger;\n+\n+   @AroundInvoke <5>\n+   Objec logInvocation(InvocationContext context) {\n+      // ...log before\n+      Objec ret = context.proceed(); <6>\n+      // ...log after\n+      return ret;\n+   }\n+    \n+}\n+----\n+<1> This is an interceptor binding annotation that is used to bind our interceptor to a bean. Simply annotate a bean class with `@Logged`.\n+<2> `Priority` enables the interceptor and affects the the interceptor ordering. \n+<3> Marks an interceptor component.\n+<4> An interceptor instance may be the target of dependency injection.\n+<5> `AroundInvoke` denotes a method that interposes on business methods.\n+<6> Proceed to the next interceptor in the interceptor chain or invoke the intercepted business method.\n+\n+NOTE: Instances of interceptors are dependent objects of the bean instance they intercept, i.e. a new interceptor instance is created for each intercepred bean.\n+\n+=== Events and Observers\n+\t\n+Beans may also produce and consume events to interact in a completely decoupled fashion.\n+Any Java object can serve as an event payload.\n+The optional qualifiers act as topic selectors.\n+\n+.Simple Event Example\n+[source,java]\n+----\n+\n+class TaskCompleted {\n+  // ...\n+}\n+\n+@ApplicationScoped\n+class ComplicatedService {\n+\n+   @Inject\n+   Event<Task> event; <1>\n+\n+   void doSomething() {\n+      // ...\n+      event.fire(new TaskCompleted()); <2>\n+   }\n+\n+}\n+\n+@ApplicationScoped\n+class Logger {\n+\n+   void onTaskCompleted(@Observes TaskCompleted task) { <3>\n+      // ...log the task\n+   }\n+\n+}\n+----\n+<1> `javax.enterprise.event.Event` is used to fire events.\n+<2> Fire the event synchronously.\n+<3> This method is notified when a `TaskCompleted` event is fired.\n+\n+== Conclusion\n+\n+CDI is very mature and powerful technology.\n+In this guide, we've covered some of the basic topics.\n+There is a Quarkus link:cdi-reference[CDI Reference Guide] that covers some Quarkus-specific features and limitations.", "originalCommit": "63d155041a5447adba997da8577b662969847b05", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQ2MDcwNw==", "url": "https://github.com/quarkusio/quarkus/pull/10529#discussion_r451460707", "bodyText": "Hm, what about \"If you wish to learn more about Quarkus-specific features and limitations there is a Quarkus link:cdi-reference[CDI Reference Guide].\"", "author": "mkouba", "createdAt": "2020-07-08T11:05:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQxNjA0OA=="}], "type": "inlineReview"}, {"oid": "4af996f333a5691769ff66a8dcd8fb883c807ea9", "url": "https://github.com/quarkusio/quarkus/commit/4af996f333a5691769ff66a8dcd8fb883c807ea9", "message": "Docs - add Introduction to CDI", "committedDate": "2020-07-08T10:42:23Z", "type": "forcePushed"}, {"oid": "6e35ed5b348e82c797d77d9288eea0cb6fe84bfc", "url": "https://github.com/quarkusio/quarkus/commit/6e35ed5b348e82c797d77d9288eea0cb6fe84bfc", "message": "Docs - add Introduction to CDI", "committedDate": "2020-07-08T11:26:14Z", "type": "forcePushed"}, {"oid": "e4d69b9f9c4087e8dce17b61bd92da5808231446", "url": "https://github.com/quarkusio/quarkus/commit/e4d69b9f9c4087e8dce17b61bd92da5808231446", "message": "Docs - add Introduction to CDI", "committedDate": "2020-07-08T11:30:13Z", "type": "commit"}, {"oid": "e4d69b9f9c4087e8dce17b61bd92da5808231446", "url": "https://github.com/quarkusio/quarkus/commit/e4d69b9f9c4087e8dce17b61bd92da5808231446", "message": "Docs - add Introduction to CDI", "committedDate": "2020-07-08T11:30:13Z", "type": "forcePushed"}]}