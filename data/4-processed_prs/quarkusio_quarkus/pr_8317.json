{"pr_number": 8317, "pr_title": "New Lambda packaging", "pr_createdAt": "2020-04-01T03:03:47Z", "pr_url": "https://github.com/quarkusio/quarkus/pull/8317", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTMzNTQzMg==", "url": "https://github.com/quarkusio/quarkus/pull/8317#discussion_r401335432", "bodyText": "This should be a property", "author": "stuartwdouglas", "createdAt": "2020-04-01T03:27:55Z", "path": "bom/deployment/pom.xml", "diffHunk": "@@ -16,6 +16,14 @@\n     <dependencyManagement>\n         <dependencies>\n \n+            <!-- Third party deployment dependencies -->\n+            <dependency>\n+                <groupId>org.apache.commons</groupId>\n+                <artifactId>commons-compress</artifactId>\n+                <version>1.20</version>", "originalCommit": "55648b5bb41aa222ac46b93dce8bfa300afaeb40", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTMzNjc0NQ==", "url": "https://github.com/quarkusio/quarkus/pull/8317#discussion_r401336745", "bodyText": "I can't help thinking that we need a build item to represent these additional files, so we have some way of tracking all the outputs of the build. I don't actually have a use case for this at the moment and this is fine for now, but maybe something we should revisit later.", "author": "stuartwdouglas", "createdAt": "2020-04-01T03:33:04Z", "path": "extensions/amazon-lambda-http/deployment/src/main/java/io/quarkus/amazon/lambda/http/deployment/AmazonLambdaHttpProcessor.java", "diffHunk": "@@ -60,4 +63,23 @@ void setTempDir(BuildProducer<SystemPropertyBuildItem> systemProperty) {\n         systemProperty.produce(new SystemPropertyBuildItem(FileResolver.CACHE_DIR_BASE_PROP_NAME, \"/tmp\"));\n     }\n \n+    @BuildStep\n+    public void generateScripts(OutputTargetBuildItem target,\n+            BuildProducer<ArtifactResultBuildItem> artifactResultProducer) throws Exception {\n+        String lambdaName = LambdaUtil.artifactToLambda(target.getBaseName());\n+\n+        String output = LambdaUtil.copyResource(\"lambda/bootstrap-example.sh\");\n+        LambdaUtil.writeFile(target, \"bootstrap-example.sh\", output);", "originalCommit": "55648b5bb41aa222ac46b93dce8bfa300afaeb40", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTMzODM2MQ==", "url": "https://github.com/quarkusio/quarkus/pull/8317#discussion_r401338361", "bodyText": "This should be in a try with resources block.", "author": "stuartwdouglas", "createdAt": "2020-04-01T03:40:20Z", "path": "extensions/amazon-lambda/common-deployment/src/main/java/io/quarkus/amazon/lambda/deployment/LambdaUtil.java", "diffHunk": "@@ -0,0 +1,64 @@\n+package io.quarkus.amazon.lambda.deployment;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+\n+import io.quarkus.deployment.pkg.builditem.OutputTargetBuildItem;\n+\n+public class LambdaUtil {\n+\n+    /**\n+     * Strips period, dash, and numbers. Turns characters after to uppercase. i.e.\n+     * Also strips \"-SNAPSHOT\" from end of name.\n+     *\n+     * \"foo.bar-1.0-SNAPSHOT\" to \"FooBar\"\n+     *\n+     * @param basename\n+     * @return\n+     */\n+    public static String artifactToLambda(String basename) {\n+        if (basename.endsWith(\"-SNAPSHOT\"))\n+            basename = basename.substring(0, basename.length() - \"-SNAPSHOT\".length());\n+        String name = convertToken(basename, \"[.0-9-]\");\n+        return name.trim();\n+    }\n+\n+    protected static String convertToken(String basename, String token) {\n+        String[] splits = basename.split(token);\n+        if (splits == null || splits.length == 0)\n+            return basename;\n+        String name = \"\";\n+        for (String split : splits) {\n+            split = split.trim();\n+            if (split.isEmpty())\n+                continue;\n+            name = name + split.substring(0, 1).toUpperCase() + split.substring(1).toLowerCase();\n+        }\n+        return name;\n+    }\n+\n+    public static void writeFile(OutputTargetBuildItem target, String name, String output) throws IOException {\n+        FileOutputStream os = new FileOutputStream(target.getOutputDirectory().resolve(name).toFile());\n+        os.write(output.getBytes(StandardCharsets.UTF_8));\n+        os.close();\n+    }\n+\n+    public static String copyResource(String resource) throws Exception {\n+        InputStream inputStream = Thread.currentThread().getContextClassLoader().getResourceAsStream(resource);", "originalCommit": "55648b5bb41aa222ac46b93dce8bfa300afaeb40", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTMzODUwMA==", "url": "https://github.com/quarkusio/quarkus/pull/8317#discussion_r401338500", "bodyText": "This should be in a try with resources block, or better yet just use Files.write()", "author": "stuartwdouglas", "createdAt": "2020-04-01T03:40:58Z", "path": "extensions/amazon-lambda/common-deployment/src/main/java/io/quarkus/amazon/lambda/deployment/LambdaUtil.java", "diffHunk": "@@ -0,0 +1,64 @@\n+package io.quarkus.amazon.lambda.deployment;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+\n+import io.quarkus.deployment.pkg.builditem.OutputTargetBuildItem;\n+\n+public class LambdaUtil {\n+\n+    /**\n+     * Strips period, dash, and numbers. Turns characters after to uppercase. i.e.\n+     * Also strips \"-SNAPSHOT\" from end of name.\n+     *\n+     * \"foo.bar-1.0-SNAPSHOT\" to \"FooBar\"\n+     *\n+     * @param basename\n+     * @return\n+     */\n+    public static String artifactToLambda(String basename) {\n+        if (basename.endsWith(\"-SNAPSHOT\"))\n+            basename = basename.substring(0, basename.length() - \"-SNAPSHOT\".length());\n+        String name = convertToken(basename, \"[.0-9-]\");\n+        return name.trim();\n+    }\n+\n+    protected static String convertToken(String basename, String token) {\n+        String[] splits = basename.split(token);\n+        if (splits == null || splits.length == 0)\n+            return basename;\n+        String name = \"\";\n+        for (String split : splits) {\n+            split = split.trim();\n+            if (split.isEmpty())\n+                continue;\n+            name = name + split.substring(0, 1).toUpperCase() + split.substring(1).toLowerCase();\n+        }\n+        return name;\n+    }\n+\n+    public static void writeFile(OutputTargetBuildItem target, String name, String output) throws IOException {\n+        FileOutputStream os = new FileOutputStream(target.getOutputDirectory().resolve(name).toFile());", "originalCommit": "55648b5bb41aa222ac46b93dce8bfa300afaeb40", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTYwOTI4NQ==", "url": "https://github.com/quarkusio/quarkus/pull/8317#discussion_r401609285", "bodyText": "Update to java11 - consistent with other changes?", "author": "oztimpower", "createdAt": "2020-04-01T13:21:10Z", "path": "extensions/amazon-lambda-http/deployment/src/main/resources/http/sam.jvm.yaml", "diffHunk": "@@ -0,0 +1,32 @@\n+  AWSTemplateFormatVersion: '2010-09-09'\n+  Transform: AWS::Serverless-2016-10-31\n+  Description: AWS Serverless Quarkus HTTP - ${artifactId}\n+  Globals:\n+    Api:\n+      EndpointConfiguration: REGIONAL\n+      BinaryMediaTypes:\n+        - \"*/*\"\n+\n+  Resources:\n+    ${lambdaName}:\n+      Type: AWS::Serverless::Function\n+      Properties:\n+        Handler: io.quarkus.amazon.lambda.runtime.QuarkusStreamHandler::handleRequest\n+        Runtime: java8\n+        CodeUri: function.zip\n+        MemorySize: 512\n+        Policies: AWSLambdaBasicExecutionRole", "originalCommit": "55648b5bb41aa222ac46b93dce8bfa300afaeb40", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTYxMTU0Ng==", "url": "https://github.com/quarkusio/quarkus/pull/8317#discussion_r401611546", "bodyText": "logging in this method looks like it was used for debug", "author": "oztimpower", "createdAt": "2020-04-01T13:24:13Z", "path": "extensions/amazon-lambda/common-deployment/src/main/java/io/quarkus/amazon/lambda/deployment/FunctionZipProcessor.java", "diffHunk": "@@ -0,0 +1,188 @@\n+package io.quarkus.amazon.lambda.deployment;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.stream.Stream;\n+\n+import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;\n+import org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;\n+import org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream;\n+import org.apache.commons.compress.utils.IOUtils;\n+import org.jboss.logging.Logger;\n+\n+import io.quarkus.deployment.IsNormal;\n+import io.quarkus.deployment.annotations.BuildProducer;\n+import io.quarkus.deployment.annotations.BuildStep;\n+import io.quarkus.deployment.pkg.builditem.ArtifactResultBuildItem;\n+import io.quarkus.deployment.pkg.builditem.JarBuildItem;\n+import io.quarkus.deployment.pkg.builditem.NativeImageBuildItem;\n+import io.quarkus.deployment.pkg.builditem.OutputTargetBuildItem;\n+import io.quarkus.deployment.pkg.steps.NativeBuild;\n+\n+/**\n+ * Generate deployoment package zip for lambda.\n+ *\n+ */\n+public class FunctionZipProcessor {\n+    private static final Logger log = Logger.getLogger(FunctionZipProcessor.class);\n+\n+    /**\n+     * Function.zip is same as the jar plus dependencies in lib/ if not uberjar\n+     * plus anything in src/main/zip.jvm\n+     *\n+     * @param target\n+     * @param artifactResultProducer\n+     * @param jar\n+     * @throws Exception\n+     */\n+    @BuildStep(onlyIf = IsNormal.class, onlyIfNot = NativeBuild.class)\n+    public void jvmZip(OutputTargetBuildItem target,\n+            BuildProducer<ArtifactResultBuildItem> artifactResultProducer,\n+            JarBuildItem jar) throws Exception {\n+        log.info(\"**jvmZip\");\n+        Path zipPath = target.getOutputDirectory().resolve(\"function.zip\");", "originalCommit": "55648b5bb41aa222ac46b93dce8bfa300afaeb40", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTYxMTc4Nw==", "url": "https://github.com/quarkusio/quarkus/pull/8317#discussion_r401611787", "bodyText": "yikes, lol!", "author": "patriot1burke", "createdAt": "2020-04-01T13:24:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTYxMTU0Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTYxMjYxNg==", "url": "https://github.com/quarkusio/quarkus/pull/8317#discussion_r401612616", "bodyText": "Should that be searching for any classifier, not just SNAPSHOT?", "author": "oztimpower", "createdAt": "2020-04-01T13:25:48Z", "path": "extensions/amazon-lambda/common-deployment/src/main/java/io/quarkus/amazon/lambda/deployment/LambdaUtil.java", "diffHunk": "@@ -0,0 +1,64 @@\n+package io.quarkus.amazon.lambda.deployment;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+\n+import io.quarkus.deployment.pkg.builditem.OutputTargetBuildItem;\n+\n+public class LambdaUtil {\n+\n+    /**\n+     * Strips period, dash, and numbers. Turns characters after to uppercase. i.e.\n+     * Also strips \"-SNAPSHOT\" from end of name.\n+     *\n+     * \"foo.bar-1.0-SNAPSHOT\" to \"FooBar\"\n+     *\n+     * @param basename\n+     * @return\n+     */\n+    public static String artifactToLambda(String basename) {\n+        if (basename.endsWith(\"-SNAPSHOT\"))\n+            basename = basename.substring(0, basename.length() - \"-SNAPSHOT\".length());\n+        String name = convertToken(basename, \"[.0-9-]\");\n+        return name.trim();\n+    }", "originalCommit": "55648b5bb41aa222ac46b93dce8bfa300afaeb40", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTYxNTc2Mg==", "url": "https://github.com/quarkusio/quarkus/pull/8317#discussion_r401615762", "bodyText": "Other classifiers will be pruned if they are numeric.  I just don't have enough info on the artifact, and didn't want to change quarkus core to add it.", "author": "patriot1burke", "createdAt": "2020-04-01T13:30:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTYxMjYxNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTYzMzEyNQ==", "url": "https://github.com/quarkusio/quarkus/pull/8317#discussion_r401633125", "bodyText": "manage.sh still has target hardcoded, for both JVM and native file locations.\nI cloned the branch from your repository and ran the maven archetype, and verified for gradle it is still showing as target (and not build).", "author": "oztimpower", "createdAt": "2020-04-01T13:53:52Z", "path": "extensions/amazon-lambda/deployment/src/main/resources/lambda/manage.sh", "diffHunk": "@@ -43,10 +43,10 @@ function cmd_update() {\n     --zip-file ${ZIP_FILE}\n }\n \n-FUNCTION_NAME=${resourceName}Function\n+FUNCTION_NAME=${lambdaName}\n HANDLER=io.quarkus.amazon.lambda.runtime.QuarkusStreamHandler::handleRequest\n-RUNTIME=java8\n-ZIP_FILE=fileb://target/${artifactId}-${version}-runner.jar\n+RUNTIME=java11\n+ZIP_FILE=fileb://target/function.zip\n ", "originalCommit": "55648b5bb41aa222ac46b93dce8bfa300afaeb40", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "c9d665520c51d398f26a84437400033efc889c87", "url": "https://github.com/quarkusio/quarkus/commit/c9d665520c51d398f26a84437400033efc889c87", "message": "lambda creates zip and descriptors\n\naws lambda docs update\n\nlambda review fixes", "committedDate": "2020-04-01T14:33:53Z", "type": "forcePushed"}, {"oid": "d4787e1e1e431d7ef46582ec8bf44845fed24629", "url": "https://github.com/quarkusio/quarkus/commit/d4787e1e1e431d7ef46582ec8bf44845fed24629", "message": "lambda creates zip and descriptors\n\naws lambda docs update\n\nlambda review fixes\n\nfix manage.sh", "committedDate": "2020-04-01T14:54:52Z", "type": "forcePushed"}, {"oid": "bdf2e7bd344ff4ba6cad2939b29e76e672dfcb1d", "url": "https://github.com/quarkusio/quarkus/commit/bdf2e7bd344ff4ba6cad2939b29e76e672dfcb1d", "message": "lambda creates zip and descriptors\n\naws lambda docs update\n\nlambda review fixes\n\nfix manage.sh\n\nfix output", "committedDate": "2020-04-01T14:55:55Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc1NTk4MA==", "url": "https://github.com/quarkusio/quarkus/pull/8317#discussion_r401755980", "bodyText": "This appears to be duplicated text from lines 205-209. Is that intentional?", "author": "sherl0cks", "createdAt": "2020-04-01T16:41:00Z", "path": "docs/src/main/asciidoc/amazon-lambda-http.adoc", "diffHunk": "@@ -191,16 +200,33 @@ Responses for binary types will be automatically encoded with base64.  This is d\n In general, client code will automatically handle this encoding but in certain custom situations, you should be aware\n you may need to manually manage that encoding.\n \n+== Examine the POM and Gradle build\n+\n+There is nothing special about the POM other than the inclusion of the `quarkus-amazon-lambda-http` extension\n+as a dependency.  The extension automatically generates everything you might need for your lambda deployment.\n+\n+NOTE: In previous versions of this extension you had to set up your pom or gradle\n+to zip up your executable for native deployments, but this is not the case anymore.\n+\n+== Customizing Deployments\n+\n+The http extension has the same exact deployment customization options as a regular quarkus amazon lambda.  You can\n+create your own `bootstrap` wrapper script and include anything you want within the `function.zip` deployment.  See\n+the quarkus amazon lambda docs for more details.\n+\n == Examine the POM\n \n-If you want to adapt an existing RESTEasy, Undertow, or Vert.x Web project to Amazon Lambda, there's a couple\n-of things you need to do.  Take a look at the generate example project to get an example of what you need to adapt.\n+There is nothing special about the POM other than the inclusion of the `quarkus-amazon-lambda-http` extension\n+as a dependencies.  The extension automatically generates everything you might need for your lambda deployment.\n+\n+NOTE: In previous versions of this extension you had to set up your pom or gradle\n+to zip up your executable for native deployments, but this is not the case anymore.", "originalCommit": "bdf2e7bd344ff4ba6cad2939b29e76e672dfcb1d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc1ODcwOA==", "url": "https://github.com/quarkusio/quarkus/pull/8317#discussion_r401758708", "bodyText": "Great docs additions here.", "author": "sherl0cks", "createdAt": "2020-04-01T16:45:21Z", "path": "docs/src/main/asciidoc/amazon-lambda.adoc", "diffHunk": "@@ -423,16 +425,35 @@ NOTE: If using Gradle, the path to the binaries in the YAML templates must be ch\n \n [source]\n ----\n-sam local invoke --template sam.jvm.yaml --event payload.json\n+sam local invoke --template target/sam.jvm.yaml --event payload.json\n ----\n \n The native image can also be locally tested using the `sam.native.yaml` template:\n \n [source]\n ----\n-sam local invoke --template sam.native.yaml --event payload.json\n+sam local invoke --template target/sam.native.yaml --event payload.json\n ----\n \n+== Modifying `function.zip`\n+\n+The are times where you may have to add some additions to the `function.zip` lambda deployment that is generated\n+by the build.  To do this create a `zip.jvm` or `zip.native` directory within `src/main`.\n+Create `zip.jvm/` if you are doing a pure Java lambda.  `zip.native/` if you are doing a native deployment.\n+\n+Any you files and directories you create under your zip directory will be included within `function.zip`\n+\n+== Custom `bootstrap` script\n+\n+There are times you may want to set a specific system properties or other arguments when lambda invokes\n+your native quarkus lambda deployment.  If you include a `bootstrap` script file within\n+`zip.native`, the quarkus extension will automatically rename the executable to `runner` within\n+`function.zip` and set the unix mode of the `bootstrap` script to executable.\n+\n+NOTE: The native executable must be referenced as `runner` if you include a custom `bootstrap` script.\n+\n+The extension generates an example script within `target/bootstrap-example.sh`.\n+", "originalCommit": "bdf2e7bd344ff4ba6cad2939b29e76e672dfcb1d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "e4c70d5de3b4e95d3e9df0aca2e2ce8fe5554628", "url": "https://github.com/quarkusio/quarkus/commit/e4c70d5de3b4e95d3e9df0aca2e2ce8fe5554628", "message": "lambda creates zip and descriptors\n\naws lambda docs update\n\nlambda review fixes\n\nfix manage.sh\n\nfix output\n\nremove duplicates", "committedDate": "2020-04-01T20:57:47Z", "type": "forcePushed"}, {"oid": "07216c2808e599a136abfd5c69803cb9286b549a", "url": "https://github.com/quarkusio/quarkus/commit/07216c2808e599a136abfd5c69803cb9286b549a", "message": "lambda creates zip and descriptors\n\naws lambda docs update\n\nlambda review fixes\n\nfix manage.sh\n\nfix output\n\nremove duplicates", "committedDate": "2020-04-01T21:00:31Z", "type": "commit"}, {"oid": "07216c2808e599a136abfd5c69803cb9286b549a", "url": "https://github.com/quarkusio/quarkus/commit/07216c2808e599a136abfd5c69803cb9286b549a", "message": "lambda creates zip and descriptors\n\naws lambda docs update\n\nlambda review fixes\n\nfix manage.sh\n\nfix output\n\nremove duplicates", "committedDate": "2020-04-01T21:00:31Z", "type": "forcePushed"}]}