{"pr_number": 6582, "pr_title": "Kubernetes Extension: Include openshift, knative and more in the list of supported prefixes", "pr_createdAt": "2020-01-16T10:14:12Z", "pr_url": "https://github.com/quarkusio/quarkus/pull/6582", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzMzNjk2Nw==", "url": "https://github.com/quarkusio/quarkus/pull/6582#discussion_r367336967", "bodyText": "How about making this a Set so contains will be O(1) complexity?", "author": "geoand", "createdAt": "2020-01-16T10:19:10Z", "path": "extensions/kubernetes/deployment/src/main/java/io/quarkus/kubernetes/deployment/KubernetesProcessor.java", "diffHunk": "@@ -51,7 +51,8 @@\n class KubernetesProcessor {\n \n     private static final String PROPERTY_PREFIX = \"dekorate.\";\n-    private static final String ALLOWED_GENERATOR = \"kubernetes\";\n+    private static final List<String> ALLOWED_GENERATORS = Arrays.asList(\"kubernetes\", \"openshift\", \"knative\", \"docker\", \"s2i\");", "originalCommit": "f8a82f151abc7630c3f0cd673365caa200f0cb29", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM3NjMyNw==", "url": "https://github.com/quarkusio/quarkus/pull/6582#discussion_r367376327", "bodyText": "Done", "author": "iocanel", "createdAt": "2020-01-16T11:51:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzMzNjk2Nw=="}], "type": "inlineReview"}, {"oid": "7ea34827db1d39438e8efea18e012860c7ce17d4", "url": "https://github.com/quarkusio/quarkus/commit/7ea34827db1d39438e8efea18e012860c7ce17d4", "message": "test (#6580): Add integration-test to verify the properties with the\nopenshift prefix are well respected.", "committedDate": "2020-01-16T10:42:49Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM3NzMzNQ==", "url": "https://github.com/quarkusio/quarkus/pull/6582#discussion_r367377335", "bodyText": "Just nitpicking here, but the codebase generally shies away from this syntax and uses the more verbose new HashSet(Arrays.asList())", "author": "geoand", "createdAt": "2020-01-16T11:54:19Z", "path": "extensions/kubernetes/deployment/src/main/java/io/quarkus/kubernetes/deployment/KubernetesProcessor.java", "diffHunk": "@@ -51,7 +51,22 @@\n class KubernetesProcessor {\n \n     private static final String PROPERTY_PREFIX = \"dekorate.\";\n-    private static final String ALLOWED_GENERATOR = \"kubernetes\";\n+    private static final Set<String> ALLOWED_GENERATORS = new HashSet<String>() {", "originalCommit": "7ea34827db1d39438e8efea18e012860c7ce17d4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "392c145e910086a55511e0a932da9363ff1869a6", "url": "https://github.com/quarkusio/quarkus/commit/392c145e910086a55511e0a932da9363ff1869a6", "message": "test (#6580): Add integration-test to verify the properties with the\nopenshift prefix are well respected.", "committedDate": "2020-01-16T13:14:16Z", "type": "forcePushed"}, {"oid": "061a02a1a23c12ff072e8927d593d6e7747d7ad1", "url": "https://github.com/quarkusio/quarkus/commit/061a02a1a23c12ff072e8927d593d6e7747d7ad1", "message": "fix (#6580) Add openshift, knative and more to the list of supported\nprefixes in the kubernetes extension.", "committedDate": "2020-01-16T19:17:24Z", "type": "commit"}, {"oid": "6bff3e11458c9fa6e761db00c3a8c11400e0cd31", "url": "https://github.com/quarkusio/quarkus/commit/6bff3e11458c9fa6e761db00c3a8c11400e0cd31", "message": "test (#6580): Add integration-test to verify the properties with the\nopenshift prefix are well respected.", "committedDate": "2020-01-16T19:17:24Z", "type": "commit"}, {"oid": "6bff3e11458c9fa6e761db00c3a8c11400e0cd31", "url": "https://github.com/quarkusio/quarkus/commit/6bff3e11458c9fa6e761db00c3a8c11400e0cd31", "message": "test (#6580): Add integration-test to verify the properties with the\nopenshift prefix are well respected.", "committedDate": "2020-01-16T19:17:24Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzY1NDk5NA==", "url": "https://github.com/quarkusio/quarkus/pull/6582#discussion_r367654994", "bodyText": "Does this comment still apply?", "author": "geoand", "createdAt": "2020-01-16T21:18:42Z", "path": "extensions/kubernetes/deployment/src/main/java/io/quarkus/kubernetes/deployment/KubernetesProcessor.java", "diffHunk": "@@ -97,18 +99,25 @@ public void build(ApplicationInfoBuildItem applicationInfo,\n                 .collect(Collectors.toList());\n \n         Map<String, Object> configAsMap = StreamSupport.stream(config.getPropertyNames().spliterator(), false)\n-                .filter(k -> ALLOWED_GENERATOR.equals(generatorName(k)))\n+                .filter(k -> ALLOWED_GENERATORS.contains(generatorName(k)))\n                 .collect(Collectors.toMap(k -> PROPERTY_PREFIX + k, k -> config.getValue(k, String.class)));\n+\n         // this is a hack to get kubernetes.registry working because currently it's not supported as is in Dekorate", "originalCommit": "6bff3e11458c9fa6e761db00c3a8c11400e0cd31", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzc5ODkxNQ==", "url": "https://github.com/quarkusio/quarkus/pull/6582#discussion_r367798915", "bodyText": "I don't remember why it was initially added.", "author": "iocanel", "createdAt": "2020-01-17T07:25:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzY1NDk5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzgxMzM1OQ==", "url": "https://github.com/quarkusio/quarkus/pull/6582#discussion_r367813359", "bodyText": "I had added it because setting kubernetes.registry was not having an effect. I assume this has been fixed now? If so, the comment is no longer needed", "author": "geoand", "createdAt": "2020-01-17T08:17:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzY1NDk5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQwMzM3MQ==", "url": "https://github.com/quarkusio/quarkus/pull/6582#discussion_r368403371", "bodyText": "OK, let's leave it for now", "author": "geoand", "createdAt": "2020-01-20T07:44:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzY1NDk5NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzY1NTA3MQ==", "url": "https://github.com/quarkusio/quarkus/pull/6582#discussion_r367655071", "bodyText": "Same for this", "author": "geoand", "createdAt": "2020-01-16T21:18:53Z", "path": "extensions/kubernetes/deployment/src/main/java/io/quarkus/kubernetes/deployment/KubernetesProcessor.java", "diffHunk": "@@ -97,18 +99,25 @@ public void build(ApplicationInfoBuildItem applicationInfo,\n                 .collect(Collectors.toList());\n \n         Map<String, Object> configAsMap = StreamSupport.stream(config.getPropertyNames().spliterator(), false)\n-                .filter(k -> ALLOWED_GENERATOR.equals(generatorName(k)))\n+                .filter(k -> ALLOWED_GENERATORS.contains(generatorName(k)))\n                 .collect(Collectors.toMap(k -> PROPERTY_PREFIX + k, k -> config.getValue(k, String.class)));\n+\n         // this is a hack to get kubernetes.registry working because currently it's not supported as is in Dekorate\n-        Optional<String> kubernetesRegistry = config.getOptionalValue(ALLOWED_GENERATOR + \".registry\", String.class);\n-        if (kubernetesRegistry.isPresent()) {\n-            System.setProperty(DOCKER_REGISTRY_PROPERTY, kubernetesRegistry.get());\n-        }\n+        Optional<String> dockerRegistry = IMAGE_GENERATORS.stream()\n+                .map(g -> config.getOptionalValue(g + \".registry\", String.class))\n+                .filter(Optional::isPresent)\n+                .map(Optional::get)\n+                .findFirst();\n+\n+        dockerRegistry.ifPresent(v -> System.setProperty(DOCKER_REGISTRY_PROPERTY, v));\n+\n         // this is a hack to work around Dekorate using the default group for some of the properties", "originalCommit": "6bff3e11458c9fa6e761db00c3a8c11400e0cd31", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}