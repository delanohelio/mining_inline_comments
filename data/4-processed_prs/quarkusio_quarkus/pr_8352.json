{"pr_number": 8352, "pr_title": "Move the Security API to Mutiny", "pr_createdAt": "2020-04-02T11:46:59Z", "pr_url": "https://github.com/quarkusio/quarkus/pull/8352", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ2MzkwMw==", "url": "https://github.com/quarkusio/quarkus/pull/8352#discussion_r402463903", "bodyText": "Hi Stuart, it is not really related to this PR, would it make sense to move quarkus-security into quarkus eventually ? I've added a couple of exceptions into quarkus-vertx-http which should probably be alongside other exceptions like AuthenticationFailedException, and we can tweak things faster there", "author": "sberyozkin", "createdAt": "2020-04-02T16:54:23Z", "path": "bom/runtime/pom.xml", "diffHunk": "@@ -182,7 +182,7 @@\n         <mockito.version>3.3.3</mockito.version>\n         <jna.version>5.3.1</jna.version>\n         <antlr.version>4.7.2</antlr.version>\n-        <quarkus-security.version>1.0.1.Final</quarkus-security.version>\n+        <quarkus-security.version>1.1.0.Beta1</quarkus-security.version>", "originalCommit": "b5f71ef96ad266276c3a553b53f936b9efd3fa77", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjYyNTc1Nw==", "url": "https://github.com/quarkusio/quarkus/pull/8352#discussion_r402625757", "bodyText": "By the way, I'm not asking to move it now :-), only a question/suggestion as I recall you were contemplating it at some point", "author": "sberyozkin", "createdAt": "2020-04-02T22:12:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ2MzkwMw=="}], "type": "inlineReview"}, {"oid": "5d40ba6b39daeb855c56c86b32485505193d0f28", "url": "https://github.com/quarkusio/quarkus/commit/5d40ba6b39daeb855c56c86b32485505193d0f28", "message": "Move the Security API to Mutiny", "committedDate": "2020-04-02T22:25:25Z", "type": "forcePushed"}, {"oid": "97d6af27054280a071c8b32771bd4a2520e0fdd2", "url": "https://github.com/quarkusio/quarkus/commit/97d6af27054280a071c8b32771bd4a2520e0fdd2", "message": "Move the Security API to Mutiny", "committedDate": "2020-04-02T23:22:24Z", "type": "forcePushed"}, {"oid": "47dc6c9d0357745ce3ff1aa2f52fe2a1160173a5", "url": "https://github.com/quarkusio/quarkus/commit/47dc6c9d0357745ce3ff1aa2f52fe2a1160173a5", "message": "Move the Security API to Mutiny", "committedDate": "2020-04-03T03:30:00Z", "type": "forcePushed"}, {"oid": "75166965a777d30d9638465a216dfe9846f8b26a", "url": "https://github.com/quarkusio/quarkus/commit/75166965a777d30d9638465a216dfe9846f8b26a", "message": "Move the Security API to Mutiny", "committedDate": "2020-04-06T00:23:13Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDA1OTk0OQ==", "url": "https://github.com/quarkusio/quarkus/pull/8352#discussion_r404059949", "bodyText": "Depending on how much laziness you want, you can delay the object creation to subscription time:\nreturn Uni.createFrom().item(() -> {\n    return     .....build();\n});", "author": "cescoffier", "createdAt": "2020-04-06T12:42:37Z", "path": "extensions/elytron-security-oauth2/runtime/src/main/java/io/quarkus/elytron/security/oauth2/runtime/auth/OAuth2Augmentor.java", "diffHunk": "@@ -37,11 +35,10 @@ public int priority() {\n                     builder.addRole(i);\n                 }\n             }\n-            cs.complete(builder.build());\n+            return Uni.createFrom().item(builder.build());", "originalCommit": "75166965a777d30d9638465a216dfe9846f8b26a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDA2MDk5NQ==", "url": "https://github.com/quarkusio/quarkus/pull/8352#discussion_r404060995", "bodyText": "Any reason to change the output?\nInitially, you was redeeming null, now you create null from an Optional.", "author": "cescoffier", "createdAt": "2020-04-06T12:44:16Z", "path": "extensions/elytron-security-oauth2/runtime/src/main/java/io/quarkus/elytron/security/oauth2/runtime/auth/OAuth2AuthMechanism.java", "diffHunk": "@@ -46,16 +46,16 @@\n \n         }\n         // No suitable header has been found in this request,\n-        return CompletableFuture.completedFuture(null);\n+        return Uni.createFrom().optional(Optional.empty());", "originalCommit": "75166965a777d30d9638465a216dfe9846f8b26a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDA2MTY2NQ==", "url": "https://github.com/quarkusio/quarkus/pull/8352#discussion_r404061665", "bodyText": "Depends on the laziness you want, you can delay the result creation with a supplier (() -> {...}).\nIt would only create the object on subscription.", "author": "cescoffier", "createdAt": "2020-04-06T12:45:26Z", "path": "extensions/elytron-security-oauth2/runtime/src/main/java/io/quarkus/elytron/security/oauth2/runtime/auth/OAuth2AuthMechanism.java", "diffHunk": "@@ -46,16 +46,16 @@\n \n         }\n         // No suitable header has been found in this request,\n-        return CompletableFuture.completedFuture(null);\n+        return Uni.createFrom().optional(Optional.empty());\n     }\n \n     @Override\n-    public CompletionStage<ChallengeData> getChallenge(RoutingContext context) {\n+    public Uni<ChallengeData> getChallenge(RoutingContext context) {\n         ChallengeData result = new ChallengeData(\n                 HttpResponseStatus.UNAUTHORIZED.code(),\n                 HttpHeaderNames.WWW_AUTHENTICATE,\n                 \"Bearer {token}\");\n-        return CompletableFuture.completedFuture(result);\n+        return Uni.createFrom().item(result);", "originalCommit": "75166965a777d30d9638465a216dfe9846f8b26a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDA2MjI5OQ==", "url": "https://github.com/quarkusio/quarkus/pull/8352#discussion_r404062299", "bodyText": "I believe you want to emit null right?", "author": "cescoffier", "createdAt": "2020-04-06T12:46:31Z", "path": "extensions/elytron-security-properties-file/deployment/src/test/java/io/quarkus/security/test/CustomAuth.java", "diffHunk": "@@ -65,24 +65,22 @@\n \n                     // By this point we had a header we should have been able to verify but for some reason\n                     // it was not correctly structured.\n-                    CompletableFuture<SecurityIdentity> cf = new CompletableFuture<>();\n-                    cf.completeExceptionally(new AuthenticationFailedException());\n-                    return cf;\n+                    return Uni.createFrom().failure(new AuthenticationFailedException());\n                 }\n             }\n         }\n \n         // No suitable header has been found in this request,\n-        return CompletableFuture.completedFuture(null);\n+        return Uni.createFrom().optional(Optional.empty());", "originalCommit": "75166965a777d30d9638465a216dfe9846f8b26a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDA2MjU4OQ==", "url": "https://github.com/quarkusio/quarkus/pull/8352#discussion_r404062589", "bodyText": "You can, if you want, delay the creation of the challenge at subscription time.", "author": "cescoffier", "createdAt": "2020-04-06T12:46:59Z", "path": "extensions/elytron-security-properties-file/deployment/src/test/java/io/quarkus/security/test/CustomAuth.java", "diffHunk": "@@ -65,24 +65,22 @@\n \n                     // By this point we had a header we should have been able to verify but for some reason\n                     // it was not correctly structured.\n-                    CompletableFuture<SecurityIdentity> cf = new CompletableFuture<>();\n-                    cf.completeExceptionally(new AuthenticationFailedException());\n-                    return cf;\n+                    return Uni.createFrom().failure(new AuthenticationFailedException());\n                 }\n             }\n         }\n \n         // No suitable header has been found in this request,\n-        return CompletableFuture.completedFuture(null);\n+        return Uni.createFrom().optional(Optional.empty());\n     }\n \n     @Override\n-    public CompletionStage<ChallengeData> getChallenge(RoutingContext context) {\n+    public Uni<ChallengeData> getChallenge(RoutingContext context) {\n         ChallengeData result = new ChallengeData(\n                 HttpResponseStatus.UNAUTHORIZED.code(),\n                 HttpHeaderNames.WWW_AUTHENTICATE,\n                 \"BASIC realm=CUSTOM\");\n-        return CompletableFuture.completedFuture(result);\n+        return Uni.createFrom().item(result);", "originalCommit": "75166965a777d30d9638465a216dfe9846f8b26a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDA2Mzg5OQ==", "url": "https://github.com/quarkusio/quarkus/pull/8352#discussion_r404063899", "bodyText": "Wondering if this ChallengeData can be cached and singleton.", "author": "cescoffier", "createdAt": "2020-04-06T12:49:19Z", "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/BearerAuthenticationMechanism.java", "diffHunk": "@@ -25,18 +25,17 @@\n         if (token != null) {\n             return authenticate(identityProviderManager, new AccessTokenCredential(token, context));\n         }\n-\n-        return CompletableFuture.completedFuture(null);\n+        return Uni.createFrom().optional(Optional.empty());\n     }\n \n-    public CompletionStage<ChallengeData> getChallenge(RoutingContext context, DefaultTenantConfigResolver resolver) {\n+    public Uni<ChallengeData> getChallenge(RoutingContext context, DefaultTenantConfigResolver resolver) {\n         String bearerToken = extractBearerToken(context);\n \n         if (bearerToken == null) {\n-            return CompletableFuture.completedFuture(new ChallengeData(HttpResponseStatus.UNAUTHORIZED.code(), null, null));\n+            return Uni.createFrom().item(new ChallengeData(HttpResponseStatus.UNAUTHORIZED.code(), null, null));", "originalCommit": "75166965a777d30d9638465a216dfe9846f8b26a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDA2NDAzMQ==", "url": "https://github.com/quarkusio/quarkus/pull/8352#discussion_r404064031", "bodyText": "Wondering if this ChallengeData can be cached and singleton.", "author": "cescoffier", "createdAt": "2020-04-06T12:49:33Z", "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/BearerAuthenticationMechanism.java", "diffHunk": "@@ -25,18 +25,17 @@\n         if (token != null) {\n             return authenticate(identityProviderManager, new AccessTokenCredential(token, context));\n         }\n-\n-        return CompletableFuture.completedFuture(null);\n+        return Uni.createFrom().optional(Optional.empty());\n     }\n \n-    public CompletionStage<ChallengeData> getChallenge(RoutingContext context, DefaultTenantConfigResolver resolver) {\n+    public Uni<ChallengeData> getChallenge(RoutingContext context, DefaultTenantConfigResolver resolver) {\n         String bearerToken = extractBearerToken(context);\n \n         if (bearerToken == null) {\n-            return CompletableFuture.completedFuture(new ChallengeData(HttpResponseStatus.UNAUTHORIZED.code(), null, null));\n+            return Uni.createFrom().item(new ChallengeData(HttpResponseStatus.UNAUTHORIZED.code(), null, null));\n         }\n \n-        return CompletableFuture.completedFuture(new ChallengeData(HttpResponseStatus.FORBIDDEN.code(), null, null));\n+        return Uni.createFrom().item(new ChallengeData(HttpResponseStatus.FORBIDDEN.code(), null, null));", "originalCommit": "75166965a777d30d9638465a216dfe9846f8b26a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDA2NDMxNw==", "url": "https://github.com/quarkusio/quarkus/pull/8352#discussion_r404064317", "bodyText": "Are you trying to emit null?", "author": "cescoffier", "createdAt": "2020-04-06T12:50:03Z", "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/BearerAuthenticationMechanism.java", "diffHunk": "@@ -25,18 +25,17 @@\n         if (token != null) {\n             return authenticate(identityProviderManager, new AccessTokenCredential(token, context));\n         }\n-\n-        return CompletableFuture.completedFuture(null);\n+        return Uni.createFrom().optional(Optional.empty());", "originalCommit": "75166965a777d30d9638465a216dfe9846f8b26a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDA2NDc4Nw==", "url": "https://github.com/quarkusio/quarkus/pull/8352#discussion_r404064787", "bodyText": "Is it something that could be migrated to Uni?", "author": "cescoffier", "createdAt": "2020-04-06T12:50:50Z", "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/CodeAuthenticationMechanism.java", "diffHunk": "@@ -56,13 +59,13 @@ private static QuarkusSecurityIdentity augmentIdentity(SecurityIdentity security\n                 .addPermissionChecker(new Function<Permission, CompletionStage<Boolean>>() {", "originalCommit": "75166965a777d30d9638465a216dfe9846f8b26a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDA2NTAwNQ==", "url": "https://github.com/quarkusio/quarkus/pull/8352#discussion_r404065005", "bodyText": "That would avoid the eager subscription.", "author": "cescoffier", "createdAt": "2020-04-06T12:51:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDA2NDc4Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDA2NzEyNQ==", "url": "https://github.com/quarkusio/quarkus/pull/8352#discussion_r404067125", "bodyText": "Are we ok with waiting \"indefinitely\"?", "author": "cescoffier", "createdAt": "2020-04-06T12:54:38Z", "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/OidcIdentityProvider.java", "diffHunk": "@@ -48,15 +49,15 @@\n             return context.runBlocking(new Supplier<SecurityIdentity>() {\n                 @Override\n                 public SecurityIdentity get() {\n-                    return authenticate(request, vertxContext).join();\n+                    return authenticate(request, vertxContext).await().indefinitely();", "originalCommit": "75166965a777d30d9638465a216dfe9846f8b26a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDExMzA2MQ==", "url": "https://github.com/quarkusio/quarkus/pull/8352#discussion_r404113061", "bodyText": "@cescoffier the expectation here has been that Vertx client will not block itself if establishing a connection to OIDC is required. Can it block ? CC @pmlopes", "author": "sberyozkin", "createdAt": "2020-04-06T13:59:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDA2NzEyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYyMzEyNg==", "url": "https://github.com/quarkusio/quarkus/pull/8352#discussion_r406623126", "bodyText": "this code waits for an item, even if the underlying communication and processing in non-blocking, this code is waiting for the result.", "author": "cescoffier", "createdAt": "2020-04-10T06:31:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDA2NzEyNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDA2OTE5Mg==", "url": "https://github.com/quarkusio/quarkus/pull/8352#discussion_r404069192", "bodyText": "you can use flatMap as a shortcut.", "author": "cescoffier", "createdAt": "2020-04-06T12:57:59Z", "path": "extensions/security/runtime/src/main/java/io/quarkus/security/runtime/QuarkusIdentityProviderManagerImpl.java", "diffHunk": "@@ -104,50 +104,49 @@ public SecurityIdentity authenticateBlocking(AuthenticationRequest request) {\n             throw new IllegalArgumentException(\n                     \"No IdentityProviders were registered to handle AuthenticationRequest \" + request);\n         }\n-        return (SecurityIdentity) handleProvider(0, (List) providers, request, blockingRequestContext).toCompletableFuture()\n-                .join();\n+        return (SecurityIdentity) handleProvider(0, (List) providers, request, blockingRequestContext).await().indefinitely();\n     }\n \n-    private <T extends AuthenticationRequest> CompletionStage<SecurityIdentity> handleProvider(int pos,\n+    private <T extends AuthenticationRequest> Uni<SecurityIdentity> handleProvider(int pos,\n             List<IdentityProvider<T>> providers, T request, AuthenticationRequestContext context) {\n         if (pos == providers.size()) {\n             //we failed to authentication\n             log.debug(\"Authentication failed as providers would authenticate the request\");\n-            CompletableFuture<SecurityIdentity> cf = new CompletableFuture<>();\n-            cf.completeExceptionally(new AuthenticationFailedException());\n-            return cf;\n+            return Uni.createFrom().failure(new AuthenticationFailedException());\n         }\n         IdentityProvider<T> current = providers.get(pos);\n-        CompletionStage<SecurityIdentity> cs = current.authenticate(request, context)\n-                .thenCompose(new Function<SecurityIdentity, CompletionStage<SecurityIdentity>>() {\n+        Uni<SecurityIdentity> cs = current.authenticate(request, context)\n+                .onItem().produceUni(new Function<SecurityIdentity, Uni<SecurityIdentity>>() {\n                     @Override\n-                    public CompletionStage<SecurityIdentity> apply(SecurityIdentity identity) {\n-                        if (identity != null) {\n-                            return CompletableFuture.completedFuture(identity);\n+                    public Uni<SecurityIdentity> apply(SecurityIdentity securityIdentity) {\n+                        if (securityIdentity != null) {\n+                            return Uni.createFrom().item(securityIdentity);\n                         }\n                         return handleProvider(pos + 1, providers, request, context);\n                     }\n                 });\n-        return cs.thenCompose(new Function<SecurityIdentity, CompletionStage<SecurityIdentity>>() {\n-            @Override\n-            public CompletionStage<SecurityIdentity> apply(SecurityIdentity identity) {\n-                return handleIdentityFromProvider(0, identity, context);\n-            }\n-        });\n+        return cs.onItem()\n+                .produceUni(new Function<SecurityIdentity, Uni<SecurityIdentity>>() {", "originalCommit": "75166965a777d30d9638465a216dfe9846f8b26a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDA2OTMxNA==", "url": "https://github.com/quarkusio/quarkus/pull/8352#discussion_r404069314", "bodyText": "you can use flatMap as a shortcut", "author": "cescoffier", "createdAt": "2020-04-06T12:58:10Z", "path": "extensions/security/runtime/src/main/java/io/quarkus/security/runtime/QuarkusIdentityProviderManagerImpl.java", "diffHunk": "@@ -104,50 +104,49 @@ public SecurityIdentity authenticateBlocking(AuthenticationRequest request) {\n             throw new IllegalArgumentException(\n                     \"No IdentityProviders were registered to handle AuthenticationRequest \" + request);\n         }\n-        return (SecurityIdentity) handleProvider(0, (List) providers, request, blockingRequestContext).toCompletableFuture()\n-                .join();\n+        return (SecurityIdentity) handleProvider(0, (List) providers, request, blockingRequestContext).await().indefinitely();\n     }\n \n-    private <T extends AuthenticationRequest> CompletionStage<SecurityIdentity> handleProvider(int pos,\n+    private <T extends AuthenticationRequest> Uni<SecurityIdentity> handleProvider(int pos,\n             List<IdentityProvider<T>> providers, T request, AuthenticationRequestContext context) {\n         if (pos == providers.size()) {\n             //we failed to authentication\n             log.debug(\"Authentication failed as providers would authenticate the request\");\n-            CompletableFuture<SecurityIdentity> cf = new CompletableFuture<>();\n-            cf.completeExceptionally(new AuthenticationFailedException());\n-            return cf;\n+            return Uni.createFrom().failure(new AuthenticationFailedException());\n         }\n         IdentityProvider<T> current = providers.get(pos);\n-        CompletionStage<SecurityIdentity> cs = current.authenticate(request, context)\n-                .thenCompose(new Function<SecurityIdentity, CompletionStage<SecurityIdentity>>() {\n+        Uni<SecurityIdentity> cs = current.authenticate(request, context)\n+                .onItem().produceUni(new Function<SecurityIdentity, Uni<SecurityIdentity>>() {", "originalCommit": "75166965a777d30d9638465a216dfe9846f8b26a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDEwMjcxOA==", "url": "https://github.com/quarkusio/quarkus/pull/8352#discussion_r404102718", "bodyText": "Not totally sure what you are doing here.\nThe subscription will trigger the computation.\nBut you may want to be sure that an error has not been emitted.", "author": "cescoffier", "createdAt": "2020-04-06T13:46:28Z", "path": "extensions/vertx-http/runtime/src/main/java/io/quarkus/vertx/http/runtime/QuarkusErrorHandler.java", "diffHunk": "@@ -53,7 +53,7 @@ public void handle(RoutingContext event) {\n                     public void run() {\n                         event.response().end();\n                     }\n-                });\n+                }).subscribeAsCompletionStage();", "originalCommit": "75166965a777d30d9638465a216dfe9846f8b26a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "dca4b97ef9a5cb1a1528d7ca026bc7996d0d1af8", "url": "https://github.com/quarkusio/quarkus/commit/dca4b97ef9a5cb1a1528d7ca026bc7996d0d1af8", "message": "Move the Security API to Mutiny", "committedDate": "2020-04-07T00:43:10Z", "type": "forcePushed"}, {"oid": "9497cbe244edcd714cdb69b5625c597e4006587e", "url": "https://github.com/quarkusio/quarkus/commit/9497cbe244edcd714cdb69b5625c597e4006587e", "message": "Move the Security API to Mutiny", "committedDate": "2020-04-08T02:04:08Z", "type": "forcePushed"}, {"oid": "122a71d6d7dc5f2891ab34d352e14ebf74ae0efc", "url": "https://github.com/quarkusio/quarkus/commit/122a71d6d7dc5f2891ab34d352e14ebf74ae0efc", "message": "Move the Security API to Mutiny", "committedDate": "2020-04-08T04:53:43Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYyMjU4Mg==", "url": "https://github.com/quarkusio/quarkus/pull/8352#discussion_r406622582", "bodyText": "return val?", "author": "cescoffier", "createdAt": "2020-04-10T06:29:32Z", "path": "extensions/security/runtime/src/main/java/io/quarkus/security/runtime/QuarkusSecurityIdentity.java", "diffHunk": "@@ -74,39 +77,42 @@ public boolean isAnonymous() {\n     }\n \n     @Override\n-    public CompletionStage<Boolean> checkPermission(Permission permission) {\n+    public Uni<Boolean> checkPermission(Permission permission) {\n         if (permissionCheckers.isEmpty()) {\n-            return CompletableFuture.completedFuture(true);\n+            return Uni.createFrom().item(true);\n         }\n-        List<CompletableFuture<Boolean>> results = new ArrayList<>(permissionCheckers.size());\n-        for (Function<Permission, CompletionStage<Boolean>> checker : permissionCheckers) {\n-            CompletionStage<Boolean> res = checker.apply(permission);\n+        List<Uni<Boolean>> results = new ArrayList<>(permissionCheckers.size());\n+        for (Function<Permission, Uni<Boolean>> checker : permissionCheckers) {\n+            Uni<Boolean> res = checker.apply(permission);\n             if (res != null) {\n-                results.add(res.toCompletableFuture());\n+                results.add(res);\n             }\n         }\n         if (results.isEmpty()) {\n-            return CompletableFuture.completedFuture(true);\n+            return Uni.createFrom().item(true);\n         }\n         if (results.size() == 1) {\n             return results.get(0);\n         }\n-        CompletionStage<Boolean> ret = results.get(0);\n-        for (int i = 1; i < results.size(); ++i) {\n-            ret = ret.thenCombine(results.get(i), new BiFunction<Boolean, Boolean, Boolean>() {\n-                @Override\n-                public Boolean apply(Boolean aBoolean, Boolean aBoolean2) {\n-                    if (aBoolean == null) {\n-                        return aBoolean2;\n+        return Uni.combine().all().unis(results).combinedWith(new Function<List<?>, Boolean>() {\n+            @Override\n+            public Boolean apply(List<?> o) {\n+                Boolean result = null;\n+                //if any are true we return true\n+                //otherwise if all are null we return null\n+                //if some are false and some null we return false\n+                for (Object i : o) {\n+                    if (i != null) {\n+                        boolean val = (boolean) i;\n+                        if (val) {", "originalCommit": "122a71d6d7dc5f2891ab34d352e14ebf74ae0efc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "68c72b9c32a446be025fad12c583a12f11b1600d", "url": "https://github.com/quarkusio/quarkus/commit/68c72b9c32a446be025fad12c583a12f11b1600d", "message": "Move the Security API to Mutiny", "committedDate": "2020-04-10T12:47:01Z", "type": "forcePushed"}, {"oid": "d56031907d8fb97e21f26aabb9bf27500f6d1578", "url": "https://github.com/quarkusio/quarkus/commit/d56031907d8fb97e21f26aabb9bf27500f6d1578", "message": "Move the Security API to Mutiny", "committedDate": "2020-04-10T13:26:50Z", "type": "forcePushed"}, {"oid": "2ad8937c7d455b7b2e98c34c2811ac8dc4176a03", "url": "https://github.com/quarkusio/quarkus/commit/2ad8937c7d455b7b2e98c34c2811ac8dc4176a03", "message": "Move the Security API to Mutiny", "committedDate": "2020-04-10T13:27:56Z", "type": "commit"}, {"oid": "2ad8937c7d455b7b2e98c34c2811ac8dc4176a03", "url": "https://github.com/quarkusio/quarkus/commit/2ad8937c7d455b7b2e98c34c2811ac8dc4176a03", "message": "Move the Security API to Mutiny", "committedDate": "2020-04-10T13:27:56Z", "type": "forcePushed"}]}