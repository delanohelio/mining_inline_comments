{"pr_number": 7101, "pr_title": "Integration of Qute and Mutiny", "pr_createdAt": "2020-02-09T14:39:53Z", "pr_url": "https://github.com/quarkusio/quarkus/pull/7101", "timeline": [{"oid": "c4607f8139a52c5131078cdbb715317276e9349f", "url": "https://github.com/quarkusio/quarkus/commit/c4607f8139a52c5131078cdbb715317276e9349f", "message": "Implement a Mutiny based PublisherFactory for Qute", "committedDate": "2020-02-09T13:57:55Z", "type": "commit"}, {"oid": "71f8b2ec01a9d4ff623543eb77b5a4d089661113", "url": "https://github.com/quarkusio/quarkus/commit/71f8b2ec01a9d4ff623543eb77b5a4d089661113", "message": "Improve the InterruptedException handling in the Qute engine", "committedDate": "2020-02-09T13:58:34Z", "type": "commit"}, {"oid": "844b053d6b1e486630f1455bc2bef7ecb91636ae", "url": "https://github.com/quarkusio/quarkus/commit/844b053d6b1e486630f1455bc2bef7ecb91636ae", "message": "Remove qte-rxjava and align Reactive Streams version with the one used by Mutiny\n\nAlso remove the SmallRye Reactive Streams Operators dependency - not required anymore.", "committedDate": "2020-02-09T14:26:22Z", "type": "commit"}, {"oid": "7009e0a6e4514011a4cabcda9ad35d3cbc6260ab", "url": "https://github.com/quarkusio/quarkus/commit/7009e0a6e4514011a4cabcda9ad35d3cbc6260ab", "message": "Switch the reactive support of the Qute extension from RX to Mutiny", "committedDate": "2020-02-09T14:37:34Z", "type": "commit"}, {"oid": "40d19cd1956da935c5c8cff02755ae83817d99fe", "url": "https://github.com/quarkusio/quarkus/commit/40d19cd1956da935c5c8cff02755ae83817d99fe", "message": "Add a section about async and reactive APIs in the Qute documentation", "committedDate": "2020-02-09T14:37:57Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njk0ODI5MQ==", "url": "https://github.com/quarkusio/quarkus/pull/7101#discussion_r376948291", "bodyText": "Looks like it's the same in both cases? Or did I misunderstand something?", "author": "gsmet", "createdAt": "2020-02-10T09:32:33Z", "path": "docs/src/main/asciidoc/qute.adoc", "diffHunk": "@@ -263,6 +263,29 @@ public class ReportGenerator {\n <2> Use the `@Scheduled` annotation to instruct Quarkus to execute this method on the half hour. For more information see the link:scheduler[Scheduler] guide.\n <3> The `TemplateInstance.render()` method triggers rendering. Note that this method blocks the current thread.\n \n+== Reactive and Asynchronous APIs\n+\n+Templates can be rendered as a `CompletionStage<String>` (completed with the rendered output asynchronously) or as `Publisher<String>` containing the rendered chunks:\n+\n+[source, java]\n+----\n+CompletionStage<String> async = template.data(\"name\", \"neo\").renderAsync();\n+Publisher<String> publisher = template.data(\"name\", \"neo\").publisher();\n+----\n+\n+In the case of a `Publisher`, the template is rendered chunk by chunk following the requests from the subscriber.\n+The rendering is not started until a subscriber requests it.\n+The returned `Publisher` is an instance of `io.smallrye.mutiny.Multi`.\n+\n+It is possible to create an instance of `io.smallrye.mutiny.Uni` as follows:\n+\n+[source, java]\n+----\n+Uni<String> uni = Uni.createFrom().completionStage(() -> template.data(\"name\", \"neo\").renderAsync());\n+----\n+\n+In this case, the rendering only starts once the subscriber requests it.", "originalCommit": "40d19cd1956da935c5c8cff02755ae83817d99fe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzAzNDY4NQ==", "url": "https://github.com/quarkusio/quarkus/pull/7101#discussion_r377034685", "bodyText": "If you use a renderAsync() the rendering process starts even if you don't have anyone listening / prepared to receive the output. With Uni or Multi, it would only start if someone is there to receive it.", "author": "cescoffier", "createdAt": "2020-02-10T12:32:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njk0ODI5MQ=="}], "type": "inlineReview"}]}