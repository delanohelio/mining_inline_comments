{"pr_number": 10937, "pr_title": "Make security.adoc the main Quarkus Security document", "pr_createdAt": "2020-07-23T13:24:12Z", "pr_url": "https://github.com/quarkusio/quarkus/pull/10937", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ1MTExNg==", "url": "https://github.com/quarkusio/quarkus/pull/10937#discussion_r459451116", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Quarkus has an integrated plugable web security layer. If security is enabled all HTTP requests will have a permission\n          \n          \n            \n            Quarkus has an integrated pluggable web security layer. If security is enabled all HTTP requests will have a permission", "author": "gastaldi", "createdAt": "2020-07-23T13:32:25Z", "path": "docs/src/main/asciidoc/security-authorization.adoc", "diffHunk": "@@ -0,0 +1,139 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Authorization of Web Endpoints\n+\n+include::./attributes.adoc[]\n+\n+Quarkus has an integrated plugable web security layer. If security is enabled all HTTP requests will have a permission", "originalCommit": "f81fb4733c2cd802a277568a68cb9dcb96bc209a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "ab9afac77f47883e94b7d03fc3f01fa798b6c2ec", "url": "https://github.com/quarkusio/quarkus/commit/ab9afac77f47883e94b7d03fc3f01fa798b6c2ec", "message": "Make security.adoc the main Quarkus Security document", "committedDate": "2020-07-23T13:32:50Z", "type": "forcePushed"}, {"oid": "9dc4035fe35956767c207a98f0636674b8ffdcd8", "url": "https://github.com/quarkusio/quarkus/commit/9dc4035fe35956767c207a98f0636674b8ffdcd8", "message": "Make security.adoc the main Quarkus Security document", "committedDate": "2020-07-23T13:50:39Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ1OTE1Mw==", "url": "https://github.com/quarkusio/quarkus/pull/10937#discussion_r459459153", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            check performed to make sure they are permitted to continue.\n          \n          \n            \n            check performed to make sure they are allowed to continue.", "author": "gastaldi", "createdAt": "2020-07-23T13:43:57Z", "path": "docs/src/main/asciidoc/security-authorization.adoc", "diffHunk": "@@ -0,0 +1,138 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Authorization of Web Endpoints\n+\n+include::./attributes.adoc[]\n+\n+Quarkus has an integrated pluggable web security layer. If security is enabled all HTTP requests will have a permission\n+check performed to make sure they are permitted to continue.", "originalCommit": "8647c933a313023a62c546c08b874f2084f63f4f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ2MDc3Nw==", "url": "https://github.com/quarkusio/quarkus/pull/10937#discussion_r459460777", "bodyText": "Maybe list the core extensions that provide that with links to their respective docs?", "author": "gastaldi", "createdAt": "2020-07-23T13:46:16Z", "path": "docs/src/main/asciidoc/security-built-in-authentication.adoc", "diffHunk": "@@ -0,0 +1,163 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - BuiltIn Authentication Support\n+\n+include::./attributes.adoc[]\n+\n+This document describes the Quarkus built in authentication mechanisms for HTTP based FORM, BASIC and Mutual TLS authentication as well as the proactive authentication.\n+\n+[[basic-auth]]\n+== Basic Authentication\n+\n+To enable basic authentication set `quarkus.http.auth.basic=true`. You must also have at least one extension installed\n+that provides a username/password based `IdentityProvider`, such as link:security-jdbc[Elytron JDBC].", "originalCommit": "8647c933a313023a62c546c08b874f2084f63f4f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTU0Njk0MA==", "url": "https://github.com/quarkusio/quarkus/pull/10937#discussion_r459546940", "bodyText": "Hi @gastaldi, the current Secuity page has a large space gap due to a table (which mixes different not very related guides together as well) so I dropped the table concept and decided to go with small subsections giving a bit more context and then linking to the guides.\nI copied this text from the current security.adoc, in this PR security.adoc has an Identity Providers section (I can add the table here but since we only have 2 standalone identity providers, I'm not sure, but can be done easily when we finalize it), I think I can link back to that section from here, let me do it.", "author": "sberyozkin", "createdAt": "2020-07-23T15:43:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ2MDc3Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ2MjQ5NQ==", "url": "https://github.com/quarkusio/quarkus/pull/10937#discussion_r459462495", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            traditional form authentication the authenticated user is not stored in a HTTP session, as Quarkus does not provide\n          \n          \n            \n            traditional form authentication the authenticated user is not stored in an HTTP session, as Quarkus does not provide", "author": "gastaldi", "createdAt": "2020-07-23T13:48:43Z", "path": "docs/src/main/asciidoc/security-built-in-authentication.adoc", "diffHunk": "@@ -0,0 +1,163 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - BuiltIn Authentication Support\n+\n+include::./attributes.adoc[]\n+\n+This document describes the Quarkus built in authentication mechanisms for HTTP based FORM, BASIC and Mutual TLS authentication as well as the proactive authentication.\n+\n+[[basic-auth]]\n+== Basic Authentication\n+\n+To enable basic authentication set `quarkus.http.auth.basic=true`. You must also have at least one extension installed\n+that provides a username/password based `IdentityProvider`, such as link:security-jdbc[Elytron JDBC].\n+\n+[[form-auth]]\n+== Form Based Authentication\n+\n+Quarkus provides form based authentication that works in a similar manner to traditional Servlet form based auth. Unlike\n+traditional form authentication the authenticated user is not stored in a HTTP session, as Quarkus does not provide", "originalCommit": "8647c933a313023a62c546c08b874f2084f63f4f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ2NDY1NQ==", "url": "https://github.com/quarkusio/quarkus/pull/10937#discussion_r459464655", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            One can customize `HttpAuthenticationMechanism` by registering an `ApplicationScoped` implemetation bean.\n          \n          \n            \n            One can customize `HttpAuthenticationMechanism` by registering an `ApplicationScoped` implementation bean.", "author": "gastaldi", "createdAt": "2020-07-23T13:51:41Z", "path": "docs/src/main/asciidoc/security-customization.adoc", "diffHunk": "@@ -0,0 +1,132 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Security Tips and Tricks\n+\n+include::./attributes.adoc[]\n+\n+== HttpAuthenticationMechanism Customization\n+\n+One can customize `HttpAuthenticationMechanism` by registering an `ApplicationScoped` implemetation bean.", "originalCommit": "9dc4035fe35956767c207a98f0636674b8ffdcd8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "a19488958535914b3d5fda2fe78188d212d877ce", "url": "https://github.com/quarkusio/quarkus/commit/a19488958535914b3d5fda2fe78188d212d877ce", "message": "Make security.adoc the main Quarkus Security document", "committedDate": "2020-07-23T17:32:01Z", "type": "forcePushed"}, {"oid": "7aeb2661b70598941a6a4c85d71edb868b07b7d3", "url": "https://github.com/quarkusio/quarkus/commit/7aeb2661b70598941a6a4c85d71edb868b07b7d3", "message": "Make security.adoc the main Quarkus Security document", "committedDate": "2020-07-24T09:53:24Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDAwODMzNw==", "url": "https://github.com/quarkusio/quarkus/pull/10937#discussion_r460008337", "bodyText": "Should the title be Authorization of Web Endpoints using configuration ?\nAs securing Web Endpoints is also possible (partialy) using annotation ?\nBy the way, always found usefull to link the guides together as it's not always clear for a user which one to read so a link to the annotation based authorization should be added somewhere (or a maybe add a small section to introduce it with a link to the guide that document extensively).", "author": "loicmathieu", "createdAt": "2020-07-24T11:56:58Z", "path": "docs/src/main/asciidoc/security-authorization.adoc", "diffHunk": "@@ -0,0 +1,138 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Authorization of Web Endpoints", "originalCommit": "7aeb2661b70598941a6a4c85d71edb868b07b7d3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDAyMzQzNQ==", "url": "https://github.com/quarkusio/quarkus/pull/10937#discussion_r460023435", "bodyText": "@loicmathieu\n\nShould the title be Authorization of Web Endpoints using configuration ? As securing Web Endpoints is also possible (partialy) using annotation ?\n\nThe plan is for this document to have all the information related to all types of the authorization, configuration and annotation based, and whatever else we may come up with, if it is not in this document then it will be added later I suppose. This PR is only about turning security.adoc into a front end Security page by pushing some of the current content into the new documents", "author": "sberyozkin", "createdAt": "2020-07-24T12:32:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDAwODMzNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDAyNTM3MQ==", "url": "https://github.com/quarkusio/quarkus/pull/10937#discussion_r460025371", "bodyText": "@loicmathieu Sorry, ignore the above, as I did not know the annotation based authorization was left in the security-built-in-authentication doc where it is out of place :-), I'll move it from there to here", "author": "sberyozkin", "createdAt": "2020-07-24T12:36:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDAwODMzNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDAyNTQyNg==", "url": "https://github.com/quarkusio/quarkus/pull/10937#discussion_r460025426", "bodyText": "OK, this can be done later;", "author": "loicmathieu", "createdAt": "2020-07-24T12:36:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDAwODMzNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDAyNjQyMA==", "url": "https://github.com/quarkusio/quarkus/pull/10937#discussion_r460026420", "bodyText": "OK, I understand it now, forget this comment ;)", "author": "loicmathieu", "createdAt": "2020-07-24T12:38:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDAwODMzNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDAxMDkxMQ==", "url": "https://github.com/quarkusio/quarkus/pull/10937#discussion_r460010911", "bodyText": "Please, add a link to config based authorization as an alternative to annotation usage", "author": "loicmathieu", "createdAt": "2020-07-24T12:03:20Z", "path": "docs/src/main/asciidoc/security-built-in-authentication.adoc", "diffHunk": "@@ -0,0 +1,165 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - BuiltIn Authentication Support\n+\n+include::./attributes.adoc[]\n+\n+This document describes the Quarkus built in authentication mechanisms for HTTP based FORM, BASIC and Mutual TLS authentication as well as the proactive authentication.\n+\n+[[basic-auth]]\n+== Basic Authentication\n+\n+To enable basic authentication set `quarkus.http.auth.basic=true`. You must also have at least one extension installed\n+that provides a username/password based `IdentityProvider`, such as link:security-jdbc[Elytron JDBC].\n+\n+Please see link:security#identity-providers[Security Identity Providers] for more information.\n+\n+[[form-auth]]\n+== Form Based Authentication\n+\n+Quarkus provides form based authentication that works in a similar manner to traditional Servlet form based auth. Unlike\n+traditional form authentication the authenticated user is not stored in an HTTP session, as Quarkus does not provide\n+clustered HTTP session support. Instead the authentication information is stored in an encrypted cookie, which can\n+be read by all members of the cluster (provided they all share the same encryption key).\n+\n+The encryption key can be set using the `quarkus.http.auth.session.encryption-key` property, and it must be at least 16 characters\n+long. This key is hashed using SHA-256 and the resulting digest is used as a key for AES-256 encryption of the cookie\n+value. This cookie contains a expiry time as part of the encrypted value, so all nodes in the cluster must have their\n+clocks synchronised. At one minute intervals a new cookie will be generated with an updated expiry time if the session\n+is in use.\n+\n+The following properties can be used to configure form based auth:\n+\n+include::{generated-dir}/config/quarkus-vertx-http-config-group-form-auth-config.adoc[opts=optional, leveloffset=+1]\n+\n+[[mutual-tls]]\n+== Mutual TLS Authentication\n+\n+Quarkus provides mTLS authentication so that you can authenticate users based on their X.509 certificates.\n+\n+To use this authentication method, you should first enable SSL to your application. For more details, check the link:http-reference[Supporting secure connections with SSL] guide.\n+\n+Once your application is accepting secure connections, the next step is to configure a `quarkus.http.ssl.certificate.trust-store-file`\n+holding all the certificates that your application should trust as well as how your application should ask for certificates when\n+a client (e.g.: browser or another service) tries to access one of its protected resources.\n+\n+[source,properties]\n+----\n+quarkus.http.ssl.certificate.key-store-file=server-keystore.jks            <1>\n+quarkus.http.ssl.certificate.key-store-password=the_key_store_secret\n+quarkus.http.ssl.certificate.trust-store-file=server-truststore.jks        <2>\n+quarkus.http.ssl.certificate.trust-store-password=the_trust_store_secret\n+quarkus.http.ssl.client-auth=required                                      <3>\n+\n+quarkus.http.auth.permission.default.paths=/*                              <4>\n+quarkus.http.auth.permission.default.policy=authenticated\n+----\n+<1> Configures a key store where the server's private key is located.\n+\n+<2> Configures a trust store from where the trusted certificates are going to be loaded from.\n+\n+<3> Defines that the server should *always* ask certificates from clients. You can relax this behavior by using `REQUEST` so\n+that the server should still accept requests without a certificate. Useful when you are also supporting authentication methods other than\n+mTLS.\n+\n+<4> Defines a policy where only authenticated users should have access to resources from your application.\n+\n+Once the incoming request matches a valid certificate in the truststore, your application should be able to obtain the subject by\n+just injecting a `SecurityIdentity` as follows:\n+\n+[#x509-subject-example]\n+.Obtaining the subject\n+[source,java]\n+----\n+@Inject\n+SecurityIdentity identity;\n+\n+@GET\n+@Produces(MediaType.TEXT_PLAIN)\n+public String hello() {\n+    return String.format(\"Hello, %s\", identity.getPrincipal().getName());\n+}\n+----\n+\n+You should also be able to get the certificate as follows:\n+\n+[#x509-credential-example]\n+.Obtaining the certificate\n+[source,java]\n+----\n+CertificateCredential credential = identity.getCredential(CertificateCredential.class);\n+X509Certificate certificate = credential.getCertificate();\n+----\n+\n+[[proactive-authentication]]\n+== Proactive Authentication\n+\n+By default Quarkus does what we call proactive authentication. This means that if an incoming request has a\n+credential then that request will always be authenticated (even if the target page does not require authentication).\n+\n+This means that requests with an invalid credential will always be rejected, even for public pages. You can change\n+this behaviour and only authenticate when required by setting `quarkus.http.auth.proactive=false`.\n+\n+[#standard-security-annotations]\n+== Authorization in REST endpoints and CDI beans using annotations\n+\n+Quarkus comes with built-in security to allow for Role-Based Access Control (link:https://en.wikipedia.org/wiki/Role-based_access_control[RBAC])\n+based on the common security annotations `@RolesAllowed`, `@DenyAll`, `@PermitAll` on REST endpoints and CDI beans.\n+An example of an endpoint that makes use of both JAX-RS and Common Security annotations to describe and secure its endpoints is given in <<subject-example>>. Quarkus also provides\n+the `io.quarkus.security.Authenticated` annotation that will permit any authenticated user to access the resource\n+(equivalent to `@RolesAllowed(\"**\")`).\n+\n+[#subject-example]\n+.SubjectExposingResource Example\n+[source,java]\n+----\n+import java.security.Principal;\n+\n+import javax.annotation.security.DenyAll;\n+import javax.annotation.security.PermitAll;\n+import javax.annotation.security.RolesAllowed;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.core.Context;\n+import javax.ws.rs.core.SecurityContext;\n+\n+@Path(\"subject\")\n+public class SubjectExposingResource {\n+\n+    @GET\n+    @Path(\"secured\")\n+    @RolesAllowed(\"Tester\") <1>\n+    public String getSubjectSecured(@Context SecurityContext sec) {\n+        Principal user = sec.getUserPrincipal(); <2>\n+        String name = user != null ? user.getName() : \"anonymous\";\n+        return name;\n+    }\n+\n+    @GET\n+    @Path(\"unsecured\")\n+    @PermitAll<3>\n+    public String getSubjectUnsecured(@Context SecurityContext sec) {\n+        Principal user = sec.getUserPrincipal(); <4>\n+        String name = user != null ? user.getName() : \"anonymous\";\n+        return name;\n+    }\n+\n+    @GET\n+    @Path(\"denied\")\n+    @DenyAll<5>\n+    public String getSubjectDenied(@Context SecurityContext sec) {\n+        Principal user = sec.getUserPrincipal();\n+        String name = user != null ? user.getName() : \"anonymous\";\n+        return name;\n+    }\n+}\n+----\n+<1> This `/subject/secured` endpoint requires an authenticated user that has been granted the role \"Tester\" through the use of the `@RolesAllowed(\"Tester\")` annotation.\n+<2> The endpoint obtains the user principal from the JAX-RS SecurityContext. This will be non-null for a secured endpoint.\n+<3> The `/subject/unsecured` endpoint allows for unauthenticated access by specifying the `@PermitAll` annotation.\n+<4> This call to obtain the user principal will return null if the caller is unauthenticated, non-null if the caller is authenticated.\n+<5> The `/subject/denied` endpoint disallows any access regardless of whether the call is authenticated by specifying the `@DenyAll` annotation.\n+", "originalCommit": "7aeb2661b70598941a6a4c85d71edb868b07b7d3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDAyNDgyMw==", "url": "https://github.com/quarkusio/quarkus/pull/10937#discussion_r460024823", "bodyText": "@loicmathieu Oh sorry, good catch :-), actually, the plan is to have all about the authorization in security-authorization.adoc :-), I did not even see this annotation based authorization section was left here, missed it during copying the content, will move now", "author": "sberyozkin", "createdAt": "2020-07-24T12:35:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDAxMDkxMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDAxMTgxNQ==", "url": "https://github.com/quarkusio/quarkus/pull/10937#discussion_r460011815", "bodyText": "Why must it be an ApplicationScoped ? Isn't a Singleton working ?\nFor customization via CDI bean we usually just say something like by providing a CDI bean that implements ... then in the example uses Singleton if possible (no proxy generation) or ApplicationScoped.", "author": "loicmathieu", "createdAt": "2020-07-24T12:05:32Z", "path": "docs/src/main/asciidoc/security-customization.adoc", "diffHunk": "@@ -0,0 +1,152 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Security Tips and Tricks\n+\n+include::./attributes.adoc[]\n+\n+== HttpAuthenticationMechanism Customization\n+\n+One can customize `HttpAuthenticationMechanism` by registering an `ApplicationScoped` implementation bean.", "originalCommit": "7aeb2661b70598941a6a4c85d71edb868b07b7d3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDAyMTMyNw==", "url": "https://github.com/quarkusio/quarkus/pull/10937#discussion_r460021327", "bodyText": "@loicmathieu I've really no idea, I've only seen ApplicationScoped. Would it work if I say an ApplicationScoped or Singleton ?", "author": "sberyozkin", "createdAt": "2020-07-24T12:27:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDAxMTgxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDAyNDM5Ng==", "url": "https://github.com/quarkusio/quarkus/pull/10937#discussion_r460024396", "bodyText": "In fact, better check with @stuartwdouglas if @Singleton will works here. If yes better to suggest people to use this scope.", "author": "loicmathieu", "createdAt": "2020-07-24T12:34:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDAxMTgxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE0NzYzMw==", "url": "https://github.com/quarkusio/quarkus/pull/10937#discussion_r460147633", "bodyText": "@loicmathieu Hi, yeah, I've just updated the line to  One can customize HttpAuthenticationMechanism by registering a CDI implementation bean. to avoid mentioning ApplicationScoped, though it is still in the listed example.", "author": "sberyozkin", "createdAt": "2020-07-24T16:05:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDAxMTgxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE0OTUzNA==", "url": "https://github.com/quarkusio/quarkus/pull/10937#discussion_r460149534", "bodyText": "Good for me. It's a valid implementation so it should not be important", "author": "loicmathieu", "createdAt": "2020-07-24T16:09:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDAxMTgxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDI5NDA4MA==", "url": "https://github.com/quarkusio/quarkus/pull/10937#discussion_r460294080", "bodyText": "@loicmathieu Thanks, if you'd like, please open an issue to investigate running authenticators as Singletons, suppose would be good if it worked for the perf reasons", "author": "sberyozkin", "createdAt": "2020-07-24T21:22:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDAxMTgxNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDAxMjI4Nw==", "url": "https://github.com/quarkusio/quarkus/pull/10937#discussion_r460012287", "bodyText": "Maybe add an example as I didn't really understand the purpose of this", "author": "loicmathieu", "createdAt": "2020-07-24T12:06:46Z", "path": "docs/src/main/asciidoc/security-customization.adoc", "diffHunk": "@@ -0,0 +1,152 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Security Tips and Tricks\n+\n+include::./attributes.adoc[]\n+\n+== HttpAuthenticationMechanism Customization\n+\n+One can customize `HttpAuthenticationMechanism` by registering an `ApplicationScoped` implementation bean.\n+In the example below the custom authenticator delegates to `JWTAuthMechanism` provided by `quarkus-smallrye-jwt`: \n+\n+[source,java]\n+----\n+@Alternative\n+@Priority(1)\n+@ApplicationScoped\n+public class CustomAwareJWTAuthMechanism implements HttpAuthenticationMechanism {\n+\n+\tprivate static final Logger LOG = LoggerFactory.getLogger(CustomAwareJWTAuthMechanism.class);\n+\n+\t@Inject\n+\tJWTAuthMechanism delegate;\n+\n+\t@Override\n+\tpublic Uni<SecurityIdentity> authenticate(RoutingContext context, IdentityProviderManager identityProviderManager) {\n+\t    // do some custom action and delegate\t\n+            return delegate.authenticate(context, identityProviderManager);\n+\t}\n+\n+\t@Override\n+\tpublic Uni<ChallengeData> getChallenge(RoutingContext context) {\n+\t\treturn delegate.getChallenge(context);\n+\t}\n+\n+\t@Override\n+\tpublic Set<Class<? extends AuthenticationRequest>> getCredentialTypes() {\n+\t\treturn delegate.getCredentialTypes();\n+\t}\n+\n+\t@Override\n+\tpublic HttpCredentialTransport getCredentialTransport() {\n+\t\treturn delegate.getCredentialTransport();\n+\t}\n+\n+}\n+----\n+\n+== Security Identity Customization\n+\n+Internally, the identity providers create and update an istance of the `io.quarkus.security.identity.SecurityIdentity` class which holds the principal, roles, credentials which were used to authenticate the client (user) and other security attributes. An easy option to customize `SecurityIdentity` is to register a custom `SecurityIdentityAugmentor`, for example, the augmentor below adds an addition role:\n+\n+[source,java]\n+----\n+import io.quarkus.security.identity.AuthenticationRequestContext;\n+import io.quarkus.security.identity.SecurityIdentity;\n+import io.quarkus.security.identity.SecurityIdentityAugmentor;\n+import io.quarkus.security.runtime.QuarkusSecurityIdentity;\n+import io.smallrye.mutiny.Uni;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import java.util.function.Supplier;\n+\n+@ApplicationScoped\n+public class RolesAugmentor implements SecurityIdentityAugmentor {\n+\n+    @Override\n+    public int priority() {\n+        return 0;\n+    }\n+\n+    @Override\n+    public Uni<SecurityIdentity> augment(SecurityIdentity identity, AuthenticationRequestContext context) {\n+        return context.runBlocking(build(identity));\n+    }\n+\n+    private Supplier<SecurityIdentity> build(SecurityIdentity identity) {\n+        if(identity.isAnonymous()) {\n+            return () -> identity;\n+        } else {\n+            // create a new builder and copy principal, attributes, credentials and roles from the original\n+            QuarkusSecurityIdentity.Builder builder = QuarkusSecurityIdentity.builder()\n+                    .setPrincipal(identity.getPrincipal())\n+                    .addAttributes(identity.getAttributes())\n+                    .addCredentials(identity.getCredentials())\n+                    .addRoles(identity.getRoles());\n+\n+            // add custom role source here\n+            builder.addRole(\"dummy\");\n+            return builder::build;\n+        }\n+    }\n+}\n+----\n+\n+== Custom JAX-RS SecurityContext\n+\n+If you use JAX-RS `ContainerRequestFilter` to set a custom JAX-RS `SecurityContext` then make sure `ContainerRequestFilter` runs in the JAX-RS pre-match phase by adding a `@PreMatching` annotation to it for this custom context be linked with Quarkus `SecurityIdentity`.", "originalCommit": "7aeb2661b70598941a6a4c85d71edb868b07b7d3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDAxMzg3Mg==", "url": "https://github.com/quarkusio/quarkus/pull/10937#discussion_r460013872", "bodyText": "I think more explaintation is needed.\nThe idea here is to use quarkus-properties-files for test and another one for prod right ?\nMaybe provide an application.properties example with two security extension and the right config to enable one for test and the other for prod.", "author": "loicmathieu", "createdAt": "2020-07-24T12:10:36Z", "path": "docs/src/main/asciidoc/security-testing.adoc", "diffHunk": "@@ -0,0 +1,79 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Security Testing\n+\n+include::./attributes.adoc[]\n+\n+This document describes how to test Quarkus Security.\n+\n+== Configuring User Information\n+\n+You can use link:security-properties[quarkus-elytron-security-properties-file] for testing security. This supports both embedding user info in `application.properties` and standalone properties files.", "originalCommit": "7aeb2661b70598941a6a4c85d71edb868b07b7d3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDAxOTU3MA==", "url": "https://github.com/quarkusio/quarkus/pull/10937#discussion_r460019570", "bodyText": "@loicmathieu Sure, I've just moved this text to this new document. I think you use it in your tests, right ? We can just say, for example, look how it has been done [there](link), can you share a link ?", "author": "sberyozkin", "createdAt": "2020-07-24T12:24:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDAxMzg3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDAyMzcwMQ==", "url": "https://github.com/quarkusio/quarkus/pull/10937#discussion_r460023701", "bodyText": "I don't have a link at the moment, but something like this can explain how it should be done.\n# Configure embedded authentication for test\n%test.quarkus.security.users.embedded.enabled=true\n%test.quarkus.security.users.embedded.plain-text=true\n%test.quarkus.security.users.embedded.users.scott=reader\n%test.quarkus.security.users.embedded.users.stuart=writer\n%test.quarkus.security.users.embedded.roles.scott=READER\n%test.quarkus.security.users.embedded.roles.stuart=READER,WRITER\n\n# Configure OAuth2\nquarkus.oauth2.enabled=true\n%test.quarkus.oauth2.enabled=false\n# Other `quarkus.oauth2` configuration should be added bellow\nquarkus.oauth2.client-id= ...", "author": "loicmathieu", "createdAt": "2020-07-24T12:33:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDAxMzg3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDAyNjA3MQ==", "url": "https://github.com/quarkusio/quarkus/pull/10937#discussion_r460026071", "bodyText": "I can look up as well", "author": "sberyozkin", "createdAt": "2020-07-24T12:38:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDAxMzg3Mg=="}], "type": "inlineReview"}, {"oid": "5f153f2accf2010f423ac3b8d49943118324fbac", "url": "https://github.com/quarkusio/quarkus/commit/5f153f2accf2010f423ac3b8d49943118324fbac", "message": "Make security.adoc the main Quarkus Security document", "committedDate": "2020-07-24T15:56:05Z", "type": "forcePushed"}, {"oid": "a01331c69b2df7342052bc670975bb17f340fb51", "url": "https://github.com/quarkusio/quarkus/commit/a01331c69b2df7342052bc670975bb17f340fb51", "message": "Make security.adoc the main Quarkus Security document", "committedDate": "2020-07-24T16:03:49Z", "type": "forcePushed"}, {"oid": "8cb2cba6f574d5a1313072acc322320e7f5e7916", "url": "https://github.com/quarkusio/quarkus/commit/8cb2cba6f574d5a1313072acc322320e7f5e7916", "message": "Make security.adoc the main Quarkus Security document", "committedDate": "2020-07-24T16:08:40Z", "type": "forcePushed"}, {"oid": "87378a282cf2541ba4bb85b5632e306ae6df4083", "url": "https://github.com/quarkusio/quarkus/commit/87378a282cf2541ba4bb85b5632e306ae6df4083", "message": "Make security.adoc the main Quarkus Security document", "committedDate": "2020-07-24T21:37:17Z", "type": "forcePushed"}, {"oid": "0ea6d67c6f314936dc35f3686efd34f4d01fe7c0", "url": "https://github.com/quarkusio/quarkus/commit/0ea6d67c6f314936dc35f3686efd34f4d01fe7c0", "message": "Make security.adoc the main Quarkus Security document", "committedDate": "2020-07-28T13:14:16Z", "type": "commit"}, {"oid": "0ea6d67c6f314936dc35f3686efd34f4d01fe7c0", "url": "https://github.com/quarkusio/quarkus/commit/0ea6d67c6f314936dc35f3686efd34f4d01fe7c0", "message": "Make security.adoc the main Quarkus Security document", "committedDate": "2020-07-28T13:14:16Z", "type": "forcePushed"}]}