{"pr_number": 10396, "pr_title": "Document mocking an authorization server with Mockito", "pr_createdAt": "2020-07-01T10:39:33Z", "pr_url": "https://github.com/quarkusio/quarkus/pull/10396", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODI3ODIzMg==", "url": "https://github.com/quarkusio/quarkus/pull/10396#discussion_r448278232", "bodyText": "I am pretty sure that we want to do something like \n  \n    \n      quarkus/docs/src/main/asciidoc/rest-client.adoc\n    \n    \n         Line 478\n      in\n      db21557\n    \n    \n    \n    \n\n        \n          \n           public class WiremockCountries implements QuarkusTestResourceLifecycleManager {  // <2> \n        \n    \n  \n\n instead of this per pest configuration", "author": "geoand", "createdAt": "2020-07-01T10:45:45Z", "path": "docs/src/main/asciidoc/security-oauth2.adoc", "diffHunk": "@@ -342,3 +342,74 @@ $ ./target/security-oauth2-quickstart-runner\n 2019-03-28 14:31:37,315 INFO  [io.quarkus] (main) Quarkus 0.20.0 started in 0.006s. Listening on: http://[::]:8080\n 2019-03-28 14:31:37,316 INFO  [io.quarkus] (main) Installed features: [cdi, resteasy, resteasy-jsonb, security, security-oauth2]\n ----\n+\n+== Integration testing\n+\n+If you don't want to use a real OAuth2 authorization server for your integration tests, you can use the\n+link:security-properties[Properties based security] extension for your test, or mock an authorization server using Wiremock.\n+\n+To mock an authentication server via Wiremock, you first need to add the Wiremock library inside your `pom.xml`.\n+\n+[source,xml]\n+----\n+<dependency>\n+    <groupId>com.github.tomakehurst</groupId>\n+    <artifactId>wiremock-jre8</artifactId>\n+    <scope>test</scope>\n+</dependency>\n+----\n+\n+Then you setup Wiremock to always return a valid response for any OAuth2 token send to the `/introspect` endpoint,\n+you must adapt the response to fit your needs (at least the scope).\n+\n+[source,java]\n+----\n+private static WireMockServer wireMockServer = new WireMockServer();", "originalCommit": "a3cca0832d93734cb522ddaf52dcdd5a13974ec2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODI4Njc1NA==", "url": "https://github.com/quarkusio/quarkus/pull/10396#discussion_r448286754", "bodyText": "Bot approache are good for different reason.\nIf we prefere TestResource I'm OK to switch to it inside our integration test and update the guide.", "author": "loicmathieu", "createdAt": "2020-07-01T11:03:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODI3ODIzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODI4OTU1Nw==", "url": "https://github.com/quarkusio/quarkus/pull/10396#discussion_r448289557", "bodyText": "Not really, when you use %test.quarkus.oauth2.introspection-url=http://localhost:8080/introspect it applies to all tests, so best make sure that you have a Wiremock server up for all tests", "author": "geoand", "createdAt": "2020-07-01T11:08:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODI3ODIzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODI5Njk5MQ==", "url": "https://github.com/quarkusio/quarkus/pull/10396#discussion_r448296991", "bodyText": "This is a good point indead ;)", "author": "loicmathieu", "createdAt": "2020-07-01T11:24:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODI3ODIzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODI5ODIxNQ==", "url": "https://github.com/quarkusio/quarkus/pull/10396#discussion_r448298215", "bodyText": ":)", "author": "geoand", "createdAt": "2020-07-01T11:27:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODI3ODIzMg=="}], "type": "inlineReview"}, {"oid": "6956c3ccf55250858fdba6a765f3bbf75048fcc4", "url": "https://github.com/quarkusio/quarkus/commit/6956c3ccf55250858fdba6a765f3bbf75048fcc4", "message": "Document mocking an authorization server with Mockito", "committedDate": "2020-07-01T12:23:36Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQzNjk5MQ==", "url": "https://github.com/quarkusio/quarkus/pull/10396#discussion_r448436991", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Bellow is an example of a test that uses the `MockAuthorizationServerTestResource`.\n          \n          \n            \n            Below is an example of a test that uses the `MockAuthorizationServerTestResource`.", "author": "geoand", "createdAt": "2020-07-01T15:18:10Z", "path": "docs/src/main/asciidoc/security-oauth2.adoc", "diffHunk": "@@ -342,3 +342,122 @@ $ ./target/security-oauth2-quickstart-runner\n 2019-03-28 14:31:37,315 INFO  [io.quarkus] (main) Quarkus 0.20.0 started in 0.006s. Listening on: http://[::]:8080\n 2019-03-28 14:31:37,316 INFO  [io.quarkus] (main) Installed features: [cdi, resteasy, resteasy-jsonb, security, security-oauth2]\n ----\n+\n+== Integration testing\n+\n+If you don't want to use a real OAuth2 authorization server for your integration tests, you can use the\n+link:security-properties[Properties based security] extension for your test, or mock an authorization server using Wiremock.\n+\n+First of all, Wiremock needs to be added as a test dependency. For a Maven project that would happen like so:\n+\n+[source,xml]\n+----\n+<dependency>\n+    <groupId>com.github.tomakehurst</groupId>\n+    <artifactId>wiremock-jre8</artifactId>\n+    <scope>test</scope>\n+    <version>${wiremock.version}</version> // <1>\n+</dependency>\n+----\n+\n+<1> Use a proper Wiremock version. All available versions can be found link:https://search.maven.org/artifact/com.github.tomakehurst/wiremock-jre8[here].\n+\n+In Quarkus tests when some service needs to be started before the Quarkus tests are ran, we utilize the `@io.quarkus.test.common.QuarkusTestResource`\n+annotation to specify a `io.quarkus.test.common.QuarkusTestResourceLifecycleManager` which can start the service and supply configuration\n+values that Quarkus will use.\n+\n+[NOTE]\n+====\n+For more details about `@QuarkusTestResource` refer to  link:getting-started-testing#quarkus-test-resource[this part of the documentation].\n+====\n+\n+Let's create an implementation of `QuarkusTestResourceLifecycleManager` called `MockAuthorizationServerTestResource` like so:\n+\n+[source,java]\n+----\n+import com.github.tomakehurst.wiremock.WireMockServer;\n+import com.github.tomakehurst.wiremock.client.WireMock;\n+import io.quarkus.test.common.QuarkusTestResourceLifecycleManager;\n+\n+import java.util.Collections;\n+import java.util.Map;\n+\n+public class MockAuthorizationServerTestResource implements QuarkusTestResourceLifecycleManager {  // <1>\n+\n+    private WireMockServer wireMockServer;\n+\n+    @Override\n+    public Map<String, String> start() {\n+        wireMockServer = new WireMockServer();\n+        wireMockServer.start(); // <2>\n+\n+        // define the mock for the introspect endpoint\n+        WireMock.stubFor(WireMock.post(\"/introspect\").willReturn(WireMock.aResponse() // <3>\n+                .withBody(\n+                        \"{\\\"active\\\":true,\\\"scope\\\":\\\"Echoer\\\",\\\"username\\\":null,\\\"iat\\\":1562315654,\\\"exp\\\":1562317454,\\\"expires_in\\\":1458,\\\"client_id\\\":\\\"my_client_id\\\"}\")));\n+\n+\n+        return Collections.singletonMap(\"quarkus.oauth2.introspection-url\", wireMockServer.baseUrl() + \"/introspect\"); // <4>\n+    }\n+\n+    @Override\n+    public void stop() {\n+        if (null != wireMockServer) {\n+            wireMockServer.stop();  // (5)\n+        }\n+    }\n+}\n+----\n+\n+<1> The `start` method is invoked by Quarkus before any test is run and returns a `Map` of configuration properties that apply during the test execution.\n+<2> Launch Wiremock.\n+<3> Configure Wiremock to stub the calls to `/introspect` by returning an OAuth2 introspect response. You need to customize this line to return what's needed for your application (at least the scope property as roles are derived from the scope).\n+<5> As the `start` method returns configuration that applies for tests, we set the `quarkus.oauth2.introspection-url` property that controls the URL of the introspect endpoint used by the OAuth2 extension.\n+<5> When all tests have finished, shutdown Wiremock.\n+\n+\n+Your test class needs to be annotated like with `@QuarkusTestResource(MockAuthorizationServerTestResource.class)` to use this `QuarkusTestResourceLifecycleManager`.\n+\n+Bellow is an example of a test that uses the `MockAuthorizationServerTestResource`.", "originalCommit": "6956c3ccf55250858fdba6a765f3bbf75048fcc4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQ2MDkzMg==", "url": "https://github.com/quarkusio/quarkus/pull/10396#discussion_r448460932", "bodyText": "Fixed", "author": "loicmathieu", "createdAt": "2020-07-01T15:55:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQzNjk5MQ=="}], "type": "inlineReview"}, {"oid": "3765f3b1789636ba088e50a281fe81955912a47f", "url": "https://github.com/quarkusio/quarkus/commit/3765f3b1789636ba088e50a281fe81955912a47f", "message": "Document mocking an authorization server with Mockito", "committedDate": "2020-07-01T15:55:01Z", "type": "commit"}, {"oid": "3765f3b1789636ba088e50a281fe81955912a47f", "url": "https://github.com/quarkusio/quarkus/commit/3765f3b1789636ba088e50a281fe81955912a47f", "message": "Document mocking an authorization server with Mockito", "committedDate": "2020-07-01T15:55:01Z", "type": "forcePushed"}]}