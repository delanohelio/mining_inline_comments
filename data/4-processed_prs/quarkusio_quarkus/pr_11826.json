{"pr_number": 11826, "pr_title": "Document the Multiple Persistence Units support", "pr_createdAt": "2020-09-02T16:08:15Z", "pr_url": "https://github.com/quarkusio/quarkus/pull/11826", "timeline": [{"oid": "fb008c1a73898d2a7894fe17b2d4821936928c7d", "url": "https://github.com/quarkusio/quarkus/commit/fb008c1a73898d2a7894fe17b2d4821936928c7d", "message": "Fix some formatting issues in Hibernate ORM documentation", "committedDate": "2020-09-02T14:18:06Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjIwMTIxMQ==", "url": "https://github.com/quarkusio/quarkus/pull/11826#discussion_r482201211", "bodyText": "Do you think we can add a link to the appropriate section?", "author": "machi1990", "createdAt": "2020-09-02T16:24:51Z", "path": "docs/src/main/asciidoc/hibernate-orm.adoc", "diffHunk": "@@ -168,37 +168,212 @@ Make up your mind on which approach you want to use.\n Want to start a PostgreSQL server on the side with Docker?\n \n [source,shell]\n---\n+----\n docker run --ulimit memlock=-1:-1 -it --rm=true --memory-swappiness=0 \\\n            --name postgres-quarkus-hibernate -e POSTGRES_USER=hibernate \\\n            -e POSTGRES_PASSWORD=hibernate -e POSTGRES_DB=hibernate_db \\\n            -p 5432:5432 postgres:10.5\n---\n+----\n \n This will start a non-durable empty database: ideal for a quick experiment!\n ====\n \n+[[multiple-persistence-units]]\n+=== Multiple persistence units\n+\n+==== Setting up multiple persistence units\n+\n+[WARNING]\n+====\n+This feature is still experimental.\n+It is considered stable and usable in production but the configuration properties and CDI integration might evolve depending on your feedback.\n+\n+If you are using this feature, any feedback (even just to say it fulfills your requirements) is very welcome on our link:{quarkus-mailing-list-index}[quarkus-dev mailing list].\n+====\n+\n+Starting with Quarkus 1.7, you can define multiple persistence units using the Quarkus configuration properties approach.\n+\n+The properties at the root of the `quarkus.hibernate-orm.` namespace define the default persistence unit.\n+For instance, the following snippet defines a default datasource and a default persistence unit:\n+\n+[source,properties]\n+----\n+quarkus.datasource.db-kind=h2\n+quarkus.datasource.jdbc.url=jdbc:h2:mem:default;DB_CLOSE_DELAY=-1\n+\n+quarkus.hibernate-orm.dialect=org.hibernate.dialect.H2Dialect\n+quarkus.hibernate-orm.database.generation=drop-and-create\n+----\n+\n+Using a map based approach, it is possible to define named persistence units:\n+\n+[source,properties]\n+----\n+quarkus.datasource.\"users\".db-kind=h2 <1>\n+quarkus.datasource.\"users\".jdbc.url=jdbc:h2:mem:users;DB_CLOSE_DELAY=-1\n+\n+quarkus.datasource.\"inventory\".db-kind=h2 <2>\n+quarkus.datasource.\"inventory\".jdbc.url=jdbc:h2:mem:inventory;DB_CLOSE_DELAY=-1\n+\n+quarkus.hibernate-orm.\"users\".database.generation=drop-and-create <3>\n+quarkus.hibernate-orm.\"users\".datasource=users <4>\n+quarkus.hibernate-orm.\"users\".packages=org.acme.model.user <5>\n+\n+quarkus.hibernate-orm.\"inventory\".database.generation=drop-and-create <6>\n+quarkus.hibernate-orm.\"inventory\".datasource=inventory\n+quarkus.hibernate-orm.\"inventory\".packages=org.acme.model.inventory\n+----\n+<1> Define a datasource named `users`.\n+<2> Define a datasource named `inventory`.\n+<3> Define a persistence unit called `users`.\n+<4> Define the datasource used by the persistence unit.\n+<5> This configuration property is important but we will discuss it a bit later.", "originalCommit": "6bd1f7669b4e9fff5754f68e5c36f4adcf7e5631", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjIwNjMxMQ==", "url": "https://github.com/quarkusio/quarkus/pull/11826#discussion_r482206311", "bodyText": "Ah sorry, I should have pinged you too :).\nI don\u2019t want to do it as I prefer people read the doc in order.", "author": "gsmet", "createdAt": "2020-09-02T16:32:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjIwMTIxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjI2NTg0OA==", "url": "https://github.com/quarkusio/quarkus/pull/11826#discussion_r482265848", "bodyText": "Makes sense.", "author": "machi1990", "createdAt": "2020-09-02T18:06:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjIwMTIxMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjE5NjgxOQ==", "url": "https://github.com/quarkusio/quarkus/pull/11826#discussion_r482196819", "bodyText": "We should refrain from calling \"things\" since it's too subjective. Perhaps remove this part since it's explained in the linked document", "author": "gastaldi", "createdAt": "2020-09-02T16:17:58Z", "path": "docs/src/main/asciidoc/hibernate-orm-panache.adoc", "diffHunk": "@@ -618,6 +618,15 @@ so the compiler must be configured to store parameter names inside the compiled\n This is enabled by default if you are using the Quarkus Maven archetype. If you are not using it, add the property `<maven.compiler.parameters>true</maven.compiler.parameters>` to your pom.xml.\n ====\n \n+== Multiple Persistence Units\n+\n+The support for multiple persistence units is described in details in link:hibernate-orm#multiple-persistence-units[the Hibernate ORM guide].\n+\n+When using Panache, things are simple:\n+\n+* A given Panache entity can be attached to only one persistence unit;\n+* Given that, things are totally transparent and Panache automatically uses the appropriate `EntityManager`.", "originalCommit": "6bd1f7669b4e9fff5754f68e5c36f4adcf7e5631", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjIwNjcwNA==", "url": "https://github.com/quarkusio/quarkus/pull/11826#discussion_r482206704", "bodyText": "Or put something like this before the initial sentence containing the link to the guide:\nA given Panache entity can be attached to only one persistence unit. Given that, Panache already provides the necessary plumbing to find the appropriate `EntityManager` associated to a Panache entity", "author": "gastaldi", "createdAt": "2020-09-02T16:33:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjE5NjgxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjIxOTA0Mw==", "url": "https://github.com/quarkusio/quarkus/pull/11826#discussion_r482219043", "bodyText": "Okay. I don't see the problem with things but changed it to your version.", "author": "gsmet", "createdAt": "2020-09-02T16:53:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjE5NjgxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjIyODY5MQ==", "url": "https://github.com/quarkusio/quarkus/pull/11826#discussion_r482228691", "bodyText": "Thanks , but my point was that things is also used in the things are simple and that confuses the reader as to what things is referring to. Also simple != easy,  that's why it confused me a bit", "author": "gastaldi", "createdAt": "2020-09-02T17:07:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjE5NjgxOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjE5NzcwOQ==", "url": "https://github.com/quarkusio/quarkus/pull/11826#discussion_r482197709", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Starting with Quarkus 1.7, you can define multiple persistence units using the Quarkus configuration properties approach.\n          \n          \n            \n            Starting with Quarkus 1.7.0.Final, you can define multiple persistence units using the Quarkus configuration properties approach.", "author": "gastaldi", "createdAt": "2020-09-02T16:19:19Z", "path": "docs/src/main/asciidoc/hibernate-orm.adoc", "diffHunk": "@@ -168,37 +168,212 @@ Make up your mind on which approach you want to use.\n Want to start a PostgreSQL server on the side with Docker?\n \n [source,shell]\n---\n+----\n docker run --ulimit memlock=-1:-1 -it --rm=true --memory-swappiness=0 \\\n            --name postgres-quarkus-hibernate -e POSTGRES_USER=hibernate \\\n            -e POSTGRES_PASSWORD=hibernate -e POSTGRES_DB=hibernate_db \\\n            -p 5432:5432 postgres:10.5\n---\n+----\n \n This will start a non-durable empty database: ideal for a quick experiment!\n ====\n \n+[[multiple-persistence-units]]\n+=== Multiple persistence units\n+\n+==== Setting up multiple persistence units\n+\n+[WARNING]\n+====\n+This feature is still experimental.\n+It is considered stable and usable in production but the configuration properties and CDI integration might evolve depending on your feedback.\n+\n+If you are using this feature, any feedback (even just to say it fulfills your requirements) is very welcome on our link:{quarkus-mailing-list-index}[quarkus-dev mailing list].\n+====\n+\n+Starting with Quarkus 1.7, you can define multiple persistence units using the Quarkus configuration properties approach.", "originalCommit": "6bd1f7669b4e9fff5754f68e5c36f4adcf7e5631", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjIxMzQwMg==", "url": "https://github.com/quarkusio/quarkus/pull/11826#discussion_r482213402", "bodyText": "It should have been 1.8 so I fixed and I prefer keeping it this way (especially since CR1 already has it).", "author": "gsmet", "createdAt": "2020-09-02T16:44:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjE5NzcwOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjIwMDE4Ng==", "url": "https://github.com/quarkusio/quarkus/pull/11826#discussion_r482200186", "bodyText": "This is confusing. Here we propose how to attach an entity to several PUs but now we're saying to not use Panache in case that happens?", "author": "gastaldi", "createdAt": "2020-09-02T16:23:13Z", "path": "docs/src/main/asciidoc/hibernate-orm.adoc", "diffHunk": "@@ -168,37 +168,212 @@ Make up your mind on which approach you want to use.\n Want to start a PostgreSQL server on the side with Docker?\n \n [source,shell]\n---\n+----\n docker run --ulimit memlock=-1:-1 -it --rm=true --memory-swappiness=0 \\\n            --name postgres-quarkus-hibernate -e POSTGRES_USER=hibernate \\\n            -e POSTGRES_PASSWORD=hibernate -e POSTGRES_DB=hibernate_db \\\n            -p 5432:5432 postgres:10.5\n---\n+----\n \n This will start a non-durable empty database: ideal for a quick experiment!\n ====\n \n+[[multiple-persistence-units]]\n+=== Multiple persistence units\n+\n+==== Setting up multiple persistence units\n+\n+[WARNING]\n+====\n+This feature is still experimental.\n+It is considered stable and usable in production but the configuration properties and CDI integration might evolve depending on your feedback.\n+\n+If you are using this feature, any feedback (even just to say it fulfills your requirements) is very welcome on our link:{quarkus-mailing-list-index}[quarkus-dev mailing list].\n+====\n+\n+Starting with Quarkus 1.7, you can define multiple persistence units using the Quarkus configuration properties approach.\n+\n+The properties at the root of the `quarkus.hibernate-orm.` namespace define the default persistence unit.\n+For instance, the following snippet defines a default datasource and a default persistence unit:\n+\n+[source,properties]\n+----\n+quarkus.datasource.db-kind=h2\n+quarkus.datasource.jdbc.url=jdbc:h2:mem:default;DB_CLOSE_DELAY=-1\n+\n+quarkus.hibernate-orm.dialect=org.hibernate.dialect.H2Dialect\n+quarkus.hibernate-orm.database.generation=drop-and-create\n+----\n+\n+Using a map based approach, it is possible to define named persistence units:\n+\n+[source,properties]\n+----\n+quarkus.datasource.\"users\".db-kind=h2 <1>\n+quarkus.datasource.\"users\".jdbc.url=jdbc:h2:mem:users;DB_CLOSE_DELAY=-1\n+\n+quarkus.datasource.\"inventory\".db-kind=h2 <2>\n+quarkus.datasource.\"inventory\".jdbc.url=jdbc:h2:mem:inventory;DB_CLOSE_DELAY=-1\n+\n+quarkus.hibernate-orm.\"users\".database.generation=drop-and-create <3>\n+quarkus.hibernate-orm.\"users\".datasource=users <4>\n+quarkus.hibernate-orm.\"users\".packages=org.acme.model.user <5>\n+\n+quarkus.hibernate-orm.\"inventory\".database.generation=drop-and-create <6>\n+quarkus.hibernate-orm.\"inventory\".datasource=inventory\n+quarkus.hibernate-orm.\"inventory\".packages=org.acme.model.inventory\n+----\n+<1> Define a datasource named `users`.\n+<2> Define a datasource named `inventory`.\n+<3> Define a persistence unit called `users`.\n+<4> Define the datasource used by the persistence unit.\n+<5> This configuration property is important but we will discuss it a bit later.\n+<6> Define a persistence unit called `inventory` pointing to the `inventory` datasource.\n+\n+[NOTE]\n+====\n+You can mix the default datasource and named datasources or only have one or the other.\n+====\n+\n+[NOTE]\n+====\n+The default persistence unit points to the default datasource by default.\n+For named persistence units, the `datasource` property is mandatory.\n+You can point your persistence unit to the default datasource by setting it to `<default>`\n+(which is the internal name of the default datasource).\n+\n+It is perfectly valid to have several persistence units pointing to the same datasource.\n+====\n+\n+==== Attaching model classes to persistence units\n+\n+There are two distinct ways to attach model classes to persistence units and they should not be mixed:\n+\n+* Via the `packages` configuration property;\n+* Via the `@io.quarkus.hibernate.orm.PersistenceUnit` package-level annotation.\n+\n+If both are mixed, the annotations are ignored and only the `packages` configuration properties are taken into account.\n+\n+Using the `packages` configuration property is simple:\n+\n+[source,properties]\n+----\n+quarkus.hibernate-orm.database.generation=drop-and-create\n+quarkus.hibernate-orm.packages=org.acme.model.defaultpu\n+\n+quarkus.hibernate-orm.\"users\".database.generation=drop-and-create\n+quarkus.hibernate-orm.\"users\".datasource=users\n+quarkus.hibernate-orm.\"users\".packages=org.acme.model.user\n+----\n+\n+This configuration snippet will create two persistence units:\n+\n+* The default one which will contain all the model classes under the `org.acme.model.defaultpu` package, subpackages included.\n+* A named `users` persistence unit which will contain all the model classes under the `org.acme.model.user` package, subpackages included.\n+\n+It is possible to attach several packages to a persistence unit:\n+\n+[source,properties]\n+----\n+quarkus.hibernate-orm.\"users\".packages=org.acme.model.shared,org.acme.model.user\n+----\n+\n+All the model classes under the `org.acme.model.shared` and `org.acme.model.user` packages will be attached to the `users` persistence unit.\n+\n+It is also supported to attach a given model class to several persistence units.\n+\n+[NOTE]\n+====\n+Model classes need to be consistently added to a given persistence unit.\n+Meaning all dependent model classes of a given entity (mapped super classes, embeddables...) are required to be attached to the persistence unit.\n+As we are dealing with the persistence unit at the package level, it should be simple enough.\n+====\n+\n+[WARNING]\n+====\n+Panache entities can be attached to only one persistence unit.\n+\n+For entities attached to several persistence units, you cannot use Panache.", "originalCommit": "6bd1f7669b4e9fff5754f68e5c36f4adcf7e5631", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjIxMzY0NA==", "url": "https://github.com/quarkusio/quarkus/pull/11826#discussion_r482213644", "bodyText": "Yes. Thus this sentence.", "author": "gsmet", "createdAt": "2020-09-02T16:44:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjIwMDE4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjIyNDM4NQ==", "url": "https://github.com/quarkusio/quarkus/pull/11826#discussion_r482224385", "bodyText": "Then I think the sentence It is also supported to attach a given model class to several persistence units needs to be removed?", "author": "gastaldi", "createdAt": "2020-09-02T17:01:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjIwMDE4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjIyNDk4Nw==", "url": "https://github.com/quarkusio/quarkus/pull/11826#discussion_r482224987", "bodyText": "Ah you're referring to Hibernate, not Panache, now I get it (now i realized this is the Hibernate guide, not Panache's)", "author": "gastaldi", "createdAt": "2020-09-02T17:02:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjIwMDE4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjIyNjU5Nw==", "url": "https://github.com/quarkusio/quarkus/pull/11826#discussion_r482226597", "bodyText": "Yes, exactly :).", "author": "gsmet", "createdAt": "2020-09-02T17:05:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjIwMDE4Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjIwMDk0NA==", "url": "https://github.com/quarkusio/quarkus/pull/11826#discussion_r482200944", "bodyText": "Package, field and parameter levels according to the sources \ud83d\ude09", "author": "gastaldi", "createdAt": "2020-09-02T16:24:28Z", "path": "docs/src/main/asciidoc/hibernate-orm.adoc", "diffHunk": "@@ -168,37 +168,212 @@ Make up your mind on which approach you want to use.\n Want to start a PostgreSQL server on the side with Docker?\n \n [source,shell]\n---\n+----\n docker run --ulimit memlock=-1:-1 -it --rm=true --memory-swappiness=0 \\\n            --name postgres-quarkus-hibernate -e POSTGRES_USER=hibernate \\\n            -e POSTGRES_PASSWORD=hibernate -e POSTGRES_DB=hibernate_db \\\n            -p 5432:5432 postgres:10.5\n---\n+----\n \n This will start a non-durable empty database: ideal for a quick experiment!\n ====\n \n+[[multiple-persistence-units]]\n+=== Multiple persistence units\n+\n+==== Setting up multiple persistence units\n+\n+[WARNING]\n+====\n+This feature is still experimental.\n+It is considered stable and usable in production but the configuration properties and CDI integration might evolve depending on your feedback.\n+\n+If you are using this feature, any feedback (even just to say it fulfills your requirements) is very welcome on our link:{quarkus-mailing-list-index}[quarkus-dev mailing list].\n+====\n+\n+Starting with Quarkus 1.7, you can define multiple persistence units using the Quarkus configuration properties approach.\n+\n+The properties at the root of the `quarkus.hibernate-orm.` namespace define the default persistence unit.\n+For instance, the following snippet defines a default datasource and a default persistence unit:\n+\n+[source,properties]\n+----\n+quarkus.datasource.db-kind=h2\n+quarkus.datasource.jdbc.url=jdbc:h2:mem:default;DB_CLOSE_DELAY=-1\n+\n+quarkus.hibernate-orm.dialect=org.hibernate.dialect.H2Dialect\n+quarkus.hibernate-orm.database.generation=drop-and-create\n+----\n+\n+Using a map based approach, it is possible to define named persistence units:\n+\n+[source,properties]\n+----\n+quarkus.datasource.\"users\".db-kind=h2 <1>\n+quarkus.datasource.\"users\".jdbc.url=jdbc:h2:mem:users;DB_CLOSE_DELAY=-1\n+\n+quarkus.datasource.\"inventory\".db-kind=h2 <2>\n+quarkus.datasource.\"inventory\".jdbc.url=jdbc:h2:mem:inventory;DB_CLOSE_DELAY=-1\n+\n+quarkus.hibernate-orm.\"users\".database.generation=drop-and-create <3>\n+quarkus.hibernate-orm.\"users\".datasource=users <4>\n+quarkus.hibernate-orm.\"users\".packages=org.acme.model.user <5>\n+\n+quarkus.hibernate-orm.\"inventory\".database.generation=drop-and-create <6>\n+quarkus.hibernate-orm.\"inventory\".datasource=inventory\n+quarkus.hibernate-orm.\"inventory\".packages=org.acme.model.inventory\n+----\n+<1> Define a datasource named `users`.\n+<2> Define a datasource named `inventory`.\n+<3> Define a persistence unit called `users`.\n+<4> Define the datasource used by the persistence unit.\n+<5> This configuration property is important but we will discuss it a bit later.\n+<6> Define a persistence unit called `inventory` pointing to the `inventory` datasource.\n+\n+[NOTE]\n+====\n+You can mix the default datasource and named datasources or only have one or the other.\n+====\n+\n+[NOTE]\n+====\n+The default persistence unit points to the default datasource by default.\n+For named persistence units, the `datasource` property is mandatory.\n+You can point your persistence unit to the default datasource by setting it to `<default>`\n+(which is the internal name of the default datasource).\n+\n+It is perfectly valid to have several persistence units pointing to the same datasource.\n+====\n+\n+==== Attaching model classes to persistence units\n+\n+There are two distinct ways to attach model classes to persistence units and they should not be mixed:\n+\n+* Via the `packages` configuration property;\n+* Via the `@io.quarkus.hibernate.orm.PersistenceUnit` package-level annotation.\n+\n+If both are mixed, the annotations are ignored and only the `packages` configuration properties are taken into account.\n+\n+Using the `packages` configuration property is simple:\n+\n+[source,properties]\n+----\n+quarkus.hibernate-orm.database.generation=drop-and-create\n+quarkus.hibernate-orm.packages=org.acme.model.defaultpu\n+\n+quarkus.hibernate-orm.\"users\".database.generation=drop-and-create\n+quarkus.hibernate-orm.\"users\".datasource=users\n+quarkus.hibernate-orm.\"users\".packages=org.acme.model.user\n+----\n+\n+This configuration snippet will create two persistence units:\n+\n+* The default one which will contain all the model classes under the `org.acme.model.defaultpu` package, subpackages included.\n+* A named `users` persistence unit which will contain all the model classes under the `org.acme.model.user` package, subpackages included.\n+\n+It is possible to attach several packages to a persistence unit:\n+\n+[source,properties]\n+----\n+quarkus.hibernate-orm.\"users\".packages=org.acme.model.shared,org.acme.model.user\n+----\n+\n+All the model classes under the `org.acme.model.shared` and `org.acme.model.user` packages will be attached to the `users` persistence unit.\n+\n+It is also supported to attach a given model class to several persistence units.\n+\n+[NOTE]\n+====\n+Model classes need to be consistently added to a given persistence unit.\n+Meaning all dependent model classes of a given entity (mapped super classes, embeddables...) are required to be attached to the persistence unit.\n+As we are dealing with the persistence unit at the package level, it should be simple enough.\n+====\n+\n+[WARNING]\n+====\n+Panache entities can be attached to only one persistence unit.\n+\n+For entities attached to several persistence units, you cannot use Panache.\n+You can mix the two approaches though and mix Panache entities and traditional entities where multiple persistence units are required.\n+\n+If you have a use case for that and clever ideas about how to implement it without cluttering the simplified Panache approach,\n+contact us on the link:{quarkus-mailing-list-index}[quarkus-dev mailing list].\n+====\n+\n+The second approach to attach model classes to a persistence unit is to use package-level `@io.quarkus.hibernate.orm.PersistenceUnit` annotations.\n+Again, the two approaches cannot be mixed.\n+\n+To obtain a configuration similar to the one above with the `packages` configuration property, create a `package-info.java` file with the following content:\n+\n+[source,java]\n+----\n+@PersistenceUnit(\"users\") <1>\n+package org.acme.model.user;\n+\n+import io.quarkus.hibernate.orm.PersistenceUnit;\n+----\n+<1> Be careful, use the `@io.quarkus.hibernate.orm.PersistenceUnit` annotation, not the JPA one.\n+\n+[CAUTION]\n+====\n+We only support setting `@PersistenceUnit` at the package level,", "originalCommit": "6bd1f7669b4e9fff5754f68e5c36f4adcf7e5631", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjIxNDQzMA==", "url": "https://github.com/quarkusio/quarkus/pull/11826#discussion_r482214430", "bodyText": "No. It's used for field and parameters for injection. Not to attach entities to the persistence units. Thus the precision and the second part of the sentence.", "author": "gsmet", "createdAt": "2020-09-02T16:46:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjIwMDk0NA=="}], "type": "inlineReview"}, {"oid": "f2dec74b0cc2f2bc708511e6e6949db963a79e62", "url": "https://github.com/quarkusio/quarkus/commit/f2dec74b0cc2f2bc708511e6e6949db963a79e62", "message": "Document the Multiple Persistence Units support", "committedDate": "2020-09-02T16:46:22Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjI1Njg1OA==", "url": "https://github.com/quarkusio/quarkus/pull/11826#discussion_r482256858", "bodyText": "'...file: these drive Quarkus...' -> this is a bit confusing. Do you actually need to say that 'they are not the same...'? Isn't enough to say 'Note that these configuration properties drive the Quarkus configuration properties, which often will map to Hibernate configuration properties, but could have different names and don't necessarily map 1:1 to each other.\nAlso, it's to clear what 'drives' mean.\nEven better if you could name 'these' properties - 'Note that the datasource configuration properties drive (supply, produce, are the source for ??) the Quarkus configuration properties, which often will map to Hibernate configuration properties but they could have different names and don't necessarily map 1:1 to each other.", "author": "andreamussap", "createdAt": "2020-09-02T17:50:57Z", "path": "docs/src/main/asciidoc/hibernate-orm.adoc", "diffHunk": "@@ -70,7 +70,7 @@ quarkus.datasource.jdbc.url = jdbc:postgresql://localhost:5432/hibernate_db\n \n # drop and create the database at startup (use `update` to only update the schema)\n quarkus.hibernate-orm.database.generation=drop-and-create\n---\n+----\n \n Note that these configuration properties are not the same ones as in your typical Hibernate ORM configuration file: these drive Quarkus configuration properties,", "originalCommit": "f2dec74b0cc2f2bc708511e6e6949db963a79e62", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjM2MTAzNw==", "url": "https://github.com/quarkusio/quarkus/pull/11826#discussion_r482361037", "bodyText": "Thanks @andreamussap ! I applied your other suggestions. For this one, I simplified things a bit by removing the drive part which was indeed confusing.", "author": "gsmet", "createdAt": "2020-09-02T19:45:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjI1Njg1OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjI1OTcyMg==", "url": "https://github.com/quarkusio/quarkus/pull/11826#discussion_r482259722", "bodyText": "Suggestion - To load SQL statements when Hibernate ORM starts, add an import.sql file to the root of your resources directory. This script can contain any SQL DML statements. Make sure to terminate each statement with a semicolon.", "author": "andreamussap", "createdAt": "2020-09-02T17:56:01Z", "path": "docs/src/main/asciidoc/hibernate-orm.adoc", "diffHunk": "@@ -132,7 +132,7 @@ public class Gift {\n         this.name = name;\n     }\n }\n---\n+----\n \n To load some SQL statements when Hibernate ORM starts, add an `import.sql` in the root of your resources directory.", "originalCommit": "f2dec74b0cc2f2bc708511e6e6949db963a79e62", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjI2MTEzNA==", "url": "https://github.com/quarkusio/quarkus/pull/11826#discussion_r482261134", "bodyText": "suggestion: 'There are two ways to attach model classes to persistence units, and they should not be mixed.'", "author": "andreamussap", "createdAt": "2020-09-02T17:58:22Z", "path": "docs/src/main/asciidoc/hibernate-orm.adoc", "diffHunk": "@@ -168,37 +168,212 @@ Make up your mind on which approach you want to use.\n Want to start a PostgreSQL server on the side with Docker?\n \n [source,shell]\n---\n+----\n docker run --ulimit memlock=-1:-1 -it --rm=true --memory-swappiness=0 \\\n            --name postgres-quarkus-hibernate -e POSTGRES_USER=hibernate \\\n            -e POSTGRES_PASSWORD=hibernate -e POSTGRES_DB=hibernate_db \\\n            -p 5432:5432 postgres:10.5\n---\n+----\n \n This will start a non-durable empty database: ideal for a quick experiment!\n ====\n \n+[[multiple-persistence-units]]\n+=== Multiple persistence units\n+\n+==== Setting up multiple persistence units\n+\n+[WARNING]\n+====\n+This feature is still experimental.\n+It is considered stable and usable in production but the configuration properties and CDI integration might evolve depending on your feedback.\n+\n+If you are using this feature, any feedback (even just to say it fulfills your requirements) is very welcome on our link:{quarkus-mailing-list-index}[quarkus-dev mailing list].\n+====\n+\n+Starting with Quarkus 1.8, you can define multiple persistence units using the Quarkus configuration properties approach.\n+\n+The properties at the root of the `quarkus.hibernate-orm.` namespace define the default persistence unit.\n+For instance, the following snippet defines a default datasource and a default persistence unit:\n+\n+[source,properties]\n+----\n+quarkus.datasource.db-kind=h2\n+quarkus.datasource.jdbc.url=jdbc:h2:mem:default;DB_CLOSE_DELAY=-1\n+\n+quarkus.hibernate-orm.dialect=org.hibernate.dialect.H2Dialect\n+quarkus.hibernate-orm.database.generation=drop-and-create\n+----\n+\n+Using a map based approach, it is possible to define named persistence units:\n+\n+[source,properties]\n+----\n+quarkus.datasource.\"users\".db-kind=h2 <1>\n+quarkus.datasource.\"users\".jdbc.url=jdbc:h2:mem:users;DB_CLOSE_DELAY=-1\n+\n+quarkus.datasource.\"inventory\".db-kind=h2 <2>\n+quarkus.datasource.\"inventory\".jdbc.url=jdbc:h2:mem:inventory;DB_CLOSE_DELAY=-1\n+\n+quarkus.hibernate-orm.\"users\".database.generation=drop-and-create <3>\n+quarkus.hibernate-orm.\"users\".datasource=users <4>\n+quarkus.hibernate-orm.\"users\".packages=org.acme.model.user <5>\n+\n+quarkus.hibernate-orm.\"inventory\".database.generation=drop-and-create <6>\n+quarkus.hibernate-orm.\"inventory\".datasource=inventory\n+quarkus.hibernate-orm.\"inventory\".packages=org.acme.model.inventory\n+----\n+<1> Define a datasource named `users`.\n+<2> Define a datasource named `inventory`.\n+<3> Define a persistence unit called `users`.\n+<4> Define the datasource used by the persistence unit.\n+<5> This configuration property is important but we will discuss it a bit later.\n+<6> Define a persistence unit called `inventory` pointing to the `inventory` datasource.\n+\n+[NOTE]\n+====\n+You can mix the default datasource and named datasources or only have one or the other.\n+====\n+\n+[NOTE]\n+====\n+The default persistence unit points to the default datasource by default.\n+For named persistence units, the `datasource` property is mandatory.\n+You can point your persistence unit to the default datasource by setting it to `<default>`\n+(which is the internal name of the default datasource).\n+\n+It is perfectly valid to have several persistence units pointing to the same datasource.\n+====\n+\n+==== Attaching model classes to persistence units\n+\n+There are two distinct ways to attach model classes to persistence units and they should not be mixed:", "originalCommit": "f2dec74b0cc2f2bc708511e6e6949db963a79e62", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjI2MTcwOQ==", "url": "https://github.com/quarkusio/quarkus/pull/11826#discussion_r482261709", "bodyText": "'You can attach several packages to a persistence unit:'", "author": "andreamussap", "createdAt": "2020-09-02T17:59:21Z", "path": "docs/src/main/asciidoc/hibernate-orm.adoc", "diffHunk": "@@ -168,37 +168,212 @@ Make up your mind on which approach you want to use.\n Want to start a PostgreSQL server on the side with Docker?\n \n [source,shell]\n---\n+----\n docker run --ulimit memlock=-1:-1 -it --rm=true --memory-swappiness=0 \\\n            --name postgres-quarkus-hibernate -e POSTGRES_USER=hibernate \\\n            -e POSTGRES_PASSWORD=hibernate -e POSTGRES_DB=hibernate_db \\\n            -p 5432:5432 postgres:10.5\n---\n+----\n \n This will start a non-durable empty database: ideal for a quick experiment!\n ====\n \n+[[multiple-persistence-units]]\n+=== Multiple persistence units\n+\n+==== Setting up multiple persistence units\n+\n+[WARNING]\n+====\n+This feature is still experimental.\n+It is considered stable and usable in production but the configuration properties and CDI integration might evolve depending on your feedback.\n+\n+If you are using this feature, any feedback (even just to say it fulfills your requirements) is very welcome on our link:{quarkus-mailing-list-index}[quarkus-dev mailing list].\n+====\n+\n+Starting with Quarkus 1.8, you can define multiple persistence units using the Quarkus configuration properties approach.\n+\n+The properties at the root of the `quarkus.hibernate-orm.` namespace define the default persistence unit.\n+For instance, the following snippet defines a default datasource and a default persistence unit:\n+\n+[source,properties]\n+----\n+quarkus.datasource.db-kind=h2\n+quarkus.datasource.jdbc.url=jdbc:h2:mem:default;DB_CLOSE_DELAY=-1\n+\n+quarkus.hibernate-orm.dialect=org.hibernate.dialect.H2Dialect\n+quarkus.hibernate-orm.database.generation=drop-and-create\n+----\n+\n+Using a map based approach, it is possible to define named persistence units:\n+\n+[source,properties]\n+----\n+quarkus.datasource.\"users\".db-kind=h2 <1>\n+quarkus.datasource.\"users\".jdbc.url=jdbc:h2:mem:users;DB_CLOSE_DELAY=-1\n+\n+quarkus.datasource.\"inventory\".db-kind=h2 <2>\n+quarkus.datasource.\"inventory\".jdbc.url=jdbc:h2:mem:inventory;DB_CLOSE_DELAY=-1\n+\n+quarkus.hibernate-orm.\"users\".database.generation=drop-and-create <3>\n+quarkus.hibernate-orm.\"users\".datasource=users <4>\n+quarkus.hibernate-orm.\"users\".packages=org.acme.model.user <5>\n+\n+quarkus.hibernate-orm.\"inventory\".database.generation=drop-and-create <6>\n+quarkus.hibernate-orm.\"inventory\".datasource=inventory\n+quarkus.hibernate-orm.\"inventory\".packages=org.acme.model.inventory\n+----\n+<1> Define a datasource named `users`.\n+<2> Define a datasource named `inventory`.\n+<3> Define a persistence unit called `users`.\n+<4> Define the datasource used by the persistence unit.\n+<5> This configuration property is important but we will discuss it a bit later.\n+<6> Define a persistence unit called `inventory` pointing to the `inventory` datasource.\n+\n+[NOTE]\n+====\n+You can mix the default datasource and named datasources or only have one or the other.\n+====\n+\n+[NOTE]\n+====\n+The default persistence unit points to the default datasource by default.\n+For named persistence units, the `datasource` property is mandatory.\n+You can point your persistence unit to the default datasource by setting it to `<default>`\n+(which is the internal name of the default datasource).\n+\n+It is perfectly valid to have several persistence units pointing to the same datasource.\n+====\n+\n+==== Attaching model classes to persistence units\n+\n+There are two distinct ways to attach model classes to persistence units and they should not be mixed:\n+\n+* Via the `packages` configuration property;\n+* Via the `@io.quarkus.hibernate.orm.PersistenceUnit` package-level annotation.\n+\n+If both are mixed, the annotations are ignored and only the `packages` configuration properties are taken into account.\n+\n+Using the `packages` configuration property is simple:\n+\n+[source,properties]\n+----\n+quarkus.hibernate-orm.database.generation=drop-and-create\n+quarkus.hibernate-orm.packages=org.acme.model.defaultpu\n+\n+quarkus.hibernate-orm.\"users\".database.generation=drop-and-create\n+quarkus.hibernate-orm.\"users\".datasource=users\n+quarkus.hibernate-orm.\"users\".packages=org.acme.model.user\n+----\n+\n+This configuration snippet will create two persistence units:\n+\n+* The default one which will contain all the model classes under the `org.acme.model.defaultpu` package, subpackages included.\n+* A named `users` persistence unit which will contain all the model classes under the `org.acme.model.user` package, subpackages included.\n+\n+It is possible to attach several packages to a persistence unit:", "originalCommit": "f2dec74b0cc2f2bc708511e6e6949db963a79e62", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "32d1f6ca6adb740a5fc32fbe2028b4489a81c7d2", "url": "https://github.com/quarkusio/quarkus/commit/32d1f6ca6adb740a5fc32fbe2028b4489a81c7d2", "message": "Additional adjustment suggested by Andrea.", "committedDate": "2020-09-02T19:43:50Z", "type": "forcePushed"}, {"oid": "d6aaafaad1f0687edf2940f0b238983260c929e6", "url": "https://github.com/quarkusio/quarkus/commit/d6aaafaad1f0687edf2940f0b238983260c929e6", "message": "Additional adjustments suggested by Andrea", "committedDate": "2020-09-02T19:45:24Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjQzNzgyNQ==", "url": "https://github.com/quarkusio/quarkus/pull/11826#discussion_r482437825", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The support for multiple persistence units is described in details in link:hibernate-orm#multiple-persistence-units[the Hibernate ORM guide].\n          \n          \n            \n            The support for multiple persistence units is described in detail in link:hibernate-orm#multiple-persistence-units[the Hibernate ORM guide].", "author": "geoand", "createdAt": "2020-09-02T20:42:42Z", "path": "docs/src/main/asciidoc/hibernate-orm-panache.adoc", "diffHunk": "@@ -618,6 +618,15 @@ so the compiler must be configured to store parameter names inside the compiled\n This is enabled by default if you are using the Quarkus Maven archetype. If you are not using it, add the property `<maven.compiler.parameters>true</maven.compiler.parameters>` to your pom.xml.\n ====\n \n+== Multiple Persistence Units\n+\n+The support for multiple persistence units is described in details in link:hibernate-orm#multiple-persistence-units[the Hibernate ORM guide].", "originalCommit": "d6aaafaad1f0687edf2940f0b238983260c929e6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjQzODIxMw==", "url": "https://github.com/quarkusio/quarkus/pull/11826#discussion_r482438213", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * A given Panache entity can be attached to only one persistence unit.\n          \n          \n            \n            * A given Panache entity can be attached to a single persistence unit.", "author": "geoand", "createdAt": "2020-09-02T20:42:59Z", "path": "docs/src/main/asciidoc/hibernate-orm-panache.adoc", "diffHunk": "@@ -618,6 +618,15 @@ so the compiler must be configured to store parameter names inside the compiled\n This is enabled by default if you are using the Quarkus Maven archetype. If you are not using it, add the property `<maven.compiler.parameters>true</maven.compiler.parameters>` to your pom.xml.\n ====\n \n+== Multiple Persistence Units\n+\n+The support for multiple persistence units is described in details in link:hibernate-orm#multiple-persistence-units[the Hibernate ORM guide].\n+\n+When using Panache, things are simple:\n+\n+* A given Panache entity can be attached to only one persistence unit.", "originalCommit": "d6aaafaad1f0687edf2940f0b238983260c929e6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjQ0NzE2MA==", "url": "https://github.com/quarkusio/quarkus/pull/11826#discussion_r482447160", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Meaning all dependent model classes of a given entity (mapped super classes, embeddables...) are required to be attached to the persistence unit.\n          \n          \n            \n            That meant that all dependent model classes of a given entity (mapped super classes, embeddables...) are required to be attached to the persistence unit.", "author": "geoand", "createdAt": "2020-09-02T20:49:35Z", "path": "docs/src/main/asciidoc/hibernate-orm.adoc", "diffHunk": "@@ -168,37 +170,212 @@ Make up your mind on which approach you want to use.\n Want to start a PostgreSQL server on the side with Docker?\n \n [source,shell]\n---\n+----\n docker run --ulimit memlock=-1:-1 -it --rm=true --memory-swappiness=0 \\\n            --name postgres-quarkus-hibernate -e POSTGRES_USER=hibernate \\\n            -e POSTGRES_PASSWORD=hibernate -e POSTGRES_DB=hibernate_db \\\n            -p 5432:5432 postgres:10.5\n---\n+----\n \n This will start a non-durable empty database: ideal for a quick experiment!\n ====\n \n+[[multiple-persistence-units]]\n+=== Multiple persistence units\n+\n+==== Setting up multiple persistence units\n+\n+[WARNING]\n+====\n+This feature is still experimental.\n+It is considered stable and usable in production but the configuration properties and CDI integration might evolve depending on your feedback.\n+\n+If you are using this feature, any feedback (even just to say it fulfills your requirements) is very welcome on our link:{quarkus-mailing-list-index}[quarkus-dev mailing list].\n+====\n+\n+Starting with Quarkus 1.8, you can define multiple persistence units using the Quarkus configuration properties approach.\n+\n+The properties at the root of the `quarkus.hibernate-orm.` namespace define the default persistence unit.\n+For instance, the following snippet defines a default datasource and a default persistence unit:\n+\n+[source,properties]\n+----\n+quarkus.datasource.db-kind=h2\n+quarkus.datasource.jdbc.url=jdbc:h2:mem:default;DB_CLOSE_DELAY=-1\n+\n+quarkus.hibernate-orm.dialect=org.hibernate.dialect.H2Dialect\n+quarkus.hibernate-orm.database.generation=drop-and-create\n+----\n+\n+Using a map based approach, it is possible to define named persistence units:\n+\n+[source,properties]\n+----\n+quarkus.datasource.\"users\".db-kind=h2 <1>\n+quarkus.datasource.\"users\".jdbc.url=jdbc:h2:mem:users;DB_CLOSE_DELAY=-1\n+\n+quarkus.datasource.\"inventory\".db-kind=h2 <2>\n+quarkus.datasource.\"inventory\".jdbc.url=jdbc:h2:mem:inventory;DB_CLOSE_DELAY=-1\n+\n+quarkus.hibernate-orm.\"users\".database.generation=drop-and-create <3>\n+quarkus.hibernate-orm.\"users\".datasource=users <4>\n+quarkus.hibernate-orm.\"users\".packages=org.acme.model.user <5>\n+\n+quarkus.hibernate-orm.\"inventory\".database.generation=drop-and-create <6>\n+quarkus.hibernate-orm.\"inventory\".datasource=inventory\n+quarkus.hibernate-orm.\"inventory\".packages=org.acme.model.inventory\n+----\n+<1> Define a datasource named `users`.\n+<2> Define a datasource named `inventory`.\n+<3> Define a persistence unit called `users`.\n+<4> Define the datasource used by the persistence unit.\n+<5> This configuration property is important but we will discuss it a bit later.\n+<6> Define a persistence unit called `inventory` pointing to the `inventory` datasource.\n+\n+[NOTE]\n+====\n+You can mix the default datasource and named datasources or only have one or the other.\n+====\n+\n+[NOTE]\n+====\n+The default persistence unit points to the default datasource by default.\n+For named persistence units, the `datasource` property is mandatory.\n+You can point your persistence unit to the default datasource by setting it to `<default>`\n+(which is the internal name of the default datasource).\n+\n+It is perfectly valid to have several persistence units pointing to the same datasource.\n+====\n+\n+==== Attaching model classes to persistence units\n+\n+There are two ways to attach model classes to persistence units, and they should not be mixed:\n+\n+* Via the `packages` configuration property;\n+* Via the `@io.quarkus.hibernate.orm.PersistenceUnit` package-level annotation.\n+\n+If both are mixed, the annotations are ignored and only the `packages` configuration properties are taken into account.\n+\n+Using the `packages` configuration property is simple:\n+\n+[source,properties]\n+----\n+quarkus.hibernate-orm.database.generation=drop-and-create\n+quarkus.hibernate-orm.packages=org.acme.model.defaultpu\n+\n+quarkus.hibernate-orm.\"users\".database.generation=drop-and-create\n+quarkus.hibernate-orm.\"users\".datasource=users\n+quarkus.hibernate-orm.\"users\".packages=org.acme.model.user\n+----\n+\n+This configuration snippet will create two persistence units:\n+\n+* The default one which will contain all the model classes under the `org.acme.model.defaultpu` package, subpackages included.\n+* A named `users` persistence unit which will contain all the model classes under the `org.acme.model.user` package, subpackages included.\n+\n+You can attach several packages to a persistence unit:\n+\n+[source,properties]\n+----\n+quarkus.hibernate-orm.\"users\".packages=org.acme.model.shared,org.acme.model.user\n+----\n+\n+All the model classes under the `org.acme.model.shared` and `org.acme.model.user` packages will be attached to the `users` persistence unit.\n+\n+It is also supported to attach a given model class to several persistence units.\n+\n+[NOTE]\n+====\n+Model classes need to be consistently added to a given persistence unit.\n+Meaning all dependent model classes of a given entity (mapped super classes, embeddables...) are required to be attached to the persistence unit.", "originalCommit": "d6aaafaad1f0687edf2940f0b238983260c929e6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "ffbaf9e92f71bcb9e1ff430a77d8e57a368c2fb9", "url": "https://github.com/quarkusio/quarkus/commit/ffbaf9e92f71bcb9e1ff430a77d8e57a368c2fb9", "message": "Document the Multiple Persistence Units support", "committedDate": "2020-09-03T10:23:41Z", "type": "commit"}, {"oid": "ffbaf9e92f71bcb9e1ff430a77d8e57a368c2fb9", "url": "https://github.com/quarkusio/quarkus/commit/ffbaf9e92f71bcb9e1ff430a77d8e57a368c2fb9", "message": "Document the Multiple Persistence Units support", "committedDate": "2020-09-03T10:23:41Z", "type": "forcePushed"}]}