{"pr_number": 12051, "pr_title": "Only create the Reactive PoolProducers and health check beans if we produce a pool", "pr_createdAt": "2020-09-11T17:05:37Z", "pr_url": "https://github.com/quarkusio/quarkus/pull/12051", "timeline": [{"oid": "9bedfd477748d2b3607bb44faf275eaf79cf4101", "url": "https://github.com/quarkusio/quarkus/commit/9bedfd477748d2b3607bb44faf275eaf79cf4101", "message": "Only create the Reactive PoolProducers and health check beans if we produce a pool\n\nFixes #12043", "committedDate": "2020-09-11T17:05:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzIwNzg1Mw==", "url": "https://github.com/quarkusio/quarkus/pull/12051#discussion_r487207853", "bodyText": "Is this the default when no scope is used?", "author": "geoand", "createdAt": "2020-09-11T18:08:49Z", "path": "extensions/reactive-db2-client/deployment/src/main/java/io/quarkus/reactive/db2/client/deployment/ReactiveDB2ClientProcessor.java", "diffHunk": "@@ -30,9 +31,24 @@\n \n class ReactiveDB2ClientProcessor {\n \n+    /**\n+     * The producer needs to be produced in a separate method to avoid a circular dependency (the Vert.x instance creation\n+     * consumes the AdditionalBeanBuildItems).\n+     */\n     @BuildStep\n-    AdditionalBeanBuildItem registerBean() {\n-        return AdditionalBeanBuildItem.unremovableOf(DB2PoolProducer.class);\n+    void poolProducer(\n+            BuildProducer<AdditionalBeanBuildItem> additionalBeans,\n+            DataSourcesBuildTimeConfig dataSourcesBuildTimeConfig,\n+            DataSourceReactiveBuildTimeConfig dataSourceReactiveBuildTimeConfig) {\n+        if (!createPool(dataSourcesBuildTimeConfig, dataSourceReactiveBuildTimeConfig)) {\n+            return;\n+        }\n+\n+        additionalBeans.produce(new AdditionalBeanBuildItem.Builder()\n+                .addBeanClass(DB2PoolProducer.class)\n+                .setUnremovable()\n+                .setDefaultScope(DotNames.APPLICATION_SCOPED)", "originalCommit": "9bedfd477748d2b3607bb44faf275eaf79cf4101", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzI4NTAwMg==", "url": "https://github.com/quarkusio/quarkus/pull/12051#discussion_r487285002", "bodyText": "Yeah, well, I don't know but if the default changes one day, at least it will be OK.", "author": "gsmet", "createdAt": "2020-09-11T20:51:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzIwNzg1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzI4NzQwOQ==", "url": "https://github.com/quarkusio/quarkus/pull/12051#discussion_r487287409", "bodyText": "But does this change, change what it is today?", "author": "geoand", "createdAt": "2020-09-11T20:58:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzIwNzg1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzQ1MTEyOQ==", "url": "https://github.com/quarkusio/quarkus/pull/12051#discussion_r487451129", "bodyText": "Ah OK, I misunderstood your question. Yes, exactly.\nI always prefer to remove the scope annotation from the additional beans in case at some point we index the extensions.", "author": "gsmet", "createdAt": "2020-09-12T21:36:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzIwNzg1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzY5ODE0Nw==", "url": "https://github.com/quarkusio/quarkus/pull/12051#discussion_r487698147", "bodyText": "I always prefer to remove the scope annotation from the additional beans in case at some point we index the extensions.\n\nThat would not help - a class that contains a producer is automatically picked up. If a bean should be @ApplicationScoped then the class should IMO contain the annotation. The primary purpose of AdditionalBeanBuildItem is to register a class for discovery (i.e. take it as it is). AFAIR the AdditionalBeanBuildItems default scope was intended for the cases where we need to change the scope for a class that we don't control.\nNOTE: In this particular case we should consider making the bean @Dependent as the produced io.vertx.mutiny.db2client.DB2Pool is singleton, i.e. the producer method is only called once, i.e. this should work fine...\n@Dependent\npublic class DB2PoolProducer {\n\n    /**\n     * @return the <em>mutiny</em> DB2 Pool instance. The instance is created lazily.\n     */\n    @Singleton\n    @Produces\n    public io.vertx.mutiny.db2client.DB2Pool mutinyDB2Pool(DB2Pool db2Pool) {\n        return io.vertx.mutiny.db2client.DB2Pool.newInstance(db2Pool);\n    }\n}", "author": "mkouba", "createdAt": "2020-09-14T07:15:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzIwNzg1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzY5OTAzOA==", "url": "https://github.com/quarkusio/quarkus/pull/12051#discussion_r487699038", "bodyText": "Also AdditionalBeanBuildItems default scope requires unnecessary transformation and a special \"stereotype hack\". So it's always better to avoid it (if possible)...", "author": "mkouba", "createdAt": "2020-09-14T07:17:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzIwNzg1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzY5OTE4NQ==", "url": "https://github.com/quarkusio/quarkus/pull/12051#discussion_r487699185", "bodyText": "@gsmet @geoand ^", "author": "mkouba", "createdAt": "2020-09-14T07:18:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzIwNzg1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzY5OTc2Ng==", "url": "https://github.com/quarkusio/quarkus/pull/12051#discussion_r487699766", "bodyText": "Good to know @mkouba, thanks!", "author": "geoand", "createdAt": "2020-09-14T07:19:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzIwNzg1Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzIxMTEwOQ==", "url": "https://github.com/quarkusio/quarkus/pull/12051#discussion_r487211109", "bodyText": "Can we have a comment on what the rationale is behind this?", "author": "geoand", "createdAt": "2020-09-11T18:15:21Z", "path": "extensions/reactive-db2-client/deployment/src/main/java/io/quarkus/reactive/db2/client/deployment/ReactiveDB2ClientProcessor.java", "diffHunk": "@@ -82,8 +93,30 @@ ServiceStartBuildItem build(BuildProducer<FeatureBuildItem> feature,\n     }\n \n     @BuildStep\n-    HealthBuildItem addHealthCheck(DataSourcesBuildTimeConfig dataSourcesBuildTimeConfig) {\n-        return new HealthBuildItem(\"io.quarkus.reactive.db2.client.runtime.health.ReactiveDB2DataSourceHealthCheck\",\n-                dataSourcesBuildTimeConfig.healthEnabled);\n+    void addHealthCheck(\n+            BuildProducer<HealthBuildItem> healthChecks,\n+            DataSourcesBuildTimeConfig dataSourcesBuildTimeConfig,\n+            DataSourceReactiveBuildTimeConfig dataSourceReactiveBuildTimeConfig) {\n+        if (!createPool(dataSourcesBuildTimeConfig, dataSourceReactiveBuildTimeConfig)) {\n+            return;\n+        }\n+\n+        healthChecks\n+                .produce(new HealthBuildItem(\"io.quarkus.reactive.db2.client.runtime.health.ReactiveDB2DataSourceHealthCheck\",\n+                        dataSourcesBuildTimeConfig.healthEnabled));\n+    }\n+\n+    private static boolean createPool(DataSourcesBuildTimeConfig dataSourcesBuildTimeConfig,", "originalCommit": "9bedfd477748d2b3607bb44faf275eaf79cf4101", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzI4NTI1OA==", "url": "https://github.com/quarkusio/quarkus/pull/12051#discussion_r487285258", "bodyText": "It looks simple enough to me? It just checks the config to know if we should create the pool.", "author": "gsmet", "createdAt": "2020-09-11T20:52:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzIxMTEwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzI4Nzc3Nw==", "url": "https://github.com/quarkusio/quarkus/pull/12051#discussion_r487287777", "bodyText": "What I don't get is why, not how it's done. Maybe it's just because I have no knowledge of this part of the code. Feel free to ignore", "author": "geoand", "createdAt": "2020-09-11T20:59:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzIxMTEwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzQwMzQ5OA==", "url": "https://github.com/quarkusio/quarkus/pull/12051#discussion_r487403498", "bodyText": "Yeah. The why is that you don't want to create the pool if it's not configured or targets another database type than the one supported by this extension :).\nKeep in mind that the idea is to support multiple datasources here too at some point so we need to support the case where we have multiple reactive client extensions at the same time.\nIt's probably going to be more obvious once we add support for multiple datasources there too.\nI wouldn't mind an approval so that I can get this one in and fix @rsvoboda 's issue :).", "author": "gsmet", "createdAt": "2020-09-12T12:12:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzIxMTEwOQ=="}], "type": "inlineReview"}]}