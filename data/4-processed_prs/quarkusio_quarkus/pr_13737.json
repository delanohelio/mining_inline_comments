{"pr_number": 13737, "pr_title": "Introduce first version for supporting K8S Service Binding Specification", "pr_createdAt": "2020-12-07T15:44:37Z", "pr_url": "https://github.com/quarkusio/quarkus/pull/13737", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzkxMzg5OQ==", "url": "https://github.com/quarkusio/quarkus/pull/13737#discussion_r537913899", "bodyText": "We should probably add a ConfigSource with the raw bindings, so you can use property expressions replacement if you wish.", "author": "radcortez", "createdAt": "2020-12-07T23:28:56Z", "path": "extensions/kubernetes-service-binding/runtime/src/main/java/io/quarkus/kubernetes/service/binding/runtime/KubernetesServiceBindingConfigSourceProvider.java", "diffHunk": "@@ -0,0 +1,83 @@\n+package io.quarkus.kubernetes.service.binding.runtime;\n+\n+import java.io.File;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.ServiceLoader;\n+\n+import org.eclipse.microprofile.config.spi.ConfigSource;\n+import org.eclipse.microprofile.config.spi.ConfigSourceProvider;\n+\n+public class KubernetesServiceBindingConfigSourceProvider implements ConfigSourceProvider {\n+\n+    private final List<ServiceBinding> serviceBindings;\n+    private final List<ServiceBindingConverter> serviceBindingConverters;\n+\n+    public KubernetesServiceBindingConfigSourceProvider(String bindingRoot) {\n+        this(bindingRoot, determineConverters());\n+    }\n+\n+    //visible for testing\n+    KubernetesServiceBindingConfigSourceProvider(String bindingRoot, List<ServiceBindingConverter> serviceBindingConverters) {\n+        this.serviceBindingConverters = serviceBindingConverters;\n+        Path p = Paths.get(bindingRoot);\n+        if (!Files.exists(p)) {\n+            serviceBindings = Collections.emptyList();\n+            return;\n+        }\n+        if (!Files.isDirectory(p)) {\n+            throw new IllegalArgumentException(\"Service Binding root '\" + p + \"' is not a directory\");\n+        }\n+\n+        File[] files = p.toFile().listFiles();\n+        if (files == null) {\n+            serviceBindings = Collections.emptyList();\n+        } else {\n+            serviceBindings = new ArrayList<>(files.length);\n+            for (File f : files) {\n+                serviceBindings.add(new ServiceBinding(f.toPath()));\n+            }\n+            serviceBindings.sort(new Comparator<ServiceBinding>() {\n+                @Override\n+                public int compare(ServiceBinding o1, ServiceBinding o2) {\n+                    if (!o1.getName().equals(o2.getName())) {\n+                        return o1.getName().compareTo(o2.getName());\n+                    }\n+                    return o1.getProvider().compareTo(o2.getProvider());\n+                }\n+            });\n+        }\n+    }\n+\n+    private static List<ServiceBindingConverter> determineConverters() {\n+        List<ServiceBindingConverter> result = new ArrayList<>();\n+        ServiceLoader<ServiceBindingConverter> loader = ServiceLoader.load(ServiceBindingConverter.class,\n+                Thread.currentThread().getContextClassLoader());\n+        for (ServiceBindingConverter c : loader) {\n+            result.add(c);\n+        }\n+        return result;\n+    }\n+\n+    @Override\n+    public Iterable<ConfigSource> getConfigSources(ClassLoader forClassLoader) {\n+        if (serviceBindings.isEmpty()) {\n+            return Collections.emptyList();\n+        }\n+\n+        List<ConfigSource> result = new ArrayList<>();\n+        for (ServiceBindingConverter converter : serviceBindingConverters) {", "originalCommit": "063f23b548875d37cd455668f96c77edc1e54288", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODA2NjE2OA==", "url": "https://github.com/quarkusio/quarkus/pull/13737#discussion_r538066168", "bodyText": "I am not sure what exactly you mean here. Can you elaborate a little more please?", "author": "geoand", "createdAt": "2020-12-08T06:23:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzkxMzg5OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODMyOTkyNw==", "url": "https://github.com/quarkusio/quarkus/pull/13737#discussion_r538329927", "bodyText": "If I understood the code correctly, we are only adding the ServiceBindings that have a converter associated, right?\nMy suggestion was to register all ServiceBindings properties in a namespace like quarkus.[service.binding.name].* so you could just use ${} to retrieve the value. This may probably help to retrieve values not directly mapped in the converter.", "author": "radcortez", "createdAt": "2020-12-08T12:49:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzkxMzg5OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODM0MjU3OA==", "url": "https://github.com/quarkusio/quarkus/pull/13737#discussion_r538342578", "bodyText": "Ah, I see what you mean.\nYes, we can certainly do that.", "author": "geoand", "createdAt": "2020-12-08T13:02:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzkxMzg5OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODQyMDUzNg==", "url": "https://github.com/quarkusio/quarkus/pull/13737#discussion_r538420536", "bodyText": "Added", "author": "geoand", "createdAt": "2020-12-08T14:16:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzkxMzg5OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzkxODEyNw==", "url": "https://github.com/quarkusio/quarkus/pull/13737#discussion_r537918127", "bodyText": "I'm wondering how we should map other properties available in the ServiceBinding? For instance if I want to use the url directly, should that be in a file jdbc.url and we add the required prefixes?", "author": "radcortez", "createdAt": "2020-12-07T23:38:44Z", "path": "extensions/jdbc/jdbc-postgresql/runtime/src/main/java/io/quarkus/jdbc/postgresql/runtime/PostgreSqlServiceBindingConverter.java", "diffHunk": "@@ -0,0 +1,54 @@\n+package io.quarkus.jdbc.postgresql.runtime;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.jboss.logging.Logger;\n+\n+import io.quarkus.kubernetes.service.binding.runtime.ServiceBinding;\n+import io.quarkus.kubernetes.service.binding.runtime.ServiceBindingConfigSource;\n+import io.quarkus.kubernetes.service.binding.runtime.ServiceBindingConverter;\n+\n+public class PostgreSqlServiceBindingConverter implements ServiceBindingConverter {\n+\n+    private static final Logger log = Logger.getLogger(ServiceBinding.class);\n+\n+    @Override\n+    public Optional<ServiceBindingConfigSource> convert(List<ServiceBinding> serviceBindings) {\n+        Optional<ServiceBinding> matchingByType = ServiceBinding.singleMatchingByType(\"postgresql\", serviceBindings);\n+        if (!matchingByType.isPresent()) {\n+            return Optional.empty();\n+        }\n+\n+        Map<String, String> properties = new HashMap<>();\n+        ServiceBinding binding = matchingByType.get();\n+\n+        String username = binding.getProperties().get(\"username\");\n+        if (username != null) {\n+            properties.put(\"quarkus.datasource.username\", username);\n+        } else {\n+            log.debug(\"Property 'username' was not found\");\n+        }\n+        String password = binding.getProperties().get(\"password\");\n+        if (password != null) {\n+            properties.put(\"quarkus.datasource.password\", password);\n+        } else {\n+            log.debug(\"Property 'password' was not found\");\n+        }\n+        String host = binding.getProperties().get(\"host\");\n+        String port = binding.getProperties().get(\"port\");\n+        String database = binding.getProperties().get(\"database\");\n+        if ((host != null) && (database != null)) {\n+            String portPart = \"\";\n+            if (port != null) {\n+                portPart = \":\" + port;\n+            }\n+            properties.put(\"quarkus.datasource.jdbc.url\", String.format(\"jdbc:postgresql://%s%s/%s\", host, portPart, database));\n+        } else {\n+            log.debug(\"One or more of 'host' or 'database' properties were not found\");\n+        }\n+        return Optional.of(new ServiceBindingConfigSource(\"postgresql-k8s-service-binding-source\", properties));", "originalCommit": "063f23b548875d37cd455668f96c77edc1e54288", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODA2NTcwOA==", "url": "https://github.com/quarkusio/quarkus/pull/13737#discussion_r538065708", "bodyText": "I am not sure that is even allowed by the Service Binding spec. I basically followed the Spring Cloud code here and did what they did (the author is also one of the lead authors of the spec - having also been a part of the previous Cloud Foundry specs, so I pretty much consider it as a sort of reference implementation :))", "author": "geoand", "createdAt": "2020-12-08T06:22:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzkxODEyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODMzMTk3NA==", "url": "https://github.com/quarkusio/quarkus/pull/13737#discussion_r538331974", "bodyText": "What I understood from the spec is that there was some well known entries, but you can add any entry that you like. In that case, how do we access it?", "author": "radcortez", "createdAt": "2020-12-08T12:51:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzkxODEyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODM0MTg5NQ==", "url": "https://github.com/quarkusio/quarkus/pull/13737#discussion_r538341895", "bodyText": "I think we need more experience with the actual usage of the service binding before we commit to something.", "author": "geoand", "createdAt": "2020-12-08T13:02:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzkxODEyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODg0MjEwNg==", "url": "https://github.com/quarkusio/quarkus/pull/13737#discussion_r538842106", "bodyText": "there should be two kind of mappings of the service binding options imo:\n\n\njust a raw mapping of the key/bindings into its own \"property hiearchy\" which can then be used by user to map whatever they want/need - we shouldn't alter the hierarchy here imo.\n\n\nadditional extra step of iterating of known entries (i.e. postgres, kafkaxyz, etc.) which would map those known bidnings into quarkus specific extensions. This can include custom mappings/manipulations.", "author": "maxandersen", "createdAt": "2020-12-08T22:04:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzkxODEyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTA1NTQ2Nw==", "url": "https://github.com/quarkusio/quarkus/pull/13737#discussion_r539055467", "bodyText": "Yup, we have that now - see Roberto's other comment which I addressed.", "author": "geoand", "createdAt": "2020-12-09T06:59:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzkxODEyNw=="}], "type": "inlineReview"}, {"oid": "4af532284ff9460f5301f9e38f6523b0e9f5443b", "url": "https://github.com/quarkusio/quarkus/commit/4af532284ff9460f5301f9e38f6523b0e9f5443b", "message": "Add bare-bones example of PostgreSQL k8s service binding handling", "committedDate": "2020-12-08T07:13:47Z", "type": "forcePushed"}, {"oid": "195153c6a0f49661e5c69e1724adafec50afada1", "url": "https://github.com/quarkusio/quarkus/commit/195153c6a0f49661e5c69e1724adafec50afada1", "message": "Add bare-bones example of PostgreSQL k8s service binding handling", "committedDate": "2020-12-08T07:43:04Z", "type": "forcePushed"}, {"oid": "84bad614b138b4a9536857110343a77790ce2386", "url": "https://github.com/quarkusio/quarkus/commit/84bad614b138b4a9536857110343a77790ce2386", "message": "Add bare-bones example of PostgreSQL k8s service binding handling", "committedDate": "2020-12-08T07:59:04Z", "type": "forcePushed"}, {"oid": "1769a9fecd77fa0fdebe03a73be29111e9d8273b", "url": "https://github.com/quarkusio/quarkus/commit/1769a9fecd77fa0fdebe03a73be29111e9d8273b", "message": "Create basic structure for k8s service binding handling", "committedDate": "2020-12-08T14:16:13Z", "type": "commit"}, {"oid": "64950319e3cd20b2e1fe34b01c7bf38b8375a168", "url": "https://github.com/quarkusio/quarkus/commit/64950319e3cd20b2e1fe34b01c7bf38b8375a168", "message": "Add bare-bones example of PostgreSQL k8s service binding handling", "committedDate": "2020-12-08T14:16:13Z", "type": "commit"}, {"oid": "64950319e3cd20b2e1fe34b01c7bf38b8375a168", "url": "https://github.com/quarkusio/quarkus/commit/64950319e3cd20b2e1fe34b01c7bf38b8375a168", "message": "Add bare-bones example of PostgreSQL k8s service binding handling", "committedDate": "2020-12-08T14:16:13Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDEzMTQ3Nw==", "url": "https://github.com/quarkusio/quarkus/pull/13737#discussion_r540131477", "bodyText": "Missing @ConfigItem? Mostly for generated docs ;-)\nOtherwise, looks great. Thanks.", "author": "machi1990", "createdAt": "2020-12-10T12:31:57Z", "path": "extensions/kubernetes-service-binding/runtime/src/main/java/io/quarkus/kubernetes/service/binding/runtime/KubernetesServiceBindingConfig.java", "diffHunk": "@@ -0,0 +1,22 @@\n+package io.quarkus.kubernetes.service.binding.runtime;\n+\n+import java.util.Optional;\n+\n+import io.quarkus.runtime.annotations.ConfigItem;\n+import io.quarkus.runtime.annotations.ConfigPhase;\n+import io.quarkus.runtime.annotations.ConfigRoot;\n+\n+@ConfigRoot(name = \"kubernetes-service-binding\", phase = ConfigPhase.BOOTSTRAP)\n+public class KubernetesServiceBindingConfig {\n+\n+    /**\n+     * If enabled, Service Bindings will be looked in the file system\n+     */", "originalCommit": "64950319e3cd20b2e1fe34b01c7bf38b8375a168", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDEzMjAzMg==", "url": "https://github.com/quarkusio/quarkus/pull/13737#discussion_r540132032", "bodyText": "Ah darn... Feel free to send a PR and I'll approve right away :)", "author": "geoand", "createdAt": "2020-12-10T12:32:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDEzMTQ3Nw=="}], "type": "inlineReview"}]}