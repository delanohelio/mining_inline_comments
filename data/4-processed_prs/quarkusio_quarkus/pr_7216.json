{"pr_number": 7216, "pr_title": "Update the reactive database client extensions to use Mutiny", "pr_createdAt": "2020-02-16T10:11:05Z", "pr_url": "https://github.com/quarkusio/quarkus/pull/7216", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI5NTUzOA==", "url": "https://github.com/quarkusio/quarkus/pull/7216#discussion_r380295538", "bodyText": "I believe the volatile construct was preferred here because the producer can be invoked concurrently at runtime (e.g. in request scoped beans). Using synchronization instead would serialize these calls. Or am I missing something?", "author": "tsegismont", "createdAt": "2020-02-17T17:09:36Z", "path": "extensions/reactive-pg-client/runtime/src/main/java/io/quarkus/reactive/pg/client/runtime/PgPoolProducer.java", "diffHunk": "@@ -4,36 +4,87 @@\n import javax.enterprise.inject.Produces;\n import javax.inject.Singleton;\n \n+import org.jboss.logging.Logger;\n+\n import io.vertx.pgclient.PgPool;\n \n @ApplicationScoped\n public class PgPoolProducer {\n \n-    private volatile PgPool pgPool;", "originalCommit": "d921635e7b7568bc8b2651254b3f281b6f55ff55", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDgwMjE4Mw==", "url": "https://github.com/quarkusio/quarkus/pull/7216#discussion_r380802183", "bodyText": "I actually want the serialization here to catch the creation of the deprecated clients.\nI can restore using a volatile for the PgPool but that mix 2 synchronization constructs.", "author": "cescoffier", "createdAt": "2020-02-18T16:52:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI5NTUzOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE4OTE4Mg==", "url": "https://github.com/quarkusio/quarkus/pull/7216#discussion_r381189182", "bodyText": "Fixed.", "author": "cescoffier", "createdAt": "2020-02-19T10:01:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI5NTUzOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI5NjA0OA==", "url": "https://github.com/quarkusio/quarkus/pull/7216#discussion_r380296048", "bodyText": "Shouldn't we use the same API methods in the quickstart and the doc? (flatMap in the quickstart)", "author": "tsegismont", "createdAt": "2020-02-17T17:10:56Z", "path": "docs/src/main/asciidoc/reactive-sql-clients.adoc", "diffHunk": "@@ -174,20 +176,19 @@ TIP: You may override the default value of the `myapp.schema.create` property in\n \n Almost ready!\n To initialize the DB in development mode, we will use the client simple `query` method.\n-It returns a `CompletionStage` and thus can be composed to execute queries sequentially:\n+It returns an `Uni` and thus can be composed to execute queries sequentially:\n \n [source,java]\n ----\n-        client.query(\"DROP TABLE IF EXISTS fruits\")\n-                .thenCompose(r -> client.query(\"CREATE TABLE fruits (id SERIAL PRIMARY KEY, name TEXT NOT NULL)\"))\n-                .thenCompose(r -> client.query(\"INSERT INTO fruits (name) VALUES ('Orange')\"))\n-                .thenCompose(r -> client.query(\"INSERT INTO fruits (name) VALUES ('Pear')\"))\n-                .thenCompose(r -> client.query(\"INSERT INTO fruits (name) VALUES ('Apple')\"))\n-                .toCompletableFuture()\n-                .join();\n+ client.query(\"DROP TABLE IF EXISTS fruits\")\n+    .onItem().produceUni(r -> client.query(\"CREATE TABLE fruits (id SERIAL PRIMARY KEY, name TEXT NOT NULL)\"))", "originalCommit": "d921635e7b7568bc8b2651254b3f281b6f55ff55", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDgwMjc5NQ==", "url": "https://github.com/quarkusio/quarkus/pull/7216#discussion_r380802795", "bodyText": "The quickstart has not been updated. So where did you find the flatMap?", "author": "cescoffier", "createdAt": "2020-02-18T16:53:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI5NjA0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDgwNDQ0NQ==", "url": "https://github.com/quarkusio/quarkus/pull/7216#discussion_r380804445", "bodyText": "Sorry, actually flatMap is used in the tests (FruitResource)", "author": "tsegismont", "createdAt": "2020-02-18T16:56:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI5NjA0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE3NjQzMw==", "url": "https://github.com/quarkusio/quarkus/pull/7216#discussion_r381176433", "bodyText": "oh good catch, yes, it should be consistent (both are equivalent BTW).", "author": "cescoffier", "createdAt": "2020-02-19T09:40:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI5NjA0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE4OTI1NA==", "url": "https://github.com/quarkusio/quarkus/pull/7216#discussion_r381189254", "bodyText": "Fixed.", "author": "cescoffier", "createdAt": "2020-02-19T10:01:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI5NjA0OA=="}], "type": "inlineReview"}, {"oid": "715fbf4192846d7dcc5b66fdd8ed286f63810418", "url": "https://github.com/quarkusio/quarkus/commit/715fbf4192846d7dcc5b66fdd8ed286f63810418", "message": "Add Mutiny support to the reactive PostgreSQL extension\n\n* Expose the Mutiny PgPool\n* Deprecate the RX and Axle API\n* Use lazy instantiation\n* Change the synchronization protocol for the PgPool\n\nFor the main pool, use volatile instead of being guarded by a lock.\nThis is because the \"set\" is called at start time, and then there is no concurrent writes.\nOther objects are guarded as we don't do atomic actions on them.", "committedDate": "2020-02-19T09:57:47Z", "type": "commit"}, {"oid": "7710570b7a68b5db80861fc2ca003444a286514e", "url": "https://github.com/quarkusio/quarkus/commit/7710570b7a68b5db80861fc2ca003444a286514e", "message": "Add Mutiny support to the reactive MySQL extension\n\n* Expose the Mutiny MySQLPool\n* Deprecate the RX and Axle API\n* Use lazy instantiation\n* Change the synchronization protocol for the PgPool\n\nUse volatile instead of being guarded by a lock for the main pool.\nThis is because the \"set\" is called at start time, and then there is no concurrent writes.\nThe other pools are guarded because we don't do atomic actions on them (check and set).", "committedDate": "2020-02-19T09:58:50Z", "type": "commit"}, {"oid": "38bfea02a4f164f4bff8e04deb9e8785cebd68b0", "url": "https://github.com/quarkusio/quarkus/commit/38bfea02a4f164f4bff8e04deb9e8785cebd68b0", "message": "Switch reactive ITs client to mutiny\n\nThis commit uses the Mutiny PG/MySQL Pools instead of the Axle ones.", "committedDate": "2020-02-19T10:00:29Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE5Mjc0NA==", "url": "https://github.com/quarkusio/quarkus/pull/7216#discussion_r381192744", "bodyText": "flatMap is fine with me, so is the Mutiny flavor with onItem. Your call.\nMy only concern is that the test and the doc are consistent, so all good. \ud83d\udc4d", "author": "tsegismont", "createdAt": "2020-02-19T10:07:23Z", "path": "docs/src/main/asciidoc/reactive-sql-clients.adoc", "diffHunk": "@@ -174,20 +176,19 @@ TIP: You may override the default value of the `myapp.schema.create` property in\n \n Almost ready!\n To initialize the DB in development mode, we will use the client simple `query` method.\n-It returns a `CompletionStage` and thus can be composed to execute queries sequentially:\n+It returns an `Uni` and thus can be composed to execute queries sequentially:\n \n [source,java]\n ----\n-        client.query(\"DROP TABLE IF EXISTS fruits\")\n-                .thenCompose(r -> client.query(\"CREATE TABLE fruits (id SERIAL PRIMARY KEY, name TEXT NOT NULL)\"))\n-                .thenCompose(r -> client.query(\"INSERT INTO fruits (name) VALUES ('Orange')\"))\n-                .thenCompose(r -> client.query(\"INSERT INTO fruits (name) VALUES ('Pear')\"))\n-                .thenCompose(r -> client.query(\"INSERT INTO fruits (name) VALUES ('Apple')\"))\n-                .toCompletableFuture()\n-                .join();\n+ client.query(\"DROP TABLE IF EXISTS fruits\")\n+    .flatMap(r -> client.query(\"CREATE TABLE fruits (id SERIAL PRIMARY KEY, name TEXT NOT NULL)\"))", "originalCommit": "38bfea02a4f164f4bff8e04deb9e8785cebd68b0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTIwNTU3OQ==", "url": "https://github.com/quarkusio/quarkus/pull/7216#discussion_r381205579", "bodyText": "I updated the commit message to explain why I'm ok with flatMap and map here. Reactive programmers are used to them.", "author": "cescoffier", "createdAt": "2020-02-19T10:30:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE5Mjc0NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE5Mzk4Ng==", "url": "https://github.com/quarkusio/quarkus/pull/7216#discussion_r381193986", "bodyText": "How about using AtomicReference to remove synchronization without losing the checks in the producer methods?", "author": "tsegismont", "createdAt": "2020-02-19T10:09:38Z", "path": "extensions/reactive-mysql-client/runtime/src/main/java/io/quarkus/reactive/mysql/client/runtime/MySQLPoolProducer.java", "diffHunk": "@@ -4,36 +4,90 @@\n import javax.enterprise.inject.Produces;\n import javax.inject.Singleton;\n \n+import org.jboss.logging.Logger;\n+\n import io.vertx.mysqlclient.MySQLPool;\n \n @ApplicationScoped\n public class MySQLPoolProducer {\n \n+    private static final Logger LOGGER = Logger.getLogger(MySQLPoolProducer.class);\n+\n     private volatile MySQLPool mysqlPool;\n-    private volatile io.vertx.axle.mysqlclient.MySQLPool axleMySQLPool;\n-    private volatile io.vertx.reactivex.mysqlclient.MySQLPool rxMySQLPool;\n+    private io.vertx.mutiny.mysqlclient.MySQLPool mutinyMySQLPool;", "originalCommit": "38bfea02a4f164f4bff8e04deb9e8785cebd68b0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTIwNDk4NA==", "url": "https://github.com/quarkusio/quarkus/pull/7216#discussion_r381204984", "bodyText": "AtomicReference.compareAndSet(null, instance) requires the instance to be already created - so it's not lazy. Using updateAndGet could work but is rather convoluted (you would need to move the if check in the binary operator).", "author": "cescoffier", "createdAt": "2020-02-19T10:29:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE5Mzk4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTIwODEwMw==", "url": "https://github.com/quarkusio/quarkus/pull/7216#discussion_r381208103", "bodyText": "Ok, let's revisit later if that proves to be a problem", "author": "tsegismont", "createdAt": "2020-02-19T10:35:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE5Mzk4Ng=="}], "type": "inlineReview"}, {"oid": "18d11bac19e4bedecb0f7198f64d2513a8559616", "url": "https://github.com/quarkusio/quarkus/commit/18d11bac19e4bedecb0f7198f64d2513a8559616", "message": "Update reactive database client documentation to use the Mutiny API\n\nAlso indicate that the RX and Axle APIs are deprecated.\nUse map and flatMap as reactive users are familiar with these constructs.", "committedDate": "2020-02-20T09:45:46Z", "type": "commit"}, {"oid": "4b124ff3b4a65f10de8b1019d118140e4850f58e", "url": "https://github.com/quarkusio/quarkus/commit/4b124ff3b4a65f10de8b1019d118140e4850f58e", "message": "Switch reactive ITs client to mutiny\n\nThis commit uses the Mutiny PG/MySQL Pools instead of the Axle ones.", "committedDate": "2020-02-20T09:45:46Z", "type": "commit"}, {"oid": "4b124ff3b4a65f10de8b1019d118140e4850f58e", "url": "https://github.com/quarkusio/quarkus/commit/4b124ff3b4a65f10de8b1019d118140e4850f58e", "message": "Switch reactive ITs client to mutiny\n\nThis commit uses the Mutiny PG/MySQL Pools instead of the Axle ones.", "committedDate": "2020-02-20T09:45:46Z", "type": "forcePushed"}]}