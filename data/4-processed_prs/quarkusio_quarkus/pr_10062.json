{"pr_number": 10062, "pr_title": "Support extension registry when adding or listing extensions in plugins", "pr_createdAt": "2020-06-16T19:33:15Z", "pr_url": "https://github.com/quarkusio/quarkus/pull/10062", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjY3OTk4MA==", "url": "https://github.com/quarkusio/quarkus/pull/10062#discussion_r442679980", "bodyText": "Could we move the Registry and DefaultExtensionRegistry creation  to the devtools-common?", "author": "ia3andy", "createdAt": "2020-06-19T07:32:54Z", "path": "devtools/gradle/src/main/java/io/quarkus/gradle/tasks/QuarkusAddExtension.java", "diffHunk": "@@ -40,9 +57,16 @@ public void addExtension() {\n                 .collect(toSet());\n \n         try {\n-            new AddExtensions(getQuarkusProject())\n-                    .extensions(extensionsSet)\n-                    .execute();\n+            AddExtensions addExtensions = new AddExtensions(getQuarkusProject())\n+                    .extensions(extensionsSet);\n+            if (registry != null) {\n+                Registry registry = new URLRegistryBuilder()\n+                        .addURL(new URL(getRegistry()))\n+                        .build();\n+                DefaultExtensionRegistry extensionRegistry = new DefaultExtensionRegistry(registry);\n+                addExtensions.extensionRegistry(extensionRegistry);", "originalCommit": "f1633b066d0b7d5b5c15009d90abf83950ef5ff5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjg4MTI0NQ==", "url": "https://github.com/quarkusio/quarkus/pull/10062#discussion_r442881245", "bodyText": "Good point, but I'd rather have a static fromURLs method in DefaultExtensionRegistry.", "author": "gastaldi", "createdAt": "2020-06-19T14:43:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjY3OTk4MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjY4MDMyOA==", "url": "https://github.com/quarkusio/quarkus/pull/10062#discussion_r442680328", "bodyText": "This way you avoid duplicating this block of code..", "author": "ia3andy", "createdAt": "2020-06-19T07:33:44Z", "path": "devtools/gradle/src/main/java/io/quarkus/gradle/tasks/QuarkusListExtensions.java", "diffHunk": "@@ -48,18 +55,36 @@ public void setSearchPattern(String searchPattern) {\n         this.searchPattern = searchPattern;\n     }\n \n+    @Optional\n+    @Input\n+    public String getRegistry() {\n+        return registry;\n+    }\n+\n+    @Option(description = \"The extension registry URL to be used\", option = \"registry\")\n+    public void setRegistry(String registry) {\n+        this.registry = registry;\n+    }\n+\n     public QuarkusListExtensions() {\n         super(\"Lists the available quarkus extensions\");\n     }\n \n     @TaskAction\n     public void listExtensions() {\n         try {\n-            new ListExtensions(getQuarkusProject())\n+            ListExtensions listExtensions = new ListExtensions(getQuarkusProject())\n                     .all(isAll())\n                     .format(getFormat())\n-                    .search(getSearchPattern())\n-                    .execute();\n+                    .search(getSearchPattern());\n+            if (registry != null) {\n+                Registry registry = new URLRegistryBuilder()\n+                        .addURL(new URL(getRegistry()))\n+                        .build();\n+                DefaultExtensionRegistry extensionRegistry = new DefaultExtensionRegistry(registry);\n+                listExtensions.extensionRegistry(extensionRegistry);", "originalCommit": "f1633b066d0b7d5b5c15009d90abf83950ef5ff5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjY4MDQ0MA==", "url": "https://github.com/quarkusio/quarkus/pull/10062#discussion_r442680440", "bodyText": "Same here", "author": "ia3andy", "createdAt": "2020-06-19T07:34:00Z", "path": "devtools/maven/src/main/java/io/quarkus/maven/AddExtensionMojo.java", "diffHunk": "@@ -53,13 +64,20 @@ public void doExecute(final QuarkusProject quarkusProject, final MessageWriter l\n         } else {\n             // Parse the \"extension\" just in case it contains several comma-separated values\n             // https://github.com/quarkusio/quarkus/issues/2393\n-            ext.addAll(Arrays.stream(extension.split(\",\")).map(s -> s.trim()).collect(Collectors.toSet()));\n+            ext.addAll(Arrays.stream(extension.split(\",\")).map(String::trim).collect(toSet()));\n         }\n \n         try {\n-            final QuarkusCommandOutcome outcome = new AddExtensions(quarkusProject)\n-                    .extensions(ext.stream().map(String::trim).collect(Collectors.toSet()))\n-                    .execute();\n+            AddExtensions addExtensions = new AddExtensions(quarkusProject)\n+                    .extensions(ext.stream().map(String::trim).collect(toSet()));\n+            if (registryURL != null) {\n+                Registry registry = new URLRegistryBuilder()\n+                        .addURL(registryURL)\n+                        .build();\n+                DefaultExtensionRegistry extensionRegistry = new DefaultExtensionRegistry(registry);\n+                addExtensions.extensionRegistry(extensionRegistry);", "originalCommit": "f1633b066d0b7d5b5c15009d90abf83950ef5ff5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjY4MDQ5OQ==", "url": "https://github.com/quarkusio/quarkus/pull/10062#discussion_r442680499", "bodyText": "Same here", "author": "ia3andy", "createdAt": "2020-06-19T07:34:09Z", "path": "devtools/maven/src/main/java/io/quarkus/maven/ListExtensionsMojo.java", "diffHunk": "@@ -36,14 +41,27 @@\n     @Parameter(property = \"searchPattern\", alias = \"quarkus.extension.searchPattern\")\n     protected String searchPattern;\n \n+    /**\n+     * The URL where the registry is.\n+     */\n+    @Parameter(property = \"registry\", alias = \"quarkus.extension.registry\")\n+    protected URL registryURL;\n+\n     @Override\n     public void doExecute(final QuarkusProject quarkusProject, final MessageWriter log) throws MojoExecutionException {\n         try {\n-            new ListExtensions(quarkusProject)\n+            ListExtensions listExtensions = new ListExtensions(quarkusProject)\n                     .all(all)\n                     .format(format)\n-                    .search(searchPattern)\n-                    .execute();\n+                    .search(searchPattern);\n+            if (registryURL != null) {\n+                Registry registry = new URLRegistryBuilder()\n+                        .addURL(registryURL)\n+                        .build();\n+                DefaultExtensionRegistry extensionRegistry = new DefaultExtensionRegistry(registry);\n+                listExtensions.extensionRegistry(extensionRegistry);", "originalCommit": "f1633b066d0b7d5b5c15009d90abf83950ef5ff5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjY4MTM1Nw==", "url": "https://github.com/quarkusio/quarkus/pull/10062#discussion_r442681357", "bodyText": "@maxandersen why don't we have the registry for creation too?", "author": "ia3andy", "createdAt": "2020-06-19T07:36:03Z", "path": "independent-projects/tools/devtools-common/src/main/java/io/quarkus/devtools/commands/handlers/CreateProjectCommandHandler.java", "diffHunk": "@@ -56,7 +56,7 @@ public QuarkusCommandOutcome execute(QuarkusCommandInvocation invocation) throws\n                 invocation.setValue(CLASS_NAME, className);\n             }\n \n-            final List<AppArtifactCoords> extensionsToAdd = computeCoordsFromQuery(invocation, extensionsQuery);\n+            final List<AppArtifactCoords> extensionsToAdd = computeCoordsFromQuery(invocation, null, extensionsQuery);", "originalCommit": "f1633b066d0b7d5b5c15009d90abf83950ef5ff5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDY1OTkzMQ==", "url": "https://github.com/quarkusio/quarkus/pull/10062#discussion_r444659931", "bodyText": "My assumption is that @gastaldi just did it for add and list first.\nBut yes, it should be used during creation too in its final form.", "author": "maxandersen", "createdAt": "2020-06-24T05:53:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjY4MTM1Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDY2MDYyMQ==", "url": "https://github.com/quarkusio/quarkus/pull/10062#discussion_r444660621", "bodyText": "remind me again why the registry descriptor api is external ?", "author": "maxandersen", "createdAt": "2020-06-24T05:56:00Z", "path": ".dependabot/config.yml", "diffHunk": "@@ -54,6 +54,8 @@ update_configs:\n           dependency_name: \"io.quarkus.http:quarkus-http-servlet\"\n       - match:\n           dependency_name: \"io.quarkus.http:quarkus-http-websockets-jsr\"\n+      - match:\n+          dependency_name: \"io.quarkus:quarkus-registry-descriptor\"", "originalCommit": "e1eaa4676c3fcaf63406d24fe735c43fc89f029c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDY2MTEwMw==", "url": "https://github.com/quarkusio/quarkus/pull/10062#discussion_r444661103", "bodyText": "i.e. quarkus-registry-descriptor depends on quarkus... (see https://github.com/quarkusio/quarkus-registry-descriptor/blob/master/pom.xml#L61) but now quarkus itself depends on quarkus-registry-descriptor... which one do we build first ?", "author": "maxandersen", "createdAt": "2020-06-24T05:57:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDY2MDYyMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDg1OTMwMA==", "url": "https://github.com/quarkusio/quarkus/pull/10062#discussion_r444859300", "bodyText": "remind me again why the registry descriptor api is external ?\n\nThis was the result from the conversation we had with @aloubyansky some time ago. Unless I misunderstood, he suggested putting in a separate repository and releasing it separately\n\nnow quarkus itself depends on quarkus-registry-descriptor... which one do we build first ?\n\nquarkus-registry-descriptor has a hard dependency on quarkus-platform-descriptor-api which is a shared dependency in quarkus-devtools-common (which depends on quarkus-registry-descriptor). So the build order is:\n\nquarkus-platform-descriptor-api\nquarkus-registry-descriptor\nquarkus-devtools-common\n\nPerhaps it would make sense to move this code under https://github.com/quarkusio/quarkus/tree/master/independent-projects/tools?", "author": "gastaldi", "createdAt": "2020-06-24T12:32:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDY2MDYyMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDg2MTg3Mg==", "url": "https://github.com/quarkusio/quarkus/pull/10062#discussion_r444861872", "bodyText": "The projects referenced in that pom are actually under independent-projects, btw.", "author": "aloubyansky", "createdAt": "2020-06-24T12:37:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDY2MDYyMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTE0MTAwMA==", "url": "https://github.com/quarkusio/quarkus/pull/10062#discussion_r445141000", "bodyText": "yes, thus why not put it there ? with the current setup you need to first build indepdnent projects then build registry then build the rest?", "author": "maxandersen", "createdAt": "2020-06-24T20:05:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDY2MDYyMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDY2MjA3Nw==", "url": "https://github.com/quarkusio/quarkus/pull/10062#discussion_r444662077", "bodyText": "where did we end up on having list of registries to support layering of registries?", "author": "maxandersen", "createdAt": "2020-06-24T06:00:44Z", "path": "devtools/gradle/src/main/java/io/quarkus/gradle/tasks/QuarkusAddExtension.java", "diffHunk": "@@ -31,6 +36,17 @@ public void setExtensionsToAdd(List<String> extensionsToAdd) {\n         return extensionsToAdd;\n     }\n \n+    @Optional\n+    @Input\n+    public String getRegistry() {\n+        return registry;\n+    }\n+\n+    @Option(description = \"The extension registry URL to be used\", option = \"registry\")", "originalCommit": "e1eaa4676c3fcaf63406d24fe735c43fc89f029c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDg1NTQ4OA==", "url": "https://github.com/quarkusio/quarkus/pull/10062#discussion_r444855488", "bodyText": "The API is ready for this, in my Quarkus CLI implementation I read a list of URLs from the application.yaml. I could make it a list here though", "author": "gastaldi", "createdAt": "2020-06-24T12:24:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDY2MjA3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDg1Nzk5Mg==", "url": "https://github.com/quarkusio/quarkus/pull/10062#discussion_r444857992", "bodyText": "+1 for that.", "author": "maxandersen", "createdAt": "2020-06-24T12:29:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDY2MjA3Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDg1OTkxNw==", "url": "https://github.com/quarkusio/quarkus/pull/10062#discussion_r444859917", "bodyText": "This message could be more informative. Like:\n\"No extension found with pattern kubernetes when searching https://github.com/quarkusio/quarkus-extension-catalog/releases/download/v23/registry.json\"\nor similar.", "author": "maxandersen", "createdAt": "2020-06-24T12:33:14Z", "path": "independent-projects/tools/devtools-common/src/main/java/io/quarkus/devtools/commands/handlers/ListExtensionsCommandHandler.java", "diffHunk": "@@ -49,15 +51,19 @@ public QuarkusCommandOutcome execute(QuarkusCommandInvocation invocation) throws\n         } catch (IOException e) {\n             throw new QuarkusCommandException(\"Failed to determine the list of installed extensions\", e);\n         }\n-\n-        Stream<Extension> platformExtensionsStream = invocation.getPlatformDescriptor().getExtensions().stream();\n-        platformExtensionsStream = platformExtensionsStream.filter(this::filterUnlisted);\n-        if (search != null && !\"*\".equalsIgnoreCase(search)) {\n-            final Pattern searchPattern = Pattern.compile(\".*\" + search + \".*\", Pattern.CASE_INSENSITIVE);\n-            platformExtensionsStream = platformExtensionsStream.filter(e -> filterBySearch(searchPattern, e));\n+        final Collection<Extension> platformExtensions;\n+        if (extensionRegistry != null) {\n+            String quarkusVersion = invocation.getPlatformDescriptor().getQuarkusVersion();\n+            platformExtensions = extensionRegistry.list(quarkusVersion, search);\n+        } else {\n+            Stream<Extension> platformExtensionsStream = invocation.getPlatformDescriptor().getExtensions().stream();\n+            platformExtensionsStream = platformExtensionsStream.filter(this::filterUnlisted);\n+            if (search != null && !\"*\".equalsIgnoreCase(search)) {\n+                final Pattern searchPattern = Pattern.compile(\".*\" + search + \".*\", Pattern.CASE_INSENSITIVE);\n+                platformExtensionsStream = platformExtensionsStream.filter(e -> filterBySearch(searchPattern, e));\n+            }\n+            platformExtensions = platformExtensionsStream.collect(Collectors.toList());\n         }\n-        List<Extension> platformExtensions = platformExtensionsStream.collect(Collectors.toList());\n-\n         if (platformExtensions.isEmpty()) {\n             invocation.log().info(\"No extension found with this pattern\");", "originalCommit": "e1eaa4676c3fcaf63406d24fe735c43fc89f029c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDg2MDIxOA==", "url": "https://github.com/quarkusio/quarkus/pull/10062#discussion_r444860218", "bodyText": "should list/add not also include the existing platform info in its search ?", "author": "maxandersen", "createdAt": "2020-06-24T12:33:52Z", "path": "independent-projects/tools/devtools-common/src/main/java/io/quarkus/devtools/commands/handlers/ListExtensionsCommandHandler.java", "diffHunk": "@@ -49,15 +51,19 @@ public QuarkusCommandOutcome execute(QuarkusCommandInvocation invocation) throws\n         } catch (IOException e) {\n             throw new QuarkusCommandException(\"Failed to determine the list of installed extensions\", e);\n         }\n-\n-        Stream<Extension> platformExtensionsStream = invocation.getPlatformDescriptor().getExtensions().stream();\n-        platformExtensionsStream = platformExtensionsStream.filter(this::filterUnlisted);\n-        if (search != null && !\"*\".equalsIgnoreCase(search)) {\n-            final Pattern searchPattern = Pattern.compile(\".*\" + search + \".*\", Pattern.CASE_INSENSITIVE);\n-            platformExtensionsStream = platformExtensionsStream.filter(e -> filterBySearch(searchPattern, e));\n+        final Collection<Extension> platformExtensions;\n+        if (extensionRegistry != null) {\n+            String quarkusVersion = invocation.getPlatformDescriptor().getQuarkusVersion();\n+            platformExtensions = extensionRegistry.list(quarkusVersion, search);\n+        } else {\n+            Stream<Extension> platformExtensionsStream = invocation.getPlatformDescriptor().getExtensions().stream();\n+            platformExtensionsStream = platformExtensionsStream.filter(this::filterUnlisted);\n+            if (search != null && !\"*\".equalsIgnoreCase(search)) {\n+                final Pattern searchPattern = Pattern.compile(\".*\" + search + \".*\", Pattern.CASE_INSENSITIVE);\n+                platformExtensionsStream = platformExtensionsStream.filter(e -> filterBySearch(searchPattern, e));\n+            }\n+            platformExtensions = platformExtensionsStream.collect(Collectors.toList());", "originalCommit": "e1eaa4676c3fcaf63406d24fe735c43fc89f029c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDg2MDgxNQ==", "url": "https://github.com/quarkusio/quarkus/pull/10062#discussion_r444860815", "bodyText": "Existing platform info? Can you elaborate?", "author": "gastaldi", "createdAt": "2020-06-24T12:35:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDg2MDIxOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDg2ODQ0Mw==", "url": "https://github.com/quarkusio/quarkus/pull/10062#discussion_r444868443", "bodyText": "the project on disk has a platform, shouldn't that platforms json be included in the search ? i.e. in cases where registry is broken, faulty or simply just not available in that registry.", "author": "maxandersen", "createdAt": "2020-06-24T12:49:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDg2MDIxOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDg2OTMyMg==", "url": "https://github.com/quarkusio/quarkus/pull/10062#discussion_r444869322", "bodyText": "Ah good point, yeah, I'll do that", "author": "gastaldi", "createdAt": "2020-06-24T12:50:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDg2MDIxOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDkxNDg5Nw==", "url": "https://github.com/quarkusio/quarkus/pull/10062#discussion_r444914897", "bodyText": "Shouldn't these get/setRegistry be also List-based?", "author": "aloubyansky", "createdAt": "2020-06-24T13:59:54Z", "path": "devtools/gradle/src/main/java/io/quarkus/gradle/tasks/QuarkusListExtensions.java", "diffHunk": "@@ -48,18 +54,34 @@ public void setSearchPattern(String searchPattern) {\n         this.searchPattern = searchPattern;\n     }\n \n+    @Optional\n+    @Input\n+    public String getRegistry() {\n+        return registry;\n+    }\n+\n+    @Option(description = \"The extension registry URL to be used\", option = \"registry\")\n+    public void setRegistry(String registry) {", "originalCommit": "3b248027759094836a1373b4493a15e5e987db40", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDk4NTA3OQ==", "url": "https://github.com/quarkusio/quarkus/pull/10062#discussion_r444985079", "bodyText": "Be careful with that, the caller shouldn't expect that the returned set of dependencies is a complete set. But it looks like it's used in one place only.\nIn fact, we should be detecting the platforms differently. The current way is not reliable in multi module projects with BOMs imported by parents.", "author": "aloubyansky", "createdAt": "2020-06-24T15:34:03Z", "path": "devtools/maven/src/main/java/io/quarkus/maven/QuarkusProjectMojoBase.java", "diffHunk": "@@ -165,7 +165,7 @@ private String resolveValue(String expr) throws IOException {\n     }\n \n     private List<Dependency> getManagedDependencies() throws IOException {\n-        final DependencyManagement managed = project.getModel().getDependencyManagement();\n+        final DependencyManagement managed = project.getOriginalModel().getDependencyManagement();", "originalCommit": "b99063d85377968220bb4daa06ef30905e04c523", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTE0MDQ3OQ==", "url": "https://github.com/quarkusio/quarkus/pull/10062#discussion_r445140479", "bodyText": "something we can fix for 1.6 or a 1.7 thing", "author": "maxandersen", "createdAt": "2020-06-24T20:04:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDk4NTA3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTQ5Nzc5Ng==", "url": "https://github.com/quarkusio/quarkus/pull/10062#discussion_r445497796", "bodyText": "forgot to add a ? at end of that sentence :)\n@aloubyansky something we can fix for 1.6 or a 1.7 thing ?", "author": "maxandersen", "createdAt": "2020-06-25T11:45:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDk4NTA3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTUwMjg0MA==", "url": "https://github.com/quarkusio/quarkus/pull/10062#discussion_r445502840", "bodyText": "A somewhat more reliable way would be to be also looking for it in the project.getParent() all the way up until there is no parent. This could easily be done in 1.6.\nBut then there could be parents outside of the current workspace. Those could be resolved using a resolver. Also doable in a short time frame.\nBut then the imported BOMs could also be flattened, in which case it all falls apart. That's probably not doable in 1.6 or even 1.7, not sure.", "author": "aloubyansky", "createdAt": "2020-06-25T11:55:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDk4NTA3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTUwODM5Mg==", "url": "https://github.com/quarkusio/quarkus/pull/10062#discussion_r445508392", "bodyText": "The registry needs to know which quarkus core version to use to query for compatible extensions. A workaround may be to use the plugin version since they should always match (at least for now)", "author": "gastaldi", "createdAt": "2020-06-25T12:06:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDk4NTA3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTUxMTE4Mg==", "url": "https://github.com/quarkusio/quarkus/pull/10062#discussion_r445511182", "bodyText": "For that you actually need project.getModel().getDependencyManagement();", "author": "aloubyansky", "createdAt": "2020-06-25T12:12:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDk4NTA3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU5NjU3NA==", "url": "https://github.com/quarkusio/quarkus/pull/10062#discussion_r445596574", "bodyText": "thanks @aloubyansky - that does sounds like it would even be a problem even today without registry as when we do add/list we rely on locating the locally used platform, right?", "author": "maxandersen", "createdAt": "2020-06-25T14:22:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDk4NTA3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTYwNjkxNg==", "url": "https://github.com/quarkusio/quarkus/pull/10062#discussion_r445606916", "bodyText": "Right", "author": "aloubyansky", "createdAt": "2020-06-25T14:35:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDk4NTA3OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTAwNDc4NQ==", "url": "https://github.com/quarkusio/quarkus/pull/10062#discussion_r449004785", "bodyText": "this description does not seem to match registry.json.\nIt has \"versions' which i'm not sure what is about ?", "author": "maxandersen", "createdAt": "2020-07-02T13:33:28Z", "path": "independent-projects/tools/registry-descriptor/README.md", "diffHunk": "@@ -0,0 +1,105 @@\n+# Quarkus Registry Descriptor\n+\n+This project provides a model and a parser API to handle the Quarkus extension registry.\n+\n+## Definitions\n+### Repository\n+A repository is a local directory (which can be cloned from a Git repository) with the following structure: \n+\n+```bash\n+.\n+\u251c\u2500\u2500 extensions\n+\u2502\u00a0\u00a0 \u2514\u2500\u2500 jsf.json\n+\u2514\u2500\u2500 platforms.json\n+```\n+\n+### Extensions\n+For maintenance purposes, each extension is declared in its own file and has the following structure:\n+\n+```json\n+{\n+  \"group-id\": \"org.apache.myfaces.core.extensions.quarkus\",\n+  \"artifact-id\": \"quarkus-myfaces\",\n+  \"releases\": [\n+    {\n+      \"version\": \"2.3-next\",\n+      \"quarkus-core\":  \"1.3.1.Final\"\n+    },\n+    {\n+      \"version\": \"2.4-next\",\n+      \"quarkus-core\": \"1.3.2.Final\"\n+    }\n+  ]\n+}\n+``` \n+\n+The Quarkus extension MUST be released to a Maven repository. The descriptor states the GAV and the Quarkus version for each release (which is listed here for performance purposes - if not specified, the parser will attempt to resolve using the Maven Resolver API)\n+\n+\n+### Platforms \n+\n+Platforms are a set of extensions of a specific version and MUST exist as a BOM. Since the order is important, it is declared as a single JSON (ordered by priority - the preferred BOMs in the top)\n+\n+```json\n+[\n+  {\n+    \"group-id\": \"io.quarkus\",", "originalCommit": "676f0b940fcf6ebc4ce26b68f97e9509e57c3bce", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTAwNTcwMg==", "url": "https://github.com/quarkusio/quarkus/pull/10062#discussion_r449005702", "bodyText": "I just noticed that too, I copied from Alexey's repository and forgot to change.\nI'm working on it, thanks for spotting it ;)", "author": "gastaldi", "createdAt": "2020-07-02T13:34:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTAwNDc4NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTAwNjMwOQ==", "url": "https://github.com/quarkusio/quarkus/pull/10062#discussion_r449006309", "bodyText": "are we not going to capture the \"extension class\" ? i..e there are the specific extension release and then there are the extension of which there are multiple possible releases.", "author": "maxandersen", "createdAt": "2020-07-02T13:35:48Z", "path": "independent-projects/tools/registry-descriptor/README.md", "diffHunk": "@@ -0,0 +1,105 @@\n+# Quarkus Registry Descriptor\n+\n+This project provides a model and a parser API to handle the Quarkus extension registry.\n+\n+## Definitions\n+### Repository\n+A repository is a local directory (which can be cloned from a Git repository) with the following structure: \n+\n+```bash\n+.\n+\u251c\u2500\u2500 extensions\n+\u2502\u00a0\u00a0 \u2514\u2500\u2500 jsf.json\n+\u2514\u2500\u2500 platforms.json\n+```\n+\n+### Extensions\n+For maintenance purposes, each extension is declared in its own file and has the following structure:\n+\n+```json\n+{\n+  \"group-id\": \"org.apache.myfaces.core.extensions.quarkus\",\n+  \"artifact-id\": \"quarkus-myfaces\",\n+  \"releases\": [\n+    {\n+      \"version\": \"2.3-next\",\n+      \"quarkus-core\":  \"1.3.1.Final\"\n+    },\n+    {\n+      \"version\": \"2.4-next\",\n+      \"quarkus-core\": \"1.3.2.Final\"\n+    }\n+  ]\n+}\n+``` \n+\n+The Quarkus extension MUST be released to a Maven repository. The descriptor states the GAV and the Quarkus version for each release (which is listed here for performance purposes - if not specified, the parser will attempt to resolve using the Maven Resolver API)\n+\n+\n+### Platforms \n+\n+Platforms are a set of extensions of a specific version and MUST exist as a BOM. Since the order is important, it is declared as a single JSON (ordered by priority - the preferred BOMs in the top)\n+\n+```json\n+[\n+  {\n+    \"group-id\": \"io.quarkus\",\n+    \"artifact-id\": \"quarkus-universe-bom\",\n+    \"releases\": [\n+      {\n+        \"version\": \"1.3.1.Final\"\n+      },\n+      {\n+        \"version\": \"1.3.2.Final\"\n+      }\n+    ]\n+  },\n+  {\n+    \"group-id\": \"io.quarkus\",\n+    \"artifact-id\": \"quarkus-bom\",\n+    \"artifact-id-json\": \"quarkus-bom-descriptor-json\",\n+    \"releases\": [\n+      {\n+        \"version\": \"1.3.1.Final\"\n+      },\n+      {\n+        \"version\": \"1.3.2.Final\"\n+      },\n+      {\n+        \"version\": \"1.4.0.CR1\"\n+      }\n+    ]\n+  }\n+]\n+```\n+\n+The idea is to provide an utility that would allow to perform all sorts of queries across the registry, such as:\n+\n+* which Quarkus Core versions are available;\n+* which platforms are available;\n+* which extensions are available.", "originalCommit": "676f0b940fcf6ebc4ce26b68f97e9509e57c3bce", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTAwNjk4NA==", "url": "https://github.com/quarkusio/quarkus/pull/10062#discussion_r449006984", "bodyText": "should we not list a descriptoin/tags for that extension - most likely from  the \"last released version\" ?", "author": "maxandersen", "createdAt": "2020-07-02T13:36:49Z", "path": "independent-projects/tools/registry-descriptor/README.md", "diffHunk": "@@ -0,0 +1,105 @@\n+# Quarkus Registry Descriptor\n+\n+This project provides a model and a parser API to handle the Quarkus extension registry.\n+\n+## Definitions\n+### Repository\n+A repository is a local directory (which can be cloned from a Git repository) with the following structure: \n+\n+```bash\n+.\n+\u251c\u2500\u2500 extensions\n+\u2502\u00a0\u00a0 \u2514\u2500\u2500 jsf.json\n+\u2514\u2500\u2500 platforms.json\n+```\n+\n+### Extensions\n+For maintenance purposes, each extension is declared in its own file and has the following structure:\n+\n+```json\n+{\n+  \"group-id\": \"org.apache.myfaces.core.extensions.quarkus\",\n+  \"artifact-id\": \"quarkus-myfaces\",\n+  \"releases\": [\n+    {\n+      \"version\": \"2.3-next\",\n+      \"quarkus-core\":  \"1.3.1.Final\"\n+    },\n+    {\n+      \"version\": \"2.4-next\",\n+      \"quarkus-core\": \"1.3.2.Final\"\n+    }\n+  ]\n+}\n+``` \n+\n+The Quarkus extension MUST be released to a Maven repository. The descriptor states the GAV and the Quarkus version for each release (which is listed here for performance purposes - if not specified, the parser will attempt to resolve using the Maven Resolver API)\n+\n+\n+### Platforms \n+\n+Platforms are a set of extensions of a specific version and MUST exist as a BOM. Since the order is important, it is declared as a single JSON (ordered by priority - the preferred BOMs in the top)\n+\n+```json\n+[\n+  {\n+    \"group-id\": \"io.quarkus\",\n+    \"artifact-id\": \"quarkus-universe-bom\",\n+    \"releases\": [\n+      {\n+        \"version\": \"1.3.1.Final\"\n+      },\n+      {\n+        \"version\": \"1.3.2.Final\"\n+      }\n+    ]\n+  },\n+  {\n+    \"group-id\": \"io.quarkus\",\n+    \"artifact-id\": \"quarkus-bom\",\n+    \"artifact-id-json\": \"quarkus-bom-descriptor-json\",\n+    \"releases\": [\n+      {\n+        \"version\": \"1.3.1.Final\"\n+      },\n+      {\n+        \"version\": \"1.3.2.Final\"\n+      },\n+      {\n+        \"version\": \"1.4.0.CR1\"\n+      }\n+    ]\n+  }\n+]\n+```\n+\n+The idea is to provide an utility that would allow to perform all sorts of queries across the registry, such as:\n+\n+* which Quarkus Core versions are available;\n+* which platforms are available;\n+* which extensions are available.\n+\n+For a given Quarkus Core version:\n+\n+* list the available platforms;\n+* list all the extensions including those that aren't a part of any platform.\n+\n+For a given platform:\n+\n+* list the platform versions available (i.e. releases of this platform);\n+* list Quarkus Core versions it supports.\n+\n+For a given platform release:\n+\n+* Quarkus Core version;\n+* Extension releases that are included.\n+\n+For a given extension:\n+\n+* list available versions of the extension (i.e. releases of the extension);\n+* (The list could be easily extended)", "originalCommit": "676f0b940fcf6ebc4ce26b68f97e9509e57c3bce", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQ0NjM2OQ==", "url": "https://github.com/quarkusio/quarkus/pull/10062#discussion_r449446369", "bodyText": "What is happening here? What is this fallback about?", "author": "aloubyansky", "createdAt": "2020-07-03T08:19:46Z", "path": "independent-projects/tools/devtools-common/src/main/java/io/quarkus/devtools/commands/handlers/ListExtensionsCommandHandler.java", "diffHunk": "@@ -49,20 +52,27 @@ public QuarkusCommandOutcome execute(QuarkusCommandInvocation invocation) throws\n         } catch (IOException e) {\n             throw new QuarkusCommandException(\"Failed to determine the list of installed extensions\", e);\n         }\n-\n-        Stream<Extension> platformExtensionsStream = invocation.getPlatformDescriptor().getExtensions().stream();\n-        platformExtensionsStream = platformExtensionsStream.filter(this::filterUnlisted);\n-        if (search != null && !\"*\".equalsIgnoreCase(search)) {\n-            final Pattern searchPattern = Pattern.compile(\".*\" + search + \".*\", Pattern.CASE_INSENSITIVE);\n-            platformExtensionsStream = platformExtensionsStream.filter(e -> filterBySearch(searchPattern, e));\n+        final Collection<Extension> platformExtensions;\n+        if (extensionRegistry != null) {\n+            String quarkusVersion = invocation.getPlatformDescriptor().getQuarkusVersion();\n+            Collection<Extension> result = extensionRegistry.list(quarkusVersion, search);\n+            if (result.isEmpty()) {\n+                log.warn(\n+                        \"No extension found with pattern '%s' while searching in the configured extension registries (using Quarkus Core %s).\\n\"\n+                                + \"Falling back to existing platform extensions\",\n+                        search, quarkusVersion);\n+                platformExtensions = searchExtensions(invocation, search);", "originalCommit": "61e6c88131aab234677f17785409ffb9ccee3794", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQ0NzI5MA==", "url": "https://github.com/quarkusio/quarkus/pull/10062#discussion_r449447290", "bodyText": "Why are we having two sources of extensions?", "author": "aloubyansky", "createdAt": "2020-07-03T08:21:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQ0NjM2OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTU3MDAxMw==", "url": "https://github.com/quarkusio/quarkus/pull/10062#discussion_r449570013", "bodyText": "What is happening here? What is this fallback about?\nWhy are we having two sources of extensions?\n\nThe fallback happens to make sure that the search is also performed in the platform BOM that is associated to the project. This will likely happen if the specified registry does not list the Quarkus core version used in the project", "author": "gastaldi", "createdAt": "2020-07-03T12:56:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQ0NjM2OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTY4NTMyMg==", "url": "https://github.com/quarkusio/quarkus/pull/10062#discussion_r449685322", "bodyText": "The fact that they aren't unified is strange to me. Perhaps I'm misunderstood the use-case.", "author": "aloubyansky", "createdAt": "2020-07-03T19:10:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQ0NjM2OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQ1Mjc5MQ==", "url": "https://github.com/quarkusio/quarkus/pull/10062#discussion_r449452791", "bodyText": "Hint: org.apache.maven.artifact.versioning.DefaultArtifactVersion", "author": "aloubyansky", "createdAt": "2020-07-03T08:32:37Z", "path": "independent-projects/tools/registry-descriptor/src/main/java/io/quarkus/registry/model/Release.java", "diffHunk": "@@ -0,0 +1,36 @@\n+package io.quarkus.registry.model;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n+import javax.annotation.Nullable;\n+import org.immutables.value.Value;\n+\n+@Value.Immutable\n+@JsonDeserialize(as = ImmutableRelease.class)\n+public interface Release extends Comparable<Release> {\n+\n+    String getVersion();\n+\n+    @Nullable\n+    @JsonProperty(\"quarkus-core\")\n+    String getQuarkusCore();\n+\n+    @JsonProperty(\"repository-url\")\n+    @Value.Auxiliary\n+    @Nullable\n+    String getRepositoryURL();\n+\n+    static ImmutableRelease.Builder builder() {\n+        return ImmutableRelease.builder();\n+    }\n+\n+    @Override\n+    default int compareTo(Release o) {\n+        //TODO: Compare using SemVer rules", "originalCommit": "61e6c88131aab234677f17785409ffb9ccee3794", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTU3NDQ2OA==", "url": "https://github.com/quarkusio/quarkus/pull/10062#discussion_r449574468", "bodyText": "Thanks! That class uses org.apache.maven.artifact.versioning.ComparableVersion, which I think is more appropriate. I'll use that \ud83d\ude09", "author": "gastaldi", "createdAt": "2020-07-03T13:07:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQ1Mjc5MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQ1NTMwNA==", "url": "https://github.com/quarkusio/quarkus/pull/10062#discussion_r449455304", "bodyText": "Is this resolving actual 1.5.1.Final platform release?", "author": "aloubyansky", "createdAt": "2020-07-03T08:37:38Z", "path": "independent-projects/tools/registry-descriptor/src/test/java/io/quarkus/registry/builder/ExtensionRegistryBuilderTest.java", "diffHunk": "@@ -0,0 +1,21 @@\n+package io.quarkus.registry.builder;\n+\n+import io.quarkus.registry.ExtensionRegistry;\n+import io.quarkus.registry.impl.DefaultArtifactResolver;\n+import java.io.IOException;\n+import org.assertj.core.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+\n+class ExtensionRegistryBuilderTest {\n+\n+    @Test\n+    void shouldResolveCamelDependencies() throws IOException {\n+        DefaultArtifactResolver resolver = new DefaultArtifactResolver();\n+        ExtensionRegistry registry = new ExtensionRegistryBuilder(resolver)\n+                .addPlatform(\"io.quarkus\", \"quarkus-universe-bom\", \"1.5.1.Final\")\n+                .build();", "originalCommit": "61e6c88131aab234677f17785409ffb9ccee3794", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTU2ODg2OA==", "url": "https://github.com/quarkusio/quarkus/pull/10062#discussion_r449568868", "bodyText": "It uses the DefaultArtifactResolver which does the real thing, so yes :)", "author": "gastaldi", "createdAt": "2020-07-03T12:54:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQ1NTMwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTY4NjM5Mw==", "url": "https://github.com/quarkusio/quarkus/pull/10062#discussion_r449686393", "bodyText": "Could we use the local quarkus-bom instead?", "author": "aloubyansky", "createdAt": "2020-07-03T19:16:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQ1NTMwNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzEzMzcyMA==", "url": "https://github.com/quarkusio/quarkus/pull/10062#discussion_r457133720", "bodyText": "@gastaldi are you sure you want to introduce a coupling here?", "author": "ia3andy", "createdAt": "2020-07-20T07:34:28Z", "path": "independent-projects/tools/devtools-common/src/main/java/io/quarkus/devtools/project/extensions/ExtensionManager.java", "diffHunk": "@@ -4,6 +4,7 @@\n import io.quarkus.bootstrap.model.AppArtifactKey;\n import io.quarkus.dependencies.Extension;\n import io.quarkus.devtools.project.BuildTool;\n+import io.quarkus.registry.InstallPlan;", "originalCommit": "65396d1911187a9643f1b83006038f4252afed3f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzMwNzE2NQ==", "url": "https://github.com/quarkusio/quarkus/pull/10062#discussion_r457307165", "bodyText": "It's just a DTO, I'll probably move it to devtools-common then. Thanks!", "author": "gastaldi", "createdAt": "2020-07-20T11:43:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzEzMzcyMA=="}], "type": "inlineReview"}, {"oid": "bb4a531f61a9961333a57c0b538184175c3b26d5", "url": "https://github.com/quarkusio/quarkus/commit/bb4a531f61a9961333a57c0b538184175c3b26d5", "message": "Make ValueMap.getValue generic-friendly", "committedDate": "2020-07-21T04:26:22Z", "type": "commit"}, {"oid": "a08b23790d53753f4236f14ce453e3ebce824c29", "url": "https://github.com/quarkusio/quarkus/commit/a08b23790d53753f4236f14ce453e3ebce824c29", "message": "Collect managed dependencies from POM hierarchy to resolve the used platform BOM", "committedDate": "2020-07-21T04:26:22Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODEwNTQ0Nw==", "url": "https://github.com/quarkusio/quarkus/pull/10062#discussion_r458105447", "bodyText": "FYI @ia3andy this is going to help collect platform BOMs from the parents.", "author": "aloubyansky", "createdAt": "2020-07-21T13:41:49Z", "path": "devtools/maven/src/main/java/io/quarkus/maven/QuarkusProjectMojoBase.java", "diffHunk": "@@ -164,9 +168,36 @@ private String resolveValue(String expr) throws IOException {\n         return expr;\n     }\n \n-    private List<Dependency> getManagedDependencies() throws IOException {\n-        final DependencyManagement managed = project.getModel().getDependencyManagement();\n-        return managed != null ? managed.getDependencies()\n-                : Collections.emptyList();\n+    private List<Dependency> getManagedDependencies(MavenArtifactResolver resolver) throws IOException {", "originalCommit": "45c84b51609b2bc7ef66f56003772504d0ff82c2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODEwNjY1Nw==", "url": "https://github.com/quarkusio/quarkus/pull/10062#discussion_r458106657", "bodyText": "I don't think you need the descriptor (effective POM). It looks like you need only to resolve the pom artifact with resolver.resolve(Artifact);", "author": "aloubyansky", "createdAt": "2020-07-21T13:43:35Z", "path": "devtools/maven/src/main/java/io/quarkus/maven/QuarkusProjectMojoBase.java", "diffHunk": "@@ -164,9 +168,36 @@ private String resolveValue(String expr) throws IOException {\n         return expr;\n     }\n \n-    private List<Dependency> getManagedDependencies() throws IOException {\n-        final DependencyManagement managed = project.getModel().getDependencyManagement();\n-        return managed != null ? managed.getDependencies()\n-                : Collections.emptyList();\n+    private List<Dependency> getManagedDependencies(MavenArtifactResolver resolver) throws IOException {\n+        List<Dependency> managedDependencies = new ArrayList<>();\n+        Model model = project.getOriginalModel();\n+        DependencyManagement managed = model.getDependencyManagement();\n+        if (managed != null) {\n+            managedDependencies.addAll(managed.getDependencies());\n+        }\n+        Parent parent;\n+        while ((parent = model.getParent()) != null) {\n+            try {\n+                ArtifactDescriptorResult result = resolver.resolveDescriptor(new DefaultArtifact(", "originalCommit": "45c84b51609b2bc7ef66f56003772504d0ff82c2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODExODI1NA==", "url": "https://github.com/quarkusio/quarkus/pull/10062#discussion_r458118254", "bodyText": "Done, thanks!", "author": "gastaldi", "createdAt": "2020-07-21T13:58:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODEwNjY1Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODEwNzY5Ng==", "url": "https://github.com/quarkusio/quarkus/pull/10062#discussion_r458107696", "bodyText": "Just to clarify, this dependency will be provided at runtime by something? What will it be?", "author": "aloubyansky", "createdAt": "2020-07-21T13:45:02Z", "path": "independent-projects/tools/devtools-common/pom.xml", "diffHunk": "@@ -106,6 +106,12 @@\n             <groupId>jakarta.websocket</groupId>\n             <artifactId>jakarta.websocket-api</artifactId>\n         </dependency>\n+        <dependency>\n+            <groupId>org.immutables</groupId>\n+            <artifactId>value</artifactId>\n+            <version>2.8.8</version>\n+            <scope>provided</scope>\n+        </dependency>", "originalCommit": "45c84b51609b2bc7ef66f56003772504d0ff82c2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODEwOTgyMg==", "url": "https://github.com/quarkusio/quarkus/pull/10062#discussion_r458109822", "bodyText": "No, this is only used to generate sources. The annotations in this dependency don't exist at runtime", "author": "gastaldi", "createdAt": "2020-07-21T13:47:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODEwNzY5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODExNjQwNA==", "url": "https://github.com/quarkusio/quarkus/pull/10062#discussion_r458116404", "bodyText": "thanks", "author": "aloubyansky", "createdAt": "2020-07-21T13:56:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODEwNzY5Ng=="}], "type": "inlineReview"}, {"oid": "f7bafc611094ed64d144f3a5d0e0e7dd71002361", "url": "https://github.com/quarkusio/quarkus/commit/f7bafc611094ed64d144f3a5d0e0e7dd71002361", "message": "Support ExtensionRegistry in ListExtensions\n\nSupport ExtensionRegistry in AddExtensions\n\nSupport multiple registries\n\nIntroduced registry-descriptor and API\n\nIntroduced ExtensionPredicate\n\nAdd Extensions now use ExtensionRegistry.lookup\n\nFixes #9593", "committedDate": "2020-07-21T13:58:00Z", "type": "commit"}]}