{"pr_number": 9139, "pr_title": "Clean up bootstrap path handling", "pr_createdAt": "2020-05-07T04:18:33Z", "pr_url": "https://github.com/quarkusio/quarkus/pull/9139", "timeline": [{"oid": "b3e0fb7bb755a201d6e036976ec4ab5520a0dc10", "url": "https://github.com/quarkusio/quarkus/commit/b3e0fb7bb755a201d6e036976ec4ab5520a0dc10", "message": "Clean up bootstrap path handling", "committedDate": "2020-05-07T05:04:16Z", "type": "forcePushed"}, {"oid": "cda1ffff5f8f2947d18bdb0d51cbf37bb9576668", "url": "https://github.com/quarkusio/quarkus/commit/cda1ffff5f8f2947d18bdb0d51cbf37bb9576668", "message": "Clean up bootstrap path handling", "committedDate": "2020-05-07T06:29:21Z", "type": "forcePushed"}, {"oid": "a44d6b79c2430d185045ba4425d77f5783ae674e", "url": "https://github.com/quarkusio/quarkus/commit/a44d6b79c2430d185045ba4425d77f5783ae674e", "message": "Clean up bootstrap path handling", "committedDate": "2020-05-07T11:15:24Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjA3OTI5MQ==", "url": "https://github.com/quarkusio/quarkus/pull/9139#discussion_r422079291", "bodyText": "Is this really necessary? I think appArtifact would normally represent the app root. Except when a test actually creates a project in a tmp dir.", "author": "aloubyansky", "createdAt": "2020-05-08T10:55:55Z", "path": "devtools/gradle/src/main/java/io/quarkus/gradle/tasks/QuarkusGenerateConfig.java", "diffHunk": "@@ -57,6 +57,7 @@ public void buildQuarkus() {\n                 .setTargetDirectory(getProject().getBuildDir().toPath())\n                 .setBaseName(extension().finalName())\n                 .setAppArtifact(appArtifact)\n+                .setApplicationRoot(appArtifact.getPaths())", "originalCommit": "a44d6b79c2430d185045ba4425d77f5783ae674e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjE0MTU1NQ==", "url": "https://github.com/quarkusio/quarkus/pull/9139#discussion_r422141555", "bodyText": "I just think it is better to be super explicit about where everything comes from. Before it was kinda implicit, but not everywhere was using the same logic.", "author": "stuartwdouglas", "createdAt": "2020-05-08T13:26:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjA3OTI5MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjA3OTgwOA==", "url": "https://github.com/quarkusio/quarkus/pull/9139#discussion_r422079808", "bodyText": "I don't think this should be required. Is there an actual reason for setting the project root and the app root?", "author": "aloubyansky", "createdAt": "2020-05-08T10:57:15Z", "path": "devtools/maven/src/main/java/io/quarkus/maven/GenerateConfigMojo.java", "diffHunk": "@@ -132,6 +132,8 @@ public void execute() throws MojoExecutionException {\n             try (CuratedApplication curatedApplication = QuarkusBootstrap\n                     .builder()\n                     .setAppArtifact(appArtifact)\n+                    .setApplicationRoot(classesDir)\n+                    .setProjectRoot(project.getBasedir().toPath())", "originalCommit": "a44d6b79c2430d185045ba4425d77f5783ae674e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjE0MjE5Nw==", "url": "https://github.com/quarkusio/quarkus/pull/9139#discussion_r422142197", "bodyText": "Yes, tests create their own tmp dir which is the app root, but uses metadata from the project root.", "author": "stuartwdouglas", "createdAt": "2020-05-08T13:27:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjA3OTgwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjE1MDI0Mg==", "url": "https://github.com/quarkusio/quarkus/pull/9139#discussion_r422150242", "bodyText": "I meant in this specific case. I don't think all these have to required. It does not look simpler to me.", "author": "aloubyansky", "createdAt": "2020-05-08T13:43:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjA3OTgwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM5MzAzMQ==", "url": "https://github.com/quarkusio/quarkus/pull/9139#discussion_r423393031", "bodyText": "I want it to be explicit exactly which paths are used where. At the moment if one is null it just picks a different one. We only have a few different places that use this launcher code, IMHO it is better to be explicit rather than rely on implicit behaviour.", "author": "stuartwdouglas", "createdAt": "2020-05-12T00:22:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjA3OTgwOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjA4MDYyMg==", "url": "https://github.com/quarkusio/quarkus/pull/9139#discussion_r422080622", "bodyText": "Why would you want to require that? I think in most cases appArtifact would represent the app root anyway.", "author": "aloubyansky", "createdAt": "2020-05-08T10:59:23Z", "path": "independent-projects/bootstrap/core/src/main/java/io/quarkus/bootstrap/app/QuarkusBootstrap.java", "diffHunk": "@@ -314,6 +314,10 @@ public Builder setDependenciesOrigin(DependenciesOrigin dependenciesOrigin) {\n             return this;\n         }\n \n+        /**\n+         * The app artifact. Note that if you want to use this as the basis of the application\n+         * you must also explicitly set the application root to this artifacts paths.\n+         */", "originalCommit": "a44d6b79c2430d185045ba4425d77f5783ae674e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjE0MzYxNQ==", "url": "https://github.com/quarkusio/quarkus/pull/9139#discussion_r422143615", "bodyText": "TBH I don't know if we event should keep the app artifact concept. App roots == classes, project root == dependency metadata, so I don't know if we can remove this concept and just add anything else it provides as explicit metadata.", "author": "stuartwdouglas", "createdAt": "2020-05-08T13:30:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjA4MDYyMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjE0ODM2Nw==", "url": "https://github.com/quarkusio/quarkus/pull/9139#discussion_r422148367", "bodyText": "There is a special case. In the platform we import the test JARs, in which case we need the app artifact to resolve its dependencies aligning them with the platform BOM.", "author": "aloubyansky", "createdAt": "2020-05-08T13:39:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjA4MDYyMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ2ODA3Mw==", "url": "https://github.com/quarkusio/quarkus/pull/9139#discussion_r422468073", "bodyText": "Here is what I'm thinking. We shouldn't be setting projectRoot at all anywhere. The refactoring I previously did introduced BootstrapMavenContext which figures it out anyway if workspace discovery is enabled and it's necessary. So I think unless a test creates a custom workspace at a tmp location, I don't think we need to be setting projectRoot explicitly. I can check whether it breaks somewhere.\nWith the projectRoot out, we are left with the classes and resources output dirs and the app artifact. Which is already a lot better.\nWhen we run the platform TS or re-building the app from the JAR (version updates, etc, which is not yet a real use-case but prototyped) all that will be coming from the app artifact. My preference would be to have the app artifact as the default source of the app classes and resources. Wit the possibility to override.\nI agree that we shouldn't not be probably treating the app root artifact differently than the other user deps. But I think it'll require some work.\nIf you like I can look into this after #9099 has been merged. I think it's ready now.", "author": "aloubyansky", "createdAt": "2020-05-09T08:14:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjA4MDYyMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM5NTAwMw==", "url": "https://github.com/quarkusio/quarkus/pull/9139#discussion_r423395003", "bodyText": "We have 3 different uses that do create code in a tmp dir, so we definitely still need the concept.\nWhat do we actually take from the app artifact? We use its classes and resources, but this is covered by the application root. If the only other thing that it provides is dependency metadata then this is basically similar to the project root.\nIn a lot of our cases (e.g. tests, dev mode) there is no app artifact, so IMHO it should not be the default.\nMaybe you are allowed to either call setApplicationRoot()and setProjectRoot() or you can call setAppArtifact(), but not both in the same bootstrap?\nI just want it to be completely unambiguous where everything comes from.", "author": "stuartwdouglas", "createdAt": "2020-05-12T00:29:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjA4MDYyMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA2NTU2NA==", "url": "https://github.com/quarkusio/quarkus/pull/9139#discussion_r424065564", "bodyText": "Maybe you are allowed to either call setApplicationRoot()and setProjectRoot() or you can call setAppArtifact(), but not both in the same bootstrap?\n\nI agree with the direction this is going. Setting the project root should be redundant though now, as i previosly mentioned. Although you if you prefer setting it explicitly, that's not a problem.\nThere is still a special case though when we integrate external test jars into the platform. In this case there is an app artifact but we still use the context of the platform project to manage the dependency versions of the test app and other maven config. Although that could probably be viewed as an empty jar pom-only project with a dep on the app to be tested. In fact, that's what it is. So, I guess, it should work.", "author": "aloubyansky", "createdAt": "2020-05-12T22:16:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjA4MDYyMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA2NjY4Mg==", "url": "https://github.com/quarkusio/quarkus/pull/9139#discussion_r424066682", "bodyText": "I meant the empty jar frpm the traditional maven project config perspective. We'd still have to build an executable for it.", "author": "aloubyansky", "createdAt": "2020-05-12T22:19:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjA4MDYyMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjA4MTA3Mg==", "url": "https://github.com/quarkusio/quarkus/pull/9139#discussion_r422081072", "bodyText": "This may break external extensions.", "author": "aloubyansky", "createdAt": "2020-05-08T11:00:33Z", "path": "core/deployment/src/main/java/io/quarkus/deployment/builditem/AdditionalApplicationArchiveBuildItem.java", "diffHunk": "@@ -1,21 +1,20 @@\n package io.quarkus.deployment.builditem;\n \n-import java.nio.file.Path;\n-\n+import io.quarkus.bootstrap.model.PathsCollection;\n import io.quarkus.builder.item.MultiBuildItem;\n \n /**\n  * An additional application archive\n  */\n public final class AdditionalApplicationArchiveBuildItem extends MultiBuildItem {\n \n-    private final Path path;\n+    private final PathsCollection path;\n \n-    public AdditionalApplicationArchiveBuildItem(Path path) {\n+    public AdditionalApplicationArchiveBuildItem(PathsCollection path) {\n         this.path = path;\n     }\n \n-    public Path getPath() {\n+    public PathsCollection getPath() {", "originalCommit": "a44d6b79c2430d185045ba4425d77f5783ae674e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM5NTEwNA==", "url": "https://github.com/quarkusio/quarkus/pull/9139#discussion_r423395104", "bodyText": "I changed it to getPaths and added a deprecated method", "author": "stuartwdouglas", "createdAt": "2020-05-12T00:29:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjA4MTA3Mg=="}], "type": "inlineReview"}, {"oid": "3c345acab5c79f82478063e12b1657ede711352f", "url": "https://github.com/quarkusio/quarkus/commit/3c345acab5c79f82478063e12b1657ede711352f", "message": "Clean up bootstrap path handling", "committedDate": "2020-05-11T02:56:01Z", "type": "forcePushed"}, {"oid": "c49666bffb77802b3eedf5bea0d1913eab7df7e5", "url": "https://github.com/quarkusio/quarkus/commit/c49666bffb77802b3eedf5bea0d1913eab7df7e5", "message": "Add support for live reload when launching from IDE", "committedDate": "2020-05-12T05:20:25Z", "type": "forcePushed"}, {"oid": "c19bba679fd8a7067a1e477318e34dbf07642955", "url": "https://github.com/quarkusio/quarkus/commit/c19bba679fd8a7067a1e477318e34dbf07642955", "message": "Add support for live reload when launching from IDE", "committedDate": "2020-05-12T05:33:57Z", "type": "forcePushed"}, {"oid": "c176d9f8676d2dc4132ed39db13fbca9a5df5b80", "url": "https://github.com/quarkusio/quarkus/commit/c176d9f8676d2dc4132ed39db13fbca9a5df5b80", "message": "Add support for live reload when launching from IDE", "committedDate": "2020-05-12T08:00:28Z", "type": "forcePushed"}, {"oid": "8454f47b0951f3376dde4f983b5df515ddbe5cf5", "url": "https://github.com/quarkusio/quarkus/commit/8454f47b0951f3376dde4f983b5df515ddbe5cf5", "message": "Add support for live reload when launching from IDE", "committedDate": "2020-05-12T08:39:44Z", "type": "forcePushed"}, {"oid": "b2b4cc40153972be19bc07f5b46150e1183dc426", "url": "https://github.com/quarkusio/quarkus/commit/b2b4cc40153972be19bc07f5b46150e1183dc426", "message": "Add support for live reload when launching from IDE", "committedDate": "2020-05-13T01:35:42Z", "type": "forcePushed"}, {"oid": "4e2f04f94221aae58811f4fffc9620398a68e63d", "url": "https://github.com/quarkusio/quarkus/commit/4e2f04f94221aae58811f4fffc9620398a68e63d", "message": "Add support for live reload when launching from IDE", "committedDate": "2020-05-13T04:54:40Z", "type": "forcePushed"}, {"oid": "4b6fb380246de2faeb90b0ea2bb21383268564db", "url": "https://github.com/quarkusio/quarkus/commit/4b6fb380246de2faeb90b0ea2bb21383268564db", "message": "Add support for live reload when launching from IDE", "committedDate": "2020-05-13T06:52:14Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE4MjM0MA==", "url": "https://github.com/quarkusio/quarkus/pull/9139#discussion_r424182340", "bodyText": "I'll need to check whether it's safe to assume the file is always available and exists.", "author": "aloubyansky", "createdAt": "2020-05-13T05:34:16Z", "path": "devtools/maven/src/main/java/io/quarkus/maven/BuildMojo.java", "diffHunk": "@@ -169,10 +170,10 @@ public void execute() throws MojoExecutionException {\n             final AppArtifact appArtifact = new AppArtifact(projectArtifact.getGroupId(), projectArtifact.getArtifactId(),\n                     projectArtifact.getClassifier(), projectArtifact.getArtifactHandler().getExtension(),\n                     projectArtifact.getVersion());\n+            appArtifact.setPaths(PathsCollection.of(projectArtifact.getFile().toPath()));", "originalCommit": "4e2f04f94221aae58811f4fffc9620398a68e63d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDIzMjYyNg==", "url": "https://github.com/quarkusio/quarkus/pull/9139#discussion_r424232626", "bodyText": "So, the test paths are now expected to be among the app root paths, correct?", "author": "aloubyansky", "createdAt": "2020-05-13T07:37:51Z", "path": "independent-projects/bootstrap/core/src/main/java/io/quarkus/bootstrap/app/CuratedApplication.java", "diffHunk": "@@ -208,28 +208,20 @@ public synchronized QuarkusClassLoader getBaseRuntimeClassLoader() {\n                 //in test mode we have everything in the base class loader\n                 //there is no need to restart so there is no need for an additional CL\n \n-                for (AdditionalDependency i : quarkusBootstrap.getAdditionalApplicationArchives()) {\n-                    //src/test is the highest priority\n-                    if (i.isTestClassRoot()) {", "originalCommit": "4b6fb380246de2faeb90b0ea2bb21383268564db", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDc4MDQzNg==", "url": "https://github.com/quarkusio/quarkus/pull/9139#discussion_r424780436", "bodyText": "Yes, there is no special case handling for them any more, they are just installed first so their application.properties takes precidence.", "author": "stuartwdouglas", "createdAt": "2020-05-13T23:05:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDIzMjYyNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDIzMzQ4Mg==", "url": "https://github.com/quarkusio/quarkus/pull/9139#discussion_r424233482", "bodyText": "I'll check whether this works for the platform TS. There is still a bit of a mess around these.", "author": "aloubyansky", "createdAt": "2020-05-13T07:39:24Z", "path": "independent-projects/bootstrap/core/src/main/java/io/quarkus/bootstrap/app/QuarkusBootstrap.java", "diffHunk": "@@ -127,8 +125,7 @@ public CuratedApplication bootstrap() throws BootstrapException {\n                 .setAppArtifact(appArtifact)\n                 .setManagingProject(managingProject)\n                 .setForcedDependencies(forcedDependencies)\n-                .setProjectRoot(getProjectRoot() != null ? getProjectRoot()\n-                        : getApplicationRoot());\n+                .setProjectRoot(getProjectRoot());", "originalCommit": "4b6fb380246de2faeb90b0ea2bb21383268564db", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDc4MDg1Nw==", "url": "https://github.com/quarkusio/quarkus/pull/9139#discussion_r424780857", "bodyText": "After this PR I want to get rid of the whole ProjectRoot thing and replace it with a more general MetadataSource concept. Getting IDE run to work in gradle is going to take some work, and this refactoring will be part of that. Lets discuss on zulip when you are around.", "author": "stuartwdouglas", "createdAt": "2020-05-13T23:07:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDIzMzQ4Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDIzNzg2OA==", "url": "https://github.com/quarkusio/quarkus/pull/9139#discussion_r424237868", "bodyText": "This needs to be checked whether it works for the platform TS.", "author": "aloubyansky", "createdAt": "2020-05-13T07:46:49Z", "path": "test-framework/junit5/src/main/java/io/quarkus/test/junit/QuarkusTestExtension.java", "diffHunk": "@@ -96,32 +96,30 @@ private ExtensionState doJavaStart(ExtensionContext context) throws Throwable {\n             testClassLocation = getTestClassesLocation(requiredTestClass);\n             final Path appClassLocation = getAppClassLocationForTestLocation(testClassLocation.toString());\n \n-            originalCl = Thread.currentThread().getContextClassLoader();\n-\n-            final QuarkusBootstrap.Builder runnerBuilder = QuarkusBootstrap.builder()\n-                    .setIsolateDeployment(true)\n-                    .setMode(QuarkusBootstrap.Mode.TEST);\n-\n-            if (Files.isDirectory(appClassLocation)) {\n-                // this is a project that is a part of the workspace\n-                runnerBuilder.setProjectRoot(Paths.get(\"\").normalize().toAbsolutePath());\n-            } else {\n-                // this is an external JAR\n-                runnerBuilder.setApplicationRoot(appClassLocation);\n-            }\n+            PathsCollection.Builder rootBuilder = PathsCollection.builder();\n \n             if (!appClassLocation.equals(testClassLocation)) {\n-                runnerBuilder.addAdditionalApplicationArchive(AdditionalDependency.test(testClassLocation));\n+                rootBuilder.add(testClassLocation);\n                 // if test classes is a dir, we should also check whether test resources dir exists as a separate dir (gradle)\n                 // TODO: this whole app/test path resolution logic is pretty dumb, it needs be re-worked using proper workspace discovery\n                 if (Files.isDirectory(testClassLocation)) {\n                     final Path testResourcesLocation = testClassLocation.getParent().getParent().getParent()\n                             .resolve(\"resources\").resolve(\"test\");\n                     if (Files.exists(testResourcesLocation)) {\n-                        runnerBuilder.addAdditionalApplicationArchive(AdditionalDependency.test(testResourcesLocation));\n+                        rootBuilder.add(testResourcesLocation);\n                     }\n                 }\n             }\n+            originalCl = Thread.currentThread().getContextClassLoader();\n+\n+            final QuarkusBootstrap.Builder runnerBuilder = QuarkusBootstrap.builder()\n+                    .setIsolateDeployment(true)\n+                    .setMode(QuarkusBootstrap.Mode.TEST);\n+\n+            runnerBuilder.setProjectRoot(Paths.get(\"\").normalize().toAbsolutePath());\n+\n+            rootBuilder.add(appClassLocation);\n+            runnerBuilder.setApplicationRoot(rootBuilder.build());", "originalCommit": "4b6fb380246de2faeb90b0ea2bb21383268564db", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDI5OTk2Ng==", "url": "https://github.com/quarkusio/quarkus/pull/9139#discussion_r424299966", "bodyText": "Here is a variant of the method that will keep the platform TS passing, given that the test paths are added first we are returning the last on the list\n    /**\n     * If this archive is a jar file it will return the path to the jar file on the file system,\n     * otherwise it will return the directory that this corresponds to.\n     *\n     * @deprecated in favor of {@link #getPaths()}\n     */\n    @Deprecated\n    public Path getArchiveLocation() {\n        final Iterator<Path> i = paths.iterator();\n        Path last = i.next();\n        while (i.hasNext()) {\n            last = i.next();\n        }\n        return last;\n    }", "author": "aloubyansky", "createdAt": "2020-05-13T09:27:20Z", "path": "core/deployment/src/main/java/io/quarkus/deployment/builditem/ArchiveRootBuildItem.java", "diffHunk": "@@ -98,17 +89,6 @@ private ArchiveRootBuildItem(Builder builder, QuarkusBuildCloseablesBuildItem bu\n         this.archiveRoot = this.rootDirs.iterator().next();\n     }\n \n-    /**\n-     * If this archive is a jar file it will return the path to the jar file on the file system,\n-     * otherwise it will return the directory that this corresponds to.\n-     *\n-     * @deprecated in favor of {@link #getPaths()}\n-     */\n-    @Deprecated\n-    public Path getArchiveLocation() {\n-        return archiveLocation;\n-    }\n-", "originalCommit": "4b6fb380246de2faeb90b0ea2bb21383268564db", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDMwOTQ1OA==", "url": "https://github.com/quarkusio/quarkus/pull/9139#discussion_r424309458", "bodyText": "The good thing is removing public Path getArchiveRoot() does not actually break the platform.", "author": "aloubyansky", "createdAt": "2020-05-13T09:42:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDI5OTk2Ng=="}], "type": "inlineReview"}, {"oid": "86e91c77ec152c5a84a1f9916110cd90bbd68451", "url": "https://github.com/quarkusio/quarkus/commit/86e91c77ec152c5a84a1f9916110cd90bbd68451", "message": "Clean up bootstrap path handling", "committedDate": "2020-05-13T23:13:12Z", "type": "commit"}, {"oid": "17b93c20ecf17c600a48d55028bd1ea5d428a557", "url": "https://github.com/quarkusio/quarkus/commit/17b93c20ecf17c600a48d55028bd1ea5d428a557", "message": "Add support for live reload when launching from IDE", "committedDate": "2020-05-13T23:13:19Z", "type": "commit"}, {"oid": "17b93c20ecf17c600a48d55028bd1ea5d428a557", "url": "https://github.com/quarkusio/quarkus/commit/17b93c20ecf17c600a48d55028bd1ea5d428a557", "message": "Add support for live reload when launching from IDE", "committedDate": "2020-05-13T23:13:19Z", "type": "forcePushed"}]}