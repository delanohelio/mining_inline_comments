{"pr_number": 6674, "pr_title": "Thread safety issues", "pr_createdAt": "2020-01-21T08:08:54Z", "pr_url": "https://github.com/quarkusio/quarkus/pull/6674", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODg2MTMzNA==", "url": "https://github.com/quarkusio/quarkus/pull/6674#discussion_r368861334", "bodyText": "Why do you remove the scope here? Since the produced EntityManagerFactory is dependent a new instance of this producer will be created for each EntityManagerFactory  injection point...", "author": "mkouba", "createdAt": "2020-01-21T08:22:40Z", "path": "extensions/hibernate-orm/runtime/src/main/java/io/quarkus/hibernate/orm/runtime/DefaultEntityManagerFactoryProducer.java", "diffHunk": "@@ -1,11 +1,9 @@\n package io.quarkus.hibernate.orm.runtime;\n \n import javax.enterprise.inject.Produces;\n-import javax.inject.Singleton;\n import javax.persistence.EntityManagerFactory;\n import javax.persistence.PersistenceUnit;\n \n-@Singleton", "originalCommit": "456e598cf6bd75f0078147d36d10c27d33e99d6d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODg3MTczOQ==", "url": "https://github.com/quarkusio/quarkus/pull/6674#discussion_r368871739", "bodyText": "I could have sworn the producer also had a scope on it, oops.", "author": "stuartwdouglas", "createdAt": "2020-01-21T08:48:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODg2MTMzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODg4OTkxNw==", "url": "https://github.com/quarkusio/quarkus/pull/6674#discussion_r368889917", "bodyText": "@mkouba are you good with the move of the annotation to the producer method? I would like to get this approved (I think all the changes make sense) and merged if CI passes.", "author": "geoand", "createdAt": "2020-01-21T09:27:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODg2MTMzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODg5NjgxNw==", "url": "https://github.com/quarkusio/quarkus/pull/6674#discussion_r368896817", "bodyText": "Looks good so +1 if CI passes ;-).", "author": "mkouba", "createdAt": "2020-01-21T09:41:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODg2MTMzNA=="}], "type": "inlineReview"}, {"oid": "e8b7aa33df76d05774d499e66569acc72c4ea754", "url": "https://github.com/quarkusio/quarkus/commit/e8b7aa33df76d05774d499e66569acc72c4ea754", "message": "Fix lots of other thread safety issues", "committedDate": "2020-01-21T08:48:30Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODg3MjYxNA==", "url": "https://github.com/quarkusio/quarkus/pull/6674#discussion_r368872614", "bodyText": "So I assume this is the part that actually fixes #6608?", "author": "geoand", "createdAt": "2020-01-21T08:50:34Z", "path": "extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/DefaultTenantConfigResolver.java", "diffHunk": "@@ -20,9 +20,9 @@\n     @Inject\n     Instance<TenantConfigResolver> tenantConfigResolver;\n \n-    private Map<String, TenantConfigContext> tenantsConfig;\n-    private TenantConfigContext defaultTenant;\n-    private Function<OidcTenantConfig, TenantConfigContext> tenantConfigContextFactory;\n+    private volatile Map<String, TenantConfigContext> tenantsConfig;\n+    private volatile TenantConfigContext defaultTenant;\n+    private volatile Function<OidcTenantConfig, TenantConfigContext> tenantConfigContextFactory;", "originalCommit": "e8b7aa33df76d05774d499e66569acc72c4ea754", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODg3OTczOQ==", "url": "https://github.com/quarkusio/quarkus/pull/6674#discussion_r368879739", "bodyText": "I hope so. Without this the HTTP thread could read incorrect config, so was likely missing the principalClaim. This is the only explanation I can see for the type of failure we are seeing.", "author": "stuartwdouglas", "createdAt": "2020-01-21T09:06:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODg3MjYxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODg4MDg3Nw==", "url": "https://github.com/quarkusio/quarkus/pull/6674#discussion_r368880877", "bodyText": "I see, thanks for the explanation. Let's see what CI thinks :)", "author": "geoand", "createdAt": "2020-01-21T09:08:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODg3MjYxNA=="}], "type": "inlineReview"}, {"oid": "530a40f8b2f55e3f8e94bc3da1c2ee43b9ddb9eb", "url": "https://github.com/quarkusio/quarkus/commit/530a40f8b2f55e3f8e94bc3da1c2ee43b9ddb9eb", "message": "Revert \"Disable OIDC principal claim test\"\n\nThis reverts commit a720ff79ea92573f7ae33e3edda28e5b1eb41526.", "committedDate": "2020-01-21T10:59:58Z", "type": "commit"}, {"oid": "3c2cb0d8afd39e60f5dfc1fe601a75f32f2a8b0b", "url": "https://github.com/quarkusio/quarkus/commit/3c2cb0d8afd39e60f5dfc1fe601a75f32f2a8b0b", "message": "Make DefaultTenantConfigResolver thread safe\n\nDefaultTenantConfigResolver is initialized from a recorder,\nand it is likely that this recorder runs after the creation\nof the vert.x web threads. This means that there is no\nhappens-before relationship between the writes to the fields,\nso it is undefined what state initial threads might see.\n\nFixes #6608", "committedDate": "2020-01-21T10:59:58Z", "type": "commit"}, {"oid": "d53b7e96d9ffa4ba74d8613fe15fb249f146e065", "url": "https://github.com/quarkusio/quarkus/commit/d53b7e96d9ffa4ba74d8613fe15fb249f146e065", "message": "Fix lots of other thread safety issues", "committedDate": "2020-01-21T11:01:49Z", "type": "commit"}, {"oid": "d53b7e96d9ffa4ba74d8613fe15fb249f146e065", "url": "https://github.com/quarkusio/quarkus/commit/d53b7e96d9ffa4ba74d8613fe15fb249f146e065", "message": "Fix lots of other thread safety issues", "committedDate": "2020-01-21T11:01:49Z", "type": "forcePushed"}]}