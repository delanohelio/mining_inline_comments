{"pr_number": 7733, "pr_title": "Qute enhancements", "pr_createdAt": "2020-03-10T13:55:40Z", "pr_url": "https://github.com/quarkusio/quarkus/pull/7733", "timeline": [{"oid": "c7d105653826f5892215aef509885dc7ac721c59", "url": "https://github.com/quarkusio/quarkus/commit/c7d105653826f5892215aef509885dc7ac721c59", "message": "Tests for checked templates", "committedDate": "2020-03-10T14:59:07Z", "type": "forcePushed"}, {"oid": "6b6b195bf2d57cde907d3529d33998e6b33ffe1e", "url": "https://github.com/quarkusio/quarkus/commit/6b6b195bf2d57cde907d3529d33998e6b33ffe1e", "message": "Added support for native method variant", "committedDate": "2020-04-21T14:56:43Z", "type": "forcePushed"}, {"oid": "04c932cdf93cab95d5dd4fcdd632847db396b43b", "url": "https://github.com/quarkusio/quarkus/commit/04c932cdf93cab95d5dd4fcdd632847db396b43b", "message": "For some reason, the tests don't pass if I don't explicitely add this config", "committedDate": "2020-05-19T09:18:49Z", "type": "forcePushed"}, {"oid": "b5e26b311cd815380ac88874e1b7bc18fef84f53", "url": "https://github.com/quarkusio/quarkus/commit/b5e26b311cd815380ac88874e1b7bc18fef84f53", "message": "Support native methods for mail templates, check native method return types", "committedDate": "2020-05-26T15:59:32Z", "type": "forcePushed"}, {"oid": "32618a78acb45923e692efc971b818a1fc3e4949", "url": "https://github.com/quarkusio/quarkus/commit/32618a78acb45923e692efc971b818a1fc3e4949", "message": "Backport #9635 since I've moved JandexUtil into AsmUtil", "committedDate": "2020-05-27T14:18:31Z", "type": "forcePushed"}, {"oid": "99e180ccf7432ea3b9a99cb698587ed0450bd708", "url": "https://github.com/quarkusio/quarkus/commit/99e180ccf7432ea3b9a99cb698587ed0450bd708", "message": "Documented the new type-safe native methods", "committedDate": "2020-05-28T12:26:39Z", "type": "forcePushed"}, {"oid": "4daf855e9a474b72c080d6084a47407e9490aac9", "url": "https://github.com/quarkusio/quarkus/commit/4daf855e9a474b72c080d6084a47407e9490aac9", "message": "Documented the new type-safe native methods", "committedDate": "2020-06-03T14:29:44Z", "type": "forcePushed"}, {"oid": "618fc07f3c31428fbe71c0cf042ae9a23ccae6d3", "url": "https://github.com/quarkusio/quarkus/commit/618fc07f3c31428fbe71c0cf042ae9a23ccae6d3", "message": "Documented the new type-safe native methods", "committedDate": "2020-06-11T09:23:16Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODY5Mjg2MQ==", "url": "https://github.com/quarkusio/quarkus/pull/7733#discussion_r438692861", "bodyText": "This should be probably return Templates.item(service.findItem(id));, or?", "author": "mkouba", "createdAt": "2020-06-11T10:33:15Z", "path": "docs/src/main/asciidoc/qute.adoc", "diffHunk": "@@ -99,9 +202,69 @@ public class Item {\n }\n ----\n \n-And we'd like to render a simple HTML page that contains the item name, price and also a discounted price.\n-The discounted price is sometimes called a \"computed property\".\n-We will implement a template extension method to render this property easily.\n+And we'd like to render a simple HTML page that contains the item name and price.\n+\n+Let's start again with the template:\n+\n+.ItemResource/item.html\n+[source,html]\n+----\n+<!DOCTYPE html>\n+<html>\n+<head>\n+<meta charset=\"UTF-8\">\n+<title>{item.name}</title> <1>\n+</head>\n+<body>\n+    <h1>{item.name}</h1>\n+    <div>Price: {item.price}</div> <2> \n+</body>\n+</html>\n+----\n+<1> This expression is validated. Try to change the expression to `{item.nonSense}` and the build should fail.\n+<2> This is also validated.\n+\n+Finally, let's create a resource class with type-safe templates:\n+\n+.ItemResource.java\n+[source,java]\n+----\n+package org.acme.quarkus.sample;\n+\n+import javax.inject.Inject;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+\n+import io.quarkus.qute.TemplateInstance;\n+import io.quarkus.qute.Template;\n+import io.quarkus.qute.api.CheckedTemplate;\n+\n+@Path(\"item\")\n+public class ItemResource {\n+\n+    @CheckedTemplate\n+    class Templates {\n+        public static native TemplateInstance item(Item item); <1>\n+    }\n+\n+    @GET\n+    @Path(\"{id}\")\n+    @Produces(MediaType.TEXT_HTML)\n+    public TemplateInstance get(@PathParam(\"id\") Integer id) {\n+        return Templates.item(\"item\", service.findItem(id)); <2>", "originalCommit": "618fc07f3c31428fbe71c0cf042ae9a23ccae6d3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDY5MDc4OA==", "url": "https://github.com/quarkusio/quarkus/pull/7733#discussion_r440690788", "bodyText": "Ouch.", "author": "FroMage", "createdAt": "2020-06-16T08:50:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODY5Mjg2MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODY5MzA5Mw==", "url": "https://github.com/quarkusio/quarkus/pull/7733#discussion_r438693093", "bodyText": "Alternately -> Alternatively", "author": "mkouba", "createdAt": "2020-06-11T10:33:48Z", "path": "docs/src/main/asciidoc/qute.adoc", "diffHunk": "@@ -99,9 +202,69 @@ public class Item {\n }\n ----\n \n-And we'd like to render a simple HTML page that contains the item name, price and also a discounted price.\n-The discounted price is sometimes called a \"computed property\".\n-We will implement a template extension method to render this property easily.\n+And we'd like to render a simple HTML page that contains the item name and price.\n+\n+Let's start again with the template:\n+\n+.ItemResource/item.html\n+[source,html]\n+----\n+<!DOCTYPE html>\n+<html>\n+<head>\n+<meta charset=\"UTF-8\">\n+<title>{item.name}</title> <1>\n+</head>\n+<body>\n+    <h1>{item.name}</h1>\n+    <div>Price: {item.price}</div> <2> \n+</body>\n+</html>\n+----\n+<1> This expression is validated. Try to change the expression to `{item.nonSense}` and the build should fail.\n+<2> This is also validated.\n+\n+Finally, let's create a resource class with type-safe templates:\n+\n+.ItemResource.java\n+[source,java]\n+----\n+package org.acme.quarkus.sample;\n+\n+import javax.inject.Inject;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+\n+import io.quarkus.qute.TemplateInstance;\n+import io.quarkus.qute.Template;\n+import io.quarkus.qute.api.CheckedTemplate;\n+\n+@Path(\"item\")\n+public class ItemResource {\n+\n+    @CheckedTemplate\n+    class Templates {\n+        public static native TemplateInstance item(Item item); <1>\n+    }\n+\n+    @GET\n+    @Path(\"{id}\")\n+    @Produces(MediaType.TEXT_HTML)\n+    public TemplateInstance get(@PathParam(\"id\") Integer id) {\n+        return Templates.item(\"item\", service.findItem(id)); <2>\n+    }\n+}\n+----\n+<1> Declare a method that gives us a `TemplateInstance` for `templates/ItemResource/item.html` and declare its `Item item` parameter so we can validate the template.\n+<2> Make the `Item` object accessible in the template.\n+\n+=== Template parameter declaration inside the template itself\n+\n+Alternately, you can declare your template parameters in the template file itself.", "originalCommit": "618fc07f3c31428fbe71c0cf042ae9a23ccae6d3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDY5MTQxMg==", "url": "https://github.com/quarkusio/quarkus/pull/7733#discussion_r440691412", "bodyText": "It does exist, but seems to be an American word. Fixed.", "author": "FroMage", "createdAt": "2020-06-16T08:51:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODY5MzA5Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODY5NDg0OQ==", "url": "https://github.com/quarkusio/quarkus/pull/7733#discussion_r438694849", "bodyText": "We should add some javadoc here...", "author": "mkouba", "createdAt": "2020-06-11T10:37:31Z", "path": "extensions/qute/runtime/src/main/java/io/quarkus/qute/api/CheckedTemplate.java", "diffHunk": "@@ -0,0 +1,14 @@\n+package io.quarkus.qute.api;\n+\n+import java.lang.annotation.Documented;\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+@Documented\n+@Retention(RetentionPolicy.RUNTIME)\n+@Target(ElementType.TYPE)\n+public @interface CheckedTemplate {", "originalCommit": "618fc07f3c31428fbe71c0cf042ae9a23ccae6d3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDcwMzMxMw==", "url": "https://github.com/quarkusio/quarkus/pull/7733#discussion_r440703313", "bodyText": "Indeed.", "author": "FroMage", "createdAt": "2020-06-16T09:10:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODY5NDg0OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODY5Nzk0Nw==", "url": "https://github.com/quarkusio/quarkus/pull/7733#discussion_r438697947", "bodyText": "I'm not sure about the name... maybe just RestTemplate? IDK maybe it's OK. But it should reside in the io.quarkus.resteasy.qute package as it's a public API. Plus it wouldn't hurt to make it final with a private constructor.", "author": "mkouba", "createdAt": "2020-06-11T10:44:22Z", "path": "extensions/resteasy-qute/runtime/src/main/java/io/quarkus/resteasy/qute/runtime/ResteasyTemplate.java", "diffHunk": "@@ -0,0 +1,28 @@\n+package io.quarkus.resteasy.qute.runtime;\n+\n+import javax.ws.rs.container.ResourceInfo;\n+\n+import org.jboss.resteasy.core.ResteasyContext;\n+\n+import io.quarkus.arc.Arc;\n+import io.quarkus.qute.Engine;\n+import io.quarkus.qute.Template;\n+import io.quarkus.qute.TemplateInstance;\n+\n+public class ResteasyTemplate {", "originalCommit": "618fc07f3c31428fbe71c0cf042ae9a23ccae6d3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDcyNDQwNA==", "url": "https://github.com/quarkusio/quarkus/pull/7733#discussion_r440724404", "bodyText": "OK changed.", "author": "FroMage", "createdAt": "2020-06-16T09:45:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODY5Nzk0Nw=="}], "type": "inlineReview"}, {"oid": "3cfecf3f2e684bca8d373bbe3fbb13f198417be5", "url": "https://github.com/quarkusio/quarkus/commit/3cfecf3f2e684bca8d373bbe3fbb13f198417be5", "message": "PR comment fixes", "committedDate": "2020-06-16T09:44:46Z", "type": "forcePushed"}, {"oid": "7917f25e963ddc7e44363400f2dfd59fc00d79a1", "url": "https://github.com/quarkusio/quarkus/commit/7917f25e963ddc7e44363400f2dfd59fc00d79a1", "message": "Qute: add parser hook to set up parser before it parses", "committedDate": "2020-06-17T14:46:36Z", "type": "commit"}, {"oid": "7917f25e963ddc7e44363400f2dfd59fc00d79a1", "url": "https://github.com/quarkusio/quarkus/commit/7917f25e963ddc7e44363400f2dfd59fc00d79a1", "message": "Qute: add parser hook to set up parser before it parses", "committedDate": "2020-06-17T14:46:36Z", "type": "forcePushed"}]}