{"pr_number": 7351, "pr_title": "Update JWT guide with the builder API intro and fix some typos", "pr_createdAt": "2020-02-21T23:28:03Z", "pr_url": "https://github.com/quarkusio/quarkus/pull/7351", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg3Nzk4NQ==", "url": "https://github.com/quarkusio/quarkus/pull/7351#discussion_r382877985", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            |smallrye.jwt.time-to-live|none|The maximum number of seconds that a JWT may be issued for use. Effectively, the difference  between the expiration date of the JWT and the issued at date must not exceed this value.\n          \n          \n            \n            |smallrye.jwt.time-to-live|none|The maximum number of seconds that a JWT may be issued for use. Effectively, the difference between the expiration date of the JWT and the issued at date must not exceed this value.", "author": "gastaldi", "createdAt": "2020-02-22T02:24:42Z", "path": "docs/src/main/asciidoc/security-jwt.adoc", "diffHunk": "@@ -948,13 +948,106 @@ Smallrye JWT provides more properties which can be used to customize the token p\n |smallrye.jwt.token.header|`Authorization`|Set this property if another header such as `Cookie` is used to pass the token.\n |smallrye.jwt.token.cookie|none|Name of the cookie containing a token. This property will be effective only if  `smallrye.jwt.token.header` is set to `Cookie`.\n |smallrye.jwt.token.schemes|`Bearer`|Comma-separated list containing an alternative single or multiple schemes, for example, `DPoP`.\n+|smallrye.jwt.token.kid|none|Key identifier. If it is set then the verification JWK key as well every JWT token must have a matching 'kid' header.\n+|smallrye.jwt.time-to-live|none|The maximum number of seconds that a JWT may be issued for use. Effectively, the difference  between the expiration date of the JWT and the issued at date must not exceed this value.", "originalCommit": "d2161bc19020561d2e575580b95cece578203554", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg3ODAyOA==", "url": "https://github.com/quarkusio/quarkus/pull/7351#discussion_r382878028", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Signing the claims is used most ofthen to secure the claims. What is known today as a JWT token is typically produced by signing the claims in a JSON format using the steps described in the `JSON Web Signature RFC7515` specification.\n          \n          \n            \n            Signing the claims is used most often to secure the claims. What is known today as a JWT token is typically produced by signing the claims in a JSON format using the steps described in the `JSON Web Signature RFC7515` specification.", "author": "gastaldi", "createdAt": "2020-02-22T02:25:14Z", "path": "docs/src/main/asciidoc/security-jwt.adoc", "diffHunk": "@@ -948,13 +948,106 @@ Smallrye JWT provides more properties which can be used to customize the token p\n |smallrye.jwt.token.header|`Authorization`|Set this property if another header such as `Cookie` is used to pass the token.\n |smallrye.jwt.token.cookie|none|Name of the cookie containing a token. This property will be effective only if  `smallrye.jwt.token.header` is set to `Cookie`.\n |smallrye.jwt.token.schemes|`Bearer`|Comma-separated list containing an alternative single or multiple schemes, for example, `DPoP`.\n+|smallrye.jwt.token.kid|none|Key identifier. If it is set then the verification JWK key as well every JWT token must have a matching 'kid' header.\n+|smallrye.jwt.time-to-live|none|The maximum number of seconds that a JWT may be issued for use. Effectively, the difference  between the expiration date of the JWT and the issued at date must not exceed this value.\n |smallrye.jwt.require.named-principal|`false`|If an application relies on `java.security.Principal` returning a name then a token must have a `upn` or `preferred_username` or `sub` claim set. Setting this property will result in Smallrye JWT throwing an exception if none of these claims is available for the application code to reliably deal with a non-null `Principal` name.\n |smallrye.jwt.path.sub|none|Path to the claim containing the subject name. It starts from the top level JSON object and can contain multiple segments where each segment represents a JSON object name only, example: `realms/subject`. This property can be used if a token has no 'sub' claim but has the subject set in a different claim. Use double quotes with the namespace qualified claims.\n |smallrye.jwt.claims.sub|none| This property can be used to set a default sub claim value when the current token has no standard or custom `sub` claim available. Effectively this property can be used to customize `java.security.Principal` name if no `upn` or `preferred_username` or `sub` claim is set.\n |smallrye.jwt.path.groups|none|Path to the claim containing the groups. It starts from the top level JSON object and can contain multiple segments where each segment represents a JSON object name only, example: `realm/groups`. This property can be used if a token has no 'groups' claim but has the groups set in a different claim. Use double quotes with the namespace qualified claims.\n-|smallrye.jwt.path.groups-separator|` `|Separator for splitting a string which may contain multiple group values. It will only be used if the `smallrye.jwt.path.groups` property points to a custom claim whose value is a string. The default value is a single space because a standard OAuth2 `scope` claim may contain a space separated sequence.\n+|smallrye.jwt.groups-separator|' '|Separator for splitting a string which may contain multiple group values. It will only be used if the `smallrye.jwt.path.groups` property points to a custom claim whose value is a string. The default value is a single space because a standard OAuth2 `scope` claim may contain a space separated sequence.\n |smallrye.jwt.claims.groups|none| This property can be used to set a default groups claim value when the current token has no standard or custom groups claim available.\n-|smallrye.jwt.jwk.refresh-interval|60|JWK cache refresh interval in minutes. It will be ignored unless the `mp.jwt.verify.publickey.location` points to the HTTPS URL based JWK set and no HTTP `Cache-Control` response header with a positive `max-age` parameter value is returned from a JWK HTTPS endpoint.\n+|smallrye.jwt.jwks.refresh-interval|60|JWK cache refresh interval in minutes. It will be ignored unless the `mp.jwt.verify.publickey.location` points to the HTTPS URL based JWK set and no HTTP `Cache-Control` response header with a positive `max-age` parameter value is returned from a JWK HTTPS endpoint.\n |smallrye.jwt.expiration.grace|60|Expiration grace in seconds. By default an expired token will still be accepted if the current time is no more than 1 min after the token expiry time.\n-|smallrye.jwt.verify.audience|none|Comma separated list of the audiences that a token `aud` claim may contain.\n+|smallrye.jwt.verify.aud|none|Comma separated list of the audiences that a token `aud` claim may contain.\n |===\n+\n+== Generate JWT tokens with Smallrye JWT\n+\n+JWT claims can be signed or encrypted or signed first and the nested JWT token - encrypted.\n+Signing the claims is used most ofthen to secure the claims. What is known today as a JWT token is typically produced by signing the claims in a JSON format using the steps described in the `JSON Web Signature RFC7515` specification.", "originalCommit": "d2161bc19020561d2e575580b95cece578203554", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg3ODA0Mw==", "url": "https://github.com/quarkusio/quarkus/pull/7351#discussion_r382878043", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            However, when the claims are sensitive, their confidenatiality can be guaranteed by following the steps described in the `JSON Web Encryption RFC7516` specification to produce a JWT token with the encrypted claims.\n          \n          \n            \n            However, when the claims are sensitive, their confidentiality can be guaranteed by following the steps described in the `JSON Web Encryption RFC7516` specification to produce a JWT token with the encrypted claims.", "author": "gastaldi", "createdAt": "2020-02-22T02:25:33Z", "path": "docs/src/main/asciidoc/security-jwt.adoc", "diffHunk": "@@ -948,13 +948,106 @@ Smallrye JWT provides more properties which can be used to customize the token p\n |smallrye.jwt.token.header|`Authorization`|Set this property if another header such as `Cookie` is used to pass the token.\n |smallrye.jwt.token.cookie|none|Name of the cookie containing a token. This property will be effective only if  `smallrye.jwt.token.header` is set to `Cookie`.\n |smallrye.jwt.token.schemes|`Bearer`|Comma-separated list containing an alternative single or multiple schemes, for example, `DPoP`.\n+|smallrye.jwt.token.kid|none|Key identifier. If it is set then the verification JWK key as well every JWT token must have a matching 'kid' header.\n+|smallrye.jwt.time-to-live|none|The maximum number of seconds that a JWT may be issued for use. Effectively, the difference  between the expiration date of the JWT and the issued at date must not exceed this value.\n |smallrye.jwt.require.named-principal|`false`|If an application relies on `java.security.Principal` returning a name then a token must have a `upn` or `preferred_username` or `sub` claim set. Setting this property will result in Smallrye JWT throwing an exception if none of these claims is available for the application code to reliably deal with a non-null `Principal` name.\n |smallrye.jwt.path.sub|none|Path to the claim containing the subject name. It starts from the top level JSON object and can contain multiple segments where each segment represents a JSON object name only, example: `realms/subject`. This property can be used if a token has no 'sub' claim but has the subject set in a different claim. Use double quotes with the namespace qualified claims.\n |smallrye.jwt.claims.sub|none| This property can be used to set a default sub claim value when the current token has no standard or custom `sub` claim available. Effectively this property can be used to customize `java.security.Principal` name if no `upn` or `preferred_username` or `sub` claim is set.\n |smallrye.jwt.path.groups|none|Path to the claim containing the groups. It starts from the top level JSON object and can contain multiple segments where each segment represents a JSON object name only, example: `realm/groups`. This property can be used if a token has no 'groups' claim but has the groups set in a different claim. Use double quotes with the namespace qualified claims.\n-|smallrye.jwt.path.groups-separator|` `|Separator for splitting a string which may contain multiple group values. It will only be used if the `smallrye.jwt.path.groups` property points to a custom claim whose value is a string. The default value is a single space because a standard OAuth2 `scope` claim may contain a space separated sequence.\n+|smallrye.jwt.groups-separator|' '|Separator for splitting a string which may contain multiple group values. It will only be used if the `smallrye.jwt.path.groups` property points to a custom claim whose value is a string. The default value is a single space because a standard OAuth2 `scope` claim may contain a space separated sequence.\n |smallrye.jwt.claims.groups|none| This property can be used to set a default groups claim value when the current token has no standard or custom groups claim available.\n-|smallrye.jwt.jwk.refresh-interval|60|JWK cache refresh interval in minutes. It will be ignored unless the `mp.jwt.verify.publickey.location` points to the HTTPS URL based JWK set and no HTTP `Cache-Control` response header with a positive `max-age` parameter value is returned from a JWK HTTPS endpoint.\n+|smallrye.jwt.jwks.refresh-interval|60|JWK cache refresh interval in minutes. It will be ignored unless the `mp.jwt.verify.publickey.location` points to the HTTPS URL based JWK set and no HTTP `Cache-Control` response header with a positive `max-age` parameter value is returned from a JWK HTTPS endpoint.\n |smallrye.jwt.expiration.grace|60|Expiration grace in seconds. By default an expired token will still be accepted if the current time is no more than 1 min after the token expiry time.\n-|smallrye.jwt.verify.audience|none|Comma separated list of the audiences that a token `aud` claim may contain.\n+|smallrye.jwt.verify.aud|none|Comma separated list of the audiences that a token `aud` claim may contain.\n |===\n+\n+== Generate JWT tokens with Smallrye JWT\n+\n+JWT claims can be signed or encrypted or signed first and the nested JWT token - encrypted.\n+Signing the claims is used most ofthen to secure the claims. What is known today as a JWT token is typically produced by signing the claims in a JSON format using the steps described in the `JSON Web Signature RFC7515` specification.\n+However, when the claims are sensitive, their confidenatiality can be guaranteed by following the steps described in the `JSON Web Encryption RFC7516` specification to produce a JWT token with the encrypted claims.", "originalCommit": "d2161bc19020561d2e575580b95cece578203554", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg3ODA3MQ==", "url": "https://github.com/quarkusio/quarkus/pull/7351#discussion_r382878071", "bodyText": "Also a link to the JSON Web Encryption RFC7516 spec would be nice\nEDIT: I just noticed the links in the reference footer", "author": "gastaldi", "createdAt": "2020-02-22T02:25:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg3ODA0Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjkwNDkxOQ==", "url": "https://github.com/quarkusio/quarkus/pull/7351#discussion_r382904919", "bodyText": "Please use an id to make the link. If you change the title, the link will be broken.", "author": "gsmet", "createdAt": "2020-02-22T11:05:07Z", "path": "docs/src/main/asciidoc/security-jwt.adoc", "diffHunk": "@@ -298,7 +298,7 @@ nQIDAQAB\n \n === Generating a JWT\n \n-Often one obtains a JWT from an identity manager like https://www.keycloak.org/[Keycloak], but for this quickstart we will generate our own using the JWT generation API provided by `smallrye-jwt` and the TokenUtils class shown in the following listing. Take this source and place it into `security-jwt-quickstart/src/test/java/org/acme/jwt/TokenUtils.java`.\n+Often one obtains a JWT from an identity manager like https://www.keycloak.org/[Keycloak], but for this quickstart we will generate our own using the JWT generation API provided by `smallrye-jwt` (see <<Create JWT tokens with Smallrye JWT>> for more infomation) and the TokenUtils class shown in the following listing. Take this source and place it into `security-jwt-quickstart/src/test/java/org/acme/jwt/TokenUtils.java`.", "originalCommit": "d2161bc19020561d2e575580b95cece578203554", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjkwNTAwMQ==", "url": "https://github.com/quarkusio/quarkus/pull/7351#discussion_r382905001", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            JWT claims can be signed or encrypted or signed first and the nested JWT token - encrypted.\n          \n          \n            \n            JWT claims can be signed or encrypted or signed first and the nested JWT token encrypted.", "author": "gsmet", "createdAt": "2020-02-22T11:06:28Z", "path": "docs/src/main/asciidoc/security-jwt.adoc", "diffHunk": "@@ -948,13 +948,106 @@ Smallrye JWT provides more properties which can be used to customize the token p\n |smallrye.jwt.token.header|`Authorization`|Set this property if another header such as `Cookie` is used to pass the token.\n |smallrye.jwt.token.cookie|none|Name of the cookie containing a token. This property will be effective only if  `smallrye.jwt.token.header` is set to `Cookie`.\n |smallrye.jwt.token.schemes|`Bearer`|Comma-separated list containing an alternative single or multiple schemes, for example, `DPoP`.\n+|smallrye.jwt.token.kid|none|Key identifier. If it is set then the verification JWK key as well every JWT token must have a matching 'kid' header.\n+|smallrye.jwt.time-to-live|none|The maximum number of seconds that a JWT may be issued for use. Effectively, the difference  between the expiration date of the JWT and the issued at date must not exceed this value.\n |smallrye.jwt.require.named-principal|`false`|If an application relies on `java.security.Principal` returning a name then a token must have a `upn` or `preferred_username` or `sub` claim set. Setting this property will result in Smallrye JWT throwing an exception if none of these claims is available for the application code to reliably deal with a non-null `Principal` name.\n |smallrye.jwt.path.sub|none|Path to the claim containing the subject name. It starts from the top level JSON object and can contain multiple segments where each segment represents a JSON object name only, example: `realms/subject`. This property can be used if a token has no 'sub' claim but has the subject set in a different claim. Use double quotes with the namespace qualified claims.\n |smallrye.jwt.claims.sub|none| This property can be used to set a default sub claim value when the current token has no standard or custom `sub` claim available. Effectively this property can be used to customize `java.security.Principal` name if no `upn` or `preferred_username` or `sub` claim is set.\n |smallrye.jwt.path.groups|none|Path to the claim containing the groups. It starts from the top level JSON object and can contain multiple segments where each segment represents a JSON object name only, example: `realm/groups`. This property can be used if a token has no 'groups' claim but has the groups set in a different claim. Use double quotes with the namespace qualified claims.\n-|smallrye.jwt.path.groups-separator|` `|Separator for splitting a string which may contain multiple group values. It will only be used if the `smallrye.jwt.path.groups` property points to a custom claim whose value is a string. The default value is a single space because a standard OAuth2 `scope` claim may contain a space separated sequence.\n+|smallrye.jwt.groups-separator|' '|Separator for splitting a string which may contain multiple group values. It will only be used if the `smallrye.jwt.path.groups` property points to a custom claim whose value is a string. The default value is a single space because a standard OAuth2 `scope` claim may contain a space separated sequence.\n |smallrye.jwt.claims.groups|none| This property can be used to set a default groups claim value when the current token has no standard or custom groups claim available.\n-|smallrye.jwt.jwk.refresh-interval|60|JWK cache refresh interval in minutes. It will be ignored unless the `mp.jwt.verify.publickey.location` points to the HTTPS URL based JWK set and no HTTP `Cache-Control` response header with a positive `max-age` parameter value is returned from a JWK HTTPS endpoint.\n+|smallrye.jwt.jwks.refresh-interval|60|JWK cache refresh interval in minutes. It will be ignored unless the `mp.jwt.verify.publickey.location` points to the HTTPS URL based JWK set and no HTTP `Cache-Control` response header with a positive `max-age` parameter value is returned from a JWK HTTPS endpoint.\n |smallrye.jwt.expiration.grace|60|Expiration grace in seconds. By default an expired token will still be accepted if the current time is no more than 1 min after the token expiry time.\n-|smallrye.jwt.verify.audience|none|Comma separated list of the audiences that a token `aud` claim may contain.\n+|smallrye.jwt.verify.aud|none|Comma separated list of the audiences that a token `aud` claim may contain.\n |===\n+\n+== Generate JWT tokens with Smallrye JWT\n+\n+JWT claims can be signed or encrypted or signed first and the nested JWT token - encrypted.", "originalCommit": "d2161bc19020561d2e575580b95cece578203554", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjkwNTAzNg==", "url": "https://github.com/quarkusio/quarkus/pull/7351#discussion_r382905036", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            === Create JwtClaimsBuilder and set the claims.\n          \n          \n            \n            === Create JwtClaimsBuilder and set the claims", "author": "gsmet", "createdAt": "2020-02-22T11:07:03Z", "path": "docs/src/main/asciidoc/security-jwt.adoc", "diffHunk": "@@ -948,13 +948,106 @@ Smallrye JWT provides more properties which can be used to customize the token p\n |smallrye.jwt.token.header|`Authorization`|Set this property if another header such as `Cookie` is used to pass the token.\n |smallrye.jwt.token.cookie|none|Name of the cookie containing a token. This property will be effective only if  `smallrye.jwt.token.header` is set to `Cookie`.\n |smallrye.jwt.token.schemes|`Bearer`|Comma-separated list containing an alternative single or multiple schemes, for example, `DPoP`.\n+|smallrye.jwt.token.kid|none|Key identifier. If it is set then the verification JWK key as well every JWT token must have a matching 'kid' header.\n+|smallrye.jwt.time-to-live|none|The maximum number of seconds that a JWT may be issued for use. Effectively, the difference  between the expiration date of the JWT and the issued at date must not exceed this value.\n |smallrye.jwt.require.named-principal|`false`|If an application relies on `java.security.Principal` returning a name then a token must have a `upn` or `preferred_username` or `sub` claim set. Setting this property will result in Smallrye JWT throwing an exception if none of these claims is available for the application code to reliably deal with a non-null `Principal` name.\n |smallrye.jwt.path.sub|none|Path to the claim containing the subject name. It starts from the top level JSON object and can contain multiple segments where each segment represents a JSON object name only, example: `realms/subject`. This property can be used if a token has no 'sub' claim but has the subject set in a different claim. Use double quotes with the namespace qualified claims.\n |smallrye.jwt.claims.sub|none| This property can be used to set a default sub claim value when the current token has no standard or custom `sub` claim available. Effectively this property can be used to customize `java.security.Principal` name if no `upn` or `preferred_username` or `sub` claim is set.\n |smallrye.jwt.path.groups|none|Path to the claim containing the groups. It starts from the top level JSON object and can contain multiple segments where each segment represents a JSON object name only, example: `realm/groups`. This property can be used if a token has no 'groups' claim but has the groups set in a different claim. Use double quotes with the namespace qualified claims.\n-|smallrye.jwt.path.groups-separator|` `|Separator for splitting a string which may contain multiple group values. It will only be used if the `smallrye.jwt.path.groups` property points to a custom claim whose value is a string. The default value is a single space because a standard OAuth2 `scope` claim may contain a space separated sequence.\n+|smallrye.jwt.groups-separator|' '|Separator for splitting a string which may contain multiple group values. It will only be used if the `smallrye.jwt.path.groups` property points to a custom claim whose value is a string. The default value is a single space because a standard OAuth2 `scope` claim may contain a space separated sequence.\n |smallrye.jwt.claims.groups|none| This property can be used to set a default groups claim value when the current token has no standard or custom groups claim available.\n-|smallrye.jwt.jwk.refresh-interval|60|JWK cache refresh interval in minutes. It will be ignored unless the `mp.jwt.verify.publickey.location` points to the HTTPS URL based JWK set and no HTTP `Cache-Control` response header with a positive `max-age` parameter value is returned from a JWK HTTPS endpoint.\n+|smallrye.jwt.jwks.refresh-interval|60|JWK cache refresh interval in minutes. It will be ignored unless the `mp.jwt.verify.publickey.location` points to the HTTPS URL based JWK set and no HTTP `Cache-Control` response header with a positive `max-age` parameter value is returned from a JWK HTTPS endpoint.\n |smallrye.jwt.expiration.grace|60|Expiration grace in seconds. By default an expired token will still be accepted if the current time is no more than 1 min after the token expiry time.\n-|smallrye.jwt.verify.audience|none|Comma separated list of the audiences that a token `aud` claim may contain.\n+|smallrye.jwt.verify.aud|none|Comma separated list of the audiences that a token `aud` claim may contain.\n |===\n+\n+== Generate JWT tokens with Smallrye JWT\n+\n+JWT claims can be signed or encrypted or signed first and the nested JWT token - encrypted.\n+Signing the claims is used most ofthen to secure the claims. What is known today as a JWT token is typically produced by signing the claims in a JSON format using the steps described in the `JSON Web Signature RFC7515` specification.\n+However, when the claims are sensitive, their confidenatiality can be guaranteed by following the steps described in the `JSON Web Encryption RFC7516` specification to produce a JWT token with the encrypted claims.\n+Finally both the confidentiality and integrity of the claims can be further enforced by signing them first and then encrypting the nested JWT token.\n+\n+Smallrye JWT provides an API for securing the JWT claims using all of these options.\n+\n+=== Create JwtClaimsBuilder and set the claims.", "originalCommit": "d2161bc19020561d2e575580b95cece578203554", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjkwNTA0Mg==", "url": "https://github.com/quarkusio/quarkus/pull/7351#discussion_r382905042", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Smallrye JWT provides an API for securing the JWT claims using all of these options.\n          \n          \n            \n            SmallRye JWT provides an API for securing the JWT claims using all of these options.", "author": "gsmet", "createdAt": "2020-02-22T11:07:21Z", "path": "docs/src/main/asciidoc/security-jwt.adoc", "diffHunk": "@@ -948,13 +948,106 @@ Smallrye JWT provides more properties which can be used to customize the token p\n |smallrye.jwt.token.header|`Authorization`|Set this property if another header such as `Cookie` is used to pass the token.\n |smallrye.jwt.token.cookie|none|Name of the cookie containing a token. This property will be effective only if  `smallrye.jwt.token.header` is set to `Cookie`.\n |smallrye.jwt.token.schemes|`Bearer`|Comma-separated list containing an alternative single or multiple schemes, for example, `DPoP`.\n+|smallrye.jwt.token.kid|none|Key identifier. If it is set then the verification JWK key as well every JWT token must have a matching 'kid' header.\n+|smallrye.jwt.time-to-live|none|The maximum number of seconds that a JWT may be issued for use. Effectively, the difference  between the expiration date of the JWT and the issued at date must not exceed this value.\n |smallrye.jwt.require.named-principal|`false`|If an application relies on `java.security.Principal` returning a name then a token must have a `upn` or `preferred_username` or `sub` claim set. Setting this property will result in Smallrye JWT throwing an exception if none of these claims is available for the application code to reliably deal with a non-null `Principal` name.\n |smallrye.jwt.path.sub|none|Path to the claim containing the subject name. It starts from the top level JSON object and can contain multiple segments where each segment represents a JSON object name only, example: `realms/subject`. This property can be used if a token has no 'sub' claim but has the subject set in a different claim. Use double quotes with the namespace qualified claims.\n |smallrye.jwt.claims.sub|none| This property can be used to set a default sub claim value when the current token has no standard or custom `sub` claim available. Effectively this property can be used to customize `java.security.Principal` name if no `upn` or `preferred_username` or `sub` claim is set.\n |smallrye.jwt.path.groups|none|Path to the claim containing the groups. It starts from the top level JSON object and can contain multiple segments where each segment represents a JSON object name only, example: `realm/groups`. This property can be used if a token has no 'groups' claim but has the groups set in a different claim. Use double quotes with the namespace qualified claims.\n-|smallrye.jwt.path.groups-separator|` `|Separator for splitting a string which may contain multiple group values. It will only be used if the `smallrye.jwt.path.groups` property points to a custom claim whose value is a string. The default value is a single space because a standard OAuth2 `scope` claim may contain a space separated sequence.\n+|smallrye.jwt.groups-separator|' '|Separator for splitting a string which may contain multiple group values. It will only be used if the `smallrye.jwt.path.groups` property points to a custom claim whose value is a string. The default value is a single space because a standard OAuth2 `scope` claim may contain a space separated sequence.\n |smallrye.jwt.claims.groups|none| This property can be used to set a default groups claim value when the current token has no standard or custom groups claim available.\n-|smallrye.jwt.jwk.refresh-interval|60|JWK cache refresh interval in minutes. It will be ignored unless the `mp.jwt.verify.publickey.location` points to the HTTPS URL based JWK set and no HTTP `Cache-Control` response header with a positive `max-age` parameter value is returned from a JWK HTTPS endpoint.\n+|smallrye.jwt.jwks.refresh-interval|60|JWK cache refresh interval in minutes. It will be ignored unless the `mp.jwt.verify.publickey.location` points to the HTTPS URL based JWK set and no HTTP `Cache-Control` response header with a positive `max-age` parameter value is returned from a JWK HTTPS endpoint.\n |smallrye.jwt.expiration.grace|60|Expiration grace in seconds. By default an expired token will still be accepted if the current time is no more than 1 min after the token expiry time.\n-|smallrye.jwt.verify.audience|none|Comma separated list of the audiences that a token `aud` claim may contain.\n+|smallrye.jwt.verify.aud|none|Comma separated list of the audiences that a token `aud` claim may contain.\n |===\n+\n+== Generate JWT tokens with Smallrye JWT\n+\n+JWT claims can be signed or encrypted or signed first and the nested JWT token - encrypted.\n+Signing the claims is used most ofthen to secure the claims. What is known today as a JWT token is typically produced by signing the claims in a JSON format using the steps described in the `JSON Web Signature RFC7515` specification.\n+However, when the claims are sensitive, their confidenatiality can be guaranteed by following the steps described in the `JSON Web Encryption RFC7516` specification to produce a JWT token with the encrypted claims.\n+Finally both the confidentiality and integrity of the claims can be further enforced by signing them first and then encrypting the nested JWT token.\n+\n+Smallrye JWT provides an API for securing the JWT claims using all of these options.", "originalCommit": "d2161bc19020561d2e575580b95cece578203554", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjkwNTA1MQ==", "url": "https://github.com/quarkusio/quarkus/pull/7351#discussion_r382905051", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The first step is to initialize `JwtClaimsBuilder` using one of the options below and add some claims to it:\n          \n          \n            \n            The first step is to initialize a `JwtClaimsBuilder` using one of the options below and add some claims to it:", "author": "gsmet", "createdAt": "2020-02-22T11:07:35Z", "path": "docs/src/main/asciidoc/security-jwt.adoc", "diffHunk": "@@ -948,13 +948,106 @@ Smallrye JWT provides more properties which can be used to customize the token p\n |smallrye.jwt.token.header|`Authorization`|Set this property if another header such as `Cookie` is used to pass the token.\n |smallrye.jwt.token.cookie|none|Name of the cookie containing a token. This property will be effective only if  `smallrye.jwt.token.header` is set to `Cookie`.\n |smallrye.jwt.token.schemes|`Bearer`|Comma-separated list containing an alternative single or multiple schemes, for example, `DPoP`.\n+|smallrye.jwt.token.kid|none|Key identifier. If it is set then the verification JWK key as well every JWT token must have a matching 'kid' header.\n+|smallrye.jwt.time-to-live|none|The maximum number of seconds that a JWT may be issued for use. Effectively, the difference  between the expiration date of the JWT and the issued at date must not exceed this value.\n |smallrye.jwt.require.named-principal|`false`|If an application relies on `java.security.Principal` returning a name then a token must have a `upn` or `preferred_username` or `sub` claim set. Setting this property will result in Smallrye JWT throwing an exception if none of these claims is available for the application code to reliably deal with a non-null `Principal` name.\n |smallrye.jwt.path.sub|none|Path to the claim containing the subject name. It starts from the top level JSON object and can contain multiple segments where each segment represents a JSON object name only, example: `realms/subject`. This property can be used if a token has no 'sub' claim but has the subject set in a different claim. Use double quotes with the namespace qualified claims.\n |smallrye.jwt.claims.sub|none| This property can be used to set a default sub claim value when the current token has no standard or custom `sub` claim available. Effectively this property can be used to customize `java.security.Principal` name if no `upn` or `preferred_username` or `sub` claim is set.\n |smallrye.jwt.path.groups|none|Path to the claim containing the groups. It starts from the top level JSON object and can contain multiple segments where each segment represents a JSON object name only, example: `realm/groups`. This property can be used if a token has no 'groups' claim but has the groups set in a different claim. Use double quotes with the namespace qualified claims.\n-|smallrye.jwt.path.groups-separator|` `|Separator for splitting a string which may contain multiple group values. It will only be used if the `smallrye.jwt.path.groups` property points to a custom claim whose value is a string. The default value is a single space because a standard OAuth2 `scope` claim may contain a space separated sequence.\n+|smallrye.jwt.groups-separator|' '|Separator for splitting a string which may contain multiple group values. It will only be used if the `smallrye.jwt.path.groups` property points to a custom claim whose value is a string. The default value is a single space because a standard OAuth2 `scope` claim may contain a space separated sequence.\n |smallrye.jwt.claims.groups|none| This property can be used to set a default groups claim value when the current token has no standard or custom groups claim available.\n-|smallrye.jwt.jwk.refresh-interval|60|JWK cache refresh interval in minutes. It will be ignored unless the `mp.jwt.verify.publickey.location` points to the HTTPS URL based JWK set and no HTTP `Cache-Control` response header with a positive `max-age` parameter value is returned from a JWK HTTPS endpoint.\n+|smallrye.jwt.jwks.refresh-interval|60|JWK cache refresh interval in minutes. It will be ignored unless the `mp.jwt.verify.publickey.location` points to the HTTPS URL based JWK set and no HTTP `Cache-Control` response header with a positive `max-age` parameter value is returned from a JWK HTTPS endpoint.\n |smallrye.jwt.expiration.grace|60|Expiration grace in seconds. By default an expired token will still be accepted if the current time is no more than 1 min after the token expiry time.\n-|smallrye.jwt.verify.audience|none|Comma separated list of the audiences that a token `aud` claim may contain.\n+|smallrye.jwt.verify.aud|none|Comma separated list of the audiences that a token `aud` claim may contain.\n |===\n+\n+== Generate JWT tokens with Smallrye JWT\n+\n+JWT claims can be signed or encrypted or signed first and the nested JWT token - encrypted.\n+Signing the claims is used most ofthen to secure the claims. What is known today as a JWT token is typically produced by signing the claims in a JSON format using the steps described in the `JSON Web Signature RFC7515` specification.\n+However, when the claims are sensitive, their confidenatiality can be guaranteed by following the steps described in the `JSON Web Encryption RFC7516` specification to produce a JWT token with the encrypted claims.\n+Finally both the confidentiality and integrity of the claims can be further enforced by signing them first and then encrypting the nested JWT token.\n+\n+Smallrye JWT provides an API for securing the JWT claims using all of these options.\n+\n+=== Create JwtClaimsBuilder and set the claims.\n+\n+The first step is to initialize `JwtClaimsBuilder` using one of the options below and add some claims to it:", "originalCommit": "d2161bc19020561d2e575580b95cece578203554", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjkwNTA3NQ==", "url": "https://github.com/quarkusio/quarkus/pull/7351#discussion_r382905075", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            // Builder created from the map of claims\n          \n          \n            \n            // Builder created from a map of claims", "author": "gsmet", "createdAt": "2020-02-22T11:07:54Z", "path": "docs/src/main/asciidoc/security-jwt.adoc", "diffHunk": "@@ -948,13 +948,106 @@ Smallrye JWT provides more properties which can be used to customize the token p\n |smallrye.jwt.token.header|`Authorization`|Set this property if another header such as `Cookie` is used to pass the token.\n |smallrye.jwt.token.cookie|none|Name of the cookie containing a token. This property will be effective only if  `smallrye.jwt.token.header` is set to `Cookie`.\n |smallrye.jwt.token.schemes|`Bearer`|Comma-separated list containing an alternative single or multiple schemes, for example, `DPoP`.\n+|smallrye.jwt.token.kid|none|Key identifier. If it is set then the verification JWK key as well every JWT token must have a matching 'kid' header.\n+|smallrye.jwt.time-to-live|none|The maximum number of seconds that a JWT may be issued for use. Effectively, the difference  between the expiration date of the JWT and the issued at date must not exceed this value.\n |smallrye.jwt.require.named-principal|`false`|If an application relies on `java.security.Principal` returning a name then a token must have a `upn` or `preferred_username` or `sub` claim set. Setting this property will result in Smallrye JWT throwing an exception if none of these claims is available for the application code to reliably deal with a non-null `Principal` name.\n |smallrye.jwt.path.sub|none|Path to the claim containing the subject name. It starts from the top level JSON object and can contain multiple segments where each segment represents a JSON object name only, example: `realms/subject`. This property can be used if a token has no 'sub' claim but has the subject set in a different claim. Use double quotes with the namespace qualified claims.\n |smallrye.jwt.claims.sub|none| This property can be used to set a default sub claim value when the current token has no standard or custom `sub` claim available. Effectively this property can be used to customize `java.security.Principal` name if no `upn` or `preferred_username` or `sub` claim is set.\n |smallrye.jwt.path.groups|none|Path to the claim containing the groups. It starts from the top level JSON object and can contain multiple segments where each segment represents a JSON object name only, example: `realm/groups`. This property can be used if a token has no 'groups' claim but has the groups set in a different claim. Use double quotes with the namespace qualified claims.\n-|smallrye.jwt.path.groups-separator|` `|Separator for splitting a string which may contain multiple group values. It will only be used if the `smallrye.jwt.path.groups` property points to a custom claim whose value is a string. The default value is a single space because a standard OAuth2 `scope` claim may contain a space separated sequence.\n+|smallrye.jwt.groups-separator|' '|Separator for splitting a string which may contain multiple group values. It will only be used if the `smallrye.jwt.path.groups` property points to a custom claim whose value is a string. The default value is a single space because a standard OAuth2 `scope` claim may contain a space separated sequence.\n |smallrye.jwt.claims.groups|none| This property can be used to set a default groups claim value when the current token has no standard or custom groups claim available.\n-|smallrye.jwt.jwk.refresh-interval|60|JWK cache refresh interval in minutes. It will be ignored unless the `mp.jwt.verify.publickey.location` points to the HTTPS URL based JWK set and no HTTP `Cache-Control` response header with a positive `max-age` parameter value is returned from a JWK HTTPS endpoint.\n+|smallrye.jwt.jwks.refresh-interval|60|JWK cache refresh interval in minutes. It will be ignored unless the `mp.jwt.verify.publickey.location` points to the HTTPS URL based JWK set and no HTTP `Cache-Control` response header with a positive `max-age` parameter value is returned from a JWK HTTPS endpoint.\n |smallrye.jwt.expiration.grace|60|Expiration grace in seconds. By default an expired token will still be accepted if the current time is no more than 1 min after the token expiry time.\n-|smallrye.jwt.verify.audience|none|Comma separated list of the audiences that a token `aud` claim may contain.\n+|smallrye.jwt.verify.aud|none|Comma separated list of the audiences that a token `aud` claim may contain.\n |===\n+\n+== Generate JWT tokens with Smallrye JWT\n+\n+JWT claims can be signed or encrypted or signed first and the nested JWT token - encrypted.\n+Signing the claims is used most ofthen to secure the claims. What is known today as a JWT token is typically produced by signing the claims in a JSON format using the steps described in the `JSON Web Signature RFC7515` specification.\n+However, when the claims are sensitive, their confidenatiality can be guaranteed by following the steps described in the `JSON Web Encryption RFC7516` specification to produce a JWT token with the encrypted claims.\n+Finally both the confidentiality and integrity of the claims can be further enforced by signing them first and then encrypting the nested JWT token.\n+\n+Smallrye JWT provides an API for securing the JWT claims using all of these options.\n+\n+=== Create JwtClaimsBuilder and set the claims.\n+\n+The first step is to initialize `JwtClaimsBuilder` using one of the options below and add some claims to it:\n+\n+[source, java]\n+----\n+import java.util.Collections;\n+import io.smallrye.jwt.build.Jwt;\n+import io.smallrye.jwt.build.JwtClaimsBuilder;\n+...\n+// Create an empty builder and add some claims\n+JwtClaimsBuilder builder1 = Jwt.claims();\n+builder1.claim(\"customClaim\", \"custom-value\").issuer(\"https://issuer.org\");\n+\n+// Builder created from the existing claims\n+JwtClaimsBuilder builder2 = Jwt.claims(\"/tokenClaims.json\");\n+\n+// Builder created from the map of claims", "originalCommit": "d2161bc19020561d2e575580b95cece578203554", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjkwNTExNg==", "url": "https://github.com/quarkusio/quarkus/pull/7351#discussion_r382905116", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The API is fluent so the builder initialization can be done as part of the fluent API sequence. The builder will also set an `iat` (issued at) to the current time, `exp` (expires at) to 5 mins away from the current time and `jti` (unique token identifier) claims if they have not already been set, so one can skip setting them when possible.\n          \n          \n            \n            The API is fluent so the builder initialization can be done as part of the fluent API sequence. The builder will also set `iat` (issued at) to the current time, `exp` (expires at) to 5 minutes away from the current time and `jti` (unique token identifier) claims if they have not already been set, so one can skip setting them when possible.", "author": "gsmet", "createdAt": "2020-02-22T11:08:27Z", "path": "docs/src/main/asciidoc/security-jwt.adoc", "diffHunk": "@@ -948,13 +948,106 @@ Smallrye JWT provides more properties which can be used to customize the token p\n |smallrye.jwt.token.header|`Authorization`|Set this property if another header such as `Cookie` is used to pass the token.\n |smallrye.jwt.token.cookie|none|Name of the cookie containing a token. This property will be effective only if  `smallrye.jwt.token.header` is set to `Cookie`.\n |smallrye.jwt.token.schemes|`Bearer`|Comma-separated list containing an alternative single or multiple schemes, for example, `DPoP`.\n+|smallrye.jwt.token.kid|none|Key identifier. If it is set then the verification JWK key as well every JWT token must have a matching 'kid' header.\n+|smallrye.jwt.time-to-live|none|The maximum number of seconds that a JWT may be issued for use. Effectively, the difference  between the expiration date of the JWT and the issued at date must not exceed this value.\n |smallrye.jwt.require.named-principal|`false`|If an application relies on `java.security.Principal` returning a name then a token must have a `upn` or `preferred_username` or `sub` claim set. Setting this property will result in Smallrye JWT throwing an exception if none of these claims is available for the application code to reliably deal with a non-null `Principal` name.\n |smallrye.jwt.path.sub|none|Path to the claim containing the subject name. It starts from the top level JSON object and can contain multiple segments where each segment represents a JSON object name only, example: `realms/subject`. This property can be used if a token has no 'sub' claim but has the subject set in a different claim. Use double quotes with the namespace qualified claims.\n |smallrye.jwt.claims.sub|none| This property can be used to set a default sub claim value when the current token has no standard or custom `sub` claim available. Effectively this property can be used to customize `java.security.Principal` name if no `upn` or `preferred_username` or `sub` claim is set.\n |smallrye.jwt.path.groups|none|Path to the claim containing the groups. It starts from the top level JSON object and can contain multiple segments where each segment represents a JSON object name only, example: `realm/groups`. This property can be used if a token has no 'groups' claim but has the groups set in a different claim. Use double quotes with the namespace qualified claims.\n-|smallrye.jwt.path.groups-separator|` `|Separator for splitting a string which may contain multiple group values. It will only be used if the `smallrye.jwt.path.groups` property points to a custom claim whose value is a string. The default value is a single space because a standard OAuth2 `scope` claim may contain a space separated sequence.\n+|smallrye.jwt.groups-separator|' '|Separator for splitting a string which may contain multiple group values. It will only be used if the `smallrye.jwt.path.groups` property points to a custom claim whose value is a string. The default value is a single space because a standard OAuth2 `scope` claim may contain a space separated sequence.\n |smallrye.jwt.claims.groups|none| This property can be used to set a default groups claim value when the current token has no standard or custom groups claim available.\n-|smallrye.jwt.jwk.refresh-interval|60|JWK cache refresh interval in minutes. It will be ignored unless the `mp.jwt.verify.publickey.location` points to the HTTPS URL based JWK set and no HTTP `Cache-Control` response header with a positive `max-age` parameter value is returned from a JWK HTTPS endpoint.\n+|smallrye.jwt.jwks.refresh-interval|60|JWK cache refresh interval in minutes. It will be ignored unless the `mp.jwt.verify.publickey.location` points to the HTTPS URL based JWK set and no HTTP `Cache-Control` response header with a positive `max-age` parameter value is returned from a JWK HTTPS endpoint.\n |smallrye.jwt.expiration.grace|60|Expiration grace in seconds. By default an expired token will still be accepted if the current time is no more than 1 min after the token expiry time.\n-|smallrye.jwt.verify.audience|none|Comma separated list of the audiences that a token `aud` claim may contain.\n+|smallrye.jwt.verify.aud|none|Comma separated list of the audiences that a token `aud` claim may contain.\n |===\n+\n+== Generate JWT tokens with Smallrye JWT\n+\n+JWT claims can be signed or encrypted or signed first and the nested JWT token - encrypted.\n+Signing the claims is used most ofthen to secure the claims. What is known today as a JWT token is typically produced by signing the claims in a JSON format using the steps described in the `JSON Web Signature RFC7515` specification.\n+However, when the claims are sensitive, their confidenatiality can be guaranteed by following the steps described in the `JSON Web Encryption RFC7516` specification to produce a JWT token with the encrypted claims.\n+Finally both the confidentiality and integrity of the claims can be further enforced by signing them first and then encrypting the nested JWT token.\n+\n+Smallrye JWT provides an API for securing the JWT claims using all of these options.\n+\n+=== Create JwtClaimsBuilder and set the claims.\n+\n+The first step is to initialize `JwtClaimsBuilder` using one of the options below and add some claims to it:\n+\n+[source, java]\n+----\n+import java.util.Collections;\n+import io.smallrye.jwt.build.Jwt;\n+import io.smallrye.jwt.build.JwtClaimsBuilder;\n+...\n+// Create an empty builder and add some claims\n+JwtClaimsBuilder builder1 = Jwt.claims();\n+builder1.claim(\"customClaim\", \"custom-value\").issuer(\"https://issuer.org\");\n+\n+// Builder created from the existing claims\n+JwtClaimsBuilder builder2 = Jwt.claims(\"/tokenClaims.json\");\n+\n+// Builder created from the map of claims\n+JwtClaimsBuilder builder3 = Jwt.claims(Collections.singletonMap(\"customClaim\", \"custom-value\"));\n+----\n+\n+The API is fluent so the builder initialization can be done as part of the fluent API sequence. The builder will also set an `iat` (issued at) to the current time, `exp` (expires at) to 5 mins away from the current time and `jti` (unique token identifier) claims if they have not already been set, so one can skip setting them when possible.", "originalCommit": "d2161bc19020561d2e575580b95cece578203554", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjkwNTE1Ng==", "url": "https://github.com/quarkusio/quarkus/pull/7351#discussion_r382905156", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Note the `alg` (key management algorithm) header is set to `RSA-OAEP-256` (it will be changed to `RSA-OAEP` in the future version of smallrye-jwt) and the `enc` (content encryption header) is set to `AGCM256` by default.\n          \n          \n            \n            Note the `alg` (key management algorithm) header is set to `RSA-OAEP-256` (it will be changed to `RSA-OAEP` in a future version of smallrye-jwt) and the `enc` (content encryption header) is set to `AGCM256` by default.", "author": "gsmet", "createdAt": "2020-02-22T11:09:13Z", "path": "docs/src/main/asciidoc/security-jwt.adoc", "diffHunk": "@@ -948,13 +948,106 @@ Smallrye JWT provides more properties which can be used to customize the token p\n |smallrye.jwt.token.header|`Authorization`|Set this property if another header such as `Cookie` is used to pass the token.\n |smallrye.jwt.token.cookie|none|Name of the cookie containing a token. This property will be effective only if  `smallrye.jwt.token.header` is set to `Cookie`.\n |smallrye.jwt.token.schemes|`Bearer`|Comma-separated list containing an alternative single or multiple schemes, for example, `DPoP`.\n+|smallrye.jwt.token.kid|none|Key identifier. If it is set then the verification JWK key as well every JWT token must have a matching 'kid' header.\n+|smallrye.jwt.time-to-live|none|The maximum number of seconds that a JWT may be issued for use. Effectively, the difference  between the expiration date of the JWT and the issued at date must not exceed this value.\n |smallrye.jwt.require.named-principal|`false`|If an application relies on `java.security.Principal` returning a name then a token must have a `upn` or `preferred_username` or `sub` claim set. Setting this property will result in Smallrye JWT throwing an exception if none of these claims is available for the application code to reliably deal with a non-null `Principal` name.\n |smallrye.jwt.path.sub|none|Path to the claim containing the subject name. It starts from the top level JSON object and can contain multiple segments where each segment represents a JSON object name only, example: `realms/subject`. This property can be used if a token has no 'sub' claim but has the subject set in a different claim. Use double quotes with the namespace qualified claims.\n |smallrye.jwt.claims.sub|none| This property can be used to set a default sub claim value when the current token has no standard or custom `sub` claim available. Effectively this property can be used to customize `java.security.Principal` name if no `upn` or `preferred_username` or `sub` claim is set.\n |smallrye.jwt.path.groups|none|Path to the claim containing the groups. It starts from the top level JSON object and can contain multiple segments where each segment represents a JSON object name only, example: `realm/groups`. This property can be used if a token has no 'groups' claim but has the groups set in a different claim. Use double quotes with the namespace qualified claims.\n-|smallrye.jwt.path.groups-separator|` `|Separator for splitting a string which may contain multiple group values. It will only be used if the `smallrye.jwt.path.groups` property points to a custom claim whose value is a string. The default value is a single space because a standard OAuth2 `scope` claim may contain a space separated sequence.\n+|smallrye.jwt.groups-separator|' '|Separator for splitting a string which may contain multiple group values. It will only be used if the `smallrye.jwt.path.groups` property points to a custom claim whose value is a string. The default value is a single space because a standard OAuth2 `scope` claim may contain a space separated sequence.\n |smallrye.jwt.claims.groups|none| This property can be used to set a default groups claim value when the current token has no standard or custom groups claim available.\n-|smallrye.jwt.jwk.refresh-interval|60|JWK cache refresh interval in minutes. It will be ignored unless the `mp.jwt.verify.publickey.location` points to the HTTPS URL based JWK set and no HTTP `Cache-Control` response header with a positive `max-age` parameter value is returned from a JWK HTTPS endpoint.\n+|smallrye.jwt.jwks.refresh-interval|60|JWK cache refresh interval in minutes. It will be ignored unless the `mp.jwt.verify.publickey.location` points to the HTTPS URL based JWK set and no HTTP `Cache-Control` response header with a positive `max-age` parameter value is returned from a JWK HTTPS endpoint.\n |smallrye.jwt.expiration.grace|60|Expiration grace in seconds. By default an expired token will still be accepted if the current time is no more than 1 min after the token expiry time.\n-|smallrye.jwt.verify.audience|none|Comma separated list of the audiences that a token `aud` claim may contain.\n+|smallrye.jwt.verify.aud|none|Comma separated list of the audiences that a token `aud` claim may contain.\n |===\n+\n+== Generate JWT tokens with Smallrye JWT\n+\n+JWT claims can be signed or encrypted or signed first and the nested JWT token - encrypted.\n+Signing the claims is used most ofthen to secure the claims. What is known today as a JWT token is typically produced by signing the claims in a JSON format using the steps described in the `JSON Web Signature RFC7515` specification.\n+However, when the claims are sensitive, their confidenatiality can be guaranteed by following the steps described in the `JSON Web Encryption RFC7516` specification to produce a JWT token with the encrypted claims.\n+Finally both the confidentiality and integrity of the claims can be further enforced by signing them first and then encrypting the nested JWT token.\n+\n+Smallrye JWT provides an API for securing the JWT claims using all of these options.\n+\n+=== Create JwtClaimsBuilder and set the claims.\n+\n+The first step is to initialize `JwtClaimsBuilder` using one of the options below and add some claims to it:\n+\n+[source, java]\n+----\n+import java.util.Collections;\n+import io.smallrye.jwt.build.Jwt;\n+import io.smallrye.jwt.build.JwtClaimsBuilder;\n+...\n+// Create an empty builder and add some claims\n+JwtClaimsBuilder builder1 = Jwt.claims();\n+builder1.claim(\"customClaim\", \"custom-value\").issuer(\"https://issuer.org\");\n+\n+// Builder created from the existing claims\n+JwtClaimsBuilder builder2 = Jwt.claims(\"/tokenClaims.json\");\n+\n+// Builder created from the map of claims\n+JwtClaimsBuilder builder3 = Jwt.claims(Collections.singletonMap(\"customClaim\", \"custom-value\"));\n+----\n+\n+The API is fluent so the builder initialization can be done as part of the fluent API sequence. The builder will also set an `iat` (issued at) to the current time, `exp` (expires at) to 5 mins away from the current time and `jti` (unique token identifier) claims if they have not already been set, so one can skip setting them when possible.\n+\n+The next step is to decide how to secure the claims.\n+\n+=== Sign the claims\n+\n+The claims can be signed immediately or after the `JSON Web Signature` headers have been set:\n+\n+[source, java]\n+----\n+import io.smallrye.jwt.build.Jwt;\n+...\n+\n+// Sign the claims using the private key loaded from the location set with a 'smallrye.jwt.sign.key-location' property.\n+// No 'jws()' transition is necessary.\n+String jwt1 = Jwt.claims(\"/tokenClaims.json\").sign();\n+\n+// Set the headers and sign the claims with an RSA private key loaded in the code (the implementation of this method is omitted). Note a 'jws()' transition to a 'JwtSignatureBuilder'.\n+String jwt2 = Jwt.claims(\"/tokenClaims.json\").jws().signatureKeyId(\"kid1\").header(\"custom-header\", \"custom-value\").sign(getPrivateKey());\n+----\n+\n+Note the `alg` (algorithm) header is set to `RS256` by default.\n+\n+=== Encrypt the claims\n+\n+The claims can be encrypted immediately or after the `JSON Web Encryption` headers have been set the same way as they can be signed.\n+The only minor difference is that encrypting the claims always requires a `jwe()` `JwtEncryptionBuilder` transition:\n+\n+[source, java]\n+----\n+import io.smallrye.jwt.build.Jwt;\n+...\n+\n+// Encrypt the claims using the public key loaded from the location set with a 'smallrye.jwt.encrypt.key-location' property.\n+String jwt1 = Jwt.claims(\"/tokenClaims.json\").jwe().encrypt();\n+\n+// Set the headers and encrypt the claims with an RSA public key loaded in the code (the implementation of this method is omitted).\n+String jwt2 = Jwt.claims(\"/tokenClaims.json\").jwe().header(\"custom-header\", \"custom-value\").encrypt(getPublicKey());\n+----\n+\n+Note the `alg` (key management algorithm) header is set to `RSA-OAEP-256` (it will be changed to `RSA-OAEP` in the future version of smallrye-jwt) and the `enc` (content encryption header) is set to `AGCM256` by default.", "originalCommit": "d2161bc19020561d2e575580b95cece578203554", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "298a915727c09bb1fc36d19295196d7777f7d7e2", "url": "https://github.com/quarkusio/quarkus/commit/298a915727c09bb1fc36d19295196d7777f7d7e2", "message": "Update JWT guide with the builder API intro and fix some typos", "committedDate": "2020-02-22T11:48:25Z", "type": "commit"}, {"oid": "298a915727c09bb1fc36d19295196d7777f7d7e2", "url": "https://github.com/quarkusio/quarkus/commit/298a915727c09bb1fc36d19295196d7777f7d7e2", "message": "Update JWT guide with the builder API intro and fix some typos", "committedDate": "2020-02-22T11:48:25Z", "type": "forcePushed"}]}