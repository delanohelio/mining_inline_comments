{"pr_number": 7177, "pr_title": "Implement Resteasy Mutiny support", "pr_createdAt": "2020-02-13T10:26:30Z", "pr_url": "https://github.com/quarkusio/quarkus/pull/7177", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODgwOTUwMA==", "url": "https://github.com/quarkusio/quarkus/pull/7177#discussion_r378809500", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Async support comes in 2 flavors: you can return a `CompletionStage` or an `Uni` (requires the `quarkus-resteasy-mutiny` extension).\n          \n          \n            \n            Async support comes in 2 flavors: you can return a `CompletionStage` or a `Uni` (requires the `quarkus-resteasy-mutiny` extension).", "author": "gsmet", "createdAt": "2020-02-13T11:41:08Z", "path": "docs/src/main/asciidoc/rest-client.adoc", "diffHunk": "@@ -234,7 +234,9 @@ The code above uses link:http://rest-assured.io/[REST Assured]'s link:https://gi\n \n \n == Async Support\n-The rest client supports asynchronous rest calls. Let's see it in action by adding a `getByNameAsync` method in our `CountriesService` REST interface. The code should look like:\n+The rest client supports asynchronous rest calls.\n+Async support comes in 2 flavors: you can return a `CompletionStage` or an `Uni` (requires the `quarkus-resteasy-mutiny` extension).", "originalCommit": "c564bd79e9de0ba91e629d129e8da0167115288d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODgwOTcwOQ==", "url": "https://github.com/quarkusio/quarkus/pull/7177#discussion_r378809709", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The `Uni` version is the very similar:\n          \n          \n            \n            The `Uni` version is very similar:", "author": "gsmet", "createdAt": "2020-02-13T11:41:37Z", "path": "docs/src/main/asciidoc/rest-client.adoc", "diffHunk": "@@ -324,6 +326,70 @@ public void testCountryNameAsyncEndpoint() {\n     }\n ----\n \n+The `Uni` version is the very similar:", "originalCommit": "c564bd79e9de0ba91e629d129e8da0167115288d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODgwOTkzNg==", "url": "https://github.com/quarkusio/quarkus/pull/7177#discussion_r378809936", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            To asynchronously handle the HTTP request, the endpoint method must return a `java.util.concurrent.CompletionStage` or an `io.smallrye.mutiny.Uni` (need the `quarkus-resteasy-mutiny` extension):\n          \n          \n            \n            To asynchronously handle the HTTP request, the endpoint method must return a `java.util.concurrent.CompletionStage` or an `io.smallrye.mutiny.Uni` (requires the `quarkus-resteasy-mutiny` extension):", "author": "gsmet", "createdAt": "2020-02-13T11:42:10Z", "path": "docs/src/main/asciidoc/vertx.adoc", "diffHunk": "@@ -135,73 +135,80 @@ Quarkus web resources support asynchronous processing and streaming results over\n \n === Asynchronous processing\n \n-Most programming guides start easy with a greeting service and this one makes no exception.\n-\n-To asynchronously greet a client, the endpoint method must return a `java.util.concurrent.CompletionStage`:\n+To asynchronously handle the HTTP request, the endpoint method must return a `java.util.concurrent.CompletionStage` or an `io.smallrye.mutiny.Uni` (need the `quarkus-resteasy-mutiny` extension):", "originalCommit": "c564bd79e9de0ba91e629d129e8da0167115288d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODgxMDA5NA==", "url": "https://github.com/quarkusio/quarkus/pull/7177#discussion_r378810094", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            In this code, we injects the `vertx` instance (`io.vertx.mutiny.core.Vertx`) and reads a file from the file system_.\n          \n          \n            \n            In this code, we inject the `vertx` instance (`io.vertx.mutiny.core.Vertx`) and read a file from the file system.", "author": "gsmet", "createdAt": "2020-02-13T11:42:34Z", "path": "docs/src/main/asciidoc/vertx.adoc", "diffHunk": "@@ -135,73 +135,80 @@ Quarkus web resources support asynchronous processing and streaming results over\n \n === Asynchronous processing\n \n-Most programming guides start easy with a greeting service and this one makes no exception.\n-\n-To asynchronously greet a client, the endpoint method must return a `java.util.concurrent.CompletionStage`:\n+To asynchronously handle the HTTP request, the endpoint method must return a `java.util.concurrent.CompletionStage` or an `io.smallrye.mutiny.Uni` (need the `quarkus-resteasy-mutiny` extension):\n \n [source,java]\n ----\n-@Path(\"/hello\")\n+@Path(\"/lorem\")\n public class GreetingResource {\n \n-    @Inject\n-    Vertx vertx;\n-\n     @GET\n     @Produces(MediaType.TEXT_PLAIN)\n-    @Path(\"{name}\")\n-    public CompletionStage<String> greeting(@PathParam String name) {\n-        // When complete, return the content to the client\n-        CompletableFuture<String> future = new CompletableFuture<>();\n-\n-        long start = System.nanoTime();\n-\n-        // TODO: asynchronous greeting\n-\n-        return future;\n+    public Uni<String> doSomethingAsync() {\n+        // Mimic an asynchronous computation.\n+        return Uni.createFrom()\n+                .item(() -> \"Hello!\")\n+                .onItem().delayIt().by(Duration.ofMillis(10));\n     }\n }\n ----\n \n+\n+[source, shell]\n+----\n+./mvnw compile quarkus:dev\n+----\n+\n+Then, open your browser to 'http://localhost:8080/lorem' and you should get the message.\n+\n So far so good.\n-Now let's use the Vert.x API to implement the artificially delayed reply with the `setTimer` provided by Vert.x:\n+Now let's use the Vert.x API instead of this artificial delay:\n \n [source,java]\n ----\n-// Delay reply by 10ms\n-vertx.setTimer(10, l -> {\n-    // Compute elapsed time in milliseconds\n-    long duration = TimeUnit.MILLISECONDS.convert(System.nanoTime() - start, TimeUnit.NANOSECONDS);\n+package org.acme.vertx;\n \n-    // Format message\n-    String message = String.format(\"Hello %s! (%d ms)%n\", name, duration);\n+import io.smallrye.mutiny.Uni;\n+import io.vertx.mutiny.core.Vertx;\n \n-    // Complete\n-    future.complete(message);\n-});\n-----\n+import javax.inject.Inject;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n \n-That's it.\n-Now start Quarkus in `dev` mode with:\n+@Path(\"/lorem\")\n+public class GreetingResource {\n \n-[source, shell]\n-----\n-./mvnw compile quarkus:dev\n+    @Inject\n+    Vertx vertx;\n+\n+    @GET\n+    @Produces(MediaType.TEXT_PLAIN)\n+    public Uni<String> doSomethingAsync() {\n+        return vertx.fileSystem().readFile(\"/META-INF/resources/lorem.txt\")\n+                .onItem().apply(b -> b.toString(\"UTF-8\"));\n+    }\n+}\n ----\n \n-Eventually, open your browser and navigate to http://localhost:8080/hello/Quarkus, you should see:\n+In this code, we injects the `vertx` instance (`io.vertx.mutiny.core.Vertx`) and reads a file from the file system_.", "originalCommit": "c564bd79e9de0ba91e629d129e8da0167115288d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODgxMDI0NQ==", "url": "https://github.com/quarkusio/quarkus/pull/7177#discussion_r378810245", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Creates the `src/main/resources/META_INF/resources/lorem.txt` file with the following content:\n          \n          \n            \n            Create the `src/main/resources/META_INF/resources/lorem.txt` file with the following content:", "author": "gsmet", "createdAt": "2020-02-13T11:42:58Z", "path": "docs/src/main/asciidoc/vertx.adoc", "diffHunk": "@@ -135,73 +135,80 @@ Quarkus web resources support asynchronous processing and streaming results over\n \n === Asynchronous processing\n \n-Most programming guides start easy with a greeting service and this one makes no exception.\n-\n-To asynchronously greet a client, the endpoint method must return a `java.util.concurrent.CompletionStage`:\n+To asynchronously handle the HTTP request, the endpoint method must return a `java.util.concurrent.CompletionStage` or an `io.smallrye.mutiny.Uni` (need the `quarkus-resteasy-mutiny` extension):\n \n [source,java]\n ----\n-@Path(\"/hello\")\n+@Path(\"/lorem\")\n public class GreetingResource {\n \n-    @Inject\n-    Vertx vertx;\n-\n     @GET\n     @Produces(MediaType.TEXT_PLAIN)\n-    @Path(\"{name}\")\n-    public CompletionStage<String> greeting(@PathParam String name) {\n-        // When complete, return the content to the client\n-        CompletableFuture<String> future = new CompletableFuture<>();\n-\n-        long start = System.nanoTime();\n-\n-        // TODO: asynchronous greeting\n-\n-        return future;\n+    public Uni<String> doSomethingAsync() {\n+        // Mimic an asynchronous computation.\n+        return Uni.createFrom()\n+                .item(() -> \"Hello!\")\n+                .onItem().delayIt().by(Duration.ofMillis(10));\n     }\n }\n ----\n \n+\n+[source, shell]\n+----\n+./mvnw compile quarkus:dev\n+----\n+\n+Then, open your browser to 'http://localhost:8080/lorem' and you should get the message.\n+\n So far so good.\n-Now let's use the Vert.x API to implement the artificially delayed reply with the `setTimer` provided by Vert.x:\n+Now let's use the Vert.x API instead of this artificial delay:\n \n [source,java]\n ----\n-// Delay reply by 10ms\n-vertx.setTimer(10, l -> {\n-    // Compute elapsed time in milliseconds\n-    long duration = TimeUnit.MILLISECONDS.convert(System.nanoTime() - start, TimeUnit.NANOSECONDS);\n+package org.acme.vertx;\n \n-    // Format message\n-    String message = String.format(\"Hello %s! (%d ms)%n\", name, duration);\n+import io.smallrye.mutiny.Uni;\n+import io.vertx.mutiny.core.Vertx;\n \n-    // Complete\n-    future.complete(message);\n-});\n-----\n+import javax.inject.Inject;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n \n-That's it.\n-Now start Quarkus in `dev` mode with:\n+@Path(\"/lorem\")\n+public class GreetingResource {\n \n-[source, shell]\n-----\n-./mvnw compile quarkus:dev\n+    @Inject\n+    Vertx vertx;\n+\n+    @GET\n+    @Produces(MediaType.TEXT_PLAIN)\n+    public Uni<String> doSomethingAsync() {\n+        return vertx.fileSystem().readFile(\"/META-INF/resources/lorem.txt\")\n+                .onItem().apply(b -> b.toString(\"UTF-8\"));\n+    }\n+}\n ----\n \n-Eventually, open your browser and navigate to http://localhost:8080/hello/Quarkus, you should see:\n+In this code, we injects the `vertx` instance (`io.vertx.mutiny.core.Vertx`) and reads a file from the file system_.\n \n-[source, shell]\n+Creates the `src/main/resources/META_INF/resources/lorem.txt` file with the following content:", "originalCommit": "c564bd79e9de0ba91e629d129e8da0167115288d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODgxMDM0MA==", "url": "https://github.com/quarkusio/quarkus/pull/7177#discussion_r378810340", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Then, refresh the page, you should the _lorem ipsum_ text.\n          \n          \n            \n            Then, refresh the page, you should see the _lorem ipsum_ text.", "author": "gsmet", "createdAt": "2020-02-13T11:43:11Z", "path": "docs/src/main/asciidoc/vertx.adoc", "diffHunk": "@@ -135,73 +135,80 @@ Quarkus web resources support asynchronous processing and streaming results over\n \n === Asynchronous processing\n \n-Most programming guides start easy with a greeting service and this one makes no exception.\n-\n-To asynchronously greet a client, the endpoint method must return a `java.util.concurrent.CompletionStage`:\n+To asynchronously handle the HTTP request, the endpoint method must return a `java.util.concurrent.CompletionStage` or an `io.smallrye.mutiny.Uni` (need the `quarkus-resteasy-mutiny` extension):\n \n [source,java]\n ----\n-@Path(\"/hello\")\n+@Path(\"/lorem\")\n public class GreetingResource {\n \n-    @Inject\n-    Vertx vertx;\n-\n     @GET\n     @Produces(MediaType.TEXT_PLAIN)\n-    @Path(\"{name}\")\n-    public CompletionStage<String> greeting(@PathParam String name) {\n-        // When complete, return the content to the client\n-        CompletableFuture<String> future = new CompletableFuture<>();\n-\n-        long start = System.nanoTime();\n-\n-        // TODO: asynchronous greeting\n-\n-        return future;\n+    public Uni<String> doSomethingAsync() {\n+        // Mimic an asynchronous computation.\n+        return Uni.createFrom()\n+                .item(() -> \"Hello!\")\n+                .onItem().delayIt().by(Duration.ofMillis(10));\n     }\n }\n ----\n \n+\n+[source, shell]\n+----\n+./mvnw compile quarkus:dev\n+----\n+\n+Then, open your browser to 'http://localhost:8080/lorem' and you should get the message.\n+\n So far so good.\n-Now let's use the Vert.x API to implement the artificially delayed reply with the `setTimer` provided by Vert.x:\n+Now let's use the Vert.x API instead of this artificial delay:\n \n [source,java]\n ----\n-// Delay reply by 10ms\n-vertx.setTimer(10, l -> {\n-    // Compute elapsed time in milliseconds\n-    long duration = TimeUnit.MILLISECONDS.convert(System.nanoTime() - start, TimeUnit.NANOSECONDS);\n+package org.acme.vertx;\n \n-    // Format message\n-    String message = String.format(\"Hello %s! (%d ms)%n\", name, duration);\n+import io.smallrye.mutiny.Uni;\n+import io.vertx.mutiny.core.Vertx;\n \n-    // Complete\n-    future.complete(message);\n-});\n-----\n+import javax.inject.Inject;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n \n-That's it.\n-Now start Quarkus in `dev` mode with:\n+@Path(\"/lorem\")\n+public class GreetingResource {\n \n-[source, shell]\n-----\n-./mvnw compile quarkus:dev\n+    @Inject\n+    Vertx vertx;\n+\n+    @GET\n+    @Produces(MediaType.TEXT_PLAIN)\n+    public Uni<String> doSomethingAsync() {\n+        return vertx.fileSystem().readFile(\"/META-INF/resources/lorem.txt\")\n+                .onItem().apply(b -> b.toString(\"UTF-8\"));\n+    }\n+}\n ----\n \n-Eventually, open your browser and navigate to http://localhost:8080/hello/Quarkus, you should see:\n+In this code, we injects the `vertx` instance (`io.vertx.mutiny.core.Vertx`) and reads a file from the file system_.\n \n-[source, shell]\n+Creates the `src/main/resources/META_INF/resources/lorem.txt` file with the following content:\n+\n+[source,text]\n ----\n-Hello Quarkus! (10 ms)\n+Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\n ----\n \n+Then, refresh the page, you should the _lorem ipsum_ text.", "originalCommit": "c564bd79e9de0ba91e629d129e8da0167115288d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODgxMDQ1NA==", "url": "https://github.com/quarkusio/quarkus/pull/7177#discussion_r378810454", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * returning a https://www.reactive-streams.org/[Reactive Streams] `Publisher` or Mutiny `Multi`  (need the `quarkus-resteasy-mutiny` extension)\n          \n          \n            \n            * returning a https://www.reactive-streams.org/[Reactive Streams] `Publisher` or Mutiny `Multi`  (requires the `quarkus-resteasy-mutiny` extension)", "author": "gsmet", "createdAt": "2020-02-13T11:43:22Z", "path": "docs/src/main/asciidoc/vertx.adoc", "diffHunk": "@@ -135,73 +135,80 @@ Quarkus web resources support asynchronous processing and streaming results over\n \n === Asynchronous processing\n \n-Most programming guides start easy with a greeting service and this one makes no exception.\n-\n-To asynchronously greet a client, the endpoint method must return a `java.util.concurrent.CompletionStage`:\n+To asynchronously handle the HTTP request, the endpoint method must return a `java.util.concurrent.CompletionStage` or an `io.smallrye.mutiny.Uni` (need the `quarkus-resteasy-mutiny` extension):\n \n [source,java]\n ----\n-@Path(\"/hello\")\n+@Path(\"/lorem\")\n public class GreetingResource {\n \n-    @Inject\n-    Vertx vertx;\n-\n     @GET\n     @Produces(MediaType.TEXT_PLAIN)\n-    @Path(\"{name}\")\n-    public CompletionStage<String> greeting(@PathParam String name) {\n-        // When complete, return the content to the client\n-        CompletableFuture<String> future = new CompletableFuture<>();\n-\n-        long start = System.nanoTime();\n-\n-        // TODO: asynchronous greeting\n-\n-        return future;\n+    public Uni<String> doSomethingAsync() {\n+        // Mimic an asynchronous computation.\n+        return Uni.createFrom()\n+                .item(() -> \"Hello!\")\n+                .onItem().delayIt().by(Duration.ofMillis(10));\n     }\n }\n ----\n \n+\n+[source, shell]\n+----\n+./mvnw compile quarkus:dev\n+----\n+\n+Then, open your browser to 'http://localhost:8080/lorem' and you should get the message.\n+\n So far so good.\n-Now let's use the Vert.x API to implement the artificially delayed reply with the `setTimer` provided by Vert.x:\n+Now let's use the Vert.x API instead of this artificial delay:\n \n [source,java]\n ----\n-// Delay reply by 10ms\n-vertx.setTimer(10, l -> {\n-    // Compute elapsed time in milliseconds\n-    long duration = TimeUnit.MILLISECONDS.convert(System.nanoTime() - start, TimeUnit.NANOSECONDS);\n+package org.acme.vertx;\n \n-    // Format message\n-    String message = String.format(\"Hello %s! (%d ms)%n\", name, duration);\n+import io.smallrye.mutiny.Uni;\n+import io.vertx.mutiny.core.Vertx;\n \n-    // Complete\n-    future.complete(message);\n-});\n-----\n+import javax.inject.Inject;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n \n-That's it.\n-Now start Quarkus in `dev` mode with:\n+@Path(\"/lorem\")\n+public class GreetingResource {\n \n-[source, shell]\n-----\n-./mvnw compile quarkus:dev\n+    @Inject\n+    Vertx vertx;\n+\n+    @GET\n+    @Produces(MediaType.TEXT_PLAIN)\n+    public Uni<String> doSomethingAsync() {\n+        return vertx.fileSystem().readFile(\"/META-INF/resources/lorem.txt\")\n+                .onItem().apply(b -> b.toString(\"UTF-8\"));\n+    }\n+}\n ----\n \n-Eventually, open your browser and navigate to http://localhost:8080/hello/Quarkus, you should see:\n+In this code, we injects the `vertx` instance (`io.vertx.mutiny.core.Vertx`) and reads a file from the file system_.\n \n-[source, shell]\n+Creates the `src/main/resources/META_INF/resources/lorem.txt` file with the following content:\n+\n+[source,text]\n ----\n-Hello Quarkus! (10 ms)\n+Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\n ----\n \n+Then, refresh the page, you should the _lorem ipsum_ text.\n+\n === Streaming using Server-Sent Events\n \n Quarkus web resources that need to send content as https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events[server-sent events] must have a method:\n \n * declaring the `text/event-stream` response content type\n-* returning a https://www.reactive-streams.org/[Reactive Streams] `Publisher` or an RX Java 2 `Observable` or `Flowable`\n+* returning a https://www.reactive-streams.org/[Reactive Streams] `Publisher` or Mutiny `Multi`  (need the `quarkus-resteasy-mutiny` extension)", "originalCommit": "c564bd79e9de0ba91e629d129e8da0167115288d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODgxMDYwOA==", "url": "https://github.com/quarkusio/quarkus/pull/7177#discussion_r378810608", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Needless to say, this works equally well when the JSON content is a request body or is wrapped in an `Uni`, `Multi`, `CompletionStage` or `Publisher`.\n          \n          \n            \n            Needless to say, this works equally well when the JSON content is a request body or is wrapped in a `Uni`, `Multi`, `CompletionStage` or `Publisher`.", "author": "gsmet", "createdAt": "2020-02-13T11:43:45Z", "path": "docs/src/main/asciidoc/vertx.adoc", "diffHunk": "@@ -351,7 +360,7 @@ Then, navigate to http://localhost:8080/hello/Quarkus/array:\n [\"Hello\",\"Quarkus\"]\n ----\n \n-Needless to say, this works equally well when the JSON content is a request body or is wrapped in a `CompletionStage` or `Publisher`.\n+Needless to say, this works equally well when the JSON content is a request body or is wrapped in an `Uni`, `Multi`, `CompletionStage` or `Publisher`.", "originalCommit": "c564bd79e9de0ba91e629d129e8da0167115288d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODgxMDcyNQ==", "url": "https://github.com/quarkusio/quarkus/pull/7177#discussion_r378810725", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The `WebClient` is obviously asynchronous (and non-blocking), to the endpoint returns an `Uni`.\n          \n          \n            \n            The `WebClient` is obviously asynchronous (and non-blocking), to the endpoint returns a `Uni`.", "author": "gsmet", "createdAt": "2020-02-13T11:44:03Z", "path": "docs/src/main/asciidoc/vertx.adoc", "diffHunk": "@@ -456,11 +466,12 @@ public class ResourceUsingWebClient {\n     }\n \n }\n+\n ----\n \n-This resource creates a `WebClient` and upon request use this client to invoke the https://swapi.co/ API.\n+This resource creates a `WebClient` and upon request use this client to invoke the _fruityvice_ API.\n Depending on the result the response is forwarded as it's received, or a new JSON object is created with the status and body.\n-The `WebClient` is obviously asynchronous (and non-blocking), to the endpoint returns a `CompletionStage`.\n+The `WebClient` is obviously asynchronous (and non-blocking), to the endpoint returns an `Uni`.", "originalCommit": "c564bd79e9de0ba91e629d129e8da0167115288d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODk0NTA2MQ==", "url": "https://github.com/quarkusio/quarkus/pull/7177#discussion_r378945061", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              status: \"unstable\"\n          \n          \n            \n              status: \"experimental\"", "author": "gsmet", "createdAt": "2020-02-13T15:46:38Z", "path": "extensions/resteasy-mutiny/runtime/src/main/resources/META-INF/quarkus-extension.yaml", "diffHunk": "@@ -0,0 +1,11 @@\n+---\n+name: \"RESTEasy Mutiny\"\n+metadata:\n+  keywords:\n+    - \"resteasy-mutiny\"\n+    - \"resteasy\"\n+    - \"mutiny\"\n+  categories:\n+    - \"web\"\n+    - \"reactive\"\n+  status: \"unstable\"", "originalCommit": "c564bd79e9de0ba91e629d129e8da0167115288d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "ac320ad467ca33e9ad0683437893ae7671ef7e97", "url": "https://github.com/quarkusio/quarkus/commit/ac320ad467ca33e9ad0683437893ae7671ef7e97", "message": "Update documentation to use Resteasy-Mutiny\n\n* update the getting started async guide\n* update the vert.x guide to use the Mutiny API\n* update the rest-client guide to cover Uni\n* update the asynchronous message passing guide to use Uni and explain the API\n\nCo-Authored-By: Guillaume Smet <guillaume.smet@gmail.com>", "committedDate": "2020-02-15T13:13:11Z", "type": "forcePushed"}, {"oid": "91f19611438da78f86bc9d4b36cda715902bb414", "url": "https://github.com/quarkusio/quarkus/commit/91f19611438da78f86bc9d4b36cda715902bb414", "message": "Update documentation to use Resteasy-Mutiny\n\n* update the getting started async guide\n* update the vert.x guide to use the Mutiny API\n* update the rest-client guide to cover Uni\n* update the asynchronous message passing guide to use Uni and explain the API\n\nCo-Authored-By: Guillaume Smet <guillaume.smet@gmail.com>", "committedDate": "2020-02-17T12:44:40Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDUzOTQwNw==", "url": "https://github.com/quarkusio/quarkus/pull/7177#discussion_r380539407", "bodyText": "You removed the callouts in the code so the doc is failing because the 2 callouts are not found.", "author": "gsmet", "createdAt": "2020-02-18T09:09:05Z", "path": "docs/src/main/asciidoc/reactive-messaging.adoc", "diffHunk": "@@ -199,29 +199,32 @@ Sending and publishing messages use the Vert.x event bus:\n \n [source, java]\n ----\n-package org.acme;\n+package org.acme.vertx;\n \n-import io.vertx.axle.core.eventbus.EventBus;\n-import io.vertx.axle.core.eventbus.Message;\n+import io.smallrye.mutiny.Uni;\n+import io.vertx.mutiny.core.eventbus.EventBus;\n+import io.vertx.mutiny.core.eventbus.Message;\n+import org.jboss.resteasy.annotations.jaxrs.PathParam;\n \n import javax.inject.Inject;\n import javax.ws.rs.GET;\n import javax.ws.rs.Path;\n-import javax.ws.rs.PathParam;\n-import java.util.concurrent.CompletionStage;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n \n @Path(\"/async\")\n public class EventResource {\n \n-  @Inject\n-  EventBus bus;                                                        // <1>\n+    @Inject\n+    EventBus bus;\n \n-  @GET\n-  @Path(\"/{name}\")\n-  public CompletionStage<String> hello(String name) {\n-      return bus.<String>request(\"greeting\", name)                             // <2>\n-              .thenApply(Message::body);\n-  }\n+    @GET\n+    @Produces(MediaType.TEXT_PLAIN)\n+    @Path(\"{name}\")\n+    public Uni<String> greeting(@PathParam String name) {\n+        return bus.<String>request(\"greeting\", name)\n+                .onItem().apply(Message::body);\n+    }\n }\n ----\n <1> Inject the Event bus", "originalCommit": "9656a21b3d2b995e81eed1388c0343d69e1882a3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDU5ODIwNw==", "url": "https://github.com/quarkusio/quarkus/pull/7177#discussion_r380598207", "bodyText": "Fixed", "author": "cescoffier", "createdAt": "2020-02-18T10:53:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDUzOTQwNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDUzOTU3OA==", "url": "https://github.com/quarkusio/quarkus/pull/7177#discussion_r380539578", "bodyText": "Same here: the callouts were removed from the code.", "author": "gsmet", "createdAt": "2020-02-18T09:09:24Z", "path": "docs/src/main/asciidoc/reactive-messaging.adoc", "diffHunk": "@@ -272,30 +274,34 @@ Then, creates a new JAX-RS resource with the following content:\n ----\n package org.acme.vertx;\n \n-import io.vertx.axle.core.eventbus.EventBus;\n-import io.vertx.axle.core.eventbus.Message;\n+import io.smallrye.mutiny.Uni;\n+import io.vertx.mutiny.core.eventbus.EventBus;\n+import io.vertx.mutiny.core.eventbus.Message;\n+import org.jboss.resteasy.annotations.jaxrs.PathParam;\n \n import javax.inject.Inject;\n import javax.ws.rs.GET;\n import javax.ws.rs.Path;\n-import javax.ws.rs.PathParam;\n-import java.util.concurrent.CompletionStage;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n \n-@Path(\"/hello\")\n+@Path(\"/async\")\n public class EventResource {\n \n-    @Inject EventBus bus;\n+    @Inject\n+    EventBus bus;\n \n     @GET\n-    @Path(\"/async/{name}\")\n-    public CompletionStage<String> hello(@PathParam(\"name\") String name) {\n-        return bus.<String>request(\"greeting\", name)                        // <1>\n-                .thenApply(Message::body);                                  // <2>\n+    @Produces(MediaType.TEXT_PLAIN)\n+    @Path(\"{name}\")\n+    public Uni<String> greeting(@PathParam String name) {\n+        return bus.<String>request(\"greeting\", name)\n+                .onItem().apply(Message::body);\n     }\n }\n ----\n-<1> send the `name` to the `greeting` address\n-<2> when we get the reply, extract the body and send this as response to the user\n+<1> send the `name` to the `greeting` address and request a response\n+<2> when we get the response, extract the body and send it to the user", "originalCommit": "9656a21b3d2b995e81eed1388c0343d69e1882a3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDU5ODMyMg==", "url": "https://github.com/quarkusio/quarkus/pull/7177#discussion_r380598322", "bodyText": "Fixed.", "author": "cescoffier", "createdAt": "2020-02-18T10:53:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDUzOTU3OA=="}], "type": "inlineReview"}, {"oid": "69886c11eee8ef240d298d625810dba7cce2088d", "url": "https://github.com/quarkusio/quarkus/commit/69886c11eee8ef240d298d625810dba7cce2088d", "message": "Implement the RestEasy Mutiny support\n\nIt allows returning Uni and Multi in RestEasy endpoint\nIt also allows using Uni in the Rest Client\nThere is no `providers` file to avoid registering provider twice - only the processor should do it.", "committedDate": "2020-02-18T10:52:43Z", "type": "commit"}, {"oid": "52ffa0193d9249db993d0568cc568db97f45b3e5", "url": "https://github.com/quarkusio/quarkus/commit/52ffa0193d9249db993d0568cc568db97f45b3e5", "message": "Implement RestEasy Mutiny integration tests\n\nIt covers:\n* Method returning Uni\n* Method returning Multi (chunked and SSE)\n* Rest client returning Uni", "committedDate": "2020-02-18T10:52:43Z", "type": "commit"}, {"oid": "830696cb02753c18a08cf4527fd3d4ad7147fdc0", "url": "https://github.com/quarkusio/quarkus/commit/830696cb02753c18a08cf4527fd3d4ad7147fdc0", "message": "Update documentation to use Resteasy-Mutiny\n\n* update the getting started async guide\n* update the vert.x guide to use the Mutiny API\n* update the rest-client guide to cover Uni\n* update the asynchronous message passing guide to use Uni and explain the API\n\nCo-Authored-By: Guillaume Smet <guillaume.smet@gmail.com>", "committedDate": "2020-02-18T10:52:43Z", "type": "commit"}, {"oid": "830696cb02753c18a08cf4527fd3d4ad7147fdc0", "url": "https://github.com/quarkusio/quarkus/commit/830696cb02753c18a08cf4527fd3d4ad7147fdc0", "message": "Update documentation to use Resteasy-Mutiny\n\n* update the getting started async guide\n* update the vert.x guide to use the Mutiny API\n* update the rest-client guide to cover Uni\n* update the asynchronous message passing guide to use Uni and explain the API\n\nCo-Authored-By: Guillaume Smet <guillaume.smet@gmail.com>", "committedDate": "2020-02-18T10:52:43Z", "type": "forcePushed"}]}