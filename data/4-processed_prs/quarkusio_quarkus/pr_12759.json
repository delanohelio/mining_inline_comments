{"pr_number": 12759, "pr_title": "Add a Deploying to Google Cloud guide", "pr_createdAt": "2020-10-16T12:30:36Z", "pr_url": "https://github.com/quarkusio/quarkus/pull/12759", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjQ4NDMwOQ==", "url": "https://github.com/quarkusio/quarkus/pull/12759#discussion_r506484309", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Cloud run will ask you questions on the service name, the region and whether or not unauthenticated calls are allowed,\n          \n          \n            \n            Cloud run will ask you questions on the service name, the region and whether or not unauthenticated calls are allowed.", "author": "gastaldi", "createdAt": "2020-10-16T14:28:08Z", "path": "docs/src/main/asciidoc/deploying-to-google-cloud.adoc", "diffHunk": "@@ -0,0 +1,236 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Deploying to Google Cloud Platform (GCP)\n+\n+include::./attributes.adoc[]\n+\n+This guide covers:\n+\n+* Login to Google Cloud\n+* Deploying a function to Google Cloud Functions\n+* Deploying a JAR to Google App Engine Standard\n+* Deploying a Docker image to Google App Engine Flexible Custom Runtimes\n+* Deploying a Docker image to Google Cloud Run\n+\n+== Prerequisites\n+\n+For this guide you need:\n+\n+* Roughly 1 hour for all modalities\n+* JDK 11\n+* Apache Maven {maven-version}\n+* https://cloud.google.com/[A Google Cloud Account].  Free accounts work.\n+* https://cloud.google.com/sdk[Cloud SDK CLI Installed]\n+\n+This guide will take as input an application developed in the link:getting-started[Getting Started guide].\n+\n+Make sure you have the getting-started application at hand, or clone the Git repository: `git clone {quickstarts-clone-url}`,\n+or download an {quickstarts-archive-url}[archive]. The solution is located in the `getting-started` directory.\n+\n+== Login to Google Cloud\n+\n+Login to Google Cloud is necessary for deploying the application and it can be done as follows:\n+\n+[source, subs=attributes+]\n+----\n+gcloud auth login\n+----\n+\n+== Deploying to Google Cloud Functions\n+\n+Quarkus support deploying your application to Google Cloud Functions via the following extensions:\n+\n+- link:gcp-functions[Google Cloud Functions]: Build functions using the Google Cloud Functions API.\n+- link:gcp-functions-http[Google Cloud Functions HTTP binding]: Build functions using Quarkus HTTP APIs: RESTEasy (JAX-RS),\n+Undertow (Servlet), Vert.x Web, or link:funqy-http[Funqy HTTP].\n+- link:funqy-gcp-functions[Funky Google Cloud Functions]: Build functions using Funqy.\n+\n+Each extension support a specific kind of application development,\n+follow the specific guides for more information on how to develop, package and deploy you application with them.\n+\n+== Deploying to Google App Engine Standard\n+\n+We will only covers Java 11 runtime as the Java 8 runtime uses its own Servlet engine which is not compatible with Quarkus.\n+\n+Before all, make sure to have an App Engine environment initialized for your Google Cloud project, if not, initialize one via `gcloud app create --project=[YOUR_PROJECT_ID]`.\n+\n+Then, you will need to create a `src/main/appengine/app.yaml` file, let's keep it minimalistic with only the selected engine:\n+\n+[source, yaml]\n+----\n+runtime: java11\n+----\n+\n+This will create a default service for your App Engine application.\n+\n+Then, you can choose to build the application by yourself or letting `gcloud` or the Google Cloud Maven building it for you.\n+\n+=== Building the application manually\n+\n+Setup your application to be packaged as an uber-jar via your `application.properties` file:\n+\n+[source, properties]\n+----\n+quarkus.package.type=uber-jar\n+----\n+\n+Use Maven to build the application using `mvn clean package`, it will generate a single JAR that contains all the classes of your application including its dependencies.\n+\n+Finally, use `gcloud` to deploy your application as an App Engine service.\n+\n+[source, shell script]\n+----\n+gcloud app deploy target/getting-started-1.0-SNAPSHOT-runner.jar\n+----\n+\n+This command will upload your application jar and launch it on App Engine.\n+\n+When done, the output will display the URL of your application (target url), you can use it with curl or directly open it on your browser using `gcloud app browse`.\n+\n+As the getting started endpoint is located on the `/hello` path, make sure to navigate to it.\n+\n+=== Building the application via gcloud\n+\n+You can choose to let `gcloud` build your application for you, this is the simplest way to deploy to App Engine.\n+\n+Just launch `gcloud app deploy` on the root of your project, it will upload all your project files (the list can be reduced via the  `.gcloudignore` file),\n+package your JAR via Maven (or Gradle) and launch it on App Engine.\n+\n+When done, the output will display the URL of your application (target url), you can use it with curl or directly open it on your browser using `gcloud app browse`.\n+\n+As the getting started endpoint is located on the `/hello` path, make sure to navigate to it.\n+\n+=== Building the application via the Maven Google Cloud plugin\n+\n+You can also let Maven control the deployment of your application using the App Engine Maven plugin.\n+\n+First, add the plugin to your `pom.xml`:\n+\n+[source, xml]\n+----\n+<plugin>\n+    <groupId>com.google.cloud.tools</groupId>\n+    <artifactId>appengine-maven-plugin</artifactId>\n+    <version>2.4.0</version>\n+    <configuration>\n+        <projectId>GCLOUD_CONFIG</projectId> <!-- <1> -->\n+        <version>gettingstarted</version>\n+        <artifact>${project.build.directory}/getting-started-${project.version}-runner.jar</artifact> <!-- <2> -->\n+    </configuration>\n+</plugin>\n+----\n+\n+1. Use default `gcloud` configuration\n+2. Override the default JAR name to the one generated by the Quarkus Maven plugin\n+\n+Then you would be able to use Maven to build and deploy your application to App Engine via `mvn clean package appengine:deploy`.\n+\n+When done, the output will display the URL of your application (target url), you can use it with curl or directly open it on your browser using `gcloud app browse`.\n+\n+As the getting started endpoint is located on the `/hello` path, make sure to navigate to it.\n+\n+== Deploying to Google App Engine Flexible Custom Runtimes\n+\n+Before all, make sure to have an App Engine environment initialized for your Google Cloud project, if not, initialize one via `gcloud app create --project=[YOUR_PROJECT_ID]`.\n+\n+App Engine Flexible Custom Runtimes uses a Docker image to run your application.\n+\n+First, create an `app.yaml` file at the root of your project with the following content:\n+\n+[source, yaml]\n+----\n+runtime: custom\n+env: flex\n+----\n+\n+App Engine Flexible Custom Runtimes deploys your application as a Docker container, you can choose to deploy one of the Dockerfile provided inside your application.\n+\n+Both JVM and native executable versions will work.\n+\n+To deploy a JVM application:\n+\n+- Copy the JVM Dockerfile to the root directory of your project: `cp src/main/docker/Dockerfile.jvm Dockerfile`.\n+- Build your application using `mvn clean package`.\n+\n+To deploy a native application:\n+\n+- Copy the JVM Dockerfile to the root directory of your project: `cp src/main/docker/Dockerfile.native Dockerfile`.\n+- Build your application as a native executable using `mvn clean package -Pnative`.\n+\n+Finally, launch `gcloud app deploy` on the root of your project, it will upload all your project files (the list can be reduced via the  `.gcloudignore` file),\n+build your Dockerfile and launch it on App Engine Flexible custom runtime.\n+\n+It uses Cloud Build to build your Docker image and deploy it to Google Container Registry (GCR).\n+\n+When done, the output will display the URL of your application (target url), you can use it with curl or directly open it on your browser using `gcloud app browse`.\n+\n+As the getting started endpoint is located on the `/hello` path, make sure to navigate to it.\n+\n+NOTE: App Engine Flexible custom runtimes support link:https://cloud.google.com/appengine/docs/flexible/custom-runtimes/configuring-your-app-with-app-yaml#updated_health_checks[health checks],\n+it is strongly advised to provide them thanks to Quarkus link:microprofile-health[Microprofile Heath] support.\n+\n+== Deploying to Google Cloud Run\n+\n+Google Cloud Run allows you to run your Docker containers inside Google Cloud Platform in a managed way.\n+\n+NOTE: By default, Quarkus listens on port 8080, and it's also the Cloud Run default port.\n+No need to use the `PORT` environment variable defined in Cloud Run to customize the Quarkus HTTP port.\n+\n+Cloud Run will use Cloud Build to build your Docker image and deploy it to Google Container Registry (GCR).\n+\n+Both JVM and native executable versions will work.\n+\n+To deploy a JVM application:\n+\n+- Copy the JVM Dockerfile to the root directory of your project: `cp src/main/docker/Dockerfile.jvm Dockerfile`.\n+- Build your application using `mvn clean package`.\n+\n+To deploy a native application:\n+\n+- Copy the JVM Dockerfile to the root directory of your project: `cp src/main/docker/Dockerfile.native Dockerfile`.\n+- Build your application as a native executable using `mvn clean package -Pnative`.\n+\n+Then, create a `.gcloudignore` file to tell gcloud which file should be not be uploaded for Cloud Build,\n+without it, it defaults to `.gitignore` that usually exclude the target directory where you packaged application has been created.\n+\n+In this example, I only exclude the `src` directory:\n+\n+[source]\n+----\n+src/\n+----\n+[source]\n+\n+Then, use Cloud Build to build your image, it will upload to a Google Cloud Storage bucket all the files of your application (except the ones ignored by the `.gcloudignore`file),\n+build your Docker image and push it to Google Container Registry (GCR).\n+\n+[source, shell script]\n+----\n+gcloud builds submit --tag gcr.io/PROJECT-ID/helloworld\n+----\n+\n+NOTE: You can also build your image locally and push it to a publicly accessible Docker registry, then use this image in the next step.\n+\n+Finally, use Cloud Run to launch your application.\n+\n+[source, shell script]\n+----\n+gcloud run deploy --image gcr.io/PROJECT-ID/helloworld --platform managed\n+----\n+\n+Cloud run will ask you questions on the service name, the region and whether or not unauthenticated calls are allowed,", "originalCommit": "5ca35a17560559fb65581342b37beaf40d5ac466", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjQ4NTA5Nw==", "url": "https://github.com/quarkusio/quarkus/pull/12759#discussion_r506485097", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            answer to these questions, and it will start deploying your application.\n          \n          \n            \n            After you answer to these questions, it will deploy your application.", "author": "gastaldi", "createdAt": "2020-10-16T14:28:48Z", "path": "docs/src/main/asciidoc/deploying-to-google-cloud.adoc", "diffHunk": "@@ -0,0 +1,236 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Deploying to Google Cloud Platform (GCP)\n+\n+include::./attributes.adoc[]\n+\n+This guide covers:\n+\n+* Login to Google Cloud\n+* Deploying a function to Google Cloud Functions\n+* Deploying a JAR to Google App Engine Standard\n+* Deploying a Docker image to Google App Engine Flexible Custom Runtimes\n+* Deploying a Docker image to Google Cloud Run\n+\n+== Prerequisites\n+\n+For this guide you need:\n+\n+* Roughly 1 hour for all modalities\n+* JDK 11\n+* Apache Maven {maven-version}\n+* https://cloud.google.com/[A Google Cloud Account].  Free accounts work.\n+* https://cloud.google.com/sdk[Cloud SDK CLI Installed]\n+\n+This guide will take as input an application developed in the link:getting-started[Getting Started guide].\n+\n+Make sure you have the getting-started application at hand, or clone the Git repository: `git clone {quickstarts-clone-url}`,\n+or download an {quickstarts-archive-url}[archive]. The solution is located in the `getting-started` directory.\n+\n+== Login to Google Cloud\n+\n+Login to Google Cloud is necessary for deploying the application and it can be done as follows:\n+\n+[source, subs=attributes+]\n+----\n+gcloud auth login\n+----\n+\n+== Deploying to Google Cloud Functions\n+\n+Quarkus support deploying your application to Google Cloud Functions via the following extensions:\n+\n+- link:gcp-functions[Google Cloud Functions]: Build functions using the Google Cloud Functions API.\n+- link:gcp-functions-http[Google Cloud Functions HTTP binding]: Build functions using Quarkus HTTP APIs: RESTEasy (JAX-RS),\n+Undertow (Servlet), Vert.x Web, or link:funqy-http[Funqy HTTP].\n+- link:funqy-gcp-functions[Funky Google Cloud Functions]: Build functions using Funqy.\n+\n+Each extension support a specific kind of application development,\n+follow the specific guides for more information on how to develop, package and deploy you application with them.\n+\n+== Deploying to Google App Engine Standard\n+\n+We will only covers Java 11 runtime as the Java 8 runtime uses its own Servlet engine which is not compatible with Quarkus.\n+\n+Before all, make sure to have an App Engine environment initialized for your Google Cloud project, if not, initialize one via `gcloud app create --project=[YOUR_PROJECT_ID]`.\n+\n+Then, you will need to create a `src/main/appengine/app.yaml` file, let's keep it minimalistic with only the selected engine:\n+\n+[source, yaml]\n+----\n+runtime: java11\n+----\n+\n+This will create a default service for your App Engine application.\n+\n+Then, you can choose to build the application by yourself or letting `gcloud` or the Google Cloud Maven building it for you.\n+\n+=== Building the application manually\n+\n+Setup your application to be packaged as an uber-jar via your `application.properties` file:\n+\n+[source, properties]\n+----\n+quarkus.package.type=uber-jar\n+----\n+\n+Use Maven to build the application using `mvn clean package`, it will generate a single JAR that contains all the classes of your application including its dependencies.\n+\n+Finally, use `gcloud` to deploy your application as an App Engine service.\n+\n+[source, shell script]\n+----\n+gcloud app deploy target/getting-started-1.0-SNAPSHOT-runner.jar\n+----\n+\n+This command will upload your application jar and launch it on App Engine.\n+\n+When done, the output will display the URL of your application (target url), you can use it with curl or directly open it on your browser using `gcloud app browse`.\n+\n+As the getting started endpoint is located on the `/hello` path, make sure to navigate to it.\n+\n+=== Building the application via gcloud\n+\n+You can choose to let `gcloud` build your application for you, this is the simplest way to deploy to App Engine.\n+\n+Just launch `gcloud app deploy` on the root of your project, it will upload all your project files (the list can be reduced via the  `.gcloudignore` file),\n+package your JAR via Maven (or Gradle) and launch it on App Engine.\n+\n+When done, the output will display the URL of your application (target url), you can use it with curl or directly open it on your browser using `gcloud app browse`.\n+\n+As the getting started endpoint is located on the `/hello` path, make sure to navigate to it.\n+\n+=== Building the application via the Maven Google Cloud plugin\n+\n+You can also let Maven control the deployment of your application using the App Engine Maven plugin.\n+\n+First, add the plugin to your `pom.xml`:\n+\n+[source, xml]\n+----\n+<plugin>\n+    <groupId>com.google.cloud.tools</groupId>\n+    <artifactId>appengine-maven-plugin</artifactId>\n+    <version>2.4.0</version>\n+    <configuration>\n+        <projectId>GCLOUD_CONFIG</projectId> <!-- <1> -->\n+        <version>gettingstarted</version>\n+        <artifact>${project.build.directory}/getting-started-${project.version}-runner.jar</artifact> <!-- <2> -->\n+    </configuration>\n+</plugin>\n+----\n+\n+1. Use default `gcloud` configuration\n+2. Override the default JAR name to the one generated by the Quarkus Maven plugin\n+\n+Then you would be able to use Maven to build and deploy your application to App Engine via `mvn clean package appengine:deploy`.\n+\n+When done, the output will display the URL of your application (target url), you can use it with curl or directly open it on your browser using `gcloud app browse`.\n+\n+As the getting started endpoint is located on the `/hello` path, make sure to navigate to it.\n+\n+== Deploying to Google App Engine Flexible Custom Runtimes\n+\n+Before all, make sure to have an App Engine environment initialized for your Google Cloud project, if not, initialize one via `gcloud app create --project=[YOUR_PROJECT_ID]`.\n+\n+App Engine Flexible Custom Runtimes uses a Docker image to run your application.\n+\n+First, create an `app.yaml` file at the root of your project with the following content:\n+\n+[source, yaml]\n+----\n+runtime: custom\n+env: flex\n+----\n+\n+App Engine Flexible Custom Runtimes deploys your application as a Docker container, you can choose to deploy one of the Dockerfile provided inside your application.\n+\n+Both JVM and native executable versions will work.\n+\n+To deploy a JVM application:\n+\n+- Copy the JVM Dockerfile to the root directory of your project: `cp src/main/docker/Dockerfile.jvm Dockerfile`.\n+- Build your application using `mvn clean package`.\n+\n+To deploy a native application:\n+\n+- Copy the JVM Dockerfile to the root directory of your project: `cp src/main/docker/Dockerfile.native Dockerfile`.\n+- Build your application as a native executable using `mvn clean package -Pnative`.\n+\n+Finally, launch `gcloud app deploy` on the root of your project, it will upload all your project files (the list can be reduced via the  `.gcloudignore` file),\n+build your Dockerfile and launch it on App Engine Flexible custom runtime.\n+\n+It uses Cloud Build to build your Docker image and deploy it to Google Container Registry (GCR).\n+\n+When done, the output will display the URL of your application (target url), you can use it with curl or directly open it on your browser using `gcloud app browse`.\n+\n+As the getting started endpoint is located on the `/hello` path, make sure to navigate to it.\n+\n+NOTE: App Engine Flexible custom runtimes support link:https://cloud.google.com/appengine/docs/flexible/custom-runtimes/configuring-your-app-with-app-yaml#updated_health_checks[health checks],\n+it is strongly advised to provide them thanks to Quarkus link:microprofile-health[Microprofile Heath] support.\n+\n+== Deploying to Google Cloud Run\n+\n+Google Cloud Run allows you to run your Docker containers inside Google Cloud Platform in a managed way.\n+\n+NOTE: By default, Quarkus listens on port 8080, and it's also the Cloud Run default port.\n+No need to use the `PORT` environment variable defined in Cloud Run to customize the Quarkus HTTP port.\n+\n+Cloud Run will use Cloud Build to build your Docker image and deploy it to Google Container Registry (GCR).\n+\n+Both JVM and native executable versions will work.\n+\n+To deploy a JVM application:\n+\n+- Copy the JVM Dockerfile to the root directory of your project: `cp src/main/docker/Dockerfile.jvm Dockerfile`.\n+- Build your application using `mvn clean package`.\n+\n+To deploy a native application:\n+\n+- Copy the JVM Dockerfile to the root directory of your project: `cp src/main/docker/Dockerfile.native Dockerfile`.\n+- Build your application as a native executable using `mvn clean package -Pnative`.\n+\n+Then, create a `.gcloudignore` file to tell gcloud which file should be not be uploaded for Cloud Build,\n+without it, it defaults to `.gitignore` that usually exclude the target directory where you packaged application has been created.\n+\n+In this example, I only exclude the `src` directory:\n+\n+[source]\n+----\n+src/\n+----\n+[source]\n+\n+Then, use Cloud Build to build your image, it will upload to a Google Cloud Storage bucket all the files of your application (except the ones ignored by the `.gcloudignore`file),\n+build your Docker image and push it to Google Container Registry (GCR).\n+\n+[source, shell script]\n+----\n+gcloud builds submit --tag gcr.io/PROJECT-ID/helloworld\n+----\n+\n+NOTE: You can also build your image locally and push it to a publicly accessible Docker registry, then use this image in the next step.\n+\n+Finally, use Cloud Run to launch your application.\n+\n+[source, shell script]\n+----\n+gcloud run deploy --image gcr.io/PROJECT-ID/helloworld --platform managed\n+----\n+\n+Cloud run will ask you questions on the service name, the region and whether or not unauthenticated calls are allowed,\n+answer to these questions, and it will start deploying your application.", "originalCommit": "5ca35a17560559fb65581342b37beaf40d5ac466", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjQ4NjU3OQ==", "url": "https://github.com/quarkusio/quarkus/pull/12759#discussion_r506486579", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            When done, the output will display the URL of your application, you can use it to access your application.\n          \n          \n            \n            When the deployment is done, the output will display the URL to access your application.", "author": "gastaldi", "createdAt": "2020-10-16T14:30:06Z", "path": "docs/src/main/asciidoc/deploying-to-google-cloud.adoc", "diffHunk": "@@ -0,0 +1,236 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Deploying to Google Cloud Platform (GCP)\n+\n+include::./attributes.adoc[]\n+\n+This guide covers:\n+\n+* Login to Google Cloud\n+* Deploying a function to Google Cloud Functions\n+* Deploying a JAR to Google App Engine Standard\n+* Deploying a Docker image to Google App Engine Flexible Custom Runtimes\n+* Deploying a Docker image to Google Cloud Run\n+\n+== Prerequisites\n+\n+For this guide you need:\n+\n+* Roughly 1 hour for all modalities\n+* JDK 11\n+* Apache Maven {maven-version}\n+* https://cloud.google.com/[A Google Cloud Account].  Free accounts work.\n+* https://cloud.google.com/sdk[Cloud SDK CLI Installed]\n+\n+This guide will take as input an application developed in the link:getting-started[Getting Started guide].\n+\n+Make sure you have the getting-started application at hand, or clone the Git repository: `git clone {quickstarts-clone-url}`,\n+or download an {quickstarts-archive-url}[archive]. The solution is located in the `getting-started` directory.\n+\n+== Login to Google Cloud\n+\n+Login to Google Cloud is necessary for deploying the application and it can be done as follows:\n+\n+[source, subs=attributes+]\n+----\n+gcloud auth login\n+----\n+\n+== Deploying to Google Cloud Functions\n+\n+Quarkus support deploying your application to Google Cloud Functions via the following extensions:\n+\n+- link:gcp-functions[Google Cloud Functions]: Build functions using the Google Cloud Functions API.\n+- link:gcp-functions-http[Google Cloud Functions HTTP binding]: Build functions using Quarkus HTTP APIs: RESTEasy (JAX-RS),\n+Undertow (Servlet), Vert.x Web, or link:funqy-http[Funqy HTTP].\n+- link:funqy-gcp-functions[Funky Google Cloud Functions]: Build functions using Funqy.\n+\n+Each extension support a specific kind of application development,\n+follow the specific guides for more information on how to develop, package and deploy you application with them.\n+\n+== Deploying to Google App Engine Standard\n+\n+We will only covers Java 11 runtime as the Java 8 runtime uses its own Servlet engine which is not compatible with Quarkus.\n+\n+Before all, make sure to have an App Engine environment initialized for your Google Cloud project, if not, initialize one via `gcloud app create --project=[YOUR_PROJECT_ID]`.\n+\n+Then, you will need to create a `src/main/appengine/app.yaml` file, let's keep it minimalistic with only the selected engine:\n+\n+[source, yaml]\n+----\n+runtime: java11\n+----\n+\n+This will create a default service for your App Engine application.\n+\n+Then, you can choose to build the application by yourself or letting `gcloud` or the Google Cloud Maven building it for you.\n+\n+=== Building the application manually\n+\n+Setup your application to be packaged as an uber-jar via your `application.properties` file:\n+\n+[source, properties]\n+----\n+quarkus.package.type=uber-jar\n+----\n+\n+Use Maven to build the application using `mvn clean package`, it will generate a single JAR that contains all the classes of your application including its dependencies.\n+\n+Finally, use `gcloud` to deploy your application as an App Engine service.\n+\n+[source, shell script]\n+----\n+gcloud app deploy target/getting-started-1.0-SNAPSHOT-runner.jar\n+----\n+\n+This command will upload your application jar and launch it on App Engine.\n+\n+When done, the output will display the URL of your application (target url), you can use it with curl or directly open it on your browser using `gcloud app browse`.\n+\n+As the getting started endpoint is located on the `/hello` path, make sure to navigate to it.\n+\n+=== Building the application via gcloud\n+\n+You can choose to let `gcloud` build your application for you, this is the simplest way to deploy to App Engine.\n+\n+Just launch `gcloud app deploy` on the root of your project, it will upload all your project files (the list can be reduced via the  `.gcloudignore` file),\n+package your JAR via Maven (or Gradle) and launch it on App Engine.\n+\n+When done, the output will display the URL of your application (target url), you can use it with curl or directly open it on your browser using `gcloud app browse`.\n+\n+As the getting started endpoint is located on the `/hello` path, make sure to navigate to it.\n+\n+=== Building the application via the Maven Google Cloud plugin\n+\n+You can also let Maven control the deployment of your application using the App Engine Maven plugin.\n+\n+First, add the plugin to your `pom.xml`:\n+\n+[source, xml]\n+----\n+<plugin>\n+    <groupId>com.google.cloud.tools</groupId>\n+    <artifactId>appengine-maven-plugin</artifactId>\n+    <version>2.4.0</version>\n+    <configuration>\n+        <projectId>GCLOUD_CONFIG</projectId> <!-- <1> -->\n+        <version>gettingstarted</version>\n+        <artifact>${project.build.directory}/getting-started-${project.version}-runner.jar</artifact> <!-- <2> -->\n+    </configuration>\n+</plugin>\n+----\n+\n+1. Use default `gcloud` configuration\n+2. Override the default JAR name to the one generated by the Quarkus Maven plugin\n+\n+Then you would be able to use Maven to build and deploy your application to App Engine via `mvn clean package appengine:deploy`.\n+\n+When done, the output will display the URL of your application (target url), you can use it with curl or directly open it on your browser using `gcloud app browse`.\n+\n+As the getting started endpoint is located on the `/hello` path, make sure to navigate to it.\n+\n+== Deploying to Google App Engine Flexible Custom Runtimes\n+\n+Before all, make sure to have an App Engine environment initialized for your Google Cloud project, if not, initialize one via `gcloud app create --project=[YOUR_PROJECT_ID]`.\n+\n+App Engine Flexible Custom Runtimes uses a Docker image to run your application.\n+\n+First, create an `app.yaml` file at the root of your project with the following content:\n+\n+[source, yaml]\n+----\n+runtime: custom\n+env: flex\n+----\n+\n+App Engine Flexible Custom Runtimes deploys your application as a Docker container, you can choose to deploy one of the Dockerfile provided inside your application.\n+\n+Both JVM and native executable versions will work.\n+\n+To deploy a JVM application:\n+\n+- Copy the JVM Dockerfile to the root directory of your project: `cp src/main/docker/Dockerfile.jvm Dockerfile`.\n+- Build your application using `mvn clean package`.\n+\n+To deploy a native application:\n+\n+- Copy the JVM Dockerfile to the root directory of your project: `cp src/main/docker/Dockerfile.native Dockerfile`.\n+- Build your application as a native executable using `mvn clean package -Pnative`.\n+\n+Finally, launch `gcloud app deploy` on the root of your project, it will upload all your project files (the list can be reduced via the  `.gcloudignore` file),\n+build your Dockerfile and launch it on App Engine Flexible custom runtime.\n+\n+It uses Cloud Build to build your Docker image and deploy it to Google Container Registry (GCR).\n+\n+When done, the output will display the URL of your application (target url), you can use it with curl or directly open it on your browser using `gcloud app browse`.\n+\n+As the getting started endpoint is located on the `/hello` path, make sure to navigate to it.\n+\n+NOTE: App Engine Flexible custom runtimes support link:https://cloud.google.com/appengine/docs/flexible/custom-runtimes/configuring-your-app-with-app-yaml#updated_health_checks[health checks],\n+it is strongly advised to provide them thanks to Quarkus link:microprofile-health[Microprofile Heath] support.\n+\n+== Deploying to Google Cloud Run\n+\n+Google Cloud Run allows you to run your Docker containers inside Google Cloud Platform in a managed way.\n+\n+NOTE: By default, Quarkus listens on port 8080, and it's also the Cloud Run default port.\n+No need to use the `PORT` environment variable defined in Cloud Run to customize the Quarkus HTTP port.\n+\n+Cloud Run will use Cloud Build to build your Docker image and deploy it to Google Container Registry (GCR).\n+\n+Both JVM and native executable versions will work.\n+\n+To deploy a JVM application:\n+\n+- Copy the JVM Dockerfile to the root directory of your project: `cp src/main/docker/Dockerfile.jvm Dockerfile`.\n+- Build your application using `mvn clean package`.\n+\n+To deploy a native application:\n+\n+- Copy the JVM Dockerfile to the root directory of your project: `cp src/main/docker/Dockerfile.native Dockerfile`.\n+- Build your application as a native executable using `mvn clean package -Pnative`.\n+\n+Then, create a `.gcloudignore` file to tell gcloud which file should be not be uploaded for Cloud Build,\n+without it, it defaults to `.gitignore` that usually exclude the target directory where you packaged application has been created.\n+\n+In this example, I only exclude the `src` directory:\n+\n+[source]\n+----\n+src/\n+----\n+[source]\n+\n+Then, use Cloud Build to build your image, it will upload to a Google Cloud Storage bucket all the files of your application (except the ones ignored by the `.gcloudignore`file),\n+build your Docker image and push it to Google Container Registry (GCR).\n+\n+[source, shell script]\n+----\n+gcloud builds submit --tag gcr.io/PROJECT-ID/helloworld\n+----\n+\n+NOTE: You can also build your image locally and push it to a publicly accessible Docker registry, then use this image in the next step.\n+\n+Finally, use Cloud Run to launch your application.\n+\n+[source, shell script]\n+----\n+gcloud run deploy --image gcr.io/PROJECT-ID/helloworld --platform managed\n+----\n+\n+Cloud run will ask you questions on the service name, the region and whether or not unauthenticated calls are allowed,\n+answer to these questions, and it will start deploying your application.\n+\n+When done, the output will display the URL of your application, you can use it to access your application.", "originalCommit": "5ca35a17560559fb65581342b37beaf40d5ac466", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjQ4OTM2OA==", "url": "https://github.com/quarkusio/quarkus/pull/12759#discussion_r506489368", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            In the Quarkiverse (third party Quarkus extensions catalog), there exist a set of extensions to access various Google Cloud services\n          \n          \n            \n            You can find a set of extensions to access various Google Cloud Services in the Quarkiverse (a GitHub organization for Quarkus extensions maintained by the community),", "author": "gastaldi", "createdAt": "2020-10-16T14:32:52Z", "path": "docs/src/main/asciidoc/deploying-to-google-cloud.adoc", "diffHunk": "@@ -0,0 +1,236 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Deploying to Google Cloud Platform (GCP)\n+\n+include::./attributes.adoc[]\n+\n+This guide covers:\n+\n+* Login to Google Cloud\n+* Deploying a function to Google Cloud Functions\n+* Deploying a JAR to Google App Engine Standard\n+* Deploying a Docker image to Google App Engine Flexible Custom Runtimes\n+* Deploying a Docker image to Google Cloud Run\n+\n+== Prerequisites\n+\n+For this guide you need:\n+\n+* Roughly 1 hour for all modalities\n+* JDK 11\n+* Apache Maven {maven-version}\n+* https://cloud.google.com/[A Google Cloud Account].  Free accounts work.\n+* https://cloud.google.com/sdk[Cloud SDK CLI Installed]\n+\n+This guide will take as input an application developed in the link:getting-started[Getting Started guide].\n+\n+Make sure you have the getting-started application at hand, or clone the Git repository: `git clone {quickstarts-clone-url}`,\n+or download an {quickstarts-archive-url}[archive]. The solution is located in the `getting-started` directory.\n+\n+== Login to Google Cloud\n+\n+Login to Google Cloud is necessary for deploying the application and it can be done as follows:\n+\n+[source, subs=attributes+]\n+----\n+gcloud auth login\n+----\n+\n+== Deploying to Google Cloud Functions\n+\n+Quarkus support deploying your application to Google Cloud Functions via the following extensions:\n+\n+- link:gcp-functions[Google Cloud Functions]: Build functions using the Google Cloud Functions API.\n+- link:gcp-functions-http[Google Cloud Functions HTTP binding]: Build functions using Quarkus HTTP APIs: RESTEasy (JAX-RS),\n+Undertow (Servlet), Vert.x Web, or link:funqy-http[Funqy HTTP].\n+- link:funqy-gcp-functions[Funky Google Cloud Functions]: Build functions using Funqy.\n+\n+Each extension support a specific kind of application development,\n+follow the specific guides for more information on how to develop, package and deploy you application with them.\n+\n+== Deploying to Google App Engine Standard\n+\n+We will only covers Java 11 runtime as the Java 8 runtime uses its own Servlet engine which is not compatible with Quarkus.\n+\n+Before all, make sure to have an App Engine environment initialized for your Google Cloud project, if not, initialize one via `gcloud app create --project=[YOUR_PROJECT_ID]`.\n+\n+Then, you will need to create a `src/main/appengine/app.yaml` file, let's keep it minimalistic with only the selected engine:\n+\n+[source, yaml]\n+----\n+runtime: java11\n+----\n+\n+This will create a default service for your App Engine application.\n+\n+Then, you can choose to build the application by yourself or letting `gcloud` or the Google Cloud Maven building it for you.\n+\n+=== Building the application manually\n+\n+Setup your application to be packaged as an uber-jar via your `application.properties` file:\n+\n+[source, properties]\n+----\n+quarkus.package.type=uber-jar\n+----\n+\n+Use Maven to build the application using `mvn clean package`, it will generate a single JAR that contains all the classes of your application including its dependencies.\n+\n+Finally, use `gcloud` to deploy your application as an App Engine service.\n+\n+[source, shell script]\n+----\n+gcloud app deploy target/getting-started-1.0-SNAPSHOT-runner.jar\n+----\n+\n+This command will upload your application jar and launch it on App Engine.\n+\n+When done, the output will display the URL of your application (target url), you can use it with curl or directly open it on your browser using `gcloud app browse`.\n+\n+As the getting started endpoint is located on the `/hello` path, make sure to navigate to it.\n+\n+=== Building the application via gcloud\n+\n+You can choose to let `gcloud` build your application for you, this is the simplest way to deploy to App Engine.\n+\n+Just launch `gcloud app deploy` on the root of your project, it will upload all your project files (the list can be reduced via the  `.gcloudignore` file),\n+package your JAR via Maven (or Gradle) and launch it on App Engine.\n+\n+When done, the output will display the URL of your application (target url), you can use it with curl or directly open it on your browser using `gcloud app browse`.\n+\n+As the getting started endpoint is located on the `/hello` path, make sure to navigate to it.\n+\n+=== Building the application via the Maven Google Cloud plugin\n+\n+You can also let Maven control the deployment of your application using the App Engine Maven plugin.\n+\n+First, add the plugin to your `pom.xml`:\n+\n+[source, xml]\n+----\n+<plugin>\n+    <groupId>com.google.cloud.tools</groupId>\n+    <artifactId>appengine-maven-plugin</artifactId>\n+    <version>2.4.0</version>\n+    <configuration>\n+        <projectId>GCLOUD_CONFIG</projectId> <!-- <1> -->\n+        <version>gettingstarted</version>\n+        <artifact>${project.build.directory}/getting-started-${project.version}-runner.jar</artifact> <!-- <2> -->\n+    </configuration>\n+</plugin>\n+----\n+\n+1. Use default `gcloud` configuration\n+2. Override the default JAR name to the one generated by the Quarkus Maven plugin\n+\n+Then you would be able to use Maven to build and deploy your application to App Engine via `mvn clean package appengine:deploy`.\n+\n+When done, the output will display the URL of your application (target url), you can use it with curl or directly open it on your browser using `gcloud app browse`.\n+\n+As the getting started endpoint is located on the `/hello` path, make sure to navigate to it.\n+\n+== Deploying to Google App Engine Flexible Custom Runtimes\n+\n+Before all, make sure to have an App Engine environment initialized for your Google Cloud project, if not, initialize one via `gcloud app create --project=[YOUR_PROJECT_ID]`.\n+\n+App Engine Flexible Custom Runtimes uses a Docker image to run your application.\n+\n+First, create an `app.yaml` file at the root of your project with the following content:\n+\n+[source, yaml]\n+----\n+runtime: custom\n+env: flex\n+----\n+\n+App Engine Flexible Custom Runtimes deploys your application as a Docker container, you can choose to deploy one of the Dockerfile provided inside your application.\n+\n+Both JVM and native executable versions will work.\n+\n+To deploy a JVM application:\n+\n+- Copy the JVM Dockerfile to the root directory of your project: `cp src/main/docker/Dockerfile.jvm Dockerfile`.\n+- Build your application using `mvn clean package`.\n+\n+To deploy a native application:\n+\n+- Copy the JVM Dockerfile to the root directory of your project: `cp src/main/docker/Dockerfile.native Dockerfile`.\n+- Build your application as a native executable using `mvn clean package -Pnative`.\n+\n+Finally, launch `gcloud app deploy` on the root of your project, it will upload all your project files (the list can be reduced via the  `.gcloudignore` file),\n+build your Dockerfile and launch it on App Engine Flexible custom runtime.\n+\n+It uses Cloud Build to build your Docker image and deploy it to Google Container Registry (GCR).\n+\n+When done, the output will display the URL of your application (target url), you can use it with curl or directly open it on your browser using `gcloud app browse`.\n+\n+As the getting started endpoint is located on the `/hello` path, make sure to navigate to it.\n+\n+NOTE: App Engine Flexible custom runtimes support link:https://cloud.google.com/appengine/docs/flexible/custom-runtimes/configuring-your-app-with-app-yaml#updated_health_checks[health checks],\n+it is strongly advised to provide them thanks to Quarkus link:microprofile-health[Microprofile Heath] support.\n+\n+== Deploying to Google Cloud Run\n+\n+Google Cloud Run allows you to run your Docker containers inside Google Cloud Platform in a managed way.\n+\n+NOTE: By default, Quarkus listens on port 8080, and it's also the Cloud Run default port.\n+No need to use the `PORT` environment variable defined in Cloud Run to customize the Quarkus HTTP port.\n+\n+Cloud Run will use Cloud Build to build your Docker image and deploy it to Google Container Registry (GCR).\n+\n+Both JVM and native executable versions will work.\n+\n+To deploy a JVM application:\n+\n+- Copy the JVM Dockerfile to the root directory of your project: `cp src/main/docker/Dockerfile.jvm Dockerfile`.\n+- Build your application using `mvn clean package`.\n+\n+To deploy a native application:\n+\n+- Copy the JVM Dockerfile to the root directory of your project: `cp src/main/docker/Dockerfile.native Dockerfile`.\n+- Build your application as a native executable using `mvn clean package -Pnative`.\n+\n+Then, create a `.gcloudignore` file to tell gcloud which file should be not be uploaded for Cloud Build,\n+without it, it defaults to `.gitignore` that usually exclude the target directory where you packaged application has been created.\n+\n+In this example, I only exclude the `src` directory:\n+\n+[source]\n+----\n+src/\n+----\n+[source]\n+\n+Then, use Cloud Build to build your image, it will upload to a Google Cloud Storage bucket all the files of your application (except the ones ignored by the `.gcloudignore`file),\n+build your Docker image and push it to Google Container Registry (GCR).\n+\n+[source, shell script]\n+----\n+gcloud builds submit --tag gcr.io/PROJECT-ID/helloworld\n+----\n+\n+NOTE: You can also build your image locally and push it to a publicly accessible Docker registry, then use this image in the next step.\n+\n+Finally, use Cloud Run to launch your application.\n+\n+[source, shell script]\n+----\n+gcloud run deploy --image gcr.io/PROJECT-ID/helloworld --platform managed\n+----\n+\n+Cloud run will ask you questions on the service name, the region and whether or not unauthenticated calls are allowed,\n+answer to these questions, and it will start deploying your application.\n+\n+When done, the output will display the URL of your application, you can use it to access your application.\n+\n+As the getting started endpoint is located on the `/hello` path, make sure to navigate to it.\n+\n+== Going further\n+\n+In the Quarkiverse (third party Quarkus extensions catalog), there exist a set of extensions to access various Google Cloud services", "originalCommit": "5ca35a17560559fb65581342b37beaf40d5ac466", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjQ5MDYxNQ==", "url": "https://github.com/quarkusio/quarkus/pull/12759#discussion_r506490615", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Quarkus support deploying your application to Google Cloud Functions via the following extensions:\n          \n          \n            \n            Quarkus supports deploying your application to Google Cloud Functions via the following extensions:", "author": "gastaldi", "createdAt": "2020-10-16T14:34:06Z", "path": "docs/src/main/asciidoc/deploying-to-google-cloud.adoc", "diffHunk": "@@ -0,0 +1,236 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Deploying to Google Cloud Platform (GCP)\n+\n+include::./attributes.adoc[]\n+\n+This guide covers:\n+\n+* Login to Google Cloud\n+* Deploying a function to Google Cloud Functions\n+* Deploying a JAR to Google App Engine Standard\n+* Deploying a Docker image to Google App Engine Flexible Custom Runtimes\n+* Deploying a Docker image to Google Cloud Run\n+\n+== Prerequisites\n+\n+For this guide you need:\n+\n+* Roughly 1 hour for all modalities\n+* JDK 11\n+* Apache Maven {maven-version}\n+* https://cloud.google.com/[A Google Cloud Account].  Free accounts work.\n+* https://cloud.google.com/sdk[Cloud SDK CLI Installed]\n+\n+This guide will take as input an application developed in the link:getting-started[Getting Started guide].\n+\n+Make sure you have the getting-started application at hand, or clone the Git repository: `git clone {quickstarts-clone-url}`,\n+or download an {quickstarts-archive-url}[archive]. The solution is located in the `getting-started` directory.\n+\n+== Login to Google Cloud\n+\n+Login to Google Cloud is necessary for deploying the application and it can be done as follows:\n+\n+[source, subs=attributes+]\n+----\n+gcloud auth login\n+----\n+\n+== Deploying to Google Cloud Functions\n+\n+Quarkus support deploying your application to Google Cloud Functions via the following extensions:", "originalCommit": "5ca35a17560559fb65581342b37beaf40d5ac466", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjQ5MTcyNg==", "url": "https://github.com/quarkusio/quarkus/pull/12759#discussion_r506491726", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            follow the specific guides for more information on how to develop, package and deploy you application with them.\n          \n          \n            \n            follow the specific guides for more information on how to develop, package and deploy your application using them.", "author": "gastaldi", "createdAt": "2020-10-16T14:35:12Z", "path": "docs/src/main/asciidoc/deploying-to-google-cloud.adoc", "diffHunk": "@@ -0,0 +1,236 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Deploying to Google Cloud Platform (GCP)\n+\n+include::./attributes.adoc[]\n+\n+This guide covers:\n+\n+* Login to Google Cloud\n+* Deploying a function to Google Cloud Functions\n+* Deploying a JAR to Google App Engine Standard\n+* Deploying a Docker image to Google App Engine Flexible Custom Runtimes\n+* Deploying a Docker image to Google Cloud Run\n+\n+== Prerequisites\n+\n+For this guide you need:\n+\n+* Roughly 1 hour for all modalities\n+* JDK 11\n+* Apache Maven {maven-version}\n+* https://cloud.google.com/[A Google Cloud Account].  Free accounts work.\n+* https://cloud.google.com/sdk[Cloud SDK CLI Installed]\n+\n+This guide will take as input an application developed in the link:getting-started[Getting Started guide].\n+\n+Make sure you have the getting-started application at hand, or clone the Git repository: `git clone {quickstarts-clone-url}`,\n+or download an {quickstarts-archive-url}[archive]. The solution is located in the `getting-started` directory.\n+\n+== Login to Google Cloud\n+\n+Login to Google Cloud is necessary for deploying the application and it can be done as follows:\n+\n+[source, subs=attributes+]\n+----\n+gcloud auth login\n+----\n+\n+== Deploying to Google Cloud Functions\n+\n+Quarkus support deploying your application to Google Cloud Functions via the following extensions:\n+\n+- link:gcp-functions[Google Cloud Functions]: Build functions using the Google Cloud Functions API.\n+- link:gcp-functions-http[Google Cloud Functions HTTP binding]: Build functions using Quarkus HTTP APIs: RESTEasy (JAX-RS),\n+Undertow (Servlet), Vert.x Web, or link:funqy-http[Funqy HTTP].\n+- link:funqy-gcp-functions[Funky Google Cloud Functions]: Build functions using Funqy.\n+\n+Each extension support a specific kind of application development,\n+follow the specific guides for more information on how to develop, package and deploy you application with them.", "originalCommit": "5ca35a17560559fb65581342b37beaf40d5ac466", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjQ5MjI3Nw==", "url": "https://github.com/quarkusio/quarkus/pull/12759#discussion_r506492277", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            We will only covers Java 11 runtime as the Java 8 runtime uses its own Servlet engine which is not compatible with Quarkus.\n          \n          \n            \n            We will only cover the Java 11 runtime as the Java 8 runtime uses its own Servlet engine which is not compatible with Quarkus.", "author": "gastaldi", "createdAt": "2020-10-16T14:35:45Z", "path": "docs/src/main/asciidoc/deploying-to-google-cloud.adoc", "diffHunk": "@@ -0,0 +1,236 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Deploying to Google Cloud Platform (GCP)\n+\n+include::./attributes.adoc[]\n+\n+This guide covers:\n+\n+* Login to Google Cloud\n+* Deploying a function to Google Cloud Functions\n+* Deploying a JAR to Google App Engine Standard\n+* Deploying a Docker image to Google App Engine Flexible Custom Runtimes\n+* Deploying a Docker image to Google Cloud Run\n+\n+== Prerequisites\n+\n+For this guide you need:\n+\n+* Roughly 1 hour for all modalities\n+* JDK 11\n+* Apache Maven {maven-version}\n+* https://cloud.google.com/[A Google Cloud Account].  Free accounts work.\n+* https://cloud.google.com/sdk[Cloud SDK CLI Installed]\n+\n+This guide will take as input an application developed in the link:getting-started[Getting Started guide].\n+\n+Make sure you have the getting-started application at hand, or clone the Git repository: `git clone {quickstarts-clone-url}`,\n+or download an {quickstarts-archive-url}[archive]. The solution is located in the `getting-started` directory.\n+\n+== Login to Google Cloud\n+\n+Login to Google Cloud is necessary for deploying the application and it can be done as follows:\n+\n+[source, subs=attributes+]\n+----\n+gcloud auth login\n+----\n+\n+== Deploying to Google Cloud Functions\n+\n+Quarkus support deploying your application to Google Cloud Functions via the following extensions:\n+\n+- link:gcp-functions[Google Cloud Functions]: Build functions using the Google Cloud Functions API.\n+- link:gcp-functions-http[Google Cloud Functions HTTP binding]: Build functions using Quarkus HTTP APIs: RESTEasy (JAX-RS),\n+Undertow (Servlet), Vert.x Web, or link:funqy-http[Funqy HTTP].\n+- link:funqy-gcp-functions[Funky Google Cloud Functions]: Build functions using Funqy.\n+\n+Each extension support a specific kind of application development,\n+follow the specific guides for more information on how to develop, package and deploy you application with them.\n+\n+== Deploying to Google App Engine Standard\n+\n+We will only covers Java 11 runtime as the Java 8 runtime uses its own Servlet engine which is not compatible with Quarkus.", "originalCommit": "5ca35a17560559fb65581342b37beaf40d5ac466", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjQ5MjgyNg==", "url": "https://github.com/quarkusio/quarkus/pull/12759#discussion_r506492826", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Before all, make sure to have an App Engine environment initialized for your Google Cloud project, if not, initialize one via `gcloud app create --project=[YOUR_PROJECT_ID]`.\n          \n          \n            \n            First of all, make sure to have an App Engine environment initialized for your Google Cloud project, if not, initialize one via `gcloud app create --project=[YOUR_PROJECT_ID]`.", "author": "gastaldi", "createdAt": "2020-10-16T14:36:17Z", "path": "docs/src/main/asciidoc/deploying-to-google-cloud.adoc", "diffHunk": "@@ -0,0 +1,236 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Deploying to Google Cloud Platform (GCP)\n+\n+include::./attributes.adoc[]\n+\n+This guide covers:\n+\n+* Login to Google Cloud\n+* Deploying a function to Google Cloud Functions\n+* Deploying a JAR to Google App Engine Standard\n+* Deploying a Docker image to Google App Engine Flexible Custom Runtimes\n+* Deploying a Docker image to Google Cloud Run\n+\n+== Prerequisites\n+\n+For this guide you need:\n+\n+* Roughly 1 hour for all modalities\n+* JDK 11\n+* Apache Maven {maven-version}\n+* https://cloud.google.com/[A Google Cloud Account].  Free accounts work.\n+* https://cloud.google.com/sdk[Cloud SDK CLI Installed]\n+\n+This guide will take as input an application developed in the link:getting-started[Getting Started guide].\n+\n+Make sure you have the getting-started application at hand, or clone the Git repository: `git clone {quickstarts-clone-url}`,\n+or download an {quickstarts-archive-url}[archive]. The solution is located in the `getting-started` directory.\n+\n+== Login to Google Cloud\n+\n+Login to Google Cloud is necessary for deploying the application and it can be done as follows:\n+\n+[source, subs=attributes+]\n+----\n+gcloud auth login\n+----\n+\n+== Deploying to Google Cloud Functions\n+\n+Quarkus support deploying your application to Google Cloud Functions via the following extensions:\n+\n+- link:gcp-functions[Google Cloud Functions]: Build functions using the Google Cloud Functions API.\n+- link:gcp-functions-http[Google Cloud Functions HTTP binding]: Build functions using Quarkus HTTP APIs: RESTEasy (JAX-RS),\n+Undertow (Servlet), Vert.x Web, or link:funqy-http[Funqy HTTP].\n+- link:funqy-gcp-functions[Funky Google Cloud Functions]: Build functions using Funqy.\n+\n+Each extension support a specific kind of application development,\n+follow the specific guides for more information on how to develop, package and deploy you application with them.\n+\n+== Deploying to Google App Engine Standard\n+\n+We will only covers Java 11 runtime as the Java 8 runtime uses its own Servlet engine which is not compatible with Quarkus.\n+\n+Before all, make sure to have an App Engine environment initialized for your Google Cloud project, if not, initialize one via `gcloud app create --project=[YOUR_PROJECT_ID]`.", "originalCommit": "5ca35a17560559fb65581342b37beaf40d5ac466", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjQ5MzIwMQ==", "url": "https://github.com/quarkusio/quarkus/pull/12759#discussion_r506493201", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Then, you can choose to build the application by yourself or letting `gcloud` or the Google Cloud Maven building it for you.\n          \n          \n            \n            Then, you can choose to build the application by yourself or letting `gcloud` or the Google Cloud Maven build it for you.", "author": "gastaldi", "createdAt": "2020-10-16T14:36:43Z", "path": "docs/src/main/asciidoc/deploying-to-google-cloud.adoc", "diffHunk": "@@ -0,0 +1,236 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Deploying to Google Cloud Platform (GCP)\n+\n+include::./attributes.adoc[]\n+\n+This guide covers:\n+\n+* Login to Google Cloud\n+* Deploying a function to Google Cloud Functions\n+* Deploying a JAR to Google App Engine Standard\n+* Deploying a Docker image to Google App Engine Flexible Custom Runtimes\n+* Deploying a Docker image to Google Cloud Run\n+\n+== Prerequisites\n+\n+For this guide you need:\n+\n+* Roughly 1 hour for all modalities\n+* JDK 11\n+* Apache Maven {maven-version}\n+* https://cloud.google.com/[A Google Cloud Account].  Free accounts work.\n+* https://cloud.google.com/sdk[Cloud SDK CLI Installed]\n+\n+This guide will take as input an application developed in the link:getting-started[Getting Started guide].\n+\n+Make sure you have the getting-started application at hand, or clone the Git repository: `git clone {quickstarts-clone-url}`,\n+or download an {quickstarts-archive-url}[archive]. The solution is located in the `getting-started` directory.\n+\n+== Login to Google Cloud\n+\n+Login to Google Cloud is necessary for deploying the application and it can be done as follows:\n+\n+[source, subs=attributes+]\n+----\n+gcloud auth login\n+----\n+\n+== Deploying to Google Cloud Functions\n+\n+Quarkus support deploying your application to Google Cloud Functions via the following extensions:\n+\n+- link:gcp-functions[Google Cloud Functions]: Build functions using the Google Cloud Functions API.\n+- link:gcp-functions-http[Google Cloud Functions HTTP binding]: Build functions using Quarkus HTTP APIs: RESTEasy (JAX-RS),\n+Undertow (Servlet), Vert.x Web, or link:funqy-http[Funqy HTTP].\n+- link:funqy-gcp-functions[Funky Google Cloud Functions]: Build functions using Funqy.\n+\n+Each extension support a specific kind of application development,\n+follow the specific guides for more information on how to develop, package and deploy you application with them.\n+\n+== Deploying to Google App Engine Standard\n+\n+We will only covers Java 11 runtime as the Java 8 runtime uses its own Servlet engine which is not compatible with Quarkus.\n+\n+Before all, make sure to have an App Engine environment initialized for your Google Cloud project, if not, initialize one via `gcloud app create --project=[YOUR_PROJECT_ID]`.\n+\n+Then, you will need to create a `src/main/appengine/app.yaml` file, let's keep it minimalistic with only the selected engine:\n+\n+[source, yaml]\n+----\n+runtime: java11\n+----\n+\n+This will create a default service for your App Engine application.\n+\n+Then, you can choose to build the application by yourself or letting `gcloud` or the Google Cloud Maven building it for you.", "originalCommit": "5ca35a17560559fb65581342b37beaf40d5ac466", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjQ5NTUzNQ==", "url": "https://github.com/quarkusio/quarkus/pull/12759#discussion_r506495535", "bodyText": "Not sure this sentence helps much, maybe It should be removed", "author": "gastaldi", "createdAt": "2020-10-16T14:39:03Z", "path": "docs/src/main/asciidoc/deploying-to-google-cloud.adoc", "diffHunk": "@@ -0,0 +1,236 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Deploying to Google Cloud Platform (GCP)\n+\n+include::./attributes.adoc[]\n+\n+This guide covers:\n+\n+* Login to Google Cloud\n+* Deploying a function to Google Cloud Functions\n+* Deploying a JAR to Google App Engine Standard\n+* Deploying a Docker image to Google App Engine Flexible Custom Runtimes\n+* Deploying a Docker image to Google Cloud Run\n+\n+== Prerequisites\n+\n+For this guide you need:\n+\n+* Roughly 1 hour for all modalities\n+* JDK 11\n+* Apache Maven {maven-version}\n+* https://cloud.google.com/[A Google Cloud Account].  Free accounts work.\n+* https://cloud.google.com/sdk[Cloud SDK CLI Installed]\n+\n+This guide will take as input an application developed in the link:getting-started[Getting Started guide].\n+\n+Make sure you have the getting-started application at hand, or clone the Git repository: `git clone {quickstarts-clone-url}`,\n+or download an {quickstarts-archive-url}[archive]. The solution is located in the `getting-started` directory.\n+\n+== Login to Google Cloud\n+\n+Login to Google Cloud is necessary for deploying the application and it can be done as follows:\n+\n+[source, subs=attributes+]\n+----\n+gcloud auth login\n+----\n+\n+== Deploying to Google Cloud Functions\n+\n+Quarkus support deploying your application to Google Cloud Functions via the following extensions:\n+\n+- link:gcp-functions[Google Cloud Functions]: Build functions using the Google Cloud Functions API.\n+- link:gcp-functions-http[Google Cloud Functions HTTP binding]: Build functions using Quarkus HTTP APIs: RESTEasy (JAX-RS),\n+Undertow (Servlet), Vert.x Web, or link:funqy-http[Funqy HTTP].\n+- link:funqy-gcp-functions[Funky Google Cloud Functions]: Build functions using Funqy.\n+\n+Each extension support a specific kind of application development,\n+follow the specific guides for more information on how to develop, package and deploy you application with them.\n+\n+== Deploying to Google App Engine Standard\n+\n+We will only covers Java 11 runtime as the Java 8 runtime uses its own Servlet engine which is not compatible with Quarkus.\n+\n+Before all, make sure to have an App Engine environment initialized for your Google Cloud project, if not, initialize one via `gcloud app create --project=[YOUR_PROJECT_ID]`.\n+\n+Then, you will need to create a `src/main/appengine/app.yaml` file, let's keep it minimalistic with only the selected engine:\n+\n+[source, yaml]\n+----\n+runtime: java11\n+----\n+\n+This will create a default service for your App Engine application.\n+\n+Then, you can choose to build the application by yourself or letting `gcloud` or the Google Cloud Maven building it for you.\n+\n+=== Building the application manually\n+\n+Setup your application to be packaged as an uber-jar via your `application.properties` file:\n+\n+[source, properties]\n+----\n+quarkus.package.type=uber-jar\n+----\n+\n+Use Maven to build the application using `mvn clean package`, it will generate a single JAR that contains all the classes of your application including its dependencies.\n+\n+Finally, use `gcloud` to deploy your application as an App Engine service.\n+\n+[source, shell script]\n+----\n+gcloud app deploy target/getting-started-1.0-SNAPSHOT-runner.jar\n+----\n+\n+This command will upload your application jar and launch it on App Engine.\n+\n+When done, the output will display the URL of your application (target url), you can use it with curl or directly open it on your browser using `gcloud app browse`.\n+\n+As the getting started endpoint is located on the `/hello` path, make sure to navigate to it.", "originalCommit": "5ca35a17560559fb65581342b37beaf40d5ac466", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjU2MTYwNg==", "url": "https://github.com/quarkusio/quarkus/pull/12759#discussion_r506561606", "bodyText": "By default when you type app browse or go to the URL written on the console you have the 404 page.", "author": "loicmathieu", "createdAt": "2020-10-16T15:46:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjQ5NTUzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjU3NjkxNg==", "url": "https://github.com/quarkusio/quarkus/pull/12759#discussion_r506576916", "bodyText": "Are you sure it returns 404? The getting started should display the Welcome index.html page when the root URL is accessed", "author": "gastaldi", "createdAt": "2020-10-16T16:10:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjQ5NTUzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjU4Nzk5Ng==", "url": "https://github.com/quarkusio/quarkus/pull/12759#discussion_r506587996", "bodyText": "Hum, you may be right, I just remember that it's blue and didn't show my hello world message.\nI can remove the sentence if you want.", "author": "loicmathieu", "createdAt": "2020-10-16T16:29:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjQ5NTUzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzU0ODU5Mw==", "url": "https://github.com/quarkusio/quarkus/pull/12759#discussion_r507548593", "bodyText": "@gastaldi so yes, the getting started page is displayed. I'll remove this sentence.", "author": "loicmathieu", "createdAt": "2020-10-19T08:03:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjQ5NTUzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzU0OTM3Mw==", "url": "https://github.com/quarkusio/quarkus/pull/12759#discussion_r507549373", "bodyText": "Sentence removed in all places.", "author": "loicmathieu", "createdAt": "2020-10-19T08:05:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjQ5NTUzNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjQ5NjIxNg==", "url": "https://github.com/quarkusio/quarkus/pull/12759#discussion_r506496216", "bodyText": "Same as above", "author": "gastaldi", "createdAt": "2020-10-16T14:39:43Z", "path": "docs/src/main/asciidoc/deploying-to-google-cloud.adoc", "diffHunk": "@@ -0,0 +1,236 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Deploying to Google Cloud Platform (GCP)\n+\n+include::./attributes.adoc[]\n+\n+This guide covers:\n+\n+* Login to Google Cloud\n+* Deploying a function to Google Cloud Functions\n+* Deploying a JAR to Google App Engine Standard\n+* Deploying a Docker image to Google App Engine Flexible Custom Runtimes\n+* Deploying a Docker image to Google Cloud Run\n+\n+== Prerequisites\n+\n+For this guide you need:\n+\n+* Roughly 1 hour for all modalities\n+* JDK 11\n+* Apache Maven {maven-version}\n+* https://cloud.google.com/[A Google Cloud Account].  Free accounts work.\n+* https://cloud.google.com/sdk[Cloud SDK CLI Installed]\n+\n+This guide will take as input an application developed in the link:getting-started[Getting Started guide].\n+\n+Make sure you have the getting-started application at hand, or clone the Git repository: `git clone {quickstarts-clone-url}`,\n+or download an {quickstarts-archive-url}[archive]. The solution is located in the `getting-started` directory.\n+\n+== Login to Google Cloud\n+\n+Login to Google Cloud is necessary for deploying the application and it can be done as follows:\n+\n+[source, subs=attributes+]\n+----\n+gcloud auth login\n+----\n+\n+== Deploying to Google Cloud Functions\n+\n+Quarkus support deploying your application to Google Cloud Functions via the following extensions:\n+\n+- link:gcp-functions[Google Cloud Functions]: Build functions using the Google Cloud Functions API.\n+- link:gcp-functions-http[Google Cloud Functions HTTP binding]: Build functions using Quarkus HTTP APIs: RESTEasy (JAX-RS),\n+Undertow (Servlet), Vert.x Web, or link:funqy-http[Funqy HTTP].\n+- link:funqy-gcp-functions[Funky Google Cloud Functions]: Build functions using Funqy.\n+\n+Each extension support a specific kind of application development,\n+follow the specific guides for more information on how to develop, package and deploy you application with them.\n+\n+== Deploying to Google App Engine Standard\n+\n+We will only covers Java 11 runtime as the Java 8 runtime uses its own Servlet engine which is not compatible with Quarkus.\n+\n+Before all, make sure to have an App Engine environment initialized for your Google Cloud project, if not, initialize one via `gcloud app create --project=[YOUR_PROJECT_ID]`.\n+\n+Then, you will need to create a `src/main/appengine/app.yaml` file, let's keep it minimalistic with only the selected engine:\n+\n+[source, yaml]\n+----\n+runtime: java11\n+----\n+\n+This will create a default service for your App Engine application.\n+\n+Then, you can choose to build the application by yourself or letting `gcloud` or the Google Cloud Maven building it for you.\n+\n+=== Building the application manually\n+\n+Setup your application to be packaged as an uber-jar via your `application.properties` file:\n+\n+[source, properties]\n+----\n+quarkus.package.type=uber-jar\n+----\n+\n+Use Maven to build the application using `mvn clean package`, it will generate a single JAR that contains all the classes of your application including its dependencies.\n+\n+Finally, use `gcloud` to deploy your application as an App Engine service.\n+\n+[source, shell script]\n+----\n+gcloud app deploy target/getting-started-1.0-SNAPSHOT-runner.jar\n+----\n+\n+This command will upload your application jar and launch it on App Engine.\n+\n+When done, the output will display the URL of your application (target url), you can use it with curl or directly open it on your browser using `gcloud app browse`.\n+\n+As the getting started endpoint is located on the `/hello` path, make sure to navigate to it.\n+\n+=== Building the application via gcloud\n+\n+You can choose to let `gcloud` build your application for you, this is the simplest way to deploy to App Engine.\n+\n+Just launch `gcloud app deploy` on the root of your project, it will upload all your project files (the list can be reduced via the  `.gcloudignore` file),\n+package your JAR via Maven (or Gradle) and launch it on App Engine.\n+\n+When done, the output will display the URL of your application (target url), you can use it with curl or directly open it on your browser using `gcloud app browse`.\n+\n+As the getting started endpoint is located on the `/hello` path, make sure to navigate to it.", "originalCommit": "5ca35a17560559fb65581342b37beaf40d5ac466", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjQ5NjgwMQ==", "url": "https://github.com/quarkusio/quarkus/pull/12759#discussion_r506496801", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            1. Use default `gcloud` configuration\n          \n          \n            \n            1. Use the default `gcloud` configuration", "author": "gastaldi", "createdAt": "2020-10-16T14:40:16Z", "path": "docs/src/main/asciidoc/deploying-to-google-cloud.adoc", "diffHunk": "@@ -0,0 +1,236 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Deploying to Google Cloud Platform (GCP)\n+\n+include::./attributes.adoc[]\n+\n+This guide covers:\n+\n+* Login to Google Cloud\n+* Deploying a function to Google Cloud Functions\n+* Deploying a JAR to Google App Engine Standard\n+* Deploying a Docker image to Google App Engine Flexible Custom Runtimes\n+* Deploying a Docker image to Google Cloud Run\n+\n+== Prerequisites\n+\n+For this guide you need:\n+\n+* Roughly 1 hour for all modalities\n+* JDK 11\n+* Apache Maven {maven-version}\n+* https://cloud.google.com/[A Google Cloud Account].  Free accounts work.\n+* https://cloud.google.com/sdk[Cloud SDK CLI Installed]\n+\n+This guide will take as input an application developed in the link:getting-started[Getting Started guide].\n+\n+Make sure you have the getting-started application at hand, or clone the Git repository: `git clone {quickstarts-clone-url}`,\n+or download an {quickstarts-archive-url}[archive]. The solution is located in the `getting-started` directory.\n+\n+== Login to Google Cloud\n+\n+Login to Google Cloud is necessary for deploying the application and it can be done as follows:\n+\n+[source, subs=attributes+]\n+----\n+gcloud auth login\n+----\n+\n+== Deploying to Google Cloud Functions\n+\n+Quarkus support deploying your application to Google Cloud Functions via the following extensions:\n+\n+- link:gcp-functions[Google Cloud Functions]: Build functions using the Google Cloud Functions API.\n+- link:gcp-functions-http[Google Cloud Functions HTTP binding]: Build functions using Quarkus HTTP APIs: RESTEasy (JAX-RS),\n+Undertow (Servlet), Vert.x Web, or link:funqy-http[Funqy HTTP].\n+- link:funqy-gcp-functions[Funky Google Cloud Functions]: Build functions using Funqy.\n+\n+Each extension support a specific kind of application development,\n+follow the specific guides for more information on how to develop, package and deploy you application with them.\n+\n+== Deploying to Google App Engine Standard\n+\n+We will only covers Java 11 runtime as the Java 8 runtime uses its own Servlet engine which is not compatible with Quarkus.\n+\n+Before all, make sure to have an App Engine environment initialized for your Google Cloud project, if not, initialize one via `gcloud app create --project=[YOUR_PROJECT_ID]`.\n+\n+Then, you will need to create a `src/main/appengine/app.yaml` file, let's keep it minimalistic with only the selected engine:\n+\n+[source, yaml]\n+----\n+runtime: java11\n+----\n+\n+This will create a default service for your App Engine application.\n+\n+Then, you can choose to build the application by yourself or letting `gcloud` or the Google Cloud Maven building it for you.\n+\n+=== Building the application manually\n+\n+Setup your application to be packaged as an uber-jar via your `application.properties` file:\n+\n+[source, properties]\n+----\n+quarkus.package.type=uber-jar\n+----\n+\n+Use Maven to build the application using `mvn clean package`, it will generate a single JAR that contains all the classes of your application including its dependencies.\n+\n+Finally, use `gcloud` to deploy your application as an App Engine service.\n+\n+[source, shell script]\n+----\n+gcloud app deploy target/getting-started-1.0-SNAPSHOT-runner.jar\n+----\n+\n+This command will upload your application jar and launch it on App Engine.\n+\n+When done, the output will display the URL of your application (target url), you can use it with curl or directly open it on your browser using `gcloud app browse`.\n+\n+As the getting started endpoint is located on the `/hello` path, make sure to navigate to it.\n+\n+=== Building the application via gcloud\n+\n+You can choose to let `gcloud` build your application for you, this is the simplest way to deploy to App Engine.\n+\n+Just launch `gcloud app deploy` on the root of your project, it will upload all your project files (the list can be reduced via the  `.gcloudignore` file),\n+package your JAR via Maven (or Gradle) and launch it on App Engine.\n+\n+When done, the output will display the URL of your application (target url), you can use it with curl or directly open it on your browser using `gcloud app browse`.\n+\n+As the getting started endpoint is located on the `/hello` path, make sure to navigate to it.\n+\n+=== Building the application via the Maven Google Cloud plugin\n+\n+You can also let Maven control the deployment of your application using the App Engine Maven plugin.\n+\n+First, add the plugin to your `pom.xml`:\n+\n+[source, xml]\n+----\n+<plugin>\n+    <groupId>com.google.cloud.tools</groupId>\n+    <artifactId>appengine-maven-plugin</artifactId>\n+    <version>2.4.0</version>\n+    <configuration>\n+        <projectId>GCLOUD_CONFIG</projectId> <!-- <1> -->\n+        <version>gettingstarted</version>\n+        <artifact>${project.build.directory}/getting-started-${project.version}-runner.jar</artifact> <!-- <2> -->\n+    </configuration>\n+</plugin>\n+----\n+\n+1. Use default `gcloud` configuration", "originalCommit": "5ca35a17560559fb65581342b37beaf40d5ac466", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjQ5NzIzNQ==", "url": "https://github.com/quarkusio/quarkus/pull/12759#discussion_r506497235", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            When done, the output will display the URL of your application (target url), you can use it with curl or directly open it on your browser using `gcloud app browse`.\n          \n          \n            \n            When it\u2019s done, the output will display the URL of your application (target URL), you can use it with curl or directly open it on your browser using `gcloud app browse`.", "author": "gastaldi", "createdAt": "2020-10-16T14:40:43Z", "path": "docs/src/main/asciidoc/deploying-to-google-cloud.adoc", "diffHunk": "@@ -0,0 +1,236 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Deploying to Google Cloud Platform (GCP)\n+\n+include::./attributes.adoc[]\n+\n+This guide covers:\n+\n+* Login to Google Cloud\n+* Deploying a function to Google Cloud Functions\n+* Deploying a JAR to Google App Engine Standard\n+* Deploying a Docker image to Google App Engine Flexible Custom Runtimes\n+* Deploying a Docker image to Google Cloud Run\n+\n+== Prerequisites\n+\n+For this guide you need:\n+\n+* Roughly 1 hour for all modalities\n+* JDK 11\n+* Apache Maven {maven-version}\n+* https://cloud.google.com/[A Google Cloud Account].  Free accounts work.\n+* https://cloud.google.com/sdk[Cloud SDK CLI Installed]\n+\n+This guide will take as input an application developed in the link:getting-started[Getting Started guide].\n+\n+Make sure you have the getting-started application at hand, or clone the Git repository: `git clone {quickstarts-clone-url}`,\n+or download an {quickstarts-archive-url}[archive]. The solution is located in the `getting-started` directory.\n+\n+== Login to Google Cloud\n+\n+Login to Google Cloud is necessary for deploying the application and it can be done as follows:\n+\n+[source, subs=attributes+]\n+----\n+gcloud auth login\n+----\n+\n+== Deploying to Google Cloud Functions\n+\n+Quarkus support deploying your application to Google Cloud Functions via the following extensions:\n+\n+- link:gcp-functions[Google Cloud Functions]: Build functions using the Google Cloud Functions API.\n+- link:gcp-functions-http[Google Cloud Functions HTTP binding]: Build functions using Quarkus HTTP APIs: RESTEasy (JAX-RS),\n+Undertow (Servlet), Vert.x Web, or link:funqy-http[Funqy HTTP].\n+- link:funqy-gcp-functions[Funky Google Cloud Functions]: Build functions using Funqy.\n+\n+Each extension support a specific kind of application development,\n+follow the specific guides for more information on how to develop, package and deploy you application with them.\n+\n+== Deploying to Google App Engine Standard\n+\n+We will only covers Java 11 runtime as the Java 8 runtime uses its own Servlet engine which is not compatible with Quarkus.\n+\n+Before all, make sure to have an App Engine environment initialized for your Google Cloud project, if not, initialize one via `gcloud app create --project=[YOUR_PROJECT_ID]`.\n+\n+Then, you will need to create a `src/main/appengine/app.yaml` file, let's keep it minimalistic with only the selected engine:\n+\n+[source, yaml]\n+----\n+runtime: java11\n+----\n+\n+This will create a default service for your App Engine application.\n+\n+Then, you can choose to build the application by yourself or letting `gcloud` or the Google Cloud Maven building it for you.\n+\n+=== Building the application manually\n+\n+Setup your application to be packaged as an uber-jar via your `application.properties` file:\n+\n+[source, properties]\n+----\n+quarkus.package.type=uber-jar\n+----\n+\n+Use Maven to build the application using `mvn clean package`, it will generate a single JAR that contains all the classes of your application including its dependencies.\n+\n+Finally, use `gcloud` to deploy your application as an App Engine service.\n+\n+[source, shell script]\n+----\n+gcloud app deploy target/getting-started-1.0-SNAPSHOT-runner.jar\n+----\n+\n+This command will upload your application jar and launch it on App Engine.\n+\n+When done, the output will display the URL of your application (target url), you can use it with curl or directly open it on your browser using `gcloud app browse`.\n+\n+As the getting started endpoint is located on the `/hello` path, make sure to navigate to it.\n+\n+=== Building the application via gcloud\n+\n+You can choose to let `gcloud` build your application for you, this is the simplest way to deploy to App Engine.\n+\n+Just launch `gcloud app deploy` on the root of your project, it will upload all your project files (the list can be reduced via the  `.gcloudignore` file),\n+package your JAR via Maven (or Gradle) and launch it on App Engine.\n+\n+When done, the output will display the URL of your application (target url), you can use it with curl or directly open it on your browser using `gcloud app browse`.\n+\n+As the getting started endpoint is located on the `/hello` path, make sure to navigate to it.\n+\n+=== Building the application via the Maven Google Cloud plugin\n+\n+You can also let Maven control the deployment of your application using the App Engine Maven plugin.\n+\n+First, add the plugin to your `pom.xml`:\n+\n+[source, xml]\n+----\n+<plugin>\n+    <groupId>com.google.cloud.tools</groupId>\n+    <artifactId>appengine-maven-plugin</artifactId>\n+    <version>2.4.0</version>\n+    <configuration>\n+        <projectId>GCLOUD_CONFIG</projectId> <!-- <1> -->\n+        <version>gettingstarted</version>\n+        <artifact>${project.build.directory}/getting-started-${project.version}-runner.jar</artifact> <!-- <2> -->\n+    </configuration>\n+</plugin>\n+----\n+\n+1. Use default `gcloud` configuration\n+2. Override the default JAR name to the one generated by the Quarkus Maven plugin\n+\n+Then you would be able to use Maven to build and deploy your application to App Engine via `mvn clean package appengine:deploy`.\n+\n+When done, the output will display the URL of your application (target url), you can use it with curl or directly open it on your browser using `gcloud app browse`.", "originalCommit": "5ca35a17560559fb65581342b37beaf40d5ac466", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "22f5d42105c8448f0b9a7cd41865a5f8d4118a78", "url": "https://github.com/quarkusio/quarkus/commit/22f5d42105c8448f0b9a7cd41865a5f8d4118a78", "message": "Add a Deploying to Google Cloud guide", "committedDate": "2020-10-16T16:06:52Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjYzMjQ5Nw==", "url": "https://github.com/quarkusio/quarkus/pull/12759#discussion_r506632497", "bodyText": "typo: JVM native Dockerfile", "author": "heubeck", "createdAt": "2020-10-16T17:48:48Z", "path": "docs/src/main/asciidoc/deploying-to-google-cloud.adoc", "diffHunk": "@@ -0,0 +1,236 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Deploying to Google Cloud Platform (GCP)\n+\n+include::./attributes.adoc[]\n+\n+This guide covers:\n+\n+* Login to Google Cloud\n+* Deploying a function to Google Cloud Functions\n+* Deploying a JAR to Google App Engine Standard\n+* Deploying a Docker image to Google App Engine Flexible Custom Runtimes\n+* Deploying a Docker image to Google Cloud Run\n+\n+== Prerequisites\n+\n+For this guide you need:\n+\n+* Roughly 1 hour for all modalities\n+* JDK 11\n+* Apache Maven {maven-version}\n+* https://cloud.google.com/[A Google Cloud Account].  Free accounts work.\n+* https://cloud.google.com/sdk[Cloud SDK CLI Installed]\n+\n+This guide will take as input an application developed in the link:getting-started[Getting Started guide].\n+\n+Make sure you have the getting-started application at hand, or clone the Git repository: `git clone {quickstarts-clone-url}`,\n+or download an {quickstarts-archive-url}[archive]. The solution is located in the `getting-started` directory.\n+\n+== Login to Google Cloud\n+\n+Login to Google Cloud is necessary for deploying the application and it can be done as follows:\n+\n+[source, subs=attributes+]\n+----\n+gcloud auth login\n+----\n+\n+== Deploying to Google Cloud Functions\n+\n+Quarkus supports deploying your application to Google Cloud Functions via the following extensions:\n+\n+- link:gcp-functions[Google Cloud Functions]: Build functions using the Google Cloud Functions API.\n+- link:gcp-functions-http[Google Cloud Functions HTTP binding]: Build functions using Quarkus HTTP APIs: RESTEasy (JAX-RS),\n+Undertow (Servlet), Vert.x Web, or link:funqy-http[Funqy HTTP].\n+- link:funqy-gcp-functions[Funky Google Cloud Functions]: Build functions using Funqy.\n+\n+Each extension support a specific kind of application development,\n+follow the specific guides for more information on how to develop, package and deploy your application using them.\n+\n+== Deploying to Google App Engine Standard\n+\n+We will only cover the Java 11 runtime as the Java 8 runtime uses its own Servlet engine which is not compatible with Quarkus.\n+\n+First of all, make sure to have an App Engine environment initialized for your Google Cloud project, if not, initialize one via `gcloud app create --project=[YOUR_PROJECT_ID]`.\n+\n+Then, you will need to create a `src/main/appengine/app.yaml` file, let's keep it minimalistic with only the selected engine:\n+\n+[source, yaml]\n+----\n+runtime: java11\n+----\n+\n+This will create a default service for your App Engine application.\n+\n+Then, you can choose to build the application by yourself or letting `gcloud` or the Google Cloud Maven build it for you.\n+\n+=== Building the application manually\n+\n+Setup your application to be packaged as an uber-jar via your `application.properties` file:\n+\n+[source, properties]\n+----\n+quarkus.package.type=uber-jar\n+----\n+\n+Use Maven to build the application using `mvn clean package`, it will generate a single JAR that contains all the classes of your application including its dependencies.\n+\n+Finally, use `gcloud` to deploy your application as an App Engine service.\n+\n+[source, shell script]\n+----\n+gcloud app deploy target/getting-started-1.0-SNAPSHOT-runner.jar\n+----\n+\n+This command will upload your application jar and launch it on App Engine.\n+\n+When done, the output will display the URL of your application (target url), you can use it with curl or directly open it on your browser using `gcloud app browse`.\n+\n+As the getting started endpoint is located on the `/hello` path, make sure to navigate to it.\n+\n+=== Building the application via gcloud\n+\n+You can choose to let `gcloud` build your application for you, this is the simplest way to deploy to App Engine.\n+\n+Just launch `gcloud app deploy` on the root of your project, it will upload all your project files (the list can be reduced via the  `.gcloudignore` file),\n+package your JAR via Maven (or Gradle) and launch it on App Engine.\n+\n+When done, the output will display the URL of your application (target url), you can use it with curl or directly open it on your browser using `gcloud app browse`.\n+\n+As the getting started endpoint is located on the `/hello` path, make sure to navigate to it.\n+\n+=== Building the application via the Maven Google Cloud plugin\n+\n+You can also let Maven control the deployment of your application using the App Engine Maven plugin.\n+\n+First, add the plugin to your `pom.xml`:\n+\n+[source, xml]\n+----\n+<plugin>\n+    <groupId>com.google.cloud.tools</groupId>\n+    <artifactId>appengine-maven-plugin</artifactId>\n+    <version>2.4.0</version>\n+    <configuration>\n+        <projectId>GCLOUD_CONFIG</projectId> <!-- <1> -->\n+        <version>gettingstarted</version>\n+        <artifact>${project.build.directory}/getting-started-${project.version}-runner.jar</artifact> <!-- <2> -->\n+    </configuration>\n+</plugin>\n+----\n+\n+1. Use the default `gcloud` configuration\n+2. Override the default JAR name to the one generated by the Quarkus Maven plugin\n+\n+Then you would be able to use Maven to build and deploy your application to App Engine via `mvn clean package appengine:deploy`.\n+\n+When it\u2019s done, the output will display the URL of your application (target URL), you can use it with curl or directly open it on your browser using `gcloud app browse`.\n+\n+As the getting started endpoint is located on the `/hello` path, make sure to navigate to it.\n+\n+== Deploying to Google App Engine Flexible Custom Runtimes\n+\n+Before all, make sure to have an App Engine environment initialized for your Google Cloud project, if not, initialize one via `gcloud app create --project=[YOUR_PROJECT_ID]`.\n+\n+App Engine Flexible Custom Runtimes uses a Docker image to run your application.\n+\n+First, create an `app.yaml` file at the root of your project with the following content:\n+\n+[source, yaml]\n+----\n+runtime: custom\n+env: flex\n+----\n+\n+App Engine Flexible Custom Runtimes deploys your application as a Docker container, you can choose to deploy one of the Dockerfile provided inside your application.\n+\n+Both JVM and native executable versions will work.\n+\n+To deploy a JVM application:\n+\n+- Copy the JVM Dockerfile to the root directory of your project: `cp src/main/docker/Dockerfile.jvm Dockerfile`.\n+- Build your application using `mvn clean package`.\n+\n+To deploy a native application:\n+\n+- Copy the JVM Dockerfile to the root directory of your project: `cp src/main/docker/Dockerfile.native Dockerfile`.", "originalCommit": "22f5d42105c8448f0b9a7cd41865a5f8d4118a78", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzU0NjAwNg==", "url": "https://github.com/quarkusio/quarkus/pull/12759#discussion_r507546006", "bodyText": "Thanks, fixed.", "author": "loicmathieu", "createdAt": "2020-10-19T07:59:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjYzMjQ5Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjYzMzg1NA==", "url": "https://github.com/quarkusio/quarkus/pull/12759#discussion_r506633854", "bodyText": "also: JVM native Dockerfile", "author": "heubeck", "createdAt": "2020-10-16T17:51:17Z", "path": "docs/src/main/asciidoc/deploying-to-google-cloud.adoc", "diffHunk": "@@ -0,0 +1,236 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Deploying to Google Cloud Platform (GCP)\n+\n+include::./attributes.adoc[]\n+\n+This guide covers:\n+\n+* Login to Google Cloud\n+* Deploying a function to Google Cloud Functions\n+* Deploying a JAR to Google App Engine Standard\n+* Deploying a Docker image to Google App Engine Flexible Custom Runtimes\n+* Deploying a Docker image to Google Cloud Run\n+\n+== Prerequisites\n+\n+For this guide you need:\n+\n+* Roughly 1 hour for all modalities\n+* JDK 11\n+* Apache Maven {maven-version}\n+* https://cloud.google.com/[A Google Cloud Account].  Free accounts work.\n+* https://cloud.google.com/sdk[Cloud SDK CLI Installed]\n+\n+This guide will take as input an application developed in the link:getting-started[Getting Started guide].\n+\n+Make sure you have the getting-started application at hand, or clone the Git repository: `git clone {quickstarts-clone-url}`,\n+or download an {quickstarts-archive-url}[archive]. The solution is located in the `getting-started` directory.\n+\n+== Login to Google Cloud\n+\n+Login to Google Cloud is necessary for deploying the application and it can be done as follows:\n+\n+[source, subs=attributes+]\n+----\n+gcloud auth login\n+----\n+\n+== Deploying to Google Cloud Functions\n+\n+Quarkus supports deploying your application to Google Cloud Functions via the following extensions:\n+\n+- link:gcp-functions[Google Cloud Functions]: Build functions using the Google Cloud Functions API.\n+- link:gcp-functions-http[Google Cloud Functions HTTP binding]: Build functions using Quarkus HTTP APIs: RESTEasy (JAX-RS),\n+Undertow (Servlet), Vert.x Web, or link:funqy-http[Funqy HTTP].\n+- link:funqy-gcp-functions[Funky Google Cloud Functions]: Build functions using Funqy.\n+\n+Each extension support a specific kind of application development,\n+follow the specific guides for more information on how to develop, package and deploy your application using them.\n+\n+== Deploying to Google App Engine Standard\n+\n+We will only cover the Java 11 runtime as the Java 8 runtime uses its own Servlet engine which is not compatible with Quarkus.\n+\n+First of all, make sure to have an App Engine environment initialized for your Google Cloud project, if not, initialize one via `gcloud app create --project=[YOUR_PROJECT_ID]`.\n+\n+Then, you will need to create a `src/main/appengine/app.yaml` file, let's keep it minimalistic with only the selected engine:\n+\n+[source, yaml]\n+----\n+runtime: java11\n+----\n+\n+This will create a default service for your App Engine application.\n+\n+Then, you can choose to build the application by yourself or letting `gcloud` or the Google Cloud Maven build it for you.\n+\n+=== Building the application manually\n+\n+Setup your application to be packaged as an uber-jar via your `application.properties` file:\n+\n+[source, properties]\n+----\n+quarkus.package.type=uber-jar\n+----\n+\n+Use Maven to build the application using `mvn clean package`, it will generate a single JAR that contains all the classes of your application including its dependencies.\n+\n+Finally, use `gcloud` to deploy your application as an App Engine service.\n+\n+[source, shell script]\n+----\n+gcloud app deploy target/getting-started-1.0-SNAPSHOT-runner.jar\n+----\n+\n+This command will upload your application jar and launch it on App Engine.\n+\n+When done, the output will display the URL of your application (target url), you can use it with curl or directly open it on your browser using `gcloud app browse`.\n+\n+As the getting started endpoint is located on the `/hello` path, make sure to navigate to it.\n+\n+=== Building the application via gcloud\n+\n+You can choose to let `gcloud` build your application for you, this is the simplest way to deploy to App Engine.\n+\n+Just launch `gcloud app deploy` on the root of your project, it will upload all your project files (the list can be reduced via the  `.gcloudignore` file),\n+package your JAR via Maven (or Gradle) and launch it on App Engine.\n+\n+When done, the output will display the URL of your application (target url), you can use it with curl or directly open it on your browser using `gcloud app browse`.\n+\n+As the getting started endpoint is located on the `/hello` path, make sure to navigate to it.\n+\n+=== Building the application via the Maven Google Cloud plugin\n+\n+You can also let Maven control the deployment of your application using the App Engine Maven plugin.\n+\n+First, add the plugin to your `pom.xml`:\n+\n+[source, xml]\n+----\n+<plugin>\n+    <groupId>com.google.cloud.tools</groupId>\n+    <artifactId>appengine-maven-plugin</artifactId>\n+    <version>2.4.0</version>\n+    <configuration>\n+        <projectId>GCLOUD_CONFIG</projectId> <!-- <1> -->\n+        <version>gettingstarted</version>\n+        <artifact>${project.build.directory}/getting-started-${project.version}-runner.jar</artifact> <!-- <2> -->\n+    </configuration>\n+</plugin>\n+----\n+\n+1. Use the default `gcloud` configuration\n+2. Override the default JAR name to the one generated by the Quarkus Maven plugin\n+\n+Then you would be able to use Maven to build and deploy your application to App Engine via `mvn clean package appengine:deploy`.\n+\n+When it\u2019s done, the output will display the URL of your application (target URL), you can use it with curl or directly open it on your browser using `gcloud app browse`.\n+\n+As the getting started endpoint is located on the `/hello` path, make sure to navigate to it.\n+\n+== Deploying to Google App Engine Flexible Custom Runtimes\n+\n+Before all, make sure to have an App Engine environment initialized for your Google Cloud project, if not, initialize one via `gcloud app create --project=[YOUR_PROJECT_ID]`.\n+\n+App Engine Flexible Custom Runtimes uses a Docker image to run your application.\n+\n+First, create an `app.yaml` file at the root of your project with the following content:\n+\n+[source, yaml]\n+----\n+runtime: custom\n+env: flex\n+----\n+\n+App Engine Flexible Custom Runtimes deploys your application as a Docker container, you can choose to deploy one of the Dockerfile provided inside your application.\n+\n+Both JVM and native executable versions will work.\n+\n+To deploy a JVM application:\n+\n+- Copy the JVM Dockerfile to the root directory of your project: `cp src/main/docker/Dockerfile.jvm Dockerfile`.\n+- Build your application using `mvn clean package`.\n+\n+To deploy a native application:\n+\n+- Copy the JVM Dockerfile to the root directory of your project: `cp src/main/docker/Dockerfile.native Dockerfile`.\n+- Build your application as a native executable using `mvn clean package -Pnative`.\n+\n+Finally, launch `gcloud app deploy` on the root of your project, it will upload all your project files (the list can be reduced via the  `.gcloudignore` file),\n+build your Dockerfile and launch it on App Engine Flexible custom runtime.\n+\n+It uses Cloud Build to build your Docker image and deploy it to Google Container Registry (GCR).\n+\n+When done, the output will display the URL of your application (target url), you can use it with curl or directly open it on your browser using `gcloud app browse`.\n+\n+As the getting started endpoint is located on the `/hello` path, make sure to navigate to it.\n+\n+NOTE: App Engine Flexible custom runtimes support link:https://cloud.google.com/appengine/docs/flexible/custom-runtimes/configuring-your-app-with-app-yaml#updated_health_checks[health checks],\n+it is strongly advised to provide them thanks to Quarkus link:microprofile-health[Microprofile Heath] support.\n+\n+== Deploying to Google Cloud Run\n+\n+Google Cloud Run allows you to run your Docker containers inside Google Cloud Platform in a managed way.\n+\n+NOTE: By default, Quarkus listens on port 8080, and it's also the Cloud Run default port.\n+No need to use the `PORT` environment variable defined in Cloud Run to customize the Quarkus HTTP port.\n+\n+Cloud Run will use Cloud Build to build your Docker image and deploy it to Google Container Registry (GCR).\n+\n+Both JVM and native executable versions will work.\n+\n+To deploy a JVM application:\n+\n+- Copy the JVM Dockerfile to the root directory of your project: `cp src/main/docker/Dockerfile.jvm Dockerfile`.\n+- Build your application using `mvn clean package`.\n+\n+To deploy a native application:\n+\n+- Copy the JVM Dockerfile to the root directory of your project: `cp src/main/docker/Dockerfile.native Dockerfile`.", "originalCommit": "22f5d42105c8448f0b9a7cd41865a5f8d4118a78", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzU0NjEwNA==", "url": "https://github.com/quarkusio/quarkus/pull/12759#discussion_r507546104", "bodyText": "Thanks, fixed.", "author": "loicmathieu", "createdAt": "2020-10-19T07:59:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjYzMzg1NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjYzODc4Nw==", "url": "https://github.com/quarkusio/quarkus/pull/12759#discussion_r506638787", "bodyText": "I haven't tried it for some time, but are native images working at CloudRun without setting DISABLE_SIGNAL_HANDLERS now?\nOh... I see it was you who reported it works: #4262\nWill try it by myself next week, thank you.", "author": "heubeck", "createdAt": "2020-10-16T18:00:09Z", "path": "docs/src/main/asciidoc/deploying-to-google-cloud.adoc", "diffHunk": "@@ -0,0 +1,236 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Deploying to Google Cloud Platform (GCP)\n+\n+include::./attributes.adoc[]\n+\n+This guide covers:\n+\n+* Login to Google Cloud\n+* Deploying a function to Google Cloud Functions\n+* Deploying a JAR to Google App Engine Standard\n+* Deploying a Docker image to Google App Engine Flexible Custom Runtimes\n+* Deploying a Docker image to Google Cloud Run\n+\n+== Prerequisites\n+\n+For this guide you need:\n+\n+* Roughly 1 hour for all modalities\n+* JDK 11\n+* Apache Maven {maven-version}\n+* https://cloud.google.com/[A Google Cloud Account].  Free accounts work.\n+* https://cloud.google.com/sdk[Cloud SDK CLI Installed]\n+\n+This guide will take as input an application developed in the link:getting-started[Getting Started guide].\n+\n+Make sure you have the getting-started application at hand, or clone the Git repository: `git clone {quickstarts-clone-url}`,\n+or download an {quickstarts-archive-url}[archive]. The solution is located in the `getting-started` directory.\n+\n+== Login to Google Cloud\n+\n+Login to Google Cloud is necessary for deploying the application and it can be done as follows:\n+\n+[source, subs=attributes+]\n+----\n+gcloud auth login\n+----\n+\n+== Deploying to Google Cloud Functions\n+\n+Quarkus supports deploying your application to Google Cloud Functions via the following extensions:\n+\n+- link:gcp-functions[Google Cloud Functions]: Build functions using the Google Cloud Functions API.\n+- link:gcp-functions-http[Google Cloud Functions HTTP binding]: Build functions using Quarkus HTTP APIs: RESTEasy (JAX-RS),\n+Undertow (Servlet), Vert.x Web, or link:funqy-http[Funqy HTTP].\n+- link:funqy-gcp-functions[Funky Google Cloud Functions]: Build functions using Funqy.\n+\n+Each extension support a specific kind of application development,\n+follow the specific guides for more information on how to develop, package and deploy your application using them.\n+\n+== Deploying to Google App Engine Standard\n+\n+We will only cover the Java 11 runtime as the Java 8 runtime uses its own Servlet engine which is not compatible with Quarkus.\n+\n+First of all, make sure to have an App Engine environment initialized for your Google Cloud project, if not, initialize one via `gcloud app create --project=[YOUR_PROJECT_ID]`.\n+\n+Then, you will need to create a `src/main/appengine/app.yaml` file, let's keep it minimalistic with only the selected engine:\n+\n+[source, yaml]\n+----\n+runtime: java11\n+----\n+\n+This will create a default service for your App Engine application.\n+\n+Then, you can choose to build the application by yourself or letting `gcloud` or the Google Cloud Maven build it for you.\n+\n+=== Building the application manually\n+\n+Setup your application to be packaged as an uber-jar via your `application.properties` file:\n+\n+[source, properties]\n+----\n+quarkus.package.type=uber-jar\n+----\n+\n+Use Maven to build the application using `mvn clean package`, it will generate a single JAR that contains all the classes of your application including its dependencies.\n+\n+Finally, use `gcloud` to deploy your application as an App Engine service.\n+\n+[source, shell script]\n+----\n+gcloud app deploy target/getting-started-1.0-SNAPSHOT-runner.jar\n+----\n+\n+This command will upload your application jar and launch it on App Engine.\n+\n+When done, the output will display the URL of your application (target url), you can use it with curl or directly open it on your browser using `gcloud app browse`.\n+\n+As the getting started endpoint is located on the `/hello` path, make sure to navigate to it.\n+\n+=== Building the application via gcloud\n+\n+You can choose to let `gcloud` build your application for you, this is the simplest way to deploy to App Engine.\n+\n+Just launch `gcloud app deploy` on the root of your project, it will upload all your project files (the list can be reduced via the  `.gcloudignore` file),\n+package your JAR via Maven (or Gradle) and launch it on App Engine.\n+\n+When done, the output will display the URL of your application (target url), you can use it with curl or directly open it on your browser using `gcloud app browse`.\n+\n+As the getting started endpoint is located on the `/hello` path, make sure to navigate to it.\n+\n+=== Building the application via the Maven Google Cloud plugin\n+\n+You can also let Maven control the deployment of your application using the App Engine Maven plugin.\n+\n+First, add the plugin to your `pom.xml`:\n+\n+[source, xml]\n+----\n+<plugin>\n+    <groupId>com.google.cloud.tools</groupId>\n+    <artifactId>appengine-maven-plugin</artifactId>\n+    <version>2.4.0</version>\n+    <configuration>\n+        <projectId>GCLOUD_CONFIG</projectId> <!-- <1> -->\n+        <version>gettingstarted</version>\n+        <artifact>${project.build.directory}/getting-started-${project.version}-runner.jar</artifact> <!-- <2> -->\n+    </configuration>\n+</plugin>\n+----\n+\n+1. Use the default `gcloud` configuration\n+2. Override the default JAR name to the one generated by the Quarkus Maven plugin\n+\n+Then you would be able to use Maven to build and deploy your application to App Engine via `mvn clean package appengine:deploy`.\n+\n+When it\u2019s done, the output will display the URL of your application (target URL), you can use it with curl or directly open it on your browser using `gcloud app browse`.\n+\n+As the getting started endpoint is located on the `/hello` path, make sure to navigate to it.\n+\n+== Deploying to Google App Engine Flexible Custom Runtimes\n+\n+Before all, make sure to have an App Engine environment initialized for your Google Cloud project, if not, initialize one via `gcloud app create --project=[YOUR_PROJECT_ID]`.\n+\n+App Engine Flexible Custom Runtimes uses a Docker image to run your application.\n+\n+First, create an `app.yaml` file at the root of your project with the following content:\n+\n+[source, yaml]\n+----\n+runtime: custom\n+env: flex\n+----\n+\n+App Engine Flexible Custom Runtimes deploys your application as a Docker container, you can choose to deploy one of the Dockerfile provided inside your application.\n+\n+Both JVM and native executable versions will work.\n+\n+To deploy a JVM application:\n+\n+- Copy the JVM Dockerfile to the root directory of your project: `cp src/main/docker/Dockerfile.jvm Dockerfile`.\n+- Build your application using `mvn clean package`.\n+\n+To deploy a native application:\n+\n+- Copy the JVM Dockerfile to the root directory of your project: `cp src/main/docker/Dockerfile.native Dockerfile`.\n+- Build your application as a native executable using `mvn clean package -Pnative`.\n+\n+Finally, launch `gcloud app deploy` on the root of your project, it will upload all your project files (the list can be reduced via the  `.gcloudignore` file),\n+build your Dockerfile and launch it on App Engine Flexible custom runtime.\n+\n+It uses Cloud Build to build your Docker image and deploy it to Google Container Registry (GCR).\n+\n+When done, the output will display the URL of your application (target url), you can use it with curl or directly open it on your browser using `gcloud app browse`.\n+\n+As the getting started endpoint is located on the `/hello` path, make sure to navigate to it.\n+\n+NOTE: App Engine Flexible custom runtimes support link:https://cloud.google.com/appengine/docs/flexible/custom-runtimes/configuring-your-app-with-app-yaml#updated_health_checks[health checks],\n+it is strongly advised to provide them thanks to Quarkus link:microprofile-health[Microprofile Heath] support.\n+\n+== Deploying to Google Cloud Run\n+\n+Google Cloud Run allows you to run your Docker containers inside Google Cloud Platform in a managed way.\n+\n+NOTE: By default, Quarkus listens on port 8080, and it's also the Cloud Run default port.\n+No need to use the `PORT` environment variable defined in Cloud Run to customize the Quarkus HTTP port.\n+\n+Cloud Run will use Cloud Build to build your Docker image and deploy it to Google Container Registry (GCR).\n+\n+Both JVM and native executable versions will work.\n+\n+To deploy a JVM application:\n+\n+- Copy the JVM Dockerfile to the root directory of your project: `cp src/main/docker/Dockerfile.jvm Dockerfile`.\n+- Build your application using `mvn clean package`.\n+\n+To deploy a native application:\n+\n+- Copy the JVM Dockerfile to the root directory of your project: `cp src/main/docker/Dockerfile.native Dockerfile`.\n+- Build your application as a native executable using `mvn clean package -Pnative`.\n+\n+Then, create a `.gcloudignore` file to tell gcloud which file should be not be uploaded for Cloud Build,\n+without it, it defaults to `.gitignore` that usually exclude the target directory where you packaged application has been created.\n+\n+In this example, I only exclude the `src` directory:\n+\n+[source]\n+----\n+src/\n+----\n+[source]\n+\n+Then, use Cloud Build to build your image, it will upload to a Google Cloud Storage bucket all the files of your application (except the ones ignored by the `.gcloudignore`file),\n+build your Docker image and push it to Google Container Registry (GCR).\n+\n+[source, shell script]\n+----\n+gcloud builds submit --tag gcr.io/PROJECT-ID/helloworld\n+----\n+\n+NOTE: You can also build your image locally and push it to a publicly accessible Docker registry, then use this image in the next step.\n+\n+Finally, use Cloud Run to launch your application.\n+\n+[source, shell script]\n+----\n+gcloud run deploy --image gcr.io/PROJECT-ID/helloworld --platform managed\n+----", "originalCommit": "22f5d42105c8448f0b9a7cd41865a5f8d4118a78", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzU0NjIyOQ==", "url": "https://github.com/quarkusio/quarkus/pull/12759#discussion_r507546229", "bodyText": "Yes, it works without it now.", "author": "loicmathieu", "createdAt": "2020-10-19T07:59:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjYzODc4Nw=="}], "type": "inlineReview"}, {"oid": "c99adc7439de89a062c3b399eb36162528c38265", "url": "https://github.com/quarkusio/quarkus/commit/c99adc7439de89a062c3b399eb36162528c38265", "message": "Add a Deploying to Google Cloud guide", "committedDate": "2020-10-19T07:58:44Z", "type": "forcePushed"}, {"oid": "1edf94a54284cd8e4f9bbaadb667811929cae89d", "url": "https://github.com/quarkusio/quarkus/commit/1edf94a54284cd8e4f9bbaadb667811929cae89d", "message": "Add a Deploying to Google Cloud guide", "committedDate": "2020-10-19T08:04:41Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg3Mzg5MA==", "url": "https://github.com/quarkusio/quarkus/pull/12759#discussion_r507873890", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Each extension support a specific kind of application development,\n          \n          \n            \n            Each extension supports a specific kind of application development,", "author": "gsmet", "createdAt": "2020-10-19T16:05:34Z", "path": "docs/src/main/asciidoc/deploying-to-google-cloud.adoc", "diffHunk": "@@ -0,0 +1,226 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Deploying to Google Cloud Platform (GCP)\n+\n+include::./attributes.adoc[]\n+\n+This guide covers:\n+\n+* Login to Google Cloud\n+* Deploying a function to Google Cloud Functions\n+* Deploying a JAR to Google App Engine Standard\n+* Deploying a Docker image to Google App Engine Flexible Custom Runtimes\n+* Deploying a Docker image to Google Cloud Run\n+\n+== Prerequisites\n+\n+For this guide you need:\n+\n+* Roughly 1 hour for all modalities\n+* JDK 11\n+* Apache Maven {maven-version}\n+* https://cloud.google.com/[A Google Cloud Account].  Free accounts work.\n+* https://cloud.google.com/sdk[Cloud SDK CLI Installed]\n+\n+This guide will take as input an application developed in the link:getting-started[Getting Started guide].\n+\n+Make sure you have the getting-started application at hand, or clone the Git repository: `git clone {quickstarts-clone-url}`,\n+or download an {quickstarts-archive-url}[archive]. The solution is located in the `getting-started` directory.\n+\n+== Login to Google Cloud\n+\n+Login to Google Cloud is necessary for deploying the application and it can be done as follows:\n+\n+[source, subs=attributes+]\n+----\n+gcloud auth login\n+----\n+\n+== Deploying to Google Cloud Functions\n+\n+Quarkus supports deploying your application to Google Cloud Functions via the following extensions:\n+\n+- link:gcp-functions[Google Cloud Functions]: Build functions using the Google Cloud Functions API.\n+- link:gcp-functions-http[Google Cloud Functions HTTP binding]: Build functions using Quarkus HTTP APIs: RESTEasy (JAX-RS),\n+Undertow (Servlet), Vert.x Web, or link:funqy-http[Funqy HTTP].\n+- link:funqy-gcp-functions[Funky Google Cloud Functions]: Build functions using Funqy.\n+\n+Each extension support a specific kind of application development,", "originalCommit": "1edf94a54284cd8e4f9bbaadb667811929cae89d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg3NDAzNg==", "url": "https://github.com/quarkusio/quarkus/pull/12759#discussion_r507874036", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            follow the specific guides for more information on how to develop, package and deploy your application using them.\n          \n          \n            \n            follow the specific guides for more information on how to develop, package and deploy your applications using them.", "author": "gsmet", "createdAt": "2020-10-19T16:05:48Z", "path": "docs/src/main/asciidoc/deploying-to-google-cloud.adoc", "diffHunk": "@@ -0,0 +1,226 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Deploying to Google Cloud Platform (GCP)\n+\n+include::./attributes.adoc[]\n+\n+This guide covers:\n+\n+* Login to Google Cloud\n+* Deploying a function to Google Cloud Functions\n+* Deploying a JAR to Google App Engine Standard\n+* Deploying a Docker image to Google App Engine Flexible Custom Runtimes\n+* Deploying a Docker image to Google Cloud Run\n+\n+== Prerequisites\n+\n+For this guide you need:\n+\n+* Roughly 1 hour for all modalities\n+* JDK 11\n+* Apache Maven {maven-version}\n+* https://cloud.google.com/[A Google Cloud Account].  Free accounts work.\n+* https://cloud.google.com/sdk[Cloud SDK CLI Installed]\n+\n+This guide will take as input an application developed in the link:getting-started[Getting Started guide].\n+\n+Make sure you have the getting-started application at hand, or clone the Git repository: `git clone {quickstarts-clone-url}`,\n+or download an {quickstarts-archive-url}[archive]. The solution is located in the `getting-started` directory.\n+\n+== Login to Google Cloud\n+\n+Login to Google Cloud is necessary for deploying the application and it can be done as follows:\n+\n+[source, subs=attributes+]\n+----\n+gcloud auth login\n+----\n+\n+== Deploying to Google Cloud Functions\n+\n+Quarkus supports deploying your application to Google Cloud Functions via the following extensions:\n+\n+- link:gcp-functions[Google Cloud Functions]: Build functions using the Google Cloud Functions API.\n+- link:gcp-functions-http[Google Cloud Functions HTTP binding]: Build functions using Quarkus HTTP APIs: RESTEasy (JAX-RS),\n+Undertow (Servlet), Vert.x Web, or link:funqy-http[Funqy HTTP].\n+- link:funqy-gcp-functions[Funky Google Cloud Functions]: Build functions using Funqy.\n+\n+Each extension support a specific kind of application development,\n+follow the specific guides for more information on how to develop, package and deploy your application using them.", "originalCommit": "1edf94a54284cd8e4f9bbaadb667811929cae89d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg3NDg0MQ==", "url": "https://github.com/quarkusio/quarkus/pull/12759#discussion_r507874841", "bodyText": "Google Cloud Maven plugin\nmaybe?\n(Not sure)", "author": "gsmet", "createdAt": "2020-10-19T16:06:54Z", "path": "docs/src/main/asciidoc/deploying-to-google-cloud.adoc", "diffHunk": "@@ -0,0 +1,226 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Deploying to Google Cloud Platform (GCP)\n+\n+include::./attributes.adoc[]\n+\n+This guide covers:\n+\n+* Login to Google Cloud\n+* Deploying a function to Google Cloud Functions\n+* Deploying a JAR to Google App Engine Standard\n+* Deploying a Docker image to Google App Engine Flexible Custom Runtimes\n+* Deploying a Docker image to Google Cloud Run\n+\n+== Prerequisites\n+\n+For this guide you need:\n+\n+* Roughly 1 hour for all modalities\n+* JDK 11\n+* Apache Maven {maven-version}\n+* https://cloud.google.com/[A Google Cloud Account].  Free accounts work.\n+* https://cloud.google.com/sdk[Cloud SDK CLI Installed]\n+\n+This guide will take as input an application developed in the link:getting-started[Getting Started guide].\n+\n+Make sure you have the getting-started application at hand, or clone the Git repository: `git clone {quickstarts-clone-url}`,\n+or download an {quickstarts-archive-url}[archive]. The solution is located in the `getting-started` directory.\n+\n+== Login to Google Cloud\n+\n+Login to Google Cloud is necessary for deploying the application and it can be done as follows:\n+\n+[source, subs=attributes+]\n+----\n+gcloud auth login\n+----\n+\n+== Deploying to Google Cloud Functions\n+\n+Quarkus supports deploying your application to Google Cloud Functions via the following extensions:\n+\n+- link:gcp-functions[Google Cloud Functions]: Build functions using the Google Cloud Functions API.\n+- link:gcp-functions-http[Google Cloud Functions HTTP binding]: Build functions using Quarkus HTTP APIs: RESTEasy (JAX-RS),\n+Undertow (Servlet), Vert.x Web, or link:funqy-http[Funqy HTTP].\n+- link:funqy-gcp-functions[Funky Google Cloud Functions]: Build functions using Funqy.\n+\n+Each extension support a specific kind of application development,\n+follow the specific guides for more information on how to develop, package and deploy your application using them.\n+\n+== Deploying to Google App Engine Standard\n+\n+We will only cover the Java 11 runtime as the Java 8 runtime uses its own Servlet engine which is not compatible with Quarkus.\n+\n+First of all, make sure to have an App Engine environment initialized for your Google Cloud project, if not, initialize one via `gcloud app create --project=[YOUR_PROJECT_ID]`.\n+\n+Then, you will need to create a `src/main/appengine/app.yaml` file, let's keep it minimalistic with only the selected engine:\n+\n+[source, yaml]\n+----\n+runtime: java11\n+----\n+\n+This will create a default service for your App Engine application.\n+\n+Then, you can choose to build the application by yourself or letting `gcloud` or the Google Cloud Maven build it for you.", "originalCommit": "1edf94a54284cd8e4f9bbaadb667811929cae89d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg4NzcwNg==", "url": "https://github.com/quarkusio/quarkus/pull/12759#discussion_r507887706", "bodyText": "yes, done.", "author": "loicmathieu", "createdAt": "2020-10-19T16:25:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg3NDg0MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg3NDk0OQ==", "url": "https://github.com/quarkusio/quarkus/pull/12759#discussion_r507874949", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Setup your application to be packaged as an uber-jar via your `application.properties` file:\n          \n          \n            \n            Set up your application to be packaged as an uber-jar via your `application.properties` file:", "author": "gsmet", "createdAt": "2020-10-19T16:07:05Z", "path": "docs/src/main/asciidoc/deploying-to-google-cloud.adoc", "diffHunk": "@@ -0,0 +1,226 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Deploying to Google Cloud Platform (GCP)\n+\n+include::./attributes.adoc[]\n+\n+This guide covers:\n+\n+* Login to Google Cloud\n+* Deploying a function to Google Cloud Functions\n+* Deploying a JAR to Google App Engine Standard\n+* Deploying a Docker image to Google App Engine Flexible Custom Runtimes\n+* Deploying a Docker image to Google Cloud Run\n+\n+== Prerequisites\n+\n+For this guide you need:\n+\n+* Roughly 1 hour for all modalities\n+* JDK 11\n+* Apache Maven {maven-version}\n+* https://cloud.google.com/[A Google Cloud Account].  Free accounts work.\n+* https://cloud.google.com/sdk[Cloud SDK CLI Installed]\n+\n+This guide will take as input an application developed in the link:getting-started[Getting Started guide].\n+\n+Make sure you have the getting-started application at hand, or clone the Git repository: `git clone {quickstarts-clone-url}`,\n+or download an {quickstarts-archive-url}[archive]. The solution is located in the `getting-started` directory.\n+\n+== Login to Google Cloud\n+\n+Login to Google Cloud is necessary for deploying the application and it can be done as follows:\n+\n+[source, subs=attributes+]\n+----\n+gcloud auth login\n+----\n+\n+== Deploying to Google Cloud Functions\n+\n+Quarkus supports deploying your application to Google Cloud Functions via the following extensions:\n+\n+- link:gcp-functions[Google Cloud Functions]: Build functions using the Google Cloud Functions API.\n+- link:gcp-functions-http[Google Cloud Functions HTTP binding]: Build functions using Quarkus HTTP APIs: RESTEasy (JAX-RS),\n+Undertow (Servlet), Vert.x Web, or link:funqy-http[Funqy HTTP].\n+- link:funqy-gcp-functions[Funky Google Cloud Functions]: Build functions using Funqy.\n+\n+Each extension support a specific kind of application development,\n+follow the specific guides for more information on how to develop, package and deploy your application using them.\n+\n+== Deploying to Google App Engine Standard\n+\n+We will only cover the Java 11 runtime as the Java 8 runtime uses its own Servlet engine which is not compatible with Quarkus.\n+\n+First of all, make sure to have an App Engine environment initialized for your Google Cloud project, if not, initialize one via `gcloud app create --project=[YOUR_PROJECT_ID]`.\n+\n+Then, you will need to create a `src/main/appengine/app.yaml` file, let's keep it minimalistic with only the selected engine:\n+\n+[source, yaml]\n+----\n+runtime: java11\n+----\n+\n+This will create a default service for your App Engine application.\n+\n+Then, you can choose to build the application by yourself or letting `gcloud` or the Google Cloud Maven build it for you.\n+\n+=== Building the application manually\n+\n+Setup your application to be packaged as an uber-jar via your `application.properties` file:", "originalCommit": "1edf94a54284cd8e4f9bbaadb667811929cae89d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg3NTM0Mg==", "url": "https://github.com/quarkusio/quarkus/pull/12759#discussion_r507875342", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            When done, the output will display the URL of your application (target url), you can use it with curl or directly open it on your browser using `gcloud app browse`.\n          \n          \n            \n            When done, the output will display the URL of your application (target url), you can use it with curl or directly open it in your browser using `gcloud app browse`.", "author": "gsmet", "createdAt": "2020-10-19T16:07:39Z", "path": "docs/src/main/asciidoc/deploying-to-google-cloud.adoc", "diffHunk": "@@ -0,0 +1,226 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Deploying to Google Cloud Platform (GCP)\n+\n+include::./attributes.adoc[]\n+\n+This guide covers:\n+\n+* Login to Google Cloud\n+* Deploying a function to Google Cloud Functions\n+* Deploying a JAR to Google App Engine Standard\n+* Deploying a Docker image to Google App Engine Flexible Custom Runtimes\n+* Deploying a Docker image to Google Cloud Run\n+\n+== Prerequisites\n+\n+For this guide you need:\n+\n+* Roughly 1 hour for all modalities\n+* JDK 11\n+* Apache Maven {maven-version}\n+* https://cloud.google.com/[A Google Cloud Account].  Free accounts work.\n+* https://cloud.google.com/sdk[Cloud SDK CLI Installed]\n+\n+This guide will take as input an application developed in the link:getting-started[Getting Started guide].\n+\n+Make sure you have the getting-started application at hand, or clone the Git repository: `git clone {quickstarts-clone-url}`,\n+or download an {quickstarts-archive-url}[archive]. The solution is located in the `getting-started` directory.\n+\n+== Login to Google Cloud\n+\n+Login to Google Cloud is necessary for deploying the application and it can be done as follows:\n+\n+[source, subs=attributes+]\n+----\n+gcloud auth login\n+----\n+\n+== Deploying to Google Cloud Functions\n+\n+Quarkus supports deploying your application to Google Cloud Functions via the following extensions:\n+\n+- link:gcp-functions[Google Cloud Functions]: Build functions using the Google Cloud Functions API.\n+- link:gcp-functions-http[Google Cloud Functions HTTP binding]: Build functions using Quarkus HTTP APIs: RESTEasy (JAX-RS),\n+Undertow (Servlet), Vert.x Web, or link:funqy-http[Funqy HTTP].\n+- link:funqy-gcp-functions[Funky Google Cloud Functions]: Build functions using Funqy.\n+\n+Each extension support a specific kind of application development,\n+follow the specific guides for more information on how to develop, package and deploy your application using them.\n+\n+== Deploying to Google App Engine Standard\n+\n+We will only cover the Java 11 runtime as the Java 8 runtime uses its own Servlet engine which is not compatible with Quarkus.\n+\n+First of all, make sure to have an App Engine environment initialized for your Google Cloud project, if not, initialize one via `gcloud app create --project=[YOUR_PROJECT_ID]`.\n+\n+Then, you will need to create a `src/main/appengine/app.yaml` file, let's keep it minimalistic with only the selected engine:\n+\n+[source, yaml]\n+----\n+runtime: java11\n+----\n+\n+This will create a default service for your App Engine application.\n+\n+Then, you can choose to build the application by yourself or letting `gcloud` or the Google Cloud Maven build it for you.\n+\n+=== Building the application manually\n+\n+Setup your application to be packaged as an uber-jar via your `application.properties` file:\n+\n+[source, properties]\n+----\n+quarkus.package.type=uber-jar\n+----\n+\n+Use Maven to build the application using `mvn clean package`, it will generate a single JAR that contains all the classes of your application including its dependencies.\n+\n+Finally, use `gcloud` to deploy your application as an App Engine service.\n+\n+[source, shell script]\n+----\n+gcloud app deploy target/getting-started-1.0-SNAPSHOT-runner.jar\n+----\n+\n+This command will upload your application jar and launch it on App Engine.\n+\n+When done, the output will display the URL of your application (target url), you can use it with curl or directly open it on your browser using `gcloud app browse`.", "originalCommit": "1edf94a54284cd8e4f9bbaadb667811929cae89d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg3NTU4Ng==", "url": "https://github.com/quarkusio/quarkus/pull/12759#discussion_r507875586", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Just launch `gcloud app deploy` on the root of your project, it will upload all your project files (the list can be reduced via the  `.gcloudignore` file),\n          \n          \n            \n            Just launch `gcloud app deploy` in the root of your project, it will upload all your project files (the list can be reduced via the  `.gcloudignore` file),", "author": "gsmet", "createdAt": "2020-10-19T16:08:00Z", "path": "docs/src/main/asciidoc/deploying-to-google-cloud.adoc", "diffHunk": "@@ -0,0 +1,226 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Deploying to Google Cloud Platform (GCP)\n+\n+include::./attributes.adoc[]\n+\n+This guide covers:\n+\n+* Login to Google Cloud\n+* Deploying a function to Google Cloud Functions\n+* Deploying a JAR to Google App Engine Standard\n+* Deploying a Docker image to Google App Engine Flexible Custom Runtimes\n+* Deploying a Docker image to Google Cloud Run\n+\n+== Prerequisites\n+\n+For this guide you need:\n+\n+* Roughly 1 hour for all modalities\n+* JDK 11\n+* Apache Maven {maven-version}\n+* https://cloud.google.com/[A Google Cloud Account].  Free accounts work.\n+* https://cloud.google.com/sdk[Cloud SDK CLI Installed]\n+\n+This guide will take as input an application developed in the link:getting-started[Getting Started guide].\n+\n+Make sure you have the getting-started application at hand, or clone the Git repository: `git clone {quickstarts-clone-url}`,\n+or download an {quickstarts-archive-url}[archive]. The solution is located in the `getting-started` directory.\n+\n+== Login to Google Cloud\n+\n+Login to Google Cloud is necessary for deploying the application and it can be done as follows:\n+\n+[source, subs=attributes+]\n+----\n+gcloud auth login\n+----\n+\n+== Deploying to Google Cloud Functions\n+\n+Quarkus supports deploying your application to Google Cloud Functions via the following extensions:\n+\n+- link:gcp-functions[Google Cloud Functions]: Build functions using the Google Cloud Functions API.\n+- link:gcp-functions-http[Google Cloud Functions HTTP binding]: Build functions using Quarkus HTTP APIs: RESTEasy (JAX-RS),\n+Undertow (Servlet), Vert.x Web, or link:funqy-http[Funqy HTTP].\n+- link:funqy-gcp-functions[Funky Google Cloud Functions]: Build functions using Funqy.\n+\n+Each extension support a specific kind of application development,\n+follow the specific guides for more information on how to develop, package and deploy your application using them.\n+\n+== Deploying to Google App Engine Standard\n+\n+We will only cover the Java 11 runtime as the Java 8 runtime uses its own Servlet engine which is not compatible with Quarkus.\n+\n+First of all, make sure to have an App Engine environment initialized for your Google Cloud project, if not, initialize one via `gcloud app create --project=[YOUR_PROJECT_ID]`.\n+\n+Then, you will need to create a `src/main/appengine/app.yaml` file, let's keep it minimalistic with only the selected engine:\n+\n+[source, yaml]\n+----\n+runtime: java11\n+----\n+\n+This will create a default service for your App Engine application.\n+\n+Then, you can choose to build the application by yourself or letting `gcloud` or the Google Cloud Maven build it for you.\n+\n+=== Building the application manually\n+\n+Setup your application to be packaged as an uber-jar via your `application.properties` file:\n+\n+[source, properties]\n+----\n+quarkus.package.type=uber-jar\n+----\n+\n+Use Maven to build the application using `mvn clean package`, it will generate a single JAR that contains all the classes of your application including its dependencies.\n+\n+Finally, use `gcloud` to deploy your application as an App Engine service.\n+\n+[source, shell script]\n+----\n+gcloud app deploy target/getting-started-1.0-SNAPSHOT-runner.jar\n+----\n+\n+This command will upload your application jar and launch it on App Engine.\n+\n+When done, the output will display the URL of your application (target url), you can use it with curl or directly open it on your browser using `gcloud app browse`.\n+\n+=== Building the application via gcloud\n+\n+You can choose to let `gcloud` build your application for you, this is the simplest way to deploy to App Engine.\n+\n+Just launch `gcloud app deploy` on the root of your project, it will upload all your project files (the list can be reduced via the  `.gcloudignore` file),", "originalCommit": "1edf94a54284cd8e4f9bbaadb667811929cae89d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg3NTc2MA==", "url": "https://github.com/quarkusio/quarkus/pull/12759#discussion_r507875760", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            When done, the output will display the URL of your application (target url), you can use it with curl or directly open it on your browser using `gcloud app browse`.\n          \n          \n            \n            When done, the output will display the URL of your application (target url), you can use it with curl or directly open it in your browser using `gcloud app browse`.", "author": "gsmet", "createdAt": "2020-10-19T16:08:16Z", "path": "docs/src/main/asciidoc/deploying-to-google-cloud.adoc", "diffHunk": "@@ -0,0 +1,226 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Deploying to Google Cloud Platform (GCP)\n+\n+include::./attributes.adoc[]\n+\n+This guide covers:\n+\n+* Login to Google Cloud\n+* Deploying a function to Google Cloud Functions\n+* Deploying a JAR to Google App Engine Standard\n+* Deploying a Docker image to Google App Engine Flexible Custom Runtimes\n+* Deploying a Docker image to Google Cloud Run\n+\n+== Prerequisites\n+\n+For this guide you need:\n+\n+* Roughly 1 hour for all modalities\n+* JDK 11\n+* Apache Maven {maven-version}\n+* https://cloud.google.com/[A Google Cloud Account].  Free accounts work.\n+* https://cloud.google.com/sdk[Cloud SDK CLI Installed]\n+\n+This guide will take as input an application developed in the link:getting-started[Getting Started guide].\n+\n+Make sure you have the getting-started application at hand, or clone the Git repository: `git clone {quickstarts-clone-url}`,\n+or download an {quickstarts-archive-url}[archive]. The solution is located in the `getting-started` directory.\n+\n+== Login to Google Cloud\n+\n+Login to Google Cloud is necessary for deploying the application and it can be done as follows:\n+\n+[source, subs=attributes+]\n+----\n+gcloud auth login\n+----\n+\n+== Deploying to Google Cloud Functions\n+\n+Quarkus supports deploying your application to Google Cloud Functions via the following extensions:\n+\n+- link:gcp-functions[Google Cloud Functions]: Build functions using the Google Cloud Functions API.\n+- link:gcp-functions-http[Google Cloud Functions HTTP binding]: Build functions using Quarkus HTTP APIs: RESTEasy (JAX-RS),\n+Undertow (Servlet), Vert.x Web, or link:funqy-http[Funqy HTTP].\n+- link:funqy-gcp-functions[Funky Google Cloud Functions]: Build functions using Funqy.\n+\n+Each extension support a specific kind of application development,\n+follow the specific guides for more information on how to develop, package and deploy your application using them.\n+\n+== Deploying to Google App Engine Standard\n+\n+We will only cover the Java 11 runtime as the Java 8 runtime uses its own Servlet engine which is not compatible with Quarkus.\n+\n+First of all, make sure to have an App Engine environment initialized for your Google Cloud project, if not, initialize one via `gcloud app create --project=[YOUR_PROJECT_ID]`.\n+\n+Then, you will need to create a `src/main/appengine/app.yaml` file, let's keep it minimalistic with only the selected engine:\n+\n+[source, yaml]\n+----\n+runtime: java11\n+----\n+\n+This will create a default service for your App Engine application.\n+\n+Then, you can choose to build the application by yourself or letting `gcloud` or the Google Cloud Maven build it for you.\n+\n+=== Building the application manually\n+\n+Setup your application to be packaged as an uber-jar via your `application.properties` file:\n+\n+[source, properties]\n+----\n+quarkus.package.type=uber-jar\n+----\n+\n+Use Maven to build the application using `mvn clean package`, it will generate a single JAR that contains all the classes of your application including its dependencies.\n+\n+Finally, use `gcloud` to deploy your application as an App Engine service.\n+\n+[source, shell script]\n+----\n+gcloud app deploy target/getting-started-1.0-SNAPSHOT-runner.jar\n+----\n+\n+This command will upload your application jar and launch it on App Engine.\n+\n+When done, the output will display the URL of your application (target url), you can use it with curl or directly open it on your browser using `gcloud app browse`.\n+\n+=== Building the application via gcloud\n+\n+You can choose to let `gcloud` build your application for you, this is the simplest way to deploy to App Engine.\n+\n+Just launch `gcloud app deploy` on the root of your project, it will upload all your project files (the list can be reduced via the  `.gcloudignore` file),\n+package your JAR via Maven (or Gradle) and launch it on App Engine.\n+\n+When done, the output will display the URL of your application (target url), you can use it with curl or directly open it on your browser using `gcloud app browse`.", "originalCommit": "1edf94a54284cd8e4f9bbaadb667811929cae89d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg3NTg5Mw==", "url": "https://github.com/quarkusio/quarkus/pull/12759#discussion_r507875893", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            === Building the application via the Maven Google Cloud plugin\n          \n          \n            \n            === Building the application via the Google Cloud Maven plugin", "author": "gsmet", "createdAt": "2020-10-19T16:08:28Z", "path": "docs/src/main/asciidoc/deploying-to-google-cloud.adoc", "diffHunk": "@@ -0,0 +1,226 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Deploying to Google Cloud Platform (GCP)\n+\n+include::./attributes.adoc[]\n+\n+This guide covers:\n+\n+* Login to Google Cloud\n+* Deploying a function to Google Cloud Functions\n+* Deploying a JAR to Google App Engine Standard\n+* Deploying a Docker image to Google App Engine Flexible Custom Runtimes\n+* Deploying a Docker image to Google Cloud Run\n+\n+== Prerequisites\n+\n+For this guide you need:\n+\n+* Roughly 1 hour for all modalities\n+* JDK 11\n+* Apache Maven {maven-version}\n+* https://cloud.google.com/[A Google Cloud Account].  Free accounts work.\n+* https://cloud.google.com/sdk[Cloud SDK CLI Installed]\n+\n+This guide will take as input an application developed in the link:getting-started[Getting Started guide].\n+\n+Make sure you have the getting-started application at hand, or clone the Git repository: `git clone {quickstarts-clone-url}`,\n+or download an {quickstarts-archive-url}[archive]. The solution is located in the `getting-started` directory.\n+\n+== Login to Google Cloud\n+\n+Login to Google Cloud is necessary for deploying the application and it can be done as follows:\n+\n+[source, subs=attributes+]\n+----\n+gcloud auth login\n+----\n+\n+== Deploying to Google Cloud Functions\n+\n+Quarkus supports deploying your application to Google Cloud Functions via the following extensions:\n+\n+- link:gcp-functions[Google Cloud Functions]: Build functions using the Google Cloud Functions API.\n+- link:gcp-functions-http[Google Cloud Functions HTTP binding]: Build functions using Quarkus HTTP APIs: RESTEasy (JAX-RS),\n+Undertow (Servlet), Vert.x Web, or link:funqy-http[Funqy HTTP].\n+- link:funqy-gcp-functions[Funky Google Cloud Functions]: Build functions using Funqy.\n+\n+Each extension support a specific kind of application development,\n+follow the specific guides for more information on how to develop, package and deploy your application using them.\n+\n+== Deploying to Google App Engine Standard\n+\n+We will only cover the Java 11 runtime as the Java 8 runtime uses its own Servlet engine which is not compatible with Quarkus.\n+\n+First of all, make sure to have an App Engine environment initialized for your Google Cloud project, if not, initialize one via `gcloud app create --project=[YOUR_PROJECT_ID]`.\n+\n+Then, you will need to create a `src/main/appengine/app.yaml` file, let's keep it minimalistic with only the selected engine:\n+\n+[source, yaml]\n+----\n+runtime: java11\n+----\n+\n+This will create a default service for your App Engine application.\n+\n+Then, you can choose to build the application by yourself or letting `gcloud` or the Google Cloud Maven build it for you.\n+\n+=== Building the application manually\n+\n+Setup your application to be packaged as an uber-jar via your `application.properties` file:\n+\n+[source, properties]\n+----\n+quarkus.package.type=uber-jar\n+----\n+\n+Use Maven to build the application using `mvn clean package`, it will generate a single JAR that contains all the classes of your application including its dependencies.\n+\n+Finally, use `gcloud` to deploy your application as an App Engine service.\n+\n+[source, shell script]\n+----\n+gcloud app deploy target/getting-started-1.0-SNAPSHOT-runner.jar\n+----\n+\n+This command will upload your application jar and launch it on App Engine.\n+\n+When done, the output will display the URL of your application (target url), you can use it with curl or directly open it on your browser using `gcloud app browse`.\n+\n+=== Building the application via gcloud\n+\n+You can choose to let `gcloud` build your application for you, this is the simplest way to deploy to App Engine.\n+\n+Just launch `gcloud app deploy` on the root of your project, it will upload all your project files (the list can be reduced via the  `.gcloudignore` file),\n+package your JAR via Maven (or Gradle) and launch it on App Engine.\n+\n+When done, the output will display the URL of your application (target url), you can use it with curl or directly open it on your browser using `gcloud app browse`.\n+\n+=== Building the application via the Maven Google Cloud plugin", "originalCommit": "1edf94a54284cd8e4f9bbaadb667811929cae89d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg3NjI3NQ==", "url": "https://github.com/quarkusio/quarkus/pull/12759#discussion_r507876275", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            When it\u2019s done, the output will display the URL of your application (target URL), you can use it with curl or directly open it on your browser using `gcloud app browse`.\n          \n          \n            \n            When it\u2019s done, the output will display the URL of your application (target URL), you can use it with curl or directly open it in your browser using `gcloud app browse`.", "author": "gsmet", "createdAt": "2020-10-19T16:09:06Z", "path": "docs/src/main/asciidoc/deploying-to-google-cloud.adoc", "diffHunk": "@@ -0,0 +1,226 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Deploying to Google Cloud Platform (GCP)\n+\n+include::./attributes.adoc[]\n+\n+This guide covers:\n+\n+* Login to Google Cloud\n+* Deploying a function to Google Cloud Functions\n+* Deploying a JAR to Google App Engine Standard\n+* Deploying a Docker image to Google App Engine Flexible Custom Runtimes\n+* Deploying a Docker image to Google Cloud Run\n+\n+== Prerequisites\n+\n+For this guide you need:\n+\n+* Roughly 1 hour for all modalities\n+* JDK 11\n+* Apache Maven {maven-version}\n+* https://cloud.google.com/[A Google Cloud Account].  Free accounts work.\n+* https://cloud.google.com/sdk[Cloud SDK CLI Installed]\n+\n+This guide will take as input an application developed in the link:getting-started[Getting Started guide].\n+\n+Make sure you have the getting-started application at hand, or clone the Git repository: `git clone {quickstarts-clone-url}`,\n+or download an {quickstarts-archive-url}[archive]. The solution is located in the `getting-started` directory.\n+\n+== Login to Google Cloud\n+\n+Login to Google Cloud is necessary for deploying the application and it can be done as follows:\n+\n+[source, subs=attributes+]\n+----\n+gcloud auth login\n+----\n+\n+== Deploying to Google Cloud Functions\n+\n+Quarkus supports deploying your application to Google Cloud Functions via the following extensions:\n+\n+- link:gcp-functions[Google Cloud Functions]: Build functions using the Google Cloud Functions API.\n+- link:gcp-functions-http[Google Cloud Functions HTTP binding]: Build functions using Quarkus HTTP APIs: RESTEasy (JAX-RS),\n+Undertow (Servlet), Vert.x Web, or link:funqy-http[Funqy HTTP].\n+- link:funqy-gcp-functions[Funky Google Cloud Functions]: Build functions using Funqy.\n+\n+Each extension support a specific kind of application development,\n+follow the specific guides for more information on how to develop, package and deploy your application using them.\n+\n+== Deploying to Google App Engine Standard\n+\n+We will only cover the Java 11 runtime as the Java 8 runtime uses its own Servlet engine which is not compatible with Quarkus.\n+\n+First of all, make sure to have an App Engine environment initialized for your Google Cloud project, if not, initialize one via `gcloud app create --project=[YOUR_PROJECT_ID]`.\n+\n+Then, you will need to create a `src/main/appengine/app.yaml` file, let's keep it minimalistic with only the selected engine:\n+\n+[source, yaml]\n+----\n+runtime: java11\n+----\n+\n+This will create a default service for your App Engine application.\n+\n+Then, you can choose to build the application by yourself or letting `gcloud` or the Google Cloud Maven build it for you.\n+\n+=== Building the application manually\n+\n+Setup your application to be packaged as an uber-jar via your `application.properties` file:\n+\n+[source, properties]\n+----\n+quarkus.package.type=uber-jar\n+----\n+\n+Use Maven to build the application using `mvn clean package`, it will generate a single JAR that contains all the classes of your application including its dependencies.\n+\n+Finally, use `gcloud` to deploy your application as an App Engine service.\n+\n+[source, shell script]\n+----\n+gcloud app deploy target/getting-started-1.0-SNAPSHOT-runner.jar\n+----\n+\n+This command will upload your application jar and launch it on App Engine.\n+\n+When done, the output will display the URL of your application (target url), you can use it with curl or directly open it on your browser using `gcloud app browse`.\n+\n+=== Building the application via gcloud\n+\n+You can choose to let `gcloud` build your application for you, this is the simplest way to deploy to App Engine.\n+\n+Just launch `gcloud app deploy` on the root of your project, it will upload all your project files (the list can be reduced via the  `.gcloudignore` file),\n+package your JAR via Maven (or Gradle) and launch it on App Engine.\n+\n+When done, the output will display the URL of your application (target url), you can use it with curl or directly open it on your browser using `gcloud app browse`.\n+\n+=== Building the application via the Maven Google Cloud plugin\n+\n+You can also let Maven control the deployment of your application using the App Engine Maven plugin.\n+\n+First, add the plugin to your `pom.xml`:\n+\n+[source, xml]\n+----\n+<plugin>\n+    <groupId>com.google.cloud.tools</groupId>\n+    <artifactId>appengine-maven-plugin</artifactId>\n+    <version>2.4.0</version>\n+    <configuration>\n+        <projectId>GCLOUD_CONFIG</projectId> <!-- <1> -->\n+        <version>gettingstarted</version>\n+        <artifact>${project.build.directory}/getting-started-${project.version}-runner.jar</artifact> <!-- <2> -->\n+    </configuration>\n+</plugin>\n+----\n+\n+1. Use the default `gcloud` configuration\n+2. Override the default JAR name to the one generated by the Quarkus Maven plugin\n+\n+Then you would be able to use Maven to build and deploy your application to App Engine via `mvn clean package appengine:deploy`.\n+\n+When it\u2019s done, the output will display the URL of your application (target URL), you can use it with curl or directly open it on your browser using `gcloud app browse`.", "originalCommit": "1edf94a54284cd8e4f9bbaadb667811929cae89d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg3NzEzMg==", "url": "https://github.com/quarkusio/quarkus/pull/12759#discussion_r507877132", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            - Build your application as a native executable using `mvn clean package -Pnative`.\n          \n          \n            \n            - Build your application as a native executable using `mvn clean package -Dnative`.\n          \n      \n    \n    \n  \n\nWe recommend using -D", "author": "gsmet", "createdAt": "2020-10-19T16:10:29Z", "path": "docs/src/main/asciidoc/deploying-to-google-cloud.adoc", "diffHunk": "@@ -0,0 +1,226 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Deploying to Google Cloud Platform (GCP)\n+\n+include::./attributes.adoc[]\n+\n+This guide covers:\n+\n+* Login to Google Cloud\n+* Deploying a function to Google Cloud Functions\n+* Deploying a JAR to Google App Engine Standard\n+* Deploying a Docker image to Google App Engine Flexible Custom Runtimes\n+* Deploying a Docker image to Google Cloud Run\n+\n+== Prerequisites\n+\n+For this guide you need:\n+\n+* Roughly 1 hour for all modalities\n+* JDK 11\n+* Apache Maven {maven-version}\n+* https://cloud.google.com/[A Google Cloud Account].  Free accounts work.\n+* https://cloud.google.com/sdk[Cloud SDK CLI Installed]\n+\n+This guide will take as input an application developed in the link:getting-started[Getting Started guide].\n+\n+Make sure you have the getting-started application at hand, or clone the Git repository: `git clone {quickstarts-clone-url}`,\n+or download an {quickstarts-archive-url}[archive]. The solution is located in the `getting-started` directory.\n+\n+== Login to Google Cloud\n+\n+Login to Google Cloud is necessary for deploying the application and it can be done as follows:\n+\n+[source, subs=attributes+]\n+----\n+gcloud auth login\n+----\n+\n+== Deploying to Google Cloud Functions\n+\n+Quarkus supports deploying your application to Google Cloud Functions via the following extensions:\n+\n+- link:gcp-functions[Google Cloud Functions]: Build functions using the Google Cloud Functions API.\n+- link:gcp-functions-http[Google Cloud Functions HTTP binding]: Build functions using Quarkus HTTP APIs: RESTEasy (JAX-RS),\n+Undertow (Servlet), Vert.x Web, or link:funqy-http[Funqy HTTP].\n+- link:funqy-gcp-functions[Funky Google Cloud Functions]: Build functions using Funqy.\n+\n+Each extension support a specific kind of application development,\n+follow the specific guides for more information on how to develop, package and deploy your application using them.\n+\n+== Deploying to Google App Engine Standard\n+\n+We will only cover the Java 11 runtime as the Java 8 runtime uses its own Servlet engine which is not compatible with Quarkus.\n+\n+First of all, make sure to have an App Engine environment initialized for your Google Cloud project, if not, initialize one via `gcloud app create --project=[YOUR_PROJECT_ID]`.\n+\n+Then, you will need to create a `src/main/appengine/app.yaml` file, let's keep it minimalistic with only the selected engine:\n+\n+[source, yaml]\n+----\n+runtime: java11\n+----\n+\n+This will create a default service for your App Engine application.\n+\n+Then, you can choose to build the application by yourself or letting `gcloud` or the Google Cloud Maven build it for you.\n+\n+=== Building the application manually\n+\n+Setup your application to be packaged as an uber-jar via your `application.properties` file:\n+\n+[source, properties]\n+----\n+quarkus.package.type=uber-jar\n+----\n+\n+Use Maven to build the application using `mvn clean package`, it will generate a single JAR that contains all the classes of your application including its dependencies.\n+\n+Finally, use `gcloud` to deploy your application as an App Engine service.\n+\n+[source, shell script]\n+----\n+gcloud app deploy target/getting-started-1.0-SNAPSHOT-runner.jar\n+----\n+\n+This command will upload your application jar and launch it on App Engine.\n+\n+When done, the output will display the URL of your application (target url), you can use it with curl or directly open it on your browser using `gcloud app browse`.\n+\n+=== Building the application via gcloud\n+\n+You can choose to let `gcloud` build your application for you, this is the simplest way to deploy to App Engine.\n+\n+Just launch `gcloud app deploy` on the root of your project, it will upload all your project files (the list can be reduced via the  `.gcloudignore` file),\n+package your JAR via Maven (or Gradle) and launch it on App Engine.\n+\n+When done, the output will display the URL of your application (target url), you can use it with curl or directly open it on your browser using `gcloud app browse`.\n+\n+=== Building the application via the Maven Google Cloud plugin\n+\n+You can also let Maven control the deployment of your application using the App Engine Maven plugin.\n+\n+First, add the plugin to your `pom.xml`:\n+\n+[source, xml]\n+----\n+<plugin>\n+    <groupId>com.google.cloud.tools</groupId>\n+    <artifactId>appengine-maven-plugin</artifactId>\n+    <version>2.4.0</version>\n+    <configuration>\n+        <projectId>GCLOUD_CONFIG</projectId> <!-- <1> -->\n+        <version>gettingstarted</version>\n+        <artifact>${project.build.directory}/getting-started-${project.version}-runner.jar</artifact> <!-- <2> -->\n+    </configuration>\n+</plugin>\n+----\n+\n+1. Use the default `gcloud` configuration\n+2. Override the default JAR name to the one generated by the Quarkus Maven plugin\n+\n+Then you would be able to use Maven to build and deploy your application to App Engine via `mvn clean package appengine:deploy`.\n+\n+When it\u2019s done, the output will display the URL of your application (target URL), you can use it with curl or directly open it on your browser using `gcloud app browse`.\n+\n+== Deploying to Google App Engine Flexible Custom Runtimes\n+\n+Before all, make sure to have an App Engine environment initialized for your Google Cloud project, if not, initialize one via `gcloud app create --project=[YOUR_PROJECT_ID]`.\n+\n+App Engine Flexible Custom Runtimes uses a Docker image to run your application.\n+\n+First, create an `app.yaml` file at the root of your project with the following content:\n+\n+[source, yaml]\n+----\n+runtime: custom\n+env: flex\n+----\n+\n+App Engine Flexible Custom Runtimes deploys your application as a Docker container, you can choose to deploy one of the Dockerfile provided inside your application.\n+\n+Both JVM and native executable versions will work.\n+\n+To deploy a JVM application:\n+\n+- Copy the JVM Dockerfile to the root directory of your project: `cp src/main/docker/Dockerfile.jvm Dockerfile`.\n+- Build your application using `mvn clean package`.\n+\n+To deploy a native application:\n+\n+- Copy the native Dockerfile to the root directory of your project: `cp src/main/docker/Dockerfile.native Dockerfile`.\n+- Build your application as a native executable using `mvn clean package -Pnative`.", "originalCommit": "1edf94a54284cd8e4f9bbaadb667811929cae89d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg4NTI3NA==", "url": "https://github.com/quarkusio/quarkus/pull/12759#discussion_r507885274", "bodyText": "OK, I always use -P, I'll switch for the recommended aproach then.", "author": "loicmathieu", "createdAt": "2020-10-19T16:22:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg3NzEzMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg3NzIzOQ==", "url": "https://github.com/quarkusio/quarkus/pull/12759#discussion_r507877239", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Finally, launch `gcloud app deploy` on the root of your project, it will upload all your project files (the list can be reduced via the  `.gcloudignore` file),\n          \n          \n            \n            Finally, launch `gcloud app deploy` in the root of your project, it will upload all your project files (the list can be reduced via the  `.gcloudignore` file),", "author": "gsmet", "createdAt": "2020-10-19T16:10:38Z", "path": "docs/src/main/asciidoc/deploying-to-google-cloud.adoc", "diffHunk": "@@ -0,0 +1,226 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Deploying to Google Cloud Platform (GCP)\n+\n+include::./attributes.adoc[]\n+\n+This guide covers:\n+\n+* Login to Google Cloud\n+* Deploying a function to Google Cloud Functions\n+* Deploying a JAR to Google App Engine Standard\n+* Deploying a Docker image to Google App Engine Flexible Custom Runtimes\n+* Deploying a Docker image to Google Cloud Run\n+\n+== Prerequisites\n+\n+For this guide you need:\n+\n+* Roughly 1 hour for all modalities\n+* JDK 11\n+* Apache Maven {maven-version}\n+* https://cloud.google.com/[A Google Cloud Account].  Free accounts work.\n+* https://cloud.google.com/sdk[Cloud SDK CLI Installed]\n+\n+This guide will take as input an application developed in the link:getting-started[Getting Started guide].\n+\n+Make sure you have the getting-started application at hand, or clone the Git repository: `git clone {quickstarts-clone-url}`,\n+or download an {quickstarts-archive-url}[archive]. The solution is located in the `getting-started` directory.\n+\n+== Login to Google Cloud\n+\n+Login to Google Cloud is necessary for deploying the application and it can be done as follows:\n+\n+[source, subs=attributes+]\n+----\n+gcloud auth login\n+----\n+\n+== Deploying to Google Cloud Functions\n+\n+Quarkus supports deploying your application to Google Cloud Functions via the following extensions:\n+\n+- link:gcp-functions[Google Cloud Functions]: Build functions using the Google Cloud Functions API.\n+- link:gcp-functions-http[Google Cloud Functions HTTP binding]: Build functions using Quarkus HTTP APIs: RESTEasy (JAX-RS),\n+Undertow (Servlet), Vert.x Web, or link:funqy-http[Funqy HTTP].\n+- link:funqy-gcp-functions[Funky Google Cloud Functions]: Build functions using Funqy.\n+\n+Each extension support a specific kind of application development,\n+follow the specific guides for more information on how to develop, package and deploy your application using them.\n+\n+== Deploying to Google App Engine Standard\n+\n+We will only cover the Java 11 runtime as the Java 8 runtime uses its own Servlet engine which is not compatible with Quarkus.\n+\n+First of all, make sure to have an App Engine environment initialized for your Google Cloud project, if not, initialize one via `gcloud app create --project=[YOUR_PROJECT_ID]`.\n+\n+Then, you will need to create a `src/main/appengine/app.yaml` file, let's keep it minimalistic with only the selected engine:\n+\n+[source, yaml]\n+----\n+runtime: java11\n+----\n+\n+This will create a default service for your App Engine application.\n+\n+Then, you can choose to build the application by yourself or letting `gcloud` or the Google Cloud Maven build it for you.\n+\n+=== Building the application manually\n+\n+Setup your application to be packaged as an uber-jar via your `application.properties` file:\n+\n+[source, properties]\n+----\n+quarkus.package.type=uber-jar\n+----\n+\n+Use Maven to build the application using `mvn clean package`, it will generate a single JAR that contains all the classes of your application including its dependencies.\n+\n+Finally, use `gcloud` to deploy your application as an App Engine service.\n+\n+[source, shell script]\n+----\n+gcloud app deploy target/getting-started-1.0-SNAPSHOT-runner.jar\n+----\n+\n+This command will upload your application jar and launch it on App Engine.\n+\n+When done, the output will display the URL of your application (target url), you can use it with curl or directly open it on your browser using `gcloud app browse`.\n+\n+=== Building the application via gcloud\n+\n+You can choose to let `gcloud` build your application for you, this is the simplest way to deploy to App Engine.\n+\n+Just launch `gcloud app deploy` on the root of your project, it will upload all your project files (the list can be reduced via the  `.gcloudignore` file),\n+package your JAR via Maven (or Gradle) and launch it on App Engine.\n+\n+When done, the output will display the URL of your application (target url), you can use it with curl or directly open it on your browser using `gcloud app browse`.\n+\n+=== Building the application via the Maven Google Cloud plugin\n+\n+You can also let Maven control the deployment of your application using the App Engine Maven plugin.\n+\n+First, add the plugin to your `pom.xml`:\n+\n+[source, xml]\n+----\n+<plugin>\n+    <groupId>com.google.cloud.tools</groupId>\n+    <artifactId>appengine-maven-plugin</artifactId>\n+    <version>2.4.0</version>\n+    <configuration>\n+        <projectId>GCLOUD_CONFIG</projectId> <!-- <1> -->\n+        <version>gettingstarted</version>\n+        <artifact>${project.build.directory}/getting-started-${project.version}-runner.jar</artifact> <!-- <2> -->\n+    </configuration>\n+</plugin>\n+----\n+\n+1. Use the default `gcloud` configuration\n+2. Override the default JAR name to the one generated by the Quarkus Maven plugin\n+\n+Then you would be able to use Maven to build and deploy your application to App Engine via `mvn clean package appengine:deploy`.\n+\n+When it\u2019s done, the output will display the URL of your application (target URL), you can use it with curl or directly open it on your browser using `gcloud app browse`.\n+\n+== Deploying to Google App Engine Flexible Custom Runtimes\n+\n+Before all, make sure to have an App Engine environment initialized for your Google Cloud project, if not, initialize one via `gcloud app create --project=[YOUR_PROJECT_ID]`.\n+\n+App Engine Flexible Custom Runtimes uses a Docker image to run your application.\n+\n+First, create an `app.yaml` file at the root of your project with the following content:\n+\n+[source, yaml]\n+----\n+runtime: custom\n+env: flex\n+----\n+\n+App Engine Flexible Custom Runtimes deploys your application as a Docker container, you can choose to deploy one of the Dockerfile provided inside your application.\n+\n+Both JVM and native executable versions will work.\n+\n+To deploy a JVM application:\n+\n+- Copy the JVM Dockerfile to the root directory of your project: `cp src/main/docker/Dockerfile.jvm Dockerfile`.\n+- Build your application using `mvn clean package`.\n+\n+To deploy a native application:\n+\n+- Copy the native Dockerfile to the root directory of your project: `cp src/main/docker/Dockerfile.native Dockerfile`.\n+- Build your application as a native executable using `mvn clean package -Pnative`.\n+\n+Finally, launch `gcloud app deploy` on the root of your project, it will upload all your project files (the list can be reduced via the  `.gcloudignore` file),", "originalCommit": "1edf94a54284cd8e4f9bbaadb667811929cae89d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg3NzQ3MQ==", "url": "https://github.com/quarkusio/quarkus/pull/12759#discussion_r507877471", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            When done, the output will display the URL of your application (target url), you can use it with curl or directly open it on your browser using `gcloud app browse`.\n          \n          \n            \n            When done, the output will display the URL of your application (target url), you can use it with curl or directly open it in your browser using `gcloud app browse`.", "author": "gsmet", "createdAt": "2020-10-19T16:10:58Z", "path": "docs/src/main/asciidoc/deploying-to-google-cloud.adoc", "diffHunk": "@@ -0,0 +1,226 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Deploying to Google Cloud Platform (GCP)\n+\n+include::./attributes.adoc[]\n+\n+This guide covers:\n+\n+* Login to Google Cloud\n+* Deploying a function to Google Cloud Functions\n+* Deploying a JAR to Google App Engine Standard\n+* Deploying a Docker image to Google App Engine Flexible Custom Runtimes\n+* Deploying a Docker image to Google Cloud Run\n+\n+== Prerequisites\n+\n+For this guide you need:\n+\n+* Roughly 1 hour for all modalities\n+* JDK 11\n+* Apache Maven {maven-version}\n+* https://cloud.google.com/[A Google Cloud Account].  Free accounts work.\n+* https://cloud.google.com/sdk[Cloud SDK CLI Installed]\n+\n+This guide will take as input an application developed in the link:getting-started[Getting Started guide].\n+\n+Make sure you have the getting-started application at hand, or clone the Git repository: `git clone {quickstarts-clone-url}`,\n+or download an {quickstarts-archive-url}[archive]. The solution is located in the `getting-started` directory.\n+\n+== Login to Google Cloud\n+\n+Login to Google Cloud is necessary for deploying the application and it can be done as follows:\n+\n+[source, subs=attributes+]\n+----\n+gcloud auth login\n+----\n+\n+== Deploying to Google Cloud Functions\n+\n+Quarkus supports deploying your application to Google Cloud Functions via the following extensions:\n+\n+- link:gcp-functions[Google Cloud Functions]: Build functions using the Google Cloud Functions API.\n+- link:gcp-functions-http[Google Cloud Functions HTTP binding]: Build functions using Quarkus HTTP APIs: RESTEasy (JAX-RS),\n+Undertow (Servlet), Vert.x Web, or link:funqy-http[Funqy HTTP].\n+- link:funqy-gcp-functions[Funky Google Cloud Functions]: Build functions using Funqy.\n+\n+Each extension support a specific kind of application development,\n+follow the specific guides for more information on how to develop, package and deploy your application using them.\n+\n+== Deploying to Google App Engine Standard\n+\n+We will only cover the Java 11 runtime as the Java 8 runtime uses its own Servlet engine which is not compatible with Quarkus.\n+\n+First of all, make sure to have an App Engine environment initialized for your Google Cloud project, if not, initialize one via `gcloud app create --project=[YOUR_PROJECT_ID]`.\n+\n+Then, you will need to create a `src/main/appengine/app.yaml` file, let's keep it minimalistic with only the selected engine:\n+\n+[source, yaml]\n+----\n+runtime: java11\n+----\n+\n+This will create a default service for your App Engine application.\n+\n+Then, you can choose to build the application by yourself or letting `gcloud` or the Google Cloud Maven build it for you.\n+\n+=== Building the application manually\n+\n+Setup your application to be packaged as an uber-jar via your `application.properties` file:\n+\n+[source, properties]\n+----\n+quarkus.package.type=uber-jar\n+----\n+\n+Use Maven to build the application using `mvn clean package`, it will generate a single JAR that contains all the classes of your application including its dependencies.\n+\n+Finally, use `gcloud` to deploy your application as an App Engine service.\n+\n+[source, shell script]\n+----\n+gcloud app deploy target/getting-started-1.0-SNAPSHOT-runner.jar\n+----\n+\n+This command will upload your application jar and launch it on App Engine.\n+\n+When done, the output will display the URL of your application (target url), you can use it with curl or directly open it on your browser using `gcloud app browse`.\n+\n+=== Building the application via gcloud\n+\n+You can choose to let `gcloud` build your application for you, this is the simplest way to deploy to App Engine.\n+\n+Just launch `gcloud app deploy` on the root of your project, it will upload all your project files (the list can be reduced via the  `.gcloudignore` file),\n+package your JAR via Maven (or Gradle) and launch it on App Engine.\n+\n+When done, the output will display the URL of your application (target url), you can use it with curl or directly open it on your browser using `gcloud app browse`.\n+\n+=== Building the application via the Maven Google Cloud plugin\n+\n+You can also let Maven control the deployment of your application using the App Engine Maven plugin.\n+\n+First, add the plugin to your `pom.xml`:\n+\n+[source, xml]\n+----\n+<plugin>\n+    <groupId>com.google.cloud.tools</groupId>\n+    <artifactId>appengine-maven-plugin</artifactId>\n+    <version>2.4.0</version>\n+    <configuration>\n+        <projectId>GCLOUD_CONFIG</projectId> <!-- <1> -->\n+        <version>gettingstarted</version>\n+        <artifact>${project.build.directory}/getting-started-${project.version}-runner.jar</artifact> <!-- <2> -->\n+    </configuration>\n+</plugin>\n+----\n+\n+1. Use the default `gcloud` configuration\n+2. Override the default JAR name to the one generated by the Quarkus Maven plugin\n+\n+Then you would be able to use Maven to build and deploy your application to App Engine via `mvn clean package appengine:deploy`.\n+\n+When it\u2019s done, the output will display the URL of your application (target URL), you can use it with curl or directly open it on your browser using `gcloud app browse`.\n+\n+== Deploying to Google App Engine Flexible Custom Runtimes\n+\n+Before all, make sure to have an App Engine environment initialized for your Google Cloud project, if not, initialize one via `gcloud app create --project=[YOUR_PROJECT_ID]`.\n+\n+App Engine Flexible Custom Runtimes uses a Docker image to run your application.\n+\n+First, create an `app.yaml` file at the root of your project with the following content:\n+\n+[source, yaml]\n+----\n+runtime: custom\n+env: flex\n+----\n+\n+App Engine Flexible Custom Runtimes deploys your application as a Docker container, you can choose to deploy one of the Dockerfile provided inside your application.\n+\n+Both JVM and native executable versions will work.\n+\n+To deploy a JVM application:\n+\n+- Copy the JVM Dockerfile to the root directory of your project: `cp src/main/docker/Dockerfile.jvm Dockerfile`.\n+- Build your application using `mvn clean package`.\n+\n+To deploy a native application:\n+\n+- Copy the native Dockerfile to the root directory of your project: `cp src/main/docker/Dockerfile.native Dockerfile`.\n+- Build your application as a native executable using `mvn clean package -Pnative`.\n+\n+Finally, launch `gcloud app deploy` on the root of your project, it will upload all your project files (the list can be reduced via the  `.gcloudignore` file),\n+build your Dockerfile and launch it on App Engine Flexible custom runtime.\n+\n+It uses Cloud Build to build your Docker image and deploy it to Google Container Registry (GCR).\n+\n+When done, the output will display the URL of your application (target url), you can use it with curl or directly open it on your browser using `gcloud app browse`.", "originalCommit": "1edf94a54284cd8e4f9bbaadb667811929cae89d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg3NzY1Mw==", "url": "https://github.com/quarkusio/quarkus/pull/12759#discussion_r507877653", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            it is strongly advised to provide them thanks to Quarkus link:microprofile-health[Microprofile Heath] support.\n          \n          \n            \n            it is strongly advised to provide them thanks to Quarkus link:microprofile-health[Microprofile Health] support.", "author": "gsmet", "createdAt": "2020-10-19T16:11:16Z", "path": "docs/src/main/asciidoc/deploying-to-google-cloud.adoc", "diffHunk": "@@ -0,0 +1,226 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Deploying to Google Cloud Platform (GCP)\n+\n+include::./attributes.adoc[]\n+\n+This guide covers:\n+\n+* Login to Google Cloud\n+* Deploying a function to Google Cloud Functions\n+* Deploying a JAR to Google App Engine Standard\n+* Deploying a Docker image to Google App Engine Flexible Custom Runtimes\n+* Deploying a Docker image to Google Cloud Run\n+\n+== Prerequisites\n+\n+For this guide you need:\n+\n+* Roughly 1 hour for all modalities\n+* JDK 11\n+* Apache Maven {maven-version}\n+* https://cloud.google.com/[A Google Cloud Account].  Free accounts work.\n+* https://cloud.google.com/sdk[Cloud SDK CLI Installed]\n+\n+This guide will take as input an application developed in the link:getting-started[Getting Started guide].\n+\n+Make sure you have the getting-started application at hand, or clone the Git repository: `git clone {quickstarts-clone-url}`,\n+or download an {quickstarts-archive-url}[archive]. The solution is located in the `getting-started` directory.\n+\n+== Login to Google Cloud\n+\n+Login to Google Cloud is necessary for deploying the application and it can be done as follows:\n+\n+[source, subs=attributes+]\n+----\n+gcloud auth login\n+----\n+\n+== Deploying to Google Cloud Functions\n+\n+Quarkus supports deploying your application to Google Cloud Functions via the following extensions:\n+\n+- link:gcp-functions[Google Cloud Functions]: Build functions using the Google Cloud Functions API.\n+- link:gcp-functions-http[Google Cloud Functions HTTP binding]: Build functions using Quarkus HTTP APIs: RESTEasy (JAX-RS),\n+Undertow (Servlet), Vert.x Web, or link:funqy-http[Funqy HTTP].\n+- link:funqy-gcp-functions[Funky Google Cloud Functions]: Build functions using Funqy.\n+\n+Each extension support a specific kind of application development,\n+follow the specific guides for more information on how to develop, package and deploy your application using them.\n+\n+== Deploying to Google App Engine Standard\n+\n+We will only cover the Java 11 runtime as the Java 8 runtime uses its own Servlet engine which is not compatible with Quarkus.\n+\n+First of all, make sure to have an App Engine environment initialized for your Google Cloud project, if not, initialize one via `gcloud app create --project=[YOUR_PROJECT_ID]`.\n+\n+Then, you will need to create a `src/main/appengine/app.yaml` file, let's keep it minimalistic with only the selected engine:\n+\n+[source, yaml]\n+----\n+runtime: java11\n+----\n+\n+This will create a default service for your App Engine application.\n+\n+Then, you can choose to build the application by yourself or letting `gcloud` or the Google Cloud Maven build it for you.\n+\n+=== Building the application manually\n+\n+Setup your application to be packaged as an uber-jar via your `application.properties` file:\n+\n+[source, properties]\n+----\n+quarkus.package.type=uber-jar\n+----\n+\n+Use Maven to build the application using `mvn clean package`, it will generate a single JAR that contains all the classes of your application including its dependencies.\n+\n+Finally, use `gcloud` to deploy your application as an App Engine service.\n+\n+[source, shell script]\n+----\n+gcloud app deploy target/getting-started-1.0-SNAPSHOT-runner.jar\n+----\n+\n+This command will upload your application jar and launch it on App Engine.\n+\n+When done, the output will display the URL of your application (target url), you can use it with curl or directly open it on your browser using `gcloud app browse`.\n+\n+=== Building the application via gcloud\n+\n+You can choose to let `gcloud` build your application for you, this is the simplest way to deploy to App Engine.\n+\n+Just launch `gcloud app deploy` on the root of your project, it will upload all your project files (the list can be reduced via the  `.gcloudignore` file),\n+package your JAR via Maven (or Gradle) and launch it on App Engine.\n+\n+When done, the output will display the URL of your application (target url), you can use it with curl or directly open it on your browser using `gcloud app browse`.\n+\n+=== Building the application via the Maven Google Cloud plugin\n+\n+You can also let Maven control the deployment of your application using the App Engine Maven plugin.\n+\n+First, add the plugin to your `pom.xml`:\n+\n+[source, xml]\n+----\n+<plugin>\n+    <groupId>com.google.cloud.tools</groupId>\n+    <artifactId>appengine-maven-plugin</artifactId>\n+    <version>2.4.0</version>\n+    <configuration>\n+        <projectId>GCLOUD_CONFIG</projectId> <!-- <1> -->\n+        <version>gettingstarted</version>\n+        <artifact>${project.build.directory}/getting-started-${project.version}-runner.jar</artifact> <!-- <2> -->\n+    </configuration>\n+</plugin>\n+----\n+\n+1. Use the default `gcloud` configuration\n+2. Override the default JAR name to the one generated by the Quarkus Maven plugin\n+\n+Then you would be able to use Maven to build and deploy your application to App Engine via `mvn clean package appengine:deploy`.\n+\n+When it\u2019s done, the output will display the URL of your application (target URL), you can use it with curl or directly open it on your browser using `gcloud app browse`.\n+\n+== Deploying to Google App Engine Flexible Custom Runtimes\n+\n+Before all, make sure to have an App Engine environment initialized for your Google Cloud project, if not, initialize one via `gcloud app create --project=[YOUR_PROJECT_ID]`.\n+\n+App Engine Flexible Custom Runtimes uses a Docker image to run your application.\n+\n+First, create an `app.yaml` file at the root of your project with the following content:\n+\n+[source, yaml]\n+----\n+runtime: custom\n+env: flex\n+----\n+\n+App Engine Flexible Custom Runtimes deploys your application as a Docker container, you can choose to deploy one of the Dockerfile provided inside your application.\n+\n+Both JVM and native executable versions will work.\n+\n+To deploy a JVM application:\n+\n+- Copy the JVM Dockerfile to the root directory of your project: `cp src/main/docker/Dockerfile.jvm Dockerfile`.\n+- Build your application using `mvn clean package`.\n+\n+To deploy a native application:\n+\n+- Copy the native Dockerfile to the root directory of your project: `cp src/main/docker/Dockerfile.native Dockerfile`.\n+- Build your application as a native executable using `mvn clean package -Pnative`.\n+\n+Finally, launch `gcloud app deploy` on the root of your project, it will upload all your project files (the list can be reduced via the  `.gcloudignore` file),\n+build your Dockerfile and launch it on App Engine Flexible custom runtime.\n+\n+It uses Cloud Build to build your Docker image and deploy it to Google Container Registry (GCR).\n+\n+When done, the output will display the URL of your application (target url), you can use it with curl or directly open it on your browser using `gcloud app browse`.\n+\n+NOTE: App Engine Flexible custom runtimes support link:https://cloud.google.com/appengine/docs/flexible/custom-runtimes/configuring-your-app-with-app-yaml#updated_health_checks[health checks],\n+it is strongly advised to provide them thanks to Quarkus link:microprofile-health[Microprofile Heath] support.", "originalCommit": "1edf94a54284cd8e4f9bbaadb667811929cae89d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg3ODA4NA==", "url": "https://github.com/quarkusio/quarkus/pull/12759#discussion_r507878084", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            - Build your application as a native executable using `mvn clean package -Pnative`.\n          \n          \n            \n            - Build your application as a native executable using `mvn clean package -Dnative`.", "author": "gsmet", "createdAt": "2020-10-19T16:11:53Z", "path": "docs/src/main/asciidoc/deploying-to-google-cloud.adoc", "diffHunk": "@@ -0,0 +1,226 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Deploying to Google Cloud Platform (GCP)\n+\n+include::./attributes.adoc[]\n+\n+This guide covers:\n+\n+* Login to Google Cloud\n+* Deploying a function to Google Cloud Functions\n+* Deploying a JAR to Google App Engine Standard\n+* Deploying a Docker image to Google App Engine Flexible Custom Runtimes\n+* Deploying a Docker image to Google Cloud Run\n+\n+== Prerequisites\n+\n+For this guide you need:\n+\n+* Roughly 1 hour for all modalities\n+* JDK 11\n+* Apache Maven {maven-version}\n+* https://cloud.google.com/[A Google Cloud Account].  Free accounts work.\n+* https://cloud.google.com/sdk[Cloud SDK CLI Installed]\n+\n+This guide will take as input an application developed in the link:getting-started[Getting Started guide].\n+\n+Make sure you have the getting-started application at hand, or clone the Git repository: `git clone {quickstarts-clone-url}`,\n+or download an {quickstarts-archive-url}[archive]. The solution is located in the `getting-started` directory.\n+\n+== Login to Google Cloud\n+\n+Login to Google Cloud is necessary for deploying the application and it can be done as follows:\n+\n+[source, subs=attributes+]\n+----\n+gcloud auth login\n+----\n+\n+== Deploying to Google Cloud Functions\n+\n+Quarkus supports deploying your application to Google Cloud Functions via the following extensions:\n+\n+- link:gcp-functions[Google Cloud Functions]: Build functions using the Google Cloud Functions API.\n+- link:gcp-functions-http[Google Cloud Functions HTTP binding]: Build functions using Quarkus HTTP APIs: RESTEasy (JAX-RS),\n+Undertow (Servlet), Vert.x Web, or link:funqy-http[Funqy HTTP].\n+- link:funqy-gcp-functions[Funky Google Cloud Functions]: Build functions using Funqy.\n+\n+Each extension support a specific kind of application development,\n+follow the specific guides for more information on how to develop, package and deploy your application using them.\n+\n+== Deploying to Google App Engine Standard\n+\n+We will only cover the Java 11 runtime as the Java 8 runtime uses its own Servlet engine which is not compatible with Quarkus.\n+\n+First of all, make sure to have an App Engine environment initialized for your Google Cloud project, if not, initialize one via `gcloud app create --project=[YOUR_PROJECT_ID]`.\n+\n+Then, you will need to create a `src/main/appengine/app.yaml` file, let's keep it minimalistic with only the selected engine:\n+\n+[source, yaml]\n+----\n+runtime: java11\n+----\n+\n+This will create a default service for your App Engine application.\n+\n+Then, you can choose to build the application by yourself or letting `gcloud` or the Google Cloud Maven build it for you.\n+\n+=== Building the application manually\n+\n+Setup your application to be packaged as an uber-jar via your `application.properties` file:\n+\n+[source, properties]\n+----\n+quarkus.package.type=uber-jar\n+----\n+\n+Use Maven to build the application using `mvn clean package`, it will generate a single JAR that contains all the classes of your application including its dependencies.\n+\n+Finally, use `gcloud` to deploy your application as an App Engine service.\n+\n+[source, shell script]\n+----\n+gcloud app deploy target/getting-started-1.0-SNAPSHOT-runner.jar\n+----\n+\n+This command will upload your application jar and launch it on App Engine.\n+\n+When done, the output will display the URL of your application (target url), you can use it with curl or directly open it on your browser using `gcloud app browse`.\n+\n+=== Building the application via gcloud\n+\n+You can choose to let `gcloud` build your application for you, this is the simplest way to deploy to App Engine.\n+\n+Just launch `gcloud app deploy` on the root of your project, it will upload all your project files (the list can be reduced via the  `.gcloudignore` file),\n+package your JAR via Maven (or Gradle) and launch it on App Engine.\n+\n+When done, the output will display the URL of your application (target url), you can use it with curl or directly open it on your browser using `gcloud app browse`.\n+\n+=== Building the application via the Maven Google Cloud plugin\n+\n+You can also let Maven control the deployment of your application using the App Engine Maven plugin.\n+\n+First, add the plugin to your `pom.xml`:\n+\n+[source, xml]\n+----\n+<plugin>\n+    <groupId>com.google.cloud.tools</groupId>\n+    <artifactId>appengine-maven-plugin</artifactId>\n+    <version>2.4.0</version>\n+    <configuration>\n+        <projectId>GCLOUD_CONFIG</projectId> <!-- <1> -->\n+        <version>gettingstarted</version>\n+        <artifact>${project.build.directory}/getting-started-${project.version}-runner.jar</artifact> <!-- <2> -->\n+    </configuration>\n+</plugin>\n+----\n+\n+1. Use the default `gcloud` configuration\n+2. Override the default JAR name to the one generated by the Quarkus Maven plugin\n+\n+Then you would be able to use Maven to build and deploy your application to App Engine via `mvn clean package appengine:deploy`.\n+\n+When it\u2019s done, the output will display the URL of your application (target URL), you can use it with curl or directly open it on your browser using `gcloud app browse`.\n+\n+== Deploying to Google App Engine Flexible Custom Runtimes\n+\n+Before all, make sure to have an App Engine environment initialized for your Google Cloud project, if not, initialize one via `gcloud app create --project=[YOUR_PROJECT_ID]`.\n+\n+App Engine Flexible Custom Runtimes uses a Docker image to run your application.\n+\n+First, create an `app.yaml` file at the root of your project with the following content:\n+\n+[source, yaml]\n+----\n+runtime: custom\n+env: flex\n+----\n+\n+App Engine Flexible Custom Runtimes deploys your application as a Docker container, you can choose to deploy one of the Dockerfile provided inside your application.\n+\n+Both JVM and native executable versions will work.\n+\n+To deploy a JVM application:\n+\n+- Copy the JVM Dockerfile to the root directory of your project: `cp src/main/docker/Dockerfile.jvm Dockerfile`.\n+- Build your application using `mvn clean package`.\n+\n+To deploy a native application:\n+\n+- Copy the native Dockerfile to the root directory of your project: `cp src/main/docker/Dockerfile.native Dockerfile`.\n+- Build your application as a native executable using `mvn clean package -Pnative`.\n+\n+Finally, launch `gcloud app deploy` on the root of your project, it will upload all your project files (the list can be reduced via the  `.gcloudignore` file),\n+build your Dockerfile and launch it on App Engine Flexible custom runtime.\n+\n+It uses Cloud Build to build your Docker image and deploy it to Google Container Registry (GCR).\n+\n+When done, the output will display the URL of your application (target url), you can use it with curl or directly open it on your browser using `gcloud app browse`.\n+\n+NOTE: App Engine Flexible custom runtimes support link:https://cloud.google.com/appengine/docs/flexible/custom-runtimes/configuring-your-app-with-app-yaml#updated_health_checks[health checks],\n+it is strongly advised to provide them thanks to Quarkus link:microprofile-health[Microprofile Heath] support.\n+\n+== Deploying to Google Cloud Run\n+\n+Google Cloud Run allows you to run your Docker containers inside Google Cloud Platform in a managed way.\n+\n+NOTE: By default, Quarkus listens on port 8080, and it's also the Cloud Run default port.\n+No need to use the `PORT` environment variable defined in Cloud Run to customize the Quarkus HTTP port.\n+\n+Cloud Run will use Cloud Build to build your Docker image and deploy it to Google Container Registry (GCR).\n+\n+Both JVM and native executable versions will work.\n+\n+To deploy a JVM application:\n+\n+- Copy the JVM Dockerfile to the root directory of your project: `cp src/main/docker/Dockerfile.jvm Dockerfile`.\n+- Build your application using `mvn clean package`.\n+\n+To deploy a native application:\n+\n+- Copy the native Dockerfile to the root directory of your project: `cp src/main/docker/Dockerfile.native Dockerfile`.\n+- Build your application as a native executable using `mvn clean package -Pnative`.", "originalCommit": "1edf94a54284cd8e4f9bbaadb667811929cae89d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg3ODE5NA==", "url": "https://github.com/quarkusio/quarkus/pull/12759#discussion_r507878194", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Then, create a `.gcloudignore` file to tell gcloud which file should be not be uploaded for Cloud Build,\n          \n          \n            \n            Then, create a `.gcloudignore` file to tell gcloud which files should be not be uploaded for Cloud Build,", "author": "gsmet", "createdAt": "2020-10-19T16:12:01Z", "path": "docs/src/main/asciidoc/deploying-to-google-cloud.adoc", "diffHunk": "@@ -0,0 +1,226 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Deploying to Google Cloud Platform (GCP)\n+\n+include::./attributes.adoc[]\n+\n+This guide covers:\n+\n+* Login to Google Cloud\n+* Deploying a function to Google Cloud Functions\n+* Deploying a JAR to Google App Engine Standard\n+* Deploying a Docker image to Google App Engine Flexible Custom Runtimes\n+* Deploying a Docker image to Google Cloud Run\n+\n+== Prerequisites\n+\n+For this guide you need:\n+\n+* Roughly 1 hour for all modalities\n+* JDK 11\n+* Apache Maven {maven-version}\n+* https://cloud.google.com/[A Google Cloud Account].  Free accounts work.\n+* https://cloud.google.com/sdk[Cloud SDK CLI Installed]\n+\n+This guide will take as input an application developed in the link:getting-started[Getting Started guide].\n+\n+Make sure you have the getting-started application at hand, or clone the Git repository: `git clone {quickstarts-clone-url}`,\n+or download an {quickstarts-archive-url}[archive]. The solution is located in the `getting-started` directory.\n+\n+== Login to Google Cloud\n+\n+Login to Google Cloud is necessary for deploying the application and it can be done as follows:\n+\n+[source, subs=attributes+]\n+----\n+gcloud auth login\n+----\n+\n+== Deploying to Google Cloud Functions\n+\n+Quarkus supports deploying your application to Google Cloud Functions via the following extensions:\n+\n+- link:gcp-functions[Google Cloud Functions]: Build functions using the Google Cloud Functions API.\n+- link:gcp-functions-http[Google Cloud Functions HTTP binding]: Build functions using Quarkus HTTP APIs: RESTEasy (JAX-RS),\n+Undertow (Servlet), Vert.x Web, or link:funqy-http[Funqy HTTP].\n+- link:funqy-gcp-functions[Funky Google Cloud Functions]: Build functions using Funqy.\n+\n+Each extension support a specific kind of application development,\n+follow the specific guides for more information on how to develop, package and deploy your application using them.\n+\n+== Deploying to Google App Engine Standard\n+\n+We will only cover the Java 11 runtime as the Java 8 runtime uses its own Servlet engine which is not compatible with Quarkus.\n+\n+First of all, make sure to have an App Engine environment initialized for your Google Cloud project, if not, initialize one via `gcloud app create --project=[YOUR_PROJECT_ID]`.\n+\n+Then, you will need to create a `src/main/appengine/app.yaml` file, let's keep it minimalistic with only the selected engine:\n+\n+[source, yaml]\n+----\n+runtime: java11\n+----\n+\n+This will create a default service for your App Engine application.\n+\n+Then, you can choose to build the application by yourself or letting `gcloud` or the Google Cloud Maven build it for you.\n+\n+=== Building the application manually\n+\n+Setup your application to be packaged as an uber-jar via your `application.properties` file:\n+\n+[source, properties]\n+----\n+quarkus.package.type=uber-jar\n+----\n+\n+Use Maven to build the application using `mvn clean package`, it will generate a single JAR that contains all the classes of your application including its dependencies.\n+\n+Finally, use `gcloud` to deploy your application as an App Engine service.\n+\n+[source, shell script]\n+----\n+gcloud app deploy target/getting-started-1.0-SNAPSHOT-runner.jar\n+----\n+\n+This command will upload your application jar and launch it on App Engine.\n+\n+When done, the output will display the URL of your application (target url), you can use it with curl or directly open it on your browser using `gcloud app browse`.\n+\n+=== Building the application via gcloud\n+\n+You can choose to let `gcloud` build your application for you, this is the simplest way to deploy to App Engine.\n+\n+Just launch `gcloud app deploy` on the root of your project, it will upload all your project files (the list can be reduced via the  `.gcloudignore` file),\n+package your JAR via Maven (or Gradle) and launch it on App Engine.\n+\n+When done, the output will display the URL of your application (target url), you can use it with curl or directly open it on your browser using `gcloud app browse`.\n+\n+=== Building the application via the Maven Google Cloud plugin\n+\n+You can also let Maven control the deployment of your application using the App Engine Maven plugin.\n+\n+First, add the plugin to your `pom.xml`:\n+\n+[source, xml]\n+----\n+<plugin>\n+    <groupId>com.google.cloud.tools</groupId>\n+    <artifactId>appengine-maven-plugin</artifactId>\n+    <version>2.4.0</version>\n+    <configuration>\n+        <projectId>GCLOUD_CONFIG</projectId> <!-- <1> -->\n+        <version>gettingstarted</version>\n+        <artifact>${project.build.directory}/getting-started-${project.version}-runner.jar</artifact> <!-- <2> -->\n+    </configuration>\n+</plugin>\n+----\n+\n+1. Use the default `gcloud` configuration\n+2. Override the default JAR name to the one generated by the Quarkus Maven plugin\n+\n+Then you would be able to use Maven to build and deploy your application to App Engine via `mvn clean package appengine:deploy`.\n+\n+When it\u2019s done, the output will display the URL of your application (target URL), you can use it with curl or directly open it on your browser using `gcloud app browse`.\n+\n+== Deploying to Google App Engine Flexible Custom Runtimes\n+\n+Before all, make sure to have an App Engine environment initialized for your Google Cloud project, if not, initialize one via `gcloud app create --project=[YOUR_PROJECT_ID]`.\n+\n+App Engine Flexible Custom Runtimes uses a Docker image to run your application.\n+\n+First, create an `app.yaml` file at the root of your project with the following content:\n+\n+[source, yaml]\n+----\n+runtime: custom\n+env: flex\n+----\n+\n+App Engine Flexible Custom Runtimes deploys your application as a Docker container, you can choose to deploy one of the Dockerfile provided inside your application.\n+\n+Both JVM and native executable versions will work.\n+\n+To deploy a JVM application:\n+\n+- Copy the JVM Dockerfile to the root directory of your project: `cp src/main/docker/Dockerfile.jvm Dockerfile`.\n+- Build your application using `mvn clean package`.\n+\n+To deploy a native application:\n+\n+- Copy the native Dockerfile to the root directory of your project: `cp src/main/docker/Dockerfile.native Dockerfile`.\n+- Build your application as a native executable using `mvn clean package -Pnative`.\n+\n+Finally, launch `gcloud app deploy` on the root of your project, it will upload all your project files (the list can be reduced via the  `.gcloudignore` file),\n+build your Dockerfile and launch it on App Engine Flexible custom runtime.\n+\n+It uses Cloud Build to build your Docker image and deploy it to Google Container Registry (GCR).\n+\n+When done, the output will display the URL of your application (target url), you can use it with curl or directly open it on your browser using `gcloud app browse`.\n+\n+NOTE: App Engine Flexible custom runtimes support link:https://cloud.google.com/appengine/docs/flexible/custom-runtimes/configuring-your-app-with-app-yaml#updated_health_checks[health checks],\n+it is strongly advised to provide them thanks to Quarkus link:microprofile-health[Microprofile Heath] support.\n+\n+== Deploying to Google Cloud Run\n+\n+Google Cloud Run allows you to run your Docker containers inside Google Cloud Platform in a managed way.\n+\n+NOTE: By default, Quarkus listens on port 8080, and it's also the Cloud Run default port.\n+No need to use the `PORT` environment variable defined in Cloud Run to customize the Quarkus HTTP port.\n+\n+Cloud Run will use Cloud Build to build your Docker image and deploy it to Google Container Registry (GCR).\n+\n+Both JVM and native executable versions will work.\n+\n+To deploy a JVM application:\n+\n+- Copy the JVM Dockerfile to the root directory of your project: `cp src/main/docker/Dockerfile.jvm Dockerfile`.\n+- Build your application using `mvn clean package`.\n+\n+To deploy a native application:\n+\n+- Copy the native Dockerfile to the root directory of your project: `cp src/main/docker/Dockerfile.native Dockerfile`.\n+- Build your application as a native executable using `mvn clean package -Pnative`.\n+\n+Then, create a `.gcloudignore` file to tell gcloud which file should be not be uploaded for Cloud Build,", "originalCommit": "1edf94a54284cd8e4f9bbaadb667811929cae89d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "1e2ee328d78dd930676ae4a52dff8b3d7b365443", "url": "https://github.com/quarkusio/quarkus/commit/1e2ee328d78dd930676ae4a52dff8b3d7b365443", "message": "Add a Deploying to Google Cloud guide", "committedDate": "2020-10-19T16:25:31Z", "type": "commit"}, {"oid": "1e2ee328d78dd930676ae4a52dff8b3d7b365443", "url": "https://github.com/quarkusio/quarkus/commit/1e2ee328d78dd930676ae4a52dff8b3d7b365443", "message": "Add a Deploying to Google Cloud guide", "committedDate": "2020-10-19T16:25:31Z", "type": "forcePushed"}]}