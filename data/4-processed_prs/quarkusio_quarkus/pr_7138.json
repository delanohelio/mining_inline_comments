{"pr_number": 7138, "pr_title": "Gather and expose information about all known scopes before transforming annotations", "pr_createdAt": "2020-02-11T12:32:47Z", "pr_url": "https://github.com/quarkusio/quarkus/pull/7138", "timeline": [{"oid": "50447b176bcc324d0f40d9904e1af8545ebd9bd2", "url": "https://github.com/quarkusio/quarkus/commit/50447b176bcc324d0f40d9904e1af8545ebd9bd2", "message": "Gather and expose information about all known scopes before transforming annotations.", "committedDate": "2020-02-18T10:11:37Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDYxNzAzOQ==", "url": "https://github.com/quarkusio/quarkus/pull/7138#discussion_r380617039", "bodyText": "I'm not so sure it was a good idea to add the annotation name to the ContextRegistrarBuildItem. In theory, you can use one ContextRegistrarBuildItem to register multiple contexts. It might make more sense to create a separate build item or to make it DotName[]...", "author": "mkouba", "createdAt": "2020-02-18T11:33:59Z", "path": "extensions/arc/deployment/src/main/java/io/quarkus/arc/deployment/ContextRegistrarBuildItem.java", "diffHunk": "@@ -9,12 +11,18 @@\n public final class ContextRegistrarBuildItem extends MultiBuildItem {\n \n     private final ContextRegistrar contextRegistrar;\n+    private final DotName annotationName;\n \n-    public ContextRegistrarBuildItem(ContextRegistrar contextRegistrar) {\n+    public ContextRegistrarBuildItem(ContextRegistrar contextRegistrar, DotName annotationName) {", "originalCommit": "50447b176bcc324d0f40d9904e1af8545ebd9bd2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDYyNjQ1MA==", "url": "https://github.com/quarkusio/quarkus/pull/7138#discussion_r380626450", "bodyText": "Also it would make sense to pass Class<? extends Annotation> and create a DotName  under the hood. Maybe we should create a a builder to avoid \"too many constructors hell\".", "author": "mkouba", "createdAt": "2020-02-18T11:54:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDYxNzAzOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTIxODk3Ng==", "url": "https://github.com/quarkusio/quarkus/pull/7138#discussion_r381218976", "bodyText": "In the original issue we discussed that it would be nicer to have just one build item. IMO it's better to have one item for one task whenever possible (task being custom context registration). Otherwise you risk having a context registered but not the name of the scope.", "author": "manovotn", "createdAt": "2020-02-19T10:55:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDYxNzAzOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDYxNzI3OA==", "url": "https://github.com/quarkusio/quarkus/pull/7138#discussion_r380617278", "bodyText": "We should probably extract this method in a public util class.", "author": "mkouba", "createdAt": "2020-02-18T11:34:35Z", "path": "extensions/arc/deployment/src/main/java/io/quarkus/arc/deployment/StartupBuildSteps.java", "diffHunk": "@@ -74,6 +76,15 @@ public void transform(TransformationContext context) {\n         });\n     }\n \n+    public static boolean isDeclaredOn(Collection<DotName> scopes, ClassInfo clazz) {", "originalCommit": "50447b176bcc324d0f40d9904e1af8545ebd9bd2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDYyNzY0NQ==", "url": "https://github.com/quarkusio/quarkus/pull/7138#discussion_r380627645", "bodyText": "I can see a little inconsistency here - build steps can simply inject the list of ContextRegistrarBuildItem, ie. Key.SCOPES_NAMES is not needed. However, regular ArC extensions have no way to register custom annotations and so Key.SCOPES_NAMES is not very useful outside quarkus.", "author": "mkouba", "createdAt": "2020-02-18T11:57:39Z", "path": "extensions/arc/deployment/src/main/java/io/quarkus/arc/deployment/StartupBuildSteps.java", "diffHunk": "@@ -62,7 +64,7 @@ public boolean appliesTo(org.jboss.jandex.AnnotationTarget.Kind kind) {\n \n             @Override\n             public void transform(TransformationContext context) {\n-                if (context.isClass() && !BuiltinScope.isDeclaredOn(context.getTarget().asClass())) {\n+                if (context.isClass() && !isDeclaredOn(context.get(Key.SCOPES_NAMES), context.getTarget().asClass())) {", "originalCommit": "50447b176bcc324d0f40d9904e1af8545ebd9bd2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTIyMDU2OQ==", "url": "https://github.com/quarkusio/quarkus/pull/7138#discussion_r381220569", "bodyText": "Note that KEY.SCOPE_NAMES is all scopes that ArC knows, not just custom one. That allows any Quarkus-ArC extension to check the list of all known scopes at (almost) any point and using the same way that you would use to grab annotation store, injection points, beans.... Without it, you need to work with a combination of built in scopes and context registrar items. What I attempted here just seemed a lot more user friendly to me.", "author": "manovotn", "createdAt": "2020-02-19T10:59:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDYyNzY0NQ=="}], "type": "inlineReview"}, {"oid": "5c00e0ed2e370544e509ecdc866424d0f5275518", "url": "https://github.com/quarkusio/quarkus/commit/5c00e0ed2e370544e509ecdc866424d0f5275518", "message": "Gather and expose information about all known scopes before transforming annotations.", "committedDate": "2020-02-19T13:38:43Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTM2NzQ2Ng==", "url": "https://github.com/quarkusio/quarkus/pull/7138#discussion_r381367466", "bodyText": "You could call the ContextRegistrarBuildItem(ContextRegistrar contextRegistrar, DotName... annotationsNames) constructor instead... something like:\nthis(contextRegistrar, annotationsClasses.stream().map(Class::getName).map(DotName::createSimple).toArray(DotName[]::new));", "author": "mkouba", "createdAt": "2020-02-19T15:58:14Z", "path": "extensions/arc/deployment/src/main/java/io/quarkus/arc/deployment/ContextRegistrarBuildItem.java", "diffHunk": "@@ -1,20 +1,56 @@\n package io.quarkus.arc.deployment;\n \n+import java.lang.annotation.Annotation;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+\n+import org.jboss.jandex.DotName;\n+\n import io.quarkus.arc.processor.ContextRegistrar;\n import io.quarkus.builder.item.MultiBuildItem;\n \n /**\n- * Make it possible to register a custom CDI context.\n+ * Make it possible to register one or more custom CDI contexts.\n+ * If you are registering a new context, you should also pass in the annotation value into the constructor either in\n+ * {@link DotName} form, or as {@code Class<? extends Annotation>}.\n+ *\n+ * This information is then leveraged in {@link CustomScopeAnnotationsBuildItem} which allows consumers to browse\n+ * all known custom scoped within deployment even early in the build process.\n  */\n public final class ContextRegistrarBuildItem extends MultiBuildItem {\n \n     private final ContextRegistrar contextRegistrar;\n+    private final Collection<DotName> annotationNames;\n \n-    public ContextRegistrarBuildItem(ContextRegistrar contextRegistrar) {\n+    public ContextRegistrarBuildItem(ContextRegistrar contextRegistrar, DotName... annotationsNames) {\n         this.contextRegistrar = contextRegistrar;\n+        if (annotationsNames == null) {\n+            throw new IllegalArgumentException(\"Parameter annotationNames cannot be null!\");\n+        }\n+        Collection<DotName> names = new ArrayList<>(annotationsNames.length);\n+        for (DotName name : annotationsNames) {\n+            names.add(name);\n+        }\n+        this.annotationNames = names;\n+    }\n+\n+    public ContextRegistrarBuildItem(ContextRegistrar contextRegistrar, Class<? extends Annotation>... annotationsClasses) {\n+        this.contextRegistrar = contextRegistrar;", "originalCommit": "5c00e0ed2e370544e509ecdc866424d0f5275518", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTM2ODE0NQ==", "url": "https://github.com/quarkusio/quarkus/pull/7138#discussion_r381368145", "bodyText": "I'd probably use the javabean convention here, ie. getCustomScopeNames().", "author": "mkouba", "createdAt": "2020-02-19T15:59:07Z", "path": "extensions/arc/deployment/src/main/java/io/quarkus/arc/deployment/CustomScopeAnnotationsBuildItem.java", "diffHunk": "@@ -0,0 +1,61 @@\n+package io.quarkus.arc.deployment;\n+\n+import java.util.Collection;\n+\n+import org.jboss.jandex.ClassInfo;\n+import org.jboss.jandex.DotName;\n+\n+import io.quarkus.arc.processor.BuiltinScope;\n+import io.quarkus.builder.item.SimpleBuildItem;\n+\n+/**\n+ * Holds information about all known custom scopes in the deployment and has utility methods allowing to check\n+ * whether given class has some scope annotation.\n+ */\n+public final class CustomScopeAnnotationsBuildItem extends SimpleBuildItem {\n+\n+    private Collection<DotName> customScopeNames;\n+\n+    public CustomScopeAnnotationsBuildItem(Collection<DotName> customScopeNames) {\n+        this.customScopeNames = customScopeNames;\n+    }\n+\n+    /**\n+     * Returns a collection of all known custom scopes represented as {@link DotName}.\n+     *\n+     * @return collection of known custom scopes (built-in scopes are not included)\n+     */\n+    public Collection<DotName> getAllCustomScopeNames() {", "originalCommit": "5c00e0ed2e370544e509ecdc866424d0f5275518", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTM2ODgxNA==", "url": "https://github.com/quarkusio/quarkus/pull/7138#discussion_r381368814", "bodyText": "return BuiltinScope.isDeclaredOn(clazz) || isDeclaredOn(clazz)? ;-)", "author": "mkouba", "createdAt": "2020-02-19T16:00:01Z", "path": "extensions/arc/deployment/src/main/java/io/quarkus/arc/deployment/CustomScopeAnnotationsBuildItem.java", "diffHunk": "@@ -0,0 +1,61 @@\n+package io.quarkus.arc.deployment;\n+\n+import java.util.Collection;\n+\n+import org.jboss.jandex.ClassInfo;\n+import org.jboss.jandex.DotName;\n+\n+import io.quarkus.arc.processor.BuiltinScope;\n+import io.quarkus.builder.item.SimpleBuildItem;\n+\n+/**\n+ * Holds information about all known custom scopes in the deployment and has utility methods allowing to check\n+ * whether given class has some scope annotation.\n+ */\n+public final class CustomScopeAnnotationsBuildItem extends SimpleBuildItem {\n+\n+    private Collection<DotName> customScopeNames;\n+\n+    public CustomScopeAnnotationsBuildItem(Collection<DotName> customScopeNames) {\n+        this.customScopeNames = customScopeNames;\n+    }\n+\n+    /**\n+     * Returns a collection of all known custom scopes represented as {@link DotName}.\n+     *\n+     * @return collection of known custom scopes (built-in scopes are not included)\n+     */\n+    public Collection<DotName> getAllCustomScopeNames() {\n+        return customScopeNames;\n+    }\n+\n+    /**\n+     * Returns true if the given class has some of the custom scope annotations, false otherwise.\n+     * List of known custom scopes can be seen via {@link CustomScopeAnnotationsBuildItem#getAllCustomScopeNames()}.\n+     * In order to check for presence of any scope annotation (including built-in ones),\n+     * see {@link CustomScopeAnnotationsBuildItem#isScopeAnnotationDeclaredOn(ClassInfo)}.\n+     *\n+     * @param clazz Class to check for annotations\n+     * @return true if the clazz contains some of the custom scope annotations, false otherwise\n+     */\n+    public boolean isDeclaredOn(ClassInfo clazz) {\n+        for (DotName scope : customScopeNames) {\n+            if (clazz.classAnnotation(scope) != null) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * Returns true if the given class has some scope annotations, false otherwise.\n+     * This method check for all scope annotations, including built-in ones as well as custom scopes.\n+     * List of known custom scopes can be seen via {@link CustomScopeAnnotationsBuildItem#getAllCustomScopeNames()}.\n+     *\n+     * @param clazz Class to check for annotations\n+     * @return true if the clazz contains any scope annotation, false otherwise\n+     */\n+    public boolean isScopeAnnotationDeclaredOn(ClassInfo clazz) {\n+        return BuiltinScope.isDeclaredOn(clazz) ? true : isDeclaredOn(clazz);", "originalCommit": "5c00e0ed2e370544e509ecdc866424d0f5275518", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "7370797f66b1a279cbd3cdd36d940befcd18e1a2", "url": "https://github.com/quarkusio/quarkus/commit/7370797f66b1a279cbd3cdd36d940befcd18e1a2", "message": "Gather and expose information about all known scopes before transforming annotations.", "committedDate": "2020-02-19T16:18:10Z", "type": "forcePushed"}, {"oid": "240d1c1a95d30a314f8dfae14dd46cb076b4bf8b", "url": "https://github.com/quarkusio/quarkus/commit/240d1c1a95d30a314f8dfae14dd46cb076b4bf8b", "message": "Gather and expose information about all known scopes before transforming annotations.", "committedDate": "2020-02-28T15:00:24Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc3NTUwNw==", "url": "https://github.com/quarkusio/quarkus/pull/7138#discussion_r385775507", "bodyText": "This method should be probably named isCustomScopeDeclaredOn...", "author": "mkouba", "createdAt": "2020-02-28T15:56:13Z", "path": "extensions/arc/deployment/src/main/java/io/quarkus/arc/deployment/CustomScopeAnnotationsBuildItem.java", "diffHunk": "@@ -0,0 +1,61 @@\n+package io.quarkus.arc.deployment;\n+\n+import java.util.Collection;\n+\n+import org.jboss.jandex.ClassInfo;\n+import org.jboss.jandex.DotName;\n+\n+import io.quarkus.arc.processor.BuiltinScope;\n+import io.quarkus.builder.item.SimpleBuildItem;\n+\n+/**\n+ * Holds information about all known custom scopes in the deployment and has utility methods allowing to check\n+ * whether given class has some scope annotation.\n+ */\n+public final class CustomScopeAnnotationsBuildItem extends SimpleBuildItem {\n+\n+    private Collection<DotName> customScopeNames;\n+\n+    public CustomScopeAnnotationsBuildItem(Collection<DotName> customScopeNames) {\n+        this.customScopeNames = customScopeNames;\n+    }\n+\n+    /**\n+     * Returns a collection of all known custom scopes represented as {@link DotName}.\n+     *\n+     * @return collection of known custom scopes (built-in scopes are not included)\n+     */\n+    public Collection<DotName> getCustomScopeNames() {\n+        return customScopeNames;\n+    }\n+\n+    /**\n+     * Returns true if the given class has some of the custom scope annotations, false otherwise.\n+     * List of known custom scopes can be seen via {@link CustomScopeAnnotationsBuildItem#getCustomScopeNames()}.\n+     * In order to check for presence of any scope annotation (including built-in ones),\n+     * see {@link CustomScopeAnnotationsBuildItem#isScopeAnnotationDeclaredOn(ClassInfo)}.\n+     *\n+     * @param clazz Class to check for annotations\n+     * @return true if the clazz contains some of the custom scope annotations, false otherwise\n+     */\n+    public boolean isDeclaredOn(ClassInfo clazz) {", "originalCommit": "240d1c1a95d30a314f8dfae14dd46cb076b4bf8b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc3NTg0Mw==", "url": "https://github.com/quarkusio/quarkus/pull/7138#discussion_r385775843", "bodyText": "isScopeDeclaredOn?", "author": "mkouba", "createdAt": "2020-02-28T15:56:47Z", "path": "extensions/arc/deployment/src/main/java/io/quarkus/arc/deployment/CustomScopeAnnotationsBuildItem.java", "diffHunk": "@@ -0,0 +1,61 @@\n+package io.quarkus.arc.deployment;\n+\n+import java.util.Collection;\n+\n+import org.jboss.jandex.ClassInfo;\n+import org.jboss.jandex.DotName;\n+\n+import io.quarkus.arc.processor.BuiltinScope;\n+import io.quarkus.builder.item.SimpleBuildItem;\n+\n+/**\n+ * Holds information about all known custom scopes in the deployment and has utility methods allowing to check\n+ * whether given class has some scope annotation.\n+ */\n+public final class CustomScopeAnnotationsBuildItem extends SimpleBuildItem {\n+\n+    private Collection<DotName> customScopeNames;\n+\n+    public CustomScopeAnnotationsBuildItem(Collection<DotName> customScopeNames) {\n+        this.customScopeNames = customScopeNames;\n+    }\n+\n+    /**\n+     * Returns a collection of all known custom scopes represented as {@link DotName}.\n+     *\n+     * @return collection of known custom scopes (built-in scopes are not included)\n+     */\n+    public Collection<DotName> getCustomScopeNames() {\n+        return customScopeNames;\n+    }\n+\n+    /**\n+     * Returns true if the given class has some of the custom scope annotations, false otherwise.\n+     * List of known custom scopes can be seen via {@link CustomScopeAnnotationsBuildItem#getCustomScopeNames()}.\n+     * In order to check for presence of any scope annotation (including built-in ones),\n+     * see {@link CustomScopeAnnotationsBuildItem#isScopeAnnotationDeclaredOn(ClassInfo)}.\n+     *\n+     * @param clazz Class to check for annotations\n+     * @return true if the clazz contains some of the custom scope annotations, false otherwise\n+     */\n+    public boolean isDeclaredOn(ClassInfo clazz) {\n+        for (DotName scope : customScopeNames) {\n+            if (clazz.classAnnotation(scope) != null) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * Returns true if the given class has some scope annotations, false otherwise.\n+     * This method check for all scope annotations, including built-in ones as well as custom scopes.\n+     * List of known custom scopes can be seen via {@link CustomScopeAnnotationsBuildItem#getCustomScopeNames()}.\n+     *\n+     * @param clazz Class to check for annotations\n+     * @return true if the clazz contains any scope annotation, false otherwise\n+     */\n+    public boolean isScopeAnnotationDeclaredOn(ClassInfo clazz) {", "originalCommit": "240d1c1a95d30a314f8dfae14dd46cb076b4bf8b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc3NzI5NQ==", "url": "https://github.com/quarkusio/quarkus/pull/7138#discussion_r385777295", "bodyText": "should is probably not accurate because we throw an IllegalArgumentException if no annotation is passed?", "author": "mkouba", "createdAt": "2020-02-28T15:59:20Z", "path": "extensions/arc/deployment/src/main/java/io/quarkus/arc/deployment/ContextRegistrarBuildItem.java", "diffHunk": "@@ -1,20 +1,50 @@\n package io.quarkus.arc.deployment;\n \n+import java.lang.annotation.Annotation;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+\n+import org.jboss.jandex.DotName;\n+\n import io.quarkus.arc.processor.ContextRegistrar;\n import io.quarkus.builder.item.MultiBuildItem;\n \n /**\n- * Make it possible to register a custom CDI context.\n+ * Make it possible to register one or more custom CDI contexts.\n+ * If you are registering a new context, you should also pass in the annotation value into the constructor either in", "originalCommit": "240d1c1a95d30a314f8dfae14dd46cb076b4bf8b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjM2ODU3Nw==", "url": "https://github.com/quarkusio/quarkus/pull/7138#discussion_r386368577", "bodyText": "Well, yes but we don't know how many contexts you register and how many annotation names you pass it - e.g. you may register 3 contexts and pass in one annotation name.", "author": "manovotn", "createdAt": "2020-03-02T12:39:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc3NzI5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjM2OTY2MA==", "url": "https://github.com/quarkusio/quarkus/pull/7138#discussion_r386369660", "bodyText": "But I'll twist the wording a little.", "author": "manovotn", "createdAt": "2020-03-02T12:42:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc3NzI5NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc4Mjg5Nw==", "url": "https://github.com/quarkusio/quarkus/pull/7138#discussion_r385782897", "bodyText": "Hm, so if I pass an empty array it's OK? Also if you skip the annotationsNames completely on the call site the method receives an empty array. It could be compiler-specific though. This is what I get for oracle JDK 8.\nAnyway, I'm not quite sure whether throwing an IAE is the best approach. I'd rather just log a warning if a ContextRegistrarBuildItem has no annotations. In theory, the ContextRegistrar can register a context conditionally... I know that it's ugly :-(.", "author": "mkouba", "createdAt": "2020-02-28T16:09:32Z", "path": "extensions/arc/deployment/src/main/java/io/quarkus/arc/deployment/ContextRegistrarBuildItem.java", "diffHunk": "@@ -1,20 +1,50 @@\n package io.quarkus.arc.deployment;\n \n+import java.lang.annotation.Annotation;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+\n+import org.jboss.jandex.DotName;\n+\n import io.quarkus.arc.processor.ContextRegistrar;\n import io.quarkus.builder.item.MultiBuildItem;\n \n /**\n- * Make it possible to register a custom CDI context.\n+ * Make it possible to register one or more custom CDI contexts.\n+ * If you are registering a new context, you should also pass in the annotation value into the constructor either in\n+ * {@link DotName} form, or as {@code Class<? extends Annotation>}.\n+ *\n+ * This information is then leveraged in {@link CustomScopeAnnotationsBuildItem} which allows consumers to browse\n+ * all known custom scoped within deployment even early in the build process.\n  */\n public final class ContextRegistrarBuildItem extends MultiBuildItem {\n \n     private final ContextRegistrar contextRegistrar;\n+    private final Collection<DotName> annotationNames;\n \n-    public ContextRegistrarBuildItem(ContextRegistrar contextRegistrar) {\n+    public ContextRegistrarBuildItem(ContextRegistrar contextRegistrar, DotName... annotationsNames) {\n         this.contextRegistrar = contextRegistrar;\n+        if (annotationsNames == null) {\n+            throw new IllegalArgumentException(\"Parameter annotationNames cannot be null!\");", "originalCommit": "240d1c1a95d30a314f8dfae14dd46cb076b4bf8b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc4Nzc2NQ==", "url": "https://github.com/quarkusio/quarkus/pull/7138#discussion_r385787765", "bodyText": "https://stackoverflow.com/questions/10905942/which-part-of-the-java-language-specification-describes-the-behaviour-of-omitted", "author": "mkouba", "createdAt": "2020-02-28T16:18:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc4Mjg5Nw=="}], "type": "inlineReview"}, {"oid": "5860f1ea774ba5321d733918e50afc0ad652c6c0", "url": "https://github.com/quarkusio/quarkus/commit/5860f1ea774ba5321d733918e50afc0ad652c6c0", "message": "Gather and expose information about all known scopes before transforming annotations.", "committedDate": "2020-03-02T13:13:26Z", "type": "commit"}, {"oid": "5860f1ea774ba5321d733918e50afc0ad652c6c0", "url": "https://github.com/quarkusio/quarkus/commit/5860f1ea774ba5321d733918e50afc0ad652c6c0", "message": "Gather and expose information about all known scopes before transforming annotations.", "committedDate": "2020-03-02T13:13:26Z", "type": "forcePushed"}]}