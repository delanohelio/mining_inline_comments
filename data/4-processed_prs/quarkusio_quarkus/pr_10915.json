{"pr_number": 10915, "pr_title": "Add COMMITTERS.adoc", "pr_createdAt": "2020-07-22T17:35:17Z", "pr_url": "https://github.com/quarkusio/quarkus/pull/10915", "timeline": [{"oid": "a1140a593fc9f508b160ed3df501a1d30142a194", "url": "https://github.com/quarkusio/quarkus/commit/a1140a593fc9f508b160ed3df501a1d30142a194", "message": "Add COMMITTERS.adoc", "committedDate": "2020-07-22T17:36:11Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk3MDE5Nw==", "url": "https://github.com/quarkusio/quarkus/pull/10915#discussion_r458970197", "bodyText": "I'd suggest something like:  \"Fix issue short description\" e.g \"Fix random failing tests in Quartz Extension\". Since \"Fix complex issue\" is not a good title (I know it is taken here as an example)", "author": "machi1990", "createdAt": "2020-07-22T17:42:39Z", "path": "COMMITTERS.adoc", "diffHunk": "@@ -0,0 +1,164 @@\n+= Information for Quarkus Committers\n+\n+This document contains useful information for Quarkus committers.\n+\n+[NOTE]\n+====\n+It is a work in progress, so if you think information is missing/unclear/inadequate,\n+please reach out to us on the `quarkus-dev` mailing-list.\n+====\n+\n+This document has a lot of information.\n+It is not a set of strict rules, it is here to guide you.\n+If you forget to do something, miss something, don't worry, it happens.\n+\n+Do your best and that will already be a lot :).\n+\n+== Merging Pull Requests\n+\n+The first thing is that, while being a committer,\n+you can't really commit directly to the main repository:\n+you need at least one review by your peers.\n+\n+Thus the need for a pull request.\n+\n+So you are more like a merger than a committer\n+and you might merge more PRs from others than your own work.\n+\n+While not absolute, here are some advices:\n+\n+* if you really want a review by a specific person,\n+  make it a named reviewer via a GitHub UI\n+* if someone asked for a specific reviewer, better\n+  give some time for this person to review the PR.\n+  If not reviewed in a reasonable amount of time,\n+  better ping him again to have some information\n+  or ask the original author if we should go ahead.\n+* if in doubt (on a specific part or because you're\n+  not comfortable reviewing documentation or any other reason),\n+  ask for help\n+* except if it's a totally non brainer (typically a typo fix),\n+  let the PR bake a few hours so some other people can have a\n+  look if interested.\n+  If the PR is very large or is a new extension, better let it\n+  bake for a few days.\n+* we do merge commits so please ask the author to properly\n+  squash the commits before merging.\n+  The idea is to have proper semantic commits.\n+  If the author is not familiar with Git or not available,\n+  you can also (carefully) do it for him as soon as you agreed on it.\n+* make sure the commit comments are meaningful\n+* at the beginning, you can start by giving your approval and not merging\n+  and see how things evolve.\n+  This should give you some hints of important things to check in the future.\n+* only merge pull requests that target master.\n+  Dealing with old branches is a separate process.\n+* if you are sure a PR should go in and is just waiting for CI,\n+  just use the `triage/waiting-for-ci` label.\n+  It is a good hint for other committers.\n+\n+Obviously, each situation is different so use your own judgement,\n+and if in doubt, just ask for advice, the other committers are here to help.\n+\n+== Pull Request Title\n+\n+The title should be in English, should not contain an issue number.\n+It should also not contain ellipsis.\n+\n+If your commit message was too long and GitHub automatically cut\n+the title, that's helpful if you can take the time to move the cut\n+part where it belongs to have a full title.\n+\n+Titles are included in the Release notes so they are important.\n+\n+A good title would look like: `Fix this complex issue`.", "originalCommit": "a1140a593fc9f508b160ed3df501a1d30142a194", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk3MjA1Nw==", "url": "https://github.com/quarkusio/quarkus/pull/10915#discussion_r458972057", "bodyText": "Good idea, done!", "author": "gsmet", "createdAt": "2020-07-22T17:45:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk3MDE5Nw=="}], "type": "inlineReview"}, {"oid": "9f4ea947a960504ffa1ab6c6f4812d1520cdcf43", "url": "https://github.com/quarkusio/quarkus/commit/9f4ea947a960504ffa1ab6c6f4812d1520cdcf43", "message": "Add COMMITTERS.adoc", "committedDate": "2020-07-22T17:45:16Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk2ODkyMQ==", "url": "https://github.com/quarkusio/quarkus/pull/10915#discussion_r458968921", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              you can also (carefully) do it for him as soon as you agreed on it.\n          \n          \n            \n              you can also (carefully) do it for them as soon as you agreed on it.", "author": "gastaldi", "createdAt": "2020-07-22T17:40:27Z", "path": "COMMITTERS.adoc", "diffHunk": "@@ -0,0 +1,164 @@\n+= Information for Quarkus Committers\n+\n+This document contains useful information for Quarkus committers.\n+\n+[NOTE]\n+====\n+It is a work in progress, so if you think information is missing/unclear/inadequate,\n+please reach out to us on the `quarkus-dev` mailing-list.\n+====\n+\n+This document has a lot of information.\n+It is not a set of strict rules, it is here to guide you.\n+If you forget to do something, miss something, don't worry, it happens.\n+\n+Do your best and that will already be a lot :).\n+\n+== Merging Pull Requests\n+\n+The first thing is that, while being a committer,\n+you can't really commit directly to the main repository:\n+you need at least one review by your peers.\n+\n+Thus the need for a pull request.\n+\n+So you are more like a merger than a committer\n+and you might merge more PRs from others than your own work.\n+\n+While not absolute, here are some advices:\n+\n+* if you really want a review by a specific person,\n+  make it a named reviewer via a GitHub UI\n+* if someone asked for a specific reviewer, better\n+  give some time for this person to review the PR.\n+  If not reviewed in a reasonable amount of time,\n+  better ping him again to have some information\n+  or ask the original author if we should go ahead.\n+* if in doubt (on a specific part or because you're\n+  not comfortable reviewing documentation or any other reason),\n+  ask for help\n+* except if it's a totally non brainer (typically a typo fix),\n+  let the PR bake a few hours so some other people can have a\n+  look if interested.\n+  If the PR is very large or is a new extension, better let it\n+  bake for a few days.\n+* we do merge commits so please ask the author to properly\n+  squash the commits before merging.\n+  The idea is to have proper semantic commits.\n+  If the author is not familiar with Git or not available,\n+  you can also (carefully) do it for him as soon as you agreed on it.", "originalCommit": "a1140a593fc9f508b160ed3df501a1d30142a194", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk3ODYzNg==", "url": "https://github.com/quarkusio/quarkus/pull/10915#discussion_r458978636", "bodyText": "Ah good catch, I'm usually very careful about that but missed that one! Thanks!", "author": "gsmet", "createdAt": "2020-07-22T17:56:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk2ODkyMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk3ODk5Nw==", "url": "https://github.com/quarkusio/quarkus/pull/10915#discussion_r458978997", "bodyText": "I fixed another occurrence too.", "author": "gsmet", "createdAt": "2020-07-22T17:56:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk2ODkyMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk2OTUwNw==", "url": "https://github.com/quarkusio/quarkus/pull/10915#discussion_r458969507", "bodyText": "This should be in bold", "author": "gastaldi", "createdAt": "2020-07-22T17:41:27Z", "path": "COMMITTERS.adoc", "diffHunk": "@@ -0,0 +1,164 @@\n+= Information for Quarkus Committers\n+\n+This document contains useful information for Quarkus committers.\n+\n+[NOTE]\n+====\n+It is a work in progress, so if you think information is missing/unclear/inadequate,\n+please reach out to us on the `quarkus-dev` mailing-list.\n+====\n+\n+This document has a lot of information.\n+It is not a set of strict rules, it is here to guide you.\n+If you forget to do something, miss something, don't worry, it happens.\n+\n+Do your best and that will already be a lot :).\n+\n+== Merging Pull Requests\n+\n+The first thing is that, while being a committer,\n+you can't really commit directly to the main repository:\n+you need at least one review by your peers.\n+\n+Thus the need for a pull request.\n+\n+So you are more like a merger than a committer\n+and you might merge more PRs from others than your own work.\n+\n+While not absolute, here are some advices:\n+\n+* if you really want a review by a specific person,\n+  make it a named reviewer via a GitHub UI\n+* if someone asked for a specific reviewer, better\n+  give some time for this person to review the PR.\n+  If not reviewed in a reasonable amount of time,\n+  better ping him again to have some information\n+  or ask the original author if we should go ahead.\n+* if in doubt (on a specific part or because you're\n+  not comfortable reviewing documentation or any other reason),\n+  ask for help\n+* except if it's a totally non brainer (typically a typo fix),\n+  let the PR bake a few hours so some other people can have a\n+  look if interested.\n+  If the PR is very large or is a new extension, better let it\n+  bake for a few days.\n+* we do merge commits so please ask the author to properly\n+  squash the commits before merging.\n+  The idea is to have proper semantic commits.\n+  If the author is not familiar with Git or not available,\n+  you can also (carefully) do it for him as soon as you agreed on it.\n+* make sure the commit comments are meaningful\n+* at the beginning, you can start by giving your approval and not merging\n+  and see how things evolve.\n+  This should give you some hints of important things to check in the future.\n+* only merge pull requests that target master.\n+  Dealing with old branches is a separate process.", "originalCommit": "a1140a593fc9f508b160ed3df501a1d30142a194", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk3MDQ3MA==", "url": "https://github.com/quarkusio/quarkus/pull/10915#discussion_r458970470", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            A good title would look like: `Fix this complex issue`.\n          \n          \n            \n            A good title would look like: `Introduce Hibernate Reactive extension`.", "author": "gastaldi", "createdAt": "2020-07-22T17:43:04Z", "path": "COMMITTERS.adoc", "diffHunk": "@@ -0,0 +1,164 @@\n+= Information for Quarkus Committers\n+\n+This document contains useful information for Quarkus committers.\n+\n+[NOTE]\n+====\n+It is a work in progress, so if you think information is missing/unclear/inadequate,\n+please reach out to us on the `quarkus-dev` mailing-list.\n+====\n+\n+This document has a lot of information.\n+It is not a set of strict rules, it is here to guide you.\n+If you forget to do something, miss something, don't worry, it happens.\n+\n+Do your best and that will already be a lot :).\n+\n+== Merging Pull Requests\n+\n+The first thing is that, while being a committer,\n+you can't really commit directly to the main repository:\n+you need at least one review by your peers.\n+\n+Thus the need for a pull request.\n+\n+So you are more like a merger than a committer\n+and you might merge more PRs from others than your own work.\n+\n+While not absolute, here are some advices:\n+\n+* if you really want a review by a specific person,\n+  make it a named reviewer via a GitHub UI\n+* if someone asked for a specific reviewer, better\n+  give some time for this person to review the PR.\n+  If not reviewed in a reasonable amount of time,\n+  better ping him again to have some information\n+  or ask the original author if we should go ahead.\n+* if in doubt (on a specific part or because you're\n+  not comfortable reviewing documentation or any other reason),\n+  ask for help\n+* except if it's a totally non brainer (typically a typo fix),\n+  let the PR bake a few hours so some other people can have a\n+  look if interested.\n+  If the PR is very large or is a new extension, better let it\n+  bake for a few days.\n+* we do merge commits so please ask the author to properly\n+  squash the commits before merging.\n+  The idea is to have proper semantic commits.\n+  If the author is not familiar with Git or not available,\n+  you can also (carefully) do it for him as soon as you agreed on it.\n+* make sure the commit comments are meaningful\n+* at the beginning, you can start by giving your approval and not merging\n+  and see how things evolve.\n+  This should give you some hints of important things to check in the future.\n+* only merge pull requests that target master.\n+  Dealing with old branches is a separate process.\n+* if you are sure a PR should go in and is just waiting for CI,\n+  just use the `triage/waiting-for-ci` label.\n+  It is a good hint for other committers.\n+\n+Obviously, each situation is different so use your own judgement,\n+and if in doubt, just ask for advice, the other committers are here to help.\n+\n+== Pull Request Title\n+\n+The title should be in English, should not contain an issue number.\n+It should also not contain ellipsis.\n+\n+If your commit message was too long and GitHub automatically cut\n+the title, that's helpful if you can take the time to move the cut\n+part where it belongs to have a full title.\n+\n+Titles are included in the Release notes so they are important.\n+\n+A good title would look like: `Fix this complex issue`.", "originalCommit": "a1140a593fc9f508b160ed3df501a1d30142a194", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk3NDcyMg==", "url": "https://github.com/quarkusio/quarkus/pull/10915#discussion_r458974722", "bodyText": "Heh @machi1990 was faster than me. Thank you! \ud83d\ude09", "author": "gastaldi", "createdAt": "2020-07-22T17:50:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk3MDQ3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk3OTc0MQ==", "url": "https://github.com/quarkusio/quarkus/pull/10915#discussion_r458979741", "bodyText": "I added your example too.", "author": "gsmet", "createdAt": "2020-07-22T17:58:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk3MDQ3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA0OTc1Nw==", "url": "https://github.com/quarkusio/quarkus/pull/10915#discussion_r459049757", "bodyText": "Thank you!", "author": "machi1990", "createdAt": "2020-07-22T20:02:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk3MDQ3MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk3MDc1Mw==", "url": "https://github.com/quarkusio/quarkus/pull/10915#discussion_r458970753", "bodyText": "Better put in a [NOTE] block", "author": "gastaldi", "createdAt": "2020-07-22T17:43:33Z", "path": "COMMITTERS.adoc", "diffHunk": "@@ -0,0 +1,164 @@\n+= Information for Quarkus Committers\n+\n+This document contains useful information for Quarkus committers.\n+\n+[NOTE]\n+====\n+It is a work in progress, so if you think information is missing/unclear/inadequate,\n+please reach out to us on the `quarkus-dev` mailing-list.\n+====\n+\n+This document has a lot of information.\n+It is not a set of strict rules, it is here to guide you.\n+If you forget to do something, miss something, don't worry, it happens.\n+\n+Do your best and that will already be a lot :).\n+\n+== Merging Pull Requests\n+\n+The first thing is that, while being a committer,\n+you can't really commit directly to the main repository:\n+you need at least one review by your peers.\n+\n+Thus the need for a pull request.\n+\n+So you are more like a merger than a committer\n+and you might merge more PRs from others than your own work.\n+\n+While not absolute, here are some advices:\n+\n+* if you really want a review by a specific person,\n+  make it a named reviewer via a GitHub UI\n+* if someone asked for a specific reviewer, better\n+  give some time for this person to review the PR.\n+  If not reviewed in a reasonable amount of time,\n+  better ping him again to have some information\n+  or ask the original author if we should go ahead.\n+* if in doubt (on a specific part or because you're\n+  not comfortable reviewing documentation or any other reason),\n+  ask for help\n+* except if it's a totally non brainer (typically a typo fix),\n+  let the PR bake a few hours so some other people can have a\n+  look if interested.\n+  If the PR is very large or is a new extension, better let it\n+  bake for a few days.\n+* we do merge commits so please ask the author to properly\n+  squash the commits before merging.\n+  The idea is to have proper semantic commits.\n+  If the author is not familiar with Git or not available,\n+  you can also (carefully) do it for him as soon as you agreed on it.\n+* make sure the commit comments are meaningful\n+* at the beginning, you can start by giving your approval and not merging\n+  and see how things evolve.\n+  This should give you some hints of important things to check in the future.\n+* only merge pull requests that target master.\n+  Dealing with old branches is a separate process.\n+* if you are sure a PR should go in and is just waiting for CI,\n+  just use the `triage/waiting-for-ci` label.\n+  It is a good hint for other committers.\n+\n+Obviously, each situation is different so use your own judgement,\n+and if in doubt, just ask for advice, the other committers are here to help.\n+\n+== Pull Request Title\n+\n+The title should be in English, should not contain an issue number.\n+It should also not contain ellipsis.\n+\n+If your commit message was too long and GitHub automatically cut\n+the title, that's helpful if you can take the time to move the cut\n+part where it belongs to have a full title.\n+\n+Titles are included in the Release notes so they are important.\n+\n+A good title would look like: `Fix this complex issue`.\n+\n+A bad title would look like: `fix(#444)`.\n+\n+== Issues Fixed\n+\n+When a PR fixes some issues, it's good practice to add it in the description.\n+\n+One issue per line with something like:\n+\n+[source,asciidoc]\n+----\n+* Fix #444\n+* Fix #555\n+----\n+\n+Note that GitHub won't detect issues properly if you do something like\n+`Fix #444 #555`.", "originalCommit": "a1140a593fc9f508b160ed3df501a1d30142a194", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk3NjYzOQ==", "url": "https://github.com/quarkusio/quarkus/pull/10915#discussion_r458976639", "bodyText": "Done but notes are ugly on GitHub :).", "author": "gsmet", "createdAt": "2020-07-22T17:53:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk3MDc1Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk3MTI4Mw==", "url": "https://github.com/quarkusio/quarkus/pull/10915#discussion_r458971283", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * when your merge a pull request, please affect it with the current milestone marked with \"master\".\n          \n          \n            \n            * when you merge a pull request, please affect it with the current milestone marked with \"master\".", "author": "gastaldi", "createdAt": "2020-07-22T17:44:25Z", "path": "COMMITTERS.adoc", "diffHunk": "@@ -0,0 +1,164 @@\n+= Information for Quarkus Committers\n+\n+This document contains useful information for Quarkus committers.\n+\n+[NOTE]\n+====\n+It is a work in progress, so if you think information is missing/unclear/inadequate,\n+please reach out to us on the `quarkus-dev` mailing-list.\n+====\n+\n+This document has a lot of information.\n+It is not a set of strict rules, it is here to guide you.\n+If you forget to do something, miss something, don't worry, it happens.\n+\n+Do your best and that will already be a lot :).\n+\n+== Merging Pull Requests\n+\n+The first thing is that, while being a committer,\n+you can't really commit directly to the main repository:\n+you need at least one review by your peers.\n+\n+Thus the need for a pull request.\n+\n+So you are more like a merger than a committer\n+and you might merge more PRs from others than your own work.\n+\n+While not absolute, here are some advices:\n+\n+* if you really want a review by a specific person,\n+  make it a named reviewer via a GitHub UI\n+* if someone asked for a specific reviewer, better\n+  give some time for this person to review the PR.\n+  If not reviewed in a reasonable amount of time,\n+  better ping him again to have some information\n+  or ask the original author if we should go ahead.\n+* if in doubt (on a specific part or because you're\n+  not comfortable reviewing documentation or any other reason),\n+  ask for help\n+* except if it's a totally non brainer (typically a typo fix),\n+  let the PR bake a few hours so some other people can have a\n+  look if interested.\n+  If the PR is very large or is a new extension, better let it\n+  bake for a few days.\n+* we do merge commits so please ask the author to properly\n+  squash the commits before merging.\n+  The idea is to have proper semantic commits.\n+  If the author is not familiar with Git or not available,\n+  you can also (carefully) do it for him as soon as you agreed on it.\n+* make sure the commit comments are meaningful\n+* at the beginning, you can start by giving your approval and not merging\n+  and see how things evolve.\n+  This should give you some hints of important things to check in the future.\n+* only merge pull requests that target master.\n+  Dealing with old branches is a separate process.\n+* if you are sure a PR should go in and is just waiting for CI,\n+  just use the `triage/waiting-for-ci` label.\n+  It is a good hint for other committers.\n+\n+Obviously, each situation is different so use your own judgement,\n+and if in doubt, just ask for advice, the other committers are here to help.\n+\n+== Pull Request Title\n+\n+The title should be in English, should not contain an issue number.\n+It should also not contain ellipsis.\n+\n+If your commit message was too long and GitHub automatically cut\n+the title, that's helpful if you can take the time to move the cut\n+part where it belongs to have a full title.\n+\n+Titles are included in the Release notes so they are important.\n+\n+A good title would look like: `Fix this complex issue`.\n+\n+A bad title would look like: `fix(#444)`.\n+\n+== Issues Fixed\n+\n+When a PR fixes some issues, it's good practice to add it in the description.\n+\n+One issue per line with something like:\n+\n+[source,asciidoc]\n+----\n+* Fix #444\n+* Fix #555\n+----\n+\n+Note that GitHub won't detect issues properly if you do something like\n+`Fix #444 #555`.\n+\n+== Affecting Labels and Milestones\n+\n+Affecting labels and milestones is very important in our process.\n+\n+Before each release, we check that we don't have any orphan i.e.\n+closed issues that don't have either a milestone affected or\n+some of the \"excluding\" labels.\n+\n+Thus:\n+\n+* when your merge a pull request, please affect it with the current milestone marked with \"master\".", "originalCommit": "a1140a593fc9f508b160ed3df501a1d30142a194", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk3MTQzOQ==", "url": "https://github.com/quarkusio/quarkus/pull/10915#discussion_r458971439", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              also affect the milestone to the issues.\n          \n          \n            \n              you should also affect the milestone assigned to the issues.", "author": "gastaldi", "createdAt": "2020-07-22T17:44:40Z", "path": "COMMITTERS.adoc", "diffHunk": "@@ -0,0 +1,164 @@\n+= Information for Quarkus Committers\n+\n+This document contains useful information for Quarkus committers.\n+\n+[NOTE]\n+====\n+It is a work in progress, so if you think information is missing/unclear/inadequate,\n+please reach out to us on the `quarkus-dev` mailing-list.\n+====\n+\n+This document has a lot of information.\n+It is not a set of strict rules, it is here to guide you.\n+If you forget to do something, miss something, don't worry, it happens.\n+\n+Do your best and that will already be a lot :).\n+\n+== Merging Pull Requests\n+\n+The first thing is that, while being a committer,\n+you can't really commit directly to the main repository:\n+you need at least one review by your peers.\n+\n+Thus the need for a pull request.\n+\n+So you are more like a merger than a committer\n+and you might merge more PRs from others than your own work.\n+\n+While not absolute, here are some advices:\n+\n+* if you really want a review by a specific person,\n+  make it a named reviewer via a GitHub UI\n+* if someone asked for a specific reviewer, better\n+  give some time for this person to review the PR.\n+  If not reviewed in a reasonable amount of time,\n+  better ping him again to have some information\n+  or ask the original author if we should go ahead.\n+* if in doubt (on a specific part or because you're\n+  not comfortable reviewing documentation or any other reason),\n+  ask for help\n+* except if it's a totally non brainer (typically a typo fix),\n+  let the PR bake a few hours so some other people can have a\n+  look if interested.\n+  If the PR is very large or is a new extension, better let it\n+  bake for a few days.\n+* we do merge commits so please ask the author to properly\n+  squash the commits before merging.\n+  The idea is to have proper semantic commits.\n+  If the author is not familiar with Git or not available,\n+  you can also (carefully) do it for him as soon as you agreed on it.\n+* make sure the commit comments are meaningful\n+* at the beginning, you can start by giving your approval and not merging\n+  and see how things evolve.\n+  This should give you some hints of important things to check in the future.\n+* only merge pull requests that target master.\n+  Dealing with old branches is a separate process.\n+* if you are sure a PR should go in and is just waiting for CI,\n+  just use the `triage/waiting-for-ci` label.\n+  It is a good hint for other committers.\n+\n+Obviously, each situation is different so use your own judgement,\n+and if in doubt, just ask for advice, the other committers are here to help.\n+\n+== Pull Request Title\n+\n+The title should be in English, should not contain an issue number.\n+It should also not contain ellipsis.\n+\n+If your commit message was too long and GitHub automatically cut\n+the title, that's helpful if you can take the time to move the cut\n+part where it belongs to have a full title.\n+\n+Titles are included in the Release notes so they are important.\n+\n+A good title would look like: `Fix this complex issue`.\n+\n+A bad title would look like: `fix(#444)`.\n+\n+== Issues Fixed\n+\n+When a PR fixes some issues, it's good practice to add it in the description.\n+\n+One issue per line with something like:\n+\n+[source,asciidoc]\n+----\n+* Fix #444\n+* Fix #555\n+----\n+\n+Note that GitHub won't detect issues properly if you do something like\n+`Fix #444 #555`.\n+\n+== Affecting Labels and Milestones\n+\n+Affecting labels and milestones is very important in our process.\n+\n+Before each release, we check that we don't have any orphan i.e.\n+closed issues that don't have either a milestone affected or\n+some of the \"excluding\" labels.\n+\n+Thus:\n+\n+* when your merge a pull request, please affect it with the current milestone marked with \"master\".\n+* if the pull request has issues associated (i.e. if the pull request fixes some issues),\n+  also affect the milestone to the issues.", "originalCommit": "a1140a593fc9f508b160ed3df501a1d30142a194", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk3MjMzMA==", "url": "https://github.com/quarkusio/quarkus/pull/10915#discussion_r458972330", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * if you close a pull request because we won't merge it, please add the appropriate `triage/` label:\n          \n          \n            \n            * if you close a pull request because the committers have decided to not merge it, please add the appropriate `triage/` label:", "author": "gastaldi", "createdAt": "2020-07-22T17:46:04Z", "path": "COMMITTERS.adoc", "diffHunk": "@@ -0,0 +1,164 @@\n+= Information for Quarkus Committers\n+\n+This document contains useful information for Quarkus committers.\n+\n+[NOTE]\n+====\n+It is a work in progress, so if you think information is missing/unclear/inadequate,\n+please reach out to us on the `quarkus-dev` mailing-list.\n+====\n+\n+This document has a lot of information.\n+It is not a set of strict rules, it is here to guide you.\n+If you forget to do something, miss something, don't worry, it happens.\n+\n+Do your best and that will already be a lot :).\n+\n+== Merging Pull Requests\n+\n+The first thing is that, while being a committer,\n+you can't really commit directly to the main repository:\n+you need at least one review by your peers.\n+\n+Thus the need for a pull request.\n+\n+So you are more like a merger than a committer\n+and you might merge more PRs from others than your own work.\n+\n+While not absolute, here are some advices:\n+\n+* if you really want a review by a specific person,\n+  make it a named reviewer via a GitHub UI\n+* if someone asked for a specific reviewer, better\n+  give some time for this person to review the PR.\n+  If not reviewed in a reasonable amount of time,\n+  better ping him again to have some information\n+  or ask the original author if we should go ahead.\n+* if in doubt (on a specific part or because you're\n+  not comfortable reviewing documentation or any other reason),\n+  ask for help\n+* except if it's a totally non brainer (typically a typo fix),\n+  let the PR bake a few hours so some other people can have a\n+  look if interested.\n+  If the PR is very large or is a new extension, better let it\n+  bake for a few days.\n+* we do merge commits so please ask the author to properly\n+  squash the commits before merging.\n+  The idea is to have proper semantic commits.\n+  If the author is not familiar with Git or not available,\n+  you can also (carefully) do it for him as soon as you agreed on it.\n+* make sure the commit comments are meaningful\n+* at the beginning, you can start by giving your approval and not merging\n+  and see how things evolve.\n+  This should give you some hints of important things to check in the future.\n+* only merge pull requests that target master.\n+  Dealing with old branches is a separate process.\n+* if you are sure a PR should go in and is just waiting for CI,\n+  just use the `triage/waiting-for-ci` label.\n+  It is a good hint for other committers.\n+\n+Obviously, each situation is different so use your own judgement,\n+and if in doubt, just ask for advice, the other committers are here to help.\n+\n+== Pull Request Title\n+\n+The title should be in English, should not contain an issue number.\n+It should also not contain ellipsis.\n+\n+If your commit message was too long and GitHub automatically cut\n+the title, that's helpful if you can take the time to move the cut\n+part where it belongs to have a full title.\n+\n+Titles are included in the Release notes so they are important.\n+\n+A good title would look like: `Fix XXX in Quartz extension`.\n+\n+A bad title would look like: `fix(#444)`.\n+\n+== Issues Fixed\n+\n+When a PR fixes some issues, it's good practice to add it in the description.\n+\n+One issue per line with something like:\n+\n+[source,asciidoc]\n+----\n+* Fix #444\n+* Fix #555\n+----\n+\n+Note that GitHub won't detect issues properly if you do something like\n+`Fix #444 #555`.\n+\n+== Affecting Labels and Milestones\n+\n+Affecting labels and milestones is very important in our process.\n+\n+Before each release, we check that we don't have any orphan i.e.\n+closed issues that don't have either a milestone affected or\n+some of the \"excluding\" labels.\n+\n+Thus:\n+\n+* when your merge a pull request, please affect it with the current milestone marked with \"master\".\n+* if the pull request has issues associated (i.e. if the pull request fixes some issues),\n+  also affect the milestone to the issues.\n+* if you close a pull request because we won't merge it, please add the appropriate `triage/` label:", "originalCommit": "9f4ea947a960504ffa1ab6c6f4812d1520cdcf43", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk3Mjg4MQ==", "url": "https://github.com/quarkusio/quarkus/pull/10915#discussion_r458972881", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            One of your pull request might qualify for being backported to this\n          \n          \n            \n            One of your pull requests might qualify for being backported to this", "author": "gastaldi", "createdAt": "2020-07-22T17:46:54Z", "path": "COMMITTERS.adoc", "diffHunk": "@@ -0,0 +1,164 @@\n+= Information for Quarkus Committers\n+\n+This document contains useful information for Quarkus committers.\n+\n+[NOTE]\n+====\n+It is a work in progress, so if you think information is missing/unclear/inadequate,\n+please reach out to us on the `quarkus-dev` mailing-list.\n+====\n+\n+This document has a lot of information.\n+It is not a set of strict rules, it is here to guide you.\n+If you forget to do something, miss something, don't worry, it happens.\n+\n+Do your best and that will already be a lot :).\n+\n+== Merging Pull Requests\n+\n+The first thing is that, while being a committer,\n+you can't really commit directly to the main repository:\n+you need at least one review by your peers.\n+\n+Thus the need for a pull request.\n+\n+So you are more like a merger than a committer\n+and you might merge more PRs from others than your own work.\n+\n+While not absolute, here are some advices:\n+\n+* if you really want a review by a specific person,\n+  make it a named reviewer via a GitHub UI\n+* if someone asked for a specific reviewer, better\n+  give some time for this person to review the PR.\n+  If not reviewed in a reasonable amount of time,\n+  better ping him again to have some information\n+  or ask the original author if we should go ahead.\n+* if in doubt (on a specific part or because you're\n+  not comfortable reviewing documentation or any other reason),\n+  ask for help\n+* except if it's a totally non brainer (typically a typo fix),\n+  let the PR bake a few hours so some other people can have a\n+  look if interested.\n+  If the PR is very large or is a new extension, better let it\n+  bake for a few days.\n+* we do merge commits so please ask the author to properly\n+  squash the commits before merging.\n+  The idea is to have proper semantic commits.\n+  If the author is not familiar with Git or not available,\n+  you can also (carefully) do it for him as soon as you agreed on it.\n+* make sure the commit comments are meaningful\n+* at the beginning, you can start by giving your approval and not merging\n+  and see how things evolve.\n+  This should give you some hints of important things to check in the future.\n+* only merge pull requests that target master.\n+  Dealing with old branches is a separate process.\n+* if you are sure a PR should go in and is just waiting for CI,\n+  just use the `triage/waiting-for-ci` label.\n+  It is a good hint for other committers.\n+\n+Obviously, each situation is different so use your own judgement,\n+and if in doubt, just ask for advice, the other committers are here to help.\n+\n+== Pull Request Title\n+\n+The title should be in English, should not contain an issue number.\n+It should also not contain ellipsis.\n+\n+If your commit message was too long and GitHub automatically cut\n+the title, that's helpful if you can take the time to move the cut\n+part where it belongs to have a full title.\n+\n+Titles are included in the Release notes so they are important.\n+\n+A good title would look like: `Fix XXX in Quartz extension`.\n+\n+A bad title would look like: `fix(#444)`.\n+\n+== Issues Fixed\n+\n+When a PR fixes some issues, it's good practice to add it in the description.\n+\n+One issue per line with something like:\n+\n+[source,asciidoc]\n+----\n+* Fix #444\n+* Fix #555\n+----\n+\n+Note that GitHub won't detect issues properly if you do something like\n+`Fix #444 #555`.\n+\n+== Affecting Labels and Milestones\n+\n+Affecting labels and milestones is very important in our process.\n+\n+Before each release, we check that we don't have any orphan i.e.\n+closed issues that don't have either a milestone affected or\n+some of the \"excluding\" labels.\n+\n+Thus:\n+\n+* when your merge a pull request, please affect it with the current milestone marked with \"master\".\n+* if the pull request has issues associated (i.e. if the pull request fixes some issues),\n+  also affect the milestone to the issues.\n+* if you close a pull request because we won't merge it, please add the appropriate `triage/` label:\n+  `triage/invalid`, `triage/out-of-date`, `triage/wontfix` are usually in order.\n+* if you close an issue because it has been fixed, either add the milestone\n+  if you can find it easily or use the `triage/out-of-date` if you can't.\n+* if you close an issue for any other reason, one of the aforementioned `triage/` labels\n+  is probably adequate.\n+\n+== Backporting Process\n+\n+When we release a new version of Quarkus, we usually do a bugfix\n+release a couple of weeks after.\n+\n+Everytime, we do a release, we create a release branch to host\n+the commits for these bugfix releases.\n+\n+All the pull requests are merged in master so for the new feature \n+release of Quarkus.\n+They won't be integrated in the previous version branch.\n+\n+One of your pull request might qualify for being backported to this", "originalCommit": "9f4ea947a960504ffa1ab6c6f4812d1520cdcf43", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk3MzAyNQ==", "url": "https://github.com/quarkusio/quarkus/pull/10915#discussion_r458973025", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * bugfixes\n          \n          \n            \n            * bug fixes", "author": "gastaldi", "createdAt": "2020-07-22T17:47:10Z", "path": "COMMITTERS.adoc", "diffHunk": "@@ -0,0 +1,164 @@\n+= Information for Quarkus Committers\n+\n+This document contains useful information for Quarkus committers.\n+\n+[NOTE]\n+====\n+It is a work in progress, so if you think information is missing/unclear/inadequate,\n+please reach out to us on the `quarkus-dev` mailing-list.\n+====\n+\n+This document has a lot of information.\n+It is not a set of strict rules, it is here to guide you.\n+If you forget to do something, miss something, don't worry, it happens.\n+\n+Do your best and that will already be a lot :).\n+\n+== Merging Pull Requests\n+\n+The first thing is that, while being a committer,\n+you can't really commit directly to the main repository:\n+you need at least one review by your peers.\n+\n+Thus the need for a pull request.\n+\n+So you are more like a merger than a committer\n+and you might merge more PRs from others than your own work.\n+\n+While not absolute, here are some advices:\n+\n+* if you really want a review by a specific person,\n+  make it a named reviewer via a GitHub UI\n+* if someone asked for a specific reviewer, better\n+  give some time for this person to review the PR.\n+  If not reviewed in a reasonable amount of time,\n+  better ping him again to have some information\n+  or ask the original author if we should go ahead.\n+* if in doubt (on a specific part or because you're\n+  not comfortable reviewing documentation or any other reason),\n+  ask for help\n+* except if it's a totally non brainer (typically a typo fix),\n+  let the PR bake a few hours so some other people can have a\n+  look if interested.\n+  If the PR is very large or is a new extension, better let it\n+  bake for a few days.\n+* we do merge commits so please ask the author to properly\n+  squash the commits before merging.\n+  The idea is to have proper semantic commits.\n+  If the author is not familiar with Git or not available,\n+  you can also (carefully) do it for him as soon as you agreed on it.\n+* make sure the commit comments are meaningful\n+* at the beginning, you can start by giving your approval and not merging\n+  and see how things evolve.\n+  This should give you some hints of important things to check in the future.\n+* only merge pull requests that target master.\n+  Dealing with old branches is a separate process.\n+* if you are sure a PR should go in and is just waiting for CI,\n+  just use the `triage/waiting-for-ci` label.\n+  It is a good hint for other committers.\n+\n+Obviously, each situation is different so use your own judgement,\n+and if in doubt, just ask for advice, the other committers are here to help.\n+\n+== Pull Request Title\n+\n+The title should be in English, should not contain an issue number.\n+It should also not contain ellipsis.\n+\n+If your commit message was too long and GitHub automatically cut\n+the title, that's helpful if you can take the time to move the cut\n+part where it belongs to have a full title.\n+\n+Titles are included in the Release notes so they are important.\n+\n+A good title would look like: `Fix XXX in Quartz extension`.\n+\n+A bad title would look like: `fix(#444)`.\n+\n+== Issues Fixed\n+\n+When a PR fixes some issues, it's good practice to add it in the description.\n+\n+One issue per line with something like:\n+\n+[source,asciidoc]\n+----\n+* Fix #444\n+* Fix #555\n+----\n+\n+Note that GitHub won't detect issues properly if you do something like\n+`Fix #444 #555`.\n+\n+== Affecting Labels and Milestones\n+\n+Affecting labels and milestones is very important in our process.\n+\n+Before each release, we check that we don't have any orphan i.e.\n+closed issues that don't have either a milestone affected or\n+some of the \"excluding\" labels.\n+\n+Thus:\n+\n+* when your merge a pull request, please affect it with the current milestone marked with \"master\".\n+* if the pull request has issues associated (i.e. if the pull request fixes some issues),\n+  also affect the milestone to the issues.\n+* if you close a pull request because we won't merge it, please add the appropriate `triage/` label:\n+  `triage/invalid`, `triage/out-of-date`, `triage/wontfix` are usually in order.\n+* if you close an issue because it has been fixed, either add the milestone\n+  if you can find it easily or use the `triage/out-of-date` if you can't.\n+* if you close an issue for any other reason, one of the aforementioned `triage/` labels\n+  is probably adequate.\n+\n+== Backporting Process\n+\n+When we release a new version of Quarkus, we usually do a bugfix\n+release a couple of weeks after.\n+\n+Everytime, we do a release, we create a release branch to host\n+the commits for these bugfix releases.\n+\n+All the pull requests are merged in master so for the new feature \n+release of Quarkus.\n+They won't be integrated in the previous version branch.\n+\n+One of your pull request might qualify for being backported to this\n+bugfix branch.\n+\n+Good examples of that might be:\n+\n+* bugfixes", "originalCommit": "9f4ea947a960504ffa1ab6c6f4812d1520cdcf43", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk3NzkzNQ==", "url": "https://github.com/quarkusio/quarkus/pull/10915#discussion_r458977935", "bodyText": "not sure about that one, I think it's commonly accepted.", "author": "gsmet", "createdAt": "2020-07-22T17:55:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk3MzAyNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk3MzkxNA==", "url": "https://github.com/quarkusio/quarkus/pull/10915#discussion_r458973914", "bodyText": "Maybe suggest asking in Zulip?", "author": "gastaldi", "createdAt": "2020-07-22T17:48:42Z", "path": "COMMITTERS.adoc", "diffHunk": "@@ -0,0 +1,164 @@\n+= Information for Quarkus Committers\n+\n+This document contains useful information for Quarkus committers.\n+\n+[NOTE]\n+====\n+It is a work in progress, so if you think information is missing/unclear/inadequate,\n+please reach out to us on the `quarkus-dev` mailing-list.\n+====\n+\n+This document has a lot of information.\n+It is not a set of strict rules, it is here to guide you.\n+If you forget to do something, miss something, don't worry, it happens.\n+\n+Do your best and that will already be a lot :).\n+\n+== Merging Pull Requests\n+\n+The first thing is that, while being a committer,\n+you can't really commit directly to the main repository:\n+you need at least one review by your peers.\n+\n+Thus the need for a pull request.\n+\n+So you are more like a merger than a committer\n+and you might merge more PRs from others than your own work.\n+\n+While not absolute, here are some advices:\n+\n+* if you really want a review by a specific person,\n+  make it a named reviewer via a GitHub UI\n+* if someone asked for a specific reviewer, better\n+  give some time for this person to review the PR.\n+  If not reviewed in a reasonable amount of time,\n+  better ping him again to have some information\n+  or ask the original author if we should go ahead.\n+* if in doubt (on a specific part or because you're\n+  not comfortable reviewing documentation or any other reason),\n+  ask for help\n+* except if it's a totally non brainer (typically a typo fix),\n+  let the PR bake a few hours so some other people can have a\n+  look if interested.\n+  If the PR is very large or is a new extension, better let it\n+  bake for a few days.\n+* we do merge commits so please ask the author to properly\n+  squash the commits before merging.\n+  The idea is to have proper semantic commits.\n+  If the author is not familiar with Git or not available,\n+  you can also (carefully) do it for him as soon as you agreed on it.\n+* make sure the commit comments are meaningful\n+* at the beginning, you can start by giving your approval and not merging\n+  and see how things evolve.\n+  This should give you some hints of important things to check in the future.\n+* only merge pull requests that target master.\n+  Dealing with old branches is a separate process.\n+* if you are sure a PR should go in and is just waiting for CI,\n+  just use the `triage/waiting-for-ci` label.\n+  It is a good hint for other committers.\n+\n+Obviously, each situation is different so use your own judgement,\n+and if in doubt, just ask for advice, the other committers are here to help.\n+\n+== Pull Request Title\n+\n+The title should be in English, should not contain an issue number.\n+It should also not contain ellipsis.\n+\n+If your commit message was too long and GitHub automatically cut\n+the title, that's helpful if you can take the time to move the cut\n+part where it belongs to have a full title.\n+\n+Titles are included in the Release notes so they are important.\n+\n+A good title would look like: `Fix XXX in Quartz extension`.\n+\n+A bad title would look like: `fix(#444)`.\n+\n+== Issues Fixed\n+\n+When a PR fixes some issues, it's good practice to add it in the description.\n+\n+One issue per line with something like:\n+\n+[source,asciidoc]\n+----\n+* Fix #444\n+* Fix #555\n+----\n+\n+Note that GitHub won't detect issues properly if you do something like\n+`Fix #444 #555`.\n+\n+== Affecting Labels and Milestones\n+\n+Affecting labels and milestones is very important in our process.\n+\n+Before each release, we check that we don't have any orphan i.e.\n+closed issues that don't have either a milestone affected or\n+some of the \"excluding\" labels.\n+\n+Thus:\n+\n+* when your merge a pull request, please affect it with the current milestone marked with \"master\".\n+* if the pull request has issues associated (i.e. if the pull request fixes some issues),\n+  also affect the milestone to the issues.\n+* if you close a pull request because we won't merge it, please add the appropriate `triage/` label:\n+  `triage/invalid`, `triage/out-of-date`, `triage/wontfix` are usually in order.\n+* if you close an issue because it has been fixed, either add the milestone\n+  if you can find it easily or use the `triage/out-of-date` if you can't.\n+* if you close an issue for any other reason, one of the aforementioned `triage/` labels\n+  is probably adequate.\n+\n+== Backporting Process\n+\n+When we release a new version of Quarkus, we usually do a bugfix\n+release a couple of weeks after.\n+\n+Everytime, we do a release, we create a release branch to host\n+the commits for these bugfix releases.\n+\n+All the pull requests are merged in master so for the new feature \n+release of Quarkus.\n+They won't be integrated in the previous version branch.\n+\n+One of your pull request might qualify for being backported to this\n+bugfix branch.\n+\n+Good examples of that might be:\n+\n+* bugfixes\n+* documentation fixes\n+* usability fixes\n+\n+Obviously, the barrier is higher for large pull requests as\n+they might be more risky to backport.\n+But sometimes, we just have to backport them anyway.\n+\n+If you think your pull request or the pull request you review might be a good backport candidate,\n+please add the `triage/backport?` label.\n+\n+The question mark is important:\n+it is not automatic and we carefully review each pull request before backporting.\n+\n+Thus, if not entirely clear, don't hesitate to add a comment to the pull request\n+when adding the label.\n+\n+And don't be surprised if we come to you with some questions about it\n+when we prepare the next bugfix release.\n+\n+== Good First Issues\n+\n+We need to find the right balance between fixing the issue right away\n+or try to get a new contributor onboard.\n+\n+It's not always easy to find it but if you think the issue is appropriate,\n+affecting it the `good first issue` label for some time might be a good thing.\n+\n+Obviously, critical bugs are not good candidates :).\n+\n+== I Did Something Wrong, What Should I Do?\n+\n+Take a deep breath and don't worry, it happens.\n+\n+Just ping @gsmet and @geoand and we will find a solution.", "originalCommit": "9f4ea947a960504ffa1ab6c6f4812d1520cdcf43", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk3ODIzMg==", "url": "https://github.com/quarkusio/quarkus/pull/10915#discussion_r458978232", "bodyText": "yeah I wasn't sure what was the best way. But sure I can suggest that.", "author": "gsmet", "createdAt": "2020-07-22T17:55:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk3MzkxNA=="}], "type": "inlineReview"}, {"oid": "84d71c218aefc8dca1e635d620f6ae03ae4ac36e", "url": "https://github.com/quarkusio/quarkus/commit/84d71c218aefc8dca1e635d620f6ae03ae4ac36e", "message": "Add COMMITTERS.adoc", "committedDate": "2020-07-22T18:01:02Z", "type": "forcePushed"}, {"oid": "f25f99797e84371e59253f6af33e10a45416384c", "url": "https://github.com/quarkusio/quarkus/commit/f25f99797e84371e59253f6af33e10a45416384c", "message": "Add COMMITTERS.adoc", "committedDate": "2020-07-22T18:08:54Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA1OTA0MA==", "url": "https://github.com/quarkusio/quarkus/pull/10915#discussion_r459059040", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            While not absolute, here are some advices:\n          \n          \n            \n            While not absolute, here is some advice:", "author": "geoand", "createdAt": "2020-07-22T20:20:08Z", "path": "COMMITTERS.adoc", "diffHunk": "@@ -0,0 +1,173 @@\n+= Information for Quarkus Committers\n+\n+This document contains useful information for Quarkus committers.\n+\n+[NOTE]\n+====\n+It is a work in progress, so if you think information is missing/unclear/inadequate,\n+please reach out to us on the `quarkus-dev` mailing-list.\n+====\n+\n+This document has a lot of information.\n+It is not a set of strict rules, it is here to guide you.\n+If you forget to do something, miss something, don't worry, it happens.\n+\n+Do your best and that will already be a lot :).\n+\n+== Merging Pull Requests\n+\n+The first thing is that, while being a committer,\n+you can't really commit directly to the main repository:\n+you need at least one review by your peers.\n+\n+Thus the need for a pull request.\n+\n+So you are more like a merger than a committer\n+and you might merge more PRs from others than your own work.\n+\n+While not absolute, here are some advices:", "originalCommit": "f25f99797e84371e59253f6af33e10a45416384c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA1OTg4NQ==", "url": "https://github.com/quarkusio/quarkus/pull/10915#discussion_r459059885", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * except if it's a totally non brainer (typically a typo fix),\n          \n          \n            \n            * except if it's a total no-brainer (typically a typo fix),", "author": "geoand", "createdAt": "2020-07-22T20:21:35Z", "path": "COMMITTERS.adoc", "diffHunk": "@@ -0,0 +1,173 @@\n+= Information for Quarkus Committers\n+\n+This document contains useful information for Quarkus committers.\n+\n+[NOTE]\n+====\n+It is a work in progress, so if you think information is missing/unclear/inadequate,\n+please reach out to us on the `quarkus-dev` mailing-list.\n+====\n+\n+This document has a lot of information.\n+It is not a set of strict rules, it is here to guide you.\n+If you forget to do something, miss something, don't worry, it happens.\n+\n+Do your best and that will already be a lot :).\n+\n+== Merging Pull Requests\n+\n+The first thing is that, while being a committer,\n+you can't really commit directly to the main repository:\n+you need at least one review by your peers.\n+\n+Thus the need for a pull request.\n+\n+So you are more like a merger than a committer\n+and you might merge more PRs from others than your own work.\n+\n+While not absolute, here are some advices:\n+\n+* if you really want a review by a specific person,\n+  make it a named reviewer via a GitHub UI\n+* if someone asked for a specific reviewer, better\n+  give some time for this person to review the PR.\n+  If not reviewed in a reasonable amount of time,\n+  better ping them again to have some information\n+  or ask the original author if we should go ahead.\n+* if in doubt (on a specific part or because you're\n+  not comfortable reviewing documentation or any other reason),\n+  ask for help\n+* except if it's a totally non brainer (typically a typo fix),", "originalCommit": "f25f99797e84371e59253f6af33e10a45416384c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA2MjYxMQ==", "url": "https://github.com/quarkusio/quarkus/pull/10915#discussion_r459062611", "bodyText": "Perhaps add this link: https://docs.github.com/en/github/collaborating-with-issues-and-pull-requests/committing-changes-to-a-pull-request-branch-created-from-a-fork as a lot of people don't know this is even possible", "author": "geoand", "createdAt": "2020-07-22T20:27:01Z", "path": "COMMITTERS.adoc", "diffHunk": "@@ -0,0 +1,173 @@\n+= Information for Quarkus Committers\n+\n+This document contains useful information for Quarkus committers.\n+\n+[NOTE]\n+====\n+It is a work in progress, so if you think information is missing/unclear/inadequate,\n+please reach out to us on the `quarkus-dev` mailing-list.\n+====\n+\n+This document has a lot of information.\n+It is not a set of strict rules, it is here to guide you.\n+If you forget to do something, miss something, don't worry, it happens.\n+\n+Do your best and that will already be a lot :).\n+\n+== Merging Pull Requests\n+\n+The first thing is that, while being a committer,\n+you can't really commit directly to the main repository:\n+you need at least one review by your peers.\n+\n+Thus the need for a pull request.\n+\n+So you are more like a merger than a committer\n+and you might merge more PRs from others than your own work.\n+\n+While not absolute, here are some advices:\n+\n+* if you really want a review by a specific person,\n+  make it a named reviewer via a GitHub UI\n+* if someone asked for a specific reviewer, better\n+  give some time for this person to review the PR.\n+  If not reviewed in a reasonable amount of time,\n+  better ping them again to have some information\n+  or ask the original author if we should go ahead.\n+* if in doubt (on a specific part or because you're\n+  not comfortable reviewing documentation or any other reason),\n+  ask for help\n+* except if it's a totally non brainer (typically a typo fix),\n+  let the PR bake a few hours so some other people can have a\n+  look if interested.\n+  If the PR is very large or is a new extension, better let it\n+  bake for a few days.\n+* we do merge commits so please ask the author to properly\n+  squash the commits before merging.\n+  The idea is to have proper semantic commits.\n+  If the author is not familiar with Git or not available,\n+  you can also (carefully) do it for them as soon as you agreed on it.", "originalCommit": "f25f99797e84371e59253f6af33e10a45416384c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTMwNTY3Mw==", "url": "https://github.com/quarkusio/quarkus/pull/10915#discussion_r459305673", "bodyText": "Done.", "author": "gsmet", "createdAt": "2020-07-23T08:54:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA2MjYxMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA2MzIxMA==", "url": "https://github.com/quarkusio/quarkus/pull/10915#discussion_r459063210", "bodyText": "+100", "author": "geoand", "createdAt": "2020-07-22T20:28:07Z", "path": "COMMITTERS.adoc", "diffHunk": "@@ -0,0 +1,173 @@\n+= Information for Quarkus Committers\n+\n+This document contains useful information for Quarkus committers.\n+\n+[NOTE]\n+====\n+It is a work in progress, so if you think information is missing/unclear/inadequate,\n+please reach out to us on the `quarkus-dev` mailing-list.\n+====\n+\n+This document has a lot of information.\n+It is not a set of strict rules, it is here to guide you.\n+If you forget to do something, miss something, don't worry, it happens.\n+\n+Do your best and that will already be a lot :).\n+\n+== Merging Pull Requests\n+\n+The first thing is that, while being a committer,\n+you can't really commit directly to the main repository:\n+you need at least one review by your peers.\n+\n+Thus the need for a pull request.\n+\n+So you are more like a merger than a committer\n+and you might merge more PRs from others than your own work.\n+\n+While not absolute, here are some advices:\n+\n+* if you really want a review by a specific person,\n+  make it a named reviewer via a GitHub UI\n+* if someone asked for a specific reviewer, better\n+  give some time for this person to review the PR.\n+  If not reviewed in a reasonable amount of time,\n+  better ping them again to have some information\n+  or ask the original author if we should go ahead.\n+* if in doubt (on a specific part or because you're\n+  not comfortable reviewing documentation or any other reason),\n+  ask for help\n+* except if it's a totally non brainer (typically a typo fix),\n+  let the PR bake a few hours so some other people can have a\n+  look if interested.\n+  If the PR is very large or is a new extension, better let it\n+  bake for a few days.\n+* we do merge commits so please ask the author to properly\n+  squash the commits before merging.\n+  The idea is to have proper semantic commits.\n+  If the author is not familiar with Git or not available,\n+  you can also (carefully) do it for them as soon as you agreed on it.\n+* make sure the commit comments are meaningful\n+* at the beginning, you can start by giving your approval and not merging\n+  and see how things evolve.\n+  This should give you some hints of important things to check in the future.\n+* only merge pull requests that target master.\n+  **Dealing with old branches is a separate process.**\n+* if you are sure a PR should go in and is just waiting for CI,\n+  just use the `triage/waiting-for-ci` label.\n+  It is a good hint for other committers.\n+* if you think a pull request is an essential part of a given milestone\n+  (and can realistically be part of it),\n+  you should affect this milestone to it so that we can be sure it stays on the radar.\n+\n+Obviously, each situation is different so use your own judgement,\n+and if in doubt, just ask for advice, the other committers are here to help.\n+\n+== Pull Request Title\n+\n+The title should be in English, should not contain an issue number.\n+It should also not contain ellipsis.", "originalCommit": "f25f99797e84371e59253f6af33e10a45416384c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA2MzU0MQ==", "url": "https://github.com/quarkusio/quarkus/pull/10915#discussion_r459063541", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * Fix #555\n          \n          \n            \n            * Resolves #555", "author": "geoand", "createdAt": "2020-07-22T20:28:49Z", "path": "COMMITTERS.adoc", "diffHunk": "@@ -0,0 +1,173 @@\n+= Information for Quarkus Committers\n+\n+This document contains useful information for Quarkus committers.\n+\n+[NOTE]\n+====\n+It is a work in progress, so if you think information is missing/unclear/inadequate,\n+please reach out to us on the `quarkus-dev` mailing-list.\n+====\n+\n+This document has a lot of information.\n+It is not a set of strict rules, it is here to guide you.\n+If you forget to do something, miss something, don't worry, it happens.\n+\n+Do your best and that will already be a lot :).\n+\n+== Merging Pull Requests\n+\n+The first thing is that, while being a committer,\n+you can't really commit directly to the main repository:\n+you need at least one review by your peers.\n+\n+Thus the need for a pull request.\n+\n+So you are more like a merger than a committer\n+and you might merge more PRs from others than your own work.\n+\n+While not absolute, here are some advices:\n+\n+* if you really want a review by a specific person,\n+  make it a named reviewer via a GitHub UI\n+* if someone asked for a specific reviewer, better\n+  give some time for this person to review the PR.\n+  If not reviewed in a reasonable amount of time,\n+  better ping them again to have some information\n+  or ask the original author if we should go ahead.\n+* if in doubt (on a specific part or because you're\n+  not comfortable reviewing documentation or any other reason),\n+  ask for help\n+* except if it's a totally non brainer (typically a typo fix),\n+  let the PR bake a few hours so some other people can have a\n+  look if interested.\n+  If the PR is very large or is a new extension, better let it\n+  bake for a few days.\n+* we do merge commits so please ask the author to properly\n+  squash the commits before merging.\n+  The idea is to have proper semantic commits.\n+  If the author is not familiar with Git or not available,\n+  you can also (carefully) do it for them as soon as you agreed on it.\n+* make sure the commit comments are meaningful\n+* at the beginning, you can start by giving your approval and not merging\n+  and see how things evolve.\n+  This should give you some hints of important things to check in the future.\n+* only merge pull requests that target master.\n+  **Dealing with old branches is a separate process.**\n+* if you are sure a PR should go in and is just waiting for CI,\n+  just use the `triage/waiting-for-ci` label.\n+  It is a good hint for other committers.\n+* if you think a pull request is an essential part of a given milestone\n+  (and can realistically be part of it),\n+  you should affect this milestone to it so that we can be sure it stays on the radar.\n+\n+Obviously, each situation is different so use your own judgement,\n+and if in doubt, just ask for advice, the other committers are here to help.\n+\n+== Pull Request Title\n+\n+The title should be in English, should not contain an issue number.\n+It should also not contain ellipsis.\n+\n+If your commit message was too long and GitHub automatically cut\n+the title, that's helpful if you can take the time to move the cut\n+part where it belongs to have a full title.\n+\n+Titles are included in the Release notes so they are important.\n+\n+A good title would look like: `Fix XXX in Quartz extension` or\n+`Introduce Hibernate Reactive extension`.\n+\n+A bad title would look like: `fix(#444)`.\n+\n+== Issues Fixed\n+\n+When a PR fixes some issues, it's good practice to add it in the description.\n+\n+One issue per line with something like:\n+\n+[source,asciidoc]\n+----\n+* Fix #444\n+* Fix #555", "originalCommit": "f25f99797e84371e59253f6af33e10a45416384c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTMwMjAxNw==", "url": "https://github.com/quarkusio/quarkus/pull/10915#discussion_r459302017", "bodyText": "Yeah, there are a couple of different options but I'm not sure it's worth making the message more complex here.", "author": "gsmet", "createdAt": "2020-07-23T08:47:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA2MzU0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTMwNTE2MA==", "url": "https://github.com/quarkusio/quarkus/pull/10915#discussion_r459305160", "bodyText": "I added a TIP below.", "author": "gsmet", "createdAt": "2020-07-23T08:53:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA2MzU0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTM2MjU4Ng==", "url": "https://github.com/quarkusio/quarkus/pull/10915#discussion_r459362586", "bodyText": "should it have description of what it fixes? not just the number?", "author": "emmanuelbernard", "createdAt": "2020-07-23T10:45:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA2MzU0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTUzNTYxNA==", "url": "https://github.com/quarkusio/quarkus/pull/10915#discussion_r459535614", "bodyText": "it would hopefully just be redundant. the \"Fix #nnn\" is mainly just to autoclose issues thus doesnt require more info by default", "author": "maxandersen", "createdAt": "2020-07-23T15:26:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA2MzU0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTU0NDE4Ng==", "url": "https://github.com/quarkusio/quarkus/pull/10915#discussion_r459544186", "bodyText": "If you pass your mouse on the issue, you have the issue info so it's perfectly OK as is.", "author": "gsmet", "createdAt": "2020-07-23T15:39:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA2MzU0MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA2NDc3Nw==", "url": "https://github.com/quarkusio/quarkus/pull/10915#discussion_r459064777", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Everytime, we do a release, we create a release branch to host\n          \n          \n            \n            Everytime we do a release, we create a release branch to host", "author": "geoand", "createdAt": "2020-07-22T20:31:09Z", "path": "COMMITTERS.adoc", "diffHunk": "@@ -0,0 +1,173 @@\n+= Information for Quarkus Committers\n+\n+This document contains useful information for Quarkus committers.\n+\n+[NOTE]\n+====\n+It is a work in progress, so if you think information is missing/unclear/inadequate,\n+please reach out to us on the `quarkus-dev` mailing-list.\n+====\n+\n+This document has a lot of information.\n+It is not a set of strict rules, it is here to guide you.\n+If you forget to do something, miss something, don't worry, it happens.\n+\n+Do your best and that will already be a lot :).\n+\n+== Merging Pull Requests\n+\n+The first thing is that, while being a committer,\n+you can't really commit directly to the main repository:\n+you need at least one review by your peers.\n+\n+Thus the need for a pull request.\n+\n+So you are more like a merger than a committer\n+and you might merge more PRs from others than your own work.\n+\n+While not absolute, here are some advices:\n+\n+* if you really want a review by a specific person,\n+  make it a named reviewer via a GitHub UI\n+* if someone asked for a specific reviewer, better\n+  give some time for this person to review the PR.\n+  If not reviewed in a reasonable amount of time,\n+  better ping them again to have some information\n+  or ask the original author if we should go ahead.\n+* if in doubt (on a specific part or because you're\n+  not comfortable reviewing documentation or any other reason),\n+  ask for help\n+* except if it's a totally non brainer (typically a typo fix),\n+  let the PR bake a few hours so some other people can have a\n+  look if interested.\n+  If the PR is very large or is a new extension, better let it\n+  bake for a few days.\n+* we do merge commits so please ask the author to properly\n+  squash the commits before merging.\n+  The idea is to have proper semantic commits.\n+  If the author is not familiar with Git or not available,\n+  you can also (carefully) do it for them as soon as you agreed on it.\n+* make sure the commit comments are meaningful\n+* at the beginning, you can start by giving your approval and not merging\n+  and see how things evolve.\n+  This should give you some hints of important things to check in the future.\n+* only merge pull requests that target master.\n+  **Dealing with old branches is a separate process.**\n+* if you are sure a PR should go in and is just waiting for CI,\n+  just use the `triage/waiting-for-ci` label.\n+  It is a good hint for other committers.\n+* if you think a pull request is an essential part of a given milestone\n+  (and can realistically be part of it),\n+  you should affect this milestone to it so that we can be sure it stays on the radar.\n+\n+Obviously, each situation is different so use your own judgement,\n+and if in doubt, just ask for advice, the other committers are here to help.\n+\n+== Pull Request Title\n+\n+The title should be in English, should not contain an issue number.\n+It should also not contain ellipsis.\n+\n+If your commit message was too long and GitHub automatically cut\n+the title, that's helpful if you can take the time to move the cut\n+part where it belongs to have a full title.\n+\n+Titles are included in the Release notes so they are important.\n+\n+A good title would look like: `Fix XXX in Quartz extension` or\n+`Introduce Hibernate Reactive extension`.\n+\n+A bad title would look like: `fix(#444)`.\n+\n+== Issues Fixed\n+\n+When a PR fixes some issues, it's good practice to add it in the description.\n+\n+One issue per line with something like:\n+\n+[source,asciidoc]\n+----\n+* Fix #444\n+* Fix #555\n+----\n+\n+[NOTE]\n+====\n+GitHub won't detect issues properly if you do something like\n+`Fix #444 #555`.\n+====\n+\n+== Affecting Labels and Milestones\n+\n+Affecting labels and milestones is very important in our process.\n+\n+Before each release, we check that we don't have any orphan i.e.\n+closed issues that don't have either a milestone affected or\n+some of the \"excluding\" labels.\n+\n+Thus:\n+\n+* when you merge a pull request, please affect it with the current milestone marked with \"master\".\n+* if the pull request has issues associated (i.e. if the pull request fixes some issues),\n+  you should also affect the milestone assigned to the issues.\n+* if you close a pull request because the committers have decided to not merge it,\n+  please add the appropriate `triage/` label: `triage/invalid`, `triage/out-of-date`,\n+  `triage/wontfix` are usually in order.\n+* if you close an issue because it has been fixed, either add the milestone\n+  if you can find it easily or use the `triage/out-of-date` if you can't.\n+* if you close an issue for any other reason, one of the aforementioned `triage/` labels\n+  is probably adequate.\n+\n+== Backporting Process\n+\n+When we release a new version of Quarkus, we usually do a bugfix\n+release a couple of weeks after.\n+\n+Everytime, we do a release, we create a release branch to host", "originalCommit": "f25f99797e84371e59253f6af33e10a45416384c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA2NTM3Ng==", "url": "https://github.com/quarkusio/quarkus/pull/10915#discussion_r459065376", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            All the pull requests are merged in master so for the new feature \n          \n          \n            \n            All the pull requests are merged in master so they are applied to the new feature", "author": "geoand", "createdAt": "2020-07-22T20:32:16Z", "path": "COMMITTERS.adoc", "diffHunk": "@@ -0,0 +1,173 @@\n+= Information for Quarkus Committers\n+\n+This document contains useful information for Quarkus committers.\n+\n+[NOTE]\n+====\n+It is a work in progress, so if you think information is missing/unclear/inadequate,\n+please reach out to us on the `quarkus-dev` mailing-list.\n+====\n+\n+This document has a lot of information.\n+It is not a set of strict rules, it is here to guide you.\n+If you forget to do something, miss something, don't worry, it happens.\n+\n+Do your best and that will already be a lot :).\n+\n+== Merging Pull Requests\n+\n+The first thing is that, while being a committer,\n+you can't really commit directly to the main repository:\n+you need at least one review by your peers.\n+\n+Thus the need for a pull request.\n+\n+So you are more like a merger than a committer\n+and you might merge more PRs from others than your own work.\n+\n+While not absolute, here are some advices:\n+\n+* if you really want a review by a specific person,\n+  make it a named reviewer via a GitHub UI\n+* if someone asked for a specific reviewer, better\n+  give some time for this person to review the PR.\n+  If not reviewed in a reasonable amount of time,\n+  better ping them again to have some information\n+  or ask the original author if we should go ahead.\n+* if in doubt (on a specific part or because you're\n+  not comfortable reviewing documentation or any other reason),\n+  ask for help\n+* except if it's a totally non brainer (typically a typo fix),\n+  let the PR bake a few hours so some other people can have a\n+  look if interested.\n+  If the PR is very large or is a new extension, better let it\n+  bake for a few days.\n+* we do merge commits so please ask the author to properly\n+  squash the commits before merging.\n+  The idea is to have proper semantic commits.\n+  If the author is not familiar with Git or not available,\n+  you can also (carefully) do it for them as soon as you agreed on it.\n+* make sure the commit comments are meaningful\n+* at the beginning, you can start by giving your approval and not merging\n+  and see how things evolve.\n+  This should give you some hints of important things to check in the future.\n+* only merge pull requests that target master.\n+  **Dealing with old branches is a separate process.**\n+* if you are sure a PR should go in and is just waiting for CI,\n+  just use the `triage/waiting-for-ci` label.\n+  It is a good hint for other committers.\n+* if you think a pull request is an essential part of a given milestone\n+  (and can realistically be part of it),\n+  you should affect this milestone to it so that we can be sure it stays on the radar.\n+\n+Obviously, each situation is different so use your own judgement,\n+and if in doubt, just ask for advice, the other committers are here to help.\n+\n+== Pull Request Title\n+\n+The title should be in English, should not contain an issue number.\n+It should also not contain ellipsis.\n+\n+If your commit message was too long and GitHub automatically cut\n+the title, that's helpful if you can take the time to move the cut\n+part where it belongs to have a full title.\n+\n+Titles are included in the Release notes so they are important.\n+\n+A good title would look like: `Fix XXX in Quartz extension` or\n+`Introduce Hibernate Reactive extension`.\n+\n+A bad title would look like: `fix(#444)`.\n+\n+== Issues Fixed\n+\n+When a PR fixes some issues, it's good practice to add it in the description.\n+\n+One issue per line with something like:\n+\n+[source,asciidoc]\n+----\n+* Fix #444\n+* Fix #555\n+----\n+\n+[NOTE]\n+====\n+GitHub won't detect issues properly if you do something like\n+`Fix #444 #555`.\n+====\n+\n+== Affecting Labels and Milestones\n+\n+Affecting labels and milestones is very important in our process.\n+\n+Before each release, we check that we don't have any orphan i.e.\n+closed issues that don't have either a milestone affected or\n+some of the \"excluding\" labels.\n+\n+Thus:\n+\n+* when you merge a pull request, please affect it with the current milestone marked with \"master\".\n+* if the pull request has issues associated (i.e. if the pull request fixes some issues),\n+  you should also affect the milestone assigned to the issues.\n+* if you close a pull request because the committers have decided to not merge it,\n+  please add the appropriate `triage/` label: `triage/invalid`, `triage/out-of-date`,\n+  `triage/wontfix` are usually in order.\n+* if you close an issue because it has been fixed, either add the milestone\n+  if you can find it easily or use the `triage/out-of-date` if you can't.\n+* if you close an issue for any other reason, one of the aforementioned `triage/` labels\n+  is probably adequate.\n+\n+== Backporting Process\n+\n+When we release a new version of Quarkus, we usually do a bugfix\n+release a couple of weeks after.\n+\n+Everytime, we do a release, we create a release branch to host\n+the commits for these bugfix releases.\n+\n+All the pull requests are merged in master so for the new feature ", "originalCommit": "f25f99797e84371e59253f6af33e10a45416384c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA2NTYzOQ==", "url": "https://github.com/quarkusio/quarkus/pull/10915#discussion_r459065639", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            One of your pull requests might qualify for being backported to this\n          \n          \n            \n            Some pull requests however may qualify for being backported to this", "author": "geoand", "createdAt": "2020-07-22T20:32:45Z", "path": "COMMITTERS.adoc", "diffHunk": "@@ -0,0 +1,173 @@\n+= Information for Quarkus Committers\n+\n+This document contains useful information for Quarkus committers.\n+\n+[NOTE]\n+====\n+It is a work in progress, so if you think information is missing/unclear/inadequate,\n+please reach out to us on the `quarkus-dev` mailing-list.\n+====\n+\n+This document has a lot of information.\n+It is not a set of strict rules, it is here to guide you.\n+If you forget to do something, miss something, don't worry, it happens.\n+\n+Do your best and that will already be a lot :).\n+\n+== Merging Pull Requests\n+\n+The first thing is that, while being a committer,\n+you can't really commit directly to the main repository:\n+you need at least one review by your peers.\n+\n+Thus the need for a pull request.\n+\n+So you are more like a merger than a committer\n+and you might merge more PRs from others than your own work.\n+\n+While not absolute, here are some advices:\n+\n+* if you really want a review by a specific person,\n+  make it a named reviewer via a GitHub UI\n+* if someone asked for a specific reviewer, better\n+  give some time for this person to review the PR.\n+  If not reviewed in a reasonable amount of time,\n+  better ping them again to have some information\n+  or ask the original author if we should go ahead.\n+* if in doubt (on a specific part or because you're\n+  not comfortable reviewing documentation or any other reason),\n+  ask for help\n+* except if it's a totally non brainer (typically a typo fix),\n+  let the PR bake a few hours so some other people can have a\n+  look if interested.\n+  If the PR is very large or is a new extension, better let it\n+  bake for a few days.\n+* we do merge commits so please ask the author to properly\n+  squash the commits before merging.\n+  The idea is to have proper semantic commits.\n+  If the author is not familiar with Git or not available,\n+  you can also (carefully) do it for them as soon as you agreed on it.\n+* make sure the commit comments are meaningful\n+* at the beginning, you can start by giving your approval and not merging\n+  and see how things evolve.\n+  This should give you some hints of important things to check in the future.\n+* only merge pull requests that target master.\n+  **Dealing with old branches is a separate process.**\n+* if you are sure a PR should go in and is just waiting for CI,\n+  just use the `triage/waiting-for-ci` label.\n+  It is a good hint for other committers.\n+* if you think a pull request is an essential part of a given milestone\n+  (and can realistically be part of it),\n+  you should affect this milestone to it so that we can be sure it stays on the radar.\n+\n+Obviously, each situation is different so use your own judgement,\n+and if in doubt, just ask for advice, the other committers are here to help.\n+\n+== Pull Request Title\n+\n+The title should be in English, should not contain an issue number.\n+It should also not contain ellipsis.\n+\n+If your commit message was too long and GitHub automatically cut\n+the title, that's helpful if you can take the time to move the cut\n+part where it belongs to have a full title.\n+\n+Titles are included in the Release notes so they are important.\n+\n+A good title would look like: `Fix XXX in Quartz extension` or\n+`Introduce Hibernate Reactive extension`.\n+\n+A bad title would look like: `fix(#444)`.\n+\n+== Issues Fixed\n+\n+When a PR fixes some issues, it's good practice to add it in the description.\n+\n+One issue per line with something like:\n+\n+[source,asciidoc]\n+----\n+* Fix #444\n+* Fix #555\n+----\n+\n+[NOTE]\n+====\n+GitHub won't detect issues properly if you do something like\n+`Fix #444 #555`.\n+====\n+\n+== Affecting Labels and Milestones\n+\n+Affecting labels and milestones is very important in our process.\n+\n+Before each release, we check that we don't have any orphan i.e.\n+closed issues that don't have either a milestone affected or\n+some of the \"excluding\" labels.\n+\n+Thus:\n+\n+* when you merge a pull request, please affect it with the current milestone marked with \"master\".\n+* if the pull request has issues associated (i.e. if the pull request fixes some issues),\n+  you should also affect the milestone assigned to the issues.\n+* if you close a pull request because the committers have decided to not merge it,\n+  please add the appropriate `triage/` label: `triage/invalid`, `triage/out-of-date`,\n+  `triage/wontfix` are usually in order.\n+* if you close an issue because it has been fixed, either add the milestone\n+  if you can find it easily or use the `triage/out-of-date` if you can't.\n+* if you close an issue for any other reason, one of the aforementioned `triage/` labels\n+  is probably adequate.\n+\n+== Backporting Process\n+\n+When we release a new version of Quarkus, we usually do a bugfix\n+release a couple of weeks after.\n+\n+Everytime, we do a release, we create a release branch to host\n+the commits for these bugfix releases.\n+\n+All the pull requests are merged in master so for the new feature \n+release of Quarkus.\n+They won't be integrated in the previous version branch.\n+\n+One of your pull requests might qualify for being backported to this", "originalCommit": "f25f99797e84371e59253f6af33e10a45416384c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA2NjE1Mw==", "url": "https://github.com/quarkusio/quarkus/pull/10915#discussion_r459066153", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            If you think your pull request or the pull request you review might be a good backport candidate,\n          \n          \n            \n            If you think your pull request or the pull request you are reviewing, might be a good backport candidate,", "author": "geoand", "createdAt": "2020-07-22T20:33:50Z", "path": "COMMITTERS.adoc", "diffHunk": "@@ -0,0 +1,173 @@\n+= Information for Quarkus Committers\n+\n+This document contains useful information for Quarkus committers.\n+\n+[NOTE]\n+====\n+It is a work in progress, so if you think information is missing/unclear/inadequate,\n+please reach out to us on the `quarkus-dev` mailing-list.\n+====\n+\n+This document has a lot of information.\n+It is not a set of strict rules, it is here to guide you.\n+If you forget to do something, miss something, don't worry, it happens.\n+\n+Do your best and that will already be a lot :).\n+\n+== Merging Pull Requests\n+\n+The first thing is that, while being a committer,\n+you can't really commit directly to the main repository:\n+you need at least one review by your peers.\n+\n+Thus the need for a pull request.\n+\n+So you are more like a merger than a committer\n+and you might merge more PRs from others than your own work.\n+\n+While not absolute, here are some advices:\n+\n+* if you really want a review by a specific person,\n+  make it a named reviewer via a GitHub UI\n+* if someone asked for a specific reviewer, better\n+  give some time for this person to review the PR.\n+  If not reviewed in a reasonable amount of time,\n+  better ping them again to have some information\n+  or ask the original author if we should go ahead.\n+* if in doubt (on a specific part or because you're\n+  not comfortable reviewing documentation or any other reason),\n+  ask for help\n+* except if it's a totally non brainer (typically a typo fix),\n+  let the PR bake a few hours so some other people can have a\n+  look if interested.\n+  If the PR is very large or is a new extension, better let it\n+  bake for a few days.\n+* we do merge commits so please ask the author to properly\n+  squash the commits before merging.\n+  The idea is to have proper semantic commits.\n+  If the author is not familiar with Git or not available,\n+  you can also (carefully) do it for them as soon as you agreed on it.\n+* make sure the commit comments are meaningful\n+* at the beginning, you can start by giving your approval and not merging\n+  and see how things evolve.\n+  This should give you some hints of important things to check in the future.\n+* only merge pull requests that target master.\n+  **Dealing with old branches is a separate process.**\n+* if you are sure a PR should go in and is just waiting for CI,\n+  just use the `triage/waiting-for-ci` label.\n+  It is a good hint for other committers.\n+* if you think a pull request is an essential part of a given milestone\n+  (and can realistically be part of it),\n+  you should affect this milestone to it so that we can be sure it stays on the radar.\n+\n+Obviously, each situation is different so use your own judgement,\n+and if in doubt, just ask for advice, the other committers are here to help.\n+\n+== Pull Request Title\n+\n+The title should be in English, should not contain an issue number.\n+It should also not contain ellipsis.\n+\n+If your commit message was too long and GitHub automatically cut\n+the title, that's helpful if you can take the time to move the cut\n+part where it belongs to have a full title.\n+\n+Titles are included in the Release notes so they are important.\n+\n+A good title would look like: `Fix XXX in Quartz extension` or\n+`Introduce Hibernate Reactive extension`.\n+\n+A bad title would look like: `fix(#444)`.\n+\n+== Issues Fixed\n+\n+When a PR fixes some issues, it's good practice to add it in the description.\n+\n+One issue per line with something like:\n+\n+[source,asciidoc]\n+----\n+* Fix #444\n+* Fix #555\n+----\n+\n+[NOTE]\n+====\n+GitHub won't detect issues properly if you do something like\n+`Fix #444 #555`.\n+====\n+\n+== Affecting Labels and Milestones\n+\n+Affecting labels and milestones is very important in our process.\n+\n+Before each release, we check that we don't have any orphan i.e.\n+closed issues that don't have either a milestone affected or\n+some of the \"excluding\" labels.\n+\n+Thus:\n+\n+* when you merge a pull request, please affect it with the current milestone marked with \"master\".\n+* if the pull request has issues associated (i.e. if the pull request fixes some issues),\n+  you should also affect the milestone assigned to the issues.\n+* if you close a pull request because the committers have decided to not merge it,\n+  please add the appropriate `triage/` label: `triage/invalid`, `triage/out-of-date`,\n+  `triage/wontfix` are usually in order.\n+* if you close an issue because it has been fixed, either add the milestone\n+  if you can find it easily or use the `triage/out-of-date` if you can't.\n+* if you close an issue for any other reason, one of the aforementioned `triage/` labels\n+  is probably adequate.\n+\n+== Backporting Process\n+\n+When we release a new version of Quarkus, we usually do a bugfix\n+release a couple of weeks after.\n+\n+Everytime, we do a release, we create a release branch to host\n+the commits for these bugfix releases.\n+\n+All the pull requests are merged in master so for the new feature \n+release of Quarkus.\n+They won't be integrated in the previous version branch.\n+\n+One of your pull requests might qualify for being backported to this\n+bugfix branch.\n+\n+Good examples of that might be:\n+\n+* bugfixes\n+* documentation fixes\n+* usability fixes\n+\n+Obviously, the barrier is higher for large pull requests as\n+they might be more risky to backport.\n+But sometimes, we just have to backport them anyway.\n+\n+If you think your pull request or the pull request you review might be a good backport candidate,", "originalCommit": "f25f99797e84371e59253f6af33e10a45416384c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA2Njc0OA==", "url": "https://github.com/quarkusio/quarkus/pull/10915#discussion_r459066748", "bodyText": "Perhaps also add a comment mentioning that it's possible to backport specific commits from a pull request if that pull request contains both fixes and new features", "author": "geoand", "createdAt": "2020-07-22T20:34:59Z", "path": "COMMITTERS.adoc", "diffHunk": "@@ -0,0 +1,173 @@\n+= Information for Quarkus Committers\n+\n+This document contains useful information for Quarkus committers.\n+\n+[NOTE]\n+====\n+It is a work in progress, so if you think information is missing/unclear/inadequate,\n+please reach out to us on the `quarkus-dev` mailing-list.\n+====\n+\n+This document has a lot of information.\n+It is not a set of strict rules, it is here to guide you.\n+If you forget to do something, miss something, don't worry, it happens.\n+\n+Do your best and that will already be a lot :).\n+\n+== Merging Pull Requests\n+\n+The first thing is that, while being a committer,\n+you can't really commit directly to the main repository:\n+you need at least one review by your peers.\n+\n+Thus the need for a pull request.\n+\n+So you are more like a merger than a committer\n+and you might merge more PRs from others than your own work.\n+\n+While not absolute, here are some advices:\n+\n+* if you really want a review by a specific person,\n+  make it a named reviewer via a GitHub UI\n+* if someone asked for a specific reviewer, better\n+  give some time for this person to review the PR.\n+  If not reviewed in a reasonable amount of time,\n+  better ping them again to have some information\n+  or ask the original author if we should go ahead.\n+* if in doubt (on a specific part or because you're\n+  not comfortable reviewing documentation or any other reason),\n+  ask for help\n+* except if it's a totally non brainer (typically a typo fix),\n+  let the PR bake a few hours so some other people can have a\n+  look if interested.\n+  If the PR is very large or is a new extension, better let it\n+  bake for a few days.\n+* we do merge commits so please ask the author to properly\n+  squash the commits before merging.\n+  The idea is to have proper semantic commits.\n+  If the author is not familiar with Git or not available,\n+  you can also (carefully) do it for them as soon as you agreed on it.\n+* make sure the commit comments are meaningful\n+* at the beginning, you can start by giving your approval and not merging\n+  and see how things evolve.\n+  This should give you some hints of important things to check in the future.\n+* only merge pull requests that target master.\n+  **Dealing with old branches is a separate process.**\n+* if you are sure a PR should go in and is just waiting for CI,\n+  just use the `triage/waiting-for-ci` label.\n+  It is a good hint for other committers.\n+* if you think a pull request is an essential part of a given milestone\n+  (and can realistically be part of it),\n+  you should affect this milestone to it so that we can be sure it stays on the radar.\n+\n+Obviously, each situation is different so use your own judgement,\n+and if in doubt, just ask for advice, the other committers are here to help.\n+\n+== Pull Request Title\n+\n+The title should be in English, should not contain an issue number.\n+It should also not contain ellipsis.\n+\n+If your commit message was too long and GitHub automatically cut\n+the title, that's helpful if you can take the time to move the cut\n+part where it belongs to have a full title.\n+\n+Titles are included in the Release notes so they are important.\n+\n+A good title would look like: `Fix XXX in Quartz extension` or\n+`Introduce Hibernate Reactive extension`.\n+\n+A bad title would look like: `fix(#444)`.\n+\n+== Issues Fixed\n+\n+When a PR fixes some issues, it's good practice to add it in the description.\n+\n+One issue per line with something like:\n+\n+[source,asciidoc]\n+----\n+* Fix #444\n+* Fix #555\n+----\n+\n+[NOTE]\n+====\n+GitHub won't detect issues properly if you do something like\n+`Fix #444 #555`.\n+====\n+\n+== Affecting Labels and Milestones\n+\n+Affecting labels and milestones is very important in our process.\n+\n+Before each release, we check that we don't have any orphan i.e.\n+closed issues that don't have either a milestone affected or\n+some of the \"excluding\" labels.\n+\n+Thus:\n+\n+* when you merge a pull request, please affect it with the current milestone marked with \"master\".\n+* if the pull request has issues associated (i.e. if the pull request fixes some issues),\n+  you should also affect the milestone assigned to the issues.\n+* if you close a pull request because the committers have decided to not merge it,\n+  please add the appropriate `triage/` label: `triage/invalid`, `triage/out-of-date`,\n+  `triage/wontfix` are usually in order.\n+* if you close an issue because it has been fixed, either add the milestone\n+  if you can find it easily or use the `triage/out-of-date` if you can't.\n+* if you close an issue for any other reason, one of the aforementioned `triage/` labels\n+  is probably adequate.\n+\n+== Backporting Process\n+\n+When we release a new version of Quarkus, we usually do a bugfix\n+release a couple of weeks after.\n+\n+Everytime, we do a release, we create a release branch to host\n+the commits for these bugfix releases.\n+\n+All the pull requests are merged in master so for the new feature \n+release of Quarkus.\n+They won't be integrated in the previous version branch.\n+\n+One of your pull requests might qualify for being backported to this\n+bugfix branch.\n+\n+Good examples of that might be:\n+\n+* bugfixes\n+* documentation fixes\n+* usability fixes\n+\n+Obviously, the barrier is higher for large pull requests as\n+they might be more risky to backport.\n+But sometimes, we just have to backport them anyway.\n+\n+If you think your pull request or the pull request you review might be a good backport candidate,\n+please add the `triage/backport?` label.\n+\n+The question mark is important:\n+it is not automatic and we carefully review each pull request before backporting.", "originalCommit": "f25f99797e84371e59253f6af33e10a45416384c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTMwMTYzMQ==", "url": "https://github.com/quarkusio/quarkus/pull/10915#discussion_r459301631", "bodyText": "Yeah I don't want to make that too prominent because it makes it a bit awkward for assigning milestones to the PR.", "author": "gsmet", "createdAt": "2020-07-23T08:47:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA2Njc0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTMwNjkyNw==", "url": "https://github.com/quarkusio/quarkus/pull/10915#discussion_r459306927", "bodyText": "OK :)", "author": "geoand", "createdAt": "2020-07-23T08:56:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA2Njc0OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA2Nzk2MA==", "url": "https://github.com/quarkusio/quarkus/pull/10915#discussion_r459067960", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            or try to get a new contributor onboard.\n          \n          \n            \n            and trying to onboard new contributors.", "author": "geoand", "createdAt": "2020-07-22T20:37:12Z", "path": "COMMITTERS.adoc", "diffHunk": "@@ -0,0 +1,173 @@\n+= Information for Quarkus Committers\n+\n+This document contains useful information for Quarkus committers.\n+\n+[NOTE]\n+====\n+It is a work in progress, so if you think information is missing/unclear/inadequate,\n+please reach out to us on the `quarkus-dev` mailing-list.\n+====\n+\n+This document has a lot of information.\n+It is not a set of strict rules, it is here to guide you.\n+If you forget to do something, miss something, don't worry, it happens.\n+\n+Do your best and that will already be a lot :).\n+\n+== Merging Pull Requests\n+\n+The first thing is that, while being a committer,\n+you can't really commit directly to the main repository:\n+you need at least one review by your peers.\n+\n+Thus the need for a pull request.\n+\n+So you are more like a merger than a committer\n+and you might merge more PRs from others than your own work.\n+\n+While not absolute, here are some advices:\n+\n+* if you really want a review by a specific person,\n+  make it a named reviewer via a GitHub UI\n+* if someone asked for a specific reviewer, better\n+  give some time for this person to review the PR.\n+  If not reviewed in a reasonable amount of time,\n+  better ping them again to have some information\n+  or ask the original author if we should go ahead.\n+* if in doubt (on a specific part or because you're\n+  not comfortable reviewing documentation or any other reason),\n+  ask for help\n+* except if it's a totally non brainer (typically a typo fix),\n+  let the PR bake a few hours so some other people can have a\n+  look if interested.\n+  If the PR is very large or is a new extension, better let it\n+  bake for a few days.\n+* we do merge commits so please ask the author to properly\n+  squash the commits before merging.\n+  The idea is to have proper semantic commits.\n+  If the author is not familiar with Git or not available,\n+  you can also (carefully) do it for them as soon as you agreed on it.\n+* make sure the commit comments are meaningful\n+* at the beginning, you can start by giving your approval and not merging\n+  and see how things evolve.\n+  This should give you some hints of important things to check in the future.\n+* only merge pull requests that target master.\n+  **Dealing with old branches is a separate process.**\n+* if you are sure a PR should go in and is just waiting for CI,\n+  just use the `triage/waiting-for-ci` label.\n+  It is a good hint for other committers.\n+* if you think a pull request is an essential part of a given milestone\n+  (and can realistically be part of it),\n+  you should affect this milestone to it so that we can be sure it stays on the radar.\n+\n+Obviously, each situation is different so use your own judgement,\n+and if in doubt, just ask for advice, the other committers are here to help.\n+\n+== Pull Request Title\n+\n+The title should be in English, should not contain an issue number.\n+It should also not contain ellipsis.\n+\n+If your commit message was too long and GitHub automatically cut\n+the title, that's helpful if you can take the time to move the cut\n+part where it belongs to have a full title.\n+\n+Titles are included in the Release notes so they are important.\n+\n+A good title would look like: `Fix XXX in Quartz extension` or\n+`Introduce Hibernate Reactive extension`.\n+\n+A bad title would look like: `fix(#444)`.\n+\n+== Issues Fixed\n+\n+When a PR fixes some issues, it's good practice to add it in the description.\n+\n+One issue per line with something like:\n+\n+[source,asciidoc]\n+----\n+* Fix #444\n+* Fix #555\n+----\n+\n+[NOTE]\n+====\n+GitHub won't detect issues properly if you do something like\n+`Fix #444 #555`.\n+====\n+\n+== Affecting Labels and Milestones\n+\n+Affecting labels and milestones is very important in our process.\n+\n+Before each release, we check that we don't have any orphan i.e.\n+closed issues that don't have either a milestone affected or\n+some of the \"excluding\" labels.\n+\n+Thus:\n+\n+* when you merge a pull request, please affect it with the current milestone marked with \"master\".\n+* if the pull request has issues associated (i.e. if the pull request fixes some issues),\n+  you should also affect the milestone assigned to the issues.\n+* if you close a pull request because the committers have decided to not merge it,\n+  please add the appropriate `triage/` label: `triage/invalid`, `triage/out-of-date`,\n+  `triage/wontfix` are usually in order.\n+* if you close an issue because it has been fixed, either add the milestone\n+  if you can find it easily or use the `triage/out-of-date` if you can't.\n+* if you close an issue for any other reason, one of the aforementioned `triage/` labels\n+  is probably adequate.\n+\n+== Backporting Process\n+\n+When we release a new version of Quarkus, we usually do a bugfix\n+release a couple of weeks after.\n+\n+Everytime, we do a release, we create a release branch to host\n+the commits for these bugfix releases.\n+\n+All the pull requests are merged in master so for the new feature \n+release of Quarkus.\n+They won't be integrated in the previous version branch.\n+\n+One of your pull requests might qualify for being backported to this\n+bugfix branch.\n+\n+Good examples of that might be:\n+\n+* bugfixes\n+* documentation fixes\n+* usability fixes\n+\n+Obviously, the barrier is higher for large pull requests as\n+they might be more risky to backport.\n+But sometimes, we just have to backport them anyway.\n+\n+If you think your pull request or the pull request you review might be a good backport candidate,\n+please add the `triage/backport?` label.\n+\n+The question mark is important:\n+it is not automatic and we carefully review each pull request before backporting.\n+\n+Thus, if not entirely clear, don't hesitate to add a comment to the pull request\n+when adding the label.\n+\n+And don't be surprised if we come to you with some questions about it\n+when we prepare the next bugfix release.\n+\n+== Good First Issues\n+\n+We need to find the right balance between fixing the issue right away\n+or try to get a new contributor onboard.", "originalCommit": "f25f99797e84371e59253f6af33e10a45416384c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA2ODA4Mw==", "url": "https://github.com/quarkusio/quarkus/pull/10915#discussion_r459068083", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            It's not always easy to find it but if you think the issue is appropriate,\n          \n          \n            \n            It's not always easy to find one, but if you think the issue is appropriate,", "author": "geoand", "createdAt": "2020-07-22T20:37:27Z", "path": "COMMITTERS.adoc", "diffHunk": "@@ -0,0 +1,173 @@\n+= Information for Quarkus Committers\n+\n+This document contains useful information for Quarkus committers.\n+\n+[NOTE]\n+====\n+It is a work in progress, so if you think information is missing/unclear/inadequate,\n+please reach out to us on the `quarkus-dev` mailing-list.\n+====\n+\n+This document has a lot of information.\n+It is not a set of strict rules, it is here to guide you.\n+If you forget to do something, miss something, don't worry, it happens.\n+\n+Do your best and that will already be a lot :).\n+\n+== Merging Pull Requests\n+\n+The first thing is that, while being a committer,\n+you can't really commit directly to the main repository:\n+you need at least one review by your peers.\n+\n+Thus the need for a pull request.\n+\n+So you are more like a merger than a committer\n+and you might merge more PRs from others than your own work.\n+\n+While not absolute, here are some advices:\n+\n+* if you really want a review by a specific person,\n+  make it a named reviewer via a GitHub UI\n+* if someone asked for a specific reviewer, better\n+  give some time for this person to review the PR.\n+  If not reviewed in a reasonable amount of time,\n+  better ping them again to have some information\n+  or ask the original author if we should go ahead.\n+* if in doubt (on a specific part or because you're\n+  not comfortable reviewing documentation or any other reason),\n+  ask for help\n+* except if it's a totally non brainer (typically a typo fix),\n+  let the PR bake a few hours so some other people can have a\n+  look if interested.\n+  If the PR is very large or is a new extension, better let it\n+  bake for a few days.\n+* we do merge commits so please ask the author to properly\n+  squash the commits before merging.\n+  The idea is to have proper semantic commits.\n+  If the author is not familiar with Git or not available,\n+  you can also (carefully) do it for them as soon as you agreed on it.\n+* make sure the commit comments are meaningful\n+* at the beginning, you can start by giving your approval and not merging\n+  and see how things evolve.\n+  This should give you some hints of important things to check in the future.\n+* only merge pull requests that target master.\n+  **Dealing with old branches is a separate process.**\n+* if you are sure a PR should go in and is just waiting for CI,\n+  just use the `triage/waiting-for-ci` label.\n+  It is a good hint for other committers.\n+* if you think a pull request is an essential part of a given milestone\n+  (and can realistically be part of it),\n+  you should affect this milestone to it so that we can be sure it stays on the radar.\n+\n+Obviously, each situation is different so use your own judgement,\n+and if in doubt, just ask for advice, the other committers are here to help.\n+\n+== Pull Request Title\n+\n+The title should be in English, should not contain an issue number.\n+It should also not contain ellipsis.\n+\n+If your commit message was too long and GitHub automatically cut\n+the title, that's helpful if you can take the time to move the cut\n+part where it belongs to have a full title.\n+\n+Titles are included in the Release notes so they are important.\n+\n+A good title would look like: `Fix XXX in Quartz extension` or\n+`Introduce Hibernate Reactive extension`.\n+\n+A bad title would look like: `fix(#444)`.\n+\n+== Issues Fixed\n+\n+When a PR fixes some issues, it's good practice to add it in the description.\n+\n+One issue per line with something like:\n+\n+[source,asciidoc]\n+----\n+* Fix #444\n+* Fix #555\n+----\n+\n+[NOTE]\n+====\n+GitHub won't detect issues properly if you do something like\n+`Fix #444 #555`.\n+====\n+\n+== Affecting Labels and Milestones\n+\n+Affecting labels and milestones is very important in our process.\n+\n+Before each release, we check that we don't have any orphan i.e.\n+closed issues that don't have either a milestone affected or\n+some of the \"excluding\" labels.\n+\n+Thus:\n+\n+* when you merge a pull request, please affect it with the current milestone marked with \"master\".\n+* if the pull request has issues associated (i.e. if the pull request fixes some issues),\n+  you should also affect the milestone assigned to the issues.\n+* if you close a pull request because the committers have decided to not merge it,\n+  please add the appropriate `triage/` label: `triage/invalid`, `triage/out-of-date`,\n+  `triage/wontfix` are usually in order.\n+* if you close an issue because it has been fixed, either add the milestone\n+  if you can find it easily or use the `triage/out-of-date` if you can't.\n+* if you close an issue for any other reason, one of the aforementioned `triage/` labels\n+  is probably adequate.\n+\n+== Backporting Process\n+\n+When we release a new version of Quarkus, we usually do a bugfix\n+release a couple of weeks after.\n+\n+Everytime, we do a release, we create a release branch to host\n+the commits for these bugfix releases.\n+\n+All the pull requests are merged in master so for the new feature \n+release of Quarkus.\n+They won't be integrated in the previous version branch.\n+\n+One of your pull requests might qualify for being backported to this\n+bugfix branch.\n+\n+Good examples of that might be:\n+\n+* bugfixes\n+* documentation fixes\n+* usability fixes\n+\n+Obviously, the barrier is higher for large pull requests as\n+they might be more risky to backport.\n+But sometimes, we just have to backport them anyway.\n+\n+If you think your pull request or the pull request you review might be a good backport candidate,\n+please add the `triage/backport?` label.\n+\n+The question mark is important:\n+it is not automatic and we carefully review each pull request before backporting.\n+\n+Thus, if not entirely clear, don't hesitate to add a comment to the pull request\n+when adding the label.\n+\n+And don't be surprised if we come to you with some questions about it\n+when we prepare the next bugfix release.\n+\n+== Good First Issues\n+\n+We need to find the right balance between fixing the issue right away\n+or try to get a new contributor onboard.\n+\n+It's not always easy to find it but if you think the issue is appropriate,", "originalCommit": "f25f99797e84371e59253f6af33e10a45416384c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA2ODMxNQ==", "url": "https://github.com/quarkusio/quarkus/pull/10915#discussion_r459068315", "bodyText": "\ud83d\udc4d", "author": "geoand", "createdAt": "2020-07-22T20:37:54Z", "path": "COMMITTERS.adoc", "diffHunk": "@@ -0,0 +1,173 @@\n+= Information for Quarkus Committers\n+\n+This document contains useful information for Quarkus committers.\n+\n+[NOTE]\n+====\n+It is a work in progress, so if you think information is missing/unclear/inadequate,\n+please reach out to us on the `quarkus-dev` mailing-list.\n+====\n+\n+This document has a lot of information.\n+It is not a set of strict rules, it is here to guide you.\n+If you forget to do something, miss something, don't worry, it happens.\n+\n+Do your best and that will already be a lot :).\n+\n+== Merging Pull Requests\n+\n+The first thing is that, while being a committer,\n+you can't really commit directly to the main repository:\n+you need at least one review by your peers.\n+\n+Thus the need for a pull request.\n+\n+So you are more like a merger than a committer\n+and you might merge more PRs from others than your own work.\n+\n+While not absolute, here are some advices:\n+\n+* if you really want a review by a specific person,\n+  make it a named reviewer via a GitHub UI\n+* if someone asked for a specific reviewer, better\n+  give some time for this person to review the PR.\n+  If not reviewed in a reasonable amount of time,\n+  better ping them again to have some information\n+  or ask the original author if we should go ahead.\n+* if in doubt (on a specific part or because you're\n+  not comfortable reviewing documentation or any other reason),\n+  ask for help\n+* except if it's a totally non brainer (typically a typo fix),\n+  let the PR bake a few hours so some other people can have a\n+  look if interested.\n+  If the PR is very large or is a new extension, better let it\n+  bake for a few days.\n+* we do merge commits so please ask the author to properly\n+  squash the commits before merging.\n+  The idea is to have proper semantic commits.\n+  If the author is not familiar with Git or not available,\n+  you can also (carefully) do it for them as soon as you agreed on it.\n+* make sure the commit comments are meaningful\n+* at the beginning, you can start by giving your approval and not merging\n+  and see how things evolve.\n+  This should give you some hints of important things to check in the future.\n+* only merge pull requests that target master.\n+  **Dealing with old branches is a separate process.**\n+* if you are sure a PR should go in and is just waiting for CI,\n+  just use the `triage/waiting-for-ci` label.\n+  It is a good hint for other committers.\n+* if you think a pull request is an essential part of a given milestone\n+  (and can realistically be part of it),\n+  you should affect this milestone to it so that we can be sure it stays on the radar.\n+\n+Obviously, each situation is different so use your own judgement,\n+and if in doubt, just ask for advice, the other committers are here to help.\n+\n+== Pull Request Title\n+\n+The title should be in English, should not contain an issue number.\n+It should also not contain ellipsis.\n+\n+If your commit message was too long and GitHub automatically cut\n+the title, that's helpful if you can take the time to move the cut\n+part where it belongs to have a full title.\n+\n+Titles are included in the Release notes so they are important.\n+\n+A good title would look like: `Fix XXX in Quartz extension` or\n+`Introduce Hibernate Reactive extension`.\n+\n+A bad title would look like: `fix(#444)`.\n+\n+== Issues Fixed\n+\n+When a PR fixes some issues, it's good practice to add it in the description.\n+\n+One issue per line with something like:\n+\n+[source,asciidoc]\n+----\n+* Fix #444\n+* Fix #555\n+----\n+\n+[NOTE]\n+====\n+GitHub won't detect issues properly if you do something like\n+`Fix #444 #555`.\n+====\n+\n+== Affecting Labels and Milestones\n+\n+Affecting labels and milestones is very important in our process.\n+\n+Before each release, we check that we don't have any orphan i.e.\n+closed issues that don't have either a milestone affected or\n+some of the \"excluding\" labels.\n+\n+Thus:\n+\n+* when you merge a pull request, please affect it with the current milestone marked with \"master\".\n+* if the pull request has issues associated (i.e. if the pull request fixes some issues),\n+  you should also affect the milestone assigned to the issues.\n+* if you close a pull request because the committers have decided to not merge it,\n+  please add the appropriate `triage/` label: `triage/invalid`, `triage/out-of-date`,\n+  `triage/wontfix` are usually in order.\n+* if you close an issue because it has been fixed, either add the milestone\n+  if you can find it easily or use the `triage/out-of-date` if you can't.\n+* if you close an issue for any other reason, one of the aforementioned `triage/` labels\n+  is probably adequate.\n+\n+== Backporting Process\n+\n+When we release a new version of Quarkus, we usually do a bugfix\n+release a couple of weeks after.\n+\n+Everytime, we do a release, we create a release branch to host\n+the commits for these bugfix releases.\n+\n+All the pull requests are merged in master so for the new feature \n+release of Quarkus.\n+They won't be integrated in the previous version branch.\n+\n+One of your pull requests might qualify for being backported to this\n+bugfix branch.\n+\n+Good examples of that might be:\n+\n+* bugfixes\n+* documentation fixes\n+* usability fixes\n+\n+Obviously, the barrier is higher for large pull requests as\n+they might be more risky to backport.\n+But sometimes, we just have to backport them anyway.\n+\n+If you think your pull request or the pull request you review might be a good backport candidate,\n+please add the `triage/backport?` label.\n+\n+The question mark is important:\n+it is not automatic and we carefully review each pull request before backporting.\n+\n+Thus, if not entirely clear, don't hesitate to add a comment to the pull request\n+when adding the label.\n+\n+And don't be surprised if we come to you with some questions about it\n+when we prepare the next bugfix release.\n+\n+== Good First Issues\n+\n+We need to find the right balance between fixing the issue right away\n+or try to get a new contributor onboard.\n+\n+It's not always easy to find it but if you think the issue is appropriate,\n+affecting it the `good first issue` label for some time might be a good thing.\n+\n+Obviously, critical bugs are not good candidates :).\n+\n+== I Did Something Wrong, What Should I Do?\n+\n+Take a deep breath and don't worry, it happens.\n+\n+Just ping https://github.com/gsmet/[Guillaume Smet (@gsmet)] and https://github.com/geoand/[Georgios Andrianakis (@geoand)]\n+either in the pull request or on https://quarkusio.zulipchat.com/[our Zulip] and we will find a solution.", "originalCommit": "f25f99797e84371e59253f6af33e10a45416384c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTU0MjEyMA==", "url": "https://github.com/quarkusio/quarkus/pull/10915#discussion_r459542120", "bodyText": "how about we create a @committerhelp (?) group alias to use here instead of specific individuals ? like we done for devtools, and others.", "author": "maxandersen", "createdAt": "2020-07-23T15:36:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA2ODMxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTU1NDgyOA==", "url": "https://github.com/quarkusio/quarkus/pull/10915#discussion_r459554828", "bodyText": "We could have an alias. TBH, my fear was that people could get worried of looking dumb or something like that. Thus limiting the number of persons would help. You know your mistake won't be seen by 20 persons.\nBut I can live with an alias if others think I'm overthinking it.", "author": "gsmet", "createdAt": "2020-07-23T15:54:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA2ODMxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTU1NzEyNg==", "url": "https://github.com/quarkusio/quarkus/pull/10915#discussion_r459557126", "bodyText": "+1 on a group", "author": "gastaldi", "createdAt": "2020-07-23T15:57:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA2ODMxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTYzMTUwNw==", "url": "https://github.com/quarkusio/quarkus/pull/10915#discussion_r459631507", "bodyText": "I don't mind either way. It's going to be a very limited group one way or another", "author": "geoand", "createdAt": "2020-07-23T18:02:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA2ODMxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDAxNjQxMQ==", "url": "https://github.com/quarkusio/quarkus/pull/10915#discussion_r460016411", "bodyText": "@quarkusio/committerhelp now exist both on github and zulip; members being gsmet and geoand at this time.", "author": "maxandersen", "createdAt": "2020-07-24T12:16:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTA2ODMxNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE1NTA4MQ==", "url": "https://github.com/quarkusio/quarkus/pull/10915#discussion_r459155081", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * if you really want a review by a specific person,\n          \n          \n            \n            * If you really want a review by a specific person,", "author": "stuartwdouglas", "createdAt": "2020-07-23T00:23:02Z", "path": "COMMITTERS.adoc", "diffHunk": "@@ -0,0 +1,173 @@\n+= Information for Quarkus Committers\n+\n+This document contains useful information for Quarkus committers.\n+\n+[NOTE]\n+====\n+It is a work in progress, so if you think information is missing/unclear/inadequate,\n+please reach out to us on the `quarkus-dev` mailing-list.\n+====\n+\n+This document has a lot of information.\n+It is not a set of strict rules, it is here to guide you.\n+If you forget to do something, miss something, don't worry, it happens.\n+\n+Do your best and that will already be a lot :).\n+\n+== Merging Pull Requests\n+\n+The first thing is that, while being a committer,\n+you can't really commit directly to the main repository:\n+you need at least one review by your peers.\n+\n+Thus the need for a pull request.\n+\n+So you are more like a merger than a committer\n+and you might merge more PRs from others than your own work.\n+\n+While not absolute, here are some advices:\n+\n+* if you really want a review by a specific person,", "originalCommit": "f25f99797e84371e59253f6af33e10a45416384c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE1NTExOQ==", "url": "https://github.com/quarkusio/quarkus/pull/10915#discussion_r459155119", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * if someone asked for a specific reviewer, better\n          \n          \n            \n            * If someone asked for a specific reviewer, better", "author": "stuartwdouglas", "createdAt": "2020-07-23T00:23:14Z", "path": "COMMITTERS.adoc", "diffHunk": "@@ -0,0 +1,173 @@\n+= Information for Quarkus Committers\n+\n+This document contains useful information for Quarkus committers.\n+\n+[NOTE]\n+====\n+It is a work in progress, so if you think information is missing/unclear/inadequate,\n+please reach out to us on the `quarkus-dev` mailing-list.\n+====\n+\n+This document has a lot of information.\n+It is not a set of strict rules, it is here to guide you.\n+If you forget to do something, miss something, don't worry, it happens.\n+\n+Do your best and that will already be a lot :).\n+\n+== Merging Pull Requests\n+\n+The first thing is that, while being a committer,\n+you can't really commit directly to the main repository:\n+you need at least one review by your peers.\n+\n+Thus the need for a pull request.\n+\n+So you are more like a merger than a committer\n+and you might merge more PRs from others than your own work.\n+\n+While not absolute, here are some advices:\n+\n+* if you really want a review by a specific person,\n+  make it a named reviewer via a GitHub UI\n+* if someone asked for a specific reviewer, better", "originalCommit": "f25f99797e84371e59253f6af33e10a45416384c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE1NTE4MQ==", "url": "https://github.com/quarkusio/quarkus/pull/10915#discussion_r459155181", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * if in doubt (on a specific part or because you're\n          \n          \n            \n            * If in doubt (on a specific part or because you're", "author": "stuartwdouglas", "createdAt": "2020-07-23T00:23:26Z", "path": "COMMITTERS.adoc", "diffHunk": "@@ -0,0 +1,173 @@\n+= Information for Quarkus Committers\n+\n+This document contains useful information for Quarkus committers.\n+\n+[NOTE]\n+====\n+It is a work in progress, so if you think information is missing/unclear/inadequate,\n+please reach out to us on the `quarkus-dev` mailing-list.\n+====\n+\n+This document has a lot of information.\n+It is not a set of strict rules, it is here to guide you.\n+If you forget to do something, miss something, don't worry, it happens.\n+\n+Do your best and that will already be a lot :).\n+\n+== Merging Pull Requests\n+\n+The first thing is that, while being a committer,\n+you can't really commit directly to the main repository:\n+you need at least one review by your peers.\n+\n+Thus the need for a pull request.\n+\n+So you are more like a merger than a committer\n+and you might merge more PRs from others than your own work.\n+\n+While not absolute, here are some advices:\n+\n+* if you really want a review by a specific person,\n+  make it a named reviewer via a GitHub UI\n+* if someone asked for a specific reviewer, better\n+  give some time for this person to review the PR.\n+  If not reviewed in a reasonable amount of time,\n+  better ping them again to have some information\n+  or ask the original author if we should go ahead.\n+* if in doubt (on a specific part or because you're", "originalCommit": "f25f99797e84371e59253f6af33e10a45416384c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE1NTQ4MA==", "url": "https://github.com/quarkusio/quarkus/pull/10915#discussion_r459155480", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * except if it's a totally non brainer (typically a typo fix),\n          \n          \n            \n            * Except if it's a totally no-brainer (typically a typo fix),", "author": "stuartwdouglas", "createdAt": "2020-07-23T00:24:37Z", "path": "COMMITTERS.adoc", "diffHunk": "@@ -0,0 +1,173 @@\n+= Information for Quarkus Committers\n+\n+This document contains useful information for Quarkus committers.\n+\n+[NOTE]\n+====\n+It is a work in progress, so if you think information is missing/unclear/inadequate,\n+please reach out to us on the `quarkus-dev` mailing-list.\n+====\n+\n+This document has a lot of information.\n+It is not a set of strict rules, it is here to guide you.\n+If you forget to do something, miss something, don't worry, it happens.\n+\n+Do your best and that will already be a lot :).\n+\n+== Merging Pull Requests\n+\n+The first thing is that, while being a committer,\n+you can't really commit directly to the main repository:\n+you need at least one review by your peers.\n+\n+Thus the need for a pull request.\n+\n+So you are more like a merger than a committer\n+and you might merge more PRs from others than your own work.\n+\n+While not absolute, here are some advices:\n+\n+* if you really want a review by a specific person,\n+  make it a named reviewer via a GitHub UI\n+* if someone asked for a specific reviewer, better\n+  give some time for this person to review the PR.\n+  If not reviewed in a reasonable amount of time,\n+  better ping them again to have some information\n+  or ask the original author if we should go ahead.\n+* if in doubt (on a specific part or because you're\n+  not comfortable reviewing documentation or any other reason),\n+  ask for help\n+* except if it's a totally non brainer (typically a typo fix),", "originalCommit": "f25f99797e84371e59253f6af33e10a45416384c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE1NTUyNQ==", "url": "https://github.com/quarkusio/quarkus/pull/10915#discussion_r459155525", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * we do merge commits so please ask the author to properly\n          \n          \n            \n            * We do merge commits so please ask the author to properly", "author": "stuartwdouglas", "createdAt": "2020-07-23T00:24:49Z", "path": "COMMITTERS.adoc", "diffHunk": "@@ -0,0 +1,173 @@\n+= Information for Quarkus Committers\n+\n+This document contains useful information for Quarkus committers.\n+\n+[NOTE]\n+====\n+It is a work in progress, so if you think information is missing/unclear/inadequate,\n+please reach out to us on the `quarkus-dev` mailing-list.\n+====\n+\n+This document has a lot of information.\n+It is not a set of strict rules, it is here to guide you.\n+If you forget to do something, miss something, don't worry, it happens.\n+\n+Do your best and that will already be a lot :).\n+\n+== Merging Pull Requests\n+\n+The first thing is that, while being a committer,\n+you can't really commit directly to the main repository:\n+you need at least one review by your peers.\n+\n+Thus the need for a pull request.\n+\n+So you are more like a merger than a committer\n+and you might merge more PRs from others than your own work.\n+\n+While not absolute, here are some advices:\n+\n+* if you really want a review by a specific person,\n+  make it a named reviewer via a GitHub UI\n+* if someone asked for a specific reviewer, better\n+  give some time for this person to review the PR.\n+  If not reviewed in a reasonable amount of time,\n+  better ping them again to have some information\n+  or ask the original author if we should go ahead.\n+* if in doubt (on a specific part or because you're\n+  not comfortable reviewing documentation or any other reason),\n+  ask for help\n+* except if it's a totally non brainer (typically a typo fix),\n+  let the PR bake a few hours so some other people can have a\n+  look if interested.\n+  If the PR is very large or is a new extension, better let it\n+  bake for a few days.\n+* we do merge commits so please ask the author to properly", "originalCommit": "f25f99797e84371e59253f6af33e10a45416384c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE1NTYyOA==", "url": "https://github.com/quarkusio/quarkus/pull/10915#discussion_r459155628", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * only merge pull requests that target master.\n          \n          \n            \n            * Only merge pull requests that target master.", "author": "stuartwdouglas", "createdAt": "2020-07-23T00:25:07Z", "path": "COMMITTERS.adoc", "diffHunk": "@@ -0,0 +1,173 @@\n+= Information for Quarkus Committers\n+\n+This document contains useful information for Quarkus committers.\n+\n+[NOTE]\n+====\n+It is a work in progress, so if you think information is missing/unclear/inadequate,\n+please reach out to us on the `quarkus-dev` mailing-list.\n+====\n+\n+This document has a lot of information.\n+It is not a set of strict rules, it is here to guide you.\n+If you forget to do something, miss something, don't worry, it happens.\n+\n+Do your best and that will already be a lot :).\n+\n+== Merging Pull Requests\n+\n+The first thing is that, while being a committer,\n+you can't really commit directly to the main repository:\n+you need at least one review by your peers.\n+\n+Thus the need for a pull request.\n+\n+So you are more like a merger than a committer\n+and you might merge more PRs from others than your own work.\n+\n+While not absolute, here are some advices:\n+\n+* if you really want a review by a specific person,\n+  make it a named reviewer via a GitHub UI\n+* if someone asked for a specific reviewer, better\n+  give some time for this person to review the PR.\n+  If not reviewed in a reasonable amount of time,\n+  better ping them again to have some information\n+  or ask the original author if we should go ahead.\n+* if in doubt (on a specific part or because you're\n+  not comfortable reviewing documentation or any other reason),\n+  ask for help\n+* except if it's a totally non brainer (typically a typo fix),\n+  let the PR bake a few hours so some other people can have a\n+  look if interested.\n+  If the PR is very large or is a new extension, better let it\n+  bake for a few days.\n+* we do merge commits so please ask the author to properly\n+  squash the commits before merging.\n+  The idea is to have proper semantic commits.\n+  If the author is not familiar with Git or not available,\n+  you can also (carefully) do it for them as soon as you agreed on it.\n+* make sure the commit comments are meaningful\n+* at the beginning, you can start by giving your approval and not merging\n+  and see how things evolve.\n+  This should give you some hints of important things to check in the future.\n+* only merge pull requests that target master.", "originalCommit": "f25f99797e84371e59253f6af33e10a45416384c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE1NTc1MQ==", "url": "https://github.com/quarkusio/quarkus/pull/10915#discussion_r459155751", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * make sure the commit comments are meaningful\n          \n          \n            \n            * Make sure the commit comments are meaningful.", "author": "stuartwdouglas", "createdAt": "2020-07-23T00:25:32Z", "path": "COMMITTERS.adoc", "diffHunk": "@@ -0,0 +1,173 @@\n+= Information for Quarkus Committers\n+\n+This document contains useful information for Quarkus committers.\n+\n+[NOTE]\n+====\n+It is a work in progress, so if you think information is missing/unclear/inadequate,\n+please reach out to us on the `quarkus-dev` mailing-list.\n+====\n+\n+This document has a lot of information.\n+It is not a set of strict rules, it is here to guide you.\n+If you forget to do something, miss something, don't worry, it happens.\n+\n+Do your best and that will already be a lot :).\n+\n+== Merging Pull Requests\n+\n+The first thing is that, while being a committer,\n+you can't really commit directly to the main repository:\n+you need at least one review by your peers.\n+\n+Thus the need for a pull request.\n+\n+So you are more like a merger than a committer\n+and you might merge more PRs from others than your own work.\n+\n+While not absolute, here are some advices:\n+\n+* if you really want a review by a specific person,\n+  make it a named reviewer via a GitHub UI\n+* if someone asked for a specific reviewer, better\n+  give some time for this person to review the PR.\n+  If not reviewed in a reasonable amount of time,\n+  better ping them again to have some information\n+  or ask the original author if we should go ahead.\n+* if in doubt (on a specific part or because you're\n+  not comfortable reviewing documentation or any other reason),\n+  ask for help\n+* except if it's a totally non brainer (typically a typo fix),\n+  let the PR bake a few hours so some other people can have a\n+  look if interested.\n+  If the PR is very large or is a new extension, better let it\n+  bake for a few days.\n+* we do merge commits so please ask the author to properly\n+  squash the commits before merging.\n+  The idea is to have proper semantic commits.\n+  If the author is not familiar with Git or not available,\n+  you can also (carefully) do it for them as soon as you agreed on it.\n+* make sure the commit comments are meaningful", "originalCommit": "f25f99797e84371e59253f6af33e10a45416384c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE1NTg4OA==", "url": "https://github.com/quarkusio/quarkus/pull/10915#discussion_r459155888", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * at the beginning, you can start by giving your approval and not merging\n          \n          \n            \n            * As a new committer, you can start by giving your approval and not merging", "author": "stuartwdouglas", "createdAt": "2020-07-23T00:26:02Z", "path": "COMMITTERS.adoc", "diffHunk": "@@ -0,0 +1,173 @@\n+= Information for Quarkus Committers\n+\n+This document contains useful information for Quarkus committers.\n+\n+[NOTE]\n+====\n+It is a work in progress, so if you think information is missing/unclear/inadequate,\n+please reach out to us on the `quarkus-dev` mailing-list.\n+====\n+\n+This document has a lot of information.\n+It is not a set of strict rules, it is here to guide you.\n+If you forget to do something, miss something, don't worry, it happens.\n+\n+Do your best and that will already be a lot :).\n+\n+== Merging Pull Requests\n+\n+The first thing is that, while being a committer,\n+you can't really commit directly to the main repository:\n+you need at least one review by your peers.\n+\n+Thus the need for a pull request.\n+\n+So you are more like a merger than a committer\n+and you might merge more PRs from others than your own work.\n+\n+While not absolute, here are some advices:\n+\n+* if you really want a review by a specific person,\n+  make it a named reviewer via a GitHub UI\n+* if someone asked for a specific reviewer, better\n+  give some time for this person to review the PR.\n+  If not reviewed in a reasonable amount of time,\n+  better ping them again to have some information\n+  or ask the original author if we should go ahead.\n+* if in doubt (on a specific part or because you're\n+  not comfortable reviewing documentation or any other reason),\n+  ask for help\n+* except if it's a totally non brainer (typically a typo fix),\n+  let the PR bake a few hours so some other people can have a\n+  look if interested.\n+  If the PR is very large or is a new extension, better let it\n+  bake for a few days.\n+* we do merge commits so please ask the author to properly\n+  squash the commits before merging.\n+  The idea is to have proper semantic commits.\n+  If the author is not familiar with Git or not available,\n+  you can also (carefully) do it for them as soon as you agreed on it.\n+* make sure the commit comments are meaningful\n+* at the beginning, you can start by giving your approval and not merging", "originalCommit": "f25f99797e84371e59253f6af33e10a45416384c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE1NTk1OA==", "url": "https://github.com/quarkusio/quarkus/pull/10915#discussion_r459155958", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * if you are sure a PR should go in and is just waiting for CI,\n          \n          \n            \n            * If you are sure a PR should go in and is just waiting for CI,", "author": "stuartwdouglas", "createdAt": "2020-07-23T00:26:20Z", "path": "COMMITTERS.adoc", "diffHunk": "@@ -0,0 +1,173 @@\n+= Information for Quarkus Committers\n+\n+This document contains useful information for Quarkus committers.\n+\n+[NOTE]\n+====\n+It is a work in progress, so if you think information is missing/unclear/inadequate,\n+please reach out to us on the `quarkus-dev` mailing-list.\n+====\n+\n+This document has a lot of information.\n+It is not a set of strict rules, it is here to guide you.\n+If you forget to do something, miss something, don't worry, it happens.\n+\n+Do your best and that will already be a lot :).\n+\n+== Merging Pull Requests\n+\n+The first thing is that, while being a committer,\n+you can't really commit directly to the main repository:\n+you need at least one review by your peers.\n+\n+Thus the need for a pull request.\n+\n+So you are more like a merger than a committer\n+and you might merge more PRs from others than your own work.\n+\n+While not absolute, here are some advices:\n+\n+* if you really want a review by a specific person,\n+  make it a named reviewer via a GitHub UI\n+* if someone asked for a specific reviewer, better\n+  give some time for this person to review the PR.\n+  If not reviewed in a reasonable amount of time,\n+  better ping them again to have some information\n+  or ask the original author if we should go ahead.\n+* if in doubt (on a specific part or because you're\n+  not comfortable reviewing documentation or any other reason),\n+  ask for help\n+* except if it's a totally non brainer (typically a typo fix),\n+  let the PR bake a few hours so some other people can have a\n+  look if interested.\n+  If the PR is very large or is a new extension, better let it\n+  bake for a few days.\n+* we do merge commits so please ask the author to properly\n+  squash the commits before merging.\n+  The idea is to have proper semantic commits.\n+  If the author is not familiar with Git or not available,\n+  you can also (carefully) do it for them as soon as you agreed on it.\n+* make sure the commit comments are meaningful\n+* at the beginning, you can start by giving your approval and not merging\n+  and see how things evolve.\n+  This should give you some hints of important things to check in the future.\n+* only merge pull requests that target master.\n+  **Dealing with old branches is a separate process.**\n+* if you are sure a PR should go in and is just waiting for CI,", "originalCommit": "f25f99797e84371e59253f6af33e10a45416384c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE1NjAxMw==", "url": "https://github.com/quarkusio/quarkus/pull/10915#discussion_r459156013", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * if you think a pull request is an essential part of a given milestone\n          \n          \n            \n            * If you think a pull request is an essential part of a given milestone", "author": "stuartwdouglas", "createdAt": "2020-07-23T00:26:35Z", "path": "COMMITTERS.adoc", "diffHunk": "@@ -0,0 +1,173 @@\n+= Information for Quarkus Committers\n+\n+This document contains useful information for Quarkus committers.\n+\n+[NOTE]\n+====\n+It is a work in progress, so if you think information is missing/unclear/inadequate,\n+please reach out to us on the `quarkus-dev` mailing-list.\n+====\n+\n+This document has a lot of information.\n+It is not a set of strict rules, it is here to guide you.\n+If you forget to do something, miss something, don't worry, it happens.\n+\n+Do your best and that will already be a lot :).\n+\n+== Merging Pull Requests\n+\n+The first thing is that, while being a committer,\n+you can't really commit directly to the main repository:\n+you need at least one review by your peers.\n+\n+Thus the need for a pull request.\n+\n+So you are more like a merger than a committer\n+and you might merge more PRs from others than your own work.\n+\n+While not absolute, here are some advices:\n+\n+* if you really want a review by a specific person,\n+  make it a named reviewer via a GitHub UI\n+* if someone asked for a specific reviewer, better\n+  give some time for this person to review the PR.\n+  If not reviewed in a reasonable amount of time,\n+  better ping them again to have some information\n+  or ask the original author if we should go ahead.\n+* if in doubt (on a specific part or because you're\n+  not comfortable reviewing documentation or any other reason),\n+  ask for help\n+* except if it's a totally non brainer (typically a typo fix),\n+  let the PR bake a few hours so some other people can have a\n+  look if interested.\n+  If the PR is very large or is a new extension, better let it\n+  bake for a few days.\n+* we do merge commits so please ask the author to properly\n+  squash the commits before merging.\n+  The idea is to have proper semantic commits.\n+  If the author is not familiar with Git or not available,\n+  you can also (carefully) do it for them as soon as you agreed on it.\n+* make sure the commit comments are meaningful\n+* at the beginning, you can start by giving your approval and not merging\n+  and see how things evolve.\n+  This should give you some hints of important things to check in the future.\n+* only merge pull requests that target master.\n+  **Dealing with old branches is a separate process.**\n+* if you are sure a PR should go in and is just waiting for CI,\n+  just use the `triage/waiting-for-ci` label.\n+  It is a good hint for other committers.\n+* if you think a pull request is an essential part of a given milestone", "originalCommit": "f25f99797e84371e59253f6af33e10a45416384c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE1NjIzMQ==", "url": "https://github.com/quarkusio/quarkus/pull/10915#discussion_r459156231", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * when you merge a pull request, please affect it with the current milestone marked with \"master\".\n          \n          \n            \n            * When you merge a pull request, please affect it with the current milestone marked with \"master\".", "author": "stuartwdouglas", "createdAt": "2020-07-23T00:27:19Z", "path": "COMMITTERS.adoc", "diffHunk": "@@ -0,0 +1,173 @@\n+= Information for Quarkus Committers\n+\n+This document contains useful information for Quarkus committers.\n+\n+[NOTE]\n+====\n+It is a work in progress, so if you think information is missing/unclear/inadequate,\n+please reach out to us on the `quarkus-dev` mailing-list.\n+====\n+\n+This document has a lot of information.\n+It is not a set of strict rules, it is here to guide you.\n+If you forget to do something, miss something, don't worry, it happens.\n+\n+Do your best and that will already be a lot :).\n+\n+== Merging Pull Requests\n+\n+The first thing is that, while being a committer,\n+you can't really commit directly to the main repository:\n+you need at least one review by your peers.\n+\n+Thus the need for a pull request.\n+\n+So you are more like a merger than a committer\n+and you might merge more PRs from others than your own work.\n+\n+While not absolute, here are some advices:\n+\n+* if you really want a review by a specific person,\n+  make it a named reviewer via a GitHub UI\n+* if someone asked for a specific reviewer, better\n+  give some time for this person to review the PR.\n+  If not reviewed in a reasonable amount of time,\n+  better ping them again to have some information\n+  or ask the original author if we should go ahead.\n+* if in doubt (on a specific part or because you're\n+  not comfortable reviewing documentation or any other reason),\n+  ask for help\n+* except if it's a totally non brainer (typically a typo fix),\n+  let the PR bake a few hours so some other people can have a\n+  look if interested.\n+  If the PR is very large or is a new extension, better let it\n+  bake for a few days.\n+* we do merge commits so please ask the author to properly\n+  squash the commits before merging.\n+  The idea is to have proper semantic commits.\n+  If the author is not familiar with Git or not available,\n+  you can also (carefully) do it for them as soon as you agreed on it.\n+* make sure the commit comments are meaningful\n+* at the beginning, you can start by giving your approval and not merging\n+  and see how things evolve.\n+  This should give you some hints of important things to check in the future.\n+* only merge pull requests that target master.\n+  **Dealing with old branches is a separate process.**\n+* if you are sure a PR should go in and is just waiting for CI,\n+  just use the `triage/waiting-for-ci` label.\n+  It is a good hint for other committers.\n+* if you think a pull request is an essential part of a given milestone\n+  (and can realistically be part of it),\n+  you should affect this milestone to it so that we can be sure it stays on the radar.\n+\n+Obviously, each situation is different so use your own judgement,\n+and if in doubt, just ask for advice, the other committers are here to help.\n+\n+== Pull Request Title\n+\n+The title should be in English, should not contain an issue number.\n+It should also not contain ellipsis.\n+\n+If your commit message was too long and GitHub automatically cut\n+the title, that's helpful if you can take the time to move the cut\n+part where it belongs to have a full title.\n+\n+Titles are included in the Release notes so they are important.\n+\n+A good title would look like: `Fix XXX in Quartz extension` or\n+`Introduce Hibernate Reactive extension`.\n+\n+A bad title would look like: `fix(#444)`.\n+\n+== Issues Fixed\n+\n+When a PR fixes some issues, it's good practice to add it in the description.\n+\n+One issue per line with something like:\n+\n+[source,asciidoc]\n+----\n+* Fix #444\n+* Fix #555\n+----\n+\n+[NOTE]\n+====\n+GitHub won't detect issues properly if you do something like\n+`Fix #444 #555`.\n+====\n+\n+== Affecting Labels and Milestones\n+\n+Affecting labels and milestones is very important in our process.\n+\n+Before each release, we check that we don't have any orphan i.e.\n+closed issues that don't have either a milestone affected or\n+some of the \"excluding\" labels.\n+\n+Thus:\n+\n+* when you merge a pull request, please affect it with the current milestone marked with \"master\".", "originalCommit": "f25f99797e84371e59253f6af33e10a45416384c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE1NjI1OQ==", "url": "https://github.com/quarkusio/quarkus/pull/10915#discussion_r459156259", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * if the pull request has issues associated (i.e. if the pull request fixes some issues),\n          \n          \n            \n            * If the pull request has issues associated (i.e. if the pull request fixes some issues),", "author": "stuartwdouglas", "createdAt": "2020-07-23T00:27:30Z", "path": "COMMITTERS.adoc", "diffHunk": "@@ -0,0 +1,173 @@\n+= Information for Quarkus Committers\n+\n+This document contains useful information for Quarkus committers.\n+\n+[NOTE]\n+====\n+It is a work in progress, so if you think information is missing/unclear/inadequate,\n+please reach out to us on the `quarkus-dev` mailing-list.\n+====\n+\n+This document has a lot of information.\n+It is not a set of strict rules, it is here to guide you.\n+If you forget to do something, miss something, don't worry, it happens.\n+\n+Do your best and that will already be a lot :).\n+\n+== Merging Pull Requests\n+\n+The first thing is that, while being a committer,\n+you can't really commit directly to the main repository:\n+you need at least one review by your peers.\n+\n+Thus the need for a pull request.\n+\n+So you are more like a merger than a committer\n+and you might merge more PRs from others than your own work.\n+\n+While not absolute, here are some advices:\n+\n+* if you really want a review by a specific person,\n+  make it a named reviewer via a GitHub UI\n+* if someone asked for a specific reviewer, better\n+  give some time for this person to review the PR.\n+  If not reviewed in a reasonable amount of time,\n+  better ping them again to have some information\n+  or ask the original author if we should go ahead.\n+* if in doubt (on a specific part or because you're\n+  not comfortable reviewing documentation or any other reason),\n+  ask for help\n+* except if it's a totally non brainer (typically a typo fix),\n+  let the PR bake a few hours so some other people can have a\n+  look if interested.\n+  If the PR is very large or is a new extension, better let it\n+  bake for a few days.\n+* we do merge commits so please ask the author to properly\n+  squash the commits before merging.\n+  The idea is to have proper semantic commits.\n+  If the author is not familiar with Git or not available,\n+  you can also (carefully) do it for them as soon as you agreed on it.\n+* make sure the commit comments are meaningful\n+* at the beginning, you can start by giving your approval and not merging\n+  and see how things evolve.\n+  This should give you some hints of important things to check in the future.\n+* only merge pull requests that target master.\n+  **Dealing with old branches is a separate process.**\n+* if you are sure a PR should go in and is just waiting for CI,\n+  just use the `triage/waiting-for-ci` label.\n+  It is a good hint for other committers.\n+* if you think a pull request is an essential part of a given milestone\n+  (and can realistically be part of it),\n+  you should affect this milestone to it so that we can be sure it stays on the radar.\n+\n+Obviously, each situation is different so use your own judgement,\n+and if in doubt, just ask for advice, the other committers are here to help.\n+\n+== Pull Request Title\n+\n+The title should be in English, should not contain an issue number.\n+It should also not contain ellipsis.\n+\n+If your commit message was too long and GitHub automatically cut\n+the title, that's helpful if you can take the time to move the cut\n+part where it belongs to have a full title.\n+\n+Titles are included in the Release notes so they are important.\n+\n+A good title would look like: `Fix XXX in Quartz extension` or\n+`Introduce Hibernate Reactive extension`.\n+\n+A bad title would look like: `fix(#444)`.\n+\n+== Issues Fixed\n+\n+When a PR fixes some issues, it's good practice to add it in the description.\n+\n+One issue per line with something like:\n+\n+[source,asciidoc]\n+----\n+* Fix #444\n+* Fix #555\n+----\n+\n+[NOTE]\n+====\n+GitHub won't detect issues properly if you do something like\n+`Fix #444 #555`.\n+====\n+\n+== Affecting Labels and Milestones\n+\n+Affecting labels and milestones is very important in our process.\n+\n+Before each release, we check that we don't have any orphan i.e.\n+closed issues that don't have either a milestone affected or\n+some of the \"excluding\" labels.\n+\n+Thus:\n+\n+* when you merge a pull request, please affect it with the current milestone marked with \"master\".\n+* if the pull request has issues associated (i.e. if the pull request fixes some issues),", "originalCommit": "f25f99797e84371e59253f6af33e10a45416384c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE1NjMxMg==", "url": "https://github.com/quarkusio/quarkus/pull/10915#discussion_r459156312", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * if you close a pull request because the committers have decided to not merge it,\n          \n          \n            \n            * If you close a pull request because the committers have decided to not merge it,", "author": "stuartwdouglas", "createdAt": "2020-07-23T00:27:45Z", "path": "COMMITTERS.adoc", "diffHunk": "@@ -0,0 +1,173 @@\n+= Information for Quarkus Committers\n+\n+This document contains useful information for Quarkus committers.\n+\n+[NOTE]\n+====\n+It is a work in progress, so if you think information is missing/unclear/inadequate,\n+please reach out to us on the `quarkus-dev` mailing-list.\n+====\n+\n+This document has a lot of information.\n+It is not a set of strict rules, it is here to guide you.\n+If you forget to do something, miss something, don't worry, it happens.\n+\n+Do your best and that will already be a lot :).\n+\n+== Merging Pull Requests\n+\n+The first thing is that, while being a committer,\n+you can't really commit directly to the main repository:\n+you need at least one review by your peers.\n+\n+Thus the need for a pull request.\n+\n+So you are more like a merger than a committer\n+and you might merge more PRs from others than your own work.\n+\n+While not absolute, here are some advices:\n+\n+* if you really want a review by a specific person,\n+  make it a named reviewer via a GitHub UI\n+* if someone asked for a specific reviewer, better\n+  give some time for this person to review the PR.\n+  If not reviewed in a reasonable amount of time,\n+  better ping them again to have some information\n+  or ask the original author if we should go ahead.\n+* if in doubt (on a specific part or because you're\n+  not comfortable reviewing documentation or any other reason),\n+  ask for help\n+* except if it's a totally non brainer (typically a typo fix),\n+  let the PR bake a few hours so some other people can have a\n+  look if interested.\n+  If the PR is very large or is a new extension, better let it\n+  bake for a few days.\n+* we do merge commits so please ask the author to properly\n+  squash the commits before merging.\n+  The idea is to have proper semantic commits.\n+  If the author is not familiar with Git or not available,\n+  you can also (carefully) do it for them as soon as you agreed on it.\n+* make sure the commit comments are meaningful\n+* at the beginning, you can start by giving your approval and not merging\n+  and see how things evolve.\n+  This should give you some hints of important things to check in the future.\n+* only merge pull requests that target master.\n+  **Dealing with old branches is a separate process.**\n+* if you are sure a PR should go in and is just waiting for CI,\n+  just use the `triage/waiting-for-ci` label.\n+  It is a good hint for other committers.\n+* if you think a pull request is an essential part of a given milestone\n+  (and can realistically be part of it),\n+  you should affect this milestone to it so that we can be sure it stays on the radar.\n+\n+Obviously, each situation is different so use your own judgement,\n+and if in doubt, just ask for advice, the other committers are here to help.\n+\n+== Pull Request Title\n+\n+The title should be in English, should not contain an issue number.\n+It should also not contain ellipsis.\n+\n+If your commit message was too long and GitHub automatically cut\n+the title, that's helpful if you can take the time to move the cut\n+part where it belongs to have a full title.\n+\n+Titles are included in the Release notes so they are important.\n+\n+A good title would look like: `Fix XXX in Quartz extension` or\n+`Introduce Hibernate Reactive extension`.\n+\n+A bad title would look like: `fix(#444)`.\n+\n+== Issues Fixed\n+\n+When a PR fixes some issues, it's good practice to add it in the description.\n+\n+One issue per line with something like:\n+\n+[source,asciidoc]\n+----\n+* Fix #444\n+* Fix #555\n+----\n+\n+[NOTE]\n+====\n+GitHub won't detect issues properly if you do something like\n+`Fix #444 #555`.\n+====\n+\n+== Affecting Labels and Milestones\n+\n+Affecting labels and milestones is very important in our process.\n+\n+Before each release, we check that we don't have any orphan i.e.\n+closed issues that don't have either a milestone affected or\n+some of the \"excluding\" labels.\n+\n+Thus:\n+\n+* when you merge a pull request, please affect it with the current milestone marked with \"master\".\n+* if the pull request has issues associated (i.e. if the pull request fixes some issues),\n+  you should also affect the milestone assigned to the issues.\n+* if you close a pull request because the committers have decided to not merge it,", "originalCommit": "f25f99797e84371e59253f6af33e10a45416384c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE1NjM2MA==", "url": "https://github.com/quarkusio/quarkus/pull/10915#discussion_r459156360", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * if you close an issue because it has been fixed, either add the milestone\n          \n          \n            \n            * If you close an issue because it has been fixed, either add the milestone", "author": "stuartwdouglas", "createdAt": "2020-07-23T00:27:55Z", "path": "COMMITTERS.adoc", "diffHunk": "@@ -0,0 +1,173 @@\n+= Information for Quarkus Committers\n+\n+This document contains useful information for Quarkus committers.\n+\n+[NOTE]\n+====\n+It is a work in progress, so if you think information is missing/unclear/inadequate,\n+please reach out to us on the `quarkus-dev` mailing-list.\n+====\n+\n+This document has a lot of information.\n+It is not a set of strict rules, it is here to guide you.\n+If you forget to do something, miss something, don't worry, it happens.\n+\n+Do your best and that will already be a lot :).\n+\n+== Merging Pull Requests\n+\n+The first thing is that, while being a committer,\n+you can't really commit directly to the main repository:\n+you need at least one review by your peers.\n+\n+Thus the need for a pull request.\n+\n+So you are more like a merger than a committer\n+and you might merge more PRs from others than your own work.\n+\n+While not absolute, here are some advices:\n+\n+* if you really want a review by a specific person,\n+  make it a named reviewer via a GitHub UI\n+* if someone asked for a specific reviewer, better\n+  give some time for this person to review the PR.\n+  If not reviewed in a reasonable amount of time,\n+  better ping them again to have some information\n+  or ask the original author if we should go ahead.\n+* if in doubt (on a specific part or because you're\n+  not comfortable reviewing documentation or any other reason),\n+  ask for help\n+* except if it's a totally non brainer (typically a typo fix),\n+  let the PR bake a few hours so some other people can have a\n+  look if interested.\n+  If the PR is very large or is a new extension, better let it\n+  bake for a few days.\n+* we do merge commits so please ask the author to properly\n+  squash the commits before merging.\n+  The idea is to have proper semantic commits.\n+  If the author is not familiar with Git or not available,\n+  you can also (carefully) do it for them as soon as you agreed on it.\n+* make sure the commit comments are meaningful\n+* at the beginning, you can start by giving your approval and not merging\n+  and see how things evolve.\n+  This should give you some hints of important things to check in the future.\n+* only merge pull requests that target master.\n+  **Dealing with old branches is a separate process.**\n+* if you are sure a PR should go in and is just waiting for CI,\n+  just use the `triage/waiting-for-ci` label.\n+  It is a good hint for other committers.\n+* if you think a pull request is an essential part of a given milestone\n+  (and can realistically be part of it),\n+  you should affect this milestone to it so that we can be sure it stays on the radar.\n+\n+Obviously, each situation is different so use your own judgement,\n+and if in doubt, just ask for advice, the other committers are here to help.\n+\n+== Pull Request Title\n+\n+The title should be in English, should not contain an issue number.\n+It should also not contain ellipsis.\n+\n+If your commit message was too long and GitHub automatically cut\n+the title, that's helpful if you can take the time to move the cut\n+part where it belongs to have a full title.\n+\n+Titles are included in the Release notes so they are important.\n+\n+A good title would look like: `Fix XXX in Quartz extension` or\n+`Introduce Hibernate Reactive extension`.\n+\n+A bad title would look like: `fix(#444)`.\n+\n+== Issues Fixed\n+\n+When a PR fixes some issues, it's good practice to add it in the description.\n+\n+One issue per line with something like:\n+\n+[source,asciidoc]\n+----\n+* Fix #444\n+* Fix #555\n+----\n+\n+[NOTE]\n+====\n+GitHub won't detect issues properly if you do something like\n+`Fix #444 #555`.\n+====\n+\n+== Affecting Labels and Milestones\n+\n+Affecting labels and milestones is very important in our process.\n+\n+Before each release, we check that we don't have any orphan i.e.\n+closed issues that don't have either a milestone affected or\n+some of the \"excluding\" labels.\n+\n+Thus:\n+\n+* when you merge a pull request, please affect it with the current milestone marked with \"master\".\n+* if the pull request has issues associated (i.e. if the pull request fixes some issues),\n+  you should also affect the milestone assigned to the issues.\n+* if you close a pull request because the committers have decided to not merge it,\n+  please add the appropriate `triage/` label: `triage/invalid`, `triage/out-of-date`,\n+  `triage/wontfix` are usually in order.\n+* if you close an issue because it has been fixed, either add the milestone", "originalCommit": "f25f99797e84371e59253f6af33e10a45416384c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE1NjQyMQ==", "url": "https://github.com/quarkusio/quarkus/pull/10915#discussion_r459156421", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * if you close an issue for any other reason, one of the aforementioned `triage/` labels\n          \n          \n            \n            * If you close an issue for any other reason, one of the aforementioned `triage/` labels", "author": "stuartwdouglas", "createdAt": "2020-07-23T00:28:08Z", "path": "COMMITTERS.adoc", "diffHunk": "@@ -0,0 +1,173 @@\n+= Information for Quarkus Committers\n+\n+This document contains useful information for Quarkus committers.\n+\n+[NOTE]\n+====\n+It is a work in progress, so if you think information is missing/unclear/inadequate,\n+please reach out to us on the `quarkus-dev` mailing-list.\n+====\n+\n+This document has a lot of information.\n+It is not a set of strict rules, it is here to guide you.\n+If you forget to do something, miss something, don't worry, it happens.\n+\n+Do your best and that will already be a lot :).\n+\n+== Merging Pull Requests\n+\n+The first thing is that, while being a committer,\n+you can't really commit directly to the main repository:\n+you need at least one review by your peers.\n+\n+Thus the need for a pull request.\n+\n+So you are more like a merger than a committer\n+and you might merge more PRs from others than your own work.\n+\n+While not absolute, here are some advices:\n+\n+* if you really want a review by a specific person,\n+  make it a named reviewer via a GitHub UI\n+* if someone asked for a specific reviewer, better\n+  give some time for this person to review the PR.\n+  If not reviewed in a reasonable amount of time,\n+  better ping them again to have some information\n+  or ask the original author if we should go ahead.\n+* if in doubt (on a specific part or because you're\n+  not comfortable reviewing documentation or any other reason),\n+  ask for help\n+* except if it's a totally non brainer (typically a typo fix),\n+  let the PR bake a few hours so some other people can have a\n+  look if interested.\n+  If the PR is very large or is a new extension, better let it\n+  bake for a few days.\n+* we do merge commits so please ask the author to properly\n+  squash the commits before merging.\n+  The idea is to have proper semantic commits.\n+  If the author is not familiar with Git or not available,\n+  you can also (carefully) do it for them as soon as you agreed on it.\n+* make sure the commit comments are meaningful\n+* at the beginning, you can start by giving your approval and not merging\n+  and see how things evolve.\n+  This should give you some hints of important things to check in the future.\n+* only merge pull requests that target master.\n+  **Dealing with old branches is a separate process.**\n+* if you are sure a PR should go in and is just waiting for CI,\n+  just use the `triage/waiting-for-ci` label.\n+  It is a good hint for other committers.\n+* if you think a pull request is an essential part of a given milestone\n+  (and can realistically be part of it),\n+  you should affect this milestone to it so that we can be sure it stays on the radar.\n+\n+Obviously, each situation is different so use your own judgement,\n+and if in doubt, just ask for advice, the other committers are here to help.\n+\n+== Pull Request Title\n+\n+The title should be in English, should not contain an issue number.\n+It should also not contain ellipsis.\n+\n+If your commit message was too long and GitHub automatically cut\n+the title, that's helpful if you can take the time to move the cut\n+part where it belongs to have a full title.\n+\n+Titles are included in the Release notes so they are important.\n+\n+A good title would look like: `Fix XXX in Quartz extension` or\n+`Introduce Hibernate Reactive extension`.\n+\n+A bad title would look like: `fix(#444)`.\n+\n+== Issues Fixed\n+\n+When a PR fixes some issues, it's good practice to add it in the description.\n+\n+One issue per line with something like:\n+\n+[source,asciidoc]\n+----\n+* Fix #444\n+* Fix #555\n+----\n+\n+[NOTE]\n+====\n+GitHub won't detect issues properly if you do something like\n+`Fix #444 #555`.\n+====\n+\n+== Affecting Labels and Milestones\n+\n+Affecting labels and milestones is very important in our process.\n+\n+Before each release, we check that we don't have any orphan i.e.\n+closed issues that don't have either a milestone affected or\n+some of the \"excluding\" labels.\n+\n+Thus:\n+\n+* when you merge a pull request, please affect it with the current milestone marked with \"master\".\n+* if the pull request has issues associated (i.e. if the pull request fixes some issues),\n+  you should also affect the milestone assigned to the issues.\n+* if you close a pull request because the committers have decided to not merge it,\n+  please add the appropriate `triage/` label: `triage/invalid`, `triage/out-of-date`,\n+  `triage/wontfix` are usually in order.\n+* if you close an issue because it has been fixed, either add the milestone\n+  if you can find it easily or use the `triage/out-of-date` if you can't.\n+* if you close an issue for any other reason, one of the aforementioned `triage/` labels", "originalCommit": "f25f99797e84371e59253f6af33e10a45416384c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "0f7c1a7308f8333ac0fb841d8ae5ddc7bf5840b2", "url": "https://github.com/quarkusio/quarkus/commit/0f7c1a7308f8333ac0fb841d8ae5ddc7bf5840b2", "message": "Add COMMITTERS.adoc", "committedDate": "2020-07-23T08:52:46Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTM2MjA2NQ==", "url": "https://github.com/quarkusio/quarkus/pull/10915#discussion_r459362065", "bodyText": "Proposal.\nIf XXX is an issue number I don't think it is meaningful in a changelog.\nFix #454 Off by one error in days in Quartz feels better?", "author": "emmanuelbernard", "createdAt": "2020-07-23T10:43:59Z", "path": "COMMITTERS.adoc", "diffHunk": "@@ -0,0 +1,182 @@\n+= Information for Quarkus Committers\n+\n+This document contains useful information for Quarkus committers.\n+\n+[NOTE]\n+====\n+It is a work in progress, so if you think information is missing/unclear/inadequate,\n+please reach out to us on the `quarkus-dev` mailing-list.\n+====\n+\n+This document has a lot of information.\n+It is not a set of strict rules, it is here to guide you.\n+If you forget to do something, miss something, don't worry, it happens.\n+\n+Do your best and that will already be a lot :).\n+\n+== Merging Pull Requests\n+\n+The first thing is that, while being a committer,\n+you can't really commit directly to the main repository:\n+you need at least one review by your peers.\n+\n+Thus the need for a pull request.\n+\n+So you are more like a merger than a committer\n+and you might merge more PRs from others than your own work.\n+\n+While not absolute, here is some advice:\n+\n+* If you really want a review by a specific person,\n+  make it a named reviewer via a GitHub UI\n+* If someone asked for a specific reviewer, better\n+  give some time for this person to review the PR.\n+  If not reviewed in a reasonable amount of time,\n+  better ping them again to have some information\n+  or ask the original author if we should go ahead.\n+* If in doubt (on a specific part or because you're\n+  not comfortable reviewing documentation or any other reason),\n+  ask for help\n+* Except if it's a total no-brainer (typically a typo fix),\n+  let the PR bake a few hours so some other people can have a\n+  look if interested.\n+  If the PR is very large or is a new extension, better let it\n+  bake for a few days.\n+* We do merge commits so please ask the author to properly\n+  squash the commits before merging.\n+  The idea is to have proper semantic commits.\n+  If the author is not familiar with Git or not available,\n+  you can also (carefully)\n+  https://docs.github.com/en/github/collaborating-with-issues-and-pull-requests/committing-changes-to-a-pull-request-branch-created-from-a-fork[do it for them]\n+  as long as you agreed on it.\n+* Make sure the commit comments are meaningful.\n+* As a new committer, you can start by giving your approval and not merging\n+  and see how things evolve.\n+  This should give you some hints of important things to check in the future.\n+* Only merge pull requests that target master.\n+  **Dealing with old branches is a separate process.**\n+* If you are sure a PR should go in and is just waiting for CI,\n+  just use the `triage/waiting-for-ci` label.\n+  It is a good hint for other committers.\n+* If you think a pull request is an essential part of a given milestone\n+  (and can realistically be part of it),\n+  you should affect this milestone to it so that we can be sure it stays on the radar.\n+\n+Obviously, each situation is different so use your own judgement,\n+and if in doubt, just ask for advice, the other committers are here to help.\n+\n+== Pull Request Title\n+\n+The title should be in English, should not contain an issue number.\n+It should also not contain ellipsis.\n+\n+If your commit message was too long and GitHub automatically cut\n+the title, that's helpful if you can take the time to move the cut\n+part where it belongs to have a full title.\n+\n+Titles are included in the Release notes so they are important.\n+\n+A good title would look like: `Fix XXX in Quartz extension` or", "originalCommit": "0f7c1a7308f8333ac0fb841d8ae5ddc7bf5840b2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTUyMjY3Mg==", "url": "https://github.com/quarkusio/quarkus/pull/10915#discussion_r459522672", "bodyText": "I just realized that the description above says that the title should not contain the issue number but here we're saying that a good title would have it?", "author": "gastaldi", "createdAt": "2020-07-23T15:09:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTM2MjA2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTUyMzMwNg==", "url": "https://github.com/quarkusio/quarkus/pull/10915#discussion_r459523306", "bodyText": "Or I think the XXX means the fix in question: Fix off by one error in days in Quartz", "author": "gastaldi", "createdAt": "2020-07-23T15:10:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTM2MjA2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTUyMzgzMA==", "url": "https://github.com/quarkusio/quarkus/pull/10915#discussion_r459523830", "bodyText": "Better substitute the XXX with something meaningful to avoid any doubts :)", "author": "gastaldi", "createdAt": "2020-07-23T15:10:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTM2MjA2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTU1Mjc2OQ==", "url": "https://github.com/quarkusio/quarkus/pull/10915#discussion_r459552769", "bodyText": "Yes, done.", "author": "gsmet", "createdAt": "2020-07-23T15:51:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTM2MjA2NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTM2MzkyNA==", "url": "https://github.com/quarkusio/quarkus/pull/10915#discussion_r459363924", "bodyText": "One subject I did not see covered is dependency updates. I suppose there is a dedicated process specialization. And maybe a warning that key dependencies like Netty or vert.x should be updated early in the cycle.", "author": "emmanuelbernard", "createdAt": "2020-07-23T10:47:56Z", "path": "COMMITTERS.adoc", "diffHunk": "@@ -0,0 +1,182 @@\n+= Information for Quarkus Committers\n+\n+This document contains useful information for Quarkus committers.\n+\n+[NOTE]\n+====\n+It is a work in progress, so if you think information is missing/unclear/inadequate,\n+please reach out to us on the `quarkus-dev` mailing-list.\n+====\n+\n+This document has a lot of information.\n+It is not a set of strict rules, it is here to guide you.\n+If you forget to do something, miss something, don't worry, it happens.\n+\n+Do your best and that will already be a lot :).\n+\n+== Merging Pull Requests", "originalCommit": "0f7c1a7308f8333ac0fb841d8ae5ddc7bf5840b2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTU0MzQzNg==", "url": "https://github.com/quarkusio/quarkus/pull/10915#discussion_r459543436", "bodyText": "Yes, I will add something about it.", "author": "gsmet", "createdAt": "2020-07-23T15:38:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTM2MzkyNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTUzMjU0Ng==", "url": "https://github.com/quarkusio/quarkus/pull/10915#discussion_r459532546", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              make it a named reviewer via a GitHub UI\n          \n          \n            \n              make it a named reviewer via GitHub's \"Reviewers\" UI", "author": "maxandersen", "createdAt": "2020-07-23T15:22:31Z", "path": "COMMITTERS.adoc", "diffHunk": "@@ -0,0 +1,182 @@\n+= Information for Quarkus Committers\n+\n+This document contains useful information for Quarkus committers.\n+\n+[NOTE]\n+====\n+It is a work in progress, so if you think information is missing/unclear/inadequate,\n+please reach out to us on the `quarkus-dev` mailing-list.\n+====\n+\n+This document has a lot of information.\n+It is not a set of strict rules, it is here to guide you.\n+If you forget to do something, miss something, don't worry, it happens.\n+\n+Do your best and that will already be a lot :).\n+\n+== Merging Pull Requests\n+\n+The first thing is that, while being a committer,\n+you can't really commit directly to the main repository:\n+you need at least one review by your peers.\n+\n+Thus the need for a pull request.\n+\n+So you are more like a merger than a committer\n+and you might merge more PRs from others than your own work.\n+\n+While not absolute, here is some advice:\n+\n+* If you really want a review by a specific person,\n+  make it a named reviewer via a GitHub UI", "originalCommit": "0f7c1a7308f8333ac0fb841d8ae5ddc7bf5840b2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTUzNDAzOQ==", "url": "https://github.com/quarkusio/quarkus/pull/10915#discussion_r459534039", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            the title, that's helpful if you can take the time to move the cut\n          \n          \n            \n            the title, it is helpful if you can take the time to move the cut", "author": "maxandersen", "createdAt": "2020-07-23T15:24:40Z", "path": "COMMITTERS.adoc", "diffHunk": "@@ -0,0 +1,182 @@\n+= Information for Quarkus Committers\n+\n+This document contains useful information for Quarkus committers.\n+\n+[NOTE]\n+====\n+It is a work in progress, so if you think information is missing/unclear/inadequate,\n+please reach out to us on the `quarkus-dev` mailing-list.\n+====\n+\n+This document has a lot of information.\n+It is not a set of strict rules, it is here to guide you.\n+If you forget to do something, miss something, don't worry, it happens.\n+\n+Do your best and that will already be a lot :).\n+\n+== Merging Pull Requests\n+\n+The first thing is that, while being a committer,\n+you can't really commit directly to the main repository:\n+you need at least one review by your peers.\n+\n+Thus the need for a pull request.\n+\n+So you are more like a merger than a committer\n+and you might merge more PRs from others than your own work.\n+\n+While not absolute, here is some advice:\n+\n+* If you really want a review by a specific person,\n+  make it a named reviewer via a GitHub UI\n+* If someone asked for a specific reviewer, better\n+  give some time for this person to review the PR.\n+  If not reviewed in a reasonable amount of time,\n+  better ping them again to have some information\n+  or ask the original author if we should go ahead.\n+* If in doubt (on a specific part or because you're\n+  not comfortable reviewing documentation or any other reason),\n+  ask for help\n+* Except if it's a total no-brainer (typically a typo fix),\n+  let the PR bake a few hours so some other people can have a\n+  look if interested.\n+  If the PR is very large or is a new extension, better let it\n+  bake for a few days.\n+* We do merge commits so please ask the author to properly\n+  squash the commits before merging.\n+  The idea is to have proper semantic commits.\n+  If the author is not familiar with Git or not available,\n+  you can also (carefully)\n+  https://docs.github.com/en/github/collaborating-with-issues-and-pull-requests/committing-changes-to-a-pull-request-branch-created-from-a-fork[do it for them]\n+  as long as you agreed on it.\n+* Make sure the commit comments are meaningful.\n+* As a new committer, you can start by giving your approval and not merging\n+  and see how things evolve.\n+  This should give you some hints of important things to check in the future.\n+* Only merge pull requests that target master.\n+  **Dealing with old branches is a separate process.**\n+* If you are sure a PR should go in and is just waiting for CI,\n+  just use the `triage/waiting-for-ci` label.\n+  It is a good hint for other committers.\n+* If you think a pull request is an essential part of a given milestone\n+  (and can realistically be part of it),\n+  you should affect this milestone to it so that we can be sure it stays on the radar.\n+\n+Obviously, each situation is different so use your own judgement,\n+and if in doubt, just ask for advice, the other committers are here to help.\n+\n+== Pull Request Title\n+\n+The title should be in English, should not contain an issue number.\n+It should also not contain ellipsis.\n+\n+If your commit message was too long and GitHub automatically cut\n+the title, that's helpful if you can take the time to move the cut", "originalCommit": "0f7c1a7308f8333ac0fb841d8ae5ddc7bf5840b2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTUzNjE1Ng==", "url": "https://github.com/quarkusio/quarkus/pull/10915#discussion_r459536156", "bodyText": "how often does this occur (I know I did this in past as i didn't know better) ? we could add \"fail\" check for it", "author": "maxandersen", "createdAt": "2020-07-23T15:27:38Z", "path": "COMMITTERS.adoc", "diffHunk": "@@ -0,0 +1,182 @@\n+= Information for Quarkus Committers\n+\n+This document contains useful information for Quarkus committers.\n+\n+[NOTE]\n+====\n+It is a work in progress, so if you think information is missing/unclear/inadequate,\n+please reach out to us on the `quarkus-dev` mailing-list.\n+====\n+\n+This document has a lot of information.\n+It is not a set of strict rules, it is here to guide you.\n+If you forget to do something, miss something, don't worry, it happens.\n+\n+Do your best and that will already be a lot :).\n+\n+== Merging Pull Requests\n+\n+The first thing is that, while being a committer,\n+you can't really commit directly to the main repository:\n+you need at least one review by your peers.\n+\n+Thus the need for a pull request.\n+\n+So you are more like a merger than a committer\n+and you might merge more PRs from others than your own work.\n+\n+While not absolute, here is some advice:\n+\n+* If you really want a review by a specific person,\n+  make it a named reviewer via a GitHub UI\n+* If someone asked for a specific reviewer, better\n+  give some time for this person to review the PR.\n+  If not reviewed in a reasonable amount of time,\n+  better ping them again to have some information\n+  or ask the original author if we should go ahead.\n+* If in doubt (on a specific part or because you're\n+  not comfortable reviewing documentation or any other reason),\n+  ask for help\n+* Except if it's a total no-brainer (typically a typo fix),\n+  let the PR bake a few hours so some other people can have a\n+  look if interested.\n+  If the PR is very large or is a new extension, better let it\n+  bake for a few days.\n+* We do merge commits so please ask the author to properly\n+  squash the commits before merging.\n+  The idea is to have proper semantic commits.\n+  If the author is not familiar with Git or not available,\n+  you can also (carefully)\n+  https://docs.github.com/en/github/collaborating-with-issues-and-pull-requests/committing-changes-to-a-pull-request-branch-created-from-a-fork[do it for them]\n+  as long as you agreed on it.\n+* Make sure the commit comments are meaningful.\n+* As a new committer, you can start by giving your approval and not merging\n+  and see how things evolve.\n+  This should give you some hints of important things to check in the future.\n+* Only merge pull requests that target master.\n+  **Dealing with old branches is a separate process.**\n+* If you are sure a PR should go in and is just waiting for CI,\n+  just use the `triage/waiting-for-ci` label.\n+  It is a good hint for other committers.\n+* If you think a pull request is an essential part of a given milestone\n+  (and can realistically be part of it),\n+  you should affect this milestone to it so that we can be sure it stays on the radar.\n+\n+Obviously, each situation is different so use your own judgement,\n+and if in doubt, just ask for advice, the other committers are here to help.\n+\n+== Pull Request Title\n+\n+The title should be in English, should not contain an issue number.\n+It should also not contain ellipsis.\n+\n+If your commit message was too long and GitHub automatically cut\n+the title, that's helpful if you can take the time to move the cut\n+part where it belongs to have a full title.\n+\n+Titles are included in the Release notes so they are important.\n+\n+A good title would look like: `Fix XXX in Quartz extension` or\n+`Introduce Hibernate Reactive extension`.\n+\n+A bad title would look like: `fix(#444)`.\n+\n+== Issues Fixed\n+\n+When a PR fixes some issues, it's good practice to add it in the description.\n+\n+One issue per line with something like:\n+\n+[source,asciidoc]\n+----\n+* Fix #444\n+* Fix #555\n+----\n+\n+[TIP]\n+====\n+GitHub supports a variety of keywords here: `fix`, `fixes`, `fixed`,\n+`resolve`, `resolves`, `resolved`, `close`, `closes`, `closed`\n+all do the same thing.\n+====\n+\n+[WARNING]\n+====\n+GitHub won't detect issues properly if you do something like\n+`Fix #444 #555`.", "originalCommit": "0f7c1a7308f8333ac0fb841d8ae5ddc7bf5840b2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTU1MzA1Mw==", "url": "https://github.com/quarkusio/quarkus/pull/10915#discussion_r459553053", "bodyText": "Not that often. I don't think it's worth doing something about it.", "author": "gsmet", "createdAt": "2020-07-23T15:52:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTUzNjE1Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDAxNjc4MA==", "url": "https://github.com/quarkusio/quarkus/pull/10915#discussion_r460016780", "bodyText": "ack.", "author": "maxandersen", "createdAt": "2020-07-24T12:17:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTUzNjE1Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTUzNzcwMQ==", "url": "https://github.com/quarkusio/quarkus/pull/10915#discussion_r459537701", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Before each release, we check that we don't have any orphan i.e.\n          \n          \n            \n            Before each release, we check that we don't have any stray issues i.e.\n          \n      \n    \n    \n  \n\nnitpick, but orphan can be quite a loaded word - thus suggesting 'stray' as more telling.", "author": "maxandersen", "createdAt": "2020-07-23T15:29:49Z", "path": "COMMITTERS.adoc", "diffHunk": "@@ -0,0 +1,182 @@\n+= Information for Quarkus Committers\n+\n+This document contains useful information for Quarkus committers.\n+\n+[NOTE]\n+====\n+It is a work in progress, so if you think information is missing/unclear/inadequate,\n+please reach out to us on the `quarkus-dev` mailing-list.\n+====\n+\n+This document has a lot of information.\n+It is not a set of strict rules, it is here to guide you.\n+If you forget to do something, miss something, don't worry, it happens.\n+\n+Do your best and that will already be a lot :).\n+\n+== Merging Pull Requests\n+\n+The first thing is that, while being a committer,\n+you can't really commit directly to the main repository:\n+you need at least one review by your peers.\n+\n+Thus the need for a pull request.\n+\n+So you are more like a merger than a committer\n+and you might merge more PRs from others than your own work.\n+\n+While not absolute, here is some advice:\n+\n+* If you really want a review by a specific person,\n+  make it a named reviewer via a GitHub UI\n+* If someone asked for a specific reviewer, better\n+  give some time for this person to review the PR.\n+  If not reviewed in a reasonable amount of time,\n+  better ping them again to have some information\n+  or ask the original author if we should go ahead.\n+* If in doubt (on a specific part or because you're\n+  not comfortable reviewing documentation or any other reason),\n+  ask for help\n+* Except if it's a total no-brainer (typically a typo fix),\n+  let the PR bake a few hours so some other people can have a\n+  look if interested.\n+  If the PR is very large or is a new extension, better let it\n+  bake for a few days.\n+* We do merge commits so please ask the author to properly\n+  squash the commits before merging.\n+  The idea is to have proper semantic commits.\n+  If the author is not familiar with Git or not available,\n+  you can also (carefully)\n+  https://docs.github.com/en/github/collaborating-with-issues-and-pull-requests/committing-changes-to-a-pull-request-branch-created-from-a-fork[do it for them]\n+  as long as you agreed on it.\n+* Make sure the commit comments are meaningful.\n+* As a new committer, you can start by giving your approval and not merging\n+  and see how things evolve.\n+  This should give you some hints of important things to check in the future.\n+* Only merge pull requests that target master.\n+  **Dealing with old branches is a separate process.**\n+* If you are sure a PR should go in and is just waiting for CI,\n+  just use the `triage/waiting-for-ci` label.\n+  It is a good hint for other committers.\n+* If you think a pull request is an essential part of a given milestone\n+  (and can realistically be part of it),\n+  you should affect this milestone to it so that we can be sure it stays on the radar.\n+\n+Obviously, each situation is different so use your own judgement,\n+and if in doubt, just ask for advice, the other committers are here to help.\n+\n+== Pull Request Title\n+\n+The title should be in English, should not contain an issue number.\n+It should also not contain ellipsis.\n+\n+If your commit message was too long and GitHub automatically cut\n+the title, that's helpful if you can take the time to move the cut\n+part where it belongs to have a full title.\n+\n+Titles are included in the Release notes so they are important.\n+\n+A good title would look like: `Fix XXX in Quartz extension` or\n+`Introduce Hibernate Reactive extension`.\n+\n+A bad title would look like: `fix(#444)`.\n+\n+== Issues Fixed\n+\n+When a PR fixes some issues, it's good practice to add it in the description.\n+\n+One issue per line with something like:\n+\n+[source,asciidoc]\n+----\n+* Fix #444\n+* Fix #555\n+----\n+\n+[TIP]\n+====\n+GitHub supports a variety of keywords here: `fix`, `fixes`, `fixed`,\n+`resolve`, `resolves`, `resolved`, `close`, `closes`, `closed`\n+all do the same thing.\n+====\n+\n+[WARNING]\n+====\n+GitHub won't detect issues properly if you do something like\n+`Fix #444 #555`.\n+====\n+\n+== Affecting Labels and Milestones\n+\n+Affecting labels and milestones is very important in our process.\n+\n+Before each release, we check that we don't have any orphan i.e.", "originalCommit": "0f7c1a7308f8333ac0fb841d8ae5ddc7bf5840b2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTU0MjgyMA==", "url": "https://github.com/quarkusio/quarkus/pull/10915#discussion_r459542820", "bodyText": "Well I can go with orphan issue. But I don't know what stray means and I'm pretty sure I won't be the only one.", "author": "gsmet", "createdAt": "2020-07-23T15:37:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTUzNzcwMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTU1MzY2MQ==", "url": "https://github.com/quarkusio/quarkus/pull/10915#discussion_r459553661", "bodyText": "Open to other suggestions. stray is definitely in the good direction but I'm afraid I'm not the only one not knowing what it means.\nMaybe just lost?", "author": "gsmet", "createdAt": "2020-07-23T15:53:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTUzNzcwMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTU1OTgyOQ==", "url": "https://github.com/quarkusio/quarkus/pull/10915#discussion_r459559829", "bodyText": "Maybe go directly with the intent and avoid such terms (eg. Before each release, we check that we don't have any closed issues that don't have a milestone affected ...)", "author": "gastaldi", "createdAt": "2020-07-23T16:02:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTUzNzcwMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTU2NDQ5MQ==", "url": "https://github.com/quarkusio/quarkus/pull/10915#discussion_r459564491", "bodyText": "Ah yes, good idea.", "author": "gsmet", "createdAt": "2020-07-23T16:09:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTUzNzcwMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTU2NTk4Mw==", "url": "https://github.com/quarkusio/quarkus/pull/10915#discussion_r459565983", "bodyText": "Done.", "author": "gsmet", "createdAt": "2020-07-23T16:11:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTUzNzcwMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTUzODM5NQ==", "url": "https://github.com/quarkusio/quarkus/pull/10915#discussion_r459538395", "bodyText": "this part we can definitely automate us out of - just have a check on close that labels and milestones are applied properly.", "author": "maxandersen", "createdAt": "2020-07-23T15:30:49Z", "path": "COMMITTERS.adoc", "diffHunk": "@@ -0,0 +1,182 @@\n+= Information for Quarkus Committers\n+\n+This document contains useful information for Quarkus committers.\n+\n+[NOTE]\n+====\n+It is a work in progress, so if you think information is missing/unclear/inadequate,\n+please reach out to us on the `quarkus-dev` mailing-list.\n+====\n+\n+This document has a lot of information.\n+It is not a set of strict rules, it is here to guide you.\n+If you forget to do something, miss something, don't worry, it happens.\n+\n+Do your best and that will already be a lot :).\n+\n+== Merging Pull Requests\n+\n+The first thing is that, while being a committer,\n+you can't really commit directly to the main repository:\n+you need at least one review by your peers.\n+\n+Thus the need for a pull request.\n+\n+So you are more like a merger than a committer\n+and you might merge more PRs from others than your own work.\n+\n+While not absolute, here is some advice:\n+\n+* If you really want a review by a specific person,\n+  make it a named reviewer via a GitHub UI\n+* If someone asked for a specific reviewer, better\n+  give some time for this person to review the PR.\n+  If not reviewed in a reasonable amount of time,\n+  better ping them again to have some information\n+  or ask the original author if we should go ahead.\n+* If in doubt (on a specific part or because you're\n+  not comfortable reviewing documentation or any other reason),\n+  ask for help\n+* Except if it's a total no-brainer (typically a typo fix),\n+  let the PR bake a few hours so some other people can have a\n+  look if interested.\n+  If the PR is very large or is a new extension, better let it\n+  bake for a few days.\n+* We do merge commits so please ask the author to properly\n+  squash the commits before merging.\n+  The idea is to have proper semantic commits.\n+  If the author is not familiar with Git or not available,\n+  you can also (carefully)\n+  https://docs.github.com/en/github/collaborating-with-issues-and-pull-requests/committing-changes-to-a-pull-request-branch-created-from-a-fork[do it for them]\n+  as long as you agreed on it.\n+* Make sure the commit comments are meaningful.\n+* As a new committer, you can start by giving your approval and not merging\n+  and see how things evolve.\n+  This should give you some hints of important things to check in the future.\n+* Only merge pull requests that target master.\n+  **Dealing with old branches is a separate process.**\n+* If you are sure a PR should go in and is just waiting for CI,\n+  just use the `triage/waiting-for-ci` label.\n+  It is a good hint for other committers.\n+* If you think a pull request is an essential part of a given milestone\n+  (and can realistically be part of it),\n+  you should affect this milestone to it so that we can be sure it stays on the radar.\n+\n+Obviously, each situation is different so use your own judgement,\n+and if in doubt, just ask for advice, the other committers are here to help.\n+\n+== Pull Request Title\n+\n+The title should be in English, should not contain an issue number.\n+It should also not contain ellipsis.\n+\n+If your commit message was too long and GitHub automatically cut\n+the title, that's helpful if you can take the time to move the cut\n+part where it belongs to have a full title.\n+\n+Titles are included in the Release notes so they are important.\n+\n+A good title would look like: `Fix XXX in Quartz extension` or\n+`Introduce Hibernate Reactive extension`.\n+\n+A bad title would look like: `fix(#444)`.\n+\n+== Issues Fixed\n+\n+When a PR fixes some issues, it's good practice to add it in the description.\n+\n+One issue per line with something like:\n+\n+[source,asciidoc]\n+----\n+* Fix #444\n+* Fix #555\n+----\n+\n+[TIP]\n+====\n+GitHub supports a variety of keywords here: `fix`, `fixes`, `fixed`,\n+`resolve`, `resolves`, `resolved`, `close`, `closes`, `closed`\n+all do the same thing.\n+====\n+\n+[WARNING]\n+====\n+GitHub won't detect issues properly if you do something like\n+`Fix #444 #555`.\n+====\n+\n+== Affecting Labels and Milestones\n+\n+Affecting labels and milestones is very important in our process.\n+\n+Before each release, we check that we don't have any orphan i.e.\n+closed issues that don't have either a milestone affected or", "originalCommit": "0f7c1a7308f8333ac0fb841d8ae5ddc7bf5840b2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTUzOTM0Mg==", "url": "https://github.com/quarkusio/quarkus/pull/10915#discussion_r459539342", "bodyText": "should actually be able to automate this...on pr close we can check which branch it was merged into and check and assign automatiically.", "author": "maxandersen", "createdAt": "2020-07-23T15:32:07Z", "path": "COMMITTERS.adoc", "diffHunk": "@@ -0,0 +1,182 @@\n+= Information for Quarkus Committers\n+\n+This document contains useful information for Quarkus committers.\n+\n+[NOTE]\n+====\n+It is a work in progress, so if you think information is missing/unclear/inadequate,\n+please reach out to us on the `quarkus-dev` mailing-list.\n+====\n+\n+This document has a lot of information.\n+It is not a set of strict rules, it is here to guide you.\n+If you forget to do something, miss something, don't worry, it happens.\n+\n+Do your best and that will already be a lot :).\n+\n+== Merging Pull Requests\n+\n+The first thing is that, while being a committer,\n+you can't really commit directly to the main repository:\n+you need at least one review by your peers.\n+\n+Thus the need for a pull request.\n+\n+So you are more like a merger than a committer\n+and you might merge more PRs from others than your own work.\n+\n+While not absolute, here is some advice:\n+\n+* If you really want a review by a specific person,\n+  make it a named reviewer via a GitHub UI\n+* If someone asked for a specific reviewer, better\n+  give some time for this person to review the PR.\n+  If not reviewed in a reasonable amount of time,\n+  better ping them again to have some information\n+  or ask the original author if we should go ahead.\n+* If in doubt (on a specific part or because you're\n+  not comfortable reviewing documentation or any other reason),\n+  ask for help\n+* Except if it's a total no-brainer (typically a typo fix),\n+  let the PR bake a few hours so some other people can have a\n+  look if interested.\n+  If the PR is very large or is a new extension, better let it\n+  bake for a few days.\n+* We do merge commits so please ask the author to properly\n+  squash the commits before merging.\n+  The idea is to have proper semantic commits.\n+  If the author is not familiar with Git or not available,\n+  you can also (carefully)\n+  https://docs.github.com/en/github/collaborating-with-issues-and-pull-requests/committing-changes-to-a-pull-request-branch-created-from-a-fork[do it for them]\n+  as long as you agreed on it.\n+* Make sure the commit comments are meaningful.\n+* As a new committer, you can start by giving your approval and not merging\n+  and see how things evolve.\n+  This should give you some hints of important things to check in the future.\n+* Only merge pull requests that target master.\n+  **Dealing with old branches is a separate process.**\n+* If you are sure a PR should go in and is just waiting for CI,\n+  just use the `triage/waiting-for-ci` label.\n+  It is a good hint for other committers.\n+* If you think a pull request is an essential part of a given milestone\n+  (and can realistically be part of it),\n+  you should affect this milestone to it so that we can be sure it stays on the radar.\n+\n+Obviously, each situation is different so use your own judgement,\n+and if in doubt, just ask for advice, the other committers are here to help.\n+\n+== Pull Request Title\n+\n+The title should be in English, should not contain an issue number.\n+It should also not contain ellipsis.\n+\n+If your commit message was too long and GitHub automatically cut\n+the title, that's helpful if you can take the time to move the cut\n+part where it belongs to have a full title.\n+\n+Titles are included in the Release notes so they are important.\n+\n+A good title would look like: `Fix XXX in Quartz extension` or\n+`Introduce Hibernate Reactive extension`.\n+\n+A bad title would look like: `fix(#444)`.\n+\n+== Issues Fixed\n+\n+When a PR fixes some issues, it's good practice to add it in the description.\n+\n+One issue per line with something like:\n+\n+[source,asciidoc]\n+----\n+* Fix #444\n+* Fix #555\n+----\n+\n+[TIP]\n+====\n+GitHub supports a variety of keywords here: `fix`, `fixes`, `fixed`,\n+`resolve`, `resolves`, `resolved`, `close`, `closes`, `closed`\n+all do the same thing.\n+====\n+\n+[WARNING]\n+====\n+GitHub won't detect issues properly if you do something like\n+`Fix #444 #555`.\n+====\n+\n+== Affecting Labels and Milestones\n+\n+Affecting labels and milestones is very important in our process.\n+\n+Before each release, we check that we don't have any orphan i.e.\n+closed issues that don't have either a milestone affected or\n+some of the \"excluding\" labels.\n+\n+Thus:\n+\n+* When you merge a pull request, please affect it with the current milestone marked with \"master\".", "originalCommit": "0f7c1a7308f8333ac0fb841d8ae5ddc7bf5840b2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTU0MjM4Nw==", "url": "https://github.com/quarkusio/quarkus/pull/10915#discussion_r459542387", "bodyText": "See other document. Let's not pollute this one with a discussion we have elsewhere.\nThis document needs to be up to date with what we're doing.", "author": "gsmet", "createdAt": "2020-07-23T15:36:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTUzOTM0Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTUzOTU4OA==", "url": "https://github.com/quarkusio/quarkus/pull/10915#discussion_r459539588", "bodyText": "also automatable!  actually this full list is quite easy to sanity check on. great list.", "author": "maxandersen", "createdAt": "2020-07-23T15:32:30Z", "path": "COMMITTERS.adoc", "diffHunk": "@@ -0,0 +1,182 @@\n+= Information for Quarkus Committers\n+\n+This document contains useful information for Quarkus committers.\n+\n+[NOTE]\n+====\n+It is a work in progress, so if you think information is missing/unclear/inadequate,\n+please reach out to us on the `quarkus-dev` mailing-list.\n+====\n+\n+This document has a lot of information.\n+It is not a set of strict rules, it is here to guide you.\n+If you forget to do something, miss something, don't worry, it happens.\n+\n+Do your best and that will already be a lot :).\n+\n+== Merging Pull Requests\n+\n+The first thing is that, while being a committer,\n+you can't really commit directly to the main repository:\n+you need at least one review by your peers.\n+\n+Thus the need for a pull request.\n+\n+So you are more like a merger than a committer\n+and you might merge more PRs from others than your own work.\n+\n+While not absolute, here is some advice:\n+\n+* If you really want a review by a specific person,\n+  make it a named reviewer via a GitHub UI\n+* If someone asked for a specific reviewer, better\n+  give some time for this person to review the PR.\n+  If not reviewed in a reasonable amount of time,\n+  better ping them again to have some information\n+  or ask the original author if we should go ahead.\n+* If in doubt (on a specific part or because you're\n+  not comfortable reviewing documentation or any other reason),\n+  ask for help\n+* Except if it's a total no-brainer (typically a typo fix),\n+  let the PR bake a few hours so some other people can have a\n+  look if interested.\n+  If the PR is very large or is a new extension, better let it\n+  bake for a few days.\n+* We do merge commits so please ask the author to properly\n+  squash the commits before merging.\n+  The idea is to have proper semantic commits.\n+  If the author is not familiar with Git or not available,\n+  you can also (carefully)\n+  https://docs.github.com/en/github/collaborating-with-issues-and-pull-requests/committing-changes-to-a-pull-request-branch-created-from-a-fork[do it for them]\n+  as long as you agreed on it.\n+* Make sure the commit comments are meaningful.\n+* As a new committer, you can start by giving your approval and not merging\n+  and see how things evolve.\n+  This should give you some hints of important things to check in the future.\n+* Only merge pull requests that target master.\n+  **Dealing with old branches is a separate process.**\n+* If you are sure a PR should go in and is just waiting for CI,\n+  just use the `triage/waiting-for-ci` label.\n+  It is a good hint for other committers.\n+* If you think a pull request is an essential part of a given milestone\n+  (and can realistically be part of it),\n+  you should affect this milestone to it so that we can be sure it stays on the radar.\n+\n+Obviously, each situation is different so use your own judgement,\n+and if in doubt, just ask for advice, the other committers are here to help.\n+\n+== Pull Request Title\n+\n+The title should be in English, should not contain an issue number.\n+It should also not contain ellipsis.\n+\n+If your commit message was too long and GitHub automatically cut\n+the title, that's helpful if you can take the time to move the cut\n+part where it belongs to have a full title.\n+\n+Titles are included in the Release notes so they are important.\n+\n+A good title would look like: `Fix XXX in Quartz extension` or\n+`Introduce Hibernate Reactive extension`.\n+\n+A bad title would look like: `fix(#444)`.\n+\n+== Issues Fixed\n+\n+When a PR fixes some issues, it's good practice to add it in the description.\n+\n+One issue per line with something like:\n+\n+[source,asciidoc]\n+----\n+* Fix #444\n+* Fix #555\n+----\n+\n+[TIP]\n+====\n+GitHub supports a variety of keywords here: `fix`, `fixes`, `fixed`,\n+`resolve`, `resolves`, `resolved`, `close`, `closes`, `closed`\n+all do the same thing.\n+====\n+\n+[WARNING]\n+====\n+GitHub won't detect issues properly if you do something like\n+`Fix #444 #555`.\n+====\n+\n+== Affecting Labels and Milestones\n+\n+Affecting labels and milestones is very important in our process.\n+\n+Before each release, we check that we don't have any orphan i.e.\n+closed issues that don't have either a milestone affected or\n+some of the \"excluding\" labels.\n+\n+Thus:\n+\n+* When you merge a pull request, please affect it with the current milestone marked with \"master\".\n+* If the pull request has issues associated (i.e. if the pull request fixes some issues),", "originalCommit": "0f7c1a7308f8333ac0fb841d8ae5ddc7bf5840b2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTU0MTk2Mg==", "url": "https://github.com/quarkusio/quarkus/pull/10915#discussion_r459541962", "bodyText": "Please don't make this document one more time about this.\nThis is the current version. Once things are automated, it will be updated. For now, it's not.", "author": "gsmet", "createdAt": "2020-07-23T15:35:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTUzOTU4OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTU0MDY2OQ==", "url": "https://github.com/quarkusio/quarkus/pull/10915#discussion_r459540669", "bodyText": "we should mention the naming pattern used.", "author": "maxandersen", "createdAt": "2020-07-23T15:33:59Z", "path": "COMMITTERS.adoc", "diffHunk": "@@ -0,0 +1,182 @@\n+= Information for Quarkus Committers\n+\n+This document contains useful information for Quarkus committers.\n+\n+[NOTE]\n+====\n+It is a work in progress, so if you think information is missing/unclear/inadequate,\n+please reach out to us on the `quarkus-dev` mailing-list.\n+====\n+\n+This document has a lot of information.\n+It is not a set of strict rules, it is here to guide you.\n+If you forget to do something, miss something, don't worry, it happens.\n+\n+Do your best and that will already be a lot :).\n+\n+== Merging Pull Requests\n+\n+The first thing is that, while being a committer,\n+you can't really commit directly to the main repository:\n+you need at least one review by your peers.\n+\n+Thus the need for a pull request.\n+\n+So you are more like a merger than a committer\n+and you might merge more PRs from others than your own work.\n+\n+While not absolute, here is some advice:\n+\n+* If you really want a review by a specific person,\n+  make it a named reviewer via a GitHub UI\n+* If someone asked for a specific reviewer, better\n+  give some time for this person to review the PR.\n+  If not reviewed in a reasonable amount of time,\n+  better ping them again to have some information\n+  or ask the original author if we should go ahead.\n+* If in doubt (on a specific part or because you're\n+  not comfortable reviewing documentation or any other reason),\n+  ask for help\n+* Except if it's a total no-brainer (typically a typo fix),\n+  let the PR bake a few hours so some other people can have a\n+  look if interested.\n+  If the PR is very large or is a new extension, better let it\n+  bake for a few days.\n+* We do merge commits so please ask the author to properly\n+  squash the commits before merging.\n+  The idea is to have proper semantic commits.\n+  If the author is not familiar with Git or not available,\n+  you can also (carefully)\n+  https://docs.github.com/en/github/collaborating-with-issues-and-pull-requests/committing-changes-to-a-pull-request-branch-created-from-a-fork[do it for them]\n+  as long as you agreed on it.\n+* Make sure the commit comments are meaningful.\n+* As a new committer, you can start by giving your approval and not merging\n+  and see how things evolve.\n+  This should give you some hints of important things to check in the future.\n+* Only merge pull requests that target master.\n+  **Dealing with old branches is a separate process.**\n+* If you are sure a PR should go in and is just waiting for CI,\n+  just use the `triage/waiting-for-ci` label.\n+  It is a good hint for other committers.\n+* If you think a pull request is an essential part of a given milestone\n+  (and can realistically be part of it),\n+  you should affect this milestone to it so that we can be sure it stays on the radar.\n+\n+Obviously, each situation is different so use your own judgement,\n+and if in doubt, just ask for advice, the other committers are here to help.\n+\n+== Pull Request Title\n+\n+The title should be in English, should not contain an issue number.\n+It should also not contain ellipsis.\n+\n+If your commit message was too long and GitHub automatically cut\n+the title, that's helpful if you can take the time to move the cut\n+part where it belongs to have a full title.\n+\n+Titles are included in the Release notes so they are important.\n+\n+A good title would look like: `Fix XXX in Quartz extension` or\n+`Introduce Hibernate Reactive extension`.\n+\n+A bad title would look like: `fix(#444)`.\n+\n+== Issues Fixed\n+\n+When a PR fixes some issues, it's good practice to add it in the description.\n+\n+One issue per line with something like:\n+\n+[source,asciidoc]\n+----\n+* Fix #444\n+* Fix #555\n+----\n+\n+[TIP]\n+====\n+GitHub supports a variety of keywords here: `fix`, `fixes`, `fixed`,\n+`resolve`, `resolves`, `resolved`, `close`, `closes`, `closed`\n+all do the same thing.\n+====\n+\n+[WARNING]\n+====\n+GitHub won't detect issues properly if you do something like\n+`Fix #444 #555`.\n+====\n+\n+== Affecting Labels and Milestones\n+\n+Affecting labels and milestones is very important in our process.\n+\n+Before each release, we check that we don't have any orphan i.e.\n+closed issues that don't have either a milestone affected or\n+some of the \"excluding\" labels.\n+\n+Thus:\n+\n+* When you merge a pull request, please affect it with the current milestone marked with \"master\".\n+* If the pull request has issues associated (i.e. if the pull request fixes some issues),\n+  you should also affect the milestone assigned to the issues.\n+* If you close a pull request because the committers have decided to not merge it,\n+  please add the appropriate `triage/` label: `triage/invalid`, `triage/out-of-date`,\n+  `triage/wontfix` are usually in order.\n+* If you close an issue because it has been fixed, either add the milestone\n+  if you can find it easily or use the `triage/out-of-date` if you can't.\n+* If you close an issue for any other reason, one of the aforementioned `triage/` labels\n+  is probably adequate.\n+\n+== Backporting Process\n+\n+When we release a new version of Quarkus, we usually do a bugfix\n+release a couple of weeks after.\n+\n+Everytime we do a release, we create a release branch to host", "originalCommit": "0f7c1a7308f8333ac0fb841d8ae5ddc7bf5840b2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTU0MTU5NQ==", "url": "https://github.com/quarkusio/quarkus/pull/10915#discussion_r459541595", "bodyText": "Well, it's the version. What's the point in adding that info here? (The document is already very long)", "author": "gsmet", "createdAt": "2020-07-23T15:35:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTU0MDY2OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTU0NjAzMA==", "url": "https://github.com/quarkusio/quarkus/pull/10915#discussion_r459546030", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Everytime we do a release, we create a release branch to host\n          \n          \n            \n            Everytime we do release (i.e. 1.6.0), we create a branch (i.e. 1.6) to host\n          \n      \n    \n    \n  \n\nI don't think that piece of clarity and ~10 characters hurts ;) up to you.", "author": "maxandersen", "createdAt": "2020-07-23T15:41:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTU0MDY2OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTU2MDYxOQ==", "url": "https://github.com/quarkusio/quarkus/pull/10915#discussion_r459560619", "bodyText": "@maxandersen There is an extra do in your suggestion (eg. Everytime we release...) \ud83d\ude03", "author": "gastaldi", "createdAt": "2020-07-23T16:03:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTU0MDY2OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTU2NjUwMQ==", "url": "https://github.com/quarkusio/quarkus/pull/10915#discussion_r459566501", "bodyText": "It's not the extra characters, it's just that I don't think it brings anything to the plate and just adds noise. Did it anyway in the last version.", "author": "gsmet", "createdAt": "2020-07-23T16:12:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTU0MDY2OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTU1ODYzMg==", "url": "https://github.com/quarkusio/quarkus/pull/10915#discussion_r459558632", "bodyText": "Great. I suppose we should ignore it \n  \n    \n      quarkus/.github/workflows/ci-actions.yml\n    \n    \n         Line 24\n      in\n      95afcf6\n    \n    \n    \n    \n\n        \n          \n           paths-ignore: \n        \n    \n  \n\n too?", "author": "machi1990", "createdAt": "2020-07-23T16:00:15Z", "path": ".github/workflows/ci-actions.yml", "diffHunk": "@@ -7,6 +7,7 @@ on:\n     paths-ignore:\n       - 'docs/src/main/asciidoc/**'\n       - 'README.md'\n+      - 'COMMITTERS.adoc'", "originalCommit": "95afcf6fc9d9422c34be9e2f108849b801a01211", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTU1ODc5MA==", "url": "https://github.com/quarkusio/quarkus/pull/10915#discussion_r459558790", "bodyText": "@gsmet WDYT?", "author": "machi1990", "createdAt": "2020-07-23T16:00:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTU1ODYzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTU2MzYxNw==", "url": "https://github.com/quarkusio/quarkus/pull/10915#discussion_r459563617", "bodyText": "Ah right, that's why CI got triggered! Fixed.", "author": "gsmet", "createdAt": "2020-07-23T16:08:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTU1ODYzMg=="}], "type": "inlineReview"}, {"oid": "5c41257f74f797841b87609cc4d472768dbd347c", "url": "https://github.com/quarkusio/quarkus/commit/5c41257f74f797841b87609cc4d472768dbd347c", "message": "COMMITTERS.adoc - Additional work", "committedDate": "2020-07-23T16:06:04Z", "type": "forcePushed"}, {"oid": "4eeaec883030810bfd091f711b98ddf97dad7cdf", "url": "https://github.com/quarkusio/quarkus/commit/4eeaec883030810bfd091f711b98ddf97dad7cdf", "message": "COMMITTERS.adoc - Additional work", "committedDate": "2020-07-23T16:07:43Z", "type": "forcePushed"}, {"oid": "c2c6450ee6a36360035e7b1946d3ea1f334e985a", "url": "https://github.com/quarkusio/quarkus/commit/c2c6450ee6a36360035e7b1946d3ea1f334e985a", "message": "COMMITTERS.adoc - Additional work", "committedDate": "2020-07-23T16:11:37Z", "type": "forcePushed"}, {"oid": "f4be6a06db027b90cc830047e06fc2e802fed2b5", "url": "https://github.com/quarkusio/quarkus/commit/f4be6a06db027b90cc830047e06fc2e802fed2b5", "message": "Add COMMITTERS.adoc", "committedDate": "2020-09-14T11:28:09Z", "type": "forcePushed"}, {"oid": "31381e7ae94401dfe15177bbd429239e320ccc7c", "url": "https://github.com/quarkusio/quarkus/commit/31381e7ae94401dfe15177bbd429239e320ccc7c", "message": "Add COMMITTERS.adoc", "committedDate": "2020-09-14T11:30:33Z", "type": "forcePushed"}, {"oid": "cd8216be9ddac2d90d89e102c3864b53917fd7c5", "url": "https://github.com/quarkusio/quarkus/commit/cd8216be9ddac2d90d89e102c3864b53917fd7c5", "message": "Add COMMITTERS.adoc", "committedDate": "2020-09-14T11:32:41Z", "type": "forcePushed"}, {"oid": "344bb130565aa46f14d3b4c9c421b74cf6865831", "url": "https://github.com/quarkusio/quarkus/commit/344bb130565aa46f14d3b4c9c421b74cf6865831", "message": "Add COMMITTERS.adoc", "committedDate": "2020-09-14T11:37:00Z", "type": "forcePushed"}, {"oid": "c1940c75d2768258452bc911c34677e335757808", "url": "https://github.com/quarkusio/quarkus/commit/c1940c75d2768258452bc911c34677e335757808", "message": "Add COMMITTERS.adoc", "committedDate": "2020-09-14T11:39:59Z", "type": "commit"}, {"oid": "c1940c75d2768258452bc911c34677e335757808", "url": "https://github.com/quarkusio/quarkus/commit/c1940c75d2768258452bc911c34677e335757808", "message": "Add COMMITTERS.adoc", "committedDate": "2020-09-14T11:39:59Z", "type": "forcePushed"}, {"oid": "e377b4c36392ec2a11be9409a15ca195f1b4f421", "url": "https://github.com/quarkusio/quarkus/commit/e377b4c36392ec2a11be9409a15ca195f1b4f421", "message": "Adjust CI sanity check sleep when we don't build anything", "committedDate": "2020-09-14T11:49:41Z", "type": "commit"}]}