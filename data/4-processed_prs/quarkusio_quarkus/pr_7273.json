{"pr_number": 7273, "pr_title": "Add guide for Spring Cloud Config Client extension", "pr_createdAt": "2020-02-19T09:17:28Z", "pr_url": "https://github.com/quarkusio/quarkus/pull/7273", "timeline": [{"oid": "6727625c9d3430bbcdd42795421cb00dfa937bf1", "url": "https://github.com/quarkusio/quarkus/commit/6727625c9d3430bbcdd42795421cb00dfa937bf1", "message": "Add guide for Spring Cloud Config Client extension", "committedDate": "2020-02-19T09:29:17Z", "type": "forcePushed"}, {"oid": "81de75e80092d8df8fd1080c9fb4291adfc4fc9a", "url": "https://github.com/quarkusio/quarkus/commit/81de75e80092d8df8fd1080c9fb4291adfc4fc9a", "message": "Add guide for Spring Cloud Config Client extension", "committedDate": "2020-02-19T09:30:22Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTM4NDQ0OA==", "url": "https://github.com/quarkusio/quarkus/pull/7273#discussion_r381384448", "bodyText": "Should it be Spring Cloud Config Server?", "author": "gsmet", "createdAt": "2020-02-19T16:21:16Z", "path": "docs/src/main/asciidoc/spring-cloud-config-client.adoc", "diffHunk": "@@ -0,0 +1,140 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Reading properties from Spring Config Server", "originalCommit": "81de75e80092d8df8fd1080c9fb4291adfc4fc9a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTgxMjE0Nw==", "url": "https://github.com/quarkusio/quarkus/pull/7273#discussion_r381812147", "bodyText": "Sure, it sounds better", "author": "geoand", "createdAt": "2020-02-20T06:52:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTM4NDQ0OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTM4NDk2Mw==", "url": "https://github.com/quarkusio/quarkus/pull/7273#discussion_r381384963", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            To stand up a Config Server required for this guide, please follow the instructions outlined https://github.com/spring-guides/gs-centralized-configuration#stand-up-a-config-server[here].\n          \n          \n            \n            To stand up the Config Server required for this guide, please follow the instructions outlined https://github.com/spring-guides/gs-centralized-configuration#stand-up-a-config-server[here].", "author": "gsmet", "createdAt": "2020-02-19T16:22:01Z", "path": "docs/src/main/asciidoc/spring-cloud-config-client.adoc", "diffHunk": "@@ -0,0 +1,140 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Reading properties from Spring Config Server\n+\n+include::./attributes.adoc[]\n+:extension-status: preview\n+\n+This guide explains how your Quarkus application can read configuration properties at runtime from the https://cloud.spring.io/spring-cloud-config[Spring Cloud Config Server].\n+\n+include::./status-include.adoc[]\n+\n+== Prerequisites\n+\n+To complete this guide, you need:\n+\n+* less than 15 minutes\n+* an IDE\n+* JDK 1.8+ installed with `JAVA_HOME` configured appropriately\n+* Apache Maven 3.5.3+\n+\n+\n+== Solution\n+\n+We recommend that you follow the instructions in the next sections and create the application step by step.\n+\n+== Stand up a Config Server\n+\n+To stand up a Config Server required for this guide, please follow the instructions outlined https://github.com/spring-guides/gs-centralized-configuration#stand-up-a-config-server[here].", "originalCommit": "81de75e80092d8df8fd1080c9fb4291adfc4fc9a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTM4NTQxMQ==", "url": "https://github.com/quarkusio/quarkus/pull/7273#discussion_r381385411", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The Quarkus maven plugin automatically generated a `GreetingResource` JAX-RS resource in the\n          \n          \n            \n            The Quarkus Maven plugin automatically generated a `GreetingResource` JAX-RS resource in the", "author": "gsmet", "createdAt": "2020-02-19T16:22:40Z", "path": "docs/src/main/asciidoc/spring-cloud-config-client.adoc", "diffHunk": "@@ -0,0 +1,140 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Reading properties from Spring Config Server\n+\n+include::./attributes.adoc[]\n+:extension-status: preview\n+\n+This guide explains how your Quarkus application can read configuration properties at runtime from the https://cloud.spring.io/spring-cloud-config[Spring Cloud Config Server].\n+\n+include::./status-include.adoc[]\n+\n+== Prerequisites\n+\n+To complete this guide, you need:\n+\n+* less than 15 minutes\n+* an IDE\n+* JDK 1.8+ installed with `JAVA_HOME` configured appropriately\n+* Apache Maven 3.5.3+\n+\n+\n+== Solution\n+\n+We recommend that you follow the instructions in the next sections and create the application step by step.\n+\n+== Stand up a Config Server\n+\n+To stand up a Config Server required for this guide, please follow the instructions outlined https://github.com/spring-guides/gs-centralized-configuration#stand-up-a-config-server[here].\n+The end result of that process is a running Config Server that will provide the `Hello world` value for a configuration property named `message` when the application querying the server is named `a-bootiful-client`.\n+\n+== Creating the Maven project\n+\n+First, we need a new project. Create a new project with the following command:\n+\n+[source,shell,subs=attributes+]\n+----\n+mvn io.quarkus:quarkus-maven-plugin:{quarkus-version}:create \\\n+    -DprojectGroupId=org.acme \\\n+    -DprojectArtifactId=spring-cloud-config-quickstart \\\n+    -DclassName=\"org.acme.spring.cloud.config.client.GreetingResource\" \\\n+    -Dpath=\"/greeting\" \\\n+    -Dextensions=\"spring-cloud-config-client\"\n+cd spring-cloud-config-quickstart\n+----\n+\n+This command generates a Maven project with a REST endpoint and imports the `spring-cloud-config-client` extension.\n+\n+== GreetingController\n+\n+The Quarkus maven plugin automatically generated a `GreetingResource` JAX-RS resource in the", "originalCommit": "81de75e80092d8df8fd1080c9fb4291adfc4fc9a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTM4NTY1NQ==", "url": "https://github.com/quarkusio/quarkus/pull/7273#discussion_r381385655", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            As we want to use configuration properties read from the Config Server, we will update the `GreetingResource` to inject the `message` property. The updated code will look like this:\n          \n          \n            \n            As we want to use configuration properties obtained from the Config Server, we will update the `GreetingResource` to inject the `message` property. The updated code will look like this:\n          \n      \n    \n    \n  \n\n?", "author": "gsmet", "createdAt": "2020-02-19T16:23:02Z", "path": "docs/src/main/asciidoc/spring-cloud-config-client.adoc", "diffHunk": "@@ -0,0 +1,140 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Reading properties from Spring Config Server\n+\n+include::./attributes.adoc[]\n+:extension-status: preview\n+\n+This guide explains how your Quarkus application can read configuration properties at runtime from the https://cloud.spring.io/spring-cloud-config[Spring Cloud Config Server].\n+\n+include::./status-include.adoc[]\n+\n+== Prerequisites\n+\n+To complete this guide, you need:\n+\n+* less than 15 minutes\n+* an IDE\n+* JDK 1.8+ installed with `JAVA_HOME` configured appropriately\n+* Apache Maven 3.5.3+\n+\n+\n+== Solution\n+\n+We recommend that you follow the instructions in the next sections and create the application step by step.\n+\n+== Stand up a Config Server\n+\n+To stand up a Config Server required for this guide, please follow the instructions outlined https://github.com/spring-guides/gs-centralized-configuration#stand-up-a-config-server[here].\n+The end result of that process is a running Config Server that will provide the `Hello world` value for a configuration property named `message` when the application querying the server is named `a-bootiful-client`.\n+\n+== Creating the Maven project\n+\n+First, we need a new project. Create a new project with the following command:\n+\n+[source,shell,subs=attributes+]\n+----\n+mvn io.quarkus:quarkus-maven-plugin:{quarkus-version}:create \\\n+    -DprojectGroupId=org.acme \\\n+    -DprojectArtifactId=spring-cloud-config-quickstart \\\n+    -DclassName=\"org.acme.spring.cloud.config.client.GreetingResource\" \\\n+    -Dpath=\"/greeting\" \\\n+    -Dextensions=\"spring-cloud-config-client\"\n+cd spring-cloud-config-quickstart\n+----\n+\n+This command generates a Maven project with a REST endpoint and imports the `spring-cloud-config-client` extension.\n+\n+== GreetingController\n+\n+The Quarkus maven plugin automatically generated a `GreetingResource` JAX-RS resource in the\n+`src/main/java/org/acme/spring/cloud/config/client/GreetingResource.java` file that looks like:\n+\n+[source,java]\n+----\n+package org.acme.spring.spring.cloud.config.client;\n+\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+\n+@Path(\"/hello\")\n+public class GreetingResource {\n+\n+    @GET\n+    @Produces(MediaType.TEXT_PLAIN)\n+    public String hello() {\n+        return \"hello\";\n+    }\n+}\n+----\n+\n+As we want to use configuration properties read from the Config Server, we will update the `GreetingResource` to inject the `message` property. The updated code will look like this:", "originalCommit": "81de75e80092d8df8fd1080c9fb4291adfc4fc9a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTM4NjQzOA==", "url": "https://github.com/quarkusio/quarkus/pull/7273#discussion_r381386438", "bodyText": "quarkus.scccc\n\nHum. I totally missed in the initial commit but it looks very cryptic. Can't we find a better name for this? Or is it well known in the Spring world?\nquarkus.spring-cloud-config would be better as a root, no?", "author": "gsmet", "createdAt": "2020-02-19T16:24:11Z", "path": "docs/src/main/asciidoc/spring-cloud-config-client.adoc", "diffHunk": "@@ -0,0 +1,140 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Reading properties from Spring Config Server\n+\n+include::./attributes.adoc[]\n+:extension-status: preview\n+\n+This guide explains how your Quarkus application can read configuration properties at runtime from the https://cloud.spring.io/spring-cloud-config[Spring Cloud Config Server].\n+\n+include::./status-include.adoc[]\n+\n+== Prerequisites\n+\n+To complete this guide, you need:\n+\n+* less than 15 minutes\n+* an IDE\n+* JDK 1.8+ installed with `JAVA_HOME` configured appropriately\n+* Apache Maven 3.5.3+\n+\n+\n+== Solution\n+\n+We recommend that you follow the instructions in the next sections and create the application step by step.\n+\n+== Stand up a Config Server\n+\n+To stand up a Config Server required for this guide, please follow the instructions outlined https://github.com/spring-guides/gs-centralized-configuration#stand-up-a-config-server[here].\n+The end result of that process is a running Config Server that will provide the `Hello world` value for a configuration property named `message` when the application querying the server is named `a-bootiful-client`.\n+\n+== Creating the Maven project\n+\n+First, we need a new project. Create a new project with the following command:\n+\n+[source,shell,subs=attributes+]\n+----\n+mvn io.quarkus:quarkus-maven-plugin:{quarkus-version}:create \\\n+    -DprojectGroupId=org.acme \\\n+    -DprojectArtifactId=spring-cloud-config-quickstart \\\n+    -DclassName=\"org.acme.spring.cloud.config.client.GreetingResource\" \\\n+    -Dpath=\"/greeting\" \\\n+    -Dextensions=\"spring-cloud-config-client\"\n+cd spring-cloud-config-quickstart\n+----\n+\n+This command generates a Maven project with a REST endpoint and imports the `spring-cloud-config-client` extension.\n+\n+== GreetingController\n+\n+The Quarkus maven plugin automatically generated a `GreetingResource` JAX-RS resource in the\n+`src/main/java/org/acme/spring/cloud/config/client/GreetingResource.java` file that looks like:\n+\n+[source,java]\n+----\n+package org.acme.spring.spring.cloud.config.client;\n+\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+\n+@Path(\"/hello\")\n+public class GreetingResource {\n+\n+    @GET\n+    @Produces(MediaType.TEXT_PLAIN)\n+    public String hello() {\n+        return \"hello\";\n+    }\n+}\n+----\n+\n+As we want to use configuration properties read from the Config Server, we will update the `GreetingResource` to inject the `message` property. The updated code will look like this:\n+\n+[source,java]\n+----\n+package org.acme.spring.spring.cloud.config.client;\n+\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+\n+import org.eclipse.microprofile.config.inject.ConfigProperty;\n+\n+@Path(\"/hello\")\n+public class GreetingResource {\n+\n+    @ConfigProperty(name = \"message\", defaultValue=\"hello default\")\n+    String message;\n+\n+    @GET\n+    @Produces(MediaType.TEXT_PLAIN)\n+    public String hello() {\n+        return message;\n+    }\n+}\n+----\n+\n+== Configuring the application\n+\n+Quarkus provides various configuration knobs under the `quarkus.scccc` root. For the purposes of this guide, our Quarkus application is going to be configured in `application.properties` as follows:", "originalCommit": "81de75e80092d8df8fd1080c9fb4291adfc4fc9a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTgwMzIwNA==", "url": "https://github.com/quarkusio/quarkus/pull/7273#discussion_r381803204", "bodyText": "This is just something I picked so it wouldn't be super long to type. I'm definitely not tied to this, so I am open to ideas. @gastaldi what's your take?", "author": "geoand", "createdAt": "2020-02-20T06:36:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTM4NjQzOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTgxMjA3MA==", "url": "https://github.com/quarkusio/quarkus/pull/7273#discussion_r381812070", "bodyText": "I went with your suggestion. But if anyone has any other suggestion, I am willing to hear it :)", "author": "geoand", "createdAt": "2020-02-20T06:52:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTM4NjQzOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTkzMjcyMA==", "url": "https://github.com/quarkusio/quarkus/pull/7273#discussion_r381932720", "bodyText": "+1", "author": "gastaldi", "createdAt": "2020-02-20T11:09:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTM4NjQzOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTM4Njc3OA==", "url": "https://github.com/quarkusio/quarkus/pull/7273#discussion_r381386778", "bodyText": "is there any value in using uri? I would have used url.", "author": "gsmet", "createdAt": "2020-02-19T16:24:43Z", "path": "docs/src/main/asciidoc/spring-cloud-config-client.adoc", "diffHunk": "@@ -0,0 +1,140 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Reading properties from Spring Config Server\n+\n+include::./attributes.adoc[]\n+:extension-status: preview\n+\n+This guide explains how your Quarkus application can read configuration properties at runtime from the https://cloud.spring.io/spring-cloud-config[Spring Cloud Config Server].\n+\n+include::./status-include.adoc[]\n+\n+== Prerequisites\n+\n+To complete this guide, you need:\n+\n+* less than 15 minutes\n+* an IDE\n+* JDK 1.8+ installed with `JAVA_HOME` configured appropriately\n+* Apache Maven 3.5.3+\n+\n+\n+== Solution\n+\n+We recommend that you follow the instructions in the next sections and create the application step by step.\n+\n+== Stand up a Config Server\n+\n+To stand up a Config Server required for this guide, please follow the instructions outlined https://github.com/spring-guides/gs-centralized-configuration#stand-up-a-config-server[here].\n+The end result of that process is a running Config Server that will provide the `Hello world` value for a configuration property named `message` when the application querying the server is named `a-bootiful-client`.\n+\n+== Creating the Maven project\n+\n+First, we need a new project. Create a new project with the following command:\n+\n+[source,shell,subs=attributes+]\n+----\n+mvn io.quarkus:quarkus-maven-plugin:{quarkus-version}:create \\\n+    -DprojectGroupId=org.acme \\\n+    -DprojectArtifactId=spring-cloud-config-quickstart \\\n+    -DclassName=\"org.acme.spring.cloud.config.client.GreetingResource\" \\\n+    -Dpath=\"/greeting\" \\\n+    -Dextensions=\"spring-cloud-config-client\"\n+cd spring-cloud-config-quickstart\n+----\n+\n+This command generates a Maven project with a REST endpoint and imports the `spring-cloud-config-client` extension.\n+\n+== GreetingController\n+\n+The Quarkus maven plugin automatically generated a `GreetingResource` JAX-RS resource in the\n+`src/main/java/org/acme/spring/cloud/config/client/GreetingResource.java` file that looks like:\n+\n+[source,java]\n+----\n+package org.acme.spring.spring.cloud.config.client;\n+\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+\n+@Path(\"/hello\")\n+public class GreetingResource {\n+\n+    @GET\n+    @Produces(MediaType.TEXT_PLAIN)\n+    public String hello() {\n+        return \"hello\";\n+    }\n+}\n+----\n+\n+As we want to use configuration properties read from the Config Server, we will update the `GreetingResource` to inject the `message` property. The updated code will look like this:\n+\n+[source,java]\n+----\n+package org.acme.spring.spring.cloud.config.client;\n+\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+\n+import org.eclipse.microprofile.config.inject.ConfigProperty;\n+\n+@Path(\"/hello\")\n+public class GreetingResource {\n+\n+    @ConfigProperty(name = \"message\", defaultValue=\"hello default\")\n+    String message;\n+\n+    @GET\n+    @Produces(MediaType.TEXT_PLAIN)\n+    public String hello() {\n+        return message;\n+    }\n+}\n+----\n+\n+== Configuring the application\n+\n+Quarkus provides various configuration knobs under the `quarkus.scccc` root. For the purposes of this guide, our Quarkus application is going to be configured in `application.properties` as follows:\n+\n+[source,properties]\n+----\n+# use the same name as the application name that was configured when standing up the Config Server\n+quarkus.application.name=a-bootiful-client\n+# enable retrieval of configuration from the Config Server - this is off by default\n+quarkus.scccc.enabled=true\n+# configure the URI where the Config Server listens to HTTP requests - this could have been left out since http://localhost:8888 is the default\n+quarkus.scccc.uri=http://localhost:8888", "originalCommit": "81de75e80092d8df8fd1080c9fb4291adfc4fc9a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTgxMTk2MA==", "url": "https://github.com/quarkusio/quarkus/pull/7273#discussion_r381811960", "bodyText": "Yeah, that makes sense", "author": "geoand", "createdAt": "2020-02-20T06:52:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTM4Njc3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTk0MjQxNQ==", "url": "https://github.com/quarkusio/quarkus/pull/7273#discussion_r381942415", "bodyText": "I don't think you have changed that one?", "author": "gsmet", "createdAt": "2020-02-20T11:30:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTM4Njc3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTk0MzQ4MA==", "url": "https://github.com/quarkusio/quarkus/pull/7273#discussion_r381943480", "bodyText": "ah yes... I changed the name root but not the property itself... I'm not smart enough to keep track of 2 changes in my head :P", "author": "geoand", "createdAt": "2020-02-20T11:32:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTM4Njc3OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTM4NzI5Mw==", "url": "https://github.com/quarkusio/quarkus/pull/7273#discussion_r381387293", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The result should be: `Hello world`.\n          \n          \n            \n            The result should be: `Hello world` as it is the value obtained from the Spring Cloud Config server.", "author": "gsmet", "createdAt": "2020-02-19T16:25:28Z", "path": "docs/src/main/asciidoc/spring-cloud-config-client.adoc", "diffHunk": "@@ -0,0 +1,140 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Reading properties from Spring Config Server\n+\n+include::./attributes.adoc[]\n+:extension-status: preview\n+\n+This guide explains how your Quarkus application can read configuration properties at runtime from the https://cloud.spring.io/spring-cloud-config[Spring Cloud Config Server].\n+\n+include::./status-include.adoc[]\n+\n+== Prerequisites\n+\n+To complete this guide, you need:\n+\n+* less than 15 minutes\n+* an IDE\n+* JDK 1.8+ installed with `JAVA_HOME` configured appropriately\n+* Apache Maven 3.5.3+\n+\n+\n+== Solution\n+\n+We recommend that you follow the instructions in the next sections and create the application step by step.\n+\n+== Stand up a Config Server\n+\n+To stand up a Config Server required for this guide, please follow the instructions outlined https://github.com/spring-guides/gs-centralized-configuration#stand-up-a-config-server[here].\n+The end result of that process is a running Config Server that will provide the `Hello world` value for a configuration property named `message` when the application querying the server is named `a-bootiful-client`.\n+\n+== Creating the Maven project\n+\n+First, we need a new project. Create a new project with the following command:\n+\n+[source,shell,subs=attributes+]\n+----\n+mvn io.quarkus:quarkus-maven-plugin:{quarkus-version}:create \\\n+    -DprojectGroupId=org.acme \\\n+    -DprojectArtifactId=spring-cloud-config-quickstart \\\n+    -DclassName=\"org.acme.spring.cloud.config.client.GreetingResource\" \\\n+    -Dpath=\"/greeting\" \\\n+    -Dextensions=\"spring-cloud-config-client\"\n+cd spring-cloud-config-quickstart\n+----\n+\n+This command generates a Maven project with a REST endpoint and imports the `spring-cloud-config-client` extension.\n+\n+== GreetingController\n+\n+The Quarkus maven plugin automatically generated a `GreetingResource` JAX-RS resource in the\n+`src/main/java/org/acme/spring/cloud/config/client/GreetingResource.java` file that looks like:\n+\n+[source,java]\n+----\n+package org.acme.spring.spring.cloud.config.client;\n+\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+\n+@Path(\"/hello\")\n+public class GreetingResource {\n+\n+    @GET\n+    @Produces(MediaType.TEXT_PLAIN)\n+    public String hello() {\n+        return \"hello\";\n+    }\n+}\n+----\n+\n+As we want to use configuration properties read from the Config Server, we will update the `GreetingResource` to inject the `message` property. The updated code will look like this:\n+\n+[source,java]\n+----\n+package org.acme.spring.spring.cloud.config.client;\n+\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+\n+import org.eclipse.microprofile.config.inject.ConfigProperty;\n+\n+@Path(\"/hello\")\n+public class GreetingResource {\n+\n+    @ConfigProperty(name = \"message\", defaultValue=\"hello default\")\n+    String message;\n+\n+    @GET\n+    @Produces(MediaType.TEXT_PLAIN)\n+    public String hello() {\n+        return message;\n+    }\n+}\n+----\n+\n+== Configuring the application\n+\n+Quarkus provides various configuration knobs under the `quarkus.scccc` root. For the purposes of this guide, our Quarkus application is going to be configured in `application.properties` as follows:\n+\n+[source,properties]\n+----\n+# use the same name as the application name that was configured when standing up the Config Server\n+quarkus.application.name=a-bootiful-client\n+# enable retrieval of configuration from the Config Server - this is off by default\n+quarkus.scccc.enabled=true\n+# configure the URI where the Config Server listens to HTTP requests - this could have been left out since http://localhost:8888 is the default\n+quarkus.scccc.uri=http://localhost:8888\n+----\n+\n+== Package and run the application\n+\n+Run the application with: `./mvnw compile quarkus:dev`.\n+Open your browser to http://localhost:8080/greeting.\n+\n+The result should be: `Hello world`.", "originalCommit": "81de75e80092d8df8fd1080c9fb4291adfc4fc9a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTgxMTg1OQ==", "url": "https://github.com/quarkusio/quarkus/pull/7273#discussion_r381811859", "bodyText": "\ud83d\udc4d", "author": "geoand", "createdAt": "2020-02-20T06:52:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTM4NzI5Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTM4NzU4MA==", "url": "https://github.com/quarkusio/quarkus/pull/7273#discussion_r381387580", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Quarkus support has more Spring compatibility features. See the following guides for more details:\n          \n          \n            \n            Quarkus has more Spring compatibility features. See the following guides for more details:", "author": "gsmet", "createdAt": "2020-02-19T16:25:54Z", "path": "docs/src/main/asciidoc/spring-cloud-config-client.adoc", "diffHunk": "@@ -0,0 +1,140 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Reading properties from Spring Config Server\n+\n+include::./attributes.adoc[]\n+:extension-status: preview\n+\n+This guide explains how your Quarkus application can read configuration properties at runtime from the https://cloud.spring.io/spring-cloud-config[Spring Cloud Config Server].\n+\n+include::./status-include.adoc[]\n+\n+== Prerequisites\n+\n+To complete this guide, you need:\n+\n+* less than 15 minutes\n+* an IDE\n+* JDK 1.8+ installed with `JAVA_HOME` configured appropriately\n+* Apache Maven 3.5.3+\n+\n+\n+== Solution\n+\n+We recommend that you follow the instructions in the next sections and create the application step by step.\n+\n+== Stand up a Config Server\n+\n+To stand up a Config Server required for this guide, please follow the instructions outlined https://github.com/spring-guides/gs-centralized-configuration#stand-up-a-config-server[here].\n+The end result of that process is a running Config Server that will provide the `Hello world` value for a configuration property named `message` when the application querying the server is named `a-bootiful-client`.\n+\n+== Creating the Maven project\n+\n+First, we need a new project. Create a new project with the following command:\n+\n+[source,shell,subs=attributes+]\n+----\n+mvn io.quarkus:quarkus-maven-plugin:{quarkus-version}:create \\\n+    -DprojectGroupId=org.acme \\\n+    -DprojectArtifactId=spring-cloud-config-quickstart \\\n+    -DclassName=\"org.acme.spring.cloud.config.client.GreetingResource\" \\\n+    -Dpath=\"/greeting\" \\\n+    -Dextensions=\"spring-cloud-config-client\"\n+cd spring-cloud-config-quickstart\n+----\n+\n+This command generates a Maven project with a REST endpoint and imports the `spring-cloud-config-client` extension.\n+\n+== GreetingController\n+\n+The Quarkus maven plugin automatically generated a `GreetingResource` JAX-RS resource in the\n+`src/main/java/org/acme/spring/cloud/config/client/GreetingResource.java` file that looks like:\n+\n+[source,java]\n+----\n+package org.acme.spring.spring.cloud.config.client;\n+\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+\n+@Path(\"/hello\")\n+public class GreetingResource {\n+\n+    @GET\n+    @Produces(MediaType.TEXT_PLAIN)\n+    public String hello() {\n+        return \"hello\";\n+    }\n+}\n+----\n+\n+As we want to use configuration properties read from the Config Server, we will update the `GreetingResource` to inject the `message` property. The updated code will look like this:\n+\n+[source,java]\n+----\n+package org.acme.spring.spring.cloud.config.client;\n+\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+\n+import org.eclipse.microprofile.config.inject.ConfigProperty;\n+\n+@Path(\"/hello\")\n+public class GreetingResource {\n+\n+    @ConfigProperty(name = \"message\", defaultValue=\"hello default\")\n+    String message;\n+\n+    @GET\n+    @Produces(MediaType.TEXT_PLAIN)\n+    public String hello() {\n+        return message;\n+    }\n+}\n+----\n+\n+== Configuring the application\n+\n+Quarkus provides various configuration knobs under the `quarkus.scccc` root. For the purposes of this guide, our Quarkus application is going to be configured in `application.properties` as follows:\n+\n+[source,properties]\n+----\n+# use the same name as the application name that was configured when standing up the Config Server\n+quarkus.application.name=a-bootiful-client\n+# enable retrieval of configuration from the Config Server - this is off by default\n+quarkus.scccc.enabled=true\n+# configure the URI where the Config Server listens to HTTP requests - this could have been left out since http://localhost:8888 is the default\n+quarkus.scccc.uri=http://localhost:8888\n+----\n+\n+== Package and run the application\n+\n+Run the application with: `./mvnw compile quarkus:dev`.\n+Open your browser to http://localhost:8080/greeting.\n+\n+The result should be: `Hello world`.\n+\n+== Run the application as a native executable\n+\n+You can of course create a native image using the instructions of the link:building-native-image[Building a native executable guide].\n+\n+== More Spring guides\n+\n+Quarkus support has more Spring compatibility features. See the following guides for more details:", "originalCommit": "81de75e80092d8df8fd1080c9fb4291adfc4fc9a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTM4ODAyNw==", "url": "https://github.com/quarkusio/quarkus/pull/7273#discussion_r381388027", "bodyText": "Should you add this guide in the other guides now that we have it?", "author": "gsmet", "createdAt": "2020-02-19T16:26:33Z", "path": "docs/src/main/asciidoc/spring-cloud-config-client.adoc", "diffHunk": "@@ -0,0 +1,140 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Reading properties from Spring Config Server\n+\n+include::./attributes.adoc[]\n+:extension-status: preview\n+\n+This guide explains how your Quarkus application can read configuration properties at runtime from the https://cloud.spring.io/spring-cloud-config[Spring Cloud Config Server].\n+\n+include::./status-include.adoc[]\n+\n+== Prerequisites\n+\n+To complete this guide, you need:\n+\n+* less than 15 minutes\n+* an IDE\n+* JDK 1.8+ installed with `JAVA_HOME` configured appropriately\n+* Apache Maven 3.5.3+\n+\n+\n+== Solution\n+\n+We recommend that you follow the instructions in the next sections and create the application step by step.\n+\n+== Stand up a Config Server\n+\n+To stand up a Config Server required for this guide, please follow the instructions outlined https://github.com/spring-guides/gs-centralized-configuration#stand-up-a-config-server[here].\n+The end result of that process is a running Config Server that will provide the `Hello world` value for a configuration property named `message` when the application querying the server is named `a-bootiful-client`.\n+\n+== Creating the Maven project\n+\n+First, we need a new project. Create a new project with the following command:\n+\n+[source,shell,subs=attributes+]\n+----\n+mvn io.quarkus:quarkus-maven-plugin:{quarkus-version}:create \\\n+    -DprojectGroupId=org.acme \\\n+    -DprojectArtifactId=spring-cloud-config-quickstart \\\n+    -DclassName=\"org.acme.spring.cloud.config.client.GreetingResource\" \\\n+    -Dpath=\"/greeting\" \\\n+    -Dextensions=\"spring-cloud-config-client\"\n+cd spring-cloud-config-quickstart\n+----\n+\n+This command generates a Maven project with a REST endpoint and imports the `spring-cloud-config-client` extension.\n+\n+== GreetingController\n+\n+The Quarkus maven plugin automatically generated a `GreetingResource` JAX-RS resource in the\n+`src/main/java/org/acme/spring/cloud/config/client/GreetingResource.java` file that looks like:\n+\n+[source,java]\n+----\n+package org.acme.spring.spring.cloud.config.client;\n+\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+\n+@Path(\"/hello\")\n+public class GreetingResource {\n+\n+    @GET\n+    @Produces(MediaType.TEXT_PLAIN)\n+    public String hello() {\n+        return \"hello\";\n+    }\n+}\n+----\n+\n+As we want to use configuration properties read from the Config Server, we will update the `GreetingResource` to inject the `message` property. The updated code will look like this:\n+\n+[source,java]\n+----\n+package org.acme.spring.spring.cloud.config.client;\n+\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+\n+import org.eclipse.microprofile.config.inject.ConfigProperty;\n+\n+@Path(\"/hello\")\n+public class GreetingResource {\n+\n+    @ConfigProperty(name = \"message\", defaultValue=\"hello default\")\n+    String message;\n+\n+    @GET\n+    @Produces(MediaType.TEXT_PLAIN)\n+    public String hello() {\n+        return message;\n+    }\n+}\n+----\n+\n+== Configuring the application\n+\n+Quarkus provides various configuration knobs under the `quarkus.scccc` root. For the purposes of this guide, our Quarkus application is going to be configured in `application.properties` as follows:\n+\n+[source,properties]\n+----\n+# use the same name as the application name that was configured when standing up the Config Server\n+quarkus.application.name=a-bootiful-client\n+# enable retrieval of configuration from the Config Server - this is off by default\n+quarkus.scccc.enabled=true\n+# configure the URI where the Config Server listens to HTTP requests - this could have been left out since http://localhost:8888 is the default\n+quarkus.scccc.uri=http://localhost:8888\n+----\n+\n+== Package and run the application\n+\n+Run the application with: `./mvnw compile quarkus:dev`.\n+Open your browser to http://localhost:8080/greeting.\n+\n+The result should be: `Hello world`.\n+\n+== Run the application as a native executable\n+\n+You can of course create a native image using the instructions of the link:building-native-image[Building a native executable guide].\n+\n+== More Spring guides\n+\n+Quarkus support has more Spring compatibility features. See the following guides for more details:\n+\n+* link:spring-di[Quarkus - Extension for Spring DI]\n+* link:spring-data-jpa[Quarkus - Extension for Spring Data JPA]\n+* link:spring-security[Quarkus - Extension for Spring Security]", "originalCommit": "81de75e80092d8df8fd1080c9fb4291adfc4fc9a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTM4OTg4OQ==", "url": "https://github.com/quarkusio/quarkus/pull/7273#discussion_r381389889", "bodyText": "Very good idea!", "author": "geoand", "createdAt": "2020-02-19T16:29:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTM4ODAyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTgxMTcwNg==", "url": "https://github.com/quarkusio/quarkus/pull/7273#discussion_r381811706", "bodyText": "Done", "author": "geoand", "createdAt": "2020-02-20T06:51:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTM4ODAyNw=="}], "type": "inlineReview"}, {"oid": "a4751f0dc882681d350f3688b21fec236845900f", "url": "https://github.com/quarkusio/quarkus/commit/a4751f0dc882681d350f3688b21fec236845900f", "message": "Use better names for the Spring Cloud Config configuration", "committedDate": "2020-02-20T06:41:43Z", "type": "commit"}, {"oid": "849956c5403be25541af0e82d1696ae9f8c0bcda", "url": "https://github.com/quarkusio/quarkus/commit/849956c5403be25541af0e82d1696ae9f8c0bcda", "message": "Add guide for Spring Cloud Config Client extension", "committedDate": "2020-02-20T06:51:30Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTk0Mjk0Mw==", "url": "https://github.com/quarkusio/quarkus/pull/7273#discussion_r381942943", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # configure the URI where the Config Server listens to HTTP requests - this could have been left out since http://localhost:8888 is the default\n          \n          \n            \n            # configure the URL where the Config Server listens to HTTP requests - this could have been left out since http://localhost:8888 is the default", "author": "gsmet", "createdAt": "2020-02-20T11:31:26Z", "path": "docs/src/main/asciidoc/spring-cloud-config-client.adoc", "diffHunk": "@@ -0,0 +1,140 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Reading properties from Spring Cloud Config Server\n+\n+include::./attributes.adoc[]\n+:extension-status: preview\n+\n+This guide explains how your Quarkus application can read configuration properties at runtime from the https://cloud.spring.io/spring-cloud-config[Spring Cloud Config Server].\n+\n+include::./status-include.adoc[]\n+\n+== Prerequisites\n+\n+To complete this guide, you need:\n+\n+* less than 15 minutes\n+* an IDE\n+* JDK 1.8+ installed with `JAVA_HOME` configured appropriately\n+* Apache Maven 3.5.3+\n+\n+\n+== Solution\n+\n+We recommend that you follow the instructions in the next sections and create the application step by step.\n+\n+== Stand up a Config Server\n+\n+To stand up the Config Server required for this guide, please follow the instructions outlined https://github.com/spring-guides/gs-centralized-configuration#stand-up-a-config-server[here].\n+The end result of that process is a running Config Server that will provide the `Hello world` value for a configuration property named `message` when the application querying the server is named `a-bootiful-client`.\n+\n+== Creating the Maven project\n+\n+First, we need a new project. Create a new project with the following command:\n+\n+[source,shell,subs=attributes+]\n+----\n+mvn io.quarkus:quarkus-maven-plugin:{quarkus-version}:create \\\n+    -DprojectGroupId=org.acme \\\n+    -DprojectArtifactId=spring-cloud-config-quickstart \\\n+    -DclassName=\"org.acme.spring.cloud.config.client.GreetingResource\" \\\n+    -Dpath=\"/greeting\" \\\n+    -Dextensions=\"spring-cloud-config-client\"\n+cd spring-cloud-config-quickstart\n+----\n+\n+This command generates a Maven project with a REST endpoint and imports the `spring-cloud-config-client` extension.\n+\n+== GreetingController\n+\n+The Quarkus Maven plugin automatically generated a `GreetingResource` JAX-RS resource in the\n+`src/main/java/org/acme/spring/cloud/config/client/GreetingResource.java` file that looks like:\n+\n+[source,java]\n+----\n+package org.acme.spring.spring.cloud.config.client;\n+\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+\n+@Path(\"/hello\")\n+public class GreetingResource {\n+\n+    @GET\n+    @Produces(MediaType.TEXT_PLAIN)\n+    public String hello() {\n+        return \"hello\";\n+    }\n+}\n+----\n+\n+As we want to use configuration properties obtained from the Config Server, we will update the `GreetingResource` to inject the `message` property. The updated code will look like this:\n+\n+[source,java]\n+----\n+package org.acme.spring.spring.cloud.config.client;\n+\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+\n+import org.eclipse.microprofile.config.inject.ConfigProperty;\n+\n+@Path(\"/hello\")\n+public class GreetingResource {\n+\n+    @ConfigProperty(name = \"message\", defaultValue=\"hello default\")\n+    String message;\n+\n+    @GET\n+    @Produces(MediaType.TEXT_PLAIN)\n+    public String hello() {\n+        return message;\n+    }\n+}\n+----\n+\n+== Configuring the application\n+\n+Quarkus provides various configuration knobs under the `quarkus.spring-cloud-config` root. For the purposes of this guide, our Quarkus application is going to be configured in `application.properties` as follows:\n+\n+[source,properties]\n+----\n+# use the same name as the application name that was configured when standing up the Config Server\n+quarkus.application.name=a-bootiful-client\n+# enable retrieval of configuration from the Config Server - this is off by default\n+quarkus.spring-cloud-config.enabled=true\n+# configure the URI where the Config Server listens to HTTP requests - this could have been left out since http://localhost:8888 is the default", "originalCommit": "849956c5403be25541af0e82d1696ae9f8c0bcda", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTk0MzAwMg==", "url": "https://github.com/quarkusio/quarkus/pull/7273#discussion_r381943002", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            quarkus.spring-cloud-config.uri=http://localhost:8888\n          \n          \n            \n            quarkus.spring-cloud-config.url=http://localhost:8888", "author": "gsmet", "createdAt": "2020-02-20T11:31:35Z", "path": "docs/src/main/asciidoc/spring-cloud-config-client.adoc", "diffHunk": "@@ -0,0 +1,140 @@\n+////\n+This guide is maintained in the main Quarkus repository\n+and pull requests should be submitted there:\n+https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc\n+////\n+= Quarkus - Reading properties from Spring Cloud Config Server\n+\n+include::./attributes.adoc[]\n+:extension-status: preview\n+\n+This guide explains how your Quarkus application can read configuration properties at runtime from the https://cloud.spring.io/spring-cloud-config[Spring Cloud Config Server].\n+\n+include::./status-include.adoc[]\n+\n+== Prerequisites\n+\n+To complete this guide, you need:\n+\n+* less than 15 minutes\n+* an IDE\n+* JDK 1.8+ installed with `JAVA_HOME` configured appropriately\n+* Apache Maven 3.5.3+\n+\n+\n+== Solution\n+\n+We recommend that you follow the instructions in the next sections and create the application step by step.\n+\n+== Stand up a Config Server\n+\n+To stand up the Config Server required for this guide, please follow the instructions outlined https://github.com/spring-guides/gs-centralized-configuration#stand-up-a-config-server[here].\n+The end result of that process is a running Config Server that will provide the `Hello world` value for a configuration property named `message` when the application querying the server is named `a-bootiful-client`.\n+\n+== Creating the Maven project\n+\n+First, we need a new project. Create a new project with the following command:\n+\n+[source,shell,subs=attributes+]\n+----\n+mvn io.quarkus:quarkus-maven-plugin:{quarkus-version}:create \\\n+    -DprojectGroupId=org.acme \\\n+    -DprojectArtifactId=spring-cloud-config-quickstart \\\n+    -DclassName=\"org.acme.spring.cloud.config.client.GreetingResource\" \\\n+    -Dpath=\"/greeting\" \\\n+    -Dextensions=\"spring-cloud-config-client\"\n+cd spring-cloud-config-quickstart\n+----\n+\n+This command generates a Maven project with a REST endpoint and imports the `spring-cloud-config-client` extension.\n+\n+== GreetingController\n+\n+The Quarkus Maven plugin automatically generated a `GreetingResource` JAX-RS resource in the\n+`src/main/java/org/acme/spring/cloud/config/client/GreetingResource.java` file that looks like:\n+\n+[source,java]\n+----\n+package org.acme.spring.spring.cloud.config.client;\n+\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+\n+@Path(\"/hello\")\n+public class GreetingResource {\n+\n+    @GET\n+    @Produces(MediaType.TEXT_PLAIN)\n+    public String hello() {\n+        return \"hello\";\n+    }\n+}\n+----\n+\n+As we want to use configuration properties obtained from the Config Server, we will update the `GreetingResource` to inject the `message` property. The updated code will look like this:\n+\n+[source,java]\n+----\n+package org.acme.spring.spring.cloud.config.client;\n+\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+\n+import org.eclipse.microprofile.config.inject.ConfigProperty;\n+\n+@Path(\"/hello\")\n+public class GreetingResource {\n+\n+    @ConfigProperty(name = \"message\", defaultValue=\"hello default\")\n+    String message;\n+\n+    @GET\n+    @Produces(MediaType.TEXT_PLAIN)\n+    public String hello() {\n+        return message;\n+    }\n+}\n+----\n+\n+== Configuring the application\n+\n+Quarkus provides various configuration knobs under the `quarkus.spring-cloud-config` root. For the purposes of this guide, our Quarkus application is going to be configured in `application.properties` as follows:\n+\n+[source,properties]\n+----\n+# use the same name as the application name that was configured when standing up the Config Server\n+quarkus.application.name=a-bootiful-client\n+# enable retrieval of configuration from the Config Server - this is off by default\n+quarkus.spring-cloud-config.enabled=true\n+# configure the URI where the Config Server listens to HTTP requests - this could have been left out since http://localhost:8888 is the default\n+quarkus.spring-cloud-config.uri=http://localhost:8888", "originalCommit": "849956c5403be25541af0e82d1696ae9f8c0bcda", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "88573590157066cb17834f1a3144e95a000883ed", "url": "https://github.com/quarkusio/quarkus/commit/88573590157066cb17834f1a3144e95a000883ed", "message": "Add guide for Spring Cloud Config Client extension", "committedDate": "2020-02-20T11:32:07Z", "type": "forcePushed"}, {"oid": "ee41c178f67fd9c4238196068aa2c41268cc8933", "url": "https://github.com/quarkusio/quarkus/commit/ee41c178f67fd9c4238196068aa2c41268cc8933", "message": "Add guide for Spring Cloud Config Client extension", "committedDate": "2020-02-20T11:32:54Z", "type": "commit"}, {"oid": "ee41c178f67fd9c4238196068aa2c41268cc8933", "url": "https://github.com/quarkusio/quarkus/commit/ee41c178f67fd9c4238196068aa2c41268cc8933", "message": "Add guide for Spring Cloud Config Client extension", "committedDate": "2020-02-20T11:32:54Z", "type": "forcePushed"}]}