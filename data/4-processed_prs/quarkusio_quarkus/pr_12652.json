{"pr_number": 12652, "pr_title": "Consolidate all UI related extensions.", "pr_createdAt": "2020-10-12T08:25:00Z", "pr_url": "https://github.com/quarkusio/quarkus/pull/12652", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQyNjg1OQ==", "url": "https://github.com/quarkusio/quarkus/pull/12652#discussion_r503426859", "bodyText": "What about multiple concurrenly running Quarkus instances? They might overwrite each other.\nThe safest thing would be to use FileLock, but this is not going to work for a directory, I fear...", "author": "famod", "createdAt": "2020-10-12T17:08:03Z", "path": "core/deployment/src/main/java/io/quarkus/deployment/util/WebJarUtil.java", "diffHunk": "@@ -0,0 +1,129 @@\n+package io.quarkus.deployment.util;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.file.DirectoryStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.Enumeration;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.jar.JarEntry;\n+import java.util.jar.JarFile;\n+\n+import io.quarkus.bootstrap.model.AppArtifact;\n+import io.quarkus.bootstrap.model.AppDependency;\n+import io.quarkus.deployment.pkg.builditem.CurateOutcomeBuildItem;\n+\n+/**\n+ * Utility for Web resource related operations\n+ */\n+public class WebJarUtil {\n+\n+    private final static String tmpDir = System.getProperty(\"java.io.tmpdir\");\n+    private static final String OWN_MEDIA_FOLDER = \"META-INF/resources/\";\n+    private static final List<String> IGNORE_LIST = Arrays.asList(\"logo.png\", \"favicon.ico\");\n+\n+    private WebJarUtil() {\n+    }\n+\n+    public static Path devOrTest(AppArtifact artifact, String rootFolderInJar)\n+            throws IOException {\n+\n+        Path path = createDir(artifact.getGroupId(), artifact.getArtifactId(), artifact.getVersion());\n+        if (isEmpty(path)) {", "originalCommit": "3e97d5dd8b0c93ab146249da564bacee7052432c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzY5NDYyNw==", "url": "https://github.com/quarkusio/quarkus/pull/12652#discussion_r503694627", "bodyText": "This is for dev mode, so we are saying that a developer will run concurrent versions of the same app at the exact same time ? I do not think we have to worry too much about this but I might be wrong.", "author": "phillip-kruger", "createdAt": "2020-10-13T06:25:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQyNjg1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzc2ODgxMg==", "url": "https://github.com/quarkusio/quarkus/pull/12652#discussion_r503768812", "bodyText": "Ok I added a lock for the file when we create it.", "author": "phillip-kruger", "createdAt": "2020-10-13T08:36:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQyNjg1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzc3NjQ5MQ==", "url": "https://github.com/quarkusio/quarkus/pull/12652#discussion_r503776491", "bodyText": "This is for dev mode\n\nAnd for tests, no?\nTests might be eve more prone to this. Imagine multiple concurrent builds on a Jenkins CI server (which doesn't run each build in a container).\n\nthe same app\n\nDoesn't need to be the same app. As long as those multiple apps use the same swagger-ui (etc.) version, a clash ist possible.\nBtw, we are developing a (very) modular monolith and we in fact fire up multiple dev mode instances (in different submodules) in CI because they broke too often unnoticed.", "author": "famod", "createdAt": "2020-10-13T08:47:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQyNjg1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzc3ODk5OA==", "url": "https://github.com/quarkusio/quarkus/pull/12652#discussion_r503778998", "bodyText": "True. There is a lock in place now. Let's handle issues (if any) as we get them ?", "author": "phillip-kruger", "createdAt": "2020-10-13T08:51:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQyNjg1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzc4MDM0MQ==", "url": "https://github.com/quarkusio/quarkus/pull/12652#discussion_r503780341", "bodyText": "Ok I added a lock for the file when we create it.\n\nThis is now done per file? Hm, how many files are there on average?\nFileLock imposes some overhead so it would be good to limit it to one lock for all files but then again we already have the path check so I might be over-optimizing here...", "author": "famod", "createdAt": "2020-10-13T08:53:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQyNjg1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzc4Nzg0OQ==", "url": "https://github.com/quarkusio/quarkus/pull/12652#discussion_r503787849", "bodyText": "openapi = 8 files\ngraphql = 9 files\nhealth = 9 files\nI think it's ok like this ?", "author": "phillip-kruger", "createdAt": "2020-10-13T09:04:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQyNjg1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzgzOTY0Nw==", "url": "https://github.com/quarkusio/quarkus/pull/12652#discussion_r503839647", "bodyText": "I think it's ok like this ?\n\nShould be. You don't have any runtime numbers (in ms), do you?", "author": "famod", "createdAt": "2020-10-13T10:25:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQyNjg1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzg0MDYwMQ==", "url": "https://github.com/quarkusio/quarkus/pull/12652#discussion_r503840601", "bodyText": "Nope", "author": "phillip-kruger", "createdAt": "2020-10-13T10:27:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQyNjg1OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzg0MTY4OQ==", "url": "https://github.com/quarkusio/quarkus/pull/12652#discussion_r503841689", "bodyText": "To reduce the overhead for \"concurrent access\" case, I would pull this line up (out of the try (InputStream inputStream = ...) and call continue in case the file already exists.\nBut this is a really minor finding.", "author": "famod", "createdAt": "2020-10-13T10:29:08Z", "path": "core/deployment/src/main/java/io/quarkus/deployment/util/WebJarUtil.java", "diffHunk": "@@ -0,0 +1,150 @@\n+package io.quarkus.deployment.util;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.RandomAccessFile;\n+import java.nio.channels.FileChannel;\n+import java.nio.channels.FileLock;\n+import java.nio.file.DirectoryStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.nio.file.StandardCopyOption;\n+import java.util.Arrays;\n+import java.util.Enumeration;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.jar.JarEntry;\n+import java.util.jar.JarFile;\n+\n+import io.quarkus.bootstrap.model.AppArtifact;\n+import io.quarkus.bootstrap.model.AppDependency;\n+import io.quarkus.deployment.pkg.builditem.CurateOutcomeBuildItem;\n+\n+/**\n+ * Utility for Web resource related operations\n+ */\n+public class WebJarUtil {\n+\n+    private final static String tmpDir = System.getProperty(\"java.io.tmpdir\");\n+    private static final String OWN_MEDIA_FOLDER = \"META-INF/resources/\";\n+    private static final List<String> IGNORE_LIST = Arrays.asList(\"logo.png\", \"favicon.ico\");\n+\n+    private WebJarUtil() {\n+    }\n+\n+    public static Path devOrTest(AppArtifact artifact, String rootFolderInJar)\n+            throws IOException {\n+\n+        Path path = createDir(artifact.getGroupId(), artifact.getArtifactId(), artifact.getVersion());\n+        if (isEmpty(path)) {\n+            ClassLoader classLoader = WebJarUtil.class.getClassLoader();\n+            for (Path p : artifact.getPaths()) {\n+                File artifactFile = p.toFile();\n+                try (JarFile jarFile = new JarFile(artifactFile)) {\n+                    Enumeration<JarEntry> entries = jarFile.entries();\n+                    while (entries.hasMoreElements()) {\n+                        JarEntry entry = entries.nextElement();\n+                        if (entry.getName().startsWith(rootFolderInJar) && !entry.isDirectory()) {\n+                            try (InputStream inputStream = jarFile.getInputStream(entry)) {\n+                                String filename = entry.getName().replace(rootFolderInJar, \"\");", "originalCommit": "7eea52b62a622eb2a7b96165cfda3fad776ddf72", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzg0NDg3Mg==", "url": "https://github.com/quarkusio/quarkus/pull/12652#discussion_r503844872", "bodyText": "Feels like premature optimization.... let's wait and see if it's so bad that people complain ? w.d.y.t ?", "author": "phillip-kruger", "createdAt": "2020-10-13T10:34:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzg0MTY4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzg4ODM2OA==", "url": "https://github.com/quarkusio/quarkus/pull/12652#discussion_r503888368", "bodyText": "Yeah, sure.", "author": "famod", "createdAt": "2020-10-13T11:53:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzg0MTY4OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDI0ODE5Ng==", "url": "https://github.com/quarkusio/quarkus/pull/12652#discussion_r504248196", "bodyText": "Do we see this changing with updates of UI? Maybe having it as property will be better", "author": "wtrocki", "createdAt": "2020-10-13T20:46:20Z", "path": "core/deployment/src/main/java/io/quarkus/deployment/util/WebJarUtil.java", "diffHunk": "@@ -0,0 +1,174 @@\n+package io.quarkus.deployment.util;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.RandomAccessFile;\n+import java.nio.channels.FileChannel;\n+import java.nio.channels.FileLock;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.DirectoryStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.nio.file.StandardCopyOption;\n+import java.util.Arrays;\n+import java.util.Enumeration;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Scanner;\n+import java.util.jar.JarEntry;\n+import java.util.jar.JarFile;\n+\n+import io.quarkus.bootstrap.model.AppArtifact;\n+import io.quarkus.bootstrap.model.AppDependency;\n+import io.quarkus.deployment.pkg.builditem.CurateOutcomeBuildItem;\n+\n+/**\n+ * Utility for Web resource related operations\n+ */\n+public class WebJarUtil {\n+\n+    private final static String tmpDir = System.getProperty(\"java.io.tmpdir\");\n+    private static final String OWN_MEDIA_FOLDER = \"META-INF/branding/\";\n+    private static final List<String> IGNORE_LIST = Arrays.asList(\"logo.png\", \"favicon.ico\");", "originalCommit": "abe1bb9c3136ecc7f508756721f04e31c4cfb94a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDM5OTYzNQ==", "url": "https://github.com/quarkusio/quarkus/pull/12652#discussion_r504399635", "bodyText": "Nope. This is added manually by us in SmallRye. All 3 of the current UI's. In SmallRye it's the SmallRye logo. There is a 3rd one coming in later releases, style.css. That will allows users to do better custom branding", "author": "phillip-kruger", "createdAt": "2020-10-14T04:50:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDI0ODE5Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTc2MDcyNg==", "url": "https://github.com/quarkusio/quarkus/pull/12652#discussion_r505760726", "bodyText": "Use JarFiles.create from Smallrye Common IO to support MR jars here", "author": "gastaldi", "createdAt": "2020-10-15T18:39:02Z", "path": "core/deployment/src/main/java/io/quarkus/deployment/util/WebJarUtil.java", "diffHunk": "@@ -0,0 +1,300 @@\n+package io.quarkus.deployment.util;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.URL;\n+import java.nio.channels.FileChannel;\n+import java.nio.channels.FileLock;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.DirectoryStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.Enumeration;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Scanner;\n+import java.util.jar.JarEntry;\n+import java.util.jar.JarFile;\n+\n+import org.jboss.logging.Logger;\n+\n+import io.quarkus.bootstrap.model.AppArtifact;\n+import io.quarkus.bootstrap.model.AppDependency;\n+import io.quarkus.bootstrap.model.PathsCollection;\n+import io.quarkus.bootstrap.util.IoUtils;\n+import io.quarkus.deployment.builditem.LaunchModeBuildItem;\n+import io.quarkus.deployment.pkg.builditem.CurateOutcomeBuildItem;\n+import io.quarkus.runtime.LaunchMode;\n+\n+/**\n+ * Utility for Web resource related operations\n+ */\n+public class WebJarUtil {\n+\n+    private static final Logger LOG = Logger.getLogger(WebJarUtil.class);\n+\n+    private final static String tmpDir = System.getProperty(\"java.io.tmpdir\");\n+    private static final String CUSTOM_MEDIA_FOLDER = \"META-INF/branding/\";\n+    private static final List<String> IGNORE_LIST = Arrays.asList(\"logo.png\", \"favicon.ico\", \"style.css\");\n+\n+    private WebJarUtil() {\n+    }\n+\n+    public static Path devOrTest(CurateOutcomeBuildItem curateOutcomeBuildItem, LaunchModeBuildItem launch,\n+            AppArtifact artifact, String rootFolderInJar)\n+            throws IOException {\n+\n+        AppArtifact userApplication = curateOutcomeBuildItem.getEffectiveModel().getAppArtifact();\n+\n+        Path path = createDir(userApplication.getArtifactId(), artifact.getGroupId(), artifact.getArtifactId(),\n+                artifact.getVersion());\n+\n+        // Clean on non dev mode\n+        if (!launch.getLaunchMode().equals(LaunchMode.DEVELOPMENT)) {\n+            IoUtils.recursiveDeleteAndThenCreate(path);\n+        }\n+\n+        if (isEmpty(path)) {\n+            ClassLoader classLoader = WebJarUtil.class.getClassLoader();\n+            for (Path p : artifact.getPaths()) {\n+                File artifactFile = p.toFile();\n+                try (JarFile jarFile = new JarFile(artifactFile)) {", "originalCommit": "438a2e19796e44dc250d173e39a212d0242f67c5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjA4MzY2OA==", "url": "https://github.com/quarkusio/quarkus/pull/12652#discussion_r506083668", "bodyText": "Thanks ! Fixed.", "author": "phillip-kruger", "createdAt": "2020-10-16T06:28:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTc2MDcyNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTc2MTAxNw==", "url": "https://github.com/quarkusio/quarkus/pull/12652#discussion_r505761017", "bodyText": "Same as above", "author": "gastaldi", "createdAt": "2020-10-15T18:39:32Z", "path": "core/deployment/src/main/java/io/quarkus/deployment/util/WebJarUtil.java", "diffHunk": "@@ -0,0 +1,300 @@\n+package io.quarkus.deployment.util;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.URL;\n+import java.nio.channels.FileChannel;\n+import java.nio.channels.FileLock;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.DirectoryStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.Enumeration;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Scanner;\n+import java.util.jar.JarEntry;\n+import java.util.jar.JarFile;\n+\n+import org.jboss.logging.Logger;\n+\n+import io.quarkus.bootstrap.model.AppArtifact;\n+import io.quarkus.bootstrap.model.AppDependency;\n+import io.quarkus.bootstrap.model.PathsCollection;\n+import io.quarkus.bootstrap.util.IoUtils;\n+import io.quarkus.deployment.builditem.LaunchModeBuildItem;\n+import io.quarkus.deployment.pkg.builditem.CurateOutcomeBuildItem;\n+import io.quarkus.runtime.LaunchMode;\n+\n+/**\n+ * Utility for Web resource related operations\n+ */\n+public class WebJarUtil {\n+\n+    private static final Logger LOG = Logger.getLogger(WebJarUtil.class);\n+\n+    private final static String tmpDir = System.getProperty(\"java.io.tmpdir\");\n+    private static final String CUSTOM_MEDIA_FOLDER = \"META-INF/branding/\";\n+    private static final List<String> IGNORE_LIST = Arrays.asList(\"logo.png\", \"favicon.ico\", \"style.css\");\n+\n+    private WebJarUtil() {\n+    }\n+\n+    public static Path devOrTest(CurateOutcomeBuildItem curateOutcomeBuildItem, LaunchModeBuildItem launch,\n+            AppArtifact artifact, String rootFolderInJar)\n+            throws IOException {\n+\n+        AppArtifact userApplication = curateOutcomeBuildItem.getEffectiveModel().getAppArtifact();\n+\n+        Path path = createDir(userApplication.getArtifactId(), artifact.getGroupId(), artifact.getArtifactId(),\n+                artifact.getVersion());\n+\n+        // Clean on non dev mode\n+        if (!launch.getLaunchMode().equals(LaunchMode.DEVELOPMENT)) {\n+            IoUtils.recursiveDeleteAndThenCreate(path);\n+        }\n+\n+        if (isEmpty(path)) {\n+            ClassLoader classLoader = WebJarUtil.class.getClassLoader();\n+            for (Path p : artifact.getPaths()) {\n+                File artifactFile = p.toFile();\n+                try (JarFile jarFile = new JarFile(artifactFile)) {\n+                    Enumeration<JarEntry> entries = jarFile.entries();\n+                    while (entries.hasMoreElements()) {\n+                        JarEntry entry = entries.nextElement();\n+                        if (entry.getName().startsWith(rootFolderInJar) && !entry.isDirectory()) {\n+                            try (InputStream inputStream = jarFile.getInputStream(entry)) {\n+                                String filename = entry.getName().replace(rootFolderInJar, \"\");\n+                                String modulename = getModuleOverrideName(artifact, filename);\n+                                if (IGNORE_LIST.contains(filename)\n+                                        && isOverride(userApplication.getPaths(), classLoader, filename, modulename)) {\n+                                    try (InputStream override = getOverride(userApplication.getPaths(), classLoader, filename,\n+                                            modulename)) {\n+                                        createFile(override, path, filename);\n+                                    }\n+                                } else {\n+                                    createFile(inputStream, path, filename);\n+                                }\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+        return path;\n+    }\n+\n+    public static void updateUrl(Path original, String path, String lineStartsWith, String format) throws IOException {\n+        String content = new String(Files.readAllBytes(original), StandardCharsets.UTF_8);\n+        String result = updateUrl(content, path, lineStartsWith, format);\n+        if (result != null && !result.equals(content)) {\n+            Files.write(original, result.getBytes(StandardCharsets.UTF_8));\n+        }\n+    }\n+\n+    public static String updateUrl(String original, String path, String lineStartsWith, String format) {\n+        try (Scanner scanner = new Scanner(original)) {\n+            while (scanner.hasNextLine()) {\n+                String line = scanner.nextLine();\n+                if (line.trim().startsWith(lineStartsWith)) {\n+                    String newLine = String.format(format, path);\n+                    return original.replace(line.trim(), newLine);\n+                }\n+            }\n+        }\n+\n+        return original;\n+    }\n+\n+    public static Map<String, byte[]> production(CurateOutcomeBuildItem curateOutcomeBuildItem, AppArtifact artifact,\n+            String rootFolderInJar) throws IOException {\n+        AppArtifact userApplication = curateOutcomeBuildItem.getEffectiveModel().getAppArtifact();\n+\n+        Map<String, byte[]> map = new HashMap<>();\n+        //we are including in a production artifact\n+        //just stick the files in the generated output\n+        //we could do this for dev mode as well but then we need to extract them every time\n+\n+        ClassLoader classLoader = WebJarUtil.class.getClassLoader();\n+        for (Path p : artifact.getPaths()) {\n+            File artifactFile = p.toFile();", "originalCommit": "438a2e19796e44dc250d173e39a212d0242f67c5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjA4Mzc5NA==", "url": "https://github.com/quarkusio/quarkus/pull/12652#discussion_r506083794", "bodyText": "Same as above :)", "author": "phillip-kruger", "createdAt": "2020-10-16T06:28:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTc2MTAxNw=="}], "type": "inlineReview"}, {"oid": "7199fc41bf328086483f14c67c6c9243d3dd51e0", "url": "https://github.com/quarkusio/quarkus/commit/7199fc41bf328086483f14c67c6c9243d3dd51e0", "message": "Consolidate all UI related extensions.\n\nSigned-off-by: Phillip Kruger <phillip.kruger@gmail.com>", "committedDate": "2020-10-16T06:27:42Z", "type": "commit"}]}