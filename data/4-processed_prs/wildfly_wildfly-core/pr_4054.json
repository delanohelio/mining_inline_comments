{"pr_number": 4054, "pr_title": "Additional boot ops", "pr_createdAt": "2020-01-09T09:36:16Z", "pr_url": "https://github.com/wildfly/wildfly-core/pull/4054", "timeline": [{"oid": "4b99902d2d94e05141adf3b998cb8d22d43288c4", "url": "https://github.com/wildfly/wildfly-core/commit/4b99902d2d94e05141adf3b998cb8d22d43288c4", "message": "[WFCORE-4770] Test CommandContextImpl used in BootScriptInvoker", "committedDate": "2020-01-09T09:36:30Z", "type": "forcePushed"}, {"oid": "d06f592bcad730c270ea40e1b8d4529d96ffc39e", "url": "https://github.com/wildfly/wildfly-core/commit/d06f592bcad730c270ea40e1b8d4529d96ffc39e", "message": "[WFCORE-4770] Test CommandContextImpl used in BootScriptInvoker", "committedDate": "2020-01-09T15:11:29Z", "type": "forcePushed"}, {"oid": "5214caa45283c9ecf7ba28570688a8040b8aa443", "url": "https://github.com/wildfly/wildfly-core/commit/5214caa45283c9ecf7ba28570688a8040b8aa443", "message": "[WFCORE-4770] Test CommandContextImpl used in BootScriptInvoker", "committedDate": "2020-01-09T16:08:11Z", "type": "forcePushed"}, {"oid": "8c3048b6e5820561727d0fb0a4be0e90de099c1f", "url": "https://github.com/wildfly/wildfly-core/commit/8c3048b6e5820561727d0fb0a4be0e90de099c1f", "message": "Propagate the CI settings for the repository resolution", "committedDate": "2020-01-09T17:04:33Z", "type": "forcePushed"}, {"oid": "9a2a18111bdba05f96745d4e5318136966ce3639", "url": "https://github.com/wildfly/wildfly-core/commit/9a2a18111bdba05f96745d4e5318136966ce3639", "message": "[WFCORE-4770] Test CommandContextImpl used in BootScriptInvoker", "committedDate": "2020-01-09T17:50:16Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTcxNTkyMw==", "url": "https://github.com/wildfly/wildfly-core/pull/4054#discussion_r365715923", "bodyText": "should be 2020 now", "author": "jmesnil", "createdAt": "2020-01-13T09:52:40Z", "path": "cli/src/main/java/org/jboss/as/cli/impl/BootScriptInvoker.java", "diffHunk": "@@ -0,0 +1,180 @@\n+/*\n+Copyright 2019 Red Hat, Inc.", "originalCommit": "baa625f598fa9631f79874a25ee62274cabc88d0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTcxODYzMw==", "url": "https://github.com/wildfly/wildfly-core/pull/4054#discussion_r365718633", "bodyText": "error log must be i18ned", "author": "jmesnil", "createdAt": "2020-01-13T09:58:40Z", "path": "cli/src/main/java/org/jboss/as/cli/impl/BootScriptInvoker.java", "diffHunk": "@@ -0,0 +1,180 @@\n+/*\n+Copyright 2019 Red Hat, Inc.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+ */\n+package org.jboss.as.cli.impl;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.util.Properties;\n+import java.util.logging.Level;\n+import java.util.logging.LogManager;\n+\n+import org.jboss.as.cli.CommandContext;\n+import org.jboss.as.controller.client.ModelControllerClient;\n+import org.jboss.as.controller.client.impl.AdditionalBootCliScriptInvoker;\n+import org.jboss.logging.Logger;\n+import org.wildfly.security.manager.WildFlySecurityManager;\n+\n+/**\n+ * CLI script invoker. This is instantiated inside a server during boot in\n+ * admin-only.\n+ *\n+ * @author jdenise\n+ */\n+public class BootScriptInvoker implements AdditionalBootCliScriptInvoker {\n+\n+    private static final Logger LOGGER = Logger.getLogger(BootScriptInvoker.class);\n+\n+    private final Properties props = new Properties();\n+    private final Properties existingProps = new Properties();\n+\n+    @Override\n+    public void runCliScript(ModelControllerClient client, File file) {\n+        LOGGER.info(\"Executing CLI Script invoker for file \" + file);\n+\n+        String log = WildFlySecurityManager.getPropertyPrivileged(\"org.wildfly.internal.cli.boot.hook.script.logging\", \"false\");\n+        final LogManager logManager = LogManager.getLogManager();\n+        // Turnoff logger\n+        if (!Boolean.parseBoolean(log)) {\n+            if (logManager instanceof org.jboss.logmanager.LogManager) {\n+                org.jboss.logmanager.LogManager jbossLogManager = (org.jboss.logmanager.LogManager) logManager;\n+                jbossLogManager.getLogger(CommandContext.class.getName()).setLevel(Level.OFF);\n+            }\n+        }\n+        CommandContext ctx = null;\n+        String props = WildFlySecurityManager.getPropertyPrivileged(\"org.wildfly.internal.cli.boot.hook.script.properties\", null);\n+\n+        if (props != null) {\n+            File propsFile = new File(props);\n+            if (!propsFile.exists()) {\n+                // TODO i18n\n+                throw new RuntimeException(\"Could not find file \" + propsFile.getAbsolutePath());\n+            }\n+            handleProperties(propsFile);\n+        }\n+        File logFile = null;\n+        String logFilePath = WildFlySecurityManager.getPropertyPrivileged(\"org.wildfly.internal.cli.boot.hook.script.output.file\", null);\n+        if (logFilePath != null) {\n+            logFile = new File(logFilePath);\n+        }\n+\n+        try {\n+            OutputStream output = null;\n+            if (logFile != null) {\n+                output = new FileOutputStream(logFile);\n+            }\n+            ctx = new CommandContextImpl(output);\n+            ctx.bindClient(client);\n+\n+            processFile(file, ctx);\n+        } catch (Exception ex) {\n+            try {\n+                LOGGER.error(\"Error applying \" + file + \" CLI script:\");", "originalCommit": "baa625f598fa9631f79874a25ee62274cabc88d0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTcxOTA2NA==", "url": "https://github.com/wildfly/wildfly-core/pull/4054#discussion_r365719064", "bodyText": "-1, all lines should be appended to a single String and logged with a single call to LOGGER.error", "author": "jmesnil", "createdAt": "2020-01-13T09:59:34Z", "path": "cli/src/main/java/org/jboss/as/cli/impl/BootScriptInvoker.java", "diffHunk": "@@ -0,0 +1,180 @@\n+/*\n+Copyright 2019 Red Hat, Inc.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+ */\n+package org.jboss.as.cli.impl;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.util.Properties;\n+import java.util.logging.Level;\n+import java.util.logging.LogManager;\n+\n+import org.jboss.as.cli.CommandContext;\n+import org.jboss.as.controller.client.ModelControllerClient;\n+import org.jboss.as.controller.client.impl.AdditionalBootCliScriptInvoker;\n+import org.jboss.logging.Logger;\n+import org.wildfly.security.manager.WildFlySecurityManager;\n+\n+/**\n+ * CLI script invoker. This is instantiated inside a server during boot in\n+ * admin-only.\n+ *\n+ * @author jdenise\n+ */\n+public class BootScriptInvoker implements AdditionalBootCliScriptInvoker {\n+\n+    private static final Logger LOGGER = Logger.getLogger(BootScriptInvoker.class);\n+\n+    private final Properties props = new Properties();\n+    private final Properties existingProps = new Properties();\n+\n+    @Override\n+    public void runCliScript(ModelControllerClient client, File file) {\n+        LOGGER.info(\"Executing CLI Script invoker for file \" + file);\n+\n+        String log = WildFlySecurityManager.getPropertyPrivileged(\"org.wildfly.internal.cli.boot.hook.script.logging\", \"false\");\n+        final LogManager logManager = LogManager.getLogManager();\n+        // Turnoff logger\n+        if (!Boolean.parseBoolean(log)) {\n+            if (logManager instanceof org.jboss.logmanager.LogManager) {\n+                org.jboss.logmanager.LogManager jbossLogManager = (org.jboss.logmanager.LogManager) logManager;\n+                jbossLogManager.getLogger(CommandContext.class.getName()).setLevel(Level.OFF);\n+            }\n+        }\n+        CommandContext ctx = null;\n+        String props = WildFlySecurityManager.getPropertyPrivileged(\"org.wildfly.internal.cli.boot.hook.script.properties\", null);\n+\n+        if (props != null) {\n+            File propsFile = new File(props);\n+            if (!propsFile.exists()) {\n+                // TODO i18n\n+                throw new RuntimeException(\"Could not find file \" + propsFile.getAbsolutePath());\n+            }\n+            handleProperties(propsFile);\n+        }\n+        File logFile = null;\n+        String logFilePath = WildFlySecurityManager.getPropertyPrivileged(\"org.wildfly.internal.cli.boot.hook.script.output.file\", null);\n+        if (logFilePath != null) {\n+            logFile = new File(logFilePath);\n+        }\n+\n+        try {\n+            OutputStream output = null;\n+            if (logFile != null) {\n+                output = new FileOutputStream(logFile);\n+            }\n+            ctx = new CommandContextImpl(output);\n+            ctx.bindClient(client);\n+\n+            processFile(file, ctx);\n+        } catch (Exception ex) {\n+            try {\n+                LOGGER.error(\"Error applying \" + file + \" CLI script:\");\n+                for (String line : Files.readAllLines(file.toPath())) {\n+                    LOGGER.error(line);", "originalCommit": "baa625f598fa9631f79874a25ee62274cabc88d0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTcxOTE1Mw==", "url": "https://github.com/wildfly/wildfly-core/pull/4054#discussion_r365719153", "bodyText": "error log must be i18ned", "author": "jmesnil", "createdAt": "2020-01-13T09:59:48Z", "path": "cli/src/main/java/org/jboss/as/cli/impl/BootScriptInvoker.java", "diffHunk": "@@ -0,0 +1,180 @@\n+/*\n+Copyright 2019 Red Hat, Inc.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+ */\n+package org.jboss.as.cli.impl;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.util.Properties;\n+import java.util.logging.Level;\n+import java.util.logging.LogManager;\n+\n+import org.jboss.as.cli.CommandContext;\n+import org.jboss.as.controller.client.ModelControllerClient;\n+import org.jboss.as.controller.client.impl.AdditionalBootCliScriptInvoker;\n+import org.jboss.logging.Logger;\n+import org.wildfly.security.manager.WildFlySecurityManager;\n+\n+/**\n+ * CLI script invoker. This is instantiated inside a server during boot in\n+ * admin-only.\n+ *\n+ * @author jdenise\n+ */\n+public class BootScriptInvoker implements AdditionalBootCliScriptInvoker {\n+\n+    private static final Logger LOGGER = Logger.getLogger(BootScriptInvoker.class);\n+\n+    private final Properties props = new Properties();\n+    private final Properties existingProps = new Properties();\n+\n+    @Override\n+    public void runCliScript(ModelControllerClient client, File file) {\n+        LOGGER.info(\"Executing CLI Script invoker for file \" + file);\n+\n+        String log = WildFlySecurityManager.getPropertyPrivileged(\"org.wildfly.internal.cli.boot.hook.script.logging\", \"false\");\n+        final LogManager logManager = LogManager.getLogManager();\n+        // Turnoff logger\n+        if (!Boolean.parseBoolean(log)) {\n+            if (logManager instanceof org.jboss.logmanager.LogManager) {\n+                org.jboss.logmanager.LogManager jbossLogManager = (org.jboss.logmanager.LogManager) logManager;\n+                jbossLogManager.getLogger(CommandContext.class.getName()).setLevel(Level.OFF);\n+            }\n+        }\n+        CommandContext ctx = null;\n+        String props = WildFlySecurityManager.getPropertyPrivileged(\"org.wildfly.internal.cli.boot.hook.script.properties\", null);\n+\n+        if (props != null) {\n+            File propsFile = new File(props);\n+            if (!propsFile.exists()) {\n+                // TODO i18n\n+                throw new RuntimeException(\"Could not find file \" + propsFile.getAbsolutePath());\n+            }\n+            handleProperties(propsFile);\n+        }\n+        File logFile = null;\n+        String logFilePath = WildFlySecurityManager.getPropertyPrivileged(\"org.wildfly.internal.cli.boot.hook.script.output.file\", null);\n+        if (logFilePath != null) {\n+            logFile = new File(logFilePath);\n+        }\n+\n+        try {\n+            OutputStream output = null;\n+            if (logFile != null) {\n+                output = new FileOutputStream(logFile);\n+            }\n+            ctx = new CommandContextImpl(output);\n+            ctx.bindClient(client);\n+\n+            processFile(file, ctx);\n+        } catch (Exception ex) {\n+            try {\n+                LOGGER.error(\"Error applying \" + file + \" CLI script:\");\n+                for (String line : Files.readAllLines(file.toPath())) {\n+                    LOGGER.error(line);\n+                }\n+                if (logFile != null) {\n+                    LOGGER.error(\"CLI execution output:\");", "originalCommit": "baa625f598fa9631f79874a25ee62274cabc88d0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTcxOTIzMQ==", "url": "https://github.com/wildfly/wildfly-core/pull/4054#discussion_r365719231", "bodyText": "same remark as above", "author": "jmesnil", "createdAt": "2020-01-13T09:59:58Z", "path": "cli/src/main/java/org/jboss/as/cli/impl/BootScriptInvoker.java", "diffHunk": "@@ -0,0 +1,180 @@\n+/*\n+Copyright 2019 Red Hat, Inc.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+ */\n+package org.jboss.as.cli.impl;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.util.Properties;\n+import java.util.logging.Level;\n+import java.util.logging.LogManager;\n+\n+import org.jboss.as.cli.CommandContext;\n+import org.jboss.as.controller.client.ModelControllerClient;\n+import org.jboss.as.controller.client.impl.AdditionalBootCliScriptInvoker;\n+import org.jboss.logging.Logger;\n+import org.wildfly.security.manager.WildFlySecurityManager;\n+\n+/**\n+ * CLI script invoker. This is instantiated inside a server during boot in\n+ * admin-only.\n+ *\n+ * @author jdenise\n+ */\n+public class BootScriptInvoker implements AdditionalBootCliScriptInvoker {\n+\n+    private static final Logger LOGGER = Logger.getLogger(BootScriptInvoker.class);\n+\n+    private final Properties props = new Properties();\n+    private final Properties existingProps = new Properties();\n+\n+    @Override\n+    public void runCliScript(ModelControllerClient client, File file) {\n+        LOGGER.info(\"Executing CLI Script invoker for file \" + file);\n+\n+        String log = WildFlySecurityManager.getPropertyPrivileged(\"org.wildfly.internal.cli.boot.hook.script.logging\", \"false\");\n+        final LogManager logManager = LogManager.getLogManager();\n+        // Turnoff logger\n+        if (!Boolean.parseBoolean(log)) {\n+            if (logManager instanceof org.jboss.logmanager.LogManager) {\n+                org.jboss.logmanager.LogManager jbossLogManager = (org.jboss.logmanager.LogManager) logManager;\n+                jbossLogManager.getLogger(CommandContext.class.getName()).setLevel(Level.OFF);\n+            }\n+        }\n+        CommandContext ctx = null;\n+        String props = WildFlySecurityManager.getPropertyPrivileged(\"org.wildfly.internal.cli.boot.hook.script.properties\", null);\n+\n+        if (props != null) {\n+            File propsFile = new File(props);\n+            if (!propsFile.exists()) {\n+                // TODO i18n\n+                throw new RuntimeException(\"Could not find file \" + propsFile.getAbsolutePath());\n+            }\n+            handleProperties(propsFile);\n+        }\n+        File logFile = null;\n+        String logFilePath = WildFlySecurityManager.getPropertyPrivileged(\"org.wildfly.internal.cli.boot.hook.script.output.file\", null);\n+        if (logFilePath != null) {\n+            logFile = new File(logFilePath);\n+        }\n+\n+        try {\n+            OutputStream output = null;\n+            if (logFile != null) {\n+                output = new FileOutputStream(logFile);\n+            }\n+            ctx = new CommandContextImpl(output);\n+            ctx.bindClient(client);\n+\n+            processFile(file, ctx);\n+        } catch (Exception ex) {\n+            try {\n+                LOGGER.error(\"Error applying \" + file + \" CLI script:\");\n+                for (String line : Files.readAllLines(file.toPath())) {\n+                    LOGGER.error(line);\n+                }\n+                if (logFile != null) {\n+                    LOGGER.error(\"CLI execution output:\");\n+                    for (String line : Files.readAllLines(logFile.toPath())) {\n+                        LOGGER.error(line);", "originalCommit": "baa625f598fa9631f79874a25ee62274cabc88d0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTcxOTQ1MA==", "url": "https://github.com/wildfly/wildfly-core/pull/4054#discussion_r365719450", "bodyText": "info log must be i18ned", "author": "jmesnil", "createdAt": "2020-01-13T10:00:25Z", "path": "cli/src/main/java/org/jboss/as/cli/impl/BootScriptInvoker.java", "diffHunk": "@@ -0,0 +1,180 @@\n+/*\n+Copyright 2019 Red Hat, Inc.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+ */\n+package org.jboss.as.cli.impl;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.util.Properties;\n+import java.util.logging.Level;\n+import java.util.logging.LogManager;\n+\n+import org.jboss.as.cli.CommandContext;\n+import org.jboss.as.controller.client.ModelControllerClient;\n+import org.jboss.as.controller.client.impl.AdditionalBootCliScriptInvoker;\n+import org.jboss.logging.Logger;\n+import org.wildfly.security.manager.WildFlySecurityManager;\n+\n+/**\n+ * CLI script invoker. This is instantiated inside a server during boot in\n+ * admin-only.\n+ *\n+ * @author jdenise\n+ */\n+public class BootScriptInvoker implements AdditionalBootCliScriptInvoker {\n+\n+    private static final Logger LOGGER = Logger.getLogger(BootScriptInvoker.class);\n+\n+    private final Properties props = new Properties();\n+    private final Properties existingProps = new Properties();\n+\n+    @Override\n+    public void runCliScript(ModelControllerClient client, File file) {\n+        LOGGER.info(\"Executing CLI Script invoker for file \" + file);\n+\n+        String log = WildFlySecurityManager.getPropertyPrivileged(\"org.wildfly.internal.cli.boot.hook.script.logging\", \"false\");\n+        final LogManager logManager = LogManager.getLogManager();\n+        // Turnoff logger\n+        if (!Boolean.parseBoolean(log)) {\n+            if (logManager instanceof org.jboss.logmanager.LogManager) {\n+                org.jboss.logmanager.LogManager jbossLogManager = (org.jboss.logmanager.LogManager) logManager;\n+                jbossLogManager.getLogger(CommandContext.class.getName()).setLevel(Level.OFF);\n+            }\n+        }\n+        CommandContext ctx = null;\n+        String props = WildFlySecurityManager.getPropertyPrivileged(\"org.wildfly.internal.cli.boot.hook.script.properties\", null);\n+\n+        if (props != null) {\n+            File propsFile = new File(props);\n+            if (!propsFile.exists()) {\n+                // TODO i18n\n+                throw new RuntimeException(\"Could not find file \" + propsFile.getAbsolutePath());\n+            }\n+            handleProperties(propsFile);\n+        }\n+        File logFile = null;\n+        String logFilePath = WildFlySecurityManager.getPropertyPrivileged(\"org.wildfly.internal.cli.boot.hook.script.output.file\", null);\n+        if (logFilePath != null) {\n+            logFile = new File(logFilePath);\n+        }\n+\n+        try {\n+            OutputStream output = null;\n+            if (logFile != null) {\n+                output = new FileOutputStream(logFile);\n+            }\n+            ctx = new CommandContextImpl(output);\n+            ctx.bindClient(client);\n+\n+            processFile(file, ctx);\n+        } catch (Exception ex) {\n+            try {\n+                LOGGER.error(\"Error applying \" + file + \" CLI script:\");\n+                for (String line : Files.readAllLines(file.toPath())) {\n+                    LOGGER.error(line);\n+                }\n+                if (logFile != null) {\n+                    LOGGER.error(\"CLI execution output:\");\n+                    for (String line : Files.readAllLines(logFile.toPath())) {\n+                        LOGGER.error(line);\n+                    }\n+                }\n+            } catch (IOException ex1) {\n+                RuntimeException rtex = new RuntimeException(ex1);\n+                rtex.addSuppressed(ex);\n+                throw rtex;\n+            }\n+            throw new RuntimeException(ex);\n+        } finally {\n+            if (ctx != null) {\n+                ctx.terminateSession();\n+            }\n+            clearProperties();\n+        }\n+        LOGGER.info(\"Done executing CLI Script invoker for file \" + file);", "originalCommit": "baa625f598fa9631f79874a25ee62274cabc88d0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTcxOTU5OA==", "url": "https://github.com/wildfly/wildfly-core/pull/4054#discussion_r365719598", "bodyText": "error log must be i18ned", "author": "jmesnil", "createdAt": "2020-01-13T10:00:45Z", "path": "cli/src/main/java/org/jboss/as/cli/impl/BootScriptInvoker.java", "diffHunk": "@@ -0,0 +1,180 @@\n+/*\n+Copyright 2019 Red Hat, Inc.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+ */\n+package org.jboss.as.cli.impl;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.util.Properties;\n+import java.util.logging.Level;\n+import java.util.logging.LogManager;\n+\n+import org.jboss.as.cli.CommandContext;\n+import org.jboss.as.controller.client.ModelControllerClient;\n+import org.jboss.as.controller.client.impl.AdditionalBootCliScriptInvoker;\n+import org.jboss.logging.Logger;\n+import org.wildfly.security.manager.WildFlySecurityManager;\n+\n+/**\n+ * CLI script invoker. This is instantiated inside a server during boot in\n+ * admin-only.\n+ *\n+ * @author jdenise\n+ */\n+public class BootScriptInvoker implements AdditionalBootCliScriptInvoker {\n+\n+    private static final Logger LOGGER = Logger.getLogger(BootScriptInvoker.class);\n+\n+    private final Properties props = new Properties();\n+    private final Properties existingProps = new Properties();\n+\n+    @Override\n+    public void runCliScript(ModelControllerClient client, File file) {\n+        LOGGER.info(\"Executing CLI Script invoker for file \" + file);\n+\n+        String log = WildFlySecurityManager.getPropertyPrivileged(\"org.wildfly.internal.cli.boot.hook.script.logging\", \"false\");\n+        final LogManager logManager = LogManager.getLogManager();\n+        // Turnoff logger\n+        if (!Boolean.parseBoolean(log)) {\n+            if (logManager instanceof org.jboss.logmanager.LogManager) {\n+                org.jboss.logmanager.LogManager jbossLogManager = (org.jboss.logmanager.LogManager) logManager;\n+                jbossLogManager.getLogger(CommandContext.class.getName()).setLevel(Level.OFF);\n+            }\n+        }\n+        CommandContext ctx = null;\n+        String props = WildFlySecurityManager.getPropertyPrivileged(\"org.wildfly.internal.cli.boot.hook.script.properties\", null);\n+\n+        if (props != null) {\n+            File propsFile = new File(props);\n+            if (!propsFile.exists()) {\n+                // TODO i18n\n+                throw new RuntimeException(\"Could not find file \" + propsFile.getAbsolutePath());\n+            }\n+            handleProperties(propsFile);\n+        }\n+        File logFile = null;\n+        String logFilePath = WildFlySecurityManager.getPropertyPrivileged(\"org.wildfly.internal.cli.boot.hook.script.output.file\", null);\n+        if (logFilePath != null) {\n+            logFile = new File(logFilePath);\n+        }\n+\n+        try {\n+            OutputStream output = null;\n+            if (logFile != null) {\n+                output = new FileOutputStream(logFile);\n+            }\n+            ctx = new CommandContextImpl(output);\n+            ctx.bindClient(client);\n+\n+            processFile(file, ctx);\n+        } catch (Exception ex) {\n+            try {\n+                LOGGER.error(\"Error applying \" + file + \" CLI script:\");\n+                for (String line : Files.readAllLines(file.toPath())) {\n+                    LOGGER.error(line);\n+                }\n+                if (logFile != null) {\n+                    LOGGER.error(\"CLI execution output:\");\n+                    for (String line : Files.readAllLines(logFile.toPath())) {\n+                        LOGGER.error(line);\n+                    }\n+                }\n+            } catch (IOException ex1) {\n+                RuntimeException rtex = new RuntimeException(ex1);\n+                rtex.addSuppressed(ex);\n+                throw rtex;\n+            }\n+            throw new RuntimeException(ex);\n+        } finally {\n+            if (ctx != null) {\n+                ctx.terminateSession();\n+            }\n+            clearProperties();\n+        }\n+        LOGGER.info(\"Done executing CLI Script invoker for file \" + file);\n+    }\n+\n+    private static void processFile(File file, final CommandContext cmdCtx) throws IOException {\n+        try ( BufferedReader reader = new BufferedReader(new FileReader(file))) {\n+            String line = reader.readLine();\n+            while (cmdCtx.getExitCode() == 0 && !cmdCtx.isTerminated() && line != null) {\n+                LOGGER.debug(\"Executing command \" + line.trim());\n+                cmdCtx.handle(line.trim());\n+                line = reader.readLine();\n+            }\n+        } catch (Throwable e) {\n+            LOGGER.error(\"Unexpected exception processing commands \", e);", "originalCommit": "baa625f598fa9631f79874a25ee62274cabc88d0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTcxOTc3Mg==", "url": "https://github.com/wildfly/wildfly-core/pull/4054#discussion_r365719772", "bodyText": "exception message must be i18ned", "author": "jmesnil", "createdAt": "2020-01-13T10:01:08Z", "path": "cli/src/main/java/org/jboss/as/cli/impl/BootScriptInvoker.java", "diffHunk": "@@ -0,0 +1,180 @@\n+/*\n+Copyright 2019 Red Hat, Inc.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+ */\n+package org.jboss.as.cli.impl;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.util.Properties;\n+import java.util.logging.Level;\n+import java.util.logging.LogManager;\n+\n+import org.jboss.as.cli.CommandContext;\n+import org.jboss.as.controller.client.ModelControllerClient;\n+import org.jboss.as.controller.client.impl.AdditionalBootCliScriptInvoker;\n+import org.jboss.logging.Logger;\n+import org.wildfly.security.manager.WildFlySecurityManager;\n+\n+/**\n+ * CLI script invoker. This is instantiated inside a server during boot in\n+ * admin-only.\n+ *\n+ * @author jdenise\n+ */\n+public class BootScriptInvoker implements AdditionalBootCliScriptInvoker {\n+\n+    private static final Logger LOGGER = Logger.getLogger(BootScriptInvoker.class);\n+\n+    private final Properties props = new Properties();\n+    private final Properties existingProps = new Properties();\n+\n+    @Override\n+    public void runCliScript(ModelControllerClient client, File file) {\n+        LOGGER.info(\"Executing CLI Script invoker for file \" + file);\n+\n+        String log = WildFlySecurityManager.getPropertyPrivileged(\"org.wildfly.internal.cli.boot.hook.script.logging\", \"false\");\n+        final LogManager logManager = LogManager.getLogManager();\n+        // Turnoff logger\n+        if (!Boolean.parseBoolean(log)) {\n+            if (logManager instanceof org.jboss.logmanager.LogManager) {\n+                org.jboss.logmanager.LogManager jbossLogManager = (org.jboss.logmanager.LogManager) logManager;\n+                jbossLogManager.getLogger(CommandContext.class.getName()).setLevel(Level.OFF);\n+            }\n+        }\n+        CommandContext ctx = null;\n+        String props = WildFlySecurityManager.getPropertyPrivileged(\"org.wildfly.internal.cli.boot.hook.script.properties\", null);\n+\n+        if (props != null) {\n+            File propsFile = new File(props);\n+            if (!propsFile.exists()) {\n+                // TODO i18n\n+                throw new RuntimeException(\"Could not find file \" + propsFile.getAbsolutePath());\n+            }\n+            handleProperties(propsFile);\n+        }\n+        File logFile = null;\n+        String logFilePath = WildFlySecurityManager.getPropertyPrivileged(\"org.wildfly.internal.cli.boot.hook.script.output.file\", null);\n+        if (logFilePath != null) {\n+            logFile = new File(logFilePath);\n+        }\n+\n+        try {\n+            OutputStream output = null;\n+            if (logFile != null) {\n+                output = new FileOutputStream(logFile);\n+            }\n+            ctx = new CommandContextImpl(output);\n+            ctx.bindClient(client);\n+\n+            processFile(file, ctx);\n+        } catch (Exception ex) {\n+            try {\n+                LOGGER.error(\"Error applying \" + file + \" CLI script:\");\n+                for (String line : Files.readAllLines(file.toPath())) {\n+                    LOGGER.error(line);\n+                }\n+                if (logFile != null) {\n+                    LOGGER.error(\"CLI execution output:\");\n+                    for (String line : Files.readAllLines(logFile.toPath())) {\n+                        LOGGER.error(line);\n+                    }\n+                }\n+            } catch (IOException ex1) {\n+                RuntimeException rtex = new RuntimeException(ex1);\n+                rtex.addSuppressed(ex);\n+                throw rtex;\n+            }\n+            throw new RuntimeException(ex);\n+        } finally {\n+            if (ctx != null) {\n+                ctx.terminateSession();\n+            }\n+            clearProperties();\n+        }\n+        LOGGER.info(\"Done executing CLI Script invoker for file \" + file);\n+    }\n+\n+    private static void processFile(File file, final CommandContext cmdCtx) throws IOException {\n+        try ( BufferedReader reader = new BufferedReader(new FileReader(file))) {\n+            String line = reader.readLine();\n+            while (cmdCtx.getExitCode() == 0 && !cmdCtx.isTerminated() && line != null) {\n+                LOGGER.debug(\"Executing command \" + line.trim());\n+                cmdCtx.handle(line.trim());\n+                line = reader.readLine();\n+            }\n+        } catch (Throwable e) {\n+            LOGGER.error(\"Unexpected exception processing commands \", e);\n+            throw new IllegalStateException(\"Failed to process file '\" + file.getAbsolutePath() + \"'\", e);", "originalCommit": "baa625f598fa9631f79874a25ee62274cabc88d0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTcxOTk1NQ==", "url": "https://github.com/wildfly/wildfly-core/pull/4054#discussion_r365719955", "bodyText": "same remark as above", "author": "jmesnil", "createdAt": "2020-01-13T10:01:30Z", "path": "cli/src/main/java/org/jboss/as/cli/impl/BootScriptInvoker.java", "diffHunk": "@@ -0,0 +1,180 @@\n+/*\n+Copyright 2019 Red Hat, Inc.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+ */\n+package org.jboss.as.cli.impl;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.util.Properties;\n+import java.util.logging.Level;\n+import java.util.logging.LogManager;\n+\n+import org.jboss.as.cli.CommandContext;\n+import org.jboss.as.controller.client.ModelControllerClient;\n+import org.jboss.as.controller.client.impl.AdditionalBootCliScriptInvoker;\n+import org.jboss.logging.Logger;\n+import org.wildfly.security.manager.WildFlySecurityManager;\n+\n+/**\n+ * CLI script invoker. This is instantiated inside a server during boot in\n+ * admin-only.\n+ *\n+ * @author jdenise\n+ */\n+public class BootScriptInvoker implements AdditionalBootCliScriptInvoker {\n+\n+    private static final Logger LOGGER = Logger.getLogger(BootScriptInvoker.class);\n+\n+    private final Properties props = new Properties();\n+    private final Properties existingProps = new Properties();\n+\n+    @Override\n+    public void runCliScript(ModelControllerClient client, File file) {\n+        LOGGER.info(\"Executing CLI Script invoker for file \" + file);\n+\n+        String log = WildFlySecurityManager.getPropertyPrivileged(\"org.wildfly.internal.cli.boot.hook.script.logging\", \"false\");\n+        final LogManager logManager = LogManager.getLogManager();\n+        // Turnoff logger\n+        if (!Boolean.parseBoolean(log)) {\n+            if (logManager instanceof org.jboss.logmanager.LogManager) {\n+                org.jboss.logmanager.LogManager jbossLogManager = (org.jboss.logmanager.LogManager) logManager;\n+                jbossLogManager.getLogger(CommandContext.class.getName()).setLevel(Level.OFF);\n+            }\n+        }\n+        CommandContext ctx = null;\n+        String props = WildFlySecurityManager.getPropertyPrivileged(\"org.wildfly.internal.cli.boot.hook.script.properties\", null);\n+\n+        if (props != null) {\n+            File propsFile = new File(props);\n+            if (!propsFile.exists()) {\n+                // TODO i18n\n+                throw new RuntimeException(\"Could not find file \" + propsFile.getAbsolutePath());\n+            }\n+            handleProperties(propsFile);\n+        }\n+        File logFile = null;\n+        String logFilePath = WildFlySecurityManager.getPropertyPrivileged(\"org.wildfly.internal.cli.boot.hook.script.output.file\", null);\n+        if (logFilePath != null) {\n+            logFile = new File(logFilePath);\n+        }\n+\n+        try {\n+            OutputStream output = null;\n+            if (logFile != null) {\n+                output = new FileOutputStream(logFile);\n+            }\n+            ctx = new CommandContextImpl(output);\n+            ctx.bindClient(client);\n+\n+            processFile(file, ctx);\n+        } catch (Exception ex) {\n+            try {\n+                LOGGER.error(\"Error applying \" + file + \" CLI script:\");\n+                for (String line : Files.readAllLines(file.toPath())) {\n+                    LOGGER.error(line);\n+                }\n+                if (logFile != null) {\n+                    LOGGER.error(\"CLI execution output:\");\n+                    for (String line : Files.readAllLines(logFile.toPath())) {\n+                        LOGGER.error(line);\n+                    }\n+                }\n+            } catch (IOException ex1) {\n+                RuntimeException rtex = new RuntimeException(ex1);\n+                rtex.addSuppressed(ex);\n+                throw rtex;\n+            }\n+            throw new RuntimeException(ex);\n+        } finally {\n+            if (ctx != null) {\n+                ctx.terminateSession();\n+            }\n+            clearProperties();\n+        }\n+        LOGGER.info(\"Done executing CLI Script invoker for file \" + file);\n+    }\n+\n+    private static void processFile(File file, final CommandContext cmdCtx) throws IOException {\n+        try ( BufferedReader reader = new BufferedReader(new FileReader(file))) {\n+            String line = reader.readLine();\n+            while (cmdCtx.getExitCode() == 0 && !cmdCtx.isTerminated() && line != null) {\n+                LOGGER.debug(\"Executing command \" + line.trim());\n+                cmdCtx.handle(line.trim());\n+                line = reader.readLine();\n+            }\n+        } catch (Throwable e) {\n+            LOGGER.error(\"Unexpected exception processing commands \", e);\n+            throw new IllegalStateException(\"Failed to process file '\" + file.getAbsolutePath() + \"'\", e);\n+        }\n+        String warnFile = WildFlySecurityManager.getPropertyPrivileged(\"org.wildfly.internal.cli.boot.hook.script.warn.file\", null);\n+        if (warnFile != null) {\n+            File warns = new File(warnFile);\n+            if (warns.exists()) {\n+                for (String line : Files.readAllLines(warns.toPath())) {\n+                    LOGGER.warn(line);", "originalCommit": "baa625f598fa9631f79874a25ee62274cabc88d0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTcyMDA5Ng==", "url": "https://github.com/wildfly/wildfly-core/pull/4054#discussion_r365720096", "bodyText": "same remark as above", "author": "jmesnil", "createdAt": "2020-01-13T10:01:46Z", "path": "cli/src/main/java/org/jboss/as/cli/impl/BootScriptInvoker.java", "diffHunk": "@@ -0,0 +1,180 @@\n+/*\n+Copyright 2019 Red Hat, Inc.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+ */\n+package org.jboss.as.cli.impl;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.util.Properties;\n+import java.util.logging.Level;\n+import java.util.logging.LogManager;\n+\n+import org.jboss.as.cli.CommandContext;\n+import org.jboss.as.controller.client.ModelControllerClient;\n+import org.jboss.as.controller.client.impl.AdditionalBootCliScriptInvoker;\n+import org.jboss.logging.Logger;\n+import org.wildfly.security.manager.WildFlySecurityManager;\n+\n+/**\n+ * CLI script invoker. This is instantiated inside a server during boot in\n+ * admin-only.\n+ *\n+ * @author jdenise\n+ */\n+public class BootScriptInvoker implements AdditionalBootCliScriptInvoker {\n+\n+    private static final Logger LOGGER = Logger.getLogger(BootScriptInvoker.class);\n+\n+    private final Properties props = new Properties();\n+    private final Properties existingProps = new Properties();\n+\n+    @Override\n+    public void runCliScript(ModelControllerClient client, File file) {\n+        LOGGER.info(\"Executing CLI Script invoker for file \" + file);\n+\n+        String log = WildFlySecurityManager.getPropertyPrivileged(\"org.wildfly.internal.cli.boot.hook.script.logging\", \"false\");\n+        final LogManager logManager = LogManager.getLogManager();\n+        // Turnoff logger\n+        if (!Boolean.parseBoolean(log)) {\n+            if (logManager instanceof org.jboss.logmanager.LogManager) {\n+                org.jboss.logmanager.LogManager jbossLogManager = (org.jboss.logmanager.LogManager) logManager;\n+                jbossLogManager.getLogger(CommandContext.class.getName()).setLevel(Level.OFF);\n+            }\n+        }\n+        CommandContext ctx = null;\n+        String props = WildFlySecurityManager.getPropertyPrivileged(\"org.wildfly.internal.cli.boot.hook.script.properties\", null);\n+\n+        if (props != null) {\n+            File propsFile = new File(props);\n+            if (!propsFile.exists()) {\n+                // TODO i18n\n+                throw new RuntimeException(\"Could not find file \" + propsFile.getAbsolutePath());\n+            }\n+            handleProperties(propsFile);\n+        }\n+        File logFile = null;\n+        String logFilePath = WildFlySecurityManager.getPropertyPrivileged(\"org.wildfly.internal.cli.boot.hook.script.output.file\", null);\n+        if (logFilePath != null) {\n+            logFile = new File(logFilePath);\n+        }\n+\n+        try {\n+            OutputStream output = null;\n+            if (logFile != null) {\n+                output = new FileOutputStream(logFile);\n+            }\n+            ctx = new CommandContextImpl(output);\n+            ctx.bindClient(client);\n+\n+            processFile(file, ctx);\n+        } catch (Exception ex) {\n+            try {\n+                LOGGER.error(\"Error applying \" + file + \" CLI script:\");\n+                for (String line : Files.readAllLines(file.toPath())) {\n+                    LOGGER.error(line);\n+                }\n+                if (logFile != null) {\n+                    LOGGER.error(\"CLI execution output:\");\n+                    for (String line : Files.readAllLines(logFile.toPath())) {\n+                        LOGGER.error(line);\n+                    }\n+                }\n+            } catch (IOException ex1) {\n+                RuntimeException rtex = new RuntimeException(ex1);\n+                rtex.addSuppressed(ex);\n+                throw rtex;\n+            }\n+            throw new RuntimeException(ex);\n+        } finally {\n+            if (ctx != null) {\n+                ctx.terminateSession();\n+            }\n+            clearProperties();\n+        }\n+        LOGGER.info(\"Done executing CLI Script invoker for file \" + file);\n+    }\n+\n+    private static void processFile(File file, final CommandContext cmdCtx) throws IOException {\n+        try ( BufferedReader reader = new BufferedReader(new FileReader(file))) {\n+            String line = reader.readLine();\n+            while (cmdCtx.getExitCode() == 0 && !cmdCtx.isTerminated() && line != null) {\n+                LOGGER.debug(\"Executing command \" + line.trim());\n+                cmdCtx.handle(line.trim());\n+                line = reader.readLine();\n+            }\n+        } catch (Throwable e) {\n+            LOGGER.error(\"Unexpected exception processing commands \", e);\n+            throw new IllegalStateException(\"Failed to process file '\" + file.getAbsolutePath() + \"'\", e);\n+        }\n+        String warnFile = WildFlySecurityManager.getPropertyPrivileged(\"org.wildfly.internal.cli.boot.hook.script.warn.file\", null);\n+        if (warnFile != null) {\n+            File warns = new File(warnFile);\n+            if (warns.exists()) {\n+                for (String line : Files.readAllLines(warns.toPath())) {\n+                    LOGGER.warn(line);\n+                }\n+            }\n+\n+        }\n+        String errorFile = WildFlySecurityManager.getPropertyPrivileged(\"org.wildfly.internal.cli.boot.hook.script.error.file\", null);\n+        if (errorFile != null) {\n+            File errors = new File(errorFile);\n+            if (errors.exists()) {\n+                LOGGER.error(\"Error applying \" + file + \" CLI script. The Operations were executed but \"", "originalCommit": "baa625f598fa9631f79874a25ee62274cabc88d0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTcyMDEyOQ==", "url": "https://github.com/wildfly/wildfly-core/pull/4054#discussion_r365720129", "bodyText": "same remark as above", "author": "jmesnil", "createdAt": "2020-01-13T10:01:51Z", "path": "cli/src/main/java/org/jboss/as/cli/impl/BootScriptInvoker.java", "diffHunk": "@@ -0,0 +1,180 @@\n+/*\n+Copyright 2019 Red Hat, Inc.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+ */\n+package org.jboss.as.cli.impl;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.util.Properties;\n+import java.util.logging.Level;\n+import java.util.logging.LogManager;\n+\n+import org.jboss.as.cli.CommandContext;\n+import org.jboss.as.controller.client.ModelControllerClient;\n+import org.jboss.as.controller.client.impl.AdditionalBootCliScriptInvoker;\n+import org.jboss.logging.Logger;\n+import org.wildfly.security.manager.WildFlySecurityManager;\n+\n+/**\n+ * CLI script invoker. This is instantiated inside a server during boot in\n+ * admin-only.\n+ *\n+ * @author jdenise\n+ */\n+public class BootScriptInvoker implements AdditionalBootCliScriptInvoker {\n+\n+    private static final Logger LOGGER = Logger.getLogger(BootScriptInvoker.class);\n+\n+    private final Properties props = new Properties();\n+    private final Properties existingProps = new Properties();\n+\n+    @Override\n+    public void runCliScript(ModelControllerClient client, File file) {\n+        LOGGER.info(\"Executing CLI Script invoker for file \" + file);\n+\n+        String log = WildFlySecurityManager.getPropertyPrivileged(\"org.wildfly.internal.cli.boot.hook.script.logging\", \"false\");\n+        final LogManager logManager = LogManager.getLogManager();\n+        // Turnoff logger\n+        if (!Boolean.parseBoolean(log)) {\n+            if (logManager instanceof org.jboss.logmanager.LogManager) {\n+                org.jboss.logmanager.LogManager jbossLogManager = (org.jboss.logmanager.LogManager) logManager;\n+                jbossLogManager.getLogger(CommandContext.class.getName()).setLevel(Level.OFF);\n+            }\n+        }\n+        CommandContext ctx = null;\n+        String props = WildFlySecurityManager.getPropertyPrivileged(\"org.wildfly.internal.cli.boot.hook.script.properties\", null);\n+\n+        if (props != null) {\n+            File propsFile = new File(props);\n+            if (!propsFile.exists()) {\n+                // TODO i18n\n+                throw new RuntimeException(\"Could not find file \" + propsFile.getAbsolutePath());\n+            }\n+            handleProperties(propsFile);\n+        }\n+        File logFile = null;\n+        String logFilePath = WildFlySecurityManager.getPropertyPrivileged(\"org.wildfly.internal.cli.boot.hook.script.output.file\", null);\n+        if (logFilePath != null) {\n+            logFile = new File(logFilePath);\n+        }\n+\n+        try {\n+            OutputStream output = null;\n+            if (logFile != null) {\n+                output = new FileOutputStream(logFile);\n+            }\n+            ctx = new CommandContextImpl(output);\n+            ctx.bindClient(client);\n+\n+            processFile(file, ctx);\n+        } catch (Exception ex) {\n+            try {\n+                LOGGER.error(\"Error applying \" + file + \" CLI script:\");\n+                for (String line : Files.readAllLines(file.toPath())) {\n+                    LOGGER.error(line);\n+                }\n+                if (logFile != null) {\n+                    LOGGER.error(\"CLI execution output:\");\n+                    for (String line : Files.readAllLines(logFile.toPath())) {\n+                        LOGGER.error(line);\n+                    }\n+                }\n+            } catch (IOException ex1) {\n+                RuntimeException rtex = new RuntimeException(ex1);\n+                rtex.addSuppressed(ex);\n+                throw rtex;\n+            }\n+            throw new RuntimeException(ex);\n+        } finally {\n+            if (ctx != null) {\n+                ctx.terminateSession();\n+            }\n+            clearProperties();\n+        }\n+        LOGGER.info(\"Done executing CLI Script invoker for file \" + file);\n+    }\n+\n+    private static void processFile(File file, final CommandContext cmdCtx) throws IOException {\n+        try ( BufferedReader reader = new BufferedReader(new FileReader(file))) {\n+            String line = reader.readLine();\n+            while (cmdCtx.getExitCode() == 0 && !cmdCtx.isTerminated() && line != null) {\n+                LOGGER.debug(\"Executing command \" + line.trim());\n+                cmdCtx.handle(line.trim());\n+                line = reader.readLine();\n+            }\n+        } catch (Throwable e) {\n+            LOGGER.error(\"Unexpected exception processing commands \", e);\n+            throw new IllegalStateException(\"Failed to process file '\" + file.getAbsolutePath() + \"'\", e);\n+        }\n+        String warnFile = WildFlySecurityManager.getPropertyPrivileged(\"org.wildfly.internal.cli.boot.hook.script.warn.file\", null);\n+        if (warnFile != null) {\n+            File warns = new File(warnFile);\n+            if (warns.exists()) {\n+                for (String line : Files.readAllLines(warns.toPath())) {\n+                    LOGGER.warn(line);\n+                }\n+            }\n+\n+        }\n+        String errorFile = WildFlySecurityManager.getPropertyPrivileged(\"org.wildfly.internal.cli.boot.hook.script.error.file\", null);\n+        if (errorFile != null) {\n+            File errors = new File(errorFile);\n+            if (errors.exists()) {\n+                LOGGER.error(\"Error applying \" + file + \" CLI script. The Operations were executed but \"\n+                        + \"there were unexpected values. See list of errors in \" + errors);\n+                for (String line : Files.readAllLines(errors.toPath())) {\n+                    LOGGER.error(line);", "originalCommit": "baa625f598fa9631f79874a25ee62274cabc88d0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTcyMDE3OA==", "url": "https://github.com/wildfly/wildfly-core/pull/4054#discussion_r365720178", "bodyText": "same remark as above", "author": "jmesnil", "createdAt": "2020-01-13T10:01:57Z", "path": "cli/src/main/java/org/jboss/as/cli/impl/BootScriptInvoker.java", "diffHunk": "@@ -0,0 +1,180 @@\n+/*\n+Copyright 2019 Red Hat, Inc.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+you may not use this file except in compliance with the License.\n+You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+ */\n+package org.jboss.as.cli.impl;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.util.Properties;\n+import java.util.logging.Level;\n+import java.util.logging.LogManager;\n+\n+import org.jboss.as.cli.CommandContext;\n+import org.jboss.as.controller.client.ModelControllerClient;\n+import org.jboss.as.controller.client.impl.AdditionalBootCliScriptInvoker;\n+import org.jboss.logging.Logger;\n+import org.wildfly.security.manager.WildFlySecurityManager;\n+\n+/**\n+ * CLI script invoker. This is instantiated inside a server during boot in\n+ * admin-only.\n+ *\n+ * @author jdenise\n+ */\n+public class BootScriptInvoker implements AdditionalBootCliScriptInvoker {\n+\n+    private static final Logger LOGGER = Logger.getLogger(BootScriptInvoker.class);\n+\n+    private final Properties props = new Properties();\n+    private final Properties existingProps = new Properties();\n+\n+    @Override\n+    public void runCliScript(ModelControllerClient client, File file) {\n+        LOGGER.info(\"Executing CLI Script invoker for file \" + file);\n+\n+        String log = WildFlySecurityManager.getPropertyPrivileged(\"org.wildfly.internal.cli.boot.hook.script.logging\", \"false\");\n+        final LogManager logManager = LogManager.getLogManager();\n+        // Turnoff logger\n+        if (!Boolean.parseBoolean(log)) {\n+            if (logManager instanceof org.jboss.logmanager.LogManager) {\n+                org.jboss.logmanager.LogManager jbossLogManager = (org.jboss.logmanager.LogManager) logManager;\n+                jbossLogManager.getLogger(CommandContext.class.getName()).setLevel(Level.OFF);\n+            }\n+        }\n+        CommandContext ctx = null;\n+        String props = WildFlySecurityManager.getPropertyPrivileged(\"org.wildfly.internal.cli.boot.hook.script.properties\", null);\n+\n+        if (props != null) {\n+            File propsFile = new File(props);\n+            if (!propsFile.exists()) {\n+                // TODO i18n\n+                throw new RuntimeException(\"Could not find file \" + propsFile.getAbsolutePath());\n+            }\n+            handleProperties(propsFile);\n+        }\n+        File logFile = null;\n+        String logFilePath = WildFlySecurityManager.getPropertyPrivileged(\"org.wildfly.internal.cli.boot.hook.script.output.file\", null);\n+        if (logFilePath != null) {\n+            logFile = new File(logFilePath);\n+        }\n+\n+        try {\n+            OutputStream output = null;\n+            if (logFile != null) {\n+                output = new FileOutputStream(logFile);\n+            }\n+            ctx = new CommandContextImpl(output);\n+            ctx.bindClient(client);\n+\n+            processFile(file, ctx);\n+        } catch (Exception ex) {\n+            try {\n+                LOGGER.error(\"Error applying \" + file + \" CLI script:\");\n+                for (String line : Files.readAllLines(file.toPath())) {\n+                    LOGGER.error(line);\n+                }\n+                if (logFile != null) {\n+                    LOGGER.error(\"CLI execution output:\");\n+                    for (String line : Files.readAllLines(logFile.toPath())) {\n+                        LOGGER.error(line);\n+                    }\n+                }\n+            } catch (IOException ex1) {\n+                RuntimeException rtex = new RuntimeException(ex1);\n+                rtex.addSuppressed(ex);\n+                throw rtex;\n+            }\n+            throw new RuntimeException(ex);\n+        } finally {\n+            if (ctx != null) {\n+                ctx.terminateSession();\n+            }\n+            clearProperties();\n+        }\n+        LOGGER.info(\"Done executing CLI Script invoker for file \" + file);\n+    }\n+\n+    private static void processFile(File file, final CommandContext cmdCtx) throws IOException {\n+        try ( BufferedReader reader = new BufferedReader(new FileReader(file))) {\n+            String line = reader.readLine();\n+            while (cmdCtx.getExitCode() == 0 && !cmdCtx.isTerminated() && line != null) {\n+                LOGGER.debug(\"Executing command \" + line.trim());\n+                cmdCtx.handle(line.trim());\n+                line = reader.readLine();\n+            }\n+        } catch (Throwable e) {\n+            LOGGER.error(\"Unexpected exception processing commands \", e);\n+            throw new IllegalStateException(\"Failed to process file '\" + file.getAbsolutePath() + \"'\", e);\n+        }\n+        String warnFile = WildFlySecurityManager.getPropertyPrivileged(\"org.wildfly.internal.cli.boot.hook.script.warn.file\", null);\n+        if (warnFile != null) {\n+            File warns = new File(warnFile);\n+            if (warns.exists()) {\n+                for (String line : Files.readAllLines(warns.toPath())) {\n+                    LOGGER.warn(line);\n+                }\n+            }\n+\n+        }\n+        String errorFile = WildFlySecurityManager.getPropertyPrivileged(\"org.wildfly.internal.cli.boot.hook.script.error.file\", null);\n+        if (errorFile != null) {\n+            File errors = new File(errorFile);\n+            if (errors.exists()) {\n+                LOGGER.error(\"Error applying \" + file + \" CLI script. The Operations were executed but \"\n+                        + \"there were unexpected values. See list of errors in \" + errors);\n+                for (String line : Files.readAllLines(errors.toPath())) {\n+                    LOGGER.error(line);\n+                }\n+            }\n+\n+        }\n+        if (cmdCtx.getExitCode() != 0 || cmdCtx.isTerminated()) {\n+            throw new RuntimeException(\"Error applying \" + file + \" CLI script.\");", "originalCommit": "baa625f598fa9631f79874a25ee62274cabc88d0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTcyMTMxNw==", "url": "https://github.com/wildfly/wildfly-core/pull/4054#discussion_r365721317", "bodyText": "same remark as above", "author": "jmesnil", "createdAt": "2020-01-13T10:04:38Z", "path": "cli/src/main/java/org/jboss/as/cli/impl/CommandContextImpl.java", "diffHunk": "@@ -445,6 +449,44 @@\n         CliLauncher.runcom(this);\n     }\n \n+    /**\n+     * Constructor called from Boot invoker, minimal configuration.\n+     * public for testing purpose.\n+     *\n+     */\n+    public CommandContextImpl(OutputStream output) throws CliInitializationException {\n+        bootInvoker = true;\n+        config = CliConfigImpl.newBootConfig();\n+        addressResolver = ControllerAddressResolver.newInstance(config, null);\n+\n+        operationHandler = new OperationRequestHandler();\n+\n+        this.username = null;\n+        this.password = null;\n+        this.disableLocalAuth = false;\n+        this.clientBindAddress = null;\n+\n+        SILENT = config.isSilent();\n+        ERROR_ON_INTERACT = config.isErrorOnInteract();\n+        echoCommand = config.isEchoCommand();\n+        configTimeout = config.getCommandTimeout() == null ? DEFAULT_TIMEOUT : config.getCommandTimeout();\n+        resolveParameterValues = config.isResolveParameterValues();\n+        redefinedOutput = output != null;\n+        cliPrintStream = !redefinedOutput ? new CLIPrintStream() : new CLIPrintStream(output);\n+\n+        aeshCommands = new AeshCommands(this, new OperationCommandContainer(this));\n+        this.cmdRegistry = aeshCommands.getRegistry();\n+        this.cmdCompleter = null;\n+        this.legacyCmdCompleter = null;\n+        this.operationCandidatesProvider = null;\n+\n+        try {\n+            initCommands(true);\n+        } catch (CommandLineException | CommandLineParserException e) {\n+            throw new CliInitializationException(\"Failed to initialize commands\", e);", "originalCommit": "baa625f598fa9631f79874a25ee62274cabc88d0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTcyMjE0Nw==", "url": "https://github.com/wildfly/wildfly-core/pull/4054#discussion_r365722147", "bodyText": "stylistic suggestion: maybe you should add things that change with bootInvoker in a single if (!bootInvoker)?", "author": "jmesnil", "createdAt": "2020-01-13T10:06:31Z", "path": "cli/src/main/java/org/jboss/as/cli/impl/CommandContextImpl.java", "diffHunk": "@@ -523,18 +565,26 @@ private void restoreStdIO() {\n     }\n \n     private void initCommands() throws CommandLineException, CommandLineParserException {\n+        initCommands(false);\n+    }\n+\n+    private void initCommands(boolean bootInvoker) throws CommandLineException, CommandLineParserException {\n         // aesh commands\n         cmdRegistry.addCommand(new VersionCommand());\n         cmdRegistry.addCommand(new HelpCommand(cmdRegistry));\n-        cmdRegistry.addCommand(new ConnectCommand());\n+        if (!bootInvoker) {", "originalCommit": "baa625f598fa9631f79874a25ee62274cabc88d0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTc3OTM4Nw==", "url": "https://github.com/wildfly/wildfly-core/pull/4054#discussion_r365779387", "bodyText": "@jmesnil I would prefer to keep the current order when registering commands.", "author": "jfdenise", "createdAt": "2020-01-13T12:31:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTcyMjE0Nw=="}], "type": "inlineReview"}, {"oid": "513a26c41c5963562ed0eb7257fbeeb25b3e031b", "url": "https://github.com/wildfly/wildfly-core/commit/513a26c41c5963562ed0eb7257fbeeb25b3e031b", "message": "[WFCORE-4770] Add interface to invoke additional boot operations from CLI", "committedDate": "2020-01-13T12:46:00Z", "type": "commit"}, {"oid": "c7517096c48ffd0269ecfdd51d04058e4d4e7164", "url": "https://github.com/wildfly/wildfly-core/commit/c7517096c48ffd0269ecfdd51d04058e4d4e7164", "message": "[WFCORE-4770] Ability to run CLI commands from within the server", "committedDate": "2020-01-13T12:46:00Z", "type": "commit"}, {"oid": "3ed66a2d4d3a0b8c232452cbc0266f2eacd351d1", "url": "https://github.com/wildfly/wildfly-core/commit/3ed66a2d4d3a0b8c232452cbc0266f2eacd351d1", "message": "[WFCORE-4770] Hook in server controller for boottime CLI scripts\n\nThe mechanism to do this is in a 'throwaway' module loader", "committedDate": "2020-01-13T12:46:00Z", "type": "commit"}, {"oid": "ce78066c50b90d7f5be3552702597523710b2b3f", "url": "https://github.com/wildfly/wildfly-core/commit/ce78066c50b90d7f5be3552702597523710b2b3f", "message": "[WFCORE-4770] Manualmode tests for the CLI boot hook", "committedDate": "2020-01-13T12:46:00Z", "type": "commit"}, {"oid": "8302eedf9f142ec613058007b228e3d226f0d491", "url": "https://github.com/wildfly/wildfly-core/commit/8302eedf9f142ec613058007b228e3d226f0d491", "message": "[WFCORE-4770] Test CommandContextImpl used in BootScriptInvoker", "committedDate": "2020-01-13T12:46:00Z", "type": "commit"}, {"oid": "661b47742fdbb5d01244ce29723865865d82107e", "url": "https://github.com/wildfly/wildfly-core/commit/661b47742fdbb5d01244ce29723865865d82107e", "message": "[WFCORE-4770] Fix race condition in tests", "committedDate": "2020-01-13T12:46:00Z", "type": "commit"}, {"oid": "0181ca382306ac752151c847c1b2ce23543a9044", "url": "https://github.com/wildfly/wildfly-core/commit/0181ca382306ac752151c847c1b2ce23543a9044", "message": "[WFCORE-4770] Fix logging in CLI", "committedDate": "2020-01-13T12:46:13Z", "type": "commit"}, {"oid": "0181ca382306ac752151c847c1b2ce23543a9044", "url": "https://github.com/wildfly/wildfly-core/commit/0181ca382306ac752151c847c1b2ce23543a9044", "message": "[WFCORE-4770] Fix logging in CLI", "committedDate": "2020-01-13T12:46:13Z", "type": "forcePushed"}]}