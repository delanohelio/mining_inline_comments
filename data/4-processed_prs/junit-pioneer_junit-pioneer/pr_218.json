{"pr_number": 218, "pr_title": "Implement PioneerTestKit and PioneerEngineExecutionResults (#6)", "pr_createdAt": "2020-04-04T22:13:50Z", "pr_url": "https://github.com/junit-pioneer/junit-pioneer/pull/218", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU2MDkzOA==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/218#discussion_r405560938", "bodyText": "Why is this here?", "author": "Michael1993", "createdAt": "2020-04-08T14:18:36Z", "path": "src/test/java/org/junitpioneer/jupiter/ReportEntryExtensionTest.java", "diffHunk": "@@ -83,26 +83,18 @@ void repeatedAnnotation_logEachKeyValuePairAsIndividualEntry() {\n \t\t\t\t\t\t\"rapping at my chamber door\"));\n \t}\n \n-\tprivate static List<Map<String, String>> reportEntries(ExecutionEventRecorder recorder) {\n-\t\treturn recorder\n-\t\t\t\t.eventStream()\n-\t\t\t\t.filter(event -> event.getType().equals(ExecutionEvent.Type.REPORTING_ENTRY_PUBLISHED))\n-\t\t\t\t.map(executionEvent -> executionEvent.getPayload(org.junit.platform.engine.reporting.ReportEntry.class))\n-\t\t\t\t.filter(Optional::isPresent)\n-\t\t\t\t.map(Optional::get)\n-\t\t\t\t.map(org.junit.platform.engine.reporting.ReportEntry::getKeyValuePairs)\n-\t\t\t\t.collect(toList());\n-\t}\n-\n \tprivate static Map.Entry<String, String> entryOf(String key, String value) {\n \t\treturn new AbstractMap.SimpleEntry<>(key, value);\n \t}\n \n \tstatic class ReportEntriesTest {\n \n+\t\tprivate static AtomicInteger executionCount = new AtomicInteger(0);\n+\n \t\t@Test\n \t\t@ReportEntry(key = \"Crow2\", value = \"While I pondered weak and weary\")\n \t\tvoid explicitKey() {\n+\t\t\tSystem.out.println(\"HI THERE! \" + executionCount.getAndIncrement());", "originalCommit": "a9deae5f525857d29442f5c054e21007f1c935dc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTcxNDkyNg==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/218#discussion_r405714926", "bodyText": "Nicolai added it for basic tests after creating the basic wrapper after updating so see if it works. And I just didn't think about it anymore. Will remove it", "author": "Bukama", "createdAt": "2020-04-08T18:06:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU2MDkzOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU2MTI0Nw==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/218#discussion_r405561247", "bodyText": "Don't really see why this is here. Just for testing?", "author": "Michael1993", "createdAt": "2020-04-08T14:19:01Z", "path": "src/test/java/org/junitpioneer/jupiter/ReportEntryExtensionTest.java", "diffHunk": "@@ -83,26 +83,18 @@ void repeatedAnnotation_logEachKeyValuePairAsIndividualEntry() {\n \t\t\t\t\t\t\"rapping at my chamber door\"));\n \t}\n \n-\tprivate static List<Map<String, String>> reportEntries(ExecutionEventRecorder recorder) {\n-\t\treturn recorder\n-\t\t\t\t.eventStream()\n-\t\t\t\t.filter(event -> event.getType().equals(ExecutionEvent.Type.REPORTING_ENTRY_PUBLISHED))\n-\t\t\t\t.map(executionEvent -> executionEvent.getPayload(org.junit.platform.engine.reporting.ReportEntry.class))\n-\t\t\t\t.filter(Optional::isPresent)\n-\t\t\t\t.map(Optional::get)\n-\t\t\t\t.map(org.junit.platform.engine.reporting.ReportEntry::getKeyValuePairs)\n-\t\t\t\t.collect(toList());\n-\t}\n-\n \tprivate static Map.Entry<String, String> entryOf(String key, String value) {\n \t\treturn new AbstractMap.SimpleEntry<>(key, value);\n \t}\n \n \tstatic class ReportEntriesTest {\n \n+\t\tprivate static AtomicInteger executionCount = new AtomicInteger(0);", "originalCommit": "a9deae5f525857d29442f5c054e21007f1c935dc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU2NDMzNQ==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/218#discussion_r405564335", "bodyText": "Test descriptor is 'unused' in the strictest sense because it is only mentioned in comments. I think we should use fully-qualified names in docs.", "author": "Michael1993", "createdAt": "2020-04-08T14:23:16Z", "path": "src/test/java/org/junitpioneer/platform/testkit/engine/PioneerEngineExecutionResults.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.platform.testkit.engine;\n+\n+import static java.util.stream.Collectors.toList;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.junit.platform.engine.TestDescriptor;", "originalCommit": "a9deae5f525857d29442f5c054e21007f1c935dc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU2NDkyNg==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/218#discussion_r405564926", "bodyText": "'Pioneers' to show possession. Sounds better to me.", "author": "Michael1993", "createdAt": "2020-04-08T14:24:05Z", "path": "src/test/java/org/junitpioneer/platform/testkit/engine/PioneerEngineExecutionResults.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.platform.testkit.engine;\n+\n+import static java.util.stream.Collectors.toList;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.junit.platform.engine.TestDescriptor;\n+import org.junit.platform.engine.TestExecutionResult;\n+import org.junit.platform.engine.discovery.DiscoverySelectors;\n+import org.junit.platform.testkit.engine.EngineExecutionResults;\n+import org.junit.platform.testkit.engine.EngineTestKit;\n+import org.junit.platform.testkit.engine.Events;\n+\n+/**\n+ * Pioneer own class to handle {@link EngineExecutionResults} of the JUnit-Jupiter-Engine.", "originalCommit": "a9deae5f525857d29442f5c054e21007f1c935dc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU2NzMzMA==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/218#discussion_r405567330", "bodyText": "You could import this (in which case the import is used over the ReportEntry in the same package).", "author": "Michael1993", "createdAt": "2020-04-08T14:27:27Z", "path": "src/test/java/org/junitpioneer/platform/testkit/engine/PioneerEngineExecutionResults.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.platform.testkit.engine;\n+\n+import static java.util.stream.Collectors.toList;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.junit.platform.engine.TestDescriptor;\n+import org.junit.platform.engine.TestExecutionResult;\n+import org.junit.platform.engine.discovery.DiscoverySelectors;\n+import org.junit.platform.testkit.engine.EngineExecutionResults;\n+import org.junit.platform.testkit.engine.EngineTestKit;\n+import org.junit.platform.testkit.engine.Events;\n+\n+/**\n+ * Pioneer own class to handle {@link EngineExecutionResults} of the JUnit-Jupiter-Engine.\n+ *\n+ */\n+public class PioneerEngineExecutionResults {\n+\n+\tEngineExecutionResults executionResults;\n+\n+\tpublic PioneerEngineExecutionResults(Class<?> testClass) {\n+\t\texecutionResults = EngineTestKit\n+\t\t\t\t.engine(\"junit-jupiter\")\n+\t\t\t\t.selectors(DiscoverySelectors.selectClass(testClass))\n+\t\t\t\t.execute();\n+\t}\n+\n+\tpublic PioneerEngineExecutionResults(Class<?> testClass, String testMethodName) {\n+\t\texecutionResults = EngineTestKit\n+\t\t\t\t.engine(\"junit-jupiter\")\n+\t\t\t\t.selectors(DiscoverySelectors.selectMethod(testClass, testMethodName))\n+\t\t\t\t.execute();\n+\t}\n+\n+\t/**\n+\t * Get all recorded events.\n+\t */\n+\tpublic Events all() {\n+\t\treturn executionResults.all();\n+\t}\n+\n+\t/**\n+\t * Get recorded events for containers.\n+\t *\n+\t * <p>In this context, the word \"container\" applies to {@link TestDescriptor\n+\t * TestDescriptors} that return {@code true} from {@link TestDescriptor#isContainer()}.</p>\n+\t */\n+\tpublic Events containers() {\n+\t\treturn executionResults.containers();\n+\t}\n+\n+\t/**\n+\t * Get recorded events for tests.\n+\t *\n+\t * <p>In this context, the word \"test\" applies to {@link TestDescriptor\n+\t * TestDescriptors} that return {@code true} from {@link TestDescriptor#isTest()}.</p>\n+\t */\n+\tpublic Events tests() {\n+\t\treturn executionResults.tests();\n+\t}\n+\n+\t/**\n+\t * Returns the number of all tests.\n+\t *\n+\t * @return Number of all tests\n+\t */\n+\tpublic long getTotalNumberOfTests() {\n+\t\treturn executionResults.tests().count();\n+\t}\n+\n+\t/**\n+\t * Returns the number of failed tests.\n+\t *\n+\t * @return Number of failed tests\n+\t */\n+\tpublic long getNumberOfFailedTests() {\n+\t\treturn executionResults.all().failed().count();\n+\t}\n+\n+\t/**\n+\t * Returns the number of successful tests.\n+\t *\n+\t * @return Number of successful tests\n+\t */\n+\tpublic long getNumberOfSucceededEvents() {\n+\t\treturn executionResults.all().succeeded().count();\n+\t}\n+\n+\t/**\n+\t * Returns the number of skipped tests.\n+\t *\n+\t * @return Number of skipped tests\n+\t */\n+\tpublic long getNumberOfSkippedEvents() {\n+\t\treturn executionResults.all().skipped().count();\n+\t}\n+\n+\t/**\n+\t * Returns the number of aborted tests.\n+\t *\n+\t * @return Number of aborted events results\n+\t */\n+\tpublic long getNumberOfAbortedEvents() {\n+\t\treturn executionResults.all().aborted().count();\n+\t}\n+\n+\t/**\n+\t * Returns the message of the first failed event.\n+\t * This can be used if you expect a test to fail with an exception and want to check the exception message.\n+\t *\n+\t * @return Message of the first failed event.\n+\t */\n+\tpublic String getFirstFailuresThrowableMessage() {\n+\t\treturn executionResults\n+\t\t\t\t.all()\n+\t\t\t\t.failed()\n+\t\t\t\t.stream()\n+\t\t\t\t.findFirst()\n+\t\t\t\t.orElseThrow(AssertionError::new)\n+\t\t\t\t.getPayload(TestExecutionResult.class)\n+\t\t\t\t.flatMap(TestExecutionResult::getThrowable)\n+\t\t\t\t.orElseThrow(AssertionError::new)\n+\t\t\t\t.getMessage();\n+\t}\n+\n+\t/**\n+\t * Returns the published report entries of all tests.\n+\t *\n+\t * @return published report entries of all tests\n+\t */\n+\tpublic List<Map<String, String>> getPublishedTestReportEntries() {\n+\t\treturn executionResults\n+\t\t\t\t.tests()\n+\t\t\t\t.reportingEntryPublished()\n+\t\t\t\t.stream()\n+\t\t\t\t.map(executionEvent -> executionEvent.getPayload(org.junit.platform.engine.reporting.ReportEntry.class))", "originalCommit": "a9deae5f525857d29442f5c054e21007f1c935dc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU2NzY4OQ==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/218#discussion_r405567689", "bodyText": "You could import this.", "author": "Michael1993", "createdAt": "2020-04-08T14:27:55Z", "path": "src/test/java/org/junitpioneer/platform/testkit/engine/PioneerEngineExecutionResults.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.platform.testkit.engine;\n+\n+import static java.util.stream.Collectors.toList;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.junit.platform.engine.TestDescriptor;\n+import org.junit.platform.engine.TestExecutionResult;\n+import org.junit.platform.engine.discovery.DiscoverySelectors;\n+import org.junit.platform.testkit.engine.EngineExecutionResults;\n+import org.junit.platform.testkit.engine.EngineTestKit;\n+import org.junit.platform.testkit.engine.Events;\n+\n+/**\n+ * Pioneer own class to handle {@link EngineExecutionResults} of the JUnit-Jupiter-Engine.\n+ *\n+ */\n+public class PioneerEngineExecutionResults {\n+\n+\tEngineExecutionResults executionResults;\n+\n+\tpublic PioneerEngineExecutionResults(Class<?> testClass) {\n+\t\texecutionResults = EngineTestKit\n+\t\t\t\t.engine(\"junit-jupiter\")\n+\t\t\t\t.selectors(DiscoverySelectors.selectClass(testClass))\n+\t\t\t\t.execute();\n+\t}\n+\n+\tpublic PioneerEngineExecutionResults(Class<?> testClass, String testMethodName) {\n+\t\texecutionResults = EngineTestKit\n+\t\t\t\t.engine(\"junit-jupiter\")\n+\t\t\t\t.selectors(DiscoverySelectors.selectMethod(testClass, testMethodName))\n+\t\t\t\t.execute();\n+\t}\n+\n+\t/**\n+\t * Get all recorded events.\n+\t */\n+\tpublic Events all() {\n+\t\treturn executionResults.all();\n+\t}\n+\n+\t/**\n+\t * Get recorded events for containers.\n+\t *\n+\t * <p>In this context, the word \"container\" applies to {@link TestDescriptor\n+\t * TestDescriptors} that return {@code true} from {@link TestDescriptor#isContainer()}.</p>\n+\t */\n+\tpublic Events containers() {\n+\t\treturn executionResults.containers();\n+\t}\n+\n+\t/**\n+\t * Get recorded events for tests.\n+\t *\n+\t * <p>In this context, the word \"test\" applies to {@link TestDescriptor\n+\t * TestDescriptors} that return {@code true} from {@link TestDescriptor#isTest()}.</p>\n+\t */\n+\tpublic Events tests() {\n+\t\treturn executionResults.tests();\n+\t}\n+\n+\t/**\n+\t * Returns the number of all tests.\n+\t *\n+\t * @return Number of all tests\n+\t */\n+\tpublic long getTotalNumberOfTests() {\n+\t\treturn executionResults.tests().count();\n+\t}\n+\n+\t/**\n+\t * Returns the number of failed tests.\n+\t *\n+\t * @return Number of failed tests\n+\t */\n+\tpublic long getNumberOfFailedTests() {\n+\t\treturn executionResults.all().failed().count();\n+\t}\n+\n+\t/**\n+\t * Returns the number of successful tests.\n+\t *\n+\t * @return Number of successful tests\n+\t */\n+\tpublic long getNumberOfSucceededEvents() {\n+\t\treturn executionResults.all().succeeded().count();\n+\t}\n+\n+\t/**\n+\t * Returns the number of skipped tests.\n+\t *\n+\t * @return Number of skipped tests\n+\t */\n+\tpublic long getNumberOfSkippedEvents() {\n+\t\treturn executionResults.all().skipped().count();\n+\t}\n+\n+\t/**\n+\t * Returns the number of aborted tests.\n+\t *\n+\t * @return Number of aborted events results\n+\t */\n+\tpublic long getNumberOfAbortedEvents() {\n+\t\treturn executionResults.all().aborted().count();\n+\t}\n+\n+\t/**\n+\t * Returns the message of the first failed event.\n+\t * This can be used if you expect a test to fail with an exception and want to check the exception message.\n+\t *\n+\t * @return Message of the first failed event.\n+\t */\n+\tpublic String getFirstFailuresThrowableMessage() {\n+\t\treturn executionResults\n+\t\t\t\t.all()\n+\t\t\t\t.failed()\n+\t\t\t\t.stream()\n+\t\t\t\t.findFirst()\n+\t\t\t\t.orElseThrow(AssertionError::new)\n+\t\t\t\t.getPayload(TestExecutionResult.class)\n+\t\t\t\t.flatMap(TestExecutionResult::getThrowable)\n+\t\t\t\t.orElseThrow(AssertionError::new)\n+\t\t\t\t.getMessage();\n+\t}\n+\n+\t/**\n+\t * Returns the published report entries of all tests.\n+\t *\n+\t * @return published report entries of all tests\n+\t */\n+\tpublic List<Map<String, String>> getPublishedTestReportEntries() {\n+\t\treturn executionResults\n+\t\t\t\t.tests()\n+\t\t\t\t.reportingEntryPublished()\n+\t\t\t\t.stream()\n+\t\t\t\t.map(executionEvent -> executionEvent.getPayload(org.junit.platform.engine.reporting.ReportEntry.class))\n+\t\t\t\t.filter(Optional::isPresent)\n+\t\t\t\t.map(Optional::get)\n+\t\t\t\t.map(org.junit.platform.engine.reporting.ReportEntry::getKeyValuePairs)", "originalCommit": "a9deae5f525857d29442f5c054e21007f1c935dc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU2ODcyMA==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/218#discussion_r405568720", "bodyText": "You could inline this (i.e.: return new Pioneer...).", "author": "Michael1993", "createdAt": "2020-04-08T14:29:20Z", "path": "src/test/java/org/junitpioneer/platform/testkit/engine/PioneerTestKit.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.platform.testkit.engine;\n+\n+public class PioneerTestKit {\n+\n+\t/**\n+\t * Returns the execution results of the given test class.\n+\t *\n+\t * @param testClass Name of the test class, the results should be returned\n+\t * @return The execution results\n+\t */\n+\tpublic static PioneerEngineExecutionResults getExecutionResults(Class<?> testClass) {\n+\t\tPioneerEngineExecutionResults results = new PioneerEngineExecutionResults(testClass);\n+\n+\t\treturn results;\n+\t}\n+\n+\t/**\n+\t * Returns the execution results of the given method of a given test class.\n+\t *\n+\t * @param testClass Name of the test class\n+\t * @param testMethodName Name of the test method (of the given class)\n+\t * @return The execution results\n+\t */\n+\tpublic static PioneerEngineExecutionResults getExecutionResults(Class<?> testClass, String testMethodName) {\n+\t\tPioneerEngineExecutionResults results = new PioneerEngineExecutionResults(testClass, testMethodName);\n+\n+\t\treturn results;", "originalCommit": "a9deae5f525857d29442f5c054e21007f1c935dc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTcxNjM2MQ==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/218#discussion_r405716361", "bodyText": "I know, but I normally don't do it, to have a better debug possibility and the costs for this variable are quite less in my opinion.\nAlso in this specific case (and the one below) the PioneerTestKit is a wrapper for future improving. We will then have to split it again.", "author": "Bukama", "createdAt": "2020-04-08T18:08:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU2ODcyMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU2OTM2MA==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/218#discussion_r405569360", "bodyText": "You could inline this (i.e.: return new Pioneer...).", "author": "Michael1993", "createdAt": "2020-04-08T14:30:16Z", "path": "src/test/java/org/junitpioneer/platform/testkit/engine/PioneerTestKit.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.platform.testkit.engine;\n+\n+public class PioneerTestKit {\n+\n+\t/**\n+\t * Returns the execution results of the given test class.\n+\t *\n+\t * @param testClass Name of the test class, the results should be returned\n+\t * @return The execution results\n+\t */\n+\tpublic static PioneerEngineExecutionResults getExecutionResults(Class<?> testClass) {\n+\t\tPioneerEngineExecutionResults results = new PioneerEngineExecutionResults(testClass);\n+\n+\t\treturn results;", "originalCommit": "a9deae5f525857d29442f5c054e21007f1c935dc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTcxODI5MA==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/218#discussion_r405718290", "bodyText": "See above", "author": "Bukama", "createdAt": "2020-04-08T18:12:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU2OTM2MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjIxMjIwNQ==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/218#discussion_r406212205", "bodyText": "Is this package-private on purpose?", "author": "Michael1993", "createdAt": "2020-04-09T13:41:02Z", "path": "src/test/java/org/junitpioneer/platform/testkit/engine/PioneerEngineExecutionResults.java", "diffHunk": "@@ -0,0 +1,155 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.platform.testkit.engine;\n+\n+import static java.util.stream.Collectors.toList;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.junit.platform.engine.TestExecutionResult;\n+import org.junit.platform.engine.discovery.DiscoverySelectors;\n+import org.junit.platform.testkit.engine.EngineExecutionResults;\n+import org.junit.platform.testkit.engine.EngineTestKit;\n+import org.junit.platform.testkit.engine.Events;\n+\n+/**\n+ * Pioneers own class to handle {@link org.junit.platform.testkit.engine.EngineExecutionResults} of the JUnit-Jupiter-Engine.\n+ *\n+ */\n+public class PioneerEngineExecutionResults {\n+\n+\tEngineExecutionResults executionResults;", "originalCommit": "4f4bb8dc56695e9e45df632ef5eba564ccbe2d7f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjMwMjYxMA==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/218#discussion_r406302610", "bodyText": "Yes I always use package private instead of private to acces fields and methods from tests", "author": "Bukama", "createdAt": "2020-04-09T15:49:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjIxMjIwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjMxNDU3MA==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/218#discussion_r406314570", "bodyText": "But in this case - do you access it? I'm not seeing the tests for this class.", "author": "Michael1993", "createdAt": "2020-04-09T16:08:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjIxMjIwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjIxMjkxMw==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/218#discussion_r406212913", "bodyText": "Consider static importing DiscoverySelectors methods. Would that be more readable?", "author": "Michael1993", "createdAt": "2020-04-09T13:42:03Z", "path": "src/test/java/org/junitpioneer/platform/testkit/engine/PioneerEngineExecutionResults.java", "diffHunk": "@@ -0,0 +1,155 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.platform.testkit.engine;\n+\n+import static java.util.stream.Collectors.toList;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.junit.platform.engine.TestExecutionResult;\n+import org.junit.platform.engine.discovery.DiscoverySelectors;\n+import org.junit.platform.testkit.engine.EngineExecutionResults;\n+import org.junit.platform.testkit.engine.EngineTestKit;\n+import org.junit.platform.testkit.engine.Events;\n+\n+/**\n+ * Pioneers own class to handle {@link org.junit.platform.testkit.engine.EngineExecutionResults} of the JUnit-Jupiter-Engine.\n+ *\n+ */\n+public class PioneerEngineExecutionResults {\n+\n+\tEngineExecutionResults executionResults;\n+\n+\tpublic PioneerEngineExecutionResults(Class<?> testClass) {\n+\t\texecutionResults = EngineTestKit\n+\t\t\t\t.engine(\"junit-jupiter\")\n+\t\t\t\t.selectors(DiscoverySelectors.selectClass(testClass))", "originalCommit": "4f4bb8dc56695e9e45df632ef5eba564ccbe2d7f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjMwMzkzNQ==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/218#discussion_r406303935", "bodyText": "Personally I like regular imports in such cases more as it's clear that this messages does not belong to the class. But if the majority wants to use static imports I can switch. Let's see what @nicolaiparlog likes to see.", "author": "Bukama", "createdAt": "2020-04-09T15:51:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjIxMjkxMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODM1MDgxMw==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/218#discussion_r408350813", "bodyText": "I like static imports in general, but I prefer them in situations where a somewhat universal API is used that is frequently seen. DiscoverySelectors::selectClass doesn't quite qualify, but I'm still ok, either way.", "author": "nipafx", "createdAt": "2020-04-14T18:34:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjIxMjkxMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTc0Njc0Mg==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/218#discussion_r409746742", "bodyText": "I would like to keep them. So I resolve this conversation.", "author": "Bukama", "createdAt": "2020-04-16T17:59:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjIxMjkxMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjIxMzA2NQ==", "url": "https://github.com/junit-pioneer/junit-pioneer/pull/218#discussion_r406213065", "bodyText": "Consider a static import.", "author": "Michael1993", "createdAt": "2020-04-09T13:42:15Z", "path": "src/test/java/org/junitpioneer/platform/testkit/engine/PioneerEngineExecutionResults.java", "diffHunk": "@@ -0,0 +1,155 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * http://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junitpioneer.platform.testkit.engine;\n+\n+import static java.util.stream.Collectors.toList;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.junit.platform.engine.TestExecutionResult;\n+import org.junit.platform.engine.discovery.DiscoverySelectors;\n+import org.junit.platform.testkit.engine.EngineExecutionResults;\n+import org.junit.platform.testkit.engine.EngineTestKit;\n+import org.junit.platform.testkit.engine.Events;\n+\n+/**\n+ * Pioneers own class to handle {@link org.junit.platform.testkit.engine.EngineExecutionResults} of the JUnit-Jupiter-Engine.\n+ *\n+ */\n+public class PioneerEngineExecutionResults {\n+\n+\tEngineExecutionResults executionResults;\n+\n+\tpublic PioneerEngineExecutionResults(Class<?> testClass) {\n+\t\texecutionResults = EngineTestKit\n+\t\t\t\t.engine(\"junit-jupiter\")\n+\t\t\t\t.selectors(DiscoverySelectors.selectClass(testClass))\n+\t\t\t\t.execute();\n+\t}\n+\n+\tpublic PioneerEngineExecutionResults(Class<?> testClass, String testMethodName) {\n+\t\texecutionResults = EngineTestKit\n+\t\t\t\t.engine(\"junit-jupiter\")\n+\t\t\t\t.selectors(DiscoverySelectors.selectMethod(testClass, testMethodName))", "originalCommit": "4f4bb8dc56695e9e45df632ef5eba564ccbe2d7f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "46252d08fc88ec27bd2d4ea6f0b1b91390c93c66", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/46252d08fc88ec27bd2d4ea6f0b1b91390c93c66", "message": "Proof of concept for use of Testkit API", "committedDate": "2020-04-21T18:52:10Z", "type": "commit"}, {"oid": "6e37911eb6a48510b6231e4dcbca0633b1d2f9b1", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/6e37911eb6a48510b6231e4dcbca0633b1d2f9b1", "message": "Starting to implement PioneerEngineExecutionResults", "committedDate": "2020-04-21T18:52:10Z", "type": "commit"}, {"oid": "43a7ccdaf7524deaa1fff1aece88978e283c849f", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/43a7ccdaf7524deaa1fff1aece88978e283c849f", "message": "Improving PioneerEngineExecutionResults", "committedDate": "2020-04-21T18:52:10Z", "type": "commit"}, {"oid": "4af20f41870b1e5556dd95eb447b0071c96ab86b", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/4af20f41870b1e5556dd95eb447b0071c96ab86b", "message": "Improving PioneerEngineExecutionResults", "committedDate": "2020-04-21T18:52:10Z", "type": "commit"}, {"oid": "d4e7582a9e6a81d51809f8f5d79f6d36d42a77da", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/d4e7582a9e6a81d51809f8f5d79f6d36d42a77da", "message": "Apply code review comments", "committedDate": "2020-04-21T18:52:10Z", "type": "commit"}, {"oid": "f94cf18d1e9d38592ae7efecf475dd46f4f1c870", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/f94cf18d1e9d38592ae7efecf475dd46f4f1c870", "message": "Rename a few methods", "committedDate": "2020-04-21T18:52:10Z", "type": "commit"}, {"oid": "3377a46ea2bb2cff124eb3430a88e9838b6821f0", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/3377a46ea2bb2cff124eb3430a88e9838b6821f0", "message": "Rename classes (shorter) and methods (no \"get\")", "committedDate": "2020-04-21T18:52:10Z", "type": "commit"}, {"oid": "0a1f4ebeb742012bcfb6397f28a936bf968bf1d8", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/0a1f4ebeb742012bcfb6397f28a936bf968bf1d8", "message": "Refactor `DefaultLocaleTests` to new API", "committedDate": "2020-04-21T18:52:10Z", "type": "commit"}, {"oid": "0a1f4ebeb742012bcfb6397f28a936bf968bf1d8", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/0a1f4ebeb742012bcfb6397f28a936bf968bf1d8", "message": "Refactor `DefaultLocaleTests` to new API", "committedDate": "2020-04-21T18:52:10Z", "type": "forcePushed"}, {"oid": "06e1fb3b91bb39abf92edb72222c2d7602500891", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/06e1fb3b91bb39abf92edb72222c2d7602500891", "message": "Refactor `DefaultTimeZoneTests` to new API", "committedDate": "2020-04-21T19:00:32Z", "type": "commit"}, {"oid": "8e33c336d5748f6e7e8fa2854c9523ca7383e659", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/8e33c336d5748f6e7e8fa2854c9523ca7383e659", "message": "Rename package", "committedDate": "2020-04-21T19:01:35Z", "type": "commit"}, {"oid": "210092d850bbb87b89d49e7db567e5dce0b0908a", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/210092d850bbb87b89d49e7db567e5dce0b0908a", "message": "Refactor `EnvironmentVariableExtensionTests` to new API", "committedDate": "2020-04-21T19:43:36Z", "type": "commit"}, {"oid": "38288715bb2c52648c6d1a27ec6a79e4e6a6526e", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/38288715bb2c52648c6d1a27ec6a79e4e6a6526e", "message": "Apply Spotless", "committedDate": "2020-04-21T19:45:23Z", "type": "commit"}, {"oid": "8c0a9860c2c7d02895369e187032ee4fafe557ab", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/8c0a9860c2c7d02895369e187032ee4fafe557ab", "message": "PioneerAnnotationUtilsTests to new API", "committedDate": "2020-04-24T13:28:37Z", "type": "commit"}, {"oid": "eb23c1328bea79cb64930075645ae2756ca6ab71", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/eb23c1328bea79cb64930075645ae2756ca6ab71", "message": "Move RepeatFailedTestTests to new API", "committedDate": "2020-04-24T13:32:16Z", "type": "commit"}, {"oid": "59afee4e0b1ca9867a0a411a7634b7723da869b1", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/59afee4e0b1ca9867a0a411a7634b7723da869b1", "message": "Move assertion from PioneerAnnotationUtilsTests to ExecutionResults", "committedDate": "2020-04-24T13:32:16Z", "type": "commit"}, {"oid": "245db3584d23433191fa547ea130c9991dea0bf9", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/245db3584d23433191fa547ea130c9991dea0bf9", "message": "Move SystemPropertyExtensionTests to new API", "committedDate": "2020-04-24T13:32:16Z", "type": "commit"}, {"oid": "7cfc63e5e69eb210aefa8e6d24fa9eb0acfb198c", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/7cfc63e5e69eb210aefa8e6d24fa9eb0acfb198c", "message": "assertMethods", "committedDate": "2020-04-24T13:32:16Z", "type": "commit"}, {"oid": "2023879f8d5e91a93b4a1d3cbfef95e72387a5c8", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/2023879f8d5e91a93b4a1d3cbfef95e72387a5c8", "message": "Move TempDirectoryExtensionTests to new API\n\nBut with two failing tests where I don't know the cause", "committedDate": "2020-04-24T13:32:16Z", "type": "commit"}, {"oid": "471a05e288a28aaa36cf87583f87f6322ce23aa4", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/471a05e288a28aaa36cf87583f87f6322ce23aa4", "message": "Move RangeSourceArgumentsProviderTests to new API", "committedDate": "2020-04-24T13:32:16Z", "type": "commit"}, {"oid": "2a1880e445ba8ce48b3df52b5281cbe35b562f5c", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/2a1880e445ba8ce48b3df52b5281cbe35b562f5c", "message": "Move TestIntegrationTests to new API", "committedDate": "2020-04-24T13:32:16Z", "type": "commit"}, {"oid": "2ec2e51c489d937f18063bb94e4c25bb0dbad194", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/2ec2e51c489d937f18063bb94e4c25bb0dbad194", "message": "Tests no more extend AbstractPioneerTestEngineTests", "committedDate": "2020-04-24T13:32:16Z", "type": "commit"}, {"oid": "a62c7bdcaa93236ae2cc565cc3f5beef24c96445", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/a62c7bdcaa93236ae2cc565cc3f5beef24c96445", "message": "Delete not needed classes", "committedDate": "2020-04-24T13:32:16Z", "type": "commit"}, {"oid": "4ac339df529ec155bd541cf867d97f75a3124ebb", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/4ac339df529ec155bd541cf867d97f75a3124ebb", "message": "Delete not needed classes", "committedDate": "2020-04-24T13:32:16Z", "type": "commit"}, {"oid": "f264f7efe870b470c8b9d805928629779f8a8cdc", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/f264f7efe870b470c8b9d805928629779f8a8cdc", "message": "Provide new method to select classes with parameter types", "committedDate": "2020-04-24T13:32:16Z", "type": "commit"}, {"oid": "1a98fc1ccbeac517d90e3554d138b25f7f0489de", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/1a98fc1ccbeac517d90e3554d138b25f7f0489de", "message": "Remove explanatory TODOs", "committedDate": "2020-04-24T13:37:22Z", "type": "commit"}, {"oid": "1a98fc1ccbeac517d90e3554d138b25f7f0489de", "url": "https://github.com/junit-pioneer/junit-pioneer/commit/1a98fc1ccbeac517d90e3554d138b25f7f0489de", "message": "Remove explanatory TODOs", "committedDate": "2020-04-24T13:37:22Z", "type": "forcePushed"}]}