{"pr_number": 2455, "pr_title": "[GR-23150] Fix several JDK 15 related issues with native-image", "pr_createdAt": "2020-05-13T14:39:12Z", "pr_url": "https://github.com/oracle/graal/pull/2455", "timeline": [{"oid": "dd04ac9426361c0b5c194e3b9ff0aa64ee604a6a", "url": "https://github.com/oracle/graal/commit/dd04ac9426361c0b5c194e3b9ff0aa64ee604a6a", "message": "Only add nashorn check on JDK 14 or earlier\n\nJDK 15 removed nashorn with:\nhttps://bugs.openjdk.java.net/browse/JDK-8241749\n\nCloses #2365", "committedDate": "2020-04-23T17:06:20Z", "type": "commit"}, {"oid": "fa5c7e14cc1995230dde40e6086f62a0911cc1ea", "url": "https://github.com/oracle/graal/commit/fa5c7e14cc1995230dde40e6086f62a0911cc1ea", "message": "Merge branch 'openjdk-15-nashorn-removal' of jerboaa/graal", "committedDate": "2020-05-13T14:03:04Z", "type": "commit"}, {"oid": "e87157537f618e4702317b9657d2bc10f07069fa", "url": "https://github.com/oracle/graal/commit/e87157537f618e4702317b9657d2bc10f07069fa", "message": "Add loadLibrary substitution to jdk.internal.loader.BootLoader", "committedDate": "2020-05-13T14:10:44Z", "type": "commit"}, {"oid": "01631c22922a4507408447485461e60e55ab26c9", "url": "https://github.com/oracle/graal/commit/01631c22922a4507408447485461e60e55ab26c9", "message": "Add isHidden substitution for java.lang.Class in JDK 15", "committedDate": "2020-05-13T14:16:10Z", "type": "commit"}, {"oid": "7b33e3dc362bc63edaffbe7bd56f890a95f764f0", "url": "https://github.com/oracle/graal/commit/7b33e3dc362bc63edaffbe7bd56f890a95f764f0", "message": "Fix #2383 Addition of Hidden Classes in JDK15 breaks native-image", "committedDate": "2020-05-13T14:17:32Z", "type": "commit"}, {"oid": "0fe26e7ca966728c63a84b9847ad42aab6b069c8", "url": "https://github.com/oracle/graal/commit/0fe26e7ca966728c63a84b9847ad42aab6b069c8", "message": "Merge branch 'master' of oracle/graal", "committedDate": "2020-05-13T14:19:57Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU4MjU0Ng==", "url": "https://github.com/oracle/graal/pull/2455#discussion_r424582546", "bodyText": "You cannot just ignore InstanceOfNode and FixedGuardNode. That would mean you omit necessary type checks.", "author": "christianwimmer", "createdAt": "2020-05-13T16:44:56Z", "path": "substratevm/src/com.oracle.svm.hosted/src/com/oracle/svm/hosted/phases/IntrinsifyMethodHandlesInvocationPlugin.java", "diffHunk": "@@ -487,10 +490,15 @@ private void processInvokeWithMethodHandle(GraphBuilderContext b, Replacements r\n              */\n             Node singleFunctionality = null;\n             ReturnNode singleReturn = null;\n+            ValueNode singleNewInstance = null;\n             for (Node node : graph.getNodes()) {\n                 if (node == graph.start() || node instanceof ParameterNode || node instanceof ConstantNode || node instanceof FrameState) {\n                     /* Ignore the allowed framework around the nodes we care about. */\n-                } else if (node instanceof MethodCallTargetNode) {\n+                } else if (node instanceof DynamicNewInstanceNode && singleNewInstance == null && ((DynamicNewInstanceNode) node).getInstanceType().isConstant()) {\n+                    singleNewInstance = (DynamicNewInstanceNode) node;\n+                } else if (node instanceof NewInstanceNode && singleNewInstance == null) {\n+                    singleNewInstance = (NewInstanceNode) node;\n+                } else if (node instanceof MethodCallTargetNode || node instanceof InstanceOfNode || node instanceof FixedGuardNode) {", "originalCommit": "0fe26e7ca966728c63a84b9847ad42aab6b069c8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDc2MDYyMg==", "url": "https://github.com/oracle/graal/pull/2455#discussion_r424760622", "bodyText": "This should be fixed.  Removed these and added a ClassCast check in the transplanted nodes.", "author": "bobvandette", "createdAt": "2020-05-13T22:11:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU4MjU0Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU4MzI1OA==", "url": "https://github.com/oracle/graal/pull/2455#discussion_r424583258", "bodyText": "We need to immediately have a complete implementation. So you need to preserve this information from the image generator in a flag in DynamicHub so that you can return it here.", "author": "christianwimmer", "createdAt": "2020-05-13T16:46:01Z", "path": "substratevm/src/com.oracle.svm.core/src/com/oracle/svm/core/hub/DynamicHub.java", "diffHunk": "@@ -755,6 +756,12 @@ private boolean isAnonymousClass() {\n         }\n     }\n \n+    @Substitute\n+    @TargetElement(onlyWith = JDK15OrLater.class)\n+    public boolean isHidden() {\n+        throw VMError.shouldNotReachHere();", "originalCommit": "0fe26e7ca966728c63a84b9847ad42aab6b069c8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY2MzkyMw==", "url": "https://github.com/oracle/graal/pull/2455#discussion_r424663923", "bodyText": "Complete Hidden Class support is most likely going to take a lot of additional effort.  Creating Hidden classes is implemented in Hotspot and the hidden attribute is extracted via a native call to Hotspot.  My goal with this fix is to just get past these existing problems with JDK 15 and allow native-image to be used in the mean time.", "author": "bobvandette", "createdAt": "2020-05-13T18:59:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU4MzI1OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY3MDk4NA==", "url": "https://github.com/oracle/graal/pull/2455#discussion_r424670984", "bodyText": "Why would getting the information be difficult? You only need to call the isHidden method during image generation and store it in DynamicHub. SVMHost.createHub already has the javaClass.\nYou need to call isHidden via reflection since it doesn't exist in prior JDKs. But that's OK.", "author": "christianwimmer", "createdAt": "2020-05-13T19:12:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU4MzI1OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY4NDY0OQ==", "url": "https://github.com/oracle/graal/pull/2455#discussion_r424684649", "bodyText": "I can do that but there are other changes throughout the JDK that added support for isHidden like reflection and methodhandles.  These need to be looked at carefully.  Isn't it better to get an error if someone is trying to reference the isHidden attribute rather than to just report that is was or wasn't hidden during native-image generation?  I can go either way.", "author": "bobvandette", "createdAt": "2020-05-13T19:37:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU4MzI1OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDc1ODEwOQ==", "url": "https://github.com/oracle/graal/pull/2455#discussion_r424758109", "bodyText": "Preserving the information from the image builder is the correct thing to do. There are never any new classes created at image run time, and the \"hidden\" attribute never changes at run time.", "author": "christianwimmer", "createdAt": "2020-05-13T22:05:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU4MzI1OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDc2MDg1Ng==", "url": "https://github.com/oracle/graal/pull/2455#discussion_r424760856", "bodyText": "Ok, I'll add a reflected call to get the value and store it in a local DynamicHub field.", "author": "bobvandette", "createdAt": "2020-05-13T22:12:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU4MzI1OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM5MTc0Mw==", "url": "https://github.com/oracle/graal/pull/2455#discussion_r425391743", "bodyText": "Done.", "author": "bobvandette", "createdAt": "2020-05-14T19:52:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU4MzI1OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU4NzAyMQ==", "url": "https://github.com/oracle/graal/pull/2455#discussion_r424587021", "bodyText": "Why is such a  DynamicNewInstanceNode not canonicalized to a NewInstanceNode? Because the type is not initialized yet?", "author": "christianwimmer", "createdAt": "2020-05-13T16:51:53Z", "path": "substratevm/src/com.oracle.svm.hosted/src/com/oracle/svm/hosted/phases/IntrinsifyMethodHandlesInvocationPlugin.java", "diffHunk": "@@ -487,10 +490,15 @@ private void processInvokeWithMethodHandle(GraphBuilderContext b, Replacements r\n              */\n             Node singleFunctionality = null;\n             ReturnNode singleReturn = null;\n+            ValueNode singleNewInstance = null;\n             for (Node node : graph.getNodes()) {\n                 if (node == graph.start() || node instanceof ParameterNode || node instanceof ConstantNode || node instanceof FrameState) {\n                     /* Ignore the allowed framework around the nodes we care about. */\n-                } else if (node instanceof MethodCallTargetNode) {\n+                } else if (node instanceof DynamicNewInstanceNode && singleNewInstance == null && ((DynamicNewInstanceNode) node).getInstanceType().isConstant()) {", "originalCommit": "0fe26e7ca966728c63a84b9847ad42aab6b069c8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY2MTAyMA==", "url": "https://github.com/oracle/graal/pull/2455#discussion_r424661020", "bodyText": "I don't know for sure.  This was the initial cause of the failure requiring the fixes.", "author": "bobvandette", "createdAt": "2020-05-13T18:54:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU4NzAyMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY3NzQ1NQ==", "url": "https://github.com/oracle/graal/pull/2455#discussion_r424677455", "bodyText": "I only see the DynamicNewInstanceNodes during the clinit phase of native-image.", "author": "bobvandette", "createdAt": "2020-05-13T19:24:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU4NzAyMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU4Nzg5NA==", "url": "https://github.com/oracle/graal/pull/2455#discussion_r424587894", "bodyText": "Why do you need this class initialization check for the invoke when there is a singleNewInstance?", "author": "christianwimmer", "createdAt": "2020-05-13T16:53:19Z", "path": "substratevm/src/com.oracle.svm.hosted/src/com/oracle/svm/hosted/phases/IntrinsifyMethodHandlesInvocationPlugin.java", "diffHunk": "@@ -516,12 +524,26 @@ private void processInvokeWithMethodHandle(GraphBuilderContext b, Replacements r\n \n             JavaKind returnResultKind = b.getInvokeReturnType().getJavaKind().getStackKind();\n             ValueNode transplantedSingleFunctionality = null;\n+            NewInstanceNode transplantedNewInstance = null;\n             if (singleFunctionality instanceof Invoke) {\n+\n                 Invoke singleInvoke = (Invoke) singleFunctionality;\n                 MethodCallTargetNode singleCallTarget = (MethodCallTargetNode) singleInvoke.callTarget();\n                 ResolvedJavaMethod resolvedTarget = lookup(singleCallTarget.targetMethod());\n \n-                maybeEmitClassInitialization(b, singleCallTarget.invokeKind() == InvokeKind.Static, resolvedTarget.getDeclaringClass());\n+                if (singleNewInstance != null) {\n+                    ResolvedJavaType type = null;\n+                    if (singleNewInstance instanceof DynamicNewInstanceNode) {\n+                        type = lookup(originalProviders.getConstantReflection().asJavaType(((DynamicNewInstanceNode) singleNewInstance).getInstanceType().asConstant()));\n+                    }\n+                    if (singleNewInstance instanceof NewInstanceNode) {\n+                        type = lookup(((NewInstanceNode) singleNewInstance).instanceClass());\n+                    }\n+                    maybeEmitClassInitialization(b, true, resolvedTarget.getDeclaringClass());\n+                    transplantedNewInstance = b.add(new SubstrateNewInstanceNode(type, true));\n+                } else {\n+                    maybeEmitClassInitialization(b, singleCallTarget.invokeKind() == InvokeKind.Static, resolvedTarget.getDeclaringClass());", "originalCommit": "0fe26e7ca966728c63a84b9847ad42aab6b069c8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY2MDMxNw==", "url": "https://github.com/oracle/graal/pull/2455#discussion_r424660317", "bodyText": "I only added this during debugging thinking that it was the cause of a problem I was having. I'll remove it.", "author": "bobvandette", "createdAt": "2020-05-13T18:53:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU4Nzg5NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU4ODkzMQ==", "url": "https://github.com/oracle/graal/pull/2455#discussion_r424588931", "bodyText": "What happens if there is a singleNewInstance but singleFunctionality is not an Invoke?", "author": "christianwimmer", "createdAt": "2020-05-13T16:55:01Z", "path": "substratevm/src/com.oracle.svm.hosted/src/com/oracle/svm/hosted/phases/IntrinsifyMethodHandlesInvocationPlugin.java", "diffHunk": "@@ -516,12 +524,26 @@ private void processInvokeWithMethodHandle(GraphBuilderContext b, Replacements r\n \n             JavaKind returnResultKind = b.getInvokeReturnType().getJavaKind().getStackKind();\n             ValueNode transplantedSingleFunctionality = null;\n+            NewInstanceNode transplantedNewInstance = null;\n             if (singleFunctionality instanceof Invoke) {", "originalCommit": "0fe26e7ca966728c63a84b9847ad42aab6b069c8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY2NDQzMA==", "url": "https://github.com/oracle/graal/pull/2455#discussion_r424664430", "bodyText": "The processInvokeWithMethodHandle should always have an Invoke but I can add an assert.", "author": "bobvandette", "createdAt": "2020-05-13T19:00:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU4ODkzMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDc2MTczMw==", "url": "https://github.com/oracle/graal/pull/2455#discussion_r424761733", "bodyText": "Added a check for this situation.", "author": "bobvandette", "createdAt": "2020-05-13T22:14:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU4ODkzMQ=="}], "type": "inlineReview"}, {"oid": "02c936de7cbe06019c7319945972e51c2935f91d", "url": "https://github.com/oracle/graal/commit/02c936de7cbe06019c7319945972e51c2935f91d", "message": "Add ClassCast Check and fix style error", "committedDate": "2020-05-13T22:08:31Z", "type": "commit"}, {"oid": "b56f75aa42775199247a44ebaacb3709b994755c", "url": "https://github.com/oracle/graal/commit/b56f75aa42775199247a44ebaacb3709b994755c", "message": "add JDK15 isHidden attribute to DynamicHub", "committedDate": "2020-05-14T19:49:40Z", "type": "commit"}, {"oid": "a79a7e42fc0a7bfb8c932cb4bb97d3e0c085d7d0", "url": "https://github.com/oracle/graal/commit/a79a7e42fc0a7bfb8c932cb4bb97d3e0c085d7d0", "message": "Fix style check error", "committedDate": "2020-05-15T15:13:30Z", "type": "commit"}, {"oid": "23c1a334ecac4f9e1448bceec862085e192d57a0", "url": "https://github.com/oracle/graal/commit/23c1a334ecac4f9e1448bceec862085e192d57a0", "message": "Merge branch master into topic/GR-23150", "committedDate": "2020-05-15T17:21:24Z", "type": "commit"}, {"oid": "56851772a74bae8e53cb0a6219e5be0c8c9552df", "url": "https://github.com/oracle/graal/commit/56851772a74bae8e53cb0a6219e5be0c8c9552df", "message": "Fix #2468 Datagram socket in JDK 15 breaks native-image", "committedDate": "2020-05-19T14:40:04Z", "type": "commit"}, {"oid": "12878852bdb4c3c6c58225f0a59bf8f93e53cc94", "url": "https://github.com/oracle/graal/commit/12878852bdb4c3c6c58225f0a59bf8f93e53cc94", "message": "Merge 'master' of bobvandette/graal into topic/GR-23150", "committedDate": "2020-05-19T14:42:02Z", "type": "commit"}, {"oid": "f469afa0f05f42da15181b902828edc55baa2dd8", "url": "https://github.com/oracle/graal/commit/f469afa0f05f42da15181b902828edc55baa2dd8", "message": "Merge branch 'master' into topic/GR-23150", "committedDate": "2020-05-19T14:45:08Z", "type": "commit"}, {"oid": "f256dc69254aeb3f8c09c2ab504edaee2f5be24a", "url": "https://github.com/oracle/graal/commit/f256dc69254aeb3f8c09c2ab504edaee2f5be24a", "message": "Merge branch 'master' oracle/graal", "committedDate": "2020-05-19T17:06:04Z", "type": "commit"}, {"oid": "d245184d672a8fb77c4b6c333b3fa53dd9a89385", "url": "https://github.com/oracle/graal/commit/d245184d672a8fb77c4b6c333b3fa53dd9a89385", "message": "SubstrateNewInstanceNode has been removed.  NewInstanceNode is now sufficient", "committedDate": "2020-05-19T17:16:28Z", "type": "commit"}, {"oid": "39e408e2a608fa6b46b958942bd6e2800be6237c", "url": "https://github.com/oracle/graal/commit/39e408e2a608fa6b46b958942bd6e2800be6237c", "message": "Merge branch 'master' of bobvandette/graal into topic/GR-23150", "committedDate": "2020-05-19T17:17:35Z", "type": "commit"}, {"oid": "22a2d9ca5bddb029e24a0b9d35cc145be30c1d72", "url": "https://github.com/oracle/graal/commit/22a2d9ca5bddb029e24a0b9d35cc145be30c1d72", "message": "restore DatagramSocketCheckOldImpl for JDK versions < 15", "committedDate": "2020-05-19T18:09:57Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ4MDM4OQ==", "url": "https://github.com/oracle/graal/pull/2455#discussion_r427480389", "bodyText": "Certainly a high overhead to do the reflective lookup every time. You could store the Method in s static final field.", "author": "christianwimmer", "createdAt": "2020-05-19T17:36:43Z", "path": "substratevm/src/com.oracle.svm.hosted/src/com/oracle/svm/hosted/SVMHost.java", "diffHunk": "@@ -296,8 +298,22 @@ private DynamicHub createHub(AnalysisType type) {\n          */\n         String sourceFileName = stringTable.deduplicate(type.getSourceFileName(), true);\n \n+        /*\n+         * JDK 15 added support for Hidden Classes. Record if this javaClass is hidden.\n+         */\n+        boolean isHidden = false;\n+        if (JavaVersionUtil.JAVA_SPEC >= 15) {\n+            try {\n+                Method isHiddenMethod = Class.class.getMethod(\"isHidden\");", "originalCommit": "d245184d672a8fb77c4b6c333b3fa53dd9a89385", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ4MTA2Nw==", "url": "https://github.com/oracle/graal/pull/2455#discussion_r427481067", "bodyText": "We usually just use throw VMError.shouldNotReachHere(e) to convert impossible checked exceptions into unchecked. No need to build a fancy error message.", "author": "christianwimmer", "createdAt": "2020-05-19T17:37:48Z", "path": "substratevm/src/com.oracle.svm.hosted/src/com/oracle/svm/hosted/SVMHost.java", "diffHunk": "@@ -296,8 +298,22 @@ private DynamicHub createHub(AnalysisType type) {\n          */\n         String sourceFileName = stringTable.deduplicate(type.getSourceFileName(), true);\n \n+        /*\n+         * JDK 15 added support for Hidden Classes. Record if this javaClass is hidden.\n+         */\n+        boolean isHidden = false;\n+        if (JavaVersionUtil.JAVA_SPEC >= 15) {\n+            try {\n+                Method isHiddenMethod = Class.class.getMethod(\"isHidden\");\n+                isHidden = (boolean) isHiddenMethod.invoke(javaClass);\n+            } catch (IllegalAccessException | InvocationTargetException | NoSuchMethodException e) {\n+                String message = \"Exception trying to lookup or call isHidden on class: \" + javaClass + \" \" + e;\n+                throw new UnsupportedFeatureException(message);", "originalCommit": "d245184d672a8fb77c4b6c333b3fa53dd9a89385", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ4MjQ2Ng==", "url": "https://github.com/oracle/graal/pull/2455#discussion_r427482466", "bodyText": "Why is it safe to remove this code?", "author": "christianwimmer", "createdAt": "2020-05-19T17:40:04Z", "path": "substratevm/src/com.oracle.svm.hosted/src/com/oracle/svm/hosted/jdk/JNIRegistrationJavaNet.java", "diffHunk": "@@ -115,14 +114,6 @@ public void beforeAnalysis(BeforeAnalysisAccess a) {\n         a.registerReachabilityHandler(JNIRegistrationJavaNet::registerDatagramPacketInit,\n                         method(a, \"java.net.DatagramPacket\", \"init\"));\n \n-        if (JavaVersionUtil.JAVA_SPEC >= 15) {\n-            a.registerReachabilityHandler(JNIRegistrationJavaNet::registerDatagramSocketCheckOldImpl,\n-                            method(a, \"java.net.DatagramSocket\", \"checkOldImpl\", java.net.DatagramSocketImpl.class));\n-        } else {\n-            a.registerReachabilityHandler(JNIRegistrationJavaNet::registerDatagramSocketCheckOldImpl,", "originalCommit": "d245184d672a8fb77c4b6c333b3fa53dd9a89385", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU0NDM4OA==", "url": "https://github.com/oracle/graal/pull/2455#discussion_r427544388", "bodyText": "Check the lasted version of this file in the PR.  I fixed this.", "author": "bobvandette", "createdAt": "2020-05-19T19:22:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ4MjQ2Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ4Mzc0Mw==", "url": "https://github.com/oracle/graal/pull/2455#discussion_r427483743", "bodyText": "That cannot be a VMError but needs to be properly reported like any other unsupported condition, via reportUnsupportedFeature.\nBut why actually introduce this restriction? You can easily refactor your code below to transplant the singleNewInstance independently from the invoke.", "author": "christianwimmer", "createdAt": "2020-05-19T17:42:05Z", "path": "substratevm/src/com.oracle.svm.hosted/src/com/oracle/svm/hosted/phases/IntrinsifyMethodHandlesInvocationPlugin.java", "diffHunk": "@@ -502,6 +510,10 @@ private void processInvokeWithMethodHandle(GraphBuilderContext b, Replacements r\n                 }\n             }\n \n+            if (singleNewInstance != null && !(singleFunctionality instanceof Invoke)) {\n+                throw VMError.shouldNotReachHere(\"singleFunctionality != Invoke with non null singleNewInstance\");", "originalCommit": "d245184d672a8fb77c4b6c333b3fa53dd9a89385", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzUzMzk5Mw==", "url": "https://github.com/oracle/graal/pull/2455#discussion_r427533993", "bodyText": "You also need a maybeEmitClassInitialization before the NewInstanceNode, otherwise you might allocate a non-initialized class.", "author": "christianwimmer", "createdAt": "2020-05-19T19:04:54Z", "path": "substratevm/src/com.oracle.svm.hosted/src/com/oracle/svm/hosted/phases/IntrinsifyMethodHandlesInvocationPlugin.java", "diffHunk": "@@ -516,13 +528,26 @@ private void processInvokeWithMethodHandle(GraphBuilderContext b, Replacements r\n \n             JavaKind returnResultKind = b.getInvokeReturnType().getJavaKind().getStackKind();\n             ValueNode transplantedSingleFunctionality = null;\n+            ValueNode transplantedNewInstance = null;\n             if (singleFunctionality instanceof Invoke) {\n+\n                 Invoke singleInvoke = (Invoke) singleFunctionality;\n                 MethodCallTargetNode singleCallTarget = (MethodCallTargetNode) singleInvoke.callTarget();\n                 ResolvedJavaMethod resolvedTarget = lookup(singleCallTarget.targetMethod());\n \n-                maybeEmitClassInitialization(b, singleCallTarget.invokeKind() == InvokeKind.Static, resolvedTarget.getDeclaringClass());\n+                if (singleNewInstance != null) {\n+                    ResolvedJavaType type = null;\n+                    if (singleNewInstance instanceof DynamicNewInstanceNode) {\n+                        type = lookup(originalProviders.getConstantReflection().asJavaType(((DynamicNewInstanceNode) singleNewInstance).getInstanceType().asConstant()));\n+                    }\n+                    if (singleNewInstance instanceof NewInstanceNode) {\n+                        type = lookup(((NewInstanceNode) singleNewInstance).instanceClass());\n+                    }\n+                    ValueNode newInstance = b.add(new NewInstanceNode(type, true));", "originalCommit": "22a2d9ca5bddb029e24a0b9d35cc145be30c1d72", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzUzNDc2MA==", "url": "https://github.com/oracle/graal/pull/2455#discussion_r427534760", "bodyText": "How do you know the classCastStamp applies to the newinstance node?", "author": "christianwimmer", "createdAt": "2020-05-19T19:06:11Z", "path": "substratevm/src/com.oracle.svm.hosted/src/com/oracle/svm/hosted/phases/IntrinsifyMethodHandlesInvocationPlugin.java", "diffHunk": "@@ -516,13 +528,26 @@ private void processInvokeWithMethodHandle(GraphBuilderContext b, Replacements r\n \n             JavaKind returnResultKind = b.getInvokeReturnType().getJavaKind().getStackKind();\n             ValueNode transplantedSingleFunctionality = null;\n+            ValueNode transplantedNewInstance = null;\n             if (singleFunctionality instanceof Invoke) {\n+\n                 Invoke singleInvoke = (Invoke) singleFunctionality;\n                 MethodCallTargetNode singleCallTarget = (MethodCallTargetNode) singleInvoke.callTarget();\n                 ResolvedJavaMethod resolvedTarget = lookup(singleCallTarget.targetMethod());\n \n-                maybeEmitClassInitialization(b, singleCallTarget.invokeKind() == InvokeKind.Static, resolvedTarget.getDeclaringClass());\n+                if (singleNewInstance != null) {\n+                    ResolvedJavaType type = null;\n+                    if (singleNewInstance instanceof DynamicNewInstanceNode) {\n+                        type = lookup(originalProviders.getConstantReflection().asJavaType(((DynamicNewInstanceNode) singleNewInstance).getInstanceType().asConstant()));\n+                    }\n+                    if (singleNewInstance instanceof NewInstanceNode) {\n+                        type = lookup(((NewInstanceNode) singleNewInstance).instanceClass());\n+                    }\n+                    ValueNode newInstance = b.add(new NewInstanceNode(type, true));\n+                    transplantedNewInstance = maybeEmitClassCast(b, classCastStamp, newInstance);", "originalCommit": "22a2d9ca5bddb029e24a0b9d35cc145be30c1d72", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU0MjY2OA==", "url": "https://github.com/oracle/graal/pull/2455#discussion_r427542668", "bodyText": "Actually the maybeEmitClassCast here is not necessary. A class cast is only removed above when the checked value is a Invoke or LoadFieldNode.", "author": "christianwimmer", "createdAt": "2020-05-19T19:20:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzUzNDc2MA=="}], "type": "inlineReview"}, {"oid": "c158c4e4f33f9527a32d89533fdd6fb0ba6c3106", "url": "https://github.com/oracle/graal/commit/c158c4e4f33f9527a32d89533fdd6fb0ba6c3106", "message": "restore DatagramSocketCheckOldImpl for JDK versions < 15", "committedDate": "2020-05-19T21:13:01Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDU2MTE3MQ==", "url": "https://github.com/oracle/graal/pull/2455#discussion_r430561171", "bodyText": "I just merged 18bdfdd which ensures that DynamicNewInstanceNode with a constant class is always constant folded to a NewInstanceNode. Please remove this check now (and everything else related to DynamicNewInstanceNode in this PR), it should no longer be necessary.", "author": "christianwimmer", "createdAt": "2020-05-26T16:49:11Z", "path": "substratevm/src/com.oracle.svm.hosted/src/com/oracle/svm/hosted/phases/IntrinsifyMethodHandlesInvocationPlugin.java", "diffHunk": "@@ -487,9 +492,14 @@ private void processInvokeWithMethodHandle(GraphBuilderContext b, Replacements r\n              */\n             Node singleFunctionality = null;\n             ReturnNode singleReturn = null;\n+            ValueNode singleNewInstance = null;\n             for (Node node : graph.getNodes()) {\n                 if (node == graph.start() || node instanceof ParameterNode || node instanceof ConstantNode || node instanceof FrameState) {\n                     /* Ignore the allowed framework around the nodes we care about. */\n+                } else if (node instanceof DynamicNewInstanceNode && singleNewInstance == null && ((DynamicNewInstanceNode) node).getInstanceType().isConstant()) {", "originalCommit": "1d5541bc66713e12b1d2600b1f9c9913a7d527b6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "d40e0186be8f9f8ed81966006e1be30a045c7cb8", "url": "https://github.com/oracle/graal/commit/d40e0186be8f9f8ed81966006e1be30a045c7cb8", "message": "Only add nashorn check on JDK 14 or earlier\n\nJDK 15 removed nashorn with:\nhttps://bugs.openjdk.java.net/browse/JDK-8241749\n\nCloses #2365", "committedDate": "2020-05-26T18:22:51Z", "type": "commit"}, {"oid": "282d35a0872f29dc7f29fded19a485fb8378f070", "url": "https://github.com/oracle/graal/commit/282d35a0872f29dc7f29fded19a485fb8378f070", "message": "Add loadLibrary substitution to jdk.internal.loader.BootLoader", "committedDate": "2020-05-26T18:22:51Z", "type": "commit"}, {"oid": "dedf9d3cee01c25ff983c235555a5015bed97f33", "url": "https://github.com/oracle/graal/commit/dedf9d3cee01c25ff983c235555a5015bed97f33", "message": "Add isHidden substitution for java.lang.Class in JDK 15", "committedDate": "2020-05-26T18:22:51Z", "type": "commit"}, {"oid": "ad1123cd1a7600c1643f52d06dcf2d1a1e806b50", "url": "https://github.com/oracle/graal/commit/ad1123cd1a7600c1643f52d06dcf2d1a1e806b50", "message": "Fix #2383 Addition of Hidden Classes in JDK15 breaks native-image", "committedDate": "2020-05-26T18:22:51Z", "type": "commit"}, {"oid": "7c96a3add46133b9f471b2335905ed5ab4d1b0c3", "url": "https://github.com/oracle/graal/commit/7c96a3add46133b9f471b2335905ed5ab4d1b0c3", "message": "Add ClassCast Check and fix style error", "committedDate": "2020-05-26T18:22:51Z", "type": "commit"}, {"oid": "6fbfaed56db560cc4607f6571abd899c5681f548", "url": "https://github.com/oracle/graal/commit/6fbfaed56db560cc4607f6571abd899c5681f548", "message": "add JDK15 isHidden attribute to DynamicHub", "committedDate": "2020-05-26T18:22:52Z", "type": "commit"}, {"oid": "ea74ed4ddd2b840038ca8032e287f31b8bbd2922", "url": "https://github.com/oracle/graal/commit/ea74ed4ddd2b840038ca8032e287f31b8bbd2922", "message": "Fix style check error", "committedDate": "2020-05-26T18:22:52Z", "type": "commit"}, {"oid": "02d0a13ae9cbdc00d880410e9117c8d69d95dd00", "url": "https://github.com/oracle/graal/commit/02d0a13ae9cbdc00d880410e9117c8d69d95dd00", "message": "Fix #2468 Datagram socket in JDK 15 breaks native-image", "committedDate": "2020-05-26T18:22:52Z", "type": "commit"}, {"oid": "bdb9319fc47104bb325351e94b33c76394e2379b", "url": "https://github.com/oracle/graal/commit/bdb9319fc47104bb325351e94b33c76394e2379b", "message": "SubstrateNewInstanceNode has been removed.  NewInstanceNode is now sufficient", "committedDate": "2020-05-26T18:22:52Z", "type": "commit"}, {"oid": "a3b489898baf0a10215a84d7fdf78e96027afdd6", "url": "https://github.com/oracle/graal/commit/a3b489898baf0a10215a84d7fdf78e96027afdd6", "message": "restore DatagramSocketCheckOldImpl for JDK versions < 15", "committedDate": "2020-05-26T18:22:52Z", "type": "commit"}, {"oid": "96eed5fe44215f62a6dc1f508787059782dc1d74", "url": "https://github.com/oracle/graal/commit/96eed5fe44215f62a6dc1f508787059782dc1d74", "message": "Fixes based on review comments", "committedDate": "2020-05-26T18:22:52Z", "type": "commit"}, {"oid": "36cee2ac7c485643d3c3a6b0dcb658b2302055ce", "url": "https://github.com/oracle/graal/commit/36cee2ac7c485643d3c3a6b0dcb658b2302055ce", "message": "remove DynamicNewInstance from MethodHandle Intrinsification", "committedDate": "2020-05-26T20:03:37Z", "type": "commit"}, {"oid": "36cee2ac7c485643d3c3a6b0dcb658b2302055ce", "url": "https://github.com/oracle/graal/commit/36cee2ac7c485643d3c3a6b0dcb658b2302055ce", "message": "remove DynamicNewInstance from MethodHandle Intrinsification", "committedDate": "2020-05-26T20:03:37Z", "type": "forcePushed"}, {"oid": "6037cd1ae5366bd7ea09a4a48e3c830529a31595", "url": "https://github.com/oracle/graal/commit/6037cd1ae5366bd7ea09a4a48e3c830529a31595", "message": "merge", "committedDate": "2020-05-26T20:12:06Z", "type": "commit"}, {"oid": "3e25af3146c53b736fb429fc2b938d33968f24d8", "url": "https://github.com/oracle/graal/commit/3e25af3146c53b736fb429fc2b938d33968f24d8", "message": "Be more defensive when bcis are not unique", "committedDate": "2020-05-27T17:19:54Z", "type": "commit"}, {"oid": "09e46f164a878c4e96d1da3e1cd89ca47775ad9a", "url": "https://github.com/oracle/graal/commit/09e46f164a878c4e96d1da3e1cd89ca47775ad9a", "message": "Do not use class literals for classes no longer existing in JDK 15", "committedDate": "2020-05-27T17:20:26Z", "type": "commit"}, {"oid": "1ede8f4dcfc61f36afb2343793aaf145d5f7e0e1", "url": "https://github.com/oracle/graal/commit/1ede8f4dcfc61f36afb2343793aaf145d5f7e0e1", "message": "Adapt to JDK 15 class loader changes", "committedDate": "2020-05-27T17:21:07Z", "type": "commit"}, {"oid": "fc231993d70ee29cec3d7b83fd4e63d2fe02d925", "url": "https://github.com/oracle/graal/commit/fc231993d70ee29cec3d7b83fd4e63d2fe02d925", "message": "Allow constant folding of DynamicNewInstanceNode when intrinsifying method handles", "committedDate": "2020-05-27T17:22:40Z", "type": "commit"}]}