{"pr_number": 1229, "pr_title": "Add JarLoader interface and LocalJarLoader class", "pr_createdAt": "2020-08-07T14:55:51Z", "pr_url": "https://github.com/apache/helix/pull/1229", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE2MjkyMg==", "url": "https://github.com/apache/helix/pull/1229#discussion_r467162922", "bodyText": "Why is this part of this PR? I thought you had created a PR for this already?", "author": "narendly", "createdAt": "2020-08-07T17:05:45Z", "path": "helix-core/src/main/java/org/apache/helix/task/DynamicTaskConfig.java", "diffHunk": "@@ -0,0 +1,115 @@\n+package org.apache.helix.task;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.List;\n+\n+import org.apache.helix.zookeeper.datamodel.ZNRecord;\n+\n+/**\n+ * A wrapper class for ZNRecord, used to store configs for tasks that are to be dynamically loaded\n+ */\n+public class DynamicTaskConfig {", "originalCommit": "4fc4012e983800eb8eb75753b63e24254cecdf3d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE2MzAyNA==", "url": "https://github.com/apache/helix/pull/1229#discussion_r467163024", "bodyText": "Why is this change part of this PR? Did you rebase from https://github.com/apache/helix/tree/dynamically-loaded-task?", "author": "narendly", "createdAt": "2020-08-07T17:05:59Z", "path": "helix-core/src/main/java/org/apache/helix/task/TaskConstants.java", "diffHunk": "@@ -49,4 +49,24 @@\n   public static final String PREV_RA_NODE = \"PreviousResourceAssignment\";\n \n   public static final boolean DEFAULT_TASK_ENABLE_COMPRESSION = false;\n+  /**\n+   * Name of the JAR file for the task dynamically loaded in {@link TaskStateModel}\n+   */\n+  public static final String TASK_JAR_FILE_KEY = \"JAR_FILE\";", "originalCommit": "4fc4012e983800eb8eb75753b63e24254cecdf3d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE2NDI1Nw==", "url": "https://github.com/apache/helix/pull/1229#discussion_r467164257", "bodyText": "Sorry I created the local JarLoader branch from my local DynamicTaskConfig branch. I thought the two (rebasing and creating from latest local branch) would be the same but apparently they're not. Let me rebase and push again.", "author": "rabashizade", "createdAt": "2020-08-07T17:08:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE2MzAyNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE2NDMyOA==", "url": "https://github.com/apache/helix/pull/1229#discussion_r467164328", "bodyText": "Question: What would the returned URL look like for a local JAR? Could you give some examples here?", "author": "narendly", "createdAt": "2020-08-07T17:08:48Z", "path": "helix-core/src/main/java/org/apache/helix/task/api/LocalJarLoader.java", "diffHunk": "@@ -0,0 +1,54 @@\n+package org.apache.helix.task.api;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.io.File;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class LocalJarLoader implements JarLoader {\n+  private static final Logger LOG = LoggerFactory.getLogger(LocalJarLoader.class);\n+\n+  /**\n+   * Loads a local JAR file and returns its URL.\n+   * @param jarPath path of the JAR file\n+   * @return URL of the JAR file at path jarPath\n+   */\n+  @Override\n+  public URL loadJar(String jarPath) {", "originalCommit": "4fc4012e983800eb8eb75753b63e24254cecdf3d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE2NjQ2Nw==", "url": "https://github.com/apache/helix/pull/1229#discussion_r467166467", "bodyText": "Do you mean to add the example URL to the comment in code? An example is: file:/home/rabashiz/apache-helix/helix/helix-core/src/test/resources/Reindex.jar", "author": "rabashizade", "createdAt": "2020-08-07T17:13:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE2NDMyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzIyNzQ5NQ==", "url": "https://github.com/apache/helix/pull/1229#discussion_r467227495", "bodyText": "Thank you. That makes sense.", "author": "narendly", "createdAt": "2020-08-07T19:23:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE2NDMyOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE2NTEyNA==", "url": "https://github.com/apache/helix/pull/1229#discussion_r467165124", "bodyText": "Let's refactor this. The way it's written is slightly awkward:\nLet's use the following format:\nif (error condition is met) {\n  throw Exception;\n}\nreturn result;", "author": "narendly", "createdAt": "2020-08-07T17:10:16Z", "path": "helix-core/src/main/java/org/apache/helix/task/api/LocalJarLoader.java", "diffHunk": "@@ -0,0 +1,54 @@\n+package org.apache.helix.task.api;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.io.File;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class LocalJarLoader implements JarLoader {\n+  private static final Logger LOG = LoggerFactory.getLogger(LocalJarLoader.class);\n+\n+  /**\n+   * Loads a local JAR file and returns its URL.\n+   * @param jarPath path of the JAR file\n+   * @return URL of the JAR file at path jarPath\n+   */\n+  @Override\n+  public URL loadJar(String jarPath) {\n+    File taskJarFile;\n+    try {\n+      taskJarFile = new File(jarPath);\n+\n+      // If taskJarFile exists and it's not a directory, return its URL\n+      if (taskJarFile.exists() && !taskJarFile.isDirectory()) {\n+        return taskJarFile.toURI().toURL();\n+      }\n+      LOG.error(\"Failed to find JAR \" + jarPath + \" for new task.\");\n+      throw new IllegalStateException(\"No JAR for task\");", "originalCommit": "4fc4012e983800eb8eb75753b63e24254cecdf3d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE2NTgzNQ==", "url": "https://github.com/apache/helix/pull/1229#discussion_r467165835", "bodyText": "It seems that new File() only throws\nNullPointerException - If uri is null\nIllegalArgumentException - If the preconditions on the parameter do not hold\nper https://docs.oracle.com/javase/7/docs/api/java/io/File.html.\nWhy are we catching MalformedURLException that's not thrown by anyone?", "author": "narendly", "createdAt": "2020-08-07T17:11:43Z", "path": "helix-core/src/main/java/org/apache/helix/task/api/LocalJarLoader.java", "diffHunk": "@@ -0,0 +1,54 @@\n+package org.apache.helix.task.api;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.io.File;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class LocalJarLoader implements JarLoader {\n+  private static final Logger LOG = LoggerFactory.getLogger(LocalJarLoader.class);\n+\n+  /**\n+   * Loads a local JAR file and returns its URL.\n+   * @param jarPath path of the JAR file\n+   * @return URL of the JAR file at path jarPath\n+   */\n+  @Override\n+  public URL loadJar(String jarPath) {\n+    File taskJarFile;\n+    try {\n+      taskJarFile = new File(jarPath);\n+\n+      // If taskJarFile exists and it's not a directory, return its URL\n+      if (taskJarFile.exists() && !taskJarFile.isDirectory()) {\n+        return taskJarFile.toURI().toURL();\n+      }\n+      LOG.error(\"Failed to find JAR \" + jarPath + \" for new task.\");\n+      throw new IllegalStateException(\"No JAR for task\");\n+    } catch (MalformedURLException e) {", "originalCommit": "4fc4012e983800eb8eb75753b63e24254cecdf3d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE2NzM1NA==", "url": "https://github.com/apache/helix/pull/1229#discussion_r467167354", "bodyText": "taskJarFile.toURI().toURL() throws it. I'll re-organize the code to make that clearer.", "author": "rabashizade", "createdAt": "2020-08-07T17:14:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE2NTgzNQ=="}], "type": "inlineReview"}, {"oid": "1751030650861814d64e7b594a9f3cddda8acb36", "url": "https://github.com/apache/helix/commit/1751030650861814d64e7b594a9f3cddda8acb36", "message": "Add DynamicTaskConfig to store task configs in ZK\n\nAdds DynamicTaskConfig class, which is a wrapper for ZNRecord, to store\nand access the configs for dynamically loaded tasks in ZK.\n\nAlso adds the appropriate constants to TaskConstants.", "committedDate": "2020-08-07T17:52:21Z", "type": "commit"}, {"oid": "bf5a168a8a2e696f41901d79e1fecea52db36a7c", "url": "https://github.com/apache/helix/commit/bf5a168a8a2e696f41901d79e1fecea52db36a7c", "message": "Add JarLoader interface and LocalJarLoader implementation\n\nAdds JarLoader interface to load JAR files that contain task classes\nwhich we want to dynamically load.\n\nAlso adds LocalJarLoader implementation of JarLoader interface which\nloads a JAR file from a local directory.", "committedDate": "2020-08-07T18:03:10Z", "type": "commit"}, {"oid": "bf5a168a8a2e696f41901d79e1fecea52db36a7c", "url": "https://github.com/apache/helix/commit/bf5a168a8a2e696f41901d79e1fecea52db36a7c", "message": "Add JarLoader interface and LocalJarLoader implementation\n\nAdds JarLoader interface to load JAR files that contain task classes\nwhich we want to dynamically load.\n\nAlso adds LocalJarLoader implementation of JarLoader interface which\nloads a JAR file from a local directory.", "committedDate": "2020-08-07T18:03:10Z", "type": "forcePushed"}, {"oid": "75040dc3b93126fa81d3326263513ac9b5c22dad", "url": "https://github.com/apache/helix/commit/75040dc3b93126fa81d3326263513ac9b5c22dad", "message": "Add missing new line", "committedDate": "2020-08-07T18:05:00Z", "type": "commit"}, {"oid": "fa3d7f798423544f3ea1fc7c3bc1ffbfe5db5688", "url": "https://github.com/apache/helix/commit/fa3d7f798423544f3ea1fc7c3bc1ffbfe5db5688", "message": "Reorganize LocalJarLoader to be clearer", "committedDate": "2020-08-08T16:43:36Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE2NDUxNg==", "url": "https://github.com/apache/helix/pull/1229#discussion_r468164516", "bodyText": "Wouldn't IllegalArgument be more appropriate?", "author": "narendly", "createdAt": "2020-08-10T20:23:06Z", "path": "helix-core/src/main/java/org/apache/helix/task/api/LocalJarLoader.java", "diffHunk": "@@ -0,0 +1,53 @@\n+package org.apache.helix.task.api;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.io.File;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class LocalJarLoader implements JarLoader {\n+  private static final Logger LOG = LoggerFactory.getLogger(LocalJarLoader.class);\n+\n+  /**\n+   * Loads a local JAR file and returns its URL.\n+   * @param jarPath path of the JAR file\n+   * @return URL of the JAR file at path jarPath\n+   */\n+  @Override\n+  public URL loadJar(String jarPath) {\n+    // If taskJarFile doesn't exist or it's a directory, throw exception\n+    File taskJarFile = new File(jarPath);\n+    if (!taskJarFile.exists() || taskJarFile.isDirectory()) {\n+      LOG.error(\"Failed to find JAR \" + jarPath + \" for new task.\");\n+      throw new IllegalStateException(\"No JAR for task\");", "originalCommit": "fa3d7f798423544f3ea1fc7c3bc1ffbfe5db5688", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODMwODIzNA==", "url": "https://github.com/apache/helix/pull/1229#discussion_r468308234", "bodyText": "Does it make sense to check for any other permission like whether jar file is readable etc here to make sure jar is readable for JVM to execute?", "author": "manick02", "createdAt": "2020-08-11T03:41:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE2NDUxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI5NjAxMQ==", "url": "https://github.com/apache/helix/pull/1229#discussion_r469296011", "bodyText": "That's a good point, but I think later checks, when we actually try to read from this JAR, will throw appropriate exceptions if there are issues with permissions.", "author": "rabashizade", "createdAt": "2020-08-12T14:20:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE2NDUxNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE2NDc2NQ==", "url": "https://github.com/apache/helix/pull/1229#discussion_r468164765", "bodyText": "IllegalArgument since the input is malformed?", "author": "narendly", "createdAt": "2020-08-10T20:23:38Z", "path": "helix-core/src/main/java/org/apache/helix/task/api/LocalJarLoader.java", "diffHunk": "@@ -0,0 +1,53 @@\n+package org.apache.helix.task.api;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.io.File;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class LocalJarLoader implements JarLoader {\n+  private static final Logger LOG = LoggerFactory.getLogger(LocalJarLoader.class);\n+\n+  /**\n+   * Loads a local JAR file and returns its URL.\n+   * @param jarPath path of the JAR file\n+   * @return URL of the JAR file at path jarPath\n+   */\n+  @Override\n+  public URL loadJar(String jarPath) {\n+    // If taskJarFile doesn't exist or it's a directory, throw exception\n+    File taskJarFile = new File(jarPath);\n+    if (!taskJarFile.exists() || taskJarFile.isDirectory()) {\n+      LOG.error(\"Failed to find JAR \" + jarPath + \" for new task.\");\n+      throw new IllegalStateException(\"No JAR for task\");\n+    }\n+\n+    try {\n+      return taskJarFile.toURI().toURL();\n+    } catch (MalformedURLException e) {\n+      LOG.error(\"Failed to open JAR \" + jarPath + \" for new task.\");\n+      throw new IllegalStateException(\"Malformed JAR URL for task\");", "originalCommit": "fa3d7f798423544f3ea1fc7c3bc1ffbfe5db5688", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "e33cbfdeb9bd69c7292e0f73b95fa7fc998d9f04", "url": "https://github.com/apache/helix/commit/e33cbfdeb9bd69c7292e0f73b95fa7fc998d9f04", "message": "Change exception types to be more clear", "committedDate": "2020-08-12T14:24:02Z", "type": "commit"}]}