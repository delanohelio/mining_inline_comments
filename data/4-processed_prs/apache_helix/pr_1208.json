{"pr_number": 1208, "pr_title": "Add DynamicTaskConfig to store task configs in ZK", "pr_createdAt": "2020-08-03T00:43:09Z", "pr_url": "https://github.com/apache/helix/pull/1208", "timeline": [{"oid": "41e12c1aaa40965d4ab0505d17d6f98d0e5f2dd0", "url": "https://github.com/apache/helix/commit/41e12c1aaa40965d4ab0505d17d6f98d0e5f2dd0", "message": "Add DynamicTaskConfig to store task configs in ZK\n\nAdds DynamicTaskConfig class, which is a wrapper for ZNRecord, to store\nand access the configs for dynamically loaded tasks in ZK.\n\nAlso adds the appropriate constants to TaskConstants.", "committedDate": "2020-08-03T00:36:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDIwODg2OA==", "url": "https://github.com/apache/helix/pull/1208#discussion_r464208868", "bodyText": "Is there a reason DynamicTaskConfig doesn't use inheritance here?", "author": "narendly", "createdAt": "2020-08-03T06:01:04Z", "path": "helix-core/src/main/java/org/apache/helix/task/DynamicTaskConfig.java", "diffHunk": "@@ -0,0 +1,155 @@\n+package org.apache.helix.task;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.List;\n+\n+import org.apache.helix.zookeeper.datamodel.ZNRecord;\n+\n+/**\n+ * A wrapper class for ZNRecord, used to store configs for tasks that are to be dynamically loaded\n+ */\n+public class DynamicTaskConfig {\n+  private ZNRecord _taskConfig;", "originalCommit": "41e12c1aaa40965d4ab0505d17d6f98d0e5f2dd0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDQzOTM4NA==", "url": "https://github.com/apache/helix/pull/1208#discussion_r464439384", "bodyText": "The reason is that when reading the config using BaseDataAccessor, a ZNRecord is returned and at runtime a ClassCastException is thrown when trying to cast it to DynamicTaskConfig.", "author": "rabashizade", "createdAt": "2020-08-03T14:12:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDIwODg2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDUyOTIyMA==", "url": "https://github.com/apache/helix/pull/1208#discussion_r464529220", "bodyText": "In that case, this field should be final.", "author": "narendly", "createdAt": "2020-08-03T16:38:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDIwODg2OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDUyOTQzMw==", "url": "https://github.com/apache/helix/pull/1208#discussion_r464529433", "bodyText": "What are these getters and setters for?", "author": "narendly", "createdAt": "2020-08-03T16:39:04Z", "path": "helix-core/src/main/java/org/apache/helix/task/DynamicTaskConfig.java", "diffHunk": "@@ -0,0 +1,155 @@\n+package org.apache.helix.task;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.List;\n+\n+import org.apache.helix.zookeeper.datamodel.ZNRecord;\n+\n+/**\n+ * A wrapper class for ZNRecord, used to store configs for tasks that are to be dynamically loaded\n+ */\n+public class DynamicTaskConfig {\n+  private ZNRecord _taskConfig;\n+\n+  /**\n+   * Initialize task config with an existing ZNRecord\n+   * @param taskConfig\n+   */\n+  public DynamicTaskConfig(ZNRecord taskConfig) {\n+    _taskConfig = taskConfig;\n+  }\n+\n+  /**\n+   * Initialize task config with parameters\n+   * @param id\n+   * @param jarFile address of the JAR file containing the task\n+   * @param taskVersion task version\n+   * @param taskClasses list of the {@link Task} classes names\n+   * @param taskFactory {@link TaskFactory} class name\n+   */\n+  public DynamicTaskConfig(String id, String jarFile, String taskVersion, List<String> taskClasses,\n+      String taskFactory) {\n+    _taskConfig = new ZNRecord(id);\n+    _taskConfig.setSimpleField(TaskConstants.TASK_JAR_FILE_KEY, jarFile);\n+    _taskConfig.setSimpleField(TaskConstants.TASK_VERSION_KEY, taskVersion);\n+    _taskConfig.setListField(TaskConstants.TASK_CLASSES_KEY, taskClasses);\n+    _taskConfig.setSimpleField(TaskConstants.TASK_FACTORY_KEY, taskFactory);\n+  }\n+\n+  /**\n+   * Get the task config ZNRecord\n+   * @return\n+   */\n+  public ZNRecord getTaskConfig() {\n+    return _taskConfig;\n+  }\n+\n+  /**\n+   * Set the task config ZNRecord\n+   * @param taskConfig\n+   */\n+  public void setTaskConfig(ZNRecord taskConfig) {\n+    _taskConfig = taskConfig;\n+  }", "originalCommit": "41e12c1aaa40965d4ab0505d17d6f98d0e5f2dd0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU3NDE4NQ==", "url": "https://github.com/apache/helix/pull/1208#discussion_r464574185", "bodyText": "The setter should be removed due to making _taskConfig final. But the getter is needed to be passed to create() in BaseDataAccessor when first writing the ZNRecord to ZK.", "author": "rabashizade", "createdAt": "2020-08-03T17:59:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDUyOTQzMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDUyOTcyMg==", "url": "https://github.com/apache/helix/pull/1208#discussion_r464529722", "bodyText": "JarFilePath? or getLocalJarFilePath? Let's try to use descriptive variable/method names.", "author": "narendly", "createdAt": "2020-08-03T16:39:36Z", "path": "helix-core/src/main/java/org/apache/helix/task/DynamicTaskConfig.java", "diffHunk": "@@ -0,0 +1,155 @@\n+package org.apache.helix.task;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.List;\n+\n+import org.apache.helix.zookeeper.datamodel.ZNRecord;\n+\n+/**\n+ * A wrapper class for ZNRecord, used to store configs for tasks that are to be dynamically loaded\n+ */\n+public class DynamicTaskConfig {\n+  private ZNRecord _taskConfig;\n+\n+  /**\n+   * Initialize task config with an existing ZNRecord\n+   * @param taskConfig\n+   */\n+  public DynamicTaskConfig(ZNRecord taskConfig) {\n+    _taskConfig = taskConfig;\n+  }\n+\n+  /**\n+   * Initialize task config with parameters\n+   * @param id\n+   * @param jarFile address of the JAR file containing the task\n+   * @param taskVersion task version\n+   * @param taskClasses list of the {@link Task} classes names\n+   * @param taskFactory {@link TaskFactory} class name\n+   */\n+  public DynamicTaskConfig(String id, String jarFile, String taskVersion, List<String> taskClasses,\n+      String taskFactory) {\n+    _taskConfig = new ZNRecord(id);\n+    _taskConfig.setSimpleField(TaskConstants.TASK_JAR_FILE_KEY, jarFile);\n+    _taskConfig.setSimpleField(TaskConstants.TASK_VERSION_KEY, taskVersion);\n+    _taskConfig.setListField(TaskConstants.TASK_CLASSES_KEY, taskClasses);\n+    _taskConfig.setSimpleField(TaskConstants.TASK_FACTORY_KEY, taskFactory);\n+  }\n+\n+  /**\n+   * Get the task config ZNRecord\n+   * @return\n+   */\n+  public ZNRecord getTaskConfig() {\n+    return _taskConfig;\n+  }\n+\n+  /**\n+   * Set the task config ZNRecord\n+   * @param taskConfig\n+   */\n+  public void setTaskConfig(ZNRecord taskConfig) {\n+    _taskConfig = taskConfig;\n+  }\n+\n+  /**\n+   * Get the address of the JAR file containing the task\n+   * @return\n+   */\n+  public String getJarFile() {", "originalCommit": "41e12c1aaa40965d4ab0505d17d6f98d0e5f2dd0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDUyOTk1OA==", "url": "https://github.com/apache/helix/pull/1208#discussion_r464529958", "bodyText": "Typo.\nAlso, why do you ever need to set the task version after-the-fact?", "author": "narendly", "createdAt": "2020-08-03T16:40:02Z", "path": "helix-core/src/main/java/org/apache/helix/task/DynamicTaskConfig.java", "diffHunk": "@@ -0,0 +1,155 @@\n+package org.apache.helix.task;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.List;\n+\n+import org.apache.helix.zookeeper.datamodel.ZNRecord;\n+\n+/**\n+ * A wrapper class for ZNRecord, used to store configs for tasks that are to be dynamically loaded\n+ */\n+public class DynamicTaskConfig {\n+  private ZNRecord _taskConfig;\n+\n+  /**\n+   * Initialize task config with an existing ZNRecord\n+   * @param taskConfig\n+   */\n+  public DynamicTaskConfig(ZNRecord taskConfig) {\n+    _taskConfig = taskConfig;\n+  }\n+\n+  /**\n+   * Initialize task config with parameters\n+   * @param id\n+   * @param jarFile address of the JAR file containing the task\n+   * @param taskVersion task version\n+   * @param taskClasses list of the {@link Task} classes names\n+   * @param taskFactory {@link TaskFactory} class name\n+   */\n+  public DynamicTaskConfig(String id, String jarFile, String taskVersion, List<String> taskClasses,\n+      String taskFactory) {\n+    _taskConfig = new ZNRecord(id);\n+    _taskConfig.setSimpleField(TaskConstants.TASK_JAR_FILE_KEY, jarFile);\n+    _taskConfig.setSimpleField(TaskConstants.TASK_VERSION_KEY, taskVersion);\n+    _taskConfig.setListField(TaskConstants.TASK_CLASSES_KEY, taskClasses);\n+    _taskConfig.setSimpleField(TaskConstants.TASK_FACTORY_KEY, taskFactory);\n+  }\n+\n+  /**\n+   * Get the task config ZNRecord\n+   * @return\n+   */\n+  public ZNRecord getTaskConfig() {\n+    return _taskConfig;\n+  }\n+\n+  /**\n+   * Set the task config ZNRecord\n+   * @param taskConfig\n+   */\n+  public void setTaskConfig(ZNRecord taskConfig) {\n+    _taskConfig = taskConfig;\n+  }\n+\n+  /**\n+   * Get the address of the JAR file containing the task\n+   * @return\n+   */\n+  public String getJarFile() {\n+    return _taskConfig.getSimpleField(TaskConstants.TASK_JAR_FILE_KEY);\n+  }\n+\n+  /**\n+   * Set the address of the JAR file containing the task\n+   * @param jarFile\n+   */\n+  public void setJarFile(String jarFile) {\n+    _taskConfig.setSimpleField(TaskConstants.TASK_JAR_FILE_KEY, jarFile);\n+  }\n+\n+  /**\n+   * Get the task version\n+   * @return\n+   */\n+  public String getTaskVersion() {\n+    return _taskConfig.getSimpleField(TaskConstants.TASK_VERSION_KEY);\n+  }\n+\n+  /**\n+   * Set the task version\n+   * @param taskVersion\n+   */\n+  public void seTaskVersion(String taskVersion) {", "originalCommit": "41e12c1aaa40965d4ab0505d17d6f98d0e5f2dd0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU3ODI3MA==", "url": "https://github.com/apache/helix/pull/1208#discussion_r464578270", "bodyText": "There was a misunderstanding on my part, all the setters should be removed. Thank you for pointing it out.", "author": "rabashizade", "createdAt": "2020-08-03T18:07:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDUyOTk1OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDUzMDUxOQ==", "url": "https://github.com/apache/helix/pull/1208#discussion_r464530519", "bodyText": "Overall, let's go over this class and make sure we do not have methods (Getters and setters) that we don't/shouldn't need. Think about which fields should be immutable?\nAlso, let's put a focus on descriptive variable/method names as well.", "author": "narendly", "createdAt": "2020-08-03T16:41:04Z", "path": "helix-core/src/main/java/org/apache/helix/task/DynamicTaskConfig.java", "diffHunk": "@@ -0,0 +1,155 @@\n+package org.apache.helix.task;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.List;\n+\n+import org.apache.helix.zookeeper.datamodel.ZNRecord;\n+\n+/**\n+ * A wrapper class for ZNRecord, used to store configs for tasks that are to be dynamically loaded\n+ */\n+public class DynamicTaskConfig {", "originalCommit": "41e12c1aaa40965d4ab0505d17d6f98d0e5f2dd0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "2a579b70c8b39295670a84ed922666590b319331", "url": "https://github.com/apache/helix/commit/2a579b70c8b39295670a84ed922666590b319331", "message": "Remove unnecessary methods, add more descriptive names\n\nRemoves unnecessary setter methods and renames some methods and\nvariables to be more descriptive.", "committedDate": "2020-08-03T18:13:34Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc2ODE0Mw==", "url": "https://github.com/apache/helix/pull/1208#discussion_r464768143", "bodyText": "Nit: Rename to getTaskConfigZNRecord?", "author": "narendly", "createdAt": "2020-08-04T02:52:25Z", "path": "helix-core/src/main/java/org/apache/helix/task/DynamicTaskConfig.java", "diffHunk": "@@ -0,0 +1,115 @@\n+package org.apache.helix.task;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.List;\n+\n+import org.apache.helix.zookeeper.datamodel.ZNRecord;\n+\n+/**\n+ * A wrapper class for ZNRecord, used to store configs for tasks that are to be dynamically loaded\n+ */\n+public class DynamicTaskConfig {\n+  private final ZNRecord _taskConfig;\n+\n+  /**\n+   * Initialize task config with an existing ZNRecord\n+   * @param taskConfig\n+   */\n+  public DynamicTaskConfig(ZNRecord taskConfig) {\n+    _taskConfig = taskConfig;\n+  }\n+\n+  /**\n+   * Initialize task config with parameters\n+   * @param id\n+   * @param jarFilePath path of the JAR file containing the task\n+   * @param taskVersion task version\n+   * @param taskClassesFqns list of the {@link Task} classes fully qualified names\n+   * @param taskFactoryFqn {@link TaskFactory} class fully qualified name\n+   */\n+  public DynamicTaskConfig(String id, String jarFilePath, String taskVersion, List<String> taskClassesFqns,\n+      String taskFactoryFqn) {\n+    _taskConfig = new ZNRecord(id);\n+    _taskConfig.setSimpleField(TaskConstants.TASK_JAR_FILE_KEY, jarFilePath);\n+    _taskConfig.setSimpleField(TaskConstants.TASK_VERSION_KEY, taskVersion);\n+    _taskConfig.setListField(TaskConstants.TASK_CLASSES_KEY, taskClassesFqns);\n+    _taskConfig.setSimpleField(TaskConstants.TASK_FACTORY_KEY, taskFactoryFqn);\n+  }\n+\n+  /**\n+   * Get the task config ZNRecord\n+   * @return\n+   */\n+  public ZNRecord getTaskConfig() {", "originalCommit": "2a579b70c8b39295670a84ed922666590b319331", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc2ODM2OQ==", "url": "https://github.com/apache/helix/pull/1208#discussion_r464768369", "bodyText": "Since we have a TaskFactory - Task Class mapping, do we want a map here instead of two separate lists? How do we match them up otherwise?", "author": "narendly", "createdAt": "2020-08-04T02:53:23Z", "path": "helix-core/src/main/java/org/apache/helix/task/DynamicTaskConfig.java", "diffHunk": "@@ -0,0 +1,115 @@\n+package org.apache.helix.task;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.List;\n+\n+import org.apache.helix.zookeeper.datamodel.ZNRecord;\n+\n+/**\n+ * A wrapper class for ZNRecord, used to store configs for tasks that are to be dynamically loaded\n+ */\n+public class DynamicTaskConfig {\n+  private final ZNRecord _taskConfig;\n+\n+  /**\n+   * Initialize task config with an existing ZNRecord\n+   * @param taskConfig\n+   */\n+  public DynamicTaskConfig(ZNRecord taskConfig) {\n+    _taskConfig = taskConfig;\n+  }\n+\n+  /**\n+   * Initialize task config with parameters\n+   * @param id\n+   * @param jarFilePath path of the JAR file containing the task\n+   * @param taskVersion task version\n+   * @param taskClassesFqns list of the {@link Task} classes fully qualified names\n+   * @param taskFactoryFqn {@link TaskFactory} class fully qualified name\n+   */\n+  public DynamicTaskConfig(String id, String jarFilePath, String taskVersion, List<String> taskClassesFqns,\n+      String taskFactoryFqn) {\n+    _taskConfig = new ZNRecord(id);\n+    _taskConfig.setSimpleField(TaskConstants.TASK_JAR_FILE_KEY, jarFilePath);\n+    _taskConfig.setSimpleField(TaskConstants.TASK_VERSION_KEY, taskVersion);\n+    _taskConfig.setListField(TaskConstants.TASK_CLASSES_KEY, taskClassesFqns);\n+    _taskConfig.setSimpleField(TaskConstants.TASK_FACTORY_KEY, taskFactoryFqn);\n+  }\n+\n+  /**\n+   * Get the task config ZNRecord\n+   * @return\n+   */\n+  public ZNRecord getTaskConfig() {\n+    return _taskConfig;\n+  }\n+\n+  /**\n+   * Get the address of the JAR file containing the task\n+   * @return\n+   */\n+  public String getJarFilePath() {\n+    return _taskConfig.getSimpleField(TaskConstants.TASK_JAR_FILE_KEY);\n+  }\n+\n+  /**\n+   * Get the task version\n+   * @return\n+   */\n+  public String getTaskVersion() {\n+    return _taskConfig.getSimpleField(TaskConstants.TASK_VERSION_KEY);\n+  }\n+\n+  /**\n+   * Get the list of the {@link Task} classes fully qualified names\n+   * @return\n+   */\n+  public List<String> getTaskClassesFqns() {\n+    return _taskConfig.getListField(TaskConstants.TASK_CLASSES_KEY);\n+  }\n+\n+  /**\n+   * Get the {@link TaskFactory} class fully qualified name\n+   * @return\n+   */\n+  public String getTaskFactoryFqn() {\n+    return _taskConfig.getSimpleField(TaskConstants.TASK_FACTORY_KEY);", "originalCommit": "2a579b70c8b39295670a84ed922666590b319331", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc2OTUyNA==", "url": "https://github.com/apache/helix/pull/1208#discussion_r464769524", "bodyText": "My reasoning here was that there must be a single TaskFactory, but there could be multiple Task classes (to be invoked depending on the command parameters). So only Task is a list but TaskFactory is a String. Is the assumption flawed?", "author": "rabashizade", "createdAt": "2020-08-04T02:57:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc2ODM2OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc3Mjg0MQ==", "url": "https://github.com/apache/helix/pull/1208#discussion_r464772841", "bodyText": "I see. Thanks for the clarification. In that case, this makes sense. Basically, this factory refers to the factory that can instantiate any implementations of Task.", "author": "narendly", "createdAt": "2020-08-04T03:10:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc2ODM2OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc4NzEwOA==", "url": "https://github.com/apache/helix/pull/1208#discussion_r464787108", "bodyText": "Yes, exactly.", "author": "rabashizade", "createdAt": "2020-08-04T04:09:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc2ODM2OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc2ODQ5Ng==", "url": "https://github.com/apache/helix/pull/1208#discussion_r464768496", "bodyText": "Nit: TASK_FACTORY for consistency?", "author": "narendly", "createdAt": "2020-08-04T02:53:56Z", "path": "helix-core/src/main/java/org/apache/helix/task/TaskConstants.java", "diffHunk": "@@ -49,4 +49,24 @@\n   public static final String PREV_RA_NODE = \"PreviousResourceAssignment\";\n \n   public static final boolean DEFAULT_TASK_ENABLE_COMPRESSION = false;\n+  /**\n+   * Name of the JAR file for the task dynamically loaded in {@link TaskStateModel}\n+   */\n+  public static final String TASK_JAR_FILE_KEY = \"JAR_FILE\";\n+  /**\n+   * Version of the task dynamically loaded in {@link TaskStateModel}\n+   */\n+  public static final String TASK_VERSION_KEY = \"VERSION\";\n+  /**\n+   * Name of the {@link Task} class(es) for the task dynamically loaded in {@link TaskStateModel}\n+   */\n+  public static final String TASK_CLASSES_KEY = \"TASK_CLASSES\";\n+  /**\n+   * Name of the {@link TaskFactory} class for the task dynamically loaded in {@link TaskStateModel}\n+   */\n+  public static final String TASK_FACTORY_KEY = \"TASKFACTORY\";", "originalCommit": "2a579b70c8b39295670a84ed922666590b319331", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc3MzM4NQ==", "url": "https://github.com/apache/helix/pull/1208#discussion_r464773385", "bodyText": "Let's rename TASK_PATH to DYNAMICALLY_LOADED_TASK_PATH or something. TASK_PATH might add confusion because we actually use /PROPERTYSTORE/TaskRebalancer/", "author": "narendly", "createdAt": "2020-08-04T03:12:47Z", "path": "helix-core/src/main/java/org/apache/helix/task/TaskConstants.java", "diffHunk": "@@ -49,4 +49,24 @@\n   public static final String PREV_RA_NODE = \"PreviousResourceAssignment\";\n \n   public static final boolean DEFAULT_TASK_ENABLE_COMPRESSION = false;\n+  /**\n+   * Name of the JAR file for the task dynamically loaded in {@link TaskStateModel}\n+   */\n+  public static final String TASK_JAR_FILE_KEY = \"JAR_FILE\";\n+  /**\n+   * Version of the task dynamically loaded in {@link TaskStateModel}\n+   */\n+  public static final String TASK_VERSION_KEY = \"VERSION\";\n+  /**\n+   * Name of the {@link Task} class(es) for the task dynamically loaded in {@link TaskStateModel}\n+   */\n+  public static final String TASK_CLASSES_KEY = \"TASK_CLASSES\";\n+  /**\n+   * Name of the {@link TaskFactory} class for the task dynamically loaded in {@link TaskStateModel}\n+   */\n+  public static final String TASK_FACTORY_KEY = \"TASKFACTORY\";\n+  /**\n+   * The path for dynamic task configs\n+   */\n+  public static final String TASK_PATH = \"/TASK_DEFINITION\";", "originalCommit": "2a579b70c8b39295670a84ed922666590b319331", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "37e89c59e58b52a46360a342ad78df2bdd4d03e3", "url": "https://github.com/apache/helix/commit/37e89c59e58b52a46360a342ad78df2bdd4d03e3", "message": "Refactor some names to be clear/consistent", "committedDate": "2020-08-04T03:57:50Z", "type": "commit"}, {"oid": "5ccc29c68ce19d9669e5118d77cfc51b627c7ea2", "url": "https://github.com/apache/helix/commit/5ccc29c68ce19d9669e5118d77cfc51b627c7ea2", "message": "Clarify a variable's name", "committedDate": "2020-08-04T16:53:16Z", "type": "commit"}]}