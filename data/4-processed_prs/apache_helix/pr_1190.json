{"pr_number": 1190, "pr_title": "Add Helix rest Zookeeper delete API to allow removing ephemeral ZNode", "pr_createdAt": "2020-07-30T04:47:07Z", "pr_url": "https://github.com/apache/helix/pull/1190", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjgxOTA3MA==", "url": "https://github.com/apache/helix/pull/1190#discussion_r462819070", "bodyText": "Missing %s?", "author": "huizhilu", "createdAt": "2020-07-30T07:59:26Z", "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/zookeeper/ZooKeeperAccessor.java", "diffHunk": "@@ -192,7 +196,29 @@ private Response getStat(BaseDataAccessor<byte[]> zkBaseDataAccessor, String pat\n           .entity(String.format(\"The ZNode at path %s does not exist!\", path)).build());\n     }\n     Map<String, String> result = ZKUtil.fromStatToMap(stat);\n-    result.put(\"path\", path);\n+    result.put(PATH_STR, path);\n+    return JSONRepresentation(result);\n+  }\n+\n+  /**\n+   * Delete the ZNode at the given path if exists.\n+   * @param zkBaseDataAccessor\n+   * @param path\n+   * @return The delete result and the operated path.\n+   */\n+  private Response delete(BaseDataAccessor zkBaseDataAccessor, String path) {\n+    // TODO: Remove this restriction once we have audit and ACL for the API calls.\n+    // TODO: This method is added pre-maturely to support removing the live instance of a zombie\n+    // TODO: instance. It is risky to allow all deleting requests before audit and ACL are done.\n+    Stat stat = zkBaseDataAccessor.getStat(path, AccessOption.PERSISTENT);\n+    if (stat != null && stat.getEphemeralOwner() <= 0) {\n+      throw new WebApplicationException(Response.status(Response.Status.FORBIDDEN)\n+          .entity(String.format(\"Deleting a non ephemeral node is not allowed\", path)).build());", "originalCommit": "b6e19fde7aff92f92bb8a5d4c907529174d9d144", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzIwNjU0MA==", "url": "https://github.com/apache/helix/pull/1190#discussion_r463206540", "bodyText": "good catch!", "author": "jiajunwang", "createdAt": "2020-07-30T18:58:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjgxOTA3MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjgyOTIzOA==", "url": "https://github.com/apache/helix/pull/1190#discussion_r462829238", "bodyText": "Would this go to a \"DELETE\" HTTP verb?", "author": "huizhilu", "createdAt": "2020-07-30T08:17:55Z", "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/zookeeper/ZooKeeperAccessor.java", "diffHunk": "@@ -94,6 +96,8 @@ public Response get(@PathParam(\"path\") String path, @QueryParam(\"command\") Strin\n         return getChildren(_zkBaseDataAccessor, path);\n       case getStat:\n         return getStat(_zkBaseDataAccessor, path);\n+      case delete:", "originalCommit": "b6e19fde7aff92f92bb8a5d4c907529174d9d144", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzIyNTgxNA==", "url": "https://github.com/apache/helix/pull/1190#discussion_r463225814", "bodyText": "That makes more sense, let me have a try.", "author": "jiajunwang", "createdAt": "2020-07-30T19:36:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjgyOTIzOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzEzMDU5OA==", "url": "https://github.com/apache/helix/pull/1190#discussion_r463130598", "bodyText": "I think it would be smarter to use deleteEphemeral and rename your methods accordingly because it seems that it's  not the general delete you're trying to support.", "author": "narendly", "createdAt": "2020-07-30T16:43:39Z", "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/zookeeper/ZooKeeperAccessor.java", "diffHunk": "@@ -52,12 +51,15 @@\n   private static final Logger LOG = LoggerFactory.getLogger(ZooKeeperAccessor.class.getName());\n   private BaseDataAccessor<byte[]> _zkBaseDataAccessor;\n \n+  private static final String PATH_STR = \"path\";\n+\n   public enum ZooKeeperCommand {\n     exists,\n     getBinaryData,\n     getStringData,\n     getChildren,\n-    getStat\n+    getStat,\n+    delete", "originalCommit": "b6e19fde7aff92f92bb8a5d4c907529174d9d144", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzIyNzU0NQ==", "url": "https://github.com/apache/helix/pull/1190#discussion_r463227545", "bodyText": "I don't think we want \"deleteEphemeral\" eventually. As mentioned in the description, this is a premature feature that we add now for unblocking our users.\nAlternatively, I tried to allow deleting live instance only. But that will pollute the ZookeeperAccessor API with Helix logics. So I discarded that idea.", "author": "jiajunwang", "createdAt": "2020-07-30T19:39:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzEzMDU5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzIzMDY1Mg==", "url": "https://github.com/apache/helix/pull/1190#discussion_r463230652", "bodyText": "It seems that you are suggesting adding and using delete, expecting its behavior to change in the future. Adding an endpoint and changing its behavior will bring about backward-compatibility issues and make the meaning of \"delete\" murky. Moreover, there's no harm in having deleteEphemeral - it does what it does, and if the user no longer wishes to use it, then there's no harm in having it.\nA good API design I believe is something that is 1) easy to use and 2) doing exactly what it's advertising to do. Do you see why I think it might be less desirable to add hidden assumptions to delete?", "author": "narendly", "createdAt": "2020-07-30T19:45:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzEzMDU5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzMzODc3Ng==", "url": "https://github.com/apache/helix/pull/1190#discussion_r463338776", "bodyText": "I can see where you are coming from. Could you check the latest change that I have modified the method to use DELETE verb according to what Huizhi suggested? I think it is cleaner. However, in this case, we need some more parameters to separate the cases. And I think it might be overcomplicated.\n@dasahcc and @pkuwm please also share your opinion since you also contributed to the Helix rest.", "author": "jiajunwang", "createdAt": "2020-07-31T00:13:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzEzMDU5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQ3NzQ5MA==", "url": "https://github.com/apache/helix/pull/1190#discussion_r463477490", "bodyText": "My opinion is,\n\nuse DELETE verb that is designed for the REST delete operation.\nif we only want to support deleting ephemeral, document it well and return a clear response like:\n\n    HTTP/1.1  404\n    Content-Type: application/json\n \n    {\n      \"message\": \"Deleting a non-ephemeral node is not supported/allowed\",\n      \"path\": \"/a/b/c\"\n    }\n\nAnd it is extensible if we want to support deleting persistent node in the future.", "author": "huizhilu", "createdAt": "2020-07-31T08:30:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzEzMDU5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzc1MDY2NQ==", "url": "https://github.com/apache/helix/pull/1190#discussion_r463750665", "bodyText": "This information is carried in the response entity as a string for now. I don't think we need to make it too structural (complicated) given it is a temporary restriction. And eventually, we do not have a clear standard for the response format now. So I would prefer holding on any more complex idea.", "author": "jiajunwang", "createdAt": "2020-07-31T17:55:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzEzMDU5OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzEzMTA5Mw==", "url": "https://github.com/apache/helix/pull/1190#discussion_r463131093", "bodyText": "Would zkBaseDataAccessor.remove(path, AccessOption.EPHEMERAL) be an option?", "author": "narendly", "createdAt": "2020-07-30T16:44:23Z", "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/zookeeper/ZooKeeperAccessor.java", "diffHunk": "@@ -192,7 +196,29 @@ private Response getStat(BaseDataAccessor<byte[]> zkBaseDataAccessor, String pat\n           .entity(String.format(\"The ZNode at path %s does not exist!\", path)).build());\n     }\n     Map<String, String> result = ZKUtil.fromStatToMap(stat);\n-    result.put(\"path\", path);\n+    result.put(PATH_STR, path);\n+    return JSONRepresentation(result);\n+  }\n+\n+  /**\n+   * Delete the ZNode at the given path if exists.\n+   * @param zkBaseDataAccessor\n+   * @param path\n+   * @return The delete result and the operated path.\n+   */\n+  private Response delete(BaseDataAccessor zkBaseDataAccessor, String path) {\n+    // TODO: Remove this restriction once we have audit and ACL for the API calls.\n+    // TODO: This method is added pre-maturely to support removing the live instance of a zombie\n+    // TODO: instance. It is risky to allow all deleting requests before audit and ACL are done.\n+    Stat stat = zkBaseDataAccessor.getStat(path, AccessOption.PERSISTENT);\n+    if (stat != null && stat.getEphemeralOwner() <= 0) {\n+      throw new WebApplicationException(Response.status(Response.Status.FORBIDDEN)\n+          .entity(String.format(\"Deleting a non ephemeral node is not allowed\", path)).build());\n+    }\n+\n+    Boolean ret = zkBaseDataAccessor.remove(path, AccessOption.PERSISTENT);", "originalCommit": "b6e19fde7aff92f92bb8a5d4c907529174d9d144", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzIyODcwOQ==", "url": "https://github.com/apache/helix/pull/1190#discussion_r463228709", "bodyText": "The latter parameter is not used. Put EPHEMERAL or PERSISTENT is equally confusing. So let me just put the first enum item for now. I actually intend to avoid using EPHEMERAL since it indicates this parameter has some usage inside (but it is not true).\nI think we need to discard this interesting API for good.", "author": "jiajunwang", "createdAt": "2020-07-30T19:42:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzEzMTA5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzMzOTAzMA==", "url": "https://github.com/apache/helix/pull/1190#discussion_r463339030", "bodyText": "Let's don't touch the option for this PR. Let me create an issue for the unnecessary AccessOption.", "author": "jiajunwang", "createdAt": "2020-07-31T00:14:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzEzMTA5Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzIyMzIyNA==", "url": "https://github.com/apache/helix/pull/1190#discussion_r463223224", "bodyText": "Question here (may not related to your change).\nIs the second param here in exists(String path, int options) useful? I did not find it being considered in any implementation of BaseDataAccessor.", "author": "xyuanlu", "createdAt": "2020-07-30T19:31:10Z", "path": "helix-rest/src/test/java/org/apache/helix/rest/server/TestZooKeeperAccessor.java", "diffHunk": "@@ -192,4 +191,33 @@ public void testGetStat() throws IOException {\n     // Clean up\n     _testBaseDataAccessor.remove(path, AccessOption.PERSISTENT);\n   }\n+\n+  @Test\n+  public void testDelete() throws IOException {\n+    String path = \"/path\";\n+    String deletePath = path + \"/delete\";\n+\n+    try {\n+      // 1. Create a persistent node. Delete shall fail.\n+      _testBaseDataAccessor.create(deletePath, null, AccessOption.PERSISTENT);\n+      // Verify with the REST endpoint\n+      new JerseyUriRequestBuilder(\"zookeeper{}?command=delete\").format(deletePath)\n+          .expectedReturnStatusCode(Response.Status.FORBIDDEN.getStatusCode());\n+      Assert.assertTrue(_testBaseDataAccessor.exists(deletePath, AccessOption.PERSISTENT));\n+\n+      // 2. Create a ephemeral node. Delete shall be done successfully.\n+      _testBaseDataAccessor.remove(deletePath, AccessOption.PERSISTENT);\n+      _testBaseDataAccessor.create(deletePath, null, AccessOption.EPHEMERAL);\n+      // Verify with the REST endpoint\n+      String data = new JerseyUriRequestBuilder(\"zookeeper{}?command=delete\").format(deletePath)\n+          .isBodyReturnExpected(true).get(this);\n+      Map<String, String> result = OBJECT_MAPPER.readValue(data, HashMap.class);\n+      Assert.assertEquals(result.get(\"path\"), deletePath);\n+      Assert.assertEquals(result.get(\"delete\"), new Boolean(true).toString());\n+      Assert.assertFalse(_testBaseDataAccessor.exists(deletePath, AccessOption.PERSISTENT));", "originalCommit": "b6e19fde7aff92f92bb8a5d4c907529174d9d144", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzIyOTY0Ng==", "url": "https://github.com/apache/helix/pull/1190#discussion_r463229646", "bodyText": "No use at all. There seems to be no such an exist or getStat method which takes the option in ZK lib, either. I think we shall clean them up in a separate PR.", "author": "jiajunwang", "createdAt": "2020-07-30T19:43:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzIyMzIyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzIzNjgwNA==", "url": "https://github.com/apache/helix/pull/1190#discussion_r463236804", "bodyText": "Yea. That confuses me as well. It seems many functions has a not-used 'int option' as input in BaseDataAccessor. May I suggest using a value consist with the node type as input? For example, we want to check if the newly created EPHEMERAL node is deleted, let use EPHEMERAL here to avoid further confusion.", "author": "xyuanlu", "createdAt": "2020-07-30T19:57:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzIyMzIyNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQ3MTExMg==", "url": "https://github.com/apache/helix/pull/1190#discussion_r463471112", "bodyText": "Actually if we set the root path as below, we don't need to prepend the root slash, which is not that clean.\n@Path(\"/zookeeper{path: /.+}\")\npublic class ZooKeeperAccessor extends AbstractResource {", "author": "huizhilu", "createdAt": "2020-07-31T08:17:24Z", "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/zookeeper/ZooKeeperAccessor.java", "diffHunk": "@@ -101,6 +100,26 @@ public Response get(@PathParam(\"path\") String path, @QueryParam(\"command\") Strin\n     }\n   }\n \n+  @DELETE\n+  @Path(\"{path: .+}\")\n+  public Response delete(@PathParam(\"path\") String path) {\n+    // Lazily initialize ZkBaseDataAccessor\n+    ServerContext _serverContext =\n+        (ServerContext) _application.getProperties().get(ContextPropertyKeys.SERVER_CONTEXT.name());\n+    _zkBaseDataAccessor = _serverContext.getByteArrayZkBaseDataAccessor();\n+\n+    path = prependPath(path);", "originalCommit": "6857c1786c35c314a7a442413ebdb99e122e5d1b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzc1MTAyNw==", "url": "https://github.com/apache/helix/pull/1190#discussion_r463751027", "bodyText": "Neat, changed the code accordingly. There is more code like that. But I would not change them in this PR.", "author": "jiajunwang", "createdAt": "2020-07-31T17:56:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQ3MTExMg=="}], "type": "inlineReview"}, {"oid": "0a189bef7dd6d68aeef68ef497086b1ee6f8df2c", "url": "https://github.com/apache/helix/commit/0a189bef7dd6d68aeef68ef497086b1ee6f8df2c", "message": "Address more comments.", "committedDate": "2020-08-01T00:18:06Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzkwMTY0OA==", "url": "https://github.com/apache/helix/pull/1190#discussion_r463901648", "bodyText": "Could we add a msg to this as well: (\"Path %s does not exist\", path)? I think it gives a user a better idea. Otherwise the msg returned is unfriendly if we use curl endpoint in terminal.\n<html>\n<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html;charset=ISO-8859-1\"/>\n<title>Error 404 </title>\n</head>\n<body>\n<h2>HTTP ERROR: 404</h2>\n<p>Problem accessing /admin/v2/zookeeper/aa. Reason:\n<pre>    Not Found</pre></p>\n<hr /><a href=\"http://eclipse.org/jetty\">Powered by Jetty:// 9.4.12.v20180830</a><hr/>\n</body>\n</html>\n\nVS\n{\n  \"message\" : \"Path /aa does not exist\",\n  \"status\": 404\n}", "author": "huizhilu", "createdAt": "2020-08-01T01:11:32Z", "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/zookeeper/ZooKeeperAccessor.java", "diffHunk": "@@ -196,6 +209,32 @@ private Response getStat(BaseDataAccessor<byte[]> zkBaseDataAccessor, String pat\n     return JSONRepresentation(result);\n   }\n \n+  /**\n+   * Delete the ZNode at the given path if exists.\n+   * @param zkBaseDataAccessor\n+   * @param path\n+   * @return The delete result and the operated path.\n+   */\n+  private Response delete(BaseDataAccessor zkBaseDataAccessor, String path) {\n+    Stat stat = zkBaseDataAccessor.getStat(path, AccessOption.PERSISTENT);\n+    if (stat == null) {\n+      return notFound();", "originalCommit": "0a189bef7dd6d68aeef68ef497086b1ee6f8df2c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzkwMjQ5MQ==", "url": "https://github.com/apache/helix/pull/1190#discussion_r463902491", "bodyText": "At least add a message OK(\"Success\")?", "author": "huizhilu", "createdAt": "2020-08-01T01:19:18Z", "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/zookeeper/ZooKeeperAccessor.java", "diffHunk": "@@ -196,6 +209,32 @@ private Response getStat(BaseDataAccessor<byte[]> zkBaseDataAccessor, String pat\n     return JSONRepresentation(result);\n   }\n \n+  /**\n+   * Delete the ZNode at the given path if exists.\n+   * @param zkBaseDataAccessor\n+   * @param path\n+   * @return The delete result and the operated path.\n+   */\n+  private Response delete(BaseDataAccessor zkBaseDataAccessor, String path) {\n+    Stat stat = zkBaseDataAccessor.getStat(path, AccessOption.PERSISTENT);\n+    if (stat == null) {\n+      return notFound();\n+    } else if (stat.getEphemeralOwner() <= 0) {\n+      // TODO: Remove this restriction once we have audit and ACL for the API calls.\n+      // TODO: This method is added pre-maturely to support removing the live instance of a zombie\n+      // TODO: instance. It is risky to allow all deleting requests before audit and ACL are done.\n+      throw new WebApplicationException(Response.status(Response.Status.FORBIDDEN)\n+          .entity(String.format(\"Deleting a non-ephemeral node is not allowed.\")).build());\n+    }\n+\n+    if (zkBaseDataAccessor.remove(path, AccessOption.PERSISTENT)) {\n+      return OK();", "originalCommit": "0a189bef7dd6d68aeef68ef497086b1ee6f8df2c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzkyMjQ5Mg==", "url": "https://github.com/apache/helix/pull/1190#discussion_r463922492", "bodyText": "I'm not seeing how this is any different from using delete. This is no better than using delete for two different types of delete's - delete and deleteEphemeral.\nPerhaps you could add a commandStr here to differentiate two different types of deletes, and when you want to add an endpoint for regular delete backed by ACL checks, then just implement that if that becomes necessary? I don't think this adds any more work/difficulty for the purposes of this PR? (If any, it saves you the work of adding a TODO)\nMy point was not about what kind of REST verb we should use - it's pretty clear we should use DELETE in this case. But it's more about following a good API design which, again, is something that is hard to misuse by not embedding hidden assumptions or TODOs that may cause a behavior change down the road. Also, seen from another angle, supporting it as deleteEphemeral gives the user a clear meaning to the command string as opposed to just calling it a HTTP verb DELETE, which might leave the user confused and question the meaning of the API when it fails to delete regular ZNodes.\nYou could add two commands, delete and deleteEphemeral, and make the default commandStr delete, and throw a not authorized or not supported, and only let deleteEphemeral go through. This way, when we do decide to support delete operation with ACL, there's no confusion or change in behavior.", "author": "narendly", "createdAt": "2020-08-01T04:52:33Z", "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/zookeeper/ZooKeeperAccessor.java", "diffHunk": "@@ -196,6 +209,32 @@ private Response getStat(BaseDataAccessor<byte[]> zkBaseDataAccessor, String pat\n     return JSONRepresentation(result);\n   }\n \n+  /**\n+   * Delete the ZNode at the given path if exists.\n+   * @param zkBaseDataAccessor\n+   * @param path\n+   * @return The delete result and the operated path.\n+   */\n+  private Response delete(BaseDataAccessor zkBaseDataAccessor, String path) {", "originalCommit": "0a189bef7dd6d68aeef68ef497086b1ee6f8df2c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDcyNTYwNw==", "url": "https://github.com/apache/helix/pull/1190#discussion_r464725607", "bodyText": "Discussed with Junkai in slack, his point is that we don't need the additional cmd layer for now.", "author": "jiajunwang", "createdAt": "2020-08-04T00:09:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzkyMjQ5Mg=="}], "type": "inlineReview"}, {"oid": "951cc336f1da18fd6c19d022d7a0cd728ea4cacf", "url": "https://github.com/apache/helix/commit/951cc336f1da18fd6c19d022d7a0cd728ea4cacf", "message": "Add Helix Rest Zookeeper operation API to allow removing ephemeral ZNode.", "committedDate": "2020-08-03T19:27:05Z", "type": "commit"}, {"oid": "c22f79b54e0e6a6230746d71d34bfde3528ebaf7", "url": "https://github.com/apache/helix/commit/c22f79b54e0e6a6230746d71d34bfde3528ebaf7", "message": "Address comments.", "committedDate": "2020-08-03T19:27:05Z", "type": "commit"}, {"oid": "9fda948960b60c7494bbecddc72b9e8b5d4a4a7f", "url": "https://github.com/apache/helix/commit/9fda948960b60c7494bbecddc72b9e8b5d4a4a7f", "message": "Revert unnecessary changes.", "committedDate": "2020-08-03T19:27:05Z", "type": "commit"}, {"oid": "d2afc4b718075ccc287d5e7366497b2445840aae", "url": "https://github.com/apache/helix/commit/d2afc4b718075ccc287d5e7366497b2445840aae", "message": "Address more comments.", "committedDate": "2020-08-03T19:27:05Z", "type": "commit"}, {"oid": "d2afc4b718075ccc287d5e7366497b2445840aae", "url": "https://github.com/apache/helix/commit/d2afc4b718075ccc287d5e7366497b2445840aae", "message": "Address more comments.", "committedDate": "2020-08-03T19:27:05Z", "type": "forcePushed"}]}