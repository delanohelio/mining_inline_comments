{"pr_number": 785, "pr_title": "Fix the ConcurrentModificationException in ClusterEvent.java", "pr_createdAt": "2020-02-19T23:13:08Z", "pr_url": "https://github.com/apache/helix/pull/785", "timeline": [{"oid": "ee1cbd02dbed2804afafb80ec6d0194c61bfff42", "url": "https://github.com/apache/helix/commit/ee1cbd02dbed2804afafb80ec6d0194c61bfff42", "message": "Fix the ConcurrentModificationException in ClusterEvent", "committedDate": "2020-02-19T23:06:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTgyMjE4MA==", "url": "https://github.com/apache/helix/pull/785#discussion_r381822180", "bodyText": "Thanks for the PR!\n\n\nCan we just replace clone() logic with what you have in the copy constructor? If the constructor is private, then I think it'd just be simpler to put this \"copy\" logic in clone() (it seems pretty simple anyways).\n\n\nWith that said, do we still need addAttribute() anymore?", "author": "narendly", "createdAt": "2020-02-20T07:24:55Z", "path": "helix-core/src/main/java/org/apache/helix/controller/stages/ClusterEvent.java", "diffHunk": "@@ -55,6 +55,19 @@ public ClusterEvent(String clusterName, ClusterEventType eventType, String event\n     _eventId = eventId;\n   }\n \n+  /**", "originalCommit": "ee1cbd02dbed2804afafb80ec6d0194c61bfff42", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM1NjM2OA==", "url": "https://github.com/apache/helix/pull/785#discussion_r382356368", "bodyText": "That's really what I thought initially. But it turns out the variable _eventAttributeMap is final, which means I cannot mutate the value.\nAre you also referring to this\nClusterEvent newEvent = new ClusterEvent(_clusterName, _eventType, eventId);\t    return new ClusterEvent(this, eventId);\nnewEvent.setCreationTime(_creationTime);\nnewEvent._eventAttributeMap = new HashMap(__eventAttributeMap);\n\nUnless we change the map to non-final", "author": "i3wangyi", "createdAt": "2020-02-21T01:45:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTgyMjE4MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTg0NTk4MA==", "url": "https://github.com/apache/helix/pull/785#discussion_r381845980", "bodyText": "@i3wangyi I am a bit confused and not convinced by the root cause: \"In ClusterEvent.java, the hashmap update itself while in its for loop\". If so, each time this method is called, the ConcurrentModificationException would be thrown and it does not work at all.\nThe maps _eventAttributeMap are different objects. So addAttribute() does not add the attributes to the original event's map, but the new event's different map.\nSo I think the root cause could be another place (eg. another thread) updating the original event's map while in for loop.", "author": "huizhilu", "createdAt": "2020-02-20T08:26:53Z", "path": "helix-core/src/main/java/org/apache/helix/controller/stages/ClusterEvent.java", "diffHunk": "@@ -114,11 +127,6 @@ public String toString() {\n   }\n \n   public ClusterEvent clone(String eventId) {\n-    ClusterEvent newEvent = new ClusterEvent(_clusterName, _eventType, eventId);\n-    newEvent.setCreationTime(_creationTime);\n-    for (String attributeName : _eventAttributeMap.keySet()) {", "originalCommit": "ee1cbd02dbed2804afafb80ec6d0194c61bfff42", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM1NzMzNA==", "url": "https://github.com/apache/helix/pull/785#discussion_r382357334", "bodyText": "You're right! I'll update the root cause in #785. I was initially unaware of the different objects of _eventAttributeMap, cause the old code is readable at first sight and it's not thread-safe.\nThis fix is still valid under multi-threads. Added one test but making it multi-threading and produce the same issue is non-trivial.", "author": "i3wangyi", "createdAt": "2020-02-21T01:49:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTg0NTk4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM3OTI4NA==", "url": "https://github.com/apache/helix/pull/785#discussion_r382379284", "bodyText": "Can you explain why the copy constructor is different from the original for-loop? Maybe I miss something, but I see that new HashMap<>(map) is basically also a for-loop to copy the original map entries, which means, the entries could still change and throws concurrent mod exception for the step new HashMap<>(map).\nPlease correct me if I am wrong. Appreciate it!", "author": "huizhilu", "createdAt": "2020-02-21T03:23:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTg0NTk4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc2NzA3Mw==", "url": "https://github.com/apache/helix/pull/785#discussion_r382767073", "bodyText": "@pkuwm Thanks! I was under the impression that copy over a map is a thread-safe operation in some languages(python, e.g). I just tried it in Java, it still suffers the same exception. So I believe the right fix & less code change is to make it ConcurrentHashMap. Also added a test for it.", "author": "i3wangyi", "createdAt": "2020-02-21T19:34:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTg0NTk4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjgwNzE0Nw==", "url": "https://github.com/apache/helix/pull/785#discussion_r382807147", "bodyText": "Agreed that ConcurrentHashMap could protect it.", "author": "huizhilu", "createdAt": "2020-02-21T21:10:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTg0NTk4MA=="}], "type": "inlineReview"}, {"oid": "4f6a6ea36041d3a0bd8c45e887a219bc9661742c", "url": "https://github.com/apache/helix/commit/4f6a6ea36041d3a0bd8c45e887a219bc9661742c", "message": "Add the clone method unit test", "committedDate": "2020-02-21T01:51:11Z", "type": "commit"}, {"oid": "4f6a6ea36041d3a0bd8c45e887a219bc9661742c", "url": "https://github.com/apache/helix/commit/4f6a6ea36041d3a0bd8c45e887a219bc9661742c", "message": "Add the clone method unit test", "committedDate": "2020-02-21T01:51:11Z", "type": "forcePushed"}, {"oid": "87185bfb5355d9548005fef3e85222253421fbe1", "url": "https://github.com/apache/helix/commit/87185bfb5355d9548005fef3e85222253421fbe1", "message": "Add the thread-safe clone method and change the map to ConcurrentHashMap", "committedDate": "2020-02-21T19:28:48Z", "type": "commit"}, {"oid": "8e2af2e06dd2c712b03e06ae7623971c487e4437", "url": "https://github.com/apache/helix/commit/8e2af2e06dd2c712b03e06ae7623971c487e4437", "message": "add the CountDownLatch", "committedDate": "2020-02-21T21:08:38Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjgwMzU3MA==", "url": "https://github.com/apache/helix/pull/785#discussion_r382803570", "bodyText": "This is a reasonable test. Maybe to make it more accurate in this test, we can use a CountDownLatch as a signal right before clone().\nlatch.countDown(); // Tell 10 threads to modify this the attributeMap.\nclone();\n\nAnd also add more attributes (say, 20) in each thread just to make the time a bit longer.\nThis CountDownLatch and more attributes make sure that the attribute adding is not completed yet before clone().", "author": "huizhilu", "createdAt": "2020-02-21T21:01:03Z", "path": "helix-core/src/test/java/org/apache/helix/controller/stages/TestClusterEvent.java", "diffHunk": "@@ -19,16 +19,51 @@\n  * under the License.\n  */\n \n+import java.util.ArrayList;\n+import java.util.ConcurrentModificationException;\n+import java.util.List;\n+\n+import org.testng.Assert;\n import org.testng.AssertJUnit;\n import org.testng.annotations.Test;\n \n-@Test\n+\n public class TestClusterEvent {\n+\n   @Test\n-  public void testSimplePutandGet() {\n+  public void testSimplePutAndGet() {\n     ClusterEvent event = new ClusterEvent(ClusterEventType.Unknown);\n     AssertJUnit.assertEquals(event.getEventType(), ClusterEventType.Unknown);\n     event.addAttribute(\"attr1\", \"value\");\n     AssertJUnit.assertEquals(event.getAttribute(\"attr1\"), \"value\");\n   }\n+\n+  @Test\n+  public void testThreadSafeClone() throws InterruptedException {\n+    String clusterName = \"TestCluster\";\n+    ClusterEvent event = new ClusterEvent(clusterName, ClusterEventType.Unknown, \"testId\");\n+    for (int i = 0; i < 100; i++) {\n+      event.addAttribute(String.valueOf(i), i);\n+    }\n+    List<Thread> threads = new ArrayList<>();\n+    for (int i = 0; i < 10; i++) {\n+      threads.add(new Thread(() -> {\n+        String threadName = Thread.currentThread().getName();\n+        event.addAttribute(threadName, threadName);", "originalCommit": "87185bfb5355d9548005fef3e85222253421fbe1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjgxMDQ4MA==", "url": "https://github.com/apache/helix/pull/785#discussion_r382810480", "bodyText": "Actually, one additional thread is good enough if it's adding, say, 100 items into the map. It reduces the cost of thread consumptions by test class.", "author": "i3wangyi", "createdAt": "2020-02-21T21:18:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjgwMzU3MA=="}], "type": "inlineReview"}, {"oid": "8e03bc38c6ab0ed2d1a4669a8c1d25cdd671ddda", "url": "https://github.com/apache/helix/commit/8e03bc38c6ab0ed2d1a4669a8c1d25cdd671ddda", "message": "Use only one thread to update the original clone event", "committedDate": "2020-02-21T21:16:01Z", "type": "commit"}]}