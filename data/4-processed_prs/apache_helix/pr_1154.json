{"pr_number": 1154, "pr_title": "Add initial callback when adding routing table listener", "pr_createdAt": "2020-07-15T16:59:23Z", "pr_url": "https://github.com/apache/helix/pull/1154", "timeline": [{"oid": "f7ade9c1aec3076fd835743ff3caed7bb488a436", "url": "https://github.com/apache/helix/commit/f7ade9c1aec3076fd835743ff3caed7bb488a436", "message": "add init to routing table listener", "committedDate": "2020-07-15T16:50:24Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk2MzE0Nw==", "url": "https://github.com/apache/helix/pull/1154#discussion_r455963147", "bodyText": "This is an initial call when adding listener. The only concern is returning empty data should be a good signal for user? This changes behavior. Some users are relying on the snapshot content. Shall we have a different API that give the option to let user choose it?", "author": "junkaixue", "createdAt": "2020-07-16T17:46:45Z", "path": "helix-core/src/main/java/org/apache/helix/spectator/RoutingTableProvider.java", "diffHunk": "@@ -413,6 +413,31 @@ public void addRoutingTableChangeListener(\n     _routingTableChangeListenerMap.put(routingTableChangeListener, new ListenerContext(context));\n     logger.info(\"Attach RoutingTableProviderChangeListener {}\",\n         routingTableChangeListener.getClass().getName());\n+    if (_sourceDataTypeMap.isEmpty()) {", "originalCommit": "f7ade9c1aec3076fd835743ff3caed7bb488a436", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk2NzM3Mg==", "url": "https://github.com/apache/helix/pull/1154#discussion_r455967372", "bodyText": "I see your concern. There're several customers that wanted this feature. However, it's possible to cause unnecessary callback to other customers. Maybe we have a boolean value in the function, and let customers to determine their usage?", "author": "zhangmeng916", "createdAt": "2020-07-16T17:53:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk2MzE0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk4MTczNQ==", "url": "https://github.com/apache/helix/pull/1154#discussion_r455981735", "bodyText": "Let's not change the API. The other customers can still use this API. But let's have another API and old API call the new API with input value as false (for first time refresh) to guarantee the backward compatible.", "author": "junkaixue", "createdAt": "2020-07-16T18:17:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk2MzE0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk4MzM5OQ==", "url": "https://github.com/apache/helix/pull/1154#discussion_r455983399", "bodyText": "So the users that would like the initial callback will explicitly call the new API?", "author": "zhangmeng916", "createdAt": "2020-07-16T18:20:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk2MzE0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk5MzE0MA==", "url": "https://github.com/apache/helix/pull/1154#discussion_r455993140", "bodyText": "FYI, in Helix Manager, adding the listener will cause the listener to get a \"free\" callback when the callback handler is init. So the requirement here is doing the same for router.\nGiven that saying, if the routing table has not been updated (maybe during the reading) then we return an empty snapshot. In this case, if the router still notifies the listener once the update is done, then we are still good. However, based on the code here, I think we might have a race condition that this notification could be sent later than the proper one. Then user would get the wrong information.\nSo we need a concurrency control here.", "author": "jiajunwang", "createdAt": "2020-07-16T18:37:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk2MzE0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjA2MjI4OA==", "url": "https://github.com/apache/helix/pull/1154#discussion_r456062288", "bodyText": "So the users that would like the initial callback will explicitly call the new API?\n\nYes.", "author": "junkaixue", "createdAt": "2020-07-16T20:36:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk2MzE0Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk5NTQzNA==", "url": "https://github.com/apache/helix/pull/1154#discussion_r455995434", "bodyText": "As Junkai mentioned, I think we need a new interface for the listeners anyway.\nThe current one won't tell the provider which type the listener wants to listen to. So I think we just add a new API so as to add the listeners with the right type.\nIn this case, the old API needs to be deprecated and if user add their listen using this API, we shall just assign it to all the valid types.", "author": "jiajunwang", "createdAt": "2020-07-16T18:41:03Z", "path": "helix-core/src/main/java/org/apache/helix/spectator/RoutingTableProvider.java", "diffHunk": "@@ -413,6 +413,31 @@ public void addRoutingTableChangeListener(\n     _routingTableChangeListenerMap.put(routingTableChangeListener, new ListenerContext(context));\n     logger.info(\"Attach RoutingTableProviderChangeListener {}\",\n         routingTableChangeListener.getClass().getName());\n+    if (_sourceDataTypeMap.isEmpty()) {\n+      routingTableChangeListener.onRoutingTableChange(getRoutingTableSnapshot(), context);\n+    } else {\n+      for (PropertyType propertyType : _sourceDataTypeMap.keySet()) {", "originalCommit": "f7ade9c1aec3076fd835743ff3caed7bb488a436", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjAxODM5NA==", "url": "https://github.com/apache/helix/pull/1154#discussion_r456018394", "bodyText": "Why would we need the type as input? We already put the type in _sourceDataTypeMap when users initialize the routing table provider, right? So we can trigger callback with required type of snapshot.", "author": "zhangmeng916", "createdAt": "2020-07-16T19:22:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk5NTQzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjA0MTUwNQ==", "url": "https://github.com/apache/helix/pull/1154#discussion_r456041505", "bodyText": "For example, this constructor allows the user to create a map of types.\n  public RoutingTableProvider(HelixManager helixManager, Map<PropertyType, List<String>> sourceDataTypeMap) {\n    this(helixManager, sourceDataTypeMap, true, DEFAULT_PERIODIC_REFRESH_INTERVAL);\n  }\n\nBut we don't have a way for the user to specify the listener for different types. So one listener will be triggered multiple times if multiple types are specified.", "author": "jiajunwang", "createdAt": "2020-07-16T19:56:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk5NTQzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYxMDA4Mg==", "url": "https://github.com/apache/helix/pull/1154#discussion_r456610082", "bodyText": "I see your point, so right now although the routing table provider only initialized with certain source data types, users will still get callback on all snapshot change, and they need to filter based on the type to see whether the change is they want. But I think this change is beyond the scope of this PR. It's always a problem after we have multiple types, all the Zookeeper change will trigger callback, if we want to change, we will need to distinguish between different listeners, and the change also needs to be made in notifyRoutingTableChange when we receive a change.\nFor this PR only, we do trigger callback based on types, and user won't get unused callback for those types they don't care. For more general type support for callback, we'll need more changes. Thoughts?", "author": "zhangmeng916", "createdAt": "2020-07-17T18:35:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk5NTQzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYyNzEwNw==", "url": "https://github.com/apache/helix/pull/1154#discussion_r456627107", "bodyText": "I agree this is out of this PR's scope. My main concern is that this PR adds one more place that we need to modify later. It would be great if we have only one method to trigger all onRoutingTableChange calls.", "author": "jiajunwang", "createdAt": "2020-07-17T19:12:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk5NTQzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk0MjEyNQ==", "url": "https://github.com/apache/helix/pull/1154#discussion_r456942125", "bodyText": "Yeah, the onRoutingTableChange is called in both add listener and whenever there is any change triggers it. These two won't be able to be merged, right?", "author": "zhangmeng916", "createdAt": "2020-07-19T18:52:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk5NTQzNA=="}], "type": "inlineReview"}, {"oid": "aec0bc96ae40996a71b313968666b07d677ac8ad", "url": "https://github.com/apache/helix/commit/aec0bc96ae40996a71b313968666b07d677ac8ad", "message": "keep backward compatibility", "committedDate": "2020-07-19T18:49:59Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzEzMTk0Ng==", "url": "https://github.com/apache/helix/pull/1154#discussion_r457131946", "bodyText": "If _sourceDataTypeMap  is not properly initialized in the constructor (if this method gets called before the object is fully initialized), this might throw an NPE. I think we should add a null check here on the map. This will guard against potential concurrency issues (that would be pretty hard to debug but might happen regardless).", "author": "narendly", "createdAt": "2020-07-20T07:31:44Z", "path": "helix-core/src/main/java/org/apache/helix/spectator/RoutingTableProvider.java", "diffHunk": "@@ -403,16 +403,55 @@ public RoutingTableSnapshot getRoutingTableSnapshot(PropertyType propertyType, S\n     return snapshots;\n   }\n \n+\n   /**\n    * Add RoutingTableChangeListener with user defined context\n    * @param routingTableChangeListener\n    * @param context user defined context\n    */\n   public void addRoutingTableChangeListener(\n       final RoutingTableChangeListener routingTableChangeListener, Object context) {\n+    addRoutingTableChangeListener(routingTableChangeListener, context, false);\n+  }\n+\n+  /**\n+   * Add RoutingTableChangeListener with user defined context\n+   * @param routingTableChangeListener\n+   * @param context user defined context\n+   * @param doInit whether to trigger the initial callback during adding listener\n+   */\n+  public void addRoutingTableChangeListener(\n+      final RoutingTableChangeListener routingTableChangeListener, Object context, boolean doInit) {\n     _routingTableChangeListenerMap.put(routingTableChangeListener, new ListenerContext(context));\n     logger.info(\"Attach RoutingTableProviderChangeListener {}\",\n         routingTableChangeListener.getClass().getName());\n+    if (doInit) {\n+      if (_sourceDataTypeMap.isEmpty()) {", "originalCommit": "aec0bc96ae40996a71b313968666b07d677ac8ad", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzUyMTU1OA==", "url": "https://github.com/apache/helix/pull/1154#discussion_r457521558", "bodyText": "I added the null check. Just to make sure, you're concerning the race condition between add routing table listener and the routing table provider construction?", "author": "zhangmeng916", "createdAt": "2020-07-20T16:00:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzEzMTk0Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTMzMTc1Mw==", "url": "https://github.com/apache/helix/pull/1154#discussion_r459331753", "bodyText": "Just two cents: maybe I am wrong but I don't think it could happen: if this method gets called before the object is fully initialized. The object should already be fully initialized when we are able to call this method: table.addRoutingTableChangeListener().\nIt is a still good point to check null. By checking the code, I think the only situation when _sourceDataTypeMap is null is, constructor public RoutingTableProvider(HelixManager helixManager, Map<PropertyType, List<String>> sourceDataTypeMap, boolean isPeriodicRefreshEnabled, long periodRefreshInterval) is directly called and sourceDataTypeMap is passed as null.\nIn this case, we should validate the arguments in the constructor instead of in this method: there are many other places that call _sourceDataMap. It is not a good idea to do every null check for class variables in each method. Since we already have validateSourceDataTypeMap() but it doesn't check null for validateSourceDataTypeMap, I think we should add the check to validateSourceDataTypeMap() instead of here.\nif (sourceDataTypeMap == null) {\n    throw new IllegalArgumentException();\n}", "author": "huizhilu", "createdAt": "2020-07-23T09:43:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzEzMTk0Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDY0ODQ3Nw==", "url": "https://github.com/apache/helix/pull/1154#discussion_r460648477", "bodyText": "@pkuwm I think it makes sense. @narendly could you please let us know when it is possible that adding the listener happens before routing table provider is fully initialized.", "author": "zhangmeng916", "createdAt": "2020-07-27T05:04:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzEzMTk0Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjA3MDI0Mg==", "url": "https://github.com/apache/helix/pull/1154#discussion_r462070242", "bodyText": "You could read this article: https://stackoverflow.com/questions/24367472/is-an-object-created-first-and-then-its-constructor-executed. Pay attention to point 4 - although taking a closer look, I don't think this leaks itself as this. We actually see this in the commit: ff0485b", "author": "narendly", "createdAt": "2020-07-29T06:36:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzEzMTk0Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzMwNjQ5NA==", "url": "https://github.com/apache/helix/pull/1154#discussion_r463306494", "bodyText": "Thanks for the information. Didn't know this before.", "author": "zhangmeng916", "createdAt": "2020-07-30T22:28:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzEzMTk0Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDAxMzEwMQ==", "url": "https://github.com/apache/helix/pull/1154#discussion_r464013101", "bodyText": "@zhangmeng916  Then are we checking null for sourceMap in validateSourceDataTypeMap?", "author": "huizhilu", "createdAt": "2020-08-02T00:10:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzEzMTk0Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDIxNzQwOA==", "url": "https://github.com/apache/helix/pull/1154#discussion_r464217408", "bodyText": "Sorry if my comment wasn't clear. What I was saying was since RoutingTableProvider doesn't give away its own reference and doesn't implement RoutingTableChangeListener, we probably don't have to worry about this and we shouldn't have to add a null check here. I think it should be okay as is :)", "author": "narendly", "createdAt": "2020-08-03T06:29:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzEzMTk0Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzEzNDI5NQ==", "url": "https://github.com/apache/helix/pull/1154#discussion_r457134295", "bodyText": "This is a high-level question. Have we considered doing init as the default behavior? Here are the reasons I can think off the top of my head:\n\n\nIt doesn't hurt to init (what are the bad side effects of reading in the beginning? If the user wishes to add a listener, that means the user is ready to read and be notified). In other words, I can't think of any negative consequences of this behavior change or any potential backward-compatibility issues that might break things.\n\n\nThis greatly reduces verbosity in the code. Simple is better.", "author": "narendly", "createdAt": "2020-07-20T07:35:21Z", "path": "helix-core/src/main/java/org/apache/helix/spectator/RoutingTableProvider.java", "diffHunk": "@@ -403,16 +403,55 @@ public RoutingTableSnapshot getRoutingTableSnapshot(PropertyType propertyType, S\n     return snapshots;\n   }\n \n+\n   /**\n    * Add RoutingTableChangeListener with user defined context\n    * @param routingTableChangeListener\n    * @param context user defined context\n    */\n   public void addRoutingTableChangeListener(\n       final RoutingTableChangeListener routingTableChangeListener, Object context) {\n+    addRoutingTableChangeListener(routingTableChangeListener, context, false);\n+  }\n+\n+  /**\n+   * Add RoutingTableChangeListener with user defined context\n+   * @param routingTableChangeListener\n+   * @param context user defined context\n+   * @param doInit whether to trigger the initial callback during adding listener\n+   */\n+  public void addRoutingTableChangeListener(", "originalCommit": "aec0bc96ae40996a71b313968666b07d677ac8ad", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzUyMDg4Mg==", "url": "https://github.com/apache/helix/pull/1154#discussion_r457520882", "bodyText": "@dasahcc had some concerns that if users are not expecting an empty snapshot, and the initial callback provides them such, they may not have a way to handle it yet.", "author": "zhangmeng916", "createdAt": "2020-07-20T15:59:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzEzNDI5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjA3MTE1MQ==", "url": "https://github.com/apache/helix/pull/1154#discussion_r462071151", "bodyText": "I'm not quite seeing that - applications should program in a way that expects some data in the snapshot, right? Their logic shouldn't try to \"time it\" in their callback logic since that's never predictable.", "author": "narendly", "createdAt": "2020-07-29T06:38:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzEzNDI5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDUyMzkxNw==", "url": "https://github.com/apache/helix/pull/1154#discussion_r464523917", "bodyText": "let's quickly sync offline.", "author": "zhangmeng916", "createdAt": "2020-08-03T16:29:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzEzNDI5NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjAwMDMxMg==", "url": "https://github.com/apache/helix/pull/1154#discussion_r456000312", "bodyText": "Nit, no need to have ()", "author": "huizhilu", "createdAt": "2020-07-16T18:50:07Z", "path": "helix-core/src/test/java/org/apache/helix/integration/spectator/TestRoutingTableProvider.java", "diffHunk": "@@ -178,7 +182,18 @@ public void afterClass() {\n     deleteCluster(CLUSTER_NAME);\n   }\n \n-  @Test\n+  @Test()", "originalCommit": "f7ade9c1aec3076fd835743ff3caed7bb488a436", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjAwMTI3Mw==", "url": "https://github.com/apache/helix/pull/1154#discussion_r456001273", "bodyText": "Assert.assertTrue? So no need to import AssertJUnit.", "author": "huizhilu", "createdAt": "2020-07-16T18:51:48Z", "path": "helix-core/src/test/java/org/apache/helix/integration/spectator/TestRoutingTableProvider.java", "diffHunk": "@@ -178,7 +182,18 @@ public void afterClass() {\n     deleteCluster(CLUSTER_NAME);\n   }\n \n-  @Test\n+  @Test()\n+  public void testInvocation() throws Exception {\n+    MockRoutingTableChangeListener routingTableChangeListener =\n+        new TestRoutingTableProvider().new MockRoutingTableChangeListener();\n+    _routingTableProvider_default.addRoutingTableChangeListener(routingTableChangeListener, null);\n+\n+    // Initial add listener should trigger the first execution of the\n+    // listener callbacks\n+    AssertJUnit.assertTrue(routingTableChangeListener.routingTableChangeReceived);", "originalCommit": "f7ade9c1aec3076fd835743ff3caed7bb488a436", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTMyMjA0MQ==", "url": "https://github.com/apache/helix/pull/1154#discussion_r459322041", "bodyText": "new TestRoutingTableProvider() is unnecessary?", "author": "huizhilu", "createdAt": "2020-07-23T09:24:51Z", "path": "helix-core/src/test/java/org/apache/helix/integration/spectator/TestRoutingTableProvider.java", "diffHunk": "@@ -178,7 +182,19 @@ public void afterClass() {\n     deleteCluster(CLUSTER_NAME);\n   }\n \n-  @Test\n+  @Test()\n+  public void testInvocation() throws Exception {\n+    MockRoutingTableChangeListener routingTableChangeListener =\n+        new TestRoutingTableProvider().new MockRoutingTableChangeListener();", "originalCommit": "08e127d30cb83ec095fffd7b8cf43945d5ea710b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTMzNDI2NA==", "url": "https://github.com/apache/helix/pull/1154#discussion_r459334264", "bodyText": "Maybe also add doInit value in the log?", "author": "huizhilu", "createdAt": "2020-07-23T09:48:01Z", "path": "helix-core/src/main/java/org/apache/helix/spectator/RoutingTableProvider.java", "diffHunk": "@@ -403,16 +403,55 @@ public RoutingTableSnapshot getRoutingTableSnapshot(PropertyType propertyType, S\n     return snapshots;\n   }\n \n+\n   /**\n    * Add RoutingTableChangeListener with user defined context\n    * @param routingTableChangeListener\n    * @param context user defined context\n    */\n   public void addRoutingTableChangeListener(\n       final RoutingTableChangeListener routingTableChangeListener, Object context) {\n+    addRoutingTableChangeListener(routingTableChangeListener, context, false);\n+  }\n+\n+  /**\n+   * Add RoutingTableChangeListener with user defined context\n+   * @param routingTableChangeListener\n+   * @param context user defined context\n+   * @param doInit whether to trigger the initial callback during adding listener\n+   */\n+  public void addRoutingTableChangeListener(\n+      final RoutingTableChangeListener routingTableChangeListener, Object context, boolean doInit) {\n     _routingTableChangeListenerMap.put(routingTableChangeListener, new ListenerContext(context));\n     logger.info(\"Attach RoutingTableProviderChangeListener {}\",\n         routingTableChangeListener.getClass().getName());\n+    if (doInit && _sourceDataTypeMap != null) {", "originalCommit": "08e127d30cb83ec095fffd7b8cf43945d5ea710b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "b0f99b3b0f435b18398e4fd229284146255808cc", "url": "https://github.com/apache/helix/commit/b0f99b3b0f435b18398e4fd229284146255808cc", "message": "fix comment", "committedDate": "2020-07-27T05:05:08Z", "type": "forcePushed"}, {"oid": "b02ee6345f8b0fa197085315fc9673edfe351931", "url": "https://github.com/apache/helix/commit/b02ee6345f8b0fa197085315fc9673edfe351931", "message": "add refresh", "committedDate": "2020-09-24T00:19:42Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDU3NTY0Mg==", "url": "https://github.com/apache/helix/pull/1154#discussion_r494575642", "bodyText": "nit, will \"doTriggerCallback\" easier to read from the users' perspective?", "author": "jiajunwang", "createdAt": "2020-09-24T19:57:34Z", "path": "helix-core/src/main/java/org/apache/helix/spectator/RoutingTableProvider.java", "diffHunk": "@@ -403,16 +407,35 @@ public RoutingTableSnapshot getRoutingTableSnapshot(PropertyType propertyType, S\n     return snapshots;\n   }\n \n+\n   /**\n    * Add RoutingTableChangeListener with user defined context\n    * @param routingTableChangeListener\n    * @param context user defined context\n    */\n   public void addRoutingTableChangeListener(\n       final RoutingTableChangeListener routingTableChangeListener, Object context) {\n+    addRoutingTableChangeListener(routingTableChangeListener, context, false);\n+  }\n+\n+  /**\n+   * Add RoutingTableChangeListener with user defined context\n+   * @param routingTableChangeListener\n+   * @param context user defined context\n+   * @param doInit whether to trigger the initial callback during adding listener", "originalCommit": "b02ee6345f8b0fa197085315fc9673edfe351931", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDU3OTgyOA==", "url": "https://github.com/apache/helix/pull/1154#discussion_r494579828", "bodyText": "nit, we can split \"The doInit value of this listener is {}\" part. And move it into the \"if\" code block below. Might be cleaner.", "author": "jiajunwang", "createdAt": "2020-09-24T20:05:42Z", "path": "helix-core/src/main/java/org/apache/helix/spectator/RoutingTableProvider.java", "diffHunk": "@@ -403,16 +407,35 @@ public RoutingTableSnapshot getRoutingTableSnapshot(PropertyType propertyType, S\n     return snapshots;\n   }\n \n+\n   /**\n    * Add RoutingTableChangeListener with user defined context\n    * @param routingTableChangeListener\n    * @param context user defined context\n    */\n   public void addRoutingTableChangeListener(\n       final RoutingTableChangeListener routingTableChangeListener, Object context) {\n+    addRoutingTableChangeListener(routingTableChangeListener, context, false);\n+  }\n+\n+  /**\n+   * Add RoutingTableChangeListener with user defined context\n+   * @param routingTableChangeListener\n+   * @param context user defined context\n+   * @param doInit whether to trigger the initial callback during adding listener\n+   */\n+  public void addRoutingTableChangeListener(\n+      final RoutingTableChangeListener routingTableChangeListener, Object context, boolean doInit) {\n     _routingTableChangeListenerMap.put(routingTableChangeListener, new ListenerContext(context));\n-    logger.info(\"Attach RoutingTableProviderChangeListener {}\",\n-        routingTableChangeListener.getClass().getName());\n+    logger.info(\n+        \"Attach RoutingTableProviderChangeListener {}. The doInit value of this listener is {}\",", "originalCommit": "b02ee6345f8b0fa197085315fc9673edfe351931", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "be6b36ad264a82409ddda814d4d6aa9041577950", "url": "https://github.com/apache/helix/commit/be6b36ad264a82409ddda814d4d6aa9041577950", "message": "add init to routing table listener", "committedDate": "2020-09-24T20:31:50Z", "type": "commit"}, {"oid": "7c65731a9dbfc8e4586c6373c281c50f3d0befeb", "url": "https://github.com/apache/helix/commit/7c65731a9dbfc8e4586c6373c281c50f3d0befeb", "message": "keep backward compatibility", "committedDate": "2020-09-24T20:31:50Z", "type": "commit"}, {"oid": "74baf8d224fe2f9e7defd11681cff8b0878386ae", "url": "https://github.com/apache/helix/commit/74baf8d224fe2f9e7defd11681cff8b0878386ae", "message": "null checking", "committedDate": "2020-09-24T20:31:50Z", "type": "commit"}, {"oid": "f18aa14a44e0ab700278d9c7716137c2dd3cc923", "url": "https://github.com/apache/helix/commit/f18aa14a44e0ab700278d9c7716137c2dd3cc923", "message": "fix comment", "committedDate": "2020-09-24T20:31:50Z", "type": "commit"}, {"oid": "4f9f279f2ca590f08ea67f86776b80cdc72941dd", "url": "https://github.com/apache/helix/commit/4f9f279f2ca590f08ea67f86776b80cdc72941dd", "message": "move null checking", "committedDate": "2020-09-24T20:31:50Z", "type": "commit"}, {"oid": "295f712bb1465cd716f151709103cab559f95da4", "url": "https://github.com/apache/helix/commit/295f712bb1465cd716f151709103cab559f95da4", "message": "add refresh", "committedDate": "2020-09-24T20:31:50Z", "type": "commit"}, {"oid": "1262d044678f4713f1fca987f313a28ce8a2403c", "url": "https://github.com/apache/helix/commit/1262d044678f4713f1fca987f313a28ce8a2403c", "message": "fix name", "committedDate": "2020-09-24T20:31:50Z", "type": "forcePushed"}, {"oid": "53c62e640a88552926006b4db742409fb7ff4aea", "url": "https://github.com/apache/helix/commit/53c62e640a88552926006b4db742409fb7ff4aea", "message": "fix name", "committedDate": "2020-09-24T20:36:52Z", "type": "commit"}, {"oid": "53c62e640a88552926006b4db742409fb7ff4aea", "url": "https://github.com/apache/helix/commit/53c62e640a88552926006b4db742409fb7ff4aea", "message": "fix name", "committedDate": "2020-09-24T20:36:52Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDY3NDUyMw==", "url": "https://github.com/apache/helix/pull/1154#discussion_r494674523", "bodyText": "What I meant is that we can log something like \"Force triggering a callback for the new listener\" here. So the log does not care about the name of the parameter \"isTriggerCallback\".", "author": "jiajunwang", "createdAt": "2020-09-25T00:02:43Z", "path": "helix-core/src/main/java/org/apache/helix/spectator/RoutingTableProvider.java", "diffHunk": "@@ -403,16 +407,35 @@ public RoutingTableSnapshot getRoutingTableSnapshot(PropertyType propertyType, S\n     return snapshots;\n   }\n \n+\n   /**\n    * Add RoutingTableChangeListener with user defined context\n    * @param routingTableChangeListener\n    * @param context user defined context\n    */\n   public void addRoutingTableChangeListener(\n       final RoutingTableChangeListener routingTableChangeListener, Object context) {\n+    addRoutingTableChangeListener(routingTableChangeListener, context, false);\n+  }\n+\n+  /**\n+   * Add RoutingTableChangeListener with user defined context\n+   * @param routingTableChangeListener\n+   * @param context user defined context\n+   * @param isTriggerCallback whether to trigger the initial callback during adding listener\n+   */\n+  public void addRoutingTableChangeListener(\n+      final RoutingTableChangeListener routingTableChangeListener, Object context,\n+      boolean isTriggerCallback) {\n     _routingTableChangeListenerMap.put(routingTableChangeListener, new ListenerContext(context));\n-    logger.info(\"Attach RoutingTableProviderChangeListener {}\",\n-        routingTableChangeListener.getClass().getName());\n+    logger.info(\"Attach RoutingTableProviderChangeListener {}.\",\n+        routingTableChangeListener.getClass().getName(), isTriggerCallback);\n+    if (isTriggerCallback) {\n+      logger.info(\"The isTriggerCallback value for the listener is true\");", "originalCommit": "53c62e640a88552926006b4db742409fb7ff4aea", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDY3NDU0MA==", "url": "https://github.com/apache/helix/pull/1154#discussion_r494674540", "bodyText": "nit, remove the isTriggerCallback that is not used in the log.", "author": "jiajunwang", "createdAt": "2020-09-25T00:02:47Z", "path": "helix-core/src/main/java/org/apache/helix/spectator/RoutingTableProvider.java", "diffHunk": "@@ -403,16 +407,35 @@ public RoutingTableSnapshot getRoutingTableSnapshot(PropertyType propertyType, S\n     return snapshots;\n   }\n \n+\n   /**\n    * Add RoutingTableChangeListener with user defined context\n    * @param routingTableChangeListener\n    * @param context user defined context\n    */\n   public void addRoutingTableChangeListener(\n       final RoutingTableChangeListener routingTableChangeListener, Object context) {\n+    addRoutingTableChangeListener(routingTableChangeListener, context, false);\n+  }\n+\n+  /**\n+   * Add RoutingTableChangeListener with user defined context\n+   * @param routingTableChangeListener\n+   * @param context user defined context\n+   * @param isTriggerCallback whether to trigger the initial callback during adding listener\n+   */\n+  public void addRoutingTableChangeListener(\n+      final RoutingTableChangeListener routingTableChangeListener, Object context,\n+      boolean isTriggerCallback) {\n     _routingTableChangeListenerMap.put(routingTableChangeListener, new ListenerContext(context));\n-    logger.info(\"Attach RoutingTableProviderChangeListener {}\",\n-        routingTableChangeListener.getClass().getName());\n+    logger.info(\"Attach RoutingTableProviderChangeListener {}.\",\n+        routingTableChangeListener.getClass().getName(), isTriggerCallback);", "originalCommit": "53c62e640a88552926006b4db742409fb7ff4aea", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "e9178ab0c52b1f09bc83ae75801971e3aed4390b", "url": "https://github.com/apache/helix/commit/e9178ab0c52b1f09bc83ae75801971e3aed4390b", "message": "fix log", "committedDate": "2020-09-25T00:09:42Z", "type": "commit"}]}