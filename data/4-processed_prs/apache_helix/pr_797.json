{"pr_number": 797, "pr_title": "Add REST API to add, remove and update CustomizedStateAggregationConfig", "pr_createdAt": "2020-02-22T00:16:54Z", "pr_url": "https://github.com/apache/helix/pull/797", "timeline": [{"oid": "86254ba5ef03cd1e1c08084bb4966d97fab33150", "url": "https://github.com/apache/helix/commit/86254ba5ef03cd1e1c08084bb4966d97fab33150", "message": "Add REST API to add, remove and update CustomizedStateAggregationConfig\n\nIn this commit the below REST APIs have been added.\n1- addCustomizedStateAggregationConfig\n2- removeCustomizedStateAggregationConfig\n3- getCustomizedStateAggregationConfig\n4- updateCustomizedStateAggregationConfig\nTests have been added to check the functionality of these REST APIs.\nAlso some of the depricated calls have been updated.", "committedDate": "2020-02-21T23:16:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg3MTM0Mw==", "url": "https://github.com/apache/helix/pull/797#discussion_r382871343", "bodyText": "This endpoint name is so difficult to read/write. Can you change it to snake-case: customized-state-xxx?", "author": "huizhilu", "createdAt": "2020-02-22T01:15:46Z", "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/ClusterAccessor.java", "diffHunk": "@@ -267,6 +268,129 @@ public Response getClusterConfig(@PathParam(\"clusterId\") String clusterId) {\n     return JSONRepresentation(config.getRecord());\n   }\n \n+\n+  @PUT\n+  @Path(\"{clusterId}/customizedstateaggregationconfig\")", "originalCommit": "86254ba5ef03cd1e1c08084bb4966d97fab33150", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjk1NTUzMQ==", "url": "https://github.com/apache/helix/pull/797#discussion_r382955531", "bodyText": "Fixed.", "author": "alirezazamani", "createdAt": "2020-02-23T01:36:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg3MTM0Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg3MjQ4Ng==", "url": "https://github.com/apache/helix/pull/797#discussion_r382872486", "bodyText": "For this exception, is it caused by a server error or a client error? It is good to make sure the response status code is appropriate.", "author": "huizhilu", "createdAt": "2020-02-22T01:26:10Z", "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/ClusterAccessor.java", "diffHunk": "@@ -267,6 +268,129 @@ public Response getClusterConfig(@PathParam(\"clusterId\") String clusterId) {\n     return JSONRepresentation(config.getRecord());\n   }\n \n+\n+  @PUT\n+  @Path(\"{clusterId}/customizedstateaggregationconfig\")\n+  public Response addCustomizedStateAggregationConfig(@PathParam(\"clusterId\") String clusterId,\n+      String content) {\n+    HelixZkClient zkClient = getHelixZkClient();\n+    if (!ZKUtil.isClusterSetup(clusterId, zkClient)) {\n+      return notFound(\"Cluster is not properly setup!\");\n+    }\n+\n+    HelixAdmin admin = getHelixAdmin();\n+    ZNRecord record;\n+    try {\n+      record = toZNRecord(content);\n+    } catch (IOException e) {\n+      _logger.error(\"Failed to deserialize user's input \" + content + \", Exception: \" + e);\n+      return badRequest(\"Input is not a vaild ZNRecord!\");\n+    }\n+\n+    try {\n+      CustomizedStateAggregationConfig customizedStateAggregationConfig =\n+          new CustomizedStateAggregationConfig.Builder(record).build();\n+      admin.addCustomizedStateAggregationConfig(clusterId, customizedStateAggregationConfig);\n+    } catch (HelixException ex) {\n+      _logger.error(\"Error in adding a CustomizedStateAggregationConfig to cluster: \" + clusterId,\n+          ex);\n+      return badRequest(ex.getMessage());", "originalCommit": "86254ba5ef03cd1e1c08084bb4966d97fab33150", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjk1NTUyNg==", "url": "https://github.com/apache/helix/pull/797#discussion_r382955526", "bodyText": "Actually this exception is not needed. Removed it.", "author": "alirezazamani", "createdAt": "2020-02-23T01:36:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg3MjQ4Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg3MjY1OQ==", "url": "https://github.com/apache/helix/pull/797#discussion_r382872659", "bodyText": "I would remove {} for case blocks.", "author": "huizhilu", "createdAt": "2020-02-22T01:27:52Z", "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/ClusterAccessor.java", "diffHunk": "@@ -267,6 +268,129 @@ public Response getClusterConfig(@PathParam(\"clusterId\") String clusterId) {\n     return JSONRepresentation(config.getRecord());\n   }\n \n+\n+  @PUT\n+  @Path(\"{clusterId}/customizedstateaggregationconfig\")\n+  public Response addCustomizedStateAggregationConfig(@PathParam(\"clusterId\") String clusterId,\n+      String content) {\n+    HelixZkClient zkClient = getHelixZkClient();\n+    if (!ZKUtil.isClusterSetup(clusterId, zkClient)) {\n+      return notFound(\"Cluster is not properly setup!\");\n+    }\n+\n+    HelixAdmin admin = getHelixAdmin();\n+    ZNRecord record;\n+    try {\n+      record = toZNRecord(content);\n+    } catch (IOException e) {\n+      _logger.error(\"Failed to deserialize user's input \" + content + \", Exception: \" + e);\n+      return badRequest(\"Input is not a vaild ZNRecord!\");\n+    }\n+\n+    try {\n+      CustomizedStateAggregationConfig customizedStateAggregationConfig =\n+          new CustomizedStateAggregationConfig.Builder(record).build();\n+      admin.addCustomizedStateAggregationConfig(clusterId, customizedStateAggregationConfig);\n+    } catch (HelixException ex) {\n+      _logger.error(\"Error in adding a CustomizedStateAggregationConfig to cluster: \" + clusterId,\n+          ex);\n+      return badRequest(ex.getMessage());\n+    } catch (Exception ex) {\n+      _logger.error(\"Cannot add CustomizedStateAggregationConfig to cluster: \" + clusterId, ex);\n+      return serverError(ex);\n+    }\n+\n+    return OK();\n+  }\n+\n+  @DELETE\n+  @Path(\"{clusterId}/customizedstateaggregationconfig\")\n+  public Response removeCustomizedStateAggregationConfig(@PathParam(\"clusterId\") String clusterId) {\n+    HelixZkClient zkClient = getHelixZkClient();\n+    if (!ZKUtil.isClusterSetup(clusterId, zkClient)) {\n+      return notFound(\"Cluster is not properly setup!\");\n+    }\n+\n+    HelixAdmin admin = getHelixAdmin();\n+    try {\n+      admin.removeCustomizedStateAggregationConfig(clusterId);\n+    } catch (HelixException ex) {\n+      _logger.error(\"Error in removing CustomizedStateAggregationConfig to cluster: \" + clusterId,\n+          ex);\n+      return badRequest(ex.getMessage());\n+    } catch (Exception ex) {\n+      _logger.error(\"Cannot remove CustomizedStateAggregationConfig to cluster: \" + clusterId, ex);\n+      return serverError(ex);\n+    }\n+\n+    return OK();\n+  }\n+\n+  @GET\n+  @Path(\"{clusterId}/customizedstateaggregationconfig\")\n+  public Response getCustomizedStateAggregationConfig(@PathParam(\"clusterId\") String clusterId) {\n+    HelixZkClient zkClient = getHelixZkClient();\n+    if (!ZKUtil.isClusterSetup(clusterId, zkClient)) {\n+      return notFound();\n+    }\n+\n+    ConfigAccessor configAccessor = getConfigAccessor();\n+    CustomizedStateAggregationConfig customizedStateAggregationConfig =\n+        configAccessor.getCustomizedStateAggregationConfig(clusterId);\n+\n+    if (customizedStateAggregationConfig != null) {\n+      return JSONRepresentation(customizedStateAggregationConfig.getRecord());\n+    }\n+\n+    return notFound();\n+  }\n+\n+  @POST\n+  @Path(\"{clusterId}/customizedstateaggregationconfig\")\n+  public Response updateCustomizedStateAggregationConfig(@PathParam(\"clusterId\") String clusterId,\n+      @QueryParam(\"command\") String commandStr, @QueryParam(\"type\") String type) {\n+\n+    HelixZkClient zkClient = getHelixZkClient();\n+    if (!ZKUtil.isClusterSetup(clusterId, zkClient)) {\n+      return notFound();\n+    }\n+\n+    // Here to update cloud config\n+    Command command;\n+    if (commandStr == null || commandStr.isEmpty()) {\n+      command = Command.update; // Default behavior\n+    } else {\n+      try {\n+        command = getCommand(commandStr);\n+      } catch (HelixException ex) {\n+        return badRequest(ex.getMessage());\n+      }\n+    }\n+\n+    HelixAdmin admin = getHelixAdmin();\n+\n+    try {\n+      switch (command) {\n+      case delete: {", "originalCommit": "86254ba5ef03cd1e1c08084bb4966d97fab33150", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjk1NTUyMg==", "url": "https://github.com/apache/helix/pull/797#discussion_r382955522", "bodyText": "Done.", "author": "alirezazamani", "createdAt": "2020-02-23T01:36:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg3MjY1OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg3MjcyMQ==", "url": "https://github.com/apache/helix/pull/797#discussion_r382872721", "bodyText": "No need for else.", "author": "huizhilu", "createdAt": "2020-02-22T01:28:20Z", "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/ClusterAccessor.java", "diffHunk": "@@ -267,6 +268,129 @@ public Response getClusterConfig(@PathParam(\"clusterId\") String clusterId) {\n     return JSONRepresentation(config.getRecord());\n   }\n \n+\n+  @PUT\n+  @Path(\"{clusterId}/customizedstateaggregationconfig\")\n+  public Response addCustomizedStateAggregationConfig(@PathParam(\"clusterId\") String clusterId,\n+      String content) {\n+    HelixZkClient zkClient = getHelixZkClient();\n+    if (!ZKUtil.isClusterSetup(clusterId, zkClient)) {\n+      return notFound(\"Cluster is not properly setup!\");\n+    }\n+\n+    HelixAdmin admin = getHelixAdmin();\n+    ZNRecord record;\n+    try {\n+      record = toZNRecord(content);\n+    } catch (IOException e) {\n+      _logger.error(\"Failed to deserialize user's input \" + content + \", Exception: \" + e);\n+      return badRequest(\"Input is not a vaild ZNRecord!\");\n+    }\n+\n+    try {\n+      CustomizedStateAggregationConfig customizedStateAggregationConfig =\n+          new CustomizedStateAggregationConfig.Builder(record).build();\n+      admin.addCustomizedStateAggregationConfig(clusterId, customizedStateAggregationConfig);\n+    } catch (HelixException ex) {\n+      _logger.error(\"Error in adding a CustomizedStateAggregationConfig to cluster: \" + clusterId,\n+          ex);\n+      return badRequest(ex.getMessage());\n+    } catch (Exception ex) {\n+      _logger.error(\"Cannot add CustomizedStateAggregationConfig to cluster: \" + clusterId, ex);\n+      return serverError(ex);\n+    }\n+\n+    return OK();\n+  }\n+\n+  @DELETE\n+  @Path(\"{clusterId}/customizedstateaggregationconfig\")\n+  public Response removeCustomizedStateAggregationConfig(@PathParam(\"clusterId\") String clusterId) {\n+    HelixZkClient zkClient = getHelixZkClient();\n+    if (!ZKUtil.isClusterSetup(clusterId, zkClient)) {\n+      return notFound(\"Cluster is not properly setup!\");\n+    }\n+\n+    HelixAdmin admin = getHelixAdmin();\n+    try {\n+      admin.removeCustomizedStateAggregationConfig(clusterId);\n+    } catch (HelixException ex) {\n+      _logger.error(\"Error in removing CustomizedStateAggregationConfig to cluster: \" + clusterId,\n+          ex);\n+      return badRequest(ex.getMessage());\n+    } catch (Exception ex) {\n+      _logger.error(\"Cannot remove CustomizedStateAggregationConfig to cluster: \" + clusterId, ex);\n+      return serverError(ex);\n+    }\n+\n+    return OK();\n+  }\n+\n+  @GET\n+  @Path(\"{clusterId}/customizedstateaggregationconfig\")\n+  public Response getCustomizedStateAggregationConfig(@PathParam(\"clusterId\") String clusterId) {\n+    HelixZkClient zkClient = getHelixZkClient();\n+    if (!ZKUtil.isClusterSetup(clusterId, zkClient)) {\n+      return notFound();\n+    }\n+\n+    ConfigAccessor configAccessor = getConfigAccessor();\n+    CustomizedStateAggregationConfig customizedStateAggregationConfig =\n+        configAccessor.getCustomizedStateAggregationConfig(clusterId);\n+\n+    if (customizedStateAggregationConfig != null) {\n+      return JSONRepresentation(customizedStateAggregationConfig.getRecord());\n+    }\n+\n+    return notFound();\n+  }\n+\n+  @POST\n+  @Path(\"{clusterId}/customizedstateaggregationconfig\")\n+  public Response updateCustomizedStateAggregationConfig(@PathParam(\"clusterId\") String clusterId,\n+      @QueryParam(\"command\") String commandStr, @QueryParam(\"type\") String type) {\n+\n+    HelixZkClient zkClient = getHelixZkClient();\n+    if (!ZKUtil.isClusterSetup(clusterId, zkClient)) {\n+      return notFound();\n+    }\n+\n+    // Here to update cloud config\n+    Command command;\n+    if (commandStr == null || commandStr.isEmpty()) {\n+      command = Command.update; // Default behavior\n+    } else {", "originalCommit": "86254ba5ef03cd1e1c08084bb4966d97fab33150", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjk1NTUxOQ==", "url": "https://github.com/apache/helix/pull/797#discussion_r382955519", "bodyText": "It is needed. If commandStr == null or commandStr.isEmpty() then we want to continued with the request and use update as default. We do not want to return badRequest.", "author": "alirezazamani", "createdAt": "2020-02-23T01:35:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg3MjcyMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg3Mjg1Nw==", "url": "https://github.com/apache/helix/pull/797#discussion_r382872857", "bodyText": "I would suggest adding an error message to the response.", "author": "huizhilu", "createdAt": "2020-02-22T01:29:31Z", "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/ClusterAccessor.java", "diffHunk": "@@ -267,6 +268,129 @@ public Response getClusterConfig(@PathParam(\"clusterId\") String clusterId) {\n     return JSONRepresentation(config.getRecord());\n   }\n \n+\n+  @PUT\n+  @Path(\"{clusterId}/customizedstateaggregationconfig\")\n+  public Response addCustomizedStateAggregationConfig(@PathParam(\"clusterId\") String clusterId,\n+      String content) {\n+    HelixZkClient zkClient = getHelixZkClient();\n+    if (!ZKUtil.isClusterSetup(clusterId, zkClient)) {\n+      return notFound(\"Cluster is not properly setup!\");\n+    }\n+\n+    HelixAdmin admin = getHelixAdmin();\n+    ZNRecord record;\n+    try {\n+      record = toZNRecord(content);\n+    } catch (IOException e) {\n+      _logger.error(\"Failed to deserialize user's input \" + content + \", Exception: \" + e);\n+      return badRequest(\"Input is not a vaild ZNRecord!\");\n+    }\n+\n+    try {\n+      CustomizedStateAggregationConfig customizedStateAggregationConfig =\n+          new CustomizedStateAggregationConfig.Builder(record).build();\n+      admin.addCustomizedStateAggregationConfig(clusterId, customizedStateAggregationConfig);\n+    } catch (HelixException ex) {\n+      _logger.error(\"Error in adding a CustomizedStateAggregationConfig to cluster: \" + clusterId,\n+          ex);\n+      return badRequest(ex.getMessage());\n+    } catch (Exception ex) {\n+      _logger.error(\"Cannot add CustomizedStateAggregationConfig to cluster: \" + clusterId, ex);\n+      return serverError(ex);\n+    }\n+\n+    return OK();\n+  }\n+\n+  @DELETE\n+  @Path(\"{clusterId}/customizedstateaggregationconfig\")\n+  public Response removeCustomizedStateAggregationConfig(@PathParam(\"clusterId\") String clusterId) {\n+    HelixZkClient zkClient = getHelixZkClient();\n+    if (!ZKUtil.isClusterSetup(clusterId, zkClient)) {\n+      return notFound(\"Cluster is not properly setup!\");\n+    }\n+\n+    HelixAdmin admin = getHelixAdmin();\n+    try {\n+      admin.removeCustomizedStateAggregationConfig(clusterId);\n+    } catch (HelixException ex) {\n+      _logger.error(\"Error in removing CustomizedStateAggregationConfig to cluster: \" + clusterId,\n+          ex);\n+      return badRequest(ex.getMessage());\n+    } catch (Exception ex) {\n+      _logger.error(\"Cannot remove CustomizedStateAggregationConfig to cluster: \" + clusterId, ex);\n+      return serverError(ex);\n+    }\n+\n+    return OK();\n+  }\n+\n+  @GET\n+  @Path(\"{clusterId}/customizedstateaggregationconfig\")\n+  public Response getCustomizedStateAggregationConfig(@PathParam(\"clusterId\") String clusterId) {\n+    HelixZkClient zkClient = getHelixZkClient();\n+    if (!ZKUtil.isClusterSetup(clusterId, zkClient)) {\n+      return notFound();", "originalCommit": "86254ba5ef03cd1e1c08084bb4966d97fab33150", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjk1NTUwNw==", "url": "https://github.com/apache/helix/pull/797#discussion_r382955507", "bodyText": "Done. Thanks.", "author": "alirezazamani", "createdAt": "2020-02-23T01:35:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg3Mjg1Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg5MjQ2MA==", "url": "https://github.com/apache/helix/pull/797#discussion_r382892460", "bodyText": "I would suggest a PUT for this update request and delete type may not be supported in this request but in a delete request", "author": "huizhilu", "createdAt": "2020-02-22T06:58:17Z", "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/ClusterAccessor.java", "diffHunk": "@@ -267,6 +268,129 @@ public Response getClusterConfig(@PathParam(\"clusterId\") String clusterId) {\n     return JSONRepresentation(config.getRecord());\n   }\n \n+\n+  @PUT\n+  @Path(\"{clusterId}/customizedstateaggregationconfig\")\n+  public Response addCustomizedStateAggregationConfig(@PathParam(\"clusterId\") String clusterId,\n+      String content) {\n+    HelixZkClient zkClient = getHelixZkClient();\n+    if (!ZKUtil.isClusterSetup(clusterId, zkClient)) {\n+      return notFound(\"Cluster is not properly setup!\");\n+    }\n+\n+    HelixAdmin admin = getHelixAdmin();\n+    ZNRecord record;\n+    try {\n+      record = toZNRecord(content);\n+    } catch (IOException e) {\n+      _logger.error(\"Failed to deserialize user's input \" + content + \", Exception: \" + e);\n+      return badRequest(\"Input is not a vaild ZNRecord!\");\n+    }\n+\n+    try {\n+      CustomizedStateAggregationConfig customizedStateAggregationConfig =\n+          new CustomizedStateAggregationConfig.Builder(record).build();\n+      admin.addCustomizedStateAggregationConfig(clusterId, customizedStateAggregationConfig);\n+    } catch (HelixException ex) {\n+      _logger.error(\"Error in adding a CustomizedStateAggregationConfig to cluster: \" + clusterId,\n+          ex);\n+      return badRequest(ex.getMessage());\n+    } catch (Exception ex) {\n+      _logger.error(\"Cannot add CustomizedStateAggregationConfig to cluster: \" + clusterId, ex);\n+      return serverError(ex);\n+    }\n+\n+    return OK();\n+  }\n+\n+  @DELETE\n+  @Path(\"{clusterId}/customizedstateaggregationconfig\")\n+  public Response removeCustomizedStateAggregationConfig(@PathParam(\"clusterId\") String clusterId) {\n+    HelixZkClient zkClient = getHelixZkClient();\n+    if (!ZKUtil.isClusterSetup(clusterId, zkClient)) {\n+      return notFound(\"Cluster is not properly setup!\");\n+    }\n+\n+    HelixAdmin admin = getHelixAdmin();\n+    try {\n+      admin.removeCustomizedStateAggregationConfig(clusterId);\n+    } catch (HelixException ex) {\n+      _logger.error(\"Error in removing CustomizedStateAggregationConfig to cluster: \" + clusterId,\n+          ex);\n+      return badRequest(ex.getMessage());\n+    } catch (Exception ex) {\n+      _logger.error(\"Cannot remove CustomizedStateAggregationConfig to cluster: \" + clusterId, ex);\n+      return serverError(ex);\n+    }\n+\n+    return OK();\n+  }\n+\n+  @GET\n+  @Path(\"{clusterId}/customizedstateaggregationconfig\")\n+  public Response getCustomizedStateAggregationConfig(@PathParam(\"clusterId\") String clusterId) {\n+    HelixZkClient zkClient = getHelixZkClient();\n+    if (!ZKUtil.isClusterSetup(clusterId, zkClient)) {\n+      return notFound();\n+    }\n+\n+    ConfigAccessor configAccessor = getConfigAccessor();\n+    CustomizedStateAggregationConfig customizedStateAggregationConfig =\n+        configAccessor.getCustomizedStateAggregationConfig(clusterId);\n+\n+    if (customizedStateAggregationConfig != null) {\n+      return JSONRepresentation(customizedStateAggregationConfig.getRecord());\n+    }\n+\n+    return notFound();\n+  }\n+\n+  @POST", "originalCommit": "86254ba5ef03cd1e1c08084bb4966d97fab33150", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjk1NTQ3OQ==", "url": "https://github.com/apache/helix/pull/797#discussion_r382955479", "bodyText": "I just followed the convention here. PUT has been used to add a completely new config. DELETE for complete deletion of the config. POST for update the information.", "author": "alirezazamani", "createdAt": "2020-02-23T01:35:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg5MjQ2MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg5MjY4Ng==", "url": "https://github.com/apache/helix/pull/797#discussion_r382892686", "bodyText": "These lines could be in a private check method to reduce duplicate code.", "author": "huizhilu", "createdAt": "2020-02-22T07:03:32Z", "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/ClusterAccessor.java", "diffHunk": "@@ -267,6 +268,129 @@ public Response getClusterConfig(@PathParam(\"clusterId\") String clusterId) {\n     return JSONRepresentation(config.getRecord());\n   }\n \n+\n+  @PUT\n+  @Path(\"{clusterId}/customizedstateaggregationconfig\")\n+  public Response addCustomizedStateAggregationConfig(@PathParam(\"clusterId\") String clusterId,\n+      String content) {\n+    HelixZkClient zkClient = getHelixZkClient();\n+    if (!ZKUtil.isClusterSetup(clusterId, zkClient)) {\n+      return notFound(\"Cluster is not properly setup!\");\n+    }\n+\n+    HelixAdmin admin = getHelixAdmin();\n+    ZNRecord record;\n+    try {\n+      record = toZNRecord(content);\n+    } catch (IOException e) {\n+      _logger.error(\"Failed to deserialize user's input \" + content + \", Exception: \" + e);\n+      return badRequest(\"Input is not a vaild ZNRecord!\");\n+    }\n+\n+    try {\n+      CustomizedStateAggregationConfig customizedStateAggregationConfig =\n+          new CustomizedStateAggregationConfig.Builder(record).build();\n+      admin.addCustomizedStateAggregationConfig(clusterId, customizedStateAggregationConfig);\n+    } catch (HelixException ex) {\n+      _logger.error(\"Error in adding a CustomizedStateAggregationConfig to cluster: \" + clusterId,\n+          ex);\n+      return badRequest(ex.getMessage());\n+    } catch (Exception ex) {\n+      _logger.error(\"Cannot add CustomizedStateAggregationConfig to cluster: \" + clusterId, ex);\n+      return serverError(ex);\n+    }\n+\n+    return OK();\n+  }\n+\n+  @DELETE\n+  @Path(\"{clusterId}/customizedstateaggregationconfig\")\n+  public Response removeCustomizedStateAggregationConfig(@PathParam(\"clusterId\") String clusterId) {\n+    HelixZkClient zkClient = getHelixZkClient();\n+    if (!ZKUtil.isClusterSetup(clusterId, zkClient)) {\n+      return notFound(\"Cluster is not properly setup!\");\n+    }", "originalCommit": "86254ba5ef03cd1e1c08084bb4966d97fab33150", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjk1NTQ5NA==", "url": "https://github.com/apache/helix/pull/797#discussion_r382955494", "bodyText": "Ok. Fixed.", "author": "alirezazamani", "createdAt": "2020-02-23T01:35:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg5MjY4Ng=="}], "type": "inlineReview"}, {"oid": "e48f251229e94f77ef0297df1d14db002c3410bc", "url": "https://github.com/apache/helix/commit/e48f251229e94f77ef0297df1d14db002c3410bc", "message": "fix comments", "committedDate": "2020-02-23T01:39:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzM4NzE0MQ==", "url": "https://github.com/apache/helix/pull/797#discussion_r383387141", "bodyText": "NIP: to -> from", "author": "zhangmeng916", "createdAt": "2020-02-24T16:53:44Z", "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/ClusterAccessor.java", "diffHunk": "@@ -267,6 +268,115 @@ public Response getClusterConfig(@PathParam(\"clusterId\") String clusterId) {\n     return JSONRepresentation(config.getRecord());\n   }\n \n+\n+  @PUT\n+  @Path(\"{clusterId}/customized-state-aggregation-config\")\n+  public Response addCustomizedStateAggregationConfig(@PathParam(\"clusterId\") String clusterId,\n+      String content) {\n+    if (!doesClusterExist(clusterId)) {\n+      return notFound(String.format(\"Cluster %s does not exist\", clusterId));\n+    }\n+\n+    HelixAdmin admin = getHelixAdmin();\n+    ZNRecord record;\n+    try {\n+      record = toZNRecord(content);\n+    } catch (IOException e) {\n+      _logger.error(\"Failed to deserialize user's input \" + content + \", Exception: \" + e);\n+      return badRequest(\"Input is not a vaild ZNRecord!\");\n+    }\n+\n+    try {\n+      CustomizedStateAggregationConfig customizedStateAggregationConfig =\n+          new CustomizedStateAggregationConfig.Builder(record).build();\n+      admin.addCustomizedStateAggregationConfig(clusterId, customizedStateAggregationConfig);\n+    } catch (Exception ex) {\n+      _logger.error(\"Cannot add CustomizedStateAggregationConfig to cluster: \" + clusterId, ex);\n+      return serverError(ex);\n+    }\n+\n+    return OK();\n+  }\n+\n+  @DELETE\n+  @Path(\"{clusterId}/customized-state-aggregation-config\")\n+  public Response removeCustomizedStateAggregationConfig(@PathParam(\"clusterId\") String clusterId) {\n+    HelixZkClient zkClient = getHelixZkClient();\n+    if (!doesClusterExist(clusterId)) {\n+      return notFound(String.format(\"Cluster %s does not exist\", clusterId));\n+    }\n+\n+    HelixAdmin admin = getHelixAdmin();\n+    try {\n+      admin.removeCustomizedStateAggregationConfig(clusterId);\n+    } catch (Exception ex) {\n+      _logger.error(\"Cannot remove CustomizedStateAggregationConfig to cluster: \" + clusterId, ex);", "originalCommit": "e48f251229e94f77ef0297df1d14db002c3410bc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQxMTczOA==", "url": "https://github.com/apache/helix/pull/797#discussion_r383411738", "bodyText": "Fixed.", "author": "alirezazamani", "createdAt": "2020-02-24T17:38:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzM4NzE0MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzM4ODkyNg==", "url": "https://github.com/apache/helix/pull/797#discussion_r383388926", "bodyText": "The update here is confusing, especially this command is also called \"update\". Actually this is \"add\", right?", "author": "zhangmeng916", "createdAt": "2020-02-24T16:56:49Z", "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/ClusterAccessor.java", "diffHunk": "@@ -267,6 +268,115 @@ public Response getClusterConfig(@PathParam(\"clusterId\") String clusterId) {\n     return JSONRepresentation(config.getRecord());\n   }\n \n+\n+  @PUT\n+  @Path(\"{clusterId}/customized-state-aggregation-config\")\n+  public Response addCustomizedStateAggregationConfig(@PathParam(\"clusterId\") String clusterId,\n+      String content) {\n+    if (!doesClusterExist(clusterId)) {\n+      return notFound(String.format(\"Cluster %s does not exist\", clusterId));\n+    }\n+\n+    HelixAdmin admin = getHelixAdmin();\n+    ZNRecord record;\n+    try {\n+      record = toZNRecord(content);\n+    } catch (IOException e) {\n+      _logger.error(\"Failed to deserialize user's input \" + content + \", Exception: \" + e);\n+      return badRequest(\"Input is not a vaild ZNRecord!\");\n+    }\n+\n+    try {\n+      CustomizedStateAggregationConfig customizedStateAggregationConfig =\n+          new CustomizedStateAggregationConfig.Builder(record).build();\n+      admin.addCustomizedStateAggregationConfig(clusterId, customizedStateAggregationConfig);\n+    } catch (Exception ex) {\n+      _logger.error(\"Cannot add CustomizedStateAggregationConfig to cluster: \" + clusterId, ex);\n+      return serverError(ex);\n+    }\n+\n+    return OK();\n+  }\n+\n+  @DELETE\n+  @Path(\"{clusterId}/customized-state-aggregation-config\")\n+  public Response removeCustomizedStateAggregationConfig(@PathParam(\"clusterId\") String clusterId) {\n+    HelixZkClient zkClient = getHelixZkClient();\n+    if (!doesClusterExist(clusterId)) {\n+      return notFound(String.format(\"Cluster %s does not exist\", clusterId));\n+    }\n+\n+    HelixAdmin admin = getHelixAdmin();\n+    try {\n+      admin.removeCustomizedStateAggregationConfig(clusterId);\n+    } catch (Exception ex) {\n+      _logger.error(\"Cannot remove CustomizedStateAggregationConfig to cluster: \" + clusterId, ex);\n+      return serverError(ex);\n+    }\n+\n+    return OK();\n+  }\n+\n+  @GET\n+  @Path(\"{clusterId}/customized-state-aggregation-config\")\n+  public Response getCustomizedStateAggregationConfig(@PathParam(\"clusterId\") String clusterId) {\n+    HelixZkClient zkClient = getHelixZkClient();\n+    if (!doesClusterExist(clusterId)) {\n+      return notFound(String.format(\"Cluster %s does not exist\", clusterId));\n+    }\n+\n+    ConfigAccessor configAccessor = getConfigAccessor();\n+    CustomizedStateAggregationConfig customizedStateAggregationConfig =\n+        configAccessor.getCustomizedStateAggregationConfig(clusterId);\n+\n+    if (customizedStateAggregationConfig != null) {\n+      return JSONRepresentation(customizedStateAggregationConfig.getRecord());\n+    }\n+\n+    return notFound();\n+  }\n+\n+  @POST\n+  @Path(\"{clusterId}/customized-state-aggregation-config\")\n+  public Response updateCustomizedStateAggregationConfig(@PathParam(\"clusterId\") String clusterId,\n+      @QueryParam(\"command\") String commandStr, @QueryParam(\"type\") String type) {\n+    if (!doesClusterExist(clusterId)) {\n+      return notFound(String.format(\"Cluster %s does not exist\", clusterId));\n+    }\n+\n+    Command command;\n+    if (commandStr == null || commandStr.isEmpty()) {\n+      command = Command.update; // Default behavior\n+    } else {\n+      try {\n+        command = getCommand(commandStr);\n+      } catch (HelixException ex) {\n+        return badRequest(ex.getMessage());\n+      }\n+    }\n+\n+    HelixAdmin admin = getHelixAdmin();\n+\n+    try {\n+      switch (command) {\n+      case delete:\n+        admin.removeTypeFromCustomizedStateAggregationConfig(clusterId, type);\n+        break;\n+      case update:", "originalCommit": "e48f251229e94f77ef0297df1d14db002c3410bc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQxMTg3Mw==", "url": "https://github.com/apache/helix/pull/797#discussion_r383411873", "bodyText": "I added a new type with the name Add.", "author": "alirezazamani", "createdAt": "2020-02-24T17:38:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzM4ODkyNg=="}], "type": "inlineReview"}, {"oid": "c52c53906f4797514259a4a1e8114bacac78cd03", "url": "https://github.com/apache/helix/commit/c52c53906f4797514259a4a1e8114bacac78cd03", "message": "Add new command", "committedDate": "2020-02-24T17:25:44Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY3MDExOQ==", "url": "https://github.com/apache/helix/pull/797#discussion_r383670119", "bodyText": "This style may need to change: it does not follow either the current naming convention (add) to be consistent or Java enum naming convention (constant like ADD)", "author": "huizhilu", "createdAt": "2020-02-25T05:47:53Z", "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/AbstractResource.java", "diffHunk": "@@ -62,6 +62,7 @@\n     enablePartitions,\n     disablePartitions,\n     update,\n+    Add,", "originalCommit": "c52c53906f4797514259a4a1e8114bacac78cd03", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA0MzI1OQ==", "url": "https://github.com/apache/helix/pull/797#discussion_r384043259", "bodyText": "Fixed.", "author": "alirezazamani", "createdAt": "2020-02-25T18:26:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY3MDExOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY3MjcwNA==", "url": "https://github.com/apache/helix/pull/797#discussion_r383672704", "bodyText": "{} is better than string concatenation.", "author": "huizhilu", "createdAt": "2020-02-25T05:58:27Z", "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/ClusterAccessor.java", "diffHunk": "@@ -267,6 +268,115 @@ public Response getClusterConfig(@PathParam(\"clusterId\") String clusterId) {\n     return JSONRepresentation(config.getRecord());\n   }\n \n+\n+  @PUT\n+  @Path(\"{clusterId}/customized-state-aggregation-config\")\n+  public Response addCustomizedStateAggregationConfig(@PathParam(\"clusterId\") String clusterId,\n+      String content) {\n+    if (!doesClusterExist(clusterId)) {\n+      return notFound(String.format(\"Cluster %s does not exist\", clusterId));\n+    }\n+\n+    HelixAdmin admin = getHelixAdmin();\n+    ZNRecord record;\n+    try {\n+      record = toZNRecord(content);\n+    } catch (IOException e) {\n+      _logger.error(\"Failed to deserialize user's input \" + content + \", Exception: \" + e);\n+      return badRequest(\"Input is not a vaild ZNRecord!\");\n+    }\n+\n+    try {\n+      CustomizedStateAggregationConfig customizedStateAggregationConfig =\n+          new CustomizedStateAggregationConfig.Builder(record).build();\n+      admin.addCustomizedStateAggregationConfig(clusterId, customizedStateAggregationConfig);\n+    } catch (Exception ex) {\n+      _logger.error(\"Cannot add CustomizedStateAggregationConfig to cluster: \" + clusterId, ex);\n+      return serverError(ex);\n+    }\n+\n+    return OK();\n+  }\n+\n+  @DELETE\n+  @Path(\"{clusterId}/customized-state-aggregation-config\")\n+  public Response removeCustomizedStateAggregationConfig(@PathParam(\"clusterId\") String clusterId) {\n+    HelixZkClient zkClient = getHelixZkClient();\n+    if (!doesClusterExist(clusterId)) {\n+      return notFound(String.format(\"Cluster %s does not exist\", clusterId));\n+    }\n+\n+    HelixAdmin admin = getHelixAdmin();\n+    try {\n+      admin.removeCustomizedStateAggregationConfig(clusterId);\n+    } catch (Exception ex) {\n+      _logger.error(\"Cannot remove CustomizedStateAggregationConfig from cluster: \" + clusterId, ex);\n+      return serverError(ex);\n+    }\n+\n+    return OK();\n+  }\n+\n+  @GET\n+  @Path(\"{clusterId}/customized-state-aggregation-config\")\n+  public Response getCustomizedStateAggregationConfig(@PathParam(\"clusterId\") String clusterId) {\n+    HelixZkClient zkClient = getHelixZkClient();\n+    if (!doesClusterExist(clusterId)) {\n+      return notFound(String.format(\"Cluster %s does not exist\", clusterId));\n+    }\n+\n+    ConfigAccessor configAccessor = getConfigAccessor();\n+    CustomizedStateAggregationConfig customizedStateAggregationConfig =\n+        configAccessor.getCustomizedStateAggregationConfig(clusterId);\n+\n+    if (customizedStateAggregationConfig != null) {\n+      return JSONRepresentation(customizedStateAggregationConfig.getRecord());\n+    }\n+\n+    return notFound();\n+  }\n+\n+  @POST\n+  @Path(\"{clusterId}/customized-state-aggregation-config\")\n+  public Response updateCustomizedStateAggregationConfig(@PathParam(\"clusterId\") String clusterId,\n+      @QueryParam(\"command\") String commandStr, @QueryParam(\"type\") String type) {\n+    if (!doesClusterExist(clusterId)) {\n+      return notFound(String.format(\"Cluster %s does not exist\", clusterId));\n+    }\n+\n+    Command command;\n+    if (commandStr == null || commandStr.isEmpty()) {\n+      command = Command.Add; // Default behavior\n+    } else {\n+      try {\n+        command = getCommand(commandStr);\n+      } catch (HelixException ex) {\n+        return badRequest(ex.getMessage());\n+      }\n+    }\n+\n+    HelixAdmin admin = getHelixAdmin();\n+\n+    try {\n+      switch (command) {\n+      case delete:\n+        admin.removeTypeFromCustomizedStateAggregationConfig(clusterId, type);\n+        break;\n+      case Add:\n+        admin.addTypeToCustomizedStateAggregationConfig(clusterId, type);\n+        break;\n+      default:\n+        return badRequest(\"Unsupported command \" + commandStr);\n+      }\n+    } catch (Exception ex) {\n+      _logger.error(\"Failed to \" + command + \" CustomizedStateAggregationConfig for cluster \" + clusterId + \" new type: \"", "originalCommit": "c52c53906f4797514259a4a1e8114bacac78cd03", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA0NDQ3NA==", "url": "https://github.com/apache/helix/pull/797#discussion_r384044474", "bodyText": "Done.", "author": "alirezazamani", "createdAt": "2020-02-25T18:28:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY3MjcwNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY3MzM5OA==", "url": "https://github.com/apache/helix/pull/797#discussion_r383673398", "bodyText": "Unused.", "author": "huizhilu", "createdAt": "2020-02-25T06:01:12Z", "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/ClusterAccessor.java", "diffHunk": "@@ -267,6 +268,115 @@ public Response getClusterConfig(@PathParam(\"clusterId\") String clusterId) {\n     return JSONRepresentation(config.getRecord());\n   }\n \n+\n+  @PUT\n+  @Path(\"{clusterId}/customized-state-aggregation-config\")\n+  public Response addCustomizedStateAggregationConfig(@PathParam(\"clusterId\") String clusterId,\n+      String content) {\n+    if (!doesClusterExist(clusterId)) {\n+      return notFound(String.format(\"Cluster %s does not exist\", clusterId));\n+    }\n+\n+    HelixAdmin admin = getHelixAdmin();\n+    ZNRecord record;\n+    try {\n+      record = toZNRecord(content);\n+    } catch (IOException e) {\n+      _logger.error(\"Failed to deserialize user's input \" + content + \", Exception: \" + e);\n+      return badRequest(\"Input is not a vaild ZNRecord!\");\n+    }\n+\n+    try {\n+      CustomizedStateAggregationConfig customizedStateAggregationConfig =\n+          new CustomizedStateAggregationConfig.Builder(record).build();\n+      admin.addCustomizedStateAggregationConfig(clusterId, customizedStateAggregationConfig);\n+    } catch (Exception ex) {\n+      _logger.error(\"Cannot add CustomizedStateAggregationConfig to cluster: \" + clusterId, ex);\n+      return serverError(ex);\n+    }\n+\n+    return OK();\n+  }\n+\n+  @DELETE\n+  @Path(\"{clusterId}/customized-state-aggregation-config\")\n+  public Response removeCustomizedStateAggregationConfig(@PathParam(\"clusterId\") String clusterId) {\n+    HelixZkClient zkClient = getHelixZkClient();", "originalCommit": "c52c53906f4797514259a4a1e8114bacac78cd03", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA0MzM0Nw==", "url": "https://github.com/apache/helix/pull/797#discussion_r384043347", "bodyText": "Removed.", "author": "alirezazamani", "createdAt": "2020-02-25T18:26:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY3MzM5OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY3Mzk3OA==", "url": "https://github.com/apache/helix/pull/797#discussion_r383673978", "bodyText": "Can we not catch a more specific exception? It seems there could be runtime HelixException?", "author": "huizhilu", "createdAt": "2020-02-25T06:03:10Z", "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/ClusterAccessor.java", "diffHunk": "@@ -267,6 +268,115 @@ public Response getClusterConfig(@PathParam(\"clusterId\") String clusterId) {\n     return JSONRepresentation(config.getRecord());\n   }\n \n+\n+  @PUT\n+  @Path(\"{clusterId}/customized-state-aggregation-config\")\n+  public Response addCustomizedStateAggregationConfig(@PathParam(\"clusterId\") String clusterId,\n+      String content) {\n+    if (!doesClusterExist(clusterId)) {\n+      return notFound(String.format(\"Cluster %s does not exist\", clusterId));\n+    }\n+\n+    HelixAdmin admin = getHelixAdmin();\n+    ZNRecord record;\n+    try {\n+      record = toZNRecord(content);\n+    } catch (IOException e) {\n+      _logger.error(\"Failed to deserialize user's input \" + content + \", Exception: \" + e);\n+      return badRequest(\"Input is not a vaild ZNRecord!\");\n+    }\n+\n+    try {\n+      CustomizedStateAggregationConfig customizedStateAggregationConfig =\n+          new CustomizedStateAggregationConfig.Builder(record).build();\n+      admin.addCustomizedStateAggregationConfig(clusterId, customizedStateAggregationConfig);\n+    } catch (Exception ex) {", "originalCommit": "c52c53906f4797514259a4a1e8114bacac78cd03", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA0NDI0Mg==", "url": "https://github.com/apache/helix/pull/797#discussion_r384044242", "bodyText": "Thanks for the comment. I still prefer to catch all the exception like we do in other functions.", "author": "alirezazamani", "createdAt": "2020-02-25T18:28:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY3Mzk3OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY3NDMxOA==", "url": "https://github.com/apache/helix/pull/797#discussion_r383674318", "bodyText": "This is a user input/client error, not a server error.  We don't have to log this especially on error level in server.", "author": "huizhilu", "createdAt": "2020-02-25T06:04:23Z", "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/ClusterAccessor.java", "diffHunk": "@@ -267,6 +268,115 @@ public Response getClusterConfig(@PathParam(\"clusterId\") String clusterId) {\n     return JSONRepresentation(config.getRecord());\n   }\n \n+\n+  @PUT\n+  @Path(\"{clusterId}/customized-state-aggregation-config\")\n+  public Response addCustomizedStateAggregationConfig(@PathParam(\"clusterId\") String clusterId,\n+      String content) {\n+    if (!doesClusterExist(clusterId)) {\n+      return notFound(String.format(\"Cluster %s does not exist\", clusterId));\n+    }\n+\n+    HelixAdmin admin = getHelixAdmin();\n+    ZNRecord record;\n+    try {\n+      record = toZNRecord(content);\n+    } catch (IOException e) {\n+      _logger.error(\"Failed to deserialize user's input \" + content + \", Exception: \" + e);", "originalCommit": "c52c53906f4797514259a4a1e8114bacac78cd03", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA0MzQ5NA==", "url": "https://github.com/apache/helix/pull/797#discussion_r384043494", "bodyText": "Removed the log.", "author": "alirezazamani", "createdAt": "2020-02-25T18:27:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY3NDMxOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU4ODU0Nw==", "url": "https://github.com/apache/helix/pull/797#discussion_r383588547", "bodyText": "Please use lower case to be consistent with \"delete\"", "author": "zhangmeng916", "createdAt": "2020-02-25T00:09:52Z", "path": "helix-rest/src/main/java/org/apache/helix/rest/server/resources/helix/ClusterAccessor.java", "diffHunk": "@@ -362,7 +362,7 @@ public Response updateCustomizedStateAggregationConfig(@PathParam(\"clusterId\") S\n       case delete:\n         admin.removeTypeFromCustomizedStateAggregationConfig(clusterId, type);\n         break;\n-      case update:\n+      case Add:", "originalCommit": "c52c53906f4797514259a4a1e8114bacac78cd03", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA0NDM1Mw==", "url": "https://github.com/apache/helix/pull/797#discussion_r384044353", "bodyText": "Fixed.", "author": "alirezazamani", "createdAt": "2020-02-25T18:28:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU4ODU0Nw=="}], "type": "inlineReview"}, {"oid": "8eac688f0d580c9ccef9bc8253a777b1a6c41f35", "url": "https://github.com/apache/helix/commit/8eac688f0d580c9ccef9bc8253a777b1a6c41f35", "message": "fix comments2", "committedDate": "2020-02-25T18:25:56Z", "type": "commit"}]}