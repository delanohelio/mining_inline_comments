{"pr_number": 1472, "pr_title": "Fix connection leakage in CustomRestClient", "pr_createdAt": "2020-10-16T20:33:09Z", "pr_url": "https://github.com/apache/helix/pull/1472", "timeline": [{"oid": "82e10bfa9102bcf7e5cb29265ccdf7e7ee8630ea", "url": "https://github.com/apache/helix/commit/82e10bfa9102bcf7e5cb29265ccdf7e7ee8630ea", "message": "Fix connection leakage in CustomRestClient", "committedDate": "2020-10-16T20:34:13Z", "type": "forcePushed"}, {"oid": "26c9ce7a9f7dd78570b0c8ecc877a700c34c1663", "url": "https://github.com/apache/helix/commit/26c9ce7a9f7dd78570b0c8ecc877a700c34c1663", "message": "Fix connection leakage in CustomRestClient", "committedDate": "2020-10-16T20:35:20Z", "type": "forcePushed"}, {"oid": "c814d3adb107110d6417ebc7c4fdb0d0888852d9", "url": "https://github.com/apache/helix/commit/c814d3adb107110d6417ebc7c4fdb0d0888852d9", "message": "Fix connection leakage in CustomRestClient", "committedDate": "2020-10-16T20:48:58Z", "type": "forcePushed"}, {"oid": "a417c6722e64c8094cff5bca3bebd2ef9d45242e", "url": "https://github.com/apache/helix/commit/a417c6722e64c8094cff5bca3bebd2ef9d45242e", "message": "Fix connection leakage in CustomRestClient", "committedDate": "2020-10-16T20:53:56Z", "type": "commit"}, {"oid": "a417c6722e64c8094cff5bca3bebd2ef9d45242e", "url": "https://github.com/apache/helix/commit/a417c6722e64c8094cff5bca3bebd2ef9d45242e", "message": "Fix connection leakage in CustomRestClient", "committedDate": "2020-10-16T20:53:56Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjc0MjI5MA==", "url": "https://github.com/apache/helix/pull/1472#discussion_r506742290", "bodyText": "Good catch.", "author": "kaisun2000", "createdAt": "2020-10-16T22:09:35Z", "path": "helix-rest/src/main/java/org/apache/helix/rest/client/CustomRestClientImpl.java", "diffHunk": "@@ -40,7 +40,7 @@\n import org.slf4j.LoggerFactory;\n \n class CustomRestClientImpl implements CustomRestClient {\n-  private static final Logger LOG = LoggerFactory.getLogger(CustomRestClient.class);", "originalCommit": "a417c6722e64c8094cff5bca3bebd2ef9d45242e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjc0NTQ5OA==", "url": "https://github.com/apache/helix/pull/1472#discussion_r506745498", "bodyText": "handleResponse() handles the result from post() assuming post has not IO exception. That is the original author's thinking.  So looking at the response code previously is in handleResponse(). If sticking to the same line of thinking, we can add this warning log to handleResponse, instead in post() here.\nBut in reality, it does not really matter. More like a style of personal choice.", "author": "kaisun2000", "createdAt": "2020-10-16T22:20:39Z", "path": "helix-rest/src/main/java/org/apache/helix/rest/client/CustomRestClientImpl.java", "diffHunk": "@@ -116,25 +116,36 @@ protected JsonNode getJsonObject(HttpResponse httpResponse) throws IOException {\n       LOG.info(\"Expected HttpResponse statusCode: {}\", HttpStatus.SC_OK);\n       return jsonConverter.convert(getJsonObject(httpResponse));\n     } else {\n+      // Ensure entity is fully consumed so stream is closed.\n+      EntityUtils.consumeQuietly(httpResponse.getEntity());\n       throw new ClientProtocolException(\"Unexpected response status: \" + status + \", reason: \"\n           + httpResponse.getStatusLine().getReasonPhrase());\n     }\n   }\n \n   @VisibleForTesting\n   protected HttpResponse post(String url, Map<String, String> payloads) throws IOException {\n+    HttpPost postRequest = new HttpPost(url);\n     try {\n-      HttpPost postRequest = new HttpPost(url);\n       postRequest.setHeader(\"Accept\", ACCEPT_CONTENT_TYPE);\n       StringEntity entity = new StringEntity(OBJECT_MAPPER.writeValueAsString(payloads),\n           ContentType.APPLICATION_JSON);\n       postRequest.setEntity(entity);\n       LOG.info(\"Executing request: {}, headers: {}, entity: {}\", postRequest.getRequestLine(),\n           postRequest.getAllHeaders(), postRequest.getEntity());\n-      return _httpClient.execute(postRequest);\n+\n+      HttpResponse response = _httpClient.execute(postRequest);", "originalCommit": "a417c6722e64c8094cff5bca3bebd2ef9d45242e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjc0NjU4MQ==", "url": "https://github.com/apache/helix/pull/1472#discussion_r506746581", "bodyText": "I tried that. If we move to handleResponse, we'll have to change more code, eg. method signature of handleResponse to have an extra parameter payloads, and we need to change the callers as well. That sounds more work to me and it doesn't look better than this. I prefer this way so it is cleaner.", "author": "huizhilu", "createdAt": "2020-10-16T22:24:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjc0NTQ5OA=="}], "type": "inlineReview"}]}