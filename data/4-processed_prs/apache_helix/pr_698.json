{"pr_number": 698, "pr_title": "Implement Azure cloud instance information processor", "pr_createdAt": "2020-01-23T00:56:54Z", "pr_url": "https://github.com/apache/helix/pull/698", "timeline": [{"oid": "c419c73cd65fb390a3f0d940637298387c99f410", "url": "https://github.com/apache/helix/commit/c419c73cd65fb390a3f0d940637298387c99f410", "message": "Implement Azure cloud instance information processor", "committedDate": "2020-01-23T01:00:25Z", "type": "commit"}, {"oid": "c419c73cd65fb390a3f0d940637298387c99f410", "url": "https://github.com/apache/helix/commit/c419c73cd65fb390a3f0d940637298387c99f410", "message": "Implement Azure cloud instance information processor", "committedDate": "2020-01-23T01:00:25Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDMwNTE2MQ==", "url": "https://github.com/apache/helix/pull/698#discussion_r370305161", "bodyText": "I would prefer to use other names such as \"Test-Helix\" in our tests.", "author": "alirezazamani", "createdAt": "2020-01-23T19:15:35Z", "path": "helix-core/src/test/resources/AzureResponse.json", "diffHunk": "@@ -0,0 +1,104 @@\n+{\n+  \"compute\": {\n+    \"azEnvironment\": \"AzurePublicCloud\",\n+    \"customData\": \"\",\n+    \"location\": \"southcentralus\",\n+    \"name\": \"ei-lid-vmss-kafka_1\",", "originalCommit": "c419c73cd65fb390a3f0d940637298387c99f410", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIxMzcwOA==", "url": "https://github.com/apache/helix/pull/698#discussion_r373213708", "bodyText": "+1", "author": "jiajunwang", "createdAt": "2020-01-30T21:53:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDMwNTE2MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDMwNTQ4OA==", "url": "https://github.com/apache/helix/pull/698#discussion_r370305488", "bodyText": "Same as here.", "author": "alirezazamani", "createdAt": "2020-01-23T19:16:14Z", "path": "helix-core/src/test/resources/AzureResponse.json", "diffHunk": "@@ -0,0 +1,104 @@\n+{\n+  \"compute\": {\n+    \"azEnvironment\": \"AzurePublicCloud\",\n+    \"customData\": \"\",\n+    \"location\": \"southcentralus\",\n+    \"name\": \"ei-lid-vmss-kafka_1\",\n+    \"offer\": \"\",\n+    \"osType\": \"Linux\",\n+    \"placementGroupId\": \"81e605b2-a807-48ee-a84a-63c76a9c9543\",\n+    \"plan\": {\n+      \"name\": \"\",\n+      \"product\": \"\",\n+      \"publisher\": \"\"\n+    },\n+    \"platformFaultDomain\": \"2\",\n+    \"platformUpdateDomain\": \"2\",\n+    \"provider\": \"Microsoft.Compute\",\n+    \"publicKeys\": [],\n+    \"publisher\": \"\",\n+    \"resourceGroupName\": \"scus-lpsazureei1-app-rg\",\n+    \"resourceId\": \"/subscriptions/c9a251d8-1272-4c0f-8055-8271bbc1d677/resourceGroups/scus-lpsazureei1-app-rg/providers/Microsoft.Compute/virtualMachines/ei-lid-vmss-kafka_2\",\n+    \"sku\": \"\",\n+    \"storageProfile\": {\n+      \"dataDisks\": [],\n+      \"imageReference\": {\n+        \"id\": \"/subscriptions/7dd5a659-67c4-441c-ac0b-d48b7a029668/resourceGroups/scus-infra-app-rg/providers/Microsoft.Compute/galleries/pieimagerepo/images/FastCOP4/versions/190924.1.1\",\n+        \"offer\": \"\",\n+        \"publisher\": \"\",\n+        \"sku\": \"\",\n+        \"version\": \"\"\n+      },\n+      \"osDisk\": {\n+        \"caching\": \"ReadWrite\",\n+        \"createOption\": \"FromImage\",\n+        \"diskSizeGB\": \"32\",\n+        \"encryptionSettings\": {\n+          \"enabled\": \"false\"\n+        },\n+        \"image\": {\n+          \"uri\": \"\"\n+        },\n+        \"managedDisk\": {\n+          \"id\": \"/subscriptions/c9a251d8-1272-4c0f-8055-8271bbc1d677/resourceGroups/scus-lpsazureei1-app-rg/providers/Microsoft.Compute/disks/ei-lid-vmss-kafka_ei-lid-vmss-kafka_2_OsDisk_1_124c3534b8e848e296ec22b24d44c027\",\n+          \"storageAccountType\": \"Standard_LRS\"\n+        },\n+        \"name\": \"ei-lid-vmss-kafka_ei-lid-vmss-kafka_2_OsDisk_1_124c3534b8e848e296ec22b24d44c027\",", "originalCommit": "c419c73cd65fb390a3f0d940637298387c99f410", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIxMzgyNA==", "url": "https://github.com/apache/helix/pull/698#discussion_r373213824", "bodyText": "+1 again : )", "author": "jiajunwang", "createdAt": "2020-01-30T21:53:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDMwNTQ4OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIxMTI1Mw==", "url": "https://github.com/apache/helix/pull/698#discussion_r373211253", "bodyText": "Any usage in this file?", "author": "jiajunwang", "createdAt": "2020-01-30T21:47:54Z", "path": "helix-core/src/main/java/org/apache/helix/api/cloud/CloudInstanceInformationProcessor.java", "diffHunk": "@@ -20,6 +20,7 @@\n  */\n \n import java.util.List;\n+import org.apache.helix.HelixCloudProperty;", "originalCommit": "c419c73cd65fb390a3f0d940637298387c99f410", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIxMTcyMA==", "url": "https://github.com/apache/helix/pull/698#discussion_r373211720", "bodyText": "nit, I think this is optional if you don't have any other constructor?", "author": "jiajunwang", "createdAt": "2020-01-30T21:48:59Z", "path": "helix-core/src/main/java/org/apache/helix/cloud/azure/AzureCloudInstanceInformation.java", "diffHunk": "@@ -42,7 +42,13 @@ public String get(String key) {\n   }\n \n   public static class Builder {\n-    private Map<String, String> _cloudInstanceInfoMap = null;\n+    /**\n+     * Default constructor\n+     */\n+    public Builder() {", "originalCommit": "c419c73cd65fb390a3f0d940637298387c99f410", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIxMjAxMw==", "url": "https://github.com/apache/helix/pull/698#discussion_r373212013", "bodyText": "Feel free to make it final if you are not going to create a new HashMap later.", "author": "jiajunwang", "createdAt": "2020-01-30T21:49:40Z", "path": "helix-core/src/main/java/org/apache/helix/cloud/azure/AzureCloudInstanceInformation.java", "diffHunk": "@@ -42,7 +42,13 @@ public String get(String key) {\n   }\n \n   public static class Builder {\n-    private Map<String, String> _cloudInstanceInfoMap = null;\n+    /**\n+     * Default constructor\n+     */\n+    public Builder() {\n+    }\n+\n+    private Map<String, String> _cloudInstanceInfoMap = new HashMap<>();", "originalCommit": "c419c73cd65fb390a3f0d940637298387c99f410", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIxMjYzMg==", "url": "https://github.com/apache/helix/pull/698#discussion_r373212632", "bodyText": "Humm... This log looks different from the others. Why not just passing the class to it?", "author": "jiajunwang", "createdAt": "2020-01-30T21:51:06Z", "path": "helix-core/src/main/java/org/apache/helix/cloud/azure/AzureHttpUtil.java", "diffHunk": "@@ -0,0 +1,45 @@\n+package org.apache.helix.cloud.azure;\n+\n+import javax.net.ssl.SSLException;\n+import org.apache.helix.HelixCloudProperty;\n+import org.apache.http.client.HttpRequestRetryHandler;\n+import org.apache.http.client.config.RequestConfig;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClients;\n+import org.apache.http.protocol.HttpContext;\n+\n+import java.io.IOException;\n+import java.io.InterruptedIOException;\n+import java.net.UnknownHostException;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * A dedicated http client for retrieving information from Azure Instance Metadata Service\n+ */\n+class AzureHttpUtil {\n+\n+  private static Logger LOG = LoggerFactory.getLogger(AzureHttpUtil.class.getName());", "originalCommit": "c419c73cd65fb390a3f0d940637298387c99f410", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIxMzI5NQ==", "url": "https://github.com/apache/helix/pull/698#discussion_r373213295", "bodyText": "Can we just have this one instead of creating another private method which has the same logic?", "author": "jiajunwang", "createdAt": "2020-01-30T21:52:35Z", "path": "helix-core/src/main/java/org/apache/helix/cloud/azure/AzureHttpUtil.java", "diffHunk": "@@ -0,0 +1,45 @@\n+package org.apache.helix.cloud.azure;\n+\n+import javax.net.ssl.SSLException;\n+import org.apache.helix.HelixCloudProperty;\n+import org.apache.http.client.HttpRequestRetryHandler;\n+import org.apache.http.client.config.RequestConfig;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClients;\n+import org.apache.http.protocol.HttpContext;\n+\n+import java.io.IOException;\n+import java.io.InterruptedIOException;\n+import java.net.UnknownHostException;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * A dedicated http client for retrieving information from Azure Instance Metadata Service\n+ */\n+class AzureHttpUtil {\n+\n+  private static Logger LOG = LoggerFactory.getLogger(AzureHttpUtil.class.getName());\n+\n+  static CloseableHttpClient getHttpClient(HelixCloudProperty helixCloudProperty) {", "originalCommit": "c419c73cd65fb390a3f0d940637298387c99f410", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIxNDIxNw==", "url": "https://github.com/apache/helix/pull/698#discussion_r373214217", "bodyText": "final for both of them?", "author": "jiajunwang", "createdAt": "2020-01-30T21:54:31Z", "path": "helix-core/src/main/java/org/apache/helix/cloud/azure/AzureCloudInstanceInformationProcessor.java", "diffHunk": "@@ -19,38 +19,111 @@\n  * under the License.\n  */\n \n+import java.io.IOException;\n import java.util.ArrayList;\n import java.util.List;\n \n+import org.apache.helix.HelixCloudProperty;\n+import org.apache.helix.HelixException;\n import org.apache.helix.api.cloud.CloudInstanceInformationProcessor;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.util.EntityUtils;\n+import org.codehaus.jackson.JsonNode;\n+import org.codehaus.jackson.map.ObjectMapper;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n+public class AzureCloudInstanceInformationProcessor\n+    implements CloudInstanceInformationProcessor<String> {\n+  private CloseableHttpClient _closeableHttpClient;", "originalCommit": "c419c73cd65fb390a3f0d940637298387c99f410", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIxNDYwMQ==", "url": "https://github.com/apache/helix/pull/698#discussion_r373214601", "bodyText": "Try to put the test in the same package. So this method can be protected.\nAnd the public method should call this one instead of duplicating the code.", "author": "jiajunwang", "createdAt": "2020-01-30T21:55:22Z", "path": "helix-core/src/main/java/org/apache/helix/cloud/azure/AzureCloudInstanceInformationProcessor.java", "diffHunk": "@@ -19,38 +19,111 @@\n  * under the License.\n  */\n \n+import java.io.IOException;\n import java.util.ArrayList;\n import java.util.List;\n \n+import org.apache.helix.HelixCloudProperty;\n+import org.apache.helix.HelixException;\n import org.apache.helix.api.cloud.CloudInstanceInformationProcessor;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.util.EntityUtils;\n+import org.codehaus.jackson.JsonNode;\n+import org.codehaus.jackson.map.ObjectMapper;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n+public class AzureCloudInstanceInformationProcessor\n+    implements CloudInstanceInformationProcessor<String> {\n+  private CloseableHttpClient _closeableHttpClient;\n+  private HelixCloudProperty _helixCloudProperty;\n \n-public class AzureCloudInstanceInformationProcessor implements CloudInstanceInformationProcessor<String> {\n+  public AzureCloudInstanceInformationProcessor(HelixCloudProperty helixCloudProperty) {\n+    _closeableHttpClient = AzureHttpUtil.getHttpClient(helixCloudProperty);\n+    _helixCloudProperty = helixCloudProperty;\n+  }\n \n-  public AzureCloudInstanceInformationProcessor() {\n+  /**\n+   * This constructor is for unit test purpose only.\n+   * User could provide helixCloudProperty and a mocked http client to test the functionality of\n+   * this class.\n+   */\n+  public AzureCloudInstanceInformationProcessor(HelixCloudProperty helixCloudProperty,", "originalCommit": "c419c73cd65fb390a3f0d940637298387c99f410", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzI0MzUyNA==", "url": "https://github.com/apache/helix/pull/698#discussion_r373243524", "bodyText": "I tried, compilation breaks due to testng not in the package. Meanwhile, I'd like to keep the consistency with the current tests. Let me know if you feel protected is a must.", "author": "zhangmeng916", "createdAt": "2020-01-30T23:10:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIxNDYwMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIxNTAxNg==", "url": "https://github.com/apache/helix/pull/698#discussion_r373215016", "bodyText": "nit, according to our convention,\n\nclass not the name please\nput it to the top before other fields and methods.", "author": "jiajunwang", "createdAt": "2020-01-30T21:56:17Z", "path": "helix-core/src/main/java/org/apache/helix/cloud/azure/AzureCloudInstanceInformationProcessor.java", "diffHunk": "@@ -19,38 +19,111 @@\n  * under the License.\n  */\n \n+import java.io.IOException;\n import java.util.ArrayList;\n import java.util.List;\n \n+import org.apache.helix.HelixCloudProperty;\n+import org.apache.helix.HelixException;\n import org.apache.helix.api.cloud.CloudInstanceInformationProcessor;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.util.EntityUtils;\n+import org.codehaus.jackson.JsonNode;\n+import org.codehaus.jackson.map.ObjectMapper;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n+public class AzureCloudInstanceInformationProcessor\n+    implements CloudInstanceInformationProcessor<String> {\n+  private CloseableHttpClient _closeableHttpClient;\n+  private HelixCloudProperty _helixCloudProperty;\n \n-public class AzureCloudInstanceInformationProcessor implements CloudInstanceInformationProcessor<String> {\n+  public AzureCloudInstanceInformationProcessor(HelixCloudProperty helixCloudProperty) {\n+    _closeableHttpClient = AzureHttpUtil.getHttpClient(helixCloudProperty);\n+    _helixCloudProperty = helixCloudProperty;\n+  }\n \n-  public AzureCloudInstanceInformationProcessor() {\n+  /**\n+   * This constructor is for unit test purpose only.\n+   * User could provide helixCloudProperty and a mocked http client to test the functionality of\n+   * this class.\n+   */\n+  public AzureCloudInstanceInformationProcessor(HelixCloudProperty helixCloudProperty,\n+      CloseableHttpClient closeableHttpClient) {\n+    _helixCloudProperty = helixCloudProperty;\n+    _closeableHttpClient = closeableHttpClient;\n   }\n \n+  private static final Logger LOG =\n+      LoggerFactory.getLogger(AzureCloudInstanceInformationProcessor.class.getName());", "originalCommit": "c419c73cd65fb390a3f0d940637298387c99f410", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIxNTI4Ng==", "url": "https://github.com/apache/helix/pull/698#discussion_r373215286", "bodyText": "Shall we handle partial failure or not?", "author": "jiajunwang", "createdAt": "2020-01-30T21:56:56Z", "path": "helix-core/src/main/java/org/apache/helix/cloud/azure/AzureCloudInstanceInformationProcessor.java", "diffHunk": "@@ -19,38 +19,111 @@\n  * under the License.\n  */\n \n+import java.io.IOException;\n import java.util.ArrayList;\n import java.util.List;\n \n+import org.apache.helix.HelixCloudProperty;\n+import org.apache.helix.HelixException;\n import org.apache.helix.api.cloud.CloudInstanceInformationProcessor;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.util.EntityUtils;\n+import org.codehaus.jackson.JsonNode;\n+import org.codehaus.jackson.map.ObjectMapper;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n+public class AzureCloudInstanceInformationProcessor\n+    implements CloudInstanceInformationProcessor<String> {\n+  private CloseableHttpClient _closeableHttpClient;\n+  private HelixCloudProperty _helixCloudProperty;\n \n-public class AzureCloudInstanceInformationProcessor implements CloudInstanceInformationProcessor<String> {\n+  public AzureCloudInstanceInformationProcessor(HelixCloudProperty helixCloudProperty) {\n+    _closeableHttpClient = AzureHttpUtil.getHttpClient(helixCloudProperty);\n+    _helixCloudProperty = helixCloudProperty;\n+  }\n \n-  public AzureCloudInstanceInformationProcessor() {\n+  /**\n+   * This constructor is for unit test purpose only.\n+   * User could provide helixCloudProperty and a mocked http client to test the functionality of\n+   * this class.\n+   */\n+  public AzureCloudInstanceInformationProcessor(HelixCloudProperty helixCloudProperty,\n+      CloseableHttpClient closeableHttpClient) {\n+    _helixCloudProperty = helixCloudProperty;\n+    _closeableHttpClient = closeableHttpClient;\n   }\n \n+  private static final Logger LOG =\n+      LoggerFactory.getLogger(AzureCloudInstanceInformationProcessor.class.getName());\n+\n   /**\n-   * fetch the raw Azure cloud instance information\n+   * Fetch raw Azure cloud instance information based on the urls provided\n    * @return raw Azure cloud instance information\n    */\n   @Override\n   public List<String> fetchCloudInstanceInformation() {\n     List<String> response = new ArrayList<>();\n-    //TODO: implement the fetching logic\n+    for (String url : _helixCloudProperty.getCloudInfoSources()) {\n+      response.add(getAzureCloudInformationFromUrl(url));", "originalCommit": "c419c73cd65fb390a3f0d940637298387c99f410", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIzMjcxMw==", "url": "https://github.com/apache/helix/pull/698#discussion_r373232713", "bodyText": "Cloud information is considered as one entity, if any part of it is missing/failed, we would consider it as incomplete, and fail the operation. As we cannot guarantee the fields we need later is already populated, if we do not fail here, we will need to fail in the participant manager.", "author": "zhangmeng916", "createdAt": "2020-01-30T22:40:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIxNTI4Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIxNTQ3NQ==", "url": "https://github.com/apache/helix/pull/698#discussion_r373215475", "bodyText": "private ?", "author": "jiajunwang", "createdAt": "2020-01-30T21:57:21Z", "path": "helix-core/src/main/java/org/apache/helix/cloud/azure/AzureCloudInstanceInformationProcessor.java", "diffHunk": "@@ -19,38 +19,111 @@\n  * under the License.\n  */\n \n+import java.io.IOException;\n import java.util.ArrayList;\n import java.util.List;\n \n+import org.apache.helix.HelixCloudProperty;\n+import org.apache.helix.HelixException;\n import org.apache.helix.api.cloud.CloudInstanceInformationProcessor;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.util.EntityUtils;\n+import org.codehaus.jackson.JsonNode;\n+import org.codehaus.jackson.map.ObjectMapper;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n+public class AzureCloudInstanceInformationProcessor\n+    implements CloudInstanceInformationProcessor<String> {\n+  private CloseableHttpClient _closeableHttpClient;\n+  private HelixCloudProperty _helixCloudProperty;\n \n-public class AzureCloudInstanceInformationProcessor implements CloudInstanceInformationProcessor<String> {\n+  public AzureCloudInstanceInformationProcessor(HelixCloudProperty helixCloudProperty) {\n+    _closeableHttpClient = AzureHttpUtil.getHttpClient(helixCloudProperty);\n+    _helixCloudProperty = helixCloudProperty;\n+  }\n \n-  public AzureCloudInstanceInformationProcessor() {\n+  /**\n+   * This constructor is for unit test purpose only.\n+   * User could provide helixCloudProperty and a mocked http client to test the functionality of\n+   * this class.\n+   */\n+  public AzureCloudInstanceInformationProcessor(HelixCloudProperty helixCloudProperty,\n+      CloseableHttpClient closeableHttpClient) {\n+    _helixCloudProperty = helixCloudProperty;\n+    _closeableHttpClient = closeableHttpClient;\n   }\n \n+  private static final Logger LOG =\n+      LoggerFactory.getLogger(AzureCloudInstanceInformationProcessor.class.getName());\n+\n   /**\n-   * fetch the raw Azure cloud instance information\n+   * Fetch raw Azure cloud instance information based on the urls provided\n    * @return raw Azure cloud instance information\n    */\n   @Override\n   public List<String> fetchCloudInstanceInformation() {\n     List<String> response = new ArrayList<>();\n-    //TODO: implement the fetching logic\n+    for (String url : _helixCloudProperty.getCloudInfoSources()) {\n+      response.add(getAzureCloudInformationFromUrl(url));\n+    }\n     return response;\n   }\n \n+  /**\n+   * Query Azure Instance Metadata Service to get the instance(VM) information\n+   * @return raw Azure cloud instance information\n+   */\n+  public String getAzureCloudInformationFromUrl(String url) {", "originalCommit": "c419c73cd65fb390a3f0d940637298387c99f410", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIxODIwMw==", "url": "https://github.com/apache/helix/pull/698#discussion_r373218203", "bodyText": "On general question, Yi has added one httpclient in the Helix-rest for instance health check. Can we just leverage that one?\nIn that case, just move the code to helix-core, or better to helix-common (I hope we have one), then leverage that client.", "author": "jiajunwang", "createdAt": "2020-01-30T22:03:42Z", "path": "helix-core/src/main/java/org/apache/helix/cloud/azure/AzureHttpUtil.java", "diffHunk": "@@ -0,0 +1,45 @@\n+package org.apache.helix.cloud.azure;\n+\n+import javax.net.ssl.SSLException;\n+import org.apache.helix.HelixCloudProperty;\n+import org.apache.http.client.HttpRequestRetryHandler;\n+import org.apache.http.client.config.RequestConfig;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClients;\n+import org.apache.http.protocol.HttpContext;\n+\n+import java.io.IOException;\n+import java.io.InterruptedIOException;\n+import java.net.UnknownHostException;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * A dedicated http client for retrieving information from Azure Instance Metadata Service\n+ */\n+class AzureHttpUtil {", "originalCommit": "c419c73cd65fb390a3f0d940637298387c99f410", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzI0MTUwMQ==", "url": "https://github.com/apache/helix/pull/698#discussion_r373241501", "bodyText": "I've checked the current custom rest client. It's not easy to adapt it to our use case, specifically for those user defined parameter input, such as max retry, timeout. Also the separate http client I have is easier to mock in the unit test.", "author": "zhangmeng916", "createdAt": "2020-01-30T23:04:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIxODIwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTUzMzg4OQ==", "url": "https://github.com/apache/helix/pull/698#discussion_r375533889", "bodyText": "httpclient should be a fundamental component. If we have 2 of them in our codebase, it would be confusing and harder for us to maintain.\nHow difficult will it be to merge 2 use cases? Please feel free to refactor if necessary.\n@i3wangyi Can you please comment as well?", "author": "jiajunwang", "createdAt": "2020-02-05T22:03:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIxODIwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjA5MjYwOQ==", "url": "https://github.com/apache/helix/pull/698#discussion_r376092609", "bodyText": "Yes. The current CustomRestClient has one instance of HttpClient, a parent class of the CloseableHttpClient the method tries to return. However, I see the AzureHttpUtil is in helix-core while that factory is only visible in helix-rest only (because previously there's no need for helix-core to perform HTTP request).\nEssentially, the factory pattern is similar and we can extract the core part of it to helix-core and leave the difference in the separate module. For example, in helix-core, create one HttpClientFactory which accepts a set of general parameters (timeout, ssl, retry..) without respecting HelixCloudProperty; And use it in rest as well as rest of places in helix-core", "author": "i3wangyi", "createdAt": "2020-02-06T21:30:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIxODIwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjEwOTU0NA==", "url": "https://github.com/apache/helix/pull/698#discussion_r376109544", "bodyText": "It is OK if we move the current client class to the helix-core now. Since there is real usage of it.", "author": "jiajunwang", "createdAt": "2020-02-06T22:07:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIxODIwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjEyMjg0NA==", "url": "https://github.com/apache/helix/pull/698#discussion_r376122844", "bodyText": "Actually I double checked and found that I can just remove the util function. The processor itself can just directly make the http call, and passing the information it needs to pass. So the future usage should be, any class that needs to make the call would directly call getHttpClient, providing whatever config they would like to pass in.\nFor example, in current AzureCloudInstanceInfoProcessor, we only need to pass requestConfig and retryHandler. Other class may need something like \"setConnectionBackoffStrategy\" etc. Users can use whatever is available in the http client parameters.", "author": "zhangmeng916", "createdAt": "2020-02-06T22:41:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIxODIwMw=="}], "type": "inlineReview"}, {"oid": "31ddcf512d9fbd9b14a7b38d79d17b4654601c16", "url": "https://github.com/apache/helix/commit/31ddcf512d9fbd9b14a7b38d79d17b4654601c16", "message": "fix comments", "committedDate": "2020-01-30T23:11:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzI0NzM4Mg==", "url": "https://github.com/apache/helix/pull/698#discussion_r373247382", "bodyText": "Let's make these as variables instead of hard code.", "author": "junkaixue", "createdAt": "2020-01-30T23:24:02Z", "path": "helix-core/src/main/java/org/apache/helix/cloud/azure/AzureCloudInstanceInformationProcessor.java", "diffHunk": "@@ -19,38 +19,110 @@\n  * under the License.\n  */\n \n+import java.io.IOException;\n import java.util.ArrayList;\n import java.util.List;\n \n+import org.apache.helix.HelixCloudProperty;\n+import org.apache.helix.HelixException;\n import org.apache.helix.api.cloud.CloudInstanceInformationProcessor;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.util.EntityUtils;\n+import org.codehaus.jackson.JsonNode;\n+import org.codehaus.jackson.map.ObjectMapper;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n+public class AzureCloudInstanceInformationProcessor\n+    implements CloudInstanceInformationProcessor<String> {\n+  private static final Logger LOG =\n+      LoggerFactory.getLogger(AzureCloudInstanceInformationProcessor.class);\n+  private final CloseableHttpClient _closeableHttpClient;\n+  private final HelixCloudProperty _helixCloudProperty;\n \n-public class AzureCloudInstanceInformationProcessor implements CloudInstanceInformationProcessor<String> {\n+  public AzureCloudInstanceInformationProcessor(HelixCloudProperty helixCloudProperty) {\n+    _closeableHttpClient = AzureHttpUtil.getHttpClient(helixCloudProperty);\n+    _helixCloudProperty = helixCloudProperty;\n+  }\n \n-  public AzureCloudInstanceInformationProcessor() {\n+  /**\n+   * This constructor is for unit test purpose only.\n+   * User could provide helixCloudProperty and a mocked http client to test the functionality of\n+   * this class.\n+   */\n+  public AzureCloudInstanceInformationProcessor(HelixCloudProperty helixCloudProperty,\n+      CloseableHttpClient closeableHttpClient) {\n+    _helixCloudProperty = helixCloudProperty;\n+    _closeableHttpClient = closeableHttpClient;\n   }\n \n   /**\n-   * fetch the raw Azure cloud instance information\n+   * Fetch raw Azure cloud instance information based on the urls provided\n    * @return raw Azure cloud instance information\n    */\n   @Override\n   public List<String> fetchCloudInstanceInformation() {\n     List<String> response = new ArrayList<>();\n-    //TODO: implement the fetching logic\n+    for (String url : _helixCloudProperty.getCloudInfoSources()) {\n+      response.add(getAzureCloudInformationFromUrl(url));\n+    }\n     return response;\n   }\n \n+  /**\n+   * Query Azure Instance Metadata Service to get the instance(VM) information\n+   * @return raw Azure cloud instance information\n+   */\n+  private String getAzureCloudInformationFromUrl(String url) {\n+    HttpGet httpGet = new HttpGet(url);\n+    httpGet.setHeader(\"Metadata\", \"true\");\n+\n+    try {\n+      CloseableHttpResponse response = _closeableHttpClient.execute(httpGet);\n+      if (response == null || response.getStatusLine().getStatusCode() != 200) {\n+        String errorMsg = String.format(\n+            \"Failed to get an HTTP Response for the request. Response: {}. Status code: {}\",\n+            (response == null ? \"NULL\" : response.getStatusLine().getReasonPhrase()),\n+            response.getStatusLine().getStatusCode());\n+        throw new HelixException(errorMsg);\n+      }\n+      String responseString = EntityUtils.toString(response.getEntity());\n+      LOG.info(\"VM instance information query result: {}\", responseString);\n+      return responseString;\n+    } catch (IOException e) {\n+      throw new HelixException(\n+          String.format(\"Failed to get Azure cloud instance information from url {}\", url), e);\n+    }\n+  }\n+\n   /**\n    * Parse raw Azure cloud instance information.\n    * @return required azure cloud instance information\n    */\n   @Override\n   public AzureCloudInstanceInformation parseCloudInstanceInformation(List<String> responses) {\n     AzureCloudInstanceInformation azureCloudInstanceInformation = null;\n-    //TODO: implement the parsing logic\n+    for (String response : responses) {\n+      ObjectMapper mapper = new ObjectMapper();\n+      try {\n+        JsonNode jsonNode = mapper.readTree(response);\n+        JsonNode computeNode = jsonNode.path(\"compute\");", "originalCommit": "31ddcf512d9fbd9b14a7b38d79d17b4654601c16", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzI0ODI2Ng==", "url": "https://github.com/apache/helix/pull/698#discussion_r373248266", "bodyText": "Is VMSS name necessary? What if this instance joined from container?", "author": "junkaixue", "createdAt": "2020-01-30T23:26:55Z", "path": "helix-core/src/main/java/org/apache/helix/cloud/azure/AzureCloudInstanceInformationProcessor.java", "diffHunk": "@@ -19,38 +19,110 @@\n  * under the License.\n  */\n \n+import java.io.IOException;\n import java.util.ArrayList;\n import java.util.List;\n \n+import org.apache.helix.HelixCloudProperty;\n+import org.apache.helix.HelixException;\n import org.apache.helix.api.cloud.CloudInstanceInformationProcessor;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.util.EntityUtils;\n+import org.codehaus.jackson.JsonNode;\n+import org.codehaus.jackson.map.ObjectMapper;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n+public class AzureCloudInstanceInformationProcessor\n+    implements CloudInstanceInformationProcessor<String> {\n+  private static final Logger LOG =\n+      LoggerFactory.getLogger(AzureCloudInstanceInformationProcessor.class);\n+  private final CloseableHttpClient _closeableHttpClient;\n+  private final HelixCloudProperty _helixCloudProperty;\n \n-public class AzureCloudInstanceInformationProcessor implements CloudInstanceInformationProcessor<String> {\n+  public AzureCloudInstanceInformationProcessor(HelixCloudProperty helixCloudProperty) {\n+    _closeableHttpClient = AzureHttpUtil.getHttpClient(helixCloudProperty);\n+    _helixCloudProperty = helixCloudProperty;\n+  }\n \n-  public AzureCloudInstanceInformationProcessor() {\n+  /**\n+   * This constructor is for unit test purpose only.\n+   * User could provide helixCloudProperty and a mocked http client to test the functionality of\n+   * this class.\n+   */\n+  public AzureCloudInstanceInformationProcessor(HelixCloudProperty helixCloudProperty,\n+      CloseableHttpClient closeableHttpClient) {\n+    _helixCloudProperty = helixCloudProperty;\n+    _closeableHttpClient = closeableHttpClient;\n   }\n \n   /**\n-   * fetch the raw Azure cloud instance information\n+   * Fetch raw Azure cloud instance information based on the urls provided\n    * @return raw Azure cloud instance information\n    */\n   @Override\n   public List<String> fetchCloudInstanceInformation() {\n     List<String> response = new ArrayList<>();\n-    //TODO: implement the fetching logic\n+    for (String url : _helixCloudProperty.getCloudInfoSources()) {\n+      response.add(getAzureCloudInformationFromUrl(url));\n+    }\n     return response;\n   }\n \n+  /**\n+   * Query Azure Instance Metadata Service to get the instance(VM) information\n+   * @return raw Azure cloud instance information\n+   */\n+  private String getAzureCloudInformationFromUrl(String url) {\n+    HttpGet httpGet = new HttpGet(url);\n+    httpGet.setHeader(\"Metadata\", \"true\");\n+\n+    try {\n+      CloseableHttpResponse response = _closeableHttpClient.execute(httpGet);\n+      if (response == null || response.getStatusLine().getStatusCode() != 200) {\n+        String errorMsg = String.format(\n+            \"Failed to get an HTTP Response for the request. Response: {}. Status code: {}\",\n+            (response == null ? \"NULL\" : response.getStatusLine().getReasonPhrase()),\n+            response.getStatusLine().getStatusCode());\n+        throw new HelixException(errorMsg);\n+      }\n+      String responseString = EntityUtils.toString(response.getEntity());\n+      LOG.info(\"VM instance information query result: {}\", responseString);\n+      return responseString;\n+    } catch (IOException e) {\n+      throw new HelixException(\n+          String.format(\"Failed to get Azure cloud instance information from url {}\", url), e);\n+    }\n+  }\n+\n   /**\n    * Parse raw Azure cloud instance information.\n    * @return required azure cloud instance information\n    */\n   @Override\n   public AzureCloudInstanceInformation parseCloudInstanceInformation(List<String> responses) {\n     AzureCloudInstanceInformation azureCloudInstanceInformation = null;\n-    //TODO: implement the parsing logic\n+    for (String response : responses) {\n+      ObjectMapper mapper = new ObjectMapper();\n+      try {\n+        JsonNode jsonNode = mapper.readTree(response);\n+        JsonNode computeNode = jsonNode.path(\"compute\");\n+        if (!computeNode.isMissingNode()) {\n+          String vmName = computeNode.path(\"vmId\").getTextValue();\n+          String platformFaultDomain = computeNode.path(\"platformFaultDomain\").getTextValue();\n+          String vmssName = computeNode.path(\"vmScaleSetName\").getValueAsText();", "originalCommit": "31ddcf512d9fbd9b14a7b38d79d17b4654601c16", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzI4MjEyNg==", "url": "https://github.com/apache/helix/pull/698#discussion_r373282126", "bodyText": "If it's not inside a VMSS, the field will be empty. Originally VMSS is for validation purpose. Based on our current plan, it's more likely we will not use this field. However, I prefer to keep it here just in case we can still use it for validation.", "author": "zhangmeng916", "createdAt": "2020-01-31T01:41:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzI0ODI2Ng=="}], "type": "inlineReview"}, {"oid": "1c2c17bb082453faeee4a35369acd7ba2b2cd806", "url": "https://github.com/apache/helix/commit/1c2c17bb082453faeee4a35369acd7ba2b2cd806", "message": "more fix", "committedDate": "2020-01-31T01:41:43Z", "type": "commit"}, {"oid": "bba036a241b8e61022a7838f1299ed159ccf1c6c", "url": "https://github.com/apache/helix/commit/bba036a241b8e61022a7838f1299ed159ccf1c6c", "message": "remove http util which is unnecessary", "committedDate": "2020-02-06T22:39:16Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjEyNTIwNQ==", "url": "https://github.com/apache/helix/pull/698#discussion_r376125205", "bodyText": "nit, can you have a try to remove the corresponding entry in the helix-rest pom? I think that would be unnecessary with this.", "author": "jiajunwang", "createdAt": "2020-02-06T22:47:38Z", "path": "helix-core/pom.xml", "diffHunk": "@@ -159,6 +159,11 @@ under the License.\n       <artifactId>metrics-core</artifactId>\n       <version>3.2.3</version>\n     </dependency>\n+    <dependency>\n+      <groupId>org.apache.httpcomponents</groupId>\n+      <artifactId>httpclient</artifactId>\n+      <version>4.5.8</version>", "originalCommit": "bba036a241b8e61022a7838f1299ed159ccf1c6c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjEyNzEzMw==", "url": "https://github.com/apache/helix/pull/698#discussion_r376127133", "bodyText": "Safer to clone construct a new map so the newly built instances do not share anything.", "author": "jiajunwang", "createdAt": "2020-02-06T22:52:43Z", "path": "helix-core/src/main/java/org/apache/helix/cloud/azure/AzureCloudInstanceInformation.java", "diffHunk": "@@ -42,7 +42,8 @@ public String get(String key) {\n   }\n \n   public static class Builder {\n-    private Map<String, String> _cloudInstanceInfoMap = null;\n+\n+    private final Map<String, String> _cloudInstanceInfoMap = new HashMap<>();\n \n     public AzureCloudInstanceInformation build() {\n       return new AzureCloudInstanceInformation(_cloudInstanceInfoMap);", "originalCommit": "bba036a241b8e61022a7838f1299ed159ccf1c6c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjEyNzY3MQ==", "url": "https://github.com/apache/helix/pull/698#discussion_r376127671", "bodyText": "As we discussed, let's add a TODO here for generalizing all the httpclients usage.", "author": "jiajunwang", "createdAt": "2020-02-06T22:54:12Z", "path": "helix-core/src/main/java/org/apache/helix/cloud/azure/AzureCloudInstanceInformationProcessor.java", "diffHunk": "@@ -19,38 +19,135 @@\n  * under the License.\n  */\n \n+import java.io.IOException;\n+import java.io.InterruptedIOException;\n+import java.net.UnknownHostException;\n import java.util.ArrayList;\n import java.util.List;\n \n+import javax.net.ssl.SSLException;\n+import org.apache.helix.HelixCloudProperty;\n+import org.apache.helix.HelixException;\n import org.apache.helix.api.cloud.CloudInstanceInformationProcessor;\n+import org.apache.http.client.HttpRequestRetryHandler;\n+import org.apache.http.client.config.RequestConfig;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClients;\n+import org.apache.http.protocol.HttpContext;\n+import org.apache.http.util.EntityUtils;\n+import org.codehaus.jackson.JsonNode;\n+import org.codehaus.jackson.map.ObjectMapper;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n+public class AzureCloudInstanceInformationProcessor\n+    implements CloudInstanceInformationProcessor<String> {\n+  private static final Logger LOG =\n+      LoggerFactory.getLogger(AzureCloudInstanceInformationProcessor.class);\n+  private final CloseableHttpClient _closeableHttpClient;\n+  private final HelixCloudProperty _helixCloudProperty;\n+  private final String COMPUTE = \"compute\";\n+  private final String INSTANCE_NAME = \"vmId\";\n+  private final String DOMAIN = \"platformFaultDomain\";\n+  private final String INSTANCE_SET_NAME = \"vmScaleSetName\";\n \n-public class AzureCloudInstanceInformationProcessor implements CloudInstanceInformationProcessor<String> {\n+  public AzureCloudInstanceInformationProcessor(HelixCloudProperty helixCloudProperty) {\n+    _helixCloudProperty = helixCloudProperty;\n \n-  public AzureCloudInstanceInformationProcessor() {\n+    RequestConfig requestConifg = RequestConfig.custom()\n+        .setConnectionRequestTimeout((int) helixCloudProperty.getCloudRequestTimeout())\n+        .setConnectTimeout((int) helixCloudProperty.getCloudConnectionTimeout()).build();\n+\n+    HttpRequestRetryHandler httpRequestRetryHandler =\n+        (IOException exception, int executionCount, HttpContext context) -> {\n+          LOG.warn(\"Execution count: \" + executionCount + \".\", exception);\n+          return !(executionCount >= helixCloudProperty.getCloudMaxRetry()\n+              || exception instanceof InterruptedIOException\n+              || exception instanceof UnknownHostException || exception instanceof SSLException);\n+        };\n+\n+    _closeableHttpClient = HttpClients.custom().setDefaultRequestConfig(requestConifg)", "originalCommit": "bba036a241b8e61022a7838f1299ed159ccf1c6c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjEyODU0Nw==", "url": "https://github.com/apache/helix/pull/698#discussion_r376128547", "bodyText": "It confused me. If there are multiple responses, which information you return? It seems that the last one will override the previous ones.", "author": "jiajunwang", "createdAt": "2020-02-06T22:56:36Z", "path": "helix-core/src/main/java/org/apache/helix/cloud/azure/AzureCloudInstanceInformationProcessor.java", "diffHunk": "@@ -19,38 +19,135 @@\n  * under the License.\n  */\n \n+import java.io.IOException;\n+import java.io.InterruptedIOException;\n+import java.net.UnknownHostException;\n import java.util.ArrayList;\n import java.util.List;\n \n+import javax.net.ssl.SSLException;\n+import org.apache.helix.HelixCloudProperty;\n+import org.apache.helix.HelixException;\n import org.apache.helix.api.cloud.CloudInstanceInformationProcessor;\n+import org.apache.http.client.HttpRequestRetryHandler;\n+import org.apache.http.client.config.RequestConfig;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClients;\n+import org.apache.http.protocol.HttpContext;\n+import org.apache.http.util.EntityUtils;\n+import org.codehaus.jackson.JsonNode;\n+import org.codehaus.jackson.map.ObjectMapper;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n+public class AzureCloudInstanceInformationProcessor\n+    implements CloudInstanceInformationProcessor<String> {\n+  private static final Logger LOG =\n+      LoggerFactory.getLogger(AzureCloudInstanceInformationProcessor.class);\n+  private final CloseableHttpClient _closeableHttpClient;\n+  private final HelixCloudProperty _helixCloudProperty;\n+  private final String COMPUTE = \"compute\";\n+  private final String INSTANCE_NAME = \"vmId\";\n+  private final String DOMAIN = \"platformFaultDomain\";\n+  private final String INSTANCE_SET_NAME = \"vmScaleSetName\";\n \n-public class AzureCloudInstanceInformationProcessor implements CloudInstanceInformationProcessor<String> {\n+  public AzureCloudInstanceInformationProcessor(HelixCloudProperty helixCloudProperty) {\n+    _helixCloudProperty = helixCloudProperty;\n \n-  public AzureCloudInstanceInformationProcessor() {\n+    RequestConfig requestConifg = RequestConfig.custom()\n+        .setConnectionRequestTimeout((int) helixCloudProperty.getCloudRequestTimeout())\n+        .setConnectTimeout((int) helixCloudProperty.getCloudConnectionTimeout()).build();\n+\n+    HttpRequestRetryHandler httpRequestRetryHandler =\n+        (IOException exception, int executionCount, HttpContext context) -> {\n+          LOG.warn(\"Execution count: \" + executionCount + \".\", exception);\n+          return !(executionCount >= helixCloudProperty.getCloudMaxRetry()\n+              || exception instanceof InterruptedIOException\n+              || exception instanceof UnknownHostException || exception instanceof SSLException);\n+        };\n+\n+    _closeableHttpClient = HttpClients.custom().setDefaultRequestConfig(requestConifg)\n+        .setRetryHandler(httpRequestRetryHandler).build();\n   }\n \n   /**\n-   * fetch the raw Azure cloud instance information\n+   * This constructor is for unit test purpose only.\n+   * User could provide helixCloudProperty and a mocked http client to test the functionality of\n+   * this class.\n+   */\n+  public AzureCloudInstanceInformationProcessor(HelixCloudProperty helixCloudProperty,\n+      CloseableHttpClient closeableHttpClient) {\n+    _helixCloudProperty = helixCloudProperty;\n+    _closeableHttpClient = closeableHttpClient;\n+  }\n+\n+  /**\n+   * Fetch raw Azure cloud instance information based on the urls provided\n    * @return raw Azure cloud instance information\n    */\n   @Override\n   public List<String> fetchCloudInstanceInformation() {\n     List<String> response = new ArrayList<>();\n-    //TODO: implement the fetching logic\n+    for (String url : _helixCloudProperty.getCloudInfoSources()) {\n+      response.add(getAzureCloudInformationFromUrl(url));\n+    }\n     return response;\n   }\n \n+  /**\n+   * Query Azure Instance Metadata Service to get the instance(VM) information\n+   * @return raw Azure cloud instance information\n+   */\n+  private String getAzureCloudInformationFromUrl(String url) {\n+    HttpGet httpGet = new HttpGet(url);\n+    httpGet.setHeader(\"Metadata\", \"true\");\n+\n+    try {\n+      CloseableHttpResponse response = _closeableHttpClient.execute(httpGet);\n+      if (response == null || response.getStatusLine().getStatusCode() != 200) {\n+        String errorMsg = String.format(\n+            \"Failed to get an HTTP Response for the request. Response: {}. Status code: {}\",\n+            (response == null ? \"NULL\" : response.getStatusLine().getReasonPhrase()),\n+            response.getStatusLine().getStatusCode());\n+        throw new HelixException(errorMsg);\n+      }\n+      String responseString = EntityUtils.toString(response.getEntity());\n+      LOG.info(\"VM instance information query result: {}\", responseString);\n+      return responseString;\n+    } catch (IOException e) {\n+      throw new HelixException(\n+          String.format(\"Failed to get Azure cloud instance information from url {}\", url), e);\n+    }\n+  }\n+\n   /**\n    * Parse raw Azure cloud instance information.\n    * @return required azure cloud instance information\n    */\n   @Override\n   public AzureCloudInstanceInformation parseCloudInstanceInformation(List<String> responses) {\n     AzureCloudInstanceInformation azureCloudInstanceInformation = null;\n-    //TODO: implement the parsing logic\n+    for (String response : responses) {", "originalCommit": "bba036a241b8e61022a7838f1299ed159ccf1c6c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE0Mzc5OQ==", "url": "https://github.com/apache/helix/pull/698#discussion_r376143799", "bodyText": "If there are multiple responses, they should come from different sources, e.g. some may come from local disk, and they should not have common fields. If they do, we will need to define priority among these sources.", "author": "zhangmeng916", "createdAt": "2020-02-06T23:40:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjEyODU0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE2NTgwMg==", "url": "https://github.com/apache/helix/pull/698#discussion_r376165802", "bodyText": "Discussed offline. Updated Azure implementation to restrict the response size to 1, as we do not have any source to query for now.", "author": "zhangmeng916", "createdAt": "2020-02-07T01:00:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjEyODU0Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjEyODgxMw==", "url": "https://github.com/apache/helix/pull/698#discussion_r376128813", "bodyText": "nit, responseList or responses", "author": "jiajunwang", "createdAt": "2020-02-06T22:57:22Z", "path": "helix-core/src/main/java/org/apache/helix/cloud/azure/AzureCloudInstanceInformationProcessor.java", "diffHunk": "@@ -19,38 +19,135 @@\n  * under the License.\n  */\n \n+import java.io.IOException;\n+import java.io.InterruptedIOException;\n+import java.net.UnknownHostException;\n import java.util.ArrayList;\n import java.util.List;\n \n+import javax.net.ssl.SSLException;\n+import org.apache.helix.HelixCloudProperty;\n+import org.apache.helix.HelixException;\n import org.apache.helix.api.cloud.CloudInstanceInformationProcessor;\n+import org.apache.http.client.HttpRequestRetryHandler;\n+import org.apache.http.client.config.RequestConfig;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClients;\n+import org.apache.http.protocol.HttpContext;\n+import org.apache.http.util.EntityUtils;\n+import org.codehaus.jackson.JsonNode;\n+import org.codehaus.jackson.map.ObjectMapper;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n+public class AzureCloudInstanceInformationProcessor\n+    implements CloudInstanceInformationProcessor<String> {\n+  private static final Logger LOG =\n+      LoggerFactory.getLogger(AzureCloudInstanceInformationProcessor.class);\n+  private final CloseableHttpClient _closeableHttpClient;\n+  private final HelixCloudProperty _helixCloudProperty;\n+  private final String COMPUTE = \"compute\";\n+  private final String INSTANCE_NAME = \"vmId\";\n+  private final String DOMAIN = \"platformFaultDomain\";\n+  private final String INSTANCE_SET_NAME = \"vmScaleSetName\";\n \n-public class AzureCloudInstanceInformationProcessor implements CloudInstanceInformationProcessor<String> {\n+  public AzureCloudInstanceInformationProcessor(HelixCloudProperty helixCloudProperty) {\n+    _helixCloudProperty = helixCloudProperty;\n \n-  public AzureCloudInstanceInformationProcessor() {\n+    RequestConfig requestConifg = RequestConfig.custom()\n+        .setConnectionRequestTimeout((int) helixCloudProperty.getCloudRequestTimeout())\n+        .setConnectTimeout((int) helixCloudProperty.getCloudConnectionTimeout()).build();\n+\n+    HttpRequestRetryHandler httpRequestRetryHandler =\n+        (IOException exception, int executionCount, HttpContext context) -> {\n+          LOG.warn(\"Execution count: \" + executionCount + \".\", exception);\n+          return !(executionCount >= helixCloudProperty.getCloudMaxRetry()\n+              || exception instanceof InterruptedIOException\n+              || exception instanceof UnknownHostException || exception instanceof SSLException);\n+        };\n+\n+    _closeableHttpClient = HttpClients.custom().setDefaultRequestConfig(requestConifg)\n+        .setRetryHandler(httpRequestRetryHandler).build();\n   }\n \n   /**\n-   * fetch the raw Azure cloud instance information\n+   * This constructor is for unit test purpose only.\n+   * User could provide helixCloudProperty and a mocked http client to test the functionality of\n+   * this class.\n+   */\n+  public AzureCloudInstanceInformationProcessor(HelixCloudProperty helixCloudProperty,\n+      CloseableHttpClient closeableHttpClient) {\n+    _helixCloudProperty = helixCloudProperty;\n+    _closeableHttpClient = closeableHttpClient;\n+  }\n+\n+  /**\n+   * Fetch raw Azure cloud instance information based on the urls provided\n    * @return raw Azure cloud instance information\n    */\n   @Override\n   public List<String> fetchCloudInstanceInformation() {\n     List<String> response = new ArrayList<>();", "originalCommit": "bba036a241b8e61022a7838f1299ed159ccf1c6c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "4e25d2b5c989624a55784a2013bb927306e87030", "url": "https://github.com/apache/helix/commit/4e25d2b5c989624a55784a2013bb927306e87030", "message": "fix more comments", "committedDate": "2020-02-07T00:08:08Z", "type": "commit"}, {"oid": "59c5dda5806a9aa696b942b409584943930b1789", "url": "https://github.com/apache/helix/commit/59c5dda5806a9aa696b942b409584943930b1789", "message": "tiny fix", "committedDate": "2020-02-07T00:15:55Z", "type": "commit"}]}