{"pr_number": 1072, "pr_title": "Validate data write size limit in ZkClient", "pr_createdAt": "2020-06-08T07:38:14Z", "pr_url": "https://github.com/apache/helix/pull/1072", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAzNzE5OA==", "url": "https://github.com/apache/helix/pull/1072#discussion_r437037198", "bodyText": "Thanks for adding this test! One favor to ask - we are actually in the process of moving this class to zookeeper-api (#1070).\nDo you think we could hold off on this change until that is committed first to avoid merge conflicts?", "author": "narendly", "createdAt": "2020-06-08T22:31:28Z", "path": "helix-core/src/test/java/org/apache/helix/manager/zk/TestRawZkClient.java", "diffHunk": "@@ -819,4 +820,45 @@ public void testAsyncWriteOperations() {\n       zkClient.delete(\"/tmp/asyncOversize\");\n     }\n   }\n+\n+  @Test(expectedExceptions = ZkMarshallingError.class,", "originalCommit": "8b133cb349a4e6df655a7d1f5574338637920276", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA2MzQwMw==", "url": "https://github.com/apache/helix/pull/1072#discussion_r437063403", "bodyText": "That's fine. Once the PR is committed, I will resolve the conflicts.", "author": "huizhilu", "createdAt": "2020-06-08T23:56:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAzNzE5OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAzODU3NA==", "url": "https://github.com/apache/helix/pull/1072#discussion_r437038574", "bodyText": "I agree that this is the right thing to do. Thanks for catching this and fixing this.\nOne concern I have is with the change of the exception type. I am not sure if changing it to ZkMarshallingError is the right thing to do because\n\nZkMarshallingError is usually thrown in and reserved for use in ZkSerializer implementations.\nChanging Exception types may cause backward-compatibility issues.\n\nWhat do you think?", "author": "narendly", "createdAt": "2020-06-08T22:35:29Z", "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -1839,12 +1848,15 @@ protected void doRetry() {\n     });\n   }\n \n-  private void checkDataSizeLimit(byte[] data) {\n-    if (data != null && data.length > ZNRecord.SIZE_LIMIT) {\n-      LOG.error(\n-          \"Data size larger than 1M, will not write to zk. Data (first 1k): \" + new String(data)\n-              .substring(0, 1024));\n-      throw new ZkClientException(\"Data size larger than 1M\");\n+  private void checkDataSizeLimit(String path, byte[] data) {\n+    if (data == null) {\n+      return;\n+    }\n+\n+    int sizeLimit = ZNRecordUtil.getSerializerWriteSizeLimit();\n+    if (data.length > sizeLimit) {\n+      throw new ZkMarshallingError(", "originalCommit": "8b133cb349a4e6df655a7d1f5574338637920276", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA3MDQwMQ==", "url": "https://github.com/apache/helix/pull/1072#discussion_r437070401", "bodyText": "These questions are valid and natural ones which I also thought about.\n\nThe reason I change it is I would like to make it consistent with serializer. In helix zkclient, the data size check is right after serializing. ZkMarshallingError could also indicate the serialized data still exceeds the limit. So I feel ZkMarshallingError is more accurate than ZkClientException.\nActually before version 1.0.0, the exception type is HelixException. So changing to ZkClientException already breaks backward-compatibility if it breaks. Considering recent 1.0.0 zookeeper-api module users(helix-core 1.0.0 is deprecated), if a user explicitly uses this raw zkclient and catches this runtime exception, that may break. But I am not sure if that really exists in 1.0.0 usage, considering the APIs don't explicitly signature ZkClientException.\n\nThough having these thoughts, I don't have a strong preference: we could keep the original exception type. If we would like to change the type, may be it is a good idea to do it in 1.0.1 to avoid future backward compatibility issue.", "author": "huizhilu", "createdAt": "2020-06-09T00:23:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAzODU3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA5NzMzNA==", "url": "https://github.com/apache/helix/pull/1072#discussion_r437097334", "bodyText": "To give you more context, ZkMarshallingError is something that was inherited from 101tec.zkclient library and explicitly thrown for ZkSerializer implementations. Since this is our ZkClient API-level check outside the serializer, I think ZkClientException.\nAlso, we've decided to convert all HelixExceptions to ZkClientException, so I think ZkClientException would be more appropriate for consistency.", "author": "narendly", "createdAt": "2020-06-09T02:08:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAzODU3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzYxMzM4NA==", "url": "https://github.com/apache/helix/pull/1072#discussion_r437613384", "bodyText": "+1. Let's not change the exception type of this.", "author": "junkaixue", "createdAt": "2020-06-09T17:52:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAzODU3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzYyODAxNA==", "url": "https://github.com/apache/helix/pull/1072#discussion_r437628014", "bodyText": "Thanks for the input. Resolved.", "author": "huizhilu", "createdAt": "2020-06-09T18:18:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAzODU3NA=="}], "type": "inlineReview"}, {"oid": "e45f5eb2fe974186a89132f29586b02c1e9743ea", "url": "https://github.com/apache/helix/commit/e45f5eb2fe974186a89132f29586b02c1e9743ea", "message": "Use jute.maxbuffer size limit in zkclient", "committedDate": "2020-06-10T07:49:49Z", "type": "forcePushed"}, {"oid": "77e0198c0f371a34b716a3df5b95da9e44ef1b80", "url": "https://github.com/apache/helix/commit/77e0198c0f371a34b716a3df5b95da9e44ef1b80", "message": "Use jute.maxbuffer size limit in zkclient", "committedDate": "2020-06-10T07:53:13Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY3OTMyNA==", "url": "https://github.com/apache/helix/pull/1072#discussion_r439679324", "bodyText": "I'm not sure if we can directly use the value ClientCnxn.packetLen. It is public and static.", "author": "jiajunwang", "createdAt": "2020-06-12T23:30:50Z", "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -73,6 +84,10 @@\n   private static Logger LOG = LoggerFactory.getLogger(ZkClient.class);\n   private static long MAX_RECONNECT_INTERVAL_MS = 30000; // 30 seconds\n \n+  // Default value for system property jute.maxbuffer\n+  // It specifies the maximum size of the data that can be stored in a znode.\n+  private static final int DEFAULT_JUTE_MAXBUFFER = 0xfffff;", "originalCommit": "77e0198c0f371a34b716a3df5b95da9e44ef1b80", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzExMjI0NQ==", "url": "https://github.com/apache/helix/pull/1072#discussion_r443112245", "bodyText": "Answer is no. That one is different: it's for the response packet size and it's 4 MB. We are looking at server side jute.maxbuffer that is by default 1 MB in BinaryInputArchive. It does no harm to define our own private constant and the default value 1 MB is known.", "author": "huizhilu", "createdAt": "2020-06-20T08:13:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY3OTMyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzIxMjkzMQ==", "url": "https://github.com/apache/helix/pull/1072#discussion_r447212931", "bodyText": "What if ZK changes the default max buffer in some new versions? Are we going to change this number accordingly? So my suggestion is that,\n\nWe fine the default value in Zookeeper code.\nif 1 is not possible, then we can just use the current SIZE_LIMIT for the default value.", "author": "jiajunwang", "createdAt": "2020-06-29T19:48:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY3OTMyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTM3NDk1OA==", "url": "https://github.com/apache/helix/pull/1072#discussion_r449374958", "bodyText": "@jiajunwang Rethinking about this, I don't think we need this margin. Eg. if we set jute.maxbuffer=1024KB, with the margin=24KB, when we write a znode 1023KB, it fails because 1023KB > 1000KB. This is confusing. So I don't think we should bring in the 24KB margin into custom jute.maxbuffer. Same as ZNRecord serializer write size limit, if we set it, we use the number directly without subtracting the margin.\nSo I think it is clear and transparent to use the configured value without subtracting the margin. What do you think?", "author": "huizhilu", "createdAt": "2020-07-03T04:54:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY3OTMyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDEwNTkwNQ==", "url": "https://github.com/apache/helix/pull/1072#discussion_r454105905", "bodyText": "Then you run into the ZK server side buffer issue. The write might be done successfully, but the read will fail.\nI think we agreed to keep the margin until we bump up the ZK version to a newer one and the buffer issue should be fixed in that version.", "author": "jiajunwang", "createdAt": "2020-07-14T05:14:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY3OTMyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTI1NDY4MA==", "url": "https://github.com/apache/helix/pull/1072#discussion_r459254680", "bodyText": "@jiajunwang For default value 1000KB in ZNRecord SIZE_LIMIT, we still leave a margin that is 24 KB. But for the value that users config jute.maxbuffer, we should honor it as what is done in ZNRecordSerializer. We don't leave a margin in ZNRecordSerializer, right? So if user configs jute.maxbuffer, we expect them to understand it well. Say they already consider a margin in the value jute.maxbuffer, we should not(users don't expect that, either) leave another redundant margin.\nSay a user sets jute.maxbuff to 975KB that they think it already leaves enough room as margin, we don't want to deduct it again 975 - 24 = 951KB as the real value. It would also surprise user: if data is 960KB that user expects it to be written successfully, but it actually fails because of the extra margin.\nSo for the custom value if a user setsjute.maxbuff, I don't think we should deduct the value with the 24KB margin.", "author": "huizhilu", "createdAt": "2020-07-23T07:12:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY3OTMyNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY3OTgxMQ==", "url": "https://github.com/apache/helix/pull/1072#discussion_r439679811", "bodyText": "This is awkward. How about just create a constant for margin and deprecate the SIZE_LIMIT?", "author": "jiajunwang", "createdAt": "2020-06-12T23:33:47Z", "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -2216,4 +2236,24 @@ private void validateCurrentThread() {\n       throw new IllegalArgumentException(\"Must not be done in the zookeeper event thread.\");\n     }\n   }\n+\n+  private void validateWriteSizeLimitConfig() {\n+    int serializerSize = ZNRecordUtil.getSerializerWriteSizeLimit();\n+    int zkClientSize = getWriteSizeLimit();\n+    // ZNRecord serializer write size limit should not be set greater than size limit in ZkClient\n+    if (serializerSize > zkClientSize) {\n+      throw new IllegalStateException(\"ZNRecord serializer write size limit: \" + serializerSize\n+          + \" is greater than size limit in ZkClient: \" + zkClientSize);\n+    }\n+  }\n+\n+  private int getWriteSizeLimit() {\n+    // The size margin left in default SIZE_LIMIT\n+    int sizeMargin = DEFAULT_JUTE_MAXBUFFER - ZNRecord.SIZE_LIMIT;", "originalCommit": "77e0198c0f371a34b716a3df5b95da9e44ef1b80", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzExMTgzNw==", "url": "https://github.com/apache/helix/pull/1072#discussion_r443111837", "bodyText": "ZNRecordSerializer is also using the SIZE_LIMIT to determine the actual size limit. Maybe we still need it. Otherwise, we still have sizeLimit = JUTE_MAXBUFFER - MARGIN. I understand this calculation is awkward, but just it is just a local variable. Or we could add one more constant for margin so we don't have to calculate it again here.", "author": "huizhilu", "createdAt": "2020-06-20T08:06:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY3OTgxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzIwODU4NA==", "url": "https://github.com/apache/helix/pull/1072#discussion_r447208584", "bodyText": "The main concern is that you introduced some internal logic that is not configurable or commented directly where the variables are defined. Who will be able to tell the margin is derived by the default max buffer size and the default size limit?\nFirst, this logic is not reasonable, why the margin is based on the default configs? Secondly, it introduces more chaos to our code.", "author": "jiajunwang", "createdAt": "2020-06-29T19:40:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY3OTgxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzIxMDk2Nw==", "url": "https://github.com/apache/helix/pull/1072#discussion_r447210967", "bodyText": "Just add a MARGIN value please.", "author": "jiajunwang", "createdAt": "2020-06-29T19:44:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY3OTgxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTM3NTE0Mw==", "url": "https://github.com/apache/helix/pull/1072#discussion_r449375143", "bodyText": "Same reply above: @jiajunwang Rethinking about this, I don't think we need this margin. Eg. if we set jute.maxbuffer=1024KB, with the margin=24KB, when we write a znode 1023KB, it fails because 1023KB > 1000KB. This is confusing. So I think we should not bring in the 24KB into custom jute.maxbuffer. Same as ZNRecord serializer write size limit, if we set it, we use the number directly without subtracting the margin.\nSo I think it is clear and transparent to use the configured value without subtracting the margin. What do you think?\nLet's use the thread above to discuss.", "author": "huizhilu", "createdAt": "2020-07-03T04:55:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY3OTgxMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY4MDI4Mw==", "url": "https://github.com/apache/helix/pull/1072#discussion_r439680283", "bodyText": "With compression on, the serializer may always return a much smaller package than the input size.\nSo do we have to fail it here?\nIt is debatable.", "author": "jiajunwang", "createdAt": "2020-06-12T23:36:22Z", "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -2216,4 +2236,24 @@ private void validateCurrentThread() {\n       throw new IllegalArgumentException(\"Must not be done in the zookeeper event thread.\");\n     }\n   }\n+\n+  private void validateWriteSizeLimitConfig() {\n+    int serializerSize = ZNRecordUtil.getSerializerWriteSizeLimit();\n+    int zkClientSize = getWriteSizeLimit();\n+    // ZNRecord serializer write size limit should not be set greater than size limit in ZkClient\n+    if (serializerSize > zkClientSize) {\n+      throw new IllegalStateException(\"ZNRecord serializer write size limit: \" + serializerSize", "originalCommit": "77e0198c0f371a34b716a3df5b95da9e44ef1b80", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzExMjc0Mw==", "url": "https://github.com/apache/helix/pull/1072#discussion_r443112743", "bodyText": "In this case, we could add one more check for compression on/off. If compression is turned on, we allow serializerSize > zkClientSize. Agreed?", "author": "huizhilu", "createdAt": "2020-06-20T08:19:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY4MDI4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzIxNDgzMw==", "url": "https://github.com/apache/helix/pull/1072#discussion_r447214833", "bodyText": "Let's just keep it strict for now.", "author": "jiajunwang", "createdAt": "2020-06-29T19:52:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY4MDI4Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzIxNDE0NQ==", "url": "https://github.com/apache/helix/pull/1072#discussion_r447214145", "bodyText": "So according to what I comment before, the logic here can be,\nif (value of ZkSystemPropertyKeys.JUTE_MAXBUFFER exits) {\nreturn value of ZkSystemPropertyKeys.JUTE_MAXBUFFER - MARGIN;\n} else {\nreturn SIZE_LIMIT;\n}", "author": "jiajunwang", "createdAt": "2020-06-29T19:50:58Z", "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -2216,4 +2236,24 @@ private void validateCurrentThread() {\n       throw new IllegalArgumentException(\"Must not be done in the zookeeper event thread.\");\n     }\n   }\n+\n+  private void validateWriteSizeLimitConfig() {\n+    int serializerSize = ZNRecordUtil.getSerializerWriteSizeLimit();\n+    int zkClientSize = getWriteSizeLimit();\n+    // ZNRecord serializer write size limit should not be set greater than size limit in ZkClient\n+    if (serializerSize > zkClientSize) {\n+      throw new IllegalStateException(\"ZNRecord serializer write size limit: \" + serializerSize\n+          + \" is greater than size limit in ZkClient: \" + zkClientSize);\n+    }\n+  }\n+\n+  private int getWriteSizeLimit() {\n+    // The size margin left in default SIZE_LIMIT\n+    int sizeMargin = DEFAULT_JUTE_MAXBUFFER - ZNRecord.SIZE_LIMIT;\n+\n+    // jute.maxbuffer is not directly used as size limit in ZkClient.\n+    // Instead, leave some margin as ZNRecord.SIZE_LIMIT and use (jute.maxbuffer - sizeMargin)\n+    return Integer.getInteger(ZkSystemPropertyKeys.JUTE_MAXBUFFER, DEFAULT_JUTE_MAXBUFFER)", "originalCommit": "77e0198c0f371a34b716a3df5b95da9e44ef1b80", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "ade67df91ecd1d10ac10c554aa2b0d24e9bb53ea", "url": "https://github.com/apache/helix/commit/ade67df91ecd1d10ac10c554aa2b0d24e9bb53ea", "message": "Remove margin.", "committedDate": "2020-07-03T05:21:40Z", "type": "forcePushed"}, {"oid": "09f83d07f466294dd9c38909eac3435a88b75d67", "url": "https://github.com/apache/helix/commit/09f83d07f466294dd9c38909eac3435a88b75d67", "message": "Remove margin.", "committedDate": "2020-07-03T05:24:14Z", "type": "forcePushed"}, {"oid": "64c49d3f35b1e8ea69f61e988657a6272b0869dc", "url": "https://github.com/apache/helix/commit/64c49d3f35b1e8ea69f61e988657a6272b0869dc", "message": "Use jute.maxbuffer size limit in zkclient", "committedDate": "2020-10-22T23:51:29Z", "type": "forcePushed"}, {"oid": "6c8391fdda8cc8cbe2f27e4eb3c1f9831636d8c9", "url": "https://github.com/apache/helix/commit/6c8391fdda8cc8cbe2f27e4eb3c1f9831636d8c9", "message": "Use jute.maxbuffer size limit in zkclient", "committedDate": "2020-10-22T23:56:30Z", "type": "forcePushed"}, {"oid": "1121b8fa8e86fc6513a2726cba7f4029dae9c7f8", "url": "https://github.com/apache/helix/commit/1121b8fa8e86fc6513a2726cba7f4029dae9c7f8", "message": "Use jute.maxbuffer size limit in zkclient", "committedDate": "2020-10-23T00:04:40Z", "type": "forcePushed"}, {"oid": "deef5f04141035ef1ff836f09af93cf1195a7222", "url": "https://github.com/apache/helix/commit/deef5f04141035ef1ff836f09af93cf1195a7222", "message": "Use jute.maxbuffer size limit in zkclient", "committedDate": "2020-10-23T00:07:11Z", "type": "commit"}, {"oid": "deef5f04141035ef1ff836f09af93cf1195a7222", "url": "https://github.com/apache/helix/commit/deef5f04141035ef1ff836f09af93cf1195a7222", "message": "Use jute.maxbuffer size limit in zkclient", "committedDate": "2020-10-23T00:07:11Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTAxNjE0Nw==", "url": "https://github.com/apache/helix/pull/1072#discussion_r511016147", "bodyText": "Zookeeper has this String def since 3.5.2. It is in class ZKConfig.java. Please add a TODO here so we can use this one after we bump up the ZK version.", "author": "jiajunwang", "createdAt": "2020-10-23T16:56:09Z", "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/constant/ZkSystemPropertyKeys.java", "diffHunk": "@@ -60,4 +60,7 @@\n    */\n   public static final String ZK_AUTOSYNC_ENABLED =\n       \"zk.zkclient.autosync.enabled\";\n+\n+  /** System property key for jute.maxbuffer */", "originalCommit": "deef5f04141035ef1ff836f09af93cf1195a7222", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTAxODE4MQ==", "url": "https://github.com/apache/helix/pull/1072#discussion_r511018181", "bodyText": "nit, but I prefer not to repeat the message that has been mentioned in the exception in the code comment.", "author": "jiajunwang", "createdAt": "2020-10-23T16:59:56Z", "path": "zookeeper-api/src/main/java/org/apache/helix/zookeeper/zkclient/ZkClient.java", "diffHunk": "@@ -2492,4 +2500,15 @@ private void checkNumChildrenLimit(String path) throws KeeperException {\n           stat.getNumChildren(), NUM_CHILDREN_LIMIT);\n     }\n   }\n+\n+  private void validateWriteSizeLimitConfig() {\n+    int serializerSize = ZNRecordUtil.getSerializerWriteSizeLimit();\n+    LOG.info(\"ZNRecord serializer write size limit: {}; ZkClient write size limit: {}\",\n+        serializerSize, WRITE_SIZE_LIMIT);\n+    // ZNRecord serializer write size limit should not be set greater than size limit in ZkClient", "originalCommit": "deef5f04141035ef1ff836f09af93cf1195a7222", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "9b8f5bef9cd03ae5aefe39544b624c7ef367273b", "url": "https://github.com/apache/helix/commit/9b8f5bef9cd03ae5aefe39544b624c7ef367273b", "message": "Add todo to use ZKConfig JUTE_MAXBUFFER", "committedDate": "2020-10-26T20:14:51Z", "type": "commit"}]}