{"pr_number": 1011, "pr_title": "Add CRUD endpoints to TaskDriver for configurable thread pool size support", "pr_createdAt": "2020-05-15T00:09:38Z", "pr_url": "https://github.com/apache/helix/pull/1011", "timeline": [{"oid": "8c273a3327d0a0bf9deb8057af0b1fb881792b8f", "url": "https://github.com/apache/helix/commit/8c273a3327d0a0bf9deb8057af0b1fb881792b8f", "message": "Added CRUD and tests", "committedDate": "2020-05-14T21:57:46Z", "type": "commit"}, {"oid": "c50fbf55bef3c451d1fb101d0e9cec69ea6ded8c", "url": "https://github.com/apache/helix/commit/c50fbf55bef3c451d1fb101d0e9cec69ea6ded8c", "message": "Better javadoc", "committedDate": "2020-05-15T00:07:57Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQ5ODg5MQ==", "url": "https://github.com/apache/helix/pull/1011#discussion_r425498891", "bodyText": "can you create a private method with these common lines to avoid duplication?", "author": "jiajunwang", "createdAt": "2020-05-15T00:19:08Z", "path": "helix-core/src/main/java/org/apache/helix/task/TaskDriver.java", "diffHunk": "@@ -1137,4 +1140,89 @@ private void validateZKNodeLimitation(int newConfigNodeCount) {\n           \"Cannot create more workflows or jobs because there are already too many items created in the path CONFIGS.\");\n     }\n   }\n+\n+  /**\n+   * Get the target task thread pool size of an instance, a value that's used to construct the task\n+   * thread pool and is created by users.\n+   * @param instanceName - name of the instance\n+   * @return the target task thread pool size of the instance\n+   */\n+  public int getTargetTaskThreadPoolSize(String instanceName) {\n+    InstanceConfig instanceConfig =", "originalCommit": "c50fbf55bef3c451d1fb101d0e9cec69ea6ded8c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQ5OTA1OA==", "url": "https://github.com/apache/helix/pull/1011#discussion_r425499058", "bodyText": "Same here. Duplicate code.", "author": "jiajunwang", "createdAt": "2020-05-15T00:19:42Z", "path": "helix-core/src/main/java/org/apache/helix/task/TaskDriver.java", "diffHunk": "@@ -1137,4 +1140,89 @@ private void validateZKNodeLimitation(int newConfigNodeCount) {\n           \"Cannot create more workflows or jobs because there are already too many items created in the path CONFIGS.\");\n     }\n   }\n+\n+  /**\n+   * Get the target task thread pool size of an instance, a value that's used to construct the task\n+   * thread pool and is created by users.\n+   * @param instanceName - name of the instance\n+   * @return the target task thread pool size of the instance\n+   */\n+  public int getTargetTaskThreadPoolSize(String instanceName) {\n+    InstanceConfig instanceConfig =\n+        _accessor.getProperty(_accessor.keyBuilder().instanceConfig(instanceName));\n+    if (instanceConfig == null) {\n+      throw new IllegalArgumentException(\n+          \"Failed to find InstanceConfig with provided instance name \" + instanceName);\n+    }\n+\n+    return instanceConfig.getTargetTaskThreadPoolSize();\n+  }\n+\n+  /**\n+   * Set the target task thread pool size of an instance. The target task thread pool size goes to\n+   * InstanceConfig, and is used to construct the task thread pool. The construction of thread pool\n+   * requires JVM restart after the target value has been set.\n+   * @param instanceName - name of the instance\n+   * @param targetTaskThreadPoolSize - the target task thread pool size of the instance\n+   */\n+  public void setTargetTaskThreadPoolSize(String instanceName, int targetTaskThreadPoolSize) {\n+    InstanceConfig instanceConfig =\n+        _accessor.getProperty(_accessor.keyBuilder().instanceConfig(instanceName));\n+    if (instanceConfig == null) {\n+      throw new IllegalArgumentException(\n+          \"Failed to find InstanceConfig with provided instance name \" + instanceName + \"!\");\n+    }\n+\n+    instanceConfig.setTargetTaskThreadPoolSize(targetTaskThreadPoolSize);\n+  }\n+\n+  /**\n+   * Get the global target task thread pool size of the cluster, a value that's used to construct\n+   * task thread pools for the cluster's instances and is created by users.\n+   * @return the global target task thread pool size of the cluster\n+   */\n+  public int getGlobalTargetTaskThreadPoolSize() {\n+    ClusterConfig clusterConfig = _accessor.getProperty(_accessor.keyBuilder().clusterConfig());", "originalCommit": "c50fbf55bef3c451d1fb101d0e9cec69ea6ded8c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTUzMzMzNw==", "url": "https://github.com/apache/helix/pull/1011#discussion_r425533337", "bodyText": "A better way to say this is \"the newly-set task thread pool size will take effect upon a JVM restart\"", "author": "narendly", "createdAt": "2020-05-15T02:35:29Z", "path": "helix-core/src/main/java/org/apache/helix/task/TaskDriver.java", "diffHunk": "@@ -1137,4 +1140,89 @@ private void validateZKNodeLimitation(int newConfigNodeCount) {\n           \"Cannot create more workflows or jobs because there are already too many items created in the path CONFIGS.\");\n     }\n   }\n+\n+  /**\n+   * Get the target task thread pool size of an instance, a value that's used to construct the task\n+   * thread pool and is created by users.\n+   * @param instanceName - name of the instance\n+   * @return the target task thread pool size of the instance\n+   */\n+  public int getTargetTaskThreadPoolSize(String instanceName) {\n+    InstanceConfig instanceConfig =\n+        _accessor.getProperty(_accessor.keyBuilder().instanceConfig(instanceName));\n+    if (instanceConfig == null) {\n+      throw new IllegalArgumentException(\n+          \"Failed to find InstanceConfig with provided instance name \" + instanceName);\n+    }\n+\n+    return instanceConfig.getTargetTaskThreadPoolSize();\n+  }\n+\n+  /**\n+   * Set the target task thread pool size of an instance. The target task thread pool size goes to\n+   * InstanceConfig, and is used to construct the task thread pool. The construction of thread pool\n+   * requires JVM restart after the target value has been set.", "originalCommit": "c50fbf55bef3c451d1fb101d0e9cec69ea6ded8c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTUzNDI3MA==", "url": "https://github.com/apache/helix/pull/1011#discussion_r425534270", "bodyText": "Nit: add the cluster name here as well?", "author": "narendly", "createdAt": "2020-05-15T02:39:08Z", "path": "helix-core/src/main/java/org/apache/helix/task/TaskDriver.java", "diffHunk": "@@ -1137,4 +1140,89 @@ private void validateZKNodeLimitation(int newConfigNodeCount) {\n           \"Cannot create more workflows or jobs because there are already too many items created in the path CONFIGS.\");\n     }\n   }\n+\n+  /**\n+   * Get the target task thread pool size of an instance, a value that's used to construct the task\n+   * thread pool and is created by users.\n+   * @param instanceName - name of the instance\n+   * @return the target task thread pool size of the instance\n+   */\n+  public int getTargetTaskThreadPoolSize(String instanceName) {\n+    InstanceConfig instanceConfig =\n+        _accessor.getProperty(_accessor.keyBuilder().instanceConfig(instanceName));\n+    if (instanceConfig == null) {\n+      throw new IllegalArgumentException(\n+          \"Failed to find InstanceConfig with provided instance name \" + instanceName);\n+    }\n+\n+    return instanceConfig.getTargetTaskThreadPoolSize();\n+  }\n+\n+  /**\n+   * Set the target task thread pool size of an instance. The target task thread pool size goes to\n+   * InstanceConfig, and is used to construct the task thread pool. The construction of thread pool\n+   * requires JVM restart after the target value has been set.\n+   * @param instanceName - name of the instance\n+   * @param targetTaskThreadPoolSize - the target task thread pool size of the instance\n+   */\n+  public void setTargetTaskThreadPoolSize(String instanceName, int targetTaskThreadPoolSize) {\n+    InstanceConfig instanceConfig =\n+        _accessor.getProperty(_accessor.keyBuilder().instanceConfig(instanceName));\n+    if (instanceConfig == null) {\n+      throw new IllegalArgumentException(\n+          \"Failed to find InstanceConfig with provided instance name \" + instanceName + \"!\");\n+    }\n+\n+    instanceConfig.setTargetTaskThreadPoolSize(targetTaskThreadPoolSize);\n+  }\n+\n+  /**\n+   * Get the global target task thread pool size of the cluster, a value that's used to construct\n+   * task thread pools for the cluster's instances and is created by users.\n+   * @return the global target task thread pool size of the cluster\n+   */\n+  public int getGlobalTargetTaskThreadPoolSize() {\n+    ClusterConfig clusterConfig = _accessor.getProperty(_accessor.keyBuilder().clusterConfig());\n+    if (clusterConfig == null) {\n+      throw new IllegalStateException(\"Failed to find ClusterConfig!\");", "originalCommit": "c50fbf55bef3c451d1fb101d0e9cec69ea6ded8c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTUzNDM0MA==", "url": "https://github.com/apache/helix/pull/1011#discussion_r425534340", "bodyText": "Nit: add cluster name?", "author": "narendly", "createdAt": "2020-05-15T02:39:24Z", "path": "helix-core/src/main/java/org/apache/helix/task/TaskDriver.java", "diffHunk": "@@ -1137,4 +1140,89 @@ private void validateZKNodeLimitation(int newConfigNodeCount) {\n           \"Cannot create more workflows or jobs because there are already too many items created in the path CONFIGS.\");\n     }\n   }\n+\n+  /**\n+   * Get the target task thread pool size of an instance, a value that's used to construct the task\n+   * thread pool and is created by users.\n+   * @param instanceName - name of the instance\n+   * @return the target task thread pool size of the instance\n+   */\n+  public int getTargetTaskThreadPoolSize(String instanceName) {\n+    InstanceConfig instanceConfig =\n+        _accessor.getProperty(_accessor.keyBuilder().instanceConfig(instanceName));\n+    if (instanceConfig == null) {\n+      throw new IllegalArgumentException(\n+          \"Failed to find InstanceConfig with provided instance name \" + instanceName);\n+    }\n+\n+    return instanceConfig.getTargetTaskThreadPoolSize();\n+  }\n+\n+  /**\n+   * Set the target task thread pool size of an instance. The target task thread pool size goes to\n+   * InstanceConfig, and is used to construct the task thread pool. The construction of thread pool\n+   * requires JVM restart after the target value has been set.\n+   * @param instanceName - name of the instance\n+   * @param targetTaskThreadPoolSize - the target task thread pool size of the instance\n+   */\n+  public void setTargetTaskThreadPoolSize(String instanceName, int targetTaskThreadPoolSize) {\n+    InstanceConfig instanceConfig =\n+        _accessor.getProperty(_accessor.keyBuilder().instanceConfig(instanceName));\n+    if (instanceConfig == null) {\n+      throw new IllegalArgumentException(\n+          \"Failed to find InstanceConfig with provided instance name \" + instanceName + \"!\");\n+    }\n+\n+    instanceConfig.setTargetTaskThreadPoolSize(targetTaskThreadPoolSize);\n+  }\n+\n+  /**\n+   * Get the global target task thread pool size of the cluster, a value that's used to construct\n+   * task thread pools for the cluster's instances and is created by users.\n+   * @return the global target task thread pool size of the cluster\n+   */\n+  public int getGlobalTargetTaskThreadPoolSize() {\n+    ClusterConfig clusterConfig = _accessor.getProperty(_accessor.keyBuilder().clusterConfig());\n+    if (clusterConfig == null) {\n+      throw new IllegalStateException(\"Failed to find ClusterConfig!\");\n+    }\n+\n+    return clusterConfig.getGlobalTargetTaskThreadPoolSize();\n+  }\n+\n+  /**\n+   * Set the global target task thread pool size of the cluster. The global target task thread pool\n+   * size goes to ClusterConfig, and is applied to all instances of the cluster. If an instance\n+   * doesn't specify its target thread pool size in InstanceConfig, then this value in ClusterConfig\n+   * will be used to construct its task thread pool. The construction of thread pools requires JVM\n+   * restart. If none of the global and per-instance target thread pool sizes are set, a default\n+   * size will be used.\n+   * @param globalTargetTaskThreadPoolSize - the global target task thread pool size of the cluster\n+   */\n+  public void setGlobalTargetTaskThreadPoolSize(int globalTargetTaskThreadPoolSize) {\n+    ClusterConfig clusterConfig = _accessor.getProperty(_accessor.keyBuilder().clusterConfig());\n+    if (clusterConfig == null) {\n+      throw new IllegalStateException(\"Failed to find ClusterConfig!\");", "originalCommit": "c50fbf55bef3c451d1fb101d0e9cec69ea6ded8c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "4689bc861b975650c551d375689ef75256be0a70", "url": "https://github.com/apache/helix/commit/4689bc861b975650c551d375689ef75256be0a70", "message": "Address comments", "committedDate": "2020-05-15T19:20:47Z", "type": "commit"}]}