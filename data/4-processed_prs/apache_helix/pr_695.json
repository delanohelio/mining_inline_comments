{"pr_number": 695, "pr_title": "Modify participant manager to add cluster auto registration logic", "pr_createdAt": "2020-01-22T17:07:25Z", "pr_url": "https://github.com/apache/helix/pull/695", "timeline": [{"oid": "b588375eae9c37d21638d069f2b341e81eb3f7d9", "url": "https://github.com/apache/helix/commit/b588375eae9c37d21638d069f2b341e81eb3f7d9", "message": "Modify participant manager to add cluster auto registration logic", "committedDate": "2020-01-22T17:14:15Z", "type": "commit"}, {"oid": "b588375eae9c37d21638d069f2b341e81eb3f7d9", "url": "https://github.com/apache/helix/commit/b588375eae9c37d21638d069f2b341e81eb3f7d9", "message": "Modify participant manager to add cluster auto registration logic", "committedDate": "2020-01-22T17:14:15Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU2MjY2MQ==", "url": "https://github.com/apache/helix/pull/695#discussion_r371562661", "bodyText": "Can you add a log for this exception?", "author": "alirezazamani", "createdAt": "2020-01-28T00:50:51Z", "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ParticipantManager.java", "diffHunk": "@@ -132,42 +139,102 @@ public void handleNewSession() throws Exception {\n   }\n \n   private void joinCluster() {\n-    // Read cluster config and see if instance can auto join the cluster\n+    // Read cluster config and see if an instance can auto join or auto register to the cluster\n     boolean autoJoin = false;\n+    boolean autoRegistration = false;\n     try {\n-      HelixConfigScope scope =\n-          new HelixConfigScopeBuilder(ConfigScopeProperty.CLUSTER).forCluster(\n-              _manager.getClusterName()).build();\n-      autoJoin =\n-          Boolean.parseBoolean(_configAccessor.get(scope,\n-              ZKHelixManager.ALLOW_PARTICIPANT_AUTO_JOIN));\n+      HelixConfigScope scope = new HelixConfigScopeBuilder(ConfigScopeProperty.CLUSTER)\n+          .forCluster(_manager.getClusterName()).build();\n+      autoJoin = Boolean\n+          .parseBoolean(_configAccessor.get(scope, ZKHelixManager.ALLOW_PARTICIPANT_AUTO_JOIN));\n       LOG.info(\"instance: \" + _instanceName + \" auto-joining \" + _clusterName + \" is \" + autoJoin);\n     } catch (Exception e) {\n       // autoJoin is false\n     }\n \n+    // Read cloud config and see if an instance can auto register to the cluster\n+    try {\n+      autoRegistration =\n+          Boolean.valueOf(_helixManagerProperty.getHelixCloudProperty().getCloudEnabled());\n+      LOG.info(\"instance: \" + _instanceName + \" auto-register \" + _clusterName + \" is \"\n+          + autoRegistration);\n+    } catch (Exception e) {\n+      // autoRegistration is false", "originalCommit": "b588375eae9c37d21638d069f2b341e81eb3f7d9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU2MzAwNw==", "url": "https://github.com/apache/helix/pull/695#discussion_r371563007", "bodyText": "Question: Why do we need to add instance config here?", "author": "alirezazamani", "createdAt": "2020-01-28T00:52:16Z", "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ParticipantManager.java", "diffHunk": "@@ -132,42 +139,102 @@ public void handleNewSession() throws Exception {\n   }\n \n   private void joinCluster() {\n-    // Read cluster config and see if instance can auto join the cluster\n+    // Read cluster config and see if an instance can auto join or auto register to the cluster\n     boolean autoJoin = false;\n+    boolean autoRegistration = false;\n     try {\n-      HelixConfigScope scope =\n-          new HelixConfigScopeBuilder(ConfigScopeProperty.CLUSTER).forCluster(\n-              _manager.getClusterName()).build();\n-      autoJoin =\n-          Boolean.parseBoolean(_configAccessor.get(scope,\n-              ZKHelixManager.ALLOW_PARTICIPANT_AUTO_JOIN));\n+      HelixConfigScope scope = new HelixConfigScopeBuilder(ConfigScopeProperty.CLUSTER)\n+          .forCluster(_manager.getClusterName()).build();\n+      autoJoin = Boolean\n+          .parseBoolean(_configAccessor.get(scope, ZKHelixManager.ALLOW_PARTICIPANT_AUTO_JOIN));\n       LOG.info(\"instance: \" + _instanceName + \" auto-joining \" + _clusterName + \" is \" + autoJoin);\n     } catch (Exception e) {\n       // autoJoin is false\n     }\n \n+    // Read cloud config and see if an instance can auto register to the cluster\n+    try {\n+      autoRegistration =\n+          Boolean.valueOf(_helixManagerProperty.getHelixCloudProperty().getCloudEnabled());\n+      LOG.info(\"instance: \" + _instanceName + \" auto-register \" + _clusterName + \" is \"\n+          + autoRegistration);\n+    } catch (Exception e) {\n+      // autoRegistration is false\n+    }\n+\n     if (!ZKUtil.isInstanceSetup(_zkclient, _clusterName, _instanceName, _instanceType)) {\n       if (!autoJoin) {\n         throw new HelixException(\"Initial cluster structure is not set up for instance: \"\n             + _instanceName + \", instanceType: \" + _instanceType);\n       } else {\n-        LOG.info(_instanceName + \" is auto-joining cluster: \" + _clusterName);\n-        InstanceConfig instanceConfig = new InstanceConfig(_instanceName);\n-        String hostName = _instanceName;\n-        String port = \"\";\n-        int lastPos = _instanceName.lastIndexOf(\"_\");\n-        if (lastPos > 0) {\n-          hostName = _instanceName.substring(0, lastPos);\n-          port = _instanceName.substring(lastPos + 1);\n+        if (!autoRegistration) {\n+          LOG.info(_instanceName + \" is auto-joining cluster: \" + _clusterName);\n+          addInstanceConfig(null);", "originalCommit": "b588375eae9c37d21638d069f2b341e81eb3f7d9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzI4Mjg4MQ==", "url": "https://github.com/apache/helix/pull/695#discussion_r373282881", "bodyText": "This is for backward compatibility with current \"auto-join\" logic. For \"auto-join\", it will populate all instance config to Zookeeper except \"domain\" information.", "author": "zhangmeng916", "createdAt": "2020-01-31T01:44:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU2MzAwNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjcxMzgwMA==", "url": "https://github.com/apache/helix/pull/695#discussion_r372713800", "bodyText": "I would suggest to refactor code to be:\nString domainInfo = null;\nif (autoRegistration) {\n..... do the logic as following\n}\naddInstanceConfig(domainInfo);\nPassing null explicit looks awkward to me.", "author": "junkaixue", "createdAt": "2020-01-30T01:04:25Z", "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ParticipantManager.java", "diffHunk": "@@ -132,42 +139,102 @@ public void handleNewSession() throws Exception {\n   }\n \n   private void joinCluster() {\n-    // Read cluster config and see if instance can auto join the cluster\n+    // Read cluster config and see if an instance can auto join or auto register to the cluster\n     boolean autoJoin = false;\n+    boolean autoRegistration = false;\n     try {\n-      HelixConfigScope scope =\n-          new HelixConfigScopeBuilder(ConfigScopeProperty.CLUSTER).forCluster(\n-              _manager.getClusterName()).build();\n-      autoJoin =\n-          Boolean.parseBoolean(_configAccessor.get(scope,\n-              ZKHelixManager.ALLOW_PARTICIPANT_AUTO_JOIN));\n+      HelixConfigScope scope = new HelixConfigScopeBuilder(ConfigScopeProperty.CLUSTER)\n+          .forCluster(_manager.getClusterName()).build();\n+      autoJoin = Boolean\n+          .parseBoolean(_configAccessor.get(scope, ZKHelixManager.ALLOW_PARTICIPANT_AUTO_JOIN));\n       LOG.info(\"instance: \" + _instanceName + \" auto-joining \" + _clusterName + \" is \" + autoJoin);\n     } catch (Exception e) {\n       // autoJoin is false\n     }\n \n+    // Read cloud config and see if an instance can auto register to the cluster\n+    try {\n+      autoRegistration =\n+          Boolean.valueOf(_helixManagerProperty.getHelixCloudProperty().getCloudEnabled());\n+      LOG.info(\"instance: \" + _instanceName + \" auto-register \" + _clusterName + \" is \"\n+          + autoRegistration);\n+    } catch (Exception e) {\n+      // autoRegistration is false\n+    }\n+\n     if (!ZKUtil.isInstanceSetup(_zkclient, _clusterName, _instanceName, _instanceType)) {\n       if (!autoJoin) {\n         throw new HelixException(\"Initial cluster structure is not set up for instance: \"\n             + _instanceName + \", instanceType: \" + _instanceType);\n       } else {\n-        LOG.info(_instanceName + \" is auto-joining cluster: \" + _clusterName);\n-        InstanceConfig instanceConfig = new InstanceConfig(_instanceName);\n-        String hostName = _instanceName;\n-        String port = \"\";\n-        int lastPos = _instanceName.lastIndexOf(\"_\");\n-        if (lastPos > 0) {\n-          hostName = _instanceName.substring(0, lastPos);\n-          port = _instanceName.substring(lastPos + 1);\n+        if (!autoRegistration) {\n+          LOG.info(_instanceName + \" is auto-joining cluster: \" + _clusterName);\n+          addInstanceConfig(null);\n+        } else {", "originalCommit": "b588375eae9c37d21638d069f2b341e81eb3f7d9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDkwOTMzMQ==", "url": "https://github.com/apache/helix/pull/695#discussion_r374909331", "bodyText": "Was this updated?", "author": "junkaixue", "createdAt": "2020-02-04T20:38:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjcxMzgwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk0NTEwNg==", "url": "https://github.com/apache/helix/pull/695#discussion_r374945106", "bodyText": "Yeah, I updated it as something below:\nInstanceConfig instanceConfig = HelixUtil.composeInstanceConfig(_instanceName);\ninstanceConfig.setDomain(domain);\n_helixAdmin.addInstance(_clusterName, instanceConfig);\nCan you check whether you can see the change?", "author": "zhangmeng916", "createdAt": "2020-02-04T21:55:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjcxMzgwMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjcxNDA5NA==", "url": "https://github.com/apache/helix/pull/695#discussion_r372714094", "bodyText": "Any reason to differentiate these exceptions? They looked like instantiation failure.", "author": "junkaixue", "createdAt": "2020-01-30T01:05:36Z", "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ParticipantManager.java", "diffHunk": "@@ -132,42 +139,102 @@ public void handleNewSession() throws Exception {\n   }\n \n   private void joinCluster() {\n-    // Read cluster config and see if instance can auto join the cluster\n+    // Read cluster config and see if an instance can auto join or auto register to the cluster\n     boolean autoJoin = false;\n+    boolean autoRegistration = false;\n     try {\n-      HelixConfigScope scope =\n-          new HelixConfigScopeBuilder(ConfigScopeProperty.CLUSTER).forCluster(\n-              _manager.getClusterName()).build();\n-      autoJoin =\n-          Boolean.parseBoolean(_configAccessor.get(scope,\n-              ZKHelixManager.ALLOW_PARTICIPANT_AUTO_JOIN));\n+      HelixConfigScope scope = new HelixConfigScopeBuilder(ConfigScopeProperty.CLUSTER)\n+          .forCluster(_manager.getClusterName()).build();\n+      autoJoin = Boolean\n+          .parseBoolean(_configAccessor.get(scope, ZKHelixManager.ALLOW_PARTICIPANT_AUTO_JOIN));\n       LOG.info(\"instance: \" + _instanceName + \" auto-joining \" + _clusterName + \" is \" + autoJoin);\n     } catch (Exception e) {\n       // autoJoin is false\n     }\n \n+    // Read cloud config and see if an instance can auto register to the cluster\n+    try {\n+      autoRegistration =\n+          Boolean.valueOf(_helixManagerProperty.getHelixCloudProperty().getCloudEnabled());\n+      LOG.info(\"instance: \" + _instanceName + \" auto-register \" + _clusterName + \" is \"\n+          + autoRegistration);\n+    } catch (Exception e) {\n+      // autoRegistration is false\n+    }\n+\n     if (!ZKUtil.isInstanceSetup(_zkclient, _clusterName, _instanceName, _instanceType)) {\n       if (!autoJoin) {\n         throw new HelixException(\"Initial cluster structure is not set up for instance: \"\n             + _instanceName + \", instanceType: \" + _instanceType);\n       } else {\n-        LOG.info(_instanceName + \" is auto-joining cluster: \" + _clusterName);\n-        InstanceConfig instanceConfig = new InstanceConfig(_instanceName);\n-        String hostName = _instanceName;\n-        String port = \"\";\n-        int lastPos = _instanceName.lastIndexOf(\"_\");\n-        if (lastPos > 0) {\n-          hostName = _instanceName.substring(0, lastPos);\n-          port = _instanceName.substring(lastPos + 1);\n+        if (!autoRegistration) {\n+          LOG.info(_instanceName + \" is auto-joining cluster: \" + _clusterName);\n+          addInstanceConfig(null);\n+        } else {\n+          String cloudInstanceInformationProcessorName =\n+              _helixManagerProperty.getHelixCloudProperty().getCloudInfoProcessorName();\n+          try {\n+            // fetch cloud instance information for the instance\n+            String cloudInstanceInformationProcessorClassName = CLOUD_PROCESSOR_PATH_PREFIX\n+                + _helixManagerProperty.getHelixCloudProperty().getCloudProvider().toLowerCase()\n+                + \".\" + cloudInstanceInformationProcessorName;\n+            Class processorClass = Class.forName(cloudInstanceInformationProcessorClassName);\n+            Constructor constructor = processorClass.getConstructor(HelixCloudProperty.class);\n+            CloudInstanceInformationProcessor processor =\n+                (CloudInstanceInformationProcessor) constructor\n+                    .newInstance(_helixManagerProperty.getHelixCloudProperty());\n+            List<String> responses = processor.fetchCloudInstanceInformation();\n+\n+            // parse cloud instance information for the participant\n+            CloudInstanceInformation cloudInstanceInformation =\n+                processor.parseCloudInstanceInformation(responses);\n+            String domain = cloudInstanceInformation\n+                .get(CloudInstanceInformation.CloudInstanceField.FAULT_DOMAIN.name());\n+            String cloudIdInRemote = cloudInstanceInformation\n+                .get(CloudInstanceInformation.CloudInstanceField.INSTANCE_SET_NAME.name());\n+            String cloudIdInConfig = _configAccessor.getCloudConfig(_clusterName).getCloudID();\n+\n+            // validate that the instance is auto registering to the correct cluster\n+            if (!cloudIdInRemote.equals(cloudIdInConfig)) {\n+              throw new IllegalArgumentException(String.format(\n+                  \"cloudId in config: %s is not consistent with cloudId from remote: %s. The instance is auto registering to a wrong cluster.\",\n+                  cloudIdInConfig, cloudIdInRemote));\n+            }\n+            addInstanceConfig(domain);\n+          } catch (ClassNotFoundException ex) {\n+            throw new HelixException(\n+                \"Passed cloud instance information processor class is not found: \"\n+                    + cloudInstanceInformationProcessorName, ex);\n+          } catch (NoSuchMethodException ex) {\n+            throw new HelixException(\"Failed to get the constructor for the class: \"\n+                + cloudInstanceInformationProcessorName, ex);\n+          } catch (InstantiationException | IllegalAccessException | InvocationTargetException ex) {\n+            throw new HelixException(\"Failed to create a new instance for the class: \"", "originalCommit": "b588375eae9c37d21638d069f2b341e81eb3f7d9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIxODY1Mw==", "url": "https://github.com/apache/helix/pull/695#discussion_r373218653", "bodyText": "nit, final?", "author": "jiajunwang", "createdAt": "2020-01-30T22:04:54Z", "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ParticipantManager.java", "diffHunk": "@@ -61,6 +67,7 @@\n  */\n public class ParticipantManager {\n   private static Logger LOG = LoggerFactory.getLogger(ParticipantManager.class);\n+  private static String CLOUD_PROCESSOR_PATH_PREFIX = \"org.apache.helix.cloud.\";", "originalCommit": "b588375eae9c37d21638d069f2b341e81eb3f7d9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIxOTI0NA==", "url": "https://github.com/apache/helix/pull/695#discussion_r373219244", "bodyText": "So cloud enabled == auto join?\nIf so, let's document it more clear.", "author": "jiajunwang", "createdAt": "2020-01-30T22:06:14Z", "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ParticipantManager.java", "diffHunk": "@@ -132,42 +139,102 @@ public void handleNewSession() throws Exception {\n   }\n \n   private void joinCluster() {\n-    // Read cluster config and see if instance can auto join the cluster\n+    // Read cluster config and see if an instance can auto join or auto register to the cluster\n     boolean autoJoin = false;\n+    boolean autoRegistration = false;\n     try {\n-      HelixConfigScope scope =\n-          new HelixConfigScopeBuilder(ConfigScopeProperty.CLUSTER).forCluster(\n-              _manager.getClusterName()).build();\n-      autoJoin =\n-          Boolean.parseBoolean(_configAccessor.get(scope,\n-              ZKHelixManager.ALLOW_PARTICIPANT_AUTO_JOIN));\n+      HelixConfigScope scope = new HelixConfigScopeBuilder(ConfigScopeProperty.CLUSTER)\n+          .forCluster(_manager.getClusterName()).build();\n+      autoJoin = Boolean\n+          .parseBoolean(_configAccessor.get(scope, ZKHelixManager.ALLOW_PARTICIPANT_AUTO_JOIN));\n       LOG.info(\"instance: \" + _instanceName + \" auto-joining \" + _clusterName + \" is \" + autoJoin);\n     } catch (Exception e) {\n       // autoJoin is false\n     }\n \n+    // Read cloud config and see if an instance can auto register to the cluster\n+    try {\n+      autoRegistration =", "originalCommit": "b588375eae9c37d21638d069f2b341e81eb3f7d9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzI4NjE0Nw==", "url": "https://github.com/apache/helix/pull/695#discussion_r373286147", "bodyText": "when auto join is true, cloudEnabled == auto registration", "author": "zhangmeng916", "createdAt": "2020-01-31T02:01:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIxOTI0NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIyMDA3Mw==", "url": "https://github.com/apache/helix/pull/695#discussion_r373220073", "bodyText": "I think you can have more flat condition. elseif (..) will also work.", "author": "jiajunwang", "createdAt": "2020-01-30T22:08:12Z", "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ParticipantManager.java", "diffHunk": "@@ -132,42 +139,102 @@ public void handleNewSession() throws Exception {\n   }\n \n   private void joinCluster() {\n-    // Read cluster config and see if instance can auto join the cluster\n+    // Read cluster config and see if an instance can auto join or auto register to the cluster\n     boolean autoJoin = false;\n+    boolean autoRegistration = false;\n     try {\n-      HelixConfigScope scope =\n-          new HelixConfigScopeBuilder(ConfigScopeProperty.CLUSTER).forCluster(\n-              _manager.getClusterName()).build();\n-      autoJoin =\n-          Boolean.parseBoolean(_configAccessor.get(scope,\n-              ZKHelixManager.ALLOW_PARTICIPANT_AUTO_JOIN));\n+      HelixConfigScope scope = new HelixConfigScopeBuilder(ConfigScopeProperty.CLUSTER)\n+          .forCluster(_manager.getClusterName()).build();\n+      autoJoin = Boolean\n+          .parseBoolean(_configAccessor.get(scope, ZKHelixManager.ALLOW_PARTICIPANT_AUTO_JOIN));\n       LOG.info(\"instance: \" + _instanceName + \" auto-joining \" + _clusterName + \" is \" + autoJoin);\n     } catch (Exception e) {\n       // autoJoin is false\n     }\n \n+    // Read cloud config and see if an instance can auto register to the cluster\n+    try {\n+      autoRegistration =\n+          Boolean.valueOf(_helixManagerProperty.getHelixCloudProperty().getCloudEnabled());\n+      LOG.info(\"instance: \" + _instanceName + \" auto-register \" + _clusterName + \" is \"\n+          + autoRegistration);\n+    } catch (Exception e) {\n+      // autoRegistration is false\n+    }\n+\n     if (!ZKUtil.isInstanceSetup(_zkclient, _clusterName, _instanceName, _instanceType)) {\n       if (!autoJoin) {\n         throw new HelixException(\"Initial cluster structure is not set up for instance: \"\n             + _instanceName + \", instanceType: \" + _instanceType);\n       } else {", "originalCommit": "b588375eae9c37d21638d069f2b341e81eb3f7d9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzU4NzQxOQ==", "url": "https://github.com/apache/helix/pull/695#discussion_r373587419", "bodyText": "The logic is only when an instance is not setup, we will check auto join, if auto join is false, an exception will be thrown since no one will add instance, if auto join is true, we will continue to check auto registration, and decide whether we do auto join or auto registration. This is also for the backward compatibility.", "author": "zhangmeng916", "createdAt": "2020-01-31T17:09:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIyMDA3Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIyMTkwOQ==", "url": "https://github.com/apache/helix/pull/695#discussion_r373221909", "bodyText": "This is a long and standalone logic just for cloud, I guess. Is it possible to hide them into the processor? I remember that we discussed if we can have a factory or builder for the property. It also applied to the processor. If we have one, we can just put all these logic there. And whoever reading participant manager code won't be distracted from the participant logic.", "author": "jiajunwang", "createdAt": "2020-01-30T22:12:46Z", "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ParticipantManager.java", "diffHunk": "@@ -132,42 +139,102 @@ public void handleNewSession() throws Exception {\n   }\n \n   private void joinCluster() {\n-    // Read cluster config and see if instance can auto join the cluster\n+    // Read cluster config and see if an instance can auto join or auto register to the cluster\n     boolean autoJoin = false;\n+    boolean autoRegistration = false;\n     try {\n-      HelixConfigScope scope =\n-          new HelixConfigScopeBuilder(ConfigScopeProperty.CLUSTER).forCluster(\n-              _manager.getClusterName()).build();\n-      autoJoin =\n-          Boolean.parseBoolean(_configAccessor.get(scope,\n-              ZKHelixManager.ALLOW_PARTICIPANT_AUTO_JOIN));\n+      HelixConfigScope scope = new HelixConfigScopeBuilder(ConfigScopeProperty.CLUSTER)\n+          .forCluster(_manager.getClusterName()).build();\n+      autoJoin = Boolean\n+          .parseBoolean(_configAccessor.get(scope, ZKHelixManager.ALLOW_PARTICIPANT_AUTO_JOIN));\n       LOG.info(\"instance: \" + _instanceName + \" auto-joining \" + _clusterName + \" is \" + autoJoin);\n     } catch (Exception e) {\n       // autoJoin is false\n     }\n \n+    // Read cloud config and see if an instance can auto register to the cluster\n+    try {\n+      autoRegistration =\n+          Boolean.valueOf(_helixManagerProperty.getHelixCloudProperty().getCloudEnabled());\n+      LOG.info(\"instance: \" + _instanceName + \" auto-register \" + _clusterName + \" is \"\n+          + autoRegistration);\n+    } catch (Exception e) {\n+      // autoRegistration is false\n+    }\n+\n     if (!ZKUtil.isInstanceSetup(_zkclient, _clusterName, _instanceName, _instanceType)) {\n       if (!autoJoin) {\n         throw new HelixException(\"Initial cluster structure is not set up for instance: \"\n             + _instanceName + \", instanceType: \" + _instanceType);\n       } else {\n-        LOG.info(_instanceName + \" is auto-joining cluster: \" + _clusterName);\n-        InstanceConfig instanceConfig = new InstanceConfig(_instanceName);\n-        String hostName = _instanceName;\n-        String port = \"\";\n-        int lastPos = _instanceName.lastIndexOf(\"_\");\n-        if (lastPos > 0) {\n-          hostName = _instanceName.substring(0, lastPos);\n-          port = _instanceName.substring(lastPos + 1);\n+        if (!autoRegistration) {\n+          LOG.info(_instanceName + \" is auto-joining cluster: \" + _clusterName);\n+          addInstanceConfig(null);\n+        } else {\n+          String cloudInstanceInformationProcessorName =\n+              _helixManagerProperty.getHelixCloudProperty().getCloudInfoProcessorName();\n+          try {", "originalCommit": "b588375eae9c37d21638d069f2b341e81eb3f7d9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzYwMTI5MA==", "url": "https://github.com/apache/helix/pull/695#discussion_r373601290", "bodyText": "I restructured the code a bit by separating those processor specific logic out. I keep the logic in this file is because HelixManagerProperty is only available there and is not a global variable", "author": "zhangmeng916", "createdAt": "2020-01-31T17:42:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIyMTkwOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIyNDA4NQ==", "url": "https://github.com/apache/helix/pull/695#discussion_r373224085", "bodyText": "I feel there has been such a logic. If not, it should be in util anyway.", "author": "jiajunwang", "createdAt": "2020-01-30T22:17:53Z", "path": "helix-core/src/main/java/org/apache/helix/manager/zk/ParticipantManager.java", "diffHunk": "@@ -132,42 +139,102 @@ public void handleNewSession() throws Exception {\n   }\n \n   private void joinCluster() {\n-    // Read cluster config and see if instance can auto join the cluster\n+    // Read cluster config and see if an instance can auto join or auto register to the cluster\n     boolean autoJoin = false;\n+    boolean autoRegistration = false;\n     try {\n-      HelixConfigScope scope =\n-          new HelixConfigScopeBuilder(ConfigScopeProperty.CLUSTER).forCluster(\n-              _manager.getClusterName()).build();\n-      autoJoin =\n-          Boolean.parseBoolean(_configAccessor.get(scope,\n-              ZKHelixManager.ALLOW_PARTICIPANT_AUTO_JOIN));\n+      HelixConfigScope scope = new HelixConfigScopeBuilder(ConfigScopeProperty.CLUSTER)\n+          .forCluster(_manager.getClusterName()).build();\n+      autoJoin = Boolean\n+          .parseBoolean(_configAccessor.get(scope, ZKHelixManager.ALLOW_PARTICIPANT_AUTO_JOIN));\n       LOG.info(\"instance: \" + _instanceName + \" auto-joining \" + _clusterName + \" is \" + autoJoin);\n     } catch (Exception e) {\n       // autoJoin is false\n     }\n \n+    // Read cloud config and see if an instance can auto register to the cluster\n+    try {\n+      autoRegistration =\n+          Boolean.valueOf(_helixManagerProperty.getHelixCloudProperty().getCloudEnabled());\n+      LOG.info(\"instance: \" + _instanceName + \" auto-register \" + _clusterName + \" is \"\n+          + autoRegistration);\n+    } catch (Exception e) {\n+      // autoRegistration is false\n+    }\n+\n     if (!ZKUtil.isInstanceSetup(_zkclient, _clusterName, _instanceName, _instanceType)) {\n       if (!autoJoin) {\n         throw new HelixException(\"Initial cluster structure is not set up for instance: \"\n             + _instanceName + \", instanceType: \" + _instanceType);\n       } else {\n-        LOG.info(_instanceName + \" is auto-joining cluster: \" + _clusterName);\n-        InstanceConfig instanceConfig = new InstanceConfig(_instanceName);\n-        String hostName = _instanceName;\n-        String port = \"\";\n-        int lastPos = _instanceName.lastIndexOf(\"_\");\n-        if (lastPos > 0) {\n-          hostName = _instanceName.substring(0, lastPos);\n-          port = _instanceName.substring(lastPos + 1);\n+        if (!autoRegistration) {\n+          LOG.info(_instanceName + \" is auto-joining cluster: \" + _clusterName);\n+          addInstanceConfig(null);\n+        } else {\n+          String cloudInstanceInformationProcessorName =\n+              _helixManagerProperty.getHelixCloudProperty().getCloudInfoProcessorName();\n+          try {\n+            // fetch cloud instance information for the instance\n+            String cloudInstanceInformationProcessorClassName = CLOUD_PROCESSOR_PATH_PREFIX\n+                + _helixManagerProperty.getHelixCloudProperty().getCloudProvider().toLowerCase()\n+                + \".\" + cloudInstanceInformationProcessorName;\n+            Class processorClass = Class.forName(cloudInstanceInformationProcessorClassName);\n+            Constructor constructor = processorClass.getConstructor(HelixCloudProperty.class);\n+            CloudInstanceInformationProcessor processor =\n+                (CloudInstanceInformationProcessor) constructor\n+                    .newInstance(_helixManagerProperty.getHelixCloudProperty());\n+            List<String> responses = processor.fetchCloudInstanceInformation();\n+\n+            // parse cloud instance information for the participant\n+            CloudInstanceInformation cloudInstanceInformation =\n+                processor.parseCloudInstanceInformation(responses);\n+            String domain = cloudInstanceInformation\n+                .get(CloudInstanceInformation.CloudInstanceField.FAULT_DOMAIN.name());\n+            String cloudIdInRemote = cloudInstanceInformation\n+                .get(CloudInstanceInformation.CloudInstanceField.INSTANCE_SET_NAME.name());\n+            String cloudIdInConfig = _configAccessor.getCloudConfig(_clusterName).getCloudID();\n+\n+            // validate that the instance is auto registering to the correct cluster\n+            if (!cloudIdInRemote.equals(cloudIdInConfig)) {\n+              throw new IllegalArgumentException(String.format(\n+                  \"cloudId in config: %s is not consistent with cloudId from remote: %s. The instance is auto registering to a wrong cluster.\",\n+                  cloudIdInConfig, cloudIdInRemote));\n+            }\n+            addInstanceConfig(domain);\n+          } catch (ClassNotFoundException ex) {\n+            throw new HelixException(\n+                \"Passed cloud instance information processor class is not found: \"\n+                    + cloudInstanceInformationProcessorName, ex);\n+          } catch (NoSuchMethodException ex) {\n+            throw new HelixException(\"Failed to get the constructor for the class: \"\n+                + cloudInstanceInformationProcessorName, ex);\n+          } catch (InstantiationException | IllegalAccessException | InvocationTargetException ex) {\n+            throw new HelixException(\"Failed to create a new instance for the class: \"\n+                + cloudInstanceInformationProcessorName, ex);\n+          }\n         }\n-        instanceConfig.setHostName(hostName);\n-        instanceConfig.setPort(port);\n-        instanceConfig.setInstanceEnabled(true);\n-        _helixAdmin.addInstance(_clusterName, instanceConfig);\n       }\n     }\n   }\n \n+  private void addInstanceConfig(String domainInfo) {\n+    InstanceConfig instanceConfig = new InstanceConfig(_instanceName);\n+    String hostName = _instanceName;", "originalCommit": "b588375eae9c37d21638d069f2b341e81eb3f7d9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "f003d040f68740ca0ce445bf6305e609ac4f58c8", "url": "https://github.com/apache/helix/commit/f003d040f68740ca0ce445bf6305e609ac4f58c8", "message": "fix comments", "committedDate": "2020-01-31T17:42:41Z", "type": "commit"}, {"oid": "35a6c02e3b05997562051e800a211c7592e96179", "url": "https://github.com/apache/helix/commit/35a6c02e3b05997562051e800a211c7592e96179", "message": "comment out some logic", "committedDate": "2020-02-06T17:11:10Z", "type": "commit"}, {"oid": "67e455b80003e1076df500b5f4658b03ccb23939", "url": "https://github.com/apache/helix/commit/67e455b80003e1076df500b5f4658b03ccb23939", "message": "comment out some logic", "committedDate": "2020-02-07T23:32:40Z", "type": "forcePushed"}, {"oid": "35a6c02e3b05997562051e800a211c7592e96179", "url": "https://github.com/apache/helix/commit/35a6c02e3b05997562051e800a211c7592e96179", "message": "comment out some logic", "committedDate": "2020-02-06T17:11:10Z", "type": "forcePushed"}, {"oid": "34e0ed812d24e2a29f76661a51ce77a09a55eb40", "url": "https://github.com/apache/helix/commit/34e0ed812d24e2a29f76661a51ce77a09a55eb40", "message": "resolve conflict", "committedDate": "2020-02-07T23:38:48Z", "type": "commit"}, {"oid": "9c30e31f735a8b73c7ebe9807818d130487c0013", "url": "https://github.com/apache/helix/commit/9c30e31f735a8b73c7ebe9807818d130487c0013", "message": "fix", "committedDate": "2020-02-07T23:39:41Z", "type": "commit"}]}