{"pr_number": 1357, "pr_title": "Add HelixRestObjectNameFactory to create namespaced ObjectName", "pr_createdAt": "2020-09-10T09:37:32Z", "pr_url": "https://github.com/apache/helix/pull/1357", "timeline": [{"oid": "39f16f30e773f280d081a4e556c83f14f316ce64", "url": "https://github.com/apache/helix/commit/39f16f30e773f280d081a4e556c83f14f316ce64", "message": "Add HelixRestObjectNameFactory to create namespaced ObjectName", "committedDate": "2020-09-10T09:43:12Z", "type": "forcePushed"}, {"oid": "c8d9fd7b250b9c03a83e58e842e6e7b88b40ff2c", "url": "https://github.com/apache/helix/commit/c8d9fd7b250b9c03a83e58e842e6e7b88b40ff2c", "message": "Add HelixRestObjectNameFactory to create namespaced ObjectName", "committedDate": "2020-09-10T09:46:54Z", "type": "forcePushed"}, {"oid": "5343c88c91713b39600eba7e0ab23db287f04574", "url": "https://github.com/apache/helix/commit/5343c88c91713b39600eba7e0ab23db287f04574", "message": "Make HelixRestObjectNameFactory only visible within package", "committedDate": "2020-09-10T17:41:55Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODMwNTAzMw==", "url": "https://github.com/apache/helix/pull/1357#discussion_r488305033", "bodyText": "Can 4.1.12 work as we discussed offline?", "author": "jiajunwang", "createdAt": "2020-09-15T00:08:16Z", "path": "helix-core/helix-core-1.0.2-SNAPSHOT.ivy", "diffHunk": "@@ -62,7 +62,7 @@ under the License.\n     <dependency org=\"com.google.guava\" name=\"guava\" rev=\"15.0\" conf=\"compile->compile(default);runtime->runtime(default);default->default\"/>\n     <dependency org=\"org.yaml\" name=\"snakeyaml\" rev=\"1.12\" conf=\"compile->compile(default);runtime->runtime(default);default->default\"/>\n     <dependency org=\"commons-logging\" name=\"commons-logging-api\" rev=\"1.1\" conf=\"compile->compile(*),master(*);runtime->runtime(*)\"/>\n-    <dependency org=\"io.dropwizard.metrics\" name=\"metrics-core\" rev=\"3.2.3\" conf=\"compile->compile(default);runtime->runtime(default);default->default\"/>\n+    <dependency org=\"io.dropwizard.metrics\" name=\"metrics-core\" rev=\"4.1.11\" conf=\"compile->compile(default);runtime->runtime(default);default->default\"/>", "originalCommit": "5343c88c91713b39600eba7e0ab23db287f04574", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODMwNjI3Nw==", "url": "https://github.com/apache/helix/pull/1357#discussion_r488306277", "bodyText": "Why we need these dependencies in the other modules (helix-core and metric-core)? I assume we are just going to use it for helix-rest, no?", "author": "jiajunwang", "createdAt": "2020-09-15T00:12:54Z", "path": "helix-rest/pom.xml", "diffHunk": "@@ -154,6 +154,17 @@\n       <type>test-jar</type>\n       <scope>test</scope>\n     </dependency>\n+    <dependency>\n+      <groupId>io.dropwizard.metrics</groupId>\n+      <artifactId>metrics-jersey2</artifactId>\n+      <version>4.1.11</version>", "originalCommit": "5343c88c91713b39600eba7e0ab23db287f04574", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODMxMTUyNQ==", "url": "https://github.com/apache/helix/pull/1357#discussion_r488311525", "bodyText": "Given this is an internally used class, do we expect any value that needs quote?", "author": "jiajunwang", "createdAt": "2020-09-15T00:30:50Z", "path": "helix-rest/src/main/java/org/apache/helix/rest/server/HelixRestObjectNameFactory.java", "diffHunk": "@@ -0,0 +1,86 @@\n+package org.apache.helix.rest.server;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.Hashtable;\n+import javax.management.MalformedObjectNameException;\n+import javax.management.ObjectName;\n+\n+import com.codahale.metrics.jmx.ObjectNameFactory;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Creates an {@link ObjectName} that has \"name\", \"type\", \"namespace\" properties\n+ * for metrics registry in Helix rest service.\n+ *\n+ * <p>It is recommended to only be used within Helix REST.\n+ */\n+class HelixRestObjectNameFactory implements ObjectNameFactory {\n+  private static final Logger LOG = LoggerFactory.getLogger(HelixRestObjectNameFactory.class);\n+\n+  private static final String KEY_NAME = \"name\";\n+  private static final String KEY_TYPE = \"type\";\n+  private static final String KEY_NAMESPACE = \"namespace\";\n+\n+  public ObjectName createName(String type, String domainNameSpace, String name) {\n+    String[] splits = domainNameSpace.split(\":\");\n+    String domain = splits[0];\n+    String namespace = splits[1];\n+\n+    try {\n+      Hashtable<String, String> properties = new Hashtable<>();\n+      properties.put(KEY_NAME, name);\n+      properties.put(KEY_TYPE, type);\n+      properties.put(KEY_NAMESPACE, namespace);\n+\n+      /*\n+       * The only way we can find out if we need to quote the properties is by", "originalCommit": "5343c88c91713b39600eba7e0ab23db287f04574", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTI0NDI4OQ==", "url": "https://github.com/apache/helix/pull/1357#discussion_r491244289", "bodyText": "I don't think it hurts to have the quote check. Eg. if we use regex, quote is needed: new ObjectName(\"helix*\")", "author": "huizhilu", "createdAt": "2020-09-19T00:30:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODMxMTUyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI0ODg2Nw==", "url": "https://github.com/apache/helix/pull/1357#discussion_r492248867", "bodyText": "I personally prefer less protection so the logic fails earlier during test.\nBut no strong preference here.", "author": "jiajunwang", "createdAt": "2020-09-21T18:03:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODMxMTUyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjMzMTk3OA==", "url": "https://github.com/apache/helix/pull/1357#discussion_r492331978", "bodyText": "I will keep it then.", "author": "huizhilu", "createdAt": "2020-09-21T20:38:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODMxMTUyNQ=="}], "type": "inlineReview"}, {"oid": "4a9b2fc1c9f94b3c1f32a45f5313d8794da58473", "url": "https://github.com/apache/helix/commit/4a9b2fc1c9f94b3c1f32a45f5313d8794da58473", "message": "Add HelixRestObjectNameFactory constructor", "committedDate": "2020-09-19T00:22:26Z", "type": "forcePushed"}, {"oid": "27957995fa8109c64c47a2c6333c0d2b2bd9d8d7", "url": "https://github.com/apache/helix/commit/27957995fa8109c64c47a2c6333c0d2b2bd9d8d7", "message": "Add HelixRestObjectNameFactory constructor", "committedDate": "2020-09-19T00:22:41Z", "type": "forcePushed"}, {"oid": "4510e75cb0e5803382f6e6846579a0fc0b07a373", "url": "https://github.com/apache/helix/commit/4510e75cb0e5803382f6e6846579a0fc0b07a373", "message": "Add HelixRestObjectNameFactory constructor", "committedDate": "2020-09-19T00:27:46Z", "type": "forcePushed"}, {"oid": "e838a26dfe2f051b593ab7e3022d39ca590edab1", "url": "https://github.com/apache/helix/commit/e838a26dfe2f051b593ab7e3022d39ca590edab1", "message": "Add HelixRestObjectNameFactory constructor", "committedDate": "2020-09-19T00:31:55Z", "type": "forcePushed"}, {"oid": "dcc27a727f4e4c67345738d011664126afbb8f09", "url": "https://github.com/apache/helix/commit/dcc27a727f4e4c67345738d011664126afbb8f09", "message": "Add HelixRestObjectNameFactory constructor", "committedDate": "2020-09-19T00:44:30Z", "type": "forcePushed"}, {"oid": "1b40fc544b2e337962c06678e5ac6d282505b36e", "url": "https://github.com/apache/helix/commit/1b40fc544b2e337962c06678e5ac6d282505b36e", "message": "Add HelixRestObjectNameFactory constructor", "committedDate": "2020-09-19T01:36:30Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI1MDExOQ==", "url": "https://github.com/apache/helix/pull/1357#discussion_r492250119", "bodyText": "If you ignore 2 types of info out of 3, then this ObjectName probably does not help us monitoring. So just throw Exception?", "author": "jiajunwang", "createdAt": "2020-09-21T18:05:22Z", "path": "helix-rest/src/main/java/org/apache/helix/rest/server/HelixRestObjectNameFactory.java", "diffHunk": "@@ -0,0 +1,90 @@\n+package org.apache.helix.rest.server;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.Hashtable;\n+import javax.management.MalformedObjectNameException;\n+import javax.management.ObjectName;\n+\n+import com.codahale.metrics.jmx.ObjectNameFactory;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Creates an {@link ObjectName} that has \"name\", \"type\" and \"namespace\" properties\n+ * for metrics registry in Helix rest service.\n+ *\n+ * <p>It is recommended to only be used within Helix REST.\n+ */\n+class HelixRestObjectNameFactory implements ObjectNameFactory {\n+  private static final Logger LOG = LoggerFactory.getLogger(HelixRestObjectNameFactory.class);\n+\n+  private static final String KEY_NAME = \"name\";\n+  private static final String KEY_TYPE = \"type\";\n+  private static final String KEY_NAMESPACE = \"namespace\";\n+\n+  private final String _namespace;\n+\n+  HelixRestObjectNameFactory(String nameSpace) {\n+    _namespace = nameSpace;\n+  }\n+\n+  public ObjectName createName(String type, String domain, String name) {\n+    Hashtable<String, String> properties = new Hashtable<>();\n+\n+    properties.put(KEY_NAME, name);\n+    properties.put(KEY_TYPE, type);\n+    properties.put(KEY_NAMESPACE, _namespace);\n+\n+    try {\n+      /*\n+       * The only way we can find out if we need to quote the properties is by\n+       * checking an ObjectName that we've constructed. Eg. when regex is used in\n+       * object name, quoting is needed.\n+       */\n+      ObjectName objectName = new ObjectName(domain, properties);\n+      boolean needQuote = false;\n+\n+      if (objectName.isDomainPattern()) {\n+        domain = ObjectName.quote(domain);\n+        needQuote = true;\n+      }\n+\n+      if (objectName.isPropertyValuePattern(KEY_NAME)) {\n+        properties.put(KEY_NAME, ObjectName.quote(name));\n+        needQuote = true;\n+      }\n+\n+      if (objectName.isPropertyValuePattern(KEY_TYPE)) {\n+        properties.put(KEY_TYPE, ObjectName.quote(type));\n+        needQuote = true;\n+      }\n+\n+      return needQuote ? new ObjectName(domain, properties) : objectName;\n+    } catch (MalformedObjectNameException e) {\n+      try {\n+        return new ObjectName(domain, KEY_NAME, ObjectName.quote(name));", "originalCommit": "1b40fc544b2e337962c06678e5ac6d282505b36e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjMzNDg3MA==", "url": "https://github.com/apache/helix/pull/1357#discussion_r492334870", "bodyText": "Yep. HelixException is thrown, instead.", "author": "huizhilu", "createdAt": "2020-09-21T20:43:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI1MDExOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI1MDQ3Mw==", "url": "https://github.com/apache/helix/pull/1357#discussion_r492250473", "bodyText": "Do we allow null string input or not?", "author": "jiajunwang", "createdAt": "2020-09-21T18:06:05Z", "path": "helix-rest/src/main/java/org/apache/helix/rest/server/HelixRestObjectNameFactory.java", "diffHunk": "@@ -0,0 +1,90 @@\n+package org.apache.helix.rest.server;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.Hashtable;\n+import javax.management.MalformedObjectNameException;\n+import javax.management.ObjectName;\n+\n+import com.codahale.metrics.jmx.ObjectNameFactory;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Creates an {@link ObjectName} that has \"name\", \"type\" and \"namespace\" properties\n+ * for metrics registry in Helix rest service.\n+ *\n+ * <p>It is recommended to only be used within Helix REST.\n+ */\n+class HelixRestObjectNameFactory implements ObjectNameFactory {\n+  private static final Logger LOG = LoggerFactory.getLogger(HelixRestObjectNameFactory.class);\n+\n+  private static final String KEY_NAME = \"name\";\n+  private static final String KEY_TYPE = \"type\";\n+  private static final String KEY_NAMESPACE = \"namespace\";\n+\n+  private final String _namespace;\n+\n+  HelixRestObjectNameFactory(String nameSpace) {\n+    _namespace = nameSpace;\n+  }\n+\n+  public ObjectName createName(String type, String domain, String name) {", "originalCommit": "1b40fc544b2e337962c06678e5ac6d282505b36e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjMzMjQ0Mw==", "url": "https://github.com/apache/helix/pull/1357#discussion_r492332443", "bodyText": "No. Hashtable has the null check. If any property is null, NPE will be thrown.", "author": "huizhilu", "createdAt": "2020-09-21T20:39:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI1MDQ3Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI1MTI3OQ==", "url": "https://github.com/apache/helix/pull/1357#discussion_r492251279", "bodyText": "When this one is called? Do we need concurrency control?", "author": "jiajunwang", "createdAt": "2020-09-21T18:07:34Z", "path": "helix-rest/src/main/java/org/apache/helix/rest/server/HelixRestServer.java", "diffHunk": "@@ -162,6 +168,24 @@ protected ResourceConfig getResourceConfig(HelixRestNamespace namespace, Servlet\n     return cfg;\n   }\n \n+  /*\n+   * Initialize metric registry and jmx reporter for each namespace.\n+   */\n+  private void initMetricRegistry(ResourceConfig cfg, String namespace) {", "originalCommit": "1b40fc544b2e337962c06678e5ac6d282505b36e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjMzNDU5Nw==", "url": "https://github.com/apache/helix/pull/1357#discussion_r492334597", "bodyText": "This will be called after a servlet is init. We don't need concurrency control same as initServlet()", "author": "huizhilu", "createdAt": "2020-09-21T20:43:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI1MTI3OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjM5MTQ0Nw==", "url": "https://github.com/apache/helix/pull/1357#discussion_r492391447", "bodyText": "What if it throw exception, will it break servlet start or something? I did not see the place to use it.", "author": "junkaixue", "createdAt": "2020-09-21T22:55:59Z", "path": "helix-rest/src/main/java/org/apache/helix/rest/server/HelixRestObjectNameFactory.java", "diffHunk": "@@ -0,0 +1,87 @@\n+package org.apache.helix.rest.server;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.Hashtable;\n+import javax.management.MalformedObjectNameException;\n+import javax.management.ObjectName;\n+\n+import com.codahale.metrics.jmx.ObjectNameFactory;\n+import org.apache.helix.HelixException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Creates an {@link ObjectName} that has \"name\", \"type\" and \"namespace\" properties\n+ * for metrics registry in Helix rest service.\n+ *\n+ * <p>It is recommended to only be used within Helix REST.\n+ */\n+class HelixRestObjectNameFactory implements ObjectNameFactory {\n+  private static final Logger LOG = LoggerFactory.getLogger(HelixRestObjectNameFactory.class);\n+\n+  private static final String KEY_NAME = \"name\";\n+  private static final String KEY_TYPE = \"type\";\n+  private static final String KEY_NAMESPACE = \"namespace\";\n+\n+  private final String _namespace;\n+\n+  HelixRestObjectNameFactory(String nameSpace) {\n+    _namespace = nameSpace;\n+  }\n+\n+  public ObjectName createName(String type, String domain, String name) {\n+    Hashtable<String, String> properties = new Hashtable<>();", "originalCommit": "94389493c268bbc49312012dcffcc4737f90c03a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQxMjA3Ng==", "url": "https://github.com/apache/helix/pull/1357#discussion_r492412076", "bodyText": "@dasahcc Good question. If exception is thrown, servlet/rest server won't be able to start. This method is used in metrics lib's JmxReporter", "author": "huizhilu", "createdAt": "2020-09-22T00:04:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjM5MTQ0Nw=="}], "type": "inlineReview"}, {"oid": "c595e9f8b37cb0f9bab1eb4304a2ed757de690d1", "url": "https://github.com/apache/helix/commit/c595e9f8b37cb0f9bab1eb4304a2ed757de690d1", "message": "Throw helix exception", "committedDate": "2020-09-22T00:03:17Z", "type": "forcePushed"}, {"oid": "7735e57f69cb0da8a305bb7ee9a81a4e0b8680d1", "url": "https://github.com/apache/helix/commit/7735e57f69cb0da8a305bb7ee9a81a4e0b8680d1", "message": "Add HelixRestObjectNameFactory", "committedDate": "2020-09-22T00:43:56Z", "type": "commit"}, {"oid": "7735e57f69cb0da8a305bb7ee9a81a4e0b8680d1", "url": "https://github.com/apache/helix/commit/7735e57f69cb0da8a305bb7ee9a81a4e0b8680d1", "message": "Add HelixRestObjectNameFactory", "committedDate": "2020-09-22T00:43:56Z", "type": "forcePushed"}]}