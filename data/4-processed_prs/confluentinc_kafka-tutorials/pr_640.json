{"pr_number": 640, "pr_title": "DEVX-2224: Heterogenous json structure recipe conversion", "pr_createdAt": "2020-11-19T23:39:57Z", "pr_url": "https://github.com/confluentinc/kafka-tutorials/pull/640", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzY3MzM0OQ==", "url": "https://github.com/confluentinc/kafka-tutorials/pull/640#discussion_r527673349", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              title: \"Working with heterogenous JSON records in ksqlDB\"\n          \n          \n            \n              title: \"Working with heterogenous JSON records\"", "author": "ybyzek", "createdAt": "2020-11-20T12:56:46Z", "path": "_data/tutorials.yaml", "diffHunk": "@@ -544,3 +544,23 @@ ksql-nested-json:\n     ruby: disabled\n     scala: disabled\n     swift: disabled\n+\n+ksql-heterogeneous-json:\n+  title: \"Working with heterogenous JSON records in ksqlDB\"", "originalCommit": "87f8a39ab9c588d3c5ad47db203ad3918e85be5e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzg0ODY0MA==", "url": "https://github.com/confluentinc/kafka-tutorials/pull/640#discussion_r527848640", "bodyText": "ack", "author": "bbejeck", "createdAt": "2020-11-20T17:27:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzY3MzM0OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzY3MzQzNQ==", "url": "https://github.com/confluentinc/kafka-tutorials/pull/640#discussion_r527673435", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              meta-description: \"Working with heterogenous JSON records in ksqlDB\"\n          \n          \n            \n              meta-description: \"Working with heterogenous JSON records\"", "author": "ybyzek", "createdAt": "2020-11-20T12:56:55Z", "path": "_data/tutorials.yaml", "diffHunk": "@@ -544,3 +544,23 @@ ksql-nested-json:\n     ruby: disabled\n     scala: disabled\n     swift: disabled\n+\n+ksql-heterogeneous-json:\n+  title: \"Working with heterogenous JSON records in ksqlDB\"\n+  meta-description: \"Working with heterogenous JSON records in ksqlDB\"", "originalCommit": "87f8a39ab9c588d3c5ad47db203ad3918e85be5e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzg1MTE1Mw==", "url": "https://github.com/confluentinc/kafka-tutorials/pull/640#discussion_r527851153", "bodyText": "ack", "author": "bbejeck", "createdAt": "2020-11-20T17:30:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzY3MzQzNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzY3MzY3Mg==", "url": "https://github.com/confluentinc/kafka-tutorials/pull/640#discussion_r527673672", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              slug: \"/ksqldb-working-with-json-different-structure\"\n          \n          \n            \n              slug: \"/working-with-json-different-structure\"", "author": "ybyzek", "createdAt": "2020-11-20T12:57:15Z", "path": "_data/tutorials.yaml", "diffHunk": "@@ -544,3 +544,23 @@ ksql-nested-json:\n     ruby: disabled\n     scala: disabled\n     swift: disabled\n+\n+ksql-heterogeneous-json:\n+  title: \"Working with heterogenous JSON records in ksqlDB\"\n+  meta-description: \"Working with heterogenous JSON records in ksqlDB\"\n+  slug: \"/ksqldb-working-with-json-different-structure\"", "originalCommit": "87f8a39ab9c588d3c5ad47db203ad3918e85be5e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzg0ODc0NA==", "url": "https://github.com/confluentinc/kafka-tutorials/pull/640#discussion_r527848744", "bodyText": "ack", "author": "bbejeck", "createdAt": "2020-11-20T17:27:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzY3MzY3Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzY3MzkxNw==", "url": "https://github.com/confluentinc/kafka-tutorials/pull/640#discussion_r527673917", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              question: \"How do I select fields from records with different structures and possibly different values?\"\n          \n          \n            \n              question: \"How do I select fields from a stream of records with different structures and possibly different values?\"", "author": "ybyzek", "createdAt": "2020-11-20T12:57:40Z", "path": "_data/tutorials.yaml", "diffHunk": "@@ -544,3 +544,23 @@ ksql-nested-json:\n     ruby: disabled\n     scala: disabled\n     swift: disabled\n+\n+ksql-heterogeneous-json:\n+  title: \"Working with heterogenous JSON records in ksqlDB\"\n+  meta-description: \"Working with heterogenous JSON records in ksqlDB\"\n+  slug: \"/ksqldb-working-with-json-different-structure\"\n+  question: \"How do I select fields from records with different structures and possibly different values?\"", "originalCommit": "87f8a39ab9c588d3c5ad47db203ad3918e85be5e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzg0ODg0Mw==", "url": "https://github.com/confluentinc/kafka-tutorials/pull/640#discussion_r527848843", "bodyText": "ack", "author": "bbejeck", "createdAt": "2020-11-20T17:27:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzY3MzkxNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzY3NDE1MA==", "url": "https://github.com/confluentinc/kafka-tutorials/pull/640#discussion_r527674150", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              introduction: \"Suppose you have a topic with JSON and not all the records have the same structure and value types.  You want to write a query that can handle the different structures and pull out specific fields \"\n          \n          \n            \n              introduction: \"Suppose you have a topic with JSON-formatted records, but not all the records have the same structure and value types.  You want to write a query that can handle the different structures and pull out specific fields \"", "author": "ybyzek", "createdAt": "2020-11-20T12:58:10Z", "path": "_data/tutorials.yaml", "diffHunk": "@@ -544,3 +544,23 @@ ksql-nested-json:\n     ruby: disabled\n     scala: disabled\n     swift: disabled\n+\n+ksql-heterogeneous-json:\n+  title: \"Working with heterogenous JSON records in ksqlDB\"\n+  meta-description: \"Working with heterogenous JSON records in ksqlDB\"\n+  slug: \"/ksqldb-working-with-json-different-structure\"\n+  question: \"How do I select fields from records with different structures and possibly different values?\"\n+  introduction: \"Suppose you have a topic with JSON and not all the records have the same structure and value types.  You want to write a query that can handle the different structures and pull out specific fields \"", "originalCommit": "87f8a39ab9c588d3c5ad47db203ad3918e85be5e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzg0ODk2NQ==", "url": "https://github.com/confluentinc/kafka-tutorials/pull/640#discussion_r527848965", "bodyText": "ack", "author": "bbejeck", "createdAt": "2020-11-20T17:27:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzY3NDE1MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzY3NTEzNQ==", "url": "https://github.com/confluentinc/kafka-tutorials/pull/640#discussion_r527675135", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Let's say you have a topic `source_data`, that contains JSON.  But each nested JSON object has a different structure.  Addtionally, in each object there is a mix of types within the values.\n          \n          \n            \n            Let's say you have a Kafka topic `source_data` that contains JSON-formatted data.  But each nested JSON object has a different structure.  Additionally, within each object the values have a mix of types.", "author": "ybyzek", "createdAt": "2020-11-20T13:00:07Z", "path": "_includes/tutorials/ksql-heterogeneous-json/ksql/markup/dev/problem-description.adoc", "diffHunk": "@@ -0,0 +1,34 @@\n+Let's say you have a topic `source_data`, that contains JSON.  But each nested JSON object has a different structure.  Addtionally, in each object there is a mix of types within the values.", "originalCommit": "87f8a39ab9c588d3c5ad47db203ad3918e85be5e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzg0OTEzOA==", "url": "https://github.com/confluentinc/kafka-tutorials/pull/640#discussion_r527849138", "bodyText": "ack", "author": "bbejeck", "createdAt": "2020-11-20T17:28:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzY3NTEzNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzY3NTU3OA==", "url": "https://github.com/confluentinc/kafka-tutorials/pull/640#discussion_r527675578", "bodyText": "Given the example below, can we name the field that is common?", "author": "ybyzek", "createdAt": "2020-11-20T13:00:58Z", "path": "_includes/tutorials/ksql-heterogeneous-json/ksql/markup/dev/problem-description.adoc", "diffHunk": "@@ -0,0 +1,34 @@\n+Let's say you have a topic `source_data`, that contains JSON.  But each nested JSON object has a different structure.  Addtionally, in each object there is a mix of types within the values.\n+\n+They each have one field in common that you want to pull out in a query and you don't care about the structure of the individual JSON objects", "originalCommit": "87f8a39ab9c588d3c5ad47db203ad3918e85be5e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzg0OTYwNw==", "url": "https://github.com/confluentinc/kafka-tutorials/pull/640#discussion_r527849607", "bodyText": "changed the text some LMK WYT", "author": "bbejeck", "createdAt": "2020-11-20T17:28:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzY3NTU3OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzY3NjQyMg==", "url": "https://github.com/confluentinc/kafka-tutorials/pull/640#discussion_r527676422", "bodyText": "This is just for consideration, would it be a valid name and would it be more helpful to change the word to a number, e.g. instead of JSONTypeOne, write JSONType1, etc....  The reasoning is it may be easier for a reader to more quickly digest, at least for me it is.", "author": "ybyzek", "createdAt": "2020-11-20T13:02:39Z", "path": "_includes/tutorials/ksql-heterogeneous-json/ksql/code/src/statements.sql", "diffHunk": "@@ -0,0 +1,18 @@\n+CREATE STREAM DATA_STREAM ( \n+  JSONTypeOne VARCHAR, ", "originalCommit": "87f8a39ab9c588d3c5ad47db203ad3918e85be5e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzg0OTc0NQ==", "url": "https://github.com/confluentinc/kafka-tutorials/pull/640#discussion_r527849745", "bodyText": "ack", "author": "bbejeck", "createdAt": "2020-11-20T17:28:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzY3NjQyMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzY3NzAzNw==", "url": "https://github.com/confluentinc/kafka-tutorials/pull/640#discussion_r527677037", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            <3> The field you want form JSONTypeThree\n          \n          \n            \n            <3> The field you want from JSONTypeThree", "author": "ybyzek", "createdAt": "2020-11-20T13:03:58Z", "path": "_includes/tutorials/ksql-heterogeneous-json/ksql/markup/dev/problem-description.adoc", "diffHunk": "@@ -0,0 +1,34 @@\n+Let's say you have a topic `source_data`, that contains JSON.  But each nested JSON object has a different structure.  Addtionally, in each object there is a mix of types within the values.\n+\n+They each have one field in common that you want to pull out in a query and you don't care about the structure of the individual JSON objects\n+\n+[source, json]\n+----\n+{\n+  \"JSONTypeOne\": {\n+    \"fieldA\": \"some data\",\n+    \"numberField\": 1.001,\n+    \"oneOnlyField\": \"more data\", <1>\n+    \"randomField\": \"random data\"\n+  },\n+\n+  \"JSONTypeTwo\": {\n+    \"fieldA\": \"data\",\n+    \"fieldB\": \"b-data\",\n+    \"numberField\": 98.6   <2>\n+  },\n+\n+  \"JSONTypeThree\": {\n+    \"fieldA\": \"data\",\n+    \"fieldB\": \"b-data\",\n+    \"numberField\": 98.6,\n+    \"fieldC\": \"data\",\n+    \"fieldD\": \"D-data\"    <3>\n+  }\n+----\n+<1> The field you want from JSONTypeOne\n+<2> The field you want from JSONTypeTwo\n+<3> The field you want form JSONTypeThree", "originalCommit": "87f8a39ab9c588d3c5ad47db203ad3918e85be5e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzg0OTkwMw==", "url": "https://github.com/confluentinc/kafka-tutorials/pull/640#discussion_r527849903", "bodyText": "ack", "author": "bbejeck", "createdAt": "2020-11-20T17:29:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzY3NzAzNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzY3NzMxMw==", "url": "https://github.com/confluentinc/kafka-tutorials/pull/640#discussion_r527677313", "bodyText": "In my environment: I can't get this this third record to display in Safari unless I expand.  Scrolling does not help.\nCan you please try in your view: do you see this 3rd record type?", "author": "ybyzek", "createdAt": "2020-11-20T13:04:34Z", "path": "_includes/tutorials/ksql-heterogeneous-json/ksql/markup/dev/problem-description.adoc", "diffHunk": "@@ -0,0 +1,34 @@\n+Let's say you have a topic `source_data`, that contains JSON.  But each nested JSON object has a different structure.  Addtionally, in each object there is a mix of types within the values.\n+\n+They each have one field in common that you want to pull out in a query and you don't care about the structure of the individual JSON objects\n+\n+[source, json]\n+----\n+{\n+  \"JSONTypeOne\": {\n+    \"fieldA\": \"some data\",\n+    \"numberField\": 1.001,\n+    \"oneOnlyField\": \"more data\", <1>\n+    \"randomField\": \"random data\"\n+  },\n+\n+  \"JSONTypeTwo\": {\n+    \"fieldA\": \"data\",\n+    \"fieldB\": \"b-data\",\n+    \"numberField\": 98.6   <2>\n+  },\n+\n+  \"JSONTypeThree\": {", "originalCommit": "87f8a39ab9c588d3c5ad47db203ad3918e85be5e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzgyNjYxMA==", "url": "https://github.com/confluentinc/kafka-tutorials/pull/640#discussion_r527826610", "bodyText": "No, I have to expand as well.  It's like this with all KT's, maybe we need to explore the default of having it expand or allow scrolling.", "author": "bbejeck", "createdAt": "2020-11-20T16:55:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzY3NzMxMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzgyOTU1MA==", "url": "https://github.com/confluentinc/kafka-tutorials/pull/640#discussion_r527829550", "bodyText": "As a workaround, what do you think about splitting each of the 3 JSON types into their own [source, json] code block?", "author": "ybyzek", "createdAt": "2020-11-20T16:59:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzY3NzMxMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzg1MDAyMg==", "url": "https://github.com/confluentinc/kafka-tutorials/pull/640#discussion_r527850022", "bodyText": "ack", "author": "bbejeck", "createdAt": "2020-11-20T17:29:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzY3NzMxMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzY3NzcyOA==", "url": "https://github.com/confluentinc/kafka-tutorials/pull/640#discussion_r527677728", "bodyText": "There are a few instances of \"stock purchase transactions\" -- is that supposed to be there, or it's remnant from a clone?", "author": "ybyzek", "createdAt": "2020-11-20T13:05:15Z", "path": "_includes/tutorials/ksql-heterogeneous-json/ksql/markup/dev/create-different-type-stream.adoc", "diffHunk": "@@ -0,0 +1,23 @@\n+The first thing we do is to create a stream `DATA_STREAM` based off stock purchase transactions topic `source_data`. Within the `CREATE STREAM` statement, you'll use a `VARCHAR` keyword to define each of outer most element of the JSON types.", "originalCommit": "87f8a39ab9c588d3c5ad47db203ad3918e85be5e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzg1MDk4Mg==", "url": "https://github.com/confluentinc/kafka-tutorials/pull/640#discussion_r527850982", "bodyText": "whoops!", "author": "bbejeck", "createdAt": "2020-11-20T17:30:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzY3NzcyOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzY3ODQ0Nw==", "url": "https://github.com/confluentinc/kafka-tutorials/pull/640#discussion_r527678447", "bodyText": "\"that's doing the right thing\" is vague.  Can this be more descriptive?", "author": "ybyzek", "createdAt": "2020-11-20T13:06:39Z", "path": "_includes/tutorials/ksql-heterogeneous-json/ksql/markup/dev/make-src-file.adoc", "diffHunk": "@@ -0,0 +1,5 @@\n+Now that you have a series of statements that's doing the right thing, the last step is to put them into a file so that they can be used outside the CLI session. Create a file at `src/statements.sql` with the following content:", "originalCommit": "87f8a39ab9c588d3c5ad47db203ad3918e85be5e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzg1MDEyMA==", "url": "https://github.com/confluentinc/kafka-tutorials/pull/640#discussion_r527850120", "bodyText": "ack", "author": "bbejeck", "createdAt": "2020-11-20T17:29:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzY3ODQ0Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzc0ODQwOA==", "url": "https://github.com/confluentinc/kafka-tutorials/pull/640#discussion_r527748408", "bodyText": "Maybe I missed it, but it might be good to also add that NULL is returned if nothing was found at the specified path.", "author": "awalther28", "createdAt": "2020-11-20T14:58:57Z", "path": "_includes/tutorials/ksql-heterogeneous-json/ksql/markup/dev/transient-reporting.adoc", "diffHunk": "@@ -0,0 +1,23 @@\n+We need to create a query that extracts the fields we want from input sources.  Since we have defined the top element of the JSON as a String using the `VARCHAR` keyword,\n+we can use the https://docs.ksqldb.io/en/latest/developer-guide/ksqldb-reference/scalar-functions/#extractjsonfield[ksqlDB EXTRACTJSONFIELD function] to extract the different values at a specified https://jsonpath.com/[JSONPath].\n+\n+NOTE: The result of `EXTRACTJSONFIELD` function is always a `STRING` type. To convert the result to another type you'll need to use the `CAST` operator. We've done that with our queries in this tutorial.", "originalCommit": "87f8a39ab9c588d3c5ad47db203ad3918e85be5e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzg1MDYxNg==", "url": "https://github.com/confluentinc/kafka-tutorials/pull/640#discussion_r527850616", "bodyText": "good catch, updated to say it returns null if not found", "author": "bbejeck", "createdAt": "2020-11-20T17:29:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzc0ODQwOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzc0OTk5Ng==", "url": "https://github.com/confluentinc/kafka-tutorials/pull/640#discussion_r527749996", "bodyText": "To me I would think the answer is to use EXTRACTJSONFIELD which requires the JSON you're accessing to be a \"string/varchar\".", "author": "awalther28", "createdAt": "2020-11-20T15:01:22Z", "path": "_includes/tutorials/ksql-heterogeneous-json/ksql/markup/answer/varchar-stream.adoc", "diffHunk": "@@ -0,0 +1,5 @@\n+Create a stream and define the outer-most element of the JSON structures as `VARCHAR`", "originalCommit": "87f8a39ab9c588d3c5ad47db203ad3918e85be5e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzgxNDQxNA==", "url": "https://github.com/confluentinc/kafka-tutorials/pull/640#discussion_r527814414", "bodyText": "Unless I misunderstand your point here, EXTRACTJSONFIELD always returns a string, but inside the JSON, the value you're accessing could be a non-string value.  I have an example of this in the tutorial.", "author": "bbejeck", "createdAt": "2020-11-20T16:38:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzc0OTk5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzgxNjA3Mw==", "url": "https://github.com/confluentinc/kafka-tutorials/pull/640#discussion_r527816073", "bodyText": "What I'm trying to get at is\n\nIf the requested JSONPath does not exist, the function returns NULL. (https://docs.ksqldb.io/en/latest/developer-guide/ksqldb-reference/scalar-functions/#extractjsonfield)", "author": "awalther28", "createdAt": "2020-11-20T16:40:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzc0OTk5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjc2MzkyNQ==", "url": "https://github.com/confluentinc/kafka-tutorials/pull/640#discussion_r532763925", "bodyText": "@bbejeck  looking back at this. I still standby my initial responses but I think my initial point was lost. I think the short answer should have some mention of EXTRACTJSONFIELD rather than just having the JSON be a VARCHAR. EXTRACTJSONFIELD implies that the value you are extracting from is a VARCHAR, whereas just varchar doesn't imply anything about how one would actually retrieve data from the JSON. Feel free to disagree :) This is my only hangup, happy to give this my approval once this is resolved.", "author": "awalther28", "createdAt": "2020-11-30T17:17:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzc0OTk5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjgyNTQ0Mg==", "url": "https://github.com/confluentinc/kafka-tutorials/pull/640#discussion_r532825442", "bodyText": "@awalther28 I misunderstood what you were saying before, but I think I get it now.  Check out the short answer now and let me know", "author": "bbejeck", "createdAt": "2020-11-30T18:55:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzc0OTk5Ng=="}], "type": "inlineReview"}, {"oid": "dac4311aeb0bea4c66cc4f3967a559c25d27cef6", "url": "https://github.com/confluentinc/kafka-tutorials/commit/dac4311aeb0bea4c66cc4f3967a559c25d27cef6", "message": "First commit for hetergenous json", "committedDate": "2020-11-30T16:25:39Z", "type": "commit"}, {"oid": "571b14de3d4f5cda19c48a102570ea00939c84ba", "url": "https://github.com/confluentinc/kafka-tutorials/commit/571b14de3d4f5cda19c48a102570ea00939c84ba", "message": "Final commit in recipe conversion", "committedDate": "2020-11-30T16:25:39Z", "type": "commit"}, {"oid": "e28a09474a1adb25e74781bd69e67f164ecc2c71", "url": "https://github.com/confluentinc/kafka-tutorials/commit/e28a09474a1adb25e74781bd69e67f164ecc2c71", "message": "updates per comments", "committedDate": "2020-11-30T16:27:21Z", "type": "commit"}, {"oid": "7661d02862220a56549be023469a77a7fe31687d", "url": "https://github.com/confluentinc/kafka-tutorials/commit/7661d02862220a56549be023469a77a7fe31687d", "message": "change type names to more readable format", "committedDate": "2020-11-30T16:27:21Z", "type": "commit"}, {"oid": "77d598169b60a6e401770b096eec494103149fa2", "url": "https://github.com/confluentinc/kafka-tutorials/commit/77d598169b60a6e401770b096eec494103149fa2", "message": "clean up link name", "committedDate": "2020-11-30T16:27:59Z", "type": "commit"}, {"oid": "77d598169b60a6e401770b096eec494103149fa2", "url": "https://github.com/confluentinc/kafka-tutorials/commit/77d598169b60a6e401770b096eec494103149fa2", "message": "clean up link name", "committedDate": "2020-11-30T16:27:59Z", "type": "forcePushed"}, {"oid": "da61aadaaae84b8a616fbf4ebe880164cf404dbc", "url": "https://github.com/confluentinc/kafka-tutorials/commit/da61aadaaae84b8a616fbf4ebe880164cf404dbc", "message": "add the use of EXTRACTJSONFIELD to short answer", "committedDate": "2020-11-30T18:51:29Z", "type": "commit"}]}