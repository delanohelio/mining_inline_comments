{"pr_number": 209, "pr_title": "DEVX-1479 Adds a Kafka Streams aggregate Min/Max tutorial", "pr_createdAt": "2020-02-17T04:27:25Z", "pr_url": "https://github.com/confluentinc/kafka-tutorials/pull/209", "timeline": [{"oid": "fe83025f1a04583387bbeb12428690a3655601ef", "url": "https://github.com/confluentinc/kafka-tutorials/commit/fe83025f1a04583387bbeb12428690a3655601ef", "message": "DEVX-1479 Adds a Kafka Streams aggregate Min/Max tutorial", "committedDate": "2020-02-17T04:19:26Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkyNjU0Nw==", "url": "https://github.com/confluentinc/kafka-tutorials/pull/209#discussion_r380926547", "bodyText": "minor: with 5.4 released should we update to use latest available versions?  It's a bit subjective so I'm fine if you left it as is.  The same for the other cp dependencies in this file.", "author": "bbejeck", "createdAt": "2020-02-18T20:49:51Z", "path": "_includes/tutorials/aggregating-minmax/kstreams/code/docker-compose.yml", "diffHunk": "@@ -0,0 +1,50 @@\n+---\n+version: '2'\n+\n+services:\n+  zookeeper:\n+    image: confluentinc/cp-zookeeper:5.3.0", "originalCommit": "fe83025f1a04583387bbeb12428690a3655601ef", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk4NzczOA==", "url": "https://github.com/confluentinc/kafka-tutorials/pull/209#discussion_r380987738", "bodyText": "We might want to mention something like\nSince you are changing the key, Kafka Streams will re-partition the data.   But ths is handled automatically for you, so it's a seamless operation.", "author": "bbejeck", "createdAt": "2020-02-18T23:02:05Z", "path": "_includes/tutorials/aggregating-minmax/kstreams/markup/dev/make-topology.adoc", "diffHunk": "@@ -0,0 +1,18 @@\n+Then create the following file at `src/main/java/io/confluent/developer/AggregatingMinMax.java`. \n+\n++++++\n+<pre class=\"snippet\"><code class=\"java\">{% include_raw tutorials/aggregating-minmax/kstreams/code/src/main/java/io/confluent/developer/AggregatingMinMax.java %}</code></pre>\n++++++\n+\n+Let's take a close look at the `buildTopology()` function, which uses the Kafka Streams DSL.\n+\n+Using the `https://kafka.apache.org/{{ site.ak_javadoc_version }}/javadoc/org/apache/kafka/streams/StreamsBuilder.html[StreamsBuilder]` parameter, which is the helper object that lets us build our topology, we can apply the following sequence of stages:\n+\n+1. Call the `stream()` function which creates a `https://kafka.apache.org/{{ site.ak_javadoc_version }}/javadoc/org/apache/kafka/streams/kstream/KStream.html[KStream]<String, MovieTicketSales>` object based on the stream of records from the `inputTopic` Kafka topic.\n+\n+2. Our use case requires we calculate minimum and maximum movie revenue _by year_.  The `https://kafka.apache.org/{{ site.ak_javadoc_version }}/javadoc/org/apache/kafka/streams/kstream/KStream.html#groupBy-org.apache.kafka.streams.kstream.KeyValueMapper-[groupBy]` function creates a `https://kafka.apache.org/{{ site.ak_javadoc_version }}/javadoc/org/apache/kafka/streams/kstream/KGroupedStream.html[KGroupedStream]` object.  `KGroupedStream` represents a 'grouped record stream' which allows us to apply aggregations over the records, grouped by a the key.  Here, we are specifying the movie's year of release as the record value on which to group. ", "originalCommit": "fe83025f1a04583387bbeb12428690a3655601ef", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk5MzUwMg==", "url": "https://github.com/confluentinc/kafka-tutorials/pull/209#discussion_r380993502", "bodyText": "The final parameter to aggregate is an ...Serdes\n\nIMHO we should change this to something like this\nThe final parameter to `aggregate` is a `Materialized` object which contains the `Serdes` required for (de)serializing records for the state store backing the aggregation", "author": "bbejeck", "createdAt": "2020-02-18T23:18:56Z", "path": "_includes/tutorials/aggregating-minmax/kstreams/markup/dev/make-topology.adoc", "diffHunk": "@@ -0,0 +1,18 @@\n+Then create the following file at `src/main/java/io/confluent/developer/AggregatingMinMax.java`. \n+\n++++++\n+<pre class=\"snippet\"><code class=\"java\">{% include_raw tutorials/aggregating-minmax/kstreams/code/src/main/java/io/confluent/developer/AggregatingMinMax.java %}</code></pre>\n++++++\n+\n+Let's take a close look at the `buildTopology()` function, which uses the Kafka Streams DSL.\n+\n+Using the `https://kafka.apache.org/{{ site.ak_javadoc_version }}/javadoc/org/apache/kafka/streams/StreamsBuilder.html[StreamsBuilder]` parameter, which is the helper object that lets us build our topology, we can apply the following sequence of stages:\n+\n+1. Call the `stream()` function which creates a `https://kafka.apache.org/{{ site.ak_javadoc_version }}/javadoc/org/apache/kafka/streams/kstream/KStream.html[KStream]<String, MovieTicketSales>` object based on the stream of records from the `inputTopic` Kafka topic.\n+\n+2. Our use case requires we calculate minimum and maximum movie revenue _by year_.  The `https://kafka.apache.org/{{ site.ak_javadoc_version }}/javadoc/org/apache/kafka/streams/kstream/KStream.html#groupBy-org.apache.kafka.streams.kstream.KeyValueMapper-[groupBy]` function creates a `https://kafka.apache.org/{{ site.ak_javadoc_version }}/javadoc/org/apache/kafka/streams/kstream/KGroupedStream.html[KGroupedStream]` object.  `KGroupedStream` represents a 'grouped record stream' which allows us to apply aggregations over the records, grouped by a the key.  Here, we are specifying the movie's year of release as the record value on which to group. \n+\n+3. Next we apply the `https://kafka.apache.org/{{ site.ak_javadoc_version }}/javadoc/org/apache/kafka/streams/kstream/KGroupedStream.html#aggregate-org.apache.kafka.streams.kstream.Initializer-org.apache.kafka.streams.kstream.Aggregator-org.apache.kafka.streams.kstream.Materialized-[aggregate]` function which allows us to combine record values over time as well as change the type of the result records from the type of the input records.  In our example we are aggregating `MovieTicketSales` records into the `YearlyMovieFigures` type by calculating a minimum and maximum value, grouped by `release_year`.  The first parameter given to `aggregate` is an `https://kafka.apache.org/{{ site.ak_javadoc_version }}/javadoc/org/apache/kafka/streams/kstream/Initializer.html[Initializer]` which is used for creating the initial value used in the first aggregation invocation.  In our case, we are providing an instance of `YearlyMovieFigures` initialized with values that will make calculating minimum and maximums easy.  The second parameter to the function is the aggregation logic.  Here we calculate new minimum and maximums by comparing the incoming new `MovieTicketSales` record with the most recent aggregate value and we return a `YearlyMovieFigures` instance.  This `YearlyMovieFigures` instance is the new aggregated value which will propogate downstream as well as be the value returned to us in the next invocation of `aggregate`.  The final parameter to `aggregate` is an `https://kafka.apache.org/{{ site.ak_javadoc_version }}/javadoc/org/apache/kafka/common/serialization/Serdes.html[Serdes]` which instruct the library how to serialize and deserialize records at this stage.", "originalCommit": "fe83025f1a04583387bbeb12428690a3655601ef", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk5NTE3OA==", "url": "https://github.com/confluentinc/kafka-tutorials/pull/209#discussion_r380995178", "bodyText": "nit: an output records is emitted. -> an output record is emitted.", "author": "bbejeck", "createdAt": "2020-02-18T23:24:26Z", "path": "_includes/tutorials/aggregating-minmax/kstreams/markup/dev/run-consumer.adoc", "diffHunk": "@@ -0,0 +1,13 @@\n+Leaving your original terminal running, open another to consume the events that have been aggregated by your application:\n+\n++++++\n+<pre class=\"snippet\"><code class=\"shell\">{% include_raw tutorials/aggregating-minmax/kstreams/code/tutorial-steps/dev/console-consumer.sh %}</code></pre>\n++++++\n+\n+After the consumer starts, you should see the following messages. Note that for every input record an output records is emitted. Each record represents an update to the aggregated values which is sent on every movie event specifically because caching is disabled in the code with `StreamsConfig.CACHE_MAX_BYTES_BUFFERING_CONFIG` set to `0`. Read more on `https://docs.confluent.io/current/streams/developer-guide/memory-mgmt.html#record-caches-in-the-dsl[Record caches in the DSL]`.", "originalCommit": "fe83025f1a04583387bbeb12428690a3655601ef", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "32cafa5d7c2da1c6bcd5e5664021fda7da43e075", "url": "https://github.com/confluentinc/kafka-tutorials/commit/32cafa5d7c2da1c6bcd5e5664021fda7da43e075", "message": "DEVX-1479 Fixes tests for MinMax aggregate kstreams recipe", "committedDate": "2020-02-19T01:48:06Z", "type": "commit"}, {"oid": "2161dbaad63c09b1a0dc58f62788f311e3959173", "url": "https://github.com/confluentinc/kafka-tutorials/commit/2161dbaad63c09b1a0dc58f62788f311e3959173", "message": "DEVX-1479 Upgrades aggregate minmax to 5.4.0", "committedDate": "2020-02-19T01:53:46Z", "type": "commit"}, {"oid": "48ba743015e6873b1789ed5ba7290ee33506a927", "url": "https://github.com/confluentinc/kafka-tutorials/commit/48ba743015e6873b1789ed5ba7290ee33506a927", "message": "DEVX-1479 Addresses some PR comments for aggregate minmax", "committedDate": "2020-02-19T02:13:02Z", "type": "commit"}, {"oid": "826ecd465fd0128ae677fda2270a0419d464f22a", "url": "https://github.com/confluentinc/kafka-tutorials/commit/826ecd465fd0128ae677fda2270a0419d464f22a", "message": "DEVX-1479 Updates ak docs to 2.4 for aggregating minmax recipe", "committedDate": "2020-02-19T02:15:10Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTA0NTE5Ng==", "url": "https://github.com/confluentinc/kafka-tutorials/pull/209#discussion_r381045196", "bodyText": "@colinhicks @bbejeck I tried changing this to 2.4 to make my AK docs links render to 2.4 but it doesn't seem to work locally... but maybe will in a staging site?", "author": "rspurgeon", "createdAt": "2020-02-19T02:24:55Z", "path": "tutorials/aggregating-minmax/kstreams.html", "diffHunk": "@@ -3,5 +3,5 @@\n permalink: /create-stateful-aggregation-minmax/kstreams\n stack: kstreams\n static_data: aggregating-minmax\n-help_wanted: true\n+ak_javadoc_version: 2.4", "originalCommit": "826ecd465fd0128ae677fda2270a0419d464f22a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTMxODE0Ng==", "url": "https://github.com/confluentinc/kafka-tutorials/pull/209#discussion_r381318146", "bodyText": "@rspurgeon, try {{ page.ak_javadoc_version }}.\nBtw, the staging site build command is essentially the same as what we run locally. Generally things should look and behave the same.\nhttps://github.com/confluentinc/kafka-tutorials/blob/master/.semaphore/semaphore.yml#L37", "author": "colinhicks", "createdAt": "2020-02-19T14:18:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTA0NTE5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTMzNjM2Mg==", "url": "https://github.com/confluentinc/kafka-tutorials/pull/209#discussion_r381336362", "bodyText": "{{ page.ak... }} worked!  thanks @colinhicks", "author": "rspurgeon", "createdAt": "2020-02-19T14:45:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTA0NTE5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTM0NjEzOQ==", "url": "https://github.com/confluentinc/kafka-tutorials/pull/209#discussion_r381346139", "bodyText": "@colinhicks  One downside to this solution is that if there isn't a value in the page front matter, then it won't default to the site wide value.  That might get confusing if someone copies my solution, maybe not?\nMaybe we need something like the jekyll defaults, described here?\nhttps://jekyllrb.com/docs/configuration/front-matter-defaults/", "author": "rspurgeon", "createdAt": "2020-02-19T14:58:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTA0NTE5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODM3NjA4MA==", "url": "https://github.com/confluentinc/kafka-tutorials/pull/209#discussion_r388376080", "bodyText": "oops, the GH api was down when I originally responded to this off-thread:\n\nyeah, good call. It\u2019s a bit annoying that you can\u2019t simply override site. variables with the front matter. I\u2019ll create an issue to set the front matter defaults as you suggest", "author": "colinhicks", "createdAt": "2020-03-05T15:40:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTA0NTE5Ng=="}], "type": "inlineReview"}, {"oid": "1064c5c96051a89cc43c7cba64ad030e0ad0fa2d", "url": "https://github.com/confluentinc/kafka-tutorials/commit/1064c5c96051a89cc43c7cba64ad030e0ad0fa2d", "message": "DEVX-1479 Adds aggregate minmax to semaphore", "committedDate": "2020-02-19T02:45:37Z", "type": "commit"}, {"oid": "53edc66073e00679382fbc689e746e822824fa0d", "url": "https://github.com/confluentinc/kafka-tutorials/commit/53edc66073e00679382fbc689e746e822824fa0d", "message": "DEVX-1479 For aggregation minmax uses page front matter to set 2.4 ak docs site", "committedDate": "2020-02-19T14:59:22Z", "type": "commit"}, {"oid": "c12c437fb0d5c0e709c8dbcd6a8e976387ffc516", "url": "https://github.com/confluentinc/kafka-tutorials/commit/c12c437fb0d5c0e709c8dbcd6a8e976387ffc516", "message": "DEVX-1479 removes path to netcat\n\nso sempaphore pulls it from path", "committedDate": "2020-03-05T17:55:54Z", "type": "commit"}]}