{"pr_number": 428, "pr_title": "Add cache clear action in JVM decider", "pr_createdAt": "2020-09-17T18:09:55Z", "pr_url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/428", "timeline": [{"oid": "960ffab3564ea124acc85eaa33c979638438d461", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/960ffab3564ea124acc85eaa33c979638438d461", "message": "Add cache clear action", "committedDate": "2020-09-17T17:59:51Z", "type": "commit"}, {"oid": "fa4a461b901ca7ae7834bf4dcd3715faf6e01e71", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/fa4a461b901ca7ae7834bf4dcd3715faf6e01e71", "message": "Fix check style", "committedDate": "2020-09-17T18:10:50Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQ2NDkzMQ==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/428#discussion_r490464931", "bodyText": "nit: same line?", "author": "vigyasharma", "createdAt": "2020-09-17T18:20:29Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/deciders/jvm/old_gen/LevelThreeActionBuilder.java", "diffHunk": "@@ -117,31 +113,28 @@ private void addSearchQueueAction() {\n         .stepSize(stepSize * actionBuilderConfig.searchQueueStepSize())\n         .build();\n     if (action.isActionable()) {\n-      queueActionMap.put(ResourceEnum.SEARCH_THREADPOOL, action);\n+      actions.add(action);\n     }\n   }\n \n-\n-  private void registerActions() {\n-    addFieldDataCacheAction();\n-    addShardRequestCacheAction();\n-    addSearchQueueAction();\n-    addWriteQueueAction();\n+  private void addCacheClearAction() {\n+    CacheClearAction action = CacheClearAction\n+        .newBuilder(appContext).build();", "originalCommit": "fa4a461b901ca7ae7834bf4dcd3715faf6e01e71", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQ2OTQ4Nw==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/428#discussion_r490469487", "bodyText": "Will this action increase CPU pressure? Although, since this is an SoS action, we want it to go through and not get punted due to an existing high CPU metric. So it's probably okay to not include that as an impact (also may not always increase CPU if the cache items were not really being used).", "author": "vigyasharma", "createdAt": "2020-09-17T18:28:38Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/actions/CacheClearAction.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions;\n+\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.ImpactVector.Dimension.HEAP;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.AppContext;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.cluster.NodeKey;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+public class CacheClearAction extends SuppressibleAction {\n+  public static final String NAME = \"CacheClear\";\n+\n+  private final long coolOffPeriodInMillis;\n+  private final boolean canUpdate;\n+  private final List<NodeKey> impactedNodes;\n+\n+  public CacheClearAction(final AppContext appContext,\n+      final long coolOffPeriodInMillis,\n+      final boolean canUpdate) {\n+    super(appContext);\n+    this.coolOffPeriodInMillis = coolOffPeriodInMillis;\n+    this.canUpdate = canUpdate;\n+    this.impactedNodes = appContext.getDataNodeInstances()\n+        .stream()\n+        .map(ins -> new NodeKey(ins.getInstanceId(), ins.getInstanceIp()))\n+        .collect(Collectors.toList());\n+  }\n+\n+  @Override\n+  public String name() {\n+    return NAME;\n+  }\n+\n+  @Override\n+  public boolean canUpdate() {\n+    return canUpdate;\n+  }\n+\n+  @Override\n+  public long coolOffPeriodInMillis() {\n+    return coolOffPeriodInMillis;\n+  }\n+\n+  @Override\n+  public List<NodeKey> impactedNodes() {\n+    return impactedNodes;\n+  }\n+\n+  @Override\n+  public Map<NodeKey, ImpactVector> impact() {\n+    Map<NodeKey, ImpactVector> impactedMap = new HashMap<>();\n+    impactedNodes.forEach(node -> {\n+          ImpactVector impactVector = new ImpactVector();\n+          impactVector.decreasesPressure(HEAP);", "originalCommit": "fa4a461b901ca7ae7834bf4dcd3715faf6e01e71", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}