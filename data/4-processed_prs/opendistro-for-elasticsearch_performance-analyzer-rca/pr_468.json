{"pr_number": 468, "pr_title": "Young Gen Tuning Decider", "pr_createdAt": "2020-10-13T23:01:00Z", "pr_url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/468", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTAxNTkxMA==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/468#discussion_r505015910", "bodyText": "remove or make it debug ?", "author": "yojs", "createdAt": "2020-10-14T22:18:05Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/deciders/jvm/JvmGenTuningPolicy.java", "diffHunk": "@@ -0,0 +1,266 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.deciders.jvm;\n+\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.ResourceUtil.FULL_GC_PAUSE_TIME;\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.ResourceUtil.MINOR_GC_PAUSE_TIME;\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.ResourceUtil.OLD_GEN_HEAP_USAGE;\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.ResourceUtil.YOUNG_GEN_PROMOTION_RATE;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.AppContext;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.Action;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.JvmGenAction;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.deciders.DecisionPolicy;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.deciders.configs.jvm.young_gen.JvmGenTuningPolicyConfig;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.Resource;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.aggregators.BucketizedSlidingWindowConfig;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.flow_units.ResourceFlowUnit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotClusterSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotNodeSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotResourceSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.ResourceUtil;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.core.RcaConf;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.util.RcaConsts;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.collector.NodeConfigCache;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.HighHeapUsageClusterRca;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.cluster.NodeKey;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.collect.Lists;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+/**\n+ * Decides if the JVM heap generations could be resized to improve application\n+ * performance and suggests actions to take to achieve improved performance.\n+ */\n+public class JvmGenTuningPolicy implements DecisionPolicy {\n+  private static final Logger LOG = LogManager.getLogger(JvmGenTuningPolicy.class);\n+  private static final long COOLOFF_PERIOD_IN_MILLIS = 2L * 24L * 60L * 60L * 1000L;\n+  private static final Path UNDERSIZED_DATA_FILE_PATH = Paths.get(RcaConsts.CONFIG_DIR_PATH, \"JvmGenerationTuningPolicy_Undersized\");\n+  private static final Path OVERSIZED_DATA_FILE_PATH = Paths.get(RcaConsts.CONFIG_DIR_PATH, \"JvmGenerationTuningPolicy_Oversized\");\n+  static final List<Resource> YOUNG_GEN_UNDERSIZED_SIGNALS = Lists.newArrayList(\n+      YOUNG_GEN_PROMOTION_RATE,\n+      FULL_GC_PAUSE_TIME\n+  );\n+  static final List<Resource> YOUNG_GEN_OVERSIZED_SIGNALS = Lists.newArrayList(\n+      MINOR_GC_PAUSE_TIME,\n+      OLD_GEN_HEAP_USAGE\n+  );\n+\n+  private AppContext appContext;\n+  private RcaConf rcaConf;\n+  private JvmGenTuningPolicyConfig policyConfig;\n+  private HighHeapUsageClusterRca highHeapUsageClusterRca;\n+\n+  // Tracks issues which suggest that the young generation is too small\n+  @VisibleForTesting\n+  JvmActionsAlarmMonitor tooSmallAlarm;\n+  // Tracks issues which suggest that the young generation is too large\n+  @VisibleForTesting\n+  JvmActionsAlarmMonitor tooLargeAlarm;\n+\n+  public JvmGenTuningPolicy(HighHeapUsageClusterRca highHeapUsageClusterRca) {\n+    this(highHeapUsageClusterRca, null, null);\n+  }\n+\n+  public JvmGenTuningPolicy(HighHeapUsageClusterRca highHeapUsageClusterRca,\n+                            JvmActionsAlarmMonitor tooSmallAlarm,\n+                            JvmActionsAlarmMonitor tooLargeAlarm) {\n+    this.highHeapUsageClusterRca = highHeapUsageClusterRca;\n+    this.tooSmallAlarm = tooSmallAlarm;\n+    this.tooLargeAlarm = tooLargeAlarm;\n+  }\n+\n+  /**\n+   * records issues which the policy cares about and discards others\n+   * @param issue an issue with the application\n+   */\n+  private void record(HotResourceSummary issue) {\n+    LOG.debug(\"JVMGenTuningPolicy#record()\");\n+    if (YOUNG_GEN_OVERSIZED_SIGNALS.contains(issue.getResource())) {\n+      LOG.debug(\"Recording issue in tooLargeAlarm\");\n+      tooLargeAlarm.recordIssue();\n+    } else if (YOUNG_GEN_UNDERSIZED_SIGNALS.contains(issue.getResource())) {\n+      LOG.debug(\"Recording issue in tooSmallAlarm\");\n+      tooSmallAlarm.recordIssue();\n+    }\n+  }\n+\n+  /**\n+   * gathers and records all issues observed in the application\n+   */\n+  private void recordIssues() {\n+    LOG.info(\"Recording issues...\");", "originalCommit": "3d89531c9b62e6cd4d67adac3f1abb20bf12ba02", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTA0ODk5Mw==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/468#discussion_r505048993", "bodyText": "Done", "author": "sidheart", "createdAt": "2020-10-14T23:04:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTAxNTkxMA=="}], "type": "inlineReview"}, {"oid": "b6aee2a1d49e887d77437720d9e41f8dba0f451b", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/b6aee2a1d49e887d77437720d9e41f8dba0f451b", "message": "Add logic to detect and fix missized JVM heap generations", "committedDate": "2020-10-15T00:17:03Z", "type": "commit"}, {"oid": "b5690358b22a19340a15c320e1dbb715969b9e27", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/b5690358b22a19340a15c320e1dbb715969b9e27", "message": "Add young gen IT for the HeapHealthDecider\n\n- This integration test validates that when full GC pause time is\nexceedingly high, we emit an action to scale up the size of the young\ngeneration.", "committedDate": "2020-10-15T00:18:15Z", "type": "commit"}, {"oid": "533cdde935ce3dd4b0f1db44d400a8181bca3af9", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/533cdde935ce3dd4b0f1db44d400a8181bca3af9", "message": "Address Joydeep's PR comments\n\n- JvmGenAction properly returns targetRatio as an int\n- JsonParser now doesn't call parseString to maintain compatibility with\nother versions of libs\n- Removed unnecessary logging statements or changed them to debug level", "committedDate": "2020-10-15T00:18:18Z", "type": "commit"}, {"oid": "533cdde935ce3dd4b0f1db44d400a8181bca3af9", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/533cdde935ce3dd4b0f1db44d400a8181bca3af9", "message": "Address Joydeep's PR comments\n\n- JvmGenAction properly returns targetRatio as an int\n- JsonParser now doesn't call parseString to maintain compatibility with\nother versions of libs\n- Removed unnecessary logging statements or changed them to debug level", "committedDate": "2020-10-15T00:18:18Z", "type": "forcePushed"}, {"oid": "317178ed01cd5d1576c75801110f3d535c6e02ac", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/317178ed01cd5d1576c75801110f3d535c6e02ac", "message": "Merge branch 'master' into young-gen-tuning-decider-new2", "committedDate": "2020-10-15T02:19:21Z", "type": "commit"}]}