{"pr_number": 287, "pr_title": "Implement Action Flip Flop Detection in the Publisher", "pr_createdAt": "2020-07-17T00:32:36Z", "pr_url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/287", "timeline": [{"oid": "ae89583ac19096f1d6d353c63e195f6f74c08cfe", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/ae89583ac19096f1d6d353c63e195f6f74c08cfe", "message": "Actually record executed actions in the Publisher", "committedDate": "2020-07-21T17:25:21Z", "type": "forcePushed"}, {"oid": "df5ad950dc8feeec2c971d3e063897a973861eb4", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/df5ad950dc8feeec2c971d3e063897a973861eb4", "message": "Actually record executed actions in the Publisher", "committedDate": "2020-07-21T17:38:39Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTExMjY3NQ==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/287#discussion_r459112675", "bodyText": "Rename a -> prev and b -> curr or something on those lines to make it less ambiguous?", "author": "vigyasharma", "createdAt": "2020-07-22T22:11:12Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/actions/TimedFlipFlopDetector.java", "diffHunk": "@@ -0,0 +1,114 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.collections.TimeExpiringSet;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.ImpactVector.Dimension;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.ImpactVector.Impact;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.cluster.NodeKey;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * A {@link FlipFlopDetector} whose recorded actions expire after a given period of time.\n+ *\n+ * <p>This class defines a flip flop as an {@link Impact#DECREASES_PRESSURE}s followed by an\n+ * {@link Impact#INCREASES_PRESSURE}s to be a flip flops.\n+ *\n+ * <p>This class stores a {@link TimeExpiringSet} of {@link ImpactVector}s per {@link NodeKey}\n+ * that are used to determine these flip flops.\n+ */\n+public class TimedFlipFlopDetector implements FlipFlopDetector {\n+    private Map<NodeKey, TimeExpiringSet<ImpactVector>> flipFlopMap;\n+    private long expiryDuration;\n+    private TimeUnit expiryUnit;\n+\n+    public TimedFlipFlopDetector(long duration, TimeUnit unit) {\n+        flipFlopMap = new HashMap<>();\n+        this.expiryDuration = duration;\n+        this.expiryUnit = unit;\n+    }\n+\n+    /**\n+     * Tests if (a,b) is a flip flopping sequence of impacts.\n+     *\n+     * <p>Only an increase following a decrease is considered a flip flop\n+     *\n+     * @param a The first impact that would be applied\n+     * @param b The subsequent impact that would be applied\n+     * @return Whether or not (a,b) is a flip flopping sequence of impacts\n+     */\n+    protected boolean isFlipFlopImpact(Impact a, Impact b) {", "originalCommit": "e9f53d19cf020a59d1dd96e8c5e6cdd69ddf7034", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTExMzYwMw==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/287#discussion_r459113603", "bodyText": "For the system, the first impact vector has already been applied, right? It's the second one that we are now evaluating for flip-flopping. I understand that writing it this way keeps this method independent of the system, but it's also confusing. Pls consider renaming/modifying the doc strings.", "author": "vigyasharma", "createdAt": "2020-07-22T22:13:45Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/actions/TimedFlipFlopDetector.java", "diffHunk": "@@ -0,0 +1,114 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.collections.TimeExpiringSet;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.ImpactVector.Dimension;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.ImpactVector.Impact;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.cluster.NodeKey;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * A {@link FlipFlopDetector} whose recorded actions expire after a given period of time.\n+ *\n+ * <p>This class defines a flip flop as an {@link Impact#DECREASES_PRESSURE}s followed by an\n+ * {@link Impact#INCREASES_PRESSURE}s to be a flip flops.\n+ *\n+ * <p>This class stores a {@link TimeExpiringSet} of {@link ImpactVector}s per {@link NodeKey}\n+ * that are used to determine these flip flops.\n+ */\n+public class TimedFlipFlopDetector implements FlipFlopDetector {\n+    private Map<NodeKey, TimeExpiringSet<ImpactVector>> flipFlopMap;\n+    private long expiryDuration;\n+    private TimeUnit expiryUnit;\n+\n+    public TimedFlipFlopDetector(long duration, TimeUnit unit) {\n+        flipFlopMap = new HashMap<>();\n+        this.expiryDuration = duration;\n+        this.expiryUnit = unit;\n+    }\n+\n+    /**\n+     * Tests if (a,b) is a flip flopping sequence of impacts.\n+     *\n+     * <p>Only an increase following a decrease is considered a flip flop\n+     *\n+     * @param a The first impact that would be applied\n+     * @param b The subsequent impact that would be applied\n+     * @return Whether or not (a,b) is a flip flopping sequence of impacts\n+     */\n+    protected boolean isFlipFlopImpact(Impact a, Impact b) {\n+        return a.equals(Impact.DECREASES_PRESSURE) && b.equals(Impact.INCREASES_PRESSURE);\n+    }\n+\n+    /**\n+     * Returns true if the impact for a given Dimension in v is a flip flop Impact when compared to\n+     * the impact for a given dimension in u\n+     *\n+     * <p>e.g. for u = (HEAP: INCREASE, CPU: DECREASE), v = (HEAP: DECREASE, CPU: INCREASE)\n+     * (u,v) is a flip flop vector because a CPU: DECREASE followed by a CPU: INCREASE is a flip\n+     * flop impact\n+     *\n+     * @param u The first impact vector that would be applied", "originalCommit": "e9f53d19cf020a59d1dd96e8c5e6cdd69ddf7034", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTExMzg2OQ==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/287#discussion_r459113869", "bodyText": "nit: Rename u, v to something more verbose?", "author": "vigyasharma", "createdAt": "2020-07-22T22:14:27Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/actions/TimedFlipFlopDetector.java", "diffHunk": "@@ -0,0 +1,114 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.collections.TimeExpiringSet;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.ImpactVector.Dimension;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.ImpactVector.Impact;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.cluster.NodeKey;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * A {@link FlipFlopDetector} whose recorded actions expire after a given period of time.\n+ *\n+ * <p>This class defines a flip flop as an {@link Impact#DECREASES_PRESSURE}s followed by an\n+ * {@link Impact#INCREASES_PRESSURE}s to be a flip flops.\n+ *\n+ * <p>This class stores a {@link TimeExpiringSet} of {@link ImpactVector}s per {@link NodeKey}\n+ * that are used to determine these flip flops.\n+ */\n+public class TimedFlipFlopDetector implements FlipFlopDetector {\n+    private Map<NodeKey, TimeExpiringSet<ImpactVector>> flipFlopMap;\n+    private long expiryDuration;\n+    private TimeUnit expiryUnit;\n+\n+    public TimedFlipFlopDetector(long duration, TimeUnit unit) {\n+        flipFlopMap = new HashMap<>();\n+        this.expiryDuration = duration;\n+        this.expiryUnit = unit;\n+    }\n+\n+    /**\n+     * Tests if (a,b) is a flip flopping sequence of impacts.\n+     *\n+     * <p>Only an increase following a decrease is considered a flip flop\n+     *\n+     * @param a The first impact that would be applied\n+     * @param b The subsequent impact that would be applied\n+     * @return Whether or not (a,b) is a flip flopping sequence of impacts\n+     */\n+    protected boolean isFlipFlopImpact(Impact a, Impact b) {\n+        return a.equals(Impact.DECREASES_PRESSURE) && b.equals(Impact.INCREASES_PRESSURE);\n+    }\n+\n+    /**\n+     * Returns true if the impact for a given Dimension in v is a flip flop Impact when compared to\n+     * the impact for a given dimension in u\n+     *\n+     * <p>e.g. for u = (HEAP: INCREASE, CPU: DECREASE), v = (HEAP: DECREASE, CPU: INCREASE)\n+     * (u,v) is a flip flop vector because a CPU: DECREASE followed by a CPU: INCREASE is a flip\n+     * flop impact\n+     *\n+     * @param u The first impact vector that would be applied\n+     * @param v The subsequent impact vector that would be applied\n+     * @return true if the impact for a given Dimension in v is a flip flop Impact when compared to\n+     *      the impact for a given dimension in u\n+     */\n+    protected boolean isFlipFlopVector(ImpactVector u, ImpactVector v) {", "originalCommit": "e9f53d19cf020a59d1dd96e8c5e6cdd69ddf7034", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTExNjIwOA==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/287#discussion_r459116208", "bodyText": "nit: can remove the comment as method calls are self explanatory", "author": "vigyasharma", "createdAt": "2020-07-22T22:20:00Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/deciders/Publisher.java", "diffHunk": "@@ -67,13 +74,13 @@ public boolean isCooledOff(Action action) {\n \n   @Override\n   public EmptyFlowUnit operate() {\n-    // TODO: Pass through implementation, need to add dampening, action flip-flop\n-    // avoidance, state persistence etc.\n+    // TODO: Need to add dampening, avoidance, state persistence etc.\n     Decision decision = collator.getFlowUnits().get(0);\n     for (Action action : decision.getActions()) {\n-      if (isCooledOff(action)) { // Only execute actions which have passed their cool off period\n+      if (isCooledOff(action) && !flipFlopDetector.isFlipFlop(action)) { // Only execute actions which have passed their cool off period", "originalCommit": "e9f53d19cf020a59d1dd96e8c5e6cdd69ddf7034", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTExODA2NA==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/287#discussion_r459118064", "bodyText": "Nice, like how you keep this extensible.", "author": "vigyasharma", "createdAt": "2020-07-22T22:24:45Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/actions/TimedFlipFlopDetector.java", "diffHunk": "@@ -0,0 +1,114 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.collections.TimeExpiringSet;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.ImpactVector.Dimension;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.ImpactVector.Impact;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.cluster.NodeKey;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * A {@link FlipFlopDetector} whose recorded actions expire after a given period of time.\n+ *\n+ * <p>This class defines a flip flop as an {@link Impact#DECREASES_PRESSURE}s followed by an\n+ * {@link Impact#INCREASES_PRESSURE}s to be a flip flops.\n+ *\n+ * <p>This class stores a {@link TimeExpiringSet} of {@link ImpactVector}s per {@link NodeKey}\n+ * that are used to determine these flip flops.\n+ */\n+public class TimedFlipFlopDetector implements FlipFlopDetector {", "originalCommit": "e9f53d19cf020a59d1dd96e8c5e6cdd69ddf7034", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA5MDA5Nw==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/287#discussion_r461090097", "bodyText": "+1.", "author": "khushbr", "createdAt": "2020-07-27T18:35:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTExODA2NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTExODYzNw==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/287#discussion_r459118637", "bodyText": "This is good, it was important to consider impact vectors from all prior actions on the node (within the time window). Glad that you've addressed it.", "author": "vigyasharma", "createdAt": "2020-07-22T22:26:10Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/actions/TimedFlipFlopDetector.java", "diffHunk": "@@ -0,0 +1,114 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.collections.TimeExpiringSet;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.ImpactVector.Dimension;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.ImpactVector.Impact;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.cluster.NodeKey;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * A {@link FlipFlopDetector} whose recorded actions expire after a given period of time.\n+ *\n+ * <p>This class defines a flip flop as an {@link Impact#DECREASES_PRESSURE}s followed by an\n+ * {@link Impact#INCREASES_PRESSURE}s to be a flip flops.\n+ *\n+ * <p>This class stores a {@link TimeExpiringSet} of {@link ImpactVector}s per {@link NodeKey}\n+ * that are used to determine these flip flops.\n+ */\n+public class TimedFlipFlopDetector implements FlipFlopDetector {\n+    private Map<NodeKey, TimeExpiringSet<ImpactVector>> flipFlopMap;\n+    private long expiryDuration;\n+    private TimeUnit expiryUnit;\n+\n+    public TimedFlipFlopDetector(long duration, TimeUnit unit) {\n+        flipFlopMap = new HashMap<>();\n+        this.expiryDuration = duration;\n+        this.expiryUnit = unit;\n+    }\n+\n+    /**\n+     * Tests if (a,b) is a flip flopping sequence of impacts.\n+     *\n+     * <p>Only an increase following a decrease is considered a flip flop\n+     *\n+     * @param a The first impact that would be applied\n+     * @param b The subsequent impact that would be applied\n+     * @return Whether or not (a,b) is a flip flopping sequence of impacts\n+     */\n+    protected boolean isFlipFlopImpact(Impact a, Impact b) {\n+        return a.equals(Impact.DECREASES_PRESSURE) && b.equals(Impact.INCREASES_PRESSURE);\n+    }\n+\n+    /**\n+     * Returns true if the impact for a given Dimension in v is a flip flop Impact when compared to\n+     * the impact for a given dimension in u\n+     *\n+     * <p>e.g. for u = (HEAP: INCREASE, CPU: DECREASE), v = (HEAP: DECREASE, CPU: INCREASE)\n+     * (u,v) is a flip flop vector because a CPU: DECREASE followed by a CPU: INCREASE is a flip\n+     * flop impact\n+     *\n+     * @param u The first impact vector that would be applied\n+     * @param v The subsequent impact vector that would be applied\n+     * @return true if the impact for a given Dimension in v is a flip flop Impact when compared to\n+     *      the impact for a given dimension in u\n+     */\n+    protected boolean isFlipFlopVector(ImpactVector u, ImpactVector v) {\n+        Map<Dimension, Impact> currentImpact = v.getImpact();\n+        for (Map.Entry<Dimension, Impact> impactEntry : u.getImpact().entrySet()) {\n+            Dimension dim = impactEntry.getKey();\n+            Impact vImpact = currentImpact.get(dim);\n+            if (isFlipFlopImpact(impactEntry.getValue(), vImpact)) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * Records an action's various {@link ImpactVector}s so that they may be used for future flip\n+     * flop tests\n+     *\n+     * @param action The action to record\n+     */\n+    @Override\n+    public void recordAction(Action action) {\n+        for (Map.Entry<NodeKey, ImpactVector> entry : action.impact().entrySet()) {\n+            flipFlopMap.compute(entry.getKey(), (k, v) -> {\n+                if (v == null) {\n+                    v = new TimeExpiringSet<>(expiryDuration, expiryUnit);\n+                }\n+                v.add(entry.getValue());\n+                return v;\n+            });\n+        }\n+    }\n+\n+    /**\n+     * Returns true if for any NodeKey, ImpactVector pair (k, v) in action, v clashes with any of\n+     * the {@link ImpactVector}s currently associated with k.\n+     *\n+     * @param action The {@link Action} to test\n+     * @return true if applying the action would cause a flip flop\n+     */\n+    @Override\n+    public boolean isFlipFlop(Action action) {\n+        for (Map.Entry<NodeKey, ImpactVector> entry : action.impact().entrySet()) {\n+            TimeExpiringSet<ImpactVector> previousImpacts = flipFlopMap.get(entry.getKey());\n+            if (previousImpacts == null) {\n+                continue;\n+            }\n+            // Weakly-consistent iteration over the previousImpacts\n+            // If one of these impacts expires during our iteration we may incorrectly determine\n+            // action to be a flip flop until the subsequent call of this function. This is OK for\n+            // our use case since we're always erring on the side of stability\n+            for (ImpactVector impactVector : previousImpacts) {", "originalCommit": "e9f53d19cf020a59d1dd96e8c5e6cdd69ddf7034", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "290f6aeb5d1f1bacb8ccab5eca9b2f62429af92d", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/290f6aeb5d1f1bacb8ccab5eca9b2f62429af92d", "message": "Edit comments and param names for ease of reading", "committedDate": "2020-07-23T21:55:42Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA3Mjc3NQ==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/287#discussion_r461072775", "bodyText": "License information missing. Please take care to update the license to use 2020 as the year.", "author": "khushbr", "createdAt": "2020-07-27T18:04:40Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/collections/TimeExpiringSet.java", "diffHunk": "@@ -0,0 +1,76 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.collections;", "originalCommit": "290f6aeb5d1f1bacb8ccab5eca9b2f62429af92d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE2MjEyNQ==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/287#discussion_r461162125", "bodyText": "Added License info to all files in this PR", "author": "sidheart", "createdAt": "2020-07-27T20:51:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA3Mjc3NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA3NTQyOQ==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/287#discussion_r461075429", "bodyText": "nit: \"Stores a set of elements which are automatically removed from the Set after a given time period.\", can we update this to \"Caches a set of elements which are automatically evicted based on the cache TTL\"\nJust to keep it consistent with Cache terminologies.", "author": "khushbr", "createdAt": "2020-07-27T18:09:35Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/collections/TimeExpiringSet.java", "diffHunk": "@@ -0,0 +1,76 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.collections;\n+\n+import com.google.common.cache.Cache;\n+import com.google.common.cache.CacheBuilder;\n+import java.util.Iterator;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Consumer;\n+import javax.annotation.Nonnull;\n+\n+/**\n+ * Stores a set of elements which are automatically removed from the Set after a given time period.", "originalCommit": "290f6aeb5d1f1bacb8ccab5eca9b2f62429af92d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIxMzY3Mg==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/287#discussion_r461213672", "bodyText": "Done", "author": "sidheart", "createdAt": "2020-07-27T22:47:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA3NTQyOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA3NjUyNw==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/287#discussion_r461076527", "bodyText": "Can we rename duration to a more appropriate variable name?  expiryTimeout perhaps ?", "author": "khushbr", "createdAt": "2020-07-27T18:11:37Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/collections/TimeExpiringSet.java", "diffHunk": "@@ -0,0 +1,76 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.collections;\n+\n+import com.google.common.cache.Cache;\n+import com.google.common.cache.CacheBuilder;\n+import java.util.Iterator;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Consumer;\n+import javax.annotation.Nonnull;\n+\n+/**\n+ * Stores a set of elements which are automatically removed from the Set after a given time period.\n+ *\n+ * <p>Subsequent calls to add with the same element refresh the expiry period for that element.\n+ */\n+public class TimeExpiringSet<E> implements Iterable<E> {\n+  private Cache<E, E> cache;\n+\n+  /**\n+   * Allocates a new TimeExpiringSet whose elements expire after the given time period\n+   * @param duration The magnitude of the expiry duration\n+   * @param unit The unit of the expiry duration\n+   */\n+  public TimeExpiringSet(long duration, TimeUnit unit) {", "originalCommit": "290f6aeb5d1f1bacb8ccab5eca9b2f62429af92d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIxMzY1Ng==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/287#discussion_r461213656", "bodyText": "Done", "author": "sidheart", "createdAt": "2020-07-27T22:47:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA3NjUyNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA4ODA3MA==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/287#discussion_r461088070", "bodyText": "Do you think we will need the resource name for which the flip flop happened ?\nSo, for for prev = (HEAP: INCREASE, CPU: INCREASE), curr = (HEAP: DECREASE, CPU: INCREASE), we can return HEAP instead of Boolean value ?\nWhat I want to understand is if we use(or might use in future) this information anywhere.", "author": "khushbr", "createdAt": "2020-07-27T18:32:03Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/actions/TimedFlipFlopDetector.java", "diffHunk": "@@ -0,0 +1,118 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.collections.TimeExpiringSet;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.ImpactVector.Dimension;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.ImpactVector.Impact;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.cluster.NodeKey;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * A {@link FlipFlopDetector} whose recorded actions expire after a given period of time.\n+ *\n+ * <p>This class defines a flip flop as an {@link Impact#DECREASES_PRESSURE}s followed by an\n+ * {@link Impact#INCREASES_PRESSURE}s to be a flip flops.\n+ *\n+ * <p>This class stores a {@link TimeExpiringSet} of {@link ImpactVector}s per {@link NodeKey}\n+ * that are used to determine these flip flops.\n+ */\n+public class TimedFlipFlopDetector implements FlipFlopDetector {\n+    private Map<NodeKey, TimeExpiringSet<ImpactVector>> flipFlopMap;\n+    private long expiryDuration;\n+    private TimeUnit expiryUnit;\n+\n+    public TimedFlipFlopDetector(long duration, TimeUnit unit) {\n+        flipFlopMap = new HashMap<>();\n+        this.expiryDuration = duration;\n+        this.expiryUnit = unit;\n+    }\n+\n+    /**\n+     * Tests if (prev, curr) is a flip flopping sequence of impacts.\n+     *\n+     * <p>Only an increase following a decrease is considered a flip flop. Therefore, if\n+     * prev decreases pressure and curr increases pressure, then (prev, curr) is a flip flop.\n+     *\n+     * @param prev The {@link Impact} that curr is compared against\n+     * @param curr The {@link Impact} that you'd like to test and apply\n+     * @return Whether or not (prev, curr) is a flip flopping sequence of impacts\n+     */\n+    protected boolean isFlipFlopImpact(Impact prev, Impact curr) {\n+        return prev.equals(Impact.DECREASES_PRESSURE) && curr.equals(Impact.INCREASES_PRESSURE);\n+    }\n+\n+    /**\n+     * Returns true if the impact for any given Dimension in prev is a flip flop Impact when compared to\n+     * the impact for a given dimension in prev\n+     *\n+     * <p>e.g. for prev = (HEAP: INCREASE, CPU: DECREASE), curr = (HEAP: DECREASE, CPU: INCREASE)\n+     * (prev, curr) is a flip flop vector because a CPU: DECREASE followed by a CPU: INCREASE is a flip\n+     * flop impact. Note that (HEAP: DECREASE) followed by (CPU: INCREASE) is not a flip flop\n+     * because HEAP =/= CPU.\n+     *\n+     * @param prev The first {@link ImpactVector}. Its Impacts appear on the LHS of calls to\n+     *             {@link this#isFlipFlopImpact(Impact, Impact)}\n+     * @param curr The second {@link ImpactVector}. Its Impacts appear on the RHS of calls to\n+     *            {@link this#isFlipFlopImpact(Impact, Impact)}.\n+     * @return true if the impact for any given Dimension in curr is a flip flop Impact when compared to\n+     *      the impact for a given dimension in prev\n+     */\n+    protected boolean isFlipFlopVector(ImpactVector prev, ImpactVector curr) {", "originalCommit": "290f6aeb5d1f1bacb8ccab5eca9b2f62429af92d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE2MjYwNw==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/287#discussion_r461162607", "bodyText": "Since it's trivial to add this information in the future by extracting the logic in this function, I think we can table this until the need arises", "author": "sidheart", "createdAt": "2020-07-27T20:52:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA4ODA3MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA5MjgwNA==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/287#discussion_r461092804", "bodyText": "Might want to update this TODO.", "author": "khushbr", "createdAt": "2020-07-27T18:40:40Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/deciders/Publisher.java", "diffHunk": "@@ -33,13 +37,16 @@\n   private final long initTime;\n \n   private Collator collator;\n+  private FlipFlopDetector flipFlopDetector;\n   private boolean isMuted = false;\n   private Map<String, Long> actionToExecutionTime;\n \n   public Publisher(int evalIntervalSeconds, Collator collator) {\n     super(0, evalIntervalSeconds);\n     this.collator = collator;\n     this.actionToExecutionTime = new HashMap<>();\n+    // TODO please bring in guice so we can configure this with DI", "originalCommit": "290f6aeb5d1f1bacb8ccab5eca9b2f62429af92d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE2Mjc1NQ==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/287#discussion_r461162755", "bodyText": "DI refers to dependency injection in this context", "author": "sidheart", "createdAt": "2020-07-27T20:52:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA5MjgwNA=="}], "type": "inlineReview"}, {"oid": "87a81ddae1f54b8b41ed0f629035a99da94a8a8e", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/87a81ddae1f54b8b41ed0f629035a99da94a8a8e", "message": "Implement Action flip flop detection for the Publisher\n\nWe don't want to rubber-band when applying Actions (e.g. applying a CPU\nincrease right after we apply a CPU decrease).\n\nThis commit implements logic which allows the Publisher to reject\nActions which flip flop.", "committedDate": "2020-07-27T20:50:41Z", "type": "commit"}, {"oid": "24f12af93dc56c37d5754999cd9c71ea809ca623", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/24f12af93dc56c37d5754999cd9c71ea809ca623", "message": "Actually record executed actions in the Publisher", "committedDate": "2020-07-27T20:50:41Z", "type": "commit"}, {"oid": "fa6189a0cf316e95034003d7750de5e09fb075aa", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/fa6189a0cf316e95034003d7750de5e09fb075aa", "message": "Fix import lexicographical order", "committedDate": "2020-07-27T20:50:41Z", "type": "commit"}, {"oid": "d17bbf2b69041c67dd6cd3d8c48e1db9cc8cd41b", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/d17bbf2b69041c67dd6cd3d8c48e1db9cc8cd41b", "message": "Edit comments and param names for ease of reading", "committedDate": "2020-07-27T20:50:41Z", "type": "commit"}, {"oid": "06f69a47502e8383f59bab6195ea63484a628b84", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/06f69a47502e8383f59bab6195ea63484a628b84", "message": "Add copyright notice to new files", "committedDate": "2020-07-27T20:50:41Z", "type": "commit"}, {"oid": "f34ed6c95008ce755f4ee0b466349a3d0071e161", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/f34ed6c95008ce755f4ee0b466349a3d0071e161", "message": "Address khushbr PR comments", "committedDate": "2020-07-27T20:50:41Z", "type": "commit"}, {"oid": "f34ed6c95008ce755f4ee0b466349a3d0071e161", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/f34ed6c95008ce755f4ee0b466349a3d0071e161", "message": "Address khushbr PR comments", "committedDate": "2020-07-27T20:50:41Z", "type": "forcePushed"}]}