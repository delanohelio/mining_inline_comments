{"pr_number": 106, "pr_title": "Persist all flowunits into a single SQL stable", "pr_createdAt": "2020-02-14T19:18:54Z", "pr_url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/106", "timeline": [{"oid": "1642ba1d239f789212e570ee3f7bcf4de3b7c3f7", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/1642ba1d239f789212e570ee3f7bcf4de3b7c3f7", "message": "Persist all flowunit into a single SQL stable", "committedDate": "2020-02-14T05:16:57Z", "type": "commit"}, {"oid": "8b5b3801bac44d4ec025afb8b5249866789de4b1", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/8b5b3801bac44d4ec025afb8b5249866789de4b1", "message": "clean up code in DummyGraph", "committedDate": "2020-02-14T21:43:23Z", "type": "commit"}, {"oid": "f7c6ad58094215ad198ef01ef440b38d9590382b", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/f7c6ad58094215ad198ef01ef440b38d9590382b", "message": "fixed a unit test", "committedDate": "2020-02-14T22:30:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQ0Nzk1NA==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/106#discussion_r381447954", "bodyText": "A private method does not need to be synchronized if the upper level public method is", "author": "yojs", "createdAt": "2020-02-19T18:02:42Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/persistence/SQLitePersistor.java", "diffHunk": "@@ -129,28 +132,40 @@ synchronized int insertRow(String tableName, List<Object> row) throws SQLExcepti\n   @Override\n   synchronized String readTables() {\n     StringBuilder jsonResult = new StringBuilder();\n-    final JSONFormat jsonFormat = new JSONFormat().header(false);\n     jsonResult.append(\"{\");\n-    // Currently returning a json string response generated by jooq library formatJSON method\n-    // Need to change this because currently maps are being stored as strings in JSON instead of\n-    // objects\n     String tableJson =\n         super.tableNames.stream()\n-            .map(\n-                table -> {\n-                  StringBuilder jsonForEachTable = new StringBuilder();\n-                  jsonForEachTable.append(\"\\\"\" + table + \"\\\":\");\n-                  Result<Record> result = create.select().from(table).fetch();\n-                  jsonForEachTable.append(result.formatJSON(jsonFormat));\n-                  return jsonForEachTable.toString();\n-                })\n+            .map(f -> readTable(f))\n             .collect(Collectors.joining(\",\"));\n     jsonResult.append(tableJson);\n     jsonResult.append(\"}\");\n     LOG.debug(\"JSON Result - \" + jsonResult);\n     return jsonResult.toString();\n   }\n \n+  private synchronized String readTable(String tableName) {", "originalCommit": "f7c6ad58094215ad198ef01ef440b38d9590382b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTUyNTM4OQ==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/106#discussion_r381525389", "bodyText": "Add this synchronized keyword due to a findbug warning in brazil", "author": "rguo-aws", "createdAt": "2020-02-19T20:28:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQ0Nzk1NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQ0OTA0MA==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/106#discussion_r381449040", "bodyText": "At some point we need to change the name of this class. This is not dummy but the actual entry point to the RCA framework", "author": "yojs", "createdAt": "2020-02-19T18:04:47Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/DummyGraph.java", "diffHunk": "@@ -15,6 +15,12 @@\n ", "originalCommit": "f7c6ad58094215ad198ef01ef440b38d9590382b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQ1MjA3Nw==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/106#discussion_r381452077", "bodyText": "I think we should add a class level javadoc comment saying what are the tables in the SQLite database and what are the columns for each. And also add an example tables filled with data for each", "author": "yojs", "createdAt": "2020-02-19T18:10:30Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/persistence/PersistorBase.java", "diffHunk": "@@ -120,9 +120,7 @@ abstract void createTable(\n   public synchronized String read() {\n     // Currently this method only contains a call to readTables() - later could add the part to read\n     // multiple sqlite files\n-    LOG.debug(\"RCA: in read() in PersistorBase\");", "originalCommit": "f7c6ad58094215ad198ef01ef440b38d9590382b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU2MzI1NQ==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/106#discussion_r381563255", "bodyText": "done. Added to class level javadoc of each summary class.", "author": "rguo-aws", "createdAt": "2020-02-19T21:45:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQ1MjA3Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQ1MzU1NQ==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/106#discussion_r381453555", "bodyText": "Please add a javadoc comment for the public method while we are at it", "author": "yojs", "createdAt": "2020-02-19T18:13:21Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/flow_units/ResourceFlowUnit.java", "diffHunk": "@@ -128,16 +130,18 @@ public static ResourceFlowUnit buildFlowUnitFromWrapper(final FlowUnitMessage me\n   public List<Field<?>> getSqlSchema() {", "originalCommit": "f7c6ad58094215ad198ef01ef440b38d9590382b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTUxOTIwNA==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/106#discussion_r381519204", "bodyText": "done", "author": "rguo-aws", "createdAt": "2020-02-19T20:14:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQ1MzU1NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQ1MzgyMQ==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/106#discussion_r381453821", "bodyText": "please add method comment", "author": "yojs", "createdAt": "2020-02-19T18:13:51Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/flow_units/ResourceFlowUnit.java", "diffHunk": "@@ -128,16 +130,18 @@ public static ResourceFlowUnit buildFlowUnitFromWrapper(final FlowUnitMessage me\n   public List<Field<?>> getSqlSchema() {\n     List<Field<?>> schema = new ArrayList<>();\n     if (!this.isEmpty()) {\n-      schema.add(DSL.field(DSL.name(SQL_SCHEMA_CONSTANTS.TIMESTAMP_COL_NAME), String.class));\n+      schema.add(ResourceFlowUnitFieldValue.TIMESTAMP_FIELD.getField());\n+      schema.add(ResourceFlowUnitFieldValue.RCA_NAME_FILELD.getField());\n       schema.addAll(this.getResourceContext().getSqlSchema());\n     }\n     return schema;\n   }\n \n-  public List<Object> getSqlValue() {\n+  public List<Object> getSqlValue(String rcaName) {", "originalCommit": "f7c6ad58094215ad198ef01ef440b38d9590382b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTUxOTEyMg==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/106#discussion_r381519122", "bodyText": "done", "author": "rguo-aws", "createdAt": "2020-02-19T20:14:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQ1MzgyMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQ1NDUwNA==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/106#discussion_r381454504", "bodyText": "Should we avoid space in the name ?", "author": "yojs", "createdAt": "2020-02-19T18:15:03Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/flow_units/ResourceFlowUnit.java", "diffHunk": "@@ -148,9 +152,31 @@ public String toString() {\n     return this.getTimeStamp() + \": \" + resourceContext + \" :: \" + resourceSummary;\n   }\n \n+  public enum ResourceFlowUnitFieldValue implements JooqFieldValue {\n+    TIMESTAMP_FIELD(SQL_SCHEMA_CONSTANTS.TIMESTAMP_COL_NAME, String.class),\n+    RCA_NAME_FILELD(SQL_SCHEMA_CONSTANTS.RCA_COL_NAME, String.class);\n+\n+    private String name;\n+    private Class<?> clazz;\n+    ResourceFlowUnitFieldValue(final String name, Class<?> clazz) {\n+      this.name = name;\n+      this.clazz = clazz;\n+    }\n+\n+    @Override\n+    public Field<?> getField() {\n+      return DSL.field(DSL.name(this.name), this.clazz);\n+    }\n+\n+    @Override\n+    public String toString() {\n+      return this.name;\n+    }\n+  }\n \n   public static class SQL_SCHEMA_CONSTANTS {\n \n     public static final String TIMESTAMP_COL_NAME = \"TimeStamp\";\n+    public static final String RCA_COL_NAME = \"RCA Name\";", "originalCommit": "f7c6ad58094215ad198ef01ef440b38d9590382b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTUxNjQ4OA==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/106#discussion_r381516488", "bodyText": "done", "author": "rguo-aws", "createdAt": "2020-02-19T20:09:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQ1NDUwNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQ1NDc2Nw==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/106#discussion_r381454767", "bodyText": "Please add a javadoc comment", "author": "yojs", "createdAt": "2020-02-19T18:15:30Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/persist/JooqFieldValue.java", "diffHunk": "@@ -0,0 +1,22 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.persist;\n+\n+import org.jooq.Field;\n+\n+public interface JooqFieldValue {", "originalCommit": "f7c6ad58094215ad198ef01ef440b38d9590382b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTUxNTkxMw==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/106#discussion_r381515913", "bodyText": "done", "author": "rguo-aws", "createdAt": "2020-02-19T20:08:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQ1NDc2Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQ1ODQyNw==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/106#discussion_r381458427", "bodyText": "Can the list contain values other than strings ?", "author": "yojs", "createdAt": "2020-02-19T18:21:58Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/flow_units/ResourceFlowUnit.java", "diffHunk": "@@ -128,16 +130,18 @@ public static ResourceFlowUnit buildFlowUnitFromWrapper(final FlowUnitMessage me\n   public List<Field<?>> getSqlSchema() {\n     List<Field<?>> schema = new ArrayList<>();\n     if (!this.isEmpty()) {\n-      schema.add(DSL.field(DSL.name(SQL_SCHEMA_CONSTANTS.TIMESTAMP_COL_NAME), String.class));\n+      schema.add(ResourceFlowUnitFieldValue.TIMESTAMP_FIELD.getField());\n+      schema.add(ResourceFlowUnitFieldValue.RCA_NAME_FILELD.getField());\n       schema.addAll(this.getResourceContext().getSqlSchema());\n     }\n     return schema;\n   }\n \n-  public List<Object> getSqlValue() {\n+  public List<Object> getSqlValue(String rcaName) {\n     List<Object> value = new ArrayList<>();", "originalCommit": "f7c6ad58094215ad198ef01ef440b38d9590382b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTUxNDA0Nw==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/106#discussion_r381514047", "bodyText": "Yes, we can have Double and Integer as well.", "author": "rguo-aws", "createdAt": "2020-02-19T20:04:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQ1ODQyNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQ2MDMzMQ==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/106#discussion_r381460331", "bodyText": "Let's not try to hand roll json here and use a JSONObject or some library to do it.", "author": "yojs", "createdAt": "2020-02-19T18:25:24Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/persistence/SQLitePersistor.java", "diffHunk": "@@ -129,28 +132,40 @@ synchronized int insertRow(String tableName, List<Object> row) throws SQLExcepti\n   @Override\n   synchronized String readTables() {\n     StringBuilder jsonResult = new StringBuilder();\n-    final JSONFormat jsonFormat = new JSONFormat().header(false);\n     jsonResult.append(\"{\");\n-    // Currently returning a json string response generated by jooq library formatJSON method\n-    // Need to change this because currently maps are being stored as strings in JSON instead of\n-    // objects\n     String tableJson =\n         super.tableNames.stream()\n-            .map(\n-                table -> {\n-                  StringBuilder jsonForEachTable = new StringBuilder();\n-                  jsonForEachTable.append(\"\\\"\" + table + \"\\\":\");\n-                  Result<Record> result = create.select().from(table).fetch();\n-                  jsonForEachTable.append(result.formatJSON(jsonFormat));\n-                  return jsonForEachTable.toString();\n-                })\n+            .map(f -> readTable(f))\n             .collect(Collectors.joining(\",\"));\n     jsonResult.append(tableJson);\n     jsonResult.append(\"}\");\n     LOG.debug(\"JSON Result - \" + jsonResult);\n     return jsonResult.toString();\n   }\n \n+  private synchronized String readTable(String tableName) {\n+    final JSONFormat jsonFormat = new JSONFormat().header(false);\n+    StringBuilder jsonForEachTable = new StringBuilder();\n+    jsonForEachTable.append(\"\\\"\" + tableName + \"\\\":\");", "originalCommit": "f7c6ad58094215ad198ef01ef440b38d9590382b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTYwMjczOA==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/106#discussion_r381602738", "bodyText": "done", "author": "rguo-aws", "createdAt": "2020-02-19T23:16:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQ2MDMzMQ=="}], "type": "inlineReview"}, {"oid": "205428453a048a2ce054d9f75994ccef39246cc5", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/205428453a048a2ce054d9f75994ccef39246cc5", "message": "Changes made based on PR comments", "committedDate": "2020-02-19T23:15:17Z", "type": "commit"}, {"oid": "7546c103d79dfb96521e4cde4fe977aaf12b266b", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/7546c103d79dfb96521e4cde4fe977aaf12b266b", "message": "Fixed a minor issue", "committedDate": "2020-02-19T23:17:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTYxMjk4MA==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/106#discussion_r381612980", "bodyText": "If this is the name of the column, can we add the unit of measure to the name of the column so \"time_period_seconds\" ?", "author": "yojs", "createdAt": "2020-02-19T23:47:00Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/summaries/HotResourceSummary.java", "diffHunk": "@@ -30,6 +30,13 @@\n  * HotResourceSummary contains information such as the name of the hot resource, the current value\n  * threshold, etc. It also contains the top K consumers of this particular resource. It is created\n  * by some RCAs who work directly on some type of resource(JVM, CPU etc.)\n+ *\n+ * <p>This object is persisted in SQLite table\n+ * Table name : HotResourceSummary\n+ *\n+ * <p>schema :\n+ * | ID(primary key) | Resource Type | Threshold | Value | Avg | Min | Max | Unit Type | Time Period |ID in HotNodeSummary(foreign key)", "originalCommit": "7546c103d79dfb96521e4cde4fe977aaf12b266b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTYyMjk1Mg==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/106#discussion_r381622952", "bodyText": "done. changed it to time_period_seconds", "author": "rguo-aws", "createdAt": "2020-02-20T00:20:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTYxMjk4MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTYxMzk3Mg==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/106#discussion_r381613972", "bodyText": "can we change the name of the table to RCA otherwise, people looking at schema wouldn't know what that table means ?", "author": "yojs", "createdAt": "2020-02-19T23:50:18Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/flow_units/ResourceFlowUnit.java", "diffHunk": "@@ -27,8 +28,19 @@\n import org.jooq.Field;\n import org.jooq.impl.DSL;\n \n+/**\n+ * ResourceFlowUnit is the flowunit type that is emitted by RCA vertex.\n+ * It is persisted in the FlowUnit SQLite table\n+ *\n+ * <p>The SQL table name  : FlowUnit", "originalCommit": "7546c103d79dfb96521e4cde4fe977aaf12b266b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTYyMDY5Nw==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/106#discussion_r381620697", "bodyText": "done. changed to RCA", "author": "rguo-aws", "createdAt": "2020-02-20T00:12:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTYxMzk3Mg=="}], "type": "inlineReview"}, {"oid": "71c76d6cf49d3b3cab3f795fcfb96bc1430075b1", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/71c76d6cf49d3b3cab3f795fcfb96bc1430075b1", "message": "Change the RCA table name", "committedDate": "2020-02-20T00:11:32Z", "type": "commit"}]}