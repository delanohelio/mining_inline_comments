{"pr_number": 365, "pr_title": "Refactor ModifyQueueCapacityAction to follow builder pattern", "pr_createdAt": "2020-08-12T00:05:26Z", "pr_url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/365", "timeline": [{"oid": "4b3271fb1ba503ea87322ee8c1563bb873150838", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/4b3271fb1ba503ea87322ee8c1563bb873150838", "message": "Refactor ModifyQueueCapacityAction to follow builder pattern", "committedDate": "2020-08-12T00:02:43Z", "type": "commit"}, {"oid": "72ca4ec2994133ec03d0b49d243e0ac6be514711", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/72ca4ec2994133ec03d0b49d243e0ac6be514711", "message": "clean up code", "committedDate": "2020-08-12T00:20:22Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQzMjE1Mg==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/365#discussion_r469432152", "bodyText": "Let's create a task and prioritize this.", "author": "vigyasharma", "createdAt": "2020-08-12T17:43:22Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/actions/ModifyQueueCapacityAction.java", "diffHunk": "@@ -127,4 +112,103 @@ public int getDesiredCapacity() {\n   public ResourceEnum getThreadPool() {\n     return threadPool;\n   }\n+\n+  public static final class Builder {\n+    public static final long DEFAULT_COOL_OFF_PERIOD_IN_MILLIS = 300 * 1_000;\n+    public static final int DEFAULT_STEP_SIZE = 50;\n+    public static final boolean DEFAULT_IS_INCREASE = true;\n+\n+    private int stepSize;\n+    private boolean isIncrease;\n+    private long coolOffPeriodInMillis;\n+    private int upperBound;\n+    private int lowerBound;\n+    private final ResourceEnum threadPool;\n+    private final NodeKey esNode;\n+    private final AppContext appContext;\n+\n+    private Integer currentCapacity;\n+    private Integer desiredCapacity;\n+\n+    public Builder(NodeKey esNode, ResourceEnum threadPool, AppContext appContext) {\n+      this.esNode = esNode;\n+      this.threadPool = threadPool;\n+      this.appContext = appContext;\n+      this.coolOffPeriodInMillis = DEFAULT_COOL_OFF_PERIOD_IN_MILLIS;\n+      this.stepSize = DEFAULT_STEP_SIZE;\n+      this.isIncrease = DEFAULT_IS_INCREASE;\n+      this.desiredCapacity = null;\n+      this.currentCapacity =\n+          NodeConfigCacheReaderUtil.readQueueCapacity(appContext.getNodeConfigCache(), esNode, threadPool);\n+      setDefaultBounds(threadPool);\n+    }\n+\n+    private void setDefaultBounds(ResourceEnum threadPool) {\n+      // TODO: Move configuration values to rca.conf", "originalCommit": "72ca4ec2994133ec03d0b49d243e0ac6be514711", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ0MTk3Nw==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/365#discussion_r469441977", "bodyText": "Let's create a QueueConfig class that can extract all queue related configs from RcaConf and apply defaults/overrides. We don't want to clutter rca.conf with default values, but also don't want to scatter queue config across multiple places. The queue builder will then just accept a QueueConfig object and use bounds from it.", "author": "vigyasharma", "createdAt": "2020-08-12T18:00:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQzMjE1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU3ODUxNQ==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/365#discussion_r469578515", "bodyText": "As per our discussion, let's track this in a separate issue. Action build should keep a reference of RcaConf class object and read the corresponding action configs(or default configs) from the conf object. The RcaConf object can be either passed in from decider or we can add the RcaConf into AppContext and share it within the process.", "author": "rguo-aws", "createdAt": "2020-08-12T22:19:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQzMjE1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU3OTIzOQ==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/365#discussion_r469579239", "bodyText": "issue created #367", "author": "rguo-aws", "createdAt": "2020-08-12T22:21:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQzMjE1Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQzNDEyNw==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/365#discussion_r469434127", "bodyText": "Returning null here requires callers to handle this explicitly. Instead, we can create an action object that is not actionable. We should also log an error here as current capacity is expected.", "author": "vigyasharma", "createdAt": "2020-08-12T17:46:51Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/actions/ModifyQueueCapacityAction.java", "diffHunk": "@@ -127,4 +112,103 @@ public int getDesiredCapacity() {\n   public ResourceEnum getThreadPool() {\n     return threadPool;\n   }\n+\n+  public static final class Builder {\n+    public static final long DEFAULT_COOL_OFF_PERIOD_IN_MILLIS = 300 * 1_000;\n+    public static final int DEFAULT_STEP_SIZE = 50;\n+    public static final boolean DEFAULT_IS_INCREASE = true;\n+\n+    private int stepSize;\n+    private boolean isIncrease;\n+    private long coolOffPeriodInMillis;\n+    private int upperBound;\n+    private int lowerBound;\n+    private final ResourceEnum threadPool;\n+    private final NodeKey esNode;\n+    private final AppContext appContext;\n+\n+    private Integer currentCapacity;\n+    private Integer desiredCapacity;\n+\n+    public Builder(NodeKey esNode, ResourceEnum threadPool, AppContext appContext) {\n+      this.esNode = esNode;\n+      this.threadPool = threadPool;\n+      this.appContext = appContext;\n+      this.coolOffPeriodInMillis = DEFAULT_COOL_OFF_PERIOD_IN_MILLIS;\n+      this.stepSize = DEFAULT_STEP_SIZE;\n+      this.isIncrease = DEFAULT_IS_INCREASE;\n+      this.desiredCapacity = null;\n+      this.currentCapacity =\n+          NodeConfigCacheReaderUtil.readQueueCapacity(appContext.getNodeConfigCache(), esNode, threadPool);\n+      setDefaultBounds(threadPool);\n+    }\n+\n+    private void setDefaultBounds(ResourceEnum threadPool) {\n+      // TODO: Move configuration values to rca.conf\n+      switch (threadPool) {\n+        case WRITE_THREADPOOL:\n+          this.lowerBound = 100;\n+          this.upperBound = 1000;\n+          break;\n+        case SEARCH_THREADPOOL:\n+          this.lowerBound = 1000;\n+          this.upperBound = 3000;\n+          break;\n+        default:\n+          assert false : \"unrecognized threadpool type: \" + threadPool.name();\n+      }\n+    }\n+\n+    public Builder setCoolOffPeriod(long coolOffPeriodInMillis) {\n+      this.coolOffPeriodInMillis = coolOffPeriodInMillis;\n+      return this;\n+    }\n+\n+    public Builder setIncrease(boolean isInrease) {\n+      this.isIncrease = isInrease;\n+      return this;\n+    }\n+\n+    public Builder setDesiredCapacity(int desiredCapacity) {\n+      this.desiredCapacity = desiredCapacity;\n+      return this;\n+    }\n+\n+    public Builder setDesiredCapacityToMinimal() {\n+      this.desiredCapacity = this.lowerBound;\n+      return this;\n+    }\n+\n+    public Builder setStepSize(int stepSize) {\n+      this.stepSize = stepSize;\n+      return this;\n+    }\n+\n+    public Builder setUpperBound(int upperBound) {\n+      this.upperBound = upperBound;\n+      return this;\n+    }\n+\n+    public Builder setLowerBound(int lowerBound) {\n+      this.lowerBound = lowerBound;\n+      return this;\n+    }\n+\n+    public ModifyQueueCapacityAction build() {\n+      //fail to read capacity from node config cache\n+      // return null action\n+      if (currentCapacity == null) {\n+        return null;", "originalCommit": "72ca4ec2994133ec03d0b49d243e0ac6be514711", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU3NzExOQ==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/365#discussion_r469577119", "bodyText": "done. Action builder will return a non-actionable default action if it fails to read current capacity from node config cache", "author": "rguo-aws", "createdAt": "2020-08-12T22:15:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQzNDEyNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQzNTg5OA==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/365#discussion_r469435898", "bodyText": "nit: with a Builder, we don't need to prefix all these functions with set.... We can just call them coolOffPeriod(), increase(), desiredCapacity(), ...", "author": "vigyasharma", "createdAt": "2020-08-12T17:49:48Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/actions/ModifyQueueCapacityAction.java", "diffHunk": "@@ -127,4 +112,103 @@ public int getDesiredCapacity() {\n   public ResourceEnum getThreadPool() {\n     return threadPool;\n   }\n+\n+  public static final class Builder {\n+    public static final long DEFAULT_COOL_OFF_PERIOD_IN_MILLIS = 300 * 1_000;\n+    public static final int DEFAULT_STEP_SIZE = 50;\n+    public static final boolean DEFAULT_IS_INCREASE = true;\n+\n+    private int stepSize;\n+    private boolean isIncrease;\n+    private long coolOffPeriodInMillis;\n+    private int upperBound;\n+    private int lowerBound;\n+    private final ResourceEnum threadPool;\n+    private final NodeKey esNode;\n+    private final AppContext appContext;\n+\n+    private Integer currentCapacity;\n+    private Integer desiredCapacity;\n+\n+    public Builder(NodeKey esNode, ResourceEnum threadPool, AppContext appContext) {\n+      this.esNode = esNode;\n+      this.threadPool = threadPool;\n+      this.appContext = appContext;\n+      this.coolOffPeriodInMillis = DEFAULT_COOL_OFF_PERIOD_IN_MILLIS;\n+      this.stepSize = DEFAULT_STEP_SIZE;\n+      this.isIncrease = DEFAULT_IS_INCREASE;\n+      this.desiredCapacity = null;\n+      this.currentCapacity =\n+          NodeConfigCacheReaderUtil.readQueueCapacity(appContext.getNodeConfigCache(), esNode, threadPool);\n+      setDefaultBounds(threadPool);\n+    }\n+\n+    private void setDefaultBounds(ResourceEnum threadPool) {\n+      // TODO: Move configuration values to rca.conf\n+      switch (threadPool) {\n+        case WRITE_THREADPOOL:\n+          this.lowerBound = 100;\n+          this.upperBound = 1000;\n+          break;\n+        case SEARCH_THREADPOOL:\n+          this.lowerBound = 1000;\n+          this.upperBound = 3000;\n+          break;\n+        default:\n+          assert false : \"unrecognized threadpool type: \" + threadPool.name();\n+      }\n+    }\n+\n+    public Builder setCoolOffPeriod(long coolOffPeriodInMillis) {", "originalCommit": "72ca4ec2994133ec03d0b49d243e0ac6be514711", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU3NzI4Nw==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/365#discussion_r469577287", "bodyText": "done renamed those method to remove the set prefix", "author": "rguo-aws", "createdAt": "2020-08-12T22:16:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQzNTg5OA=="}], "type": "inlineReview"}, {"oid": "8e591034adb794052d308084e8b0edd567a3c3ec", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/8e591034adb794052d308084e8b0edd567a3c3ec", "message": "Address PR comments", "committedDate": "2020-08-12T21:49:20Z", "type": "commit"}, {"oid": "e0047e9d632c7404d67482165bc70a871fce9a9d", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/e0047e9d632c7404d67482165bc70a871fce9a9d", "message": "Add error log", "committedDate": "2020-08-12T22:14:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDEzNjE1Ng==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/365#discussion_r470136156", "bodyText": "isIncrease*", "author": "sruti1312", "createdAt": "2020-08-13T17:46:53Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/actions/ModifyQueueCapacityAction.java", "diffHunk": "@@ -127,4 +118,108 @@ public int getDesiredCapacity() {\n   public ResourceEnum getThreadPool() {\n     return threadPool;\n   }\n+\n+  public static final class Builder {\n+    public static final long DEFAULT_COOL_OFF_PERIOD_IN_MILLIS = 300 * 1_000;\n+    public static final int DEFAULT_STEP_SIZE = 50;\n+    public static final boolean DEFAULT_IS_INCREASE = true;\n+    public static final boolean DEFAULT_CAN_UPDATE = true;\n+\n+    private int stepSize;\n+    private boolean isIncrease;\n+    private boolean canUpdate;\n+    private long coolOffPeriodInMillis;\n+    private int upperBound;\n+    private int lowerBound;\n+    private final ResourceEnum threadPool;\n+    private final NodeKey esNode;\n+    private final AppContext appContext;\n+\n+    private Integer currentCapacity;\n+    private Integer desiredCapacity;\n+\n+    public Builder(NodeKey esNode, ResourceEnum threadPool, AppContext appContext) {\n+      this.esNode = esNode;\n+      this.threadPool = threadPool;\n+      this.appContext = appContext;\n+      this.coolOffPeriodInMillis = DEFAULT_COOL_OFF_PERIOD_IN_MILLIS;\n+      this.stepSize = DEFAULT_STEP_SIZE;\n+      this.isIncrease = DEFAULT_IS_INCREASE;\n+      this.canUpdate = DEFAULT_CAN_UPDATE;\n+      this.desiredCapacity = null;\n+      this.currentCapacity =\n+          NodeConfigCacheReaderUtil.readQueueCapacity(appContext.getNodeConfigCache(), esNode, threadPool);\n+      setDefaultBounds(threadPool);\n+    }\n+\n+    private void setDefaultBounds(ResourceEnum threadPool) {\n+      // TODO: Move configuration values to rca.conf\n+      switch (threadPool) {\n+        case WRITE_THREADPOOL:\n+          this.lowerBound = 100;\n+          this.upperBound = 1000;\n+          break;\n+        case SEARCH_THREADPOOL:\n+          this.lowerBound = 1000;\n+          this.upperBound = 3000;\n+          break;\n+        default:\n+          assert false : \"unrecognized threadpool type: \" + threadPool.name();\n+      }\n+    }\n+\n+    public Builder coolOffPeriod(long coolOffPeriodInMillis) {\n+      this.coolOffPeriodInMillis = coolOffPeriodInMillis;\n+      return this;\n+    }\n+\n+    public Builder increase(boolean isInrease) {", "originalCommit": "e0047e9d632c7404d67482165bc70a871fce9a9d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDI0NzY4MA==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/365#discussion_r470247680", "bodyText": "thanks, will fix this", "author": "rguo-aws", "createdAt": "2020-08-13T21:04:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDEzNjE1Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE0ODA5OQ==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/365#discussion_r470148099", "bodyText": "Why do we want lower and upper bound here? Builder takes these values in consideration for calculating the desired value.\nI do not see a place where they are used.", "author": "sruti1312", "createdAt": "2020-08-13T18:05:46Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/actions/ModifyQueueCapacityAction.java", "diffHunk": "@@ -23,34 +23,43 @@\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.ResourceEnum;\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.cluster.NodeKey;\n \n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.util.NodeConfigCacheReaderUtil;\n import java.util.Collections;\n-import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n \n public class ModifyQueueCapacityAction extends SuppressibleAction {\n \n-  public static final String NAME = \"modify_queue_capacity\";\n-  public static final long COOL_OFF_PERIOD_IN_MILLIS = 300 * 1_000;\n-\n-  private int currentCapacity;\n-  private int desiredCapacity;\n-  private ResourceEnum threadPool;\n-  private NodeKey esNode;\n-\n-  private Map<ResourceEnum, Integer> lowerBound = new HashMap<>();\n-  private Map<ResourceEnum, Integer> upperBound = new HashMap<>();\n-\n-  public ModifyQueueCapacityAction(NodeKey esNode, ResourceEnum threadPool, int currentCapacity,\n-      boolean increase, AppContext appContext) {\n+  private static final Logger LOG = LogManager.getLogger(ModifyQueueCapacityAction.class);\n+  public static final String NAME = \"ModifyQueueCapacity\";\n+\n+  private final ResourceEnum threadPool;\n+  private final NodeKey esNode;\n+  private final int desiredCapacity;\n+  private final int currentCapacity;\n+  private final int lowerBound;\n+  private final int upperBound;", "originalCommit": "e0047e9d632c7404d67482165bc70a871fce9a9d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDI0NzUyNQ==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/365#discussion_r470247525", "bodyText": "one use case is the decider might use this upper/lower bound to calculate the proper step size for each action. We don't use it at this moment but let's say JVM decider will bucketize the current capacity between the [lower, upper] range and based the bucket this resource is allocated, the decider might choose different step size to tune the resource", "author": "rguo-aws", "createdAt": "2020-08-13T21:04:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE0ODA5OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDI0ODQ5NA==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/365#discussion_r470248494", "bodyText": "we can remove them later if decider is end up not using it", "author": "rguo-aws", "createdAt": "2020-08-13T21:06:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE0ODA5OQ=="}], "type": "inlineReview"}, {"oid": "ebe5885d332dac7da9f1b5f421cd3b9a6ab4c807", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/ebe5885d332dac7da9f1b5f421cd3b9a6ab4c807", "message": "Address PR comment", "committedDate": "2020-08-14T22:19:13Z", "type": "commit"}, {"oid": "348f3819a1bc646563aa44c6e021728e312c5f62", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/348f3819a1bc646563aa44c6e021728e312c5f62", "message": "Merge remote-tracking branch 'origin/master' into rguo-action-builder", "committedDate": "2020-08-14T22:26:02Z", "type": "commit"}]}