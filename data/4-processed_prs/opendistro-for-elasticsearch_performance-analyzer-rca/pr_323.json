{"pr_number": 323, "pr_title": "Persistance concurrency bug", "pr_createdAt": "2020-07-30T19:29:12Z", "pr_url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/323", "timeline": [{"oid": "5a1a4a5d1840684bf07bdb70657c6fef6cd258ca", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/5a1a4a5d1840684bf07bdb70657c6fef6cd258ca", "message": "addressing the checkstyle issues", "committedDate": "2020-07-30T20:25:39Z", "type": "forcePushed"}, {"oid": "02726fa42899d47e867bc804daff85a38f9db7be", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/02726fa42899d47e867bc804daff85a38f9db7be", "message": "some refactoring in persistance layer for better error messages and error catching\n\nAdded a test that does concurrent writes to the DB", "committedDate": "2020-07-30T21:42:49Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzI5MTYxMQ==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/323#discussion_r463291611", "bodyText": "Since we are consuming the exception, can we add a log statement for the else case that we were not expecting the table to have been created already but we're going to use the one already created?", "author": "ktkrg", "createdAt": "2020-07-30T21:50:32Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/persistence/SQLitePersistor.java", "diffHunk": "@@ -98,37 +106,40 @@ synchronized void createTable(String tableName, List<Field<?>> columns, String r\n                                 String referenceTablePrimaryKeyFieldName) throws SQLException {\n     Field foreignKeyField = DSL.field(referenceTablePrimaryKeyFieldName, Integer.class);\n     columns.add(foreignKeyField);\n-    Table referenceTable = DSL.table(referenceTableName);\n-    CreateTableConstraintStep constraintStep = create.createTable(tableName)\n-        .column(DSL.field(getPrimaryKeyColumnName(tableName) + PRIMARY_KEY_AUTOINCREMENT_POSTFIX))\n-        .columns(columns)\n-        .constraints(DSL.constraint(foreignKeyField.getName() + \"_FK\").foreignKey(foreignKeyField)\n-            .references(referenceTable, DSL.field(referenceTablePrimaryKeyFieldName)));\n \n-    LOG.debug(\"table with fk created: {}\", constraintStep.toString());\n     try {\n+      Table referenceTable = DSL.table(referenceTableName);\n+      CreateTableConstraintStep constraintStep = create.createTable(tableName)\n+          .column(DSL.field(getPrimaryKeyColumnName(tableName) + PRIMARY_KEY_AUTOINCREMENT_POSTFIX))\n+          .columns(columns)\n+          .constraints(DSL.constraint(foreignKeyField.getName() + \"_FK\").foreignKey(foreignKeyField)\n+              .references(referenceTable, DSL.field(referenceTablePrimaryKeyFieldName)));\n       constraintStep.execute();\n+      LOG.debug(\"table with fk created: {}\", constraintStep.toString());\n       jooqTableColumns.put(tableName, columns);\n-    } catch (Exception e) {\n-      LOG.error(\"Failed to create table {}\", tableName);\n-      throw new SQLException();\n+    } catch (DataAccessException e) {\n+      String msg = \"table \" + tableName + \" already exists\";\n+      if (!e.getMessage().contains(msg)) {\n+        LOG.error(e);\n+        throw new SQLException(e);\n+      }", "originalCommit": "02726fa42899d47e867bc804daff85a38f9db7be", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzMyODI2Nw==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/323#discussion_r463328267", "bodyText": "good point !", "author": "yojs", "createdAt": "2020-07-30T23:36:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzI5MTYxMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzMxMDg0MQ==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/323#discussion_r463310841", "bodyText": "We should add StandardCopyOption.ATOMIC_MOVE to the copy options as well.", "author": "ktkrg", "createdAt": "2020-07-30T22:39:24Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/persistence/FileRotate.java", "diffHunk": "@@ -115,7 +116,14 @@ protected Path rotate(long currentMillis) throws IOException {\n       Files.move(FILE_TO_ROTATE, targetFilePath);\n       lastRotatedMillis = System.currentTimeMillis();\n     } catch (FileAlreadyExistsException fae) {\n-      LOG.error(fae);\n+      if (!Files.deleteIfExists(targetFilePath)) {\n+        LOG.error(\"Could not delete file: \" + targetFilePath);\n+      }\n+      try {\n+        Files.move(FILE_TO_ROTATE, targetFilePath, StandardCopyOption.REPLACE_EXISTING);", "originalCommit": "02726fa42899d47e867bc804daff85a38f9db7be", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzMyODU1MA==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/323#discussion_r463328550", "bodyText": "\ud83d\udc4d", "author": "yojs", "createdAt": "2020-07-30T23:37:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzMxMDg0MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzg1NzE3OQ==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/323#discussion_r463857179", "bodyText": "I assume creating the SQL statement itself does not throw any exception. Can we leave this part out of the try block ?", "author": "rguo-aws", "createdAt": "2020-07-31T21:35:09Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/persistence/SQLitePersistor.java", "diffHunk": "@@ -98,37 +111,54 @@ synchronized void createTable(String tableName, List<Field<?>> columns, String r\n                                 String referenceTablePrimaryKeyFieldName) throws SQLException {\n     Field foreignKeyField = DSL.field(referenceTablePrimaryKeyFieldName, Integer.class);\n     columns.add(foreignKeyField);\n-    Table referenceTable = DSL.table(referenceTableName);\n-    CreateTableConstraintStep constraintStep = create.createTable(tableName)\n-        .column(DSL.field(getPrimaryKeyColumnName(tableName) + PRIMARY_KEY_AUTOINCREMENT_POSTFIX))\n-        .columns(columns)\n-        .constraints(DSL.constraint(foreignKeyField.getName() + \"_FK\").foreignKey(foreignKeyField)\n-            .references(referenceTable, DSL.field(referenceTablePrimaryKeyFieldName)));\n \n-    LOG.debug(\"table with fk created: {}\", constraintStep.toString());\n     try {\n+      LOG.debug(\"Trying to create a summary table: {} that references {}\", tableName, referenceTableName);\n+      Table referenceTable = DSL.table(referenceTableName);\n+      CreateTableConstraintStep constraintStep = create.createTable(tableName)", "originalCommit": "65a9c4d437fad10c9cb353ffa3179a2e5ab1cdf6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDUzMTQzNg==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/323#discussion_r464531436", "bodyText": "The DSLContext can be uninitialized if we are not using synchronization between the threads. I saw a case where the table was added to hastable but the columns for the table were missing. We gather some date to create the createStatement and it the gathering part we can run into exceptions.\nThese cases are fixed now but it would be good to catch and log exception. But you are right, the scope of exceptions is larger and so I have added code to catch exception and not just DataAcessException.", "author": "yojs", "createdAt": "2020-08-03T16:42:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzg1NzE3OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzg1NzI5Mw==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/323#discussion_r463857293", "bodyText": "same as above", "author": "rguo-aws", "createdAt": "2020-07-31T21:35:29Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/persistence/SQLitePersistor.java", "diffHunk": "@@ -98,37 +111,54 @@ synchronized void createTable(String tableName, List<Field<?>> columns, String r\n                                 String referenceTablePrimaryKeyFieldName) throws SQLException {\n     Field foreignKeyField = DSL.field(referenceTablePrimaryKeyFieldName, Integer.class);\n     columns.add(foreignKeyField);\n-    Table referenceTable = DSL.table(referenceTableName);\n-    CreateTableConstraintStep constraintStep = create.createTable(tableName)\n-        .column(DSL.field(getPrimaryKeyColumnName(tableName) + PRIMARY_KEY_AUTOINCREMENT_POSTFIX))\n-        .columns(columns)\n-        .constraints(DSL.constraint(foreignKeyField.getName() + \"_FK\").foreignKey(foreignKeyField)\n-            .references(referenceTable, DSL.field(referenceTablePrimaryKeyFieldName)));\n \n-    LOG.debug(\"table with fk created: {}\", constraintStep.toString());\n     try {\n+      LOG.debug(\"Trying to create a summary table: {} that references {}\", tableName, referenceTableName);\n+      Table referenceTable = DSL.table(referenceTableName);\n+      CreateTableConstraintStep constraintStep = create.createTable(tableName)\n+          .column(DSL.field(getPrimaryKeyColumnName(tableName) + PRIMARY_KEY_AUTOINCREMENT_POSTFIX))\n+          .columns(columns)\n+          .constraints(DSL.constraint(foreignKeyField.getName() + \"_FK\").foreignKey(foreignKeyField)\n+              .references(referenceTable, DSL.field(referenceTablePrimaryKeyFieldName)));\n       constraintStep.execute();\n-      jooqTableColumns.put(tableName, columns);\n-    } catch (Exception e) {\n-      LOG.error(\"Failed to create table {}\", tableName);\n-      throw new SQLException();\n+      LOG.debug(\"table with fk created: {}\", constraintStep.toString());\n+    } catch (DataAccessException e) {\n+      String msg = \"table \" + tableName + \" already exists\";\n+      if (e.getMessage().contains(msg)) {\n+        LOG.debug(e.getMessage());\n+      } else {\n+        LOG.error(\"Error creating table: {}\", tableName, e);\n+        throw new SQLException(e);\n+      }\n     }\n+    tableNames.add(tableName);\n+    jooqTableColumns.put(tableName, columns);\n   }\n \n   @Override\n   synchronized int insertRow(String tableName, List<Object> row) throws SQLException {\n     int lastPrimaryKey = -1;\n     String sqlQuery = \"SELECT \" + LAST_INSERT_ROWID;\n-    InsertValuesStepN insertValuesStepN = create.insertInto(DSL.table(tableName))\n-        .columns(jooqTableColumns.get(tableName))\n-        .values(row);\n-    LOG.debug(\"sql insert: {}\", insertValuesStepN.toString());\n+\n+    Objects.requireNonNull(create, \"DSLContext cannot be null\");\n+    Table<Record> table = DSL.table(tableName);\n+    List<Field<?>> columnsForTable = jooqTableColumns.get(tableName);\n+    if (columnsForTable == null) {\n+      LOG.error(\"NO columns found for table: {}. Tables: {}, columns: {}\", tableName, tableNames, jooqTableColumns);\n+      throw new SQLException(\"No columns exist for table.\");\n+    }\n+\n     try {\n+      InsertValuesStepN insertValuesStepN = create", "originalCommit": "65a9c4d437fad10c9cb353ffa3179a2e5ab1cdf6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDUzMjgyNw==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/323#discussion_r464532827", "bodyText": "This create statement is less involved and therefore changes of exceptions are less. Will move it out.", "author": "yojs", "createdAt": "2020-08-03T16:45:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzg1NzI5Mw=="}], "type": "inlineReview"}, {"oid": "f3e6651abcacaa26c8473099ac8db2f73216e965", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/f3e6651abcacaa26c8473099ac8db2f73216e965", "message": "some refactoring in persistance layer for better error messages and error catching\n\nAdded a test that does concurrent writes to the DB", "committedDate": "2020-08-03T16:31:44Z", "type": "commit"}, {"oid": "4641ea82085dab4ef740acddaaed41072f4ecc2b", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/4641ea82085dab4ef740acddaaed41072f4ecc2b", "message": "Addressing review comments", "committedDate": "2020-08-03T16:31:44Z", "type": "commit"}, {"oid": "3c865e77fefbae0dc3d4ec96c811617875cc781a", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/3c865e77fefbae0dc3d4ec96c811617875cc781a", "message": "Handling the failing test", "committedDate": "2020-08-03T16:31:44Z", "type": "commit"}, {"oid": "6d5fdf8416be8dd5a21bca610ae8ef03dcfaa4b9", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/6d5fdf8416be8dd5a21bca610ae8ef03dcfaa4b9", "message": "checkstyle fixes", "committedDate": "2020-08-03T16:31:44Z", "type": "commit"}, {"oid": "53819e70b29e90f80aec9f5643a7190d5e89f152", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/53819e70b29e90f80aec9f5643a7190d5e89f152", "message": "test fixes", "committedDate": "2020-08-03T16:31:44Z", "type": "commit"}, {"oid": "ed3410ca9e62950bdb4e17c8833abf072fd9bb04", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/ed3410ca9e62950bdb4e17c8833abf072fd9bb04", "message": "More PR comments addressing", "committedDate": "2020-08-03T16:46:20Z", "type": "commit"}, {"oid": "ed3410ca9e62950bdb4e17c8833abf072fd9bb04", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/ed3410ca9e62950bdb4e17c8833abf072fd9bb04", "message": "More PR comments addressing", "committedDate": "2020-08-03T16:46:20Z", "type": "forcePushed"}]}