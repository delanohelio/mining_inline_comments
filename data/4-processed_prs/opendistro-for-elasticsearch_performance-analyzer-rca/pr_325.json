{"pr_number": 325, "pr_title": "Reader changes for dynamic enable/disable of RCA graph components", "pr_createdAt": "2020-07-31T13:27:12Z", "pr_url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/325", "timeline": [{"oid": "d7877248271db7a88dcbd7ddf7775dacc234ad00", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/d7877248271db7a88dcbd7ddf7775dacc234ad00", "message": "Common changes needed to support dynamic en/disabling of config overrides", "committedDate": "2020-07-22T17:26:33Z", "type": "commit"}, {"oid": "59bfc485681000032a0d21092a7bf93a3b8855f9", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/59bfc485681000032a0d21092a7bf93a3b8855f9", "message": "Add ability to apply the config overrides", "committedDate": "2020-07-24T17:21:01Z", "type": "commit"}, {"oid": "23d833ea14010161c42affb7dc964ba47fffb36e", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/23d833ea14010161c42affb7dc964ba47fffb36e", "message": "Merge from master", "committedDate": "2020-07-31T02:26:39Z", "type": "commit"}, {"oid": "b0ed031a29bcb2c9da5a5e9c7e17f953f5b4712c", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/b0ed031a29bcb2c9da5a5e9c7e17f953f5b4712c", "message": "Refactor muting logic for actions and graph nodes", "committedDate": "2020-07-31T10:43:49Z", "type": "commit"}, {"oid": "771f1c9cf1a03f80612d34a953fe69b0e5dde75a", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/771f1c9cf1a03f80612d34a953fe69b0e5dde75a", "message": "Add unit tests", "committedDate": "2020-07-31T13:24:47Z", "type": "commit"}, {"oid": "274009c76507eb7239036e2baf8f8b0af3fd051f", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/274009c76507eb7239036e2baf8f8b0af3fd051f", "message": "Remove merge conflict markers in comments", "committedDate": "2020-07-31T18:46:41Z", "type": "commit"}, {"oid": "3188ef22bbd92354d4d99dd8926b73cec891bbca", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/3188ef22bbd92354d4d99dd8926b73cec891bbca", "message": "Add licence header to new files", "committedDate": "2020-07-31T18:49:33Z", "type": "commit"}, {"oid": "e631aa8ea4c384617f7af2811f84a0793dca1de4", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/e631aa8ea4c384617f7af2811f84a0793dca1de4", "message": "Filter at the decider instead of collator", "committedDate": "2020-08-04T02:17:10Z", "type": "commit"}, {"oid": "eb77ae71b3fd80d1ab5c2a92df280e35a5adc9fe", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/eb77ae71b3fd80d1ab5c2a92df280e35a5adc9fe", "message": "Merge from master", "committedDate": "2020-08-04T02:25:14Z", "type": "commit"}, {"oid": "27189e0202743cd46d83d61818107582a598cda6", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/27189e0202743cd46d83d61818107582a598cda6", "message": "Delete collator test as it is not used to filter actions", "committedDate": "2020-08-04T02:36:56Z", "type": "commit"}, {"oid": "77473dcae9de40c8c9a8ec3b78fdeae8c3c70fed", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/77473dcae9de40c8c9a8ec3b78fdeae8c3c70fed", "message": "Merge from master", "committedDate": "2020-08-06T01:25:36Z", "type": "commit"}, {"oid": "b4c9f282789339315cd8e99d01c2c40d8b9fe1c4", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/b4c9f282789339315cd8e99d01c2c40d8b9fe1c4", "message": "Use the right log levels", "committedDate": "2020-08-06T01:39:23Z", "type": "commit"}, {"oid": "62829326bc912b2fc7681ead86016c1ed5a1decb", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/62829326bc912b2fc7681ead86016c1ed5a1decb", "message": "Add abstract SuppressibleAction class to handle muted actions", "committedDate": "2020-08-06T03:04:27Z", "type": "commit"}, {"oid": "a914d68218b80154303520ad30cd22fdeaec0601", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/a914d68218b80154303520ad30cd22fdeaec0601", "message": "Remove unwanted import", "committedDate": "2020-08-06T03:08:17Z", "type": "commit"}, {"oid": "35c416d2ddb7b44388affd197ba6842fab6d4d72", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/35c416d2ddb7b44388affd197ba6842fab6d4d72", "message": "Merge from master", "committedDate": "2020-08-06T03:10:47Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjcwMzczOA==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/325#discussion_r466703738", "bodyText": "Same as above", "author": "khushbr", "createdAt": "2020-08-06T21:46:37Z", "path": "src/test/resources/rca/rca_elected_master.conf", "diffHunk": "@@ -73,6 +73,8 @@\n   },\n \n   \"muted-rcas\": \"\",", "originalCommit": "35c416d2ddb7b44388affd197ba6842fab6d4d72", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc2OTMzOA==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/325#discussion_r466769338", "bodyText": "Done.", "author": "ktkrg", "createdAt": "2020-08-07T01:22:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjcwMzczOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjcwMzkwMg==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/325#discussion_r466703902", "bodyText": "It would be nice if you can fix this to \"muted-rcas\": [],", "author": "khushbr", "createdAt": "2020-08-06T21:47:01Z", "path": "src/test/resources/rca/rca.conf", "diffHunk": "@@ -63,6 +63,8 @@\n   },\n \n   \"muted-rcas\": \"\",", "originalCommit": "35c416d2ddb7b44388affd197ba6842fab6d4d72", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc2OTM1MQ==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/325#discussion_r466769351", "bodyText": "Done.", "author": "ktkrg", "createdAt": "2020-08-07T01:22:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjcwMzkwMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjcwNDQ3Ng==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/325#discussion_r466704476", "bodyText": "Unused Import?", "author": "khushbr", "createdAt": "2020-08-06T21:48:24Z", "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/net/GRPCTest.java", "diffHunk": "@@ -17,6 +17,7 @@\n import org.apache.logging.log4j.Logger;\n import org.junit.AfterClass;\n import org.junit.BeforeClass;\n+import org.junit.Ignore;", "originalCommit": "35c416d2ddb7b44388affd197ba6842fab6d4d72", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc2OTM3NA==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/325#discussion_r466769374", "bodyText": "removed.", "author": "ktkrg", "createdAt": "2020-08-07T01:22:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjcwNDQ3Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjcwNTYyOQ==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/325#discussion_r466705629", "bodyText": "Use @VisibleForTesting annotation here?", "author": "khushbr", "createdAt": "2020-08-06T21:50:57Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/config/overrides/ConfigOverridesWrapper.java", "diffHunk": "@@ -15,13 +15,29 @@\n \n package com.amazon.opendistro.elasticsearch.performanceanalyzer.config.overrides;\n \n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n /**\n  * Class responsible for holding the latest config overrides across the cluster.\n  */\n public class ConfigOverridesWrapper {\n \n     private volatile ConfigOverrides currentClusterConfigOverrides;\n     private volatile long lastUpdatedTimestamp;\n+    private final ObjectMapper mapper;\n+\n+    public ConfigOverridesWrapper() {\n+        this(new ObjectMapper());\n+    }\n+\n+    /**\n+     * Ctor used only for unit test purposes.\n+     * @param mapper The object mapper instance.\n+     */\n+    public ConfigOverridesWrapper(final ObjectMapper mapper) {", "originalCommit": "35c416d2ddb7b44388affd197ba6842fab6d4d72", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc2OTM4NQ==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/325#discussion_r466769385", "bodyText": "Done.", "author": "ktkrg", "createdAt": "2020-08-07T01:22:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjcwNTYyOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjcxNzAzMw==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/325#discussion_r466717033", "bodyText": "Like the previous naming better.\nCan we use shouldUpdate or a better name perhaps ?", "author": "khushbr", "createdAt": "2020-08-06T22:21:37Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/actions/ModifyQueueCapacityAction.java", "diffHunk": "@@ -56,7 +56,7 @@ public String name() {\n   }\n \n   @Override\n-  public boolean isActionable() {\n+  public boolean isValid() {", "originalCommit": "35c416d2ddb7b44388affd197ba6842fab6d4d72", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc2OTM5Nw==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/325#discussion_r466769397", "bodyText": "I liked the previous one better too, the problem was isActionable() makes sense for an action and in this case I wanted to enforce the muted-ness check in the isActionable() so that isActionable() can return false if the action is muted. The only way to do that is to override the method in an abstract class and make the method final and provide a hook for the action implementations to tell if they can perform some updates to the system(what they were doing in the original isActionable() method).\nChanged it to canUpdate().", "author": "ktkrg", "createdAt": "2020-08-07T01:22:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjcxNzAzMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjcxNzk1Mg==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/325#discussion_r466717952", "bodyText": "update to readAndUpdateMutedComponentsDuringStart to follow the same naming pattern as readAndUpdateMutedComponents ?", "author": "khushbr", "createdAt": "2020-08-06T22:24:20Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/RcaController.java", "diffHunk": "@@ -319,26 +319,66 @@ private void readRcaEnabledFromConf() {\n         });\n   }\n \n-  private void readAndUpdateMutesRcasDuringStart() {\n+  private void readAndUpdateMutedRcasDuringStart() {", "originalCommit": "35c416d2ddb7b44388affd197ba6842fab6d4d72", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc2OTQyMA==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/325#discussion_r466769420", "bodyText": "Done.", "author": "ktkrg", "createdAt": "2020-08-07T01:22:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjcxNzk1Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjcyMTg1Mg==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/325#discussion_r466721852", "bodyText": "Are we performing any validation on the input actions provided for muting?", "author": "khushbr", "createdAt": "2020-08-06T22:35:40Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/RcaController.java", "diffHunk": "@@ -319,26 +319,66 @@ private void readRcaEnabledFromConf() {\n         });\n   }\n \n-  private void readAndUpdateMutesRcasDuringStart() {\n+  private void readAndUpdateMutedRcasDuringStart() {\n+    /* We have an edge case where both `readAndUpdateMutedComponents()` and `readAndUpdateMutedRcasDuringStart()`\n+     * can try to update the muted Rca list back to back, reading rca.conf twice. This will happen when rca\n+     * was turned off and then on.\n+     *\n+     * <p> `readAndUpdateMutedRcasDuringStart()` should only be read at the start of the process, when\n+     * RCA graph is not constructed and we cannot validate the new new muted RCAs. For any other update\n+     * to the muted list, the periodic rca.conf update checker will take care of it.\n+     *\n+     */\n+    if (lastModifiedTimeInMillisInMemory == 0) {\n+      updateMutedComponents();\n+    }\n+  }\n+\n+  private boolean updateMutedComponents() {\n     try {\n-      /* We have an edge case where both `readAndUpdateMutesRcas()` and `readAndUpdateMutesRcasDuringStart()`\n-       * can try to update the muted Rca list back to back, reading rca.conf twice. This will happen when rca\n-       * was turned off and then on.\n-       *\n-       * <p> `readAndUpdateMutesRcasDuringStart()` should only be read at the start of the process, when\n-       * RCA graph is not constructed and we cannot validate the new new muted RCAs. For any other update\n-       * to the muted list, the periodic rca.conf update checker will take care of it.\n-       *\n-       */\n-      if (lastModifiedTimeInMillisInMemory == 0) {\n-        Set<String> rcasForMute = new HashSet<>(rcaConf.getMutedRcaList());\n-        Stats.getInstance().updateMutedGraphNodes(rcasForMute);\n-        LOG.info(\"Updated the muted RCA Graph to : {}\", rcaConf.getMutedRcaList());\n+      if (ConnectedComponent.getNodeNames().isEmpty()) {\n+        LOG.info(\"Analysis graph not initialized/has been reset; returning.\");\n+        return false;\n       }\n+\n+      Set<String> actionsForMute = new HashSet<>(rcaConf.getMutedActionList());\n+\n+      Set<String> graphNodesForMute = new HashSet<>();\n+      graphNodesForMute.addAll(rcaConf.getMutedRcaList());\n+      graphNodesForMute.addAll(rcaConf.getMutedDeciderList());\n+      LOG.info(\"Graph nodes provided for muting : {}\", graphNodesForMute);\n+      LOG.info(\"Actions provided for muting: {}\", actionsForMute);\n+\n+      // Update rcasForMute to retain only valid RCAs\n+      graphNodesForMute.retainAll(ConnectedComponent.getNodeNames());\n+\n+      // If rcasForMute post validation is empty but neither rcaConf.getMutedRcaList() nor\n+      // rcaConf.getMutedDeciderList() are empty all the input RCAs/deciders are incorrect.\n+      if (graphNodesForMute.isEmpty()\n+          && (!rcaConf.getMutedRcaList().isEmpty() || !rcaConf.getMutedDeciderList().isEmpty())) {\n+        if (lastModifiedTimeInMillisInMemory == 0) {\n+          LOG.error(\n+              \"Removing Incorrect RCA(s): {} provided before RCA Scheduler start. Valid RCAs: {}.\",\n+              rcaConf.getMutedRcaList(), ConnectedComponent.getNodeNames());\n+\n+        } else {\n+          LOG.error(\"Incorrect RCA(s): {}, cannot be muted. Valid RCAs: {}, Muted RCAs: {}\",\n+              rcaConf.getMutedRcaList(), ConnectedComponent.getNodeNames(),\n+              Stats.getInstance().getMutedGraphNodes());\n+          return false;\n+        }\n+      }\n+\n+      LOG.info(\"Updating the muted graph nodes to : {}\", graphNodesForMute);\n+      Stats.getInstance().updateMutedGraphNodes(graphNodesForMute);\n+      Stats.getInstance().updateMutedActions(actionsForMute);", "originalCommit": "35c416d2ddb7b44388affd197ba6842fab6d4d72", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc0NTQ3OA==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/325#discussion_r466745478", "bodyText": "No, we don't have a registry of available actions to check the input against. As such, it'll just stay in the conf if an invalid string is provided.", "author": "ktkrg", "createdAt": "2020-08-06T23:52:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjcyMTg1Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjcyMjAxNg==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/325#discussion_r466722016", "bodyText": "Update the metrics name RCA_MUTE_ERROR_METRIC here?", "author": "khushbr", "createdAt": "2020-08-06T22:36:14Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/RcaController.java", "diffHunk": "@@ -319,26 +319,66 @@ private void readRcaEnabledFromConf() {\n         });\n   }\n \n-  private void readAndUpdateMutesRcasDuringStart() {\n+  private void readAndUpdateMutedRcasDuringStart() {\n+    /* We have an edge case where both `readAndUpdateMutedComponents()` and `readAndUpdateMutedRcasDuringStart()`\n+     * can try to update the muted Rca list back to back, reading rca.conf twice. This will happen when rca\n+     * was turned off and then on.\n+     *\n+     * <p> `readAndUpdateMutedRcasDuringStart()` should only be read at the start of the process, when\n+     * RCA graph is not constructed and we cannot validate the new new muted RCAs. For any other update\n+     * to the muted list, the periodic rca.conf update checker will take care of it.\n+     *\n+     */\n+    if (lastModifiedTimeInMillisInMemory == 0) {\n+      updateMutedComponents();\n+    }\n+  }\n+\n+  private boolean updateMutedComponents() {\n     try {\n-      /* We have an edge case where both `readAndUpdateMutesRcas()` and `readAndUpdateMutesRcasDuringStart()`\n-       * can try to update the muted Rca list back to back, reading rca.conf twice. This will happen when rca\n-       * was turned off and then on.\n-       *\n-       * <p> `readAndUpdateMutesRcasDuringStart()` should only be read at the start of the process, when\n-       * RCA graph is not constructed and we cannot validate the new new muted RCAs. For any other update\n-       * to the muted list, the periodic rca.conf update checker will take care of it.\n-       *\n-       */\n-      if (lastModifiedTimeInMillisInMemory == 0) {\n-        Set<String> rcasForMute = new HashSet<>(rcaConf.getMutedRcaList());\n-        Stats.getInstance().updateMutedGraphNodes(rcasForMute);\n-        LOG.info(\"Updated the muted RCA Graph to : {}\", rcaConf.getMutedRcaList());\n+      if (ConnectedComponent.getNodeNames().isEmpty()) {\n+        LOG.info(\"Analysis graph not initialized/has been reset; returning.\");\n+        return false;\n       }\n+\n+      Set<String> actionsForMute = new HashSet<>(rcaConf.getMutedActionList());\n+\n+      Set<String> graphNodesForMute = new HashSet<>();\n+      graphNodesForMute.addAll(rcaConf.getMutedRcaList());\n+      graphNodesForMute.addAll(rcaConf.getMutedDeciderList());\n+      LOG.info(\"Graph nodes provided for muting : {}\", graphNodesForMute);\n+      LOG.info(\"Actions provided for muting: {}\", actionsForMute);\n+\n+      // Update rcasForMute to retain only valid RCAs\n+      graphNodesForMute.retainAll(ConnectedComponent.getNodeNames());\n+\n+      // If rcasForMute post validation is empty but neither rcaConf.getMutedRcaList() nor\n+      // rcaConf.getMutedDeciderList() are empty all the input RCAs/deciders are incorrect.\n+      if (graphNodesForMute.isEmpty()\n+          && (!rcaConf.getMutedRcaList().isEmpty() || !rcaConf.getMutedDeciderList().isEmpty())) {\n+        if (lastModifiedTimeInMillisInMemory == 0) {\n+          LOG.error(\n+              \"Removing Incorrect RCA(s): {} provided before RCA Scheduler start. Valid RCAs: {}.\",\n+              rcaConf.getMutedRcaList(), ConnectedComponent.getNodeNames());\n+\n+        } else {\n+          LOG.error(\"Incorrect RCA(s): {}, cannot be muted. Valid RCAs: {}, Muted RCAs: {}\",\n+              rcaConf.getMutedRcaList(), ConnectedComponent.getNodeNames(),\n+              Stats.getInstance().getMutedGraphNodes());\n+          return false;\n+        }\n+      }\n+\n+      LOG.info(\"Updating the muted graph nodes to : {}\", graphNodesForMute);\n+      Stats.getInstance().updateMutedGraphNodes(graphNodesForMute);\n+      Stats.getInstance().updateMutedActions(actionsForMute);\n     } catch (Exception e) {\n-      LOG.error(\"Couldn't read/update the muted RCAs during start()\", e);\n+      LOG.error(\"Couldn't read/update the muted RCAs\", e);\n       StatsCollector.instance().logMetric(RCA_MUTE_ERROR_METRIC);", "originalCommit": "35c416d2ddb7b44388affd197ba6842fab6d4d72", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc2OTQzMg==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/325#discussion_r466769432", "bodyText": "Updated to MUTE_ERROR_METRIC.", "author": "ktkrg", "createdAt": "2020-08-07T01:23:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjcyMjAxNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjcyMzI5Mg==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/325#discussion_r466723292", "bodyText": "nit: Can we move this declaration to Line 48", "author": "khushbr", "createdAt": "2020-08-06T22:40:05Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/core/ConfJsonWrapper.java", "diffHunk": "@@ -44,6 +45,10 @@\n   private final List<String> mutedRcaList;", "originalCommit": "35c416d2ddb7b44388affd197ba6842fab6d4d72", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc2OTQ0MA==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/325#discussion_r466769440", "bodyText": "Done.", "author": "ktkrg", "createdAt": "2020-08-07T01:23:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjcyMzI5Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjczMTc2Mw==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/325#discussion_r466731763", "bodyText": "Do we need DEBUG level log statements here for the components removed and similarly for below, added to muted components?", "author": "khushbr", "createdAt": "2020-08-06T23:05:46Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/config/overrides/ConfigOverridesApplier.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.config.overrides;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.PerformanceAnalyzerApp;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.core.RcaConf;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.reader.ClusterDetailsEventProcessor;\n+import java.io.IOException;\n+import java.util.HashSet;\n+import java.util.Set;\n+import org.apache.commons.lang3.math.NumberUtils;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+/**\n+ * Class the manages applying the various overrides for RCAs, deciders, and action nodes as\n+ * written by the NodeDetails collector and read by the {@link ClusterDetailsEventProcessor}\n+ */\n+public class ConfigOverridesApplier {\n+\n+  private static final Logger LOG = LogManager.getLogger(ConfigOverridesApplier.class);\n+  private volatile long lastAppliedTimestamp;\n+\n+  public void applyOverride(final String overridesJson, final String lastUpdatedTimestampString) {\n+    if (!valid(overridesJson, lastUpdatedTimestampString)) {\n+      LOG.warn(\"Received invalid overrides or timestamp. Overrides json: {}, last updated \"\n+          + \"timestamp: {}\", overridesJson, lastAppliedTimestamp);\n+      return;\n+    }\n+\n+    try {\n+      long lastUpdatedTimestamp = Long.parseLong(lastUpdatedTimestampString);\n+      LOG.debug(\"Last updated(writer): {}, Last applied(reader): {}\", lastUpdatedTimestamp,\n+          lastAppliedTimestamp);\n+      if (lastUpdatedTimestamp > lastAppliedTimestamp) {\n+        apply(ConfigOverridesHelper.deserialize(overridesJson));\n+      } else {\n+        LOG.debug(\"Not applying override. Last updated timestamp {} is behind last applied \"\n+            + \"timestamp {}\", lastUpdatedTimestamp, lastAppliedTimestamp);\n+      }\n+    } catch (IOException ioe) {\n+      LOG.error(\"Unable to deserialize overrides JSON:\" + overridesJson, ioe);\n+    }\n+  }\n+\n+  private void apply(final ConfigOverrides overrides) {\n+    if (PerformanceAnalyzerApp.getRcaController() != null && PerformanceAnalyzerApp.getRcaController().isRcaEnabled()) {\n+      LOG.info(\"Applying overrides: {}\", overrides.getEnable().getRcas());\n+      RcaConf rcaConf = PerformanceAnalyzerApp.getRcaController().getRcaConf();\n+      if (rcaConf != null) {\n+        Set<String> currentMutedRcaSet = new HashSet<>(rcaConf.getMutedRcaList());\n+        Set<String> currentMutedDeciderSet = new HashSet<>(rcaConf.getMutedDeciderList());\n+        Set<String> currentMutedActionSet = new HashSet<>(rcaConf.getMutedActionList());\n+        // check and remove any nodes that are in the disabled list that were enabled just now.\n+        if (overrides.getEnable() != null) {\n+          if (overrides.getEnable().getRcas() != null) {\n+            currentMutedRcaSet.removeAll(overrides.getEnable().getRcas());\n+          }\n+          if (overrides.getEnable().getDeciders() != null) {\n+            currentMutedDeciderSet.removeAll(overrides.getEnable().getDeciders());\n+          }\n+          if (overrides.getEnable().getActions() != null) {\n+            currentMutedActionSet.removeAll(overrides.getEnable().getActions());\n+          }\n+        }\n+", "originalCommit": "35c416d2ddb7b44388affd197ba6842fab6d4d72", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc2OTQ1NA==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/325#discussion_r466769454", "bodyText": "Added.", "author": "ktkrg", "createdAt": "2020-08-07T01:23:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjczMTc2Mw=="}], "type": "inlineReview"}, {"oid": "2b16890bac0ad9cdc11bf634f184bc744f1c43f7", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/2b16890bac0ad9cdc11bf634f184bc744f1c43f7", "message": "Address PR comments", "committedDate": "2020-08-07T01:22:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc2MTIwMg==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/325#discussion_r466761202", "bodyText": "I don't think this needs to be volatile as the only readers are tests. Volatile is bad for performance. Let's remove the class member variables.", "author": "yojs", "createdAt": "2020-08-07T00:51:28Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/config/overrides/ConfigOverridesApplier.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.config.overrides;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.PerformanceAnalyzerApp;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.core.RcaConf;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.reader.ClusterDetailsEventProcessor;\n+import java.io.IOException;\n+import java.util.HashSet;\n+import java.util.Set;\n+import org.apache.commons.lang3.math.NumberUtils;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+/**\n+ * Class the manages applying the various overrides for RCAs, deciders, and action nodes as\n+ * written by the NodeDetails collector and read by the {@link ClusterDetailsEventProcessor}\n+ */\n+public class ConfigOverridesApplier {\n+\n+  private static final Logger LOG = LogManager.getLogger(ConfigOverridesApplier.class);\n+  private volatile long lastAppliedTimestamp;", "originalCommit": "35c416d2ddb7b44388affd197ba6842fab6d4d72", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjgyMDE1NQ==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/325#discussion_r466820155", "bodyText": "removed.", "author": "ktkrg", "createdAt": "2020-08-07T04:54:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc2MTIwMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc2MTc5OA==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/325#discussion_r466761798", "bodyText": "This file used to be a json object per line. It would be nice if we can keep that and push the override timestamp inside as follows:\n{\"overrides\": {\"enabled\": {}, \"disabled\": {}}, ts:54674895}", "author": "yojs", "createdAt": "2020-08-07T00:53:53Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/reader/ClusterDetailsEventProcessor.java", "diffHunk": "@@ -75,15 +87,18 @@ public void processEvent(Event event) {\n \n     // An example node_metrics data is something like this for a two node cluster:\n     // {\"current_time\":1566414001749}\n+    // 1566414001749", "originalCommit": "35c416d2ddb7b44388affd197ba6842fab6d4d72", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjgyMDE3NA==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/325#discussion_r466820174", "bodyText": "This needs a change in the plugin as well. Will follow up with a separate PR for this.", "author": "ktkrg", "createdAt": "2020-08-07T04:54:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc2MTc5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE1ODM1NQ==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/325#discussion_r467158355", "bodyText": "cool. But let's change it.", "author": "yojs", "createdAt": "2020-08-07T16:56:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc2MTc5OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc2NTQ5Ng==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/325#discussion_r466765496", "bodyText": "It would be nice if we don't add code to this class anymore and in future, we just deprecate it. Adding anything to this class restricts us to have a uniform view of things across all virtualInstances during RCA-IT and we won't be able to test things like nodes running different versions of graphs and different muted rca as such.\nwe have this new kid in the block to pass around things - appContext. Any chance we can use it ?", "author": "yojs", "createdAt": "2020-08-07T01:08:24Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/core/Stats.java", "diffHunk": "@@ -29,6 +30,7 @@\n   private Map<Integer, ConnectedComponent> graphs;\n \n   private Set<String> mutedGraphNodes;\n+  private Set<String> mutedActions;", "originalCommit": "35c416d2ddb7b44388affd197ba6842fab6d4d72", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjgyMDE5Ng==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/325#discussion_r466820196", "bodyText": "yup, using it now.", "author": "ktkrg", "createdAt": "2020-08-07T04:54:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc2NTQ5Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc2NzQ3OQ==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/325#discussion_r466767479", "bodyText": "This is not valid json: we are missing a } in the end", "author": "yojs", "createdAt": "2020-08-07T01:15:52Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/reader/ClusterDetailsEventProcessor.java", "diffHunk": "@@ -75,15 +87,18 @@ public void processEvent(Event event) {\n \n     // An example node_metrics data is something like this for a two node cluster:\n     // {\"current_time\":1566414001749}\n+    // 1566414001749\n     // {\"overrides\": {\"enabled\": {}, \"disabled\": {}}", "originalCommit": "35c416d2ddb7b44388affd197ba6842fab6d4d72", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjgyMDIwNw==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/325#discussion_r466820207", "bodyText": "Added.", "author": "ktkrg", "createdAt": "2020-08-07T04:54:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc2NzQ3OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc2ODY3NA==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/325#discussion_r466768674", "bodyText": "Do we want to handle parse exception ?", "author": "yojs", "createdAt": "2020-08-07T01:20:15Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/config/overrides/ConfigOverridesApplier.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.config.overrides;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.PerformanceAnalyzerApp;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.core.RcaConf;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.reader.ClusterDetailsEventProcessor;\n+import java.io.IOException;\n+import java.util.HashSet;\n+import java.util.Set;\n+import org.apache.commons.lang3.math.NumberUtils;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+/**\n+ * Class the manages applying the various overrides for RCAs, deciders, and action nodes as\n+ * written by the NodeDetails collector and read by the {@link ClusterDetailsEventProcessor}\n+ */\n+public class ConfigOverridesApplier {\n+\n+  private static final Logger LOG = LogManager.getLogger(ConfigOverridesApplier.class);\n+  private volatile long lastAppliedTimestamp;\n+\n+  public void applyOverride(final String overridesJson, final String lastUpdatedTimestampString) {\n+    if (!valid(overridesJson, lastUpdatedTimestampString)) {\n+      LOG.warn(\"Received invalid overrides or timestamp. Overrides json: {}, last updated \"\n+          + \"timestamp: {}\", overridesJson, lastAppliedTimestamp);\n+      return;\n+    }\n+\n+    try {\n+      long lastUpdatedTimestamp = Long.parseLong(lastUpdatedTimestampString);", "originalCommit": "35c416d2ddb7b44388affd197ba6842fab6d4d72", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjgyMDIxNA==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/325#discussion_r466820214", "bodyText": "Handling now.", "author": "ktkrg", "createdAt": "2020-08-07T04:54:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc2ODY3NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc2OTc3OA==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/325#discussion_r466769778", "bodyText": "The callers of this are the test methods. Let's add a VisibleForTesting annotation.", "author": "yojs", "createdAt": "2020-08-07T01:24:27Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/config/overrides/ConfigOverridesApplier.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.config.overrides;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.PerformanceAnalyzerApp;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.core.RcaConf;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.reader.ClusterDetailsEventProcessor;\n+import java.io.IOException;\n+import java.util.HashSet;\n+import java.util.Set;\n+import org.apache.commons.lang3.math.NumberUtils;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+/**\n+ * Class the manages applying the various overrides for RCAs, deciders, and action nodes as\n+ * written by the NodeDetails collector and read by the {@link ClusterDetailsEventProcessor}\n+ */\n+public class ConfigOverridesApplier {\n+\n+  private static final Logger LOG = LogManager.getLogger(ConfigOverridesApplier.class);\n+  private volatile long lastAppliedTimestamp;\n+\n+  public void applyOverride(final String overridesJson, final String lastUpdatedTimestampString) {\n+    if (!valid(overridesJson, lastUpdatedTimestampString)) {\n+      LOG.warn(\"Received invalid overrides or timestamp. Overrides json: {}, last updated \"\n+          + \"timestamp: {}\", overridesJson, lastAppliedTimestamp);\n+      return;\n+    }\n+\n+    try {\n+      long lastUpdatedTimestamp = Long.parseLong(lastUpdatedTimestampString);\n+      LOG.debug(\"Last updated(writer): {}, Last applied(reader): {}\", lastUpdatedTimestamp,\n+          lastAppliedTimestamp);\n+      if (lastUpdatedTimestamp > lastAppliedTimestamp) {\n+        apply(ConfigOverridesHelper.deserialize(overridesJson));\n+      } else {\n+        LOG.debug(\"Not applying override. Last updated timestamp {} is behind last applied \"\n+            + \"timestamp {}\", lastUpdatedTimestamp, lastAppliedTimestamp);\n+      }\n+    } catch (IOException ioe) {\n+      LOG.error(\"Unable to deserialize overrides JSON:\" + overridesJson, ioe);\n+    }\n+  }\n+\n+  private void apply(final ConfigOverrides overrides) {\n+    if (PerformanceAnalyzerApp.getRcaController() != null && PerformanceAnalyzerApp.getRcaController().isRcaEnabled()) {\n+      LOG.info(\"Applying overrides: {}\", overrides.getEnable().getRcas());\n+      RcaConf rcaConf = PerformanceAnalyzerApp.getRcaController().getRcaConf();\n+      if (rcaConf != null) {\n+        Set<String> currentMutedRcaSet = new HashSet<>(rcaConf.getMutedRcaList());\n+        Set<String> currentMutedDeciderSet = new HashSet<>(rcaConf.getMutedDeciderList());\n+        Set<String> currentMutedActionSet = new HashSet<>(rcaConf.getMutedActionList());\n+        // check and remove any nodes that are in the disabled list that were enabled just now.\n+        if (overrides.getEnable() != null) {\n+          if (overrides.getEnable().getRcas() != null) {\n+            currentMutedRcaSet.removeAll(overrides.getEnable().getRcas());\n+          }\n+          if (overrides.getEnable().getDeciders() != null) {\n+            currentMutedDeciderSet.removeAll(overrides.getEnable().getDeciders());\n+          }\n+          if (overrides.getEnable().getActions() != null) {\n+            currentMutedActionSet.removeAll(overrides.getEnable().getActions());\n+          }\n+        }\n+\n+        // union the remaining already disabled nodes with the new set of disabled nodes.\n+        if (overrides.getDisable() != null) {\n+          if (overrides.getDisable().getRcas() != null) {\n+            currentMutedRcaSet.addAll(overrides.getDisable().getRcas());\n+          }\n+          if (overrides.getDisable().getDeciders() != null) {\n+            currentMutedDeciderSet.addAll(overrides.getDisable().getDeciders());\n+          }\n+          if (overrides.getDisable().getActions() != null) {\n+            currentMutedActionSet.addAll(overrides.getDisable().getActions());\n+          }\n+        }\n+        rcaConf.updateRcaConf(currentMutedRcaSet, currentMutedDeciderSet, currentMutedActionSet);\n+        setLastAppliedTimestamp(System.currentTimeMillis());\n+      }\n+    }\n+  }\n+\n+  private boolean valid(final String overridesJson, final String timestamp) {\n+    if (overridesJson == null || timestamp == null) {\n+      return false;\n+    }\n+\n+    if (overridesJson.isEmpty() || timestamp.isEmpty()) {\n+      return false;\n+    }\n+\n+    return NumberUtils.isCreatable(timestamp);\n+  }\n+\n+  public long getLastAppliedTimestamp() {", "originalCommit": "35c416d2ddb7b44388affd197ba6842fab6d4d72", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjgyMDIzOQ==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/325#discussion_r466820239", "bodyText": "done.", "author": "ktkrg", "createdAt": "2020-08-07T04:54:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc2OTc3OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc3MTUxOQ==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/325#discussion_r466771519", "bodyText": "Should we get the list of rca.conf from the RcaControllerHelper and apply to all three of them ? If the node role changes, then the muting will be invalidated.\nAny changes that you make to the static set of objects in PerformanceAnalyzerApp may not be tested using RCA-IT.", "author": "yojs", "createdAt": "2020-08-07T01:31:04Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/config/overrides/ConfigOverridesApplier.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.config.overrides;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.PerformanceAnalyzerApp;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.core.RcaConf;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.reader.ClusterDetailsEventProcessor;\n+import java.io.IOException;\n+import java.util.HashSet;\n+import java.util.Set;\n+import org.apache.commons.lang3.math.NumberUtils;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+/**\n+ * Class the manages applying the various overrides for RCAs, deciders, and action nodes as\n+ * written by the NodeDetails collector and read by the {@link ClusterDetailsEventProcessor}\n+ */\n+public class ConfigOverridesApplier {\n+\n+  private static final Logger LOG = LogManager.getLogger(ConfigOverridesApplier.class);\n+  private volatile long lastAppliedTimestamp;\n+\n+  public void applyOverride(final String overridesJson, final String lastUpdatedTimestampString) {\n+    if (!valid(overridesJson, lastUpdatedTimestampString)) {\n+      LOG.warn(\"Received invalid overrides or timestamp. Overrides json: {}, last updated \"\n+          + \"timestamp: {}\", overridesJson, lastAppliedTimestamp);\n+      return;\n+    }\n+\n+    try {\n+      long lastUpdatedTimestamp = Long.parseLong(lastUpdatedTimestampString);\n+      LOG.debug(\"Last updated(writer): {}, Last applied(reader): {}\", lastUpdatedTimestamp,\n+          lastAppliedTimestamp);\n+      if (lastUpdatedTimestamp > lastAppliedTimestamp) {\n+        apply(ConfigOverridesHelper.deserialize(overridesJson));\n+      } else {\n+        LOG.debug(\"Not applying override. Last updated timestamp {} is behind last applied \"\n+            + \"timestamp {}\", lastUpdatedTimestamp, lastAppliedTimestamp);\n+      }\n+    } catch (IOException ioe) {\n+      LOG.error(\"Unable to deserialize overrides JSON:\" + overridesJson, ioe);\n+    }\n+  }\n+\n+  private void apply(final ConfigOverrides overrides) {\n+    if (PerformanceAnalyzerApp.getRcaController() != null && PerformanceAnalyzerApp.getRcaController().isRcaEnabled()) {\n+      LOG.info(\"Applying overrides: {}\", overrides.getEnable().getRcas());\n+      RcaConf rcaConf = PerformanceAnalyzerApp.getRcaController().getRcaConf();", "originalCommit": "35c416d2ddb7b44388affd197ba6842fab6d4d72", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjgyMDM0MQ==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/325#discussion_r466820341", "bodyText": "Good catch! updating all conf files now.", "author": "ktkrg", "createdAt": "2020-08-07T04:55:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc3MTUxOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc3MjQ2Mw==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/325#discussion_r466772463", "bodyText": "can we move this to the line above ?", "author": "yojs", "createdAt": "2020-08-07T01:34:33Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/core/RcaConf.java", "diffHunk": "@@ -155,21 +187,56 @@ public CacheDeciderConfig getCacheDeciderConfig() {\n       if (conf.getRcaConfigSettings() != null\n           && conf.getRcaConfigSettings().containsKey(rcaName)\n           && conf.getRcaConfigSettings().get(rcaName) != null) {\n-        rcaObj = (Map<String, Object>)conf.getRcaConfigSettings().get(rcaName);\n+        rcaObj = (Map<String, Object>) conf.getRcaConfigSettings().get(rcaName);\n       }\n \n       if (rcaObj != null\n           && rcaObj.containsKey(key)\n           && rcaObj.get(key) != null) {\n         setting = clazz.cast(rcaObj.get(key));\n       }\n-    }\n-    catch (ClassCastException ne) {\n+    } catch (ClassCastException ne) {\n       LOG.error(\"rca.conf contains value in invalid format, trace : {}\", ne.getMessage());\n     }\n     return setting;\n   }\n \n+  public void updateRcaConf(final Set<String> mutedRcas, final Set<String> mutedDeciders,\n+      final Set<String> mutedActions) {\n+    String updatedPath = this.configFileLoc + \".updated\";\n+    try (final FileInputStream originalFileInputStream = new FileInputStream(this.configFileLoc);\n+        final Scanner scanner = new Scanner(originalFileInputStream, StandardCharsets.UTF_8.name());\n+        final FileOutputStream updatedFileOutputStream = new FileOutputStream(updatedPath)\n+    ) {", "originalCommit": "35c416d2ddb7b44388affd197ba6842fab6d4d72", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjgyMDM1MQ==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/325#discussion_r466820351", "bodyText": "done.", "author": "ktkrg", "createdAt": "2020-08-07T04:55:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc3MjQ2Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc3MzcxMQ==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/325#discussion_r466773711", "bodyText": "Maybe we don't need to pass ConfigOverridesApplier as a constructor. No state is kept in it. It reads the config and applies it to the rca.conf. Maybe we can just use it as a helper static class ?", "author": "yojs", "createdAt": "2020-08-07T01:39:24Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/reader/ClusterDetailsEventProcessor.java", "diffHunk": "@@ -41,7 +42,15 @@\n    */\n   private volatile ImmutableList<NodeDetails> nodesDetails = null;\n \n-  public ClusterDetailsEventProcessor() {}\n+  private final ConfigOverridesApplier overridesApplier;\n+\n+  public ClusterDetailsEventProcessor() {\n+    this(new ConfigOverridesApplier());\n+  }\n+\n+  public ClusterDetailsEventProcessor(final ConfigOverridesApplier overridesApplier) {", "originalCommit": "35c416d2ddb7b44388affd197ba6842fab6d4d72", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjgyMDQwMA==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/325#discussion_r466820400", "bodyText": "It does keep the lastAppliedTimestamp as an instance variable and uses that to check if the config overrides string received from the ClusterDetailsEventProcessor. Making it a static helper will make all the consumers see the same value of last applied time(in an IT for example).", "author": "ktkrg", "createdAt": "2020-08-07T04:55:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc3MzcxMQ=="}], "type": "inlineReview"}, {"oid": "300dcc5a24bf2ce73182e64cf0fb332baa48e25d", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/300dcc5a24bf2ce73182e64cf0fb332baa48e25d", "message": "Address PR comments", "committedDate": "2020-08-07T04:54:05Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE3MTg1OA==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/325#discussion_r467171858", "bodyText": "We should be applying change when someone calls the API or at startup, which shouldn't be that many. Should we make it info logs ? Or add a metric.", "author": "yojs", "createdAt": "2020-08-07T17:24:12Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/config/overrides/ConfigOverridesApplier.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.config.overrides;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.PerformanceAnalyzerApp;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.core.RcaConf;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.reader.ClusterDetailsEventProcessor;\n+import com.google.common.annotations.VisibleForTesting;\n+import java.io.IOException;\n+import java.util.HashSet;\n+import java.util.Set;\n+import org.apache.commons.lang3.math.NumberUtils;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+/**\n+ * Class the manages applying the various overrides for RCAs, deciders, and action nodes as\n+ * written by the NodeDetails collector and read by the {@link ClusterDetailsEventProcessor}\n+ */\n+public class ConfigOverridesApplier {\n+\n+  private static final Logger LOG = LogManager.getLogger(ConfigOverridesApplier.class);\n+  private long lastAppliedTimestamp;\n+\n+  public void applyOverride(final String overridesJson, final String lastUpdatedTimestampString) {\n+    if (!valid(overridesJson, lastUpdatedTimestampString)) {\n+      LOG.warn(\"Received invalid overrides or timestamp. Overrides json: {}, last updated \"\n+          + \"timestamp: {}\", overridesJson, lastAppliedTimestamp);\n+      return;\n+    }\n+\n+    try {\n+      long lastUpdatedTimestamp = Long.parseLong(lastUpdatedTimestampString);\n+      LOG.debug(\"Last updated(writer): {}, Last applied(reader): {}\", lastUpdatedTimestamp,\n+          lastAppliedTimestamp);\n+      if (lastUpdatedTimestamp > lastAppliedTimestamp) {\n+        apply(ConfigOverridesHelper.deserialize(overridesJson));\n+      } else {\n+        LOG.debug(\"Not applying override. Last updated timestamp {} is behind last applied \"\n+            + \"timestamp {}\", lastUpdatedTimestamp, lastAppliedTimestamp);\n+      }\n+    } catch (IOException ioe) {\n+      LOG.error(\"Unable to deserialize overrides JSON:\" + overridesJson, ioe);\n+    } catch (NumberFormatException nfe) {\n+      LOG.error(\"Unable to parse the lastUpdatedTimestamp {} string as a number.\",\n+          lastUpdatedTimestampString, nfe);\n+    }\n+  }\n+\n+  private void apply(final ConfigOverrides overrides) {\n+    if (PerformanceAnalyzerApp.getRcaController() != null && PerformanceAnalyzerApp.getRcaController().isRcaEnabled()) {\n+      LOG.info(\"Applying overrides: {}\", overrides.getEnable().getRcas());\n+      RcaConf rcaConf = PerformanceAnalyzerApp.getRcaController().getRcaConf();\n+      if (rcaConf != null) {\n+        Set<String> currentMutedRcaSet = new HashSet<>(rcaConf.getMutedRcaList());\n+        Set<String> currentMutedDeciderSet = new HashSet<>(rcaConf.getMutedDeciderList());\n+        Set<String> currentMutedActionSet = new HashSet<>(rcaConf.getMutedActionList());\n+        // check and remove any nodes that are in the disabled list that were enabled just now.\n+        if (overrides.getEnable() != null) {\n+          if (overrides.getEnable().getRcas() != null) {\n+            currentMutedRcaSet.removeAll(overrides.getEnable().getRcas());\n+          }\n+          if (overrides.getEnable().getDeciders() != null) {\n+            currentMutedDeciderSet.removeAll(overrides.getEnable().getDeciders());\n+          }\n+          if (overrides.getEnable().getActions() != null) {\n+            currentMutedActionSet.removeAll(overrides.getEnable().getActions());\n+          }\n+        }\n+\n+        // union the remaining already disabled nodes with the new set of disabled nodes.\n+        if (overrides.getDisable() != null) {\n+          if (overrides.getDisable().getRcas() != null) {\n+            currentMutedRcaSet.addAll(overrides.getDisable().getRcas());\n+          }\n+          if (overrides.getDisable().getDeciders() != null) {\n+            currentMutedDeciderSet.addAll(overrides.getDisable().getDeciders());\n+          }\n+          if (overrides.getDisable().getActions() != null) {\n+            currentMutedActionSet.addAll(overrides.getDisable().getActions());\n+          }\n+        }\n+\n+        LOG.debug(\"New set of muted rcas: {}\", currentMutedRcaSet);\n+        LOG.debug(\"New set of muted deciders: {}\", currentMutedDeciderSet);\n+        LOG.debug(\"New set of muted actions: {}\", currentMutedActionSet);", "originalCommit": "300dcc5a24bf2ce73182e64cf0fb332baa48e25d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE4NTE2Mg==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/325#discussion_r467185162", "bodyText": "Now we are updating three rca.conf files. updateAllRcaConfFiles has a void return type. What happens if it succeeded on a subset of files but not all? We will still update lastAppliedTimestamp and never look back until someone makes a change again. So, should we make lastAppliedTimestamp return true when writes on all three files succeed and and then only update the lastAppliedTimestamp. If not, then we will retry again on the next run and eventually all three files will be updated or we likely have a disk corruption or disk full issues. thoughts ?", "author": "yojs", "createdAt": "2020-08-07T17:51:12Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/config/overrides/ConfigOverridesApplier.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.config.overrides;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.PerformanceAnalyzerApp;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.core.RcaConf;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.reader.ClusterDetailsEventProcessor;\n+import com.google.common.annotations.VisibleForTesting;\n+import java.io.IOException;\n+import java.util.HashSet;\n+import java.util.Set;\n+import org.apache.commons.lang3.math.NumberUtils;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+/**\n+ * Class the manages applying the various overrides for RCAs, deciders, and action nodes as\n+ * written by the NodeDetails collector and read by the {@link ClusterDetailsEventProcessor}\n+ */\n+public class ConfigOverridesApplier {\n+\n+  private static final Logger LOG = LogManager.getLogger(ConfigOverridesApplier.class);\n+  private long lastAppliedTimestamp;\n+\n+  public void applyOverride(final String overridesJson, final String lastUpdatedTimestampString) {\n+    if (!valid(overridesJson, lastUpdatedTimestampString)) {\n+      LOG.warn(\"Received invalid overrides or timestamp. Overrides json: {}, last updated \"\n+          + \"timestamp: {}\", overridesJson, lastAppliedTimestamp);\n+      return;\n+    }\n+\n+    try {\n+      long lastUpdatedTimestamp = Long.parseLong(lastUpdatedTimestampString);\n+      LOG.debug(\"Last updated(writer): {}, Last applied(reader): {}\", lastUpdatedTimestamp,\n+          lastAppliedTimestamp);\n+      if (lastUpdatedTimestamp > lastAppliedTimestamp) {\n+        apply(ConfigOverridesHelper.deserialize(overridesJson));\n+      } else {\n+        LOG.debug(\"Not applying override. Last updated timestamp {} is behind last applied \"\n+            + \"timestamp {}\", lastUpdatedTimestamp, lastAppliedTimestamp);\n+      }\n+    } catch (IOException ioe) {\n+      LOG.error(\"Unable to deserialize overrides JSON:\" + overridesJson, ioe);\n+    } catch (NumberFormatException nfe) {\n+      LOG.error(\"Unable to parse the lastUpdatedTimestamp {} string as a number.\",\n+          lastUpdatedTimestampString, nfe);\n+    }\n+  }\n+\n+  private void apply(final ConfigOverrides overrides) {\n+    if (PerformanceAnalyzerApp.getRcaController() != null && PerformanceAnalyzerApp.getRcaController().isRcaEnabled()) {\n+      LOG.info(\"Applying overrides: {}\", overrides.getEnable().getRcas());\n+      RcaConf rcaConf = PerformanceAnalyzerApp.getRcaController().getRcaConf();\n+      if (rcaConf != null) {\n+        Set<String> currentMutedRcaSet = new HashSet<>(rcaConf.getMutedRcaList());\n+        Set<String> currentMutedDeciderSet = new HashSet<>(rcaConf.getMutedDeciderList());\n+        Set<String> currentMutedActionSet = new HashSet<>(rcaConf.getMutedActionList());\n+        // check and remove any nodes that are in the disabled list that were enabled just now.\n+        if (overrides.getEnable() != null) {\n+          if (overrides.getEnable().getRcas() != null) {\n+            currentMutedRcaSet.removeAll(overrides.getEnable().getRcas());\n+          }\n+          if (overrides.getEnable().getDeciders() != null) {\n+            currentMutedDeciderSet.removeAll(overrides.getEnable().getDeciders());\n+          }\n+          if (overrides.getEnable().getActions() != null) {\n+            currentMutedActionSet.removeAll(overrides.getEnable().getActions());\n+          }\n+        }\n+\n+        // union the remaining already disabled nodes with the new set of disabled nodes.\n+        if (overrides.getDisable() != null) {\n+          if (overrides.getDisable().getRcas() != null) {\n+            currentMutedRcaSet.addAll(overrides.getDisable().getRcas());\n+          }\n+          if (overrides.getDisable().getDeciders() != null) {\n+            currentMutedDeciderSet.addAll(overrides.getDisable().getDeciders());\n+          }\n+          if (overrides.getDisable().getActions() != null) {\n+            currentMutedActionSet.addAll(overrides.getDisable().getActions());\n+          }\n+        }\n+\n+        LOG.debug(\"New set of muted rcas: {}\", currentMutedRcaSet);\n+        LOG.debug(\"New set of muted deciders: {}\", currentMutedDeciderSet);\n+        LOG.debug(\"New set of muted actions: {}\", currentMutedActionSet);\n+        rcaConf.updateAllRcaConfFiles(currentMutedRcaSet, currentMutedDeciderSet, currentMutedActionSet);", "originalCommit": "300dcc5a24bf2ce73182e64cf0fb332baa48e25d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzIwODYyNA==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/325#discussion_r467208624", "bodyText": "That's a good point! I'm checking all three updates before updating the lastAppliedTimestamp.\nI'm also emitting a metric if we fail to update an rca conf file. If we end up in a state where we can't do these file system changes, I think we should be failing in more places than just this, so yea, it's probably ok to do the timestamp update only if all three succeed.", "author": "ktkrg", "createdAt": "2020-08-07T18:41:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE4NTE2Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE4NjMxNg==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/325#discussion_r467186316", "bodyText": "The RCAController thread updates this but it is read by the SchedulerTask threads. We should make this volatile", "author": "yojs", "createdAt": "2020-08-07T17:53:36Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/AppContext.java", "diffHunk": "@@ -39,10 +40,12 @@\n   // initiate a node config cache within each AppContext space\n   // to store node config settings from ES\n   private final NodeConfigCache nodeConfigCache;\n+  private Set<String> mutedActions;", "originalCommit": "300dcc5a24bf2ce73182e64cf0fb332baa48e25d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzIwMzU3NQ==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/325#discussion_r467203575", "bodyText": "Done.", "author": "ktkrg", "createdAt": "2020-08-07T18:30:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE4NjMxNg=="}], "type": "inlineReview"}, {"oid": "556b52773d461f6ca03a23f8c0af5c62c4dd2483", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/556b52773d461f6ca03a23f8c0af5c62c4dd2483", "message": "Address PR comments", "committedDate": "2020-08-07T18:18:40Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzIxNDE3MA==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/325#discussion_r467214170", "bodyText": "You can use the new metric framework. There your metric can also tell you which file erred out ?", "author": "yojs", "createdAt": "2020-08-07T18:54:02Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/core/RcaConf.java", "diffHunk": "@@ -202,17 +203,24 @@ public CacheDeciderConfig getCacheDeciderConfig() {\n     return setting;\n   }\n \n-  public void updateAllRcaConfFiles(final Set<String> mutedRcas, final Set<String> mutedDeciders,\n+  public boolean updateAllRcaConfFiles(final Set<String> mutedRcas, final Set<String> mutedDeciders,\n       final Set<String> mutedActions) {\n+    boolean updateStatus = true;\n     // update all rca.conf files\n     List<String> rcaConfFiles = RcaControllerHelper.getAllConfFilePaths();\n-\n     for (String confFilePath : rcaConfFiles) {\n-      updateRcaConf(confFilePath, mutedRcas, mutedDeciders, mutedActions);\n+      updateStatus = updateRcaConf(confFilePath, mutedRcas, mutedDeciders,\n+        mutedActions);\n+      if (!updateStatus) {\n+        LOG.error(\"Failed to update the conf file at path: {}\", confFilePath);\n+        StatsCollector.instance().logMetric(RcaConsts.WRITE_UPDATED_RCA_CONF_ERROR);", "originalCommit": "556b52773d461f6ca03a23f8c0af5c62c4dd2483", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}