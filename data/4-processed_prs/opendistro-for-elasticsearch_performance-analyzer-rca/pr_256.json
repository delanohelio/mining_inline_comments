{"pr_number": 256, "pr_title": "[refactoring] Refactor Resource message in protobuf to add metric dimension in resource object", "pr_createdAt": "2020-06-24T21:34:10Z", "pr_url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/256", "timeline": [{"oid": "4e0e7893d6f529a6db06dc4f013f3abd00dc4981", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/4e0e7893d6f529a6db06dc4f013f3abd00dc4981", "message": "Refactor Resource mesasge in protobuf to add metrics to resource", "committedDate": "2020-06-24T21:05:47Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA2OTU3OQ==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/256#discussion_r448069579", "bodyText": "Should we also add theResourceMetricName here?", "author": "khushbr", "createdAt": "2020-07-01T01:42:41Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/summaries/HotResourceSummary.java", "diffHunk": "@@ -166,14 +164,14 @@ public static HotResourceSummary buildHotResourceSummaryFromMessage(HotResourceS\n   @Override\n   public String toString() {\n     return new StringBuilder()\n-        .append(ResourceTypeUtil.getResourceTypeName(this.resourceType))\n+        .append(ResourceUtil.getResourceTypeName(resource))\n+        .append(\" \")\n+        .append(ResourceUtil.getResourceTypeUnit(resource))", "originalCommit": "4e0e7893d6f529a6db06dc4f013f3abd00dc4981", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODUyMzIzNA==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/256#discussion_r448523234", "bodyText": "Done, renamed to theResourceMetricName", "author": "rguo-aws", "createdAt": "2020-07-01T17:48:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA2OTU3OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA3MTg4NA==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/256#discussion_r448071884", "bodyText": "It would be good to add documentation around how Resource is a factor of ResourceEnum and MetricEnum  with linking to the .proto file", "author": "khushbr", "createdAt": "2020-07-01T01:52:08Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/summaries/ResourceUtil.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.AdditionalFields;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.MetricEnum;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.PANetworking;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.Resource;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.ResourceEnum;\n+\n+/**\n+ * A utility class to parse and build grpc ResourceType\n+ */\n+public class ResourceUtil {\n+", "originalCommit": "4e0e7893d6f529a6db06dc4f013f3abd00dc4981", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODUyNzMwOQ==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/256#discussion_r448527309", "bodyText": "done, added a javadoc to explain the Resource message and its enums", "author": "rguo-aws", "createdAt": "2020-07-01T17:56:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA3MTg4NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA3NDYwNg==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/256#discussion_r448074606", "bodyText": "The function name here getResourceTypeUnit doesn't convey that it is returning resourceMetric information. Consider renaming it.", "author": "khushbr", "createdAt": "2020-07-01T02:02:59Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/summaries/ResourceUtil.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.AdditionalFields;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.MetricEnum;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.PANetworking;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.Resource;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.ResourceEnum;\n+\n+/**\n+ * A utility class to parse and build grpc ResourceType\n+ */\n+public class ResourceUtil {\n+\n+  // JVM resource\n+  public static Resource OLD_GEN_HEAP_USAGE = Resource.newBuilder()\n+      .setResource(ResourceEnum.OLD_GEN)\n+      .setMetric(MetricEnum.HEAP_USAGE).build();\n+  public static Resource YOUNG_GEN_PROMOTION_RATE = Resource.newBuilder()\n+      .setResource(ResourceEnum.YOUNG_GEN)\n+      .setMetric(MetricEnum.PROMOTION_RATE).build();\n+\n+  // hardware resource\n+  public static Resource CPU_USAGE = Resource.newBuilder()\n+      .setResource(ResourceEnum.CPU)\n+      .setMetric(MetricEnum.CPU_USAGE).build();\n+  public static Resource IO_TOTAL_THROUGHPUT = Resource.newBuilder()\n+      .setResource(ResourceEnum.IO)\n+      .setMetric(MetricEnum.TOTAL_THROUGHPUT).build();\n+  public static Resource IO_TOTAL_SYS_CALLRATE = Resource.newBuilder()\n+      .setResource(ResourceEnum.IO)\n+      .setMetric(MetricEnum.TOTAL_SYS_CALLRATE).build();\n+\n+  // thread pool\n+  public static Resource WRITE_QUEUE_REJECTION = Resource.newBuilder()\n+      .setResource(ResourceEnum.WRITE_THREADPOOL)\n+      .setMetric(MetricEnum.QUEUE_REJECTION).build();\n+  public static Resource SEARCH_QUEUE_REJECTION = Resource.newBuilder()\n+      .setResource(ResourceEnum.SEARCH_THREADPOOL)\n+      .setMetric(MetricEnum.QUEUE_REJECTION).build();\n+\n+  /**\n+   * Read the resourceType name from the ResourceType object\n+   * @param resource grpc Resource object\n+   * @return resource type name\n+   */\n+  public static String getResourceTypeName(Resource resource) {\n+    return resource.getResource().getValueDescriptor().getOptions()\n+          .getExtension(PANetworking.additionalFields).getName();\n+  }\n+\n+  /**\n+   * Read the resourceType unit type from the ResourceType object\n+   * @param resource grpc ResourceType object\n+   * @return resource unit type\n+   */\n+  public static String getResourceTypeUnit(Resource resource) {", "originalCommit": "4e0e7893d6f529a6db06dc4f013f3abd00dc4981", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODUyNzY0NA==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/256#discussion_r448527644", "bodyText": "done, renamed to getResourceMetricName", "author": "rguo-aws", "createdAt": "2020-07-01T17:56:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA3NDYwNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA3NDg3NA==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/256#discussion_r448074874", "bodyText": "There is a disconnect between column name and the getter function name. We should rename one of the two.", "author": "khushbr", "createdAt": "2020-07-01T02:04:05Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/summaries/HotResourceSummary.java", "diffHunk": "@@ -223,14 +221,14 @@ public String getTableName() {\n   public JsonElement toJson() {\n     JsonObject summaryObj = new JsonObject();\n     summaryObj.addProperty(SQL_SCHEMA_CONSTANTS.RESOURCE_TYPE_COL_NAME,\n-        ResourceTypeUtil.getResourceTypeName(this.resourceType));\n+        ResourceUtil.getResourceTypeName(this.resource));\n+    summaryObj.addProperty(SQL_SCHEMA_CONSTANTS.RESOURCE_METRIC_COL_NAME,\n+        ResourceUtil.getResourceTypeUnit(this.resource));", "originalCommit": "4e0e7893d6f529a6db06dc4f013f3abd00dc4981", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA3NjI5Ng==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/256#discussion_r448076296", "bodyText": "We should rename either message Resource or the ResourceEnum resource. resourceSummary.getResource().getResource() isn't very readable.", "author": "khushbr", "createdAt": "2020-07-01T02:09:43Z", "path": "src/main/proto/inter_node_rpc_service.proto", "diffHunk": "@@ -48,40 +48,50 @@ message ResourceContextMessage {\n /*\n   Enum for different resource type\n */\n-message ResourceTypeOptions {\n-  string resourceTypeName = 1;\n-  string resourceTypeUnit = 2;\n+message AdditionalFields {\n+  string name = 1;\n+  string description = 2;\n }\n \n extend google.protobuf.EnumValueOptions {\n-  ResourceTypeOptions resourceTypeOptions = 50000;\n+  AdditionalFields additional_fields = 50000;\n }\n \n-enum JvmEnum {\n-  OLD_GEN = 0 [(resourceTypeOptions).resourceTypeName = \"old gen\", (resourceTypeOptions).resourceTypeUnit = \"heap usage in percentage\"];\n-  YOUNG_GEN = 1 [(resourceTypeOptions).resourceTypeName = \"young gen\", (resourceTypeOptions).resourceTypeUnit = \"promotion rate in mb/s\"];\n-}\n+enum ResourceEnum {\n+  // JVM\n+  OLD_GEN = 0 [(additional_fields).name = \"old gen\"];\n+  YOUNG_GEN = 1 [(additional_fields).name = \"young gen\"];\n+\n+  // hardware\n+  CPU = 2 [(additional_fields).name = \"cpu usage\"];\n+  IO = 3 [(additional_fields).name = \"IO\"];\n \n-enum HardwareEnum {\n-  CPU = 0 [(resourceTypeOptions).resourceTypeName = \"cpu usage\", (resourceTypeOptions).resourceTypeUnit = \"cpu usage in percentage\"];\n-  IO_TOTAL_THROUGHPUT = 1 [(resourceTypeOptions).resourceTypeName = \"IO total throughput\", (resourceTypeOptions).resourceTypeUnit = \"number of bytes read/written per second\"];\n-  IO_TOTAL_SYS_CALLRATE = 2 [(resourceTypeOptions).resourceTypeName = \"IO total sys callrate\", (resourceTypeOptions).resourceTypeUnit = \"read and write system calls per second\"];\n+  // threadpool\n+  WRITE_THREADPOOL = 4 [(additional_fields).name = \"write threadpool\"];\n+  SEARCH_THREADPOOL = 5 [(additional_fields).name = \"search threadpool\"];\n }\n \n-enum ThreadPoolEnum {\n-  WRITE_QUEUE = 0 [(resourceTypeOptions).resourceTypeName = \"write queue\", (resourceTypeOptions).resourceTypeUnit = \"rejection period in second\"];\n-  SEARCH_QUEUE = 1 [(resourceTypeOptions).resourceTypeName = \"search queue\", (resourceTypeOptions).resourceTypeUnit = \"rejection period in second\"];\n+enum MetricEnum {\n+  // JVM\n+  HEAP_USAGE = 0 [(additional_fields).name = \"heap usage\", (additional_fields).description = \"memory usage in percentage\"];\n+  PROMOTION_RATE = 1 [(additional_fields).name = \"promotion rate\", (additional_fields).description = \"mb/s\"];\n+  MINOR_GC = 2 [(additional_fields).name = \"minor gc\", (additional_fields).description = \"time in percentage\"];\n+\n+  // hardware\n+  CPU_USAGE = 3 [(additional_fields).name = \"cpu usage\", (additional_fields).description = \"num of cores\"];\n+  TOTAL_THROUGHPUT = 4 [(additional_fields).name = \"total throughput\", (additional_fields).description = \"number of bytes read/written per second\"];\n+  TOTAL_SYS_CALLRATE = 5 [(additional_fields).name = \"total sys callrate\", (additional_fields).description = \"read and write system calls per second\"];\n+\n+  // threadpool\n+  QUEUE_REJECTION = 6 [(additional_fields).name = \"queue rejection\", (additional_fields).description = \"rejection period in second\"];\n }\n \n /*\n   message for resource type Enum\n */\n-message ResourceType {\n-    oneof resource_type_oneof {\n-      JvmEnum JVM = 1;\n-      HardwareEnum hardware_resource_type = 2;\n-      ThreadPoolEnum thread_pool = 3;\n-    }\n+message Resource {", "originalCommit": "4e0e7893d6f529a6db06dc4f013f3abd00dc4981", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA3ODE1Mg==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/256#discussion_r448078152", "bodyText": "Unused imports ?", "author": "khushbr", "createdAt": "2020-07-01T02:17:04Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/rca/hotheap/HighHeapUsageYoungGenRca.java", "diffHunk": "@@ -18,12 +18,13 @@\n import static com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics.GCType.OLD_GEN;\n import static com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics.GCType.TOT_YOUNG_GC;\n import static com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics.HeapDimension.MEM_TYPE;\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.ResourceUtil.YOUNG_GEN_PROMOTION_RATE;\n \n import com.amazon.opendistro.elasticsearch.performanceanalyzer.PerformanceAnalyzerApp;\n-import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.JvmEnum;\n-import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.ResourceType;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.MetricEnum;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.Resource;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.ResourceEnum;", "originalCommit": "4e0e7893d6f529a6db06dc4f013f3abd00dc4981", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODUyODAyNA==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/256#discussion_r448528024", "bodyText": "thanks for pointing this out. removed.", "author": "rguo-aws", "createdAt": "2020-07-01T17:57:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA3ODE1Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA3ODM1OA==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/256#discussion_r448078358", "bodyText": "Unused imports ?", "author": "khushbr", "createdAt": "2020-07-01T02:17:50Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/rca/hotshard/HotShardClusterRca.java", "diffHunk": "@@ -15,8 +15,9 @@\n \n package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.hotshard;\n \n-import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.HardwareEnum;\n-import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.ResourceType;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.MetricEnum;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.Resource;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.ResourceEnum;", "originalCommit": "4e0e7893d6f529a6db06dc4f013f3abd00dc4981", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODUyODIyOQ==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/256#discussion_r448528229", "bodyText": "removed", "author": "rguo-aws", "createdAt": "2020-07-01T17:57:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA3ODM1OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA3ODU5Nw==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/256#discussion_r448078597", "bodyText": "let's also rename the resourceType here.", "author": "khushbr", "createdAt": "2020-07-01T02:19:03Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/rca/hotshard/HotShardClusterRca.java", "diffHunk": "@@ -138,7 +140,7 @@ private double getThresholdValue(Map<NodeShardKey, Double> perIndexShardInfo, do\n      *\n      */\n     private void findHotShardAndCreateSummary(Table<String, NodeShardKey, Double> resourceInfoTable, double thresholdInPercentage,\n-                                              List<HotResourceSummary> hotResourceSummaryList, ResourceType resourceType) {\n+                                              List<HotResourceSummary> hotResourceSummaryList, Resource resourceType) {", "originalCommit": "4e0e7893d6f529a6db06dc4f013f3abd00dc4981", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODUyODY3Nw==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/256#discussion_r448528677", "bodyText": "done", "author": "rguo-aws", "createdAt": "2020-07-01T17:58:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA3ODU5Nw=="}], "type": "inlineReview"}, {"oid": "ff68020d953c6c43aea9504f0b8a72118e7d5afd", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/ff68020d953c6c43aea9504f0b8a72118e7d5afd", "message": "Address PR comments", "committedDate": "2020-07-01T18:09:47Z", "type": "commit"}, {"oid": "fc1babd0c9def65f27687adff3e54b97a8591814", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/fc1babd0c9def65f27687adff3e54b97a8591814", "message": "Merge branch 'master' into rguo-protobuf-refactoring", "committedDate": "2020-07-01T19:17:42Z", "type": "commit"}, {"oid": "e22a58468e122fe165caef0b5256e59c9150db83", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/e22a58468e122fe165caef0b5256e59c9150db83", "message": "resolve merge conflict", "committedDate": "2020-07-01T19:30:27Z", "type": "commit"}]}