{"pr_number": 208, "pr_title": "Incoporating 1-n NodeSummary changes for Hot Shard RCA", "pr_createdAt": "2020-05-21T22:33:59Z", "pr_url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/208", "timeline": [{"oid": "c25db51201245b4ca702e518e93356848dcb467a", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/c25db51201245b4ca702e518e93356848dcb467a", "message": "Incoporating 1-n NodeSummary changes for Hot Shard RCA", "committedDate": "2020-05-21T22:31:01Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDYyODAyNg==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/208#discussion_r430628026", "bodyText": "We are gathering metrics at shard level here and at each iteration we are creating a new object. I wonder how much garbage we are creating here. We should try to reuse objects.\nIn the RCA periodic samplers, we should add a metric to get the gc count and duration metrics.", "author": "yojs", "createdAt": "2020-05-26T18:41:29Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/rca/hotshard/HotShardRca.java", "diffHunk": "@@ -106,14 +110,18 @@ private void consumeFlowUnit(final MetricFlowUnit metricFlowUnit, final String m\n                                  final HashMap<IndexShardKey, SlidingWindow<SlidingWindowData>> metricMap) {\n         for (Record record : metricFlowUnit.getData()) {\n             try {\n-                IndexShardKey indexShardKey = IndexShardKey.buildIndexShardKey(record);\n-                double usage = record.getValue(MetricsDB.SUM, Double.class);\n-                SlidingWindow<SlidingWindowData> usageDeque = metricMap.get(indexShardKey);\n-                if (null == usageDeque) {\n-                    usageDeque = new SlidingWindow<>(SLIDING_WINDOW_IN_SECONDS, TimeUnit.SECONDS);\n-                    metricMap.put(indexShardKey, usageDeque);\n+                String indexName = record.getValue(INDEX_NAME.toString(), String.class);\n+                Integer shardId = record.getValue(SHARD_ID.toString(), Integer.class);\n+                if (indexName != null &&  shardId != null) {\n+                    IndexShardKey indexShardKey = IndexShardKey.buildIndexShardKey(record);\n+                    double usage = record.getValue(MetricsDB.SUM, Double.class);\n+                    SlidingWindow<SlidingWindowData> usageDeque = metricMap.get(indexShardKey);\n+                    if (null == usageDeque) {\n+                        usageDeque = new SlidingWindow<>(SLIDING_WINDOW_IN_SECONDS, TimeUnit.SECONDS);\n+                        metricMap.put(indexShardKey, usageDeque);\n+                    }\n+                    usageDeque.next(new SlidingWindowData(this.clock.millis(), usage));", "originalCommit": "c25db51201245b4ca702e518e93356848dcb467a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDc0MDIzNQ==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/208#discussion_r430740235", "bodyText": "Created an issue for this #213", "author": "khushbr", "createdAt": "2020-05-26T22:22:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDYyODAyNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDYzMDU2NA==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/208#discussion_r430630564", "bodyText": "We have a lot of instanceof scattered around. It might be worth while to create an enum type of Summaries and then we can compare against an enum value", "author": "yojs", "createdAt": "2020-05-26T18:46:04Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/rca/hotshard/HotShardClusterRca.java", "diffHunk": "@@ -90,17 +95,21 @@ private void populateResourceInfoTable(String indexName, NodeShardKey nodeShardK\n     private void consumeFlowUnit(ResourceFlowUnit resourceFlowUnit) {\n         String nodeId = ((HotNodeSummary) resourceFlowUnit.getResourceSummary()).getNodeID();\n         HotNodeSummary hotNodeSummary = ((HotNodeSummary) resourceFlowUnit.getResourceSummary());\n-        for (HotShardSummary hotShardSummary : hotNodeSummary.getHotShardSummaryList()) {\n-            String indexName = hotShardSummary.getIndexName();\n-            NodeShardKey nodeShardKey = new NodeShardKey(nodeId, hotShardSummary.getShardId());\n-            // 1. Populate CPU Table\n-            populateResourceInfoTable(indexName, nodeShardKey, hotShardSummary.getCpuUtilization(), cpuUtilizationInfoTable);\n+        for (GenericSummary summary : hotNodeSummary.getNestedSummaryList()) {\n+            if (summary instanceof HotShardSummary) {", "originalCommit": "c25db51201245b4ca702e518e93356848dcb467a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDczMTU5Nw==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/208#discussion_r430731597", "bodyText": "Agreed, have created an issue to track it #212", "author": "khushbr", "createdAt": "2020-05-26T21:59:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDYzMDU2NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDYzMTQxNg==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/208#discussion_r430631416", "bodyText": "remove ?", "author": "yojs", "createdAt": "2020-05-26T18:47:36Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/rca/hotshard/HotShardClusterRca.java", "diffHunk": "@@ -90,17 +95,21 @@ private void populateResourceInfoTable(String indexName, NodeShardKey nodeShardK\n     private void consumeFlowUnit(ResourceFlowUnit resourceFlowUnit) {\n         String nodeId = ((HotNodeSummary) resourceFlowUnit.getResourceSummary()).getNodeID();\n         HotNodeSummary hotNodeSummary = ((HotNodeSummary) resourceFlowUnit.getResourceSummary());\n-        for (HotShardSummary hotShardSummary : hotNodeSummary.getHotShardSummaryList()) {\n-            String indexName = hotShardSummary.getIndexName();\n-            NodeShardKey nodeShardKey = new NodeShardKey(nodeId, hotShardSummary.getShardId());\n-            // 1. Populate CPU Table\n-            populateResourceInfoTable(indexName, nodeShardKey, hotShardSummary.getCpuUtilization(), cpuUtilizationInfoTable);\n+        for (GenericSummary summary : hotNodeSummary.getNestedSummaryList()) {\n+            if (summary instanceof HotShardSummary) {\n+                HotShardSummary hotShardSummary = (HotShardSummary) summary;\n+                String indexName = hotShardSummary.getIndexName();\n+                NodeShardKey nodeShardKey = new NodeShardKey(nodeId, hotShardSummary.getShardId());\n+                // 1. Populate CPU Table\n+                populateResourceInfoTable(indexName, nodeShardKey, hotShardSummary.getCpuUtilization(), cpuUtilizationInfoTable);\n \n-            // 2. Populate ioTotThroughput Table\n-            populateResourceInfoTable(indexName, nodeShardKey, hotShardSummary.getIOThroughput(), IOThroughputInfoTable);\n+                // 2. Populate ioTotThroughput Table\n+                populateResourceInfoTable(indexName, nodeShardKey, hotShardSummary.getIOThroughput(), IOThroughputInfoTable);\n \n-            // 3. Populate ioTotSysCallrate Table\n-            populateResourceInfoTable(indexName,nodeShardKey, hotShardSummary.getIOSysCallrate(), IOSysCallRateInfoTable);\n+                // 3. Populate ioTotSysCallrate Table\n+                populateResourceInfoTable(indexName, nodeShardKey, hotShardSummary.getIOSysCallrate(), IOSysCallRateInfoTable);\n+", "originalCommit": "c25db51201245b4ca702e518e93356848dcb467a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDcyNzkxNw==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/208#discussion_r430727917", "bodyText": "Done. Removed the comments.", "author": "khushbr", "createdAt": "2020-05-26T21:50:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDYzMTQxNg=="}], "type": "inlineReview"}, {"oid": "82cd88c3eca0fc7244ee644bfe32a23fed5bf5a8", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/82cd88c3eca0fc7244ee644bfe32a23fed5bf5a8", "message": "Addressing PR comments and adding UT", "committedDate": "2020-05-28T05:34:07Z", "type": "commit"}, {"oid": "1076e7920245e53a62f83fcd91e2e05ce1808562", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/1076e7920245e53a62f83fcd91e2e05ce1808562", "message": "Merge branch 'master' into khushbr-1-n-hotnodesummary", "committedDate": "2020-05-28T05:35:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjA3ODMwMg==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/208#discussion_r432078302", "bodyText": "remove ?", "author": "yojs", "createdAt": "2020-05-28T19:45:44Z", "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/ResourceHeatMapGraphTest.java", "diffHunk": "@@ -503,4 +520,131 @@ private void testJsonResponse(String jsonResponse) {\n             Assert.assertEquals(0, node.get(\"IO_WriteSyscallRate_num_shards\").getAsInt());\n         }\n     }\n-}\n\\ No newline at end of file\n+\n+    private static class AnalysisGraphHotShard extends ElasticSearchAnalysisGraph {\n+        @Override\n+        public void construct() {\n+            Metric cpuUtilization = new CPU_Utilization(1);\n+            Metric ioTotThroughput = new IO_TotThroughput(1);\n+            Metric ioTotSyscallRate = new IO_TotalSyscallRate(1);\n+\n+            cpuUtilization.addTag(TAG_LOCUS, LOCUS_DATA_MASTER_NODE);\n+            ioTotThroughput.addTag(TAG_LOCUS, LOCUS_DATA_MASTER_NODE);\n+            ioTotSyscallRate.addTag(TAG_LOCUS, LOCUS_DATA_MASTER_NODE);\n+            addLeaf(cpuUtilization);\n+            addLeaf(ioTotThroughput);\n+            addLeaf(ioTotSyscallRate);\n+\n+            // High CPU Utilization RCA\n+            HotShardRca hotShardRca = new HotShardRca(1, 1, cpuUtilization, ioTotThroughput, ioTotSyscallRate);\n+            hotShardRca.addTag(TAG_LOCUS, LOCUS_DATA_MASTER_NODE);\n+            hotShardRca.addAllUpstreams(Arrays.asList(cpuUtilization, ioTotThroughput, ioTotSyscallRate));\n+\n+            // Hot Shard Cluster RCA which consumes the above\n+            HotShardClusterRca hotShardClusterRca = new HotShardClusterRca(1, hotShardRca);\n+            hotShardClusterRca.addTag(TAG_LOCUS, LOCUS_MASTER_NODE);\n+            hotShardClusterRca.addAllUpstreams(Collections.singletonList(hotShardRca));\n+            hotShardClusterRca.addTag(TAG_AGGREGATE_UPSTREAM, LOCUS_DATA_NODE);\n+        }\n+    }\n+\n+    @Test\n+    public void testHotShardClusterApiResponse() {\n+        AnalysisGraph analysisGraph = new AnalysisGraphHotShard();\n+        List<ConnectedComponent> connectedComponents =\n+                RcaUtil.getAnalysisGraphComponents(analysisGraph);\n+        RcaTestHelper.setEvaluationTimeForAllNodes(connectedComponents, 1);\n+\n+        String dataNodeRcaConf = Paths.get(RcaConsts.TEST_CONFIG_PATH, \"rca.conf\").toString();\n+\n+        RcaConf rcaConf = new RcaConf(dataNodeRcaConf);\n+        SubscriptionManager subscriptionManager =\n+                new SubscriptionManager(new GRPCConnectionManager(false));\n+        subscriptionManager.setCurrentLocus(rcaConf.getTagMap().get(\"locus\"));\n+\n+        WireHopper wireHopper = new WireHopper(new NodeStateManager(), clientServers.getNetClient(),\n+                subscriptionManager,\n+                networkThreadPoolReference,\n+                new ReceivedFlowUnitStore(rcaConf.getPerVertexBufferLength()));\n+\n+        RCASchedulerTask rcaSchedulerTaskData =\n+                new RCASchedulerTask(\n+                        1000,\n+                        Executors.newFixedThreadPool(THREADS),\n+                        connectedComponents,\n+                        reader,\n+                        persistable,\n+                        rcaConf,\n+                        wireHopper);\n+        AllMetrics.NodeRole nodeRole = AllMetrics.NodeRole.DATA;\n+        RcaTestHelper.setMyIp(\"192.168.0.1\", nodeRole);\n+        rcaSchedulerTaskData.run();\n+\n+        String masterNodeRcaConf =\n+                Paths.get(RcaConsts.TEST_CONFIG_PATH, \"rca_elected_master.conf\").toString();\n+        RcaConf rcaConf2 = new RcaConf(masterNodeRcaConf);\n+        SubscriptionManager subscriptionManager2 =\n+                new SubscriptionManager(new GRPCConnectionManager(false));\n+        subscriptionManager2.setCurrentLocus(rcaConf2.getTagMap().get(\"locus\"));\n+\n+        WireHopper wireHopper2 = new WireHopper(new NodeStateManager(), clientServers.getNetClient(),\n+                subscriptionManager2,\n+                networkThreadPoolReference,\n+                new ReceivedFlowUnitStore(rcaConf.getPerVertexBufferLength()));\n+\n+        RCASchedulerTask rcaSchedulerTaskMaster =\n+                new RCASchedulerTask(\n+                        1000,\n+                        Executors.newFixedThreadPool(THREADS),\n+                        connectedComponents,\n+                        reader,\n+                        persistable,\n+                        rcaConf2,\n+                        wireHopper2);\n+        AllMetrics.NodeRole nodeRole2 = AllMetrics.NodeRole.ELECTED_MASTER;\n+        RcaTestHelper.setMyIp(\"1c\", nodeRole2);\n+        rcaSchedulerTaskMaster.run();\n+\n+        URL url = null;\n+        try {\n+            url = new URL(\"http://localhost:9600\" + Util.RCA_QUERY_URL + \"?name=\" + HotShardClusterRca.RCA_TABLE_NAME);\n+        } catch (MalformedURLException e) {\n+            e.printStackTrace();\n+            Assert.fail();\n+        }\n+\n+        try {\n+            HttpURLConnection con = (HttpURLConnection) url.openConnection();\n+            con.setRequestMethod(\"GET\");\n+\n+            int status = con.getResponseCode();\n+            System.out.println(\"Response status: \" + status);", "originalCommit": "1076e7920245e53a62f83fcd91e2e05ce1808562", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}