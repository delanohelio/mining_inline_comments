{"pr_number": 1803, "pr_title": "Feature/#1781 map gen options ui", "pr_createdAt": "2020-06-26T02:04:44Z", "pr_url": "https://github.com/FAForever/downlords-faf-client/pull/1803", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM0NjExOQ==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r446346119", "bodyText": "I would remove \"minSupportedMajorVersion\" (we have to have basic support all old versions forever to keep replays playable and even if we did we could build that in later) and all the corresponding checks.", "author": "Katharsas", "createdAt": "2020-06-26T18:32:40Z", "path": "src/main/java/com/faforever/client/config/ClientProperties.java", "diffHunk": "@@ -150,6 +150,9 @@\n     private String downloadUrlFormat;\n     private String repoAndOwnerName;\n     private String queryLatestVersionUrl;\n+    private String queryVersionsUrl;\n+    private int maxSupportedMajorVersion;\n+    private int minSupportedMajorVersion;", "originalCommit": "4496f5f026ff3e89126867a698063d29a581f856", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUwMzU0NA==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r446503544", "bodyText": "Well I think some time in the future old replays will break. I personally thnk that is ok even if it should be avoided", "author": "1-alex98", "createdAt": "2020-06-27T08:59:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM0NjExOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUxMDIyMA==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r446510220", "bodyText": "minSupportedMajorVersion is there as a just in case but never gets triggered since it is set to 0 it is there in case it ever would need to be used..", "author": "Sheikah45", "createdAt": "2020-06-27T10:25:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM0NjExOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM0ODM3MQ==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r446348371", "bodyText": "Doesnt this imply that this code needs to be adjusted whenever the major version changes? Why not check for 0 and then do the old way, so we dont need to adjust this on version 2,3 etc. ?", "author": "Katharsas", "createdAt": "2020-06-26T18:37:39Z", "path": "src/main/java/com/faforever/client/game/CreateGameController.java", "diffHunk": "@@ -375,20 +379,37 @@ public void onRandomMapButtonClicked() {\n     mapListView.scrollTo(mapIndex);\n   }\n \n-  public void onGenerateMapButtonClicked() {\n+  public void onGenerateMapButtonClicked(){\n+    onGenerateMap();\n+  }\n+\n+  private void onGenerateMap() {\n     try {\n-      mapGeneratorService.generateMap().thenAccept(mapName -> {\n-        Platform.runLater(() -> {\n-          initMapSelection();\n-          mapListView.getItems().stream()\n-              .filter(mapBean -> mapBean.getFolderName().equalsIgnoreCase(mapName))\n-              .findAny().ifPresent(mapBean -> {\n-            mapListView.getSelectionModel().select(mapBean);\n-            mapListView.scrollTo(mapBean);\n-            setSelectedMap(mapBean);\n+      String generatorVersion = mapGeneratorService.queryMaxSupportedVersion();\n+      String majorVersion = generatorVersion.split(\"\\\\.\")[0];\n+      if (majorVersion.equals(\"1\")) {", "originalCommit": "4496f5f026ff3e89126867a698063d29a581f856", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUxMDYwNg==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r446510606", "bodyText": "Makes sense done", "author": "Sheikah45", "createdAt": "2020-06-27T10:30:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM0ODM3MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM1MDc0MA==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r446350740", "bodyText": "Are you sure this check is not already made by the game and replay services? It should be imo. Have you tried removing this and removing the installation setting and the trying to play?", "author": "Katharsas", "createdAt": "2020-06-26T18:43:04Z", "path": "src/main/java/com/faforever/client/game/GenerateMapController.java", "diffHunk": "@@ -0,0 +1,241 @@\n+package com.faforever.client.game;\n+\n+import com.faforever.client.fx.Controller;\n+import com.faforever.client.fx.DualStringListCell;\n+import com.faforever.client.fx.JavaFxUtil;\n+import com.faforever.client.map.MapBean;\n+import com.faforever.client.map.generator.MapGeneratorService;\n+import com.faforever.client.mod.FeaturedMod;\n+import com.faforever.client.notification.NotificationService;\n+import com.faforever.client.preferences.GeneratorPrefs;\n+import com.faforever.client.preferences.PreferenceUpdateListener;\n+import com.faforever.client.preferences.PreferencesService;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.jfoenix.controls.JFXButton;\n+import com.jfoenix.controls.JFXTextField;\n+import javafx.application.Platform;\n+import javafx.collections.FXCollections;\n+import javafx.collections.transformation.FilteredList;\n+import javafx.scene.control.CheckBox;\n+import javafx.scene.control.MultipleSelectionModel;\n+import javafx.scene.control.Spinner;\n+import javafx.scene.control.Slider;\n+import javafx.scene.control.CheckBox;\n+import javafx.scene.control.SpinnerValueFactory.IntegerSpinnerValueFactory;\n+import javafx.scene.input.KeyCode;\n+import javafx.scene.layout.Pane;\n+import javafx.util.StringConverter;\n+import lombok.RequiredArgsConstructor;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+\n+import java.lang.invoke.MethodHandles;\n+import java.lang.ref.WeakReference;\n+import java.util.Objects;\n+import java.util.Random;\n+import java.util.function.Function;\n+\n+@Component\n+@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+@RequiredArgsConstructor\n+public class GenerateMapController implements Controller<Pane> {\n+\n+  private static final Logger logger = LoggerFactory.getLogger(MethodHandles.lookup().lookupClass());\n+  private final PreferencesService preferencesService;\n+  private final NotificationService notificationService;\n+  private final MapGeneratorService mapGeneratorService;\n+  public CreateGameController createGameController;\n+  public Pane generateMapRoot;\n+  public JFXButton generateMapButton;\n+  public JFXTextField previousMapName;\n+  public Spinner<Integer> spawnCountSpinner;\n+  public Slider waterSlider;\n+  public CheckBox waterRandom;\n+  public Slider mountainSlider;\n+  public CheckBox mountainRandom;\n+  public Slider plateauSlider;\n+  public CheckBox plateauRandom;\n+  public Slider rampSlider;\n+  public CheckBox rampRandom;\n+  @VisibleForTesting\n+  FilteredList<MapBean> filteredMapBeans;\n+  private Runnable onCloseButtonClickedListener;\n+  private PreferenceUpdateListener preferenceUpdateListener;\n+\n+  /**\n+   * Remembers if the controller's init method was called, to avoid memory leaks by adding several listeners\n+   */\n+  private boolean initialized;\n+\n+  public void initialize() {\n+    if (preferencesService.getPreferences().getForgedAlliance().getInstallationPath() == null) {\n+      preferenceUpdateListener = preferences -> {\n+        if (!initialized && preferencesService.getPreferences().getForgedAlliance().getInstallationPath() != null) {", "originalCommit": "4496f5f026ff3e89126867a698063d29a581f856", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU0NDA1NQ==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r446544055", "bodyText": "Removed", "author": "Sheikah45", "createdAt": "2020-06-27T16:44:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM1MDc0MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM1MDkwNQ==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r446350905", "bodyText": "private", "author": "Katharsas", "createdAt": "2020-06-26T18:43:29Z", "path": "src/main/java/com/faforever/client/game/GenerateMapController.java", "diffHunk": "@@ -0,0 +1,241 @@\n+package com.faforever.client.game;\n+\n+import com.faforever.client.fx.Controller;\n+import com.faforever.client.fx.DualStringListCell;\n+import com.faforever.client.fx.JavaFxUtil;\n+import com.faforever.client.map.MapBean;\n+import com.faforever.client.map.generator.MapGeneratorService;\n+import com.faforever.client.mod.FeaturedMod;\n+import com.faforever.client.notification.NotificationService;\n+import com.faforever.client.preferences.GeneratorPrefs;\n+import com.faforever.client.preferences.PreferenceUpdateListener;\n+import com.faforever.client.preferences.PreferencesService;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.jfoenix.controls.JFXButton;\n+import com.jfoenix.controls.JFXTextField;\n+import javafx.application.Platform;\n+import javafx.collections.FXCollections;\n+import javafx.collections.transformation.FilteredList;\n+import javafx.scene.control.CheckBox;\n+import javafx.scene.control.MultipleSelectionModel;\n+import javafx.scene.control.Spinner;\n+import javafx.scene.control.Slider;\n+import javafx.scene.control.CheckBox;\n+import javafx.scene.control.SpinnerValueFactory.IntegerSpinnerValueFactory;\n+import javafx.scene.input.KeyCode;\n+import javafx.scene.layout.Pane;\n+import javafx.util.StringConverter;\n+import lombok.RequiredArgsConstructor;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+\n+import java.lang.invoke.MethodHandles;\n+import java.lang.ref.WeakReference;\n+import java.util.Objects;\n+import java.util.Random;\n+import java.util.function.Function;\n+\n+@Component\n+@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+@RequiredArgsConstructor\n+public class GenerateMapController implements Controller<Pane> {\n+\n+  private static final Logger logger = LoggerFactory.getLogger(MethodHandles.lookup().lookupClass());\n+  private final PreferencesService preferencesService;\n+  private final NotificationService notificationService;\n+  private final MapGeneratorService mapGeneratorService;\n+  public CreateGameController createGameController;\n+  public Pane generateMapRoot;\n+  public JFXButton generateMapButton;\n+  public JFXTextField previousMapName;\n+  public Spinner<Integer> spawnCountSpinner;\n+  public Slider waterSlider;\n+  public CheckBox waterRandom;\n+  public Slider mountainSlider;\n+  public CheckBox mountainRandom;\n+  public Slider plateauSlider;\n+  public CheckBox plateauRandom;\n+  public Slider rampSlider;\n+  public CheckBox rampRandom;\n+  @VisibleForTesting\n+  FilteredList<MapBean> filteredMapBeans;\n+  private Runnable onCloseButtonClickedListener;\n+  private PreferenceUpdateListener preferenceUpdateListener;\n+\n+  /**\n+   * Remembers if the controller's init method was called, to avoid memory leaks by adding several listeners\n+   */\n+  private boolean initialized;\n+\n+  public void initialize() {\n+    if (preferencesService.getPreferences().getForgedAlliance().getInstallationPath() == null) {\n+      preferenceUpdateListener = preferences -> {\n+        if (!initialized && preferencesService.getPreferences().getForgedAlliance().getInstallationPath() != null) {\n+          initialized = true;\n+\n+          Platform.runLater(this::init);\n+        }\n+      };\n+      preferencesService.addUpdateListener(new WeakReference<>(preferenceUpdateListener));\n+    } else {\n+      init();\n+    }\n+  }\n+\n+  public void init() {", "originalCommit": "4496f5f026ff3e89126867a698063d29a581f856", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUwODM3NA==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r446508374", "bodyText": "Will do", "author": "Sheikah45", "createdAt": "2020-06-27T10:01:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM1MDkwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM1MzM2MQ==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r446353361", "bodyText": "space around \">\", same below", "author": "Katharsas", "createdAt": "2020-06-26T18:48:57Z", "path": "src/main/java/com/faforever/client/map/generator/MapGeneratorService.java", "diffHunk": "@@ -127,17 +144,53 @@ protected String queryNewestVersion() {\n     return mainObject.get(\"tag_name\").getAsString();\n   }\n \n+  @VisibleForTesting\n+  public String queryMaxSupportedVersion() {\n+    String version = queryNewestVersion();\n+    String majorVersion = version.split(\"\\\\.\")[0];\n+    if (Integer.parseInt(majorVersion)>clientProperties.getMapGenerator().getMaxSupportedMajorVersion() ||", "originalCommit": "4496f5f026ff3e89126867a698063d29a581f856", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUyMzA3NQ==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r446523075", "bodyText": "Done", "author": "Sheikah45", "createdAt": "2020-06-27T12:43:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM1MzM2MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUwMzcxOQ==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r446503719", "bodyText": "I think we have a class that can parse semantic versions... If we do, which I think use that", "author": "1-alex98", "createdAt": "2020-06-27T09:00:48Z", "path": "src/main/java/com/faforever/client/game/CreateGameController.java", "diffHunk": "@@ -375,20 +379,37 @@ public void onRandomMapButtonClicked() {\n     mapListView.scrollTo(mapIndex);\n   }\n \n-  public void onGenerateMapButtonClicked() {\n+  public void onGenerateMapButtonClicked(){\n+    onGenerateMap();\n+  }\n+\n+  private void onGenerateMap() {\n     try {\n-      mapGeneratorService.generateMap().thenAccept(mapName -> {\n-        Platform.runLater(() -> {\n-          initMapSelection();\n-          mapListView.getItems().stream()\n-              .filter(mapBean -> mapBean.getFolderName().equalsIgnoreCase(mapName))\n-              .findAny().ifPresent(mapBean -> {\n-            mapListView.getSelectionModel().select(mapBean);\n-            mapListView.scrollTo(mapBean);\n-            setSelectedMap(mapBean);\n+      String generatorVersion = mapGeneratorService.queryMaxSupportedVersion();\n+      String majorVersion = generatorVersion.split(\"\\\\.\")[0];", "originalCommit": "4496f5f026ff3e89126867a698063d29a581f856", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUyMzE2OA==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r446523168", "bodyText": "Used ComparableVersion", "author": "Sheikah45", "createdAt": "2020-06-27T12:43:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUwMzcxOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUwMzgwOA==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r446503808", "bodyText": "We are trying to get away from JFX since a few weeks. Can u use the notification and a Immediate notification with custom UI. @micheljung what should he do?", "author": "1-alex98", "createdAt": "2020-06-27T09:02:21Z", "path": "src/main/java/com/faforever/client/game/CreateGameController.java", "diffHunk": "@@ -375,20 +379,37 @@ public void onRandomMapButtonClicked() {\n     mapListView.scrollTo(mapIndex);\n   }\n \n-  public void onGenerateMapButtonClicked() {\n+  public void onGenerateMapButtonClicked(){\n+    onGenerateMap();\n+  }\n+\n+  private void onGenerateMap() {\n     try {\n-      mapGeneratorService.generateMap().thenAccept(mapName -> {\n-        Platform.runLater(() -> {\n-          initMapSelection();\n-          mapListView.getItems().stream()\n-              .filter(mapBean -> mapBean.getFolderName().equalsIgnoreCase(mapName))\n-              .findAny().ifPresent(mapBean -> {\n-            mapListView.getSelectionModel().select(mapBean);\n-            mapListView.scrollTo(mapBean);\n-            setSelectedMap(mapBean);\n+      String generatorVersion = mapGeneratorService.queryMaxSupportedVersion();\n+      String majorVersion = generatorVersion.split(\"\\\\.\")[0];\n+      if (majorVersion.equals(\"1\")) {\n+        GenerateMapController generateMapController = uiService.loadFxml(\"theme/play/generate_map.fxml\");\n+\n+        Pane root = generateMapController.getRoot();\n+        generateMapController.setCreateGameController(this);\n+        JFXDialog dialog = uiService.showInDialog(gamesRoot, root, i18n.get(\"game.generate.dialog\"));", "originalCommit": "4496f5f026ff3e89126867a698063d29a581f856", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUyMzE5NA==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r446523194", "bodyText": "Decided to keep JFXDialog for now.", "author": "Sheikah45", "createdAt": "2020-06-27T12:44:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUwMzgwOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUwMzg0Ng==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r446503846", "bodyText": "Use @slf4j annotation instead", "author": "1-alex98", "createdAt": "2020-06-27T09:02:55Z", "path": "src/main/java/com/faforever/client/game/GenerateMapController.java", "diffHunk": "@@ -0,0 +1,241 @@\n+package com.faforever.client.game;\n+\n+import com.faforever.client.fx.Controller;\n+import com.faforever.client.fx.DualStringListCell;\n+import com.faforever.client.fx.JavaFxUtil;\n+import com.faforever.client.map.MapBean;\n+import com.faforever.client.map.generator.MapGeneratorService;\n+import com.faforever.client.mod.FeaturedMod;\n+import com.faforever.client.notification.NotificationService;\n+import com.faforever.client.preferences.GeneratorPrefs;\n+import com.faforever.client.preferences.PreferenceUpdateListener;\n+import com.faforever.client.preferences.PreferencesService;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.jfoenix.controls.JFXButton;\n+import com.jfoenix.controls.JFXTextField;\n+import javafx.application.Platform;\n+import javafx.collections.FXCollections;\n+import javafx.collections.transformation.FilteredList;\n+import javafx.scene.control.CheckBox;\n+import javafx.scene.control.MultipleSelectionModel;\n+import javafx.scene.control.Spinner;\n+import javafx.scene.control.Slider;\n+import javafx.scene.control.CheckBox;\n+import javafx.scene.control.SpinnerValueFactory.IntegerSpinnerValueFactory;\n+import javafx.scene.input.KeyCode;\n+import javafx.scene.layout.Pane;\n+import javafx.util.StringConverter;\n+import lombok.RequiredArgsConstructor;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+\n+import java.lang.invoke.MethodHandles;\n+import java.lang.ref.WeakReference;\n+import java.util.Objects;\n+import java.util.Random;\n+import java.util.function.Function;\n+\n+@Component\n+@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+@RequiredArgsConstructor\n+public class GenerateMapController implements Controller<Pane> {\n+\n+  private static final Logger logger = LoggerFactory.getLogger(MethodHandles.lookup().lookupClass());", "originalCommit": "4496f5f026ff3e89126867a698063d29a581f856", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUwOTc5Mg==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r446509792", "bodyText": "I am unclear what using @slf4j should replace if I remove the logger then what should be used on line 227?", "author": "Sheikah45", "createdAt": "2020-06-27T10:19:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUwMzg0Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUxMTYxNw==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r446511617", "bodyText": "https://projectlombok.org/api/lombok/extern/slf4j/Slf4j.html", "author": "1-alex98", "createdAt": "2020-06-27T10:43:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUwMzg0Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU0MzQzOQ==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r446543439", "bodyText": "Done", "author": "Sheikah45", "createdAt": "2020-06-27T16:36:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUwMzg0Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUwMzg4NA==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r446503884", "bodyText": "Use Button and TextField. At least in the Controller", "author": "1-alex98", "createdAt": "2020-06-27T09:03:20Z", "path": "src/main/java/com/faforever/client/game/GenerateMapController.java", "diffHunk": "@@ -0,0 +1,241 @@\n+package com.faforever.client.game;\n+\n+import com.faforever.client.fx.Controller;\n+import com.faforever.client.fx.DualStringListCell;\n+import com.faforever.client.fx.JavaFxUtil;\n+import com.faforever.client.map.MapBean;\n+import com.faforever.client.map.generator.MapGeneratorService;\n+import com.faforever.client.mod.FeaturedMod;\n+import com.faforever.client.notification.NotificationService;\n+import com.faforever.client.preferences.GeneratorPrefs;\n+import com.faforever.client.preferences.PreferenceUpdateListener;\n+import com.faforever.client.preferences.PreferencesService;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.jfoenix.controls.JFXButton;\n+import com.jfoenix.controls.JFXTextField;\n+import javafx.application.Platform;\n+import javafx.collections.FXCollections;\n+import javafx.collections.transformation.FilteredList;\n+import javafx.scene.control.CheckBox;\n+import javafx.scene.control.MultipleSelectionModel;\n+import javafx.scene.control.Spinner;\n+import javafx.scene.control.Slider;\n+import javafx.scene.control.CheckBox;\n+import javafx.scene.control.SpinnerValueFactory.IntegerSpinnerValueFactory;\n+import javafx.scene.input.KeyCode;\n+import javafx.scene.layout.Pane;\n+import javafx.util.StringConverter;\n+import lombok.RequiredArgsConstructor;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+\n+import java.lang.invoke.MethodHandles;\n+import java.lang.ref.WeakReference;\n+import java.util.Objects;\n+import java.util.Random;\n+import java.util.function.Function;\n+\n+@Component\n+@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+@RequiredArgsConstructor\n+public class GenerateMapController implements Controller<Pane> {\n+\n+  private static final Logger logger = LoggerFactory.getLogger(MethodHandles.lookup().lookupClass());\n+  private final PreferencesService preferencesService;\n+  private final NotificationService notificationService;\n+  private final MapGeneratorService mapGeneratorService;\n+  public CreateGameController createGameController;\n+  public Pane generateMapRoot;\n+  public JFXButton generateMapButton;\n+  public JFXTextField previousMapName;", "originalCommit": "4496f5f026ff3e89126867a698063d29a581f856", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUwOTY4MQ==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r446509681", "bodyText": "Done", "author": "Sheikah45", "createdAt": "2020-06-27T10:17:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUwMzg4NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUwNDEyOQ==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r446504129", "bodyText": "Never change other language files", "author": "1-alex98", "createdAt": "2020-06-27T09:06:39Z", "path": "src/main/resources/i18n/messages_cs.properties", "diffHunk": "@@ -632,7 +632,7 @@ view.showSidePane=V\u00edce detail\u016f\n view.hideSidePane=M\u00e9n\u011b detail\u016f\n menu.revealReplayFolder=Otev\u0159\u00edt slo\u017eku se z\u00e1znamy\n menu.revealGamePrefsFile=Otev\u0159\u00edt slo\u017eku s game.prefs souborem\n-game.create.generatedMap=Vytvo\u0159it mapu\n+game.generate=Vytvo\u0159it mapu", "originalCommit": "4496f5f026ff3e89126867a698063d29a581f856", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUwOTY5NA==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r446509694", "bodyText": "Reverted all other language files", "author": "Sheikah45", "createdAt": "2020-06-27T10:18:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUwNDEyOQ=="}], "type": "inlineReview"}, {"oid": "3944e033d992d0f59cf00fcf0d25162457230414", "url": "https://github.com/FAForever/downlords-faf-client/commit/3944e033d992d0f59cf00fcf0d25162457230414", "message": "Add promptText in map Name field", "committedDate": "2020-06-27T16:45:38Z", "type": "forcePushed"}, {"oid": "73693dce16a21a72c922930d6928c0cae6087a5c", "url": "https://github.com/FAForever/downlords-faf-client/commit/73693dce16a21a72c922930d6928c0cae6087a5c", "message": "Remove unused default values", "committedDate": "2020-06-28T12:47:54Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY0OTYzNQ==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r446649635", "bodyText": "unused, try turning on the option when commiting that removes unused imports", "author": "1-alex98", "createdAt": "2020-06-28T13:14:07Z", "path": "src/main/java/com/faforever/client/game/CreateGameController.java", "diffHunk": "@@ -26,6 +26,7 @@\n import com.google.common.annotations.VisibleForTesting;\n import com.google.common.base.Strings;\n import com.jfoenix.controls.JFXButton;\n+import com.jfoenix.controls.JFXDialog;", "originalCommit": "73693dce16a21a72c922930d6928c0cae6087a5c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY1Mzg3MQ==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r446653871", "bodyText": "Done", "author": "Sheikah45", "createdAt": "2020-06-28T13:52:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY0OTYzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIxOTEwOA==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r448219108", "bodyText": "Not done", "author": "1-alex98", "createdAt": "2020-07-01T08:56:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY0OTYzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODI5NTA0Mw==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r448295043", "bodyText": "The JFXDialog is used by uiService.showInDialog on line 406 which I thought we were going to leave in if not I can try to find a way to remove it.", "author": "Sheikah45", "createdAt": "2020-07-01T11:20:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY0OTYzNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY0OTk1MA==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r446649950", "bodyText": "remove", "author": "1-alex98", "createdAt": "2020-06-28T13:16:45Z", "path": "src/main/java/com/faforever/client/game/GenerateMapController.java", "diffHunk": "@@ -0,0 +1,233 @@\n+package com.faforever.client.game;\n+\n+import com.faforever.client.fx.Controller;\n+import com.faforever.client.fx.DualStringListCell;\n+import com.faforever.client.fx.JavaFxUtil;\n+import com.faforever.client.map.MapBean;\n+import com.faforever.client.map.generator.MapGeneratorService;\n+import com.faforever.client.mod.FeaturedMod;\n+import com.faforever.client.notification.NotificationService;\n+import com.faforever.client.preferences.GeneratorPrefs;\n+import com.faforever.client.preferences.PreferenceUpdateListener;\n+import com.faforever.client.preferences.PreferencesService;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.jfoenix.controls.JFXButton;\n+import com.jfoenix.controls.JFXTextField;", "originalCommit": "73693dce16a21a72c922930d6928c0cae6087a5c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY1Mzg1NA==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r446653854", "bodyText": "Done", "author": "Sheikah45", "createdAt": "2020-06-28T13:52:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY0OTk1MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY1MDExOQ==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r446650119", "bodyText": "ident", "author": "1-alex98", "createdAt": "2020-06-28T13:18:25Z", "path": "src/main/java/com/faforever/client/game/GenerateMapController.java", "diffHunk": "@@ -0,0 +1,233 @@\n+package com.faforever.client.game;\n+\n+import com.faforever.client.fx.Controller;\n+import com.faforever.client.fx.DualStringListCell;\n+import com.faforever.client.fx.JavaFxUtil;\n+import com.faforever.client.map.MapBean;\n+import com.faforever.client.map.generator.MapGeneratorService;\n+import com.faforever.client.mod.FeaturedMod;\n+import com.faforever.client.notification.NotificationService;\n+import com.faforever.client.preferences.GeneratorPrefs;\n+import com.faforever.client.preferences.PreferenceUpdateListener;\n+import com.faforever.client.preferences.PreferencesService;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.jfoenix.controls.JFXButton;\n+import com.jfoenix.controls.JFXTextField;\n+import javafx.application.Platform;\n+import javafx.collections.FXCollections;\n+import javafx.collections.transformation.FilteredList;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.CheckBox;\n+import javafx.scene.control.MultipleSelectionModel;\n+import javafx.scene.control.Spinner;\n+import javafx.scene.control.Slider;\n+import javafx.scene.control.CheckBox;\n+import javafx.scene.control.SpinnerValueFactory.IntegerSpinnerValueFactory;\n+import javafx.scene.control.TextField;\n+import javafx.scene.input.KeyCode;\n+import javafx.scene.layout.Pane;\n+import javafx.util.StringConverter;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+\n+import java.lang.invoke.MethodHandles;\n+import java.lang.ref.WeakReference;\n+import java.util.Objects;\n+import java.util.Random;\n+import java.util.function.Function;\n+\n+@Component\n+@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+@RequiredArgsConstructor\n+@Slf4j\n+public class GenerateMapController implements Controller<Pane> {\n+\n+  private final PreferencesService preferencesService;\n+  private final NotificationService notificationService;\n+  private final MapGeneratorService mapGeneratorService;\n+  public CreateGameController createGameController;\n+  public Pane generateMapRoot;\n+  public Button generateMapButton;\n+  public TextField previousMapName;\n+  public Spinner<Integer> spawnCountSpinner;\n+  public Slider waterSlider;\n+  public CheckBox waterRandom;\n+  public Slider mountainSlider;\n+  public CheckBox mountainRandom;\n+  public Slider plateauSlider;\n+  public CheckBox plateauRandom;\n+  public Slider rampSlider;\n+  public CheckBox rampRandom;\n+  @VisibleForTesting\n+  FilteredList<MapBean> filteredMapBeans;\n+  private Runnable onCloseButtonClickedListener;\n+  private PreferenceUpdateListener preferenceUpdateListener;\n+\n+  /**\n+   * Remembers if the controller's init method was called, to avoid memory leaks by adding several listeners\n+   */\n+  private boolean initialized;\n+\n+  public void initialize() {\n+    init();\n+  }\n+\n+  private void init() {\n+    initSpawnCountSpinner();\n+    initWaterSlider();\n+    initPlateauSlider();\n+    initMountainSlider();\n+    initRampSlider();\n+  }\n+\n+  private void initSpawnCountSpinner() {\n+    GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n+    int spawnCountProperty = generatorPrefs.getSpawnCountProperty();\n+    spawnCountSpinner.setValueFactory(new IntegerSpinnerValueFactory(2, 16, spawnCountProperty, 2));\n+    spawnCountSpinner.getValueFactory().valueProperty().addListener((observable, oldValue, newValue) -> {\n+      generatorPrefs.setSpawnCountProperty(newValue);\n+      preferencesService.storeInBackground();\n+    });\n+  }\n+\n+  private StringConverter<Double> getLabelConverter(){\n+    return new StringConverter<Double>() {\n+      @Override\n+      public String toString(Double n) {\n+        if (n < 127) return \"None\";\n+        return \"Lots\";\n+      }\n+      @Override\n+      public Double fromString(String s) {\n+        if (s.equals(\"None\")){return 0d;}\n+        return 127d;\n+      }\n+    };\n+  }\n+\n+  private void initWaterSlider() {\n+    GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n+    double waterDensityProperty = generatorPrefs.getWaterDensityProperty();\n+    boolean waterRandomProperty = generatorPrefs.getWaterRandomProperty();\n+    waterSlider.setLabelFormatter(getLabelConverter());\n+    waterRandom.setSelected(waterRandomProperty);\n+    waterRandom.selectedProperty().addListener(((observable, oldValue, newValue) -> {generatorPrefs.setWaterRandomProperty(newValue);\n+    waterSlider.setVisible(!newValue);}));\n+    waterSlider.setVisible(!waterRandomProperty);\n+    waterSlider.setValue(waterDensityProperty);\n+    waterSlider.valueProperty().addListener(((observable, oldValue, newValue) -> {generatorPrefs.setWaterDensityProperty(newValue.intValue());\n+    preferencesService.storeInBackground();}));\n+  }\n+\n+  private void initPlateauSlider() {\n+    GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n+    double plateauDensityProperty = generatorPrefs.getPlateauDensityProperty();\n+    boolean plateauRandomProperty = generatorPrefs.getPlateauRandomProperty();\n+    plateauSlider.setLabelFormatter(getLabelConverter());\n+    plateauRandom.setSelected(plateauRandomProperty);\n+    plateauRandom.selectedProperty().addListener(((observable, oldValue, newValue) -> {generatorPrefs.setPlateauRandomProperty(newValue);\n+      plateauSlider.setVisible(!newValue);}));\n+    plateauSlider.setVisible(!plateauRandomProperty);\n+    plateauSlider.setValue(plateauDensityProperty);\n+    plateauSlider.valueProperty().addListener(((observable, oldValue, newValue) -> {generatorPrefs.setPlateauDensityProperty(newValue.intValue());\n+      preferencesService.storeInBackground();}));\n+  }\n+\n+  private void initMountainSlider() {\n+    GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n+    double mountainDensityProperty = generatorPrefs.getMountainDensityProperty();\n+    boolean mountainRandomProperty = generatorPrefs.getMountainRandomProperty();\n+    mountainSlider.setLabelFormatter(getLabelConverter());\n+    mountainRandom.setSelected(mountainRandomProperty);\n+    mountainRandom.selectedProperty().addListener(((observable, oldValue, newValue) -> {generatorPrefs.setMountainRandomProperty(newValue);\n+      mountainSlider.setVisible(!newValue);}));\n+    mountainSlider.setVisible(!mountainRandomProperty);\n+    mountainSlider.setValue(mountainDensityProperty);\n+    mountainSlider.valueProperty().addListener(((observable, oldValue, newValue) -> {generatorPrefs.setMountainDensityProperty(newValue.intValue());\n+      preferencesService.storeInBackground();}));\n+  }\n+\n+  private void initRampSlider() {\n+    GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n+    double rampDensityProperty = generatorPrefs.getRampDensityProperty();\n+    boolean rampRandomProperty = generatorPrefs.getRampRandomProperty();\n+    rampSlider.setLabelFormatter(getLabelConverter());\n+    rampRandom.setSelected(rampRandomProperty);\n+    rampRandom.selectedProperty().addListener(((observable, oldValue, newValue) -> {generatorPrefs.setRampRandomProperty(newValue);\n+      rampSlider.setVisible(!newValue);}));\n+    rampSlider.setVisible(!rampRandomProperty);\n+    rampSlider.setValue(rampDensityProperty);\n+    rampSlider.valueProperty().addListener(((observable, oldValue, newValue) -> {generatorPrefs.setRampDensityProperty(newValue.intValue());\n+      preferencesService.storeInBackground();}));\n+  }\n+\n+  private byte getSliderValue(Slider slider, CheckBox checkBox) {\n+    if (checkBox.isSelected()){\n+      return (byte) new Random().nextInt(127);\n+    }\n+    return (byte) slider.getValue();\n+  }\n+\n+  public void onCloseButtonClicked() {\n+    onCloseButtonClickedListener.run();\n+  }\n+\n+  public void onGenerateMapButtonClicked() {\n+    try {\n+      if (!previousMapName.getText().isEmpty()){\n+        mapGeneratorService.generateMap(previousMapName.getText()).thenAccept(mapName -> {\n+          Platform.runLater(() -> {\n+            createGameController.initMapSelection();\n+            createGameController.mapListView.getItems().stream()\n+                .filter(mapBean -> mapBean.getFolderName().equalsIgnoreCase(mapName))\n+                .findAny().ifPresent(mapBean -> {\n+              createGameController.mapListView.getSelectionModel().select(mapBean);\n+              createGameController.mapListView.scrollTo(mapBean);\n+              createGameController.setSelectedMap(mapBean);\n+            });", "originalCommit": "73693dce16a21a72c922930d6928c0cae6087a5c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY1MzgxOQ==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r446653819", "bodyText": "Done", "author": "Sheikah45", "createdAt": "2020-06-28T13:52:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY1MDExOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY1MDE1NQ==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r446650155", "bodyText": "Byte.MAX_VALUE that exists right?", "author": "1-alex98", "createdAt": "2020-06-28T13:18:50Z", "path": "src/main/java/com/faforever/client/game/GenerateMapController.java", "diffHunk": "@@ -0,0 +1,233 @@\n+package com.faforever.client.game;\n+\n+import com.faforever.client.fx.Controller;\n+import com.faforever.client.fx.DualStringListCell;\n+import com.faforever.client.fx.JavaFxUtil;\n+import com.faforever.client.map.MapBean;\n+import com.faforever.client.map.generator.MapGeneratorService;\n+import com.faforever.client.mod.FeaturedMod;\n+import com.faforever.client.notification.NotificationService;\n+import com.faforever.client.preferences.GeneratorPrefs;\n+import com.faforever.client.preferences.PreferenceUpdateListener;\n+import com.faforever.client.preferences.PreferencesService;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.jfoenix.controls.JFXButton;\n+import com.jfoenix.controls.JFXTextField;\n+import javafx.application.Platform;\n+import javafx.collections.FXCollections;\n+import javafx.collections.transformation.FilteredList;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.CheckBox;\n+import javafx.scene.control.MultipleSelectionModel;\n+import javafx.scene.control.Spinner;\n+import javafx.scene.control.Slider;\n+import javafx.scene.control.CheckBox;\n+import javafx.scene.control.SpinnerValueFactory.IntegerSpinnerValueFactory;\n+import javafx.scene.control.TextField;\n+import javafx.scene.input.KeyCode;\n+import javafx.scene.layout.Pane;\n+import javafx.util.StringConverter;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+\n+import java.lang.invoke.MethodHandles;\n+import java.lang.ref.WeakReference;\n+import java.util.Objects;\n+import java.util.Random;\n+import java.util.function.Function;\n+\n+@Component\n+@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+@RequiredArgsConstructor\n+@Slf4j\n+public class GenerateMapController implements Controller<Pane> {\n+\n+  private final PreferencesService preferencesService;\n+  private final NotificationService notificationService;\n+  private final MapGeneratorService mapGeneratorService;\n+  public CreateGameController createGameController;\n+  public Pane generateMapRoot;\n+  public Button generateMapButton;\n+  public TextField previousMapName;\n+  public Spinner<Integer> spawnCountSpinner;\n+  public Slider waterSlider;\n+  public CheckBox waterRandom;\n+  public Slider mountainSlider;\n+  public CheckBox mountainRandom;\n+  public Slider plateauSlider;\n+  public CheckBox plateauRandom;\n+  public Slider rampSlider;\n+  public CheckBox rampRandom;\n+  @VisibleForTesting\n+  FilteredList<MapBean> filteredMapBeans;\n+  private Runnable onCloseButtonClickedListener;\n+  private PreferenceUpdateListener preferenceUpdateListener;\n+\n+  /**\n+   * Remembers if the controller's init method was called, to avoid memory leaks by adding several listeners\n+   */\n+  private boolean initialized;\n+\n+  public void initialize() {\n+    init();\n+  }\n+\n+  private void init() {\n+    initSpawnCountSpinner();\n+    initWaterSlider();\n+    initPlateauSlider();\n+    initMountainSlider();\n+    initRampSlider();\n+  }\n+\n+  private void initSpawnCountSpinner() {\n+    GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n+    int spawnCountProperty = generatorPrefs.getSpawnCountProperty();\n+    spawnCountSpinner.setValueFactory(new IntegerSpinnerValueFactory(2, 16, spawnCountProperty, 2));\n+    spawnCountSpinner.getValueFactory().valueProperty().addListener((observable, oldValue, newValue) -> {\n+      generatorPrefs.setSpawnCountProperty(newValue);\n+      preferencesService.storeInBackground();\n+    });\n+  }\n+\n+  private StringConverter<Double> getLabelConverter(){\n+    return new StringConverter<Double>() {\n+      @Override\n+      public String toString(Double n) {\n+        if (n < 127) return \"None\";\n+        return \"Lots\";\n+      }\n+      @Override\n+      public Double fromString(String s) {\n+        if (s.equals(\"None\")){return 0d;}\n+        return 127d;\n+      }\n+    };\n+  }\n+\n+  private void initWaterSlider() {\n+    GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n+    double waterDensityProperty = generatorPrefs.getWaterDensityProperty();\n+    boolean waterRandomProperty = generatorPrefs.getWaterRandomProperty();\n+    waterSlider.setLabelFormatter(getLabelConverter());\n+    waterRandom.setSelected(waterRandomProperty);\n+    waterRandom.selectedProperty().addListener(((observable, oldValue, newValue) -> {generatorPrefs.setWaterRandomProperty(newValue);\n+    waterSlider.setVisible(!newValue);}));\n+    waterSlider.setVisible(!waterRandomProperty);\n+    waterSlider.setValue(waterDensityProperty);\n+    waterSlider.valueProperty().addListener(((observable, oldValue, newValue) -> {generatorPrefs.setWaterDensityProperty(newValue.intValue());\n+    preferencesService.storeInBackground();}));\n+  }\n+\n+  private void initPlateauSlider() {\n+    GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n+    double plateauDensityProperty = generatorPrefs.getPlateauDensityProperty();\n+    boolean plateauRandomProperty = generatorPrefs.getPlateauRandomProperty();\n+    plateauSlider.setLabelFormatter(getLabelConverter());\n+    plateauRandom.setSelected(plateauRandomProperty);\n+    plateauRandom.selectedProperty().addListener(((observable, oldValue, newValue) -> {generatorPrefs.setPlateauRandomProperty(newValue);\n+      plateauSlider.setVisible(!newValue);}));\n+    plateauSlider.setVisible(!plateauRandomProperty);\n+    plateauSlider.setValue(plateauDensityProperty);\n+    plateauSlider.valueProperty().addListener(((observable, oldValue, newValue) -> {generatorPrefs.setPlateauDensityProperty(newValue.intValue());\n+      preferencesService.storeInBackground();}));\n+  }\n+\n+  private void initMountainSlider() {\n+    GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n+    double mountainDensityProperty = generatorPrefs.getMountainDensityProperty();\n+    boolean mountainRandomProperty = generatorPrefs.getMountainRandomProperty();\n+    mountainSlider.setLabelFormatter(getLabelConverter());\n+    mountainRandom.setSelected(mountainRandomProperty);\n+    mountainRandom.selectedProperty().addListener(((observable, oldValue, newValue) -> {generatorPrefs.setMountainRandomProperty(newValue);\n+      mountainSlider.setVisible(!newValue);}));\n+    mountainSlider.setVisible(!mountainRandomProperty);\n+    mountainSlider.setValue(mountainDensityProperty);\n+    mountainSlider.valueProperty().addListener(((observable, oldValue, newValue) -> {generatorPrefs.setMountainDensityProperty(newValue.intValue());\n+      preferencesService.storeInBackground();}));\n+  }\n+\n+  private void initRampSlider() {\n+    GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n+    double rampDensityProperty = generatorPrefs.getRampDensityProperty();\n+    boolean rampRandomProperty = generatorPrefs.getRampRandomProperty();\n+    rampSlider.setLabelFormatter(getLabelConverter());\n+    rampRandom.setSelected(rampRandomProperty);\n+    rampRandom.selectedProperty().addListener(((observable, oldValue, newValue) -> {generatorPrefs.setRampRandomProperty(newValue);\n+      rampSlider.setVisible(!newValue);}));\n+    rampSlider.setVisible(!rampRandomProperty);\n+    rampSlider.setValue(rampDensityProperty);\n+    rampSlider.valueProperty().addListener(((observable, oldValue, newValue) -> {generatorPrefs.setRampDensityProperty(newValue.intValue());\n+      preferencesService.storeInBackground();}));\n+  }\n+\n+  private byte getSliderValue(Slider slider, CheckBox checkBox) {\n+    if (checkBox.isSelected()){\n+      return (byte) new Random().nextInt(127);\n+    }\n+    return (byte) slider.getValue();\n+  }\n+\n+  public void onCloseButtonClicked() {\n+    onCloseButtonClickedListener.run();\n+  }\n+\n+  public void onGenerateMapButtonClicked() {\n+    try {\n+      if (!previousMapName.getText().isEmpty()){\n+        mapGeneratorService.generateMap(previousMapName.getText()).thenAccept(mapName -> {\n+          Platform.runLater(() -> {\n+            createGameController.initMapSelection();\n+            createGameController.mapListView.getItems().stream()\n+                .filter(mapBean -> mapBean.getFolderName().equalsIgnoreCase(mapName))\n+                .findAny().ifPresent(mapBean -> {\n+              createGameController.mapListView.getSelectionModel().select(mapBean);\n+              createGameController.mapListView.scrollTo(mapBean);\n+              createGameController.setSelectedMap(mapBean);\n+            });\n+          });\n+        });\n+      } else {\n+        byte spawnCount = spawnCountSpinner.getValue().byteValue();\n+        byte landDensity = (byte) (127 - getSliderValue(waterSlider, waterRandom));", "originalCommit": "73693dce16a21a72c922930d6928c0cae6087a5c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY1MzgwMA==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r446653800", "bodyText": "Changed", "author": "Sheikah45", "createdAt": "2020-06-28T13:52:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY1MDE1NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY1MDIzNw==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r446650237", "bodyText": "indent", "author": "1-alex98", "createdAt": "2020-06-28T13:19:30Z", "path": "src/main/java/com/faforever/client/game/GenerateMapController.java", "diffHunk": "@@ -0,0 +1,233 @@\n+package com.faforever.client.game;\n+\n+import com.faforever.client.fx.Controller;\n+import com.faforever.client.fx.DualStringListCell;\n+import com.faforever.client.fx.JavaFxUtil;\n+import com.faforever.client.map.MapBean;\n+import com.faforever.client.map.generator.MapGeneratorService;\n+import com.faforever.client.mod.FeaturedMod;\n+import com.faforever.client.notification.NotificationService;\n+import com.faforever.client.preferences.GeneratorPrefs;\n+import com.faforever.client.preferences.PreferenceUpdateListener;\n+import com.faforever.client.preferences.PreferencesService;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.jfoenix.controls.JFXButton;\n+import com.jfoenix.controls.JFXTextField;\n+import javafx.application.Platform;\n+import javafx.collections.FXCollections;\n+import javafx.collections.transformation.FilteredList;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.CheckBox;\n+import javafx.scene.control.MultipleSelectionModel;\n+import javafx.scene.control.Spinner;\n+import javafx.scene.control.Slider;\n+import javafx.scene.control.CheckBox;\n+import javafx.scene.control.SpinnerValueFactory.IntegerSpinnerValueFactory;\n+import javafx.scene.control.TextField;\n+import javafx.scene.input.KeyCode;\n+import javafx.scene.layout.Pane;\n+import javafx.util.StringConverter;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+\n+import java.lang.invoke.MethodHandles;\n+import java.lang.ref.WeakReference;\n+import java.util.Objects;\n+import java.util.Random;\n+import java.util.function.Function;\n+\n+@Component\n+@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+@RequiredArgsConstructor\n+@Slf4j\n+public class GenerateMapController implements Controller<Pane> {\n+\n+  private final PreferencesService preferencesService;\n+  private final NotificationService notificationService;\n+  private final MapGeneratorService mapGeneratorService;\n+  public CreateGameController createGameController;\n+  public Pane generateMapRoot;\n+  public Button generateMapButton;\n+  public TextField previousMapName;\n+  public Spinner<Integer> spawnCountSpinner;\n+  public Slider waterSlider;\n+  public CheckBox waterRandom;\n+  public Slider mountainSlider;\n+  public CheckBox mountainRandom;\n+  public Slider plateauSlider;\n+  public CheckBox plateauRandom;\n+  public Slider rampSlider;\n+  public CheckBox rampRandom;\n+  @VisibleForTesting\n+  FilteredList<MapBean> filteredMapBeans;\n+  private Runnable onCloseButtonClickedListener;\n+  private PreferenceUpdateListener preferenceUpdateListener;\n+\n+  /**\n+   * Remembers if the controller's init method was called, to avoid memory leaks by adding several listeners\n+   */\n+  private boolean initialized;\n+\n+  public void initialize() {\n+    init();\n+  }\n+\n+  private void init() {\n+    initSpawnCountSpinner();\n+    initWaterSlider();\n+    initPlateauSlider();\n+    initMountainSlider();\n+    initRampSlider();\n+  }\n+\n+  private void initSpawnCountSpinner() {\n+    GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n+    int spawnCountProperty = generatorPrefs.getSpawnCountProperty();\n+    spawnCountSpinner.setValueFactory(new IntegerSpinnerValueFactory(2, 16, spawnCountProperty, 2));\n+    spawnCountSpinner.getValueFactory().valueProperty().addListener((observable, oldValue, newValue) -> {\n+      generatorPrefs.setSpawnCountProperty(newValue);\n+      preferencesService.storeInBackground();\n+    });\n+  }\n+\n+  private StringConverter<Double> getLabelConverter(){\n+    return new StringConverter<Double>() {\n+      @Override\n+      public String toString(Double n) {\n+        if (n < 127) return \"None\";\n+        return \"Lots\";\n+      }\n+      @Override\n+      public Double fromString(String s) {\n+        if (s.equals(\"None\")){return 0d;}\n+        return 127d;\n+      }\n+    };\n+  }\n+\n+  private void initWaterSlider() {\n+    GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n+    double waterDensityProperty = generatorPrefs.getWaterDensityProperty();\n+    boolean waterRandomProperty = generatorPrefs.getWaterRandomProperty();\n+    waterSlider.setLabelFormatter(getLabelConverter());\n+    waterRandom.setSelected(waterRandomProperty);\n+    waterRandom.selectedProperty().addListener(((observable, oldValue, newValue) -> {generatorPrefs.setWaterRandomProperty(newValue);\n+    waterSlider.setVisible(!newValue);}));\n+    waterSlider.setVisible(!waterRandomProperty);\n+    waterSlider.setValue(waterDensityProperty);\n+    waterSlider.valueProperty().addListener(((observable, oldValue, newValue) -> {generatorPrefs.setWaterDensityProperty(newValue.intValue());\n+    preferencesService.storeInBackground();}));\n+  }\n+\n+  private void initPlateauSlider() {\n+    GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n+    double plateauDensityProperty = generatorPrefs.getPlateauDensityProperty();\n+    boolean plateauRandomProperty = generatorPrefs.getPlateauRandomProperty();\n+    plateauSlider.setLabelFormatter(getLabelConverter());\n+    plateauRandom.setSelected(plateauRandomProperty);\n+    plateauRandom.selectedProperty().addListener(((observable, oldValue, newValue) -> {generatorPrefs.setPlateauRandomProperty(newValue);\n+      plateauSlider.setVisible(!newValue);}));\n+    plateauSlider.setVisible(!plateauRandomProperty);\n+    plateauSlider.setValue(plateauDensityProperty);\n+    plateauSlider.valueProperty().addListener(((observable, oldValue, newValue) -> {generatorPrefs.setPlateauDensityProperty(newValue.intValue());\n+      preferencesService.storeInBackground();}));\n+  }\n+\n+  private void initMountainSlider() {\n+    GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n+    double mountainDensityProperty = generatorPrefs.getMountainDensityProperty();\n+    boolean mountainRandomProperty = generatorPrefs.getMountainRandomProperty();\n+    mountainSlider.setLabelFormatter(getLabelConverter());\n+    mountainRandom.setSelected(mountainRandomProperty);\n+    mountainRandom.selectedProperty().addListener(((observable, oldValue, newValue) -> {generatorPrefs.setMountainRandomProperty(newValue);\n+      mountainSlider.setVisible(!newValue);}));\n+    mountainSlider.setVisible(!mountainRandomProperty);\n+    mountainSlider.setValue(mountainDensityProperty);\n+    mountainSlider.valueProperty().addListener(((observable, oldValue, newValue) -> {generatorPrefs.setMountainDensityProperty(newValue.intValue());\n+      preferencesService.storeInBackground();}));\n+  }\n+\n+  private void initRampSlider() {\n+    GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n+    double rampDensityProperty = generatorPrefs.getRampDensityProperty();\n+    boolean rampRandomProperty = generatorPrefs.getRampRandomProperty();\n+    rampSlider.setLabelFormatter(getLabelConverter());\n+    rampRandom.setSelected(rampRandomProperty);\n+    rampRandom.selectedProperty().addListener(((observable, oldValue, newValue) -> {generatorPrefs.setRampRandomProperty(newValue);\n+      rampSlider.setVisible(!newValue);}));\n+    rampSlider.setVisible(!rampRandomProperty);\n+    rampSlider.setValue(rampDensityProperty);\n+    rampSlider.valueProperty().addListener(((observable, oldValue, newValue) -> {generatorPrefs.setRampDensityProperty(newValue.intValue());\n+      preferencesService.storeInBackground();}));\n+  }\n+\n+  private byte getSliderValue(Slider slider, CheckBox checkBox) {\n+    if (checkBox.isSelected()){\n+      return (byte) new Random().nextInt(127);\n+    }\n+    return (byte) slider.getValue();\n+  }\n+\n+  public void onCloseButtonClicked() {\n+    onCloseButtonClickedListener.run();\n+  }\n+\n+  public void onGenerateMapButtonClicked() {\n+    try {\n+      if (!previousMapName.getText().isEmpty()){\n+        mapGeneratorService.generateMap(previousMapName.getText()).thenAccept(mapName -> {\n+          Platform.runLater(() -> {\n+            createGameController.initMapSelection();\n+            createGameController.mapListView.getItems().stream()\n+                .filter(mapBean -> mapBean.getFolderName().equalsIgnoreCase(mapName))\n+                .findAny().ifPresent(mapBean -> {\n+              createGameController.mapListView.getSelectionModel().select(mapBean);\n+              createGameController.mapListView.scrollTo(mapBean);\n+              createGameController.setSelectedMap(mapBean);\n+            });\n+          });\n+        });\n+      } else {\n+        byte spawnCount = spawnCountSpinner.getValue().byteValue();\n+        byte landDensity = (byte) (127 - getSliderValue(waterSlider, waterRandom));\n+        byte plateauDensity = getSliderValue(plateauSlider, plateauRandom);\n+        byte mountainDensity = getSliderValue(mountainSlider, mountainRandom);\n+        byte rampDensity = getSliderValue(rampSlider, rampRandom);\n+        byte[] optionArray = {spawnCount, landDensity, plateauDensity, mountainDensity, rampDensity};\n+        mapGeneratorService.generateMap(optionArray).thenAccept(mapName -> {\n+          Platform.runLater(() -> {\n+            createGameController.initMapSelection();\n+            createGameController.mapListView.getItems().stream()\n+                .filter(mapBean -> mapBean.getFolderName().equalsIgnoreCase(mapName))\n+                .findAny().ifPresent(mapBean -> {\n+              createGameController.mapListView.getSelectionModel().select(mapBean);\n+              createGameController.mapListView.scrollTo(mapBean);\n+              createGameController.setSelectedMap(mapBean);\n+            });", "originalCommit": "73693dce16a21a72c922930d6928c0cae6087a5c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY1MDI0Nw==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r446650247", "bodyText": "ctrl+alt+L", "author": "1-alex98", "createdAt": "2020-06-28T13:19:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY1MDIzNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY1NDE5Ng==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r446654196", "bodyText": "Done", "author": "Sheikah45", "createdAt": "2020-06-28T13:55:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY1MDIzNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY1MDM4MA==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r446650380", "bodyText": "Make them call each other and avoid code duplication", "author": "1-alex98", "createdAt": "2020-06-28T13:20:54Z", "path": "src/main/java/com/faforever/client/map/generator/MapGeneratorService.java", "diffHunk": "@@ -107,13 +119,40 @@ private void deleteGeneratedMaps() {\n     }\n   }\n \n-\n   public CompletableFuture<String> generateMap() {\n-    return generateMap(queryNewestVersion(), seedGenerator.nextLong());\n+    ByteBuffer seedBuffer = ByteBuffer.allocate(8);\n+    seedBuffer.putLong(seedGenerator.nextLong());\n+    String seedString = Base64.getEncoder().encodeToString(seedBuffer.array());\n+    return generateMap(generatorVersion,seedString);\n+  }\n+\n+  public CompletableFuture<String> generateMap(byte[] optionArray) {\n+    ByteBuffer seedBuffer = ByteBuffer.allocate(8);\n+    seedBuffer.putLong(seedGenerator.nextLong());\n+    String seedString = Base64.getEncoder().encodeToString(seedBuffer.array());\n+    String optionString = Base64.getEncoder().encodeToString(optionArray);\n+    return generateMap(generatorVersion,seedString+'_'+optionString);\n+  }\n+\n+  public CompletableFuture<String> generateMap(String version, byte[] optionArray) {\n+    ByteBuffer seedBuffer = ByteBuffer.allocate(8);\n+    seedBuffer.putLong(seedGenerator.nextLong());\n+    String seedString = Base64.getEncoder().encodeToString(seedBuffer.array());\n+    String optionString = Base64.getEncoder().encodeToString(optionArray);\n+    return generateMap(version,seedString+'_'+optionString);\n+  }\n+\n+  public CompletableFuture<String> generateMap(ComparableVersion version, byte[] optionArray) {\n+    ByteBuffer seedBuffer = ByteBuffer.allocate(8);\n+    seedBuffer.putLong(seedGenerator.nextLong());\n+    String seedString = Base64.getEncoder().encodeToString(seedBuffer.array());\n+    String optionString = Base64.getEncoder().encodeToString(optionArray);\n+    return generateMap(version,seedString+'_'+optionString);\n   }", "originalCommit": "73693dce16a21a72c922930d6928c0cae6087a5c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY1Mzc4NA==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r446653784", "bodyText": "Done", "author": "Sheikah45", "createdAt": "2020-06-28T13:51:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY1MDM4MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY1MDQ0NQ==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r446650445", "bodyText": "Make sue this is only ever called via a Spring Proxy", "author": "1-alex98", "createdAt": "2020-06-28T13:21:39Z", "path": "src/main/java/com/faforever/client/map/generator/MapGeneratorService.java", "diffHunk": "@@ -107,13 +119,40 @@ private void deleteGeneratedMaps() {\n     }\n   }\n \n-\n   public CompletableFuture<String> generateMap() {\n-    return generateMap(queryNewestVersion(), seedGenerator.nextLong());\n+    ByteBuffer seedBuffer = ByteBuffer.allocate(8);\n+    seedBuffer.putLong(seedGenerator.nextLong());\n+    String seedString = Base64.getEncoder().encodeToString(seedBuffer.array());\n+    return generateMap(generatorVersion,seedString);\n+  }\n+\n+  public CompletableFuture<String> generateMap(byte[] optionArray) {\n+    ByteBuffer seedBuffer = ByteBuffer.allocate(8);\n+    seedBuffer.putLong(seedGenerator.nextLong());\n+    String seedString = Base64.getEncoder().encodeToString(seedBuffer.array());\n+    String optionString = Base64.getEncoder().encodeToString(optionArray);\n+    return generateMap(generatorVersion,seedString+'_'+optionString);\n+  }\n+\n+  public CompletableFuture<String> generateMap(String version, byte[] optionArray) {\n+    ByteBuffer seedBuffer = ByteBuffer.allocate(8);\n+    seedBuffer.putLong(seedGenerator.nextLong());\n+    String seedString = Base64.getEncoder().encodeToString(seedBuffer.array());\n+    String optionString = Base64.getEncoder().encodeToString(optionArray);\n+    return generateMap(version,seedString+'_'+optionString);\n+  }\n+\n+  public CompletableFuture<String> generateMap(ComparableVersion version, byte[] optionArray) {\n+    ByteBuffer seedBuffer = ByteBuffer.allocate(8);\n+    seedBuffer.putLong(seedGenerator.nextLong());\n+    String seedString = Base64.getEncoder().encodeToString(seedBuffer.array());\n+    String optionString = Base64.getEncoder().encodeToString(optionArray);\n+    return generateMap(version,seedString+'_'+optionString);\n   }\n \n   @VisibleForTesting\n-  protected String queryNewestVersion() {\n+  @Cacheable(CacheNames.MAP_GENERATOR)", "originalCommit": "73693dce16a21a72c922930d6928c0cae6087a5c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY1Mzc3Ng==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r446653776", "bodyText": "Should only be called by the bean", "author": "Sheikah45", "createdAt": "2020-06-28T13:51:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY1MDQ0NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY4ODg2MQ==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r446688861", "bodyText": "The hardcoded \"1\" needs at least a comment what is happening here.", "author": "Brutus5000", "createdAt": "2020-06-28T19:31:03Z", "path": "src/main/java/com/faforever/client/game/CreateGameController.java", "diffHunk": "@@ -375,23 +376,39 @@ public void onRandomMapButtonClicked() {\n     mapListView.scrollTo(mapIndex);\n   }\n \n-  public void onGenerateMapButtonClicked() {\n+  public void onGenerateMapButtonClicked(){\n+    onGenerateMap();\n+  }\n+\n+  private void onGenerateMap() {\n     try {\n-      mapGeneratorService.generateMap().thenAccept(mapName -> {\n-        Platform.runLater(() -> {\n-          initMapSelection();\n-          mapListView.getItems().stream()\n-              .filter(mapBean -> mapBean.getFolderName().equalsIgnoreCase(mapName))\n-              .findAny().ifPresent(mapBean -> {\n-            mapListView.getSelectionModel().select(mapBean);\n-            mapListView.scrollTo(mapBean);\n-            setSelectedMap(mapBean);\n+      mapGeneratorService.setGeneratorVersion(mapGeneratorService.queryMaxSupportedVersion());\n+      if (mapGeneratorService.getGeneratorVersion().compareTo(new ComparableVersion(\"1\")) < 0) {", "originalCommit": "4d402f05d45ad0e7acdf0e4ffb794aad0570eb97", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY5NTQ3Mg==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r446695472", "bodyText": "Done", "author": "Sheikah45", "createdAt": "2020-06-28T20:38:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY4ODg2MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY4ODg4Mg==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r446688882", "bodyText": "linebreak after .findAny()", "author": "Brutus5000", "createdAt": "2020-06-28T19:31:20Z", "path": "src/main/java/com/faforever/client/game/CreateGameController.java", "diffHunk": "@@ -375,23 +376,39 @@ public void onRandomMapButtonClicked() {\n     mapListView.scrollTo(mapIndex);\n   }\n \n-  public void onGenerateMapButtonClicked() {\n+  public void onGenerateMapButtonClicked(){\n+    onGenerateMap();\n+  }\n+\n+  private void onGenerateMap() {\n     try {\n-      mapGeneratorService.generateMap().thenAccept(mapName -> {\n-        Platform.runLater(() -> {\n-          initMapSelection();\n-          mapListView.getItems().stream()\n-              .filter(mapBean -> mapBean.getFolderName().equalsIgnoreCase(mapName))\n-              .findAny().ifPresent(mapBean -> {\n-            mapListView.getSelectionModel().select(mapBean);\n-            mapListView.scrollTo(mapBean);\n-            setSelectedMap(mapBean);\n+      mapGeneratorService.setGeneratorVersion(mapGeneratorService.queryMaxSupportedVersion());\n+      if (mapGeneratorService.getGeneratorVersion().compareTo(new ComparableVersion(\"1\")) < 0) {\n+        mapGeneratorService.generateMap().thenAccept(mapName -> {\n+          Platform.runLater(() -> {\n+            initMapSelection();\n+            mapListView.getItems().stream()\n+                .filter(mapBean -> mapBean.getFolderName().equalsIgnoreCase(mapName))\n+                .findAny().ifPresent(mapBean -> {", "originalCommit": "4d402f05d45ad0e7acdf0e4ffb794aad0570eb97", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjcxMjc3OQ==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r446712779", "bodyText": "Added", "author": "Sheikah45", "createdAt": "2020-06-28T23:36:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY4ODg4Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY4OTI5NQ==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r446689295", "bodyText": "This is never used?", "author": "Brutus5000", "createdAt": "2020-06-28T19:35:33Z", "path": "src/main/java/com/faforever/client/game/GenerateMapController.java", "diffHunk": "@@ -0,0 +1,257 @@\n+package com.faforever.client.game;\n+\n+import com.faforever.client.fx.Controller;\n+import com.faforever.client.map.MapBean;\n+import com.faforever.client.map.generator.MapGeneratorService;\n+import com.faforever.client.notification.NotificationService;\n+import com.faforever.client.preferences.GeneratorPrefs;\n+import com.faforever.client.preferences.PreferenceUpdateListener;\n+import com.faforever.client.preferences.PreferencesService;\n+import com.google.common.annotations.VisibleForTesting;\n+import javafx.application.Platform;\n+import javafx.collections.transformation.FilteredList;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.CheckBox;\n+import javafx.scene.control.Slider;\n+import javafx.scene.control.Spinner;\n+import javafx.scene.control.SpinnerValueFactory.IntegerSpinnerValueFactory;\n+import javafx.scene.control.TextField;\n+import javafx.scene.layout.Pane;\n+import javafx.util.StringConverter;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.Random;\n+\n+@Component\n+@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+@RequiredArgsConstructor\n+@Slf4j\n+public class GenerateMapController implements Controller<Pane> {\n+\n+  private final PreferencesService preferencesService;\n+  private final NotificationService notificationService;\n+  private final MapGeneratorService mapGeneratorService;\n+  public CreateGameController createGameController;\n+  public Pane generateMapRoot;\n+  public Button generateMapButton;\n+  public TextField previousMapName;\n+  public Spinner<Integer> spawnCountSpinner;\n+  public Slider waterSlider;\n+  public CheckBox waterRandom;\n+  public Slider mountainSlider;\n+  public CheckBox mountainRandom;\n+  public Slider plateauSlider;\n+  public CheckBox plateauRandom;\n+  public Slider rampSlider;\n+  public CheckBox rampRandom;\n+  @VisibleForTesting\n+  FilteredList<MapBean> filteredMapBeans;\n+  private Runnable onCloseButtonClickedListener;\n+  private PreferenceUpdateListener preferenceUpdateListener;\n+\n+  /**\n+   * Remembers if the controller's init method was called, to avoid memory leaks by adding several listeners\n+   */\n+  private boolean initialized;", "originalCommit": "4d402f05d45ad0e7acdf0e4ffb794aad0570eb97", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjcxMjgwNA==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r446712804", "bodyText": "Removed", "author": "Sheikah45", "createdAt": "2020-06-28T23:36:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY4OTI5NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY4OTY1OQ==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r446689659", "bodyText": "Is there a reason not to use jackson? You can configure a pojo to ignore unknown fields.", "author": "Brutus5000", "createdAt": "2020-06-28T19:39:16Z", "path": "src/main/java/com/faforever/client/map/generator/MapGeneratorService.java", "diffHunk": "@@ -124,26 +152,62 @@ protected String queryNewestVersion() {\n     JsonElement jsonElement = new JsonParser().parse(response.getBody());\n     JsonObject mainObject = jsonElement.getAsJsonObject();\n \n-    return mainObject.get(\"tag_name\").getAsString();\n+    return new ComparableVersion(mainObject.get(\"tag_name\").getAsString());\n+  }\n+\n+  @VisibleForTesting\n+  @Cacheable(CacheNames.MAP_GENERATOR)\n+  public ComparableVersion queryMaxSupportedVersion() {\n+    ComparableVersion version = new ComparableVersion(\"\");\n+    ComparableVersion minVersion = new ComparableVersion(String.valueOf(clientProperties.getMapGenerator().getMinSupportedMajorVersion()));\n+    ComparableVersion maxVersion = new ComparableVersion(String.valueOf(clientProperties.getMapGenerator().getMaxSupportedMajorVersion() + 1));\n+\n+    RestTemplate restTemplate = new RestTemplate();\n+\n+    LinkedMultiValueMap<String, String> headers = new LinkedMultiValueMap<>();\n+    headers.add(\"Accept\", \"application/vnd.github.v3+json\");\n+    HttpEntity<String> entity = new HttpEntity<>(null, headers);\n+\n+    ResponseEntity<String> response = restTemplate.exchange(clientProperties.getMapGenerator().getQueryVersionsUrl(), HttpMethod.GET, entity, String.class);\n+    JsonElement jsonElement = new JsonParser().parse(response.getBody());\n+    for (JsonElement element : jsonElement.getAsJsonArray()) {\n+      JsonObject mainObject = element.getAsJsonObject();\n+      version.parseVersion(mainObject.get(\"tag_name\").getAsString());\n+      if (version.compareTo(maxVersion) < 0 && minVersion.compareTo(version) < 0) {\n+        return version;\n+      }\n+    }", "originalCommit": "4d402f05d45ad0e7acdf0e4ffb794aad0570eb97", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY5NDg3OQ==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r446694879", "bodyText": "Yeah I am going to say the reason is that I have no idea what a jackson is.", "author": "Sheikah45", "createdAt": "2020-06-28T20:32:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY4OTY1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njc2NjY3Ng==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r446766676", "bodyText": "Oh. Jackson is the json de/serializer in Spring (https://github.com/FasterXML/jackson). Spring uses it by default e.g. if you call a RestTemplate, you tell Spring it needs to return a type T and Jackson will convert it to type T.\n(The client also uses Gson which is another json de/serializer by Google, but in the long run, everything should use Jackson).\nYou can get it via Dependency Injection. The class you need to ask for is an ObjectMapper.", "author": "Brutus5000", "createdAt": "2020-06-29T04:33:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY4OTY1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njc2ODA5Mg==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r446768092", "bodyText": "Alternatively you can ask the RestTemplate directly to return you the pojo you need. If it fails during runtime because it get more values than expected than put this as annotation on the pojo: @JsonIgnoreProperties(ignoreUnknown = true)", "author": "Brutus5000", "createdAt": "2020-06-29T04:39:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY4OTY1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzI3MjU4Mg==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r447272582", "bodyText": "Have it return from RestTemplate directly", "author": "Sheikah45", "createdAt": "2020-06-29T21:45:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY4OTY1OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY4OTc3NQ==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r446689775", "bodyText": "I'm not entirely sure what happens if you use the cache twice for the same type as the method has no arguments?!", "author": "Brutus5000", "createdAt": "2020-06-28T19:40:17Z", "path": "src/main/java/com/faforever/client/map/generator/MapGeneratorService.java", "diffHunk": "@@ -124,26 +152,62 @@ protected String queryNewestVersion() {\n     JsonElement jsonElement = new JsonParser().parse(response.getBody());\n     JsonObject mainObject = jsonElement.getAsJsonObject();\n \n-    return mainObject.get(\"tag_name\").getAsString();\n+    return new ComparableVersion(mainObject.get(\"tag_name\").getAsString());\n+  }\n+\n+  @VisibleForTesting\n+  @Cacheable(CacheNames.MAP_GENERATOR)", "originalCommit": "4d402f05d45ad0e7acdf0e4ffb794aad0570eb97", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY5NzQwOA==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r446697408", "bodyText": "Alright well I had left in the query newest version in case it could be used elsewhere but it is not used anywhere else so I removed it.", "author": "Sheikah45", "createdAt": "2020-06-28T20:57:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY4OTc3NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkwMjIwOA==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r449902208", "bodyText": "Could have used Bindings here :D", "author": "1-alex98", "createdAt": "2020-07-05T17:50:20Z", "path": "src/main/java/com/faforever/client/game/GenerateMapController.java", "diffHunk": "@@ -0,0 +1,246 @@\n+package com.faforever.client.game;\n+\n+import com.faforever.client.fx.Controller;\n+import com.faforever.client.map.generator.MapGeneratorService;\n+import com.faforever.client.notification.NotificationService;\n+import com.faforever.client.preferences.GeneratorPrefs;\n+import com.faforever.client.preferences.PreferencesService;\n+import javafx.application.Platform;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.CheckBox;\n+import javafx.scene.control.Slider;\n+import javafx.scene.control.Spinner;\n+import javafx.scene.control.SpinnerValueFactory.IntegerSpinnerValueFactory;\n+import javafx.scene.control.TextField;\n+import javafx.scene.layout.HBox;\n+import javafx.scene.layout.Pane;\n+import javafx.util.StringConverter;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.Random;\n+\n+@Component\n+@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+@RequiredArgsConstructor\n+@Slf4j\n+public class GenerateMapController implements Controller<Pane> {\n+\n+  private final PreferencesService preferencesService;\n+  private final NotificationService notificationService;\n+  private final MapGeneratorService mapGeneratorService;\n+  public CreateGameController createGameController;\n+  public Pane generateMapRoot;\n+  public Button generateMapButton;\n+  public TextField previousMapName;\n+  public Spinner<Integer> spawnCountSpinner;\n+  public Slider waterSlider;\n+  public CheckBox waterRandom;\n+  public HBox waterBox;\n+  public Slider mountainSlider;\n+  public CheckBox mountainRandom;\n+  public HBox mountainBox;\n+  public Slider plateauSlider;\n+  public CheckBox plateauRandom;\n+  public HBox plateauBox;\n+  public Slider rampSlider;\n+  public CheckBox rampRandom;\n+  public HBox rampBox;\n+  private Runnable onCloseButtonClickedListener;\n+\n+  public void initialize() {\n+    init();\n+  }\n+\n+  private void init() {\n+    initSpawnCountSpinner();\n+    initWaterSlider();\n+    initPlateauSlider();\n+    initMountainSlider();\n+    initRampSlider();\n+  }\n+\n+  private void initSpawnCountSpinner() {\n+    GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n+    int spawnCountProperty = generatorPrefs.getSpawnCountProperty();\n+    spawnCountSpinner.setValueFactory(new IntegerSpinnerValueFactory(2, 16, spawnCountProperty, 2));\n+    spawnCountSpinner.getValueFactory().valueProperty().addListener((observable, oldValue, newValue) -> {\n+      generatorPrefs.setSpawnCountProperty(newValue);\n+      preferencesService.storeInBackground();\n+    });\n+  }\n+\n+  private StringConverter<Double> getLabelConverter() {\n+    return new StringConverter<>() {\n+      @Override\n+      public String toString(Double n) {\n+        if (n < 127) {\n+          return \"None\";\n+        }\n+        return \"Lots\";\n+      }\n+\n+      @Override\n+      public Double fromString(String s) {\n+        if (s.equals(\"None\")) {\n+          return 0d;\n+        }\n+        return 127d;\n+      }\n+    };\n+  }\n+\n+  private void initWaterSlider() {\n+    GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n+    double waterDensityProperty = generatorPrefs.getWaterDensityProperty();\n+    boolean waterRandomProperty = generatorPrefs.getWaterRandomProperty();\n+    waterSlider.setLabelFormatter(getLabelConverter());\n+    waterRandom.setSelected(waterRandomProperty);\n+    waterRandom.selectedProperty().addListener(((observable, oldValue, newValue) -> {\n+      generatorPrefs.setWaterRandomProperty(newValue);\n+      waterBox.setVisible(!newValue);\n+    }));\n+    waterBox.setVisible(!waterRandomProperty);\n+    waterSlider.setValue(waterDensityProperty);\n+    waterSlider.valueProperty().addListener(((observable, oldValue, newValue) -> {\n+      generatorPrefs.setWaterDensityProperty(newValue.intValue());\n+      preferencesService.storeInBackground();\n+    }));\n+  }\n+\n+  private void initPlateauSlider() {\n+    GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n+    double plateauDensityProperty = generatorPrefs.getPlateauDensityProperty();\n+    boolean plateauRandomProperty = generatorPrefs.getPlateauRandomProperty();\n+    plateauSlider.setLabelFormatter(getLabelConverter());\n+    plateauRandom.setSelected(plateauRandomProperty);\n+    plateauRandom.selectedProperty().addListener(((observable, oldValue, newValue) -> {\n+      generatorPrefs.setPlateauRandomProperty(newValue);\n+      plateauBox.setVisible(!newValue);\n+    }));", "originalCommit": "ca413c506cf54beac9dc92a45c68aa5a199200e3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkwMjI2OA==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r449902268", "bodyText": "https://www.youtube.com/watch?v=6Zi2L0kHSx4", "author": "1-alex98", "createdAt": "2020-07-05T17:50:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkwMjIwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkxMTYzMA==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r449911630", "bodyText": "Done", "author": "Sheikah45", "createdAt": "2020-07-05T19:41:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkwMjIwOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkwMjQ3Mg==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r449902472", "bodyText": "I doubt that is is ever called. You probably need to do this in .excpetionally() on the Completable Future. https://www.logicbig.com/tutorials/core-java-tutorial/java-multi-threading/completion-stages-exception-handling.html", "author": "1-alex98", "createdAt": "2020-07-05T17:52:51Z", "path": "src/main/java/com/faforever/client/game/GenerateMapController.java", "diffHunk": "@@ -0,0 +1,246 @@\n+package com.faforever.client.game;\n+\n+import com.faforever.client.fx.Controller;\n+import com.faforever.client.map.generator.MapGeneratorService;\n+import com.faforever.client.notification.NotificationService;\n+import com.faforever.client.preferences.GeneratorPrefs;\n+import com.faforever.client.preferences.PreferencesService;\n+import javafx.application.Platform;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.CheckBox;\n+import javafx.scene.control.Slider;\n+import javafx.scene.control.Spinner;\n+import javafx.scene.control.SpinnerValueFactory.IntegerSpinnerValueFactory;\n+import javafx.scene.control.TextField;\n+import javafx.scene.layout.HBox;\n+import javafx.scene.layout.Pane;\n+import javafx.util.StringConverter;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.Random;\n+\n+@Component\n+@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+@RequiredArgsConstructor\n+@Slf4j\n+public class GenerateMapController implements Controller<Pane> {\n+\n+  private final PreferencesService preferencesService;\n+  private final NotificationService notificationService;\n+  private final MapGeneratorService mapGeneratorService;\n+  public CreateGameController createGameController;\n+  public Pane generateMapRoot;\n+  public Button generateMapButton;\n+  public TextField previousMapName;\n+  public Spinner<Integer> spawnCountSpinner;\n+  public Slider waterSlider;\n+  public CheckBox waterRandom;\n+  public HBox waterBox;\n+  public Slider mountainSlider;\n+  public CheckBox mountainRandom;\n+  public HBox mountainBox;\n+  public Slider plateauSlider;\n+  public CheckBox plateauRandom;\n+  public HBox plateauBox;\n+  public Slider rampSlider;\n+  public CheckBox rampRandom;\n+  public HBox rampBox;\n+  private Runnable onCloseButtonClickedListener;\n+\n+  public void initialize() {\n+    init();\n+  }\n+\n+  private void init() {\n+    initSpawnCountSpinner();\n+    initWaterSlider();\n+    initPlateauSlider();\n+    initMountainSlider();\n+    initRampSlider();\n+  }\n+\n+  private void initSpawnCountSpinner() {\n+    GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n+    int spawnCountProperty = generatorPrefs.getSpawnCountProperty();\n+    spawnCountSpinner.setValueFactory(new IntegerSpinnerValueFactory(2, 16, spawnCountProperty, 2));\n+    spawnCountSpinner.getValueFactory().valueProperty().addListener((observable, oldValue, newValue) -> {\n+      generatorPrefs.setSpawnCountProperty(newValue);\n+      preferencesService.storeInBackground();\n+    });\n+  }\n+\n+  private StringConverter<Double> getLabelConverter() {\n+    return new StringConverter<>() {\n+      @Override\n+      public String toString(Double n) {\n+        if (n < 127) {\n+          return \"None\";\n+        }\n+        return \"Lots\";\n+      }\n+\n+      @Override\n+      public Double fromString(String s) {\n+        if (s.equals(\"None\")) {\n+          return 0d;\n+        }\n+        return 127d;\n+      }\n+    };\n+  }\n+\n+  private void initWaterSlider() {\n+    GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n+    double waterDensityProperty = generatorPrefs.getWaterDensityProperty();\n+    boolean waterRandomProperty = generatorPrefs.getWaterRandomProperty();\n+    waterSlider.setLabelFormatter(getLabelConverter());\n+    waterRandom.setSelected(waterRandomProperty);\n+    waterRandom.selectedProperty().addListener(((observable, oldValue, newValue) -> {\n+      generatorPrefs.setWaterRandomProperty(newValue);\n+      waterBox.setVisible(!newValue);\n+    }));\n+    waterBox.setVisible(!waterRandomProperty);\n+    waterSlider.setValue(waterDensityProperty);\n+    waterSlider.valueProperty().addListener(((observable, oldValue, newValue) -> {\n+      generatorPrefs.setWaterDensityProperty(newValue.intValue());\n+      preferencesService.storeInBackground();\n+    }));\n+  }\n+\n+  private void initPlateauSlider() {\n+    GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n+    double plateauDensityProperty = generatorPrefs.getPlateauDensityProperty();\n+    boolean plateauRandomProperty = generatorPrefs.getPlateauRandomProperty();\n+    plateauSlider.setLabelFormatter(getLabelConverter());\n+    plateauRandom.setSelected(plateauRandomProperty);\n+    plateauRandom.selectedProperty().addListener(((observable, oldValue, newValue) -> {\n+      generatorPrefs.setPlateauRandomProperty(newValue);\n+      plateauBox.setVisible(!newValue);\n+    }));\n+    plateauBox.setVisible(!plateauRandomProperty);\n+    plateauSlider.setValue(plateauDensityProperty);\n+    plateauSlider.valueProperty().addListener(((observable, oldValue, newValue) -> {\n+      generatorPrefs.setPlateauDensityProperty(newValue.intValue());\n+      preferencesService.storeInBackground();\n+    }));\n+  }\n+\n+  private void initMountainSlider() {\n+    GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n+    double mountainDensityProperty = generatorPrefs.getMountainDensityProperty();\n+    boolean mountainRandomProperty = generatorPrefs.getMountainRandomProperty();\n+    mountainSlider.setLabelFormatter(getLabelConverter());\n+    mountainRandom.setSelected(mountainRandomProperty);\n+    mountainRandom.selectedProperty().addListener(((observable, oldValue, newValue) -> {\n+      generatorPrefs.setMountainRandomProperty(newValue);\n+      mountainBox.setVisible(!newValue);\n+    }));\n+    mountainBox.setVisible(!mountainRandomProperty);\n+    mountainSlider.setValue(mountainDensityProperty);\n+    mountainSlider.valueProperty().addListener(((observable, oldValue, newValue) -> {\n+      generatorPrefs.setMountainDensityProperty(newValue.intValue());\n+      preferencesService.storeInBackground();\n+    }));\n+  }\n+\n+  private void initRampSlider() {\n+    GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n+    double rampDensityProperty = generatorPrefs.getRampDensityProperty();\n+    boolean rampRandomProperty = generatorPrefs.getRampRandomProperty();\n+    rampSlider.setLabelFormatter(getLabelConverter());\n+    rampRandom.setSelected(rampRandomProperty);\n+    rampRandom.selectedProperty().addListener(((observable, oldValue, newValue) -> {\n+      generatorPrefs.setRampRandomProperty(newValue);\n+      rampBox.setVisible(!newValue);\n+    }));\n+    rampBox.setVisible(!rampRandomProperty);\n+    rampSlider.setValue(rampDensityProperty);\n+    rampSlider.valueProperty().addListener(((observable, oldValue, newValue) -> {\n+      generatorPrefs.setRampDensityProperty(newValue.intValue());\n+      preferencesService.storeInBackground();\n+    }));\n+  }\n+\n+  private byte getSliderValue(Slider slider, CheckBox checkBox) {\n+    if (checkBox.isSelected()) {\n+      return (byte) new Random().nextInt(127);\n+    }\n+    return (byte) slider.getValue();\n+  }\n+\n+  protected byte[] getOptionArray() {\n+    byte spawnCount = spawnCountSpinner.getValue().byteValue();\n+    byte landDensity = (byte) (Byte.MAX_VALUE - getSliderValue(waterSlider, waterRandom));\n+    byte plateauDensity = getSliderValue(plateauSlider, plateauRandom);\n+    byte mountainDensity = getSliderValue(mountainSlider, mountainRandom);\n+    byte rampDensity = getSliderValue(rampSlider, rampRandom);\n+    return new byte[]{spawnCount, landDensity, plateauDensity, mountainDensity, rampDensity};\n+  }\n+\n+  public void onCloseButtonClicked() {\n+    onCloseButtonClickedListener.run();\n+  }\n+\n+  public void onGenerateMapButtonClicked() {\n+    onGenerateMap();\n+  }\n+\n+  public void onGenerateMap() {\n+    try {\n+      if (!previousMapName.getText().isEmpty()) {\n+        mapGeneratorService.generateMap(previousMapName.getText()).thenAccept(mapName -> Platform.runLater(() -> {\n+          createGameController.initMapSelection();\n+          createGameController.mapListView.getItems().stream()\n+              .filter(mapBean -> mapBean.getFolderName().equalsIgnoreCase(mapName))\n+              .findAny().ifPresent(mapBean -> {\n+            createGameController.mapListView.getSelectionModel().select(mapBean);\n+            createGameController.mapListView.scrollTo(mapBean);\n+            createGameController.setSelectedMap(mapBean);\n+          });\n+        }));\n+      } else {\n+        byte[] optionArray = getOptionArray();\n+        mapGeneratorService.generateMap(optionArray).thenAccept(mapName -> Platform.runLater(() -> {\n+          createGameController.initMapSelection();\n+          createGameController.mapListView.getItems().stream()\n+              .filter(mapBean -> mapBean.getFolderName().equalsIgnoreCase(mapName))\n+              .findAny().ifPresent(mapBean -> {\n+            createGameController.mapListView.getSelectionModel().select(mapBean);\n+            createGameController.mapListView.scrollTo(mapBean);\n+            createGameController.setSelectedMap(mapBean);\n+          });\n+        }));\n+      }\n+    } catch (IllegalArgumentException e) {\n+      String msg = e.getMessage();\n+      if (msg.startsWith(\"New Version\")) {\n+        notificationService.addImmediateErrorNotification(e, \"mapGenerator.tooNewVersion\");\n+        log.error(\"Map generation failed\", e);\n+      }\n+      if (msg.startsWith(\"Old Version\")) {\n+        notificationService.addImmediateErrorNotification(e, \"mapGenerator.tooOldVersion\");\n+        log.error(\"Map generation failed\", e);\n+      }\n+    } catch (Exception e) {\n+      notificationService.addImmediateErrorNotification(e, \"mapGenerator.generationFailed\");\n+      log.error(\"Map generation failed\", e);\n+    }", "originalCommit": "ca413c506cf54beac9dc92a45c68aa5a199200e3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkwNjQzMw==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r449906433", "bodyText": "I tested it and .exceptionally doesnt work because it is not a completable future that throws the exception rather it is the generatemap function which when it throws the exception never hands back a completable future which is the reason for the try catch but if there is another way it could be structured to use the .exceptionally let me know", "author": "Sheikah45", "createdAt": "2020-07-05T18:40:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkwMjQ3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkwNzExOA==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r449907118", "bodyText": "Nevermind I got it and changed the map generator service to return a completable future that throws an exception", "author": "Sheikah45", "createdAt": "2020-07-05T18:47:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkwMjQ3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkwODcxNw==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r449908717", "bodyText": "Done and let me know if you meant something different", "author": "Sheikah45", "createdAt": "2020-07-05T19:06:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkwMjQ3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA0NTk5Mg==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r450045992", "bodyText": "Well ok maybe I was wrong then. I just expected it to be thrown inside the CompletableFuture", "author": "1-alex98", "createdAt": "2020-07-06T07:54:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkwMjQ3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA0NjQzNw==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r450046437", "bodyText": "It also should be because otherwise u are doing stuff on the ui thread that u should not do. Lemme see what u did...", "author": "1-alex98", "createdAt": "2020-07-06T07:55:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkwMjQ3Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA0ODA4Nw==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r450048087", "bodyText": "If this return null then there is gonna be a nullpointer Exception following in the thenAccept part right XD Also createGameController.initMapSelection(); is called", "author": "1-alex98", "createdAt": "2020-07-06T07:58:58Z", "path": "src/main/java/com/faforever/client/game/GenerateMapController.java", "diffHunk": "@@ -0,0 +1,237 @@\n+package com.faforever.client.game;\n+\n+import com.faforever.client.fx.Controller;\n+import com.faforever.client.map.generator.MapGeneratorService;\n+import com.faforever.client.notification.NotificationService;\n+import com.faforever.client.preferences.GeneratorPrefs;\n+import com.faforever.client.preferences.PreferencesService;\n+import javafx.application.Platform;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.CheckBox;\n+import javafx.scene.control.Slider;\n+import javafx.scene.control.Spinner;\n+import javafx.scene.control.SpinnerValueFactory.IntegerSpinnerValueFactory;\n+import javafx.scene.control.TextField;\n+import javafx.scene.layout.HBox;\n+import javafx.scene.layout.Pane;\n+import javafx.util.StringConverter;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.Random;\n+\n+@Component\n+@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+@RequiredArgsConstructor\n+@Slf4j\n+public class GenerateMapController implements Controller<Pane> {\n+\n+  private final PreferencesService preferencesService;\n+  private final NotificationService notificationService;\n+  private final MapGeneratorService mapGeneratorService;\n+  public CreateGameController createGameController;\n+  public Pane generateMapRoot;\n+  public Button generateMapButton;\n+  public TextField previousMapName;\n+  public Spinner<Integer> spawnCountSpinner;\n+  public Slider waterSlider;\n+  public CheckBox waterRandom;\n+  public HBox waterBox;\n+  public Slider mountainSlider;\n+  public CheckBox mountainRandom;\n+  public HBox mountainBox;\n+  public Slider plateauSlider;\n+  public CheckBox plateauRandom;\n+  public HBox plateauBox;\n+  public Slider rampSlider;\n+  public CheckBox rampRandom;\n+  public HBox rampBox;\n+  private Runnable onCloseButtonClickedListener;\n+\n+  public void initialize() {\n+    init();\n+  }\n+\n+  private void init() {\n+    initSpawnCountSpinner();\n+    initWaterSlider();\n+    initPlateauSlider();\n+    initMountainSlider();\n+    initRampSlider();\n+  }\n+\n+  private void initSpawnCountSpinner() {\n+    GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n+    int spawnCountProperty = generatorPrefs.getSpawnCountProperty();\n+    spawnCountSpinner.setValueFactory(new IntegerSpinnerValueFactory(2, 16, spawnCountProperty, 2));\n+    spawnCountSpinner.getValueFactory().valueProperty().addListener((observable, oldValue, newValue) -> {\n+      generatorPrefs.setSpawnCountProperty(newValue);\n+      preferencesService.storeInBackground();\n+    });\n+  }\n+\n+  private StringConverter<Double> getLabelConverter() {\n+    return new StringConverter<>() {\n+      @Override\n+      public String toString(Double n) {\n+        if (n < 127) {\n+          return \"None\";\n+        }\n+        return \"Lots\";\n+      }\n+\n+      @Override\n+      public Double fromString(String s) {\n+        if (s.equals(\"None\")) {\n+          return 0d;\n+        }\n+        return 127d;\n+      }\n+    };\n+  }\n+\n+  private void initWaterSlider() {\n+    GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n+    double waterDensityProperty = generatorPrefs.getWaterDensityProperty();\n+    boolean waterRandomProperty = generatorPrefs.getWaterRandomProperty();\n+    waterSlider.setLabelFormatter(getLabelConverter());\n+    waterRandom.setSelected(waterRandomProperty);\n+    waterSlider.setValue(waterDensityProperty);\n+    waterBox.visibleProperty().bind(waterRandom.selectedProperty().not());\n+    generatorPrefs.waterDensityPropertyProperty().bind(waterSlider.valueProperty());\n+    generatorPrefs.waterRandomPropertyProperty().bind(waterRandom.selectedProperty());\n+  }\n+\n+  private void initPlateauSlider() {\n+    GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n+    double plateauDensityProperty = generatorPrefs.getPlateauDensityProperty();\n+    boolean plateauRandomProperty = generatorPrefs.getPlateauRandomProperty();\n+    plateauSlider.setLabelFormatter(getLabelConverter());\n+    plateauRandom.setSelected(plateauRandomProperty);\n+    plateauSlider.setValue(plateauDensityProperty);\n+    plateauBox.visibleProperty().bind(plateauRandom.selectedProperty().not());\n+    generatorPrefs.plateauDensityPropertyProperty().bind(plateauSlider.valueProperty());\n+    generatorPrefs.plateauRandomPropertyProperty().bind(plateauRandom.selectedProperty());\n+  }\n+\n+  private void initMountainSlider() {\n+    GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n+    double mountainDensityProperty = generatorPrefs.getMountainDensityProperty();\n+    boolean mountainRandomProperty = generatorPrefs.getMountainRandomProperty();\n+    mountainSlider.setLabelFormatter(getLabelConverter());\n+    mountainRandom.setSelected(mountainRandomProperty);\n+    mountainSlider.setValue(mountainDensityProperty);\n+    mountainBox.visibleProperty().bind(mountainRandom.selectedProperty().not());\n+    generatorPrefs.mountainDensityPropertyProperty().bind(mountainSlider.valueProperty());\n+    generatorPrefs.mountainRandomPropertyProperty().bind(mountainRandom.selectedProperty());\n+  }\n+\n+  private void initRampSlider() {\n+    GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n+    double rampDensityProperty = generatorPrefs.getRampDensityProperty();\n+    boolean rampRandomProperty = generatorPrefs.getRampRandomProperty();\n+    rampSlider.setLabelFormatter(getLabelConverter());\n+    rampRandom.setSelected(rampRandomProperty);\n+    rampSlider.setValue(rampDensityProperty);\n+    rampBox.visibleProperty().bind(rampRandom.selectedProperty().not());\n+    generatorPrefs.rampDensityPropertyProperty().bind(rampSlider.valueProperty());\n+    generatorPrefs.rampRandomPropertyProperty().bind(rampRandom.selectedProperty());\n+  }\n+\n+  private byte getSliderValue(Slider slider, CheckBox checkBox) {\n+    if (checkBox.isSelected()) {\n+      return (byte) new Random().nextInt(127);\n+    }\n+    return (byte) slider.getValue();\n+  }\n+\n+  protected byte[] getOptionArray() {\n+    byte spawnCount = spawnCountSpinner.getValue().byteValue();\n+    byte landDensity = (byte) (Byte.MAX_VALUE - getSliderValue(waterSlider, waterRandom));\n+    byte plateauDensity = getSliderValue(plateauSlider, plateauRandom);\n+    byte mountainDensity = getSliderValue(mountainSlider, mountainRandom);\n+    byte rampDensity = getSliderValue(rampSlider, rampRandom);\n+    return new byte[]{spawnCount, landDensity, plateauDensity, mountainDensity, rampDensity};\n+  }\n+\n+  public void onCloseButtonClicked() {\n+    onCloseButtonClickedListener.run();\n+  }\n+\n+  public void onGenerateMapButtonClicked() {\n+    onGenerateMap();\n+  }\n+\n+  public void onGenerateMap() {\n+      if (!previousMapName.getText().isEmpty()) {\n+        mapGeneratorService.generateMap(previousMapName.getText())\n+            .exceptionally(throwable -> {\n+              handleGenerationException(throwable);\n+              return null;", "originalCommit": "50bc6d15cabc20ac6a502d664221efe7e72b2f84", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA0ODMwMg==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r450048302", "bodyText": "Maybe not just maybe see how it behaves.", "author": "1-alex98", "createdAt": "2020-07-06T07:59:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA0ODA4Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE0Mjk3MA==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r450142970", "bodyText": "I tested this and it just errored with the illegalArgument Exception but could also just move the .exceptionally to the end.", "author": "Sheikah45", "createdAt": "2020-07-06T10:55:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA0ODA4Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc4NDQ0Ng==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r450784446", "bodyText": "Moved it to the end of the futures", "author": "Sheikah45", "createdAt": "2020-07-07T11:07:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA0ODA4Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA0ODY3NQ==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r450048675", "bodyText": "Should they not all be warn", "author": "1-alex98", "createdAt": "2020-07-06T08:00:08Z", "path": "src/main/java/com/faforever/client/game/GenerateMapController.java", "diffHunk": "@@ -0,0 +1,237 @@\n+package com.faforever.client.game;\n+\n+import com.faforever.client.fx.Controller;\n+import com.faforever.client.map.generator.MapGeneratorService;\n+import com.faforever.client.notification.NotificationService;\n+import com.faforever.client.preferences.GeneratorPrefs;\n+import com.faforever.client.preferences.PreferencesService;\n+import javafx.application.Platform;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.CheckBox;\n+import javafx.scene.control.Slider;\n+import javafx.scene.control.Spinner;\n+import javafx.scene.control.SpinnerValueFactory.IntegerSpinnerValueFactory;\n+import javafx.scene.control.TextField;\n+import javafx.scene.layout.HBox;\n+import javafx.scene.layout.Pane;\n+import javafx.util.StringConverter;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.Random;\n+\n+@Component\n+@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+@RequiredArgsConstructor\n+@Slf4j\n+public class GenerateMapController implements Controller<Pane> {\n+\n+  private final PreferencesService preferencesService;\n+  private final NotificationService notificationService;\n+  private final MapGeneratorService mapGeneratorService;\n+  public CreateGameController createGameController;\n+  public Pane generateMapRoot;\n+  public Button generateMapButton;\n+  public TextField previousMapName;\n+  public Spinner<Integer> spawnCountSpinner;\n+  public Slider waterSlider;\n+  public CheckBox waterRandom;\n+  public HBox waterBox;\n+  public Slider mountainSlider;\n+  public CheckBox mountainRandom;\n+  public HBox mountainBox;\n+  public Slider plateauSlider;\n+  public CheckBox plateauRandom;\n+  public HBox plateauBox;\n+  public Slider rampSlider;\n+  public CheckBox rampRandom;\n+  public HBox rampBox;\n+  private Runnable onCloseButtonClickedListener;\n+\n+  public void initialize() {\n+    init();\n+  }\n+\n+  private void init() {\n+    initSpawnCountSpinner();\n+    initWaterSlider();\n+    initPlateauSlider();\n+    initMountainSlider();\n+    initRampSlider();\n+  }\n+\n+  private void initSpawnCountSpinner() {\n+    GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n+    int spawnCountProperty = generatorPrefs.getSpawnCountProperty();\n+    spawnCountSpinner.setValueFactory(new IntegerSpinnerValueFactory(2, 16, spawnCountProperty, 2));\n+    spawnCountSpinner.getValueFactory().valueProperty().addListener((observable, oldValue, newValue) -> {\n+      generatorPrefs.setSpawnCountProperty(newValue);\n+      preferencesService.storeInBackground();\n+    });\n+  }\n+\n+  private StringConverter<Double> getLabelConverter() {\n+    return new StringConverter<>() {\n+      @Override\n+      public String toString(Double n) {\n+        if (n < 127) {\n+          return \"None\";\n+        }\n+        return \"Lots\";\n+      }\n+\n+      @Override\n+      public Double fromString(String s) {\n+        if (s.equals(\"None\")) {\n+          return 0d;\n+        }\n+        return 127d;\n+      }\n+    };\n+  }\n+\n+  private void initWaterSlider() {\n+    GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n+    double waterDensityProperty = generatorPrefs.getWaterDensityProperty();\n+    boolean waterRandomProperty = generatorPrefs.getWaterRandomProperty();\n+    waterSlider.setLabelFormatter(getLabelConverter());\n+    waterRandom.setSelected(waterRandomProperty);\n+    waterSlider.setValue(waterDensityProperty);\n+    waterBox.visibleProperty().bind(waterRandom.selectedProperty().not());\n+    generatorPrefs.waterDensityPropertyProperty().bind(waterSlider.valueProperty());\n+    generatorPrefs.waterRandomPropertyProperty().bind(waterRandom.selectedProperty());\n+  }\n+\n+  private void initPlateauSlider() {\n+    GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n+    double plateauDensityProperty = generatorPrefs.getPlateauDensityProperty();\n+    boolean plateauRandomProperty = generatorPrefs.getPlateauRandomProperty();\n+    plateauSlider.setLabelFormatter(getLabelConverter());\n+    plateauRandom.setSelected(plateauRandomProperty);\n+    plateauSlider.setValue(plateauDensityProperty);\n+    plateauBox.visibleProperty().bind(plateauRandom.selectedProperty().not());\n+    generatorPrefs.plateauDensityPropertyProperty().bind(plateauSlider.valueProperty());\n+    generatorPrefs.plateauRandomPropertyProperty().bind(plateauRandom.selectedProperty());\n+  }\n+\n+  private void initMountainSlider() {\n+    GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n+    double mountainDensityProperty = generatorPrefs.getMountainDensityProperty();\n+    boolean mountainRandomProperty = generatorPrefs.getMountainRandomProperty();\n+    mountainSlider.setLabelFormatter(getLabelConverter());\n+    mountainRandom.setSelected(mountainRandomProperty);\n+    mountainSlider.setValue(mountainDensityProperty);\n+    mountainBox.visibleProperty().bind(mountainRandom.selectedProperty().not());\n+    generatorPrefs.mountainDensityPropertyProperty().bind(mountainSlider.valueProperty());\n+    generatorPrefs.mountainRandomPropertyProperty().bind(mountainRandom.selectedProperty());\n+  }\n+\n+  private void initRampSlider() {\n+    GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n+    double rampDensityProperty = generatorPrefs.getRampDensityProperty();\n+    boolean rampRandomProperty = generatorPrefs.getRampRandomProperty();\n+    rampSlider.setLabelFormatter(getLabelConverter());\n+    rampRandom.setSelected(rampRandomProperty);\n+    rampSlider.setValue(rampDensityProperty);\n+    rampBox.visibleProperty().bind(rampRandom.selectedProperty().not());\n+    generatorPrefs.rampDensityPropertyProperty().bind(rampSlider.valueProperty());\n+    generatorPrefs.rampRandomPropertyProperty().bind(rampRandom.selectedProperty());\n+  }\n+\n+  private byte getSliderValue(Slider slider, CheckBox checkBox) {\n+    if (checkBox.isSelected()) {\n+      return (byte) new Random().nextInt(127);\n+    }\n+    return (byte) slider.getValue();\n+  }\n+\n+  protected byte[] getOptionArray() {\n+    byte spawnCount = spawnCountSpinner.getValue().byteValue();\n+    byte landDensity = (byte) (Byte.MAX_VALUE - getSliderValue(waterSlider, waterRandom));\n+    byte plateauDensity = getSliderValue(plateauSlider, plateauRandom);\n+    byte mountainDensity = getSliderValue(mountainSlider, mountainRandom);\n+    byte rampDensity = getSliderValue(rampSlider, rampRandom);\n+    return new byte[]{spawnCount, landDensity, plateauDensity, mountainDensity, rampDensity};\n+  }\n+\n+  public void onCloseButtonClicked() {\n+    onCloseButtonClickedListener.run();\n+  }\n+\n+  public void onGenerateMapButtonClicked() {\n+    onGenerateMap();\n+  }\n+\n+  public void onGenerateMap() {\n+      if (!previousMapName.getText().isEmpty()) {\n+        mapGeneratorService.generateMap(previousMapName.getText())\n+            .exceptionally(throwable -> {\n+              handleGenerationException(throwable);\n+              return null;\n+            })\n+            .thenAccept(mapName -> Platform.runLater(() -> {\n+              createGameController.initMapSelection();\n+              createGameController.mapListView.getItems().stream()\n+                  .filter(mapBean -> mapBean.getFolderName().equalsIgnoreCase(mapName))\n+                  .findAny().ifPresent(mapBean -> {\n+                createGameController.mapListView.getSelectionModel().select(mapBean);\n+                createGameController.mapListView.scrollTo(mapBean);\n+                createGameController.setSelectedMap(mapBean);\n+              });\n+            }));\n+      } else {\n+        byte[] optionArray = getOptionArray();\n+        mapGeneratorService.generateMap(optionArray)\n+            .exceptionally(throwable -> {\n+              handleGenerationException(throwable);\n+              return null;\n+            })\n+            .thenAccept(mapName -> Platform.runLater(() -> {\n+              createGameController.initMapSelection();\n+              createGameController.mapListView.getItems().stream()\n+                  .filter(mapBean -> mapBean.getFolderName().equalsIgnoreCase(mapName))\n+                  .findAny().ifPresent(mapBean -> {\n+                createGameController.mapListView.getSelectionModel().select(mapBean);\n+                createGameController.mapListView.scrollTo(mapBean);\n+                createGameController.setSelectedMap(mapBean);\n+              });\n+            }));\n+      }\n+    onCloseButtonClickedListener.run();\n+  }\n+\n+  private void handleGenerationException(Throwable e) {\n+    Throwable cause = e.getCause();\n+    if (cause instanceof IllegalArgumentException) {\n+      String msg = cause.getMessage();\n+      if (msg.startsWith(\"New Version\")) {\n+        notificationService.addImmediateErrorNotification(cause, \"mapGenerator.tooNewVersion\");\n+        log.error(\"Map generation failed\", cause);\n+      } else if (msg.startsWith(\"Old Version\")) {\n+        notificationService.addImmediateErrorNotification(cause, \"mapGenerator.tooOldVersion\");\n+        log.error(\"Map generation failed\", cause);\n+      } else {\n+        notificationService.addImmediateErrorNotification(e, \"mapGenerator.generationFailed\");\n+        log.error(\"Map generation failed\", e);\n+      }\n+    } else {\n+      notificationService.addImmediateErrorNotification(e, \"mapGenerator.generationFailed\");\n+      log.error(\"Map generation failed\", e);", "originalCommit": "50bc6d15cabc20ac6a502d664221efe7e72b2f84", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE0NTE3OA==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r450145178", "bodyText": "I am not sure what you me by all of them being warn? is there another function to the notification service?", "author": "Sheikah45", "createdAt": "2020-07-06T11:00:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA0ODY3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY3NjE1Mw==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r450676153", "bodyText": "log.warn(....)", "author": "1-alex98", "createdAt": "2020-07-07T07:53:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA0ODY3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc3MDIxNQ==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r450770215", "bodyText": "Ah got it", "author": "Sheikah45", "createdAt": "2020-07-07T10:38:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA0ODY3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc4Mzc3Mw==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r450783773", "bodyText": "Done", "author": "Sheikah45", "createdAt": "2020-07-07T11:05:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA0ODY3NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA0OTQzNA==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r450049434", "bodyText": "I think there is a static Method on the CompletableFuture class that does exactly that", "author": "1-alex98", "createdAt": "2020-07-06T08:01:30Z", "path": "src/main/java/com/faforever/client/map/generator/MapGeneratorService.java", "diffHunk": "@@ -107,43 +115,87 @@ private void deleteGeneratedMaps() {\n     }\n   }\n \n-\n   public CompletableFuture<String> generateMap() {\n-    return generateMap(queryNewestVersion(), seedGenerator.nextLong());\n+    ByteBuffer seedBuffer = ByteBuffer.allocate(8);\n+    seedBuffer.putLong(seedGenerator.nextLong());\n+    String seedString = Base64.getEncoder().encodeToString(seedBuffer.array());\n+    return generateMap(generatorVersion, seedString);\n+  }\n+\n+  public CompletableFuture<String> generateMap(byte[] optionArray) {\n+    return generateMap(generatorVersion, optionArray);\n+  }\n+\n+  public CompletableFuture<String> generateMap(String version, byte[] optionArray) {\n+    return generateMap(new ComparableVersion(version), optionArray);\n+  }\n+\n+  public CompletableFuture<String> generateMap(ComparableVersion version, byte[] optionArray) {\n+    ByteBuffer seedBuffer = ByteBuffer.allocate(8);\n+    seedBuffer.putLong(seedGenerator.nextLong());\n+    String seedString = Base64.getEncoder().encodeToString(seedBuffer.array());\n+    String optionString = Base64.getEncoder().encodeToString(optionArray);\n+    return generateMap(version, seedString + '_' + optionString);\n   }\n \n   @VisibleForTesting\n-  protected String queryNewestVersion() {\n+  @Cacheable(CacheNames.MAP_GENERATOR)\n+  public ComparableVersion queryMaxSupportedVersion() {\n+    ComparableVersion version = new ComparableVersion(\"\");\n+    ComparableVersion minVersion = new ComparableVersion(String.valueOf(clientProperties.getMapGenerator().getMinSupportedMajorVersion()));\n+    ComparableVersion maxVersion = new ComparableVersion(String.valueOf(clientProperties.getMapGenerator().getMaxSupportedMajorVersion() + 1));\n+\n     RestTemplate restTemplate = new RestTemplate();\n \n     LinkedMultiValueMap<String, String> headers = new LinkedMultiValueMap<>();\n     headers.add(\"Accept\", \"application/vnd.github.v3+json\");\n     HttpEntity<String> entity = new HttpEntity<>(null, headers);\n \n-    ResponseEntity<String> response = restTemplate.exchange(clientProperties.getMapGenerator().getQueryLatestVersionUrl(), HttpMethod.GET, entity, String.class);\n-    JsonElement jsonElement = new JsonParser().parse(response.getBody());\n-    JsonObject mainObject = jsonElement.getAsJsonObject();\n-\n-    return mainObject.get(\"tag_name\").getAsString();\n+    ResponseEntity<List<GithubGeneratorRelease>> response = restTemplate.exchange(clientProperties.getMapGenerator().getQueryVersionsUrl(), HttpMethod.GET, entity, new ParameterizedTypeReference<List<GithubGeneratorRelease>>(){});\n+    List<GithubGeneratorRelease> releases = response.getBody();\n+    for (GithubGeneratorRelease release : releases) {\n+      version.parseVersion(release.getTag_name());\n+      if (version.compareTo(maxVersion) < 0 && minVersion.compareTo(version) < 0) {\n+        return version;\n+      }\n+    }\n+    throw new RuntimeException(\"No Valid Generator Version Found\");\n   }\n \n   public CompletableFuture<String> generateMap(String mapName) {\n     Matcher matcher = GENERATED_MAP_PATTERN.matcher(mapName);\n     if (!matcher.find()) {\n-      throw new IllegalArgumentException(\"Map name is not a generated map\");\n+      return CompletableFuture.supplyAsync(() -> {", "originalCommit": "50bc6d15cabc20ac6a502d664221efe7e72b2f84", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc4MzcwMg==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r450783702", "bodyText": "Used", "author": "Sheikah45", "createdAt": "2020-07-07T11:05:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA0OTQzNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjczODk5Mw==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r452738993", "bodyText": "This code doesn't seem properly formatted; please use/enable IntelliJ's auto formatting", "author": "micheljung", "createdAt": "2020-07-10T09:42:24Z", "path": "src/main/java/com/faforever/client/game/CreateGameController.java", "diffHunk": "@@ -375,23 +376,41 @@ public void onRandomMapButtonClicked() {\n     mapListView.scrollTo(mapIndex);\n   }\n \n-  public void onGenerateMapButtonClicked() {\n+  public void onGenerateMapButtonClicked(){\n+    onGenerateMap();\n+  }\n+\n+  private void onGenerateMap() {\n     try {\n-      mapGeneratorService.generateMap().thenAccept(mapName -> {\n-        Platform.runLater(() -> {\n-          initMapSelection();\n-          mapListView.getItems().stream()\n-              .filter(mapBean -> mapBean.getFolderName().equalsIgnoreCase(mapName))\n-              .findAny().ifPresent(mapBean -> {\n-            mapListView.getSelectionModel().select(mapBean);\n-            mapListView.scrollTo(mapBean);\n-            setSelectedMap(mapBean);\n+      mapGeneratorService.setGeneratorVersion(mapGeneratorService.queryMaxSupportedVersion());\n+      // Check if generated map is major version 0 which does not support options\n+      if (mapGeneratorService.getGeneratorVersion().compareTo(new ComparableVersion(\"1\")) < 0) {\n+        mapGeneratorService.generateMap().thenAccept(mapName -> {\n+          Platform.runLater(() -> {\n+            initMapSelection();\n+            mapListView.getItems().stream()\n+                .filter(mapBean -> mapBean.getFolderName().equalsIgnoreCase(mapName))\n+                .findAny()\n+                .ifPresent(mapBean -> {\n+              mapListView.getSelectionModel().select(mapBean);\n+              mapListView.scrollTo(mapBean);\n+              setSelectedMap(mapBean);", "originalCommit": "ad111030f097fefa0c5b5f827bbb86eb42660c52", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc5MzUwNA==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r452793504", "bodyText": "Done", "author": "Sheikah45", "createdAt": "2020-07-10T11:45:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjczODk5Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjczOTczNQ==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r452739735", "bodyText": "This is redundant; inline init()", "author": "micheljung", "createdAt": "2020-07-10T09:43:51Z", "path": "src/main/java/com/faforever/client/game/GenerateMapController.java", "diffHunk": "@@ -0,0 +1,237 @@\n+package com.faforever.client.game;\n+\n+import com.faforever.client.fx.Controller;\n+import com.faforever.client.map.generator.MapGeneratorService;\n+import com.faforever.client.notification.NotificationService;\n+import com.faforever.client.preferences.GeneratorPrefs;\n+import com.faforever.client.preferences.PreferencesService;\n+import javafx.application.Platform;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.CheckBox;\n+import javafx.scene.control.Slider;\n+import javafx.scene.control.Spinner;\n+import javafx.scene.control.SpinnerValueFactory.IntegerSpinnerValueFactory;\n+import javafx.scene.control.TextField;\n+import javafx.scene.layout.HBox;\n+import javafx.scene.layout.Pane;\n+import javafx.util.StringConverter;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.Random;\n+\n+@Component\n+@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+@RequiredArgsConstructor\n+@Slf4j\n+public class GenerateMapController implements Controller<Pane> {\n+\n+  private final PreferencesService preferencesService;\n+  private final NotificationService notificationService;\n+  private final MapGeneratorService mapGeneratorService;\n+  public CreateGameController createGameController;\n+  public Pane generateMapRoot;\n+  public Button generateMapButton;\n+  public TextField previousMapName;\n+  public Spinner<Integer> spawnCountSpinner;\n+  public Slider waterSlider;\n+  public CheckBox waterRandom;\n+  public HBox waterBox;\n+  public Slider mountainSlider;\n+  public CheckBox mountainRandom;\n+  public HBox mountainBox;\n+  public Slider plateauSlider;\n+  public CheckBox plateauRandom;\n+  public HBox plateauBox;\n+  public Slider rampSlider;\n+  public CheckBox rampRandom;\n+  public HBox rampBox;\n+  private Runnable onCloseButtonClickedListener;\n+\n+  public void initialize() {\n+    init();", "originalCommit": "ad111030f097fefa0c5b5f827bbb86eb42660c52", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc5MzQ4Ng==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r452793486", "bodyText": "Done", "author": "Sheikah45", "createdAt": "2020-07-10T11:45:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjczOTczNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc0MDI1OQ==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r452740259", "bodyText": "Use I18n and message keys.", "author": "micheljung", "createdAt": "2020-07-10T09:44:52Z", "path": "src/main/java/com/faforever/client/game/GenerateMapController.java", "diffHunk": "@@ -0,0 +1,237 @@\n+package com.faforever.client.game;\n+\n+import com.faforever.client.fx.Controller;\n+import com.faforever.client.map.generator.MapGeneratorService;\n+import com.faforever.client.notification.NotificationService;\n+import com.faforever.client.preferences.GeneratorPrefs;\n+import com.faforever.client.preferences.PreferencesService;\n+import javafx.application.Platform;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.CheckBox;\n+import javafx.scene.control.Slider;\n+import javafx.scene.control.Spinner;\n+import javafx.scene.control.SpinnerValueFactory.IntegerSpinnerValueFactory;\n+import javafx.scene.control.TextField;\n+import javafx.scene.layout.HBox;\n+import javafx.scene.layout.Pane;\n+import javafx.util.StringConverter;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.Random;\n+\n+@Component\n+@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+@RequiredArgsConstructor\n+@Slf4j\n+public class GenerateMapController implements Controller<Pane> {\n+\n+  private final PreferencesService preferencesService;\n+  private final NotificationService notificationService;\n+  private final MapGeneratorService mapGeneratorService;\n+  public CreateGameController createGameController;\n+  public Pane generateMapRoot;\n+  public Button generateMapButton;\n+  public TextField previousMapName;\n+  public Spinner<Integer> spawnCountSpinner;\n+  public Slider waterSlider;\n+  public CheckBox waterRandom;\n+  public HBox waterBox;\n+  public Slider mountainSlider;\n+  public CheckBox mountainRandom;\n+  public HBox mountainBox;\n+  public Slider plateauSlider;\n+  public CheckBox plateauRandom;\n+  public HBox plateauBox;\n+  public Slider rampSlider;\n+  public CheckBox rampRandom;\n+  public HBox rampBox;\n+  private Runnable onCloseButtonClickedListener;\n+\n+  public void initialize() {\n+    init();\n+  }\n+\n+  private void init() {\n+    initSpawnCountSpinner();\n+    initWaterSlider();\n+    initPlateauSlider();\n+    initMountainSlider();\n+    initRampSlider();\n+  }\n+\n+  private void initSpawnCountSpinner() {\n+    GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n+    int spawnCountProperty = generatorPrefs.getSpawnCountProperty();\n+    spawnCountSpinner.setValueFactory(new IntegerSpinnerValueFactory(2, 16, spawnCountProperty, 2));\n+    spawnCountSpinner.getValueFactory().valueProperty().addListener((observable, oldValue, newValue) -> {\n+      generatorPrefs.setSpawnCountProperty(newValue);\n+      preferencesService.storeInBackground();\n+    });\n+  }\n+\n+  private StringConverter<Double> getLabelConverter() {\n+    return new StringConverter<>() {\n+      @Override\n+      public String toString(Double n) {\n+        if (n < 127) {\n+          return \"None\";\n+        }\n+        return \"Lots\";", "originalCommit": "ad111030f097fefa0c5b5f827bbb86eb42660c52", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc5MzQzNw==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r452793437", "bodyText": "Done", "author": "Sheikah45", "createdAt": "2020-07-10T11:45:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc0MDI1OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc0MDY2Mg==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r452740662", "bodyText": "Conversion from String to a number is most likely never used; just throw an UnsupportedOperationException", "author": "micheljung", "createdAt": "2020-07-10T09:45:36Z", "path": "src/main/java/com/faforever/client/game/GenerateMapController.java", "diffHunk": "@@ -0,0 +1,237 @@\n+package com.faforever.client.game;\n+\n+import com.faforever.client.fx.Controller;\n+import com.faforever.client.map.generator.MapGeneratorService;\n+import com.faforever.client.notification.NotificationService;\n+import com.faforever.client.preferences.GeneratorPrefs;\n+import com.faforever.client.preferences.PreferencesService;\n+import javafx.application.Platform;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.CheckBox;\n+import javafx.scene.control.Slider;\n+import javafx.scene.control.Spinner;\n+import javafx.scene.control.SpinnerValueFactory.IntegerSpinnerValueFactory;\n+import javafx.scene.control.TextField;\n+import javafx.scene.layout.HBox;\n+import javafx.scene.layout.Pane;\n+import javafx.util.StringConverter;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.Random;\n+\n+@Component\n+@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+@RequiredArgsConstructor\n+@Slf4j\n+public class GenerateMapController implements Controller<Pane> {\n+\n+  private final PreferencesService preferencesService;\n+  private final NotificationService notificationService;\n+  private final MapGeneratorService mapGeneratorService;\n+  public CreateGameController createGameController;\n+  public Pane generateMapRoot;\n+  public Button generateMapButton;\n+  public TextField previousMapName;\n+  public Spinner<Integer> spawnCountSpinner;\n+  public Slider waterSlider;\n+  public CheckBox waterRandom;\n+  public HBox waterBox;\n+  public Slider mountainSlider;\n+  public CheckBox mountainRandom;\n+  public HBox mountainBox;\n+  public Slider plateauSlider;\n+  public CheckBox plateauRandom;\n+  public HBox plateauBox;\n+  public Slider rampSlider;\n+  public CheckBox rampRandom;\n+  public HBox rampBox;\n+  private Runnable onCloseButtonClickedListener;\n+\n+  public void initialize() {\n+    init();\n+  }\n+\n+  private void init() {\n+    initSpawnCountSpinner();\n+    initWaterSlider();\n+    initPlateauSlider();\n+    initMountainSlider();\n+    initRampSlider();\n+  }\n+\n+  private void initSpawnCountSpinner() {\n+    GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n+    int spawnCountProperty = generatorPrefs.getSpawnCountProperty();\n+    spawnCountSpinner.setValueFactory(new IntegerSpinnerValueFactory(2, 16, spawnCountProperty, 2));\n+    spawnCountSpinner.getValueFactory().valueProperty().addListener((observable, oldValue, newValue) -> {\n+      generatorPrefs.setSpawnCountProperty(newValue);\n+      preferencesService.storeInBackground();\n+    });\n+  }\n+\n+  private StringConverter<Double> getLabelConverter() {\n+    return new StringConverter<>() {\n+      @Override\n+      public String toString(Double n) {\n+        if (n < 127) {\n+          return \"None\";\n+        }\n+        return \"Lots\";\n+      }\n+\n+      @Override\n+      public Double fromString(String s) {\n+        if (s.equals(\"None\")) {\n+          return 0d;\n+        }\n+        return 127d;\n+      }", "originalCommit": "ad111030f097fefa0c5b5f827bbb86eb42660c52", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc5MzM5MA==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r452793390", "bodyText": "Done", "author": "Sheikah45", "createdAt": "2020-07-10T11:45:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc0MDY2Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc0Mjg5NA==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r452742894", "bodyText": "Reduce code duplication", "author": "micheljung", "createdAt": "2020-07-10T09:49:49Z", "path": "src/main/java/com/faforever/client/game/GenerateMapController.java", "diffHunk": "@@ -0,0 +1,237 @@\n+package com.faforever.client.game;\n+\n+import com.faforever.client.fx.Controller;\n+import com.faforever.client.map.generator.MapGeneratorService;\n+import com.faforever.client.notification.NotificationService;\n+import com.faforever.client.preferences.GeneratorPrefs;\n+import com.faforever.client.preferences.PreferencesService;\n+import javafx.application.Platform;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.CheckBox;\n+import javafx.scene.control.Slider;\n+import javafx.scene.control.Spinner;\n+import javafx.scene.control.SpinnerValueFactory.IntegerSpinnerValueFactory;\n+import javafx.scene.control.TextField;\n+import javafx.scene.layout.HBox;\n+import javafx.scene.layout.Pane;\n+import javafx.util.StringConverter;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.Random;\n+\n+@Component\n+@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+@RequiredArgsConstructor\n+@Slf4j\n+public class GenerateMapController implements Controller<Pane> {\n+\n+  private final PreferencesService preferencesService;\n+  private final NotificationService notificationService;\n+  private final MapGeneratorService mapGeneratorService;\n+  public CreateGameController createGameController;\n+  public Pane generateMapRoot;\n+  public Button generateMapButton;\n+  public TextField previousMapName;\n+  public Spinner<Integer> spawnCountSpinner;\n+  public Slider waterSlider;\n+  public CheckBox waterRandom;\n+  public HBox waterBox;\n+  public Slider mountainSlider;\n+  public CheckBox mountainRandom;\n+  public HBox mountainBox;\n+  public Slider plateauSlider;\n+  public CheckBox plateauRandom;\n+  public HBox plateauBox;\n+  public Slider rampSlider;\n+  public CheckBox rampRandom;\n+  public HBox rampBox;\n+  private Runnable onCloseButtonClickedListener;\n+\n+  public void initialize() {\n+    init();\n+  }\n+\n+  private void init() {\n+    initSpawnCountSpinner();\n+    initWaterSlider();\n+    initPlateauSlider();\n+    initMountainSlider();\n+    initRampSlider();\n+  }\n+\n+  private void initSpawnCountSpinner() {\n+    GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n+    int spawnCountProperty = generatorPrefs.getSpawnCountProperty();\n+    spawnCountSpinner.setValueFactory(new IntegerSpinnerValueFactory(2, 16, spawnCountProperty, 2));\n+    spawnCountSpinner.getValueFactory().valueProperty().addListener((observable, oldValue, newValue) -> {\n+      generatorPrefs.setSpawnCountProperty(newValue);\n+      preferencesService.storeInBackground();\n+    });\n+  }\n+\n+  private StringConverter<Double> getLabelConverter() {\n+    return new StringConverter<>() {\n+      @Override\n+      public String toString(Double n) {\n+        if (n < 127) {\n+          return \"None\";\n+        }\n+        return \"Lots\";\n+      }\n+\n+      @Override\n+      public Double fromString(String s) {\n+        if (s.equals(\"None\")) {\n+          return 0d;\n+        }\n+        return 127d;\n+      }\n+    };\n+  }\n+\n+  private void initWaterSlider() {\n+    GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n+    double waterDensityProperty = generatorPrefs.getWaterDensityProperty();\n+    boolean waterRandomProperty = generatorPrefs.getWaterRandomProperty();\n+    waterSlider.setLabelFormatter(getLabelConverter());\n+    waterRandom.setSelected(waterRandomProperty);\n+    waterSlider.setValue(waterDensityProperty);\n+    waterBox.visibleProperty().bind(waterRandom.selectedProperty().not());\n+    generatorPrefs.waterDensityPropertyProperty().bind(waterSlider.valueProperty());\n+    generatorPrefs.waterRandomPropertyProperty().bind(waterRandom.selectedProperty());\n+  }\n+\n+  private void initPlateauSlider() {\n+    GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n+    double plateauDensityProperty = generatorPrefs.getPlateauDensityProperty();\n+    boolean plateauRandomProperty = generatorPrefs.getPlateauRandomProperty();\n+    plateauSlider.setLabelFormatter(getLabelConverter());\n+    plateauRandom.setSelected(plateauRandomProperty);\n+    plateauSlider.setValue(plateauDensityProperty);\n+    plateauBox.visibleProperty().bind(plateauRandom.selectedProperty().not());\n+    generatorPrefs.plateauDensityPropertyProperty().bind(plateauSlider.valueProperty());\n+    generatorPrefs.plateauRandomPropertyProperty().bind(plateauRandom.selectedProperty());\n+  }\n+\n+  private void initMountainSlider() {\n+    GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n+    double mountainDensityProperty = generatorPrefs.getMountainDensityProperty();\n+    boolean mountainRandomProperty = generatorPrefs.getMountainRandomProperty();\n+    mountainSlider.setLabelFormatter(getLabelConverter());\n+    mountainRandom.setSelected(mountainRandomProperty);\n+    mountainSlider.setValue(mountainDensityProperty);\n+    mountainBox.visibleProperty().bind(mountainRandom.selectedProperty().not());\n+    generatorPrefs.mountainDensityPropertyProperty().bind(mountainSlider.valueProperty());\n+    generatorPrefs.mountainRandomPropertyProperty().bind(mountainRandom.selectedProperty());\n+  }\n+\n+  private void initRampSlider() {\n+    GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n+    double rampDensityProperty = generatorPrefs.getRampDensityProperty();\n+    boolean rampRandomProperty = generatorPrefs.getRampRandomProperty();\n+    rampSlider.setLabelFormatter(getLabelConverter());\n+    rampRandom.setSelected(rampRandomProperty);\n+    rampSlider.setValue(rampDensityProperty);\n+    rampBox.visibleProperty().bind(rampRandom.selectedProperty().not());\n+    generatorPrefs.rampDensityPropertyProperty().bind(rampSlider.valueProperty());\n+    generatorPrefs.rampRandomPropertyProperty().bind(rampRandom.selectedProperty());\n+  }\n+\n+  private byte getSliderValue(Slider slider, CheckBox checkBox) {\n+    if (checkBox.isSelected()) {\n+      return (byte) new Random().nextInt(127);\n+    }\n+    return (byte) slider.getValue();\n+  }\n+\n+  protected byte[] getOptionArray() {\n+    byte spawnCount = spawnCountSpinner.getValue().byteValue();\n+    byte landDensity = (byte) (Byte.MAX_VALUE - getSliderValue(waterSlider, waterRandom));\n+    byte plateauDensity = getSliderValue(plateauSlider, plateauRandom);\n+    byte mountainDensity = getSliderValue(mountainSlider, mountainRandom);\n+    byte rampDensity = getSliderValue(rampSlider, rampRandom);\n+    return new byte[]{spawnCount, landDensity, plateauDensity, mountainDensity, rampDensity};\n+  }\n+\n+  public void onCloseButtonClicked() {\n+    onCloseButtonClickedListener.run();\n+  }\n+\n+  public void onGenerateMapButtonClicked() {\n+    onGenerateMap();\n+  }\n+\n+  public void onGenerateMap() {\n+      if (!previousMapName.getText().isEmpty()) {\n+        mapGeneratorService.generateMap(previousMapName.getText())\n+            .thenAccept(mapName -> Platform.runLater(() -> {\n+              createGameController.initMapSelection();\n+              createGameController.mapListView.getItems().stream()\n+                  .filter(mapBean -> mapBean.getFolderName().equalsIgnoreCase(mapName))\n+                  .findAny().ifPresent(mapBean -> {\n+                createGameController.mapListView.getSelectionModel().select(mapBean);\n+                createGameController.mapListView.scrollTo(mapBean);\n+                createGameController.setSelectedMap(mapBean);\n+              });\n+            }))\n+            .exceptionally(throwable -> {\n+              handleGenerationException(throwable);\n+              return null;\n+            });\n+      } else {\n+        byte[] optionArray = getOptionArray();\n+        mapGeneratorService.generateMap(optionArray)\n+            .thenAccept(mapName -> Platform.runLater(() -> {\n+              createGameController.initMapSelection();\n+              createGameController.mapListView.getItems().stream()\n+                  .filter(mapBean -> mapBean.getFolderName().equalsIgnoreCase(mapName))\n+                  .findAny().ifPresent(mapBean -> {\n+                createGameController.mapListView.getSelectionModel().select(mapBean);\n+                createGameController.mapListView.scrollTo(mapBean);\n+                createGameController.setSelectedMap(mapBean);\n+              });\n+            }))", "originalCommit": "ad111030f097fefa0c5b5f827bbb86eb42660c52", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc5Mjg4Ng==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r452792886", "bodyText": "Done", "author": "Sheikah45", "createdAt": "2020-07-10T11:44:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc0Mjg5NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc0Mzk0Nw==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r452743947", "bodyText": "Relying on the exception message is quite fragile; it's not part of an API and may change at any time, staying unnoticed. Instead, the map generator should either throw concrete exceptions or its exception should contain some sort of reason code.", "author": "micheljung", "createdAt": "2020-07-10T09:51:51Z", "path": "src/main/java/com/faforever/client/game/GenerateMapController.java", "diffHunk": "@@ -0,0 +1,237 @@\n+package com.faforever.client.game;\n+\n+import com.faforever.client.fx.Controller;\n+import com.faforever.client.map.generator.MapGeneratorService;\n+import com.faforever.client.notification.NotificationService;\n+import com.faforever.client.preferences.GeneratorPrefs;\n+import com.faforever.client.preferences.PreferencesService;\n+import javafx.application.Platform;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.CheckBox;\n+import javafx.scene.control.Slider;\n+import javafx.scene.control.Spinner;\n+import javafx.scene.control.SpinnerValueFactory.IntegerSpinnerValueFactory;\n+import javafx.scene.control.TextField;\n+import javafx.scene.layout.HBox;\n+import javafx.scene.layout.Pane;\n+import javafx.util.StringConverter;\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.Random;\n+\n+@Component\n+@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+@RequiredArgsConstructor\n+@Slf4j\n+public class GenerateMapController implements Controller<Pane> {\n+\n+  private final PreferencesService preferencesService;\n+  private final NotificationService notificationService;\n+  private final MapGeneratorService mapGeneratorService;\n+  public CreateGameController createGameController;\n+  public Pane generateMapRoot;\n+  public Button generateMapButton;\n+  public TextField previousMapName;\n+  public Spinner<Integer> spawnCountSpinner;\n+  public Slider waterSlider;\n+  public CheckBox waterRandom;\n+  public HBox waterBox;\n+  public Slider mountainSlider;\n+  public CheckBox mountainRandom;\n+  public HBox mountainBox;\n+  public Slider plateauSlider;\n+  public CheckBox plateauRandom;\n+  public HBox plateauBox;\n+  public Slider rampSlider;\n+  public CheckBox rampRandom;\n+  public HBox rampBox;\n+  private Runnable onCloseButtonClickedListener;\n+\n+  public void initialize() {\n+    init();\n+  }\n+\n+  private void init() {\n+    initSpawnCountSpinner();\n+    initWaterSlider();\n+    initPlateauSlider();\n+    initMountainSlider();\n+    initRampSlider();\n+  }\n+\n+  private void initSpawnCountSpinner() {\n+    GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n+    int spawnCountProperty = generatorPrefs.getSpawnCountProperty();\n+    spawnCountSpinner.setValueFactory(new IntegerSpinnerValueFactory(2, 16, spawnCountProperty, 2));\n+    spawnCountSpinner.getValueFactory().valueProperty().addListener((observable, oldValue, newValue) -> {\n+      generatorPrefs.setSpawnCountProperty(newValue);\n+      preferencesService.storeInBackground();\n+    });\n+  }\n+\n+  private StringConverter<Double> getLabelConverter() {\n+    return new StringConverter<>() {\n+      @Override\n+      public String toString(Double n) {\n+        if (n < 127) {\n+          return \"None\";\n+        }\n+        return \"Lots\";\n+      }\n+\n+      @Override\n+      public Double fromString(String s) {\n+        if (s.equals(\"None\")) {\n+          return 0d;\n+        }\n+        return 127d;\n+      }\n+    };\n+  }\n+\n+  private void initWaterSlider() {\n+    GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n+    double waterDensityProperty = generatorPrefs.getWaterDensityProperty();\n+    boolean waterRandomProperty = generatorPrefs.getWaterRandomProperty();\n+    waterSlider.setLabelFormatter(getLabelConverter());\n+    waterRandom.setSelected(waterRandomProperty);\n+    waterSlider.setValue(waterDensityProperty);\n+    waterBox.visibleProperty().bind(waterRandom.selectedProperty().not());\n+    generatorPrefs.waterDensityPropertyProperty().bind(waterSlider.valueProperty());\n+    generatorPrefs.waterRandomPropertyProperty().bind(waterRandom.selectedProperty());\n+  }\n+\n+  private void initPlateauSlider() {\n+    GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n+    double plateauDensityProperty = generatorPrefs.getPlateauDensityProperty();\n+    boolean plateauRandomProperty = generatorPrefs.getPlateauRandomProperty();\n+    plateauSlider.setLabelFormatter(getLabelConverter());\n+    plateauRandom.setSelected(plateauRandomProperty);\n+    plateauSlider.setValue(plateauDensityProperty);\n+    plateauBox.visibleProperty().bind(plateauRandom.selectedProperty().not());\n+    generatorPrefs.plateauDensityPropertyProperty().bind(plateauSlider.valueProperty());\n+    generatorPrefs.plateauRandomPropertyProperty().bind(plateauRandom.selectedProperty());\n+  }\n+\n+  private void initMountainSlider() {\n+    GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n+    double mountainDensityProperty = generatorPrefs.getMountainDensityProperty();\n+    boolean mountainRandomProperty = generatorPrefs.getMountainRandomProperty();\n+    mountainSlider.setLabelFormatter(getLabelConverter());\n+    mountainRandom.setSelected(mountainRandomProperty);\n+    mountainSlider.setValue(mountainDensityProperty);\n+    mountainBox.visibleProperty().bind(mountainRandom.selectedProperty().not());\n+    generatorPrefs.mountainDensityPropertyProperty().bind(mountainSlider.valueProperty());\n+    generatorPrefs.mountainRandomPropertyProperty().bind(mountainRandom.selectedProperty());\n+  }\n+\n+  private void initRampSlider() {\n+    GeneratorPrefs generatorPrefs = preferencesService.getPreferences().getGeneratorPrefs();\n+    double rampDensityProperty = generatorPrefs.getRampDensityProperty();\n+    boolean rampRandomProperty = generatorPrefs.getRampRandomProperty();\n+    rampSlider.setLabelFormatter(getLabelConverter());\n+    rampRandom.setSelected(rampRandomProperty);\n+    rampSlider.setValue(rampDensityProperty);\n+    rampBox.visibleProperty().bind(rampRandom.selectedProperty().not());\n+    generatorPrefs.rampDensityPropertyProperty().bind(rampSlider.valueProperty());\n+    generatorPrefs.rampRandomPropertyProperty().bind(rampRandom.selectedProperty());\n+  }\n+\n+  private byte getSliderValue(Slider slider, CheckBox checkBox) {\n+    if (checkBox.isSelected()) {\n+      return (byte) new Random().nextInt(127);\n+    }\n+    return (byte) slider.getValue();\n+  }\n+\n+  protected byte[] getOptionArray() {\n+    byte spawnCount = spawnCountSpinner.getValue().byteValue();\n+    byte landDensity = (byte) (Byte.MAX_VALUE - getSliderValue(waterSlider, waterRandom));\n+    byte plateauDensity = getSliderValue(plateauSlider, plateauRandom);\n+    byte mountainDensity = getSliderValue(mountainSlider, mountainRandom);\n+    byte rampDensity = getSliderValue(rampSlider, rampRandom);\n+    return new byte[]{spawnCount, landDensity, plateauDensity, mountainDensity, rampDensity};\n+  }\n+\n+  public void onCloseButtonClicked() {\n+    onCloseButtonClickedListener.run();\n+  }\n+\n+  public void onGenerateMapButtonClicked() {\n+    onGenerateMap();\n+  }\n+\n+  public void onGenerateMap() {\n+      if (!previousMapName.getText().isEmpty()) {\n+        mapGeneratorService.generateMap(previousMapName.getText())\n+            .thenAccept(mapName -> Platform.runLater(() -> {\n+              createGameController.initMapSelection();\n+              createGameController.mapListView.getItems().stream()\n+                  .filter(mapBean -> mapBean.getFolderName().equalsIgnoreCase(mapName))\n+                  .findAny().ifPresent(mapBean -> {\n+                createGameController.mapListView.getSelectionModel().select(mapBean);\n+                createGameController.mapListView.scrollTo(mapBean);\n+                createGameController.setSelectedMap(mapBean);\n+              });\n+            }))\n+            .exceptionally(throwable -> {\n+              handleGenerationException(throwable);\n+              return null;\n+            });\n+      } else {\n+        byte[] optionArray = getOptionArray();\n+        mapGeneratorService.generateMap(optionArray)\n+            .thenAccept(mapName -> Platform.runLater(() -> {\n+              createGameController.initMapSelection();\n+              createGameController.mapListView.getItems().stream()\n+                  .filter(mapBean -> mapBean.getFolderName().equalsIgnoreCase(mapName))\n+                  .findAny().ifPresent(mapBean -> {\n+                createGameController.mapListView.getSelectionModel().select(mapBean);\n+                createGameController.mapListView.scrollTo(mapBean);\n+                createGameController.setSelectedMap(mapBean);\n+              });\n+            }))\n+            .exceptionally(throwable -> {\n+              handleGenerationException(throwable);\n+              return null;\n+            });\n+      }\n+    onCloseButtonClickedListener.run();\n+  }\n+\n+  private void handleGenerationException(Throwable e) {\n+    Throwable cause = e.getCause();\n+    if (cause instanceof IllegalArgumentException) {\n+      String msg = cause.getMessage();\n+      if (msg.startsWith(\"New Version\")) {\n+        notificationService.addImmediateErrorNotification(cause, \"mapGenerator.tooNewVersion\");\n+        log.warn(\"Map generation failed\", cause);\n+      } else if (msg.startsWith(\"Old Version\")) {\n+        notificationService.addImmediateErrorNotification(cause, \"mapGenerator.tooOldVersion\");\n+        log.warn(\"Map generation failed\", cause);\n+      } else {\n+        notificationService.addImmediateErrorNotification(e, \"mapGenerator.generationFailed\");\n+        log.warn(\"Map generation failed\", e);\n+      }", "originalCommit": "ad111030f097fefa0c5b5f827bbb86eb42660c52", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc5MzAxMA==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r452793010", "bodyText": "Done. Used concrete exceptions.", "author": "Sheikah45", "createdAt": "2020-07-10T11:44:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc0Mzk0Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc0NDQyMA==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r452744420", "bodyText": "Don't break the Java naming convention\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private String tag_name;\n          \n          \n            \n              @JsonProperty(\"tag_name\")\n          \n          \n            \n              private String tagName;", "author": "micheljung", "createdAt": "2020-07-10T09:52:55Z", "path": "src/main/java/com/faforever/client/map/generator/GithubGeneratorRelease.java", "diffHunk": "@@ -0,0 +1,13 @@\n+package com.faforever.client.map.generator;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import lombok.Data;\n+\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+@Data\n+public class GithubGeneratorRelease {\n+  private String tag_name;", "originalCommit": "ad111030f097fefa0c5b5f827bbb86eb42660c52", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc5MzA0NQ==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r452793045", "bodyText": "Done", "author": "Sheikah45", "createdAt": "2020-07-10T11:44:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc0NDQyMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc0NTIxOA==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r452745218", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                throw new RuntimeException(\"No Valid Generator Version Found\");\n          \n          \n            \n                throw new RuntimeException(\"No valid generator version found\");", "author": "micheljung", "createdAt": "2020-07-10T09:54:32Z", "path": "src/main/java/com/faforever/client/map/generator/MapGeneratorService.java", "diffHunk": "@@ -107,62 +115,128 @@ private void deleteGeneratedMaps() {\n     }\n   }\n \n-\n   public CompletableFuture<String> generateMap() {\n-    return generateMap(queryNewestVersion(), seedGenerator.nextLong());\n+    ByteBuffer seedBuffer = ByteBuffer.allocate(8);\n+    seedBuffer.putLong(seedGenerator.nextLong());\n+    String seedString = Base64.getEncoder().encodeToString(seedBuffer.array());\n+    return generateMap(generatorVersion, seedString);\n+  }\n+\n+  public CompletableFuture<String> generateMap(byte[] optionArray) {\n+    return generateMap(generatorVersion, optionArray);\n+  }\n+\n+  public CompletableFuture<String> generateMap(String version, byte[] optionArray) {\n+    return generateMap(new ComparableVersion(version), optionArray);\n+  }\n+\n+  public CompletableFuture<String> generateMap(ComparableVersion version, byte[] optionArray) {\n+    ByteBuffer seedBuffer = ByteBuffer.allocate(8);\n+    seedBuffer.putLong(seedGenerator.nextLong());\n+    String seedString = Base64.getEncoder().encodeToString(seedBuffer.array());\n+    String optionString = Base64.getEncoder().encodeToString(optionArray);\n+    return generateMap(version, seedString + '_' + optionString);\n   }\n \n   @VisibleForTesting\n-  protected String queryNewestVersion() {\n+  @Cacheable(CacheNames.MAP_GENERATOR)\n+  public ComparableVersion queryMaxSupportedVersion() {\n+    ComparableVersion version = new ComparableVersion(\"\");\n+    ComparableVersion minVersion = new ComparableVersion(String.valueOf(clientProperties.getMapGenerator().getMinSupportedMajorVersion()));\n+    ComparableVersion maxVersion = new ComparableVersion(String.valueOf(clientProperties.getMapGenerator().getMaxSupportedMajorVersion() + 1));\n+\n     RestTemplate restTemplate = new RestTemplate();\n \n     LinkedMultiValueMap<String, String> headers = new LinkedMultiValueMap<>();\n     headers.add(\"Accept\", \"application/vnd.github.v3+json\");\n     HttpEntity<String> entity = new HttpEntity<>(null, headers);\n \n-    ResponseEntity<String> response = restTemplate.exchange(clientProperties.getMapGenerator().getQueryLatestVersionUrl(), HttpMethod.GET, entity, String.class);\n-    JsonElement jsonElement = new JsonParser().parse(response.getBody());\n-    JsonObject mainObject = jsonElement.getAsJsonObject();\n-\n-    return mainObject.get(\"tag_name\").getAsString();\n+    ResponseEntity<List<GithubGeneratorRelease>> response = restTemplate.exchange(clientProperties.getMapGenerator().getQueryVersionsUrl(), HttpMethod.GET, entity, new ParameterizedTypeReference<>() {\n+    });\n+    List<GithubGeneratorRelease> releases = response.getBody();\n+    for (GithubGeneratorRelease release : releases) {\n+      version.parseVersion(release.getTag_name());\n+      if (version.compareTo(maxVersion) < 0 && minVersion.compareTo(version) < 0) {\n+        return version;\n+      }\n+    }\n+    throw new RuntimeException(\"No Valid Generator Version Found\");", "originalCommit": "ad111030f097fefa0c5b5f827bbb86eb42660c52", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc5MzA5Mg==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r452793092", "bodyText": "Done", "author": "Sheikah45", "createdAt": "2020-07-10T11:45:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc0NTIxOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc0NjI1Mg==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r452746252", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  CompletableFuture<String> errorFuture = new CompletableFuture<>();\n          \n          \n            \n                  errorFuture.completeExceptionally(new IllegalArgumentException(\"Map name is not a generated map\"));\n          \n          \n            \n                  return errorFuture;\n          \n          \n            \n                  return CompletableFuture.failedFuture(new IllegalArgumentException(\"Map name is not a generated map\"));", "author": "micheljung", "createdAt": "2020-07-10T09:56:32Z", "path": "src/main/java/com/faforever/client/map/generator/MapGeneratorService.java", "diffHunk": "@@ -107,62 +115,128 @@ private void deleteGeneratedMaps() {\n     }\n   }\n \n-\n   public CompletableFuture<String> generateMap() {\n-    return generateMap(queryNewestVersion(), seedGenerator.nextLong());\n+    ByteBuffer seedBuffer = ByteBuffer.allocate(8);\n+    seedBuffer.putLong(seedGenerator.nextLong());\n+    String seedString = Base64.getEncoder().encodeToString(seedBuffer.array());\n+    return generateMap(generatorVersion, seedString);\n+  }\n+\n+  public CompletableFuture<String> generateMap(byte[] optionArray) {\n+    return generateMap(generatorVersion, optionArray);\n+  }\n+\n+  public CompletableFuture<String> generateMap(String version, byte[] optionArray) {\n+    return generateMap(new ComparableVersion(version), optionArray);\n+  }\n+\n+  public CompletableFuture<String> generateMap(ComparableVersion version, byte[] optionArray) {\n+    ByteBuffer seedBuffer = ByteBuffer.allocate(8);\n+    seedBuffer.putLong(seedGenerator.nextLong());\n+    String seedString = Base64.getEncoder().encodeToString(seedBuffer.array());\n+    String optionString = Base64.getEncoder().encodeToString(optionArray);\n+    return generateMap(version, seedString + '_' + optionString);\n   }\n \n   @VisibleForTesting\n-  protected String queryNewestVersion() {\n+  @Cacheable(CacheNames.MAP_GENERATOR)\n+  public ComparableVersion queryMaxSupportedVersion() {\n+    ComparableVersion version = new ComparableVersion(\"\");\n+    ComparableVersion minVersion = new ComparableVersion(String.valueOf(clientProperties.getMapGenerator().getMinSupportedMajorVersion()));\n+    ComparableVersion maxVersion = new ComparableVersion(String.valueOf(clientProperties.getMapGenerator().getMaxSupportedMajorVersion() + 1));\n+\n     RestTemplate restTemplate = new RestTemplate();\n \n     LinkedMultiValueMap<String, String> headers = new LinkedMultiValueMap<>();\n     headers.add(\"Accept\", \"application/vnd.github.v3+json\");\n     HttpEntity<String> entity = new HttpEntity<>(null, headers);\n \n-    ResponseEntity<String> response = restTemplate.exchange(clientProperties.getMapGenerator().getQueryLatestVersionUrl(), HttpMethod.GET, entity, String.class);\n-    JsonElement jsonElement = new JsonParser().parse(response.getBody());\n-    JsonObject mainObject = jsonElement.getAsJsonObject();\n-\n-    return mainObject.get(\"tag_name\").getAsString();\n+    ResponseEntity<List<GithubGeneratorRelease>> response = restTemplate.exchange(clientProperties.getMapGenerator().getQueryVersionsUrl(), HttpMethod.GET, entity, new ParameterizedTypeReference<>() {\n+    });\n+    List<GithubGeneratorRelease> releases = response.getBody();\n+    for (GithubGeneratorRelease release : releases) {\n+      version.parseVersion(release.getTag_name());\n+      if (version.compareTo(maxVersion) < 0 && minVersion.compareTo(version) < 0) {\n+        return version;\n+      }\n+    }\n+    throw new RuntimeException(\"No Valid Generator Version Found\");\n   }\n \n   public CompletableFuture<String> generateMap(String mapName) {\n     Matcher matcher = GENERATED_MAP_PATTERN.matcher(mapName);\n     if (!matcher.find()) {\n-      throw new IllegalArgumentException(\"Map name is not a generated map\");\n+      CompletableFuture<String> errorFuture = new CompletableFuture<>();\n+      errorFuture.completeExceptionally(new IllegalArgumentException(\"Map name is not a generated map\"));\n+      return errorFuture;", "originalCommit": "ad111030f097fefa0c5b5f827bbb86eb42660c52", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc5MzE0Mg==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r452793142", "bodyText": "Done", "author": "Sheikah45", "createdAt": "2020-07-10T11:45:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc0NjI1Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc0NjUzMw==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r452746533", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  CompletableFuture<String> errorFuture = new CompletableFuture<>();\n          \n          \n            \n                  errorFuture.completeExceptionally(new IllegalArgumentException(\"New Version not supported\"));\n          \n          \n            \n                  return errorFuture;\n          \n          \n            \n                  return CompletableFuture.failedFuture(new IllegalArgumentException(\"New version not supported\"));", "author": "micheljung", "createdAt": "2020-07-10T09:57:10Z", "path": "src/main/java/com/faforever/client/map/generator/MapGeneratorService.java", "diffHunk": "@@ -107,62 +115,128 @@ private void deleteGeneratedMaps() {\n     }\n   }\n \n-\n   public CompletableFuture<String> generateMap() {\n-    return generateMap(queryNewestVersion(), seedGenerator.nextLong());\n+    ByteBuffer seedBuffer = ByteBuffer.allocate(8);\n+    seedBuffer.putLong(seedGenerator.nextLong());\n+    String seedString = Base64.getEncoder().encodeToString(seedBuffer.array());\n+    return generateMap(generatorVersion, seedString);\n+  }\n+\n+  public CompletableFuture<String> generateMap(byte[] optionArray) {\n+    return generateMap(generatorVersion, optionArray);\n+  }\n+\n+  public CompletableFuture<String> generateMap(String version, byte[] optionArray) {\n+    return generateMap(new ComparableVersion(version), optionArray);\n+  }\n+\n+  public CompletableFuture<String> generateMap(ComparableVersion version, byte[] optionArray) {\n+    ByteBuffer seedBuffer = ByteBuffer.allocate(8);\n+    seedBuffer.putLong(seedGenerator.nextLong());\n+    String seedString = Base64.getEncoder().encodeToString(seedBuffer.array());\n+    String optionString = Base64.getEncoder().encodeToString(optionArray);\n+    return generateMap(version, seedString + '_' + optionString);\n   }\n \n   @VisibleForTesting\n-  protected String queryNewestVersion() {\n+  @Cacheable(CacheNames.MAP_GENERATOR)\n+  public ComparableVersion queryMaxSupportedVersion() {\n+    ComparableVersion version = new ComparableVersion(\"\");\n+    ComparableVersion minVersion = new ComparableVersion(String.valueOf(clientProperties.getMapGenerator().getMinSupportedMajorVersion()));\n+    ComparableVersion maxVersion = new ComparableVersion(String.valueOf(clientProperties.getMapGenerator().getMaxSupportedMajorVersion() + 1));\n+\n     RestTemplate restTemplate = new RestTemplate();\n \n     LinkedMultiValueMap<String, String> headers = new LinkedMultiValueMap<>();\n     headers.add(\"Accept\", \"application/vnd.github.v3+json\");\n     HttpEntity<String> entity = new HttpEntity<>(null, headers);\n \n-    ResponseEntity<String> response = restTemplate.exchange(clientProperties.getMapGenerator().getQueryLatestVersionUrl(), HttpMethod.GET, entity, String.class);\n-    JsonElement jsonElement = new JsonParser().parse(response.getBody());\n-    JsonObject mainObject = jsonElement.getAsJsonObject();\n-\n-    return mainObject.get(\"tag_name\").getAsString();\n+    ResponseEntity<List<GithubGeneratorRelease>> response = restTemplate.exchange(clientProperties.getMapGenerator().getQueryVersionsUrl(), HttpMethod.GET, entity, new ParameterizedTypeReference<>() {\n+    });\n+    List<GithubGeneratorRelease> releases = response.getBody();\n+    for (GithubGeneratorRelease release : releases) {\n+      version.parseVersion(release.getTag_name());\n+      if (version.compareTo(maxVersion) < 0 && minVersion.compareTo(version) < 0) {\n+        return version;\n+      }\n+    }\n+    throw new RuntimeException(\"No Valid Generator Version Found\");\n   }\n \n   public CompletableFuture<String> generateMap(String mapName) {\n     Matcher matcher = GENERATED_MAP_PATTERN.matcher(mapName);\n     if (!matcher.find()) {\n-      throw new IllegalArgumentException(\"Map name is not a generated map\");\n+      CompletableFuture<String> errorFuture = new CompletableFuture<>();\n+      errorFuture.completeExceptionally(new IllegalArgumentException(\"Map name is not a generated map\"));\n+      return errorFuture;\n     }\n-    return generateMap(matcher.group(1), Long.parseLong(matcher.group(2)));\n+    return generateMap(matcher.group(1), matcher.group(2));\n   }\n \n+  public CompletableFuture<String> generateMap(String version, String seedAndOptions) {\n+    return generateMap(new ComparableVersion(version), seedAndOptions);\n+  }\n \n-  public CompletableFuture<String> generateMap(String version, long seed) {\n+  public CompletableFuture<String> generateMap(ComparableVersion version, String seedAndOptions) {\n \n+    ComparableVersion minVersion = new ComparableVersion(String.valueOf(clientProperties.getMapGenerator().getMinSupportedMajorVersion()));\n+    ComparableVersion maxVersion = new ComparableVersion(String.valueOf(clientProperties.getMapGenerator().getMaxSupportedMajorVersion() + 1));\n+    if (version.compareTo(maxVersion) >= 0) {\n+      CompletableFuture<String> errorFuture = new CompletableFuture<>();\n+      errorFuture.completeExceptionally(new IllegalArgumentException(\"New Version not supported\"));\n+      return errorFuture;", "originalCommit": "ad111030f097fefa0c5b5f827bbb86eb42660c52", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc5MzE5OA==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r452793198", "bodyText": "Done", "author": "Sheikah45", "createdAt": "2020-07-10T11:45:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc0NjUzMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc0NjcxOA==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r452746718", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                   CompletableFuture<String> errorFuture = new CompletableFuture<>();\n          \n          \n            \n                   errorFuture.completeExceptionally(new IllegalArgumentException(\"Old Version not supported\"));\n          \n          \n            \n                   return errorFuture;\n          \n          \n            \n                  return CompletableFuture.failedFuture(new IllegalArgumentException(\"Old Version not supported\"));", "author": "micheljung", "createdAt": "2020-07-10T09:57:31Z", "path": "src/main/java/com/faforever/client/map/generator/MapGeneratorService.java", "diffHunk": "@@ -107,62 +115,128 @@ private void deleteGeneratedMaps() {\n     }\n   }\n \n-\n   public CompletableFuture<String> generateMap() {\n-    return generateMap(queryNewestVersion(), seedGenerator.nextLong());\n+    ByteBuffer seedBuffer = ByteBuffer.allocate(8);\n+    seedBuffer.putLong(seedGenerator.nextLong());\n+    String seedString = Base64.getEncoder().encodeToString(seedBuffer.array());\n+    return generateMap(generatorVersion, seedString);\n+  }\n+\n+  public CompletableFuture<String> generateMap(byte[] optionArray) {\n+    return generateMap(generatorVersion, optionArray);\n+  }\n+\n+  public CompletableFuture<String> generateMap(String version, byte[] optionArray) {\n+    return generateMap(new ComparableVersion(version), optionArray);\n+  }\n+\n+  public CompletableFuture<String> generateMap(ComparableVersion version, byte[] optionArray) {\n+    ByteBuffer seedBuffer = ByteBuffer.allocate(8);\n+    seedBuffer.putLong(seedGenerator.nextLong());\n+    String seedString = Base64.getEncoder().encodeToString(seedBuffer.array());\n+    String optionString = Base64.getEncoder().encodeToString(optionArray);\n+    return generateMap(version, seedString + '_' + optionString);\n   }\n \n   @VisibleForTesting\n-  protected String queryNewestVersion() {\n+  @Cacheable(CacheNames.MAP_GENERATOR)\n+  public ComparableVersion queryMaxSupportedVersion() {\n+    ComparableVersion version = new ComparableVersion(\"\");\n+    ComparableVersion minVersion = new ComparableVersion(String.valueOf(clientProperties.getMapGenerator().getMinSupportedMajorVersion()));\n+    ComparableVersion maxVersion = new ComparableVersion(String.valueOf(clientProperties.getMapGenerator().getMaxSupportedMajorVersion() + 1));\n+\n     RestTemplate restTemplate = new RestTemplate();\n \n     LinkedMultiValueMap<String, String> headers = new LinkedMultiValueMap<>();\n     headers.add(\"Accept\", \"application/vnd.github.v3+json\");\n     HttpEntity<String> entity = new HttpEntity<>(null, headers);\n \n-    ResponseEntity<String> response = restTemplate.exchange(clientProperties.getMapGenerator().getQueryLatestVersionUrl(), HttpMethod.GET, entity, String.class);\n-    JsonElement jsonElement = new JsonParser().parse(response.getBody());\n-    JsonObject mainObject = jsonElement.getAsJsonObject();\n-\n-    return mainObject.get(\"tag_name\").getAsString();\n+    ResponseEntity<List<GithubGeneratorRelease>> response = restTemplate.exchange(clientProperties.getMapGenerator().getQueryVersionsUrl(), HttpMethod.GET, entity, new ParameterizedTypeReference<>() {\n+    });\n+    List<GithubGeneratorRelease> releases = response.getBody();\n+    for (GithubGeneratorRelease release : releases) {\n+      version.parseVersion(release.getTag_name());\n+      if (version.compareTo(maxVersion) < 0 && minVersion.compareTo(version) < 0) {\n+        return version;\n+      }\n+    }\n+    throw new RuntimeException(\"No Valid Generator Version Found\");\n   }\n \n   public CompletableFuture<String> generateMap(String mapName) {\n     Matcher matcher = GENERATED_MAP_PATTERN.matcher(mapName);\n     if (!matcher.find()) {\n-      throw new IllegalArgumentException(\"Map name is not a generated map\");\n+      CompletableFuture<String> errorFuture = new CompletableFuture<>();\n+      errorFuture.completeExceptionally(new IllegalArgumentException(\"Map name is not a generated map\"));\n+      return errorFuture;\n     }\n-    return generateMap(matcher.group(1), Long.parseLong(matcher.group(2)));\n+    return generateMap(matcher.group(1), matcher.group(2));\n   }\n \n+  public CompletableFuture<String> generateMap(String version, String seedAndOptions) {\n+    return generateMap(new ComparableVersion(version), seedAndOptions);\n+  }\n \n-  public CompletableFuture<String> generateMap(String version, long seed) {\n+  public CompletableFuture<String> generateMap(ComparableVersion version, String seedAndOptions) {\n \n+    ComparableVersion minVersion = new ComparableVersion(String.valueOf(clientProperties.getMapGenerator().getMinSupportedMajorVersion()));\n+    ComparableVersion maxVersion = new ComparableVersion(String.valueOf(clientProperties.getMapGenerator().getMaxSupportedMajorVersion() + 1));\n+    if (version.compareTo(maxVersion) >= 0) {\n+      CompletableFuture<String> errorFuture = new CompletableFuture<>();\n+      errorFuture.completeExceptionally(new IllegalArgumentException(\"New Version not supported\"));\n+      return errorFuture;\n+    }\n+    if (version.compareTo(minVersion) < 0) {\n+       CompletableFuture<String> errorFuture = new CompletableFuture<>();\n+       errorFuture.completeExceptionally(new IllegalArgumentException(\"Old Version not supported\"));\n+       return errorFuture;", "originalCommit": "ad111030f097fefa0c5b5f827bbb86eb42660c52", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc5Mjg2OQ==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r452792869", "bodyText": "Done", "author": "Sheikah45", "createdAt": "2020-07-10T11:44:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc0NjcxOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc0NzE4OQ==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r452747189", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    CompletableFuture<String> errorFuture = new CompletableFuture<>();\n          \n          \n            \n                    errorFuture.completeExceptionally(new RuntimeException(\"Unsupported generator version: \" + version));\n          \n          \n            \n                    return errorFuture;\n          \n          \n            \n                    return CompletableFuture.failedFuture(new RuntimeException(\"Unsupported generator version: \" + version));", "author": "micheljung", "createdAt": "2020-07-10T09:58:28Z", "path": "src/main/java/com/faforever/client/map/generator/MapGeneratorService.java", "diffHunk": "@@ -107,62 +115,128 @@ private void deleteGeneratedMaps() {\n     }\n   }\n \n-\n   public CompletableFuture<String> generateMap() {\n-    return generateMap(queryNewestVersion(), seedGenerator.nextLong());\n+    ByteBuffer seedBuffer = ByteBuffer.allocate(8);\n+    seedBuffer.putLong(seedGenerator.nextLong());\n+    String seedString = Base64.getEncoder().encodeToString(seedBuffer.array());\n+    return generateMap(generatorVersion, seedString);\n+  }\n+\n+  public CompletableFuture<String> generateMap(byte[] optionArray) {\n+    return generateMap(generatorVersion, optionArray);\n+  }\n+\n+  public CompletableFuture<String> generateMap(String version, byte[] optionArray) {\n+    return generateMap(new ComparableVersion(version), optionArray);\n+  }\n+\n+  public CompletableFuture<String> generateMap(ComparableVersion version, byte[] optionArray) {\n+    ByteBuffer seedBuffer = ByteBuffer.allocate(8);\n+    seedBuffer.putLong(seedGenerator.nextLong());\n+    String seedString = Base64.getEncoder().encodeToString(seedBuffer.array());\n+    String optionString = Base64.getEncoder().encodeToString(optionArray);\n+    return generateMap(version, seedString + '_' + optionString);\n   }\n \n   @VisibleForTesting\n-  protected String queryNewestVersion() {\n+  @Cacheable(CacheNames.MAP_GENERATOR)\n+  public ComparableVersion queryMaxSupportedVersion() {\n+    ComparableVersion version = new ComparableVersion(\"\");\n+    ComparableVersion minVersion = new ComparableVersion(String.valueOf(clientProperties.getMapGenerator().getMinSupportedMajorVersion()));\n+    ComparableVersion maxVersion = new ComparableVersion(String.valueOf(clientProperties.getMapGenerator().getMaxSupportedMajorVersion() + 1));\n+\n     RestTemplate restTemplate = new RestTemplate();\n \n     LinkedMultiValueMap<String, String> headers = new LinkedMultiValueMap<>();\n     headers.add(\"Accept\", \"application/vnd.github.v3+json\");\n     HttpEntity<String> entity = new HttpEntity<>(null, headers);\n \n-    ResponseEntity<String> response = restTemplate.exchange(clientProperties.getMapGenerator().getQueryLatestVersionUrl(), HttpMethod.GET, entity, String.class);\n-    JsonElement jsonElement = new JsonParser().parse(response.getBody());\n-    JsonObject mainObject = jsonElement.getAsJsonObject();\n-\n-    return mainObject.get(\"tag_name\").getAsString();\n+    ResponseEntity<List<GithubGeneratorRelease>> response = restTemplate.exchange(clientProperties.getMapGenerator().getQueryVersionsUrl(), HttpMethod.GET, entity, new ParameterizedTypeReference<>() {\n+    });\n+    List<GithubGeneratorRelease> releases = response.getBody();\n+    for (GithubGeneratorRelease release : releases) {\n+      version.parseVersion(release.getTag_name());\n+      if (version.compareTo(maxVersion) < 0 && minVersion.compareTo(version) < 0) {\n+        return version;\n+      }\n+    }\n+    throw new RuntimeException(\"No Valid Generator Version Found\");\n   }\n \n   public CompletableFuture<String> generateMap(String mapName) {\n     Matcher matcher = GENERATED_MAP_PATTERN.matcher(mapName);\n     if (!matcher.find()) {\n-      throw new IllegalArgumentException(\"Map name is not a generated map\");\n+      CompletableFuture<String> errorFuture = new CompletableFuture<>();\n+      errorFuture.completeExceptionally(new IllegalArgumentException(\"Map name is not a generated map\"));\n+      return errorFuture;\n     }\n-    return generateMap(matcher.group(1), Long.parseLong(matcher.group(2)));\n+    return generateMap(matcher.group(1), matcher.group(2));\n   }\n \n+  public CompletableFuture<String> generateMap(String version, String seedAndOptions) {\n+    return generateMap(new ComparableVersion(version), seedAndOptions);\n+  }\n \n-  public CompletableFuture<String> generateMap(String version, long seed) {\n+  public CompletableFuture<String> generateMap(ComparableVersion version, String seedAndOptions) {\n \n+    ComparableVersion minVersion = new ComparableVersion(String.valueOf(clientProperties.getMapGenerator().getMinSupportedMajorVersion()));\n+    ComparableVersion maxVersion = new ComparableVersion(String.valueOf(clientProperties.getMapGenerator().getMaxSupportedMajorVersion() + 1));\n+    if (version.compareTo(maxVersion) >= 0) {\n+      CompletableFuture<String> errorFuture = new CompletableFuture<>();\n+      errorFuture.completeExceptionally(new IllegalArgumentException(\"New Version not supported\"));\n+      return errorFuture;\n+    }\n+    if (version.compareTo(minVersion) < 0) {\n+       CompletableFuture<String> errorFuture = new CompletableFuture<>();\n+       errorFuture.completeExceptionally(new IllegalArgumentException(\"Old Version not supported\"));\n+       return errorFuture;\n+    }\n     String generatorExecutableFileName = String.format(GENERATOR_EXECUTABLE_FILENAME, version);\n     Path generatorExecutablePath = this.generatorExecutablePath.resolve(generatorExecutableFileName);\n \n     CompletableFuture<Void> downloadGeneratorFuture;\n     if (!Files.exists(generatorExecutablePath)) {\n-      if (!VERSION_PATTERN.matcher(version).matches()) {\n-        log.error(\"Unsupported generator version: {}\", version);\n-        return CompletableFuture.supplyAsync(() -> {\n-          throw new RuntimeException(\"Unsupported generator version: \" + version);\n-        });\n+      if (!VERSION_PATTERN.matcher(version.toString()).matches()) {\n+        log.warn(\"Unsupported generator version: {}\", version);\n+        CompletableFuture<String> errorFuture = new CompletableFuture<>();\n+        errorFuture.completeExceptionally(new RuntimeException(\"Unsupported generator version: \" + version));\n+        return errorFuture;", "originalCommit": "ad111030f097fefa0c5b5f827bbb86eb42660c52", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc5Mjg1MQ==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r452792851", "bodyText": "Done", "author": "Sheikah45", "createdAt": "2020-07-10T11:44:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc0NzE4OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc0NzQxMA==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r452747410", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                }\n          \n          \n            \n                catch (NumberFormatException nfe) {\n          \n          \n            \n                } catch (NumberFormatException nfe) {", "author": "micheljung", "createdAt": "2020-07-10T09:59:00Z", "path": "src/main/java/com/faforever/client/map/generator/MapGeneratorService.java", "diffHunk": "@@ -107,62 +115,128 @@ private void deleteGeneratedMaps() {\n     }\n   }\n \n-\n   public CompletableFuture<String> generateMap() {\n-    return generateMap(queryNewestVersion(), seedGenerator.nextLong());\n+    ByteBuffer seedBuffer = ByteBuffer.allocate(8);\n+    seedBuffer.putLong(seedGenerator.nextLong());\n+    String seedString = Base64.getEncoder().encodeToString(seedBuffer.array());\n+    return generateMap(generatorVersion, seedString);\n+  }\n+\n+  public CompletableFuture<String> generateMap(byte[] optionArray) {\n+    return generateMap(generatorVersion, optionArray);\n+  }\n+\n+  public CompletableFuture<String> generateMap(String version, byte[] optionArray) {\n+    return generateMap(new ComparableVersion(version), optionArray);\n+  }\n+\n+  public CompletableFuture<String> generateMap(ComparableVersion version, byte[] optionArray) {\n+    ByteBuffer seedBuffer = ByteBuffer.allocate(8);\n+    seedBuffer.putLong(seedGenerator.nextLong());\n+    String seedString = Base64.getEncoder().encodeToString(seedBuffer.array());\n+    String optionString = Base64.getEncoder().encodeToString(optionArray);\n+    return generateMap(version, seedString + '_' + optionString);\n   }\n \n   @VisibleForTesting\n-  protected String queryNewestVersion() {\n+  @Cacheable(CacheNames.MAP_GENERATOR)\n+  public ComparableVersion queryMaxSupportedVersion() {\n+    ComparableVersion version = new ComparableVersion(\"\");\n+    ComparableVersion minVersion = new ComparableVersion(String.valueOf(clientProperties.getMapGenerator().getMinSupportedMajorVersion()));\n+    ComparableVersion maxVersion = new ComparableVersion(String.valueOf(clientProperties.getMapGenerator().getMaxSupportedMajorVersion() + 1));\n+\n     RestTemplate restTemplate = new RestTemplate();\n \n     LinkedMultiValueMap<String, String> headers = new LinkedMultiValueMap<>();\n     headers.add(\"Accept\", \"application/vnd.github.v3+json\");\n     HttpEntity<String> entity = new HttpEntity<>(null, headers);\n \n-    ResponseEntity<String> response = restTemplate.exchange(clientProperties.getMapGenerator().getQueryLatestVersionUrl(), HttpMethod.GET, entity, String.class);\n-    JsonElement jsonElement = new JsonParser().parse(response.getBody());\n-    JsonObject mainObject = jsonElement.getAsJsonObject();\n-\n-    return mainObject.get(\"tag_name\").getAsString();\n+    ResponseEntity<List<GithubGeneratorRelease>> response = restTemplate.exchange(clientProperties.getMapGenerator().getQueryVersionsUrl(), HttpMethod.GET, entity, new ParameterizedTypeReference<>() {\n+    });\n+    List<GithubGeneratorRelease> releases = response.getBody();\n+    for (GithubGeneratorRelease release : releases) {\n+      version.parseVersion(release.getTag_name());\n+      if (version.compareTo(maxVersion) < 0 && minVersion.compareTo(version) < 0) {\n+        return version;\n+      }\n+    }\n+    throw new RuntimeException(\"No Valid Generator Version Found\");\n   }\n \n   public CompletableFuture<String> generateMap(String mapName) {\n     Matcher matcher = GENERATED_MAP_PATTERN.matcher(mapName);\n     if (!matcher.find()) {\n-      throw new IllegalArgumentException(\"Map name is not a generated map\");\n+      CompletableFuture<String> errorFuture = new CompletableFuture<>();\n+      errorFuture.completeExceptionally(new IllegalArgumentException(\"Map name is not a generated map\"));\n+      return errorFuture;\n     }\n-    return generateMap(matcher.group(1), Long.parseLong(matcher.group(2)));\n+    return generateMap(matcher.group(1), matcher.group(2));\n   }\n \n+  public CompletableFuture<String> generateMap(String version, String seedAndOptions) {\n+    return generateMap(new ComparableVersion(version), seedAndOptions);\n+  }\n \n-  public CompletableFuture<String> generateMap(String version, long seed) {\n+  public CompletableFuture<String> generateMap(ComparableVersion version, String seedAndOptions) {\n \n+    ComparableVersion minVersion = new ComparableVersion(String.valueOf(clientProperties.getMapGenerator().getMinSupportedMajorVersion()));\n+    ComparableVersion maxVersion = new ComparableVersion(String.valueOf(clientProperties.getMapGenerator().getMaxSupportedMajorVersion() + 1));\n+    if (version.compareTo(maxVersion) >= 0) {\n+      CompletableFuture<String> errorFuture = new CompletableFuture<>();\n+      errorFuture.completeExceptionally(new IllegalArgumentException(\"New Version not supported\"));\n+      return errorFuture;\n+    }\n+    if (version.compareTo(minVersion) < 0) {\n+       CompletableFuture<String> errorFuture = new CompletableFuture<>();\n+       errorFuture.completeExceptionally(new IllegalArgumentException(\"Old Version not supported\"));\n+       return errorFuture;\n+    }\n     String generatorExecutableFileName = String.format(GENERATOR_EXECUTABLE_FILENAME, version);\n     Path generatorExecutablePath = this.generatorExecutablePath.resolve(generatorExecutableFileName);\n \n     CompletableFuture<Void> downloadGeneratorFuture;\n     if (!Files.exists(generatorExecutablePath)) {\n-      if (!VERSION_PATTERN.matcher(version).matches()) {\n-        log.error(\"Unsupported generator version: {}\", version);\n-        return CompletableFuture.supplyAsync(() -> {\n-          throw new RuntimeException(\"Unsupported generator version: \" + version);\n-        });\n+      if (!VERSION_PATTERN.matcher(version.toString()).matches()) {\n+        log.warn(\"Unsupported generator version: {}\", version);\n+        CompletableFuture<String> errorFuture = new CompletableFuture<>();\n+        errorFuture.completeExceptionally(new RuntimeException(\"Unsupported generator version: \" + version));\n+        return errorFuture;\n       }\n \n       log.info(\"Downloading MapGenerator version: {}\", version);\n       DownloadMapGeneratorTask downloadMapGeneratorTask = applicationContext.getBean(DownloadMapGeneratorTask.class);\n-      downloadMapGeneratorTask.setVersion(version);\n+      downloadMapGeneratorTask.setVersion(version.toString());\n       downloadGeneratorFuture = taskService.submitTask(downloadMapGeneratorTask).getFuture();\n     } else {\n       log.info(\"Found MapGenerator version: {}\", version);\n       downloadGeneratorFuture = CompletableFuture.completedFuture(null);\n     }\n \n-    String mapFilename = String.format(GENERATED_MAP_NAME, version, seed);\n+    String[] seedParts = seedAndOptions.split(\"_\");\n+    String seedString = seedParts[0];\n+\n+    String mapFilename;\n+    String seed;\n+\n+    try {\n+      seed = Long.toString(Long.parseLong(seedString));\n+    }\n+    catch (NumberFormatException nfe) {", "originalCommit": "ad111030f097fefa0c5b5f827bbb86eb42660c52", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc5MjgxMg==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r452792812", "bodyText": "Done", "author": "Sheikah45", "createdAt": "2020-07-10T11:44:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc0NzQxMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc0NzY2Ng==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r452747666", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                }\n          \n          \n            \n                else {\n          \n          \n            \n                } else {\n          \n      \n    \n    \n  \n\nPlease make sure that auto-formatting is enabled", "author": "micheljung", "createdAt": "2020-07-10T09:59:29Z", "path": "src/main/java/com/faforever/client/map/generator/MapGeneratorService.java", "diffHunk": "@@ -107,62 +115,128 @@ private void deleteGeneratedMaps() {\n     }\n   }\n \n-\n   public CompletableFuture<String> generateMap() {\n-    return generateMap(queryNewestVersion(), seedGenerator.nextLong());\n+    ByteBuffer seedBuffer = ByteBuffer.allocate(8);\n+    seedBuffer.putLong(seedGenerator.nextLong());\n+    String seedString = Base64.getEncoder().encodeToString(seedBuffer.array());\n+    return generateMap(generatorVersion, seedString);\n+  }\n+\n+  public CompletableFuture<String> generateMap(byte[] optionArray) {\n+    return generateMap(generatorVersion, optionArray);\n+  }\n+\n+  public CompletableFuture<String> generateMap(String version, byte[] optionArray) {\n+    return generateMap(new ComparableVersion(version), optionArray);\n+  }\n+\n+  public CompletableFuture<String> generateMap(ComparableVersion version, byte[] optionArray) {\n+    ByteBuffer seedBuffer = ByteBuffer.allocate(8);\n+    seedBuffer.putLong(seedGenerator.nextLong());\n+    String seedString = Base64.getEncoder().encodeToString(seedBuffer.array());\n+    String optionString = Base64.getEncoder().encodeToString(optionArray);\n+    return generateMap(version, seedString + '_' + optionString);\n   }\n \n   @VisibleForTesting\n-  protected String queryNewestVersion() {\n+  @Cacheable(CacheNames.MAP_GENERATOR)\n+  public ComparableVersion queryMaxSupportedVersion() {\n+    ComparableVersion version = new ComparableVersion(\"\");\n+    ComparableVersion minVersion = new ComparableVersion(String.valueOf(clientProperties.getMapGenerator().getMinSupportedMajorVersion()));\n+    ComparableVersion maxVersion = new ComparableVersion(String.valueOf(clientProperties.getMapGenerator().getMaxSupportedMajorVersion() + 1));\n+\n     RestTemplate restTemplate = new RestTemplate();\n \n     LinkedMultiValueMap<String, String> headers = new LinkedMultiValueMap<>();\n     headers.add(\"Accept\", \"application/vnd.github.v3+json\");\n     HttpEntity<String> entity = new HttpEntity<>(null, headers);\n \n-    ResponseEntity<String> response = restTemplate.exchange(clientProperties.getMapGenerator().getQueryLatestVersionUrl(), HttpMethod.GET, entity, String.class);\n-    JsonElement jsonElement = new JsonParser().parse(response.getBody());\n-    JsonObject mainObject = jsonElement.getAsJsonObject();\n-\n-    return mainObject.get(\"tag_name\").getAsString();\n+    ResponseEntity<List<GithubGeneratorRelease>> response = restTemplate.exchange(clientProperties.getMapGenerator().getQueryVersionsUrl(), HttpMethod.GET, entity, new ParameterizedTypeReference<>() {\n+    });\n+    List<GithubGeneratorRelease> releases = response.getBody();\n+    for (GithubGeneratorRelease release : releases) {\n+      version.parseVersion(release.getTag_name());\n+      if (version.compareTo(maxVersion) < 0 && minVersion.compareTo(version) < 0) {\n+        return version;\n+      }\n+    }\n+    throw new RuntimeException(\"No Valid Generator Version Found\");\n   }\n \n   public CompletableFuture<String> generateMap(String mapName) {\n     Matcher matcher = GENERATED_MAP_PATTERN.matcher(mapName);\n     if (!matcher.find()) {\n-      throw new IllegalArgumentException(\"Map name is not a generated map\");\n+      CompletableFuture<String> errorFuture = new CompletableFuture<>();\n+      errorFuture.completeExceptionally(new IllegalArgumentException(\"Map name is not a generated map\"));\n+      return errorFuture;\n     }\n-    return generateMap(matcher.group(1), Long.parseLong(matcher.group(2)));\n+    return generateMap(matcher.group(1), matcher.group(2));\n   }\n \n+  public CompletableFuture<String> generateMap(String version, String seedAndOptions) {\n+    return generateMap(new ComparableVersion(version), seedAndOptions);\n+  }\n \n-  public CompletableFuture<String> generateMap(String version, long seed) {\n+  public CompletableFuture<String> generateMap(ComparableVersion version, String seedAndOptions) {\n \n+    ComparableVersion minVersion = new ComparableVersion(String.valueOf(clientProperties.getMapGenerator().getMinSupportedMajorVersion()));\n+    ComparableVersion maxVersion = new ComparableVersion(String.valueOf(clientProperties.getMapGenerator().getMaxSupportedMajorVersion() + 1));\n+    if (version.compareTo(maxVersion) >= 0) {\n+      CompletableFuture<String> errorFuture = new CompletableFuture<>();\n+      errorFuture.completeExceptionally(new IllegalArgumentException(\"New Version not supported\"));\n+      return errorFuture;\n+    }\n+    if (version.compareTo(minVersion) < 0) {\n+       CompletableFuture<String> errorFuture = new CompletableFuture<>();\n+       errorFuture.completeExceptionally(new IllegalArgumentException(\"Old Version not supported\"));\n+       return errorFuture;\n+    }\n     String generatorExecutableFileName = String.format(GENERATOR_EXECUTABLE_FILENAME, version);\n     Path generatorExecutablePath = this.generatorExecutablePath.resolve(generatorExecutableFileName);\n \n     CompletableFuture<Void> downloadGeneratorFuture;\n     if (!Files.exists(generatorExecutablePath)) {\n-      if (!VERSION_PATTERN.matcher(version).matches()) {\n-        log.error(\"Unsupported generator version: {}\", version);\n-        return CompletableFuture.supplyAsync(() -> {\n-          throw new RuntimeException(\"Unsupported generator version: \" + version);\n-        });\n+      if (!VERSION_PATTERN.matcher(version.toString()).matches()) {\n+        log.warn(\"Unsupported generator version: {}\", version);\n+        CompletableFuture<String> errorFuture = new CompletableFuture<>();\n+        errorFuture.completeExceptionally(new RuntimeException(\"Unsupported generator version: \" + version));\n+        return errorFuture;\n       }\n \n       log.info(\"Downloading MapGenerator version: {}\", version);\n       DownloadMapGeneratorTask downloadMapGeneratorTask = applicationContext.getBean(DownloadMapGeneratorTask.class);\n-      downloadMapGeneratorTask.setVersion(version);\n+      downloadMapGeneratorTask.setVersion(version.toString());\n       downloadGeneratorFuture = taskService.submitTask(downloadMapGeneratorTask).getFuture();\n     } else {\n       log.info(\"Found MapGenerator version: {}\", version);\n       downloadGeneratorFuture = CompletableFuture.completedFuture(null);\n     }\n \n-    String mapFilename = String.format(GENERATED_MAP_NAME, version, seed);\n+    String[] seedParts = seedAndOptions.split(\"_\");\n+    String seedString = seedParts[0];\n+\n+    String mapFilename;\n+    String seed;\n+\n+    try {\n+      seed = Long.toString(Long.parseLong(seedString));\n+    }\n+    catch (NumberFormatException nfe) {\n+      byte[] seedBytes = Base64.getDecoder().decode(seedString);\n+      ByteBuffer seedWrapper = ByteBuffer.wrap(seedBytes);\n+      seed = Long.toString(seedWrapper.getLong());\n+    }\n+\n+    // Check if major version 0 which requires numeric seed\n+    if (version.compareTo(new ComparableVersion(\"1\")) < 0) {\n+      mapFilename = String.format(GENERATED_MAP_NAME, version, seed).replace('/','^');\n+    }\n+    else {", "originalCommit": "ad111030f097fefa0c5b5f827bbb86eb42660c52", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc5Mjc5Ng==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r452792796", "bodyText": "Done", "author": "Sheikah45", "createdAt": "2020-07-10T11:44:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc0NzY2Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc0ODc2OA==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r452748768", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            mapGenerator.tooNewVersion=This client does not support this version of map generator. Please update client to use this version.\n          \n          \n            \n            mapGenerator.tooNewVersion=This client does not support this version of the map generator. Please update the client to use this version.", "author": "micheljung", "createdAt": "2020-07-10T10:01:29Z", "path": "src/main/resources/i18n/messages.properties", "diffHunk": "@@ -733,6 +744,8 @@ replay.couldNotOpen=Replay with id ''{0}'' , could not be opened.\n error.game.notTerminatedCorrectly=The game did not terminate correctly and has still certain files open. Some files from the installed game could not be copied over to FAF but unless you recently modified game files in the installed version you probably do not care. We are still starting the game for you.\n map.id=#{0}\n mapGenerator.generationFailed=There was an error during map generation\n+mapGenerator.tooNewVersion=This client does not support this version of map generator. Please update client to use this version.", "originalCommit": "ad111030f097fefa0c5b5f827bbb86eb42660c52", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc5Mjc2Mw==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r452792763", "bodyText": "Done", "author": "Sheikah45", "createdAt": "2020-07-10T11:44:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc0ODc2OA=="}], "type": "inlineReview"}, {"oid": "c8d5f0ead638c20e0dfc24d16803ce1db8185c6a", "url": "https://github.com/FAForever/downlords-faf-client/commit/c8d5f0ead638c20e0dfc24d16803ce1db8185c6a", "message": "Add explicit error types for map generator service", "committedDate": "2020-07-10T11:43:06Z", "type": "forcePushed"}, {"oid": "ab84c401a60d7ad5e3f1c5a4326677af3cc45878", "url": "https://github.com/FAForever/downlords-faf-client/commit/ab84c401a60d7ad5e3f1c5a4326677af3cc45878", "message": "Update existing unit tests with new generator parsing\n\nAdd additional Unit Tests for Map Gen Service\n\nAdd Unit Tests for GenerateMapController\n\nAdd Unit Tests for GenerateMapController\n\nCorrect formatting\n\nRemove unused variables and format issues\n\nRemove unused queryNewestVersion Function\n\nAdd line break\n\nAdd comments on Major Version check\n\nFix capitalization in comment\n\nUse fixed template to return releases list\n\nAdd unit tests for generateMap methods\n\nAdd comment on major version check\n\nRemove redundant character in Generated Map Pattern\n\nStrengthen Map Generator Unit Tests\n\nChange Map Generation UI Layout\n\nAdd filename safe B64 character replacement\n\nUpdate Generator UI Unit Tests\n\nAdd File Safe Base64 Character Change\n\nChange exception handling to use .exceptionally on Future\n\nUse bind for Map Generator UI properties\n\nUse log.warn over log.error\n\nUse static method completeExceptionally for generator errors.\n\nChange code formatting\n\nAdd explicit error types for map generator service", "committedDate": "2020-07-10T11:49:53Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE3MTQzMQ==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r453171431", "bodyText": "If you do this to be able to test this. Make it package private instead and annotate with @VisibleForTesting", "author": "1-alex98", "createdAt": "2020-07-11T08:21:00Z", "path": "src/main/java/com/faforever/client/game/CreateGameController.java", "diffHunk": "@@ -259,7 +260,7 @@ private void initMapSelection() {\n     mapListView.getSelectionModel().selectedItemProperty().addListener((observable, oldValue, newValue) -> Platform.runLater(() -> setSelectedMap(newValue)));\n   }\n \n-  private void setSelectedMap(MapBean newValue) {\n+  protected void setSelectedMap(MapBean newValue) {", "originalCommit": "ab84c401a60d7ad5e3f1c5a4326677af3cc45878", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE4MjEzMg==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1803#discussion_r453182132", "bodyText": "It was changed to protected so that GenerateMapController could set the map selection after generating the map in its futures.", "author": "Sheikah45", "createdAt": "2020-07-11T10:39:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE3MTQzMQ=="}], "type": "inlineReview"}, {"oid": "42ed82984dd0325d3839bf7dfa9126e55b7c172c", "url": "https://github.com/FAForever/downlords-faf-client/commit/42ed82984dd0325d3839bf7dfa9126e55b7c172c", "message": "Add ability to accept generated maps with options\n\nReduces strictness of generated map name matcher to allow for options to be passed in map name\n\nAdds in GeneratorPrefs.java options", "committedDate": "2020-07-15T02:59:02Z", "type": "forcePushed"}, {"oid": "5e3e526df2481369493481e684879926b9c96fb2", "url": "https://github.com/FAForever/downlords-faf-client/commit/5e3e526df2481369493481e684879926b9c96fb2", "message": "Add ability to accept generated maps with options\n\nReduces strictness of generated map name matcher to allow for options to be passed in map name\n\nAdds in GeneratorPrefs.java options\n\nMake Spinners uniform size\n\nRemove Map Size limits", "committedDate": "2020-07-16T04:45:12Z", "type": "forcePushed"}, {"oid": "6362e3ebf4c01b1b328839c28d6b9678ed9216b5", "url": "https://github.com/FAForever/downlords-faf-client/commit/6362e3ebf4c01b1b328839c28d6b9678ed9216b5", "message": "Add ability to accept generated maps with options\n\nReduces strictness of generated map name matcher to allow for options to be passed in map name\n\nAdds in GeneratorPrefs.java options\n\nDisable options when map name given", "committedDate": "2020-07-17T23:03:15Z", "type": "commit"}, {"oid": "6362e3ebf4c01b1b328839c28d6b9678ed9216b5", "url": "https://github.com/FAForever/downlords-faf-client/commit/6362e3ebf4c01b1b328839c28d6b9678ed9216b5", "message": "Add ability to accept generated maps with options\n\nReduces strictness of generated map name matcher to allow for options to be passed in map name\n\nAdds in GeneratorPrefs.java options\n\nDisable options when map name given", "committedDate": "2020-07-17T23:03:15Z", "type": "forcePushed"}, {"oid": "b0b31a72e49a7e0970f639001bc728f3782ff648", "url": "https://github.com/FAForever/downlords-faf-client/commit/b0b31a72e49a7e0970f639001bc728f3782ff648", "message": "Merge branch 'develop' into feature/#1781-map-gen-options-UI", "committedDate": "2020-07-18T21:57:39Z", "type": "commit"}]}