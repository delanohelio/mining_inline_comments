{"pr_number": 1845, "pr_title": "Create Abstract Vault Controller", "pr_createdAt": "2020-07-26T03:33:37Z", "pr_url": "https://github.com/FAForever/downlords-faf-client/pull/1845", "timeline": [{"oid": "c1c94e675b44ee0f45890263cb03e2faeded01ed", "url": "https://github.com/FAForever/downlords-faf-client/commit/c1c94e675b44ee0f45890263cb03e2faeded01ed", "message": "Made Map Vault use Uniform Controller\n\nUpdate Map Search", "committedDate": "2020-07-26T12:07:25Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQ4ODY1OA==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1845#discussion_r460488658", "bodyText": "Dont think u need thatand should not do that. Since u already use setController()", "author": "1-alex98", "createdAt": "2020-07-26T06:58:07Z", "path": "src/main/java/com/faforever/client/theme/UiService.java", "diffHunk": "@@ -413,6 +413,16 @@ public void loadThemes() {\n     return loader.getController();\n   }\n \n+  public <T extends Controller<?>> T loadFxml(String relativePath, Class<?> controllerClass) {\n+    FXMLLoader loader = new FXMLLoader();\n+    loader.setControllerFactory(applicationContext::getBean);", "originalCommit": "2565e2249f167b29c10379ef58fcb7721af1f081", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU0NTQ1NQ==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1845#discussion_r460545455", "bodyText": "This was only because the fx:include of the searchBox in the entity needed an application bean provided by the factory but removing that will remove the need for the controller factory as well.", "author": "Sheikah45", "createdAt": "2020-07-26T16:14:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQ4ODY1OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU1MDYzMA==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1845#discussion_r460550630", "bodyText": "Just for context to remove the need to set the controller factory would just need to load and place the fxml for the search, logical node and specification.\nWhat do you think the adverse effect of setting the controller factory vs manually loading and setting the controller for those?", "author": "Sheikah45", "createdAt": "2020-07-26T17:05:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQ4ODY1OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDgxNDYwMw==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1845#discussion_r460814603", "bodyText": "ControllerFactory uses the fx:controlle=? in the fxml file and makes a new instance of whatever class there is mentioned. U now just set your own instance that u want.", "author": "1-alex98", "createdAt": "2020-07-27T11:07:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQ4ODY1OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDgzODkyMA==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1845#discussion_r460838920", "bodyText": "Yes the loader sets the controller for the top level file however the search box has its own set of controllers that also need to be set which are gotten by the controller factory unless we change them to all be handed directly in each of those as well.", "author": "Sheikah45", "createdAt": "2020-07-27T11:58:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQ4ODY1OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDgxMTAxMg==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1845#discussion_r460811012", "bodyText": "Replaye with @slf4j", "author": "1-alex98", "createdAt": "2020-07-27T10:59:43Z", "path": "src/main/java/com/faforever/client/map/MapVaultController.java", "diffHunk": "@@ -46,95 +32,43 @@\n import java.io.File;\n import java.lang.invoke.MethodHandles;\n import java.nio.file.Path;\n-import java.util.List;\n-import java.util.concurrent.CompletableFuture;\n-import java.util.function.Supplier;\n-import java.util.stream.Collectors;\n \n @Component\n @Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n // TODO I'd like to avoid the additional \"getMost*\" methods and always use the map query function instead, however,\n // this is currently not viable since Elide can't yet sort by relationship attributes. Once it supports that\n // (see https://github.com/yahoo/elide/issues/353), this can be refactored.\n-public class MapVaultController extends AbstractViewController<Node> {\n+public class MapVaultController extends VaultEntityController<MapBean> {\n \n-  private static final Logger logger = LoggerFactory.getLogger(MethodHandles.lookup().lookupClass());\n-  @VisibleForTesting\n   static final int TOP_ELEMENT_COUNT = 7;\n-  @VisibleForTesting\n-  static final int LOAD_PER_PAGE = 50;\n-  /**\n-   * How many mod cards should be badged into one UI thread runnable.\n-   */\n-  private static final int BATCH_SIZE = 10;\n+  private static final Logger logger = LoggerFactory.getLogger(MethodHandles.lookup().lookupClass());", "originalCommit": "4ba45177a6a1bac3f545f1d3ebce8fca1201a739", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQzODg0MA==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1845#discussion_r461438840", "bodyText": "Avoid defining UI Elements in java code", "author": "1-alex98", "createdAt": "2020-07-28T09:15:27Z", "path": "src/main/java/com/faforever/client/mod/ModVaultController.java", "diffHunk": "@@ -42,167 +31,136 @@\n import java.io.File;\n import java.lang.invoke.MethodHandles;\n import java.nio.file.Path;\n-import java.util.List;\n-import java.util.concurrent.CompletableFuture;\n-import java.util.function.Supplier;\n-import java.util.stream.Collectors;\n \n @Component\n @Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n @Slf4j\n-public class ModVaultController extends AbstractViewController<Node> {\n+public class ModVaultController extends VaultEntityController<ModVersion> {\n \n   private static final Logger logger = LoggerFactory.getLogger(MethodHandles.lookup().lookupClass());\n   private static final int TOP_ELEMENT_COUNT = 7;\n-  private static final int LOAD_MORE_COUNT = 100;\n-  private static final int MAX_SEARCH_RESULTS = 100;\n-  /**\n-   * How many mod cards should be badged into one UI thread runnable.\n-   */\n-  private static final int BATCH_SIZE = 10;\n+  private static final int PAGE_SIZE = 25;\n \n   private final ModService modService;\n-  private final NotificationService notificationService;\n-  private final I18n i18n;\n   private final EventBus eventBus;\n-  private final PreferencesService preferencesService;\n-  private final UiService uiService;\n-  private final ReportingService reportingService;\n \n-  public Pane searchResultGroup;\n-  public Pane searchResultPane;\n-  public Pane showroomGroup;\n-  public Node loadingLabel;\n-  public Pane highestRatedUiPane;\n-  public Pane newestPane;\n-  public Pane highestRatedPane;\n-  public JFXButton moreHighestRatedUiButton;\n-  public JFXButton moreNewestButton;\n-  public JFXButton moreHighestRatedButton;\n-  public StackPane modVaultRoot;\n-  public ScrollPane scrollPane;\n-  public Button backButton;\n-  public SearchController searchController;\n-  public Button moreButton;\n-\n-  private boolean initialized;\n+  private ModShowRoomController modShowRoomController;\n   private ModDetailController modDetailController;\n-  private final ObjectProperty<ModVaultController.State> state;\n-  private int currentPage;\n-  private Supplier<CompletableFuture<List<ModVersion>>> currentSupplier;\n+  private Button manageModButton;\n \n   public ModVaultController(ModService modService, I18n i18n, EventBus eventBus, PreferencesService preferencesService,\n-                            UiService uiService, NotificationService notificationService, ReportingService reportingService) {\n-    this.modService = modService;\n-    this.i18n = i18n;\n+                               UiService uiService, NotificationService notificationService, ReportingService reportingService) {\n+    super(uiService, notificationService, i18n, preferencesService, reportingService);\n     this.eventBus = eventBus;\n-    this.preferencesService = preferencesService;\n-    this.uiService = uiService;\n-    this.notificationService = notificationService;\n-    this.reportingService = reportingService;\n-    state = new SimpleObjectProperty<>(State.LOADING);\n+    this.modService = modService;\n   }\n \n   @Override\n   public void initialize() {\n     super.initialize();\n     JavaFxUtil.fixScrollSpeed(scrollPane);\n \n-    loadingLabel.managedProperty().bind(loadingLabel.visibleProperty());\n-    showroomGroup.managedProperty().bind(showroomGroup.visibleProperty());\n-    searchResultGroup.managedProperty().bind(searchResultGroup.visibleProperty());\n-    backButton.managedProperty().bind(backButton.visibleProperty());\n-    moreButton.managedProperty().bind(moreButton.visibleProperty());\n-\n     modDetailController = uiService.loadFxml(\"theme/vault/mod/mod_detail.fxml\");\n     Node modDetailRoot = modDetailController.getRoot();\n-    modVaultRoot.getChildren().add(modDetailRoot);\n+    vaultRoot.getChildren().add(modDetailRoot);\n     AnchorPane.setTopAnchor(modDetailRoot, 0d);\n     AnchorPane.setRightAnchor(modDetailRoot, 0d);\n     AnchorPane.setBottomAnchor(modDetailRoot, 0d);\n     AnchorPane.setLeftAnchor(modDetailRoot, 0d);\n     modDetailRoot.setVisible(false);\n \n+    manageModButton = new Button(i18n.get(\"modVault.manageMods\"));\n+    manageModButton.getStyleClass().add(\"button-raised\");\n+    manageModButton.setOnAction((event -> manageMods()));\n+    searchBox.getChildren().add(manageModButton);", "originalCommit": "85ad38ada4a836c963496ae4414bae5b004b460a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQ2OTA0Mw==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1845#discussion_r461469043", "bodyText": "I can add this to the to the vault entity and just hide it for the other classes.\nAlthough with regards to buttons in general we do have to set the onAction in java since the fxml doesn't know about the functions without having a controller set there.", "author": "Sheikah45", "createdAt": "2020-07-28T10:07:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQzODg0MA=="}], "type": "inlineReview"}, {"oid": "e4d5674e5389aafc634e3e820cf82cbbe362429f", "url": "https://github.com/FAForever/downlords-faf-client/commit/e4d5674e5389aafc634e3e820cf82cbbe362429f", "message": "Add Unit Tests", "committedDate": "2020-08-01T11:49:01Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk3MDgwOQ==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1845#discussion_r463970809", "bodyText": "no commented out code", "author": "1-alex98", "createdAt": "2020-08-01T15:11:17Z", "path": "src/test/java/com/faforever/client/vault/VaultEntityControllerTest.java", "diffHunk": "@@ -0,0 +1,424 @@\n+package com.faforever.client.vault;\n+\n+import com.faforever.client.i18n.I18n;\n+import com.faforever.client.main.event.NavigateEvent;\n+import com.faforever.client.main.event.NavigationItem;\n+import com.faforever.client.notification.NotificationService;\n+import com.faforever.client.preferences.PreferencesService;\n+import com.faforever.client.query.LogicalNodeController;\n+import com.faforever.client.query.SpecificationController;\n+import com.faforever.client.reporting.ReportingService;\n+import com.faforever.client.test.AbstractPlainJavaFxTest;\n+import com.faforever.client.theme.UiService;\n+import com.faforever.client.util.Tuple;\n+import com.faforever.client.vault.search.SearchController;\n+import com.faforever.client.vault.search.SearchController.SearchConfig;\n+import javafx.application.Platform;\n+import javafx.scene.Node;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.Label;\n+import javafx.scene.layout.AnchorPane;\n+import javafx.scene.layout.FlowPane;\n+import javafx.scene.layout.GridPane;\n+import javafx.scene.layout.VBox;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.Mock;\n+import org.testfx.util.WaitForAsyncUtils;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+\n+import static com.faforever.client.vault.VaultEntityController.TOP_ELEMENT_COUNT;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.Mockito.when;\n+\n+public class VaultEntityControllerTest extends AbstractPlainJavaFxTest {\n+\n+  @Mock\n+  private UiService uiService;\n+  @Mock\n+  private I18n i18n;\n+  @Mock\n+  private PreferencesService preferencesService;\n+  @Mock\n+  private NotificationService notificationService;\n+  @Mock\n+  private ReportingService reportingService;\n+  @Mock\n+  private SearchController searchController;\n+  @Mock\n+  private LogicalNodeController logicalNodeController;\n+  @Mock\n+  private SpecificationController specificationController;\n+  @Mock\n+  private VaultEntityShowRoomController vaultEntityShowRoomController;\n+\n+  private VaultEntityController<Integer> instance;\n+  private List<Integer> items;\n+  private VBox showRoomRoot;\n+  private Label showRoomLabel;\n+  private Button moreButton;\n+  private FlowPane showRoomPane;\n+\n+\n+  private List<Integer> createMockElements(int numberOfElements) {\n+    List<Integer> elements = new ArrayList<>(numberOfElements);\n+    for (int i = 0; i < numberOfElements; i++) {\n+      elements.add(i);\n+    }\n+    return elements;\n+  }\n+\n+  private List<Integer> getMockPageElements(List<Integer> elements, int pageSize, int page) {\n+    return elements.subList(Math.min((page) * pageSize, elements.size()),\n+        Math.min((page + 1) * pageSize, elements.size()));\n+  }\n+\n+  private CompletableFuture<Tuple<List<Integer>, Integer>> asFuture(Tuple<List<Integer>, Integer> page) {\n+    return CompletableFuture.completedFuture(page);\n+  }\n+\n+  private CompletableFuture<Tuple<List<Integer>, Integer>> mocksAsFuture(List<Integer> elements, int pageSize, int page) {\n+    return CompletableFuture.completedFuture(new Tuple<>(getMockPageElements(elements, pageSize, page),\n+        (int) Math.ceil((double) elements.size() / pageSize)));\n+  }\n+\n+  @Before\n+  public void setUp() throws Exception {\n+    showRoomRoot = new VBox();\n+    showRoomLabel = new Label();\n+    showRoomPane = new FlowPane();\n+    moreButton = new Button();\n+    showRoomPane.setUserData(moreButton);\n+\n+    when(i18n.get(\"mock\")).thenReturn(\"mock\");\n+//    when(preferencesService.getPreferences()).thenReturn(new Preferences());", "originalCommit": "b15dc247c88650fe8c7e27b3d441c3d93d687255", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk3NTUyNw==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1845#discussion_r463975527", "bodyText": "whoops removed", "author": "Sheikah45", "createdAt": "2020-08-01T16:01:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk3MDgwOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk3MDg0OQ==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1845#discussion_r463970849", "bodyText": "No commented out code", "author": "1-alex98", "createdAt": "2020-08-01T15:11:42Z", "path": "src/test/java/com/faforever/client/vault/VaultEntityControllerTest.java", "diffHunk": "@@ -0,0 +1,424 @@\n+package com.faforever.client.vault;\n+\n+import com.faforever.client.i18n.I18n;\n+import com.faforever.client.main.event.NavigateEvent;\n+import com.faforever.client.main.event.NavigationItem;\n+import com.faforever.client.notification.NotificationService;\n+import com.faforever.client.preferences.PreferencesService;\n+import com.faforever.client.query.LogicalNodeController;\n+import com.faforever.client.query.SpecificationController;\n+import com.faforever.client.reporting.ReportingService;\n+import com.faforever.client.test.AbstractPlainJavaFxTest;\n+import com.faforever.client.theme.UiService;\n+import com.faforever.client.util.Tuple;\n+import com.faforever.client.vault.search.SearchController;\n+import com.faforever.client.vault.search.SearchController.SearchConfig;\n+import javafx.application.Platform;\n+import javafx.scene.Node;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.Label;\n+import javafx.scene.layout.AnchorPane;\n+import javafx.scene.layout.FlowPane;\n+import javafx.scene.layout.GridPane;\n+import javafx.scene.layout.VBox;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.Mock;\n+import org.testfx.util.WaitForAsyncUtils;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+\n+import static com.faforever.client.vault.VaultEntityController.TOP_ELEMENT_COUNT;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.Mockito.when;\n+\n+public class VaultEntityControllerTest extends AbstractPlainJavaFxTest {\n+\n+  @Mock\n+  private UiService uiService;\n+  @Mock\n+  private I18n i18n;\n+  @Mock\n+  private PreferencesService preferencesService;\n+  @Mock\n+  private NotificationService notificationService;\n+  @Mock\n+  private ReportingService reportingService;\n+  @Mock\n+  private SearchController searchController;\n+  @Mock\n+  private LogicalNodeController logicalNodeController;\n+  @Mock\n+  private SpecificationController specificationController;\n+  @Mock\n+  private VaultEntityShowRoomController vaultEntityShowRoomController;\n+\n+  private VaultEntityController<Integer> instance;\n+  private List<Integer> items;\n+  private VBox showRoomRoot;\n+  private Label showRoomLabel;\n+  private Button moreButton;\n+  private FlowPane showRoomPane;\n+\n+\n+  private List<Integer> createMockElements(int numberOfElements) {\n+    List<Integer> elements = new ArrayList<>(numberOfElements);\n+    for (int i = 0; i < numberOfElements; i++) {\n+      elements.add(i);\n+    }\n+    return elements;\n+  }\n+\n+  private List<Integer> getMockPageElements(List<Integer> elements, int pageSize, int page) {\n+    return elements.subList(Math.min((page) * pageSize, elements.size()),\n+        Math.min((page + 1) * pageSize, elements.size()));\n+  }\n+\n+  private CompletableFuture<Tuple<List<Integer>, Integer>> asFuture(Tuple<List<Integer>, Integer> page) {\n+    return CompletableFuture.completedFuture(page);\n+  }\n+\n+  private CompletableFuture<Tuple<List<Integer>, Integer>> mocksAsFuture(List<Integer> elements, int pageSize, int page) {\n+    return CompletableFuture.completedFuture(new Tuple<>(getMockPageElements(elements, pageSize, page),\n+        (int) Math.ceil((double) elements.size() / pageSize)));\n+  }\n+\n+  @Before\n+  public void setUp() throws Exception {\n+    showRoomRoot = new VBox();\n+    showRoomLabel = new Label();\n+    showRoomPane = new FlowPane();\n+    moreButton = new Button();\n+    showRoomPane.setUserData(moreButton);\n+\n+    when(i18n.get(\"mock\")).thenReturn(\"mock\");\n+//    when(preferencesService.getPreferences()).thenReturn(new Preferences());\n+    when(uiService.loadFxml(\"theme/vault/vault_entity_show_room.fxml\")).thenReturn(vaultEntityShowRoomController);\n+    when(vaultEntityShowRoomController.getRoot()).thenReturn(showRoomRoot);\n+    when(vaultEntityShowRoomController.getLabel()).thenReturn(showRoomLabel);\n+    when(vaultEntityShowRoomController.getMoreButton()).thenReturn(moreButton);\n+    when(vaultEntityShowRoomController.getPane()).thenReturn(showRoomPane);\n+\n+    items = createMockElements(50);\n+    instance = new VaultEntityController<>(uiService, notificationService, i18n, preferencesService, reportingService) {\n+      @Override\n+      protected Node getEntityCard(Integer integer) {\n+        GridPane card = new GridPane();\n+        card.setUserData(integer);\n+        return card;\n+      }\n+\n+      @Override\n+      protected List<ShowRoomCategory> getShowRoomCategories() {\n+        List<ShowRoomCategory> categories = new ArrayList<>();\n+        categories.add(new ShowRoomCategory(() -> mocksAsFuture(items, TOP_ELEMENT_COUNT, 0), SearchType.NEWEST, \"mock\"));\n+        return categories;\n+      }\n+\n+      @Override\n+      protected void setSupplier(SearchConfig searchConfig) {\n+        currentSupplier = mocksAsFuture(items, pageSize, pagination.getCurrentPageIndex());\n+      }\n+\n+      @Override\n+      protected void onUploadButtonClicked() {\n+      }\n+\n+      @Override\n+      protected Node getDetailView() {\n+        return new AnchorPane();\n+      }\n+\n+      @Override\n+      protected void onDisplayDetails(Integer integer) {\n+      }\n+\n+      @Override\n+      protected Class<? extends NavigateEvent> getDefaultNavigateEvent() {\n+        return NavigateEvent.class;\n+      }\n+\n+      @Override\n+      protected void handleSpecialNavigateEvent(NavigateEvent navigateEvent) {\n+      }\n+    };\n+\n+    loadFxml(\"theme/vault/vault_entity.fxml\", clazz -> {\n+      if (clazz == SearchController.class) {\n+        return searchController;\n+      }\n+      if (clazz == LogicalNodeController.class) {\n+        return logicalNodeController;\n+      }\n+      if (clazz == SpecificationController.class) {\n+        return specificationController;\n+      }\n+      return instance;\n+    }, instance);\n+  }\n+\n+  @Test\n+  public void testGetRoot() throws Exception {\n+    Platform.runLater(() -> instance.display(new NavigateEvent(NavigationItem.VAULT)));\n+    assertEquals(instance.root, instance.getRoot());\n+    assertNull(instance.getRoot().getParent());\n+  }\n+\n+  @Test\n+  public void testOnDisplay() {\n+    Platform.runLater(() -> instance.display(new NavigateEvent(NavigationItem.VAULT)));\n+    WaitForAsyncUtils.waitForFxEvents();\n+    assertTrue(instance.showRoomGroup.isVisible());\n+    assertFalse(instance.searchResultGroup.isVisible());\n+    assertEquals(1, instance.showRoomGroup.getChildren().size());\n+    assertEquals(TOP_ELEMENT_COUNT + 1, showRoomPane.getChildren().size());\n+  }\n+\n+  @Test\n+  public void testEmptyShowRoom() {\n+    items = createMockElements(0);\n+    Platform.runLater(() -> instance.display(new NavigateEvent(NavigationItem.VAULT)));\n+    WaitForAsyncUtils.waitForFxEvents();\n+    assertFalse(showRoomRoot.isVisible());\n+    assertEquals(1, instance.showRoomGroup.getChildren().size());\n+  }\n+\n+  @Test\n+  public void testPagination() {\n+    List<Integer> elePage1 = getMockPageElements(items, instance.pageSize, 0);\n+    List<Integer> elePage3 = getMockPageElements(items, instance.pageSize, 2);\n+\n+    Platform.runLater(() -> instance.display(new NavigateEvent(NavigationItem.VAULT)));\n+    WaitForAsyncUtils.waitForFxEvents();\n+\n+    // first page / search results\n+    moreButton.fire();\n+    WaitForAsyncUtils.waitForFxEvents();\n+    assertFalse(instance.showRoomGroup.isVisible());\n+    assertTrue(instance.searchResultGroup.isVisible());\n+    assertEquals(0, instance.pagination.getCurrentPageIndex());\n+    assertEquals(instance.pageSize, instance.searchResultPane.getChildren().size());\n+    for (int i = 0; i < elePage1.size(); i++) {\n+      assertEquals(elePage1.get(i), instance.searchResultPane.getChildren().get(i).getUserData());\n+    }\n+\n+    // third page\n+    instance.pagination.setCurrentPageIndex(2);\n+    WaitForAsyncUtils.waitForFxEvents();\n+    assertEquals(10, instance.searchResultPane.getChildren().size());\n+    for (int i = 0; i < 10; i++) {\n+      assertEquals(elePage3.get(i), instance.searchResultPane.getChildren().get(i).getUserData());\n+    }\n+  }\n+\n+  @Test\n+  public void testLastPageButton() {\n+    List<Integer> elePage3 = getMockPageElements(items, instance.pageSize, 2);\n+\n+    Platform.runLater(() -> instance.display(new NavigateEvent(NavigationItem.VAULT)));\n+    WaitForAsyncUtils.waitForFxEvents();\n+\n+    moreButton.fire();\n+    WaitForAsyncUtils.waitForFxEvents();\n+    instance.lastPageButton.fire();\n+    WaitForAsyncUtils.waitForFxEvents();\n+    assertEquals(10, instance.searchResultPane.getChildren().size());\n+    for (int i = 0; i < 10; i++) {\n+      assertEquals(elePage3.get(i), instance.searchResultPane.getChildren().get(i).getUserData());\n+    }\n+  }\n+\n+  @Test\n+  public void testFirstPageButton() {\n+    List<Integer> elePage1 = getMockPageElements(items, instance.pageSize, 0);\n+\n+    Platform.runLater(() -> instance.display(new NavigateEvent(NavigationItem.VAULT)));\n+    WaitForAsyncUtils.waitForFxEvents();\n+\n+    moreButton.fire();\n+    WaitForAsyncUtils.waitForFxEvents();\n+    instance.firstPageButton.fire();\n+    WaitForAsyncUtils.waitForFxEvents();\n+    assertEquals(instance.pageSize, instance.searchResultPane.getChildren().size());\n+    for (int i = 0; i < 10; i++) {\n+      assertEquals(elePage1.get(i), instance.searchResultPane.getChildren().get(i).getUserData());\n+    }\n+  }\n+\n+  @Test\n+  public void testPageSize() {\n+    int newPageSize = 30;\n+\n+    Platform.runLater(() -> instance.display(new NavigateEvent(NavigationItem.VAULT)));\n+    WaitForAsyncUtils.waitForFxEvents();\n+\n+    instance.perPageComboBox.setValue(newPageSize);\n+    WaitForAsyncUtils.waitForFxEvents();\n+    List<Integer> elePage1 = getMockPageElements(items, newPageSize, 0);\n+\n+    moreButton.fire();\n+    WaitForAsyncUtils.waitForFxEvents();\n+    assertEquals(instance.pageSize, instance.searchResultPane.getChildren().size());\n+    for (int i = 0; i < instance.pageSize; i++) {\n+      assertEquals(elePage1.get(i), instance.searchResultPane.getChildren().get(i).getUserData());\n+    }\n+  }\n+\n+  @Test\n+  public void testPageSizeChange() {\n+    int newPageSize = 30;\n+\n+    Platform.runLater(() -> instance.display(new NavigateEvent(NavigationItem.VAULT)));\n+    WaitForAsyncUtils.waitForFxEvents();\n+\n+    List<Integer> elePage1 = getMockPageElements(items, instance.pageSize, 0);\n+\n+    moreButton.fire();\n+    WaitForAsyncUtils.waitForFxEvents();\n+    assertEquals(0, instance.pagination.getCurrentPageIndex());\n+    assertEquals(instance.pageSize, instance.searchResultPane.getChildren().size());\n+    for (int i = 0; i < elePage1.size(); i++) {\n+      assertEquals(elePage1.get(i), instance.searchResultPane.getChildren().get(i).getUserData());\n+    }\n+\n+    instance.perPageComboBox.setValue(newPageSize);\n+    WaitForAsyncUtils.waitForFxEvents();\n+    instance.changePerPageCount();\n+    WaitForAsyncUtils.waitForFxEvents();\n+    elePage1 = getMockPageElements(items, newPageSize, 0);\n+\n+    moreButton.fire();\n+    WaitForAsyncUtils.waitForFxEvents();\n+    assertEquals(0, instance.pagination.getCurrentPageIndex());\n+    assertEquals(newPageSize, instance.searchResultPane.getChildren().size());\n+    for (int i = 0; i < newPageSize; i++) {\n+      assertEquals(elePage1.get(i), instance.searchResultPane.getChildren().get(i).getUserData());\n+    }\n+  }\n+\n+  @Test\n+  public void testOnFirstPageChange() {\n+    Platform.runLater(() -> instance.display(new NavigateEvent(NavigationItem.VAULT)));\n+    WaitForAsyncUtils.waitForFxEvents();\n+\n+    moreButton.fire();\n+    WaitForAsyncUtils.waitForFxEvents();\n+    assertEquals(0, instance.pagination.getCurrentPageIndex());\n+\n+    instance.pagination.setCurrentPageIndex(1);\n+    WaitForAsyncUtils.waitForFxEvents();\n+    assertEquals(1, instance.pagination.getCurrentPageIndex());\n+\n+    instance.onFirstPageOpened(null);\n+    WaitForAsyncUtils.waitForFxEvents();\n+    assertEquals(0, instance.pagination.getCurrentPageIndex());\n+  }\n+\n+  @Test\n+  public void testOnBackButton() {\n+    Platform.runLater(() -> instance.display(new NavigateEvent(NavigationItem.VAULT)));\n+    WaitForAsyncUtils.waitForFxEvents();\n+    assertTrue(instance.showRoomGroup.isVisible());\n+    assertFalse(instance.searchResultGroup.isVisible());\n+\n+    moreButton.fire();\n+    WaitForAsyncUtils.waitForFxEvents();\n+    assertFalse(instance.showRoomGroup.isVisible());\n+    assertTrue(instance.searchResultGroup.isVisible());\n+\n+    Platform.runLater(() -> instance.backButton.fire());\n+    WaitForAsyncUtils.waitForFxEvents();\n+    assertTrue(instance.showRoomGroup.isVisible());\n+    assertFalse(instance.searchResultGroup.isVisible());\n+  }\n+\n+  @Test\n+  public void testOnSearch() {\n+    Platform.runLater(() -> instance.display(new NavigateEvent(NavigationItem.VAULT)));\n+    WaitForAsyncUtils.waitForFxEvents();\n+    assertTrue(instance.showRoomGroup.isVisible());\n+    assertFalse(instance.searchResultGroup.isVisible());\n+\n+    Platform.runLater(() -> instance.onSearch(null));\n+    WaitForAsyncUtils.waitForFxEvents();\n+    assertFalse(instance.showRoomGroup.isVisible());\n+    assertTrue(instance.searchResultGroup.isVisible());\n+  }\n+\n+  @Test\n+  public void testRefreshShowRoom() {\n+    Platform.runLater(() -> instance.display(new NavigateEvent(NavigationItem.VAULT)));\n+    WaitForAsyncUtils.waitForFxEvents();\n+    assertTrue(instance.showRoomGroup.isVisible());\n+    assertFalse(instance.searchResultGroup.isVisible());\n+\n+    Platform.runLater(() -> instance.refreshButton.fire());\n+    WaitForAsyncUtils.waitForFxEvents();\n+    assertTrue(instance.showRoomGroup.isVisible());\n+    assertFalse(instance.searchResultGroup.isVisible());\n+  }\n+\n+  @Test\n+  public void testRefreshSearch() {\n+    Platform.runLater(() -> instance.display(new NavigateEvent(NavigationItem.VAULT)));\n+    WaitForAsyncUtils.waitForFxEvents();\n+    assertTrue(instance.showRoomGroup.isVisible());\n+    assertFalse(instance.searchResultGroup.isVisible());\n+\n+    Platform.runLater(() -> instance.onSearch(null));\n+    WaitForAsyncUtils.waitForFxEvents();\n+    assertFalse(instance.showRoomGroup.isVisible());\n+    assertTrue(instance.searchResultGroup.isVisible());\n+\n+    Platform.runLater(() -> instance.refreshButton.fire());\n+    WaitForAsyncUtils.waitForFxEvents();\n+    assertFalse(instance.showRoomGroup.isVisible());\n+    assertTrue(instance.searchResultGroup.isVisible());\n+  }\n+\n+//\n+//  @Test\n+//  public void testPageRefresh() {\n+//    // first we have certain number of maps\n+//    when(mapService.getMostPlayedMaps(anyInt(), eq(1))).thenReturn(mocksAsFuture(2));\n+//    instance.display(new OpenMapVaultEvent());\n+//    WaitForAsyncUtils.waitForFxEvents();\n+//    // size is one more, because a button is also in there\n+//    assertThat(instance.mostPlayedPane.getChildren().size(), is(3));\n+//\n+//    // more maps were added, refresh should update\n+//    when(mapService.getMostPlayedMaps(anyInt(), eq(1))).thenReturn(mocksAsFuture(4));\n+//    instance.onRefreshButtonClicked();\n+//    WaitForAsyncUtils.waitForFxEvents();\n+//    // size is one more, because a button is also in there\n+//    assertThat(instance.mostPlayedPane.getChildren().size(), is(5));\n+//  }\n+//\n+//  @Test\n+//  public void testOwnedMapsHiddenWhenUserOwnsNoMaps() {\n+//    when(mapService.getOwnedMaps(anyInt(), anyInt(), anyInt()))\n+//        .thenReturn(CompletableFuture.completedFuture(Collections.emptyList()));\n+//    instance.display(new OpenMapVaultEvent());\n+//    WaitForAsyncUtils.waitForFxEvents();\n+//    assertFalse(instance.ownedPane.isVisible()\n+//        || instance.moreOwnedButton.isVisible()\n+//        || instance.ownedMoreLabel.isVisible());\n+//  }\n+//\n+//  @Test\n+//  public void testOwnedMapsShownWhenUserOwnsMaps() {\n+//    when(mapService.getOwnedMaps(anyInt(), anyInt(), anyInt()))\n+//        .thenReturn(CompletableFuture.completedFuture(createMockElements(5)));\n+//    instance.display(new OpenMapVaultEvent());\n+//    WaitForAsyncUtils.waitForFxEvents();\n+//    assertTrue(instance.ownedPane.isVisible()\n+//        && instance.moreOwnedButton.isVisible()\n+//        && instance.ownedMoreLabel.isVisible());\n+//  }\n+}", "originalCommit": "b15dc247c88650fe8c7e27b3d441c3d93d687255", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk3NTU1MQ==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1845#discussion_r463975551", "bodyText": "removed", "author": "Sheikah45", "createdAt": "2020-08-01T16:01:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk3MDg0OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk3MTA1NQ==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1845#discussion_r463971055", "bodyText": "Could we not unify this with the other loadFXMl there is not realy too much of a difference", "author": "1-alex98", "createdAt": "2020-08-01T15:13:39Z", "path": "src/test/java/com/faforever/client/test/AbstractPlainJavaFxTest.java", "diffHunk": "@@ -106,6 +107,37 @@ protected void loadFxml(String fileName, Callback<Class<?>, Object> controllerFa\n     }\n   }\n \n+  protected void loadFxml(String fileName, Callback<Class<?>, Object> controllerFactory, VaultEntityController<?> controller) throws IOException {", "originalCommit": "b15dc247c88650fe8c7e27b3d441c3d93d687255", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk3NTU3Ng==", "url": "https://github.com/FAForever/downlords-faf-client/pull/1845#discussion_r463975576", "bodyText": "combined", "author": "Sheikah45", "createdAt": "2020-08-01T16:01:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk3MTA1NQ=="}], "type": "inlineReview"}, {"oid": "be668f6e04a2f705ca18c1ba5dcf1fdb75acfc93", "url": "https://github.com/FAForever/downlords-faf-client/commit/be668f6e04a2f705ca18c1ba5dcf1fdb75acfc93", "message": "Update pagination style", "committedDate": "2020-08-01T16:01:18Z", "type": "forcePushed"}, {"oid": "f5fe2c3b13400042e457f81e92e164298cfbc44b", "url": "https://github.com/FAForever/downlords-faf-client/commit/f5fe2c3b13400042e457f81e92e164298cfbc44b", "message": "Update pagination style", "committedDate": "2020-08-01T16:38:37Z", "type": "forcePushed"}, {"oid": "91061ab2b249e0d6bd8d44da7c55f146fb17cdf5", "url": "https://github.com/FAForever/downlords-faf-client/commit/91061ab2b249e0d6bd8d44da7c55f146fb17cdf5", "message": "Update pagination style", "committedDate": "2020-08-03T14:01:43Z", "type": "forcePushed"}, {"oid": "ffb243434ac0639285949a1f361f6d1a50372760", "url": "https://github.com/FAForever/downlords-faf-client/commit/ffb243434ac0639285949a1f361f6d1a50372760", "message": "Create Vault Entity Controller as abstract class", "committedDate": "2020-08-18T21:04:05Z", "type": "commit"}, {"oid": "1e61a45cc01aa0777152b6d48c1cddab4d9967c2", "url": "https://github.com/FAForever/downlords-faf-client/commit/1e61a45cc01aa0777152b6d48c1cddab4d9967c2", "message": "Add Unit Tests", "committedDate": "2020-08-18T21:04:05Z", "type": "commit"}, {"oid": "fb5cfc112d7334c0e143d0a7c42f6da50e3e4625", "url": "https://github.com/FAForever/downlords-faf-client/commit/fb5cfc112d7334c0e143d0a7c42f6da50e3e4625", "message": "Update pagination style", "committedDate": "2020-08-18T21:04:05Z", "type": "commit"}, {"oid": "fb5cfc112d7334c0e143d0a7c42f6da50e3e4625", "url": "https://github.com/FAForever/downlords-faf-client/commit/fb5cfc112d7334c0e143d0a7c42f6da50e3e4625", "message": "Update pagination style", "committedDate": "2020-08-18T21:04:05Z", "type": "forcePushed"}]}