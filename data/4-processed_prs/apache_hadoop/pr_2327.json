{"pr_number": 2327, "pr_title": "HADOOP-17276. Extend CallerContext to make it include many items", "pr_createdAt": "2020-09-22T09:14:32Z", "pr_url": "https://github.com/apache/hadoop/pull/2327", "timeline": [{"oid": "835009bafb69642ef948ce396113234cece582a0", "url": "https://github.com/apache/hadoop/commit/835009bafb69642ef948ce396113234cece582a0", "message": "HADOOP-17276. Extend CallerContext to make it include many items", "committedDate": "2020-09-22T09:06:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjk2MDQ4NA==", "url": "https://github.com/apache/hadoop/pull/2327#discussion_r492960484", "bodyText": "Having to pass the separator for the key value is weird.", "author": "goiri", "createdAt": "2020-09-22T18:50:23Z", "path": "hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/ipc/TestCallerContext.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.ipc;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class TestCallerContext {\n+  @Test\n+  public void testBuilderAppend() {\n+    CallerContext.Builder builder = new CallerContext.Builder(\"context1\");\n+    CallerContext context =\n+        builder.append(\"context2\").append(\"key3\", \"value3\", \":\").build();", "originalCommit": "835009bafb69642ef948ce396113234cece582a0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzMxOTExMQ==", "url": "https://github.com/apache/hadoop/pull/2327#discussion_r493319111", "bodyText": "Modify the UT.\nBTW, we aim to append callercontext and log it, but we don't retrieve item from context. Is it right?\nIf we want to retrieve item from context, maybe we should use data structure which is serializable and deserializable.", "author": "ferhui", "createdAt": "2020-09-23T08:40:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjk2MDQ4NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjk2MDk3NA==", "url": "https://github.com/apache/hadoop/pull/2327#discussion_r492960974", "bodyText": "This was the issue that Daryn was bringing up.\nI'm not sure if overriding an existing concept is safe.\nThe idea would be to add a new one with the proper key/value semantic.", "author": "goiri", "createdAt": "2020-09-22T18:51:11Z", "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/CallerContext.java", "diffHunk": "@@ -36,6 +36,7 @@\n @InterfaceStability.Evolving\n public final class CallerContext {\n   public static final Charset SIGNATURE_ENCODING = StandardCharsets.UTF_8;\n+  public static final String ITEM_SEPARATOR = \"\\\\$\";", "originalCommit": "835009bafb69642ef948ce396113234cece582a0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzMwNTE2NQ==", "url": "https://github.com/apache/hadoop/pull/2327#discussion_r493305165", "bodyText": "Have made it configurable", "author": "ferhui", "createdAt": "2020-09-23T08:26:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjk2MDk3NA=="}], "type": "inlineReview"}, {"oid": "a0b376f0589777ad96b034e0eb7008e688fc17ad", "url": "https://github.com/apache/hadoop/commit/a0b376f0589777ad96b034e0eb7008e688fc17ad", "message": "Make separator configurable and monify UT", "committedDate": "2020-09-23T08:23:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDEwODkxMw==", "url": "https://github.com/apache/hadoop/pull/2327#discussion_r494108913", "bodyText": "Thank you @ferhui for providing the patch.\nAre there any use cases for this method instead of calling append(key + kvSeparator + value) directly?", "author": "aajisaka", "createdAt": "2020-09-24T07:50:11Z", "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/CallerContext.java", "diffHunk": "@@ -108,24 +117,86 @@ public String toString() {\n   }\n \n   /** The caller context builder. */\n-  public static final class Builder {\n-    private final String context;\n+  public static final class Builder implements Configurable {\n+    private String context;\n     private byte[] signature;\n+    private Configuration conf = new Configuration();\n \n     public Builder(String context) {\n       this.context = context;\n     }\n \n+    public Builder(String key, String value, String kvSeparator) {\n+      this.context = new StringBuilder(key)\n+          .append(kvSeparator)\n+          .append(value)\n+          .toString();\n+    }\n+\n     public Builder setSignature(byte[] signature) {\n       if (signature != null && signature.length > 0) {\n         this.signature = Arrays.copyOf(signature, signature.length);\n       }\n       return this;\n     }\n \n+    /**\n+     * Append new item to the context.\n+     * @param item\n+     * @return builder\n+     */\n+    public Builder append(String item) {\n+      if (CallerContext.isContextValid(context)) {\n+        this.context = new StringBuilder(context)\n+            .append(conf.get(HADOOP_CALLER_CONTEXT_ITEM_SEPARATOR_KEY,\n+                HADOOP_CALLER_CONTEXT_ITEM_SEPARATOR_DEFAULT))\n+            .append(item)\n+            .toString();\n+      } else {\n+        this.context = item;\n+      }\n+      return this;\n+    }\n+\n+    /**\n+     * Append new item which contains key and value to the context.\n+     * @param key\n+     * @param value\n+     * @param kvSeparator\n+     * @return builder\n+     */\n+    public Builder append(String key, String value, String kvSeparator) {", "originalCommit": "a0b376f0589777ad96b034e0eb7008e688fc17ad", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDExNDM4Mw==", "url": "https://github.com/apache/hadoop/pull/2327#discussion_r494114383", "bodyText": "Now there isn't. Want to use append in RBF, for example, add callerip to context, append(\"CallerIp\", \"x.x.x.x\", \":\"). If this method is useless\uff0c we can remove it.", "author": "ferhui", "createdAt": "2020-09-24T07:58:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDEwODkxMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTM3NTM2Nw==", "url": "https://github.com/apache/hadoop/pull/2327#discussion_r495375367", "bodyText": "I am not sure we need to implement the Configurable to make this flexible. How about:\n\nAdd a new final separator field\nAdd a new final StringBuilder sb = new StringBuilder(); field and remove context variable\nExisting constructor public Builder(String context) will simply callsb.append(context) and assign separator field with default value , aka HADOOP_CALLER_CONTEXT_ITEM_SEPARATOR_DEFAULT\nCreate a new constructor public Builder(Configuration conf) which initializes the separator with the config, do not save the conf since we do not need it\nAdd a new method public append(String key, String value) which calls sb.append(key).append(separator).append(value)\nReplace all places using builder.context with builder.sb.toString(), especially in CallerContext(Builder b) constructor.\n\nThis seems very straightforward without losing configurability:\n\nit will not allow user to mix different separator when appending multiple key/values since it's final either from the default , or from Configuration\nno need to create a new string builder every time calling append(key, value)\nuser does not need to call builder.setConf(conf)\nwe do not  save conf by implementing Configurable interface so this builder lightweight\n\nThoughts?", "author": "liuml07", "createdAt": "2020-09-26T01:56:57Z", "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/CallerContext.java", "diffHunk": "@@ -108,24 +117,86 @@ public String toString() {\n   }\n \n   /** The caller context builder. */\n-  public static final class Builder {\n-    private final String context;\n+  public static final class Builder implements Configurable {", "originalCommit": "a0b376f0589777ad96b034e0eb7008e688fc17ad", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTUxNzYzNQ==", "url": "https://github.com/apache/hadoop/pull/2327#discussion_r495517635", "bodyText": "Great suggestions!\n\nAdd a new method public append(String key, String value) which calls\nsb.append(key).append(separator).append(value)\n\nFor example, maybe context contains multi items and it is \"mr_xxxx,ip:a.b.c.d\", here item separator is ',' and key/value separator is ':', the separator we define is item separator. should we add method public append(String key, String value, separator)?", "author": "ferhui", "createdAt": "2020-09-27T02:23:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTM3NTM2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTUyNDM1Ng==", "url": "https://github.com/apache/hadoop/pull/2327#discussion_r495524356", "bodyText": "It's straightforward to always use : to split key:value and do not allow user to change that. We can allow user to specify the item separator from Configuration but it can not be =, \\n, \\t or : etc\nSo we do not need the append(key, value, separator) method, since the append(key, value) simply appends $separator,key:value where separator is final from Configuration (or default).\nDoes this make sense?", "author": "liuml07", "createdAt": "2020-09-27T03:54:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTM3NTM2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTUzMDc4NA==", "url": "https://github.com/apache/hadoop/pull/2327#discussion_r495530784", "bodyText": "It's ok. Get it.", "author": "ferhui", "createdAt": "2020-09-27T05:24:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTM3NTM2Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTM3NTY3Mw==", "url": "https://github.com/apache/hadoop/pull/2327#discussion_r495375673", "bodyText": "hadoop.caller.context.separator would just work for me. Shorter and easier to remember.", "author": "liuml07", "createdAt": "2020-09-26T01:57:38Z", "path": "hadoop-common-project/hadoop-common/src/main/resources/core-default.xml", "diffHunk": "@@ -3826,6 +3826,13 @@\n       in audit logs.\n     </description>\n   </property>\n+  <property>\n+    <name>hadoop.caller.context.item.separator</name>", "originalCommit": "a0b376f0589777ad96b034e0eb7008e688fc17ad", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTUxNzY0OQ==", "url": "https://github.com/apache/hadoop/pull/2327#discussion_r495517649", "bodyText": "It's ok", "author": "ferhui", "createdAt": "2020-09-27T02:23:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTM3NTY3Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTM3NjA1Mg==", "url": "https://github.com/apache/hadoop/pull/2327#discussion_r495376052", "bodyText": "Add an example with two key/value items to make this embarrassingly clear?", "author": "liuml07", "createdAt": "2020-09-26T01:58:33Z", "path": "hadoop-common-project/hadoop-common/src/main/resources/core-default.xml", "diffHunk": "@@ -3826,6 +3826,13 @@\n       in audit logs.\n     </description>\n   </property>\n+  <property>\n+    <name>hadoop.caller.context.item.separator</name>\n+    <value>,</value>\n+    <description>\n+      The separator is for context which maybe contain many items.", "originalCommit": "a0b376f0589777ad96b034e0eb7008e688fc17ad", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTUxNzY3OQ==", "url": "https://github.com/apache/hadoop/pull/2327#discussion_r495517679", "bodyText": "Will add an example", "author": "ferhui", "createdAt": "2020-09-27T02:24:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTM3NjA1Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTM3NzMyNA==", "url": "https://github.com/apache/hadoop/pull/2327#discussion_r495377324", "bodyText": "Use assertEquals to compare values, instead of comparing true with the return value of equals.\nassertEquals(\"context1$context2$key3:value3$$$\", builder.build().getContext());\n\nSimple reason: if it fails, the suggested way will show you expected value and real value of the context - which can help you debug.", "author": "liuml07", "createdAt": "2020-09-26T02:01:21Z", "path": "hadoop-common-project/hadoop-common/src/test/java/org/apache/hadoop/ipc/TestCallerContext.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.ipc;\n+\n+import org.apache.hadoop.conf.Configuration;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import static org.apache.hadoop.fs.CommonConfigurationKeysPublic.HADOOP_CALLER_CONTEXT_ITEM_SEPARATOR_DEFAULT;\n+import static org.apache.hadoop.fs.CommonConfigurationKeysPublic.HADOOP_CALLER_CONTEXT_ITEM_SEPARATOR_KEY;\n+\n+public class TestCallerContext {\n+  @Test\n+  public void testBuilderAppend() {\n+    Configuration conf = new Configuration();\n+    conf.set(HADOOP_CALLER_CONTEXT_ITEM_SEPARATOR_KEY, \"$\");\n+    CallerContext.Builder builder = new CallerContext.Builder(null);\n+    builder.setConf(conf);\n+    CallerContext context =\n+        builder.append(\"context1\").append(\"context2\").append(\"key3\", \"value3\", \":\").build();\n+    Assert.assertEquals(true,\n+        context.getContext().contains(\"$\"));\n+    String[] items = context.getContext().split(\"\\\\$\");\n+    Assert.assertEquals(3, items.length);\n+    Assert.assertEquals(true, items[2].equals(\"key3:value3\"));\n+\n+    builder.append(\"$$\");\n+    Assert.assertEquals(true,", "originalCommit": "a0b376f0589777ad96b034e0eb7008e688fc17ad", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTUxNzcxNQ==", "url": "https://github.com/apache/hadoop/pull/2327#discussion_r495517715", "bodyText": "ok", "author": "ferhui", "createdAt": "2020-09-27T02:24:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTM3NzMyNA=="}], "type": "inlineReview"}, {"oid": "51090695932dbd94624bcbdef929fbf507d6c2d2", "url": "https://github.com/apache/hadoop/commit/51090695932dbd94624bcbdef929fbf507d6c2d2", "message": "reconstruct context Builder with liuml07 suggestions and fix checkstyle", "committedDate": "2020-09-27T06:22:33Z", "type": "commit"}, {"oid": "a43e0309d953b408359f5bee0ada84c21473f027", "url": "https://github.com/apache/hadoop/commit/a43e0309d953b408359f5bee0ada84c21473f027", "message": "remove uselese method", "committedDate": "2020-09-27T06:35:02Z", "type": "commit"}, {"oid": "91907528d2fb9cab381e9a27be653b962a3dc2d9", "url": "https://github.com/apache/hadoop/commit/91907528d2fb9cab381e9a27be653b962a3dc2d9", "message": "remove useless conf", "committedDate": "2020-09-27T06:38:32Z", "type": "commit"}, {"oid": "d87313ec9d10af66e00502db3d71530ec936b9db", "url": "https://github.com/apache/hadoop/commit/d87313ec9d10af66e00502db3d71530ec936b9db", "message": "fix UT", "committedDate": "2020-09-27T16:13:19Z", "type": "commit"}, {"oid": "317a5f0465f72fdd212d3804c2e8a4adf13a11e3", "url": "https://github.com/apache/hadoop/commit/317a5f0465f72fdd212d3804c2e8a4adf13a11e3", "message": "Fix Yarn UT", "committedDate": "2020-09-28T02:50:33Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjEwMjQxNQ==", "url": "https://github.com/apache/hadoop/pull/2327#discussion_r496102415", "bodyText": "I think it is cleaner to make it a method: getContext() in the Builder so we do the checks there.", "author": "goiri", "createdAt": "2020-09-28T17:01:50Z", "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/CallerContext.java", "diffHunk": "@@ -54,7 +58,7 @@\n   private final byte[] signature;\n \n   private CallerContext(Builder builder) {\n-    this.context = builder.context;\n+    this.context = builder.sb.length() > 0 ? builder.sb.toString() : null;", "originalCommit": "317a5f0465f72fdd212d3804c2e8a4adf13a11e3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjEyNzU4MQ==", "url": "https://github.com/apache/hadoop/pull/2327#discussion_r496127581", "bodyText": "This makes sense. It's clearer.", "author": "liuml07", "createdAt": "2020-09-28T17:46:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjEwMjQxNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjEwMjgzMA==", "url": "https://github.com/apache/hadoop/pull/2327#discussion_r496102830", "bodyText": "Should we make the colon a constant or even configurable?", "author": "goiri", "createdAt": "2020-09-28T17:02:32Z", "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/CallerContext.java", "diffHunk": "@@ -123,6 +140,37 @@ public Builder setSignature(byte[] signature) {\n       return this;\n     }\n \n+    /**\n+     * Append new item to the context.\n+     * @param item\n+     * @return builder\n+     */\n+    public Builder append(String item) {\n+      if (isValid(item)) {\n+        if (sb.length() > 0) {\n+          sb.append(separator);\n+        }\n+        sb.append(item);\n+      }\n+      return this;\n+    }\n+\n+    /**\n+     * Append new item which contains key and value to the context.\n+     * @param key\n+     * @param value\n+     * @return builder\n+     */\n+    public Builder append(String key, String value) {\n+      if (isValid(key) && isValid(value)) {\n+        if (sb.length() > 0) {\n+          sb.append(separator);\n+        }\n+        sb.append(key + \":\" + value);", "originalCommit": "317a5f0465f72fdd212d3804c2e8a4adf13a11e3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjEyNjg5OA==", "url": "https://github.com/apache/hadoop/pull/2327#discussion_r496126898", "bodyText": "I was proposing fixed : for two reasons:\n\nWe have too many Hadoop configurations and I was thinking we add one more only when necessary. Using : seems most popular choice to me\nThere are not many choices I imagine and users have to know they can not use \\t, \\n, = etc. So I prefer simplicity.\n\nBut I'm also fine if we go with a new config for this, +0 on that.\nThank you @goiri", "author": "liuml07", "createdAt": "2020-09-28T17:45:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjEwMjgzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE4NTMwMg==", "url": "https://github.com/apache/hadoop/pull/2327#discussion_r496185302", "bodyText": "Let's make it at least a constant and not do + but appends.", "author": "goiri", "createdAt": "2020-09-28T19:34:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjEwMjgzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE4NjU5Mw==", "url": "https://github.com/apache/hadoop/pull/2327#discussion_r496186593", "bodyText": "Yes making :a constant and replacing + with append() both make perfect sense.", "author": "liuml07", "createdAt": "2020-09-28T19:36:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjEwMjgzMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjEyODIxNQ==", "url": "https://github.com/apache/hadoop/pull/2327#discussion_r496128215", "bodyText": "nit: final?", "author": "liuml07", "createdAt": "2020-09-28T17:47:46Z", "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/CallerContext.java", "diffHunk": "@@ -109,11 +113,24 @@ public String toString() {\n \n   /** The caller context builder. */\n   public static final class Builder {\n-    private final String context;\n+    private final String separator;\n+    private StringBuilder sb = new StringBuilder();", "originalCommit": "317a5f0465f72fdd212d3804c2e8a4adf13a11e3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "ac181340c6b6a0c63f2220287f8b1a409916dad3", "url": "https://github.com/apache/hadoop/commit/ac181340c6b6a0c63f2220287f8b1a409916dad3", "message": "Add getContext and getSignature to Builder, Replace append instead of +", "committedDate": "2020-09-29T02:41:29Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjM1NTU3MA==", "url": "https://github.com/apache/hadoop/pull/2327#discussion_r496355570", "bodyText": "The name should be capitalized.\nI would also call it something like FIELD_SEPARATOR or KEY_VALUE_SEPARATOR_CHAR.", "author": "goiri", "createdAt": "2020-09-29T03:23:51Z", "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/CallerContext.java", "diffHunk": "@@ -113,8 +113,9 @@ public String toString() {\n \n   /** The caller context builder. */\n   public static final class Builder {\n+    private static final String colon = \":\";", "originalCommit": "ac181340c6b6a0c63f2220287f8b1a409916dad3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjM1NTY3MQ==", "url": "https://github.com/apache/hadoop/pull/2327#discussion_r496355671", "bodyText": "I think it would be a good place to have a javadoc describing what the context would look like and give examples.", "author": "goiri", "createdAt": "2020-09-29T03:24:19Z", "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/CallerContext.java", "diffHunk": "@@ -140,6 +141,14 @@ public Builder setSignature(byte[] signature) {\n       return this;\n     }\n \n+    public String getContext() {", "originalCommit": "ac181340c6b6a0c63f2220287f8b1a409916dad3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjM1NTcwNg==", "url": "https://github.com/apache/hadoop/pull/2327#discussion_r496355706", "bodyText": "Simple javadoc.", "author": "goiri", "createdAt": "2020-09-29T03:24:29Z", "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/CallerContext.java", "diffHunk": "@@ -140,6 +141,14 @@ public Builder setSignature(byte[] signature) {\n       return this;\n     }\n \n+    public String getContext() {\n+      return sb.length() > 0 ? sb.toString() : null;\n+    }\n+\n+    public byte[] getSignature() {", "originalCommit": "ac181340c6b6a0c63f2220287f8b1a409916dad3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjM1NTkwOQ==", "url": "https://github.com/apache/hadoop/pull/2327#discussion_r496355909", "bodyText": "something a little more descriptive like: fieldSeparator", "author": "goiri", "createdAt": "2020-09-29T03:25:17Z", "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/CallerContext.java", "diffHunk": "@@ -109,11 +113,25 @@ public String toString() {\n \n   /** The caller context builder. */\n   public static final class Builder {\n-    private final String context;\n+    private static final String colon = \":\";\n+    private final String separator;", "originalCommit": "ac181340c6b6a0c63f2220287f8b1a409916dad3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjM1NjA2MA==", "url": "https://github.com/apache/hadoop/pull/2327#discussion_r496356060", "bodyText": "Expand a little. Same for the item one.", "author": "goiri", "createdAt": "2020-09-29T03:26:01Z", "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/CallerContext.java", "diffHunk": "@@ -123,6 +141,45 @@ public Builder setSignature(byte[] signature) {\n       return this;\n     }\n \n+    public String getContext() {\n+      return sb.length() > 0 ? sb.toString() : null;\n+    }\n+\n+    public byte[] getSignature() {\n+      return signature;\n+    }\n+\n+    /**\n+     * Append new item to the context.\n+     * @param item\n+     * @return builder\n+     */\n+    public Builder append(String item) {\n+      if (isValid(item)) {\n+        if (sb.length() > 0) {\n+          sb.append(separator);\n+        }\n+        sb.append(item);\n+      }\n+      return this;\n+    }\n+\n+    /**\n+     * Append new item which contains key and value to the context.\n+     * @param key", "originalCommit": "ac181340c6b6a0c63f2220287f8b1a409916dad3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjM1NjI1NQ==", "url": "https://github.com/apache/hadoop/pull/2327#discussion_r496356255", "bodyText": "This is technically not \"context\" but \"item\".\nGood to have a javadoc explaining what we don't allow.", "author": "goiri", "createdAt": "2020-09-29T03:26:54Z", "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/CallerContext.java", "diffHunk": "@@ -109,11 +113,25 @@ public String toString() {\n \n   /** The caller context builder. */\n   public static final class Builder {\n-    private final String context;\n+    private static final String colon = \":\";\n+    private final String separator;\n+    private final StringBuilder sb = new StringBuilder();\n     private byte[] signature;\n \n     public Builder(String context) {\n-      this.context = context;\n+      separator = HADOOP_CALLER_CONTEXT_SEPARATOR_DEFAULT;\n+      if (isValid(context)) {\n+        sb.append(context);\n+      }\n+    }\n+\n+    public Builder(Configuration conf) {\n+      separator = conf.get(HADOOP_CALLER_CONTEXT_SEPARATOR_KEY,\n+          HADOOP_CALLER_CONTEXT_SEPARATOR_DEFAULT);\n+    }\n+\n+    private boolean isValid(String context) {\n+      return context != null && context.length() > 0;", "originalCommit": "ac181340c6b6a0c63f2220287f8b1a409916dad3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "a81004172e737535cc85050c84c98e52a289928a", "url": "https://github.com/apache/hadoop/commit/a81004172e737535cc85050c84c98e52a289928a", "message": "Add javadoc and change var name", "committedDate": "2020-09-29T05:03:33Z", "type": "commit"}, {"oid": "8d12e7f19cd324ec0511bf19bd29f24aebb45c41", "url": "https://github.com/apache/hadoop/commit/8d12e7f19cd324ec0511bf19bd29f24aebb45c41", "message": "grammar fix", "committedDate": "2020-09-29T05:05:37Z", "type": "commit"}, {"oid": "3edea36e65b65c922a088e6bb5c00f9db4336b53", "url": "https://github.com/apache/hadoop/commit/3edea36e65b65c922a088e6bb5c00f9db4336b53", "message": "Fix checkstyle", "committedDate": "2020-09-30T01:10:30Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzQ0MTExNQ==", "url": "https://github.com/apache/hadoop/pull/2327#discussion_r497441115", "bodyText": "After adding this constructor, new Builder(null) fails. This is an incompatible change because CallerContext is @Public.", "author": "aajisaka", "createdAt": "2020-09-30T11:38:31Z", "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/CallerContext.java", "diffHunk": "@@ -109,11 +113,32 @@ public String toString() {\n \n   /** The caller context builder. */\n   public static final class Builder {\n-    private final String context;\n+    private static final String KEY_VALUE_SEPARATOR = \":\";\n+    private final String fieldSeparator;\n+    private final StringBuilder sb = new StringBuilder();\n     private byte[] signature;\n \n     public Builder(String context) {\n-      this.context = context;\n+      fieldSeparator = HADOOP_CALLER_CONTEXT_SEPARATOR_DEFAULT;\n+      if (isValid(context)) {\n+        sb.append(context);\n+      }\n+    }\n+\n+    public Builder(Configuration conf) {\n+      fieldSeparator = conf.get(HADOOP_CALLER_CONTEXT_SEPARATOR_KEY,\n+          HADOOP_CALLER_CONTEXT_SEPARATOR_DEFAULT);\n+    }", "originalCommit": "3edea36e65b65c922a088e6bb5c00f9db4336b53", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzYyOTg5MA==", "url": "https://github.com/apache/hadoop/pull/2327#discussion_r497629890", "bodyText": "Good catch.\nRefactor builder constructor and remove unnecessary type case in test.\nPlease review, Thanks", "author": "ferhui", "createdAt": "2020-09-30T16:07:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzQ0MTExNQ=="}], "type": "inlineReview"}, {"oid": "6ab72cef10dd10e78d86e450d4bbde7677f5c496", "url": "https://github.com/apache/hadoop/commit/6ab72cef10dd10e78d86e450d4bbde7677f5c496", "message": "refactor builder constructor and remove type case in test", "committedDate": "2020-09-30T16:03:30Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzY1MDYzOQ==", "url": "https://github.com/apache/hadoop/pull/2327#discussion_r497650639", "bodyText": "Can we throw illegal argument exception if the fieldSeparator also has \\t, \\n, or =? Thanks,", "author": "liuml07", "createdAt": "2020-09-30T16:38:37Z", "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/CallerContext.java", "diffHunk": "@@ -109,11 +113,32 @@ public String toString() {\n \n   /** The caller context builder. */\n   public static final class Builder {\n-    private final String context;\n+    private static final String KEY_VALUE_SEPARATOR = \":\";\n+    private final String fieldSeparator;\n+    private final StringBuilder sb = new StringBuilder();\n     private byte[] signature;\n \n     public Builder(String context) {\n-      this.context = context;\n+      this(context, new Configuration());\n+    }\n+\n+    public Builder(String context, Configuration conf) {\n+      if (isValid(context)) {\n+        sb.append(context);\n+      }\n+      fieldSeparator = conf.get(HADOOP_CALLER_CONTEXT_SEPARATOR_KEY,\n+          HADOOP_CALLER_CONTEXT_SEPARATOR_DEFAULT);", "originalCommit": "6ab72cef10dd10e78d86e450d4bbde7677f5c496", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzY4MTQ3MA==", "url": "https://github.com/apache/hadoop/pull/2327#discussion_r497681470", "bodyText": "It's ok. add checkFieldSeparator method", "author": "ferhui", "createdAt": "2020-09-30T17:27:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzY1MDYzOQ=="}], "type": "inlineReview"}, {"oid": "0450d6b1922ce682fcd6e16000fcbff0e7ee945c", "url": "https://github.com/apache/hadoop/commit/0450d6b1922ce682fcd6e16000fcbff0e7ee945c", "message": "check field separator", "committedDate": "2020-09-30T17:25:06Z", "type": "commit"}, {"oid": "4116557204ce495342e2e1c74800c739e5d5787a", "url": "https://github.com/apache/hadoop/commit/4116557204ce495342e2e1c74800c739e5d5787a", "message": "fix javadoc", "committedDate": "2020-09-30T17:27:27Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzgzNTg3MA==", "url": "https://github.com/apache/hadoop/pull/2327#discussion_r497835870", "bodyText": "I would define the list of illegal characters in an static list or check and check if the separator is there.", "author": "goiri", "createdAt": "2020-09-30T22:27:33Z", "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/CallerContext.java", "diffHunk": "@@ -109,11 +113,47 @@ public String toString() {\n \n   /** The caller context builder. */\n   public static final class Builder {\n-    private final String context;\n+    private static final String KEY_VALUE_SEPARATOR = \":\";\n+    private final String fieldSeparator;\n+    private final StringBuilder sb = new StringBuilder();\n     private byte[] signature;\n \n     public Builder(String context) {\n-      this.context = context;\n+      this(context, new Configuration());\n+    }\n+\n+    public Builder(String context, Configuration conf) {\n+      if (isValid(context)) {\n+        sb.append(context);\n+      }\n+      fieldSeparator = conf.get(HADOOP_CALLER_CONTEXT_SEPARATOR_KEY,\n+          HADOOP_CALLER_CONTEXT_SEPARATOR_DEFAULT);\n+      checkFieldSeparator(fieldSeparator);\n+    }\n+\n+    /**\n+     * Check whether the separator is legal.\n+     * The illegal separators include '\\t', '\\n', '=', etc.\n+     * Throw IllegalArgumentException if the separator is Illegal.\n+     * @param separator the separator of fields.\n+     */\n+    private void checkFieldSeparator(String separator) {\n+      if (separator.contains(\"\\t\") || separator.contains(\"\\n\")", "originalCommit": "4116557204ce495342e2e1c74800c739e5d5787a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzk2NDA5MQ==", "url": "https://github.com/apache/hadoop/pull/2327#discussion_r497964091", "bodyText": "It's ok. refactor checking separator, and add UT", "author": "ferhui", "createdAt": "2020-10-01T03:30:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzgzNTg3MA=="}], "type": "inlineReview"}, {"oid": "a6a2a7181dc457c0ab4080b3f87ef6ea1257039b", "url": "https://github.com/apache/hadoop/commit/a6a2a7181dc457c0ab4080b3f87ef6ea1257039b", "message": "refactor checking separator and add ut", "committedDate": "2020-10-01T03:22:37Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODE4OTkwMQ==", "url": "https://github.com/apache/hadoop/pull/2327#discussion_r498189901", "bodyText": "We should use Collections.unmodifiableList to provide an unmodifiable view.", "author": "aajisaka", "createdAt": "2020-10-01T12:02:12Z", "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/CallerContext.java", "diffHunk": "@@ -114,6 +115,12 @@ public String toString() {\n   /** The caller context builder. */\n   public static final class Builder {\n     private static final String KEY_VALUE_SEPARATOR = \":\";\n+    /**\n+     * The illegal separators include '\\t', '\\n', '=', etc.\n+     * User should not set illegal separator.\n+     */\n+    private static final List<String> ILLEGAL_SEPARATORS =\n+        Arrays.asList(\"\\t\",\"\\n\",\"=\");", "originalCommit": "a6a2a7181dc457c0ab4080b3f87ef6ea1257039b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQxNDAyMA==", "url": "https://github.com/apache/hadoop/pull/2327#discussion_r498414020", "bodyText": "I would do a set: Collections.unmodifiableSet()", "author": "goiri", "createdAt": "2020-10-01T17:43:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODE4OTkwMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQzNzAyNA==", "url": "https://github.com/apache/hadoop/pull/2327#discussion_r498437024", "bodyText": "Ok. Done", "author": "ferhui", "createdAt": "2020-10-01T18:26:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODE4OTkwMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODE5MTAxOQ==", "url": "https://github.com/apache/hadoop/pull/2327#discussion_r498191019", "bodyText": ", etc.\n\nThe illegal separators are only \\t, \\n, and =.\n\"etc\" is not needed.", "author": "aajisaka", "createdAt": "2020-10-01T12:04:23Z", "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/CallerContext.java", "diffHunk": "@@ -114,6 +115,12 @@ public String toString() {\n   /** The caller context builder. */\n   public static final class Builder {\n     private static final String KEY_VALUE_SEPARATOR = \":\";\n+    /**\n+     * The illegal separators include '\\t', '\\n', '=', etc.", "originalCommit": "a6a2a7181dc457c0ab4080b3f87ef6ea1257039b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODMzNzg3Ng==", "url": "https://github.com/apache/hadoop/pull/2327#discussion_r498337876", "bodyText": "It's ok. Remove etc from here and other places.", "author": "ferhui", "createdAt": "2020-10-01T15:34:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODE5MTAxOQ=="}], "type": "inlineReview"}, {"oid": "8eac93e8e3f22fd992cb743d15a8aec0d03fc320", "url": "https://github.com/apache/hadoop/commit/8eac93e8e3f22fd992cb743d15a8aec0d03fc320", "message": "fix comments", "committedDate": "2020-10-01T15:31:44Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQxMzkwMw==", "url": "https://github.com/apache/hadoop/pull/2327#discussion_r498413903", "bodyText": "Not that is wrong, but we could just do: ILLEGAL_SEPARATORS.contains(separator), and if we make it a HashSet would be faster.", "author": "goiri", "createdAt": "2020-10-01T17:43:03Z", "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/CallerContext.java", "diffHunk": "@@ -109,11 +114,53 @@ public String toString() {\n \n   /** The caller context builder. */\n   public static final class Builder {\n-    private final String context;\n+    private static final String KEY_VALUE_SEPARATOR = \":\";\n+    /**\n+     * The illegal separators include '\\t', '\\n', '='.\n+     * User should not set illegal separator.\n+     */\n+    private static final List<String> ILLEGAL_SEPARATORS =\n+        Arrays.asList(\"\\t\",\"\\n\",\"=\");\n+    private final String fieldSeparator;\n+    private final StringBuilder sb = new StringBuilder();\n     private byte[] signature;\n \n     public Builder(String context) {\n-      this.context = context;\n+      this(context, new Configuration());\n+    }\n+\n+    public Builder(String context, Configuration conf) {\n+      if (isValid(context)) {\n+        sb.append(context);\n+      }\n+      fieldSeparator = conf.get(HADOOP_CALLER_CONTEXT_SEPARATOR_KEY,\n+          HADOOP_CALLER_CONTEXT_SEPARATOR_DEFAULT);\n+      checkFieldSeparator(fieldSeparator);\n+    }\n+\n+    /**\n+     * Check whether the separator is legal.\n+     * The illegal separators include '\\t', '\\n', '='.\n+     * Throw IllegalArgumentException if the separator is Illegal.\n+     * @param separator the separator of fields.\n+     */\n+    private void checkFieldSeparator(String separator) {\n+      if (ILLEGAL_SEPARATORS.stream()", "originalCommit": "8eac93e8e3f22fd992cb743d15a8aec0d03fc320", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQzMzAzMQ==", "url": "https://github.com/apache/hadoop/pull/2327#discussion_r498433031", "bodyText": "Ok. It's done", "author": "ferhui", "createdAt": "2020-10-01T18:18:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQxMzkwMw=="}], "type": "inlineReview"}, {"oid": "923c96b82784690f97c0315f91df9243a55ca3a9", "url": "https://github.com/apache/hadoop/commit/923c96b82784690f97c0315f91df9243a55ca3a9", "message": "change ILLEGAL_SEPARATORS to hashset", "committedDate": "2020-10-01T18:10:27Z", "type": "commit"}, {"oid": "436ed73344062a89f51e24600da7745c5cc316f6", "url": "https://github.com/apache/hadoop/commit/436ed73344062a89f51e24600da7745c5cc316f6", "message": "fix checkstyle", "committedDate": "2020-10-02T09:52:16Z", "type": "commit"}]}