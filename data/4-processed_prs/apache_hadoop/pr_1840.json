{"pr_number": 1840, "pr_title": "HADOOP-16853. ITestS3GuardOutOfBandOperations failing on versioned S3 buckets", "pr_createdAt": "2020-02-11T18:08:10Z", "pr_url": "https://github.com/apache/hadoop/pull/1840", "timeline": [{"oid": "71b527fb65b842848a0daa98028b100d8f67a368", "url": "https://github.com/apache/hadoop/commit/71b527fb65b842848a0daa98028b100d8f67a368", "message": "HADOOP-16853. ITestS3GuardOutOfBandOperations failing on versioned S3 buckets.\n\nchooses a different assertion path based on store type/version ID.\n\nChange-Id: I08a4fed7268676e93ae3d9412f8f7b1edfbbe5a7", "committedDate": "2020-02-11T18:06:12Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA2NzA4Nw==", "url": "https://github.com/apache/hadoop/pull/1840#discussion_r378067087", "bodyText": "bytes = readOpenFileAPI(rawFS, testFilePath, length, null); should still fail right? Do you think we can also that in this if clause?", "author": "liuml07", "createdAt": "2020-02-12T06:53:23Z", "path": "hadoop-tools/hadoop-aws/src/test/java/org/apache/hadoop/fs/s3a/ITestS3GuardOutOfBandOperations.java", "diffHunk": "@@ -969,16 +970,42 @@ private void deleteFileInListing()\n       deleteFile(rawFS, testFilePath);\n \n       // File status will be still readable from s3guard\n-      FileStatus status = guardedFs.getFileStatus(testFilePath);\n+      S3AFileStatus status = (S3AFileStatus)\n+          guardedFs.getFileStatus(testFilePath);\n       LOG.info(\"authoritative: {} status: {}\", allowAuthoritative, status);\n-      expectExceptionWhenReading(testFilePath, text);\n-      expectExceptionWhenReadingOpenFileAPI(testFilePath, text, null);\n-      expectExceptionWhenReadingOpenFileAPI(testFilePath, text, status);\n+      if (isVersionedChangeDetection() && status.getVersionId() != null) {\n+        // when the status entry has a version ID, then that may be used\n+        // when opening the file on what is clearly a versioned store.\n+        int length = text.length();\n+        byte[] bytes = readOpenFileAPI(guardedFs, testFilePath, length, null);\n+        Assertions.assertThat(toChar(bytes))\n+            .describedAs(\"openFile(%s)\", testFilePath)\n+            .isEqualTo(text);\n+        // reading the rawFS with status will also work.\n+        bytes = readOpenFileAPI(rawFS, testFilePath, length, status);", "originalCommit": "71b527fb65b842848a0daa98028b100d8f67a368", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODIyMzIxNw==", "url": "https://github.com/apache/hadoop/pull/1840#discussion_r378223217", "bodyText": "bytes = readOpenFileAPI(rawFS, testFilePath, length, null); won't fail (tested). Why should it fail? TheFileStatus is just an additional parameter for theFutureDataInputStreamBuilder.", "author": "bgaborg", "createdAt": "2020-02-12T12:34:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA2NzA4Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQyMjI2Mg==", "url": "https://github.com/apache/hadoop/pull/1840#discussion_r378422262", "bodyText": "bytes = readOpenFileAPI(rawFS, testFilePath, length, null);\n\nThe file was deleted and I was expecting FNF exception here. I have not tested here with versioned  bucket.", "author": "liuml07", "createdAt": "2020-02-12T18:07:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA2NzA4Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDgxMTI4Nw==", "url": "https://github.com/apache/hadoop/pull/1840#discussion_r380811287", "bodyText": "bytes = readOpenFileAPI(rawFS, testFilePath, length, null) should fail; no status coming in, will add the check", "author": "steveloughran", "createdAt": "2020-02-18T17:07:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODA2NzA4Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODIyNjM4NA==", "url": "https://github.com/apache/hadoop/pull/1840#discussion_r378226384", "bodyText": "I would rather add this to the test as a new private method.", "author": "bgaborg", "createdAt": "2020-02-12T12:41:54Z", "path": "hadoop-tools/hadoop-aws/src/test/java/org/apache/hadoop/fs/s3a/ITestS3GuardOutOfBandOperations.java", "diffHunk": "@@ -969,16 +970,42 @@ private void deleteFileInListing()\n       deleteFile(rawFS, testFilePath);\n \n       // File status will be still readable from s3guard\n-      FileStatus status = guardedFs.getFileStatus(testFilePath);\n+      S3AFileStatus status = (S3AFileStatus)\n+          guardedFs.getFileStatus(testFilePath);\n       LOG.info(\"authoritative: {} status: {}\", allowAuthoritative, status);\n-      expectExceptionWhenReading(testFilePath, text);\n-      expectExceptionWhenReadingOpenFileAPI(testFilePath, text, null);\n-      expectExceptionWhenReadingOpenFileAPI(testFilePath, text, status);\n+      if (isVersionedChangeDetection() && status.getVersionId() != null) {", "originalCommit": "71b527fb65b842848a0daa98028b100d8f67a368", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQyMTE0MQ==", "url": "https://github.com/apache/hadoop/pull/1840#discussion_r378421141", "bodyText": "This is very specific to this test, which is not too long to me; and we don't need to pass some parameters to the new helper method. I\u2019m happy it sits here or a new method.", "author": "liuml07", "createdAt": "2020-02-12T18:05:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODIyNjM4NA=="}], "type": "inlineReview"}, {"oid": "3d2e4500f9ae5d42444eabcdc4341314e045ce2e", "url": "https://github.com/apache/hadoop/commit/3d2e4500f9ae5d42444eabcdc4341314e045ce2e", "message": "HADOOP-16853. assert that the rawFS doesn't open without the status\n\nChange-Id: If9f1a76716785e0a8a821541ca9b2bb65bb0d74d", "committedDate": "2020-02-18T17:30:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg2MjI3MQ==", "url": "https://github.com/apache/hadoop/pull/1840#discussion_r380862271", "bodyText": "nit: the , here goes to the end of last line... :)", "author": "liuml07", "createdAt": "2020-02-18T18:42:46Z", "path": "hadoop-tools/hadoop-aws/src/test/java/org/apache/hadoop/fs/s3a/ITestS3GuardOutOfBandOperations.java", "diffHunk": "@@ -1032,8 +1034,26 @@ private void expectExceptionWhenReading(Path testFilePath, String text)\n   private void expectExceptionWhenReadingOpenFileAPI(\n       Path testFilePath, String text, FileStatus status)\n       throws Exception {\n+    expectExceptionWhenReadingOpenFileAPI(guardedFs,\n+        testFilePath, text, status);\n+  }\n+\n+  /**\n+   * We expect the read to fail with an FNFE: open will be happy.\n+   * @param fs filesystem\n+   * @param testFilePath path of the test file\n+   * @param text the context in the file.\n+   * @param status optional status for the withFileStatus operation.\n+   * @throws Exception failure other than the FNFE\n+   */\n+  private void expectExceptionWhenReadingOpenFileAPI(\n+      final S3AFileSystem fs,\n+      final Path testFilePath\n+      , final String text,", "originalCommit": "3d2e4500f9ae5d42444eabcdc4341314e045ce2e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "b6fb56e6f231dc0024c4161e58978da0d3371631", "url": "https://github.com/apache/hadoop/commit/b6fb56e6f231dc0024c4161e58978da0d3371631", "message": "HADOOP-16853\n\ntestListingInDelete to take deleteFileinListing() in line.\n\nI did that by moving the test method down, as that was the smallest change\n\nChange-Id: I8f112de3bcd03e069291bc81e3e5429452485326", "committedDate": "2020-02-24T17:11:35Z", "type": "commit"}]}