{"pr_number": 3197, "pr_title": "GH-3183: Add ReactiveRequestHandlerAdvice", "pr_createdAt": "2020-02-27T21:35:37Z", "pr_url": "https://github.com/spring-projects/spring-integration/pull/3197", "timeline": [{"oid": "b91c943cf2b2899f4eaf80ab7b8dfc5a89b476e5", "url": "https://github.com/spring-projects/spring-integration/commit/b91c943cf2b2899f4eaf80ab7b8dfc5a89b476e5", "message": "* Fix Checkstyle violations\n* Add JavaDocs to new classes\n* Fix some code style inconsistency in the `AbstractMessageProducingHandler`", "committedDate": "2020-02-28T18:20:28Z", "type": "forcePushed"}, {"oid": "1f68bb41e024e7c4a92710d46b74be858184eda7", "url": "https://github.com/spring-projects/spring-integration/commit/1f68bb41e024e7c4a92710d46b74be858184eda7", "message": "GH-3183: Add ReactiveRequestHandlerAdvice\n\nFixes https://github.com/spring-projects/spring-integration/issues/3183\n\n* Introduce a `ReactiveRequestHandlerAdvice` with a `BiFunction<Message<?>, Mono<?>, Publisher<?>>`\nlogic to apply a `Mono.transform()` operator for a returned from the handler `Mono` reply\n* Fix `WebFluxRequestExecutingMessageHandler` to return a `Mono.then()` instead of an explicit subscription -\nit happens downstream anyway during reply producing with a proper error handling, too\n* Demonstrate `ReactiveRequestHandlerAdvice` in the `RSocketDslTests` - without `retry()` it fails\n* Add `ConsumerEndpointSpec.customizeMonoReply()` for convenience\n* Document `ReactiveRequestHandlerAdvice` feature", "committedDate": "2020-03-03T21:03:23Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQzMzE5OQ==", "url": "https://github.com/spring-projects/spring-integration/pull/3197#discussion_r388433199", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            For example when we can an HTTP request over WebFlux client, we could use bellow configuration to not wait for response more than 5 seconds:\n          \n          \n            \n            For example when we can an HTTP request over WebFlux client, we could use below configuration to not wait for response more than 5 seconds:", "author": "garyrussell", "createdAt": "2020-03-05T17:04:50Z", "path": "src/reference/asciidoc/handler-advice.adoc", "diffHunk": "@@ -549,6 +551,26 @@ public Message<?> service(Message<?> message) {\n ----\n ====\n \n+[[reactive-advice]]\n+==== Reactive Advice\n+\n+Starting with version 5.3, a `ReactiveRequestHandlerAdvice` can be used for request message handlers producing a `Mono` replies.\n+A `BiFunction<Message<?>, Mono<?>, Publisher<?>>` has to be provided for this advice and it is called from the `Mono.transform()` operator on a reply produced by the intercepted `handleRequestMessage()` method implementation.\n+Typically such a `Mono` customization is necessary when we would like to control network fluctuations via `timeout()`, `retry()` and similar support operators.\n+For example when we can an HTTP request over WebFlux client, we could use bellow configuration to not wait for response more than 5 seconds:", "originalCommit": "1f68bb41e024e7c4a92710d46b74be858184eda7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQzMzcwMw==", "url": "https://github.com/spring-projects/spring-integration/pull/3197#discussion_r388433703", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The `message` argument is a request message for such a message handler and can be used to determine a request-scope attributes.\n          \n          \n            \n            The `message` argument is the request message for the message handler and can be used to determine request-scope attributes.", "author": "garyrussell", "createdAt": "2020-03-05T17:05:44Z", "path": "src/reference/asciidoc/handler-advice.adoc", "diffHunk": "@@ -549,6 +551,26 @@ public Message<?> service(Message<?> message) {\n ----\n ====\n \n+[[reactive-advice]]\n+==== Reactive Advice\n+\n+Starting with version 5.3, a `ReactiveRequestHandlerAdvice` can be used for request message handlers producing a `Mono` replies.\n+A `BiFunction<Message<?>, Mono<?>, Publisher<?>>` has to be provided for this advice and it is called from the `Mono.transform()` operator on a reply produced by the intercepted `handleRequestMessage()` method implementation.\n+Typically such a `Mono` customization is necessary when we would like to control network fluctuations via `timeout()`, `retry()` and similar support operators.\n+For example when we can an HTTP request over WebFlux client, we could use bellow configuration to not wait for response more than 5 seconds:\n+\n+====\n+[source, java]\n+----\n+.handle(WebFlux.outboundGateway(\"https://somehost/\"),\n+                       e -> e.customizeMonoReply((message, mono) -> mono.timeout(Duration.ofSeconds(5))));\n+----\n+====\n+\n+The `message` argument is a request message for such a message handler and can be used to determine a request-scope attributes.", "originalCommit": "1f68bb41e024e7c4a92710d46b74be858184eda7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQzNDQyNA==", "url": "https://github.com/spring-projects/spring-integration/pull/3197#discussion_r388434424", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The `mono` argument is a result of this message handler `handleRequestMessage()` method implementation.\n          \n          \n            \n            The `mono` argument is the result of this message handler's `handleRequestMessage()` method implementation.", "author": "garyrussell", "createdAt": "2020-03-05T17:06:40Z", "path": "src/reference/asciidoc/handler-advice.adoc", "diffHunk": "@@ -549,6 +551,26 @@ public Message<?> service(Message<?> message) {\n ----\n ====\n \n+[[reactive-advice]]\n+==== Reactive Advice\n+\n+Starting with version 5.3, a `ReactiveRequestHandlerAdvice` can be used for request message handlers producing a `Mono` replies.\n+A `BiFunction<Message<?>, Mono<?>, Publisher<?>>` has to be provided for this advice and it is called from the `Mono.transform()` operator on a reply produced by the intercepted `handleRequestMessage()` method implementation.\n+Typically such a `Mono` customization is necessary when we would like to control network fluctuations via `timeout()`, `retry()` and similar support operators.\n+For example when we can an HTTP request over WebFlux client, we could use bellow configuration to not wait for response more than 5 seconds:\n+\n+====\n+[source, java]\n+----\n+.handle(WebFlux.outboundGateway(\"https://somehost/\"),\n+                       e -> e.customizeMonoReply((message, mono) -> mono.timeout(Duration.ofSeconds(5))));\n+----\n+====\n+\n+The `message` argument is a request message for such a message handler and can be used to determine a request-scope attributes.\n+The `mono` argument is a result of this message handler `handleRequestMessage()` method implementation.", "originalCommit": "1f68bb41e024e7c4a92710d46b74be858184eda7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "6af51f92bc37afdfcbb3175a3b865adcab86f7c2", "url": "https://github.com/spring-projects/spring-integration/commit/6af51f92bc37afdfcbb3175a3b865adcab86f7c2", "message": "GH-3183: Add ReactiveRequestHandlerAdvice\n\nFixes https://github.com/spring-projects/spring-integration/issues/3183\n\n* Introduce a `ReactiveRequestHandlerAdvice` with a `BiFunction<Message<?>, Mono<?>, Publisher<?>>`\nlogic to apply a `Mono.transform()` operator for a returned from the handler `Mono` reply\n* Fix `WebFluxRequestExecutingMessageHandler` to return a `Mono.then()` instead of an explicit subscription -\nit happens downstream anyway during reply producing with a proper error handling, too\n* Demonstrate `ReactiveRequestHandlerAdvice` in the `RSocketDslTests` - without `retry()` it fails\n* Add `ConsumerEndpointSpec.customizeMonoReply()` for convenience\n* Document `ReactiveRequestHandlerAdvice` feature", "committedDate": "2020-03-05T18:14:45Z", "type": "commit"}, {"oid": "8b515011ddfbbc48485380d6f2b6219f2c379834", "url": "https://github.com/spring-projects/spring-integration/commit/8b515011ddfbbc48485380d6f2b6219f2c379834", "message": "* Fix language in docs", "committedDate": "2020-03-05T18:16:12Z", "type": "commit"}, {"oid": "8b515011ddfbbc48485380d6f2b6219f2c379834", "url": "https://github.com/spring-projects/spring-integration/commit/8b515011ddfbbc48485380d6f2b6219f2c379834", "message": "* Fix language in docs", "committedDate": "2020-03-05T18:16:12Z", "type": "forcePushed"}]}