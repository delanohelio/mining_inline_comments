{"pr_number": 3254, "pr_title": "Add `ReactiveMessageSourceProducer`", "pr_createdAt": "2020-04-22T18:33:51Z", "pr_url": "https://github.com/spring-projects/spring-integration/pull/3254", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzM1NjA2MQ==", "url": "https://github.com/spring-projects/spring-integration/pull/3254#discussion_r413356061", "bodyText": "mentioned", "author": "garyrussell", "createdAt": "2020-04-22T21:47:42Z", "path": "src/reference/asciidoc/reactive-streams.adoc", "diffHunk": "@@ -89,6 +89,17 @@ The channel adapter goes to a stopped state when a subscription to the `Publishe\n Calling `stop()` on such a channel adapter completes the producing from the source `Publisher`.\n The channel adapter can be restarted with automatic subscription to a newly created source `Publisher`.\n \n+=== Message Source to Reactive Streams\n+\n+Starting with version 5.3, a `ReactiveMessageSourceProducer` is provided.\n+It is a combination of a provided `MessageSource` and event-driven production into the configured `outputChannel`.\n+Internally it wraps a `MessageSource` into the repeatedly resubscribed `Mono` producing a `Flux<Message<?>>` to be subscribed in the `subscribeToPublisher(Publisher<? extends Message<?>>)` mention above.", "originalCommit": "7ff705cba5e38ff213c4186a1671044df15256ba", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzM1NjM4OQ==", "url": "https://github.com/spring-projects/spring-integration/pull/3254#discussion_r413356389", "bodyText": "it is 1 second.", "author": "garyrussell", "createdAt": "2020-04-22T21:48:21Z", "path": "src/reference/asciidoc/reactive-streams.adoc", "diffHunk": "@@ -89,6 +89,17 @@ The channel adapter goes to a stopped state when a subscription to the `Publishe\n Calling `stop()` on such a channel adapter completes the producing from the source `Publisher`.\n The channel adapter can be restarted with automatic subscription to a newly created source `Publisher`.\n \n+=== Message Source to Reactive Streams\n+\n+Starting with version 5.3, a `ReactiveMessageSourceProducer` is provided.\n+It is a combination of a provided `MessageSource` and event-driven production into the configured `outputChannel`.\n+Internally it wraps a `MessageSource` into the repeatedly resubscribed `Mono` producing a `Flux<Message<?>>` to be subscribed in the `subscribeToPublisher(Publisher<? extends Message<?>>)` mention above.\n+The subscription for this `Mono` is done using `Schedulers.boundedElastic()` to avoid possible blocking in the target `MessageSource`.\n+When the message source returns `null` (no data to pull), the `Mono` is turned into a `repeatWhenEmpty()` state with a `delay` for a subsequent re-subscription based on a `IntegrationReactiveUtils.DELAY_WHEN_EMPTY_KEY` `Duration` entry from the subscriber context.\n+By default it is a 1 second.", "originalCommit": "7ff705cba5e38ff213c4186a1671044df15256ba", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzM1Njc5MA==", "url": "https://github.com/spring-projects/spring-integration/pull/3254#discussion_r413356790", "bodyText": "in the headers\nif the downstream flow throws\nwith the failed messagee", "author": "garyrussell", "createdAt": "2020-04-22T21:49:07Z", "path": "src/reference/asciidoc/reactive-streams.adoc", "diffHunk": "@@ -89,6 +89,17 @@ The channel adapter goes to a stopped state when a subscription to the `Publishe\n Calling `stop()` on such a channel adapter completes the producing from the source `Publisher`.\n The channel adapter can be restarted with automatic subscription to a newly created source `Publisher`.\n \n+=== Message Source to Reactive Streams\n+\n+Starting with version 5.3, a `ReactiveMessageSourceProducer` is provided.\n+It is a combination of a provided `MessageSource` and event-driven production into the configured `outputChannel`.\n+Internally it wraps a `MessageSource` into the repeatedly resubscribed `Mono` producing a `Flux<Message<?>>` to be subscribed in the `subscribeToPublisher(Publisher<? extends Message<?>>)` mention above.\n+The subscription for this `Mono` is done using `Schedulers.boundedElastic()` to avoid possible blocking in the target `MessageSource`.\n+When the message source returns `null` (no data to pull), the `Mono` is turned into a `repeatWhenEmpty()` state with a `delay` for a subsequent re-subscription based on a `IntegrationReactiveUtils.DELAY_WHEN_EMPTY_KEY` `Duration` entry from the subscriber context.\n+By default it is a 1 second.\n+If the `MessageSource` produces messages with a `IntegrationMessageHeaderAccessor.ACKNOWLEDGMENT_CALLBACK` information in headers, it is acknowledged (if necessary) in the `doOnSuccess()` of the original `Mono` and rejected in the `doOnError()` if downstream flow throws a `MessagingException` with failed message to reject.", "originalCommit": "7ff705cba5e38ff213c4186a1671044df15256ba", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzM1NzI0Ng==", "url": "https://github.com/spring-projects/spring-integration/pull/3254#discussion_r413357246", "bodyText": "a polling channel adapter's features", "author": "garyrussell", "createdAt": "2020-04-22T21:49:57Z", "path": "src/reference/asciidoc/reactive-streams.adoc", "diffHunk": "@@ -89,6 +89,17 @@ The channel adapter goes to a stopped state when a subscription to the `Publishe\n Calling `stop()` on such a channel adapter completes the producing from the source `Publisher`.\n The channel adapter can be restarted with automatic subscription to a newly created source `Publisher`.\n \n+=== Message Source to Reactive Streams\n+\n+Starting with version 5.3, a `ReactiveMessageSourceProducer` is provided.\n+It is a combination of a provided `MessageSource` and event-driven production into the configured `outputChannel`.\n+Internally it wraps a `MessageSource` into the repeatedly resubscribed `Mono` producing a `Flux<Message<?>>` to be subscribed in the `subscribeToPublisher(Publisher<? extends Message<?>>)` mention above.\n+The subscription for this `Mono` is done using `Schedulers.boundedElastic()` to avoid possible blocking in the target `MessageSource`.\n+When the message source returns `null` (no data to pull), the `Mono` is turned into a `repeatWhenEmpty()` state with a `delay` for a subsequent re-subscription based on a `IntegrationReactiveUtils.DELAY_WHEN_EMPTY_KEY` `Duration` entry from the subscriber context.\n+By default it is a 1 second.\n+If the `MessageSource` produces messages with a `IntegrationMessageHeaderAccessor.ACKNOWLEDGMENT_CALLBACK` information in headers, it is acknowledged (if necessary) in the `doOnSuccess()` of the original `Mono` and rejected in the `doOnError()` if downstream flow throws a `MessagingException` with failed message to reject.\n+This `ReactiveMessageSourceProducer` could be used for any use-case when a polling channel adapter features should be turned into a reactive, on demand solution for any existing `MessageSource<?>` implementation.", "originalCommit": "7ff705cba5e38ff213c4186a1671044df15256ba", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzM1NzQ1Ng==", "url": "https://github.com/spring-projects/spring-integration/pull/3254#discussion_r413357456", "bodyText": "into a Flux", "author": "garyrussell", "createdAt": "2020-04-22T21:50:24Z", "path": "src/reference/asciidoc/whats-new.adoc", "diffHunk": "@@ -27,6 +27,13 @@ See its JavaDocs and <<./graph.adoc#integration-graph,Integration Graph>> for mo\n The `ReactiveMessageHandler` is now natively supported in the framework.\n See <<./reactive-streams.adoc#reactive-message-handler,ReactiveMessageHandler>> for more information.\n \n+\n+[[x5.3-reactive-message-source-producer]]\n+==== `ReactiveMessageSourceProducer`\n+\n+The `ReactiveMessageSourceProducer` is a reactive implementation of the `MessageProducerSupport` to wrap a provided `MessageSource` into the `Flux` for on demand `receive()` calls.", "originalCommit": "7ff705cba5e38ff213c4186a1671044df15256ba", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "559474f8c04a2ed429dbcbe2895b66a0905d7ba3", "url": "https://github.com/spring-projects/spring-integration/commit/559474f8c04a2ed429dbcbe2895b66a0905d7ba3", "message": "* Fix Docs typos", "committedDate": "2020-04-23T16:06:51Z", "type": "forcePushed"}, {"oid": "d7f59f140626dc2d74ad73f3302ad8730f701716", "url": "https://github.com/spring-projects/spring-integration/commit/d7f59f140626dc2d74ad73f3302ad8730f701716", "message": "Add `ReactiveMessageSourceProducer`\n\nThe `ReactiveMessageSourceProducer` wraps a provided `MessageSource`\ninto a `Flux` for subscription in the `subscribeToPublisher(Publisher<? extends Message<?>>)`\nto make a source polling feature fully based on a reactive, on demand solution\n\n* Introduce a `IntegrationReactiveUtils` replacing existing `MessageChannelReactiveUtils`\nwith more functionality\n* Replace a deprecated `MessageChannelReactiveUtils` with a new `IntegrationReactiveUtils`\n* Test and document the feature", "committedDate": "2020-04-23T18:08:00Z", "type": "commit"}, {"oid": "ff717c2bd45c0433970ced27a0f12d2fffd65cd7", "url": "https://github.com/spring-projects/spring-integration/commit/ff717c2bd45c0433970ced27a0f12d2fffd65cd7", "message": "* Fix Docs typos", "committedDate": "2020-04-23T18:08:00Z", "type": "commit"}, {"oid": "fd4d62cf6502c28a6b7e2affb7f4c54258cbae85", "url": "https://github.com/spring-projects/spring-integration/commit/fd4d62cf6502c28a6b7e2affb7f4c54258cbae85", "message": "* Remove unused imports from `MessageChannelReactiveUtils`", "committedDate": "2020-04-23T18:08:00Z", "type": "commit"}, {"oid": "9b1fabfb2fc486d18fd6c7b41147fbeef7997b4d", "url": "https://github.com/spring-projects/spring-integration/commit/9b1fabfb2fc486d18fd6c7b41147fbeef7997b4d", "message": "* Fix JavaDoc copy/paste artifact", "committedDate": "2020-04-23T18:25:26Z", "type": "commit"}, {"oid": "9b1fabfb2fc486d18fd6c7b41147fbeef7997b4d", "url": "https://github.com/spring-projects/spring-integration/commit/9b1fabfb2fc486d18fd6c7b41147fbeef7997b4d", "message": "* Fix JavaDoc copy/paste artifact", "committedDate": "2020-04-23T18:25:26Z", "type": "forcePushed"}]}