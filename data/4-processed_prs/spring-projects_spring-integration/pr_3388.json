{"pr_number": 3388, "pr_title": "INT-3045: Add in & out ZeroMq channel adapters", "pr_createdAt": "2020-09-22T21:38:59Z", "pr_url": "https://github.com/spring-projects/spring-integration/pull/3388", "timeline": [{"oid": "87abd0eff35342d3ed29f466936d0b3e7ec8012b", "url": "https://github.com/spring-projects/spring-integration/commit/87abd0eff35342d3ed29f466936d0b3e7ec8012b", "message": "INT-3045: Add in & out ZeroMq channel adapters\n\nJIRA: https://jira.spring.io/browse/INT-3045\n\n* Add `ZeroMqMessageHandler` to produce messages into one-way ZeroMq sockets\n* Add `ZeroMqMessageProducer` to consumer messages from one-way ZeroMq sockets\n* Add `ConvertingBytesMessageMapper` impl for the `BytesMessageMapper` to\ndelegate an actual conversion into the provided `MessageConverter`\n* Add `ZeroMqHeaders` for message headers constants representing ZeroMq message attributes\n* Fix `ZeroMqChannel` for the proper deferred `zeroMqProxy` evaluation\n* Add more JavaDocs\n* Fix `ZeroMqChannelTests.testPubSubBind()` to be sure that really all the\nsubscribed channels get the same message from the `PUB` socket", "committedDate": "2020-09-22T21:38:26Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzcwMjA4NQ==", "url": "https://github.com/spring-projects/spring-integration/pull/3388#discussion_r493702085", "bodyText": "con version?", "author": "garyrussell", "createdAt": "2020-09-23T15:49:37Z", "path": "spring-integration-core/src/main/java/org/springframework/integration/mapping/ConvertingBytesMessageMapper.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Copyright 2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.integration.mapping;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.Arrays;\n+import java.util.Map;\n+\n+import org.springframework.lang.NonNull;\n+import org.springframework.lang.Nullable;\n+import org.springframework.messaging.Message;\n+import org.springframework.messaging.MessageHeaders;\n+import org.springframework.messaging.converter.MessageConverter;\n+import org.springframework.util.Assert;\n+\n+/**\n+ * The {@link BytesMessageMapper} implementation to delegate to/from {@link Message}\n+ * con version into the provided {@link MessageConverter}.", "originalCommit": "87abd0eff35342d3ed29f466936d0b3e7ec8012b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "5d156b5645ac076ff0730390a5bb53cf8af4b971", "url": "https://github.com/spring-projects/spring-integration/commit/5d156b5645ac076ff0730390a5bb53cf8af4b971", "message": "* Fix typo in the `ConvertingBytesMessageMapper`\n* Add `this` for `doOnError()` in the `ZeroMqChannel` & `ZeroMqMessageProducer`\n* Change the bind logic in the `ZeroMqMessageProducer` to `port` and let it to\nbind to random port.\nThe actual port is available later via `getBoundPort()`\n* Introduce a `ZeroMqMessageProducer.receiveRaw()` to let received `ZMsg` to\nbe produce as a `payload`\n* Add a logic into `ZeroMqMessageHandler` to treat `ZMsg` in the payload of\nrequest message as is without any conversion\n* Fix race condition in the `ZeroMqMessageProducer` to destroy `consumerScheduler`\nwhen the main `Flux` is complete", "committedDate": "2020-09-23T18:13:48Z", "type": "commit"}, {"oid": "0492c45553bc9412c0b92a37bf714c87d72d8f08", "url": "https://github.com/spring-projects/spring-integration/commit/0492c45553bc9412c0b92a37bf714c87d72d8f08", "message": "* Add Java DSL for ZeroMq components\n* Extract `ReactiveMessageHandlerSpec` for `ReactiveMessageHandler` impls\n* Add debug message into `EmbeddedJsonHeadersMessageMapper` when cannot `decodeNativeFormat()`\n* Make `ReactiveMongoDbMessageHandlerSpec` extending `ReactiveMessageHandlerSpec`\n* Make `ZeroMqProxy` `autoStartup` by default\n* Add `ZeroMqDslTests` to cover all the Java DSL for ZeroMq\n* Introduce a `MimeTypeSerializer`  to serialize a `MimeType` into JSON as a plain string;\nuse it as extra serializer in the `JacksonJsonUtils.messagingAwareMapper()`\n* Fix typo for the `AllowListTypeResolverBuilder` inner class", "committedDate": "2020-09-24T17:04:29Z", "type": "commit"}, {"oid": "5e36c1c07463ab92d3b2a56e5c2c11361ebaf091", "url": "https://github.com/spring-projects/spring-integration/commit/5e36c1c07463ab92d3b2a56e5c2c11361ebaf091", "message": "* Add some docs\n* Fix Checkstyle violations", "committedDate": "2020-09-24T20:02:01Z", "type": "commit"}, {"oid": "73c75f8cff8770f1b67230aa6aaa8ead13215d9c", "url": "https://github.com/spring-projects/spring-integration/commit/73c75f8cff8770f1b67230aa6aaa8ead13215d9c", "message": "* More docs", "committedDate": "2020-09-25T14:48:01Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTA3NzAyNA==", "url": "https://github.com/spring-projects/spring-integration/pull/3388#discussion_r495077024", "bodyText": "Should we publish an ApplicationEvent?", "author": "garyrussell", "createdAt": "2020-09-25T15:47:19Z", "path": "spring-integration-zeromq/src/test/java/org/springframework/integration/zeromq/dsl/ZeroMqDslTests.java", "diffHunk": "@@ -0,0 +1,153 @@\n+/*\n+ * Copyright 2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.integration.zeromq.dsl;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.awaitility.Awaitility.await;\n+\n+import java.time.Duration;\n+import java.util.concurrent.BlockingQueue;\n+import java.util.concurrent.LinkedBlockingQueue;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.junit.jupiter.api.Test;\n+import org.zeromq.SocketType;\n+import org.zeromq.ZContext;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.integration.config.EnableIntegration;\n+import org.springframework.integration.dsl.IntegrationFlow;\n+import org.springframework.integration.dsl.IntegrationFlows;\n+import org.springframework.integration.dsl.Transformers;\n+import org.springframework.integration.dsl.context.IntegrationFlowContext;\n+import org.springframework.integration.zeromq.ZeroMqHeaders;\n+import org.springframework.integration.zeromq.ZeroMqProxy;\n+import org.springframework.messaging.Message;\n+import org.springframework.messaging.MessageChannel;\n+import org.springframework.messaging.support.GenericMessage;\n+import org.springframework.test.annotation.DirtiesContext;\n+import org.springframework.test.context.junit.jupiter.SpringJUnitConfig;\n+import org.springframework.util.SocketUtils;\n+\n+/**\n+ * @author Artem Bilan\n+ *\n+ * @since 5.4\n+ */\n+@SpringJUnitConfig\n+@DirtiesContext\n+public class ZeroMqDslTests {\n+\n+\tprivate static final int PROXY_PUB_PORT = SocketUtils.findAvailableTcpPort();\n+\n+\t@Autowired\n+\tZContext context;\n+\n+\t@Autowired\n+\t@Qualifier(\"publishToZeroMqPubSubFlow.input\")\n+\tMessageChannel publishToZeroMqPubSubFlowInput;\n+\n+\t@Autowired\n+\tZeroMqProxy subPubZeroMqProxy;\n+\n+\t@Autowired\n+\tZeroMqProxy pullPushZeroMqProxy;\n+\n+\t@Autowired\n+\tIntegrationFlowContext integrationFlowContext;\n+\n+\t@Test\n+\tvoid testZeroMqDslIntegration() throws InterruptedException {\n+\t\tBlockingQueue<Message<?>> results = new LinkedBlockingQueue<>();\n+\n+\t\tawait().until(() -> this.subPubZeroMqProxy.getBackendPort() > 0);\n+\n+\t\tfor (int i = 0; i < 2; i++) {\n+\t\t\tIntegrationFlow consumerFlow =\n+\t\t\t\t\tIntegrationFlows.from(\n+\t\t\t\t\t\t\tZeroMq.inboundChannelAdapter(this.context, SocketType.SUB)\n+\t\t\t\t\t\t\t\t\t.connectUrl(\"tcp://localhost:\" + this.subPubZeroMqProxy.getBackendPort())\n+\t\t\t\t\t\t\t\t\t.topics(\"someTopic\")\n+\t\t\t\t\t\t\t\t\t.consumeDelay(Duration.ofMillis(100)))\n+\t\t\t\t\t\t\t.channel(ZeroMq.zeroMqChannel(this.context).zeroMqProxy(this.pullPushZeroMqProxy))\n+\t\t\t\t\t\t\t.transform(Transformers.objectToString())\n+\t\t\t\t\t\t\t.handle(results::offer)\n+\t\t\t\t\t\t\t.get();\n+\n+\t\t\tthis.integrationFlowContext.registration(consumerFlow).register();\n+\t\t}\n+\n+\t\t// Give it some time to connect and subscribe\n+\t\tThread.sleep(2000);", "originalCommit": "73c75f8cff8770f1b67230aa6aaa8ead13215d9c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTEzNDUyOQ==", "url": "https://github.com/spring-projects/spring-integration/pull/3388#discussion_r495134529", "bodyText": "Well, we can't: the ZMQ.Socket.subscribe() is an async operation and there is no way on the PUB side to track it.\nWe can do that with XPUB, but that's not an intention of our solution...", "author": "artembilan", "createdAt": "2020-09-25T17:33:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTA3NzAyNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTA3ODczNg==", "url": "https://github.com/spring-projects/spring-integration/pull/3388#discussion_r495078736", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            It constantly reads the data from a ZeroMq socket in no-blocking manner and produces it as an infinite `Flux` which is subscribed by the `FluxMessageChannel` or explicitly in the `start()` if output channel is not reactive.\n          \n          \n            \n            It constantly reads the data from a ZeroMq socket in a non-blocking manner and publishes the messages to an infinite `Flux` which is subscribed to by a `FluxMessageChannel` or explicitly in the `start()` method, if the output channel is not reactive.", "author": "garyrussell", "createdAt": "2020-09-25T15:50:16Z", "path": "src/reference/asciidoc/zeromq.adoc", "diffHunk": "@@ -102,3 +102,113 @@ ZeroMqChannel zeroMqPubSubChannel(ZContext context) {\n }\n ----\n ====\n+\n+[[zeromq-inbound-channel-adapter]]\n+=== ZeroMq Inbound Channel Adapter\n+\n+The `ZeroMqMessageProducer` is a `MessageProducerSupport` implementation with reactive semantics.\n+It constantly reads the data from a ZeroMq socket in no-blocking manner and produces it as an infinite `Flux` which is subscribed by the `FluxMessageChannel` or explicitly in the `start()` if output channel is not reactive.", "originalCommit": "73c75f8cff8770f1b67230aa6aaa8ead13215d9c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTA3OTQ0MQ==", "url": "https://github.com/spring-projects/spring-integration/pull/3388#discussion_r495079441", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            When no data on the socket, a `consumeDelay` (defaults to 1 second) is applied before the next read attempt.\n          \n          \n            \n            When no data are received on the socket, a `consumeDelay` (defaults to 1 second) is applied before the next read attempt.", "author": "garyrussell", "createdAt": "2020-09-25T15:51:23Z", "path": "src/reference/asciidoc/zeromq.adoc", "diffHunk": "@@ -102,3 +102,113 @@ ZeroMqChannel zeroMqPubSubChannel(ZContext context) {\n }\n ----\n ====\n+\n+[[zeromq-inbound-channel-adapter]]\n+=== ZeroMq Inbound Channel Adapter\n+\n+The `ZeroMqMessageProducer` is a `MessageProducerSupport` implementation with reactive semantics.\n+It constantly reads the data from a ZeroMq socket in no-blocking manner and produces it as an infinite `Flux` which is subscribed by the `FluxMessageChannel` or explicitly in the `start()` if output channel is not reactive.\n+When no data on the socket, a `consumeDelay` (defaults to 1 second) is applied before the next read attempt.", "originalCommit": "73c75f8cff8770f1b67230aa6aaa8ead13215d9c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTA4MDcxOA==", "url": "https://github.com/spring-projects/spring-integration/pull/3388#discussion_r495080718", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            If `receiveRaw` option is set to `true`, a `ZMsg`, consumed from the socket, is sent as is in the payload of the produced `Message`: it's up to downstream flow to parse and convert `ZMsg` respectively.\n          \n          \n            \n            If the `receiveRaw` option is set to `true`, a `ZMsg`, consumed from the socket, is sent as is in the payload of the produced `Message`: it's up to the downstream flow to parse and convert  the`ZMsg`.", "author": "garyrussell", "createdAt": "2020-09-25T15:53:25Z", "path": "src/reference/asciidoc/zeromq.adoc", "diffHunk": "@@ -102,3 +102,113 @@ ZeroMqChannel zeroMqPubSubChannel(ZContext context) {\n }\n ----\n ====\n+\n+[[zeromq-inbound-channel-adapter]]\n+=== ZeroMq Inbound Channel Adapter\n+\n+The `ZeroMqMessageProducer` is a `MessageProducerSupport` implementation with reactive semantics.\n+It constantly reads the data from a ZeroMq socket in no-blocking manner and produces it as an infinite `Flux` which is subscribed by the `FluxMessageChannel` or explicitly in the `start()` if output channel is not reactive.\n+When no data on the socket, a `consumeDelay` (defaults to 1 second) is applied before the next read attempt.\n+\n+Only `SocketType.PAIR`, `SocketType.PULL` and `SocketType.SUB` are supported by the `ZeroMqMessageProducer`.\n+This component can connect to the remote socket or bind onto TCP protocol with the provided or random port.\n+The actual port can be obtained via `getBoundPort()` after this component is started and ZeroMq socket is bound.\n+The socket options (e.g. security or write timeout) can be configured via `setSocketConfigurer(Consumer<ZMQ.Socket> socketConfigurer)` callback.\n+\n+If `receiveRaw` option is set to `true`, a `ZMsg`, consumed from the socket, is sent as is in the payload of the produced `Message`: it's up to downstream flow to parse and convert `ZMsg` respectively.", "originalCommit": "73c75f8cff8770f1b67230aa6aaa8ead13215d9c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTEzNTgxOA==", "url": "https://github.com/spring-projects/spring-integration/pull/3388#discussion_r495135818", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            If `receiveRaw` option is set to `true`, a `ZMsg`, consumed from the socket, is sent as is in the payload of the produced `Message`: it's up to downstream flow to parse and convert `ZMsg` respectively.\n          \n          \n            \n            If the `receiveRaw` option is set to `true`, a `ZMsg`, consumed from the socket, is sent as is in the payload of the produced `Message`: it's up to the downstream flow to parse and convert  the `ZMsg`.", "author": "artembilan", "createdAt": "2020-09-25T17:35:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTA4MDcxOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTA4MTY2OA==", "url": "https://github.com/spring-projects/spring-integration/pull/3388#discussion_r495081668", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Otherwise an `InboundMessageMapper` is used to convert consumed data into a `Message`.\n          \n          \n            \n            If received `ZMsg` is multi-frame, the first one is treated as a `ZeroMqHeaders.TOPIC` header this ZeroMq message was published to.\n          \n          \n            \n            Otherwise an `InboundMessageMapper` is used to convert the consumed data into a `Message`.\n          \n          \n            \n            If the received `ZMsg` is multi-frame, the first frame is treated as the `ZeroMqHeaders.TOPIC` header this ZeroMq message was published to.", "author": "garyrussell", "createdAt": "2020-09-25T15:54:59Z", "path": "src/reference/asciidoc/zeromq.adoc", "diffHunk": "@@ -102,3 +102,113 @@ ZeroMqChannel zeroMqPubSubChannel(ZContext context) {\n }\n ----\n ====\n+\n+[[zeromq-inbound-channel-adapter]]\n+=== ZeroMq Inbound Channel Adapter\n+\n+The `ZeroMqMessageProducer` is a `MessageProducerSupport` implementation with reactive semantics.\n+It constantly reads the data from a ZeroMq socket in no-blocking manner and produces it as an infinite `Flux` which is subscribed by the `FluxMessageChannel` or explicitly in the `start()` if output channel is not reactive.\n+When no data on the socket, a `consumeDelay` (defaults to 1 second) is applied before the next read attempt.\n+\n+Only `SocketType.PAIR`, `SocketType.PULL` and `SocketType.SUB` are supported by the `ZeroMqMessageProducer`.\n+This component can connect to the remote socket or bind onto TCP protocol with the provided or random port.\n+The actual port can be obtained via `getBoundPort()` after this component is started and ZeroMq socket is bound.\n+The socket options (e.g. security or write timeout) can be configured via `setSocketConfigurer(Consumer<ZMQ.Socket> socketConfigurer)` callback.\n+\n+If `receiveRaw` option is set to `true`, a `ZMsg`, consumed from the socket, is sent as is in the payload of the produced `Message`: it's up to downstream flow to parse and convert `ZMsg` respectively.\n+Otherwise an `InboundMessageMapper` is used to convert consumed data into a `Message`.\n+If received `ZMsg` is multi-frame, the first one is treated as a `ZeroMqHeaders.TOPIC` header this ZeroMq message was published to.", "originalCommit": "73c75f8cff8770f1b67230aa6aaa8ead13215d9c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTA4MjIzMg==", "url": "https://github.com/spring-projects/spring-integration/pull/3388#discussion_r495082232", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            With the `SocketType.SUB` the `ZeroMqMessageProducer` uses provided `topics` option for subscriptions; defaults to subscribe to all.\n          \n          \n            \n            With `SocketType.SUB`, the `ZeroMqMessageProducer` uses the provided `topics` option for subscriptions; defaults to subscribe to all.", "author": "garyrussell", "createdAt": "2020-09-25T15:55:54Z", "path": "src/reference/asciidoc/zeromq.adoc", "diffHunk": "@@ -102,3 +102,113 @@ ZeroMqChannel zeroMqPubSubChannel(ZContext context) {\n }\n ----\n ====\n+\n+[[zeromq-inbound-channel-adapter]]\n+=== ZeroMq Inbound Channel Adapter\n+\n+The `ZeroMqMessageProducer` is a `MessageProducerSupport` implementation with reactive semantics.\n+It constantly reads the data from a ZeroMq socket in no-blocking manner and produces it as an infinite `Flux` which is subscribed by the `FluxMessageChannel` or explicitly in the `start()` if output channel is not reactive.\n+When no data on the socket, a `consumeDelay` (defaults to 1 second) is applied before the next read attempt.\n+\n+Only `SocketType.PAIR`, `SocketType.PULL` and `SocketType.SUB` are supported by the `ZeroMqMessageProducer`.\n+This component can connect to the remote socket or bind onto TCP protocol with the provided or random port.\n+The actual port can be obtained via `getBoundPort()` after this component is started and ZeroMq socket is bound.\n+The socket options (e.g. security or write timeout) can be configured via `setSocketConfigurer(Consumer<ZMQ.Socket> socketConfigurer)` callback.\n+\n+If `receiveRaw` option is set to `true`, a `ZMsg`, consumed from the socket, is sent as is in the payload of the produced `Message`: it's up to downstream flow to parse and convert `ZMsg` respectively.\n+Otherwise an `InboundMessageMapper` is used to convert consumed data into a `Message`.\n+If received `ZMsg` is multi-frame, the first one is treated as a `ZeroMqHeaders.TOPIC` header this ZeroMq message was published to.\n+\n+With the `SocketType.SUB` the `ZeroMqMessageProducer` uses provided `topics` option for subscriptions; defaults to subscribe to all.", "originalCommit": "73c75f8cff8770f1b67230aa6aaa8ead13215d9c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTA4MzAwMw==", "url": "https://github.com/spring-projects/spring-integration/pull/3388#discussion_r495083003", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The `ZeroMqMessageHandler` utilizes only connecting (no binding) ZeroMq socket.\n          \n          \n            \n            The `ZeroMqMessageHandler` only supports connecting the ZeroMq socket; binding is not supported.", "author": "garyrussell", "createdAt": "2020-09-25T15:57:04Z", "path": "src/reference/asciidoc/zeromq.adoc", "diffHunk": "@@ -102,3 +102,113 @@ ZeroMqChannel zeroMqPubSubChannel(ZContext context) {\n }\n ----\n ====\n+\n+[[zeromq-inbound-channel-adapter]]\n+=== ZeroMq Inbound Channel Adapter\n+\n+The `ZeroMqMessageProducer` is a `MessageProducerSupport` implementation with reactive semantics.\n+It constantly reads the data from a ZeroMq socket in no-blocking manner and produces it as an infinite `Flux` which is subscribed by the `FluxMessageChannel` or explicitly in the `start()` if output channel is not reactive.\n+When no data on the socket, a `consumeDelay` (defaults to 1 second) is applied before the next read attempt.\n+\n+Only `SocketType.PAIR`, `SocketType.PULL` and `SocketType.SUB` are supported by the `ZeroMqMessageProducer`.\n+This component can connect to the remote socket or bind onto TCP protocol with the provided or random port.\n+The actual port can be obtained via `getBoundPort()` after this component is started and ZeroMq socket is bound.\n+The socket options (e.g. security or write timeout) can be configured via `setSocketConfigurer(Consumer<ZMQ.Socket> socketConfigurer)` callback.\n+\n+If `receiveRaw` option is set to `true`, a `ZMsg`, consumed from the socket, is sent as is in the payload of the produced `Message`: it's up to downstream flow to parse and convert `ZMsg` respectively.\n+Otherwise an `InboundMessageMapper` is used to convert consumed data into a `Message`.\n+If received `ZMsg` is multi-frame, the first one is treated as a `ZeroMqHeaders.TOPIC` header this ZeroMq message was published to.\n+\n+With the `SocketType.SUB` the `ZeroMqMessageProducer` uses provided `topics` option for subscriptions; defaults to subscribe to all.\n+Subscriptions can be adjusted at runtime using `subscribeToTopics()` and `unsubscribeFromTopics()` `@ManagedOperation` s.\n+\n+Here is a sample of `ZeroMqMessageProducer` configuration:\n+\n+====\n+[source,java]\n+----\n+@Bean\n+ZeroMqMessageProducer zeroMqMessageProducer(ZContext context, MessageChannel outputChannel) {\n+    ZeroMqMessageProducer messageProducer = new ZeroMqMessageProducer(context, SocketType.SUB);\n+    messageProducer.setOutputChannel(outputChannel);\n+    messageProducer.setTopics(\"some\");\n+    messageProducer.setReceiveRaw(true);\n+    messageProducer.setBindPort(7070);\n+    messageProducer.setConsumeDelay(Duration.ofMillis(100));\n+    return messageProducer;\n+}\n+----\n+====\n+\n+[[zeromq-outbound-channel-adapter]]\n+=== ZeroMq Outbound Channel Adapter\n+\n+The `ZeroMqMessageHandler` is a `ReactiveMessageHandler` implementation to produce publish messages into a ZeroMq socket.\n+Only `SocketType.PAIR`, `SocketType.PUSH` and `SocketType.PUB` are supported.\n+The `ZeroMqMessageHandler` utilizes only connecting (no binding) ZeroMq socket.", "originalCommit": "73c75f8cff8770f1b67230aa6aaa8ead13215d9c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTA4Mzg2Ng==", "url": "https://github.com/spring-projects/spring-integration/pull/3388#discussion_r495083866", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            When the payload of the request message is a `ZMsg`, no any conversion and topic extraction happen: the `ZMsg` is sent into a socket as is and it is not destroyed for possible further reusing.\n          \n          \n            \n            When the payload of the request message is a `ZMsg`, no conversion or topic extraction is performed: the `ZMsg` is sent into a socket as is and it is not destroyed for possible further reuse.", "author": "garyrussell", "createdAt": "2020-09-25T15:58:18Z", "path": "src/reference/asciidoc/zeromq.adoc", "diffHunk": "@@ -102,3 +102,113 @@ ZeroMqChannel zeroMqPubSubChannel(ZContext context) {\n }\n ----\n ====\n+\n+[[zeromq-inbound-channel-adapter]]\n+=== ZeroMq Inbound Channel Adapter\n+\n+The `ZeroMqMessageProducer` is a `MessageProducerSupport` implementation with reactive semantics.\n+It constantly reads the data from a ZeroMq socket in no-blocking manner and produces it as an infinite `Flux` which is subscribed by the `FluxMessageChannel` or explicitly in the `start()` if output channel is not reactive.\n+When no data on the socket, a `consumeDelay` (defaults to 1 second) is applied before the next read attempt.\n+\n+Only `SocketType.PAIR`, `SocketType.PULL` and `SocketType.SUB` are supported by the `ZeroMqMessageProducer`.\n+This component can connect to the remote socket or bind onto TCP protocol with the provided or random port.\n+The actual port can be obtained via `getBoundPort()` after this component is started and ZeroMq socket is bound.\n+The socket options (e.g. security or write timeout) can be configured via `setSocketConfigurer(Consumer<ZMQ.Socket> socketConfigurer)` callback.\n+\n+If `receiveRaw` option is set to `true`, a `ZMsg`, consumed from the socket, is sent as is in the payload of the produced `Message`: it's up to downstream flow to parse and convert `ZMsg` respectively.\n+Otherwise an `InboundMessageMapper` is used to convert consumed data into a `Message`.\n+If received `ZMsg` is multi-frame, the first one is treated as a `ZeroMqHeaders.TOPIC` header this ZeroMq message was published to.\n+\n+With the `SocketType.SUB` the `ZeroMqMessageProducer` uses provided `topics` option for subscriptions; defaults to subscribe to all.\n+Subscriptions can be adjusted at runtime using `subscribeToTopics()` and `unsubscribeFromTopics()` `@ManagedOperation` s.\n+\n+Here is a sample of `ZeroMqMessageProducer` configuration:\n+\n+====\n+[source,java]\n+----\n+@Bean\n+ZeroMqMessageProducer zeroMqMessageProducer(ZContext context, MessageChannel outputChannel) {\n+    ZeroMqMessageProducer messageProducer = new ZeroMqMessageProducer(context, SocketType.SUB);\n+    messageProducer.setOutputChannel(outputChannel);\n+    messageProducer.setTopics(\"some\");\n+    messageProducer.setReceiveRaw(true);\n+    messageProducer.setBindPort(7070);\n+    messageProducer.setConsumeDelay(Duration.ofMillis(100));\n+    return messageProducer;\n+}\n+----\n+====\n+\n+[[zeromq-outbound-channel-adapter]]\n+=== ZeroMq Outbound Channel Adapter\n+\n+The `ZeroMqMessageHandler` is a `ReactiveMessageHandler` implementation to produce publish messages into a ZeroMq socket.\n+Only `SocketType.PAIR`, `SocketType.PUSH` and `SocketType.PUB` are supported.\n+The `ZeroMqMessageHandler` utilizes only connecting (no binding) ZeroMq socket.\n+When the `SocketType.PUB` is used, the `topicExpression` is evaluated against a request message to inject a topic frame into a ZeroMq message if it is not null.\n+The subscriber side (`SocketType.SUB`) must receive the topic frame first before parsing the actual data.\n+When the payload of the request message is a `ZMsg`, no any conversion and topic extraction happen: the `ZMsg` is sent into a socket as is and it is not destroyed for possible further reusing.", "originalCommit": "73c75f8cff8770f1b67230aa6aaa8ead13215d9c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "fe71e687dd700ac963ed582532d1a757e07d63d3", "url": "https://github.com/spring-projects/spring-integration/commit/fe71e687dd700ac963ed582532d1a757e07d63d3", "message": "Fix language in Docs\n\nCo-authored-by: Gary Russell <grussell@vmware.com>", "committedDate": "2020-09-25T17:36:57Z", "type": "commit"}]}