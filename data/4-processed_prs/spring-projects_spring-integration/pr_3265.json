{"pr_number": 3265, "pr_title": "Introduce a `ReceiveMessageAdvice`", "pr_createdAt": "2020-04-28T14:19:44Z", "pr_url": "https://github.com/spring-projects/spring-integration/pull/3265", "timeline": [{"oid": "c7abf6461abdb2c61acea61d7f249210ca766069", "url": "https://github.com/spring-projects/spring-integration/commit/c7abf6461abdb2c61acea61d7f249210ca766069", "message": "Introduce a `ReceiveMessageAdvice`\n\n* Deprecate an `AbstractMessageSourceAdvice` in favor of\n`default` method in the `MessageSourceMutator`\n* Move a `applyReceiveOnlyAdviceChain()` logic into the `AbstractPollingEndpoint`:\nnow both `PollingConsumer` and `SourcePollingChannelAdapter` can use\n`ReceiveMessageAdvice`\n* Introduce a `SimpleActiveIdleReceiveMessageAdvice` based already\non the `ReceiveMessageAdvice` and deprecate a `SimpleActiveIdleMessageSourceAdvice`\nwhich is fully replaceable with newly introduced `SimpleActiveIdleReceiveMessageAdvice`\n* Add `@SuppressWarnings(\"deprecation\")` for those out-of-the-box `ReceiveMessageAdvice`\nimplementation which still use an `AbstractMessageSourceAdvice` for\nbackward compatibility\n* Document a new feature and give the `MessageSourceMutator` a new meaning", "committedDate": "2020-04-28T14:19:27Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjY5OTk0Nw==", "url": "https://github.com/spring-projects/spring-integration/pull/3265#discussion_r416699947", "bodyText": "(The", "author": "garyrussell", "createdAt": "2020-04-28T15:18:35Z", "path": "src/reference/asciidoc/polling-consumer.adoc", "diffHunk": "@@ -145,26 +145,29 @@ These \"`around advice`\" methods do not have access to any context for the poll -\n This is fine for requirements such as making a task transactional or skipping a poll due to some external condition, as discussed earlier.\n What if we wish to take some action depending on the result of the `receive` part of the poll or if we want to adjust the poller depending on conditions? For those instances, Spring Integration offers \"`Smart`\" Polling.\n \n+[[smart-polling]]\n ===== \"`Smart`\" Polling\n \n-Version 4.2 introduced the `AbstractMessageSourceAdvice`.\n-Any `Advice` objects in the `advice-chain` that subclass this class are applied only to the receive operation.\n+Version 5.3 introduced the `ReceiveMessageAdvice` interface.\n+(An `AbstractMessageSourceAdvice` has been deprecated in favor of `default` methods in the `MessageSourceMutator`.)", "originalCommit": "c7abf6461abdb2c61acea61d7f249210ca766069", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjcwMTIxNg==", "url": "https://github.com/spring-projects/spring-integration/pull/3265#discussion_r416701216", "bodyText": "Wouldn't something like Advisable<T> be better than Object?", "author": "garyrussell", "createdAt": "2020-04-28T15:20:17Z", "path": "spring-integration-core/src/main/java/org/springframework/integration/aop/CompoundTriggerAdvice.java", "diffHunk": "@@ -47,8 +51,21 @@ public CompoundTriggerAdvice(CompoundTrigger compoundTrigger, Trigger overrideTr\n \t\tthis.override = overrideTrigger;\n \t}\n \n+\t/**\n+\t * @param result the received message.\n+\t * @param source the message source.\n+\t * @return the message or null\n+\t * @deprecated since 5.3 in favor of {@link #afterReceive(Message, Object)}\n+\t */\n \t@Override\n+\t@Deprecated\n \tpublic Message<?> afterReceive(Message<?> result, MessageSource<?> source) {\n+\t\treturn afterReceive(result, (Object) source);\n+\t}\n+\n+\t@Override\n+\t@Nullable\n+\tpublic Message<?> afterReceive(@Nullable Message<?> result, Object source) {", "originalCommit": "c7abf6461abdb2c61acea61d7f249210ca766069", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjcwNDA5Nw==", "url": "https://github.com/spring-projects/spring-integration/pull/3265#discussion_r416704097", "bodyText": "Well, in most cases it is really about both MessageSource and PollableChannel, so even with generic argument it still going to be an Object \ud83d\ude04\nI thought about a Supplier for both those interfaces, but this is not what we are going to use with the receive(timeout).\nTherefore I'm OK to stick with an Object for a source argument.", "author": "artembilan", "createdAt": "2020-04-28T15:23:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjcwMTIxNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjc1NzE1Mg==", "url": "https://github.com/spring-projects/spring-integration/pull/3265#discussion_r416757152", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            (An `AbstractMessageSourceAdvice` has been deprecated in favor of `default` methods in the `MessageSourceMutator`.)\n          \n          \n            \n            (The `AbstractMessageSourceAdvice` has been deprecated in favor of `default` methods in the `MessageSourceMutator`.)", "author": "artembilan", "createdAt": "2020-04-28T16:33:04Z", "path": "src/reference/asciidoc/polling-consumer.adoc", "diffHunk": "@@ -145,26 +145,29 @@ These \"`around advice`\" methods do not have access to any context for the poll -\n This is fine for requirements such as making a task transactional or skipping a poll due to some external condition, as discussed earlier.\n What if we wish to take some action depending on the result of the `receive` part of the poll or if we want to adjust the poller depending on conditions? For those instances, Spring Integration offers \"`Smart`\" Polling.\n \n+[[smart-polling]]\n ===== \"`Smart`\" Polling\n \n-Version 4.2 introduced the `AbstractMessageSourceAdvice`.\n-Any `Advice` objects in the `advice-chain` that subclass this class are applied only to the receive operation.\n+Version 5.3 introduced the `ReceiveMessageAdvice` interface.\n+(An `AbstractMessageSourceAdvice` has been deprecated in favor of `default` methods in the `MessageSourceMutator`.)", "originalCommit": "c7abf6461abdb2c61acea61d7f249210ca766069", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "880177cb5963a140dc2f02df8c6f655a431a58e9", "url": "https://github.com/spring-projects/spring-integration/commit/880177cb5963a140dc2f02df8c6f655a431a58e9", "message": "* Fix language in the `polling-consumer.adoc`", "committedDate": "2020-04-28T16:33:45Z", "type": "commit"}]}