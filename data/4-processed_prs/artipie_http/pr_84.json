{"pr_number": 84, "pr_title": "Introduce StringOfByteBufPublisher", "pr_createdAt": "2020-03-18T09:06:29Z", "pr_url": "https://github.com/artipie/http/pull/84", "timeline": [{"oid": "202c0f106a6cad738b9e9e7f3a02dbaae6fc9605", "url": "https://github.com/artipie/http/commit/202c0f106a6cad738b9e9e7f3a02dbaae6fc9605", "message": "add StringOfByteBufPublisher", "committedDate": "2020-03-18T08:58:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDU5Njk2MQ==", "url": "https://github.com/artipie/http/pull/84#discussion_r394596961", "bodyText": "@Sammers21 I would remove Publisher suffix because this class does not represent a publisher.\nI would rename it to what this class represents a ByteBufferFlow or more compact ByteFlow. Then we can have asString method that will convert it to String. This would make class future proof future for additional methods that might convert flow of bytes to some other data types.", "author": "Vatavuk", "createdAt": "2020-03-18T19:43:58Z", "path": "src/test/java/com/artipie/http/stream/StringOfByteBufPublisher.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * MIT License\n+ *\n+ * Copyright (c) 2020 Artipie\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.http.stream;\n+\n+import io.reactivex.Flowable;\n+import java.nio.ByteBuffer;\n+import org.reactivestreams.Publisher;\n+\n+/**\n+ * Turn a flow of ByteBuffer's into a string.\n+ *\n+ * @since 0.1\n+ */\n+public class StringOfByteBufPublisher {", "originalCommit": "202c0f106a6cad738b9e9e7f3a02dbaae6fc9605", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTAyNDEzMw==", "url": "https://github.com/artipie/http/pull/84#discussion_r395024133", "bodyText": "I would rename it to ByteFlowToStringConversion", "author": "Sammers21", "createdAt": "2020-03-19T13:28:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDU5Njk2MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTE2MzA2MA==", "url": "https://github.com/artipie/http/pull/84#discussion_r395163060", "bodyText": "@Sammers21 I would go either with ByteFlowAsString.value() or ByteFlow.asString()", "author": "Vatavuk", "createdAt": "2020-03-19T16:36:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDU5Njk2MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDU5ODIyMQ==", "url": "https://github.com/artipie/http/pull/84#discussion_r394598221", "bodyText": "@Sammers21 let's add additional constructor that takes ByteByByteSplit", "author": "Vatavuk", "createdAt": "2020-03-18T19:46:28Z", "path": "src/test/java/com/artipie/http/stream/StringOfByteBufPublisher.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * MIT License\n+ *\n+ * Copyright (c) 2020 Artipie\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.http.stream;\n+\n+import io.reactivex.Flowable;\n+import java.nio.ByteBuffer;\n+import org.reactivestreams.Publisher;\n+\n+/**\n+ * Turn a flow of ByteBuffer's into a string.\n+ *\n+ * @since 0.1\n+ */\n+public class StringOfByteBufPublisher {\n+\n+    /**\n+     * The flow of ByteBuffer's.\n+     */\n+    private final Publisher<ByteBuffer> publisher;\n+\n+    /**\n+     * Ctor.\n+     * @param publisher The flow\n+     */\n+    public StringOfByteBufPublisher(final Publisher<ByteBuffer> publisher) {", "originalCommit": "202c0f106a6cad738b9e9e7f3a02dbaae6fc9605", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTAyMDE3Ng==", "url": "https://github.com/artipie/http/pull/84#discussion_r395020176", "bodyText": "A nice suggestion.", "author": "Sammers21", "createdAt": "2020-03-19T13:22:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDU5ODIyMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDU5ODU2NA==", "url": "https://github.com/artipie/http/pull/84#discussion_r394598564", "bodyText": "@Sammers21 rename it to asString to be more explicit.", "author": "Vatavuk", "createdAt": "2020-03-18T19:47:09Z", "path": "src/test/java/com/artipie/http/stream/StringOfByteBufPublisher.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * MIT License\n+ *\n+ * Copyright (c) 2020 Artipie\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.http.stream;\n+\n+import io.reactivex.Flowable;\n+import java.nio.ByteBuffer;\n+import org.reactivestreams.Publisher;\n+\n+/**\n+ * Turn a flow of ByteBuffer's into a string.\n+ *\n+ * @since 0.1\n+ */\n+public class StringOfByteBufPublisher {\n+\n+    /**\n+     * The flow of ByteBuffer's.\n+     */\n+    private final Publisher<ByteBuffer> publisher;\n+\n+    /**\n+     * Ctor.\n+     * @param publisher The flow\n+     */\n+    public StringOfByteBufPublisher(final Publisher<ByteBuffer> publisher) {\n+        this.publisher = publisher;\n+    }\n+\n+    /**\n+     * Fetch stream elements and turn them into a single string.\n+     * @return The string\n+     */\n+    public String string() {", "originalCommit": "202c0f106a6cad738b9e9e7f3a02dbaae6fc9605", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "057e0fed33498d12a1a117a1e49249127a7aac4e", "url": "https://github.com/artipie/http/commit/057e0fed33498d12a1a117a1e49249127a7aac4e", "message": "add a ByteByByteSplit constructor + 'string' -> 'asString'", "committedDate": "2020-03-19T13:27:16Z", "type": "commit"}, {"oid": "afa429a45cc070ab9b6f0b25cc1b83d743c20881", "url": "https://github.com/artipie/http/commit/afa429a45cc070ab9b6f0b25cc1b83d743c20881", "message": "'StringOfByteBufPublisher' -> 'ByteFlowToStringConversion'", "committedDate": "2020-03-19T13:28:42Z", "type": "commit"}, {"oid": "e011ca82a089c80fd798496be1bb93d27fcdcc93", "url": "https://github.com/artipie/http/commit/e011ca82a089c80fd798496be1bb93d27fcdcc93", "message": "add white space", "committedDate": "2020-03-19T13:29:51Z", "type": "commit"}, {"oid": "49439835ce85559335865a56bb7e789502563df1", "url": "https://github.com/artipie/http/commit/49439835ce85559335865a56bb7e789502563df1", "message": "'ByteFlowToStringConversion' -> 'ByteFlowAsString'", "committedDate": "2020-03-20T08:34:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTU0MTc2NA==", "url": "https://github.com/artipie/http/pull/84#discussion_r395541764", "bodyText": "@Sammers21 why do we need to read String from Publisher in a blocking way? Maybe it would be better to return CompletableFuture<String> (or Single<String> if it's module only class)?", "author": "g4s8", "createdAt": "2020-03-20T10:13:40Z", "path": "src/test/java/com/artipie/http/stream/ByteFlowAsString.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * MIT License\n+ *\n+ * Copyright (c) 2020 Artipie\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.http.stream;\n+\n+import io.reactivex.Flowable;\n+import java.nio.ByteBuffer;\n+import org.reactivestreams.Publisher;\n+\n+/**\n+ * Turn a flow of ByteBuffer's into a string.\n+ *\n+ * @since 0.1\n+ */\n+public class ByteFlowAsString {\n+\n+    /**\n+     * The flow of ByteBuffer's.\n+     */\n+    private final Publisher<ByteBuffer> publisher;\n+\n+    /**\n+     * Ctor.\n+     * @param split The split.\n+     */\n+    public ByteFlowAsString(final ByteByByteSplit split) {\n+        this(Flowable.fromPublisher(split).flatMap(pub -> pub));\n+    }\n+\n+    /**\n+     * Ctor.\n+     * @param publisher The flow\n+     */\n+    public ByteFlowAsString(final Publisher<ByteBuffer> publisher) {\n+        this.publisher = publisher;\n+    }\n+\n+    /**\n+     * Fetch stream elements and turn them into a single string.\n+     * @return The string\n+     */\n+    public String value() {", "originalCommit": "49439835ce85559335865a56bb7e789502563df1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTU0OTMxOA==", "url": "https://github.com/artipie/http/pull/84#discussion_r395549318", "bodyText": "No, this class is for test only purposes, blocking is acceptable here.", "author": "Sammers21", "createdAt": "2020-03-20T10:29:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTU0MTc2NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTU0MTk1Ng==", "url": "https://github.com/artipie/http/pull/84#discussion_r395541956", "bodyText": "@Sammers21 can we reuse Remaining class from artipie/asto here?", "author": "g4s8", "createdAt": "2020-03-20T10:14:07Z", "path": "src/test/java/com/artipie/http/stream/ByteFlowAsString.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * MIT License\n+ *\n+ * Copyright (c) 2020 Artipie\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.http.stream;\n+\n+import io.reactivex.Flowable;\n+import java.nio.ByteBuffer;\n+import org.reactivestreams.Publisher;\n+\n+/**\n+ * Turn a flow of ByteBuffer's into a string.\n+ *\n+ * @since 0.1\n+ */\n+public class ByteFlowAsString {\n+\n+    /**\n+     * The flow of ByteBuffer's.\n+     */\n+    private final Publisher<ByteBuffer> publisher;\n+\n+    /**\n+     * Ctor.\n+     * @param split The split.\n+     */\n+    public ByteFlowAsString(final ByteByByteSplit split) {\n+        this(Flowable.fromPublisher(split).flatMap(pub -> pub));\n+    }\n+\n+    /**\n+     * Ctor.\n+     * @param publisher The flow\n+     */\n+    public ByteFlowAsString(final Publisher<ByteBuffer> publisher) {\n+        this.publisher = publisher;\n+    }\n+\n+    /**\n+     * Fetch stream elements and turn them into a single string.\n+     * @return The string\n+     */\n+    public String value() {\n+        return new String(\n+            Flowable.fromPublisher(this.publisher)\n+                .toList()\n+                .blockingGet()\n+                .stream()\n+                .map(\n+                    byteBuffer -> {\n+                        final byte[] res = new byte[byteBuffer.remaining()];", "originalCommit": "49439835ce85559335865a56bb7e789502563df1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTU0NzE3Mw==", "url": "https://github.com/artipie/http/pull/84#discussion_r395547173", "bodyText": "@Sammers21 you can put it to StringBuilder directly without copying to temporary array:\n.reduce(new StringBuilder(), (builder, buf) -> builder.append(new String(buf, UTF8))", "author": "g4s8", "createdAt": "2020-03-20T10:24:50Z", "path": "src/test/java/com/artipie/http/stream/ByteFlowAsString.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * MIT License\n+ *\n+ * Copyright (c) 2020 Artipie\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.http.stream;\n+\n+import io.reactivex.Flowable;\n+import java.nio.ByteBuffer;\n+import org.reactivestreams.Publisher;\n+\n+/**\n+ * Turn a flow of ByteBuffer's into a string.\n+ *\n+ * @since 0.1\n+ */\n+public class ByteFlowAsString {\n+\n+    /**\n+     * The flow of ByteBuffer's.\n+     */\n+    private final Publisher<ByteBuffer> publisher;\n+\n+    /**\n+     * Ctor.\n+     * @param split The split.\n+     */\n+    public ByteFlowAsString(final ByteByByteSplit split) {\n+        this(Flowable.fromPublisher(split).flatMap(pub -> pub));\n+    }\n+\n+    /**\n+     * Ctor.\n+     * @param publisher The flow\n+     */\n+    public ByteFlowAsString(final Publisher<ByteBuffer> publisher) {\n+        this.publisher = publisher;\n+    }\n+\n+    /**\n+     * Fetch stream elements and turn them into a single string.\n+     * @return The string\n+     */\n+    public String value() {\n+        return new String(\n+            Flowable.fromPublisher(this.publisher)\n+                .toList()\n+                .blockingGet()\n+                .stream()\n+                .map(\n+                    byteBuffer -> {\n+                        final byte[] res = new byte[byteBuffer.remaining()];\n+                        byteBuffer.get(res);\n+                        return res;\n+                    }\n+                )\n+                .reduce(\n+                    (one, another) -> {\n+                        final byte[] res = new byte[one.length + another.length];", "originalCommit": "49439835ce85559335865a56bb7e789502563df1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTU1MzMzMQ==", "url": "https://github.com/artipie/http/pull/84#discussion_r395553331", "bodyText": "@Sammers21 you can put it to StringBuilder directly without copying to temporary array:\n.reduce(new StringBuilder(), (builder, buf) -> builder.append(new String(buf, UTF8))\n\nthe approach is bad and will work only with one-byte chars in utf-8.", "author": "Sammers21", "createdAt": "2020-03-20T10:37:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTU0NzE3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTY5OTc3Mw==", "url": "https://github.com/artipie/http/pull/84#discussion_r395699773", "bodyText": "@Sammers21 ok, you are right. But in any case we need to specify encoding explicitly in String constructor, otherwise our tests will be platform specific. So le'ts use utf8 as default encoding", "author": "g4s8", "createdAt": "2020-03-20T15:07:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTU0NzE3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk4NjY2NQ==", "url": "https://github.com/artipie/http/pull/84#discussion_r395986665", "bodyText": "My point is that we can use it with multi-byte chars. Nothing platform-specific", "author": "Sammers21", "createdAt": "2020-03-21T11:57:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTU0NzE3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjI4NTEyOQ==", "url": "https://github.com/artipie/http/pull/84#discussion_r396285129", "bodyText": "@Sammers21 but now your code is platform specific: default encoding may be different. So my suggestion is to use encoding explicitly somewhere, e.g.:\npublic String value() {\n    return new String(\n            Flowable.fromPublisher(this.publisher)...get(),\n            StandardCharsets.UTF8\n    );\n}", "author": "g4s8", "createdAt": "2020-03-23T08:40:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTU0NzE3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjI4ODYyOQ==", "url": "https://github.com/artipie/http/pull/84#discussion_r396288629", "bodyText": "@g4s8, done", "author": "Sammers21", "createdAt": "2020-03-23T08:47:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTU0NzE3Mw=="}], "type": "inlineReview"}, {"oid": "639b5a53d1de5a46097d2e47efe64d59aea49c42", "url": "https://github.com/artipie/http/commit/639b5a53d1de5a46097d2e47efe64d59aea49c42", "message": "using remaining", "committedDate": "2020-03-20T10:38:38Z", "type": "commit"}, {"oid": "4dbb19b34ecc668a3d5f3c8d84e3b54aa25c6da4", "url": "https://github.com/artipie/http/commit/4dbb19b34ecc668a3d5f3c8d84e3b54aa25c6da4", "message": "create string from byte array with utf-8 encoding", "committedDate": "2020-03-23T08:46:54Z", "type": "commit"}]}