{"pr_number": 173, "pr_title": "For #148: added SliceDelete", "pr_createdAt": "2020-06-12T22:33:01Z", "pr_url": "https://github.com/artipie/http/pull/173", "timeline": [{"oid": "161467c8b3ed2d72892dfdca91fcef003659c0cf", "url": "https://github.com/artipie/http/commit/161467c8b3ed2d72892dfdca91fcef003659c0cf", "message": "For #148: added SliceDelete", "committedDate": "2020-06-12T22:30:20Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTcyMzI5OA==", "url": "https://github.com/artipie/http/pull/173#discussion_r439723298", "bodyText": "@paulodamaso why is there a key here? The key to delete should only come from the request (in response), not be pre-determined!", "author": "victornoel", "createdAt": "2020-06-13T09:04:33Z", "path": "src/main/java/com/artipie/http/slice/SliceDelete.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * MIT License\n+ *\n+ * Copyright (c) 2020 Artipie\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+\n+package com.artipie.http.slice;\n+\n+import com.artipie.asto.Key;\n+import com.artipie.asto.Storage;\n+import com.artipie.http.Response;\n+import com.artipie.http.Slice;\n+import java.nio.ByteBuffer;\n+import java.util.Map;\n+import org.reactivestreams.Publisher;\n+\n+/**\n+ * Delete decorator for Slice.\n+ *\n+ * @since 0.10\n+ * @todo #138:30min Implement SliceDelete\n+ *  Implement SliceDelete, which removes a key from storage. After that, enable\n+ *  the tests in SliceDeleteTest and put back the coverage missedclass metric to\n+ *  15 in pom.xml.\n+ */\n+@SuppressWarnings({\"PMD.UnusedPrivateField\", \"PMD.SingularField\"})\n+public final class SliceDelete implements Slice {\n+\n+    /**\n+     * Storage.\n+     */\n+    private final Storage storage;\n+\n+    /**\n+     * Key to delete.\n+     */\n+    private final Key key;\n+\n+    /**\n+     * Constructor.\n+     * @param storage Storage.\n+     * @param key Key to delete.\n+     */\n+    public SliceDelete(final Storage storage, final Key key) {\n+        this.storage = storage;\n+        this.key = key;", "originalCommit": "161467c8b3ed2d72892dfdca91fcef003659c0cf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTcyMzcwMA==", "url": "https://github.com/artipie/http/pull/173#discussion_r439723700", "bodyText": "@paulodamaso let's make this class final", "author": "victornoel", "createdAt": "2020-06-13T09:11:23Z", "path": "src/test/java/com/artipie/http/slice/SliceDeleteTest.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * MIT License\n+ *\n+ * Copyright (c) 2020 Artipie\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.http.slice;\n+\n+import com.artipie.asto.Content;\n+import com.artipie.asto.Key;\n+import com.artipie.asto.Storage;\n+import com.artipie.asto.memory.InMemoryStorage;\n+import com.artipie.http.rq.RequestLine;\n+import io.reactivex.Flowable;\n+import java.util.Collections;\n+import org.hamcrest.MatcherAssert;\n+import org.hamcrest.core.IsEqual;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n+\n+/**\n+ * Tests for {@link SliceDelete}.\n+ *\n+ * @since 0.10\n+ */\n+public class SliceDeleteTest {", "originalCommit": "161467c8b3ed2d72892dfdca91fcef003659c0cf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTcyMzczOQ==", "url": "https://github.com/artipie/http/pull/173#discussion_r439723739", "bodyText": "@paulodamaso if we need to work in a subdirectory of the storage, we can use Substorage for that, no need to introduce that responsibility in SliceDelete. As you can see SliceDownload and SliceUpload does not take care of that either.", "author": "victornoel", "createdAt": "2020-06-13T09:12:06Z", "path": "src/test/java/com/artipie/http/slice/SliceDeleteTest.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * MIT License\n+ *\n+ * Copyright (c) 2020 Artipie\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.http.slice;\n+\n+import com.artipie.asto.Content;\n+import com.artipie.asto.Key;\n+import com.artipie.asto.Storage;\n+import com.artipie.asto.memory.InMemoryStorage;\n+import com.artipie.http.rq.RequestLine;\n+import io.reactivex.Flowable;\n+import java.util.Collections;\n+import org.hamcrest.MatcherAssert;\n+import org.hamcrest.core.IsEqual;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n+\n+/**\n+ * Tests for {@link SliceDelete}.\n+ *\n+ * @since 0.10\n+ */\n+public class SliceDeleteTest {\n+\n+    /**\n+     * Deleted key.\n+     */\n+    private static final String KEY = \"deletedKey\";\n+\n+    /**\n+     * Delete method.\n+     */\n+    private static final String METHOD = \"DELETE\";\n+\n+    /**\n+     * HTTP.\n+     */\n+    private static final String HTTP = \"HTTP/1.1\";\n+\n+    @Test\n+    @Disabled\n+    void deleteCorrectEntry() {\n+        final Storage storage = new InMemoryStorage();\n+        storage.save(\n+            new Key.From(SliceDeleteTest.KEY),\n+            new Content.From(\"deleted content\".getBytes())\n+        ).join();\n+        new SliceDelete(\n+            storage,\n+            new Key.From(SliceDeleteTest.KEY)", "originalCommit": "161467c8b3ed2d72892dfdca91fcef003659c0cf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTcyMzgwMw==", "url": "https://github.com/artipie/http/pull/173#discussion_r439723803", "bodyText": "@paulodamaso can we add also the requirement to write a test for 404 case?", "author": "victornoel", "createdAt": "2020-06-13T09:13:01Z", "path": "src/main/java/com/artipie/http/slice/SliceDelete.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * MIT License\n+ *\n+ * Copyright (c) 2020 Artipie\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+\n+package com.artipie.http.slice;\n+\n+import com.artipie.asto.Key;\n+import com.artipie.asto.Storage;\n+import com.artipie.http.Response;\n+import com.artipie.http.Slice;\n+import java.nio.ByteBuffer;\n+import java.util.Map;\n+import org.reactivestreams.Publisher;\n+\n+/**\n+ * Delete decorator for Slice.\n+ *\n+ * @since 0.10\n+ * @todo #138:30min Implement SliceDelete\n+ *  Implement SliceDelete, which removes a key from storage. After that, enable\n+ *  the tests in SliceDeleteTest and put back the coverage missedclass metric to\n+ *  15 in pom.xml.", "originalCommit": "161467c8b3ed2d72892dfdca91fcef003659c0cf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "adba08f006a177e7699af4efe718c2965d9b86e5", "url": "https://github.com/artipie/http/commit/adba08f006a177e7699af4efe718c2965d9b86e5", "message": "For #148: review corrections", "committedDate": "2020-06-16T20:44:20Z", "type": "commit"}, {"oid": "09ebbd17287ca26ff2151ae4ff91966bbff2b9b3", "url": "https://github.com/artipie/http/commit/09ebbd17287ca26ff2151ae4ff91966bbff2b9b3", "message": "For #148: merged master", "committedDate": "2020-06-22T19:10:47Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY3OTUzMA==", "url": "https://github.com/artipie/http/pull/173#discussion_r443679530", "bodyText": "@paulodamaso why do we need to share the key between tests?", "author": "g4s8", "createdAt": "2020-06-22T16:23:00Z", "path": "src/test/java/com/artipie/http/slice/SliceDeleteTest.java", "diffHunk": "@@ -0,0 +1,139 @@\n+/*\n+ * MIT License\n+ *\n+ * Copyright (c) 2020 Artipie\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.http.slice;\n+\n+import com.artipie.asto.Content;\n+import com.artipie.asto.Key;\n+import com.artipie.asto.Storage;\n+import com.artipie.asto.memory.InMemoryStorage;\n+import com.artipie.http.hm.RsHasStatus;\n+import com.artipie.http.rq.RequestLine;\n+import com.artipie.http.rs.RsStatus;\n+import io.reactivex.Flowable;\n+import java.util.Collections;\n+import org.hamcrest.MatcherAssert;\n+import org.hamcrest.core.IsEqual;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n+\n+/**\n+ * Tests for {@link SliceDelete}.\n+ *\n+ * @since 0.10\n+ */\n+public final class SliceDeleteTest {\n+\n+    /**\n+     * Deleted key.\n+     */\n+    private static final String KEY = \"deletedKey\";", "originalCommit": "adba08f006a177e7699af4efe718c2965d9b86e5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY3OTYzMg==", "url": "https://github.com/artipie/http/pull/173#discussion_r443679632", "bodyText": "@paulodamaso this class can be package private", "author": "g4s8", "createdAt": "2020-06-22T16:23:09Z", "path": "src/test/java/com/artipie/http/slice/SliceDeleteTest.java", "diffHunk": "@@ -0,0 +1,139 @@\n+/*\n+ * MIT License\n+ *\n+ * Copyright (c) 2020 Artipie\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.http.slice;\n+\n+import com.artipie.asto.Content;\n+import com.artipie.asto.Key;\n+import com.artipie.asto.Storage;\n+import com.artipie.asto.memory.InMemoryStorage;\n+import com.artipie.http.hm.RsHasStatus;\n+import com.artipie.http.rq.RequestLine;\n+import com.artipie.http.rs.RsStatus;\n+import io.reactivex.Flowable;\n+import java.util.Collections;\n+import org.hamcrest.MatcherAssert;\n+import org.hamcrest.core.IsEqual;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n+\n+/**\n+ * Tests for {@link SliceDelete}.\n+ *\n+ * @since 0.10\n+ */\n+public final class SliceDeleteTest {", "originalCommit": "adba08f006a177e7699af4efe718c2965d9b86e5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY4MDQ1MA==", "url": "https://github.com/artipie/http/pull/173#discussion_r443680450", "bodyText": "@paulodamaso I'd create private static method to build requires line instead of using constant - it will hide internal details from users and keep fewer shared data between tests, e.g. line(String path)", "author": "g4s8", "createdAt": "2020-06-22T16:24:29Z", "path": "src/test/java/com/artipie/http/slice/SliceDeleteTest.java", "diffHunk": "@@ -0,0 +1,139 @@\n+/*\n+ * MIT License\n+ *\n+ * Copyright (c) 2020 Artipie\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.http.slice;\n+\n+import com.artipie.asto.Content;\n+import com.artipie.asto.Key;\n+import com.artipie.asto.Storage;\n+import com.artipie.asto.memory.InMemoryStorage;\n+import com.artipie.http.hm.RsHasStatus;\n+import com.artipie.http.rq.RequestLine;\n+import com.artipie.http.rs.RsStatus;\n+import io.reactivex.Flowable;\n+import java.util.Collections;\n+import org.hamcrest.MatcherAssert;\n+import org.hamcrest.core.IsEqual;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n+\n+/**\n+ * Tests for {@link SliceDelete}.\n+ *\n+ * @since 0.10\n+ */\n+public final class SliceDeleteTest {\n+\n+    /**\n+     * Deleted key.\n+     */\n+    private static final String KEY = \"deletedKey\";\n+\n+    /**\n+     * Delete method.\n+     */\n+    private static final String METHOD = \"DELETE\";", "originalCommit": "adba08f006a177e7699af4efe718c2965d9b86e5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzk5NzMyNQ==", "url": "https://github.com/artipie/http/pull/173#discussion_r443997325", "bodyText": "@paulodamaso response() returns async response which may be called later, please check this test to see how Slice can be tested: \n  \n    \n      http/src/test/java/com/artipie/http/slice/TrimPathSliceTest.java\n    \n    \n         Line 137\n      in\n      5b0712c\n    \n    \n    \n    \n\n        \n          \n           private static void verify(final Slice slice, final RequestLine line) throws Exception { \n        \n    \n  \n\n\nAlternatively, you can verify that response has OK status using RsHasStatus Hamcrest matcher which is blocking waiting response to complete before checking the status.", "author": "g4s8", "createdAt": "2020-06-23T06:47:42Z", "path": "src/test/java/com/artipie/http/slice/SliceDeleteTest.java", "diffHunk": "@@ -0,0 +1,139 @@\n+/*\n+ * MIT License\n+ *\n+ * Copyright (c) 2020 Artipie\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.http.slice;\n+\n+import com.artipie.asto.Content;\n+import com.artipie.asto.Key;\n+import com.artipie.asto.Storage;\n+import com.artipie.asto.memory.InMemoryStorage;\n+import com.artipie.http.hm.RsHasStatus;\n+import com.artipie.http.rq.RequestLine;\n+import com.artipie.http.rs.RsStatus;\n+import io.reactivex.Flowable;\n+import java.util.Collections;\n+import org.hamcrest.MatcherAssert;\n+import org.hamcrest.core.IsEqual;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n+\n+/**\n+ * Tests for {@link SliceDelete}.\n+ *\n+ * @since 0.10\n+ */\n+public final class SliceDeleteTest {\n+\n+    /**\n+     * Deleted key.\n+     */\n+    private static final String KEY = \"deletedKey\";\n+\n+    /**\n+     * Delete method.\n+     */\n+    private static final String METHOD = \"DELETE\";\n+\n+    /**\n+     * HTTP.\n+     */\n+    private static final String HTTP = \"HTTP/1.1\";\n+\n+    @Test\n+    @Disabled\n+    void deleteCorrectEntry() {\n+        final Storage storage = new InMemoryStorage();\n+        storage.save(\n+            new Key.From(SliceDeleteTest.KEY),\n+            new Content.From(\"deleted content\".getBytes())\n+        ).join();\n+        new SliceDelete(\n+            storage\n+        ).response(", "originalCommit": "09ebbd17287ca26ff2151ae4ff91966bbff2b9b3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzk5NzQ1NQ==", "url": "https://github.com/artipie/http/pull/173#discussion_r443997455", "bodyText": "@paulodamaso same here: response() is async", "author": "g4s8", "createdAt": "2020-06-23T06:47:56Z", "path": "src/test/java/com/artipie/http/slice/SliceDeleteTest.java", "diffHunk": "@@ -0,0 +1,139 @@\n+/*\n+ * MIT License\n+ *\n+ * Copyright (c) 2020 Artipie\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.http.slice;\n+\n+import com.artipie.asto.Content;\n+import com.artipie.asto.Key;\n+import com.artipie.asto.Storage;\n+import com.artipie.asto.memory.InMemoryStorage;\n+import com.artipie.http.hm.RsHasStatus;\n+import com.artipie.http.rq.RequestLine;\n+import com.artipie.http.rs.RsStatus;\n+import io.reactivex.Flowable;\n+import java.util.Collections;\n+import org.hamcrest.MatcherAssert;\n+import org.hamcrest.core.IsEqual;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n+\n+/**\n+ * Tests for {@link SliceDelete}.\n+ *\n+ * @since 0.10\n+ */\n+public final class SliceDeleteTest {\n+\n+    /**\n+     * Deleted key.\n+     */\n+    private static final String KEY = \"deletedKey\";\n+\n+    /**\n+     * Delete method.\n+     */\n+    private static final String METHOD = \"DELETE\";\n+\n+    /**\n+     * HTTP.\n+     */\n+    private static final String HTTP = \"HTTP/1.1\";\n+\n+    @Test\n+    @Disabled\n+    void deleteCorrectEntry() {\n+        final Storage storage = new InMemoryStorage();\n+        storage.save(\n+            new Key.From(SliceDeleteTest.KEY),\n+            new Content.From(\"deleted content\".getBytes())\n+        ).join();\n+        new SliceDelete(\n+            storage\n+        ).response(\n+            new RequestLine(\n+                SliceDeleteTest.METHOD,\n+                SliceDeleteTest.KEY,\n+                SliceDeleteTest.HTTP\n+            ).toString(),\n+            Collections.emptyList(),\n+            Flowable.empty()\n+        );\n+        MatcherAssert.assertThat(\n+            storage.exists(new Key.From(SliceDeleteTest.KEY)),\n+            new IsEqual<>(false)\n+        );\n+    }\n+\n+    @Test\n+    @Disabled\n+    void doNotDeleteOtherEntry() {\n+        final Storage storage = new InMemoryStorage();\n+        final Key preserved = new Key.From(\"preservedKey\");\n+        storage.save(\n+            new Key.From(SliceDeleteTest.KEY),\n+            new Content.From(\"any content\".getBytes())\n+        ).join();\n+        storage.save(\n+            preserved,\n+            new Content.From(\"preserved content\".getBytes())\n+        ).join();\n+        new SliceDelete(\n+            storage\n+        ).response(", "originalCommit": "09ebbd17287ca26ff2151ae4ff91966bbff2b9b3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "33043d0894a5f42f0a3bd328a058a313c39f3210", "url": "https://github.com/artipie/http/commit/33043d0894a5f42f0a3bd328a058a313c39f3210", "message": "For #148: review changes", "committedDate": "2020-06-30T18:22:35Z", "type": "commit"}, {"oid": "776bf99fe43161093945a66df3b415ef6d3673fc", "url": "https://github.com/artipie/http/commit/776bf99fe43161093945a66df3b415ef6d3673fc", "message": "For #148: merging master", "committedDate": "2020-06-30T18:26:42Z", "type": "commit"}, {"oid": "609b7bd9cdfde7e2236943717c0165ed2dc3bc2f", "url": "https://github.com/artipie/http/commit/609b7bd9cdfde7e2236943717c0165ed2dc3bc2f", "message": "Merge branch 'master' into 148", "committedDate": "2020-07-06T10:54:30Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODA5MTQxOQ==", "url": "https://github.com/artipie/http/pull/173#discussion_r458091419", "bodyText": "@paulodamaso Storage.exists(Key) is async call which returns CompletableFuture<Boolean>, not boolean, it can't be tested against boolean. You can use Storage.exists(Key).toCompletableFuture().get() or new BlockingStorage(storage).exists(Key)", "author": "g4s8", "createdAt": "2020-07-21T13:22:35Z", "path": "src/test/java/com/artipie/http/slice/SliceDeleteTest.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * MIT License\n+ *\n+ * Copyright (c) 2020 Artipie\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.http.slice;\n+\n+import com.artipie.asto.Content;\n+import com.artipie.asto.Key;\n+import com.artipie.asto.Storage;\n+import com.artipie.asto.memory.InMemoryStorage;\n+import com.artipie.http.Slice;\n+import com.artipie.http.hm.RsHasStatus;\n+import com.artipie.http.rq.RequestLine;\n+import com.artipie.http.rs.RsStatus;\n+import io.reactivex.Flowable;\n+import java.util.Collections;\n+import java.util.concurrent.CompletableFuture;\n+import org.hamcrest.MatcherAssert;\n+import org.hamcrest.core.IsEqual;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n+\n+/**\n+ * Tests for {@link SliceDelete}.\n+ *\n+ * @since 0.10\n+ */\n+final class SliceDeleteTest {\n+\n+    @Test\n+    @Disabled\n+    void deleteCorrectEntry() throws Exception {\n+        final Storage storage = new InMemoryStorage();\n+        final String key = \"deletedKey\";\n+        storage.save(\n+            new Key.From(key),\n+            new Content.From(\"deleted content\".getBytes())\n+        ).join();\n+        verify(\n+            new SliceDelete(\n+                storage\n+            ),\n+            line(key)\n+        );\n+        MatcherAssert.assertThat(\n+            storage.exists(new Key.From(key)),", "originalCommit": "609b7bd9cdfde7e2236943717c0165ed2dc3bc2f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODA5MTc2Mw==", "url": "https://github.com/artipie/http/pull/173#discussion_r458091763", "bodyText": "@paulodamaso same here: CompletionStage<Boolean> can't be compared with Boolean", "author": "g4s8", "createdAt": "2020-07-21T13:23:06Z", "path": "src/test/java/com/artipie/http/slice/SliceDeleteTest.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * MIT License\n+ *\n+ * Copyright (c) 2020 Artipie\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.http.slice;\n+\n+import com.artipie.asto.Content;\n+import com.artipie.asto.Key;\n+import com.artipie.asto.Storage;\n+import com.artipie.asto.memory.InMemoryStorage;\n+import com.artipie.http.Slice;\n+import com.artipie.http.hm.RsHasStatus;\n+import com.artipie.http.rq.RequestLine;\n+import com.artipie.http.rs.RsStatus;\n+import io.reactivex.Flowable;\n+import java.util.Collections;\n+import java.util.concurrent.CompletableFuture;\n+import org.hamcrest.MatcherAssert;\n+import org.hamcrest.core.IsEqual;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n+\n+/**\n+ * Tests for {@link SliceDelete}.\n+ *\n+ * @since 0.10\n+ */\n+final class SliceDeleteTest {\n+\n+    @Test\n+    @Disabled\n+    void deleteCorrectEntry() throws Exception {\n+        final Storage storage = new InMemoryStorage();\n+        final String key = \"deletedKey\";\n+        storage.save(\n+            new Key.From(key),\n+            new Content.From(\"deleted content\".getBytes())\n+        ).join();\n+        verify(\n+            new SliceDelete(\n+                storage\n+            ),\n+            line(key)\n+        );\n+        MatcherAssert.assertThat(\n+            storage.exists(new Key.From(key)),\n+            new IsEqual<>(false)\n+        );\n+    }\n+\n+    @Test\n+    @Disabled\n+    void doNotDeleteOtherEntry() throws Exception {\n+        final Storage storage = new InMemoryStorage();\n+        final Key preserved = new Key.From(\"preservedKey\");\n+        final String deleted = \"deleted\";\n+        storage.save(\n+            new Key.From(deleted),\n+            new Content.From(\"any content\".getBytes())\n+        ).join();\n+        storage.save(\n+            preserved,\n+            new Content.From(\"preserved content\".getBytes())\n+        ).join();\n+        verify(\n+            new SliceDelete(\n+                storage\n+            ),\n+            line(deleted)\n+        );\n+        MatcherAssert.assertThat(\n+            storage.exists(preserved),", "originalCommit": "609b7bd9cdfde7e2236943717c0165ed2dc3bc2f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "60068b5ad29debb856561a55ca9daae29763b199", "url": "https://github.com/artipie/http/commit/60068b5ad29debb856561a55ca9daae29763b199", "message": "Merge remote-tracking branch 'upstream/master' into 148", "committedDate": "2020-08-07T13:33:24Z", "type": "commit"}, {"oid": "9f7afdcf14365e0d233cd1202718d5f17b77d808", "url": "https://github.com/artipie/http/commit/9f7afdcf14365e0d233cd1202718d5f17b77d808", "message": "For #148: review corrections", "committedDate": "2020-08-07T13:40:35Z", "type": "commit"}, {"oid": "698ca63e9c3210cc2211ef1f427acd8bbf3a7207", "url": "https://github.com/artipie/http/commit/698ca63e9c3210cc2211ef1f427acd8bbf3a7207", "message": "Merge branch '148' of https://github.com/paulodamaso/artipie-http into 148", "committedDate": "2020-08-07T13:41:07Z", "type": "commit"}, {"oid": "0a2118f900abd0ba06501be7acc48db044af0c75", "url": "https://github.com/artipie/http/commit/0a2118f900abd0ba06501be7acc48db044af0c75", "message": "Merge branch 'master' into 148", "committedDate": "2020-08-13T09:19:27Z", "type": "commit"}, {"oid": "16fd562a3c1fc3be70c872816a8c355b1e1f4e46", "url": "https://github.com/artipie/http/commit/16fd562a3c1fc3be70c872816a8c355b1e1f4e46", "message": "Merge branch 'master' into 148", "committedDate": "2020-08-13T09:35:03Z", "type": "commit"}]}