{"pr_number": 50, "pr_title": "Add multipart parsing placeholders", "pr_createdAt": "2020-02-21T08:45:47Z", "pr_url": "https://github.com/artipie/http/pull/50", "timeline": [{"oid": "6ccf6f0567ee2b0481cab24e6089ea7780f208f5", "url": "https://github.com/artipie/http/commit/6ccf6f0567ee2b0481cab24e6089ea7780f208f5", "message": "design adaptation", "committedDate": "2020-02-21T08:44:05Z", "type": "commit"}, {"oid": "a968e3b649c844503a8746074d927a51b3457929", "url": "https://github.com/artipie/http/commit/a968e3b649c844503a8746074d927a51b3457929", "message": "use Supplier instead of Callable", "committedDate": "2020-02-21T08:55:11Z", "type": "commit"}, {"oid": "a50f4a1fc34ce253867b46ee3dad6519ddd6a986", "url": "https://github.com/artipie/http/commit/a50f4a1fc34ce253867b46ee3dad6519ddd6a986", "message": "add a dummy test and reactivestreams dependency", "committedDate": "2020-02-21T09:04:27Z", "type": "commit"}, {"oid": "4a9bdbafef0eafa74a34b6c7dcb567570cd17aac", "url": "https://github.com/artipie/http/commit/4a9bdbafef0eafa74a34b6c7dcb567570cd17aac", "message": "Mp now implements Flow.Processor", "committedDate": "2020-02-21T12:48:45Z", "type": "commit"}, {"oid": "3f018815e3991d81361d70fbe029d88293b25777", "url": "https://github.com/artipie/http/commit/3f018815e3991d81361d70fbe029d88293b25777", "message": "add logging and submit two txt files in a multipart request", "committedDate": "2020-02-21T14:08:33Z", "type": "commit"}, {"oid": "415ff01fbdcaeae31daf757797e9c81a689e8f2d", "url": "https://github.com/artipie/http/commit/415ff01fbdcaeae31daf757797e9c81a689e8f2d", "message": "Merge branch 'master' of github.com:artipie/http into implement_multipart", "committedDate": "2020-02-26T08:42:28Z", "type": "commit"}, {"oid": "318a1f61bee96f7239265bf1175da2caa6012fda", "url": "https://github.com/artipie/http/commit/318a1f61bee96f7239265bf1175da2caa6012fda", "message": "introduce byte stream splitters", "committedDate": "2020-02-26T13:13:37Z", "type": "commit"}, {"oid": "66411755f4bdadf249c5d416399a9f848bf10bb0", "url": "https://github.com/artipie/http/commit/66411755f4bdadf249c5d416399a9f848bf10bb0", "message": "Merge branch 'master' of github.com:artipie/http into implement_multipart", "committedDate": "2020-03-17T10:17:31Z", "type": "commit"}, {"oid": "f8b2bfb9fa98907f44207fd2bc872abe4b939d51", "url": "https://github.com/artipie/http/commit/f8b2bfb9fa98907f44207fd2bc872abe4b939d51", "message": "add puzzles for implementation", "committedDate": "2020-03-17T11:51:58Z", "type": "commit"}, {"oid": "f2e8cc560536bed938d6f4112ba9625113d54e6e", "url": "https://github.com/artipie/http/commit/f2e8cc560536bed938d6f4112ba9625113d54e6e", "message": "use vert.x server version 0.2.2", "committedDate": "2020-03-17T11:57:31Z", "type": "commit"}, {"oid": "0c6543d0621afb18573d17230e65d6ceabc41ad1", "url": "https://github.com/artipie/http/commit/0c6543d0621afb18573d17230e65d6ceabc41ad1", "message": "remove http exclusion", "committedDate": "2020-03-17T12:14:33Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY2MzQ5OQ==", "url": "https://github.com/artipie/http/pull/50#discussion_r393663499", "bodyText": "@Sammers21 You can supress web variable here, it is just used once.", "author": "paulodamaso", "createdAt": "2020-03-17T13:05:49Z", "path": "src/test/java/com/artipie/http/rq/MpTest.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * MIT License\n+ *\n+ * Copyright (c) 2020 Artipie\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.http.rq;\n+\n+import com.artipie.http.Slice;\n+import com.artipie.http.rs.RsStatus;\n+import com.artipie.vertx.VertxSliceServer;\n+import io.reactivex.Flowable;\n+import io.vertx.reactivex.core.Vertx;\n+import io.vertx.reactivex.ext.web.client.WebClient;\n+import io.vertx.reactivex.ext.web.multipart.MultipartForm;\n+import java.io.IOException;\n+import java.net.ServerSocket;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.HashSet;\n+import java.util.concurrent.CompletableFuture;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.io.TempDir;\n+\n+/**\n+ * Multipart parser test.\n+ * @todo #32:60min Enable this test.\n+ *  In order to ensure that multipart parser works correctly we wrote a test for it. For now, it\n+ *  is disabled, but, later, we will enable it.\n+ * @since 0.4\n+ */\n+@SuppressWarnings(\"PMD.AvoidDuplicateLiterals\")\n+public class MpTest {\n+\n+    /**\n+     * The localhost.\n+     */\n+    private static final String LOCALHOST = \"localhost\";\n+\n+    @Test\n+    @Disabled\n+    public void ableToParseBasic(@TempDir final Path dir) throws IOException {\n+        final Vertx vertx = Vertx.vertx();\n+        final Slice slice = (line, headers, body) -> connection -> {\n+            final int zero = 0;\n+            final Mp mpp = new Mp(headers);\n+            body.subscribe(mpp);\n+            Flowable.fromPublisher(mpp).subscribe();\n+            connection.accept(\n+                RsStatus.OK,\n+                new HashSet<>(zero),\n+                Flowable.empty()\n+            );\n+            return CompletableFuture.completedFuture(null);\n+        };\n+        final int port = this.rndPort();\n+        final VertxSliceServer server = new VertxSliceServer(vertx, slice, port);\n+        server.start();\n+        final Path resolve = dir.resolve(\"text.txt\");\n+        Files.write(resolve, \"Hello worrrrld!!!\".getBytes());\n+        final WebClient web = WebClient.create(vertx);\n+        web.post(port, MpTest.LOCALHOST, \"/hello\")", "originalCommit": "0c6543d0621afb18573d17230e65d6ceabc41ad1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY3Mjk4MA==", "url": "https://github.com/artipie/http/pull/50#discussion_r393672980", "bodyText": "@Sammers21 This test doesn't look complete; you should test somehow if the multipart form is correctly parsed, not just execute it and expect that no error is thrown. Also, I think that we don't need a puzzle just for enabling those tests; we could add this information in the puzzles related to finishing Mp implementation", "author": "paulodamaso", "createdAt": "2020-03-17T13:20:51Z", "path": "src/test/java/com/artipie/http/rq/MpTest.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * MIT License\n+ *\n+ * Copyright (c) 2020 Artipie\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.http.rq;\n+\n+import com.artipie.http.Slice;\n+import com.artipie.http.rs.RsStatus;\n+import com.artipie.vertx.VertxSliceServer;\n+import io.reactivex.Flowable;\n+import io.vertx.reactivex.core.Vertx;\n+import io.vertx.reactivex.ext.web.client.WebClient;\n+import io.vertx.reactivex.ext.web.multipart.MultipartForm;\n+import java.io.IOException;\n+import java.net.ServerSocket;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.HashSet;\n+import java.util.concurrent.CompletableFuture;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.io.TempDir;\n+\n+/**\n+ * Multipart parser test.\n+ * @todo #32:60min Enable this test.", "originalCommit": "0c6543d0621afb18573d17230e65d6ceabc41ad1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTAyODA2MA==", "url": "https://github.com/artipie/http/pull/50#discussion_r395028060", "bodyText": "@paulodamaso , looks reasonable", "author": "Sammers21", "createdAt": "2020-03-19T13:34:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY3Mjk4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTAzMTY1OA==", "url": "https://github.com/artipie/http/pull/50#discussion_r395031658", "bodyText": "@paulodamaso , done", "author": "Sammers21", "createdAt": "2020-03-19T13:40:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY3Mjk4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTEyMzg0NQ==", "url": "https://github.com/artipie/http/pull/50#discussion_r395123845", "bodyText": "@Sammers21 I still don't see where the tests assure that the Multipart parser works correctly; you should test it by providing a set of known values to Multipart and checking the generated output.", "author": "paulodamaso", "createdAt": "2020-03-19T15:41:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY3Mjk4MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY3NjExNw==", "url": "https://github.com/artipie/http/pull/50#discussion_r393676117", "bodyText": "@Sammers21 You could call this class Multipart, I think that it becomes clearer to the reader", "author": "paulodamaso", "createdAt": "2020-03-17T13:25:26Z", "path": "src/main/java/com/artipie/http/rq/Mp.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * MIT License\n+ *\n+ * Copyright (c) 2020 Artipie\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+\n+package com.artipie.http.rq;\n+\n+import java.nio.ByteBuffer;\n+import java.util.Map;\n+import java.util.function.Supplier;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import java.util.stream.StreamSupport;\n+import org.reactivestreams.Processor;\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+\n+/**\n+ * A multipart parser. Parses a Flow of Bytes into a flow of Multiparts\n+ * See\n+ * <a href=\"https://www.w3.org/Protocols/rfc1341/7_2_Multipart.html\">rfc1341</a>\n+ * spec.\n+ * @todo #32:120min Implement Publisher part.\n+ *  Subscribe is a part of publisher contract. Parts are emmited in a way, similar to stream parser,\n+ *  but with an attention to headers.\n+ * @todo #32:120min Implement Subscriber part.\n+ *  On subscribe is called when upstream wants to propagate elements to us. We should take it and\n+ *  use it.\n+ * @since 0.4\n+ * @checkstyle ConstantUsageCheck (500 lines)\n+ */\n+@SuppressWarnings({\"PMD.AvoidDuplicateLiterals\", \"PMD.UnusedPrivateField\", \"PMD.SingularField\"})\n+public final class Mp implements Processor<ByteBuffer, Part> {", "originalCommit": "0c6543d0621afb18573d17230e65d6ceabc41ad1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTAyNzYwMg==", "url": "https://github.com/artipie/http/pull/50#discussion_r395027602", "bodyText": "@paulodamaso , agree", "author": "Sammers21", "createdAt": "2020-03-19T13:34:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY3NjExNw=="}], "type": "inlineReview"}, {"oid": "bdaf2bebc805fd67fb808de1040d892b4c6ecac8", "url": "https://github.com/artipie/http/commit/bdaf2bebc805fd67fb808de1040d892b4c6ecac8", "message": "rename 'Mp' -> 'Multipart'", "committedDate": "2020-03-19T13:33:55Z", "type": "commit"}, {"oid": "ac1f97d3dca9a7fd8dc01aa19647f5aa0ad0d385", "url": "https://github.com/artipie/http/commit/ac1f97d3dca9a7fd8dc01aa19647f5aa0ad0d385", "message": "move todo to Multipart", "committedDate": "2020-03-19T13:40:11Z", "type": "commit"}, {"oid": "bf64027d38e1e1d78a62feb735db8183c7e877df", "url": "https://github.com/artipie/http/commit/bf64027d38e1e1d78a62feb735db8183c7e877df", "message": "inline web", "committedDate": "2020-03-20T08:38:42Z", "type": "commit"}, {"oid": "b56b334a549ea101c3b2b906f64cd9d2af629053", "url": "https://github.com/artipie/http/commit/b56b334a549ea101c3b2b906f64cd9d2af629053", "message": "Merge branch 'master' of github.com:artipie/http into implement_multipart", "committedDate": "2020-03-23T11:15:22Z", "type": "commit"}, {"oid": "7854831b1520a3d6a2988c35efe60b0075068ef4", "url": "https://github.com/artipie/http/commit/7854831b1520a3d6a2988c35efe60b0075068ef4", "message": "add assertion that multipart were correctly parsed", "committedDate": "2020-03-23T11:21:10Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQxMTAzMw==", "url": "https://github.com/artipie/http/pull/50#discussion_r396411033", "bodyText": "@Sammers21 Great, could you please just inline sliceand port into server variable instantiation?", "author": "paulodamaso", "createdAt": "2020-03-23T12:23:14Z", "path": "src/test/java/com/artipie/http/rq/MultipartTest.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * MIT License\n+ *\n+ * Copyright (c) 2020 Artipie\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.http.rq;\n+\n+import com.artipie.http.Slice;\n+import com.artipie.http.rs.RsStatus;\n+import com.artipie.http.stream.ByteFlowAsString;\n+import com.artipie.vertx.VertxSliceServer;\n+import io.reactivex.Flowable;\n+import io.vertx.reactivex.core.Vertx;\n+import io.vertx.reactivex.ext.web.client.WebClient;\n+import io.vertx.reactivex.ext.web.multipart.MultipartForm;\n+import java.io.IOException;\n+import java.net.ServerSocket;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.HashSet;\n+import java.util.concurrent.CompletableFuture;\n+import org.hamcrest.MatcherAssert;\n+import org.hamcrest.core.IsEqual;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.io.TempDir;\n+\n+/**\n+ * Multipart parser test.\n+ * @since 0.4\n+ */\n+@SuppressWarnings(\"PMD.AvoidDuplicateLiterals\")\n+public class MultipartTest {\n+\n+    /**\n+     * The localhost.\n+     */\n+    private static final String LOCALHOST = \"localhost\";\n+\n+    @Test\n+    @Disabled\n+    public void ableToParseBasic(@TempDir final Path dir) throws IOException {\n+        final Vertx vertx = Vertx.vertx();\n+        final Slice slice = (line, headers, body) -> connection -> {\n+            final int zero = 0;\n+            final Multipart mpp = new Multipart(headers);\n+            body.subscribe(mpp);\n+            MatcherAssert.assertThat(\n+                new ByteFlowAsString(Flowable.fromPublisher(mpp).flatMap(part -> part)).value(),\n+                new IsEqual<>(\"Hello worrrrld!!!Hello worrrrld!!!\")\n+            );\n+            connection.accept(\n+                RsStatus.OK,\n+                new HashSet<>(zero),\n+                Flowable.empty()\n+            );\n+            return CompletableFuture.completedFuture(null);\n+        };\n+        final int port = this.rndPort();\n+        final VertxSliceServer server = new VertxSliceServer(vertx, slice, port);\n+        server.start();\n+        final Path resolve = dir.resolve(\"text.txt\");", "originalCommit": "7854831b1520a3d6a2988c35efe60b0075068ef4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQyOTI2MQ==", "url": "https://github.com/artipie/http/pull/50#discussion_r396429261", "bodyText": "@paulodamaso , port can't be inlined", "author": "Sammers21", "createdAt": "2020-03-23T12:56:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQxMTAzMw=="}], "type": "inlineReview"}, {"oid": "dacda4a4268cb4a84cdba900bacb2e05eab52bf7", "url": "https://github.com/artipie/http/commit/dacda4a4268cb4a84cdba900bacb2e05eab52bf7", "message": "inline slice variable", "committedDate": "2020-03-23T12:55:42Z", "type": "commit"}, {"oid": "2de39430d5947038905fe81a977efe4b149d2421", "url": "https://github.com/artipie/http/commit/2de39430d5947038905fe81a977efe4b149d2421", "message": "Merge branch 'master' of github.com:artipie/http into implement_multipart", "committedDate": "2020-03-23T12:57:54Z", "type": "commit"}]}