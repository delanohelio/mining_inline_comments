{"pr_number": 221, "pr_title": "Rule by methods", "pr_createdAt": "2020-08-13T12:12:01Z", "pr_url": "https://github.com/artipie/http/pull/221", "timeline": [{"oid": "ba970ef093f9e0264e4d759b190d5270584c6e5d", "url": "https://github.com/artipie/http/commit/ba970ef093f9e0264e4d759b190d5270584c6e5d", "message": "#220 - rule by methods", "committedDate": "2020-08-13T12:10:54Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQzMTU2NA==", "url": "https://github.com/artipie/http/pull/221#discussion_r470431564", "bodyText": "@g4s8 guess there is a typo and class should be named RtByMethod, not RlByMethod", "author": "olegmoz", "createdAt": "2020-08-14T06:19:25Z", "path": "src/main/java/com/artipie/http/rt/RlByMethods.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * MIT License\n+ *\n+ * Copyright (c) 2020 Artipie\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.http.rt;\n+\n+import com.artipie.http.rq.RequestLineFrom;\n+import com.artipie.http.rq.RqMethod;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+\n+/**\n+ * Route by HTTP methods rule.\n+ * @since 0.16\n+ */\n+public final class RlByMethods implements RtRule {", "originalCommit": "ba970ef093f9e0264e4d759b190d5270584c6e5d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQzMjA4OQ==", "url": "https://github.com/artipie/http/pull/221#discussion_r470432089", "bodyText": "@g4s8 I'd suggest to add a test for this method", "author": "olegmoz", "createdAt": "2020-08-14T06:21:14Z", "path": "src/main/java/com/artipie/http/rt/RlByMethods.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * MIT License\n+ *\n+ * Copyright (c) 2020 Artipie\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.http.rt;\n+\n+import com.artipie.http.rq.RequestLineFrom;\n+import com.artipie.http.rq.RqMethod;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+\n+/**\n+ * Route by HTTP methods rule.\n+ * @since 0.16\n+ */\n+public final class RlByMethods implements RtRule {\n+\n+    /**\n+     * Standard method rules.\n+     * @since 0.16\n+     */\n+    public enum Standard implements RtRule {\n+        /**\n+         * Rule for {@code GET} method.\n+         */\n+        GET(new RlByMethods(RqMethod.GET)),\n+        /**\n+         * Rule for {@code POST} method.\n+         */\n+        POST(new RlByMethods(RqMethod.POST)),\n+        /**\n+         * Rule for {@code PUT} method.\n+         */\n+        PUT(new RlByMethods(RqMethod.PUT)),\n+        /**\n+         * Rule for {@code DELETE} method.\n+         */\n+        DELETE(new RlByMethods(RqMethod.DELETE)),\n+        /**\n+         * All common read methods.\n+         */\n+        ALL_READ(new RlByMethods(RqMethod.GET, RqMethod.HEAD, RqMethod.OPTIONS)),\n+        /**\n+         * All common write methods.\n+         */\n+        ALL_WRITE(new RlByMethods(RqMethod.PUT, RqMethod.POST, RqMethod.DELETE, RqMethod.PATCH));\n+\n+        /**\n+         * Origin rule.\n+         */\n+        private final RtRule origin;\n+\n+        /**\n+         * Ctor.\n+         * @param origin Rule\n+         */\n+        Standard(final RtRule origin) {\n+            this.origin = origin;\n+        }\n+\n+        @Override\n+        public boolean apply(final String line,\n+            final Iterable<Map.Entry<String, String>> headers) {\n+            return this.origin.apply(line, headers);\n+        }\n+    }\n+\n+    /**\n+     * Method name.\n+     */\n+    private final Set<RqMethod> methods;\n+\n+    /**\n+     * Route by methods.\n+     * @param methods Method names\n+     */\n+    public RlByMethods(final RqMethod... methods) {\n+        this(new HashSet<>(Arrays.asList(methods)));\n+    }\n+\n+    /**\n+     * Route by methods.\n+     * @param methods Method names\n+     */\n+    public RlByMethods(final Set<RqMethod> methods) {\n+        this.methods = Collections.unmodifiableSet(methods);\n+    }\n+\n+    @Override\n+    public boolean apply(final String line,\n+        final Iterable<Map.Entry<String, String>> headers) {\n+        return this.methods.contains(new RequestLineFrom(line).method());\n+    }", "originalCommit": "ba970ef093f9e0264e4d759b190d5270584c6e5d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "0886ad5db6108e0c00ecc9aef795a7486ab5e1c4", "url": "https://github.com/artipie/http/commit/0886ad5db6108e0c00ecc9aef795a7486ab5e1c4", "message": "#220 - review fixes", "committedDate": "2020-08-14T09:16:42Z", "type": "commit"}, {"oid": "43a587dcfa69636672debc625a8d1bbf459f927f", "url": "https://github.com/artipie/http/commit/43a587dcfa69636672debc625a8d1bbf459f927f", "message": "Merge branch 'master' into 220", "committedDate": "2020-08-14T09:28:00Z", "type": "commit"}]}