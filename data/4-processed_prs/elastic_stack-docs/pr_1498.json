{"pr_number": 1498, "pr_title": "[DOCS] Updates guide to exporting/importing models", "pr_createdAt": "2020-12-15T14:23:25Z", "pr_url": "https://github.com/elastic/stack-docs/pull/1498", "timeline": [{"oid": "3cf3cdfcbaf4b8823869348ebd70c912b7552128", "url": "https://github.com/elastic/stack-docs/commit/3cf3cdfcbaf4b8823869348ebd70c912b7552128", "message": "[DOCS] Updates guide to exportint/importing models\n\nThis version is a suggestion to make the instructions more concise and\nto make use of only two tools (curl, jq) from the command line. This\nmakes prerequisites fewer, and following along easier. There are some\nminor grammatical changes to the section on importing models trained\noutside the Stack which hopefully also makes the terminology a bit more\nin line with common parlance.", "committedDate": "2020-12-15T14:11:27Z", "type": "commit"}, {"oid": "727437b96c98fd423574441c9b44ac8bb46f728e", "url": "https://github.com/elastic/stack-docs/commit/727437b96c98fd423574441c9b44ac8bb46f728e", "message": "Cleanup asciidoc syntax\n\nThis generates a good preview in my editor but I'm unable to get gradle\nworking to do a local test.", "committedDate": "2020-12-15T15:33:10Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzUzNjkyNg==", "url": "https://github.com/elastic/stack-docs/pull/1498#discussion_r543536926", "bodyText": "I think there's a word missing here\"\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            export a model as JSON and import to another cluster.\n          \n          \n            \n            export a model as JSON and import it to another cluster.", "author": "lcawl", "createdAt": "2020-12-15T17:22:08Z", "path": "docs/en/stack/ml/df-analytics/ml-trained-models.asciidoc", "diffHunk": "@@ -13,168 +13,146 @@ information about this process, see <<ml-supervised-workflow>> and\n <<ml-inference>>.\n \n You can also supply trained models that are not created by {dfanalytics-job} but\n-adhere to the appropriate \n-https://github.com/elastic/ml-json-schemas[JSON schema]. If you want to use \n-these trained models in the {stack}, you must store them in {es} documents by \n+adhere to the appropriate\n+https://github.com/elastic/ml-json-schemas[JSON schema]. If you want to use\n+these trained models in the {stack}, you must store them in {es} documents by\n using the {ref}/put-trained-models.html[create trained models API].\n \n-In {kib}, you can view and manage your trained models within *{ml-app}* > *Data \n+In {kib}, you can view and manage your trained models within *{ml-app}* > *Data\n Frame Analytics*:\n \n [role=\"screenshot\"]\n image::images/trained-model-management.png[\"List of trained models in the {ml-app} app in {kib}\"]\n \n-Alternatively, you can use APIs like \n+Alternatively, you can use APIs like\n {ref}/get-trained-models.html[get trained models] and\n {ref}/delete-trained-models.html[delete trained models].\n \n \n [discrete]\n-[[move-between-clusters]]\n-== Moving a trained model between clusters\n-\n-It is a common scenario that the {ml} models are trained in a development or \n-test environment and then used in a production environment. In this case, you \n-need to move your trained model from one cluster to another. The trained model \n-APIs enable you to move your trained model between clusters. The following \n-description shows you the process step by step.\n-\n-1. (Optional) In the cluster where you trained the model, make the call below by \n-using the console in **Dev Tools** to get the configuration information of your \n-trained models.\n+[[export-import]]\n+== Exporting and importing models\n+\n+Models trained in Elasticsearch are portable and can be transferred between\n+clusters. This is particularly useful when models are trained in isolation from\n+the cluster where they are used for inference. The following instructions show\n+how to use https://curl.se/[`curl`] and https://stedolan.github.io/jq/[`jq`] to\n+export a model as JSON and import to another cluster.", "originalCommit": "727437b96c98fd423574441c9b44ac8bb46f728e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzUzNzgwOQ==", "url": "https://github.com/elastic/stack-docs/pull/1498#discussion_r543537809", "bodyText": "We try to avoid \"we\" unless it's a tutorial, which this isn't. Use \"you\" instead:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            1. Given a model _name_, find the model _ID_. Using `curl` we can call the\n          \n          \n            \n            1. Given a model _name_, find the model _ID_. You can use `curl` to call the", "author": "lcawl", "createdAt": "2020-12-15T17:23:22Z", "path": "docs/en/stack/ml/df-analytics/ml-trained-models.asciidoc", "diffHunk": "@@ -13,168 +13,146 @@ information about this process, see <<ml-supervised-workflow>> and\n <<ml-inference>>.\n \n You can also supply trained models that are not created by {dfanalytics-job} but\n-adhere to the appropriate \n-https://github.com/elastic/ml-json-schemas[JSON schema]. If you want to use \n-these trained models in the {stack}, you must store them in {es} documents by \n+adhere to the appropriate\n+https://github.com/elastic/ml-json-schemas[JSON schema]. If you want to use\n+these trained models in the {stack}, you must store them in {es} documents by\n using the {ref}/put-trained-models.html[create trained models API].\n \n-In {kib}, you can view and manage your trained models within *{ml-app}* > *Data \n+In {kib}, you can view and manage your trained models within *{ml-app}* > *Data\n Frame Analytics*:\n \n [role=\"screenshot\"]\n image::images/trained-model-management.png[\"List of trained models in the {ml-app} app in {kib}\"]\n \n-Alternatively, you can use APIs like \n+Alternatively, you can use APIs like\n {ref}/get-trained-models.html[get trained models] and\n {ref}/delete-trained-models.html[delete trained models].\n \n \n [discrete]\n-[[move-between-clusters]]\n-== Moving a trained model between clusters\n-\n-It is a common scenario that the {ml} models are trained in a development or \n-test environment and then used in a production environment. In this case, you \n-need to move your trained model from one cluster to another. The trained model \n-APIs enable you to move your trained model between clusters. The following \n-description shows you the process step by step.\n-\n-1. (Optional) In the cluster where you trained the model, make the call below by \n-using the console in **Dev Tools** to get the configuration information of your \n-trained models.\n+[[export-import]]\n+== Exporting and importing models\n+\n+Models trained in Elasticsearch are portable and can be transferred between\n+clusters. This is particularly useful when models are trained in isolation from\n+the cluster where they are used for inference. The following instructions show\n+how to use https://curl.se/[`curl`] and https://stedolan.github.io/jq/[`jq`] to\n+export a model as JSON and import to another cluster.\n+\n+1. Given a model _name_, find the model _ID_. Using `curl` we can call the", "originalCommit": "727437b96c98fd423574441c9b44ac8bb46f728e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzUzODIwMg==", "url": "https://github.com/elastic/stack-docs/pull/1498#discussion_r543538202", "bodyText": "We typically don't capitalize link titles:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            {ref}/get-trained-models.html[Get Trained Model API] to list all models with\n          \n          \n            \n            {ref}/get-trained-models.html[get trained model API] to list all models with", "author": "lcawl", "createdAt": "2020-12-15T17:23:57Z", "path": "docs/en/stack/ml/df-analytics/ml-trained-models.asciidoc", "diffHunk": "@@ -13,168 +13,146 @@ information about this process, see <<ml-supervised-workflow>> and\n <<ml-inference>>.\n \n You can also supply trained models that are not created by {dfanalytics-job} but\n-adhere to the appropriate \n-https://github.com/elastic/ml-json-schemas[JSON schema]. If you want to use \n-these trained models in the {stack}, you must store them in {es} documents by \n+adhere to the appropriate\n+https://github.com/elastic/ml-json-schemas[JSON schema]. If you want to use\n+these trained models in the {stack}, you must store them in {es} documents by\n using the {ref}/put-trained-models.html[create trained models API].\n \n-In {kib}, you can view and manage your trained models within *{ml-app}* > *Data \n+In {kib}, you can view and manage your trained models within *{ml-app}* > *Data\n Frame Analytics*:\n \n [role=\"screenshot\"]\n image::images/trained-model-management.png[\"List of trained models in the {ml-app} app in {kib}\"]\n \n-Alternatively, you can use APIs like \n+Alternatively, you can use APIs like\n {ref}/get-trained-models.html[get trained models] and\n {ref}/delete-trained-models.html[delete trained models].\n \n \n [discrete]\n-[[move-between-clusters]]\n-== Moving a trained model between clusters\n-\n-It is a common scenario that the {ml} models are trained in a development or \n-test environment and then used in a production environment. In this case, you \n-need to move your trained model from one cluster to another. The trained model \n-APIs enable you to move your trained model between clusters. The following \n-description shows you the process step by step.\n-\n-1. (Optional) In the cluster where you trained the model, make the call below by \n-using the console in **Dev Tools** to get the configuration information of your \n-trained models.\n+[[export-import]]\n+== Exporting and importing models\n+\n+Models trained in Elasticsearch are portable and can be transferred between\n+clusters. This is particularly useful when models are trained in isolation from\n+the cluster where they are used for inference. The following instructions show\n+how to use https://curl.se/[`curl`] and https://stedolan.github.io/jq/[`jq`] to\n+export a model as JSON and import to another cluster.\n+\n+1. Given a model _name_, find the model _ID_. Using `curl` we can call the\n+{ref}/get-trained-models.html[Get Trained Model API] to list all models with", "originalCommit": "727437b96c98fd423574441c9b44ac8bb46f728e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzUzOTU2Mg==", "url": "https://github.com/elastic/stack-docs/pull/1498#discussion_r543539562", "bodyText": "Not a big deal, but wish is not something we tend to use in the docs:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            If you wish to show just the model IDs available, use `jq` to select a subset.\n          \n          \n            \n            If you want to show just the model IDs available, use `jq` to select a subset.", "author": "lcawl", "createdAt": "2020-12-15T17:25:47Z", "path": "docs/en/stack/ml/df-analytics/ml-trained-models.asciidoc", "diffHunk": "@@ -13,168 +13,146 @@ information about this process, see <<ml-supervised-workflow>> and\n <<ml-inference>>.\n \n You can also supply trained models that are not created by {dfanalytics-job} but\n-adhere to the appropriate \n-https://github.com/elastic/ml-json-schemas[JSON schema]. If you want to use \n-these trained models in the {stack}, you must store them in {es} documents by \n+adhere to the appropriate\n+https://github.com/elastic/ml-json-schemas[JSON schema]. If you want to use\n+these trained models in the {stack}, you must store them in {es} documents by\n using the {ref}/put-trained-models.html[create trained models API].\n \n-In {kib}, you can view and manage your trained models within *{ml-app}* > *Data \n+In {kib}, you can view and manage your trained models within *{ml-app}* > *Data\n Frame Analytics*:\n \n [role=\"screenshot\"]\n image::images/trained-model-management.png[\"List of trained models in the {ml-app} app in {kib}\"]\n \n-Alternatively, you can use APIs like \n+Alternatively, you can use APIs like\n {ref}/get-trained-models.html[get trained models] and\n {ref}/delete-trained-models.html[delete trained models].\n \n \n [discrete]\n-[[move-between-clusters]]\n-== Moving a trained model between clusters\n-\n-It is a common scenario that the {ml} models are trained in a development or \n-test environment and then used in a production environment. In this case, you \n-need to move your trained model from one cluster to another. The trained model \n-APIs enable you to move your trained model between clusters. The following \n-description shows you the process step by step.\n-\n-1. (Optional) In the cluster where you trained the model, make the call below by \n-using the console in **Dev Tools** to get the configuration information of your \n-trained models.\n+[[export-import]]\n+== Exporting and importing models\n+\n+Models trained in Elasticsearch are portable and can be transferred between\n+clusters. This is particularly useful when models are trained in isolation from\n+the cluster where they are used for inference. The following instructions show\n+how to use https://curl.se/[`curl`] and https://stedolan.github.io/jq/[`jq`] to\n+export a model as JSON and import to another cluster.\n+\n+1. Given a model _name_, find the model _ID_. Using `curl` we can call the\n+{ref}/get-trained-models.html[Get Trained Model API] to list all models with\n+their IDs.\n +\n --\n-\n-[source,console]\n+[source, bash]\n --------------------------------------------------\n-GET _ml/trained_models/\n+curl -s -u elastic:changeme \\\n+  -X GET \"http://localhost:9200/_ml/trained_models\" \\\n+    | jq . -C \\\n+    | more\n --------------------------------------------------\n-// TEST[skip:setup kibana sample data]\n+// NOTCONSOLE\n \n-The API response contains the `model_id` of the trained models. Check the \n-`model_id` of the trained model you want to move, you need to add it to the API \n-call in the next step.\n---\n+If you wish to show just the model IDs available, use `jq` to select a subset.", "originalCommit": "727437b96c98fd423574441c9b44ac8bb46f728e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzU0MDM4MA==", "url": "https://github.com/elastic/stack-docs/pull/1498#discussion_r543540380", "bodyText": "Per above, let's try replacing \"we\" with \"you\".  For example:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            In our case, we would like to export the model with ID `flights1-1607953694065`.\n          \n          \n            \n            In this example, you are exporting the model with ID `flights1-1607953694065`.", "author": "lcawl", "createdAt": "2020-12-15T17:26:57Z", "path": "docs/en/stack/ml/df-analytics/ml-trained-models.asciidoc", "diffHunk": "@@ -13,168 +13,146 @@ information about this process, see <<ml-supervised-workflow>> and\n <<ml-inference>>.\n \n You can also supply trained models that are not created by {dfanalytics-job} but\n-adhere to the appropriate \n-https://github.com/elastic/ml-json-schemas[JSON schema]. If you want to use \n-these trained models in the {stack}, you must store them in {es} documents by \n+adhere to the appropriate\n+https://github.com/elastic/ml-json-schemas[JSON schema]. If you want to use\n+these trained models in the {stack}, you must store them in {es} documents by\n using the {ref}/put-trained-models.html[create trained models API].\n \n-In {kib}, you can view and manage your trained models within *{ml-app}* > *Data \n+In {kib}, you can view and manage your trained models within *{ml-app}* > *Data\n Frame Analytics*:\n \n [role=\"screenshot\"]\n image::images/trained-model-management.png[\"List of trained models in the {ml-app} app in {kib}\"]\n \n-Alternatively, you can use APIs like \n+Alternatively, you can use APIs like\n {ref}/get-trained-models.html[get trained models] and\n {ref}/delete-trained-models.html[delete trained models].\n \n \n [discrete]\n-[[move-between-clusters]]\n-== Moving a trained model between clusters\n-\n-It is a common scenario that the {ml} models are trained in a development or \n-test environment and then used in a production environment. In this case, you \n-need to move your trained model from one cluster to another. The trained model \n-APIs enable you to move your trained model between clusters. The following \n-description shows you the process step by step.\n-\n-1. (Optional) In the cluster where you trained the model, make the call below by \n-using the console in **Dev Tools** to get the configuration information of your \n-trained models.\n+[[export-import]]\n+== Exporting and importing models\n+\n+Models trained in Elasticsearch are portable and can be transferred between\n+clusters. This is particularly useful when models are trained in isolation from\n+the cluster where they are used for inference. The following instructions show\n+how to use https://curl.se/[`curl`] and https://stedolan.github.io/jq/[`jq`] to\n+export a model as JSON and import to another cluster.\n+\n+1. Given a model _name_, find the model _ID_. Using `curl` we can call the\n+{ref}/get-trained-models.html[Get Trained Model API] to list all models with\n+their IDs.\n +\n --\n-\n-[source,console]\n+[source, bash]\n --------------------------------------------------\n-GET _ml/trained_models/\n+curl -s -u elastic:changeme \\\n+  -X GET \"http://localhost:9200/_ml/trained_models\" \\\n+    | jq . -C \\\n+    | more\n --------------------------------------------------\n-// TEST[skip:setup kibana sample data]\n+// NOTCONSOLE\n \n-The API response contains the `model_id` of the trained models. Check the \n-`model_id` of the trained model you want to move, you need to add it to the API \n-call in the next step.\n---\n+If you wish to show just the model IDs available, use `jq` to select a subset.\n \n-2. Use the {ref}/get-trained-models.html[GET trained model API] to get the \n-trained model definition. You need to specify the following query parameters in \n-the call:\n-+\n---\n-* `for_export`: This parameter allows the model to be in an acceptable format to \n-be retrieved and then added to another cluster. Set it to `true`.\n-\n-* `include`: Set this to `definition` for the API to include the definition in \n-the response.\n-\n-* `decompress_definition`: It specifies in what format the included model \n-definition should be returned. Set it to `false` for getting a custom compressed \n-format. It is also valid to use the JSON format, but it is not optimal. As the \n-decompressed definition may be significantly larger, it is recommended to use \n-the compressed format.\n-   \n-The following call is an example to get the trained model definition. (Replace \n-`<model_id>` with the actual ID of the trained model.)\n-\n-[source,console]\n+[source, bash]\n --------------------------------------------------\n-GET _ml/trained_models/<model_id>?for_export=true&include=definition&decompress_definition=false\n+curl -s -u elastic:changeme \\\n+  -X GET \"http://localhost:9200/_ml/trained_models\" \\\n+    | jq -C -r '.trained_model_configs[].model_id'\n --------------------------------------------------\n-// TEST[skip:setup kibana sample data]\n-\n-The API response returns a `trained_model_configs` array that contains a \n-`compressed_definition` object and the analytics and inference configuration \n-information.\n---\n-\n-3. Copy the content of `trained_model_configs`.\n-\n-4. Use the {ref}/put-trained-models.html[Create trained model API] in the \n-cluster you want to move the trained model to. Paste the content of the \n-`trained_model_configs` to the request body of the API call. The API response \n-contains the model information with metadata.\n-\n-Your trained model is ready to be used as a <<ml-inference-processor,processor>> \n-in an ingest pipeline or as an <<ml-inference-aggregation,aggregation>>.\n-\n-[NOTE]\n---\n-The trained model definition can be so large that it may take a long time for a \n-computer clipboard to copy and paste it. It is recommended to do it \n-programmatically, for example via a bash script or via Client code. You can find \n-examples below.\n---\n-\n-The following Python snippet exports the trained model that you reference to a \n-JSON file:\n+// NOTCONSOLE\n \n-[source, py]\n+[source, bash]\n --------------------------------------------------\n-import json\n-from elasticsearch import Elasticsearch\n-from elasticsearch.client.ml import MlClient\n-es_client = Elasticsearch('URL to your ES instance', http_auth=(username, password), use_ssl=True)\n-ml_client = MlClient(es_client)\n-result = ml_client.get_trained_models(model_id='your-model-id', decompress_definition=False, include=definition)\n-compressed_df = result['trained_model_configs'][0]\n-with open('model_filename.json', 'w') as handle:\n-    handle.write(json.dumps(compressed_df))\n+flights1-1607953694065\n+flights0-1607953585123\n+lang_ident_model_1\n --------------------------------------------------\n // NOTCONSOLE\n \n+In our case, we would like to export the model with ID `flights1-1607953694065`.", "originalCommit": "727437b96c98fd423574441c9b44ac8bb46f728e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzU0MDY4NA==", "url": "https://github.com/elastic/stack-docs/pull/1498#discussion_r543540684", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            {ref}/get-trained-models.html[Get Trained Model API] to export the entire model\n          \n          \n            \n            {ref}/get-trained-models.html[get trained models API] to export the entire model", "author": "lcawl", "createdAt": "2020-12-15T17:27:25Z", "path": "docs/en/stack/ml/df-analytics/ml-trained-models.asciidoc", "diffHunk": "@@ -13,168 +13,146 @@ information about this process, see <<ml-supervised-workflow>> and\n <<ml-inference>>.\n \n You can also supply trained models that are not created by {dfanalytics-job} but\n-adhere to the appropriate \n-https://github.com/elastic/ml-json-schemas[JSON schema]. If you want to use \n-these trained models in the {stack}, you must store them in {es} documents by \n+adhere to the appropriate\n+https://github.com/elastic/ml-json-schemas[JSON schema]. If you want to use\n+these trained models in the {stack}, you must store them in {es} documents by\n using the {ref}/put-trained-models.html[create trained models API].\n \n-In {kib}, you can view and manage your trained models within *{ml-app}* > *Data \n+In {kib}, you can view and manage your trained models within *{ml-app}* > *Data\n Frame Analytics*:\n \n [role=\"screenshot\"]\n image::images/trained-model-management.png[\"List of trained models in the {ml-app} app in {kib}\"]\n \n-Alternatively, you can use APIs like \n+Alternatively, you can use APIs like\n {ref}/get-trained-models.html[get trained models] and\n {ref}/delete-trained-models.html[delete trained models].\n \n \n [discrete]\n-[[move-between-clusters]]\n-== Moving a trained model between clusters\n-\n-It is a common scenario that the {ml} models are trained in a development or \n-test environment and then used in a production environment. In this case, you \n-need to move your trained model from one cluster to another. The trained model \n-APIs enable you to move your trained model between clusters. The following \n-description shows you the process step by step.\n-\n-1. (Optional) In the cluster where you trained the model, make the call below by \n-using the console in **Dev Tools** to get the configuration information of your \n-trained models.\n+[[export-import]]\n+== Exporting and importing models\n+\n+Models trained in Elasticsearch are portable and can be transferred between\n+clusters. This is particularly useful when models are trained in isolation from\n+the cluster where they are used for inference. The following instructions show\n+how to use https://curl.se/[`curl`] and https://stedolan.github.io/jq/[`jq`] to\n+export a model as JSON and import to another cluster.\n+\n+1. Given a model _name_, find the model _ID_. Using `curl` we can call the\n+{ref}/get-trained-models.html[Get Trained Model API] to list all models with\n+their IDs.\n +\n --\n-\n-[source,console]\n+[source, bash]\n --------------------------------------------------\n-GET _ml/trained_models/\n+curl -s -u elastic:changeme \\\n+  -X GET \"http://localhost:9200/_ml/trained_models\" \\\n+    | jq . -C \\\n+    | more\n --------------------------------------------------\n-// TEST[skip:setup kibana sample data]\n+// NOTCONSOLE\n \n-The API response contains the `model_id` of the trained models. Check the \n-`model_id` of the trained model you want to move, you need to add it to the API \n-call in the next step.\n---\n+If you wish to show just the model IDs available, use `jq` to select a subset.\n \n-2. Use the {ref}/get-trained-models.html[GET trained model API] to get the \n-trained model definition. You need to specify the following query parameters in \n-the call:\n-+\n---\n-* `for_export`: This parameter allows the model to be in an acceptable format to \n-be retrieved and then added to another cluster. Set it to `true`.\n-\n-* `include`: Set this to `definition` for the API to include the definition in \n-the response.\n-\n-* `decompress_definition`: It specifies in what format the included model \n-definition should be returned. Set it to `false` for getting a custom compressed \n-format. It is also valid to use the JSON format, but it is not optimal. As the \n-decompressed definition may be significantly larger, it is recommended to use \n-the compressed format.\n-   \n-The following call is an example to get the trained model definition. (Replace \n-`<model_id>` with the actual ID of the trained model.)\n-\n-[source,console]\n+[source, bash]\n --------------------------------------------------\n-GET _ml/trained_models/<model_id>?for_export=true&include=definition&decompress_definition=false\n+curl -s -u elastic:changeme \\\n+  -X GET \"http://localhost:9200/_ml/trained_models\" \\\n+    | jq -C -r '.trained_model_configs[].model_id'\n --------------------------------------------------\n-// TEST[skip:setup kibana sample data]\n-\n-The API response returns a `trained_model_configs` array that contains a \n-`compressed_definition` object and the analytics and inference configuration \n-information.\n---\n-\n-3. Copy the content of `trained_model_configs`.\n-\n-4. Use the {ref}/put-trained-models.html[Create trained model API] in the \n-cluster you want to move the trained model to. Paste the content of the \n-`trained_model_configs` to the request body of the API call. The API response \n-contains the model information with metadata.\n-\n-Your trained model is ready to be used as a <<ml-inference-processor,processor>> \n-in an ingest pipeline or as an <<ml-inference-aggregation,aggregation>>.\n-\n-[NOTE]\n---\n-The trained model definition can be so large that it may take a long time for a \n-computer clipboard to copy and paste it. It is recommended to do it \n-programmatically, for example via a bash script or via Client code. You can find \n-examples below.\n---\n-\n-The following Python snippet exports the trained model that you reference to a \n-JSON file:\n+// NOTCONSOLE\n \n-[source, py]\n+[source, bash]\n --------------------------------------------------\n-import json\n-from elasticsearch import Elasticsearch\n-from elasticsearch.client.ml import MlClient\n-es_client = Elasticsearch('URL to your ES instance', http_auth=(username, password), use_ssl=True)\n-ml_client = MlClient(es_client)\n-result = ml_client.get_trained_models(model_id='your-model-id', decompress_definition=False, include=definition)\n-compressed_df = result['trained_model_configs'][0]\n-with open('model_filename.json', 'w') as handle:\n-    handle.write(json.dumps(compressed_df))\n+flights1-1607953694065\n+flights0-1607953585123\n+lang_ident_model_1\n --------------------------------------------------\n // NOTCONSOLE\n \n+In our case, we would like to export the model with ID `flights1-1607953694065`.\n+--\n \n-The following Python snippet imports the model that stored in the JSON file to \n-a cluster:\n-\n-[source, py]\n+2. Using `curl` from the command line, again use the\n+{ref}/get-trained-models.html[Get Trained Model API] to export the entire model", "originalCommit": "727437b96c98fd423574441c9b44ac8bb46f728e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzU0MTY0Ng==", "url": "https://github.com/elastic/stack-docs/pull/1498#discussion_r543541646", "bodyText": "I think the Console is well enough known that you don't need to link it here:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            the model over HTTP into a file. Using the https://www.elastic.co/guide/en/\n          \n          \n            \n            the model over HTTP into a file. If you use the {kib} Console,", "author": "lcawl", "createdAt": "2020-12-15T17:28:41Z", "path": "docs/en/stack/ml/df-analytics/ml-trained-models.asciidoc", "diffHunk": "@@ -13,168 +13,146 @@ information about this process, see <<ml-supervised-workflow>> and\n <<ml-inference>>.\n \n You can also supply trained models that are not created by {dfanalytics-job} but\n-adhere to the appropriate \n-https://github.com/elastic/ml-json-schemas[JSON schema]. If you want to use \n-these trained models in the {stack}, you must store them in {es} documents by \n+adhere to the appropriate\n+https://github.com/elastic/ml-json-schemas[JSON schema]. If you want to use\n+these trained models in the {stack}, you must store them in {es} documents by\n using the {ref}/put-trained-models.html[create trained models API].\n \n-In {kib}, you can view and manage your trained models within *{ml-app}* > *Data \n+In {kib}, you can view and manage your trained models within *{ml-app}* > *Data\n Frame Analytics*:\n \n [role=\"screenshot\"]\n image::images/trained-model-management.png[\"List of trained models in the {ml-app} app in {kib}\"]\n \n-Alternatively, you can use APIs like \n+Alternatively, you can use APIs like\n {ref}/get-trained-models.html[get trained models] and\n {ref}/delete-trained-models.html[delete trained models].\n \n \n [discrete]\n-[[move-between-clusters]]\n-== Moving a trained model between clusters\n-\n-It is a common scenario that the {ml} models are trained in a development or \n-test environment and then used in a production environment. In this case, you \n-need to move your trained model from one cluster to another. The trained model \n-APIs enable you to move your trained model between clusters. The following \n-description shows you the process step by step.\n-\n-1. (Optional) In the cluster where you trained the model, make the call below by \n-using the console in **Dev Tools** to get the configuration information of your \n-trained models.\n+[[export-import]]\n+== Exporting and importing models\n+\n+Models trained in Elasticsearch are portable and can be transferred between\n+clusters. This is particularly useful when models are trained in isolation from\n+the cluster where they are used for inference. The following instructions show\n+how to use https://curl.se/[`curl`] and https://stedolan.github.io/jq/[`jq`] to\n+export a model as JSON and import to another cluster.\n+\n+1. Given a model _name_, find the model _ID_. Using `curl` we can call the\n+{ref}/get-trained-models.html[Get Trained Model API] to list all models with\n+their IDs.\n +\n --\n-\n-[source,console]\n+[source, bash]\n --------------------------------------------------\n-GET _ml/trained_models/\n+curl -s -u elastic:changeme \\\n+  -X GET \"http://localhost:9200/_ml/trained_models\" \\\n+    | jq . -C \\\n+    | more\n --------------------------------------------------\n-// TEST[skip:setup kibana sample data]\n+// NOTCONSOLE\n \n-The API response contains the `model_id` of the trained models. Check the \n-`model_id` of the trained model you want to move, you need to add it to the API \n-call in the next step.\n---\n+If you wish to show just the model IDs available, use `jq` to select a subset.\n \n-2. Use the {ref}/get-trained-models.html[GET trained model API] to get the \n-trained model definition. You need to specify the following query parameters in \n-the call:\n-+\n---\n-* `for_export`: This parameter allows the model to be in an acceptable format to \n-be retrieved and then added to another cluster. Set it to `true`.\n-\n-* `include`: Set this to `definition` for the API to include the definition in \n-the response.\n-\n-* `decompress_definition`: It specifies in what format the included model \n-definition should be returned. Set it to `false` for getting a custom compressed \n-format. It is also valid to use the JSON format, but it is not optimal. As the \n-decompressed definition may be significantly larger, it is recommended to use \n-the compressed format.\n-   \n-The following call is an example to get the trained model definition. (Replace \n-`<model_id>` with the actual ID of the trained model.)\n-\n-[source,console]\n+[source, bash]\n --------------------------------------------------\n-GET _ml/trained_models/<model_id>?for_export=true&include=definition&decompress_definition=false\n+curl -s -u elastic:changeme \\\n+  -X GET \"http://localhost:9200/_ml/trained_models\" \\\n+    | jq -C -r '.trained_model_configs[].model_id'\n --------------------------------------------------\n-// TEST[skip:setup kibana sample data]\n-\n-The API response returns a `trained_model_configs` array that contains a \n-`compressed_definition` object and the analytics and inference configuration \n-information.\n---\n-\n-3. Copy the content of `trained_model_configs`.\n-\n-4. Use the {ref}/put-trained-models.html[Create trained model API] in the \n-cluster you want to move the trained model to. Paste the content of the \n-`trained_model_configs` to the request body of the API call. The API response \n-contains the model information with metadata.\n-\n-Your trained model is ready to be used as a <<ml-inference-processor,processor>> \n-in an ingest pipeline or as an <<ml-inference-aggregation,aggregation>>.\n-\n-[NOTE]\n---\n-The trained model definition can be so large that it may take a long time for a \n-computer clipboard to copy and paste it. It is recommended to do it \n-programmatically, for example via a bash script or via Client code. You can find \n-examples below.\n---\n-\n-The following Python snippet exports the trained model that you reference to a \n-JSON file:\n+// NOTCONSOLE\n \n-[source, py]\n+[source, bash]\n --------------------------------------------------\n-import json\n-from elasticsearch import Elasticsearch\n-from elasticsearch.client.ml import MlClient\n-es_client = Elasticsearch('URL to your ES instance', http_auth=(username, password), use_ssl=True)\n-ml_client = MlClient(es_client)\n-result = ml_client.get_trained_models(model_id='your-model-id', decompress_definition=False, include=definition)\n-compressed_df = result['trained_model_configs'][0]\n-with open('model_filename.json', 'w') as handle:\n-    handle.write(json.dumps(compressed_df))\n+flights1-1607953694065\n+flights0-1607953585123\n+lang_ident_model_1\n --------------------------------------------------\n // NOTCONSOLE\n \n+In our case, we would like to export the model with ID `flights1-1607953694065`.\n+--\n \n-The following Python snippet imports the model that stored in the JSON file to \n-a cluster:\n-\n-[source, py]\n+2. Using `curl` from the command line, again use the\n+{ref}/get-trained-models.html[Get Trained Model API] to export the entire model\n+definition and save it to a JSON file.\n++\n+--\n+[source, bash]\n --------------------------------------------------\n-import json\n-from elasticsearch import Elasticsearch\n-from elasticsearch.client.ml import MlClient\n-es_client = Elasticsearch(args.es, http_auth=(username, password), use_ssl=True, timeout=60)\n-ml_client = MlClient(es_client)\n-with open(filename, 'r') as handle:\n-  compressed_model = json.loads(handle.read())\n-for field in ('version', 'create_time', 'estimated_heap_memory_usage_bytes', 'estimated_operations', 'license_level', 'id','created_by'):\n-  if field in compressed_model:\n-    del compressed_model[field]\n-ml_client.put_trained_model(model_id=model_id, body=compressed_model)\n+curl -u elastic:changeme \\\n+  -X GET \"http://localhost:9200/_ml/trained_models/flights1-1607953694065?exclude_generated=true&include=definition&decompress_definition=false\" \\\n+    | jq '.trained_model_configs[0] | del(.model_id)' \\\n+    > flights1.json\n --------------------------------------------------\n // NOTCONSOLE\n \n+A few observations:\n \n-You can achieve the same by running a bash script. Populate the environment \n-variables:\n-\n-`ES_ADDRESS=\"https://username:password@elasticsearch-address\"`\n+* Exporting models requires using `curl` or a similar tool that can *stream*\n+the model over HTTP into a file. Using the https://www.elastic.co/guide/en/", "originalCommit": "727437b96c98fd423574441c9b44ac8bb46f728e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzU0MTk0Mg==", "url": "https://github.com/elastic/stack-docs/pull/1498#discussion_r543541942", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            kibana/current/console-kibana.html[Kibana Dev Tools console] will cause the", "author": "lcawl", "createdAt": "2020-12-15T17:29:05Z", "path": "docs/en/stack/ml/df-analytics/ml-trained-models.asciidoc", "diffHunk": "@@ -13,168 +13,146 @@ information about this process, see <<ml-supervised-workflow>> and\n <<ml-inference>>.\n \n You can also supply trained models that are not created by {dfanalytics-job} but\n-adhere to the appropriate \n-https://github.com/elastic/ml-json-schemas[JSON schema]. If you want to use \n-these trained models in the {stack}, you must store them in {es} documents by \n+adhere to the appropriate\n+https://github.com/elastic/ml-json-schemas[JSON schema]. If you want to use\n+these trained models in the {stack}, you must store them in {es} documents by\n using the {ref}/put-trained-models.html[create trained models API].\n \n-In {kib}, you can view and manage your trained models within *{ml-app}* > *Data \n+In {kib}, you can view and manage your trained models within *{ml-app}* > *Data\n Frame Analytics*:\n \n [role=\"screenshot\"]\n image::images/trained-model-management.png[\"List of trained models in the {ml-app} app in {kib}\"]\n \n-Alternatively, you can use APIs like \n+Alternatively, you can use APIs like\n {ref}/get-trained-models.html[get trained models] and\n {ref}/delete-trained-models.html[delete trained models].\n \n \n [discrete]\n-[[move-between-clusters]]\n-== Moving a trained model between clusters\n-\n-It is a common scenario that the {ml} models are trained in a development or \n-test environment and then used in a production environment. In this case, you \n-need to move your trained model from one cluster to another. The trained model \n-APIs enable you to move your trained model between clusters. The following \n-description shows you the process step by step.\n-\n-1. (Optional) In the cluster where you trained the model, make the call below by \n-using the console in **Dev Tools** to get the configuration information of your \n-trained models.\n+[[export-import]]\n+== Exporting and importing models\n+\n+Models trained in Elasticsearch are portable and can be transferred between\n+clusters. This is particularly useful when models are trained in isolation from\n+the cluster where they are used for inference. The following instructions show\n+how to use https://curl.se/[`curl`] and https://stedolan.github.io/jq/[`jq`] to\n+export a model as JSON and import to another cluster.\n+\n+1. Given a model _name_, find the model _ID_. Using `curl` we can call the\n+{ref}/get-trained-models.html[Get Trained Model API] to list all models with\n+their IDs.\n +\n --\n-\n-[source,console]\n+[source, bash]\n --------------------------------------------------\n-GET _ml/trained_models/\n+curl -s -u elastic:changeme \\\n+  -X GET \"http://localhost:9200/_ml/trained_models\" \\\n+    | jq . -C \\\n+    | more\n --------------------------------------------------\n-// TEST[skip:setup kibana sample data]\n+// NOTCONSOLE\n \n-The API response contains the `model_id` of the trained models. Check the \n-`model_id` of the trained model you want to move, you need to add it to the API \n-call in the next step.\n---\n+If you wish to show just the model IDs available, use `jq` to select a subset.\n \n-2. Use the {ref}/get-trained-models.html[GET trained model API] to get the \n-trained model definition. You need to specify the following query parameters in \n-the call:\n-+\n---\n-* `for_export`: This parameter allows the model to be in an acceptable format to \n-be retrieved and then added to another cluster. Set it to `true`.\n-\n-* `include`: Set this to `definition` for the API to include the definition in \n-the response.\n-\n-* `decompress_definition`: It specifies in what format the included model \n-definition should be returned. Set it to `false` for getting a custom compressed \n-format. It is also valid to use the JSON format, but it is not optimal. As the \n-decompressed definition may be significantly larger, it is recommended to use \n-the compressed format.\n-   \n-The following call is an example to get the trained model definition. (Replace \n-`<model_id>` with the actual ID of the trained model.)\n-\n-[source,console]\n+[source, bash]\n --------------------------------------------------\n-GET _ml/trained_models/<model_id>?for_export=true&include=definition&decompress_definition=false\n+curl -s -u elastic:changeme \\\n+  -X GET \"http://localhost:9200/_ml/trained_models\" \\\n+    | jq -C -r '.trained_model_configs[].model_id'\n --------------------------------------------------\n-// TEST[skip:setup kibana sample data]\n-\n-The API response returns a `trained_model_configs` array that contains a \n-`compressed_definition` object and the analytics and inference configuration \n-information.\n---\n-\n-3. Copy the content of `trained_model_configs`.\n-\n-4. Use the {ref}/put-trained-models.html[Create trained model API] in the \n-cluster you want to move the trained model to. Paste the content of the \n-`trained_model_configs` to the request body of the API call. The API response \n-contains the model information with metadata.\n-\n-Your trained model is ready to be used as a <<ml-inference-processor,processor>> \n-in an ingest pipeline or as an <<ml-inference-aggregation,aggregation>>.\n-\n-[NOTE]\n---\n-The trained model definition can be so large that it may take a long time for a \n-computer clipboard to copy and paste it. It is recommended to do it \n-programmatically, for example via a bash script or via Client code. You can find \n-examples below.\n---\n-\n-The following Python snippet exports the trained model that you reference to a \n-JSON file:\n+// NOTCONSOLE\n \n-[source, py]\n+[source, bash]\n --------------------------------------------------\n-import json\n-from elasticsearch import Elasticsearch\n-from elasticsearch.client.ml import MlClient\n-es_client = Elasticsearch('URL to your ES instance', http_auth=(username, password), use_ssl=True)\n-ml_client = MlClient(es_client)\n-result = ml_client.get_trained_models(model_id='your-model-id', decompress_definition=False, include=definition)\n-compressed_df = result['trained_model_configs'][0]\n-with open('model_filename.json', 'w') as handle:\n-    handle.write(json.dumps(compressed_df))\n+flights1-1607953694065\n+flights0-1607953585123\n+lang_ident_model_1\n --------------------------------------------------\n // NOTCONSOLE\n \n+In our case, we would like to export the model with ID `flights1-1607953694065`.\n+--\n \n-The following Python snippet imports the model that stored in the JSON file to \n-a cluster:\n-\n-[source, py]\n+2. Using `curl` from the command line, again use the\n+{ref}/get-trained-models.html[Get Trained Model API] to export the entire model\n+definition and save it to a JSON file.\n++\n+--\n+[source, bash]\n --------------------------------------------------\n-import json\n-from elasticsearch import Elasticsearch\n-from elasticsearch.client.ml import MlClient\n-es_client = Elasticsearch(args.es, http_auth=(username, password), use_ssl=True, timeout=60)\n-ml_client = MlClient(es_client)\n-with open(filename, 'r') as handle:\n-  compressed_model = json.loads(handle.read())\n-for field in ('version', 'create_time', 'estimated_heap_memory_usage_bytes', 'estimated_operations', 'license_level', 'id','created_by'):\n-  if field in compressed_model:\n-    del compressed_model[field]\n-ml_client.put_trained_model(model_id=model_id, body=compressed_model)\n+curl -u elastic:changeme \\\n+  -X GET \"http://localhost:9200/_ml/trained_models/flights1-1607953694065?exclude_generated=true&include=definition&decompress_definition=false\" \\\n+    | jq '.trained_model_configs[0] | del(.model_id)' \\\n+    > flights1.json\n --------------------------------------------------\n // NOTCONSOLE\n \n+A few observations:\n \n-You can achieve the same by running a bash script. Populate the environment \n-variables:\n-\n-`ES_ADDRESS=\"https://username:password@elasticsearch-address\"`\n+* Exporting models requires using `curl` or a similar tool that can *stream*\n+the model over HTTP into a file. Using the https://www.elastic.co/guide/en/\n+kibana/current/console-kibana.html[Kibana Dev Tools console] will cause the", "originalCommit": "727437b96c98fd423574441c9b44ac8bb46f728e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzU0MjIyNA==", "url": "https://github.com/elastic/stack-docs/pull/1498#discussion_r543542224", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            browser to become unresponsive due to the size of exported models.\n          \n          \n            \n            browser might be unresponsive due to the size of exported models.", "author": "lcawl", "createdAt": "2020-12-15T17:29:24Z", "path": "docs/en/stack/ml/df-analytics/ml-trained-models.asciidoc", "diffHunk": "@@ -13,168 +13,146 @@ information about this process, see <<ml-supervised-workflow>> and\n <<ml-inference>>.\n \n You can also supply trained models that are not created by {dfanalytics-job} but\n-adhere to the appropriate \n-https://github.com/elastic/ml-json-schemas[JSON schema]. If you want to use \n-these trained models in the {stack}, you must store them in {es} documents by \n+adhere to the appropriate\n+https://github.com/elastic/ml-json-schemas[JSON schema]. If you want to use\n+these trained models in the {stack}, you must store them in {es} documents by\n using the {ref}/put-trained-models.html[create trained models API].\n \n-In {kib}, you can view and manage your trained models within *{ml-app}* > *Data \n+In {kib}, you can view and manage your trained models within *{ml-app}* > *Data\n Frame Analytics*:\n \n [role=\"screenshot\"]\n image::images/trained-model-management.png[\"List of trained models in the {ml-app} app in {kib}\"]\n \n-Alternatively, you can use APIs like \n+Alternatively, you can use APIs like\n {ref}/get-trained-models.html[get trained models] and\n {ref}/delete-trained-models.html[delete trained models].\n \n \n [discrete]\n-[[move-between-clusters]]\n-== Moving a trained model between clusters\n-\n-It is a common scenario that the {ml} models are trained in a development or \n-test environment and then used in a production environment. In this case, you \n-need to move your trained model from one cluster to another. The trained model \n-APIs enable you to move your trained model between clusters. The following \n-description shows you the process step by step.\n-\n-1. (Optional) In the cluster where you trained the model, make the call below by \n-using the console in **Dev Tools** to get the configuration information of your \n-trained models.\n+[[export-import]]\n+== Exporting and importing models\n+\n+Models trained in Elasticsearch are portable and can be transferred between\n+clusters. This is particularly useful when models are trained in isolation from\n+the cluster where they are used for inference. The following instructions show\n+how to use https://curl.se/[`curl`] and https://stedolan.github.io/jq/[`jq`] to\n+export a model as JSON and import to another cluster.\n+\n+1. Given a model _name_, find the model _ID_. Using `curl` we can call the\n+{ref}/get-trained-models.html[Get Trained Model API] to list all models with\n+their IDs.\n +\n --\n-\n-[source,console]\n+[source, bash]\n --------------------------------------------------\n-GET _ml/trained_models/\n+curl -s -u elastic:changeme \\\n+  -X GET \"http://localhost:9200/_ml/trained_models\" \\\n+    | jq . -C \\\n+    | more\n --------------------------------------------------\n-// TEST[skip:setup kibana sample data]\n+// NOTCONSOLE\n \n-The API response contains the `model_id` of the trained models. Check the \n-`model_id` of the trained model you want to move, you need to add it to the API \n-call in the next step.\n---\n+If you wish to show just the model IDs available, use `jq` to select a subset.\n \n-2. Use the {ref}/get-trained-models.html[GET trained model API] to get the \n-trained model definition. You need to specify the following query parameters in \n-the call:\n-+\n---\n-* `for_export`: This parameter allows the model to be in an acceptable format to \n-be retrieved and then added to another cluster. Set it to `true`.\n-\n-* `include`: Set this to `definition` for the API to include the definition in \n-the response.\n-\n-* `decompress_definition`: It specifies in what format the included model \n-definition should be returned. Set it to `false` for getting a custom compressed \n-format. It is also valid to use the JSON format, but it is not optimal. As the \n-decompressed definition may be significantly larger, it is recommended to use \n-the compressed format.\n-   \n-The following call is an example to get the trained model definition. (Replace \n-`<model_id>` with the actual ID of the trained model.)\n-\n-[source,console]\n+[source, bash]\n --------------------------------------------------\n-GET _ml/trained_models/<model_id>?for_export=true&include=definition&decompress_definition=false\n+curl -s -u elastic:changeme \\\n+  -X GET \"http://localhost:9200/_ml/trained_models\" \\\n+    | jq -C -r '.trained_model_configs[].model_id'\n --------------------------------------------------\n-// TEST[skip:setup kibana sample data]\n-\n-The API response returns a `trained_model_configs` array that contains a \n-`compressed_definition` object and the analytics and inference configuration \n-information.\n---\n-\n-3. Copy the content of `trained_model_configs`.\n-\n-4. Use the {ref}/put-trained-models.html[Create trained model API] in the \n-cluster you want to move the trained model to. Paste the content of the \n-`trained_model_configs` to the request body of the API call. The API response \n-contains the model information with metadata.\n-\n-Your trained model is ready to be used as a <<ml-inference-processor,processor>> \n-in an ingest pipeline or as an <<ml-inference-aggregation,aggregation>>.\n-\n-[NOTE]\n---\n-The trained model definition can be so large that it may take a long time for a \n-computer clipboard to copy and paste it. It is recommended to do it \n-programmatically, for example via a bash script or via Client code. You can find \n-examples below.\n---\n-\n-The following Python snippet exports the trained model that you reference to a \n-JSON file:\n+// NOTCONSOLE\n \n-[source, py]\n+[source, bash]\n --------------------------------------------------\n-import json\n-from elasticsearch import Elasticsearch\n-from elasticsearch.client.ml import MlClient\n-es_client = Elasticsearch('URL to your ES instance', http_auth=(username, password), use_ssl=True)\n-ml_client = MlClient(es_client)\n-result = ml_client.get_trained_models(model_id='your-model-id', decompress_definition=False, include=definition)\n-compressed_df = result['trained_model_configs'][0]\n-with open('model_filename.json', 'w') as handle:\n-    handle.write(json.dumps(compressed_df))\n+flights1-1607953694065\n+flights0-1607953585123\n+lang_ident_model_1\n --------------------------------------------------\n // NOTCONSOLE\n \n+In our case, we would like to export the model with ID `flights1-1607953694065`.\n+--\n \n-The following Python snippet imports the model that stored in the JSON file to \n-a cluster:\n-\n-[source, py]\n+2. Using `curl` from the command line, again use the\n+{ref}/get-trained-models.html[Get Trained Model API] to export the entire model\n+definition and save it to a JSON file.\n++\n+--\n+[source, bash]\n --------------------------------------------------\n-import json\n-from elasticsearch import Elasticsearch\n-from elasticsearch.client.ml import MlClient\n-es_client = Elasticsearch(args.es, http_auth=(username, password), use_ssl=True, timeout=60)\n-ml_client = MlClient(es_client)\n-with open(filename, 'r') as handle:\n-  compressed_model = json.loads(handle.read())\n-for field in ('version', 'create_time', 'estimated_heap_memory_usage_bytes', 'estimated_operations', 'license_level', 'id','created_by'):\n-  if field in compressed_model:\n-    del compressed_model[field]\n-ml_client.put_trained_model(model_id=model_id, body=compressed_model)\n+curl -u elastic:changeme \\\n+  -X GET \"http://localhost:9200/_ml/trained_models/flights1-1607953694065?exclude_generated=true&include=definition&decompress_definition=false\" \\\n+    | jq '.trained_model_configs[0] | del(.model_id)' \\\n+    > flights1.json\n --------------------------------------------------\n // NOTCONSOLE\n \n+A few observations:\n \n-You can achieve the same by running a bash script. Populate the environment \n-variables:\n-\n-`ES_ADDRESS=\"https://username:password@elasticsearch-address\"`\n+* Exporting models requires using `curl` or a similar tool that can *stream*\n+the model over HTTP into a file. Using the https://www.elastic.co/guide/en/\n+kibana/current/console-kibana.html[Kibana Dev Tools console] will cause the\n+browser to become unresponsive due to the size of exported models.", "originalCommit": "727437b96c98fd423574441c9b44ac8bb46f728e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzU0MjY4Mw==", "url": "https://github.com/elastic/stack-docs/pull/1498#discussion_r543542683", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * Note the query parameters that are used during export. These are necessary to\n          \n          \n            \n            * Note the query parameters that are used during export. These parameters are necessary to", "author": "lcawl", "createdAt": "2020-12-15T17:30:00Z", "path": "docs/en/stack/ml/df-analytics/ml-trained-models.asciidoc", "diffHunk": "@@ -13,168 +13,146 @@ information about this process, see <<ml-supervised-workflow>> and\n <<ml-inference>>.\n \n You can also supply trained models that are not created by {dfanalytics-job} but\n-adhere to the appropriate \n-https://github.com/elastic/ml-json-schemas[JSON schema]. If you want to use \n-these trained models in the {stack}, you must store them in {es} documents by \n+adhere to the appropriate\n+https://github.com/elastic/ml-json-schemas[JSON schema]. If you want to use\n+these trained models in the {stack}, you must store them in {es} documents by\n using the {ref}/put-trained-models.html[create trained models API].\n \n-In {kib}, you can view and manage your trained models within *{ml-app}* > *Data \n+In {kib}, you can view and manage your trained models within *{ml-app}* > *Data\n Frame Analytics*:\n \n [role=\"screenshot\"]\n image::images/trained-model-management.png[\"List of trained models in the {ml-app} app in {kib}\"]\n \n-Alternatively, you can use APIs like \n+Alternatively, you can use APIs like\n {ref}/get-trained-models.html[get trained models] and\n {ref}/delete-trained-models.html[delete trained models].\n \n \n [discrete]\n-[[move-between-clusters]]\n-== Moving a trained model between clusters\n-\n-It is a common scenario that the {ml} models are trained in a development or \n-test environment and then used in a production environment. In this case, you \n-need to move your trained model from one cluster to another. The trained model \n-APIs enable you to move your trained model between clusters. The following \n-description shows you the process step by step.\n-\n-1. (Optional) In the cluster where you trained the model, make the call below by \n-using the console in **Dev Tools** to get the configuration information of your \n-trained models.\n+[[export-import]]\n+== Exporting and importing models\n+\n+Models trained in Elasticsearch are portable and can be transferred between\n+clusters. This is particularly useful when models are trained in isolation from\n+the cluster where they are used for inference. The following instructions show\n+how to use https://curl.se/[`curl`] and https://stedolan.github.io/jq/[`jq`] to\n+export a model as JSON and import to another cluster.\n+\n+1. Given a model _name_, find the model _ID_. Using `curl` we can call the\n+{ref}/get-trained-models.html[Get Trained Model API] to list all models with\n+their IDs.\n +\n --\n-\n-[source,console]\n+[source, bash]\n --------------------------------------------------\n-GET _ml/trained_models/\n+curl -s -u elastic:changeme \\\n+  -X GET \"http://localhost:9200/_ml/trained_models\" \\\n+    | jq . -C \\\n+    | more\n --------------------------------------------------\n-// TEST[skip:setup kibana sample data]\n+// NOTCONSOLE\n \n-The API response contains the `model_id` of the trained models. Check the \n-`model_id` of the trained model you want to move, you need to add it to the API \n-call in the next step.\n---\n+If you wish to show just the model IDs available, use `jq` to select a subset.\n \n-2. Use the {ref}/get-trained-models.html[GET trained model API] to get the \n-trained model definition. You need to specify the following query parameters in \n-the call:\n-+\n---\n-* `for_export`: This parameter allows the model to be in an acceptable format to \n-be retrieved and then added to another cluster. Set it to `true`.\n-\n-* `include`: Set this to `definition` for the API to include the definition in \n-the response.\n-\n-* `decompress_definition`: It specifies in what format the included model \n-definition should be returned. Set it to `false` for getting a custom compressed \n-format. It is also valid to use the JSON format, but it is not optimal. As the \n-decompressed definition may be significantly larger, it is recommended to use \n-the compressed format.\n-   \n-The following call is an example to get the trained model definition. (Replace \n-`<model_id>` with the actual ID of the trained model.)\n-\n-[source,console]\n+[source, bash]\n --------------------------------------------------\n-GET _ml/trained_models/<model_id>?for_export=true&include=definition&decompress_definition=false\n+curl -s -u elastic:changeme \\\n+  -X GET \"http://localhost:9200/_ml/trained_models\" \\\n+    | jq -C -r '.trained_model_configs[].model_id'\n --------------------------------------------------\n-// TEST[skip:setup kibana sample data]\n-\n-The API response returns a `trained_model_configs` array that contains a \n-`compressed_definition` object and the analytics and inference configuration \n-information.\n---\n-\n-3. Copy the content of `trained_model_configs`.\n-\n-4. Use the {ref}/put-trained-models.html[Create trained model API] in the \n-cluster you want to move the trained model to. Paste the content of the \n-`trained_model_configs` to the request body of the API call. The API response \n-contains the model information with metadata.\n-\n-Your trained model is ready to be used as a <<ml-inference-processor,processor>> \n-in an ingest pipeline or as an <<ml-inference-aggregation,aggregation>>.\n-\n-[NOTE]\n---\n-The trained model definition can be so large that it may take a long time for a \n-computer clipboard to copy and paste it. It is recommended to do it \n-programmatically, for example via a bash script or via Client code. You can find \n-examples below.\n---\n-\n-The following Python snippet exports the trained model that you reference to a \n-JSON file:\n+// NOTCONSOLE\n \n-[source, py]\n+[source, bash]\n --------------------------------------------------\n-import json\n-from elasticsearch import Elasticsearch\n-from elasticsearch.client.ml import MlClient\n-es_client = Elasticsearch('URL to your ES instance', http_auth=(username, password), use_ssl=True)\n-ml_client = MlClient(es_client)\n-result = ml_client.get_trained_models(model_id='your-model-id', decompress_definition=False, include=definition)\n-compressed_df = result['trained_model_configs'][0]\n-with open('model_filename.json', 'w') as handle:\n-    handle.write(json.dumps(compressed_df))\n+flights1-1607953694065\n+flights0-1607953585123\n+lang_ident_model_1\n --------------------------------------------------\n // NOTCONSOLE\n \n+In our case, we would like to export the model with ID `flights1-1607953694065`.\n+--\n \n-The following Python snippet imports the model that stored in the JSON file to \n-a cluster:\n-\n-[source, py]\n+2. Using `curl` from the command line, again use the\n+{ref}/get-trained-models.html[Get Trained Model API] to export the entire model\n+definition and save it to a JSON file.\n++\n+--\n+[source, bash]\n --------------------------------------------------\n-import json\n-from elasticsearch import Elasticsearch\n-from elasticsearch.client.ml import MlClient\n-es_client = Elasticsearch(args.es, http_auth=(username, password), use_ssl=True, timeout=60)\n-ml_client = MlClient(es_client)\n-with open(filename, 'r') as handle:\n-  compressed_model = json.loads(handle.read())\n-for field in ('version', 'create_time', 'estimated_heap_memory_usage_bytes', 'estimated_operations', 'license_level', 'id','created_by'):\n-  if field in compressed_model:\n-    del compressed_model[field]\n-ml_client.put_trained_model(model_id=model_id, body=compressed_model)\n+curl -u elastic:changeme \\\n+  -X GET \"http://localhost:9200/_ml/trained_models/flights1-1607953694065?exclude_generated=true&include=definition&decompress_definition=false\" \\\n+    | jq '.trained_model_configs[0] | del(.model_id)' \\\n+    > flights1.json\n --------------------------------------------------\n // NOTCONSOLE\n \n+A few observations:\n \n-You can achieve the same by running a bash script. Populate the environment \n-variables:\n-\n-`ES_ADDRESS=\"https://username:password@elasticsearch-address\"`\n+* Exporting models requires using `curl` or a similar tool that can *stream*\n+the model over HTTP into a file. Using the https://www.elastic.co/guide/en/\n+kibana/current/console-kibana.html[Kibana Dev Tools console] will cause the\n+browser to become unresponsive due to the size of exported models.\n \n-`MODEL=\"my_model_name\"`\n+* Note the query parameters that are used during export. These are necessary to", "originalCommit": "727437b96c98fd423574441c9b44ac8bb46f728e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzU0MzM5NA==", "url": "https://github.com/elastic/stack-docs/pull/1498#discussion_r543543394", "bodyText": "This is another paragraph where ideally \"we\" can be replaced with \"you\".  For example:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * We need to unnest the JSON object by one level to extract just the model\n          \n          \n            \n            * You must unnest the JSON object by one level to extract just the model", "author": "lcawl", "createdAt": "2020-12-15T17:30:57Z", "path": "docs/en/stack/ml/df-analytics/ml-trained-models.asciidoc", "diffHunk": "@@ -13,168 +13,146 @@ information about this process, see <<ml-supervised-workflow>> and\n <<ml-inference>>.\n \n You can also supply trained models that are not created by {dfanalytics-job} but\n-adhere to the appropriate \n-https://github.com/elastic/ml-json-schemas[JSON schema]. If you want to use \n-these trained models in the {stack}, you must store them in {es} documents by \n+adhere to the appropriate\n+https://github.com/elastic/ml-json-schemas[JSON schema]. If you want to use\n+these trained models in the {stack}, you must store them in {es} documents by\n using the {ref}/put-trained-models.html[create trained models API].\n \n-In {kib}, you can view and manage your trained models within *{ml-app}* > *Data \n+In {kib}, you can view and manage your trained models within *{ml-app}* > *Data\n Frame Analytics*:\n \n [role=\"screenshot\"]\n image::images/trained-model-management.png[\"List of trained models in the {ml-app} app in {kib}\"]\n \n-Alternatively, you can use APIs like \n+Alternatively, you can use APIs like\n {ref}/get-trained-models.html[get trained models] and\n {ref}/delete-trained-models.html[delete trained models].\n \n \n [discrete]\n-[[move-between-clusters]]\n-== Moving a trained model between clusters\n-\n-It is a common scenario that the {ml} models are trained in a development or \n-test environment and then used in a production environment. In this case, you \n-need to move your trained model from one cluster to another. The trained model \n-APIs enable you to move your trained model between clusters. The following \n-description shows you the process step by step.\n-\n-1. (Optional) In the cluster where you trained the model, make the call below by \n-using the console in **Dev Tools** to get the configuration information of your \n-trained models.\n+[[export-import]]\n+== Exporting and importing models\n+\n+Models trained in Elasticsearch are portable and can be transferred between\n+clusters. This is particularly useful when models are trained in isolation from\n+the cluster where they are used for inference. The following instructions show\n+how to use https://curl.se/[`curl`] and https://stedolan.github.io/jq/[`jq`] to\n+export a model as JSON and import to another cluster.\n+\n+1. Given a model _name_, find the model _ID_. Using `curl` we can call the\n+{ref}/get-trained-models.html[Get Trained Model API] to list all models with\n+their IDs.\n +\n --\n-\n-[source,console]\n+[source, bash]\n --------------------------------------------------\n-GET _ml/trained_models/\n+curl -s -u elastic:changeme \\\n+  -X GET \"http://localhost:9200/_ml/trained_models\" \\\n+    | jq . -C \\\n+    | more\n --------------------------------------------------\n-// TEST[skip:setup kibana sample data]\n+// NOTCONSOLE\n \n-The API response contains the `model_id` of the trained models. Check the \n-`model_id` of the trained model you want to move, you need to add it to the API \n-call in the next step.\n---\n+If you wish to show just the model IDs available, use `jq` to select a subset.\n \n-2. Use the {ref}/get-trained-models.html[GET trained model API] to get the \n-trained model definition. You need to specify the following query parameters in \n-the call:\n-+\n---\n-* `for_export`: This parameter allows the model to be in an acceptable format to \n-be retrieved and then added to another cluster. Set it to `true`.\n-\n-* `include`: Set this to `definition` for the API to include the definition in \n-the response.\n-\n-* `decompress_definition`: It specifies in what format the included model \n-definition should be returned. Set it to `false` for getting a custom compressed \n-format. It is also valid to use the JSON format, but it is not optimal. As the \n-decompressed definition may be significantly larger, it is recommended to use \n-the compressed format.\n-   \n-The following call is an example to get the trained model definition. (Replace \n-`<model_id>` with the actual ID of the trained model.)\n-\n-[source,console]\n+[source, bash]\n --------------------------------------------------\n-GET _ml/trained_models/<model_id>?for_export=true&include=definition&decompress_definition=false\n+curl -s -u elastic:changeme \\\n+  -X GET \"http://localhost:9200/_ml/trained_models\" \\\n+    | jq -C -r '.trained_model_configs[].model_id'\n --------------------------------------------------\n-// TEST[skip:setup kibana sample data]\n-\n-The API response returns a `trained_model_configs` array that contains a \n-`compressed_definition` object and the analytics and inference configuration \n-information.\n---\n-\n-3. Copy the content of `trained_model_configs`.\n-\n-4. Use the {ref}/put-trained-models.html[Create trained model API] in the \n-cluster you want to move the trained model to. Paste the content of the \n-`trained_model_configs` to the request body of the API call. The API response \n-contains the model information with metadata.\n-\n-Your trained model is ready to be used as a <<ml-inference-processor,processor>> \n-in an ingest pipeline or as an <<ml-inference-aggregation,aggregation>>.\n-\n-[NOTE]\n---\n-The trained model definition can be so large that it may take a long time for a \n-computer clipboard to copy and paste it. It is recommended to do it \n-programmatically, for example via a bash script or via Client code. You can find \n-examples below.\n---\n-\n-The following Python snippet exports the trained model that you reference to a \n-JSON file:\n+// NOTCONSOLE\n \n-[source, py]\n+[source, bash]\n --------------------------------------------------\n-import json\n-from elasticsearch import Elasticsearch\n-from elasticsearch.client.ml import MlClient\n-es_client = Elasticsearch('URL to your ES instance', http_auth=(username, password), use_ssl=True)\n-ml_client = MlClient(es_client)\n-result = ml_client.get_trained_models(model_id='your-model-id', decompress_definition=False, include=definition)\n-compressed_df = result['trained_model_configs'][0]\n-with open('model_filename.json', 'w') as handle:\n-    handle.write(json.dumps(compressed_df))\n+flights1-1607953694065\n+flights0-1607953585123\n+lang_ident_model_1\n --------------------------------------------------\n // NOTCONSOLE\n \n+In our case, we would like to export the model with ID `flights1-1607953694065`.\n+--\n \n-The following Python snippet imports the model that stored in the JSON file to \n-a cluster:\n-\n-[source, py]\n+2. Using `curl` from the command line, again use the\n+{ref}/get-trained-models.html[Get Trained Model API] to export the entire model\n+definition and save it to a JSON file.\n++\n+--\n+[source, bash]\n --------------------------------------------------\n-import json\n-from elasticsearch import Elasticsearch\n-from elasticsearch.client.ml import MlClient\n-es_client = Elasticsearch(args.es, http_auth=(username, password), use_ssl=True, timeout=60)\n-ml_client = MlClient(es_client)\n-with open(filename, 'r') as handle:\n-  compressed_model = json.loads(handle.read())\n-for field in ('version', 'create_time', 'estimated_heap_memory_usage_bytes', 'estimated_operations', 'license_level', 'id','created_by'):\n-  if field in compressed_model:\n-    del compressed_model[field]\n-ml_client.put_trained_model(model_id=model_id, body=compressed_model)\n+curl -u elastic:changeme \\\n+  -X GET \"http://localhost:9200/_ml/trained_models/flights1-1607953694065?exclude_generated=true&include=definition&decompress_definition=false\" \\\n+    | jq '.trained_model_configs[0] | del(.model_id)' \\\n+    > flights1.json\n --------------------------------------------------\n // NOTCONSOLE\n \n+A few observations:\n \n-You can achieve the same by running a bash script. Populate the environment \n-variables:\n-\n-`ES_ADDRESS=\"https://username:password@elasticsearch-address\"`\n+* Exporting models requires using `curl` or a similar tool that can *stream*\n+the model over HTTP into a file. Using the https://www.elastic.co/guide/en/\n+kibana/current/console-kibana.html[Kibana Dev Tools console] will cause the\n+browser to become unresponsive due to the size of exported models.\n \n-`MODEL=\"my_model_name\"`\n+* Note the query parameters that are used during export. These are necessary to\n+export the model in a way that it can later be imported again and used for\n+inference.\n \n+* We need to unnest the JSON object by one level to extract just the model", "originalCommit": "727437b96c98fd423574441c9b44ac8bb46f728e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzU0MzY4MA==", "url": "https://github.com/elastic/stack-docs/pull/1498#discussion_r543543680", "bodyText": "Ditto:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            definition. We also want to remove the existing model ID in order to not have\n          \n          \n            \n            definition. You must also remove the existing model ID in order to not have", "author": "lcawl", "createdAt": "2020-12-15T17:31:18Z", "path": "docs/en/stack/ml/df-analytics/ml-trained-models.asciidoc", "diffHunk": "@@ -13,168 +13,146 @@ information about this process, see <<ml-supervised-workflow>> and\n <<ml-inference>>.\n \n You can also supply trained models that are not created by {dfanalytics-job} but\n-adhere to the appropriate \n-https://github.com/elastic/ml-json-schemas[JSON schema]. If you want to use \n-these trained models in the {stack}, you must store them in {es} documents by \n+adhere to the appropriate\n+https://github.com/elastic/ml-json-schemas[JSON schema]. If you want to use\n+these trained models in the {stack}, you must store them in {es} documents by\n using the {ref}/put-trained-models.html[create trained models API].\n \n-In {kib}, you can view and manage your trained models within *{ml-app}* > *Data \n+In {kib}, you can view and manage your trained models within *{ml-app}* > *Data\n Frame Analytics*:\n \n [role=\"screenshot\"]\n image::images/trained-model-management.png[\"List of trained models in the {ml-app} app in {kib}\"]\n \n-Alternatively, you can use APIs like \n+Alternatively, you can use APIs like\n {ref}/get-trained-models.html[get trained models] and\n {ref}/delete-trained-models.html[delete trained models].\n \n \n [discrete]\n-[[move-between-clusters]]\n-== Moving a trained model between clusters\n-\n-It is a common scenario that the {ml} models are trained in a development or \n-test environment and then used in a production environment. In this case, you \n-need to move your trained model from one cluster to another. The trained model \n-APIs enable you to move your trained model between clusters. The following \n-description shows you the process step by step.\n-\n-1. (Optional) In the cluster where you trained the model, make the call below by \n-using the console in **Dev Tools** to get the configuration information of your \n-trained models.\n+[[export-import]]\n+== Exporting and importing models\n+\n+Models trained in Elasticsearch are portable and can be transferred between\n+clusters. This is particularly useful when models are trained in isolation from\n+the cluster where they are used for inference. The following instructions show\n+how to use https://curl.se/[`curl`] and https://stedolan.github.io/jq/[`jq`] to\n+export a model as JSON and import to another cluster.\n+\n+1. Given a model _name_, find the model _ID_. Using `curl` we can call the\n+{ref}/get-trained-models.html[Get Trained Model API] to list all models with\n+their IDs.\n +\n --\n-\n-[source,console]\n+[source, bash]\n --------------------------------------------------\n-GET _ml/trained_models/\n+curl -s -u elastic:changeme \\\n+  -X GET \"http://localhost:9200/_ml/trained_models\" \\\n+    | jq . -C \\\n+    | more\n --------------------------------------------------\n-// TEST[skip:setup kibana sample data]\n+// NOTCONSOLE\n \n-The API response contains the `model_id` of the trained models. Check the \n-`model_id` of the trained model you want to move, you need to add it to the API \n-call in the next step.\n---\n+If you wish to show just the model IDs available, use `jq` to select a subset.\n \n-2. Use the {ref}/get-trained-models.html[GET trained model API] to get the \n-trained model definition. You need to specify the following query parameters in \n-the call:\n-+\n---\n-* `for_export`: This parameter allows the model to be in an acceptable format to \n-be retrieved and then added to another cluster. Set it to `true`.\n-\n-* `include`: Set this to `definition` for the API to include the definition in \n-the response.\n-\n-* `decompress_definition`: It specifies in what format the included model \n-definition should be returned. Set it to `false` for getting a custom compressed \n-format. It is also valid to use the JSON format, but it is not optimal. As the \n-decompressed definition may be significantly larger, it is recommended to use \n-the compressed format.\n-   \n-The following call is an example to get the trained model definition. (Replace \n-`<model_id>` with the actual ID of the trained model.)\n-\n-[source,console]\n+[source, bash]\n --------------------------------------------------\n-GET _ml/trained_models/<model_id>?for_export=true&include=definition&decompress_definition=false\n+curl -s -u elastic:changeme \\\n+  -X GET \"http://localhost:9200/_ml/trained_models\" \\\n+    | jq -C -r '.trained_model_configs[].model_id'\n --------------------------------------------------\n-// TEST[skip:setup kibana sample data]\n-\n-The API response returns a `trained_model_configs` array that contains a \n-`compressed_definition` object and the analytics and inference configuration \n-information.\n---\n-\n-3. Copy the content of `trained_model_configs`.\n-\n-4. Use the {ref}/put-trained-models.html[Create trained model API] in the \n-cluster you want to move the trained model to. Paste the content of the \n-`trained_model_configs` to the request body of the API call. The API response \n-contains the model information with metadata.\n-\n-Your trained model is ready to be used as a <<ml-inference-processor,processor>> \n-in an ingest pipeline or as an <<ml-inference-aggregation,aggregation>>.\n-\n-[NOTE]\n---\n-The trained model definition can be so large that it may take a long time for a \n-computer clipboard to copy and paste it. It is recommended to do it \n-programmatically, for example via a bash script or via Client code. You can find \n-examples below.\n---\n-\n-The following Python snippet exports the trained model that you reference to a \n-JSON file:\n+// NOTCONSOLE\n \n-[source, py]\n+[source, bash]\n --------------------------------------------------\n-import json\n-from elasticsearch import Elasticsearch\n-from elasticsearch.client.ml import MlClient\n-es_client = Elasticsearch('URL to your ES instance', http_auth=(username, password), use_ssl=True)\n-ml_client = MlClient(es_client)\n-result = ml_client.get_trained_models(model_id='your-model-id', decompress_definition=False, include=definition)\n-compressed_df = result['trained_model_configs'][0]\n-with open('model_filename.json', 'w') as handle:\n-    handle.write(json.dumps(compressed_df))\n+flights1-1607953694065\n+flights0-1607953585123\n+lang_ident_model_1\n --------------------------------------------------\n // NOTCONSOLE\n \n+In our case, we would like to export the model with ID `flights1-1607953694065`.\n+--\n \n-The following Python snippet imports the model that stored in the JSON file to \n-a cluster:\n-\n-[source, py]\n+2. Using `curl` from the command line, again use the\n+{ref}/get-trained-models.html[Get Trained Model API] to export the entire model\n+definition and save it to a JSON file.\n++\n+--\n+[source, bash]\n --------------------------------------------------\n-import json\n-from elasticsearch import Elasticsearch\n-from elasticsearch.client.ml import MlClient\n-es_client = Elasticsearch(args.es, http_auth=(username, password), use_ssl=True, timeout=60)\n-ml_client = MlClient(es_client)\n-with open(filename, 'r') as handle:\n-  compressed_model = json.loads(handle.read())\n-for field in ('version', 'create_time', 'estimated_heap_memory_usage_bytes', 'estimated_operations', 'license_level', 'id','created_by'):\n-  if field in compressed_model:\n-    del compressed_model[field]\n-ml_client.put_trained_model(model_id=model_id, body=compressed_model)\n+curl -u elastic:changeme \\\n+  -X GET \"http://localhost:9200/_ml/trained_models/flights1-1607953694065?exclude_generated=true&include=definition&decompress_definition=false\" \\\n+    | jq '.trained_model_configs[0] | del(.model_id)' \\\n+    > flights1.json\n --------------------------------------------------\n // NOTCONSOLE\n \n+A few observations:\n \n-You can achieve the same by running a bash script. Populate the environment \n-variables:\n-\n-`ES_ADDRESS=\"https://username:password@elasticsearch-address\"`\n+* Exporting models requires using `curl` or a similar tool that can *stream*\n+the model over HTTP into a file. Using the https://www.elastic.co/guide/en/\n+kibana/current/console-kibana.html[Kibana Dev Tools console] will cause the\n+browser to become unresponsive due to the size of exported models.\n \n-`MODEL=\"my_model_name\"`\n+* Note the query parameters that are used during export. These are necessary to\n+export the model in a way that it can later be imported again and used for\n+inference.\n \n+* We need to unnest the JSON object by one level to extract just the model\n+definition. We also want to remove the existing model ID in order to not have", "originalCommit": "727437b96c98fd423574441c9b44ac8bb46f728e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzU0NDEwOQ==", "url": "https://github.com/elastic/stack-docs/pull/1498#discussion_r543544109", "bodyText": "Ditto:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            ID collisions when we import again. We do these steps using `jq` inline but\n          \n          \n            \n            ID collisions when you import again. You can do these steps using `jq` inline or", "author": "lcawl", "createdAt": "2020-12-15T17:31:47Z", "path": "docs/en/stack/ml/df-analytics/ml-trained-models.asciidoc", "diffHunk": "@@ -13,168 +13,146 @@ information about this process, see <<ml-supervised-workflow>> and\n <<ml-inference>>.\n \n You can also supply trained models that are not created by {dfanalytics-job} but\n-adhere to the appropriate \n-https://github.com/elastic/ml-json-schemas[JSON schema]. If you want to use \n-these trained models in the {stack}, you must store them in {es} documents by \n+adhere to the appropriate\n+https://github.com/elastic/ml-json-schemas[JSON schema]. If you want to use\n+these trained models in the {stack}, you must store them in {es} documents by\n using the {ref}/put-trained-models.html[create trained models API].\n \n-In {kib}, you can view and manage your trained models within *{ml-app}* > *Data \n+In {kib}, you can view and manage your trained models within *{ml-app}* > *Data\n Frame Analytics*:\n \n [role=\"screenshot\"]\n image::images/trained-model-management.png[\"List of trained models in the {ml-app} app in {kib}\"]\n \n-Alternatively, you can use APIs like \n+Alternatively, you can use APIs like\n {ref}/get-trained-models.html[get trained models] and\n {ref}/delete-trained-models.html[delete trained models].\n \n \n [discrete]\n-[[move-between-clusters]]\n-== Moving a trained model between clusters\n-\n-It is a common scenario that the {ml} models are trained in a development or \n-test environment and then used in a production environment. In this case, you \n-need to move your trained model from one cluster to another. The trained model \n-APIs enable you to move your trained model between clusters. The following \n-description shows you the process step by step.\n-\n-1. (Optional) In the cluster where you trained the model, make the call below by \n-using the console in **Dev Tools** to get the configuration information of your \n-trained models.\n+[[export-import]]\n+== Exporting and importing models\n+\n+Models trained in Elasticsearch are portable and can be transferred between\n+clusters. This is particularly useful when models are trained in isolation from\n+the cluster where they are used for inference. The following instructions show\n+how to use https://curl.se/[`curl`] and https://stedolan.github.io/jq/[`jq`] to\n+export a model as JSON and import to another cluster.\n+\n+1. Given a model _name_, find the model _ID_. Using `curl` we can call the\n+{ref}/get-trained-models.html[Get Trained Model API] to list all models with\n+their IDs.\n +\n --\n-\n-[source,console]\n+[source, bash]\n --------------------------------------------------\n-GET _ml/trained_models/\n+curl -s -u elastic:changeme \\\n+  -X GET \"http://localhost:9200/_ml/trained_models\" \\\n+    | jq . -C \\\n+    | more\n --------------------------------------------------\n-// TEST[skip:setup kibana sample data]\n+// NOTCONSOLE\n \n-The API response contains the `model_id` of the trained models. Check the \n-`model_id` of the trained model you want to move, you need to add it to the API \n-call in the next step.\n---\n+If you wish to show just the model IDs available, use `jq` to select a subset.\n \n-2. Use the {ref}/get-trained-models.html[GET trained model API] to get the \n-trained model definition. You need to specify the following query parameters in \n-the call:\n-+\n---\n-* `for_export`: This parameter allows the model to be in an acceptable format to \n-be retrieved and then added to another cluster. Set it to `true`.\n-\n-* `include`: Set this to `definition` for the API to include the definition in \n-the response.\n-\n-* `decompress_definition`: It specifies in what format the included model \n-definition should be returned. Set it to `false` for getting a custom compressed \n-format. It is also valid to use the JSON format, but it is not optimal. As the \n-decompressed definition may be significantly larger, it is recommended to use \n-the compressed format.\n-   \n-The following call is an example to get the trained model definition. (Replace \n-`<model_id>` with the actual ID of the trained model.)\n-\n-[source,console]\n+[source, bash]\n --------------------------------------------------\n-GET _ml/trained_models/<model_id>?for_export=true&include=definition&decompress_definition=false\n+curl -s -u elastic:changeme \\\n+  -X GET \"http://localhost:9200/_ml/trained_models\" \\\n+    | jq -C -r '.trained_model_configs[].model_id'\n --------------------------------------------------\n-// TEST[skip:setup kibana sample data]\n-\n-The API response returns a `trained_model_configs` array that contains a \n-`compressed_definition` object and the analytics and inference configuration \n-information.\n---\n-\n-3. Copy the content of `trained_model_configs`.\n-\n-4. Use the {ref}/put-trained-models.html[Create trained model API] in the \n-cluster you want to move the trained model to. Paste the content of the \n-`trained_model_configs` to the request body of the API call. The API response \n-contains the model information with metadata.\n-\n-Your trained model is ready to be used as a <<ml-inference-processor,processor>> \n-in an ingest pipeline or as an <<ml-inference-aggregation,aggregation>>.\n-\n-[NOTE]\n---\n-The trained model definition can be so large that it may take a long time for a \n-computer clipboard to copy and paste it. It is recommended to do it \n-programmatically, for example via a bash script or via Client code. You can find \n-examples below.\n---\n-\n-The following Python snippet exports the trained model that you reference to a \n-JSON file:\n+// NOTCONSOLE\n \n-[source, py]\n+[source, bash]\n --------------------------------------------------\n-import json\n-from elasticsearch import Elasticsearch\n-from elasticsearch.client.ml import MlClient\n-es_client = Elasticsearch('URL to your ES instance', http_auth=(username, password), use_ssl=True)\n-ml_client = MlClient(es_client)\n-result = ml_client.get_trained_models(model_id='your-model-id', decompress_definition=False, include=definition)\n-compressed_df = result['trained_model_configs'][0]\n-with open('model_filename.json', 'w') as handle:\n-    handle.write(json.dumps(compressed_df))\n+flights1-1607953694065\n+flights0-1607953585123\n+lang_ident_model_1\n --------------------------------------------------\n // NOTCONSOLE\n \n+In our case, we would like to export the model with ID `flights1-1607953694065`.\n+--\n \n-The following Python snippet imports the model that stored in the JSON file to \n-a cluster:\n-\n-[source, py]\n+2. Using `curl` from the command line, again use the\n+{ref}/get-trained-models.html[Get Trained Model API] to export the entire model\n+definition and save it to a JSON file.\n++\n+--\n+[source, bash]\n --------------------------------------------------\n-import json\n-from elasticsearch import Elasticsearch\n-from elasticsearch.client.ml import MlClient\n-es_client = Elasticsearch(args.es, http_auth=(username, password), use_ssl=True, timeout=60)\n-ml_client = MlClient(es_client)\n-with open(filename, 'r') as handle:\n-  compressed_model = json.loads(handle.read())\n-for field in ('version', 'create_time', 'estimated_heap_memory_usage_bytes', 'estimated_operations', 'license_level', 'id','created_by'):\n-  if field in compressed_model:\n-    del compressed_model[field]\n-ml_client.put_trained_model(model_id=model_id, body=compressed_model)\n+curl -u elastic:changeme \\\n+  -X GET \"http://localhost:9200/_ml/trained_models/flights1-1607953694065?exclude_generated=true&include=definition&decompress_definition=false\" \\\n+    | jq '.trained_model_configs[0] | del(.model_id)' \\\n+    > flights1.json\n --------------------------------------------------\n // NOTCONSOLE\n \n+A few observations:\n \n-You can achieve the same by running a bash script. Populate the environment \n-variables:\n-\n-`ES_ADDRESS=\"https://username:password@elasticsearch-address\"`\n+* Exporting models requires using `curl` or a similar tool that can *stream*\n+the model over HTTP into a file. Using the https://www.elastic.co/guide/en/\n+kibana/current/console-kibana.html[Kibana Dev Tools console] will cause the\n+browser to become unresponsive due to the size of exported models.\n \n-`MODEL=\"my_model_name\"`\n+* Note the query parameters that are used during export. These are necessary to\n+export the model in a way that it can later be imported again and used for\n+inference.\n \n+* We need to unnest the JSON object by one level to extract just the model\n+definition. We also want to remove the existing model ID in order to not have\n+ID collisions when we import again. We do these steps using `jq` inline but", "originalCommit": "727437b96c98fd423574441c9b44ac8bb46f728e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzU0NDM2OA==", "url": "https://github.com/elastic/stack-docs/pull/1498#discussion_r543544368", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            create-trained-models.html[Created Trained Model API]. When we specify the URL,\n          \n          \n            \n            create-trained-models.html[created trained model API]. When you specify the URL,", "author": "lcawl", "createdAt": "2020-12-15T17:32:11Z", "path": "docs/en/stack/ml/df-analytics/ml-trained-models.asciidoc", "diffHunk": "@@ -13,168 +13,146 @@ information about this process, see <<ml-supervised-workflow>> and\n <<ml-inference>>.\n \n You can also supply trained models that are not created by {dfanalytics-job} but\n-adhere to the appropriate \n-https://github.com/elastic/ml-json-schemas[JSON schema]. If you want to use \n-these trained models in the {stack}, you must store them in {es} documents by \n+adhere to the appropriate\n+https://github.com/elastic/ml-json-schemas[JSON schema]. If you want to use\n+these trained models in the {stack}, you must store them in {es} documents by\n using the {ref}/put-trained-models.html[create trained models API].\n \n-In {kib}, you can view and manage your trained models within *{ml-app}* > *Data \n+In {kib}, you can view and manage your trained models within *{ml-app}* > *Data\n Frame Analytics*:\n \n [role=\"screenshot\"]\n image::images/trained-model-management.png[\"List of trained models in the {ml-app} app in {kib}\"]\n \n-Alternatively, you can use APIs like \n+Alternatively, you can use APIs like\n {ref}/get-trained-models.html[get trained models] and\n {ref}/delete-trained-models.html[delete trained models].\n \n \n [discrete]\n-[[move-between-clusters]]\n-== Moving a trained model between clusters\n-\n-It is a common scenario that the {ml} models are trained in a development or \n-test environment and then used in a production environment. In this case, you \n-need to move your trained model from one cluster to another. The trained model \n-APIs enable you to move your trained model between clusters. The following \n-description shows you the process step by step.\n-\n-1. (Optional) In the cluster where you trained the model, make the call below by \n-using the console in **Dev Tools** to get the configuration information of your \n-trained models.\n+[[export-import]]\n+== Exporting and importing models\n+\n+Models trained in Elasticsearch are portable and can be transferred between\n+clusters. This is particularly useful when models are trained in isolation from\n+the cluster where they are used for inference. The following instructions show\n+how to use https://curl.se/[`curl`] and https://stedolan.github.io/jq/[`jq`] to\n+export a model as JSON and import to another cluster.\n+\n+1. Given a model _name_, find the model _ID_. Using `curl` we can call the\n+{ref}/get-trained-models.html[Get Trained Model API] to list all models with\n+their IDs.\n +\n --\n-\n-[source,console]\n+[source, bash]\n --------------------------------------------------\n-GET _ml/trained_models/\n+curl -s -u elastic:changeme \\\n+  -X GET \"http://localhost:9200/_ml/trained_models\" \\\n+    | jq . -C \\\n+    | more\n --------------------------------------------------\n-// TEST[skip:setup kibana sample data]\n+// NOTCONSOLE\n \n-The API response contains the `model_id` of the trained models. Check the \n-`model_id` of the trained model you want to move, you need to add it to the API \n-call in the next step.\n---\n+If you wish to show just the model IDs available, use `jq` to select a subset.\n \n-2. Use the {ref}/get-trained-models.html[GET trained model API] to get the \n-trained model definition. You need to specify the following query parameters in \n-the call:\n-+\n---\n-* `for_export`: This parameter allows the model to be in an acceptable format to \n-be retrieved and then added to another cluster. Set it to `true`.\n-\n-* `include`: Set this to `definition` for the API to include the definition in \n-the response.\n-\n-* `decompress_definition`: It specifies in what format the included model \n-definition should be returned. Set it to `false` for getting a custom compressed \n-format. It is also valid to use the JSON format, but it is not optimal. As the \n-decompressed definition may be significantly larger, it is recommended to use \n-the compressed format.\n-   \n-The following call is an example to get the trained model definition. (Replace \n-`<model_id>` with the actual ID of the trained model.)\n-\n-[source,console]\n+[source, bash]\n --------------------------------------------------\n-GET _ml/trained_models/<model_id>?for_export=true&include=definition&decompress_definition=false\n+curl -s -u elastic:changeme \\\n+  -X GET \"http://localhost:9200/_ml/trained_models\" \\\n+    | jq -C -r '.trained_model_configs[].model_id'\n --------------------------------------------------\n-// TEST[skip:setup kibana sample data]\n-\n-The API response returns a `trained_model_configs` array that contains a \n-`compressed_definition` object and the analytics and inference configuration \n-information.\n---\n-\n-3. Copy the content of `trained_model_configs`.\n-\n-4. Use the {ref}/put-trained-models.html[Create trained model API] in the \n-cluster you want to move the trained model to. Paste the content of the \n-`trained_model_configs` to the request body of the API call. The API response \n-contains the model information with metadata.\n-\n-Your trained model is ready to be used as a <<ml-inference-processor,processor>> \n-in an ingest pipeline or as an <<ml-inference-aggregation,aggregation>>.\n-\n-[NOTE]\n---\n-The trained model definition can be so large that it may take a long time for a \n-computer clipboard to copy and paste it. It is recommended to do it \n-programmatically, for example via a bash script or via Client code. You can find \n-examples below.\n---\n-\n-The following Python snippet exports the trained model that you reference to a \n-JSON file:\n+// NOTCONSOLE\n \n-[source, py]\n+[source, bash]\n --------------------------------------------------\n-import json\n-from elasticsearch import Elasticsearch\n-from elasticsearch.client.ml import MlClient\n-es_client = Elasticsearch('URL to your ES instance', http_auth=(username, password), use_ssl=True)\n-ml_client = MlClient(es_client)\n-result = ml_client.get_trained_models(model_id='your-model-id', decompress_definition=False, include=definition)\n-compressed_df = result['trained_model_configs'][0]\n-with open('model_filename.json', 'w') as handle:\n-    handle.write(json.dumps(compressed_df))\n+flights1-1607953694065\n+flights0-1607953585123\n+lang_ident_model_1\n --------------------------------------------------\n // NOTCONSOLE\n \n+In our case, we would like to export the model with ID `flights1-1607953694065`.\n+--\n \n-The following Python snippet imports the model that stored in the JSON file to \n-a cluster:\n-\n-[source, py]\n+2. Using `curl` from the command line, again use the\n+{ref}/get-trained-models.html[Get Trained Model API] to export the entire model\n+definition and save it to a JSON file.\n++\n+--\n+[source, bash]\n --------------------------------------------------\n-import json\n-from elasticsearch import Elasticsearch\n-from elasticsearch.client.ml import MlClient\n-es_client = Elasticsearch(args.es, http_auth=(username, password), use_ssl=True, timeout=60)\n-ml_client = MlClient(es_client)\n-with open(filename, 'r') as handle:\n-  compressed_model = json.loads(handle.read())\n-for field in ('version', 'create_time', 'estimated_heap_memory_usage_bytes', 'estimated_operations', 'license_level', 'id','created_by'):\n-  if field in compressed_model:\n-    del compressed_model[field]\n-ml_client.put_trained_model(model_id=model_id, body=compressed_model)\n+curl -u elastic:changeme \\\n+  -X GET \"http://localhost:9200/_ml/trained_models/flights1-1607953694065?exclude_generated=true&include=definition&decompress_definition=false\" \\\n+    | jq '.trained_model_configs[0] | del(.model_id)' \\\n+    > flights1.json\n --------------------------------------------------\n // NOTCONSOLE\n \n+A few observations:\n \n-You can achieve the same by running a bash script. Populate the environment \n-variables:\n-\n-`ES_ADDRESS=\"https://username:password@elasticsearch-address\"`\n+* Exporting models requires using `curl` or a similar tool that can *stream*\n+the model over HTTP into a file. Using the https://www.elastic.co/guide/en/\n+kibana/current/console-kibana.html[Kibana Dev Tools console] will cause the\n+browser to become unresponsive due to the size of exported models.\n \n-`MODEL=\"my_model_name\"`\n+* Note the query parameters that are used during export. These are necessary to\n+export the model in a way that it can later be imported again and used for\n+inference.\n \n+* We need to unnest the JSON object by one level to extract just the model\n+definition. We also want to remove the existing model ID in order to not have\n+ID collisions when we import again. We do these steps using `jq` inline but\n+alternatively it can be done to the resulting JSON file after downloading using\n+`jq` or other tools.\n+--\n \n-Then run the script:\n-\n+3. Import the saved model using `curl` to upload the JSON file to the {ref}/\n+create-trained-models.html[Created Trained Model API]. When we specify the URL,", "originalCommit": "727437b96c98fd423574441c9b44ac8bb46f728e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzU0NDYzMQ==", "url": "https://github.com/elastic/stack-docs/pull/1498#discussion_r543544631", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            we can also set the model ID to something new using the last path part of the\n          \n          \n            \n            you can also set the model ID to something new using the last path part of the", "author": "lcawl", "createdAt": "2020-12-15T17:32:27Z", "path": "docs/en/stack/ml/df-analytics/ml-trained-models.asciidoc", "diffHunk": "@@ -13,168 +13,146 @@ information about this process, see <<ml-supervised-workflow>> and\n <<ml-inference>>.\n \n You can also supply trained models that are not created by {dfanalytics-job} but\n-adhere to the appropriate \n-https://github.com/elastic/ml-json-schemas[JSON schema]. If you want to use \n-these trained models in the {stack}, you must store them in {es} documents by \n+adhere to the appropriate\n+https://github.com/elastic/ml-json-schemas[JSON schema]. If you want to use\n+these trained models in the {stack}, you must store them in {es} documents by\n using the {ref}/put-trained-models.html[create trained models API].\n \n-In {kib}, you can view and manage your trained models within *{ml-app}* > *Data \n+In {kib}, you can view and manage your trained models within *{ml-app}* > *Data\n Frame Analytics*:\n \n [role=\"screenshot\"]\n image::images/trained-model-management.png[\"List of trained models in the {ml-app} app in {kib}\"]\n \n-Alternatively, you can use APIs like \n+Alternatively, you can use APIs like\n {ref}/get-trained-models.html[get trained models] and\n {ref}/delete-trained-models.html[delete trained models].\n \n \n [discrete]\n-[[move-between-clusters]]\n-== Moving a trained model between clusters\n-\n-It is a common scenario that the {ml} models are trained in a development or \n-test environment and then used in a production environment. In this case, you \n-need to move your trained model from one cluster to another. The trained model \n-APIs enable you to move your trained model between clusters. The following \n-description shows you the process step by step.\n-\n-1. (Optional) In the cluster where you trained the model, make the call below by \n-using the console in **Dev Tools** to get the configuration information of your \n-trained models.\n+[[export-import]]\n+== Exporting and importing models\n+\n+Models trained in Elasticsearch are portable and can be transferred between\n+clusters. This is particularly useful when models are trained in isolation from\n+the cluster where they are used for inference. The following instructions show\n+how to use https://curl.se/[`curl`] and https://stedolan.github.io/jq/[`jq`] to\n+export a model as JSON and import to another cluster.\n+\n+1. Given a model _name_, find the model _ID_. Using `curl` we can call the\n+{ref}/get-trained-models.html[Get Trained Model API] to list all models with\n+their IDs.\n +\n --\n-\n-[source,console]\n+[source, bash]\n --------------------------------------------------\n-GET _ml/trained_models/\n+curl -s -u elastic:changeme \\\n+  -X GET \"http://localhost:9200/_ml/trained_models\" \\\n+    | jq . -C \\\n+    | more\n --------------------------------------------------\n-// TEST[skip:setup kibana sample data]\n+// NOTCONSOLE\n \n-The API response contains the `model_id` of the trained models. Check the \n-`model_id` of the trained model you want to move, you need to add it to the API \n-call in the next step.\n---\n+If you wish to show just the model IDs available, use `jq` to select a subset.\n \n-2. Use the {ref}/get-trained-models.html[GET trained model API] to get the \n-trained model definition. You need to specify the following query parameters in \n-the call:\n-+\n---\n-* `for_export`: This parameter allows the model to be in an acceptable format to \n-be retrieved and then added to another cluster. Set it to `true`.\n-\n-* `include`: Set this to `definition` for the API to include the definition in \n-the response.\n-\n-* `decompress_definition`: It specifies in what format the included model \n-definition should be returned. Set it to `false` for getting a custom compressed \n-format. It is also valid to use the JSON format, but it is not optimal. As the \n-decompressed definition may be significantly larger, it is recommended to use \n-the compressed format.\n-   \n-The following call is an example to get the trained model definition. (Replace \n-`<model_id>` with the actual ID of the trained model.)\n-\n-[source,console]\n+[source, bash]\n --------------------------------------------------\n-GET _ml/trained_models/<model_id>?for_export=true&include=definition&decompress_definition=false\n+curl -s -u elastic:changeme \\\n+  -X GET \"http://localhost:9200/_ml/trained_models\" \\\n+    | jq -C -r '.trained_model_configs[].model_id'\n --------------------------------------------------\n-// TEST[skip:setup kibana sample data]\n-\n-The API response returns a `trained_model_configs` array that contains a \n-`compressed_definition` object and the analytics and inference configuration \n-information.\n---\n-\n-3. Copy the content of `trained_model_configs`.\n-\n-4. Use the {ref}/put-trained-models.html[Create trained model API] in the \n-cluster you want to move the trained model to. Paste the content of the \n-`trained_model_configs` to the request body of the API call. The API response \n-contains the model information with metadata.\n-\n-Your trained model is ready to be used as a <<ml-inference-processor,processor>> \n-in an ingest pipeline or as an <<ml-inference-aggregation,aggregation>>.\n-\n-[NOTE]\n---\n-The trained model definition can be so large that it may take a long time for a \n-computer clipboard to copy and paste it. It is recommended to do it \n-programmatically, for example via a bash script or via Client code. You can find \n-examples below.\n---\n-\n-The following Python snippet exports the trained model that you reference to a \n-JSON file:\n+// NOTCONSOLE\n \n-[source, py]\n+[source, bash]\n --------------------------------------------------\n-import json\n-from elasticsearch import Elasticsearch\n-from elasticsearch.client.ml import MlClient\n-es_client = Elasticsearch('URL to your ES instance', http_auth=(username, password), use_ssl=True)\n-ml_client = MlClient(es_client)\n-result = ml_client.get_trained_models(model_id='your-model-id', decompress_definition=False, include=definition)\n-compressed_df = result['trained_model_configs'][0]\n-with open('model_filename.json', 'w') as handle:\n-    handle.write(json.dumps(compressed_df))\n+flights1-1607953694065\n+flights0-1607953585123\n+lang_ident_model_1\n --------------------------------------------------\n // NOTCONSOLE\n \n+In our case, we would like to export the model with ID `flights1-1607953694065`.\n+--\n \n-The following Python snippet imports the model that stored in the JSON file to \n-a cluster:\n-\n-[source, py]\n+2. Using `curl` from the command line, again use the\n+{ref}/get-trained-models.html[Get Trained Model API] to export the entire model\n+definition and save it to a JSON file.\n++\n+--\n+[source, bash]\n --------------------------------------------------\n-import json\n-from elasticsearch import Elasticsearch\n-from elasticsearch.client.ml import MlClient\n-es_client = Elasticsearch(args.es, http_auth=(username, password), use_ssl=True, timeout=60)\n-ml_client = MlClient(es_client)\n-with open(filename, 'r') as handle:\n-  compressed_model = json.loads(handle.read())\n-for field in ('version', 'create_time', 'estimated_heap_memory_usage_bytes', 'estimated_operations', 'license_level', 'id','created_by'):\n-  if field in compressed_model:\n-    del compressed_model[field]\n-ml_client.put_trained_model(model_id=model_id, body=compressed_model)\n+curl -u elastic:changeme \\\n+  -X GET \"http://localhost:9200/_ml/trained_models/flights1-1607953694065?exclude_generated=true&include=definition&decompress_definition=false\" \\\n+    | jq '.trained_model_configs[0] | del(.model_id)' \\\n+    > flights1.json\n --------------------------------------------------\n // NOTCONSOLE\n \n+A few observations:\n \n-You can achieve the same by running a bash script. Populate the environment \n-variables:\n-\n-`ES_ADDRESS=\"https://username:password@elasticsearch-address\"`\n+* Exporting models requires using `curl` or a similar tool that can *stream*\n+the model over HTTP into a file. Using the https://www.elastic.co/guide/en/\n+kibana/current/console-kibana.html[Kibana Dev Tools console] will cause the\n+browser to become unresponsive due to the size of exported models.\n \n-`MODEL=\"my_model_name\"`\n+* Note the query parameters that are used during export. These are necessary to\n+export the model in a way that it can later be imported again and used for\n+inference.\n \n+* We need to unnest the JSON object by one level to extract just the model\n+definition. We also want to remove the existing model ID in order to not have\n+ID collisions when we import again. We do these steps using `jq` inline but\n+alternatively it can be done to the resulting JSON file after downloading using\n+`jq` or other tools.\n+--\n \n-Then run the script:\n-\n+3. Import the saved model using `curl` to upload the JSON file to the {ref}/\n+create-trained-models.html[Created Trained Model API]. When we specify the URL,\n+we can also set the model ID to something new using the last path part of the", "originalCommit": "727437b96c98fd423574441c9b44ac8bb46f728e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzU0NTM1OA==", "url": "https://github.com/elastic/stack-docs/pull/1498#discussion_r543545358", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * Models exported from the {ref}/get-trained-models.html[Get Trained Model API]\n          \n          \n            \n            * Models exported from the {ref}/get-trained-models.html[get trained models API]", "author": "lcawl", "createdAt": "2020-12-15T17:33:25Z", "path": "docs/en/stack/ml/df-analytics/ml-trained-models.asciidoc", "diffHunk": "@@ -13,168 +13,146 @@ information about this process, see <<ml-supervised-workflow>> and\n <<ml-inference>>.\n \n You can also supply trained models that are not created by {dfanalytics-job} but\n-adhere to the appropriate \n-https://github.com/elastic/ml-json-schemas[JSON schema]. If you want to use \n-these trained models in the {stack}, you must store them in {es} documents by \n+adhere to the appropriate\n+https://github.com/elastic/ml-json-schemas[JSON schema]. If you want to use\n+these trained models in the {stack}, you must store them in {es} documents by\n using the {ref}/put-trained-models.html[create trained models API].\n \n-In {kib}, you can view and manage your trained models within *{ml-app}* > *Data \n+In {kib}, you can view and manage your trained models within *{ml-app}* > *Data\n Frame Analytics*:\n \n [role=\"screenshot\"]\n image::images/trained-model-management.png[\"List of trained models in the {ml-app} app in {kib}\"]\n \n-Alternatively, you can use APIs like \n+Alternatively, you can use APIs like\n {ref}/get-trained-models.html[get trained models] and\n {ref}/delete-trained-models.html[delete trained models].\n \n \n [discrete]\n-[[move-between-clusters]]\n-== Moving a trained model between clusters\n-\n-It is a common scenario that the {ml} models are trained in a development or \n-test environment and then used in a production environment. In this case, you \n-need to move your trained model from one cluster to another. The trained model \n-APIs enable you to move your trained model between clusters. The following \n-description shows you the process step by step.\n-\n-1. (Optional) In the cluster where you trained the model, make the call below by \n-using the console in **Dev Tools** to get the configuration information of your \n-trained models.\n+[[export-import]]\n+== Exporting and importing models\n+\n+Models trained in Elasticsearch are portable and can be transferred between\n+clusters. This is particularly useful when models are trained in isolation from\n+the cluster where they are used for inference. The following instructions show\n+how to use https://curl.se/[`curl`] and https://stedolan.github.io/jq/[`jq`] to\n+export a model as JSON and import to another cluster.\n+\n+1. Given a model _name_, find the model _ID_. Using `curl` we can call the\n+{ref}/get-trained-models.html[Get Trained Model API] to list all models with\n+their IDs.\n +\n --\n-\n-[source,console]\n+[source, bash]\n --------------------------------------------------\n-GET _ml/trained_models/\n+curl -s -u elastic:changeme \\\n+  -X GET \"http://localhost:9200/_ml/trained_models\" \\\n+    | jq . -C \\\n+    | more\n --------------------------------------------------\n-// TEST[skip:setup kibana sample data]\n+// NOTCONSOLE\n \n-The API response contains the `model_id` of the trained models. Check the \n-`model_id` of the trained model you want to move, you need to add it to the API \n-call in the next step.\n---\n+If you wish to show just the model IDs available, use `jq` to select a subset.\n \n-2. Use the {ref}/get-trained-models.html[GET trained model API] to get the \n-trained model definition. You need to specify the following query parameters in \n-the call:\n-+\n---\n-* `for_export`: This parameter allows the model to be in an acceptable format to \n-be retrieved and then added to another cluster. Set it to `true`.\n-\n-* `include`: Set this to `definition` for the API to include the definition in \n-the response.\n-\n-* `decompress_definition`: It specifies in what format the included model \n-definition should be returned. Set it to `false` for getting a custom compressed \n-format. It is also valid to use the JSON format, but it is not optimal. As the \n-decompressed definition may be significantly larger, it is recommended to use \n-the compressed format.\n-   \n-The following call is an example to get the trained model definition. (Replace \n-`<model_id>` with the actual ID of the trained model.)\n-\n-[source,console]\n+[source, bash]\n --------------------------------------------------\n-GET _ml/trained_models/<model_id>?for_export=true&include=definition&decompress_definition=false\n+curl -s -u elastic:changeme \\\n+  -X GET \"http://localhost:9200/_ml/trained_models\" \\\n+    | jq -C -r '.trained_model_configs[].model_id'\n --------------------------------------------------\n-// TEST[skip:setup kibana sample data]\n-\n-The API response returns a `trained_model_configs` array that contains a \n-`compressed_definition` object and the analytics and inference configuration \n-information.\n---\n-\n-3. Copy the content of `trained_model_configs`.\n-\n-4. Use the {ref}/put-trained-models.html[Create trained model API] in the \n-cluster you want to move the trained model to. Paste the content of the \n-`trained_model_configs` to the request body of the API call. The API response \n-contains the model information with metadata.\n-\n-Your trained model is ready to be used as a <<ml-inference-processor,processor>> \n-in an ingest pipeline or as an <<ml-inference-aggregation,aggregation>>.\n-\n-[NOTE]\n---\n-The trained model definition can be so large that it may take a long time for a \n-computer clipboard to copy and paste it. It is recommended to do it \n-programmatically, for example via a bash script or via Client code. You can find \n-examples below.\n---\n-\n-The following Python snippet exports the trained model that you reference to a \n-JSON file:\n+// NOTCONSOLE\n \n-[source, py]\n+[source, bash]\n --------------------------------------------------\n-import json\n-from elasticsearch import Elasticsearch\n-from elasticsearch.client.ml import MlClient\n-es_client = Elasticsearch('URL to your ES instance', http_auth=(username, password), use_ssl=True)\n-ml_client = MlClient(es_client)\n-result = ml_client.get_trained_models(model_id='your-model-id', decompress_definition=False, include=definition)\n-compressed_df = result['trained_model_configs'][0]\n-with open('model_filename.json', 'w') as handle:\n-    handle.write(json.dumps(compressed_df))\n+flights1-1607953694065\n+flights0-1607953585123\n+lang_ident_model_1\n --------------------------------------------------\n // NOTCONSOLE\n \n+In our case, we would like to export the model with ID `flights1-1607953694065`.\n+--\n \n-The following Python snippet imports the model that stored in the JSON file to \n-a cluster:\n-\n-[source, py]\n+2. Using `curl` from the command line, again use the\n+{ref}/get-trained-models.html[Get Trained Model API] to export the entire model\n+definition and save it to a JSON file.\n++\n+--\n+[source, bash]\n --------------------------------------------------\n-import json\n-from elasticsearch import Elasticsearch\n-from elasticsearch.client.ml import MlClient\n-es_client = Elasticsearch(args.es, http_auth=(username, password), use_ssl=True, timeout=60)\n-ml_client = MlClient(es_client)\n-with open(filename, 'r') as handle:\n-  compressed_model = json.loads(handle.read())\n-for field in ('version', 'create_time', 'estimated_heap_memory_usage_bytes', 'estimated_operations', 'license_level', 'id','created_by'):\n-  if field in compressed_model:\n-    del compressed_model[field]\n-ml_client.put_trained_model(model_id=model_id, body=compressed_model)\n+curl -u elastic:changeme \\\n+  -X GET \"http://localhost:9200/_ml/trained_models/flights1-1607953694065?exclude_generated=true&include=definition&decompress_definition=false\" \\\n+    | jq '.trained_model_configs[0] | del(.model_id)' \\\n+    > flights1.json\n --------------------------------------------------\n // NOTCONSOLE\n \n+A few observations:\n \n-You can achieve the same by running a bash script. Populate the environment \n-variables:\n-\n-`ES_ADDRESS=\"https://username:password@elasticsearch-address\"`\n+* Exporting models requires using `curl` or a similar tool that can *stream*\n+the model over HTTP into a file. Using the https://www.elastic.co/guide/en/\n+kibana/current/console-kibana.html[Kibana Dev Tools console] will cause the\n+browser to become unresponsive due to the size of exported models.\n \n-`MODEL=\"my_model_name\"`\n+* Note the query parameters that are used during export. These are necessary to\n+export the model in a way that it can later be imported again and used for\n+inference.\n \n+* We need to unnest the JSON object by one level to extract just the model\n+definition. We also want to remove the existing model ID in order to not have\n+ID collisions when we import again. We do these steps using `jq` inline but\n+alternatively it can be done to the resulting JSON file after downloading using\n+`jq` or other tools.\n+--\n \n-Then run the script:\n-\n+3. Import the saved model using `curl` to upload the JSON file to the {ref}/\n+create-trained-models.html[Created Trained Model API]. When we specify the URL,\n+we can also set the model ID to something new using the last path part of the\n+URL.\n++\n+--\n [source, bash]\n --------------------------------------------------\n-curl -H 'Content-Type: application/json' -XPUT \"$ES_ADDRESS/_ml/inference/$MODEL\" -d@$MODEL.json\n+curl -u elastic:changeme \\\n+  -H 'Content-Type: application/json' \\\n+  -X PUT \"http://localhost:9200/_ml/trained_models/flights1-imported\" \\\n+  --data-binary @flights1.json\n --------------------------------------------------\n // NOTCONSOLE\n+--\n+\n+[NOTE]\n+--\n+* Models exported from the {ref}/get-trained-models.html[Get Trained Model API]", "originalCommit": "727437b96c98fd423574441c9b44ac8bb46f728e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzU0NTkwMA==", "url": "https://github.com/elastic/stack-docs/pull/1498#discussion_r543545900", "bodyText": "Not sure why this link is fully qualified. I think it should use {ref} same as others...\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            are limited in size by the https://www.elastic.co/guide/en/elasticsearch/\n          \n          \n            \n            are limited in size by the", "author": "lcawl", "createdAt": "2020-12-15T17:34:09Z", "path": "docs/en/stack/ml/df-analytics/ml-trained-models.asciidoc", "diffHunk": "@@ -13,168 +13,146 @@ information about this process, see <<ml-supervised-workflow>> and\n <<ml-inference>>.\n \n You can also supply trained models that are not created by {dfanalytics-job} but\n-adhere to the appropriate \n-https://github.com/elastic/ml-json-schemas[JSON schema]. If you want to use \n-these trained models in the {stack}, you must store them in {es} documents by \n+adhere to the appropriate\n+https://github.com/elastic/ml-json-schemas[JSON schema]. If you want to use\n+these trained models in the {stack}, you must store them in {es} documents by\n using the {ref}/put-trained-models.html[create trained models API].\n \n-In {kib}, you can view and manage your trained models within *{ml-app}* > *Data \n+In {kib}, you can view and manage your trained models within *{ml-app}* > *Data\n Frame Analytics*:\n \n [role=\"screenshot\"]\n image::images/trained-model-management.png[\"List of trained models in the {ml-app} app in {kib}\"]\n \n-Alternatively, you can use APIs like \n+Alternatively, you can use APIs like\n {ref}/get-trained-models.html[get trained models] and\n {ref}/delete-trained-models.html[delete trained models].\n \n \n [discrete]\n-[[move-between-clusters]]\n-== Moving a trained model between clusters\n-\n-It is a common scenario that the {ml} models are trained in a development or \n-test environment and then used in a production environment. In this case, you \n-need to move your trained model from one cluster to another. The trained model \n-APIs enable you to move your trained model between clusters. The following \n-description shows you the process step by step.\n-\n-1. (Optional) In the cluster where you trained the model, make the call below by \n-using the console in **Dev Tools** to get the configuration information of your \n-trained models.\n+[[export-import]]\n+== Exporting and importing models\n+\n+Models trained in Elasticsearch are portable and can be transferred between\n+clusters. This is particularly useful when models are trained in isolation from\n+the cluster where they are used for inference. The following instructions show\n+how to use https://curl.se/[`curl`] and https://stedolan.github.io/jq/[`jq`] to\n+export a model as JSON and import to another cluster.\n+\n+1. Given a model _name_, find the model _ID_. Using `curl` we can call the\n+{ref}/get-trained-models.html[Get Trained Model API] to list all models with\n+their IDs.\n +\n --\n-\n-[source,console]\n+[source, bash]\n --------------------------------------------------\n-GET _ml/trained_models/\n+curl -s -u elastic:changeme \\\n+  -X GET \"http://localhost:9200/_ml/trained_models\" \\\n+    | jq . -C \\\n+    | more\n --------------------------------------------------\n-// TEST[skip:setup kibana sample data]\n+// NOTCONSOLE\n \n-The API response contains the `model_id` of the trained models. Check the \n-`model_id` of the trained model you want to move, you need to add it to the API \n-call in the next step.\n---\n+If you wish to show just the model IDs available, use `jq` to select a subset.\n \n-2. Use the {ref}/get-trained-models.html[GET trained model API] to get the \n-trained model definition. You need to specify the following query parameters in \n-the call:\n-+\n---\n-* `for_export`: This parameter allows the model to be in an acceptable format to \n-be retrieved and then added to another cluster. Set it to `true`.\n-\n-* `include`: Set this to `definition` for the API to include the definition in \n-the response.\n-\n-* `decompress_definition`: It specifies in what format the included model \n-definition should be returned. Set it to `false` for getting a custom compressed \n-format. It is also valid to use the JSON format, but it is not optimal. As the \n-decompressed definition may be significantly larger, it is recommended to use \n-the compressed format.\n-   \n-The following call is an example to get the trained model definition. (Replace \n-`<model_id>` with the actual ID of the trained model.)\n-\n-[source,console]\n+[source, bash]\n --------------------------------------------------\n-GET _ml/trained_models/<model_id>?for_export=true&include=definition&decompress_definition=false\n+curl -s -u elastic:changeme \\\n+  -X GET \"http://localhost:9200/_ml/trained_models\" \\\n+    | jq -C -r '.trained_model_configs[].model_id'\n --------------------------------------------------\n-// TEST[skip:setup kibana sample data]\n-\n-The API response returns a `trained_model_configs` array that contains a \n-`compressed_definition` object and the analytics and inference configuration \n-information.\n---\n-\n-3. Copy the content of `trained_model_configs`.\n-\n-4. Use the {ref}/put-trained-models.html[Create trained model API] in the \n-cluster you want to move the trained model to. Paste the content of the \n-`trained_model_configs` to the request body of the API call. The API response \n-contains the model information with metadata.\n-\n-Your trained model is ready to be used as a <<ml-inference-processor,processor>> \n-in an ingest pipeline or as an <<ml-inference-aggregation,aggregation>>.\n-\n-[NOTE]\n---\n-The trained model definition can be so large that it may take a long time for a \n-computer clipboard to copy and paste it. It is recommended to do it \n-programmatically, for example via a bash script or via Client code. You can find \n-examples below.\n---\n-\n-The following Python snippet exports the trained model that you reference to a \n-JSON file:\n+// NOTCONSOLE\n \n-[source, py]\n+[source, bash]\n --------------------------------------------------\n-import json\n-from elasticsearch import Elasticsearch\n-from elasticsearch.client.ml import MlClient\n-es_client = Elasticsearch('URL to your ES instance', http_auth=(username, password), use_ssl=True)\n-ml_client = MlClient(es_client)\n-result = ml_client.get_trained_models(model_id='your-model-id', decompress_definition=False, include=definition)\n-compressed_df = result['trained_model_configs'][0]\n-with open('model_filename.json', 'w') as handle:\n-    handle.write(json.dumps(compressed_df))\n+flights1-1607953694065\n+flights0-1607953585123\n+lang_ident_model_1\n --------------------------------------------------\n // NOTCONSOLE\n \n+In our case, we would like to export the model with ID `flights1-1607953694065`.\n+--\n \n-The following Python snippet imports the model that stored in the JSON file to \n-a cluster:\n-\n-[source, py]\n+2. Using `curl` from the command line, again use the\n+{ref}/get-trained-models.html[Get Trained Model API] to export the entire model\n+definition and save it to a JSON file.\n++\n+--\n+[source, bash]\n --------------------------------------------------\n-import json\n-from elasticsearch import Elasticsearch\n-from elasticsearch.client.ml import MlClient\n-es_client = Elasticsearch(args.es, http_auth=(username, password), use_ssl=True, timeout=60)\n-ml_client = MlClient(es_client)\n-with open(filename, 'r') as handle:\n-  compressed_model = json.loads(handle.read())\n-for field in ('version', 'create_time', 'estimated_heap_memory_usage_bytes', 'estimated_operations', 'license_level', 'id','created_by'):\n-  if field in compressed_model:\n-    del compressed_model[field]\n-ml_client.put_trained_model(model_id=model_id, body=compressed_model)\n+curl -u elastic:changeme \\\n+  -X GET \"http://localhost:9200/_ml/trained_models/flights1-1607953694065?exclude_generated=true&include=definition&decompress_definition=false\" \\\n+    | jq '.trained_model_configs[0] | del(.model_id)' \\\n+    > flights1.json\n --------------------------------------------------\n // NOTCONSOLE\n \n+A few observations:\n \n-You can achieve the same by running a bash script. Populate the environment \n-variables:\n-\n-`ES_ADDRESS=\"https://username:password@elasticsearch-address\"`\n+* Exporting models requires using `curl` or a similar tool that can *stream*\n+the model over HTTP into a file. Using the https://www.elastic.co/guide/en/\n+kibana/current/console-kibana.html[Kibana Dev Tools console] will cause the\n+browser to become unresponsive due to the size of exported models.\n \n-`MODEL=\"my_model_name\"`\n+* Note the query parameters that are used during export. These are necessary to\n+export the model in a way that it can later be imported again and used for\n+inference.\n \n+* We need to unnest the JSON object by one level to extract just the model\n+definition. We also want to remove the existing model ID in order to not have\n+ID collisions when we import again. We do these steps using `jq` inline but\n+alternatively it can be done to the resulting JSON file after downloading using\n+`jq` or other tools.\n+--\n \n-Then run the script:\n-\n+3. Import the saved model using `curl` to upload the JSON file to the {ref}/\n+create-trained-models.html[Created Trained Model API]. When we specify the URL,\n+we can also set the model ID to something new using the last path part of the\n+URL.\n++\n+--\n [source, bash]\n --------------------------------------------------\n-curl -H 'Content-Type: application/json' -XPUT \"$ES_ADDRESS/_ml/inference/$MODEL\" -d@$MODEL.json\n+curl -u elastic:changeme \\\n+  -H 'Content-Type: application/json' \\\n+  -X PUT \"http://localhost:9200/_ml/trained_models/flights1-imported\" \\\n+  --data-binary @flights1.json\n --------------------------------------------------\n // NOTCONSOLE\n+--\n+\n+[NOTE]\n+--\n+* Models exported from the {ref}/get-trained-models.html[Get Trained Model API]\n+are limited in size by the https://www.elastic.co/guide/en/elasticsearch/", "originalCommit": "727437b96c98fd423574441c9b44ac8bb46f728e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzU3NzQ5Mg==", "url": "https://github.com/elastic/stack-docs/pull/1498#discussion_r543577492", "bodyText": "Sorry, I didn't have the right {ref}'s for some links.", "author": "joshdevins", "createdAt": "2020-12-15T18:18:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzU0NTkwMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzU0NjExMQ==", "url": "https://github.com/elastic/stack-docs/pull/1498#discussion_r543546111", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            reference/current/modules-http.html#_http_settings[http.max_content_length]\n          \n          \n            \n            {ref}/modules-http.html#_http_settings[http.max_content_length]", "author": "lcawl", "createdAt": "2020-12-15T17:34:23Z", "path": "docs/en/stack/ml/df-analytics/ml-trained-models.asciidoc", "diffHunk": "@@ -13,168 +13,146 @@ information about this process, see <<ml-supervised-workflow>> and\n <<ml-inference>>.\n \n You can also supply trained models that are not created by {dfanalytics-job} but\n-adhere to the appropriate \n-https://github.com/elastic/ml-json-schemas[JSON schema]. If you want to use \n-these trained models in the {stack}, you must store them in {es} documents by \n+adhere to the appropriate\n+https://github.com/elastic/ml-json-schemas[JSON schema]. If you want to use\n+these trained models in the {stack}, you must store them in {es} documents by\n using the {ref}/put-trained-models.html[create trained models API].\n \n-In {kib}, you can view and manage your trained models within *{ml-app}* > *Data \n+In {kib}, you can view and manage your trained models within *{ml-app}* > *Data\n Frame Analytics*:\n \n [role=\"screenshot\"]\n image::images/trained-model-management.png[\"List of trained models in the {ml-app} app in {kib}\"]\n \n-Alternatively, you can use APIs like \n+Alternatively, you can use APIs like\n {ref}/get-trained-models.html[get trained models] and\n {ref}/delete-trained-models.html[delete trained models].\n \n \n [discrete]\n-[[move-between-clusters]]\n-== Moving a trained model between clusters\n-\n-It is a common scenario that the {ml} models are trained in a development or \n-test environment and then used in a production environment. In this case, you \n-need to move your trained model from one cluster to another. The trained model \n-APIs enable you to move your trained model between clusters. The following \n-description shows you the process step by step.\n-\n-1. (Optional) In the cluster where you trained the model, make the call below by \n-using the console in **Dev Tools** to get the configuration information of your \n-trained models.\n+[[export-import]]\n+== Exporting and importing models\n+\n+Models trained in Elasticsearch are portable and can be transferred between\n+clusters. This is particularly useful when models are trained in isolation from\n+the cluster where they are used for inference. The following instructions show\n+how to use https://curl.se/[`curl`] and https://stedolan.github.io/jq/[`jq`] to\n+export a model as JSON and import to another cluster.\n+\n+1. Given a model _name_, find the model _ID_. Using `curl` we can call the\n+{ref}/get-trained-models.html[Get Trained Model API] to list all models with\n+their IDs.\n +\n --\n-\n-[source,console]\n+[source, bash]\n --------------------------------------------------\n-GET _ml/trained_models/\n+curl -s -u elastic:changeme \\\n+  -X GET \"http://localhost:9200/_ml/trained_models\" \\\n+    | jq . -C \\\n+    | more\n --------------------------------------------------\n-// TEST[skip:setup kibana sample data]\n+// NOTCONSOLE\n \n-The API response contains the `model_id` of the trained models. Check the \n-`model_id` of the trained model you want to move, you need to add it to the API \n-call in the next step.\n---\n+If you wish to show just the model IDs available, use `jq` to select a subset.\n \n-2. Use the {ref}/get-trained-models.html[GET trained model API] to get the \n-trained model definition. You need to specify the following query parameters in \n-the call:\n-+\n---\n-* `for_export`: This parameter allows the model to be in an acceptable format to \n-be retrieved and then added to another cluster. Set it to `true`.\n-\n-* `include`: Set this to `definition` for the API to include the definition in \n-the response.\n-\n-* `decompress_definition`: It specifies in what format the included model \n-definition should be returned. Set it to `false` for getting a custom compressed \n-format. It is also valid to use the JSON format, but it is not optimal. As the \n-decompressed definition may be significantly larger, it is recommended to use \n-the compressed format.\n-   \n-The following call is an example to get the trained model definition. (Replace \n-`<model_id>` with the actual ID of the trained model.)\n-\n-[source,console]\n+[source, bash]\n --------------------------------------------------\n-GET _ml/trained_models/<model_id>?for_export=true&include=definition&decompress_definition=false\n+curl -s -u elastic:changeme \\\n+  -X GET \"http://localhost:9200/_ml/trained_models\" \\\n+    | jq -C -r '.trained_model_configs[].model_id'\n --------------------------------------------------\n-// TEST[skip:setup kibana sample data]\n-\n-The API response returns a `trained_model_configs` array that contains a \n-`compressed_definition` object and the analytics and inference configuration \n-information.\n---\n-\n-3. Copy the content of `trained_model_configs`.\n-\n-4. Use the {ref}/put-trained-models.html[Create trained model API] in the \n-cluster you want to move the trained model to. Paste the content of the \n-`trained_model_configs` to the request body of the API call. The API response \n-contains the model information with metadata.\n-\n-Your trained model is ready to be used as a <<ml-inference-processor,processor>> \n-in an ingest pipeline or as an <<ml-inference-aggregation,aggregation>>.\n-\n-[NOTE]\n---\n-The trained model definition can be so large that it may take a long time for a \n-computer clipboard to copy and paste it. It is recommended to do it \n-programmatically, for example via a bash script or via Client code. You can find \n-examples below.\n---\n-\n-The following Python snippet exports the trained model that you reference to a \n-JSON file:\n+// NOTCONSOLE\n \n-[source, py]\n+[source, bash]\n --------------------------------------------------\n-import json\n-from elasticsearch import Elasticsearch\n-from elasticsearch.client.ml import MlClient\n-es_client = Elasticsearch('URL to your ES instance', http_auth=(username, password), use_ssl=True)\n-ml_client = MlClient(es_client)\n-result = ml_client.get_trained_models(model_id='your-model-id', decompress_definition=False, include=definition)\n-compressed_df = result['trained_model_configs'][0]\n-with open('model_filename.json', 'w') as handle:\n-    handle.write(json.dumps(compressed_df))\n+flights1-1607953694065\n+flights0-1607953585123\n+lang_ident_model_1\n --------------------------------------------------\n // NOTCONSOLE\n \n+In our case, we would like to export the model with ID `flights1-1607953694065`.\n+--\n \n-The following Python snippet imports the model that stored in the JSON file to \n-a cluster:\n-\n-[source, py]\n+2. Using `curl` from the command line, again use the\n+{ref}/get-trained-models.html[Get Trained Model API] to export the entire model\n+definition and save it to a JSON file.\n++\n+--\n+[source, bash]\n --------------------------------------------------\n-import json\n-from elasticsearch import Elasticsearch\n-from elasticsearch.client.ml import MlClient\n-es_client = Elasticsearch(args.es, http_auth=(username, password), use_ssl=True, timeout=60)\n-ml_client = MlClient(es_client)\n-with open(filename, 'r') as handle:\n-  compressed_model = json.loads(handle.read())\n-for field in ('version', 'create_time', 'estimated_heap_memory_usage_bytes', 'estimated_operations', 'license_level', 'id','created_by'):\n-  if field in compressed_model:\n-    del compressed_model[field]\n-ml_client.put_trained_model(model_id=model_id, body=compressed_model)\n+curl -u elastic:changeme \\\n+  -X GET \"http://localhost:9200/_ml/trained_models/flights1-1607953694065?exclude_generated=true&include=definition&decompress_definition=false\" \\\n+    | jq '.trained_model_configs[0] | del(.model_id)' \\\n+    > flights1.json\n --------------------------------------------------\n // NOTCONSOLE\n \n+A few observations:\n \n-You can achieve the same by running a bash script. Populate the environment \n-variables:\n-\n-`ES_ADDRESS=\"https://username:password@elasticsearch-address\"`\n+* Exporting models requires using `curl` or a similar tool that can *stream*\n+the model over HTTP into a file. Using the https://www.elastic.co/guide/en/\n+kibana/current/console-kibana.html[Kibana Dev Tools console] will cause the\n+browser to become unresponsive due to the size of exported models.\n \n-`MODEL=\"my_model_name\"`\n+* Note the query parameters that are used during export. These are necessary to\n+export the model in a way that it can later be imported again and used for\n+inference.\n \n+* We need to unnest the JSON object by one level to extract just the model\n+definition. We also want to remove the existing model ID in order to not have\n+ID collisions when we import again. We do these steps using `jq` inline but\n+alternatively it can be done to the resulting JSON file after downloading using\n+`jq` or other tools.\n+--\n \n-Then run the script:\n-\n+3. Import the saved model using `curl` to upload the JSON file to the {ref}/\n+create-trained-models.html[Created Trained Model API]. When we specify the URL,\n+we can also set the model ID to something new using the last path part of the\n+URL.\n++\n+--\n [source, bash]\n --------------------------------------------------\n-curl -H 'Content-Type: application/json' -XPUT \"$ES_ADDRESS/_ml/inference/$MODEL\" -d@$MODEL.json\n+curl -u elastic:changeme \\\n+  -H 'Content-Type: application/json' \\\n+  -X PUT \"http://localhost:9200/_ml/trained_models/flights1-imported\" \\\n+  --data-binary @flights1.json\n --------------------------------------------------\n // NOTCONSOLE\n+--\n+\n+[NOTE]\n+--\n+* Models exported from the {ref}/get-trained-models.html[Get Trained Model API]\n+are limited in size by the https://www.elastic.co/guide/en/elasticsearch/\n+reference/current/modules-http.html#_http_settings[http.max_content_length]", "originalCommit": "727437b96c98fd423574441c9b44ac8bb46f728e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzU0NjYxOA==", "url": "https://github.com/elastic/stack-docs/pull/1498#discussion_r543546618", "bodyText": "Is ES the right word here or should it be cluster?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Elasticsearch is under load, or when model sizes are very large. Increasing\n          \n          \n            \n            cluster is under load, or when model sizes are very large. Increasing", "author": "lcawl", "createdAt": "2020-12-15T17:35:04Z", "path": "docs/en/stack/ml/df-analytics/ml-trained-models.asciidoc", "diffHunk": "@@ -13,168 +13,146 @@ information about this process, see <<ml-supervised-workflow>> and\n <<ml-inference>>.\n \n You can also supply trained models that are not created by {dfanalytics-job} but\n-adhere to the appropriate \n-https://github.com/elastic/ml-json-schemas[JSON schema]. If you want to use \n-these trained models in the {stack}, you must store them in {es} documents by \n+adhere to the appropriate\n+https://github.com/elastic/ml-json-schemas[JSON schema]. If you want to use\n+these trained models in the {stack}, you must store them in {es} documents by\n using the {ref}/put-trained-models.html[create trained models API].\n \n-In {kib}, you can view and manage your trained models within *{ml-app}* > *Data \n+In {kib}, you can view and manage your trained models within *{ml-app}* > *Data\n Frame Analytics*:\n \n [role=\"screenshot\"]\n image::images/trained-model-management.png[\"List of trained models in the {ml-app} app in {kib}\"]\n \n-Alternatively, you can use APIs like \n+Alternatively, you can use APIs like\n {ref}/get-trained-models.html[get trained models] and\n {ref}/delete-trained-models.html[delete trained models].\n \n \n [discrete]\n-[[move-between-clusters]]\n-== Moving a trained model between clusters\n-\n-It is a common scenario that the {ml} models are trained in a development or \n-test environment and then used in a production environment. In this case, you \n-need to move your trained model from one cluster to another. The trained model \n-APIs enable you to move your trained model between clusters. The following \n-description shows you the process step by step.\n-\n-1. (Optional) In the cluster where you trained the model, make the call below by \n-using the console in **Dev Tools** to get the configuration information of your \n-trained models.\n+[[export-import]]\n+== Exporting and importing models\n+\n+Models trained in Elasticsearch are portable and can be transferred between\n+clusters. This is particularly useful when models are trained in isolation from\n+the cluster where they are used for inference. The following instructions show\n+how to use https://curl.se/[`curl`] and https://stedolan.github.io/jq/[`jq`] to\n+export a model as JSON and import to another cluster.\n+\n+1. Given a model _name_, find the model _ID_. Using `curl` we can call the\n+{ref}/get-trained-models.html[Get Trained Model API] to list all models with\n+their IDs.\n +\n --\n-\n-[source,console]\n+[source, bash]\n --------------------------------------------------\n-GET _ml/trained_models/\n+curl -s -u elastic:changeme \\\n+  -X GET \"http://localhost:9200/_ml/trained_models\" \\\n+    | jq . -C \\\n+    | more\n --------------------------------------------------\n-// TEST[skip:setup kibana sample data]\n+// NOTCONSOLE\n \n-The API response contains the `model_id` of the trained models. Check the \n-`model_id` of the trained model you want to move, you need to add it to the API \n-call in the next step.\n---\n+If you wish to show just the model IDs available, use `jq` to select a subset.\n \n-2. Use the {ref}/get-trained-models.html[GET trained model API] to get the \n-trained model definition. You need to specify the following query parameters in \n-the call:\n-+\n---\n-* `for_export`: This parameter allows the model to be in an acceptable format to \n-be retrieved and then added to another cluster. Set it to `true`.\n-\n-* `include`: Set this to `definition` for the API to include the definition in \n-the response.\n-\n-* `decompress_definition`: It specifies in what format the included model \n-definition should be returned. Set it to `false` for getting a custom compressed \n-format. It is also valid to use the JSON format, but it is not optimal. As the \n-decompressed definition may be significantly larger, it is recommended to use \n-the compressed format.\n-   \n-The following call is an example to get the trained model definition. (Replace \n-`<model_id>` with the actual ID of the trained model.)\n-\n-[source,console]\n+[source, bash]\n --------------------------------------------------\n-GET _ml/trained_models/<model_id>?for_export=true&include=definition&decompress_definition=false\n+curl -s -u elastic:changeme \\\n+  -X GET \"http://localhost:9200/_ml/trained_models\" \\\n+    | jq -C -r '.trained_model_configs[].model_id'\n --------------------------------------------------\n-// TEST[skip:setup kibana sample data]\n-\n-The API response returns a `trained_model_configs` array that contains a \n-`compressed_definition` object and the analytics and inference configuration \n-information.\n---\n-\n-3. Copy the content of `trained_model_configs`.\n-\n-4. Use the {ref}/put-trained-models.html[Create trained model API] in the \n-cluster you want to move the trained model to. Paste the content of the \n-`trained_model_configs` to the request body of the API call. The API response \n-contains the model information with metadata.\n-\n-Your trained model is ready to be used as a <<ml-inference-processor,processor>> \n-in an ingest pipeline or as an <<ml-inference-aggregation,aggregation>>.\n-\n-[NOTE]\n---\n-The trained model definition can be so large that it may take a long time for a \n-computer clipboard to copy and paste it. It is recommended to do it \n-programmatically, for example via a bash script or via Client code. You can find \n-examples below.\n---\n-\n-The following Python snippet exports the trained model that you reference to a \n-JSON file:\n+// NOTCONSOLE\n \n-[source, py]\n+[source, bash]\n --------------------------------------------------\n-import json\n-from elasticsearch import Elasticsearch\n-from elasticsearch.client.ml import MlClient\n-es_client = Elasticsearch('URL to your ES instance', http_auth=(username, password), use_ssl=True)\n-ml_client = MlClient(es_client)\n-result = ml_client.get_trained_models(model_id='your-model-id', decompress_definition=False, include=definition)\n-compressed_df = result['trained_model_configs'][0]\n-with open('model_filename.json', 'w') as handle:\n-    handle.write(json.dumps(compressed_df))\n+flights1-1607953694065\n+flights0-1607953585123\n+lang_ident_model_1\n --------------------------------------------------\n // NOTCONSOLE\n \n+In our case, we would like to export the model with ID `flights1-1607953694065`.\n+--\n \n-The following Python snippet imports the model that stored in the JSON file to \n-a cluster:\n-\n-[source, py]\n+2. Using `curl` from the command line, again use the\n+{ref}/get-trained-models.html[Get Trained Model API] to export the entire model\n+definition and save it to a JSON file.\n++\n+--\n+[source, bash]\n --------------------------------------------------\n-import json\n-from elasticsearch import Elasticsearch\n-from elasticsearch.client.ml import MlClient\n-es_client = Elasticsearch(args.es, http_auth=(username, password), use_ssl=True, timeout=60)\n-ml_client = MlClient(es_client)\n-with open(filename, 'r') as handle:\n-  compressed_model = json.loads(handle.read())\n-for field in ('version', 'create_time', 'estimated_heap_memory_usage_bytes', 'estimated_operations', 'license_level', 'id','created_by'):\n-  if field in compressed_model:\n-    del compressed_model[field]\n-ml_client.put_trained_model(model_id=model_id, body=compressed_model)\n+curl -u elastic:changeme \\\n+  -X GET \"http://localhost:9200/_ml/trained_models/flights1-1607953694065?exclude_generated=true&include=definition&decompress_definition=false\" \\\n+    | jq '.trained_model_configs[0] | del(.model_id)' \\\n+    > flights1.json\n --------------------------------------------------\n // NOTCONSOLE\n \n+A few observations:\n \n-You can achieve the same by running a bash script. Populate the environment \n-variables:\n-\n-`ES_ADDRESS=\"https://username:password@elasticsearch-address\"`\n+* Exporting models requires using `curl` or a similar tool that can *stream*\n+the model over HTTP into a file. Using the https://www.elastic.co/guide/en/\n+kibana/current/console-kibana.html[Kibana Dev Tools console] will cause the\n+browser to become unresponsive due to the size of exported models.\n \n-`MODEL=\"my_model_name\"`\n+* Note the query parameters that are used during export. These are necessary to\n+export the model in a way that it can later be imported again and used for\n+inference.\n \n+* We need to unnest the JSON object by one level to extract just the model\n+definition. We also want to remove the existing model ID in order to not have\n+ID collisions when we import again. We do these steps using `jq` inline but\n+alternatively it can be done to the resulting JSON file after downloading using\n+`jq` or other tools.\n+--\n \n-Then run the script:\n-\n+3. Import the saved model using `curl` to upload the JSON file to the {ref}/\n+create-trained-models.html[Created Trained Model API]. When we specify the URL,\n+we can also set the model ID to something new using the last path part of the\n+URL.\n++\n+--\n [source, bash]\n --------------------------------------------------\n-curl -H 'Content-Type: application/json' -XPUT \"$ES_ADDRESS/_ml/inference/$MODEL\" -d@$MODEL.json\n+curl -u elastic:changeme \\\n+  -H 'Content-Type: application/json' \\\n+  -X PUT \"http://localhost:9200/_ml/trained_models/flights1-imported\" \\\n+  --data-binary @flights1.json\n --------------------------------------------------\n // NOTCONSOLE\n+--\n+\n+[NOTE]\n+--\n+* Models exported from the {ref}/get-trained-models.html[Get Trained Model API]\n+are limited in size by the https://www.elastic.co/guide/en/elasticsearch/\n+reference/current/modules-http.html#_http_settings[http.max_content_length]\n+global configuration value in Elasticsearch. The default value is `100mb` and\n+may need to be increased depending on the size of model being exported.\n+\n+* Connection timeouts can occur when either the source or destination\n+Elasticsearch is under load, or when model sizes are very large. Increasing", "originalCommit": "727437b96c98fd423574441c9b44ac8bb46f728e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzU0NzM3NQ==", "url": "https://github.com/elastic/stack-docs/pull/1498#discussion_r543547375", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The example uses Python to train, save and import the model, however, you can\n          \n          \n            \n            The example uses Python to train, save and import the model. However, you can", "author": "lcawl", "createdAt": "2020-12-15T17:36:08Z", "path": "docs/en/stack/ml/df-analytics/ml-trained-models.asciidoc", "diffHunk": "@@ -13,168 +13,146 @@ information about this process, see <<ml-supervised-workflow>> and\n <<ml-inference>>.\n \n You can also supply trained models that are not created by {dfanalytics-job} but\n-adhere to the appropriate \n-https://github.com/elastic/ml-json-schemas[JSON schema]. If you want to use \n-these trained models in the {stack}, you must store them in {es} documents by \n+adhere to the appropriate\n+https://github.com/elastic/ml-json-schemas[JSON schema]. If you want to use\n+these trained models in the {stack}, you must store them in {es} documents by\n using the {ref}/put-trained-models.html[create trained models API].\n \n-In {kib}, you can view and manage your trained models within *{ml-app}* > *Data \n+In {kib}, you can view and manage your trained models within *{ml-app}* > *Data\n Frame Analytics*:\n \n [role=\"screenshot\"]\n image::images/trained-model-management.png[\"List of trained models in the {ml-app} app in {kib}\"]\n \n-Alternatively, you can use APIs like \n+Alternatively, you can use APIs like\n {ref}/get-trained-models.html[get trained models] and\n {ref}/delete-trained-models.html[delete trained models].\n \n \n [discrete]\n-[[move-between-clusters]]\n-== Moving a trained model between clusters\n-\n-It is a common scenario that the {ml} models are trained in a development or \n-test environment and then used in a production environment. In this case, you \n-need to move your trained model from one cluster to another. The trained model \n-APIs enable you to move your trained model between clusters. The following \n-description shows you the process step by step.\n-\n-1. (Optional) In the cluster where you trained the model, make the call below by \n-using the console in **Dev Tools** to get the configuration information of your \n-trained models.\n+[[export-import]]\n+== Exporting and importing models\n+\n+Models trained in Elasticsearch are portable and can be transferred between\n+clusters. This is particularly useful when models are trained in isolation from\n+the cluster where they are used for inference. The following instructions show\n+how to use https://curl.se/[`curl`] and https://stedolan.github.io/jq/[`jq`] to\n+export a model as JSON and import to another cluster.\n+\n+1. Given a model _name_, find the model _ID_. Using `curl` we can call the\n+{ref}/get-trained-models.html[Get Trained Model API] to list all models with\n+their IDs.\n +\n --\n-\n-[source,console]\n+[source, bash]\n --------------------------------------------------\n-GET _ml/trained_models/\n+curl -s -u elastic:changeme \\\n+  -X GET \"http://localhost:9200/_ml/trained_models\" \\\n+    | jq . -C \\\n+    | more\n --------------------------------------------------\n-// TEST[skip:setup kibana sample data]\n+// NOTCONSOLE\n \n-The API response contains the `model_id` of the trained models. Check the \n-`model_id` of the trained model you want to move, you need to add it to the API \n-call in the next step.\n---\n+If you wish to show just the model IDs available, use `jq` to select a subset.\n \n-2. Use the {ref}/get-trained-models.html[GET trained model API] to get the \n-trained model definition. You need to specify the following query parameters in \n-the call:\n-+\n---\n-* `for_export`: This parameter allows the model to be in an acceptable format to \n-be retrieved and then added to another cluster. Set it to `true`.\n-\n-* `include`: Set this to `definition` for the API to include the definition in \n-the response.\n-\n-* `decompress_definition`: It specifies in what format the included model \n-definition should be returned. Set it to `false` for getting a custom compressed \n-format. It is also valid to use the JSON format, but it is not optimal. As the \n-decompressed definition may be significantly larger, it is recommended to use \n-the compressed format.\n-   \n-The following call is an example to get the trained model definition. (Replace \n-`<model_id>` with the actual ID of the trained model.)\n-\n-[source,console]\n+[source, bash]\n --------------------------------------------------\n-GET _ml/trained_models/<model_id>?for_export=true&include=definition&decompress_definition=false\n+curl -s -u elastic:changeme \\\n+  -X GET \"http://localhost:9200/_ml/trained_models\" \\\n+    | jq -C -r '.trained_model_configs[].model_id'\n --------------------------------------------------\n-// TEST[skip:setup kibana sample data]\n-\n-The API response returns a `trained_model_configs` array that contains a \n-`compressed_definition` object and the analytics and inference configuration \n-information.\n---\n-\n-3. Copy the content of `trained_model_configs`.\n-\n-4. Use the {ref}/put-trained-models.html[Create trained model API] in the \n-cluster you want to move the trained model to. Paste the content of the \n-`trained_model_configs` to the request body of the API call. The API response \n-contains the model information with metadata.\n-\n-Your trained model is ready to be used as a <<ml-inference-processor,processor>> \n-in an ingest pipeline or as an <<ml-inference-aggregation,aggregation>>.\n-\n-[NOTE]\n---\n-The trained model definition can be so large that it may take a long time for a \n-computer clipboard to copy and paste it. It is recommended to do it \n-programmatically, for example via a bash script or via Client code. You can find \n-examples below.\n---\n-\n-The following Python snippet exports the trained model that you reference to a \n-JSON file:\n+// NOTCONSOLE\n \n-[source, py]\n+[source, bash]\n --------------------------------------------------\n-import json\n-from elasticsearch import Elasticsearch\n-from elasticsearch.client.ml import MlClient\n-es_client = Elasticsearch('URL to your ES instance', http_auth=(username, password), use_ssl=True)\n-ml_client = MlClient(es_client)\n-result = ml_client.get_trained_models(model_id='your-model-id', decompress_definition=False, include=definition)\n-compressed_df = result['trained_model_configs'][0]\n-with open('model_filename.json', 'w') as handle:\n-    handle.write(json.dumps(compressed_df))\n+flights1-1607953694065\n+flights0-1607953585123\n+lang_ident_model_1\n --------------------------------------------------\n // NOTCONSOLE\n \n+In our case, we would like to export the model with ID `flights1-1607953694065`.\n+--\n \n-The following Python snippet imports the model that stored in the JSON file to \n-a cluster:\n-\n-[source, py]\n+2. Using `curl` from the command line, again use the\n+{ref}/get-trained-models.html[Get Trained Model API] to export the entire model\n+definition and save it to a JSON file.\n++\n+--\n+[source, bash]\n --------------------------------------------------\n-import json\n-from elasticsearch import Elasticsearch\n-from elasticsearch.client.ml import MlClient\n-es_client = Elasticsearch(args.es, http_auth=(username, password), use_ssl=True, timeout=60)\n-ml_client = MlClient(es_client)\n-with open(filename, 'r') as handle:\n-  compressed_model = json.loads(handle.read())\n-for field in ('version', 'create_time', 'estimated_heap_memory_usage_bytes', 'estimated_operations', 'license_level', 'id','created_by'):\n-  if field in compressed_model:\n-    del compressed_model[field]\n-ml_client.put_trained_model(model_id=model_id, body=compressed_model)\n+curl -u elastic:changeme \\\n+  -X GET \"http://localhost:9200/_ml/trained_models/flights1-1607953694065?exclude_generated=true&include=definition&decompress_definition=false\" \\\n+    | jq '.trained_model_configs[0] | del(.model_id)' \\\n+    > flights1.json\n --------------------------------------------------\n // NOTCONSOLE\n \n+A few observations:\n \n-You can achieve the same by running a bash script. Populate the environment \n-variables:\n-\n-`ES_ADDRESS=\"https://username:password@elasticsearch-address\"`\n+* Exporting models requires using `curl` or a similar tool that can *stream*\n+the model over HTTP into a file. Using the https://www.elastic.co/guide/en/\n+kibana/current/console-kibana.html[Kibana Dev Tools console] will cause the\n+browser to become unresponsive due to the size of exported models.\n \n-`MODEL=\"my_model_name\"`\n+* Note the query parameters that are used during export. These are necessary to\n+export the model in a way that it can later be imported again and used for\n+inference.\n \n+* We need to unnest the JSON object by one level to extract just the model\n+definition. We also want to remove the existing model ID in order to not have\n+ID collisions when we import again. We do these steps using `jq` inline but\n+alternatively it can be done to the resulting JSON file after downloading using\n+`jq` or other tools.\n+--\n \n-Then run the script:\n-\n+3. Import the saved model using `curl` to upload the JSON file to the {ref}/\n+create-trained-models.html[Created Trained Model API]. When we specify the URL,\n+we can also set the model ID to something new using the last path part of the\n+URL.\n++\n+--\n [source, bash]\n --------------------------------------------------\n-curl -H 'Content-Type: application/json' -XPUT \"$ES_ADDRESS/_ml/inference/$MODEL\" -d@$MODEL.json\n+curl -u elastic:changeme \\\n+  -H 'Content-Type: application/json' \\\n+  -X PUT \"http://localhost:9200/_ml/trained_models/flights1-imported\" \\\n+  --data-binary @flights1.json\n --------------------------------------------------\n // NOTCONSOLE\n+--\n+\n+[NOTE]\n+--\n+* Models exported from the {ref}/get-trained-models.html[Get Trained Model API]\n+are limited in size by the https://www.elastic.co/guide/en/elasticsearch/\n+reference/current/modules-http.html#_http_settings[http.max_content_length]\n+global configuration value in Elasticsearch. The default value is `100mb` and\n+may need to be increased depending on the size of model being exported.\n+\n+* Connection timeouts can occur when either the source or destination\n+Elasticsearch is under load, or when model sizes are very large. Increasing\n+https://ec.haxx.se/usingcurl/usingcurl-timeouts[timeout configurations] for\n+`curl` (e.g. `curl --max-time 600`) or your client of choice will help\n+alleviate the problem. In rare cases you may need to reduce load on the\n+Elasticsearch cluster, for example by adding nodes.\n+--\n \n \n [discrete]\n-[[move-trained-model-to-es]]\n-== Moving a model to the {stack}\n+[[import-external-model-to-es]]\n+== Importing an external model to the {stack}\n \n-It is possible to add a model to your {es} cluster even if the model is not \n+It is possible to import a model to your {es} cluster even if the model is not\n trained by Elastic {dfanalytics}.\n \n-You can find an example of training a model, then adding it to {es} by using \n-eland \n-https://eland.readthedocs.io/en/latest/examples/introduction_to_eland_webinar.html#Machine-Learning-Demo[in eland docs].\n-The example uses Python to train and move the model, however, you can use any \n-Client as long as the format of your trained model meets \n-https://github.com/elastic/ml-json-schemas[the required schema].\n-\n+You can find an example of training a model, then importing it to {es} with\n+`eland` in the\n+https://eland.readthedocs.io/en/latest/examples/introduction_to_eland_webinar.html#Machine-Learning-Demo[eland machine learning demo].\n+The example uses Python to train, save and import the model, however, you can", "originalCommit": "727437b96c98fd423574441c9b44ac8bb46f728e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzU0NzY0Mw==", "url": "https://github.com/elastic/stack-docs/pull/1498#discussion_r543547643", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            use any Client as long as the model conforms to the https://github.com/elastic/\n          \n          \n            \n            use any client as long as the model conforms to the https://github.com/elastic/", "author": "lcawl", "createdAt": "2020-12-15T17:36:31Z", "path": "docs/en/stack/ml/df-analytics/ml-trained-models.asciidoc", "diffHunk": "@@ -13,168 +13,146 @@ information about this process, see <<ml-supervised-workflow>> and\n <<ml-inference>>.\n \n You can also supply trained models that are not created by {dfanalytics-job} but\n-adhere to the appropriate \n-https://github.com/elastic/ml-json-schemas[JSON schema]. If you want to use \n-these trained models in the {stack}, you must store them in {es} documents by \n+adhere to the appropriate\n+https://github.com/elastic/ml-json-schemas[JSON schema]. If you want to use\n+these trained models in the {stack}, you must store them in {es} documents by\n using the {ref}/put-trained-models.html[create trained models API].\n \n-In {kib}, you can view and manage your trained models within *{ml-app}* > *Data \n+In {kib}, you can view and manage your trained models within *{ml-app}* > *Data\n Frame Analytics*:\n \n [role=\"screenshot\"]\n image::images/trained-model-management.png[\"List of trained models in the {ml-app} app in {kib}\"]\n \n-Alternatively, you can use APIs like \n+Alternatively, you can use APIs like\n {ref}/get-trained-models.html[get trained models] and\n {ref}/delete-trained-models.html[delete trained models].\n \n \n [discrete]\n-[[move-between-clusters]]\n-== Moving a trained model between clusters\n-\n-It is a common scenario that the {ml} models are trained in a development or \n-test environment and then used in a production environment. In this case, you \n-need to move your trained model from one cluster to another. The trained model \n-APIs enable you to move your trained model between clusters. The following \n-description shows you the process step by step.\n-\n-1. (Optional) In the cluster where you trained the model, make the call below by \n-using the console in **Dev Tools** to get the configuration information of your \n-trained models.\n+[[export-import]]\n+== Exporting and importing models\n+\n+Models trained in Elasticsearch are portable and can be transferred between\n+clusters. This is particularly useful when models are trained in isolation from\n+the cluster where they are used for inference. The following instructions show\n+how to use https://curl.se/[`curl`] and https://stedolan.github.io/jq/[`jq`] to\n+export a model as JSON and import to another cluster.\n+\n+1. Given a model _name_, find the model _ID_. Using `curl` we can call the\n+{ref}/get-trained-models.html[Get Trained Model API] to list all models with\n+their IDs.\n +\n --\n-\n-[source,console]\n+[source, bash]\n --------------------------------------------------\n-GET _ml/trained_models/\n+curl -s -u elastic:changeme \\\n+  -X GET \"http://localhost:9200/_ml/trained_models\" \\\n+    | jq . -C \\\n+    | more\n --------------------------------------------------\n-// TEST[skip:setup kibana sample data]\n+// NOTCONSOLE\n \n-The API response contains the `model_id` of the trained models. Check the \n-`model_id` of the trained model you want to move, you need to add it to the API \n-call in the next step.\n---\n+If you wish to show just the model IDs available, use `jq` to select a subset.\n \n-2. Use the {ref}/get-trained-models.html[GET trained model API] to get the \n-trained model definition. You need to specify the following query parameters in \n-the call:\n-+\n---\n-* `for_export`: This parameter allows the model to be in an acceptable format to \n-be retrieved and then added to another cluster. Set it to `true`.\n-\n-* `include`: Set this to `definition` for the API to include the definition in \n-the response.\n-\n-* `decompress_definition`: It specifies in what format the included model \n-definition should be returned. Set it to `false` for getting a custom compressed \n-format. It is also valid to use the JSON format, but it is not optimal. As the \n-decompressed definition may be significantly larger, it is recommended to use \n-the compressed format.\n-   \n-The following call is an example to get the trained model definition. (Replace \n-`<model_id>` with the actual ID of the trained model.)\n-\n-[source,console]\n+[source, bash]\n --------------------------------------------------\n-GET _ml/trained_models/<model_id>?for_export=true&include=definition&decompress_definition=false\n+curl -s -u elastic:changeme \\\n+  -X GET \"http://localhost:9200/_ml/trained_models\" \\\n+    | jq -C -r '.trained_model_configs[].model_id'\n --------------------------------------------------\n-// TEST[skip:setup kibana sample data]\n-\n-The API response returns a `trained_model_configs` array that contains a \n-`compressed_definition` object and the analytics and inference configuration \n-information.\n---\n-\n-3. Copy the content of `trained_model_configs`.\n-\n-4. Use the {ref}/put-trained-models.html[Create trained model API] in the \n-cluster you want to move the trained model to. Paste the content of the \n-`trained_model_configs` to the request body of the API call. The API response \n-contains the model information with metadata.\n-\n-Your trained model is ready to be used as a <<ml-inference-processor,processor>> \n-in an ingest pipeline or as an <<ml-inference-aggregation,aggregation>>.\n-\n-[NOTE]\n---\n-The trained model definition can be so large that it may take a long time for a \n-computer clipboard to copy and paste it. It is recommended to do it \n-programmatically, for example via a bash script or via Client code. You can find \n-examples below.\n---\n-\n-The following Python snippet exports the trained model that you reference to a \n-JSON file:\n+// NOTCONSOLE\n \n-[source, py]\n+[source, bash]\n --------------------------------------------------\n-import json\n-from elasticsearch import Elasticsearch\n-from elasticsearch.client.ml import MlClient\n-es_client = Elasticsearch('URL to your ES instance', http_auth=(username, password), use_ssl=True)\n-ml_client = MlClient(es_client)\n-result = ml_client.get_trained_models(model_id='your-model-id', decompress_definition=False, include=definition)\n-compressed_df = result['trained_model_configs'][0]\n-with open('model_filename.json', 'w') as handle:\n-    handle.write(json.dumps(compressed_df))\n+flights1-1607953694065\n+flights0-1607953585123\n+lang_ident_model_1\n --------------------------------------------------\n // NOTCONSOLE\n \n+In our case, we would like to export the model with ID `flights1-1607953694065`.\n+--\n \n-The following Python snippet imports the model that stored in the JSON file to \n-a cluster:\n-\n-[source, py]\n+2. Using `curl` from the command line, again use the\n+{ref}/get-trained-models.html[Get Trained Model API] to export the entire model\n+definition and save it to a JSON file.\n++\n+--\n+[source, bash]\n --------------------------------------------------\n-import json\n-from elasticsearch import Elasticsearch\n-from elasticsearch.client.ml import MlClient\n-es_client = Elasticsearch(args.es, http_auth=(username, password), use_ssl=True, timeout=60)\n-ml_client = MlClient(es_client)\n-with open(filename, 'r') as handle:\n-  compressed_model = json.loads(handle.read())\n-for field in ('version', 'create_time', 'estimated_heap_memory_usage_bytes', 'estimated_operations', 'license_level', 'id','created_by'):\n-  if field in compressed_model:\n-    del compressed_model[field]\n-ml_client.put_trained_model(model_id=model_id, body=compressed_model)\n+curl -u elastic:changeme \\\n+  -X GET \"http://localhost:9200/_ml/trained_models/flights1-1607953694065?exclude_generated=true&include=definition&decompress_definition=false\" \\\n+    | jq '.trained_model_configs[0] | del(.model_id)' \\\n+    > flights1.json\n --------------------------------------------------\n // NOTCONSOLE\n \n+A few observations:\n \n-You can achieve the same by running a bash script. Populate the environment \n-variables:\n-\n-`ES_ADDRESS=\"https://username:password@elasticsearch-address\"`\n+* Exporting models requires using `curl` or a similar tool that can *stream*\n+the model over HTTP into a file. Using the https://www.elastic.co/guide/en/\n+kibana/current/console-kibana.html[Kibana Dev Tools console] will cause the\n+browser to become unresponsive due to the size of exported models.\n \n-`MODEL=\"my_model_name\"`\n+* Note the query parameters that are used during export. These are necessary to\n+export the model in a way that it can later be imported again and used for\n+inference.\n \n+* We need to unnest the JSON object by one level to extract just the model\n+definition. We also want to remove the existing model ID in order to not have\n+ID collisions when we import again. We do these steps using `jq` inline but\n+alternatively it can be done to the resulting JSON file after downloading using\n+`jq` or other tools.\n+--\n \n-Then run the script:\n-\n+3. Import the saved model using `curl` to upload the JSON file to the {ref}/\n+create-trained-models.html[Created Trained Model API]. When we specify the URL,\n+we can also set the model ID to something new using the last path part of the\n+URL.\n++\n+--\n [source, bash]\n --------------------------------------------------\n-curl -H 'Content-Type: application/json' -XPUT \"$ES_ADDRESS/_ml/inference/$MODEL\" -d@$MODEL.json\n+curl -u elastic:changeme \\\n+  -H 'Content-Type: application/json' \\\n+  -X PUT \"http://localhost:9200/_ml/trained_models/flights1-imported\" \\\n+  --data-binary @flights1.json\n --------------------------------------------------\n // NOTCONSOLE\n+--\n+\n+[NOTE]\n+--\n+* Models exported from the {ref}/get-trained-models.html[Get Trained Model API]\n+are limited in size by the https://www.elastic.co/guide/en/elasticsearch/\n+reference/current/modules-http.html#_http_settings[http.max_content_length]\n+global configuration value in Elasticsearch. The default value is `100mb` and\n+may need to be increased depending on the size of model being exported.\n+\n+* Connection timeouts can occur when either the source or destination\n+Elasticsearch is under load, or when model sizes are very large. Increasing\n+https://ec.haxx.se/usingcurl/usingcurl-timeouts[timeout configurations] for\n+`curl` (e.g. `curl --max-time 600`) or your client of choice will help\n+alleviate the problem. In rare cases you may need to reduce load on the\n+Elasticsearch cluster, for example by adding nodes.\n+--\n \n \n [discrete]\n-[[move-trained-model-to-es]]\n-== Moving a model to the {stack}\n+[[import-external-model-to-es]]\n+== Importing an external model to the {stack}\n \n-It is possible to add a model to your {es} cluster even if the model is not \n+It is possible to import a model to your {es} cluster even if the model is not\n trained by Elastic {dfanalytics}.\n \n-You can find an example of training a model, then adding it to {es} by using \n-eland \n-https://eland.readthedocs.io/en/latest/examples/introduction_to_eland_webinar.html#Machine-Learning-Demo[in eland docs].\n-The example uses Python to train and move the model, however, you can use any \n-Client as long as the format of your trained model meets \n-https://github.com/elastic/ml-json-schemas[the required schema].\n-\n+You can find an example of training a model, then importing it to {es} with\n+`eland` in the\n+https://eland.readthedocs.io/en/latest/examples/introduction_to_eland_webinar.html#Machine-Learning-Demo[eland machine learning demo].\n+The example uses Python to train, save and import the model, however, you can\n+use any Client as long as the model conforms to the https://github.com/elastic/", "originalCommit": "727437b96c98fd423574441c9b44ac8bb46f728e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "e842528f1560c2da9a94e5d09d53cd5050d84d09", "url": "https://github.com/elastic/stack-docs/commit/e842528f1560c2da9a94e5d09d53cd5050d84d09", "message": "Apply suggestions from code review\n\nCo-authored-by: Lisa Cawley <lcawley@elastic.co>", "committedDate": "2020-12-16T12:05:07Z", "type": "commit"}, {"oid": "c8443f5c178d6a98a75e13b5864a87fc8e87d8e1", "url": "https://github.com/elastic/stack-docs/commit/c8443f5c178d6a98a75e13b5864a87fc8e87d8e1", "message": "Updates username and password placeholders\n\nWe need to show username and password, how they are used, but this does\r\nso with more generic placeholders.", "committedDate": "2020-12-17T09:32:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTkwODIwMg==", "url": "https://github.com/elastic/stack-docs/pull/1498#discussion_r545908202", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            the model over HTTP into a file. If you use the {kib} Console, \n          \n          \n            \n            the model over HTTP into a file. If you use the {kib} Console, the", "author": "lcawl", "createdAt": "2020-12-18T15:26:49Z", "path": "docs/en/stack/ml/df-analytics/ml-trained-models.asciidoc", "diffHunk": "@@ -13,168 +13,145 @@ information about this process, see <<ml-supervised-workflow>> and\n <<ml-inference>>.\n \n You can also supply trained models that are not created by {dfanalytics-job} but\n-adhere to the appropriate \n-https://github.com/elastic/ml-json-schemas[JSON schema]. If you want to use \n-these trained models in the {stack}, you must store them in {es} documents by \n+adhere to the appropriate\n+https://github.com/elastic/ml-json-schemas[JSON schema]. If you want to use\n+these trained models in the {stack}, you must store them in {es} documents by\n using the {ref}/put-trained-models.html[create trained models API].\n \n-In {kib}, you can view and manage your trained models within *{ml-app}* > *Data \n+In {kib}, you can view and manage your trained models within *{ml-app}* > *Data\n Frame Analytics*:\n \n [role=\"screenshot\"]\n image::images/trained-model-management.png[\"List of trained models in the {ml-app} app in {kib}\"]\n \n-Alternatively, you can use APIs like \n+Alternatively, you can use APIs like\n {ref}/get-trained-models.html[get trained models] and\n {ref}/delete-trained-models.html[delete trained models].\n \n \n [discrete]\n-[[move-between-clusters]]\n-== Moving a trained model between clusters\n-\n-It is a common scenario that the {ml} models are trained in a development or \n-test environment and then used in a production environment. In this case, you \n-need to move your trained model from one cluster to another. The trained model \n-APIs enable you to move your trained model between clusters. The following \n-description shows you the process step by step.\n-\n-1. (Optional) In the cluster where you trained the model, make the call below by \n-using the console in **Dev Tools** to get the configuration information of your \n-trained models.\n+[[export-import]]\n+== Exporting and importing models\n+\n+Models trained in Elasticsearch are portable and can be transferred between\n+clusters. This is particularly useful when models are trained in isolation from\n+the cluster where they are used for inference. The following instructions show\n+how to use https://curl.se/[`curl`] and https://stedolan.github.io/jq/[`jq`] to\n+export a model as JSON and import it to another cluster.\n+\n+1. Given a model _name_, find the model _ID_. You can use `curl` to call the\n+{ref}/get-trained-models.html[get trained model API] to list all models with\n+their IDs.\n +\n --\n-\n-[source,console]\n+[source, bash]\n --------------------------------------------------\n-GET _ml/trained_models/\n+curl -s -u username:password \\\n+  -X GET \"http://localhost:9200/_ml/trained_models\" \\\n+    | jq . -C \\\n+    | more\n --------------------------------------------------\n-// TEST[skip:setup kibana sample data]\n+// NOTCONSOLE\n \n-The API response contains the `model_id` of the trained models. Check the \n-`model_id` of the trained model you want to move, you need to add it to the API \n-call in the next step.\n---\n+If you want to show just the model IDs available, use `jq` to select a subset.\n \n-2. Use the {ref}/get-trained-models.html[GET trained model API] to get the \n-trained model definition. You need to specify the following query parameters in \n-the call:\n-+\n---\n-* `for_export`: This parameter allows the model to be in an acceptable format to \n-be retrieved and then added to another cluster. Set it to `true`.\n-\n-* `include`: Set this to `definition` for the API to include the definition in \n-the response.\n-\n-* `decompress_definition`: It specifies in what format the included model \n-definition should be returned. Set it to `false` for getting a custom compressed \n-format. It is also valid to use the JSON format, but it is not optimal. As the \n-decompressed definition may be significantly larger, it is recommended to use \n-the compressed format.\n-   \n-The following call is an example to get the trained model definition. (Replace \n-`<model_id>` with the actual ID of the trained model.)\n-\n-[source,console]\n+[source, bash]\n --------------------------------------------------\n-GET _ml/trained_models/<model_id>?for_export=true&include=definition&decompress_definition=false\n+curl -s -u username:password \\\n+  -X GET \"http://localhost:9200/_ml/trained_models\" \\\n+    | jq -C -r '.trained_model_configs[].model_id'\n --------------------------------------------------\n-// TEST[skip:setup kibana sample data]\n-\n-The API response returns a `trained_model_configs` array that contains a \n-`compressed_definition` object and the analytics and inference configuration \n-information.\n---\n-\n-3. Copy the content of `trained_model_configs`.\n-\n-4. Use the {ref}/put-trained-models.html[Create trained model API] in the \n-cluster you want to move the trained model to. Paste the content of the \n-`trained_model_configs` to the request body of the API call. The API response \n-contains the model information with metadata.\n-\n-Your trained model is ready to be used as a <<ml-inference-processor,processor>> \n-in an ingest pipeline or as an <<ml-inference-aggregation,aggregation>>.\n-\n-[NOTE]\n---\n-The trained model definition can be so large that it may take a long time for a \n-computer clipboard to copy and paste it. It is recommended to do it \n-programmatically, for example via a bash script or via Client code. You can find \n-examples below.\n---\n-\n-The following Python snippet exports the trained model that you reference to a \n-JSON file:\n+// NOTCONSOLE\n \n-[source, py]\n+[source, bash]\n --------------------------------------------------\n-import json\n-from elasticsearch import Elasticsearch\n-from elasticsearch.client.ml import MlClient\n-es_client = Elasticsearch('URL to your ES instance', http_auth=(username, password), use_ssl=True)\n-ml_client = MlClient(es_client)\n-result = ml_client.get_trained_models(model_id='your-model-id', decompress_definition=False, include=definition)\n-compressed_df = result['trained_model_configs'][0]\n-with open('model_filename.json', 'w') as handle:\n-    handle.write(json.dumps(compressed_df))\n+flights1-1607953694065\n+flights0-1607953585123\n+lang_ident_model_1\n --------------------------------------------------\n // NOTCONSOLE\n \n+In this example, you are exporting the model with ID `flights1-1607953694065`.\n+--\n \n-The following Python snippet imports the model that stored in the JSON file to \n-a cluster:\n-\n-[source, py]\n+2. Using `curl` from the command line, again use the\n+{ref}/get-trained-models.html[get trained models API] to export the entire model\n+definition and save it to a JSON file.\n++\n+--\n+[source, bash]\n --------------------------------------------------\n-import json\n-from elasticsearch import Elasticsearch\n-from elasticsearch.client.ml import MlClient\n-es_client = Elasticsearch(args.es, http_auth=(username, password), use_ssl=True, timeout=60)\n-ml_client = MlClient(es_client)\n-with open(filename, 'r') as handle:\n-  compressed_model = json.loads(handle.read())\n-for field in ('version', 'create_time', 'estimated_heap_memory_usage_bytes', 'estimated_operations', 'license_level', 'id','created_by'):\n-  if field in compressed_model:\n-    del compressed_model[field]\n-ml_client.put_trained_model(model_id=model_id, body=compressed_model)\n+curl -u username:password \\\n+  -X GET \"http://localhost:9200/_ml/trained_models/flights1-1607953694065?exclude_generated=true&include=definition&decompress_definition=false\" \\\n+    | jq '.trained_model_configs[0] | del(.model_id)' \\\n+    > flights1.json\n --------------------------------------------------\n // NOTCONSOLE\n \n+A few observations:\n \n-You can achieve the same by running a bash script. Populate the environment \n-variables:\n-\n-`ES_ADDRESS=\"https://username:password@elasticsearch-address\"`\n+* Exporting models requires using `curl` or a similar tool that can *stream*\n+the model over HTTP into a file. If you use the {kib} Console, ", "originalCommit": "c8443f5c178d6a98a75e13b5864a87fc8e87d8e1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTkwOTE3Mg==", "url": "https://github.com/elastic/stack-docs/pull/1498#discussion_r545909172", "bodyText": "This URL is failing in the output, I think maybe it has to be all on one line:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            3. Import the saved model using `curl` to upload the JSON file to the {ref}/\n          \n          \n            \n            3. Import the saved model using `curl` to upload the JSON file to the", "author": "lcawl", "createdAt": "2020-12-18T15:28:23Z", "path": "docs/en/stack/ml/df-analytics/ml-trained-models.asciidoc", "diffHunk": "@@ -13,168 +13,145 @@ information about this process, see <<ml-supervised-workflow>> and\n <<ml-inference>>.\n \n You can also supply trained models that are not created by {dfanalytics-job} but\n-adhere to the appropriate \n-https://github.com/elastic/ml-json-schemas[JSON schema]. If you want to use \n-these trained models in the {stack}, you must store them in {es} documents by \n+adhere to the appropriate\n+https://github.com/elastic/ml-json-schemas[JSON schema]. If you want to use\n+these trained models in the {stack}, you must store them in {es} documents by\n using the {ref}/put-trained-models.html[create trained models API].\n \n-In {kib}, you can view and manage your trained models within *{ml-app}* > *Data \n+In {kib}, you can view and manage your trained models within *{ml-app}* > *Data\n Frame Analytics*:\n \n [role=\"screenshot\"]\n image::images/trained-model-management.png[\"List of trained models in the {ml-app} app in {kib}\"]\n \n-Alternatively, you can use APIs like \n+Alternatively, you can use APIs like\n {ref}/get-trained-models.html[get trained models] and\n {ref}/delete-trained-models.html[delete trained models].\n \n \n [discrete]\n-[[move-between-clusters]]\n-== Moving a trained model between clusters\n-\n-It is a common scenario that the {ml} models are trained in a development or \n-test environment and then used in a production environment. In this case, you \n-need to move your trained model from one cluster to another. The trained model \n-APIs enable you to move your trained model between clusters. The following \n-description shows you the process step by step.\n-\n-1. (Optional) In the cluster where you trained the model, make the call below by \n-using the console in **Dev Tools** to get the configuration information of your \n-trained models.\n+[[export-import]]\n+== Exporting and importing models\n+\n+Models trained in Elasticsearch are portable and can be transferred between\n+clusters. This is particularly useful when models are trained in isolation from\n+the cluster where they are used for inference. The following instructions show\n+how to use https://curl.se/[`curl`] and https://stedolan.github.io/jq/[`jq`] to\n+export a model as JSON and import it to another cluster.\n+\n+1. Given a model _name_, find the model _ID_. You can use `curl` to call the\n+{ref}/get-trained-models.html[get trained model API] to list all models with\n+their IDs.\n +\n --\n-\n-[source,console]\n+[source, bash]\n --------------------------------------------------\n-GET _ml/trained_models/\n+curl -s -u username:password \\\n+  -X GET \"http://localhost:9200/_ml/trained_models\" \\\n+    | jq . -C \\\n+    | more\n --------------------------------------------------\n-// TEST[skip:setup kibana sample data]\n+// NOTCONSOLE\n \n-The API response contains the `model_id` of the trained models. Check the \n-`model_id` of the trained model you want to move, you need to add it to the API \n-call in the next step.\n---\n+If you want to show just the model IDs available, use `jq` to select a subset.\n \n-2. Use the {ref}/get-trained-models.html[GET trained model API] to get the \n-trained model definition. You need to specify the following query parameters in \n-the call:\n-+\n---\n-* `for_export`: This parameter allows the model to be in an acceptable format to \n-be retrieved and then added to another cluster. Set it to `true`.\n-\n-* `include`: Set this to `definition` for the API to include the definition in \n-the response.\n-\n-* `decompress_definition`: It specifies in what format the included model \n-definition should be returned. Set it to `false` for getting a custom compressed \n-format. It is also valid to use the JSON format, but it is not optimal. As the \n-decompressed definition may be significantly larger, it is recommended to use \n-the compressed format.\n-   \n-The following call is an example to get the trained model definition. (Replace \n-`<model_id>` with the actual ID of the trained model.)\n-\n-[source,console]\n+[source, bash]\n --------------------------------------------------\n-GET _ml/trained_models/<model_id>?for_export=true&include=definition&decompress_definition=false\n+curl -s -u username:password \\\n+  -X GET \"http://localhost:9200/_ml/trained_models\" \\\n+    | jq -C -r '.trained_model_configs[].model_id'\n --------------------------------------------------\n-// TEST[skip:setup kibana sample data]\n-\n-The API response returns a `trained_model_configs` array that contains a \n-`compressed_definition` object and the analytics and inference configuration \n-information.\n---\n-\n-3. Copy the content of `trained_model_configs`.\n-\n-4. Use the {ref}/put-trained-models.html[Create trained model API] in the \n-cluster you want to move the trained model to. Paste the content of the \n-`trained_model_configs` to the request body of the API call. The API response \n-contains the model information with metadata.\n-\n-Your trained model is ready to be used as a <<ml-inference-processor,processor>> \n-in an ingest pipeline or as an <<ml-inference-aggregation,aggregation>>.\n-\n-[NOTE]\n---\n-The trained model definition can be so large that it may take a long time for a \n-computer clipboard to copy and paste it. It is recommended to do it \n-programmatically, for example via a bash script or via Client code. You can find \n-examples below.\n---\n-\n-The following Python snippet exports the trained model that you reference to a \n-JSON file:\n+// NOTCONSOLE\n \n-[source, py]\n+[source, bash]\n --------------------------------------------------\n-import json\n-from elasticsearch import Elasticsearch\n-from elasticsearch.client.ml import MlClient\n-es_client = Elasticsearch('URL to your ES instance', http_auth=(username, password), use_ssl=True)\n-ml_client = MlClient(es_client)\n-result = ml_client.get_trained_models(model_id='your-model-id', decompress_definition=False, include=definition)\n-compressed_df = result['trained_model_configs'][0]\n-with open('model_filename.json', 'w') as handle:\n-    handle.write(json.dumps(compressed_df))\n+flights1-1607953694065\n+flights0-1607953585123\n+lang_ident_model_1\n --------------------------------------------------\n // NOTCONSOLE\n \n+In this example, you are exporting the model with ID `flights1-1607953694065`.\n+--\n \n-The following Python snippet imports the model that stored in the JSON file to \n-a cluster:\n-\n-[source, py]\n+2. Using `curl` from the command line, again use the\n+{ref}/get-trained-models.html[get trained models API] to export the entire model\n+definition and save it to a JSON file.\n++\n+--\n+[source, bash]\n --------------------------------------------------\n-import json\n-from elasticsearch import Elasticsearch\n-from elasticsearch.client.ml import MlClient\n-es_client = Elasticsearch(args.es, http_auth=(username, password), use_ssl=True, timeout=60)\n-ml_client = MlClient(es_client)\n-with open(filename, 'r') as handle:\n-  compressed_model = json.loads(handle.read())\n-for field in ('version', 'create_time', 'estimated_heap_memory_usage_bytes', 'estimated_operations', 'license_level', 'id','created_by'):\n-  if field in compressed_model:\n-    del compressed_model[field]\n-ml_client.put_trained_model(model_id=model_id, body=compressed_model)\n+curl -u username:password \\\n+  -X GET \"http://localhost:9200/_ml/trained_models/flights1-1607953694065?exclude_generated=true&include=definition&decompress_definition=false\" \\\n+    | jq '.trained_model_configs[0] | del(.model_id)' \\\n+    > flights1.json\n --------------------------------------------------\n // NOTCONSOLE\n \n+A few observations:\n \n-You can achieve the same by running a bash script. Populate the environment \n-variables:\n-\n-`ES_ADDRESS=\"https://username:password@elasticsearch-address\"`\n+* Exporting models requires using `curl` or a similar tool that can *stream*\n+the model over HTTP into a file. If you use the {kib} Console, \n+browser might be unresponsive due to the size of exported models.\n \n-`MODEL=\"my_model_name\"`\n+* Note the query parameters that are used during export. These parameters are necessary to\n+export the model in a way that it can later be imported again and used for\n+inference.\n \n+* You must unnest the JSON object by one level to extract just the model\n+definition. You must also remove the existing model ID in order to not have\n+ID collisions when you import again. You can do these steps using `jq` inline or\n+alternatively it can be done to the resulting JSON file after downloading using\n+`jq` or other tools.\n+--\n \n-Then run the script:\n-\n+3. Import the saved model using `curl` to upload the JSON file to the {ref}/", "originalCommit": "c8443f5c178d6a98a75e13b5864a87fc8e87d8e1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTkwOTMyOA==", "url": "https://github.com/elastic/stack-docs/pull/1498#discussion_r545909328", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            create-trained-models.html[created trained model API]. When you specify the URL,\n          \n          \n            \n            {ref}/create-trained-models.html[created trained model API]. When you specify the URL,", "author": "lcawl", "createdAt": "2020-12-18T15:28:41Z", "path": "docs/en/stack/ml/df-analytics/ml-trained-models.asciidoc", "diffHunk": "@@ -13,168 +13,145 @@ information about this process, see <<ml-supervised-workflow>> and\n <<ml-inference>>.\n \n You can also supply trained models that are not created by {dfanalytics-job} but\n-adhere to the appropriate \n-https://github.com/elastic/ml-json-schemas[JSON schema]. If you want to use \n-these trained models in the {stack}, you must store them in {es} documents by \n+adhere to the appropriate\n+https://github.com/elastic/ml-json-schemas[JSON schema]. If you want to use\n+these trained models in the {stack}, you must store them in {es} documents by\n using the {ref}/put-trained-models.html[create trained models API].\n \n-In {kib}, you can view and manage your trained models within *{ml-app}* > *Data \n+In {kib}, you can view and manage your trained models within *{ml-app}* > *Data\n Frame Analytics*:\n \n [role=\"screenshot\"]\n image::images/trained-model-management.png[\"List of trained models in the {ml-app} app in {kib}\"]\n \n-Alternatively, you can use APIs like \n+Alternatively, you can use APIs like\n {ref}/get-trained-models.html[get trained models] and\n {ref}/delete-trained-models.html[delete trained models].\n \n \n [discrete]\n-[[move-between-clusters]]\n-== Moving a trained model between clusters\n-\n-It is a common scenario that the {ml} models are trained in a development or \n-test environment and then used in a production environment. In this case, you \n-need to move your trained model from one cluster to another. The trained model \n-APIs enable you to move your trained model between clusters. The following \n-description shows you the process step by step.\n-\n-1. (Optional) In the cluster where you trained the model, make the call below by \n-using the console in **Dev Tools** to get the configuration information of your \n-trained models.\n+[[export-import]]\n+== Exporting and importing models\n+\n+Models trained in Elasticsearch are portable and can be transferred between\n+clusters. This is particularly useful when models are trained in isolation from\n+the cluster where they are used for inference. The following instructions show\n+how to use https://curl.se/[`curl`] and https://stedolan.github.io/jq/[`jq`] to\n+export a model as JSON and import it to another cluster.\n+\n+1. Given a model _name_, find the model _ID_. You can use `curl` to call the\n+{ref}/get-trained-models.html[get trained model API] to list all models with\n+their IDs.\n +\n --\n-\n-[source,console]\n+[source, bash]\n --------------------------------------------------\n-GET _ml/trained_models/\n+curl -s -u username:password \\\n+  -X GET \"http://localhost:9200/_ml/trained_models\" \\\n+    | jq . -C \\\n+    | more\n --------------------------------------------------\n-// TEST[skip:setup kibana sample data]\n+// NOTCONSOLE\n \n-The API response contains the `model_id` of the trained models. Check the \n-`model_id` of the trained model you want to move, you need to add it to the API \n-call in the next step.\n---\n+If you want to show just the model IDs available, use `jq` to select a subset.\n \n-2. Use the {ref}/get-trained-models.html[GET trained model API] to get the \n-trained model definition. You need to specify the following query parameters in \n-the call:\n-+\n---\n-* `for_export`: This parameter allows the model to be in an acceptable format to \n-be retrieved and then added to another cluster. Set it to `true`.\n-\n-* `include`: Set this to `definition` for the API to include the definition in \n-the response.\n-\n-* `decompress_definition`: It specifies in what format the included model \n-definition should be returned. Set it to `false` for getting a custom compressed \n-format. It is also valid to use the JSON format, but it is not optimal. As the \n-decompressed definition may be significantly larger, it is recommended to use \n-the compressed format.\n-   \n-The following call is an example to get the trained model definition. (Replace \n-`<model_id>` with the actual ID of the trained model.)\n-\n-[source,console]\n+[source, bash]\n --------------------------------------------------\n-GET _ml/trained_models/<model_id>?for_export=true&include=definition&decompress_definition=false\n+curl -s -u username:password \\\n+  -X GET \"http://localhost:9200/_ml/trained_models\" \\\n+    | jq -C -r '.trained_model_configs[].model_id'\n --------------------------------------------------\n-// TEST[skip:setup kibana sample data]\n-\n-The API response returns a `trained_model_configs` array that contains a \n-`compressed_definition` object and the analytics and inference configuration \n-information.\n---\n-\n-3. Copy the content of `trained_model_configs`.\n-\n-4. Use the {ref}/put-trained-models.html[Create trained model API] in the \n-cluster you want to move the trained model to. Paste the content of the \n-`trained_model_configs` to the request body of the API call. The API response \n-contains the model information with metadata.\n-\n-Your trained model is ready to be used as a <<ml-inference-processor,processor>> \n-in an ingest pipeline or as an <<ml-inference-aggregation,aggregation>>.\n-\n-[NOTE]\n---\n-The trained model definition can be so large that it may take a long time for a \n-computer clipboard to copy and paste it. It is recommended to do it \n-programmatically, for example via a bash script or via Client code. You can find \n-examples below.\n---\n-\n-The following Python snippet exports the trained model that you reference to a \n-JSON file:\n+// NOTCONSOLE\n \n-[source, py]\n+[source, bash]\n --------------------------------------------------\n-import json\n-from elasticsearch import Elasticsearch\n-from elasticsearch.client.ml import MlClient\n-es_client = Elasticsearch('URL to your ES instance', http_auth=(username, password), use_ssl=True)\n-ml_client = MlClient(es_client)\n-result = ml_client.get_trained_models(model_id='your-model-id', decompress_definition=False, include=definition)\n-compressed_df = result['trained_model_configs'][0]\n-with open('model_filename.json', 'w') as handle:\n-    handle.write(json.dumps(compressed_df))\n+flights1-1607953694065\n+flights0-1607953585123\n+lang_ident_model_1\n --------------------------------------------------\n // NOTCONSOLE\n \n+In this example, you are exporting the model with ID `flights1-1607953694065`.\n+--\n \n-The following Python snippet imports the model that stored in the JSON file to \n-a cluster:\n-\n-[source, py]\n+2. Using `curl` from the command line, again use the\n+{ref}/get-trained-models.html[get trained models API] to export the entire model\n+definition and save it to a JSON file.\n++\n+--\n+[source, bash]\n --------------------------------------------------\n-import json\n-from elasticsearch import Elasticsearch\n-from elasticsearch.client.ml import MlClient\n-es_client = Elasticsearch(args.es, http_auth=(username, password), use_ssl=True, timeout=60)\n-ml_client = MlClient(es_client)\n-with open(filename, 'r') as handle:\n-  compressed_model = json.loads(handle.read())\n-for field in ('version', 'create_time', 'estimated_heap_memory_usage_bytes', 'estimated_operations', 'license_level', 'id','created_by'):\n-  if field in compressed_model:\n-    del compressed_model[field]\n-ml_client.put_trained_model(model_id=model_id, body=compressed_model)\n+curl -u username:password \\\n+  -X GET \"http://localhost:9200/_ml/trained_models/flights1-1607953694065?exclude_generated=true&include=definition&decompress_definition=false\" \\\n+    | jq '.trained_model_configs[0] | del(.model_id)' \\\n+    > flights1.json\n --------------------------------------------------\n // NOTCONSOLE\n \n+A few observations:\n \n-You can achieve the same by running a bash script. Populate the environment \n-variables:\n-\n-`ES_ADDRESS=\"https://username:password@elasticsearch-address\"`\n+* Exporting models requires using `curl` or a similar tool that can *stream*\n+the model over HTTP into a file. If you use the {kib} Console, \n+browser might be unresponsive due to the size of exported models.\n \n-`MODEL=\"my_model_name\"`\n+* Note the query parameters that are used during export. These parameters are necessary to\n+export the model in a way that it can later be imported again and used for\n+inference.\n \n+* You must unnest the JSON object by one level to extract just the model\n+definition. You must also remove the existing model ID in order to not have\n+ID collisions when you import again. You can do these steps using `jq` inline or\n+alternatively it can be done to the resulting JSON file after downloading using\n+`jq` or other tools.\n+--\n \n-Then run the script:\n-\n+3. Import the saved model using `curl` to upload the JSON file to the {ref}/\n+create-trained-models.html[created trained model API]. When you specify the URL,", "originalCommit": "c8443f5c178d6a98a75e13b5864a87fc8e87d8e1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTkxMDQ5OA==", "url": "https://github.com/elastic/stack-docs/pull/1498#discussion_r545910498", "bodyText": "This URL also fails in the output, so I think it needs to be on one line too:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            use any client as long as the model conforms to the https://github.com/elastic/\n          \n          \n            \n            use any client as long as the model conforms to the", "author": "lcawl", "createdAt": "2020-12-18T15:30:28Z", "path": "docs/en/stack/ml/df-analytics/ml-trained-models.asciidoc", "diffHunk": "@@ -13,168 +13,145 @@ information about this process, see <<ml-supervised-workflow>> and\n <<ml-inference>>.\n \n You can also supply trained models that are not created by {dfanalytics-job} but\n-adhere to the appropriate \n-https://github.com/elastic/ml-json-schemas[JSON schema]. If you want to use \n-these trained models in the {stack}, you must store them in {es} documents by \n+adhere to the appropriate\n+https://github.com/elastic/ml-json-schemas[JSON schema]. If you want to use\n+these trained models in the {stack}, you must store them in {es} documents by\n using the {ref}/put-trained-models.html[create trained models API].\n \n-In {kib}, you can view and manage your trained models within *{ml-app}* > *Data \n+In {kib}, you can view and manage your trained models within *{ml-app}* > *Data\n Frame Analytics*:\n \n [role=\"screenshot\"]\n image::images/trained-model-management.png[\"List of trained models in the {ml-app} app in {kib}\"]\n \n-Alternatively, you can use APIs like \n+Alternatively, you can use APIs like\n {ref}/get-trained-models.html[get trained models] and\n {ref}/delete-trained-models.html[delete trained models].\n \n \n [discrete]\n-[[move-between-clusters]]\n-== Moving a trained model between clusters\n-\n-It is a common scenario that the {ml} models are trained in a development or \n-test environment and then used in a production environment. In this case, you \n-need to move your trained model from one cluster to another. The trained model \n-APIs enable you to move your trained model between clusters. The following \n-description shows you the process step by step.\n-\n-1. (Optional) In the cluster where you trained the model, make the call below by \n-using the console in **Dev Tools** to get the configuration information of your \n-trained models.\n+[[export-import]]\n+== Exporting and importing models\n+\n+Models trained in Elasticsearch are portable and can be transferred between\n+clusters. This is particularly useful when models are trained in isolation from\n+the cluster where they are used for inference. The following instructions show\n+how to use https://curl.se/[`curl`] and https://stedolan.github.io/jq/[`jq`] to\n+export a model as JSON and import it to another cluster.\n+\n+1. Given a model _name_, find the model _ID_. You can use `curl` to call the\n+{ref}/get-trained-models.html[get trained model API] to list all models with\n+their IDs.\n +\n --\n-\n-[source,console]\n+[source, bash]\n --------------------------------------------------\n-GET _ml/trained_models/\n+curl -s -u username:password \\\n+  -X GET \"http://localhost:9200/_ml/trained_models\" \\\n+    | jq . -C \\\n+    | more\n --------------------------------------------------\n-// TEST[skip:setup kibana sample data]\n+// NOTCONSOLE\n \n-The API response contains the `model_id` of the trained models. Check the \n-`model_id` of the trained model you want to move, you need to add it to the API \n-call in the next step.\n---\n+If you want to show just the model IDs available, use `jq` to select a subset.\n \n-2. Use the {ref}/get-trained-models.html[GET trained model API] to get the \n-trained model definition. You need to specify the following query parameters in \n-the call:\n-+\n---\n-* `for_export`: This parameter allows the model to be in an acceptable format to \n-be retrieved and then added to another cluster. Set it to `true`.\n-\n-* `include`: Set this to `definition` for the API to include the definition in \n-the response.\n-\n-* `decompress_definition`: It specifies in what format the included model \n-definition should be returned. Set it to `false` for getting a custom compressed \n-format. It is also valid to use the JSON format, but it is not optimal. As the \n-decompressed definition may be significantly larger, it is recommended to use \n-the compressed format.\n-   \n-The following call is an example to get the trained model definition. (Replace \n-`<model_id>` with the actual ID of the trained model.)\n-\n-[source,console]\n+[source, bash]\n --------------------------------------------------\n-GET _ml/trained_models/<model_id>?for_export=true&include=definition&decompress_definition=false\n+curl -s -u username:password \\\n+  -X GET \"http://localhost:9200/_ml/trained_models\" \\\n+    | jq -C -r '.trained_model_configs[].model_id'\n --------------------------------------------------\n-// TEST[skip:setup kibana sample data]\n-\n-The API response returns a `trained_model_configs` array that contains a \n-`compressed_definition` object and the analytics and inference configuration \n-information.\n---\n-\n-3. Copy the content of `trained_model_configs`.\n-\n-4. Use the {ref}/put-trained-models.html[Create trained model API] in the \n-cluster you want to move the trained model to. Paste the content of the \n-`trained_model_configs` to the request body of the API call. The API response \n-contains the model information with metadata.\n-\n-Your trained model is ready to be used as a <<ml-inference-processor,processor>> \n-in an ingest pipeline or as an <<ml-inference-aggregation,aggregation>>.\n-\n-[NOTE]\n---\n-The trained model definition can be so large that it may take a long time for a \n-computer clipboard to copy and paste it. It is recommended to do it \n-programmatically, for example via a bash script or via Client code. You can find \n-examples below.\n---\n-\n-The following Python snippet exports the trained model that you reference to a \n-JSON file:\n+// NOTCONSOLE\n \n-[source, py]\n+[source, bash]\n --------------------------------------------------\n-import json\n-from elasticsearch import Elasticsearch\n-from elasticsearch.client.ml import MlClient\n-es_client = Elasticsearch('URL to your ES instance', http_auth=(username, password), use_ssl=True)\n-ml_client = MlClient(es_client)\n-result = ml_client.get_trained_models(model_id='your-model-id', decompress_definition=False, include=definition)\n-compressed_df = result['trained_model_configs'][0]\n-with open('model_filename.json', 'w') as handle:\n-    handle.write(json.dumps(compressed_df))\n+flights1-1607953694065\n+flights0-1607953585123\n+lang_ident_model_1\n --------------------------------------------------\n // NOTCONSOLE\n \n+In this example, you are exporting the model with ID `flights1-1607953694065`.\n+--\n \n-The following Python snippet imports the model that stored in the JSON file to \n-a cluster:\n-\n-[source, py]\n+2. Using `curl` from the command line, again use the\n+{ref}/get-trained-models.html[get trained models API] to export the entire model\n+definition and save it to a JSON file.\n++\n+--\n+[source, bash]\n --------------------------------------------------\n-import json\n-from elasticsearch import Elasticsearch\n-from elasticsearch.client.ml import MlClient\n-es_client = Elasticsearch(args.es, http_auth=(username, password), use_ssl=True, timeout=60)\n-ml_client = MlClient(es_client)\n-with open(filename, 'r') as handle:\n-  compressed_model = json.loads(handle.read())\n-for field in ('version', 'create_time', 'estimated_heap_memory_usage_bytes', 'estimated_operations', 'license_level', 'id','created_by'):\n-  if field in compressed_model:\n-    del compressed_model[field]\n-ml_client.put_trained_model(model_id=model_id, body=compressed_model)\n+curl -u username:password \\\n+  -X GET \"http://localhost:9200/_ml/trained_models/flights1-1607953694065?exclude_generated=true&include=definition&decompress_definition=false\" \\\n+    | jq '.trained_model_configs[0] | del(.model_id)' \\\n+    > flights1.json\n --------------------------------------------------\n // NOTCONSOLE\n \n+A few observations:\n \n-You can achieve the same by running a bash script. Populate the environment \n-variables:\n-\n-`ES_ADDRESS=\"https://username:password@elasticsearch-address\"`\n+* Exporting models requires using `curl` or a similar tool that can *stream*\n+the model over HTTP into a file. If you use the {kib} Console, \n+browser might be unresponsive due to the size of exported models.\n \n-`MODEL=\"my_model_name\"`\n+* Note the query parameters that are used during export. These parameters are necessary to\n+export the model in a way that it can later be imported again and used for\n+inference.\n \n+* You must unnest the JSON object by one level to extract just the model\n+definition. You must also remove the existing model ID in order to not have\n+ID collisions when you import again. You can do these steps using `jq` inline or\n+alternatively it can be done to the resulting JSON file after downloading using\n+`jq` or other tools.\n+--\n \n-Then run the script:\n-\n+3. Import the saved model using `curl` to upload the JSON file to the {ref}/\n+create-trained-models.html[created trained model API]. When you specify the URL,\n+you can also set the model ID to something new using the last path part of the\n+URL.\n++\n+--\n [source, bash]\n --------------------------------------------------\n-curl -H 'Content-Type: application/json' -XPUT \"$ES_ADDRESS/_ml/inference/$MODEL\" -d@$MODEL.json\n+curl -u username:password \\\n+  -H 'Content-Type: application/json' \\\n+  -X PUT \"http://localhost:9200/_ml/trained_models/flights1-imported\" \\\n+  --data-binary @flights1.json\n --------------------------------------------------\n // NOTCONSOLE\n+--\n+\n+[NOTE]\n+--\n+* Models exported from the {ref}/get-trained-models.html[get trained models API]\n+are limited in size by the\n+{ref}/modules-http.html#_http_settings[http.max_content_length]\n+global configuration value in Elasticsearch. The default value is `100mb` and\n+may need to be increased depending on the size of model being exported.\n+\n+* Connection timeouts can occur when either the source or destination\n+cluster is under load, or when model sizes are very large. Increasing\n+https://ec.haxx.se/usingcurl/usingcurl-timeouts[timeout configurations] for\n+`curl` (e.g. `curl --max-time 600`) or your client of choice will help\n+alleviate the problem. In rare cases you may need to reduce load on the\n+Elasticsearch cluster, for example by adding nodes.\n+--\n \n \n [discrete]\n-[[move-trained-model-to-es]]\n-== Moving a model to the {stack}\n+[[import-external-model-to-es]]\n+== Importing an external model to the {stack}\n \n-It is possible to add a model to your {es} cluster even if the model is not \n+It is possible to import a model to your {es} cluster even if the model is not\n trained by Elastic {dfanalytics}.\n \n-You can find an example of training a model, then adding it to {es} by using \n-eland \n-https://eland.readthedocs.io/en/latest/examples/introduction_to_eland_webinar.html#Machine-Learning-Demo[in eland docs].\n-The example uses Python to train and move the model, however, you can use any \n-Client as long as the format of your trained model meets \n-https://github.com/elastic/ml-json-schemas[the required schema].\n-\n+You can find an example of training a model, then importing it to {es} with\n+`eland` in the\n+https://eland.readthedocs.io/en/latest/examples/introduction_to_eland_webinar.html#Machine-Learning-Demo[eland machine learning demo].\n+The example uses Python to train, save and import the model. However, you can\n+use any client as long as the model conforms to the https://github.com/elastic/", "originalCommit": "c8443f5c178d6a98a75e13b5864a87fc8e87d8e1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTkxMDY5OQ==", "url": "https://github.com/elastic/stack-docs/pull/1498#discussion_r545910699", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            ml-json-schemas[schema].\n          \n          \n            \n            https://github.com/elastic/ml-json-schemas[schema].", "author": "lcawl", "createdAt": "2020-12-18T15:30:51Z", "path": "docs/en/stack/ml/df-analytics/ml-trained-models.asciidoc", "diffHunk": "@@ -13,168 +13,145 @@ information about this process, see <<ml-supervised-workflow>> and\n <<ml-inference>>.\n \n You can also supply trained models that are not created by {dfanalytics-job} but\n-adhere to the appropriate \n-https://github.com/elastic/ml-json-schemas[JSON schema]. If you want to use \n-these trained models in the {stack}, you must store them in {es} documents by \n+adhere to the appropriate\n+https://github.com/elastic/ml-json-schemas[JSON schema]. If you want to use\n+these trained models in the {stack}, you must store them in {es} documents by\n using the {ref}/put-trained-models.html[create trained models API].\n \n-In {kib}, you can view and manage your trained models within *{ml-app}* > *Data \n+In {kib}, you can view and manage your trained models within *{ml-app}* > *Data\n Frame Analytics*:\n \n [role=\"screenshot\"]\n image::images/trained-model-management.png[\"List of trained models in the {ml-app} app in {kib}\"]\n \n-Alternatively, you can use APIs like \n+Alternatively, you can use APIs like\n {ref}/get-trained-models.html[get trained models] and\n {ref}/delete-trained-models.html[delete trained models].\n \n \n [discrete]\n-[[move-between-clusters]]\n-== Moving a trained model between clusters\n-\n-It is a common scenario that the {ml} models are trained in a development or \n-test environment and then used in a production environment. In this case, you \n-need to move your trained model from one cluster to another. The trained model \n-APIs enable you to move your trained model between clusters. The following \n-description shows you the process step by step.\n-\n-1. (Optional) In the cluster where you trained the model, make the call below by \n-using the console in **Dev Tools** to get the configuration information of your \n-trained models.\n+[[export-import]]\n+== Exporting and importing models\n+\n+Models trained in Elasticsearch are portable and can be transferred between\n+clusters. This is particularly useful when models are trained in isolation from\n+the cluster where they are used for inference. The following instructions show\n+how to use https://curl.se/[`curl`] and https://stedolan.github.io/jq/[`jq`] to\n+export a model as JSON and import it to another cluster.\n+\n+1. Given a model _name_, find the model _ID_. You can use `curl` to call the\n+{ref}/get-trained-models.html[get trained model API] to list all models with\n+their IDs.\n +\n --\n-\n-[source,console]\n+[source, bash]\n --------------------------------------------------\n-GET _ml/trained_models/\n+curl -s -u username:password \\\n+  -X GET \"http://localhost:9200/_ml/trained_models\" \\\n+    | jq . -C \\\n+    | more\n --------------------------------------------------\n-// TEST[skip:setup kibana sample data]\n+// NOTCONSOLE\n \n-The API response contains the `model_id` of the trained models. Check the \n-`model_id` of the trained model you want to move, you need to add it to the API \n-call in the next step.\n---\n+If you want to show just the model IDs available, use `jq` to select a subset.\n \n-2. Use the {ref}/get-trained-models.html[GET trained model API] to get the \n-trained model definition. You need to specify the following query parameters in \n-the call:\n-+\n---\n-* `for_export`: This parameter allows the model to be in an acceptable format to \n-be retrieved and then added to another cluster. Set it to `true`.\n-\n-* `include`: Set this to `definition` for the API to include the definition in \n-the response.\n-\n-* `decompress_definition`: It specifies in what format the included model \n-definition should be returned. Set it to `false` for getting a custom compressed \n-format. It is also valid to use the JSON format, but it is not optimal. As the \n-decompressed definition may be significantly larger, it is recommended to use \n-the compressed format.\n-   \n-The following call is an example to get the trained model definition. (Replace \n-`<model_id>` with the actual ID of the trained model.)\n-\n-[source,console]\n+[source, bash]\n --------------------------------------------------\n-GET _ml/trained_models/<model_id>?for_export=true&include=definition&decompress_definition=false\n+curl -s -u username:password \\\n+  -X GET \"http://localhost:9200/_ml/trained_models\" \\\n+    | jq -C -r '.trained_model_configs[].model_id'\n --------------------------------------------------\n-// TEST[skip:setup kibana sample data]\n-\n-The API response returns a `trained_model_configs` array that contains a \n-`compressed_definition` object and the analytics and inference configuration \n-information.\n---\n-\n-3. Copy the content of `trained_model_configs`.\n-\n-4. Use the {ref}/put-trained-models.html[Create trained model API] in the \n-cluster you want to move the trained model to. Paste the content of the \n-`trained_model_configs` to the request body of the API call. The API response \n-contains the model information with metadata.\n-\n-Your trained model is ready to be used as a <<ml-inference-processor,processor>> \n-in an ingest pipeline or as an <<ml-inference-aggregation,aggregation>>.\n-\n-[NOTE]\n---\n-The trained model definition can be so large that it may take a long time for a \n-computer clipboard to copy and paste it. It is recommended to do it \n-programmatically, for example via a bash script or via Client code. You can find \n-examples below.\n---\n-\n-The following Python snippet exports the trained model that you reference to a \n-JSON file:\n+// NOTCONSOLE\n \n-[source, py]\n+[source, bash]\n --------------------------------------------------\n-import json\n-from elasticsearch import Elasticsearch\n-from elasticsearch.client.ml import MlClient\n-es_client = Elasticsearch('URL to your ES instance', http_auth=(username, password), use_ssl=True)\n-ml_client = MlClient(es_client)\n-result = ml_client.get_trained_models(model_id='your-model-id', decompress_definition=False, include=definition)\n-compressed_df = result['trained_model_configs'][0]\n-with open('model_filename.json', 'w') as handle:\n-    handle.write(json.dumps(compressed_df))\n+flights1-1607953694065\n+flights0-1607953585123\n+lang_ident_model_1\n --------------------------------------------------\n // NOTCONSOLE\n \n+In this example, you are exporting the model with ID `flights1-1607953694065`.\n+--\n \n-The following Python snippet imports the model that stored in the JSON file to \n-a cluster:\n-\n-[source, py]\n+2. Using `curl` from the command line, again use the\n+{ref}/get-trained-models.html[get trained models API] to export the entire model\n+definition and save it to a JSON file.\n++\n+--\n+[source, bash]\n --------------------------------------------------\n-import json\n-from elasticsearch import Elasticsearch\n-from elasticsearch.client.ml import MlClient\n-es_client = Elasticsearch(args.es, http_auth=(username, password), use_ssl=True, timeout=60)\n-ml_client = MlClient(es_client)\n-with open(filename, 'r') as handle:\n-  compressed_model = json.loads(handle.read())\n-for field in ('version', 'create_time', 'estimated_heap_memory_usage_bytes', 'estimated_operations', 'license_level', 'id','created_by'):\n-  if field in compressed_model:\n-    del compressed_model[field]\n-ml_client.put_trained_model(model_id=model_id, body=compressed_model)\n+curl -u username:password \\\n+  -X GET \"http://localhost:9200/_ml/trained_models/flights1-1607953694065?exclude_generated=true&include=definition&decompress_definition=false\" \\\n+    | jq '.trained_model_configs[0] | del(.model_id)' \\\n+    > flights1.json\n --------------------------------------------------\n // NOTCONSOLE\n \n+A few observations:\n \n-You can achieve the same by running a bash script. Populate the environment \n-variables:\n-\n-`ES_ADDRESS=\"https://username:password@elasticsearch-address\"`\n+* Exporting models requires using `curl` or a similar tool that can *stream*\n+the model over HTTP into a file. If you use the {kib} Console, \n+browser might be unresponsive due to the size of exported models.\n \n-`MODEL=\"my_model_name\"`\n+* Note the query parameters that are used during export. These parameters are necessary to\n+export the model in a way that it can later be imported again and used for\n+inference.\n \n+* You must unnest the JSON object by one level to extract just the model\n+definition. You must also remove the existing model ID in order to not have\n+ID collisions when you import again. You can do these steps using `jq` inline or\n+alternatively it can be done to the resulting JSON file after downloading using\n+`jq` or other tools.\n+--\n \n-Then run the script:\n-\n+3. Import the saved model using `curl` to upload the JSON file to the {ref}/\n+create-trained-models.html[created trained model API]. When you specify the URL,\n+you can also set the model ID to something new using the last path part of the\n+URL.\n++\n+--\n [source, bash]\n --------------------------------------------------\n-curl -H 'Content-Type: application/json' -XPUT \"$ES_ADDRESS/_ml/inference/$MODEL\" -d@$MODEL.json\n+curl -u username:password \\\n+  -H 'Content-Type: application/json' \\\n+  -X PUT \"http://localhost:9200/_ml/trained_models/flights1-imported\" \\\n+  --data-binary @flights1.json\n --------------------------------------------------\n // NOTCONSOLE\n+--\n+\n+[NOTE]\n+--\n+* Models exported from the {ref}/get-trained-models.html[get trained models API]\n+are limited in size by the\n+{ref}/modules-http.html#_http_settings[http.max_content_length]\n+global configuration value in Elasticsearch. The default value is `100mb` and\n+may need to be increased depending on the size of model being exported.\n+\n+* Connection timeouts can occur when either the source or destination\n+cluster is under load, or when model sizes are very large. Increasing\n+https://ec.haxx.se/usingcurl/usingcurl-timeouts[timeout configurations] for\n+`curl` (e.g. `curl --max-time 600`) or your client of choice will help\n+alleviate the problem. In rare cases you may need to reduce load on the\n+Elasticsearch cluster, for example by adding nodes.\n+--\n \n \n [discrete]\n-[[move-trained-model-to-es]]\n-== Moving a model to the {stack}\n+[[import-external-model-to-es]]\n+== Importing an external model to the {stack}\n \n-It is possible to add a model to your {es} cluster even if the model is not \n+It is possible to import a model to your {es} cluster even if the model is not\n trained by Elastic {dfanalytics}.\n \n-You can find an example of training a model, then adding it to {es} by using \n-eland \n-https://eland.readthedocs.io/en/latest/examples/introduction_to_eland_webinar.html#Machine-Learning-Demo[in eland docs].\n-The example uses Python to train and move the model, however, you can use any \n-Client as long as the format of your trained model meets \n-https://github.com/elastic/ml-json-schemas[the required schema].\n-\n+You can find an example of training a model, then importing it to {es} with\n+`eland` in the\n+https://eland.readthedocs.io/en/latest/examples/introduction_to_eland_webinar.html#Machine-Learning-Demo[eland machine learning demo].\n+The example uses Python to train, save and import the model. However, you can\n+use any client as long as the model conforms to the https://github.com/elastic/\n+ml-json-schemas[schema].", "originalCommit": "c8443f5c178d6a98a75e13b5864a87fc8e87d8e1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "6b1cbf3638f5c59b38c313356483c6bc9e64087d", "url": "https://github.com/elastic/stack-docs/commit/6b1cbf3638f5c59b38c313356483c6bc9e64087d", "message": "Update docs/en/stack/ml/df-analytics/ml-trained-models.asciidoc", "committedDate": "2020-12-18T15:43:24Z", "type": "commit"}, {"oid": "7acbed7b1a5c54814aa6857570056322e29061cd", "url": "https://github.com/elastic/stack-docs/commit/7acbed7b1a5c54814aa6857570056322e29061cd", "message": "Update docs/en/stack/ml/df-analytics/ml-trained-models.asciidoc", "committedDate": "2020-12-18T15:43:55Z", "type": "commit"}, {"oid": "906e995e58ba9280240463a559d5be1e4c825212", "url": "https://github.com/elastic/stack-docs/commit/906e995e58ba9280240463a559d5be1e4c825212", "message": "Update docs/en/stack/ml/df-analytics/ml-trained-models.asciidoc", "committedDate": "2020-12-18T15:44:10Z", "type": "commit"}, {"oid": "2621c6b973e0623b481b0c46ac862dbfa7ee96bc", "url": "https://github.com/elastic/stack-docs/commit/2621c6b973e0623b481b0c46ac862dbfa7ee96bc", "message": "Update docs/en/stack/ml/df-analytics/ml-trained-models.asciidoc", "committedDate": "2020-12-18T15:44:39Z", "type": "commit"}, {"oid": "06a63d3d3301adf3b64fd2532e64677a473c56ed", "url": "https://github.com/elastic/stack-docs/commit/06a63d3d3301adf3b64fd2532e64677a473c56ed", "message": "Update docs/en/stack/ml/df-analytics/ml-trained-models.asciidoc", "committedDate": "2020-12-18T15:44:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTkyNjcyMA==", "url": "https://github.com/elastic/stack-docs/pull/1498#discussion_r545926720", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            {ref}/create-trained-models.html[created trained model API]. When you specify the URL,\n          \n          \n            \n            {ref}/put-trained-models.html[created trained model API]. When you specify the URL,", "author": "lcawl", "createdAt": "2020-12-18T15:56:41Z", "path": "docs/en/stack/ml/df-analytics/ml-trained-models.asciidoc", "diffHunk": "@@ -13,168 +13,145 @@ information about this process, see <<ml-supervised-workflow>> and\n <<ml-inference>>.\n \n You can also supply trained models that are not created by {dfanalytics-job} but\n-adhere to the appropriate \n-https://github.com/elastic/ml-json-schemas[JSON schema]. If you want to use \n-these trained models in the {stack}, you must store them in {es} documents by \n+adhere to the appropriate\n+https://github.com/elastic/ml-json-schemas[JSON schema]. If you want to use\n+these trained models in the {stack}, you must store them in {es} documents by\n using the {ref}/put-trained-models.html[create trained models API].\n \n-In {kib}, you can view and manage your trained models within *{ml-app}* > *Data \n+In {kib}, you can view and manage your trained models within *{ml-app}* > *Data\n Frame Analytics*:\n \n [role=\"screenshot\"]\n image::images/trained-model-management.png[\"List of trained models in the {ml-app} app in {kib}\"]\n \n-Alternatively, you can use APIs like \n+Alternatively, you can use APIs like\n {ref}/get-trained-models.html[get trained models] and\n {ref}/delete-trained-models.html[delete trained models].\n \n \n [discrete]\n-[[move-between-clusters]]\n-== Moving a trained model between clusters\n-\n-It is a common scenario that the {ml} models are trained in a development or \n-test environment and then used in a production environment. In this case, you \n-need to move your trained model from one cluster to another. The trained model \n-APIs enable you to move your trained model between clusters. The following \n-description shows you the process step by step.\n-\n-1. (Optional) In the cluster where you trained the model, make the call below by \n-using the console in **Dev Tools** to get the configuration information of your \n-trained models.\n+[[export-import]]\n+== Exporting and importing models\n+\n+Models trained in Elasticsearch are portable and can be transferred between\n+clusters. This is particularly useful when models are trained in isolation from\n+the cluster where they are used for inference. The following instructions show\n+how to use https://curl.se/[`curl`] and https://stedolan.github.io/jq/[`jq`] to\n+export a model as JSON and import it to another cluster.\n+\n+1. Given a model _name_, find the model _ID_. You can use `curl` to call the\n+{ref}/get-trained-models.html[get trained model API] to list all models with\n+their IDs.\n +\n --\n-\n-[source,console]\n+[source, bash]\n --------------------------------------------------\n-GET _ml/trained_models/\n+curl -s -u username:password \\\n+  -X GET \"http://localhost:9200/_ml/trained_models\" \\\n+    | jq . -C \\\n+    | more\n --------------------------------------------------\n-// TEST[skip:setup kibana sample data]\n+// NOTCONSOLE\n \n-The API response contains the `model_id` of the trained models. Check the \n-`model_id` of the trained model you want to move, you need to add it to the API \n-call in the next step.\n---\n+If you want to show just the model IDs available, use `jq` to select a subset.\n \n-2. Use the {ref}/get-trained-models.html[GET trained model API] to get the \n-trained model definition. You need to specify the following query parameters in \n-the call:\n-+\n---\n-* `for_export`: This parameter allows the model to be in an acceptable format to \n-be retrieved and then added to another cluster. Set it to `true`.\n-\n-* `include`: Set this to `definition` for the API to include the definition in \n-the response.\n-\n-* `decompress_definition`: It specifies in what format the included model \n-definition should be returned. Set it to `false` for getting a custom compressed \n-format. It is also valid to use the JSON format, but it is not optimal. As the \n-decompressed definition may be significantly larger, it is recommended to use \n-the compressed format.\n-   \n-The following call is an example to get the trained model definition. (Replace \n-`<model_id>` with the actual ID of the trained model.)\n-\n-[source,console]\n+[source, bash]\n --------------------------------------------------\n-GET _ml/trained_models/<model_id>?for_export=true&include=definition&decompress_definition=false\n+curl -s -u username:password \\\n+  -X GET \"http://localhost:9200/_ml/trained_models\" \\\n+    | jq -C -r '.trained_model_configs[].model_id'\n --------------------------------------------------\n-// TEST[skip:setup kibana sample data]\n-\n-The API response returns a `trained_model_configs` array that contains a \n-`compressed_definition` object and the analytics and inference configuration \n-information.\n---\n-\n-3. Copy the content of `trained_model_configs`.\n-\n-4. Use the {ref}/put-trained-models.html[Create trained model API] in the \n-cluster you want to move the trained model to. Paste the content of the \n-`trained_model_configs` to the request body of the API call. The API response \n-contains the model information with metadata.\n-\n-Your trained model is ready to be used as a <<ml-inference-processor,processor>> \n-in an ingest pipeline or as an <<ml-inference-aggregation,aggregation>>.\n-\n-[NOTE]\n---\n-The trained model definition can be so large that it may take a long time for a \n-computer clipboard to copy and paste it. It is recommended to do it \n-programmatically, for example via a bash script or via Client code. You can find \n-examples below.\n---\n-\n-The following Python snippet exports the trained model that you reference to a \n-JSON file:\n+// NOTCONSOLE\n \n-[source, py]\n+[source, bash]\n --------------------------------------------------\n-import json\n-from elasticsearch import Elasticsearch\n-from elasticsearch.client.ml import MlClient\n-es_client = Elasticsearch('URL to your ES instance', http_auth=(username, password), use_ssl=True)\n-ml_client = MlClient(es_client)\n-result = ml_client.get_trained_models(model_id='your-model-id', decompress_definition=False, include=definition)\n-compressed_df = result['trained_model_configs'][0]\n-with open('model_filename.json', 'w') as handle:\n-    handle.write(json.dumps(compressed_df))\n+flights1-1607953694065\n+flights0-1607953585123\n+lang_ident_model_1\n --------------------------------------------------\n // NOTCONSOLE\n \n+In this example, you are exporting the model with ID `flights1-1607953694065`.\n+--\n \n-The following Python snippet imports the model that stored in the JSON file to \n-a cluster:\n-\n-[source, py]\n+2. Using `curl` from the command line, again use the\n+{ref}/get-trained-models.html[get trained models API] to export the entire model\n+definition and save it to a JSON file.\n++\n+--\n+[source, bash]\n --------------------------------------------------\n-import json\n-from elasticsearch import Elasticsearch\n-from elasticsearch.client.ml import MlClient\n-es_client = Elasticsearch(args.es, http_auth=(username, password), use_ssl=True, timeout=60)\n-ml_client = MlClient(es_client)\n-with open(filename, 'r') as handle:\n-  compressed_model = json.loads(handle.read())\n-for field in ('version', 'create_time', 'estimated_heap_memory_usage_bytes', 'estimated_operations', 'license_level', 'id','created_by'):\n-  if field in compressed_model:\n-    del compressed_model[field]\n-ml_client.put_trained_model(model_id=model_id, body=compressed_model)\n+curl -u username:password \\\n+  -X GET \"http://localhost:9200/_ml/trained_models/flights1-1607953694065?exclude_generated=true&include=definition&decompress_definition=false\" \\\n+    | jq '.trained_model_configs[0] | del(.model_id)' \\\n+    > flights1.json\n --------------------------------------------------\n // NOTCONSOLE\n \n+A few observations:\n \n-You can achieve the same by running a bash script. Populate the environment \n-variables:\n-\n-`ES_ADDRESS=\"https://username:password@elasticsearch-address\"`\n+* Exporting models requires using `curl` or a similar tool that can *stream*\n+the model over HTTP into a file. If you use the {kib} Console, the\n+browser might be unresponsive due to the size of exported models.\n \n-`MODEL=\"my_model_name\"`\n+* Note the query parameters that are used during export. These parameters are necessary to\n+export the model in a way that it can later be imported again and used for\n+inference.\n \n+* You must unnest the JSON object by one level to extract just the model\n+definition. You must also remove the existing model ID in order to not have\n+ID collisions when you import again. You can do these steps using `jq` inline or\n+alternatively it can be done to the resulting JSON file after downloading using\n+`jq` or other tools.\n+--\n \n-Then run the script:\n-\n+3. Import the saved model using `curl` to upload the JSON file to the\n+{ref}/create-trained-models.html[created trained model API]. When you specify the URL,", "originalCommit": "06a63d3d3301adf3b64fd2532e64677a473c56ed", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "41a400b51eea528ad52614cfb7c1725e21a7fb98", "url": "https://github.com/elastic/stack-docs/commit/41a400b51eea528ad52614cfb7c1725e21a7fb98", "message": "Update docs/en/stack/ml/df-analytics/ml-trained-models.asciidoc", "committedDate": "2020-12-18T15:56:48Z", "type": "commit"}]}