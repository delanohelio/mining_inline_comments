{"pr_number": 113, "pr_title": "Add shingle size, total model size, and model's hash ring to profile API", "pr_createdAt": "2020-05-06T22:19:26Z", "pr_url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/113", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTE0MjUzMw==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/113#discussion_r421142533", "bodyText": "cool. I guess this can fix this issue as well: #111", "author": "yizheliu-amazon", "createdAt": "2020-05-06T23:05:20Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/AnomalyDetectorProfileRunner.java", "diffHunk": "@@ -280,8 +312,42 @@ private SearchRequest createLatestAnomalyResultRequest(String detectorId, long e\n \n         SearchSourceBuilder source = new SearchSourceBuilder().query(filterQuery).size(1).sort(sortQuery);\n \n-        SearchRequest request = new SearchRequest(AnomalyResult.ANOMALY_RESULT_INDEX);\n+        SearchRequest request = new SearchRequest(AnomalyDetectionIndices.ALL_AD_RESULTS_INDEX_PATTERN);", "originalCommit": "198676b576a5b79f6f0f59e00d726af315a4cc8c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTE1OTgxNQ==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/113#discussion_r421159815", "bodyText": "yes", "author": "kaituo", "createdAt": "2020-05-06T23:58:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTE0MjUzMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTEyOTMxNQ==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/113#discussion_r421129315", "bodyText": "Nit: Add a comment describing what this means for those not familiar with MultiResponseDelegateActionListener", "author": "jmazanec15", "createdAt": "2020-05-06T22:29:17Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/AnomalyDetectorProfileRunner.java", "diffHunk": "@@ -70,9 +78,26 @@ public void profile(String detectorId, ActionListener<DetectorProfile> listener,\n             return;\n         }\n \n+        int totalListener = 0;", "originalCommit": "198676b576a5b79f6f0f59e00d726af315a4cc8c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTE1OTc1Mw==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/113#discussion_r421159753", "bodyText": "added", "author": "kaituo", "createdAt": "2020-05-06T23:58:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTEyOTMxNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTEzNDA1Nw==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/113#discussion_r421134057", "bodyText": "Nit: Typo", "author": "jmazanec15", "createdAt": "2020-05-06T22:42:18Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/model/ModelProfile.java", "diffHunk": "@@ -0,0 +1,77 @@\n+package com.amazon.opendistroforelasticsearch.ad.model;\n+\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+import java.io.IOException;\n+\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.common.io.stream.Writeable;\n+import org.elasticsearch.common.xcontent.ToXContent;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+\n+public class ModelProfile implements Writeable, ToXContent {\n+    // filed name in toXContent", "originalCommit": "198676b576a5b79f6f0f59e00d726af315a4cc8c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTE2MDAxNw==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/113#discussion_r421160017", "bodyText": "fixed.", "author": "kaituo", "createdAt": "2020-05-06T23:59:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTEzNDA1Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTEzNDg1NA==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/113#discussion_r421134854", "bodyText": "Why hardcode these strings?", "author": "jmazanec15", "createdAt": "2020-05-06T22:44:23Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/model/ProfileName.java", "diffHunk": "@@ -38,26 +42,20 @@ public String getName() {\n         return name;\n     }\n \n-    /**\n-     * Get set of profile names\n-     *\n-     * @return set of profile names\n-     */\n-    public static Set<String> getNames() {\n-        Set<String> names = new HashSet<>();\n-\n-        for (ProfileName statName : ProfileName.values()) {\n-            names.add(statName.getName());\n-        }\n-        return names;\n-    }\n-\n     public static ProfileName getName(String name) {\n         switch (name) {\n             case \"state\":\n                 return STATE;\n             case \"error\":\n                 return ERROR;\n+            case \"coordinating_node\":", "originalCommit": "198676b576a5b79f6f0f59e00d726af315a4cc8c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTE2Mzc2Ng==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/113#discussion_r421163766", "bodyText": "changed to \"case CommonName.COORDINATING_NODE:\".", "author": "kaituo", "createdAt": "2020-05-07T00:11:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTEzNDg1NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTEzNTkwOQ==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/113#discussion_r421135909", "bodyText": "Use _all instead of all?", "author": "jmazanec15", "createdAt": "2020-05-06T22:47:09Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/rest/RestGetAnomalyDetectorAction.java", "diffHunk": "@@ -111,13 +115,14 @@ protected RestChannelConsumer prepareRequest(RestRequest request, NodeClient cli\n             throw new IllegalStateException(CommonErrorMessages.DISABLED_ERR_MSG);\n         }\n         String detectorId = request.param(DETECTOR_ID);\n-        boolean returnJob = request.paramAsBoolean(\"job\", false);\n         String typesStr = request.param(TYPE);\n         String rawPath = request.rawPath();\n         if (!Strings.isEmpty(typesStr) || rawPath.endsWith(PROFILE) || rawPath.endsWith(PROFILE + \"/\")) {\n+            boolean all = request.paramAsBoolean(\"all\", false);", "originalCommit": "198676b576a5b79f6f0f59e00d726af315a4cc8c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTE2NTY2Mg==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/113#discussion_r421165662", "bodyText": "changed", "author": "kaituo", "createdAt": "2020-05-07T00:18:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTEzNTkwOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTEzODM3Mg==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/113#discussion_r421138372", "bodyText": "These strings are already defined aren't they?", "author": "jmazanec15", "createdAt": "2020-05-06T22:53:51Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/transport/ProfileResponse.java", "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.ad.transport;\n+\n+import org.elasticsearch.action.FailedNodeException;\n+import org.elasticsearch.action.support.nodes.BaseNodesResponse;\n+import org.elasticsearch.cluster.ClusterName;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.common.xcontent.ToXContentFragment;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+\n+import com.amazon.opendistroforelasticsearch.ad.model.ModelProfile;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * This class consists of the aggregated responses from the nodes\n+ */\n+public class ProfileResponse extends BaseNodesResponse<ProfileNodeResponse> implements ToXContentFragment {\n+    // filed name in toXContent\n+    static final String COORDINATING_NODE = \"coordinating_node\";", "originalCommit": "198676b576a5b79f6f0f59e00d726af315a4cc8c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTE2NzM5OA==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/113#discussion_r421167398", "bodyText": "Moved these strings to CommonName and use CommonName", "author": "kaituo", "createdAt": "2020-05-07T00:23:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTEzODM3Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTE0MDYzOA==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/113#discussion_r421140638", "bodyText": "What is significant about first entry as opposed to others?", "author": "jmazanec15", "createdAt": "2020-05-06T22:59:55Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/transport/ProfileResponse.java", "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.ad.transport;\n+\n+import org.elasticsearch.action.FailedNodeException;\n+import org.elasticsearch.action.support.nodes.BaseNodesResponse;\n+import org.elasticsearch.cluster.ClusterName;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.common.xcontent.ToXContentFragment;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+\n+import com.amazon.opendistroforelasticsearch.ad.model.ModelProfile;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * This class consists of the aggregated responses from the nodes\n+ */\n+public class ProfileResponse extends BaseNodesResponse<ProfileNodeResponse> implements ToXContentFragment {\n+    // filed name in toXContent\n+    static final String COORDINATING_NODE = \"coordinating_node\";\n+    static final String SHINGLE_SIZE = \"shingle_size\";\n+    static final String TOTAL_SIZE = \"total_size\";\n+    static final String MODELS = \"models\";\n+\n+    private ModelProfile[] modelProfile;\n+    private int shingleSize;\n+    private String coordinatingNode;\n+    private long totalSizeInBytes;\n+\n+    /**\n+     * Constructor\n+     *\n+     * @param in StreamInput\n+     * @throws IOException thrown when unable to read from stream\n+     */\n+    public ProfileResponse(StreamInput in) throws IOException {\n+        super(in);\n+        int size = in.readVInt();\n+        modelProfile = new ModelProfile[size];\n+        for (int i = 0; i < size; i++) {\n+            modelProfile[i] = new ModelProfile(in);\n+        }\n+        shingleSize = in.readVInt();\n+        coordinatingNode = in.readString();\n+        totalSizeInBytes = in.readVLong();\n+    }\n+\n+    /**\n+     * Constructor\n+     *\n+     * @param clusterName name of cluster\n+     * @param nodes List of ProfileNodeResponse from nodes\n+     * @param failures List of failures from nodes\n+     */\n+    public ProfileResponse(ClusterName clusterName, List<ProfileNodeResponse> nodes, List<FailedNodeException> failures) {\n+        super(clusterName, nodes, failures);\n+        totalSizeInBytes = 0L;\n+        List<ModelProfile> modelProfileList = new ArrayList<>();\n+        for (ProfileNodeResponse response : nodes) {\n+            String curNodeId = response.getNode().getId();\n+            if (response.getShingleSize() >= 0) {\n+                coordinatingNode = curNodeId;\n+                shingleSize = response.getShingleSize();\n+            }\n+            for (Map.Entry<String, Long> entry : response.getModelSize().entrySet()) {\n+                totalSizeInBytes += entry.getValue();\n+                modelProfileList.add(new ModelProfile(entry.getKey(), entry.getValue(), curNodeId));\n+            }\n+\n+        }\n+        if (coordinatingNode == null) {\n+            coordinatingNode = \"\";\n+        }\n+        this.modelProfile = modelProfileList.toArray(new ModelProfile[0]);", "originalCommit": "198676b576a5b79f6f0f59e00d726af315a4cc8c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTE3MDU5OA==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/113#discussion_r421170598", "bodyText": "It is a trick to convert a list to an array.  This means an empty array, not the first entry.", "author": "kaituo", "createdAt": "2020-05-07T00:33:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTE0MDYzOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTE0ODM1Mg==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/113#discussion_r421148352", "bodyText": "is it used?", "author": "yizheliu-amazon", "createdAt": "2020-05-06T23:22:30Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/transport/ProfileRequest.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.ad.transport;\n+\n+import org.elasticsearch.action.support.nodes.BaseNodesRequest;\n+import org.elasticsearch.cluster.node.DiscoveryNode;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+\n+import com.amazon.opendistroforelasticsearch.ad.model.ProfileName;\n+\n+import java.io.IOException;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+/**\n+ * implements a request to obtain profiles about an AD detector\n+ */\n+public class ProfileRequest extends BaseNodesRequest<ProfileRequest> {\n+\n+    /**\n+     * Key indicating all profiles should be retrieved\n+     */\n+    public static final String ALL_PROFILE_KEY = \"_all\";", "originalCommit": "198676b576a5b79f6f0f59e00d726af315a4cc8c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTE2NjA0NQ==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/113#discussion_r421166045", "bodyText": "good catch.  Removed.", "author": "kaituo", "createdAt": "2020-05-07T00:19:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTE0ODM1Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTE0OTk5Nw==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/113#discussion_r421149997", "bodyText": "use ProfileName enum to replace these?", "author": "yizheliu-amazon", "createdAt": "2020-05-06T23:27:26Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/transport/ProfileResponse.java", "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.ad.transport;\n+\n+import org.elasticsearch.action.FailedNodeException;\n+import org.elasticsearch.action.support.nodes.BaseNodesResponse;\n+import org.elasticsearch.cluster.ClusterName;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.elasticsearch.common.io.stream.StreamOutput;\n+import org.elasticsearch.common.xcontent.ToXContentFragment;\n+import org.elasticsearch.common.xcontent.XContentBuilder;\n+\n+import com.amazon.opendistroforelasticsearch.ad.model.ModelProfile;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * This class consists of the aggregated responses from the nodes\n+ */\n+public class ProfileResponse extends BaseNodesResponse<ProfileNodeResponse> implements ToXContentFragment {\n+    // filed name in toXContent\n+    static final String COORDINATING_NODE = \"coordinating_node\";\n+    static final String SHINGLE_SIZE = \"shingle_size\";\n+    static final String TOTAL_SIZE = \"total_size\";\n+    static final String MODELS = \"models\";", "originalCommit": "198676b576a5b79f6f0f59e00d726af315a4cc8c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTE3MDE3NQ==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/113#discussion_r421170175", "bodyText": "Moved these strings to CommonName and use CommonName", "author": "kaituo", "createdAt": "2020-05-07T00:32:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTE0OTk5Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTE1MTU4NA==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/113#discussion_r421151584", "bodyText": "why removing this?", "author": "yizheliu-amazon", "createdAt": "2020-05-06T23:32:29Z", "path": "src/test/java/test/com/amazon/opendistroforelasticsearch/ad/util/JsonDeserializer.java", "diffHunk": "@@ -333,11 +333,11 @@ public static String getTextValue(String jsonString, String paths, boolean retur\n     }\n \n     /**\n-     * Search an int number inside a JSON string matching the input path expression\n+     * Search an array inside a JSON string matching the input path expression\n      *\n      * @param jsonString an encoded JSON string\n+     * @param function function to parse each element\n      * @param paths      path fragments\n-     * @return list of double", "originalCommit": "198676b576a5b79f6f0f59e00d726af315a4cc8c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTE3MjU2MA==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/113#discussion_r421172560", "bodyText": "added back with changed contents.", "author": "kaituo", "createdAt": "2020-05-07T00:40:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTE1MTU4NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTE1MjI3Mw==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/113#discussion_r421152273", "bodyText": "Is there test case against customized profiles?", "author": "yizheliu-amazon", "createdAt": "2020-05-06T23:34:48Z", "path": "src/test/java/com/amazon/opendistroforelasticsearch/ad/rest/AnomalyDetectorRestApiIT.java", "diffHunk": "@@ -898,4 +898,11 @@ public void testProfileAnomalyDetector() throws Exception {\n         Response profileResponse = getDetectorProfile(detector.getDetectorId());\n         assertEquals(\"Incorrect profile status\", RestStatus.OK, restStatus(profileResponse));\n     }\n+\n+    public void testAllProfileAnomalyDetector() throws Exception {\n+        AnomalyDetector detector = createRandomAnomalyDetector(true, true);\n+\n+        Response profileResponse = getDetectorProfile(detector.getDetectorId(), true);\n+        assertEquals(\"Incorrect profile status\", RestStatus.OK, restStatus(profileResponse));\n+    }", "originalCommit": "198676b576a5b79f6f0f59e00d726af315a4cc8c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTE3MDc4Mw==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/113#discussion_r421170783", "bodyText": "added one.", "author": "kaituo", "createdAt": "2020-05-07T00:34:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTE1MjI3Mw=="}], "type": "inlineReview"}, {"oid": "cab19f982f780f6da8034d3ec98e3062b4b61092", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/commit/cab19f982f780f6da8034d3ec98e3062b4b61092", "message": "Add shingle size, total model size, and model's hash ring to profile API\n\nHash ring helps identify node X runs the AD job for a detector Y with models on node 1,2,3. \u00a0This helps oncalls locate logs. Total model size gives transparency relating to the current memory usage. What's more, shingle size help answer question \"why my detector does not report anything?\"\n\nThis PR adds the above info to profile API via a broadcast call that consults ModelManager and FeatureManager about current state pertaining to a detector. \u00a0Then these states are consolidated into information humans can parse.\n\nThis PR also queries all AD result indices instead of only current result index so that we can fetch a stopped detector's error after the result index with the error is rotated.\n\nTesting done:\n1. add unit tests for the newly added code\n2. Run end-to-end testing to verify new profiles make senses when a detector stops running and is running", "committedDate": "2020-05-07T03:00:33Z", "type": "commit"}, {"oid": "cab19f982f780f6da8034d3ec98e3062b4b61092", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/commit/cab19f982f780f6da8034d3ec98e3062b4b61092", "message": "Add shingle size, total model size, and model's hash ring to profile API\n\nHash ring helps identify node X runs the AD job for a detector Y with models on node 1,2,3. \u00a0This helps oncalls locate logs. Total model size gives transparency relating to the current memory usage. What's more, shingle size help answer question \"why my detector does not report anything?\"\n\nThis PR adds the above info to profile API via a broadcast call that consults ModelManager and FeatureManager about current state pertaining to a detector. \u00a0Then these states are consolidated into information humans can parse.\n\nThis PR also queries all AD result indices instead of only current result index so that we can fetch a stopped detector's error after the result index with the error is rotated.\n\nTesting done:\n1. add unit tests for the newly added code\n2. Run end-to-end testing to verify new profiles make senses when a detector stops running and is running", "committedDate": "2020-05-07T03:00:33Z", "type": "forcePushed"}]}