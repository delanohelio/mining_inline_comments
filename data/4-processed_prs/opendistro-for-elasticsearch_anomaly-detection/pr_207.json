{"pr_number": 207, "pr_title": "Get detector", "pr_createdAt": "2020-08-07T20:12:19Z", "pr_url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/207", "timeline": [{"oid": "892f83099f24262626398c4a04f309d800c30797", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/commit/892f83099f24262626398c4a04f309d800c30797", "message": "Command: Cat command to concatenate and print detectors\n\nCreated command to accept list of detectors to concatenate and\nprint detectors. This is similar to cat command in unix.", "committedDate": "2020-08-07T20:28:25Z", "type": "forcePushed"}, {"oid": "092db6bc2199d8c9c28bad77fec58c425603f1cf", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/commit/092db6bc2199d8c9c28bad77fec58c425603f1cf", "message": "Command: Cat command to concatenate and print detectors\n\nCreated command to accept list of detectors to concatenate and\nprint detectors. This is similar to cat command in unix.", "committedDate": "2020-08-08T22:39:26Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODgzMDk5OA==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/207#discussion_r468830998", "bodyText": "remove?", "author": "kaituo", "createdAt": "2020-08-11T20:00:16Z", "path": "cli/internal/gateway/ad/ad.go", "diffHunk": "@@ -59,6 +61,56 @@ func (g *gateway) buildCreateURL() (*url.URL, error) {\n \treturn endpoint, nil\n }\n \n+// CreateDetector Creates an anomaly detector job.", "originalCommit": "092db6bc2199d8c9c28bad77fec58c425603f1cf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODg4NTg4MA==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/207#discussion_r468885880", "bodyText": "Do you mean to remove this line? In go, if a method is exported, it is practice to write comment else linter will complain. At line 114, i  have a method CreateDetector, hence the comment.", "author": "VijayanB", "createdAt": "2020-08-11T21:52:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODgzMDk5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQwOTIyMw==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/207#discussion_r469409223", "bodyText": "my bad.  I thought the following is a commented out code block.  Does Go has block comment?", "author": "kaituo", "createdAt": "2020-08-12T17:04:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODgzMDk5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU1OTU0MA==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/207#discussion_r469559540", "bodyText": "Yeah. I updated with block comments.", "author": "VijayanB", "createdAt": "2020-08-12T21:33:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODgzMDk5OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODgzMjc2Ng==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/207#discussion_r468832766", "bodyText": "The code looks same as execyteByID.  Am I missing anything?", "author": "kaituo", "createdAt": "2020-08-11T20:04:04Z", "path": "cli/cmd/cat.go", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package cmd\n+\n+import (\n+\t\"encoding/json\"\n+\tentity \"esad/internal/entity/ad\"\n+\t\"esad/internal/handler/ad\"\n+\t\"fmt\"\n+\t\"github.com/spf13/cobra\"\n+)\n+\n+const (\n+\tcommandCat = \"cat\"\n+)\n+\n+//catCmd prints detectors configuration based on id and name pattern.\n+var catCmd = &cobra.Command{\n+\tUse:   commandCat + \" [flags] [list of detectors]\",\n+\tShort: \"Concatenate and print detectors based on id or name pattern\",\n+\tLong:  `concatenate and print detectors based on pattern, use \"\" to make sure the name is not matched with pwd lists'`,\n+\tRun: func(cmd *cobra.Command, args []string) {\n+\t\t//If no args, display usage\n+\t\tif len(args) < 1 {\n+\t\t\tif err := cmd.Usage(); err != nil {\n+\t\t\t\tfmt.Println(err)\n+\t\t\t}\n+\t\t\treturn\n+\t\t}\n+\t\tidStatus, _ := cmd.Flags().GetBool(\"id\")\n+\t\tcommandHandler, err := getCommandHandler()\n+\t\tif err != nil {\n+\t\t\tfmt.Println(err)\n+\t\t}\n+\t\tvar results []*entity.DetectorOutput\n+\t\tif idStatus {\n+\t\t\tresults = executeByID(commandHandler, args)\n+\t\t} else {\n+\t\t\tresults = executeByNames(commandHandler, args)\n+\t\t}\n+\t\tprintDetectors(results)\n+\t},\n+}\n+\n+//executeByNames gets detector output based on name as argument\n+func executeByNames(commandHandler *ad.Handler, args []string) []*entity.DetectorOutput {", "originalCommit": "092db6bc2199d8c9c28bad77fec58c425603f1cf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODg4NzgxMA==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/207#discussion_r468887810", "bodyText": "yes.\nexecute by name calls method ad.GetAnomalyDetectorsByNamePattern which returns []*entity.DetectorOutput, while\nexecuteby id calls method ad.GetAnomalyDetectorsByID which returns *entity.DetectorOutput. Thats way i am not able to pass function as parameter. In go, type has to be matched.", "author": "VijayanB", "createdAt": "2020-08-11T21:57:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODgzMjc2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQxMDg0NA==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/207#discussion_r469410844", "bodyText": "Does it make sense to pass a boolean or enum say \"by field\".  And then you call different functions based on this by field?", "author": "kaituo", "createdAt": "2020-08-12T17:07:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODgzMjc2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU1OTkzNQ==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/207#discussion_r469559935", "bodyText": "Sure. I wrapped the method for executeByID and used flags to differentiate action .", "author": "VijayanB", "createdAt": "2020-08-12T21:34:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODgzMjc2Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODg1OTk0Mw==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/207#discussion_r468859943", "bodyText": "If we add a field in the get detector API on the plugin side, would it break anything here?", "author": "kaituo", "createdAt": "2020-08-11T20:56:21Z", "path": "cli/internal/entity/ad/ad.go", "diffHunk": "@@ -143,3 +143,32 @@ type Container struct {\n type SearchResponse struct {\n \tHits Container `json:\"hits\"`\n }\n+\n+type Metadata CreateDetector\n+\n+type AnomalyDetector struct {\n+\tMetadata\n+\tSchemaVersion  int32  `json:\"schema_version\"`\n+\tLastUpdateTime uint64 `json:\"last_update_time\"`\n+}\n+\n+//DetectorResponse represents detector's setting\n+type DetectorResponse struct {\n+\tID              string          `json:\"_id\"`\n+\tAnomalyDetector AnomalyDetector `json:\"anomaly_detector\"`\n+}\n+\n+//DetectorOutput represents detector's setting displayed to user\n+type DetectorOutput struct {\n+\tID            string", "originalCommit": "092db6bc2199d8c9c28bad77fec58c425603f1cf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODg4NjA0Mg==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/207#discussion_r468886042", "bodyText": "No, It won't break, just that it will not be deserialized.", "author": "VijayanB", "createdAt": "2020-08-11T21:53:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODg1OTk0Mw=="}], "type": "inlineReview"}, {"oid": "31b41e446a2c1d3dca7b6c01dfde13a21960e82f", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/commit/31b41e446a2c1d3dca7b6c01dfde13a21960e82f", "message": "Command: Cat command to concatenate and print detectors\n\nCreated command to accept list of detectors to concatenate and\nprint detectors. This is similar to cat command in unix.", "committedDate": "2020-08-12T21:19:42Z", "type": "forcePushed"}, {"oid": "88e686962380288f1129ec3924a14f40adf8328d", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/commit/88e686962380288f1129ec3924a14f40adf8328d", "message": "Command: Cat command to concatenate and print detectors\n\nCreated command to accept list of detectors to concatenate and\nprint detectors. This is similar to cat command in unix.", "committedDate": "2020-08-12T21:30:55Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDg4NzcwOQ==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/207#discussion_r470887709", "bodyText": "This line seems very long. How about breaking it into two lines?", "author": "ylwu-amzn", "createdAt": "2020-08-14T22:16:42Z", "path": "cli/cmd/cat.go", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package cmd\n+\n+import (\n+\t\"encoding/json\"\n+\tentity \"esad/internal/entity/ad\"\n+\t\"esad/internal/handler/ad\"\n+\t\"fmt\"\n+\t\"github.com/spf13/cobra\"\n+)\n+\n+const (\n+\tcommandCat = \"cat\"\n+)\n+\n+//catCmd prints detectors configuration based on id and name pattern.\n+var catCmd = &cobra.Command{\n+\tUse:   commandCat + \" [flags] [list of detectors]\",\n+\tShort: \"Concatenate and print detectors based on id or name pattern\",\n+\tLong:  `concatenate and print detectors based on pattern, use \"\" to make sure the name is not matched with pwd lists'`,\n+\tRun: func(cmd *cobra.Command, args []string) {\n+\t\t//If no args, display usage\n+\t\tif len(args) < 1 {\n+\t\t\tif err := cmd.Usage(); err != nil {\n+\t\t\t\tfmt.Println(err)\n+\t\t\t}\n+\t\t\treturn\n+\t\t}\n+\t\tidStatus, _ := cmd.Flags().GetBool(\"id\")\n+\t\tcommandHandler, err := getCommandHandler()\n+\t\tif err != nil {\n+\t\t\tfmt.Println(err)\n+\t\t}\n+\t\t// default is name\n+\t\taction := ad.GetAnomalyDetectorsByNamePattern\n+\t\tif idStatus {\n+\t\t\taction = executeByID\n+\t\t}\n+\t\tif results := getDetectors(commandHandler, args, action); results != nil {\n+\t\t\tprintDetectors(results)\n+\t\t}\n+\t},\n+}\n+\n+func getDetectors(commandHandler *ad.Handler, args []string, get func(*ad.Handler, string) ([]*entity.DetectorOutput, error)) []*entity.DetectorOutput {", "originalCommit": "88e686962380288f1129ec3924a14f40adf8328d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDg5MDg3MQ==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/207#discussion_r470890871", "bodyText": "Ack. Changed", "author": "VijayanB", "createdAt": "2020-08-14T22:29:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDg4NzcwOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDg4ODE3Mg==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/207#discussion_r470888172", "bodyText": "This method is not to execute a detector by ID. How about rename it as \"getDetectorByID\"", "author": "ylwu-amzn", "createdAt": "2020-08-14T22:18:39Z", "path": "cli/cmd/cat.go", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package cmd\n+\n+import (\n+\t\"encoding/json\"\n+\tentity \"esad/internal/entity/ad\"\n+\t\"esad/internal/handler/ad\"\n+\t\"fmt\"\n+\t\"github.com/spf13/cobra\"\n+)\n+\n+const (\n+\tcommandCat = \"cat\"\n+)\n+\n+//catCmd prints detectors configuration based on id and name pattern.\n+var catCmd = &cobra.Command{\n+\tUse:   commandCat + \" [flags] [list of detectors]\",\n+\tShort: \"Concatenate and print detectors based on id or name pattern\",\n+\tLong:  `concatenate and print detectors based on pattern, use \"\" to make sure the name is not matched with pwd lists'`,\n+\tRun: func(cmd *cobra.Command, args []string) {\n+\t\t//If no args, display usage\n+\t\tif len(args) < 1 {\n+\t\t\tif err := cmd.Usage(); err != nil {\n+\t\t\t\tfmt.Println(err)\n+\t\t\t}\n+\t\t\treturn\n+\t\t}\n+\t\tidStatus, _ := cmd.Flags().GetBool(\"id\")\n+\t\tcommandHandler, err := getCommandHandler()\n+\t\tif err != nil {\n+\t\t\tfmt.Println(err)\n+\t\t}\n+\t\t// default is name\n+\t\taction := ad.GetAnomalyDetectorsByNamePattern\n+\t\tif idStatus {\n+\t\t\taction = executeByID\n+\t\t}\n+\t\tif results := getDetectors(commandHandler, args, action); results != nil {\n+\t\t\tprintDetectors(results)\n+\t\t}\n+\t},\n+}\n+\n+func getDetectors(commandHandler *ad.Handler, args []string, get func(*ad.Handler, string) ([]*entity.DetectorOutput, error)) []*entity.DetectorOutput {\n+\tvar results []*entity.DetectorOutput\n+\tfor _, detector := range args {\n+\t\toutput, err := get(commandHandler, detector)\n+\t\tif err != nil {\n+\t\t\tfmt.Println(err)\n+\t\t\treturn nil\n+\t\t}\n+\t\tresults = append(results, output...)\n+\t}\n+\treturn results\n+}\n+\n+//executeByID gets detector output based on ID as argument\n+func executeByID(commandHandler *ad.Handler, ID string) ([]*entity.DetectorOutput, error) {", "originalCommit": "88e686962380288f1129ec3924a14f40adf8328d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDg5MDgxNw==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/207#discussion_r470890817", "bodyText": "Ack. Changed", "author": "VijayanB", "createdAt": "2020-08-14T22:28:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDg4ODE3Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDg4OTE0NQ==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/207#discussion_r470889145", "bodyText": "If results is nil, what message will user see?", "author": "ylwu-amzn", "createdAt": "2020-08-14T22:22:10Z", "path": "cli/cmd/cat.go", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package cmd\n+\n+import (\n+\t\"encoding/json\"\n+\tentity \"esad/internal/entity/ad\"\n+\t\"esad/internal/handler/ad\"\n+\t\"fmt\"\n+\t\"github.com/spf13/cobra\"\n+)\n+\n+const (\n+\tcommandCat = \"cat\"\n+)\n+\n+//catCmd prints detectors configuration based on id and name pattern.\n+var catCmd = &cobra.Command{\n+\tUse:   commandCat + \" [flags] [list of detectors]\",\n+\tShort: \"Concatenate and print detectors based on id or name pattern\",\n+\tLong:  `concatenate and print detectors based on pattern, use \"\" to make sure the name is not matched with pwd lists'`,\n+\tRun: func(cmd *cobra.Command, args []string) {\n+\t\t//If no args, display usage\n+\t\tif len(args) < 1 {\n+\t\t\tif err := cmd.Usage(); err != nil {\n+\t\t\t\tfmt.Println(err)\n+\t\t\t}\n+\t\t\treturn\n+\t\t}\n+\t\tidStatus, _ := cmd.Flags().GetBool(\"id\")\n+\t\tcommandHandler, err := getCommandHandler()\n+\t\tif err != nil {\n+\t\t\tfmt.Println(err)\n+\t\t}\n+\t\t// default is name\n+\t\taction := ad.GetAnomalyDetectorsByNamePattern\n+\t\tif idStatus {\n+\t\t\taction = executeByID\n+\t\t}\n+\t\tif results := getDetectors(commandHandler, args, action); results != nil {", "originalCommit": "88e686962380288f1129ec3924a14f40adf8328d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDg5MjU3NQ==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/207#discussion_r470892575", "bodyText": "So only possibility getDetectors can get nil is if there is an error from GET method. In that case it will display the error message ( why get failed ). This was handled inside getDetectors. I refactored now to return err and print outside now.", "author": "VijayanB", "createdAt": "2020-08-14T22:35:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDg4OTE0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDg5MzUyOQ==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/207#discussion_r470893529", "bodyText": "only possibility getDetectors can get nil is if there is an error from GET method\n\nIf user input an invalid detector id, will throw an error or return empty results ?  In print method for _, d := range results {, if results is empty, will not print anything?", "author": "ylwu-amzn", "createdAt": "2020-08-14T22:39:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDg4OTE0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkwNTE1MQ==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/207#discussion_r470905151", "bodyText": "There is will be either json output or error message per detector.", "author": "VijayanB", "createdAt": "2020-08-14T23:35:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDg4OTE0NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDg5MDE0MA==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/207#discussion_r470890140", "bodyText": "Is it best practice to use single-letter variable name in Go? How about replace d with detector ? That will be easier to read the code.", "author": "ylwu-amzn", "createdAt": "2020-08-14T22:26:11Z", "path": "cli/cmd/cat.go", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package cmd\n+\n+import (\n+\t\"encoding/json\"\n+\tentity \"esad/internal/entity/ad\"\n+\t\"esad/internal/handler/ad\"\n+\t\"fmt\"\n+\t\"github.com/spf13/cobra\"\n+)\n+\n+const (\n+\tcommandCat = \"cat\"\n+)\n+\n+//catCmd prints detectors configuration based on id and name pattern.\n+var catCmd = &cobra.Command{\n+\tUse:   commandCat + \" [flags] [list of detectors]\",\n+\tShort: \"Concatenate and print detectors based on id or name pattern\",\n+\tLong:  `concatenate and print detectors based on pattern, use \"\" to make sure the name is not matched with pwd lists'`,\n+\tRun: func(cmd *cobra.Command, args []string) {\n+\t\t//If no args, display usage\n+\t\tif len(args) < 1 {\n+\t\t\tif err := cmd.Usage(); err != nil {\n+\t\t\t\tfmt.Println(err)\n+\t\t\t}\n+\t\t\treturn\n+\t\t}\n+\t\tidStatus, _ := cmd.Flags().GetBool(\"id\")\n+\t\tcommandHandler, err := getCommandHandler()\n+\t\tif err != nil {\n+\t\t\tfmt.Println(err)\n+\t\t}\n+\t\t// default is name\n+\t\taction := ad.GetAnomalyDetectorsByNamePattern\n+\t\tif idStatus {\n+\t\t\taction = executeByID\n+\t\t}\n+\t\tif results := getDetectors(commandHandler, args, action); results != nil {\n+\t\t\tprintDetectors(results)\n+\t\t}\n+\t},\n+}\n+\n+func getDetectors(commandHandler *ad.Handler, args []string, get func(*ad.Handler, string) ([]*entity.DetectorOutput, error)) []*entity.DetectorOutput {\n+\tvar results []*entity.DetectorOutput\n+\tfor _, detector := range args {\n+\t\toutput, err := get(commandHandler, detector)\n+\t\tif err != nil {\n+\t\t\tfmt.Println(err)\n+\t\t\treturn nil\n+\t\t}\n+\t\tresults = append(results, output...)\n+\t}\n+\treturn results\n+}\n+\n+//executeByID gets detector output based on ID as argument\n+func executeByID(commandHandler *ad.Handler, ID string) ([]*entity.DetectorOutput, error) {\n+\n+\toutput, err := ad.GetAnomalyDetectorByID(commandHandler, ID)\n+\tif err != nil {\n+\t\treturn nil, err\n+\t}\n+\treturn []*entity.DetectorOutput{output}, nil\n+}\n+\n+//printDetectors displays the list of output. Since this is json format, use indent function to\n+// pretty print before printing on console\n+func printDetectors(results []*entity.DetectorOutput) {\n+\tif results == nil {\n+\t\treturn\n+\t}\n+\tfor _, d := range results {", "originalCommit": "88e686962380288f1129ec3924a14f40adf8328d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDg5Mzg4MA==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/207#discussion_r470893880", "bodyText": "https://github.com/golang/go/wiki/CodeReviewComments#variable-names\nThe convention is you only need more descriptive if it is used far away from declaration. Especially for iterators, single variable name is preferred.", "author": "VijayanB", "createdAt": "2020-08-14T22:41:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDg5MDE0MA=="}], "type": "inlineReview"}, {"oid": "98101f2bd833d452535bc8967cdd6dec7cef43ba", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/commit/98101f2bd833d452535bc8967cdd6dec7cef43ba", "message": "Command: Cat command to concatenate and print detectors\n\nCreated command to accept list of detectors to concatenate and\nprint detectors. This is similar to cat command in unix.", "committedDate": "2020-08-14T22:28:34Z", "type": "forcePushed"}, {"oid": "37f4e4c7157e94158cf25bae3b9d20c4aaeeb1dd", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/commit/37f4e4c7157e94158cf25bae3b9d20c4aaeeb1dd", "message": "Command: Cat command to concatenate and print detectors\n\nCreated command to accept list of detectors to concatenate and\nprint detectors. This is similar to cat command in unix.", "committedDate": "2020-08-14T22:43:48Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDg5MjgyMQ==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/207#discussion_r470892821", "bodyText": "The message \"Input is name or pattern\" is visible to user? Have you confirmed the wording with tech writer? I feel we should say Input is detector name or name pattern, Input is detector id", "author": "ylwu-amzn", "createdAt": "2020-08-14T22:36:41Z", "path": "cli/cmd/cat.go", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package cmd\n+\n+import (\n+\t\"encoding/json\"\n+\tentity \"esad/internal/entity/ad\"\n+\t\"esad/internal/handler/ad\"\n+\t\"fmt\"\n+\t\"github.com/spf13/cobra\"\n+)\n+\n+const (\n+\tcommandCat = \"cat\"\n+)\n+\n+//catCmd prints detectors configuration based on id and name pattern.\n+var catCmd = &cobra.Command{\n+\tUse:   commandCat + \" [flags] [list of detectors]\",\n+\tShort: \"Concatenate and print detectors based on id or name pattern\",\n+\tLong:  `concatenate and print detectors based on pattern, use \"\" to make sure the name is not matched with pwd lists'`,\n+\tRun: func(cmd *cobra.Command, args []string) {\n+\t\t//If no args, display usage\n+\t\tif len(args) < 1 {\n+\t\t\tif err := cmd.Usage(); err != nil {\n+\t\t\t\tfmt.Println(err)\n+\t\t\t}\n+\t\t\treturn\n+\t\t}\n+\t\tidStatus, _ := cmd.Flags().GetBool(\"id\")\n+\t\tcommandHandler, err := getCommandHandler()\n+\t\tif err != nil {\n+\t\t\tfmt.Println(err)\n+\t\t}\n+\t\t// default is name\n+\t\taction := ad.GetAnomalyDetectorsByNamePattern\n+\t\tif idStatus {\n+\t\t\taction = getDetectorsByID\n+\t\t}\n+\t\tif results := getDetectors(commandHandler, args, action); results != nil {\n+\t\t\tprintDetectors(results)\n+\t\t}\n+\t},\n+}\n+\n+func getDetectors(\n+\tcommandHandler *ad.Handler, args []string, get func(*ad.Handler, string) (\n+\t\t[]*entity.DetectorOutput, error)) []*entity.DetectorOutput {\n+\tvar results []*entity.DetectorOutput\n+\tfor _, detector := range args {\n+\t\toutput, err := get(commandHandler, detector)\n+\t\tif err != nil {\n+\t\t\tfmt.Println(err)\n+\t\t\treturn nil\n+\t\t}\n+\t\tresults = append(results, output...)\n+\t}\n+\treturn results\n+}\n+\n+//getDetectorsByID gets detector output based on ID as argument\n+func getDetectorsByID(commandHandler *ad.Handler, ID string) ([]*entity.DetectorOutput, error) {\n+\n+\toutput, err := ad.GetAnomalyDetectorByID(commandHandler, ID)\n+\tif err != nil {\n+\t\treturn nil, err\n+\t}\n+\treturn []*entity.DetectorOutput{output}, nil\n+}\n+\n+//printDetectors displays the list of output. Since this is json format, use indent function to\n+// pretty print before printing on console\n+func printDetectors(results []*entity.DetectorOutput) {\n+\tif results == nil {\n+\t\treturn\n+\t}\n+\tfor _, d := range results {\n+\t\tformattedOutput, err := json.MarshalIndent(d, \"\", \"  \")\n+\t\tif err != nil {\n+\t\t\tfmt.Println(err)\n+\t\t\treturn\n+\t\t}\n+\t\tfmt.Println(string(formattedOutput))\n+\t}\n+}\n+\n+func init() {\n+\tesadCmd.AddCommand(catCmd)\n+\tcatCmd.Flags().BoolP(\"name\", \"\", true, \"Input is name or pattern\")", "originalCommit": "98101f2bd833d452535bc8967cdd6dec7cef43ba", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkwNTAyMQ==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/207#discussion_r470905021", "bodyText": "As discussed offline, i will fix this accordingly.", "author": "VijayanB", "createdAt": "2020-08-14T23:34:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDg5MjgyMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU2ODkwNg==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/207#discussion_r472568906", "bodyText": "Sure, will approve this PR. Please fix this in another PR.", "author": "ylwu-amzn", "createdAt": "2020-08-19T00:38:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDg5MjgyMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkwNTc5NQ==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/207#discussion_r470905795", "bodyText": "What use cases have you tested for the name pattern?  SearchDetectorByName method is using match query. Why not use regexp ?\n\tpayload := entity.SearchRequest{\n\t\tQuery: entity.SearchQuery{\n\t\t\tMatch: entity.Match{\n\t\t\t\tName: name,\n\t\t\t},\n\t\t},\n\t}", "author": "ylwu-amzn", "createdAt": "2020-08-14T23:38:57Z", "path": "cli/internal/controller/ad/ad.go", "diffHunk": "@@ -467,5 +487,35 @@ func (c controller) DeleteDetectorByName(ctx context.Context, name string, force\n \t\t}\n \t}\n \treturn nil\n+}\n \n+//GetDetectorsByName get detector based on name pattern. It first calls SearchDetectorByName and then\n+// gets lists of detectorId and call GetDetector to get individual detector configuration\n+func (c controller) GetDetectorsByName(ctx context.Context, pattern string, display bool) ([]*entity.DetectorOutput, error) {\n+\tmatchedDetectors, err := c.getDetectorsToProcess(ctx, \"fetch\", pattern)", "originalCommit": "37f4e4c7157e94158cf25bae3b9d20c4aaeeb1dd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkwNjEyNA==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/207#discussion_r470906124", "bodyText": "I followed this from documentation:\nhttps://opendistro.github.io/for-elasticsearch-docs/docs/ad/api/#search-detector", "author": "VijayanB", "createdAt": "2020-08-14T23:40:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkwNTc5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU4MTM4MA==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/207#discussion_r471581380", "bodyText": "Can you do some test for different regex use cases? Like \"test.*\", \"test[0-9]\" etc.", "author": "ylwu-amzn", "createdAt": "2020-08-17T16:03:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkwNTc5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE4NTg2Nw==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/207#discussion_r474185867", "bodyText": "I will create an issue to update search detecter using regex and will submit new PR with test cases.", "author": "VijayanB", "createdAt": "2020-08-20T18:25:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkwNTc5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE4ODQyNg==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/207#discussion_r474188426", "bodyText": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/issues/213", "author": "VijayanB", "createdAt": "2020-08-20T18:29:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkwNTc5NQ=="}], "type": "inlineReview"}, {"oid": "ed28a5f413c909913aa0859488efdf4ddb95b9b5", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/commit/ed28a5f413c909913aa0859488efdf4ddb95b9b5", "message": "Include comments for gateway methods\n\nEvery exported go method should have comments for readability and usage.\nAdd appropriate commands and sample data is copied from\nhttps://opendistro.github.io/for-elasticsearch-docs/docs/ad/api", "committedDate": "2020-08-20T18:32:00Z", "type": "commit"}, {"oid": "dddc3bb39bc50b1374fe152ae79d01cf916150a3", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/commit/dddc3bb39bc50b1374fe152ae79d01cf916150a3", "message": "Add GetDetector Gateway\n\nAdded function and test to check get response\nand regenerated mocks as well", "committedDate": "2020-08-20T18:32:00Z", "type": "commit"}, {"oid": "0746fec2f68c587561f096840e7d51fcc0ccb893", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/commit/0746fec2f68c587561f096840e7d51fcc0ccb893", "message": "Entity: Added entity to deserialize response\n\nUsed by GetDetectorController to deserialize\nresponse from gateway to type.", "committedDate": "2020-08-20T18:32:00Z", "type": "commit"}, {"oid": "9a43f925b14f776634b02ba9b64daedf7d2b5ed1", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/commit/9a43f925b14f776634b02ba9b64daedf7d2b5ed1", "message": "Mapper: function to map from json to structure\n\nMapper to convert gateway response to structure.", "committedDate": "2020-08-20T18:32:00Z", "type": "commit"}, {"oid": "8086177398e107f4c277ca45206faf7bf9fd04ae", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/commit/8086177398e107f4c277ca45206faf7bf9fd04ae", "message": "Controller: Get Detector based on Id and Name\n\nGetDetector will call gateway to get configuration\nGetDetectorByName will first call SearchDetector to get ID from Name pattern.\nLater, it will call GetDetector to get details.", "committedDate": "2020-08-20T18:32:01Z", "type": "commit"}, {"oid": "6964ea0da9df8fa77b86768d805ed064fc63bf2a", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/commit/6964ea0da9df8fa77b86768d805ed064fc63bf2a", "message": "Handler: GetDetector handler to call controller\n\nHandler for cat command, this will get list of detector\nbased on id and name pattern", "committedDate": "2020-08-20T18:32:01Z", "type": "commit"}, {"oid": "1c790a29c7b5afc69c55512046b678b5e5fdb80f", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/commit/1c790a29c7b5afc69c55512046b678b5e5fdb80f", "message": "Command: Cat command to concatenate and print detectors\n\nCreated command to accept list of detectors to concatenate and\nprint detectors. This is similar to cat command in unix.", "committedDate": "2020-08-20T18:32:01Z", "type": "commit"}, {"oid": "1c790a29c7b5afc69c55512046b678b5e5fdb80f", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/commit/1c790a29c7b5afc69c55512046b678b5e5fdb80f", "message": "Command: Cat command to concatenate and print detectors\n\nCreated command to accept list of detectors to concatenate and\nprint detectors. This is similar to cat command in unix.", "committedDate": "2020-08-20T18:32:01Z", "type": "forcePushed"}]}