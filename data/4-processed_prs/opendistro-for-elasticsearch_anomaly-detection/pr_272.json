{"pr_number": 272, "pr_title": "Added User support for background job and API Transport Actions", "pr_createdAt": "2020-10-17T19:52:40Z", "pr_url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/272", "timeline": [{"oid": "76f511b2dc95e4732f6b336f44f27d83d5ca9a4d", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/commit/76f511b2dc95e4732f6b336f44f27d83d5ca9a4d", "message": "Added User support for background job and API Transport Actions", "committedDate": "2020-10-17T19:51:37Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjk4ODEyNg==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/272#discussion_r506988126", "bodyText": "What was the reasoning for creating an entire new SearchAnomalyRequest class rather than adding the auth field to the searchRequest class?", "author": "ohltyler", "createdAt": "2020-10-17T21:56:22Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/rest/AbstractSearchAction.java", "diffHunk": "@@ -74,12 +76,14 @@ protected RestChannelConsumer prepareRequest(RestRequest request, NodeClient cli\n         if (!EnabledSetting.isADPluginEnabled()) {\n             throw new IllegalStateException(CommonErrorMessages.DISABLED_ERR_MSG);\n         }\n+        String authHeader = request.header(ConfigConstants.AUTHORIZATION);\n         SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder();\n         searchSourceBuilder.parseXContent(request.contentOrSourceParamParser());\n         searchSourceBuilder.fetchSource(getSourceContext(request));\n         searchSourceBuilder.seqNoAndPrimaryTerm(true).version(true);\n         SearchRequest searchRequest = new SearchRequest().source(searchSourceBuilder).indices(this.index);\n-        return channel -> client.execute(actionType, searchRequest, search(channel));\n+        SearchAnomalyRequest searchAnomalyRequest = new SearchAnomalyRequest(searchRequest, authHeader);", "originalCommit": "76f511b2dc95e4732f6b336f44f27d83d5ca9a4d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjk4OTQ5Mg==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/272#discussion_r506989492", "bodyText": "Yeah good question, we need the authHeader to pass into the Transport layer.\nAnd existing SearchRequest couldn't support that.", "author": "saratvemulapalli", "createdAt": "2020-10-17T22:14:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjk4ODEyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjk5MDIxMQ==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/272#discussion_r506990211", "bodyText": "Cool, makes sense.", "author": "ohltyler", "createdAt": "2020-10-17T22:24:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjk4ODEyNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjk4ODU4MQ==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/272#discussion_r506988581", "bodyText": "minor: should this info log be removed?", "author": "ohltyler", "createdAt": "2020-10-17T22:01:58Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/transport/SearchAnomalyResultTransportAction.java", "diffHunk": "@@ -15,28 +15,100 @@\n \n package com.amazon.opendistroforelasticsearch.ad.transport;\n \n+import static com.amazon.opendistroforelasticsearch.ad.settings.AnomalyDetectorSettings.FILTER_BY_BACKEND_ROLES;\n+\n+import java.io.IOException;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n import org.elasticsearch.action.ActionListener;\n import org.elasticsearch.action.search.SearchRequest;\n import org.elasticsearch.action.search.SearchResponse;\n import org.elasticsearch.action.support.ActionFilters;\n import org.elasticsearch.action.support.HandledTransportAction;\n import org.elasticsearch.client.Client;\n+import org.elasticsearch.client.Request;\n+import org.elasticsearch.client.Response;\n+import org.elasticsearch.client.ResponseListener;\n+import org.elasticsearch.client.RestClient;\n+import org.elasticsearch.cluster.service.ClusterService;\n import org.elasticsearch.common.inject.Inject;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.util.concurrent.ThreadContext;\n import org.elasticsearch.tasks.Task;\n import org.elasticsearch.transport.TransportService;\n \n-public class SearchAnomalyResultTransportAction extends HandledTransportAction<SearchRequest, SearchResponse> {\n+import com.amazon.opendistroforelasticsearch.ad.settings.AnomalyDetectorSettings;\n+import com.amazon.opendistroforelasticsearch.ad.util.RestHandlerUtils;\n+import com.amazon.opendistroforelasticsearch.commons.authuser.AuthUserRequestBuilder;\n+import com.amazon.opendistroforelasticsearch.commons.authuser.User;\n+\n+public class SearchAnomalyResultTransportAction extends HandledTransportAction<SearchAnomalyRequest, SearchResponse> {\n+    private final Logger logger = LogManager.getLogger(SearchAnomalyResultTransportAction.class);\n \n     private final Client client;\n+    private final RestClient restClient;\n+    private volatile Boolean filterEnabled;\n \n     @Inject\n-    public SearchAnomalyResultTransportAction(TransportService transportService, ActionFilters actionFilters, Client client) {\n-        super(SearchAnomalyResultAction.NAME, transportService, actionFilters, SearchRequest::new);\n+    public SearchAnomalyResultTransportAction(\n+        Settings settings,\n+        TransportService transportService,\n+        ClusterService clusterService,\n+        ActionFilters actionFilters,\n+        Client client,\n+        RestClient restClient\n+    ) {\n+        super(SearchAnomalyResultAction.NAME, transportService, actionFilters, SearchAnomalyRequest::new);\n         this.client = client;\n+        this.restClient = restClient;\n+        filterEnabled = AnomalyDetectorSettings.FILTER_BY_BACKEND_ROLES.get(settings);\n+        clusterService.getClusterSettings().addSettingsUpdateConsumer(FILTER_BY_BACKEND_ROLES, it -> filterEnabled = it);\n     }\n \n     @Override\n-    protected void doExecute(Task task, SearchRequest request, ActionListener<SearchResponse> listener) {\n+    protected void doExecute(Task task, SearchAnomalyRequest request, ActionListener<SearchResponse> listener) {\n+        try (ThreadContext.StoredContext context = client.threadPool().getThreadContext().stashContext()) {\n+            validateRole(request, listener);\n+        } catch (Exception e) {\n+            logger.error(e);\n+        }\n+    }\n+\n+    private void validateRole(SearchAnomalyRequest request, ActionListener<SearchResponse> listener) {\n+        if (request.getAuthHeader() == null) {\n+            // Auth Header is empty when 1. Security is disabled. 2. When user is super-admin\n+            // Proceed with search\n+            search(request.getSearchRequest(), listener);\n+        } else if (!filterEnabled) {\n+            // Security is enabled and filter is disabled\n+            // Proceed with search as user is already authenticated to hit this API.\n+            search(request.getSearchRequest(), listener);\n+        } else {\n+            // Security is enabled and filter is enabled\n+            Request authRequest = new AuthUserRequestBuilder(request.getAuthHeader()).build();\n+            restClient.performRequestAsync(authRequest, new ResponseListener() {\n+                @Override\n+                public void onSuccess(Response response) {\n+                    try {\n+                        User user = new User(response);\n+                        RestHandlerUtils.addFilter(user, request.getSearchRequest().source(), \"user.backend_roles\");\n+                        logger.info(\"Filtering result by \" + user.getBackendRoles());", "originalCommit": "76f511b2dc95e4732f6b336f44f27d83d5ca9a4d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjk4OTU0OA==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/272#discussion_r506989548", "bodyText": "Sure I'll move it to debug level.", "author": "saratvemulapalli", "createdAt": "2020-10-17T22:14:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjk4ODU4MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzAwNDQzMA==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/272#discussion_r507004430", "bodyText": "Any particular reason you are not calling listener.onFailure(ex)?", "author": "skkosuri-amzn", "createdAt": "2020-10-18T01:46:17Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/transport/DeleteAnomalyDetectorTransportAction.java", "diffHunk": "@@ -74,24 +75,31 @@ protected void doExecute(Task task, DeleteAnomalyDetectorRequest request, Action\n         String detectorId = request.getDetectorID();\n         LOG.info(\"Delete anomaly detector job {}\", detectorId);\n \n-        getDetectorJob(detectorId, listener, () -> deleteAnomalyDetectorJobDoc(detectorId, listener));\n-\n-        DeleteRequest deleteRequest = new DeleteRequest(AnomalyDetectorJob.ANOMALY_DETECTOR_JOB_INDEX, detectorId)\n-            .setRefreshPolicy(WriteRequest.RefreshPolicy.IMMEDIATE);\n-        client.delete(deleteRequest, ActionListener.wrap(response -> {\n-            if (response.getResult() == DocWriteResponse.Result.DELETED || response.getResult() == DocWriteResponse.Result.NOT_FOUND) {\n-                deleteDetectorStateDoc(detectorId, listener);\n-            } else {\n-                LOG.error(\"Fail to delete anomaly detector job {}\", detectorId);\n-            }\n-        }, exception -> {\n-            if (exception instanceof IndexNotFoundException) {\n-                deleteDetectorStateDoc(detectorId, listener);\n-            } else {\n-                LOG.error(\"Failed to delete anomaly detector job\", exception);\n-                listener.onFailure(exception);\n-            }\n-        }));\n+        // By the time request reaches here, the user permissions are validated by Security plugin.\n+        // Since the detectorID is provided, this can only happen if User is part of a role which has access\n+        // to the detector. This is filtered by our Search Detector API.\n+        try (ThreadContext.StoredContext context = client.threadPool().getThreadContext().stashContext()) {\n+            getDetectorJob(detectorId, listener, () -> deleteAnomalyDetectorJobDoc(detectorId, listener));\n+\n+            DeleteRequest deleteRequest = new DeleteRequest(AnomalyDetectorJob.ANOMALY_DETECTOR_JOB_INDEX, detectorId)\n+                .setRefreshPolicy(WriteRequest.RefreshPolicy.IMMEDIATE);\n+            client.delete(deleteRequest, ActionListener.wrap(response -> {\n+                if (response.getResult() == DocWriteResponse.Result.DELETED || response.getResult() == DocWriteResponse.Result.NOT_FOUND) {\n+                    deleteDetectorStateDoc(detectorId, listener);\n+                } else {\n+                    LOG.error(\"Fail to delete anomaly detector job {}\", detectorId);\n+                }\n+            }, exception -> {\n+                if (exception instanceof IndexNotFoundException) {\n+                    deleteDetectorStateDoc(detectorId, listener);\n+                } else {\n+                    LOG.error(\"Failed to delete anomaly detector job\", exception);\n+                    listener.onFailure(exception);\n+                }\n+            }));\n+        } catch (Exception e) {\n+            LOG.error(e);", "originalCommit": "76f511b2dc95e4732f6b336f44f27d83d5ca9a4d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzAxMTMyMA==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/272#discussion_r507011320", "bodyText": "No reason, I missed it : )", "author": "saratvemulapalli", "createdAt": "2020-10-18T03:27:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzAwNDQzMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzAwNDQ2OQ==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/272#discussion_r507004469", "bodyText": "same comment log and call onFailure(..)", "author": "skkosuri-amzn", "createdAt": "2020-10-18T01:46:56Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/transport/GetAnomalyDetectorTransportAction.java", "diffHunk": "@@ -102,16 +103,20 @@ protected void doExecute(Task task, GetAnomalyDetectorRequest request, ActionLis\n         boolean all = request.isAll();\n         boolean returnJob = request.isReturnJob();\n \n-        if (!Strings.isEmpty(typesStr) || rawPath.endsWith(PROFILE) || rawPath.endsWith(PROFILE + \"/\")) {\n-            profileRunner.profile(detectorID, getProfileActionListener(listener, detectorID), getProfilesToCollect(typesStr, all));\n-        } else {\n-            MultiGetRequest.Item adItem = new MultiGetRequest.Item(ANOMALY_DETECTORS_INDEX, detectorID).version(version);\n-            MultiGetRequest multiGetRequest = new MultiGetRequest().add(adItem);\n-            if (returnJob) {\n-                MultiGetRequest.Item adJobItem = new MultiGetRequest.Item(ANOMALY_DETECTOR_JOB_INDEX, detectorID).version(version);\n-                multiGetRequest.add(adJobItem);\n+        try (ThreadContext.StoredContext context = client.threadPool().getThreadContext().stashContext()) {\n+            if (!Strings.isEmpty(typesStr) || rawPath.endsWith(PROFILE) || rawPath.endsWith(PROFILE + \"/\")) {\n+                profileRunner.profile(detectorID, getProfileActionListener(listener, detectorID), getProfilesToCollect(typesStr, all));\n+            } else {\n+                MultiGetRequest.Item adItem = new MultiGetRequest.Item(ANOMALY_DETECTORS_INDEX, detectorID).version(version);\n+                MultiGetRequest multiGetRequest = new MultiGetRequest().add(adItem);\n+                if (returnJob) {\n+                    MultiGetRequest.Item adJobItem = new MultiGetRequest.Item(ANOMALY_DETECTOR_JOB_INDEX, detectorID).version(version);\n+                    multiGetRequest.add(adJobItem);\n+                }\n+                client.multiGet(multiGetRequest, onMultiGetResponse(listener, returnJob, detectorID));\n             }\n-            client.multiGet(multiGetRequest, onMultiGetResponse(listener, returnJob, detectorID));\n+        } catch (Exception e) {\n+            LOG.error(e);", "originalCommit": "76f511b2dc95e4732f6b336f44f27d83d5ca9a4d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzAxMTMzMQ==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/272#discussion_r507011331", "bodyText": "Sure..done.", "author": "saratvemulapalli", "createdAt": "2020-10-18T03:27:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzAwNDQ2OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzAwNDQ3Mw==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/272#discussion_r507004473", "bodyText": "same comment log and call onFailure(..)", "author": "skkosuri-amzn", "createdAt": "2020-10-18T01:47:10Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/transport/IndexAnomalyDetectorTransportAction.java", "diffHunk": "@@ -72,25 +77,27 @@ protected void doExecute(Task task, IndexAnomalyDetectorRequest request, ActionL\n         Integer maxMultiEntityAnomalyDetectors = request.getMaxMultiEntityAnomalyDetectors();\n         Integer maxAnomalyFeatures = request.getMaxAnomalyFeatures();\n \n-        IndexAnomalyDetectorActionHandler indexAnomalyDetectorActionHandler = new IndexAnomalyDetectorActionHandler(\n-            clusterService,\n-            client,\n-            listener,\n-            anomalyDetectionIndices,\n-            detectorId,\n-            seqNo,\n-            primaryTerm,\n-            refreshPolicy,\n-            detector,\n-            requestTimeout,\n-            maxSingleEntityAnomalyDetectors,\n-            maxMultiEntityAnomalyDetectors,\n-            maxAnomalyFeatures,\n-            method,\n-            xContentRegistry\n-        );\n-        try {\n-            indexAnomalyDetectorActionHandler.start();\n+        try (ThreadContext.StoredContext context = client.threadPool().getThreadContext().stashContext()) {\n+            IndexAnomalyDetectorActionHandler indexAnomalyDetectorActionHandler = new IndexAnomalyDetectorActionHandler(\n+                clusterService,\n+                client,\n+                listener,\n+                anomalyDetectionIndices,\n+                detectorId,\n+                seqNo,\n+                primaryTerm,\n+                refreshPolicy,\n+                detector,\n+                requestTimeout,\n+                maxSingleEntityAnomalyDetectors,\n+                maxMultiEntityAnomalyDetectors,\n+                maxAnomalyFeatures,\n+                method,\n+                xContentRegistry,\n+                restClient,\n+                request.getAuthHeader()\n+            );\n+            indexAnomalyDetectorActionHandler.resolveUserAndStart();\n         } catch (Exception e) {\n             LOG.error(e);", "originalCommit": "76f511b2dc95e4732f6b336f44f27d83d5ca9a4d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzAxMTM0Mw==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/272#discussion_r507011343", "bodyText": "Sure..done", "author": "saratvemulapalli", "createdAt": "2020-10-18T03:28:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzAwNDQ3Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzAwNDQ5Mw==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/272#discussion_r507004493", "bodyText": "same comment log and call onFailure(..)", "author": "skkosuri-amzn", "createdAt": "2020-10-18T01:47:42Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/transport/SearchAnomalyResultTransportAction.java", "diffHunk": "@@ -15,28 +15,100 @@\n \n package com.amazon.opendistroforelasticsearch.ad.transport;\n \n+import static com.amazon.opendistroforelasticsearch.ad.settings.AnomalyDetectorSettings.FILTER_BY_BACKEND_ROLES;\n+\n+import java.io.IOException;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n import org.elasticsearch.action.ActionListener;\n import org.elasticsearch.action.search.SearchRequest;\n import org.elasticsearch.action.search.SearchResponse;\n import org.elasticsearch.action.support.ActionFilters;\n import org.elasticsearch.action.support.HandledTransportAction;\n import org.elasticsearch.client.Client;\n+import org.elasticsearch.client.Request;\n+import org.elasticsearch.client.Response;\n+import org.elasticsearch.client.ResponseListener;\n+import org.elasticsearch.client.RestClient;\n+import org.elasticsearch.cluster.service.ClusterService;\n import org.elasticsearch.common.inject.Inject;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.util.concurrent.ThreadContext;\n import org.elasticsearch.tasks.Task;\n import org.elasticsearch.transport.TransportService;\n \n-public class SearchAnomalyResultTransportAction extends HandledTransportAction<SearchRequest, SearchResponse> {\n+import com.amazon.opendistroforelasticsearch.ad.settings.AnomalyDetectorSettings;\n+import com.amazon.opendistroforelasticsearch.ad.util.RestHandlerUtils;\n+import com.amazon.opendistroforelasticsearch.commons.authuser.AuthUserRequestBuilder;\n+import com.amazon.opendistroforelasticsearch.commons.authuser.User;\n+\n+public class SearchAnomalyResultTransportAction extends HandledTransportAction<SearchAnomalyRequest, SearchResponse> {\n+    private final Logger logger = LogManager.getLogger(SearchAnomalyResultTransportAction.class);\n \n     private final Client client;\n+    private final RestClient restClient;\n+    private volatile Boolean filterEnabled;\n \n     @Inject\n-    public SearchAnomalyResultTransportAction(TransportService transportService, ActionFilters actionFilters, Client client) {\n-        super(SearchAnomalyResultAction.NAME, transportService, actionFilters, SearchRequest::new);\n+    public SearchAnomalyResultTransportAction(\n+        Settings settings,\n+        TransportService transportService,\n+        ClusterService clusterService,\n+        ActionFilters actionFilters,\n+        Client client,\n+        RestClient restClient\n+    ) {\n+        super(SearchAnomalyResultAction.NAME, transportService, actionFilters, SearchAnomalyRequest::new);\n         this.client = client;\n+        this.restClient = restClient;\n+        filterEnabled = AnomalyDetectorSettings.FILTER_BY_BACKEND_ROLES.get(settings);\n+        clusterService.getClusterSettings().addSettingsUpdateConsumer(FILTER_BY_BACKEND_ROLES, it -> filterEnabled = it);\n     }\n \n     @Override\n-    protected void doExecute(Task task, SearchRequest request, ActionListener<SearchResponse> listener) {\n+    protected void doExecute(Task task, SearchAnomalyRequest request, ActionListener<SearchResponse> listener) {\n+        try (ThreadContext.StoredContext context = client.threadPool().getThreadContext().stashContext()) {\n+            validateRole(request, listener);\n+        } catch (Exception e) {\n+            logger.error(e);", "originalCommit": "76f511b2dc95e4732f6b336f44f27d83d5ca9a4d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzAxMTM1Mg==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/272#discussion_r507011352", "bodyText": "Sure..done", "author": "saratvemulapalli", "createdAt": "2020-10-18T03:28:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzAwNDQ5Mw=="}], "type": "inlineReview"}, {"oid": "e1824c14904e1beb0794258c54ec72c91b347798", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/commit/e1824c14904e1beb0794258c54ec72c91b347798", "message": "Moving logs to debug and handling transport failures", "committedDate": "2020-10-18T03:25:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzIwNzU0OQ==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/272#discussion_r507207549", "bodyText": "change to log.error?", "author": "ylwu-amzn", "createdAt": "2020-10-18T20:10:36Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/AnomalyDetectorPlugin.java", "diffHunk": "@@ -309,6 +313,12 @@ private static Void initGson() {\n \n         double modelMaxSizePercent = AnomalyDetectorSettings.MODEL_MAX_SIZE_PERCENTAGE.get(settings);\n \n+        try {\n+            this.restClient = new SecureRestClientBuilder(settings, environment.configFile()).build();\n+        } catch (IOException e) {\n+            e.printStackTrace();", "originalCommit": "e1824c14904e1beb0794258c54ec72c91b347798", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzIxMzYzMw==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/272#discussion_r507213633", "bodyText": "Good point sure.", "author": "saratvemulapalli", "createdAt": "2020-10-18T21:06:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzIwNzU0OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzIwNzczNQ==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/272#discussion_r507207735", "bodyText": "Can we only use this restClient to talk to security plugin ? Can we use it to call other plugins?", "author": "ylwu-amzn", "createdAt": "2020-10-18T20:12:26Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/rest/handler/IndexAnomalyDetectorActionHandler.java", "diffHunk": "@@ -112,6 +120,8 @@\n      * @param maxAnomalyFeatures      max features allowed per detector\n      * @param method                  Rest Method type\n      * @param xContentRegistry        Registry which is used for XContentParser\n+     * @param restClient              RestClient used to talk to Security Plugin", "originalCommit": "e1824c14904e1beb0794258c54ec72c91b347798", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzIxNDc1NQ==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/272#discussion_r507214755", "bodyText": "Good question, restClient can be used to talk to any rest endpoint.\nWe are using it to talk to our security plugin.", "author": "saratvemulapalli", "createdAt": "2020-10-18T21:16:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzIwNzczNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzIwODQzNQ==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/272#discussion_r507208435", "bodyText": "I see there are two roles fields in User class.\nWhat's the difference ? Should we add setting for them separately?", "author": "ylwu-amzn", "createdAt": "2020-10-18T20:19:19Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/settings/AnomalyDetectorSettings.java", "diffHunk": "@@ -147,6 +147,9 @@ private AnomalyDetectorSettings() {}\n             Setting.Property.Dynamic\n         );\n \n+    public static final Setting<Boolean> FILTER_BY_BACKEND_ROLES = Setting\n+        .boolSetting(\"opendistro.anomaly_detection.filter_by_backend_roles\", false, Setting.Property.NodeScope, Setting.Property.Dynamic);", "originalCommit": "e1824c14904e1beb0794258c54ec72c91b347798", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzIxMzkxMQ==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/272#discussion_r507213911", "bodyText": "Good question.\nRoles is something which is maintained by Security Plugin, you think of Internal roles.\nWhere as backend roles are determined from Authentication provider if the customer has integrated with other systems.\nWe decided to use backend role because it will be easier for customers so that their roles are automatically updated when there are changes in their organization rather opendistro internal roles.", "author": "saratvemulapalli", "createdAt": "2020-10-18T21:09:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzIwODQzNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzIwODg2Ng==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/272#discussion_r507208866", "bodyText": "What if the searchSourceBuilder.query() is not a BoolQueryBuilder ?\nFor example, one user want to count all anomaly result. That will be just an aggregation query. For this case we will not add this filterBackendRoles term query to the original query, then user can get total anomaly result count for all users.", "author": "ylwu-amzn", "createdAt": "2020-10-18T20:22:43Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/util/RestHandlerUtils.java", "diffHunk": "@@ -101,6 +106,14 @@ public static String validateAnomalyDetector(AnomalyDetector anomalyDetector, in\n         return null;\n     }\n \n+    public static void addFilter(User user, SearchSourceBuilder searchSourceBuilder, String fieldName) {\n+        TermsQueryBuilder filterBackendRoles = QueryBuilders.termsQuery(fieldName, user.getBackendRoles());\n+        if (searchSourceBuilder.query() instanceof BoolQueryBuilder) {", "originalCommit": "e1824c14904e1beb0794258c54ec72c91b347798", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA0NjkyMg==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/272#discussion_r508046922", "bodyText": "Any updates? If it's not easy to build a flexible solution. How about we start from supporting BoolQueryBuilder like alerting ? We can support more query types in future.", "author": "ylwu-amzn", "createdAt": "2020-10-19T20:37:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzIwODg2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA4MjI3Ng==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/272#discussion_r508082276", "bodyText": "Yeah, its getting tricky support other queries, I spent some time to figure out if there is a cleaner way of doing it.\nLike you said, lets start supporting the bool query and we can add support to the other queries if needed later.\nI will handle queries with an error for now.", "author": "saratvemulapalli", "createdAt": "2020-10-19T21:48:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzIwODg2Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzIwOTMyMA==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/272#discussion_r507209320", "bodyText": "Another possible case: old user created before FGAC enabled?", "author": "ylwu-amzn", "createdAt": "2020-10-18T20:26:33Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/transport/SearchAnomalyResultTransportAction.java", "diffHunk": "@@ -15,28 +15,101 @@\n \n package com.amazon.opendistroforelasticsearch.ad.transport;\n \n+import static com.amazon.opendistroforelasticsearch.ad.settings.AnomalyDetectorSettings.FILTER_BY_BACKEND_ROLES;\n+\n+import java.io.IOException;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n import org.elasticsearch.action.ActionListener;\n import org.elasticsearch.action.search.SearchRequest;\n import org.elasticsearch.action.search.SearchResponse;\n import org.elasticsearch.action.support.ActionFilters;\n import org.elasticsearch.action.support.HandledTransportAction;\n import org.elasticsearch.client.Client;\n+import org.elasticsearch.client.Request;\n+import org.elasticsearch.client.Response;\n+import org.elasticsearch.client.ResponseListener;\n+import org.elasticsearch.client.RestClient;\n+import org.elasticsearch.cluster.service.ClusterService;\n import org.elasticsearch.common.inject.Inject;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.util.concurrent.ThreadContext;\n import org.elasticsearch.tasks.Task;\n import org.elasticsearch.transport.TransportService;\n \n-public class SearchAnomalyResultTransportAction extends HandledTransportAction<SearchRequest, SearchResponse> {\n+import com.amazon.opendistroforelasticsearch.ad.settings.AnomalyDetectorSettings;\n+import com.amazon.opendistroforelasticsearch.ad.util.RestHandlerUtils;\n+import com.amazon.opendistroforelasticsearch.commons.authuser.AuthUserRequestBuilder;\n+import com.amazon.opendistroforelasticsearch.commons.authuser.User;\n+\n+public class SearchAnomalyResultTransportAction extends HandledTransportAction<SearchAnomalyRequest, SearchResponse> {\n+    private final Logger logger = LogManager.getLogger(SearchAnomalyResultTransportAction.class);\n \n     private final Client client;\n+    private final RestClient restClient;\n+    private volatile Boolean filterEnabled;\n \n     @Inject\n-    public SearchAnomalyResultTransportAction(TransportService transportService, ActionFilters actionFilters, Client client) {\n-        super(SearchAnomalyResultAction.NAME, transportService, actionFilters, SearchRequest::new);\n+    public SearchAnomalyResultTransportAction(\n+        Settings settings,\n+        TransportService transportService,\n+        ClusterService clusterService,\n+        ActionFilters actionFilters,\n+        Client client,\n+        RestClient restClient\n+    ) {\n+        super(SearchAnomalyResultAction.NAME, transportService, actionFilters, SearchAnomalyRequest::new);\n         this.client = client;\n+        this.restClient = restClient;\n+        filterEnabled = AnomalyDetectorSettings.FILTER_BY_BACKEND_ROLES.get(settings);\n+        clusterService.getClusterSettings().addSettingsUpdateConsumer(FILTER_BY_BACKEND_ROLES, it -> filterEnabled = it);\n     }\n \n     @Override\n-    protected void doExecute(Task task, SearchRequest request, ActionListener<SearchResponse> listener) {\n+    protected void doExecute(Task task, SearchAnomalyRequest request, ActionListener<SearchResponse> listener) {\n+        try (ThreadContext.StoredContext context = client.threadPool().getThreadContext().stashContext()) {\n+            validateRole(request, listener);\n+        } catch (Exception e) {\n+            logger.error(e);\n+            listener.onFailure(e);\n+        }\n+    }\n+\n+    private void validateRole(SearchAnomalyRequest request, ActionListener<SearchResponse> listener) {\n+        if (request.getAuthHeader() == null) {\n+            // Auth Header is empty when 1. Security is disabled. 2. When user is super-admin", "originalCommit": "e1824c14904e1beb0794258c54ec72c91b347798", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzIxNDE0Ng==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/272#discussion_r507214146", "bodyText": "Not really, this AuthHeader will not exist when security is disabled, this has nothing to do with FGAC. It is how security plugin works. Old user or any user will always have its credentials while logging in.", "author": "saratvemulapalli", "createdAt": "2020-10-18T21:11:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzIwOTMyMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzIwOTY0NQ==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/272#discussion_r507209645", "bodyText": "Security plugin will intercept and recheck user's permission on anomaly result index ? If not map read access of anomaly result index to this user role, security plugin will block and return error?", "author": "ylwu-amzn", "createdAt": "2020-10-18T20:29:50Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/transport/SearchAnomalyResultTransportAction.java", "diffHunk": "@@ -15,28 +15,101 @@\n \n package com.amazon.opendistroforelasticsearch.ad.transport;\n \n+import static com.amazon.opendistroforelasticsearch.ad.settings.AnomalyDetectorSettings.FILTER_BY_BACKEND_ROLES;\n+\n+import java.io.IOException;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n import org.elasticsearch.action.ActionListener;\n import org.elasticsearch.action.search.SearchRequest;\n import org.elasticsearch.action.search.SearchResponse;\n import org.elasticsearch.action.support.ActionFilters;\n import org.elasticsearch.action.support.HandledTransportAction;\n import org.elasticsearch.client.Client;\n+import org.elasticsearch.client.Request;\n+import org.elasticsearch.client.Response;\n+import org.elasticsearch.client.ResponseListener;\n+import org.elasticsearch.client.RestClient;\n+import org.elasticsearch.cluster.service.ClusterService;\n import org.elasticsearch.common.inject.Inject;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.util.concurrent.ThreadContext;\n import org.elasticsearch.tasks.Task;\n import org.elasticsearch.transport.TransportService;\n \n-public class SearchAnomalyResultTransportAction extends HandledTransportAction<SearchRequest, SearchResponse> {\n+import com.amazon.opendistroforelasticsearch.ad.settings.AnomalyDetectorSettings;\n+import com.amazon.opendistroforelasticsearch.ad.util.RestHandlerUtils;\n+import com.amazon.opendistroforelasticsearch.commons.authuser.AuthUserRequestBuilder;\n+import com.amazon.opendistroforelasticsearch.commons.authuser.User;\n+\n+public class SearchAnomalyResultTransportAction extends HandledTransportAction<SearchAnomalyRequest, SearchResponse> {\n+    private final Logger logger = LogManager.getLogger(SearchAnomalyResultTransportAction.class);\n \n     private final Client client;\n+    private final RestClient restClient;\n+    private volatile Boolean filterEnabled;\n \n     @Inject\n-    public SearchAnomalyResultTransportAction(TransportService transportService, ActionFilters actionFilters, Client client) {\n-        super(SearchAnomalyResultAction.NAME, transportService, actionFilters, SearchRequest::new);\n+    public SearchAnomalyResultTransportAction(\n+        Settings settings,\n+        TransportService transportService,\n+        ClusterService clusterService,\n+        ActionFilters actionFilters,\n+        Client client,\n+        RestClient restClient\n+    ) {\n+        super(SearchAnomalyResultAction.NAME, transportService, actionFilters, SearchAnomalyRequest::new);\n         this.client = client;\n+        this.restClient = restClient;\n+        filterEnabled = AnomalyDetectorSettings.FILTER_BY_BACKEND_ROLES.get(settings);\n+        clusterService.getClusterSettings().addSettingsUpdateConsumer(FILTER_BY_BACKEND_ROLES, it -> filterEnabled = it);\n     }\n \n     @Override\n-    protected void doExecute(Task task, SearchRequest request, ActionListener<SearchResponse> listener) {\n+    protected void doExecute(Task task, SearchAnomalyRequest request, ActionListener<SearchResponse> listener) {\n+        try (ThreadContext.StoredContext context = client.threadPool().getThreadContext().stashContext()) {\n+            validateRole(request, listener);\n+        } catch (Exception e) {\n+            logger.error(e);\n+            listener.onFailure(e);\n+        }\n+    }\n+\n+    private void validateRole(SearchAnomalyRequest request, ActionListener<SearchResponse> listener) {\n+        if (request.getAuthHeader() == null) {\n+            // Auth Header is empty when 1. Security is disabled. 2. When user is super-admin\n+            // Proceed with search\n+            search(request.getSearchRequest(), listener);\n+        } else if (!filterEnabled) {\n+            // Security is enabled and filter is disabled\n+            // Proceed with search as user is already authenticated to hit this API.", "originalCommit": "e1824c14904e1beb0794258c54ec72c91b347798", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzIxNDU4Mg==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/272#discussion_r507214582", "bodyText": "By the time the request comes to the Transport layer, the request is already authenticated i.e security plugin would have checked the permissions of the user.", "author": "saratvemulapalli", "createdAt": "2020-10-18T21:15:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzIwOTY0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA1MzA1OQ==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/272#discussion_r508053059", "bodyText": "Got it, so we are safe to stash thread context in line 71 to pass transport layer check, otherwise, security plugin will recheck user role permission on the index?", "author": "ylwu-amzn", "createdAt": "2020-10-19T20:48:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzIwOTY0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA3NzEwNQ==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/272#discussion_r508077105", "bodyText": "Correct. Thats exactly how it works. And we need to stash the context to access system indices.", "author": "saratvemulapalli", "createdAt": "2020-10-19T21:36:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzIwOTY0NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzIxMjE1Ng==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/272#discussion_r507212156", "bodyText": "From this code, we can get authHeader from SearchAnomalyRequest and build authRequest with it, then perform secure REST API call.\nIs it possible that we can build authHeader or authRequest  by ourselves without REST request for example in some schedule job ?\nFrom current AbstractSearchAction code line 79, I see we get authHeader from RestRequest \nString authHeader = request.header(ConfigConstants.AUTHORIZATION);", "author": "ylwu-amzn", "createdAt": "2020-10-18T20:54:14Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/transport/SearchAnomalyDetectorTransportAction.java", "diffHunk": "@@ -15,28 +15,101 @@\n \n package com.amazon.opendistroforelasticsearch.ad.transport;\n \n+import static com.amazon.opendistroforelasticsearch.ad.settings.AnomalyDetectorSettings.FILTER_BY_BACKEND_ROLES;\n+\n+import java.io.IOException;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n import org.elasticsearch.action.ActionListener;\n import org.elasticsearch.action.search.SearchRequest;\n import org.elasticsearch.action.search.SearchResponse;\n import org.elasticsearch.action.support.ActionFilters;\n import org.elasticsearch.action.support.HandledTransportAction;\n import org.elasticsearch.client.Client;\n+import org.elasticsearch.client.Request;\n+import org.elasticsearch.client.Response;\n+import org.elasticsearch.client.ResponseListener;\n+import org.elasticsearch.client.RestClient;\n+import org.elasticsearch.cluster.service.ClusterService;\n import org.elasticsearch.common.inject.Inject;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.util.concurrent.ThreadContext;\n import org.elasticsearch.tasks.Task;\n import org.elasticsearch.transport.TransportService;\n \n-public class SearchAnomalyDetectorTransportAction extends HandledTransportAction<SearchRequest, SearchResponse> {\n+import com.amazon.opendistroforelasticsearch.ad.settings.AnomalyDetectorSettings;\n+import com.amazon.opendistroforelasticsearch.ad.util.RestHandlerUtils;\n+import com.amazon.opendistroforelasticsearch.commons.authuser.AuthUserRequestBuilder;\n+import com.amazon.opendistroforelasticsearch.commons.authuser.User;\n+\n+public class SearchAnomalyDetectorTransportAction extends HandledTransportAction<SearchAnomalyRequest, SearchResponse> {\n+    private final Logger logger = LogManager.getLogger(SearchAnomalyDetectorTransportAction.class);\n \n     private final Client client;\n+    private final RestClient restClient;\n+    private volatile Boolean filterEnabled;\n \n     @Inject\n-    public SearchAnomalyDetectorTransportAction(TransportService transportService, ActionFilters actionFilters, Client client) {\n-        super(SearchAnomalyDetectorAction.NAME, transportService, actionFilters, SearchRequest::new);\n+    public SearchAnomalyDetectorTransportAction(\n+        Settings settings,\n+        TransportService transportService,\n+        ClusterService clusterService,\n+        ActionFilters actionFilters,\n+        Client client,\n+        RestClient restClient\n+    ) {\n+        super(SearchAnomalyDetectorAction.NAME, transportService, actionFilters, SearchAnomalyRequest::new);\n         this.client = client;\n+        this.restClient = restClient;\n+        filterEnabled = AnomalyDetectorSettings.FILTER_BY_BACKEND_ROLES.get(settings);\n+        clusterService.getClusterSettings().addSettingsUpdateConsumer(FILTER_BY_BACKEND_ROLES, it -> filterEnabled = it);\n     }\n \n     @Override\n-    protected void doExecute(Task task, SearchRequest request, ActionListener<SearchResponse> listener) {\n+    protected void doExecute(Task task, SearchAnomalyRequest request, ActionListener<SearchResponse> listener) {\n+        try (ThreadContext.StoredContext context = client.threadPool().getThreadContext().stashContext()) {\n+            validateRole(request, listener);\n+        } catch (Exception e) {\n+            logger.error(e);\n+            listener.onFailure(e);\n+        }\n+    }\n+\n+    private void validateRole(SearchAnomalyRequest request, ActionListener<SearchResponse> listener) {\n+        if (request.getAuthHeader() == null) {\n+            // Auth Header is empty when 1. Security is disabled. 2. When user is super-admin\n+            // Proceed with search\n+            search(request.getSearchRequest(), listener);\n+        } else if (!filterEnabled) {\n+            // Security is enabled and filter is disabled\n+            // Proceed with search as user is already authenticated to hit this API.\n+            search(request.getSearchRequest(), listener);\n+        } else {\n+            // Security is enabled and filter is enabled\n+            Request authRequest = new AuthUserRequestBuilder(request.getAuthHeader()).build();", "originalCommit": "e1824c14904e1beb0794258c54ec72c91b347798", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA4MDM1NA==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/272#discussion_r508080354", "bodyText": "Yeah, its both yes and no : ).\nBasically when the security plugin is used, any user who sends a request, the auth header will be set.\nFor the scheduled job we can do the same by injecting the role and making a rest request.\nInstead we are directly calling transport, either way the permissions are being checked.", "author": "saratvemulapalli", "createdAt": "2020-10-19T21:43:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzIxMjE1Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzIxNTI5MA==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/272#discussion_r507215290", "bodyText": "This is not a comment for this PR. Just curious and ask\nI see the AuthUserRequestBuilder hard code auth URL in code. Is it possible/safe to let client define which URL to send request to?\nFor example,\n1.User send REST request to AD\n2.AD gets authHeader from user REST request\n3.Build auth request to send request to alerting plugin's monitor creation URL?", "author": "ylwu-amzn", "createdAt": "2020-10-18T21:19:56Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/transport/SearchAnomalyDetectorTransportAction.java", "diffHunk": "@@ -15,28 +15,101 @@\n \n package com.amazon.opendistroforelasticsearch.ad.transport;\n \n+import static com.amazon.opendistroforelasticsearch.ad.settings.AnomalyDetectorSettings.FILTER_BY_BACKEND_ROLES;\n+\n+import java.io.IOException;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n import org.elasticsearch.action.ActionListener;\n import org.elasticsearch.action.search.SearchRequest;\n import org.elasticsearch.action.search.SearchResponse;\n import org.elasticsearch.action.support.ActionFilters;\n import org.elasticsearch.action.support.HandledTransportAction;\n import org.elasticsearch.client.Client;\n+import org.elasticsearch.client.Request;\n+import org.elasticsearch.client.Response;\n+import org.elasticsearch.client.ResponseListener;\n+import org.elasticsearch.client.RestClient;\n+import org.elasticsearch.cluster.service.ClusterService;\n import org.elasticsearch.common.inject.Inject;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.util.concurrent.ThreadContext;\n import org.elasticsearch.tasks.Task;\n import org.elasticsearch.transport.TransportService;\n \n-public class SearchAnomalyDetectorTransportAction extends HandledTransportAction<SearchRequest, SearchResponse> {\n+import com.amazon.opendistroforelasticsearch.ad.settings.AnomalyDetectorSettings;\n+import com.amazon.opendistroforelasticsearch.ad.util.RestHandlerUtils;\n+import com.amazon.opendistroforelasticsearch.commons.authuser.AuthUserRequestBuilder;\n+import com.amazon.opendistroforelasticsearch.commons.authuser.User;\n+\n+public class SearchAnomalyDetectorTransportAction extends HandledTransportAction<SearchAnomalyRequest, SearchResponse> {\n+    private final Logger logger = LogManager.getLogger(SearchAnomalyDetectorTransportAction.class);\n \n     private final Client client;\n+    private final RestClient restClient;\n+    private volatile Boolean filterEnabled;\n \n     @Inject\n-    public SearchAnomalyDetectorTransportAction(TransportService transportService, ActionFilters actionFilters, Client client) {\n-        super(SearchAnomalyDetectorAction.NAME, transportService, actionFilters, SearchRequest::new);\n+    public SearchAnomalyDetectorTransportAction(\n+        Settings settings,\n+        TransportService transportService,\n+        ClusterService clusterService,\n+        ActionFilters actionFilters,\n+        Client client,\n+        RestClient restClient\n+    ) {\n+        super(SearchAnomalyDetectorAction.NAME, transportService, actionFilters, SearchAnomalyRequest::new);\n         this.client = client;\n+        this.restClient = restClient;\n+        filterEnabled = AnomalyDetectorSettings.FILTER_BY_BACKEND_ROLES.get(settings);\n+        clusterService.getClusterSettings().addSettingsUpdateConsumer(FILTER_BY_BACKEND_ROLES, it -> filterEnabled = it);\n     }\n \n     @Override\n-    protected void doExecute(Task task, SearchRequest request, ActionListener<SearchResponse> listener) {\n+    protected void doExecute(Task task, SearchAnomalyRequest request, ActionListener<SearchResponse> listener) {\n+        try (ThreadContext.StoredContext context = client.threadPool().getThreadContext().stashContext()) {\n+            validateRole(request, listener);\n+        } catch (Exception e) {\n+            logger.error(e);\n+            listener.onFailure(e);\n+        }\n+    }\n+\n+    private void validateRole(SearchAnomalyRequest request, ActionListener<SearchResponse> listener) {\n+        if (request.getAuthHeader() == null) {\n+            // Auth Header is empty when 1. Security is disabled. 2. When user is super-admin\n+            // Proceed with search\n+            search(request.getSearchRequest(), listener);\n+        } else if (!filterEnabled) {\n+            // Security is enabled and filter is disabled\n+            // Proceed with search as user is already authenticated to hit this API.\n+            search(request.getSearchRequest(), listener);\n+        } else {\n+            // Security is enabled and filter is enabled\n+            Request authRequest = new AuthUserRequestBuilder(request.getAuthHeader()).build();\n+            restClient.performRequestAsync(authRequest, new ResponseListener() {", "originalCommit": "e1824c14904e1beb0794258c54ec72c91b347798", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzIxNTcwNw==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/272#discussion_r507215707", "bodyText": "Definitely, RestClient is generic.\nWe could use it to call any Rest endpoint from our transport.\nIts just we are using a hardcoded API for our security plugin but we can have a generic request builder which we could use it for our monitors.", "author": "saratvemulapalli", "createdAt": "2020-10-18T21:23:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzIxNTI5MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzM4MjMzMQ==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/272#discussion_r507382331", "bodyText": "user backend roles is a list of roles, can this term query work for this case\n1.User creates a detector and runs it. At this time, user has roles [ad_view, ad_run, monitor_view]\n2.After 1 week, user gets monitor creation and run permission, and his \"ad_run\" permission gets revoked. So now user has roles [ad_view, monitor_view, monitor_create, monitor_run]\nQuestion:\n1.Will the detector still run after the \"detector_run\" permission get revoked ? Will we check permission for every job execution?\n2.Can this term query work for this case ? That means we need to query ad user roles with latest roles [ad_view, monitor_view, monitor_create, monitor_run], but the AD result only contains three old roles [ad_view, ad_run, monitor_view]", "author": "ylwu-amzn", "createdAt": "2020-10-19T02:46:36Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/util/RestHandlerUtils.java", "diffHunk": "@@ -101,6 +106,14 @@ public static String validateAnomalyDetector(AnomalyDetector anomalyDetector, in\n         return null;\n     }\n \n+    public static void addFilter(User user, SearchSourceBuilder searchSourceBuilder, String fieldName) {\n+        TermsQueryBuilder filterBackendRoles = QueryBuilders.termsQuery(fieldName, user.getBackendRoles());", "originalCommit": "e1824c14904e1beb0794258c54ec72c91b347798", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzQyNzY4MQ==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/272#discussion_r507427681", "bodyText": "Sorry, misunderstand, you are using termsQuery, so it should work from question2. Only need to consider question1.", "author": "ylwu-amzn", "createdAt": "2020-10-19T04:01:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzM4MjMzMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzU2MDUyNw==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/272#discussion_r507560527", "bodyText": "Correct.\nSpecifically to answer Q1, we will inject user role for the background job. This will check permissions for every run.\nQ2. Exactly terms query will take care of handling multiple roles.", "author": "saratvemulapalli", "createdAt": "2020-10-19T08:23:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzM4MjMzMQ=="}], "type": "inlineReview"}, {"oid": "a37ffbcde081c3a1ee6eb636f70743cf418022c5", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/commit/a37ffbcde081c3a1ee6eb636f70743cf418022c5", "message": "Addressing few comments", "committedDate": "2020-10-19T22:15:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODEwNDQ3NA==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/272#discussion_r508104474", "bodyText": "If user use curl to search detector, and they don't use bool query, they can search other user's detector data. So we may have security leak.\nHow about we build a dedicated API to check if detector name is unique or not. The input is simple a detector name string, the output is true or false. And we control access in java code by ourselves. This needs to change AD Kibana code to switch to this new API.", "author": "ylwu-amzn", "createdAt": "2020-10-19T22:42:26Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/transport/SearchAnomalyDetectorTransportAction.java", "diffHunk": "@@ -122,4 +125,14 @@ public void onFailure(Exception e) {\n             }\n         });\n     }\n+\n+    private void addFilter(User user, SearchSourceBuilder searchSourceBuilder, String fieldName) {\n+        TermsQueryBuilder filterBackendRoles = QueryBuilders.termsQuery(fieldName, user.getBackendRoles());\n+        // For search detector queries, non BoolQuery is only used to find if the new detector name being created is", "originalCommit": "a37ffbcde081c3a1ee6eb636f70743cf418022c5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODEwNTg1NA==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/272#discussion_r508105854", "bodyText": "Yeah sure that sounds good. I will work with Tyler and work on these changes.", "author": "saratvemulapalli", "createdAt": "2020-10-19T22:46:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODEwNDQ3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODExNDMzNQ==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/272#discussion_r508114335", "bodyText": "Sounds good. Will approve this one. Put the new API in another PR.\nBTW, we should throw error for search detectors if not bool query.", "author": "ylwu-amzn", "createdAt": "2020-10-19T23:11:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODEwNDQ3NA=="}], "type": "inlineReview"}, {"oid": "da078dbb010d1612c8329f67a7a32f70199a13ae", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/commit/da078dbb010d1612c8329f67a7a32f70199a13ae", "message": "Merge branch 'master' into fgac-background-job", "committedDate": "2020-10-20T00:28:13Z", "type": "commit"}, {"oid": "b84ba564b259e55afe1dcb2009fe4837914e931a", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/commit/b84ba564b259e55afe1dcb2009fe4837914e931a", "message": "Adding spotless changes from merge", "committedDate": "2020-10-20T01:18:58Z", "type": "commit"}]}