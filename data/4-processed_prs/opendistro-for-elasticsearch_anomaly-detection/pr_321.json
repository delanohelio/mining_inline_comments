{"pr_number": 321, "pr_title": "Moving Preview Anomaly Detectors to Transport layer", "pr_createdAt": "2020-12-01T18:59:53Z", "pr_url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/321", "timeline": [{"oid": "075e4809e336082d1f29cbbbe5eb93cf5f7ab2e6", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/commit/075e4809e336082d1f29cbbbe5eb93cf5f7ab2e6", "message": "Moving Preview Anomaly Detectors to Transport layer", "committedDate": "2020-12-01T18:55:40Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQzMzI1Mg==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/321#discussion_r534433252", "bodyText": "Will remove this while addressing feedback.", "author": "saratvemulapalli", "createdAt": "2020-12-02T19:40:30Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/transport/PreviewAnomalyDetectorTransportAction.java", "diffHunk": "@@ -0,0 +1,179 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.ad.transport;\n+\n+import static com.amazon.opendistroforelasticsearch.ad.settings.AnomalyDetectorSettings.MAX_ANOMALY_FEATURES;\n+import static org.elasticsearch.common.xcontent.XContentParserUtils.ensureExpectedToken;\n+\n+import java.io.IOException;\n+import java.time.Instant;\n+import java.util.List;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.ElasticsearchException;\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.action.get.GetRequest;\n+import org.elasticsearch.action.get.GetResponse;\n+import org.elasticsearch.action.support.ActionFilters;\n+import org.elasticsearch.action.support.HandledTransportAction;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.cluster.service.ClusterService;\n+import org.elasticsearch.common.CheckedConsumer;\n+import org.elasticsearch.common.inject.Inject;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.util.concurrent.ThreadContext;\n+import org.elasticsearch.common.xcontent.NamedXContentRegistry;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.rest.RestStatus;\n+import org.elasticsearch.tasks.Task;\n+import org.elasticsearch.transport.TransportService;\n+\n+import com.amazon.opendistroforelasticsearch.ad.AnomalyDetectorRunner;\n+import com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetector;\n+import com.amazon.opendistroforelasticsearch.ad.model.AnomalyResult;\n+import com.amazon.opendistroforelasticsearch.ad.util.RestHandlerUtils;\n+\n+public class PreviewAnomalyDetectorTransportAction extends\n+    HandledTransportAction<PreviewAnomalyDetectorRequest, PreviewAnomalyDetectorResponse> {\n+    private final Logger logger = LogManager.getLogger(PreviewAnomalyDetectorTransportAction.class);\n+    private final AnomalyDetectorRunner anomalyDetectorRunner;\n+    private final Client client;\n+    private final NamedXContentRegistry xContentRegistry;\n+    private volatile Integer maxAnomalyFeatures;\n+\n+    @Inject\n+    public PreviewAnomalyDetectorTransportAction(\n+        Settings settings,\n+        TransportService transportService,\n+        ClusterService clusterService,\n+        ActionFilters actionFilters,\n+        Client client,\n+        AnomalyDetectorRunner anomalyDetectorRunner,\n+        NamedXContentRegistry xContentRegistry\n+    ) {\n+        super(PreviewAnomalyDetectorAction.NAME, transportService, actionFilters, PreviewAnomalyDetectorRequest::new);\n+        this.client = client;\n+        this.anomalyDetectorRunner = anomalyDetectorRunner;\n+        this.xContentRegistry = xContentRegistry;\n+        maxAnomalyFeatures = MAX_ANOMALY_FEATURES.get(settings);\n+        clusterService.getClusterSettings().addSettingsUpdateConsumer(MAX_ANOMALY_FEATURES, it -> maxAnomalyFeatures = it);\n+    }\n+\n+    @Override\n+    protected void doExecute(Task task, PreviewAnomalyDetectorRequest request, ActionListener<PreviewAnomalyDetectorResponse> listener) {\n+        try (ThreadContext.StoredContext context = client.threadPool().getThreadContext().stashContext()) {\n+            AnomalyDetector detector = request.getDetector();\n+            String detectorId = request.getDetectorId();\n+            Instant startTime = request.getStartTime();\n+            Instant endTime = request.getEndTime();\n+            if (detector != null) {\n+                String error = validateDetector(detector);\n+                if (StringUtils.isNotBlank(error)) {\n+                    listener.onFailure(new ElasticsearchException(error, RestStatus.BAD_REQUEST));\n+                    return;\n+                }\n+                anomalyDetectorRunner.executeDetector(detector, startTime, endTime, getPreviewDetectorActionListener(listener, detector));\n+            } else {\n+                previewAnomalyDetector(listener, detectorId, startTime, endTime);\n+            }\n+        } catch (Exception e) {\n+            logger.error(e);\n+            listener.onFailure(e);\n+        }\n+    }\n+\n+    private String validateDetector(AnomalyDetector detector) {\n+        if (detector.getFeatureAttributes().isEmpty()) {\n+            return \"Can't preview detector without feature\";\n+        } else {\n+            return RestHandlerUtils.validateAnomalyDetector(detector, maxAnomalyFeatures);\n+        }\n+    }\n+\n+    private ActionListener<List<AnomalyResult>> getPreviewDetectorActionListener(\n+        ActionListener<PreviewAnomalyDetectorResponse> listener,\n+        AnomalyDetector detector\n+    ) {\n+        return ActionListener.wrap(new CheckedConsumer<List<AnomalyResult>, Exception>() {\n+            @Override\n+            public void accept(List<AnomalyResult> anomalyResult) throws Exception {\n+                PreviewAnomalyDetectorResponse response = new PreviewAnomalyDetectorResponse(anomalyResult, detector);\n+                listener.onResponse(response);\n+            }\n+        }, exception -> {\n+            logger.error(\"Unexpected error running anomaly detector \" + detector.getDetectorId(), exception);\n+            listener\n+                .onFailure(\n+                    new ElasticsearchException(\n+                        \"Unexpected error running anomaly detector \" + detector.getDetectorId(),\n+                        RestStatus.INTERNAL_SERVER_ERROR\n+                    )\n+                );\n+        });\n+    }\n+\n+    private void previewAnomalyDetector(\n+        ActionListener<PreviewAnomalyDetectorResponse> listener,\n+        String detectorId,\n+        Instant startTime,\n+        Instant endTime\n+    ) {\n+        if (!StringUtils.isBlank(detectorId)) {\n+            GetRequest getRequest = new GetRequest(AnomalyDetector.ANOMALY_DETECTORS_INDEX).id(detectorId);\n+            client.get(getRequest, onGetAnomalyDetectorResponse(listener, startTime, endTime));\n+        } else {\n+            listener.onFailure(new ElasticsearchException(\"Wrong input, no detector id\", RestStatus.NOT_FOUND));\n+        }\n+    }\n+\n+    private ActionListener<GetResponse> onGetAnomalyDetectorResponse(\n+        ActionListener<PreviewAnomalyDetectorResponse> listener,\n+        Instant startTime,\n+        Instant endTime\n+    ) {\n+        return new ActionListener<GetResponse>() {\n+            @Override\n+            public void onResponse(GetResponse response) {\n+                if (!response.isExists()) {\n+                    listener\n+                        .onFailure(\n+                            new ElasticsearchException(\"Can't find anomaly detector with id:\" + response.getId(), RestStatus.NOT_FOUND)\n+                        );\n+                    return;\n+                }\n+\n+                try {\n+                    XContentParser parser = RestHandlerUtils\n+                        .createXContentParserFromRegistry(xContentRegistry, response.getSourceAsBytesRef());\n+                    ensureExpectedToken(XContentParser.Token.START_OBJECT, parser.nextToken(), parser);\n+                    AnomalyDetector detector = AnomalyDetector.parse(parser, response.getId(), response.getVersion());\n+\n+                    anomalyDetectorRunner\n+                        .executeDetector(detector, startTime, endTime, getPreviewDetectorActionListener(listener, detector));\n+                } catch (IOException e) {\n+                    e.printStackTrace(); // TODO vemsarat@", "originalCommit": "075e4809e336082d1f29cbbbe5eb93cf5f7ab2e6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQzNDE4OA==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/321#discussion_r534434188", "bodyText": "Had to add powermock tests which are unfortunately not covered by jacoco.\nOnce @ylwu-amzn fixes the AggregationBuilder Named Writeable these tests can be removed out of powermock.", "author": "saratvemulapalli", "createdAt": "2020-12-02T19:42:13Z", "path": "build.gradle", "diffHunk": "@@ -298,6 +298,9 @@ List<String> jacocoExclusions = [\n         'com.amazon.opendistroforelasticsearch.ad.transport.GetAnomalyDetectorRequest',\n         'com.amazon.opendistroforelasticsearch.ad.transport.IndexAnomalyDetectorResponse',\n         'com.amazon.opendistroforelasticsearch.ad.transport.IndexAnomalyDetectorTransportAction',\n+        'com.amazon.opendistroforelasticsearch.ad.transport.PreviewAnomalyDetectorTransportAction*',\n+        'com.amazon.opendistroforelasticsearch.ad.transport.PreviewAnomalyDetectorResponse',", "originalCommit": "075e4809e336082d1f29cbbbe5eb93cf5f7ab2e6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDU1MTIyNA==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/321#discussion_r534551224", "bodyText": "Can you help me understand why powermock and jacoco do not work together? We have powermock tests in the ML package.  Jacoco recognized them.", "author": "kaituo", "createdAt": "2020-12-02T23:25:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQzNDE4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTgwNzI0OA==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/321#discussion_r535807248", "bodyText": "Sure thanks Kaituo!", "author": "saratvemulapalli", "createdAt": "2020-12-04T03:23:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQzNDE4OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDU1MDYxMQ==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/321#discussion_r534550611", "bodyText": "We can avoid powermock here by creating a anomalydetector object.  Please read TestHelpers.randomAnomalyDetector.", "author": "kaituo", "createdAt": "2020-12-02T23:23:57Z", "path": "src/test/java/com/amazon/opendistroforelasticsearch/ad/transport/PreviewAnomalyDetectorActionTests.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.ad.transport;\n+\n+import java.time.Instant;\n+\n+import org.elasticsearch.common.io.stream.BytesStreamOutput;\n+import org.elasticsearch.common.io.stream.StreamInput;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mockito;\n+import org.powermock.api.mockito.PowerMockito;\n+import org.powermock.core.classloader.annotations.PrepareForTest;\n+import org.powermock.modules.junit4.PowerMockRunner;\n+\n+import com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetector;\n+\n+@RunWith(PowerMockRunner.class)\n+@PrepareForTest({ PreviewAnomalyDetectorRequest.class, PreviewAnomalyDetectorResponse.class })\n+public class PreviewAnomalyDetectorActionTests {\n+    @Before\n+    public void setUp() throws Exception {\n+\n+    }\n+\n+    @Test\n+    public void testPreviewRequest() throws Exception {\n+        BytesStreamOutput out = new BytesStreamOutput();\n+        AnomalyDetector detector = Mockito.mock(AnomalyDetector.class);\n+        Mockito.doNothing().when(detector).writeTo(out);\n+        PreviewAnomalyDetectorRequest request = new PreviewAnomalyDetectorRequest(\n+            detector,\n+            \"1234\",\n+            Instant.now().minusSeconds(60),\n+            Instant.now()\n+        );\n+        request.writeTo(out);\n+        StreamInput input = out.bytes().streamInput();\n+        PowerMockito.whenNew(AnomalyDetector.class).withAnyArguments().thenReturn(detector);", "originalCommit": "075e4809e336082d1f29cbbbe5eb93cf5f7ab2e6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTQ1ODg2MA==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/321#discussion_r535458860", "bodyText": "Thanks Kaituo for taking a look.\nThis change: #322 is blocking from using AnomalyDetector, as I said the unit tests crash because of the aggregation builder.\nProbably I can wait for this change to be merged and remove these tests from powermock.", "author": "saratvemulapalli", "createdAt": "2020-12-03T18:00:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDU1MDYxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTY3MjA1MA==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/321#discussion_r535672050", "bodyText": "hi, @saratvemulapalli , the PR #322 merged", "author": "ylwu-amzn", "createdAt": "2020-12-03T21:59:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDU1MDYxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTgwODEwNg==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/321#discussion_r535808106", "bodyText": "Thanks Yaliang!", "author": "saratvemulapalli", "createdAt": "2020-12-04T03:25:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDU1MDYxMQ=="}], "type": "inlineReview"}, {"oid": "d30e26f90e9115ffe72d02a48041c506605f9468", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/commit/d30e26f90e9115ffe72d02a48041c506605f9468", "message": "Merge branch 'master' of https://github.com/opendistro-for-elasticsearch/anomaly-detection", "committedDate": "2020-12-03T19:17:49Z", "type": "commit"}, {"oid": "d2dfb61222fbdaf1dd4a3330172e85c816fa1843", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/commit/d2dfb61222fbdaf1dd4a3330172e85c816fa1843", "message": "Removing powermock for tests", "committedDate": "2020-12-04T03:14:22Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM0Nzg3Mw==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/321#discussion_r536347873", "bodyText": "Can you add tests for the transport action?", "author": "kaituo", "createdAt": "2020-12-04T20:01:35Z", "path": "build.gradle", "diffHunk": "@@ -298,6 +298,7 @@ List<String> jacocoExclusions = [\n         'com.amazon.opendistroforelasticsearch.ad.transport.GetAnomalyDetectorRequest',\n         'com.amazon.opendistroforelasticsearch.ad.transport.IndexAnomalyDetectorResponse',\n         'com.amazon.opendistroforelasticsearch.ad.transport.IndexAnomalyDetectorTransportAction',\n+        'com.amazon.opendistroforelasticsearch.ad.transport.PreviewAnomalyDetectorTransportAction*',", "originalCommit": "d2dfb61222fbdaf1dd4a3330172e85c816fa1843", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM1MDEwNQ==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/321#discussion_r536350105", "bodyText": "It's tricky to add unit tests for Transport Action to get the needed coverage.\nThere are more than couple of integration tests which cover.", "author": "saratvemulapalli", "createdAt": "2020-12-04T20:06:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM0Nzg3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM1ODM4Nw==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/321#discussion_r536358387", "bodyText": "another thing you can do is to make jacoco recognize integration tests.  See: https://github.com/opendistro-for-elasticsearch/alerting/blob/master/build-tools/esplugin-coverage.gradle", "author": "kaituo", "createdAt": "2020-12-04T20:22:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM0Nzg3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTQxOTI4Mw==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/321#discussion_r545419283", "bodyText": "It's tricky to add unit tests for Transport Action to get the needed coverage.\nThere are more than couple of integration tests which cover.\n\n@saratvemulapalli you can refer to this PR for transport action test #332", "author": "ylwu-amzn", "createdAt": "2020-12-17T21:37:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM0Nzg3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTQyMTYzMg==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/321#discussion_r545421632", "bodyText": "Sure thanks Yaliang, just started working on the tests today.\nWill send out the PR today.", "author": "saratvemulapalli", "createdAt": "2020-12-17T21:41:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM0Nzg3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjkyMDc2MA==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/321#discussion_r546920760", "bodyText": "Tried to add tests as much as possible.\nOnly one function is not covered: getPreviewDetectorActionListener. Will explore options for getting Jacoco to recognize integration tests", "author": "saratvemulapalli", "createdAt": "2020-12-21T20:44:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM0Nzg3Mw=="}], "type": "inlineReview"}, {"oid": "84e0b85163983329bea1c83a9b229794aaa417e2", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/commit/84e0b85163983329bea1c83a9b229794aaa417e2", "message": "Adding tests for Preview Transport Action", "committedDate": "2020-12-21T20:43:17Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njk5ODM1OA==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/321#discussion_r546998358", "bodyText": "minor: should be BAD_REQUEST, even though previous code is NOT_FOUND, but I think BAD_REQUEST should be more appropriate.", "author": "yizheliu-amazon", "createdAt": "2020-12-22T00:22:52Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/transport/PreviewAnomalyDetectorTransportAction.java", "diffHunk": "@@ -0,0 +1,180 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.ad.transport;\n+\n+import static com.amazon.opendistroforelasticsearch.ad.settings.AnomalyDetectorSettings.MAX_ANOMALY_FEATURES;\n+import static org.elasticsearch.common.xcontent.XContentParserUtils.ensureExpectedToken;\n+\n+import java.io.IOException;\n+import java.time.Instant;\n+import java.util.List;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.ElasticsearchException;\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.action.get.GetRequest;\n+import org.elasticsearch.action.get.GetResponse;\n+import org.elasticsearch.action.support.ActionFilters;\n+import org.elasticsearch.action.support.HandledTransportAction;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.cluster.service.ClusterService;\n+import org.elasticsearch.common.inject.Inject;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.util.concurrent.ThreadContext;\n+import org.elasticsearch.common.xcontent.NamedXContentRegistry;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.rest.RestStatus;\n+import org.elasticsearch.tasks.Task;\n+import org.elasticsearch.transport.TransportService;\n+\n+import com.amazon.opendistroforelasticsearch.ad.AnomalyDetectorRunner;\n+import com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetector;\n+import com.amazon.opendistroforelasticsearch.ad.model.AnomalyResult;\n+import com.amazon.opendistroforelasticsearch.ad.util.RestHandlerUtils;\n+\n+public class PreviewAnomalyDetectorTransportAction extends\n+    HandledTransportAction<PreviewAnomalyDetectorRequest, PreviewAnomalyDetectorResponse> {\n+    private final Logger logger = LogManager.getLogger(PreviewAnomalyDetectorTransportAction.class);\n+    private final AnomalyDetectorRunner anomalyDetectorRunner;\n+    private final Client client;\n+    private final NamedXContentRegistry xContentRegistry;\n+    private volatile Integer maxAnomalyFeatures;\n+\n+    @Inject\n+    public PreviewAnomalyDetectorTransportAction(\n+        Settings settings,\n+        TransportService transportService,\n+        ClusterService clusterService,\n+        ActionFilters actionFilters,\n+        Client client,\n+        AnomalyDetectorRunner anomalyDetectorRunner,\n+        NamedXContentRegistry xContentRegistry\n+    ) {\n+        super(PreviewAnomalyDetectorAction.NAME, transportService, actionFilters, PreviewAnomalyDetectorRequest::new);\n+        this.client = client;\n+        this.anomalyDetectorRunner = anomalyDetectorRunner;\n+        this.xContentRegistry = xContentRegistry;\n+        maxAnomalyFeatures = MAX_ANOMALY_FEATURES.get(settings);\n+        clusterService.getClusterSettings().addSettingsUpdateConsumer(MAX_ANOMALY_FEATURES, it -> maxAnomalyFeatures = it);\n+    }\n+\n+    @Override\n+    protected void doExecute(Task task, PreviewAnomalyDetectorRequest request, ActionListener<PreviewAnomalyDetectorResponse> listener) {\n+        try (ThreadContext.StoredContext context = client.threadPool().getThreadContext().stashContext()) {\n+            AnomalyDetector detector = request.getDetector();\n+            String detectorId = request.getDetectorId();\n+            Instant startTime = request.getStartTime();\n+            Instant endTime = request.getEndTime();\n+            if (detector != null) {\n+                String error = validateDetector(detector);\n+                if (StringUtils.isNotBlank(error)) {\n+                    listener.onFailure(new ElasticsearchException(error, RestStatus.BAD_REQUEST));\n+                    return;\n+                }\n+                anomalyDetectorRunner.executeDetector(detector, startTime, endTime, getPreviewDetectorActionListener(listener, detector));\n+            } else {\n+                previewAnomalyDetector(listener, detectorId, startTime, endTime);\n+            }\n+        } catch (Exception e) {\n+            logger.error(e);\n+            listener.onFailure(e);\n+        }\n+    }\n+\n+    private String validateDetector(AnomalyDetector detector) {\n+        if (detector.getFeatureAttributes().isEmpty()) {\n+            return \"Can't preview detector without feature\";\n+        } else {\n+            return RestHandlerUtils.validateAnomalyDetector(detector, maxAnomalyFeatures);\n+        }\n+    }\n+\n+    private ActionListener<List<AnomalyResult>> getPreviewDetectorActionListener(\n+        ActionListener<PreviewAnomalyDetectorResponse> listener,\n+        AnomalyDetector detector\n+    ) {\n+        return new ActionListener<List<AnomalyResult>>() {\n+            @Override\n+            public void onResponse(List<AnomalyResult> anomalyResults) {\n+                PreviewAnomalyDetectorResponse response = new PreviewAnomalyDetectorResponse(anomalyResults, detector);\n+                listener.onResponse(response);\n+            }\n+\n+            @Override\n+            public void onFailure(Exception e) {\n+                listener\n+                    .onFailure(\n+                        new ElasticsearchException(\n+                            \"Unexpected error running anomaly detector \" + detector.getDetectorId(),\n+                            RestStatus.INTERNAL_SERVER_ERROR\n+                        )\n+                    );\n+            }\n+        };\n+    }\n+\n+    private void previewAnomalyDetector(\n+        ActionListener<PreviewAnomalyDetectorResponse> listener,\n+        String detectorId,\n+        Instant startTime,\n+        Instant endTime\n+    ) {\n+        if (!StringUtils.isBlank(detectorId)) {\n+            GetRequest getRequest = new GetRequest(AnomalyDetector.ANOMALY_DETECTORS_INDEX).id(detectorId);\n+            client.get(getRequest, onGetAnomalyDetectorResponse(listener, startTime, endTime));\n+        } else {\n+            listener.onFailure(new ElasticsearchException(\"Wrong input, no detector id\", RestStatus.NOT_FOUND));", "originalCommit": "84e0b85163983329bea1c83a9b229794aaa417e2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU3ODg5Nw==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/321#discussion_r547578897", "bodyText": "Sure makes sense.", "author": "saratvemulapalli", "createdAt": "2020-12-23T00:57:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njk5ODM1OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njk5OTU4Ng==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/321#discussion_r546999586", "bodyText": "I guess these 2 tests should be in separate test file like PreviewAnomalyDetectorRequestTests and PreviewAnomalyDetectorResponseTests", "author": "yizheliu-amazon", "createdAt": "2020-12-22T00:27:32Z", "path": "src/test/java/com/amazon/opendistroforelasticsearch/ad/transport/PreviewAnomalyDetectorActionTests.java", "diffHunk": "@@ -0,0 +1,246 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.ad.transport;\n+\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import java.io.IOException;\n+import java.time.Instant;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.action.admin.indices.create.CreateIndexRequest;\n+import org.elasticsearch.action.support.ActionFilters;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.cluster.service.ClusterService;\n+import org.elasticsearch.common.io.stream.BytesStreamOutput;\n+import org.elasticsearch.common.io.stream.NamedWriteableAwareStreamInput;\n+import org.elasticsearch.common.io.stream.NamedWriteableRegistry;\n+import org.elasticsearch.common.settings.ClusterSettings;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.xcontent.ToXContent;\n+import org.elasticsearch.tasks.Task;\n+import org.elasticsearch.test.ESSingleNodeTestCase;\n+import org.elasticsearch.transport.TransportService;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import com.amazon.opendistroforelasticsearch.ad.AnomalyDetectorRunner;\n+import com.amazon.opendistroforelasticsearch.ad.TestHelpers;\n+import com.amazon.opendistroforelasticsearch.ad.feature.FeatureManager;\n+import com.amazon.opendistroforelasticsearch.ad.ml.ModelManager;\n+import com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetector;\n+import com.amazon.opendistroforelasticsearch.ad.model.AnomalyResult;\n+import com.amazon.opendistroforelasticsearch.ad.settings.AnomalyDetectorSettings;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+\n+public class PreviewAnomalyDetectorActionTests extends ESSingleNodeTestCase {\n+    private ActionListener<PreviewAnomalyDetectorResponse> response;\n+    private PreviewAnomalyDetectorTransportAction action;\n+    private AnomalyDetectorRunner runner;\n+    private ClusterService clusterService;\n+    private Task task;\n+\n+    @Override\n+    @Before\n+    public void setUp() throws Exception {\n+        super.setUp();\n+        task = mock(Task.class);\n+        clusterService = mock(ClusterService.class);\n+        ClusterSettings clusterSettings = new ClusterSettings(\n+            Settings.EMPTY,\n+            Collections.unmodifiableSet(new HashSet<>(Arrays.asList(AnomalyDetectorSettings.MAX_ANOMALY_FEATURES)))\n+        );\n+        when(clusterService.getClusterSettings()).thenReturn(clusterSettings);\n+        runner = new AnomalyDetectorRunner(\n+            mock(ModelManager.class),\n+            mock(FeatureManager.class),\n+            AnomalyDetectorSettings.MAX_PREVIEW_RESULTS\n+        );\n+        action = new PreviewAnomalyDetectorTransportAction(\n+            Settings.EMPTY,\n+            mock(TransportService.class),\n+            clusterService,\n+            mock(ActionFilters.class),\n+            client(),\n+            runner,\n+            xContentRegistry()\n+        );\n+    }\n+\n+    @Override\n+    protected NamedWriteableRegistry writableRegistry() {\n+        return getInstanceFromNode(NamedWriteableRegistry.class);\n+    }\n+\n+    @Test\n+    public void testPreviewTransportActionWithNoFeature() throws IOException {\n+        // Detector with no feature, Preview should fail\n+        AnomalyDetector detector = TestHelpers.randomAnomalyDetector(Collections.emptyList());\n+        PreviewAnomalyDetectorRequest request = new PreviewAnomalyDetectorRequest(\n+            detector,\n+            detector.getDetectorId(),\n+            Instant.now(),\n+            Instant.now()\n+        );\n+        ActionListener<PreviewAnomalyDetectorResponse> previewResponse = new ActionListener<PreviewAnomalyDetectorResponse>() {\n+            @Override\n+            public void onResponse(PreviewAnomalyDetectorResponse response) {\n+                Assert.assertTrue(false);\n+            }\n+\n+            @Override\n+            public void onFailure(Exception e) {\n+                Assert.assertTrue(e.getMessage().contains(\"Can't preview detector without feature\"));\n+            }\n+        };\n+        action.doExecute(task, request, previewResponse);\n+    }\n+\n+    @Test\n+    public void testPreviewTransportActionWithNoDetector() throws IOException {\n+        // When detectorId is null, preview should fail\n+        PreviewAnomalyDetectorRequest request = new PreviewAnomalyDetectorRequest(null, \"\", Instant.now(), Instant.now());\n+        ActionListener<PreviewAnomalyDetectorResponse> previewResponse = new ActionListener<PreviewAnomalyDetectorResponse>() {\n+            @Override\n+            public void onResponse(PreviewAnomalyDetectorResponse response) {\n+                Assert.assertTrue(false);\n+            }\n+\n+            @Override\n+            public void onFailure(Exception e) {\n+                Assert.assertTrue(e.getMessage().contains(\"Wrong input, no detector id\"));\n+            }\n+        };\n+        action.doExecute(task, request, previewResponse);\n+    }\n+\n+    @Test\n+    public void testPreviewTransportActionWithDetectorID() throws IOException {\n+        // When AD index does not exist, cannot query the detector\n+        PreviewAnomalyDetectorRequest request = new PreviewAnomalyDetectorRequest(null, \"1234\", Instant.now(), Instant.now());\n+        ActionListener<PreviewAnomalyDetectorResponse> previewResponse = new ActionListener<PreviewAnomalyDetectorResponse>() {\n+            @Override\n+            public void onResponse(PreviewAnomalyDetectorResponse response) {\n+                Assert.assertTrue(false);\n+            }\n+\n+            @Override\n+            public void onFailure(Exception e) {\n+                Assert.assertTrue(e.getMessage().contains(\"Could not execute get query to find detector\"));\n+            }\n+        };\n+        action.doExecute(task, request, previewResponse);\n+    }\n+\n+    @Test\n+    public void testPreviewTransportActionWithIndex() throws IOException {\n+        // When AD index exists, and detector does not exist\n+        PreviewAnomalyDetectorRequest request = new PreviewAnomalyDetectorRequest(null, \"1234\", Instant.now(), Instant.now());\n+        Settings indexSettings = Settings.builder().put(\"index.number_of_shards\", 5).put(\"index.number_of_replicas\", 1).build();\n+        CreateIndexRequest indexRequest = new CreateIndexRequest(AnomalyDetector.ANOMALY_DETECTORS_INDEX, indexSettings);\n+        client().admin().indices().create(indexRequest).actionGet();\n+        ActionListener<PreviewAnomalyDetectorResponse> previewResponse = new ActionListener<PreviewAnomalyDetectorResponse>() {\n+            @Override\n+            public void onResponse(PreviewAnomalyDetectorResponse response) {\n+                Assert.assertTrue(false);\n+            }\n+\n+            @Override\n+            public void onFailure(Exception e) {\n+                Assert.assertTrue(e.getMessage().contains(\"Can't find anomaly detector with id:1234\"));\n+            }\n+        };\n+        action.doExecute(task, request, previewResponse);\n+    }\n+\n+    @Test\n+    public void testPreviewTransportActionNoContext() throws IOException {\n+        Client client = mock(Client.class);\n+        PreviewAnomalyDetectorTransportAction previewAction = new PreviewAnomalyDetectorTransportAction(\n+            Settings.EMPTY,\n+            mock(TransportService.class),\n+            clusterService,\n+            mock(ActionFilters.class),\n+            client,\n+            runner,\n+            xContentRegistry()\n+        );\n+        AnomalyDetector detector = TestHelpers.randomAnomalyDetector(ImmutableMap.of(\"testKey\", \"testValue\"), Instant.now());\n+        PreviewAnomalyDetectorRequest request = new PreviewAnomalyDetectorRequest(\n+            detector,\n+            detector.getDetectorId(),\n+            Instant.now(),\n+            Instant.now()\n+        );\n+        ActionListener<PreviewAnomalyDetectorResponse> previewResponse = new ActionListener<PreviewAnomalyDetectorResponse>() {\n+            @Override\n+            public void onResponse(PreviewAnomalyDetectorResponse response) {\n+                Assert.assertTrue(false);\n+            }\n+\n+            @Override\n+            public void onFailure(Exception e) {\n+                Assert.assertTrue(e.getClass() == NullPointerException.class);\n+            }\n+        };\n+        previewAction.doExecute(task, request, previewResponse);\n+    }\n+\n+    @Test\n+    public void testPreviewRequest() throws Exception {\n+        BytesStreamOutput out = new BytesStreamOutput();\n+        AnomalyDetector detector = TestHelpers.randomAnomalyDetector(ImmutableMap.of(\"testKey\", \"testValue\"), Instant.now());\n+        PreviewAnomalyDetectorRequest request = new PreviewAnomalyDetectorRequest(\n+            detector,\n+            \"1234\",\n+            Instant.now().minusSeconds(60),\n+            Instant.now()\n+        );\n+        request.writeTo(out);\n+        NamedWriteableAwareStreamInput input = new NamedWriteableAwareStreamInput(out.bytes().streamInput(), writableRegistry());\n+        PreviewAnomalyDetectorRequest newRequest = new PreviewAnomalyDetectorRequest(input);\n+        Assert.assertEquals(request.getDetectorId(), newRequest.getDetectorId());\n+        Assert.assertEquals(request.getStartTime(), newRequest.getStartTime());\n+        Assert.assertEquals(request.getEndTime(), newRequest.getEndTime());\n+        Assert.assertNotNull(newRequest.getDetector());\n+        Assert.assertNull(newRequest.validate());\n+    }\n+\n+    @Test\n+    public void testPreviewResponse() throws Exception {\n+        BytesStreamOutput out = new BytesStreamOutput();\n+        AnomalyDetector detector = TestHelpers.randomAnomalyDetector(ImmutableMap.of(\"testKey\", \"testValue\"), Instant.now());\n+        AnomalyResult result = TestHelpers.randomMultiEntityAnomalyDetectResult(0.8d, 0d);\n+        PreviewAnomalyDetectorResponse response = new PreviewAnomalyDetectorResponse(ImmutableList.of(result), detector);\n+        response.writeTo(out);\n+        NamedWriteableAwareStreamInput input = new NamedWriteableAwareStreamInput(out.bytes().streamInput(), writableRegistry());\n+        PreviewAnomalyDetectorResponse newResponse = new PreviewAnomalyDetectorResponse(input);\n+        Assert.assertNotNull(newResponse.toXContent(TestHelpers.builder(), ToXContent.EMPTY_PARAMS));\n+    }", "originalCommit": "84e0b85163983329bea1c83a9b229794aaa417e2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjI3OTA3Ng==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/321#discussion_r552279076", "bodyText": "Sure done.", "author": "saratvemulapalli", "createdAt": "2021-01-06T00:15:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njk5OTU4Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzAwMDEzNQ==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/321#discussion_r547000135", "bodyText": "Is it possible to assert expected response is returned instead of asserting true when execution reaches onResponse()", "author": "yizheliu-amazon", "createdAt": "2020-12-22T00:29:31Z", "path": "src/test/java/com/amazon/opendistroforelasticsearch/ad/transport/PreviewAnomalyDetectorActionTests.java", "diffHunk": "@@ -0,0 +1,246 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.ad.transport;\n+\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import java.io.IOException;\n+import java.time.Instant;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.action.admin.indices.create.CreateIndexRequest;\n+import org.elasticsearch.action.support.ActionFilters;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.cluster.service.ClusterService;\n+import org.elasticsearch.common.io.stream.BytesStreamOutput;\n+import org.elasticsearch.common.io.stream.NamedWriteableAwareStreamInput;\n+import org.elasticsearch.common.io.stream.NamedWriteableRegistry;\n+import org.elasticsearch.common.settings.ClusterSettings;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.xcontent.ToXContent;\n+import org.elasticsearch.tasks.Task;\n+import org.elasticsearch.test.ESSingleNodeTestCase;\n+import org.elasticsearch.transport.TransportService;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import com.amazon.opendistroforelasticsearch.ad.AnomalyDetectorRunner;\n+import com.amazon.opendistroforelasticsearch.ad.TestHelpers;\n+import com.amazon.opendistroforelasticsearch.ad.feature.FeatureManager;\n+import com.amazon.opendistroforelasticsearch.ad.ml.ModelManager;\n+import com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetector;\n+import com.amazon.opendistroforelasticsearch.ad.model.AnomalyResult;\n+import com.amazon.opendistroforelasticsearch.ad.settings.AnomalyDetectorSettings;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+\n+public class PreviewAnomalyDetectorActionTests extends ESSingleNodeTestCase {\n+    private ActionListener<PreviewAnomalyDetectorResponse> response;\n+    private PreviewAnomalyDetectorTransportAction action;\n+    private AnomalyDetectorRunner runner;\n+    private ClusterService clusterService;\n+    private Task task;\n+\n+    @Override\n+    @Before\n+    public void setUp() throws Exception {\n+        super.setUp();\n+        task = mock(Task.class);\n+        clusterService = mock(ClusterService.class);\n+        ClusterSettings clusterSettings = new ClusterSettings(\n+            Settings.EMPTY,\n+            Collections.unmodifiableSet(new HashSet<>(Arrays.asList(AnomalyDetectorSettings.MAX_ANOMALY_FEATURES)))\n+        );\n+        when(clusterService.getClusterSettings()).thenReturn(clusterSettings);\n+        runner = new AnomalyDetectorRunner(\n+            mock(ModelManager.class),\n+            mock(FeatureManager.class),\n+            AnomalyDetectorSettings.MAX_PREVIEW_RESULTS\n+        );\n+        action = new PreviewAnomalyDetectorTransportAction(\n+            Settings.EMPTY,\n+            mock(TransportService.class),\n+            clusterService,\n+            mock(ActionFilters.class),\n+            client(),\n+            runner,\n+            xContentRegistry()\n+        );\n+    }\n+\n+    @Override\n+    protected NamedWriteableRegistry writableRegistry() {\n+        return getInstanceFromNode(NamedWriteableRegistry.class);\n+    }\n+\n+    @Test\n+    public void testPreviewTransportActionWithNoFeature() throws IOException {\n+        // Detector with no feature, Preview should fail\n+        AnomalyDetector detector = TestHelpers.randomAnomalyDetector(Collections.emptyList());\n+        PreviewAnomalyDetectorRequest request = new PreviewAnomalyDetectorRequest(\n+            detector,\n+            detector.getDetectorId(),\n+            Instant.now(),\n+            Instant.now()\n+        );\n+        ActionListener<PreviewAnomalyDetectorResponse> previewResponse = new ActionListener<PreviewAnomalyDetectorResponse>() {\n+            @Override\n+            public void onResponse(PreviewAnomalyDetectorResponse response) {\n+                Assert.assertTrue(false);", "originalCommit": "84e0b85163983329bea1c83a9b229794aaa417e2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODI5NzYxMw==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/321#discussion_r548297613", "bodyText": "Yeah the idea is onResponse will never be called.\nWe expect on failure to be called always.\nJust incase onResponse is called we do an assert.", "author": "saratvemulapalli", "createdAt": "2020-12-23T22:30:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzAwMDEzNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzAwMzcwMA==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/321#discussion_r547003700", "bodyText": "can you also wrap the caught exception into thrown ElasticsearchException? I think it may be useful to include more info so that it is better for troubleshooting.", "author": "yizheliu-amazon", "createdAt": "2020-12-22T00:43:01Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/transport/PreviewAnomalyDetectorTransportAction.java", "diffHunk": "@@ -0,0 +1,180 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.ad.transport;\n+\n+import static com.amazon.opendistroforelasticsearch.ad.settings.AnomalyDetectorSettings.MAX_ANOMALY_FEATURES;\n+import static org.elasticsearch.common.xcontent.XContentParserUtils.ensureExpectedToken;\n+\n+import java.io.IOException;\n+import java.time.Instant;\n+import java.util.List;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.ElasticsearchException;\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.action.get.GetRequest;\n+import org.elasticsearch.action.get.GetResponse;\n+import org.elasticsearch.action.support.ActionFilters;\n+import org.elasticsearch.action.support.HandledTransportAction;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.cluster.service.ClusterService;\n+import org.elasticsearch.common.inject.Inject;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.util.concurrent.ThreadContext;\n+import org.elasticsearch.common.xcontent.NamedXContentRegistry;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.rest.RestStatus;\n+import org.elasticsearch.tasks.Task;\n+import org.elasticsearch.transport.TransportService;\n+\n+import com.amazon.opendistroforelasticsearch.ad.AnomalyDetectorRunner;\n+import com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetector;\n+import com.amazon.opendistroforelasticsearch.ad.model.AnomalyResult;\n+import com.amazon.opendistroforelasticsearch.ad.util.RestHandlerUtils;\n+\n+public class PreviewAnomalyDetectorTransportAction extends\n+    HandledTransportAction<PreviewAnomalyDetectorRequest, PreviewAnomalyDetectorResponse> {\n+    private final Logger logger = LogManager.getLogger(PreviewAnomalyDetectorTransportAction.class);\n+    private final AnomalyDetectorRunner anomalyDetectorRunner;\n+    private final Client client;\n+    private final NamedXContentRegistry xContentRegistry;\n+    private volatile Integer maxAnomalyFeatures;\n+\n+    @Inject\n+    public PreviewAnomalyDetectorTransportAction(\n+        Settings settings,\n+        TransportService transportService,\n+        ClusterService clusterService,\n+        ActionFilters actionFilters,\n+        Client client,\n+        AnomalyDetectorRunner anomalyDetectorRunner,\n+        NamedXContentRegistry xContentRegistry\n+    ) {\n+        super(PreviewAnomalyDetectorAction.NAME, transportService, actionFilters, PreviewAnomalyDetectorRequest::new);\n+        this.client = client;\n+        this.anomalyDetectorRunner = anomalyDetectorRunner;\n+        this.xContentRegistry = xContentRegistry;\n+        maxAnomalyFeatures = MAX_ANOMALY_FEATURES.get(settings);\n+        clusterService.getClusterSettings().addSettingsUpdateConsumer(MAX_ANOMALY_FEATURES, it -> maxAnomalyFeatures = it);\n+    }\n+\n+    @Override\n+    protected void doExecute(Task task, PreviewAnomalyDetectorRequest request, ActionListener<PreviewAnomalyDetectorResponse> listener) {\n+        try (ThreadContext.StoredContext context = client.threadPool().getThreadContext().stashContext()) {\n+            AnomalyDetector detector = request.getDetector();\n+            String detectorId = request.getDetectorId();\n+            Instant startTime = request.getStartTime();\n+            Instant endTime = request.getEndTime();\n+            if (detector != null) {\n+                String error = validateDetector(detector);\n+                if (StringUtils.isNotBlank(error)) {\n+                    listener.onFailure(new ElasticsearchException(error, RestStatus.BAD_REQUEST));\n+                    return;\n+                }\n+                anomalyDetectorRunner.executeDetector(detector, startTime, endTime, getPreviewDetectorActionListener(listener, detector));\n+            } else {\n+                previewAnomalyDetector(listener, detectorId, startTime, endTime);\n+            }\n+        } catch (Exception e) {\n+            logger.error(e);\n+            listener.onFailure(e);\n+        }\n+    }\n+\n+    private String validateDetector(AnomalyDetector detector) {\n+        if (detector.getFeatureAttributes().isEmpty()) {\n+            return \"Can't preview detector without feature\";\n+        } else {\n+            return RestHandlerUtils.validateAnomalyDetector(detector, maxAnomalyFeatures);\n+        }\n+    }\n+\n+    private ActionListener<List<AnomalyResult>> getPreviewDetectorActionListener(\n+        ActionListener<PreviewAnomalyDetectorResponse> listener,\n+        AnomalyDetector detector\n+    ) {\n+        return new ActionListener<List<AnomalyResult>>() {\n+            @Override\n+            public void onResponse(List<AnomalyResult> anomalyResults) {\n+                PreviewAnomalyDetectorResponse response = new PreviewAnomalyDetectorResponse(anomalyResults, detector);\n+                listener.onResponse(response);\n+            }\n+\n+            @Override\n+            public void onFailure(Exception e) {\n+                listener\n+                    .onFailure(\n+                        new ElasticsearchException(", "originalCommit": "84e0b85163983329bea1c83a9b229794aaa417e2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODI5Nzg3Mw==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/321#discussion_r548297873", "bodyText": "Sure makes sense.\nLet me make that change.", "author": "saratvemulapalli", "createdAt": "2020-12-23T22:30:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzAwMzcwMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzAwMzk2Nw==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/321#discussion_r547003967", "bodyText": "same comment on including caught exception.", "author": "yizheliu-amazon", "createdAt": "2020-12-22T00:44:00Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/ad/transport/PreviewAnomalyDetectorTransportAction.java", "diffHunk": "@@ -0,0 +1,180 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistroforelasticsearch.ad.transport;\n+\n+import static com.amazon.opendistroforelasticsearch.ad.settings.AnomalyDetectorSettings.MAX_ANOMALY_FEATURES;\n+import static org.elasticsearch.common.xcontent.XContentParserUtils.ensureExpectedToken;\n+\n+import java.io.IOException;\n+import java.time.Instant;\n+import java.util.List;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.elasticsearch.ElasticsearchException;\n+import org.elasticsearch.action.ActionListener;\n+import org.elasticsearch.action.get.GetRequest;\n+import org.elasticsearch.action.get.GetResponse;\n+import org.elasticsearch.action.support.ActionFilters;\n+import org.elasticsearch.action.support.HandledTransportAction;\n+import org.elasticsearch.client.Client;\n+import org.elasticsearch.cluster.service.ClusterService;\n+import org.elasticsearch.common.inject.Inject;\n+import org.elasticsearch.common.settings.Settings;\n+import org.elasticsearch.common.util.concurrent.ThreadContext;\n+import org.elasticsearch.common.xcontent.NamedXContentRegistry;\n+import org.elasticsearch.common.xcontent.XContentParser;\n+import org.elasticsearch.rest.RestStatus;\n+import org.elasticsearch.tasks.Task;\n+import org.elasticsearch.transport.TransportService;\n+\n+import com.amazon.opendistroforelasticsearch.ad.AnomalyDetectorRunner;\n+import com.amazon.opendistroforelasticsearch.ad.model.AnomalyDetector;\n+import com.amazon.opendistroforelasticsearch.ad.model.AnomalyResult;\n+import com.amazon.opendistroforelasticsearch.ad.util.RestHandlerUtils;\n+\n+public class PreviewAnomalyDetectorTransportAction extends\n+    HandledTransportAction<PreviewAnomalyDetectorRequest, PreviewAnomalyDetectorResponse> {\n+    private final Logger logger = LogManager.getLogger(PreviewAnomalyDetectorTransportAction.class);\n+    private final AnomalyDetectorRunner anomalyDetectorRunner;\n+    private final Client client;\n+    private final NamedXContentRegistry xContentRegistry;\n+    private volatile Integer maxAnomalyFeatures;\n+\n+    @Inject\n+    public PreviewAnomalyDetectorTransportAction(\n+        Settings settings,\n+        TransportService transportService,\n+        ClusterService clusterService,\n+        ActionFilters actionFilters,\n+        Client client,\n+        AnomalyDetectorRunner anomalyDetectorRunner,\n+        NamedXContentRegistry xContentRegistry\n+    ) {\n+        super(PreviewAnomalyDetectorAction.NAME, transportService, actionFilters, PreviewAnomalyDetectorRequest::new);\n+        this.client = client;\n+        this.anomalyDetectorRunner = anomalyDetectorRunner;\n+        this.xContentRegistry = xContentRegistry;\n+        maxAnomalyFeatures = MAX_ANOMALY_FEATURES.get(settings);\n+        clusterService.getClusterSettings().addSettingsUpdateConsumer(MAX_ANOMALY_FEATURES, it -> maxAnomalyFeatures = it);\n+    }\n+\n+    @Override\n+    protected void doExecute(Task task, PreviewAnomalyDetectorRequest request, ActionListener<PreviewAnomalyDetectorResponse> listener) {\n+        try (ThreadContext.StoredContext context = client.threadPool().getThreadContext().stashContext()) {\n+            AnomalyDetector detector = request.getDetector();\n+            String detectorId = request.getDetectorId();\n+            Instant startTime = request.getStartTime();\n+            Instant endTime = request.getEndTime();\n+            if (detector != null) {\n+                String error = validateDetector(detector);\n+                if (StringUtils.isNotBlank(error)) {\n+                    listener.onFailure(new ElasticsearchException(error, RestStatus.BAD_REQUEST));\n+                    return;\n+                }\n+                anomalyDetectorRunner.executeDetector(detector, startTime, endTime, getPreviewDetectorActionListener(listener, detector));\n+            } else {\n+                previewAnomalyDetector(listener, detectorId, startTime, endTime);\n+            }\n+        } catch (Exception e) {\n+            logger.error(e);\n+            listener.onFailure(e);\n+        }\n+    }\n+\n+    private String validateDetector(AnomalyDetector detector) {\n+        if (detector.getFeatureAttributes().isEmpty()) {\n+            return \"Can't preview detector without feature\";\n+        } else {\n+            return RestHandlerUtils.validateAnomalyDetector(detector, maxAnomalyFeatures);\n+        }\n+    }\n+\n+    private ActionListener<List<AnomalyResult>> getPreviewDetectorActionListener(\n+        ActionListener<PreviewAnomalyDetectorResponse> listener,\n+        AnomalyDetector detector\n+    ) {\n+        return new ActionListener<List<AnomalyResult>>() {\n+            @Override\n+            public void onResponse(List<AnomalyResult> anomalyResults) {\n+                PreviewAnomalyDetectorResponse response = new PreviewAnomalyDetectorResponse(anomalyResults, detector);\n+                listener.onResponse(response);\n+            }\n+\n+            @Override\n+            public void onFailure(Exception e) {\n+                listener\n+                    .onFailure(\n+                        new ElasticsearchException(\n+                            \"Unexpected error running anomaly detector \" + detector.getDetectorId(),\n+                            RestStatus.INTERNAL_SERVER_ERROR\n+                        )\n+                    );\n+            }\n+        };\n+    }\n+\n+    private void previewAnomalyDetector(\n+        ActionListener<PreviewAnomalyDetectorResponse> listener,\n+        String detectorId,\n+        Instant startTime,\n+        Instant endTime\n+    ) {\n+        if (!StringUtils.isBlank(detectorId)) {\n+            GetRequest getRequest = new GetRequest(AnomalyDetector.ANOMALY_DETECTORS_INDEX).id(detectorId);\n+            client.get(getRequest, onGetAnomalyDetectorResponse(listener, startTime, endTime));\n+        } else {\n+            listener.onFailure(new ElasticsearchException(\"Wrong input, no detector id\", RestStatus.NOT_FOUND));\n+        }\n+    }\n+\n+    private ActionListener<GetResponse> onGetAnomalyDetectorResponse(\n+        ActionListener<PreviewAnomalyDetectorResponse> listener,\n+        Instant startTime,\n+        Instant endTime\n+    ) {\n+        return new ActionListener<GetResponse>() {\n+            @Override\n+            public void onResponse(GetResponse response) {\n+                if (!response.isExists()) {\n+                    listener\n+                        .onFailure(\n+                            new ElasticsearchException(\"Can't find anomaly detector with id:\" + response.getId(), RestStatus.NOT_FOUND)\n+                        );\n+                    return;\n+                }\n+\n+                try {\n+                    XContentParser parser = RestHandlerUtils\n+                        .createXContentParserFromRegistry(xContentRegistry, response.getSourceAsBytesRef());\n+                    ensureExpectedToken(XContentParser.Token.START_OBJECT, parser.nextToken(), parser);\n+                    AnomalyDetector detector = AnomalyDetector.parse(parser, response.getId(), response.getVersion());\n+\n+                    anomalyDetectorRunner\n+                        .executeDetector(detector, startTime, endTime, getPreviewDetectorActionListener(listener, detector));\n+                } catch (IOException e) {\n+                    listener.onFailure(e);\n+                }\n+            }\n+\n+            @Override\n+            public void onFailure(Exception e) {\n+                listener.onFailure(new ElasticsearchException(\"Could not execute get query to find detector\"));", "originalCommit": "84e0b85163983329bea1c83a9b229794aaa417e2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODI5Nzk3OQ==", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/pull/321#discussion_r548297979", "bodyText": "Sure will do.", "author": "saratvemulapalli", "createdAt": "2020-12-23T22:30:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzAwMzk2Nw=="}], "type": "inlineReview"}, {"oid": "4213a2312d25b7e3d60dfc29ed69fa2db425e149", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/commit/4213a2312d25b7e3d60dfc29ed69fa2db425e149", "message": "Merging from master", "committedDate": "2021-01-05T21:05:09Z", "type": "commit"}, {"oid": "bcf1b51ccc2510e2bcbc2eccf677666d85529c80", "url": "https://github.com/opendistro-for-elasticsearch/anomaly-detection/commit/bcf1b51ccc2510e2bcbc2eccf677666d85529c80", "message": "Adding test coverage for Preview Transport Action", "committedDate": "2021-01-06T00:14:52Z", "type": "commit"}]}