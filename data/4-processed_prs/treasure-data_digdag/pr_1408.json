{"pr_number": 1408, "pr_title": "Retry on rate limit of AWS API in EcsCommandExecutor", "pr_createdAt": "2020-05-21T07:31:10Z", "pr_url": "https://github.com/treasure-data/digdag/pull/1408", "timeline": [{"oid": "725eef2a13e0a1031fe4bce3df5637e348f74bfd", "url": "https://github.com/treasure-data/digdag/commit/725eef2a13e0a1031fe4bce3df5637e348f74bfd", "message": "Implement comprehensive retry on rate limit of AWS API in EcsCommandExecutor.", "committedDate": "2020-05-21T07:21:49Z", "type": "commit"}, {"oid": "a05d29a9beba0f69bcc5fb8410341318132ad0b7", "url": "https://github.com/treasure-data/digdag/commit/a05d29a9beba0f69bcc5fb8410341318132ad0b7", "message": "Skip waitWithRandomJitter() before first call.", "committedDate": "2020-05-21T08:15:40Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAwODgwOQ==", "url": "https://github.com/treasure-data/digdag/pull/1408#discussion_r429008809", "bodyText": "Calling Thread.interrupt() here would be good to avoid blocking shutdown sequence.", "author": "komamitsu", "createdAt": "2020-05-22T02:18:21Z", "path": "digdag-standards/src/main/java/io/digdag/standards/command/ecs/DefaultEcsClient.java", "diffHunk": "@@ -224,13 +249,61 @@ public GetLogEventsResult getLog(\n         if (nextToken.isPresent()) {\n             request.withNextToken(\"f/\" + nextToken.get());\n         }\n-        return logs.getLogEvents(request);\n+        return retryOnRateLimit(() -> logs.getLogEvents(request));\n     }\n \n     @Override\n     public void close()\n             throws IOException\n     {\n-        client.shutdown();\n+        retryOnRateLimit(() -> {\n+            client.shutdown();\n+            return true; //avoid restrict on generics with void\n+        });\n+    }\n+\n+    /**\n+     * Retry func if ThrottlingException happen.\n+     * Retry interval gradually increases with random jitter.\n+     * @param func\n+     * @param <T>\n+     * @return\n+     * @throws AmazonServiceException\n+     */\n+    @VisibleForTesting\n+    public <T> T retryOnRateLimit(Supplier<T> func) throws AmazonServiceException\n+    {\n+        //ToDo  AmazonECSClient has its own retry policy mechanism. Evaluate it and consider it as replacement of this method.\n+        final int baseIncrementalSecs = 10;\n+        for (int i = 0; i < rateLimitMaxRetry; i++) {\n+            try {\n+                return func.get();\n+            }\n+            catch (AmazonServiceException ex) {\n+                if (RetryUtils.isThrottlingException(ex)) {\n+                    logger.debug(\"Rate exceed: {}. Will be retried.\", ex.toString());\n+                    // Max of baseWaitSecs is rateLimitMaxBaseWaitSecs\n+                    final long baseWaitSecs = baseIncrementalSecs * i > rateLimitMaxBaseWaitSecs ? rateLimitMaxBaseWaitSecs: baseIncrementalSecs * i;\n+                    waitWithRandomJitter(baseWaitSecs, rateLimitMaxJitterSecs);\n+                }\n+                else {\n+                    throw ex;\n+                }\n+            }\n+        }\n+        logger.error(\"Failed to call EcsClient method after Retried {} times\", rateLimitMaxRetry);\n+        throw new RuntimeException(\"Failed to call EcsClient method\");\n+    }\n+\n+    @VisibleForTesting\n+    public void waitWithRandomJitter(long baseWaitSecs, long baseJitterSecs)\n+    {\n+        try {\n+            long jitterSecs = (long) (baseJitterSecs * Math.random());\n+            Thread.sleep((baseWaitSecs + jitterSecs) * 1000);\n+        }\n+        catch (InterruptedException ex) {\n+            // Nothing to do", "originalCommit": "a05d29a9beba0f69bcc5fb8410341318132ad0b7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAyNTk4OA==", "url": "https://github.com/treasure-data/digdag/pull/1408#discussion_r429025988", "bodyText": "Got it. Will fix it.", "author": "yoyama", "createdAt": "2020-05-22T03:36:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAwODgwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA4NzIzOQ==", "url": "https://github.com/treasure-data/digdag/pull/1408#discussion_r429087239", "bodyText": "Fixed.", "author": "yoyama", "createdAt": "2020-05-22T07:29:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAwODgwOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAwOTYyNA==", "url": "https://github.com/treasure-data/digdag/pull/1408#discussion_r429009624", "bodyText": "Or just this(config, client, logs, 60, 10, 50) ?", "author": "komamitsu", "createdAt": "2020-05-22T02:22:03Z", "path": "digdag-standards/src/main/java/io/digdag/standards/command/ecs/DefaultEcsClient.java", "diffHunk": "@@ -57,6 +62,26 @@ protected DefaultEcsClient(\n         this.config = config;\n         this.client = client;\n         this.logs = logs;\n+        this.rateLimitMaxRetry = 60;", "originalCommit": "a05d29a9beba0f69bcc5fb8410341318132ad0b7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA4NzQwMQ==", "url": "https://github.com/treasure-data/digdag/pull/1408#discussion_r429087401", "bodyText": "Fixed it.", "author": "yoyama", "createdAt": "2020-05-22T07:30:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAwOTYyNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAxNjEzOQ==", "url": "https://github.com/treasure-data/digdag/pull/1408#discussion_r429016139", "bodyText": "Is this idempotent? Retrying this call might create multiple tasks?", "author": "komamitsu", "createdAt": "2020-05-22T02:50:31Z", "path": "digdag-standards/src/main/java/io/digdag/standards/command/ecs/DefaultEcsClient.java", "diffHunk": "@@ -77,7 +102,7 @@ public RunTaskResult submitTask(final RunTaskRequest request)\n             throws ConfigException\n     {\n         try {\n-            return client.runTask(request);\n+            return retryOnRateLimit(() -> client.runTask(request));", "originalCommit": "a05d29a9beba0f69bcc5fb8410341318132ad0b7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAyNjQxMA==", "url": "https://github.com/treasure-data/digdag/pull/1408#discussion_r429026410", "bodyText": "retryOnRateLimit only retry when ThrottleException (rate limit) happen. It mean API request is not accepted at that time. So only one api call is accepted.\nIn this case, we don't take care on multi task in my understand.", "author": "yoyama", "createdAt": "2020-05-22T03:38:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAxNjEzOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA1MDk2Mw==", "url": "https://github.com/treasure-data/digdag/pull/1408#discussion_r429050963", "bodyText": "Ah, that's definitely okay \ud83d\udc4d", "author": "komamitsu", "createdAt": "2020-05-22T05:34:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAxNjEzOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAxNjQ0OQ==", "url": "https://github.com/treasure-data/digdag/pull/1408#discussion_r429016449", "bodyText": "I guess this is idempotent, but can you check if it's okay to call this twice or more just in case?", "author": "komamitsu", "createdAt": "2020-05-22T02:51:51Z", "path": "digdag-standards/src/main/java/io/digdag/standards/command/ecs/DefaultEcsClient.java", "diffHunk": "@@ -200,7 +225,7 @@ public void stopTask(final String cluster, final String taskArn)\n         final StopTaskRequest request = new StopTaskRequest()\n                 .withCluster(cluster)\n                 .withTask(taskArn);\n-        client.stopTask(request);\n+        retryOnRateLimit(() -> client.stopTask(request));", "originalCommit": "a05d29a9beba0f69bcc5fb8410341318132ad0b7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAyNjQ4MQ==", "url": "https://github.com/treasure-data/digdag/pull/1408#discussion_r429026481", "bodyText": "same as above comment. Only one api call will be accepted.", "author": "yoyama", "createdAt": "2020-05-22T03:38:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAxNjQ0OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAxOTY5Nw==", "url": "https://github.com/treasure-data/digdag/pull/1408#discussion_r429019697", "bodyText": "Returning null would be a bit better? I guess it'll be handled as T=Void in this case", "author": "komamitsu", "createdAt": "2020-05-22T03:06:55Z", "path": "digdag-standards/src/main/java/io/digdag/standards/command/ecs/DefaultEcsClient.java", "diffHunk": "@@ -224,13 +249,61 @@ public GetLogEventsResult getLog(\n         if (nextToken.isPresent()) {\n             request.withNextToken(\"f/\" + nextToken.get());\n         }\n-        return logs.getLogEvents(request);\n+        return retryOnRateLimit(() -> logs.getLogEvents(request));\n     }\n \n     @Override\n     public void close()\n             throws IOException\n     {\n-        client.shutdown();\n+        retryOnRateLimit(() -> {\n+            client.shutdown();\n+            return true; //avoid restrict on generics with void", "originalCommit": "a05d29a9beba0f69bcc5fb8410341318132ad0b7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA4NzYyMg==", "url": "https://github.com/treasure-data/digdag/pull/1408#discussion_r429087622", "bodyText": "Thanks. Fixed it.", "author": "yoyama", "createdAt": "2020-05-22T07:30:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAxOTY5Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAyMDI4MQ==", "url": "https://github.com/treasure-data/digdag/pull/1408#discussion_r429020281", "bodyText": "I don't have a strong opinion on this, but I think this can be an instance variable.", "author": "komamitsu", "createdAt": "2020-05-22T03:09:29Z", "path": "digdag-standards/src/main/java/io/digdag/standards/command/ecs/DefaultEcsClient.java", "diffHunk": "@@ -224,13 +249,61 @@ public GetLogEventsResult getLog(\n         if (nextToken.isPresent()) {\n             request.withNextToken(\"f/\" + nextToken.get());\n         }\n-        return logs.getLogEvents(request);\n+        return retryOnRateLimit(() -> logs.getLogEvents(request));\n     }\n \n     @Override\n     public void close()\n             throws IOException\n     {\n-        client.shutdown();\n+        retryOnRateLimit(() -> {\n+            client.shutdown();\n+            return true; //avoid restrict on generics with void\n+        });\n+    }\n+\n+    /**\n+     * Retry func if ThrottlingException happen.\n+     * Retry interval gradually increases with random jitter.\n+     * @param func\n+     * @param <T>\n+     * @return\n+     * @throws AmazonServiceException\n+     */\n+    @VisibleForTesting\n+    public <T> T retryOnRateLimit(Supplier<T> func) throws AmazonServiceException\n+    {\n+        //ToDo  AmazonECSClient has its own retry policy mechanism. Evaluate it and consider it as replacement of this method.\n+        final int baseIncrementalSecs = 10;", "originalCommit": "a05d29a9beba0f69bcc5fb8410341318132ad0b7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA4Nzc3OA==", "url": "https://github.com/treasure-data/digdag/pull/1408#discussion_r429087778", "bodyText": "Got it. I fixed it.", "author": "yoyama", "createdAt": "2020-05-22T07:30:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAyMDI4MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAyMDY4OA==", "url": "https://github.com/treasure-data/digdag/pull/1408#discussion_r429020688", "bodyText": "This can be replaced with Math.min(baseIncrementalSecs * i, rateLimitMaxBaseWaitSecs)", "author": "komamitsu", "createdAt": "2020-05-22T03:11:25Z", "path": "digdag-standards/src/main/java/io/digdag/standards/command/ecs/DefaultEcsClient.java", "diffHunk": "@@ -224,13 +249,61 @@ public GetLogEventsResult getLog(\n         if (nextToken.isPresent()) {\n             request.withNextToken(\"f/\" + nextToken.get());\n         }\n-        return logs.getLogEvents(request);\n+        return retryOnRateLimit(() -> logs.getLogEvents(request));\n     }\n \n     @Override\n     public void close()\n             throws IOException\n     {\n-        client.shutdown();\n+        retryOnRateLimit(() -> {\n+            client.shutdown();\n+            return true; //avoid restrict on generics with void\n+        });\n+    }\n+\n+    /**\n+     * Retry func if ThrottlingException happen.\n+     * Retry interval gradually increases with random jitter.\n+     * @param func\n+     * @param <T>\n+     * @return\n+     * @throws AmazonServiceException\n+     */\n+    @VisibleForTesting\n+    public <T> T retryOnRateLimit(Supplier<T> func) throws AmazonServiceException\n+    {\n+        //ToDo  AmazonECSClient has its own retry policy mechanism. Evaluate it and consider it as replacement of this method.\n+        final int baseIncrementalSecs = 10;\n+        for (int i = 0; i < rateLimitMaxRetry; i++) {\n+            try {\n+                return func.get();\n+            }\n+            catch (AmazonServiceException ex) {\n+                if (RetryUtils.isThrottlingException(ex)) {\n+                    logger.debug(\"Rate exceed: {}. Will be retried.\", ex.toString());\n+                    // Max of baseWaitSecs is rateLimitMaxBaseWaitSecs\n+                    final long baseWaitSecs = baseIncrementalSecs * i > rateLimitMaxBaseWaitSecs ? rateLimitMaxBaseWaitSecs: baseIncrementalSecs * i;", "originalCommit": "a05d29a9beba0f69bcc5fb8410341318132ad0b7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE0MzA0MA==", "url": "https://github.com/treasure-data/digdag/pull/1408#discussion_r429143040", "bodyText": "Thanks, I fixed it.", "author": "yoyama", "createdAt": "2020-05-22T09:30:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAyMDY4OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAyMTE5OQ==", "url": "https://github.com/treasure-data/digdag/pull/1408#discussion_r429021199", "bodyText": "Do you think it's a good idea to collect metrics of this retry over cases?", "author": "komamitsu", "createdAt": "2020-05-22T03:13:41Z", "path": "digdag-standards/src/main/java/io/digdag/standards/command/ecs/DefaultEcsClient.java", "diffHunk": "@@ -224,13 +249,61 @@ public GetLogEventsResult getLog(\n         if (nextToken.isPresent()) {\n             request.withNextToken(\"f/\" + nextToken.get());\n         }\n-        return logs.getLogEvents(request);\n+        return retryOnRateLimit(() -> logs.getLogEvents(request));\n     }\n \n     @Override\n     public void close()\n             throws IOException\n     {\n-        client.shutdown();\n+        retryOnRateLimit(() -> {\n+            client.shutdown();\n+            return true; //avoid restrict on generics with void\n+        });\n+    }\n+\n+    /**\n+     * Retry func if ThrottlingException happen.\n+     * Retry interval gradually increases with random jitter.\n+     * @param func\n+     * @param <T>\n+     * @return\n+     * @throws AmazonServiceException\n+     */\n+    @VisibleForTesting\n+    public <T> T retryOnRateLimit(Supplier<T> func) throws AmazonServiceException\n+    {\n+        //ToDo  AmazonECSClient has its own retry policy mechanism. Evaluate it and consider it as replacement of this method.\n+        final int baseIncrementalSecs = 10;\n+        for (int i = 0; i < rateLimitMaxRetry; i++) {\n+            try {\n+                return func.get();\n+            }\n+            catch (AmazonServiceException ex) {\n+                if (RetryUtils.isThrottlingException(ex)) {\n+                    logger.debug(\"Rate exceed: {}. Will be retried.\", ex.toString());\n+                    // Max of baseWaitSecs is rateLimitMaxBaseWaitSecs\n+                    final long baseWaitSecs = baseIncrementalSecs * i > rateLimitMaxBaseWaitSecs ? rateLimitMaxBaseWaitSecs: baseIncrementalSecs * i;\n+                    waitWithRandomJitter(baseWaitSecs, rateLimitMaxJitterSecs);\n+                }\n+                else {\n+                    throw ex;\n+                }\n+            }\n+        }\n+        logger.error(\"Failed to call EcsClient method after Retried {} times\", rateLimitMaxRetry);", "originalCommit": "a05d29a9beba0f69bcc5fb8410341318132ad0b7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA4MjM0NQ==", "url": "https://github.com/treasure-data/digdag/pull/1408#discussion_r429082345", "bodyText": "I guess it is rare case that we can't resolve rate limit error with retry finally so far.\nCurrently I don't think it is needed.\nBut it is better to introduce some metrics related on CommandExecutor to improve monitoring in the future.", "author": "yoyama", "createdAt": "2020-05-22T07:17:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAyMTE5OQ=="}], "type": "inlineReview"}, {"oid": "afa6bd968d86bb9fdd9e0815c2b907eefc96a878", "url": "https://github.com/treasure-data/digdag/commit/afa6bd968d86bb9fdd9e0815c2b907eefc96a878", "message": "Refactoring based on the review.", "committedDate": "2020-05-22T07:28:58Z", "type": "commit"}]}