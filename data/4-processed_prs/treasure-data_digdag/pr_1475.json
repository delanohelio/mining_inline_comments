{"pr_number": 1475, "pr_title": "Avoid potential deadlock on `tasks` table", "pr_createdAt": "2020-11-04T05:56:39Z", "pr_url": "https://github.com/treasure-data/digdag/pull/1475", "timeline": [{"oid": "78c3bd6f83c99e69778ba1a30b2ff5359cdeb710", "url": "https://github.com/treasure-data/digdag/commit/78c3bd6f83c99e69778ba1a30b2ff5359cdeb710", "message": "Avoid potential deadlock on `tasks` table", "committedDate": "2020-11-04T05:53:42Z", "type": "commit"}, {"oid": "5829764875db51afc942d5158af8fbc4bd304a77", "url": "https://github.com/treasure-data/digdag/commit/5829764875db51afc942d5158af8fbc4bd304a77", "message": "Avoid in-place sort on immutable list", "committedDate": "2020-11-04T06:24:04Z", "type": "commit"}, {"oid": "c338a4d1b440b00aa8f7443be5e9aa11fd53d91f", "url": "https://github.com/treasure-data/digdag/commit/c338a4d1b440b00aa8f7443be5e9aa11fd53d91f", "message": "Fix broken SQL", "committedDate": "2020-11-04T07:23:46Z", "type": "commit"}, {"oid": "a669fa1ce2544241fa6e6b84e22893d866192f36", "url": "https://github.com/treasure-data/digdag/commit/a669fa1ce2544241fa6e6b84e22893d866192f36", "message": "Use original query for H2", "committedDate": "2020-11-04T07:53:01Z", "type": "commit"}, {"oid": "e143465342ee55fb7cd59a4779f0640ec8628c2f", "url": "https://github.com/treasure-data/digdag/commit/e143465342ee55fb7cd59a4779f0640ec8628c2f", "message": "Add InProcessTaskServerApiTest", "committedDate": "2020-11-05T08:36:14Z", "type": "commit"}, {"oid": "dbeb97bb17c168d83cb3fc4a593a19cd931b6367", "url": "https://github.com/treasure-data/digdag/commit/dbeb97bb17c168d83cb3fc4a593a19cd931b6367", "message": "Implement test case", "committedDate": "2020-11-06T03:31:11Z", "type": "commit"}, {"oid": "5c65c273662c763bd9dbfb226ffc39a2f3abef19", "url": "https://github.com/treasure-data/digdag/commit/5c65c273662c763bd9dbfb226ffc39a2f3abef19", "message": "Take care of retry-count-encoded uniqueName", "committedDate": "2020-11-06T09:30:50Z", "type": "commit"}, {"oid": "82717134268a2a4c4bd1b05a439df68cadb20e6d", "url": "https://github.com/treasure-data/digdag/commit/82717134268a2a4c4bd1b05a439df68cadb20e6d", "message": "Avoid adding duplicated code", "committedDate": "2020-11-10T02:51:09Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQwMTU3NA==", "url": "https://github.com/treasure-data/digdag/pull/1475#discussion_r520401574", "bodyText": "InProcessTaskServerApi.class is better ?", "author": "yoyama", "createdAt": "2020-11-10T09:11:15Z", "path": "digdag-core/src/main/java/io/digdag/core/agent/InProcessTaskServerApi.java", "diffHunk": "@@ -7,11 +7,28 @@\n import io.digdag.spi.TaskQueueClient;\n import io.digdag.core.queue.TaskQueueServerManager;\n import io.digdag.core.workflow.WorkflowExecutor;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Comparator;\n import java.util.List;\n+import java.util.function.ToLongFunction;\n+import java.util.stream.Collectors;\n \n public class InProcessTaskServerApi\n     implements TaskServerApi\n {\n+    private static final Logger logger = LoggerFactory.getLogger(WorkflowExecutor.class);", "originalCommit": "82717134268a2a4c4bd1b05a439df68cadb20e6d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQxMTUwMw==", "url": "https://github.com/treasure-data/digdag/pull/1475#discussion_r520411503", "bodyText": "Oh, good catch! I moved the code from WorkflowExecutor carelessly.\nI'll fix it soon. Thanks", "author": "komamitsu", "createdAt": "2020-11-10T09:26:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQwMTU3NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQwNTcwMg==", "url": "https://github.com/treasure-data/digdag/pull/1475#discussion_r520405702", "bodyText": "I am curious the naming rule of the function.\nIs there any reference to use capital letter with _ for the var name of function ?", "author": "yoyama", "createdAt": "2020-11-10T09:17:41Z", "path": "digdag-core/src/main/java/io/digdag/core/agent/InProcessTaskServerApi.java", "diffHunk": "@@ -7,11 +7,28 @@\n import io.digdag.spi.TaskQueueClient;\n import io.digdag.core.queue.TaskQueueServerManager;\n import io.digdag.core.workflow.WorkflowExecutor;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Comparator;\n import java.util.List;\n+import java.util.function.ToLongFunction;\n+import java.util.stream.Collectors;\n \n public class InProcessTaskServerApi\n     implements TaskServerApi\n {\n+    private static final Logger logger = LoggerFactory.getLogger(WorkflowExecutor.class);\n+    private final ToLongFunction<TaskQueueLock> CONV_FUNC_FROM_TASK_QUEUE_LOCK_TO_INT = taskQueueLock -> {", "originalCommit": "82717134268a2a4c4bd1b05a439df68cadb20e6d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQxMzcxMw==", "url": "https://github.com/treasure-data/digdag/pull/1475#discussion_r520413713", "bodyText": "Oops. I should have made this static since this variable is a constant... I'll fix it", "author": "komamitsu", "createdAt": "2020-11-10T09:29:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQwNTcwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQzOTI1Ng==", "url": "https://github.com/treasure-data/digdag/pull/1475#discussion_r520439256", "bodyText": "fyi: Constants on https://www.oracle.com/java/technologies/javase/codeconventions-namingconventions.html just in case", "author": "komamitsu", "createdAt": "2020-11-10T10:06:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQwNTcwMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQwNzI0Mw==", "url": "https://github.com/treasure-data/digdag/pull/1475#discussion_r520407243", "bodyText": "Is there any possible case to execute this catch(){} code or just in case ?", "author": "yoyama", "createdAt": "2020-11-10T09:19:53Z", "path": "digdag-core/src/main/java/io/digdag/core/agent/InProcessTaskServerApi.java", "diffHunk": "@@ -7,11 +7,28 @@\n import io.digdag.spi.TaskQueueClient;\n import io.digdag.core.queue.TaskQueueServerManager;\n import io.digdag.core.workflow.WorkflowExecutor;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Comparator;\n import java.util.List;\n+import java.util.function.ToLongFunction;\n+import java.util.stream.Collectors;\n \n public class InProcessTaskServerApi\n     implements TaskServerApi\n {\n+    private static final Logger logger = LoggerFactory.getLogger(WorkflowExecutor.class);\n+    private final ToLongFunction<TaskQueueLock> CONV_FUNC_FROM_TASK_QUEUE_LOCK_TO_INT = taskQueueLock -> {\n+        try {\n+            return WorkflowExecutor.parseTaskIdFromEncodedQueuedTaskName(taskQueueLock.getUniqueName());\n+        }\n+        catch (Throwable e) {\n+            logger.warn(\"Failed to convert TaskQueueLock.uniqueName to integer. The `uniqueName` will be handled as 0\", e);\n+            return 0;", "originalCommit": "82717134268a2a4c4bd1b05a439df68cadb20e6d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQxNjA3MA==", "url": "https://github.com/treasure-data/digdag/pull/1475#discussion_r520416070", "bodyText": "Basically for just-in-case. I was thinking of case that uniqueName unexpectedly contains non-digit string although I\"m not sure it could happen.", "author": "komamitsu", "createdAt": "2020-11-10T09:32:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQwNzI0Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQxMDQ2NQ==", "url": "https://github.com/treasure-data/digdag/pull/1475#discussion_r520410465", "bodyText": "IIRC the purpose of the sub query is fixing the order of lock of the rows.\nIf so, is there any formal documentation description on it ?\nI have a minor concern whether it depends on the specific Pg version or undocumented internal behavior or not.", "author": "yoyama", "createdAt": "2020-11-10T09:24:27Z", "path": "digdag-core/src/main/java/io/digdag/core/database/DatabaseSessionStoreManager.java", "diffHunk": "@@ -1745,6 +1759,18 @@ StoredSession upsertAndLockSession(@Bind(\"projectId\") int projectId,\n                 \" for update skip locked\")\n         Long lockTaskIfNotLocked(@Bind(\"id\") long taskId);\n \n+        @SqlUpdate(\"update tasks\" +\n+                \" set updated_at = now(), retry_at = NULL, state = \" + TaskStateCode.READY_CODE +\n+                \" from (\" +\n+                  \"select id from tasks\" +\n+                  \" where state in (\" + TaskStateCode.RETRY_WAITING_CODE +\",\" + TaskStateCode.GROUP_RETRY_WAITING_CODE + \")\" +\n+                  \" and retry_at \\\\<= now()\" +\n+                  \" order by id for update\" +\n+                \" ) lck\" +\n+                \" where tasks.id = lck.id\"", "originalCommit": "82717134268a2a4c4bd1b05a439df68cadb20e6d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQzNTE1Mw==", "url": "https://github.com/treasure-data/digdag/pull/1475#discussion_r520435153", "bodyText": "As far as I know, the official document explicitly doesn't mention this issue and behavior. But we can find some explanations about the issue.\n\nUPDATE deals with rows in order they are fetched from a heap. In a common case it can be considered as unordered.\n\nhttps://www.postgresql.org/message-id/CAKOSWNkb3Zy_YFQzwyRw3MRrU10LrMj04%2BHdByfQu6M1S5B7mg%40mail.gmail.com\nAnd I think you can easily find this workaround (e.g. in the above post or https://stackoverflow.com/a/27263824/5101185) although I can't 100% guarantee this behavior won't change forever.", "author": "komamitsu", "createdAt": "2020-11-10T10:00:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQxMDQ2NQ=="}], "type": "inlineReview"}, {"oid": "55db506ad3aa55a4d511c6e0daf7e48c03f846ad", "url": "https://github.com/treasure-data/digdag/commit/55db506ad3aa55a4d511c6e0daf7e48c03f846ad", "message": "Fix a few careless codes", "committedDate": "2020-11-10T10:06:55Z", "type": "commit"}]}