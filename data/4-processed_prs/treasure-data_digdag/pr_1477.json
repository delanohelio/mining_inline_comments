{"pr_number": 1477, "pr_title": "Enhance py> operator error handling", "pr_createdAt": "2020-11-06T03:50:33Z", "pr_url": "https://github.com/treasure-data/digdag/pull/1477", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI1MTk2Mw==", "url": "https://github.com/treasure-data/digdag/pull/1477#discussion_r520251963", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # SystemExit only show exit code and it is not kind to user. So create specific error message.\n          \n          \n            \n                # SystemExit only shows an exit code and it is not kind to users. So this block creates a specific error message.", "author": "serihiro", "createdAt": "2020-11-10T02:48:51Z", "path": "digdag-standards/src/main/resources/digdag/standards/py/runner.py", "diffHunk": "@@ -140,32 +140,37 @@ def digdag_inspect_arguments(callable_type, exclude_self, params):\n     else:\n         return args\n \n-callable_type, method_name = digdag_inspect_command(command)\n error = None\n+error_message = None\n error_value = None\n error_traceback = None\n+callable_type = None\n+method_name = None\n \n-if method_name:\n-    init_args = digdag_inspect_arguments(callable_type.__init__, True, params)\n-    instance = callable_type(**init_args)\n+try:\n+    callable_type, method_name = digdag_inspect_command(command)\n+    if method_name:\n+        init_args = digdag_inspect_arguments(callable_type.__init__, True, params)\n+        instance = callable_type(**init_args)\n \n-    method = getattr(instance, method_name)\n-    method_args = digdag_inspect_arguments(method, True, params)\n-    try:\n+        method = getattr(instance, method_name)\n+        method_args = digdag_inspect_arguments(method, True, params)\n         result = method(**method_args)\n-    except Exception as e:\n-        error = e\n-        error_type, error_value, _tb = sys.exc_info()\n-        error_traceback = traceback.format_exception(error_type, error_value, _tb)\n-\n-else:\n-    args = digdag_inspect_arguments(callable_type, False, params)\n-    try:\n+    else:\n+        args = digdag_inspect_arguments(callable_type, False, params)\n         result = callable_type(**args)\n-    except Exception as e:\n-        error = e\n-        error_type, error_value, _tb = sys.exc_info()\n-        error_traceback = traceback.format_exception(error_type, error_value, _tb)\n+except SystemExit as e:\n+    # SystemExit only show exit code and it is not kind to user. So create specific error message.", "originalCommit": "337fa22d493d775627f864c4f55a2d17e1ca7bd1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI2MzY5Mw==", "url": "https://github.com/treasure-data/digdag/pull/1477#discussion_r520263693", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # This error will happen if called python module name and method name are equal to standard module. (e.g tokenize.main)\n          \n          \n            \n                # This error will happen if called python module name and method name are equal to those of the standard library module. (e.g. tokenize.main)", "author": "serihiro", "createdAt": "2020-11-10T03:30:00Z", "path": "digdag-standards/src/main/resources/digdag/standards/py/runner.py", "diffHunk": "@@ -140,32 +140,37 @@ def digdag_inspect_arguments(callable_type, exclude_self, params):\n     else:\n         return args\n \n-callable_type, method_name = digdag_inspect_command(command)\n error = None\n+error_message = None\n error_value = None\n error_traceback = None\n+callable_type = None\n+method_name = None\n \n-if method_name:\n-    init_args = digdag_inspect_arguments(callable_type.__init__, True, params)\n-    instance = callable_type(**init_args)\n+try:\n+    callable_type, method_name = digdag_inspect_command(command)\n+    if method_name:\n+        init_args = digdag_inspect_arguments(callable_type.__init__, True, params)\n+        instance = callable_type(**init_args)\n \n-    method = getattr(instance, method_name)\n-    method_args = digdag_inspect_arguments(method, True, params)\n-    try:\n+        method = getattr(instance, method_name)\n+        method_args = digdag_inspect_arguments(method, True, params)\n         result = method(**method_args)\n-    except Exception as e:\n-        error = e\n-        error_type, error_value, _tb = sys.exc_info()\n-        error_traceback = traceback.format_exception(error_type, error_value, _tb)\n-\n-else:\n-    args = digdag_inspect_arguments(callable_type, False, params)\n-    try:\n+    else:\n+        args = digdag_inspect_arguments(callable_type, False, params)\n         result = callable_type(**args)\n-    except Exception as e:\n-        error = e\n-        error_type, error_value, _tb = sys.exc_info()\n-        error_traceback = traceback.format_exception(error_type, error_value, _tb)\n+except SystemExit as e:\n+    # SystemExit only show exit code and it is not kind to user. So create specific error message.\n+    # This error will happen if called python module name and method name are equal to standard module. (e.g tokenize.main)", "originalCommit": "337fa22d493d775627f864c4f55a2d17e1ca7bd1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDMxMjY0NA==", "url": "https://github.com/treasure-data/digdag/pull/1477#discussion_r520312644", "bodyText": "As of Python 3.6, f-string enables writing string format shorter. (also, Python 3.5 has been deprecated)\nhttps://docs.python.org/3/tutorial/inputoutput.html#formatted-string-literals\nIf we need to support Python 2.7 (while it is EOL), it'd be common to use format rather than %.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                error = Exception(\"Failed to call python command with code:%d\" % e.code, \"Possible cause: Ivalid python module call, duplicae module name with standard library\")\n          \n          \n            \n                error = Exception(\"Failed to call python command with code:{}\".format(e.code), \"Possible cause: Invalid python module call, duplicate module name with standard library\")\n          \n      \n    \n    \n  \n\nOr, if we can drop Python 3.5 support, we can leverage f-string like:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                error = Exception(\"Failed to call python command with code:%d\" % e.code, \"Possible cause: Ivalid python module call, duplicae module name with standard library\")\n          \n          \n            \n                error = Exception(f\"Failed to call python command with code:{e.code}\", \"Possible cause: Invalid python module call, duplicate module name with standard library\")", "author": "chezou", "createdAt": "2020-11-10T06:13:54Z", "path": "digdag-standards/src/main/resources/digdag/standards/py/runner.py", "diffHunk": "@@ -140,32 +140,37 @@ def digdag_inspect_arguments(callable_type, exclude_self, params):\n     else:\n         return args\n \n-callable_type, method_name = digdag_inspect_command(command)\n error = None\n+error_message = None\n error_value = None\n error_traceback = None\n+callable_type = None\n+method_name = None\n \n-if method_name:\n-    init_args = digdag_inspect_arguments(callable_type.__init__, True, params)\n-    instance = callable_type(**init_args)\n+try:\n+    callable_type, method_name = digdag_inspect_command(command)\n+    if method_name:\n+        init_args = digdag_inspect_arguments(callable_type.__init__, True, params)\n+        instance = callable_type(**init_args)\n \n-    method = getattr(instance, method_name)\n-    method_args = digdag_inspect_arguments(method, True, params)\n-    try:\n+        method = getattr(instance, method_name)\n+        method_args = digdag_inspect_arguments(method, True, params)\n         result = method(**method_args)\n-    except Exception as e:\n-        error = e\n-        error_type, error_value, _tb = sys.exc_info()\n-        error_traceback = traceback.format_exception(error_type, error_value, _tb)\n-\n-else:\n-    args = digdag_inspect_arguments(callable_type, False, params)\n-    try:\n+    else:\n+        args = digdag_inspect_arguments(callable_type, False, params)\n         result = callable_type(**args)\n-    except Exception as e:\n-        error = e\n-        error_type, error_value, _tb = sys.exc_info()\n-        error_traceback = traceback.format_exception(error_type, error_value, _tb)\n+except SystemExit as e:\n+    # SystemExit only shows an exit code and it is not kind to users. So this block creates a specific error message.\n+    # This error will happen if called python module name and method name are equal to those of the standard library module. (e.g. tokenize.main)\n+    error = Exception(\"Failed to call python command with code:%d\" % e.code, \"Possible cause: Ivalid python module call, duplicae module name with standard library\")", "originalCommit": "9e81727feb3fb79a2ffa56b944c140076c8ecb98", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDMxMjkzMg==", "url": "https://github.com/treasure-data/digdag/pull/1477#discussion_r520312932", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                error_message = \"%s %s\" % (error.args[0], error.args[1])\n          \n          \n            \n                error_message = \"{} {}\".format(error.args[0], error.args[1])\n          \n      \n    \n    \n  \n\nOr,\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                error_message = \"%s %s\" % (error.args[0], error.args[1])\n          \n          \n            \n                error_message = f\"{error.args[0]} {error.args[1]}\"", "author": "chezou", "createdAt": "2020-11-10T06:14:18Z", "path": "digdag-standards/src/main/resources/digdag/standards/py/runner.py", "diffHunk": "@@ -140,32 +140,37 @@ def digdag_inspect_arguments(callable_type, exclude_self, params):\n     else:\n         return args\n \n-callable_type, method_name = digdag_inspect_command(command)\n error = None\n+error_message = None\n error_value = None\n error_traceback = None\n+callable_type = None\n+method_name = None\n \n-if method_name:\n-    init_args = digdag_inspect_arguments(callable_type.__init__, True, params)\n-    instance = callable_type(**init_args)\n+try:\n+    callable_type, method_name = digdag_inspect_command(command)\n+    if method_name:\n+        init_args = digdag_inspect_arguments(callable_type.__init__, True, params)\n+        instance = callable_type(**init_args)\n \n-    method = getattr(instance, method_name)\n-    method_args = digdag_inspect_arguments(method, True, params)\n-    try:\n+        method = getattr(instance, method_name)\n+        method_args = digdag_inspect_arguments(method, True, params)\n         result = method(**method_args)\n-    except Exception as e:\n-        error = e\n-        error_type, error_value, _tb = sys.exc_info()\n-        error_traceback = traceback.format_exception(error_type, error_value, _tb)\n-\n-else:\n-    args = digdag_inspect_arguments(callable_type, False, params)\n-    try:\n+    else:\n+        args = digdag_inspect_arguments(callable_type, False, params)\n         result = callable_type(**args)\n-    except Exception as e:\n-        error = e\n-        error_type, error_value, _tb = sys.exc_info()\n-        error_traceback = traceback.format_exception(error_type, error_value, _tb)\n+except SystemExit as e:\n+    # SystemExit only shows an exit code and it is not kind to users. So this block creates a specific error message.\n+    # This error will happen if called python module name and method name are equal to those of the standard library module. (e.g. tokenize.main)\n+    error = Exception(\"Failed to call python command with code:%d\" % e.code, \"Possible cause: Ivalid python module call, duplicae module name with standard library\")\n+    error_type, error_value, _tb = sys.exc_info()\n+    error_message = \"%s %s\" % (error.args[0], error.args[1])", "originalCommit": "9e81727feb3fb79a2ffa56b944c140076c8ecb98", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "5e8ef9d1a2af52c8ca761c1befeecd5384bf0856", "url": "https://github.com/treasure-data/digdag/commit/5e8ef9d1a2af52c8ca761c1befeecd5384bf0856", "message": "Enhance error handling of py operator.", "committedDate": "2020-11-11T08:00:17Z", "type": "commit"}, {"oid": "9cbf7f3841491ec0c369ce701ffb27dbf70292df", "url": "https://github.com/treasure-data/digdag/commit/9cbf7f3841491ec0c369ce701ffb27dbf70292df", "message": "Add a test.", "committedDate": "2020-11-11T08:00:17Z", "type": "commit"}, {"oid": "c8d7b2ae500a298913edea0f2a600cbdc4a4c8ff", "url": "https://github.com/treasure-data/digdag/commit/c8d7b2ae500a298913edea0f2a600cbdc4a4c8ff", "message": "Add missing files.", "committedDate": "2020-11-11T08:00:17Z", "type": "commit"}, {"oid": "6dc36a517b7ef65465f4e7c087a1ccb381ee7a72", "url": "https://github.com/treasure-data/digdag/commit/6dc36a517b7ef65465f4e7c087a1ccb381ee7a72", "message": "Add a test and refactoring in PyIT.", "committedDate": "2020-11-11T08:00:54Z", "type": "commit"}, {"oid": "a0ae2e7175704f741a297d0c12a4efe6800e696a", "url": "https://github.com/treasure-data/digdag/commit/a0ae2e7175704f741a297d0c12a4efe6800e696a", "message": "Apply suggestions from code review\n\nCo-authored-by: Kazuhiro Serizawa <nserihiro@gmail.com>", "committedDate": "2020-11-11T08:01:15Z", "type": "commit"}, {"oid": "cf488964c5cd191d52bad5cc4db9e16c5a0f64b8", "url": "https://github.com/treasure-data/digdag/commit/cf488964c5cd191d52bad5cc4db9e16c5a0f64b8", "message": "Fix tests caused by rebase.", "committedDate": "2020-11-11T08:34:23Z", "type": "commit"}, {"oid": "cf488964c5cd191d52bad5cc4db9e16c5a0f64b8", "url": "https://github.com/treasure-data/digdag/commit/cf488964c5cd191d52bad5cc4db9e16c5a0f64b8", "message": "Fix tests caused by rebase.", "committedDate": "2020-11-11T08:34:23Z", "type": "forcePushed"}]}