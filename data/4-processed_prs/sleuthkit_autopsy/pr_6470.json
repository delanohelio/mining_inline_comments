{"pr_number": 6470, "pr_title": "6989 - Added new KeywordSearch ingest OCR process terminator", "pr_createdAt": "2020-11-16T22:59:02Z", "pr_url": "https://github.com/sleuthkit/autopsy/pull/6470", "timeline": [{"oid": "5dcb392d0cc1d2f29fa9a9d90f5dcbe908be14ad", "url": "https://github.com/sleuthkit/autopsy/commit/5dcb392d0cc1d2f29fa9a9d90f5dcbe908be14ad", "message": "Added new KeywordSearch ingest OCR process terminator", "committedDate": "2020-11-16T22:58:28Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTY4NzQ5OQ==", "url": "https://github.com/sleuthkit/autopsy/pull/6470#discussion_r529687499", "bodyText": "Very nice use of composition :)", "author": "dannysmyda", "createdAt": "2020-11-24T16:04:39Z", "path": "KeywordSearch/src/org/sleuthkit/autopsy/keywordsearch/KeywordSearchIngestModule.java", "diffHunk": "@@ -807,4 +814,27 @@ private boolean indexTextFile(AbstractFile aFile) {\n             return false;\n         }\n     }\n+    \n+    /**\n+     * This class takes a list of ProcessTerminators checking all of them\n+     * during shouldTerminateProcess.\n+     */\n+    private class HybridTerminator implements ProcessTerminator {", "originalCommit": "5dcb392d0cc1d2f29fa9a9d90f5dcbe908be14ad", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTY5NzU5MQ==", "url": "https://github.com/sleuthkit/autopsy/pull/6470#discussion_r529697591", "bodyText": "It might make sense to move this to the ProcessTerminator for better reuse, but I was keeping the scope small for this story.", "author": "kellykelly3", "createdAt": "2020-11-24T16:13:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTY4NzQ5OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjc3NDQ0Ng==", "url": "https://github.com/sleuthkit/autopsy/pull/6470#discussion_r532774446", "bodyText": "This will actually cancel any extractor that is listening to the terminator, instead of just the OCR task.\nCould you instead add the TimedProcessTerminator (and the 30 minute constant) to the ImageConfig class instead?\nYou could then construct a HybridTerminator before the OCR task is started in TikaTextExtractor.\nSee setExtractionSettings() in TikaTextExtractor for where to construct the hybrid terminator. You could add a getter to ImageConfig called getOcrTimeoutTerminator().", "author": "dannysmyda", "createdAt": "2020-11-30T17:33:06Z", "path": "KeywordSearch/src/org/sleuthkit/autopsy/keywordsearch/KeywordSearchIngestModule.java", "diffHunk": "@@ -515,7 +518,11 @@ private void postIndexSummary() {\n         private boolean extractTextAndIndex(AbstractFile aFile, Map<String, String> extractedMetadata) throws IngesterException {\n             ImageConfig imageConfig = new ImageConfig();\n             imageConfig.setOCREnabled(KeywordSearchSettings.getOcrOption());\n-            ProcessTerminator terminator = () -> context.fileIngestIsCancelled();\n+            \n+            List<ProcessTerminator> terminators = new ArrayList<>();\n+            terminators.add(() -> context.fileIngestIsCancelled()); \n+            terminators.add(new TimedProcessTerminator(OCR_TIMEOUT_SECONDS));\n+            HybridTerminator terminator = new HybridTerminator(terminators);\n             Lookup extractionContext = Lookups.fixed(imageConfig, terminator);", "originalCommit": "5dcb392d0cc1d2f29fa9a9d90f5dcbe908be14ad", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "1408ce160cc18d4509b75d1b99c302498fc10292", "url": "https://github.com/sleuthkit/autopsy/commit/1408ce160cc18d4509b75d1b99c302498fc10292", "message": "Changes as requested by reviewer", "committedDate": "2020-12-01T18:53:22Z", "type": "commit"}]}