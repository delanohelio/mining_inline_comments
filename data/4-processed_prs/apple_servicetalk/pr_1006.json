{"pr_number": 1006, "pr_title": "`RoundRobinLoadBalancer` should compose connection closure with error response", "pr_createdAt": "2020-04-07T05:05:26Z", "pr_url": "https://github.com/apple/servicetalk/pull/1006", "timeline": [{"oid": "88720e492f6909274955757526ac621c093800b3", "url": "https://github.com/apple/servicetalk/commit/88720e492f6909274955757526ac621c093800b3", "message": "`RoundRobinLoadBalancer` should compose connection closure with error response\n\nMotivation:\n\nDangling subscribes are usually a bad idea. As RRLB is not composing the\nsubscribe, it will still keep closing the connection after it returns a failure.\nWorse if the closure does not complete, it will keep this subscribe around\nforever (and so the resources associated with the subscribe).\n\nModification:\n\n- Compose new connection closure with the `Single.failed` returned from\n`flatMap`;\n\nResult:\n\nNew connection is closed before RRLB fails the returned `Single` from\n`selectConnection`.", "committedDate": "2020-04-07T05:04:30Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDUzNzQ2Mg==", "url": "https://github.com/apple/servicetalk/pull/1006#discussion_r404537462", "bodyText": "I use needClose to keep the existing behavior. But because connection closure is idempotent we may simplify and always close it.", "author": "idelpivnitskiy", "createdAt": "2020-04-07T05:06:15Z", "path": "servicetalk-loadbalancer/src/main/java/io/servicetalk/loadbalancer/RoundRobinLoadBalancer.java", "diffHunk": "@@ -299,18 +298,20 @@ public void onComplete() {\n                                     break;\n                                 }\n                                 if (Host.connectionsUpdater.compareAndSet(host, existing, connectionRemoved)) {\n-                                    newCnx.closeAsync().subscribe();\n+                                    needClose = true;\n                                     break;\n                                 }\n                                 existing = connections;\n                             }\n \n-                            return failed(new IllegalStateException(\"LoadBalancer has closed\"));\n+                            final Single<C> lbClosed = failed(new IllegalStateException(\"LoadBalancer has closed\"));\n+                            return needClose ? newCnx.closeAsync().concat(lbClosed) : lbClosed;", "originalCommit": "88720e492f6909274955757526ac621c093800b3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDU0MzQ2Mg==", "url": "https://github.com/apple/servicetalk/pull/1006#discussion_r404543462", "bodyText": "I think it is better to keep needClose since we are anyways doing the heavy-lifting to figure out who should close the connection anyways.", "author": "NiteshKant", "createdAt": "2020-04-07T05:27:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDUzNzQ2Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDU0MzYyNA==", "url": "https://github.com/apple/servicetalk/pull/1006#discussion_r404543624", "bodyText": "Can you verify if we have a test that checks the connection is closed when we get the error?", "author": "NiteshKant", "createdAt": "2020-04-07T05:28:04Z", "path": "servicetalk-loadbalancer/src/main/java/io/servicetalk/loadbalancer/RoundRobinLoadBalancer.java", "diffHunk": "@@ -277,18 +277,17 @@ public void onComplete() {\n                     // Invoke the selector before adding the connection to the pool, otherwise, connection can be used\n                     // concurrently and hence a new connection can be rejected by the selector.\n                     if (!selector.test(newCnx)) {\n-                        newCnx.closeAsync().subscribe();\n                         // Failure in selection could be temporary, hence add it to the queue and be consistent with the\n                         // fact that select failure does not close a connection.\n-                        return failed(new ConnectionRejectedException(\"Newly created connection \" + newCnx +\n-                                \" rejected by the selection filter.\"));\n+                        return newCnx.closeAsync().concat(failed(new ConnectionRejectedException(", "originalCommit": "88720e492f6909274955757526ac621c093800b3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "56620f8e88a81537621aafae2101e94913f280c7", "url": "https://github.com/apple/servicetalk/commit/56620f8e88a81537621aafae2101e94913f280c7", "message": "Add a test to verify that connection is closed by LB when selector rejects", "committedDate": "2020-04-07T17:18:37Z", "type": "commit"}, {"oid": "a4da9dd14748ad1cc1d7c3ded439a995899ca05d", "url": "https://github.com/apple/servicetalk/commit/a4da9dd14748ad1cc1d7c3ded439a995899ca05d", "message": "make checkstyle happy", "committedDate": "2020-04-07T17:42:02Z", "type": "commit"}]}