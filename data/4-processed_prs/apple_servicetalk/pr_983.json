{"pr_number": 983, "pr_title": "gRPC gradle plugin rework", "pr_createdAt": "2020-03-25T23:27:21Z", "pr_url": "https://github.com/apple/servicetalk/pull/983", "timeline": [{"oid": "0cb7da209ad3d85059e859ad6e39e66d5f79fa90", "url": "https://github.com/apple/servicetalk/commit/0cb7da209ad3d85059e859ad6e39e66d5f79fa90", "message": "gRPC gradle plugin rework\n\nMotivation:\n0ebe48ed3948f22bfc003c8a0c551572bb70bbbf divided the\nservicetalk-grpc-gradle plugin into two files:\n1. an executable script\n2. an uber jar with the plugin logic\nThe executable script assumed the uber jar would be co-located in the\nsame directory as the uber jar, but that isn't the case in gradle\ncaches. This means the plugin may fail to execute outside of the maven\nm2 repository structure.\n\nModifications:\n- Instead of publishing a static script for each platform which assumes\na co-located uber jar, dynamically generate the executable script\ndepending upon where the uber jar is resolved from for the local build.\n\nResult:\nservicetalk-grpc-gradle works with gradle cache directory structure and\nlocal development.", "committedDate": "2020-03-25T23:27:50Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIzMTkwMQ==", "url": "https://github.com/apple/servicetalk/pull/983#discussion_r398231901", "bodyText": "generation of temp files is not ideal ... but a reliable way to make sure we use the jar file that is actually resolved for each build. I'm open to alternatives @idelpivnitskiy", "author": "Scottmitch", "createdAt": "2020-03-25T23:29:05Z", "path": "servicetalk-grpc-gradle-plugin/src/main/groovy/io/servicetalk/grpc/gradle/plugin/ServiceTalkGrpcPlugin.groovy", "diffHunk": "@@ -67,6 +62,49 @@ class ServiceTalkGrpcPlugin implements Plugin<Project> {\n         throw new InvalidUserDataException(\"Please set `serviceTalkGrpc.protobufVersion`.\")\n       }\n \n+      // If this project is outside of ServiceTalk's gradle build we need to add an explicit dependency on the\n+      // uber jar which contains the protoc logic, as otherwise the grpc-gradle-plugin will only add a dependency\n+      // on the executable script\n+      File uberJarFile\n+      String scriptNamePrefix\n+      if (serviceTalkProtocPluginPath) {\n+        scriptNamePrefix = \"servicetalk-grpc-protoc-\" + project.version\n+        uberJarFile = new File(serviceTalkProtocPluginPath)\n+      } else {\n+        scriptNamePrefix = \"servicetalk-grpc-protoc-$serviceTalkVersion\"\n+        def stGrpcProtocDep =\n+            project.getDependencies().create(\"io.servicetalk:servicetalk-grpc-protoc:$serviceTalkVersion:all\")\n+        compileOnlyDeps.add(stGrpcProtocDep)\n+        testCompileOnlyDeps.add(stGrpcProtocDep)\n+\n+        uberJarFile = project.configurations.compileOnly.find { it.name.startsWith(\"servicetalk-grpc-protoc\") }\n+        if (uberJarFile == null) {\n+          throw new IllegalStateException(\"failed to find the servicetalk-grpc-protoc:$serviceTalkVersion:all\")\n+        }\n+      }\n+\n+      File scriptExecutableFile\n+      try {\n+        if (org.gradle.internal.os.OperatingSystem.current().isWindows()) {\n+          scriptExecutableFile = File.createTempFile(scriptNamePrefix, \".bat\")", "originalCommit": "0cb7da209ad3d85059e859ad6e39e66d5f79fa90", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODI3MTI2Ng==", "url": "https://github.com/apple/servicetalk/pull/983#discussion_r398271266", "bodyText": "how grpc-java solves this issue?", "author": "idelpivnitskiy", "createdAt": "2020-03-26T01:47:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIzMTkwMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODI3NzQyNg==", "url": "https://github.com/apple/servicetalk/pull/983#discussion_r398277426", "bodyText": "they don't have to deal with this because they write their plugin in c++ and publish a single executable for each platform.", "author": "Scottmitch", "createdAt": "2020-03-26T02:11:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIzMTkwMQ=="}], "type": "inlineReview"}, {"oid": "bf58a812b42435e61a302420a852722a67723e8c", "url": "https://github.com/apple/servicetalk/commit/bf58a812b42435e61a302420a852722a67723e8c", "message": "gRPC gradle plugin rework\n\nMotivation:\n0ebe48ed3948f22bfc003c8a0c551572bb70bbbf divided the\nservicetalk-grpc-gradle plugin into two files:\n1. an executable script\n2. an uber jar with the plugin logic\nThe executable script assumed the uber jar would be co-located in the\nsame directory as the uber jar, but that isn't the case in gradle\ncaches. This means the plugin may fail to execute outside of the maven\nm2 repository structure.\n\nModifications:\n- Instead of publishing a static script for each platform which assumes\na co-located uber jar, dynamically generate the executable script\ndepending upon where the uber jar is resolved from for the local build.\n\nResult:\nservicetalk-grpc-gradle works with gradle cache directory structure and\nlocal development.", "committedDate": "2020-03-26T01:30:54Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODI2OTIwNg==", "url": "https://github.com/apple/servicetalk/pull/983#discussion_r398269206", "bodyText": "nit (here and in other places): You can avoid concatenation in this way: \"${project.rootProject.rootDir}/servicetalk-grpc-protoc/build/buildExecutable/servicetalk-grpc-protoc-${project.version}-all.jar\"", "author": "idelpivnitskiy", "createdAt": "2020-03-26T01:39:47Z", "path": "servicetalk-examples/grpc/helloworld/build.gradle", "diffHunk": "@@ -33,7 +33,7 @@ serviceTalkGrpc {\n \n   // The following setting must be omitted in users projects and is necessary here\n   // only because we want to use the locally built version of the plugin\n-  serviceTalkProtocPluginPath = \"${project.rootProject.rootDir}/servicetalk-grpc-protoc/build/buildExecutable/\" +\n-      io.servicetalk.internal.build.ExecutableBuilder.addExecutablePostFix(\"protoc-gen-servicetalk_grpc\",\n-          org.gradle.internal.os.OperatingSystem.current().isWindows())\n+  serviceTalkProtocPluginPath =\n+      \"${project.rootProject.rootDir}/servicetalk-grpc-protoc/build/buildExecutable/servicetalk-grpc-protoc-\" +\n+          project.version + \"-all.jar\"", "originalCommit": "bf58a812b42435e61a302420a852722a67723e8c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODI3MTY3NQ==", "url": "https://github.com/apple/servicetalk/pull/983#discussion_r398271675", "bodyText": "I was getting a check style error in some cases bcz the line was too long so I'll just break it up for now.", "author": "Scottmitch", "createdAt": "2020-03-26T01:49:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODI2OTIwNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODI3MjMzNg==", "url": "https://github.com/apple/servicetalk/pull/983#discussion_r398272336", "bodyText": "ok, np", "author": "idelpivnitskiy", "createdAt": "2020-03-26T01:52:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODI2OTIwNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODI3MDI3MA==", "url": "https://github.com/apple/servicetalk/pull/983#discussion_r398270270", "bodyText": "Why if branch should use project.version but else branch uses $serviceTalkVersion? Are they different?", "author": "idelpivnitskiy", "createdAt": "2020-03-26T01:44:05Z", "path": "servicetalk-grpc-gradle-plugin/src/main/groovy/io/servicetalk/grpc/gradle/plugin/ServiceTalkGrpcPlugin.groovy", "diffHunk": "@@ -67,6 +62,49 @@ class ServiceTalkGrpcPlugin implements Plugin<Project> {\n         throw new InvalidUserDataException(\"Please set `serviceTalkGrpc.protobufVersion`.\")\n       }\n \n+      // If this project is outside of ServiceTalk's gradle build we need to add an explicit dependency on the\n+      // uber jar which contains the protoc logic, as otherwise the grpc-gradle-plugin will only add a dependency\n+      // on the executable script\n+      File uberJarFile\n+      String scriptNamePrefix\n+      if (serviceTalkProtocPluginPath) {\n+        scriptNamePrefix = \"servicetalk-grpc-protoc-\" + project.version\n+        uberJarFile = new File(serviceTalkProtocPluginPath)\n+      } else {\n+        scriptNamePrefix = \"servicetalk-grpc-protoc-$serviceTalkVersion\"", "originalCommit": "bf58a812b42435e61a302420a852722a67723e8c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODI3NjM2MQ==", "url": "https://github.com/apple/servicetalk/pull/983#discussion_r398276361", "bodyText": "Are they different?\n\nYes. if serviceTalkProtocPluginPath is set then serviceTalkVersion == ${serviceTalkVersion} (or something similar). Basically if serviceTalkProtocPluginPath is set the variable isn't reliably available and instead we use the current project version (because you are assumed to be building in the same project anyways ... IIUC this should be true even if using --include-build)", "author": "Scottmitch", "createdAt": "2020-03-26T02:07:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODI3MDI3MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODI3MDg0NA==", "url": "https://github.com/apple/servicetalk/pull/983#discussion_r398270844", "bodyText": "servicetalk-grpc-protoc string is used multiple times in this class, consider using a constant", "author": "idelpivnitskiy", "createdAt": "2020-03-26T01:46:14Z", "path": "servicetalk-grpc-gradle-plugin/src/main/groovy/io/servicetalk/grpc/gradle/plugin/ServiceTalkGrpcPlugin.groovy", "diffHunk": "@@ -67,6 +62,49 @@ class ServiceTalkGrpcPlugin implements Plugin<Project> {\n         throw new InvalidUserDataException(\"Please set `serviceTalkGrpc.protobufVersion`.\")\n       }\n \n+      // If this project is outside of ServiceTalk's gradle build we need to add an explicit dependency on the\n+      // uber jar which contains the protoc logic, as otherwise the grpc-gradle-plugin will only add a dependency\n+      // on the executable script\n+      File uberJarFile\n+      String scriptNamePrefix\n+      if (serviceTalkProtocPluginPath) {\n+        scriptNamePrefix = \"servicetalk-grpc-protoc-\" + project.version\n+        uberJarFile = new File(serviceTalkProtocPluginPath)\n+      } else {\n+        scriptNamePrefix = \"servicetalk-grpc-protoc-$serviceTalkVersion\"\n+        def stGrpcProtocDep =\n+            project.getDependencies().create(\"io.servicetalk:servicetalk-grpc-protoc:$serviceTalkVersion:all\")\n+        compileOnlyDeps.add(stGrpcProtocDep)\n+        testCompileOnlyDeps.add(stGrpcProtocDep)\n+\n+        uberJarFile = project.configurations.compileOnly.find { it.name.startsWith(\"servicetalk-grpc-protoc\") }", "originalCommit": "bf58a812b42435e61a302420a852722a67723e8c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "5cceef5fda613836d3c2e43d8948276ea90c2009", "url": "https://github.com/apple/servicetalk/commit/5cceef5fda613836d3c2e43d8948276ea90c2009", "message": "gRPC gradle plugin rework\n\nMotivation:\n0ebe48ed3948f22bfc003c8a0c551572bb70bbbf divided the\nservicetalk-grpc-gradle plugin into two files:\n1. an executable script\n2. an uber jar with the plugin logic\nThe executable script assumed the uber jar would be co-located in the\nsame directory as the uber jar, but that isn't the case in gradle\ncaches. This means the plugin may fail to execute outside of the maven\nm2 repository structure.\n\nModifications:\n- Instead of publishing a static script for each platform which assumes\na co-located uber jar, dynamically generate the executable script\ndepending upon where the uber jar is resolved from for the local build.\n\nResult:\nservicetalk-grpc-gradle works with gradle cache directory structure and\nlocal development.", "committedDate": "2020-03-26T03:53:49Z", "type": "commit"}, {"oid": "5cceef5fda613836d3c2e43d8948276ea90c2009", "url": "https://github.com/apple/servicetalk/commit/5cceef5fda613836d3c2e43d8948276ea90c2009", "message": "gRPC gradle plugin rework\n\nMotivation:\n0ebe48ed3948f22bfc003c8a0c551572bb70bbbf divided the\nservicetalk-grpc-gradle plugin into two files:\n1. an executable script\n2. an uber jar with the plugin logic\nThe executable script assumed the uber jar would be co-located in the\nsame directory as the uber jar, but that isn't the case in gradle\ncaches. This means the plugin may fail to execute outside of the maven\nm2 repository structure.\n\nModifications:\n- Instead of publishing a static script for each platform which assumes\na co-located uber jar, dynamically generate the executable script\ndepending upon where the uber jar is resolved from for the local build.\n\nResult:\nservicetalk-grpc-gradle works with gradle cache directory structure and\nlocal development.", "committedDate": "2020-03-26T03:53:49Z", "type": "forcePushed"}]}