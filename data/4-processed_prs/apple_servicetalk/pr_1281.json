{"pr_number": 1281, "pr_title": "DynamicCompositeCancellable race condition fix", "pr_createdAt": "2020-12-16T20:41:26Z", "pr_url": "https://github.com/apple/servicetalk/pull/1281", "timeline": [{"oid": "9c6c325aac2473513f38facdf0a9e0f812085cfc", "url": "https://github.com/apple/servicetalk/commit/9c6c325aac2473513f38facdf0a9e0f812085cfc", "message": "DynamicCompositeCancellable race condition fix\n\nMotivation:\nDynamicCompositeCancellable are used in operators that keep a collection\nof Cancellable objects (e.g. flatMap, merge, etc.). The implementations\nare intended to be thread safe between adding Cancellables and\ncancelling Cancellables that have been previously add (and not removed).\nThe DynamicCompositeCancellable implementations rely upon\nreading volatile state after an element is added to a concurrent\ncollection to cancel the new element if there is a race. However the add\nthread is not gaurenteed to observe a write from the cancel thread, and\nif this is the case an element maybe added and never cancelled.\n\nModifications:\n- The add thread should attempt to read/modify state in coordination\nwith the cancel thread to gaurentee that element will be cancelled.\n\nResult:\nMore correct concurrency code in DynamicCompositeCancellable.", "committedDate": "2020-12-16T20:37:28Z", "type": "commit"}, {"oid": "7b59831196f4d68f0cc45223a9bb67d17902053c", "url": "https://github.com/apple/servicetalk/commit/7b59831196f4d68f0cc45223a9bb67d17902053c", "message": "use long instead of int, protect against overflow", "committedDate": "2020-12-16T21:52:58Z", "type": "commit"}, {"oid": "ca67bc36b13fb4e5cc5e8e5abe910ab89a83940a", "url": "https://github.com/apple/servicetalk/commit/ca67bc36b13fb4e5cc5e8e5abe910ab89a83940a", "message": "defer cancel verify check to end of test", "committedDate": "2020-12-16T22:36:09Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDY5MTQ1OQ==", "url": "https://github.com/apple/servicetalk/pull/1281#discussion_r544691459", "bodyText": "Queue size is int users won't be able to add more elements, why do we need long here?", "author": "idelpivnitskiy", "createdAt": "2020-12-16T23:14:06Z", "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/QueueDynamicCompositeCancellable.java", "diffHunk": "@@ -16,63 +16,67 @@\n package io.servicetalk.concurrent.api;\n \n import io.servicetalk.concurrent.Cancellable;\n+import io.servicetalk.concurrent.internal.FlowControlUtils;\n \n import java.util.Queue;\n import java.util.concurrent.ConcurrentLinkedQueue;\n-import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;\n+import java.util.concurrent.atomic.AtomicLongFieldUpdater;\n \n+import static io.servicetalk.concurrent.internal.FlowControlUtils.tryIncrementIfNotNegative;\n import static io.servicetalk.concurrent.internal.ThrowableUtils.catchUnexpected;\n import static io.servicetalk.utils.internal.PlatformDependent.throwException;\n+import static java.util.concurrent.atomic.AtomicLongFieldUpdater.newUpdater;\n \n final class QueueDynamicCompositeCancellable implements DynamicCompositeCancellable {\n-    private static final AtomicIntegerFieldUpdater<QueueDynamicCompositeCancellable> cancelledUpdater =\n-            AtomicIntegerFieldUpdater.newUpdater(QueueDynamicCompositeCancellable.class, \"cancelled\");\n+    private static final AtomicLongFieldUpdater<QueueDynamicCompositeCancellable> sizeUpdater =\n+            newUpdater(QueueDynamicCompositeCancellable.class, \"size\");\n     @SuppressWarnings(\"unused\")\n-    private volatile int cancelled;\n-\n+    private volatile long size;", "originalCommit": "ca67bc36b13fb4e5cc5e8e5abe910ab89a83940a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDcwNjAwNA==", "url": "https://github.com/apple/servicetalk/pull/1281#discussion_r544706004", "bodyText": "size() is int, however the implementations which are not array backed could conceivably hold more than Integer.MAX_VALUE elements. These implementations just cap the value of size() to Integer.MAX_VALUE. I refactored so instead of tracking size I am now just using an atomic operation on the collection.", "author": "Scottmitch", "createdAt": "2020-12-16T23:49:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDY5MTQ1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDcwODUzNw==", "url": "https://github.com/apple/servicetalk/pull/1281#discussion_r544708537", "bodyText": "\ud83e\udd2f looked at ConcurrentLinkedQueue impl, TIL", "author": "idelpivnitskiy", "createdAt": "2020-12-16T23:56:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDY5MTQ1OQ=="}], "type": "inlineReview"}, {"oid": "23faf210949acbbd15181b8de5eebd311890050b", "url": "https://github.com/apple/servicetalk/commit/23faf210949acbbd15181b8de5eebd311890050b", "message": "use AtomicReference updater on collection instead of tracking size", "committedDate": "2020-12-16T23:48:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDcwNjIxNA==", "url": "https://github.com/apple/servicetalk/pull/1281#discussion_r544706214", "bodyText": "note this interface is internal, but the semantics around it didn't really make sense for set so I clarified here and added a unit test to verify.", "author": "Scottmitch", "createdAt": "2020-12-16T23:50:14Z", "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/DynamicCompositeCancellable.java", "diffHunk": "@@ -34,8 +34,9 @@\n      * Add a {@link Cancellable} that will be cancelled when this object's {@link #cancel()} method is called,\n      * or be cancelled immediately if this object's {@link #cancel()} method has already been called.\n      * @param toAdd The {@link Cancellable} to add.\n-     * @return {@code true} if the {@code toAdd} was added, and {@code false} if {@code toAdd} was not added and\n-     * {@link Cancellable#cancel()} was called on {@code toAdd}.\n+     * @return {@code true} if the {@code toAdd} was added, and {@code false} if {@code toAdd} was not added because\n+     * it already exists. If {@code false} then {@link Cancellable#cancel()} will be called unless the reason is this", "originalCommit": "23faf210949acbbd15181b8de5eebd311890050b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}