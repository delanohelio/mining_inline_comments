{"pr_number": 1070, "pr_title": "Fail requests if ServiceDiscoverer emits an error", "pr_createdAt": "2020-05-27T17:08:42Z", "pr_url": "https://github.com/apple/servicetalk/pull/1070", "timeline": [{"oid": "352b07bd749b2c81bfb745691997f80c0a07de23", "url": "https://github.com/apple/servicetalk/commit/352b07bd749b2c81bfb745691997f80c0a07de23", "message": "Fail requests if ServiceDiscoverer emits an error\n\nMotivation:\n\nBy default, DNS lookup failures are retried by `DefaultDnsServiceDiscoverer`.\nThis has a downside that if a DNS name is wrong, requests will wait forever\nwith no indication that the DNS name is wrong. Although, treating DNS failures\nas transient is mostly appropriate, lack of visibility of these failures in\nthe request path is confusing.\n\nModifications:\n\n- Disable retry on `UnknownHostException` for `DefaultDnsServiceDiscoverer`;\n- Retry `UnknownHostException` on the HTTP client side;\n- Default `AutoRetryStrategy` stops waiting for LB ready event if SD emits\nan error;\n- Allow users to configure `DefaultAutoRetryStrategyProvider` to ignore\nerrors from SD while it waits for LB ready event;\n\nResult:\n\nRequest fails if `ServiceDiscoverer` emits an error. Users can configure\n`AutoRetryStrategyProvider` to ignore those errors.\nHTTP client retries `UnknownHostException`s. Users can apply a filter for\n`ServiceDiscoverer` to alter the retry strategy.", "committedDate": "2020-05-27T01:44:23Z", "type": "commit"}, {"oid": "31a817e96ceaf799e1ecdc7448644b59df72442e", "url": "https://github.com/apple/servicetalk/commit/31a817e96ceaf799e1ecdc7448644b59df72442e", "message": "Revert back DELIBERATE_EXCEPTION for verifyOnInitializedFailedFailsAction", "committedDate": "2020-05-27T17:42:56Z", "type": "commit"}, {"oid": "8dc5d39ba43785e0ee6d0e34692bc4b3dfbf4cfe", "url": "https://github.com/apple/servicetalk/commit/8dc5d39ba43785e0ee6d0e34692bc4b3dfbf4cfe", "message": "Add serialVersionUID", "committedDate": "2020-05-28T00:29:09Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTUzNTAxMQ==", "url": "https://github.com/apple/servicetalk/pull/1070#discussion_r431535011", "bodyText": "Suggestion; just rename the method to newStrategy()", "author": "NiteshKant", "createdAt": "2020-05-28T01:38:43Z", "path": "servicetalk-client-api/src/main/java/io/servicetalk/client/api/AutoRetryStrategyProvider.java", "diffHunk": "@@ -32,15 +33,16 @@\n     /**\n      * An {@link AutoRetryStrategyProvider} that disables automatic retries;\n      */\n-    AutoRetryStrategyProvider DISABLE_AUTO_RETRIES = __ -> (___, cause) -> failed(cause);\n+    AutoRetryStrategyProvider DISABLE_AUTO_RETRIES = (lbEventStream, sdErrorStream) -> (___, cause) -> failed(cause);\n \n     /**\n      * Create a new {@link AutoRetryStrategy} instance using the passed {@link LoadBalancer}.\n      *\n-     * @param loadBalancer {@link LoadBalancer} to use.\n+     * @param lbEventStream a stream of events from {@link LoadBalancer#eventStream() LoadBalancer}\n+     * @param sdErrorStream a stream of errors from {@link ServiceDiscoverer#discover(Object) ServiceDiscoverer}\n      * @return New {@link AutoRetryStrategy} instance.\n      */\n-    AutoRetryStrategy forLoadbalancer(LoadBalancer<?> loadBalancer);\n+    AutoRetryStrategy forClient(Publisher<Object> lbEventStream, Publisher<Throwable> sdErrorStream);", "originalCommit": "31a817e96ceaf799e1ecdc7448644b59df72442e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTUzNzM4NQ==", "url": "https://github.com/apple/servicetalk/pull/1070#discussion_r431537385", "bodyText": "IIUC, we do not need a Publisher here but just a way to asynchronously emit an error so that a request waiting for LB can be pre-empted. If so, I would suggest using a Completable instead.", "author": "NiteshKant", "createdAt": "2020-05-28T01:48:16Z", "path": "servicetalk-client-api/src/main/java/io/servicetalk/client/api/AutoRetryStrategyProvider.java", "diffHunk": "@@ -32,15 +33,16 @@\n     /**\n      * An {@link AutoRetryStrategyProvider} that disables automatic retries;\n      */\n-    AutoRetryStrategyProvider DISABLE_AUTO_RETRIES = __ -> (___, cause) -> failed(cause);\n+    AutoRetryStrategyProvider DISABLE_AUTO_RETRIES = (lbEventStream, sdErrorStream) -> (___, cause) -> failed(cause);\n \n     /**\n      * Create a new {@link AutoRetryStrategy} instance using the passed {@link LoadBalancer}.\n      *\n-     * @param loadBalancer {@link LoadBalancer} to use.\n+     * @param lbEventStream a stream of events from {@link LoadBalancer#eventStream() LoadBalancer}\n+     * @param sdErrorStream a stream of errors from {@link ServiceDiscoverer#discover(Object) ServiceDiscoverer}\n      * @return New {@link AutoRetryStrategy} instance.\n      */\n-    AutoRetryStrategy forLoadbalancer(LoadBalancer<?> loadBalancer);\n+    AutoRetryStrategy forClient(Publisher<Object> lbEventStream, Publisher<Throwable> sdErrorStream);", "originalCommit": "31a817e96ceaf799e1ecdc7448644b59df72442e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE4Nzg1OA==", "url": "https://github.com/apple/servicetalk/pull/1070#discussion_r432187858", "bodyText": "I was thinking between Publisher and Completable during the implementation and decided to go with a Publisher to make it work in a similar way as LB events: each request waits for either an LB-ready event or a new SD error.\nIf you think it's enough to wait only for the first error from SD and subsequent requests should fail fast, then I can switch to Completable. Both ways work for me.", "author": "idelpivnitskiy", "createdAt": "2020-05-29T00:02:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTUzNzM4NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTU0MDAyOQ==", "url": "https://github.com/apple/servicetalk/pull/1070#discussion_r431540029", "bodyText": "Can we remove this retry now as we are retrying from the client?", "author": "NiteshKant", "createdAt": "2020-05-28T01:58:24Z", "path": "servicetalk-dns-discovery-netty/src/main/java/io/servicetalk/dns/discovery/netty/DefaultDnsServiceDiscovererBuilder.java", "diffHunk": "@@ -156,12 +155,13 @@ public DefaultDnsServiceDiscovererBuilder dnsResolverAddressTypes(\n     }\n \n     /**\n-     * Do not perform retries if DNS lookup fails. Instead, terminate the {@link Publisher} with the error.\n+     * Perform retries if DNS lookup fails instead of terminating the\n+     * {@link ServiceDiscoverer#discover(Object) discovery} with an error.\n      *\n      * @return {@code this}.\n      */\n-    public DefaultDnsServiceDiscovererBuilder noRetriesOnDnsFailures() {\n-        this.applyRetryFilter = false;\n+    public DefaultDnsServiceDiscovererBuilder retryOnDnsFailures() {", "originalCommit": "31a817e96ceaf799e1ecdc7448644b59df72442e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE4ODQxMg==", "url": "https://github.com/apple/servicetalk/pull/1070#discussion_r432188412", "bodyText": "Was going to ask if we need this at all. If not, we can remove this method, DnsClientFilterFactory, and RetryingDnsClientFilter.", "author": "idelpivnitskiy", "createdAt": "2020-05-29T00:04:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTU0MDAyOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTU0MDE4OQ==", "url": "https://github.com/apple/servicetalk/pull/1070#discussion_r431540189", "bodyText": "As we are doing retries internally, we should provide a way to modify/disable these retries.", "author": "NiteshKant", "createdAt": "2020-05-28T01:59:09Z", "path": "servicetalk-http-netty/src/main/java/io/servicetalk/http/netty/DefaultSingleAddressHttpClientBuilder.java", "diffHunk": "@@ -219,6 +228,33 @@ private DefaultSingleAddressHttpClientBuilder(@Nullable final U address,\n                     proxyAddress != null ? proxyAddress : builder.address);\n         }\n \n+        Publisher<? extends ServiceDiscovererEvent<R>> discover(\n+                PublisherSource.Processor<Throwable, Throwable> processor) {\n+            assert builder.address != null : \"Attempted to buildStreaming with an unknown address\";\n+            return builder.serviceDiscoverer.discover(\n+                    proxyAddress != null ? proxyAddress : builder.address)\n+                    .retryWhen(retryWithConstantBackoffAndJitter(MAX_VALUE, t -> {", "originalCommit": "31a817e96ceaf799e1ecdc7448644b59df72442e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE5MDc1MA==", "url": "https://github.com/apple/servicetalk/pull/1070#discussion_r432190750", "bodyText": "How about starting without providing configurations for this and deferring this API until we have a request from users? I didn't find a good place for this config, not sure if a client builder or auto-retry strategy provider builder are good for this.\nIt looks ok to me to always retry java.net.UnknownHostException, because this is a well-known JDK exception and not-retrying it means that the discovery publisher will terminate. Therefore, the entire client becomes useless. This is a bit separate discussion, but maybe we need to close the client if SD terminates to clear resources.\nFor now, users can wrap SD to apply a different retry strategy or map java.net.UnknownHostException into something else if their intent is to terminate the discovery publisher.", "author": "idelpivnitskiy", "createdAt": "2020-05-29T00:12:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTU0MDE4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY1MTIzMQ==", "url": "https://github.com/apple/servicetalk/pull/1070#discussion_r432651231", "bodyText": "How about starting without providing configurations for this and deferring this API until we have a request from users?\n\nIf we are using some default strategy that depends on an externally provided implementation (service discoverer in this case), we should always assume there is a case which needs customization. As an example; what if the retry duration has to be changed?\n\nI didn't find a good place for this config, not sure if a client builder or auto-retry strategy provider builder are good for this.\n\nServiceDiscoverer retry is not really tied to auto-retry so both of them having some configuration around SD errors. How about adding the method retryServiceDiscoveryErrors(BiIntFunction<Throwable, ? extends Completable>)  on the client builder?", "author": "NiteshKant", "createdAt": "2020-05-29T18:04:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTU0MDE4OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTU0MTQ5MQ==", "url": "https://github.com/apple/servicetalk/pull/1070#discussion_r431541491", "bodyText": "Better not to use short-forms in method names => ignoreServiceDiscovererErrors()", "author": "NiteshKant", "createdAt": "2020-05-28T02:04:08Z", "path": "servicetalk-client-api/src/main/java/io/servicetalk/client/api/DefaultAutoRetryStrategyProvider.java", "diffHunk": "@@ -70,6 +77,19 @@ public Builder disableWaitForLoadBalancer() {\n             return this;\n         }\n \n+        /**\n+         * By default, automatic retries waits for the associated {@link LoadBalancer} to be ready or\n+         * {@link ServiceDiscoverer} to emit an error before triggering a retry for requests. This method allows a retry\n+         * strategy to ignore errors from {@link ServiceDiscoverer} and wait for {@link LoadBalancer} forever.\n+         *\n+         * @return {@code this}.\n+         * @see #disableWaitForLoadBalancer()\n+         */\n+        public Builder ignoreSdErrors() {", "originalCommit": "31a817e96ceaf799e1ecdc7448644b59df72442e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "3616ea8938ce07181c9bfc4979c3617ab81b204a", "url": "https://github.com/apple/servicetalk/commit/3616ea8938ce07181c9bfc4979c3617ab81b204a", "message": "Rename AutoRetryStrategyProvider#forClient -> newStrategy", "committedDate": "2020-05-29T00:16:03Z", "type": "commit"}, {"oid": "559076a455097ac15e8abbcb57038b7ed71d03e1", "url": "https://github.com/apple/servicetalk/commit/559076a455097ac15e8abbcb57038b7ed71d03e1", "message": "Rename ignoreSdErrors() -> ignoreServiceDiscovererErrors()", "committedDate": "2020-05-29T00:18:49Z", "type": "commit"}, {"oid": "0fda796eccad0a17f3c7ae5de824bb80731d2d97", "url": "https://github.com/apple/servicetalk/commit/0fda796eccad0a17f3c7ae5de824bb80731d2d97", "message": "Remove DefaultDnsServiceDiscovererBuilder#retryOnDnsFailures()", "committedDate": "2020-05-29T00:25:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY0MTIzNQ==", "url": "https://github.com/apple/servicetalk/pull/1070#discussion_r432641235", "bodyText": "Lets also get rid of \"using ...\" part as we have to update it for all arguments.", "author": "NiteshKant", "createdAt": "2020-05-29T17:44:10Z", "path": "servicetalk-client-api/src/main/java/io/servicetalk/client/api/AutoRetryStrategyProvider.java", "diffHunk": "@@ -36,13 +36,13 @@\n     AutoRetryStrategyProvider DISABLE_AUTO_RETRIES = (lbEventStream, sdErrorStream) -> (___, cause) -> failed(cause);\n \n     /**\n-     * Create a new {@link AutoRetryStrategy} instance using the passed {@link LoadBalancer}.\n+     * Creates a new {@link AutoRetryStrategy} instance using the passed {@link LoadBalancer}.", "originalCommit": "0fda796eccad0a17f3c7ae5de824bb80731d2d97", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY0NTAzNA==", "url": "https://github.com/apple/servicetalk/pull/1070#discussion_r432645034", "bodyText": "I don't think we should bail out from here if SD has completed. LB should make that decision (via lb events) based on whether hosts are available before SD completed.", "author": "NiteshKant", "createdAt": "2020-05-29T17:51:40Z", "path": "servicetalk-client-api/src/test/java/io/servicetalk/client/api/DefaultAutoRetryStrategyProviderTest.java", "diffHunk": "@@ -119,6 +128,46 @@ public void defaultForNoAvailableHost() {\n         verifyRetryResultCompleted();\n     }\n \n+    @Test\n+    public void defaultForNoAvailableHostOnUnknownHostException() {\n+        AutoRetryStrategy strategy = newStrategy(identity());\n+        Completable retry = strategy.apply(1, NO_AVAILABLE_HOST);\n+        toSource(retry).subscribe(retrySubscriber);\n+        sdErrors.onNext(UNKNOWN_HOST_EXCEPTION);\n+        verifyRetryResultError(UNKNOWN_HOST_EXCEPTION);\n+    }\n+\n+    @Test\n+    public void defaultForNoAvailableHostOnServiceDiscovererError() {\n+        AutoRetryStrategy strategy = newStrategy(identity());\n+        Completable retry = strategy.apply(1, NO_AVAILABLE_HOST);\n+        toSource(retry).subscribe(retrySubscriber);\n+        sdErrors.onError(DELIBERATE_EXCEPTION);\n+        verifyRetryResultError(DELIBERATE_EXCEPTION);\n+    }\n+\n+    @Test\n+    public void ignoreSdErrorsForNoAvailableHost() {\n+        AutoRetryStrategy strategy = newStrategy(Builder::ignoreServiceDiscovererErrors);\n+        Completable retry = strategy.apply(1, NO_AVAILABLE_HOST);\n+        toSource(retry).subscribe(retrySubscriber);\n+        assertThat(\"Unexpected subscribe for SD errors.\", sdErrors.isSubscribed(), is(false));\n+        assertThat(\"Unexpected terminal.\", retrySubscriber.takeTerminal(), is(nullValue()));\n+        lbEvents.onNext(LOAD_BALANCER_READY_EVENT);\n+        verifyRetryResultCompleted();\n+    }\n+\n+    @Test\n+    public void defaultForNoAvailableHostWhenServiceDiscovererTerminated() {\n+        AutoRetryStrategy strategy = newStrategy(identity());\n+        sdErrors.onComplete();\n+        Completable retry = strategy.apply(1, NO_AVAILABLE_HOST);\n+        toSource(retry).subscribe(retrySubscriber);\n+        TerminalNotification terminal = retrySubscriber.takeTerminal();\n+        assertThat(\"Unexpected terminal.\", terminal, is(notNullValue()));\n+        assertThat(\"Unexpected terminal.\", terminal.cause(), is(instanceOf(IllegalStateException.class)));", "originalCommit": "0fda796eccad0a17f3c7ae5de824bb80731d2d97", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzU0MjYzNA==", "url": "https://github.com/apple/servicetalk/pull/1070#discussion_r433542634", "bodyText": "Not for this PR, but for the potential follow-up:\nAgreed that if SD terminates we should rely on LB events to handle further retries. But it looks like we should return a Completable.failed(new IllegalStateException(\"LB events stream is terminated\")) here [1] instead of completed() if we still see NoAvailableHostException after termination. WDYT?\n[1] \n  \n    \n      servicetalk/servicetalk-client-api/src/main/java/io/servicetalk/client/api/LoadBalancerReadySubscriber.java\n    \n    \n         Line 47\n      in\n      5e83430\n    \n    \n    \n    \n\n        \n          \n           return onHostsAvailable == null ? completed() : fromSource(onHostsAvailable);", "author": "idelpivnitskiy", "createdAt": "2020-06-01T23:33:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY0NTAzNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY0ODUwMg==", "url": "https://github.com/apple/servicetalk/pull/1070#discussion_r432648502", "bodyText": "(Continuation of #1070 (comment) as I can't reply there)\n\nIf you think it's enough to wait only for the first error from SD and subsequent requests should fail fast, then I can switch to Completable.\n\nThats not what I meant. Even if you switch to Completable; it doesn't have to represent the first error. It can instead represent any error since start or after the previous onNext of SD publisher. You can implement such a Completable as:\nprivate static final class SDErrorsCompletable extends Completable {\n    private static final AtomicReferenceFieldUpdater<SDErrorsCompletable, CompletableSource.Processor>\n            currentProcessorUpdater = AtomicReferenceFieldUpdater.newUpdater(SDErrorsCompletable.class,\n            CompletableSource.Processor.class, \"currentProcessor\");\n\n    private volatile CompletableSource.Processor currentProcessor = newCompletableProcessor();\n\n    @Override\n    protected void handleSubscribe(final CompletableSource.Subscriber subscriber) {\n        currentProcessor.subscribe(subscriber);\n    }\n\n    void nextSuccess() {\n        CompletableSource.Processor newProcessor = newCompletableProcessor();\n        CompletableSource.Processor oldProcessor = currentProcessorUpdater.getAndSet(this, newProcessor);\n        oldProcessor.onComplete();\n    }\n\n    void nextError(final Throwable error) {\n        CompletableSource.Processor newProcessor = newCompletableProcessor();\n        CompletableSource.Processor oldProcessor = currentProcessorUpdater.getAndSet(this, newProcessor);\n        oldProcessor.onError(error);\n        newProcessor.onError(error);\n    }\n}\nThe positive here is that the AutoRetryStrategyProvider implementaions can be simple (directly use the passed Completable) as opposed to managing stateful Subscriber as you do now.\nThis is different than load balancer as the lbEventStream may potentially contain other events apart from on-ready.", "author": "NiteshKant", "createdAt": "2020-05-29T17:58:32Z", "path": "servicetalk-client-api/src/main/java/io/servicetalk/client/api/AutoRetryStrategyProvider.java", "diffHunk": "@@ -32,15 +33,16 @@\n     /**\n      * An {@link AutoRetryStrategyProvider} that disables automatic retries;\n      */\n-    AutoRetryStrategyProvider DISABLE_AUTO_RETRIES = __ -> (___, cause) -> failed(cause);\n+    AutoRetryStrategyProvider DISABLE_AUTO_RETRIES = (lbEventStream, sdErrorStream) -> (___, cause) -> failed(cause);\n \n     /**\n-     * Create a new {@link AutoRetryStrategy} instance using the passed {@link LoadBalancer}.\n+     * Creates a new {@link AutoRetryStrategy} instance using the passed {@link LoadBalancer}.\n      *\n-     * @param loadBalancer {@link LoadBalancer} to use.\n+     * @param lbEventStream a stream of events from {@link LoadBalancer#eventStream() LoadBalancer}\n+     * @param sdErrorStream a stream of errors from {@link ServiceDiscoverer#discover(Object) ServiceDiscoverer}\n      * @return New {@link AutoRetryStrategy} instance.\n      */\n-    AutoRetryStrategy forLoadbalancer(LoadBalancer<?> loadBalancer);\n+    AutoRetryStrategy newStrategy(Publisher<Object> lbEventStream, Publisher<Throwable> sdErrorStream);", "originalCommit": "0fda796eccad0a17f3c7ae5de824bb80731d2d97", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY1MTYzNQ==", "url": "https://github.com/apple/servicetalk/pull/1070#discussion_r432651635", "bodyText": "Why not retry all SD errors by default?", "author": "NiteshKant", "createdAt": "2020-05-29T18:05:02Z", "path": "servicetalk-http-netty/src/main/java/io/servicetalk/http/netty/DefaultSingleAddressHttpClientBuilder.java", "diffHunk": "@@ -219,6 +228,33 @@ private DefaultSingleAddressHttpClientBuilder(@Nullable final U address,\n                     proxyAddress != null ? proxyAddress : builder.address);\n         }\n \n+        Publisher<? extends ServiceDiscovererEvent<R>> discover(\n+                PublisherSource.Processor<Throwable, Throwable> processor) {\n+            assert builder.address != null : \"Attempted to buildStreaming with an unknown address\";\n+            return builder.serviceDiscoverer.discover(\n+                    proxyAddress != null ? proxyAddress : builder.address)\n+                    .retryWhen(retryWithConstantBackoffAndJitter(MAX_VALUE, t -> {\n+                        processor.onNext(t);\n+                        return t instanceof UnknownHostException;", "originalCommit": "0fda796eccad0a17f3c7ae5de824bb80731d2d97", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY1NzEzNQ==", "url": "https://github.com/apple/servicetalk/pull/1070#discussion_r432657135", "bodyText": "Just to keep existing behavior as-is. But if we will have retryServiceDiscoveryErrors on the client builder +1 for retry all by default. Will update.", "author": "idelpivnitskiy", "createdAt": "2020-05-29T18:16:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY1MTYzNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY1MzAxMQ==", "url": "https://github.com/apple/servicetalk/pull/1070#discussion_r432653011", "bodyText": "As we do not use RetryingDNSClientFilter anymore, we can delete the class and remove references from the tests", "author": "NiteshKant", "createdAt": "2020-05-29T18:07:53Z", "path": "servicetalk-dns-discovery-netty/src/main/java/io/servicetalk/dns/discovery/netty/DefaultDnsServiceDiscovererBuilder.java", "diffHunk": "@@ -233,16 +221,11 @@ public DefaultDnsServiceDiscovererBuilder ioExecutor(final IoExecutor ioExecutor\n      * @return a new instance of {@link DnsClient}.\n      */\n     DnsClient build() {\n-        DnsClient rawClient = new DefaultDnsClient(\n+        final DnsClient rawClient = new DefaultDnsClient(\n                 ioExecutor == null ? globalExecutionContext().ioExecutor() : ioExecutor, minTTLSeconds, ndots,\n                 invalidateHostsOnDnsFailure, optResourceEnabled, queryTimeout, dnsResolverAddressTypes,\n                 dnsServerAddressStreamProvider);\n-        DnsClientFilterFactory rawFilterFactory = filterFactory;\n-        if (applyRetryFilter) {", "originalCommit": "0fda796eccad0a17f3c7ae5de824bb80731d2d97", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "ba9c1929e88c2fcede16312495fb3e9e8936d2f9", "url": "https://github.com/apple/servicetalk/commit/ba9c1929e88c2fcede16312495fb3e9e8936d2f9", "message": "Fail-fast for `invalid.` hostname to avoid increasing test timeout.", "committedDate": "2020-05-29T18:50:01Z", "type": "commit"}, {"oid": "168ff22e6294c9bf4e0b6620feec31d10f14d13e", "url": "https://github.com/apple/servicetalk/commit/168ff22e6294c9bf4e0b6620feec31d10f14d13e", "message": "Allow configuring retry strategy for SD errors", "committedDate": "2020-06-01T19:02:32Z", "type": "commit"}, {"oid": "896f5b5d443a1a95a430061dab2067e658e3317a", "url": "https://github.com/apple/servicetalk/commit/896f5b5d443a1a95a430061dab2067e658e3317a", "message": "Fix MultiAddressUrlHttpClientTest", "committedDate": "2020-06-01T19:02:52Z", "type": "commit"}, {"oid": "a0a063ec60d11a8c5209e00a3aae5d7445c31949", "url": "https://github.com/apple/servicetalk/commit/a0a063ec60d11a8c5209e00a3aae5d7445c31949", "message": "Remove RetryingDnsClientFilter", "committedDate": "2020-06-01T21:14:52Z", "type": "commit"}, {"oid": "1eae53f8e8296270d5edac72e753e8f54f037c11", "url": "https://github.com/apple/servicetalk/commit/1eae53f8e8296270d5edac72e753e8f54f037c11", "message": "Use Completable for SD status instead of Publisher", "committedDate": "2020-06-01T23:15:24Z", "type": "commit"}, {"oid": "f93ac7096da2f4274a54483fb87865b4c6433886", "url": "https://github.com/apple/servicetalk/commit/f93ac7096da2f4274a54483fb87865b4c6433886", "message": "Verifu SdStatusCompletable resubscribe works", "committedDate": "2020-06-01T23:16:00Z", "type": "commit"}, {"oid": "e0541cd7581b75ba99f4ecb9f1be4a6455d2c1cb", "url": "https://github.com/apple/servicetalk/commit/e0541cd7581b75ba99f4ecb9f1be4a6455d2c1cb", "message": "minor fixes", "committedDate": "2020-06-01T23:27:19Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzU1MzM4NQ==", "url": "https://github.com/apple/servicetalk/pull/1070#discussion_r433553385", "bodyText": "As we do not expect SD streams to complete, can we not mention the completion contract here?\nIf we complete the Completable when SD completes, any request waiting may prematurely be retried before LB being ready.", "author": "NiteshKant", "createdAt": "2020-06-02T00:12:47Z", "path": "servicetalk-client-api/src/main/java/io/servicetalk/client/api/AutoRetryStrategyProvider.java", "diffHunk": "@@ -32,15 +33,18 @@\n     /**\n      * An {@link AutoRetryStrategyProvider} that disables automatic retries;\n      */\n-    AutoRetryStrategyProvider DISABLE_AUTO_RETRIES = __ -> (___, cause) -> failed(cause);\n+    AutoRetryStrategyProvider DISABLE_AUTO_RETRIES = (lbEventStream, sdErrorStream) -> (___, cause) -> failed(cause);\n \n     /**\n-     * Create a new {@link AutoRetryStrategy} instance using the passed {@link LoadBalancer}.\n+     * Creates a new {@link AutoRetryStrategy} instance.\n      *\n-     * @param loadBalancer {@link LoadBalancer} to use.\n+     * @param lbEventStream a stream of events from {@link LoadBalancer#eventStream() LoadBalancer}\n+     * @param sdStatus a {@link Completable} that reports current {@link ServiceDiscoverer} status. It fails when\n+     * {@link ServiceDiscoverer#discover(Object) discovery publisher} emits an error or completes when the publisher", "originalCommit": "e0541cd7581b75ba99f4ecb9f1be4a6455d2c1cb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzU1NTg0OA==", "url": "https://github.com/apple/servicetalk/pull/1070#discussion_r433555848", "bodyText": "It would be useful to not cross-reference methods here as it is correct but more complex to understand.\nSimply, you can say that auto-retry strategies fail a request if the last signal from the associated ServiceDiscoverer was an error. This method disables that behavior.", "author": "NiteshKant", "createdAt": "2020-06-02T00:22:10Z", "path": "servicetalk-client-api/src/main/java/io/servicetalk/client/api/DefaultAutoRetryStrategyProvider.java", "diffHunk": "@@ -70,6 +76,19 @@ public Builder disableWaitForLoadBalancer() {\n             return this;\n         }\n \n+        /**\n+         * By default, automatic retries wait for the associated {@link LoadBalancer} to be ready or", "originalCommit": "e0541cd7581b75ba99f4ecb9f1be4a6455d2c1cb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzU1Njg2Mw==", "url": "https://github.com/apple/servicetalk/pull/1070#discussion_r433556863", "bodyText": "for errors ... => to retry errors\ndiscovery publisher => service discoverer?", "author": "NiteshKant", "createdAt": "2020-06-02T00:25:33Z", "path": "servicetalk-http-api/src/main/java/io/servicetalk/http/api/HttpClientBuilder.java", "diffHunk": "@@ -181,6 +184,16 @@\n     public abstract HttpClientBuilder<U, R, SDE> serviceDiscoverer(\n             ServiceDiscoverer<U, R, ? extends SDE> serviceDiscoverer);\n \n+    /**\n+     * Sets a retry strategy for errors emitted by {@link ServiceDiscoverer#discover(Object) discovery publisher}.", "originalCommit": "e0541cd7581b75ba99f4ecb9f1be4a6455d2c1cb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzU1ODMzNw==", "url": "https://github.com/apple/servicetalk/pull/1070#discussion_r433558337", "bodyText": "Do we need the complete Processor contract here?\nIf we are just using onComplet() and onError() then not using the Processor contract helps remove the extra subscribe() method and delegation to subscribeInternal()", "author": "NiteshKant", "createdAt": "2020-06-02T00:31:27Z", "path": "servicetalk-http-netty/src/main/java/io/servicetalk/http/netty/DefaultSingleAddressHttpClientBuilder.java", "diffHunk": "@@ -552,4 +602,52 @@ public Completable closeAsyncGracefully() {\n             return closeable.closeAsyncGracefully();\n         }\n     }\n+\n+    private static final class SdStatusCompletable extends Completable implements CompletableSource.Processor {", "originalCommit": "e0541cd7581b75ba99f4ecb9f1be4a6455d2c1cb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzU1OTk5MA==", "url": "https://github.com/apple/servicetalk/pull/1070#discussion_r433559990", "bodyText": "This approach is incorrect as it misses errors when nextError() happens first and then never happens again.\nInstead what you need is to always have a Processor which queues the error till a subscriber arrives.\nOnce the error is queued, it needs a callback to clear the queued error once a successful event happens on the SD", "author": "NiteshKant", "createdAt": "2020-06-02T00:38:06Z", "path": "servicetalk-http-netty/src/main/java/io/servicetalk/http/netty/DefaultSingleAddressHttpClientBuilder.java", "diffHunk": "@@ -552,4 +602,52 @@ public Completable closeAsyncGracefully() {\n             return closeable.closeAsyncGracefully();\n         }\n     }\n+\n+    private static final class SdStatusCompletable extends Completable implements CompletableSource.Processor {\n+        private static final AtomicReferenceFieldUpdater<SdStatusCompletable, CompletableSource.Processor>\n+                currentProcessorUpdater = AtomicReferenceFieldUpdater.newUpdater(SdStatusCompletable.class,\n+                CompletableSource.Processor.class, \"currentProcessor\");\n+        @Nullable\n+        private volatile CompletableSource.Processor currentProcessor;\n+\n+        @Override\n+        protected void handleSubscribe(final CompletableSource.Subscriber subscriber) {\n+            final CompletableSource.Processor currentProcessor = currentProcessorUpdater.updateAndGet(this,", "originalCommit": "e0541cd7581b75ba99f4ecb9f1be4a6455d2c1cb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzU2MDgzMA==", "url": "https://github.com/apple/servicetalk/pull/1070#discussion_r433560830", "bodyText": "As mentioned in the AutoRetryStrategy comment, we should not send an onComplete() here as it may prematurely retry a request. Instead let the LB decide when to retry if SD completes.", "author": "NiteshKant", "createdAt": "2020-06-02T00:41:34Z", "path": "servicetalk-http-netty/src/main/java/io/servicetalk/http/netty/DefaultSingleAddressHttpClientBuilder.java", "diffHunk": "@@ -219,6 +234,32 @@ private DefaultSingleAddressHttpClientBuilder(@Nullable final U address,\n                     proxyAddress != null ? proxyAddress : builder.address);\n         }\n \n+        Publisher<? extends ServiceDiscovererEvent<R>> discover(final SdStatusCompletable sdStatus) {\n+            assert builder.address != null : \"Attempted to buildStreaming with an unknown address\";\n+            final BiIntFunction<Throwable, ? extends Completable> retryWhen = builder.serviceDiscovererRetryStrategy;\n+            return builder.serviceDiscoverer.discover(proxyAddress != null ? proxyAddress : builder.address)\n+                    .retryWhen((i, t) -> {\n+                        sdStatus.nextError(t);\n+                        return retryWhen.apply(i, t);\n+                    })\n+                    .whenFinally(new TerminalSignalConsumer() {\n+                        @Override\n+                        public void onComplete() {\n+                            sdStatus.onComplete();", "originalCommit": "e0541cd7581b75ba99f4ecb9f1be4a6455d2c1cb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "0ef351e3758cfb2ad0eab9a63b54190ecf474256", "url": "https://github.com/apple/servicetalk/commit/0ef351e3758cfb2ad0eab9a63b54190ecf474256", "message": "Address comments", "committedDate": "2020-06-02T07:17:57Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDA1MTk1OA==", "url": "https://github.com/apple/servicetalk/pull/1070#discussion_r434051958", "bodyText": "nit: you shouldn't need a defer() here.", "author": "NiteshKant", "createdAt": "2020-06-02T17:32:57Z", "path": "servicetalk-http-netty/src/test/java/io/servicetalk/http/netty/MultiAddressUrlHttpClientTest.java", "diffHunk": "@@ -132,6 +143,32 @@ public static void afterClass() throws Exception {\n         afterClassCloseables.close();\n     }\n \n+    private static ServiceDiscoverer<HostAndPort, InetSocketAddress, ServiceDiscovererEvent<InetSocketAddress>>\n+    sdThatSupportsInvalidHostname() {\n+        return new ServiceDiscoverer<HostAndPort, InetSocketAddress, ServiceDiscovererEvent<InetSocketAddress>>() {\n+            @Override\n+            public Publisher<ServiceDiscovererEvent<InetSocketAddress>> discover(final HostAndPort hostAndPort) {\n+                return defer(() -> {", "originalCommit": "0ef351e3758cfb2ad0eab9a63b54190ecf474256", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDA3MTA4MQ==", "url": "https://github.com/apple/servicetalk/pull/1070#discussion_r434071081", "bodyText": "nit: inline oldProcessor\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        final CompletableSource.Processor oldProcessor = processorUpdater.getAndSet(this, newProcessor);\n          \n          \n            \n                        oldProcessor.onError(t);\n          \n          \n            \n                        processorUpdater.getAndSet(this, newProcessor).onError(t);", "author": "NiteshKant", "createdAt": "2020-06-02T18:03:06Z", "path": "servicetalk-http-netty/src/main/java/io/servicetalk/http/netty/DefaultSingleAddressHttpClientBuilder.java", "diffHunk": "@@ -552,4 +587,32 @@ public Completable closeAsyncGracefully() {\n             return closeable.closeAsyncGracefully();\n         }\n     }\n+\n+    private static final class SdStatusCompletable extends Completable {\n+        private static final AtomicReferenceFieldUpdater<SdStatusCompletable, CompletableSource.Processor>\n+                processorUpdater = newUpdater(SdStatusCompletable.class, CompletableSource.Processor.class,\n+                \"processor\");\n+        private volatile CompletableSource.Processor processor = newCompletableProcessor();\n+        private boolean seenError;\n+\n+        @Override\n+        protected void handleSubscribe(final Subscriber subscriber) {\n+            processor.subscribe(subscriber);\n+        }\n+\n+        void nextError(final Throwable t) {\n+            final CompletableSource.Processor newProcessor = newCompletableProcessor();\n+            newProcessor.onError(t);\n+            final CompletableSource.Processor oldProcessor = processorUpdater.getAndSet(this, newProcessor);\n+            oldProcessor.onError(t);", "originalCommit": "0ef351e3758cfb2ad0eab9a63b54190ecf474256", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDA3OTAyMQ==", "url": "https://github.com/apple/servicetalk/pull/1070#discussion_r434079021", "bodyText": "set this state before setting errors on the processors for weird re-entrancy back to resetError()", "author": "NiteshKant", "createdAt": "2020-06-02T18:12:18Z", "path": "servicetalk-http-netty/src/main/java/io/servicetalk/http/netty/DefaultSingleAddressHttpClientBuilder.java", "diffHunk": "@@ -552,4 +587,32 @@ public Completable closeAsyncGracefully() {\n             return closeable.closeAsyncGracefully();\n         }\n     }\n+\n+    private static final class SdStatusCompletable extends Completable {\n+        private static final AtomicReferenceFieldUpdater<SdStatusCompletable, CompletableSource.Processor>\n+                processorUpdater = newUpdater(SdStatusCompletable.class, CompletableSource.Processor.class,\n+                \"processor\");\n+        private volatile CompletableSource.Processor processor = newCompletableProcessor();\n+        private boolean seenError;\n+\n+        @Override\n+        protected void handleSubscribe(final Subscriber subscriber) {\n+            processor.subscribe(subscriber);\n+        }\n+\n+        void nextError(final Throwable t) {\n+            final CompletableSource.Processor newProcessor = newCompletableProcessor();\n+            newProcessor.onError(t);\n+            final CompletableSource.Processor oldProcessor = processorUpdater.getAndSet(this, newProcessor);\n+            oldProcessor.onError(t);\n+            seenError = true;", "originalCommit": "0ef351e3758cfb2ad0eab9a63b54190ecf474256", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDA5NzY3Nw==", "url": "https://github.com/apple/servicetalk/pull/1070#discussion_r434097677", "bodyText": "As the updates to processor  (nextError and resetError) aren't concurrent, we do not need an atomic updater.", "author": "NiteshKant", "createdAt": "2020-06-02T18:38:01Z", "path": "servicetalk-http-netty/src/main/java/io/servicetalk/http/netty/DefaultSingleAddressHttpClientBuilder.java", "diffHunk": "@@ -552,4 +587,32 @@ public Completable closeAsyncGracefully() {\n             return closeable.closeAsyncGracefully();\n         }\n     }\n+\n+    private static final class SdStatusCompletable extends Completable {\n+        private static final AtomicReferenceFieldUpdater<SdStatusCompletable, CompletableSource.Processor>", "originalCommit": "0ef351e3758cfb2ad0eab9a63b54190ecf474256", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDA5ODMwOQ==", "url": "https://github.com/apple/servicetalk/pull/1070#discussion_r434098309", "bodyText": "Since this field isn't volatile, just add a comment that this is only accessed from nextError and resetError which are not concurrent.", "author": "NiteshKant", "createdAt": "2020-06-02T18:39:11Z", "path": "servicetalk-http-netty/src/main/java/io/servicetalk/http/netty/DefaultSingleAddressHttpClientBuilder.java", "diffHunk": "@@ -552,4 +587,32 @@ public Completable closeAsyncGracefully() {\n             return closeable.closeAsyncGracefully();\n         }\n     }\n+\n+    private static final class SdStatusCompletable extends Completable {\n+        private static final AtomicReferenceFieldUpdater<SdStatusCompletable, CompletableSource.Processor>\n+                processorUpdater = newUpdater(SdStatusCompletable.class, CompletableSource.Processor.class,\n+                \"processor\");\n+        private volatile CompletableSource.Processor processor = newCompletableProcessor();\n+        private boolean seenError;", "originalCommit": "0ef351e3758cfb2ad0eab9a63b54190ecf474256", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzU1OTI5Nw==", "url": "https://github.com/apple/servicetalk/pull/1070#discussion_r433559297", "bodyText": "nit: you can kill this temp variable now that we don't have to conditionally apply a filter", "author": "Scottmitch", "createdAt": "2020-06-02T00:35:23Z", "path": "servicetalk-dns-discovery-netty/src/main/java/io/servicetalk/dns/discovery/netty/DefaultDnsServiceDiscovererBuilder.java", "diffHunk": "@@ -233,16 +221,11 @@ public DefaultDnsServiceDiscovererBuilder ioExecutor(final IoExecutor ioExecutor\n      * @return a new instance of {@link DnsClient}.\n      */\n     DnsClient build() {\n-        DnsClient rawClient = new DefaultDnsClient(\n+        final DnsClient rawClient = new DefaultDnsClient(\n                 ioExecutor == null ? globalExecutionContext().ioExecutor() : ioExecutor, minTTLSeconds, ndots,\n                 invalidateHostsOnDnsFailure, optResourceEnabled, queryTimeout, dnsResolverAddressTypes,\n                 dnsServerAddressStreamProvider);\n-        DnsClientFilterFactory rawFilterFactory = filterFactory;\n-        if (applyRetryFilter) {\n-            DnsClientFilterFactory retryFilterFactory = new RetryingDnsClientFilter();\n-            rawFilterFactory = rawFilterFactory == null ? retryFilterFactory :\n-                    retryFilterFactory.append(rawFilterFactory);\n-        }\n+        final DnsClientFilterFactory rawFilterFactory = filterFactory;", "originalCommit": "e0541cd7581b75ba99f4ecb9f1be4a6455d2c1cb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE3MDc5Nw==", "url": "https://github.com/apple/servicetalk/pull/1070#discussion_r434170797", "bodyText": "what is the intention of creating the newProcessor (that is failed) and swapping with the old processor (which is also failed)?", "author": "Scottmitch", "createdAt": "2020-06-02T20:56:41Z", "path": "servicetalk-http-netty/src/main/java/io/servicetalk/http/netty/DefaultSingleAddressHttpClientBuilder.java", "diffHunk": "@@ -552,4 +587,32 @@ public Completable closeAsyncGracefully() {\n             return closeable.closeAsyncGracefully();\n         }\n     }\n+\n+    private static final class SdStatusCompletable extends Completable {\n+        private static final AtomicReferenceFieldUpdater<SdStatusCompletable, CompletableSource.Processor>\n+                processorUpdater = newUpdater(SdStatusCompletable.class, CompletableSource.Processor.class,\n+                \"processor\");\n+        private volatile CompletableSource.Processor processor = newCompletableProcessor();\n+        private boolean seenError;\n+\n+        @Override\n+        protected void handleSubscribe(final Subscriber subscriber) {\n+            processor.subscribe(subscriber);\n+        }\n+\n+        void nextError(final Throwable t) {\n+            final CompletableSource.Processor newProcessor = newCompletableProcessor();\n+            newProcessor.onError(t);", "originalCommit": "0ef351e3758cfb2ad0eab9a63b54190ecf474256", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIyODUwMw==", "url": "https://github.com/apple/servicetalk/pull/1070#discussion_r434228503", "bodyText": "Because we expect any Throwable here, we use it as a way to update the state and always deliver the latest observed t to subscribers.\nThis is not on the hot path, therefore it's ok to use this approach vs duplicating support for multiple subscribers from CompletableProcessor.", "author": "idelpivnitskiy", "createdAt": "2020-06-02T23:26:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE3MDc5Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE5MjM1Mw==", "url": "https://github.com/apple/servicetalk/pull/1070#discussion_r434192353", "bodyText": "this isn't expected to complete IIUC and instead provides notification when the publisher for discover encounters an error. Consider clarifying the java docs on this statement:\n\n@param sdStatus a {@link Completable} that will terminate with an error when the corresponding\n{@link ServiceDiscoverer#discover(Object)} terminates with an error.", "author": "Scottmitch", "createdAt": "2020-06-02T21:43:06Z", "path": "servicetalk-client-api/src/main/java/io/servicetalk/client/api/AutoRetryStrategyProvider.java", "diffHunk": "@@ -32,15 +33,16 @@\n     /**\n      * An {@link AutoRetryStrategyProvider} that disables automatic retries;\n      */\n-    AutoRetryStrategyProvider DISABLE_AUTO_RETRIES = __ -> (___, cause) -> failed(cause);\n+    AutoRetryStrategyProvider DISABLE_AUTO_RETRIES = (lbEventStream, sdErrorStream) -> (___, cause) -> failed(cause);\n \n     /**\n-     * Create a new {@link AutoRetryStrategy} instance using the passed {@link LoadBalancer}.\n+     * Creates a new {@link AutoRetryStrategy} instance.\n      *\n-     * @param loadBalancer {@link LoadBalancer} to use.\n+     * @param lbEventStream a stream of events from {@link LoadBalancer#eventStream() LoadBalancer}\n+     * @param sdStatus a {@link Completable} that reports {@link ServiceDiscoverer} status", "originalCommit": "0ef351e3758cfb2ad0eab9a63b54190ecf474256", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE5NTcwOQ==", "url": "https://github.com/apple/servicetalk/pull/1070#discussion_r434195709", "bodyText": "this also seems somewhat opinionated to our current approach for the client.api package. For example what if there are multiple LBs/SDs internally in the builder then this AutoRetryStrategyProvider may not be applicable. Does it makes sense to move this to http.netty for now?", "author": "Scottmitch", "createdAt": "2020-06-02T21:51:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE5MjM1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIzMTMxMQ==", "url": "https://github.com/apple/servicetalk/pull/1070#discussion_r434231311", "bodyText": "Good question,\nLet's discuss this offline and consider as a follow-up if necessary.\nAutoRetryStrategyProvider is currently used in http-api and grpc-api. Not easy to move it to http-netty.", "author": "idelpivnitskiy", "createdAt": "2020-06-02T23:36:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE5MjM1Mw=="}], "type": "inlineReview"}, {"oid": "c0e64c2146973ab1f7bc682b9e2823ee230e95d4", "url": "https://github.com/apple/servicetalk/commit/c0e64c2146973ab1f7bc682b9e2823ee230e95d4", "message": "Address comments", "committedDate": "2020-06-02T23:32:27Z", "type": "commit"}, {"oid": "35b920446f8815ce98fa8e141b54263da3188675", "url": "https://github.com/apple/servicetalk/commit/35b920446f8815ce98fa8e141b54263da3188675", "message": "Add `@FunctionalInterface` annotation for `AutoRetryStrategyProvider`", "committedDate": "2020-06-02T23:34:04Z", "type": "commit"}]}