{"pr_number": 1228, "pr_title": "Improve exception messages from `HttpObjectDecoder`", "pr_createdAt": "2020-11-20T03:20:34Z", "pr_url": "https://github.com/apple/servicetalk/pull/1228", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzk4Nzk4MA==", "url": "https://github.com/apple/servicetalk/pull/1228#discussion_r527987980", "bodyText": "now that we have UriComponentType we should be able to leverage its optimized bit set mechanism. it should also simplify this code and reduce conditionals/switches.", "author": "Scottmitch", "createdAt": "2020-11-20T21:46:05Z", "path": "servicetalk-http-api/src/main/java/io/servicetalk/http/api/HeaderUtils.java", "diffHunk": "@@ -891,50 +903,10 @@ private static void validateCookieTokenAndHeaderName0(final CharSequence key) {\n         //                      | \",\" | \";\" | \":\" | \"\\\" | <\">\n         //                      | \"/\" | \"[\" | \"]\" | \"?\" | \"=\"\n         //                      | \"{\" | \"}\" | SP | HT\n-        for (int i = 0; i < key.length(); ++i) {\n-            final char value = key.charAt(i);\n-            // CTL = <any US-ASCII control character\n-            //       (octets 0 - 31) and DEL (127)>\n-            // separators     = \"(\" | \")\" | \"<\" | \">\" | \"@\"\n-            //                      | \",\" | \";\" | \":\" | \"\\\" | <\">\n-            //                      | \"/\" | \"[\" | \"]\" | \"?\" | \"=\"\n-            //                      | \"{\" | \"}\" | SP | HT\n-            if (value <= 32 || value >= 127) {\n-                throw new IllegalArgumentException(\"invalid token detected at index: \" + i);\n-            }\n-            switch (value) {\n-                case '(':\n-                case ')':\n-                case '<':\n-                case '>':\n-                case '@':\n-                case ',':\n-                case ';':\n-                case ':':\n-                case '\\\\':\n-                case '\"':\n-                case '/':\n-                case '[':\n-                case ']':\n-                case '?':\n-                case '=':\n-                case '{':\n-                case '}':\n-                    throw new IllegalArgumentException(\"invalid token detected at index: \" + i);\n-                default:\n-                    break;\n-            }\n-        }\n-    }\n \n-    /**\n-     * Validate char is valid <a href=\"https://tools.ietf.org/html/rfc7230#section-3.2.6\">token</a> character.\n-     *\n-     * @param value the character to validate.\n-     */\n-    private static void validateHeaderNameToken(final byte value) {\n-        if (value <= 32) {\n-            throw new IllegalArgumentException(\"invalid token detected: \" + value);\n+        if (value < '!') { // '!' is the first visible character of ascii table", "originalCommit": "3463b23881dc331807428d6f4fd582eb5a887385", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzk4OTIwOQ==", "url": "https://github.com/apple/servicetalk/pull/1228#discussion_r527989209", "bodyText": "ByteToMessageDecoder will propagate DecoderException exceptions ... do we need the two level exceptions or can we just throw DecoderException? If not can we prevent one of the exceptions from filling in stack trace info when the exceptions are created together?", "author": "Scottmitch", "createdAt": "2020-11-20T21:49:13Z", "path": "servicetalk-http-netty/src/main/java/io/servicetalk/http/netty/HttpObjectDecoder.java", "diffHunk": "@@ -96,7 +96,8 @@\n         if (value == CR || value == LF) {\n             return true;\n         }\n-        throw newIllegalCharacter(value);\n+        throw new DecoderException(\"Invalid preface character before the start-line of the HTTP message\",\n+                new IllegalCharacterException(value, \"CR (0x0D), LF (0x0A)\"));", "originalCommit": "3463b23881dc331807428d6f4fd582eb5a887385", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTI1ODc0MA==", "url": "https://github.com/apple/servicetalk/pull/1228#discussion_r529258740", "bodyText": "I've created StacklessDecoderException for cases when its stack trace is not relevant.", "author": "idelpivnitskiy", "createdAt": "2020-11-24T07:37:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzk4OTIwOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzk4OTkzNg==", "url": "https://github.com/apple/servicetalk/pull/1228#discussion_r527989936", "bodyText": "lets avoid format as it is expensive (regex matching etc..) and instead just manually build the string (or via StringBuilder if necessary).", "author": "Scottmitch", "createdAt": "2020-11-20T21:51:04Z", "path": "servicetalk-utils-internal/src/main/java/io/servicetalk/utils/internal/IllegalCharacterException.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.utils.internal;\n+\n+import static java.lang.String.format;\n+\n+/**\n+ * Exception that clarifies an illegal character and expected values.\n+ */\n+public final class IllegalCharacterException extends IllegalArgumentException {\n+    private static final long serialVersionUID = 5109746801766842145L;\n+\n+    /**\n+     * Creates a new instance.\n+     *\n+     * @param value value of the character\n+     */\n+    public IllegalCharacterException(final byte value) {\n+        super(format(\"'%1$c' (0x%1$02X)\", value & 0xff));", "originalCommit": "3463b23881dc331807428d6f4fd582eb5a887385", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzk5MjQxNg==", "url": "https://github.com/apple/servicetalk/pull/1228#discussion_r527992416", "bodyText": "filed -> field?", "author": "Scottmitch", "createdAt": "2020-11-20T21:57:05Z", "path": "servicetalk-http-netty/src/main/java/io/servicetalk/http/netty/HttpObjectDecoder.java", "diffHunk": "@@ -600,23 +615,35 @@ private void parseHeaderLine(final HttpHeaders headers, final ByteBuf buffer, fi\n         // Other checks will be done by header validator if enabled by users\n         final int nameEnd = buffer.forEachByte(nameStart, nonControlIndex - nameStart + 1, FIND_COLON);\n         if (nameEnd < 0) {\n-            throw new IllegalArgumentException(\"Unable to find end of header name\");\n+            throw new DecoderException(\"Unable to find end of header field-name, while parsing line \" +\n+                    (parsingLine - 1));\n         }\n         if (nameEnd == nameStart) {\n-            throw new IllegalArgumentException(\"Empty header name\");\n+            throw new DecoderException(\"Empty header field-name, while parsing line \" + (parsingLine - 1));\n         }\n \n         // We assume the allocator will not leak memory, and so we retain + slice to avoid copying data.\n         final CharSequence name = newAsciiString(newBufferFrom(buffer.retainedSlice(nameStart, nameEnd - nameStart)));\n-        final int valueStart;\n-        if (nameEnd >= nonControlIndex || (valueStart =\n-                buffer.forEachByte(nameEnd + 1, nonControlIndex - nameEnd, FIND_FIELD_VALUE)) < 0) {\n-            headers.add(name, emptyAsciiString());\n-        } else {\n-            final int valueEnd = buffer.forEachByteDesc(valueStart, nonControlIndex - valueStart + 1, FIND_FIELD_VALUE);\n-            // We assume the allocator will not leak memory, and so we retain + slice to avoid copying data.\n-            headers.add(name, newAsciiString(newBufferFrom(buffer.retainedSlice(valueStart,\n-                    valueEnd - valueStart + 1))));\n+        final CharSequence value;\n+        try {\n+            final int valueStart;\n+            if (nameEnd >= nonControlIndex || (valueStart =\n+                    buffer.forEachByte(nameEnd + 1, nonControlIndex - nameEnd, FIND_FIELD_VALUE)) < 0) {\n+                value = emptyAsciiString();\n+            } else {\n+                final int valueEnd =\n+                        buffer.forEachByteDesc(valueStart, nonControlIndex - valueStart + 1, FIND_FIELD_VALUE);\n+                // We assume the allocator will not leak memory, and so we retain + slice to avoid copying data.\n+                value = newAsciiString(newBufferFrom(buffer.retainedSlice(valueStart, valueEnd - valueStart + 1)));\n+            }\n+        } catch (IllegalCharacterException cause) {\n+            throw new DecoderException(\"Invalid header filed-value, while parsing line \" + (parsingLine - 1), cause);", "originalCommit": "3463b23881dc331807428d6f4fd582eb5a887385", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzk5MzE0Nw==", "url": "https://github.com/apple/servicetalk/pull/1228#discussion_r527993147", "bodyText": "in order for the parsingLine to be meaningful the user would have to have access to the underlying data (e.g. wire logging, etc.). We log the header name in other cases to provide more context, is it sufficient just to log the header name here?", "author": "Scottmitch", "createdAt": "2020-11-20T21:58:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzk5MjQxNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzk5Njg4Mg==", "url": "https://github.com/apple/servicetalk/pull/1228#discussion_r527996882", "bodyText": "since we will wrap this immediately with a DecoderException can we use ThrowableUtils.unknownStackTrace() here?", "author": "Scottmitch", "createdAt": "2020-11-20T22:07:51Z", "path": "servicetalk-http-netty/src/main/java/io/servicetalk/http/netty/HttpResponseDecoder.java", "diffHunk": "@@ -41,17 +43,19 @@\n import static io.servicetalk.http.api.HttpResponseStatus.SWITCHING_PROTOCOLS;\n import static io.servicetalk.http.api.HttpResponseStatus.StatusClass.INFORMATIONAL_1XX;\n import static io.servicetalk.transport.netty.internal.CloseHandler.UNSUPPORTED_PROTOCOL_CLOSE_HANDLER;\n-import static java.lang.Character.isISOControl;\n import static java.lang.Math.min;\n import static java.nio.charset.StandardCharsets.US_ASCII;\n import static java.util.Objects.requireNonNull;\n \n final class HttpResponseDecoder extends HttpObjectDecoder<HttpResponseMetaData> {\n \n-    private static final byte[] FIRST_BYTES = \"HTTP\".getBytes(US_ASCII);\n-    private static final ByteProcessor ENSURE_NO_CONTROL_CHARS = value -> {\n-        if (value != HT && isISOControl(value)) {   // allow HTAB\n-            throw newIllegalCharacter(value);\n+    private static final byte[] FIRST_BYTES = \"HTTP/\".getBytes(US_ASCII);\n+    private static final byte DEL = 127;\n+\n+    private static final ByteProcessor ENSURE_REASON_PHRASE = value -> {\n+        // Any control character (0x00-0x1F) except HT\n+        if (((value & 0xE0) == 0 && value != HT) || value == DEL) {\n+            throw new IllegalCharacterException(value, \"HTAB / SP / VCHAR / obs-text\");", "originalCommit": "3463b23881dc331807428d6f4fd582eb5a887385", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzk5NzQ4MA==", "url": "https://github.com/apple/servicetalk/pull/1228#discussion_r527997480", "bodyText": "we should consider moving the exceptional cases that have to create exceptions and build strings separate methods to allow the JVM to inline more easily for less frequent code paths.", "author": "Scottmitch", "createdAt": "2020-11-20T22:09:19Z", "path": "servicetalk-http-netty/src/main/java/io/servicetalk/http/netty/HttpResponseDecoder.java", "diffHunk": "@@ -140,12 +150,18 @@ protected boolean isContentAlwaysEmpty(final HttpResponseMetaData msg) {\n \n     private static int nettyBufferToStatusCode(final ByteBuf buffer, final int start, final int length) {\n         if (length != 3) {\n-            splitInitialLineError();\n+            throw new DecoderException(\"Invalid start-line: HTTP status-code must contain only 3 digits, found: \" +\n+                    buffer.toString(start, length, US_ASCII));\n         }\n \n         final int medium = buffer.getUnsignedMedium(start);\n-        return toDecimal((medium & 0xff0000) >> 16) * 100 +\n-                toDecimal((medium & 0xff00) >> 8) * 10 +\n-                toDecimal(medium & 0xff);\n+        try {\n+            return toDecimal((medium & 0xff0000) >> 16) * 100 +\n+                    toDecimal((medium & 0xff00) >> 8) * 10 +\n+                    toDecimal(medium & 0xff);\n+        } catch (IllegalCharacterException cause) {\n+            throw new DecoderException(\"Invalid start-line: HTTP status-code must contain only 3 digits, found: \" +", "originalCommit": "3463b23881dc331807428d6f4fd582eb5a887385", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "879e3b6cc11bb1005eb1123e260e5b7744271a9f", "url": "https://github.com/apple/servicetalk/commit/879e3b6cc11bb1005eb1123e260e5b7744271a9f", "message": "Improve exception messages from `HttpObjectDecoder`\n\nMotivation:\n\n`HttpObjectDecoder` and its subclasses may throw an exception if the received\nHTTP message violates the RFC and can not be parsed. However, exception messages\nare short and hard to understand, without any pointers to what part of the\nmessage caused an exception. Those cases are hard to debug and usually require\nknowledge of RFC.\n\nModifications:\n\n- Introduce `IllegalCharacterException` type that shows an illegal character as\na `char` and in hex format, as well as an expected values;\n- `try-catch` an `IllegalCharacterException` and wrap it with `DecoderException`\nthat clarifies where the illegal character was found;\n- Adjust tests for new exception messages;\n\nResult:\n\nMore understandable exception messages from `HttpObjectDecoder`.", "committedDate": "2020-11-20T23:56:59Z", "type": "commit"}, {"oid": "879e3b6cc11bb1005eb1123e260e5b7744271a9f", "url": "https://github.com/apple/servicetalk/commit/879e3b6cc11bb1005eb1123e260e5b7744271a9f", "message": "Improve exception messages from `HttpObjectDecoder`\n\nMotivation:\n\n`HttpObjectDecoder` and its subclasses may throw an exception if the received\nHTTP message violates the RFC and can not be parsed. However, exception messages\nare short and hard to understand, without any pointers to what part of the\nmessage caused an exception. Those cases are hard to debug and usually require\nknowledge of RFC.\n\nModifications:\n\n- Introduce `IllegalCharacterException` type that shows an illegal character as\na `char` and in hex format, as well as an expected values;\n- `try-catch` an `IllegalCharacterException` and wrap it with `DecoderException`\nthat clarifies where the illegal character was found;\n- Adjust tests for new exception messages;\n\nResult:\n\nMore understandable exception messages from `HttpObjectDecoder`.", "committedDate": "2020-11-20T23:56:59Z", "type": "forcePushed"}, {"oid": "3dcf9427e5de48e5fe8a94540fd2a647d5b439f0", "url": "https://github.com/apple/servicetalk/commit/3dcf9427e5de48e5fe8a94540fd2a647d5b439f0", "message": "Fix pmd error", "committedDate": "2020-11-21T02:06:25Z", "type": "commit"}, {"oid": "17bf816fa3214cf4650a1b6487284bbdc9378612", "url": "https://github.com/apple/servicetalk/commit/17bf816fa3214cf4650a1b6487284bbdc9378612", "message": "Address comments", "committedDate": "2020-11-24T07:28:11Z", "type": "commit"}, {"oid": "828ae71302fc99fcf5b6089ab28b440d86b6e46d", "url": "https://github.com/apple/servicetalk/commit/828ae71302fc99fcf5b6089ab28b440d86b6e46d", "message": "Fix spotbugs error", "committedDate": "2020-11-24T08:00:08Z", "type": "commit"}]}