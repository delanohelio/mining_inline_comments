{"pr_number": 1171, "pr_title": "Support write of read-only `Buffer`(s) for HTTP/2", "pr_createdAt": "2020-10-09T19:00:46Z", "pr_url": "https://github.com/apple/servicetalk/pull/1171", "timeline": [{"oid": "792d68399b0cc9e2c8af5cc27e0029b03eaf7761", "url": "https://github.com/apple/servicetalk/commit/792d68399b0cc9e2c8af5cc27e0029b03eaf7761", "message": "Support write of read-only `Buffer`(s) for HTTP/2\n\nMotivation:\n\nServiceTalk provides a default `BufferAllocator` backed by netty's\n`ByteBufAllocator`, but also provides a `ReadOnlyBufferAllocator`\nimplementation that does not depend on netty. `AbstractH2DuplexHandler`\ncurrently supports only `ServiceTalkBufferAllocator`.\n\nModifications:\n- Share `encodeAndRetain` logic between HTTP/1.x and HTTP/2 encoders;\n- Add a test that verified both HTTP versions support all `BufferAllocator`s;\n- Share `HttpProtocol` enum between different tests;\n- Implement `ReadOnlyBufferAllocator.toString()` for better output for test\nparameters;\n\nResult:\n\nHTTP/2 encoder supports `Buffer`s produced by `ReadOnlyBufferAllocator`.", "committedDate": "2020-10-09T19:00:04Z", "type": "commit"}, {"oid": "7d7872ac8fbe58edb34b932898ffe6b5173310ce", "url": "https://github.com/apple/servicetalk/commit/7d7872ac8fbe58edb34b932898ffe6b5173310ce", "message": "Fix: test did not use custom service", "committedDate": "2020-10-09T22:33:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjcyMTk2NQ==", "url": "https://github.com/apple/servicetalk/pull/1171#discussion_r502721965", "bodyText": "not introduced by this PR but the validation of the getBodyAsListOfStrings doesn't seem right. The way data is written may not necessarily be the way data is read. fixed in #1173", "author": "Scottmitch", "createdAt": "2020-10-10T00:34:39Z", "path": "servicetalk-http-netty/src/test/java/io/servicetalk/http/netty/SupportedBufferAllocatorsTest.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.http.netty;\n+\n+import io.servicetalk.buffer.api.BufferAllocator;\n+import io.servicetalk.http.api.BlockingHttpService;\n+import io.servicetalk.http.api.StreamingHttpRequest;\n+import io.servicetalk.http.api.StreamingHttpResponse;\n+import io.servicetalk.http.api.StreamingHttpService;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+\n+import java.util.Collection;\n+\n+import static io.servicetalk.buffer.api.ReadOnlyBufferAllocators.PREFER_DIRECT_RO_ALLOCATOR;\n+import static io.servicetalk.buffer.api.ReadOnlyBufferAllocators.PREFER_HEAP_RO_ALLOCATOR;\n+import static io.servicetalk.buffer.netty.BufferAllocators.PREFER_DIRECT_ALLOCATOR;\n+import static io.servicetalk.buffer.netty.BufferAllocators.PREFER_HEAP_ALLOCATOR;\n+import static io.servicetalk.concurrent.api.Publisher.from;\n+import static io.servicetalk.http.api.HttpApiConversions.toStreamingHttpService;\n+import static io.servicetalk.http.api.HttpResponseStatus.OK;\n+import static io.servicetalk.http.netty.AbstractNettyHttpServerTest.ExecutorSupplier.CACHED;\n+import static io.servicetalk.http.netty.AbstractNettyHttpServerTest.ExecutorSupplier.CACHED_SERVER;\n+import static io.servicetalk.http.netty.HttpProtocol.HTTP_1;\n+import static io.servicetalk.http.netty.HttpProtocol.HTTP_2;\n+import static java.nio.charset.StandardCharsets.US_ASCII;\n+import static java.util.Arrays.asList;\n+import static java.util.Collections.singletonList;\n+\n+@RunWith(Parameterized.class)\n+public class SupportedBufferAllocatorsTest extends AbstractNettyHttpServerTest {\n+\n+    private final HttpProtocol protocol;\n+    private final BufferAllocator allocator;\n+\n+    public SupportedBufferAllocatorsTest(HttpProtocol protocol, BufferAllocator allocator) {\n+        super(CACHED, CACHED_SERVER);\n+        this.protocol = protocol;\n+        this.allocator = allocator;\n+        protocol(protocol.config);\n+    }\n+\n+    @Parameterized.Parameters(name = \"{index}: protocol={0}, allocator={1}\")\n+    public static Collection<Object[]> data() {\n+        return asList(\n+                new Object[]{HTTP_1, PREFER_HEAP_ALLOCATOR},\n+                new Object[]{HTTP_1, PREFER_DIRECT_ALLOCATOR},\n+                new Object[]{HTTP_1, PREFER_HEAP_RO_ALLOCATOR},\n+                new Object[]{HTTP_1, PREFER_DIRECT_RO_ALLOCATOR},\n+                new Object[]{HTTP_2, PREFER_HEAP_ALLOCATOR},\n+                new Object[]{HTTP_2, PREFER_DIRECT_ALLOCATOR},\n+                new Object[]{HTTP_2, PREFER_HEAP_RO_ALLOCATOR},\n+                new Object[]{HTTP_2, PREFER_DIRECT_RO_ALLOCATOR});\n+    }\n+\n+    @Override\n+    protected void service(final StreamingHttpService service) {\n+        super.service((toStreamingHttpService((BlockingHttpService) (ctx, request, responseFactory) ->\n+                        responseFactory.ok().payloadBody(allocator.fromAscii(request.payloadBody().toString(US_ASCII))),\n+                strategy -> strategy)).adaptor());\n+    }\n+\n+    @Test\n+    public void test() throws Exception {\n+        String payload = \"Hello ServiceTalk\";\n+        StreamingHttpRequest request = streamingHttpConnection().post(\"/\")\n+                .payloadBody(from(allocator.fromAscii(payload)));\n+        StreamingHttpResponse response = makeRequest(request);\n+        assertResponse(response, protocol.version, OK, singletonList(payload));", "originalCommit": "7d7872ac8fbe58edb34b932898ffe6b5173310ce", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "561db2b08772a723fe67aa1b81f6ce69cb10a558", "url": "https://github.com/apple/servicetalk/commit/561db2b08772a723fe67aa1b81f6ce69cb10a558", "message": "Merge remote-tracking branch 'upstream/main' into h2-ro-buffers", "committedDate": "2020-10-10T01:38:30Z", "type": "commit"}, {"oid": "51a8ec623ea83ce24a324adcaf93e4432417883c", "url": "https://github.com/apple/servicetalk/commit/51a8ec623ea83ce24a324adcaf93e4432417883c", "message": "Fix assertResponse API", "committedDate": "2020-10-10T01:39:36Z", "type": "commit"}]}