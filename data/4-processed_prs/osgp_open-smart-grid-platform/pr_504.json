{"pr_number": 504, "pr_title": "LMD SOAP Interface", "pr_createdAt": "2020-11-12T15:27:17Z", "pr_url": "https://github.com/OSGP/open-smart-grid-platform/pull/504", "timeline": [{"oid": "6282df9471cde49c60385fdaab6cb19547187e63", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/6282df9471cde49c60385fdaab6cb19547187e63", "message": "LMD SOAP Interface", "committedDate": "2020-11-12T15:20:19Z", "type": "commit"}, {"oid": "f940e90c1501dd17da5321bcbd17ca4c3efc9364", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/f940e90c1501dd17da5321bcbd17ca4c3efc9364", "message": "LMD SOAP Interface integration tests", "committedDate": "2020-11-12T21:08:55Z", "type": "commit"}, {"oid": "1b39f217c5a36109b9ca069ed4974116da311279", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/1b39f217c5a36109b9ca069ed4974116da311279", "message": "Fix LMD delete while it is assigned to the device\nFix EventRepository.findLatestEventForEveryDevice: use LEFT JOIN to select LMD's without any events", "committedDate": "2020-11-17T11:52:23Z", "type": "commit"}, {"oid": "40af197dfabb2cde939f6cc977e3beca5337d4c7", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/40af197dfabb2cde939f6cc977e3beca5337d4c7", "message": "Fix LMD delete while it is assigned to the device", "committedDate": "2020-11-17T12:42:28Z", "type": "commit"}, {"oid": "feb451abcd6c9d248e3a07545c44b0c95834dee0", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/feb451abcd6c9d248e3a07545c44b0c95834dee0", "message": "Merge branch 'development' of https://github.com/OSGP/open-smart-grid-platform into LMD-SOAP-Interface", "committedDate": "2020-11-17T13:32:55Z", "type": "commit"}, {"oid": "c2411742cd30bc3e28bdd26c7e98db469fb2ec7f", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/c2411742cd30bc3e28bdd26c7e98db469fb2ec7f", "message": "Extend PublicLightingAdHocManagement FindAllDevices operation to return SSLD's and LMD's", "committedDate": "2020-11-20T13:05:35Z", "type": "commit"}, {"oid": "861275b36a2ab9b3b812d3e07e920924f414a503", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/861275b36a2ab9b3b812d3e07e920924f414a503", "message": "Add paging support to PublicLightingAdHocManagement FindAllDevices operation", "committedDate": "2020-11-30T13:54:08Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTM1ODIxMg==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/504#discussion_r535358212", "bodyText": "In the license headers with new source files we are using the year they were added, and \"Alliander N.V.\" instead of \"Smart Society Services B.V.\". It'd be appreciated if you could update the headers in the new files in this pull request accordingly.", "author": "bvdzwet", "createdAt": "2020-12-03T15:54:12Z", "path": "integration-tests/cucumber-tests-platform-common/src/test/java/org/opensmartgridplatform/cucumber/platform/common/glue/steps/ws/core/deviceinstallation/CreateLightMeasurementDeviceSteps.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/**\n+ * Copyright 2017 Smart Society Services B.V.", "originalCommit": "861275b36a2ab9b3b812d3e07e920924f414a503", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzMyOTIxNA==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/504#discussion_r537329214", "bodyText": "I am using the following template:\nhttps://github.com/OSGP/Config/blob/development/code-format-settings/eclipse/code-templates/codetemplates.xml\nCan you please update it. In the meantime, I will modify mine manually.", "author": "ThE-MaRaC", "createdAt": "2020-12-07T08:51:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTM1ODIxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzM1ODEzNw==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/504#discussion_r537358137", "bodyText": "Thanks for pointing this out. The templates in the Config repository have been updated.", "author": "bvdzwet", "createdAt": "2020-12-07T09:35:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTM1ODIxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzUzNjQzNQ==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/504#discussion_r537536435", "bodyText": "New template applied to all my changes.", "author": "ThE-MaRaC", "createdAt": "2020-12-07T14:12:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTM1ODIxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODE0NTYxNw==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/504#discussion_r538145617", "bodyText": "I may not have been clear enough about the license headers.\nThe new headers look good, however they should be applied to files that are new or did not have a license header.\nThe idea is not to change the license header when updating an existing file (as happened if I saw it correct with ApplicationContext, AdHocManagementService and PublicLightingAdHocManagementEndpoint).\nAssuming this remains the only open end, I will fix the license headers myself when I merge the pull request, and you don't need to take further action for now.", "author": "bvdzwet", "createdAt": "2020-12-08T08:46:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTM1ODIxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODQ5MTU4OA==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/504#discussion_r538491588", "bodyText": "Sorry, I thought that this has to be added to every file that is updated.", "author": "ThE-MaRaC", "createdAt": "2020-12-08T15:22:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTM1ODIxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODUzODYyMA==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/504#discussion_r538538620", "bodyText": "That's okay, I guess it's more complicated than it needs to be. Hope that it will help that we fixed the code templates based on your suggestion.", "author": "bvdzwet", "createdAt": "2020-12-08T16:03:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTM1ODIxMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTM4NzU4OQ==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/504#discussion_r535387589", "bodyText": "This file is missing a license header.", "author": "bvdzwet", "createdAt": "2020-12-03T16:31:04Z", "path": "osgp/platform/osgp-adapter-ws-publiclighting/src/main/java/org/opensmartgridplatform/adapter/ws/publiclighting/application/mapping/converters/LmdConverter.java", "diffHunk": "@@ -0,0 +1,64 @@\n+package org.opensmartgridplatform.adapter.ws.publiclighting.application.mapping.converters;", "originalCommit": "861275b36a2ab9b3b812d3e07e920924f414a503", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzUzMzUxNw==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/504#discussion_r537533517", "bodyText": "Fixed", "author": "ThE-MaRaC", "createdAt": "2020-12-07T14:08:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTM4NzU4OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTM5MDAzNg==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/504#discussion_r535390036", "bodyText": "This file is missing a license header.", "author": "bvdzwet", "createdAt": "2020-12-03T16:34:20Z", "path": "osgp/platform/osgp-adapter-ws-shared-db/src/main/java/org/opensmartgridplatform/adapter/ws/shared/db/domain/repositories/writable/WritableLightMeasurementDeviceRepository.java", "diffHunk": "@@ -0,0 +1,10 @@\n+package org.opensmartgridplatform.adapter.ws.shared.db.domain.repositories.writable;", "originalCommit": "861275b36a2ab9b3b812d3e07e920924f414a503", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzUzNDExMA==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/504#discussion_r537534110", "bodyText": "Fixed", "author": "ThE-MaRaC", "createdAt": "2020-12-07T14:09:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTM5MDAzNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTQwOTQ0NQ==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/504#discussion_r535409445", "bodyText": "Looking at the current state in the development branch I think we are in the clear with regards to risks of Flyway version conflicts for this file.\nPlease be aware that in order to avoid running into version number conflicts due to near simultaneous work in different feature branches, we prefer not to go for versions with a bunch of zeros in the end, but to fill in the timestamp based version with more detailed numbers.", "author": "bvdzwet", "createdAt": "2020-12-03T16:55:34Z", "path": "osgp/platform/osgp-core/src/main/resources/db/migration/V20201117090000000__Modify_ssld_to_light_measurement_device_fk.sql", "diffHunk": "@@ -0,0 +1,22 @@\n+DO", "originalCommit": "861275b36a2ab9b3b812d3e07e920924f414a503", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzUzNTgzMg==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/504#discussion_r537535832", "bodyText": "Leaving this file as it is, but I will keep this in mind for all future changes.", "author": "ThE-MaRaC", "createdAt": "2020-12-07T14:11:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTQwOTQ0NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjAwOTczOQ==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/504#discussion_r536009739", "bodyText": "There is nothing wrong with this (and the code still has a number of places with form of type validation), but you could consider using assertThat(actual).isInstanceOf(ExpectedClass.class) for type checking. The more specific assertions often have nicer default messages if the assertion fails.\nIf you want to leave it as is, that is acceptable as well.", "author": "bvdzwet", "createdAt": "2020-12-04T10:49:42Z", "path": "integration-tests/cucumber-tests-platform-common/src/test/java/org/opensmartgridplatform/cucumber/platform/common/glue/steps/ws/core/deviceinstallation/CreateLightMeasurementDeviceSteps.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/**\n+ * Copyright 2017 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.cucumber.platform.common.glue.steps.ws.core.deviceinstallation;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.opensmartgridplatform.cucumber.core.ReadSettingsHelper.getBoolean;\n+import static org.opensmartgridplatform.cucumber.core.ReadSettingsHelper.getFloat;\n+import static org.opensmartgridplatform.cucumber.core.ReadSettingsHelper.getShort;\n+import static org.opensmartgridplatform.cucumber.core.ReadSettingsHelper.getString;\n+\n+import java.util.Map;\n+\n+import org.opensmartgridplatform.adapter.ws.schema.core.deviceinstallation.AddLightMeasurementDeviceRequest;\n+import org.opensmartgridplatform.adapter.ws.schema.core.deviceinstallation.AddLightMeasurementDeviceResponse;\n+import org.opensmartgridplatform.adapter.ws.schema.core.deviceinstallation.DeviceModel;\n+import org.opensmartgridplatform.adapter.ws.schema.core.deviceinstallation.LightMeasurementDevice;\n+import org.opensmartgridplatform.adapter.ws.schema.core.deviceinstallation.UpdateLightMeasurementDeviceRequest;\n+import org.opensmartgridplatform.adapter.ws.schema.core.deviceinstallation.UpdateLightMeasurementDeviceResponse;\n+import org.opensmartgridplatform.cucumber.core.ScenarioContext;\n+import org.opensmartgridplatform.cucumber.platform.PlatformKeys;\n+import org.opensmartgridplatform.cucumber.platform.common.PlatformCommonDefaults;\n+import org.opensmartgridplatform.cucumber.platform.common.support.ws.core.CoreDeviceInstallationClient;\n+import org.opensmartgridplatform.cucumber.platform.core.builders.AddressBuilder;\n+import org.opensmartgridplatform.cucumber.platform.glue.steps.ws.GenericResponseSteps;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+import io.cucumber.java.en.Then;\n+import io.cucumber.java.en.When;\n+\n+public class CreateLightMeasurementDeviceSteps {\n+\n+    @Autowired\n+    private CoreDeviceInstallationClient client;\n+\n+    @When(\"^receiving an add light measurement device request$\")\n+    public void receivingAnAddLightMeasurementDeviceRequest(final Map<String, String> settings) {\n+        final AddLightMeasurementDeviceRequest request = new AddLightMeasurementDeviceRequest();\n+        final LightMeasurementDevice lmd = this.createLightMeasurementDevice(settings);\n+        request.setLightMeasurementDevice(lmd);\n+\n+        try {\n+            ScenarioContext.current().put(PlatformKeys.RESPONSE, this.client.addLightMeasurementDevice(request));\n+        } catch (final Exception ex) {\n+            ScenarioContext.current().put(PlatformKeys.RESPONSE, ex);\n+        }\n+    }\n+\n+    @When(\"^receiving an add light measurement device request with an unknown organization$\")\n+    public void receivingAnAddLightMeasurementDeviceRequestWithAnUnknownOrganization(\n+            final Map<String, String> settings) {\n+        ScenarioContext.current().put(PlatformKeys.KEY_ORGANIZATION_IDENTIFICATION, \"unknown-organization\");\n+        this.receivingAnAddLightMeasurementDeviceRequest(settings);\n+    }\n+\n+    @When(\"^receiving an update light measurement device request$\")\n+    public void receivingAnUpdateLightMeasurementDeviceRequest(final Map<String, String> settings) {\n+        final UpdateLightMeasurementDeviceRequest request = new UpdateLightMeasurementDeviceRequest();\n+        final String deviceIdentification = getString(settings, PlatformKeys.KEY_DEVICE_IDENTIFICATION,\n+                PlatformCommonDefaults.DEFAULT_DEVICE_IDENTIFICATION);\n+        request.setDeviceIdentification(deviceIdentification);\n+\n+        final LightMeasurementDevice lmd = this.createLightMeasurementDevice(settings);\n+        request.setUpdatedLightMeasurementDevice(lmd);\n+\n+        try {\n+            ScenarioContext.current().put(PlatformKeys.RESPONSE, this.client.updateLightMeasurementDevice(request));\n+        } catch (final Exception ex) {\n+            ScenarioContext.current().put(PlatformKeys.RESPONSE, ex);\n+        }\n+    }\n+\n+    @Then(\"^the add light measurement device response is successful$\")\n+    public void theAddLightMeasurementDeviceResponseIsSuccessful() {\n+        assertThat(ScenarioContext.current().get(PlatformKeys.RESPONSE) instanceof AddLightMeasurementDeviceResponse)\n+                .isTrue();", "originalCommit": "861275b36a2ab9b3b812d3e07e920924f414a503", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzUzNDIwMg==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/504#discussion_r537534202", "bodyText": "Fixed", "author": "ThE-MaRaC", "createdAt": "2020-12-07T14:09:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjAwOTczOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjAxNjg0OA==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/504#discussion_r536016848", "bodyText": "I just noticed the difference in determining the organization identification between adding and updating the device, and wondered if the following wouldn't work the same with less code:\nreturn this.addLightMeasurementDevice(request, this.getOrganizationIdentification());\nIf you agree and feel like checking if it works with the shorter code, you could consider changing this, but I don't mind if you leave it as is.", "author": "bvdzwet", "createdAt": "2020-12-04T11:01:10Z", "path": "integration-tests/cucumber-tests-platform-common/src/test/java/org/opensmartgridplatform/cucumber/platform/common/support/ws/core/CoreDeviceInstallationClient.java", "diffHunk": "@@ -63,6 +67,30 @@ public UpdateDeviceResponse updateDevice(final UpdateDeviceRequest request) thro\n         return (UpdateDeviceResponse) wst.marshalSendAndReceive(request);\n     }\n \n+    public AddLightMeasurementDeviceResponse addLightMeasurementDevice(final AddLightMeasurementDeviceRequest request)\n+            throws WebServiceSecurityException {\n+        String organizationIdentification = (String) ScenarioContext.current()\n+                .get(PlatformKeys.KEY_ORGANIZATION_IDENTIFICATION);\n+        if (organizationIdentification == null) {\n+            organizationIdentification = PlatformDefaults.DEFAULT_ORGANIZATION_IDENTIFICATION;\n+        }\n+        return this.addLightMeasurementDevice(request, organizationIdentification);", "originalCommit": "861275b36a2ab9b3b812d3e07e920924f414a503", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzU3MTM3MA==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/504#discussion_r537571370", "bodyText": "Fixed", "author": "ThE-MaRaC", "createdAt": "2020-12-07T14:56:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjAxNjg0OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjA2MTk2Mw==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/504#discussion_r536061963", "bodyText": "I think the quotation marks are best suited when you need to capture a number of words into an argument.\nSince Cucumber expressions were added, this could be expressed nicer by using {string} avoiding the need to escape quotes in the step definition.\nFor numbers, you can add the quotes, but in general I think the steps read nicer without them, so just {int} would be fine.\nIf you liked it better with the quotes, you can leave them in, but if you agree with my suggestion it'd be nice if you changed this.", "author": "bvdzwet", "createdAt": "2020-12-04T12:23:47Z", "path": "integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/glue/steps/ws/publiclighting/adhocmanagement/FindAllDevicesSteps.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/**\n+ * Copyright 2017 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.cucumber.platform.publiclighting.glue.steps.ws.publiclighting.adhocmanagement;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.opensmartgridplatform.cucumber.core.ReadSettingsHelper.getBoolean;\n+import static org.opensmartgridplatform.cucumber.core.ReadSettingsHelper.getFloat;\n+import static org.opensmartgridplatform.cucumber.core.ReadSettingsHelper.getInteger;\n+import static org.opensmartgridplatform.cucumber.core.ReadSettingsHelper.getShort;\n+import static org.opensmartgridplatform.cucumber.core.ReadSettingsHelper.getString;\n+\n+import java.util.Map;\n+\n+import org.opensmartgridplatform.adapter.ws.schema.publiclighting.adhocmanagement.Device;\n+import org.opensmartgridplatform.adapter.ws.schema.publiclighting.adhocmanagement.FindAllDevicesRequest;\n+import org.opensmartgridplatform.adapter.ws.schema.publiclighting.adhocmanagement.FindAllDevicesResponse;\n+import org.opensmartgridplatform.adapter.ws.schema.publiclighting.adhocmanagement.LightMeasurementDevice;\n+import org.opensmartgridplatform.adapter.ws.schema.publiclighting.adhocmanagement.Ssld;\n+import org.opensmartgridplatform.cucumber.core.ScenarioContext;\n+import org.opensmartgridplatform.cucumber.platform.PlatformKeys;\n+import org.opensmartgridplatform.cucumber.platform.common.PlatformCommonKeys;\n+import org.opensmartgridplatform.cucumber.platform.publiclighting.PlatformPubliclightingKeys;\n+import org.opensmartgridplatform.cucumber.platform.publiclighting.support.ws.publiclighting.PublicLightingAdHocManagementClient;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.ws.soap.client.SoapFaultClientException;\n+\n+import io.cucumber.java.en.Then;\n+import io.cucumber.java.en.When;\n+\n+public class FindAllDevicesSteps {\n+\n+    @Autowired\n+    private PublicLightingAdHocManagementClient publicLightingClient;\n+\n+    @When(\"^receiving a find all devices request$\")\n+    public void receivingAFindAllDevicesRequest(final Map<String, String> requestParameters) throws Throwable {\n+        final FindAllDevicesRequest request = new FindAllDevicesRequest();\n+\n+        if (requestParameters.containsKey(PlatformKeys.KEY_PAGE_SIZE)) {\n+            request.setPageSize(getInteger(requestParameters, PlatformKeys.KEY_PAGE_SIZE));\n+        }\n+        if (requestParameters.containsKey(PlatformKeys.KEY_PAGE)) {\n+            request.setPage(getInteger(requestParameters, PlatformKeys.KEY_PAGE));\n+        }\n+\n+        try {\n+            ScenarioContext.current()\n+                    .put(PlatformPubliclightingKeys.RESPONSE, this.publicLightingClient.findAllDevices(request));\n+        } catch (final SoapFaultClientException ex) {\n+            ScenarioContext.current().put(PlatformPubliclightingKeys.RESPONSE, ex);\n+        }\n+    }\n+\n+    @Then(\"the find all devices response contains \\\"{int}\\\" device(s)\")", "originalCommit": "861275b36a2ab9b3b812d3e07e920924f414a503", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzU3MTQxNA==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/504#discussion_r537571414", "bodyText": "Fixed", "author": "ThE-MaRaC", "createdAt": "2020-12-07T14:56:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjA2MTk2Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjA4NDcwNA==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/504#discussion_r536084704", "bodyText": "I believe you wrote \"device(s)\" in the step, making the plural s optional. Since there is only 1 device here, I think it would look a bit nicer if the s was removed at the end.", "author": "bvdzwet", "createdAt": "2020-12-04T13:03:59Z", "path": "integration-tests/cucumber-tests-platform-publiclighting/src/test/resources/features/publiclighting/osgp-adapter-ws-publiclighting/AdHocManagement/FindAllDevices.feature", "diffHunk": "@@ -0,0 +1,149 @@\n+@PublicLighting @Platform @PublicLightingAdhocManagement\n+Feature: PublicLightingAdhocManagement FindAllDevices\n+  As a ...\n+  I want to be able to perform FindAllDevices operation\n+  So that ...\n+\n+  Scenario: Find all devices, only SSLD present\n+    Given a device model\n+      | ModelCode    | Test Model |\n+      | Manufacturer | Test       |\n+    And an ssld device\n+      | DeviceIdentification       | TEST1024000000001 |\n+      | Alias                      | ALIAS_SSLD        |\n+      | OrganizationIdentification | test-org          |\n+      | containerPostalCode        | 1234AA            |\n+      | containerCity              | Maastricht        |\n+      | containerStreet            | Stationsstraat    |\n+      | containerNumber            |                12 |\n+      | containerMunicipality      |                   |\n+      | gpsLatitude                |                 0 |\n+      | gpsLongitude               |                 0 |\n+      | Activated                  | false             |\n+      | DeviceModel                | Test Model        |\n+      | DeviceType                 | SSLD              |\n+      | PublicKeyPresent           | false             |\n+      | HasSchedule                | false             |\n+    When receiving a find all devices request\n+      | Page                       |                 0 |\n+    Then the find all devices response contains \"1\" devices", "originalCommit": "861275b36a2ab9b3b812d3e07e920924f414a503", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzU3MTUyMw==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/504#discussion_r537571523", "bodyText": "Fixed", "author": "ThE-MaRaC", "createdAt": "2020-12-07T14:56:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjA4NDcwNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjA5MTUyMw==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/504#discussion_r536091523", "bodyText": "There's a typo in the method name (ligth instead of light).", "author": "bvdzwet", "createdAt": "2020-12-04T13:15:45Z", "path": "integration-tests/cucumber-tests-platform/src/test/java/org/opensmartgridplatform/cucumber/platform/glue/steps/database/core/LightMeasurementDeviceSteps.java", "diffHunk": "@@ -7,27 +7,170 @@\n  */\n package org.opensmartgridplatform.cucumber.platform.glue.steps.database.core;\n \n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.opensmartgridplatform.cucumber.core.ReadSettingsHelper.getBoolean;\n+import static org.opensmartgridplatform.cucumber.core.ReadSettingsHelper.getEnum;\n+import static org.opensmartgridplatform.cucumber.core.ReadSettingsHelper.getFloat;\n+import static org.opensmartgridplatform.cucumber.core.ReadSettingsHelper.getInteger;\n+import static org.opensmartgridplatform.cucumber.core.ReadSettingsHelper.getShort;\n+import static org.opensmartgridplatform.cucumber.core.ReadSettingsHelper.getString;\n+\n import java.net.InetAddress;\n+import java.net.UnknownHostException;\n import java.util.Calendar;\n import java.util.Date;\n import java.util.GregorianCalendar;\n+import java.util.List;\n+import java.util.Map;\n \n+import org.apache.commons.lang3.StringUtils;\n import org.joda.time.DateTime;\n import org.joda.time.DateTimeZone;\n+import org.opensmartgridplatform.cucumber.core.Wait;\n+import org.opensmartgridplatform.cucumber.platform.PlatformDefaults;\n+import org.opensmartgridplatform.cucumber.platform.PlatformKeys;\n import org.opensmartgridplatform.domain.core.entities.DeviceAuthorization;\n+import org.opensmartgridplatform.domain.core.entities.DeviceModel;\n import org.opensmartgridplatform.domain.core.entities.LightMeasurementDevice;\n import org.opensmartgridplatform.domain.core.entities.ProtocolInfo;\n import org.opensmartgridplatform.domain.core.repositories.LightMeasurementDeviceRepository;\n+import org.opensmartgridplatform.domain.core.valueobjects.Address;\n+import org.opensmartgridplatform.domain.core.valueobjects.DeviceLifecycleStatus;\n+import org.opensmartgridplatform.domain.core.valueobjects.GpsCoordinates;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n \n import io.cucumber.java.en.Given;\n+import io.cucumber.java.en.Then;\n \n public class LightMeasurementDeviceSteps extends BaseDeviceSteps {\n \n     @Autowired\n     private LightMeasurementDeviceRepository lightMeasurementDeviceRepository;\n \n+    @Then(\"^the light measurement device exists\")\n+    public void theLigthMeasurementDeviceExists(final Map<String, String> settings) throws Throwable {", "originalCommit": "861275b36a2ab9b3b812d3e07e920924f414a503", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzU3MTYwNg==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/504#discussion_r537571606", "bodyText": "Fixed", "author": "ThE-MaRaC", "createdAt": "2020-12-07T14:57:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjA5MTUyMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjA5NjM4OQ==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/504#discussion_r536096389", "bodyText": "The SonarLint plugin in my IDE marks this as suspicious. The reason is that isEqualTo is used on dissimilar types (an Integer for the actual container number and a String for the expected container number from the settings).", "author": "bvdzwet", "createdAt": "2020-12-04T13:23:50Z", "path": "integration-tests/cucumber-tests-platform/src/test/java/org/opensmartgridplatform/cucumber/platform/glue/steps/database/core/LightMeasurementDeviceSteps.java", "diffHunk": "@@ -7,27 +7,170 @@\n  */\n package org.opensmartgridplatform.cucumber.platform.glue.steps.database.core;\n \n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.opensmartgridplatform.cucumber.core.ReadSettingsHelper.getBoolean;\n+import static org.opensmartgridplatform.cucumber.core.ReadSettingsHelper.getEnum;\n+import static org.opensmartgridplatform.cucumber.core.ReadSettingsHelper.getFloat;\n+import static org.opensmartgridplatform.cucumber.core.ReadSettingsHelper.getInteger;\n+import static org.opensmartgridplatform.cucumber.core.ReadSettingsHelper.getShort;\n+import static org.opensmartgridplatform.cucumber.core.ReadSettingsHelper.getString;\n+\n import java.net.InetAddress;\n+import java.net.UnknownHostException;\n import java.util.Calendar;\n import java.util.Date;\n import java.util.GregorianCalendar;\n+import java.util.List;\n+import java.util.Map;\n \n+import org.apache.commons.lang3.StringUtils;\n import org.joda.time.DateTime;\n import org.joda.time.DateTimeZone;\n+import org.opensmartgridplatform.cucumber.core.Wait;\n+import org.opensmartgridplatform.cucumber.platform.PlatformDefaults;\n+import org.opensmartgridplatform.cucumber.platform.PlatformKeys;\n import org.opensmartgridplatform.domain.core.entities.DeviceAuthorization;\n+import org.opensmartgridplatform.domain.core.entities.DeviceModel;\n import org.opensmartgridplatform.domain.core.entities.LightMeasurementDevice;\n import org.opensmartgridplatform.domain.core.entities.ProtocolInfo;\n import org.opensmartgridplatform.domain.core.repositories.LightMeasurementDeviceRepository;\n+import org.opensmartgridplatform.domain.core.valueobjects.Address;\n+import org.opensmartgridplatform.domain.core.valueobjects.DeviceLifecycleStatus;\n+import org.opensmartgridplatform.domain.core.valueobjects.GpsCoordinates;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n \n import io.cucumber.java.en.Given;\n+import io.cucumber.java.en.Then;\n \n public class LightMeasurementDeviceSteps extends BaseDeviceSteps {\n \n     @Autowired\n     private LightMeasurementDeviceRepository lightMeasurementDeviceRepository;\n \n+    @Then(\"^the light measurement device exists\")\n+    public void theLigthMeasurementDeviceExists(final Map<String, String> settings) throws Throwable {\n+        final LightMeasurementDevice lmd = Wait.untilAndReturn(() -> {\n+            final LightMeasurementDevice entity = this.lightMeasurementDeviceRepository\n+                    .findByDeviceIdentification(settings.get(PlatformKeys.KEY_DEVICE_IDENTIFICATION));\n+            if (entity == null) {\n+                throw new Exception(\n+                        \"Device with identification [\" + settings.get(PlatformKeys.KEY_DEVICE_IDENTIFICATION) + \"]\");\n+            }\n+\n+            return entity;\n+        });\n+\n+        if (settings.containsKey(PlatformKeys.ALIAS)) {\n+            assertThat(lmd.getAlias()).isEqualTo(getString(settings, PlatformKeys.ALIAS));\n+        }\n+        if (settings.containsKey(PlatformKeys.KEY_ORGANIZATION_IDENTIFICATION)) {\n+            assertThat(lmd.getOwner().getOrganisationIdentification())\n+                    .isEqualTo(getString(settings, PlatformKeys.KEY_ORGANIZATION_IDENTIFICATION));\n+        }\n+        if (settings.containsKey(PlatformKeys.CONTAINER_POSTALCODE)) {\n+            assertThat(lmd.getContainerAddress().getPostalCode())\n+                    .isEqualTo(getString(settings, PlatformKeys.CONTAINER_POSTALCODE));\n+        }\n+        if (settings.containsKey(PlatformKeys.CONTAINER_CITY)) {\n+            assertThat(lmd.getContainerAddress().getCity()).isEqualTo(getString(settings, PlatformKeys.CONTAINER_CITY));\n+        }\n+        if (settings.containsKey(PlatformKeys.CONTAINER_STREET)) {\n+            assertThat(lmd.getContainerAddress().getStreet())\n+                    .isEqualTo(getString(settings, PlatformKeys.CONTAINER_STREET));\n+        }\n+        if (settings.containsKey(PlatformKeys.CONTAINER_NUMBER)) {\n+            assertThat(lmd.getContainerAddress().getNumber())\n+                    .isEqualTo(getString(settings, PlatformKeys.CONTAINER_NUMBER));", "originalCommit": "861275b36a2ab9b3b812d3e07e920924f414a503", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzU3MTY5NQ==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/504#discussion_r537571695", "bodyText": "Fixed", "author": "ThE-MaRaC", "createdAt": "2020-12-07T14:57:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjA5NjM4OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjEwMzM3NQ==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/504#discussion_r536103375", "bodyText": "Since we are already using repositories in our converters here, it is OK that this practice is applied in the converter for the light measurement device as well (at least for now). This is just to let you know that we have had discussions about this, and general consensus at the moment is that we feel we should not have gone down this path.\nWe think the mappings from one type to another had better not use resources external to the mapped types.\nWe have OC-175 on our back log, to see if we can get rid of this (created in 2016 and has had lower priority than other tasks all this time, so it may still take some time before we get around to this).", "author": "bvdzwet", "createdAt": "2020-12-04T13:35:25Z", "path": "osgp/platform/osgp-adapter-ws-core/src/main/java/org/opensmartgridplatform/adapter/ws/core/application/mapping/DeviceInstallationMapper.java", "diffHunk": "@@ -37,8 +37,11 @@ public void initialize() {\n \n     @Override\n     public void configure(final MapperFactory mapperFactory) {\n-        mapperFactory.getConverterFactory().registerConverter(\n-                new WsInstallationDeviceToDeviceConverter(this.ssldRepository, this.writableDeviceModelRepository));\n+        mapperFactory.getConverterFactory()\n+                .registerConverter(new WsInstallationDeviceToDeviceConverter(this.ssldRepository,\n+                        this.writableDeviceModelRepository));\n         mapperFactory.getConverterFactory().registerConverter(new WsInstallationDeviceToSsldConverter());\n+        mapperFactory.getConverterFactory()\n+                .registerConverter(new WsInstallationLmdToLmdConverter(this.writableDeviceModelRepository));", "originalCommit": "861275b36a2ab9b3b812d3e07e920924f414a503", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzU3MjYxOQ==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/504#discussion_r537572619", "bodyText": "OK, thx for info.", "author": "ThE-MaRaC", "createdAt": "2020-12-07T14:58:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjEwMzM3NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjE0MjA1MA==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/504#discussion_r536142050", "bodyText": "Looking at this I wonder if this is a potential bug (that was already present in the code by the way).\nI assume that addresses normally will have a number, but there does not seem to be anything that enforces this.\nMaybe it would be more prudent to check that containerAddress.getNumber() is not null before creating a String out of it.", "author": "bvdzwet", "createdAt": "2020-12-04T14:34:18Z", "path": "osgp/platform/osgp-adapter-ws-publiclighting/src/main/java/org/opensmartgridplatform/adapter/ws/publiclighting/application/mapping/converters/LmdConverter.java", "diffHunk": "@@ -0,0 +1,64 @@\n+package org.opensmartgridplatform.adapter.ws.publiclighting.application.mapping.converters;\n+\n+import java.nio.charset.StandardCharsets;\n+\n+import org.apache.commons.codec.binary.Base64;\n+import org.opensmartgridplatform.adapter.ws.schema.publiclighting.adhocmanagement.LightMeasurementDevice;\n+import org.opensmartgridplatform.domain.core.valueobjects.Address;\n+import org.opensmartgridplatform.domain.core.valueobjects.GpsCoordinates;\n+\n+import ma.glasnost.orika.MappingContext;\n+import ma.glasnost.orika.converter.BidirectionalConverter;\n+import ma.glasnost.orika.metadata.Type;\n+\n+public class LmdConverter extends\n+        BidirectionalConverter<org.opensmartgridplatform.domain.core.entities.LightMeasurementDevice, LightMeasurementDevice> {\n+\n+    @Override\n+    public LightMeasurementDevice convertTo(\n+            final org.opensmartgridplatform.domain.core.entities.LightMeasurementDevice source,\n+            final Type<LightMeasurementDevice> destinationType, final MappingContext mappingContext) {\n+        final LightMeasurementDevice lmd = new LightMeasurementDevice();\n+        final String deviceIdentification = source.getDeviceIdentification();\n+        lmd.setDeviceUid(Base64.encodeBase64String(deviceIdentification.getBytes(StandardCharsets.US_ASCII)));\n+        lmd.setDeviceIdentification(deviceIdentification);\n+        final Address containerAddress = source.getContainerAddress();\n+        if (containerAddress != null) {\n+            lmd.setContainerPostalCode(containerAddress.getPostalCode());\n+            lmd.setContainerCity(containerAddress.getCity());\n+            lmd.setContainerStreet(containerAddress.getStreet());\n+            lmd.setContainerNumber(containerAddress.getNumber().toString());", "originalCommit": "861275b36a2ab9b3b812d3e07e920924f414a503", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzU3MTkyNg==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/504#discussion_r537571926", "bodyText": "Fixed", "author": "ThE-MaRaC", "createdAt": "2020-12-07T14:57:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjE0MjA1MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjE0NTY0Ng==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/504#discussion_r536145646", "bodyText": "Similar as with the container number in convertTo I suspect it might be better to handle a null value for source.getContainerNumber() instead of letting it cause a NumberFormatException(\"null\") from Integer.valueOf.", "author": "bvdzwet", "createdAt": "2020-12-04T14:39:34Z", "path": "osgp/platform/osgp-adapter-ws-publiclighting/src/main/java/org/opensmartgridplatform/adapter/ws/publiclighting/application/mapping/converters/LmdConverter.java", "diffHunk": "@@ -0,0 +1,64 @@\n+package org.opensmartgridplatform.adapter.ws.publiclighting.application.mapping.converters;\n+\n+import java.nio.charset.StandardCharsets;\n+\n+import org.apache.commons.codec.binary.Base64;\n+import org.opensmartgridplatform.adapter.ws.schema.publiclighting.adhocmanagement.LightMeasurementDevice;\n+import org.opensmartgridplatform.domain.core.valueobjects.Address;\n+import org.opensmartgridplatform.domain.core.valueobjects.GpsCoordinates;\n+\n+import ma.glasnost.orika.MappingContext;\n+import ma.glasnost.orika.converter.BidirectionalConverter;\n+import ma.glasnost.orika.metadata.Type;\n+\n+public class LmdConverter extends\n+        BidirectionalConverter<org.opensmartgridplatform.domain.core.entities.LightMeasurementDevice, LightMeasurementDevice> {\n+\n+    @Override\n+    public LightMeasurementDevice convertTo(\n+            final org.opensmartgridplatform.domain.core.entities.LightMeasurementDevice source,\n+            final Type<LightMeasurementDevice> destinationType, final MappingContext mappingContext) {\n+        final LightMeasurementDevice lmd = new LightMeasurementDevice();\n+        final String deviceIdentification = source.getDeviceIdentification();\n+        lmd.setDeviceUid(Base64.encodeBase64String(deviceIdentification.getBytes(StandardCharsets.US_ASCII)));\n+        lmd.setDeviceIdentification(deviceIdentification);\n+        final Address containerAddress = source.getContainerAddress();\n+        if (containerAddress != null) {\n+            lmd.setContainerPostalCode(containerAddress.getPostalCode());\n+            lmd.setContainerCity(containerAddress.getCity());\n+            lmd.setContainerStreet(containerAddress.getStreet());\n+            lmd.setContainerNumber(containerAddress.getNumber().toString());\n+        }\n+        final GpsCoordinates gpsCoordinates = source.getGpsCoordinates();\n+        if (gpsCoordinates != null) {\n+            lmd.setGpsLatitude(gpsCoordinates.getLatitude());\n+            lmd.setGpsLongitude(gpsCoordinates.getLongitude());\n+        }\n+        lmd.setDeviceType(source.getDeviceType());\n+        lmd.setActivated(source.isActivated());\n+        lmd.setDescription(source.getDescription());\n+        lmd.setCode(source.getCode());\n+        lmd.setColor(source.getColor());\n+        lmd.setDigitalInput(source.getDigitalInput());\n+        return lmd;\n+    }\n+\n+    @Override\n+    public org.opensmartgridplatform.domain.core.entities.LightMeasurementDevice convertFrom(\n+            final LightMeasurementDevice source,\n+            final Type<org.opensmartgridplatform.domain.core.entities.LightMeasurementDevice> destinationType,\n+            final MappingContext mappingContext) {\n+        final String deviceIdentification = source.getDeviceIdentification();\n+        final Address containerAddress = new Address(source.getContainerCity(), source.getContainerPostalCode(),\n+                source.getContainerStreet(), Integer.valueOf(source.getContainerNumber()), null, null);", "originalCommit": "861275b36a2ab9b3b812d3e07e920924f414a503", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzUzNDI4MA==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/504#discussion_r537534280", "bodyText": "Fixed", "author": "ThE-MaRaC", "createdAt": "2020-12-07T14:09:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjE0NTY0Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjE1MDAyNQ==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/504#discussion_r536150025", "bodyText": "Like with the LmdConverter, it might be prudent to look into possible null related issues in the conversions involving the container number.", "author": "bvdzwet", "createdAt": "2020-12-04T14:45:34Z", "path": "osgp/platform/osgp-adapter-ws-publiclighting/src/main/java/org/opensmartgridplatform/adapter/ws/publiclighting/application/mapping/converters/SsldConverter.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/**\n+ * Copyright 2017 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.adapter.ws.publiclighting.application.mapping.converters;\n+\n+import java.nio.charset.StandardCharsets;\n+\n+import org.apache.commons.codec.binary.Base64;\n+import org.opensmartgridplatform.adapter.ws.schema.publiclighting.adhocmanagement.Ssld;\n+import org.opensmartgridplatform.domain.core.valueobjects.Address;\n+import org.opensmartgridplatform.domain.core.valueobjects.GpsCoordinates;\n+\n+import ma.glasnost.orika.MappingContext;\n+import ma.glasnost.orika.converter.BidirectionalConverter;\n+import ma.glasnost.orika.metadata.Type;\n+\n+public class SsldConverter extends BidirectionalConverter<org.opensmartgridplatform.domain.core.entities.Ssld, Ssld> {", "originalCommit": "861275b36a2ab9b3b812d3e07e920924f414a503", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzUzNDM0MA==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/504#discussion_r537534340", "bodyText": "Fixed", "author": "ThE-MaRaC", "createdAt": "2020-12-07T14:09:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjE1MDAyNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjE2MTU4MQ==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/504#discussion_r536161581", "bodyText": "I am not sure if this is the check you would want. I could be mistaken, but I assume that the repository that the adHocManagementService delegates the finding of the devices to will return an empty page if there are no devices found, and not null.\nIf I am correct, either leaving out this null-check, or replacing or extending it with a check using page.isEmpty() might be an improvement.", "author": "bvdzwet", "createdAt": "2020-12-04T15:01:50Z", "path": "osgp/platform/osgp-adapter-ws-publiclighting/src/main/java/org/opensmartgridplatform/adapter/ws/publiclighting/endpoints/PublicLightingAdHocManagementEndpoint.java", "diffHunk": "@@ -94,14 +98,34 @@ public FindAllDevicesResponse findAllDevices(@OrganisationIdentification final S\n         final FindAllDevicesResponse response = new FindAllDevicesResponse();\n \n         try {\n+            PageSpecifier pageSpecifier;\n+            if (request.getPageSize() == null) {\n+                pageSpecifier = new PageSpecifier(PAGE_SIZE, request.getPage());\n+            } else {\n+                pageSpecifier = new PageSpecifier(request.getPageSize(), request.getPage());\n+            }\n             final Page<Device> page = this.adHocManagementService.findAllDevices(organisationIdentification,\n-                    request.getPage());\n-\n-            final DevicePage devicePage = new DevicePage();\n-            devicePage.setTotalPages(page.getTotalPages());\n-            devicePage.getDevices().addAll(this.adHocManagementMapper.mapAsList(page.getContent(),\n-                    org.opensmartgridplatform.adapter.ws.schema.publiclighting.adhocmanagement.Device.class));\n-            response.setDevicePage(devicePage);\n+                    pageSpecifier);\n+\n+            if (page != null) {", "originalCommit": "861275b36a2ab9b3b812d3e07e920924f414a503", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzUzNDQwMw==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/504#discussion_r537534403", "bodyText": "Fixed", "author": "ThE-MaRaC", "createdAt": "2020-12-07T14:09:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjE2MTU4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODE3NDMzMA==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/504#discussion_r538174330", "bodyText": "I took a better look at the schema definition (pl-adhocmanagement.xsd) this time.\nIt looks like the DevicePage is a required element of the FindAllDevicesResponse.\nI will look into it a bit further, and probably change the code myself to add some kind of empty DevicePage if no devices are returned by the adHocManagementService.\nPlease let me know if you disagree, then we could talk about this a bit more,", "author": "bvdzwet", "createdAt": "2020-12-08T09:27:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjE2MTU4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODQ5ODE4OQ==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/504#discussion_r538498189", "bodyText": "Feel free to update it.", "author": "ThE-MaRaC", "createdAt": "2020-12-08T15:27:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjE2MTU4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTEzNzE3OA==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/504#discussion_r539137178", "bodyText": "I updated the license headers and made a few changes to the code and XSD in case there are no devices.\nThe request without the devices turned out to be invalid with regards to the XSD as I suspected.\nSince I don't think I can (or should?) push to your branch, I branched of the tip of your changes and created pull request #534.\nI asked someone else to take a look at my changes, and when they are found OK, your additions will be merged with the other pull request.", "author": "bvdzwet", "createdAt": "2020-12-09T09:17:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjE2MTU4MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIwOTczNw==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/504#discussion_r536209737", "bodyText": "I have no objection to giving the caller some control over the page size, by using the value that is set in the request, but I think there should be some upper-bound applied to prevent issues caused by huge responses (and the time and resources they could take) if some very high value is given.\nIn the code base you can find PagingSettings (from shared) that works with a default and maximum page size based on configurable properties (paging.maximum.pagesize, paging.default.pagesize).\nRe-using known properties looks like the nicest way to handle the upper-bound. Since the page size was fixed here before, I think it is acceptable for now if you would rather go for the simpler hard-coded maximum page size. But I do think it should not be taken as-is from the request when that could lead to huge values.", "author": "bvdzwet", "createdAt": "2020-12-04T16:10:27Z", "path": "osgp/platform/osgp-adapter-ws-publiclighting/src/main/java/org/opensmartgridplatform/adapter/ws/publiclighting/endpoints/PublicLightingAdHocManagementEndpoint.java", "diffHunk": "@@ -94,14 +98,34 @@ public FindAllDevicesResponse findAllDevices(@OrganisationIdentification final S\n         final FindAllDevicesResponse response = new FindAllDevicesResponse();\n \n         try {\n+            PageSpecifier pageSpecifier;\n+            if (request.getPageSize() == null) {\n+                pageSpecifier = new PageSpecifier(PAGE_SIZE, request.getPage());\n+            } else {\n+                pageSpecifier = new PageSpecifier(request.getPageSize(), request.getPage());", "originalCommit": "861275b36a2ab9b3b812d3e07e920924f414a503", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzUzNDQ1Nw==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/504#discussion_r537534457", "bodyText": "Fixed", "author": "ThE-MaRaC", "createdAt": "2020-12-07T14:09:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIwOTczNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIxNTAxMw==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/504#discussion_r536215013", "bodyText": "If you'd use constants for these values, it would be easier to see that these are (and need to be) the same as with the corresponding setters in coreLmd(). (Something similar seems to apply to some of the boolean values being set.)", "author": "bvdzwet", "createdAt": "2020-12-04T16:18:04Z", "path": "osgp/platform/osgp-adapter-ws-publiclighting/src/test/java/org/opensmartgridplatform/adapter/ws/publiclighting/application/mapping/converters/DeviceMappingTest.java", "diffHunk": "@@ -29,67 +29,98 @@\n     private static final AdHocManagementMapper mapper = new AdHocManagementMapper();\n \n     @Test\n-    void testConvertToCore() {\n-        final Device device = mapper.map(this.adhocManagementDevice(), Device.class);\n+    void testConvertSsldToCore() {\n+        final Ssld ssld = mapper.map(this.adhocManagementSsld(), Ssld.class);\n \n-        assertThat(device).usingRecursiveComparison()\n+        assertThat(ssld).usingRecursiveComparison()\n                 .ignoringFields(\"creationTime\", \"modificationTime\")\n-                .isEqualTo(this.coreDevice());\n+                .isEqualTo(this.coreSsld());\n     }\n \n     @Test\n-    void testConvertToAdHocMananagement() {\n-        final org.opensmartgridplatform.adapter.ws.schema.publiclighting.adhocmanagement.Device device = mapper.map(\n-                this.coreDevice(),\n-                org.opensmartgridplatform.adapter.ws.schema.publiclighting.adhocmanagement.Device.class);\n-\n-        assertThat(device).usingRecursiveComparison()\n-                .ignoringFields(\"deviceUid\")\n-                .isEqualTo(this.adhocManagementDevice());\n+    void testConvertLmdToCore() {\n+        final LightMeasurementDevice lmd = mapper.map(this.adhocManagementLmd(), LightMeasurementDevice.class);\n+\n+        assertThat(lmd).usingRecursiveComparison()\n+                .ignoringFields(\"creationTime\", \"modificationTime\")\n+                .isEqualTo(this.coreLmd());\n     }\n \n     @Test\n     void testConvertSsldToAdHocMananagement() {\n-        final org.opensmartgridplatform.adapter.ws.schema.publiclighting.adhocmanagement.Device device = mapper.map(\n-                this.ssld(), org.opensmartgridplatform.adapter.ws.schema.publiclighting.adhocmanagement.Device.class);\n+        final org.opensmartgridplatform.adapter.ws.schema.publiclighting.adhocmanagement.Ssld device = mapper.map(\n+                this.coreSsld(), org.opensmartgridplatform.adapter.ws.schema.publiclighting.adhocmanagement.Ssld.class);\n \n-        assertThat(device).usingRecursiveComparison()\n-                .ignoringFields(\"deviceUid\")\n-                .isEqualTo(this.adhocManagementDevice());\n+        assertThat(device).usingRecursiveComparison().ignoringFields(\"deviceUid\").isEqualTo(this.adhocManagementSsld());\n     }\n \n-    private org.opensmartgridplatform.adapter.ws.schema.publiclighting.adhocmanagement.Device adhocManagementDevice() {\n-        final org.opensmartgridplatform.adapter.ws.schema.publiclighting.adhocmanagement.Device device = new org.opensmartgridplatform.adapter.ws.schema.publiclighting.adhocmanagement.Device();\n-        device.setDeviceIdentification(DEVICE_IDENTIFICATION);\n-        device.setContainerPostalCode(CONTAINER_POSTAL_CODE);\n-        device.setContainerCity(CONTAINER_CITY);\n-        device.setContainerStreet(CONTAINER_STREET);\n-        device.setContainerNumber(CONTAINER_NUMBER.toString());\n-        device.setGpsLatitude(GPS_LATITUDE);\n-        device.setGpsLongitude(GPS_LONGITUDE);\n-        device.setDeviceType(DEVICE_TYPE);\n-        device.setActivated(true);\n-\n-        return device;\n-    }\n+    @Test\n+    void testConvertLmdToAdHocMananagement() {\n+        final org.opensmartgridplatform.adapter.ws.schema.publiclighting.adhocmanagement.LightMeasurementDevice lmd = mapper\n+                .map(this.coreLmd(),\n+                        org.opensmartgridplatform.adapter.ws.schema.publiclighting.adhocmanagement.LightMeasurementDevice.class);\n \n-    private Device coreDevice() {\n-        final Device device = new Device(DEVICE_IDENTIFICATION, null, this.address(), this.gpsCoordinates(), null);\n-        device.updateRegistrationData(null, DEVICE_TYPE);\n-        return device;\n+        assertThat(lmd).usingRecursiveComparison().ignoringFields(\"deviceUid\").isEqualTo(this.adhocManagementLmd());\n     }\n \n-    private GpsCoordinates gpsCoordinates() {\n-        return new GpsCoordinates(GPS_LATITUDE, GPS_LONGITUDE);\n+    private org.opensmartgridplatform.adapter.ws.schema.publiclighting.adhocmanagement.Ssld adhocManagementSsld() {\n+        final org.opensmartgridplatform.adapter.ws.schema.publiclighting.adhocmanagement.Ssld ssld = new org.opensmartgridplatform.adapter.ws.schema.publiclighting.adhocmanagement.Ssld();\n+        ssld.setDeviceIdentification(DEVICE_IDENTIFICATION);\n+        ssld.setContainerPostalCode(CONTAINER_POSTAL_CODE);\n+        ssld.setContainerCity(CONTAINER_CITY);\n+        ssld.setContainerStreet(CONTAINER_STREET);\n+        ssld.setContainerNumber(CONTAINER_NUMBER.toString());\n+        ssld.setGpsLatitude(GPS_LATITUDE);\n+        ssld.setGpsLongitude(GPS_LONGITUDE);\n+        ssld.setDeviceType(DEVICE_TYPE);\n+        ssld.setActivated(true);\n+        ssld.setHasSchedule(false);\n+        ssld.setPublicKeyPresent(false);\n+        return ssld;\n     }\n \n-    private Address address() {\n-        return new Address(CONTAINER_CITY, CONTAINER_POSTAL_CODE, CONTAINER_STREET, CONTAINER_NUMBER, null, null);\n+    private org.opensmartgridplatform.adapter.ws.schema.publiclighting.adhocmanagement.LightMeasurementDevice adhocManagementLmd() {\n+        final org.opensmartgridplatform.adapter.ws.schema.publiclighting.adhocmanagement.LightMeasurementDevice lmd = new org.opensmartgridplatform.adapter.ws.schema.publiclighting.adhocmanagement.LightMeasurementDevice();\n+        lmd.setDeviceIdentification(DEVICE_IDENTIFICATION);\n+        lmd.setContainerPostalCode(CONTAINER_POSTAL_CODE);\n+        lmd.setContainerCity(CONTAINER_CITY);\n+        lmd.setContainerStreet(CONTAINER_STREET);\n+        lmd.setContainerNumber(CONTAINER_NUMBER.toString());\n+        lmd.setGpsLatitude(GPS_LATITUDE);\n+        lmd.setGpsLongitude(GPS_LONGITUDE);\n+        lmd.setDeviceType(DEVICE_TYPE);\n+        lmd.setActivated(true);\n+        lmd.setDescription(\"LmdDesciption\");\n+        lmd.setCode(\"LmdCode\");\n+        lmd.setColor(\"LmdColor\");\n+        lmd.setDigitalInput((short) 1);", "originalCommit": "861275b36a2ab9b3b812d3e07e920924f414a503", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzUzNDUyNw==", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/504#discussion_r537534527", "bodyText": "Fixed", "author": "ThE-MaRaC", "createdAt": "2020-12-07T14:09:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIxNTAxMw=="}], "type": "inlineReview"}, {"oid": "1c9f4f7a25cf2a818cdb6b6c88901f8e4a849e3e", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/1c9f4f7a25cf2a818cdb6b6c88901f8e4a849e3e", "message": "fix all review comments", "committedDate": "2020-12-07T14:06:53Z", "type": "commit"}, {"oid": "4ec688e4dc4e096f2e75bd29cdec2e7dc17f42db", "url": "https://github.com/OSGP/open-smart-grid-platform/commit/4ec688e4dc4e096f2e75bd29cdec2e7dc17f42db", "message": "fix SonarQube", "committedDate": "2020-12-07T15:05:03Z", "type": "commit"}]}