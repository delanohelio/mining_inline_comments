{"pr_number": 3021, "pr_title": "Add image compatibility checks", "pr_createdAt": "2020-07-26T11:06:56Z", "pr_url": "https://github.com/testcontainers/testcontainers-java/pull/3021", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDUxMzEyNw==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r460513127", "bodyText": "Might reinstate, but Lombok seemed to be choking and was getting in the way.", "author": "rnorth", "createdAt": "2020-07-26T11:08:51Z", "path": "core/src/main/java/org/testcontainers/utility/DockerImageName.java", "diffHunk": "@@ -2,28 +2,29 @@\n \n \n import com.google.common.net.HostAndPort;\n-import lombok.AccessLevel;\n-import lombok.AllArgsConstructor;\n import lombok.Data;\n import lombok.EqualsAndHashCode;\n import org.jetbrains.annotations.NotNull;\n+import org.jetbrains.annotations.Nullable;\n \n import java.util.regex.Pattern;\n \n @EqualsAndHashCode(exclude = \"rawName\")\n-@AllArgsConstructor(access = AccessLevel.PRIVATE)", "originalCommit": "eec4ace8cc5965986ed705fc032288eef6243c42", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzcyNzQ2Mg==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r473727462", "bodyText": "Just curious: what was(is ?) the problem?", "author": "bsideup", "createdAt": "2020-08-20T07:56:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDUxMzEyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzEyNjUzMg==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r477126532", "bodyText": "Not sure I remember the specifics, but I think it was the IDE not seeing the generated constructor (doubtless plugin related)", "author": "rnorth", "createdAt": "2020-08-26T08:28:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDUxMzEyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzEyNzIzNg==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r477127236", "bodyText": "ah, okay, seems to be https://youtrack.jetbrains.com/issue/IDEA-248146 then (fixed in the latest IDEA (rc?))", "author": "bsideup", "createdAt": "2020-08-26T08:29:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDUxMzEyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODE5ODEzNg==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r478198136", "bodyText": "Yep, it's working now, and I've restored @AllArgsConstructor.", "author": "rnorth", "createdAt": "2020-08-27T06:58:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDUxMzEyNw=="}], "type": "inlineReview"}, {"oid": "484f3cd3bf33f5cb20cc7e3e96eba7e589afe62d", "url": "https://github.com/testcontainers/testcontainers-java/commit/484f3cd3bf33f5cb20cc7e3e96eba7e589afe62d", "message": "Implement image compatibility checks\nSo that compatibility assurances can be made in code rather than just being assumed.", "committedDate": "2020-08-14T14:37:25Z", "type": "commit"}, {"oid": "484f3cd3bf33f5cb20cc7e3e96eba7e589afe62d", "url": "https://github.com/testcontainers/testcontainers-java/commit/484f3cd3bf33f5cb20cc7e3e96eba7e589afe62d", "message": "Implement image compatibility checks\nSo that compatibility assurances can be made in code rather than just being assumed.", "committedDate": "2020-08-14T14:37:25Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDY3NjA2Nw==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r470676067", "bodyText": "A TODO for a point in the near future. This has a lot to do with mandatory bring-your-own-image in R2DBC and JDBC URLs as discussed in Slack (@bsideup)", "author": "rnorth", "createdAt": "2020-08-14T14:55:24Z", "path": "modules/mssqlserver/src/main/java/org/testcontainers/containers/MSSQLR2DBCDatabaseContainerProvider.java", "diffHunk": "@@ -21,6 +21,7 @@ public boolean supports(ConnectionFactoryOptions options) {\n \n     @Override\n     public R2DBCDatabaseContainer createContainer(ConnectionFactoryOptions options) {\n+        // TODO work out how best to do this if these constants become private", "originalCommit": "484f3cd3bf33f5cb20cc7e3e96eba7e589afe62d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDgyNTA2Mw==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r470825063", "bodyText": "I think I missed the Slack discussion, but just being pragmatic and make the constants packacke-private?", "author": "kiview", "createdAt": "2020-08-14T19:25:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDY3NjA2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTAyNDk2MA==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r471024960", "bodyText": "Yeah, that's probably going to be the answer. This isn't something to worry about too much for now, anyway.", "author": "rnorth", "createdAt": "2020-08-15T19:10:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDY3NjA2Nw=="}], "type": "inlineReview"}, {"oid": "49c2360fd8bd145fdb5e684467b2926171a539bf", "url": "https://github.com/testcontainers/testcontainers-java/commit/49c2360fd8bd145fdb5e684467b2926171a539bf", "message": "Revert default image name selection in Kafka/Pulsar containers", "committedDate": "2020-08-14T15:06:01Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDgxMDE0OA==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r470810148", "bodyText": "Do we really un-deprecate the String constructors?", "author": "kiview", "createdAt": "2020-08-14T18:51:14Z", "path": "modules/mongodb/src/main/java/org/testcontainers/containers/MongoDBContainer.java", "diffHunk": "@@ -16,30 +16,31 @@\n  */\n @Slf4j\n public class MongoDBContainer extends GenericContainer<MongoDBContainer> {\n+\n+    private static final DockerImageName DEFAULT_IMAGE_NAME = DockerImageName.parse(\"mongo\");\n+    private static final String DEFAULT_TAG = \"4.0.10\";\n     private static final int CONTAINER_EXIT_CODE_OK = 0;\n     private static final int MONGODB_INTERNAL_PORT = 27017;\n     private static final int AWAIT_INIT_REPLICA_SET_ATTEMPTS = 60;\n-    private static final String MONGODB_VERSION_DEFAULT = \"4.0.10\";\n     private static final String MONGODB_DATABASE_NAME_DEFAULT = \"test\";\n \n     /**\n      * @deprecated use {@link MongoDBContainer(DockerImageName)} instead\n      */\n     @Deprecated\n     public MongoDBContainer() {\n-        this(\"mongo:\" + MONGODB_VERSION_DEFAULT);\n+        this(DEFAULT_IMAGE_NAME.withTag(DEFAULT_TAG));\n     }\n \n-    /**\n-     * @deprecated use {@link MongoDBContainer(DockerImageName)} instead\n-     */\n-    @Deprecated", "originalCommit": "49c2360fd8bd145fdb5e684467b2926171a539bf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTAwMTI3NA==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r471001274", "bodyText": "I missed this - will look for others.", "author": "rnorth", "createdAt": "2020-08-15T15:26:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDgxMDE0OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDgxMTM3Ng==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r470811376", "bodyText": "If we would return DockerImageName, we could use this method in super constructor arguments.", "author": "kiview", "createdAt": "2020-08-14T18:53:50Z", "path": "core/src/main/java/org/testcontainers/utility/DockerImageName.java", "diffHunk": "@@ -159,63 +176,86 @@ public String getRegistry() {\n         return registry;\n     }\n \n+    /**\n+     * @param newTag version tag for the copy to use\n+     * @return an immutable copy of this {@link DockerImageName} with the new version tag\n+     */\n     public DockerImageName withTag(final String newTag) {\n-        return new DockerImageName(rawName, registry, repo, new TagVersioning(newTag));\n+        return new DockerImageName(rawName, registry, repo, new Versioning.TagVersioning(newTag), compatibleSubstituteFor);\n     }\n \n-    private interface Versioning {\n-        boolean isValid();\n-\n-        String getSeparator();\n+    /**\n+     * Declare that this {@link DockerImageName} is a compatible substitute for another image - i.e. that this image\n+     * behaves as the other does, and is compatible with Testcontainers' assumptions about the other image.\n+     *\n+     * @param otherImageName the image name of the other image\n+     * @return an immutable copy of this {@link DockerImageName} with the compatibility declaration attached.\n+     */\n+    public DockerImageName asCompatibleSubstituteFor(String otherImageName) {\n+        return asCompatibleSubstituteFor(DockerImageName.parse(otherImageName));\n     }\n \n-    @Data\n-    private static class TagVersioning implements Versioning {\n-        public static final String TAG_REGEX = \"[\\\\w][\\\\w\\\\.\\\\-]{0,127}\";\n-        private final String tag;\n-\n-        TagVersioning(String tag) {\n-            this.tag = tag;\n-        }\n-\n-        @Override\n-        public boolean isValid() {\n-            return tag.matches(TAG_REGEX);\n-        }\n-\n-        @Override\n-        public String getSeparator() {\n-            return \":\";\n-        }\n-\n-        @Override\n-        public String toString() {\n-            return tag;\n-        }\n+    /**\n+     * Declare that this {@link DockerImageName} is a compatible substitute for another image - i.e. that this image\n+     * behaves as the other does, and is compatible with Testcontainers' assumptions about the other image.\n+     *\n+     * @param otherImageName the image name of the other image\n+     * @return an immutable copy of this {@link DockerImageName} with the compatibility declaration attached.\n+     */\n+    public DockerImageName asCompatibleSubstituteFor(DockerImageName otherImageName) {\n+        return new DockerImageName(rawName, registry, repo, versioning, otherImageName);\n     }\n \n-    @Data\n-    private static class Sha256Versioning implements Versioning {\n-        public static final String HASH_REGEX = \"[0-9a-fA-F]{32,}\";\n-        private final String hash;\n-\n-        Sha256Versioning(String hash) {\n-            this.hash = hash;\n+    /**\n+     * Test whether this {@link DockerImageName} has declared compatibility with another image (set using\n+     * {@link DockerImageName#asCompatibleSubstituteFor(String)} or\n+     * {@link DockerImageName#asCompatibleSubstituteFor(DockerImageName)}.\n+     * <p>\n+     * If a version tag part is present in the <code>other</code> image name, the tags must exactly match, unless it\n+     * is 'latest'. If a version part is not present in the <code>other</code> image name, the tag contents are ignored.\n+     *\n+     * @param other the other image that we are trying to test compatibility with\n+     * @return whether this image has declared compatibility.\n+     */\n+    public boolean isCompatibleWith(DockerImageName other) {\n+        // is this image already the same?\n+        final boolean thisRegistrySame = other.registry.equals(this.registry);\n+        final boolean thisRepoSame = other.repo.equals(this.repo);\n+        final boolean thisVersioningNotSpecifiedOrSame = other.versioning == null ||\n+            other.versioning.equals(Versioning.TagVersioning.LATEST) ||\n+            other.versioning.equals(this.versioning);\n+\n+        if (thisRegistrySame && thisRepoSame && thisVersioningNotSpecifiedOrSame) {\n+            return true;\n         }\n \n-        @Override\n-        public boolean isValid() {\n-            return hash.matches(HASH_REGEX);\n+        if (this.compatibleSubstituteFor == null) {\n+            return false;\n         }\n \n-        @Override\n-        public String getSeparator() {\n-            return \"@\";\n-        }\n+        return this.compatibleSubstituteFor.isCompatibleWith(other);\n+    }\n \n-        @Override\n-        public String toString() {\n-            return \"sha256:\" + hash;\n+    /**\n+     * Behaves as {@link DockerImageName#isCompatibleWith(DockerImageName)} but throws an exception rather than\n+     * returning false if a mismatch is detected.\n+     *\n+     * @param other the other image that we are trying to check compatibility with\n+     * @throws IllegalStateException if {@link DockerImageName#isCompatibleWith(DockerImageName)} returns false\n+     */\n+    public void assertCompatibleWith(DockerImageName other) {", "originalCommit": "49c2360fd8bd145fdb5e684467b2926171a539bf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTAwMzc2Nw==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r471003767", "bodyText": "I think I'd push back against this - it feels a bit strange to have a value be passed through a method that does assertion. I think I like the assertion being a distinct line in each constructor (after the call to super), as it feels more visible.", "author": "rnorth", "createdAt": "2020-08-15T15:34:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDgxMTM3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzg1ODc0MA==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r473858740", "bodyText": "The JDK likes to object this argument of feeling strange \ud83d\ude42\nhttps://docs.oracle.com/javase/8/docs/api/java/util/Objects.html#requireNonNull-T-\nBut this is not a hill I need to die on. I like it in super constructor though, because this means it gets evaluated before the super constructor is called.", "author": "kiview", "createdAt": "2020-08-20T10:25:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDgxMTM3Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDgxMTc3Mw==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r470811773", "bodyText": "If assertCompatibleWith would return DockerImageName, we coould use it as argument for the super constructor.", "author": "kiview", "createdAt": "2020-08-14T18:54:43Z", "path": "modules/mongodb/src/main/java/org/testcontainers/containers/MongoDBContainer.java", "diffHunk": "@@ -16,30 +16,31 @@\n  */\n @Slf4j\n public class MongoDBContainer extends GenericContainer<MongoDBContainer> {\n+\n+    private static final DockerImageName DEFAULT_IMAGE_NAME = DockerImageName.parse(\"mongo\");\n+    private static final String DEFAULT_TAG = \"4.0.10\";\n     private static final int CONTAINER_EXIT_CODE_OK = 0;\n     private static final int MONGODB_INTERNAL_PORT = 27017;\n     private static final int AWAIT_INIT_REPLICA_SET_ATTEMPTS = 60;\n-    private static final String MONGODB_VERSION_DEFAULT = \"4.0.10\";\n     private static final String MONGODB_DATABASE_NAME_DEFAULT = \"test\";\n \n     /**\n      * @deprecated use {@link MongoDBContainer(DockerImageName)} instead\n      */\n     @Deprecated\n     public MongoDBContainer() {\n-        this(\"mongo:\" + MONGODB_VERSION_DEFAULT);\n+        this(DEFAULT_IMAGE_NAME.withTag(DEFAULT_TAG));\n     }\n \n-    /**\n-     * @deprecated use {@link MongoDBContainer(DockerImageName)} instead\n-     */\n-    @Deprecated\n     public MongoDBContainer(@NonNull final String dockerImageName) {\n         this(DockerImageName.parse(dockerImageName));\n     }\n \n     public MongoDBContainer(final DockerImageName dockerImageName) {\n         super(dockerImageName);", "originalCommit": "49c2360fd8bd145fdb5e684467b2926171a539bf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTAwMzc4MA==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r471003780", "bodyText": "As above.", "author": "rnorth", "createdAt": "2020-08-15T15:34:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDgxMTc3Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDgxMzU3Ng==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r470813576", "bodyText": "By which logic are the deprecations of constructors removed now? Seems kind of inconsistent between classes.", "author": "kiview", "createdAt": "2020-08-14T18:58:56Z", "path": "modules/cassandra/src/main/java/org/testcontainers/containers/CassandraContainer.java", "diffHunk": "@@ -40,21 +43,19 @@\n     /**\n      * @deprecated use {@link #CassandraContainer(DockerImageName)} instead\n      */\n-    @Deprecated\n     public CassandraContainer() {\n-        this(\"cassandra:3.11.2\");\n+        this(DEFAULT_IMAGE_NAME.withTag(DEFAULT_TAG));\n     }\n \n-    /**\n-     * @deprecated use {@link #CassandraContainer(DockerImageName)} instead\n-     */\n-    @Deprecated", "originalCommit": "49c2360fd8bd145fdb5e684467b2926171a539bf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTAwMzkwMQ==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r471003901", "bodyText": "We were missing the deprecated annotation on CassandraContainer's no-arg constructor \ud83e\udd26\nThe logic should be:\n\nNo-arg constructors: always deprecated\nString, image name constructors: not deprecated\nString, version constructors: always deprecated", "author": "rnorth", "createdAt": "2020-08-15T15:36:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDgxMzU3Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDgxOTc5Mg==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r470819792", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    this(TestcontainersConfiguration.getInstance().getPulsarDockerImageName().withTag(confluentPlatformVersion));\n          \n          \n            \n                    this(TestcontainersConfiguration.getInstance().getKafkaDockerImageName().withTag(confluentPlatformVersion));\n          \n      \n    \n    \n  \n\nIs this constructor missing a test therefore?", "author": "kiview", "createdAt": "2020-08-14T19:12:58Z", "path": "modules/kafka/src/main/java/org/testcontainers/containers/KafkaContainer.java", "diffHunk": "@@ -35,20 +38,22 @@\n      */\n     @Deprecated\n     public KafkaContainer() {\n-        this(\"5.2.1\");\n+        this(TestcontainersConfiguration.getInstance().getKafkaDockerImageName().withTag(DEFAULT_TAG));\n     }\n \n     /**\n      * @deprecated use {@link KafkaContainer(DockerImageName)} instead\n      */\n     @Deprecated\n     public KafkaContainer(String confluentPlatformVersion) {\n-        this(DockerImageName.parse(TestcontainersConfiguration.getInstance().getKafkaImage() + \":\" + confluentPlatformVersion));\n+        this(TestcontainersConfiguration.getInstance().getPulsarDockerImageName().withTag(confluentPlatformVersion));", "originalCommit": "49c2360fd8bd145fdb5e684467b2926171a539bf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTAwNDAwNA==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r471004004", "bodyText": "Good spot - silly c&p error \ud83d\ude2c\nYes, this is missing test coverage. Will add.", "author": "rnorth", "createdAt": "2020-08-15T15:37:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDgxOTc5Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDgyNzc1OA==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r470827758", "bodyText": "I think we can't really remove this logic completely. Adding the -enterprise suffix to custom image is a bit weird, isn't it?", "author": "kiview", "createdAt": "2020-08-14T19:31:40Z", "path": "modules/neo4j/src/main/java/org/testcontainers/containers/Neo4jContainer.java", "diffHunk": "@@ -149,13 +148,7 @@ public String getHttpsUrl() {\n      * @return This container.\n      */\n     public S withEnterpriseEdition() {\n-\n-        if (!standardImage) {", "originalCommit": "49c2360fd8bd145fdb5e684467b2926171a539bf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjA5ODE2OA==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r492098168", "bodyText": "Yeah, I second the concern.\nIMO we should keep it as it was (override the image when withEnterpriseEdition() is called, and figure out the better strategy later", "author": "bsideup", "createdAt": "2020-09-21T14:35:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDgyNzc1OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzAwMzQwOA==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r493003408", "bodyText": "OK \ud83d\udc4d", "author": "rnorth", "createdAt": "2020-09-22T20:09:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDgyNzc1OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDEzMDIxMg==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r494130212", "bodyText": "Just pushed some commits to restore the previous behaviour. I think in the future we should indeed rethink how this works - if we're asking people to specify an image in the constructor it's silly to have the image being overriden here.", "author": "rnorth", "createdAt": "2020-09-24T08:24:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDgyNzc1OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDgyNzk5OA==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r470827998", "bodyText": "In the current version of the code, standardImage is never read. But we should think what to do with withEnterpriseEdition() method.", "author": "kiview", "createdAt": "2020-08-14T19:32:14Z", "path": "modules/neo4j/src/main/java/org/testcontainers/containers/Neo4jContainer.java", "diffHunk": "@@ -59,31 +57,36 @@\n \n     private String adminPassword = DEFAULT_ADMIN_PASSWORD;\n \n-    private boolean standardImage = false;\n+    private boolean standardImage = true;", "originalCommit": "49c2360fd8bd145fdb5e684467b2926171a539bf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDgyOTM3OA==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r470829378", "bodyText": "This class was not really touched I suppose?", "author": "kiview", "createdAt": "2020-08-14T19:35:42Z", "path": "modules/oracle-xe/src/main/java/org/testcontainers/containers/OracleContainer.java", "diffHunk": "@@ -41,10 +41,6 @@ public OracleContainer() {\n         this(resolveImageName());\n     }\n \n-    /**\n-     * @deprecated use {@link OracleContainer(DockerImageName)} instead\n-     */\n-    @Deprecated", "originalCommit": "49c2360fd8bd145fdb5e684467b2926171a539bf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDgzMjQ2Nw==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r470832467", "bodyText": "Shouldn't we move this code to after getting the capabilities?", "author": "kiview", "createdAt": "2020-08-14T19:43:07Z", "path": "modules/selenium/src/main/java/org/testcontainers/containers/BrowserWebDriverContainer.java", "diffHunk": "@@ -182,8 +180,12 @@ protected void configure() {\n                     .withVncPort(VNC_PORT);\n         }\n \n-        if (!customImageNameIsSet) {\n-            super.setDockerImageName(getImageForCapabilities(capabilities, seleniumVersion));\n+        DockerImageName standardImageForCapabilities = getImageForCapabilities(capabilities, seleniumVersion);", "originalCommit": "49c2360fd8bd145fdb5e684467b2926171a539bf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDgzOTE4NQ==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r470839185", "bodyText": "Can we also add a comment that we just use this function to throw the exception in case of invalid input? I was wondering at first, why the return value is not used.", "author": "kiview", "createdAt": "2020-08-14T19:59:27Z", "path": "core/src/main/java/org/testcontainers/utility/DockerImageName.java", "diffHunk": "@@ -146,11 +162,12 @@ public String toString() {\n      * @throws IllegalArgumentException if not valid\n      */\n     public void assertValid() {\n+        //noinspection UnstableApiUsage", "originalCommit": "49c2360fd8bd145fdb5e684467b2926171a539bf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDg0MjI2Nw==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r470842267", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        throw new IllegalStateException(\n          \n          \n            \n                        throw new IllegalArgumentException(\n          \n      \n    \n    \n  \n\nWDYT?", "author": "kiview", "createdAt": "2020-08-14T20:07:16Z", "path": "core/src/main/java/org/testcontainers/utility/DockerImageName.java", "diffHunk": "@@ -159,63 +176,86 @@ public String getRegistry() {\n         return registry;\n     }\n \n+    /**\n+     * @param newTag version tag for the copy to use\n+     * @return an immutable copy of this {@link DockerImageName} with the new version tag\n+     */\n     public DockerImageName withTag(final String newTag) {\n-        return new DockerImageName(rawName, registry, repo, new TagVersioning(newTag));\n+        return new DockerImageName(rawName, registry, repo, new Versioning.TagVersioning(newTag), compatibleSubstituteFor);\n     }\n \n-    private interface Versioning {\n-        boolean isValid();\n-\n-        String getSeparator();\n+    /**\n+     * Declare that this {@link DockerImageName} is a compatible substitute for another image - i.e. that this image\n+     * behaves as the other does, and is compatible with Testcontainers' assumptions about the other image.\n+     *\n+     * @param otherImageName the image name of the other image\n+     * @return an immutable copy of this {@link DockerImageName} with the compatibility declaration attached.\n+     */\n+    public DockerImageName asCompatibleSubstituteFor(String otherImageName) {\n+        return asCompatibleSubstituteFor(DockerImageName.parse(otherImageName));\n     }\n \n-    @Data\n-    private static class TagVersioning implements Versioning {\n-        public static final String TAG_REGEX = \"[\\\\w][\\\\w\\\\.\\\\-]{0,127}\";\n-        private final String tag;\n-\n-        TagVersioning(String tag) {\n-            this.tag = tag;\n-        }\n-\n-        @Override\n-        public boolean isValid() {\n-            return tag.matches(TAG_REGEX);\n-        }\n-\n-        @Override\n-        public String getSeparator() {\n-            return \":\";\n-        }\n-\n-        @Override\n-        public String toString() {\n-            return tag;\n-        }\n+    /**\n+     * Declare that this {@link DockerImageName} is a compatible substitute for another image - i.e. that this image\n+     * behaves as the other does, and is compatible with Testcontainers' assumptions about the other image.\n+     *\n+     * @param otherImageName the image name of the other image\n+     * @return an immutable copy of this {@link DockerImageName} with the compatibility declaration attached.\n+     */\n+    public DockerImageName asCompatibleSubstituteFor(DockerImageName otherImageName) {\n+        return new DockerImageName(rawName, registry, repo, versioning, otherImageName);\n     }\n \n-    @Data\n-    private static class Sha256Versioning implements Versioning {\n-        public static final String HASH_REGEX = \"[0-9a-fA-F]{32,}\";\n-        private final String hash;\n-\n-        Sha256Versioning(String hash) {\n-            this.hash = hash;\n+    /**\n+     * Test whether this {@link DockerImageName} has declared compatibility with another image (set using\n+     * {@link DockerImageName#asCompatibleSubstituteFor(String)} or\n+     * {@link DockerImageName#asCompatibleSubstituteFor(DockerImageName)}.\n+     * <p>\n+     * If a version tag part is present in the <code>other</code> image name, the tags must exactly match, unless it\n+     * is 'latest'. If a version part is not present in the <code>other</code> image name, the tag contents are ignored.\n+     *\n+     * @param other the other image that we are trying to test compatibility with\n+     * @return whether this image has declared compatibility.\n+     */\n+    public boolean isCompatibleWith(DockerImageName other) {\n+        // is this image already the same?\n+        final boolean thisRegistrySame = other.registry.equals(this.registry);\n+        final boolean thisRepoSame = other.repo.equals(this.repo);\n+        final boolean thisVersioningNotSpecifiedOrSame = other.versioning == null ||\n+            other.versioning.equals(Versioning.TagVersioning.LATEST) ||\n+            other.versioning.equals(this.versioning);\n+\n+        if (thisRegistrySame && thisRepoSame && thisVersioningNotSpecifiedOrSame) {\n+            return true;\n         }\n \n-        @Override\n-        public boolean isValid() {\n-            return hash.matches(HASH_REGEX);\n+        if (this.compatibleSubstituteFor == null) {\n+            return false;\n         }\n \n-        @Override\n-        public String getSeparator() {\n-            return \"@\";\n-        }\n+        return this.compatibleSubstituteFor.isCompatibleWith(other);\n+    }\n \n-        @Override\n-        public String toString() {\n-            return \"sha256:\" + hash;\n+    /**\n+     * Behaves as {@link DockerImageName#isCompatibleWith(DockerImageName)} but throws an exception rather than\n+     * returning false if a mismatch is detected.\n+     *\n+     * @param other the other image that we are trying to check compatibility with\n+     * @throws IllegalStateException if {@link DockerImageName#isCompatibleWith(DockerImageName)} returns false\n+     */\n+    public void assertCompatibleWith(DockerImageName other) {\n+        if (!this.isCompatibleWith(other)) {\n+            throw new IllegalStateException(", "originalCommit": "49c2360fd8bd145fdb5e684467b2926171a539bf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc3OTczNg==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r473779736", "bodyText": "Since it is assertCompatibleWith, I think IllegalArgumentException isn't fitting here, since the whole point is to assert the argument", "author": "bsideup", "createdAt": "2020-08-20T08:51:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDg0MjI2Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDg0NDE3Mg==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r470844172", "bodyText": "@Value instead of @Data? Or @EqualsAndHashcode? Or we don't use lombok in the first plance, since we already define toString() and the constructor.", "author": "kiview", "createdAt": "2020-08-14T20:11:53Z", "path": "core/src/main/java/org/testcontainers/utility/Versioning.java", "diffHunk": "@@ -0,0 +1,64 @@\n+package org.testcontainers.utility;\n+\n+import lombok.Data;\n+\n+/**\n+ * Represents mechanisms for versioning docker images.\n+ */\n+interface Versioning {\n+    boolean isValid();\n+\n+    String getSeparator();\n+\n+    @Data", "originalCommit": "49c2360fd8bd145fdb5e684467b2926171a539bf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTAwNDU4NA==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r471004584", "bodyText": "@EqualsAndHashCode would do the trick - good suggestion.", "author": "rnorth", "createdAt": "2020-08-15T15:44:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDg0NDE3Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDg0NTMyNg==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r470845326", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertTrue(\"foo:4.5.6 ~= foo:latest\", subject.isCompatibleWith(DockerImageName.parse(\"foo:1.2.3\").withTag(\"latest\")));\n          \n          \n            \n                    assertTrue(\"foo:4.5.6 ~= foo:latest\", subject.isCompatibleWith(DockerImageName.parse(\"foo\")));\n          \n      \n    \n    \n  \n\nSince latest is default?", "author": "kiview", "createdAt": "2020-08-14T20:14:47Z", "path": "core/src/test/java/org/testcontainers/utility/DockerImageNameCompatibilityTest.java", "diffHunk": "@@ -0,0 +1,94 @@\n+package org.testcontainers.utility;\n+\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+\n+import static org.hamcrest.core.StringContains.containsString;\n+import static org.rnorth.visibleassertions.VisibleAssertions.assertFalse;\n+import static org.rnorth.visibleassertions.VisibleAssertions.assertTrue;\n+\n+\n+public class DockerImageNameCompatibilityTest {\n+\n+    @Rule\n+    public ExpectedException thrown = ExpectedException.none();\n+\n+    @Test\n+    public void testPlainImage() {\n+        DockerImageName subject = DockerImageName.parse(\"foo\");\n+\n+        assertFalse(\"image name foo != bar\", subject.isCompatibleWith(DockerImageName.parse(\"bar\")));\n+    }\n+    @Test\n+    public void testLatestTreatedAsWildcard() {\n+        final DockerImageName subject = DockerImageName.parse(\"foo:4.5.6\");\n+\n+        assertTrue(\"foo:4.5.6 ~= foo:latest\", subject.isCompatibleWith(DockerImageName.parse(\"foo:1.2.3\").withTag(\"latest\")));", "originalCommit": "49c2360fd8bd145fdb5e684467b2926171a539bf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTAwNDg1Mg==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r471004852", "bodyText": "Ah, the intent here is to make sure that setting latest tag doesn't mess things up. I'll add a clarifying comment:\nfoo:1.2.3 != foo:4.5.6\nfoo:1.2.3 ~= foo\nfoo:1.2.3 ~= foo:latest\n\nThe test is effectively making sure that no tag and `latest` tag are equivalent", "author": "rnorth", "createdAt": "2020-08-15T15:47:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDg0NTMyNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDg0NjA3NQ==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r470846075", "bodyText": "after my suggestion, this would be the same test as testLatestTreatedAsWildcard", "author": "kiview", "createdAt": "2020-08-14T20:16:33Z", "path": "core/src/test/java/org/testcontainers/utility/DockerImageNameCompatibilityTest.java", "diffHunk": "@@ -0,0 +1,94 @@\n+package org.testcontainers.utility;\n+\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+\n+import static org.hamcrest.core.StringContains.containsString;\n+import static org.rnorth.visibleassertions.VisibleAssertions.assertFalse;\n+import static org.rnorth.visibleassertions.VisibleAssertions.assertTrue;\n+\n+\n+public class DockerImageNameCompatibilityTest {\n+\n+    @Rule\n+    public ExpectedException thrown = ExpectedException.none();\n+\n+    @Test\n+    public void testPlainImage() {\n+        DockerImageName subject = DockerImageName.parse(\"foo\");\n+\n+        assertFalse(\"image name foo != bar\", subject.isCompatibleWith(DockerImageName.parse(\"bar\")));\n+    }\n+    @Test\n+    public void testLatestTreatedAsWildcard() {\n+        final DockerImageName subject = DockerImageName.parse(\"foo:4.5.6\");\n+\n+        assertTrue(\"foo:4.5.6 ~= foo:latest\", subject.isCompatibleWith(DockerImageName.parse(\"foo:1.2.3\").withTag(\"latest\")));\n+    }\n+\n+    @Test\n+    public void testImageWithAutomaticCompatibility() {", "originalCommit": "49c2360fd8bd145fdb5e684467b2926171a539bf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzY5MjEwOA==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r473692108", "bodyText": "Removed", "author": "rnorth", "createdAt": "2020-08-20T07:27:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDg0NjA3NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDg0Njg1OQ==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r470846859", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void testCheckMethodAcceptsCompatible() {\n          \n          \n            \n                public void testAssertMethodAcceptsCompatible() {", "author": "kiview", "createdAt": "2020-08-14T20:18:30Z", "path": "core/src/test/java/org/testcontainers/utility/DockerImageNameCompatibilityTest.java", "diffHunk": "@@ -0,0 +1,94 @@\n+package org.testcontainers.utility;\n+\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+\n+import static org.hamcrest.core.StringContains.containsString;\n+import static org.rnorth.visibleassertions.VisibleAssertions.assertFalse;\n+import static org.rnorth.visibleassertions.VisibleAssertions.assertTrue;\n+\n+\n+public class DockerImageNameCompatibilityTest {\n+\n+    @Rule\n+    public ExpectedException thrown = ExpectedException.none();\n+\n+    @Test\n+    public void testPlainImage() {\n+        DockerImageName subject = DockerImageName.parse(\"foo\");\n+\n+        assertFalse(\"image name foo != bar\", subject.isCompatibleWith(DockerImageName.parse(\"bar\")));\n+    }\n+    @Test\n+    public void testLatestTreatedAsWildcard() {\n+        final DockerImageName subject = DockerImageName.parse(\"foo:4.5.6\");\n+\n+        assertTrue(\"foo:4.5.6 ~= foo:latest\", subject.isCompatibleWith(DockerImageName.parse(\"foo:1.2.3\").withTag(\"latest\")));\n+    }\n+\n+    @Test\n+    public void testImageWithAutomaticCompatibility() {\n+        DockerImageName subject = DockerImageName.parse(\"foo:1.2.3\");\n+\n+        assertTrue(\"foo:1.2.3 ~= foo\", subject.isCompatibleWith(DockerImageName.parse(\"foo\")));\n+    }\n+\n+    @Test\n+    public void testImageWithAutomaticCompatibilityForFullPath() {\n+        DockerImageName subject = DockerImageName.parse(\"repo/foo:1.2.3\");\n+\n+        assertTrue(\"repo/foo:1.2.3 ~= repo/foo\", subject.isCompatibleWith(DockerImageName.parse(\"repo/foo\")));\n+    }\n+\n+    @Test\n+    public void testImageWithClaimedCompatibility() {\n+        DockerImageName subject = DockerImageName.parse(\"foo\").asCompatibleSubstituteFor(\"bar\");\n+\n+        assertTrue(\"foo(bar) ~= bar\", subject.isCompatibleWith(DockerImageName.parse(\"bar\")));\n+        assertFalse(\"foo(bar) != fizz\", subject.isCompatibleWith(DockerImageName.parse(\"fizz\")));\n+    }\n+\n+    @Test\n+    public void testImageWithClaimedCompatibilityAndVersion() {\n+        DockerImageName subject = DockerImageName.parse(\"foo:1.2.3\").asCompatibleSubstituteFor(\"bar\");\n+\n+        assertTrue(\"foo:1.2.3(bar) ~= bar\", subject.isCompatibleWith(DockerImageName.parse(\"bar\")));\n+    }\n+\n+    @Test\n+    public void testImageWithClaimedCompatibilityForFullPath() {\n+        DockerImageName subject = DockerImageName.parse(\"foo\").asCompatibleSubstituteFor(\"registry/repo/bar\");\n+\n+        assertTrue(\"foo(registry/repo/bar) ~= registry/repo/bar\", subject.isCompatibleWith(DockerImageName.parse(\"registry/repo/bar\")));\n+        assertFalse(\"foo(registry/repo/bar) != repo/bar\", subject.isCompatibleWith(DockerImageName.parse(\"repo/bar\")));\n+        assertFalse(\"foo(registry/repo/bar) != bar\", subject.isCompatibleWith(DockerImageName.parse(\"bar\")));\n+    }\n+\n+    @Test\n+    public void testImageWithClaimedCompatibilityForVersion() {\n+        DockerImageName subject = DockerImageName.parse(\"foo\").asCompatibleSubstituteFor(\"bar:1.2.3\");\n+\n+        assertTrue(\"foo(bar:1.2.3) ~= bar\", subject.isCompatibleWith(DockerImageName.parse(\"bar\")));\n+        assertTrue(\"foo(bar:1.2.3) ~= bar:1.2.3\", subject.isCompatibleWith(DockerImageName.parse(\"bar:1.2.3\")));\n+        assertTrue(\"foo(bar:1.2.3) ~= bar:latest\", subject.isCompatibleWith(DockerImageName.parse(\"bar:latest\")));\n+        assertFalse(\"foo(bar:1.2.3) != bar:0.0.1\", subject.isCompatibleWith(DockerImageName.parse(\"bar:0.0.1\")));\n+        assertFalse(\"foo(bar:1.2.3) != bar:2.0.0\", subject.isCompatibleWith(DockerImageName.parse(\"bar:2.0.0\")));\n+        assertFalse(\"foo(bar:1.2.3) != bar:1.2.4\", subject.isCompatibleWith(DockerImageName.parse(\"bar:1.2.4\")));\n+    }\n+\n+    @Test\n+    public void testCheckMethodAcceptsCompatible() {", "originalCommit": "49c2360fd8bd145fdb5e684467b2926171a539bf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDg0NzAxMg==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r470847012", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void testCheckMethodRejectsIncompatible() {\n          \n          \n            \n                public void testAssertMethodRejectsIncompatible() {", "author": "kiview", "createdAt": "2020-08-14T20:18:53Z", "path": "core/src/test/java/org/testcontainers/utility/DockerImageNameCompatibilityTest.java", "diffHunk": "@@ -0,0 +1,94 @@\n+package org.testcontainers.utility;\n+\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+\n+import static org.hamcrest.core.StringContains.containsString;\n+import static org.rnorth.visibleassertions.VisibleAssertions.assertFalse;\n+import static org.rnorth.visibleassertions.VisibleAssertions.assertTrue;\n+\n+\n+public class DockerImageNameCompatibilityTest {\n+\n+    @Rule\n+    public ExpectedException thrown = ExpectedException.none();\n+\n+    @Test\n+    public void testPlainImage() {\n+        DockerImageName subject = DockerImageName.parse(\"foo\");\n+\n+        assertFalse(\"image name foo != bar\", subject.isCompatibleWith(DockerImageName.parse(\"bar\")));\n+    }\n+    @Test\n+    public void testLatestTreatedAsWildcard() {\n+        final DockerImageName subject = DockerImageName.parse(\"foo:4.5.6\");\n+\n+        assertTrue(\"foo:4.5.6 ~= foo:latest\", subject.isCompatibleWith(DockerImageName.parse(\"foo:1.2.3\").withTag(\"latest\")));\n+    }\n+\n+    @Test\n+    public void testImageWithAutomaticCompatibility() {\n+        DockerImageName subject = DockerImageName.parse(\"foo:1.2.3\");\n+\n+        assertTrue(\"foo:1.2.3 ~= foo\", subject.isCompatibleWith(DockerImageName.parse(\"foo\")));\n+    }\n+\n+    @Test\n+    public void testImageWithAutomaticCompatibilityForFullPath() {\n+        DockerImageName subject = DockerImageName.parse(\"repo/foo:1.2.3\");\n+\n+        assertTrue(\"repo/foo:1.2.3 ~= repo/foo\", subject.isCompatibleWith(DockerImageName.parse(\"repo/foo\")));\n+    }\n+\n+    @Test\n+    public void testImageWithClaimedCompatibility() {\n+        DockerImageName subject = DockerImageName.parse(\"foo\").asCompatibleSubstituteFor(\"bar\");\n+\n+        assertTrue(\"foo(bar) ~= bar\", subject.isCompatibleWith(DockerImageName.parse(\"bar\")));\n+        assertFalse(\"foo(bar) != fizz\", subject.isCompatibleWith(DockerImageName.parse(\"fizz\")));\n+    }\n+\n+    @Test\n+    public void testImageWithClaimedCompatibilityAndVersion() {\n+        DockerImageName subject = DockerImageName.parse(\"foo:1.2.3\").asCompatibleSubstituteFor(\"bar\");\n+\n+        assertTrue(\"foo:1.2.3(bar) ~= bar\", subject.isCompatibleWith(DockerImageName.parse(\"bar\")));\n+    }\n+\n+    @Test\n+    public void testImageWithClaimedCompatibilityForFullPath() {\n+        DockerImageName subject = DockerImageName.parse(\"foo\").asCompatibleSubstituteFor(\"registry/repo/bar\");\n+\n+        assertTrue(\"foo(registry/repo/bar) ~= registry/repo/bar\", subject.isCompatibleWith(DockerImageName.parse(\"registry/repo/bar\")));\n+        assertFalse(\"foo(registry/repo/bar) != repo/bar\", subject.isCompatibleWith(DockerImageName.parse(\"repo/bar\")));\n+        assertFalse(\"foo(registry/repo/bar) != bar\", subject.isCompatibleWith(DockerImageName.parse(\"bar\")));\n+    }\n+\n+    @Test\n+    public void testImageWithClaimedCompatibilityForVersion() {\n+        DockerImageName subject = DockerImageName.parse(\"foo\").asCompatibleSubstituteFor(\"bar:1.2.3\");\n+\n+        assertTrue(\"foo(bar:1.2.3) ~= bar\", subject.isCompatibleWith(DockerImageName.parse(\"bar\")));\n+        assertTrue(\"foo(bar:1.2.3) ~= bar:1.2.3\", subject.isCompatibleWith(DockerImageName.parse(\"bar:1.2.3\")));\n+        assertTrue(\"foo(bar:1.2.3) ~= bar:latest\", subject.isCompatibleWith(DockerImageName.parse(\"bar:latest\")));\n+        assertFalse(\"foo(bar:1.2.3) != bar:0.0.1\", subject.isCompatibleWith(DockerImageName.parse(\"bar:0.0.1\")));\n+        assertFalse(\"foo(bar:1.2.3) != bar:2.0.0\", subject.isCompatibleWith(DockerImageName.parse(\"bar:2.0.0\")));\n+        assertFalse(\"foo(bar:1.2.3) != bar:1.2.4\", subject.isCompatibleWith(DockerImageName.parse(\"bar:1.2.4\")));\n+    }\n+\n+    @Test\n+    public void testCheckMethodAcceptsCompatible() {\n+        DockerImageName subject = DockerImageName.parse(\"foo\").asCompatibleSubstituteFor(\"bar\");\n+        subject.assertCompatibleWith(DockerImageName.parse(\"bar\"));\n+    }\n+\n+    @Test\n+    public void testCheckMethodRejectsIncompatible() {", "originalCommit": "49c2360fd8bd145fdb5e684467b2926171a539bf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzcyMTM4Mw==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r473721383", "bodyText": "Done", "author": "rnorth", "createdAt": "2020-08-20T07:51:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDg0NzAxMg=="}], "type": "inlineReview"}, {"oid": "a0ef1fe186dc5e9c93bd8f75ea6dd36d0350cb13", "url": "https://github.com/testcontainers/testcontainers-java/commit/a0ef1fe186dc5e9c93bd8f75ea6dd36d0350cb13", "message": "Undeprecate remaining String constructors", "committedDate": "2020-08-15T15:30:01Z", "type": "commit"}, {"oid": "5be1a79cdab4912909437b5a35fc8e1abca58511", "url": "https://github.com/testcontainers/testcontainers-java/commit/5be1a79cdab4912909437b5a35fc8e1abca58511", "message": "Add comment re validation of HostAndPort", "committedDate": "2020-08-15T15:30:31Z", "type": "commit"}, {"oid": "ddf8a28018a82af72c362f3f3f3ae1a203f8cd95", "url": "https://github.com/testcontainers/testcontainers-java/commit/ddf8a28018a82af72c362f3f3f3ae1a203f8cd95", "message": "Add missing annotation", "committedDate": "2020-08-15T15:34:50Z", "type": "commit"}, {"oid": "c5c1e74adb89ff04c21aa66351c4c160a912b21b", "url": "https://github.com/testcontainers/testcontainers-java/commit/c5c1e74adb89ff04c21aa66351c4c160a912b21b", "message": "Fix Kafka version string constructor\nFix gap in testing and docs", "committedDate": "2020-08-15T15:43:33Z", "type": "commit"}, {"oid": "7d82db9611b4f590e9ec58b921e6469972656864", "url": "https://github.com/testcontainers/testcontainers-java/commit/7d82db9611b4f590e9ec58b921e6469972656864", "message": "Use @EqualsAndHashCode for Versioning", "committedDate": "2020-08-15T15:44:46Z", "type": "commit"}, {"oid": "de6dec674d6b7a5638b6fa08a1ca61675fd9eb94", "url": "https://github.com/testcontainers/testcontainers-java/commit/de6dec674d6b7a5638b6fa08a1ca61675fd9eb94", "message": "Clarify and expand test", "committedDate": "2020-08-15T15:51:36Z", "type": "commit"}, {"oid": "d87bcee21822e98cc67297540fe5a9884727ac04", "url": "https://github.com/testcontainers/testcontainers-java/commit/d87bcee21822e98cc67297540fe5a9884727ac04", "message": "Remove duplicate test", "committedDate": "2020-08-15T15:51:57Z", "type": "commit"}, {"oid": "6b63e8819f4a4aaa8df6dd004534d4588e5ac818", "url": "https://github.com/testcontainers/testcontainers-java/commit/6b63e8819f4a4aaa8df6dd004534d4588e5ac818", "message": "Rename test", "committedDate": "2020-08-15T15:52:22Z", "type": "commit"}, {"oid": "202a163c5c696d0abe5354190a428fd09da17073", "url": "https://github.com/testcontainers/testcontainers-java/commit/202a163c5c696d0abe5354190a428fd09da17073", "message": "Add continue-on-error for cache step, and upgrade GH cache action", "committedDate": "2020-08-15T16:33:35Z", "type": "commit"}, {"oid": "b6e5191028f2a24504f13717ef042e79888e8911", "url": "https://github.com/testcontainers/testcontainers-java/commit/b6e5191028f2a24504f13717ef042e79888e8911", "message": "Update core/src/test/java/org/testcontainers/utility/DockerImageNameCompatibilityTest.java\n\nCo-authored-by: Kevin Wittek <kiview@users.noreply.github.com>", "committedDate": "2020-08-20T07:28:36Z", "type": "commit"}, {"oid": "33c7ae5664acbf03a7c781e1a3d355c73c40ca0b", "url": "https://github.com/testcontainers/testcontainers-java/commit/33c7ae5664acbf03a7c781e1a3d355c73c40ca0b", "message": "Merge remote-tracking branch 'origin/master' into image-overrides\nAdapt trim() usage to new code structure", "committedDate": "2020-08-20T07:41:29Z", "type": "commit"}, {"oid": "ee5eae3c7723c0d2c6ec4b67c742da6e5e81adff", "url": "https://github.com/testcontainers/testcontainers-java/commit/ee5eae3c7723c0d2c6ec4b67c742da6e5e81adff", "message": "Merge from origin/master and incorporate trim() to fix accidental whitespace in property files", "committedDate": "2020-08-20T07:50:11Z", "type": "commit"}, {"oid": "502c647a91a45987aff1a09c9c558319aa5c09ed", "url": "https://github.com/testcontainers/testcontainers-java/commit/502c647a91a45987aff1a09c9c558319aa5c09ed", "message": "Merge remote-tracking branch 'origin/image-overrides' into image-overrides", "committedDate": "2020-08-20T07:50:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzczMTAwOA==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r473731008", "bodyText": "tiny nit: if we import Versioning.Sha256Versioning and other Versioning.* classes, the changelog should be smaller :)", "author": "bsideup", "createdAt": "2020-08-20T07:59:05Z", "path": "core/src/main/java/org/testcontainers/utility/DockerImageName.java", "diffHunk": "@@ -63,14 +62,16 @@ public DockerImageName(String fullImageName) {\n \n         if (remoteName.contains(\"@sha256:\")) {\n             repo = remoteName.split(\"@sha256:\")[0];\n-            versioning = new Sha256Versioning(remoteName.split(\"@sha256:\")[1]);\n+            versioning = new Versioning.Sha256Versioning(remoteName.split(\"@sha256:\")[1]);", "originalCommit": "502c647a91a45987aff1a09c9c558319aa5c09ed", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzE1NjA4OQ==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r477156089", "bodyText": "Fixed", "author": "rnorth", "createdAt": "2020-08-26T09:15:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzczMTAwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTA1MTExMg==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r481051112", "bodyText": "@rnorth is it? \ud83d\ude05", "author": "bsideup", "createdAt": "2020-09-01T10:54:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzczMTAwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDA4NjkwNQ==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r484086905", "bodyText": "Oops, must have reverted it during moving the interface. Done again.", "author": "rnorth", "createdAt": "2020-09-06T16:04:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzczMTAwOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzczMjEzNg==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r473732136", "bodyText": "marked as @Nullable while the field isn't", "author": "bsideup", "createdAt": "2020-08-20T07:59:54Z", "path": "core/src/main/java/org/testcontainers/utility/DockerImageName.java", "diffHunk": "@@ -103,11 +104,26 @@ public DockerImageName(String nameWithoutTag, @NotNull String version) {\n \n         if (version.startsWith(\"sha256:\")) {\n             repo = remoteName;\n-            versioning = new Sha256Versioning(version.replace(\"sha256:\", \"\"));\n+            versioning = new Versioning.Sha256Versioning(version.replace(\"sha256:\", \"\"));\n         } else {\n             repo = remoteName;\n-            versioning = new TagVersioning(version);\n+            versioning = new Versioning.TagVersioning(version);\n         }\n+\n+        compatibleSubstituteFor = null;\n+    }\n+\n+    private DockerImageName(String rawName,\n+                            String registry,\n+                            String repo,\n+                            @Nullable Versioning versioning,", "originalCommit": "502c647a91a45987aff1a09c9c558319aa5c09ed", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzE1NjAxMQ==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r477156011", "bodyText": "Fixed", "author": "rnorth", "createdAt": "2020-08-26T09:15:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzczMjEzNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzczNjI0Mw==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r473736243", "bodyText": "can we make versioning @NonNull and use Versioning.TagVersioning.LATEST if null is passed to @Nullable methods?", "author": "bsideup", "createdAt": "2020-08-20T08:03:20Z", "path": "core/src/main/java/org/testcontainers/utility/DockerImageName.java", "diffHunk": "@@ -125,14 +141,14 @@ public String getUnversionedPart() {\n      * @return the versioned part of this name (tag or sha256)\n      */\n     public String getVersionPart() {\n-        return versioning.toString();\n+        return versioning == null ? \"latest\" : versioning.toString();", "originalCommit": "502c647a91a45987aff1a09c9c558319aa5c09ed", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzExNzkxNA==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r477117914", "bodyText": "So, this is one that requires some discussion, and potentially a change or just clear docs!\nI'd expect most usage of this feature to be like foo.asCompatibleSubstituteFor(\"bar\") meaning bar with any tag is accepted.\nI wanted to leave the possibility open to specify an exact tag match, i.e. foo.asCompatibleSubstituteFor(\"bar:1.2.3\").\nSo that this works:\n\nan absent tag is recorded as null\nthe compatitility check code treats this null as a wildcard\nconversion to a string treats this null as an implicit latest\n\nIt doesn't have to be this way, though. I reckon we could:\n\nignore tags altogether for compatibility checks\nOR be more explicit about wildcards, e.g. foo.asCompatibleSubstituteFor(\"bar:*\") in the API, and/or have a Versioning.Wildcard type internally instead of null.\n\nWDYT?", "author": "rnorth", "createdAt": "2020-08-26T08:15:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzczNjI0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTA1MjE0Mw==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r481052143", "bodyText": "have a Versioning.Wildcard type internally instead of null\n\nI like this one! My main concern was the Nullable field that we can avoid and I think Versioning.Wildcard solves the problem very well \ud83d\udc4d", "author": "bsideup", "createdAt": "2020-09-01T10:56:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzczNjI0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTA4NjE0NQ==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r481086145", "bodyText": "\ud83d\udc4d cool, I'll go with that then.", "author": "rnorth", "createdAt": "2020-09-01T12:04:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzczNjI0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDA4Njg0Mw==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r484086843", "bodyText": "Done (called it AnyVersion)", "author": "rnorth", "createdAt": "2020-09-06T16:04:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzczNjI0Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzczNjUzOQ==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r473736539", "bodyText": "ditto re null vs Versioning.TagVersioning.LATEST", "author": "bsideup", "createdAt": "2020-08-20T08:03:34Z", "path": "core/src/main/java/org/testcontainers/utility/DockerImageName.java", "diffHunk": "@@ -125,14 +141,14 @@ public String getUnversionedPart() {\n      * @return the versioned part of this name (tag or sha256)\n      */\n     public String getVersionPart() {\n-        return versioning.toString();\n+        return versioning == null ? \"latest\" : versioning.toString();\n     }\n \n     /**\n      * @return canonical name for the image\n      */\n     public String asCanonicalNameString() {\n-        return getUnversionedPart() + versioning.getSeparator() + versioning.toString();\n+        return getUnversionedPart() + (versioning == null ? \":\" : versioning.getSeparator()) + getVersionPart();", "originalCommit": "502c647a91a45987aff1a09c9c558319aa5c09ed", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDA4Njg2Mg==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r484086862", "bodyText": "Done.", "author": "rnorth", "createdAt": "2020-09-06T16:04:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzczNjUzOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzczOTk5OA==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r473739998", "bodyText": "Consider adding @With(AccessLevel.PRIVATE) to otherImageName, so that we can do:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return new DockerImageName(rawName, registry, repo, versioning, otherImageName);\n          \n          \n            \n                    return withOtherImageName(otherImageName);", "author": "bsideup", "createdAt": "2020-08-20T08:06:14Z", "path": "core/src/main/java/org/testcontainers/utility/DockerImageName.java", "diffHunk": "@@ -159,63 +176,86 @@ public String getRegistry() {\n         return registry;\n     }\n \n+    /**\n+     * @param newTag version tag for the copy to use\n+     * @return an immutable copy of this {@link DockerImageName} with the new version tag\n+     */\n     public DockerImageName withTag(final String newTag) {\n-        return new DockerImageName(rawName, registry, repo, new TagVersioning(newTag));\n+        return new DockerImageName(rawName, registry, repo, new Versioning.TagVersioning(newTag), compatibleSubstituteFor);\n     }\n \n-    private interface Versioning {\n-        boolean isValid();\n-\n-        String getSeparator();\n+    /**\n+     * Declare that this {@link DockerImageName} is a compatible substitute for another image - i.e. that this image\n+     * behaves as the other does, and is compatible with Testcontainers' assumptions about the other image.\n+     *\n+     * @param otherImageName the image name of the other image\n+     * @return an immutable copy of this {@link DockerImageName} with the compatibility declaration attached.\n+     */\n+    public DockerImageName asCompatibleSubstituteFor(String otherImageName) {\n+        return asCompatibleSubstituteFor(DockerImageName.parse(otherImageName));\n     }\n \n-    @Data\n-    private static class TagVersioning implements Versioning {\n-        public static final String TAG_REGEX = \"[\\\\w][\\\\w\\\\.\\\\-]{0,127}\";\n-        private final String tag;\n-\n-        TagVersioning(String tag) {\n-            this.tag = tag;\n-        }\n-\n-        @Override\n-        public boolean isValid() {\n-            return tag.matches(TAG_REGEX);\n-        }\n-\n-        @Override\n-        public String getSeparator() {\n-            return \":\";\n-        }\n-\n-        @Override\n-        public String toString() {\n-            return tag;\n-        }\n+    /**\n+     * Declare that this {@link DockerImageName} is a compatible substitute for another image - i.e. that this image\n+     * behaves as the other does, and is compatible with Testcontainers' assumptions about the other image.\n+     *\n+     * @param otherImageName the image name of the other image\n+     * @return an immutable copy of this {@link DockerImageName} with the compatibility declaration attached.\n+     */\n+    public DockerImageName asCompatibleSubstituteFor(DockerImageName otherImageName) {\n+        return new DockerImageName(rawName, registry, repo, versioning, otherImageName);", "originalCommit": "502c647a91a45987aff1a09c9c558319aa5c09ed", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzI4NDEwMA==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r477284100", "bodyText": "Nice, this works well (same for withTag).\nN.B. I've upgraded the Lombok dependency so that we can use modern @With rather than deprecated @Wither", "author": "rnorth", "createdAt": "2020-08-26T13:05:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzczOTk5OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc0MDkxOA==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r473740918", "bodyText": "WDYT about adding if (equals(other)) return true?", "author": "bsideup", "createdAt": "2020-08-20T08:07:23Z", "path": "core/src/main/java/org/testcontainers/utility/DockerImageName.java", "diffHunk": "@@ -159,63 +176,86 @@ public String getRegistry() {\n         return registry;\n     }\n \n+    /**\n+     * @param newTag version tag for the copy to use\n+     * @return an immutable copy of this {@link DockerImageName} with the new version tag\n+     */\n     public DockerImageName withTag(final String newTag) {\n-        return new DockerImageName(rawName, registry, repo, new TagVersioning(newTag));\n+        return new DockerImageName(rawName, registry, repo, new Versioning.TagVersioning(newTag), compatibleSubstituteFor);\n     }\n \n-    private interface Versioning {\n-        boolean isValid();\n-\n-        String getSeparator();\n+    /**\n+     * Declare that this {@link DockerImageName} is a compatible substitute for another image - i.e. that this image\n+     * behaves as the other does, and is compatible with Testcontainers' assumptions about the other image.\n+     *\n+     * @param otherImageName the image name of the other image\n+     * @return an immutable copy of this {@link DockerImageName} with the compatibility declaration attached.\n+     */\n+    public DockerImageName asCompatibleSubstituteFor(String otherImageName) {\n+        return asCompatibleSubstituteFor(DockerImageName.parse(otherImageName));\n     }\n \n-    @Data\n-    private static class TagVersioning implements Versioning {\n-        public static final String TAG_REGEX = \"[\\\\w][\\\\w\\\\.\\\\-]{0,127}\";\n-        private final String tag;\n-\n-        TagVersioning(String tag) {\n-            this.tag = tag;\n-        }\n-\n-        @Override\n-        public boolean isValid() {\n-            return tag.matches(TAG_REGEX);\n-        }\n-\n-        @Override\n-        public String getSeparator() {\n-            return \":\";\n-        }\n-\n-        @Override\n-        public String toString() {\n-            return tag;\n-        }\n+    /**\n+     * Declare that this {@link DockerImageName} is a compatible substitute for another image - i.e. that this image\n+     * behaves as the other does, and is compatible with Testcontainers' assumptions about the other image.\n+     *\n+     * @param otherImageName the image name of the other image\n+     * @return an immutable copy of this {@link DockerImageName} with the compatibility declaration attached.\n+     */\n+    public DockerImageName asCompatibleSubstituteFor(DockerImageName otherImageName) {\n+        return new DockerImageName(rawName, registry, repo, versioning, otherImageName);\n     }\n \n-    @Data\n-    private static class Sha256Versioning implements Versioning {\n-        public static final String HASH_REGEX = \"[0-9a-fA-F]{32,}\";\n-        private final String hash;\n-\n-        Sha256Versioning(String hash) {\n-            this.hash = hash;\n+    /**\n+     * Test whether this {@link DockerImageName} has declared compatibility with another image (set using\n+     * {@link DockerImageName#asCompatibleSubstituteFor(String)} or\n+     * {@link DockerImageName#asCompatibleSubstituteFor(DockerImageName)}.\n+     * <p>\n+     * If a version tag part is present in the <code>other</code> image name, the tags must exactly match, unless it\n+     * is 'latest'. If a version part is not present in the <code>other</code> image name, the tag contents are ignored.\n+     *\n+     * @param other the other image that we are trying to test compatibility with\n+     * @return whether this image has declared compatibility.\n+     */\n+    public boolean isCompatibleWith(DockerImageName other) {", "originalCommit": "502c647a91a45987aff1a09c9c558319aa5c09ed", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzEzNDIyOQ==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r477134229", "bodyText": "It doesn't decrease the amount of code, as we still have to do some form of wildcarding on the tag, so I think I'm inclined to leave as-is right now.", "author": "rnorth", "createdAt": "2020-08-26T08:40:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc0MDkxOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzEzNTE1OQ==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r477135159", "bodyText": "but if it is the same instance, we don't need to check anything, do we?", "author": "bsideup", "createdAt": "2020-08-26T08:42:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc0MDkxOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzI3OTcyOA==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r477279728", "bodyText": "Sorry, what I meant was that we can't get rid of these lines:\n\t\tfinal boolean thisRegistrySame = other.registry.equals(this.registry);\n        final boolean thisRepoSame = other.repo.equals(this.repo);\n        final boolean thisVersioningNotSpecifiedOrSame = other.versioning == null ||\n            other.versioning.equals(Versioning.TagVersioning.LATEST) ||\n            other.versioning.equals(this.versioning);\n\n        if (thisRegistrySame && thisRepoSame && thisVersioningNotSpecifiedOrSame) {\n            return true;\n        }\n\nbecause the version comparison is looser than what equals does.\nSo if we add an equals or == check first then yes, we could return from the method more quickly when there's a narrower match.\nBut we're not optimising for performance, so I'm not sure that we need to. i.e. if there's equality, the existing code still does the right thing.", "author": "rnorth", "createdAt": "2020-08-26T12:58:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc0MDkxOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTA1MzA1NA==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r481053054", "bodyText": "Ok, we can keep it as is \ud83d\udc4d", "author": "bsideup", "createdAt": "2020-09-01T10:58:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc0MDkxOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc3ODUzNQ==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r473778535", "bodyText": "idea: make compatibleSubstituteFor @NonNull, use SelfCompatible by default", "author": "bsideup", "createdAt": "2020-08-20T08:49:50Z", "path": "core/src/main/java/org/testcontainers/utility/DockerImageName.java", "diffHunk": "@@ -159,63 +176,86 @@ public String getRegistry() {\n         return registry;\n     }\n \n+    /**\n+     * @param newTag version tag for the copy to use\n+     * @return an immutable copy of this {@link DockerImageName} with the new version tag\n+     */\n     public DockerImageName withTag(final String newTag) {\n-        return new DockerImageName(rawName, registry, repo, new TagVersioning(newTag));\n+        return new DockerImageName(rawName, registry, repo, new Versioning.TagVersioning(newTag), compatibleSubstituteFor);\n     }\n \n-    private interface Versioning {\n-        boolean isValid();\n-\n-        String getSeparator();\n+    /**\n+     * Declare that this {@link DockerImageName} is a compatible substitute for another image - i.e. that this image\n+     * behaves as the other does, and is compatible with Testcontainers' assumptions about the other image.\n+     *\n+     * @param otherImageName the image name of the other image\n+     * @return an immutable copy of this {@link DockerImageName} with the compatibility declaration attached.\n+     */\n+    public DockerImageName asCompatibleSubstituteFor(String otherImageName) {\n+        return asCompatibleSubstituteFor(DockerImageName.parse(otherImageName));\n     }\n \n-    @Data\n-    private static class TagVersioning implements Versioning {\n-        public static final String TAG_REGEX = \"[\\\\w][\\\\w\\\\.\\\\-]{0,127}\";\n-        private final String tag;\n-\n-        TagVersioning(String tag) {\n-            this.tag = tag;\n-        }\n-\n-        @Override\n-        public boolean isValid() {\n-            return tag.matches(TAG_REGEX);\n-        }\n-\n-        @Override\n-        public String getSeparator() {\n-            return \":\";\n-        }\n-\n-        @Override\n-        public String toString() {\n-            return tag;\n-        }\n+    /**\n+     * Declare that this {@link DockerImageName} is a compatible substitute for another image - i.e. that this image\n+     * behaves as the other does, and is compatible with Testcontainers' assumptions about the other image.\n+     *\n+     * @param otherImageName the image name of the other image\n+     * @return an immutable copy of this {@link DockerImageName} with the compatibility declaration attached.\n+     */\n+    public DockerImageName asCompatibleSubstituteFor(DockerImageName otherImageName) {\n+        return new DockerImageName(rawName, registry, repo, versioning, otherImageName);\n     }\n \n-    @Data\n-    private static class Sha256Versioning implements Versioning {\n-        public static final String HASH_REGEX = \"[0-9a-fA-F]{32,}\";\n-        private final String hash;\n-\n-        Sha256Versioning(String hash) {\n-            this.hash = hash;\n+    /**\n+     * Test whether this {@link DockerImageName} has declared compatibility with another image (set using\n+     * {@link DockerImageName#asCompatibleSubstituteFor(String)} or\n+     * {@link DockerImageName#asCompatibleSubstituteFor(DockerImageName)}.\n+     * <p>\n+     * If a version tag part is present in the <code>other</code> image name, the tags must exactly match, unless it\n+     * is 'latest'. If a version part is not present in the <code>other</code> image name, the tag contents are ignored.\n+     *\n+     * @param other the other image that we are trying to test compatibility with\n+     * @return whether this image has declared compatibility.\n+     */\n+    public boolean isCompatibleWith(DockerImageName other) {\n+        // is this image already the same?\n+        final boolean thisRegistrySame = other.registry.equals(this.registry);\n+        final boolean thisRepoSame = other.repo.equals(this.repo);\n+        final boolean thisVersioningNotSpecifiedOrSame = other.versioning == null ||\n+            other.versioning.equals(Versioning.TagVersioning.LATEST) ||\n+            other.versioning.equals(this.versioning);\n+\n+        if (thisRegistrySame && thisRepoSame && thisVersioningNotSpecifiedOrSame) {\n+            return true;\n         }\n \n-        @Override\n-        public boolean isValid() {\n-            return hash.matches(HASH_REGEX);\n+        if (this.compatibleSubstituteFor == null) {", "originalCommit": "502c647a91a45987aff1a09c9c558319aa5c09ed", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzQzNDQ4MA==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r487434480", "bodyText": "I didn't really manage to make this work, or at least elegantly.", "author": "rnorth", "createdAt": "2020-09-12T18:13:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc3ODUzNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc4NDI5OA==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r473784298", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static final TestcontainersConfiguration instance = loadConfiguration();;\n          \n          \n            \n                private static final TestcontainersConfiguration instance = loadConfiguration();", "author": "bsideup", "createdAt": "2020-08-20T08:56:08Z", "path": "core/src/main/java/org/testcontainers/utility/TestcontainersConfiguration.java", "diffHunk": "@@ -37,7 +37,7 @@\n     private static File ENVIRONMENT_CONFIG_FILE = new File(System.getProperty(\"user.home\"), \".\" + PROPERTIES_FILE_NAME);\n \n     @Getter(lazy = true)\n-    private static final TestcontainersConfiguration instance = loadConfiguration();\n+    private static final TestcontainersConfiguration instance = loadConfiguration();;", "originalCommit": "502c647a91a45987aff1a09c9c558319aa5c09ed", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzE1NjczNA==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r477156734", "bodyText": "Fixed", "author": "rnorth", "createdAt": "2020-08-26T09:15:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc4NDI5OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc4Nzg1MQ==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r473787851", "bodyText": "I just realized... when did we introduce DockerImageName getPulsarDockerImageName()?\nIf 1.15.0-rc1, maybe we should use the opportunity to remove module's images from TestcontainersConfiguration, and instead expose something like the current getImage that would allow any module to use the configuration mechanism?", "author": "bsideup", "createdAt": "2020-08-20T09:00:05Z", "path": "core/src/main/java/org/testcontainers/utility/TestcontainersConfiguration.java", "diffHunk": "@@ -129,29 +138,29 @@ public Integer getRyukTimeout() {\n \n     @Deprecated\n     public String getKafkaImage() {\n-        return String.valueOf(properties.getOrDefault(\"kafka.container.image\", \"confluentinc/cp-kafka\"));\n+        return getKafkaDockerImageName().asCanonicalNameString();\n     }\n \n     public DockerImageName getKafkaDockerImageName() {\n-        return DockerImageName.parse(getKafkaImage());\n+        return getImage(\"kafka.container.image\", \"confluentinc/cp-kafka\");\n     }\n \n     @Deprecated\n     public String getPulsarImage() {\n-        return String.valueOf(properties.getOrDefault(\"pulsar.container.image\", \"apachepulsar/pulsar\"));\n+        return getPulsarDockerImageName().asCanonicalNameString();\n     }\n \n     public DockerImageName getPulsarDockerImageName() {", "originalCommit": "502c647a91a45987aff1a09c9c558319aa5c09ed", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzEyMDcxMg==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r477120712", "bodyText": "It was 1.15.0-rc1 so yeah, we can do that.\n\nthat would allow any module to use the configuration mechanism?\n\nI'd be keen to still decrease reliance on TestcontainersConfiguration overall. I see it as an OK default image substitutor, but in the long term I'd like module classes to not call  TestcontainersConfiguration at all, and instead rely entirely on the image substitution mechanism.", "author": "rnorth", "createdAt": "2020-08-26T08:19:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc4Nzg1MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzI3NDg2OQ==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r477274869", "bodyText": "Actually, I don't think we need to do this. #3102 will:\n\nRip out all references from modules to TestcontainersConfiguration for obtaining an image name\nMake RemoteDockerImage use ImageNameSubstitutor to look up a substitute name, if set\nThe default implementation of ImageNameSubstitutor just defers to TestcontainersConfiguration (so that existing uses of props-file based substitution carry on working)\n\nIf we don't do this, and essentially keep TestcontainersConfiguration near the top of the stack, then I think it becomes a lot harder to swap in an alternative substitutor implementation without making every module (and GenericContainer) use TestcontainersConfiguration.", "author": "rnorth", "createdAt": "2020-08-26T12:50:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc4Nzg1MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc4OTA3NA==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r473789074", "bodyText": "nit: should we move it before the non-static class members?", "author": "bsideup", "createdAt": "2020-08-20T09:01:33Z", "path": "core/src/main/java/org/testcontainers/utility/Versioning.java", "diffHunk": "@@ -0,0 +1,66 @@\n+package org.testcontainers.utility;\n+\n+import lombok.Data;\n+import lombok.EqualsAndHashCode;\n+import lombok.Value;\n+\n+/**\n+ * Represents mechanisms for versioning docker images.\n+ */\n+interface Versioning {\n+    boolean isValid();\n+\n+    String getSeparator();\n+\n+    @EqualsAndHashCode\n+    class TagVersioning implements Versioning {\n+        public static final String TAG_REGEX = \"[\\\\w][\\\\w.\\\\-]{0,127}\";\n+        private final String tag;\n+\n+        TagVersioning(String tag) {\n+            this.tag = tag;\n+        }\n+\n+        @Override\n+        public boolean isValid() {\n+            return tag.matches(TAG_REGEX);\n+        }\n+\n+        @Override\n+        public String getSeparator() {\n+            return \":\";\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return tag;\n+        }\n+\n+        static final TagVersioning LATEST = new TagVersioning(\"latest\");", "originalCommit": "502c647a91a45987aff1a09c9c558319aa5c09ed", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzE1Njg3Nw==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r477156877", "bodyText": "Fixed", "author": "rnorth", "createdAt": "2020-08-26T09:16:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc4OTA3NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc5OTY3NA==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r473799674", "bodyText": "this is an interesting edge case. Ideally, both images should we treated as compatible automatically. WDYT?", "author": "bsideup", "createdAt": "2020-08-20T09:14:35Z", "path": "modules/elasticsearch/src/test/java/org/testcontainers/elasticsearch/ElasticsearchContainerTest.java", "diffHunk": "@@ -101,6 +101,7 @@ public void elasticsearchOssImage() throws IOException {\n                      DockerImageName\n                          .parse(\"docker.elastic.co/elasticsearch/elasticsearch-oss\")\n                          .withTag(ELASTICSEARCH_VERSION)\n+                         .asCompatibleSubstituteFor(\"docker.elastic.co/elasticsearch/elasticsearch\")", "originalCommit": "502c647a91a45987aff1a09c9c558319aa5c09ed", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzEyMTEwNw==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r477121107", "bodyText": "Good suggestion - will have a try.", "author": "rnorth", "createdAt": "2020-08-26T08:20:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc5OTY3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzE0NjE3Mw==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r477146173", "bodyText": "I've modified assertCompatibleWith to accept a varargs array of DockerImageNames, and I think this works a lot better.", "author": "rnorth", "createdAt": "2020-08-26T08:59:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzc5OTY3NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzgwNTI0NQ==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r473805245", "bodyText": "heads up: making it static would create false positives since #testKafkaFunctionality uses the same topic name / message that it asserts.\nLet's change the topic name in #testKafkaFunctionality to something with random in it", "author": "bsideup", "createdAt": "2020-08-20T09:21:29Z", "path": "modules/kafka/src/test/java/org/testcontainers/containers/KafkaContainerTest.java", "diffHunk": "@@ -29,8 +29,8 @@\n     private static final DockerImageName ZOOKEEPER_TEST_IMAGE = DockerImageName.parse(\"confluentinc/cp-zookeeper:4.0.0\");\n \n     // junitRule {\n-    @Rule\n-    public KafkaContainer kafka = new KafkaContainer();\n+    @ClassRule\n+    public static KafkaContainer kafka = new KafkaContainer(DockerImageName.parse(\"confluentinc/cp-kafka:5.2.1\"));", "originalCommit": "502c647a91a45987aff1a09c9c558319aa5c09ed", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzE2MTk4Mg==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r477161982", "bodyText": "Fixed", "author": "rnorth", "createdAt": "2020-08-26T09:22:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzgwNTI0NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzgxNDE3NA==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r473814174", "bodyText": "See #3128\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            .withNetwork(kafka.getNetwork())\n          \n          \n            \n                            .withNetwork(network)", "author": "bsideup", "createdAt": "2020-08-20T09:32:21Z", "path": "modules/kafka/src/test/java/org/testcontainers/containers/KafkaContainerTest.java", "diffHunk": "@@ -75,7 +86,8 @@ public void testExternalZookeeperWithExternalNetwork() throws Exception {\n                 .withEnv(\"ZOOKEEPER_CLIENT_PORT\", \"2181\");\n \n             // withKafkaNetwork {\n-            GenericContainer application = new GenericContainer(\"alpine\").withNetwork(kafka.getNetwork())\n+            GenericContainer application = new GenericContainer(\"alpine\")\n+                .withNetwork(kafka.getNetwork())", "originalCommit": "502c647a91a45987aff1a09c9c558319aa5c09ed", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzE2MjA4MA==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r477162080", "bodyText": "Done", "author": "rnorth", "createdAt": "2020-08-26T09:22:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzgxNDE3NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzgxNDg2Mw==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r473814863", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    this( TestcontainersConfiguration.getInstance().getLocalstackDockerImageName().withTag(version));\n          \n          \n            \n                    this(TestcontainersConfiguration.getInstance().getLocalstackDockerImageName().withTag(version));", "author": "bsideup", "createdAt": "2020-08-20T09:33:14Z", "path": "modules/localstack/src/main/java/org/testcontainers/containers/localstack/LocalStackContainer.java", "diffHunk": "@@ -58,15 +64,15 @@\n      */\n     @Deprecated\n     public LocalStackContainer() {\n-        this(VERSION);\n+        this(TestcontainersConfiguration.getInstance().getLocalstackDockerImageName().withTag(DEFAULT_TAG));\n     }\n \n     /**\n      * @deprecated use {@link LocalStackContainer(DockerImageName)} instead\n      */\n     @Deprecated\n     public LocalStackContainer(String version) {\n-        this(DockerImageName.parse(TestcontainersConfiguration.getInstance().getLocalStackImage() + \":\" + version));\n+        this( TestcontainersConfiguration.getInstance().getLocalstackDockerImageName().withTag(version));", "originalCommit": "502c647a91a45987aff1a09c9c558319aa5c09ed", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzE2MjE4MA==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r477162180", "bodyText": "Done", "author": "rnorth", "createdAt": "2020-08-26T09:23:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzgxNDg2Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzgxODE2NA==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r473818164", "bodyText": "uh? Does it get created here? (e.g. by tests)", "author": "bsideup", "createdAt": "2020-08-20T09:37:00Z", "path": "modules/neo4j/src/test/resources/.gitignore", "diffHunk": "@@ -0,0 +1 @@\n+container-license-acceptance.txt", "originalCommit": "502c647a91a45987aff1a09c9c558319aa5c09ed", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzEyMTcyNQ==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r477121725", "bodyText": "I... do not know where this diff came from \ud83d\ude2c\nWill remove!", "author": "rnorth", "createdAt": "2020-08-26T08:21:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzgxODE2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzE2MjY2Mg==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r477162662", "bodyText": "Done", "author": "rnorth", "createdAt": "2020-08-26T09:23:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzgxODE2NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzgzOTE2NA==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r473839164", "bodyText": "the same as with Elasticsearch - we may need to be able to verify the compatibility with multiple images", "author": "bsideup", "createdAt": "2020-08-20T10:01:54Z", "path": "modules/selenium/src/test/java/org/testcontainers/junit/SpecificImageNameWebDriverContainerTest.java", "diffHunk": "@@ -8,7 +8,9 @@\n \n public class SpecificImageNameWebDriverContainerTest extends BaseWebDriverContainerTest {\n \n-    private static final DockerImageName FIREFOX_IMAGE = DockerImageName.parse(\"selenium/standalone-firefox:2.53.1-beryllium\");\n+    private static final DockerImageName FIREFOX_IMAGE = DockerImageName\n+        .parse(\"selenium/standalone-firefox:2.53.1-beryllium\")\n+        .asCompatibleSubstituteFor(\"selenium/standalone-firefox-debug\");", "originalCommit": "502c647a91a45987aff1a09c9c558319aa5c09ed", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzE1NDE3MQ==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r477154171", "bodyText": "Yep, have replaced this by something more elegant within BrowserWebDriverContainer", "author": "rnorth", "createdAt": "2020-08-26T09:13:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzgzOTE2NA=="}], "type": "inlineReview"}, {"oid": "7a8cd7c7ff44b22ac959a776b48692eb5dc27535", "url": "https://github.com/testcontainers/testcontainers-java/commit/7a8cd7c7ff44b22ac959a776b48692eb5dc27535", "message": "Resolve some review comments", "committedDate": "2020-08-26T09:00:12Z", "type": "commit"}, {"oid": "ad797a590d1907c98db362a8d23d9ad2e647c715", "url": "https://github.com/testcontainers/testcontainers-java/commit/ad797a590d1907c98db362a8d23d9ad2e647c715", "message": "Avoid dirty state in Kafka test", "committedDate": "2020-08-26T09:10:25Z", "type": "commit"}, {"oid": "1ee4b78e234702d11d4eca43b89bb0a142218aaa", "url": "https://github.com/testcontainers/testcontainers-java/commit/1ee4b78e234702d11d4eca43b89bb0a142218aaa", "message": "Tidy up some nits", "committedDate": "2020-08-26T09:13:36Z", "type": "commit"}, {"oid": "0b0212d30092b5c962b4b2624b82e6eb02fb1147", "url": "https://github.com/testcontainers/testcontainers-java/commit/0b0212d30092b5c962b4b2624b82e6eb02fb1147", "message": "Use Lombok @With and restore generated constructor", "committedDate": "2020-08-26T13:07:24Z", "type": "commit"}, {"oid": "e22e639fbf740c326d1fd492a0e1c1ae124a8c53", "url": "https://github.com/testcontainers/testcontainers-java/commit/e22e639fbf740c326d1fd492a0e1c1ae124a8c53", "message": "Remove now-unused `TestcontainersConfiguration` accessors", "committedDate": "2020-08-26T13:07:49Z", "type": "commit"}, {"oid": "90688338ec52a70a2919a72ce12dd4e7885e90de", "url": "https://github.com/testcontainers/testcontainers-java/commit/90688338ec52a70a2919a72ce12dd4e7885e90de", "message": "Fix test compilation issue", "committedDate": "2020-08-26T14:13:51Z", "type": "commit"}, {"oid": "64108f1daf18d8f4f3e6f3f4087e3d95a050750a", "url": "https://github.com/testcontainers/testcontainers-java/commit/64108f1daf18d8f4f3e6f3f4087e3d95a050750a", "message": "Revert \"Remove now-unused `TestcontainersConfiguration` accessors\"\n\ne22e639fbf740c326d1fd492a0e1c1ae124a8c53", "committedDate": "2020-08-27T07:04:07Z", "type": "commit"}, {"oid": "b068af5abd90e033aec4190fb7992db5a76eec6b", "url": "https://github.com/testcontainers/testcontainers-java/commit/b068af5abd90e033aec4190fb7992db5a76eec6b", "message": "Merge branch 'master' into image-overrides", "committedDate": "2020-08-27T07:11:27Z", "type": "commit"}, {"oid": "3624787035733ecac137ccc5f61e1fb5cc42b7e5", "url": "https://github.com/testcontainers/testcontainers-java/commit/3624787035733ecac137ccc5f61e1fb5cc42b7e5", "message": "Merge branch 'master' into image-overrides", "committedDate": "2020-09-01T11:21:35Z", "type": "commit"}, {"oid": "89a6b731198d2e2e40ace51854da2966a9cc7c46", "url": "https://github.com/testcontainers/testcontainers-java/commit/89a6b731198d2e2e40ace51854da2966a9cc7c46", "message": "Merge remote-tracking branch 'origin/master' into image-overrides", "committedDate": "2020-09-06T15:54:16Z", "type": "commit"}, {"oid": "dfa1e635931b62088b47f67e5778490668256846", "url": "https://github.com/testcontainers/testcontainers-java/commit/dfa1e635931b62088b47f67e5778490668256846", "message": "Add an 'AnyVersion' for images", "committedDate": "2020-09-06T16:00:16Z", "type": "commit"}, {"oid": "61c5fbc26152422a6fb64aa574f67c359671bd0a", "url": "https://github.com/testcontainers/testcontainers-java/commit/61c5fbc26152422a6fb64aa574f67c359671bd0a", "message": "Merge remote-tracking branch 'origin/image-overrides' into image-overrides", "committedDate": "2020-09-06T16:01:03Z", "type": "commit"}, {"oid": "a5b63ffe7e50a4960de457c8c4d90d822c0f36a9", "url": "https://github.com/testcontainers/testcontainers-java/commit/a5b63ffe7e50a4960de457c8c4d90d822c0f36a9", "message": "Add import", "committedDate": "2020-09-06T16:02:23Z", "type": "commit"}, {"oid": "3d43019550e75b379e73d0ef929b66a83c14c410", "url": "https://github.com/testcontainers/testcontainers-java/commit/3d43019550e75b379e73d0ef929b66a83c14c410", "message": "Adapt test for mocking compatibility (avoid testing latest vs any for equality)", "committedDate": "2020-09-06T19:58:37Z", "type": "commit"}, {"oid": "022c49338c13eeb3ba690264f708d8a1c681a50d", "url": "https://github.com/testcontainers/testcontainers-java/commit/022c49338c13eeb3ba690264f708d8a1c681a50d", "message": "Restore previous behaviour using a fixed version of Neo4j Enterprise image", "committedDate": "2020-09-24T08:12:21Z", "type": "commit"}, {"oid": "6cc5c5f189db27ef52ca8d575a15bcd0e3ba0d71", "url": "https://github.com/testcontainers/testcontainers-java/commit/6cc5c5f189db27ef52ca8d575a15bcd0e3ba0d71", "message": "Reinstate standard image check", "committedDate": "2020-09-24T08:22:11Z", "type": "commit"}, {"oid": "ef9633f406975b9d6d1b1b0094d46433211c3977", "url": "https://github.com/testcontainers/testcontainers-java/commit/ef9633f406975b9d6d1b1b0094d46433211c3977", "message": "Merge branch 'master' into image-overrides", "committedDate": "2020-09-24T08:42:01Z", "type": "commit"}, {"oid": "db4dabf7b5fd154d80d733555d7a982c598c9161", "url": "https://github.com/testcontainers/testcontainers-java/commit/db4dabf7b5fd154d80d733555d7a982c598c9161", "message": "Merge branch 'master' into image-overrides", "committedDate": "2020-09-25T07:46:43Z", "type": "commit"}, {"oid": "80e69718fac9719fb300fa465c0487cb1db92af3", "url": "https://github.com/testcontainers/testcontainers-java/commit/80e69718fac9719fb300fa465c0487cb1db92af3", "message": "Merge branch 'master' into image-overrides", "committedDate": "2020-09-28T16:14:00Z", "type": "commit"}, {"oid": "7794be675b1472f9722c61320f42b03f2545ffd4", "url": "https://github.com/testcontainers/testcontainers-java/commit/7794be675b1472f9722c61320f42b03f2545ffd4", "message": "Merge branch 'master' into image-overrides", "committedDate": "2020-09-28T18:12:10Z", "type": "commit"}, {"oid": "a1b1f48347612c05f5eac54876cea4529f16d195", "url": "https://github.com/testcontainers/testcontainers-java/commit/a1b1f48347612c05f5eac54876cea4529f16d195", "message": "Merge branch 'master' into image-overrides", "committedDate": "2020-09-29T08:46:12Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjE3NTc0OA==", "url": "https://github.com/testcontainers/testcontainers-java/pull/3021#discussion_r506175748", "bodyText": "I'm wondering if we could make this static constant public so people can simply do something like:\nnew ElasticsearchContainer(ElasticsearchContainer.DEFAULT_IMAGE_NAME.withTag(\"7.9.2\"));", "author": "dadoonet", "createdAt": "2020-10-16T08:37:53Z", "path": "modules/elasticsearch/src/main/java/org/testcontainers/elasticsearch/ElasticsearchContainer.java", "diffHunk": "@@ -28,35 +27,41 @@\n     private static final int ELASTICSEARCH_DEFAULT_TCP_PORT = 9300;\n \n     /**\n-     * Elasticsearch Docker base URL\n+     * Elasticsearch Docker base image\n      */\n-    private static final String ELASTICSEARCH_DEFAULT_IMAGE = \"docker.elastic.co/elasticsearch/elasticsearch\";\n+    private static final DockerImageName DEFAULT_IMAGE_NAME = DockerImageName.parse(\"docker.elastic.co/elasticsearch/elasticsearch\");", "originalCommit": "a1b1f48347612c05f5eac54876cea4529f16d195", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}