{"pr_number": 2548, "pr_title": "VNC recording with BrowserWebdriverContainer in Spock-Extension", "pr_createdAt": "2020-04-10T13:07:23Z", "pr_url": "https://github.com/testcontainers/testcontainers-java/pull/2548", "timeline": [{"oid": "8dde04a00523985cc308ce23c7c28fa84bc6ec7d", "url": "https://github.com/testcontainers/testcontainers-java/commit/8dde04a00523985cc308ce23c7c28fa84bc6ec7d", "message": "WIP for VNC recording with BrowserWebdriverContainer in Spock-Extension", "committedDate": "2020-04-10T11:23:08Z", "type": "commit"}, {"oid": "43a514861bd9e38b9077691d845bc01da8a052af", "url": "https://github.com/testcontainers/testcontainers-java/commit/43a514861bd9e38b9077691d845bc01da8a052af", "message": "Update to current interfaces and module structure", "committedDate": "2020-04-10T13:04:43Z", "type": "commit"}, {"oid": "c662c37a04739d77fa6f3abdc6b6ae297860a5b9", "url": "https://github.com/testcontainers/testcontainers-java/commit/c662c37a04739d77fa6f3abdc6b6ae297860a5b9", "message": "Use TestLifecycleAware interface", "committedDate": "2020-04-10T13:40:59Z", "type": "commit"}, {"oid": "98d947ef5a54ec9061cc8d638524cfbb747a3ee9", "url": "https://github.com/testcontainers/testcontainers-java/commit/98d947ef5a54ec9061cc8d638524cfbb747a3ee9", "message": "Use TestLifecycleAware methods", "committedDate": "2020-04-10T14:28:14Z", "type": "commit"}, {"oid": "1a995de63aa6f17230f7c07809de1432fa8c77b7", "url": "https://github.com/testcontainers/testcontainers-java/commit/1a995de63aa6f17230f7c07809de1432fa8c77b7", "message": "Use correct filenames for TestDescription", "committedDate": "2020-04-10T15:28:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA0ODQ1Mg==", "url": "https://github.com/testcontainers/testcontainers-java/pull/2548#discussion_r407048452", "bodyText": "AFAIK specName can be an arbitrary string. Perhaps we should encode it (similar to #1326)", "author": "bsideup", "createdAt": "2020-04-11T10:46:33Z", "path": "modules/spock/src/main/groovy/org/testcontainers/spock/SpockTestDescription.groovy", "diffHunk": "@@ -0,0 +1,36 @@\n+package org.testcontainers.spock\n+\n+import groovy.transform.PackageScope\n+import org.spockframework.runtime.extension.IMethodInvocation\n+import org.testcontainers.lifecycle.TestDescription\n+\n+/**\n+ * Spock specific implementation of a Testcontainers TestDescription.\n+ *\n+ * Filesystem friendly name is based on Specification and Feature.\n+ */\n+@PackageScope\n+class SpockTestDescription implements TestDescription {\n+\n+    String specName\n+    String featureName\n+\n+    static SpockTestDescription fromTestDescription(IMethodInvocation invocation) {\n+        return new SpockTestDescription([\n+            specName: invocation.spec.name,\n+            featureName: invocation.feature.name\n+        ])\n+    }\n+\n+    @Override\n+    String getTestId() {\n+        return null\n+    }\n+\n+    @Override\n+    String getFilesystemFriendlyName() {\n+        return [specName, featureName].collect {", "originalCommit": "1a995de63aa6f17230f7c07809de1432fa8c77b7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA1MzE5Mw==", "url": "https://github.com/testcontainers/testcontainers-java/pull/2548#discussion_r407053193", "bodyText": "Yes, both actually (since Groovy method names can be arbitrary Strings?).", "author": "kiview", "createdAt": "2020-04-11T11:36:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA0ODQ1Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA0ODQ1Mw==", "url": "https://github.com/testcontainers/testcontainers-java/pull/2548#discussion_r407048453", "bodyText": "huh?", "author": "bsideup", "createdAt": "2020-04-11T10:46:36Z", "path": "modules/spock/src/main/groovy/org/testcontainers/spock/SpockTestDescription.groovy", "diffHunk": "@@ -0,0 +1,36 @@\n+package org.testcontainers.spock\n+\n+import groovy.transform.PackageScope\n+import org.spockframework.runtime.extension.IMethodInvocation\n+import org.testcontainers.lifecycle.TestDescription\n+\n+/**\n+ * Spock specific implementation of a Testcontainers TestDescription.\n+ *\n+ * Filesystem friendly name is based on Specification and Feature.\n+ */\n+@PackageScope\n+class SpockTestDescription implements TestDescription {\n+\n+    String specName\n+    String featureName\n+\n+    static SpockTestDescription fromTestDescription(IMethodInvocation invocation) {\n+        return new SpockTestDescription([\n+            specName: invocation.spec.name,\n+            featureName: invocation.feature.name\n+        ])\n+    }\n+\n+    @Override\n+    String getTestId() {\n+        return null", "originalCommit": "1a995de63aa6f17230f7c07809de1432fa8c77b7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA1MzI5Ng==", "url": "https://github.com/testcontainers/testcontainers-java/pull/2548#discussion_r407053296", "bodyText": "This method is used nowhere, TBH I don't even understand why we have it in our interface and assumed it to come from refactoring from original JUnit test description.", "author": "kiview", "createdAt": "2020-04-11T11:37:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA0ODQ1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE4NjYyMw==", "url": "https://github.com/testcontainers/testcontainers-java/pull/2548#discussion_r407186623", "bodyText": "we could/should deprecate it, but let's not return null here anyways.", "author": "bsideup", "createdAt": "2020-04-12T11:46:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA0ODQ1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzIwNDQyNw==", "url": "https://github.com/testcontainers/testcontainers-java/pull/2548#discussion_r407204427", "bodyText": "What is semantically correct here then? Same then filesystemFriendly name?", "author": "kiview", "createdAt": "2020-04-12T14:16:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA0ODQ1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzIwNDQ3MA==", "url": "https://github.com/testcontainers/testcontainers-java/pull/2548#discussion_r407204470", "bodyText": "should work, yes \ud83d\udc4d", "author": "bsideup", "createdAt": "2020-04-12T14:17:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA0ODQ1Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA0ODUwMg==", "url": "https://github.com/testcontainers/testcontainers-java/pull/2548#discussion_r407048502", "bodyText": "private?", "author": "bsideup", "createdAt": "2020-04-11T10:47:13Z", "path": "modules/spock/src/main/groovy/org/testcontainers/spock/TestcontainersExtension.groovy", "diffHunk": "@@ -1,17 +1,32 @@\n package org.testcontainers.spock\n \n+import org.spockframework.runtime.AbstractRunListener\n import org.spockframework.runtime.extension.AbstractAnnotationDrivenExtension\n+import org.spockframework.runtime.model.ErrorInfo\n import org.spockframework.runtime.model.SpecInfo\n \n class TestcontainersExtension extends AbstractAnnotationDrivenExtension<Testcontainers> {\n \n     @Override\n     void visitSpecAnnotation(Testcontainers annotation, SpecInfo spec) {\n-        def interceptor = new TestcontainersMethodInterceptor(spec)\n+        def listener = new ErrorListener()\n+        def interceptor = new TestcontainersMethodInterceptor(spec, listener)\n         spec.addSetupSpecInterceptor(interceptor)\n         spec.addCleanupSpecInterceptor(interceptor)\n         spec.addSetupInterceptor(interceptor)\n         spec.addCleanupInterceptor(interceptor)\n+\n+        spec.addListener(listener)\n+\n+    }\n+\n+    class ErrorListener extends AbstractRunListener {", "originalCommit": "1a995de63aa6f17230f7c07809de1432fa8c77b7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA1MzMyMg==", "url": "https://github.com/testcontainers/testcontainers-java/pull/2548#discussion_r407053322", "bodyText": "sure", "author": "kiview", "createdAt": "2020-04-11T11:38:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA0ODUwMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA0ODU1OA==", "url": "https://github.com/testcontainers/testcontainers-java/pull/2548#discussion_r407048558", "bodyText": "TIL! Cool :)", "author": "bsideup", "createdAt": "2020-04-11T10:47:50Z", "path": "modules/spock/src/test/groovy/org/testcontainers/spock/BrowserVncRecordingIT.groovy", "diffHunk": "@@ -0,0 +1,176 @@\n+package org.testcontainers.spock\n+\n+import org.intellij.lang.annotations.Language\n+import org.junit.Rule\n+import org.junit.rules.TemporaryFolder\n+import spock.lang.Specification\n+import spock.util.EmbeddedSpecRunner\n+\n+class BrowserVncRecordingIT extends Specification {\n+\n+    @Rule\n+    TemporaryFolder temp\n+\n+    String recordingDir\n+\n+    def setup() {\n+        recordingDir = temp.getRoot().getAbsolutePath()\n+    }\n+\n+    def \"retains all recordings for RECORD_ALL if successful\"() {\n+        given:\n+\n+        //noinspection GrPackage\n+        @Language(\"groovy\")", "originalCommit": "1a995de63aa6f17230f7c07809de1432fa8c77b7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA0ODg5Mg==", "url": "https://github.com/testcontainers/testcontainers-java/pull/2548#discussion_r407048892", "bodyText": "FYI invocation.feature is marked as @Nullable", "author": "bsideup", "createdAt": "2020-04-11T10:51:09Z", "path": "modules/spock/src/main/groovy/org/testcontainers/spock/SpockTestDescription.groovy", "diffHunk": "@@ -0,0 +1,36 @@\n+package org.testcontainers.spock\n+\n+import groovy.transform.PackageScope\n+import org.spockframework.runtime.extension.IMethodInvocation\n+import org.testcontainers.lifecycle.TestDescription\n+\n+/**\n+ * Spock specific implementation of a Testcontainers TestDescription.\n+ *\n+ * Filesystem friendly name is based on Specification and Feature.\n+ */\n+@PackageScope\n+class SpockTestDescription implements TestDescription {\n+\n+    String specName\n+    String featureName\n+\n+    static SpockTestDescription fromTestDescription(IMethodInvocation invocation) {\n+        return new SpockTestDescription([\n+            specName: invocation.spec.name,\n+            featureName: invocation.feature.name", "originalCommit": "1a995de63aa6f17230f7c07809de1432fa8c77b7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA0ODk1Ng==", "url": "https://github.com/testcontainers/testcontainers-java/pull/2548#discussion_r407048956", "bodyText": "probably getMethod() is more appropriate here?", "author": "bsideup", "createdAt": "2020-04-11T10:51:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA0ODg5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA1MzM2Nw==", "url": "https://github.com/testcontainers/testcontainers-java/pull/2548#discussion_r407053367", "bodyText": "k, will check in the implementation.", "author": "kiview", "createdAt": "2020-04-11T11:38:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA0ODg5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA2NDE0MQ==", "url": "https://github.com/testcontainers/testcontainers-java/pull/2548#discussion_r407064141", "bodyText": "Actually I don't understand the null condition from the javadoc:\n   * Returns the feature which this method invocation belongs to (if any).\n   * Differs from {@code MethodInfo.getFeature()} in that it reflects the dynamic\n   * picture. For example, when a setup method is invoked, this method\n   * will return the corresponding feature, whereas {@code MethodInfo.getFeature()}\n   * will return {@code null}.", "author": "kiview", "createdAt": "2020-04-11T13:29:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA0ODg5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEwMDQ0OQ==", "url": "https://github.com/testcontainers/testcontainers-java/pull/2548#discussion_r407100449", "bodyText": "So if potentially called from within a setup block, we would still get the actual feature name, which is good IMO.\nIt is potentially null when called in the context of setupSpec.", "author": "kiview", "createdAt": "2020-04-11T19:16:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA0ODg5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEwMTM0NA==", "url": "https://github.com/testcontainers/testcontainers-java/pull/2548#discussion_r407101344", "bodyText": "So FYI, in the context of our extension execution getMethod() is actually null, so let's keep like this for now \ud83e\udd37\u200d\u2642\ufe0f", "author": "kiview", "createdAt": "2020-04-11T19:25:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA0ODg5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE4NjU3NQ==", "url": "https://github.com/testcontainers/testcontainers-java/pull/2548#discussion_r407186575", "bodyText": "Ok, I trust you here :)", "author": "bsideup", "createdAt": "2020-04-12T11:45:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA0ODg5Mg=="}], "type": "inlineReview"}, {"oid": "385a3a5ac6b9e1254ccb0b316b1a7b65d01d3976", "url": "https://github.com/testcontainers/testcontainers-java/commit/385a3a5ac6b9e1254ccb0b316b1a7b65d01d3976", "message": "URL encode spec and feature name, private ErrorListener", "committedDate": "2020-04-11T14:42:49Z", "type": "commit"}, {"oid": "068452c30705e686c7ae7815d8fd6f413a088ba8", "url": "https://github.com/testcontainers/testcontainers-java/commit/068452c30705e686c7ae7815d8fd6f413a088ba8", "message": "Merge branch 'master' into spock-vnc-recording", "committedDate": "2020-04-11T14:49:24Z", "type": "commit"}, {"oid": "f3bd659091d781d0d51d0841fcefc20d26cfd6ef", "url": "https://github.com/testcontainers/testcontainers-java/commit/f3bd659091d781d0d51d0841fcefc20d26cfd6ef", "message": "Merge branch 'master' into spock-vnc-recording", "committedDate": "2020-04-12T08:59:14Z", "type": "commit"}, {"oid": "fd34121f44c8b37e9e8664f8c9c4336165d04143", "url": "https://github.com/testcontainers/testcontainers-java/commit/fd34121f44c8b37e9e8664f8c9c4336165d04143", "message": "Merge branch 'master' into spock-vnc-recording", "committedDate": "2020-04-12T11:34:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE4NzE0NQ==", "url": "https://github.com/testcontainers/testcontainers-java/pull/2548#discussion_r407187145", "bodyText": "would be cool to parameterize these 3 tests into something like:\n| mode | fails | files |\n| RECORD_ALL | false | BrowserWebdriverContainerIT-should+record |\n| RECORD_FAILING | false | |\n| RECORD_FAILING | true | BrowserWebdriverContainerIT-should+record |", "author": "bsideup", "createdAt": "2020-04-12T11:50:12Z", "path": "modules/spock/src/test/groovy/org/testcontainers/spock/BrowserVncRecordingIT.groovy", "diffHunk": "@@ -0,0 +1,176 @@\n+package org.testcontainers.spock\n+\n+import org.intellij.lang.annotations.Language\n+import org.junit.Rule\n+import org.junit.rules.TemporaryFolder\n+import spock.lang.Specification\n+import spock.util.EmbeddedSpecRunner\n+\n+class BrowserVncRecordingIT extends Specification {\n+\n+    @Rule\n+    TemporaryFolder temp\n+\n+    String recordingDir\n+\n+    def setup() {\n+        recordingDir = temp.getRoot().getAbsolutePath()\n+    }\n+\n+    def \"retains all recordings for RECORD_ALL if successful\"() {", "originalCommit": "fd34121f44c8b37e9e8664f8c9c4336165d04143", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzIwNDM1NQ==", "url": "https://github.com/testcontainers/testcontainers-java/pull/2548#discussion_r407204355", "bodyText": "yes cool, I try", "author": "kiview", "createdAt": "2020-04-12T14:16:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE4NzE0NQ=="}], "type": "inlineReview"}, {"oid": "ba0050b7a703bc7b694d3df8895db598e707f86f", "url": "https://github.com/testcontainers/testcontainers-java/commit/ba0050b7a703bc7b694d3df8895db598e707f86f", "message": "Merge branch 'master' into spock-vnc-recording", "committedDate": "2020-04-12T14:14:45Z", "type": "commit"}, {"oid": "8a5cc8d0735c8765c426e6f6c1f5c42662a338bf", "url": "https://github.com/testcontainers/testcontainers-java/commit/8a5cc8d0735c8765c426e6f6c1f5c42662a338bf", "message": "Use filesystemFriendlyName as testId in SpockTestDescription", "committedDate": "2020-04-12T17:02:10Z", "type": "commit"}, {"oid": "59c1ac678b711611cb013d5cc8a077fc65c3fdba", "url": "https://github.com/testcontainers/testcontainers-java/commit/59c1ac678b711611cb013d5cc8a077fc65c3fdba", "message": "Use data-driven test in BrowserVncRecordingIT", "committedDate": "2020-04-12T17:23:41Z", "type": "commit"}, {"oid": "c1613825a71178f6dbc9e976ab433d1e2b6b97e8", "url": "https://github.com/testcontainers/testcontainers-java/commit/c1613825a71178f6dbc9e976ab433d1e2b6b97e8", "message": "Merge branch 'master' into spock-vnc-recording", "committedDate": "2020-04-12T17:58:47Z", "type": "commit"}]}