{"pr_number": 2531, "pr_title": "feat: #2530", "pr_createdAt": "2020-03-26T04:08:03Z", "pr_url": "https://github.com/alibaba/nacos/pull/2531", "timeline": [{"oid": "16ba537a3739f3fd09f634be23d385b0897cf593", "url": "https://github.com/alibaba/nacos/commit/16ba537a3739f3fd09f634be23d385b0897cf593", "message": "feat: #2530", "committedDate": "2020-03-26T04:06:35Z", "type": "commit"}, {"oid": "ce6dc51bcfe50505ef04e24ea4ec36f8dff914e2", "url": "https://github.com/alibaba/nacos/commit/ce6dc51bcfe50505ef04e24ea4ec36f8dff914e2", "message": "fix: fix some bugs", "committedDate": "2020-03-26T12:32:52Z", "type": "commit"}, {"oid": "da7ef15196a7320ee8b4a63d2597ed8923a86dae", "url": "https://github.com/alibaba/nacos/commit/da7ef15196a7320ee8b4a63d2597ed8923a86dae", "message": "style: fix code style", "committedDate": "2020-03-26T12:53:46Z", "type": "commit"}, {"oid": "5e518594838164e3db49bace4438e86728fbf18d", "url": "https://github.com/alibaba/nacos/commit/5e518594838164e3db49bace4438e86728fbf18d", "message": "style: remove useless folder", "committedDate": "2020-03-26T13:00:51Z", "type": "commit"}, {"oid": "f5125dd396233cbed97c3b7fcf79505e0e8e8b65", "url": "https://github.com/alibaba/nacos/commit/f5125dd396233cbed97c3b7fcf79505e0e8e8b65", "message": "test: Modified unit test", "committedDate": "2020-03-26T13:21:54Z", "type": "commit"}, {"oid": "418f88d4c68f2c345f4151a2276cc20878a9af21", "url": "https://github.com/alibaba/nacos/commit/418f88d4c68f2c345f4151a2276cc20878a9af21", "message": "docs: Configuration file information changes", "committedDate": "2020-03-27T04:36:07Z", "type": "commit"}, {"oid": "36b99c74ac215b10712c6cfc347bfc49b99a1cf7", "url": "https://github.com/alibaba/nacos/commit/36b99c74ac215b10712c6cfc347bfc49b99a1cf7", "message": "test: fix BeatReactorTest", "committedDate": "2020-03-27T05:15:31Z", "type": "commit"}, {"oid": "e0dd6cc65237de5495242df9fc29024a13c9e4e1", "url": "https://github.com/alibaba/nacos/commit/e0dd6cc65237de5495242df9fc29024a13c9e4e1", "message": "fix:", "committedDate": "2020-03-27T05:54:52Z", "type": "commit"}, {"oid": "57fc219f7258ae1453ef61970a0a92115b3a8c92", "url": "https://github.com/alibaba/nacos/commit/57fc219f7258ae1453ef61970a0a92115b3a8c92", "message": "style: Fix License problem", "committedDate": "2020-03-27T06:43:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk3NzkyNw==", "url": "https://github.com/alibaba/nacos/pull/2531#discussion_r398977927", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\tif (subResource == null) {\n          \n          \n            \n            \t\t\tif (Objects.isNull(subResource)) {", "author": "paderlol", "createdAt": "2020-03-27T00:58:59Z", "path": "common/src/main/java/com/alibaba/nacos/common/ThreadPoolManager.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/*\n+ * Copyright 1999-2018 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.alibaba.nacos.common;\n+\n+\n+import com.alibaba.nacos.common.utils.ShutdownUtils;\n+\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.NoSuchElementException;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * // TODO Access Metric\n+ *\n+ * For unified management of thread pool resources, the consumer can simply call\n+ * the register method to {@link ThreadPoolManager#register(String, String, ExecutorService)}\n+ * the thread pool that needs to be included in the life cycle management of the resource\n+ *\n+ * @author <a href=\"mailto:liaochuntao@live.com\">liaochuntao</a>\n+ */\n+public final class ThreadPoolManager {\n+\n+    private Map<String, Map<String, Set<ExecutorService>>> resourcesManager;\n+\n+    private Map<String, Object> lockers = new ConcurrentHashMap<String, Object>(8);\n+\n+    private static final ThreadPoolManager INSTANCE = new ThreadPoolManager();\n+\n+    static {\n+        INSTANCE.init();\n+\t\tShutdownUtils.addShutdownHook(new Thread(new Runnable() {\n+            @Override\n+            public void run() {\n+            \tSystem.out.println(\"[ThreadPoolManager] Start destroying ThreadPool\");\n+                INSTANCE.destroyAll();\n+\t\t\t\tSystem.out.println(\"[ThreadPoolManager] Destruction of the end\");\n+            }\n+        }));\n+    }\n+\n+    public static ThreadPoolManager getInstance() {\n+        return INSTANCE;\n+    }\n+\n+    private ThreadPoolManager() {}\n+\n+    private void init() {\n+        resourcesManager = new ConcurrentHashMap<String, Map<String, Set<ExecutorService>>>(8);\n+    }\n+\n+    /**\n+\t * Register the thread pool resources with the resource manager\n+\t *\n+     * @param biz business name\n+\t * @param resourceName resource name\n+\t * @param executor {@link ExecutorService}\n+\t */\n+\tpublic void register(String biz, String resourceName, ExecutorService executor) {\n+        synchronized(this) {\n+            if (!resourcesManager.containsKey(biz)) {\n+                resourcesManager.put(biz, new HashMap<String, Set<ExecutorService>>(8));\n+                lockers.put(biz, new Object());\n+            }\n+        }\n+        final Object monitor = lockers.get(biz);\n+        synchronized (monitor) {\n+            Map<String, Set<ExecutorService>> map = resourcesManager.get(biz);\n+            if (!map.containsKey(resourceName)) {\n+                map.put(resourceName, new HashSet<ExecutorService>());\n+            }\n+            map.get(resourceName).add(executor);\n+        }\n+    }\n+\n+\t/**\n+\t * Cancel the uniform lifecycle management for all threads under this resource\n+\t *\n+     * @param biz business name\n+\t * @param resourceName resource name\n+\t */\n+\tpublic void deregister(String biz, String resourceName) {\n+        if (resourcesManager.containsKey(biz)) {\n+            final Object monitor = lockers.get(biz);\n+            synchronized (monitor) {\n+                resourcesManager.get(biz).remove(resourceName);\n+            }\n+        }\n+    }\n+\n+\t/**\n+\t * Undoing the uniform lifecycle management of {@link ExecutorService} under this resource\n+\t *\n+     * @param biz business name\n+\t * @param resourceName resource name\n+\t * @param executor {@link ExecutorService}\n+\t */\n+\tpublic synchronized void deregister(String biz, String resourceName, ExecutorService executor) {\n+        if (resourcesManager.containsKey(biz)) {\n+            final Map<String, Set<ExecutorService>> subResourceMap = resourcesManager.get(biz);\n+            if (subResourceMap.containsKey(resourceName)) {\n+                subResourceMap.get(resourceName).remove(executor);\n+            }\n+        }\n+    }\n+\n+    public synchronized void destroy(String biz) {\n+\t    final Object monitor = lockers.get(biz);\n+\t    if (monitor == null) {\n+\t        throw new NoSuchElementException(\"This module does not have any thread pool resources : \" + biz);\n+        }\n+\t    synchronized (monitor) {\n+\t        Map<String, Set<ExecutorService>> subResource = resourcesManager.get(biz);\n+\t\t\tif (subResource == null) {", "originalCommit": "f5125dd396233cbed97c3b7fcf79505e0e8e8b65", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTE3OTMwMw==", "url": "https://github.com/alibaba/nacos/pull/2531#discussion_r399179303", "bodyText": "Because the client also relies on this package, and because of JDK restrictions, this method cannot be used", "author": "chuntaojun", "createdAt": "2020-03-27T10:48:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk3NzkyNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk4MjQ2Mw==", "url": "https://github.com/alibaba/nacos/pull/2531#discussion_r398982463", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tParameterizedType parameterizedType = (ParameterizedType) declaredClass.getGenericSuperclass();\n          \n          \n            \n            \t\tResolvableType.forClass(declaredClass).getSuperType().resolveGeneric(0)", "author": "paderlol", "createdAt": "2020-03-27T01:17:24Z", "path": "common/src/main/java/com/alibaba/nacos/common/utils/ClassUtils.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Copyright 1999-2018 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.alibaba.nacos.common.utils;\n+\n+import java.lang.reflect.ParameterizedType;\n+import java.lang.reflect.Type;\n+\n+/**\n+ * @author <a href=\"mailto:liaochuntao@live.com\">liaochuntao</a>\n+ */\n+public class ClassUtils {\n+\n+\tpublic static <T> Class<T> resolveGenericType(Class<?> declaredClass) {\n+\t\tParameterizedType parameterizedType = (ParameterizedType) declaredClass.getGenericSuperclass();", "originalCommit": "f5125dd396233cbed97c3b7fcf79505e0e8e8b65", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "3dd42fed27bd19e88b116f09fe46fcf3e785342f", "url": "https://github.com/alibaba/nacos/commit/3dd42fed27bd19e88b116f09fe46fcf3e785342f", "message": "refactor: Generic fetch method modification", "committedDate": "2020-03-27T10:48:00Z", "type": "commit"}, {"oid": "9133814bb9e4dd7474954dc111d61fc954bfcd2d", "url": "https://github.com/alibaba/nacos/commit/9133814bb9e4dd7474954dc111d61fc954bfcd2d", "message": "fix:", "committedDate": "2020-03-27T11:03:21Z", "type": "commit"}, {"oid": "89a8dddc1cfb615aa2fab153abd87940bac9d02e", "url": "https://github.com/alibaba/nacos/commit/89a8dddc1cfb615aa2fab153abd87940bac9d02e", "message": "Merge branch 'develop' of https://github.com/alibaba/nacos into feature_consistency", "committedDate": "2020-03-28T09:38:26Z", "type": "commit"}, {"oid": "586838e0a057ca36fdf580da62dec6b238ad2396", "url": "https://github.com/alibaba/nacos/commit/586838e0a057ca36fdf580da62dec6b238ad2396", "message": "Merge branch 'develop' of https://github.com/alibaba/nacos into feature_consistency", "committedDate": "2020-03-29T05:26:19Z", "type": "commit"}, {"oid": "66db5207d3f599fc49e657eeeeb7eb1b5a556bcc", "url": "https://github.com/alibaba/nacos/commit/66db5207d3f599fc49e657eeeeb7eb1b5a556bcc", "message": "fix: merge upstream develop", "committedDate": "2020-03-30T05:42:55Z", "type": "commit"}, {"oid": "9f8c19cafb607e001695bd581bccb2212dcdde48", "url": "https://github.com/alibaba/nacos/commit/9f8c19cafb607e001695bd581bccb2212dcdde48", "message": "refactor: Change the distributed ID logic", "committedDate": "2020-04-02T11:24:11Z", "type": "commit"}, {"oid": "42626c029ba152b6bcb64f3a4382b3fe4e6a900a", "url": "https://github.com/alibaba/nacos/commit/42626c029ba152b6bcb64f3a4382b3fe4e6a900a", "message": "docs:", "committedDate": "2020-04-03T11:06:55Z", "type": "commit"}, {"oid": "fad5e4d6ad23b272a8a451c3b6bc918d18417ffc", "url": "https://github.com/alibaba/nacos/commit/fad5e4d6ad23b272a8a451c3b6bc918d18417ffc", "message": "refactor: modify pom.xml", "committedDate": "2020-04-04T03:22:50Z", "type": "commit"}, {"oid": "57caa53015618dd47923dfbdb6fe055c0e7933a1", "url": "https://github.com/alibaba/nacos/commit/57caa53015618dd47923dfbdb6fe055c0e7933a1", "message": "style: Fix the PMD rule", "committedDate": "2020-04-04T04:22:05Z", "type": "commit"}, {"oid": "7586354476f4647095c6ce8594145a3f47ca6a6a", "url": "https://github.com/alibaba/nacos/commit/7586354476f4647095c6ce8594145a3f47ca6a6a", "message": "refactor: bug fix and refactor init logic", "committedDate": "2020-04-13T08:13:49Z", "type": "commit"}, {"oid": "1aca7bc3e006f945c89ba14f11ef9dea35a23d27", "url": "https://github.com/alibaba/nacos/commit/1aca7bc3e006f945c89ba14f11ef9dea35a23d27", "message": "refactor: core", "committedDate": "2020-04-13T14:44:08Z", "type": "commit"}, {"oid": "0b3b5e83acdb063bde6019b76090e384ecd0d4e2", "url": "https://github.com/alibaba/nacos/commit/0b3b5e83acdb063bde6019b76090e384ecd0d4e2", "message": "refactor(all): code optimization", "committedDate": "2020-04-16T15:50:08Z", "type": "commit"}, {"oid": "0af4d4f51019660df477258f6e9eff8cead7fb14", "url": "https://github.com/alibaba/nacos/commit/0af4d4f51019660df477258f6e9eff8cead7fb14", "message": "refactor: addressing mode refactoring", "committedDate": "2020-04-18T05:59:28Z", "type": "commit"}, {"oid": "a9918f2332277bd211bf959a55e1b6c4c1357fea", "url": "https://github.com/alibaba/nacos/commit/a9918f2332277bd211bf959a55e1b6c4c1357fea", "message": "refactor: request forwarding logic adjustment", "committedDate": "2020-04-19T01:25:28Z", "type": "commit"}, {"oid": "f222dccd3da08db2e5768700102b104870bdfce9", "url": "https://github.com/alibaba/nacos/commit/f222dccd3da08db2e5768700102b104870bdfce9", "message": "refactor: code optimization", "committedDate": "2020-04-21T09:14:59Z", "type": "commit"}, {"oid": "6a0d71a26dd7348b292641c66aceb5aebe049a19", "url": "https://github.com/alibaba/nacos/commit/6a0d71a26dd7348b292641c66aceb5aebe049a19", "message": "style: fix code style to adapter PMD", "committedDate": "2020-04-21T09:26:15Z", "type": "commit"}, {"oid": "ef405e09e2e5124a1c4b7d24129d2aa2333786a7", "url": "https://github.com/alibaba/nacos/commit/ef405e09e2e5124a1c4b7d24129d2aa2333786a7", "message": "refactor: remove complex listening logic and bug fixes", "committedDate": "2020-04-22T09:28:53Z", "type": "commit"}, {"oid": "853a8f587fe4f8e692e04648c575ad079c087613", "url": "https://github.com/alibaba/nacos/commit/853a8f587fe4f8e692e04648c575ad079c087613", "message": "refactor: core\n\nlogic optimization", "committedDate": "2020-04-22T14:16:27Z", "type": "commit"}, {"oid": "e4c475295cba3da3732d1be208f5737a945808c3", "url": "https://github.com/alibaba/nacos/commit/e4c475295cba3da3732d1be208f5737a945808c3", "message": "refactor: remove complex logic, RPC ports can be customized", "committedDate": "2020-04-23T07:22:16Z", "type": "commit"}, {"oid": "9c970b60ba99f27c1520d64e623e1c60b120df5e", "url": "https://github.com/alibaba/nacos/commit/9c970b60ba99f27c1520d64e623e1c60b120df5e", "message": "refactor: fix code stype", "committedDate": "2020-04-23T11:43:42Z", "type": "commit"}, {"oid": "41e1f049148a7330283d97ecdc2635563ad95bb8", "url": "https://github.com/alibaba/nacos/commit/41e1f049148a7330283d97ecdc2635563ad95bb8", "message": "refactor: code refactor", "committedDate": "2020-04-24T14:42:02Z", "type": "commit"}, {"oid": "bf94c96af1c98660434c31f957c6990e9c23af12", "url": "https://github.com/alibaba/nacos/commit/bf94c96af1c98660434c31f957c6990e9c23af12", "message": "refactor: none", "committedDate": "2020-04-24T14:43:15Z", "type": "commit"}, {"oid": "8b4a37724fe57a73de5c7a14f1c9e4bdb8506c3f", "url": "https://github.com/alibaba/nacos/commit/8b4a37724fe57a73de5c7a14f1c9e4bdb8506c3f", "message": "refactor: address mode adds setting parameters", "committedDate": "2020-04-26T08:29:19Z", "type": "commit"}, {"oid": "dd4b577755d60bbf58f91972d72139ffd7a932de", "url": "https://github.com/alibaba/nacos/commit/dd4b577755d60bbf58f91972d72139ffd7a932de", "message": "fix: fix double lock", "committedDate": "2020-04-26T13:24:12Z", "type": "commit"}, {"oid": "a025e56b3a52f85e64ee9f81db45589d9378a546", "url": "https://github.com/alibaba/nacos/commit/a025e56b3a52f85e64ee9f81db45589d9378a546", "message": "fix: fix config dump bug", "committedDate": "2020-04-28T07:08:38Z", "type": "commit"}, {"oid": "a937e3090c8eb99b4b2d3b572161097689590490", "url": "https://github.com/alibaba/nacos/commit/a937e3090c8eb99b4b2d3b572161097689590490", "message": "fix: fix some bugs", "committedDate": "2020-04-30T02:49:34Z", "type": "commit"}, {"oid": "041effebc734c61ade02baa6f201bce3f8781833", "url": "https://github.com/alibaba/nacos/commit/041effebc734c61ade02baa6f201bce3f8781833", "message": "refactor: some code refactor", "committedDate": "2020-04-30T05:46:04Z", "type": "commit"}, {"oid": "eb11ff945b79c10db28e6625672b151c0f8d0694", "url": "https://github.com/alibaba/nacos/commit/eb11ff945b79c10db28e6625672b151c0f8d0694", "message": "fix: fix standalone sync node info bug", "committedDate": "2020-04-30T12:02:54Z", "type": "commit"}, {"oid": "eca2aca6bba26b80e0c49ff2f18857017eaacdee", "url": "https://github.com/alibaba/nacos/commit/eca2aca6bba26b80e0c49ff2f18857017eaacdee", "message": "fix: bug fix", "committedDate": "2020-05-01T02:09:08Z", "type": "commit"}, {"oid": "a82bcc1d6ea590bdaeb09ca9a9540b7f5cbb08ae", "url": "https://github.com/alibaba/nacos/commit/a82bcc1d6ea590bdaeb09ca9a9540b7f5cbb08ae", "message": "fix: fix request transfer bug", "committedDate": "2020-05-02T05:12:38Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTA0MTkyNA==", "url": "https://github.com/alibaba/nacos/pull/2531#discussion_r419041924", "bodyText": "it's better to change to this way:\nif (!lockers.containsKey(namespace)){  //reduce  entry synchronized\nsynchronized(this) {\nif (!lockers.containsKey(namespace)) {\nlockers.put(namespace, new Object());\n}\n}\n}\nfinal Object monitor = lockers.get(namespace);\nsynchronized (monitor) {\nMap<String, Set> map = resourcesManager.get(namespace);\nif (map==null){\nmap=new HashMap<String, Set>(8);\nmap.put(group, new HashSet());\nmap.get(group).add(executor);\nresourcesManager.put(namespace, map);\nreturn;\n}\nif (!map.containsKey(group)) {\nmap.put(group, new HashSet());\n}\nmap.get(group).add(executor);\n}", "author": "lzp0412", "createdAt": "2020-05-03T03:44:17Z", "path": "common/src/main/java/com/alibaba/nacos/common/executor/ThreadPoolManager.java", "diffHunk": "@@ -0,0 +1,182 @@\n+/*\n+ * Copyright 1999-2018 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.alibaba.nacos.common.executor;\n+\n+\n+import com.alibaba.nacos.common.utils.ShutdownUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+/**\n+ * // TODO Access Metric\n+ *\n+ * For unified management of thread pool resources, the consumer can simply call\n+ * the register method to {@link ThreadPoolManager#register(String, String, ExecutorService)}\n+ * the thread pool that needs to be included in the life cycle management of the resource\n+ *\n+ * @author <a href=\"mailto:liaochuntao@live.com\">liaochuntao</a>\n+ */\n+public final class ThreadPoolManager {\n+\n+\tprivate static final Logger LOGGER = LoggerFactory.getLogger(ThreadPoolManager.class);\n+\n+    private Map<String, Map<String, Set<ExecutorService>>> resourcesManager;\n+\n+    private Map<String, Object> lockers = new ConcurrentHashMap<String, Object>(8);\n+\n+    private static final ThreadPoolManager INSTANCE = new ThreadPoolManager();\n+\n+    private static final AtomicBoolean CLOSED = new AtomicBoolean(false);\n+\n+    static {\n+        INSTANCE.init();\n+\t\tShutdownUtils.addShutdownHook(new Thread(new Runnable() {\n+            @Override\n+            public void run() {\n+\t\t\t\tLOGGER.warn(\"[ThreadPoolManager] Start destroying ThreadPool\");\n+                shutdown();\n+\t\t\t\tLOGGER.warn(\"[ThreadPoolManager] Destruction of the end\");\n+            }\n+        }));\n+    }\n+\n+    public static ThreadPoolManager getInstance() {\n+        return INSTANCE;\n+    }\n+\n+    private ThreadPoolManager() {}\n+\n+    private void init() {\n+        resourcesManager = new ConcurrentHashMap<>(8);\n+    }\n+\n+    /**\n+\t * Register the thread pool resources with the resource manager\n+\t *\n+     * @param namespace namespace name\n+\t * @param group group name\n+\t * @param executor {@link ExecutorService}\n+\t */\n+\tpublic void register(String namespace, String group, ExecutorService executor) {\n+        synchronized(this) {", "originalCommit": "a82bcc1d6ea590bdaeb09ca9a9540b7f5cbb08ae", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTA0MjE1Mg==", "url": "https://github.com/alibaba/nacos/pull/2531#discussion_r419042152", "bodyText": "it's no guarantee that the map would not be null\uff0cthe namespace  may be destroy by other thread when concurrent", "author": "lzp0412", "createdAt": "2020-05-03T03:46:52Z", "path": "common/src/main/java/com/alibaba/nacos/common/executor/ThreadPoolManager.java", "diffHunk": "@@ -0,0 +1,182 @@\n+/*\n+ * Copyright 1999-2018 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.alibaba.nacos.common.executor;\n+\n+\n+import com.alibaba.nacos.common.utils.ShutdownUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+/**\n+ * // TODO Access Metric\n+ *\n+ * For unified management of thread pool resources, the consumer can simply call\n+ * the register method to {@link ThreadPoolManager#register(String, String, ExecutorService)}\n+ * the thread pool that needs to be included in the life cycle management of the resource\n+ *\n+ * @author <a href=\"mailto:liaochuntao@live.com\">liaochuntao</a>\n+ */\n+public final class ThreadPoolManager {\n+\n+\tprivate static final Logger LOGGER = LoggerFactory.getLogger(ThreadPoolManager.class);\n+\n+    private Map<String, Map<String, Set<ExecutorService>>> resourcesManager;\n+\n+    private Map<String, Object> lockers = new ConcurrentHashMap<String, Object>(8);\n+\n+    private static final ThreadPoolManager INSTANCE = new ThreadPoolManager();\n+\n+    private static final AtomicBoolean CLOSED = new AtomicBoolean(false);\n+\n+    static {\n+        INSTANCE.init();\n+\t\tShutdownUtils.addShutdownHook(new Thread(new Runnable() {\n+            @Override\n+            public void run() {\n+\t\t\t\tLOGGER.warn(\"[ThreadPoolManager] Start destroying ThreadPool\");\n+                shutdown();\n+\t\t\t\tLOGGER.warn(\"[ThreadPoolManager] Destruction of the end\");\n+            }\n+        }));\n+    }\n+\n+    public static ThreadPoolManager getInstance() {\n+        return INSTANCE;\n+    }\n+\n+    private ThreadPoolManager() {}\n+\n+    private void init() {\n+        resourcesManager = new ConcurrentHashMap<>(8);\n+    }\n+\n+    /**\n+\t * Register the thread pool resources with the resource manager\n+\t *\n+     * @param namespace namespace name\n+\t * @param group group name\n+\t * @param executor {@link ExecutorService}\n+\t */\n+\tpublic void register(String namespace, String group, ExecutorService executor) {\n+        synchronized(this) {\n+            if (!resourcesManager.containsKey(namespace)) {\n+                resourcesManager.put(namespace, new HashMap<String, Set<ExecutorService>>(8));\n+                lockers.put(namespace, new Object());\n+            }\n+        }\n+        final Object monitor = lockers.get(namespace);\n+        synchronized (monitor) {\n+            Map<String, Set<ExecutorService>> map = resourcesManager.get(namespace);", "originalCommit": "a82bcc1d6ea590bdaeb09ca9a9540b7f5cbb08ae", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTgyMjAxNg==", "url": "https://github.com/alibaba/nacos/pull/2531#discussion_r419822016", "bodyText": "yes, I already fix it", "author": "chuntaojun", "createdAt": "2020-05-05T01:38:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTA0MjE1Mg=="}], "type": "inlineReview"}, {"oid": "2526c5d8f253909880d7680c794ba18b9ddad65f", "url": "https://github.com/alibaba/nacos/commit/2526c5d8f253909880d7680c794ba18b9ddad65f", "message": "fix: fix naming request redirect", "committedDate": "2020-05-03T12:26:35Z", "type": "commit"}, {"oid": "1563dc7104e1e82a6f1b9d64ac8b88e553ef68d5", "url": "https://github.com/alibaba/nacos/commit/1563dc7104e1e82a6f1b9d64ac8b88e553ef68d5", "message": "fix: fixed a problem where parameters were encoded multiple times", "committedDate": "2020-05-05T01:43:54Z", "type": "commit"}, {"oid": "60b84a49818005e10294001ecfd0c3ad0a069d23", "url": "https://github.com/alibaba/nacos/commit/60b84a49818005e10294001ecfd0c3ad0a069d23", "message": "refactor: merge upstream develop", "committedDate": "2020-05-05T08:06:02Z", "type": "commit"}, {"oid": "272abe6135e44dddc081d85c671ccc1fc4a52077", "url": "https://github.com/alibaba/nacos/commit/272abe6135e44dddc081d85c671ccc1fc4a52077", "message": "fix: fix parameter encode", "committedDate": "2020-05-06T10:33:18Z", "type": "commit"}, {"oid": "5e281892a19063d00b23a1118e9d0662042e148d", "url": "https://github.com/alibaba/nacos/commit/5e281892a19063d00b23a1118e9d0662042e148d", "message": "refactor: remove debug log", "committedDate": "2020-05-06T16:33:06Z", "type": "commit"}, {"oid": "5d6a0b539fb321f8487472fea48a8503980c56cb", "url": "https://github.com/alibaba/nacos/commit/5d6a0b539fb321f8487472fea48a8503980c56cb", "message": "fix: fix code style", "committedDate": "2020-05-06T16:45:28Z", "type": "commit"}, {"oid": "613a8d6c409d0820fbabd1c0cfbea84e15e9f84e", "url": "https://github.com/alibaba/nacos/commit/613a8d6c409d0820fbabd1c0cfbea84e15e9f84e", "message": "refactor: the raft port computes the rule changes", "committedDate": "2020-05-07T03:08:10Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIxNDA4MQ==", "url": "https://github.com/alibaba/nacos/pull/2531#discussion_r421214081", "bodyText": "\u53c2\u6570subKey\u770b\u8d77\u6765\u53ea\u7528\u4e86\u7b2c\u4e00\u4e2a\u503c\uff0c\u4e3a\u4ec0\u4e48\u8981\u652f\u6301\u591a\u53c2\u6570", "author": "JianweiWang", "createdAt": "2020-05-07T03:13:56Z", "path": "consistency/src/main/java/com/alibaba/nacos/consistency/ProtocolMetaData.java", "diffHunk": "@@ -0,0 +1,205 @@\n+/*\n+ * Copyright 1999-2018 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.alibaba.nacos.consistency;\n+\n+import com.alibaba.nacos.common.utils.Observable;\n+import com.alibaba.nacos.common.utils.Observer;\n+import org.javatuples.Pair;\n+\n+import java.util.Map;\n+import java.util.TreeMap;\n+import java.util.concurrent.BlockingQueue;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.LinkedBlockingQueue;\n+import java.util.concurrent.locks.ReentrantReadWriteLock;\n+\n+/**\n+ * Consistent protocol metadata information, <Key, <Key, Value >> structure\n+ * Listeners that can register to listen to changes in value\n+ *\n+ * @author <a href=\"mailto:liaochuntao@live.com\">liaochuntao</a>\n+ */\n+@SuppressWarnings(\"PMD.Rule:CollectionInitShouldAssignCapacityRule\")\n+public final class ProtocolMetaData {\n+\n+    private transient volatile boolean stopDefer = false;\n+\n+    private Map<String, MetaData> metaDataMap = new ConcurrentHashMap<>(4);\n+\n+    public Map<String, Map<Object, Object>> getMetaDataMap() {\n+        return metaDataMap.entrySet()\n+                .stream()\n+                .map(entry -> {\n+                    return Pair.with(entry.getKey(), entry.getValue().getItemMap()\n+                            .entrySet().stream()\n+                            .collect(TreeMap::new, (m, e) -> m.put(e.getKey(), e.getValue().getData()), TreeMap::putAll));\n+                })\n+                .collect(TreeMap::new, (m, e) -> m.put(e.getValue0(), e.getValue1()), TreeMap::putAll);\n+    }\n+\n+    // Does not guarantee thread safety, there may be two updates of\n+    // time-1 and time-2 (time-1 <time-2), but time-1 data overwrites time-2\n+\n+    public void load(final Map<String, Map<String, Object>> mapMap) {\n+        mapMap.forEach((s, map) -> {\n+            metaDataMap.computeIfAbsent(s, MetaData::new);\n+            final MetaData data = metaDataMap.get(s);\n+            map.forEach(data::put);\n+        });\n+    }\n+\n+    public Object get(String group, String... subKey) {", "originalCommit": "613a8d6c409d0820fbabd1c0cfbea84e15e9f84e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIxOTUwMw==", "url": "https://github.com/alibaba/nacos/pull/2531#discussion_r421219503", "bodyText": "\u7b49\u7b49\u79fb\u9664", "author": "chuntaojun", "createdAt": "2020-05-07T03:35:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIxNDA4MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIxNDMxNA==", "url": "https://github.com/alibaba/nacos/pull/2531#discussion_r421214314", "bodyText": "\u6709\u9519\u522b\u5b57\uff0c\u5e94\u8be5\u662funSubscribe", "author": "JianweiWang", "createdAt": "2020-05-07T03:14:45Z", "path": "consistency/src/main/java/com/alibaba/nacos/consistency/ProtocolMetaData.java", "diffHunk": "@@ -0,0 +1,205 @@\n+/*\n+ * Copyright 1999-2018 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.alibaba.nacos.consistency;\n+\n+import com.alibaba.nacos.common.utils.Observable;\n+import com.alibaba.nacos.common.utils.Observer;\n+import org.javatuples.Pair;\n+\n+import java.util.Map;\n+import java.util.TreeMap;\n+import java.util.concurrent.BlockingQueue;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.LinkedBlockingQueue;\n+import java.util.concurrent.locks.ReentrantReadWriteLock;\n+\n+/**\n+ * Consistent protocol metadata information, <Key, <Key, Value >> structure\n+ * Listeners that can register to listen to changes in value\n+ *\n+ * @author <a href=\"mailto:liaochuntao@live.com\">liaochuntao</a>\n+ */\n+@SuppressWarnings(\"PMD.Rule:CollectionInitShouldAssignCapacityRule\")\n+public final class ProtocolMetaData {\n+\n+    private transient volatile boolean stopDefer = false;\n+\n+    private Map<String, MetaData> metaDataMap = new ConcurrentHashMap<>(4);\n+\n+    public Map<String, Map<Object, Object>> getMetaDataMap() {\n+        return metaDataMap.entrySet()\n+                .stream()\n+                .map(entry -> {\n+                    return Pair.with(entry.getKey(), entry.getValue().getItemMap()\n+                            .entrySet().stream()\n+                            .collect(TreeMap::new, (m, e) -> m.put(e.getKey(), e.getValue().getData()), TreeMap::putAll));\n+                })\n+                .collect(TreeMap::new, (m, e) -> m.put(e.getValue0(), e.getValue1()), TreeMap::putAll);\n+    }\n+\n+    // Does not guarantee thread safety, there may be two updates of\n+    // time-1 and time-2 (time-1 <time-2), but time-1 data overwrites time-2\n+\n+    public void load(final Map<String, Map<String, Object>> mapMap) {\n+        mapMap.forEach((s, map) -> {\n+            metaDataMap.computeIfAbsent(s, MetaData::new);\n+            final MetaData data = metaDataMap.get(s);\n+            map.forEach(data::put);\n+        });\n+    }\n+\n+    public Object get(String group, String... subKey) {\n+        if (subKey == null || subKey.length == 0) {\n+            return metaDataMap.get(group);\n+        } else {\n+            final String key = subKey[0];\n+            if (metaDataMap.containsKey(group)) {\n+                return metaDataMap.get(group).get(key);\n+            }\n+            return null;\n+        }\n+    }\n+\n+    // If MetaData does not exist, actively create a MetaData\n+\n+    public void subscribe(final String group, final String key, final Observer observer) {\n+        metaDataMap.computeIfAbsent(group, s -> new MetaData(group));\n+        metaDataMap.get(group)\n+                .subscribe(key, observer);\n+    }\n+\n+    public void ubSubscribe(final String group, final String key, final Observer observer) {", "originalCommit": "613a8d6c409d0820fbabd1c0cfbea84e15e9f84e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIxNDU5OQ==", "url": "https://github.com/alibaba/nacos/pull/2531#discussion_r421214599", "bodyText": "\u4e0d\u662f\u6709\u516c\u5171\u7ebf\u7a0b\u6c60\u4e86\u4e48\uff1f", "author": "JianweiWang", "createdAt": "2020-05-07T03:15:58Z", "path": "consistency/src/main/java/com/alibaba/nacos/consistency/ProtocolMetaData.java", "diffHunk": "@@ -0,0 +1,205 @@\n+/*\n+ * Copyright 1999-2018 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.alibaba.nacos.consistency;\n+\n+import com.alibaba.nacos.common.utils.Observable;\n+import com.alibaba.nacos.common.utils.Observer;\n+import org.javatuples.Pair;\n+\n+import java.util.Map;\n+import java.util.TreeMap;\n+import java.util.concurrent.BlockingQueue;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.LinkedBlockingQueue;\n+import java.util.concurrent.locks.ReentrantReadWriteLock;\n+\n+/**\n+ * Consistent protocol metadata information, <Key, <Key, Value >> structure\n+ * Listeners that can register to listen to changes in value\n+ *\n+ * @author <a href=\"mailto:liaochuntao@live.com\">liaochuntao</a>\n+ */\n+@SuppressWarnings(\"PMD.Rule:CollectionInitShouldAssignCapacityRule\")\n+public final class ProtocolMetaData {\n+\n+    private transient volatile boolean stopDefer = false;\n+\n+    private Map<String, MetaData> metaDataMap = new ConcurrentHashMap<>(4);\n+\n+    public Map<String, Map<Object, Object>> getMetaDataMap() {\n+        return metaDataMap.entrySet()\n+                .stream()\n+                .map(entry -> {\n+                    return Pair.with(entry.getKey(), entry.getValue().getItemMap()\n+                            .entrySet().stream()\n+                            .collect(TreeMap::new, (m, e) -> m.put(e.getKey(), e.getValue().getData()), TreeMap::putAll));\n+                })\n+                .collect(TreeMap::new, (m, e) -> m.put(e.getValue0(), e.getValue1()), TreeMap::putAll);\n+    }\n+\n+    // Does not guarantee thread safety, there may be two updates of\n+    // time-1 and time-2 (time-1 <time-2), but time-1 data overwrites time-2\n+\n+    public void load(final Map<String, Map<String, Object>> mapMap) {\n+        mapMap.forEach((s, map) -> {\n+            metaDataMap.computeIfAbsent(s, MetaData::new);\n+            final MetaData data = metaDataMap.get(s);\n+            map.forEach(data::put);\n+        });\n+    }\n+\n+    public Object get(String group, String... subKey) {\n+        if (subKey == null || subKey.length == 0) {\n+            return metaDataMap.get(group);\n+        } else {\n+            final String key = subKey[0];\n+            if (metaDataMap.containsKey(group)) {\n+                return metaDataMap.get(group).get(key);\n+            }\n+            return null;\n+        }\n+    }\n+\n+    // If MetaData does not exist, actively create a MetaData\n+\n+    public void subscribe(final String group, final String key, final Observer observer) {\n+        metaDataMap.computeIfAbsent(group, s -> new MetaData(group));\n+        metaDataMap.get(group)\n+                .subscribe(key, observer);\n+    }\n+\n+    public void ubSubscribe(final String group, final String key, final Observer observer) {\n+        metaDataMap.computeIfAbsent(group, s -> new MetaData(group));\n+        metaDataMap.get(group)\n+                .unSubscribe(key, observer);\n+    }\n+\n+    public void stopDeferPublish() {\n+        stopDefer = true;\n+    }\n+\n+    @SuppressWarnings(\"PMD.ThreadPoolCreationRule\")\n+    public final class MetaData {\n+\n+        // Each biz does not affect each other\n+\n+        private transient final ExecutorService executor = Executors.newSingleThreadExecutor();", "originalCommit": "613a8d6c409d0820fbabd1c0cfbea84e15e9f84e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIyMjIwOQ==", "url": "https://github.com/alibaba/nacos/pull/2531#discussion_r421222209", "bodyText": "not support yet?", "author": "JianweiWang", "createdAt": "2020-05-07T03:47:41Z", "path": "core/src/main/java/com/alibaba/nacos/core/distributed/raft/JRaftOps.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Copyright 1999-2018 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.alibaba.nacos.core.distributed.raft;\n+\n+import com.alibaba.nacos.common.model.RestResult;\n+import com.alibaba.nacos.common.model.RestResultUtils;\n+import com.alibaba.nacos.core.distributed.raft.utils.JRaftConstants;\n+import com.alipay.sofa.jraft.CliService;\n+import com.alipay.sofa.jraft.JRaftUtils;\n+import com.alipay.sofa.jraft.Node;\n+import com.alipay.sofa.jraft.Status;\n+import com.alipay.sofa.jraft.conf.Configuration;\n+import com.alipay.sofa.jraft.entity.PeerId;\n+\n+import java.util.Map;\n+\n+/**\n+ * JRaft operations interface\n+ *\n+ * @author <a href=\"mailto:liaochuntao@live.com\">liaochuntao</a>\n+ */\n+@SuppressWarnings(\"PMD.ClassNamingShouldBeCamelRule\")\n+public class JRaftOps {\n+\n+\tprivate final JRaftServer raftServer;\n+\n+\tpublic JRaftOps(JRaftServer raftServer) {\n+\t\tthis.raftServer = raftServer;\n+\t}\n+\n+\tpublic RestResult<String> execute(String[] args) {\n+\t\treturn RestResultUtils.failed(\"not support yeah\");", "originalCommit": "613a8d6c409d0820fbabd1c0cfbea84e15e9f84e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI3MzQ4NQ==", "url": "https://github.com/alibaba/nacos/pull/2531#discussion_r421273485", "bodyText": "debug\u65e5\u5fd7\u6700\u597d\u5148\u5224\u65ad\u4e00\u4e0b\u5f53\u524d\u65e5\u5fd7\u7ea7\u522b", "author": "JianweiWang", "createdAt": "2020-05-07T06:43:35Z", "path": "core/src/main/java/com/alibaba/nacos/core/distributed/raft/NacosStateMachine.java", "diffHunk": "@@ -0,0 +1,340 @@\n+/*\n+ * Copyright 1999-2018 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.alibaba.nacos.core.distributed.raft;\n+\n+import com.alibaba.fastjson.JSON;\n+import com.alibaba.nacos.consistency.LogFuture;\n+import com.alibaba.nacos.consistency.LogProcessor;\n+import com.alibaba.nacos.consistency.cp.LogProcessor4CP;\n+import com.alibaba.nacos.consistency.entity.GetRequest;\n+import com.alibaba.nacos.consistency.entity.GetResponse;\n+import com.alibaba.nacos.consistency.entity.Log;\n+import com.alibaba.nacos.consistency.exception.ConsistencyException;\n+import com.alibaba.nacos.consistency.snapshot.LocalFileMeta;\n+import com.alibaba.nacos.consistency.snapshot.Reader;\n+import com.alibaba.nacos.consistency.snapshot.SnapshotOperation;\n+import com.alibaba.nacos.consistency.snapshot.Writer;\n+import com.alibaba.nacos.core.distributed.raft.utils.JRaftConstants;\n+import com.alibaba.nacos.core.distributed.raft.utils.JRaftLogOperation;\n+import com.alibaba.nacos.core.distributed.raft.utils.JRaftUtils;\n+import com.alibaba.nacos.core.notify.NotifyCenter;\n+import com.alibaba.nacos.core.utils.Loggers;\n+import com.alipay.sofa.jraft.Closure;\n+import com.alipay.sofa.jraft.Iterator;\n+import com.alipay.sofa.jraft.Node;\n+import com.alipay.sofa.jraft.RouteTable;\n+import com.alipay.sofa.jraft.Status;\n+import com.alipay.sofa.jraft.conf.Configuration;\n+import com.alipay.sofa.jraft.core.StateMachineAdapter;\n+import com.alipay.sofa.jraft.entity.LeaderChangeContext;\n+import com.alipay.sofa.jraft.entity.LocalFileMetaOutter;\n+import com.alipay.sofa.jraft.error.RaftError;\n+import com.alipay.sofa.jraft.error.RaftException;\n+import com.alipay.sofa.jraft.storage.snapshot.SnapshotReader;\n+import com.alipay.sofa.jraft.storage.snapshot.SnapshotWriter;\n+import org.apache.commons.lang3.BooleanUtils;\n+\n+import java.nio.ByteBuffer;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.function.BiConsumer;\n+\n+/**\n+ * @author <a href=\"mailto:liaochuntao@live.com\">liaochuntao</a>\n+ */\n+class NacosStateMachine extends StateMachineAdapter {\n+\n+\tprotected final JRaftServer server;\n+\tprotected final LogProcessor processor;\n+\tprivate final AtomicBoolean isLeader = new AtomicBoolean(false);\n+\tprivate final String groupId;\n+\tprivate Collection<JSnapshotOperation> operations;\n+\tprivate Node node;\n+\tprivate volatile long term = -1;\n+\tprivate volatile String leaderIp = \"unknown\";\n+\n+\tNacosStateMachine(JRaftServer server, LogProcessor4CP processor) {\n+\t\tthis.server = server;\n+\t\tthis.processor = processor;\n+\t\tthis.groupId = processor.group();\n+\n+\t\tadapterToJRaftSnapshot(processor.loadSnapshotOperate());\n+\t}\n+\n+\t@Override\n+\tpublic void onApply(Iterator iter) {\n+\t\tint index = 0;\n+\t\tint applied = 0;\n+\t\tLog log = null;\n+\t\tNacosClosure closure = null;\n+\t\ttry {\n+\t\t\twhile (iter.hasNext()) {\n+\t\t\t\tStatus status = Status.OK();\n+\t\t\t\ttry {\n+\t\t\t\t\tif (iter.done() != null) {\n+\t\t\t\t\t\tclosure = (NacosClosure) iter.done();\n+\t\t\t\t\t\tlog = closure.getLog();\n+\t\t\t\t\t}\n+\t\t\t\t\telse {\n+\t\t\t\t\t\tfinal ByteBuffer data = iter.getData();\n+\t\t\t\t\t\tlog = Log.parseFrom(data.array());\n+\t\t\t\t\t}\n+\n+\t\t\t\t\tLoggers.RAFT.debug(\"receive log : {}\", log);", "originalCommit": "613a8d6c409d0820fbabd1c0cfbea84e15e9f84e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}