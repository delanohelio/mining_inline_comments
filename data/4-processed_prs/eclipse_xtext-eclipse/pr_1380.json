{"pr_number": 1380, "pr_title": "Migrated the Xtend code from 'org.eclipse.xtext.xtext.ui' project to Java", "pr_createdAt": "2020-03-27T18:27:16Z", "pr_url": "https://github.com/eclipse/xtext-eclipse/pull/1380", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ2NzUwMw==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1380#discussion_r399467503", "bodyText": "@cdietrich @szarnekow @tivervac The size of this method and the nested lambda expressions made the task of translating to Java complicated. After migrating, I have verified this method twice; however, I may have overlooked something. I would appreciate it if you could do a thorough review of this method.", "author": "nbhusare", "createdAt": "2020-03-27T18:38:34Z", "path": "org.eclipse.xtext.xtext.ui/src/org/eclipse/xtext/xtext/ui/wizard/project/AdvancedNewProjectPage.java", "diffHunk": "@@ -0,0 +1,489 @@\n+/**\n+ * Copyright (c) 2015, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.xtext.ui.wizard.project;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import org.eclipse.jface.dialogs.IMessageProvider;\n+import org.eclipse.jface.fieldassist.ControlDecoration;\n+import org.eclipse.jface.fieldassist.FieldDecoration;\n+import org.eclipse.jface.fieldassist.FieldDecorationRegistry;\n+import org.eclipse.jface.wizard.WizardPage;\n+import org.eclipse.swt.SWT;\n+import org.eclipse.swt.events.SelectionAdapter;\n+import org.eclipse.swt.events.SelectionEvent;\n+import org.eclipse.swt.layout.GridData;\n+import org.eclipse.swt.layout.GridLayout;\n+import org.eclipse.swt.widgets.Button;\n+import org.eclipse.swt.widgets.Combo;\n+import org.eclipse.swt.widgets.Composite;\n+import org.eclipse.swt.widgets.Control;\n+import org.eclipse.swt.widgets.Group;\n+import org.eclipse.swt.widgets.Label;\n+import org.eclipse.ui.PlatformUI;\n+import org.eclipse.xtext.util.JUnitVersion;\n+import org.eclipse.xtext.xbase.lib.Procedures.Procedure0;\n+import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;\n+import org.eclipse.xtext.xtext.ui.internal.Activator;\n+import org.eclipse.xtext.xtext.wizard.BuildSystem;\n+import org.eclipse.xtext.xtext.wizard.LanguageServer;\n+import org.eclipse.xtext.xtext.wizard.SourceLayout;\n+import org.osgi.framework.Bundle;\n+\n+import com.google.common.collect.Iterables;\n+\n+public class AdvancedNewProjectPage extends WizardPage {\n+\n+\tprivate Button createUiProject;\n+\n+\tprivate Button createSDKProject;\n+\n+\tprivate Button createP2Project;\n+\n+\tprivate Button createWebProject;\n+\n+\tprivate Button createIdeProject;\n+\n+\tprivate Button createTestProject;\n+\n+\tprivate Button junitVersion4;\n+\n+\tprivate Button junitVersion5;\n+\n+\tprivate Combo preferredBuildSystem;\n+\n+\tprivate Combo createLanguageServer;\n+\n+\tprivate Combo sourceLayout;\n+\n+\tprivate Group createUiProjectSubGroup;\n+\n+\tprivate StatusWidget statusWidget;\n+\n+\tprivate boolean autoSelectIdeProject;\n+\n+\tprivate boolean autoSelectSDKProject;\n+\n+\tpublic AdvancedNewProjectPage(String pageName) {\n+\t\tsuper(pageName);\n+\t\tsetTitle(Messages.AdvancedNewProjectPage_WindowTitle);\n+\t\tsetDescription(Messages.AdvancedNewProjectPage_Description);\n+\t}\n+\n+\t@Override\n+\tpublic void createControl(Composite parent) {", "originalCommit": "a2005b48d1c57e4db2012726b81db3e4aed8c358", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTY1NTAyNg==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1380#discussion_r399655026", "bodyText": "LGTM except 1 comment. I feel your pain.", "author": "tivervac", "createdAt": "2020-03-28T12:07:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ2NzUwMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ2OTA2MQ==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1380#discussion_r399469061", "bodyText": "@cdietrich @szarnekow @tivervac Thorough review needed for this method too.", "author": "nbhusare", "createdAt": "2020-03-27T18:41:28Z", "path": "org.eclipse.xtext.xtext.ui/src/org/eclipse/xtext/xtext/ui/wizard/project/AdvancedNewProjectPage.java", "diffHunk": "@@ -0,0 +1,489 @@\n+/**\n+ * Copyright (c) 2015, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.xtext.ui.wizard.project;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import org.eclipse.jface.dialogs.IMessageProvider;\n+import org.eclipse.jface.fieldassist.ControlDecoration;\n+import org.eclipse.jface.fieldassist.FieldDecoration;\n+import org.eclipse.jface.fieldassist.FieldDecorationRegistry;\n+import org.eclipse.jface.wizard.WizardPage;\n+import org.eclipse.swt.SWT;\n+import org.eclipse.swt.events.SelectionAdapter;\n+import org.eclipse.swt.events.SelectionEvent;\n+import org.eclipse.swt.layout.GridData;\n+import org.eclipse.swt.layout.GridLayout;\n+import org.eclipse.swt.widgets.Button;\n+import org.eclipse.swt.widgets.Combo;\n+import org.eclipse.swt.widgets.Composite;\n+import org.eclipse.swt.widgets.Control;\n+import org.eclipse.swt.widgets.Group;\n+import org.eclipse.swt.widgets.Label;\n+import org.eclipse.ui.PlatformUI;\n+import org.eclipse.xtext.util.JUnitVersion;\n+import org.eclipse.xtext.xbase.lib.Procedures.Procedure0;\n+import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;\n+import org.eclipse.xtext.xtext.ui.internal.Activator;\n+import org.eclipse.xtext.xtext.wizard.BuildSystem;\n+import org.eclipse.xtext.xtext.wizard.LanguageServer;\n+import org.eclipse.xtext.xtext.wizard.SourceLayout;\n+import org.osgi.framework.Bundle;\n+\n+import com.google.common.collect.Iterables;\n+\n+public class AdvancedNewProjectPage extends WizardPage {\n+\n+\tprivate Button createUiProject;\n+\n+\tprivate Button createSDKProject;\n+\n+\tprivate Button createP2Project;\n+\n+\tprivate Button createWebProject;\n+\n+\tprivate Button createIdeProject;\n+\n+\tprivate Button createTestProject;\n+\n+\tprivate Button junitVersion4;\n+\n+\tprivate Button junitVersion5;\n+\n+\tprivate Combo preferredBuildSystem;\n+\n+\tprivate Combo createLanguageServer;\n+\n+\tprivate Combo sourceLayout;\n+\n+\tprivate Group createUiProjectSubGroup;\n+\n+\tprivate StatusWidget statusWidget;\n+\n+\tprivate boolean autoSelectIdeProject;\n+\n+\tprivate boolean autoSelectSDKProject;\n+\n+\tpublic AdvancedNewProjectPage(String pageName) {\n+\t\tsuper(pageName);\n+\t\tsetTitle(Messages.AdvancedNewProjectPage_WindowTitle);\n+\t\tsetDescription(Messages.AdvancedNewProjectPage_Description);\n+\t}\n+\n+\t@Override\n+\tpublic void createControl(Composite parent) {\n+\t\tComposite control = new Composite(parent, SWT.NONE);\n+\t\tcontrol.setLayout(new GridLayout(1, false));\n+\t\tcontrol.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true));\n+\n+\t\tGroup(control, (group) -> {\n+\t\t\tgroup.setText(Messages.AdvancedNewProjectPage_LabelFacets);\n+\t\t\tcreateUiProject = CheckBox(group, (button) -> button.setText(Messages.AdvancedNewProjectPage_projEclipse));\n+\t\t\tcreateUiProjectSubGroup = Group(group, (subGroup) -> {\n+\t\t\t\tcreateSDKProject = CheckBox(subGroup, (button) -> button.setText(Messages.AdvancedNewProjectPage_projEclipseSDKFeature));\n+\t\t\t\tcreateP2Project = CheckBox(subGroup, (button) -> button.setText(Messages.AdvancedNewProjectPage_projEclipseP2));\n+\t\t\t});\n+\t\t\tcreateWebProject = CheckBox(group, (button) -> {\n+\t\t\t\tbutton.setText(Messages.AdvancedNewProjectPage_projWeb);\n+\t\t\t\tbutton.setEnabled(true);\n+\t\t\t});\n+\t\t\tcreateIdeProject = CheckBox(group, (button) -> {\n+\t\t\t\tbutton.setText(Messages.AdvancedNewProjectPage_projIde);\n+\t\t\t\tbutton.setEnabled(false);\n+\t\t\t\tInfoDecoration(button, Messages.AdvancedNewProjectPage_projIde_description);\n+\t\t\t\tbutton.setLayoutData(new GridData(SWT.LEFT, SWT.CENTER, true, false));\n+\t\t\t});\n+\n+\t\t\tComposite childComposite = new Composite(group, SWT.NONE);\n+\t\t\tGridLayout layout = new GridLayout(4, false);\n+\t\t\tlayout.marginWidth = 0;\n+\t\t\tlayout.marginHeight = 0;\n+\t\t\tchildComposite.setLayout(layout);\n+\n+\t\t\tcreateTestProject = CheckBox(childComposite, (button) -> {\n+\t\t\t\tbutton.setText(Messages.WizardNewXtextProjectCreationPage_TestingSupport);\n+\t\t\t\tbutton.setLayoutData(new GridData(SWT.LEFT, SWT.CENTER, false, false));\n+\t\t\t});\n+\n+\t\t\tLabel label = new Label(childComposite, SWT.LEFT);\n+\t\t\tlabel.setText(Messages.AdvancedNewProjectPage_junitVersion);\n+\n+\t\t\tjunitVersion4 = Radio(childComposite, (button) -> {\n+\t\t\t\tbutton.setLayoutData(new GridData(SWT.LEFT, SWT.CENTER, false, false));\n+\t\t\t\tbutton.setText(\"4\");\n+\t\t\t\tbutton.setSelection(false);\n+\t\t\t});\n+\n+\t\t\tjunitVersion5 = Radio(childComposite, (button) -> {\n+\t\t\t\tbutton.setLayoutData(new GridData(SWT.LEFT, SWT.CENTER, false, false));\n+\t\t\t\tbutton.setText(\"5\");\n+\t\t\t\tbutton.setSelection(true);\n+\t\t\t});\n+\t\t});\n+\n+\t\tGroup(control, (group) -> {\n+\t\t\tgroup.setText(Messages.AdvancedNewProjectPage_prefBuildSys);\n+\t\t\tpreferredBuildSystem = DropDown(group, (combo) -> {\n+\t\t\t\tcombo.setEnabled(true);\n+\t\t\t\tcombo.setItems(Arrays.stream(BuildSystem.values()).map((sl) -> sl.toString()).toArray(String[] :: new));\n+\t\t\t});\n+\t\t});\n+\n+\t\tGroup(control, (group) -> {\n+\t\t\tgroup.setText(Messages.AdvancedNewProjectPage_languageServer);\n+\t\t\tcreateLanguageServer = DropDown(group, (combo) -> {\n+\t\t\t\tcombo.setEnabled(false);\n+\t\t\t\tcombo.setItems(Arrays.stream(LanguageServer.values()).map((sl) -> sl.toString()).toArray(String[] :: new));\n+\t\t\t\tInfoDecoration(combo, Messages.AdvancedNewProjectPage_languageServer_description);\n+\t\t\t});\n+\t\t});\n+\n+\t\tGroup(control, (group) -> {\n+\t\t\tgroup.setText(Messages.AdvancedNewProjectPage_srcLayout);\n+\t\t\tsourceLayout = DropDown(group, (combo) -> {\n+\t\t\t\tcombo.setEnabled(true);\n+\t\t\t\tcombo.setItems(Arrays.stream(SourceLayout.values()).map((sl) -> sl.toString()).toArray(String[] :: new));\n+\t\t\t});\n+\t\t});\n+\n+\t\tstatusWidget = new StatusWidget(control, SWT.NONE);\n+\t\tstatusWidget.setLayoutData(new GridData(SWT.FILL, SWT.TOP, true, false));\n+\n+\t\tList<Button> uiButtons = Arrays.asList(createUiProject, createWebProject);\n+\n+\t\tSelectionAdapter selectionControlUi = new SelectionAdapter() {\n+\t\t\t@Override\n+\t\t\tpublic void widgetSelected(SelectionEvent e) {\n+\t\t\t\tif (((Button) e.getSource()).getSelection()) {\n+\t\t\t\t\tif (!createIdeProject.getSelection()) {\n+\t\t\t\t\t\tautoSelectIdeProject = true;\n+\t\t\t\t\t}\n+\t\t\t\t\tcreateIdeProject.setSelection(true);\n+\t\t\t\t\tcreateIdeProject.setEnabled(false);\n+\t\t\t\t} else {\n+\t\t\t\t\tif (Iterables.all(uiButtons, (uiButton) -> !uiButton.getSelection())) {\n+\t\t\t\t\t\tcreateIdeProject.setEnabled(true);\n+\t\t\t\t\t}\n+\t\t\t\t\t// auto deselect SDK and p2 project when Eclipse plug-in is deselected\n+\t\t\t\t\tif (e.getSource() == createUiProject) {\n+\t\t\t\t\t\tcreateSDKProject.setSelection(false);\n+\t\t\t\t\t\tcreateP2Project.setSelection(false);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tvalidate(e);\n+\t\t\t}\n+\t\t};\n+\n+\t\tSelectionAdapter selectionControlUpdateSite = new SelectionAdapter() {\n+\t\t\t@Override\n+\t\t\tpublic void widgetSelected(SelectionEvent e) {\n+\t\t\t\tif (((Button) e.getSource()).getSelection()) {\n+\t\t\t\t\tif (!createSDKProject.getSelection()) {\n+\t\t\t\t\t\tautoSelectSDKProject = true;\n+\t\t\t\t\t}\n+\t\t\t\t\tcreateSDKProject.setSelection(true);\n+\t\t\t\t\tcreateSDKProject.setEnabled(false);\n+\t\t\t\t} else {\n+\t\t\t\t\tcreateSDKProject.setEnabled(true);\n+\t\t\t\t}\n+\t\t\t\tvalidate(e);\n+\t\t\t}\n+\t\t};\n+\n+\t\tcreateUiProject.addSelectionListener(new SelectionAdapter() {\n+\t\t\t@Override\n+\t\t\tpublic void widgetSelected(SelectionEvent e) {\n+\t\t\t\tboolean uiProjectSelected = createUiProject.getSelection();\n+\t\t\t\tcreateUiProjectSubGroup.setEnabled(uiProjectSelected);\n+\t\t\t\tcreateSDKProject.setEnabled(uiProjectSelected);\n+\t\t\t\tcreateP2Project.setEnabled(uiProjectSelected);\n+\t\t\t\tvalidate(e);\n+\t\t\t}\n+\t\t});\n+\n+\t\tpreferredBuildSystem.addSelectionListener(new SelectionAdapter() {\n+\t\t\t@Override\n+\t\t\tpublic void widgetSelected(SelectionEvent e) {\n+\t\t\t\tcreateLanguageServer.setEnabled(getPreferredBuildSystem() != BuildSystem.NONE);\n+\t\t\t\tvalidate(e);\n+\t\t\t}\n+\t\t});\n+\n+\t\tcreateLanguageServer.addSelectionListener(new SelectionAdapter() {\n+\t\t\t@Override\n+\t\t\tpublic void widgetSelected(SelectionEvent e) {\n+\t\t\t\tif (isSelected(createLanguageServer, LanguageServer.NONE)) {\n+\t\t\t\t\tif (Iterables.all(uiButtons, (uiButton) -> !uiButton.getSelection())) {\n+\t\t\t\t\t\tcreateIdeProject.setEnabled(true);\n+\t\t\t\t\t}\n+\t\t\t\t} else {\n+\t\t\t\t\tif (!createIdeProject.getSelection()) {\n+\t\t\t\t\t\tcreateIdeProject.setSelection(true);\n+\t\t\t\t\t\tautoSelectIdeProject = true;\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tvalidate(e);\n+\t\t\t}\n+\t\t});\n+\n+\t\tcreateTestProject.addSelectionListener(new SelectionAdapter() {\n+\t\t\t@Override\n+\t\t\tpublic void widgetSelected(SelectionEvent e) {\n+\t\t\t\tboolean enabled = createTestProject.getSelection() == true;\n+\t\t\t\tjunitVersion4.setEnabled(enabled);\n+\t\t\t\tjunitVersion5.setEnabled(enabled);\n+\t\t\t\tvalidate(e);\n+\t\t\t}\n+\t\t});\n+\t\t\n+\t\tSelectionAdapter selectionControl = new SelectionAdapter() {\n+\t\t\t@Override\n+\t\t\tpublic void widgetSelected(SelectionEvent e) {\n+\t\t\t\tvalidate(e);\n+\t\t\t}\n+\t\t};\n+\n+\t\tsourceLayout.addSelectionListener(selectionControl);\n+\t\tcreateUiProject.addSelectionListener(selectionControlUi);\n+\t\tcreateWebProject.addSelectionListener(selectionControlUi);\n+\t\tcreateIdeProject.addSelectionListener(selectionControl);\n+\t\tcreateSDKProject.addSelectionListener(selectionControl);\n+\t\tcreateP2Project.addSelectionListener(selectionControlUpdateSite);\n+\t\tcreateLanguageServer.addSelectionListener(selectionControl);\n+\t\tsetDefaults();\n+\n+\t\tPlatformUI.getWorkbench().getHelpSystem().setHelp(getShell(), \"org.eclipse.xtext.xtext.ui.newProject_Advanced\");\n+\t}\n+\n+\tpublic void validate(SelectionEvent e) {\n+\t\tstatusWidget.clearStatus();\n+\t\tcheckWidgets(e);\n+\t\tsetPageComplete(statusWidget.getSevertity() != IMessageProvider.ERROR);\n+\t}\n+\n+\tpublic void checkWidgets(SelectionEvent e) {", "originalCommit": "a2005b48d1c57e4db2012726b81db3e4aed8c358", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTc3NDkwNQ==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1380#discussion_r399774905", "bodyText": "I have verified the code changes by launching the wizard and going through all the conditions.", "author": "nbhusare", "createdAt": "2020-03-29T10:07:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ2OTA2MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ3MjIzNg==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1380#discussion_r399472236", "bodyText": "@cdietrich @szarnekow @tivervac The value of source can possibly be null here. It is referenced at multiple points in this method; however, it might fail here. I can add safety check code; however, it is not clear to me where to add it. Please suggest.", "author": "nbhusare", "createdAt": "2020-03-27T18:47:25Z", "path": "org.eclipse.xtext.xtext.ui/src/org/eclipse/xtext/xtext/ui/wizard/project/AdvancedNewProjectPage.java", "diffHunk": "@@ -0,0 +1,489 @@\n+/**\n+ * Copyright (c) 2015, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.xtext.ui.wizard.project;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import org.eclipse.jface.dialogs.IMessageProvider;\n+import org.eclipse.jface.fieldassist.ControlDecoration;\n+import org.eclipse.jface.fieldassist.FieldDecoration;\n+import org.eclipse.jface.fieldassist.FieldDecorationRegistry;\n+import org.eclipse.jface.wizard.WizardPage;\n+import org.eclipse.swt.SWT;\n+import org.eclipse.swt.events.SelectionAdapter;\n+import org.eclipse.swt.events.SelectionEvent;\n+import org.eclipse.swt.layout.GridData;\n+import org.eclipse.swt.layout.GridLayout;\n+import org.eclipse.swt.widgets.Button;\n+import org.eclipse.swt.widgets.Combo;\n+import org.eclipse.swt.widgets.Composite;\n+import org.eclipse.swt.widgets.Control;\n+import org.eclipse.swt.widgets.Group;\n+import org.eclipse.swt.widgets.Label;\n+import org.eclipse.ui.PlatformUI;\n+import org.eclipse.xtext.util.JUnitVersion;\n+import org.eclipse.xtext.xbase.lib.Procedures.Procedure0;\n+import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;\n+import org.eclipse.xtext.xtext.ui.internal.Activator;\n+import org.eclipse.xtext.xtext.wizard.BuildSystem;\n+import org.eclipse.xtext.xtext.wizard.LanguageServer;\n+import org.eclipse.xtext.xtext.wizard.SourceLayout;\n+import org.osgi.framework.Bundle;\n+\n+import com.google.common.collect.Iterables;\n+\n+public class AdvancedNewProjectPage extends WizardPage {\n+\n+\tprivate Button createUiProject;\n+\n+\tprivate Button createSDKProject;\n+\n+\tprivate Button createP2Project;\n+\n+\tprivate Button createWebProject;\n+\n+\tprivate Button createIdeProject;\n+\n+\tprivate Button createTestProject;\n+\n+\tprivate Button junitVersion4;\n+\n+\tprivate Button junitVersion5;\n+\n+\tprivate Combo preferredBuildSystem;\n+\n+\tprivate Combo createLanguageServer;\n+\n+\tprivate Combo sourceLayout;\n+\n+\tprivate Group createUiProjectSubGroup;\n+\n+\tprivate StatusWidget statusWidget;\n+\n+\tprivate boolean autoSelectIdeProject;\n+\n+\tprivate boolean autoSelectSDKProject;\n+\n+\tpublic AdvancedNewProjectPage(String pageName) {\n+\t\tsuper(pageName);\n+\t\tsetTitle(Messages.AdvancedNewProjectPage_WindowTitle);\n+\t\tsetDescription(Messages.AdvancedNewProjectPage_Description);\n+\t}\n+\n+\t@Override\n+\tpublic void createControl(Composite parent) {\n+\t\tComposite control = new Composite(parent, SWT.NONE);\n+\t\tcontrol.setLayout(new GridLayout(1, false));\n+\t\tcontrol.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true));\n+\n+\t\tGroup(control, (group) -> {\n+\t\t\tgroup.setText(Messages.AdvancedNewProjectPage_LabelFacets);\n+\t\t\tcreateUiProject = CheckBox(group, (button) -> button.setText(Messages.AdvancedNewProjectPage_projEclipse));\n+\t\t\tcreateUiProjectSubGroup = Group(group, (subGroup) -> {\n+\t\t\t\tcreateSDKProject = CheckBox(subGroup, (button) -> button.setText(Messages.AdvancedNewProjectPage_projEclipseSDKFeature));\n+\t\t\t\tcreateP2Project = CheckBox(subGroup, (button) -> button.setText(Messages.AdvancedNewProjectPage_projEclipseP2));\n+\t\t\t});\n+\t\t\tcreateWebProject = CheckBox(group, (button) -> {\n+\t\t\t\tbutton.setText(Messages.AdvancedNewProjectPage_projWeb);\n+\t\t\t\tbutton.setEnabled(true);\n+\t\t\t});\n+\t\t\tcreateIdeProject = CheckBox(group, (button) -> {\n+\t\t\t\tbutton.setText(Messages.AdvancedNewProjectPage_projIde);\n+\t\t\t\tbutton.setEnabled(false);\n+\t\t\t\tInfoDecoration(button, Messages.AdvancedNewProjectPage_projIde_description);\n+\t\t\t\tbutton.setLayoutData(new GridData(SWT.LEFT, SWT.CENTER, true, false));\n+\t\t\t});\n+\n+\t\t\tComposite childComposite = new Composite(group, SWT.NONE);\n+\t\t\tGridLayout layout = new GridLayout(4, false);\n+\t\t\tlayout.marginWidth = 0;\n+\t\t\tlayout.marginHeight = 0;\n+\t\t\tchildComposite.setLayout(layout);\n+\n+\t\t\tcreateTestProject = CheckBox(childComposite, (button) -> {\n+\t\t\t\tbutton.setText(Messages.WizardNewXtextProjectCreationPage_TestingSupport);\n+\t\t\t\tbutton.setLayoutData(new GridData(SWT.LEFT, SWT.CENTER, false, false));\n+\t\t\t});\n+\n+\t\t\tLabel label = new Label(childComposite, SWT.LEFT);\n+\t\t\tlabel.setText(Messages.AdvancedNewProjectPage_junitVersion);\n+\n+\t\t\tjunitVersion4 = Radio(childComposite, (button) -> {\n+\t\t\t\tbutton.setLayoutData(new GridData(SWT.LEFT, SWT.CENTER, false, false));\n+\t\t\t\tbutton.setText(\"4\");\n+\t\t\t\tbutton.setSelection(false);\n+\t\t\t});\n+\n+\t\t\tjunitVersion5 = Radio(childComposite, (button) -> {\n+\t\t\t\tbutton.setLayoutData(new GridData(SWT.LEFT, SWT.CENTER, false, false));\n+\t\t\t\tbutton.setText(\"5\");\n+\t\t\t\tbutton.setSelection(true);\n+\t\t\t});\n+\t\t});\n+\n+\t\tGroup(control, (group) -> {\n+\t\t\tgroup.setText(Messages.AdvancedNewProjectPage_prefBuildSys);\n+\t\t\tpreferredBuildSystem = DropDown(group, (combo) -> {\n+\t\t\t\tcombo.setEnabled(true);\n+\t\t\t\tcombo.setItems(Arrays.stream(BuildSystem.values()).map((sl) -> sl.toString()).toArray(String[] :: new));\n+\t\t\t});\n+\t\t});\n+\n+\t\tGroup(control, (group) -> {\n+\t\t\tgroup.setText(Messages.AdvancedNewProjectPage_languageServer);\n+\t\t\tcreateLanguageServer = DropDown(group, (combo) -> {\n+\t\t\t\tcombo.setEnabled(false);\n+\t\t\t\tcombo.setItems(Arrays.stream(LanguageServer.values()).map((sl) -> sl.toString()).toArray(String[] :: new));\n+\t\t\t\tInfoDecoration(combo, Messages.AdvancedNewProjectPage_languageServer_description);\n+\t\t\t});\n+\t\t});\n+\n+\t\tGroup(control, (group) -> {\n+\t\t\tgroup.setText(Messages.AdvancedNewProjectPage_srcLayout);\n+\t\t\tsourceLayout = DropDown(group, (combo) -> {\n+\t\t\t\tcombo.setEnabled(true);\n+\t\t\t\tcombo.setItems(Arrays.stream(SourceLayout.values()).map((sl) -> sl.toString()).toArray(String[] :: new));\n+\t\t\t});\n+\t\t});\n+\n+\t\tstatusWidget = new StatusWidget(control, SWT.NONE);\n+\t\tstatusWidget.setLayoutData(new GridData(SWT.FILL, SWT.TOP, true, false));\n+\n+\t\tList<Button> uiButtons = Arrays.asList(createUiProject, createWebProject);\n+\n+\t\tSelectionAdapter selectionControlUi = new SelectionAdapter() {\n+\t\t\t@Override\n+\t\t\tpublic void widgetSelected(SelectionEvent e) {\n+\t\t\t\tif (((Button) e.getSource()).getSelection()) {\n+\t\t\t\t\tif (!createIdeProject.getSelection()) {\n+\t\t\t\t\t\tautoSelectIdeProject = true;\n+\t\t\t\t\t}\n+\t\t\t\t\tcreateIdeProject.setSelection(true);\n+\t\t\t\t\tcreateIdeProject.setEnabled(false);\n+\t\t\t\t} else {\n+\t\t\t\t\tif (Iterables.all(uiButtons, (uiButton) -> !uiButton.getSelection())) {\n+\t\t\t\t\t\tcreateIdeProject.setEnabled(true);\n+\t\t\t\t\t}\n+\t\t\t\t\t// auto deselect SDK and p2 project when Eclipse plug-in is deselected\n+\t\t\t\t\tif (e.getSource() == createUiProject) {\n+\t\t\t\t\t\tcreateSDKProject.setSelection(false);\n+\t\t\t\t\t\tcreateP2Project.setSelection(false);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tvalidate(e);\n+\t\t\t}\n+\t\t};\n+\n+\t\tSelectionAdapter selectionControlUpdateSite = new SelectionAdapter() {\n+\t\t\t@Override\n+\t\t\tpublic void widgetSelected(SelectionEvent e) {\n+\t\t\t\tif (((Button) e.getSource()).getSelection()) {\n+\t\t\t\t\tif (!createSDKProject.getSelection()) {\n+\t\t\t\t\t\tautoSelectSDKProject = true;\n+\t\t\t\t\t}\n+\t\t\t\t\tcreateSDKProject.setSelection(true);\n+\t\t\t\t\tcreateSDKProject.setEnabled(false);\n+\t\t\t\t} else {\n+\t\t\t\t\tcreateSDKProject.setEnabled(true);\n+\t\t\t\t}\n+\t\t\t\tvalidate(e);\n+\t\t\t}\n+\t\t};\n+\n+\t\tcreateUiProject.addSelectionListener(new SelectionAdapter() {\n+\t\t\t@Override\n+\t\t\tpublic void widgetSelected(SelectionEvent e) {\n+\t\t\t\tboolean uiProjectSelected = createUiProject.getSelection();\n+\t\t\t\tcreateUiProjectSubGroup.setEnabled(uiProjectSelected);\n+\t\t\t\tcreateSDKProject.setEnabled(uiProjectSelected);\n+\t\t\t\tcreateP2Project.setEnabled(uiProjectSelected);\n+\t\t\t\tvalidate(e);\n+\t\t\t}\n+\t\t});\n+\n+\t\tpreferredBuildSystem.addSelectionListener(new SelectionAdapter() {\n+\t\t\t@Override\n+\t\t\tpublic void widgetSelected(SelectionEvent e) {\n+\t\t\t\tcreateLanguageServer.setEnabled(getPreferredBuildSystem() != BuildSystem.NONE);\n+\t\t\t\tvalidate(e);\n+\t\t\t}\n+\t\t});\n+\n+\t\tcreateLanguageServer.addSelectionListener(new SelectionAdapter() {\n+\t\t\t@Override\n+\t\t\tpublic void widgetSelected(SelectionEvent e) {\n+\t\t\t\tif (isSelected(createLanguageServer, LanguageServer.NONE)) {\n+\t\t\t\t\tif (Iterables.all(uiButtons, (uiButton) -> !uiButton.getSelection())) {\n+\t\t\t\t\t\tcreateIdeProject.setEnabled(true);\n+\t\t\t\t\t}\n+\t\t\t\t} else {\n+\t\t\t\t\tif (!createIdeProject.getSelection()) {\n+\t\t\t\t\t\tcreateIdeProject.setSelection(true);\n+\t\t\t\t\t\tautoSelectIdeProject = true;\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tvalidate(e);\n+\t\t\t}\n+\t\t});\n+\n+\t\tcreateTestProject.addSelectionListener(new SelectionAdapter() {\n+\t\t\t@Override\n+\t\t\tpublic void widgetSelected(SelectionEvent e) {\n+\t\t\t\tboolean enabled = createTestProject.getSelection() == true;\n+\t\t\t\tjunitVersion4.setEnabled(enabled);\n+\t\t\t\tjunitVersion5.setEnabled(enabled);\n+\t\t\t\tvalidate(e);\n+\t\t\t}\n+\t\t});\n+\t\t\n+\t\tSelectionAdapter selectionControl = new SelectionAdapter() {\n+\t\t\t@Override\n+\t\t\tpublic void widgetSelected(SelectionEvent e) {\n+\t\t\t\tvalidate(e);\n+\t\t\t}\n+\t\t};\n+\n+\t\tsourceLayout.addSelectionListener(selectionControl);\n+\t\tcreateUiProject.addSelectionListener(selectionControlUi);\n+\t\tcreateWebProject.addSelectionListener(selectionControlUi);\n+\t\tcreateIdeProject.addSelectionListener(selectionControl);\n+\t\tcreateSDKProject.addSelectionListener(selectionControl);\n+\t\tcreateP2Project.addSelectionListener(selectionControlUpdateSite);\n+\t\tcreateLanguageServer.addSelectionListener(selectionControl);\n+\t\tsetDefaults();\n+\n+\t\tPlatformUI.getWorkbench().getHelpSystem().setHelp(getShell(), \"org.eclipse.xtext.xtext.ui.newProject_Advanced\");\n+\t}\n+\n+\tpublic void validate(SelectionEvent e) {\n+\t\tstatusWidget.clearStatus();\n+\t\tcheckWidgets(e);\n+\t\tsetPageComplete(statusWidget.getSevertity() != IMessageProvider.ERROR);\n+\t}\n+\n+\tpublic void checkWidgets(SelectionEvent e) {\n+\t\tList<Button> uiButtons = Arrays.asList(createUiProject, createWebProject);\n+\n+\t\tif (isSelected(preferredBuildSystem, BuildSystem.MAVEN) && !isBundleResolved(\"org.eclipse.m2e.maven.runtime\")) {\n+\t\t\treportIssue(WARNING, Messages.AdvancedNewProjectPage_noM2e);\n+\t\t}\n+\t\tif (isSelected(preferredBuildSystem, BuildSystem.GRADLE) && !isBundleResolved(\"org.eclipse.buildship.core\")) {\n+\t\t\treportIssue(WARNING, Messages.AdvancedNewProjectPage_noBuildship);\n+\t\t}\n+\t\tif (isSelected(preferredBuildSystem, BuildSystem.GRADLE) && createUiProject.getSelection()) {\n+\t\t\treportIssue(WARNING, Messages.AdvancedNewProjectPage_eclipseAndGradleWarn);\n+\t\t}\n+\t\tif (createUiProject.getSelection() && createP2Project.getSelection() && !createSDKProject.getSelection()) {\n+\t\t\taddIssue(INFORMATION, Messages.AdvancedNewProjectPage_p2AndSdkInfo);\n+\t\t}\n+\n+\t\tObject source = null;\n+\t\tif (e != null) {\n+\t\t\tsource = e.getSource();\n+\t\t}\n+\n+\t\tif (createUiProject.getSelection() && !isSelected(sourceLayout, SourceLayout.PLAIN)) {\n+\t\t\tif (createUiProject == source) {\n+\t\t\t\tString message = \"'\" + createUiProject.getText() + \"' requires \" + SourceLayout.PLAIN + \" source layout. \" //\n+\t\t\t\t\t\t+ \"Please <a>select '\" + SourceLayout.PLAIN + \"'</a> source layout.\";\n+\t\t\t\treportIssue(ERROR, message, () -> select(sourceLayout, SourceLayout.PLAIN));\n+\t\t\t} else {\n+\t\t\t\tString message = SourceLayout.MAVEN + \" source layout is not supported by the '\" + createUiProject.getText() + \"' project. \" //\n+\t\t\t\t\t\t+ \"Please <a>deselect '\" + createUiProject.getText() + \"'</a>.\";\n+\t\t\t\treportIssue(ERROR, message, () -> createUiProject.setSelection(false));\n+\t\t\t}\n+\t\t}\n+\n+\t\tif (isSelected(preferredBuildSystem, BuildSystem.NONE) && isSelected(sourceLayout, SourceLayout.MAVEN)) {\n+\t\t\tif (preferredBuildSystem == source) {\n+\t\t\t\tString message = \"Maven/Gradle source layout is not supported without a build system. \" //\n+\t\t\t\t\t\t+ \"Please <a>select '\" + SourceLayout.PLAIN + \"'</a> source layout.\";\n+\t\t\t\treportIssue(ERROR, message, () -> select(sourceLayout, SourceLayout.PLAIN));\n+\t\t\t} else {\n+\t\t\t\tString message = \"Maven/Gradle source layout is only supported when using Maven or Gradle build system. \" //\n+\t\t\t\t\t\t+ \"You need to choose Maven or Gradle build system. Select <a>Gradle</a> build.\";\n+\t\t\t\treportIssue(ERROR, message, () -> select(preferredBuildSystem, BuildSystem.GRADLE));\n+\t\t\t}\n+\t\t}\n+\n+\t\tif (createWebProject.getSelection() && isSelected(preferredBuildSystem, BuildSystem.NONE)) {\n+\t\t\tif (preferredBuildSystem == source) {\n+\t\t\t\tString message = \"The '\" + createWebProject.getText() + \"' project can not be build without a build system. \" //\n+\t\t\t\t\t\t+ \"Please <a>deselect '\" + createWebProject.getText() + \"'</a>.\";\n+\t\t\t\treportIssue(ERROR, message, () -> createWebProject.setSelection(false));\n+\t\t\t} else {\n+\t\t\t\tString message = \"To build the '\" + createWebProject.getText() + \"' \" //\n+\t\t\t\t\t\t+ \"project, you need to choose Maven or Gradle build system.\" //\n+\t\t\t\t\t\t+ \"Select <a>Gradle</a> build.\";\n+\t\t\t\treportIssue(ERROR, message, () -> select(preferredBuildSystem, BuildSystem.GRADLE));\n+\t\t\t}\n+\t\t}\n+\n+\t\tboolean isSelected = Iterables.any(uiButtons, uiButton -> uiButton.getSelection());\n+\t\tif (isSelected) {\n+\t\t\tcreateIdeProject.setEnabled(false);\n+\t\t}\n+\n+\t\tif (autoSelectIdeProject) {\n+\t\t\tautoSelectIdeProject = false;\n+\t\t\tString message = \"'\" + createIdeProject.getText() + \"' project was automatically selected as option '\"\n+\t\t\t\t\t+ ((Button) source).getText() + \"' requires it.\";", "originalCommit": "a2005b48d1c57e4db2012726b81db3e4aed8c358", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTY1Mzg2Ng==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1380#discussion_r399653866", "bodyText": "Suggested on line 291", "author": "tivervac", "createdAt": "2020-03-28T11:54:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ3MjIzNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTc3MDk4Nw==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1380#discussion_r399770987", "bodyText": "After a bit of debugging, I learned that the control would come in the current if block or the following one only if the value of autoSelectIdeProject and autoSelectSDKProject is true. For this to happen, you have to select either \u201cEclipse Plug-in\u201d or \u201cCreate update site\u201d option, in which case the value of the source won't be null.\nI think it is ok if we don't add any safety check for the source object.", "author": "nbhusare", "createdAt": "2020-03-29T09:31:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ3MjIzNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ3NDgyMg==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1380#discussion_r399474822", "bodyText": "The original code gets the enum using BuildSystem.values.head. I have replaced it with BuildSystem.NONE. Similar change is done in the below two lines. I hope is it fine.", "author": "nbhusare", "createdAt": "2020-03-27T18:52:14Z", "path": "org.eclipse.xtext.xtext.ui/src/org/eclipse/xtext/xtext/ui/wizard/project/AdvancedNewProjectPage.java", "diffHunk": "@@ -0,0 +1,489 @@\n+/**\n+ * Copyright (c) 2015, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.xtext.ui.wizard.project;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import org.eclipse.jface.dialogs.IMessageProvider;\n+import org.eclipse.jface.fieldassist.ControlDecoration;\n+import org.eclipse.jface.fieldassist.FieldDecoration;\n+import org.eclipse.jface.fieldassist.FieldDecorationRegistry;\n+import org.eclipse.jface.wizard.WizardPage;\n+import org.eclipse.swt.SWT;\n+import org.eclipse.swt.events.SelectionAdapter;\n+import org.eclipse.swt.events.SelectionEvent;\n+import org.eclipse.swt.layout.GridData;\n+import org.eclipse.swt.layout.GridLayout;\n+import org.eclipse.swt.widgets.Button;\n+import org.eclipse.swt.widgets.Combo;\n+import org.eclipse.swt.widgets.Composite;\n+import org.eclipse.swt.widgets.Control;\n+import org.eclipse.swt.widgets.Group;\n+import org.eclipse.swt.widgets.Label;\n+import org.eclipse.ui.PlatformUI;\n+import org.eclipse.xtext.util.JUnitVersion;\n+import org.eclipse.xtext.xbase.lib.Procedures.Procedure0;\n+import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;\n+import org.eclipse.xtext.xtext.ui.internal.Activator;\n+import org.eclipse.xtext.xtext.wizard.BuildSystem;\n+import org.eclipse.xtext.xtext.wizard.LanguageServer;\n+import org.eclipse.xtext.xtext.wizard.SourceLayout;\n+import org.osgi.framework.Bundle;\n+\n+import com.google.common.collect.Iterables;\n+\n+public class AdvancedNewProjectPage extends WizardPage {\n+\n+\tprivate Button createUiProject;\n+\n+\tprivate Button createSDKProject;\n+\n+\tprivate Button createP2Project;\n+\n+\tprivate Button createWebProject;\n+\n+\tprivate Button createIdeProject;\n+\n+\tprivate Button createTestProject;\n+\n+\tprivate Button junitVersion4;\n+\n+\tprivate Button junitVersion5;\n+\n+\tprivate Combo preferredBuildSystem;\n+\n+\tprivate Combo createLanguageServer;\n+\n+\tprivate Combo sourceLayout;\n+\n+\tprivate Group createUiProjectSubGroup;\n+\n+\tprivate StatusWidget statusWidget;\n+\n+\tprivate boolean autoSelectIdeProject;\n+\n+\tprivate boolean autoSelectSDKProject;\n+\n+\tpublic AdvancedNewProjectPage(String pageName) {\n+\t\tsuper(pageName);\n+\t\tsetTitle(Messages.AdvancedNewProjectPage_WindowTitle);\n+\t\tsetDescription(Messages.AdvancedNewProjectPage_Description);\n+\t}\n+\n+\t@Override\n+\tpublic void createControl(Composite parent) {\n+\t\tComposite control = new Composite(parent, SWT.NONE);\n+\t\tcontrol.setLayout(new GridLayout(1, false));\n+\t\tcontrol.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true));\n+\n+\t\tGroup(control, (group) -> {\n+\t\t\tgroup.setText(Messages.AdvancedNewProjectPage_LabelFacets);\n+\t\t\tcreateUiProject = CheckBox(group, (button) -> button.setText(Messages.AdvancedNewProjectPage_projEclipse));\n+\t\t\tcreateUiProjectSubGroup = Group(group, (subGroup) -> {\n+\t\t\t\tcreateSDKProject = CheckBox(subGroup, (button) -> button.setText(Messages.AdvancedNewProjectPage_projEclipseSDKFeature));\n+\t\t\t\tcreateP2Project = CheckBox(subGroup, (button) -> button.setText(Messages.AdvancedNewProjectPage_projEclipseP2));\n+\t\t\t});\n+\t\t\tcreateWebProject = CheckBox(group, (button) -> {\n+\t\t\t\tbutton.setText(Messages.AdvancedNewProjectPage_projWeb);\n+\t\t\t\tbutton.setEnabled(true);\n+\t\t\t});\n+\t\t\tcreateIdeProject = CheckBox(group, (button) -> {\n+\t\t\t\tbutton.setText(Messages.AdvancedNewProjectPage_projIde);\n+\t\t\t\tbutton.setEnabled(false);\n+\t\t\t\tInfoDecoration(button, Messages.AdvancedNewProjectPage_projIde_description);\n+\t\t\t\tbutton.setLayoutData(new GridData(SWT.LEFT, SWT.CENTER, true, false));\n+\t\t\t});\n+\n+\t\t\tComposite childComposite = new Composite(group, SWT.NONE);\n+\t\t\tGridLayout layout = new GridLayout(4, false);\n+\t\t\tlayout.marginWidth = 0;\n+\t\t\tlayout.marginHeight = 0;\n+\t\t\tchildComposite.setLayout(layout);\n+\n+\t\t\tcreateTestProject = CheckBox(childComposite, (button) -> {\n+\t\t\t\tbutton.setText(Messages.WizardNewXtextProjectCreationPage_TestingSupport);\n+\t\t\t\tbutton.setLayoutData(new GridData(SWT.LEFT, SWT.CENTER, false, false));\n+\t\t\t});\n+\n+\t\t\tLabel label = new Label(childComposite, SWT.LEFT);\n+\t\t\tlabel.setText(Messages.AdvancedNewProjectPage_junitVersion);\n+\n+\t\t\tjunitVersion4 = Radio(childComposite, (button) -> {\n+\t\t\t\tbutton.setLayoutData(new GridData(SWT.LEFT, SWT.CENTER, false, false));\n+\t\t\t\tbutton.setText(\"4\");\n+\t\t\t\tbutton.setSelection(false);\n+\t\t\t});\n+\n+\t\t\tjunitVersion5 = Radio(childComposite, (button) -> {\n+\t\t\t\tbutton.setLayoutData(new GridData(SWT.LEFT, SWT.CENTER, false, false));\n+\t\t\t\tbutton.setText(\"5\");\n+\t\t\t\tbutton.setSelection(true);\n+\t\t\t});\n+\t\t});\n+\n+\t\tGroup(control, (group) -> {\n+\t\t\tgroup.setText(Messages.AdvancedNewProjectPage_prefBuildSys);\n+\t\t\tpreferredBuildSystem = DropDown(group, (combo) -> {\n+\t\t\t\tcombo.setEnabled(true);\n+\t\t\t\tcombo.setItems(Arrays.stream(BuildSystem.values()).map((sl) -> sl.toString()).toArray(String[] :: new));\n+\t\t\t});\n+\t\t});\n+\n+\t\tGroup(control, (group) -> {\n+\t\t\tgroup.setText(Messages.AdvancedNewProjectPage_languageServer);\n+\t\t\tcreateLanguageServer = DropDown(group, (combo) -> {\n+\t\t\t\tcombo.setEnabled(false);\n+\t\t\t\tcombo.setItems(Arrays.stream(LanguageServer.values()).map((sl) -> sl.toString()).toArray(String[] :: new));\n+\t\t\t\tInfoDecoration(combo, Messages.AdvancedNewProjectPage_languageServer_description);\n+\t\t\t});\n+\t\t});\n+\n+\t\tGroup(control, (group) -> {\n+\t\t\tgroup.setText(Messages.AdvancedNewProjectPage_srcLayout);\n+\t\t\tsourceLayout = DropDown(group, (combo) -> {\n+\t\t\t\tcombo.setEnabled(true);\n+\t\t\t\tcombo.setItems(Arrays.stream(SourceLayout.values()).map((sl) -> sl.toString()).toArray(String[] :: new));\n+\t\t\t});\n+\t\t});\n+\n+\t\tstatusWidget = new StatusWidget(control, SWT.NONE);\n+\t\tstatusWidget.setLayoutData(new GridData(SWT.FILL, SWT.TOP, true, false));\n+\n+\t\tList<Button> uiButtons = Arrays.asList(createUiProject, createWebProject);\n+\n+\t\tSelectionAdapter selectionControlUi = new SelectionAdapter() {\n+\t\t\t@Override\n+\t\t\tpublic void widgetSelected(SelectionEvent e) {\n+\t\t\t\tif (((Button) e.getSource()).getSelection()) {\n+\t\t\t\t\tif (!createIdeProject.getSelection()) {\n+\t\t\t\t\t\tautoSelectIdeProject = true;\n+\t\t\t\t\t}\n+\t\t\t\t\tcreateIdeProject.setSelection(true);\n+\t\t\t\t\tcreateIdeProject.setEnabled(false);\n+\t\t\t\t} else {\n+\t\t\t\t\tif (Iterables.all(uiButtons, (uiButton) -> !uiButton.getSelection())) {\n+\t\t\t\t\t\tcreateIdeProject.setEnabled(true);\n+\t\t\t\t\t}\n+\t\t\t\t\t// auto deselect SDK and p2 project when Eclipse plug-in is deselected\n+\t\t\t\t\tif (e.getSource() == createUiProject) {\n+\t\t\t\t\t\tcreateSDKProject.setSelection(false);\n+\t\t\t\t\t\tcreateP2Project.setSelection(false);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tvalidate(e);\n+\t\t\t}\n+\t\t};\n+\n+\t\tSelectionAdapter selectionControlUpdateSite = new SelectionAdapter() {\n+\t\t\t@Override\n+\t\t\tpublic void widgetSelected(SelectionEvent e) {\n+\t\t\t\tif (((Button) e.getSource()).getSelection()) {\n+\t\t\t\t\tif (!createSDKProject.getSelection()) {\n+\t\t\t\t\t\tautoSelectSDKProject = true;\n+\t\t\t\t\t}\n+\t\t\t\t\tcreateSDKProject.setSelection(true);\n+\t\t\t\t\tcreateSDKProject.setEnabled(false);\n+\t\t\t\t} else {\n+\t\t\t\t\tcreateSDKProject.setEnabled(true);\n+\t\t\t\t}\n+\t\t\t\tvalidate(e);\n+\t\t\t}\n+\t\t};\n+\n+\t\tcreateUiProject.addSelectionListener(new SelectionAdapter() {\n+\t\t\t@Override\n+\t\t\tpublic void widgetSelected(SelectionEvent e) {\n+\t\t\t\tboolean uiProjectSelected = createUiProject.getSelection();\n+\t\t\t\tcreateUiProjectSubGroup.setEnabled(uiProjectSelected);\n+\t\t\t\tcreateSDKProject.setEnabled(uiProjectSelected);\n+\t\t\t\tcreateP2Project.setEnabled(uiProjectSelected);\n+\t\t\t\tvalidate(e);\n+\t\t\t}\n+\t\t});\n+\n+\t\tpreferredBuildSystem.addSelectionListener(new SelectionAdapter() {\n+\t\t\t@Override\n+\t\t\tpublic void widgetSelected(SelectionEvent e) {\n+\t\t\t\tcreateLanguageServer.setEnabled(getPreferredBuildSystem() != BuildSystem.NONE);\n+\t\t\t\tvalidate(e);\n+\t\t\t}\n+\t\t});\n+\n+\t\tcreateLanguageServer.addSelectionListener(new SelectionAdapter() {\n+\t\t\t@Override\n+\t\t\tpublic void widgetSelected(SelectionEvent e) {\n+\t\t\t\tif (isSelected(createLanguageServer, LanguageServer.NONE)) {\n+\t\t\t\t\tif (Iterables.all(uiButtons, (uiButton) -> !uiButton.getSelection())) {\n+\t\t\t\t\t\tcreateIdeProject.setEnabled(true);\n+\t\t\t\t\t}\n+\t\t\t\t} else {\n+\t\t\t\t\tif (!createIdeProject.getSelection()) {\n+\t\t\t\t\t\tcreateIdeProject.setSelection(true);\n+\t\t\t\t\t\tautoSelectIdeProject = true;\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tvalidate(e);\n+\t\t\t}\n+\t\t});\n+\n+\t\tcreateTestProject.addSelectionListener(new SelectionAdapter() {\n+\t\t\t@Override\n+\t\t\tpublic void widgetSelected(SelectionEvent e) {\n+\t\t\t\tboolean enabled = createTestProject.getSelection() == true;\n+\t\t\t\tjunitVersion4.setEnabled(enabled);\n+\t\t\t\tjunitVersion5.setEnabled(enabled);\n+\t\t\t\tvalidate(e);\n+\t\t\t}\n+\t\t});\n+\t\t\n+\t\tSelectionAdapter selectionControl = new SelectionAdapter() {\n+\t\t\t@Override\n+\t\t\tpublic void widgetSelected(SelectionEvent e) {\n+\t\t\t\tvalidate(e);\n+\t\t\t}\n+\t\t};\n+\n+\t\tsourceLayout.addSelectionListener(selectionControl);\n+\t\tcreateUiProject.addSelectionListener(selectionControlUi);\n+\t\tcreateWebProject.addSelectionListener(selectionControlUi);\n+\t\tcreateIdeProject.addSelectionListener(selectionControl);\n+\t\tcreateSDKProject.addSelectionListener(selectionControl);\n+\t\tcreateP2Project.addSelectionListener(selectionControlUpdateSite);\n+\t\tcreateLanguageServer.addSelectionListener(selectionControl);\n+\t\tsetDefaults();\n+\n+\t\tPlatformUI.getWorkbench().getHelpSystem().setHelp(getShell(), \"org.eclipse.xtext.xtext.ui.newProject_Advanced\");\n+\t}\n+\n+\tpublic void validate(SelectionEvent e) {\n+\t\tstatusWidget.clearStatus();\n+\t\tcheckWidgets(e);\n+\t\tsetPageComplete(statusWidget.getSevertity() != IMessageProvider.ERROR);\n+\t}\n+\n+\tpublic void checkWidgets(SelectionEvent e) {\n+\t\tList<Button> uiButtons = Arrays.asList(createUiProject, createWebProject);\n+\n+\t\tif (isSelected(preferredBuildSystem, BuildSystem.MAVEN) && !isBundleResolved(\"org.eclipse.m2e.maven.runtime\")) {\n+\t\t\treportIssue(WARNING, Messages.AdvancedNewProjectPage_noM2e);\n+\t\t}\n+\t\tif (isSelected(preferredBuildSystem, BuildSystem.GRADLE) && !isBundleResolved(\"org.eclipse.buildship.core\")) {\n+\t\t\treportIssue(WARNING, Messages.AdvancedNewProjectPage_noBuildship);\n+\t\t}\n+\t\tif (isSelected(preferredBuildSystem, BuildSystem.GRADLE) && createUiProject.getSelection()) {\n+\t\t\treportIssue(WARNING, Messages.AdvancedNewProjectPage_eclipseAndGradleWarn);\n+\t\t}\n+\t\tif (createUiProject.getSelection() && createP2Project.getSelection() && !createSDKProject.getSelection()) {\n+\t\t\taddIssue(INFORMATION, Messages.AdvancedNewProjectPage_p2AndSdkInfo);\n+\t\t}\n+\n+\t\tObject source = null;\n+\t\tif (e != null) {\n+\t\t\tsource = e.getSource();\n+\t\t}\n+\n+\t\tif (createUiProject.getSelection() && !isSelected(sourceLayout, SourceLayout.PLAIN)) {\n+\t\t\tif (createUiProject == source) {\n+\t\t\t\tString message = \"'\" + createUiProject.getText() + \"' requires \" + SourceLayout.PLAIN + \" source layout. \" //\n+\t\t\t\t\t\t+ \"Please <a>select '\" + SourceLayout.PLAIN + \"'</a> source layout.\";\n+\t\t\t\treportIssue(ERROR, message, () -> select(sourceLayout, SourceLayout.PLAIN));\n+\t\t\t} else {\n+\t\t\t\tString message = SourceLayout.MAVEN + \" source layout is not supported by the '\" + createUiProject.getText() + \"' project. \" //\n+\t\t\t\t\t\t+ \"Please <a>deselect '\" + createUiProject.getText() + \"'</a>.\";\n+\t\t\t\treportIssue(ERROR, message, () -> createUiProject.setSelection(false));\n+\t\t\t}\n+\t\t}\n+\n+\t\tif (isSelected(preferredBuildSystem, BuildSystem.NONE) && isSelected(sourceLayout, SourceLayout.MAVEN)) {\n+\t\t\tif (preferredBuildSystem == source) {\n+\t\t\t\tString message = \"Maven/Gradle source layout is not supported without a build system. \" //\n+\t\t\t\t\t\t+ \"Please <a>select '\" + SourceLayout.PLAIN + \"'</a> source layout.\";\n+\t\t\t\treportIssue(ERROR, message, () -> select(sourceLayout, SourceLayout.PLAIN));\n+\t\t\t} else {\n+\t\t\t\tString message = \"Maven/Gradle source layout is only supported when using Maven or Gradle build system. \" //\n+\t\t\t\t\t\t+ \"You need to choose Maven or Gradle build system. Select <a>Gradle</a> build.\";\n+\t\t\t\treportIssue(ERROR, message, () -> select(preferredBuildSystem, BuildSystem.GRADLE));\n+\t\t\t}\n+\t\t}\n+\n+\t\tif (createWebProject.getSelection() && isSelected(preferredBuildSystem, BuildSystem.NONE)) {\n+\t\t\tif (preferredBuildSystem == source) {\n+\t\t\t\tString message = \"The '\" + createWebProject.getText() + \"' project can not be build without a build system. \" //\n+\t\t\t\t\t\t+ \"Please <a>deselect '\" + createWebProject.getText() + \"'</a>.\";\n+\t\t\t\treportIssue(ERROR, message, () -> createWebProject.setSelection(false));\n+\t\t\t} else {\n+\t\t\t\tString message = \"To build the '\" + createWebProject.getText() + \"' \" //\n+\t\t\t\t\t\t+ \"project, you need to choose Maven or Gradle build system.\" //\n+\t\t\t\t\t\t+ \"Select <a>Gradle</a> build.\";\n+\t\t\t\treportIssue(ERROR, message, () -> select(preferredBuildSystem, BuildSystem.GRADLE));\n+\t\t\t}\n+\t\t}\n+\n+\t\tboolean isSelected = Iterables.any(uiButtons, uiButton -> uiButton.getSelection());\n+\t\tif (isSelected) {\n+\t\t\tcreateIdeProject.setEnabled(false);\n+\t\t}\n+\n+\t\tif (autoSelectIdeProject) {\n+\t\t\tautoSelectIdeProject = false;\n+\t\t\tString message = \"'\" + createIdeProject.getText() + \"' project was automatically selected as option '\"\n+\t\t\t\t\t+ ((Button) source).getText() + \"' requires it.\";\n+\t\t\treportIssue(INFORMATION, message);\n+\t\t}\n+\t\t\n+\t\tif (autoSelectSDKProject) {\n+\t\t\tautoSelectSDKProject = false;\n+\t\t\tString message = \"'\" + createSDKProject.getText() + \"' was automatically selected as option '\" //\n+\t\t\t\t\t+ ((Button) source).getText() + \"' requires it.\";\n+\t\t\treportIssue(INFORMATION, message);\n+\t\t}\n+\t}\n+\n+\tprotected void select(Combo combo, Enum<?> enu) {\n+\t\tString[] items = combo.getItems();\n+\t\tfor (int i = 0; i < items.length; i++) {\n+\t\t\tif (enu.toString().equals(items[i])) {\n+\t\t\t\tcombo.select(i);\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tprotected boolean isSelected(Combo combo, Enum<?> enu) {\n+\t\treturn enu.toString().equals(combo.getText());\n+\t}\n+\n+\tprotected <T extends Control> void reportIssue(int severity, String text) {\n+\t\treportIssue(severity, text, () -> {});\n+\t}\n+\n+\tprotected <T extends Control> void reportIssue(int severity, String text, Procedure0 fix) {\n+\t\tstatusWidget.setStatus(severity, text, fix, () -> {\n+\t\t\tvalidate(null);\n+\t\t});\n+\t\t((Composite) getControl()).layout();\n+\t}\n+\n+\tprotected <T extends Control> void addIssue(int severity, String text) {\n+\t\tstatusWidget.addStatus(severity, text);\n+\t\t((Composite) getControl()).layout();\n+\t}\n+\n+\tprotected boolean isBundleResolved(String bundleId) {\n+\t\tBundle[] bundles = Activator.getInstance().getBundle().getBundleContext().getBundles();\n+\t\tOptional<Bundle> bundle = Arrays.stream(bundles).filter(b -> bundleId.equals(b.getSymbolicName())).findFirst();\n+\t\treturn bundle.isPresent() && (bundle.get().getState() & (Bundle.RESOLVED | Bundle.STARTING) | Bundle.ACTIVE) != 0;\n+\t}\n+\n+\tprotected Group Group(Composite parent, Procedure1<? super Group> config) {\n+\t\tGroup group = new Group(parent, SWT.NONE);\n+\t\tgroup.setFont(parent.getFont());\n+\t\tgroup.setLayout(new GridLayout(1, false));\n+\t\tgroup.setLayoutData(new GridData(SWT.FILL, SWT.TOP, true, false));\n+\t\tconfig.apply(group);\n+\t\treturn group;\n+\t}\n+\n+\tprotected Button CheckBox(Composite composite, Procedure1<? super Button> config) {\n+\t\tButton button = new Button(composite, SWT.CHECK);\n+\t\tbutton.setFont(button.getParent().getFont());\n+\t\tbutton.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false));\n+\t\tconfig.apply(button);\n+\t\treturn button;\n+\t}\n+\n+\tprotected Button Radio(Composite composite, Procedure1<? super Button> config) {\n+\t\tButton button = new Button(composite, SWT.RADIO);\n+\t\tbutton.setFont(button.getParent().getFont());\n+\t\tbutton.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false));\n+\t\tconfig.apply(button);\n+\t\treturn button;\n+\t}\n+\n+\tprotected Combo DropDown(Composite parent, Procedure1<? super Combo> config) {\n+\t\tCombo combo = new Combo(parent, SWT.READ_ONLY);\n+\t\tcombo.setFont(parent.getFont());\n+\t\tcombo.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));\n+\t\tconfig.apply(combo);\n+\t\treturn combo;\n+\t}\n+\n+\tprotected ControlDecoration InfoDecoration(Control control, String text) {\n+\t\tFieldDecoration infoField = FieldDecorationRegistry.getDefault().getFieldDecoration(FieldDecorationRegistry.DEC_INFORMATION);\n+\t\tControlDecoration controlDecoration = new ControlDecoration(control, (SWT.TOP + SWT.RIGHT));\n+\t\tcontrolDecoration.setImage(infoField.getImage());\n+\t\tcontrolDecoration.setDescriptionText(text);\n+\t\tcontrolDecoration.setShowHover(true);\n+\t\treturn controlDecoration;\n+\t}\n+\n+\tprotected void setDefaults() {\n+\t\tcreateUiProject.setSelection(true);\n+\t\tcreateIdeProject.setSelection(true);\n+\t\tcreateTestProject.setSelection(true);\n+\t\tcreateWebProject.setSelection(false);\n+\t\tcreateSDKProject.setSelection(false);\n+\t\tcreateP2Project.setSelection(false);\n+\n+\t\tselect(preferredBuildSystem, BuildSystem.NONE);", "originalCommit": "a2005b48d1c57e4db2012726b81db3e4aed8c358", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTY1NTg3Nw==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1380#discussion_r399655877", "bodyText": "LGTM", "author": "tivervac", "createdAt": "2020-03-28T12:17:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ3NDgyMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTY1MjkyMA==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1380#discussion_r399652920", "bodyText": "You can use Objects::nonNull here", "author": "tivervac", "createdAt": "2020-03-28T11:43:52Z", "path": "org.eclipse.xtext.xtext.ui/src/org/eclipse/xtext/ui/editor/hierarchy/XtextCallHierarchyLabelProvider.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/**\n+ * Copyright (c) 2016, 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ui.editor.hierarchy;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import org.eclipse.jface.viewers.LabelProvider;\n+import org.eclipse.jface.viewers.StyledString;\n+import org.eclipse.swt.graphics.Image;\n+import org.eclipse.xtext.naming.QualifiedName;\n+import org.eclipse.jface.viewers.DelegatingStyledCellLabelProvider.IStyledLabelProvider;\n+import org.eclipse.xtext.ui.editor.hierarchy.DeferredHierarchyBuilder.DeferredHierarchyNode;\n+\n+import com.google.common.base.Joiner;\n+import com.google.common.base.Preconditions;\n+import com.google.common.collect.Iterables;\n+import com.google.inject.Inject;\n+\n+/**\n+ * @author kosyakov - Initial contribution and API\n+ * @since 2.10\n+ */\n+public class XtextCallHierarchyLabelProvider extends LabelProvider implements IStyledLabelProvider {\n+\n+\t@Inject\n+\tprivate HierarchyLabelProvider hierarchyLabelProvider;\n+\n+\t@Override\n+\tpublic Image getImage(Object element) {\n+\t\treturn hierarchyLabelProvider.getImage(element);\n+\t}\n+\n+\t@Override\n+\tpublic String getText(Object obj) {\n+\t\tPreconditions.checkNotNull(obj);\n+\n+\t\tif (obj instanceof XtextCallHierarchyNode) {\n+\t\t\treturn _getText((XtextCallHierarchyNode) obj);\n+\t\t} else if (obj instanceof DeferredHierarchyNode) {\n+\t\t\treturn _getText((DeferredHierarchyNode) obj);\n+\t\t} else {\n+\t\t\treturn _getText(obj);\n+\t\t}\n+\t}\n+\n+\tprotected String _getText(Object element) {\n+\t\treturn hierarchyLabelProvider.getText(element);\n+\t}\n+\n+\tprotected String _getText(DeferredHierarchyNode hierarchyNode) {\n+\t\treturn getText(hierarchyNode.getDelegate());\n+\t}\n+\n+\tprotected String _getText(XtextCallHierarchyNode hierarchyNode) {\n+\t\tif (hierarchyNode.getElement() == null) {\n+\t\t\treturn hierarchyLabelProvider.getText(hierarchyNode);\n+\t\t}\n+\n+\t\tList<QualifiedName> qualifiedNames = Arrays.asList(hierarchyNode.getElement().getQualifiedName(),\n+\t\t\t\thierarchyNode.getGrammarDescription() != null ? hierarchyNode.getGrammarDescription().getQualifiedName() : null);\n+\t\treturn Joiner.on(\" - \").join(Iterables.filter(qualifiedNames, (qualifiedName) -> qualifiedName != null));", "originalCommit": "a2005b48d1c57e4db2012726b81db3e4aed8c358", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTY1MzE0OQ==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1380#discussion_r399653149", "bodyText": "Precompiled regex can be reused here", "author": "tivervac", "createdAt": "2020-03-28T11:46:39Z", "path": "org.eclipse.xtext.xtext.ui/src/org/eclipse/xtext/xtext/ui/wizard/project/StatusWidget.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/**\n+ * Copyright (c) 2015, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.xtext.ui.wizard.project;\n+\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import org.eclipse.jface.dialogs.Dialog;\n+import org.eclipse.jface.dialogs.IMessageProvider;\n+import org.eclipse.jface.resource.JFaceResources;\n+import org.eclipse.swt.SWT;\n+import org.eclipse.swt.events.SelectionAdapter;\n+import org.eclipse.swt.events.SelectionEvent;\n+import org.eclipse.swt.graphics.Image;\n+import org.eclipse.swt.layout.GridData;\n+import org.eclipse.swt.layout.GridLayout;\n+import org.eclipse.swt.widgets.Composite;\n+import org.eclipse.swt.widgets.Label;\n+import org.eclipse.swt.widgets.Link;\n+import org.eclipse.xtext.xbase.lib.Procedures.Procedure0;\n+\n+/**\n+ * @author dhuebner - Initial contribution and API\n+ */\n+public class StatusWidget extends Composite {\n+\n+\tprivate Link link;\n+\n+\tprivate Label imageLabel;\n+\n+\tprivate Procedure0 quickFix = () -> {};\n+\n+\tprivate int severity = IMessageProvider.NONE;\n+\n+\tpublic StatusWidget(Composite parent, int style) {\n+\t\tsuper(parent, style);\n+\t\tcreateControls();\n+\t}\n+\n+\tprotected void createControls() {\n+\t\tsetLayout(new GridLayout(2, false));\n+\n+\t\timageLabel = new Label(this, SWT.NONE);\n+\t\timageLabel.setText(\"   \");\n+\t\tGridData imgLabelLayoutData = new GridData(GridData.VERTICAL_ALIGN_BEGINNING);\n+\t\timgLabelLayoutData.heightHint = 15;\n+\t\timageLabel.setLayoutData(imgLabelLayoutData);\n+\n+\t\tlink = new Link(this, SWT.NONE);\n+\t\tGridData linkLayoutData = new GridData(GridData.FILL_HORIZONTAL);\n+\t\tlinkLayoutData.heightHint = 30;\n+\t\tlink.setLayoutData(linkLayoutData);\n+\t\tlink.setFont(getFont());\n+\t\tlink.setText(\"\\n\\n\\n\");\n+\t\tlink.addSelectionListener(new SelectionAdapter() {\n+\t\t\t@Override\n+\t\t\tpublic void widgetSelected(SelectionEvent e) {\n+\t\t\t\tsuper.widgetSelected(e);\n+\t\t\t\tquickFix.apply();\n+\t\t\t}\n+\t\t});\n+\t}\n+\n+\tpublic Procedure0 clearStatus() {\n+\t\treturn setStatus(IMessageProvider.NONE, \"\\n\\n\\n\", () -> {}, () -> {});\n+\t}\n+\n+\tpublic Procedure0 setStatus(int severity, String text, Procedure0 quickFix, Procedure0 callback) {\n+\t\tthis.severity = severity;\n+\t\tsetVisible(severity != IMessageProvider.NONE);\n+\t\timageLabel.setImage(imageFor(severity));\n+\t\tlink.setText(text);\n+\t\tMatcher matcher = Pattern.compile(\"<a>(.*)</a>\").matcher(text.trim());\n+\t\tlink.setToolTipText(matcher.replaceAll(\"$1\"));\n+\t\tthis.quickFix = () -> {\n+\t\t\tquickFix.apply();\n+\t\t\tcallback.apply();\n+\t\t};\n+\t\treturn this.quickFix;\n+\t}\n+\n+\tpublic Procedure0 addStatus(int severity, String text) {\n+\t\tProcedure0 status = null;\n+\t\tif (link.getText().trim().isEmpty()) {\n+\t\t\tstatus = setStatus(severity, text, () -> {}, () -> {});\n+\t\t} else {\n+\t\t\tlink.setText(link.getText() + \"\\n\" + text);\n+\t\t\tMatcher matcher = Pattern.compile(\"<a>(.*)</a>\").matcher(text.trim());", "originalCommit": "a2005b48d1c57e4db2012726b81db3e4aed8c358", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTY1MzIyOA==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1380#discussion_r399653228", "bodyText": "Not sure how often this has to run but precompiling the regex might be a good idea", "author": "tivervac", "createdAt": "2020-03-28T11:47:26Z", "path": "org.eclipse.xtext.xtext.ui/src/org/eclipse/xtext/xtext/ui/wizard/project/StatusWidget.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/**\n+ * Copyright (c) 2015, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.xtext.ui.wizard.project;\n+\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import org.eclipse.jface.dialogs.Dialog;\n+import org.eclipse.jface.dialogs.IMessageProvider;\n+import org.eclipse.jface.resource.JFaceResources;\n+import org.eclipse.swt.SWT;\n+import org.eclipse.swt.events.SelectionAdapter;\n+import org.eclipse.swt.events.SelectionEvent;\n+import org.eclipse.swt.graphics.Image;\n+import org.eclipse.swt.layout.GridData;\n+import org.eclipse.swt.layout.GridLayout;\n+import org.eclipse.swt.widgets.Composite;\n+import org.eclipse.swt.widgets.Label;\n+import org.eclipse.swt.widgets.Link;\n+import org.eclipse.xtext.xbase.lib.Procedures.Procedure0;\n+\n+/**\n+ * @author dhuebner - Initial contribution and API\n+ */\n+public class StatusWidget extends Composite {\n+\n+\tprivate Link link;\n+\n+\tprivate Label imageLabel;\n+\n+\tprivate Procedure0 quickFix = () -> {};\n+\n+\tprivate int severity = IMessageProvider.NONE;\n+\n+\tpublic StatusWidget(Composite parent, int style) {\n+\t\tsuper(parent, style);\n+\t\tcreateControls();\n+\t}\n+\n+\tprotected void createControls() {\n+\t\tsetLayout(new GridLayout(2, false));\n+\n+\t\timageLabel = new Label(this, SWT.NONE);\n+\t\timageLabel.setText(\"   \");\n+\t\tGridData imgLabelLayoutData = new GridData(GridData.VERTICAL_ALIGN_BEGINNING);\n+\t\timgLabelLayoutData.heightHint = 15;\n+\t\timageLabel.setLayoutData(imgLabelLayoutData);\n+\n+\t\tlink = new Link(this, SWT.NONE);\n+\t\tGridData linkLayoutData = new GridData(GridData.FILL_HORIZONTAL);\n+\t\tlinkLayoutData.heightHint = 30;\n+\t\tlink.setLayoutData(linkLayoutData);\n+\t\tlink.setFont(getFont());\n+\t\tlink.setText(\"\\n\\n\\n\");\n+\t\tlink.addSelectionListener(new SelectionAdapter() {\n+\t\t\t@Override\n+\t\t\tpublic void widgetSelected(SelectionEvent e) {\n+\t\t\t\tsuper.widgetSelected(e);\n+\t\t\t\tquickFix.apply();\n+\t\t\t}\n+\t\t});\n+\t}\n+\n+\tpublic Procedure0 clearStatus() {\n+\t\treturn setStatus(IMessageProvider.NONE, \"\\n\\n\\n\", () -> {}, () -> {});\n+\t}\n+\n+\tpublic Procedure0 setStatus(int severity, String text, Procedure0 quickFix, Procedure0 callback) {\n+\t\tthis.severity = severity;\n+\t\tsetVisible(severity != IMessageProvider.NONE);\n+\t\timageLabel.setImage(imageFor(severity));\n+\t\tlink.setText(text);\n+\t\tMatcher matcher = Pattern.compile(\"<a>(.*)</a>\").matcher(text.trim());", "originalCommit": "a2005b48d1c57e4db2012726b81db3e4aed8c358", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTY1Mzg1Mw==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1380#discussion_r399653853", "bodyText": "I think an else here that reports or adds an issue here would be appropriate. Do you know when you can get in this case? If so, test it out.", "author": "tivervac", "createdAt": "2020-03-28T11:54:15Z", "path": "org.eclipse.xtext.xtext.ui/src/org/eclipse/xtext/xtext/ui/wizard/project/AdvancedNewProjectPage.java", "diffHunk": "@@ -0,0 +1,489 @@\n+/**\n+ * Copyright (c) 2015, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.xtext.ui.wizard.project;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import org.eclipse.jface.dialogs.IMessageProvider;\n+import org.eclipse.jface.fieldassist.ControlDecoration;\n+import org.eclipse.jface.fieldassist.FieldDecoration;\n+import org.eclipse.jface.fieldassist.FieldDecorationRegistry;\n+import org.eclipse.jface.wizard.WizardPage;\n+import org.eclipse.swt.SWT;\n+import org.eclipse.swt.events.SelectionAdapter;\n+import org.eclipse.swt.events.SelectionEvent;\n+import org.eclipse.swt.layout.GridData;\n+import org.eclipse.swt.layout.GridLayout;\n+import org.eclipse.swt.widgets.Button;\n+import org.eclipse.swt.widgets.Combo;\n+import org.eclipse.swt.widgets.Composite;\n+import org.eclipse.swt.widgets.Control;\n+import org.eclipse.swt.widgets.Group;\n+import org.eclipse.swt.widgets.Label;\n+import org.eclipse.ui.PlatformUI;\n+import org.eclipse.xtext.util.JUnitVersion;\n+import org.eclipse.xtext.xbase.lib.Procedures.Procedure0;\n+import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;\n+import org.eclipse.xtext.xtext.ui.internal.Activator;\n+import org.eclipse.xtext.xtext.wizard.BuildSystem;\n+import org.eclipse.xtext.xtext.wizard.LanguageServer;\n+import org.eclipse.xtext.xtext.wizard.SourceLayout;\n+import org.osgi.framework.Bundle;\n+\n+import com.google.common.collect.Iterables;\n+\n+public class AdvancedNewProjectPage extends WizardPage {\n+\n+\tprivate Button createUiProject;\n+\n+\tprivate Button createSDKProject;\n+\n+\tprivate Button createP2Project;\n+\n+\tprivate Button createWebProject;\n+\n+\tprivate Button createIdeProject;\n+\n+\tprivate Button createTestProject;\n+\n+\tprivate Button junitVersion4;\n+\n+\tprivate Button junitVersion5;\n+\n+\tprivate Combo preferredBuildSystem;\n+\n+\tprivate Combo createLanguageServer;\n+\n+\tprivate Combo sourceLayout;\n+\n+\tprivate Group createUiProjectSubGroup;\n+\n+\tprivate StatusWidget statusWidget;\n+\n+\tprivate boolean autoSelectIdeProject;\n+\n+\tprivate boolean autoSelectSDKProject;\n+\n+\tpublic AdvancedNewProjectPage(String pageName) {\n+\t\tsuper(pageName);\n+\t\tsetTitle(Messages.AdvancedNewProjectPage_WindowTitle);\n+\t\tsetDescription(Messages.AdvancedNewProjectPage_Description);\n+\t}\n+\n+\t@Override\n+\tpublic void createControl(Composite parent) {\n+\t\tComposite control = new Composite(parent, SWT.NONE);\n+\t\tcontrol.setLayout(new GridLayout(1, false));\n+\t\tcontrol.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true));\n+\n+\t\tGroup(control, (group) -> {\n+\t\t\tgroup.setText(Messages.AdvancedNewProjectPage_LabelFacets);\n+\t\t\tcreateUiProject = CheckBox(group, (button) -> button.setText(Messages.AdvancedNewProjectPage_projEclipse));\n+\t\t\tcreateUiProjectSubGroup = Group(group, (subGroup) -> {\n+\t\t\t\tcreateSDKProject = CheckBox(subGroup, (button) -> button.setText(Messages.AdvancedNewProjectPage_projEclipseSDKFeature));\n+\t\t\t\tcreateP2Project = CheckBox(subGroup, (button) -> button.setText(Messages.AdvancedNewProjectPage_projEclipseP2));\n+\t\t\t});\n+\t\t\tcreateWebProject = CheckBox(group, (button) -> {\n+\t\t\t\tbutton.setText(Messages.AdvancedNewProjectPage_projWeb);\n+\t\t\t\tbutton.setEnabled(true);\n+\t\t\t});\n+\t\t\tcreateIdeProject = CheckBox(group, (button) -> {\n+\t\t\t\tbutton.setText(Messages.AdvancedNewProjectPage_projIde);\n+\t\t\t\tbutton.setEnabled(false);\n+\t\t\t\tInfoDecoration(button, Messages.AdvancedNewProjectPage_projIde_description);\n+\t\t\t\tbutton.setLayoutData(new GridData(SWT.LEFT, SWT.CENTER, true, false));\n+\t\t\t});\n+\n+\t\t\tComposite childComposite = new Composite(group, SWT.NONE);\n+\t\t\tGridLayout layout = new GridLayout(4, false);\n+\t\t\tlayout.marginWidth = 0;\n+\t\t\tlayout.marginHeight = 0;\n+\t\t\tchildComposite.setLayout(layout);\n+\n+\t\t\tcreateTestProject = CheckBox(childComposite, (button) -> {\n+\t\t\t\tbutton.setText(Messages.WizardNewXtextProjectCreationPage_TestingSupport);\n+\t\t\t\tbutton.setLayoutData(new GridData(SWT.LEFT, SWT.CENTER, false, false));\n+\t\t\t});\n+\n+\t\t\tLabel label = new Label(childComposite, SWT.LEFT);\n+\t\t\tlabel.setText(Messages.AdvancedNewProjectPage_junitVersion);\n+\n+\t\t\tjunitVersion4 = Radio(childComposite, (button) -> {\n+\t\t\t\tbutton.setLayoutData(new GridData(SWT.LEFT, SWT.CENTER, false, false));\n+\t\t\t\tbutton.setText(\"4\");\n+\t\t\t\tbutton.setSelection(false);\n+\t\t\t});\n+\n+\t\t\tjunitVersion5 = Radio(childComposite, (button) -> {\n+\t\t\t\tbutton.setLayoutData(new GridData(SWT.LEFT, SWT.CENTER, false, false));\n+\t\t\t\tbutton.setText(\"5\");\n+\t\t\t\tbutton.setSelection(true);\n+\t\t\t});\n+\t\t});\n+\n+\t\tGroup(control, (group) -> {\n+\t\t\tgroup.setText(Messages.AdvancedNewProjectPage_prefBuildSys);\n+\t\t\tpreferredBuildSystem = DropDown(group, (combo) -> {\n+\t\t\t\tcombo.setEnabled(true);\n+\t\t\t\tcombo.setItems(Arrays.stream(BuildSystem.values()).map((sl) -> sl.toString()).toArray(String[] :: new));\n+\t\t\t});\n+\t\t});\n+\n+\t\tGroup(control, (group) -> {\n+\t\t\tgroup.setText(Messages.AdvancedNewProjectPage_languageServer);\n+\t\t\tcreateLanguageServer = DropDown(group, (combo) -> {\n+\t\t\t\tcombo.setEnabled(false);\n+\t\t\t\tcombo.setItems(Arrays.stream(LanguageServer.values()).map((sl) -> sl.toString()).toArray(String[] :: new));\n+\t\t\t\tInfoDecoration(combo, Messages.AdvancedNewProjectPage_languageServer_description);\n+\t\t\t});\n+\t\t});\n+\n+\t\tGroup(control, (group) -> {\n+\t\t\tgroup.setText(Messages.AdvancedNewProjectPage_srcLayout);\n+\t\t\tsourceLayout = DropDown(group, (combo) -> {\n+\t\t\t\tcombo.setEnabled(true);\n+\t\t\t\tcombo.setItems(Arrays.stream(SourceLayout.values()).map((sl) -> sl.toString()).toArray(String[] :: new));\n+\t\t\t});\n+\t\t});\n+\n+\t\tstatusWidget = new StatusWidget(control, SWT.NONE);\n+\t\tstatusWidget.setLayoutData(new GridData(SWT.FILL, SWT.TOP, true, false));\n+\n+\t\tList<Button> uiButtons = Arrays.asList(createUiProject, createWebProject);\n+\n+\t\tSelectionAdapter selectionControlUi = new SelectionAdapter() {\n+\t\t\t@Override\n+\t\t\tpublic void widgetSelected(SelectionEvent e) {\n+\t\t\t\tif (((Button) e.getSource()).getSelection()) {\n+\t\t\t\t\tif (!createIdeProject.getSelection()) {\n+\t\t\t\t\t\tautoSelectIdeProject = true;\n+\t\t\t\t\t}\n+\t\t\t\t\tcreateIdeProject.setSelection(true);\n+\t\t\t\t\tcreateIdeProject.setEnabled(false);\n+\t\t\t\t} else {\n+\t\t\t\t\tif (Iterables.all(uiButtons, (uiButton) -> !uiButton.getSelection())) {\n+\t\t\t\t\t\tcreateIdeProject.setEnabled(true);\n+\t\t\t\t\t}\n+\t\t\t\t\t// auto deselect SDK and p2 project when Eclipse plug-in is deselected\n+\t\t\t\t\tif (e.getSource() == createUiProject) {\n+\t\t\t\t\t\tcreateSDKProject.setSelection(false);\n+\t\t\t\t\t\tcreateP2Project.setSelection(false);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tvalidate(e);\n+\t\t\t}\n+\t\t};\n+\n+\t\tSelectionAdapter selectionControlUpdateSite = new SelectionAdapter() {\n+\t\t\t@Override\n+\t\t\tpublic void widgetSelected(SelectionEvent e) {\n+\t\t\t\tif (((Button) e.getSource()).getSelection()) {\n+\t\t\t\t\tif (!createSDKProject.getSelection()) {\n+\t\t\t\t\t\tautoSelectSDKProject = true;\n+\t\t\t\t\t}\n+\t\t\t\t\tcreateSDKProject.setSelection(true);\n+\t\t\t\t\tcreateSDKProject.setEnabled(false);\n+\t\t\t\t} else {\n+\t\t\t\t\tcreateSDKProject.setEnabled(true);\n+\t\t\t\t}\n+\t\t\t\tvalidate(e);\n+\t\t\t}\n+\t\t};\n+\n+\t\tcreateUiProject.addSelectionListener(new SelectionAdapter() {\n+\t\t\t@Override\n+\t\t\tpublic void widgetSelected(SelectionEvent e) {\n+\t\t\t\tboolean uiProjectSelected = createUiProject.getSelection();\n+\t\t\t\tcreateUiProjectSubGroup.setEnabled(uiProjectSelected);\n+\t\t\t\tcreateSDKProject.setEnabled(uiProjectSelected);\n+\t\t\t\tcreateP2Project.setEnabled(uiProjectSelected);\n+\t\t\t\tvalidate(e);\n+\t\t\t}\n+\t\t});\n+\n+\t\tpreferredBuildSystem.addSelectionListener(new SelectionAdapter() {\n+\t\t\t@Override\n+\t\t\tpublic void widgetSelected(SelectionEvent e) {\n+\t\t\t\tcreateLanguageServer.setEnabled(getPreferredBuildSystem() != BuildSystem.NONE);\n+\t\t\t\tvalidate(e);\n+\t\t\t}\n+\t\t});\n+\n+\t\tcreateLanguageServer.addSelectionListener(new SelectionAdapter() {\n+\t\t\t@Override\n+\t\t\tpublic void widgetSelected(SelectionEvent e) {\n+\t\t\t\tif (isSelected(createLanguageServer, LanguageServer.NONE)) {\n+\t\t\t\t\tif (Iterables.all(uiButtons, (uiButton) -> !uiButton.getSelection())) {\n+\t\t\t\t\t\tcreateIdeProject.setEnabled(true);\n+\t\t\t\t\t}\n+\t\t\t\t} else {\n+\t\t\t\t\tif (!createIdeProject.getSelection()) {\n+\t\t\t\t\t\tcreateIdeProject.setSelection(true);\n+\t\t\t\t\t\tautoSelectIdeProject = true;\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tvalidate(e);\n+\t\t\t}\n+\t\t});\n+\n+\t\tcreateTestProject.addSelectionListener(new SelectionAdapter() {\n+\t\t\t@Override\n+\t\t\tpublic void widgetSelected(SelectionEvent e) {\n+\t\t\t\tboolean enabled = createTestProject.getSelection() == true;\n+\t\t\t\tjunitVersion4.setEnabled(enabled);\n+\t\t\t\tjunitVersion5.setEnabled(enabled);\n+\t\t\t\tvalidate(e);\n+\t\t\t}\n+\t\t});\n+\t\t\n+\t\tSelectionAdapter selectionControl = new SelectionAdapter() {\n+\t\t\t@Override\n+\t\t\tpublic void widgetSelected(SelectionEvent e) {\n+\t\t\t\tvalidate(e);\n+\t\t\t}\n+\t\t};\n+\n+\t\tsourceLayout.addSelectionListener(selectionControl);\n+\t\tcreateUiProject.addSelectionListener(selectionControlUi);\n+\t\tcreateWebProject.addSelectionListener(selectionControlUi);\n+\t\tcreateIdeProject.addSelectionListener(selectionControl);\n+\t\tcreateSDKProject.addSelectionListener(selectionControl);\n+\t\tcreateP2Project.addSelectionListener(selectionControlUpdateSite);\n+\t\tcreateLanguageServer.addSelectionListener(selectionControl);\n+\t\tsetDefaults();\n+\n+\t\tPlatformUI.getWorkbench().getHelpSystem().setHelp(getShell(), \"org.eclipse.xtext.xtext.ui.newProject_Advanced\");\n+\t}\n+\n+\tpublic void validate(SelectionEvent e) {\n+\t\tstatusWidget.clearStatus();\n+\t\tcheckWidgets(e);\n+\t\tsetPageComplete(statusWidget.getSevertity() != IMessageProvider.ERROR);\n+\t}\n+\n+\tpublic void checkWidgets(SelectionEvent e) {\n+\t\tList<Button> uiButtons = Arrays.asList(createUiProject, createWebProject);\n+\n+\t\tif (isSelected(preferredBuildSystem, BuildSystem.MAVEN) && !isBundleResolved(\"org.eclipse.m2e.maven.runtime\")) {\n+\t\t\treportIssue(WARNING, Messages.AdvancedNewProjectPage_noM2e);\n+\t\t}\n+\t\tif (isSelected(preferredBuildSystem, BuildSystem.GRADLE) && !isBundleResolved(\"org.eclipse.buildship.core\")) {\n+\t\t\treportIssue(WARNING, Messages.AdvancedNewProjectPage_noBuildship);\n+\t\t}\n+\t\tif (isSelected(preferredBuildSystem, BuildSystem.GRADLE) && createUiProject.getSelection()) {\n+\t\t\treportIssue(WARNING, Messages.AdvancedNewProjectPage_eclipseAndGradleWarn);\n+\t\t}\n+\t\tif (createUiProject.getSelection() && createP2Project.getSelection() && !createSDKProject.getSelection()) {\n+\t\t\taddIssue(INFORMATION, Messages.AdvancedNewProjectPage_p2AndSdkInfo);\n+\t\t}\n+\n+\t\tObject source = null;\n+\t\tif (e != null) {\n+\t\t\tsource = e.getSource();\n+\t\t}", "originalCommit": "a2005b48d1c57e4db2012726b81db3e4aed8c358", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTc3Mjc3Mw==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1380#discussion_r399772773", "bodyText": "The method CheckWidgets() is called with null when we select the link (for example, Gradle in the image below) in the proposed error message. If we add an else statement, and report/add an issue here, the error/info message that we might show would lead to confusion. I'll keep the code as it is for now. If someone reports an issue, we can look into it separately.", "author": "nbhusare", "createdAt": "2020-03-29T09:48:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTY1Mzg1Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTY1NDc0MA==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1380#discussion_r399654740", "bodyText": "Isn't this .equals?", "author": "tivervac", "createdAt": "2020-03-28T12:03:43Z", "path": "org.eclipse.xtext.xtext.ui/src/org/eclipse/xtext/xtext/ui/wizard/project/AdvancedNewProjectPage.java", "diffHunk": "@@ -0,0 +1,489 @@\n+/**\n+ * Copyright (c) 2015, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.xtext.ui.wizard.project;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import org.eclipse.jface.dialogs.IMessageProvider;\n+import org.eclipse.jface.fieldassist.ControlDecoration;\n+import org.eclipse.jface.fieldassist.FieldDecoration;\n+import org.eclipse.jface.fieldassist.FieldDecorationRegistry;\n+import org.eclipse.jface.wizard.WizardPage;\n+import org.eclipse.swt.SWT;\n+import org.eclipse.swt.events.SelectionAdapter;\n+import org.eclipse.swt.events.SelectionEvent;\n+import org.eclipse.swt.layout.GridData;\n+import org.eclipse.swt.layout.GridLayout;\n+import org.eclipse.swt.widgets.Button;\n+import org.eclipse.swt.widgets.Combo;\n+import org.eclipse.swt.widgets.Composite;\n+import org.eclipse.swt.widgets.Control;\n+import org.eclipse.swt.widgets.Group;\n+import org.eclipse.swt.widgets.Label;\n+import org.eclipse.ui.PlatformUI;\n+import org.eclipse.xtext.util.JUnitVersion;\n+import org.eclipse.xtext.xbase.lib.Procedures.Procedure0;\n+import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;\n+import org.eclipse.xtext.xtext.ui.internal.Activator;\n+import org.eclipse.xtext.xtext.wizard.BuildSystem;\n+import org.eclipse.xtext.xtext.wizard.LanguageServer;\n+import org.eclipse.xtext.xtext.wizard.SourceLayout;\n+import org.osgi.framework.Bundle;\n+\n+import com.google.common.collect.Iterables;\n+\n+public class AdvancedNewProjectPage extends WizardPage {\n+\n+\tprivate Button createUiProject;\n+\n+\tprivate Button createSDKProject;\n+\n+\tprivate Button createP2Project;\n+\n+\tprivate Button createWebProject;\n+\n+\tprivate Button createIdeProject;\n+\n+\tprivate Button createTestProject;\n+\n+\tprivate Button junitVersion4;\n+\n+\tprivate Button junitVersion5;\n+\n+\tprivate Combo preferredBuildSystem;\n+\n+\tprivate Combo createLanguageServer;\n+\n+\tprivate Combo sourceLayout;\n+\n+\tprivate Group createUiProjectSubGroup;\n+\n+\tprivate StatusWidget statusWidget;\n+\n+\tprivate boolean autoSelectIdeProject;\n+\n+\tprivate boolean autoSelectSDKProject;\n+\n+\tpublic AdvancedNewProjectPage(String pageName) {\n+\t\tsuper(pageName);\n+\t\tsetTitle(Messages.AdvancedNewProjectPage_WindowTitle);\n+\t\tsetDescription(Messages.AdvancedNewProjectPage_Description);\n+\t}\n+\n+\t@Override\n+\tpublic void createControl(Composite parent) {\n+\t\tComposite control = new Composite(parent, SWT.NONE);\n+\t\tcontrol.setLayout(new GridLayout(1, false));\n+\t\tcontrol.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true));\n+\n+\t\tGroup(control, (group) -> {\n+\t\t\tgroup.setText(Messages.AdvancedNewProjectPage_LabelFacets);\n+\t\t\tcreateUiProject = CheckBox(group, (button) -> button.setText(Messages.AdvancedNewProjectPage_projEclipse));\n+\t\t\tcreateUiProjectSubGroup = Group(group, (subGroup) -> {\n+\t\t\t\tcreateSDKProject = CheckBox(subGroup, (button) -> button.setText(Messages.AdvancedNewProjectPage_projEclipseSDKFeature));\n+\t\t\t\tcreateP2Project = CheckBox(subGroup, (button) -> button.setText(Messages.AdvancedNewProjectPage_projEclipseP2));\n+\t\t\t});\n+\t\t\tcreateWebProject = CheckBox(group, (button) -> {\n+\t\t\t\tbutton.setText(Messages.AdvancedNewProjectPage_projWeb);\n+\t\t\t\tbutton.setEnabled(true);\n+\t\t\t});\n+\t\t\tcreateIdeProject = CheckBox(group, (button) -> {\n+\t\t\t\tbutton.setText(Messages.AdvancedNewProjectPage_projIde);\n+\t\t\t\tbutton.setEnabled(false);\n+\t\t\t\tInfoDecoration(button, Messages.AdvancedNewProjectPage_projIde_description);\n+\t\t\t\tbutton.setLayoutData(new GridData(SWT.LEFT, SWT.CENTER, true, false));\n+\t\t\t});\n+\n+\t\t\tComposite childComposite = new Composite(group, SWT.NONE);\n+\t\t\tGridLayout layout = new GridLayout(4, false);\n+\t\t\tlayout.marginWidth = 0;\n+\t\t\tlayout.marginHeight = 0;\n+\t\t\tchildComposite.setLayout(layout);\n+\n+\t\t\tcreateTestProject = CheckBox(childComposite, (button) -> {\n+\t\t\t\tbutton.setText(Messages.WizardNewXtextProjectCreationPage_TestingSupport);\n+\t\t\t\tbutton.setLayoutData(new GridData(SWT.LEFT, SWT.CENTER, false, false));\n+\t\t\t});\n+\n+\t\t\tLabel label = new Label(childComposite, SWT.LEFT);\n+\t\t\tlabel.setText(Messages.AdvancedNewProjectPage_junitVersion);\n+\n+\t\t\tjunitVersion4 = Radio(childComposite, (button) -> {\n+\t\t\t\tbutton.setLayoutData(new GridData(SWT.LEFT, SWT.CENTER, false, false));\n+\t\t\t\tbutton.setText(\"4\");\n+\t\t\t\tbutton.setSelection(false);\n+\t\t\t});\n+\n+\t\t\tjunitVersion5 = Radio(childComposite, (button) -> {\n+\t\t\t\tbutton.setLayoutData(new GridData(SWT.LEFT, SWT.CENTER, false, false));\n+\t\t\t\tbutton.setText(\"5\");\n+\t\t\t\tbutton.setSelection(true);\n+\t\t\t});\n+\t\t});\n+\n+\t\tGroup(control, (group) -> {\n+\t\t\tgroup.setText(Messages.AdvancedNewProjectPage_prefBuildSys);\n+\t\t\tpreferredBuildSystem = DropDown(group, (combo) -> {\n+\t\t\t\tcombo.setEnabled(true);\n+\t\t\t\tcombo.setItems(Arrays.stream(BuildSystem.values()).map((sl) -> sl.toString()).toArray(String[] :: new));\n+\t\t\t});\n+\t\t});\n+\n+\t\tGroup(control, (group) -> {\n+\t\t\tgroup.setText(Messages.AdvancedNewProjectPage_languageServer);\n+\t\t\tcreateLanguageServer = DropDown(group, (combo) -> {\n+\t\t\t\tcombo.setEnabled(false);\n+\t\t\t\tcombo.setItems(Arrays.stream(LanguageServer.values()).map((sl) -> sl.toString()).toArray(String[] :: new));\n+\t\t\t\tInfoDecoration(combo, Messages.AdvancedNewProjectPage_languageServer_description);\n+\t\t\t});\n+\t\t});\n+\n+\t\tGroup(control, (group) -> {\n+\t\t\tgroup.setText(Messages.AdvancedNewProjectPage_srcLayout);\n+\t\t\tsourceLayout = DropDown(group, (combo) -> {\n+\t\t\t\tcombo.setEnabled(true);\n+\t\t\t\tcombo.setItems(Arrays.stream(SourceLayout.values()).map((sl) -> sl.toString()).toArray(String[] :: new));\n+\t\t\t});\n+\t\t});\n+\n+\t\tstatusWidget = new StatusWidget(control, SWT.NONE);\n+\t\tstatusWidget.setLayoutData(new GridData(SWT.FILL, SWT.TOP, true, false));\n+\n+\t\tList<Button> uiButtons = Arrays.asList(createUiProject, createWebProject);\n+\n+\t\tSelectionAdapter selectionControlUi = new SelectionAdapter() {\n+\t\t\t@Override\n+\t\t\tpublic void widgetSelected(SelectionEvent e) {\n+\t\t\t\tif (((Button) e.getSource()).getSelection()) {\n+\t\t\t\t\tif (!createIdeProject.getSelection()) {\n+\t\t\t\t\t\tautoSelectIdeProject = true;\n+\t\t\t\t\t}\n+\t\t\t\t\tcreateIdeProject.setSelection(true);\n+\t\t\t\t\tcreateIdeProject.setEnabled(false);\n+\t\t\t\t} else {\n+\t\t\t\t\tif (Iterables.all(uiButtons, (uiButton) -> !uiButton.getSelection())) {\n+\t\t\t\t\t\tcreateIdeProject.setEnabled(true);\n+\t\t\t\t\t}\n+\t\t\t\t\t// auto deselect SDK and p2 project when Eclipse plug-in is deselected\n+\t\t\t\t\tif (e.getSource() == createUiProject) {", "originalCommit": "a2005b48d1c57e4db2012726b81db3e4aed8c358", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTY4MzIyNg==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1380#discussion_r399683226", "bodyText": "No. It is identity comparison.", "author": "nbhusare", "createdAt": "2020-03-28T16:47:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTY1NDc0MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTY1NTM3MA==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1380#discussion_r399655370", "bodyText": "build system -> as build system\nor\nchoose Maven -> choose the Maven", "author": "tivervac", "createdAt": "2020-03-28T12:11:21Z", "path": "org.eclipse.xtext.xtext.ui/src/org/eclipse/xtext/xtext/ui/wizard/project/AdvancedNewProjectPage.java", "diffHunk": "@@ -0,0 +1,489 @@\n+/**\n+ * Copyright (c) 2015, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.xtext.ui.wizard.project;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import org.eclipse.jface.dialogs.IMessageProvider;\n+import org.eclipse.jface.fieldassist.ControlDecoration;\n+import org.eclipse.jface.fieldassist.FieldDecoration;\n+import org.eclipse.jface.fieldassist.FieldDecorationRegistry;\n+import org.eclipse.jface.wizard.WizardPage;\n+import org.eclipse.swt.SWT;\n+import org.eclipse.swt.events.SelectionAdapter;\n+import org.eclipse.swt.events.SelectionEvent;\n+import org.eclipse.swt.layout.GridData;\n+import org.eclipse.swt.layout.GridLayout;\n+import org.eclipse.swt.widgets.Button;\n+import org.eclipse.swt.widgets.Combo;\n+import org.eclipse.swt.widgets.Composite;\n+import org.eclipse.swt.widgets.Control;\n+import org.eclipse.swt.widgets.Group;\n+import org.eclipse.swt.widgets.Label;\n+import org.eclipse.ui.PlatformUI;\n+import org.eclipse.xtext.util.JUnitVersion;\n+import org.eclipse.xtext.xbase.lib.Procedures.Procedure0;\n+import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;\n+import org.eclipse.xtext.xtext.ui.internal.Activator;\n+import org.eclipse.xtext.xtext.wizard.BuildSystem;\n+import org.eclipse.xtext.xtext.wizard.LanguageServer;\n+import org.eclipse.xtext.xtext.wizard.SourceLayout;\n+import org.osgi.framework.Bundle;\n+\n+import com.google.common.collect.Iterables;\n+\n+public class AdvancedNewProjectPage extends WizardPage {\n+\n+\tprivate Button createUiProject;\n+\n+\tprivate Button createSDKProject;\n+\n+\tprivate Button createP2Project;\n+\n+\tprivate Button createWebProject;\n+\n+\tprivate Button createIdeProject;\n+\n+\tprivate Button createTestProject;\n+\n+\tprivate Button junitVersion4;\n+\n+\tprivate Button junitVersion5;\n+\n+\tprivate Combo preferredBuildSystem;\n+\n+\tprivate Combo createLanguageServer;\n+\n+\tprivate Combo sourceLayout;\n+\n+\tprivate Group createUiProjectSubGroup;\n+\n+\tprivate StatusWidget statusWidget;\n+\n+\tprivate boolean autoSelectIdeProject;\n+\n+\tprivate boolean autoSelectSDKProject;\n+\n+\tpublic AdvancedNewProjectPage(String pageName) {\n+\t\tsuper(pageName);\n+\t\tsetTitle(Messages.AdvancedNewProjectPage_WindowTitle);\n+\t\tsetDescription(Messages.AdvancedNewProjectPage_Description);\n+\t}\n+\n+\t@Override\n+\tpublic void createControl(Composite parent) {\n+\t\tComposite control = new Composite(parent, SWT.NONE);\n+\t\tcontrol.setLayout(new GridLayout(1, false));\n+\t\tcontrol.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true));\n+\n+\t\tGroup(control, (group) -> {\n+\t\t\tgroup.setText(Messages.AdvancedNewProjectPage_LabelFacets);\n+\t\t\tcreateUiProject = CheckBox(group, (button) -> button.setText(Messages.AdvancedNewProjectPage_projEclipse));\n+\t\t\tcreateUiProjectSubGroup = Group(group, (subGroup) -> {\n+\t\t\t\tcreateSDKProject = CheckBox(subGroup, (button) -> button.setText(Messages.AdvancedNewProjectPage_projEclipseSDKFeature));\n+\t\t\t\tcreateP2Project = CheckBox(subGroup, (button) -> button.setText(Messages.AdvancedNewProjectPage_projEclipseP2));\n+\t\t\t});\n+\t\t\tcreateWebProject = CheckBox(group, (button) -> {\n+\t\t\t\tbutton.setText(Messages.AdvancedNewProjectPage_projWeb);\n+\t\t\t\tbutton.setEnabled(true);\n+\t\t\t});\n+\t\t\tcreateIdeProject = CheckBox(group, (button) -> {\n+\t\t\t\tbutton.setText(Messages.AdvancedNewProjectPage_projIde);\n+\t\t\t\tbutton.setEnabled(false);\n+\t\t\t\tInfoDecoration(button, Messages.AdvancedNewProjectPage_projIde_description);\n+\t\t\t\tbutton.setLayoutData(new GridData(SWT.LEFT, SWT.CENTER, true, false));\n+\t\t\t});\n+\n+\t\t\tComposite childComposite = new Composite(group, SWT.NONE);\n+\t\t\tGridLayout layout = new GridLayout(4, false);\n+\t\t\tlayout.marginWidth = 0;\n+\t\t\tlayout.marginHeight = 0;\n+\t\t\tchildComposite.setLayout(layout);\n+\n+\t\t\tcreateTestProject = CheckBox(childComposite, (button) -> {\n+\t\t\t\tbutton.setText(Messages.WizardNewXtextProjectCreationPage_TestingSupport);\n+\t\t\t\tbutton.setLayoutData(new GridData(SWT.LEFT, SWT.CENTER, false, false));\n+\t\t\t});\n+\n+\t\t\tLabel label = new Label(childComposite, SWT.LEFT);\n+\t\t\tlabel.setText(Messages.AdvancedNewProjectPage_junitVersion);\n+\n+\t\t\tjunitVersion4 = Radio(childComposite, (button) -> {\n+\t\t\t\tbutton.setLayoutData(new GridData(SWT.LEFT, SWT.CENTER, false, false));\n+\t\t\t\tbutton.setText(\"4\");\n+\t\t\t\tbutton.setSelection(false);\n+\t\t\t});\n+\n+\t\t\tjunitVersion5 = Radio(childComposite, (button) -> {\n+\t\t\t\tbutton.setLayoutData(new GridData(SWT.LEFT, SWT.CENTER, false, false));\n+\t\t\t\tbutton.setText(\"5\");\n+\t\t\t\tbutton.setSelection(true);\n+\t\t\t});\n+\t\t});\n+\n+\t\tGroup(control, (group) -> {\n+\t\t\tgroup.setText(Messages.AdvancedNewProjectPage_prefBuildSys);\n+\t\t\tpreferredBuildSystem = DropDown(group, (combo) -> {\n+\t\t\t\tcombo.setEnabled(true);\n+\t\t\t\tcombo.setItems(Arrays.stream(BuildSystem.values()).map((sl) -> sl.toString()).toArray(String[] :: new));\n+\t\t\t});\n+\t\t});\n+\n+\t\tGroup(control, (group) -> {\n+\t\t\tgroup.setText(Messages.AdvancedNewProjectPage_languageServer);\n+\t\t\tcreateLanguageServer = DropDown(group, (combo) -> {\n+\t\t\t\tcombo.setEnabled(false);\n+\t\t\t\tcombo.setItems(Arrays.stream(LanguageServer.values()).map((sl) -> sl.toString()).toArray(String[] :: new));\n+\t\t\t\tInfoDecoration(combo, Messages.AdvancedNewProjectPage_languageServer_description);\n+\t\t\t});\n+\t\t});\n+\n+\t\tGroup(control, (group) -> {\n+\t\t\tgroup.setText(Messages.AdvancedNewProjectPage_srcLayout);\n+\t\t\tsourceLayout = DropDown(group, (combo) -> {\n+\t\t\t\tcombo.setEnabled(true);\n+\t\t\t\tcombo.setItems(Arrays.stream(SourceLayout.values()).map((sl) -> sl.toString()).toArray(String[] :: new));\n+\t\t\t});\n+\t\t});\n+\n+\t\tstatusWidget = new StatusWidget(control, SWT.NONE);\n+\t\tstatusWidget.setLayoutData(new GridData(SWT.FILL, SWT.TOP, true, false));\n+\n+\t\tList<Button> uiButtons = Arrays.asList(createUiProject, createWebProject);\n+\n+\t\tSelectionAdapter selectionControlUi = new SelectionAdapter() {\n+\t\t\t@Override\n+\t\t\tpublic void widgetSelected(SelectionEvent e) {\n+\t\t\t\tif (((Button) e.getSource()).getSelection()) {\n+\t\t\t\t\tif (!createIdeProject.getSelection()) {\n+\t\t\t\t\t\tautoSelectIdeProject = true;\n+\t\t\t\t\t}\n+\t\t\t\t\tcreateIdeProject.setSelection(true);\n+\t\t\t\t\tcreateIdeProject.setEnabled(false);\n+\t\t\t\t} else {\n+\t\t\t\t\tif (Iterables.all(uiButtons, (uiButton) -> !uiButton.getSelection())) {\n+\t\t\t\t\t\tcreateIdeProject.setEnabled(true);\n+\t\t\t\t\t}\n+\t\t\t\t\t// auto deselect SDK and p2 project when Eclipse plug-in is deselected\n+\t\t\t\t\tif (e.getSource() == createUiProject) {\n+\t\t\t\t\t\tcreateSDKProject.setSelection(false);\n+\t\t\t\t\t\tcreateP2Project.setSelection(false);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tvalidate(e);\n+\t\t\t}\n+\t\t};\n+\n+\t\tSelectionAdapter selectionControlUpdateSite = new SelectionAdapter() {\n+\t\t\t@Override\n+\t\t\tpublic void widgetSelected(SelectionEvent e) {\n+\t\t\t\tif (((Button) e.getSource()).getSelection()) {\n+\t\t\t\t\tif (!createSDKProject.getSelection()) {\n+\t\t\t\t\t\tautoSelectSDKProject = true;\n+\t\t\t\t\t}\n+\t\t\t\t\tcreateSDKProject.setSelection(true);\n+\t\t\t\t\tcreateSDKProject.setEnabled(false);\n+\t\t\t\t} else {\n+\t\t\t\t\tcreateSDKProject.setEnabled(true);\n+\t\t\t\t}\n+\t\t\t\tvalidate(e);\n+\t\t\t}\n+\t\t};\n+\n+\t\tcreateUiProject.addSelectionListener(new SelectionAdapter() {\n+\t\t\t@Override\n+\t\t\tpublic void widgetSelected(SelectionEvent e) {\n+\t\t\t\tboolean uiProjectSelected = createUiProject.getSelection();\n+\t\t\t\tcreateUiProjectSubGroup.setEnabled(uiProjectSelected);\n+\t\t\t\tcreateSDKProject.setEnabled(uiProjectSelected);\n+\t\t\t\tcreateP2Project.setEnabled(uiProjectSelected);\n+\t\t\t\tvalidate(e);\n+\t\t\t}\n+\t\t});\n+\n+\t\tpreferredBuildSystem.addSelectionListener(new SelectionAdapter() {\n+\t\t\t@Override\n+\t\t\tpublic void widgetSelected(SelectionEvent e) {\n+\t\t\t\tcreateLanguageServer.setEnabled(getPreferredBuildSystem() != BuildSystem.NONE);\n+\t\t\t\tvalidate(e);\n+\t\t\t}\n+\t\t});\n+\n+\t\tcreateLanguageServer.addSelectionListener(new SelectionAdapter() {\n+\t\t\t@Override\n+\t\t\tpublic void widgetSelected(SelectionEvent e) {\n+\t\t\t\tif (isSelected(createLanguageServer, LanguageServer.NONE)) {\n+\t\t\t\t\tif (Iterables.all(uiButtons, (uiButton) -> !uiButton.getSelection())) {\n+\t\t\t\t\t\tcreateIdeProject.setEnabled(true);\n+\t\t\t\t\t}\n+\t\t\t\t} else {\n+\t\t\t\t\tif (!createIdeProject.getSelection()) {\n+\t\t\t\t\t\tcreateIdeProject.setSelection(true);\n+\t\t\t\t\t\tautoSelectIdeProject = true;\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tvalidate(e);\n+\t\t\t}\n+\t\t});\n+\n+\t\tcreateTestProject.addSelectionListener(new SelectionAdapter() {\n+\t\t\t@Override\n+\t\t\tpublic void widgetSelected(SelectionEvent e) {\n+\t\t\t\tboolean enabled = createTestProject.getSelection() == true;\n+\t\t\t\tjunitVersion4.setEnabled(enabled);\n+\t\t\t\tjunitVersion5.setEnabled(enabled);\n+\t\t\t\tvalidate(e);\n+\t\t\t}\n+\t\t});\n+\t\t\n+\t\tSelectionAdapter selectionControl = new SelectionAdapter() {\n+\t\t\t@Override\n+\t\t\tpublic void widgetSelected(SelectionEvent e) {\n+\t\t\t\tvalidate(e);\n+\t\t\t}\n+\t\t};\n+\n+\t\tsourceLayout.addSelectionListener(selectionControl);\n+\t\tcreateUiProject.addSelectionListener(selectionControlUi);\n+\t\tcreateWebProject.addSelectionListener(selectionControlUi);\n+\t\tcreateIdeProject.addSelectionListener(selectionControl);\n+\t\tcreateSDKProject.addSelectionListener(selectionControl);\n+\t\tcreateP2Project.addSelectionListener(selectionControlUpdateSite);\n+\t\tcreateLanguageServer.addSelectionListener(selectionControl);\n+\t\tsetDefaults();\n+\n+\t\tPlatformUI.getWorkbench().getHelpSystem().setHelp(getShell(), \"org.eclipse.xtext.xtext.ui.newProject_Advanced\");\n+\t}\n+\n+\tpublic void validate(SelectionEvent e) {\n+\t\tstatusWidget.clearStatus();\n+\t\tcheckWidgets(e);\n+\t\tsetPageComplete(statusWidget.getSevertity() != IMessageProvider.ERROR);\n+\t}\n+\n+\tpublic void checkWidgets(SelectionEvent e) {\n+\t\tList<Button> uiButtons = Arrays.asList(createUiProject, createWebProject);\n+\n+\t\tif (isSelected(preferredBuildSystem, BuildSystem.MAVEN) && !isBundleResolved(\"org.eclipse.m2e.maven.runtime\")) {\n+\t\t\treportIssue(WARNING, Messages.AdvancedNewProjectPage_noM2e);\n+\t\t}\n+\t\tif (isSelected(preferredBuildSystem, BuildSystem.GRADLE) && !isBundleResolved(\"org.eclipse.buildship.core\")) {\n+\t\t\treportIssue(WARNING, Messages.AdvancedNewProjectPage_noBuildship);\n+\t\t}\n+\t\tif (isSelected(preferredBuildSystem, BuildSystem.GRADLE) && createUiProject.getSelection()) {\n+\t\t\treportIssue(WARNING, Messages.AdvancedNewProjectPage_eclipseAndGradleWarn);\n+\t\t}\n+\t\tif (createUiProject.getSelection() && createP2Project.getSelection() && !createSDKProject.getSelection()) {\n+\t\t\taddIssue(INFORMATION, Messages.AdvancedNewProjectPage_p2AndSdkInfo);\n+\t\t}\n+\n+\t\tObject source = null;\n+\t\tif (e != null) {\n+\t\t\tsource = e.getSource();\n+\t\t}\n+\n+\t\tif (createUiProject.getSelection() && !isSelected(sourceLayout, SourceLayout.PLAIN)) {\n+\t\t\tif (createUiProject == source) {\n+\t\t\t\tString message = \"'\" + createUiProject.getText() + \"' requires \" + SourceLayout.PLAIN + \" source layout. \" //\n+\t\t\t\t\t\t+ \"Please <a>select '\" + SourceLayout.PLAIN + \"'</a> source layout.\";\n+\t\t\t\treportIssue(ERROR, message, () -> select(sourceLayout, SourceLayout.PLAIN));\n+\t\t\t} else {\n+\t\t\t\tString message = SourceLayout.MAVEN + \" source layout is not supported by the '\" + createUiProject.getText() + \"' project. \" //\n+\t\t\t\t\t\t+ \"Please <a>deselect '\" + createUiProject.getText() + \"'</a>.\";\n+\t\t\t\treportIssue(ERROR, message, () -> createUiProject.setSelection(false));\n+\t\t\t}\n+\t\t}\n+\n+\t\tif (isSelected(preferredBuildSystem, BuildSystem.NONE) && isSelected(sourceLayout, SourceLayout.MAVEN)) {\n+\t\t\tif (preferredBuildSystem == source) {\n+\t\t\t\tString message = \"Maven/Gradle source layout is not supported without a build system. \" //\n+\t\t\t\t\t\t+ \"Please <a>select '\" + SourceLayout.PLAIN + \"'</a> source layout.\";\n+\t\t\t\treportIssue(ERROR, message, () -> select(sourceLayout, SourceLayout.PLAIN));\n+\t\t\t} else {\n+\t\t\t\tString message = \"Maven/Gradle source layout is only supported when using Maven or Gradle build system. \" //\n+\t\t\t\t\t\t+ \"You need to choose Maven or Gradle build system. Select <a>Gradle</a> build.\";\n+\t\t\t\treportIssue(ERROR, message, () -> select(preferredBuildSystem, BuildSystem.GRADLE));\n+\t\t\t}\n+\t\t}\n+\n+\t\tif (createWebProject.getSelection() && isSelected(preferredBuildSystem, BuildSystem.NONE)) {\n+\t\t\tif (preferredBuildSystem == source) {\n+\t\t\t\tString message = \"The '\" + createWebProject.getText() + \"' project can not be build without a build system. \" //\n+\t\t\t\t\t\t+ \"Please <a>deselect '\" + createWebProject.getText() + \"'</a>.\";\n+\t\t\t\treportIssue(ERROR, message, () -> createWebProject.setSelection(false));\n+\t\t\t} else {\n+\t\t\t\tString message = \"To build the '\" + createWebProject.getText() + \"' \" //\n+\t\t\t\t\t\t+ \"project, you need to choose Maven or Gradle build system.\" //", "originalCommit": "a2005b48d1c57e4db2012726b81db3e4aed8c358", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTY1NTYxNg==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1380#discussion_r399655616", "bodyText": "Did you test this method? It's different than in Xtend. Don't have an IDE handy to tell me if it's correct", "author": "tivervac", "createdAt": "2020-03-28T12:14:01Z", "path": "org.eclipse.xtext.xtext.ui/src/org/eclipse/xtext/xtext/ui/wizard/project/AdvancedNewProjectPage.java", "diffHunk": "@@ -0,0 +1,489 @@\n+/**\n+ * Copyright (c) 2015, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.xtext.ui.wizard.project;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import org.eclipse.jface.dialogs.IMessageProvider;\n+import org.eclipse.jface.fieldassist.ControlDecoration;\n+import org.eclipse.jface.fieldassist.FieldDecoration;\n+import org.eclipse.jface.fieldassist.FieldDecorationRegistry;\n+import org.eclipse.jface.wizard.WizardPage;\n+import org.eclipse.swt.SWT;\n+import org.eclipse.swt.events.SelectionAdapter;\n+import org.eclipse.swt.events.SelectionEvent;\n+import org.eclipse.swt.layout.GridData;\n+import org.eclipse.swt.layout.GridLayout;\n+import org.eclipse.swt.widgets.Button;\n+import org.eclipse.swt.widgets.Combo;\n+import org.eclipse.swt.widgets.Composite;\n+import org.eclipse.swt.widgets.Control;\n+import org.eclipse.swt.widgets.Group;\n+import org.eclipse.swt.widgets.Label;\n+import org.eclipse.ui.PlatformUI;\n+import org.eclipse.xtext.util.JUnitVersion;\n+import org.eclipse.xtext.xbase.lib.Procedures.Procedure0;\n+import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;\n+import org.eclipse.xtext.xtext.ui.internal.Activator;\n+import org.eclipse.xtext.xtext.wizard.BuildSystem;\n+import org.eclipse.xtext.xtext.wizard.LanguageServer;\n+import org.eclipse.xtext.xtext.wizard.SourceLayout;\n+import org.osgi.framework.Bundle;\n+\n+import com.google.common.collect.Iterables;\n+\n+public class AdvancedNewProjectPage extends WizardPage {\n+\n+\tprivate Button createUiProject;\n+\n+\tprivate Button createSDKProject;\n+\n+\tprivate Button createP2Project;\n+\n+\tprivate Button createWebProject;\n+\n+\tprivate Button createIdeProject;\n+\n+\tprivate Button createTestProject;\n+\n+\tprivate Button junitVersion4;\n+\n+\tprivate Button junitVersion5;\n+\n+\tprivate Combo preferredBuildSystem;\n+\n+\tprivate Combo createLanguageServer;\n+\n+\tprivate Combo sourceLayout;\n+\n+\tprivate Group createUiProjectSubGroup;\n+\n+\tprivate StatusWidget statusWidget;\n+\n+\tprivate boolean autoSelectIdeProject;\n+\n+\tprivate boolean autoSelectSDKProject;\n+\n+\tpublic AdvancedNewProjectPage(String pageName) {\n+\t\tsuper(pageName);\n+\t\tsetTitle(Messages.AdvancedNewProjectPage_WindowTitle);\n+\t\tsetDescription(Messages.AdvancedNewProjectPage_Description);\n+\t}\n+\n+\t@Override\n+\tpublic void createControl(Composite parent) {\n+\t\tComposite control = new Composite(parent, SWT.NONE);\n+\t\tcontrol.setLayout(new GridLayout(1, false));\n+\t\tcontrol.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true));\n+\n+\t\tGroup(control, (group) -> {\n+\t\t\tgroup.setText(Messages.AdvancedNewProjectPage_LabelFacets);\n+\t\t\tcreateUiProject = CheckBox(group, (button) -> button.setText(Messages.AdvancedNewProjectPage_projEclipse));\n+\t\t\tcreateUiProjectSubGroup = Group(group, (subGroup) -> {\n+\t\t\t\tcreateSDKProject = CheckBox(subGroup, (button) -> button.setText(Messages.AdvancedNewProjectPage_projEclipseSDKFeature));\n+\t\t\t\tcreateP2Project = CheckBox(subGroup, (button) -> button.setText(Messages.AdvancedNewProjectPage_projEclipseP2));\n+\t\t\t});\n+\t\t\tcreateWebProject = CheckBox(group, (button) -> {\n+\t\t\t\tbutton.setText(Messages.AdvancedNewProjectPage_projWeb);\n+\t\t\t\tbutton.setEnabled(true);\n+\t\t\t});\n+\t\t\tcreateIdeProject = CheckBox(group, (button) -> {\n+\t\t\t\tbutton.setText(Messages.AdvancedNewProjectPage_projIde);\n+\t\t\t\tbutton.setEnabled(false);\n+\t\t\t\tInfoDecoration(button, Messages.AdvancedNewProjectPage_projIde_description);\n+\t\t\t\tbutton.setLayoutData(new GridData(SWT.LEFT, SWT.CENTER, true, false));\n+\t\t\t});\n+\n+\t\t\tComposite childComposite = new Composite(group, SWT.NONE);\n+\t\t\tGridLayout layout = new GridLayout(4, false);\n+\t\t\tlayout.marginWidth = 0;\n+\t\t\tlayout.marginHeight = 0;\n+\t\t\tchildComposite.setLayout(layout);\n+\n+\t\t\tcreateTestProject = CheckBox(childComposite, (button) -> {\n+\t\t\t\tbutton.setText(Messages.WizardNewXtextProjectCreationPage_TestingSupport);\n+\t\t\t\tbutton.setLayoutData(new GridData(SWT.LEFT, SWT.CENTER, false, false));\n+\t\t\t});\n+\n+\t\t\tLabel label = new Label(childComposite, SWT.LEFT);\n+\t\t\tlabel.setText(Messages.AdvancedNewProjectPage_junitVersion);\n+\n+\t\t\tjunitVersion4 = Radio(childComposite, (button) -> {\n+\t\t\t\tbutton.setLayoutData(new GridData(SWT.LEFT, SWT.CENTER, false, false));\n+\t\t\t\tbutton.setText(\"4\");\n+\t\t\t\tbutton.setSelection(false);\n+\t\t\t});\n+\n+\t\t\tjunitVersion5 = Radio(childComposite, (button) -> {\n+\t\t\t\tbutton.setLayoutData(new GridData(SWT.LEFT, SWT.CENTER, false, false));\n+\t\t\t\tbutton.setText(\"5\");\n+\t\t\t\tbutton.setSelection(true);\n+\t\t\t});\n+\t\t});\n+\n+\t\tGroup(control, (group) -> {\n+\t\t\tgroup.setText(Messages.AdvancedNewProjectPage_prefBuildSys);\n+\t\t\tpreferredBuildSystem = DropDown(group, (combo) -> {\n+\t\t\t\tcombo.setEnabled(true);\n+\t\t\t\tcombo.setItems(Arrays.stream(BuildSystem.values()).map((sl) -> sl.toString()).toArray(String[] :: new));\n+\t\t\t});\n+\t\t});\n+\n+\t\tGroup(control, (group) -> {\n+\t\t\tgroup.setText(Messages.AdvancedNewProjectPage_languageServer);\n+\t\t\tcreateLanguageServer = DropDown(group, (combo) -> {\n+\t\t\t\tcombo.setEnabled(false);\n+\t\t\t\tcombo.setItems(Arrays.stream(LanguageServer.values()).map((sl) -> sl.toString()).toArray(String[] :: new));\n+\t\t\t\tInfoDecoration(combo, Messages.AdvancedNewProjectPage_languageServer_description);\n+\t\t\t});\n+\t\t});\n+\n+\t\tGroup(control, (group) -> {\n+\t\t\tgroup.setText(Messages.AdvancedNewProjectPage_srcLayout);\n+\t\t\tsourceLayout = DropDown(group, (combo) -> {\n+\t\t\t\tcombo.setEnabled(true);\n+\t\t\t\tcombo.setItems(Arrays.stream(SourceLayout.values()).map((sl) -> sl.toString()).toArray(String[] :: new));\n+\t\t\t});\n+\t\t});\n+\n+\t\tstatusWidget = new StatusWidget(control, SWT.NONE);\n+\t\tstatusWidget.setLayoutData(new GridData(SWT.FILL, SWT.TOP, true, false));\n+\n+\t\tList<Button> uiButtons = Arrays.asList(createUiProject, createWebProject);\n+\n+\t\tSelectionAdapter selectionControlUi = new SelectionAdapter() {\n+\t\t\t@Override\n+\t\t\tpublic void widgetSelected(SelectionEvent e) {\n+\t\t\t\tif (((Button) e.getSource()).getSelection()) {\n+\t\t\t\t\tif (!createIdeProject.getSelection()) {\n+\t\t\t\t\t\tautoSelectIdeProject = true;\n+\t\t\t\t\t}\n+\t\t\t\t\tcreateIdeProject.setSelection(true);\n+\t\t\t\t\tcreateIdeProject.setEnabled(false);\n+\t\t\t\t} else {\n+\t\t\t\t\tif (Iterables.all(uiButtons, (uiButton) -> !uiButton.getSelection())) {\n+\t\t\t\t\t\tcreateIdeProject.setEnabled(true);\n+\t\t\t\t\t}\n+\t\t\t\t\t// auto deselect SDK and p2 project when Eclipse plug-in is deselected\n+\t\t\t\t\tif (e.getSource() == createUiProject) {\n+\t\t\t\t\t\tcreateSDKProject.setSelection(false);\n+\t\t\t\t\t\tcreateP2Project.setSelection(false);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tvalidate(e);\n+\t\t\t}\n+\t\t};\n+\n+\t\tSelectionAdapter selectionControlUpdateSite = new SelectionAdapter() {\n+\t\t\t@Override\n+\t\t\tpublic void widgetSelected(SelectionEvent e) {\n+\t\t\t\tif (((Button) e.getSource()).getSelection()) {\n+\t\t\t\t\tif (!createSDKProject.getSelection()) {\n+\t\t\t\t\t\tautoSelectSDKProject = true;\n+\t\t\t\t\t}\n+\t\t\t\t\tcreateSDKProject.setSelection(true);\n+\t\t\t\t\tcreateSDKProject.setEnabled(false);\n+\t\t\t\t} else {\n+\t\t\t\t\tcreateSDKProject.setEnabled(true);\n+\t\t\t\t}\n+\t\t\t\tvalidate(e);\n+\t\t\t}\n+\t\t};\n+\n+\t\tcreateUiProject.addSelectionListener(new SelectionAdapter() {\n+\t\t\t@Override\n+\t\t\tpublic void widgetSelected(SelectionEvent e) {\n+\t\t\t\tboolean uiProjectSelected = createUiProject.getSelection();\n+\t\t\t\tcreateUiProjectSubGroup.setEnabled(uiProjectSelected);\n+\t\t\t\tcreateSDKProject.setEnabled(uiProjectSelected);\n+\t\t\t\tcreateP2Project.setEnabled(uiProjectSelected);\n+\t\t\t\tvalidate(e);\n+\t\t\t}\n+\t\t});\n+\n+\t\tpreferredBuildSystem.addSelectionListener(new SelectionAdapter() {\n+\t\t\t@Override\n+\t\t\tpublic void widgetSelected(SelectionEvent e) {\n+\t\t\t\tcreateLanguageServer.setEnabled(getPreferredBuildSystem() != BuildSystem.NONE);\n+\t\t\t\tvalidate(e);\n+\t\t\t}\n+\t\t});\n+\n+\t\tcreateLanguageServer.addSelectionListener(new SelectionAdapter() {\n+\t\t\t@Override\n+\t\t\tpublic void widgetSelected(SelectionEvent e) {\n+\t\t\t\tif (isSelected(createLanguageServer, LanguageServer.NONE)) {\n+\t\t\t\t\tif (Iterables.all(uiButtons, (uiButton) -> !uiButton.getSelection())) {\n+\t\t\t\t\t\tcreateIdeProject.setEnabled(true);\n+\t\t\t\t\t}\n+\t\t\t\t} else {\n+\t\t\t\t\tif (!createIdeProject.getSelection()) {\n+\t\t\t\t\t\tcreateIdeProject.setSelection(true);\n+\t\t\t\t\t\tautoSelectIdeProject = true;\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tvalidate(e);\n+\t\t\t}\n+\t\t});\n+\n+\t\tcreateTestProject.addSelectionListener(new SelectionAdapter() {\n+\t\t\t@Override\n+\t\t\tpublic void widgetSelected(SelectionEvent e) {\n+\t\t\t\tboolean enabled = createTestProject.getSelection() == true;\n+\t\t\t\tjunitVersion4.setEnabled(enabled);\n+\t\t\t\tjunitVersion5.setEnabled(enabled);\n+\t\t\t\tvalidate(e);\n+\t\t\t}\n+\t\t});\n+\t\t\n+\t\tSelectionAdapter selectionControl = new SelectionAdapter() {\n+\t\t\t@Override\n+\t\t\tpublic void widgetSelected(SelectionEvent e) {\n+\t\t\t\tvalidate(e);\n+\t\t\t}\n+\t\t};\n+\n+\t\tsourceLayout.addSelectionListener(selectionControl);\n+\t\tcreateUiProject.addSelectionListener(selectionControlUi);\n+\t\tcreateWebProject.addSelectionListener(selectionControlUi);\n+\t\tcreateIdeProject.addSelectionListener(selectionControl);\n+\t\tcreateSDKProject.addSelectionListener(selectionControl);\n+\t\tcreateP2Project.addSelectionListener(selectionControlUpdateSite);\n+\t\tcreateLanguageServer.addSelectionListener(selectionControl);\n+\t\tsetDefaults();\n+\n+\t\tPlatformUI.getWorkbench().getHelpSystem().setHelp(getShell(), \"org.eclipse.xtext.xtext.ui.newProject_Advanced\");\n+\t}\n+\n+\tpublic void validate(SelectionEvent e) {\n+\t\tstatusWidget.clearStatus();\n+\t\tcheckWidgets(e);\n+\t\tsetPageComplete(statusWidget.getSevertity() != IMessageProvider.ERROR);\n+\t}\n+\n+\tpublic void checkWidgets(SelectionEvent e) {\n+\t\tList<Button> uiButtons = Arrays.asList(createUiProject, createWebProject);\n+\n+\t\tif (isSelected(preferredBuildSystem, BuildSystem.MAVEN) && !isBundleResolved(\"org.eclipse.m2e.maven.runtime\")) {\n+\t\t\treportIssue(WARNING, Messages.AdvancedNewProjectPage_noM2e);\n+\t\t}\n+\t\tif (isSelected(preferredBuildSystem, BuildSystem.GRADLE) && !isBundleResolved(\"org.eclipse.buildship.core\")) {\n+\t\t\treportIssue(WARNING, Messages.AdvancedNewProjectPage_noBuildship);\n+\t\t}\n+\t\tif (isSelected(preferredBuildSystem, BuildSystem.GRADLE) && createUiProject.getSelection()) {\n+\t\t\treportIssue(WARNING, Messages.AdvancedNewProjectPage_eclipseAndGradleWarn);\n+\t\t}\n+\t\tif (createUiProject.getSelection() && createP2Project.getSelection() && !createSDKProject.getSelection()) {\n+\t\t\taddIssue(INFORMATION, Messages.AdvancedNewProjectPage_p2AndSdkInfo);\n+\t\t}\n+\n+\t\tObject source = null;\n+\t\tif (e != null) {\n+\t\t\tsource = e.getSource();\n+\t\t}\n+\n+\t\tif (createUiProject.getSelection() && !isSelected(sourceLayout, SourceLayout.PLAIN)) {\n+\t\t\tif (createUiProject == source) {\n+\t\t\t\tString message = \"'\" + createUiProject.getText() + \"' requires \" + SourceLayout.PLAIN + \" source layout. \" //\n+\t\t\t\t\t\t+ \"Please <a>select '\" + SourceLayout.PLAIN + \"'</a> source layout.\";\n+\t\t\t\treportIssue(ERROR, message, () -> select(sourceLayout, SourceLayout.PLAIN));\n+\t\t\t} else {\n+\t\t\t\tString message = SourceLayout.MAVEN + \" source layout is not supported by the '\" + createUiProject.getText() + \"' project. \" //\n+\t\t\t\t\t\t+ \"Please <a>deselect '\" + createUiProject.getText() + \"'</a>.\";\n+\t\t\t\treportIssue(ERROR, message, () -> createUiProject.setSelection(false));\n+\t\t\t}\n+\t\t}\n+\n+\t\tif (isSelected(preferredBuildSystem, BuildSystem.NONE) && isSelected(sourceLayout, SourceLayout.MAVEN)) {\n+\t\t\tif (preferredBuildSystem == source) {\n+\t\t\t\tString message = \"Maven/Gradle source layout is not supported without a build system. \" //\n+\t\t\t\t\t\t+ \"Please <a>select '\" + SourceLayout.PLAIN + \"'</a> source layout.\";\n+\t\t\t\treportIssue(ERROR, message, () -> select(sourceLayout, SourceLayout.PLAIN));\n+\t\t\t} else {\n+\t\t\t\tString message = \"Maven/Gradle source layout is only supported when using Maven or Gradle build system. \" //\n+\t\t\t\t\t\t+ \"You need to choose Maven or Gradle build system. Select <a>Gradle</a> build.\";\n+\t\t\t\treportIssue(ERROR, message, () -> select(preferredBuildSystem, BuildSystem.GRADLE));\n+\t\t\t}\n+\t\t}\n+\n+\t\tif (createWebProject.getSelection() && isSelected(preferredBuildSystem, BuildSystem.NONE)) {\n+\t\t\tif (preferredBuildSystem == source) {\n+\t\t\t\tString message = \"The '\" + createWebProject.getText() + \"' project can not be build without a build system. \" //\n+\t\t\t\t\t\t+ \"Please <a>deselect '\" + createWebProject.getText() + \"'</a>.\";\n+\t\t\t\treportIssue(ERROR, message, () -> createWebProject.setSelection(false));\n+\t\t\t} else {\n+\t\t\t\tString message = \"To build the '\" + createWebProject.getText() + \"' \" //\n+\t\t\t\t\t\t+ \"project, you need to choose Maven or Gradle build system.\" //\n+\t\t\t\t\t\t+ \"Select <a>Gradle</a> build.\";\n+\t\t\t\treportIssue(ERROR, message, () -> select(preferredBuildSystem, BuildSystem.GRADLE));\n+\t\t\t}\n+\t\t}\n+\n+\t\tboolean isSelected = Iterables.any(uiButtons, uiButton -> uiButton.getSelection());\n+\t\tif (isSelected) {\n+\t\t\tcreateIdeProject.setEnabled(false);\n+\t\t}\n+\n+\t\tif (autoSelectIdeProject) {\n+\t\t\tautoSelectIdeProject = false;\n+\t\t\tString message = \"'\" + createIdeProject.getText() + \"' project was automatically selected as option '\"\n+\t\t\t\t\t+ ((Button) source).getText() + \"' requires it.\";\n+\t\t\treportIssue(INFORMATION, message);\n+\t\t}\n+\t\t\n+\t\tif (autoSelectSDKProject) {\n+\t\t\tautoSelectSDKProject = false;\n+\t\t\tString message = \"'\" + createSDKProject.getText() + \"' was automatically selected as option '\" //\n+\t\t\t\t\t+ ((Button) source).getText() + \"' requires it.\";\n+\t\t\treportIssue(INFORMATION, message);\n+\t\t}\n+\t}\n+\n+\tprotected void select(Combo combo, Enum<?> enu) {\n+\t\tString[] items = combo.getItems();", "originalCommit": "a2005b48d1c57e4db2012726b81db3e4aed8c358", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTc2MjI0OA==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1380#discussion_r399762248", "bodyText": "Yes, I have tested this method.", "author": "nbhusare", "createdAt": "2020-03-29T08:05:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTY1NTYxNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTY1NjEwNg==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1380#discussion_r399656106", "bodyText": "Might be nice to add a message to this exception e.g. \"JUnit version could not be determined\"", "author": "tivervac", "createdAt": "2020-03-28T12:19:31Z", "path": "org.eclipse.xtext.xtext.ui/src/org/eclipse/xtext/xtext/ui/wizard/project/AdvancedNewProjectPage.java", "diffHunk": "@@ -0,0 +1,489 @@\n+/**\n+ * Copyright (c) 2015, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.xtext.ui.wizard.project;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import org.eclipse.jface.dialogs.IMessageProvider;\n+import org.eclipse.jface.fieldassist.ControlDecoration;\n+import org.eclipse.jface.fieldassist.FieldDecoration;\n+import org.eclipse.jface.fieldassist.FieldDecorationRegistry;\n+import org.eclipse.jface.wizard.WizardPage;\n+import org.eclipse.swt.SWT;\n+import org.eclipse.swt.events.SelectionAdapter;\n+import org.eclipse.swt.events.SelectionEvent;\n+import org.eclipse.swt.layout.GridData;\n+import org.eclipse.swt.layout.GridLayout;\n+import org.eclipse.swt.widgets.Button;\n+import org.eclipse.swt.widgets.Combo;\n+import org.eclipse.swt.widgets.Composite;\n+import org.eclipse.swt.widgets.Control;\n+import org.eclipse.swt.widgets.Group;\n+import org.eclipse.swt.widgets.Label;\n+import org.eclipse.ui.PlatformUI;\n+import org.eclipse.xtext.util.JUnitVersion;\n+import org.eclipse.xtext.xbase.lib.Procedures.Procedure0;\n+import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;\n+import org.eclipse.xtext.xtext.ui.internal.Activator;\n+import org.eclipse.xtext.xtext.wizard.BuildSystem;\n+import org.eclipse.xtext.xtext.wizard.LanguageServer;\n+import org.eclipse.xtext.xtext.wizard.SourceLayout;\n+import org.osgi.framework.Bundle;\n+\n+import com.google.common.collect.Iterables;\n+\n+public class AdvancedNewProjectPage extends WizardPage {\n+\n+\tprivate Button createUiProject;\n+\n+\tprivate Button createSDKProject;\n+\n+\tprivate Button createP2Project;\n+\n+\tprivate Button createWebProject;\n+\n+\tprivate Button createIdeProject;\n+\n+\tprivate Button createTestProject;\n+\n+\tprivate Button junitVersion4;\n+\n+\tprivate Button junitVersion5;\n+\n+\tprivate Combo preferredBuildSystem;\n+\n+\tprivate Combo createLanguageServer;\n+\n+\tprivate Combo sourceLayout;\n+\n+\tprivate Group createUiProjectSubGroup;\n+\n+\tprivate StatusWidget statusWidget;\n+\n+\tprivate boolean autoSelectIdeProject;\n+\n+\tprivate boolean autoSelectSDKProject;\n+\n+\tpublic AdvancedNewProjectPage(String pageName) {\n+\t\tsuper(pageName);\n+\t\tsetTitle(Messages.AdvancedNewProjectPage_WindowTitle);\n+\t\tsetDescription(Messages.AdvancedNewProjectPage_Description);\n+\t}\n+\n+\t@Override\n+\tpublic void createControl(Composite parent) {\n+\t\tComposite control = new Composite(parent, SWT.NONE);\n+\t\tcontrol.setLayout(new GridLayout(1, false));\n+\t\tcontrol.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true));\n+\n+\t\tGroup(control, (group) -> {\n+\t\t\tgroup.setText(Messages.AdvancedNewProjectPage_LabelFacets);\n+\t\t\tcreateUiProject = CheckBox(group, (button) -> button.setText(Messages.AdvancedNewProjectPage_projEclipse));\n+\t\t\tcreateUiProjectSubGroup = Group(group, (subGroup) -> {\n+\t\t\t\tcreateSDKProject = CheckBox(subGroup, (button) -> button.setText(Messages.AdvancedNewProjectPage_projEclipseSDKFeature));\n+\t\t\t\tcreateP2Project = CheckBox(subGroup, (button) -> button.setText(Messages.AdvancedNewProjectPage_projEclipseP2));\n+\t\t\t});\n+\t\t\tcreateWebProject = CheckBox(group, (button) -> {\n+\t\t\t\tbutton.setText(Messages.AdvancedNewProjectPage_projWeb);\n+\t\t\t\tbutton.setEnabled(true);\n+\t\t\t});\n+\t\t\tcreateIdeProject = CheckBox(group, (button) -> {\n+\t\t\t\tbutton.setText(Messages.AdvancedNewProjectPage_projIde);\n+\t\t\t\tbutton.setEnabled(false);\n+\t\t\t\tInfoDecoration(button, Messages.AdvancedNewProjectPage_projIde_description);\n+\t\t\t\tbutton.setLayoutData(new GridData(SWT.LEFT, SWT.CENTER, true, false));\n+\t\t\t});\n+\n+\t\t\tComposite childComposite = new Composite(group, SWT.NONE);\n+\t\t\tGridLayout layout = new GridLayout(4, false);\n+\t\t\tlayout.marginWidth = 0;\n+\t\t\tlayout.marginHeight = 0;\n+\t\t\tchildComposite.setLayout(layout);\n+\n+\t\t\tcreateTestProject = CheckBox(childComposite, (button) -> {\n+\t\t\t\tbutton.setText(Messages.WizardNewXtextProjectCreationPage_TestingSupport);\n+\t\t\t\tbutton.setLayoutData(new GridData(SWT.LEFT, SWT.CENTER, false, false));\n+\t\t\t});\n+\n+\t\t\tLabel label = new Label(childComposite, SWT.LEFT);\n+\t\t\tlabel.setText(Messages.AdvancedNewProjectPage_junitVersion);\n+\n+\t\t\tjunitVersion4 = Radio(childComposite, (button) -> {\n+\t\t\t\tbutton.setLayoutData(new GridData(SWT.LEFT, SWT.CENTER, false, false));\n+\t\t\t\tbutton.setText(\"4\");\n+\t\t\t\tbutton.setSelection(false);\n+\t\t\t});\n+\n+\t\t\tjunitVersion5 = Radio(childComposite, (button) -> {\n+\t\t\t\tbutton.setLayoutData(new GridData(SWT.LEFT, SWT.CENTER, false, false));\n+\t\t\t\tbutton.setText(\"5\");\n+\t\t\t\tbutton.setSelection(true);\n+\t\t\t});\n+\t\t});\n+\n+\t\tGroup(control, (group) -> {\n+\t\t\tgroup.setText(Messages.AdvancedNewProjectPage_prefBuildSys);\n+\t\t\tpreferredBuildSystem = DropDown(group, (combo) -> {\n+\t\t\t\tcombo.setEnabled(true);\n+\t\t\t\tcombo.setItems(Arrays.stream(BuildSystem.values()).map((sl) -> sl.toString()).toArray(String[] :: new));\n+\t\t\t});\n+\t\t});\n+\n+\t\tGroup(control, (group) -> {\n+\t\t\tgroup.setText(Messages.AdvancedNewProjectPage_languageServer);\n+\t\t\tcreateLanguageServer = DropDown(group, (combo) -> {\n+\t\t\t\tcombo.setEnabled(false);\n+\t\t\t\tcombo.setItems(Arrays.stream(LanguageServer.values()).map((sl) -> sl.toString()).toArray(String[] :: new));\n+\t\t\t\tInfoDecoration(combo, Messages.AdvancedNewProjectPage_languageServer_description);\n+\t\t\t});\n+\t\t});\n+\n+\t\tGroup(control, (group) -> {\n+\t\t\tgroup.setText(Messages.AdvancedNewProjectPage_srcLayout);\n+\t\t\tsourceLayout = DropDown(group, (combo) -> {\n+\t\t\t\tcombo.setEnabled(true);\n+\t\t\t\tcombo.setItems(Arrays.stream(SourceLayout.values()).map((sl) -> sl.toString()).toArray(String[] :: new));\n+\t\t\t});\n+\t\t});\n+\n+\t\tstatusWidget = new StatusWidget(control, SWT.NONE);\n+\t\tstatusWidget.setLayoutData(new GridData(SWT.FILL, SWT.TOP, true, false));\n+\n+\t\tList<Button> uiButtons = Arrays.asList(createUiProject, createWebProject);\n+\n+\t\tSelectionAdapter selectionControlUi = new SelectionAdapter() {\n+\t\t\t@Override\n+\t\t\tpublic void widgetSelected(SelectionEvent e) {\n+\t\t\t\tif (((Button) e.getSource()).getSelection()) {\n+\t\t\t\t\tif (!createIdeProject.getSelection()) {\n+\t\t\t\t\t\tautoSelectIdeProject = true;\n+\t\t\t\t\t}\n+\t\t\t\t\tcreateIdeProject.setSelection(true);\n+\t\t\t\t\tcreateIdeProject.setEnabled(false);\n+\t\t\t\t} else {\n+\t\t\t\t\tif (Iterables.all(uiButtons, (uiButton) -> !uiButton.getSelection())) {\n+\t\t\t\t\t\tcreateIdeProject.setEnabled(true);\n+\t\t\t\t\t}\n+\t\t\t\t\t// auto deselect SDK and p2 project when Eclipse plug-in is deselected\n+\t\t\t\t\tif (e.getSource() == createUiProject) {\n+\t\t\t\t\t\tcreateSDKProject.setSelection(false);\n+\t\t\t\t\t\tcreateP2Project.setSelection(false);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tvalidate(e);\n+\t\t\t}\n+\t\t};\n+\n+\t\tSelectionAdapter selectionControlUpdateSite = new SelectionAdapter() {\n+\t\t\t@Override\n+\t\t\tpublic void widgetSelected(SelectionEvent e) {\n+\t\t\t\tif (((Button) e.getSource()).getSelection()) {\n+\t\t\t\t\tif (!createSDKProject.getSelection()) {\n+\t\t\t\t\t\tautoSelectSDKProject = true;\n+\t\t\t\t\t}\n+\t\t\t\t\tcreateSDKProject.setSelection(true);\n+\t\t\t\t\tcreateSDKProject.setEnabled(false);\n+\t\t\t\t} else {\n+\t\t\t\t\tcreateSDKProject.setEnabled(true);\n+\t\t\t\t}\n+\t\t\t\tvalidate(e);\n+\t\t\t}\n+\t\t};\n+\n+\t\tcreateUiProject.addSelectionListener(new SelectionAdapter() {\n+\t\t\t@Override\n+\t\t\tpublic void widgetSelected(SelectionEvent e) {\n+\t\t\t\tboolean uiProjectSelected = createUiProject.getSelection();\n+\t\t\t\tcreateUiProjectSubGroup.setEnabled(uiProjectSelected);\n+\t\t\t\tcreateSDKProject.setEnabled(uiProjectSelected);\n+\t\t\t\tcreateP2Project.setEnabled(uiProjectSelected);\n+\t\t\t\tvalidate(e);\n+\t\t\t}\n+\t\t});\n+\n+\t\tpreferredBuildSystem.addSelectionListener(new SelectionAdapter() {\n+\t\t\t@Override\n+\t\t\tpublic void widgetSelected(SelectionEvent e) {\n+\t\t\t\tcreateLanguageServer.setEnabled(getPreferredBuildSystem() != BuildSystem.NONE);\n+\t\t\t\tvalidate(e);\n+\t\t\t}\n+\t\t});\n+\n+\t\tcreateLanguageServer.addSelectionListener(new SelectionAdapter() {\n+\t\t\t@Override\n+\t\t\tpublic void widgetSelected(SelectionEvent e) {\n+\t\t\t\tif (isSelected(createLanguageServer, LanguageServer.NONE)) {\n+\t\t\t\t\tif (Iterables.all(uiButtons, (uiButton) -> !uiButton.getSelection())) {\n+\t\t\t\t\t\tcreateIdeProject.setEnabled(true);\n+\t\t\t\t\t}\n+\t\t\t\t} else {\n+\t\t\t\t\tif (!createIdeProject.getSelection()) {\n+\t\t\t\t\t\tcreateIdeProject.setSelection(true);\n+\t\t\t\t\t\tautoSelectIdeProject = true;\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tvalidate(e);\n+\t\t\t}\n+\t\t});\n+\n+\t\tcreateTestProject.addSelectionListener(new SelectionAdapter() {\n+\t\t\t@Override\n+\t\t\tpublic void widgetSelected(SelectionEvent e) {\n+\t\t\t\tboolean enabled = createTestProject.getSelection() == true;\n+\t\t\t\tjunitVersion4.setEnabled(enabled);\n+\t\t\t\tjunitVersion5.setEnabled(enabled);\n+\t\t\t\tvalidate(e);\n+\t\t\t}\n+\t\t});\n+\t\t\n+\t\tSelectionAdapter selectionControl = new SelectionAdapter() {\n+\t\t\t@Override\n+\t\t\tpublic void widgetSelected(SelectionEvent e) {\n+\t\t\t\tvalidate(e);\n+\t\t\t}\n+\t\t};\n+\n+\t\tsourceLayout.addSelectionListener(selectionControl);\n+\t\tcreateUiProject.addSelectionListener(selectionControlUi);\n+\t\tcreateWebProject.addSelectionListener(selectionControlUi);\n+\t\tcreateIdeProject.addSelectionListener(selectionControl);\n+\t\tcreateSDKProject.addSelectionListener(selectionControl);\n+\t\tcreateP2Project.addSelectionListener(selectionControlUpdateSite);\n+\t\tcreateLanguageServer.addSelectionListener(selectionControl);\n+\t\tsetDefaults();\n+\n+\t\tPlatformUI.getWorkbench().getHelpSystem().setHelp(getShell(), \"org.eclipse.xtext.xtext.ui.newProject_Advanced\");\n+\t}\n+\n+\tpublic void validate(SelectionEvent e) {\n+\t\tstatusWidget.clearStatus();\n+\t\tcheckWidgets(e);\n+\t\tsetPageComplete(statusWidget.getSevertity() != IMessageProvider.ERROR);\n+\t}\n+\n+\tpublic void checkWidgets(SelectionEvent e) {\n+\t\tList<Button> uiButtons = Arrays.asList(createUiProject, createWebProject);\n+\n+\t\tif (isSelected(preferredBuildSystem, BuildSystem.MAVEN) && !isBundleResolved(\"org.eclipse.m2e.maven.runtime\")) {\n+\t\t\treportIssue(WARNING, Messages.AdvancedNewProjectPage_noM2e);\n+\t\t}\n+\t\tif (isSelected(preferredBuildSystem, BuildSystem.GRADLE) && !isBundleResolved(\"org.eclipse.buildship.core\")) {\n+\t\t\treportIssue(WARNING, Messages.AdvancedNewProjectPage_noBuildship);\n+\t\t}\n+\t\tif (isSelected(preferredBuildSystem, BuildSystem.GRADLE) && createUiProject.getSelection()) {\n+\t\t\treportIssue(WARNING, Messages.AdvancedNewProjectPage_eclipseAndGradleWarn);\n+\t\t}\n+\t\tif (createUiProject.getSelection() && createP2Project.getSelection() && !createSDKProject.getSelection()) {\n+\t\t\taddIssue(INFORMATION, Messages.AdvancedNewProjectPage_p2AndSdkInfo);\n+\t\t}\n+\n+\t\tObject source = null;\n+\t\tif (e != null) {\n+\t\t\tsource = e.getSource();\n+\t\t}\n+\n+\t\tif (createUiProject.getSelection() && !isSelected(sourceLayout, SourceLayout.PLAIN)) {\n+\t\t\tif (createUiProject == source) {\n+\t\t\t\tString message = \"'\" + createUiProject.getText() + \"' requires \" + SourceLayout.PLAIN + \" source layout. \" //\n+\t\t\t\t\t\t+ \"Please <a>select '\" + SourceLayout.PLAIN + \"'</a> source layout.\";\n+\t\t\t\treportIssue(ERROR, message, () -> select(sourceLayout, SourceLayout.PLAIN));\n+\t\t\t} else {\n+\t\t\t\tString message = SourceLayout.MAVEN + \" source layout is not supported by the '\" + createUiProject.getText() + \"' project. \" //\n+\t\t\t\t\t\t+ \"Please <a>deselect '\" + createUiProject.getText() + \"'</a>.\";\n+\t\t\t\treportIssue(ERROR, message, () -> createUiProject.setSelection(false));\n+\t\t\t}\n+\t\t}\n+\n+\t\tif (isSelected(preferredBuildSystem, BuildSystem.NONE) && isSelected(sourceLayout, SourceLayout.MAVEN)) {\n+\t\t\tif (preferredBuildSystem == source) {\n+\t\t\t\tString message = \"Maven/Gradle source layout is not supported without a build system. \" //\n+\t\t\t\t\t\t+ \"Please <a>select '\" + SourceLayout.PLAIN + \"'</a> source layout.\";\n+\t\t\t\treportIssue(ERROR, message, () -> select(sourceLayout, SourceLayout.PLAIN));\n+\t\t\t} else {\n+\t\t\t\tString message = \"Maven/Gradle source layout is only supported when using Maven or Gradle build system. \" //\n+\t\t\t\t\t\t+ \"You need to choose Maven or Gradle build system. Select <a>Gradle</a> build.\";\n+\t\t\t\treportIssue(ERROR, message, () -> select(preferredBuildSystem, BuildSystem.GRADLE));\n+\t\t\t}\n+\t\t}\n+\n+\t\tif (createWebProject.getSelection() && isSelected(preferredBuildSystem, BuildSystem.NONE)) {\n+\t\t\tif (preferredBuildSystem == source) {\n+\t\t\t\tString message = \"The '\" + createWebProject.getText() + \"' project can not be build without a build system. \" //\n+\t\t\t\t\t\t+ \"Please <a>deselect '\" + createWebProject.getText() + \"'</a>.\";\n+\t\t\t\treportIssue(ERROR, message, () -> createWebProject.setSelection(false));\n+\t\t\t} else {\n+\t\t\t\tString message = \"To build the '\" + createWebProject.getText() + \"' \" //\n+\t\t\t\t\t\t+ \"project, you need to choose Maven or Gradle build system.\" //\n+\t\t\t\t\t\t+ \"Select <a>Gradle</a> build.\";\n+\t\t\t\treportIssue(ERROR, message, () -> select(preferredBuildSystem, BuildSystem.GRADLE));\n+\t\t\t}\n+\t\t}\n+\n+\t\tboolean isSelected = Iterables.any(uiButtons, uiButton -> uiButton.getSelection());\n+\t\tif (isSelected) {\n+\t\t\tcreateIdeProject.setEnabled(false);\n+\t\t}\n+\n+\t\tif (autoSelectIdeProject) {\n+\t\t\tautoSelectIdeProject = false;\n+\t\t\tString message = \"'\" + createIdeProject.getText() + \"' project was automatically selected as option '\"\n+\t\t\t\t\t+ ((Button) source).getText() + \"' requires it.\";\n+\t\t\treportIssue(INFORMATION, message);\n+\t\t}\n+\t\t\n+\t\tif (autoSelectSDKProject) {\n+\t\t\tautoSelectSDKProject = false;\n+\t\t\tString message = \"'\" + createSDKProject.getText() + \"' was automatically selected as option '\" //\n+\t\t\t\t\t+ ((Button) source).getText() + \"' requires it.\";\n+\t\t\treportIssue(INFORMATION, message);\n+\t\t}\n+\t}\n+\n+\tprotected void select(Combo combo, Enum<?> enu) {\n+\t\tString[] items = combo.getItems();\n+\t\tfor (int i = 0; i < items.length; i++) {\n+\t\t\tif (enu.toString().equals(items[i])) {\n+\t\t\t\tcombo.select(i);\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tprotected boolean isSelected(Combo combo, Enum<?> enu) {\n+\t\treturn enu.toString().equals(combo.getText());\n+\t}\n+\n+\tprotected <T extends Control> void reportIssue(int severity, String text) {\n+\t\treportIssue(severity, text, () -> {});\n+\t}\n+\n+\tprotected <T extends Control> void reportIssue(int severity, String text, Procedure0 fix) {\n+\t\tstatusWidget.setStatus(severity, text, fix, () -> {\n+\t\t\tvalidate(null);\n+\t\t});\n+\t\t((Composite) getControl()).layout();\n+\t}\n+\n+\tprotected <T extends Control> void addIssue(int severity, String text) {\n+\t\tstatusWidget.addStatus(severity, text);\n+\t\t((Composite) getControl()).layout();\n+\t}\n+\n+\tprotected boolean isBundleResolved(String bundleId) {\n+\t\tBundle[] bundles = Activator.getInstance().getBundle().getBundleContext().getBundles();\n+\t\tOptional<Bundle> bundle = Arrays.stream(bundles).filter(b -> bundleId.equals(b.getSymbolicName())).findFirst();\n+\t\treturn bundle.isPresent() && (bundle.get().getState() & (Bundle.RESOLVED | Bundle.STARTING) | Bundle.ACTIVE) != 0;\n+\t}\n+\n+\tprotected Group Group(Composite parent, Procedure1<? super Group> config) {\n+\t\tGroup group = new Group(parent, SWT.NONE);\n+\t\tgroup.setFont(parent.getFont());\n+\t\tgroup.setLayout(new GridLayout(1, false));\n+\t\tgroup.setLayoutData(new GridData(SWT.FILL, SWT.TOP, true, false));\n+\t\tconfig.apply(group);\n+\t\treturn group;\n+\t}\n+\n+\tprotected Button CheckBox(Composite composite, Procedure1<? super Button> config) {\n+\t\tButton button = new Button(composite, SWT.CHECK);\n+\t\tbutton.setFont(button.getParent().getFont());\n+\t\tbutton.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false));\n+\t\tconfig.apply(button);\n+\t\treturn button;\n+\t}\n+\n+\tprotected Button Radio(Composite composite, Procedure1<? super Button> config) {\n+\t\tButton button = new Button(composite, SWT.RADIO);\n+\t\tbutton.setFont(button.getParent().getFont());\n+\t\tbutton.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false));\n+\t\tconfig.apply(button);\n+\t\treturn button;\n+\t}\n+\n+\tprotected Combo DropDown(Composite parent, Procedure1<? super Combo> config) {\n+\t\tCombo combo = new Combo(parent, SWT.READ_ONLY);\n+\t\tcombo.setFont(parent.getFont());\n+\t\tcombo.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));\n+\t\tconfig.apply(combo);\n+\t\treturn combo;\n+\t}\n+\n+\tprotected ControlDecoration InfoDecoration(Control control, String text) {\n+\t\tFieldDecoration infoField = FieldDecorationRegistry.getDefault().getFieldDecoration(FieldDecorationRegistry.DEC_INFORMATION);\n+\t\tControlDecoration controlDecoration = new ControlDecoration(control, (SWT.TOP + SWT.RIGHT));\n+\t\tcontrolDecoration.setImage(infoField.getImage());\n+\t\tcontrolDecoration.setDescriptionText(text);\n+\t\tcontrolDecoration.setShowHover(true);\n+\t\treturn controlDecoration;\n+\t}\n+\n+\tprotected void setDefaults() {\n+\t\tcreateUiProject.setSelection(true);\n+\t\tcreateIdeProject.setSelection(true);\n+\t\tcreateTestProject.setSelection(true);\n+\t\tcreateWebProject.setSelection(false);\n+\t\tcreateSDKProject.setSelection(false);\n+\t\tcreateP2Project.setSelection(false);\n+\n+\t\tselect(preferredBuildSystem, BuildSystem.NONE);\n+\t\tselect(createLanguageServer, LanguageServer.NONE);\n+\t\tselect(sourceLayout, SourceLayout.PLAIN);\n+\t}\n+\n+\tpublic boolean isCreateUiProject() {\n+\t\treturn createUiProject.getSelection();\n+\t}\n+\n+\tpublic boolean isCreateTestProject() {\n+\t\treturn createTestProject.getSelection();\n+\t}\n+\n+\tpublic boolean isCreateIdeProject() {\n+\t\treturn createIdeProject.getSelection();\n+\t}\n+\n+\tpublic boolean isCreateWebProject() {\n+\t\treturn createWebProject.getSelection();\n+\t}\n+\n+\tpublic boolean isCreateSdkProject() {\n+\t\treturn createUiProject.getSelection() && createSDKProject.getSelection();\n+\t}\n+\n+\tpublic boolean isCreateP2Project() {\n+\t\treturn createUiProject.getSelection() && createP2Project.getSelection();\n+\t}\n+\n+\tpublic BuildSystem getPreferredBuildSystem() {\n+\t\treturn BuildSystem.values()[preferredBuildSystem.getSelectionIndex()];\n+\t}\n+\n+\tpublic SourceLayout getSourceLayout() {\n+\t\treturn SourceLayout.values()[sourceLayout.getSelectionIndex()];\n+\t}\n+\n+\tpublic LanguageServer getLanguageServer() {\n+\t\tif (getPreferredBuildSystem() == BuildSystem.NONE) {\n+\t\t\treturn LanguageServer.NONE;\n+\t\t}\n+\t\treturn LanguageServer.values()[createLanguageServer.getSelectionIndex()];\n+\t}\n+\n+\tpublic JUnitVersion getSelectedJUnitVersion() {\n+\t\tif (junitVersion4.getSelection()) {\n+\t\t\treturn JUnitVersion.JUNIT_4;\n+\t\t} else if (junitVersion5.getSelection()) {\n+\t\t\treturn JUnitVersion.JUNIT_5;\n+\t\t} else {\n+\t\t\tthrow new IllegalStateException();", "originalCommit": "a2005b48d1c57e4db2012726b81db3e4aed8c358", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "e541fb8f48938315bbe1c042d2e6cd35e487accf", "url": "https://github.com/eclipse/xtext-eclipse/commit/e541fb8f48938315bbe1c042d2e6cd35e487accf", "message": "Migrated the Xtend code from org.eclipse.xtext.xtext.ui project to Java\n\nSigned-off-by: nbhusare <neerajbhusare@gmail.com>", "committedDate": "2020-03-28T16:27:02Z", "type": "forcePushed"}, {"oid": "8e18b632c354f4f60edb519e653759d8d4554c59", "url": "https://github.com/eclipse/xtext-eclipse/commit/8e18b632c354f4f60edb519e653759d8d4554c59", "message": "Migrated the Xtend code from org.eclipse.xtext.xtext.ui project to Java\n\nSigned-off-by: nbhusare <neerajbhusare@gmail.com>", "committedDate": "2020-03-29T10:13:35Z", "type": "commit"}, {"oid": "8e18b632c354f4f60edb519e653759d8d4554c59", "url": "https://github.com/eclipse/xtext-eclipse/commit/8e18b632c354f4f60edb519e653759d8d4554c59", "message": "Migrated the Xtend code from org.eclipse.xtext.xtext.ui project to Java\n\nSigned-off-by: nbhusare <neerajbhusare@gmail.com>", "committedDate": "2020-03-29T10:13:35Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTc3NzAxMw==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1380#discussion_r399777013", "bodyText": "PS image below. Changed the value of widthHint from 15 to 20 pixels. There were cases where I found that the image was getting cropped. Changing it to 20 pixes resolves that issue, also the additional pixels improves the user experience.", "author": "nbhusare", "createdAt": "2020-03-29T10:27:31Z", "path": "org.eclipse.xtext.xtext.ui/src/org/eclipse/xtext/xtext/ui/wizard/project/StatusWidget.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/**\n+ * Copyright (c) 2015, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.xtext.ui.wizard.project;\n+\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import org.eclipse.jface.dialogs.Dialog;\n+import org.eclipse.jface.dialogs.IMessageProvider;\n+import org.eclipse.jface.resource.JFaceResources;\n+import org.eclipse.swt.SWT;\n+import org.eclipse.swt.events.SelectionAdapter;\n+import org.eclipse.swt.events.SelectionEvent;\n+import org.eclipse.swt.graphics.Image;\n+import org.eclipse.swt.layout.GridData;\n+import org.eclipse.swt.layout.GridLayout;\n+import org.eclipse.swt.widgets.Composite;\n+import org.eclipse.swt.widgets.Label;\n+import org.eclipse.swt.widgets.Link;\n+import org.eclipse.xtext.xbase.lib.Procedures.Procedure0;\n+\n+/**\n+ * @author dhuebner - Initial contribution and API\n+ */\n+public class StatusWidget extends Composite {\n+\n+\tprivate Link link;\n+\n+\tprivate Label imageLabel;\n+\n+\tprivate Procedure0 quickFix = () -> {};\n+\n+\tprivate int severity = IMessageProvider.NONE;\n+\t\n+\tprivate static final Pattern ANCHOR_PATTERN = Pattern.compile(\"<a>(.*)</a>\");\n+\n+\tpublic StatusWidget(Composite parent, int style) {\n+\t\tsuper(parent, style);\n+\t\tcreateControls();\n+\t}\n+\n+\tprotected void createControls() {\n+\t\tsetLayout(new GridLayout(2, false));\n+\n+\t\timageLabel = new Label(this, SWT.NONE);\n+\t\timageLabel.setText(\"   \");\n+\t\tGridData imgLabelLayoutData = new GridData(GridData.VERTICAL_ALIGN_BEGINNING);\n+\t\timgLabelLayoutData.widthHint = 20;", "originalCommit": "8e18b632c354f4f60edb519e653759d8d4554c59", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTc3NzQwMQ==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1380#discussion_r399777401", "bodyText": "PS images below.\nBefore: linkLayoutData.heightHint = 30;\n\nAfter: linkLayoutData.heightHint = 40;", "author": "nbhusare", "createdAt": "2020-03-29T10:30:45Z", "path": "org.eclipse.xtext.xtext.ui/src/org/eclipse/xtext/xtext/ui/wizard/project/StatusWidget.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/**\n+ * Copyright (c) 2015, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.xtext.ui.wizard.project;\n+\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import org.eclipse.jface.dialogs.Dialog;\n+import org.eclipse.jface.dialogs.IMessageProvider;\n+import org.eclipse.jface.resource.JFaceResources;\n+import org.eclipse.swt.SWT;\n+import org.eclipse.swt.events.SelectionAdapter;\n+import org.eclipse.swt.events.SelectionEvent;\n+import org.eclipse.swt.graphics.Image;\n+import org.eclipse.swt.layout.GridData;\n+import org.eclipse.swt.layout.GridLayout;\n+import org.eclipse.swt.widgets.Composite;\n+import org.eclipse.swt.widgets.Label;\n+import org.eclipse.swt.widgets.Link;\n+import org.eclipse.xtext.xbase.lib.Procedures.Procedure0;\n+\n+/**\n+ * @author dhuebner - Initial contribution and API\n+ */\n+public class StatusWidget extends Composite {\n+\n+\tprivate Link link;\n+\n+\tprivate Label imageLabel;\n+\n+\tprivate Procedure0 quickFix = () -> {};\n+\n+\tprivate int severity = IMessageProvider.NONE;\n+\t\n+\tprivate static final Pattern ANCHOR_PATTERN = Pattern.compile(\"<a>(.*)</a>\");\n+\n+\tpublic StatusWidget(Composite parent, int style) {\n+\t\tsuper(parent, style);\n+\t\tcreateControls();\n+\t}\n+\n+\tprotected void createControls() {\n+\t\tsetLayout(new GridLayout(2, false));\n+\n+\t\timageLabel = new Label(this, SWT.NONE);\n+\t\timageLabel.setText(\"   \");\n+\t\tGridData imgLabelLayoutData = new GridData(GridData.VERTICAL_ALIGN_BEGINNING);\n+\t\timgLabelLayoutData.widthHint = 20;\n+\t\timageLabel.setLayoutData(imgLabelLayoutData);\n+\n+\t\tlink = new Link(this, SWT.NONE);\n+\t\tGridData linkLayoutData = new GridData(GridData.FILL_HORIZONTAL);\n+\t\tlinkLayoutData.heightHint = 40;", "originalCommit": "8e18b632c354f4f60edb519e653759d8d4554c59", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM5NTg4OQ==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1380#discussion_r400395889", "bodyText": "LGTM", "author": "tivervac", "createdAt": "2020-03-30T18:14:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTc3NzQwMQ=="}], "type": "inlineReview"}]}