{"pr_number": 1570, "pr_title": "[eclipse/xtext#1837] converted xtend 2 java", "pr_createdAt": "2020-10-25T07:25:52Z", "pr_url": "https://github.com/eclipse/xtext-eclipse/pull/1570", "timeline": [{"oid": "af07785c51c4b8408b0bd4a0e2558cf0db8bb6e3", "url": "https://github.com/eclipse/xtext-eclipse/commit/af07785c51c4b8408b0bd4a0e2558cf0db8bb6e3", "message": "[eclipse/xtext#1837] converted xtend 2 java\n\nSigned-off-by: Christian Dietrich <christian.dietrich@itemis.de>", "committedDate": "2020-10-25T09:37:38Z", "type": "forcePushed"}, {"oid": "ba0aa8379781a1de5fd42d49f7f2d644fd45336e", "url": "https://github.com/eclipse/xtext-eclipse/commit/ba0aa8379781a1de5fd42d49f7f2d644fd45336e", "message": "[eclipse/xtext#1837] converted xtend 2 java\n\nSigned-off-by: Christian Dietrich <christian.dietrich@itemis.de>", "committedDate": "2020-10-25T10:26:16Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTU4MTQ2Mg==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1570#discussion_r511581462", "bodyText": "Isn't new ArrayList<>() good enough?", "author": "tivervac", "createdAt": "2020-10-25T11:08:01Z", "path": "org.eclipse.xtext.ui.tests/src-longrunning/org/eclipse/xtext/ui/tests/refactoring/ProgressReportingTest.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/**\n+ * Copyright (c) 2019, 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ui.tests.refactoring;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.eclipse.core.resources.IFile;\n+import org.eclipse.core.resources.IResource;\n+import org.eclipse.core.runtime.IProgressMonitor;\n+import org.eclipse.core.runtime.NullProgressMonitor;\n+import org.eclipse.ltk.core.refactoring.resource.RenameResourceDescriptor;\n+import org.eclipse.xtext.xbase.lib.CollectionLiterals;\n+import org.eclipse.xtext.xbase.lib.IterableExtensions;\n+import org.eclipse.xtext.xbase.lib.StringExtensions;\n+import org.junit.Assert;\n+import org.junit.ComparisonFailure;\n+import org.junit.Test;\n+\n+/**\n+ * @author Christian Schneider - Initial contribution and API\n+ */\n+public class ProgressReportingTest extends AbstractResourceRelocationTest {\n+\tpublic static class TestProgressMonitor extends NullProgressMonitor {\n+\t\tprivate ArrayList<String> events = CollectionLiterals.<String> newArrayList();", "originalCommit": "ba0aa8379781a1de5fd42d49f7f2d644fd45336e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTU4MTczMQ==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1570#discussion_r511581731", "bodyText": "Streams also have a findFirst ;)", "author": "tivervac", "createdAt": "2020-10-25T11:10:17Z", "path": "org.eclipse.xtext.ui.tests/tests/org/eclipse/xtext/ui/tests/core/resource/Storage2UriMapperJavaImplTest.java", "diffHunk": "@@ -0,0 +1,253 @@\n+/**\n+ * Copyright (c) 2013, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ui.tests.core.resource;\n+\n+import java.lang.reflect.Field;\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.Map;\n+\n+import org.eclipse.core.resources.IFile;\n+import org.eclipse.core.resources.IStorage;\n+import org.eclipse.core.resources.ResourcesPlugin;\n+import org.eclipse.core.runtime.CoreException;\n+import org.eclipse.core.runtime.IProgressMonitor;\n+import org.eclipse.emf.common.util.URI;\n+import org.eclipse.jdt.core.IJavaProject;\n+import org.eclipse.jdt.core.JavaCore;\n+import org.eclipse.ui.actions.WorkspaceModifyOperation;\n+import org.eclipse.xtext.ui.resource.JarEntryLocator;\n+import org.eclipse.xtext.ui.resource.Storage2UriMapperJavaImpl;\n+import org.eclipse.xtext.ui.resource.Storage2UriMapperJavaImpl.PackageFragmentRootData;\n+import org.eclipse.xtext.ui.resource.UriValidator;\n+import org.eclipse.xtext.ui.testing.util.IResourcesSetupUtil;\n+import org.eclipse.xtext.ui.testing.util.JavaProjectSetupUtil;\n+import org.eclipse.xtext.ui.util.JavaProjectClasspathChangeAnalyzer;\n+import org.eclipse.xtext.ui.workspace.WorkspaceLockAccess;\n+import org.eclipse.xtext.xbase.lib.IterableExtensions;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import com.google.common.base.Joiner;\n+import com.google.common.collect.Iterables;\n+import com.google.common.collect.Lists;\n+\n+/**\n+ * @author Anton Kosyakov - Initial contribution and API\n+ */\n+public class Storage2UriMapperJavaImplTest extends Assert {\n+\tprivate Storage2UriMapperJavaImpl storage2UriMapperJava;\n+\n+\t@Before\n+\tpublic void setUp() {\n+\t\tstorage2UriMapperJava = createFreshStorage2UriMapper();\n+\t\tJavaCore.addElementChangedListener(storage2UriMapperJava);\n+\t}\n+\n+\t@After\n+\tpublic void tearDown() throws Exception {\n+\t\tJavaCore.removeElementChangedListener(storage2UriMapperJava);\n+\t\tIResourcesSetupUtil.cleanWorkspace();\n+\t}\n+\n+\tprivate boolean isExpectedJRESize(int size) {\n+\t\tswitch (size) {\n+\t\t\tcase 1:\n+\t\t\t\t/* java8 */ return true;\n+\t\t\tcase 63:\n+\t\t\t\t/* java9 */ return true;\n+\t\t\tcase 49:\n+\t\t\t\t/* java10 + java11 + java13 */ return true;\n+\t\t\tcase 51:\n+\t\t\t\t/* java14 */ return true;\n+\t\t\tdefault:\n+\t\t\t\treturn false;\n+\t\t}\n+\t}\n+\n+\tprivate boolean isExpectedJRESize(int size, int multiplier) {\n+\t\treturn isExpectedJRESize(size / multiplier) && size / multiplier * multiplier == size;\n+\t}\n+\n+\tprotected Storage2UriMapperJavaImpl createFreshStorage2UriMapper() {\n+\t\tStorage2UriMapperJavaImpl mapper = new Storage2UriMapperJavaImpl();\n+\t\tmapper.setUriValidator(new UriValidator() {\n+\t\t\t@Override\n+\t\t\tpublic boolean isPossiblyManaged(IStorage storage) {\n+\t\t\t\treturn \"indexed\".equals(storage.getFullPath().getFileExtension());\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic boolean isValid(URI uri, IStorage storage) {\n+\t\t\t\treturn \"indexed\".equals(storage.getFullPath().getFileExtension());\n+\t\t\t}\n+\t\t});\n+\t\tmapper.setLocator(new JarEntryLocator());\n+\t\tmapper.setWorkspace(ResourcesPlugin.getWorkspace());\n+\t\tmapper.setWorkspaceLockAccess(new WorkspaceLockAccess());\n+\t\tmapper.setJavaProjectClasspathChangeAnalyzer(new JavaProjectClasspathChangeAnalyzer());\n+\t\treturn mapper;\n+\t}\n+\n+\t@Test\n+\tpublic void testOnClasspathChange() throws Exception {\n+\t\tAssert.assertEquals(\"\" + getCachedPackageFragmentRootData(), 0, getCachedPackageFragmentRootData().size());\n+\t\tIJavaProject project = JavaProjectSetupUtil.createJavaProject(\"testProject\");\n+\t\tint sizeBefore = getCachedPackageFragmentRootData().size();\n+\t\t// it should contain all the jars from JDK now\n+\t\tAssert.assertTrue(sizeBefore > 0);\n+\t\tAssert.assertNull(IterableExtensions.findFirst(getCachedPackageFragmentRootData().keySet(), it -> it.contains(\"foo.jar\")));", "originalCommit": "ba0aa8379781a1de5fd42d49f7f2d644fd45336e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTU4MTg5MA==", "url": "https://github.com/eclipse/xtext-eclipse/pull/1570#discussion_r511581890", "bodyText": "Would be nice if there could be more reuse between these blocks but not sure it's possible", "author": "tivervac", "createdAt": "2020-10-25T11:12:04Z", "path": "org.eclipse.xtext.ui.tests/tests/org/eclipse/xtext/ui/tests/core/resource/Storage2UriMapperJavaImplTest.java", "diffHunk": "@@ -0,0 +1,253 @@\n+/**\n+ * Copyright (c) 2013, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ui.tests.core.resource;\n+\n+import java.lang.reflect.Field;\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.Map;\n+\n+import org.eclipse.core.resources.IFile;\n+import org.eclipse.core.resources.IStorage;\n+import org.eclipse.core.resources.ResourcesPlugin;\n+import org.eclipse.core.runtime.CoreException;\n+import org.eclipse.core.runtime.IProgressMonitor;\n+import org.eclipse.emf.common.util.URI;\n+import org.eclipse.jdt.core.IJavaProject;\n+import org.eclipse.jdt.core.JavaCore;\n+import org.eclipse.ui.actions.WorkspaceModifyOperation;\n+import org.eclipse.xtext.ui.resource.JarEntryLocator;\n+import org.eclipse.xtext.ui.resource.Storage2UriMapperJavaImpl;\n+import org.eclipse.xtext.ui.resource.Storage2UriMapperJavaImpl.PackageFragmentRootData;\n+import org.eclipse.xtext.ui.resource.UriValidator;\n+import org.eclipse.xtext.ui.testing.util.IResourcesSetupUtil;\n+import org.eclipse.xtext.ui.testing.util.JavaProjectSetupUtil;\n+import org.eclipse.xtext.ui.util.JavaProjectClasspathChangeAnalyzer;\n+import org.eclipse.xtext.ui.workspace.WorkspaceLockAccess;\n+import org.eclipse.xtext.xbase.lib.IterableExtensions;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import com.google.common.base.Joiner;\n+import com.google.common.collect.Iterables;\n+import com.google.common.collect.Lists;\n+\n+/**\n+ * @author Anton Kosyakov - Initial contribution and API\n+ */\n+public class Storage2UriMapperJavaImplTest extends Assert {\n+\tprivate Storage2UriMapperJavaImpl storage2UriMapperJava;\n+\n+\t@Before\n+\tpublic void setUp() {\n+\t\tstorage2UriMapperJava = createFreshStorage2UriMapper();\n+\t\tJavaCore.addElementChangedListener(storage2UriMapperJava);\n+\t}\n+\n+\t@After\n+\tpublic void tearDown() throws Exception {\n+\t\tJavaCore.removeElementChangedListener(storage2UriMapperJava);\n+\t\tIResourcesSetupUtil.cleanWorkspace();\n+\t}\n+\n+\tprivate boolean isExpectedJRESize(int size) {\n+\t\tswitch (size) {\n+\t\t\tcase 1:\n+\t\t\t\t/* java8 */ return true;\n+\t\t\tcase 63:\n+\t\t\t\t/* java9 */ return true;\n+\t\t\tcase 49:\n+\t\t\t\t/* java10 + java11 + java13 */ return true;\n+\t\t\tcase 51:\n+\t\t\t\t/* java14 */ return true;\n+\t\t\tdefault:\n+\t\t\t\treturn false;\n+\t\t}\n+\t}\n+\n+\tprivate boolean isExpectedJRESize(int size, int multiplier) {\n+\t\treturn isExpectedJRESize(size / multiplier) && size / multiplier * multiplier == size;\n+\t}\n+\n+\tprotected Storage2UriMapperJavaImpl createFreshStorage2UriMapper() {\n+\t\tStorage2UriMapperJavaImpl mapper = new Storage2UriMapperJavaImpl();\n+\t\tmapper.setUriValidator(new UriValidator() {\n+\t\t\t@Override\n+\t\t\tpublic boolean isPossiblyManaged(IStorage storage) {\n+\t\t\t\treturn \"indexed\".equals(storage.getFullPath().getFileExtension());\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic boolean isValid(URI uri, IStorage storage) {\n+\t\t\t\treturn \"indexed\".equals(storage.getFullPath().getFileExtension());\n+\t\t\t}\n+\t\t});\n+\t\tmapper.setLocator(new JarEntryLocator());\n+\t\tmapper.setWorkspace(ResourcesPlugin.getWorkspace());\n+\t\tmapper.setWorkspaceLockAccess(new WorkspaceLockAccess());\n+\t\tmapper.setJavaProjectClasspathChangeAnalyzer(new JavaProjectClasspathChangeAnalyzer());\n+\t\treturn mapper;\n+\t}\n+\n+\t@Test\n+\tpublic void testOnClasspathChange() throws Exception {\n+\t\tAssert.assertEquals(\"\" + getCachedPackageFragmentRootData(), 0, getCachedPackageFragmentRootData().size());\n+\t\tIJavaProject project = JavaProjectSetupUtil.createJavaProject(\"testProject\");\n+\t\tint sizeBefore = getCachedPackageFragmentRootData().size();\n+\t\t// it should contain all the jars from JDK now\n+\t\tAssert.assertTrue(sizeBefore > 0);\n+\t\tAssert.assertNull(IterableExtensions.findFirst(getCachedPackageFragmentRootData().keySet(), it -> it.contains(\"foo.jar\")));\n+\t\tIFile file = createJar(project);\n+\t\tJavaProjectSetupUtil.addJarToClasspath(project, file);\n+\t\tAssert.assertEquals(\"\" + getCachedPackageFragmentRootData(), sizeBefore + 1, getCachedPackageFragmentRootData().size());\n+\t\tAssert.assertNotNull(IterableExtensions.findFirst(getCachedPackageFragmentRootData().keySet(), it -> it.contains(\"foo.jar\")));\n+\t\tgetCachedPackageFragmentRootData().entrySet().forEach((Map.Entry<String, PackageFragmentRootData> it) -> {\n+\t\t\tAssert.assertTrue(it.getValue().associatedRoots.size() + \" / \" + it.getKey(),\n+\t\t\t\t\tisExpectedJRESize(it.getValue().associatedRoots.size()));\n+\t\t\tString head = Iterables.getFirst(it.getValue().associatedRoots.keySet(), null);\n+\t\t\tAssert.assertTrue(head, head.startsWith(\"=testProject/\"));\n+\t\t});\n+\t\tIJavaProject project2 = JavaProjectSetupUtil.createJavaProject(\"testProject2\");\n+\t\tJavaProjectSetupUtil.addJarToClasspath(project2, file);\n+\t\tAssert.assertEquals(\"\" + getCachedPackageFragmentRootData(), (sizeBefore + 1), getCachedPackageFragmentRootData().size());\n+\t\tAssert.assertNotNull(IterableExtensions.findFirst(getCachedPackageFragmentRootData().keySet(), it -> it.contains(\"foo.jar\")));\n+\t\tgetCachedPackageFragmentRootData().entrySet().forEach((Map.Entry<String, PackageFragmentRootData> it) -> {\n+\t\t\tAssert.assertTrue(it.getValue().associatedRoots.size() + \" / \" + it.getKey(),\n+\t\t\t\t\tisExpectedJRESize(it.getValue().associatedRoots.size(), 2));\n+\t\t\tString msg = Joiner.on(\"\\n\").join(it.getValue().associatedRoots.keySet());\n+\t\t\tAssert.assertTrue(msg, Iterables.any(it.getValue().associatedRoots.keySet(), r -> r.startsWith(\"=testProject/\")));\n+\t\t\tAssert.assertTrue(msg, Iterables.any(it.getValue().associatedRoots.keySet(), r -> r.startsWith(\"=testProject2/\")));\n+\t\t});\n+\t\tJavaProjectSetupUtil.removeJarFromClasspath(project, file);\n+\t\tAssert.assertEquals(\"\" + getCachedPackageFragmentRootData(), sizeBefore + 1, getCachedPackageFragmentRootData().size());\n+\t\tAssert.assertNotNull(IterableExtensions.findFirst(getCachedPackageFragmentRootData().keySet(), it -> it.contains(\"foo.jar\")));\n+\t\tgetCachedPackageFragmentRootData().entrySet().forEach((Map.Entry<String, PackageFragmentRootData> it) -> {\n+\t\t\tif (it.getKey().contains(\"foo.jar\")) {\n+\t\t\t\tAssert.assertEquals(it.getKey(), 1, it.getValue().associatedRoots.size());\n+\t\t\t\tString head = Iterables.getFirst(it.getValue().associatedRoots.keySet(), null);\n+\t\t\t\tAssert.assertTrue(head, head.startsWith(\"=testProject2/\"));\n+\t\t\t} else {\n+\t\t\t\tAssert.assertTrue(it.getValue().associatedRoots.size() + \"/\" + it.getKey(),\n+\t\t\t\t\t\tisExpectedJRESize(it.getValue().associatedRoots.size(), 2));\n+\t\t\t\tString msg = IterableExtensions.join(it.getValue().associatedRoots.keySet(), \"\\n\");\n+\t\t\t\tAssert.assertTrue(msg, Iterables.any(it.getValue().associatedRoots.keySet(), r -> r.startsWith(\"=testProject/\")));\n+\t\t\t\tAssert.assertTrue(msg, Iterables.any(it.getValue().associatedRoots.keySet(), r -> r.startsWith(\"=testProject2/\")));\n+\t\t\t}\n+\t\t});\n+\t\tJavaProjectSetupUtil.removeJarFromClasspath(project2, file);", "originalCommit": "ba0aa8379781a1de5fd42d49f7f2d644fd45336e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "c558b4e55fd658713e28d577f27d1b1d499ac23b", "url": "https://github.com/eclipse/xtext-eclipse/commit/c558b4e55fd658713e28d577f27d1b1d499ac23b", "message": "[eclipse/xtext#1837] converted xtend 2 java\n\nSigned-off-by: Christian Dietrich <christian.dietrich@itemis.de>", "committedDate": "2020-10-25T13:02:27Z", "type": "forcePushed"}, {"oid": "4bb97c8e99a84e680c1576bca85fed4db2e46976", "url": "https://github.com/eclipse/xtext-eclipse/commit/4bb97c8e99a84e680c1576bca85fed4db2e46976", "message": "[eclipse/xtext#1837] converted xtend 2 java\n\nSigned-off-by: Christian Dietrich <christian.dietrich@itemis.de>", "committedDate": "2020-10-25T13:19:17Z", "type": "commit"}, {"oid": "4bb97c8e99a84e680c1576bca85fed4db2e46976", "url": "https://github.com/eclipse/xtext-eclipse/commit/4bb97c8e99a84e680c1576bca85fed4db2e46976", "message": "[eclipse/xtext#1837] converted xtend 2 java\n\nSigned-off-by: Christian Dietrich <christian.dietrich@itemis.de>", "committedDate": "2020-10-25T13:19:17Z", "type": "forcePushed"}]}