{"pr_number": 1756, "pr_title": "DDB Enhanced: Added support for projection expression", "pr_createdAt": "2020-04-01T09:38:13Z", "pr_url": "https://github.com/aws/aws-sdk-java-v2/pull/1756", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTgyNzMzMQ==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1756#discussion_r401827331", "bodyText": "I'm thinking that since this is a high-level client, we should model this as List<String> attributesToProject or something like that? What do you think?", "author": "bmaizels", "createdAt": "2020-04-01T18:37:00Z", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/QueryEnhancedRequest.java", "diffHunk": "@@ -255,6 +273,40 @@ public Builder filterExpression(Expression filterExpression) {\n             return this;\n         }\n \n+        /**\n+         * <p>\n+         * A string that identifies one or more attributes to retrieve from the table. These attributes can include\n+         * scalars, sets, or elements of a JSON document. The attributes in the expression must be separated by commas.\n+         * </p>\n+         * <p>\n+         * If no attribute names are specified, then all attributes will be returned. If any of the requested attributes\n+         * are not found, they will not appear in the result.\n+         * </p>\n+         * <p>\n+         * For more information, see <a href=\n+         * \"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html\"\n+         * >Accessing Item Attributes</a> in the <i>Amazon DynamoDB Developer Guide</i>.\n+         * </p>\n+         *\n+         * @param projectionExpression\n+         *        A string that identifies one or more attributes to retrieve from the table. These attributes can\n+         *        include scalars, sets, or elements of a JSON document. The attributes in the expression must be\n+         *        separated by commas.</p>\n+         *        <p>\n+         *        If no attribute names are specified, then all attributes will be returned. If any of the requested\n+         *        attributes are not found, they will not appear in the result.\n+         *        </p>\n+         *        <p>\n+         *        For more information, see <a href=\n+         *        \"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html\"\n+         *        >Accessing Item Attributes</a> in the <i>Amazon DynamoDB Developer Guide</i>.\n+         * @return Returns a reference to this object so that method calls can be chained together.\n+         */\n+        public Builder projectionExpression(String projectionExpression) {", "originalCommit": "ccc851d9e9c94e8f0ba13670260d18d9a8bb5f8f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ0MDQyNA==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1756#discussion_r402440424", "bodyText": "Can we use an ArrayList here as we're only adding and iterating?", "author": "bmaizels", "createdAt": "2020-04-02T16:18:50Z", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/internal/operations/ScanOperation.java", "diffHunk": "@@ -48,21 +59,42 @@ private ScanOperation(ScanEnhancedRequest request) {\n     public ScanRequest generateRequest(TableSchema<T> tableSchema,\n                                        OperationContext operationContext,\n                                        DynamoDbEnhancedClientExtension extension) {\n+        Map<String, AttributeValue> expressionValues = null;\n+        Map<String, String> expressionNames = null;\n+\n+        if (this.request.filterExpression() != null) {\n+            expressionValues = this.request.filterExpression().expressionValues();\n+            expressionNames = this.request.filterExpression().expressionNames();\n+        }\n+\n+        String projectionExpression = null;\n+        if (!this.request.attributesToProject().isEmpty()) {\n+            List<String> placeholders = new LinkedList<>();", "originalCommit": "2ea2cf09384fd900f11a02afa7f07623ed820cd0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjcxNDIyMA==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1756#discussion_r402714220", "bodyText": "Sincerely, I barely use LinkedList (mostly because I live in a Groovy world where every new list [] is an ArrayList) but for the operations, you have also mentioned it looks like the best option to choose. As far as I can remember ArrayList is designed for access by index and LinkedList for adding and interacting.", "author": "musketyr", "createdAt": "2020-04-03T03:14:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ0MDQyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzE0MTc3Mg==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1756#discussion_r403141772", "bodyText": "My best understanding is that LinkedList is beneficial if you need to insert records into the middle or start of a list, or if you wish to join two lists (and any other operations that require splicing and displacing the index of other records), whereas for this use case ArrayList is simpler, faster and uses less memory. It's even more efficient if you initialize the ArrayList with an accurate predicted capacity, but most people don't bother with this optimization.", "author": "bmaizels", "createdAt": "2020-04-03T16:51:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ0MDQyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzE0Njg5NQ==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1756#discussion_r403146895", "bodyText": "right, haven't thought about copying, just inserting.", "author": "musketyr", "createdAt": "2020-04-03T16:58:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ0MDQyNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ0MzE5NQ==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1756#discussion_r402443195", "bodyText": "Do you think we should follow the same pattern established in other operations where we map attribute names? eg:- \n  \n    \n      aws-sdk-java-v2/services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/internal/operations/UpdateItemOperation.java\n    \n    \n        Lines 55 to 56\n      in\n      d4ea84f\n    \n    \n    \n    \n\n        \n          \n           private static final Function<String, String> EXPRESSION_KEY_MAPPER = \n        \n\n        \n          \n               key -> \"#AMZN_MAPPED_\" + EnhancedClientUtils.cleanAttributeName(key);", "author": "bmaizels", "createdAt": "2020-04-02T16:22:59Z", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/internal/operations/ScanOperation.java", "diffHunk": "@@ -15,25 +15,36 @@\n \n package software.amazon.awssdk.enhanced.dynamodb.internal.operations;\n \n+import static software.amazon.awssdk.enhanced.dynamodb.internal.EnhancedClientUtils.cleanAttributeName;\n+\n+import java.util.HashMap;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n import java.util.function.Function;\n+import java.util.function.UnaryOperator;\n import software.amazon.awssdk.annotations.SdkInternalApi;\n import software.amazon.awssdk.core.async.SdkPublisher;\n import software.amazon.awssdk.core.pagination.sync.SdkIterable;\n import software.amazon.awssdk.enhanced.dynamodb.DynamoDbEnhancedClientExtension;\n+import software.amazon.awssdk.enhanced.dynamodb.Expression;\n import software.amazon.awssdk.enhanced.dynamodb.TableMetadata;\n import software.amazon.awssdk.enhanced.dynamodb.TableSchema;\n import software.amazon.awssdk.enhanced.dynamodb.internal.EnhancedClientUtils;\n import software.amazon.awssdk.enhanced.dynamodb.model.Page;\n import software.amazon.awssdk.enhanced.dynamodb.model.ScanEnhancedRequest;\n import software.amazon.awssdk.services.dynamodb.DynamoDbAsyncClient;\n import software.amazon.awssdk.services.dynamodb.DynamoDbClient;\n+import software.amazon.awssdk.services.dynamodb.model.AttributeValue;\n import software.amazon.awssdk.services.dynamodb.model.ScanRequest;\n import software.amazon.awssdk.services.dynamodb.model.ScanResponse;\n \n @SdkInternalApi\n public class ScanOperation<T> implements PaginatedTableOperation<T, ScanRequest, ScanResponse>,\n                                          PaginatedIndexOperation<T, ScanRequest, ScanResponse> {\n \n+    private static final UnaryOperator<String> PROJECTION_EXPRESSION_KEY_MAPPER = k -> \"#AMZN_PROJ\" + cleanAttributeName(k);", "originalCommit": "2ea2cf09384fd900f11a02afa7f07623ed820cd0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjcxNDk2Ng==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1756#discussion_r402714966", "bodyText": "I'm not sure if we need to distinct the placeholder by a different prefix. Probably not. Is there a reason why these mappers themselves are not part of EnhancedClientUtils? They appear in at least 4 classes now.", "author": "musketyr", "createdAt": "2020-04-03T03:18:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ0MzE5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjczMDA5Mw==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1756#discussion_r402730093", "bodyText": "Actually, you are right, we should use the same pattern to deduplicate the keys and names.", "author": "musketyr", "createdAt": "2020-04-03T04:27:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ0MzE5NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ0MzY1OA==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1756#discussion_r402443658", "bodyText": "Nit: Generally speaking we've been preferring Java 8 style (stream.forEach) where it's possible to use. I don't see any reason not to use that here.", "author": "bmaizels", "createdAt": "2020-04-02T16:23:45Z", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/internal/operations/ScanOperation.java", "diffHunk": "@@ -48,21 +59,42 @@ private ScanOperation(ScanEnhancedRequest request) {\n     public ScanRequest generateRequest(TableSchema<T> tableSchema,\n                                        OperationContext operationContext,\n                                        DynamoDbEnhancedClientExtension extension) {\n+        Map<String, AttributeValue> expressionValues = null;\n+        Map<String, String> expressionNames = null;\n+\n+        if (this.request.filterExpression() != null) {\n+            expressionValues = this.request.filterExpression().expressionValues();\n+            expressionNames = this.request.filterExpression().expressionNames();\n+        }\n+\n+        String projectionExpression = null;\n+        if (!this.request.attributesToProject().isEmpty()) {\n+            List<String> placeholders = new LinkedList<>();\n+            Map<String, String> projectionPlaceholders = new HashMap<>();\n+            for (String attr : this.request.attributesToProject()) {\n+                String placeholder = PROJECTION_EXPRESSION_KEY_MAPPER.apply(attr);\n+                placeholders.add(placeholder);\n+                projectionPlaceholders.put(placeholder, attr);\n+            }", "originalCommit": "2ea2cf09384fd900f11a02afa7f07623ed820cd0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjcxNTU0Nw==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1756#discussion_r402715547", "bodyText": "Me, too. There was a reference to a non-final variable in a previous version of the code. I'm switching to forEach.", "author": "musketyr", "createdAt": "2020-04-03T03:20:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ0MzY1OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ0NTYyMQ==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1756#discussion_r402445621", "bodyText": "Can we reword this to say 'projected attributes' instead of 'projected properties' which I think will be more consistent with how we refer to them everywhere else.", "author": "bmaizels", "createdAt": "2020-04-02T16:26:50Z", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/QueryEnhancedRequest.java", "diffHunk": "@@ -117,10 +120,10 @@ public Expression filterExpression() {\n     }\n \n     /**\n-     * Returns the projection expression set on this request object, or null if it doesn't exist.\n+     * Returns the list of projected properties on this request object, or an empty list if no projection is specified.", "originalCommit": "2ea2cf09384fd900f11a02afa7f07623ed820cd0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ1MzE5OQ==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1756#discussion_r402453199", "bodyText": "We have a particular style around collections in builders that we should try and consistently follow. For an optional list like this:\n\nIf no values are given to the builder then the builder should pass 'null' to the constructor to indicate 'no optional values supplied'.\nOn instantiation, the object should shallow copy all the values out of the builder array and store it in an immutable List implementation (we typically use Collections.unmodifiableList of an ArrayList).\nOn the builder we provide a method to add a single element to the existing builder list (or create one if it is still null), these are named 'addXXX(...)' where XXX is the singular form of the collection noun. (eg: addAttributeToProject(...)).\nAlso on the builder we provide 2 overloaded methods to replace the entire list with one that is supplied by taking a shallow copy of it (this will overwrite any values already stored in the builder list). These are named 'XXX(...)' where XXX is the plural form of the collection noun. Eg: (attributesToProject(...)). The overload provides a varargs form and a List<...> form.", "author": "bmaizels", "createdAt": "2020-04-02T16:38:07Z", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/QueryEnhancedRequest.java", "diffHunk": "@@ -274,39 +277,28 @@ public Builder filterExpression(Expression filterExpression) {\n         }\n \n         /**\n-         * <p>\n-         * A string that identifies one or more attributes to retrieve from the table. These attributes can include\n-         * scalars, sets, or elements of a JSON document. The attributes in the expression must be separated by commas.\n-         * </p>\n-         * <p>\n-         * If no attribute names are specified, then all attributes will be returned. If any of the requested attributes\n-         * are not found, they will not appear in the result.\n-         * </p>\n-         * <p>\n-         * For more information, see <a href=\n-         * \"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html\"\n-         * >Accessing Item Attributes</a> in the <i>Amazon DynamoDB Developer Guide</i>.\n-         * </p>\n+         * The list of the attributes's paths to be retrieved from the database.\n          *\n-         * @param projectionExpression\n-         *        A string that identifies one or more attributes to retrieve from the table. These attributes can\n-         *        include scalars, sets, or elements of a JSON document. The attributes in the expression must be\n-         *        separated by commas.</p>\n-         *        <p>\n-         *        If no attribute names are specified, then all attributes will be returned. If any of the requested\n-         *        attributes are not found, they will not appear in the result.\n-         *        </p>\n-         *        <p>\n-         *        For more information, see <a href=\n-         *        \"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html\"\n-         *        >Accessing Item Attributes</a> in the <i>Amazon DynamoDB Developer Guide</i>.\n+         * @param attributesToProject\n+         *        The list of the attributes's paths to be retrieved from the database.\n          * @return Returns a reference to this object so that method calls can be chained together.\n          */\n-        public Builder projectionExpression(String projectionExpression) {\n-            this.projectionExpression = projectionExpression;\n+        public Builder attributesToProject(List<String> attributesToProject) {\n+            this.attributesToProject.addAll(attributesToProject);", "originalCommit": "2ea2cf09384fd900f11a02afa7f07623ed820cd0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ1NDgwMA==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1756#discussion_r402454800", "bodyText": "Can we say 'projected attributes' here instead of 'projected properties'.", "author": "bmaizels", "createdAt": "2020-04-02T16:40:38Z", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/ScanEnhancedRequest.java", "diffHunk": "@@ -92,10 +95,10 @@ public Expression filterExpression() {\n     }\n \n     /**\n-     * Returns the projection expression set on this request object, or null if it doesn't exist.\n+     * Returns the list of projected properties on this request object, or an empty list if no projection is specified.", "originalCommit": "2ea2cf09384fd900f11a02afa7f07623ed820cd0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ1NTYyMA==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1756#discussion_r402455620", "bodyText": "We should ensure this list cannot be modified, especially as we're vending it in a getter. I suggest this.attributesToProject = Collections.unmodifiableList(builder.attributesToProject);", "author": "bmaizels", "createdAt": "2020-04-02T16:41:49Z", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/ScanEnhancedRequest.java", "diffHunk": "@@ -35,14 +38,14 @@\n     private final Integer limit;\n     private final Boolean consistentRead;\n     private final Expression filterExpression;\n-    private final String projectionExpression;\n+    private final List<String> attributesToProject;\n \n     private ScanEnhancedRequest(Builder builder) {\n         this.exclusiveStartKey = builder.exclusiveStartKey;\n         this.limit = builder.limit;\n         this.consistentRead = builder.consistentRead;\n         this.filterExpression = builder.filterExpression;\n-        this.projectionExpression = builder.projectionExpression;\n+        this.attributesToProject = builder.attributesToProject;", "originalCommit": "2ea2cf09384fd900f11a02afa7f07623ed820cd0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ1NTk0Ng==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1756#discussion_r402455946", "bodyText": "We should ensure this list cannot be modified, especially as we're vending it in a getter. I suggest this.attributesToProject = Collections.unmodifiableList(builder.attributesToProject);", "author": "bmaizels", "createdAt": "2020-04-02T16:42:19Z", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/QueryEnhancedRequest.java", "diffHunk": "@@ -50,7 +53,7 @@ private QueryEnhancedRequest(Builder builder) {\n         this.limit = builder.limit;\n         this.consistentRead = builder.consistentRead;\n         this.filterExpression = builder.filterExpression;\n-        this.projectionExpression = builder.projectionExpression;\n+        this.attributesToProject = builder.attributesToProject;", "originalCommit": "2ea2cf09384fd900f11a02afa7f07623ed820cd0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ1Njc5MA==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1756#discussion_r402456790", "bodyText": "Please see comments I made in QueryEnhancedRequest around handling optional lists in builders.", "author": "bmaizels", "createdAt": "2020-04-02T16:43:39Z", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/ScanEnhancedRequest.java", "diffHunk": "@@ -211,39 +214,28 @@ public Builder filterExpression(Expression filterExpression) {\n         }\n \n         /**\n-         * <p>\n-         * A string that identifies one or more attributes to retrieve from the table. These attributes can include\n-         * scalars, sets, or elements of a JSON document. The attributes in the expression must be separated by commas.\n-         * </p>\n-         * <p>\n-         * If no attribute names are specified, then all attributes will be returned. If any of the requested attributes\n-         * are not found, they will not appear in the result.\n-         * </p>\n-         * <p>\n-         * For more information, see <a href=\n-         * \"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html\"\n-         * >Accessing Item Attributes</a> in the <i>Amazon DynamoDB Developer Guide</i>.\n-         * </p>\n+         * The list of the attributes's paths to be retrieved from the database.\n          *\n-         * @param projectionExpression\n-         *        A string that identifies one or more attributes to retrieve from the table. These attributes can\n-         *        include scalars, sets, or elements of a JSON document. The attributes in the expression must be\n-         *        separated by commas.</p>\n-         *        <p>\n-         *        If no attribute names are specified, then all attributes will be returned. If any of the requested\n-         *        attributes are not found, they will not appear in the result.\n-         *        </p>\n-         *        <p>\n-         *        For more information, see <a href=\n-         *        \"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html\"\n-         *        >Accessing Item Attributes</a> in the <i>Amazon DynamoDB Developer Guide</i>.\n+         * @param attributesToProject\n+         *        The list of the attributes's paths to be retrieved from the database.\n          * @return Returns a reference to this object so that method calls can be chained together.\n          */\n-        public Builder projectionExpression(String projectionExpression) {\n-            this.projectionExpression = projectionExpression;\n+        public Builder attributesToProject(List<String> attributesToProject) {\n+            this.attributesToProject.addAll(attributesToProject);\n             return this;\n         }\n \n+        /**\n+         * The list of the attributes's paths to be retrieved from the database.\n+         *\n+         * @param attributesToProject\n+         *        The list of the attributes's paths to be retrieved from the database.\n+         * @return Returns a reference to this object so that method calls can be chained together.\n+         */\n+        public Builder attributesToProject(String... attributesToProject) {\n+            return attributesToProject(Arrays.asList(attributesToProject));\n+        }\n+", "originalCommit": "2ea2cf09384fd900f11a02afa7f07623ed820cd0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ1NzgxNQ==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1756#discussion_r402457815", "bodyText": "Can we add a test for multiple projected attributes? Also given what we know about the implementation I think I would sleep better if we also had a test with projected attributes AND a filter expression together, perhaps in a configuration that is likely to require them to merge correctly.", "author": "bmaizels", "createdAt": "2020-04-02T16:45:07Z", "path": "services-custom/dynamodb-enhanced/src/test/java/software/amazon/awssdk/enhanced/dynamodb/functionaltests/BasicQueryTest.java", "diffHunk": "@@ -157,6 +157,28 @@ public void queryAllRecordsDefaultSettings_shortcutForm() {\n         assertThat(page.lastEvaluatedKey(), is(nullValue()));\n     }\n \n+    @Test\n+    public void queryAllRecordsDefaultSettings_withProjection() {", "originalCommit": "2ea2cf09384fd900f11a02afa7f07623ed820cd0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ1OTAwOA==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1756#discussion_r402459008", "bodyText": "Can we add a test for multiple projected attributes? Also given what we know about the implementation I think I would sleep better if we also had a test with projected attributes AND a filter expression together, perhaps in a configuration that is likely to require them to merge correctly.", "author": "bmaizels", "createdAt": "2020-04-02T16:46:59Z", "path": "services-custom/dynamodb-enhanced/src/test/java/software/amazon/awssdk/enhanced/dynamodb/functionaltests/BasicScanTest.java", "diffHunk": "@@ -140,6 +141,24 @@ public void scanAllRecordsDefaultSettings() {\n         assertThat(page.lastEvaluatedKey(), is(nullValue()));\n     }\n \n+    @Test\n+    public void queryAllRecordsDefaultSettings_withProjection() {", "originalCommit": "2ea2cf09384fd900f11a02afa7f07623ed820cd0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ1OTkwNA==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1756#discussion_r402459904", "bodyText": "Could we test a filter expression together with a projection expression and verify the merging logic is working correctly?", "author": "bmaizels", "createdAt": "2020-04-02T16:48:17Z", "path": "services-custom/dynamodb-enhanced/src/test/java/software/amazon/awssdk/enhanced/dynamodb/internal/operations/QueryOperationTest.java", "diffHunk": "@@ -272,6 +272,22 @@ public void generateRequest_consistentRead() {\n         assertThat(queryRequest.consistentRead(), is(true));\n     }\n \n+    @Test\n+    public void generateRequest_projectionExpression() {", "originalCommit": "2ea2cf09384fd900f11a02afa7f07623ed820cd0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ2MDM2MA==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1756#discussion_r402460360", "bodyText": "Could we test a filter expression together with a projection expression and verify the merging logic is working correctly?", "author": "bmaizels", "createdAt": "2020-04-02T16:48:56Z", "path": "services-custom/dynamodb-enhanced/src/test/java/software/amazon/awssdk/enhanced/dynamodb/internal/operations/ScanOperationTest.java", "diffHunk": "@@ -188,6 +189,25 @@ public void generateRequest_consistentRead() {\n         assertThat(request, is(expectedRequest));\n     }\n \n+    @Test", "originalCommit": "2ea2cf09384fd900f11a02afa7f07623ed820cd0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ2MTgyMQ==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1756#discussion_r402461821", "bodyText": "A default optional list should be 'null' so we can differentiate between 'they didn't mention it' and 'they explicitly gave us an empty list as a value' if we ever need to.", "author": "bmaizels", "createdAt": "2020-04-02T16:51:17Z", "path": "services-custom/dynamodb-enhanced/src/test/java/software/amazon/awssdk/enhanced/dynamodb/model/QueryEnhancedRequestTest.java", "diffHunk": "@@ -44,7 +47,7 @@ public void builder_minimal() {\n         assertThat(builtObject.limit(), is(nullValue()));\n         assertThat(builtObject.queryConditional(), is(nullValue()));\n         assertThat(builtObject.scanIndexForward(), is(nullValue()));\n-        assertThat(builtObject.projectionExpression(), is(nullValue()));\n+        assertThat(builtObject.attributesToProject(), is(emptyIterable()));", "originalCommit": "2ea2cf09384fd900f11a02afa7f07623ed820cd0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ2Mjc4Mg==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1756#discussion_r402462782", "bodyText": "When we have the overloaded versions of this, hopefully in the implementation one calls the other, in which case we should make sure we are testing the one that will give us coverage over both. Usually that's the varargs form because that should call the other one with Array.asList(...). We will also need to add a separate test for the .addAttributeToProject(...) method that we are hopefully adding.", "author": "bmaizels", "createdAt": "2020-04-02T16:52:45Z", "path": "services-custom/dynamodb-enhanced/src/test/java/software/amazon/awssdk/enhanced/dynamodb/model/QueryEnhancedRequestTest.java", "diffHunk": "@@ -69,7 +74,7 @@ public void builder_maximal() {\n                                                                .limit(3)\n                                                                .queryConditional(queryConditional)\n                                                                .scanIndexForward(true)\n-                                                               .projectionExpression(projectionExpression)\n+                                                               .attributesToProject(attributesToProjectArray)", "originalCommit": "2ea2cf09384fd900f11a02afa7f07623ed820cd0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjcyNjM2Mg==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1756#discussion_r402726362", "bodyText": "This is already testing the varargs variant. I will add the one for the add... method.", "author": "musketyr", "createdAt": "2020-04-03T04:10:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ2Mjc4Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ2MzQ5Nw==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1756#discussion_r402463497", "bodyText": "A default optional list should be 'null' so we can differentiate between 'they didn't mention it' and 'they explicitly gave us an empty list as a value' if we ever need to.", "author": "bmaizels", "createdAt": "2020-04-02T16:53:48Z", "path": "services-custom/dynamodb-enhanced/src/test/java/software/amazon/awssdk/enhanced/dynamodb/model/ScanEnhancedRequestTest.java", "diffHunk": "@@ -40,7 +43,7 @@ public void builder_minimal() {\n         assertThat(builtObject.exclusiveStartKey(), is(nullValue()));\n         assertThat(builtObject.consistentRead(), is(nullValue()));\n         assertThat(builtObject.filterExpression(), is(nullValue()));\n-        assertThat(builtObject.projectionExpression(), is(nullValue()));\n+        assertThat(builtObject.attributesToProject(), is(emptyIterable()));", "originalCommit": "2ea2cf09384fd900f11a02afa7f07623ed820cd0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ2MzY4NQ==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1756#discussion_r402463685", "bodyText": "When we have the overloaded versions of this, hopefully in the implementation one calls the other, in which case we should make sure we are testing the one that will give us coverage over both. Usually that's the varargs form because that should call the other one with Array.asList(...). We will also need to add a separate test for the .addAttributeToProject(...) method that we are hopefully adding.", "author": "bmaizels", "createdAt": "2020-04-02T16:54:03Z", "path": "services-custom/dynamodb-enhanced/src/test/java/software/amazon/awssdk/enhanced/dynamodb/model/ScanEnhancedRequestTest.java", "diffHunk": "@@ -56,20 +59,21 @@ public void builder_maximal() {\n                                                 .expressionValues(expressionValues)\n                                                 .build();\n \n-        String projectionExpression = \"one,two\";\n+        String[] attributesToProjectArray = {\"one\", \"two\"};\n+        List<String> attributesToProject = Arrays.asList(attributesToProjectArray);\n \n         ScanEnhancedRequest builtObject = ScanEnhancedRequest.builder()\n                                                              .exclusiveStartKey(exclusiveStartKey)\n                                                              .consistentRead(false)\n                                                              .filterExpression(filterExpression)\n-                                                             .projectionExpression(projectionExpression)\n+                                                             .attributesToProject(attributesToProjectArray)", "originalCommit": "2ea2cf09384fd900f11a02afa7f07623ed820cd0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjcyOTc3Mg==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1756#discussion_r402729772", "bodyText": "This is already testing the varargs variant. I will add the one for the add... method.", "author": "musketyr", "createdAt": "2020-04-03T04:25:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ2MzY4NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ2NDg0OA==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1756#discussion_r402464848", "bodyText": "'path' is a new term we have not used anywhere else in the library and may cause confusion. Can we simply refer to this as 'attribute names'? I think a little more description or at least a link to the official DynamoDB documentation would also help people understand what to expect from this feature. (Please apply this comment to other places it's applicable too)", "author": "bmaizels", "createdAt": "2020-04-02T16:55:55Z", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/QueryEnhancedRequest.java", "diffHunk": "@@ -274,39 +277,28 @@ public Builder filterExpression(Expression filterExpression) {\n         }\n \n         /**\n-         * <p>\n-         * A string that identifies one or more attributes to retrieve from the table. These attributes can include\n-         * scalars, sets, or elements of a JSON document. The attributes in the expression must be separated by commas.\n-         * </p>\n-         * <p>\n-         * If no attribute names are specified, then all attributes will be returned. If any of the requested attributes\n-         * are not found, they will not appear in the result.\n-         * </p>\n-         * <p>\n-         * For more information, see <a href=\n-         * \"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html\"\n-         * >Accessing Item Attributes</a> in the <i>Amazon DynamoDB Developer Guide</i>.\n-         * </p>\n+         * The list of the attributes's paths to be retrieved from the database.\n          *\n-         * @param projectionExpression\n-         *        A string that identifies one or more attributes to retrieve from the table. These attributes can\n-         *        include scalars, sets, or elements of a JSON document. The attributes in the expression must be\n-         *        separated by commas.</p>\n-         *        <p>\n-         *        If no attribute names are specified, then all attributes will be returned. If any of the requested\n-         *        attributes are not found, they will not appear in the result.\n-         *        </p>\n-         *        <p>\n-         *        For more information, see <a href=\n-         *        \"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html\"\n-         *        >Accessing Item Attributes</a> in the <i>Amazon DynamoDB Developer Guide</i>.\n+         * @param attributesToProject\n+         *        The list of the attributes's paths to be retrieved from the database.\n          * @return Returns a reference to this object so that method calls can be chained together.\n          */\n-        public Builder projectionExpression(String projectionExpression) {\n-            this.projectionExpression = projectionExpression;\n+        public Builder attributesToProject(List<String> attributesToProject) {\n+            this.attributesToProject.addAll(attributesToProject);\n             return this;\n         }\n \n+        /**\n+         * The list of the attributes's paths to be retrieved from the database.", "originalCommit": "2ea2cf09384fd900f11a02afa7f07623ed820cd0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzE0NDQ1OA==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1756#discussion_r403144458", "bodyText": "I believe this now returns null if no projection is specified.", "author": "bmaizels", "createdAt": "2020-04-03T16:56:02Z", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/QueryEnhancedRequest.java", "diffHunk": "@@ -113,6 +123,13 @@ public Expression filterExpression() {\n         return filterExpression;\n     }\n \n+    /**\n+     * Returns the list of projected attributes on this request object, or an empty list if no projection is specified.", "originalCommit": "661273ccf9c4a8bc587c26f9d6cbf3a4ee2041ce", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzE0ODAzNQ==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1756#discussion_r403148035", "bodyText": "Can we use the singular noun-form here: addAttributeToProject(...)", "author": "bmaizels", "createdAt": "2020-04-03T17:00:01Z", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/QueryEnhancedRequest.java", "diffHunk": "@@ -255,6 +280,73 @@ public Builder filterExpression(Expression filterExpression) {\n             return this;\n         }\n \n+        /**\n+         * <p>\n+         * Sets a collection of the attribute names to be retrieved from the database. These attributes can include\n+         * scalars, sets, or elements of a JSON document.\n+         * </p>\n+         * <p>\n+         * If no attribute names are specified, then all attributes will be returned. If any of the requested attributes\n+         * are not found, they will not appear in the result.\n+         * </p>\n+         * <p>\n+         * For more information, see <a href=\n+         * \"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html\"\n+         * >Accessing Item Attributes</a> in the <i>Amazon DynamoDB Developer Guide</i>.\n+         * </p>\n+         * @param attributesToProject\n+         *        A collection of the attributes names to be retrieved from the database.\n+         * @return Returns a reference to this object so that method calls can be chained together.\n+         */\n+        public Builder attributesToProject(Collection<String> attributesToProject) {\n+            this.attributesToProject = attributesToProject != null ? new ArrayList<>(attributesToProject) : null;\n+            return this;\n+        }\n+\n+        /**\n+         * <p>\n+         * Sets one or more attribute names to be retrieved from the database. These attributes can include\n+         * scalars, sets, or elements of a JSON document.\n+         * </p>\n+         * <p>\n+         * If no attribute names are specified, then all attributes will be returned. If any of the requested attributes\n+         * are not found, they will not appear in the result.\n+         * </p>\n+         * <p>\n+         * For more information, see <a href=\n+         * \"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html\"\n+         * >Accessing Item Attributes</a> in the <i>Amazon DynamoDB Developer Guide</i>.\n+         * </p>\n+         * @param attributesToProject\n+         *        One or more  attributes names to be retrieved from the database.\n+         * @return Returns a reference to this object so that method calls can be chained together.\n+         */\n+        public Builder attributesToProject(String... attributesToProject) {\n+            return attributesToProject(Arrays.asList(attributesToProject));\n+        }\n+\n+        /**\n+         * <p>\n+         * Adds a single attribute name to be retrieved from the database. This attribute can include\n+         * scalars, sets, or elements of a JSON document.\n+         * </p>\n+         * <p>\n+         * For more information, see <a href=\n+         * \"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html\"\n+         * >Accessing Item Attributes</a> in the <i>Amazon DynamoDB Developer Guide</i>.\n+         * </p>\n+         * @param attributeToProject\n+         *        An additional single attribute name to be retrieved from the database.\n+         * @return Returns a reference to this object so that method calls can be chained together.\n+         */\n+        public Builder addAttributesToProject(String attributeToProject) {", "originalCommit": "661273ccf9c4a8bc587c26f9d6cbf3a4ee2041ce", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzE0OTEwNA==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1756#discussion_r403149104", "bodyText": "Can we use the singular noun form here: addAttributeToProject(...)", "author": "bmaizels", "createdAt": "2020-04-03T17:01:11Z", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/enhanced/dynamodb/model/ScanEnhancedRequest.java", "diffHunk": "@@ -192,6 +217,73 @@ public Builder filterExpression(Expression filterExpression) {\n             return this;\n         }\n \n+        /**\n+         * <p>\n+         * Sets a collection of the attribute names to be retrieved from the database. These attributes can include\n+         * scalars, sets, or elements of a JSON document.\n+         * </p>\n+         * <p>\n+         * If no attribute names are specified, then all attributes will be returned. If any of the requested attributes\n+         * are not found, they will not appear in the result.\n+         * </p>\n+         * <p>\n+         * For more information, see <a href=\n+         * \"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html\"\n+         * >Accessing Item Attributes</a> in the <i>Amazon DynamoDB Developer Guide</i>.\n+         * </p>\n+         * @param attributesToProject\n+         *        A collection of the attributes names to be retrieved from the database.\n+         * @return Returns a reference to this object so that method calls can be chained together.\n+         */\n+        public Builder attributesToProject(Collection<String> attributesToProject) {\n+            this.attributesToProject = attributesToProject != null ? new ArrayList<>(attributesToProject) : null;\n+            return this;\n+        }\n+\n+        /**\n+         * <p>\n+         * Sets one or more attribute names to be retrieved from the database. These attributes can include\n+         * scalars, sets, or elements of a JSON document.\n+         * </p>\n+         * <p>\n+         * If no attribute names are specified, then all attributes will be returned. If any of the requested attributes\n+         * are not found, they will not appear in the result.\n+         * </p>\n+         * <p>\n+         * For more information, see <a href=\n+         * \"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html\"\n+         * >Accessing Item Attributes</a> in the <i>Amazon DynamoDB Developer Guide</i>.\n+         * </p>\n+         * @param attributesToProject\n+         *        One or more  attributes names to be retrieved from the database.\n+         * @return Returns a reference to this object so that method calls can be chained together.\n+         */\n+        public Builder attributesToProject(String... attributesToProject) {\n+            return attributesToProject(Arrays.asList(attributesToProject));\n+        }\n+\n+        /**\n+         * <p>\n+         * Adds a single attribute name to be retrieved from the database. This attribute can include\n+         * scalars, sets, or elements of a JSON document.\n+         * </p>\n+         * <p>\n+         * For more information, see <a href=\n+         * \"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html\"\n+         * >Accessing Item Attributes</a> in the <i>Amazon DynamoDB Developer Guide</i>.\n+         * </p>\n+         * @param attributeToProject\n+         *        An additional single attribute name to be retrieved from the database.\n+         * @return Returns a reference to this object so that method calls can be chained together.\n+         */\n+        public Builder addAttributesToProject(String attributeToProject) {", "originalCommit": "661273ccf9c4a8bc587c26f9d6cbf3a4ee2041ce", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "92fa6845093212c3a7a5a4beb3d81ddc5c7a284d", "url": "https://github.com/aws/aws-sdk-java-v2/commit/92fa6845093212c3a7a5a4beb3d81ddc5c7a284d", "message": "DDB Enhanced: Added support for projection expression\n\nadded new property attributesToProject to QueryEnhancedRequest and ScanEnhancedRequest which enables to fetch\nonly partial results to save the bandwidth of the queries.", "committedDate": "2020-04-03T17:42:28Z", "type": "forcePushed"}, {"oid": "498040e434da5bb60cc2235408ccb7c54e907867", "url": "https://github.com/aws/aws-sdk-java-v2/commit/498040e434da5bb60cc2235408ccb7c54e907867", "message": "DDB Enhanced: Added support for projection expression\n\nadded new property attributesToProject to QueryEnhancedRequest and ScanEnhancedRequest which enables to fetch\nonly partial results to save the bandwidth of the queries.", "committedDate": "2020-04-04T03:59:47Z", "type": "commit"}, {"oid": "498040e434da5bb60cc2235408ccb7c54e907867", "url": "https://github.com/aws/aws-sdk-java-v2/commit/498040e434da5bb60cc2235408ccb7c54e907867", "message": "DDB Enhanced: Added support for projection expression\n\nadded new property attributesToProject to QueryEnhancedRequest and ScanEnhancedRequest which enables to fetch\nonly partial results to save the bandwidth of the queries.", "committedDate": "2020-04-04T03:59:47Z", "type": "forcePushed"}]}