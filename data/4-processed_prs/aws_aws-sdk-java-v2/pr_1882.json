{"pr_number": 1882, "pr_title": "Support core metrics for sync clients", "pr_createdAt": "2020-06-08T15:57:38Z", "pr_url": "https://github.com/aws/aws-sdk-java-v2/pull/1882", "timeline": [{"oid": "e14f0af8582e2c65d9b227ecd634e765f1b18a8a", "url": "https://github.com/aws/aws-sdk-java-v2/commit/e14f0af8582e2c65d9b227ecd634e765f1b18a8a", "message": "Support core metrics for sync clients", "committedDate": "2020-06-08T15:53:44Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjg5NDM2Ng==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1882#discussion_r436894366", "bodyText": "Why import without usage?", "author": "cenedhryn", "createdAt": "2020-06-08T18:02:44Z", "path": "core/sdk-core/src/test/java/software/amazon/awssdk/core/client/AsyncClientHandlerInterceptorExceptionTest.java", "diffHunk": "@@ -56,6 +56,7 @@\n import software.amazon.awssdk.http.async.AsyncExecuteRequest;\n import software.amazon.awssdk.http.async.SdkAsyncHttpClient;\n import software.amazon.awssdk.http.async.SdkAsyncHttpResponseHandler;\n+import software.amazon.awssdk.metrics.MetricCollector;", "originalCommit": "e14f0af8582e2c65d9b227ecd634e765f1b18a8a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjkwODcxNw==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1882#discussion_r436908717", "bodyText": "can we move this recurring resolver to a utils class or is that inconsistent with our core coding patterns?", "author": "cenedhryn", "createdAt": "2020-06-08T18:28:52Z", "path": "core/sdk-core/src/main/java/software/amazon/awssdk/core/internal/handler/BaseClientHandler.java", "diffHunk": "@@ -271,4 +286,12 @@ static void validateExecutionParams(ClientExecutionParams<?, ?> executionParams)\n                                                                        BiFunction<T, R, T> function2) {\n         return (x, y) -> function2.apply(function1.apply(x, y), y);\n     }\n+\n+    private MetricCollector resolveMetricCollector(ClientExecutionParams<?, ?> params) {", "originalCommit": "e14f0af8582e2c65d9b227ecd634e765f1b18a8a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjkxMTA5OA==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1882#discussion_r436911098", "bodyText": "Does this class have a unit test file?", "author": "cenedhryn", "createdAt": "2020-06-08T18:32:56Z", "path": "core/sdk-core/src/main/java/software/amazon/awssdk/core/internal/util/MetricUtils.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.core.internal.util;\n+\n+import static software.amazon.awssdk.core.client.config.SdkClientOption.METRIC_PUBLISHER;\n+\n+import java.time.Duration;\n+import java.util.Optional;\n+import java.util.concurrent.Callable;\n+import java.util.function.Supplier;\n+import software.amazon.awssdk.annotations.SdkInternalApi;\n+import software.amazon.awssdk.core.RequestOverrideConfiguration;\n+import software.amazon.awssdk.core.SdkRequest;\n+import software.amazon.awssdk.core.client.config.SdkClientConfiguration;\n+import software.amazon.awssdk.metrics.MetricPublisher;\n+import software.amazon.awssdk.utils.Pair;\n+\n+/**\n+ * Utility methods for working with metrics.\n+ */\n+@SdkInternalApi\n+public final class MetricUtils {", "originalCommit": "e14f0af8582e2c65d9b227ecd634e765f1b18a8a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjkxMTUxOQ==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1882#discussion_r436911519", "bodyText": "It's a pretty elegant way of measuring the duration without the calling code becoming too messy.", "author": "cenedhryn", "createdAt": "2020-06-08T18:33:47Z", "path": "core/sdk-core/src/main/java/software/amazon/awssdk/core/internal/util/MetricUtils.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.core.internal.util;\n+\n+import static software.amazon.awssdk.core.client.config.SdkClientOption.METRIC_PUBLISHER;\n+\n+import java.time.Duration;\n+import java.util.Optional;\n+import java.util.concurrent.Callable;\n+import java.util.function.Supplier;\n+import software.amazon.awssdk.annotations.SdkInternalApi;\n+import software.amazon.awssdk.core.RequestOverrideConfiguration;\n+import software.amazon.awssdk.core.SdkRequest;\n+import software.amazon.awssdk.core.client.config.SdkClientConfiguration;\n+import software.amazon.awssdk.metrics.MetricPublisher;\n+import software.amazon.awssdk.utils.Pair;\n+\n+/**\n+ * Utility methods for working with metrics.\n+ */\n+@SdkInternalApi\n+public final class MetricUtils {\n+\n+    private MetricUtils() {\n+    }\n+\n+    /**\n+     * Resolve the correct metric publisher to use. The publisher set on the request always takes precedence.\n+     *\n+     * @param clientConfig The client configuration.\n+     * @param requestConfig The request override configuration.\n+     * @return The metric publisher to use.\n+     */\n+    public static Optional<MetricPublisher> resolvePublisher(SdkClientConfiguration clientConfig,\n+                                                             SdkRequest requestConfig) {\n+        Optional<MetricPublisher> requestOverride = requestConfig.overrideConfiguration()\n+                .flatMap(RequestOverrideConfiguration::metricPublisher);\n+        if (requestOverride.isPresent()) {\n+            return requestOverride;\n+        }\n+        return Optional.ofNullable(clientConfig.option(METRIC_PUBLISHER));\n+    }\n+\n+    /**\n+     * Measure the duration of the given callable.\n+     *\n+     * @param c The callable to measure.\n+     * @return A {@code Pair} containing the result of {@code c} and the duration.\n+     */\n+    public static <T> Pair<T, Duration> measureDuration(Supplier<T> c) {", "originalCommit": "e14f0af8582e2c65d9b227ecd634e765f1b18a8a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjkxMjY2NA==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1882#discussion_r436912664", "bodyText": "nit: isSamAs", "author": "cenedhryn", "createdAt": "2020-06-08T18:35:53Z", "path": "test/codegen-generated-classes-test/src/test/java/software/amazon/awssdk/services/protocolrestjson/CoreMetricsTest.java", "diffHunk": "@@ -0,0 +1,258 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.services.protocolrestjson;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Matchers.any;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.verifyZeroInteractions;\n+import static org.mockito.Mockito.when;\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.time.Duration;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+import org.junit.runner.RunWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Mock;\n+import org.mockito.runners.MockitoJUnitRunner;\n+import software.amazon.awssdk.auth.credentials.AwsBasicCredentials;\n+import software.amazon.awssdk.auth.credentials.AwsCredentialsProvider;\n+import software.amazon.awssdk.core.metrics.CoreMetric;\n+import software.amazon.awssdk.http.AbortableInputStream;\n+import software.amazon.awssdk.http.ExecutableHttpRequest;\n+import software.amazon.awssdk.http.HttpExecuteRequest;\n+import software.amazon.awssdk.http.HttpExecuteResponse;\n+import software.amazon.awssdk.http.SdkHttpClient;\n+import software.amazon.awssdk.http.SdkHttpFullResponse;\n+import software.amazon.awssdk.metrics.MetricCollection;\n+import software.amazon.awssdk.metrics.MetricPublisher;\n+import software.amazon.awssdk.services.protocolrestjson.model.EmptyModeledException;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class CoreMetricsTest {\n+    private static final String SERVICE_ID = \"AmazonProtocolRestJson\";\n+    private static final String REQUEST_ID = \"req-id\";\n+    private static final String EXTENDED_REQUEST_ID = \"extended-id\";\n+    private static final int MAX_RETRIES = 2;\n+\n+    private static ProtocolRestJsonClient client;\n+\n+    @Rule\n+    public ExpectedException thrown = ExpectedException.none();\n+\n+    @Mock\n+    private SdkHttpClient mockHttpClient;\n+\n+    @Mock\n+    private AwsCredentialsProvider mockCredentialsProvider;\n+\n+    @Mock\n+    private MetricPublisher mockPublisher;\n+\n+    @Before\n+    public void setup() throws IOException {\n+        client = ProtocolRestJsonClient.builder()\n+                .httpClient(mockHttpClient)\n+                .credentialsProvider(mockCredentialsProvider)\n+                .overrideConfiguration(c -> c.metricPublisher(mockPublisher).retryPolicy(b -> b.numRetries(MAX_RETRIES)))\n+                .build();\n+        AbortableInputStream content = contentStream(\"{}\");\n+        SdkHttpFullResponse httpResponse = SdkHttpFullResponse.builder()\n+                .statusCode(200)\n+                .putHeader(\"x-amz-request-id\", REQUEST_ID)\n+                .putHeader(\"x-amz-id-2\", EXTENDED_REQUEST_ID)\n+                .content(content)\n+                .build();\n+\n+        HttpExecuteResponse mockResponse = mockExecuteResponse(httpResponse);\n+\n+        ExecutableHttpRequest mockExecuteRequest = mock(ExecutableHttpRequest.class);\n+        when(mockExecuteRequest.call()).thenAnswer(invocation -> {\n+           try {\n+               Thread.sleep(100);\n+           } catch (InterruptedException ie) {\n+               ie.printStackTrace();\n+           }\n+           return mockResponse;\n+        });\n+\n+        when(mockHttpClient.prepareRequest(any(HttpExecuteRequest.class)))\n+                .thenReturn(mockExecuteRequest);\n+\n+        when(mockCredentialsProvider.resolveCredentials()).thenAnswer(invocation -> {\n+            try {\n+                Thread.sleep(100);\n+            } catch (InterruptedException ie) {\n+                ie.printStackTrace();\n+            }\n+            return AwsBasicCredentials.create(\"foo\", \"bar\");\n+        });\n+    }\n+\n+    @After\n+    public void teardown() {\n+        if (client != null) {\n+            client.close();\n+        }\n+        client = null;\n+    }\n+\n+    @Test\n+    public void testApiCall_noConfiguredPublisher_succeeds() {\n+        ProtocolRestJsonClient noPublisher = ProtocolRestJsonClient.builder()\n+                .httpClient(mockHttpClient)\n+                .build();\n+\n+        noPublisher.allTypes();\n+    }\n+\n+    @Test\n+    public void testApiCall_publisherOverriddenOnRequest_requestPublisherTakesPrecedence() {\n+        MetricPublisher requestMetricPublisher = mock(MetricPublisher.class);\n+\n+        client.allTypes(r -> r.overrideConfiguration(o -> o.metricPublisher(requestMetricPublisher)));\n+\n+        verify(requestMetricPublisher).publish(any(MetricCollection.class));\n+        verifyZeroInteractions(mockPublisher);\n+    }\n+\n+    @Test\n+    public void testApiCall_operationSuccessful_addsMetrics() {\n+        client.allTypes();\n+\n+        ArgumentCaptor<MetricCollection> collectionCaptor = ArgumentCaptor.forClass(MetricCollection.class);\n+        verify(mockPublisher).publish(collectionCaptor.capture());\n+\n+        MetricCollection capturedCollection = collectionCaptor.getValue();\n+\n+        assertThat(capturedCollection.name()).isEqualTo(\"ApiCall\");\n+        assertThat(capturedCollection.metricValues(CoreMetric.SERVICE_ID))\n+                .containsExactly(SERVICE_ID);\n+        assertThat(capturedCollection.metricValues(CoreMetric.OPERATION_NAME))\n+                .containsExactly(\"AllTypes\");\n+        assertThat(capturedCollection.metricValues(CoreMetric.CREDENTIALS_FETCH_DURATION).get(0))\n+                .isGreaterThanOrEqualTo(Duration.ZERO);\n+        assertThat(capturedCollection.metricValues(CoreMetric.SIGNING_DURATION).get(0))\n+                .isGreaterThanOrEqualTo(Duration.ZERO);\n+        assertThat(capturedCollection.metricValues(CoreMetric.MARSHALLING_DURATION).get(0))\n+                .isGreaterThanOrEqualTo(Duration.ZERO);\n+        assertThat(capturedCollection.metricValues(CoreMetric.API_CALL_DURATION).get(0))\n+                .isGreaterThan(Duration.ZERO);\n+\n+        assertThat(capturedCollection.children()).hasSize(1);\n+        MetricCollection attemptCollection = capturedCollection.children().get(0);\n+\n+        assertThat(attemptCollection.name()).isEqualTo(\"ApiCallAttemptMetrics\");\n+        assertThat(attemptCollection.children()).isEmpty();\n+        assertThat(attemptCollection.metricValues(CoreMetric.HTTP_STATUS_CODE))\n+                .containsExactly(200);\n+        assertThat(attemptCollection.metricValues(CoreMetric.AWS_REQUEST_ID))\n+                .containsExactly(REQUEST_ID);\n+        assertThat(attemptCollection.metricValues(CoreMetric.AWS_EXTENDED_REQUEST_ID))\n+                .containsExactly(EXTENDED_REQUEST_ID);\n+\n+        assertThat(attemptCollection.metricValues(CoreMetric.HTTP_REQUEST_ROUND_TRIP_TIME).get(0))\n+                .isGreaterThanOrEqualTo(Duration.ofMillis(100));\n+    }\n+\n+    @Test\n+    public void testApiCall_serviceReturnsError_errorInfoIncludedInMetrics() throws IOException {\n+        AbortableInputStream content = contentStream(\"{}\");\n+\n+        SdkHttpFullResponse httpResponse = SdkHttpFullResponse.builder()\n+                .statusCode(500)\n+                .putHeader(\"x-amz-request-id\", REQUEST_ID)\n+                .putHeader(\"x-amz-id-2\", EXTENDED_REQUEST_ID)\n+                .putHeader(\"X-Amzn-Errortype\", \"EmptyModeledException\")\n+                .content(content)\n+                .build();\n+\n+        HttpExecuteResponse response = mockExecuteResponse(httpResponse);\n+\n+        ExecutableHttpRequest mockExecuteRequest = mock(ExecutableHttpRequest.class);\n+        when(mockExecuteRequest.call()).thenReturn(response);\n+\n+        when(mockHttpClient.prepareRequest(any(HttpExecuteRequest.class)))\n+                .thenReturn(mockExecuteRequest);\n+\n+        thrown.expect(EmptyModeledException.class);\n+        try {\n+            client.allTypes();\n+        } finally {\n+            ArgumentCaptor<MetricCollection> collectionCaptor = ArgumentCaptor.forClass(MetricCollection.class);\n+            verify(mockPublisher).publish(collectionCaptor.capture());\n+\n+            MetricCollection capturedCollection = collectionCaptor.getValue();\n+\n+            assertThat(capturedCollection.children()).hasSize(MAX_RETRIES + 1);\n+\n+            for (MetricCollection requestMetrics : capturedCollection.children()) {\n+                assertThat(requestMetrics.metricValues(CoreMetric.EXCEPTION).get(0))\n+                        // Note: for some reason we don't throw the same exact\n+                        // instance as the one unmarshalled by the response\n+                        // handler (seems we make a copy upstream) so an\n+                        // isSamAs assertion fails here", "originalCommit": "e14f0af8582e2c65d9b227ecd634e765f1b18a8a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAyMDUxNA==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1882#discussion_r437020514", "bodyText": "\"ServiceId\"?", "author": "zoewangg", "createdAt": "2020-06-08T21:48:32Z", "path": "core/sdk-core/src/main/java/software/amazon/awssdk/core/metrics/CoreMetric.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.core.metrics;\n+\n+import java.time.Duration;\n+import software.amazon.awssdk.annotations.SdkPublicApi;\n+import software.amazon.awssdk.metrics.MetricCategory;\n+import software.amazon.awssdk.metrics.SdkMetric;\n+\n+@SdkPublicApi\n+public final class CoreMetric {\n+    /**\n+     * The unique ID for the service. This is present for all API call metrics.\n+     */\n+    public static final SdkMetric<String> SERVICE_ID = metric(\"ServiceName\", String.class);", "originalCommit": "e14f0af8582e2c65d9b227ecd634e765f1b18a8a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAyMjMzNA==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1882#discussion_r437022334", "bodyText": "Do we have plans to include HttpClientSendRequestTime and HttpClientReceiveResponseTime like we have in v1?", "author": "zoewangg", "createdAt": "2020-06-08T21:53:01Z", "path": "core/sdk-core/src/main/java/software/amazon/awssdk/core/metrics/CoreMetric.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.core.metrics;\n+\n+import java.time.Duration;\n+import software.amazon.awssdk.annotations.SdkPublicApi;\n+import software.amazon.awssdk.metrics.MetricCategory;\n+import software.amazon.awssdk.metrics.SdkMetric;\n+\n+@SdkPublicApi\n+public final class CoreMetric {\n+    /**\n+     * The unique ID for the service. This is present for all API call metrics.\n+     */\n+    public static final SdkMetric<String> SERVICE_ID = metric(\"ServiceName\", String.class);\n+\n+    /**\n+     * The name of the service operation being invoked. This is present for all\n+     * API call metrics.\n+     */\n+    public static final SdkMetric<String> OPERATION_NAME = metric(\"OperationName\", String.class);\n+\n+    /**\n+     * The duration of the API call. This includes all call attempts made.\n+     */\n+    public static final SdkMetric<Duration> API_CALL_DURATION = metric(\"ApiCallDuration\", Duration.class);\n+\n+    /**\n+     * The duration of time taken to marshall the SDK request to an HTTP\n+     * request.\n+     */\n+    public static final SdkMetric<Duration> MARSHALLING_DURATION = metric(\"MarshallingDuration\", Duration.class);\n+\n+    /**\n+     * The duration of time taken to fetch signing credentials for the request.\n+     */\n+    public static final SdkMetric<Duration> CREDENTIALS_FETCH_DURATION = metric(\"CredentialsFetchDuration\", Duration.class);\n+\n+    /**\n+     * The duration fo time taken to sign the HTTP request.\n+     */\n+    public static final SdkMetric<Duration> SIGNING_DURATION = metric(\"SigningDuration\", Duration.class);\n+\n+    /**\n+     * The total time take to send a HTTP request and receive the response.\n+     */\n+    public static final SdkMetric<Duration> HTTP_REQUEST_ROUND_TRIP_TIME = metric(\"HttpRequestRoundTripTime\", Duration.class);", "originalCommit": "e14f0af8582e2c65d9b227ecd634e765f1b18a8a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAyMzYzNQ==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1882#discussion_r437023635", "bodyText": "I thought about this but I didn't see the value in it compared to just the duration time. WDYT? I can go either way but I can't think of a situation where it would be useful", "author": "dagnir", "createdAt": "2020-06-08T21:56:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAyMjMzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA0MDM2OA==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1882#discussion_r437040368", "bodyText": "I think granular metrics will provide more insight. For example, for a slow request with higher HttpClientSendRequestTime, we could know that the slowness is in the request, probably something related to establishing a new connection.", "author": "zoewangg", "createdAt": "2020-06-08T22:40:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAyMjMzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA0MjE5Mg==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1882#discussion_r437042192", "bodyText": "How would you know that a request is slow based on HttpClientSendRequestTime though? You'd need some other time metric to compare it to. In your example, I would rather we tracked the time taken to open a connection as its own metric", "author": "dagnir", "createdAt": "2020-06-08T22:45:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAyMjMzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA0NDMxMw==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1882#discussion_r437044313", "bodyText": "Yeah, HttpClientSendRequestTime itself doesn't really make much sense. I meant by looking at all three metrics. HttpClientSendRequestTime, HttpClientReceiveResponseTime and HttpRequestRoundTripTime. For some http clients like http url connection client, it might not be possible to track the time taken to open a connection.", "author": "zoewangg", "createdAt": "2020-06-08T22:52:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAyMjMzNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY3NDMzMg==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1882#discussion_r437674332", "bodyText": "Should we move these into the try block below?", "author": "zoewangg", "createdAt": "2020-06-09T19:42:25Z", "path": "codegen/src/test/resources/software/amazon/awssdk/codegen/poet/client/test-endpoint-discovery-sync.java", "diffHunk": "@@ -92,8 +94,8 @@ public DescribeEndpointsResponse describeEndpoints(DescribeEndpointsRequest desc\n         HttpResponseHandler<AwsServiceException> errorResponseHandler = createErrorResponseHandler(protocolFactory,\n                 operationMetadata);\n         MetricCollector apiCallMetricCollector = MetricCollector.create(\"ApiCall\");\n-        apiCallMetricCollector.reportMetric(AwsCoreMetric.SERVICE_ID, \"AwsEndpointDiscoveryTest\");\n-        apiCallMetricCollector.reportMetric(AwsCoreMetric.OPERATION_NAME, \"DescribeEndpoints\");\n+        apiCallMetricCollector.reportMetric(CoreMetric.SERVICE_ID, \"AwsEndpointDiscoveryTest\");\n+        apiCallMetricCollector.reportMetric(CoreMetric.OPERATION_NAME, \"DescribeEndpoints\");", "originalCommit": "e14f0af8582e2c65d9b227ecd634e765f1b18a8a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODMzODAyMw==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1882#discussion_r438338023", "bodyText": "Not a big fan of Pair because it's hard to tell what pair#right or pair#left returns from reading the code. Guess this is the perfect use case for record", "author": "zoewangg", "createdAt": "2020-06-10T18:48:36Z", "path": "core/aws-core/src/main/java/software/amazon/awssdk/awscore/client/handler/AwsClientHandlerUtils.java", "diffHunk": "@@ -69,7 +74,11 @@ private AwsClientHandlerUtils() {\n                                                                     .flatMap(AwsRequestOverrideConfiguration::credentialsProvider)\n                                                                     .orElse(clientCredentials);\n \n-        AwsCredentials credentials = credentialsProvider.resolveCredentials();\n+        Pair<AwsCredentials, Duration> measuredCredentialsFetch = MetricUtils.measureDuration(\n+                credentialsProvider::resolveCredentials);\n+        AwsCredentials credentials = measuredCredentialsFetch.left();\n+        MetricCollector metricCollector = resolveMetricCollector(executionParams);\n+        metricCollector.reportMetric(CoreMetric.CREDENTIALS_FETCH_DURATION, measuredCredentialsFetch.right());", "originalCommit": "e14f0af8582e2c65d9b227ecd634e765f1b18a8a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc1MDkwNg==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1882#discussion_r441750906", "bodyText": "Yeah, I agree it's a little difficult to read, but I didn't want to create a new class for this.", "author": "dagnir", "createdAt": "2020-06-17T18:39:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODMzODAyMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM3MDUxOA==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1882#discussion_r438370518", "bodyText": "might be worth adding a test for the scenario where the api call fails of IOException", "author": "zoewangg", "createdAt": "2020-06-10T19:51:08Z", "path": "test/codegen-generated-classes-test/src/test/java/software/amazon/awssdk/services/protocolrestjson/CoreMetricsTest.java", "diffHunk": "@@ -0,0 +1,258 @@\n+/*\n+ * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.services.protocolrestjson;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Matchers.any;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.verifyZeroInteractions;\n+import static org.mockito.Mockito.when;\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.time.Duration;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+import org.junit.runner.RunWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Mock;\n+import org.mockito.runners.MockitoJUnitRunner;\n+import software.amazon.awssdk.auth.credentials.AwsBasicCredentials;\n+import software.amazon.awssdk.auth.credentials.AwsCredentialsProvider;\n+import software.amazon.awssdk.core.metrics.CoreMetric;\n+import software.amazon.awssdk.http.AbortableInputStream;\n+import software.amazon.awssdk.http.ExecutableHttpRequest;\n+import software.amazon.awssdk.http.HttpExecuteRequest;\n+import software.amazon.awssdk.http.HttpExecuteResponse;\n+import software.amazon.awssdk.http.SdkHttpClient;\n+import software.amazon.awssdk.http.SdkHttpFullResponse;\n+import software.amazon.awssdk.metrics.MetricCollection;\n+import software.amazon.awssdk.metrics.MetricPublisher;\n+import software.amazon.awssdk.services.protocolrestjson.model.EmptyModeledException;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class CoreMetricsTest {", "originalCommit": "e14f0af8582e2c65d9b227ecd634e765f1b18a8a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTAzNjkwNg==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1882#discussion_r439036906", "bodyText": "We might want the same test for streaming operation to make sure it's covered. I found out the core metrics did not work for eventstreaming operations after I added tests (it did work for streaming operations)", "author": "zoewangg", "createdAt": "2020-06-11T20:04:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM3MDUxOA=="}], "type": "inlineReview"}]}