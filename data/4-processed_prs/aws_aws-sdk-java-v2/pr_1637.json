{"pr_number": 1637, "pr_title": "Dynamodb-enhanced [preview]: Updates table and index interfaces and r\u2026", "pr_createdAt": "2020-02-06T22:15:41Z", "pr_url": "https://github.com/aws/aws-sdk-java-v2/pull/1637", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjEzNTE1Mg==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1637#discussion_r376135152", "bodyText": "New line the different methods call for readability?", "author": "spfink", "createdAt": "2020-02-06T23:14:06Z", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/model/GlobalSecondaryIndex.java", "diffHunk": "@@ -25,17 +25,25 @@\n     private final Projection projection;\n     private final ProvisionedThroughput provisionedThroughput;\n \n-    private GlobalSecondaryIndex(String indexName, Projection projection, ProvisionedThroughput provisionedThroughput) {\n-        this.indexName = indexName;\n-        this.projection = projection;\n-        this.provisionedThroughput = provisionedThroughput;\n+    private GlobalSecondaryIndex(Builder builder) {\n+        this.indexName = builder.indexName;\n+        this.projection = builder.projection;\n+        this.provisionedThroughput = builder.provisionedThroughput;\n     }\n \n     public static GlobalSecondaryIndex create(String indexName,\n                                               Projection projection,\n                                               ProvisionedThroughput provisionedThroughput) {\n \n-        return new GlobalSecondaryIndex(indexName, projection, provisionedThroughput);\n+        return builder().indexName(indexName).projection(projection).provisionedThroughput(provisionedThroughput).build();", "originalCommit": "fb83c1e3e13e03072b3f5f97d142cc3ebaa58062", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjEzNTIwOA==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1637#discussion_r376135208", "bodyText": "Same as above", "author": "spfink", "createdAt": "2020-02-06T23:14:16Z", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/model/GlobalSecondaryIndex.java", "diffHunk": "@@ -25,17 +25,25 @@\n     private final Projection projection;\n     private final ProvisionedThroughput provisionedThroughput;\n \n-    private GlobalSecondaryIndex(String indexName, Projection projection, ProvisionedThroughput provisionedThroughput) {\n-        this.indexName = indexName;\n-        this.projection = projection;\n-        this.provisionedThroughput = provisionedThroughput;\n+    private GlobalSecondaryIndex(Builder builder) {\n+        this.indexName = builder.indexName;\n+        this.projection = builder.projection;\n+        this.provisionedThroughput = builder.provisionedThroughput;\n     }\n \n     public static GlobalSecondaryIndex create(String indexName,\n                                               Projection projection,\n                                               ProvisionedThroughput provisionedThroughput) {\n \n-        return new GlobalSecondaryIndex(indexName, projection, provisionedThroughput);\n+        return builder().indexName(indexName).projection(projection).provisionedThroughput(provisionedThroughput).build();\n+    }\n+\n+    public static Builder builder() {\n+        return new Builder();\n+    }\n+\n+    public Builder toBuilder() {\n+        return new Builder().indexName(indexName).projection(projection).provisionedThroughput(provisionedThroughput);", "originalCommit": "fb83c1e3e13e03072b3f5f97d142cc3ebaa58062", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjEzNTU1NA==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1637#discussion_r376135554", "bodyText": "create() calls builder() while toBuilder does new Builder()\nShould we make them consistent here and everywhere else?", "author": "spfink", "createdAt": "2020-02-06T23:15:20Z", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/model/GlobalSecondaryIndex.java", "diffHunk": "@@ -25,17 +25,25 @@\n     private final Projection projection;\n     private final ProvisionedThroughput provisionedThroughput;\n \n-    private GlobalSecondaryIndex(String indexName, Projection projection, ProvisionedThroughput provisionedThroughput) {\n-        this.indexName = indexName;\n-        this.projection = projection;\n-        this.provisionedThroughput = provisionedThroughput;\n+    private GlobalSecondaryIndex(Builder builder) {\n+        this.indexName = builder.indexName;\n+        this.projection = builder.projection;\n+        this.provisionedThroughput = builder.provisionedThroughput;\n     }\n \n     public static GlobalSecondaryIndex create(String indexName,\n                                               Projection projection,\n                                               ProvisionedThroughput provisionedThroughput) {\n \n-        return new GlobalSecondaryIndex(indexName, projection, provisionedThroughput);\n+        return builder().indexName(indexName).projection(projection).provisionedThroughput(provisionedThroughput).build();\n+    }\n+\n+    public static Builder builder() {\n+        return new Builder();\n+    }\n+\n+    public Builder toBuilder() {\n+        return new Builder().indexName(indexName).projection(projection).provisionedThroughput(provisionedThroughput);", "originalCommit": "fb83c1e3e13e03072b3f5f97d142cc3ebaa58062", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjEzNzMxNA==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1637#discussion_r376137314", "bodyText": "Where is this build hanging off of?", "author": "spfink", "createdAt": "2020-02-06T23:20:15Z", "path": "services-custom/dynamodb-enhanced/src/test/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/functionaltests/AsyncIndexQueryOperationTest.java", "diffHunk": "@@ -0,0 +1,308 @@\n+/*\n+ * Copyright 2010-2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package software.amazon.awssdk.extensions.dynamodb.mappingclient.functionaltests;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.empty;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.nullValue;\n+import static software.amazon.awssdk.extensions.dynamodb.mappingclient.AttributeValues.numberValue;\n+import static software.amazon.awssdk.extensions.dynamodb.mappingclient.AttributeValues.stringValue;\n+import static software.amazon.awssdk.extensions.dynamodb.mappingclient.model.QueryConditional.between;\n+import static software.amazon.awssdk.extensions.dynamodb.mappingclient.model.QueryConditional.equalTo;\n+import static software.amazon.awssdk.extensions.dynamodb.mappingclient.staticmapper.AttributeTags.primaryPartitionKey;\n+import static software.amazon.awssdk.extensions.dynamodb.mappingclient.staticmapper.AttributeTags.primarySortKey;\n+import static software.amazon.awssdk.extensions.dynamodb.mappingclient.staticmapper.AttributeTags.secondaryPartitionKey;\n+import static software.amazon.awssdk.extensions.dynamodb.mappingclient.staticmapper.AttributeTags.secondarySortKey;\n+import static software.amazon.awssdk.extensions.dynamodb.mappingclient.staticmapper.Attributes.integerNumberAttribute;\n+import static software.amazon.awssdk.extensions.dynamodb.mappingclient.staticmapper.Attributes.stringAttribute;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import software.amazon.awssdk.core.async.SdkPublisher;\n+import software.amazon.awssdk.extensions.dynamodb.mappingclient.DynamoDbAsyncIndex;\n+import software.amazon.awssdk.extensions.dynamodb.mappingclient.DynamoDbAsyncTable;\n+import software.amazon.awssdk.extensions.dynamodb.mappingclient.DynamoDbEnhancedAsyncClient;\n+import software.amazon.awssdk.extensions.dynamodb.mappingclient.Key;\n+import software.amazon.awssdk.extensions.dynamodb.mappingclient.Page;\n+import software.amazon.awssdk.extensions.dynamodb.mappingclient.TableSchema;\n+import software.amazon.awssdk.extensions.dynamodb.mappingclient.core.DefaultDynamoDbEnhancedAsyncClient;\n+import software.amazon.awssdk.extensions.dynamodb.mappingclient.model.CreateTableEnhancedRequest;\n+import software.amazon.awssdk.extensions.dynamodb.mappingclient.model.GlobalSecondaryIndex;\n+import software.amazon.awssdk.extensions.dynamodb.mappingclient.model.QueryEnhancedRequest;\n+import software.amazon.awssdk.extensions.dynamodb.mappingclient.operations.GetItem;\n+import software.amazon.awssdk.extensions.dynamodb.mappingclient.operations.PutItem;\n+import software.amazon.awssdk.extensions.dynamodb.mappingclient.staticmapper.StaticTableSchema;\n+import software.amazon.awssdk.services.dynamodb.model.AttributeValue;\n+import software.amazon.awssdk.services.dynamodb.model.DeleteTableRequest;\n+import software.amazon.awssdk.services.dynamodb.model.Projection;\n+import software.amazon.awssdk.services.dynamodb.model.ProjectionType;\n+\n+public class AsyncIndexQueryOperationTest extends LocalDynamoDbAsyncTestBase {\n+    private static class Record {\n+        private String id;\n+        private Integer sort;\n+        private Integer value;\n+        private String gsiId;\n+        private Integer gsiSort;\n+\n+        private String getId() {\n+            return id;\n+        }\n+\n+        private Record setId(String id) {\n+            this.id = id;\n+            return this;\n+        }\n+\n+        private Integer getSort() {\n+            return sort;\n+        }\n+\n+        private Record setSort(Integer sort) {\n+            this.sort = sort;\n+            return this;\n+        }\n+\n+        private Integer getValue() {\n+            return value;\n+        }\n+\n+        private Record setValue(Integer value) {\n+            this.value = value;\n+            return this;\n+        }\n+\n+        private String getGsiId() {\n+            return gsiId;\n+        }\n+\n+        private Record setGsiId(String gsiId) {\n+            this.gsiId = gsiId;\n+            return this;\n+        }\n+\n+        private Integer getGsiSort() {\n+            return gsiSort;\n+        }\n+\n+        private Record setGsiSort(Integer gsiSort) {\n+            this.gsiSort = gsiSort;\n+            return this;\n+        }\n+\n+        @Override\n+        public boolean equals(Object o) {\n+            if (this == o) return true;\n+            if (o == null || getClass() != o.getClass()) return false;\n+            Record record = (Record) o;\n+            return Objects.equals(id, record.id) &&\n+                   Objects.equals(sort, record.sort) &&\n+                   Objects.equals(value, record.value) &&\n+                   Objects.equals(gsiId, record.gsiId) &&\n+                   Objects.equals(gsiSort, record.gsiSort);\n+        }\n+\n+        @Override\n+        public int hashCode() {\n+            return Objects.hash(id, sort, value, gsiId, gsiSort);\n+        }\n+    }\n+\n+    private static final TableSchema<Record> TABLE_SCHEMA =\n+        StaticTableSchema.builder(Record.class)\n+                         .newItemSupplier(Record::new)\n+                         .attributes(\n+                             stringAttribute(\"id\", Record::getId, Record::setId).as(primaryPartitionKey()),\n+                             integerNumberAttribute(\"sort\", Record::getSort, Record::setSort).as(primarySortKey()),\n+                             integerNumberAttribute(\"value\", Record::getValue, Record::setValue),\n+                             stringAttribute(\"gsi_id\", Record::getGsiId, Record::setGsiId)\n+                                 .as(secondaryPartitionKey(\"gsi_keys_only\")),\n+                             integerNumberAttribute(\"gsi_sort\", Record::getGsiSort, Record::setGsiSort)\n+                                 .as(secondarySortKey(\"gsi_keys_only\")))\n+                         .build();\n+\n+    private static final List<Record> RECORDS =\n+        IntStream.range(0, 10)\n+                 .mapToObj(i -> new Record()\n+                                      .setId(\"id-value\")\n+                                      .setSort(i)\n+                                      .setValue(i)\n+                                      .setGsiId(\"gsi-id-value\")\n+                                      .setGsiSort(i))\n+                 .collect(Collectors.toList());\n+\n+    private static final List<Record> KEYS_ONLY_RECORDS =\n+        RECORDS.stream()\n+               .map(record -> new Record()\n+                                    .setId(record.id)\n+                                    .setSort(record.sort)\n+                                    .setGsiId(record.gsiId)\n+                                    .setGsiSort(record.gsiSort))\n+               .collect(Collectors.toList());\n+\n+    private DynamoDbEnhancedAsyncClient enhancedAsyncClient = DefaultDynamoDbEnhancedAsyncClient.builder()\n+                                                                                                .dynamoDbClient(getDynamoDbAsyncClient())\n+                                                                                                .build();\n+\n+    private DynamoDbAsyncTable<Record> mappedTable = enhancedAsyncClient.table(getConcreteTableName(\"table-name\"), TABLE_SCHEMA);\n+    private DynamoDbAsyncIndex<Record> keysOnlyMappedIndex = mappedTable.index(\"gsi_keys_only\");\n+\n+    private void insertRecords() {\n+        RECORDS.forEach(record -> mappedTable.execute(PutItem.create(record)).join());\n+    }\n+\n+    private static <T> List<T> drainPublisher(SdkPublisher<T> publisher, int expectedNumberOfResults) {\n+        BufferingSubscriber<T> subscriber = new BufferingSubscriber<>();\n+        publisher.subscribe(subscriber);\n+        subscriber.waitForCompletion(1000L);\n+\n+        assertThat(subscriber.isCompleted(), is(true));\n+        assertThat(subscriber.bufferedError(), is(nullValue()));\n+        assertThat(subscriber.bufferedItems().size(), is(expectedNumberOfResults));\n+\n+        return subscriber.bufferedItems();\n+    }\n+\n+    @Before\n+    public void createTable() {\n+        mappedTable.createTable(CreateTableEnhancedRequest.builder()\n+                                                          .provisionedThroughput(getDefaultProvisionedThroughput())\n+                                                          .globalSecondaryIndices(\n+                                                              GlobalSecondaryIndex.create(\n+                                                                  \"gsi_keys_only\",\n+                                                                  Projection.builder()\n+                                                                            .projectionType(ProjectionType.KEYS_ONLY)\n+                                                                            .build(),\n+                                                                  getDefaultProvisionedThroughput()))\n+                                                      .build())", "originalCommit": "fb83c1e3e13e03072b3f5f97d142cc3ebaa58062", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjEzNzYzMA==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1637#discussion_r376137630", "bodyText": "Where is this hanging from?", "author": "spfink", "createdAt": "2020-02-06T23:21:12Z", "path": "services-custom/dynamodb-enhanced/src/test/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/functionaltests/IndexQueryOperationTest.java", "diffHunk": "@@ -163,24 +163,25 @@ public int hashCode() {\n                                                                           .dynamoDbClient(getDynamoDbClient())\n                                                                           .build();\n \n-    private MappedTable<Record> mappedTable = enhancedClient.table(getConcreteTableName(\"table-name\"), TABLE_SCHEMA);\n-    private MappedIndex<Record> keysOnlyMappedIndex = mappedTable.index(\"gsi_keys_only\");\n+    private DynamoDbTable<Record> mappedTable = enhancedClient.table(getConcreteTableName(\"table-name\"), TABLE_SCHEMA);\n+    private DynamoDbIndex<Record> keysOnlyMappedIndex = mappedTable.index(\"gsi_keys_only\");\n \n     private void insertRecords() {\n         RECORDS.forEach(record -> mappedTable.execute(PutItem.create(record)));\n     }\n \n     @Before\n     public void createTable() {\n-        mappedTable.execute(CreateTable.builder()\n-                                       .provisionedThroughput(getDefaultProvisionedThroughput())\n-                                       .globalSecondaryIndices(\n-                                           GlobalSecondaryIndex.create(\"gsi_keys_only\",\n-                                                                   Projection.builder()\n-                                                                             .projectionType(ProjectionType.KEYS_ONLY)\n-                                                                             .build(),\n-                                                                   getDefaultProvisionedThroughput()))\n-                           .build());\n+        mappedTable.createTable(CreateTableEnhancedRequest.builder()\n+                                                          .provisionedThroughput(getDefaultProvisionedThroughput())\n+                                                          .globalSecondaryIndices(\n+                                                              GlobalSecondaryIndex.create(\n+                                                                  \"gsi_keys_only\",\n+                                                                  Projection.builder()\n+                                                                            .projectionType(ProjectionType.KEYS_ONLY)\n+                                                                            .build(),\n+                                                                  getDefaultProvisionedThroughput()))\n+                                                      .build());", "originalCommit": "fb83c1e3e13e03072b3f5f97d142cc3ebaa58062", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjEzODE0NA==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1637#discussion_r376138144", "bodyText": "Why the need for defaults here?", "author": "spfink", "createdAt": "2020-02-06T23:22:44Z", "path": "services-custom/dynamodb-enhanced/src/main/java/software/amazon/awssdk/extensions/dynamodb/mappingclient/DynamoDbAsyncIndex.java", "diffHunk": "@@ -27,28 +27,15 @@\n  * @param <T> The type of the modelled object.\n  */\n @SdkPublicApi\n-public interface AsyncMappedIndex<T> {\n-    /**\n-     * Executes a command that is expected to return a single data item against the database with the context of the\n-     * specific table and secondary index this object is linked to.\n-     *\n-     * @param operationToPerform The operation to be performed in the context of the secondary index.\n-     * @param <R> The expected return type from the operation. This is typically inferred by the compiler.\n-     * @return A {@link CompletableFuture} of the result of the operation being executed. The documentation on the\n-     * operation itself should have more information.\n-     */\n-    <R> CompletableFuture<R> execute(IndexOperation<T, ?, ?, R> operationToPerform);\n+public interface DynamoDbAsyncIndex<T> {\n \n-    /**\n-     * Executes a command that is expected to return a paginated list of data items against the database with the\n-     * context of the specific table and secondary index this object is linked to.\n-     *\n-     * @param operationToPerform The operation to be performed in the context of the secondary index.\n-     * @param <R> The expected return type from the operation. This is typically inferred by the compiler.\n-     * @return An {@link SdkPublisher} that will publish successive pages of result data items to any subscriber with\n-     * demand for them.\n-     */\n-    <R> SdkPublisher<R> execute(PaginatedIndexOperation<T, ?, ?, R> operationToPerform);\n+    default SdkPublisher<Page<T>> query(QueryEnhancedRequest request) {\n+        throw new UnsupportedOperationException();", "originalCommit": "fb83c1e3e13e03072b3f5f97d142cc3ebaa58062", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjEzOTM3Nw==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1637#discussion_r376139377", "bodyText": "For supporting new operations in the future, I think, and now for consistency. It's in the design doc.", "author": "cenedhryn", "createdAt": "2020-02-06T23:26:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjEzODE0NA=="}], "type": "inlineReview"}, {"oid": "3f876609cfd9f41e338aa59e85b610dbc8d10b5e", "url": "https://github.com/aws/aws-sdk-java-v2/commit/3f876609cfd9f41e338aa59e85b610dbc8d10b5e", "message": "Dynamodb-enhanced [preview]: Updates table and index interfaces and refactors additional operations.", "committedDate": "2020-02-07T16:11:48Z", "type": "commit"}, {"oid": "3f876609cfd9f41e338aa59e85b610dbc8d10b5e", "url": "https://github.com/aws/aws-sdk-java-v2/commit/3f876609cfd9f41e338aa59e85b610dbc8d10b5e", "message": "Dynamodb-enhanced [preview]: Updates table and index interfaces and refactors additional operations.", "committedDate": "2020-02-07T16:11:48Z", "type": "forcePushed"}, {"oid": "ef708123b9ac560418b7999377e4a974aabdb090", "url": "https://github.com/aws/aws-sdk-java-v2/commit/ef708123b9ac560418b7999377e4a974aabdb090", "message": "Merge branch 'master' into salande/ddbmapper-table-op-split-2", "committedDate": "2020-02-07T16:12:55Z", "type": "commit"}]}