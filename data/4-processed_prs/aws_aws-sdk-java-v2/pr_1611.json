{"pr_number": 1611, "pr_title": "Create Bootstrap with unresolved address", "pr_createdAt": "2020-01-23T22:24:12Z", "pr_url": "https://github.com/aws/aws-sdk-java-v2/pull/1611", "timeline": [{"oid": "f256fc31cef7968deca90ba6833970c32a17331e", "url": "https://github.com/aws/aws-sdk-java-v2/commit/f256fc31cef7968deca90ba6833970c32a17331e", "message": "Create Bootstrap with unresolved address\n\nThis forces the Netty client use InetAddress.getByName/getAllByName for each\nconnect() request, which will delegate to the JVM's DNS lookup and caching\nmechanism", "committedDate": "2020-01-23T22:19:10Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDM4OTQyOQ==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1611#discussion_r370389429", "bodyText": "Does this break customers using already-resolved IPs, like 127.0.0.1?", "author": "millems", "createdAt": "2020-01-23T22:30:02Z", "path": "http-clients/netty-nio-client/src/main/java/software/amazon/awssdk/http/nio/netty/internal/AwaitCloseChannelPoolMap.java", "diffHunk": "@@ -178,7 +178,7 @@ private Bootstrap createBootstrap(URI poolKey) {\n                         .channelFactory(sdkEventLoopGroup.channelFactory())\n                         .option(ChannelOption.CONNECT_TIMEOUT_MILLIS, configuration.connectTimeoutMillis())\n                         // TODO run some performance tests with and without this.\n-                        .remoteAddress(new InetSocketAddress(host, port));\n+                        .remoteAddress(InetSocketAddress.createUnresolved(host, port));", "originalCommit": "f256fc31cef7968deca90ba6833970c32a17331e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDM5NTAxMQ==", "url": "https://github.com/aws/aws-sdk-java-v2/pull/1611#discussion_r370395011", "bodyText": "Verified this doesn't break IP's given as the host:\n        SdkAsyncHttpClient netty = NettyNioAsyncHttpClient.builder()\n                .build();\n\n        SdkHttpFullRequest sdkRequest = SdkHttpFullRequest.builder()\n                .method(SdkHttpMethod.GET)\n                .protocol(\"http\")\n                .host(\"52.216.179.173\") // s3.amazonaws.com\n                .port(80)\n                .encodedPath(\"/\")\n                .build();\n\n        AsyncExecuteRequest request = AsyncExecuteRequest.builder()\n                .requestContentPublisher(new EmptyPublisher())\n                .request(sdkRequest)\n                .responseHandler(new SdkAsyncHttpResponseHandler() {\n                    @Override\n                    public void onHeaders(SdkHttpResponse headers) {\n                        System.out.println(headers.headers());\n                    }\n\n                    @Override\n                    public void onStream(Publisher<ByteBuffer> stream) {\n                    }\n\n                    @Override\n                    public void onError(Throwable error) {\n                    }\n                })\n                .build();\n\n        netty.execute(request).join();\nOutput:\n{Content-Length=[0], Date=[Thu, 23 Jan 2020 22:44:57 GMT], Location=[https://aws.amazon.com/s3/], Server=[AmazonS3], x-amz-id-2=[vH+t2xruaRBuhxVk//+lRRmf9Nk55Hv8jht7/37/j+3hHyiXBCDngKZaG8bepYJrRjatmthNOLA=], x-amz-request-id=[1ACB290645C7D6E1]}", "author": "dagnir", "createdAt": "2020-01-23T22:45:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDM4OTQyOQ=="}], "type": "inlineReview"}]}