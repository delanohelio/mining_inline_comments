{"pr_number": 2217, "pr_title": "Make JAR builds reproducible", "pr_createdAt": "2020-03-18T22:33:36Z", "pr_url": "https://github.com/junit-team/junit5/pull/2217", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk5OTg1Nw==", "url": "https://github.com/junit-team/junit5/pull/2217#discussion_r395999857", "bodyText": "Do we need this here since we're not publishing any jars produced by buildSrc?", "author": "marcphilipp", "createdAt": "2020-03-21T15:04:04Z", "path": "buildSrc/build.gradle.kts", "diffHunk": "@@ -13,3 +13,10 @@ dependencies {\n \timplementation(\"biz.aQute.bnd:biz.aQute.bnd.gradle:5.0.0\")\n \timplementation(\"com.github.jengelman.gradle.plugins:shadow:5.2.0\")\n }\n+\n+allprojects {\n+\ttasks.withType<AbstractArchiveTask>().configureEach {\n+\t\tisPreserveFileTimestamps = false\n+\t\tisReproducibleFileOrder = true\n+\t}\n+}", "originalCommit": "4c4c4a8bea6e1d8bf0f6123217a8272581d2d21d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjAwMjE5OQ==", "url": "https://github.com/junit-team/junit5/pull/2217#discussion_r396002199", "bodyText": "Good point - I included it for completeness as the output jar was picked up by the testing script, will remove.", "author": "mrwilson", "createdAt": "2020-03-21T15:35:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk5OTg1Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk5OTkwOQ==", "url": "https://github.com/junit-team/junit5/pull/2217#discussion_r395999909", "bodyText": "I'd like to move this logic to buildSrc. Are you feeling up for it or shall I polish it myself?", "author": "marcphilipp", "createdAt": "2020-03-21T15:04:45Z", "path": "build.gradle.kts", "diffHunk": "@@ -145,6 +176,42 @@ subprojects {\n \t\t\t\t}\n \t\t\t\tjarTask.finalizedBy(extractJar)\n \t\t\t}\n+\n+\t\t\tif (project in listOf(project(\":junit-platform-commons\"), project(\":junit-platform-console\"))) {\n+\n+\t\t\t\tval jarTask = (tasks.findByName(\"shadowJar\") ?: tasks[\"jar\"]) as Jar\n+\n+\t\t\t\tjarTask.doLast {\n+\n+\t\t\t\t\tval newFile = createTempFile(\"rewrite-timestamp\")\n+\t\t\t\t\tval originalOutput = jarTask.archiveFile.get().getAsFile()\n+\n+\t\t\t\t\tnewFile.outputStream().use { os ->\n+\n+\t\t\t\t\t\tval newJarStream = JarOutputStream(os)\n+\t\t\t\t\t\tval oldJar = JarFile(originalOutput)\n+\n+\t\t\t\t\t\toldJar.entries()\n+\t\t\t\t\t\t\t\t.toList()\n+\t\t\t\t\t\t\t\t.distinctBy { it.name }\n+\t\t\t\t\t\t\t\t.sortedBy { it.name }\n+\t\t\t\t\t\t\t\t.forEach { entry ->\n+\t\t\t\t\t\t\t\t\tval copy = JarEntry(entry.name)\n+\n+\t\t\t\t\t\t\t\t\t// Use the same constant as the fixed timestamps in normal copy actions\n+\t\t\t\t\t\t\t\t\tcopy.time = ZipCopyAction.CONSTANT_TIME_FOR_ZIP_ENTRIES\n+\n+\t\t\t\t\t\t\t\t\tnewJarStream.putNextEntry(copy)\n+\n+\t\t\t\t\t\t\t\t\toldJar.getInputStream(entry).copyTo(newJarStream)\n+\t\t\t\t\t\t\t\t}\n+\n+\t\t\t\t\t\tnewJarStream.finish()\n+\t\t\t\t\t}\n+\n+\t\t\t\t\tnewFile.renameTo(originalOutput)\n+\t\t\t\t}\n+\t\t\t}", "originalCommit": "4c4c4a8bea6e1d8bf0f6123217a8272581d2d21d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjAwMjIxOQ==", "url": "https://github.com/junit-team/junit5/pull/2217#discussion_r396002219", "bodyText": "Yep, I'll modify the commits appropriately. \ud83d\udc4d", "author": "mrwilson", "createdAt": "2020-03-21T15:35:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk5OTkwOQ=="}], "type": "inlineReview"}, {"oid": "09054769cd3f7d96f1e5b83d65d41b2d105f9853", "url": "https://github.com/junit-team/junit5/commit/09054769cd3f7d96f1e5b83d65d41b2d105f9853", "message": "Enable junit5 to build reproducibly.\n\nThis change uses Gradle's reproducible archives feature (https://docs.gradle.org/current/userguide/working_with_files.html#sec:reproducible_archives) to consistently build the output JARs.\n\nAdditionally, the build now supports SOURCE_DATE_EPOCH to allow overriding of `buildTimeAndDate` as this introduces non-determinism into the build.", "committedDate": "2020-03-31T18:28:19Z", "type": "commit"}, {"oid": "e75d37567521cb43665a058a73a17501e2e2d97e", "url": "https://github.com/junit-team/junit5/commit/e75d37567521cb43665a058a73a17501e2e2d97e", "message": "Rewrite timestamps in special-case JARs to make them reproducible.\n\nThis uses the same fixed-time constant as is being used when `isPreserveFileTimestamps` is set to false.", "committedDate": "2020-03-31T18:28:47Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE2MzQ2MQ==", "url": "https://github.com/junit-team/junit5/pull/2217#discussion_r402163461", "bodyText": "Please hard-wrap these lines at 90 chars (cf. https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#documentation).", "author": "marcphilipp", "createdAt": "2020-04-02T09:08:19Z", "path": "documentation/src/docs/asciidoc/user-guide/appendix.adoc", "diffHunk": "@@ -1,6 +1,13 @@\n [[appendix]]\n == Appendix\n \n+[[reproducible-builds]]\n+=== Reproducible Builds\n+\n+JUnit 5 aims for its non-javadoc JARs to be https://reproducible-builds.org/[reproducible] - under identical build conditions, such as Java version, repeated builds should provide the same output byte-for-byte.\n+\n+This means that anyone can reproduce the build conditions of the artifacts on Maven Central/Sonatype and produce the same output artifact locally, confirming that the artifacts in the repositories were actually generated from this source code.", "originalCommit": "21fc577a1baaf9037f357006c9e145460b19e509", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE2MzgxNw==", "url": "https://github.com/junit-team/junit5/pull/2217#discussion_r402163817", "bodyText": "I think we should add \"Starting with version 5.7, ...\".", "author": "marcphilipp", "createdAt": "2020-04-02T09:08:53Z", "path": "documentation/src/docs/asciidoc/user-guide/appendix.adoc", "diffHunk": "@@ -1,6 +1,13 @@\n [[appendix]]\n == Appendix\n \n+[[reproducible-builds]]\n+=== Reproducible Builds\n+\n+JUnit 5 aims for its non-javadoc JARs to be https://reproducible-builds.org/[reproducible] - under identical build conditions, such as Java version, repeated builds should provide the same output byte-for-byte.", "originalCommit": "21fc577a1baaf9037f357006c9e145460b19e509", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI3NjkwNg==", "url": "https://github.com/junit-team/junit5/pull/2217#discussion_r402276906", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                ./gradlew clean assemble\n          \n          \n            \n                ./gradlew --no-build-cache clean assemble", "author": "marcphilipp", "createdAt": "2020-04-02T12:33:22Z", "path": "src/checkBuildReproducibility.sh", "diffHunk": "@@ -0,0 +1,23 @@\n+#!/bin/bash -e\n+\n+rm -rf checksums*\n+\n+export SOURCE_DATE_EPOCH=$(date +%s)\n+\n+function calculate_checksums() {\n+    OUTPUT=$1\n+\n+    ./gradlew clean assemble", "originalCommit": "21fc577a1baaf9037f357006c9e145460b19e509", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI3NzU3Nw==", "url": "https://github.com/junit-team/junit5/pull/2217#discussion_r402277577", "bodyText": "Let's move this to a dedicated workflow so it can run in parallel with the main workflow.", "author": "marcphilipp", "createdAt": "2020-04-02T12:34:26Z", "path": ".github/workflows/main.yml", "diffHunk": "@@ -94,6 +94,20 @@ jobs:\n       run: |\n         bash <(curl -s https://codecov.io/bash)\n \n+  check_build_reproducibility:\n+    name: 'Check build reproducibility'\n+    runs-on: ubuntu-latest\n+    steps:\n+    - uses: actions/checkout@v2\n+    - name: 'Set up JDK 11'\n+      uses: actions/setup-java@v1\n+      with:\n+        java-version: 11\n+    - name: Build and compare checksums\n+      shell: bash\n+      run: |\n+        ./src/checkBuildReproducibility.sh\n+", "originalCommit": "21fc577a1baaf9037f357006c9e145460b19e509", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "b6ac3a2dbf03cc45161bcac56fe5ed92a37c1367", "url": "https://github.com/junit-team/junit5/commit/b6ac3a2dbf03cc45161bcac56fe5ed92a37c1367", "message": "Add small section on reproducibility in the Appendix.", "committedDate": "2020-04-02T17:24:08Z", "type": "commit"}, {"oid": "b4ad488ed233d1e80ae5abbf7dc1bf7829172a2f", "url": "https://github.com/junit-team/junit5/commit/b4ad488ed233d1e80ae5abbf7dc1bf7829172a2f", "message": "Add Action to check whether build is still reproducible in CI", "committedDate": "2020-04-02T17:24:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjk2Mzk1OQ==", "url": "https://github.com/junit-team/junit5/pull/2217#discussion_r402963959", "bodyText": "@mrwilson , this seems to specify the same constant value for all the jars. Is isPreserveFileTimestamps = false enough then? What is the purpose of rewriting the jar?", "author": "vlsi", "createdAt": "2020-04-03T12:18:26Z", "path": "buildSrc/src/main/kotlin/java-repackage-jars.gradle.kts", "diffHunk": "@@ -0,0 +1,42 @@\n+import java.util.Calendar\n+import java.util.GregorianCalendar\n+import java.util.jar.JarEntry\n+import java.util.jar.JarFile\n+import java.util.jar.JarOutputStream\n+import org.gradle.api.internal.file.archive.ZipCopyAction\n+\n+// This registers a `doLast` action to rewrite the timestamps of the project's output JAR\n+afterEvaluate {\n+\tval jarTask = (tasks.findByName(\"shadowJar\") ?: tasks[\"jar\"]) as Jar\n+\n+\tjarTask.doLast {\n+\n+\t\tval newFile = createTempFile(\"rewrite-timestamp\")\n+\t\tval originalOutput = jarTask.archiveFile.get().getAsFile()\n+\n+\t\tnewFile.outputStream().use { os ->\n+\n+\t\t\tval newJarStream = JarOutputStream(os)\n+\t\t\tval oldJar = JarFile(originalOutput)\n+\n+\t\t\toldJar.entries()\n+\t\t\t\t\t.toList()\n+\t\t\t\t\t.distinctBy { it.name }\n+\t\t\t\t\t.sortedBy { it.name }\n+\t\t\t\t\t.forEach { entry ->\n+\t\t\t\t\t\tval jarEntry = JarEntry(entry.name)\n+\n+\t\t\t\t\t\t// Use the same constant as the fixed timestamps in normal copy actions\n+\t\t\t\t\t\tjarEntry.time = ZipCopyAction.CONSTANT_TIME_FOR_ZIP_ENTRIES", "originalCommit": "b4ad488ed233d1e80ae5abbf7dc1bf7829172a2f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzAwMTA5OQ==", "url": "https://github.com/junit-team/junit5/pull/2217#discussion_r403001099", "bodyText": "This is just for two specific cases where the actual jar command is being used to manipulate the artifact after it's been created by Gradle, which alters the timestamps and makes the build non-reproducible - I tried to replicate what the jar tool was doing in pure Gradle, with no success.\nAs an immediate solution, this resets all the timestamps of the two artifacts in question - the choice of timestamp was informed by what the isPreserveFileTimestamps = false would do if this step wasn't necessary.\nI hope that helps.", "author": "mrwilson", "createdAt": "2020-04-03T13:22:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjk2Mzk1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzAwNzU1Ng==", "url": "https://github.com/junit-team/junit5/pull/2217#discussion_r403007556", "bodyText": "Thanks, that clarifies things. It would probably be great if something like that was in the comment above.", "author": "vlsi", "createdAt": "2020-04-03T13:32:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjk2Mzk1OQ=="}], "type": "inlineReview"}]}