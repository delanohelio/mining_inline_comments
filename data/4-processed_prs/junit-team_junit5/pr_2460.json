{"pr_number": 2460, "pr_title": "Reduce memory footprint", "pr_createdAt": "2020-10-24T15:59:20Z", "pr_url": "https://github.com/junit-team/junit5/pull/2460", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjczMzU1OQ==", "url": "https://github.com/junit-team/junit5/pull/2460#discussion_r532733559", "bodyText": "This has not changed, but how is this value of 16 chosen?", "author": "mmerdes", "createdAt": "2020-11-30T16:36:19Z", "path": "junit-platform-launcher/src/main/java/org/junit/platform/launcher/TestPlan.java", "diffHunk": "@@ -101,11 +102,11 @@ protected TestPlan(boolean containsTests) {\n \t@API(status = DEPRECATED, since = \"1.4\")\n \tpublic void add(TestIdentifier testIdentifier) {\n \t\tPreconditions.notNull(testIdentifier, \"testIdentifier must not be null\");\n-\t\tallIdentifiers.put(testIdentifier.getUniqueId(), testIdentifier);\n-\t\tif (testIdentifier.getParentId().isPresent()) {\n-\t\t\tString parentId = testIdentifier.getParentId().get();\n+\t\tallIdentifiers.put(testIdentifier.getUniqueIdObject(), testIdentifier);\n+\t\tif (testIdentifier.getParentIdObject().isPresent()) {\n+\t\t\tUniqueId parentId = testIdentifier.getParentIdObject().get();\n \t\t\tSet<TestIdentifier> directChildren = children.computeIfAbsent(parentId,\n-\t\t\t\tkey -> Collections.synchronizedSet(new LinkedHashSet<>(16)));\n+\t\t\t\tkey -> synchronizedSet(new LinkedHashSet<>(16)));", "originalCommit": "9743eb1808b3a991cfe672d9333d81b0f5fc1118", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjc1NTAxNA==", "url": "https://github.com/junit-team/junit5/pull/2460#discussion_r532755014", "bodyText": "Probably just a wild guess that assumes most test classes have more than 8 children.", "author": "marcphilipp", "createdAt": "2020-11-30T17:05:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjczMzU1OQ=="}], "type": "inlineReview"}, {"oid": "c71632866ab7c3d4a877a82af2934c675c4ae50d", "url": "https://github.com/junit-team/junit5/commit/c71632866ab7c3d4a877a82af2934c675c4ae50d", "message": "Allow garbage collecting executed runners\n\nRunnerTestDescriptors can now be garbage collected after they have been\nexecuted because they are now removed from the list of children of the\nengine descriptor.", "committedDate": "2020-12-30T14:03:52Z", "type": "forcePushed"}, {"oid": "90dd6fd28d27664b1d896e3b01655d84183ddc81", "url": "https://github.com/junit-team/junit5/commit/90dd6fd28d27664b1d896e3b01655d84183ddc81", "message": "Allow garbage collecting executed runners\n\nRunnerTestDescriptors can now be garbage collected after they have been\nexecuted because they are now removed from the list of children of the\nengine descriptor.", "committedDate": "2020-12-30T22:01:29Z", "type": "forcePushed"}, {"oid": "c5efbbdc49d63ae3ec4a42729297e065f3e2e02e", "url": "https://github.com/junit-team/junit5/commit/c5efbbdc49d63ae3ec4a42729297e065f3e2e02e", "message": "Vintage: Allow garbage collecting executed runners\n\nRunnerTestDescriptors can now be garbage collected after they have been\nexecuted because they are now removed from the list of children of the\nengine descriptor.", "committedDate": "2020-12-31T11:59:35Z", "type": "forcePushed"}, {"oid": "5ff753797bb3ab2ceca2596f6a7c1dcf0f7d3c2e", "url": "https://github.com/junit-team/junit5/commit/5ff753797bb3ab2ceca2596f6a7c1dcf0f7d3c2e", "message": "Platform: Avoid SerializedForm reference\n\nPrior to this commit each `TestIdentifier` instance required memory for\nstoring a `null` reference.", "committedDate": "2020-12-31T12:34:36Z", "type": "forcePushed"}, {"oid": "266e8f7249e0d1182b5e50e355bf4ac1840d91e4", "url": "https://github.com/junit-team/junit5/commit/266e8f7249e0d1182b5e50e355bf4ac1840d91e4", "message": "Platform: Avoid SerializedForm reference\n\nPrior to this commit each `TestIdentifier` instance required memory for\nstoring a `null` reference.", "committedDate": "2020-12-31T12:37:20Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTkzODE2MA==", "url": "https://github.com/junit-team/junit5/pull/2460#discussion_r551938160", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tprivate interface DynamicTaskState {\n          \n          \n            \n            \t@FunctionalInterface\n          \n          \n            \n            \tprivate interface DynamicTaskState {", "author": "sbrannen", "createdAt": "2021-01-05T13:41:45Z", "path": "junit-platform-engine/src/main/java/org/junit/platform/engine/support/hierarchical/NodeTestTask.java", "diffHunk": "@@ -231,4 +245,20 @@ public void awaitFinished() throws InterruptedException {\n \t\t}\n \t}\n \n+\tprivate interface DynamicTaskState {", "originalCommit": "266e8f7249e0d1182b5e50e355bf4ac1840d91e4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzM4MDAzNg==", "url": "https://github.com/junit-team/junit5/pull/2460#discussion_r553380036", "bodyText": "Do you feel strongly about this? This is only used internally here and not user facing so we don't have to guarantee it will stay a SAM type (pun intended).", "author": "marcphilipp", "createdAt": "2021-01-07T14:58:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTkzODE2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzg1MDE1Mg==", "url": "https://github.com/junit-team/junit5/pull/2460#discussion_r553850152", "bodyText": "Well, we use it as a functional interface at the moment. So I'm in favor of annotating it as such, for the sake of the reader/maintainers.\nSince it's not public, we could safely change our minds later if necessary.", "author": "sbrannen", "createdAt": "2021-01-08T10:00:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTkzODE2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDExNDUzOQ==", "url": "https://github.com/junit-team/junit5/pull/2460#discussion_r554114539", "bodyText": "Done in fad47fd.", "author": "marcphilipp", "createdAt": "2021-01-08T18:21:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTkzODE2MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTkzODk0Mg==", "url": "https://github.com/junit-team/junit5/pull/2460#discussion_r551938942", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t * class match the files that {@code TestIdentifier} had prior to 5.8.\n          \n          \n            \n            \t * class match the fields that {@code TestIdentifier} had prior to 5.8.", "author": "sbrannen", "createdAt": "2021-01-05T13:43:01Z", "path": "junit-platform-launcher/src/main/java/org/junit/platform/launcher/TestIdentifier.java", "diffHunk": "@@ -216,4 +272,75 @@ public String toString() {\n \t\t// @formatter:on\n \t}\n \n+\tprivate void writeObject(ObjectOutputStream s) throws IOException {\n+\t\tSerializedForm serializedForm = new SerializedForm(this);\n+\t\tserializedForm.serialize(s);\n+\t}\n+\n+\tprivate void readObject(ObjectInputStream s) throws ClassNotFoundException, IOException {\n+\t\tSerializedForm serializedForm = SerializedForm.deserialize(s);\n+\t\tuniqueId = UniqueId.parse(serializedForm.uniqueId);\n+\t\tdisplayName = serializedForm.displayName;\n+\t\tsource = serializedForm.source;\n+\t\ttags = serializedForm.tags;\n+\t\ttype = serializedForm.type;\n+\t\tparentId = UniqueId.parse(serializedForm.parentId);\n+\t\tlegacyReportingName = serializedForm.legacyReportingName;\n+\t}\n+\n+\t/**\n+\t * Represents the serialized output of {@code TestIdentifier}. The fields on this\n+\t * class match the files that {@code TestIdentifier} had prior to 5.8.", "originalCommit": "266e8f7249e0d1182b5e50e355bf4ac1840d91e4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTkzOTQ0MQ==", "url": "https://github.com/junit-team/junit5/pull/2460#discussion_r551939441", "bodyText": "No need to make the constructor and methods public in this local class.", "author": "sbrannen", "createdAt": "2021-01-05T13:43:55Z", "path": "junit-platform-launcher/src/main/java/org/junit/platform/launcher/TestIdentifier.java", "diffHunk": "@@ -216,4 +272,75 @@ public String toString() {\n \t\t// @formatter:on\n \t}\n \n+\tprivate void writeObject(ObjectOutputStream s) throws IOException {\n+\t\tSerializedForm serializedForm = new SerializedForm(this);\n+\t\tserializedForm.serialize(s);\n+\t}\n+\n+\tprivate void readObject(ObjectInputStream s) throws ClassNotFoundException, IOException {\n+\t\tSerializedForm serializedForm = SerializedForm.deserialize(s);\n+\t\tuniqueId = UniqueId.parse(serializedForm.uniqueId);\n+\t\tdisplayName = serializedForm.displayName;\n+\t\tsource = serializedForm.source;\n+\t\ttags = serializedForm.tags;\n+\t\ttype = serializedForm.type;\n+\t\tparentId = UniqueId.parse(serializedForm.parentId);\n+\t\tlegacyReportingName = serializedForm.legacyReportingName;\n+\t}\n+\n+\t/**\n+\t * Represents the serialized output of {@code TestIdentifier}. The fields on this\n+\t * class match the files that {@code TestIdentifier} had prior to 5.8.\n+\t */\n+\tprivate static class SerializedForm implements Serializable {\n+\n+\t\tprivate static final long serialVersionUID = 1L;\n+\n+\t\tprivate final String uniqueId;\n+\t\tprivate final String parentId;\n+\t\tprivate final String displayName;\n+\t\tprivate final String legacyReportingName;\n+\t\tprivate final TestSource source;\n+\t\tprivate final Set<TestTag> tags;\n+\t\tprivate final Type type;\n+\n+\t\tpublic SerializedForm(TestIdentifier testIdentifier) {", "originalCommit": "266e8f7249e0d1182b5e50e355bf4ac1840d91e4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzM4MjA2Nw==", "url": "https://github.com/junit-team/junit5/pull/2460#discussion_r553382067", "bodyText": "Done in ffbafa6.", "author": "marcphilipp", "createdAt": "2021-01-07T15:01:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTkzOTQ0MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTk0MDkyNQ==", "url": "https://github.com/junit-team/junit5/pull/2460#discussion_r551940925", "bodyText": "I saw in the commit comment that this algorithm avoids the use of a RegEx if the display name looks right (or something to that effect).\nHow confident are you that this algorithm works well for custom JUnit 4 runners?", "author": "sbrannen", "createdAt": "2021-01-05T13:46:31Z", "path": "junit-vintage-engine/src/main/java/org/junit/vintage/engine/descriptor/DescriptionUtils.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junit.vintage.engine.descriptor;\n+\n+import org.apiguardian.api.API;\n+import org.junit.runner.Description;\n+\n+@API(status = API.Status.INTERNAL, since = \"5.8\")\n+public class DescriptionUtils {\n+\n+\tprivate DescriptionUtils() {\n+\t}\n+\n+\tpublic static String getMethodName(Description description) {", "originalCommit": "266e8f7249e0d1182b5e50e355bf4ac1840d91e4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzM3ODI0Mw==", "url": "https://github.com/junit-team/junit5/pull/2460#discussion_r553378243", "bodyText": "If the regex works for custom runners (it's hardcoded in Description), so should this custom algorithm.", "author": "marcphilipp", "createdAt": "2021-01-07T14:56:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTk0MDkyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzg4MTgwNg==", "url": "https://github.com/junit-team/junit5/pull/2460#discussion_r553881806", "bodyText": "OK.", "author": "sbrannen", "createdAt": "2021-01-08T11:06:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTk0MDkyNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTk0MjA2OA==", "url": "https://github.com/junit-team/junit5/pull/2460#discussion_r551942068", "bodyText": "Did we decide on Ant-style pattern matching for wildcards in the consumers attribute?\nI honestly don't recall.", "author": "sbrannen", "createdAt": "2021-01-05T13:48:35Z", "path": "junit-vintage-engine/src/main/java/org/junit/vintage/engine/discovery/IsPotentialJUnit4TestClass.java", "diffHunk": "@@ -10,16 +10,20 @@\n \n package org.junit.vintage.engine.discovery;\n \n+import static org.apiguardian.api.API.Status.INTERNAL;\n import static org.junit.platform.commons.util.ReflectionUtils.isAbstract;\n import static org.junit.platform.commons.util.ReflectionUtils.isInnerClass;\n import static org.junit.platform.commons.util.ReflectionUtils.isPublic;\n \n import java.util.function.Predicate;\n \n+import org.apiguardian.api.API;\n+\n /**\n  * @since 4.12\n  */\n-class IsPotentialJUnit4TestClass implements Predicate<Class<?>> {\n+@API(status = INTERNAL, since = \"5.8\", consumers = \"org.junit.vintage.**\")", "originalCommit": "266e8f7249e0d1182b5e50e355bf4ac1840d91e4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzM3ODY0MA==", "url": "https://github.com/junit-team/junit5/pull/2460#discussion_r553378640", "bodyText": "I don't think we made a decision but I figured this would at least be unambiguous.", "author": "marcphilipp", "createdAt": "2021-01-07T14:56:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTk0MjA2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzg4MjUzNg==", "url": "https://github.com/junit-team/junit5/pull/2460#discussion_r553882536", "bodyText": "Fair enough. We can certainly leave it like for now and change it later if necessary based on tooling support or clearer specifications in API Guardian.", "author": "sbrannen", "createdAt": "2021-01-08T11:08:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTk0MjA2OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTk0NDA0Nw==", "url": "https://github.com/junit-team/junit5/pull/2460#discussion_r551944047", "bodyText": "At a first glance, this looked a bit suspect, but I suppose that VintageTestDescriptor#getType() will never conceivably return Type.CONTAINER_AND_TEST (not even in a future release of Vintage) -- right?", "author": "sbrannen", "createdAt": "2021-01-05T13:52:20Z", "path": "junit-vintage-engine/src/main/java/org/junit/vintage/engine/discovery/RunnerTestDescriptorPostProcessor.java", "diffHunk": "@@ -35,18 +35,17 @@\n \n \tprivate final UniqueIdReader uniqueIdReader = new UniqueIdReader();\n \tprivate final UniqueIdStringifier uniqueIdStringifier = new UniqueIdStringifier();\n-\tprivate final TestSourceProvider testSourceProvider;\n-\n-\tpublic RunnerTestDescriptorPostProcessor(TestSourceProvider testSourceProvider) {\n-\t\tthis.testSourceProvider = testSourceProvider;\n-\t}\n+\tprivate final TestSourceProvider testSourceProvider = new TestSourceProvider();\n \n \tvoid applyFiltersAndCreateDescendants(RunnerTestDescriptor runnerTestDescriptor) {\n \t\taddChildrenRecursively(runnerTestDescriptor);\n \t\trunnerTestDescriptor.applyFilters(this::addChildrenRecursively);\n \t}\n \n \tprivate void addChildrenRecursively(VintageTestDescriptor parent) {\n+\t\tif (parent.getDescription().isTest()) {", "originalCommit": "266e8f7249e0d1182b5e50e355bf4ac1840d91e4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzM3OTA0Mg==", "url": "https://github.com/junit-team/junit5/pull/2460#discussion_r553379042", "bodyText": "No, and Description.isTest() returns true iff it doesn't have children which is what the rest of this method is about.", "author": "marcphilipp", "createdAt": "2021-01-07T14:57:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTk0NDA0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzg4MTk4Mw==", "url": "https://github.com/junit-team/junit5/pull/2460#discussion_r553881983", "bodyText": "OK", "author": "sbrannen", "createdAt": "2021-01-08T11:07:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTk0NDA0Nw=="}], "type": "inlineReview"}, {"oid": "6abaa4fab1f7a1718704488f0f8a44e3dd843614", "url": "https://github.com/junit-team/junit5/commit/6abaa4fab1f7a1718704488f0f8a44e3dd843614", "message": "Jupiter: Don't retain dynamic TestDescriptors\n\nIn order to allow them to be garbage collected, dynamic test descriptors\nare no longer added to their parent\u2019s list of children. This is fine\nbecause they were never used in that list.", "committedDate": "2021-01-08T19:11:54Z", "type": "commit"}, {"oid": "3ad676da00ebd2147abddbe376d850352847b68b", "url": "https://github.com/junit-team/junit5/commit/3ad676da00ebd2147abddbe376d850352847b68b", "message": "Platform: Don't store String representation of unique IDs\n\nThis reduces the memory overhead of each `TestIdentifier` and each\n`UniqueId`.", "committedDate": "2021-01-08T19:11:54Z", "type": "commit"}, {"oid": "afe01a44e61cbe2196fa378f97a483acfce84544", "url": "https://github.com/junit-team/junit5/commit/afe01a44e61cbe2196fa378f97a483acfce84544", "message": "Platform: Link to undeprecated LegacyReportingUtils", "committedDate": "2021-01-08T19:11:55Z", "type": "commit"}, {"oid": "f06491f0c57cbd4d00ad710bb3a256310fe37394", "url": "https://github.com/junit-team/junit5/commit/f06491f0c57cbd4d00ad710bb3a256310fe37394", "message": "Platform: Avoid large number of empty LinkedHashSets\n\nInstead of using a `LinkedHashSet` for empty or single-element sets of\ntags, we now use the immutable empty set for the most common case of no\ntags and `Collections.singleton` which is more memory efficient for\nSingle tag sets.", "committedDate": "2021-01-08T19:11:55Z", "type": "commit"}, {"oid": "08d2f898b741678b1bb0c5af6e34a28c6ac3f817", "url": "https://github.com/junit-team/junit5/commit/08d2f898b741678b1bb0c5af6e34a28c6ac3f817", "message": "Platform: Avoid wasting memory from unnecessarily large ArrayLists\n\nThe list of segments of a `UniqueId` is immutable. Prior to this commit,\nwe were using an unsized `ArrayList` to store them which was wasteful\nsince the backing array was often too large.", "committedDate": "2021-01-08T19:11:55Z", "type": "commit"}, {"oid": "916732da5a538b299dc0236aa49c61c998cbfe07", "url": "https://github.com/junit-team/junit5/commit/916732da5a538b299dc0236aa49c61c998cbfe07", "message": "Platform: Avoid storing all returned futures\n\nInstead of storing all `Future` instances we now only store those that\nAre not yet finished.", "committedDate": "2021-01-08T19:11:55Z", "type": "commit"}, {"oid": "442e0e4cf1b43458600458177e8461f173ae7117", "url": "https://github.com/junit-team/junit5/commit/442e0e4cf1b43458600458177e8461f173ae7117", "message": "Vintage: Avoid evaluating regex if possible\n\n`Description.getMethod()` evaluates a regex every time it is called\nwhich is expensive for large test suites. `DescriptionUtils` now tries\ncomputing it without evaluating a regex first and only falls back on\n`Description.getMethod()` if the display name does not look as\nexpected.", "committedDate": "2021-01-08T19:11:55Z", "type": "commit"}, {"oid": "67093e15060a69220e45a07e0aa6aeff86a9bd42", "url": "https://github.com/junit-team/junit5/commit/67093e15060a69220e45a07e0aa6aeff86a9bd42", "message": "Vintage: Cache test sources by description\n\nTest sources are now cached by description which avoids the overhead of\ncreating multiple instances for the same method, e.g. for parameterized\ntests or generative test suites that include the same class multiple\ntimes with different configurations.", "committedDate": "2021-01-08T19:11:55Z", "type": "commit"}, {"oid": "be2921f965ba2becafcbd72b75564c2a901ea92c", "url": "https://github.com/junit-team/junit5/commit/be2921f965ba2becafcbd72b75564c2a901ea92c", "message": "Vintage: Avoid allocation for descriptions without children\n\nThis eliminates allocation overhead for the most common case where a\n`Description` represents a test, i.e. does not have children.", "committedDate": "2021-01-08T19:11:56Z", "type": "commit"}, {"oid": "cfc73e5bead2018cbaa7ff1ca9fc70b9f06d7aa5", "url": "https://github.com/junit-team/junit5/commit/cfc73e5bead2018cbaa7ff1ca9fc70b9f06d7aa5", "message": "Vintage: Allow garbage collecting executed runners\n\nRunnerTestDescriptors can now be garbage collected after they have been\nexecuted because they are now removed from the list of children of the\nengine descriptor.", "committedDate": "2021-01-08T19:11:56Z", "type": "commit"}, {"oid": "b1558b9a7475e8291ce33023d8fa9fcf8a64cc1f", "url": "https://github.com/junit-team/junit5/commit/b1558b9a7475e8291ce33023d8fa9fcf8a64cc1f", "message": "Platform: Avoid SerializedForm reference\n\nPrior to this commit each `TestIdentifier` instance required memory for\nstoring a `null` reference.", "committedDate": "2021-01-08T19:11:56Z", "type": "commit"}, {"oid": "092751ffc44c0ad4666a59a4732771d02803d87e", "url": "https://github.com/junit-team/junit5/commit/092751ffc44c0ad4666a59a4732771d02803d87e", "message": "Document memory improvements in release notes", "committedDate": "2021-01-08T19:27:24Z", "type": "commit"}, {"oid": "092751ffc44c0ad4666a59a4732771d02803d87e", "url": "https://github.com/junit-team/junit5/commit/092751ffc44c0ad4666a59a4732771d02803d87e", "message": "Document memory improvements in release notes", "committedDate": "2021-01-08T19:27:24Z", "type": "forcePushed"}]}