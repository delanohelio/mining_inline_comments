{"pr_number": 2143, "pr_title": "Upgrade to junit:junit:4.13", "pr_createdAt": "2020-01-04T20:24:39Z", "pr_url": "https://github.com/junit-team/junit5/pull/2143", "timeline": [{"oid": "c6984c08ea9c9ba76c78c569049146447de530cf", "url": "https://github.com/junit-team/junit5/commit/c6984c08ea9c9ba76c78c569049146447de530cf", "message": "Upgrade to junit:junit:4.13\n\n- Publish 4.13 as required version in POM/Gradle Module Metadata\n- Use [4.12,5.0) for package imports from OSGi", "committedDate": "2020-01-05T13:32:20Z", "type": "commit"}, {"oid": "c6eb60b463c7c284e04ace98d05a68856b5c1582", "url": "https://github.com/junit-team/junit5/commit/c6eb60b463c7c284e04ace98d05a68856b5c1582", "message": "Move JUnitPlatformRunnerTests to junit-platform-runner project", "committedDate": "2020-01-05T13:32:20Z", "type": "commit"}, {"oid": "bcb9bb9852e1edd84d880b35bd445d2529ece79e", "url": "https://github.com/junit-team/junit5/commit/bcb9bb9852e1edd84d880b35bd445d2529ece79e", "message": "Polish OSGi build checks\n\n- Run verifyOSGi later (as part of check)\n- Use custom osgiVerification configuration instead of\n  testRuntimeClasspath\n- Rename verifyOSGiProperties task to osgiProperties", "committedDate": "2020-01-05T13:32:21Z", "type": "forcePushed"}, {"oid": "bfbf157e3bf31ff46711511a4b9b84882e473d81", "url": "https://github.com/junit-team/junit5/commit/bfbf157e3bf31ff46711511a4b9b84882e473d81", "message": "Test migration support and runner against 4.12 and 4.13", "committedDate": "2020-01-05T13:39:14Z", "type": "commit"}, {"oid": "3c504df5a8f58baa13a3e919f0ea70c963e94301", "url": "https://github.com/junit-team/junit5/commit/3c504df5a8f58baa13a3e919f0ea70c963e94301", "message": "Extract OSGi setup into separate build script", "committedDate": "2020-01-05T13:39:14Z", "type": "commit"}, {"oid": "f07c3ac7ad74b3a9e8628dfe0fb93a0eee170f6b", "url": "https://github.com/junit-team/junit5/commit/f07c3ac7ad74b3a9e8628dfe0fb93a0eee170f6b", "message": "Polish OSGi build checks\n\n- Run verifyOSGi later (as part of check)\n- Use custom osgiVerification configuration instead of\n  testRuntimeClasspath\n- Rename verifyOSGiProperties task to osgiProperties", "committedDate": "2020-01-05T13:39:14Z", "type": "commit"}, {"oid": "f07c3ac7ad74b3a9e8628dfe0fb93a0eee170f6b", "url": "https://github.com/junit-team/junit5/commit/f07c3ac7ad74b3a9e8628dfe0fb93a0eee170f6b", "message": "Polish OSGi build checks\n\n- Run verifyOSGi later (as part of check)\n- Use custom osgiVerification configuration instead of\n  testRuntimeClasspath\n- Rename verifyOSGiProperties task to osgiProperties", "committedDate": "2020-01-05T13:39:14Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA5ODQ5NA==", "url": "https://github.com/junit-team/junit5/pull/2143#discussion_r363098494", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t# This tells bnd to ignore classes it files in `META-INF/versions/`\n          \n          \n            \n            \t\t\t# This tells bnd to ignore classes it finds in `META-INF/versions/`", "author": "sbrannen", "createdAt": "2020-01-05T15:00:45Z", "path": "buildSrc/src/main/kotlin/osgi-conventions.gradle.kts", "diffHunk": "@@ -0,0 +1,114 @@\n+import aQute.bnd.gradle.BundleTaskConvention\n+import aQute.bnd.gradle.FileSetRepositoryConvention\n+import aQute.bnd.gradle.Resolve\n+\n+plugins {\n+\t`java-library`\n+}\n+\n+// This task enhances `jar` and `shadowJar` tasks with the bnd\n+// `BundleTaskConvention` convention which allows for generating OSGi\n+// metadata into the jar\n+tasks.withType<Jar>().matching {\n+\ttask: Jar -> task.name == \"jar\" || task.name == \"shadowJar\"\n+}.configureEach {\n+\tval btc = BundleTaskConvention(this)\n+\n+\t// These are bnd instructions necessary for generating OSGi metadata.\n+\t// We've generalized these so that they are widely applicable limiting\n+\t// module configurations to special cases.\n+\tbtc.setBnd(\"\"\"\n+\t\t\t# These are the general rules for package imports.\n+\t\t\tImport-Package: \\\n+\t\t\t\t!org.apiguardian.api,\\\n+\t\t\t\torg.junit.platform.commons.logging;status=INTERNAL,\\\n+\t\t\t\tkotlin.*;resolution:=\"optional\",\\\n+\t\t\t\t*\n+\n+\t\t\t# This tells bnd not to complain if a module doesn't actually import\n+\t\t\t# the kotlin packages, but enough modules do to make it a default.\n+\t\t\t-fixupmessages.kotlin.import: \"Unused Import-Package instructions: \\\\[kotlin.*\\\\]\";is:=ignore\n+\n+\t\t\t# This tells bnd to ignore classes it files in `META-INF/versions/`", "originalCommit": "f07c3ac7ad74b3a9e8628dfe0fb93a0eee170f6b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA5ODUzOQ==", "url": "https://github.com/junit-team/junit5/pull/2143#discussion_r363098539", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            // Bnd's Resolve task uses a properties file for it's configuration. This\n          \n          \n            \n            // Bnd's Resolve task uses a properties file for its configuration. This", "author": "sbrannen", "createdAt": "2020-01-05T15:01:26Z", "path": "buildSrc/src/main/kotlin/osgi-conventions.gradle.kts", "diffHunk": "@@ -0,0 +1,114 @@\n+import aQute.bnd.gradle.BundleTaskConvention\n+import aQute.bnd.gradle.FileSetRepositoryConvention\n+import aQute.bnd.gradle.Resolve\n+\n+plugins {\n+\t`java-library`\n+}\n+\n+// This task enhances `jar` and `shadowJar` tasks with the bnd\n+// `BundleTaskConvention` convention which allows for generating OSGi\n+// metadata into the jar\n+tasks.withType<Jar>().matching {\n+\ttask: Jar -> task.name == \"jar\" || task.name == \"shadowJar\"\n+}.configureEach {\n+\tval btc = BundleTaskConvention(this)\n+\n+\t// These are bnd instructions necessary for generating OSGi metadata.\n+\t// We've generalized these so that they are widely applicable limiting\n+\t// module configurations to special cases.\n+\tbtc.setBnd(\"\"\"\n+\t\t\t# These are the general rules for package imports.\n+\t\t\tImport-Package: \\\n+\t\t\t\t!org.apiguardian.api,\\\n+\t\t\t\torg.junit.platform.commons.logging;status=INTERNAL,\\\n+\t\t\t\tkotlin.*;resolution:=\"optional\",\\\n+\t\t\t\t*\n+\n+\t\t\t# This tells bnd not to complain if a module doesn't actually import\n+\t\t\t# the kotlin packages, but enough modules do to make it a default.\n+\t\t\t-fixupmessages.kotlin.import: \"Unused Import-Package instructions: \\\\[kotlin.*\\\\]\";is:=ignore\n+\n+\t\t\t# This tells bnd to ignore classes it files in `META-INF/versions/`\n+\t\t\t# because bnd doesn't yet support multi-release jars.\n+\t\t\t-fixupmessages.wrong.dir: \"Classes found in the wrong directory: \\\\{META-INF/versions/...\";is:=ignore\n+\n+\t\t\t# Don't scan for Class.forName package imports.\n+\t\t\t# See https://bnd.bndtools.org/instructions/noclassforname.html\n+\t\t\t-noclassforname: true\n+\n+\t\t\t# Don't add all the extra headers bnd normally adds.\n+\t\t\t# See https://bnd.bndtools.org/instructions/noextraheaders.html\n+\t\t\t-noextraheaders: true\n+\n+\t\t\t# Don't add the Private-Package header.\n+\t\t\t# See https://bnd.bndtools.org/instructions/removeheaders.html\n+\t\t\t-removeheaders: Private-Package\n+\n+\t\t\t# Add the custom buildSrc/src/main/kotlin/APIGuardianAnnotations.kt\n+\t\t\t# plugin to bnd\n+\t\t\t-plugin.apiguardian.annotations: ${APIGuardianAnnotations::class.qualifiedName}\n+\n+\t\t\t# Instruct the APIGuardianAnnotations how to operate.\n+\t\t\t# See https://bnd.bndtools.org/instructions/export-apiguardian.html\n+\t\t\t-export-apiguardian: *;version=${project.version}\n+\t\t\"\"\")\n+\n+\t// Add the convention to the jar task\n+\tconvention.plugins[\"bundle\"] = btc\n+\n+\tdoLast {\n+\t\t// Do the actual work putting OSGi stuff in the jar.\n+\t\tbtc.buildBundle()\n+\t}\n+}\n+\n+val osgiPropertiesFile = file(\"$buildDir/verifyOSGiProperties.bndrun\")\n+\n+// Bnd's Resolve task uses a properties file for it's configuration. This", "originalCommit": "f07c3ac7ad74b3a9e8628dfe0fb93a0eee170f6b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA5ODU2NQ==", "url": "https://github.com/junit-team/junit5/pull/2143#discussion_r363098565", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            // that it's metadata is valid. If the metadata is invalid this task will\n          \n          \n            \n            // that its metadata is valid. If the metadata is invalid this task will", "author": "sbrannen", "createdAt": "2020-01-05T15:01:45Z", "path": "buildSrc/src/main/kotlin/osgi-conventions.gradle.kts", "diffHunk": "@@ -0,0 +1,114 @@\n+import aQute.bnd.gradle.BundleTaskConvention\n+import aQute.bnd.gradle.FileSetRepositoryConvention\n+import aQute.bnd.gradle.Resolve\n+\n+plugins {\n+\t`java-library`\n+}\n+\n+// This task enhances `jar` and `shadowJar` tasks with the bnd\n+// `BundleTaskConvention` convention which allows for generating OSGi\n+// metadata into the jar\n+tasks.withType<Jar>().matching {\n+\ttask: Jar -> task.name == \"jar\" || task.name == \"shadowJar\"\n+}.configureEach {\n+\tval btc = BundleTaskConvention(this)\n+\n+\t// These are bnd instructions necessary for generating OSGi metadata.\n+\t// We've generalized these so that they are widely applicable limiting\n+\t// module configurations to special cases.\n+\tbtc.setBnd(\"\"\"\n+\t\t\t# These are the general rules for package imports.\n+\t\t\tImport-Package: \\\n+\t\t\t\t!org.apiguardian.api,\\\n+\t\t\t\torg.junit.platform.commons.logging;status=INTERNAL,\\\n+\t\t\t\tkotlin.*;resolution:=\"optional\",\\\n+\t\t\t\t*\n+\n+\t\t\t# This tells bnd not to complain if a module doesn't actually import\n+\t\t\t# the kotlin packages, but enough modules do to make it a default.\n+\t\t\t-fixupmessages.kotlin.import: \"Unused Import-Package instructions: \\\\[kotlin.*\\\\]\";is:=ignore\n+\n+\t\t\t# This tells bnd to ignore classes it files in `META-INF/versions/`\n+\t\t\t# because bnd doesn't yet support multi-release jars.\n+\t\t\t-fixupmessages.wrong.dir: \"Classes found in the wrong directory: \\\\{META-INF/versions/...\";is:=ignore\n+\n+\t\t\t# Don't scan for Class.forName package imports.\n+\t\t\t# See https://bnd.bndtools.org/instructions/noclassforname.html\n+\t\t\t-noclassforname: true\n+\n+\t\t\t# Don't add all the extra headers bnd normally adds.\n+\t\t\t# See https://bnd.bndtools.org/instructions/noextraheaders.html\n+\t\t\t-noextraheaders: true\n+\n+\t\t\t# Don't add the Private-Package header.\n+\t\t\t# See https://bnd.bndtools.org/instructions/removeheaders.html\n+\t\t\t-removeheaders: Private-Package\n+\n+\t\t\t# Add the custom buildSrc/src/main/kotlin/APIGuardianAnnotations.kt\n+\t\t\t# plugin to bnd\n+\t\t\t-plugin.apiguardian.annotations: ${APIGuardianAnnotations::class.qualifiedName}\n+\n+\t\t\t# Instruct the APIGuardianAnnotations how to operate.\n+\t\t\t# See https://bnd.bndtools.org/instructions/export-apiguardian.html\n+\t\t\t-export-apiguardian: *;version=${project.version}\n+\t\t\"\"\")\n+\n+\t// Add the convention to the jar task\n+\tconvention.plugins[\"bundle\"] = btc\n+\n+\tdoLast {\n+\t\t// Do the actual work putting OSGi stuff in the jar.\n+\t\tbtc.buildBundle()\n+\t}\n+}\n+\n+val osgiPropertiesFile = file(\"$buildDir/verifyOSGiProperties.bndrun\")\n+\n+// Bnd's Resolve task uses a properties file for it's configuration. This\n+// task writes out the properties necessary for it to verify the OSGi\n+// metadata.\n+val osgiProperties by tasks.registering(WriteProperties::class) {\n+\toutputFile = osgiPropertiesFile\n+\tproperty(\"-standalone\", true)\n+\tproperty(\"-runee\", \"JavaSE-${Versions.jvmTarget}\")\n+\tproperty(\"-runrequires\", \"osgi.identity;filter:='(osgi.identity=${project.name})'\")\n+\tproperty(\"-runsystempackages\", \"jdk.internal.misc,sun.misc\")\n+}\n+\n+val osgiVerification by configurations.creating {\n+\textendsFrom(configurations.runtimeClasspath.get())\n+}\n+\n+// Bnd's Resolve task is what verifies that a jar can be used in OSGi and\n+// that it's metadata is valid. If the metadata is invalid this task will", "originalCommit": "f07c3ac7ad74b3a9e8628dfe0fb93a0eee170f6b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA5ODYxNg==", "url": "https://github.com/junit-team/junit5/pull/2143#discussion_r363098616", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            // afterEvaluate.\n          \n          \n            \n            // after evaluation.", "author": "sbrannen", "createdAt": "2020-01-05T15:02:27Z", "path": "buildSrc/src/main/kotlin/osgi-conventions.gradle.kts", "diffHunk": "@@ -0,0 +1,114 @@\n+import aQute.bnd.gradle.BundleTaskConvention\n+import aQute.bnd.gradle.FileSetRepositoryConvention\n+import aQute.bnd.gradle.Resolve\n+\n+plugins {\n+\t`java-library`\n+}\n+\n+// This task enhances `jar` and `shadowJar` tasks with the bnd\n+// `BundleTaskConvention` convention which allows for generating OSGi\n+// metadata into the jar\n+tasks.withType<Jar>().matching {\n+\ttask: Jar -> task.name == \"jar\" || task.name == \"shadowJar\"\n+}.configureEach {\n+\tval btc = BundleTaskConvention(this)\n+\n+\t// These are bnd instructions necessary for generating OSGi metadata.\n+\t// We've generalized these so that they are widely applicable limiting\n+\t// module configurations to special cases.\n+\tbtc.setBnd(\"\"\"\n+\t\t\t# These are the general rules for package imports.\n+\t\t\tImport-Package: \\\n+\t\t\t\t!org.apiguardian.api,\\\n+\t\t\t\torg.junit.platform.commons.logging;status=INTERNAL,\\\n+\t\t\t\tkotlin.*;resolution:=\"optional\",\\\n+\t\t\t\t*\n+\n+\t\t\t# This tells bnd not to complain if a module doesn't actually import\n+\t\t\t# the kotlin packages, but enough modules do to make it a default.\n+\t\t\t-fixupmessages.kotlin.import: \"Unused Import-Package instructions: \\\\[kotlin.*\\\\]\";is:=ignore\n+\n+\t\t\t# This tells bnd to ignore classes it files in `META-INF/versions/`\n+\t\t\t# because bnd doesn't yet support multi-release jars.\n+\t\t\t-fixupmessages.wrong.dir: \"Classes found in the wrong directory: \\\\{META-INF/versions/...\";is:=ignore\n+\n+\t\t\t# Don't scan for Class.forName package imports.\n+\t\t\t# See https://bnd.bndtools.org/instructions/noclassforname.html\n+\t\t\t-noclassforname: true\n+\n+\t\t\t# Don't add all the extra headers bnd normally adds.\n+\t\t\t# See https://bnd.bndtools.org/instructions/noextraheaders.html\n+\t\t\t-noextraheaders: true\n+\n+\t\t\t# Don't add the Private-Package header.\n+\t\t\t# See https://bnd.bndtools.org/instructions/removeheaders.html\n+\t\t\t-removeheaders: Private-Package\n+\n+\t\t\t# Add the custom buildSrc/src/main/kotlin/APIGuardianAnnotations.kt\n+\t\t\t# plugin to bnd\n+\t\t\t-plugin.apiguardian.annotations: ${APIGuardianAnnotations::class.qualifiedName}\n+\n+\t\t\t# Instruct the APIGuardianAnnotations how to operate.\n+\t\t\t# See https://bnd.bndtools.org/instructions/export-apiguardian.html\n+\t\t\t-export-apiguardian: *;version=${project.version}\n+\t\t\"\"\")\n+\n+\t// Add the convention to the jar task\n+\tconvention.plugins[\"bundle\"] = btc\n+\n+\tdoLast {\n+\t\t// Do the actual work putting OSGi stuff in the jar.\n+\t\tbtc.buildBundle()\n+\t}\n+}\n+\n+val osgiPropertiesFile = file(\"$buildDir/verifyOSGiProperties.bndrun\")\n+\n+// Bnd's Resolve task uses a properties file for it's configuration. This\n+// task writes out the properties necessary for it to verify the OSGi\n+// metadata.\n+val osgiProperties by tasks.registering(WriteProperties::class) {\n+\toutputFile = osgiPropertiesFile\n+\tproperty(\"-standalone\", true)\n+\tproperty(\"-runee\", \"JavaSE-${Versions.jvmTarget}\")\n+\tproperty(\"-runrequires\", \"osgi.identity;filter:='(osgi.identity=${project.name})'\")\n+\tproperty(\"-runsystempackages\", \"jdk.internal.misc,sun.misc\")\n+}\n+\n+val osgiVerification by configurations.creating {\n+\textendsFrom(configurations.runtimeClasspath.get())\n+}\n+\n+// Bnd's Resolve task is what verifies that a jar can be used in OSGi and\n+// that it's metadata is valid. If the metadata is invalid this task will\n+// fail.\n+val verifyOSGi by tasks.registering(Resolve::class) {\n+\tdependsOn(osgiProperties)\n+\tsetBndrun(osgiPropertiesFile)\n+\tisReportOptional = false\n+\twithConvention(FileSetRepositoryConvention::class) {\n+\n+\t\t// By default bnd will use jars found in:\n+\t\t// 1. project.sourceSets.main.runtimeClasspath\n+\t\t// 2. project.configurations.archives.artifacts.files\n+\t\t// to validate the metadata.\n+\t\t// This adds jars defined in `osgiVerification` also so that bnd\n+\t\t// can use them to validate the metadata without causing those to\n+\t\t// end up in the dependencies of those projects.\n+\t\tbundles(osgiVerification)\n+\t}\n+}\n+\n+tasks.check {\n+\tdependsOn(verifyOSGi)\n+}\n+\n+// The ${project.description}, for some odd reason, is only available\n+// afterEvaluate.", "originalCommit": "f07c3ac7ad74b3a9e8628dfe0fb93a0eee170f6b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "e3a57469aecd05a38685ed283d727e82bae39648", "url": "https://github.com/junit-team/junit5/commit/e3a57469aecd05a38685ed283d727e82bae39648", "message": "Fix typos\n\nCo-Authored-By: Sam Brannen <sbrannen@pivotal.io>", "committedDate": "2020-01-05T19:34:32Z", "type": "commit"}]}