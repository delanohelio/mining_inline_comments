{"pr_number": 770, "pr_title": "Add Adhese bidder", "pr_createdAt": "2020-06-18T17:31:36Z", "pr_url": "https://github.com/prebid/prebid-server-java/pull/770", "timeline": [{"oid": "0b4a1b726f968f423e23b718084ec4b553f2ccfb", "url": "https://github.com/prebid/prebid-server-java/commit/0b4a1b726f968f423e23b718084ec4b553f2ccfb", "message": "Add implementation of AdheseBidder and tests", "committedDate": "2020-06-18T17:25:52Z", "type": "commit"}, {"oid": "1673349c7611debc3d95d0c6afeaa56c4f14f417", "url": "https://github.com/prebid/prebid-server-java/commit/1673349c7611debc3d95d0c6afeaa56c4f14f417", "message": "Merge branch 'master' into add-adhese-bidder", "committedDate": "2020-06-18T17:39:11Z", "type": "commit"}, {"oid": "f7af17bd9765d255c458688ae543f06c509eea9c", "url": "https://github.com/prebid/prebid-server-java/commit/f7af17bd9765d255c458688ae543f06c509eea9c", "message": "Add ccpa to configuration file", "committedDate": "2020-06-18T17:48:19Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODI5NzcyMA==", "url": "https://github.com/prebid/prebid-server-java/pull/770#discussion_r448297720", "bodyText": "{{AccountId}} - to Constant", "author": "DGarbar", "createdAt": "2020-07-01T11:26:16Z", "path": "src/main/java/org/prebid/server/bidder/adhese/AdheseBidder.java", "diffHunk": "@@ -0,0 +1,342 @@\n+package org.prebid.server.bidder.adhese;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.adhese.model.AdheseBid;\n+import org.prebid.server.bidder.adhese.model.AdheseOriginData;\n+import org.prebid.server.bidder.adhese.model.AdheseResponseExt;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.ExtUser;\n+import org.prebid.server.proto.openrtb.ext.request.adhese.ExtImpAdhese;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.math.BigDecimal;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.TreeMap;\n+import java.util.stream.Collectors;\n+import java.util.stream.StreamSupport;\n+\n+public class AdheseBidder implements Bidder<Void> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpAdhese>> ADHESE_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpAdhese>>() {\n+            };\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public AdheseBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<Void>>> makeHttpRequests(BidRequest request) {\n+        if (CollectionUtils.isEmpty(request.getImp())) {\n+            return Result.emptyWithError(BidderError.badInput(\"No impression in the bid request\"));\n+        }\n+\n+        ExtImpAdhese extImpAdhese;\n+        try {\n+            extImpAdhese = parseImpExt(request.getImp().get(0));\n+        } catch (PreBidException e) {\n+            return Result.emptyWithError(BidderError.badInput(e.getMessage()));\n+        }\n+\n+        final String uri = buildUrl(request, endpointUrl, extImpAdhese);\n+\n+        return Result.of(Collections.singletonList(\n+                HttpRequest.<Void>builder()\n+                        .method(HttpMethod.GET)\n+                        .uri(uri)\n+                        .body(null)\n+                        .headers(HttpUtil.headers())\n+                        .payload(null)\n+                        .build()),\n+                Collections.emptyList());\n+    }\n+\n+    private ExtImpAdhese parseImpExt(Imp imp) {\n+        try {\n+            return mapper.mapper().convertValue(imp.getExt(), ADHESE_EXT_TYPE_REFERENCE).getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+    }\n+\n+    private String buildUrl(BidRequest request, String endpointUrl, ExtImpAdhese extImpAdhese) {\n+        final String uri = endpointUrl.replace(\"{{AccountId}}\", extImpAdhese.getAccount());", "originalCommit": "f7af17bd9765d255c458688ae543f06c509eea9c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODMxNzMyNA==", "url": "https://github.com/prebid/prebid-server-java/pull/770#discussion_r448317324", "bodyText": "It can be simplified by\n     return new TreeMap<>(\n                mapper.mapper().convertValue(keywords, new TypeReference<Map<String, List<String>>>() {\n                }));\n\n(Extract Type Rederence to constant and cleanUp)\nIn go they also expecting map of lists, but it a bit hidden.", "author": "DGarbar", "createdAt": "2020-07-01T12:06:51Z", "path": "src/main/java/org/prebid/server/bidder/adhese/AdheseBidder.java", "diffHunk": "@@ -0,0 +1,342 @@\n+package org.prebid.server.bidder.adhese;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.adhese.model.AdheseBid;\n+import org.prebid.server.bidder.adhese.model.AdheseOriginData;\n+import org.prebid.server.bidder.adhese.model.AdheseResponseExt;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.ExtUser;\n+import org.prebid.server.proto.openrtb.ext.request.adhese.ExtImpAdhese;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.math.BigDecimal;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.TreeMap;\n+import java.util.stream.Collectors;\n+import java.util.stream.StreamSupport;\n+\n+public class AdheseBidder implements Bidder<Void> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpAdhese>> ADHESE_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpAdhese>>() {\n+            };\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public AdheseBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<Void>>> makeHttpRequests(BidRequest request) {\n+        if (CollectionUtils.isEmpty(request.getImp())) {\n+            return Result.emptyWithError(BidderError.badInput(\"No impression in the bid request\"));\n+        }\n+\n+        ExtImpAdhese extImpAdhese;\n+        try {\n+            extImpAdhese = parseImpExt(request.getImp().get(0));\n+        } catch (PreBidException e) {\n+            return Result.emptyWithError(BidderError.badInput(e.getMessage()));\n+        }\n+\n+        final String uri = buildUrl(request, endpointUrl, extImpAdhese);\n+\n+        return Result.of(Collections.singletonList(\n+                HttpRequest.<Void>builder()\n+                        .method(HttpMethod.GET)\n+                        .uri(uri)\n+                        .body(null)\n+                        .headers(HttpUtil.headers())\n+                        .payload(null)\n+                        .build()),\n+                Collections.emptyList());\n+    }\n+\n+    private ExtImpAdhese parseImpExt(Imp imp) {\n+        try {\n+            return mapper.mapper().convertValue(imp.getExt(), ADHESE_EXT_TYPE_REFERENCE).getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+    }\n+\n+    private String buildUrl(BidRequest request, String endpointUrl, ExtImpAdhese extImpAdhese) {\n+        final String uri = endpointUrl.replace(\"{{AccountId}}\", extImpAdhese.getAccount());\n+        final String slotParameter = String.format(\"/sl%s-%s\", HttpUtil.encodeUrl(extImpAdhese.getLocation()),\n+                HttpUtil.encodeUrl(extImpAdhese.getFormat()));\n+\n+        return String.format(\"%s%s%s%s%s\", uri, slotParameter, getTargetParameters(extImpAdhese),\n+                getGdprParameter(request), getRefererParameter(request));\n+    }\n+\n+    private String getTargetParameters(ExtImpAdhese extImpAdhese) {\n+        if (extImpAdhese.getKeywords().isNull()) {\n+            return \"\";\n+        }\n+        StringBuilder parametersAsString = new StringBuilder();\n+        final Map<String, List<String>> targetParameters = parseTargetParametersAndSort(extImpAdhese.getKeywords());\n+\n+        for (Map.Entry<String, List<String>> targetParametersMap : targetParameters.entrySet()) {\n+            parametersAsString.append(\"/\").append(HttpUtil.encodeUrl(targetParametersMap.getKey()));\n+            for (String parameter : targetParametersMap.getValue()) {\n+                parametersAsString.append(parameter).append(\";\");\n+            }\n+            parametersAsString.deleteCharAt(parametersAsString.lastIndexOf(\";\"));\n+        }\n+\n+        return parametersAsString.toString();\n+    }\n+\n+    private Map<String, List<String>> parseTargetParametersAndSort(JsonNode keywords) {\n+        Map<String, List<String>> sortedMap = new TreeMap<>();\n+        if (keywords != null) {\n+            Iterator<Map.Entry<String, JsonNode>> fields = keywords.fields();\n+            while (fields.hasNext()) {\n+                Map.Entry<String, JsonNode> next = fields.next();\n+                List<String> values = null;\n+                if (next.getValue() instanceof ArrayNode) {\n+                    final ArrayNode arrayNode = (ArrayNode) next.getValue();\n+                    values = StreamSupport.stream(arrayNode.spliterator(), false)\n+                            .map(JsonNode::toString)\n+                            .map(m -> m.substring(1, m.length() - 1))\n+                            .collect(Collectors.toList());\n+                }\n+                sortedMap.put(next.getKey(), values);\n+            }\n+        }\n+        return sortedMap;", "originalCommit": "f7af17bd9765d255c458688ae543f06c509eea9c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODMyMDgwNA==", "url": "https://github.com/prebid/prebid-server-java/pull/770#discussion_r448320804", "bodyText": "It can be simplified.\n        return targetParameters.entrySet().stream()\n                .map(stringListEntry -> createPartOrUrl(stringListEntry.getKey(), stringListEntry.getValue()))\n                .collect(Collectors.joining());\n    }\n\n    private String createPartOrUrl(String key, List<String> values) {\n        final String formattedValues = String.join(\";\", values);\n        return String.format(\"/%s%s\", HttpUtil.encodeUrl(key), formattedValues);\n    }", "author": "DGarbar", "createdAt": "2020-07-01T12:13:58Z", "path": "src/main/java/org/prebid/server/bidder/adhese/AdheseBidder.java", "diffHunk": "@@ -0,0 +1,342 @@\n+package org.prebid.server.bidder.adhese;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.adhese.model.AdheseBid;\n+import org.prebid.server.bidder.adhese.model.AdheseOriginData;\n+import org.prebid.server.bidder.adhese.model.AdheseResponseExt;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.ExtUser;\n+import org.prebid.server.proto.openrtb.ext.request.adhese.ExtImpAdhese;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.math.BigDecimal;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.TreeMap;\n+import java.util.stream.Collectors;\n+import java.util.stream.StreamSupport;\n+\n+public class AdheseBidder implements Bidder<Void> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpAdhese>> ADHESE_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpAdhese>>() {\n+            };\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public AdheseBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<Void>>> makeHttpRequests(BidRequest request) {\n+        if (CollectionUtils.isEmpty(request.getImp())) {\n+            return Result.emptyWithError(BidderError.badInput(\"No impression in the bid request\"));\n+        }\n+\n+        ExtImpAdhese extImpAdhese;\n+        try {\n+            extImpAdhese = parseImpExt(request.getImp().get(0));\n+        } catch (PreBidException e) {\n+            return Result.emptyWithError(BidderError.badInput(e.getMessage()));\n+        }\n+\n+        final String uri = buildUrl(request, endpointUrl, extImpAdhese);\n+\n+        return Result.of(Collections.singletonList(\n+                HttpRequest.<Void>builder()\n+                        .method(HttpMethod.GET)\n+                        .uri(uri)\n+                        .body(null)\n+                        .headers(HttpUtil.headers())\n+                        .payload(null)\n+                        .build()),\n+                Collections.emptyList());\n+    }\n+\n+    private ExtImpAdhese parseImpExt(Imp imp) {\n+        try {\n+            return mapper.mapper().convertValue(imp.getExt(), ADHESE_EXT_TYPE_REFERENCE).getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+    }\n+\n+    private String buildUrl(BidRequest request, String endpointUrl, ExtImpAdhese extImpAdhese) {\n+        final String uri = endpointUrl.replace(\"{{AccountId}}\", extImpAdhese.getAccount());\n+        final String slotParameter = String.format(\"/sl%s-%s\", HttpUtil.encodeUrl(extImpAdhese.getLocation()),\n+                HttpUtil.encodeUrl(extImpAdhese.getFormat()));\n+\n+        return String.format(\"%s%s%s%s%s\", uri, slotParameter, getTargetParameters(extImpAdhese),\n+                getGdprParameter(request), getRefererParameter(request));\n+    }\n+\n+    private String getTargetParameters(ExtImpAdhese extImpAdhese) {\n+        if (extImpAdhese.getKeywords().isNull()) {\n+            return \"\";\n+        }\n+        StringBuilder parametersAsString = new StringBuilder();\n+        final Map<String, List<String>> targetParameters = parseTargetParametersAndSort(extImpAdhese.getKeywords());\n+\n+        for (Map.Entry<String, List<String>> targetParametersMap : targetParameters.entrySet()) {\n+            parametersAsString.append(\"/\").append(HttpUtil.encodeUrl(targetParametersMap.getKey()));\n+            for (String parameter : targetParametersMap.getValue()) {\n+                parametersAsString.append(parameter).append(\";\");\n+            }\n+            parametersAsString.deleteCharAt(parametersAsString.lastIndexOf(\";\"));\n+        }\n+\n+        return parametersAsString.toString();\n+    }", "originalCommit": "f7af17bd9765d255c458688ae543f06c509eea9c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODMyMTQzMA==", "url": "https://github.com/prebid/prebid-server-java/pull/770#discussion_r448321430", "bodyText": "Extract extUser() and notice that this function can return null.\nSo you can get NPE", "author": "DGarbar", "createdAt": "2020-07-01T12:15:15Z", "path": "src/main/java/org/prebid/server/bidder/adhese/AdheseBidder.java", "diffHunk": "@@ -0,0 +1,342 @@\n+package org.prebid.server.bidder.adhese;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.adhese.model.AdheseBid;\n+import org.prebid.server.bidder.adhese.model.AdheseOriginData;\n+import org.prebid.server.bidder.adhese.model.AdheseResponseExt;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.ExtUser;\n+import org.prebid.server.proto.openrtb.ext.request.adhese.ExtImpAdhese;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.math.BigDecimal;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.TreeMap;\n+import java.util.stream.Collectors;\n+import java.util.stream.StreamSupport;\n+\n+public class AdheseBidder implements Bidder<Void> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpAdhese>> ADHESE_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpAdhese>>() {\n+            };\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public AdheseBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<Void>>> makeHttpRequests(BidRequest request) {\n+        if (CollectionUtils.isEmpty(request.getImp())) {\n+            return Result.emptyWithError(BidderError.badInput(\"No impression in the bid request\"));\n+        }\n+\n+        ExtImpAdhese extImpAdhese;\n+        try {\n+            extImpAdhese = parseImpExt(request.getImp().get(0));\n+        } catch (PreBidException e) {\n+            return Result.emptyWithError(BidderError.badInput(e.getMessage()));\n+        }\n+\n+        final String uri = buildUrl(request, endpointUrl, extImpAdhese);\n+\n+        return Result.of(Collections.singletonList(\n+                HttpRequest.<Void>builder()\n+                        .method(HttpMethod.GET)\n+                        .uri(uri)\n+                        .body(null)\n+                        .headers(HttpUtil.headers())\n+                        .payload(null)\n+                        .build()),\n+                Collections.emptyList());\n+    }\n+\n+    private ExtImpAdhese parseImpExt(Imp imp) {\n+        try {\n+            return mapper.mapper().convertValue(imp.getExt(), ADHESE_EXT_TYPE_REFERENCE).getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+    }\n+\n+    private String buildUrl(BidRequest request, String endpointUrl, ExtImpAdhese extImpAdhese) {\n+        final String uri = endpointUrl.replace(\"{{AccountId}}\", extImpAdhese.getAccount());\n+        final String slotParameter = String.format(\"/sl%s-%s\", HttpUtil.encodeUrl(extImpAdhese.getLocation()),\n+                HttpUtil.encodeUrl(extImpAdhese.getFormat()));\n+\n+        return String.format(\"%s%s%s%s%s\", uri, slotParameter, getTargetParameters(extImpAdhese),\n+                getGdprParameter(request), getRefererParameter(request));\n+    }\n+\n+    private String getTargetParameters(ExtImpAdhese extImpAdhese) {\n+        if (extImpAdhese.getKeywords().isNull()) {\n+            return \"\";\n+        }\n+        StringBuilder parametersAsString = new StringBuilder();\n+        final Map<String, List<String>> targetParameters = parseTargetParametersAndSort(extImpAdhese.getKeywords());\n+\n+        for (Map.Entry<String, List<String>> targetParametersMap : targetParameters.entrySet()) {\n+            parametersAsString.append(\"/\").append(HttpUtil.encodeUrl(targetParametersMap.getKey()));\n+            for (String parameter : targetParametersMap.getValue()) {\n+                parametersAsString.append(parameter).append(\";\");\n+            }\n+            parametersAsString.deleteCharAt(parametersAsString.lastIndexOf(\";\"));\n+        }\n+\n+        return parametersAsString.toString();\n+    }\n+\n+    private Map<String, List<String>> parseTargetParametersAndSort(JsonNode keywords) {\n+        Map<String, List<String>> sortedMap = new TreeMap<>();\n+        if (keywords != null) {\n+            Iterator<Map.Entry<String, JsonNode>> fields = keywords.fields();\n+            while (fields.hasNext()) {\n+                Map.Entry<String, JsonNode> next = fields.next();\n+                List<String> values = null;\n+                if (next.getValue() instanceof ArrayNode) {\n+                    final ArrayNode arrayNode = (ArrayNode) next.getValue();\n+                    values = StreamSupport.stream(arrayNode.spliterator(), false)\n+                            .map(JsonNode::toString)\n+                            .map(m -> m.substring(1, m.length() - 1))\n+                            .collect(Collectors.toList());\n+                }\n+                sortedMap.put(next.getKey(), values);\n+            }\n+        }\n+        return sortedMap;\n+    }\n+\n+    private String getGdprParameter(BidRequest request) {\n+        if (request.getUser() != null && StringUtils.isNotBlank(extUser(request.getUser().getExt()).getConsent())) {", "originalCommit": "f7af17bd9765d255c458688ae543f06c509eea9c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODMyMTk4NQ==", "url": "https://github.com/prebid/prebid-server-java/pull/770#discussion_r448321985", "bodyText": "Refactor with simple if, just using step by step null checks", "author": "DGarbar", "createdAt": "2020-07-01T12:16:21Z", "path": "src/main/java/org/prebid/server/bidder/adhese/AdheseBidder.java", "diffHunk": "@@ -0,0 +1,342 @@\n+package org.prebid.server.bidder.adhese;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.adhese.model.AdheseBid;\n+import org.prebid.server.bidder.adhese.model.AdheseOriginData;\n+import org.prebid.server.bidder.adhese.model.AdheseResponseExt;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.ExtUser;\n+import org.prebid.server.proto.openrtb.ext.request.adhese.ExtImpAdhese;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.math.BigDecimal;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.TreeMap;\n+import java.util.stream.Collectors;\n+import java.util.stream.StreamSupport;\n+\n+public class AdheseBidder implements Bidder<Void> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpAdhese>> ADHESE_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpAdhese>>() {\n+            };\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public AdheseBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<Void>>> makeHttpRequests(BidRequest request) {\n+        if (CollectionUtils.isEmpty(request.getImp())) {\n+            return Result.emptyWithError(BidderError.badInput(\"No impression in the bid request\"));\n+        }\n+\n+        ExtImpAdhese extImpAdhese;\n+        try {\n+            extImpAdhese = parseImpExt(request.getImp().get(0));\n+        } catch (PreBidException e) {\n+            return Result.emptyWithError(BidderError.badInput(e.getMessage()));\n+        }\n+\n+        final String uri = buildUrl(request, endpointUrl, extImpAdhese);\n+\n+        return Result.of(Collections.singletonList(\n+                HttpRequest.<Void>builder()\n+                        .method(HttpMethod.GET)\n+                        .uri(uri)\n+                        .body(null)\n+                        .headers(HttpUtil.headers())\n+                        .payload(null)\n+                        .build()),\n+                Collections.emptyList());\n+    }\n+\n+    private ExtImpAdhese parseImpExt(Imp imp) {\n+        try {\n+            return mapper.mapper().convertValue(imp.getExt(), ADHESE_EXT_TYPE_REFERENCE).getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+    }\n+\n+    private String buildUrl(BidRequest request, String endpointUrl, ExtImpAdhese extImpAdhese) {\n+        final String uri = endpointUrl.replace(\"{{AccountId}}\", extImpAdhese.getAccount());\n+        final String slotParameter = String.format(\"/sl%s-%s\", HttpUtil.encodeUrl(extImpAdhese.getLocation()),\n+                HttpUtil.encodeUrl(extImpAdhese.getFormat()));\n+\n+        return String.format(\"%s%s%s%s%s\", uri, slotParameter, getTargetParameters(extImpAdhese),\n+                getGdprParameter(request), getRefererParameter(request));\n+    }\n+\n+    private String getTargetParameters(ExtImpAdhese extImpAdhese) {\n+        if (extImpAdhese.getKeywords().isNull()) {\n+            return \"\";\n+        }\n+        StringBuilder parametersAsString = new StringBuilder();\n+        final Map<String, List<String>> targetParameters = parseTargetParametersAndSort(extImpAdhese.getKeywords());\n+\n+        for (Map.Entry<String, List<String>> targetParametersMap : targetParameters.entrySet()) {\n+            parametersAsString.append(\"/\").append(HttpUtil.encodeUrl(targetParametersMap.getKey()));\n+            for (String parameter : targetParametersMap.getValue()) {\n+                parametersAsString.append(parameter).append(\";\");\n+            }\n+            parametersAsString.deleteCharAt(parametersAsString.lastIndexOf(\";\"));\n+        }\n+\n+        return parametersAsString.toString();\n+    }\n+\n+    private Map<String, List<String>> parseTargetParametersAndSort(JsonNode keywords) {\n+        Map<String, List<String>> sortedMap = new TreeMap<>();\n+        if (keywords != null) {\n+            Iterator<Map.Entry<String, JsonNode>> fields = keywords.fields();\n+            while (fields.hasNext()) {\n+                Map.Entry<String, JsonNode> next = fields.next();\n+                List<String> values = null;\n+                if (next.getValue() instanceof ArrayNode) {\n+                    final ArrayNode arrayNode = (ArrayNode) next.getValue();\n+                    values = StreamSupport.stream(arrayNode.spliterator(), false)\n+                            .map(JsonNode::toString)\n+                            .map(m -> m.substring(1, m.length() - 1))\n+                            .collect(Collectors.toList());\n+                }\n+                sortedMap.put(next.getKey(), values);\n+            }\n+        }\n+        return sortedMap;\n+    }\n+\n+    private String getGdprParameter(BidRequest request) {\n+        if (request.getUser() != null && StringUtils.isNotBlank(extUser(request.getUser().getExt()).getConsent())) {\n+            return \"/xt\" + extUser(request.getUser().getExt()).getConsent();\n+        }\n+        return \"\";\n+    }", "originalCommit": "f7af17bd9765d255c458688ae543f06c509eea9c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODMyMjYwMQ==", "url": "https://github.com/prebid/prebid-server-java/pull/770#discussion_r448322601", "bodyText": "duplication", "author": "DGarbar", "createdAt": "2020-07-01T12:17:33Z", "path": "src/main/java/org/prebid/server/bidder/adhese/AdheseBidder.java", "diffHunk": "@@ -0,0 +1,342 @@\n+package org.prebid.server.bidder.adhese;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.adhese.model.AdheseBid;\n+import org.prebid.server.bidder.adhese.model.AdheseOriginData;\n+import org.prebid.server.bidder.adhese.model.AdheseResponseExt;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.ExtUser;\n+import org.prebid.server.proto.openrtb.ext.request.adhese.ExtImpAdhese;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.math.BigDecimal;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.TreeMap;\n+import java.util.stream.Collectors;\n+import java.util.stream.StreamSupport;\n+\n+public class AdheseBidder implements Bidder<Void> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpAdhese>> ADHESE_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpAdhese>>() {\n+            };\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public AdheseBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<Void>>> makeHttpRequests(BidRequest request) {\n+        if (CollectionUtils.isEmpty(request.getImp())) {\n+            return Result.emptyWithError(BidderError.badInput(\"No impression in the bid request\"));\n+        }\n+\n+        ExtImpAdhese extImpAdhese;\n+        try {\n+            extImpAdhese = parseImpExt(request.getImp().get(0));\n+        } catch (PreBidException e) {\n+            return Result.emptyWithError(BidderError.badInput(e.getMessage()));\n+        }\n+\n+        final String uri = buildUrl(request, endpointUrl, extImpAdhese);\n+\n+        return Result.of(Collections.singletonList(\n+                HttpRequest.<Void>builder()\n+                        .method(HttpMethod.GET)\n+                        .uri(uri)\n+                        .body(null)\n+                        .headers(HttpUtil.headers())\n+                        .payload(null)\n+                        .build()),\n+                Collections.emptyList());\n+    }\n+\n+    private ExtImpAdhese parseImpExt(Imp imp) {\n+        try {\n+            return mapper.mapper().convertValue(imp.getExt(), ADHESE_EXT_TYPE_REFERENCE).getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+    }\n+\n+    private String buildUrl(BidRequest request, String endpointUrl, ExtImpAdhese extImpAdhese) {\n+        final String uri = endpointUrl.replace(\"{{AccountId}}\", extImpAdhese.getAccount());\n+        final String slotParameter = String.format(\"/sl%s-%s\", HttpUtil.encodeUrl(extImpAdhese.getLocation()),\n+                HttpUtil.encodeUrl(extImpAdhese.getFormat()));\n+\n+        return String.format(\"%s%s%s%s%s\", uri, slotParameter, getTargetParameters(extImpAdhese),\n+                getGdprParameter(request), getRefererParameter(request));\n+    }\n+\n+    private String getTargetParameters(ExtImpAdhese extImpAdhese) {\n+        if (extImpAdhese.getKeywords().isNull()) {\n+            return \"\";\n+        }\n+        StringBuilder parametersAsString = new StringBuilder();\n+        final Map<String, List<String>> targetParameters = parseTargetParametersAndSort(extImpAdhese.getKeywords());\n+\n+        for (Map.Entry<String, List<String>> targetParametersMap : targetParameters.entrySet()) {\n+            parametersAsString.append(\"/\").append(HttpUtil.encodeUrl(targetParametersMap.getKey()));\n+            for (String parameter : targetParametersMap.getValue()) {\n+                parametersAsString.append(parameter).append(\";\");\n+            }\n+            parametersAsString.deleteCharAt(parametersAsString.lastIndexOf(\";\"));\n+        }\n+\n+        return parametersAsString.toString();\n+    }\n+\n+    private Map<String, List<String>> parseTargetParametersAndSort(JsonNode keywords) {\n+        Map<String, List<String>> sortedMap = new TreeMap<>();\n+        if (keywords != null) {\n+            Iterator<Map.Entry<String, JsonNode>> fields = keywords.fields();\n+            while (fields.hasNext()) {\n+                Map.Entry<String, JsonNode> next = fields.next();\n+                List<String> values = null;\n+                if (next.getValue() instanceof ArrayNode) {\n+                    final ArrayNode arrayNode = (ArrayNode) next.getValue();\n+                    values = StreamSupport.stream(arrayNode.spliterator(), false)\n+                            .map(JsonNode::toString)\n+                            .map(m -> m.substring(1, m.length() - 1))\n+                            .collect(Collectors.toList());\n+                }\n+                sortedMap.put(next.getKey(), values);\n+            }\n+        }\n+        return sortedMap;\n+    }\n+\n+    private String getGdprParameter(BidRequest request) {\n+        if (request.getUser() != null && StringUtils.isNotBlank(extUser(request.getUser().getExt()).getConsent())) {\n+            return \"/xt\" + extUser(request.getUser().getExt()).getConsent();", "originalCommit": "f7af17bd9765d255c458688ae543f06c509eea9c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODMyMzQ0Mw==", "url": "https://github.com/prebid/prebid-server-java/pull/770#discussion_r448323443", "bodyText": "extract /xt to constant", "author": "DGarbar", "createdAt": "2020-07-01T12:19:21Z", "path": "src/main/java/org/prebid/server/bidder/adhese/AdheseBidder.java", "diffHunk": "@@ -0,0 +1,342 @@\n+package org.prebid.server.bidder.adhese;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.adhese.model.AdheseBid;\n+import org.prebid.server.bidder.adhese.model.AdheseOriginData;\n+import org.prebid.server.bidder.adhese.model.AdheseResponseExt;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.ExtUser;\n+import org.prebid.server.proto.openrtb.ext.request.adhese.ExtImpAdhese;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.math.BigDecimal;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.TreeMap;\n+import java.util.stream.Collectors;\n+import java.util.stream.StreamSupport;\n+\n+public class AdheseBidder implements Bidder<Void> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpAdhese>> ADHESE_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpAdhese>>() {\n+            };\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public AdheseBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<Void>>> makeHttpRequests(BidRequest request) {\n+        if (CollectionUtils.isEmpty(request.getImp())) {\n+            return Result.emptyWithError(BidderError.badInput(\"No impression in the bid request\"));\n+        }\n+\n+        ExtImpAdhese extImpAdhese;\n+        try {\n+            extImpAdhese = parseImpExt(request.getImp().get(0));\n+        } catch (PreBidException e) {\n+            return Result.emptyWithError(BidderError.badInput(e.getMessage()));\n+        }\n+\n+        final String uri = buildUrl(request, endpointUrl, extImpAdhese);\n+\n+        return Result.of(Collections.singletonList(\n+                HttpRequest.<Void>builder()\n+                        .method(HttpMethod.GET)\n+                        .uri(uri)\n+                        .body(null)\n+                        .headers(HttpUtil.headers())\n+                        .payload(null)\n+                        .build()),\n+                Collections.emptyList());\n+    }\n+\n+    private ExtImpAdhese parseImpExt(Imp imp) {\n+        try {\n+            return mapper.mapper().convertValue(imp.getExt(), ADHESE_EXT_TYPE_REFERENCE).getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+    }\n+\n+    private String buildUrl(BidRequest request, String endpointUrl, ExtImpAdhese extImpAdhese) {\n+        final String uri = endpointUrl.replace(\"{{AccountId}}\", extImpAdhese.getAccount());\n+        final String slotParameter = String.format(\"/sl%s-%s\", HttpUtil.encodeUrl(extImpAdhese.getLocation()),\n+                HttpUtil.encodeUrl(extImpAdhese.getFormat()));\n+\n+        return String.format(\"%s%s%s%s%s\", uri, slotParameter, getTargetParameters(extImpAdhese),\n+                getGdprParameter(request), getRefererParameter(request));\n+    }\n+\n+    private String getTargetParameters(ExtImpAdhese extImpAdhese) {\n+        if (extImpAdhese.getKeywords().isNull()) {\n+            return \"\";\n+        }\n+        StringBuilder parametersAsString = new StringBuilder();\n+        final Map<String, List<String>> targetParameters = parseTargetParametersAndSort(extImpAdhese.getKeywords());\n+\n+        for (Map.Entry<String, List<String>> targetParametersMap : targetParameters.entrySet()) {\n+            parametersAsString.append(\"/\").append(HttpUtil.encodeUrl(targetParametersMap.getKey()));\n+            for (String parameter : targetParametersMap.getValue()) {\n+                parametersAsString.append(parameter).append(\";\");\n+            }\n+            parametersAsString.deleteCharAt(parametersAsString.lastIndexOf(\";\"));\n+        }\n+\n+        return parametersAsString.toString();\n+    }\n+\n+    private Map<String, List<String>> parseTargetParametersAndSort(JsonNode keywords) {\n+        Map<String, List<String>> sortedMap = new TreeMap<>();\n+        if (keywords != null) {\n+            Iterator<Map.Entry<String, JsonNode>> fields = keywords.fields();\n+            while (fields.hasNext()) {\n+                Map.Entry<String, JsonNode> next = fields.next();\n+                List<String> values = null;\n+                if (next.getValue() instanceof ArrayNode) {\n+                    final ArrayNode arrayNode = (ArrayNode) next.getValue();\n+                    values = StreamSupport.stream(arrayNode.spliterator(), false)\n+                            .map(JsonNode::toString)\n+                            .map(m -> m.substring(1, m.length() - 1))\n+                            .collect(Collectors.toList());\n+                }\n+                sortedMap.put(next.getKey(), values);\n+            }\n+        }\n+        return sortedMap;\n+    }\n+\n+    private String getGdprParameter(BidRequest request) {\n+        if (request.getUser() != null && StringUtils.isNotBlank(extUser(request.getUser().getExt()).getConsent())) {\n+            return \"/xt\" + extUser(request.getUser().getExt()).getConsent();", "originalCommit": "f7af17bd9765d255c458688ae543f06c509eea9c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODMyMzQ4Mg==", "url": "https://github.com/prebid/prebid-server-java/pull/770#discussion_r448323482", "bodyText": "extract /xf to constant", "author": "DGarbar", "createdAt": "2020-07-01T12:19:26Z", "path": "src/main/java/org/prebid/server/bidder/adhese/AdheseBidder.java", "diffHunk": "@@ -0,0 +1,342 @@\n+package org.prebid.server.bidder.adhese;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.adhese.model.AdheseBid;\n+import org.prebid.server.bidder.adhese.model.AdheseOriginData;\n+import org.prebid.server.bidder.adhese.model.AdheseResponseExt;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.ExtUser;\n+import org.prebid.server.proto.openrtb.ext.request.adhese.ExtImpAdhese;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.math.BigDecimal;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.TreeMap;\n+import java.util.stream.Collectors;\n+import java.util.stream.StreamSupport;\n+\n+public class AdheseBidder implements Bidder<Void> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpAdhese>> ADHESE_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpAdhese>>() {\n+            };\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public AdheseBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<Void>>> makeHttpRequests(BidRequest request) {\n+        if (CollectionUtils.isEmpty(request.getImp())) {\n+            return Result.emptyWithError(BidderError.badInput(\"No impression in the bid request\"));\n+        }\n+\n+        ExtImpAdhese extImpAdhese;\n+        try {\n+            extImpAdhese = parseImpExt(request.getImp().get(0));\n+        } catch (PreBidException e) {\n+            return Result.emptyWithError(BidderError.badInput(e.getMessage()));\n+        }\n+\n+        final String uri = buildUrl(request, endpointUrl, extImpAdhese);\n+\n+        return Result.of(Collections.singletonList(\n+                HttpRequest.<Void>builder()\n+                        .method(HttpMethod.GET)\n+                        .uri(uri)\n+                        .body(null)\n+                        .headers(HttpUtil.headers())\n+                        .payload(null)\n+                        .build()),\n+                Collections.emptyList());\n+    }\n+\n+    private ExtImpAdhese parseImpExt(Imp imp) {\n+        try {\n+            return mapper.mapper().convertValue(imp.getExt(), ADHESE_EXT_TYPE_REFERENCE).getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+    }\n+\n+    private String buildUrl(BidRequest request, String endpointUrl, ExtImpAdhese extImpAdhese) {\n+        final String uri = endpointUrl.replace(\"{{AccountId}}\", extImpAdhese.getAccount());\n+        final String slotParameter = String.format(\"/sl%s-%s\", HttpUtil.encodeUrl(extImpAdhese.getLocation()),\n+                HttpUtil.encodeUrl(extImpAdhese.getFormat()));\n+\n+        return String.format(\"%s%s%s%s%s\", uri, slotParameter, getTargetParameters(extImpAdhese),\n+                getGdprParameter(request), getRefererParameter(request));\n+    }\n+\n+    private String getTargetParameters(ExtImpAdhese extImpAdhese) {\n+        if (extImpAdhese.getKeywords().isNull()) {\n+            return \"\";\n+        }\n+        StringBuilder parametersAsString = new StringBuilder();\n+        final Map<String, List<String>> targetParameters = parseTargetParametersAndSort(extImpAdhese.getKeywords());\n+\n+        for (Map.Entry<String, List<String>> targetParametersMap : targetParameters.entrySet()) {\n+            parametersAsString.append(\"/\").append(HttpUtil.encodeUrl(targetParametersMap.getKey()));\n+            for (String parameter : targetParametersMap.getValue()) {\n+                parametersAsString.append(parameter).append(\";\");\n+            }\n+            parametersAsString.deleteCharAt(parametersAsString.lastIndexOf(\";\"));\n+        }\n+\n+        return parametersAsString.toString();\n+    }\n+\n+    private Map<String, List<String>> parseTargetParametersAndSort(JsonNode keywords) {\n+        Map<String, List<String>> sortedMap = new TreeMap<>();\n+        if (keywords != null) {\n+            Iterator<Map.Entry<String, JsonNode>> fields = keywords.fields();\n+            while (fields.hasNext()) {\n+                Map.Entry<String, JsonNode> next = fields.next();\n+                List<String> values = null;\n+                if (next.getValue() instanceof ArrayNode) {\n+                    final ArrayNode arrayNode = (ArrayNode) next.getValue();\n+                    values = StreamSupport.stream(arrayNode.spliterator(), false)\n+                            .map(JsonNode::toString)\n+                            .map(m -> m.substring(1, m.length() - 1))\n+                            .collect(Collectors.toList());\n+                }\n+                sortedMap.put(next.getKey(), values);\n+            }\n+        }\n+        return sortedMap;\n+    }\n+\n+    private String getGdprParameter(BidRequest request) {\n+        if (request.getUser() != null && StringUtils.isNotBlank(extUser(request.getUser().getExt()).getConsent())) {\n+            return \"/xt\" + extUser(request.getUser().getExt()).getConsent();\n+        }\n+        return \"\";\n+    }\n+\n+    private ExtUser extUser(ObjectNode extNode) {\n+        try {\n+            return extNode != null ? mapper.mapper().treeToValue(extNode, ExtUser.class) : null;\n+        } catch (JsonProcessingException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+    }\n+\n+    private String getRefererParameter(BidRequest request) {\n+        if (request.getSite() != null && StringUtils.isNotBlank(request.getSite().getPage())) {\n+            return \"/xf\" + HttpUtil.encodeUrl(request.getSite().getPage());", "originalCommit": "f7af17bd9765d255c458688ae543f06c509eea9c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODMyMzk4NA==", "url": "https://github.com/prebid/prebid-server-java/pull/770#discussion_r448323984", "bodyText": "duplication.\nRefactor", "author": "DGarbar", "createdAt": "2020-07-01T12:20:21Z", "path": "src/main/java/org/prebid/server/bidder/adhese/AdheseBidder.java", "diffHunk": "@@ -0,0 +1,342 @@\n+package org.prebid.server.bidder.adhese;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.adhese.model.AdheseBid;\n+import org.prebid.server.bidder.adhese.model.AdheseOriginData;\n+import org.prebid.server.bidder.adhese.model.AdheseResponseExt;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.ExtUser;\n+import org.prebid.server.proto.openrtb.ext.request.adhese.ExtImpAdhese;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.math.BigDecimal;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.TreeMap;\n+import java.util.stream.Collectors;\n+import java.util.stream.StreamSupport;\n+\n+public class AdheseBidder implements Bidder<Void> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpAdhese>> ADHESE_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpAdhese>>() {\n+            };\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public AdheseBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<Void>>> makeHttpRequests(BidRequest request) {\n+        if (CollectionUtils.isEmpty(request.getImp())) {\n+            return Result.emptyWithError(BidderError.badInput(\"No impression in the bid request\"));\n+        }\n+\n+        ExtImpAdhese extImpAdhese;\n+        try {\n+            extImpAdhese = parseImpExt(request.getImp().get(0));\n+        } catch (PreBidException e) {\n+            return Result.emptyWithError(BidderError.badInput(e.getMessage()));\n+        }\n+\n+        final String uri = buildUrl(request, endpointUrl, extImpAdhese);\n+\n+        return Result.of(Collections.singletonList(\n+                HttpRequest.<Void>builder()\n+                        .method(HttpMethod.GET)\n+                        .uri(uri)\n+                        .body(null)\n+                        .headers(HttpUtil.headers())\n+                        .payload(null)\n+                        .build()),\n+                Collections.emptyList());\n+    }\n+\n+    private ExtImpAdhese parseImpExt(Imp imp) {\n+        try {\n+            return mapper.mapper().convertValue(imp.getExt(), ADHESE_EXT_TYPE_REFERENCE).getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+    }\n+\n+    private String buildUrl(BidRequest request, String endpointUrl, ExtImpAdhese extImpAdhese) {\n+        final String uri = endpointUrl.replace(\"{{AccountId}}\", extImpAdhese.getAccount());\n+        final String slotParameter = String.format(\"/sl%s-%s\", HttpUtil.encodeUrl(extImpAdhese.getLocation()),\n+                HttpUtil.encodeUrl(extImpAdhese.getFormat()));\n+\n+        return String.format(\"%s%s%s%s%s\", uri, slotParameter, getTargetParameters(extImpAdhese),\n+                getGdprParameter(request), getRefererParameter(request));\n+    }\n+\n+    private String getTargetParameters(ExtImpAdhese extImpAdhese) {\n+        if (extImpAdhese.getKeywords().isNull()) {\n+            return \"\";\n+        }\n+        StringBuilder parametersAsString = new StringBuilder();\n+        final Map<String, List<String>> targetParameters = parseTargetParametersAndSort(extImpAdhese.getKeywords());\n+\n+        for (Map.Entry<String, List<String>> targetParametersMap : targetParameters.entrySet()) {\n+            parametersAsString.append(\"/\").append(HttpUtil.encodeUrl(targetParametersMap.getKey()));\n+            for (String parameter : targetParametersMap.getValue()) {\n+                parametersAsString.append(parameter).append(\";\");\n+            }\n+            parametersAsString.deleteCharAt(parametersAsString.lastIndexOf(\";\"));\n+        }\n+\n+        return parametersAsString.toString();\n+    }\n+\n+    private Map<String, List<String>> parseTargetParametersAndSort(JsonNode keywords) {\n+        Map<String, List<String>> sortedMap = new TreeMap<>();\n+        if (keywords != null) {\n+            Iterator<Map.Entry<String, JsonNode>> fields = keywords.fields();\n+            while (fields.hasNext()) {\n+                Map.Entry<String, JsonNode> next = fields.next();\n+                List<String> values = null;\n+                if (next.getValue() instanceof ArrayNode) {\n+                    final ArrayNode arrayNode = (ArrayNode) next.getValue();\n+                    values = StreamSupport.stream(arrayNode.spliterator(), false)\n+                            .map(JsonNode::toString)\n+                            .map(m -> m.substring(1, m.length() - 1))\n+                            .collect(Collectors.toList());\n+                }\n+                sortedMap.put(next.getKey(), values);\n+            }\n+        }\n+        return sortedMap;\n+    }\n+\n+    private String getGdprParameter(BidRequest request) {\n+        if (request.getUser() != null && StringUtils.isNotBlank(extUser(request.getUser().getExt()).getConsent())) {\n+            return \"/xt\" + extUser(request.getUser().getExt()).getConsent();\n+        }\n+        return \"\";\n+    }\n+\n+    private ExtUser extUser(ObjectNode extNode) {\n+        try {\n+            return extNode != null ? mapper.mapper().treeToValue(extNode, ExtUser.class) : null;\n+        } catch (JsonProcessingException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+    }\n+\n+    private String getRefererParameter(BidRequest request) {\n+        if (request.getSite() != null && StringUtils.isNotBlank(request.getSite().getPage())) {\n+            return \"/xf\" + HttpUtil.encodeUrl(request.getSite().getPage());", "originalCommit": "f7af17bd9765d255c458688ae543f06c509eea9c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODMyODEyMQ==", "url": "https://github.com/prebid/prebid-server-java/pull/770#discussion_r448328121", "bodyText": "You should prefer to use more specific type in method parameters", "author": "DGarbar", "createdAt": "2020-07-01T12:27:59Z", "path": "src/main/java/org/prebid/server/bidder/adhese/AdheseBidder.java", "diffHunk": "@@ -0,0 +1,342 @@\n+package org.prebid.server.bidder.adhese;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.adhese.model.AdheseBid;\n+import org.prebid.server.bidder.adhese.model.AdheseOriginData;\n+import org.prebid.server.bidder.adhese.model.AdheseResponseExt;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.ExtUser;\n+import org.prebid.server.proto.openrtb.ext.request.adhese.ExtImpAdhese;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.math.BigDecimal;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.TreeMap;\n+import java.util.stream.Collectors;\n+import java.util.stream.StreamSupport;\n+\n+public class AdheseBidder implements Bidder<Void> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpAdhese>> ADHESE_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpAdhese>>() {\n+            };\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public AdheseBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<Void>>> makeHttpRequests(BidRequest request) {\n+        if (CollectionUtils.isEmpty(request.getImp())) {\n+            return Result.emptyWithError(BidderError.badInput(\"No impression in the bid request\"));\n+        }\n+\n+        ExtImpAdhese extImpAdhese;\n+        try {\n+            extImpAdhese = parseImpExt(request.getImp().get(0));\n+        } catch (PreBidException e) {\n+            return Result.emptyWithError(BidderError.badInput(e.getMessage()));\n+        }\n+\n+        final String uri = buildUrl(request, endpointUrl, extImpAdhese);\n+\n+        return Result.of(Collections.singletonList(\n+                HttpRequest.<Void>builder()\n+                        .method(HttpMethod.GET)\n+                        .uri(uri)\n+                        .body(null)\n+                        .headers(HttpUtil.headers())\n+                        .payload(null)\n+                        .build()),\n+                Collections.emptyList());\n+    }\n+\n+    private ExtImpAdhese parseImpExt(Imp imp) {\n+        try {\n+            return mapper.mapper().convertValue(imp.getExt(), ADHESE_EXT_TYPE_REFERENCE).getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+    }\n+\n+    private String buildUrl(BidRequest request, String endpointUrl, ExtImpAdhese extImpAdhese) {\n+        final String uri = endpointUrl.replace(\"{{AccountId}}\", extImpAdhese.getAccount());\n+        final String slotParameter = String.format(\"/sl%s-%s\", HttpUtil.encodeUrl(extImpAdhese.getLocation()),\n+                HttpUtil.encodeUrl(extImpAdhese.getFormat()));\n+\n+        return String.format(\"%s%s%s%s%s\", uri, slotParameter, getTargetParameters(extImpAdhese),\n+                getGdprParameter(request), getRefererParameter(request));\n+    }\n+\n+    private String getTargetParameters(ExtImpAdhese extImpAdhese) {\n+        if (extImpAdhese.getKeywords().isNull()) {\n+            return \"\";\n+        }\n+        StringBuilder parametersAsString = new StringBuilder();\n+        final Map<String, List<String>> targetParameters = parseTargetParametersAndSort(extImpAdhese.getKeywords());\n+\n+        for (Map.Entry<String, List<String>> targetParametersMap : targetParameters.entrySet()) {\n+            parametersAsString.append(\"/\").append(HttpUtil.encodeUrl(targetParametersMap.getKey()));\n+            for (String parameter : targetParametersMap.getValue()) {\n+                parametersAsString.append(parameter).append(\";\");\n+            }\n+            parametersAsString.deleteCharAt(parametersAsString.lastIndexOf(\";\"));\n+        }\n+\n+        return parametersAsString.toString();\n+    }\n+\n+    private Map<String, List<String>> parseTargetParametersAndSort(JsonNode keywords) {\n+        Map<String, List<String>> sortedMap = new TreeMap<>();\n+        if (keywords != null) {\n+            Iterator<Map.Entry<String, JsonNode>> fields = keywords.fields();\n+            while (fields.hasNext()) {\n+                Map.Entry<String, JsonNode> next = fields.next();\n+                List<String> values = null;\n+                if (next.getValue() instanceof ArrayNode) {\n+                    final ArrayNode arrayNode = (ArrayNode) next.getValue();\n+                    values = StreamSupport.stream(arrayNode.spliterator(), false)\n+                            .map(JsonNode::toString)\n+                            .map(m -> m.substring(1, m.length() - 1))\n+                            .collect(Collectors.toList());\n+                }\n+                sortedMap.put(next.getKey(), values);\n+            }\n+        }\n+        return sortedMap;\n+    }\n+\n+    private String getGdprParameter(BidRequest request) {\n+        if (request.getUser() != null && StringUtils.isNotBlank(extUser(request.getUser().getExt()).getConsent())) {\n+            return \"/xt\" + extUser(request.getUser().getExt()).getConsent();\n+        }\n+        return \"\";\n+    }\n+\n+    private ExtUser extUser(ObjectNode extNode) {\n+        try {\n+            return extNode != null ? mapper.mapper().treeToValue(extNode, ExtUser.class) : null;\n+        } catch (JsonProcessingException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+    }\n+\n+    private String getRefererParameter(BidRequest request) {\n+        if (request.getSite() != null && StringUtils.isNotBlank(request.getSite().getPage())) {\n+            return \"/xf\" + HttpUtil.encodeUrl(request.getSite().getPage());\n+        }\n+        return \"\";\n+    }\n+\n+    @Override\n+    public Result<List<BidderBid>> makeBids(HttpCall<Void> httpCall, BidRequest bidRequest) {\n+        final int statusCode = httpCall.getResponse().getStatusCode();\n+        if (statusCode == HttpResponseStatus.NO_CONTENT.code()) {\n+            return Result.of(Collections.emptyList(), Collections.emptyList());\n+        } else if (statusCode == HttpResponseStatus.BAD_REQUEST.code()) {\n+            return Result.emptyWithError(BidderError.badInput(\"Invalid request.\"));\n+        } else if (statusCode != HttpResponseStatus.OK.code()) {\n+            return Result.emptyWithError(BidderError.badServerResponse(String.format(\"Unexpected HTTP status %s.\",\n+                    statusCode)));\n+        }\n+\n+        final AdheseBid adheseBid;\n+        try {\n+            adheseBid = decodeBodyToBid(httpCall);", "originalCommit": "f7af17bd9765d255c458688ae543f06c509eea9c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODMyODM0OA==", "url": "https://github.com/prebid/prebid-server-java/pull/770#discussion_r448328348", "bodyText": "Const.\nAnd to be more safe, use Objects.equals", "author": "DGarbar", "createdAt": "2020-07-01T12:28:25Z", "path": "src/main/java/org/prebid/server/bidder/adhese/AdheseBidder.java", "diffHunk": "@@ -0,0 +1,342 @@\n+package org.prebid.server.bidder.adhese;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.adhese.model.AdheseBid;\n+import org.prebid.server.bidder.adhese.model.AdheseOriginData;\n+import org.prebid.server.bidder.adhese.model.AdheseResponseExt;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.ExtUser;\n+import org.prebid.server.proto.openrtb.ext.request.adhese.ExtImpAdhese;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.math.BigDecimal;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.TreeMap;\n+import java.util.stream.Collectors;\n+import java.util.stream.StreamSupport;\n+\n+public class AdheseBidder implements Bidder<Void> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpAdhese>> ADHESE_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpAdhese>>() {\n+            };\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public AdheseBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<Void>>> makeHttpRequests(BidRequest request) {\n+        if (CollectionUtils.isEmpty(request.getImp())) {\n+            return Result.emptyWithError(BidderError.badInput(\"No impression in the bid request\"));\n+        }\n+\n+        ExtImpAdhese extImpAdhese;\n+        try {\n+            extImpAdhese = parseImpExt(request.getImp().get(0));\n+        } catch (PreBidException e) {\n+            return Result.emptyWithError(BidderError.badInput(e.getMessage()));\n+        }\n+\n+        final String uri = buildUrl(request, endpointUrl, extImpAdhese);\n+\n+        return Result.of(Collections.singletonList(\n+                HttpRequest.<Void>builder()\n+                        .method(HttpMethod.GET)\n+                        .uri(uri)\n+                        .body(null)\n+                        .headers(HttpUtil.headers())\n+                        .payload(null)\n+                        .build()),\n+                Collections.emptyList());\n+    }\n+\n+    private ExtImpAdhese parseImpExt(Imp imp) {\n+        try {\n+            return mapper.mapper().convertValue(imp.getExt(), ADHESE_EXT_TYPE_REFERENCE).getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+    }\n+\n+    private String buildUrl(BidRequest request, String endpointUrl, ExtImpAdhese extImpAdhese) {\n+        final String uri = endpointUrl.replace(\"{{AccountId}}\", extImpAdhese.getAccount());\n+        final String slotParameter = String.format(\"/sl%s-%s\", HttpUtil.encodeUrl(extImpAdhese.getLocation()),\n+                HttpUtil.encodeUrl(extImpAdhese.getFormat()));\n+\n+        return String.format(\"%s%s%s%s%s\", uri, slotParameter, getTargetParameters(extImpAdhese),\n+                getGdprParameter(request), getRefererParameter(request));\n+    }\n+\n+    private String getTargetParameters(ExtImpAdhese extImpAdhese) {\n+        if (extImpAdhese.getKeywords().isNull()) {\n+            return \"\";\n+        }\n+        StringBuilder parametersAsString = new StringBuilder();\n+        final Map<String, List<String>> targetParameters = parseTargetParametersAndSort(extImpAdhese.getKeywords());\n+\n+        for (Map.Entry<String, List<String>> targetParametersMap : targetParameters.entrySet()) {\n+            parametersAsString.append(\"/\").append(HttpUtil.encodeUrl(targetParametersMap.getKey()));\n+            for (String parameter : targetParametersMap.getValue()) {\n+                parametersAsString.append(parameter).append(\";\");\n+            }\n+            parametersAsString.deleteCharAt(parametersAsString.lastIndexOf(\";\"));\n+        }\n+\n+        return parametersAsString.toString();\n+    }\n+\n+    private Map<String, List<String>> parseTargetParametersAndSort(JsonNode keywords) {\n+        Map<String, List<String>> sortedMap = new TreeMap<>();\n+        if (keywords != null) {\n+            Iterator<Map.Entry<String, JsonNode>> fields = keywords.fields();\n+            while (fields.hasNext()) {\n+                Map.Entry<String, JsonNode> next = fields.next();\n+                List<String> values = null;\n+                if (next.getValue() instanceof ArrayNode) {\n+                    final ArrayNode arrayNode = (ArrayNode) next.getValue();\n+                    values = StreamSupport.stream(arrayNode.spliterator(), false)\n+                            .map(JsonNode::toString)\n+                            .map(m -> m.substring(1, m.length() - 1))\n+                            .collect(Collectors.toList());\n+                }\n+                sortedMap.put(next.getKey(), values);\n+            }\n+        }\n+        return sortedMap;\n+    }\n+\n+    private String getGdprParameter(BidRequest request) {\n+        if (request.getUser() != null && StringUtils.isNotBlank(extUser(request.getUser().getExt()).getConsent())) {\n+            return \"/xt\" + extUser(request.getUser().getExt()).getConsent();\n+        }\n+        return \"\";\n+    }\n+\n+    private ExtUser extUser(ObjectNode extNode) {\n+        try {\n+            return extNode != null ? mapper.mapper().treeToValue(extNode, ExtUser.class) : null;\n+        } catch (JsonProcessingException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+    }\n+\n+    private String getRefererParameter(BidRequest request) {\n+        if (request.getSite() != null && StringUtils.isNotBlank(request.getSite().getPage())) {\n+            return \"/xf\" + HttpUtil.encodeUrl(request.getSite().getPage());\n+        }\n+        return \"\";\n+    }\n+\n+    @Override\n+    public Result<List<BidderBid>> makeBids(HttpCall<Void> httpCall, BidRequest bidRequest) {\n+        final int statusCode = httpCall.getResponse().getStatusCode();\n+        if (statusCode == HttpResponseStatus.NO_CONTENT.code()) {\n+            return Result.of(Collections.emptyList(), Collections.emptyList());\n+        } else if (statusCode == HttpResponseStatus.BAD_REQUEST.code()) {\n+            return Result.emptyWithError(BidderError.badInput(\"Invalid request.\"));\n+        } else if (statusCode != HttpResponseStatus.OK.code()) {\n+            return Result.emptyWithError(BidderError.badServerResponse(String.format(\"Unexpected HTTP status %s.\",\n+                    statusCode)));\n+        }\n+\n+        final AdheseBid adheseBid;\n+        try {\n+            adheseBid = decodeBodyToBid(httpCall);\n+        } catch (PreBidException e) {\n+            return Result.emptyWithError(BidderError.badServerResponse(e.getMessage()));\n+        }\n+\n+        BidResponse.BidResponseBuilder bidResponseBuilder;\n+        if (adheseBid.getOrigin().equals(\"JERLICIA\")) {", "originalCommit": "f7af17bd9765d255c458688ae543f06c509eea9c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODMyOTIwNQ==", "url": "https://github.com/prebid/prebid-server-java/pull/770#discussion_r448329205", "bodyText": "Can't we just use one try catch above for all exception ? (182 line)", "author": "DGarbar", "createdAt": "2020-07-01T12:29:58Z", "path": "src/main/java/org/prebid/server/bidder/adhese/AdheseBidder.java", "diffHunk": "@@ -0,0 +1,342 @@\n+package org.prebid.server.bidder.adhese;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.adhese.model.AdheseBid;\n+import org.prebid.server.bidder.adhese.model.AdheseOriginData;\n+import org.prebid.server.bidder.adhese.model.AdheseResponseExt;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.ExtUser;\n+import org.prebid.server.proto.openrtb.ext.request.adhese.ExtImpAdhese;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.math.BigDecimal;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.TreeMap;\n+import java.util.stream.Collectors;\n+import java.util.stream.StreamSupport;\n+\n+public class AdheseBidder implements Bidder<Void> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpAdhese>> ADHESE_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpAdhese>>() {\n+            };\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public AdheseBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<Void>>> makeHttpRequests(BidRequest request) {\n+        if (CollectionUtils.isEmpty(request.getImp())) {\n+            return Result.emptyWithError(BidderError.badInput(\"No impression in the bid request\"));\n+        }\n+\n+        ExtImpAdhese extImpAdhese;\n+        try {\n+            extImpAdhese = parseImpExt(request.getImp().get(0));\n+        } catch (PreBidException e) {\n+            return Result.emptyWithError(BidderError.badInput(e.getMessage()));\n+        }\n+\n+        final String uri = buildUrl(request, endpointUrl, extImpAdhese);\n+\n+        return Result.of(Collections.singletonList(\n+                HttpRequest.<Void>builder()\n+                        .method(HttpMethod.GET)\n+                        .uri(uri)\n+                        .body(null)\n+                        .headers(HttpUtil.headers())\n+                        .payload(null)\n+                        .build()),\n+                Collections.emptyList());\n+    }\n+\n+    private ExtImpAdhese parseImpExt(Imp imp) {\n+        try {\n+            return mapper.mapper().convertValue(imp.getExt(), ADHESE_EXT_TYPE_REFERENCE).getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+    }\n+\n+    private String buildUrl(BidRequest request, String endpointUrl, ExtImpAdhese extImpAdhese) {\n+        final String uri = endpointUrl.replace(\"{{AccountId}}\", extImpAdhese.getAccount());\n+        final String slotParameter = String.format(\"/sl%s-%s\", HttpUtil.encodeUrl(extImpAdhese.getLocation()),\n+                HttpUtil.encodeUrl(extImpAdhese.getFormat()));\n+\n+        return String.format(\"%s%s%s%s%s\", uri, slotParameter, getTargetParameters(extImpAdhese),\n+                getGdprParameter(request), getRefererParameter(request));\n+    }\n+\n+    private String getTargetParameters(ExtImpAdhese extImpAdhese) {\n+        if (extImpAdhese.getKeywords().isNull()) {\n+            return \"\";\n+        }\n+        StringBuilder parametersAsString = new StringBuilder();\n+        final Map<String, List<String>> targetParameters = parseTargetParametersAndSort(extImpAdhese.getKeywords());\n+\n+        for (Map.Entry<String, List<String>> targetParametersMap : targetParameters.entrySet()) {\n+            parametersAsString.append(\"/\").append(HttpUtil.encodeUrl(targetParametersMap.getKey()));\n+            for (String parameter : targetParametersMap.getValue()) {\n+                parametersAsString.append(parameter).append(\";\");\n+            }\n+            parametersAsString.deleteCharAt(parametersAsString.lastIndexOf(\";\"));\n+        }\n+\n+        return parametersAsString.toString();\n+    }\n+\n+    private Map<String, List<String>> parseTargetParametersAndSort(JsonNode keywords) {\n+        Map<String, List<String>> sortedMap = new TreeMap<>();\n+        if (keywords != null) {\n+            Iterator<Map.Entry<String, JsonNode>> fields = keywords.fields();\n+            while (fields.hasNext()) {\n+                Map.Entry<String, JsonNode> next = fields.next();\n+                List<String> values = null;\n+                if (next.getValue() instanceof ArrayNode) {\n+                    final ArrayNode arrayNode = (ArrayNode) next.getValue();\n+                    values = StreamSupport.stream(arrayNode.spliterator(), false)\n+                            .map(JsonNode::toString)\n+                            .map(m -> m.substring(1, m.length() - 1))\n+                            .collect(Collectors.toList());\n+                }\n+                sortedMap.put(next.getKey(), values);\n+            }\n+        }\n+        return sortedMap;\n+    }\n+\n+    private String getGdprParameter(BidRequest request) {\n+        if (request.getUser() != null && StringUtils.isNotBlank(extUser(request.getUser().getExt()).getConsent())) {\n+            return \"/xt\" + extUser(request.getUser().getExt()).getConsent();\n+        }\n+        return \"\";\n+    }\n+\n+    private ExtUser extUser(ObjectNode extNode) {\n+        try {\n+            return extNode != null ? mapper.mapper().treeToValue(extNode, ExtUser.class) : null;\n+        } catch (JsonProcessingException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+    }\n+\n+    private String getRefererParameter(BidRequest request) {\n+        if (request.getSite() != null && StringUtils.isNotBlank(request.getSite().getPage())) {\n+            return \"/xf\" + HttpUtil.encodeUrl(request.getSite().getPage());\n+        }\n+        return \"\";\n+    }\n+\n+    @Override\n+    public Result<List<BidderBid>> makeBids(HttpCall<Void> httpCall, BidRequest bidRequest) {\n+        final int statusCode = httpCall.getResponse().getStatusCode();\n+        if (statusCode == HttpResponseStatus.NO_CONTENT.code()) {\n+            return Result.of(Collections.emptyList(), Collections.emptyList());\n+        } else if (statusCode == HttpResponseStatus.BAD_REQUEST.code()) {\n+            return Result.emptyWithError(BidderError.badInput(\"Invalid request.\"));\n+        } else if (statusCode != HttpResponseStatus.OK.code()) {\n+            return Result.emptyWithError(BidderError.badServerResponse(String.format(\"Unexpected HTTP status %s.\",\n+                    statusCode)));\n+        }\n+\n+        final AdheseBid adheseBid;\n+        try {\n+            adheseBid = decodeBodyToBid(httpCall);\n+        } catch (PreBidException e) {\n+            return Result.emptyWithError(BidderError.badServerResponse(e.getMessage()));\n+        }\n+\n+        BidResponse.BidResponseBuilder bidResponseBuilder;\n+        if (adheseBid.getOrigin().equals(\"JERLICIA\")) {\n+            final AdheseResponseExt adheseResponseExt;\n+            final AdheseOriginData adheseOriginData;\n+            try {\n+                adheseResponseExt = decodeBodyToBidResponse(httpCall);\n+                adheseOriginData = decodeBodyToData(httpCall);\n+            } catch (PreBidException e) {\n+                return Result.emptyWithError(BidderError.badServerResponse(e.getMessage()));\n+            }", "originalCommit": "f7af17bd9765d255c458688ae543f06c509eea9c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODMzMzA4OQ==", "url": "https://github.com/prebid/prebid-server-java/pull/770#discussion_r448333089", "bodyText": "Adhese has Array as a response. Probably we need to ask @rpanchyk about that.\n{\n  \"mockResponse\": {\n    \"status\": 200,\n    \"body\": [\n      {\n        \"origin\": \"APPNEXUS\",\n        \"originInstance\": \"\",\n        \"ext\": \"js\",\n        \"slotName\": \"_main_page_-leaderboard\",\n        \"adType\": \"leaderboard\",\n        \"originData\": {\n          \"seatbid\": [\n            {\n              \"bid\": [\n                {\n                  \"crid\": \"60613369\",\n                  \"dealid\": null\n                }\n              ],\n              \"seat\": \"958\"\n            }\n          ]\n        },\n        \"width\": \"728\",\n        \"height\": \"90\",\n        \"body\": \"<div style='background-color:red; height:250px; width:300px'></div>\",\n        \"tracker\": \"https://hosts-demo.adhese.com/rtb_gateway/handlers/client/track/?id=a2f39296-6dd0-4b3c-be85-7baa22e7ff4a\",\n        \"impressionCounter\": \"https://hosts-demo.adhese.com/rtb_gateway/handlers/client/track/?id=a2f39296-6dd0-4b3c-be85-7baa22e7ff4a\",\n        \"extension\": {\n          \"prebid\": {\n            \"cpm\": {\n              \"amount\": \"1\",\n              \"currency\": \"USD\"\n            }\n          }\n        }\n      }\n    ]\n  }\n}\nThey receive array of this objects and then get first.", "author": "DGarbar", "createdAt": "2020-07-01T12:36:54Z", "path": "src/main/java/org/prebid/server/bidder/adhese/AdheseBidder.java", "diffHunk": "@@ -0,0 +1,342 @@\n+package org.prebid.server.bidder.adhese;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.adhese.model.AdheseBid;\n+import org.prebid.server.bidder.adhese.model.AdheseOriginData;\n+import org.prebid.server.bidder.adhese.model.AdheseResponseExt;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.ExtUser;\n+import org.prebid.server.proto.openrtb.ext.request.adhese.ExtImpAdhese;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.math.BigDecimal;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.TreeMap;\n+import java.util.stream.Collectors;\n+import java.util.stream.StreamSupport;\n+\n+public class AdheseBidder implements Bidder<Void> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpAdhese>> ADHESE_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpAdhese>>() {\n+            };\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public AdheseBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<Void>>> makeHttpRequests(BidRequest request) {\n+        if (CollectionUtils.isEmpty(request.getImp())) {\n+            return Result.emptyWithError(BidderError.badInput(\"No impression in the bid request\"));\n+        }\n+\n+        ExtImpAdhese extImpAdhese;\n+        try {\n+            extImpAdhese = parseImpExt(request.getImp().get(0));\n+        } catch (PreBidException e) {\n+            return Result.emptyWithError(BidderError.badInput(e.getMessage()));\n+        }\n+\n+        final String uri = buildUrl(request, endpointUrl, extImpAdhese);\n+\n+        return Result.of(Collections.singletonList(\n+                HttpRequest.<Void>builder()\n+                        .method(HttpMethod.GET)\n+                        .uri(uri)\n+                        .body(null)\n+                        .headers(HttpUtil.headers())\n+                        .payload(null)\n+                        .build()),\n+                Collections.emptyList());\n+    }\n+\n+    private ExtImpAdhese parseImpExt(Imp imp) {\n+        try {\n+            return mapper.mapper().convertValue(imp.getExt(), ADHESE_EXT_TYPE_REFERENCE).getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+    }\n+\n+    private String buildUrl(BidRequest request, String endpointUrl, ExtImpAdhese extImpAdhese) {\n+        final String uri = endpointUrl.replace(\"{{AccountId}}\", extImpAdhese.getAccount());\n+        final String slotParameter = String.format(\"/sl%s-%s\", HttpUtil.encodeUrl(extImpAdhese.getLocation()),\n+                HttpUtil.encodeUrl(extImpAdhese.getFormat()));\n+\n+        return String.format(\"%s%s%s%s%s\", uri, slotParameter, getTargetParameters(extImpAdhese),\n+                getGdprParameter(request), getRefererParameter(request));\n+    }\n+\n+    private String getTargetParameters(ExtImpAdhese extImpAdhese) {\n+        if (extImpAdhese.getKeywords().isNull()) {\n+            return \"\";\n+        }\n+        StringBuilder parametersAsString = new StringBuilder();\n+        final Map<String, List<String>> targetParameters = parseTargetParametersAndSort(extImpAdhese.getKeywords());\n+\n+        for (Map.Entry<String, List<String>> targetParametersMap : targetParameters.entrySet()) {\n+            parametersAsString.append(\"/\").append(HttpUtil.encodeUrl(targetParametersMap.getKey()));\n+            for (String parameter : targetParametersMap.getValue()) {\n+                parametersAsString.append(parameter).append(\";\");\n+            }\n+            parametersAsString.deleteCharAt(parametersAsString.lastIndexOf(\";\"));\n+        }\n+\n+        return parametersAsString.toString();\n+    }\n+\n+    private Map<String, List<String>> parseTargetParametersAndSort(JsonNode keywords) {\n+        Map<String, List<String>> sortedMap = new TreeMap<>();\n+        if (keywords != null) {\n+            Iterator<Map.Entry<String, JsonNode>> fields = keywords.fields();\n+            while (fields.hasNext()) {\n+                Map.Entry<String, JsonNode> next = fields.next();\n+                List<String> values = null;\n+                if (next.getValue() instanceof ArrayNode) {\n+                    final ArrayNode arrayNode = (ArrayNode) next.getValue();\n+                    values = StreamSupport.stream(arrayNode.spliterator(), false)\n+                            .map(JsonNode::toString)\n+                            .map(m -> m.substring(1, m.length() - 1))\n+                            .collect(Collectors.toList());\n+                }\n+                sortedMap.put(next.getKey(), values);\n+            }\n+        }\n+        return sortedMap;\n+    }\n+\n+    private String getGdprParameter(BidRequest request) {\n+        if (request.getUser() != null && StringUtils.isNotBlank(extUser(request.getUser().getExt()).getConsent())) {\n+            return \"/xt\" + extUser(request.getUser().getExt()).getConsent();\n+        }\n+        return \"\";\n+    }\n+\n+    private ExtUser extUser(ObjectNode extNode) {\n+        try {\n+            return extNode != null ? mapper.mapper().treeToValue(extNode, ExtUser.class) : null;\n+        } catch (JsonProcessingException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+    }\n+\n+    private String getRefererParameter(BidRequest request) {\n+        if (request.getSite() != null && StringUtils.isNotBlank(request.getSite().getPage())) {\n+            return \"/xf\" + HttpUtil.encodeUrl(request.getSite().getPage());\n+        }\n+        return \"\";\n+    }\n+\n+    @Override\n+    public Result<List<BidderBid>> makeBids(HttpCall<Void> httpCall, BidRequest bidRequest) {\n+        final int statusCode = httpCall.getResponse().getStatusCode();\n+        if (statusCode == HttpResponseStatus.NO_CONTENT.code()) {\n+            return Result.of(Collections.emptyList(), Collections.emptyList());\n+        } else if (statusCode == HttpResponseStatus.BAD_REQUEST.code()) {\n+            return Result.emptyWithError(BidderError.badInput(\"Invalid request.\"));\n+        } else if (statusCode != HttpResponseStatus.OK.code()) {\n+            return Result.emptyWithError(BidderError.badServerResponse(String.format(\"Unexpected HTTP status %s.\",\n+                    statusCode)));\n+        }\n+\n+        final AdheseBid adheseBid;\n+        try {\n+            adheseBid = decodeBodyToBid(httpCall);\n+        } catch (PreBidException e) {\n+            return Result.emptyWithError(BidderError.badServerResponse(e.getMessage()));\n+        }\n+\n+        BidResponse.BidResponseBuilder bidResponseBuilder;\n+        if (adheseBid.getOrigin().equals(\"JERLICIA\")) {\n+            final AdheseResponseExt adheseResponseExt;\n+            final AdheseOriginData adheseOriginData;\n+            try {\n+                adheseResponseExt = decodeBodyToBidResponse(httpCall);\n+                adheseOriginData = decodeBodyToData(httpCall);", "originalCommit": "f7af17bd9765d255c458688ae543f06c509eea9c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODMzNTY2Mg==", "url": "https://github.com/prebid/prebid-server-java/pull/770#discussion_r448335662", "bodyText": "Objects.equals", "author": "DGarbar", "createdAt": "2020-07-01T12:41:53Z", "path": "src/main/java/org/prebid/server/bidder/adhese/AdheseBidder.java", "diffHunk": "@@ -0,0 +1,342 @@\n+package org.prebid.server.bidder.adhese;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.adhese.model.AdheseBid;\n+import org.prebid.server.bidder.adhese.model.AdheseOriginData;\n+import org.prebid.server.bidder.adhese.model.AdheseResponseExt;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.ExtUser;\n+import org.prebid.server.proto.openrtb.ext.request.adhese.ExtImpAdhese;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.math.BigDecimal;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.TreeMap;\n+import java.util.stream.Collectors;\n+import java.util.stream.StreamSupport;\n+\n+public class AdheseBidder implements Bidder<Void> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpAdhese>> ADHESE_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpAdhese>>() {\n+            };\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public AdheseBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<Void>>> makeHttpRequests(BidRequest request) {\n+        if (CollectionUtils.isEmpty(request.getImp())) {\n+            return Result.emptyWithError(BidderError.badInput(\"No impression in the bid request\"));\n+        }\n+\n+        ExtImpAdhese extImpAdhese;\n+        try {\n+            extImpAdhese = parseImpExt(request.getImp().get(0));\n+        } catch (PreBidException e) {\n+            return Result.emptyWithError(BidderError.badInput(e.getMessage()));\n+        }\n+\n+        final String uri = buildUrl(request, endpointUrl, extImpAdhese);\n+\n+        return Result.of(Collections.singletonList(\n+                HttpRequest.<Void>builder()\n+                        .method(HttpMethod.GET)\n+                        .uri(uri)\n+                        .body(null)\n+                        .headers(HttpUtil.headers())\n+                        .payload(null)\n+                        .build()),\n+                Collections.emptyList());\n+    }\n+\n+    private ExtImpAdhese parseImpExt(Imp imp) {\n+        try {\n+            return mapper.mapper().convertValue(imp.getExt(), ADHESE_EXT_TYPE_REFERENCE).getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+    }\n+\n+    private String buildUrl(BidRequest request, String endpointUrl, ExtImpAdhese extImpAdhese) {\n+        final String uri = endpointUrl.replace(\"{{AccountId}}\", extImpAdhese.getAccount());\n+        final String slotParameter = String.format(\"/sl%s-%s\", HttpUtil.encodeUrl(extImpAdhese.getLocation()),\n+                HttpUtil.encodeUrl(extImpAdhese.getFormat()));\n+\n+        return String.format(\"%s%s%s%s%s\", uri, slotParameter, getTargetParameters(extImpAdhese),\n+                getGdprParameter(request), getRefererParameter(request));\n+    }\n+\n+    private String getTargetParameters(ExtImpAdhese extImpAdhese) {\n+        if (extImpAdhese.getKeywords().isNull()) {\n+            return \"\";\n+        }\n+        StringBuilder parametersAsString = new StringBuilder();\n+        final Map<String, List<String>> targetParameters = parseTargetParametersAndSort(extImpAdhese.getKeywords());\n+\n+        for (Map.Entry<String, List<String>> targetParametersMap : targetParameters.entrySet()) {\n+            parametersAsString.append(\"/\").append(HttpUtil.encodeUrl(targetParametersMap.getKey()));\n+            for (String parameter : targetParametersMap.getValue()) {\n+                parametersAsString.append(parameter).append(\";\");\n+            }\n+            parametersAsString.deleteCharAt(parametersAsString.lastIndexOf(\";\"));\n+        }\n+\n+        return parametersAsString.toString();\n+    }\n+\n+    private Map<String, List<String>> parseTargetParametersAndSort(JsonNode keywords) {\n+        Map<String, List<String>> sortedMap = new TreeMap<>();\n+        if (keywords != null) {\n+            Iterator<Map.Entry<String, JsonNode>> fields = keywords.fields();\n+            while (fields.hasNext()) {\n+                Map.Entry<String, JsonNode> next = fields.next();\n+                List<String> values = null;\n+                if (next.getValue() instanceof ArrayNode) {\n+                    final ArrayNode arrayNode = (ArrayNode) next.getValue();\n+                    values = StreamSupport.stream(arrayNode.spliterator(), false)\n+                            .map(JsonNode::toString)\n+                            .map(m -> m.substring(1, m.length() - 1))\n+                            .collect(Collectors.toList());\n+                }\n+                sortedMap.put(next.getKey(), values);\n+            }\n+        }\n+        return sortedMap;\n+    }\n+\n+    private String getGdprParameter(BidRequest request) {\n+        if (request.getUser() != null && StringUtils.isNotBlank(extUser(request.getUser().getExt()).getConsent())) {\n+            return \"/xt\" + extUser(request.getUser().getExt()).getConsent();\n+        }\n+        return \"\";\n+    }\n+\n+    private ExtUser extUser(ObjectNode extNode) {\n+        try {\n+            return extNode != null ? mapper.mapper().treeToValue(extNode, ExtUser.class) : null;\n+        } catch (JsonProcessingException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+    }\n+\n+    private String getRefererParameter(BidRequest request) {\n+        if (request.getSite() != null && StringUtils.isNotBlank(request.getSite().getPage())) {\n+            return \"/xf\" + HttpUtil.encodeUrl(request.getSite().getPage());\n+        }\n+        return \"\";\n+    }\n+\n+    @Override\n+    public Result<List<BidderBid>> makeBids(HttpCall<Void> httpCall, BidRequest bidRequest) {\n+        final int statusCode = httpCall.getResponse().getStatusCode();\n+        if (statusCode == HttpResponseStatus.NO_CONTENT.code()) {\n+            return Result.of(Collections.emptyList(), Collections.emptyList());\n+        } else if (statusCode == HttpResponseStatus.BAD_REQUEST.code()) {\n+            return Result.emptyWithError(BidderError.badInput(\"Invalid request.\"));\n+        } else if (statusCode != HttpResponseStatus.OK.code()) {\n+            return Result.emptyWithError(BidderError.badServerResponse(String.format(\"Unexpected HTTP status %s.\",\n+                    statusCode)));\n+        }\n+\n+        final AdheseBid adheseBid;\n+        try {\n+            adheseBid = decodeBodyToBid(httpCall);\n+        } catch (PreBidException e) {\n+            return Result.emptyWithError(BidderError.badServerResponse(e.getMessage()));\n+        }\n+\n+        BidResponse.BidResponseBuilder bidResponseBuilder;\n+        if (adheseBid.getOrigin().equals(\"JERLICIA\")) {\n+            final AdheseResponseExt adheseResponseExt;\n+            final AdheseOriginData adheseOriginData;\n+            try {\n+                adheseResponseExt = decodeBodyToBidResponse(httpCall);\n+                adheseOriginData = decodeBodyToData(httpCall);\n+            } catch (PreBidException e) {\n+                return Result.emptyWithError(BidderError.badServerResponse(e.getMessage()));\n+            }\n+            bidResponseBuilder = convertAdheseBid(adheseBid, adheseResponseExt, adheseOriginData);\n+        } else {\n+            bidResponseBuilder = convertAdheseOpenRtbBid(adheseBid);\n+        }\n+\n+        final BigDecimal price = new BigDecimal(adheseBid.getExtension().getPrebid().getCpm().getAmount());\n+        final Integer width = Integer.valueOf(adheseBid.getWidth());\n+        final Integer height = Integer.valueOf(adheseBid.getHeight());\n+\n+        final BidResponse bidResponse = bidResponseBuilder\n+                .cur(adheseBid.getExtension().getPrebid().getCpm().getCurrency())\n+                .build();\n+\n+        if (CollectionUtils.isNotEmpty(bidResponse.getSeatbid())\n+                && CollectionUtils.isNotEmpty(bidResponse.getSeatbid().get(0).getBid())) {\n+            bidResponseBuilder.seatbid(Collections.singletonList(\n+                    SeatBid.builder()\n+                            .bid(Collections.singletonList(Bid.builder()\n+                                    .price(price)\n+                                    .w(width)\n+                                    .h(height)\n+                                    .dealid(bidResponse.getSeatbid().get(0).getBid().get(0).getDealid())\n+                                    .crid(bidResponse.getSeatbid().get(0).getBid().get(0).getCrid())\n+                                    .adm(bidResponse.getSeatbid().get(0).getBid().get(0).getAdm())\n+                                    .ext(bidResponse.getSeatbid().get(0).getBid().get(0).getExt())\n+                                    .build()))\n+                            .build()))\n+                    .cur(adheseBid.getExtension().getPrebid().getCpm().getCurrency())\n+                    .build();\n+        }\n+\n+        final BidResponse updatedBidResponse = bidResponseBuilder.build();\n+\n+        if (updatedBidResponse != null && CollectionUtils.isEmpty(updatedBidResponse.getSeatbid())) {\n+            return Result.emptyWithError(BidderError\n+                    .badServerResponse(\"Response resulted in an empty seatBid array. %s.\"));\n+        }\n+\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<BidderBid> bidderBids = updatedBidResponse != null ? updatedBidResponse.getSeatbid().stream()\n+                .filter(Objects::nonNull)\n+                .map(SeatBid::getBid)\n+                .filter(Objects::nonNull)\n+                .flatMap(Collection::stream)\n+                .map(bid -> bidFromResponse(bid, bidRequest.getImp().get(0).getId(), errors))\n+                .filter(Objects::nonNull)\n+                .collect(Collectors.toList()) : null;\n+        return Result.of(bidderBids, errors);\n+    }\n+\n+    private AdheseBid decodeBodyToBid(HttpCall<Void> httpCall) {\n+        try {\n+            return mapper.decodeValue(httpCall.getResponse().getBody(), AdheseBid.class);\n+        } catch (DecodeException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+    }\n+\n+    private AdheseResponseExt decodeBodyToBidResponse(HttpCall<Void> httpCall) {\n+        try {\n+            return mapper.decodeValue(httpCall.getResponse().getBody(), AdheseResponseExt.class);\n+        } catch (DecodeException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+    }\n+\n+    private AdheseOriginData decodeBodyToData(HttpCall<Void> httpCall) {\n+        try {\n+            return mapper.decodeValue(httpCall.getResponse().getBody(), AdheseOriginData.class);\n+        } catch (DecodeException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+    }\n+\n+    private BidResponse.BidResponseBuilder convertAdheseBid(AdheseBid adheseBid, AdheseResponseExt adheseResponseExt,\n+                                                            AdheseOriginData adheseOriginData) {\n+        final ObjectNode adheseExtJson = mapper.mapper().valueToTree(adheseOriginData);\n+\n+        return BidResponse.builder()\n+                .id(adheseResponseExt.getId())\n+                .seatbid(Collections.singletonList(\n+                        SeatBid.builder()\n+                                .bid(Collections.singletonList(Bid.builder()\n+                                        .id(\"1\")\n+                                        .dealid(adheseResponseExt.getOrderId())\n+                                        .crid(adheseResponseExt.getId())\n+                                        .adm(getAdMarkup(adheseBid, adheseResponseExt))\n+                                        .ext(adheseExtJson)\n+                                        .build()))\n+                                .build()));\n+    }\n+\n+    private String getAdMarkup(AdheseBid adheseBid, AdheseResponseExt adheseResponseExt) {\n+        if (adheseResponseExt.getExt().equals(\"js\")) {", "originalCommit": "f7af17bd9765d255c458688ae543f06c509eea9c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODMzNjA4MA==", "url": "https://github.com/prebid/prebid-server-java/pull/770#discussion_r448336080", "bodyText": "if more that zero, not just an empty", "author": "DGarbar", "createdAt": "2020-07-01T12:42:44Z", "path": "src/main/java/org/prebid/server/bidder/adhese/AdheseBidder.java", "diffHunk": "@@ -0,0 +1,342 @@\n+package org.prebid.server.bidder.adhese;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.adhese.model.AdheseBid;\n+import org.prebid.server.bidder.adhese.model.AdheseOriginData;\n+import org.prebid.server.bidder.adhese.model.AdheseResponseExt;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.ExtUser;\n+import org.prebid.server.proto.openrtb.ext.request.adhese.ExtImpAdhese;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.math.BigDecimal;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.TreeMap;\n+import java.util.stream.Collectors;\n+import java.util.stream.StreamSupport;\n+\n+public class AdheseBidder implements Bidder<Void> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpAdhese>> ADHESE_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpAdhese>>() {\n+            };\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public AdheseBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<Void>>> makeHttpRequests(BidRequest request) {\n+        if (CollectionUtils.isEmpty(request.getImp())) {\n+            return Result.emptyWithError(BidderError.badInput(\"No impression in the bid request\"));\n+        }\n+\n+        ExtImpAdhese extImpAdhese;\n+        try {\n+            extImpAdhese = parseImpExt(request.getImp().get(0));\n+        } catch (PreBidException e) {\n+            return Result.emptyWithError(BidderError.badInput(e.getMessage()));\n+        }\n+\n+        final String uri = buildUrl(request, endpointUrl, extImpAdhese);\n+\n+        return Result.of(Collections.singletonList(\n+                HttpRequest.<Void>builder()\n+                        .method(HttpMethod.GET)\n+                        .uri(uri)\n+                        .body(null)\n+                        .headers(HttpUtil.headers())\n+                        .payload(null)\n+                        .build()),\n+                Collections.emptyList());\n+    }\n+\n+    private ExtImpAdhese parseImpExt(Imp imp) {\n+        try {\n+            return mapper.mapper().convertValue(imp.getExt(), ADHESE_EXT_TYPE_REFERENCE).getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+    }\n+\n+    private String buildUrl(BidRequest request, String endpointUrl, ExtImpAdhese extImpAdhese) {\n+        final String uri = endpointUrl.replace(\"{{AccountId}}\", extImpAdhese.getAccount());\n+        final String slotParameter = String.format(\"/sl%s-%s\", HttpUtil.encodeUrl(extImpAdhese.getLocation()),\n+                HttpUtil.encodeUrl(extImpAdhese.getFormat()));\n+\n+        return String.format(\"%s%s%s%s%s\", uri, slotParameter, getTargetParameters(extImpAdhese),\n+                getGdprParameter(request), getRefererParameter(request));\n+    }\n+\n+    private String getTargetParameters(ExtImpAdhese extImpAdhese) {\n+        if (extImpAdhese.getKeywords().isNull()) {\n+            return \"\";\n+        }\n+        StringBuilder parametersAsString = new StringBuilder();\n+        final Map<String, List<String>> targetParameters = parseTargetParametersAndSort(extImpAdhese.getKeywords());\n+\n+        for (Map.Entry<String, List<String>> targetParametersMap : targetParameters.entrySet()) {\n+            parametersAsString.append(\"/\").append(HttpUtil.encodeUrl(targetParametersMap.getKey()));\n+            for (String parameter : targetParametersMap.getValue()) {\n+                parametersAsString.append(parameter).append(\";\");\n+            }\n+            parametersAsString.deleteCharAt(parametersAsString.lastIndexOf(\";\"));\n+        }\n+\n+        return parametersAsString.toString();\n+    }\n+\n+    private Map<String, List<String>> parseTargetParametersAndSort(JsonNode keywords) {\n+        Map<String, List<String>> sortedMap = new TreeMap<>();\n+        if (keywords != null) {\n+            Iterator<Map.Entry<String, JsonNode>> fields = keywords.fields();\n+            while (fields.hasNext()) {\n+                Map.Entry<String, JsonNode> next = fields.next();\n+                List<String> values = null;\n+                if (next.getValue() instanceof ArrayNode) {\n+                    final ArrayNode arrayNode = (ArrayNode) next.getValue();\n+                    values = StreamSupport.stream(arrayNode.spliterator(), false)\n+                            .map(JsonNode::toString)\n+                            .map(m -> m.substring(1, m.length() - 1))\n+                            .collect(Collectors.toList());\n+                }\n+                sortedMap.put(next.getKey(), values);\n+            }\n+        }\n+        return sortedMap;\n+    }\n+\n+    private String getGdprParameter(BidRequest request) {\n+        if (request.getUser() != null && StringUtils.isNotBlank(extUser(request.getUser().getExt()).getConsent())) {\n+            return \"/xt\" + extUser(request.getUser().getExt()).getConsent();\n+        }\n+        return \"\";\n+    }\n+\n+    private ExtUser extUser(ObjectNode extNode) {\n+        try {\n+            return extNode != null ? mapper.mapper().treeToValue(extNode, ExtUser.class) : null;\n+        } catch (JsonProcessingException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+    }\n+\n+    private String getRefererParameter(BidRequest request) {\n+        if (request.getSite() != null && StringUtils.isNotBlank(request.getSite().getPage())) {\n+            return \"/xf\" + HttpUtil.encodeUrl(request.getSite().getPage());\n+        }\n+        return \"\";\n+    }\n+\n+    @Override\n+    public Result<List<BidderBid>> makeBids(HttpCall<Void> httpCall, BidRequest bidRequest) {\n+        final int statusCode = httpCall.getResponse().getStatusCode();\n+        if (statusCode == HttpResponseStatus.NO_CONTENT.code()) {\n+            return Result.of(Collections.emptyList(), Collections.emptyList());\n+        } else if (statusCode == HttpResponseStatus.BAD_REQUEST.code()) {\n+            return Result.emptyWithError(BidderError.badInput(\"Invalid request.\"));\n+        } else if (statusCode != HttpResponseStatus.OK.code()) {\n+            return Result.emptyWithError(BidderError.badServerResponse(String.format(\"Unexpected HTTP status %s.\",\n+                    statusCode)));\n+        }\n+\n+        final AdheseBid adheseBid;\n+        try {\n+            adheseBid = decodeBodyToBid(httpCall);\n+        } catch (PreBidException e) {\n+            return Result.emptyWithError(BidderError.badServerResponse(e.getMessage()));\n+        }\n+\n+        BidResponse.BidResponseBuilder bidResponseBuilder;\n+        if (adheseBid.getOrigin().equals(\"JERLICIA\")) {\n+            final AdheseResponseExt adheseResponseExt;\n+            final AdheseOriginData adheseOriginData;\n+            try {\n+                adheseResponseExt = decodeBodyToBidResponse(httpCall);\n+                adheseOriginData = decodeBodyToData(httpCall);\n+            } catch (PreBidException e) {\n+                return Result.emptyWithError(BidderError.badServerResponse(e.getMessage()));\n+            }\n+            bidResponseBuilder = convertAdheseBid(adheseBid, adheseResponseExt, adheseOriginData);\n+        } else {\n+            bidResponseBuilder = convertAdheseOpenRtbBid(adheseBid);\n+        }\n+\n+        final BigDecimal price = new BigDecimal(adheseBid.getExtension().getPrebid().getCpm().getAmount());\n+        final Integer width = Integer.valueOf(adheseBid.getWidth());\n+        final Integer height = Integer.valueOf(adheseBid.getHeight());\n+\n+        final BidResponse bidResponse = bidResponseBuilder\n+                .cur(adheseBid.getExtension().getPrebid().getCpm().getCurrency())\n+                .build();\n+\n+        if (CollectionUtils.isNotEmpty(bidResponse.getSeatbid())\n+                && CollectionUtils.isNotEmpty(bidResponse.getSeatbid().get(0).getBid())) {\n+            bidResponseBuilder.seatbid(Collections.singletonList(\n+                    SeatBid.builder()\n+                            .bid(Collections.singletonList(Bid.builder()\n+                                    .price(price)\n+                                    .w(width)\n+                                    .h(height)\n+                                    .dealid(bidResponse.getSeatbid().get(0).getBid().get(0).getDealid())\n+                                    .crid(bidResponse.getSeatbid().get(0).getBid().get(0).getCrid())\n+                                    .adm(bidResponse.getSeatbid().get(0).getBid().get(0).getAdm())\n+                                    .ext(bidResponse.getSeatbid().get(0).getBid().get(0).getExt())\n+                                    .build()))\n+                            .build()))\n+                    .cur(adheseBid.getExtension().getPrebid().getCpm().getCurrency())\n+                    .build();\n+        }\n+\n+        final BidResponse updatedBidResponse = bidResponseBuilder.build();\n+\n+        if (updatedBidResponse != null && CollectionUtils.isEmpty(updatedBidResponse.getSeatbid())) {\n+            return Result.emptyWithError(BidderError\n+                    .badServerResponse(\"Response resulted in an empty seatBid array. %s.\"));\n+        }\n+\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<BidderBid> bidderBids = updatedBidResponse != null ? updatedBidResponse.getSeatbid().stream()\n+                .filter(Objects::nonNull)\n+                .map(SeatBid::getBid)\n+                .filter(Objects::nonNull)\n+                .flatMap(Collection::stream)\n+                .map(bid -> bidFromResponse(bid, bidRequest.getImp().get(0).getId(), errors))\n+                .filter(Objects::nonNull)\n+                .collect(Collectors.toList()) : null;\n+        return Result.of(bidderBids, errors);\n+    }\n+\n+    private AdheseBid decodeBodyToBid(HttpCall<Void> httpCall) {\n+        try {\n+            return mapper.decodeValue(httpCall.getResponse().getBody(), AdheseBid.class);\n+        } catch (DecodeException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+    }\n+\n+    private AdheseResponseExt decodeBodyToBidResponse(HttpCall<Void> httpCall) {\n+        try {\n+            return mapper.decodeValue(httpCall.getResponse().getBody(), AdheseResponseExt.class);\n+        } catch (DecodeException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+    }\n+\n+    private AdheseOriginData decodeBodyToData(HttpCall<Void> httpCall) {\n+        try {\n+            return mapper.decodeValue(httpCall.getResponse().getBody(), AdheseOriginData.class);\n+        } catch (DecodeException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+    }\n+\n+    private BidResponse.BidResponseBuilder convertAdheseBid(AdheseBid adheseBid, AdheseResponseExt adheseResponseExt,\n+                                                            AdheseOriginData adheseOriginData) {\n+        final ObjectNode adheseExtJson = mapper.mapper().valueToTree(adheseOriginData);\n+\n+        return BidResponse.builder()\n+                .id(adheseResponseExt.getId())\n+                .seatbid(Collections.singletonList(\n+                        SeatBid.builder()\n+                                .bid(Collections.singletonList(Bid.builder()\n+                                        .id(\"1\")\n+                                        .dealid(adheseResponseExt.getOrderId())\n+                                        .crid(adheseResponseExt.getId())\n+                                        .adm(getAdMarkup(adheseBid, adheseResponseExt))\n+                                        .ext(adheseExtJson)\n+                                        .build()))\n+                                .build()));\n+    }\n+\n+    private String getAdMarkup(AdheseBid adheseBid, AdheseResponseExt adheseResponseExt) {\n+        if (adheseResponseExt.getExt().equals(\"js\")) {\n+            if (StringUtils.containsAny(adheseBid.getBody(), \"<script\", \"<div\", \"<html\")) {\n+                String counter = \"\";\n+                if (StringUtils.isNotBlank(adheseResponseExt.getImpressionCounter())) {", "originalCommit": "f7af17bd9765d255c458688ae543f06c509eea9c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODMzNjMxMQ==", "url": "https://github.com/prebid/prebid-server-java/pull/770#discussion_r448336311", "bodyText": "use String.format", "author": "DGarbar", "createdAt": "2020-07-01T12:43:11Z", "path": "src/main/java/org/prebid/server/bidder/adhese/AdheseBidder.java", "diffHunk": "@@ -0,0 +1,342 @@\n+package org.prebid.server.bidder.adhese;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.adhese.model.AdheseBid;\n+import org.prebid.server.bidder.adhese.model.AdheseOriginData;\n+import org.prebid.server.bidder.adhese.model.AdheseResponseExt;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.ExtUser;\n+import org.prebid.server.proto.openrtb.ext.request.adhese.ExtImpAdhese;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.math.BigDecimal;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.TreeMap;\n+import java.util.stream.Collectors;\n+import java.util.stream.StreamSupport;\n+\n+public class AdheseBidder implements Bidder<Void> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpAdhese>> ADHESE_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpAdhese>>() {\n+            };\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public AdheseBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<Void>>> makeHttpRequests(BidRequest request) {\n+        if (CollectionUtils.isEmpty(request.getImp())) {\n+            return Result.emptyWithError(BidderError.badInput(\"No impression in the bid request\"));\n+        }\n+\n+        ExtImpAdhese extImpAdhese;\n+        try {\n+            extImpAdhese = parseImpExt(request.getImp().get(0));\n+        } catch (PreBidException e) {\n+            return Result.emptyWithError(BidderError.badInput(e.getMessage()));\n+        }\n+\n+        final String uri = buildUrl(request, endpointUrl, extImpAdhese);\n+\n+        return Result.of(Collections.singletonList(\n+                HttpRequest.<Void>builder()\n+                        .method(HttpMethod.GET)\n+                        .uri(uri)\n+                        .body(null)\n+                        .headers(HttpUtil.headers())\n+                        .payload(null)\n+                        .build()),\n+                Collections.emptyList());\n+    }\n+\n+    private ExtImpAdhese parseImpExt(Imp imp) {\n+        try {\n+            return mapper.mapper().convertValue(imp.getExt(), ADHESE_EXT_TYPE_REFERENCE).getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+    }\n+\n+    private String buildUrl(BidRequest request, String endpointUrl, ExtImpAdhese extImpAdhese) {\n+        final String uri = endpointUrl.replace(\"{{AccountId}}\", extImpAdhese.getAccount());\n+        final String slotParameter = String.format(\"/sl%s-%s\", HttpUtil.encodeUrl(extImpAdhese.getLocation()),\n+                HttpUtil.encodeUrl(extImpAdhese.getFormat()));\n+\n+        return String.format(\"%s%s%s%s%s\", uri, slotParameter, getTargetParameters(extImpAdhese),\n+                getGdprParameter(request), getRefererParameter(request));\n+    }\n+\n+    private String getTargetParameters(ExtImpAdhese extImpAdhese) {\n+        if (extImpAdhese.getKeywords().isNull()) {\n+            return \"\";\n+        }\n+        StringBuilder parametersAsString = new StringBuilder();\n+        final Map<String, List<String>> targetParameters = parseTargetParametersAndSort(extImpAdhese.getKeywords());\n+\n+        for (Map.Entry<String, List<String>> targetParametersMap : targetParameters.entrySet()) {\n+            parametersAsString.append(\"/\").append(HttpUtil.encodeUrl(targetParametersMap.getKey()));\n+            for (String parameter : targetParametersMap.getValue()) {\n+                parametersAsString.append(parameter).append(\";\");\n+            }\n+            parametersAsString.deleteCharAt(parametersAsString.lastIndexOf(\";\"));\n+        }\n+\n+        return parametersAsString.toString();\n+    }\n+\n+    private Map<String, List<String>> parseTargetParametersAndSort(JsonNode keywords) {\n+        Map<String, List<String>> sortedMap = new TreeMap<>();\n+        if (keywords != null) {\n+            Iterator<Map.Entry<String, JsonNode>> fields = keywords.fields();\n+            while (fields.hasNext()) {\n+                Map.Entry<String, JsonNode> next = fields.next();\n+                List<String> values = null;\n+                if (next.getValue() instanceof ArrayNode) {\n+                    final ArrayNode arrayNode = (ArrayNode) next.getValue();\n+                    values = StreamSupport.stream(arrayNode.spliterator(), false)\n+                            .map(JsonNode::toString)\n+                            .map(m -> m.substring(1, m.length() - 1))\n+                            .collect(Collectors.toList());\n+                }\n+                sortedMap.put(next.getKey(), values);\n+            }\n+        }\n+        return sortedMap;\n+    }\n+\n+    private String getGdprParameter(BidRequest request) {\n+        if (request.getUser() != null && StringUtils.isNotBlank(extUser(request.getUser().getExt()).getConsent())) {\n+            return \"/xt\" + extUser(request.getUser().getExt()).getConsent();\n+        }\n+        return \"\";\n+    }\n+\n+    private ExtUser extUser(ObjectNode extNode) {\n+        try {\n+            return extNode != null ? mapper.mapper().treeToValue(extNode, ExtUser.class) : null;\n+        } catch (JsonProcessingException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+    }\n+\n+    private String getRefererParameter(BidRequest request) {\n+        if (request.getSite() != null && StringUtils.isNotBlank(request.getSite().getPage())) {\n+            return \"/xf\" + HttpUtil.encodeUrl(request.getSite().getPage());\n+        }\n+        return \"\";\n+    }\n+\n+    @Override\n+    public Result<List<BidderBid>> makeBids(HttpCall<Void> httpCall, BidRequest bidRequest) {\n+        final int statusCode = httpCall.getResponse().getStatusCode();\n+        if (statusCode == HttpResponseStatus.NO_CONTENT.code()) {\n+            return Result.of(Collections.emptyList(), Collections.emptyList());\n+        } else if (statusCode == HttpResponseStatus.BAD_REQUEST.code()) {\n+            return Result.emptyWithError(BidderError.badInput(\"Invalid request.\"));\n+        } else if (statusCode != HttpResponseStatus.OK.code()) {\n+            return Result.emptyWithError(BidderError.badServerResponse(String.format(\"Unexpected HTTP status %s.\",\n+                    statusCode)));\n+        }\n+\n+        final AdheseBid adheseBid;\n+        try {\n+            adheseBid = decodeBodyToBid(httpCall);\n+        } catch (PreBidException e) {\n+            return Result.emptyWithError(BidderError.badServerResponse(e.getMessage()));\n+        }\n+\n+        BidResponse.BidResponseBuilder bidResponseBuilder;\n+        if (adheseBid.getOrigin().equals(\"JERLICIA\")) {\n+            final AdheseResponseExt adheseResponseExt;\n+            final AdheseOriginData adheseOriginData;\n+            try {\n+                adheseResponseExt = decodeBodyToBidResponse(httpCall);\n+                adheseOriginData = decodeBodyToData(httpCall);\n+            } catch (PreBidException e) {\n+                return Result.emptyWithError(BidderError.badServerResponse(e.getMessage()));\n+            }\n+            bidResponseBuilder = convertAdheseBid(adheseBid, adheseResponseExt, adheseOriginData);\n+        } else {\n+            bidResponseBuilder = convertAdheseOpenRtbBid(adheseBid);\n+        }\n+\n+        final BigDecimal price = new BigDecimal(adheseBid.getExtension().getPrebid().getCpm().getAmount());\n+        final Integer width = Integer.valueOf(adheseBid.getWidth());\n+        final Integer height = Integer.valueOf(adheseBid.getHeight());\n+\n+        final BidResponse bidResponse = bidResponseBuilder\n+                .cur(adheseBid.getExtension().getPrebid().getCpm().getCurrency())\n+                .build();\n+\n+        if (CollectionUtils.isNotEmpty(bidResponse.getSeatbid())\n+                && CollectionUtils.isNotEmpty(bidResponse.getSeatbid().get(0).getBid())) {\n+            bidResponseBuilder.seatbid(Collections.singletonList(\n+                    SeatBid.builder()\n+                            .bid(Collections.singletonList(Bid.builder()\n+                                    .price(price)\n+                                    .w(width)\n+                                    .h(height)\n+                                    .dealid(bidResponse.getSeatbid().get(0).getBid().get(0).getDealid())\n+                                    .crid(bidResponse.getSeatbid().get(0).getBid().get(0).getCrid())\n+                                    .adm(bidResponse.getSeatbid().get(0).getBid().get(0).getAdm())\n+                                    .ext(bidResponse.getSeatbid().get(0).getBid().get(0).getExt())\n+                                    .build()))\n+                            .build()))\n+                    .cur(adheseBid.getExtension().getPrebid().getCpm().getCurrency())\n+                    .build();\n+        }\n+\n+        final BidResponse updatedBidResponse = bidResponseBuilder.build();\n+\n+        if (updatedBidResponse != null && CollectionUtils.isEmpty(updatedBidResponse.getSeatbid())) {\n+            return Result.emptyWithError(BidderError\n+                    .badServerResponse(\"Response resulted in an empty seatBid array. %s.\"));\n+        }\n+\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<BidderBid> bidderBids = updatedBidResponse != null ? updatedBidResponse.getSeatbid().stream()\n+                .filter(Objects::nonNull)\n+                .map(SeatBid::getBid)\n+                .filter(Objects::nonNull)\n+                .flatMap(Collection::stream)\n+                .map(bid -> bidFromResponse(bid, bidRequest.getImp().get(0).getId(), errors))\n+                .filter(Objects::nonNull)\n+                .collect(Collectors.toList()) : null;\n+        return Result.of(bidderBids, errors);\n+    }\n+\n+    private AdheseBid decodeBodyToBid(HttpCall<Void> httpCall) {\n+        try {\n+            return mapper.decodeValue(httpCall.getResponse().getBody(), AdheseBid.class);\n+        } catch (DecodeException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+    }\n+\n+    private AdheseResponseExt decodeBodyToBidResponse(HttpCall<Void> httpCall) {\n+        try {\n+            return mapper.decodeValue(httpCall.getResponse().getBody(), AdheseResponseExt.class);\n+        } catch (DecodeException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+    }\n+\n+    private AdheseOriginData decodeBodyToData(HttpCall<Void> httpCall) {\n+        try {\n+            return mapper.decodeValue(httpCall.getResponse().getBody(), AdheseOriginData.class);\n+        } catch (DecodeException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+    }\n+\n+    private BidResponse.BidResponseBuilder convertAdheseBid(AdheseBid adheseBid, AdheseResponseExt adheseResponseExt,\n+                                                            AdheseOriginData adheseOriginData) {\n+        final ObjectNode adheseExtJson = mapper.mapper().valueToTree(adheseOriginData);\n+\n+        return BidResponse.builder()\n+                .id(adheseResponseExt.getId())\n+                .seatbid(Collections.singletonList(\n+                        SeatBid.builder()\n+                                .bid(Collections.singletonList(Bid.builder()\n+                                        .id(\"1\")\n+                                        .dealid(adheseResponseExt.getOrderId())\n+                                        .crid(adheseResponseExt.getId())\n+                                        .adm(getAdMarkup(adheseBid, adheseResponseExt))\n+                                        .ext(adheseExtJson)\n+                                        .build()))\n+                                .build()));\n+    }\n+\n+    private String getAdMarkup(AdheseBid adheseBid, AdheseResponseExt adheseResponseExt) {\n+        if (adheseResponseExt.getExt().equals(\"js\")) {\n+            if (StringUtils.containsAny(adheseBid.getBody(), \"<script\", \"<div\", \"<html\")) {\n+                String counter = \"\";\n+                if (StringUtils.isNotBlank(adheseResponseExt.getImpressionCounter())) {\n+                    counter = \"<img src='\" + adheseResponseExt.getImpressionCounter()", "originalCommit": "f7af17bd9765d255c458688ae543f06c509eea9c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODMzNzA1OQ==", "url": "https://github.com/prebid/prebid-server-java/pull/770#discussion_r448337059", "bodyText": "They have empty (\"\") seat also", "author": "DGarbar", "createdAt": "2020-07-01T12:44:39Z", "path": "src/main/java/org/prebid/server/bidder/adhese/AdheseBidder.java", "diffHunk": "@@ -0,0 +1,342 @@\n+package org.prebid.server.bidder.adhese;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.adhese.model.AdheseBid;\n+import org.prebid.server.bidder.adhese.model.AdheseOriginData;\n+import org.prebid.server.bidder.adhese.model.AdheseResponseExt;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.ExtUser;\n+import org.prebid.server.proto.openrtb.ext.request.adhese.ExtImpAdhese;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.math.BigDecimal;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.TreeMap;\n+import java.util.stream.Collectors;\n+import java.util.stream.StreamSupport;\n+\n+public class AdheseBidder implements Bidder<Void> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpAdhese>> ADHESE_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpAdhese>>() {\n+            };\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public AdheseBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<Void>>> makeHttpRequests(BidRequest request) {\n+        if (CollectionUtils.isEmpty(request.getImp())) {\n+            return Result.emptyWithError(BidderError.badInput(\"No impression in the bid request\"));\n+        }\n+\n+        ExtImpAdhese extImpAdhese;\n+        try {\n+            extImpAdhese = parseImpExt(request.getImp().get(0));\n+        } catch (PreBidException e) {\n+            return Result.emptyWithError(BidderError.badInput(e.getMessage()));\n+        }\n+\n+        final String uri = buildUrl(request, endpointUrl, extImpAdhese);\n+\n+        return Result.of(Collections.singletonList(\n+                HttpRequest.<Void>builder()\n+                        .method(HttpMethod.GET)\n+                        .uri(uri)\n+                        .body(null)\n+                        .headers(HttpUtil.headers())\n+                        .payload(null)\n+                        .build()),\n+                Collections.emptyList());\n+    }\n+\n+    private ExtImpAdhese parseImpExt(Imp imp) {\n+        try {\n+            return mapper.mapper().convertValue(imp.getExt(), ADHESE_EXT_TYPE_REFERENCE).getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+    }\n+\n+    private String buildUrl(BidRequest request, String endpointUrl, ExtImpAdhese extImpAdhese) {\n+        final String uri = endpointUrl.replace(\"{{AccountId}}\", extImpAdhese.getAccount());\n+        final String slotParameter = String.format(\"/sl%s-%s\", HttpUtil.encodeUrl(extImpAdhese.getLocation()),\n+                HttpUtil.encodeUrl(extImpAdhese.getFormat()));\n+\n+        return String.format(\"%s%s%s%s%s\", uri, slotParameter, getTargetParameters(extImpAdhese),\n+                getGdprParameter(request), getRefererParameter(request));\n+    }\n+\n+    private String getTargetParameters(ExtImpAdhese extImpAdhese) {\n+        if (extImpAdhese.getKeywords().isNull()) {\n+            return \"\";\n+        }\n+        StringBuilder parametersAsString = new StringBuilder();\n+        final Map<String, List<String>> targetParameters = parseTargetParametersAndSort(extImpAdhese.getKeywords());\n+\n+        for (Map.Entry<String, List<String>> targetParametersMap : targetParameters.entrySet()) {\n+            parametersAsString.append(\"/\").append(HttpUtil.encodeUrl(targetParametersMap.getKey()));\n+            for (String parameter : targetParametersMap.getValue()) {\n+                parametersAsString.append(parameter).append(\";\");\n+            }\n+            parametersAsString.deleteCharAt(parametersAsString.lastIndexOf(\";\"));\n+        }\n+\n+        return parametersAsString.toString();\n+    }\n+\n+    private Map<String, List<String>> parseTargetParametersAndSort(JsonNode keywords) {\n+        Map<String, List<String>> sortedMap = new TreeMap<>();\n+        if (keywords != null) {\n+            Iterator<Map.Entry<String, JsonNode>> fields = keywords.fields();\n+            while (fields.hasNext()) {\n+                Map.Entry<String, JsonNode> next = fields.next();\n+                List<String> values = null;\n+                if (next.getValue() instanceof ArrayNode) {\n+                    final ArrayNode arrayNode = (ArrayNode) next.getValue();\n+                    values = StreamSupport.stream(arrayNode.spliterator(), false)\n+                            .map(JsonNode::toString)\n+                            .map(m -> m.substring(1, m.length() - 1))\n+                            .collect(Collectors.toList());\n+                }\n+                sortedMap.put(next.getKey(), values);\n+            }\n+        }\n+        return sortedMap;\n+    }\n+\n+    private String getGdprParameter(BidRequest request) {\n+        if (request.getUser() != null && StringUtils.isNotBlank(extUser(request.getUser().getExt()).getConsent())) {\n+            return \"/xt\" + extUser(request.getUser().getExt()).getConsent();\n+        }\n+        return \"\";\n+    }\n+\n+    private ExtUser extUser(ObjectNode extNode) {\n+        try {\n+            return extNode != null ? mapper.mapper().treeToValue(extNode, ExtUser.class) : null;\n+        } catch (JsonProcessingException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+    }\n+\n+    private String getRefererParameter(BidRequest request) {\n+        if (request.getSite() != null && StringUtils.isNotBlank(request.getSite().getPage())) {\n+            return \"/xf\" + HttpUtil.encodeUrl(request.getSite().getPage());\n+        }\n+        return \"\";\n+    }\n+\n+    @Override\n+    public Result<List<BidderBid>> makeBids(HttpCall<Void> httpCall, BidRequest bidRequest) {\n+        final int statusCode = httpCall.getResponse().getStatusCode();\n+        if (statusCode == HttpResponseStatus.NO_CONTENT.code()) {\n+            return Result.of(Collections.emptyList(), Collections.emptyList());\n+        } else if (statusCode == HttpResponseStatus.BAD_REQUEST.code()) {\n+            return Result.emptyWithError(BidderError.badInput(\"Invalid request.\"));\n+        } else if (statusCode != HttpResponseStatus.OK.code()) {\n+            return Result.emptyWithError(BidderError.badServerResponse(String.format(\"Unexpected HTTP status %s.\",\n+                    statusCode)));\n+        }\n+\n+        final AdheseBid adheseBid;\n+        try {\n+            adheseBid = decodeBodyToBid(httpCall);\n+        } catch (PreBidException e) {\n+            return Result.emptyWithError(BidderError.badServerResponse(e.getMessage()));\n+        }\n+\n+        BidResponse.BidResponseBuilder bidResponseBuilder;\n+        if (adheseBid.getOrigin().equals(\"JERLICIA\")) {\n+            final AdheseResponseExt adheseResponseExt;\n+            final AdheseOriginData adheseOriginData;\n+            try {\n+                adheseResponseExt = decodeBodyToBidResponse(httpCall);\n+                adheseOriginData = decodeBodyToData(httpCall);\n+            } catch (PreBidException e) {\n+                return Result.emptyWithError(BidderError.badServerResponse(e.getMessage()));\n+            }\n+            bidResponseBuilder = convertAdheseBid(adheseBid, adheseResponseExt, adheseOriginData);\n+        } else {\n+            bidResponseBuilder = convertAdheseOpenRtbBid(adheseBid);\n+        }\n+\n+        final BigDecimal price = new BigDecimal(adheseBid.getExtension().getPrebid().getCpm().getAmount());\n+        final Integer width = Integer.valueOf(adheseBid.getWidth());\n+        final Integer height = Integer.valueOf(adheseBid.getHeight());\n+\n+        final BidResponse bidResponse = bidResponseBuilder\n+                .cur(adheseBid.getExtension().getPrebid().getCpm().getCurrency())\n+                .build();\n+\n+        if (CollectionUtils.isNotEmpty(bidResponse.getSeatbid())\n+                && CollectionUtils.isNotEmpty(bidResponse.getSeatbid().get(0).getBid())) {\n+            bidResponseBuilder.seatbid(Collections.singletonList(\n+                    SeatBid.builder()\n+                            .bid(Collections.singletonList(Bid.builder()\n+                                    .price(price)\n+                                    .w(width)\n+                                    .h(height)\n+                                    .dealid(bidResponse.getSeatbid().get(0).getBid().get(0).getDealid())\n+                                    .crid(bidResponse.getSeatbid().get(0).getBid().get(0).getCrid())\n+                                    .adm(bidResponse.getSeatbid().get(0).getBid().get(0).getAdm())\n+                                    .ext(bidResponse.getSeatbid().get(0).getBid().get(0).getExt())\n+                                    .build()))\n+                            .build()))\n+                    .cur(adheseBid.getExtension().getPrebid().getCpm().getCurrency())\n+                    .build();\n+        }\n+\n+        final BidResponse updatedBidResponse = bidResponseBuilder.build();\n+\n+        if (updatedBidResponse != null && CollectionUtils.isEmpty(updatedBidResponse.getSeatbid())) {\n+            return Result.emptyWithError(BidderError\n+                    .badServerResponse(\"Response resulted in an empty seatBid array. %s.\"));\n+        }\n+\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<BidderBid> bidderBids = updatedBidResponse != null ? updatedBidResponse.getSeatbid().stream()\n+                .filter(Objects::nonNull)\n+                .map(SeatBid::getBid)\n+                .filter(Objects::nonNull)\n+                .flatMap(Collection::stream)\n+                .map(bid -> bidFromResponse(bid, bidRequest.getImp().get(0).getId(), errors))\n+                .filter(Objects::nonNull)\n+                .collect(Collectors.toList()) : null;\n+        return Result.of(bidderBids, errors);\n+    }\n+\n+    private AdheseBid decodeBodyToBid(HttpCall<Void> httpCall) {\n+        try {\n+            return mapper.decodeValue(httpCall.getResponse().getBody(), AdheseBid.class);\n+        } catch (DecodeException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+    }\n+\n+    private AdheseResponseExt decodeBodyToBidResponse(HttpCall<Void> httpCall) {\n+        try {\n+            return mapper.decodeValue(httpCall.getResponse().getBody(), AdheseResponseExt.class);\n+        } catch (DecodeException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+    }\n+\n+    private AdheseOriginData decodeBodyToData(HttpCall<Void> httpCall) {\n+        try {\n+            return mapper.decodeValue(httpCall.getResponse().getBody(), AdheseOriginData.class);\n+        } catch (DecodeException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+    }\n+\n+    private BidResponse.BidResponseBuilder convertAdheseBid(AdheseBid adheseBid, AdheseResponseExt adheseResponseExt,\n+                                                            AdheseOriginData adheseOriginData) {\n+        final ObjectNode adheseExtJson = mapper.mapper().valueToTree(adheseOriginData);\n+\n+        return BidResponse.builder()\n+                .id(adheseResponseExt.getId())\n+                .seatbid(Collections.singletonList(\n+                        SeatBid.builder()\n+                                .bid(Collections.singletonList(Bid.builder()", "originalCommit": "f7af17bd9765d255c458688ae543f06c509eea9c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODMzNzgzOQ==", "url": "https://github.com/prebid/prebid-server-java/pull/770#discussion_r448337839", "bodyText": "toBuilder", "author": "DGarbar", "createdAt": "2020-07-01T12:46:09Z", "path": "src/main/java/org/prebid/server/bidder/adhese/AdheseBidder.java", "diffHunk": "@@ -0,0 +1,342 @@\n+package org.prebid.server.bidder.adhese;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.adhese.model.AdheseBid;\n+import org.prebid.server.bidder.adhese.model.AdheseOriginData;\n+import org.prebid.server.bidder.adhese.model.AdheseResponseExt;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.ExtUser;\n+import org.prebid.server.proto.openrtb.ext.request.adhese.ExtImpAdhese;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.math.BigDecimal;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.TreeMap;\n+import java.util.stream.Collectors;\n+import java.util.stream.StreamSupport;\n+\n+public class AdheseBidder implements Bidder<Void> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpAdhese>> ADHESE_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpAdhese>>() {\n+            };\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public AdheseBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<Void>>> makeHttpRequests(BidRequest request) {\n+        if (CollectionUtils.isEmpty(request.getImp())) {\n+            return Result.emptyWithError(BidderError.badInput(\"No impression in the bid request\"));\n+        }\n+\n+        ExtImpAdhese extImpAdhese;\n+        try {\n+            extImpAdhese = parseImpExt(request.getImp().get(0));\n+        } catch (PreBidException e) {\n+            return Result.emptyWithError(BidderError.badInput(e.getMessage()));\n+        }\n+\n+        final String uri = buildUrl(request, endpointUrl, extImpAdhese);\n+\n+        return Result.of(Collections.singletonList(\n+                HttpRequest.<Void>builder()\n+                        .method(HttpMethod.GET)\n+                        .uri(uri)\n+                        .body(null)\n+                        .headers(HttpUtil.headers())\n+                        .payload(null)\n+                        .build()),\n+                Collections.emptyList());\n+    }\n+\n+    private ExtImpAdhese parseImpExt(Imp imp) {\n+        try {\n+            return mapper.mapper().convertValue(imp.getExt(), ADHESE_EXT_TYPE_REFERENCE).getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+    }\n+\n+    private String buildUrl(BidRequest request, String endpointUrl, ExtImpAdhese extImpAdhese) {\n+        final String uri = endpointUrl.replace(\"{{AccountId}}\", extImpAdhese.getAccount());\n+        final String slotParameter = String.format(\"/sl%s-%s\", HttpUtil.encodeUrl(extImpAdhese.getLocation()),\n+                HttpUtil.encodeUrl(extImpAdhese.getFormat()));\n+\n+        return String.format(\"%s%s%s%s%s\", uri, slotParameter, getTargetParameters(extImpAdhese),\n+                getGdprParameter(request), getRefererParameter(request));\n+    }\n+\n+    private String getTargetParameters(ExtImpAdhese extImpAdhese) {\n+        if (extImpAdhese.getKeywords().isNull()) {\n+            return \"\";\n+        }\n+        StringBuilder parametersAsString = new StringBuilder();\n+        final Map<String, List<String>> targetParameters = parseTargetParametersAndSort(extImpAdhese.getKeywords());\n+\n+        for (Map.Entry<String, List<String>> targetParametersMap : targetParameters.entrySet()) {\n+            parametersAsString.append(\"/\").append(HttpUtil.encodeUrl(targetParametersMap.getKey()));\n+            for (String parameter : targetParametersMap.getValue()) {\n+                parametersAsString.append(parameter).append(\";\");\n+            }\n+            parametersAsString.deleteCharAt(parametersAsString.lastIndexOf(\";\"));\n+        }\n+\n+        return parametersAsString.toString();\n+    }\n+\n+    private Map<String, List<String>> parseTargetParametersAndSort(JsonNode keywords) {\n+        Map<String, List<String>> sortedMap = new TreeMap<>();\n+        if (keywords != null) {\n+            Iterator<Map.Entry<String, JsonNode>> fields = keywords.fields();\n+            while (fields.hasNext()) {\n+                Map.Entry<String, JsonNode> next = fields.next();\n+                List<String> values = null;\n+                if (next.getValue() instanceof ArrayNode) {\n+                    final ArrayNode arrayNode = (ArrayNode) next.getValue();\n+                    values = StreamSupport.stream(arrayNode.spliterator(), false)\n+                            .map(JsonNode::toString)\n+                            .map(m -> m.substring(1, m.length() - 1))\n+                            .collect(Collectors.toList());\n+                }\n+                sortedMap.put(next.getKey(), values);\n+            }\n+        }\n+        return sortedMap;\n+    }\n+\n+    private String getGdprParameter(BidRequest request) {\n+        if (request.getUser() != null && StringUtils.isNotBlank(extUser(request.getUser().getExt()).getConsent())) {\n+            return \"/xt\" + extUser(request.getUser().getExt()).getConsent();\n+        }\n+        return \"\";\n+    }\n+\n+    private ExtUser extUser(ObjectNode extNode) {\n+        try {\n+            return extNode != null ? mapper.mapper().treeToValue(extNode, ExtUser.class) : null;\n+        } catch (JsonProcessingException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+    }\n+\n+    private String getRefererParameter(BidRequest request) {\n+        if (request.getSite() != null && StringUtils.isNotBlank(request.getSite().getPage())) {\n+            return \"/xf\" + HttpUtil.encodeUrl(request.getSite().getPage());\n+        }\n+        return \"\";\n+    }\n+\n+    @Override\n+    public Result<List<BidderBid>> makeBids(HttpCall<Void> httpCall, BidRequest bidRequest) {\n+        final int statusCode = httpCall.getResponse().getStatusCode();\n+        if (statusCode == HttpResponseStatus.NO_CONTENT.code()) {\n+            return Result.of(Collections.emptyList(), Collections.emptyList());\n+        } else if (statusCode == HttpResponseStatus.BAD_REQUEST.code()) {\n+            return Result.emptyWithError(BidderError.badInput(\"Invalid request.\"));\n+        } else if (statusCode != HttpResponseStatus.OK.code()) {\n+            return Result.emptyWithError(BidderError.badServerResponse(String.format(\"Unexpected HTTP status %s.\",\n+                    statusCode)));\n+        }\n+\n+        final AdheseBid adheseBid;\n+        try {\n+            adheseBid = decodeBodyToBid(httpCall);\n+        } catch (PreBidException e) {\n+            return Result.emptyWithError(BidderError.badServerResponse(e.getMessage()));\n+        }\n+\n+        BidResponse.BidResponseBuilder bidResponseBuilder;\n+        if (adheseBid.getOrigin().equals(\"JERLICIA\")) {\n+            final AdheseResponseExt adheseResponseExt;\n+            final AdheseOriginData adheseOriginData;\n+            try {\n+                adheseResponseExt = decodeBodyToBidResponse(httpCall);\n+                adheseOriginData = decodeBodyToData(httpCall);\n+            } catch (PreBidException e) {\n+                return Result.emptyWithError(BidderError.badServerResponse(e.getMessage()));\n+            }\n+            bidResponseBuilder = convertAdheseBid(adheseBid, adheseResponseExt, adheseOriginData);\n+        } else {\n+            bidResponseBuilder = convertAdheseOpenRtbBid(adheseBid);\n+        }\n+\n+        final BigDecimal price = new BigDecimal(adheseBid.getExtension().getPrebid().getCpm().getAmount());\n+        final Integer width = Integer.valueOf(adheseBid.getWidth());\n+        final Integer height = Integer.valueOf(adheseBid.getHeight());\n+\n+        final BidResponse bidResponse = bidResponseBuilder\n+                .cur(adheseBid.getExtension().getPrebid().getCpm().getCurrency())\n+                .build();\n+\n+        if (CollectionUtils.isNotEmpty(bidResponse.getSeatbid())\n+                && CollectionUtils.isNotEmpty(bidResponse.getSeatbid().get(0).getBid())) {\n+            bidResponseBuilder.seatbid(Collections.singletonList(\n+                    SeatBid.builder()\n+                            .bid(Collections.singletonList(Bid.builder()\n+                                    .price(price)\n+                                    .w(width)\n+                                    .h(height)\n+                                    .dealid(bidResponse.getSeatbid().get(0).getBid().get(0).getDealid())\n+                                    .crid(bidResponse.getSeatbid().get(0).getBid().get(0).getCrid())\n+                                    .adm(bidResponse.getSeatbid().get(0).getBid().get(0).getAdm())\n+                                    .ext(bidResponse.getSeatbid().get(0).getBid().get(0).getExt())\n+                                    .build()))\n+                            .build()))\n+                    .cur(adheseBid.getExtension().getPrebid().getCpm().getCurrency())\n+                    .build();\n+        }\n+\n+        final BidResponse updatedBidResponse = bidResponseBuilder.build();\n+\n+        if (updatedBidResponse != null && CollectionUtils.isEmpty(updatedBidResponse.getSeatbid())) {\n+            return Result.emptyWithError(BidderError\n+                    .badServerResponse(\"Response resulted in an empty seatBid array. %s.\"));\n+        }\n+\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<BidderBid> bidderBids = updatedBidResponse != null ? updatedBidResponse.getSeatbid().stream()\n+                .filter(Objects::nonNull)\n+                .map(SeatBid::getBid)\n+                .filter(Objects::nonNull)\n+                .flatMap(Collection::stream)\n+                .map(bid -> bidFromResponse(bid, bidRequest.getImp().get(0).getId(), errors))\n+                .filter(Objects::nonNull)\n+                .collect(Collectors.toList()) : null;\n+        return Result.of(bidderBids, errors);\n+    }\n+\n+    private AdheseBid decodeBodyToBid(HttpCall<Void> httpCall) {\n+        try {\n+            return mapper.decodeValue(httpCall.getResponse().getBody(), AdheseBid.class);\n+        } catch (DecodeException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+    }\n+\n+    private AdheseResponseExt decodeBodyToBidResponse(HttpCall<Void> httpCall) {\n+        try {\n+            return mapper.decodeValue(httpCall.getResponse().getBody(), AdheseResponseExt.class);\n+        } catch (DecodeException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+    }\n+\n+    private AdheseOriginData decodeBodyToData(HttpCall<Void> httpCall) {\n+        try {\n+            return mapper.decodeValue(httpCall.getResponse().getBody(), AdheseOriginData.class);\n+        } catch (DecodeException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+    }\n+\n+    private BidResponse.BidResponseBuilder convertAdheseBid(AdheseBid adheseBid, AdheseResponseExt adheseResponseExt,\n+                                                            AdheseOriginData adheseOriginData) {\n+        final ObjectNode adheseExtJson = mapper.mapper().valueToTree(adheseOriginData);\n+\n+        return BidResponse.builder()\n+                .id(adheseResponseExt.getId())\n+                .seatbid(Collections.singletonList(\n+                        SeatBid.builder()\n+                                .bid(Collections.singletonList(Bid.builder()\n+                                        .id(\"1\")\n+                                        .dealid(adheseResponseExt.getOrderId())\n+                                        .crid(adheseResponseExt.getId())\n+                                        .adm(getAdMarkup(adheseBid, adheseResponseExt))\n+                                        .ext(adheseExtJson)\n+                                        .build()))\n+                                .build()));\n+    }\n+\n+    private String getAdMarkup(AdheseBid adheseBid, AdheseResponseExt adheseResponseExt) {\n+        if (adheseResponseExt.getExt().equals(\"js\")) {\n+            if (StringUtils.containsAny(adheseBid.getBody(), \"<script\", \"<div\", \"<html\")) {\n+                String counter = \"\";\n+                if (StringUtils.isNotBlank(adheseResponseExt.getImpressionCounter())) {\n+                    counter = \"<img src='\" + adheseResponseExt.getImpressionCounter()\n+                            + \"' style='height:1px; width:1px; margin: -1px -1px; display:none;'/>\";\n+                }\n+                return adheseBid.getBody() + counter;\n+            }\n+            if (StringUtils.containsAny(adheseBid.getBody(), \"<?xml\", \"<vast\")) {\n+                return adheseBid.getBody();\n+            }\n+        }\n+        return adheseResponseExt.getTag();\n+    }\n+\n+    private BidResponse.BidResponseBuilder convertAdheseOpenRtbBid(AdheseBid adheseBid) {\n+        BidResponse.BidResponseBuilder bidResponseBuilder = adheseBid.getOriginData().builder();", "originalCommit": "f7af17bd9765d255c458688ae543f06c509eea9c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODMzOTAwNg==", "url": "https://github.com/prebid/prebid-server-java/pull/770#discussion_r448339006", "bodyText": "They do not override anything except adm.\nAdd test for that case, bc you remove other bids, and recreated bid without parameters.", "author": "DGarbar", "createdAt": "2020-07-01T12:48:19Z", "path": "src/main/java/org/prebid/server/bidder/adhese/AdheseBidder.java", "diffHunk": "@@ -0,0 +1,342 @@\n+package org.prebid.server.bidder.adhese;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.adhese.model.AdheseBid;\n+import org.prebid.server.bidder.adhese.model.AdheseOriginData;\n+import org.prebid.server.bidder.adhese.model.AdheseResponseExt;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.ExtUser;\n+import org.prebid.server.proto.openrtb.ext.request.adhese.ExtImpAdhese;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.math.BigDecimal;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.TreeMap;\n+import java.util.stream.Collectors;\n+import java.util.stream.StreamSupport;\n+\n+public class AdheseBidder implements Bidder<Void> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpAdhese>> ADHESE_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpAdhese>>() {\n+            };\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public AdheseBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<Void>>> makeHttpRequests(BidRequest request) {\n+        if (CollectionUtils.isEmpty(request.getImp())) {\n+            return Result.emptyWithError(BidderError.badInput(\"No impression in the bid request\"));\n+        }\n+\n+        ExtImpAdhese extImpAdhese;\n+        try {\n+            extImpAdhese = parseImpExt(request.getImp().get(0));\n+        } catch (PreBidException e) {\n+            return Result.emptyWithError(BidderError.badInput(e.getMessage()));\n+        }\n+\n+        final String uri = buildUrl(request, endpointUrl, extImpAdhese);\n+\n+        return Result.of(Collections.singletonList(\n+                HttpRequest.<Void>builder()\n+                        .method(HttpMethod.GET)\n+                        .uri(uri)\n+                        .body(null)\n+                        .headers(HttpUtil.headers())\n+                        .payload(null)\n+                        .build()),\n+                Collections.emptyList());\n+    }\n+\n+    private ExtImpAdhese parseImpExt(Imp imp) {\n+        try {\n+            return mapper.mapper().convertValue(imp.getExt(), ADHESE_EXT_TYPE_REFERENCE).getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+    }\n+\n+    private String buildUrl(BidRequest request, String endpointUrl, ExtImpAdhese extImpAdhese) {\n+        final String uri = endpointUrl.replace(\"{{AccountId}}\", extImpAdhese.getAccount());\n+        final String slotParameter = String.format(\"/sl%s-%s\", HttpUtil.encodeUrl(extImpAdhese.getLocation()),\n+                HttpUtil.encodeUrl(extImpAdhese.getFormat()));\n+\n+        return String.format(\"%s%s%s%s%s\", uri, slotParameter, getTargetParameters(extImpAdhese),\n+                getGdprParameter(request), getRefererParameter(request));\n+    }\n+\n+    private String getTargetParameters(ExtImpAdhese extImpAdhese) {\n+        if (extImpAdhese.getKeywords().isNull()) {\n+            return \"\";\n+        }\n+        StringBuilder parametersAsString = new StringBuilder();\n+        final Map<String, List<String>> targetParameters = parseTargetParametersAndSort(extImpAdhese.getKeywords());\n+\n+        for (Map.Entry<String, List<String>> targetParametersMap : targetParameters.entrySet()) {\n+            parametersAsString.append(\"/\").append(HttpUtil.encodeUrl(targetParametersMap.getKey()));\n+            for (String parameter : targetParametersMap.getValue()) {\n+                parametersAsString.append(parameter).append(\";\");\n+            }\n+            parametersAsString.deleteCharAt(parametersAsString.lastIndexOf(\";\"));\n+        }\n+\n+        return parametersAsString.toString();\n+    }\n+\n+    private Map<String, List<String>> parseTargetParametersAndSort(JsonNode keywords) {\n+        Map<String, List<String>> sortedMap = new TreeMap<>();\n+        if (keywords != null) {\n+            Iterator<Map.Entry<String, JsonNode>> fields = keywords.fields();\n+            while (fields.hasNext()) {\n+                Map.Entry<String, JsonNode> next = fields.next();\n+                List<String> values = null;\n+                if (next.getValue() instanceof ArrayNode) {\n+                    final ArrayNode arrayNode = (ArrayNode) next.getValue();\n+                    values = StreamSupport.stream(arrayNode.spliterator(), false)\n+                            .map(JsonNode::toString)\n+                            .map(m -> m.substring(1, m.length() - 1))\n+                            .collect(Collectors.toList());\n+                }\n+                sortedMap.put(next.getKey(), values);\n+            }\n+        }\n+        return sortedMap;\n+    }\n+\n+    private String getGdprParameter(BidRequest request) {\n+        if (request.getUser() != null && StringUtils.isNotBlank(extUser(request.getUser().getExt()).getConsent())) {\n+            return \"/xt\" + extUser(request.getUser().getExt()).getConsent();\n+        }\n+        return \"\";\n+    }\n+\n+    private ExtUser extUser(ObjectNode extNode) {\n+        try {\n+            return extNode != null ? mapper.mapper().treeToValue(extNode, ExtUser.class) : null;\n+        } catch (JsonProcessingException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+    }\n+\n+    private String getRefererParameter(BidRequest request) {\n+        if (request.getSite() != null && StringUtils.isNotBlank(request.getSite().getPage())) {\n+            return \"/xf\" + HttpUtil.encodeUrl(request.getSite().getPage());\n+        }\n+        return \"\";\n+    }\n+\n+    @Override\n+    public Result<List<BidderBid>> makeBids(HttpCall<Void> httpCall, BidRequest bidRequest) {\n+        final int statusCode = httpCall.getResponse().getStatusCode();\n+        if (statusCode == HttpResponseStatus.NO_CONTENT.code()) {\n+            return Result.of(Collections.emptyList(), Collections.emptyList());\n+        } else if (statusCode == HttpResponseStatus.BAD_REQUEST.code()) {\n+            return Result.emptyWithError(BidderError.badInput(\"Invalid request.\"));\n+        } else if (statusCode != HttpResponseStatus.OK.code()) {\n+            return Result.emptyWithError(BidderError.badServerResponse(String.format(\"Unexpected HTTP status %s.\",\n+                    statusCode)));\n+        }\n+\n+        final AdheseBid adheseBid;\n+        try {\n+            adheseBid = decodeBodyToBid(httpCall);\n+        } catch (PreBidException e) {\n+            return Result.emptyWithError(BidderError.badServerResponse(e.getMessage()));\n+        }\n+\n+        BidResponse.BidResponseBuilder bidResponseBuilder;\n+        if (adheseBid.getOrigin().equals(\"JERLICIA\")) {\n+            final AdheseResponseExt adheseResponseExt;\n+            final AdheseOriginData adheseOriginData;\n+            try {\n+                adheseResponseExt = decodeBodyToBidResponse(httpCall);\n+                adheseOriginData = decodeBodyToData(httpCall);\n+            } catch (PreBidException e) {\n+                return Result.emptyWithError(BidderError.badServerResponse(e.getMessage()));\n+            }\n+            bidResponseBuilder = convertAdheseBid(adheseBid, adheseResponseExt, adheseOriginData);\n+        } else {\n+            bidResponseBuilder = convertAdheseOpenRtbBid(adheseBid);\n+        }\n+\n+        final BigDecimal price = new BigDecimal(adheseBid.getExtension().getPrebid().getCpm().getAmount());\n+        final Integer width = Integer.valueOf(adheseBid.getWidth());\n+        final Integer height = Integer.valueOf(adheseBid.getHeight());\n+\n+        final BidResponse bidResponse = bidResponseBuilder\n+                .cur(adheseBid.getExtension().getPrebid().getCpm().getCurrency())\n+                .build();\n+\n+        if (CollectionUtils.isNotEmpty(bidResponse.getSeatbid())\n+                && CollectionUtils.isNotEmpty(bidResponse.getSeatbid().get(0).getBid())) {\n+            bidResponseBuilder.seatbid(Collections.singletonList(\n+                    SeatBid.builder()\n+                            .bid(Collections.singletonList(Bid.builder()\n+                                    .price(price)\n+                                    .w(width)\n+                                    .h(height)\n+                                    .dealid(bidResponse.getSeatbid().get(0).getBid().get(0).getDealid())\n+                                    .crid(bidResponse.getSeatbid().get(0).getBid().get(0).getCrid())\n+                                    .adm(bidResponse.getSeatbid().get(0).getBid().get(0).getAdm())\n+                                    .ext(bidResponse.getSeatbid().get(0).getBid().get(0).getExt())\n+                                    .build()))\n+                            .build()))\n+                    .cur(adheseBid.getExtension().getPrebid().getCpm().getCurrency())\n+                    .build();\n+        }\n+\n+        final BidResponse updatedBidResponse = bidResponseBuilder.build();\n+\n+        if (updatedBidResponse != null && CollectionUtils.isEmpty(updatedBidResponse.getSeatbid())) {\n+            return Result.emptyWithError(BidderError\n+                    .badServerResponse(\"Response resulted in an empty seatBid array. %s.\"));\n+        }\n+\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<BidderBid> bidderBids = updatedBidResponse != null ? updatedBidResponse.getSeatbid().stream()\n+                .filter(Objects::nonNull)\n+                .map(SeatBid::getBid)\n+                .filter(Objects::nonNull)\n+                .flatMap(Collection::stream)\n+                .map(bid -> bidFromResponse(bid, bidRequest.getImp().get(0).getId(), errors))\n+                .filter(Objects::nonNull)\n+                .collect(Collectors.toList()) : null;\n+        return Result.of(bidderBids, errors);\n+    }\n+\n+    private AdheseBid decodeBodyToBid(HttpCall<Void> httpCall) {\n+        try {\n+            return mapper.decodeValue(httpCall.getResponse().getBody(), AdheseBid.class);\n+        } catch (DecodeException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+    }\n+\n+    private AdheseResponseExt decodeBodyToBidResponse(HttpCall<Void> httpCall) {\n+        try {\n+            return mapper.decodeValue(httpCall.getResponse().getBody(), AdheseResponseExt.class);\n+        } catch (DecodeException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+    }\n+\n+    private AdheseOriginData decodeBodyToData(HttpCall<Void> httpCall) {\n+        try {\n+            return mapper.decodeValue(httpCall.getResponse().getBody(), AdheseOriginData.class);\n+        } catch (DecodeException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+    }\n+\n+    private BidResponse.BidResponseBuilder convertAdheseBid(AdheseBid adheseBid, AdheseResponseExt adheseResponseExt,\n+                                                            AdheseOriginData adheseOriginData) {\n+        final ObjectNode adheseExtJson = mapper.mapper().valueToTree(adheseOriginData);\n+\n+        return BidResponse.builder()\n+                .id(adheseResponseExt.getId())\n+                .seatbid(Collections.singletonList(\n+                        SeatBid.builder()\n+                                .bid(Collections.singletonList(Bid.builder()\n+                                        .id(\"1\")\n+                                        .dealid(adheseResponseExt.getOrderId())\n+                                        .crid(adheseResponseExt.getId())\n+                                        .adm(getAdMarkup(adheseBid, adheseResponseExt))\n+                                        .ext(adheseExtJson)\n+                                        .build()))\n+                                .build()));\n+    }\n+\n+    private String getAdMarkup(AdheseBid adheseBid, AdheseResponseExt adheseResponseExt) {\n+        if (adheseResponseExt.getExt().equals(\"js\")) {\n+            if (StringUtils.containsAny(adheseBid.getBody(), \"<script\", \"<div\", \"<html\")) {\n+                String counter = \"\";\n+                if (StringUtils.isNotBlank(adheseResponseExt.getImpressionCounter())) {\n+                    counter = \"<img src='\" + adheseResponseExt.getImpressionCounter()\n+                            + \"' style='height:1px; width:1px; margin: -1px -1px; display:none;'/>\";\n+                }\n+                return adheseBid.getBody() + counter;\n+            }\n+            if (StringUtils.containsAny(adheseBid.getBody(), \"<?xml\", \"<vast\")) {\n+                return adheseBid.getBody();\n+            }\n+        }\n+        return adheseResponseExt.getTag();\n+    }\n+\n+    private BidResponse.BidResponseBuilder convertAdheseOpenRtbBid(AdheseBid adheseBid) {\n+        BidResponse.BidResponseBuilder bidResponseBuilder = adheseBid.getOriginData().builder();\n+        if (CollectionUtils.isNotEmpty(adheseBid.getOriginData().getSeatbid())\n+                && CollectionUtils.isNotEmpty(adheseBid.getOriginData().getSeatbid().get(0).getBid())) {\n+            bidResponseBuilder = bidResponseBuilder\n+                    .seatbid(Collections.singletonList(\n+                            SeatBid.builder()\n+                                    .bid(Collections.singletonList(Bid.builder().adm(adheseBid.getBody()).build()))\n+                                    .build()));", "originalCommit": "f7af17bd9765d255c458688ae543f06c509eea9c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODM0MDQzMw==", "url": "https://github.com/prebid/prebid-server-java/pull/770#discussion_r448340433", "bodyText": "returning builder not the best idea, bc you can override parameters that you already setup. (like you did in 193 line. Pls fix this", "author": "DGarbar", "createdAt": "2020-07-01T12:50:53Z", "path": "src/main/java/org/prebid/server/bidder/adhese/AdheseBidder.java", "diffHunk": "@@ -0,0 +1,342 @@\n+package org.prebid.server.bidder.adhese;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.adhese.model.AdheseBid;\n+import org.prebid.server.bidder.adhese.model.AdheseOriginData;\n+import org.prebid.server.bidder.adhese.model.AdheseResponseExt;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.ExtUser;\n+import org.prebid.server.proto.openrtb.ext.request.adhese.ExtImpAdhese;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.math.BigDecimal;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.TreeMap;\n+import java.util.stream.Collectors;\n+import java.util.stream.StreamSupport;\n+\n+public class AdheseBidder implements Bidder<Void> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpAdhese>> ADHESE_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpAdhese>>() {\n+            };\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public AdheseBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<Void>>> makeHttpRequests(BidRequest request) {\n+        if (CollectionUtils.isEmpty(request.getImp())) {\n+            return Result.emptyWithError(BidderError.badInput(\"No impression in the bid request\"));\n+        }\n+\n+        ExtImpAdhese extImpAdhese;\n+        try {\n+            extImpAdhese = parseImpExt(request.getImp().get(0));\n+        } catch (PreBidException e) {\n+            return Result.emptyWithError(BidderError.badInput(e.getMessage()));\n+        }\n+\n+        final String uri = buildUrl(request, endpointUrl, extImpAdhese);\n+\n+        return Result.of(Collections.singletonList(\n+                HttpRequest.<Void>builder()\n+                        .method(HttpMethod.GET)\n+                        .uri(uri)\n+                        .body(null)\n+                        .headers(HttpUtil.headers())\n+                        .payload(null)\n+                        .build()),\n+                Collections.emptyList());\n+    }\n+\n+    private ExtImpAdhese parseImpExt(Imp imp) {\n+        try {\n+            return mapper.mapper().convertValue(imp.getExt(), ADHESE_EXT_TYPE_REFERENCE).getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+    }\n+\n+    private String buildUrl(BidRequest request, String endpointUrl, ExtImpAdhese extImpAdhese) {\n+        final String uri = endpointUrl.replace(\"{{AccountId}}\", extImpAdhese.getAccount());\n+        final String slotParameter = String.format(\"/sl%s-%s\", HttpUtil.encodeUrl(extImpAdhese.getLocation()),\n+                HttpUtil.encodeUrl(extImpAdhese.getFormat()));\n+\n+        return String.format(\"%s%s%s%s%s\", uri, slotParameter, getTargetParameters(extImpAdhese),\n+                getGdprParameter(request), getRefererParameter(request));\n+    }\n+\n+    private String getTargetParameters(ExtImpAdhese extImpAdhese) {\n+        if (extImpAdhese.getKeywords().isNull()) {\n+            return \"\";\n+        }\n+        StringBuilder parametersAsString = new StringBuilder();\n+        final Map<String, List<String>> targetParameters = parseTargetParametersAndSort(extImpAdhese.getKeywords());\n+\n+        for (Map.Entry<String, List<String>> targetParametersMap : targetParameters.entrySet()) {\n+            parametersAsString.append(\"/\").append(HttpUtil.encodeUrl(targetParametersMap.getKey()));\n+            for (String parameter : targetParametersMap.getValue()) {\n+                parametersAsString.append(parameter).append(\";\");\n+            }\n+            parametersAsString.deleteCharAt(parametersAsString.lastIndexOf(\";\"));\n+        }\n+\n+        return parametersAsString.toString();\n+    }\n+\n+    private Map<String, List<String>> parseTargetParametersAndSort(JsonNode keywords) {\n+        Map<String, List<String>> sortedMap = new TreeMap<>();\n+        if (keywords != null) {\n+            Iterator<Map.Entry<String, JsonNode>> fields = keywords.fields();\n+            while (fields.hasNext()) {\n+                Map.Entry<String, JsonNode> next = fields.next();\n+                List<String> values = null;\n+                if (next.getValue() instanceof ArrayNode) {\n+                    final ArrayNode arrayNode = (ArrayNode) next.getValue();\n+                    values = StreamSupport.stream(arrayNode.spliterator(), false)\n+                            .map(JsonNode::toString)\n+                            .map(m -> m.substring(1, m.length() - 1))\n+                            .collect(Collectors.toList());\n+                }\n+                sortedMap.put(next.getKey(), values);\n+            }\n+        }\n+        return sortedMap;\n+    }\n+\n+    private String getGdprParameter(BidRequest request) {\n+        if (request.getUser() != null && StringUtils.isNotBlank(extUser(request.getUser().getExt()).getConsent())) {\n+            return \"/xt\" + extUser(request.getUser().getExt()).getConsent();\n+        }\n+        return \"\";\n+    }\n+\n+    private ExtUser extUser(ObjectNode extNode) {\n+        try {\n+            return extNode != null ? mapper.mapper().treeToValue(extNode, ExtUser.class) : null;\n+        } catch (JsonProcessingException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+    }\n+\n+    private String getRefererParameter(BidRequest request) {\n+        if (request.getSite() != null && StringUtils.isNotBlank(request.getSite().getPage())) {\n+            return \"/xf\" + HttpUtil.encodeUrl(request.getSite().getPage());\n+        }\n+        return \"\";\n+    }\n+\n+    @Override\n+    public Result<List<BidderBid>> makeBids(HttpCall<Void> httpCall, BidRequest bidRequest) {\n+        final int statusCode = httpCall.getResponse().getStatusCode();\n+        if (statusCode == HttpResponseStatus.NO_CONTENT.code()) {\n+            return Result.of(Collections.emptyList(), Collections.emptyList());\n+        } else if (statusCode == HttpResponseStatus.BAD_REQUEST.code()) {\n+            return Result.emptyWithError(BidderError.badInput(\"Invalid request.\"));\n+        } else if (statusCode != HttpResponseStatus.OK.code()) {\n+            return Result.emptyWithError(BidderError.badServerResponse(String.format(\"Unexpected HTTP status %s.\",\n+                    statusCode)));\n+        }\n+\n+        final AdheseBid adheseBid;\n+        try {\n+            adheseBid = decodeBodyToBid(httpCall);\n+        } catch (PreBidException e) {\n+            return Result.emptyWithError(BidderError.badServerResponse(e.getMessage()));\n+        }\n+\n+        BidResponse.BidResponseBuilder bidResponseBuilder;\n+        if (adheseBid.getOrigin().equals(\"JERLICIA\")) {\n+            final AdheseResponseExt adheseResponseExt;\n+            final AdheseOriginData adheseOriginData;\n+            try {\n+                adheseResponseExt = decodeBodyToBidResponse(httpCall);\n+                adheseOriginData = decodeBodyToData(httpCall);\n+            } catch (PreBidException e) {\n+                return Result.emptyWithError(BidderError.badServerResponse(e.getMessage()));\n+            }\n+            bidResponseBuilder = convertAdheseBid(adheseBid, adheseResponseExt, adheseOriginData);\n+        } else {\n+            bidResponseBuilder = convertAdheseOpenRtbBid(adheseBid);\n+        }\n+\n+        final BigDecimal price = new BigDecimal(adheseBid.getExtension().getPrebid().getCpm().getAmount());\n+        final Integer width = Integer.valueOf(adheseBid.getWidth());\n+        final Integer height = Integer.valueOf(adheseBid.getHeight());\n+\n+        final BidResponse bidResponse = bidResponseBuilder\n+                .cur(adheseBid.getExtension().getPrebid().getCpm().getCurrency())\n+                .build();\n+\n+        if (CollectionUtils.isNotEmpty(bidResponse.getSeatbid())\n+                && CollectionUtils.isNotEmpty(bidResponse.getSeatbid().get(0).getBid())) {\n+            bidResponseBuilder.seatbid(Collections.singletonList(\n+                    SeatBid.builder()\n+                            .bid(Collections.singletonList(Bid.builder()\n+                                    .price(price)\n+                                    .w(width)\n+                                    .h(height)\n+                                    .dealid(bidResponse.getSeatbid().get(0).getBid().get(0).getDealid())\n+                                    .crid(bidResponse.getSeatbid().get(0).getBid().get(0).getCrid())\n+                                    .adm(bidResponse.getSeatbid().get(0).getBid().get(0).getAdm())\n+                                    .ext(bidResponse.getSeatbid().get(0).getBid().get(0).getExt())\n+                                    .build()))\n+                            .build()))\n+                    .cur(adheseBid.getExtension().getPrebid().getCpm().getCurrency())\n+                    .build();\n+        }\n+\n+        final BidResponse updatedBidResponse = bidResponseBuilder.build();\n+\n+        if (updatedBidResponse != null && CollectionUtils.isEmpty(updatedBidResponse.getSeatbid())) {\n+            return Result.emptyWithError(BidderError\n+                    .badServerResponse(\"Response resulted in an empty seatBid array. %s.\"));\n+        }\n+\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<BidderBid> bidderBids = updatedBidResponse != null ? updatedBidResponse.getSeatbid().stream()\n+                .filter(Objects::nonNull)\n+                .map(SeatBid::getBid)\n+                .filter(Objects::nonNull)\n+                .flatMap(Collection::stream)\n+                .map(bid -> bidFromResponse(bid, bidRequest.getImp().get(0).getId(), errors))\n+                .filter(Objects::nonNull)\n+                .collect(Collectors.toList()) : null;\n+        return Result.of(bidderBids, errors);\n+    }\n+\n+    private AdheseBid decodeBodyToBid(HttpCall<Void> httpCall) {\n+        try {\n+            return mapper.decodeValue(httpCall.getResponse().getBody(), AdheseBid.class);\n+        } catch (DecodeException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+    }\n+\n+    private AdheseResponseExt decodeBodyToBidResponse(HttpCall<Void> httpCall) {\n+        try {\n+            return mapper.decodeValue(httpCall.getResponse().getBody(), AdheseResponseExt.class);\n+        } catch (DecodeException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+    }\n+\n+    private AdheseOriginData decodeBodyToData(HttpCall<Void> httpCall) {\n+        try {\n+            return mapper.decodeValue(httpCall.getResponse().getBody(), AdheseOriginData.class);\n+        } catch (DecodeException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+    }\n+\n+    private BidResponse.BidResponseBuilder convertAdheseBid(AdheseBid adheseBid, AdheseResponseExt adheseResponseExt,\n+                                                            AdheseOriginData adheseOriginData) {\n+        final ObjectNode adheseExtJson = mapper.mapper().valueToTree(adheseOriginData);\n+\n+        return BidResponse.builder()\n+                .id(adheseResponseExt.getId())\n+                .seatbid(Collections.singletonList(\n+                        SeatBid.builder()\n+                                .bid(Collections.singletonList(Bid.builder()\n+                                        .id(\"1\")\n+                                        .dealid(adheseResponseExt.getOrderId())\n+                                        .crid(adheseResponseExt.getId())\n+                                        .adm(getAdMarkup(adheseBid, adheseResponseExt))\n+                                        .ext(adheseExtJson)\n+                                        .build()))\n+                                .build()));\n+    }\n+\n+    private String getAdMarkup(AdheseBid adheseBid, AdheseResponseExt adheseResponseExt) {\n+        if (adheseResponseExt.getExt().equals(\"js\")) {\n+            if (StringUtils.containsAny(adheseBid.getBody(), \"<script\", \"<div\", \"<html\")) {\n+                String counter = \"\";\n+                if (StringUtils.isNotBlank(adheseResponseExt.getImpressionCounter())) {\n+                    counter = \"<img src='\" + adheseResponseExt.getImpressionCounter()\n+                            + \"' style='height:1px; width:1px; margin: -1px -1px; display:none;'/>\";\n+                }\n+                return adheseBid.getBody() + counter;\n+            }\n+            if (StringUtils.containsAny(adheseBid.getBody(), \"<?xml\", \"<vast\")) {\n+                return adheseBid.getBody();\n+            }\n+        }\n+        return adheseResponseExt.getTag();\n+    }\n+\n+    private BidResponse.BidResponseBuilder convertAdheseOpenRtbBid(AdheseBid adheseBid) {\n+        BidResponse.BidResponseBuilder bidResponseBuilder = adheseBid.getOriginData().builder();\n+        if (CollectionUtils.isNotEmpty(adheseBid.getOriginData().getSeatbid())\n+                && CollectionUtils.isNotEmpty(adheseBid.getOriginData().getSeatbid().get(0).getBid())) {\n+            bidResponseBuilder = bidResponseBuilder\n+                    .seatbid(Collections.singletonList(\n+                            SeatBid.builder()\n+                                    .bid(Collections.singletonList(Bid.builder().adm(adheseBid.getBody()).build()))\n+                                    .build()));\n+        }\n+        return bidResponseBuilder;", "originalCommit": "f7af17bd9765d255c458688ae543f06c509eea9c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODM0MjQxMg==", "url": "https://github.com/prebid/prebid-server-java/pull/770#discussion_r448342412", "bodyText": "So you a calling .build on a builder ant then use again same builder. It is seems very hard to read.\nRefactor.", "author": "DGarbar", "createdAt": "2020-07-01T12:54:23Z", "path": "src/main/java/org/prebid/server/bidder/adhese/AdheseBidder.java", "diffHunk": "@@ -0,0 +1,342 @@\n+package org.prebid.server.bidder.adhese;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.adhese.model.AdheseBid;\n+import org.prebid.server.bidder.adhese.model.AdheseOriginData;\n+import org.prebid.server.bidder.adhese.model.AdheseResponseExt;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.ExtUser;\n+import org.prebid.server.proto.openrtb.ext.request.adhese.ExtImpAdhese;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.math.BigDecimal;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.TreeMap;\n+import java.util.stream.Collectors;\n+import java.util.stream.StreamSupport;\n+\n+public class AdheseBidder implements Bidder<Void> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpAdhese>> ADHESE_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpAdhese>>() {\n+            };\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public AdheseBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<Void>>> makeHttpRequests(BidRequest request) {\n+        if (CollectionUtils.isEmpty(request.getImp())) {\n+            return Result.emptyWithError(BidderError.badInput(\"No impression in the bid request\"));\n+        }\n+\n+        ExtImpAdhese extImpAdhese;\n+        try {\n+            extImpAdhese = parseImpExt(request.getImp().get(0));\n+        } catch (PreBidException e) {\n+            return Result.emptyWithError(BidderError.badInput(e.getMessage()));\n+        }\n+\n+        final String uri = buildUrl(request, endpointUrl, extImpAdhese);\n+\n+        return Result.of(Collections.singletonList(\n+                HttpRequest.<Void>builder()\n+                        .method(HttpMethod.GET)\n+                        .uri(uri)\n+                        .body(null)\n+                        .headers(HttpUtil.headers())\n+                        .payload(null)\n+                        .build()),\n+                Collections.emptyList());\n+    }\n+\n+    private ExtImpAdhese parseImpExt(Imp imp) {\n+        try {\n+            return mapper.mapper().convertValue(imp.getExt(), ADHESE_EXT_TYPE_REFERENCE).getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+    }\n+\n+    private String buildUrl(BidRequest request, String endpointUrl, ExtImpAdhese extImpAdhese) {\n+        final String uri = endpointUrl.replace(\"{{AccountId}}\", extImpAdhese.getAccount());\n+        final String slotParameter = String.format(\"/sl%s-%s\", HttpUtil.encodeUrl(extImpAdhese.getLocation()),\n+                HttpUtil.encodeUrl(extImpAdhese.getFormat()));\n+\n+        return String.format(\"%s%s%s%s%s\", uri, slotParameter, getTargetParameters(extImpAdhese),\n+                getGdprParameter(request), getRefererParameter(request));\n+    }\n+\n+    private String getTargetParameters(ExtImpAdhese extImpAdhese) {\n+        if (extImpAdhese.getKeywords().isNull()) {\n+            return \"\";\n+        }\n+        StringBuilder parametersAsString = new StringBuilder();\n+        final Map<String, List<String>> targetParameters = parseTargetParametersAndSort(extImpAdhese.getKeywords());\n+\n+        for (Map.Entry<String, List<String>> targetParametersMap : targetParameters.entrySet()) {\n+            parametersAsString.append(\"/\").append(HttpUtil.encodeUrl(targetParametersMap.getKey()));\n+            for (String parameter : targetParametersMap.getValue()) {\n+                parametersAsString.append(parameter).append(\";\");\n+            }\n+            parametersAsString.deleteCharAt(parametersAsString.lastIndexOf(\";\"));\n+        }\n+\n+        return parametersAsString.toString();\n+    }\n+\n+    private Map<String, List<String>> parseTargetParametersAndSort(JsonNode keywords) {\n+        Map<String, List<String>> sortedMap = new TreeMap<>();\n+        if (keywords != null) {\n+            Iterator<Map.Entry<String, JsonNode>> fields = keywords.fields();\n+            while (fields.hasNext()) {\n+                Map.Entry<String, JsonNode> next = fields.next();\n+                List<String> values = null;\n+                if (next.getValue() instanceof ArrayNode) {\n+                    final ArrayNode arrayNode = (ArrayNode) next.getValue();\n+                    values = StreamSupport.stream(arrayNode.spliterator(), false)\n+                            .map(JsonNode::toString)\n+                            .map(m -> m.substring(1, m.length() - 1))\n+                            .collect(Collectors.toList());\n+                }\n+                sortedMap.put(next.getKey(), values);\n+            }\n+        }\n+        return sortedMap;\n+    }\n+\n+    private String getGdprParameter(BidRequest request) {\n+        if (request.getUser() != null && StringUtils.isNotBlank(extUser(request.getUser().getExt()).getConsent())) {\n+            return \"/xt\" + extUser(request.getUser().getExt()).getConsent();\n+        }\n+        return \"\";\n+    }\n+\n+    private ExtUser extUser(ObjectNode extNode) {\n+        try {\n+            return extNode != null ? mapper.mapper().treeToValue(extNode, ExtUser.class) : null;\n+        } catch (JsonProcessingException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+    }\n+\n+    private String getRefererParameter(BidRequest request) {\n+        if (request.getSite() != null && StringUtils.isNotBlank(request.getSite().getPage())) {\n+            return \"/xf\" + HttpUtil.encodeUrl(request.getSite().getPage());\n+        }\n+        return \"\";\n+    }\n+\n+    @Override\n+    public Result<List<BidderBid>> makeBids(HttpCall<Void> httpCall, BidRequest bidRequest) {\n+        final int statusCode = httpCall.getResponse().getStatusCode();\n+        if (statusCode == HttpResponseStatus.NO_CONTENT.code()) {\n+            return Result.of(Collections.emptyList(), Collections.emptyList());\n+        } else if (statusCode == HttpResponseStatus.BAD_REQUEST.code()) {\n+            return Result.emptyWithError(BidderError.badInput(\"Invalid request.\"));\n+        } else if (statusCode != HttpResponseStatus.OK.code()) {\n+            return Result.emptyWithError(BidderError.badServerResponse(String.format(\"Unexpected HTTP status %s.\",\n+                    statusCode)));\n+        }\n+\n+        final AdheseBid adheseBid;\n+        try {\n+            adheseBid = decodeBodyToBid(httpCall);\n+        } catch (PreBidException e) {\n+            return Result.emptyWithError(BidderError.badServerResponse(e.getMessage()));\n+        }\n+\n+        BidResponse.BidResponseBuilder bidResponseBuilder;\n+        if (adheseBid.getOrigin().equals(\"JERLICIA\")) {\n+            final AdheseResponseExt adheseResponseExt;\n+            final AdheseOriginData adheseOriginData;\n+            try {\n+                adheseResponseExt = decodeBodyToBidResponse(httpCall);\n+                adheseOriginData = decodeBodyToData(httpCall);\n+            } catch (PreBidException e) {\n+                return Result.emptyWithError(BidderError.badServerResponse(e.getMessage()));\n+            }\n+            bidResponseBuilder = convertAdheseBid(adheseBid, adheseResponseExt, adheseOriginData);\n+        } else {\n+            bidResponseBuilder = convertAdheseOpenRtbBid(adheseBid);\n+        }\n+\n+        final BigDecimal price = new BigDecimal(adheseBid.getExtension().getPrebid().getCpm().getAmount());\n+        final Integer width = Integer.valueOf(adheseBid.getWidth());\n+        final Integer height = Integer.valueOf(adheseBid.getHeight());\n+\n+        final BidResponse bidResponse = bidResponseBuilder\n+                .cur(adheseBid.getExtension().getPrebid().getCpm().getCurrency())\n+                .build();", "originalCommit": "f7af17bd9765d255c458688ae543f06c509eea9c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODM0MjUwNg==", "url": "https://github.com/prebid/prebid-server-java/pull/770#discussion_r448342506", "bodyText": "Refactor", "author": "DGarbar", "createdAt": "2020-07-01T12:54:33Z", "path": "src/main/java/org/prebid/server/bidder/adhese/AdheseBidder.java", "diffHunk": "@@ -0,0 +1,342 @@\n+package org.prebid.server.bidder.adhese;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.adhese.model.AdheseBid;\n+import org.prebid.server.bidder.adhese.model.AdheseOriginData;\n+import org.prebid.server.bidder.adhese.model.AdheseResponseExt;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.ExtUser;\n+import org.prebid.server.proto.openrtb.ext.request.adhese.ExtImpAdhese;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.math.BigDecimal;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.TreeMap;\n+import java.util.stream.Collectors;\n+import java.util.stream.StreamSupport;\n+\n+public class AdheseBidder implements Bidder<Void> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpAdhese>> ADHESE_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpAdhese>>() {\n+            };\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public AdheseBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<Void>>> makeHttpRequests(BidRequest request) {\n+        if (CollectionUtils.isEmpty(request.getImp())) {\n+            return Result.emptyWithError(BidderError.badInput(\"No impression in the bid request\"));\n+        }\n+\n+        ExtImpAdhese extImpAdhese;\n+        try {\n+            extImpAdhese = parseImpExt(request.getImp().get(0));\n+        } catch (PreBidException e) {\n+            return Result.emptyWithError(BidderError.badInput(e.getMessage()));\n+        }\n+\n+        final String uri = buildUrl(request, endpointUrl, extImpAdhese);\n+\n+        return Result.of(Collections.singletonList(\n+                HttpRequest.<Void>builder()\n+                        .method(HttpMethod.GET)\n+                        .uri(uri)\n+                        .body(null)\n+                        .headers(HttpUtil.headers())\n+                        .payload(null)\n+                        .build()),\n+                Collections.emptyList());\n+    }\n+\n+    private ExtImpAdhese parseImpExt(Imp imp) {\n+        try {\n+            return mapper.mapper().convertValue(imp.getExt(), ADHESE_EXT_TYPE_REFERENCE).getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+    }\n+\n+    private String buildUrl(BidRequest request, String endpointUrl, ExtImpAdhese extImpAdhese) {\n+        final String uri = endpointUrl.replace(\"{{AccountId}}\", extImpAdhese.getAccount());\n+        final String slotParameter = String.format(\"/sl%s-%s\", HttpUtil.encodeUrl(extImpAdhese.getLocation()),\n+                HttpUtil.encodeUrl(extImpAdhese.getFormat()));\n+\n+        return String.format(\"%s%s%s%s%s\", uri, slotParameter, getTargetParameters(extImpAdhese),\n+                getGdprParameter(request), getRefererParameter(request));\n+    }\n+\n+    private String getTargetParameters(ExtImpAdhese extImpAdhese) {\n+        if (extImpAdhese.getKeywords().isNull()) {\n+            return \"\";\n+        }\n+        StringBuilder parametersAsString = new StringBuilder();\n+        final Map<String, List<String>> targetParameters = parseTargetParametersAndSort(extImpAdhese.getKeywords());\n+\n+        for (Map.Entry<String, List<String>> targetParametersMap : targetParameters.entrySet()) {\n+            parametersAsString.append(\"/\").append(HttpUtil.encodeUrl(targetParametersMap.getKey()));\n+            for (String parameter : targetParametersMap.getValue()) {\n+                parametersAsString.append(parameter).append(\";\");\n+            }\n+            parametersAsString.deleteCharAt(parametersAsString.lastIndexOf(\";\"));\n+        }\n+\n+        return parametersAsString.toString();\n+    }\n+\n+    private Map<String, List<String>> parseTargetParametersAndSort(JsonNode keywords) {\n+        Map<String, List<String>> sortedMap = new TreeMap<>();\n+        if (keywords != null) {\n+            Iterator<Map.Entry<String, JsonNode>> fields = keywords.fields();\n+            while (fields.hasNext()) {\n+                Map.Entry<String, JsonNode> next = fields.next();\n+                List<String> values = null;\n+                if (next.getValue() instanceof ArrayNode) {\n+                    final ArrayNode arrayNode = (ArrayNode) next.getValue();\n+                    values = StreamSupport.stream(arrayNode.spliterator(), false)\n+                            .map(JsonNode::toString)\n+                            .map(m -> m.substring(1, m.length() - 1))\n+                            .collect(Collectors.toList());\n+                }\n+                sortedMap.put(next.getKey(), values);\n+            }\n+        }\n+        return sortedMap;\n+    }\n+\n+    private String getGdprParameter(BidRequest request) {\n+        if (request.getUser() != null && StringUtils.isNotBlank(extUser(request.getUser().getExt()).getConsent())) {\n+            return \"/xt\" + extUser(request.getUser().getExt()).getConsent();\n+        }\n+        return \"\";\n+    }\n+\n+    private ExtUser extUser(ObjectNode extNode) {\n+        try {\n+            return extNode != null ? mapper.mapper().treeToValue(extNode, ExtUser.class) : null;\n+        } catch (JsonProcessingException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+    }\n+\n+    private String getRefererParameter(BidRequest request) {\n+        if (request.getSite() != null && StringUtils.isNotBlank(request.getSite().getPage())) {\n+            return \"/xf\" + HttpUtil.encodeUrl(request.getSite().getPage());\n+        }\n+        return \"\";\n+    }\n+\n+    @Override\n+    public Result<List<BidderBid>> makeBids(HttpCall<Void> httpCall, BidRequest bidRequest) {\n+        final int statusCode = httpCall.getResponse().getStatusCode();\n+        if (statusCode == HttpResponseStatus.NO_CONTENT.code()) {\n+            return Result.of(Collections.emptyList(), Collections.emptyList());\n+        } else if (statusCode == HttpResponseStatus.BAD_REQUEST.code()) {\n+            return Result.emptyWithError(BidderError.badInput(\"Invalid request.\"));\n+        } else if (statusCode != HttpResponseStatus.OK.code()) {\n+            return Result.emptyWithError(BidderError.badServerResponse(String.format(\"Unexpected HTTP status %s.\",\n+                    statusCode)));\n+        }\n+\n+        final AdheseBid adheseBid;\n+        try {\n+            adheseBid = decodeBodyToBid(httpCall);\n+        } catch (PreBidException e) {\n+            return Result.emptyWithError(BidderError.badServerResponse(e.getMessage()));\n+        }\n+\n+        BidResponse.BidResponseBuilder bidResponseBuilder;\n+        if (adheseBid.getOrigin().equals(\"JERLICIA\")) {\n+            final AdheseResponseExt adheseResponseExt;\n+            final AdheseOriginData adheseOriginData;\n+            try {\n+                adheseResponseExt = decodeBodyToBidResponse(httpCall);\n+                adheseOriginData = decodeBodyToData(httpCall);\n+            } catch (PreBidException e) {\n+                return Result.emptyWithError(BidderError.badServerResponse(e.getMessage()));\n+            }\n+            bidResponseBuilder = convertAdheseBid(adheseBid, adheseResponseExt, adheseOriginData);\n+        } else {\n+            bidResponseBuilder = convertAdheseOpenRtbBid(adheseBid);\n+        }\n+\n+        final BigDecimal price = new BigDecimal(adheseBid.getExtension().getPrebid().getCpm().getAmount());\n+        final Integer width = Integer.valueOf(adheseBid.getWidth());\n+        final Integer height = Integer.valueOf(adheseBid.getHeight());\n+\n+        final BidResponse bidResponse = bidResponseBuilder\n+                .cur(adheseBid.getExtension().getPrebid().getCpm().getCurrency())\n+                .build();\n+\n+        if (CollectionUtils.isNotEmpty(bidResponse.getSeatbid())\n+                && CollectionUtils.isNotEmpty(bidResponse.getSeatbid().get(0).getBid())) {\n+            bidResponseBuilder.seatbid(Collections.singletonList(\n+                    SeatBid.builder()\n+                            .bid(Collections.singletonList(Bid.builder()\n+                                    .price(price)\n+                                    .w(width)\n+                                    .h(height)\n+                                    .dealid(bidResponse.getSeatbid().get(0).getBid().get(0).getDealid())\n+                                    .crid(bidResponse.getSeatbid().get(0).getBid().get(0).getCrid())\n+                                    .adm(bidResponse.getSeatbid().get(0).getBid().get(0).getAdm())\n+                                    .ext(bidResponse.getSeatbid().get(0).getBid().get(0).getExt())\n+                                    .build()))\n+                            .build()))\n+                    .cur(adheseBid.getExtension().getPrebid().getCpm().getCurrency())", "originalCommit": "f7af17bd9765d255c458688ae543f06c509eea9c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODM0NTEwNg==", "url": "https://github.com/prebid/prebid-server-java/pull/770#discussion_r448345106", "bodyText": "use :?", "author": "DGarbar", "createdAt": "2020-07-01T12:59:09Z", "path": "src/main/java/org/prebid/server/bidder/adhese/AdheseBidder.java", "diffHunk": "@@ -0,0 +1,342 @@\n+package org.prebid.server.bidder.adhese;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.adhese.model.AdheseBid;\n+import org.prebid.server.bidder.adhese.model.AdheseOriginData;\n+import org.prebid.server.bidder.adhese.model.AdheseResponseExt;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.ExtUser;\n+import org.prebid.server.proto.openrtb.ext.request.adhese.ExtImpAdhese;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.math.BigDecimal;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.TreeMap;\n+import java.util.stream.Collectors;\n+import java.util.stream.StreamSupport;\n+\n+public class AdheseBidder implements Bidder<Void> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpAdhese>> ADHESE_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpAdhese>>() {\n+            };\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public AdheseBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<Void>>> makeHttpRequests(BidRequest request) {\n+        if (CollectionUtils.isEmpty(request.getImp())) {\n+            return Result.emptyWithError(BidderError.badInput(\"No impression in the bid request\"));\n+        }\n+\n+        ExtImpAdhese extImpAdhese;\n+        try {\n+            extImpAdhese = parseImpExt(request.getImp().get(0));\n+        } catch (PreBidException e) {\n+            return Result.emptyWithError(BidderError.badInput(e.getMessage()));\n+        }\n+\n+        final String uri = buildUrl(request, endpointUrl, extImpAdhese);\n+\n+        return Result.of(Collections.singletonList(\n+                HttpRequest.<Void>builder()\n+                        .method(HttpMethod.GET)\n+                        .uri(uri)\n+                        .body(null)\n+                        .headers(HttpUtil.headers())\n+                        .payload(null)\n+                        .build()),\n+                Collections.emptyList());\n+    }\n+\n+    private ExtImpAdhese parseImpExt(Imp imp) {\n+        try {\n+            return mapper.mapper().convertValue(imp.getExt(), ADHESE_EXT_TYPE_REFERENCE).getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+    }\n+\n+    private String buildUrl(BidRequest request, String endpointUrl, ExtImpAdhese extImpAdhese) {\n+        final String uri = endpointUrl.replace(\"{{AccountId}}\", extImpAdhese.getAccount());\n+        final String slotParameter = String.format(\"/sl%s-%s\", HttpUtil.encodeUrl(extImpAdhese.getLocation()),\n+                HttpUtil.encodeUrl(extImpAdhese.getFormat()));\n+\n+        return String.format(\"%s%s%s%s%s\", uri, slotParameter, getTargetParameters(extImpAdhese),\n+                getGdprParameter(request), getRefererParameter(request));\n+    }\n+\n+    private String getTargetParameters(ExtImpAdhese extImpAdhese) {\n+        if (extImpAdhese.getKeywords().isNull()) {\n+            return \"\";\n+        }\n+        StringBuilder parametersAsString = new StringBuilder();\n+        final Map<String, List<String>> targetParameters = parseTargetParametersAndSort(extImpAdhese.getKeywords());\n+\n+        for (Map.Entry<String, List<String>> targetParametersMap : targetParameters.entrySet()) {\n+            parametersAsString.append(\"/\").append(HttpUtil.encodeUrl(targetParametersMap.getKey()));\n+            for (String parameter : targetParametersMap.getValue()) {\n+                parametersAsString.append(parameter).append(\";\");\n+            }\n+            parametersAsString.deleteCharAt(parametersAsString.lastIndexOf(\";\"));\n+        }\n+\n+        return parametersAsString.toString();\n+    }\n+\n+    private Map<String, List<String>> parseTargetParametersAndSort(JsonNode keywords) {\n+        Map<String, List<String>> sortedMap = new TreeMap<>();\n+        if (keywords != null) {\n+            Iterator<Map.Entry<String, JsonNode>> fields = keywords.fields();\n+            while (fields.hasNext()) {\n+                Map.Entry<String, JsonNode> next = fields.next();\n+                List<String> values = null;\n+                if (next.getValue() instanceof ArrayNode) {\n+                    final ArrayNode arrayNode = (ArrayNode) next.getValue();\n+                    values = StreamSupport.stream(arrayNode.spliterator(), false)\n+                            .map(JsonNode::toString)\n+                            .map(m -> m.substring(1, m.length() - 1))\n+                            .collect(Collectors.toList());\n+                }\n+                sortedMap.put(next.getKey(), values);\n+            }\n+        }\n+        return sortedMap;\n+    }\n+\n+    private String getGdprParameter(BidRequest request) {\n+        if (request.getUser() != null && StringUtils.isNotBlank(extUser(request.getUser().getExt()).getConsent())) {\n+            return \"/xt\" + extUser(request.getUser().getExt()).getConsent();\n+        }\n+        return \"\";\n+    }\n+\n+    private ExtUser extUser(ObjectNode extNode) {\n+        try {\n+            return extNode != null ? mapper.mapper().treeToValue(extNode, ExtUser.class) : null;\n+        } catch (JsonProcessingException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+    }\n+\n+    private String getRefererParameter(BidRequest request) {\n+        if (request.getSite() != null && StringUtils.isNotBlank(request.getSite().getPage())) {\n+            return \"/xf\" + HttpUtil.encodeUrl(request.getSite().getPage());\n+        }\n+        return \"\";\n+    }\n+\n+    @Override\n+    public Result<List<BidderBid>> makeBids(HttpCall<Void> httpCall, BidRequest bidRequest) {\n+        final int statusCode = httpCall.getResponse().getStatusCode();\n+        if (statusCode == HttpResponseStatus.NO_CONTENT.code()) {\n+            return Result.of(Collections.emptyList(), Collections.emptyList());\n+        } else if (statusCode == HttpResponseStatus.BAD_REQUEST.code()) {\n+            return Result.emptyWithError(BidderError.badInput(\"Invalid request.\"));\n+        } else if (statusCode != HttpResponseStatus.OK.code()) {\n+            return Result.emptyWithError(BidderError.badServerResponse(String.format(\"Unexpected HTTP status %s.\",\n+                    statusCode)));\n+        }\n+\n+        final AdheseBid adheseBid;\n+        try {\n+            adheseBid = decodeBodyToBid(httpCall);\n+        } catch (PreBidException e) {\n+            return Result.emptyWithError(BidderError.badServerResponse(e.getMessage()));\n+        }\n+\n+        BidResponse.BidResponseBuilder bidResponseBuilder;\n+        if (adheseBid.getOrigin().equals(\"JERLICIA\")) {\n+            final AdheseResponseExt adheseResponseExt;\n+            final AdheseOriginData adheseOriginData;\n+            try {\n+                adheseResponseExt = decodeBodyToBidResponse(httpCall);\n+                adheseOriginData = decodeBodyToData(httpCall);\n+            } catch (PreBidException e) {\n+                return Result.emptyWithError(BidderError.badServerResponse(e.getMessage()));\n+            }\n+            bidResponseBuilder = convertAdheseBid(adheseBid, adheseResponseExt, adheseOriginData);\n+        } else {\n+            bidResponseBuilder = convertAdheseOpenRtbBid(adheseBid);\n+        }\n+\n+        final BigDecimal price = new BigDecimal(adheseBid.getExtension().getPrebid().getCpm().getAmount());\n+        final Integer width = Integer.valueOf(adheseBid.getWidth());\n+        final Integer height = Integer.valueOf(adheseBid.getHeight());\n+\n+        final BidResponse bidResponse = bidResponseBuilder\n+                .cur(adheseBid.getExtension().getPrebid().getCpm().getCurrency())\n+                .build();\n+\n+        if (CollectionUtils.isNotEmpty(bidResponse.getSeatbid())\n+                && CollectionUtils.isNotEmpty(bidResponse.getSeatbid().get(0).getBid())) {\n+            bidResponseBuilder.seatbid(Collections.singletonList(\n+                    SeatBid.builder()\n+                            .bid(Collections.singletonList(Bid.builder()\n+                                    .price(price)\n+                                    .w(width)\n+                                    .h(height)\n+                                    .dealid(bidResponse.getSeatbid().get(0).getBid().get(0).getDealid())\n+                                    .crid(bidResponse.getSeatbid().get(0).getBid().get(0).getCrid())\n+                                    .adm(bidResponse.getSeatbid().get(0).getBid().get(0).getAdm())\n+                                    .ext(bidResponse.getSeatbid().get(0).getBid().get(0).getExt())\n+                                    .build()))\n+                            .build()))\n+                    .cur(adheseBid.getExtension().getPrebid().getCpm().getCurrency())\n+                    .build();\n+        }\n+\n+        final BidResponse updatedBidResponse = bidResponseBuilder.build();\n+\n+        if (updatedBidResponse != null && CollectionUtils.isEmpty(updatedBidResponse.getSeatbid())) {\n+            return Result.emptyWithError(BidderError\n+                    .badServerResponse(\"Response resulted in an empty seatBid array. %s.\"));\n+        }\n+\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<BidderBid> bidderBids = updatedBidResponse != null ? updatedBidResponse.getSeatbid().stream()\n+                .filter(Objects::nonNull)\n+                .map(SeatBid::getBid)\n+                .filter(Objects::nonNull)\n+                .flatMap(Collection::stream)\n+                .map(bid -> bidFromResponse(bid, bidRequest.getImp().get(0).getId(), errors))\n+                .filter(Objects::nonNull)\n+                .collect(Collectors.toList()) : null;\n+        return Result.of(bidderBids, errors);\n+    }\n+\n+    private AdheseBid decodeBodyToBid(HttpCall<Void> httpCall) {\n+        try {\n+            return mapper.decodeValue(httpCall.getResponse().getBody(), AdheseBid.class);\n+        } catch (DecodeException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+    }\n+\n+    private AdheseResponseExt decodeBodyToBidResponse(HttpCall<Void> httpCall) {\n+        try {\n+            return mapper.decodeValue(httpCall.getResponse().getBody(), AdheseResponseExt.class);\n+        } catch (DecodeException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+    }\n+\n+    private AdheseOriginData decodeBodyToData(HttpCall<Void> httpCall) {\n+        try {\n+            return mapper.decodeValue(httpCall.getResponse().getBody(), AdheseOriginData.class);\n+        } catch (DecodeException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+    }\n+\n+    private BidResponse.BidResponseBuilder convertAdheseBid(AdheseBid adheseBid, AdheseResponseExt adheseResponseExt,\n+                                                            AdheseOriginData adheseOriginData) {\n+        final ObjectNode adheseExtJson = mapper.mapper().valueToTree(adheseOriginData);\n+\n+        return BidResponse.builder()\n+                .id(adheseResponseExt.getId())\n+                .seatbid(Collections.singletonList(\n+                        SeatBid.builder()\n+                                .bid(Collections.singletonList(Bid.builder()\n+                                        .id(\"1\")\n+                                        .dealid(adheseResponseExt.getOrderId())\n+                                        .crid(adheseResponseExt.getId())\n+                                        .adm(getAdMarkup(adheseBid, adheseResponseExt))\n+                                        .ext(adheseExtJson)\n+                                        .build()))\n+                                .build()));\n+    }\n+\n+    private String getAdMarkup(AdheseBid adheseBid, AdheseResponseExt adheseResponseExt) {\n+        if (adheseResponseExt.getExt().equals(\"js\")) {\n+            if (StringUtils.containsAny(adheseBid.getBody(), \"<script\", \"<div\", \"<html\")) {\n+                String counter = \"\";\n+                if (StringUtils.isNotBlank(adheseResponseExt.getImpressionCounter())) {\n+                    counter = \"<img src='\" + adheseResponseExt.getImpressionCounter()\n+                            + \"' style='height:1px; width:1px; margin: -1px -1px; display:none;'/>\";\n+                }\n+                return adheseBid.getBody() + counter;\n+            }\n+            if (StringUtils.containsAny(adheseBid.getBody(), \"<?xml\", \"<vast\")) {\n+                return adheseBid.getBody();\n+            }\n+        }\n+        return adheseResponseExt.getTag();\n+    }\n+\n+    private BidResponse.BidResponseBuilder convertAdheseOpenRtbBid(AdheseBid adheseBid) {\n+        BidResponse.BidResponseBuilder bidResponseBuilder = adheseBid.getOriginData().builder();\n+        if (CollectionUtils.isNotEmpty(adheseBid.getOriginData().getSeatbid())\n+                && CollectionUtils.isNotEmpty(adheseBid.getOriginData().getSeatbid().get(0).getBid())) {\n+            bidResponseBuilder = bidResponseBuilder\n+                    .seatbid(Collections.singletonList(\n+                            SeatBid.builder()\n+                                    .bid(Collections.singletonList(Bid.builder().adm(adheseBid.getBody()).build()))\n+                                    .build()));\n+        }\n+        return bidResponseBuilder;\n+    }\n+\n+    private static BidderBid bidFromResponse(Bid bid, String impId, List<BidderError> errors) {\n+        /**\n+         * It is setted bidId =1, because it is not provided by vendor and should be not empty value\n+         */\n+        try {\n+            final BidType bidType = getBidType(bid.getAdm());\n+            final Bid updateBid = bid.toBuilder().id(\"1\").impid(impId).build();\n+            return BidderBid.of(updateBid, bidType, DEFAULT_BID_CURRENCY);\n+        } catch (PreBidException e) {\n+            errors.add(BidderError.badInput(e.getMessage()));\n+            return null;\n+        }\n+    }\n+\n+    private static BidType getBidType(String bidAdm) {", "originalCommit": "f7af17bd9765d255c458688ae543f06c509eea9c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODM0ODkwMA==", "url": "https://github.com/prebid/prebid-server-java/pull/770#discussion_r448348900", "bodyText": "you cant just get RANDOM imp id and set there.\nYou need match them", "author": "DGarbar", "createdAt": "2020-07-01T13:05:45Z", "path": "src/main/java/org/prebid/server/bidder/adhese/AdheseBidder.java", "diffHunk": "@@ -0,0 +1,342 @@\n+package org.prebid.server.bidder.adhese;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.adhese.model.AdheseBid;\n+import org.prebid.server.bidder.adhese.model.AdheseOriginData;\n+import org.prebid.server.bidder.adhese.model.AdheseResponseExt;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.ExtUser;\n+import org.prebid.server.proto.openrtb.ext.request.adhese.ExtImpAdhese;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.math.BigDecimal;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.TreeMap;\n+import java.util.stream.Collectors;\n+import java.util.stream.StreamSupport;\n+\n+public class AdheseBidder implements Bidder<Void> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpAdhese>> ADHESE_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpAdhese>>() {\n+            };\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public AdheseBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<Void>>> makeHttpRequests(BidRequest request) {\n+        if (CollectionUtils.isEmpty(request.getImp())) {\n+            return Result.emptyWithError(BidderError.badInput(\"No impression in the bid request\"));\n+        }\n+\n+        ExtImpAdhese extImpAdhese;\n+        try {\n+            extImpAdhese = parseImpExt(request.getImp().get(0));\n+        } catch (PreBidException e) {\n+            return Result.emptyWithError(BidderError.badInput(e.getMessage()));\n+        }\n+\n+        final String uri = buildUrl(request, endpointUrl, extImpAdhese);\n+\n+        return Result.of(Collections.singletonList(\n+                HttpRequest.<Void>builder()\n+                        .method(HttpMethod.GET)\n+                        .uri(uri)\n+                        .body(null)\n+                        .headers(HttpUtil.headers())\n+                        .payload(null)\n+                        .build()),\n+                Collections.emptyList());\n+    }\n+\n+    private ExtImpAdhese parseImpExt(Imp imp) {\n+        try {\n+            return mapper.mapper().convertValue(imp.getExt(), ADHESE_EXT_TYPE_REFERENCE).getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+    }\n+\n+    private String buildUrl(BidRequest request, String endpointUrl, ExtImpAdhese extImpAdhese) {\n+        final String uri = endpointUrl.replace(\"{{AccountId}}\", extImpAdhese.getAccount());\n+        final String slotParameter = String.format(\"/sl%s-%s\", HttpUtil.encodeUrl(extImpAdhese.getLocation()),\n+                HttpUtil.encodeUrl(extImpAdhese.getFormat()));\n+\n+        return String.format(\"%s%s%s%s%s\", uri, slotParameter, getTargetParameters(extImpAdhese),\n+                getGdprParameter(request), getRefererParameter(request));\n+    }\n+\n+    private String getTargetParameters(ExtImpAdhese extImpAdhese) {\n+        if (extImpAdhese.getKeywords().isNull()) {\n+            return \"\";\n+        }\n+        StringBuilder parametersAsString = new StringBuilder();\n+        final Map<String, List<String>> targetParameters = parseTargetParametersAndSort(extImpAdhese.getKeywords());\n+\n+        for (Map.Entry<String, List<String>> targetParametersMap : targetParameters.entrySet()) {\n+            parametersAsString.append(\"/\").append(HttpUtil.encodeUrl(targetParametersMap.getKey()));\n+            for (String parameter : targetParametersMap.getValue()) {\n+                parametersAsString.append(parameter).append(\";\");\n+            }\n+            parametersAsString.deleteCharAt(parametersAsString.lastIndexOf(\";\"));\n+        }\n+\n+        return parametersAsString.toString();\n+    }\n+\n+    private Map<String, List<String>> parseTargetParametersAndSort(JsonNode keywords) {\n+        Map<String, List<String>> sortedMap = new TreeMap<>();\n+        if (keywords != null) {\n+            Iterator<Map.Entry<String, JsonNode>> fields = keywords.fields();\n+            while (fields.hasNext()) {\n+                Map.Entry<String, JsonNode> next = fields.next();\n+                List<String> values = null;\n+                if (next.getValue() instanceof ArrayNode) {\n+                    final ArrayNode arrayNode = (ArrayNode) next.getValue();\n+                    values = StreamSupport.stream(arrayNode.spliterator(), false)\n+                            .map(JsonNode::toString)\n+                            .map(m -> m.substring(1, m.length() - 1))\n+                            .collect(Collectors.toList());\n+                }\n+                sortedMap.put(next.getKey(), values);\n+            }\n+        }\n+        return sortedMap;\n+    }\n+\n+    private String getGdprParameter(BidRequest request) {\n+        if (request.getUser() != null && StringUtils.isNotBlank(extUser(request.getUser().getExt()).getConsent())) {\n+            return \"/xt\" + extUser(request.getUser().getExt()).getConsent();\n+        }\n+        return \"\";\n+    }\n+\n+    private ExtUser extUser(ObjectNode extNode) {\n+        try {\n+            return extNode != null ? mapper.mapper().treeToValue(extNode, ExtUser.class) : null;\n+        } catch (JsonProcessingException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+    }\n+\n+    private String getRefererParameter(BidRequest request) {\n+        if (request.getSite() != null && StringUtils.isNotBlank(request.getSite().getPage())) {\n+            return \"/xf\" + HttpUtil.encodeUrl(request.getSite().getPage());\n+        }\n+        return \"\";\n+    }\n+\n+    @Override\n+    public Result<List<BidderBid>> makeBids(HttpCall<Void> httpCall, BidRequest bidRequest) {\n+        final int statusCode = httpCall.getResponse().getStatusCode();\n+        if (statusCode == HttpResponseStatus.NO_CONTENT.code()) {\n+            return Result.of(Collections.emptyList(), Collections.emptyList());\n+        } else if (statusCode == HttpResponseStatus.BAD_REQUEST.code()) {\n+            return Result.emptyWithError(BidderError.badInput(\"Invalid request.\"));\n+        } else if (statusCode != HttpResponseStatus.OK.code()) {\n+            return Result.emptyWithError(BidderError.badServerResponse(String.format(\"Unexpected HTTP status %s.\",\n+                    statusCode)));\n+        }\n+\n+        final AdheseBid adheseBid;\n+        try {\n+            adheseBid = decodeBodyToBid(httpCall);\n+        } catch (PreBidException e) {\n+            return Result.emptyWithError(BidderError.badServerResponse(e.getMessage()));\n+        }\n+\n+        BidResponse.BidResponseBuilder bidResponseBuilder;\n+        if (adheseBid.getOrigin().equals(\"JERLICIA\")) {\n+            final AdheseResponseExt adheseResponseExt;\n+            final AdheseOriginData adheseOriginData;\n+            try {\n+                adheseResponseExt = decodeBodyToBidResponse(httpCall);\n+                adheseOriginData = decodeBodyToData(httpCall);\n+            } catch (PreBidException e) {\n+                return Result.emptyWithError(BidderError.badServerResponse(e.getMessage()));\n+            }\n+            bidResponseBuilder = convertAdheseBid(adheseBid, adheseResponseExt, adheseOriginData);\n+        } else {\n+            bidResponseBuilder = convertAdheseOpenRtbBid(adheseBid);\n+        }\n+\n+        final BigDecimal price = new BigDecimal(adheseBid.getExtension().getPrebid().getCpm().getAmount());\n+        final Integer width = Integer.valueOf(adheseBid.getWidth());\n+        final Integer height = Integer.valueOf(adheseBid.getHeight());\n+\n+        final BidResponse bidResponse = bidResponseBuilder\n+                .cur(adheseBid.getExtension().getPrebid().getCpm().getCurrency())\n+                .build();\n+\n+        if (CollectionUtils.isNotEmpty(bidResponse.getSeatbid())\n+                && CollectionUtils.isNotEmpty(bidResponse.getSeatbid().get(0).getBid())) {\n+            bidResponseBuilder.seatbid(Collections.singletonList(\n+                    SeatBid.builder()\n+                            .bid(Collections.singletonList(Bid.builder()\n+                                    .price(price)\n+                                    .w(width)\n+                                    .h(height)\n+                                    .dealid(bidResponse.getSeatbid().get(0).getBid().get(0).getDealid())\n+                                    .crid(bidResponse.getSeatbid().get(0).getBid().get(0).getCrid())\n+                                    .adm(bidResponse.getSeatbid().get(0).getBid().get(0).getAdm())\n+                                    .ext(bidResponse.getSeatbid().get(0).getBid().get(0).getExt())\n+                                    .build()))\n+                            .build()))\n+                    .cur(adheseBid.getExtension().getPrebid().getCpm().getCurrency())\n+                    .build();\n+        }\n+\n+        final BidResponse updatedBidResponse = bidResponseBuilder.build();\n+\n+        if (updatedBidResponse != null && CollectionUtils.isEmpty(updatedBidResponse.getSeatbid())) {\n+            return Result.emptyWithError(BidderError\n+                    .badServerResponse(\"Response resulted in an empty seatBid array. %s.\"));\n+        }\n+\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<BidderBid> bidderBids = updatedBidResponse != null ? updatedBidResponse.getSeatbid().stream()\n+                .filter(Objects::nonNull)\n+                .map(SeatBid::getBid)\n+                .filter(Objects::nonNull)\n+                .flatMap(Collection::stream)\n+                .map(bid -> bidFromResponse(bid, bidRequest.getImp().get(0).getId(), errors))", "originalCommit": "f7af17bd9765d255c458688ae543f06c509eea9c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODM0OTc3Mg==", "url": "https://github.com/prebid/prebid-server-java/pull/770#discussion_r448349772", "bodyText": "I think, you can just pass the class and make 1 method", "author": "DGarbar", "createdAt": "2020-07-01T13:07:20Z", "path": "src/main/java/org/prebid/server/bidder/adhese/AdheseBidder.java", "diffHunk": "@@ -0,0 +1,342 @@\n+package org.prebid.server.bidder.adhese;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.adhese.model.AdheseBid;\n+import org.prebid.server.bidder.adhese.model.AdheseOriginData;\n+import org.prebid.server.bidder.adhese.model.AdheseResponseExt;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.ExtUser;\n+import org.prebid.server.proto.openrtb.ext.request.adhese.ExtImpAdhese;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.math.BigDecimal;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.TreeMap;\n+import java.util.stream.Collectors;\n+import java.util.stream.StreamSupport;\n+\n+public class AdheseBidder implements Bidder<Void> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpAdhese>> ADHESE_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpAdhese>>() {\n+            };\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public AdheseBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<Void>>> makeHttpRequests(BidRequest request) {\n+        if (CollectionUtils.isEmpty(request.getImp())) {\n+            return Result.emptyWithError(BidderError.badInput(\"No impression in the bid request\"));\n+        }\n+\n+        ExtImpAdhese extImpAdhese;\n+        try {\n+            extImpAdhese = parseImpExt(request.getImp().get(0));\n+        } catch (PreBidException e) {\n+            return Result.emptyWithError(BidderError.badInput(e.getMessage()));\n+        }\n+\n+        final String uri = buildUrl(request, endpointUrl, extImpAdhese);\n+\n+        return Result.of(Collections.singletonList(\n+                HttpRequest.<Void>builder()\n+                        .method(HttpMethod.GET)\n+                        .uri(uri)\n+                        .body(null)\n+                        .headers(HttpUtil.headers())\n+                        .payload(null)\n+                        .build()),\n+                Collections.emptyList());\n+    }\n+\n+    private ExtImpAdhese parseImpExt(Imp imp) {\n+        try {\n+            return mapper.mapper().convertValue(imp.getExt(), ADHESE_EXT_TYPE_REFERENCE).getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+    }\n+\n+    private String buildUrl(BidRequest request, String endpointUrl, ExtImpAdhese extImpAdhese) {\n+        final String uri = endpointUrl.replace(\"{{AccountId}}\", extImpAdhese.getAccount());\n+        final String slotParameter = String.format(\"/sl%s-%s\", HttpUtil.encodeUrl(extImpAdhese.getLocation()),\n+                HttpUtil.encodeUrl(extImpAdhese.getFormat()));\n+\n+        return String.format(\"%s%s%s%s%s\", uri, slotParameter, getTargetParameters(extImpAdhese),\n+                getGdprParameter(request), getRefererParameter(request));\n+    }\n+\n+    private String getTargetParameters(ExtImpAdhese extImpAdhese) {\n+        if (extImpAdhese.getKeywords().isNull()) {\n+            return \"\";\n+        }\n+        StringBuilder parametersAsString = new StringBuilder();\n+        final Map<String, List<String>> targetParameters = parseTargetParametersAndSort(extImpAdhese.getKeywords());\n+\n+        for (Map.Entry<String, List<String>> targetParametersMap : targetParameters.entrySet()) {\n+            parametersAsString.append(\"/\").append(HttpUtil.encodeUrl(targetParametersMap.getKey()));\n+            for (String parameter : targetParametersMap.getValue()) {\n+                parametersAsString.append(parameter).append(\";\");\n+            }\n+            parametersAsString.deleteCharAt(parametersAsString.lastIndexOf(\";\"));\n+        }\n+\n+        return parametersAsString.toString();\n+    }\n+\n+    private Map<String, List<String>> parseTargetParametersAndSort(JsonNode keywords) {\n+        Map<String, List<String>> sortedMap = new TreeMap<>();\n+        if (keywords != null) {\n+            Iterator<Map.Entry<String, JsonNode>> fields = keywords.fields();\n+            while (fields.hasNext()) {\n+                Map.Entry<String, JsonNode> next = fields.next();\n+                List<String> values = null;\n+                if (next.getValue() instanceof ArrayNode) {\n+                    final ArrayNode arrayNode = (ArrayNode) next.getValue();\n+                    values = StreamSupport.stream(arrayNode.spliterator(), false)\n+                            .map(JsonNode::toString)\n+                            .map(m -> m.substring(1, m.length() - 1))\n+                            .collect(Collectors.toList());\n+                }\n+                sortedMap.put(next.getKey(), values);\n+            }\n+        }\n+        return sortedMap;\n+    }\n+\n+    private String getGdprParameter(BidRequest request) {\n+        if (request.getUser() != null && StringUtils.isNotBlank(extUser(request.getUser().getExt()).getConsent())) {\n+            return \"/xt\" + extUser(request.getUser().getExt()).getConsent();\n+        }\n+        return \"\";\n+    }\n+\n+    private ExtUser extUser(ObjectNode extNode) {\n+        try {\n+            return extNode != null ? mapper.mapper().treeToValue(extNode, ExtUser.class) : null;\n+        } catch (JsonProcessingException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+    }\n+\n+    private String getRefererParameter(BidRequest request) {\n+        if (request.getSite() != null && StringUtils.isNotBlank(request.getSite().getPage())) {\n+            return \"/xf\" + HttpUtil.encodeUrl(request.getSite().getPage());\n+        }\n+        return \"\";\n+    }\n+\n+    @Override\n+    public Result<List<BidderBid>> makeBids(HttpCall<Void> httpCall, BidRequest bidRequest) {\n+        final int statusCode = httpCall.getResponse().getStatusCode();\n+        if (statusCode == HttpResponseStatus.NO_CONTENT.code()) {\n+            return Result.of(Collections.emptyList(), Collections.emptyList());\n+        } else if (statusCode == HttpResponseStatus.BAD_REQUEST.code()) {\n+            return Result.emptyWithError(BidderError.badInput(\"Invalid request.\"));\n+        } else if (statusCode != HttpResponseStatus.OK.code()) {\n+            return Result.emptyWithError(BidderError.badServerResponse(String.format(\"Unexpected HTTP status %s.\",\n+                    statusCode)));\n+        }\n+\n+        final AdheseBid adheseBid;\n+        try {\n+            adheseBid = decodeBodyToBid(httpCall);\n+        } catch (PreBidException e) {\n+            return Result.emptyWithError(BidderError.badServerResponse(e.getMessage()));\n+        }\n+\n+        BidResponse.BidResponseBuilder bidResponseBuilder;\n+        if (adheseBid.getOrigin().equals(\"JERLICIA\")) {\n+            final AdheseResponseExt adheseResponseExt;\n+            final AdheseOriginData adheseOriginData;\n+            try {\n+                adheseResponseExt = decodeBodyToBidResponse(httpCall);\n+                adheseOriginData = decodeBodyToData(httpCall);\n+            } catch (PreBidException e) {\n+                return Result.emptyWithError(BidderError.badServerResponse(e.getMessage()));\n+            }\n+            bidResponseBuilder = convertAdheseBid(adheseBid, adheseResponseExt, adheseOriginData);\n+        } else {\n+            bidResponseBuilder = convertAdheseOpenRtbBid(adheseBid);\n+        }\n+\n+        final BigDecimal price = new BigDecimal(adheseBid.getExtension().getPrebid().getCpm().getAmount());\n+        final Integer width = Integer.valueOf(adheseBid.getWidth());\n+        final Integer height = Integer.valueOf(adheseBid.getHeight());\n+\n+        final BidResponse bidResponse = bidResponseBuilder\n+                .cur(adheseBid.getExtension().getPrebid().getCpm().getCurrency())\n+                .build();\n+\n+        if (CollectionUtils.isNotEmpty(bidResponse.getSeatbid())\n+                && CollectionUtils.isNotEmpty(bidResponse.getSeatbid().get(0).getBid())) {\n+            bidResponseBuilder.seatbid(Collections.singletonList(\n+                    SeatBid.builder()\n+                            .bid(Collections.singletonList(Bid.builder()\n+                                    .price(price)\n+                                    .w(width)\n+                                    .h(height)\n+                                    .dealid(bidResponse.getSeatbid().get(0).getBid().get(0).getDealid())\n+                                    .crid(bidResponse.getSeatbid().get(0).getBid().get(0).getCrid())\n+                                    .adm(bidResponse.getSeatbid().get(0).getBid().get(0).getAdm())\n+                                    .ext(bidResponse.getSeatbid().get(0).getBid().get(0).getExt())\n+                                    .build()))\n+                            .build()))\n+                    .cur(adheseBid.getExtension().getPrebid().getCpm().getCurrency())\n+                    .build();\n+        }\n+\n+        final BidResponse updatedBidResponse = bidResponseBuilder.build();\n+\n+        if (updatedBidResponse != null && CollectionUtils.isEmpty(updatedBidResponse.getSeatbid())) {\n+            return Result.emptyWithError(BidderError\n+                    .badServerResponse(\"Response resulted in an empty seatBid array. %s.\"));\n+        }\n+\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<BidderBid> bidderBids = updatedBidResponse != null ? updatedBidResponse.getSeatbid().stream()\n+                .filter(Objects::nonNull)\n+                .map(SeatBid::getBid)\n+                .filter(Objects::nonNull)\n+                .flatMap(Collection::stream)\n+                .map(bid -> bidFromResponse(bid, bidRequest.getImp().get(0).getId(), errors))\n+                .filter(Objects::nonNull)\n+                .collect(Collectors.toList()) : null;\n+        return Result.of(bidderBids, errors);\n+    }\n+\n+    private AdheseBid decodeBodyToBid(HttpCall<Void> httpCall) {\n+        try {\n+            return mapper.decodeValue(httpCall.getResponse().getBody(), AdheseBid.class);\n+        } catch (DecodeException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+    }\n+\n+    private AdheseResponseExt decodeBodyToBidResponse(HttpCall<Void> httpCall) {\n+        try {\n+            return mapper.decodeValue(httpCall.getResponse().getBody(), AdheseResponseExt.class);\n+        } catch (DecodeException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+    }\n+\n+    private AdheseOriginData decodeBodyToData(HttpCall<Void> httpCall) {\n+        try {\n+            return mapper.decodeValue(httpCall.getResponse().getBody(), AdheseOriginData.class);\n+        } catch (DecodeException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+    }", "originalCommit": "f7af17bd9765d255c458688ae543f06c509eea9c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODM1MDQzMw==", "url": "https://github.com/prebid/prebid-server-java/pull/770#discussion_r448350433", "bodyText": "they modify request", "author": "DGarbar", "createdAt": "2020-07-01T13:08:31Z", "path": "src/test/java/org/prebid/server/bidder/adhese/AdheseBidderTest.java", "diffHunk": "@@ -0,0 +1,366 @@\n+package org.prebid.server.bidder.adhese;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.github.fge.jsonpatch.JsonPatchException;\n+import com.github.fge.jsonpatch.mergepatch.JsonMergePatch;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.iab.openrtb.request.User;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.prebid.server.VertxTest;\n+import org.prebid.server.bidder.adhese.model.AdheseBid;\n+import org.prebid.server.bidder.adhese.model.AdheseOriginData;\n+import org.prebid.server.bidder.adhese.model.AdheseResponseExt;\n+import org.prebid.server.bidder.adhese.model.CPM;\n+import org.prebid.server.bidder.adhese.model.CPMValues;\n+import org.prebid.server.bidder.adhese.model.Prebid;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.HttpResponse;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.ExtUser;\n+import org.prebid.server.proto.openrtb.ext.request.adhese.ExtImpAdhese;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+\n+import java.math.BigDecimal;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static java.util.Arrays.asList;\n+import static java.util.Collections.emptyList;\n+import static java.util.Collections.emptyMap;\n+import static java.util.Collections.singletonList;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;\n+\n+public class AdheseBidderTest extends VertxTest {\n+\n+    private static final String ENDPOINT_URL = \"https://ads-{{AccountId}}.adhese.com/json\";\n+\n+    private AdheseBidder adheseBidder;\n+\n+    @Before\n+    public void setUp() {\n+        adheseBidder = new AdheseBidder(ENDPOINT_URL, jacksonMapper);\n+    }\n+\n+    @Test\n+    public void creationShouldFailOnInvalidEndpointUrl() {\n+        assertThatIllegalArgumentException().isThrownBy(() -> new AdheseBidder(\"invalid_url\", jacksonMapper));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldReturnErrorIfImpressionListSizeIsZero() {\n+        // given\n+        final BidRequest bidRequest = BidRequest.builder()\n+                .imp(emptyList())\n+                .build();\n+\n+        // when\n+        final Result<List<HttpRequest<Void>>> result = adheseBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1)\n+                .containsOnly(BidderError.badInput(\"No impression in the bid request\"));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldReturnErrorWhenImpExtCouldNotBeParsed() {\n+        // given\n+        final BidRequest bidRequest = BidRequest.builder()\n+                .imp(singletonList(Imp.builder()\n+                        .ext(mapper.valueToTree(ExtPrebid.of(null, mapper.createArrayNode())))\n+                        .build()))\n+                .build();\n+\n+        // when\n+        final Result<List<HttpRequest<Void>>> result = adheseBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1);\n+        assertThat(result.getErrors().get(0).getMessage()).startsWith(\"Cannot deserialize instance\");\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldNotModifyIncomingRequestAndSetExpectedHttpRequestUri() {", "originalCommit": "f7af17bd9765d255c458688ae543f06c509eea9c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "665130be5c488b65c2d01677c0b831b693e57896", "url": "https://github.com/prebid/prebid-server-java/commit/665130be5c488b65c2d01677c0b831b693e57896", "message": "Merge branch 'master' into add-adhese-bidder", "committedDate": "2020-07-07T08:37:35Z", "type": "commit"}, {"oid": "dc10b4b6944947a10886a78f155ba0d0af689052", "url": "https://github.com/prebid/prebid-server-java/commit/dc10b4b6944947a10886a78f155ba0d0af689052", "message": "Refactoring code and tests", "committedDate": "2020-07-08T20:22:51Z", "type": "commit"}, {"oid": "f00f22f028af931783ddda585ab196af93539c1c", "url": "https://github.com/prebid/prebid-server-java/commit/f00f22f028af931783ddda585ab196af93539c1c", "message": "Merge branch 'master' into add-adhese-bidder\n\n# Conflicts:\n#\tsrc/test/resources/org/prebid/server/it/test-application.properties", "committedDate": "2020-07-08T20:28:13Z", "type": "commit"}, {"oid": "bca4e46b704814838e519143ad51a6f69a04005d", "url": "https://github.com/prebid/prebid-server-java/commit/bca4e46b704814838e519143ad51a6f69a04005d", "message": "Resolving conflicts", "committedDate": "2020-07-08T20:53:08Z", "type": "commit"}, {"oid": "6bb04709adf0a3385d3733e13f631d87a435e0a6", "url": "https://github.com/prebid/prebid-server-java/commit/6bb04709adf0a3385d3733e13f631d87a435e0a6", "message": "Delete redundant variable from test", "committedDate": "2020-07-08T20:56:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzYxMTcxNg==", "url": "https://github.com/prebid/prebid-server-java/pull/770#discussion_r453611716", "bodyText": "Extract adheseBid.get(0)", "author": "DGarbar", "createdAt": "2020-07-13T12:25:52Z", "path": "src/main/java/org/prebid/server/bidder/adhese/AdheseBidder.java", "diffHunk": "@@ -0,0 +1,279 @@\n+package org.prebid.server.bidder.adhese;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.request.User;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.adhese.model.AdheseBid;\n+import org.prebid.server.bidder.adhese.model.AdheseOriginData;\n+import org.prebid.server.bidder.adhese.model.AdheseResponseExt;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.ExtUser;\n+import org.prebid.server.proto.openrtb.ext.request.adhese.ExtImpAdhese;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.math.BigDecimal;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.TreeMap;\n+import java.util.stream.Collectors;\n+\n+public class AdheseBidder implements Bidder<Void> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpAdhese>> ADHESE_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpAdhese>>() {\n+            };\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+    private static final String ORIGIN = \"JERLICIA\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public AdheseBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<Void>>> makeHttpRequests(BidRequest request) {\n+        if (CollectionUtils.isEmpty(request.getImp())) {\n+            return Result.emptyWithError(BidderError.badInput(\"No impression in the bid request\"));\n+        }\n+\n+        ExtImpAdhese extImpAdhese;\n+        try {\n+            extImpAdhese = parseImpExt(request.getImp().get(0));\n+        } catch (PreBidException e) {\n+            return Result.emptyWithError(BidderError.badInput(e.getMessage()));\n+        }\n+\n+        final String uri = buildUrl(request, endpointUrl, extImpAdhese);\n+\n+        return Result.of(Collections.singletonList(\n+                HttpRequest.<Void>builder()\n+                        .method(HttpMethod.GET)\n+                        .uri(uri)\n+                        .body(null)\n+                        .headers(HttpUtil.headers())\n+                        .payload(null)\n+                        .build()),\n+                Collections.emptyList());\n+    }\n+\n+    private ExtImpAdhese parseImpExt(Imp imp) {\n+        try {\n+            return mapper.mapper().convertValue(imp.getExt(), ADHESE_EXT_TYPE_REFERENCE).getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+    }\n+\n+    private String buildUrl(BidRequest request, String endpointUrl, ExtImpAdhese extImpAdhese) {\n+        final String uri = endpointUrl.replace(\"{{AccountId}}\", extImpAdhese.getAccount());\n+        final String slotParameter = String.format(\"/sl%s-%s\", HttpUtil.encodeUrl(extImpAdhese.getLocation()),\n+                HttpUtil.encodeUrl(extImpAdhese.getFormat()));\n+\n+        return String.format(\"%s%s%s%s%s\", uri, slotParameter, getTargetParameters(extImpAdhese),\n+                getGdprParameter(request.getUser()), getRefererParameter(request.getSite()));\n+    }\n+\n+    private String getTargetParameters(ExtImpAdhese extImpAdhese) {\n+        if (extImpAdhese.getKeywords().isNull()) {\n+            return \"\";\n+        }\n+\n+        final Map<String, List<String>> targetParameters = parseTargetParametersAndSort(extImpAdhese.getKeywords());\n+        return targetParameters.entrySet().stream()\n+                .map(stringListEntry -> createPartOrUrl(stringListEntry.getKey(), stringListEntry.getValue()))\n+                .collect(Collectors.joining());\n+    }\n+\n+    private Map<String, List<String>> parseTargetParametersAndSort(JsonNode keywords) {\n+        return keywords != null ? new TreeMap<>(\n+                mapper.mapper().convertValue(keywords, new TypeReference<Map<String, List<String>>>() {\n+                })) : null;\n+    }\n+\n+    private String createPartOrUrl(String key, List<String> values) {\n+        final String formattedValues = String.join(\";\", values);\n+        return String.format(\"/%s%s\", HttpUtil.encodeUrl(key), formattedValues);\n+    }\n+\n+    private String getGdprParameter(User user) {\n+        final ExtUser extUser = user != null ? user.getExt() : null;\n+        final String consent = extUser != null ? extUser.getConsent() : null;\n+        return StringUtils.isNotBlank(consent) ? String.format(\"%s%s\", \"/xt\", consent) : \"\";\n+    }\n+\n+    private String getRefererParameter(Site site) {\n+        final String page = site != null ? site.getPage() : null;\n+        return StringUtils.isNotBlank(page) ? String.format(\"%s%s\", \"/xf\", HttpUtil.encodeUrl(page)) : \"\";\n+    }\n+\n+    @Override\n+    public Result<List<BidderBid>> makeBids(HttpCall<Void> httpCall, BidRequest bidRequest) {\n+        final int statusCode = httpCall.getResponse().getStatusCode();\n+        if (statusCode == HttpResponseStatus.NO_CONTENT.code()) {\n+            return Result.of(Collections.emptyList(), Collections.emptyList());\n+        } else if (statusCode == HttpResponseStatus.BAD_REQUEST.code()) {\n+            return Result.emptyWithError(BidderError.badInput(\"Invalid request.\"));\n+        } else if (statusCode != HttpResponseStatus.OK.code()) {\n+            return Result.emptyWithError(BidderError.badServerResponse(String.format(\"Unexpected HTTP status %s.\",\n+                    statusCode)));\n+        }\n+\n+        final List<AdheseBid> adheseBid;\n+        final List<AdheseResponseExt> adheseResponseExt;\n+        final List<AdheseOriginData> adheseOriginData;\n+        SeatBid seatBid;\n+        try {\n+            adheseBid = decodeBodyToBidList(httpCall, AdheseBid.class);\n+            if (Objects.equals(adheseBid.get(0).getOrigin(), ORIGIN)) {\n+                adheseResponseExt = decodeBodyToBidList(httpCall, AdheseResponseExt.class);\n+                adheseOriginData = decodeBodyToBidList(httpCall, AdheseOriginData.class);\n+                seatBid = convertAdheseBid(adheseBid.get(0), adheseResponseExt.get(0), adheseOriginData.get(0));\n+            } else {\n+                seatBid = convertAdheseOpenRtbBid(adheseBid.get(0));\n+            }\n+        } catch (PreBidException e) {\n+            return Result.emptyWithError(BidderError.badServerResponse(e.getMessage()));\n+        }\n+\n+        final BigDecimal price = new BigDecimal(adheseBid.get(0).getExtension().getPrebid().getCpm().getAmount());\n+        final Integer width = Integer.valueOf(adheseBid.get(0).getWidth());\n+        final Integer height = Integer.valueOf(adheseBid.get(0).getHeight());\n+\n+        SeatBid updateSeatBid = null;\n+        if (seatBid != null && CollectionUtils.isNotEmpty(seatBid.getBid())) {\n+            final Bid bid = seatBid.getBid().get(0);\n+            updateSeatBid = seatBid.toBuilder()\n+                    .bid(Collections.singletonList(Bid.builder()", "originalCommit": "6bb04709adf0a3385d3733e13f631d87a435e0a6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzY0MjQ3Mg==", "url": "https://github.com/prebid/prebid-server-java/pull/770#discussion_r453642472", "bodyText": "redundant braces", "author": "DGarbar", "createdAt": "2020-07-13T13:18:56Z", "path": "src/main/java/org/prebid/server/bidder/adhese/AdheseBidder.java", "diffHunk": "@@ -0,0 +1,279 @@\n+package org.prebid.server.bidder.adhese;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.request.User;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.adhese.model.AdheseBid;\n+import org.prebid.server.bidder.adhese.model.AdheseOriginData;\n+import org.prebid.server.bidder.adhese.model.AdheseResponseExt;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.ExtUser;\n+import org.prebid.server.proto.openrtb.ext.request.adhese.ExtImpAdhese;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.math.BigDecimal;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.TreeMap;\n+import java.util.stream.Collectors;\n+\n+public class AdheseBidder implements Bidder<Void> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpAdhese>> ADHESE_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpAdhese>>() {\n+            };\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+    private static final String ORIGIN = \"JERLICIA\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public AdheseBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<Void>>> makeHttpRequests(BidRequest request) {\n+        if (CollectionUtils.isEmpty(request.getImp())) {\n+            return Result.emptyWithError(BidderError.badInput(\"No impression in the bid request\"));\n+        }\n+\n+        ExtImpAdhese extImpAdhese;\n+        try {\n+            extImpAdhese = parseImpExt(request.getImp().get(0));\n+        } catch (PreBidException e) {\n+            return Result.emptyWithError(BidderError.badInput(e.getMessage()));\n+        }\n+\n+        final String uri = buildUrl(request, endpointUrl, extImpAdhese);\n+\n+        return Result.of(Collections.singletonList(\n+                HttpRequest.<Void>builder()\n+                        .method(HttpMethod.GET)\n+                        .uri(uri)\n+                        .body(null)\n+                        .headers(HttpUtil.headers())\n+                        .payload(null)\n+                        .build()),\n+                Collections.emptyList());\n+    }\n+\n+    private ExtImpAdhese parseImpExt(Imp imp) {\n+        try {\n+            return mapper.mapper().convertValue(imp.getExt(), ADHESE_EXT_TYPE_REFERENCE).getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+    }\n+\n+    private String buildUrl(BidRequest request, String endpointUrl, ExtImpAdhese extImpAdhese) {\n+        final String uri = endpointUrl.replace(\"{{AccountId}}\", extImpAdhese.getAccount());\n+        final String slotParameter = String.format(\"/sl%s-%s\", HttpUtil.encodeUrl(extImpAdhese.getLocation()),\n+                HttpUtil.encodeUrl(extImpAdhese.getFormat()));\n+\n+        return String.format(\"%s%s%s%s%s\", uri, slotParameter, getTargetParameters(extImpAdhese),\n+                getGdprParameter(request.getUser()), getRefererParameter(request.getSite()));\n+    }\n+\n+    private String getTargetParameters(ExtImpAdhese extImpAdhese) {\n+        if (extImpAdhese.getKeywords().isNull()) {\n+            return \"\";\n+        }\n+\n+        final Map<String, List<String>> targetParameters = parseTargetParametersAndSort(extImpAdhese.getKeywords());\n+        return targetParameters.entrySet().stream()\n+                .map(stringListEntry -> createPartOrUrl(stringListEntry.getKey(), stringListEntry.getValue()))\n+                .collect(Collectors.joining());\n+    }\n+\n+    private Map<String, List<String>> parseTargetParametersAndSort(JsonNode keywords) {\n+        return keywords != null ? new TreeMap<>(\n+                mapper.mapper().convertValue(keywords, new TypeReference<Map<String, List<String>>>() {\n+                })) : null;\n+    }\n+\n+    private String createPartOrUrl(String key, List<String> values) {\n+        final String formattedValues = String.join(\";\", values);\n+        return String.format(\"/%s%s\", HttpUtil.encodeUrl(key), formattedValues);\n+    }\n+\n+    private String getGdprParameter(User user) {\n+        final ExtUser extUser = user != null ? user.getExt() : null;\n+        final String consent = extUser != null ? extUser.getConsent() : null;\n+        return StringUtils.isNotBlank(consent) ? String.format(\"%s%s\", \"/xt\", consent) : \"\";\n+    }\n+\n+    private String getRefererParameter(Site site) {\n+        final String page = site != null ? site.getPage() : null;\n+        return StringUtils.isNotBlank(page) ? String.format(\"%s%s\", \"/xf\", HttpUtil.encodeUrl(page)) : \"\";\n+    }\n+\n+    @Override\n+    public Result<List<BidderBid>> makeBids(HttpCall<Void> httpCall, BidRequest bidRequest) {\n+        final int statusCode = httpCall.getResponse().getStatusCode();\n+        if (statusCode == HttpResponseStatus.NO_CONTENT.code()) {\n+            return Result.of(Collections.emptyList(), Collections.emptyList());\n+        } else if (statusCode == HttpResponseStatus.BAD_REQUEST.code()) {\n+            return Result.emptyWithError(BidderError.badInput(\"Invalid request.\"));\n+        } else if (statusCode != HttpResponseStatus.OK.code()) {\n+            return Result.emptyWithError(BidderError.badServerResponse(String.format(\"Unexpected HTTP status %s.\",\n+                    statusCode)));\n+        }\n+\n+        final List<AdheseBid> adheseBid;\n+        final List<AdheseResponseExt> adheseResponseExt;\n+        final List<AdheseOriginData> adheseOriginData;\n+        SeatBid seatBid;\n+        try {\n+            adheseBid = decodeBodyToBidList(httpCall, AdheseBid.class);\n+            if (Objects.equals(adheseBid.get(0).getOrigin(), ORIGIN)) {\n+                adheseResponseExt = decodeBodyToBidList(httpCall, AdheseResponseExt.class);\n+                adheseOriginData = decodeBodyToBidList(httpCall, AdheseOriginData.class);\n+                seatBid = convertAdheseBid(adheseBid.get(0), adheseResponseExt.get(0), adheseOriginData.get(0));\n+            } else {\n+                seatBid = convertAdheseOpenRtbBid(adheseBid.get(0));\n+            }\n+        } catch (PreBidException e) {\n+            return Result.emptyWithError(BidderError.badServerResponse(e.getMessage()));\n+        }\n+\n+        final BigDecimal price = new BigDecimal(adheseBid.get(0).getExtension().getPrebid().getCpm().getAmount());\n+        final Integer width = Integer.valueOf(adheseBid.get(0).getWidth());\n+        final Integer height = Integer.valueOf(adheseBid.get(0).getHeight());\n+\n+        SeatBid updateSeatBid = null;\n+        if (seatBid != null && CollectionUtils.isNotEmpty(seatBid.getBid())) {\n+            final Bid bid = seatBid.getBid().get(0);\n+            updateSeatBid = seatBid.toBuilder()\n+                    .bid(Collections.singletonList(Bid.builder()\n+                            .price(price)\n+                            .w(width)\n+                            .h(height)\n+                            .dealid(bid.getDealid())\n+                            .crid(bid.getCrid())\n+                            .adm(bid.getAdm())\n+                            .ext(bid.getExt())\n+                            .build()))\n+                    .build();\n+        }\n+\n+        if (updateSeatBid == null) {\n+            return Result.emptyWithError(BidderError\n+                    .badServerResponse(\"Response resulted in an empty seatBid array. %s.\"));\n+        }\n+\n+        /**\n+         * Used ImpId from Imp of bidRequest, because it is not provided and should be not empty value\n+         */\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<BidderBid> bidderBids = updateSeatBid.getBid().stream()\n+                .filter(Objects::nonNull)\n+                .map(bid -> makeBid(bid, bidRequest.getImp().get(0).getId(), errors))\n+                .filter(Objects::nonNull)\n+                .collect(Collectors.toList());\n+        return Result.of(bidderBids, errors);\n+    }\n+\n+    private <T> List<T> decodeBodyToBidList(HttpCall<Void> httpCall, Class<T> bidClassName) {\n+        try {\n+            return mapper.mapper().readValue(\n+                    httpCall.getResponse().getBody(),\n+                    mapper.mapper().getTypeFactory().constructCollectionType(List.class, bidClassName));\n+        } catch (DecodeException | JsonProcessingException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+    }\n+\n+    private SeatBid convertAdheseBid(AdheseBid adheseBid, AdheseResponseExt adheseResponseExt,\n+                                     AdheseOriginData adheseOriginData) {\n+        final ObjectNode adheseExtJson = mapper.mapper().valueToTree(adheseOriginData);\n+\n+        return SeatBid.builder()\n+                .bid(Collections.singletonList(Bid.builder()\n+                        .id(\"1\")\n+                        .dealid(adheseResponseExt.getOrderId())\n+                        .crid(adheseResponseExt.getId())\n+                        .adm(getAdMarkup(adheseBid, adheseResponseExt))\n+                        .ext(adheseExtJson)\n+                        .build()))\n+                .seat(\"\")\n+                .build();\n+    }\n+\n+    private String getAdMarkup(AdheseBid adheseBid, AdheseResponseExt adheseResponseExt) {\n+        if (Objects.equals(adheseResponseExt.getExt(), \"js\")) {\n+            if (StringUtils.containsAny(adheseBid.getBody(), \"<script\", \"<div\", \"<html\")) {\n+                String counter = \"\";\n+                if (adheseResponseExt.getImpressionCounter().length() > 0) {\n+                    counter = String.format(\"%s%s%s\", \"<img src='\", adheseResponseExt.getImpressionCounter(),\n+                            \"' style='height:1px; width:1px; margin: -1px -1px; display:none;'/>\");\n+                }\n+                return String.format(\"%s%s\", adheseBid.getBody(), counter);\n+            }\n+            if (StringUtils.containsAny(adheseBid.getBody(), \"<?xml\", \"<vast\")) {\n+                return adheseBid.getBody();\n+            }\n+        }\n+        return adheseResponseExt.getTag();\n+    }\n+\n+    private SeatBid convertAdheseOpenRtbBid(AdheseBid adheseBid) {\n+        return (CollectionUtils.isNotEmpty(adheseBid.getOriginData().getSeatbid())", "originalCommit": "6bb04709adf0a3385d3733e13f631d87a435e0a6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzY0Mjc5MQ==", "url": "https://github.com/prebid/prebid-server-java/pull/770#discussion_r453642791", "bodyText": "extract adheseBid.getOriginData().getSeatbid()", "author": "DGarbar", "createdAt": "2020-07-13T13:19:25Z", "path": "src/main/java/org/prebid/server/bidder/adhese/AdheseBidder.java", "diffHunk": "@@ -0,0 +1,279 @@\n+package org.prebid.server.bidder.adhese;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.request.User;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.adhese.model.AdheseBid;\n+import org.prebid.server.bidder.adhese.model.AdheseOriginData;\n+import org.prebid.server.bidder.adhese.model.AdheseResponseExt;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.ExtUser;\n+import org.prebid.server.proto.openrtb.ext.request.adhese.ExtImpAdhese;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.math.BigDecimal;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.TreeMap;\n+import java.util.stream.Collectors;\n+\n+public class AdheseBidder implements Bidder<Void> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpAdhese>> ADHESE_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpAdhese>>() {\n+            };\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+    private static final String ORIGIN = \"JERLICIA\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public AdheseBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<Void>>> makeHttpRequests(BidRequest request) {\n+        if (CollectionUtils.isEmpty(request.getImp())) {\n+            return Result.emptyWithError(BidderError.badInput(\"No impression in the bid request\"));\n+        }\n+\n+        ExtImpAdhese extImpAdhese;\n+        try {\n+            extImpAdhese = parseImpExt(request.getImp().get(0));\n+        } catch (PreBidException e) {\n+            return Result.emptyWithError(BidderError.badInput(e.getMessage()));\n+        }\n+\n+        final String uri = buildUrl(request, endpointUrl, extImpAdhese);\n+\n+        return Result.of(Collections.singletonList(\n+                HttpRequest.<Void>builder()\n+                        .method(HttpMethod.GET)\n+                        .uri(uri)\n+                        .body(null)\n+                        .headers(HttpUtil.headers())\n+                        .payload(null)\n+                        .build()),\n+                Collections.emptyList());\n+    }\n+\n+    private ExtImpAdhese parseImpExt(Imp imp) {\n+        try {\n+            return mapper.mapper().convertValue(imp.getExt(), ADHESE_EXT_TYPE_REFERENCE).getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+    }\n+\n+    private String buildUrl(BidRequest request, String endpointUrl, ExtImpAdhese extImpAdhese) {\n+        final String uri = endpointUrl.replace(\"{{AccountId}}\", extImpAdhese.getAccount());\n+        final String slotParameter = String.format(\"/sl%s-%s\", HttpUtil.encodeUrl(extImpAdhese.getLocation()),\n+                HttpUtil.encodeUrl(extImpAdhese.getFormat()));\n+\n+        return String.format(\"%s%s%s%s%s\", uri, slotParameter, getTargetParameters(extImpAdhese),\n+                getGdprParameter(request.getUser()), getRefererParameter(request.getSite()));\n+    }\n+\n+    private String getTargetParameters(ExtImpAdhese extImpAdhese) {\n+        if (extImpAdhese.getKeywords().isNull()) {\n+            return \"\";\n+        }\n+\n+        final Map<String, List<String>> targetParameters = parseTargetParametersAndSort(extImpAdhese.getKeywords());\n+        return targetParameters.entrySet().stream()\n+                .map(stringListEntry -> createPartOrUrl(stringListEntry.getKey(), stringListEntry.getValue()))\n+                .collect(Collectors.joining());\n+    }\n+\n+    private Map<String, List<String>> parseTargetParametersAndSort(JsonNode keywords) {\n+        return keywords != null ? new TreeMap<>(\n+                mapper.mapper().convertValue(keywords, new TypeReference<Map<String, List<String>>>() {\n+                })) : null;\n+    }\n+\n+    private String createPartOrUrl(String key, List<String> values) {\n+        final String formattedValues = String.join(\";\", values);\n+        return String.format(\"/%s%s\", HttpUtil.encodeUrl(key), formattedValues);\n+    }\n+\n+    private String getGdprParameter(User user) {\n+        final ExtUser extUser = user != null ? user.getExt() : null;\n+        final String consent = extUser != null ? extUser.getConsent() : null;\n+        return StringUtils.isNotBlank(consent) ? String.format(\"%s%s\", \"/xt\", consent) : \"\";\n+    }\n+\n+    private String getRefererParameter(Site site) {\n+        final String page = site != null ? site.getPage() : null;\n+        return StringUtils.isNotBlank(page) ? String.format(\"%s%s\", \"/xf\", HttpUtil.encodeUrl(page)) : \"\";\n+    }\n+\n+    @Override\n+    public Result<List<BidderBid>> makeBids(HttpCall<Void> httpCall, BidRequest bidRequest) {\n+        final int statusCode = httpCall.getResponse().getStatusCode();\n+        if (statusCode == HttpResponseStatus.NO_CONTENT.code()) {\n+            return Result.of(Collections.emptyList(), Collections.emptyList());\n+        } else if (statusCode == HttpResponseStatus.BAD_REQUEST.code()) {\n+            return Result.emptyWithError(BidderError.badInput(\"Invalid request.\"));\n+        } else if (statusCode != HttpResponseStatus.OK.code()) {\n+            return Result.emptyWithError(BidderError.badServerResponse(String.format(\"Unexpected HTTP status %s.\",\n+                    statusCode)));\n+        }\n+\n+        final List<AdheseBid> adheseBid;\n+        final List<AdheseResponseExt> adheseResponseExt;\n+        final List<AdheseOriginData> adheseOriginData;\n+        SeatBid seatBid;\n+        try {\n+            adheseBid = decodeBodyToBidList(httpCall, AdheseBid.class);\n+            if (Objects.equals(adheseBid.get(0).getOrigin(), ORIGIN)) {\n+                adheseResponseExt = decodeBodyToBidList(httpCall, AdheseResponseExt.class);\n+                adheseOriginData = decodeBodyToBidList(httpCall, AdheseOriginData.class);\n+                seatBid = convertAdheseBid(adheseBid.get(0), adheseResponseExt.get(0), adheseOriginData.get(0));\n+            } else {\n+                seatBid = convertAdheseOpenRtbBid(adheseBid.get(0));\n+            }\n+        } catch (PreBidException e) {\n+            return Result.emptyWithError(BidderError.badServerResponse(e.getMessage()));\n+        }\n+\n+        final BigDecimal price = new BigDecimal(adheseBid.get(0).getExtension().getPrebid().getCpm().getAmount());\n+        final Integer width = Integer.valueOf(adheseBid.get(0).getWidth());\n+        final Integer height = Integer.valueOf(adheseBid.get(0).getHeight());\n+\n+        SeatBid updateSeatBid = null;\n+        if (seatBid != null && CollectionUtils.isNotEmpty(seatBid.getBid())) {\n+            final Bid bid = seatBid.getBid().get(0);\n+            updateSeatBid = seatBid.toBuilder()\n+                    .bid(Collections.singletonList(Bid.builder()\n+                            .price(price)\n+                            .w(width)\n+                            .h(height)\n+                            .dealid(bid.getDealid())\n+                            .crid(bid.getCrid())\n+                            .adm(bid.getAdm())\n+                            .ext(bid.getExt())\n+                            .build()))\n+                    .build();\n+        }\n+\n+        if (updateSeatBid == null) {\n+            return Result.emptyWithError(BidderError\n+                    .badServerResponse(\"Response resulted in an empty seatBid array. %s.\"));\n+        }\n+\n+        /**\n+         * Used ImpId from Imp of bidRequest, because it is not provided and should be not empty value\n+         */\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<BidderBid> bidderBids = updateSeatBid.getBid().stream()\n+                .filter(Objects::nonNull)\n+                .map(bid -> makeBid(bid, bidRequest.getImp().get(0).getId(), errors))\n+                .filter(Objects::nonNull)\n+                .collect(Collectors.toList());\n+        return Result.of(bidderBids, errors);\n+    }\n+\n+    private <T> List<T> decodeBodyToBidList(HttpCall<Void> httpCall, Class<T> bidClassName) {\n+        try {\n+            return mapper.mapper().readValue(\n+                    httpCall.getResponse().getBody(),\n+                    mapper.mapper().getTypeFactory().constructCollectionType(List.class, bidClassName));\n+        } catch (DecodeException | JsonProcessingException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+    }\n+\n+    private SeatBid convertAdheseBid(AdheseBid adheseBid, AdheseResponseExt adheseResponseExt,\n+                                     AdheseOriginData adheseOriginData) {\n+        final ObjectNode adheseExtJson = mapper.mapper().valueToTree(adheseOriginData);\n+\n+        return SeatBid.builder()\n+                .bid(Collections.singletonList(Bid.builder()\n+                        .id(\"1\")\n+                        .dealid(adheseResponseExt.getOrderId())\n+                        .crid(adheseResponseExt.getId())\n+                        .adm(getAdMarkup(adheseBid, adheseResponseExt))\n+                        .ext(adheseExtJson)\n+                        .build()))\n+                .seat(\"\")\n+                .build();\n+    }\n+\n+    private String getAdMarkup(AdheseBid adheseBid, AdheseResponseExt adheseResponseExt) {\n+        if (Objects.equals(adheseResponseExt.getExt(), \"js\")) {\n+            if (StringUtils.containsAny(adheseBid.getBody(), \"<script\", \"<div\", \"<html\")) {\n+                String counter = \"\";\n+                if (adheseResponseExt.getImpressionCounter().length() > 0) {\n+                    counter = String.format(\"%s%s%s\", \"<img src='\", adheseResponseExt.getImpressionCounter(),\n+                            \"' style='height:1px; width:1px; margin: -1px -1px; display:none;'/>\");\n+                }\n+                return String.format(\"%s%s\", adheseBid.getBody(), counter);\n+            }\n+            if (StringUtils.containsAny(adheseBid.getBody(), \"<?xml\", \"<vast\")) {\n+                return adheseBid.getBody();\n+            }\n+        }\n+        return adheseResponseExt.getTag();\n+    }\n+\n+    private SeatBid convertAdheseOpenRtbBid(AdheseBid adheseBid) {\n+        return (CollectionUtils.isNotEmpty(adheseBid.getOriginData().getSeatbid())", "originalCommit": "6bb04709adf0a3385d3733e13f631d87a435e0a6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzY0Njc2NA==", "url": "https://github.com/prebid/prebid-server-java/pull/770#discussion_r453646764", "bodyText": "You do not need SeatBid at all. Just return created Bid and check for it existence in the code instead of seatBid", "author": "DGarbar", "createdAt": "2020-07-13T13:25:18Z", "path": "src/main/java/org/prebid/server/bidder/adhese/AdheseBidder.java", "diffHunk": "@@ -0,0 +1,279 @@\n+package org.prebid.server.bidder.adhese;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.request.User;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.adhese.model.AdheseBid;\n+import org.prebid.server.bidder.adhese.model.AdheseOriginData;\n+import org.prebid.server.bidder.adhese.model.AdheseResponseExt;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.ExtUser;\n+import org.prebid.server.proto.openrtb.ext.request.adhese.ExtImpAdhese;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.math.BigDecimal;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.TreeMap;\n+import java.util.stream.Collectors;\n+\n+public class AdheseBidder implements Bidder<Void> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpAdhese>> ADHESE_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpAdhese>>() {\n+            };\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+    private static final String ORIGIN = \"JERLICIA\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public AdheseBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<Void>>> makeHttpRequests(BidRequest request) {\n+        if (CollectionUtils.isEmpty(request.getImp())) {\n+            return Result.emptyWithError(BidderError.badInput(\"No impression in the bid request\"));\n+        }\n+\n+        ExtImpAdhese extImpAdhese;\n+        try {\n+            extImpAdhese = parseImpExt(request.getImp().get(0));\n+        } catch (PreBidException e) {\n+            return Result.emptyWithError(BidderError.badInput(e.getMessage()));\n+        }\n+\n+        final String uri = buildUrl(request, endpointUrl, extImpAdhese);\n+\n+        return Result.of(Collections.singletonList(\n+                HttpRequest.<Void>builder()\n+                        .method(HttpMethod.GET)\n+                        .uri(uri)\n+                        .body(null)\n+                        .headers(HttpUtil.headers())\n+                        .payload(null)\n+                        .build()),\n+                Collections.emptyList());\n+    }\n+\n+    private ExtImpAdhese parseImpExt(Imp imp) {\n+        try {\n+            return mapper.mapper().convertValue(imp.getExt(), ADHESE_EXT_TYPE_REFERENCE).getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+    }\n+\n+    private String buildUrl(BidRequest request, String endpointUrl, ExtImpAdhese extImpAdhese) {\n+        final String uri = endpointUrl.replace(\"{{AccountId}}\", extImpAdhese.getAccount());\n+        final String slotParameter = String.format(\"/sl%s-%s\", HttpUtil.encodeUrl(extImpAdhese.getLocation()),\n+                HttpUtil.encodeUrl(extImpAdhese.getFormat()));\n+\n+        return String.format(\"%s%s%s%s%s\", uri, slotParameter, getTargetParameters(extImpAdhese),\n+                getGdprParameter(request.getUser()), getRefererParameter(request.getSite()));\n+    }\n+\n+    private String getTargetParameters(ExtImpAdhese extImpAdhese) {\n+        if (extImpAdhese.getKeywords().isNull()) {\n+            return \"\";\n+        }\n+\n+        final Map<String, List<String>> targetParameters = parseTargetParametersAndSort(extImpAdhese.getKeywords());\n+        return targetParameters.entrySet().stream()\n+                .map(stringListEntry -> createPartOrUrl(stringListEntry.getKey(), stringListEntry.getValue()))\n+                .collect(Collectors.joining());\n+    }\n+\n+    private Map<String, List<String>> parseTargetParametersAndSort(JsonNode keywords) {\n+        return keywords != null ? new TreeMap<>(\n+                mapper.mapper().convertValue(keywords, new TypeReference<Map<String, List<String>>>() {\n+                })) : null;\n+    }\n+\n+    private String createPartOrUrl(String key, List<String> values) {\n+        final String formattedValues = String.join(\";\", values);\n+        return String.format(\"/%s%s\", HttpUtil.encodeUrl(key), formattedValues);\n+    }\n+\n+    private String getGdprParameter(User user) {\n+        final ExtUser extUser = user != null ? user.getExt() : null;\n+        final String consent = extUser != null ? extUser.getConsent() : null;\n+        return StringUtils.isNotBlank(consent) ? String.format(\"%s%s\", \"/xt\", consent) : \"\";\n+    }\n+\n+    private String getRefererParameter(Site site) {\n+        final String page = site != null ? site.getPage() : null;\n+        return StringUtils.isNotBlank(page) ? String.format(\"%s%s\", \"/xf\", HttpUtil.encodeUrl(page)) : \"\";\n+    }\n+\n+    @Override\n+    public Result<List<BidderBid>> makeBids(HttpCall<Void> httpCall, BidRequest bidRequest) {\n+        final int statusCode = httpCall.getResponse().getStatusCode();\n+        if (statusCode == HttpResponseStatus.NO_CONTENT.code()) {\n+            return Result.of(Collections.emptyList(), Collections.emptyList());\n+        } else if (statusCode == HttpResponseStatus.BAD_REQUEST.code()) {\n+            return Result.emptyWithError(BidderError.badInput(\"Invalid request.\"));\n+        } else if (statusCode != HttpResponseStatus.OK.code()) {\n+            return Result.emptyWithError(BidderError.badServerResponse(String.format(\"Unexpected HTTP status %s.\",\n+                    statusCode)));\n+        }\n+\n+        final List<AdheseBid> adheseBid;\n+        final List<AdheseResponseExt> adheseResponseExt;\n+        final List<AdheseOriginData> adheseOriginData;\n+        SeatBid seatBid;\n+        try {\n+            adheseBid = decodeBodyToBidList(httpCall, AdheseBid.class);\n+            if (Objects.equals(adheseBid.get(0).getOrigin(), ORIGIN)) {\n+                adheseResponseExt = decodeBodyToBidList(httpCall, AdheseResponseExt.class);\n+                adheseOriginData = decodeBodyToBidList(httpCall, AdheseOriginData.class);\n+                seatBid = convertAdheseBid(adheseBid.get(0), adheseResponseExt.get(0), adheseOriginData.get(0));\n+            } else {\n+                seatBid = convertAdheseOpenRtbBid(adheseBid.get(0));\n+            }\n+        } catch (PreBidException e) {\n+            return Result.emptyWithError(BidderError.badServerResponse(e.getMessage()));\n+        }\n+\n+        final BigDecimal price = new BigDecimal(adheseBid.get(0).getExtension().getPrebid().getCpm().getAmount());\n+        final Integer width = Integer.valueOf(adheseBid.get(0).getWidth());\n+        final Integer height = Integer.valueOf(adheseBid.get(0).getHeight());\n+\n+        SeatBid updateSeatBid = null;\n+        if (seatBid != null && CollectionUtils.isNotEmpty(seatBid.getBid())) {\n+            final Bid bid = seatBid.getBid().get(0);\n+            updateSeatBid = seatBid.toBuilder()\n+                    .bid(Collections.singletonList(Bid.builder()\n+                            .price(price)\n+                            .w(width)\n+                            .h(height)\n+                            .dealid(bid.getDealid())\n+                            .crid(bid.getCrid())\n+                            .adm(bid.getAdm())\n+                            .ext(bid.getExt())\n+                            .build()))\n+                    .build();\n+        }\n+\n+        if (updateSeatBid == null) {\n+            return Result.emptyWithError(BidderError\n+                    .badServerResponse(\"Response resulted in an empty seatBid array. %s.\"));\n+        }\n+\n+        /**\n+         * Used ImpId from Imp of bidRequest, because it is not provided and should be not empty value\n+         */\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<BidderBid> bidderBids = updateSeatBid.getBid().stream()\n+                .filter(Objects::nonNull)\n+                .map(bid -> makeBid(bid, bidRequest.getImp().get(0).getId(), errors))\n+                .filter(Objects::nonNull)\n+                .collect(Collectors.toList());\n+        return Result.of(bidderBids, errors);\n+    }\n+\n+    private <T> List<T> decodeBodyToBidList(HttpCall<Void> httpCall, Class<T> bidClassName) {\n+        try {\n+            return mapper.mapper().readValue(\n+                    httpCall.getResponse().getBody(),\n+                    mapper.mapper().getTypeFactory().constructCollectionType(List.class, bidClassName));\n+        } catch (DecodeException | JsonProcessingException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+    }\n+\n+    private SeatBid convertAdheseBid(AdheseBid adheseBid, AdheseResponseExt adheseResponseExt,\n+                                     AdheseOriginData adheseOriginData) {\n+        final ObjectNode adheseExtJson = mapper.mapper().valueToTree(adheseOriginData);\n+\n+        return SeatBid.builder()\n+                .bid(Collections.singletonList(Bid.builder()\n+                        .id(\"1\")\n+                        .dealid(adheseResponseExt.getOrderId())\n+                        .crid(adheseResponseExt.getId())\n+                        .adm(getAdMarkup(adheseBid, adheseResponseExt))\n+                        .ext(adheseExtJson)\n+                        .build()))\n+                .seat(\"\")\n+                .build();\n+    }\n+\n+    private String getAdMarkup(AdheseBid adheseBid, AdheseResponseExt adheseResponseExt) {\n+        if (Objects.equals(adheseResponseExt.getExt(), \"js\")) {\n+            if (StringUtils.containsAny(adheseBid.getBody(), \"<script\", \"<div\", \"<html\")) {\n+                String counter = \"\";\n+                if (adheseResponseExt.getImpressionCounter().length() > 0) {\n+                    counter = String.format(\"%s%s%s\", \"<img src='\", adheseResponseExt.getImpressionCounter(),\n+                            \"' style='height:1px; width:1px; margin: -1px -1px; display:none;'/>\");\n+                }\n+                return String.format(\"%s%s\", adheseBid.getBody(), counter);\n+            }\n+            if (StringUtils.containsAny(adheseBid.getBody(), \"<?xml\", \"<vast\")) {\n+                return adheseBid.getBody();\n+            }\n+        }\n+        return adheseResponseExt.getTag();\n+    }\n+\n+    private SeatBid convertAdheseOpenRtbBid(AdheseBid adheseBid) {\n+        return (CollectionUtils.isNotEmpty(adheseBid.getOriginData().getSeatbid())\n+                && CollectionUtils.isNotEmpty(adheseBid.getOriginData().getSeatbid().get(0).getBid()))\n+                ? SeatBid.builder()\n+                .bid(Collections.singletonList(Bid.builder().adm(adheseBid.getBody()).build()))\n+                .build()\n+                : null;\n+    }", "originalCommit": "6bb04709adf0a3385d3733e13f631d87a435e0a6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzY0ODEwMg==", "url": "https://github.com/prebid/prebid-server-java/pull/770#discussion_r453648102", "bodyText": "Make CamelCase", "author": "DGarbar", "createdAt": "2020-07-13T13:27:15Z", "path": "src/main/java/org/prebid/server/bidder/adhese/model/CPM.java", "diffHunk": "@@ -0,0 +1,11 @@\n+package org.prebid.server.bidder.adhese.model;\n+\n+import lombok.AllArgsConstructor;\n+import lombok.Value;\n+\n+@AllArgsConstructor(staticName = \"of\")\n+@Value\n+public class CPM {", "originalCommit": "6bb04709adf0a3385d3733e13f631d87a435e0a6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzY0ODIyNA==", "url": "https://github.com/prebid/prebid-server-java/pull/770#discussion_r453648224", "bodyText": "Make CamelCase", "author": "DGarbar", "createdAt": "2020-07-13T13:27:25Z", "path": "src/main/java/org/prebid/server/bidder/adhese/model/CPMValues.java", "diffHunk": "@@ -0,0 +1,13 @@\n+package org.prebid.server.bidder.adhese.model;\n+\n+import lombok.AllArgsConstructor;\n+import lombok.Value;\n+\n+@AllArgsConstructor(staticName = \"of\")\n+@Value\n+public class CPMValues {", "originalCommit": "6bb04709adf0a3385d3733e13f631d87a435e0a6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "208501f8e7754d025440e89156c1bc43c4cfe215", "url": "https://github.com/prebid/prebid-server-java/commit/208501f8e7754d025440e89156c1bc43c4cfe215", "message": "Refactoring SeatBid and names", "committedDate": "2020-07-13T21:11:19Z", "type": "commit"}, {"oid": "b32d4757dfbc315e495e7a2bc8e10db36b3742af", "url": "https://github.com/prebid/prebid-server-java/commit/b32d4757dfbc315e495e7a2bc8e10db36b3742af", "message": "Merge branch 'master' into add-adhese-bidder", "committedDate": "2020-08-04T13:56:56Z", "type": "commit"}]}