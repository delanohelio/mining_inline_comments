{"pr_number": 779, "pr_title": "Amp first party data", "pr_createdAt": "2020-07-01T10:46:35Z", "pr_url": "https://github.com/prebid/prebid-server-java/pull/779", "timeline": [{"oid": "3f5987d97d7560e5e2d61f94ec6ae82be4e24f10", "url": "https://github.com/prebid/prebid-server-java/commit/3f5987d97d7560e5e2d61f94ec6ae82be4e24f10", "message": "Amp first party data initial commit", "committedDate": "2020-07-01T10:43:59Z", "type": "commit"}, {"oid": "273f0b059aa4b2b1851c646c57966e90e57a06ad", "url": "https://github.com/prebid/prebid-server-java/commit/273f0b059aa4b2b1851c646c57966e90e57a06ad", "message": "Merge branch 'master' into amp-support-for-fpd\n\n# Conflicts:\n#\tsrc/main/java/com/iab/openrtb/request/App.java\n#\tsrc/main/java/com/iab/openrtb/request/Site.java\n#\tsrc/main/java/com/iab/openrtb/request/User.java\n#\tsrc/main/java/org/prebid/server/auction/AmpRequestFactory.java", "committedDate": "2020-07-01T11:18:37Z", "type": "commit"}, {"oid": "aff127682278ccfacbcf52dbb5127d13b9a30e90", "url": "https://github.com/prebid/prebid-server-java/commit/aff127682278ccfacbcf52dbb5127d13b9a30e90", "message": "Update extensions from objectNode to class representation", "committedDate": "2020-07-01T15:19:01Z", "type": "commit"}, {"oid": "fea75f3cc2bacaa5e2321cb6ca08fbe8b63158ad", "url": "https://github.com/prebid/prebid-server-java/commit/fea75f3cc2bacaa5e2321cb6ca08fbe8b63158ad", "message": "Cover with unit tests", "committedDate": "2020-07-03T09:57:18Z", "type": "commit"}, {"oid": "8a7690d80554f359b94a89e8d0cc6a31fedea947", "url": "https://github.com/prebid/prebid-server-java/commit/8a7690d80554f359b94a89e8d0cc6a31fedea947", "message": "Merge branch 'master' into amp-support-for-fpd\n\n# Conflicts:\n#\tsrc/test/java/org/prebid/server/auction/AmpRequestFactoryTest.java", "committedDate": "2020-07-03T10:16:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTU5OTI5Mg==", "url": "https://github.com/prebid/prebid-server-java/pull/779#discussion_r449599292", "bodyText": "This cast is worrisome - why not check if parsed JsonNode is object and make cast in readTargeting?", "author": "schernysh", "createdAt": "2020-07-03T14:02:44Z", "path": "src/main/java/org/prebid/server/auction/AmpRequestFactory.java", "diffHunk": "@@ -221,37 +227,64 @@ private BidRequest overrideParameters(BidRequest bidRequest, HttpServerRequest r\n             }\n         }\n \n-        final Site updatedSite = overrideSite(bidRequest.getSite(), request);\n-        final Imp updatedImp = overrideImp(bidRequest.getImp().get(0), request);\n+        final String requestTargeting = request.getParam(TARGETING_REQUEST_PARAM);\n+        final Targeting targeting = parseTargeting(requestTargeting);\n+        final ObjectNode targetingNode = (ObjectNode) readTargeting(requestTargeting);", "originalCommit": "8a7690d80554f359b94a89e8d0cc6a31fedea947", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA3MjkyMQ==", "url": "https://github.com/prebid/prebid-server-java/pull/779#discussion_r450072921", "bodyText": "fixed", "author": "BraslavskiyAndrey", "createdAt": "2020-07-06T08:44:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTU5OTI5Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTYwMDIzMw==", "url": "https://github.com/prebid/prebid-server-java/pull/779#discussion_r449600233", "bodyText": "requestTargeting looks to be the same value as input parameter in parseTargeting. However here it is not decoded prior to parsing. Is it intentional difference?", "author": "schernysh", "createdAt": "2020-07-03T14:04:47Z", "path": "src/main/java/org/prebid/server/auction/AmpRequestFactory.java", "diffHunk": "@@ -221,37 +227,64 @@ private BidRequest overrideParameters(BidRequest bidRequest, HttpServerRequest r\n             }\n         }\n \n-        final Site updatedSite = overrideSite(bidRequest.getSite(), request);\n-        final Imp updatedImp = overrideImp(bidRequest.getImp().get(0), request);\n+        final String requestTargeting = request.getParam(TARGETING_REQUEST_PARAM);\n+        final Targeting targeting = parseTargeting(requestTargeting);\n+        final ObjectNode targetingNode = (ObjectNode) readTargeting(requestTargeting);\n+\n+        final Site updatedSite = overrideSite(bidRequest.getSite(), request, targeting);\n+        final Imp updatedImp = overrideImp(bidRequest.getImp().get(0), request, targetingNode);\n         final Long updatedTimeout = overrideTimeout(bidRequest.getTmax(), request);\n-        final User updatedUser = overrideUser(bidRequest.getUser(), gdprConsent);\n+        final User updatedUser = overrideUser(bidRequest.getUser(), gdprConsent, targeting);\n         final Regs updatedRegs = overrideRegs(bidRequest.getRegs(), ccpaConsent);\n+        final ExtRequest updatedExtBidRequest = overrideExtBidRequest(bidRequest.getExt(), targeting);\n \n         final BidRequest result;\n         if (updatedSite != null || updatedImp != null || updatedTimeout != null || updatedUser != null\n-                || updatedRegs != null) {\n+                || updatedRegs != null || updatedExtBidRequest != null) {\n             result = bidRequest.toBuilder()\n                     .site(updatedSite != null ? updatedSite : bidRequest.getSite())\n                     .imp(updatedImp != null ? Collections.singletonList(updatedImp) : bidRequest.getImp())\n                     .tmax(updatedTimeout != null ? updatedTimeout : bidRequest.getTmax())\n                     .user(updatedUser != null ? updatedUser : bidRequest.getUser())\n                     .regs(updatedRegs != null ? updatedRegs : bidRequest.getRegs())\n+                    .ext(updatedExtBidRequest != null ? updatedExtBidRequest : bidRequest.getExt())\n                     .build();\n         } else {\n             result = bidRequest;\n         }\n         return result;\n     }\n \n-    private Site overrideSite(Site site, HttpServerRequest request) {\n+    private JsonNode readTargeting(String requestTargeting) {\n+        try {\n+            return requestTargeting != null ? mapper.mapper().readTree(requestTargeting) : null;", "originalCommit": "8a7690d80554f359b94a89e8d0cc6a31fedea947", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA3MjgyNg==", "url": "https://github.com/prebid/prebid-server-java/pull/779#discussion_r450072826", "bodyText": "It is mistake, fixed", "author": "BraslavskiyAndrey", "createdAt": "2020-07-06T08:44:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTYwMDIzMw=="}], "type": "inlineReview"}, {"oid": "833888b5700d4aad148d546f1baec0a04cdb472b", "url": "https://github.com/prebid/prebid-server-java/commit/833888b5700d4aad148d546f1baec0a04cdb472b", "message": "Fix targeting parsing", "committedDate": "2020-07-06T08:58:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA5ODI3Ng==", "url": "https://github.com/prebid/prebid-server-java/pull/779#discussion_r450098276", "bodyText": "Pls consider decodeUrl can produce IllegalArgumentException exception which must be wrapped.", "author": "rpanchyk", "createdAt": "2020-07-06T09:28:44Z", "path": "src/main/java/org/prebid/server/auction/AmpRequestFactory.java", "diffHunk": "@@ -221,37 +226,76 @@ private BidRequest overrideParameters(BidRequest bidRequest, HttpServerRequest r\n             }\n         }\n \n-        final Site updatedSite = overrideSite(bidRequest.getSite(), request);\n-        final Imp updatedImp = overrideImp(bidRequest.getImp().get(0), request);\n+        final String requestTargeting = request.getParam(TARGETING_REQUEST_PARAM);\n+        final ObjectNode targetingNode = readTargeting(requestTargeting);\n+        final Targeting targeting = parseTargeting(targetingNode);\n+\n+        final Site updatedSite = overrideSite(bidRequest.getSite(), request, targeting);\n+        final Imp updatedImp = overrideImp(bidRequest.getImp().get(0), request, targetingNode);\n         final Long updatedTimeout = overrideTimeout(bidRequest.getTmax(), request);\n-        final User updatedUser = overrideUser(bidRequest.getUser(), gdprConsent);\n+        final User updatedUser = overrideUser(bidRequest.getUser(), gdprConsent, targeting);\n         final Regs updatedRegs = overrideRegs(bidRequest.getRegs(), ccpaConsent);\n+        final ExtRequest updatedExtBidRequest = overrideExtBidRequest(bidRequest.getExt(), targeting);\n \n         final BidRequest result;\n         if (updatedSite != null || updatedImp != null || updatedTimeout != null || updatedUser != null\n-                || updatedRegs != null) {\n+                || updatedRegs != null || updatedExtBidRequest != null) {\n             result = bidRequest.toBuilder()\n                     .site(updatedSite != null ? updatedSite : bidRequest.getSite())\n                     .imp(updatedImp != null ? Collections.singletonList(updatedImp) : bidRequest.getImp())\n                     .tmax(updatedTimeout != null ? updatedTimeout : bidRequest.getTmax())\n                     .user(updatedUser != null ? updatedUser : bidRequest.getUser())\n                     .regs(updatedRegs != null ? updatedRegs : bidRequest.getRegs())\n+                    .ext(updatedExtBidRequest != null ? updatedExtBidRequest : bidRequest.getExt())\n                     .build();\n         } else {\n             result = bidRequest;\n         }\n         return result;\n     }\n \n-    private Site overrideSite(Site site, HttpServerRequest request) {\n+    private ObjectNode readTargeting(String jsonTargeting) {\n+        try {\n+            final String decodedJsonTargeting = HttpUtil.decodeUrl(jsonTargeting);", "originalCommit": "833888b5700d4aad148d546f1baec0a04cdb472b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "8e4636967355f6475beccc7d29a4d796a2d4d57b", "url": "https://github.com/prebid/prebid-server-java/commit/8e4636967355f6475beccc7d29a4d796a2d4d57b", "message": "Handle IllegalArgumentException when decoding targeting", "committedDate": "2020-07-06T10:52:59Z", "type": "commit"}]}