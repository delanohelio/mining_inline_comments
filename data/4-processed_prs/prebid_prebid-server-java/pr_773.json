{"pr_number": 773, "pr_title": "Gdpr behavior by integration type", "pr_createdAt": "2020-06-22T13:13:22Z", "pr_url": "https://github.com/prebid/prebid-server-java/pull/773", "timeline": [{"oid": "619fd75b6fe5e03b17b2424191b20d98cab84bda", "url": "https://github.com/prebid/prebid-server-java/commit/619fd75b6fe5e03b17b2424191b20d98cab84bda", "message": "Split gdpr enabled by request type", "committedDate": "2020-06-22T06:45:58Z", "type": "commit"}, {"oid": "2073ad834d38341984dbd296bf3a6067425f63d7", "url": "https://github.com/prebid/prebid-server-java/commit/2073ad834d38341984dbd296bf3a6067425f63d7", "message": "Return enabled property for legacy and not auction requests", "committedDate": "2020-06-22T13:08:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDE4NjA5NQ==", "url": "https://github.com/prebid/prebid-server-java/pull/773#discussion_r444186095", "bodyText": "Probably, it's better to get accountEnabled from retrieved account also.\n final Boolean accountGdprEnabled = accountGdprConfig != null && accountGdprConfig.getEnabled() != null;\n\n        if (requestType == null) {\n            return ObjectUtils.firstNonNull(accountGdprEnabled, gdprEnabled);\n        }\n\n        final EnabledForRequestType enabledForRequestType = accountGdprConfig != null\n                ? accountGdprConfig.getEnabledForRequestType()\n                : null;\n        final Boolean enabledForType = enabledForRequestType != null\n                ? enabledForRequestType.isEnabledFor(requestType)\n                : null;\n\n        return ObjectUtils.firstNonNull(enabledForType, accountGdprEnabled, gdprEnabled);", "author": "DGarbar", "createdAt": "2020-06-23T12:31:47Z", "path": "src/main/java/org/prebid/server/privacy/gdpr/TcfDefinerService.java", "diffHunk": "@@ -143,10 +150,17 @@ public TcfDefinerService(GdprConfig gdprConfig,\n                         dispatchToService(gdprInfoWithCountry, allowAllTcfResponseCreator, tcf2Strategy, gdprStrategy));\n     }\n \n-    private boolean isGdprEnabled(AccountGdprConfig accountGdprConfig) {\n-        return accountGdprConfig != null && accountGdprConfig.getEnabled() != null\n-                ? accountGdprConfig.getEnabled()\n-                : gdprEnabled;\n+    private boolean isGdprEnabled(AccountGdprConfig accountGdprConfig, MetricName requestType) {\n+        if (requestType == null) {\n+            return accountGdprConfig != null && accountGdprConfig.getEnabled() != null\n+                    ? accountGdprConfig.getEnabled()\n+                    : gdprEnabled;\n+        }\n+        final EnabledForRequestType enabledForRequestType = accountGdprConfig != null\n+                ? accountGdprConfig.getEnabledForRequestType()\n+                : null;\n+        final Boolean enabled = enabledForRequestType != null ? enabledForRequestType.isEnabledFor(requestType) : null;\n+        return enabled != null ? enabled : gdprEnabled;", "originalCommit": "2073ad834d38341984dbd296bf3a6067425f63d7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDE5Mjc2MA==", "url": "https://github.com/prebid/prebid-server-java/pull/773#discussion_r444192760", "bodyText": "accountGdprConfig.getEnabled() should not have impact on auction typed requests", "author": "BraslavskiyAndrey", "createdAt": "2020-06-23T12:42:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDE4NjA5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDIzNjk1MA==", "url": "https://github.com/prebid/prebid-server-java/pull/773#discussion_r444236950", "bodyText": "After discussion with Bret we decide that integration_enabled should override account_enabled. So @DGarbar is right, pull request updated. Thanks", "author": "BraslavskiyAndrey", "createdAt": "2020-06-23T13:47:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDE4NjA5NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDE4ODQ3NA==", "url": "https://github.com/prebid/prebid-server-java/pull/773#discussion_r444188474", "bodyText": "Don't we need to check account.enabled also ?", "author": "DGarbar", "createdAt": "2020-06-23T12:36:01Z", "path": "src/test/java/org/prebid/server/privacy/gdpr/TcfDefinerServiceTest.java", "diffHunk": "@@ -112,14 +114,93 @@ public void resultForVendorIdsShouldAllowAllWhenGdprIsDisabled() {\n         verifyZeroInteractions(metrics);\n     }\n \n+    @Test\n+    public void resultForBidderNamesShouldAllowAllWhenGdprIsDisabledByAccountForRequestType() {\n+        // given\n+        final AccountGdprConfig accountGdprConfig = AccountGdprConfig.builder()\n+                .enabledForRequestType(EnabledForRequestType.of(null, false, null, null))\n+                .build();\n+\n+        // when\n+        final Future<TcfResponse<String>> result = target.resultForBidderNames(\n+                singleton(\"b\"), null, null, null, null, accountGdprConfig, MetricName.amp, null);\n+\n+        // then\n+        assertThat(result).succeededWith(\n+                TcfResponse.of(false, singletonMap(\"b\", PrivacyEnforcementAction.allowAll()), null));\n+\n+        verifyZeroInteractions(gdprService);\n+        verifyZeroInteractions(tcf2Service);\n+        verifyZeroInteractions(geoLocationService);\n+        verifyZeroInteractions(metrics);\n+    }\n+\n     @Test\n     public void resultForBidderNamesShouldAllowAllWhenGdprIsDisabledByAccount() {\n         // given\n         final AccountGdprConfig accountGdprConfig = AccountGdprConfig.builder().enabled(false).build();\n \n         // when\n         final Future<TcfResponse<String>> result = target.resultForBidderNames(\n-                singleton(\"b\"), null, null, null, null, accountGdprConfig, null);\n+                singleton(\"b\"), null, null, null, null, accountGdprConfig, null, null);\n+\n+        // then\n+        assertThat(result).succeededWith(\n+                TcfResponse.of(false, singletonMap(\"b\", PrivacyEnforcementAction.allowAll()), null));\n+\n+        verifyZeroInteractions(gdprService);\n+        verifyZeroInteractions(tcf2Service);\n+        verifyZeroInteractions(geoLocationService);\n+        verifyZeroInteractions(metrics);\n+    }\n+\n+    @Test\n+    public void resultForBidderNamesShouldAllowAllWhenGdprIsNotDefinedForRequestTypeAndPBSGdprIsDisabled() {\n+        // given\n+        final GdprConfig gdprConfig = GdprConfig.builder()\n+                .defaultValue(\"1\")\n+                .enabled(false)\n+                .purposes(purposes)\n+                .build();\n+        final TcfDefinerService target = new TcfDefinerService(gdprConfig, singleton(EEA_COUNTRY), gdprService,\n+                tcf2Service, geoLocationService, bidderCatalog, metrics);\n+\n+        final AccountGdprConfig accountGdprConfig = AccountGdprConfig.builder()\n+                .enabledForRequestType(EnabledForRequestType.of(null, null, null, null))\n+                .build();\n+\n+        // when\n+        final Future<TcfResponse<String>> result = target.resultForBidderNames(\n+                singleton(\"b\"), null, null, null, null, accountGdprConfig, MetricName.amp, null);\n+\n+        // then\n+        assertThat(result).succeededWith(\n+                TcfResponse.of(false, singletonMap(\"b\", PrivacyEnforcementAction.allowAll()), null));\n+\n+        verifyZeroInteractions(gdprService);\n+        verifyZeroInteractions(tcf2Service);\n+        verifyZeroInteractions(geoLocationService);\n+        verifyZeroInteractions(metrics);\n+    }\n+\n+    @Test\n+    public void resultForBidderNamesShouldIgnoreUnknownRequestTypeAndDecideByPbsGdprDisabledProperty() {", "originalCommit": "2073ad834d38341984dbd296bf3a6067425f63d7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDE5MTAxMA==", "url": "https://github.com/prebid/prebid-server-java/pull/773#discussion_r444191010", "bodyText": "No, we don't. Account.enabled only for usersync and setuid. If gdpr for request type is not defined only pbs config checked.", "author": "BraslavskiyAndrey", "createdAt": "2020-06-23T12:40:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDE4ODQ3NA=="}], "type": "inlineReview"}, {"oid": "c55b8d11c1e1a04fc2a7fbb6552bf300cfc56539", "url": "https://github.com/prebid/prebid-server-java/commit/c55b8d11c1e1a04fc2a7fbb6552bf300cfc56539", "message": "account.gdpr.integration_enabled config overrides account.gdpr.enabled config", "committedDate": "2020-06-23T13:40:20Z", "type": "commit"}, {"oid": "eb79ed068b27d3797f136d731d86635d38adde78", "url": "https://github.com/prebid/prebid-server-java/commit/eb79ed068b27d3797f136d731d86635d38adde78", "message": "Merge branch 'master' into gdpr-behavior-by-integration-type\n\n# Conflicts:\n#\tsrc/main/java/org/prebid/server/auction/PrivacyEnforcementService.java", "committedDate": "2020-08-06T12:00:03Z", "type": "commit"}, {"oid": "a0cd442d10b2423456b2366512cbded0f9d4434d", "url": "https://github.com/prebid/prebid-server-java/commit/a0cd442d10b2423456b2366512cbded0f9d4434d", "message": "Resolved merge errors", "committedDate": "2020-08-06T12:07:35Z", "type": "commit"}, {"oid": "02e84b3cb9683b2b2caeb5e8bc82facd26723ec9", "url": "https://github.com/prebid/prebid-server-java/commit/02e84b3cb9683b2b2caeb5e8bc82facd26723ec9", "message": "Update application-settings.md for integration-enabled property", "committedDate": "2020-08-06T12:13:30Z", "type": "commit"}, {"oid": "a81dfde458f510d24e11109374db2d291773e7ce", "url": "https://github.com/prebid/prebid-server-java/commit/a81dfde458f510d24e11109374db2d291773e7ce", "message": "Merge branch 'master' into gdpr-behavior-by-integration-type", "committedDate": "2020-08-12T13:30:41Z", "type": "commit"}, {"oid": "44bdafa7e204b4321b5fbe30a512eba88de8fe13", "url": "https://github.com/prebid/prebid-server-java/commit/44bdafa7e204b4321b5fbe30a512eba88de8fe13", "message": "Fixes after review", "committedDate": "2020-08-12T13:41:22Z", "type": "commit"}]}