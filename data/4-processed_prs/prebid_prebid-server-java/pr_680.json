{"pr_number": 680, "pr_title": "Add Yieldone bidder", "pr_createdAt": "2020-04-17T21:58:05Z", "pr_url": "https://github.com/prebid/prebid-server-java/pull/680", "timeline": [{"oid": "72ca233704f35cbcf9c46b612426b5840580eed5", "url": "https://github.com/prebid/prebid-server-java/commit/72ca233704f35cbcf9c46b612426b5840580eed5", "message": "Add YieldoneBidder and tests", "committedDate": "2020-04-17T21:51:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjA4NDQxNw==", "url": "https://github.com/prebid/prebid-server-java/pull/680#discussion_r412084417", "bodyText": "change .size to CollectionUtils.isNotEmpty()", "author": "DGarbar", "createdAt": "2020-04-21T10:58:37Z", "path": "src/main/java/org/prebid/server/bidder/yieldone/YieldoneBidder.java", "diffHunk": "@@ -0,0 +1,159 @@\n+package org.prebid.server.bidder.yieldone;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.http.HttpMethod;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.yieldone.ExtImpYieldone;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Yieldone {@link Bidder} implementation.\n+ */\n+public class YieldoneBidder implements Bidder<BidRequest> {\n+    private static final TypeReference<ExtPrebid<?, ExtImpYieldone>> YIELDONE_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpYieldone>>() {\n+            };\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public YieldoneBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<Imp> validImps = new ArrayList<>();\n+\n+        for (Imp imp : request.getImp()) {\n+            try {\n+                final Imp validImp = validateImp(imp);\n+                final ExtImpYieldone extImp = parseImpExt(imp);\n+\n+                validImps.add(validImp);\n+\n+            } catch (PreBidException e) {\n+                errors.add(BidderError.badInput(e.getMessage()));\n+            }\n+        }\n+\n+        final BidRequest outgoingRequest = request.toBuilder().imp(validImps).build();\n+        final String body = mapper.encode(outgoingRequest);\n+\n+        return Result.of(Collections.singletonList(\n+                HttpRequest.<BidRequest>builder()\n+                        .method(HttpMethod.POST)\n+                        .uri(endpointUrl)\n+                        .headers(HttpUtil.headers())\n+                        .payload(outgoingRequest)\n+                        .body(body)\n+                        .build()),\n+                errors);\n+    }\n+\n+    private Imp validateImp(Imp imp) {\n+        final Banner banner = imp.getBanner();\n+        if (banner != null) {\n+            if (banner.getH() == null && banner.getW() == null && banner.getFormat().size() > 0) {", "originalCommit": "72ca233704f35cbcf9c46b612426b5840580eed5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjA4NDY2Ng==", "url": "https://github.com/prebid/prebid-server-java/pull/680#discussion_r412084666", "bodyText": "You are not validating anything in this method\nChange name", "author": "DGarbar", "createdAt": "2020-04-21T10:58:59Z", "path": "src/main/java/org/prebid/server/bidder/yieldone/YieldoneBidder.java", "diffHunk": "@@ -0,0 +1,159 @@\n+package org.prebid.server.bidder.yieldone;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.http.HttpMethod;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.yieldone.ExtImpYieldone;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Yieldone {@link Bidder} implementation.\n+ */\n+public class YieldoneBidder implements Bidder<BidRequest> {\n+    private static final TypeReference<ExtPrebid<?, ExtImpYieldone>> YIELDONE_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpYieldone>>() {\n+            };\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public YieldoneBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<Imp> validImps = new ArrayList<>();\n+\n+        for (Imp imp : request.getImp()) {\n+            try {\n+                final Imp validImp = validateImp(imp);\n+                final ExtImpYieldone extImp = parseImpExt(imp);\n+\n+                validImps.add(validImp);\n+\n+            } catch (PreBidException e) {\n+                errors.add(BidderError.badInput(e.getMessage()));\n+            }\n+        }\n+\n+        final BidRequest outgoingRequest = request.toBuilder().imp(validImps).build();\n+        final String body = mapper.encode(outgoingRequest);\n+\n+        return Result.of(Collections.singletonList(\n+                HttpRequest.<BidRequest>builder()\n+                        .method(HttpMethod.POST)\n+                        .uri(endpointUrl)\n+                        .headers(HttpUtil.headers())\n+                        .payload(outgoingRequest)\n+                        .body(body)\n+                        .build()),\n+                errors);\n+    }\n+\n+    private Imp validateImp(Imp imp) {", "originalCommit": "72ca233704f35cbcf9c46b612426b5840580eed5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjA4Njc0MQ==", "url": "https://github.com/prebid/prebid-server-java/pull/680#discussion_r412086741", "bodyText": "This method is not necessary.\nWe validating all required (that was specified in .json) parameters in auction workflow.\nBuy you can change it to test ext.\nvalidateImpExt for example (which will return void)", "author": "DGarbar", "createdAt": "2020-04-21T11:02:25Z", "path": "src/main/java/org/prebid/server/bidder/yieldone/YieldoneBidder.java", "diffHunk": "@@ -0,0 +1,159 @@\n+package org.prebid.server.bidder.yieldone;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.http.HttpMethod;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.yieldone.ExtImpYieldone;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Yieldone {@link Bidder} implementation.\n+ */\n+public class YieldoneBidder implements Bidder<BidRequest> {\n+    private static final TypeReference<ExtPrebid<?, ExtImpYieldone>> YIELDONE_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpYieldone>>() {\n+            };\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public YieldoneBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<Imp> validImps = new ArrayList<>();\n+\n+        for (Imp imp : request.getImp()) {\n+            try {\n+                final Imp validImp = validateImp(imp);\n+                final ExtImpYieldone extImp = parseImpExt(imp);\n+\n+                validImps.add(validImp);\n+\n+            } catch (PreBidException e) {\n+                errors.add(BidderError.badInput(e.getMessage()));\n+            }\n+        }\n+\n+        final BidRequest outgoingRequest = request.toBuilder().imp(validImps).build();\n+        final String body = mapper.encode(outgoingRequest);\n+\n+        return Result.of(Collections.singletonList(\n+                HttpRequest.<BidRequest>builder()\n+                        .method(HttpMethod.POST)\n+                        .uri(endpointUrl)\n+                        .headers(HttpUtil.headers())\n+                        .payload(outgoingRequest)\n+                        .body(body)\n+                        .build()),\n+                errors);\n+    }\n+\n+    private Imp validateImp(Imp imp) {\n+        final Banner banner = imp.getBanner();\n+        if (banner != null) {\n+            if (banner.getH() == null && banner.getW() == null && banner.getFormat().size() > 0) {\n+                final Format firstFormat = banner.getFormat().get(0);\n+                final Banner modifiedBanner = banner.toBuilder()\n+                        .h(firstFormat.getH())\n+                        .w(firstFormat.getW())\n+                        .build();\n+                return imp.toBuilder().banner(modifiedBanner).build();\n+            }\n+        }\n+        return imp;\n+    }\n+\n+    private ExtImpYieldone parseImpExt(Imp imp) {\n+        try {\n+            return mapper.mapper().convertValue(imp.getExt(), YIELDONE_EXT_TYPE_REFERENCE).getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+    }", "originalCommit": "72ca233704f35cbcf9c46b612426b5840580eed5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjA5MTczMw==", "url": "https://github.com/prebid/prebid-server-java/pull/680#discussion_r412091733", "bodyText": "Add testCases:\n\nBanner h and w was modified by Format[0]\nImpExt failed decode.\nExpected makeHttREquests result", "author": "DGarbar", "createdAt": "2020-04-21T11:10:57Z", "path": "src/test/java/org/prebid/server/bidder/yieldone/YieldoneBidderTest.java", "diffHunk": "@@ -0,0 +1,135 @@\n+package org.prebid.server.bidder.yieldone;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.iab.openrtb.request.Audio;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Video;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.prebid.server.VertxTest;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.HttpResponse;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+\n+import java.util.List;\n+import java.util.function.Function;\n+\n+import static java.util.Collections.emptyMap;\n+import static java.util.Collections.singletonList;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;\n+\n+public class YieldoneBidderTest extends VertxTest {", "originalCommit": "72ca233704f35cbcf9c46b612426b5840580eed5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjA5Mjk3Mg==", "url": "https://github.com/prebid/prebid-server-java/pull/680#discussion_r412092972", "bodyText": "parse this string from base64 and encode\n{\"uids\":{\"yieldone\":\"YD-UID\"}}\nPerform similar changes with others bidder integration tests", "author": "DGarbar", "createdAt": "2020-04-21T11:12:56Z", "path": "src/test/java/org/prebid/server/it/YieldoneTest.java", "diffHunk": "@@ -0,0 +1,56 @@\n+package org.prebid.server.it;\n+\n+import io.restassured.response.Response;\n+import org.json.JSONException;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.skyscreamer.jsonassert.JSONAssert;\n+import org.skyscreamer.jsonassert.JSONCompareMode;\n+import org.springframework.test.context.junit4.SpringRunner;\n+\n+import java.io.IOException;\n+\n+import static com.github.tomakehurst.wiremock.client.WireMock.aResponse;\n+import static com.github.tomakehurst.wiremock.client.WireMock.equalTo;\n+import static com.github.tomakehurst.wiremock.client.WireMock.equalToJson;\n+import static com.github.tomakehurst.wiremock.client.WireMock.post;\n+import static com.github.tomakehurst.wiremock.client.WireMock.urlPathEqualTo;\n+import static io.restassured.RestAssured.given;\n+import static java.util.Collections.singletonList;\n+\n+@RunWith(SpringRunner.class)\n+public class YieldoneTest extends IntegrationTest {\n+\n+    @Test\n+    public void openrtb2AuctionShouldRespondWithBidsFromYieldone() throws IOException, JSONException {\n+        // given\n+        // Yieldone bid response for imp 001\n+        WIRE_MOCK_RULE.stubFor(post(urlPathEqualTo(\"/yieldone-exchange\"))\n+                .withHeader(\"Accept\", equalTo(\"application/json\"))\n+                .withHeader(\"Content-Type\", equalTo(\"application/json;charset=UTF-8\"))\n+                .withRequestBody(equalToJson(jsonFrom(\"openrtb2/yieldone/test-yieldone-bid-request.json\")))\n+                .willReturn(aResponse().withBody(jsonFrom(\"openrtb2/yieldone/test-yieldone-bid-response.json\"))));\n+\n+        // pre-bid cache\n+        WIRE_MOCK_RULE.stubFor(post(urlPathEqualTo(\"/cache\"))\n+                .withRequestBody(equalToJson(jsonFrom(\"openrtb2/yieldone/test-cache-yieldone-request.json\")))\n+                .willReturn(aResponse().withBody(jsonFrom(\"openrtb2/yieldone/test-cache-yieldone-response.json\"))));\n+\n+        // when\n+        final Response response = given(SPEC)\n+                .header(\"Referer\", \"http://www.example.com\")\n+                .header(\"X-Forwarded-For\", \"193.168.244.1\")\n+                .header(\"User-Agent\", \"userAgent\")\n+                .header(\"Origin\", \"http://www.example.com\")\n+                .cookie(\"uids\", \"eyJ1aWRzIjp7ImdhbW9zaGkiOiJHTS1VSUQifX0=\")", "originalCommit": "72ca233704f35cbcf9c46b612426b5840580eed5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "22098154b7aa4f6600f3731178ca584cc9031ae5", "url": "https://github.com/prebid/prebid-server-java/commit/22098154b7aa4f6600f3731178ca584cc9031ae5", "message": "Some refactoring after review", "committedDate": "2020-04-21T15:05:41Z", "type": "commit"}]}