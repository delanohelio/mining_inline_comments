{"pr_number": 596, "pr_title": "Add SmartRTB bidder", "pr_createdAt": "2020-01-24T11:13:09Z", "pr_url": "https://github.com/prebid/prebid-server-java/pull/596", "timeline": [{"oid": "df4607646fdb862a57588d11d819ec77d11b4259", "url": "https://github.com/prebid/prebid-server-java/commit/df4607646fdb862a57588d11d819ec77d11b4259", "message": "Add SmartRTB bidder", "committedDate": "2020-01-24T11:00:38Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDYwMjQ2Mg==", "url": "https://github.com/prebid/prebid-server-java/pull/596#discussion_r370602462", "bodyText": "{{.PublisherID}} is not parsed by java. (It is used in GO for variable)\nRemove this, and add test for validate right endpoint url creation.", "author": "DGarbar", "createdAt": "2020-01-24T12:07:04Z", "path": "src/main/resources/bidder-config/smartrtb.yaml", "diffHunk": "@@ -0,0 +1,24 @@\n+adapters:\n+  smartrtb:\n+    enabled: false\n+    endpoint: http://market-east.smrtb.com/json/publisher/rtb?pubid={{.PublisherID}}", "originalCommit": "df4607646fdb862a57588d11d819ec77d11b4259", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDYwMjYzOA==", "url": "https://github.com/prebid/prebid-server-java/pull/596#discussion_r370602638", "bodyText": "There are redirect url\nhttps://github.com/prebid/prebid-server/pull/1071/files#diff-3baf47c64847a8fb8aaa8cc2e088513bR521", "author": "DGarbar", "createdAt": "2020-01-24T12:07:39Z", "path": "src/main/resources/bidder-config/smartrtb.yaml", "diffHunk": "@@ -0,0 +1,24 @@\n+adapters:\n+  smartrtb:\n+    enabled: false\n+    endpoint: http://market-east.smrtb.com/json/publisher/rtb?pubid={{.PublisherID}}\n+    pbs-enforces-gdpr: true\n+    modifying-vast-xml-allowed: true\n+    deprecated-names:\n+    aliases:\n+    meta-info:\n+      maintainer-email: \"engineering@smrtb.com\"\n+      app-media-types:\n+        - banner\n+        - video\n+      site-media-types:\n+        - banner\n+        - video\n+      supported-vendors:\n+      vendor-id: 0\n+    usersync:\n+      url:\n+      redirect-url:", "originalCommit": "df4607646fdb862a57588d11d819ec77d11b4259", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDYwMzI0Mg==", "url": "https://github.com/prebid/prebid-server-java/pull/596#discussion_r370603242", "bodyText": "pub_id", "author": "DGarbar", "createdAt": "2020-01-24T12:09:19Z", "path": "src/main/resources/static/bidder-params/smartrtb.json", "diffHunk": "@@ -0,0 +1,27 @@\n+{\n+  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n+  \"title\": \"SmartRTB Adapter Params\",\n+  \"description\": \"A schema which validates params accepted by SmartRTB adapter\",\n+  \"type\": \"object\",\n+  \"properties\": {\n+    \"publisherId\": {\n+      \"type\": \"string\",\n+      \"description\": \"Assigned publisher ID\",\n+      \"minLength\": 4\n+    },\n+    \"mediaId\": {\n+      \"type\": \"string\",\n+      \"description\": \"Property ID not zone ID not provided\"\n+    },\n+    \"zoneId\": {\n+      \"type\": \"string\",\n+      \"description\": \"Specific zone ID for this placement, belonging to app/site\",\n+      \"minLength\": 20\n+    },\n+    \"forceBid\": {\n+      \"type\": \"boolean\",\n+      \"description\": \"Force bids with a test creative\"\n+    }\n+  },\n+  \"required\": [ \"publisherId\" ]", "originalCommit": "df4607646fdb862a57588d11d819ec77d11b4259", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDY2NjE4Mg==", "url": "https://github.com/prebid/prebid-server-java/pull/596#discussion_r370666182", "bodyText": "It seems to be better name \"publisherId\" than just \"pub_id\" ?", "author": "AndriyPavlyuk", "createdAt": "2020-01-24T14:38:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDYwMzI0Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDY4NzAyMw==", "url": "https://github.com/prebid/prebid-server-java/pull/596#discussion_r370687023", "bodyText": "This json schema is used for parameter validation.\nIn GO they have absolutely identical schema, so you can just copy form there.\nIt is not our decision how this parameters will be named in a received request.", "author": "DGarbar", "createdAt": "2020-01-24T15:17:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDYwMzI0Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDYwMzM3NA==", "url": "https://github.com/prebid/prebid-server-java/pull/596#discussion_r370603374", "bodyText": "Keep schema from GO. Change all variable appropriately\npub_id", "author": "DGarbar", "createdAt": "2020-01-24T12:09:44Z", "path": "src/main/resources/static/bidder-params/smartrtb.json", "diffHunk": "@@ -0,0 +1,27 @@\n+{\n+  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n+  \"title\": \"SmartRTB Adapter Params\",\n+  \"description\": \"A schema which validates params accepted by SmartRTB adapter\",\n+  \"type\": \"object\",\n+  \"properties\": {\n+    \"publisherId\": {", "originalCommit": "df4607646fdb862a57588d11d819ec77d11b4259", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDYwNDY0Mw==", "url": "https://github.com/prebid/prebid-server-java/pull/596#discussion_r370604643", "bodyText": "Arrange method, according to workflow chain.", "author": "DGarbar", "createdAt": "2020-01-24T12:13:47Z", "path": "src/main/java/org/prebid/server/bidder/smartrtb/SmartrtbBidder.java", "diffHunk": "@@ -0,0 +1,207 @@\n+package org.prebid.server.bidder.smartrtb;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.core.json.DecodeException;\n+import io.vertx.core.json.Json;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.smartrtb.ExtImpSmartrtb;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * SmartRTB {@link Bidder} implementation.\n+ */\n+public class SmartrtbBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpSmartrtb>> SMARTRTB_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpSmartrtb>>() {\n+            };\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+\n+    private final String endpointUrl;\n+\n+    public SmartrtbBidder(String endpointUrl) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<HttpRequest<BidRequest>> result = new ArrayList<>();\n+\n+        for (Imp imp : request.getImp()) {\n+            try {\n+                final ExtImpSmartrtb extImpSmartrtb = parseAndValidateImpExt(imp);\n+                final Imp processImp = processImp(imp);\n+                final String url = endpointUrl + \"/\" + extImpSmartrtb.getPublisherId();\n+                result.add(createSingleRequest(processImp, request, url));\n+            } catch (PreBidException e) {\n+                errors.add(BidderError.badInput(e.getMessage()));\n+            }\n+        }\n+\n+        return Result.of(result, errors);\n+    }\n+\n+    private HttpRequest<BidRequest> createSingleRequest(Imp imp, BidRequest request, String url) {", "originalCommit": "df4607646fdb862a57588d11d819ec77d11b4259", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDYwNTA4Mw==", "url": "https://github.com/prebid/prebid-server-java/pull/596#discussion_r370605083", "bodyText": "Inline return", "author": "DGarbar", "createdAt": "2020-01-24T12:15:12Z", "path": "src/main/java/org/prebid/server/bidder/smartrtb/SmartrtbBidder.java", "diffHunk": "@@ -0,0 +1,207 @@\n+package org.prebid.server.bidder.smartrtb;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.core.json.DecodeException;\n+import io.vertx.core.json.Json;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.smartrtb.ExtImpSmartrtb;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * SmartRTB {@link Bidder} implementation.\n+ */\n+public class SmartrtbBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpSmartrtb>> SMARTRTB_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpSmartrtb>>() {\n+            };\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+\n+    private final String endpointUrl;\n+\n+    public SmartrtbBidder(String endpointUrl) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<HttpRequest<BidRequest>> result = new ArrayList<>();\n+\n+        for (Imp imp : request.getImp()) {\n+            try {\n+                final ExtImpSmartrtb extImpSmartrtb = parseAndValidateImpExt(imp);\n+                final Imp processImp = processImp(imp);\n+                final String url = endpointUrl + \"/\" + extImpSmartrtb.getPublisherId();\n+                result.add(createSingleRequest(processImp, request, url));\n+            } catch (PreBidException e) {\n+                errors.add(BidderError.badInput(e.getMessage()));\n+            }\n+        }\n+\n+        return Result.of(result, errors);\n+    }\n+\n+    private HttpRequest<BidRequest> createSingleRequest(Imp imp, BidRequest request, String url) {\n+        final BidRequest outgoingRequest = request.toBuilder().imp(Collections.singletonList(imp)).build();\n+\n+        final String body = Json.encode(outgoingRequest);\n+\n+        return HttpRequest.<BidRequest>builder()\n+                .method(HttpMethod.POST)\n+                .uri(url)\n+                .headers(HttpUtil.headers())\n+                .body(body)\n+                .payload(outgoingRequest)\n+                .build();\n+    }\n+\n+    /**\n+     * Applogy Bidder required to have Impression.ext {@link ExtImpSmartrtb}\n+     * {@link ExtImpSmartrtb} is required to have publisher ID, zone ID\n+     **/\n+    private ExtImpSmartrtb parseAndValidateImpExt(Imp imp) {\n+        final ExtImpSmartrtb extImpSmartrtb;\n+        if (imp.getBanner() == null && imp.getVideo() == null) {\n+            throw new PreBidException(\"SmartRTB only supports banner and video\");\n+        }\n+\n+        extImpSmartrtb = parseExtSmartrtb(imp);\n+\n+        validateImp(extImpSmartrtb);\n+\n+        return extImpSmartrtb;\n+    }\n+\n+    private void validateImp(ExtImpSmartrtb extImpSmartrtb) {\n+        if (extImpSmartrtb != null) {\n+            if (StringUtils.isBlank(extImpSmartrtb.getPublisherId())) {\n+                throw new PreBidException(\"Publisher ID is empty\");\n+            }\n+            if (StringUtils.isBlank(extImpSmartrtb.getZoneId())) {\n+                throw new PreBidException(\"Zone ID is empty\");\n+            }\n+        }\n+    }\n+\n+    private ExtImpSmartrtb parseExtSmartrtb(Imp imp) {\n+        ExtImpSmartrtb extImpSmartrtb;", "originalCommit": "df4607646fdb862a57588d11d819ec77d11b4259", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDYwNTE4OA==", "url": "https://github.com/prebid/prebid-server-java/pull/596#discussion_r370605188", "bodyText": "Method arrangement", "author": "DGarbar", "createdAt": "2020-01-24T12:15:30Z", "path": "src/main/java/org/prebid/server/bidder/smartrtb/SmartrtbBidder.java", "diffHunk": "@@ -0,0 +1,207 @@\n+package org.prebid.server.bidder.smartrtb;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.core.json.DecodeException;\n+import io.vertx.core.json.Json;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.smartrtb.ExtImpSmartrtb;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * SmartRTB {@link Bidder} implementation.\n+ */\n+public class SmartrtbBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpSmartrtb>> SMARTRTB_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpSmartrtb>>() {\n+            };\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+\n+    private final String endpointUrl;\n+\n+    public SmartrtbBidder(String endpointUrl) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<HttpRequest<BidRequest>> result = new ArrayList<>();\n+\n+        for (Imp imp : request.getImp()) {\n+            try {\n+                final ExtImpSmartrtb extImpSmartrtb = parseAndValidateImpExt(imp);\n+                final Imp processImp = processImp(imp);\n+                final String url = endpointUrl + \"/\" + extImpSmartrtb.getPublisherId();\n+                result.add(createSingleRequest(processImp, request, url));\n+            } catch (PreBidException e) {\n+                errors.add(BidderError.badInput(e.getMessage()));\n+            }\n+        }\n+\n+        return Result.of(result, errors);\n+    }\n+\n+    private HttpRequest<BidRequest> createSingleRequest(Imp imp, BidRequest request, String url) {\n+        final BidRequest outgoingRequest = request.toBuilder().imp(Collections.singletonList(imp)).build();\n+\n+        final String body = Json.encode(outgoingRequest);\n+\n+        return HttpRequest.<BidRequest>builder()\n+                .method(HttpMethod.POST)\n+                .uri(url)\n+                .headers(HttpUtil.headers())\n+                .body(body)\n+                .payload(outgoingRequest)\n+                .build();\n+    }\n+\n+    /**\n+     * Applogy Bidder required to have Impression.ext {@link ExtImpSmartrtb}\n+     * {@link ExtImpSmartrtb} is required to have publisher ID, zone ID\n+     **/\n+    private ExtImpSmartrtb parseAndValidateImpExt(Imp imp) {\n+        final ExtImpSmartrtb extImpSmartrtb;\n+        if (imp.getBanner() == null && imp.getVideo() == null) {\n+            throw new PreBidException(\"SmartRTB only supports banner and video\");\n+        }\n+\n+        extImpSmartrtb = parseExtSmartrtb(imp);\n+\n+        validateImp(extImpSmartrtb);\n+\n+        return extImpSmartrtb;\n+    }\n+\n+    private void validateImp(ExtImpSmartrtb extImpSmartrtb) {\n+        if (extImpSmartrtb != null) {\n+            if (StringUtils.isBlank(extImpSmartrtb.getPublisherId())) {\n+                throw new PreBidException(\"Publisher ID is empty\");\n+            }\n+            if (StringUtils.isBlank(extImpSmartrtb.getZoneId())) {\n+                throw new PreBidException(\"Zone ID is empty\");\n+            }\n+        }\n+    }\n+\n+    private ExtImpSmartrtb parseExtSmartrtb(Imp imp) {", "originalCommit": "df4607646fdb862a57588d11d819ec77d11b4259", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDYwNTQxNA==", "url": "https://github.com/prebid/prebid-server-java/pull/596#discussion_r370605414", "bodyText": "SmartRtb actually.\nAnd you can remove unnecessary comments", "author": "DGarbar", "createdAt": "2020-01-24T12:16:10Z", "path": "src/main/java/org/prebid/server/bidder/smartrtb/SmartrtbBidder.java", "diffHunk": "@@ -0,0 +1,207 @@\n+package org.prebid.server.bidder.smartrtb;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.core.json.DecodeException;\n+import io.vertx.core.json.Json;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.smartrtb.ExtImpSmartrtb;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * SmartRTB {@link Bidder} implementation.\n+ */\n+public class SmartrtbBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpSmartrtb>> SMARTRTB_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpSmartrtb>>() {\n+            };\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+\n+    private final String endpointUrl;\n+\n+    public SmartrtbBidder(String endpointUrl) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<HttpRequest<BidRequest>> result = new ArrayList<>();\n+\n+        for (Imp imp : request.getImp()) {\n+            try {\n+                final ExtImpSmartrtb extImpSmartrtb = parseAndValidateImpExt(imp);\n+                final Imp processImp = processImp(imp);\n+                final String url = endpointUrl + \"/\" + extImpSmartrtb.getPublisherId();\n+                result.add(createSingleRequest(processImp, request, url));\n+            } catch (PreBidException e) {\n+                errors.add(BidderError.badInput(e.getMessage()));\n+            }\n+        }\n+\n+        return Result.of(result, errors);\n+    }\n+\n+    private HttpRequest<BidRequest> createSingleRequest(Imp imp, BidRequest request, String url) {\n+        final BidRequest outgoingRequest = request.toBuilder().imp(Collections.singletonList(imp)).build();\n+\n+        final String body = Json.encode(outgoingRequest);\n+\n+        return HttpRequest.<BidRequest>builder()\n+                .method(HttpMethod.POST)\n+                .uri(url)\n+                .headers(HttpUtil.headers())\n+                .body(body)\n+                .payload(outgoingRequest)\n+                .build();\n+    }\n+\n+    /**\n+     * Applogy Bidder required to have Impression.ext {@link ExtImpSmartrtb}", "originalCommit": "df4607646fdb862a57588d11d819ec77d11b4259", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDYwNTYzMQ==", "url": "https://github.com/prebid/prebid-server-java/pull/596#discussion_r370605631", "bodyText": "There are no such validation in GO. They just skip imp, but it seems fine for me", "author": "DGarbar", "createdAt": "2020-01-24T12:16:49Z", "path": "src/main/java/org/prebid/server/bidder/smartrtb/SmartrtbBidder.java", "diffHunk": "@@ -0,0 +1,207 @@\n+package org.prebid.server.bidder.smartrtb;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.core.json.DecodeException;\n+import io.vertx.core.json.Json;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.smartrtb.ExtImpSmartrtb;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * SmartRTB {@link Bidder} implementation.\n+ */\n+public class SmartrtbBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpSmartrtb>> SMARTRTB_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpSmartrtb>>() {\n+            };\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+\n+    private final String endpointUrl;\n+\n+    public SmartrtbBidder(String endpointUrl) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<HttpRequest<BidRequest>> result = new ArrayList<>();\n+\n+        for (Imp imp : request.getImp()) {\n+            try {\n+                final ExtImpSmartrtb extImpSmartrtb = parseAndValidateImpExt(imp);\n+                final Imp processImp = processImp(imp);\n+                final String url = endpointUrl + \"/\" + extImpSmartrtb.getPublisherId();\n+                result.add(createSingleRequest(processImp, request, url));\n+            } catch (PreBidException e) {\n+                errors.add(BidderError.badInput(e.getMessage()));\n+            }\n+        }\n+\n+        return Result.of(result, errors);\n+    }\n+\n+    private HttpRequest<BidRequest> createSingleRequest(Imp imp, BidRequest request, String url) {\n+        final BidRequest outgoingRequest = request.toBuilder().imp(Collections.singletonList(imp)).build();\n+\n+        final String body = Json.encode(outgoingRequest);\n+\n+        return HttpRequest.<BidRequest>builder()\n+                .method(HttpMethod.POST)\n+                .uri(url)\n+                .headers(HttpUtil.headers())\n+                .body(body)\n+                .payload(outgoingRequest)\n+                .build();\n+    }\n+\n+    /**\n+     * Applogy Bidder required to have Impression.ext {@link ExtImpSmartrtb}\n+     * {@link ExtImpSmartrtb} is required to have publisher ID, zone ID\n+     **/\n+    private ExtImpSmartrtb parseAndValidateImpExt(Imp imp) {\n+        final ExtImpSmartrtb extImpSmartrtb;\n+        if (imp.getBanner() == null && imp.getVideo() == null) {", "originalCommit": "df4607646fdb862a57588d11d819ec77d11b4259", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDYwNzMyNw==", "url": "https://github.com/prebid/prebid-server-java/pull/596#discussion_r370607327", "bodyText": "They don't throw an exception in case of empty pub.\nThey use req.ext.pubId = imp.ext.pubId  and only after that, they validate on blank\nI don't like their approach.\nThey always pass request.ext to method to always check for it emptiness, and just insert first pubId from imp.ext.pub_id.\nMb you can find more cleaner way to do this", "author": "DGarbar", "createdAt": "2020-01-24T12:22:03Z", "path": "src/main/java/org/prebid/server/bidder/smartrtb/SmartrtbBidder.java", "diffHunk": "@@ -0,0 +1,207 @@\n+package org.prebid.server.bidder.smartrtb;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.core.json.DecodeException;\n+import io.vertx.core.json.Json;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.smartrtb.ExtImpSmartrtb;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * SmartRTB {@link Bidder} implementation.\n+ */\n+public class SmartrtbBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpSmartrtb>> SMARTRTB_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpSmartrtb>>() {\n+            };\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+\n+    private final String endpointUrl;\n+\n+    public SmartrtbBidder(String endpointUrl) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<HttpRequest<BidRequest>> result = new ArrayList<>();\n+\n+        for (Imp imp : request.getImp()) {\n+            try {\n+                final ExtImpSmartrtb extImpSmartrtb = parseAndValidateImpExt(imp);\n+                final Imp processImp = processImp(imp);\n+                final String url = endpointUrl + \"/\" + extImpSmartrtb.getPublisherId();\n+                result.add(createSingleRequest(processImp, request, url));\n+            } catch (PreBidException e) {\n+                errors.add(BidderError.badInput(e.getMessage()));\n+            }\n+        }\n+\n+        return Result.of(result, errors);\n+    }\n+\n+    private HttpRequest<BidRequest> createSingleRequest(Imp imp, BidRequest request, String url) {\n+        final BidRequest outgoingRequest = request.toBuilder().imp(Collections.singletonList(imp)).build();\n+\n+        final String body = Json.encode(outgoingRequest);\n+\n+        return HttpRequest.<BidRequest>builder()\n+                .method(HttpMethod.POST)\n+                .uri(url)\n+                .headers(HttpUtil.headers())\n+                .body(body)\n+                .payload(outgoingRequest)\n+                .build();\n+    }\n+\n+    /**\n+     * Applogy Bidder required to have Impression.ext {@link ExtImpSmartrtb}\n+     * {@link ExtImpSmartrtb} is required to have publisher ID, zone ID\n+     **/\n+    private ExtImpSmartrtb parseAndValidateImpExt(Imp imp) {\n+        final ExtImpSmartrtb extImpSmartrtb;\n+        if (imp.getBanner() == null && imp.getVideo() == null) {\n+            throw new PreBidException(\"SmartRTB only supports banner and video\");\n+        }\n+\n+        extImpSmartrtb = parseExtSmartrtb(imp);\n+\n+        validateImp(extImpSmartrtb);\n+\n+        return extImpSmartrtb;\n+    }\n+\n+    private void validateImp(ExtImpSmartrtb extImpSmartrtb) {\n+        if (extImpSmartrtb != null) {\n+            if (StringUtils.isBlank(extImpSmartrtb.getPublisherId())) {\n+                throw new PreBidException(\"Publisher ID is empty\");", "originalCommit": "df4607646fdb862a57588d11d819ec77d11b4259", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDYwNzc0MQ==", "url": "https://github.com/prebid/prebid-server-java/pull/596#discussion_r370607741", "bodyText": "They don't have this logic in GO", "author": "DGarbar", "createdAt": "2020-01-24T12:23:18Z", "path": "src/main/java/org/prebid/server/bidder/smartrtb/SmartrtbBidder.java", "diffHunk": "@@ -0,0 +1,207 @@\n+package org.prebid.server.bidder.smartrtb;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.core.json.DecodeException;\n+import io.vertx.core.json.Json;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.smartrtb.ExtImpSmartrtb;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * SmartRTB {@link Bidder} implementation.\n+ */\n+public class SmartrtbBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpSmartrtb>> SMARTRTB_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpSmartrtb>>() {\n+            };\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+\n+    private final String endpointUrl;\n+\n+    public SmartrtbBidder(String endpointUrl) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<HttpRequest<BidRequest>> result = new ArrayList<>();\n+\n+        for (Imp imp : request.getImp()) {\n+            try {\n+                final ExtImpSmartrtb extImpSmartrtb = parseAndValidateImpExt(imp);\n+                final Imp processImp = processImp(imp);\n+                final String url = endpointUrl + \"/\" + extImpSmartrtb.getPublisherId();\n+                result.add(createSingleRequest(processImp, request, url));\n+            } catch (PreBidException e) {\n+                errors.add(BidderError.badInput(e.getMessage()));\n+            }\n+        }\n+\n+        return Result.of(result, errors);\n+    }\n+\n+    private HttpRequest<BidRequest> createSingleRequest(Imp imp, BidRequest request, String url) {\n+        final BidRequest outgoingRequest = request.toBuilder().imp(Collections.singletonList(imp)).build();\n+\n+        final String body = Json.encode(outgoingRequest);\n+\n+        return HttpRequest.<BidRequest>builder()\n+                .method(HttpMethod.POST)\n+                .uri(url)\n+                .headers(HttpUtil.headers())\n+                .body(body)\n+                .payload(outgoingRequest)\n+                .build();\n+    }\n+\n+    /**\n+     * Applogy Bidder required to have Impression.ext {@link ExtImpSmartrtb}\n+     * {@link ExtImpSmartrtb} is required to have publisher ID, zone ID\n+     **/\n+    private ExtImpSmartrtb parseAndValidateImpExt(Imp imp) {\n+        final ExtImpSmartrtb extImpSmartrtb;\n+        if (imp.getBanner() == null && imp.getVideo() == null) {\n+            throw new PreBidException(\"SmartRTB only supports banner and video\");\n+        }\n+\n+        extImpSmartrtb = parseExtSmartrtb(imp);\n+\n+        validateImp(extImpSmartrtb);\n+\n+        return extImpSmartrtb;\n+    }\n+\n+    private void validateImp(ExtImpSmartrtb extImpSmartrtb) {\n+        if (extImpSmartrtb != null) {\n+            if (StringUtils.isBlank(extImpSmartrtb.getPublisherId())) {\n+                throw new PreBidException(\"Publisher ID is empty\");\n+            }\n+            if (StringUtils.isBlank(extImpSmartrtb.getZoneId())) {\n+                throw new PreBidException(\"Zone ID is empty\");", "originalCommit": "df4607646fdb862a57588d11d819ec77d11b4259", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDYwODYzNg==", "url": "https://github.com/prebid/prebid-server-java/pull/596#discussion_r370608636", "bodyText": "url after this:\n?rtb={.PublisherId}/123\nmust be ?rtb=123\nAdd tests for this", "author": "DGarbar", "createdAt": "2020-01-24T12:25:53Z", "path": "src/main/java/org/prebid/server/bidder/smartrtb/SmartrtbBidder.java", "diffHunk": "@@ -0,0 +1,207 @@\n+package org.prebid.server.bidder.smartrtb;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.core.json.DecodeException;\n+import io.vertx.core.json.Json;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.smartrtb.ExtImpSmartrtb;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * SmartRTB {@link Bidder} implementation.\n+ */\n+public class SmartrtbBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpSmartrtb>> SMARTRTB_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpSmartrtb>>() {\n+            };\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+\n+    private final String endpointUrl;\n+\n+    public SmartrtbBidder(String endpointUrl) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<HttpRequest<BidRequest>> result = new ArrayList<>();\n+\n+        for (Imp imp : request.getImp()) {\n+            try {\n+                final ExtImpSmartrtb extImpSmartrtb = parseAndValidateImpExt(imp);\n+                final Imp processImp = processImp(imp);\n+                final String url = endpointUrl + \"/\" + extImpSmartrtb.getPublisherId();", "originalCommit": "df4607646fdb862a57588d11d819ec77d11b4259", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDYxMTE3Mg==", "url": "https://github.com/prebid/prebid-server-java/pull/596#discussion_r370611172", "bodyText": "You cant just take appology bidder, and keep all the logic.\nThere are no corresponding code in go", "author": "DGarbar", "createdAt": "2020-01-24T12:33:30Z", "path": "src/main/java/org/prebid/server/bidder/smartrtb/SmartrtbBidder.java", "diffHunk": "@@ -0,0 +1,207 @@\n+package org.prebid.server.bidder.smartrtb;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.core.json.DecodeException;\n+import io.vertx.core.json.Json;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.smartrtb.ExtImpSmartrtb;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * SmartRTB {@link Bidder} implementation.\n+ */\n+public class SmartrtbBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpSmartrtb>> SMARTRTB_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpSmartrtb>>() {\n+            };\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+\n+    private final String endpointUrl;\n+\n+    public SmartrtbBidder(String endpointUrl) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<HttpRequest<BidRequest>> result = new ArrayList<>();\n+\n+        for (Imp imp : request.getImp()) {\n+            try {\n+                final ExtImpSmartrtb extImpSmartrtb = parseAndValidateImpExt(imp);\n+                final Imp processImp = processImp(imp);\n+                final String url = endpointUrl + \"/\" + extImpSmartrtb.getPublisherId();\n+                result.add(createSingleRequest(processImp, request, url));\n+            } catch (PreBidException e) {\n+                errors.add(BidderError.badInput(e.getMessage()));\n+            }\n+        }\n+\n+        return Result.of(result, errors);\n+    }\n+\n+    private HttpRequest<BidRequest> createSingleRequest(Imp imp, BidRequest request, String url) {\n+        final BidRequest outgoingRequest = request.toBuilder().imp(Collections.singletonList(imp)).build();\n+\n+        final String body = Json.encode(outgoingRequest);\n+\n+        return HttpRequest.<BidRequest>builder()\n+                .method(HttpMethod.POST)\n+                .uri(url)\n+                .headers(HttpUtil.headers())\n+                .body(body)\n+                .payload(outgoingRequest)\n+                .build();\n+    }\n+\n+    /**\n+     * Applogy Bidder required to have Impression.ext {@link ExtImpSmartrtb}\n+     * {@link ExtImpSmartrtb} is required to have publisher ID, zone ID\n+     **/\n+    private ExtImpSmartrtb parseAndValidateImpExt(Imp imp) {\n+        final ExtImpSmartrtb extImpSmartrtb;\n+        if (imp.getBanner() == null && imp.getVideo() == null) {\n+            throw new PreBidException(\"SmartRTB only supports banner and video\");\n+        }\n+\n+        extImpSmartrtb = parseExtSmartrtb(imp);\n+\n+        validateImp(extImpSmartrtb);\n+\n+        return extImpSmartrtb;\n+    }\n+\n+    private void validateImp(ExtImpSmartrtb extImpSmartrtb) {\n+        if (extImpSmartrtb != null) {\n+            if (StringUtils.isBlank(extImpSmartrtb.getPublisherId())) {\n+                throw new PreBidException(\"Publisher ID is empty\");\n+            }\n+            if (StringUtils.isBlank(extImpSmartrtb.getZoneId())) {\n+                throw new PreBidException(\"Zone ID is empty\");\n+            }\n+        }\n+    }\n+\n+    private ExtImpSmartrtb parseExtSmartrtb(Imp imp) {\n+        ExtImpSmartrtb extImpSmartrtb;\n+        try {\n+            extImpSmartrtb = Json.mapper.convertValue(imp.getExt(), SMARTRTB_EXT_TYPE_REFERENCE)\n+                    .getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage());\n+        }\n+        return extImpSmartrtb;\n+    }\n+\n+    private Imp processImp(Imp imp) {\n+        if (imp.getBanner() == null && imp.getVideo() == null) {\n+            throw new PreBidException(\"SmartRTB only supports banner and video\");\n+        }\n+\n+        final Banner banner = imp.getBanner();\n+        if (banner != null) {\n+            if (banner.getH() == null || banner.getW() == null || banner.getH() == 0 || banner.getW() == 0) {\n+                if (CollectionUtils.isEmpty(banner.getFormat())) {\n+                    throw new PreBidException(\"banner size information missing\");\n+                }\n+\n+                final Format firstFormat = banner.getFormat().get(0);\n+                final Banner modifiedBanner = banner.toBuilder()\n+                        .h(firstFormat.getH())\n+                        .w(firstFormat.getW())\n+                        .build();\n+                return imp.toBuilder().banner(modifiedBanner).build();\n+            }", "originalCommit": "df4607646fdb862a57588d11d819ec77d11b4259", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDYxMTg2NA==", "url": "https://github.com/prebid/prebid-server-java/pull/596#discussion_r370611864", "bodyText": "Inline this in makeHttpRequests method  return", "author": "DGarbar", "createdAt": "2020-01-24T12:35:18Z", "path": "src/main/java/org/prebid/server/bidder/smartrtb/SmartrtbBidder.java", "diffHunk": "@@ -0,0 +1,207 @@\n+package org.prebid.server.bidder.smartrtb;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.core.json.DecodeException;\n+import io.vertx.core.json.Json;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.smartrtb.ExtImpSmartrtb;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * SmartRTB {@link Bidder} implementation.\n+ */\n+public class SmartrtbBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpSmartrtb>> SMARTRTB_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpSmartrtb>>() {\n+            };\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+\n+    private final String endpointUrl;\n+\n+    public SmartrtbBidder(String endpointUrl) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<HttpRequest<BidRequest>> result = new ArrayList<>();\n+\n+        for (Imp imp : request.getImp()) {\n+            try {\n+                final ExtImpSmartrtb extImpSmartrtb = parseAndValidateImpExt(imp);\n+                final Imp processImp = processImp(imp);\n+                final String url = endpointUrl + \"/\" + extImpSmartrtb.getPublisherId();\n+                result.add(createSingleRequest(processImp, request, url));\n+            } catch (PreBidException e) {\n+                errors.add(BidderError.badInput(e.getMessage()));\n+            }\n+        }\n+\n+        return Result.of(result, errors);\n+    }\n+\n+    private HttpRequest<BidRequest> createSingleRequest(Imp imp, BidRequest request, String url) {\n+        final BidRequest outgoingRequest = request.toBuilder().imp(Collections.singletonList(imp)).build();\n+\n+        final String body = Json.encode(outgoingRequest);\n+\n+        return HttpRequest.<BidRequest>builder()\n+                .method(HttpMethod.POST)\n+                .uri(url)\n+                .headers(HttpUtil.headers())\n+                .body(body)\n+                .payload(outgoingRequest)\n+                .build();", "originalCommit": "df4607646fdb862a57588d11d819ec77d11b4259", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDYxMjE4Nw==", "url": "https://github.com/prebid/prebid-server-java/pull/596#discussion_r370612187", "bodyText": "They also add\n\theaders.Add(\"x-openrtb-version\", \"2.5\")", "author": "DGarbar", "createdAt": "2020-01-24T12:36:07Z", "path": "src/main/java/org/prebid/server/bidder/smartrtb/SmartrtbBidder.java", "diffHunk": "@@ -0,0 +1,207 @@\n+package org.prebid.server.bidder.smartrtb;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.core.json.DecodeException;\n+import io.vertx.core.json.Json;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.smartrtb.ExtImpSmartrtb;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * SmartRTB {@link Bidder} implementation.\n+ */\n+public class SmartrtbBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpSmartrtb>> SMARTRTB_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpSmartrtb>>() {\n+            };\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+\n+    private final String endpointUrl;\n+\n+    public SmartrtbBidder(String endpointUrl) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<HttpRequest<BidRequest>> result = new ArrayList<>();\n+\n+        for (Imp imp : request.getImp()) {\n+            try {\n+                final ExtImpSmartrtb extImpSmartrtb = parseAndValidateImpExt(imp);\n+                final Imp processImp = processImp(imp);\n+                final String url = endpointUrl + \"/\" + extImpSmartrtb.getPublisherId();\n+                result.add(createSingleRequest(processImp, request, url));\n+            } catch (PreBidException e) {\n+                errors.add(BidderError.badInput(e.getMessage()));\n+            }\n+        }\n+\n+        return Result.of(result, errors);\n+    }\n+\n+    private HttpRequest<BidRequest> createSingleRequest(Imp imp, BidRequest request, String url) {\n+        final BidRequest outgoingRequest = request.toBuilder().imp(Collections.singletonList(imp)).build();\n+\n+        final String body = Json.encode(outgoingRequest);\n+\n+        return HttpRequest.<BidRequest>builder()\n+                .method(HttpMethod.POST)\n+                .uri(url)\n+                .headers(HttpUtil.headers())", "originalCommit": "df4607646fdb862a57588d11d819ec77d11b4259", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDYxMzQ0OQ==", "url": "https://github.com/prebid/prebid-server-java/pull/596#discussion_r370613449", "bodyText": "They use different matching value for the imp type. (bid.ext.format) and then clear it. See json test in GO.", "author": "DGarbar", "createdAt": "2020-01-24T12:39:34Z", "path": "src/main/java/org/prebid/server/bidder/smartrtb/SmartrtbBidder.java", "diffHunk": "@@ -0,0 +1,207 @@\n+package org.prebid.server.bidder.smartrtb;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.core.json.DecodeException;\n+import io.vertx.core.json.Json;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.smartrtb.ExtImpSmartrtb;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * SmartRTB {@link Bidder} implementation.\n+ */\n+public class SmartrtbBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpSmartrtb>> SMARTRTB_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpSmartrtb>>() {\n+            };\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+\n+    private final String endpointUrl;\n+\n+    public SmartrtbBidder(String endpointUrl) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<HttpRequest<BidRequest>> result = new ArrayList<>();\n+\n+        for (Imp imp : request.getImp()) {\n+            try {\n+                final ExtImpSmartrtb extImpSmartrtb = parseAndValidateImpExt(imp);\n+                final Imp processImp = processImp(imp);\n+                final String url = endpointUrl + \"/\" + extImpSmartrtb.getPublisherId();\n+                result.add(createSingleRequest(processImp, request, url));\n+            } catch (PreBidException e) {\n+                errors.add(BidderError.badInput(e.getMessage()));\n+            }\n+        }\n+\n+        return Result.of(result, errors);\n+    }\n+\n+    private HttpRequest<BidRequest> createSingleRequest(Imp imp, BidRequest request, String url) {\n+        final BidRequest outgoingRequest = request.toBuilder().imp(Collections.singletonList(imp)).build();\n+\n+        final String body = Json.encode(outgoingRequest);\n+\n+        return HttpRequest.<BidRequest>builder()\n+                .method(HttpMethod.POST)\n+                .uri(url)\n+                .headers(HttpUtil.headers())\n+                .body(body)\n+                .payload(outgoingRequest)\n+                .build();\n+    }\n+\n+    /**\n+     * Applogy Bidder required to have Impression.ext {@link ExtImpSmartrtb}\n+     * {@link ExtImpSmartrtb} is required to have publisher ID, zone ID\n+     **/\n+    private ExtImpSmartrtb parseAndValidateImpExt(Imp imp) {\n+        final ExtImpSmartrtb extImpSmartrtb;\n+        if (imp.getBanner() == null && imp.getVideo() == null) {\n+            throw new PreBidException(\"SmartRTB only supports banner and video\");\n+        }\n+\n+        extImpSmartrtb = parseExtSmartrtb(imp);\n+\n+        validateImp(extImpSmartrtb);\n+\n+        return extImpSmartrtb;\n+    }\n+\n+    private void validateImp(ExtImpSmartrtb extImpSmartrtb) {\n+        if (extImpSmartrtb != null) {\n+            if (StringUtils.isBlank(extImpSmartrtb.getPublisherId())) {\n+                throw new PreBidException(\"Publisher ID is empty\");\n+            }\n+            if (StringUtils.isBlank(extImpSmartrtb.getZoneId())) {\n+                throw new PreBidException(\"Zone ID is empty\");\n+            }\n+        }\n+    }\n+\n+    private ExtImpSmartrtb parseExtSmartrtb(Imp imp) {\n+        ExtImpSmartrtb extImpSmartrtb;\n+        try {\n+            extImpSmartrtb = Json.mapper.convertValue(imp.getExt(), SMARTRTB_EXT_TYPE_REFERENCE)\n+                    .getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage());\n+        }\n+        return extImpSmartrtb;\n+    }\n+\n+    private Imp processImp(Imp imp) {\n+        if (imp.getBanner() == null && imp.getVideo() == null) {\n+            throw new PreBidException(\"SmartRTB only supports banner and video\");\n+        }\n+\n+        final Banner banner = imp.getBanner();\n+        if (banner != null) {\n+            if (banner.getH() == null || banner.getW() == null || banner.getH() == 0 || banner.getW() == 0) {\n+                if (CollectionUtils.isEmpty(banner.getFormat())) {\n+                    throw new PreBidException(\"banner size information missing\");\n+                }\n+\n+                final Format firstFormat = banner.getFormat().get(0);\n+                final Banner modifiedBanner = banner.toBuilder()\n+                        .h(firstFormat.getH())\n+                        .w(firstFormat.getW())\n+                        .build();\n+                return imp.toBuilder().banner(modifiedBanner).build();\n+            }\n+        }\n+        return imp;\n+    }\n+\n+    @Override\n+    public Result<List<BidderBid>> makeBids(HttpCall<BidRequest> httpCall, BidRequest bidRequest) {\n+        if (httpCall.getResponse().getStatusCode() == HttpResponseStatus.NO_CONTENT.code()) {\n+            return Result.of(Collections.emptyList(), Collections.emptyList());\n+        }\n+\n+        try {\n+            final BidResponse bidResponse = Json.decodeValue(httpCall.getResponse().getBody(), BidResponse.class);\n+            return extractBids(httpCall.getRequest().getPayload(), bidResponse);\n+        } catch (DecodeException e) {\n+            return Result.emptyWithError(BidderError.badServerResponse(e.getMessage()));\n+        }\n+    }\n+\n+    private static Result<List<BidderBid>> extractBids(BidRequest bidRequest, BidResponse bidResponse) {\n+        if (bidResponse == null || bidResponse.getSeatbid() == null) {\n+            return Result.of(Collections.emptyList(), Collections.emptyList());\n+        }\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<BidderBid> bidderBids = bidResponse.getSeatbid().stream()\n+                .filter(Objects::nonNull)\n+                .map(SeatBid::getBid)\n+                .filter(Objects::nonNull)\n+                .flatMap(Collection::stream)\n+                .map(bid -> bidFromResponse(bidRequest.getImp(), bid, errors))\n+                .filter(Objects::nonNull)\n+                .collect(Collectors.toList());\n+        return Result.of(bidderBids, errors);\n+    }\n+\n+    private static BidderBid bidFromResponse(List<Imp> imps, Bid bid, List<BidderError> errors) {\n+        try {\n+            final BidType bidType = getBidType(bid.getImpid(), imps);\n+            return BidderBid.of(bid, bidType, DEFAULT_BID_CURRENCY);\n+        } catch (PreBidException e) {\n+            errors.add(BidderError.badInput(e.getMessage()));\n+            return null;\n+        }\n+    }\n+\n+    private static BidType getBidType(String impId, List<Imp> imps) {\n+        for (Imp imp : imps) {\n+            if (imp.getId().equals(impId)) {\n+                if (imp.getBanner() != null) {\n+                    return BidType.banner;\n+                } else if (imp.getVideo() != null) {\n+                    return BidType.video;\n+                }\n+            }\n+        }\n+        throw new PreBidException(String.format(\"Failed to find impression %s\", impId));\n+    }", "originalCommit": "df4607646fdb862a57588d11d819ec77d11b4259", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDYxNDA1OQ==", "url": "https://github.com/prebid/prebid-server-java/pull/596#discussion_r370614059", "bodyText": "There are different json schema in GO\nhttps://github.com/prebid/prebid-server/pull/1071/files#diff-2e15ff207617219a445f7aeac3e7438dR26", "author": "DGarbar", "createdAt": "2020-01-24T12:41:24Z", "path": "src/main/java/org/prebid/server/proto/openrtb/ext/request/smartrtb/ExtImpSmartrtb.java", "diffHunk": "@@ -0,0 +1,21 @@\n+package org.prebid.server.proto.openrtb.ext.request.smartrtb;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import lombok.AllArgsConstructor;\n+import lombok.Value;\n+\n+@AllArgsConstructor(staticName = \"of\")\n+@Value\n+public class ExtImpSmartrtb {\n+\n+    @JsonProperty(\"publisherId\")\n+    String publisherId;\n+\n+    @JsonProperty(\"propertyId\")\n+    String propertyId;\n+\n+    @JsonProperty(\"zoneId\")\n+    String zoneId;", "originalCommit": "df4607646fdb862a57588d11d819ec77d11b4259", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDYxNDc1Mw==", "url": "https://github.com/prebid/prebid-server-java/pull/596#discussion_r370614753", "bodyText": "Add an empty line after last } in ALL .java files", "author": "DGarbar", "createdAt": "2020-01-24T12:43:03Z", "path": "src/main/java/org/prebid/server/bidder/smartrtb/SmartrtbBidder.java", "diffHunk": "@@ -0,0 +1,207 @@\n+package org.prebid.server.bidder.smartrtb;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.core.json.DecodeException;\n+import io.vertx.core.json.Json;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.smartrtb.ExtImpSmartrtb;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * SmartRTB {@link Bidder} implementation.\n+ */\n+public class SmartrtbBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpSmartrtb>> SMARTRTB_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpSmartrtb>>() {\n+            };\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+\n+    private final String endpointUrl;\n+\n+    public SmartrtbBidder(String endpointUrl) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<HttpRequest<BidRequest>> result = new ArrayList<>();\n+\n+        for (Imp imp : request.getImp()) {\n+            try {\n+                final ExtImpSmartrtb extImpSmartrtb = parseAndValidateImpExt(imp);\n+                final Imp processImp = processImp(imp);\n+                final String url = endpointUrl + \"/\" + extImpSmartrtb.getPublisherId();\n+                result.add(createSingleRequest(processImp, request, url));\n+            } catch (PreBidException e) {\n+                errors.add(BidderError.badInput(e.getMessage()));\n+            }\n+        }\n+\n+        return Result.of(result, errors);\n+    }\n+\n+    private HttpRequest<BidRequest> createSingleRequest(Imp imp, BidRequest request, String url) {\n+        final BidRequest outgoingRequest = request.toBuilder().imp(Collections.singletonList(imp)).build();\n+\n+        final String body = Json.encode(outgoingRequest);\n+\n+        return HttpRequest.<BidRequest>builder()\n+                .method(HttpMethod.POST)\n+                .uri(url)\n+                .headers(HttpUtil.headers())\n+                .body(body)\n+                .payload(outgoingRequest)\n+                .build();\n+    }\n+\n+    /**\n+     * Applogy Bidder required to have Impression.ext {@link ExtImpSmartrtb}\n+     * {@link ExtImpSmartrtb} is required to have publisher ID, zone ID\n+     **/\n+    private ExtImpSmartrtb parseAndValidateImpExt(Imp imp) {\n+        final ExtImpSmartrtb extImpSmartrtb;\n+        if (imp.getBanner() == null && imp.getVideo() == null) {\n+            throw new PreBidException(\"SmartRTB only supports banner and video\");\n+        }\n+\n+        extImpSmartrtb = parseExtSmartrtb(imp);\n+\n+        validateImp(extImpSmartrtb);\n+\n+        return extImpSmartrtb;\n+    }\n+\n+    private void validateImp(ExtImpSmartrtb extImpSmartrtb) {\n+        if (extImpSmartrtb != null) {\n+            if (StringUtils.isBlank(extImpSmartrtb.getPublisherId())) {\n+                throw new PreBidException(\"Publisher ID is empty\");\n+            }\n+            if (StringUtils.isBlank(extImpSmartrtb.getZoneId())) {\n+                throw new PreBidException(\"Zone ID is empty\");\n+            }\n+        }\n+    }\n+\n+    private ExtImpSmartrtb parseExtSmartrtb(Imp imp) {\n+        ExtImpSmartrtb extImpSmartrtb;\n+        try {\n+            extImpSmartrtb = Json.mapper.convertValue(imp.getExt(), SMARTRTB_EXT_TYPE_REFERENCE)\n+                    .getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage());\n+        }\n+        return extImpSmartrtb;\n+    }\n+\n+    private Imp processImp(Imp imp) {\n+        if (imp.getBanner() == null && imp.getVideo() == null) {\n+            throw new PreBidException(\"SmartRTB only supports banner and video\");\n+        }\n+\n+        final Banner banner = imp.getBanner();\n+        if (banner != null) {\n+            if (banner.getH() == null || banner.getW() == null || banner.getH() == 0 || banner.getW() == 0) {\n+                if (CollectionUtils.isEmpty(banner.getFormat())) {\n+                    throw new PreBidException(\"banner size information missing\");\n+                }\n+\n+                final Format firstFormat = banner.getFormat().get(0);\n+                final Banner modifiedBanner = banner.toBuilder()\n+                        .h(firstFormat.getH())\n+                        .w(firstFormat.getW())\n+                        .build();\n+                return imp.toBuilder().banner(modifiedBanner).build();\n+            }\n+        }\n+        return imp;\n+    }\n+\n+    @Override\n+    public Result<List<BidderBid>> makeBids(HttpCall<BidRequest> httpCall, BidRequest bidRequest) {\n+        if (httpCall.getResponse().getStatusCode() == HttpResponseStatus.NO_CONTENT.code()) {\n+            return Result.of(Collections.emptyList(), Collections.emptyList());\n+        }\n+\n+        try {\n+            final BidResponse bidResponse = Json.decodeValue(httpCall.getResponse().getBody(), BidResponse.class);\n+            return extractBids(httpCall.getRequest().getPayload(), bidResponse);\n+        } catch (DecodeException e) {\n+            return Result.emptyWithError(BidderError.badServerResponse(e.getMessage()));\n+        }\n+    }\n+\n+    private static Result<List<BidderBid>> extractBids(BidRequest bidRequest, BidResponse bidResponse) {\n+        if (bidResponse == null || bidResponse.getSeatbid() == null) {\n+            return Result.of(Collections.emptyList(), Collections.emptyList());\n+        }\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<BidderBid> bidderBids = bidResponse.getSeatbid().stream()\n+                .filter(Objects::nonNull)\n+                .map(SeatBid::getBid)\n+                .filter(Objects::nonNull)\n+                .flatMap(Collection::stream)\n+                .map(bid -> bidFromResponse(bidRequest.getImp(), bid, errors))\n+                .filter(Objects::nonNull)\n+                .collect(Collectors.toList());\n+        return Result.of(bidderBids, errors);\n+    }\n+\n+    private static BidderBid bidFromResponse(List<Imp> imps, Bid bid, List<BidderError> errors) {\n+        try {\n+            final BidType bidType = getBidType(bid.getImpid(), imps);\n+            return BidderBid.of(bid, bidType, DEFAULT_BID_CURRENCY);\n+        } catch (PreBidException e) {\n+            errors.add(BidderError.badInput(e.getMessage()));\n+            return null;\n+        }\n+    }\n+\n+    private static BidType getBidType(String impId, List<Imp> imps) {\n+        for (Imp imp : imps) {\n+            if (imp.getId().equals(impId)) {\n+                if (imp.getBanner() != null) {\n+                    return BidType.banner;\n+                } else if (imp.getVideo() != null) {\n+                    return BidType.video;\n+                }\n+            }\n+        }\n+        throw new PreBidException(String.format(\"Failed to find impression %s\", impId));\n+    }\n+\n+    @Override\n+    public Map<String, String> extractTargeting(ObjectNode ext) {\n+        return Collections.emptyMap();\n+    }\n+}", "originalCommit": "df4607646fdb862a57588d11d819ec77d11b4259", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDYxNTMyOA==", "url": "https://github.com/prebid/prebid-server-java/pull/596#discussion_r370615328", "bodyText": "Remove unnecessary parameters for ALL tests", "author": "DGarbar", "createdAt": "2020-01-24T12:44:34Z", "path": "src/test/java/org/prebid/server/bidder/smartrtb/SmartrtbBidderTest.java", "diffHunk": "@@ -0,0 +1,409 @@\n+package org.prebid.server.bidder.smartrtb;\n+\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.iab.openrtb.request.Audio;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Video;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.function.Function;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.prebid.server.VertxTest;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.HttpResponse;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.smartrtb.ExtImpSmartrtb;\n+\n+import static java.util.Arrays.asList;\n+import static java.util.Collections.emptyMap;\n+import static java.util.Collections.singletonList;\n+import static java.util.function.Function.identity;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;\n+import static org.assertj.core.api.Assertions.tuple;\n+import static org.prebid.server.proto.openrtb.ext.response.BidType.banner;\n+\n+public class SmartrtbBidderTest extends VertxTest {\n+\n+    private static final String ENDPOINT_URL = \"https://test.endpoint.com\";\n+\n+    private SmartrtbBidder smartrtbBidder;\n+\n+    @Before\n+    public void setUp() {\n+        smartrtbBidder = new SmartrtbBidder(ENDPOINT_URL);\n+    }\n+\n+    @Test\n+    public void creationShouldFailOnInvalidEndpointUrl() {\n+        assertThatIllegalArgumentException().isThrownBy(() -> new SmartrtbBidder(\"invalid_url\"));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldReturnErrorIfImpExtCouldNotBeParsed() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(\n+                impBuilder -> impBuilder\n+                        .id(\"123\")", "originalCommit": "df4607646fdb862a57588d11d819ec77d11b4259", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDYxNTU3Mg==", "url": "https://github.com/prebid/prebid-server-java/pull/596#discussion_r370615572", "bodyText": "false", "author": "DGarbar", "createdAt": "2020-01-24T12:45:10Z", "path": "src/test/java/org/prebid/server/bidder/smartrtb/SmartrtbBidderTest.java", "diffHunk": "@@ -0,0 +1,409 @@\n+package org.prebid.server.bidder.smartrtb;\n+\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.iab.openrtb.request.Audio;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Video;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.function.Function;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.prebid.server.VertxTest;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.HttpResponse;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.smartrtb.ExtImpSmartrtb;\n+\n+import static java.util.Arrays.asList;\n+import static java.util.Collections.emptyMap;\n+import static java.util.Collections.singletonList;\n+import static java.util.function.Function.identity;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;\n+import static org.assertj.core.api.Assertions.tuple;\n+import static org.prebid.server.proto.openrtb.ext.response.BidType.banner;\n+\n+public class SmartrtbBidderTest extends VertxTest {\n+\n+    private static final String ENDPOINT_URL = \"https://test.endpoint.com\";\n+\n+    private SmartrtbBidder smartrtbBidder;\n+\n+    @Before\n+    public void setUp() {\n+        smartrtbBidder = new SmartrtbBidder(ENDPOINT_URL);\n+    }\n+\n+    @Test\n+    public void creationShouldFailOnInvalidEndpointUrl() {\n+        assertThatIllegalArgumentException().isThrownBy(() -> new SmartrtbBidder(\"invalid_url\"));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldReturnErrorIfImpExtCouldNotBeParsed() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(\n+                impBuilder -> impBuilder\n+                        .id(\"123\")\n+                        .ext(mapper.valueToTree(ExtPrebid.of(null, mapper.createArrayNode()))));\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = smartrtbBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1);\n+        assertThat(result.getErrors().get(0).getMessage()).startsWith(\"Cannot deserialize instance\");\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldSkipEmptyPublisherId() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(\n+                impBuilder -> impBuilder\n+                        .ext(mapper.valueToTree(ExtPrebid.of(null,\n+                                ExtImpSmartrtb.of(null,\"125\",\"222\",false)))));\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = smartrtbBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1).containsOnly(BidderError.badInput(\"Publisher ID is empty\"));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldSkipEmptyZoneId() {", "originalCommit": "df4607646fdb862a57588d11d819ec77d11b4259", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDYxNTg5Ng==", "url": "https://github.com/prebid/prebid-server-java/pull/596#discussion_r370615896", "bodyText": "Make variable, and name it appropriately", "author": "DGarbar", "createdAt": "2020-01-24T12:46:01Z", "path": "src/test/java/org/prebid/server/bidder/smartrtb/SmartrtbBidderTest.java", "diffHunk": "@@ -0,0 +1,409 @@\n+package org.prebid.server.bidder.smartrtb;\n+\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.iab.openrtb.request.Audio;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Video;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.function.Function;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.prebid.server.VertxTest;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.HttpResponse;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.smartrtb.ExtImpSmartrtb;\n+\n+import static java.util.Arrays.asList;\n+import static java.util.Collections.emptyMap;\n+import static java.util.Collections.singletonList;\n+import static java.util.function.Function.identity;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;\n+import static org.assertj.core.api.Assertions.tuple;\n+import static org.prebid.server.proto.openrtb.ext.response.BidType.banner;\n+\n+public class SmartrtbBidderTest extends VertxTest {\n+\n+    private static final String ENDPOINT_URL = \"https://test.endpoint.com\";\n+\n+    private SmartrtbBidder smartrtbBidder;\n+\n+    @Before\n+    public void setUp() {\n+        smartrtbBidder = new SmartrtbBidder(ENDPOINT_URL);\n+    }\n+\n+    @Test\n+    public void creationShouldFailOnInvalidEndpointUrl() {\n+        assertThatIllegalArgumentException().isThrownBy(() -> new SmartrtbBidder(\"invalid_url\"));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldReturnErrorIfImpExtCouldNotBeParsed() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(\n+                impBuilder -> impBuilder\n+                        .id(\"123\")\n+                        .ext(mapper.valueToTree(ExtPrebid.of(null, mapper.createArrayNode()))));\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = smartrtbBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1);\n+        assertThat(result.getErrors().get(0).getMessage()).startsWith(\"Cannot deserialize instance\");\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldSkipEmptyPublisherId() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(\n+                impBuilder -> impBuilder\n+                        .ext(mapper.valueToTree(ExtPrebid.of(null,\n+                                ExtImpSmartrtb.of(null,\"125\",\"222\",false)))));\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = smartrtbBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1).containsOnly(BidderError.badInput(\"Publisher ID is empty\"));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldSkipEmptyZoneId() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(\n+                impBuilder -> impBuilder\n+                        .ext(mapper.valueToTree(ExtPrebid.of(null,\n+                                ExtImpSmartrtb.of(\"111\",\"123\",null,false)))));\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = smartrtbBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1).containsOnly(BidderError.badInput(\"Zone ID is empty\"));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldSkipInvalidImpressionAndAddError() {\n+        // given\n+        ExtPrebid<?,  ExtImpSmartrtb> ext = ExtPrebid.of(null,\n+                ExtImpSmartrtb.of(\"Publisher ID is empty\",\"123\",\"Zone ID is empty\",false));\n+        Imp imp = givenImp(\n+                impBuilder -> impBuilder\n+                        .banner(null)\n+                        .id(\"2\")\n+                        .ext(mapper.valueToTree(ext))\n+                        .banner(Banner.builder().w(300).h(400).build())\n+        );\n+        final BidRequest bidRequest = BidRequest.builder()\n+                .imp(asList(\n+                        imp,\n+                        givenImp(impBuilder -> impBuilder", "originalCommit": "df4607646fdb862a57588d11d819ec77d11b4259", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDYxNjUwMQ==", "url": "https://github.com/prebid/prebid-server-java/pull/596#discussion_r370616501", "bodyText": "false", "author": "DGarbar", "createdAt": "2020-01-24T12:47:38Z", "path": "src/test/java/org/prebid/server/bidder/smartrtb/SmartrtbBidderTest.java", "diffHunk": "@@ -0,0 +1,409 @@\n+package org.prebid.server.bidder.smartrtb;\n+\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.iab.openrtb.request.Audio;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Video;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.function.Function;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.prebid.server.VertxTest;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.HttpResponse;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.smartrtb.ExtImpSmartrtb;\n+\n+import static java.util.Arrays.asList;\n+import static java.util.Collections.emptyMap;\n+import static java.util.Collections.singletonList;\n+import static java.util.function.Function.identity;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;\n+import static org.assertj.core.api.Assertions.tuple;\n+import static org.prebid.server.proto.openrtb.ext.response.BidType.banner;\n+\n+public class SmartrtbBidderTest extends VertxTest {\n+\n+    private static final String ENDPOINT_URL = \"https://test.endpoint.com\";\n+\n+    private SmartrtbBidder smartrtbBidder;\n+\n+    @Before\n+    public void setUp() {\n+        smartrtbBidder = new SmartrtbBidder(ENDPOINT_URL);\n+    }\n+\n+    @Test\n+    public void creationShouldFailOnInvalidEndpointUrl() {\n+        assertThatIllegalArgumentException().isThrownBy(() -> new SmartrtbBidder(\"invalid_url\"));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldReturnErrorIfImpExtCouldNotBeParsed() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(\n+                impBuilder -> impBuilder\n+                        .id(\"123\")\n+                        .ext(mapper.valueToTree(ExtPrebid.of(null, mapper.createArrayNode()))));\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = smartrtbBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1);\n+        assertThat(result.getErrors().get(0).getMessage()).startsWith(\"Cannot deserialize instance\");\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldSkipEmptyPublisherId() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(\n+                impBuilder -> impBuilder\n+                        .ext(mapper.valueToTree(ExtPrebid.of(null,\n+                                ExtImpSmartrtb.of(null,\"125\",\"222\",false)))));\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = smartrtbBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1).containsOnly(BidderError.badInput(\"Publisher ID is empty\"));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldSkipEmptyZoneId() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(\n+                impBuilder -> impBuilder\n+                        .ext(mapper.valueToTree(ExtPrebid.of(null,\n+                                ExtImpSmartrtb.of(\"111\",\"123\",null,false)))));\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = smartrtbBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1).containsOnly(BidderError.badInput(\"Zone ID is empty\"));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldSkipInvalidImpressionAndAddError() {\n+        // given\n+        ExtPrebid<?,  ExtImpSmartrtb> ext = ExtPrebid.of(null,\n+                ExtImpSmartrtb.of(\"Publisher ID is empty\",\"123\",\"Zone ID is empty\",false));\n+        Imp imp = givenImp(\n+                impBuilder -> impBuilder\n+                        .banner(null)\n+                        .id(\"2\")\n+                        .ext(mapper.valueToTree(ext))\n+                        .banner(Banner.builder().w(300).h(400).build())\n+        );\n+        final BidRequest bidRequest = BidRequest.builder()\n+                .imp(asList(\n+                        imp,\n+                        givenImp(impBuilder -> impBuilder\n+                                .banner(null)\n+                                .id(\"2\")\n+                                .ext(mapper.valueToTree(ext))\n+                                .audio(Audio.builder().build()))))\n+                .build();\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = smartrtbBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1)\n+                .containsOnly(BidderError.badInput(\n+                        \"SmartRTB only supports banner and video\"));\n+        assertThat(result.getValue()).hasSize(1)\n+                .extracting(httpRequest -> mapper.readValue(httpRequest.getBody(), BidRequest.class))\n+                .flatExtracting(BidRequest::getImp)\n+                .containsOnly(imp);\n+    }\n+\n+    @Test\n+    public void makeHttpRequestShouldReturnErrorIfImpFormatIsNull() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(\n+                impBuilder -> impBuilder\n+                        .banner(Banner.builder()\n+                                .w(0)\n+                                .h(0)\n+                                .build()));\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = smartrtbBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1)\n+                .containsOnly(BidderError.badInput(\"banner size information missing\"));\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeHttpRequestShouldReturnErrorIfImpFormatIsEmpty() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(\n+                impBuilder -> impBuilder\n+                        .banner(Banner.builder()\n+                                .format(Collections.emptyList())\n+                                .w(0)\n+                                .h(0)\n+                                .build()));\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = smartrtbBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1)\n+                .containsOnly(BidderError.badInput(\"banner size information missing\"));\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldNotChangeBannerWidthAndHeightIfPresent() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(\n+                impBuilder -> impBuilder\n+                        .banner(Banner.builder()\n+                                .format(singletonList(Format.builder().w(300).h(500).build()))\n+                                .w(200)\n+                                .h(150)\n+                                .build()));\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = smartrtbBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue()).hasSize(1)\n+                .extracting(httpRequest -> mapper.readValue(httpRequest.getBody(), BidRequest.class))\n+                .flatExtracting(BidRequest::getImp)\n+                .extracting(Imp::getBanner)\n+                .extracting(Banner::getW, Banner::getH)\n+                .containsOnly(tuple(200, 150));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldSetBannerWidthAndHeightFromFirstFormatIfEmpty() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(\n+                impBuilder -> impBuilder\n+                        .banner(Banner.builder()\n+                                .format(Arrays.asList(Format.builder().w(300).h(500).build(),\n+                                        Format.builder().w(450).h(150).build()))\n+                                .build()));\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = smartrtbBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue()).hasSize(1)\n+                .extracting(httpRequest -> mapper.readValue(httpRequest.getBody(), BidRequest.class))\n+                .flatExtracting(BidRequest::getImp)\n+                .extracting(Imp::getBanner)\n+                .extracting(Banner::getW, Banner::getH)\n+                .containsOnly(tuple(300, 500));\n+    }", "originalCommit": "df4607646fdb862a57588d11d819ec77d11b4259", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDYxNjg3NA==", "url": "https://github.com/prebid/prebid-server-java/pull/596#discussion_r370616874", "bodyText": "Make test url more similar to production url", "author": "DGarbar", "createdAt": "2020-01-24T12:48:38Z", "path": "src/test/java/org/prebid/server/bidder/smartrtb/SmartrtbBidderTest.java", "diffHunk": "@@ -0,0 +1,409 @@\n+package org.prebid.server.bidder.smartrtb;\n+\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.iab.openrtb.request.Audio;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Video;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.function.Function;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.prebid.server.VertxTest;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.HttpResponse;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.smartrtb.ExtImpSmartrtb;\n+\n+import static java.util.Arrays.asList;\n+import static java.util.Collections.emptyMap;\n+import static java.util.Collections.singletonList;\n+import static java.util.function.Function.identity;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;\n+import static org.assertj.core.api.Assertions.tuple;\n+import static org.prebid.server.proto.openrtb.ext.response.BidType.banner;\n+\n+public class SmartrtbBidderTest extends VertxTest {\n+\n+    private static final String ENDPOINT_URL = \"https://test.endpoint.com\";\n+\n+    private SmartrtbBidder smartrtbBidder;\n+\n+    @Before\n+    public void setUp() {\n+        smartrtbBidder = new SmartrtbBidder(ENDPOINT_URL);\n+    }\n+\n+    @Test\n+    public void creationShouldFailOnInvalidEndpointUrl() {\n+        assertThatIllegalArgumentException().isThrownBy(() -> new SmartrtbBidder(\"invalid_url\"));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldReturnErrorIfImpExtCouldNotBeParsed() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(\n+                impBuilder -> impBuilder\n+                        .id(\"123\")\n+                        .ext(mapper.valueToTree(ExtPrebid.of(null, mapper.createArrayNode()))));\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = smartrtbBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1);\n+        assertThat(result.getErrors().get(0).getMessage()).startsWith(\"Cannot deserialize instance\");\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldSkipEmptyPublisherId() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(\n+                impBuilder -> impBuilder\n+                        .ext(mapper.valueToTree(ExtPrebid.of(null,\n+                                ExtImpSmartrtb.of(null,\"125\",\"222\",false)))));\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = smartrtbBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1).containsOnly(BidderError.badInput(\"Publisher ID is empty\"));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldSkipEmptyZoneId() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(\n+                impBuilder -> impBuilder\n+                        .ext(mapper.valueToTree(ExtPrebid.of(null,\n+                                ExtImpSmartrtb.of(\"111\",\"123\",null,false)))));\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = smartrtbBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1).containsOnly(BidderError.badInput(\"Zone ID is empty\"));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldSkipInvalidImpressionAndAddError() {\n+        // given\n+        ExtPrebid<?,  ExtImpSmartrtb> ext = ExtPrebid.of(null,\n+                ExtImpSmartrtb.of(\"Publisher ID is empty\",\"123\",\"Zone ID is empty\",false));\n+        Imp imp = givenImp(\n+                impBuilder -> impBuilder\n+                        .banner(null)\n+                        .id(\"2\")\n+                        .ext(mapper.valueToTree(ext))\n+                        .banner(Banner.builder().w(300).h(400).build())\n+        );\n+        final BidRequest bidRequest = BidRequest.builder()\n+                .imp(asList(\n+                        imp,\n+                        givenImp(impBuilder -> impBuilder\n+                                .banner(null)\n+                                .id(\"2\")\n+                                .ext(mapper.valueToTree(ext))\n+                                .audio(Audio.builder().build()))))\n+                .build();\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = smartrtbBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1)\n+                .containsOnly(BidderError.badInput(\n+                        \"SmartRTB only supports banner and video\"));\n+        assertThat(result.getValue()).hasSize(1)\n+                .extracting(httpRequest -> mapper.readValue(httpRequest.getBody(), BidRequest.class))\n+                .flatExtracting(BidRequest::getImp)\n+                .containsOnly(imp);\n+    }\n+\n+    @Test\n+    public void makeHttpRequestShouldReturnErrorIfImpFormatIsNull() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(\n+                impBuilder -> impBuilder\n+                        .banner(Banner.builder()\n+                                .w(0)\n+                                .h(0)\n+                                .build()));\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = smartrtbBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1)\n+                .containsOnly(BidderError.badInput(\"banner size information missing\"));\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeHttpRequestShouldReturnErrorIfImpFormatIsEmpty() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(\n+                impBuilder -> impBuilder\n+                        .banner(Banner.builder()\n+                                .format(Collections.emptyList())\n+                                .w(0)\n+                                .h(0)\n+                                .build()));\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = smartrtbBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1)\n+                .containsOnly(BidderError.badInput(\"banner size information missing\"));\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldNotChangeBannerWidthAndHeightIfPresent() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(\n+                impBuilder -> impBuilder\n+                        .banner(Banner.builder()\n+                                .format(singletonList(Format.builder().w(300).h(500).build()))\n+                                .w(200)\n+                                .h(150)\n+                                .build()));\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = smartrtbBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue()).hasSize(1)\n+                .extracting(httpRequest -> mapper.readValue(httpRequest.getBody(), BidRequest.class))\n+                .flatExtracting(BidRequest::getImp)\n+                .extracting(Imp::getBanner)\n+                .extracting(Banner::getW, Banner::getH)\n+                .containsOnly(tuple(200, 150));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldSetBannerWidthAndHeightFromFirstFormatIfEmpty() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(\n+                impBuilder -> impBuilder\n+                        .banner(Banner.builder()\n+                                .format(Arrays.asList(Format.builder().w(300).h(500).build(),\n+                                        Format.builder().w(450).h(150).build()))\n+                                .build()));\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = smartrtbBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue()).hasSize(1)\n+                .extracting(httpRequest -> mapper.readValue(httpRequest.getBody(), BidRequest.class))\n+                .flatExtracting(BidRequest::getImp)\n+                .extracting(Imp::getBanner)\n+                .extracting(Banner::getW, Banner::getH)\n+                .containsOnly(tuple(300, 500));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldCreateCorrectURL() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(\n+                impBuilder -> impBuilder\n+                        .banner(Banner.builder()\n+                                .format(singletonList(Format.builder().w(300).h(500).build()))\n+                                .build()));\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = smartrtbBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue()).hasSize(1);\n+        assertThat(result.getValue().get(0).getUri()).isEqualTo(ENDPOINT_URL + \"/publisherId\");", "originalCommit": "df4607646fdb862a57588d11d819ec77d11b4259", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDYxNjk0Mg==", "url": "https://github.com/prebid/prebid-server-java/pull/596#discussion_r370616942", "bodyText": "Redundant", "author": "DGarbar", "createdAt": "2020-01-24T12:48:47Z", "path": "src/test/java/org/prebid/server/bidder/smartrtb/SmartrtbBidderTest.java", "diffHunk": "@@ -0,0 +1,409 @@\n+package org.prebid.server.bidder.smartrtb;\n+\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.iab.openrtb.request.Audio;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Video;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.function.Function;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.prebid.server.VertxTest;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.HttpResponse;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.smartrtb.ExtImpSmartrtb;\n+\n+import static java.util.Arrays.asList;\n+import static java.util.Collections.emptyMap;\n+import static java.util.Collections.singletonList;\n+import static java.util.function.Function.identity;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;\n+import static org.assertj.core.api.Assertions.tuple;\n+import static org.prebid.server.proto.openrtb.ext.response.BidType.banner;\n+\n+public class SmartrtbBidderTest extends VertxTest {\n+\n+    private static final String ENDPOINT_URL = \"https://test.endpoint.com\";\n+\n+    private SmartrtbBidder smartrtbBidder;\n+\n+    @Before\n+    public void setUp() {\n+        smartrtbBidder = new SmartrtbBidder(ENDPOINT_URL);\n+    }\n+\n+    @Test\n+    public void creationShouldFailOnInvalidEndpointUrl() {\n+        assertThatIllegalArgumentException().isThrownBy(() -> new SmartrtbBidder(\"invalid_url\"));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldReturnErrorIfImpExtCouldNotBeParsed() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(\n+                impBuilder -> impBuilder\n+                        .id(\"123\")\n+                        .ext(mapper.valueToTree(ExtPrebid.of(null, mapper.createArrayNode()))));\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = smartrtbBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1);\n+        assertThat(result.getErrors().get(0).getMessage()).startsWith(\"Cannot deserialize instance\");\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldSkipEmptyPublisherId() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(\n+                impBuilder -> impBuilder\n+                        .ext(mapper.valueToTree(ExtPrebid.of(null,\n+                                ExtImpSmartrtb.of(null,\"125\",\"222\",false)))));\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = smartrtbBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1).containsOnly(BidderError.badInput(\"Publisher ID is empty\"));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldSkipEmptyZoneId() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(\n+                impBuilder -> impBuilder\n+                        .ext(mapper.valueToTree(ExtPrebid.of(null,\n+                                ExtImpSmartrtb.of(\"111\",\"123\",null,false)))));\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = smartrtbBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1).containsOnly(BidderError.badInput(\"Zone ID is empty\"));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldSkipInvalidImpressionAndAddError() {\n+        // given\n+        ExtPrebid<?,  ExtImpSmartrtb> ext = ExtPrebid.of(null,\n+                ExtImpSmartrtb.of(\"Publisher ID is empty\",\"123\",\"Zone ID is empty\",false));\n+        Imp imp = givenImp(\n+                impBuilder -> impBuilder\n+                        .banner(null)\n+                        .id(\"2\")\n+                        .ext(mapper.valueToTree(ext))\n+                        .banner(Banner.builder().w(300).h(400).build())\n+        );\n+        final BidRequest bidRequest = BidRequest.builder()\n+                .imp(asList(\n+                        imp,\n+                        givenImp(impBuilder -> impBuilder\n+                                .banner(null)\n+                                .id(\"2\")\n+                                .ext(mapper.valueToTree(ext))\n+                                .audio(Audio.builder().build()))))\n+                .build();\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = smartrtbBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1)\n+                .containsOnly(BidderError.badInput(\n+                        \"SmartRTB only supports banner and video\"));\n+        assertThat(result.getValue()).hasSize(1)\n+                .extracting(httpRequest -> mapper.readValue(httpRequest.getBody(), BidRequest.class))\n+                .flatExtracting(BidRequest::getImp)\n+                .containsOnly(imp);\n+    }\n+\n+    @Test\n+    public void makeHttpRequestShouldReturnErrorIfImpFormatIsNull() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(\n+                impBuilder -> impBuilder\n+                        .banner(Banner.builder()\n+                                .w(0)\n+                                .h(0)\n+                                .build()));\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = smartrtbBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1)\n+                .containsOnly(BidderError.badInput(\"banner size information missing\"));\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeHttpRequestShouldReturnErrorIfImpFormatIsEmpty() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(\n+                impBuilder -> impBuilder\n+                        .banner(Banner.builder()\n+                                .format(Collections.emptyList())\n+                                .w(0)\n+                                .h(0)\n+                                .build()));\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = smartrtbBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1)\n+                .containsOnly(BidderError.badInput(\"banner size information missing\"));\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldNotChangeBannerWidthAndHeightIfPresent() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(\n+                impBuilder -> impBuilder\n+                        .banner(Banner.builder()\n+                                .format(singletonList(Format.builder().w(300).h(500).build()))\n+                                .w(200)\n+                                .h(150)\n+                                .build()));\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = smartrtbBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue()).hasSize(1)\n+                .extracting(httpRequest -> mapper.readValue(httpRequest.getBody(), BidRequest.class))\n+                .flatExtracting(BidRequest::getImp)\n+                .extracting(Imp::getBanner)\n+                .extracting(Banner::getW, Banner::getH)\n+                .containsOnly(tuple(200, 150));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldSetBannerWidthAndHeightFromFirstFormatIfEmpty() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(\n+                impBuilder -> impBuilder\n+                        .banner(Banner.builder()\n+                                .format(Arrays.asList(Format.builder().w(300).h(500).build(),\n+                                        Format.builder().w(450).h(150).build()))\n+                                .build()));\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = smartrtbBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue()).hasSize(1)\n+                .extracting(httpRequest -> mapper.readValue(httpRequest.getBody(), BidRequest.class))\n+                .flatExtracting(BidRequest::getImp)\n+                .extracting(Imp::getBanner)\n+                .extracting(Banner::getW, Banner::getH)\n+                .containsOnly(tuple(300, 500));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldCreateCorrectURL() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(\n+                impBuilder -> impBuilder\n+                        .banner(Banner.builder()\n+                                .format(singletonList(Format.builder().w(300).h(500).build()))", "originalCommit": "df4607646fdb862a57588d11d819ec77d11b4259", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDYxNzE0NA==", "url": "https://github.com/prebid/prebid-server-java/pull/596#discussion_r370617144", "bodyText": "They have different type matching", "author": "DGarbar", "createdAt": "2020-01-24T12:49:24Z", "path": "src/test/java/org/prebid/server/bidder/smartrtb/SmartrtbBidderTest.java", "diffHunk": "@@ -0,0 +1,409 @@\n+package org.prebid.server.bidder.smartrtb;\n+\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.iab.openrtb.request.Audio;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Video;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.function.Function;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.prebid.server.VertxTest;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.HttpResponse;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.smartrtb.ExtImpSmartrtb;\n+\n+import static java.util.Arrays.asList;\n+import static java.util.Collections.emptyMap;\n+import static java.util.Collections.singletonList;\n+import static java.util.function.Function.identity;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;\n+import static org.assertj.core.api.Assertions.tuple;\n+import static org.prebid.server.proto.openrtb.ext.response.BidType.banner;\n+\n+public class SmartrtbBidderTest extends VertxTest {\n+\n+    private static final String ENDPOINT_URL = \"https://test.endpoint.com\";\n+\n+    private SmartrtbBidder smartrtbBidder;\n+\n+    @Before\n+    public void setUp() {\n+        smartrtbBidder = new SmartrtbBidder(ENDPOINT_URL);\n+    }\n+\n+    @Test\n+    public void creationShouldFailOnInvalidEndpointUrl() {\n+        assertThatIllegalArgumentException().isThrownBy(() -> new SmartrtbBidder(\"invalid_url\"));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldReturnErrorIfImpExtCouldNotBeParsed() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(\n+                impBuilder -> impBuilder\n+                        .id(\"123\")\n+                        .ext(mapper.valueToTree(ExtPrebid.of(null, mapper.createArrayNode()))));\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = smartrtbBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1);\n+        assertThat(result.getErrors().get(0).getMessage()).startsWith(\"Cannot deserialize instance\");\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldSkipEmptyPublisherId() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(\n+                impBuilder -> impBuilder\n+                        .ext(mapper.valueToTree(ExtPrebid.of(null,\n+                                ExtImpSmartrtb.of(null,\"125\",\"222\",false)))));\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = smartrtbBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1).containsOnly(BidderError.badInput(\"Publisher ID is empty\"));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldSkipEmptyZoneId() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(\n+                impBuilder -> impBuilder\n+                        .ext(mapper.valueToTree(ExtPrebid.of(null,\n+                                ExtImpSmartrtb.of(\"111\",\"123\",null,false)))));\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = smartrtbBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1).containsOnly(BidderError.badInput(\"Zone ID is empty\"));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldSkipInvalidImpressionAndAddError() {\n+        // given\n+        ExtPrebid<?,  ExtImpSmartrtb> ext = ExtPrebid.of(null,\n+                ExtImpSmartrtb.of(\"Publisher ID is empty\",\"123\",\"Zone ID is empty\",false));\n+        Imp imp = givenImp(\n+                impBuilder -> impBuilder\n+                        .banner(null)\n+                        .id(\"2\")\n+                        .ext(mapper.valueToTree(ext))\n+                        .banner(Banner.builder().w(300).h(400).build())\n+        );\n+        final BidRequest bidRequest = BidRequest.builder()\n+                .imp(asList(\n+                        imp,\n+                        givenImp(impBuilder -> impBuilder\n+                                .banner(null)\n+                                .id(\"2\")\n+                                .ext(mapper.valueToTree(ext))\n+                                .audio(Audio.builder().build()))))\n+                .build();\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = smartrtbBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1)\n+                .containsOnly(BidderError.badInput(\n+                        \"SmartRTB only supports banner and video\"));\n+        assertThat(result.getValue()).hasSize(1)\n+                .extracting(httpRequest -> mapper.readValue(httpRequest.getBody(), BidRequest.class))\n+                .flatExtracting(BidRequest::getImp)\n+                .containsOnly(imp);\n+    }\n+\n+    @Test\n+    public void makeHttpRequestShouldReturnErrorIfImpFormatIsNull() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(\n+                impBuilder -> impBuilder\n+                        .banner(Banner.builder()\n+                                .w(0)\n+                                .h(0)\n+                                .build()));\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = smartrtbBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1)\n+                .containsOnly(BidderError.badInput(\"banner size information missing\"));\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeHttpRequestShouldReturnErrorIfImpFormatIsEmpty() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(\n+                impBuilder -> impBuilder\n+                        .banner(Banner.builder()\n+                                .format(Collections.emptyList())\n+                                .w(0)\n+                                .h(0)\n+                                .build()));\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = smartrtbBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1)\n+                .containsOnly(BidderError.badInput(\"banner size information missing\"));\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldNotChangeBannerWidthAndHeightIfPresent() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(\n+                impBuilder -> impBuilder\n+                        .banner(Banner.builder()\n+                                .format(singletonList(Format.builder().w(300).h(500).build()))\n+                                .w(200)\n+                                .h(150)\n+                                .build()));\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = smartrtbBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue()).hasSize(1)\n+                .extracting(httpRequest -> mapper.readValue(httpRequest.getBody(), BidRequest.class))\n+                .flatExtracting(BidRequest::getImp)\n+                .extracting(Imp::getBanner)\n+                .extracting(Banner::getW, Banner::getH)\n+                .containsOnly(tuple(200, 150));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldSetBannerWidthAndHeightFromFirstFormatIfEmpty() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(\n+                impBuilder -> impBuilder\n+                        .banner(Banner.builder()\n+                                .format(Arrays.asList(Format.builder().w(300).h(500).build(),\n+                                        Format.builder().w(450).h(150).build()))\n+                                .build()));\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = smartrtbBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue()).hasSize(1)\n+                .extracting(httpRequest -> mapper.readValue(httpRequest.getBody(), BidRequest.class))\n+                .flatExtracting(BidRequest::getImp)\n+                .extracting(Imp::getBanner)\n+                .extracting(Banner::getW, Banner::getH)\n+                .containsOnly(tuple(300, 500));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldCreateCorrectURL() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(\n+                impBuilder -> impBuilder\n+                        .banner(Banner.builder()\n+                                .format(singletonList(Format.builder().w(300).h(500).build()))\n+                                .build()));\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = smartrtbBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue()).hasSize(1);\n+        assertThat(result.getValue().get(0).getUri()).isEqualTo(ENDPOINT_URL + \"/publisherId\");\n+    }\n+\n+    @Test\n+    public void makeBidsShouldReturnErrorIfResponseBodyCouldNotBeParsed() {\n+        // given\n+        final HttpCall<BidRequest> httpCall = givenHttpCall(null, \"invalid\");\n+\n+        // when\n+        final Result<List<BidderBid>> result = smartrtbBidder.makeBids(httpCall, null);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1);\n+        assertThat(result.getErrors().get(0).getMessage()).startsWith(\"Failed to decode: Unrecognized token\");\n+        assertThat(result.getErrors().get(0).getType()).isEqualTo(BidderError.Type.bad_server_response);\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeBidsShouldReturnEmptyListIfBidResponseIsNull() throws JsonProcessingException {\n+        // given\n+        final HttpCall<BidRequest> httpCall = givenHttpCall(null,\n+                mapper.writeValueAsString(null));\n+\n+        // when\n+        final Result<List<BidderBid>> result = smartrtbBidder.makeBids(httpCall, null);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeBidsShouldReturnErrorWithUnknownBidTypeIfNotSupportedBidType() throws JsonProcessingException {", "originalCommit": "df4607646fdb862a57588d11d819ec77d11b4259", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDYxNzU3NQ==", "url": "https://github.com/prebid/prebid-server-java/pull/596#discussion_r370617575", "bodyText": "Change to use Type from ext", "author": "DGarbar", "createdAt": "2020-01-24T12:50:41Z", "path": "src/test/java/org/prebid/server/bidder/smartrtb/SmartrtbBidderTest.java", "diffHunk": "@@ -0,0 +1,409 @@\n+package org.prebid.server.bidder.smartrtb;\n+\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.iab.openrtb.request.Audio;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Video;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.function.Function;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.prebid.server.VertxTest;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.HttpResponse;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.smartrtb.ExtImpSmartrtb;\n+\n+import static java.util.Arrays.asList;\n+import static java.util.Collections.emptyMap;\n+import static java.util.Collections.singletonList;\n+import static java.util.function.Function.identity;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;\n+import static org.assertj.core.api.Assertions.tuple;\n+import static org.prebid.server.proto.openrtb.ext.response.BidType.banner;\n+\n+public class SmartrtbBidderTest extends VertxTest {\n+\n+    private static final String ENDPOINT_URL = \"https://test.endpoint.com\";\n+\n+    private SmartrtbBidder smartrtbBidder;\n+\n+    @Before\n+    public void setUp() {\n+        smartrtbBidder = new SmartrtbBidder(ENDPOINT_URL);\n+    }\n+\n+    @Test\n+    public void creationShouldFailOnInvalidEndpointUrl() {\n+        assertThatIllegalArgumentException().isThrownBy(() -> new SmartrtbBidder(\"invalid_url\"));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldReturnErrorIfImpExtCouldNotBeParsed() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(\n+                impBuilder -> impBuilder\n+                        .id(\"123\")\n+                        .ext(mapper.valueToTree(ExtPrebid.of(null, mapper.createArrayNode()))));\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = smartrtbBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1);\n+        assertThat(result.getErrors().get(0).getMessage()).startsWith(\"Cannot deserialize instance\");\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldSkipEmptyPublisherId() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(\n+                impBuilder -> impBuilder\n+                        .ext(mapper.valueToTree(ExtPrebid.of(null,\n+                                ExtImpSmartrtb.of(null,\"125\",\"222\",false)))));\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = smartrtbBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1).containsOnly(BidderError.badInput(\"Publisher ID is empty\"));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldSkipEmptyZoneId() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(\n+                impBuilder -> impBuilder\n+                        .ext(mapper.valueToTree(ExtPrebid.of(null,\n+                                ExtImpSmartrtb.of(\"111\",\"123\",null,false)))));\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = smartrtbBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1).containsOnly(BidderError.badInput(\"Zone ID is empty\"));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldSkipInvalidImpressionAndAddError() {\n+        // given\n+        ExtPrebid<?,  ExtImpSmartrtb> ext = ExtPrebid.of(null,\n+                ExtImpSmartrtb.of(\"Publisher ID is empty\",\"123\",\"Zone ID is empty\",false));\n+        Imp imp = givenImp(\n+                impBuilder -> impBuilder\n+                        .banner(null)\n+                        .id(\"2\")\n+                        .ext(mapper.valueToTree(ext))\n+                        .banner(Banner.builder().w(300).h(400).build())\n+        );\n+        final BidRequest bidRequest = BidRequest.builder()\n+                .imp(asList(\n+                        imp,\n+                        givenImp(impBuilder -> impBuilder\n+                                .banner(null)\n+                                .id(\"2\")\n+                                .ext(mapper.valueToTree(ext))\n+                                .audio(Audio.builder().build()))))\n+                .build();\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = smartrtbBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1)\n+                .containsOnly(BidderError.badInput(\n+                        \"SmartRTB only supports banner and video\"));\n+        assertThat(result.getValue()).hasSize(1)\n+                .extracting(httpRequest -> mapper.readValue(httpRequest.getBody(), BidRequest.class))\n+                .flatExtracting(BidRequest::getImp)\n+                .containsOnly(imp);\n+    }\n+\n+    @Test\n+    public void makeHttpRequestShouldReturnErrorIfImpFormatIsNull() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(\n+                impBuilder -> impBuilder\n+                        .banner(Banner.builder()\n+                                .w(0)\n+                                .h(0)\n+                                .build()));\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = smartrtbBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1)\n+                .containsOnly(BidderError.badInput(\"banner size information missing\"));\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeHttpRequestShouldReturnErrorIfImpFormatIsEmpty() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(\n+                impBuilder -> impBuilder\n+                        .banner(Banner.builder()\n+                                .format(Collections.emptyList())\n+                                .w(0)\n+                                .h(0)\n+                                .build()));\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = smartrtbBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1)\n+                .containsOnly(BidderError.badInput(\"banner size information missing\"));\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldNotChangeBannerWidthAndHeightIfPresent() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(\n+                impBuilder -> impBuilder\n+                        .banner(Banner.builder()\n+                                .format(singletonList(Format.builder().w(300).h(500).build()))\n+                                .w(200)\n+                                .h(150)\n+                                .build()));\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = smartrtbBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue()).hasSize(1)\n+                .extracting(httpRequest -> mapper.readValue(httpRequest.getBody(), BidRequest.class))\n+                .flatExtracting(BidRequest::getImp)\n+                .extracting(Imp::getBanner)\n+                .extracting(Banner::getW, Banner::getH)\n+                .containsOnly(tuple(200, 150));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldSetBannerWidthAndHeightFromFirstFormatIfEmpty() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(\n+                impBuilder -> impBuilder\n+                        .banner(Banner.builder()\n+                                .format(Arrays.asList(Format.builder().w(300).h(500).build(),\n+                                        Format.builder().w(450).h(150).build()))\n+                                .build()));\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = smartrtbBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue()).hasSize(1)\n+                .extracting(httpRequest -> mapper.readValue(httpRequest.getBody(), BidRequest.class))\n+                .flatExtracting(BidRequest::getImp)\n+                .extracting(Imp::getBanner)\n+                .extracting(Banner::getW, Banner::getH)\n+                .containsOnly(tuple(300, 500));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldCreateCorrectURL() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(\n+                impBuilder -> impBuilder\n+                        .banner(Banner.builder()\n+                                .format(singletonList(Format.builder().w(300).h(500).build()))\n+                                .build()));\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = smartrtbBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue()).hasSize(1);\n+        assertThat(result.getValue().get(0).getUri()).isEqualTo(ENDPOINT_URL + \"/publisherId\");\n+    }\n+\n+    @Test\n+    public void makeBidsShouldReturnErrorIfResponseBodyCouldNotBeParsed() {\n+        // given\n+        final HttpCall<BidRequest> httpCall = givenHttpCall(null, \"invalid\");\n+\n+        // when\n+        final Result<List<BidderBid>> result = smartrtbBidder.makeBids(httpCall, null);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1);\n+        assertThat(result.getErrors().get(0).getMessage()).startsWith(\"Failed to decode: Unrecognized token\");\n+        assertThat(result.getErrors().get(0).getType()).isEqualTo(BidderError.Type.bad_server_response);\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeBidsShouldReturnEmptyListIfBidResponseIsNull() throws JsonProcessingException {\n+        // given\n+        final HttpCall<BidRequest> httpCall = givenHttpCall(null,\n+                mapper.writeValueAsString(null));\n+\n+        // when\n+        final Result<List<BidderBid>> result = smartrtbBidder.makeBids(httpCall, null);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeBidsShouldReturnErrorWithUnknownBidTypeIfNotSupportedBidType() throws JsonProcessingException {\n+        // given\n+        final HttpCall<BidRequest> httpCall = givenHttpCall(BidRequest.builder()\n+                        .imp(singletonList(Imp.builder().id(\"123\").audio(Audio.builder().build()).build()))\n+                        .build(),\n+                mapper.writeValueAsString(\n+                        givenBidResponse(bidBuilder -> bidBuilder.impid(\"123\"))));\n+\n+        // when\n+        final Result<List<BidderBid>> result = smartrtbBidder.makeBids(httpCall, null);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1)\n+                .containsOnly(BidderError.badInput(\"Failed to find impression 123\"));\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeBidsShouldReturnErrorWithUnknownBidTypeIfDiffId() throws JsonProcessingException {\n+        // given\n+        final HttpCall<BidRequest> httpCall = givenHttpCall(BidRequest.builder()\n+                        .imp(singletonList(Imp.builder().id(\"12\").video(Video.builder().build()).build()))\n+                        .build(),\n+                mapper.writeValueAsString(\n+                        givenBidResponse(bidBuilder -> bidBuilder.impid(\"123\"))));\n+\n+        // when\n+        final Result<List<BidderBid>> result = smartrtbBidder.makeBids(httpCall, null);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1)\n+                .containsOnly(BidderError.badInput(\"Failed to find impression 123\"));\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeBidsShouldReturnVideoBidIfVideoIsPresentInRequestImp() throws JsonProcessingException {\n+        // given\n+        final HttpCall<BidRequest> httpCall = givenHttpCall(BidRequest.builder()\n+                        .imp(singletonList(Imp.builder().id(\"12\").video(Video.builder().build()).build()))\n+                        .build(),\n+                mapper.writeValueAsString(\n+                        givenBidResponse(bidBuilder -> bidBuilder.impid(\"123\"))));\n+\n+        // when\n+        final Result<List<BidderBid>> result = smartrtbBidder.makeBids(httpCall, null);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1)\n+                .containsOnly(BidderError.badInput(\"Failed to find impression 123\"));\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+", "originalCommit": "df4607646fdb862a57588d11d819ec77d11b4259", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDYxNzc2MQ==", "url": "https://github.com/prebid/prebid-server-java/pull/596#discussion_r370617761", "bodyText": "false", "author": "DGarbar", "createdAt": "2020-01-24T12:51:08Z", "path": "src/test/java/org/prebid/server/bidder/smartrtb/SmartrtbBidderTest.java", "diffHunk": "@@ -0,0 +1,409 @@\n+package org.prebid.server.bidder.smartrtb;\n+\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.iab.openrtb.request.Audio;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Video;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.function.Function;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.prebid.server.VertxTest;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.HttpResponse;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.smartrtb.ExtImpSmartrtb;\n+\n+import static java.util.Arrays.asList;\n+import static java.util.Collections.emptyMap;\n+import static java.util.Collections.singletonList;\n+import static java.util.function.Function.identity;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;\n+import static org.assertj.core.api.Assertions.tuple;\n+import static org.prebid.server.proto.openrtb.ext.response.BidType.banner;\n+\n+public class SmartrtbBidderTest extends VertxTest {\n+\n+    private static final String ENDPOINT_URL = \"https://test.endpoint.com\";\n+\n+    private SmartrtbBidder smartrtbBidder;\n+\n+    @Before\n+    public void setUp() {\n+        smartrtbBidder = new SmartrtbBidder(ENDPOINT_URL);\n+    }\n+\n+    @Test\n+    public void creationShouldFailOnInvalidEndpointUrl() {\n+        assertThatIllegalArgumentException().isThrownBy(() -> new SmartrtbBidder(\"invalid_url\"));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldReturnErrorIfImpExtCouldNotBeParsed() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(\n+                impBuilder -> impBuilder\n+                        .id(\"123\")\n+                        .ext(mapper.valueToTree(ExtPrebid.of(null, mapper.createArrayNode()))));\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = smartrtbBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1);\n+        assertThat(result.getErrors().get(0).getMessage()).startsWith(\"Cannot deserialize instance\");\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldSkipEmptyPublisherId() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(\n+                impBuilder -> impBuilder\n+                        .ext(mapper.valueToTree(ExtPrebid.of(null,\n+                                ExtImpSmartrtb.of(null,\"125\",\"222\",false)))));\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = smartrtbBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1).containsOnly(BidderError.badInput(\"Publisher ID is empty\"));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldSkipEmptyZoneId() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(\n+                impBuilder -> impBuilder\n+                        .ext(mapper.valueToTree(ExtPrebid.of(null,\n+                                ExtImpSmartrtb.of(\"111\",\"123\",null,false)))));\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = smartrtbBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1).containsOnly(BidderError.badInput(\"Zone ID is empty\"));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldSkipInvalidImpressionAndAddError() {\n+        // given\n+        ExtPrebid<?,  ExtImpSmartrtb> ext = ExtPrebid.of(null,\n+                ExtImpSmartrtb.of(\"Publisher ID is empty\",\"123\",\"Zone ID is empty\",false));\n+        Imp imp = givenImp(\n+                impBuilder -> impBuilder\n+                        .banner(null)\n+                        .id(\"2\")\n+                        .ext(mapper.valueToTree(ext))\n+                        .banner(Banner.builder().w(300).h(400).build())\n+        );\n+        final BidRequest bidRequest = BidRequest.builder()\n+                .imp(asList(\n+                        imp,\n+                        givenImp(impBuilder -> impBuilder\n+                                .banner(null)\n+                                .id(\"2\")\n+                                .ext(mapper.valueToTree(ext))\n+                                .audio(Audio.builder().build()))))\n+                .build();\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = smartrtbBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1)\n+                .containsOnly(BidderError.badInput(\n+                        \"SmartRTB only supports banner and video\"));\n+        assertThat(result.getValue()).hasSize(1)\n+                .extracting(httpRequest -> mapper.readValue(httpRequest.getBody(), BidRequest.class))\n+                .flatExtracting(BidRequest::getImp)\n+                .containsOnly(imp);\n+    }\n+\n+    @Test\n+    public void makeHttpRequestShouldReturnErrorIfImpFormatIsNull() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(\n+                impBuilder -> impBuilder\n+                        .banner(Banner.builder()\n+                                .w(0)\n+                                .h(0)\n+                                .build()));\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = smartrtbBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1)\n+                .containsOnly(BidderError.badInput(\"banner size information missing\"));\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeHttpRequestShouldReturnErrorIfImpFormatIsEmpty() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(\n+                impBuilder -> impBuilder\n+                        .banner(Banner.builder()\n+                                .format(Collections.emptyList())\n+                                .w(0)\n+                                .h(0)\n+                                .build()));\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = smartrtbBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1)\n+                .containsOnly(BidderError.badInput(\"banner size information missing\"));\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldNotChangeBannerWidthAndHeightIfPresent() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(\n+                impBuilder -> impBuilder\n+                        .banner(Banner.builder()\n+                                .format(singletonList(Format.builder().w(300).h(500).build()))\n+                                .w(200)\n+                                .h(150)\n+                                .build()));\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = smartrtbBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue()).hasSize(1)\n+                .extracting(httpRequest -> mapper.readValue(httpRequest.getBody(), BidRequest.class))\n+                .flatExtracting(BidRequest::getImp)\n+                .extracting(Imp::getBanner)\n+                .extracting(Banner::getW, Banner::getH)\n+                .containsOnly(tuple(200, 150));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldSetBannerWidthAndHeightFromFirstFormatIfEmpty() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(\n+                impBuilder -> impBuilder\n+                        .banner(Banner.builder()\n+                                .format(Arrays.asList(Format.builder().w(300).h(500).build(),\n+                                        Format.builder().w(450).h(150).build()))\n+                                .build()));\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = smartrtbBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue()).hasSize(1)\n+                .extracting(httpRequest -> mapper.readValue(httpRequest.getBody(), BidRequest.class))\n+                .flatExtracting(BidRequest::getImp)\n+                .extracting(Imp::getBanner)\n+                .extracting(Banner::getW, Banner::getH)\n+                .containsOnly(tuple(300, 500));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldCreateCorrectURL() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(\n+                impBuilder -> impBuilder\n+                        .banner(Banner.builder()\n+                                .format(singletonList(Format.builder().w(300).h(500).build()))\n+                                .build()));\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = smartrtbBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue()).hasSize(1);\n+        assertThat(result.getValue().get(0).getUri()).isEqualTo(ENDPOINT_URL + \"/publisherId\");\n+    }\n+\n+    @Test\n+    public void makeBidsShouldReturnErrorIfResponseBodyCouldNotBeParsed() {\n+        // given\n+        final HttpCall<BidRequest> httpCall = givenHttpCall(null, \"invalid\");\n+\n+        // when\n+        final Result<List<BidderBid>> result = smartrtbBidder.makeBids(httpCall, null);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1);\n+        assertThat(result.getErrors().get(0).getMessage()).startsWith(\"Failed to decode: Unrecognized token\");\n+        assertThat(result.getErrors().get(0).getType()).isEqualTo(BidderError.Type.bad_server_response);\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeBidsShouldReturnEmptyListIfBidResponseIsNull() throws JsonProcessingException {\n+        // given\n+        final HttpCall<BidRequest> httpCall = givenHttpCall(null,\n+                mapper.writeValueAsString(null));\n+\n+        // when\n+        final Result<List<BidderBid>> result = smartrtbBidder.makeBids(httpCall, null);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeBidsShouldReturnErrorWithUnknownBidTypeIfNotSupportedBidType() throws JsonProcessingException {\n+        // given\n+        final HttpCall<BidRequest> httpCall = givenHttpCall(BidRequest.builder()\n+                        .imp(singletonList(Imp.builder().id(\"123\").audio(Audio.builder().build()).build()))\n+                        .build(),\n+                mapper.writeValueAsString(\n+                        givenBidResponse(bidBuilder -> bidBuilder.impid(\"123\"))));\n+\n+        // when\n+        final Result<List<BidderBid>> result = smartrtbBidder.makeBids(httpCall, null);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1)\n+                .containsOnly(BidderError.badInput(\"Failed to find impression 123\"));\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeBidsShouldReturnErrorWithUnknownBidTypeIfDiffId() throws JsonProcessingException {\n+        // given\n+        final HttpCall<BidRequest> httpCall = givenHttpCall(BidRequest.builder()\n+                        .imp(singletonList(Imp.builder().id(\"12\").video(Video.builder().build()).build()))\n+                        .build(),\n+                mapper.writeValueAsString(\n+                        givenBidResponse(bidBuilder -> bidBuilder.impid(\"123\"))));\n+\n+        // when\n+        final Result<List<BidderBid>> result = smartrtbBidder.makeBids(httpCall, null);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1)\n+                .containsOnly(BidderError.badInput(\"Failed to find impression 123\"));\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeBidsShouldReturnVideoBidIfVideoIsPresentInRequestImp() throws JsonProcessingException {\n+        // given\n+        final HttpCall<BidRequest> httpCall = givenHttpCall(BidRequest.builder()\n+                        .imp(singletonList(Imp.builder().id(\"12\").video(Video.builder().build()).build()))\n+                        .build(),\n+                mapper.writeValueAsString(\n+                        givenBidResponse(bidBuilder -> bidBuilder.impid(\"123\"))));\n+\n+        // when\n+        final Result<List<BidderBid>> result = smartrtbBidder.makeBids(httpCall, null);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1)\n+                .containsOnly(BidderError.badInput(\"Failed to find impression 123\"));\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeBidsShouldReturnEmptyListIfBidResponseSeatBidIsNull() throws JsonProcessingException {\n+        // given\n+        final HttpCall<BidRequest> httpCall = givenHttpCall(null,\n+                mapper.writeValueAsString(BidResponse.builder().build()));\n+\n+        // when\n+        final Result<List<BidderBid>> result = smartrtbBidder.makeBids(httpCall, null);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeBidsShouldReturnBannerBidIfBannerIsPresentInRequestImp() throws JsonProcessingException {\n+        // given\n+        final HttpCall<BidRequest> httpCall = givenHttpCall(\n+                BidRequest.builder()\n+                        .imp(singletonList(Imp.builder().id(\"123\").banner(Banner.builder().build()).build()))\n+                        .build(),\n+                mapper.writeValueAsString(\n+                        givenBidResponse(bidBuilder -> bidBuilder.impid(\"123\"))));\n+\n+        // when\n+        final Result<List<BidderBid>> result = smartrtbBidder.makeBids(httpCall, null);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue())\n+                .containsOnly(BidderBid.of(Bid.builder().impid(\"123\").build(), banner, \"USD\"));\n+    }", "originalCommit": "df4607646fdb862a57588d11d819ec77d11b4259", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDYxODUzMg==", "url": "https://github.com/prebid/prebid-server-java/pull/596#discussion_r370618532", "bodyText": "base 64 encode. And change appropriately to your bidder.", "author": "DGarbar", "createdAt": "2020-01-24T12:53:25Z", "path": "src/test/java/org/prebid/server/it/SmartrtbTest.java", "diffHunk": "@@ -0,0 +1,65 @@\n+package org.prebid.server.it;\n+\n+import io.restassured.response.Response;\n+import java.io.IOException;\n+import org.json.JSONException;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.skyscreamer.jsonassert.JSONAssert;\n+import org.skyscreamer.jsonassert.JSONCompareMode;\n+import org.springframework.test.context.junit4.SpringRunner;\n+\n+import static com.github.tomakehurst.wiremock.client.WireMock.aResponse;\n+import static com.github.tomakehurst.wiremock.client.WireMock.equalTo;\n+import static com.github.tomakehurst.wiremock.client.WireMock.equalToJson;\n+import static com.github.tomakehurst.wiremock.client.WireMock.post;\n+import static com.github.tomakehurst.wiremock.client.WireMock.urlPathEqualTo;\n+import static io.restassured.RestAssured.given;\n+import static java.util.Collections.singletonList;\n+\n+@RunWith(SpringRunner.class)\n+public class SmartrtbTest extends IntegrationTest {\n+\n+    @Test\n+    public void openrtb2AuctionShouldRespondWithBidsFromSmartrtb() throws IOException, JSONException {\n+        // given\n+        // Smartrtb bid response for imp 001\n+        wireMockRule.stubFor(post(urlPathEqualTo(\"/smartrtb-exchange/1234\"))\n+                .withHeader(\"Accept\", equalTo(\"application/json\"))\n+                .withHeader(\"Content-Type\", equalTo(\"application/json;charset=UTF-8\"))\n+                .withRequestBody(equalToJson(jsonFrom(\"openrtb2/smartrtb/test-smartrtb-bid-request-1.json\")))\n+                .willReturn(aResponse().withBody(jsonFrom(\"openrtb2/smartrtb/test-smartrtb-bid-response-1.json\"))));\n+\n+        // Smartrtb bid response for imp 002\n+        wireMockRule.stubFor(post(urlPathEqualTo(\"/smartrtb-exchange/12345\"))\n+                .withHeader(\"Accept\", equalTo(\"application/json\"))\n+                .withHeader(\"Content-Type\", equalTo(\"application/json;charset=UTF-8\"))\n+                .withRequestBody(equalToJson(jsonFrom(\"openrtb2/smartrtb/test-smartrtb-bid-request-2.json\")))\n+                .willReturn(aResponse().withBody(jsonFrom(\"openrtb2/smartrtb/test-smartrtb-bid-response-2.json\"))));\n+\n+        // pre-bid cache\n+        wireMockRule.stubFor(post(urlPathEqualTo(\"/cache\"))\n+                .withRequestBody(equalToJson(jsonFrom(\"openrtb2/smartrtb/test-cache-smartrtb-request.json\")))\n+                .willReturn(aResponse().withBody(jsonFrom(\"openrtb2/smartrtb/test-cache-smartrtb-response.json\"))));\n+\n+        // when\n+        final Response response = given(spec)\n+                .header(\"Referer\", \"http://www.example.com\")\n+                .header(\"X-Forwarded-For\", \"193.168.244.1\")\n+                .header(\"User-Agent\", \"userAgent\")\n+                .header(\"Origin\", \"http://www.example.com\")\n+                .cookie(\"uids\", \"eyJ1aWRzIjp7ImdhbW9zaGkiOiJHTS1VSUQifX0=\")", "originalCommit": "df4607646fdb862a57588d11d819ec77d11b4259", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDYxODYwOA==", "url": "https://github.com/prebid/prebid-server-java/pull/596#discussion_r370618608", "bodyText": "remove", "author": "DGarbar", "createdAt": "2020-01-24T12:53:38Z", "path": "src/test/java/org/prebid/server/it/SmartrtbTest.java", "diffHunk": "@@ -0,0 +1,65 @@\n+package org.prebid.server.it;\n+\n+import io.restassured.response.Response;\n+import java.io.IOException;\n+import org.json.JSONException;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.skyscreamer.jsonassert.JSONAssert;\n+import org.skyscreamer.jsonassert.JSONCompareMode;\n+import org.springframework.test.context.junit4.SpringRunner;\n+\n+import static com.github.tomakehurst.wiremock.client.WireMock.aResponse;\n+import static com.github.tomakehurst.wiremock.client.WireMock.equalTo;\n+import static com.github.tomakehurst.wiremock.client.WireMock.equalToJson;\n+import static com.github.tomakehurst.wiremock.client.WireMock.post;\n+import static com.github.tomakehurst.wiremock.client.WireMock.urlPathEqualTo;\n+import static io.restassured.RestAssured.given;\n+import static java.util.Collections.singletonList;\n+\n+@RunWith(SpringRunner.class)\n+public class SmartrtbTest extends IntegrationTest {\n+\n+    @Test\n+    public void openrtb2AuctionShouldRespondWithBidsFromSmartrtb() throws IOException, JSONException {\n+        // given\n+        // Smartrtb bid response for imp 001\n+        wireMockRule.stubFor(post(urlPathEqualTo(\"/smartrtb-exchange/1234\"))\n+                .withHeader(\"Accept\", equalTo(\"application/json\"))\n+                .withHeader(\"Content-Type\", equalTo(\"application/json;charset=UTF-8\"))\n+                .withRequestBody(equalToJson(jsonFrom(\"openrtb2/smartrtb/test-smartrtb-bid-request-1.json\")))\n+                .willReturn(aResponse().withBody(jsonFrom(\"openrtb2/smartrtb/test-smartrtb-bid-response-1.json\"))));\n+\n+        // Smartrtb bid response for imp 002\n+        wireMockRule.stubFor(post(urlPathEqualTo(\"/smartrtb-exchange/12345\"))\n+                .withHeader(\"Accept\", equalTo(\"application/json\"))\n+                .withHeader(\"Content-Type\", equalTo(\"application/json;charset=UTF-8\"))\n+                .withRequestBody(equalToJson(jsonFrom(\"openrtb2/smartrtb/test-smartrtb-bid-request-2.json\")))\n+                .willReturn(aResponse().withBody(jsonFrom(\"openrtb2/smartrtb/test-smartrtb-bid-response-2.json\"))));\n+\n+        // pre-bid cache\n+        wireMockRule.stubFor(post(urlPathEqualTo(\"/cache\"))\n+                .withRequestBody(equalToJson(jsonFrom(\"openrtb2/smartrtb/test-cache-smartrtb-request.json\")))\n+                .willReturn(aResponse().withBody(jsonFrom(\"openrtb2/smartrtb/test-cache-smartrtb-response.json\"))));\n+\n+        // when\n+        final Response response = given(spec)\n+                .header(\"Referer\", \"http://www.example.com\")\n+                .header(\"X-Forwarded-For\", \"193.168.244.1\")\n+                .header(\"User-Agent\", \"userAgent\")\n+                .header(\"Origin\", \"http://www.example.com\")\n+                .cookie(\"uids\", \"eyJ1aWRzIjp7ImdhbW9zaGkiOiJHTS1VSUQifX0=\")\n+                .body(jsonFrom(\"openrtb2/smartrtb/test-auction-smartrtb-request.json\"))\n+                .post(\"/openrtb2/auction\");\n+\n+        // then\n+        final String expectedAuctionResponse = openrtbAuctionResponseFrom(\n+                \"openrtb2/smartrtb/test-auction-smartrtb-response.json\",\n+                response, singletonList(\"smartrtb\"));\n+", "originalCommit": "df4607646fdb862a57588d11d819ec77d11b4259", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDYxOTA4Ng==", "url": "https://github.com/prebid/prebid-server-java/pull/596#discussion_r370619086", "bodyText": "Add header x-openrtb-version", "author": "DGarbar", "createdAt": "2020-01-24T12:54:54Z", "path": "src/test/java/org/prebid/server/it/SmartrtbTest.java", "diffHunk": "@@ -0,0 +1,65 @@\n+package org.prebid.server.it;\n+\n+import io.restassured.response.Response;\n+import java.io.IOException;\n+import org.json.JSONException;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.skyscreamer.jsonassert.JSONAssert;\n+import org.skyscreamer.jsonassert.JSONCompareMode;\n+import org.springframework.test.context.junit4.SpringRunner;\n+\n+import static com.github.tomakehurst.wiremock.client.WireMock.aResponse;\n+import static com.github.tomakehurst.wiremock.client.WireMock.equalTo;\n+import static com.github.tomakehurst.wiremock.client.WireMock.equalToJson;\n+import static com.github.tomakehurst.wiremock.client.WireMock.post;\n+import static com.github.tomakehurst.wiremock.client.WireMock.urlPathEqualTo;\n+import static io.restassured.RestAssured.given;\n+import static java.util.Collections.singletonList;\n+\n+@RunWith(SpringRunner.class)\n+public class SmartrtbTest extends IntegrationTest {\n+\n+    @Test\n+    public void openrtb2AuctionShouldRespondWithBidsFromSmartrtb() throws IOException, JSONException {\n+        // given\n+        // Smartrtb bid response for imp 001\n+        wireMockRule.stubFor(post(urlPathEqualTo(\"/smartrtb-exchange/1234\"))\n+                .withHeader(\"Accept\", equalTo(\"application/json\"))", "originalCommit": "df4607646fdb862a57588d11d819ec77d11b4259", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDYxOTg4NQ==", "url": "https://github.com/prebid/prebid-server-java/pull/596#discussion_r370619885", "bodyText": "You don't have request per imp. So this is also will be removed", "author": "DGarbar", "createdAt": "2020-01-24T12:56:55Z", "path": "src/test/java/org/prebid/server/it/SmartrtbTest.java", "diffHunk": "@@ -0,0 +1,65 @@\n+package org.prebid.server.it;\n+\n+import io.restassured.response.Response;\n+import java.io.IOException;\n+import org.json.JSONException;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.skyscreamer.jsonassert.JSONAssert;\n+import org.skyscreamer.jsonassert.JSONCompareMode;\n+import org.springframework.test.context.junit4.SpringRunner;\n+\n+import static com.github.tomakehurst.wiremock.client.WireMock.aResponse;\n+import static com.github.tomakehurst.wiremock.client.WireMock.equalTo;\n+import static com.github.tomakehurst.wiremock.client.WireMock.equalToJson;\n+import static com.github.tomakehurst.wiremock.client.WireMock.post;\n+import static com.github.tomakehurst.wiremock.client.WireMock.urlPathEqualTo;\n+import static io.restassured.RestAssured.given;\n+import static java.util.Collections.singletonList;\n+\n+@RunWith(SpringRunner.class)\n+public class SmartrtbTest extends IntegrationTest {\n+\n+    @Test\n+    public void openrtb2AuctionShouldRespondWithBidsFromSmartrtb() throws IOException, JSONException {\n+        // given\n+        // Smartrtb bid response for imp 001\n+        wireMockRule.stubFor(post(urlPathEqualTo(\"/smartrtb-exchange/1234\"))\n+                .withHeader(\"Accept\", equalTo(\"application/json\"))\n+                .withHeader(\"Content-Type\", equalTo(\"application/json;charset=UTF-8\"))\n+                .withRequestBody(equalToJson(jsonFrom(\"openrtb2/smartrtb/test-smartrtb-bid-request-1.json\")))\n+                .willReturn(aResponse().withBody(jsonFrom(\"openrtb2/smartrtb/test-smartrtb-bid-response-1.json\"))));\n+\n+        // Smartrtb bid response for imp 002\n+        wireMockRule.stubFor(post(urlPathEqualTo(\"/smartrtb-exchange/12345\"))", "originalCommit": "df4607646fdb862a57588d11d819ec77d11b4259", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDYyMDQzNg==", "url": "https://github.com/prebid/prebid-server-java/pull/596#discussion_r370620436", "bodyText": "They gather all parsed imps and create only one request.", "author": "DGarbar", "createdAt": "2020-01-24T12:58:21Z", "path": "src/main/java/org/prebid/server/bidder/smartrtb/SmartrtbBidder.java", "diffHunk": "@@ -0,0 +1,207 @@\n+package org.prebid.server.bidder.smartrtb;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.core.json.DecodeException;\n+import io.vertx.core.json.Json;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.smartrtb.ExtImpSmartrtb;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * SmartRTB {@link Bidder} implementation.\n+ */\n+public class SmartrtbBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpSmartrtb>> SMARTRTB_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpSmartrtb>>() {\n+            };\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+\n+    private final String endpointUrl;\n+\n+    public SmartrtbBidder(String endpointUrl) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<HttpRequest<BidRequest>> result = new ArrayList<>();\n+\n+        for (Imp imp : request.getImp()) {\n+            try {\n+                final ExtImpSmartrtb extImpSmartrtb = parseAndValidateImpExt(imp);\n+                final Imp processImp = processImp(imp);\n+                final String url = endpointUrl + \"/\" + extImpSmartrtb.getPublisherId();\n+                result.add(createSingleRequest(processImp, request, url));", "originalCommit": "df4607646fdb862a57588d11d819ec77d11b4259", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "fac4aee6106915df3aa7c6f6c8f11262fc5dc577", "url": "https://github.com/prebid/prebid-server-java/commit/fac4aee6106915df3aa7c6f6c8f11262fc5dc577", "message": "Changes to bidder's logic and tests", "committedDate": "2020-01-29T12:14:40Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjgzODAzOA==", "url": "https://github.com/prebid/prebid-server-java/pull/596#discussion_r372838038", "bodyText": "You can omit explicit naming for Jackson bc we have special settings that rename \"pubId\" to \"pub_id\"", "author": "DGarbar", "createdAt": "2020-01-30T09:26:02Z", "path": "src/main/java/org/prebid/server/proto/openrtb/ext/request/smartrtb/ExtImpSmartrtb.java", "diffHunk": "@@ -8,14 +8,15 @@\n @Value\n public class ExtImpSmartrtb {\n \n-    @JsonProperty(\"publisherId\")\n-    String publisherId;\n+    @JsonProperty(\"pub_id\")", "originalCommit": "fac4aee6106915df3aa7c6f6c8f11262fc5dc577", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjg0MDY3OQ==", "url": "https://github.com/prebid/prebid-server-java/pull/596#discussion_r372840679", "bodyText": "same. You can omit explicit naming for Jackson bc we have special settings that rename \"pubId\" to \"pub_id\"", "author": "DGarbar", "createdAt": "2020-01-30T09:31:24Z", "path": "src/main/java/org/prebid/server/proto/openrtb/ext/request/smartrtb/ExtRequestSmartrtb.java", "diffHunk": "@@ -0,0 +1,19 @@\n+package org.prebid.server.proto.openrtb.ext.request.smartrtb;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import lombok.AllArgsConstructor;\n+import lombok.Value;\n+\n+@AllArgsConstructor(staticName = \"of\")\n+@Value\n+public class ExtRequestSmartrtb {\n+\n+    @JsonProperty(\"pub_id\")", "originalCommit": "fac4aee6106915df3aa7c6f6c8f11262fc5dc577", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjg0MjY0OQ==", "url": "https://github.com/prebid/prebid-server-java/pull/596#discussion_r372842649", "bodyText": "use isBlank methods.", "author": "DGarbar", "createdAt": "2020-01-30T09:35:38Z", "path": "src/main/java/org/prebid/server/bidder/smartrtb/SmartrtbBidder.java", "diffHunk": "@@ -55,96 +56,83 @@ public SmartrtbBidder(String endpointUrl) {\n     @Override\n     public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n         final List<BidderError> errors = new ArrayList<>();\n-        final List<HttpRequest<BidRequest>> result = new ArrayList<>();\n+        final List<Imp> validImps = new ArrayList<>();\n+        String pubId = null;\n+        String zoneId = null;\n+        Boolean forceBid = null;\n \n         for (Imp imp : request.getImp()) {\n             try {\n-                final ExtImpSmartrtb extImpSmartrtb = parseAndValidateImpExt(imp);\n-                final Imp processImp = processImp(imp);\n-                final String url = endpointUrl + \"/\" + extImpSmartrtb.getPublisherId();\n-                result.add(createSingleRequest(processImp, request, url));\n+                final Imp validImp = validateImp(imp);\n+                final ExtImpSmartrtb extImp = parseImpExt(imp);\n+\n+                if (StringUtils.isEmpty(pubId) && StringUtils.isNoneEmpty(extImp.getPubId())) {", "originalCommit": "fac4aee6106915df3aa7c6f6c8f11262fc5dc577", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjg0NDY4NQ==", "url": "https://github.com/prebid/prebid-server-java/pull/596#discussion_r372844685", "bodyText": "I did not find corresponding logic in GO", "author": "DGarbar", "createdAt": "2020-01-30T09:39:50Z", "path": "src/main/java/org/prebid/server/bidder/smartrtb/SmartrtbBidder.java", "diffHunk": "@@ -55,96 +56,83 @@ public SmartrtbBidder(String endpointUrl) {\n     @Override\n     public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n         final List<BidderError> errors = new ArrayList<>();\n-        final List<HttpRequest<BidRequest>> result = new ArrayList<>();\n+        final List<Imp> validImps = new ArrayList<>();\n+        String pubId = null;\n+        String zoneId = null;\n+        Boolean forceBid = null;\n \n         for (Imp imp : request.getImp()) {\n             try {\n-                final ExtImpSmartrtb extImpSmartrtb = parseAndValidateImpExt(imp);\n-                final Imp processImp = processImp(imp);\n-                final String url = endpointUrl + \"/\" + extImpSmartrtb.getPublisherId();\n-                result.add(createSingleRequest(processImp, request, url));\n+                final Imp validImp = validateImp(imp);\n+                final ExtImpSmartrtb extImp = parseImpExt(imp);\n+\n+                if (StringUtils.isEmpty(pubId) && StringUtils.isNoneEmpty(extImp.getPubId())) {\n+                    pubId = extImp.getPubId();\n+                }\n+\n+                zoneId = extImp.getZoneId();\n+                final Imp updatedImp = StringUtils.isNotEmpty(zoneId)\n+                        ? validImp.toBuilder().tagid(zoneId).build()\n+                        : imp;\n+                validImps.add(updatedImp);\n+\n             } catch (PreBidException e) {\n                 errors.add(BidderError.badInput(e.getMessage()));\n             }\n         }\n \n-        return Result.of(result, errors);\n-    }\n-\n-    private HttpRequest<BidRequest> createSingleRequest(Imp imp, BidRequest request, String url) {\n-        final BidRequest outgoingRequest = request.toBuilder().imp(Collections.singletonList(imp)).build();\n+        if (StringUtils.isEmpty(pubId)) {\n+            errors.add(BidderError.badInput(\"Cannot infer publisher ID from bid ext\"));\n+            return Result.of(null, errors);\n+        } else {\n+            ExtRequestSmartrtb.of(pubId, zoneId, forceBid);\n+        }\n \n+        final BidRequest outgoingRequest = request.toBuilder().imp(validImps).build();\n         final String body = Json.encode(outgoingRequest);\n-\n-        return HttpRequest.<BidRequest>builder()\n-                .method(HttpMethod.POST)\n-                .uri(url)\n-                .headers(HttpUtil.headers())\n-                .body(body)\n-                .payload(outgoingRequest)\n-                .build();\n+        final String requestUrl = endpointUrl + pubId;\n+        final MultiMap headers = resolveHeaders(request.getDevice());\n+\n+        return Result.of(Collections.singletonList(\n+                HttpRequest.<BidRequest>builder()\n+                        .method(HttpMethod.POST)\n+                        .uri(requestUrl)\n+                        .headers(headers)\n+                        .payload(outgoingRequest)\n+                        .body(body)\n+                        .build()),\n+                errors);\n     }\n \n-    /**\n-     * Applogy Bidder required to have Impression.ext {@link ExtImpSmartrtb}\n-     * {@link ExtImpSmartrtb} is required to have publisher ID, zone ID\n-     **/\n-    private ExtImpSmartrtb parseAndValidateImpExt(Imp imp) {\n-        final ExtImpSmartrtb extImpSmartrtb;\n+    private Imp validateImp(Imp imp) {\n         if (imp.getBanner() == null && imp.getVideo() == null) {\n             throw new PreBidException(\"SmartRTB only supports banner and video\");\n         }\n-\n-        extImpSmartrtb = parseExtSmartrtb(imp);\n-\n-        validateImp(extImpSmartrtb);\n-\n-        return extImpSmartrtb;\n-    }\n-\n-    private void validateImp(ExtImpSmartrtb extImpSmartrtb) {\n-        if (extImpSmartrtb != null) {\n-            if (StringUtils.isBlank(extImpSmartrtb.getPublisherId())) {\n-                throw new PreBidException(\"Publisher ID is empty\");\n-            }\n-            if (StringUtils.isBlank(extImpSmartrtb.getZoneId())) {\n-                throw new PreBidException(\"Zone ID is empty\");\n-            }\n-        }\n+        return imp;\n     }\n \n-    private ExtImpSmartrtb parseExtSmartrtb(Imp imp) {\n-        ExtImpSmartrtb extImpSmartrtb;\n+    private ExtImpSmartrtb parseImpExt(Imp imp) {\n         try {\n-            extImpSmartrtb = Json.mapper.convertValue(imp.getExt(), SMARTRTB_EXT_TYPE_REFERENCE)\n-                    .getBidder();\n+            return Json.mapper.convertValue(imp.getExt(), SMARTRTB_EXT_TYPE_REFERENCE).getBidder();\n         } catch (IllegalArgumentException e) {\n-            throw new PreBidException(e.getMessage());\n+            throw new PreBidException(e.getMessage(), e);\n         }\n-        return extImpSmartrtb;\n     }\n \n-    private Imp processImp(Imp imp) {\n-        if (imp.getBanner() == null && imp.getVideo() == null) {\n-            throw new PreBidException(\"SmartRTB only supports banner and video\");\n-        }\n-\n-        final Banner banner = imp.getBanner();\n-        if (banner != null) {\n-            if (banner.getH() == null || banner.getW() == null || banner.getH() == 0 || banner.getW() == 0) {\n-                if (CollectionUtils.isEmpty(banner.getFormat())) {\n-                    throw new PreBidException(\"banner size information missing\");\n-                }\n-\n-                final Format firstFormat = banner.getFormat().get(0);\n-                final Banner modifiedBanner = banner.toBuilder()\n-                        .h(firstFormat.getH())\n-                        .w(firstFormat.getW())\n-                        .build();\n-                return imp.toBuilder().banner(modifiedBanner).build();\n+    private static MultiMap resolveHeaders(Device device) {\n+        final MultiMap headers = HttpUtil.headers()\n+                .add(\"x-openrtb-version\", \"2.5\");\n+        if (device != null) {\n+            HttpUtil.addHeaderIfValueIsNotEmpty(headers, \"User-Agent\", device.getUa());\n+            HttpUtil.addHeaderIfValueIsNotEmpty(headers, \"X-Forwarded-For\", device.getIp());\n+            HttpUtil.addHeaderIfValueIsNotEmpty(headers, \"Accept-Language\", device.getLanguage());\n+\n+            final Integer dnt = device.getDnt();\n+            if (dnt != null) {\n+                headers.add(\"DNT\", dnt.toString());\n             }\n         }", "originalCommit": "fac4aee6106915df3aa7c6f6c8f11262fc5dc577", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjg0NjMyNw==", "url": "https://github.com/prebid/prebid-server-java/pull/596#discussion_r372846327", "bodyText": "You don't need this values.\nThey insert only pubId in req.ext", "author": "DGarbar", "createdAt": "2020-01-30T09:43:10Z", "path": "src/main/java/org/prebid/server/bidder/smartrtb/SmartrtbBidder.java", "diffHunk": "@@ -55,96 +56,83 @@ public SmartrtbBidder(String endpointUrl) {\n     @Override\n     public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n         final List<BidderError> errors = new ArrayList<>();\n-        final List<HttpRequest<BidRequest>> result = new ArrayList<>();\n+        final List<Imp> validImps = new ArrayList<>();\n+        String pubId = null;\n+        String zoneId = null;\n+        Boolean forceBid = null;\n ", "originalCommit": "fac4aee6106915df3aa7c6f6c8f11262fc5dc577", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjg1MTE2OQ==", "url": "https://github.com/prebid/prebid-server-java/pull/596#discussion_r372851169", "bodyText": "You need to change default behavior of makeBids method.\nPlease see TripleliftBidder.makeBids to have an idea how to do this.", "author": "DGarbar", "createdAt": "2020-01-30T09:52:36Z", "path": "src/main/java/org/prebid/server/bidder/smartrtb/SmartrtbBidder.java", "diffHunk": "@@ -55,96 +56,83 @@ public SmartrtbBidder(String endpointUrl) {\n     @Override\n     public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n         final List<BidderError> errors = new ArrayList<>();\n-        final List<HttpRequest<BidRequest>> result = new ArrayList<>();\n+        final List<Imp> validImps = new ArrayList<>();\n+        String pubId = null;\n+        String zoneId = null;\n+        Boolean forceBid = null;\n \n         for (Imp imp : request.getImp()) {\n             try {\n-                final ExtImpSmartrtb extImpSmartrtb = parseAndValidateImpExt(imp);\n-                final Imp processImp = processImp(imp);\n-                final String url = endpointUrl + \"/\" + extImpSmartrtb.getPublisherId();\n-                result.add(createSingleRequest(processImp, request, url));\n+                final Imp validImp = validateImp(imp);\n+                final ExtImpSmartrtb extImp = parseImpExt(imp);\n+\n+                if (StringUtils.isEmpty(pubId) && StringUtils.isNoneEmpty(extImp.getPubId())) {\n+                    pubId = extImp.getPubId();\n+                }\n+\n+                zoneId = extImp.getZoneId();\n+                final Imp updatedImp = StringUtils.isNotEmpty(zoneId)\n+                        ? validImp.toBuilder().tagid(zoneId).build()\n+                        : imp;\n+                validImps.add(updatedImp);\n+\n             } catch (PreBidException e) {\n                 errors.add(BidderError.badInput(e.getMessage()));\n             }\n         }\n \n-        return Result.of(result, errors);\n-    }\n-\n-    private HttpRequest<BidRequest> createSingleRequest(Imp imp, BidRequest request, String url) {\n-        final BidRequest outgoingRequest = request.toBuilder().imp(Collections.singletonList(imp)).build();\n+        if (StringUtils.isEmpty(pubId)) {\n+            errors.add(BidderError.badInput(\"Cannot infer publisher ID from bid ext\"));\n+            return Result.of(null, errors);\n+        } else {\n+            ExtRequestSmartrtb.of(pubId, zoneId, forceBid);\n+        }\n \n+        final BidRequest outgoingRequest = request.toBuilder().imp(validImps).build();\n         final String body = Json.encode(outgoingRequest);\n-\n-        return HttpRequest.<BidRequest>builder()\n-                .method(HttpMethod.POST)\n-                .uri(url)\n-                .headers(HttpUtil.headers())\n-                .body(body)\n-                .payload(outgoingRequest)\n-                .build();\n+        final String requestUrl = endpointUrl + pubId;\n+        final MultiMap headers = resolveHeaders(request.getDevice());\n+\n+        return Result.of(Collections.singletonList(\n+                HttpRequest.<BidRequest>builder()\n+                        .method(HttpMethod.POST)\n+                        .uri(requestUrl)\n+                        .headers(headers)\n+                        .payload(outgoingRequest)\n+                        .body(body)\n+                        .build()),\n+                errors);\n     }\n \n-    /**\n-     * Applogy Bidder required to have Impression.ext {@link ExtImpSmartrtb}\n-     * {@link ExtImpSmartrtb} is required to have publisher ID, zone ID\n-     **/\n-    private ExtImpSmartrtb parseAndValidateImpExt(Imp imp) {\n-        final ExtImpSmartrtb extImpSmartrtb;\n+    private Imp validateImp(Imp imp) {\n         if (imp.getBanner() == null && imp.getVideo() == null) {\n             throw new PreBidException(\"SmartRTB only supports banner and video\");\n         }\n-\n-        extImpSmartrtb = parseExtSmartrtb(imp);\n-\n-        validateImp(extImpSmartrtb);\n-\n-        return extImpSmartrtb;\n-    }\n-\n-    private void validateImp(ExtImpSmartrtb extImpSmartrtb) {\n-        if (extImpSmartrtb != null) {\n-            if (StringUtils.isBlank(extImpSmartrtb.getPublisherId())) {\n-                throw new PreBidException(\"Publisher ID is empty\");\n-            }\n-            if (StringUtils.isBlank(extImpSmartrtb.getZoneId())) {\n-                throw new PreBidException(\"Zone ID is empty\");\n-            }\n-        }\n+        return imp;\n     }\n \n-    private ExtImpSmartrtb parseExtSmartrtb(Imp imp) {\n-        ExtImpSmartrtb extImpSmartrtb;\n+    private ExtImpSmartrtb parseImpExt(Imp imp) {\n         try {\n-            extImpSmartrtb = Json.mapper.convertValue(imp.getExt(), SMARTRTB_EXT_TYPE_REFERENCE)\n-                    .getBidder();\n+            return Json.mapper.convertValue(imp.getExt(), SMARTRTB_EXT_TYPE_REFERENCE).getBidder();\n         } catch (IllegalArgumentException e) {\n-            throw new PreBidException(e.getMessage());\n+            throw new PreBidException(e.getMessage(), e);\n         }\n-        return extImpSmartrtb;\n     }\n \n-    private Imp processImp(Imp imp) {\n-        if (imp.getBanner() == null && imp.getVideo() == null) {\n-            throw new PreBidException(\"SmartRTB only supports banner and video\");\n-        }\n-\n-        final Banner banner = imp.getBanner();\n-        if (banner != null) {\n-            if (banner.getH() == null || banner.getW() == null || banner.getH() == 0 || banner.getW() == 0) {\n-                if (CollectionUtils.isEmpty(banner.getFormat())) {\n-                    throw new PreBidException(\"banner size information missing\");\n-                }\n-\n-                final Format firstFormat = banner.getFormat().get(0);\n-                final Banner modifiedBanner = banner.toBuilder()\n-                        .h(firstFormat.getH())\n-                        .w(firstFormat.getW())\n-                        .build();\n-                return imp.toBuilder().banner(modifiedBanner).build();\n+    private static MultiMap resolveHeaders(Device device) {\n+        final MultiMap headers = HttpUtil.headers()\n+                .add(\"x-openrtb-version\", \"2.5\");\n+        if (device != null) {\n+            HttpUtil.addHeaderIfValueIsNotEmpty(headers, \"User-Agent\", device.getUa());\n+            HttpUtil.addHeaderIfValueIsNotEmpty(headers, \"X-Forwarded-For\", device.getIp());\n+            HttpUtil.addHeaderIfValueIsNotEmpty(headers, \"Accept-Language\", device.getLanguage());\n+\n+            final Integer dnt = device.getDnt();\n+            if (dnt != null) {\n+                headers.add(\"DNT\", dnt.toString());\n             }\n         }\n-        return imp;\n+        return headers;\n     }\n \n     @Override", "originalCommit": "fac4aee6106915df3aa7c6f6c8f11262fc5dc577", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjg1NDAzNg==", "url": "https://github.com/prebid/prebid-server-java/pull/596#discussion_r372854036", "bodyText": "False", "author": "DGarbar", "createdAt": "2020-01-30T09:57:59Z", "path": "src/test/java/org/prebid/server/bidder/smartrtb/SmartrtbBidderTest.java", "diffHunk": "@@ -129,112 +73,81 @@ public void makeHttpRequestsShouldSkipInvalidImpressionAndAddError() {\n                         \"SmartRTB only supports banner and video\"));\n         assertThat(result.getValue()).hasSize(1)\n                 .extracting(httpRequest -> mapper.readValue(httpRequest.getBody(), BidRequest.class))\n-                .flatExtracting(BidRequest::getImp)\n-                .containsOnly(imp);\n+                .flatExtracting(BidRequest::getImp);\n     }\n \n     @Test\n-    public void makeHttpRequestShouldReturnErrorIfImpFormatIsNull() {\n+    public void  makeHttpRequestsShouldReturnErrorIfImpExtCouldNotBeParsed() {\n         // given\n         final BidRequest bidRequest = givenBidRequest(\n                 impBuilder -> impBuilder\n-                        .banner(Banner.builder()\n-                                .w(0)\n-                                .h(0)\n-                                .build()));\n-\n-        // when\n-        final Result<List<HttpRequest<BidRequest>>> result = smartrtbBidder.makeHttpRequests(bidRequest);\n-\n-        // then\n-        assertThat(result.getErrors()).hasSize(1)\n-                .containsOnly(BidderError.badInput(\"banner size information missing\"));\n-        assertThat(result.getValue()).isEmpty();\n-    }\n-\n-    @Test\n-    public void makeHttpRequestShouldReturnErrorIfImpFormatIsEmpty() {\n-        // given\n-        final BidRequest bidRequest = givenBidRequest(\n-                impBuilder -> impBuilder\n-                        .banner(Banner.builder()\n-                                .format(Collections.emptyList())\n-                                .w(0)\n-                                .h(0)\n-                                .build()));\n-\n+                        .ext(mapper.valueToTree(ExtPrebid.of(null, mapper.createArrayNode()))));\n         // when\n         final Result<List<HttpRequest<BidRequest>>> result = smartrtbBidder.makeHttpRequests(bidRequest);\n \n         // then\n-        assertThat(result.getErrors()).hasSize(1)\n-                .containsOnly(BidderError.badInput(\"banner size information missing\"));\n-        assertThat(result.getValue()).isEmpty();\n+        assertThat(result.getErrors()).hasSize(2);\n+        assertThat(result.getErrors().get(1).getMessage()).startsWith(\"Cannot infer publisher ID from bid ext\");\n+        assertThat(result.getErrors().get(0).getMessage()).startsWith(\"Cannot deserialize instance\");\n     }\n \n     @Test\n-    public void makeHttpRequestsShouldNotChangeBannerWidthAndHeightIfPresent() {\n+    public void makeHttpRequestsShouldCreateCorrectURL() {\n         // given\n         final BidRequest bidRequest = givenBidRequest(\n                 impBuilder -> impBuilder\n                         .banner(Banner.builder()\n                                 .format(singletonList(Format.builder().w(300).h(500).build()))\n-                                .w(200)\n-                                .h(150)\n                                 .build()));\n \n         // when\n         final Result<List<HttpRequest<BidRequest>>> result = smartrtbBidder.makeHttpRequests(bidRequest);\n \n         // then\n         assertThat(result.getErrors()).isEmpty();\n-        assertThat(result.getValue()).hasSize(1)\n-                .extracting(httpRequest -> mapper.readValue(httpRequest.getBody(), BidRequest.class))\n-                .flatExtracting(BidRequest::getImp)\n-                .extracting(Imp::getBanner)\n-                .extracting(Banner::getW, Banner::getH)\n-                .containsOnly(tuple(200, 150));\n+        assertThat(result.getValue()).hasSize(1);\n+        assertThat(result.getValue().get(0).getUri()).isEqualTo(ENDPOINT_URL + \"publisherID\");\n     }\n \n     @Test\n-    public void makeHttpRequestsShouldSetBannerWidthAndHeightFromFirstFormatIfEmpty() {\n+    public void makeHttpRequestsShouldSetExpectedRequestUrlAndDefaultHeaders() {\n         // given\n-        final BidRequest bidRequest = givenBidRequest(\n-                impBuilder -> impBuilder\n-                        .banner(Banner.builder()\n-                                .format(Arrays.asList(Format.builder().w(300).h(500).build(),\n-                                        Format.builder().w(450).h(150).build()))\n-                                .build()));\n+        final BidRequest bidRequest = givenBidRequest(identity());\n \n         // when\n         final Result<List<HttpRequest<BidRequest>>> result = smartrtbBidder.makeHttpRequests(bidRequest);\n \n         // then\n         assertThat(result.getErrors()).isEmpty();\n         assertThat(result.getValue()).hasSize(1)\n-                .extracting(httpRequest -> mapper.readValue(httpRequest.getBody(), BidRequest.class))\n-                .flatExtracting(BidRequest::getImp)\n-                .extracting(Imp::getBanner)\n-                .extracting(Banner::getW, Banner::getH)\n-                .containsOnly(tuple(300, 500));\n+                .extracting(HttpRequest::getUri)\n+                .containsOnly(\"https://test.endpoint.com/publisherID\");\n+        assertThat(result.getValue().get(0).getHeaders()).isNotNull()\n+                .extracting(Map.Entry::getKey, Map.Entry::getValue)\n+                .containsOnly(tuple(\"x-openrtb-version\", \"2.5\"),\n+                        tuple(HttpUtil.CONTENT_TYPE_HEADER.toString(), HttpUtil.APPLICATION_JSON_CONTENT_TYPE),\n+                        tuple(HttpUtil.ACCEPT_HEADER.toString(), HttpHeaderValues.APPLICATION_JSON.toString()));\n     }\n \n     @Test\n-    public void makeHttpRequestsShouldCreateCorrectURL() {\n+    public void makeHttpRequestsShouldSetAdditionalHeaders() {\n         // given\n         final BidRequest bidRequest = givenBidRequest(\n-                impBuilder -> impBuilder\n-                        .banner(Banner.builder()\n-                                .format(singletonList(Format.builder().w(300).h(500).build()))\n-                                .build()));\n+                requestBuilder -> requestBuilder\n+                        .device(Device.builder().ua(\"ua\").ip(\"ip\").dnt(1).language(\"en\").build()),\n+                identity());\n \n         // when\n         final Result<List<HttpRequest<BidRequest>>> result = smartrtbBidder.makeHttpRequests(bidRequest);\n \n         // then\n         assertThat(result.getErrors()).isEmpty();\n-        assertThat(result.getValue()).hasSize(1);\n-        assertThat(result.getValue().get(0).getUri()).isEqualTo(ENDPOINT_URL + \"/publisherId\");\n+        assertThat(result.getValue().get(0).getHeaders()).isNotNull()\n+                .extracting(Map.Entry::getKey, Map.Entry::getValue)\n+                .contains(tuple(HttpUtil.USER_AGENT_HEADER.toString(), \"ua\"),\n+                        tuple(HttpUtil.X_FORWARDED_FOR_HEADER.toString(), \"ip\"),\n+                        tuple(HttpUtil.DNT_HEADER.toString(), \"1\"),\n+                        tuple(HttpUtil.ACCEPT_LANGUAGE_HEADER.toString(), \"en\"));", "originalCommit": "fac4aee6106915df3aa7c6f6c8f11262fc5dc577", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjg1NTIwMw==", "url": "https://github.com/prebid/prebid-server-java/pull/596#discussion_r372855203", "bodyText": "What are you testing in this case ?", "author": "DGarbar", "createdAt": "2020-01-30T10:00:04Z", "path": "src/test/java/org/prebid/server/bidder/smartrtb/SmartrtbBidderTest.java", "diffHunk": "@@ -129,112 +73,81 @@ public void makeHttpRequestsShouldSkipInvalidImpressionAndAddError() {\n                         \"SmartRTB only supports banner and video\"));\n         assertThat(result.getValue()).hasSize(1)\n                 .extracting(httpRequest -> mapper.readValue(httpRequest.getBody(), BidRequest.class))\n-                .flatExtracting(BidRequest::getImp)\n-                .containsOnly(imp);\n+                .flatExtracting(BidRequest::getImp);", "originalCommit": "fac4aee6106915df3aa7c6f6c8f11262fc5dc577", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjg1NTUwMA==", "url": "https://github.com/prebid/prebid-server-java/pull/596#discussion_r372855500", "bodyText": "Ctrl + Alt + L", "author": "DGarbar", "createdAt": "2020-01-30T10:00:42Z", "path": "src/test/java/org/prebid/server/bidder/smartrtb/SmartrtbBidderTest.java", "diffHunk": "@@ -129,112 +73,81 @@ public void makeHttpRequestsShouldSkipInvalidImpressionAndAddError() {\n                         \"SmartRTB only supports banner and video\"));\n         assertThat(result.getValue()).hasSize(1)\n                 .extracting(httpRequest -> mapper.readValue(httpRequest.getBody(), BidRequest.class))\n-                .flatExtracting(BidRequest::getImp)\n-                .containsOnly(imp);\n+                .flatExtracting(BidRequest::getImp);\n     }\n \n     @Test\n-    public void makeHttpRequestShouldReturnErrorIfImpFormatIsNull() {\n+    public void  makeHttpRequestsShouldReturnErrorIfImpExtCouldNotBeParsed() {", "originalCommit": "fac4aee6106915df3aa7c6f6c8f11262fc5dc577", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjg1NjE4MQ==", "url": "https://github.com/prebid/prebid-server-java/pull/596#discussion_r372856181", "bodyText": "Add test for validate 'req.ext' change.", "author": "DGarbar", "createdAt": "2020-01-30T10:02:04Z", "path": "src/test/java/org/prebid/server/bidder/smartrtb/SmartrtbBidderTest.java", "diffHunk": "@@ -38,7 +41,7 @@\n \n public class SmartrtbBidderTest extends VertxTest {", "originalCommit": "fac4aee6106915df3aa7c6f6c8f11262fc5dc577", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "277b4731de295429b70d74c00c08fd2155aac13f", "url": "https://github.com/prebid/prebid-server-java/commit/277b4731de295429b70d74c00c08fd2155aac13f", "message": "Changes to method makeBids and tests", "committedDate": "2020-01-31T15:27:02Z", "type": "commit"}, {"oid": "64de8ca9af47047e360e8827816b6186f3212786", "url": "https://github.com/prebid/prebid-server-java/commit/64de8ca9af47047e360e8827816b6186f3212786", "message": "Small changes to ExtImpSmartrtb and ExtRequestSmartrtb", "committedDate": "2020-01-31T16:26:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDIwMTkzMg==", "url": "https://github.com/prebid/prebid-server-java/pull/596#discussion_r374201932", "bodyText": "httpCall.getResponse().getStatusCode() - make variable", "author": "DGarbar", "createdAt": "2020-02-03T16:25:45Z", "path": "src/main/java/org/prebid/server/bidder/smartrtb/SmartrtbBidder.java", "diffHunk": "@@ -119,73 +120,66 @@ private ExtImpSmartrtb parseImpExt(Imp imp) {\n         }\n     }\n \n-    private static MultiMap resolveHeaders(Device device) {\n-        final MultiMap headers = HttpUtil.headers()\n-                .add(\"x-openrtb-version\", \"2.5\");\n-        if (device != null) {\n-            HttpUtil.addHeaderIfValueIsNotEmpty(headers, \"User-Agent\", device.getUa());\n-            HttpUtil.addHeaderIfValueIsNotEmpty(headers, \"X-Forwarded-For\", device.getIp());\n-            HttpUtil.addHeaderIfValueIsNotEmpty(headers, \"Accept-Language\", device.getLanguage());\n-\n-            final Integer dnt = device.getDnt();\n-            if (dnt != null) {\n-                headers.add(\"DNT\", dnt.toString());\n-            }\n-        }\n-        return headers;\n-    }\n-\n     @Override\n     public Result<List<BidderBid>> makeBids(HttpCall<BidRequest> httpCall, BidRequest bidRequest) {\n         if (httpCall.getResponse().getStatusCode() == HttpResponseStatus.NO_CONTENT.code()) {\n             return Result.of(Collections.emptyList(), Collections.emptyList());\n+        } else if (httpCall.getResponse().getStatusCode() == HttpResponseStatus.BAD_REQUEST.code()) {", "originalCommit": "277b4731de295429b70d74c00c08fd2155aac13f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDIwMjg5Mg==", "url": "https://github.com/prebid/prebid-server-java/pull/596#discussion_r374202892", "bodyText": "remove null", "author": "DGarbar", "createdAt": "2020-02-03T16:27:17Z", "path": "src/main/java/org/prebid/server/bidder/smartrtb/SmartrtbBidder.java", "diffHunk": "@@ -119,73 +120,66 @@ private ExtImpSmartrtb parseImpExt(Imp imp) {\n         }\n     }\n \n-    private static MultiMap resolveHeaders(Device device) {\n-        final MultiMap headers = HttpUtil.headers()\n-                .add(\"x-openrtb-version\", \"2.5\");\n-        if (device != null) {\n-            HttpUtil.addHeaderIfValueIsNotEmpty(headers, \"User-Agent\", device.getUa());\n-            HttpUtil.addHeaderIfValueIsNotEmpty(headers, \"X-Forwarded-For\", device.getIp());\n-            HttpUtil.addHeaderIfValueIsNotEmpty(headers, \"Accept-Language\", device.getLanguage());\n-\n-            final Integer dnt = device.getDnt();\n-            if (dnt != null) {\n-                headers.add(\"DNT\", dnt.toString());\n-            }\n-        }\n-        return headers;\n-    }\n-\n     @Override\n     public Result<List<BidderBid>> makeBids(HttpCall<BidRequest> httpCall, BidRequest bidRequest) {\n         if (httpCall.getResponse().getStatusCode() == HttpResponseStatus.NO_CONTENT.code()) {\n             return Result.of(Collections.emptyList(), Collections.emptyList());\n+        } else if (httpCall.getResponse().getStatusCode() == HttpResponseStatus.BAD_REQUEST.code()) {\n+            return Result.emptyWithError(BidderError.badInput(\"Invalid request.\"));\n+        } else if (httpCall.getResponse().getStatusCode() != HttpResponseStatus.OK.code()) {\n+            return Result.emptyWithError(BidderError.badServerResponse(String.format(\"Unexpected HTTP status %s.\",\n+                    httpCall.getResponse().getStatusCode())));\n         }\n \n+        final BidResponse bidResponse;\n         try {\n-            final BidResponse bidResponse = Json.decodeValue(httpCall.getResponse().getBody(), BidResponse.class);\n-            return extractBids(httpCall.getRequest().getPayload(), bidResponse);\n-        } catch (DecodeException e) {\n+            bidResponse = decodeBodyToBidResponse(httpCall);\n+        } catch (PreBidException e) {\n             return Result.emptyWithError(BidderError.badServerResponse(e.getMessage()));\n         }\n-    }\n \n-    private static Result<List<BidderBid>> extractBids(BidRequest bidRequest, BidResponse bidResponse) {\n-        if (bidResponse == null || bidResponse.getSeatbid() == null) {\n-            return Result.of(Collections.emptyList(), Collections.emptyList());\n+        final List<BidderBid> bidderBids = new ArrayList<>();\n+        for (SeatBid seatBid : bidResponse.getSeatbid()) {\n+            for (Bid bid : seatBid.getBid()) {\n+                final ObjectNode ext = bid.getExt();\n+                if (ext == null) {\n+                    return Result.emptyWithError(BidderError.badServerResponse(String.format(\n+                            \"Invalid bid extension from endpoint.\")));\n+                }\n+                try {\n+                    final SmartrtbResponseExt smartrtbResponseExt = Json.mapper.treeToValue(ext,\n+                            SmartrtbResponseExt.class);\n+\n+                    BidType bidType = null;", "originalCommit": "277b4731de295429b70d74c00c08fd2155aac13f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDIwMzM0NQ==", "url": "https://github.com/prebid/prebid-server-java/pull/596#discussion_r374203345", "bodyText": "String.format is redundant", "author": "DGarbar", "createdAt": "2020-02-03T16:27:59Z", "path": "src/main/java/org/prebid/server/bidder/smartrtb/SmartrtbBidder.java", "diffHunk": "@@ -119,73 +120,66 @@ private ExtImpSmartrtb parseImpExt(Imp imp) {\n         }\n     }\n \n-    private static MultiMap resolveHeaders(Device device) {\n-        final MultiMap headers = HttpUtil.headers()\n-                .add(\"x-openrtb-version\", \"2.5\");\n-        if (device != null) {\n-            HttpUtil.addHeaderIfValueIsNotEmpty(headers, \"User-Agent\", device.getUa());\n-            HttpUtil.addHeaderIfValueIsNotEmpty(headers, \"X-Forwarded-For\", device.getIp());\n-            HttpUtil.addHeaderIfValueIsNotEmpty(headers, \"Accept-Language\", device.getLanguage());\n-\n-            final Integer dnt = device.getDnt();\n-            if (dnt != null) {\n-                headers.add(\"DNT\", dnt.toString());\n-            }\n-        }\n-        return headers;\n-    }\n-\n     @Override\n     public Result<List<BidderBid>> makeBids(HttpCall<BidRequest> httpCall, BidRequest bidRequest) {\n         if (httpCall.getResponse().getStatusCode() == HttpResponseStatus.NO_CONTENT.code()) {\n             return Result.of(Collections.emptyList(), Collections.emptyList());\n+        } else if (httpCall.getResponse().getStatusCode() == HttpResponseStatus.BAD_REQUEST.code()) {\n+            return Result.emptyWithError(BidderError.badInput(\"Invalid request.\"));\n+        } else if (httpCall.getResponse().getStatusCode() != HttpResponseStatus.OK.code()) {\n+            return Result.emptyWithError(BidderError.badServerResponse(String.format(\"Unexpected HTTP status %s.\",\n+                    httpCall.getResponse().getStatusCode())));\n         }\n \n+        final BidResponse bidResponse;\n         try {\n-            final BidResponse bidResponse = Json.decodeValue(httpCall.getResponse().getBody(), BidResponse.class);\n-            return extractBids(httpCall.getRequest().getPayload(), bidResponse);\n-        } catch (DecodeException e) {\n+            bidResponse = decodeBodyToBidResponse(httpCall);\n+        } catch (PreBidException e) {\n             return Result.emptyWithError(BidderError.badServerResponse(e.getMessage()));\n         }\n-    }\n \n-    private static Result<List<BidderBid>> extractBids(BidRequest bidRequest, BidResponse bidResponse) {\n-        if (bidResponse == null || bidResponse.getSeatbid() == null) {\n-            return Result.of(Collections.emptyList(), Collections.emptyList());\n+        final List<BidderBid> bidderBids = new ArrayList<>();\n+        for (SeatBid seatBid : bidResponse.getSeatbid()) {\n+            for (Bid bid : seatBid.getBid()) {\n+                final ObjectNode ext = bid.getExt();\n+                if (ext == null) {\n+                    return Result.emptyWithError(BidderError.badServerResponse(String.format(", "originalCommit": "277b4731de295429b70d74c00c08fd2155aac13f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDIwNTY4MA==", "url": "https://github.com/prebid/prebid-server-java/pull/596#discussion_r374205680", "bodyText": "You can extract this and ext==null to another validation method, to make it cleaner", "author": "DGarbar", "createdAt": "2020-02-03T16:31:52Z", "path": "src/main/java/org/prebid/server/bidder/smartrtb/SmartrtbBidder.java", "diffHunk": "@@ -119,73 +120,66 @@ private ExtImpSmartrtb parseImpExt(Imp imp) {\n         }\n     }\n \n-    private static MultiMap resolveHeaders(Device device) {\n-        final MultiMap headers = HttpUtil.headers()\n-                .add(\"x-openrtb-version\", \"2.5\");\n-        if (device != null) {\n-            HttpUtil.addHeaderIfValueIsNotEmpty(headers, \"User-Agent\", device.getUa());\n-            HttpUtil.addHeaderIfValueIsNotEmpty(headers, \"X-Forwarded-For\", device.getIp());\n-            HttpUtil.addHeaderIfValueIsNotEmpty(headers, \"Accept-Language\", device.getLanguage());\n-\n-            final Integer dnt = device.getDnt();\n-            if (dnt != null) {\n-                headers.add(\"DNT\", dnt.toString());\n-            }\n-        }\n-        return headers;\n-    }\n-\n     @Override\n     public Result<List<BidderBid>> makeBids(HttpCall<BidRequest> httpCall, BidRequest bidRequest) {\n         if (httpCall.getResponse().getStatusCode() == HttpResponseStatus.NO_CONTENT.code()) {\n             return Result.of(Collections.emptyList(), Collections.emptyList());\n+        } else if (httpCall.getResponse().getStatusCode() == HttpResponseStatus.BAD_REQUEST.code()) {\n+            return Result.emptyWithError(BidderError.badInput(\"Invalid request.\"));\n+        } else if (httpCall.getResponse().getStatusCode() != HttpResponseStatus.OK.code()) {\n+            return Result.emptyWithError(BidderError.badServerResponse(String.format(\"Unexpected HTTP status %s.\",\n+                    httpCall.getResponse().getStatusCode())));\n         }\n \n+        final BidResponse bidResponse;\n         try {\n-            final BidResponse bidResponse = Json.decodeValue(httpCall.getResponse().getBody(), BidResponse.class);\n-            return extractBids(httpCall.getRequest().getPayload(), bidResponse);\n-        } catch (DecodeException e) {\n+            bidResponse = decodeBodyToBidResponse(httpCall);\n+        } catch (PreBidException e) {\n             return Result.emptyWithError(BidderError.badServerResponse(e.getMessage()));\n         }\n-    }\n \n-    private static Result<List<BidderBid>> extractBids(BidRequest bidRequest, BidResponse bidResponse) {\n-        if (bidResponse == null || bidResponse.getSeatbid() == null) {\n-            return Result.of(Collections.emptyList(), Collections.emptyList());\n+        final List<BidderBid> bidderBids = new ArrayList<>();\n+        for (SeatBid seatBid : bidResponse.getSeatbid()) {\n+            for (Bid bid : seatBid.getBid()) {\n+                final ObjectNode ext = bid.getExt();\n+                if (ext == null) {\n+                    return Result.emptyWithError(BidderError.badServerResponse(String.format(\n+                            \"Invalid bid extension from endpoint.\")));\n+                }\n+                try {\n+                    final SmartrtbResponseExt smartrtbResponseExt = Json.mapper.treeToValue(ext,\n+                            SmartrtbResponseExt.class);", "originalCommit": "277b4731de295429b70d74c00c08fd2155aac13f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDIwNjY3OQ==", "url": "https://github.com/prebid/prebid-server-java/pull/596#discussion_r374206679", "bodyText": "replace with\n final Bid updatedBid = bid.toBuilder().ext(null).build();\n final BidderBid bidderBid = BidderBid.of(updatedBid, bidType, DEFAULT_BID_CURRENCY);", "author": "DGarbar", "createdAt": "2020-02-03T16:33:29Z", "path": "src/main/java/org/prebid/server/bidder/smartrtb/SmartrtbBidder.java", "diffHunk": "@@ -119,73 +120,66 @@ private ExtImpSmartrtb parseImpExt(Imp imp) {\n         }\n     }\n \n-    private static MultiMap resolveHeaders(Device device) {\n-        final MultiMap headers = HttpUtil.headers()\n-                .add(\"x-openrtb-version\", \"2.5\");\n-        if (device != null) {\n-            HttpUtil.addHeaderIfValueIsNotEmpty(headers, \"User-Agent\", device.getUa());\n-            HttpUtil.addHeaderIfValueIsNotEmpty(headers, \"X-Forwarded-For\", device.getIp());\n-            HttpUtil.addHeaderIfValueIsNotEmpty(headers, \"Accept-Language\", device.getLanguage());\n-\n-            final Integer dnt = device.getDnt();\n-            if (dnt != null) {\n-                headers.add(\"DNT\", dnt.toString());\n-            }\n-        }\n-        return headers;\n-    }\n-\n     @Override\n     public Result<List<BidderBid>> makeBids(HttpCall<BidRequest> httpCall, BidRequest bidRequest) {\n         if (httpCall.getResponse().getStatusCode() == HttpResponseStatus.NO_CONTENT.code()) {\n             return Result.of(Collections.emptyList(), Collections.emptyList());\n+        } else if (httpCall.getResponse().getStatusCode() == HttpResponseStatus.BAD_REQUEST.code()) {\n+            return Result.emptyWithError(BidderError.badInput(\"Invalid request.\"));\n+        } else if (httpCall.getResponse().getStatusCode() != HttpResponseStatus.OK.code()) {\n+            return Result.emptyWithError(BidderError.badServerResponse(String.format(\"Unexpected HTTP status %s.\",\n+                    httpCall.getResponse().getStatusCode())));\n         }\n \n+        final BidResponse bidResponse;\n         try {\n-            final BidResponse bidResponse = Json.decodeValue(httpCall.getResponse().getBody(), BidResponse.class);\n-            return extractBids(httpCall.getRequest().getPayload(), bidResponse);\n-        } catch (DecodeException e) {\n+            bidResponse = decodeBodyToBidResponse(httpCall);\n+        } catch (PreBidException e) {\n             return Result.emptyWithError(BidderError.badServerResponse(e.getMessage()));\n         }\n-    }\n \n-    private static Result<List<BidderBid>> extractBids(BidRequest bidRequest, BidResponse bidResponse) {\n-        if (bidResponse == null || bidResponse.getSeatbid() == null) {\n-            return Result.of(Collections.emptyList(), Collections.emptyList());\n+        final List<BidderBid> bidderBids = new ArrayList<>();\n+        for (SeatBid seatBid : bidResponse.getSeatbid()) {\n+            for (Bid bid : seatBid.getBid()) {\n+                final ObjectNode ext = bid.getExt();\n+                if (ext == null) {\n+                    return Result.emptyWithError(BidderError.badServerResponse(String.format(\n+                            \"Invalid bid extension from endpoint.\")));\n+                }\n+                try {\n+                    final SmartrtbResponseExt smartrtbResponseExt = Json.mapper.treeToValue(ext,\n+                            SmartrtbResponseExt.class);\n+\n+                    BidType bidType = null;\n+                    switch (smartrtbResponseExt.getFormat()) {\n+                        case CREATIVE_TYPE_BANNER:\n+                            bidType = BidType.banner;\n+                            break;\n+                        case CREATIVE_TYPE_VIDEO:\n+                            bidType = BidType.video;\n+                            break;\n+                        default:\n+                            return Result.emptyWithError(BidderError.badServerResponse(String.format(\n+                                    \"Unsupported creative type %s.\", smartrtbResponseExt.getFormat())));\n+                    }\n+                    SmartrtbResponseExt.of(null);\n+                    final BidderBid bidderBid = BidderBid.of(bid, bidType, DEFAULT_BID_CURRENCY);", "originalCommit": "277b4731de295429b70d74c00c08fd2155aac13f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDIwOTg2MQ==", "url": "https://github.com/prebid/prebid-server-java/pull/596#discussion_r374209861", "bodyText": "BidderError.badServerResponse(\"Unsupported creative type wrong type\")", "author": "DGarbar", "createdAt": "2020-02-03T16:38:50Z", "path": "src/test/java/org/prebid/server/bidder/smartrtb/SmartrtbBidderTest.java", "diffHunk": "@@ -129,155 +124,69 @@ public void makeHttpRequestsShouldSetExpectedRequestUrlAndDefaultHeaders() {\n                         tuple(HttpUtil.ACCEPT_HEADER.toString(), HttpHeaderValues.APPLICATION_JSON.toString()));\n     }\n \n-    @Test\n-    public void makeHttpRequestsShouldSetAdditionalHeaders() {\n-        // given\n-        final BidRequest bidRequest = givenBidRequest(\n-                requestBuilder -> requestBuilder\n-                        .device(Device.builder().ua(\"ua\").ip(\"ip\").dnt(1).language(\"en\").build()),\n-                identity());\n-\n-        // when\n-        final Result<List<HttpRequest<BidRequest>>> result = smartrtbBidder.makeHttpRequests(bidRequest);\n-\n-        // then\n-        assertThat(result.getErrors()).isEmpty();\n-        assertThat(result.getValue().get(0).getHeaders()).isNotNull()\n-                .extracting(Map.Entry::getKey, Map.Entry::getValue)\n-                .contains(tuple(HttpUtil.USER_AGENT_HEADER.toString(), \"ua\"),\n-                        tuple(HttpUtil.X_FORWARDED_FOR_HEADER.toString(), \"ip\"),\n-                        tuple(HttpUtil.DNT_HEADER.toString(), \"1\"),\n-                        tuple(HttpUtil.ACCEPT_LANGUAGE_HEADER.toString(), \"en\"));\n-    }\n \n     @Test\n     public void makeBidsShouldReturnErrorIfResponseBodyCouldNotBeParsed() {\n         // given\n-        final HttpCall<BidRequest> httpCall = givenHttpCall(null, \"invalid\");\n+        final HttpCall<BidRequest> httpCall = givenHttpCall(null, \"false\");\n \n         // when\n         final Result<List<BidderBid>> result = smartrtbBidder.makeBids(httpCall, null);\n \n         // then\n         assertThat(result.getErrors()).hasSize(1);\n-        assertThat(result.getErrors().get(0).getMessage()).startsWith(\"Failed to decode: Unrecognized token\");\n         assertThat(result.getErrors().get(0).getType()).isEqualTo(BidderError.Type.bad_server_response);\n         assertThat(result.getValue()).isEmpty();\n     }\n \n     @Test\n-    public void makeBidsShouldReturnEmptyListIfBidResponseIsNull() throws JsonProcessingException {\n-        // given\n-        final HttpCall<BidRequest> httpCall = givenHttpCall(null,\n-                mapper.writeValueAsString(null));\n-\n-        // when\n-        final Result<List<BidderBid>> result = smartrtbBidder.makeBids(httpCall, null);\n-\n-        // then\n-        assertThat(result.getErrors()).isEmpty();\n-        assertThat(result.getValue()).isEmpty();\n-    }\n-\n-    @Test\n-    public void makeBidsShouldReturnErrorWithUnknownBidTypeIfNotSupportedBidType() throws JsonProcessingException {\n-        // given\n-        final HttpCall<BidRequest> httpCall = givenHttpCall(BidRequest.builder()\n-                        .imp(singletonList(Imp.builder().id(\"123\").audio(Audio.builder().build()).build()))\n-                        .build(),\n-                mapper.writeValueAsString(\n-                        givenBidResponse(bidBuilder -> bidBuilder.impid(\"123\"))));\n-\n-        // when\n-        final Result<List<BidderBid>> result = smartrtbBidder.makeBids(httpCall, null);\n-\n-        // then\n-        assertThat(result.getErrors()).hasSize(1)\n-                .containsOnly(BidderError.badInput(\"Failed to find impression 123\"));\n-        assertThat(result.getValue()).isEmpty();\n-    }\n-\n-    @Test\n-    public void makeBidsShouldReturnErrorWithUnknownBidTypeIfDiffId() throws JsonProcessingException {\n+    public void makeBidsShouldReturnErrorWhenBidExtIsEmpty() throws JsonProcessingException {\n         // given\n-        final HttpCall<BidRequest> httpCall = givenHttpCall(BidRequest.builder()\n-                        .imp(singletonList(Imp.builder().id(\"12\").video(Video.builder().build()).build()))\n-                        .build(),\n-                mapper.writeValueAsString(\n-                        givenBidResponse(bidBuilder -> bidBuilder.impid(\"123\"))));\n-\n-        // when\n-        final Result<List<BidderBid>> result = smartrtbBidder.makeBids(httpCall, null);\n-\n-        // then\n-        assertThat(result.getErrors()).hasSize(1)\n-                .containsOnly(BidderError.badInput(\"Failed to find impression 123\"));\n-        assertThat(result.getValue()).isEmpty();\n-    }\n-\n-    @Test\n-    public void makeBidsShouldReturnVideoBidIfVideoIsPresentInRequestImp() throws JsonProcessingException {\n-        // given\n-        final HttpCall<BidRequest> httpCall = givenHttpCall(BidRequest.builder()\n-                        .imp(singletonList(Imp.builder().id(\"12\").video(Video.builder().build()).build()))\n-                        .build(),\n-                mapper.writeValueAsString(\n-                        givenBidResponse(bidBuilder -> bidBuilder.impid(\"123\"))));\n-\n-        // when\n-        final Result<List<BidderBid>> result = smartrtbBidder.makeBids(httpCall, null);\n-\n-        // then\n-        assertThat(result.getErrors()).hasSize(1)\n-                .containsOnly(BidderError.badInput(\"Failed to find impression 123\"));\n-        assertThat(result.getValue()).isEmpty();\n-    }\n-\n-    @Test\n-    public void makeBidsShouldReturnEmptyListIfBidResponseSeatBidIsNull() throws JsonProcessingException {\n-        // given\n-        final HttpCall<BidRequest> httpCall = givenHttpCall(null,\n-                mapper.writeValueAsString(BidResponse.builder().build()));\n+        final HttpCall<BidRequest> httpCall = givenHttpCall(\n+                null,\n+                mapper.writeValueAsString(givenBidResponse(bidBuilder -> bidBuilder.impid(\"123\"))));\n \n         // when\n         final Result<List<BidderBid>> result = smartrtbBidder.makeBids(httpCall, null);\n \n         // then\n-        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getErrors()).hasSize(1);\n+        assertThat(result.getErrors().get(0).getMessage()).startsWith(\"Invalid bid extension from endpoint.\");\n+        assertThat(result.getErrors().get(0).getType()).isEqualTo(BidderError.Type.bad_server_response);\n         assertThat(result.getValue()).isEmpty();\n     }\n \n     @Test\n-    public void makeBidsShouldReturnBannerBidIfBannerIsPresentInRequestImp() throws JsonProcessingException {\n+    public void makeBidsShouldReturnTypeBannerWhenResponseExtCreativeTypeIsBanner() throws JsonProcessingException {\n         // given\n+        final ObjectNode ext = mapper.valueToTree(SmartrtbResponseExt.of(\"BANNER\"));\n         final HttpCall<BidRequest> httpCall = givenHttpCall(\n-                BidRequest.builder()\n-                        .imp(singletonList(Imp.builder().id(\"123\").banner(Banner.builder().build()).build()))\n-                        .build(),\n-                mapper.writeValueAsString(\n-                        givenBidResponse(bidBuilder -> bidBuilder.impid(\"123\"))));\n+                null,\n+                mapper.writeValueAsString(givenBidResponse(bidBuilder -> bidBuilder.ext(ext))));\n \n         // when\n         final Result<List<BidderBid>> result = smartrtbBidder.makeBids(httpCall, null);\n \n         // then\n         assertThat(result.getErrors()).isEmpty();\n         assertThat(result.getValue())\n-                .containsOnly(BidderBid.of(Bid.builder().impid(\"123\").build(), banner, \"USD\"));\n+                .containsOnly(BidderBid.of(Bid.builder().ext(ext).build(), banner, \"USD\"));\n     }\n \n     @Test\n-    public void makeBidsShouldReturnEmptyResultWhenResponseWithNoContent() {\n+    public void makeBidsShouldReturnTypeBannerWhenResponseExtCreativeTypeEmpty() throws JsonProcessingException {\n         // given\n-        final HttpCall<BidRequest> httpCall = HttpCall\n-                .success(null, HttpResponse.of(204, null, null), null);\n+        final ObjectNode ext = mapper.valueToTree(SmartrtbResponseExt.of(\"wrong type\"));\n+        final HttpCall<BidRequest> httpCall = givenHttpCall(\n+                null,\n+                mapper.writeValueAsString(givenBidResponse(bidBuilder -> bidBuilder.ext(ext))));\n \n         // when\n         final Result<List<BidderBid>> result = smartrtbBidder.makeBids(httpCall, null);\n \n         // then\n-        assertThat(result.getErrors()).isEmpty();\n-        assertThat(result.getValue()).isEmpty();\n+        assertThat(result.getErrors().get(0).getMessage()).startsWith(\"Unsupported creative type wrong type\");\n+        assertThat(result.getErrors().get(0).getType()).isEqualTo(BidderError.Type.bad_server_response);", "originalCommit": "277b4731de295429b70d74c00c08fd2155aac13f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDIwOTk4Mg==", "url": "https://github.com/prebid/prebid-server-java/pull/596#discussion_r374209982", "bodyText": "BidderError.badServerResponse(\"\")", "author": "DGarbar", "createdAt": "2020-02-03T16:39:03Z", "path": "src/test/java/org/prebid/server/bidder/smartrtb/SmartrtbBidderTest.java", "diffHunk": "@@ -129,155 +124,69 @@ public void makeHttpRequestsShouldSetExpectedRequestUrlAndDefaultHeaders() {\n                         tuple(HttpUtil.ACCEPT_HEADER.toString(), HttpHeaderValues.APPLICATION_JSON.toString()));\n     }\n \n-    @Test\n-    public void makeHttpRequestsShouldSetAdditionalHeaders() {\n-        // given\n-        final BidRequest bidRequest = givenBidRequest(\n-                requestBuilder -> requestBuilder\n-                        .device(Device.builder().ua(\"ua\").ip(\"ip\").dnt(1).language(\"en\").build()),\n-                identity());\n-\n-        // when\n-        final Result<List<HttpRequest<BidRequest>>> result = smartrtbBidder.makeHttpRequests(bidRequest);\n-\n-        // then\n-        assertThat(result.getErrors()).isEmpty();\n-        assertThat(result.getValue().get(0).getHeaders()).isNotNull()\n-                .extracting(Map.Entry::getKey, Map.Entry::getValue)\n-                .contains(tuple(HttpUtil.USER_AGENT_HEADER.toString(), \"ua\"),\n-                        tuple(HttpUtil.X_FORWARDED_FOR_HEADER.toString(), \"ip\"),\n-                        tuple(HttpUtil.DNT_HEADER.toString(), \"1\"),\n-                        tuple(HttpUtil.ACCEPT_LANGUAGE_HEADER.toString(), \"en\"));\n-    }\n \n     @Test\n     public void makeBidsShouldReturnErrorIfResponseBodyCouldNotBeParsed() {\n         // given\n-        final HttpCall<BidRequest> httpCall = givenHttpCall(null, \"invalid\");\n+        final HttpCall<BidRequest> httpCall = givenHttpCall(null, \"false\");\n \n         // when\n         final Result<List<BidderBid>> result = smartrtbBidder.makeBids(httpCall, null);\n \n         // then\n         assertThat(result.getErrors()).hasSize(1);\n-        assertThat(result.getErrors().get(0).getMessage()).startsWith(\"Failed to decode: Unrecognized token\");\n         assertThat(result.getErrors().get(0).getType()).isEqualTo(BidderError.Type.bad_server_response);\n         assertThat(result.getValue()).isEmpty();\n     }\n \n     @Test\n-    public void makeBidsShouldReturnEmptyListIfBidResponseIsNull() throws JsonProcessingException {\n-        // given\n-        final HttpCall<BidRequest> httpCall = givenHttpCall(null,\n-                mapper.writeValueAsString(null));\n-\n-        // when\n-        final Result<List<BidderBid>> result = smartrtbBidder.makeBids(httpCall, null);\n-\n-        // then\n-        assertThat(result.getErrors()).isEmpty();\n-        assertThat(result.getValue()).isEmpty();\n-    }\n-\n-    @Test\n-    public void makeBidsShouldReturnErrorWithUnknownBidTypeIfNotSupportedBidType() throws JsonProcessingException {\n-        // given\n-        final HttpCall<BidRequest> httpCall = givenHttpCall(BidRequest.builder()\n-                        .imp(singletonList(Imp.builder().id(\"123\").audio(Audio.builder().build()).build()))\n-                        .build(),\n-                mapper.writeValueAsString(\n-                        givenBidResponse(bidBuilder -> bidBuilder.impid(\"123\"))));\n-\n-        // when\n-        final Result<List<BidderBid>> result = smartrtbBidder.makeBids(httpCall, null);\n-\n-        // then\n-        assertThat(result.getErrors()).hasSize(1)\n-                .containsOnly(BidderError.badInput(\"Failed to find impression 123\"));\n-        assertThat(result.getValue()).isEmpty();\n-    }\n-\n-    @Test\n-    public void makeBidsShouldReturnErrorWithUnknownBidTypeIfDiffId() throws JsonProcessingException {\n+    public void makeBidsShouldReturnErrorWhenBidExtIsEmpty() throws JsonProcessingException {\n         // given\n-        final HttpCall<BidRequest> httpCall = givenHttpCall(BidRequest.builder()\n-                        .imp(singletonList(Imp.builder().id(\"12\").video(Video.builder().build()).build()))\n-                        .build(),\n-                mapper.writeValueAsString(\n-                        givenBidResponse(bidBuilder -> bidBuilder.impid(\"123\"))));\n-\n-        // when\n-        final Result<List<BidderBid>> result = smartrtbBidder.makeBids(httpCall, null);\n-\n-        // then\n-        assertThat(result.getErrors()).hasSize(1)\n-                .containsOnly(BidderError.badInput(\"Failed to find impression 123\"));\n-        assertThat(result.getValue()).isEmpty();\n-    }\n-\n-    @Test\n-    public void makeBidsShouldReturnVideoBidIfVideoIsPresentInRequestImp() throws JsonProcessingException {\n-        // given\n-        final HttpCall<BidRequest> httpCall = givenHttpCall(BidRequest.builder()\n-                        .imp(singletonList(Imp.builder().id(\"12\").video(Video.builder().build()).build()))\n-                        .build(),\n-                mapper.writeValueAsString(\n-                        givenBidResponse(bidBuilder -> bidBuilder.impid(\"123\"))));\n-\n-        // when\n-        final Result<List<BidderBid>> result = smartrtbBidder.makeBids(httpCall, null);\n-\n-        // then\n-        assertThat(result.getErrors()).hasSize(1)\n-                .containsOnly(BidderError.badInput(\"Failed to find impression 123\"));\n-        assertThat(result.getValue()).isEmpty();\n-    }\n-\n-    @Test\n-    public void makeBidsShouldReturnEmptyListIfBidResponseSeatBidIsNull() throws JsonProcessingException {\n-        // given\n-        final HttpCall<BidRequest> httpCall = givenHttpCall(null,\n-                mapper.writeValueAsString(BidResponse.builder().build()));\n+        final HttpCall<BidRequest> httpCall = givenHttpCall(\n+                null,\n+                mapper.writeValueAsString(givenBidResponse(bidBuilder -> bidBuilder.impid(\"123\"))));\n \n         // when\n         final Result<List<BidderBid>> result = smartrtbBidder.makeBids(httpCall, null);\n \n         // then\n-        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getErrors()).hasSize(1);\n+        assertThat(result.getErrors().get(0).getMessage()).startsWith(\"Invalid bid extension from endpoint.\");\n+        assertThat(result.getErrors().get(0).getType()).isEqualTo(BidderError.Type.bad_server_response);", "originalCommit": "277b4731de295429b70d74c00c08fd2155aac13f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDIxMTM2Mg==", "url": "https://github.com/prebid/prebid-server-java/pull/596#discussion_r374211362", "bodyText": "Please update your IDE code style.\nimport com.fasterxml.jackson.core.JsonProcessingException;\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.fasterxml.jackson.databind.node.ObjectNode;\nimport com.iab.openrtb.request.BidRequest;\nimport com.iab.openrtb.request.Imp;\nimport com.iab.openrtb.response.Bid;\nimport com.iab.openrtb.response.BidResponse;\nimport com.iab.openrtb.response.SeatBid;\nimport io.netty.handler.codec.http.HttpResponseStatus;\nimport io.vertx.core.MultiMap;\nimport io.vertx.core.http.HttpMethod;\nimport io.vertx.core.json.DecodeException;\nimport io.vertx.core.json.Json;\nimport org.apache.commons.lang3.StringUtils;\nimport org.prebid.server.bidder.Bidder;\nimport org.prebid.server.bidder.model.BidderBid;\nimport org.prebid.server.bidder.model.BidderError;\nimport org.prebid.server.bidder.model.HttpCall;\nimport org.prebid.server.bidder.model.HttpRequest;\nimport org.prebid.server.bidder.model.Result;\nimport org.prebid.server.bidder.smartrtb.model.SmartrtbResponseExt;\nimport org.prebid.server.exception.PreBidException;\nimport org.prebid.server.proto.openrtb.ext.ExtPrebid;\nimport org.prebid.server.proto.openrtb.ext.request.smartrtb.ExtImpSmartrtb;\nimport org.prebid.server.proto.openrtb.ext.request.smartrtb.ExtRequestSmartrtb;\nimport org.prebid.server.proto.openrtb.ext.response.BidType;\nimport org.prebid.server.util.HttpUtil;", "author": "DGarbar", "createdAt": "2020-02-03T16:41:24Z", "path": "src/main/java/org/prebid/server/bidder/smartrtb/SmartrtbBidder.java", "diffHunk": "@@ -1,9 +1,23 @@\n package org.prebid.server.bidder.smartrtb;\n \n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.smartrtb.ExtImpSmartrtb;\n+import org.prebid.server.proto.openrtb.ext.request.smartrtb.ExtRequestSmartrtb;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+import org.apache.commons.lang3.StringUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.bidder.smartrtb.model.SmartrtbResponseExt;\n+import org.prebid.server.exception.PreBidException;\n+import com.fasterxml.jackson.core.JsonProcessingException;", "originalCommit": "277b4731de295429b70d74c00c08fd2155aac13f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDIxMjk0MA==", "url": "https://github.com/prebid/prebid-server-java/pull/596#discussion_r374212940", "bodyText": "final", "author": "DGarbar", "createdAt": "2020-02-03T16:44:01Z", "path": "src/main/java/org/prebid/server/bidder/smartrtb/SmartrtbBidder.java", "diffHunk": "@@ -58,19 +61,17 @@ public SmartrtbBidder(String endpointUrl) {\n         final List<BidderError> errors = new ArrayList<>();\n         final List<Imp> validImps = new ArrayList<>();\n         String pubId = null;\n-        String zoneId = null;\n-        Boolean forceBid = null;\n \n         for (Imp imp : request.getImp()) {\n             try {\n                 final Imp validImp = validateImp(imp);\n                 final ExtImpSmartrtb extImp = parseImpExt(imp);\n \n-                if (StringUtils.isEmpty(pubId) && StringUtils.isNoneEmpty(extImp.getPubId())) {\n+                if (StringUtils.isBlank(pubId) && StringUtils.isNoneEmpty(extImp.getPubId())) {\n                     pubId = extImp.getPubId();\n                 }\n \n-                zoneId = extImp.getZoneId();\n+                String zoneId = extImp.getZoneId();", "originalCommit": "277b4731de295429b70d74c00c08fd2155aac13f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDIxMzU5Ng==", "url": "https://github.com/prebid/prebid-server-java/pull/596#discussion_r374213596", "bodyText": "private static final String DEFAULT_BID_CURRENCY = \"USD\";\nprivate static final String CREATIVE_TYPE_BANNER = \"BANNER\";\nprivate static final String CREATIVE_TYPE_VIDEO = \"VIDEO\";\nprivate final String endpointUrl;", "author": "DGarbar", "createdAt": "2020-02-03T16:45:22Z", "path": "src/main/java/org/prebid/server/bidder/smartrtb/SmartrtbBidder.java", "diffHunk": "@@ -0,0 +1,189 @@\n+package org.prebid.server.bidder.smartrtb;\n+\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.smartrtb.ExtImpSmartrtb;\n+import org.prebid.server.proto.openrtb.ext.request.smartrtb.ExtRequestSmartrtb;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+import org.apache.commons.lang3.StringUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.bidder.smartrtb.model.SmartrtbResponseExt;\n+import org.prebid.server.exception.PreBidException;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.core.json.DecodeException;\n+import io.vertx.core.json.Json;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * SmartRTB {@link Bidder} implementation.\n+ */\n+\n+public class SmartrtbBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpSmartrtb>> SMARTRTB_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpSmartrtb>>() {\n+            };\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+\n+    private final String endpointUrl;\n+\n+    private static final String CREATIVE_TYPE_BANNER = \"BANNER\";\n+\n+    private static final String CREATIVE_TYPE_VIDEO = \"VIDEO\";\n+", "originalCommit": "64de8ca9af47047e360e8827816b6186f3212786", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "bccf9266fb9008e71cd06ffda07cf87068f9345a", "url": "https://github.com/prebid/prebid-server-java/commit/bccf9266fb9008e71cd06ffda07cf87068f9345a", "message": "Small changes to bidder and tests", "committedDate": "2020-02-04T14:09:31Z", "type": "commit"}, {"oid": "9257099b1e9543d4370870137134fa074f8d3322", "url": "https://github.com/prebid/prebid-server-java/commit/9257099b1e9543d4370870137134fa074f8d3322", "message": "Some changes to tests", "committedDate": "2020-02-04T16:43:36Z", "type": "commit"}]}