{"pr_number": 700, "pr_title": "Add Nanointeractive Bidder and tests", "pr_createdAt": "2020-04-30T14:32:28Z", "pr_url": "https://github.com/prebid/prebid-server-java/pull/700", "timeline": [{"oid": "e6bea9ef83d223a12e87216b22da010b3e510f19", "url": "https://github.com/prebid/prebid-server-java/commit/e6bea9ef83d223a12e87216b22da010b3e510f19", "message": "Add Nanointeractive Bidder and tests", "committedDate": "2020-04-30T14:30:30Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA3ODc2Mg==", "url": "https://github.com/prebid/prebid-server-java/pull/700#discussion_r420078762", "bodyText": "You will use last not empty extImp.getRef(). But in GO they will use first one.", "author": "DGarbar", "createdAt": "2020-05-05T12:43:34Z", "path": "src/main/java/org/prebid/server/bidder/nanointeractive/NanointeractiveBidder.java", "diffHunk": "@@ -0,0 +1,162 @@\n+package org.prebid.server.bidder.nanointeractive;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Device;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.lang3.StringUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.nanointeractive.ExtImpNanointeractive;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class NanointeractiveBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpNanointeractive>> NANOINTERACTIVE_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpNanointeractive>>() {\n+            };\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public NanointeractiveBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<Imp> validImps = new ArrayList<>();\n+        String reference = \"\";\n+        for (Imp imp : request.getImp()) {\n+            try {\n+                final Imp validImp = validateImp(imp);\n+                final ExtImpNanointeractive extImp = parseImpExt(imp);\n+                if (StringUtils.isBlank(extImp.getPid())) {\n+                    throw new PreBidException(\"pid is empty\");\n+                }\n+\n+                if (StringUtils.isNotBlank(extImp.getRef())) {", "originalCommit": "e6bea9ef83d223a12e87216b22da010b3e510f19", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA3OTc0Mw==", "url": "https://github.com/prebid/prebid-server-java/pull/700#discussion_r420079743", "bodyText": "They set empty site if they have null, or update existing one", "author": "DGarbar", "createdAt": "2020-05-05T12:45:12Z", "path": "src/main/java/org/prebid/server/bidder/nanointeractive/NanointeractiveBidder.java", "diffHunk": "@@ -0,0 +1,162 @@\n+package org.prebid.server.bidder.nanointeractive;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Device;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.lang3.StringUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.nanointeractive.ExtImpNanointeractive;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class NanointeractiveBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpNanointeractive>> NANOINTERACTIVE_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpNanointeractive>>() {\n+            };\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public NanointeractiveBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<Imp> validImps = new ArrayList<>();\n+        String reference = \"\";\n+        for (Imp imp : request.getImp()) {\n+            try {\n+                final Imp validImp = validateImp(imp);\n+                final ExtImpNanointeractive extImp = parseImpExt(imp);\n+                if (StringUtils.isBlank(extImp.getPid())) {\n+                    throw new PreBidException(\"pid is empty\");\n+                }\n+\n+                if (StringUtils.isNotBlank(extImp.getRef())) {\n+                    reference = extImp.getRef();\n+                }\n+                validImps.add(validImp);\n+            } catch (PreBidException e) {\n+                errors.add(BidderError.badInput(e.getMessage()));\n+            }\n+        }\n+\n+        Site updateSite = null;\n+        if (StringUtils.isNotBlank(reference)) {\n+            if (request.getSite() != null) {\n+                updateSite = Site.builder().ref(reference).build();\n+            }", "originalCommit": "e6bea9ef83d223a12e87216b22da010b3e510f19", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA4MTM4OA==", "url": "https://github.com/prebid/prebid-server-java/pull/700#discussion_r420081388", "bodyText": "Also i'd rather extract this in another method and called like\nfinal BidRequest outgoingRequest = request.toBuilder()\n.imp(validImps)\n.site(updateSite(request.site, reference))\n.build();", "author": "DGarbar", "createdAt": "2020-05-05T12:47:49Z", "path": "src/main/java/org/prebid/server/bidder/nanointeractive/NanointeractiveBidder.java", "diffHunk": "@@ -0,0 +1,162 @@\n+package org.prebid.server.bidder.nanointeractive;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Device;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.lang3.StringUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.nanointeractive.ExtImpNanointeractive;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class NanointeractiveBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpNanointeractive>> NANOINTERACTIVE_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpNanointeractive>>() {\n+            };\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public NanointeractiveBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<Imp> validImps = new ArrayList<>();\n+        String reference = \"\";\n+        for (Imp imp : request.getImp()) {\n+            try {\n+                final Imp validImp = validateImp(imp);\n+                final ExtImpNanointeractive extImp = parseImpExt(imp);\n+                if (StringUtils.isBlank(extImp.getPid())) {\n+                    throw new PreBidException(\"pid is empty\");\n+                }\n+\n+                if (StringUtils.isNotBlank(extImp.getRef())) {\n+                    reference = extImp.getRef();\n+                }\n+                validImps.add(validImp);\n+            } catch (PreBidException e) {\n+                errors.add(BidderError.badInput(e.getMessage()));\n+            }\n+        }\n+\n+        Site updateSite = null;\n+        if (StringUtils.isNotBlank(reference)) {\n+            if (request.getSite() != null) {\n+                updateSite = Site.builder().ref(reference).build();\n+            }\n+        }", "originalCommit": "e6bea9ef83d223a12e87216b22da010b3e510f19", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA4MjI2MQ==", "url": "https://github.com/prebid/prebid-server-java/pull/700#discussion_r420082261", "bodyText": "Are you sure that user not empty and buyeruid is not null ?", "author": "DGarbar", "createdAt": "2020-05-05T12:49:15Z", "path": "src/main/java/org/prebid/server/bidder/nanointeractive/NanointeractiveBidder.java", "diffHunk": "@@ -0,0 +1,162 @@\n+package org.prebid.server.bidder.nanointeractive;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Device;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.lang3.StringUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.nanointeractive.ExtImpNanointeractive;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class NanointeractiveBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpNanointeractive>> NANOINTERACTIVE_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpNanointeractive>>() {\n+            };\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public NanointeractiveBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<Imp> validImps = new ArrayList<>();\n+        String reference = \"\";\n+        for (Imp imp : request.getImp()) {\n+            try {\n+                final Imp validImp = validateImp(imp);\n+                final ExtImpNanointeractive extImp = parseImpExt(imp);\n+                if (StringUtils.isBlank(extImp.getPid())) {\n+                    throw new PreBidException(\"pid is empty\");\n+                }\n+\n+                if (StringUtils.isNotBlank(extImp.getRef())) {\n+                    reference = extImp.getRef();\n+                }\n+                validImps.add(validImp);\n+            } catch (PreBidException e) {\n+                errors.add(BidderError.badInput(e.getMessage()));\n+            }\n+        }\n+\n+        Site updateSite = null;\n+        if (StringUtils.isNotBlank(reference)) {\n+            if (request.getSite() != null) {\n+                updateSite = Site.builder().ref(reference).build();\n+            }\n+        }\n+\n+        final BidRequest outgoingRequest = request.toBuilder()\n+                .imp(validImps)\n+                .site(updateSite)\n+                .build();\n+\n+        final String body = mapper.encode(outgoingRequest);\n+\n+        return Result.of(Collections.singletonList(\n+                HttpRequest.<BidRequest>builder()\n+                        .method(HttpMethod.POST)\n+                        .uri(endpointUrl)\n+                        .headers(headers(request))\n+                        .payload(outgoingRequest)\n+                        .body(body)\n+                        .build()),\n+                errors);\n+    }\n+\n+    private Imp validateImp(Imp imp) {\n+        if (imp.getBanner() == null) {\n+            throw new PreBidException(\"invalid MediaType. NanoInteractive only supports Banner type.\");\n+        }\n+        return imp;\n+    }\n+\n+    private ExtImpNanointeractive parseImpExt(Imp imp) {\n+        try {\n+            return mapper.mapper().convertValue(imp.getExt(), NANOINTERACTIVE_EXT_TYPE_REFERENCE).getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+    }\n+\n+    private MultiMap headers(BidRequest bidRequest) {\n+        final MultiMap headers = HttpUtil.headers().add(\"x-openrtb-version\", \"2.5\");\n+        final Device device = bidRequest.getDevice();\n+        if (device != null) {\n+            HttpUtil.addHeaderIfValueIsNotEmpty(headers, HttpUtil.USER_AGENT_HEADER, device.getUa());\n+            HttpUtil.addHeaderIfValueIsNotEmpty(headers, HttpUtil.X_FORWARDED_FOR_HEADER, device.getIp());\n+        }\n+\n+        final Site site = bidRequest.getSite();\n+        if (site != null) {\n+            HttpUtil.addHeaderIfValueIsNotEmpty(headers, HttpUtil.REFERER_HEADER, site.getPage());\n+        }\n+\n+        if (bidRequest.getUser() != null && StringUtils.isNotBlank(bidRequest.getUser().getBuyeruid())) {\n+            HttpUtil.addHeaderIfValueIsNotEmpty(headers, HttpUtil.COOKIE_HEADER, String.format(\"Nano=%s\",\n+                    bidRequest.getUser().getBuyeruid().trim()));", "originalCommit": "e6bea9ef83d223a12e87216b22da010b3e510f19", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA4MzAyMQ==", "url": "https://github.com/prebid/prebid-server-java/pull/700#discussion_r420083021", "bodyText": "They also check for status codes", "author": "DGarbar", "createdAt": "2020-05-05T12:50:29Z", "path": "src/main/java/org/prebid/server/bidder/nanointeractive/NanointeractiveBidder.java", "diffHunk": "@@ -0,0 +1,162 @@\n+package org.prebid.server.bidder.nanointeractive;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Device;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.lang3.StringUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.nanointeractive.ExtImpNanointeractive;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class NanointeractiveBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpNanointeractive>> NANOINTERACTIVE_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpNanointeractive>>() {\n+            };\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public NanointeractiveBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<Imp> validImps = new ArrayList<>();\n+        String reference = \"\";\n+        for (Imp imp : request.getImp()) {\n+            try {\n+                final Imp validImp = validateImp(imp);\n+                final ExtImpNanointeractive extImp = parseImpExt(imp);\n+                if (StringUtils.isBlank(extImp.getPid())) {\n+                    throw new PreBidException(\"pid is empty\");\n+                }\n+\n+                if (StringUtils.isNotBlank(extImp.getRef())) {\n+                    reference = extImp.getRef();\n+                }\n+                validImps.add(validImp);\n+            } catch (PreBidException e) {\n+                errors.add(BidderError.badInput(e.getMessage()));\n+            }\n+        }\n+\n+        Site updateSite = null;\n+        if (StringUtils.isNotBlank(reference)) {\n+            if (request.getSite() != null) {\n+                updateSite = Site.builder().ref(reference).build();\n+            }\n+        }\n+\n+        final BidRequest outgoingRequest = request.toBuilder()\n+                .imp(validImps)\n+                .site(updateSite)\n+                .build();\n+\n+        final String body = mapper.encode(outgoingRequest);\n+\n+        return Result.of(Collections.singletonList(\n+                HttpRequest.<BidRequest>builder()\n+                        .method(HttpMethod.POST)\n+                        .uri(endpointUrl)\n+                        .headers(headers(request))\n+                        .payload(outgoingRequest)\n+                        .body(body)\n+                        .build()),\n+                errors);\n+    }\n+\n+    private Imp validateImp(Imp imp) {\n+        if (imp.getBanner() == null) {\n+            throw new PreBidException(\"invalid MediaType. NanoInteractive only supports Banner type.\");\n+        }\n+        return imp;\n+    }\n+\n+    private ExtImpNanointeractive parseImpExt(Imp imp) {\n+        try {\n+            return mapper.mapper().convertValue(imp.getExt(), NANOINTERACTIVE_EXT_TYPE_REFERENCE).getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+    }\n+\n+    private MultiMap headers(BidRequest bidRequest) {\n+        final MultiMap headers = HttpUtil.headers().add(\"x-openrtb-version\", \"2.5\");\n+        final Device device = bidRequest.getDevice();\n+        if (device != null) {\n+            HttpUtil.addHeaderIfValueIsNotEmpty(headers, HttpUtil.USER_AGENT_HEADER, device.getUa());\n+            HttpUtil.addHeaderIfValueIsNotEmpty(headers, HttpUtil.X_FORWARDED_FOR_HEADER, device.getIp());\n+        }\n+\n+        final Site site = bidRequest.getSite();\n+        if (site != null) {\n+            HttpUtil.addHeaderIfValueIsNotEmpty(headers, HttpUtil.REFERER_HEADER, site.getPage());\n+        }\n+\n+        if (bidRequest.getUser() != null && StringUtils.isNotBlank(bidRequest.getUser().getBuyeruid())) {\n+            HttpUtil.addHeaderIfValueIsNotEmpty(headers, HttpUtil.COOKIE_HEADER, String.format(\"Nano=%s\",\n+                    bidRequest.getUser().getBuyeruid().trim()));\n+        }\n+        return headers;\n+    }\n+\n+    @Override\n+    public Result<List<BidderBid>> makeBids(HttpCall<BidRequest> httpCall, BidRequest bidRequest) {", "originalCommit": "e6bea9ef83d223a12e87216b22da010b3e510f19", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA4Mzc5MQ==", "url": "https://github.com/prebid/prebid-server-java/pull/700#discussion_r420083791", "bodyText": "They also validates that price is above 0", "author": "DGarbar", "createdAt": "2020-05-05T12:51:50Z", "path": "src/main/java/org/prebid/server/bidder/nanointeractive/NanointeractiveBidder.java", "diffHunk": "@@ -0,0 +1,162 @@\n+package org.prebid.server.bidder.nanointeractive;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Device;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.lang3.StringUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.nanointeractive.ExtImpNanointeractive;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class NanointeractiveBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpNanointeractive>> NANOINTERACTIVE_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpNanointeractive>>() {\n+            };\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public NanointeractiveBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<Imp> validImps = new ArrayList<>();\n+        String reference = \"\";\n+        for (Imp imp : request.getImp()) {\n+            try {\n+                final Imp validImp = validateImp(imp);\n+                final ExtImpNanointeractive extImp = parseImpExt(imp);\n+                if (StringUtils.isBlank(extImp.getPid())) {\n+                    throw new PreBidException(\"pid is empty\");\n+                }\n+\n+                if (StringUtils.isNotBlank(extImp.getRef())) {\n+                    reference = extImp.getRef();\n+                }\n+                validImps.add(validImp);\n+            } catch (PreBidException e) {\n+                errors.add(BidderError.badInput(e.getMessage()));\n+            }\n+        }\n+\n+        Site updateSite = null;\n+        if (StringUtils.isNotBlank(reference)) {\n+            if (request.getSite() != null) {\n+                updateSite = Site.builder().ref(reference).build();\n+            }\n+        }\n+\n+        final BidRequest outgoingRequest = request.toBuilder()\n+                .imp(validImps)\n+                .site(updateSite)\n+                .build();\n+\n+        final String body = mapper.encode(outgoingRequest);\n+\n+        return Result.of(Collections.singletonList(\n+                HttpRequest.<BidRequest>builder()\n+                        .method(HttpMethod.POST)\n+                        .uri(endpointUrl)\n+                        .headers(headers(request))\n+                        .payload(outgoingRequest)\n+                        .body(body)\n+                        .build()),\n+                errors);\n+    }\n+\n+    private Imp validateImp(Imp imp) {\n+        if (imp.getBanner() == null) {\n+            throw new PreBidException(\"invalid MediaType. NanoInteractive only supports Banner type.\");\n+        }\n+        return imp;\n+    }\n+\n+    private ExtImpNanointeractive parseImpExt(Imp imp) {\n+        try {\n+            return mapper.mapper().convertValue(imp.getExt(), NANOINTERACTIVE_EXT_TYPE_REFERENCE).getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+    }\n+\n+    private MultiMap headers(BidRequest bidRequest) {\n+        final MultiMap headers = HttpUtil.headers().add(\"x-openrtb-version\", \"2.5\");\n+        final Device device = bidRequest.getDevice();\n+        if (device != null) {\n+            HttpUtil.addHeaderIfValueIsNotEmpty(headers, HttpUtil.USER_AGENT_HEADER, device.getUa());\n+            HttpUtil.addHeaderIfValueIsNotEmpty(headers, HttpUtil.X_FORWARDED_FOR_HEADER, device.getIp());\n+        }\n+\n+        final Site site = bidRequest.getSite();\n+        if (site != null) {\n+            HttpUtil.addHeaderIfValueIsNotEmpty(headers, HttpUtil.REFERER_HEADER, site.getPage());\n+        }\n+\n+        if (bidRequest.getUser() != null && StringUtils.isNotBlank(bidRequest.getUser().getBuyeruid())) {\n+            HttpUtil.addHeaderIfValueIsNotEmpty(headers, HttpUtil.COOKIE_HEADER, String.format(\"Nano=%s\",\n+                    bidRequest.getUser().getBuyeruid().trim()));\n+        }\n+        return headers;\n+    }\n+\n+    @Override\n+    public Result<List<BidderBid>> makeBids(HttpCall<BidRequest> httpCall, BidRequest bidRequest) {\n+        try {\n+            final BidResponse bidResponse = mapper.decodeValue(httpCall.getResponse().getBody(), BidResponse.class);\n+            return Result.of(extractBids(httpCall.getRequest().getPayload(), bidResponse), Collections.emptyList());\n+        } catch (DecodeException | PreBidException e) {\n+            return Result.emptyWithError(BidderError.badServerResponse(e.getMessage()));\n+        }\n+    }\n+\n+    private static List<BidderBid> extractBids(BidRequest bidRequest, BidResponse bidResponse) {\n+        return bidResponse == null || bidResponse.getSeatbid() == null\n+                ? Collections.emptyList()\n+                : bidsFromResponse(bidRequest, bidResponse);\n+    }\n+\n+    private static List<BidderBid> bidsFromResponse(BidRequest bidRequest, BidResponse bidResponse) {\n+        return bidResponse.getSeatbid().stream()\n+                .filter(Objects::nonNull)\n+                .map(SeatBid::getBid)", "originalCommit": "e6bea9ef83d223a12e87216b22da010b3e510f19", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA4Mzk4NA==", "url": "https://github.com/prebid/prebid-server-java/pull/700#discussion_r420083984", "bodyText": "currency is from response", "author": "DGarbar", "createdAt": "2020-05-05T12:52:09Z", "path": "src/main/java/org/prebid/server/bidder/nanointeractive/NanointeractiveBidder.java", "diffHunk": "@@ -0,0 +1,162 @@\n+package org.prebid.server.bidder.nanointeractive;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Device;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Site;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.lang3.StringUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.nanointeractive.ExtImpNanointeractive;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class NanointeractiveBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpNanointeractive>> NANOINTERACTIVE_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpNanointeractive>>() {\n+            };\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public NanointeractiveBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<Imp> validImps = new ArrayList<>();\n+        String reference = \"\";\n+        for (Imp imp : request.getImp()) {\n+            try {\n+                final Imp validImp = validateImp(imp);\n+                final ExtImpNanointeractive extImp = parseImpExt(imp);\n+                if (StringUtils.isBlank(extImp.getPid())) {\n+                    throw new PreBidException(\"pid is empty\");\n+                }\n+\n+                if (StringUtils.isNotBlank(extImp.getRef())) {\n+                    reference = extImp.getRef();\n+                }\n+                validImps.add(validImp);\n+            } catch (PreBidException e) {\n+                errors.add(BidderError.badInput(e.getMessage()));\n+            }\n+        }\n+\n+        Site updateSite = null;\n+        if (StringUtils.isNotBlank(reference)) {\n+            if (request.getSite() != null) {\n+                updateSite = Site.builder().ref(reference).build();\n+            }\n+        }\n+\n+        final BidRequest outgoingRequest = request.toBuilder()\n+                .imp(validImps)\n+                .site(updateSite)\n+                .build();\n+\n+        final String body = mapper.encode(outgoingRequest);\n+\n+        return Result.of(Collections.singletonList(\n+                HttpRequest.<BidRequest>builder()\n+                        .method(HttpMethod.POST)\n+                        .uri(endpointUrl)\n+                        .headers(headers(request))\n+                        .payload(outgoingRequest)\n+                        .body(body)\n+                        .build()),\n+                errors);\n+    }\n+\n+    private Imp validateImp(Imp imp) {\n+        if (imp.getBanner() == null) {\n+            throw new PreBidException(\"invalid MediaType. NanoInteractive only supports Banner type.\");\n+        }\n+        return imp;\n+    }\n+\n+    private ExtImpNanointeractive parseImpExt(Imp imp) {\n+        try {\n+            return mapper.mapper().convertValue(imp.getExt(), NANOINTERACTIVE_EXT_TYPE_REFERENCE).getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+    }\n+\n+    private MultiMap headers(BidRequest bidRequest) {\n+        final MultiMap headers = HttpUtil.headers().add(\"x-openrtb-version\", \"2.5\");\n+        final Device device = bidRequest.getDevice();\n+        if (device != null) {\n+            HttpUtil.addHeaderIfValueIsNotEmpty(headers, HttpUtil.USER_AGENT_HEADER, device.getUa());\n+            HttpUtil.addHeaderIfValueIsNotEmpty(headers, HttpUtil.X_FORWARDED_FOR_HEADER, device.getIp());\n+        }\n+\n+        final Site site = bidRequest.getSite();\n+        if (site != null) {\n+            HttpUtil.addHeaderIfValueIsNotEmpty(headers, HttpUtil.REFERER_HEADER, site.getPage());\n+        }\n+\n+        if (bidRequest.getUser() != null && StringUtils.isNotBlank(bidRequest.getUser().getBuyeruid())) {\n+            HttpUtil.addHeaderIfValueIsNotEmpty(headers, HttpUtil.COOKIE_HEADER, String.format(\"Nano=%s\",\n+                    bidRequest.getUser().getBuyeruid().trim()));\n+        }\n+        return headers;\n+    }\n+\n+    @Override\n+    public Result<List<BidderBid>> makeBids(HttpCall<BidRequest> httpCall, BidRequest bidRequest) {\n+        try {\n+            final BidResponse bidResponse = mapper.decodeValue(httpCall.getResponse().getBody(), BidResponse.class);\n+            return Result.of(extractBids(httpCall.getRequest().getPayload(), bidResponse), Collections.emptyList());\n+        } catch (DecodeException | PreBidException e) {\n+            return Result.emptyWithError(BidderError.badServerResponse(e.getMessage()));\n+        }\n+    }\n+\n+    private static List<BidderBid> extractBids(BidRequest bidRequest, BidResponse bidResponse) {\n+        return bidResponse == null || bidResponse.getSeatbid() == null\n+                ? Collections.emptyList()\n+                : bidsFromResponse(bidRequest, bidResponse);\n+    }\n+\n+    private static List<BidderBid> bidsFromResponse(BidRequest bidRequest, BidResponse bidResponse) {\n+        return bidResponse.getSeatbid().stream()\n+                .filter(Objects::nonNull)\n+                .map(SeatBid::getBid)\n+                .filter(Objects::nonNull)\n+                .flatMap(Collection::stream)\n+                .map(bid -> BidderBid.of(bid, BidType.banner, DEFAULT_BID_CURRENCY))\n+                .collect(Collectors.toList());", "originalCommit": "e6bea9ef83d223a12e87216b22da010b3e510f19", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA4Njc1Mg==", "url": "https://github.com/prebid/prebid-server-java/pull/700#discussion_r420086752", "bodyText": "remove this value if you want to check that smth was set.\nAlso as I mentioned Site shouldn't be removed.", "author": "DGarbar", "createdAt": "2020-05-05T12:56:34Z", "path": "src/test/resources/org/prebid/server/it/openrtb2/nanointeractive/test-auction-nanointeractive-request.json", "diffHunk": "@@ -0,0 +1,118 @@\n+{\n+  \"id\": \"tid\",\n+  \"imp\": [\n+    {\n+      \"id\": \"impId13\",\n+      \"banner\": {\n+        \"format\": [\n+          {\n+            \"w\": 300,\n+            \"h\": 250\n+          }\n+        ],\n+        \"w\": 300,\n+        \"h\": 250\n+      },\n+      \"ext\": {\n+        \"nanointeractive\": {\n+          \"pid\": \"58bfec94eb0a1916fa380163\",\n+          \"nq\": [\"search query\"],\n+          \"category\": \"Automotive\",\n+          \"subId\": \"a23\",\n+          \"ref\": \"https://nanointeractive.com\"\n+        }\n+      }\n+    },\n+    {\n+      \"id\": \"impId001\",\n+      \"banner\": {\n+        \"format\": [\n+          {\n+            \"w\": 300,\n+            \"h\": 250\n+          }\n+        ],\n+        \"w\": 300,\n+        \"h\": 250\n+      },\n+      \"ext\": {\n+        \"nanointeractive\": {\n+          \"pid\": \"58bfec94eb0a1916fa380163\",\n+          \"nq\": [\"search query\"],\n+          \"category\": \"Automotive\",\n+          \"subId\": \"a23\",\n+          \"ref\": \"https://nanointeractive.com\"\n+        }\n+      }\n+    }\n+  ],\n+  \"device\": {\n+    \"pxratio\": 4.2,\n+    \"dnt\": 2,\n+    \"language\": \"en\",\n+    \"ifa\": \"ifaId\"\n+  },\n+  \"site\": {\n+    \"page\": \"http://www.example.com\",\n+    \"ref\": \"https://nanointeractive.com\",", "originalCommit": "e6bea9ef83d223a12e87216b22da010b3e510f19", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "ef68503ac174aa6950329ff37e0a74e1cf0de904", "url": "https://github.com/prebid/prebid-server-java/commit/ef68503ac174aa6950329ff37e0a74e1cf0de904", "message": "Fix after review", "committedDate": "2020-05-06T18:14:58Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjA3NDM3NA==", "url": "https://github.com/prebid/prebid-server-java/pull/700#discussion_r422074374", "bodyText": "Now you inject nothing when site is null.\nYou can rewrite it like this.\n final Site site = request.getSite();\n        if (StringUtils.isNotBlank(reference)) {\n           return site == null ? Site.builder().ref(reference).build() : site.toBuilder().ref(reference).build();\n        }\n        return site;", "author": "DGarbar", "createdAt": "2020-05-08T10:43:47Z", "path": "src/main/java/org/prebid/server/bidder/nanointeractive/NanointeractiveBidder.java", "diffHunk": "@@ -109,6 +103,15 @@ private ExtImpNanointeractive parseImpExt(Imp imp) {\n         }\n     }\n \n+    private static Site modifySite(String reference, BidRequest request) {\n+        final Site site = request.getSite();\n+        Site.SiteBuilder siteBuilder = null;\n+        if (StringUtils.isNotBlank(reference)) {\n+            siteBuilder = site == null ? Site.builder() : site.toBuilder().ref(reference);\n+        }\n+        return siteBuilder != null ? siteBuilder.build() : null;", "originalCommit": "ef68503ac174aa6950329ff37e0a74e1cf0de904", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjA3NTYwOA==", "url": "https://github.com/prebid/prebid-server-java/pull/700#discussion_r422075608", "bodyText": "I'm sorry, I suggested updateSite but not I think that it will be more appropriate to call modified site.\nAnd pass only Site to the arguments, not all BidRequest", "author": "DGarbar", "createdAt": "2020-05-08T10:46:42Z", "path": "src/main/java/org/prebid/server/bidder/nanointeractive/NanointeractiveBidder.java", "diffHunk": "@@ -109,6 +103,15 @@ private ExtImpNanointeractive parseImpExt(Imp imp) {\n         }\n     }\n \n+    private static Site modifySite(String reference, BidRequest request) {", "originalCommit": "ef68503ac174aa6950329ff37e0a74e1cf0de904", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjA3Nzk3OQ==", "url": "https://github.com/prebid/prebid-server-java/pull/700#discussion_r422077979", "bodyText": "make test that cur is from response", "author": "DGarbar", "createdAt": "2020-05-08T10:52:46Z", "path": "src/main/java/org/prebid/server/bidder/nanointeractive/NanointeractiveBidder.java", "diffHunk": "@@ -151,7 +164,8 @@ private MultiMap headers(BidRequest bidRequest) {\n                 .map(SeatBid::getBid)\n                 .filter(Objects::nonNull)\n                 .flatMap(Collection::stream)\n-                .map(bid -> BidderBid.of(bid, BidType.banner, DEFAULT_BID_CURRENCY))\n+                .filter(bid -> bid.getPrice().compareTo(BigDecimal.ZERO) > 0)\n+                .map(bid -> BidderBid.of(bid, BidType.banner, bidResponse.getCur()))", "originalCommit": "ef68503ac174aa6950329ff37e0a74e1cf0de904", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "3ac5293009785a1439afc402f84d016c870d674f", "url": "https://github.com/prebid/prebid-server-java/commit/3ac5293009785a1439afc402f84d016c870d674f", "message": "Add test to check price", "committedDate": "2020-05-13T13:42:38Z", "type": "commit"}, {"oid": "07998de9e3dad27fa33c25b35bd9d451fba30153", "url": "https://github.com/prebid/prebid-server-java/commit/07998de9e3dad27fa33c25b35bd9d451fba30153", "message": "Merge branch 'master' into add-nanointeractive-bidder", "committedDate": "2020-06-24T15:53:04Z", "type": "commit"}, {"oid": "ebfed8f7931e0da8e796a32ee1f2a9a561e48c2d", "url": "https://github.com/prebid/prebid-server-java/commit/ebfed8f7931e0da8e796a32ee1f2a9a561e48c2d", "message": "Add pbs-enforces-ccpa property to nanointeractive.yaml file", "committedDate": "2020-06-24T15:55:13Z", "type": "commit"}]}