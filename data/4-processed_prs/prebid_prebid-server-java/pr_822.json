{"pr_number": 822, "pr_title": "Add new Mobilefuse bidder and tests", "pr_createdAt": "2020-07-21T13:15:02Z", "pr_url": "https://github.com/prebid/prebid-server-java/pull/822", "timeline": [{"oid": "4e9e6c70f505f9bc50d4e499c437d5be29ba6efe", "url": "https://github.com/prebid/prebid-server-java/commit/4e9e6c70f505f9bc50d4e499c437d5be29ba6efe", "message": "Add bidder and tests", "committedDate": "2020-07-21T13:13:37Z", "type": "commit"}, {"oid": "d021978c1391013fe6220c6e8f040ac2b52ff745", "url": "https://github.com/prebid/prebid-server-java/commit/d021978c1391013fe6220c6e8f040ac2b52ff745", "message": "Refactoring code and tests", "committedDate": "2020-08-26T09:17:10Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQxODA3MQ==", "url": "https://github.com/prebid/prebid-server-java/pull/822#discussion_r489418071", "bodyText": "it will not be the frist one. It will be last valid.\nJust create sepparate method for this", "author": "DGarbar", "createdAt": "2020-09-16T13:01:28Z", "path": "src/main/java/org/prebid/server/bidder/mobilefuse/MobilefuseBidder.java", "diffHunk": "@@ -0,0 +1,162 @@\n+package org.prebid.server.bidder.mobilefuse;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.http.HttpMethod;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.mobilefuse.ExtImpMobilefuse;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * MobilefuseBidder {@link Bidder} implementation.\n+ */\n+public class MobilefuseBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpMobilefuse>> MOBILEFUSE_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpMobilefuse>>() {\n+            };\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public MobilefuseBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<Imp> imps = new ArrayList<>();\n+\n+        ExtImpMobilefuse firstExtImpMobilefuse = null;\n+        for (Imp imp : request.getImp()) {\n+            try {\n+                final ExtImpMobilefuse extImpMobilefuse = parseImpExt(imp);\n+                firstExtImpMobilefuse = firstExtImpMobilefuse == null ? extImpMobilefuse : firstExtImpMobilefuse;", "originalCommit": "d021978c1391013fe6220c6e8f040ac2b52ff745", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDIyNzM0NQ==", "url": "https://github.com/prebid/prebid-server-java/pull/822#discussion_r490227345", "bodyText": "In Go version theri is method getFirstMobileFuseExtension and there they parse and check if present any error and then use break to quit from loop", "author": "AndriyPavlyuk", "createdAt": "2020-09-17T13:05:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQxODA3MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQxODk3Ng==", "url": "https://github.com/prebid/prebid-server-java/pull/822#discussion_r489418976", "bodyText": "they don't use same imp.ext they ALWAYS reuse first found ext", "author": "DGarbar", "createdAt": "2020-09-16T13:02:55Z", "path": "src/main/java/org/prebid/server/bidder/mobilefuse/MobilefuseBidder.java", "diffHunk": "@@ -0,0 +1,162 @@\n+package org.prebid.server.bidder.mobilefuse;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.http.HttpMethod;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.mobilefuse.ExtImpMobilefuse;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * MobilefuseBidder {@link Bidder} implementation.\n+ */\n+public class MobilefuseBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpMobilefuse>> MOBILEFUSE_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpMobilefuse>>() {\n+            };\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public MobilefuseBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<Imp> imps = new ArrayList<>();\n+\n+        ExtImpMobilefuse firstExtImpMobilefuse = null;\n+        for (Imp imp : request.getImp()) {\n+            try {\n+                final ExtImpMobilefuse extImpMobilefuse = parseImpExt(imp);\n+                firstExtImpMobilefuse = firstExtImpMobilefuse == null ? extImpMobilefuse : firstExtImpMobilefuse;\n+                final Imp modifiedImp = modifyImp(imp, extImpMobilefuse);", "originalCommit": "d021978c1391013fe6220c6e8f040ac2b52ff745", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQxOTA3MA==", "url": "https://github.com/prebid/prebid-server-java/pull/822#discussion_r489419070", "bodyText": "redundant just go to the next one", "author": "DGarbar", "createdAt": "2020-09-16T13:03:05Z", "path": "src/main/java/org/prebid/server/bidder/mobilefuse/MobilefuseBidder.java", "diffHunk": "@@ -0,0 +1,162 @@\n+package org.prebid.server.bidder.mobilefuse;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.http.HttpMethod;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.mobilefuse.ExtImpMobilefuse;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * MobilefuseBidder {@link Bidder} implementation.\n+ */\n+public class MobilefuseBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpMobilefuse>> MOBILEFUSE_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpMobilefuse>>() {\n+            };\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public MobilefuseBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<Imp> imps = new ArrayList<>();\n+\n+        ExtImpMobilefuse firstExtImpMobilefuse = null;\n+        for (Imp imp : request.getImp()) {\n+            try {\n+                final ExtImpMobilefuse extImpMobilefuse = parseImpExt(imp);\n+                firstExtImpMobilefuse = firstExtImpMobilefuse == null ? extImpMobilefuse : firstExtImpMobilefuse;\n+                final Imp modifiedImp = modifyImp(imp, extImpMobilefuse);\n+                imps.add(modifiedImp);\n+            } catch (PreBidException e) {\n+                errors.add(BidderError.badInput(e.getMessage()));", "originalCommit": "d021978c1391013fe6220c6e8f040ac2b52ff745", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQxOTUwNg==", "url": "https://github.com/prebid/prebid-server-java/pull/822#discussion_r489419506", "bodyText": "Only after this check, we can modifyImps", "author": "DGarbar", "createdAt": "2020-09-16T13:03:40Z", "path": "src/main/java/org/prebid/server/bidder/mobilefuse/MobilefuseBidder.java", "diffHunk": "@@ -0,0 +1,162 @@\n+package org.prebid.server.bidder.mobilefuse;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.http.HttpMethod;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.mobilefuse.ExtImpMobilefuse;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * MobilefuseBidder {@link Bidder} implementation.\n+ */\n+public class MobilefuseBidder implements Bidder<BidRequest> {\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpMobilefuse>> MOBILEFUSE_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpMobilefuse>>() {\n+            };\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public MobilefuseBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+        final List<Imp> imps = new ArrayList<>();\n+\n+        ExtImpMobilefuse firstExtImpMobilefuse = null;\n+        for (Imp imp : request.getImp()) {\n+            try {\n+                final ExtImpMobilefuse extImpMobilefuse = parseImpExt(imp);\n+                firstExtImpMobilefuse = firstExtImpMobilefuse == null ? extImpMobilefuse : firstExtImpMobilefuse;\n+                final Imp modifiedImp = modifyImp(imp, extImpMobilefuse);\n+                imps.add(modifiedImp);\n+            } catch (PreBidException e) {\n+                errors.add(BidderError.badInput(e.getMessage()));\n+            }\n+        }\n+\n+        if (firstExtImpMobilefuse == null) {", "originalCommit": "d021978c1391013fe6220c6e8f040ac2b52ff745", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "f8604d3215347c6447eefbaeb914e1d14c0a74b2", "url": "https://github.com/prebid/prebid-server-java/commit/f8604d3215347c6447eefbaeb914e1d14c0a74b2", "message": "Add bidder and tests", "committedDate": "2020-09-17T12:55:48Z", "type": "commit"}, {"oid": "3918d2748abbe68f7491c29d2386e28daa518962", "url": "https://github.com/prebid/prebid-server-java/commit/3918d2748abbe68f7491c29d2386e28daa518962", "message": "Refactoring code and tests", "committedDate": "2020-09-17T12:55:48Z", "type": "commit"}, {"oid": "858b81c3748d6dbcdaf3ca0162a23d765b0f9fb7", "url": "https://github.com/prebid/prebid-server-java/commit/858b81c3748d6dbcdaf3ca0162a23d765b0f9fb7", "message": "Refactoring code after review", "committedDate": "2020-09-17T13:45:25Z", "type": "commit"}, {"oid": "fc648af432922c8d05fcbeaf5448f17e914e8559", "url": "https://github.com/prebid/prebid-server-java/commit/fc648af432922c8d05fcbeaf5448f17e914e8559", "message": "Merge remote-tracking branch 'github-rubicon/add-mobilefuse-bidder' into add-mobilefuse-bidder\n\n# Conflicts:\n#\tsrc/main/java/org/prebid/server/bidder/mobilefuse/MobilefuseBidder.java\n#\tsrc/test/java/org/prebid/server/bidder/mobilefuse/MobilefuseBidderTest.java", "committedDate": "2020-09-17T13:46:32Z", "type": "commit"}, {"oid": "8a268eae306e8f2e944941e6594d5b1cae081c9f", "url": "https://github.com/prebid/prebid-server-java/commit/8a268eae306e8f2e944941e6594d5b1cae081c9f", "message": "Fix currency of BidderBid", "committedDate": "2020-09-17T15:30:12Z", "type": "commit"}, {"oid": "5f50e439193e3d0286a3badca54c6680e3f5f170", "url": "https://github.com/prebid/prebid-server-java/commit/5f50e439193e3d0286a3badca54c6680e3f5f170", "message": "Merge remote-tracking branch 'github-rubicon/add-mobilefuse-bidder' into add-mobilefuse-bidder", "committedDate": "2020-09-17T15:39:01Z", "type": "commit"}, {"oid": "858b81c3748d6dbcdaf3ca0162a23d765b0f9fb7", "url": "https://github.com/prebid/prebid-server-java/commit/858b81c3748d6dbcdaf3ca0162a23d765b0f9fb7", "message": "Refactoring code after review", "committedDate": "2020-09-17T13:45:25Z", "type": "forcePushed"}, {"oid": "b391e4d5b3caf4a9097e0006f22457351fd6ef95", "url": "https://github.com/prebid/prebid-server-java/commit/b391e4d5b3caf4a9097e0006f22457351fd6ef95", "message": "Merge branch 'master' into add-mobilefuse-bidder", "committedDate": "2020-09-18T12:10:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjYzMzYxNg==", "url": "https://github.com/prebid/prebid-server-java/pull/822#discussion_r492633616", "bodyText": "use Stream API", "author": "DGarbar", "createdAt": "2020-09-22T10:35:50Z", "path": "src/main/java/org/prebid/server/bidder/mobilefuse/MobilefuseBidder.java", "diffHunk": "@@ -51,25 +51,23 @@ public MobilefuseBidder(String endpointUrl, JacksonMapper mapper) {\n \n     @Override\n     public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n-        final List<BidderError> errors = new ArrayList<>();\n         final List<Imp> imps = new ArrayList<>();\n \n-        ExtImpMobilefuse firstExtImpMobilefuse = null;\n-        for (Imp imp : request.getImp()) {\n-            try {\n-                final ExtImpMobilefuse extImpMobilefuse = parseImpExt(imp);\n-                firstExtImpMobilefuse = firstExtImpMobilefuse == null ? extImpMobilefuse : firstExtImpMobilefuse;\n-                final Imp modifiedImp = modifyImp(imp, extImpMobilefuse);\n-                imps.add(modifiedImp);\n-            } catch (PreBidException e) {\n-                errors.add(BidderError.badInput(e.getMessage()));\n-            }\n-        }\n+        final ExtImpMobilefuse firstExtImpMobilefuse = request.getImp().stream()\n+                .map(this::parseImpExt)\n+                .filter(Objects::nonNull)\n+                .findFirst()\n+                .orElse(null);\n \n         if (firstExtImpMobilefuse == null) {\n             return Result.emptyWithError(BidderError.badInput(\"Invalid ExtImpMobilefuse value\"));\n         }\n \n+        for (Imp imp : request.getImp()) {", "originalCommit": "858b81c3748d6dbcdaf3ca0162a23d765b0f9fb7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "6d2a9e81434f3f786b014fe63dafd3aff3fe2ec3", "url": "https://github.com/prebid/prebid-server-java/commit/6d2a9e81434f3f786b014fe63dafd3aff3fe2ec3", "message": "Use stream for getting imps", "committedDate": "2020-09-22T11:09:24Z", "type": "commit"}]}