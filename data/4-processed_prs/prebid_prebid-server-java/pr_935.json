{"pr_number": 935, "pr_title": "Add inMobi bidder", "pr_createdAt": "2020-09-30T16:30:04Z", "pr_url": "https://github.com/prebid/prebid-server-java/pull/935", "timeline": [{"oid": "5dec1e38c4b402ae57a339d0fe86623cb80af4c2", "url": "https://github.com/prebid/prebid-server-java/commit/5dec1e38c4b402ae57a339d0fe86623cb80af4c2", "message": "Add inMobi bidder", "committedDate": "2020-09-30T16:28:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODczNjUwMw==", "url": "https://github.com/prebid/prebid-server-java/pull/935#discussion_r498736503", "bodyText": "Pls use response.cur instead of DEFAULT_BID_CURRENCY.", "author": "rpanchyk", "createdAt": "2020-10-02T10:16:45Z", "path": "src/main/java/org/prebid/server/bidder/inmobi/InmobiBidder.java", "diffHunk": "@@ -0,0 +1,155 @@\n+package org.prebid.server.bidder.inmobi;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.http.HttpMethod;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.inmobi.ExtImpInmobi;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class InmobiBidder implements Bidder<BidRequest> {\n+    private static final TypeReference<ExtPrebid<?, ExtImpInmobi>> INMOBI_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpInmobi>>() {\n+            };\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public InmobiBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+\n+        if (request.getImp().size() == 0) {\n+            BidderError.badInput(\"No impression in the request\");\n+        }\n+\n+        Imp imp = request.getImp().get(0);\n+\n+        ExtImpInmobi extImpInmobi;\n+        try {\n+            extImpInmobi = parseImpExt(imp);\n+        } catch (Exception e) {\n+            return Result.emptyWithError(BidderError.badInput(\"bad InMobi bidder ext\"));\n+        }\n+\n+        if (extImpInmobi.getPlc().length() == 0) {\n+            return Result.emptyWithError(BidderError.badInput(\"'plc' is a required attribute for InMobi's bidder ext\"));\n+        }\n+\n+        if (imp.getBanner() != null) {\n+            Banner banner = imp.getBanner();\n+            if ((banner.getW() == null || banner.getH() == null || banner.getW() == 0\n+                    || banner.getH() == 0) && banner.getFormat().size() > 0) {\n+                Format format = banner.getFormat().get(0);\n+                banner.toBuilder().w(format.getW()).h(format.getH());\n+            }\n+        }\n+\n+        final BidRequest outgoingRequest = request.toBuilder().imp(request.getImp()).build();\n+\n+        final String body = mapper.encode(outgoingRequest);\n+\n+        return Result.of(Collections.singletonList(\n+                HttpRequest.<BidRequest>builder()\n+                        .method(HttpMethod.POST)\n+                        .uri(endpointUrl)\n+                        .headers(HttpUtil.headers())\n+                        .payload(outgoingRequest)\n+                        .body(body)\n+                        .build()),\n+                errors);\n+    }\n+\n+    private ExtImpInmobi parseImpExt(Imp imp) {\n+        try {\n+            return mapper.mapper().convertValue(imp.getExt(), INMOBI_EXT_TYPE_REFERENCE).getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+    }\n+\n+    @Override\n+    public final Result<List<BidderBid>> makeBids(HttpCall<BidRequest> httpCall, BidRequest bidRequest) {\n+        final int statusCode = httpCall.getResponse().getStatusCode();\n+        if (statusCode == HttpResponseStatus.NO_CONTENT.code()) {\n+            return Result.of(Collections.emptyList(), Collections.emptyList());\n+        } else if (statusCode != HttpResponseStatus.OK.code()) {\n+            return Result.emptyWithError(BidderError.badServerResponse(String.format(\"Unexpected http status code: %s.\",\n+                    statusCode)));\n+        }\n+\n+        try {\n+            final BidResponse bidResponse = mapper.decodeValue(httpCall.getResponse().getBody(), BidResponse.class);\n+            return Result.of(extractBids(httpCall.getRequest().getPayload(), bidResponse), Collections.emptyList());\n+        } catch (DecodeException | PreBidException e) {\n+            return Result.emptyWithError(BidderError.badServerResponse(e.getMessage()));\n+        }\n+    }\n+\n+    private List<BidderBid> extractBids(BidRequest bidRequest, BidResponse bidResponse) {\n+        if (bidResponse == null || bidResponse.getSeatbid() == null) {\n+            return Collections.emptyList();\n+        }\n+        return bidsFromResponse(bidRequest, bidResponse);\n+    }\n+\n+    private List<BidderBid> bidsFromResponse(BidRequest bidRequest, BidResponse bidResponse) {\n+        return bidResponse.getSeatbid().stream()\n+                .filter(Objects::nonNull)\n+                .map(SeatBid::getBid)\n+                .filter(Objects::nonNull)\n+                .flatMap(Collection::stream)\n+                .map(bid -> BidderBid.of(bid, getBidType(bid.getImpid(), bidRequest.getImp()), DEFAULT_BID_CURRENCY))", "originalCommit": "5dec1e38c4b402ae57a339d0fe86623cb80af4c2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODczOTQ0NA==", "url": "https://github.com/prebid/prebid-server-java/pull/935#discussion_r498739444", "bodyText": "No need for this check, org.prebid.server.validation.RequestValidator#validate already does it.", "author": "rpanchyk", "createdAt": "2020-10-02T10:23:19Z", "path": "src/main/java/org/prebid/server/bidder/inmobi/InmobiBidder.java", "diffHunk": "@@ -0,0 +1,155 @@\n+package org.prebid.server.bidder.inmobi;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.http.HttpMethod;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.inmobi.ExtImpInmobi;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class InmobiBidder implements Bidder<BidRequest> {\n+    private static final TypeReference<ExtPrebid<?, ExtImpInmobi>> INMOBI_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpInmobi>>() {\n+            };\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public InmobiBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+\n+        if (request.getImp().size() == 0) {", "originalCommit": "5dec1e38c4b402ae57a339d0fe86623cb80af4c2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODczOTk0MQ==", "url": "https://github.com/prebid/prebid-server-java/pull/935#discussion_r498739941", "bodyText": "Minor. Make this variable final as of project code style.", "author": "rpanchyk", "createdAt": "2020-10-02T10:24:19Z", "path": "src/main/java/org/prebid/server/bidder/inmobi/InmobiBidder.java", "diffHunk": "@@ -0,0 +1,155 @@\n+package org.prebid.server.bidder.inmobi;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.http.HttpMethod;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.inmobi.ExtImpInmobi;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class InmobiBidder implements Bidder<BidRequest> {\n+    private static final TypeReference<ExtPrebid<?, ExtImpInmobi>> INMOBI_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpInmobi>>() {\n+            };\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public InmobiBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+\n+        if (request.getImp().size() == 0) {\n+            BidderError.badInput(\"No impression in the request\");\n+        }\n+\n+        Imp imp = request.getImp().get(0);\n+\n+        ExtImpInmobi extImpInmobi;", "originalCommit": "5dec1e38c4b402ae57a339d0fe86623cb80af4c2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODc0MDg0OA==", "url": "https://github.com/prebid/prebid-server-java/pull/935#discussion_r498740848", "bodyText": "Potentially, getPlc() may return NULL.\nPls use StringUtils.isNotEmpty() from apache-commons.", "author": "rpanchyk", "createdAt": "2020-10-02T10:26:27Z", "path": "src/main/java/org/prebid/server/bidder/inmobi/InmobiBidder.java", "diffHunk": "@@ -0,0 +1,155 @@\n+package org.prebid.server.bidder.inmobi;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.http.HttpMethod;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.inmobi.ExtImpInmobi;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class InmobiBidder implements Bidder<BidRequest> {\n+    private static final TypeReference<ExtPrebid<?, ExtImpInmobi>> INMOBI_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpInmobi>>() {\n+            };\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public InmobiBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+\n+        if (request.getImp().size() == 0) {\n+            BidderError.badInput(\"No impression in the request\");\n+        }\n+\n+        Imp imp = request.getImp().get(0);\n+\n+        ExtImpInmobi extImpInmobi;\n+        try {\n+            extImpInmobi = parseImpExt(imp);\n+        } catch (Exception e) {\n+            return Result.emptyWithError(BidderError.badInput(\"bad InMobi bidder ext\"));\n+        }\n+\n+        if (extImpInmobi.getPlc().length() == 0) {", "originalCommit": "5dec1e38c4b402ae57a339d0fe86623cb80af4c2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODc0MTQ2OA==", "url": "https://github.com/prebid/prebid-server-java/pull/935#discussion_r498741468", "bodyText": "No need for additional annotations here, look at org.prebid.server.json.ObjectMapperProvider for our json mapper.", "author": "rpanchyk", "createdAt": "2020-10-02T10:27:58Z", "path": "src/main/java/org/prebid/server/proto/openrtb/ext/request/inmobi/ExtImpInmobi.java", "diffHunk": "@@ -0,0 +1,13 @@\n+package org.prebid.server.proto.openrtb.ext.request.inmobi;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import lombok.AllArgsConstructor;\n+import lombok.Value;\n+\n+@AllArgsConstructor(staticName = \"of\")\n+@Value\n+public class ExtImpInmobi {\n+\n+    @JsonProperty(\"plc\")", "originalCommit": "5dec1e38c4b402ae57a339d0fe86623cb80af4c2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODc0NzU1Mg==", "url": "https://github.com/prebid/prebid-server-java/pull/935#discussion_r498747552", "bodyText": "This w and h are not applied to banner.", "author": "rpanchyk", "createdAt": "2020-10-02T10:42:23Z", "path": "src/main/java/org/prebid/server/bidder/inmobi/InmobiBidder.java", "diffHunk": "@@ -0,0 +1,155 @@\n+package org.prebid.server.bidder.inmobi;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.http.HttpMethod;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.inmobi.ExtImpInmobi;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class InmobiBidder implements Bidder<BidRequest> {\n+    private static final TypeReference<ExtPrebid<?, ExtImpInmobi>> INMOBI_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpInmobi>>() {\n+            };\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public InmobiBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+\n+        if (request.getImp().size() == 0) {\n+            BidderError.badInput(\"No impression in the request\");\n+        }\n+\n+        Imp imp = request.getImp().get(0);\n+\n+        ExtImpInmobi extImpInmobi;\n+        try {\n+            extImpInmobi = parseImpExt(imp);\n+        } catch (Exception e) {\n+            return Result.emptyWithError(BidderError.badInput(\"bad InMobi bidder ext\"));\n+        }\n+\n+        if (extImpInmobi.getPlc().length() == 0) {\n+            return Result.emptyWithError(BidderError.badInput(\"'plc' is a required attribute for InMobi's bidder ext\"));\n+        }\n+\n+        if (imp.getBanner() != null) {\n+            Banner banner = imp.getBanner();\n+            if ((banner.getW() == null || banner.getH() == null || banner.getW() == 0\n+                    || banner.getH() == 0) && banner.getFormat().size() > 0) {\n+                Format format = banner.getFormat().get(0);\n+                banner.toBuilder().w(format.getW()).h(format.getH());", "originalCommit": "5dec1e38c4b402ae57a339d0fe86623cb80af4c2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODc0NzU5OA==", "url": "https://github.com/prebid/prebid-server-java/pull/935#discussion_r498747598", "bodyText": "May be final.", "author": "rpanchyk", "createdAt": "2020-10-02T10:42:32Z", "path": "src/main/java/org/prebid/server/bidder/inmobi/InmobiBidder.java", "diffHunk": "@@ -0,0 +1,155 @@\n+package org.prebid.server.bidder.inmobi;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.http.HttpMethod;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.inmobi.ExtImpInmobi;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class InmobiBidder implements Bidder<BidRequest> {\n+    private static final TypeReference<ExtPrebid<?, ExtImpInmobi>> INMOBI_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpInmobi>>() {\n+            };\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public InmobiBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+\n+        if (request.getImp().size() == 0) {\n+            BidderError.badInput(\"No impression in the request\");\n+        }\n+\n+        Imp imp = request.getImp().get(0);\n+\n+        ExtImpInmobi extImpInmobi;\n+        try {\n+            extImpInmobi = parseImpExt(imp);\n+        } catch (Exception e) {\n+            return Result.emptyWithError(BidderError.badInput(\"bad InMobi bidder ext\"));\n+        }\n+\n+        if (extImpInmobi.getPlc().length() == 0) {\n+            return Result.emptyWithError(BidderError.badInput(\"'plc' is a required attribute for InMobi's bidder ext\"));\n+        }\n+\n+        if (imp.getBanner() != null) {\n+            Banner banner = imp.getBanner();", "originalCommit": "5dec1e38c4b402ae57a339d0fe86623cb80af4c2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODc0NzkzNA==", "url": "https://github.com/prebid/prebid-server-java/pull/935#discussion_r498747934", "bodyText": "May be final.", "author": "rpanchyk", "createdAt": "2020-10-02T10:43:22Z", "path": "src/main/java/org/prebid/server/bidder/inmobi/InmobiBidder.java", "diffHunk": "@@ -0,0 +1,155 @@\n+package org.prebid.server.bidder.inmobi;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.http.HttpMethod;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.inmobi.ExtImpInmobi;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class InmobiBidder implements Bidder<BidRequest> {\n+    private static final TypeReference<ExtPrebid<?, ExtImpInmobi>> INMOBI_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpInmobi>>() {\n+            };\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public InmobiBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+\n+        if (request.getImp().size() == 0) {\n+            BidderError.badInput(\"No impression in the request\");\n+        }\n+\n+        Imp imp = request.getImp().get(0);\n+\n+        ExtImpInmobi extImpInmobi;\n+        try {\n+            extImpInmobi = parseImpExt(imp);\n+        } catch (Exception e) {\n+            return Result.emptyWithError(BidderError.badInput(\"bad InMobi bidder ext\"));\n+        }\n+\n+        if (extImpInmobi.getPlc().length() == 0) {\n+            return Result.emptyWithError(BidderError.badInput(\"'plc' is a required attribute for InMobi's bidder ext\"));\n+        }\n+\n+        if (imp.getBanner() != null) {\n+            Banner banner = imp.getBanner();\n+            if ((banner.getW() == null || banner.getH() == null || banner.getW() == 0\n+                    || banner.getH() == 0) && banner.getFormat().size() > 0) {\n+                Format format = banner.getFormat().get(0);", "originalCommit": "5dec1e38c4b402ae57a339d0fe86623cb80af4c2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODc0ODMwMA==", "url": "https://github.com/prebid/prebid-server-java/pull/935#discussion_r498748300", "bodyText": "Format can be not defined, we need to care of it.", "author": "rpanchyk", "createdAt": "2020-10-02T10:44:12Z", "path": "src/main/java/org/prebid/server/bidder/inmobi/InmobiBidder.java", "diffHunk": "@@ -0,0 +1,155 @@\n+package org.prebid.server.bidder.inmobi;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.http.HttpMethod;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.inmobi.ExtImpInmobi;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class InmobiBidder implements Bidder<BidRequest> {\n+    private static final TypeReference<ExtPrebid<?, ExtImpInmobi>> INMOBI_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpInmobi>>() {\n+            };\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public InmobiBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+\n+        if (request.getImp().size() == 0) {\n+            BidderError.badInput(\"No impression in the request\");\n+        }\n+\n+        Imp imp = request.getImp().get(0);\n+\n+        ExtImpInmobi extImpInmobi;\n+        try {\n+            extImpInmobi = parseImpExt(imp);\n+        } catch (Exception e) {\n+            return Result.emptyWithError(BidderError.badInput(\"bad InMobi bidder ext\"));\n+        }\n+\n+        if (extImpInmobi.getPlc().length() == 0) {\n+            return Result.emptyWithError(BidderError.badInput(\"'plc' is a required attribute for InMobi's bidder ext\"));\n+        }\n+\n+        if (imp.getBanner() != null) {\n+            Banner banner = imp.getBanner();\n+            if ((banner.getW() == null || banner.getH() == null || banner.getW() == 0\n+                    || banner.getH() == 0) && banner.getFormat().size() > 0) {", "originalCommit": "5dec1e38c4b402ae57a339d0fe86623cb80af4c2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODc0OTQ2Ng==", "url": "https://github.com/prebid/prebid-server-java/pull/935#discussion_r498749466", "bodyText": "This line actually doesn't change imps in request.\nImp is immutable object, so we need to apply here new updated list of imps.", "author": "rpanchyk", "createdAt": "2020-10-02T10:47:08Z", "path": "src/main/java/org/prebid/server/bidder/inmobi/InmobiBidder.java", "diffHunk": "@@ -0,0 +1,155 @@\n+package org.prebid.server.bidder.inmobi;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.http.HttpMethod;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.inmobi.ExtImpInmobi;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class InmobiBidder implements Bidder<BidRequest> {\n+    private static final TypeReference<ExtPrebid<?, ExtImpInmobi>> INMOBI_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpInmobi>>() {\n+            };\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public InmobiBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+\n+        if (request.getImp().size() == 0) {\n+            BidderError.badInput(\"No impression in the request\");\n+        }\n+\n+        Imp imp = request.getImp().get(0);\n+\n+        ExtImpInmobi extImpInmobi;\n+        try {\n+            extImpInmobi = parseImpExt(imp);\n+        } catch (Exception e) {\n+            return Result.emptyWithError(BidderError.badInput(\"bad InMobi bidder ext\"));\n+        }\n+\n+        if (extImpInmobi.getPlc().length() == 0) {\n+            return Result.emptyWithError(BidderError.badInput(\"'plc' is a required attribute for InMobi's bidder ext\"));\n+        }\n+\n+        if (imp.getBanner() != null) {\n+            Banner banner = imp.getBanner();\n+            if ((banner.getW() == null || banner.getH() == null || banner.getW() == 0\n+                    || banner.getH() == 0) && banner.getFormat().size() > 0) {\n+                Format format = banner.getFormat().get(0);\n+                banner.toBuilder().w(format.getW()).h(format.getH());\n+            }\n+        }\n+\n+        final BidRequest outgoingRequest = request.toBuilder().imp(request.getImp()).build();", "originalCommit": "5dec1e38c4b402ae57a339d0fe86623cb80af4c2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODc1MTE3NA==", "url": "https://github.com/prebid/prebid-server-java/pull/935#discussion_r498751174", "bodyText": "Pls check the logic in org.prebid.server.bidder.HttpBidderRequester#isOkOrNoContent method and how it is used.\nSuppose, we don't need to check response codes here.\nPS. other bidders can do the same but seems it is redundant action.", "author": "rpanchyk", "createdAt": "2020-10-02T10:51:12Z", "path": "src/main/java/org/prebid/server/bidder/inmobi/InmobiBidder.java", "diffHunk": "@@ -0,0 +1,155 @@\n+package org.prebid.server.bidder.inmobi;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.http.HttpMethod;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.inmobi.ExtImpInmobi;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class InmobiBidder implements Bidder<BidRequest> {\n+    private static final TypeReference<ExtPrebid<?, ExtImpInmobi>> INMOBI_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpInmobi>>() {\n+            };\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public InmobiBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+\n+        if (request.getImp().size() == 0) {\n+            BidderError.badInput(\"No impression in the request\");\n+        }\n+\n+        Imp imp = request.getImp().get(0);\n+\n+        ExtImpInmobi extImpInmobi;\n+        try {\n+            extImpInmobi = parseImpExt(imp);\n+        } catch (Exception e) {\n+            return Result.emptyWithError(BidderError.badInput(\"bad InMobi bidder ext\"));\n+        }\n+\n+        if (extImpInmobi.getPlc().length() == 0) {\n+            return Result.emptyWithError(BidderError.badInput(\"'plc' is a required attribute for InMobi's bidder ext\"));\n+        }\n+\n+        if (imp.getBanner() != null) {\n+            Banner banner = imp.getBanner();\n+            if ((banner.getW() == null || banner.getH() == null || banner.getW() == 0\n+                    || banner.getH() == 0) && banner.getFormat().size() > 0) {\n+                Format format = banner.getFormat().get(0);\n+                banner.toBuilder().w(format.getW()).h(format.getH());\n+            }\n+        }\n+\n+        final BidRequest outgoingRequest = request.toBuilder().imp(request.getImp()).build();\n+\n+        final String body = mapper.encode(outgoingRequest);\n+\n+        return Result.of(Collections.singletonList(\n+                HttpRequest.<BidRequest>builder()\n+                        .method(HttpMethod.POST)\n+                        .uri(endpointUrl)\n+                        .headers(HttpUtil.headers())\n+                        .payload(outgoingRequest)\n+                        .body(body)\n+                        .build()),\n+                errors);\n+    }\n+\n+    private ExtImpInmobi parseImpExt(Imp imp) {\n+        try {\n+            return mapper.mapper().convertValue(imp.getExt(), INMOBI_EXT_TYPE_REFERENCE).getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+    }\n+\n+    @Override\n+    public final Result<List<BidderBid>> makeBids(HttpCall<BidRequest> httpCall, BidRequest bidRequest) {\n+        final int statusCode = httpCall.getResponse().getStatusCode();\n+        if (statusCode == HttpResponseStatus.NO_CONTENT.code()) {", "originalCommit": "5dec1e38c4b402ae57a339d0fe86623cb80af4c2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODc1MTc0NA==", "url": "https://github.com/prebid/prebid-server-java/pull/935#discussion_r498751744", "bodyText": "We can rid off this variable, just return banner in last line of this method.", "author": "rpanchyk", "createdAt": "2020-10-02T10:52:42Z", "path": "src/main/java/org/prebid/server/bidder/inmobi/InmobiBidder.java", "diffHunk": "@@ -0,0 +1,155 @@\n+package org.prebid.server.bidder.inmobi;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.http.HttpMethod;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.inmobi.ExtImpInmobi;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class InmobiBidder implements Bidder<BidRequest> {\n+    private static final TypeReference<ExtPrebid<?, ExtImpInmobi>> INMOBI_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpInmobi>>() {\n+            };\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public InmobiBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+\n+        if (request.getImp().size() == 0) {\n+            BidderError.badInput(\"No impression in the request\");\n+        }\n+\n+        Imp imp = request.getImp().get(0);\n+\n+        ExtImpInmobi extImpInmobi;\n+        try {\n+            extImpInmobi = parseImpExt(imp);\n+        } catch (Exception e) {\n+            return Result.emptyWithError(BidderError.badInput(\"bad InMobi bidder ext\"));\n+        }\n+\n+        if (extImpInmobi.getPlc().length() == 0) {\n+            return Result.emptyWithError(BidderError.badInput(\"'plc' is a required attribute for InMobi's bidder ext\"));\n+        }\n+\n+        if (imp.getBanner() != null) {\n+            Banner banner = imp.getBanner();\n+            if ((banner.getW() == null || banner.getH() == null || banner.getW() == 0\n+                    || banner.getH() == 0) && banner.getFormat().size() > 0) {\n+                Format format = banner.getFormat().get(0);\n+                banner.toBuilder().w(format.getW()).h(format.getH());\n+            }\n+        }\n+\n+        final BidRequest outgoingRequest = request.toBuilder().imp(request.getImp()).build();\n+\n+        final String body = mapper.encode(outgoingRequest);\n+\n+        return Result.of(Collections.singletonList(\n+                HttpRequest.<BidRequest>builder()\n+                        .method(HttpMethod.POST)\n+                        .uri(endpointUrl)\n+                        .headers(HttpUtil.headers())\n+                        .payload(outgoingRequest)\n+                        .body(body)\n+                        .build()),\n+                errors);\n+    }\n+\n+    private ExtImpInmobi parseImpExt(Imp imp) {\n+        try {\n+            return mapper.mapper().convertValue(imp.getExt(), INMOBI_EXT_TYPE_REFERENCE).getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+    }\n+\n+    @Override\n+    public final Result<List<BidderBid>> makeBids(HttpCall<BidRequest> httpCall, BidRequest bidRequest) {\n+        final int statusCode = httpCall.getResponse().getStatusCode();\n+        if (statusCode == HttpResponseStatus.NO_CONTENT.code()) {\n+            return Result.of(Collections.emptyList(), Collections.emptyList());\n+        } else if (statusCode != HttpResponseStatus.OK.code()) {\n+            return Result.emptyWithError(BidderError.badServerResponse(String.format(\"Unexpected http status code: %s.\",\n+                    statusCode)));\n+        }\n+\n+        try {\n+            final BidResponse bidResponse = mapper.decodeValue(httpCall.getResponse().getBody(), BidResponse.class);\n+            return Result.of(extractBids(httpCall.getRequest().getPayload(), bidResponse), Collections.emptyList());\n+        } catch (DecodeException | PreBidException e) {\n+            return Result.emptyWithError(BidderError.badServerResponse(e.getMessage()));\n+        }\n+    }\n+\n+    private List<BidderBid> extractBids(BidRequest bidRequest, BidResponse bidResponse) {\n+        if (bidResponse == null || bidResponse.getSeatbid() == null) {\n+            return Collections.emptyList();\n+        }\n+        return bidsFromResponse(bidRequest, bidResponse);\n+    }\n+\n+    private List<BidderBid> bidsFromResponse(BidRequest bidRequest, BidResponse bidResponse) {\n+        return bidResponse.getSeatbid().stream()\n+                .filter(Objects::nonNull)\n+                .map(SeatBid::getBid)\n+                .filter(Objects::nonNull)\n+                .flatMap(Collection::stream)\n+                .map(bid -> BidderBid.of(bid, getBidType(bid.getImpid(), bidRequest.getImp()), DEFAULT_BID_CURRENCY))\n+                .collect(Collectors.toList());\n+    }\n+\n+    protected BidType getBidType(String impId, List<Imp> imps) {\n+        BidType mediaType = BidType.banner;", "originalCommit": "5dec1e38c4b402ae57a339d0fe86623cb80af4c2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODc1MjA4Nw==", "url": "https://github.com/prebid/prebid-server-java/pull/935#discussion_r498752087", "bodyText": "Pls combine with the condition above and return video instead if breaking the loop.", "author": "rpanchyk", "createdAt": "2020-10-02T10:53:31Z", "path": "src/main/java/org/prebid/server/bidder/inmobi/InmobiBidder.java", "diffHunk": "@@ -0,0 +1,155 @@\n+package org.prebid.server.bidder.inmobi;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.http.HttpMethod;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.inmobi.ExtImpInmobi;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class InmobiBidder implements Bidder<BidRequest> {\n+    private static final TypeReference<ExtPrebid<?, ExtImpInmobi>> INMOBI_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpInmobi>>() {\n+            };\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public InmobiBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+\n+        if (request.getImp().size() == 0) {\n+            BidderError.badInput(\"No impression in the request\");\n+        }\n+\n+        Imp imp = request.getImp().get(0);\n+\n+        ExtImpInmobi extImpInmobi;\n+        try {\n+            extImpInmobi = parseImpExt(imp);\n+        } catch (Exception e) {\n+            return Result.emptyWithError(BidderError.badInput(\"bad InMobi bidder ext\"));\n+        }\n+\n+        if (extImpInmobi.getPlc().length() == 0) {\n+            return Result.emptyWithError(BidderError.badInput(\"'plc' is a required attribute for InMobi's bidder ext\"));\n+        }\n+\n+        if (imp.getBanner() != null) {\n+            Banner banner = imp.getBanner();\n+            if ((banner.getW() == null || banner.getH() == null || banner.getW() == 0\n+                    || banner.getH() == 0) && banner.getFormat().size() > 0) {\n+                Format format = banner.getFormat().get(0);\n+                banner.toBuilder().w(format.getW()).h(format.getH());\n+            }\n+        }\n+\n+        final BidRequest outgoingRequest = request.toBuilder().imp(request.getImp()).build();\n+\n+        final String body = mapper.encode(outgoingRequest);\n+\n+        return Result.of(Collections.singletonList(\n+                HttpRequest.<BidRequest>builder()\n+                        .method(HttpMethod.POST)\n+                        .uri(endpointUrl)\n+                        .headers(HttpUtil.headers())\n+                        .payload(outgoingRequest)\n+                        .body(body)\n+                        .build()),\n+                errors);\n+    }\n+\n+    private ExtImpInmobi parseImpExt(Imp imp) {\n+        try {\n+            return mapper.mapper().convertValue(imp.getExt(), INMOBI_EXT_TYPE_REFERENCE).getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+    }\n+\n+    @Override\n+    public final Result<List<BidderBid>> makeBids(HttpCall<BidRequest> httpCall, BidRequest bidRequest) {\n+        final int statusCode = httpCall.getResponse().getStatusCode();\n+        if (statusCode == HttpResponseStatus.NO_CONTENT.code()) {\n+            return Result.of(Collections.emptyList(), Collections.emptyList());\n+        } else if (statusCode != HttpResponseStatus.OK.code()) {\n+            return Result.emptyWithError(BidderError.badServerResponse(String.format(\"Unexpected http status code: %s.\",\n+                    statusCode)));\n+        }\n+\n+        try {\n+            final BidResponse bidResponse = mapper.decodeValue(httpCall.getResponse().getBody(), BidResponse.class);\n+            return Result.of(extractBids(httpCall.getRequest().getPayload(), bidResponse), Collections.emptyList());\n+        } catch (DecodeException | PreBidException e) {\n+            return Result.emptyWithError(BidderError.badServerResponse(e.getMessage()));\n+        }\n+    }\n+\n+    private List<BidderBid> extractBids(BidRequest bidRequest, BidResponse bidResponse) {\n+        if (bidResponse == null || bidResponse.getSeatbid() == null) {\n+            return Collections.emptyList();\n+        }\n+        return bidsFromResponse(bidRequest, bidResponse);\n+    }\n+\n+    private List<BidderBid> bidsFromResponse(BidRequest bidRequest, BidResponse bidResponse) {\n+        return bidResponse.getSeatbid().stream()\n+                .filter(Objects::nonNull)\n+                .map(SeatBid::getBid)\n+                .filter(Objects::nonNull)\n+                .flatMap(Collection::stream)\n+                .map(bid -> BidderBid.of(bid, getBidType(bid.getImpid(), bidRequest.getImp()), DEFAULT_BID_CURRENCY))\n+                .collect(Collectors.toList());\n+    }\n+\n+    protected BidType getBidType(String impId, List<Imp> imps) {\n+        BidType mediaType = BidType.banner;\n+        for (Imp imp : imps) {\n+            if (imp.getId().equals(impId)) {\n+                if (imp.getVideo() != null) {", "originalCommit": "5dec1e38c4b402ae57a339d0fe86623cb80af4c2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODc1MzEwMw==", "url": "https://github.com/prebid/prebid-server-java/pull/935#discussion_r498753103", "bodyText": "Pls fix typo in Baner", "author": "rpanchyk", "createdAt": "2020-10-02T10:56:15Z", "path": "src/test/java/org/prebid/server/bidder/inmobi/InmobiBidderTest.java", "diffHunk": "@@ -0,0 +1,229 @@\n+package org.prebid.server.bidder.inmobi;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Native;\n+import com.iab.openrtb.request.Video;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.prebid.server.VertxTest;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.HttpResponse;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.inmobi.ExtImpInmobi;\n+\n+import java.util.List;\n+import java.util.function.Function;\n+\n+import static java.util.Collections.singletonList;\n+import static java.util.function.Function.identity;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;\n+import static org.prebid.server.proto.openrtb.ext.response.BidType.banner;\n+import static org.prebid.server.proto.openrtb.ext.response.BidType.video;\n+\n+public class InmobiBidderTest extends VertxTest {\n+\n+    private static final String ENDPOINT_URL = \"https://api.w.inmobi.com/showad/openrtb/bidder/prebid\";\n+\n+    private InmobiBidder inmobiBidder;\n+\n+    @Before\n+    public void setUp() {\n+        inmobiBidder = new InmobiBidder(ENDPOINT_URL, jacksonMapper);\n+    }\n+\n+    @Test\n+    public void creationShouldFailOnInvalidEndpointUrl() {\n+        assertThatIllegalArgumentException().isThrownBy(() -> new InmobiBidder(\"invalid_url\", jacksonMapper));\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldReturnErrorIfImpExtCouldNotBeParsed2() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(\n+                impBuilder -> impBuilder\n+                        .id(\"123\")\n+                        .ext(mapper.valueToTree(ExtPrebid.of(null, ExtImpInmobi.of(\"\")))));\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = inmobiBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1);\n+        assertThat(result.getErrors().get(0).getMessage())\n+                .startsWith(\"'plc' is a required attribute for InMobi's bidder ext\");\n+    }\n+\n+    @Test\n+    public void makeHttpRequestsShouldReturnErrorIfImpExtCouldNotBeParsed() {\n+        // given\n+        final BidRequest bidRequest = givenBidRequest(\n+                impBuilder -> impBuilder\n+                        .id(\"123\")\n+                        .ext(mapper.valueToTree(ExtPrebid.of(null, mapper.createArrayNode()))));\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = inmobiBidder.makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1);\n+        assertThat(result.getErrors().get(0).getMessage()).startsWith(\"bad InMobi bidder ext\");\n+    }\n+\n+    @Test\n+    public void makeBidsShouldReturnErrorIfResponseBodyCouldNotBeParsed() {\n+        // given\n+        final HttpCall<BidRequest> httpCall = givenHttpCall(null, \"invalid\");\n+\n+        // when\n+        final Result<List<BidderBid>> result = inmobiBidder.makeBids(httpCall, null);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1);\n+        assertThat(result.getErrors().get(0).getMessage()).startsWith(\"Failed to decode: Unrecognized token\");\n+        assertThat(result.getErrors().get(0).getType()).isEqualTo(BidderError.Type.bad_server_response);\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeBidsShouldReturnEmptyListIfBidResponseIsNull() throws JsonProcessingException {\n+        // given\n+        final HttpCall<BidRequest> httpCall = givenHttpCall(null,\n+                mapper.writeValueAsString(null));\n+\n+        // when\n+        final Result<List<BidderBid>> result = inmobiBidder.makeBids(httpCall, null);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeBidsShouldReturnEmptyListIfBidResponseSeatBidIsNull() throws JsonProcessingException {\n+        // given\n+        final HttpCall<BidRequest> httpCall = givenHttpCall(null,\n+                mapper.writeValueAsString(BidResponse.builder().build()));\n+\n+        // when\n+        final Result<List<BidderBid>> result = inmobiBidder.makeBids(httpCall, null);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue()).isEmpty();\n+    }\n+\n+    @Test\n+    public void makeBidsShouldReturnBannerBidIfBannerIsPresentInRequestImp() throws JsonProcessingException {\n+        // given\n+        final HttpCall<BidRequest> httpCall = givenHttpCall(\n+                BidRequest.builder()\n+                        .imp(singletonList(Imp.builder().id(\"123\").banner(Banner.builder().build()).build()))\n+                        .build(),\n+                mapper.writeValueAsString(\n+                        givenBidResponse(bidBuilder -> bidBuilder.impid(\"123\"))));\n+\n+        // when\n+        final Result<List<BidderBid>> result = inmobiBidder.makeBids(httpCall, null);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue())\n+                .containsOnly(BidderBid.of(Bid.builder().impid(\"123\").build(), banner, \"USD\"));\n+    }\n+\n+    @Test\n+    public void makeBidsShouldReturnVideoBidIfVideoIsPresentInRequestImp() throws JsonProcessingException {\n+        // given\n+        final HttpCall<BidRequest> httpCall = givenHttpCall(BidRequest.builder()\n+                        .imp(singletonList(Imp.builder().id(\"123\").video(Video.builder().build()).build()))\n+                        .build(),\n+                mapper.writeValueAsString(\n+                        givenBidResponse(bidBuilder -> bidBuilder.impid(\"123\"))));\n+\n+        // when\n+        final Result<List<BidderBid>> result = inmobiBidder.makeBids(httpCall, null);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue())\n+                .containsOnly(BidderBid.of(Bid.builder().impid(\"123\").build(), video, \"USD\"));\n+    }\n+\n+    @Test\n+    public void makeBidsShouldReturnBanerBidIfNativeIsPresentInRequestImp() throws JsonProcessingException {", "originalCommit": "5dec1e38c4b402ae57a339d0fe86623cb80af4c2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODc1Mzg1OQ==", "url": "https://github.com/prebid/prebid-server-java/pull/935#discussion_r498753859", "bodyText": "This json node can be removed since aliases is not used in test. Pls remove it from PBS initial request.", "author": "rpanchyk", "createdAt": "2020-10-02T10:58:04Z", "path": "src/test/resources/org/prebid/server/it/openrtb2/inmobi/test-inmobi-bid-request-1.json", "diffHunk": "@@ -0,0 +1,94 @@\n+{\n+  \"id\": \"tid\",\n+  \"imp\": [\n+    {\n+      \"id\": \"test-imp-banner-id\",\n+      \"banner\": {\n+        \"format\": [\n+          {\n+            \"w\": 300,\n+            \"h\": 250\n+          }\n+        ],\n+        \"w\": 500,\n+        \"h\": 400\n+      },\n+      \"ext\": {\n+        \"bidder\": {\n+          \"plc\": \"9042\"\n+        }\n+      }\n+    }\n+  ],\n+  \"site\": {\n+    \"domain\": \"example.com\",\n+    \"page\": \"http://www.example.com\",\n+    \"publisher\": {\n+      \"id\": \"publisherId\"\n+    },\n+    \"ext\": {\n+      \"amp\": 0\n+    }\n+  },\n+  \"device\": {\n+    \"ua\": \"userAgent\",\n+    \"dnt\": 2,\n+    \"ip\": \"193.168.244.1\",\n+    \"pxratio\": 4.2,\n+    \"language\": \"en\",\n+    \"ifa\": \"ifaId\"\n+  },\n+  \"user\": {\n+    \"ext\": {\n+      \"digitrust\": {\n+        \"id\": \"id\",\n+        \"keyv\": 123,\n+        \"pref\": 0\n+      },\n+      \"consent\": \"consentValue\"\n+    }\n+  },\n+  \"at\": 1,\n+  \"tmax\": 5000,\n+  \"cur\": [\n+    \"USD\"\n+  ],\n+  \"source\": {\n+    \"fd\": 1,\n+    \"tid\": \"tid\"\n+  },\n+  \"regs\": {\n+    \"ext\": {\n+      \"gdpr\": 0\n+    }\n+  },\n+  \"ext\": {\n+    \"prebid\": {\n+      \"debug\": 1,\n+      \"aliases\": {", "originalCommit": "5dec1e38c4b402ae57a339d0fe86623cb80af4c2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODc1NDM5Ng==", "url": "https://github.com/prebid/prebid-server-java/pull/935#discussion_r498754396", "bodyText": "No need for debug here, we use it in several key bidders like appnexus and rubicon. Pls remove it from PBS initial request.", "author": "rpanchyk", "createdAt": "2020-10-02T10:59:24Z", "path": "src/test/resources/org/prebid/server/it/openrtb2/inmobi/test-inmobi-bid-request-1.json", "diffHunk": "@@ -0,0 +1,94 @@\n+{\n+  \"id\": \"tid\",\n+  \"imp\": [\n+    {\n+      \"id\": \"test-imp-banner-id\",\n+      \"banner\": {\n+        \"format\": [\n+          {\n+            \"w\": 300,\n+            \"h\": 250\n+          }\n+        ],\n+        \"w\": 500,\n+        \"h\": 400\n+      },\n+      \"ext\": {\n+        \"bidder\": {\n+          \"plc\": \"9042\"\n+        }\n+      }\n+    }\n+  ],\n+  \"site\": {\n+    \"domain\": \"example.com\",\n+    \"page\": \"http://www.example.com\",\n+    \"publisher\": {\n+      \"id\": \"publisherId\"\n+    },\n+    \"ext\": {\n+      \"amp\": 0\n+    }\n+  },\n+  \"device\": {\n+    \"ua\": \"userAgent\",\n+    \"dnt\": 2,\n+    \"ip\": \"193.168.244.1\",\n+    \"pxratio\": 4.2,\n+    \"language\": \"en\",\n+    \"ifa\": \"ifaId\"\n+  },\n+  \"user\": {\n+    \"ext\": {\n+      \"digitrust\": {\n+        \"id\": \"id\",\n+        \"keyv\": 123,\n+        \"pref\": 0\n+      },\n+      \"consent\": \"consentValue\"\n+    }\n+  },\n+  \"at\": 1,\n+  \"tmax\": 5000,\n+  \"cur\": [\n+    \"USD\"\n+  ],\n+  \"source\": {\n+    \"fd\": 1,\n+    \"tid\": \"tid\"\n+  },\n+  \"regs\": {\n+    \"ext\": {\n+      \"gdpr\": 0\n+    }\n+  },\n+  \"ext\": {\n+    \"prebid\": {\n+      \"debug\": 1,", "originalCommit": "5dec1e38c4b402ae57a339d0fe86623cb80af4c2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODc1NjIwMQ==", "url": "https://github.com/prebid/prebid-server-java/pull/935#discussion_r498756201", "bodyText": "This can be removed.", "author": "rpanchyk", "createdAt": "2020-10-02T11:04:11Z", "path": "src/test/resources/org/prebid/server/it/openrtb2/inmobi/test-inmobi-bid-request-1.json", "diffHunk": "@@ -0,0 +1,94 @@\n+{\n+  \"id\": \"tid\",\n+  \"imp\": [\n+    {\n+      \"id\": \"test-imp-banner-id\",\n+      \"banner\": {\n+        \"format\": [\n+          {\n+            \"w\": 300,\n+            \"h\": 250\n+          }\n+        ],\n+        \"w\": 500,\n+        \"h\": 400\n+      },\n+      \"ext\": {\n+        \"bidder\": {\n+          \"plc\": \"9042\"\n+        }\n+      }\n+    }\n+  ],\n+  \"site\": {\n+    \"domain\": \"example.com\",\n+    \"page\": \"http://www.example.com\",\n+    \"publisher\": {\n+      \"id\": \"publisherId\"\n+    },\n+    \"ext\": {\n+      \"amp\": 0\n+    }\n+  },\n+  \"device\": {\n+    \"ua\": \"userAgent\",\n+    \"dnt\": 2,\n+    \"ip\": \"193.168.244.1\",\n+    \"pxratio\": 4.2,\n+    \"language\": \"en\",\n+    \"ifa\": \"ifaId\"\n+  },\n+  \"user\": {\n+    \"ext\": {\n+      \"digitrust\": {\n+        \"id\": \"id\",\n+        \"keyv\": 123,\n+        \"pref\": 0\n+      },\n+      \"consent\": \"consentValue\"\n+    }\n+  },\n+  \"at\": 1,\n+  \"tmax\": 5000,\n+  \"cur\": [\n+    \"USD\"\n+  ],\n+  \"source\": {\n+    \"fd\": 1,\n+    \"tid\": \"tid\"\n+  },\n+  \"regs\": {\n+    \"ext\": {\n+      \"gdpr\": 0\n+    }\n+  },\n+  \"ext\": {\n+    \"prebid\": {\n+      \"debug\": 1,\n+      \"aliases\": {\n+        \"appnexusAlias\": \"appnexus\",\n+        \"conversantAlias\": \"conversant\"\n+      },\n+      \"targeting\": {\n+        \"pricegranularity\": {\n+          \"precision\": 2,\n+          \"ranges\": [\n+            {\n+              \"max\": 20,\n+              \"increment\": 0.1\n+            }\n+          ]\n+        },\n+        \"includewinners\": true,\n+        \"includebidderkeys\": true\n+      },\n+      \"cache\": {\n+        \"bids\": {},\n+        \"vastxml\": {\n+          \"ttlseconds\": 120", "originalCommit": "5dec1e38c4b402ae57a339d0fe86623cb80af4c2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODc1NjYxMQ==", "url": "https://github.com/prebid/prebid-server-java/pull/935#discussion_r498756611", "bodyText": "This can be removed. Since it is core functionality processing. Pls remove it from PBS initial request.", "author": "rpanchyk", "createdAt": "2020-10-02T11:05:18Z", "path": "src/test/resources/org/prebid/server/it/openrtb2/inmobi/test-inmobi-bid-request-1.json", "diffHunk": "@@ -0,0 +1,94 @@\n+{\n+  \"id\": \"tid\",\n+  \"imp\": [\n+    {\n+      \"id\": \"test-imp-banner-id\",\n+      \"banner\": {\n+        \"format\": [\n+          {\n+            \"w\": 300,\n+            \"h\": 250\n+          }\n+        ],\n+        \"w\": 500,\n+        \"h\": 400\n+      },\n+      \"ext\": {\n+        \"bidder\": {\n+          \"plc\": \"9042\"\n+        }\n+      }\n+    }\n+  ],\n+  \"site\": {\n+    \"domain\": \"example.com\",\n+    \"page\": \"http://www.example.com\",\n+    \"publisher\": {\n+      \"id\": \"publisherId\"\n+    },\n+    \"ext\": {\n+      \"amp\": 0\n+    }\n+  },\n+  \"device\": {\n+    \"ua\": \"userAgent\",\n+    \"dnt\": 2,\n+    \"ip\": \"193.168.244.1\",\n+    \"pxratio\": 4.2,\n+    \"language\": \"en\",\n+    \"ifa\": \"ifaId\"\n+  },\n+  \"user\": {\n+    \"ext\": {\n+      \"digitrust\": {\n+        \"id\": \"id\",\n+        \"keyv\": 123,\n+        \"pref\": 0\n+      },\n+      \"consent\": \"consentValue\"\n+    }\n+  },\n+  \"at\": 1,\n+  \"tmax\": 5000,\n+  \"cur\": [\n+    \"USD\"\n+  ],\n+  \"source\": {\n+    \"fd\": 1,\n+    \"tid\": \"tid\"\n+  },\n+  \"regs\": {\n+    \"ext\": {\n+      \"gdpr\": 0\n+    }\n+  },\n+  \"ext\": {\n+    \"prebid\": {\n+      \"debug\": 1,\n+      \"aliases\": {\n+        \"appnexusAlias\": \"appnexus\",\n+        \"conversantAlias\": \"conversant\"\n+      },\n+      \"targeting\": {\n+        \"pricegranularity\": {", "originalCommit": "5dec1e38c4b402ae57a339d0fe86623cb80af4c2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODc1NjgxMg==", "url": "https://github.com/prebid/prebid-server-java/pull/935#discussion_r498756812", "bodyText": "No need for digitrust in bidder test. Pls remove it from PBS initial request.", "author": "rpanchyk", "createdAt": "2020-10-02T11:05:51Z", "path": "src/test/resources/org/prebid/server/it/openrtb2/inmobi/test-inmobi-bid-request-1.json", "diffHunk": "@@ -0,0 +1,94 @@\n+{\n+  \"id\": \"tid\",\n+  \"imp\": [\n+    {\n+      \"id\": \"test-imp-banner-id\",\n+      \"banner\": {\n+        \"format\": [\n+          {\n+            \"w\": 300,\n+            \"h\": 250\n+          }\n+        ],\n+        \"w\": 500,\n+        \"h\": 400\n+      },\n+      \"ext\": {\n+        \"bidder\": {\n+          \"plc\": \"9042\"\n+        }\n+      }\n+    }\n+  ],\n+  \"site\": {\n+    \"domain\": \"example.com\",\n+    \"page\": \"http://www.example.com\",\n+    \"publisher\": {\n+      \"id\": \"publisherId\"\n+    },\n+    \"ext\": {\n+      \"amp\": 0\n+    }\n+  },\n+  \"device\": {\n+    \"ua\": \"userAgent\",\n+    \"dnt\": 2,\n+    \"ip\": \"193.168.244.1\",\n+    \"pxratio\": 4.2,\n+    \"language\": \"en\",\n+    \"ifa\": \"ifaId\"\n+  },\n+  \"user\": {\n+    \"ext\": {\n+      \"digitrust\": {", "originalCommit": "5dec1e38c4b402ae57a339d0fe86623cb80af4c2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODc1NzcwOA==", "url": "https://github.com/prebid/prebid-server-java/pull/935#discussion_r498757708", "bodyText": "Minor. Make indent here.\nPS. if we'll have a time, may be it make sense to add checkstyle rule for this case.", "author": "rpanchyk", "createdAt": "2020-10-02T11:08:16Z", "path": "src/main/java/org/prebid/server/bidder/inmobi/InmobiBidder.java", "diffHunk": "@@ -0,0 +1,155 @@\n+package org.prebid.server.bidder.inmobi;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.http.HttpMethod;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.inmobi.ExtImpInmobi;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class InmobiBidder implements Bidder<BidRequest> {\n+    private static final TypeReference<ExtPrebid<?, ExtImpInmobi>> INMOBI_EXT_TYPE_REFERENCE =", "originalCommit": "5dec1e38c4b402ae57a339d0fe86623cb80af4c2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "c63d30b4418eadc56248dc8a19a7de249143355c", "url": "https://github.com/prebid/prebid-server-java/commit/c63d30b4418eadc56248dc8a19a7de249143355c", "message": "Fixes after review", "committedDate": "2020-10-05T10:00:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTUwNDY1NA==", "url": "https://github.com/prebid/prebid-server-java/pull/935#discussion_r499504654", "bodyText": "We don't need additional checks here since org.prebid.server.currency.CurrencyConversionService#convertCurrency already does it.", "author": "rpanchyk", "createdAt": "2020-10-05T10:41:23Z", "path": "src/main/java/org/prebid/server/bidder/inmobi/InmobiBidder.java", "diffHunk": "@@ -0,0 +1,147 @@\n+package org.prebid.server.bidder.inmobi;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.lang3.StringUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.inmobi.ExtImpInmobi;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class InmobiBidder implements Bidder<BidRequest> {\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpInmobi>> INMOBI_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpInmobi>>() {\n+            };\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public InmobiBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+\n+        Imp imp = request.getImp().get(0);\n+\n+        final ExtImpInmobi extImpInmobi;\n+\n+        try {\n+            extImpInmobi = parseImpExt(imp);\n+        } catch (Exception e) {\n+            return Result.emptyWithError(BidderError.badInput(\"bad InMobi bidder ext\"));\n+        }\n+\n+        if (StringUtils.isEmpty(extImpInmobi.getPlc())) {\n+            return Result.emptyWithError(BidderError.badInput(\"'plc' is a required attribute for InMobi's bidder ext\"));\n+        }\n+\n+        if (imp.getBanner() != null) {\n+            final Banner banner = imp.getBanner();\n+            if ((banner.getW() == null || banner.getH() == null || banner.getW() == 0 || banner.getH() == 0)\n+                    && !Objects.isNull(banner.getFormat()) && banner.getFormat().size() > 0) {\n+                final Format format = banner.getFormat().get(0);\n+                imp = imp.toBuilder().banner(banner.toBuilder().w(format.getW()).h(format.getH()).build()).build();\n+            }\n+        }\n+\n+        final BidRequest outgoingRequest = request.toBuilder().imp(Collections.singletonList(imp)).build();\n+\n+        return Result.of(Collections.singletonList(\n+                HttpRequest.<BidRequest>builder()\n+                        .method(HttpMethod.POST)\n+                        .uri(endpointUrl)\n+                        .headers(HttpUtil.headers())\n+                        .payload(outgoingRequest)\n+                        .body(mapper.encode(outgoingRequest))\n+                        .build()),\n+                errors);\n+    }\n+\n+    private ExtImpInmobi parseImpExt(Imp imp) {\n+        try {\n+            return mapper.mapper().convertValue(imp.getExt(), INMOBI_EXT_TYPE_REFERENCE).getBidder();\n+        } catch (IllegalArgumentException e) {\n+            throw new PreBidException(e.getMessage(), e);\n+        }\n+    }\n+\n+    @Override\n+    public final Result<List<BidderBid>> makeBids(HttpCall<BidRequest> httpCall, BidRequest bidRequest) {\n+\n+        final int statusCode = httpCall.getResponse().getStatusCode();\n+        if (statusCode == HttpResponseStatus.NO_CONTENT.code()) {\n+            return Result.of(Collections.emptyList(), Collections.emptyList());\n+        }\n+\n+        try {\n+            final BidResponse bidResponse = mapper.decodeValue(httpCall.getResponse().getBody(), BidResponse.class);\n+            return Result.of(extractBids(httpCall.getRequest().getPayload(), bidResponse), Collections.emptyList());\n+        } catch (DecodeException | PreBidException e) {\n+            return Result.emptyWithError(BidderError.badServerResponse(e.getMessage()));\n+        }\n+    }\n+\n+    private List<BidderBid> extractBids(BidRequest bidRequest, BidResponse bidResponse) {\n+        if (bidResponse == null || bidResponse.getSeatbid() == null) {\n+            return Collections.emptyList();\n+        }\n+        return bidsFromResponse(bidRequest, bidResponse);\n+    }\n+\n+    private List<BidderBid> bidsFromResponse(BidRequest bidRequest, BidResponse bidResponse) {\n+        return bidResponse.getSeatbid().stream()\n+                .filter(Objects::nonNull)\n+                .map(SeatBid::getBid)\n+                .filter(Objects::nonNull)\n+                .flatMap(Collection::stream)\n+                .map(bid -> BidderBid.of(bid, getBidType(bid.getImpid(), bidRequest.getImp()),\n+                        Objects.isNull(bidResponse.getCur()) ? DEFAULT_BID_CURRENCY : bidResponse.getCur()))", "originalCommit": "c63d30b4418eadc56248dc8a19a7de249143355c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTUwNTg5MA==", "url": "https://github.com/prebid/prebid-server-java/pull/935#discussion_r499505890", "bodyText": "Please don't use real URLs in tests. This can confuse when urls will be changed in configuration.", "author": "rpanchyk", "createdAt": "2020-10-05T10:43:48Z", "path": "src/test/java/org/prebid/server/bidder/inmobi/InmobiBidderTest.java", "diffHunk": "@@ -0,0 +1,229 @@\n+package org.prebid.server.bidder.inmobi;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.request.Native;\n+import com.iab.openrtb.request.Video;\n+import com.iab.openrtb.response.Bid;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.prebid.server.VertxTest;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.HttpResponse;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.inmobi.ExtImpInmobi;\n+\n+import java.util.List;\n+import java.util.function.Function;\n+\n+import static java.util.Collections.singletonList;\n+import static java.util.function.Function.identity;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;\n+import static org.prebid.server.proto.openrtb.ext.response.BidType.banner;\n+import static org.prebid.server.proto.openrtb.ext.response.BidType.video;\n+\n+public class InmobiBidderTest extends VertxTest {\n+\n+    private static final String ENDPOINT_URL = \"https://api.w.inmobi.com/showad/openrtb/bidder/prebid\";", "originalCommit": "c63d30b4418eadc56248dc8a19a7de249143355c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTUwNjUyMw==", "url": "https://github.com/prebid/prebid-server-java/pull/935#discussion_r499506523", "bodyText": "No need in-place currency rates in bidder tests.", "author": "rpanchyk", "createdAt": "2020-10-05T10:45:08Z", "path": "src/test/resources/org/prebid/server/it/openrtb2/inmobi/test-auction-inmobi-request.json", "diffHunk": "@@ -0,0 +1,71 @@\n+{\n+  \"id\": \"tid\",\n+  \"imp\": [\n+    {\n+      \"id\": \"impId001\",\n+      \"banner\": {\n+        \"format\": [\n+          {\n+            \"w\": 300,\n+            \"h\": 250\n+          }\n+        ]\n+      },\n+      \"ext\": {\n+        \"inmobi\": {\n+          \"plc\": \"plc\"\n+        }\n+      }\n+    }\n+  ],\n+  \"device\": {\n+    \"pxratio\": 4.2,\n+    \"dnt\": 2,\n+    \"language\": \"en\",\n+    \"ifa\": \"ifaId\"\n+  },\n+  \"site\": {\n+    \"publisher\": {\n+      \"id\": \"publisherId\"\n+    }\n+  },\n+  \"at\": 1,\n+  \"tmax\": 5000,\n+  \"cur\": [\n+    \"USD\"\n+  ],\n+  \"source\": {\n+    \"fd\": 1,\n+    \"tid\": \"tid\"\n+  },\n+  \"ext\": {\n+    \"prebid\": {\n+      \"currency\": {", "originalCommit": "c63d30b4418eadc56248dc8a19a7de249143355c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTUwNzc5Nw==", "url": "https://github.com/prebid/prebid-server-java/pull/935#discussion_r499507797", "bodyText": "We can remove entire user object here since GDPR is 0 in request.", "author": "rpanchyk", "createdAt": "2020-10-05T10:47:39Z", "path": "src/test/resources/org/prebid/server/it/openrtb2/inmobi/test-auction-inmobi-request.json", "diffHunk": "@@ -0,0 +1,71 @@\n+{\n+  \"id\": \"tid\",\n+  \"imp\": [\n+    {\n+      \"id\": \"impId001\",\n+      \"banner\": {\n+        \"format\": [\n+          {\n+            \"w\": 300,\n+            \"h\": 250\n+          }\n+        ]\n+      },\n+      \"ext\": {\n+        \"inmobi\": {\n+          \"plc\": \"plc\"\n+        }\n+      }\n+    }\n+  ],\n+  \"device\": {\n+    \"pxratio\": 4.2,\n+    \"dnt\": 2,\n+    \"language\": \"en\",\n+    \"ifa\": \"ifaId\"\n+  },\n+  \"site\": {\n+    \"publisher\": {\n+      \"id\": \"publisherId\"\n+    }\n+  },\n+  \"at\": 1,\n+  \"tmax\": 5000,\n+  \"cur\": [\n+    \"USD\"\n+  ],\n+  \"source\": {\n+    \"fd\": 1,\n+    \"tid\": \"tid\"\n+  },\n+  \"ext\": {\n+    \"prebid\": {\n+      \"currency\": {\n+        \"rates\": {\n+          \"EUR\": {\n+            \"USD\": 1.2406\n+          },\n+          \"USD\": {\n+            \"EUR\": 0.8110\n+          }\n+        }\n+      },\n+      \"targeting\": {\n+      },\n+      \"cache\": {\n+        \"bids\": {}\n+      },\n+      \"auctiontimestamp\": 1000\n+    }\n+  },\n+  \"user\": {", "originalCommit": "c63d30b4418eadc56248dc8a19a7de249143355c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTUxMTAxOA==", "url": "https://github.com/prebid/prebid-server-java/pull/935#discussion_r499511018", "bodyText": "Would be better if we'll avoid re-assignment for variables. So, make this one final and if you want to updated it - just create another like updatedImp with desired changes.", "author": "rpanchyk", "createdAt": "2020-10-05T10:54:17Z", "path": "src/main/java/org/prebid/server/bidder/inmobi/InmobiBidder.java", "diffHunk": "@@ -0,0 +1,147 @@\n+package org.prebid.server.bidder.inmobi;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.lang3.StringUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.inmobi.ExtImpInmobi;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class InmobiBidder implements Bidder<BidRequest> {\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpInmobi>> INMOBI_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpInmobi>>() {\n+            };\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public InmobiBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+\n+        Imp imp = request.getImp().get(0);", "originalCommit": "c63d30b4418eadc56248dc8a19a7de249143355c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTUxMzI0OA==", "url": "https://github.com/prebid/prebid-server-java/pull/935#discussion_r499513248", "bodyText": "Minor. Please use CollectionUtils.isEmpty(..) for format checking.", "author": "rpanchyk", "createdAt": "2020-10-05T10:58:34Z", "path": "src/main/java/org/prebid/server/bidder/inmobi/InmobiBidder.java", "diffHunk": "@@ -0,0 +1,147 @@\n+package org.prebid.server.bidder.inmobi;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.iab.openrtb.request.Banner;\n+import com.iab.openrtb.request.BidRequest;\n+import com.iab.openrtb.request.Format;\n+import com.iab.openrtb.request.Imp;\n+import com.iab.openrtb.response.BidResponse;\n+import com.iab.openrtb.response.SeatBid;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.vertx.core.http.HttpMethod;\n+import org.apache.commons.lang3.StringUtils;\n+import org.prebid.server.bidder.Bidder;\n+import org.prebid.server.bidder.model.BidderBid;\n+import org.prebid.server.bidder.model.BidderError;\n+import org.prebid.server.bidder.model.HttpCall;\n+import org.prebid.server.bidder.model.HttpRequest;\n+import org.prebid.server.bidder.model.Result;\n+import org.prebid.server.exception.PreBidException;\n+import org.prebid.server.json.DecodeException;\n+import org.prebid.server.json.JacksonMapper;\n+import org.prebid.server.proto.openrtb.ext.ExtPrebid;\n+import org.prebid.server.proto.openrtb.ext.request.inmobi.ExtImpInmobi;\n+import org.prebid.server.proto.openrtb.ext.response.BidType;\n+import org.prebid.server.util.HttpUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+public class InmobiBidder implements Bidder<BidRequest> {\n+\n+    private static final String DEFAULT_BID_CURRENCY = \"USD\";\n+\n+    private static final TypeReference<ExtPrebid<?, ExtImpInmobi>> INMOBI_EXT_TYPE_REFERENCE =\n+            new TypeReference<ExtPrebid<?, ExtImpInmobi>>() {\n+            };\n+\n+    private final String endpointUrl;\n+    private final JacksonMapper mapper;\n+\n+    public InmobiBidder(String endpointUrl, JacksonMapper mapper) {\n+        this.endpointUrl = HttpUtil.validateUrl(Objects.requireNonNull(endpointUrl));\n+        this.mapper = Objects.requireNonNull(mapper);\n+    }\n+\n+    @Override\n+    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n+        final List<BidderError> errors = new ArrayList<>();\n+\n+        Imp imp = request.getImp().get(0);\n+\n+        final ExtImpInmobi extImpInmobi;\n+\n+        try {\n+            extImpInmobi = parseImpExt(imp);\n+        } catch (Exception e) {\n+            return Result.emptyWithError(BidderError.badInput(\"bad InMobi bidder ext\"));\n+        }\n+\n+        if (StringUtils.isEmpty(extImpInmobi.getPlc())) {\n+            return Result.emptyWithError(BidderError.badInput(\"'plc' is a required attribute for InMobi's bidder ext\"));\n+        }\n+\n+        if (imp.getBanner() != null) {\n+            final Banner banner = imp.getBanner();\n+            if ((banner.getW() == null || banner.getH() == null || banner.getW() == 0 || banner.getH() == 0)\n+                    && !Objects.isNull(banner.getFormat()) && banner.getFormat().size() > 0) {", "originalCommit": "c63d30b4418eadc56248dc8a19a7de249143355c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTUxNzI1OQ==", "url": "https://github.com/prebid/prebid-server-java/pull/935#discussion_r499517259", "bodyText": "Set id to 333 - https://vendorlist.consensu.org/v-206/vendorlist.json", "author": "rpanchyk", "createdAt": "2020-10-05T11:06:44Z", "path": "src/main/resources/bidder-config/inmobi.yaml", "diffHunk": "@@ -0,0 +1,23 @@\n+adapters:\n+  inmobi:\n+    enabled: false\n+    endpoint: https://api.w.inmobi.com/showad/openrtb/bidder/prebid\n+    pbs-enforces-gdpr: true\n+    pbs-enforces-ccpa: true\n+    modifying-vast-xml-allowed: true\n+    deprecated-names:\n+    aliases:\n+    meta-info:\n+      maintainer-email: prebid-support@inmobi.com\n+      app-media-types:\n+        - banner\n+        - video\n+      site-media-types:\n+      supported-vendors:\n+      vendor-id: 0", "originalCommit": "c63d30b4418eadc56248dc8a19a7de249143355c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "e3bed0f49252bb58d4a2c563486b1b02e3ef4219", "url": "https://github.com/prebid/prebid-server-java/commit/e3bed0f49252bb58d4a2c563486b1b02e3ef4219", "message": "Fixes after review", "committedDate": "2020-10-05T11:50:21Z", "type": "commit"}, {"oid": "c773fbbb82dffcf5c94ad634c5d62ac50e78ce39", "url": "https://github.com/prebid/prebid-server-java/commit/c773fbbb82dffcf5c94ad634c5d62ac50e78ce39", "message": "Fixes after review", "committedDate": "2020-10-05T12:50:30Z", "type": "commit"}, {"oid": "024584341fbaa6f40eaf7453a2d6634b62b9a9ba", "url": "https://github.com/prebid/prebid-server-java/commit/024584341fbaa6f40eaf7453a2d6634b62b9a9ba", "message": "Merge branch 'master' into inmobi_bidder/development", "committedDate": "2020-10-06T14:16:03Z", "type": "commit"}]}