{"pr_number": 988, "pr_title": "Add video support to EMX Digital bidder", "pr_createdAt": "2020-11-01T20:36:18Z", "pr_url": "https://github.com/prebid/prebid-server-java/pull/988", "timeline": [{"oid": "2b6ca01cf6562e45eed33d35c080d495e0ed205c", "url": "https://github.com/prebid/prebid-server-java/commit/2b6ca01cf6562e45eed33d35c080d495e0ed205c", "message": "Add video support to EMX Digital bidder", "committedDate": "2020-11-01T20:34:32Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTE3MjQyNg==", "url": "https://github.com/prebid/prebid-server-java/pull/988#discussion_r525172426", "bodyText": "Seems we get here not domain but full url.", "author": "rpanchyk", "createdAt": "2020-11-17T13:55:38Z", "path": "src/main/java/org/prebid/server/bidder/emxdigital/EmxDigitalBidder.java", "diffHunk": "@@ -92,10 +96,20 @@ private BidRequest makeBidRequest(BidRequest request) {\n                 .build();\n     }\n \n-    private static boolean isSecure(Site site) {\n-        return site != null\n-                && StringUtils.isNotBlank(site.getPage())\n-                && site.getPage().startsWith(\"https\");\n+    private static String resolveDomain(BidRequest request) {", "originalCommit": "2b6ca01cf6562e45eed33d35c080d495e0ed205c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTE3MjY1OQ==", "url": "https://github.com/prebid/prebid-server-java/pull/988#discussion_r525172659", "bodyText": "Let's make page variable.", "author": "rpanchyk", "createdAt": "2020-11-17T13:55:57Z", "path": "src/main/java/org/prebid/server/bidder/emxdigital/EmxDigitalBidder.java", "diffHunk": "@@ -92,10 +96,20 @@ private BidRequest makeBidRequest(BidRequest request) {\n                 .build();\n     }\n \n-    private static boolean isSecure(Site site) {\n-        return site != null\n-                && StringUtils.isNotBlank(site.getPage())\n-                && site.getPage().startsWith(\"https\");\n+    private static String resolveDomain(BidRequest request) {\n+        final Site site = request.getSite();\n+        if (Objects.nonNull(site) && StringUtils.isNotBlank(site.getPage())) {", "originalCommit": "2b6ca01cf6562e45eed33d35c080d495e0ed205c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTE3MzEzOQ==", "url": "https://github.com/prebid/prebid-server-java/pull/988#discussion_r525173139", "bodyText": "Pls avoid Objects.nonNull(..) helper methods for simple cases.", "author": "rpanchyk", "createdAt": "2020-11-17T13:56:45Z", "path": "src/main/java/org/prebid/server/bidder/emxdigital/EmxDigitalBidder.java", "diffHunk": "@@ -92,10 +96,20 @@ private BidRequest makeBidRequest(BidRequest request) {\n                 .build();\n     }\n \n-    private static boolean isSecure(Site site) {\n-        return site != null\n-                && StringUtils.isNotBlank(site.getPage())\n-                && site.getPage().startsWith(\"https\");\n+    private static String resolveDomain(BidRequest request) {\n+        final Site site = request.getSite();\n+        if (Objects.nonNull(site) && StringUtils.isNotBlank(site.getPage())) {\n+            return site.getPage();\n+        }\n+        final App app = request.getApp();\n+        if (Objects.nonNull(app)) {", "originalCommit": "2b6ca01cf6562e45eed33d35c080d495e0ed205c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTE3NTIzNw==", "url": "https://github.com/prebid/prebid-server-java/pull/988#discussion_r525175237", "bodyText": "Pls use HttpUtil instead.", "author": "rpanchyk", "createdAt": "2020-11-17T13:59:41Z", "path": "src/main/java/org/prebid/server/bidder/emxdigital/EmxDigitalBidder.java", "diffHunk": "@@ -181,26 +223,29 @@ private static MultiMap makeHeaders(BidRequest request) {\n \n         final Device device = request.getDevice();\n         if (device != null) {\n-            HttpUtil.addHeaderIfValueIsNotEmpty(headers, HttpUtil.USER_AGENT_HEADER,\n-                    device.getUa());\n-            HttpUtil.addHeaderIfValueIsNotEmpty(headers, HttpUtil.X_FORWARDED_FOR_HEADER,\n-                    device.getIp());\n-            HttpUtil.addHeaderIfValueIsNotEmpty(headers, HttpUtil.ACCEPT_LANGUAGE_HEADER,\n-                    device.getLanguage());\n-            if (device.getDnt() != null) {\n-                HttpUtil.addHeaderIfValueIsNotEmpty(headers, HttpUtil.DNT_HEADER,\n-                        String.valueOf(device.getDnt()));\n+            addHeader(headers, \"User-Agent\", device.getUa());\n+            addHeader(headers, \"X-Forwarded-For\", device.getIp());\n+            addHeader(headers, \"Accept-Language\", device.getLanguage());\n+            final Integer dnt = device.getDnt();\n+            if (Objects.nonNull(dnt)) {\n+                addHeader(headers, \"DNT\", dnt.toString());\n             }\n         }\n \n         final Site site = request.getSite();\n-        if (site != null && StringUtils.isNotBlank(site.getPage())) {\n-            HttpUtil.addHeaderIfValueIsNotEmpty(headers, HttpUtil.REFERER_HEADER, site.getPage());\n+        if (site != null) {\n+            addHeader(headers, \"Referer\", site.getPage());\n         }\n \n         return headers;\n     }\n \n+    private static void addHeader(MultiMap headers, CharSequence header, String value) {", "originalCommit": "2b6ca01cf6562e45eed33d35c080d495e0ed205c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTE3NjMwMg==", "url": "https://github.com/prebid/prebid-server-java/pull/988#discussion_r525176302", "bodyText": "Minor. Pls use One word instead of just 1 number. Check similar cases.", "author": "rpanchyk", "createdAt": "2020-11-17T14:01:10Z", "path": "src/test/java/org/prebid/server/bidder/emxdigital/EmxDigitalBidderTest.java", "diffHunk": "@@ -232,6 +236,187 @@ public void makeHttpRequestsShouldModifyImpWhenExtImpEmaDigitalContainsRequiredV\n                 .containsOnly(expectedImp);\n     }\n \n+    @Test\n+    public void makeHttpRequestsShouldRemoveVast40ProtocolFromVideo() {\n+        // given\n+        final BidRequest bidRequest = BidRequest.builder()\n+                .imp(singletonList(Imp.builder()\n+                        .video(Video.builder()\n+                                .mimes(Collections.singletonList(\"someMime\"))\n+                                .protocols(Arrays.asList(1, 7, 2))\n+                                .w(100)\n+                                .h(100)\n+                                .build())\n+                        .ext(mapper.valueToTree(ExtPrebid.of(null, ExtImpEmxDigital.of(\"123\", \"2\"))))\n+                        .build()))\n+                .tmax(1000L)\n+                .build();\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = emxDigitalBidder\n+                .makeHttpRequests(bidRequest);\n+\n+        // then\n+        final Imp expectedImp = Imp.builder()\n+                .ext(mapper.valueToTree(ExtPrebid.of(null, ExtImpEmxDigital.of(\"123\", \"2\"))))\n+                .video(Video.builder()\n+                        .mimes(Collections.singletonList(\"someMime\"))\n+                        .protocols(Arrays.asList(1, 2))\n+                        .w(100)\n+                        .h(100)\n+                        .build())\n+                .tagid(\"123\")\n+                .secure(0)\n+                .bidfloor(new BigDecimal(\"2\"))\n+                .bidfloorcur(\"USD\")\n+                .build();\n+\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue()).hasSize(1)\n+                .extracting(httpRequest -> mapper.readValue(httpRequest.getBody(), BidRequest.class))\n+                .flatExtracting(BidRequest::getImp)\n+                .containsOnly(expectedImp);\n+    }\n+\n+    @Test\n+    public void shouldThrowExceptionIfVideoDoNotHaveAtLeastOneSizeParameter() {\n+        // given\n+        final BidRequest bidRequest = BidRequest.builder()\n+                .imp(singletonList(Imp.builder()\n+                        .video(Video.builder().mimes(Collections.singletonList(\"someMime\")).build())\n+                        .ext(mapper.valueToTree(ExtPrebid.of(null, ExtImpEmxDigital.of(\"123\", \"2\"))))\n+                        .build()))\n+                .tmax(1000L)\n+                .build();\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = emxDigitalBidder\n+                .makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1)\n+                .containsOnly(BidderError.badInput(\"Video: Need at least one size to build request\"));\n+    }\n+\n+    @Test\n+    public void shouldThrowExceptionIfVideoDoNotHaveAnyMimeParameter() {\n+        // given\n+        final BidRequest bidRequest = BidRequest.builder()\n+                .imp(singletonList(Imp.builder()\n+                        .video(Video.builder().build())\n+                        .ext(mapper.valueToTree(ExtPrebid.of(null, ExtImpEmxDigital.of(\"123\", \"2\"))))\n+                        .build()))\n+                .tmax(1000L)\n+                .build();\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = emxDigitalBidder\n+                .makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1)\n+                .containsOnly(BidderError.badInput(\"Video: missing required field mimes\"));\n+    }\n+\n+    @Test\n+    public void requestSecureShouldBe1IfPageStartsWithHttps() {", "originalCommit": "2b6ca01cf6562e45eed33d35c080d495e0ed205c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTE3NjkxNA==", "url": "https://github.com/prebid/prebid-server-java/pull/988#discussion_r525176914", "bodyText": "Seems not domain but protocol or url.", "author": "rpanchyk", "createdAt": "2020-11-17T14:02:00Z", "path": "src/test/java/org/prebid/server/bidder/emxdigital/EmxDigitalBidderTest.java", "diffHunk": "@@ -232,6 +236,187 @@ public void makeHttpRequestsShouldModifyImpWhenExtImpEmaDigitalContainsRequiredV\n                 .containsOnly(expectedImp);\n     }\n \n+    @Test\n+    public void makeHttpRequestsShouldRemoveVast40ProtocolFromVideo() {\n+        // given\n+        final BidRequest bidRequest = BidRequest.builder()\n+                .imp(singletonList(Imp.builder()\n+                        .video(Video.builder()\n+                                .mimes(Collections.singletonList(\"someMime\"))\n+                                .protocols(Arrays.asList(1, 7, 2))\n+                                .w(100)\n+                                .h(100)\n+                                .build())\n+                        .ext(mapper.valueToTree(ExtPrebid.of(null, ExtImpEmxDigital.of(\"123\", \"2\"))))\n+                        .build()))\n+                .tmax(1000L)\n+                .build();\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = emxDigitalBidder\n+                .makeHttpRequests(bidRequest);\n+\n+        // then\n+        final Imp expectedImp = Imp.builder()\n+                .ext(mapper.valueToTree(ExtPrebid.of(null, ExtImpEmxDigital.of(\"123\", \"2\"))))\n+                .video(Video.builder()\n+                        .mimes(Collections.singletonList(\"someMime\"))\n+                        .protocols(Arrays.asList(1, 2))\n+                        .w(100)\n+                        .h(100)\n+                        .build())\n+                .tagid(\"123\")\n+                .secure(0)\n+                .bidfloor(new BigDecimal(\"2\"))\n+                .bidfloorcur(\"USD\")\n+                .build();\n+\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue()).hasSize(1)\n+                .extracting(httpRequest -> mapper.readValue(httpRequest.getBody(), BidRequest.class))\n+                .flatExtracting(BidRequest::getImp)\n+                .containsOnly(expectedImp);\n+    }\n+\n+    @Test\n+    public void shouldThrowExceptionIfVideoDoNotHaveAtLeastOneSizeParameter() {\n+        // given\n+        final BidRequest bidRequest = BidRequest.builder()\n+                .imp(singletonList(Imp.builder()\n+                        .video(Video.builder().mimes(Collections.singletonList(\"someMime\")).build())\n+                        .ext(mapper.valueToTree(ExtPrebid.of(null, ExtImpEmxDigital.of(\"123\", \"2\"))))\n+                        .build()))\n+                .tmax(1000L)\n+                .build();\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = emxDigitalBidder\n+                .makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1)\n+                .containsOnly(BidderError.badInput(\"Video: Need at least one size to build request\"));\n+    }\n+\n+    @Test\n+    public void shouldThrowExceptionIfVideoDoNotHaveAnyMimeParameter() {\n+        // given\n+        final BidRequest bidRequest = BidRequest.builder()\n+                .imp(singletonList(Imp.builder()\n+                        .video(Video.builder().build())\n+                        .ext(mapper.valueToTree(ExtPrebid.of(null, ExtImpEmxDigital.of(\"123\", \"2\"))))\n+                        .build()))\n+                .tmax(1000L)\n+                .build();\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = emxDigitalBidder\n+                .makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).hasSize(1)\n+                .containsOnly(BidderError.badInput(\"Video: missing required field mimes\"));\n+    }\n+\n+    @Test\n+    public void requestSecureShouldBe1IfPageStartsWithHttps() {\n+        // given\n+        final BidRequest bidRequest = BidRequest.builder()\n+                .imp(singletonList(Imp.builder()\n+                        .banner(Banner.builder().w(100).h(100).build())\n+                        .ext(mapper.valueToTree(ExtPrebid.of(null, ExtImpEmxDigital.of(\"123\", \"2\"))))\n+                        .build()))\n+                .tmax(1000L)\n+                .site(Site.builder().page(\"https://exmaple/\").build())\n+                .build();\n+\n+        // when\n+        final Result<List<HttpRequest<BidRequest>>> result = emxDigitalBidder\n+                .makeHttpRequests(bidRequest);\n+\n+        // then\n+        assertThat(result.getErrors()).isEmpty();\n+        assertThat(result.getValue()).hasSize(1)\n+                .extracting(httpRequest -> mapper.readValue(httpRequest.getBody(), BidRequest.class))\n+                .extracting(request -> request.getImp().get(0).getSecure())\n+                .containsOnly(1);\n+    }\n+\n+    @Test\n+    public void requestSecureShouldBe1IfDomainStartsWithHttps() {", "originalCommit": "2b6ca01cf6562e45eed33d35c080d495e0ed205c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "f940f026a324d1a7af778dc9c8f42d76eb0e0f14", "url": "https://github.com/prebid/prebid-server-java/commit/f940f026a324d1a7af778dc9c8f42d76eb0e0f14", "message": "Fixes after review", "committedDate": "2020-11-17T14:13:36Z", "type": "commit"}, {"oid": "13960612a63ee5571125441891cbd50137d1cd69", "url": "https://github.com/prebid/prebid-server-java/commit/13960612a63ee5571125441891cbd50137d1cd69", "message": "Merge branch 'master' into video_support/add/emxDigital_bidder\n\n# Conflicts:\n#\tsrc/main/java/org/prebid/server/bidder/emxdigital/EmxDigitalBidder.java\n#\tsrc/test/java/org/prebid/server/bidder/emxdigital/EmxDigitalBidderTest.java", "committedDate": "2020-11-17T14:23:42Z", "type": "commit"}, {"oid": "2836f0de4abc0da004e2c518be8f6b39f8b63742", "url": "https://github.com/prebid/prebid-server-java/commit/2836f0de4abc0da004e2c518be8f6b39f8b63742", "message": "Test name fix", "committedDate": "2020-11-17T14:25:29Z", "type": "commit"}]}