{"pr_number": 493, "pr_title": "[OC-1100] New version of new card feature", "pr_createdAt": "2020-09-28T13:30:04Z", "pr_url": "https://github.com/opfab/operatorfabric-core/pull/493", "timeline": [{"oid": "a4df0b71a69bf3f634bff43049369717ddf6b6ff", "url": "https://github.com/opfab/operatorfabric-core/commit/a4df0b71a69bf3f634bff43049369717ddf6b6ff", "message": "[OC-1100] New version of new card feature\nTemplate mechanism for specific form field\nCard detail in preview\nExamples in DefaultBundle\nCreate a new process definition (bundle) for examples\nError management", "committedDate": "2020-09-28T13:33:24Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjUzNTQwMQ==", "url": "https://github.com/opfab/operatorfabric-core/pull/493#discussion_r496535401", "bodyText": "It could be an else of the previous if statement, otherwise, for consistency if(!val) could be used.", "author": "rlg-pro", "createdAt": "2020-09-29T08:36:30Z", "path": "ui/main/src/app/components/share/datetime-filter/datetime-filter.component.ts", "diffHunk": "@@ -75,16 +76,17 @@ export class DatetimeFilterComponent implements ControlValueAccessor, OnInit, On\n     public onTouched: () => void = () => {\n     }\n \n-    // Method call when archive-filter.component.ts set value to 0\n+    // Method call when archive-filter.component.ts set value to null\n     writeValue(val: any): void {\n         if (!this.offset) {\n             this.disabled = true;\n         }\n-        this.resetDateAndTime();\n-\n         if (val) {\n             this.datetimeForm.setValue(val, {emitEvent: false});\n         }\n+        if (val === null)  {  // set when archive reset date ", "originalCommit": "a4df0b71a69bf3f634bff43049369717ddf6b6ff", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjYyMjE0OQ==", "url": "https://github.com/opfab/operatorfabric-core/pull/493#discussion_r496622149", "bodyText": "ok", "author": "freddidierRTE", "createdAt": "2020-09-29T10:50:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjUzNTQwMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjUzOTg4MQ==", "url": "https://github.com/opfab/operatorfabric-core/pull/493#discussion_r496539881", "bodyText": "For consistency also, to ensure that this.values exists this could be if (!this.valuesInObservable && !! this.values)", "author": "rlg-pro", "createdAt": "2020-09-29T08:40:35Z", "path": "ui/main/src/app/components/share/single-filter/single-filter.component.ts", "diffHunk": "@@ -56,6 +56,17 @@ export class SingleFilterComponent implements OnInit {\n     }\n   }\n \n+\n+  ngOnChanges() {\n+    if (!this.valuesInObservable && this.values) {", "originalCommit": "a4df0b71a69bf3f634bff43049369717ddf6b6ff", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjYyMjIzOQ==", "url": "https://github.com/opfab/operatorfabric-core/pull/493#discussion_r496622239", "bodyText": "ok", "author": "freddidierRTE", "createdAt": "2020-09-29T10:50:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjUzOTg4MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjU0MjMyNA==", "url": "https://github.com/opfab/operatorfabric-core/pull/493#discussion_r496542324", "bodyText": "It could also be if (!!state).", "author": "rlg-pro", "createdAt": "2020-09-29T08:42:51Z", "path": "ui/main/src/app/modules/usercard/components/card-preview/card-preview.component.ts", "diffHunk": "@@ -0,0 +1,153 @@\n+/* Copyright (c) 2018-2020, RTE (http://www.rte-france.com)\n+ * See AUTHORS.txt\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ * SPDX-License-Identifier: MPL-2.0\n+ * This file is part of the OperatorFabric project.\n+ */\n+\n+\n+import { Component, ElementRef, Input, OnDestroy, OnInit } from '@angular/core';\n+import { Card, Detail } from '@ofModel/card.model';\n+import { ProcessesService } from '@ofServices/processes.service';\n+import { HandlebarsService } from '../../../cards/services/handlebars.service';\n+import { DomSanitizer, SafeHtml, SafeResourceUrl } from '@angular/platform-browser';\n+import { DetailContext } from '@ofModel/detail-context.model';\n+import { Store } from '@ngrx/store';\n+import { AppState } from '@ofStore/index';\n+import { selectAuthenticationState } from '@ofSelectors/authentication.selectors';\n+import { selectGlobalStyleState } from '@ofSelectors/global-style.selectors';\n+import { UserContext } from '@ofModel/user-context.model';\n+import {skip, switchMap, take, takeUntil } from 'rxjs/operators';\n+import { Subject} from 'rxjs';\n+\n+import { User } from '@ofModel/user.model';\n+\n+\n+\n+\n+@Component({\n+    selector: 'of-card-preview',\n+    templateUrl: './card-preview.component.html'\n+})\n+export class CardPreviewComponent implements OnInit, OnDestroy {\n+\n+    @Input() card: Card;\n+    @Input() user: User;\n+    @Input() currentPath: string;\n+\n+    public active = false;\n+    unsubscribe$: Subject<void> = new Subject<void>();\n+    readonly hrefsOfCssLink = new Array<SafeResourceUrl>();\n+    private _htmlContent: SafeHtml;\n+    private _userContext: UserContext;\n+    private detail: Detail;\n+\n+\n+    constructor(private element: ElementRef, private businessconfigService: ProcessesService,\n+        private handlebars: HandlebarsService, private sanitizer: DomSanitizer,\n+        private store: Store<AppState>) {\n+\n+        this.store.select(selectAuthenticationState).subscribe(authState => {\n+            this._userContext = new UserContext(\n+                authState.identifier,\n+                authState.token,\n+                authState.firstName,\n+                authState.lastName\n+            );\n+        });\n+        this.reloadTemplateWhenGlobalStyleChange();\n+    }\n+\n+\n+    ngOnInit() {\n+        this.getTemplateAndStyle();\n+\n+    }\n+\n+    private getTemplateAndStyle() {\n+        this.businessconfigService.queryProcess(this.card.process, this.card.processVersion)\n+            .pipe(takeUntil(this.unsubscribe$))\n+            .subscribe(businessconfig => {\n+                if (businessconfig) {\n+                    const state = businessconfig.extractState(this.card);\n+                    if (state != null) {", "originalCommit": "a4df0b71a69bf3f634bff43049369717ddf6b6ff", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjYyMjM5OQ==", "url": "https://github.com/opfab/operatorfabric-core/pull/493#discussion_r496622399", "bodyText": "done", "author": "freddidierRTE", "createdAt": "2020-09-29T10:51:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjU0MjMyNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjU0MzExOQ==", "url": "https://github.com/opfab/operatorfabric-core/pull/493#discussion_r496543119", "bodyText": "Same here, if(!! this.detali &p !! this.detail.styles)", "author": "rlg-pro", "createdAt": "2020-09-29T08:43:32Z", "path": "ui/main/src/app/modules/usercard/components/card-preview/card-preview.component.ts", "diffHunk": "@@ -0,0 +1,153 @@\n+/* Copyright (c) 2018-2020, RTE (http://www.rte-france.com)\n+ * See AUTHORS.txt\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ * SPDX-License-Identifier: MPL-2.0\n+ * This file is part of the OperatorFabric project.\n+ */\n+\n+\n+import { Component, ElementRef, Input, OnDestroy, OnInit } from '@angular/core';\n+import { Card, Detail } from '@ofModel/card.model';\n+import { ProcessesService } from '@ofServices/processes.service';\n+import { HandlebarsService } from '../../../cards/services/handlebars.service';\n+import { DomSanitizer, SafeHtml, SafeResourceUrl } from '@angular/platform-browser';\n+import { DetailContext } from '@ofModel/detail-context.model';\n+import { Store } from '@ngrx/store';\n+import { AppState } from '@ofStore/index';\n+import { selectAuthenticationState } from '@ofSelectors/authentication.selectors';\n+import { selectGlobalStyleState } from '@ofSelectors/global-style.selectors';\n+import { UserContext } from '@ofModel/user-context.model';\n+import {skip, switchMap, take, takeUntil } from 'rxjs/operators';\n+import { Subject} from 'rxjs';\n+\n+import { User } from '@ofModel/user.model';\n+\n+\n+\n+\n+@Component({\n+    selector: 'of-card-preview',\n+    templateUrl: './card-preview.component.html'\n+})\n+export class CardPreviewComponent implements OnInit, OnDestroy {\n+\n+    @Input() card: Card;\n+    @Input() user: User;\n+    @Input() currentPath: string;\n+\n+    public active = false;\n+    unsubscribe$: Subject<void> = new Subject<void>();\n+    readonly hrefsOfCssLink = new Array<SafeResourceUrl>();\n+    private _htmlContent: SafeHtml;\n+    private _userContext: UserContext;\n+    private detail: Detail;\n+\n+\n+    constructor(private element: ElementRef, private businessconfigService: ProcessesService,\n+        private handlebars: HandlebarsService, private sanitizer: DomSanitizer,\n+        private store: Store<AppState>) {\n+\n+        this.store.select(selectAuthenticationState).subscribe(authState => {\n+            this._userContext = new UserContext(\n+                authState.identifier,\n+                authState.token,\n+                authState.firstName,\n+                authState.lastName\n+            );\n+        });\n+        this.reloadTemplateWhenGlobalStyleChange();\n+    }\n+\n+\n+    ngOnInit() {\n+        this.getTemplateAndStyle();\n+\n+    }\n+\n+    private getTemplateAndStyle() {\n+        this.businessconfigService.queryProcess(this.card.process, this.card.processVersion)\n+            .pipe(takeUntil(this.unsubscribe$))\n+            .subscribe(businessconfig => {\n+                if (businessconfig) {\n+                    const state = businessconfig.extractState(this.card);\n+                    if (state != null) {\n+                        this.detail = state.details[0]; // Take the first detail , new card preview  non compatible with more than one detail  \n+                    }\n+                    this.initializeHrefsOfCssLink();\n+                    this.initializeHandlebarsTemplates();\n+                }\n+            },\n+                error => console.log(`something went wrong while trying to fetch process for ${this.card.process}\n+                            with ${this.card.processVersion} version.`)\n+            );\n+    }\n+\n+\n+\n+    // for certain types of template , we need to reload it to take into account\n+    // the new css style (for example with chart done with chart.js)\n+    private reloadTemplateWhenGlobalStyleChange() {\n+        this.store.select(selectGlobalStyleState)\n+            .pipe(takeUntil(this.unsubscribe$), skip(1))\n+            .subscribe(style => this.initializeHandlebarsTemplates());\n+    }\n+ \n+\n+    private initializeHrefsOfCssLink() {\n+        if (this.detail && this.detail.styles) {", "originalCommit": "a4df0b71a69bf3f634bff43049369717ddf6b6ff", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjYyMjU5Ng==", "url": "https://github.com/opfab/operatorfabric-core/pull/493#discussion_r496622596", "bodyText": "done", "author": "freddidierRTE", "createdAt": "2020-09-29T10:51:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjU0MzExOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjU0NDg5Mg==", "url": "https://github.com/opfab/operatorfabric-core/pull/493#discussion_r496544892", "bodyText": "For style consistency, it could be if(!!businessconfig)", "author": "rlg-pro", "createdAt": "2020-09-29T08:45:34Z", "path": "ui/main/src/app/modules/usercard/components/card-preview/card-preview.component.ts", "diffHunk": "@@ -0,0 +1,153 @@\n+/* Copyright (c) 2018-2020, RTE (http://www.rte-france.com)\n+ * See AUTHORS.txt\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ * SPDX-License-Identifier: MPL-2.0\n+ * This file is part of the OperatorFabric project.\n+ */\n+\n+\n+import { Component, ElementRef, Input, OnDestroy, OnInit } from '@angular/core';\n+import { Card, Detail } from '@ofModel/card.model';\n+import { ProcessesService } from '@ofServices/processes.service';\n+import { HandlebarsService } from '../../../cards/services/handlebars.service';\n+import { DomSanitizer, SafeHtml, SafeResourceUrl } from '@angular/platform-browser';\n+import { DetailContext } from '@ofModel/detail-context.model';\n+import { Store } from '@ngrx/store';\n+import { AppState } from '@ofStore/index';\n+import { selectAuthenticationState } from '@ofSelectors/authentication.selectors';\n+import { selectGlobalStyleState } from '@ofSelectors/global-style.selectors';\n+import { UserContext } from '@ofModel/user-context.model';\n+import {skip, switchMap, take, takeUntil } from 'rxjs/operators';\n+import { Subject} from 'rxjs';\n+\n+import { User } from '@ofModel/user.model';\n+\n+\n+\n+\n+@Component({\n+    selector: 'of-card-preview',\n+    templateUrl: './card-preview.component.html'\n+})\n+export class CardPreviewComponent implements OnInit, OnDestroy {\n+\n+    @Input() card: Card;\n+    @Input() user: User;\n+    @Input() currentPath: string;\n+\n+    public active = false;\n+    unsubscribe$: Subject<void> = new Subject<void>();\n+    readonly hrefsOfCssLink = new Array<SafeResourceUrl>();\n+    private _htmlContent: SafeHtml;\n+    private _userContext: UserContext;\n+    private detail: Detail;\n+\n+\n+    constructor(private element: ElementRef, private businessconfigService: ProcessesService,\n+        private handlebars: HandlebarsService, private sanitizer: DomSanitizer,\n+        private store: Store<AppState>) {\n+\n+        this.store.select(selectAuthenticationState).subscribe(authState => {\n+            this._userContext = new UserContext(\n+                authState.identifier,\n+                authState.token,\n+                authState.firstName,\n+                authState.lastName\n+            );\n+        });\n+        this.reloadTemplateWhenGlobalStyleChange();\n+    }\n+\n+\n+    ngOnInit() {\n+        this.getTemplateAndStyle();\n+\n+    }\n+\n+    private getTemplateAndStyle() {\n+        this.businessconfigService.queryProcess(this.card.process, this.card.processVersion)\n+            .pipe(takeUntil(this.unsubscribe$))\n+            .subscribe(businessconfig => {\n+                if (businessconfig) {", "originalCommit": "a4df0b71a69bf3f634bff43049369717ddf6b6ff", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjYyMjY3MA==", "url": "https://github.com/opfab/operatorfabric-core/pull/493#discussion_r496622670", "bodyText": "done", "author": "freddidierRTE", "createdAt": "2020-09-29T10:51:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjU0NDg5Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjU0NTkyMg==", "url": "https://github.com/opfab/operatorfabric-core/pull/493#discussion_r496545922", "bodyText": "A forEach on scripts could be make code shorter and simpler to read.", "author": "rlg-pro", "createdAt": "2020-09-29T08:47:10Z", "path": "ui/main/src/app/modules/usercard/components/card-preview/card-preview.component.ts", "diffHunk": "@@ -0,0 +1,153 @@\n+/* Copyright (c) 2018-2020, RTE (http://www.rte-france.com)\n+ * See AUTHORS.txt\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ * SPDX-License-Identifier: MPL-2.0\n+ * This file is part of the OperatorFabric project.\n+ */\n+\n+\n+import { Component, ElementRef, Input, OnDestroy, OnInit } from '@angular/core';\n+import { Card, Detail } from '@ofModel/card.model';\n+import { ProcessesService } from '@ofServices/processes.service';\n+import { HandlebarsService } from '../../../cards/services/handlebars.service';\n+import { DomSanitizer, SafeHtml, SafeResourceUrl } from '@angular/platform-browser';\n+import { DetailContext } from '@ofModel/detail-context.model';\n+import { Store } from '@ngrx/store';\n+import { AppState } from '@ofStore/index';\n+import { selectAuthenticationState } from '@ofSelectors/authentication.selectors';\n+import { selectGlobalStyleState } from '@ofSelectors/global-style.selectors';\n+import { UserContext } from '@ofModel/user-context.model';\n+import {skip, switchMap, take, takeUntil } from 'rxjs/operators';\n+import { Subject} from 'rxjs';\n+\n+import { User } from '@ofModel/user.model';\n+\n+\n+\n+\n+@Component({\n+    selector: 'of-card-preview',\n+    templateUrl: './card-preview.component.html'\n+})\n+export class CardPreviewComponent implements OnInit, OnDestroy {\n+\n+    @Input() card: Card;\n+    @Input() user: User;\n+    @Input() currentPath: string;\n+\n+    public active = false;\n+    unsubscribe$: Subject<void> = new Subject<void>();\n+    readonly hrefsOfCssLink = new Array<SafeResourceUrl>();\n+    private _htmlContent: SafeHtml;\n+    private _userContext: UserContext;\n+    private detail: Detail;\n+\n+\n+    constructor(private element: ElementRef, private businessconfigService: ProcessesService,\n+        private handlebars: HandlebarsService, private sanitizer: DomSanitizer,\n+        private store: Store<AppState>) {\n+\n+        this.store.select(selectAuthenticationState).subscribe(authState => {\n+            this._userContext = new UserContext(\n+                authState.identifier,\n+                authState.token,\n+                authState.firstName,\n+                authState.lastName\n+            );\n+        });\n+        this.reloadTemplateWhenGlobalStyleChange();\n+    }\n+\n+\n+    ngOnInit() {\n+        this.getTemplateAndStyle();\n+\n+    }\n+\n+    private getTemplateAndStyle() {\n+        this.businessconfigService.queryProcess(this.card.process, this.card.processVersion)\n+            .pipe(takeUntil(this.unsubscribe$))\n+            .subscribe(businessconfig => {\n+                if (businessconfig) {\n+                    const state = businessconfig.extractState(this.card);\n+                    if (state != null) {\n+                        this.detail = state.details[0]; // Take the first detail , new card preview  non compatible with more than one detail  \n+                    }\n+                    this.initializeHrefsOfCssLink();\n+                    this.initializeHandlebarsTemplates();\n+                }\n+            },\n+                error => console.log(`something went wrong while trying to fetch process for ${this.card.process}\n+                            with ${this.card.processVersion} version.`)\n+            );\n+    }\n+\n+\n+\n+    // for certain types of template , we need to reload it to take into account\n+    // the new css style (for example with chart done with chart.js)\n+    private reloadTemplateWhenGlobalStyleChange() {\n+        this.store.select(selectGlobalStyleState)\n+            .pipe(takeUntil(this.unsubscribe$), skip(1))\n+            .subscribe(style => this.initializeHandlebarsTemplates());\n+    }\n+ \n+\n+    private initializeHrefsOfCssLink() {\n+        if (this.detail && this.detail.styles) {\n+            const process = this.card.process;\n+            const processVersion = this.card.processVersion;\n+            this.detail.styles.forEach(style => {\n+                const cssUrl = this.businessconfigService.computeBusinessconfigCssUrl(process, style, processVersion);\n+                // needed to instantiate href of link for css in component rendering\n+                const safeCssUrl = this.sanitizer.bypassSecurityTrustResourceUrl(cssUrl);\n+                this.hrefsOfCssLink.push(safeCssUrl);\n+            });\n+        }\n+    }\n+\n+    private initializeHandlebarsTemplates() {\n+\n+        this.businessconfigService.queryProcessFromCard(this.card).pipe(\n+            takeUntil(this.unsubscribe$),\n+            switchMap(process => {\n+                return this.handlebars.executeTemplate(this.detail.templateName,\n+                    new DetailContext(this.card, this._userContext, null));\n+            })\n+        )\n+            .subscribe(\n+                html => {\n+                    this._htmlContent = this.sanitizer.bypassSecurityTrustHtml(html);\n+                    setTimeout(() => { // wait for DOM rendering\n+                        this.reinsertScripts();\n+                    }, 10);\n+                }\n+            );\n+    }\n+\n+    get htmlContent() {\n+        return this._htmlContent;\n+    }\n+\n+    reinsertScripts(): void {\n+        const scripts = <HTMLScriptElement[]>this.element.nativeElement.getElementsByTagName('script');\n+        const scriptsInitialLength = scripts.length;\n+        for (let i = 0; i < scriptsInitialLength; i++) {", "originalCommit": "a4df0b71a69bf3f634bff43049369717ddf6b6ff", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjY0MjYzNQ==", "url": "https://github.com/opfab/operatorfabric-core/pull/493#discussion_r496642635", "bodyText": "done", "author": "freddidierRTE", "createdAt": "2020-09-29T11:29:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjU0NTkyMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjU0NjI2NQ==", "url": "https://github.com/opfab/operatorfabric-core/pull/493#discussion_r496546265", "bodyText": "if(!!script.inneHTML)", "author": "rlg-pro", "createdAt": "2020-09-29T08:47:43Z", "path": "ui/main/src/app/modules/usercard/components/card-preview/card-preview.component.ts", "diffHunk": "@@ -0,0 +1,153 @@\n+/* Copyright (c) 2018-2020, RTE (http://www.rte-france.com)\n+ * See AUTHORS.txt\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ * SPDX-License-Identifier: MPL-2.0\n+ * This file is part of the OperatorFabric project.\n+ */\n+\n+\n+import { Component, ElementRef, Input, OnDestroy, OnInit } from '@angular/core';\n+import { Card, Detail } from '@ofModel/card.model';\n+import { ProcessesService } from '@ofServices/processes.service';\n+import { HandlebarsService } from '../../../cards/services/handlebars.service';\n+import { DomSanitizer, SafeHtml, SafeResourceUrl } from '@angular/platform-browser';\n+import { DetailContext } from '@ofModel/detail-context.model';\n+import { Store } from '@ngrx/store';\n+import { AppState } from '@ofStore/index';\n+import { selectAuthenticationState } from '@ofSelectors/authentication.selectors';\n+import { selectGlobalStyleState } from '@ofSelectors/global-style.selectors';\n+import { UserContext } from '@ofModel/user-context.model';\n+import {skip, switchMap, take, takeUntil } from 'rxjs/operators';\n+import { Subject} from 'rxjs';\n+\n+import { User } from '@ofModel/user.model';\n+\n+\n+\n+\n+@Component({\n+    selector: 'of-card-preview',\n+    templateUrl: './card-preview.component.html'\n+})\n+export class CardPreviewComponent implements OnInit, OnDestroy {\n+\n+    @Input() card: Card;\n+    @Input() user: User;\n+    @Input() currentPath: string;\n+\n+    public active = false;\n+    unsubscribe$: Subject<void> = new Subject<void>();\n+    readonly hrefsOfCssLink = new Array<SafeResourceUrl>();\n+    private _htmlContent: SafeHtml;\n+    private _userContext: UserContext;\n+    private detail: Detail;\n+\n+\n+    constructor(private element: ElementRef, private businessconfigService: ProcessesService,\n+        private handlebars: HandlebarsService, private sanitizer: DomSanitizer,\n+        private store: Store<AppState>) {\n+\n+        this.store.select(selectAuthenticationState).subscribe(authState => {\n+            this._userContext = new UserContext(\n+                authState.identifier,\n+                authState.token,\n+                authState.firstName,\n+                authState.lastName\n+            );\n+        });\n+        this.reloadTemplateWhenGlobalStyleChange();\n+    }\n+\n+\n+    ngOnInit() {\n+        this.getTemplateAndStyle();\n+\n+    }\n+\n+    private getTemplateAndStyle() {\n+        this.businessconfigService.queryProcess(this.card.process, this.card.processVersion)\n+            .pipe(takeUntil(this.unsubscribe$))\n+            .subscribe(businessconfig => {\n+                if (businessconfig) {\n+                    const state = businessconfig.extractState(this.card);\n+                    if (state != null) {\n+                        this.detail = state.details[0]; // Take the first detail , new card preview  non compatible with more than one detail  \n+                    }\n+                    this.initializeHrefsOfCssLink();\n+                    this.initializeHandlebarsTemplates();\n+                }\n+            },\n+                error => console.log(`something went wrong while trying to fetch process for ${this.card.process}\n+                            with ${this.card.processVersion} version.`)\n+            );\n+    }\n+\n+\n+\n+    // for certain types of template , we need to reload it to take into account\n+    // the new css style (for example with chart done with chart.js)\n+    private reloadTemplateWhenGlobalStyleChange() {\n+        this.store.select(selectGlobalStyleState)\n+            .pipe(takeUntil(this.unsubscribe$), skip(1))\n+            .subscribe(style => this.initializeHandlebarsTemplates());\n+    }\n+ \n+\n+    private initializeHrefsOfCssLink() {\n+        if (this.detail && this.detail.styles) {\n+            const process = this.card.process;\n+            const processVersion = this.card.processVersion;\n+            this.detail.styles.forEach(style => {\n+                const cssUrl = this.businessconfigService.computeBusinessconfigCssUrl(process, style, processVersion);\n+                // needed to instantiate href of link for css in component rendering\n+                const safeCssUrl = this.sanitizer.bypassSecurityTrustResourceUrl(cssUrl);\n+                this.hrefsOfCssLink.push(safeCssUrl);\n+            });\n+        }\n+    }\n+\n+    private initializeHandlebarsTemplates() {\n+\n+        this.businessconfigService.queryProcessFromCard(this.card).pipe(\n+            takeUntil(this.unsubscribe$),\n+            switchMap(process => {\n+                return this.handlebars.executeTemplate(this.detail.templateName,\n+                    new DetailContext(this.card, this._userContext, null));\n+            })\n+        )\n+            .subscribe(\n+                html => {\n+                    this._htmlContent = this.sanitizer.bypassSecurityTrustHtml(html);\n+                    setTimeout(() => { // wait for DOM rendering\n+                        this.reinsertScripts();\n+                    }, 10);\n+                }\n+            );\n+    }\n+\n+    get htmlContent() {\n+        return this._htmlContent;\n+    }\n+\n+    reinsertScripts(): void {\n+        const scripts = <HTMLScriptElement[]>this.element.nativeElement.getElementsByTagName('script');\n+        const scriptsInitialLength = scripts.length;\n+        for (let i = 0; i < scriptsInitialLength; i++) {\n+            const script = scripts[i];\n+            const scriptCopy = document.createElement('script');\n+            scriptCopy.type = script.type ? script.type : 'text/javascript';\n+            if (script.innerHTML) {", "originalCommit": "a4df0b71a69bf3f634bff43049369717ddf6b6ff", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjYzNzg2Ng==", "url": "https://github.com/opfab/operatorfabric-core/pull/493#discussion_r496637866", "bodyText": "done", "author": "freddidierRTE", "createdAt": "2020-09-29T11:20:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjU0NjI2NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjU0Njg1Mw==", "url": "https://github.com/opfab/operatorfabric-core/pull/493#discussion_r496546853", "bodyText": "if(!!locale)", "author": "rlg-pro", "createdAt": "2020-09-29T08:48:34Z", "path": "ui/main/src/app/modules/usercard/newcard-template.services.ts", "diffHunk": "@@ -0,0 +1,44 @@\n+import {Injectable} from '@angular/core';\n+\n+\n+import {Map} from '@ofModel/map';\n+import {ProcessesService} from '@ofServices/processes.service';\n+import {Store} from '@ngrx/store';\n+import {AppState} from '@ofStore/index';\n+import {buildSettingsOrConfigSelector} from '@ofSelectors/settings.x.config.selectors';\n+import {Observable, of} from 'rxjs';\n+\n+\n+@Injectable()\n+export class NewCardTemplateService {\n+\n+    private templateCache: Map<string> = new Map();\n+    private _locale: string;\n+\n+\n+    constructor(private businessconfig: ProcessesService, private store: Store<AppState>) {\n+        this.store.select(buildSettingsOrConfigSelector('locale')).subscribe(locale => this.changeLocale(locale));\n+    }\n+\n+\n+    public changeLocale(locale: string){\n+        if (locale) {", "originalCommit": "a4df0b71a69bf3f634bff43049369717ddf6b6ff", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjYzODA2MA==", "url": "https://github.com/opfab/operatorfabric-core/pull/493#discussion_r496638060", "bodyText": "done", "author": "freddidierRTE", "createdAt": "2020-09-29T11:20:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjU0Njg1Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjU0NzA1NA==", "url": "https://github.com/opfab/operatorfabric-core/pull/493#discussion_r496547054", "bodyText": "if(!!template)", "author": "rlg-pro", "createdAt": "2020-09-29T08:48:53Z", "path": "ui/main/src/app/modules/usercard/newcard-template.services.ts", "diffHunk": "@@ -0,0 +1,44 @@\n+import {Injectable} from '@angular/core';\n+\n+\n+import {Map} from '@ofModel/map';\n+import {ProcessesService} from '@ofServices/processes.service';\n+import {Store} from '@ngrx/store';\n+import {AppState} from '@ofStore/index';\n+import {buildSettingsOrConfigSelector} from '@ofSelectors/settings.x.config.selectors';\n+import {Observable, of} from 'rxjs';\n+\n+\n+@Injectable()\n+export class NewCardTemplateService {\n+\n+    private templateCache: Map<string> = new Map();\n+    private _locale: string;\n+\n+\n+    constructor(private businessconfig: ProcessesService, private store: Store<AppState>) {\n+        this.store.select(buildSettingsOrConfigSelector('locale')).subscribe(locale => this.changeLocale(locale));\n+    }\n+\n+\n+    public changeLocale(locale: string){\n+        if (locale) {\n+            this._locale = locale;\n+        } else {\n+            this._locale = 'en';\n+        }\n+    }\n+\n+    public getTemplate(process: string, version: string, name: string ): Observable<string> {\n+        const locale = this._locale;\n+        const key = `${process}.${version}.${name}.${locale}`;\n+        const template = this.templateCache[key];\n+        if (template) {", "originalCommit": "a4df0b71a69bf3f634bff43049369717ddf6b6ff", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjYzODIwNg==", "url": "https://github.com/opfab/operatorfabric-core/pull/493#discussion_r496638206", "bodyText": "done", "author": "freddidierRTE", "createdAt": "2020-09-29T11:20:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjU0NzA1NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjU1Mjk0Mw==", "url": "https://github.com/opfab/operatorfabric-core/pull/493#discussion_r496552943", "bodyText": "Simplify by forEach ?", "author": "rlg-pro", "createdAt": "2020-09-29T08:57:28Z", "path": "ui/main/src/app/modules/usercard/usercard.component.ts", "diffHunk": "@@ -81,123 +109,222 @@ export class UserCardComponent implements OnDestroy {\n             startDate: new FormControl(''),\n             endDate: new FormControl(''),\n             comment: new FormControl(''),\n-            entities: new FormControl('')\n-        }\n-        );\n+            entities: new FormControl([])\n+        });\n+\n+        this.changeSeverityToDefaultValue();\n+        this.changeStatesWhenSelectProcess();\n+        this.loadTemplateWhenStateChange();\n+\n+        this.dropdownSettings = {\n+            text: 'Select a recip\u00eeent',\n+            selectAllText: 'Select All',\n+            unSelectAllText: 'UnSelect All',\n+            enableSearchFilter: true,\n+            classes: 'custom-class-example'\n+        };\n+\n+    }\n+\n+    loadAllEntities(): void {\n+        this.entitiesService.getEntities().forEach(entity =>\n+            this.entityOptions.push({ id: entity.id, itemName: entity.name }));\n+    }\n \n+\n+    loadAllProcessAndStateInUserPerimeter(): void {\n         this.processOptions$ = this.store.select(selectProcesses).pipe(\n             takeUntil(this.unsubscribe$),\n+            tap((allProcesses: Process[]) => this.processesDefinition = allProcesses),\n             map((allProcesses: Process[]) => {\n-                return allProcesses.map((proc: Process) => {\n-                    const _i18nPrefix = proc.id + '.' + proc.version + '.';\n-                    const label = proc.name ? (_i18nPrefix + proc.name) : proc.id;\n-                    return {\n-                        value: proc.id,\n-                        label: label\n-                    };\n+                const processesToShow: any[] = new Array();\n+                const processesInPerimeter: Set<string> = new Set();\n+                this.currentUserWithPerimeters.computedPerimeters.forEach(perimeter => {\n+                    if (this.userCanSendCard(perimeter)) processesInPerimeter.add(perimeter.process);\n+                });\n+                allProcesses.forEach(process => {\n+                    if (processesInPerimeter.has(process.id)) {\n+                        const _i18nPrefix = process.id + '.' + process.version + '.';\n+                        const label = process.name ? (_i18nPrefix + process.name) : process.id;\n+                        const processToShow = { value: process.id, label: label };\n+                        processesToShow.push(processToShow);\n+                        this.loadStatesForProcess(process);\n+                    }\n                 });\n+                return processesToShow;\n             })\n         );\n+    }\n \n-        this.stateOptions$ = this.messageForm.get('process').valueChanges.pipe(\n-            withLatestFrom(this.store.select(selectProcesses)),\n-            map(([selectedProcessId, allProcesses]: [string, Process[]]) => {\n-                // TODO What if selectedProcessId is null ? == vs ===\n-                const selectedProcess = allProcesses.find(process => process.id === selectedProcessId);\n-                if (selectedProcess) {\n-                    return Object.entries(selectedProcess.states).map(([id, state]: [string, State]) => {\n-                        const label = state.name ? (new I18n(this.getI18nPrefixFromProcess(selectedProcess)\n-                            + state.name)) : id;\n-                        return {\n-                            value: id,\n-                            label: label\n-                        };\n-                    });\n-                } else {\n-                    return [];\n-                }\n-            })\n-        );\n \n-        this.entityOptions$ = this.store.select(selectAllEntities).pipe(\n-            takeUntil(this.unsubscribe$),\n-            map((allEntities: Entity[]) => allEntities.map((entity: Entity) => {\n-                return { value: entity.id, label: entity.name };\n-            })\n-            )\n-        );\n+    private userCanSendCard(perimeter: ComputedPerimeter): boolean {\n+        return ((perimeter.rights === RightsEnum.ReceiveAndWrite)\n+            || (perimeter.rights === RightsEnum.Write));\n+    }\n \n-        this.store.select(selectProcesses)\n-            .pipe(takeUntil(this.unsubscribe$)).\n-            subscribe((allProcesses: Process[]) => {\n-                this.fetchedProcesses = allProcesses;\n+    loadStatesForProcess(process: Process): void {\n+        const statesList = [];\n+        this.currentUserWithPerimeters.computedPerimeters.forEach(\n+            perimeter => {\n+                if ((perimeter.process === process.id) && this.userCanSendCard(perimeter)) {\n+                    const state = process.states[perimeter.state];\n+                    const label = state.name ? (new I18n(this.getI18nPrefixFromProcess(process)\n+                        + state.name)) : perimeter.state;\n+                    const stateEntry = { value: perimeter.state, label: label };\n+                    statesList.push(stateEntry);\n+\n+                }\n             });\n+        this.statesPerProcesses.set(process.id, statesList);\n+    }\n+\n+\n+    changeSeverityToDefaultValue(): void {\n+        this.messageForm.get('severity').valueChanges.subscribe((severity) => {\n+            if (!severity) this.messageForm.get('severity').setValue(this.severityOptions[0].value);\n+        });\n+        this.messageForm.get('severity').setValue(this.severityOptions[0].value);\n+\n+    }\n \n-        const userWithPerimeters = this.userService.getCurrentUserWithPerimeters();\n-        if (userWithPerimeters) {\n-            this.currentUser = userWithPerimeters.userData;\n+\n+    changeStatesWhenSelectProcess(): void {\n+        this.messageForm.get('process').valueChanges.subscribe((process) => {\n+            if (!!process) {\n+                this.stateOptions = this.statesPerProcesses.get(process);\n+                this.selectedState = this.stateOptions[0].value;\n+                this.selectedProcess = this.processesDefinition.find(processDefinition => {\n+                    return processDefinition.id === process;\n+                });\n+                this.messageForm.get('state').setValue(this.selectedState);\n+                this.loadTemplate();\n+            }\n+        });\n+    }\n+\n+    loadTemplateWhenStateChange(): void {\n+        this.messageForm.get('state').valueChanges.subscribe((state) => {\n+            if (!!state) {\n+                this.selectedState = state;\n+                this.loadTemplate();\n+            }\n+        });\n+    }\n+\n+    loadTemplate() {\n+        this.errorMessage.display = false;\n+        const templateName = this.selectedProcess.states[this.selectedState].userCardTemplate;\n+        if (!!templateName) {\n+            this.newCardTemplateService.getTemplate(this.selectedProcess.id, this.selectedProcess.version, templateName)\n+                .subscribe((template) => {\n+                    this.userCardTemplate = this.sanitizer.bypassSecurityTrustHtml(template);\n+                    setTimeout(() => { // wait for DOM rendering\n+                        this.reinsertScripts();\n+                    }, 10);\n+                }\n+                );\n+        } else this.userCardTemplate = this.sanitizer.bypassSecurityTrustHtml('');\n+\n+    }\n+\n+    reinsertScripts(): void {\n+        const scripts = <HTMLScriptElement[]>this.element.nativeElement.getElementsByTagName('script');\n+        const scriptsInitialLength = scripts.length;\n+        for (let i = 0; i < scriptsInitialLength; i++) {", "originalCommit": "a4df0b71a69bf3f634bff43049369717ddf6b6ff", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjY0MjU3MA==", "url": "https://github.com/opfab/operatorfabric-core/pull/493#discussion_r496642570", "bodyText": "done", "author": "freddidierRTE", "createdAt": "2020-09-29T11:29:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjU1Mjk0Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjU1MzE0MA==", "url": "https://github.com/opfab/operatorfabric-core/pull/493#discussion_r496553140", "bodyText": "if(!!script.innerHTML)", "author": "rlg-pro", "createdAt": "2020-09-29T08:57:46Z", "path": "ui/main/src/app/modules/usercard/usercard.component.ts", "diffHunk": "@@ -81,123 +109,222 @@ export class UserCardComponent implements OnDestroy {\n             startDate: new FormControl(''),\n             endDate: new FormControl(''),\n             comment: new FormControl(''),\n-            entities: new FormControl('')\n-        }\n-        );\n+            entities: new FormControl([])\n+        });\n+\n+        this.changeSeverityToDefaultValue();\n+        this.changeStatesWhenSelectProcess();\n+        this.loadTemplateWhenStateChange();\n+\n+        this.dropdownSettings = {\n+            text: 'Select a recip\u00eeent',\n+            selectAllText: 'Select All',\n+            unSelectAllText: 'UnSelect All',\n+            enableSearchFilter: true,\n+            classes: 'custom-class-example'\n+        };\n+\n+    }\n+\n+    loadAllEntities(): void {\n+        this.entitiesService.getEntities().forEach(entity =>\n+            this.entityOptions.push({ id: entity.id, itemName: entity.name }));\n+    }\n \n+\n+    loadAllProcessAndStateInUserPerimeter(): void {\n         this.processOptions$ = this.store.select(selectProcesses).pipe(\n             takeUntil(this.unsubscribe$),\n+            tap((allProcesses: Process[]) => this.processesDefinition = allProcesses),\n             map((allProcesses: Process[]) => {\n-                return allProcesses.map((proc: Process) => {\n-                    const _i18nPrefix = proc.id + '.' + proc.version + '.';\n-                    const label = proc.name ? (_i18nPrefix + proc.name) : proc.id;\n-                    return {\n-                        value: proc.id,\n-                        label: label\n-                    };\n+                const processesToShow: any[] = new Array();\n+                const processesInPerimeter: Set<string> = new Set();\n+                this.currentUserWithPerimeters.computedPerimeters.forEach(perimeter => {\n+                    if (this.userCanSendCard(perimeter)) processesInPerimeter.add(perimeter.process);\n+                });\n+                allProcesses.forEach(process => {\n+                    if (processesInPerimeter.has(process.id)) {\n+                        const _i18nPrefix = process.id + '.' + process.version + '.';\n+                        const label = process.name ? (_i18nPrefix + process.name) : process.id;\n+                        const processToShow = { value: process.id, label: label };\n+                        processesToShow.push(processToShow);\n+                        this.loadStatesForProcess(process);\n+                    }\n                 });\n+                return processesToShow;\n             })\n         );\n+    }\n \n-        this.stateOptions$ = this.messageForm.get('process').valueChanges.pipe(\n-            withLatestFrom(this.store.select(selectProcesses)),\n-            map(([selectedProcessId, allProcesses]: [string, Process[]]) => {\n-                // TODO What if selectedProcessId is null ? == vs ===\n-                const selectedProcess = allProcesses.find(process => process.id === selectedProcessId);\n-                if (selectedProcess) {\n-                    return Object.entries(selectedProcess.states).map(([id, state]: [string, State]) => {\n-                        const label = state.name ? (new I18n(this.getI18nPrefixFromProcess(selectedProcess)\n-                            + state.name)) : id;\n-                        return {\n-                            value: id,\n-                            label: label\n-                        };\n-                    });\n-                } else {\n-                    return [];\n-                }\n-            })\n-        );\n \n-        this.entityOptions$ = this.store.select(selectAllEntities).pipe(\n-            takeUntil(this.unsubscribe$),\n-            map((allEntities: Entity[]) => allEntities.map((entity: Entity) => {\n-                return { value: entity.id, label: entity.name };\n-            })\n-            )\n-        );\n+    private userCanSendCard(perimeter: ComputedPerimeter): boolean {\n+        return ((perimeter.rights === RightsEnum.ReceiveAndWrite)\n+            || (perimeter.rights === RightsEnum.Write));\n+    }\n \n-        this.store.select(selectProcesses)\n-            .pipe(takeUntil(this.unsubscribe$)).\n-            subscribe((allProcesses: Process[]) => {\n-                this.fetchedProcesses = allProcesses;\n+    loadStatesForProcess(process: Process): void {\n+        const statesList = [];\n+        this.currentUserWithPerimeters.computedPerimeters.forEach(\n+            perimeter => {\n+                if ((perimeter.process === process.id) && this.userCanSendCard(perimeter)) {\n+                    const state = process.states[perimeter.state];\n+                    const label = state.name ? (new I18n(this.getI18nPrefixFromProcess(process)\n+                        + state.name)) : perimeter.state;\n+                    const stateEntry = { value: perimeter.state, label: label };\n+                    statesList.push(stateEntry);\n+\n+                }\n             });\n+        this.statesPerProcesses.set(process.id, statesList);\n+    }\n+\n+\n+    changeSeverityToDefaultValue(): void {\n+        this.messageForm.get('severity').valueChanges.subscribe((severity) => {\n+            if (!severity) this.messageForm.get('severity').setValue(this.severityOptions[0].value);\n+        });\n+        this.messageForm.get('severity').setValue(this.severityOptions[0].value);\n+\n+    }\n \n-        const userWithPerimeters = this.userService.getCurrentUserWithPerimeters();\n-        if (userWithPerimeters) {\n-            this.currentUser = userWithPerimeters.userData;\n+\n+    changeStatesWhenSelectProcess(): void {\n+        this.messageForm.get('process').valueChanges.subscribe((process) => {\n+            if (!!process) {\n+                this.stateOptions = this.statesPerProcesses.get(process);\n+                this.selectedState = this.stateOptions[0].value;\n+                this.selectedProcess = this.processesDefinition.find(processDefinition => {\n+                    return processDefinition.id === process;\n+                });\n+                this.messageForm.get('state').setValue(this.selectedState);\n+                this.loadTemplate();\n+            }\n+        });\n+    }\n+\n+    loadTemplateWhenStateChange(): void {\n+        this.messageForm.get('state').valueChanges.subscribe((state) => {\n+            if (!!state) {\n+                this.selectedState = state;\n+                this.loadTemplate();\n+            }\n+        });\n+    }\n+\n+    loadTemplate() {\n+        this.errorMessage.display = false;\n+        const templateName = this.selectedProcess.states[this.selectedState].userCardTemplate;\n+        if (!!templateName) {\n+            this.newCardTemplateService.getTemplate(this.selectedProcess.id, this.selectedProcess.version, templateName)\n+                .subscribe((template) => {\n+                    this.userCardTemplate = this.sanitizer.bypassSecurityTrustHtml(template);\n+                    setTimeout(() => { // wait for DOM rendering\n+                        this.reinsertScripts();\n+                    }, 10);\n+                }\n+                );\n+        } else this.userCardTemplate = this.sanitizer.bypassSecurityTrustHtml('');\n+\n+    }\n+\n+    reinsertScripts(): void {\n+        const scripts = <HTMLScriptElement[]>this.element.nativeElement.getElementsByTagName('script');\n+        const scriptsInitialLength = scripts.length;\n+        for (let i = 0; i < scriptsInitialLength; i++) {\n+            const script = scripts[i];\n+            const scriptCopy = document.createElement('script');\n+            scriptCopy.type = script.type ? script.type : 'text/javascript';\n+            if (script.innerHTML) {", "originalCommit": "a4df0b71a69bf3f634bff43049369717ddf6b6ff", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjYzODYxOQ==", "url": "https://github.com/opfab/operatorfabric-core/pull/493#discussion_r496638619", "bodyText": "done", "author": "freddidierRTE", "createdAt": "2020-09-29T11:21:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjU1MzE0MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjU1NTU4NQ==", "url": "https://github.com/opfab/operatorfabric-core/pull/493#discussion_r496555585", "bodyText": "endDate.value === ''same as above, it could be !endDate.value", "author": "rlg-pro", "createdAt": "2020-09-29T09:01:20Z", "path": "ui/main/src/app/modules/usercard/usercard.component.ts", "diffHunk": "@@ -81,123 +109,222 @@ export class UserCardComponent implements OnDestroy {\n             startDate: new FormControl(''),\n             endDate: new FormControl(''),\n             comment: new FormControl(''),\n-            entities: new FormControl('')\n-        }\n-        );\n+            entities: new FormControl([])\n+        });\n+\n+        this.changeSeverityToDefaultValue();\n+        this.changeStatesWhenSelectProcess();\n+        this.loadTemplateWhenStateChange();\n+\n+        this.dropdownSettings = {\n+            text: 'Select a recip\u00eeent',\n+            selectAllText: 'Select All',\n+            unSelectAllText: 'UnSelect All',\n+            enableSearchFilter: true,\n+            classes: 'custom-class-example'\n+        };\n+\n+    }\n+\n+    loadAllEntities(): void {\n+        this.entitiesService.getEntities().forEach(entity =>\n+            this.entityOptions.push({ id: entity.id, itemName: entity.name }));\n+    }\n \n+\n+    loadAllProcessAndStateInUserPerimeter(): void {\n         this.processOptions$ = this.store.select(selectProcesses).pipe(\n             takeUntil(this.unsubscribe$),\n+            tap((allProcesses: Process[]) => this.processesDefinition = allProcesses),\n             map((allProcesses: Process[]) => {\n-                return allProcesses.map((proc: Process) => {\n-                    const _i18nPrefix = proc.id + '.' + proc.version + '.';\n-                    const label = proc.name ? (_i18nPrefix + proc.name) : proc.id;\n-                    return {\n-                        value: proc.id,\n-                        label: label\n-                    };\n+                const processesToShow: any[] = new Array();\n+                const processesInPerimeter: Set<string> = new Set();\n+                this.currentUserWithPerimeters.computedPerimeters.forEach(perimeter => {\n+                    if (this.userCanSendCard(perimeter)) processesInPerimeter.add(perimeter.process);\n+                });\n+                allProcesses.forEach(process => {\n+                    if (processesInPerimeter.has(process.id)) {\n+                        const _i18nPrefix = process.id + '.' + process.version + '.';\n+                        const label = process.name ? (_i18nPrefix + process.name) : process.id;\n+                        const processToShow = { value: process.id, label: label };\n+                        processesToShow.push(processToShow);\n+                        this.loadStatesForProcess(process);\n+                    }\n                 });\n+                return processesToShow;\n             })\n         );\n+    }\n \n-        this.stateOptions$ = this.messageForm.get('process').valueChanges.pipe(\n-            withLatestFrom(this.store.select(selectProcesses)),\n-            map(([selectedProcessId, allProcesses]: [string, Process[]]) => {\n-                // TODO What if selectedProcessId is null ? == vs ===\n-                const selectedProcess = allProcesses.find(process => process.id === selectedProcessId);\n-                if (selectedProcess) {\n-                    return Object.entries(selectedProcess.states).map(([id, state]: [string, State]) => {\n-                        const label = state.name ? (new I18n(this.getI18nPrefixFromProcess(selectedProcess)\n-                            + state.name)) : id;\n-                        return {\n-                            value: id,\n-                            label: label\n-                        };\n-                    });\n-                } else {\n-                    return [];\n-                }\n-            })\n-        );\n \n-        this.entityOptions$ = this.store.select(selectAllEntities).pipe(\n-            takeUntil(this.unsubscribe$),\n-            map((allEntities: Entity[]) => allEntities.map((entity: Entity) => {\n-                return { value: entity.id, label: entity.name };\n-            })\n-            )\n-        );\n+    private userCanSendCard(perimeter: ComputedPerimeter): boolean {\n+        return ((perimeter.rights === RightsEnum.ReceiveAndWrite)\n+            || (perimeter.rights === RightsEnum.Write));\n+    }\n \n-        this.store.select(selectProcesses)\n-            .pipe(takeUntil(this.unsubscribe$)).\n-            subscribe((allProcesses: Process[]) => {\n-                this.fetchedProcesses = allProcesses;\n+    loadStatesForProcess(process: Process): void {\n+        const statesList = [];\n+        this.currentUserWithPerimeters.computedPerimeters.forEach(\n+            perimeter => {\n+                if ((perimeter.process === process.id) && this.userCanSendCard(perimeter)) {\n+                    const state = process.states[perimeter.state];\n+                    const label = state.name ? (new I18n(this.getI18nPrefixFromProcess(process)\n+                        + state.name)) : perimeter.state;\n+                    const stateEntry = { value: perimeter.state, label: label };\n+                    statesList.push(stateEntry);\n+\n+                }\n             });\n+        this.statesPerProcesses.set(process.id, statesList);\n+    }\n+\n+\n+    changeSeverityToDefaultValue(): void {\n+        this.messageForm.get('severity').valueChanges.subscribe((severity) => {\n+            if (!severity) this.messageForm.get('severity').setValue(this.severityOptions[0].value);\n+        });\n+        this.messageForm.get('severity').setValue(this.severityOptions[0].value);\n+\n+    }\n \n-        const userWithPerimeters = this.userService.getCurrentUserWithPerimeters();\n-        if (userWithPerimeters) {\n-            this.currentUser = userWithPerimeters.userData;\n+\n+    changeStatesWhenSelectProcess(): void {\n+        this.messageForm.get('process').valueChanges.subscribe((process) => {\n+            if (!!process) {\n+                this.stateOptions = this.statesPerProcesses.get(process);\n+                this.selectedState = this.stateOptions[0].value;\n+                this.selectedProcess = this.processesDefinition.find(processDefinition => {\n+                    return processDefinition.id === process;\n+                });\n+                this.messageForm.get('state').setValue(this.selectedState);\n+                this.loadTemplate();\n+            }\n+        });\n+    }\n+\n+    loadTemplateWhenStateChange(): void {\n+        this.messageForm.get('state').valueChanges.subscribe((state) => {\n+            if (!!state) {\n+                this.selectedState = state;\n+                this.loadTemplate();\n+            }\n+        });\n+    }\n+\n+    loadTemplate() {\n+        this.errorMessage.display = false;\n+        const templateName = this.selectedProcess.states[this.selectedState].userCardTemplate;\n+        if (!!templateName) {\n+            this.newCardTemplateService.getTemplate(this.selectedProcess.id, this.selectedProcess.version, templateName)\n+                .subscribe((template) => {\n+                    this.userCardTemplate = this.sanitizer.bypassSecurityTrustHtml(template);\n+                    setTimeout(() => { // wait for DOM rendering\n+                        this.reinsertScripts();\n+                    }, 10);\n+                }\n+                );\n+        } else this.userCardTemplate = this.sanitizer.bypassSecurityTrustHtml('');\n+\n+    }\n+\n+    reinsertScripts(): void {\n+        const scripts = <HTMLScriptElement[]>this.element.nativeElement.getElementsByTagName('script');\n+        const scriptsInitialLength = scripts.length;\n+        for (let i = 0; i < scriptsInitialLength; i++) {\n+            const script = scripts[i];\n+            const scriptCopy = document.createElement('script');\n+            scriptCopy.type = script.type ? script.type : 'text/javascript';\n+            if (script.innerHTML) {\n+                scriptCopy.innerHTML = script.innerHTML;\n+            }\n+            scriptCopy.async = false;\n+            script.parentNode.replaceChild(scriptCopy, script);\n         }\n     }\n \n+\n+\n     onSubmitForm(template: TemplateRef<any>) {\n         const formValue = this.messageForm.value;\n-\n         const processFormVal = formValue['process'];\n-        const selectedProcess = this.fetchedProcesses.find(process => {\n+        const selectedProcess = this.processesDefinition.find(process => {\n             return process.id === processFormVal;\n         });\n         const processVersion = selectedProcess.version;\n-        const formValueElement = formValue['state'];\n-        const selectedState = selectedProcess.states[formValueElement];\n-        const titleKey = (new I18n((selectedState.name) ? selectedProcess.name : formValueElement));\n-        const now = new Date().getTime();\n+        const state = formValue['state'];\n+\n+        if (!templateGateway.getSpecificCardInformation) {\n+            console.log('No getSpecificCardInformationMethod() in template can not send card');\n+            this.errorMessage.display = true;\n+            this.errorMessage.text = 'userCard.error.templateError';\n+            return;\n+        }\n+\n+        const specificInformation = templateGateway.getSpecificCardInformation();\n+        if (!specificInformation) {\n+            console.log('getSpecificCardInformationMethod() in template return no information');\n+            this.errorMessage.display = true;\n+            this.errorMessage.text = 'userCard.error.templateError';\n+            return;\n+        }\n+\n+        if (!specificInformation.valid) {\n+            this.errorMessage.display = true;\n+            this.errorMessage.text = specificInformation.errorMsg;\n+            return;\n+        }\n+\n+        const entities = new Array();\n+        if (formValue['entities'].length < 1) {\n+            this.errorMessage.display = true;\n+            this.errorMessage.text = 'userCard.error.noRecipientSelected';\n+            return;\n+        } else {\n+            formValue['entities'].forEach(entity => entities.push(entity.id));\n+        }\n+\n+        let startDate = this.messageForm.get('startDate').value;\n+        if ((!startDate) || startDate.value === '') startDate = this.defaultStartDate;\n+\n+        let endDate = this.messageForm.get('endDate').value;\n+        if ((!endDate) || endDate.value === '') endDate = this.defaultEndDate;", "originalCommit": "a4df0b71a69bf3f634bff43049369717ddf6b6ff", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjYzODczNA==", "url": "https://github.com/opfab/operatorfabric-core/pull/493#discussion_r496638734", "bodyText": "done", "author": "freddidierRTE", "createdAt": "2020-09-29T11:21:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjU1NTU4NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjU1NTczNA==", "url": "https://github.com/opfab/operatorfabric-core/pull/493#discussion_r496555734", "bodyText": "as startDate.value === ''in Javascript returns false in a boolean test this could be !startDate.value", "author": "rlg-pro", "createdAt": "2020-09-29T09:01:32Z", "path": "ui/main/src/app/modules/usercard/usercard.component.ts", "diffHunk": "@@ -81,123 +109,222 @@ export class UserCardComponent implements OnDestroy {\n             startDate: new FormControl(''),\n             endDate: new FormControl(''),\n             comment: new FormControl(''),\n-            entities: new FormControl('')\n-        }\n-        );\n+            entities: new FormControl([])\n+        });\n+\n+        this.changeSeverityToDefaultValue();\n+        this.changeStatesWhenSelectProcess();\n+        this.loadTemplateWhenStateChange();\n+\n+        this.dropdownSettings = {\n+            text: 'Select a recip\u00eeent',\n+            selectAllText: 'Select All',\n+            unSelectAllText: 'UnSelect All',\n+            enableSearchFilter: true,\n+            classes: 'custom-class-example'\n+        };\n+\n+    }\n+\n+    loadAllEntities(): void {\n+        this.entitiesService.getEntities().forEach(entity =>\n+            this.entityOptions.push({ id: entity.id, itemName: entity.name }));\n+    }\n \n+\n+    loadAllProcessAndStateInUserPerimeter(): void {\n         this.processOptions$ = this.store.select(selectProcesses).pipe(\n             takeUntil(this.unsubscribe$),\n+            tap((allProcesses: Process[]) => this.processesDefinition = allProcesses),\n             map((allProcesses: Process[]) => {\n-                return allProcesses.map((proc: Process) => {\n-                    const _i18nPrefix = proc.id + '.' + proc.version + '.';\n-                    const label = proc.name ? (_i18nPrefix + proc.name) : proc.id;\n-                    return {\n-                        value: proc.id,\n-                        label: label\n-                    };\n+                const processesToShow: any[] = new Array();\n+                const processesInPerimeter: Set<string> = new Set();\n+                this.currentUserWithPerimeters.computedPerimeters.forEach(perimeter => {\n+                    if (this.userCanSendCard(perimeter)) processesInPerimeter.add(perimeter.process);\n+                });\n+                allProcesses.forEach(process => {\n+                    if (processesInPerimeter.has(process.id)) {\n+                        const _i18nPrefix = process.id + '.' + process.version + '.';\n+                        const label = process.name ? (_i18nPrefix + process.name) : process.id;\n+                        const processToShow = { value: process.id, label: label };\n+                        processesToShow.push(processToShow);\n+                        this.loadStatesForProcess(process);\n+                    }\n                 });\n+                return processesToShow;\n             })\n         );\n+    }\n \n-        this.stateOptions$ = this.messageForm.get('process').valueChanges.pipe(\n-            withLatestFrom(this.store.select(selectProcesses)),\n-            map(([selectedProcessId, allProcesses]: [string, Process[]]) => {\n-                // TODO What if selectedProcessId is null ? == vs ===\n-                const selectedProcess = allProcesses.find(process => process.id === selectedProcessId);\n-                if (selectedProcess) {\n-                    return Object.entries(selectedProcess.states).map(([id, state]: [string, State]) => {\n-                        const label = state.name ? (new I18n(this.getI18nPrefixFromProcess(selectedProcess)\n-                            + state.name)) : id;\n-                        return {\n-                            value: id,\n-                            label: label\n-                        };\n-                    });\n-                } else {\n-                    return [];\n-                }\n-            })\n-        );\n \n-        this.entityOptions$ = this.store.select(selectAllEntities).pipe(\n-            takeUntil(this.unsubscribe$),\n-            map((allEntities: Entity[]) => allEntities.map((entity: Entity) => {\n-                return { value: entity.id, label: entity.name };\n-            })\n-            )\n-        );\n+    private userCanSendCard(perimeter: ComputedPerimeter): boolean {\n+        return ((perimeter.rights === RightsEnum.ReceiveAndWrite)\n+            || (perimeter.rights === RightsEnum.Write));\n+    }\n \n-        this.store.select(selectProcesses)\n-            .pipe(takeUntil(this.unsubscribe$)).\n-            subscribe((allProcesses: Process[]) => {\n-                this.fetchedProcesses = allProcesses;\n+    loadStatesForProcess(process: Process): void {\n+        const statesList = [];\n+        this.currentUserWithPerimeters.computedPerimeters.forEach(\n+            perimeter => {\n+                if ((perimeter.process === process.id) && this.userCanSendCard(perimeter)) {\n+                    const state = process.states[perimeter.state];\n+                    const label = state.name ? (new I18n(this.getI18nPrefixFromProcess(process)\n+                        + state.name)) : perimeter.state;\n+                    const stateEntry = { value: perimeter.state, label: label };\n+                    statesList.push(stateEntry);\n+\n+                }\n             });\n+        this.statesPerProcesses.set(process.id, statesList);\n+    }\n+\n+\n+    changeSeverityToDefaultValue(): void {\n+        this.messageForm.get('severity').valueChanges.subscribe((severity) => {\n+            if (!severity) this.messageForm.get('severity').setValue(this.severityOptions[0].value);\n+        });\n+        this.messageForm.get('severity').setValue(this.severityOptions[0].value);\n+\n+    }\n \n-        const userWithPerimeters = this.userService.getCurrentUserWithPerimeters();\n-        if (userWithPerimeters) {\n-            this.currentUser = userWithPerimeters.userData;\n+\n+    changeStatesWhenSelectProcess(): void {\n+        this.messageForm.get('process').valueChanges.subscribe((process) => {\n+            if (!!process) {\n+                this.stateOptions = this.statesPerProcesses.get(process);\n+                this.selectedState = this.stateOptions[0].value;\n+                this.selectedProcess = this.processesDefinition.find(processDefinition => {\n+                    return processDefinition.id === process;\n+                });\n+                this.messageForm.get('state').setValue(this.selectedState);\n+                this.loadTemplate();\n+            }\n+        });\n+    }\n+\n+    loadTemplateWhenStateChange(): void {\n+        this.messageForm.get('state').valueChanges.subscribe((state) => {\n+            if (!!state) {\n+                this.selectedState = state;\n+                this.loadTemplate();\n+            }\n+        });\n+    }\n+\n+    loadTemplate() {\n+        this.errorMessage.display = false;\n+        const templateName = this.selectedProcess.states[this.selectedState].userCardTemplate;\n+        if (!!templateName) {\n+            this.newCardTemplateService.getTemplate(this.selectedProcess.id, this.selectedProcess.version, templateName)\n+                .subscribe((template) => {\n+                    this.userCardTemplate = this.sanitizer.bypassSecurityTrustHtml(template);\n+                    setTimeout(() => { // wait for DOM rendering\n+                        this.reinsertScripts();\n+                    }, 10);\n+                }\n+                );\n+        } else this.userCardTemplate = this.sanitizer.bypassSecurityTrustHtml('');\n+\n+    }\n+\n+    reinsertScripts(): void {\n+        const scripts = <HTMLScriptElement[]>this.element.nativeElement.getElementsByTagName('script');\n+        const scriptsInitialLength = scripts.length;\n+        for (let i = 0; i < scriptsInitialLength; i++) {\n+            const script = scripts[i];\n+            const scriptCopy = document.createElement('script');\n+            scriptCopy.type = script.type ? script.type : 'text/javascript';\n+            if (script.innerHTML) {\n+                scriptCopy.innerHTML = script.innerHTML;\n+            }\n+            scriptCopy.async = false;\n+            script.parentNode.replaceChild(scriptCopy, script);\n         }\n     }\n \n+\n+\n     onSubmitForm(template: TemplateRef<any>) {\n         const formValue = this.messageForm.value;\n-\n         const processFormVal = formValue['process'];\n-        const selectedProcess = this.fetchedProcesses.find(process => {\n+        const selectedProcess = this.processesDefinition.find(process => {\n             return process.id === processFormVal;\n         });\n         const processVersion = selectedProcess.version;\n-        const formValueElement = formValue['state'];\n-        const selectedState = selectedProcess.states[formValueElement];\n-        const titleKey = (new I18n((selectedState.name) ? selectedProcess.name : formValueElement));\n-        const now = new Date().getTime();\n+        const state = formValue['state'];\n+\n+        if (!templateGateway.getSpecificCardInformation) {\n+            console.log('No getSpecificCardInformationMethod() in template can not send card');\n+            this.errorMessage.display = true;\n+            this.errorMessage.text = 'userCard.error.templateError';\n+            return;\n+        }\n+\n+        const specificInformation = templateGateway.getSpecificCardInformation();\n+        if (!specificInformation) {\n+            console.log('getSpecificCardInformationMethod() in template return no information');\n+            this.errorMessage.display = true;\n+            this.errorMessage.text = 'userCard.error.templateError';\n+            return;\n+        }\n+\n+        if (!specificInformation.valid) {\n+            this.errorMessage.display = true;\n+            this.errorMessage.text = specificInformation.errorMsg;\n+            return;\n+        }\n+\n+        const entities = new Array();\n+        if (formValue['entities'].length < 1) {\n+            this.errorMessage.display = true;\n+            this.errorMessage.text = 'userCard.error.noRecipientSelected';\n+            return;\n+        } else {\n+            formValue['entities'].forEach(entity => entities.push(entity.id));\n+        }\n+\n+        let startDate = this.messageForm.get('startDate').value;\n+        if ((!startDate) || startDate.value === '') startDate = this.defaultStartDate;", "originalCommit": "a4df0b71a69bf3f634bff43049369717ddf6b6ff", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjYzNzEwNw==", "url": "https://github.com/opfab/operatorfabric-core/pull/493#discussion_r496637107", "bodyText": "Done", "author": "freddidierRTE", "createdAt": "2020-09-29T11:18:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjU1NTczNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjU1NjQ3Mg==", "url": "https://github.com/opfab/operatorfabric-core/pull/493#discussion_r496556472", "bodyText": "consistency: (!!specificInformation.card.title)", "author": "rlg-pro", "createdAt": "2020-09-29T09:02:39Z", "path": "ui/main/src/app/modules/usercard/usercard.component.ts", "diffHunk": "@@ -81,123 +109,222 @@ export class UserCardComponent implements OnDestroy {\n             startDate: new FormControl(''),\n             endDate: new FormControl(''),\n             comment: new FormControl(''),\n-            entities: new FormControl('')\n-        }\n-        );\n+            entities: new FormControl([])\n+        });\n+\n+        this.changeSeverityToDefaultValue();\n+        this.changeStatesWhenSelectProcess();\n+        this.loadTemplateWhenStateChange();\n+\n+        this.dropdownSettings = {\n+            text: 'Select a recip\u00eeent',\n+            selectAllText: 'Select All',\n+            unSelectAllText: 'UnSelect All',\n+            enableSearchFilter: true,\n+            classes: 'custom-class-example'\n+        };\n+\n+    }\n+\n+    loadAllEntities(): void {\n+        this.entitiesService.getEntities().forEach(entity =>\n+            this.entityOptions.push({ id: entity.id, itemName: entity.name }));\n+    }\n \n+\n+    loadAllProcessAndStateInUserPerimeter(): void {\n         this.processOptions$ = this.store.select(selectProcesses).pipe(\n             takeUntil(this.unsubscribe$),\n+            tap((allProcesses: Process[]) => this.processesDefinition = allProcesses),\n             map((allProcesses: Process[]) => {\n-                return allProcesses.map((proc: Process) => {\n-                    const _i18nPrefix = proc.id + '.' + proc.version + '.';\n-                    const label = proc.name ? (_i18nPrefix + proc.name) : proc.id;\n-                    return {\n-                        value: proc.id,\n-                        label: label\n-                    };\n+                const processesToShow: any[] = new Array();\n+                const processesInPerimeter: Set<string> = new Set();\n+                this.currentUserWithPerimeters.computedPerimeters.forEach(perimeter => {\n+                    if (this.userCanSendCard(perimeter)) processesInPerimeter.add(perimeter.process);\n+                });\n+                allProcesses.forEach(process => {\n+                    if (processesInPerimeter.has(process.id)) {\n+                        const _i18nPrefix = process.id + '.' + process.version + '.';\n+                        const label = process.name ? (_i18nPrefix + process.name) : process.id;\n+                        const processToShow = { value: process.id, label: label };\n+                        processesToShow.push(processToShow);\n+                        this.loadStatesForProcess(process);\n+                    }\n                 });\n+                return processesToShow;\n             })\n         );\n+    }\n \n-        this.stateOptions$ = this.messageForm.get('process').valueChanges.pipe(\n-            withLatestFrom(this.store.select(selectProcesses)),\n-            map(([selectedProcessId, allProcesses]: [string, Process[]]) => {\n-                // TODO What if selectedProcessId is null ? == vs ===\n-                const selectedProcess = allProcesses.find(process => process.id === selectedProcessId);\n-                if (selectedProcess) {\n-                    return Object.entries(selectedProcess.states).map(([id, state]: [string, State]) => {\n-                        const label = state.name ? (new I18n(this.getI18nPrefixFromProcess(selectedProcess)\n-                            + state.name)) : id;\n-                        return {\n-                            value: id,\n-                            label: label\n-                        };\n-                    });\n-                } else {\n-                    return [];\n-                }\n-            })\n-        );\n \n-        this.entityOptions$ = this.store.select(selectAllEntities).pipe(\n-            takeUntil(this.unsubscribe$),\n-            map((allEntities: Entity[]) => allEntities.map((entity: Entity) => {\n-                return { value: entity.id, label: entity.name };\n-            })\n-            )\n-        );\n+    private userCanSendCard(perimeter: ComputedPerimeter): boolean {\n+        return ((perimeter.rights === RightsEnum.ReceiveAndWrite)\n+            || (perimeter.rights === RightsEnum.Write));\n+    }\n \n-        this.store.select(selectProcesses)\n-            .pipe(takeUntil(this.unsubscribe$)).\n-            subscribe((allProcesses: Process[]) => {\n-                this.fetchedProcesses = allProcesses;\n+    loadStatesForProcess(process: Process): void {\n+        const statesList = [];\n+        this.currentUserWithPerimeters.computedPerimeters.forEach(\n+            perimeter => {\n+                if ((perimeter.process === process.id) && this.userCanSendCard(perimeter)) {\n+                    const state = process.states[perimeter.state];\n+                    const label = state.name ? (new I18n(this.getI18nPrefixFromProcess(process)\n+                        + state.name)) : perimeter.state;\n+                    const stateEntry = { value: perimeter.state, label: label };\n+                    statesList.push(stateEntry);\n+\n+                }\n             });\n+        this.statesPerProcesses.set(process.id, statesList);\n+    }\n+\n+\n+    changeSeverityToDefaultValue(): void {\n+        this.messageForm.get('severity').valueChanges.subscribe((severity) => {\n+            if (!severity) this.messageForm.get('severity').setValue(this.severityOptions[0].value);\n+        });\n+        this.messageForm.get('severity').setValue(this.severityOptions[0].value);\n+\n+    }\n \n-        const userWithPerimeters = this.userService.getCurrentUserWithPerimeters();\n-        if (userWithPerimeters) {\n-            this.currentUser = userWithPerimeters.userData;\n+\n+    changeStatesWhenSelectProcess(): void {\n+        this.messageForm.get('process').valueChanges.subscribe((process) => {\n+            if (!!process) {\n+                this.stateOptions = this.statesPerProcesses.get(process);\n+                this.selectedState = this.stateOptions[0].value;\n+                this.selectedProcess = this.processesDefinition.find(processDefinition => {\n+                    return processDefinition.id === process;\n+                });\n+                this.messageForm.get('state').setValue(this.selectedState);\n+                this.loadTemplate();\n+            }\n+        });\n+    }\n+\n+    loadTemplateWhenStateChange(): void {\n+        this.messageForm.get('state').valueChanges.subscribe((state) => {\n+            if (!!state) {\n+                this.selectedState = state;\n+                this.loadTemplate();\n+            }\n+        });\n+    }\n+\n+    loadTemplate() {\n+        this.errorMessage.display = false;\n+        const templateName = this.selectedProcess.states[this.selectedState].userCardTemplate;\n+        if (!!templateName) {\n+            this.newCardTemplateService.getTemplate(this.selectedProcess.id, this.selectedProcess.version, templateName)\n+                .subscribe((template) => {\n+                    this.userCardTemplate = this.sanitizer.bypassSecurityTrustHtml(template);\n+                    setTimeout(() => { // wait for DOM rendering\n+                        this.reinsertScripts();\n+                    }, 10);\n+                }\n+                );\n+        } else this.userCardTemplate = this.sanitizer.bypassSecurityTrustHtml('');\n+\n+    }\n+\n+    reinsertScripts(): void {\n+        const scripts = <HTMLScriptElement[]>this.element.nativeElement.getElementsByTagName('script');\n+        const scriptsInitialLength = scripts.length;\n+        for (let i = 0; i < scriptsInitialLength; i++) {\n+            const script = scripts[i];\n+            const scriptCopy = document.createElement('script');\n+            scriptCopy.type = script.type ? script.type : 'text/javascript';\n+            if (script.innerHTML) {\n+                scriptCopy.innerHTML = script.innerHTML;\n+            }\n+            scriptCopy.async = false;\n+            script.parentNode.replaceChild(scriptCopy, script);\n         }\n     }\n \n+\n+\n     onSubmitForm(template: TemplateRef<any>) {\n         const formValue = this.messageForm.value;\n-\n         const processFormVal = formValue['process'];\n-        const selectedProcess = this.fetchedProcesses.find(process => {\n+        const selectedProcess = this.processesDefinition.find(process => {\n             return process.id === processFormVal;\n         });\n         const processVersion = selectedProcess.version;\n-        const formValueElement = formValue['state'];\n-        const selectedState = selectedProcess.states[formValueElement];\n-        const titleKey = (new I18n((selectedState.name) ? selectedProcess.name : formValueElement));\n-        const now = new Date().getTime();\n+        const state = formValue['state'];\n+\n+        if (!templateGateway.getSpecificCardInformation) {\n+            console.log('No getSpecificCardInformationMethod() in template can not send card');\n+            this.errorMessage.display = true;\n+            this.errorMessage.text = 'userCard.error.templateError';\n+            return;\n+        }\n+\n+        const specificInformation = templateGateway.getSpecificCardInformation();\n+        if (!specificInformation) {\n+            console.log('getSpecificCardInformationMethod() in template return no information');\n+            this.errorMessage.display = true;\n+            this.errorMessage.text = 'userCard.error.templateError';\n+            return;\n+        }\n+\n+        if (!specificInformation.valid) {\n+            this.errorMessage.display = true;\n+            this.errorMessage.text = specificInformation.errorMsg;\n+            return;\n+        }\n+\n+        const entities = new Array();\n+        if (formValue['entities'].length < 1) {\n+            this.errorMessage.display = true;\n+            this.errorMessage.text = 'userCard.error.noRecipientSelected';\n+            return;\n+        } else {\n+            formValue['entities'].forEach(entity => entities.push(entity.id));\n+        }\n+\n+        let startDate = this.messageForm.get('startDate').value;\n+        if ((!startDate) || startDate.value === '') startDate = this.defaultStartDate;\n+\n+        let endDate = this.messageForm.get('endDate').value;\n+        if ((!endDate) || endDate.value === '') endDate = this.defaultEndDate;\n+\n+        const title = (specificInformation.card.title) ? specificInformation.card.title : 'UNDEFINED';", "originalCommit": "a4df0b71a69bf3f634bff43049369717ddf6b6ff", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjYyMjg5Mw==", "url": "https://github.com/opfab/operatorfabric-core/pull/493#discussion_r496622893", "bodyText": "done", "author": "freddidierRTE", "createdAt": "2020-09-29T10:52:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjU1NjQ3Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjU1Njc0NQ==", "url": "https://github.com/opfab/operatorfabric-core/pull/493#discussion_r496556745", "bodyText": "same here: (!!specificInformation.card.summary)`", "author": "rlg-pro", "createdAt": "2020-09-29T09:03:05Z", "path": "ui/main/src/app/modules/usercard/usercard.component.ts", "diffHunk": "@@ -81,123 +109,222 @@ export class UserCardComponent implements OnDestroy {\n             startDate: new FormControl(''),\n             endDate: new FormControl(''),\n             comment: new FormControl(''),\n-            entities: new FormControl('')\n-        }\n-        );\n+            entities: new FormControl([])\n+        });\n+\n+        this.changeSeverityToDefaultValue();\n+        this.changeStatesWhenSelectProcess();\n+        this.loadTemplateWhenStateChange();\n+\n+        this.dropdownSettings = {\n+            text: 'Select a recip\u00eeent',\n+            selectAllText: 'Select All',\n+            unSelectAllText: 'UnSelect All',\n+            enableSearchFilter: true,\n+            classes: 'custom-class-example'\n+        };\n+\n+    }\n+\n+    loadAllEntities(): void {\n+        this.entitiesService.getEntities().forEach(entity =>\n+            this.entityOptions.push({ id: entity.id, itemName: entity.name }));\n+    }\n \n+\n+    loadAllProcessAndStateInUserPerimeter(): void {\n         this.processOptions$ = this.store.select(selectProcesses).pipe(\n             takeUntil(this.unsubscribe$),\n+            tap((allProcesses: Process[]) => this.processesDefinition = allProcesses),\n             map((allProcesses: Process[]) => {\n-                return allProcesses.map((proc: Process) => {\n-                    const _i18nPrefix = proc.id + '.' + proc.version + '.';\n-                    const label = proc.name ? (_i18nPrefix + proc.name) : proc.id;\n-                    return {\n-                        value: proc.id,\n-                        label: label\n-                    };\n+                const processesToShow: any[] = new Array();\n+                const processesInPerimeter: Set<string> = new Set();\n+                this.currentUserWithPerimeters.computedPerimeters.forEach(perimeter => {\n+                    if (this.userCanSendCard(perimeter)) processesInPerimeter.add(perimeter.process);\n+                });\n+                allProcesses.forEach(process => {\n+                    if (processesInPerimeter.has(process.id)) {\n+                        const _i18nPrefix = process.id + '.' + process.version + '.';\n+                        const label = process.name ? (_i18nPrefix + process.name) : process.id;\n+                        const processToShow = { value: process.id, label: label };\n+                        processesToShow.push(processToShow);\n+                        this.loadStatesForProcess(process);\n+                    }\n                 });\n+                return processesToShow;\n             })\n         );\n+    }\n \n-        this.stateOptions$ = this.messageForm.get('process').valueChanges.pipe(\n-            withLatestFrom(this.store.select(selectProcesses)),\n-            map(([selectedProcessId, allProcesses]: [string, Process[]]) => {\n-                // TODO What if selectedProcessId is null ? == vs ===\n-                const selectedProcess = allProcesses.find(process => process.id === selectedProcessId);\n-                if (selectedProcess) {\n-                    return Object.entries(selectedProcess.states).map(([id, state]: [string, State]) => {\n-                        const label = state.name ? (new I18n(this.getI18nPrefixFromProcess(selectedProcess)\n-                            + state.name)) : id;\n-                        return {\n-                            value: id,\n-                            label: label\n-                        };\n-                    });\n-                } else {\n-                    return [];\n-                }\n-            })\n-        );\n \n-        this.entityOptions$ = this.store.select(selectAllEntities).pipe(\n-            takeUntil(this.unsubscribe$),\n-            map((allEntities: Entity[]) => allEntities.map((entity: Entity) => {\n-                return { value: entity.id, label: entity.name };\n-            })\n-            )\n-        );\n+    private userCanSendCard(perimeter: ComputedPerimeter): boolean {\n+        return ((perimeter.rights === RightsEnum.ReceiveAndWrite)\n+            || (perimeter.rights === RightsEnum.Write));\n+    }\n \n-        this.store.select(selectProcesses)\n-            .pipe(takeUntil(this.unsubscribe$)).\n-            subscribe((allProcesses: Process[]) => {\n-                this.fetchedProcesses = allProcesses;\n+    loadStatesForProcess(process: Process): void {\n+        const statesList = [];\n+        this.currentUserWithPerimeters.computedPerimeters.forEach(\n+            perimeter => {\n+                if ((perimeter.process === process.id) && this.userCanSendCard(perimeter)) {\n+                    const state = process.states[perimeter.state];\n+                    const label = state.name ? (new I18n(this.getI18nPrefixFromProcess(process)\n+                        + state.name)) : perimeter.state;\n+                    const stateEntry = { value: perimeter.state, label: label };\n+                    statesList.push(stateEntry);\n+\n+                }\n             });\n+        this.statesPerProcesses.set(process.id, statesList);\n+    }\n+\n+\n+    changeSeverityToDefaultValue(): void {\n+        this.messageForm.get('severity').valueChanges.subscribe((severity) => {\n+            if (!severity) this.messageForm.get('severity').setValue(this.severityOptions[0].value);\n+        });\n+        this.messageForm.get('severity').setValue(this.severityOptions[0].value);\n+\n+    }\n \n-        const userWithPerimeters = this.userService.getCurrentUserWithPerimeters();\n-        if (userWithPerimeters) {\n-            this.currentUser = userWithPerimeters.userData;\n+\n+    changeStatesWhenSelectProcess(): void {\n+        this.messageForm.get('process').valueChanges.subscribe((process) => {\n+            if (!!process) {\n+                this.stateOptions = this.statesPerProcesses.get(process);\n+                this.selectedState = this.stateOptions[0].value;\n+                this.selectedProcess = this.processesDefinition.find(processDefinition => {\n+                    return processDefinition.id === process;\n+                });\n+                this.messageForm.get('state').setValue(this.selectedState);\n+                this.loadTemplate();\n+            }\n+        });\n+    }\n+\n+    loadTemplateWhenStateChange(): void {\n+        this.messageForm.get('state').valueChanges.subscribe((state) => {\n+            if (!!state) {\n+                this.selectedState = state;\n+                this.loadTemplate();\n+            }\n+        });\n+    }\n+\n+    loadTemplate() {\n+        this.errorMessage.display = false;\n+        const templateName = this.selectedProcess.states[this.selectedState].userCardTemplate;\n+        if (!!templateName) {\n+            this.newCardTemplateService.getTemplate(this.selectedProcess.id, this.selectedProcess.version, templateName)\n+                .subscribe((template) => {\n+                    this.userCardTemplate = this.sanitizer.bypassSecurityTrustHtml(template);\n+                    setTimeout(() => { // wait for DOM rendering\n+                        this.reinsertScripts();\n+                    }, 10);\n+                }\n+                );\n+        } else this.userCardTemplate = this.sanitizer.bypassSecurityTrustHtml('');\n+\n+    }\n+\n+    reinsertScripts(): void {\n+        const scripts = <HTMLScriptElement[]>this.element.nativeElement.getElementsByTagName('script');\n+        const scriptsInitialLength = scripts.length;\n+        for (let i = 0; i < scriptsInitialLength; i++) {\n+            const script = scripts[i];\n+            const scriptCopy = document.createElement('script');\n+            scriptCopy.type = script.type ? script.type : 'text/javascript';\n+            if (script.innerHTML) {\n+                scriptCopy.innerHTML = script.innerHTML;\n+            }\n+            scriptCopy.async = false;\n+            script.parentNode.replaceChild(scriptCopy, script);\n         }\n     }\n \n+\n+\n     onSubmitForm(template: TemplateRef<any>) {\n         const formValue = this.messageForm.value;\n-\n         const processFormVal = formValue['process'];\n-        const selectedProcess = this.fetchedProcesses.find(process => {\n+        const selectedProcess = this.processesDefinition.find(process => {\n             return process.id === processFormVal;\n         });\n         const processVersion = selectedProcess.version;\n-        const formValueElement = formValue['state'];\n-        const selectedState = selectedProcess.states[formValueElement];\n-        const titleKey = (new I18n((selectedState.name) ? selectedProcess.name : formValueElement));\n-        const now = new Date().getTime();\n+        const state = formValue['state'];\n+\n+        if (!templateGateway.getSpecificCardInformation) {\n+            console.log('No getSpecificCardInformationMethod() in template can not send card');\n+            this.errorMessage.display = true;\n+            this.errorMessage.text = 'userCard.error.templateError';\n+            return;\n+        }\n+\n+        const specificInformation = templateGateway.getSpecificCardInformation();\n+        if (!specificInformation) {\n+            console.log('getSpecificCardInformationMethod() in template return no information');\n+            this.errorMessage.display = true;\n+            this.errorMessage.text = 'userCard.error.templateError';\n+            return;\n+        }\n+\n+        if (!specificInformation.valid) {\n+            this.errorMessage.display = true;\n+            this.errorMessage.text = specificInformation.errorMsg;\n+            return;\n+        }\n+\n+        const entities = new Array();\n+        if (formValue['entities'].length < 1) {\n+            this.errorMessage.display = true;\n+            this.errorMessage.text = 'userCard.error.noRecipientSelected';\n+            return;\n+        } else {\n+            formValue['entities'].forEach(entity => entities.push(entity.id));\n+        }\n+\n+        let startDate = this.messageForm.get('startDate').value;\n+        if ((!startDate) || startDate.value === '') startDate = this.defaultStartDate;\n+\n+        let endDate = this.messageForm.get('endDate').value;\n+        if ((!endDate) || endDate.value === '') endDate = this.defaultEndDate;\n+\n+        const title = (specificInformation.card.title) ? specificInformation.card.title : 'UNDEFINED';\n+        const summary = (specificInformation.card.summary) ? specificInformation.card.summary : 'UNDEFINED';", "originalCommit": "a4df0b71a69bf3f634bff43049369717ddf6b6ff", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjYyMzAyNw==", "url": "https://github.com/opfab/operatorfabric-core/pull/493#discussion_r496623027", "bodyText": "done", "author": "freddidierRTE", "createdAt": "2020-09-29T10:52:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjU1Njc0NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjU1OTcwNw==", "url": "https://github.com/opfab/operatorfabric-core/pull/493#discussion_r496559707", "bodyText": "To fit consistency, maybe this could be if(!!val).", "author": "rlg-pro", "createdAt": "2020-09-29T09:07:38Z", "path": "ui/main/src/app/components/share/datetime-filter/datetime-filter.component.ts", "diffHunk": "@@ -75,16 +76,17 @@ export class DatetimeFilterComponent implements ControlValueAccessor, OnInit, On\n     public onTouched: () => void = () => {\n     }\n \n-    // Method call when archive-filter.component.ts set value to 0\n+    // Method call when archive-filter.component.ts set value to null\n     writeValue(val: any): void {\n         if (!this.offset) {\n             this.disabled = true;\n         }\n-        this.resetDateAndTime();\n-\n         if (val) {", "originalCommit": "a4df0b71a69bf3f634bff43049369717ddf6b6ff", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjYyMzQ2Nw==", "url": "https://github.com/opfab/operatorfabric-core/pull/493#discussion_r496623467", "bodyText": "done", "author": "freddidierRTE", "createdAt": "2020-09-29T10:53:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjU1OTcwNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjU2NTQxMA==", "url": "https://github.com/opfab/operatorfabric-core/pull/493#discussion_r496565410", "bodyText": "(!!state.name) ?", "author": "rlg-pro", "createdAt": "2020-09-29T09:16:21Z", "path": "ui/main/src/app/modules/usercard/usercard.component.ts", "diffHunk": "@@ -81,123 +109,222 @@ export class UserCardComponent implements OnDestroy {\n             startDate: new FormControl(''),\n             endDate: new FormControl(''),\n             comment: new FormControl(''),\n-            entities: new FormControl('')\n-        }\n-        );\n+            entities: new FormControl([])\n+        });\n+\n+        this.changeSeverityToDefaultValue();\n+        this.changeStatesWhenSelectProcess();\n+        this.loadTemplateWhenStateChange();\n+\n+        this.dropdownSettings = {\n+            text: 'Select a recip\u00eeent',\n+            selectAllText: 'Select All',\n+            unSelectAllText: 'UnSelect All',\n+            enableSearchFilter: true,\n+            classes: 'custom-class-example'\n+        };\n+\n+    }\n+\n+    loadAllEntities(): void {\n+        this.entitiesService.getEntities().forEach(entity =>\n+            this.entityOptions.push({ id: entity.id, itemName: entity.name }));\n+    }\n \n+\n+    loadAllProcessAndStateInUserPerimeter(): void {\n         this.processOptions$ = this.store.select(selectProcesses).pipe(\n             takeUntil(this.unsubscribe$),\n+            tap((allProcesses: Process[]) => this.processesDefinition = allProcesses),\n             map((allProcesses: Process[]) => {\n-                return allProcesses.map((proc: Process) => {\n-                    const _i18nPrefix = proc.id + '.' + proc.version + '.';\n-                    const label = proc.name ? (_i18nPrefix + proc.name) : proc.id;\n-                    return {\n-                        value: proc.id,\n-                        label: label\n-                    };\n+                const processesToShow: any[] = new Array();\n+                const processesInPerimeter: Set<string> = new Set();\n+                this.currentUserWithPerimeters.computedPerimeters.forEach(perimeter => {\n+                    if (this.userCanSendCard(perimeter)) processesInPerimeter.add(perimeter.process);\n+                });\n+                allProcesses.forEach(process => {\n+                    if (processesInPerimeter.has(process.id)) {\n+                        const _i18nPrefix = process.id + '.' + process.version + '.';\n+                        const label = process.name ? (_i18nPrefix + process.name) : process.id;\n+                        const processToShow = { value: process.id, label: label };\n+                        processesToShow.push(processToShow);\n+                        this.loadStatesForProcess(process);\n+                    }\n                 });\n+                return processesToShow;\n             })\n         );\n+    }\n \n-        this.stateOptions$ = this.messageForm.get('process').valueChanges.pipe(\n-            withLatestFrom(this.store.select(selectProcesses)),\n-            map(([selectedProcessId, allProcesses]: [string, Process[]]) => {\n-                // TODO What if selectedProcessId is null ? == vs ===\n-                const selectedProcess = allProcesses.find(process => process.id === selectedProcessId);\n-                if (selectedProcess) {\n-                    return Object.entries(selectedProcess.states).map(([id, state]: [string, State]) => {\n-                        const label = state.name ? (new I18n(this.getI18nPrefixFromProcess(selectedProcess)\n-                            + state.name)) : id;\n-                        return {\n-                            value: id,\n-                            label: label\n-                        };\n-                    });\n-                } else {\n-                    return [];\n-                }\n-            })\n-        );\n \n-        this.entityOptions$ = this.store.select(selectAllEntities).pipe(\n-            takeUntil(this.unsubscribe$),\n-            map((allEntities: Entity[]) => allEntities.map((entity: Entity) => {\n-                return { value: entity.id, label: entity.name };\n-            })\n-            )\n-        );\n+    private userCanSendCard(perimeter: ComputedPerimeter): boolean {\n+        return ((perimeter.rights === RightsEnum.ReceiveAndWrite)\n+            || (perimeter.rights === RightsEnum.Write));\n+    }\n \n-        this.store.select(selectProcesses)\n-            .pipe(takeUntil(this.unsubscribe$)).\n-            subscribe((allProcesses: Process[]) => {\n-                this.fetchedProcesses = allProcesses;\n+    loadStatesForProcess(process: Process): void {\n+        const statesList = [];\n+        this.currentUserWithPerimeters.computedPerimeters.forEach(\n+            perimeter => {\n+                if ((perimeter.process === process.id) && this.userCanSendCard(perimeter)) {\n+                    const state = process.states[perimeter.state];\n+                    const label = state.name ? (new I18n(this.getI18nPrefixFromProcess(process)", "originalCommit": "a4df0b71a69bf3f634bff43049369717ddf6b6ff", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjYyMzk0Mg==", "url": "https://github.com/opfab/operatorfabric-core/pull/493#discussion_r496623942", "bodyText": "Done", "author": "freddidierRTE", "createdAt": "2020-09-29T10:54:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjU2NTQxMA=="}], "type": "inlineReview"}, {"oid": "99d6cc652ac5ab9a0aa3701ea9e6f1f240d85bc2", "url": "https://github.com/opfab/operatorfabric-core/commit/99d6cc652ac5ab9a0aa3701ea9e6f1f240d85bc2", "message": "[OC-1100] New version of new card feature\nTemplate mechanism for specific form field\nCard detail in preview\nExamples in DefaultBundle\nCreate a new process definition (bundle) for examples\nError management", "committedDate": "2020-09-29T11:30:38Z", "type": "commit"}, {"oid": "99d6cc652ac5ab9a0aa3701ea9e6f1f240d85bc2", "url": "https://github.com/opfab/operatorfabric-core/commit/99d6cc652ac5ab9a0aa3701ea9e6f1f240d85bc2", "message": "[OC-1100] New version of new card feature\nTemplate mechanism for specific form field\nCard detail in preview\nExamples in DefaultBundle\nCreate a new process definition (bundle) for examples\nError management", "committedDate": "2020-09-29T11:30:38Z", "type": "forcePushed"}]}