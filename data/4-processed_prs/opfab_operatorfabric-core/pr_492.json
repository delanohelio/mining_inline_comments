{"pr_number": 492, "pr_title": "[ OC-1044 ]  Add export function", "pr_createdAt": "2020-09-27T01:20:16Z", "pr_url": "https://github.com/opfab/operatorfabric-core/pull/492", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTgxNTE0OA==", "url": "https://github.com/opfab/operatorfabric-core/pull/492#discussion_r495815148", "bodyText": "Set rxjs version to 6.6.3 as previously set", "author": "freddidierRTE", "createdAt": "2020-09-28T09:43:05Z", "path": "ui/main/package.json", "diffHunk": "@@ -58,9 +59,11 @@\n     \"ngrx-router\": \"^2.0.1\",\n     \"ngx-countdown\": \"^10.0.0\",\n     \"ngx-type-ahead\": \"^2.0.1\",\n-    \"rxjs\": \"^6.6.3\",\n+    \"rxjs\": \"^6.5.5\",", "originalCommit": "67241660fdef258e3ab5d914e30e4d2dc072d283", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjY0MTM4Ng==", "url": "https://github.com/opfab/operatorfabric-core/pull/492#discussion_r496641386", "bodyText": "ok", "author": "taoufikbermaki", "createdAt": "2020-09-29T11:26:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTgxNTE0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjY0MzcwMw==", "url": "https://github.com/opfab/operatorfabric-core/pull/492#discussion_r496643703", "bodyText": "ok", "author": "taoufikbermaki", "createdAt": "2020-09-29T11:31:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTgxNTE0OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTgxNjkyMQ==", "url": "https://github.com/opfab/operatorfabric-core/pull/492#discussion_r495816921", "bodyText": "I think you do not need the lib \"save\" ?", "author": "freddidierRTE", "createdAt": "2020-09-28T09:45:59Z", "path": "ui/main/package.json", "diffHunk": "@@ -58,9 +59,11 @@\n     \"ngrx-router\": \"^2.0.1\",\n     \"ngx-countdown\": \"^10.0.0\",\n     \"ngx-type-ahead\": \"^2.0.1\",\n-    \"rxjs\": \"^6.6.3\",\n+    \"rxjs\": \"^6.5.5\",\n+    \"save\": \"^2.4.0\",", "originalCommit": "67241660fdef258e3ab5d914e30e4d2dc072d283", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTgxOTUwMA==", "url": "https://github.com/opfab/operatorfabric-core/pull/492#discussion_r495819500", "bodyText": "remove these comments", "author": "freddidierRTE", "createdAt": "2020-09-28T09:50:12Z", "path": "ui/main/src/app/modules/monitoring/monitoring.component.html", "diffHunk": "@@ -14,6 +14,13 @@\n     </div>\n </div>\n \n+<!-- \n+<div class=\"col-md-0  padding-5\">\n+    <button type=\"button\" [appExport]=\"monitoringResultsData\" fileName=\"monitoringResults\" class=\"btn btn-success\">\n+      <em class=\"glyphicon glyphicon-export\" translate>monitoring.ExportTOExcel</em>\n+    </button>\n+  </div> -->\n+", "originalCommit": "67241660fdef258e3ab5d914e30e4d2dc072d283", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTgyMTQ1OQ==", "url": "https://github.com/opfab/operatorfabric-core/pull/492#discussion_r495821459", "bodyText": "Add copyright header", "author": "freddidierRTE", "createdAt": "2020-09-28T09:53:38Z", "path": "ui/main/src/app/services/export.service.ts", "diffHunk": "@@ -0,0 +1,33 @@\n+", "originalCommit": "67241660fdef258e3ab5d914e30e4d2dc072d283", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTgyMjU5OA==", "url": "https://github.com/opfab/operatorfabric-core/pull/492#discussion_r495822598", "bodyText": "I see no use of this method in the code ?", "author": "freddidierRTE", "createdAt": "2020-09-28T09:55:29Z", "path": "ui/main/src/app/services/export.service.ts", "diffHunk": "@@ -0,0 +1,33 @@\n+\n+import { Injectable } from '@angular/core';\n+import * as XLSX from 'xlsx';\n+import FileSaver from 'file-saver';\n+\n+const EXCEL_TYPE = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8';\n+const EXCEL_EXTENSION = '.xlsx';\n+\n+@Injectable()\n+export class ExportService {\n+\n+  constructor() {\n+  }\n+\n+  static toExportFileName(excelFileName: string): string {\n+    return `${excelFileName}_export_${new Date().getTime()}.xlsx`;\n+  }", "originalCommit": "67241660fdef258e3ab5d914e30e4d2dc072d283", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTgyNDY5NA==", "url": "https://github.com/opfab/operatorfabric-core/pull/492#discussion_r495824694", "bodyText": "Add copyright header", "author": "freddidierRTE", "createdAt": "2020-09-28T09:59:01Z", "path": "ui/main/src/app/services/export.service.spec.ts", "diffHunk": "@@ -0,0 +1,24 @@\n+import { TestBed } from '@angular/core/testing';", "originalCommit": "67241660fdef258e3ab5d914e30e4d2dc072d283", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTgyNjI0OA==", "url": "https://github.com/opfab/operatorfabric-core/pull/492#discussion_r495826248", "bodyText": "Active test or remove ?", "author": "freddidierRTE", "createdAt": "2020-09-28T10:01:50Z", "path": "ui/main/src/app/modules/monitoring/components/monitoring-table/monitoring-table.component.spec.ts", "diffHunk": "@@ -44,7 +46,7 @@ describe('MonitoringTableComponent', () => {\n     fixture.detectChanges();\n   });\n \n-  it('should create', () => {\n+  xit('should create', () => {", "originalCommit": "67241660fdef258e3ab5d914e30e4d2dc072d283", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTgyNzYxNQ==", "url": "https://github.com/opfab/operatorfabric-core/pull/492#discussion_r495827615", "bodyText": "Why loading this module , i do not see the use of it", "author": "freddidierRTE", "createdAt": "2020-09-28T10:04:31Z", "path": "ui/main/src/app/modules/logging/logging.module.ts", "diffHunk": "@@ -31,13 +33,15 @@ import {LoggingPageComponent} from './components/logging-table/logging-page/logg\n         NgbModule\n         , DatetimeFilterModule\n         , MultiFilterModule\n+        , MatTableModule", "originalCommit": "67241660fdef258e3ab5d914e30e4d2dc072d283", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTg1MjQxNA==", "url": "https://github.com/opfab/operatorfabric-core/pull/492#discussion_r495852414", "bodyText": "remove this debug log", "author": "freddidierRTE", "createdAt": "2020-09-28T10:52:30Z", "path": "ui/main/src/app/modules/directives/export.directive.ts", "diffHunk": "@@ -0,0 +1,19 @@\n+import { Directive, HostListener, Input } from '@angular/core';\n+import { ExportService } from '@ofServices/export.service';\n+\n+@Directive({\n+  selector: '[appExport]'\n+})\n+export class ExportDirective {\n+\n+  constructor(private exportService: ExportService) { }\n+\n+  @Input('appExport') customers: any[];\n+  @Input() fileName: string;\n+\n+  @HostListener('click', ['$event']) onClick($event) {\n+    console.log('clicked: ' + $event);", "originalCommit": "67241660fdef258e3ab5d914e30e4d2dc072d283", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTg1MzQ3MQ==", "url": "https://github.com/opfab/operatorfabric-core/pull/492#discussion_r495853471", "bodyText": "As there is only one method call , i do not think we need to make a directive.\nJust calling the exportService in the component shoud make the job", "author": "freddidierRTE", "createdAt": "2020-09-28T10:54:43Z", "path": "ui/main/src/app/modules/directives/export.directive.ts", "diffHunk": "@@ -0,0 +1,19 @@\n+import { Directive, HostListener, Input } from '@angular/core';\n+import { ExportService } from '@ofServices/export.service';\n+\n+@Directive({\n+  selector: '[appExport]'\n+})\n+export class ExportDirective {\n+\n+  constructor(private exportService: ExportService) { }\n+\n+  @Input('appExport') customers: any[];\n+  @Input() fileName: string;\n+\n+  @HostListener('click', ['$event']) onClick($event) {\n+    console.log('clicked: ' + $event);\n+    this.exportService.exportAsExcelFile(this.customers, this.fileName);", "originalCommit": "67241660fdef258e3ab5d914e30e4d2dc072d283", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTg5MDYyNg==", "url": "https://github.com/opfab/operatorfabric-core/pull/492#discussion_r495890626", "bodyText": "Array.prototype.forEach.call(lines, ... \nreplace with :\nlines.forEach( (line: LineOfLoggingResult) => ...", "author": "freddidierRTE", "createdAt": "2020-09-28T12:11:06Z", "path": "ui/main/src/app/modules/logging/components/logging-table/logging-table.component.ts", "diffHunk": "@@ -7,30 +7,89 @@\n  * This file is part of the OperatorFabric project.\n  */\n \n-import {Component, Input, OnInit} from '@angular/core';\n-import {LineOfLoggingResult} from '@ofModel/line-of-logging-result.model';\n-import {TimeService} from '@ofServices/time.service';\n-import {Moment} from 'moment-timezone';\n+import { Component, Input, OnInit, OnDestroy} from '@angular/core';\n+import { LineOfLoggingResult } from '@ofModel/line-of-logging-result.model';\n+import { TimeService } from '@ofServices/time.service';\n+import { Moment } from 'moment-timezone';\n+import { CardService } from '../../../../services/card.service';\n+import { selectLoggingCount } from '@ofSelectors/logging.selectors';\n+import { Store, select } from '@ngrx/store';\n+import { Page } from '@ofModel/page.model';\n+import { map } from 'rxjs/operators';\n+import { AppState } from '@ofStore/index';\n+import { takeUntil } from 'rxjs/operators';\n+import { Subject } from 'rxjs';\n+import { TranslateService } from '@ngx-translate/core';\n \n @Component({\n     selector: 'of-logging-table',\n     templateUrl: './logging-table.component.html',\n     styleUrls: ['./logging-table.component.scss']\n })\n-export class LoggingTableComponent implements OnInit {\n+export class LoggingTableComponent implements OnInit, OnDestroy {\n \n \n     @Input() results: LineOfLoggingResult[];\n     displayedResult: string;\n+    exportLoggingData: Array<any> = [];\n+    unsubscribe$: Subject<void> = new Subject<void>();\n \n-    constructor(public timeService: TimeService) {\n+\n+    constructor(public timeService: TimeService, private cardService: CardService,\n+        private store: Store<AppState>, private translate: TranslateService) {\n     }\n \n     ngOnInit() {\n         this.displayedResult = JSON.stringify(this.results);\n+        this.initExportLoggingData();\n+\n     }\n \n     displayTime(moment: Moment) {\n         return this.timeService.formatDateTime(moment);\n     }\n+\n+    initExportLoggingData(): void {\n+        let totalElements;\n+        this.store.pipe(select(selectLoggingCount)).subscribe((result) => {\n+            totalElements = result;\n+        });\n+\n+        const filters = new Map<string, string[]>();\n+        filters.set('size', [totalElements]);\n+\n+        this.cardService.fetchLoggingResults(filters).pipe(takeUntil(this.unsubscribe$))\n+            .subscribe((page: Page<LineOfLoggingResult>) => {\n+                const lines = page.content;\n+\n+                Array.prototype.forEach.call(lines, (line: LineOfLoggingResult) => {", "originalCommit": "67241660fdef258e3ab5d914e30e4d2dc072d283", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjQ2MDgyNg==", "url": "https://github.com/opfab/operatorfabric-core/pull/492#discussion_r496460826", "bodyText": "See https://stackoverflow.com/questions/43743560/foreach-vs-array-prototype-foreach-call", "author": "freddidierRTE", "createdAt": "2020-09-29T07:00:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTg5MDYyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjY0MjMzNw==", "url": "https://github.com/opfab/operatorfabric-core/pull/492#discussion_r496642337", "bodyText": "OK", "author": "taoufikbermaki", "createdAt": "2020-09-29T11:28:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTg5MDYyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjY0MzYxNA==", "url": "https://github.com/opfab/operatorfabric-core/pull/492#discussion_r496643614", "bodyText": "ok", "author": "taoufikbermaki", "createdAt": "2020-09-29T11:31:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTg5MDYyNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTg5MTA0MQ==", "url": "https://github.com/opfab/operatorfabric-core/pull/492#discussion_r495891041", "bodyText": "Array.prototype.forEach.call(this.result, ...\nreplace with :\nthis.result.forEach( (line: LineOfMonitoringResult) => ...", "author": "freddidierRTE", "createdAt": "2020-09-28T12:11:51Z", "path": "ui/main/src/app/modules/monitoring/components/monitoring-table/monitoring-table.component.ts", "diffHunk": "@@ -1,25 +1,80 @@\n-import {Component, Input} from '@angular/core';\n-import {LineOfMonitoringResult} from '@ofModel/line-of-monitoring-result.model';\n-import {TimeService} from '@ofServices/time.service';\n-import {Moment} from 'moment-timezone';\n+import { Component, Input, OnInit, OnDestroy } from '@angular/core';\n+import { LineOfMonitoringResult } from '@ofModel/line-of-monitoring-result.model';\n+import { TimeService } from '@ofServices/time.service';\n+import { Moment } from 'moment-timezone';\n+import { TranslateService } from '@ngx-translate/core';\n+import { takeUntil } from 'rxjs/operators';\n+import { Subject } from 'rxjs';\n \n @Component({\n     selector: 'of-monitoring-table',\n     templateUrl: './monitoring-table.component.html',\n     styleUrls: ['./monitoring-table.component.scss']\n })\n-export class MonitoringTableComponent {\n+export class MonitoringTableComponent implements OnInit, OnDestroy {\n \n     @Input() result: LineOfMonitoringResult[];\n+    exportMonitoringData: Array<any> = [];\n+    unsubscribe$: Subject<void> = new Subject<void>();\n \n-    constructor(readonly timeService: TimeService) {\n+\n+    constructor(readonly timeService: TimeService, private translate: TranslateService) {\n     }\n \n+\n     displayTime(moment: Moment) {\n \n         if (!!moment) {\n             return this.timeService.formatDateTime(moment);\n         }\n         return '';\n     }\n+    ngOnInit() {\n+        this.initExportMonitoringData();\n+\n+    }\n+\n+    initExportMonitoringData(): void {\n+\n+        let time: string, businessPeriod: string, processName: any, title: any, summary: any, status: any;\n+\n+        Array.prototype.forEach.call(this.result, (line: LineOfMonitoringResult) => {", "originalCommit": "67241660fdef258e3ab5d914e30e4d2dc072d283", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjY0MjYyNg==", "url": "https://github.com/opfab/operatorfabric-core/pull/492#discussion_r496642626", "bodyText": "ok", "author": "taoufikbermaki", "createdAt": "2020-09-29T11:29:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTg5MTA0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjY0MzU1NQ==", "url": "https://github.com/opfab/operatorfabric-core/pull/492#discussion_r496643555", "bodyText": "ok", "author": "taoufikbermaki", "createdAt": "2020-09-29T11:31:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTg5MTA0MQ=="}], "type": "inlineReview"}, {"oid": "0ba108ca84b5bb1a1b6246b4795c8a0bfddfc003", "url": "https://github.com/opfab/operatorfabric-core/commit/0ba108ca84b5bb1a1b6246b4795c8a0bfddfc003", "message": "[ OC-1044 ]  Add export function", "committedDate": "2020-09-29T01:17:54Z", "type": "forcePushed"}, {"oid": "a3c11739f7ed5a922eebe3507444ae372ddd4047", "url": "https://github.com/opfab/operatorfabric-core/commit/a3c11739f7ed5a922eebe3507444ae372ddd4047", "message": "[ OC-1044 ]  Add export function", "committedDate": "2020-09-29T14:43:42Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODMwNjA2NQ==", "url": "https://github.com/opfab/operatorfabric-core/pull/492#discussion_r498306065", "bodyText": "Do not call ExportMonitoringData for each change  , call it just when user want to export (in the export method)", "author": "freddidierRTE", "createdAt": "2020-10-01T14:51:28Z", "path": "ui/main/src/app/modules/logging/components/logging-table/logging-table.component.ts", "diffHunk": "@@ -7,30 +8,99 @@\n  * This file is part of the OperatorFabric project.\n  */\n \n-import {Component, Input, OnInit} from '@angular/core';\n-import {LineOfLoggingResult} from '@ofModel/line-of-logging-result.model';\n-import {TimeService} from '@ofServices/time.service';\n-import {Moment} from 'moment-timezone';\n+import { Component, Input, OnInit, OnDestroy, OnChanges } from '@angular/core';\n+import { LineOfLoggingResult } from '@ofModel/line-of-logging-result.model';\n+import { TimeService } from '@ofServices/time.service';\n+import { Moment } from 'moment-timezone';\n+import { CardService } from '../../../../services/card.service';\n+import { selectLoggingCount } from '@ofSelectors/logging.selectors';\n+import { Store, select } from '@ngrx/store';\n+import { Page } from '@ofModel/page.model';\n+import { AppState } from '@ofStore/index';\n+import { takeUntil } from 'rxjs/operators';\n+import { Subject } from 'rxjs';\n+import { TranslateService } from '@ngx-translate/core';\n+import { ExportService } from '@ofServices/export.service';\n+\n \n @Component({\n     selector: 'of-logging-table',\n     templateUrl: './logging-table.component.html',\n     styleUrls: ['./logging-table.component.scss']\n })\n-export class LoggingTableComponent implements OnInit {\n+export class LoggingTableComponent implements OnInit, OnDestroy, OnChanges {\n \n \n     @Input() results: LineOfLoggingResult[];\n     displayedResult: string;\n+    exportLoggingData: Array<any> ;\n+    unsubscribe$: Subject<void> = new Subject<void>();\n+\n+\n+    constructor(public timeService: TimeService, private cardService: CardService,\n+        private store: Store<AppState>, private translate: TranslateService, private exportService: ExportService) {\n+    }\n \n-    constructor(public timeService: TimeService) {\n+    ngOnChanges() {", "originalCommit": "a3c11739f7ed5a922eebe3507444ae372ddd4047", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "16fe8fc5a71f54d7dcddd465e8de5e9e4fd27859", "url": "https://github.com/opfab/operatorfabric-core/commit/16fe8fc5a71f54d7dcddd465e8de5e9e4fd27859", "message": "[OC-1044]  Add export function\n\n[OC-1044]  Add export function", "committedDate": "2020-10-02T18:15:07Z", "type": "commit"}, {"oid": "16fe8fc5a71f54d7dcddd465e8de5e9e4fd27859", "url": "https://github.com/opfab/operatorfabric-core/commit/16fe8fc5a71f54d7dcddd465e8de5e9e4fd27859", "message": "[OC-1044]  Add export function\n\n[OC-1044]  Add export function", "committedDate": "2020-10-02T18:15:07Z", "type": "forcePushed"}]}