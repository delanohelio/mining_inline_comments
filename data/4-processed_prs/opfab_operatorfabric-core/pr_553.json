{"pr_number": 553, "pr_title": "[OC-1209] Add an end point to set a card unread for the current user", "pr_createdAt": "2020-10-28T10:27:41Z", "pr_url": "https://github.com/opfab/operatorfabric-core/pull/553", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjA0Njg1NA==", "url": "https://github.com/opfab/operatorfabric-core/pull/553#discussion_r516046854", "bodyText": "Add a get card with user operator2 and check hasBeenRead is still set to true (in order  to test that it does not delete all reads  )", "author": "freddidierRTE", "createdAt": "2020-11-02T15:23:01Z", "path": "src/test/api/karate/cards/cardsUserRead.feature", "diffHunk": "@@ -1,94 +1,117 @@\n-Feature: CardsUserRead\r\n-\r\n-\r\n-  Background:\r\n-\r\n-    * def signIn = callonce read('../common/getToken.feature') { username: 'operator1'}\r\n-    * def authToken = signIn.authToken\r\n-    * def signIn2 = callonce read('../common/./getToken.feature') { username: 'operator2'}\r\n-    * def authToken2 = signIn2.authToken\r\n-\r\n-    Scenario: CardsUserRead\r\n-\r\n-    * def card =\r\n-\"\"\"\r\n-{\r\n-\t\"publisher\" : \"api_test\",\r\n-\t\"processVersion\" : \"1\",\r\n-\t\"process\"  :\"api_test\",\r\n-\t\"processInstanceId\" : \"process1\",\r\n-\t\"state\": \"messageState\",\r\n-\t\"groupRecipients\": [\"ReadOnly\"],\r\n-\t\"severity\" : \"INFORMATION\",\r\n-\t\"startDate\" : 1553186770681,\r\n-\t\"summary\" : {\"key\" : \"defaultProcess.summary\"},\r\n-\t\"title\" : {\"key\" : \"defaultProcess.title\"},\r\n-\t\"data\" : {\"message\":\"a message\"}\r\n-}\r\n-\"\"\"\r\n-\r\n-    \r\n-\r\n-# Push card\r\n-    Given url opfabPublishCardUrl + 'cards'\r\n-    #And header Authorization = 'Bearer ' + authToken\r\n-    And request card\r\n-    When method post\r\n-    Then status 201\r\n-    And match response.count == 1\r\n-    \r\n-#get card with user operator1 and check it hasn't been read yet\r\n-    Given url opfabUrl + 'cards/cards/api_test.process1'\r\n-    And header Authorization = 'Bearer ' + authToken\r\n-    When method get\r\n-    Then status 200\r\n-    And match response.card.hasBeenRead == false\r\n-    And def uid = response.card.uid\r\n-\r\n-\r\n-#Signal that card has been read card by operator1\r\n-    Given url opfabUrl + 'cardspub/cards/userCardRead/' + uid\r\n-    And header Authorization = 'Bearer ' + authToken\r\n-    And request ''\r\n-    When method post\r\n-    Then status 201\r\n-\r\n-#get card with user operator1 and check hasBeenRead is set to true\r\n-    Given url opfabUrl + 'cards/cards/api_test.process1'\r\n-    And header Authorization = 'Bearer ' + authToken\r\n-    When method get\r\n-    Then status 200\r\n-    And match response.card.hasBeenRead == true\r\n-    And match response.card.uid == uid\r\n-\r\n-#get card with user operator2 and check hasBeenRead is set to false\r\n-    Given url opfabUrl + 'cards/cards/api_test.process1'\r\n-    And header Authorization = 'Bearer ' + authToken2\r\n-    When method get\r\n-    Then status 200\r\n-    And match response.card.hasBeenRead == false\r\n-    And match response.card.uid == uid\r\n-\r\n-\r\n-#Signal that card has been read card by operator2\r\n-    Given url opfabUrl + 'cardspub/cards/userCardRead/' + uid\r\n-    And header Authorization = 'Bearer ' + authToken2\r\n-    And request ''\r\n-    When method post\r\n-    Then status 201\r\n-\r\n-#get card with user operator1 and check hasBeenRead is still set to true\r\n-    Given url opfabUrl + 'cards/cards/api_test.process1'\r\n-    And header Authorization = 'Bearer ' + authToken\r\n-    When method get\r\n-    Then status 200\r\n-    And match response.card.hasBeenRead == true\r\n-    And match response.card.uid == uid\r\n-\r\n-    \r\n-  Scenario: Delete the test card\r\n-\r\n-    delete card\r\n-    Given url opfabPublishCardUrl + 'cards/api_test.process1'\r\n-    When method delete\r\n-    Then status 200\r\n+Feature: CardsUserRead\n+\n+\n+  Background:\n+\n+    * def signIn = callonce read('../common/getToken.feature') { username: 'operator1'}\n+    * def authToken = signIn.authToken\n+    * def signIn2 = callonce read('../common/./getToken.feature') { username: 'operator2'}\n+    * def authToken2 = signIn2.authToken\n+\n+    Scenario: CardsUserRead\n+\n+    * def card =\n+\"\"\"\n+{\n+\t\"publisher\" : \"api_test\",\n+\t\"processVersion\" : \"1\",\n+\t\"process\"  :\"api_test\",\n+\t\"processInstanceId\" : \"process1\",\n+\t\"state\": \"messageState\",\n+\t\"groupRecipients\": [\"ReadOnly\"],\n+\t\"severity\" : \"INFORMATION\",\n+\t\"startDate\" : 1553186770681,\n+\t\"summary\" : {\"key\" : \"defaultProcess.summary\"},\n+\t\"title\" : {\"key\" : \"defaultProcess.title\"},\n+\t\"data\" : {\"message\":\"a message\"}\n+}\n+\"\"\"\n+\n+    \n+\n+# Push card\n+    Given url opfabPublishCardUrl + 'cards'\n+    #And header Authorization = 'Bearer ' + authToken\n+    And request card\n+    When method post\n+    Then status 201\n+    And match response.count == 1\n+    \n+#get card with user operator1 and check it hasn't been read yet\n+    Given url opfabUrl + 'cards/cards/api_test.process1'\n+    And header Authorization = 'Bearer ' + authToken\n+    When method get\n+    Then status 200\n+    And match response.card.hasBeenRead == false\n+    And def uid = response.card.uid\n+\n+\n+#Signal that card has been read card by operator1\n+    Given url opfabUrl + 'cardspub/cards/userCardRead/' + uid\n+    And header Authorization = 'Bearer ' + authToken\n+    And request ''\n+    When method post\n+    Then status 201\n+\n+#get card with user operator1 and check hasBeenRead is set to true\n+    Given url opfabUrl + 'cards/cards/api_test.process1'\n+    And header Authorization = 'Bearer ' + authToken\n+    When method get\n+    Then status 200\n+    And match response.card.hasBeenRead == true\n+    And match response.card.uid == uid\n+\n+#get card with user operator2 and check hasBeenRead is set to false\n+    Given url opfabUrl + 'cards/cards/api_test.process1'\n+    And header Authorization = 'Bearer ' + authToken2\n+    When method get\n+    Then status 200\n+    And match response.card.hasBeenRead == false\n+    And match response.card.uid == uid\n+\n+\n+#Signal that card has been read card by operator2\n+    Given url opfabUrl + 'cardspub/cards/userCardRead/' + uid\n+    And header Authorization = 'Bearer ' + authToken2\n+    And request ''\n+    When method post\n+    Then status 201\n+\n+#get card with user operator1 and check hasBeenRead is still set to true\n+    Given url opfabUrl + 'cards/cards/api_test.process1'\n+    And header Authorization = 'Bearer ' + authToken\n+    When method get\n+    Then status 200\n+    And match response.card.hasBeenRead == true\n+    And match response.card.uid == uid\n+\n+# Delete user read\n+    Given url opfabUrl + 'cardspub/cards/userCardRead/' + uid\n+    And header Authorization = 'Bearer ' + authToken\n+    When method delete\n+    Then status 200\n+\n+    Given url opfabUrl + 'cards/cards/api_test.process1'\n+    And header Authorization = 'Bearer ' + authToken\n+    When method get\n+    Then status 200\n+    And match response.card.hasBeenRead == false\n+    And match response.card.uid == uid\n+\n+    Given url opfabUrl + 'cardspub/cards/userCardRead/' + uid\n+    And header Authorization = 'Bearer ' + authToken\n+    When method delete\n+    Then status 204\n+\n+\n+    Given url opfabUrl + 'cardspub/cards/userCardRead/unexisting_card____uid'\n+    And header Authorization = 'Bearer ' + authToken\n+    When method delete\n+    Then status 404", "originalCommit": "4c3415d6e99d3cd6e666504deeceaf58b29b55ce", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "08387b93fe86ed43680746a94ba1210af50d7e3c", "url": "https://github.com/opfab/operatorfabric-core/commit/08387b93fe86ed43680746a94ba1210af50d7e3c", "message": "[OC-1209] Add an end point to set a card unread for the current user", "committedDate": "2020-11-02T17:10:15Z", "type": "commit"}, {"oid": "08387b93fe86ed43680746a94ba1210af50d7e3c", "url": "https://github.com/opfab/operatorfabric-core/commit/08387b93fe86ed43680746a94ba1210af50d7e3c", "message": "[OC-1209] Add an end point to set a card unread for the current user", "committedDate": "2020-11-02T17:10:15Z", "type": "forcePushed"}]}