{"pr_number": 6465, "pr_title": "Cleaning up old interval code", "pr_createdAt": "2020-02-21T21:59:15Z", "pr_url": "https://github.com/broadinstitute/gatk/pull/6465", "timeline": [{"oid": "9efd35028c68acd52856894caf085bd344f25626", "url": "https://github.com/broadinstitute/gatk/commit/9efd35028c68acd52856894caf085bd344f25626", "message": "Cleaning up old interval code\n\n* Currently things are in a weird state, picard style interval lists are handled either as tribble files if they are named correctly as .interval_list\n  If they are named .intervals, .picard, or .list they are loaded with a different code path.\n  This unifies it so that picard files are only loaded as .interval_list and .intervals is always considered a Gatk style list\n\n* This removes the work around for broken 0 length intervals that was put in place a long time ago. However, the workaround was effectively removed\n  for all .interval_list files in 4.1.3.0 when we started reading those through the tribble plugin.  Either the broken files no longer are used or they\n  are misnamed as .intervals\n\n* fix tests to deal correctly with .inverval_list vs .intervals", "committedDate": "2020-02-21T21:17:29Z", "type": "commit"}, {"oid": "7f6f0abff6bf507f77973b79431d411b98cd8a4f", "url": "https://github.com/broadinstitute/gatk/commit/7f6f0abff6bf507f77973b79431d411b98cd8a4f", "message": "fix test failures", "committedDate": "2020-02-25T22:31:26Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTg3ODQ2Nw==", "url": "https://github.com/broadinstitute/gatk/pull/6465#discussion_r385878467", "bodyText": "Kind of a nit, but this error message will no longer include \".interval_list\", which is an acceptable extension.", "author": "cmnbroad", "createdAt": "2020-02-28T19:23:56Z", "path": "src/main/java/org/broadinstitute/hellbender/utils/IntervalUtils.java", "diffHunk": "@@ -303,27 +315,23 @@ public static GenomeLocSortedSet loadIntervals(\n         }\n         // If it's a Feature-containing file, convert it to a list of intervals\n         else if ( FeatureManager.isFeatureFile(IOUtils.getPath(arg)) ) {\n-            rawIntervals.addAll(featureFileToIntervals(parser, arg));\n-        }\n-        // If it's an interval file, add its contents to the raw interval list\n-        else if ( isIntervalFile(arg) ) {\n             try {\n-                rawIntervals.addAll(intervalFileToList(parser, arg));\n-            }\n-            catch ( final UserException.MalformedGenomeLoc e ) {\n-                throw e;\n-            }\n-            catch ( final Exception e ) {\n-                throw new UserException.MalformedFile(new File(arg), \"Interval file could not be parsed in any supported format.\", e);\n+                rawIntervals.addAll(featureFileToIntervals(parser, arg));\n+            } catch (final IllegalArgumentException e){\n+                throw new UserException.MalformedFile(IOUtils.getPath(arg), \"Failure while loading intervals from file.\", e);\n             }\n         }\n+        // If it's an interval file, add its contents to the raw interval list\n+        else if ( isGatkIntervalFile(arg) ) {\n+            rawIntervals.addAll(gatkIntervalFileToList(parser, arg));\n+        }\n         // If it's neither a Feature-containing file nor an interval file, but is an existing file, throw an error.\n         // Note that since contigs can contain periods in their names, we can't use the mere presence of an \"extension\"\n         // as evidence that the user intended the String to be interpreted as a file.\n         else if ( new File(arg).exists() ) {\n             throw new UserException.CouldNotReadInputFile(arg, String.format(\"The file %s exists, but does not contain Features \" +\n                     \"(ie., is not in a supported Feature file format such as vcf, bcf, or bed), \" +\n-                    \"and does not have one of the supported interval file extensions (\" + INTERVAL_FILE_EXTENSIONS + \"). \" +\n+                    \"and does not have one of the supported interval file extensions (\" + GATK_INTERVAL_FILE_EXTENSIONS + \"). \" +", "originalCommit": "7f6f0abff6bf507f77973b79431d411b98cd8a4f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTkwMDIzNQ==", "url": "https://github.com/broadinstitute/gatk/pull/6465#discussion_r385900235", "bodyText": "technically interval_list is a feature file now", "author": "lbergelson", "createdAt": "2020-02-28T20:10:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTg3ODQ2Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTg4MDM5Mg==", "url": "https://github.com/broadinstitute/gatk/pull/6465#discussion_r385880392", "bodyText": "This block seems unnecessary ? It might be better to just rely on the next catch block, which will always include the inputPath name.", "author": "cmnbroad", "createdAt": "2020-02-28T19:28:19Z", "path": "src/main/java/org/broadinstitute/hellbender/utils/IntervalUtils.java", "diffHunk": "@@ -356,67 +364,35 @@ else if ( new File(arg).exists() ) {\n     }\n \n     /**\n-     * Read a file of genome locations to process. The file may be in Picard\n-     * or GATK interval format.\n+     * Read a file of genome locations to process, this file must be in GATK interval format.\n      *\n      * @param glParser   GenomeLocParser\n      * @param fileName  interval file\n      * @return List<GenomeLoc> List of Genome Locs that have been parsed from file\n      */\n-    public static List<GenomeLoc> intervalFileToList(final GenomeLocParser glParser, final String fileName) {\n+    private static List<GenomeLoc> gatkIntervalFileToList(final GenomeLocParser glParser, final String fileName) {\n         Utils.nonNull(glParser, \"glParser is null\");\n         Utils.nonNull(fileName, \"file name is null\");\n \n         final Path inputPath = IOUtils.getPath(fileName);\n         final List<GenomeLoc> ret = new ArrayList<>();\n \n-        /**\n-         * First try to read the file as a Picard interval file since that's well structured --\n-         * we'll fail quickly if it's not a valid file.\n-         */\n-        boolean isPicardInterval = false;\n-        try {\n-            // Note: Picard will skip over intervals with contigs not in the sequence dictionary\n-            final IntervalList il = IntervalList.fromPath(inputPath);\n-            isPicardInterval = true;\n-\n-            for (final Interval interval : il.getIntervals()) {\n-                // The current Agilent exome interval list is off-by-one on all end positions. Until this is fixed we\n-                // need to tolerate intervals where the end is one before the start. We should remove this once a\n-                // corrected version of the interval list is released. This is tracked in:\n-                // https://github.com/broadinstitute/gatk/issues/2089\n-                if (interval.getStart() - interval.getEnd() == 1 ) {\n-                    logger.warn(\"Ignoring possibly incorrectly converted length 1 interval : \" + interval);\n-                }\n-                else if ( glParser.isValidGenomeLoc(interval.getContig(), interval.getStart(), interval.getEnd(), true)) {\n-                    ret.add(glParser.createGenomeLoc(interval.getContig(), interval.getStart(), interval.getEnd(), true));\n-                } else {\n-                    throw new UserException(inputPath.toUri() +  \" has an invalid interval : \" + interval) ;\n+        try (final PathLineIterator reader = new PathLineIterator(inputPath)) {\n+            for (final String line : reader) {\n+                final String trimmedLine = line.trim();\n+                if (!trimmedLine.isEmpty()) {\n+                    ret.add(glParser.parseGenomeLoc(trimmedLine));\n                 }\n             }\n-        }\n-        // if that didn't work, try parsing file as a GATK interval file\n-        catch (final Exception e) {\n-            if ( isPicardInterval ) // definitely a picard file, but we failed to parse\n-            {\n-                throw new UserException.CouldNotReadInputFile(inputPath, e);\n-            } else {\n-                try (PathLineIterator reader = new PathLineIterator(inputPath)) {\n-                    for (final String line : reader) {\n-                        final String trimmedLine = line.trim();\n-                        if (!trimmedLine.isEmpty()) {\n-                            ret.add(glParser.parseGenomeLoc(trimmedLine));\n-                        }\n-                    }\n-                }\n+            if (ret.isEmpty()) {\n+                throw new UserException.MalformedFile(inputPath, \"It contains no intervals.\");\n             }\n+            return ret;\n+        } catch (final UserException e){\n+            throw e;", "originalCommit": "7f6f0abff6bf507f77973b79431d411b98cd8a4f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTkwNDkwMg==", "url": "https://github.com/broadinstitute/gatk/pull/6465#discussion_r385904902", "bodyText": "I think I thought it might replace a more specific error with a less specific one.  Since userexceptions don't show the stack trace you'd lose the underlying one in most cases.", "author": "lbergelson", "createdAt": "2020-02-28T20:21:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTg4MDM5Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTkwMDExNg==", "url": "https://github.com/broadinstitute/gatk/pull/6465#discussion_r385900116", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                \"(ie., is not in a supported Feature file format such as vcf, bcf, or bed), \" +\n          \n          \n            \n                                \"(ie., is not in a supported Feature file format such as vcf, bcf, bed, or interval_list), \" +", "author": "lbergelson", "createdAt": "2020-02-28T20:10:10Z", "path": "src/main/java/org/broadinstitute/hellbender/utils/IntervalUtils.java", "diffHunk": "@@ -303,27 +315,23 @@ public static GenomeLocSortedSet loadIntervals(\n         }\n         // If it's a Feature-containing file, convert it to a list of intervals\n         else if ( FeatureManager.isFeatureFile(IOUtils.getPath(arg)) ) {\n-            rawIntervals.addAll(featureFileToIntervals(parser, arg));\n-        }\n-        // If it's an interval file, add its contents to the raw interval list\n-        else if ( isIntervalFile(arg) ) {\n             try {\n-                rawIntervals.addAll(intervalFileToList(parser, arg));\n-            }\n-            catch ( final UserException.MalformedGenomeLoc e ) {\n-                throw e;\n-            }\n-            catch ( final Exception e ) {\n-                throw new UserException.MalformedFile(new File(arg), \"Interval file could not be parsed in any supported format.\", e);\n+                rawIntervals.addAll(featureFileToIntervals(parser, arg));\n+            } catch (final IllegalArgumentException e){\n+                throw new UserException.MalformedFile(IOUtils.getPath(arg), \"Failure while loading intervals from file.\", e);\n             }\n         }\n+        // If it's an interval file, add its contents to the raw interval list\n+        else if ( isGatkIntervalFile(arg) ) {\n+            rawIntervals.addAll(gatkIntervalFileToList(parser, arg));\n+        }\n         // If it's neither a Feature-containing file nor an interval file, but is an existing file, throw an error.\n         // Note that since contigs can contain periods in their names, we can't use the mere presence of an \"extension\"\n         // as evidence that the user intended the String to be interpreted as a file.\n         else if ( new File(arg).exists() ) {\n             throw new UserException.CouldNotReadInputFile(arg, String.format(\"The file %s exists, but does not contain Features \" +\n                     \"(ie., is not in a supported Feature file format such as vcf, bcf, or bed), \" +", "originalCommit": "7f6f0abff6bf507f77973b79431d411b98cd8a4f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "4e43eb471e165703c265de1c4b154bf95e98d455", "url": "https://github.com/broadinstitute/gatk/commit/4e43eb471e165703c265de1c4b154bf95e98d455", "message": "Apply suggestions from code review", "committedDate": "2020-02-28T20:22:04Z", "type": "commit"}]}