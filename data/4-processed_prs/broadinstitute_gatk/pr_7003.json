{"pr_number": 7003, "pr_title": "Better error bars for samples with small contamination in CalculateContamination", "pr_createdAt": "2020-12-16T16:34:54Z", "pr_url": "https://github.com/broadinstitute/gatk/pull/7003", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjMxNjU3Mg==", "url": "https://github.com/broadinstitute/gatk/pull/7003#discussion_r566316572", "bodyText": "Could you specify what equation this is constructing by putting the tex in javadoc?", "author": "fleharty", "createdAt": "2021-01-28T18:29:06Z", "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/contamination/ContaminationModel.java", "diffHunk": "@@ -160,15 +162,49 @@ public ContaminationModel(List<PileupSummary> sites) {\n                 .mapToDouble(ps -> ps.getTotalCount() * oppositeAlleleFrequency.applyAsDouble(ps))\n                 .sum();\n \n-        final double contamination = contaminationOppositeDepth / totalDepthWeightedByOppositeFrequency;\n+        final double contaminationEstimate = contaminationOppositeDepth / totalDepthWeightedByOppositeFrequency;\n+\n+        final double coeff1 = homs.stream().mapToDouble(ps -> oppositeAlleleFrequency.applyAsDouble(ps) * ps.getTotalCount()).sum();", "originalCommit": "c442c900bbda61ea215574f56e7a3e417e6b860a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MTMxNzk5MQ==", "url": "https://github.com/broadinstitute/gatk/pull/7003#discussion_r581317991", "bodyText": "done", "author": "davidbenjamin", "createdAt": "2021-02-23T19:15:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjMxNjU3Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjMxODA2MA==", "url": "https://github.com/broadinstitute/gatk/pull/7003#discussion_r566318060", "bodyText": "standard error of 0.05\nCould you make this clearer?", "author": "fleharty", "createdAt": "2021-01-28T18:31:19Z", "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/contamination/ContaminationModel.java", "diffHunk": "@@ -160,15 +162,49 @@ public ContaminationModel(List<PileupSummary> sites) {\n                 .mapToDouble(ps -> ps.getTotalCount() * oppositeAlleleFrequency.applyAsDouble(ps))\n                 .sum();\n \n-        final double contamination = contaminationOppositeDepth / totalDepthWeightedByOppositeFrequency;\n+        final double contaminationEstimate = contaminationOppositeDepth / totalDepthWeightedByOppositeFrequency;\n+\n+        final double coeff1 = homs.stream().mapToDouble(ps -> oppositeAlleleFrequency.applyAsDouble(ps) * ps.getTotalCount()).sum();\n+        final double coeff2 = homs.stream().mapToDouble(ps ->\n+                oppositeAlleleFrequency.applyAsDouble(ps)*(1 - oppositeAlleleFrequency.applyAsDouble(ps)) * MathUtils.square(ps.getTotalCount())\n+        ).sum();\n+\n+        final DoubleUnaryOperator errorFunc = c -> homs.isEmpty() ? 1 : Math.sqrt(coeff1*c*(1-c) + coeff2*c*c) / totalDepthWeightedByOppositeFrequency;\n+\n+        // we're going to binary search to find the largest contamination whose expected standard error brings it within range of\n+        // our estimate.  That is, suppose we estimate a contamination of 0.03 and the standard error of 0.05 is 0.02.  Then 0.05 is", "originalCommit": "c442c900bbda61ea215574f56e7a3e417e6b860a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MTMyNzY0NA==", "url": "https://github.com/broadinstitute/gatk/pull/7003#discussion_r581327644", "bodyText": "done", "author": "davidbenjamin", "createdAt": "2021-02-23T19:29:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjMxODA2MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjMxOTY2OA==", "url": "https://github.com/broadinstitute/gatk/pull/7003#discussion_r566319668", "bodyText": "Could you either find a standard binary search, or generalize this in MathUtils?\nIf you add it in MathUtils, create a simple test for it.", "author": "fleharty", "createdAt": "2021-01-28T18:34:00Z", "path": "src/main/java/org/broadinstitute/hellbender/tools/walkers/contamination/ContaminationModel.java", "diffHunk": "@@ -160,15 +162,49 @@ public ContaminationModel(List<PileupSummary> sites) {\n                 .mapToDouble(ps -> ps.getTotalCount() * oppositeAlleleFrequency.applyAsDouble(ps))\n                 .sum();\n \n-        final double contamination = contaminationOppositeDepth / totalDepthWeightedByOppositeFrequency;\n+        final double contaminationEstimate = contaminationOppositeDepth / totalDepthWeightedByOppositeFrequency;\n+\n+        final double coeff1 = homs.stream().mapToDouble(ps -> oppositeAlleleFrequency.applyAsDouble(ps) * ps.getTotalCount()).sum();\n+        final double coeff2 = homs.stream().mapToDouble(ps ->\n+                oppositeAlleleFrequency.applyAsDouble(ps)*(1 - oppositeAlleleFrequency.applyAsDouble(ps)) * MathUtils.square(ps.getTotalCount())\n+        ).sum();\n+\n+        final DoubleUnaryOperator errorFunc = c -> homs.isEmpty() ? 1 : Math.sqrt(coeff1*c*(1-c) + coeff2*c*c) / totalDepthWeightedByOppositeFrequency;\n+\n+        // we're going to binary search to find the largest contamination whose expected standard error brings it within range of\n+        // our estimate.  That is, suppose we estimate a contamination of 0.03 and the standard error of 0.05 is 0.02.  Then 0.05 is\n+        // the upper end of our 1-sigma confidence interval.\n+        // this binary search is far from optimized (in fact we could solve this explicitly with a messy closed-form solution)\n+        // but it converges to a precision of 1e-6 in 20 iterations of the square root of a linear function.  This is fast enough.\n+        double top = 1.0;", "originalCommit": "c442c900bbda61ea215574f56e7a3e417e6b860a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MTYyNTcxMg==", "url": "https://github.com/broadinstitute/gatk/pull/7003#discussion_r581625712", "bodyText": "done", "author": "davidbenjamin", "createdAt": "2021-02-24T05:03:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjMxOTY2OA=="}], "type": "inlineReview"}, {"oid": "59c214735a3324099183f1e937fb19e21c35e4e1", "url": "https://github.com/broadinstitute/gatk/commit/59c214735a3324099183f1e937fb19e21c35e4e1", "message": "improved error bars in CalculateContamination when contamination is very small", "committedDate": "2021-02-24T05:00:46Z", "type": "commit"}, {"oid": "d03758853b98caa86dbdd7069187fba99036c0dd", "url": "https://github.com/broadinstitute/gatk/commit/d03758853b98caa86dbdd7069187fba99036c0dd", "message": "integration tests", "committedDate": "2021-02-24T05:00:49Z", "type": "commit"}, {"oid": "3b5fd8ae42b9087e4dbc20192a989884d521d0b4", "url": "https://github.com/broadinstitute/gatk/commit/3b5fd8ae42b9087e4dbc20192a989884d521d0b4", "message": "edits", "committedDate": "2021-02-24T05:00:49Z", "type": "forcePushed"}, {"oid": "6dc863899da2f3e7cb7abb06dd16ebebf51419f7", "url": "https://github.com/broadinstitute/gatk/commit/6dc863899da2f3e7cb7abb06dd16ebebf51419f7", "message": "edits", "committedDate": "2021-02-24T05:03:01Z", "type": "commit"}, {"oid": "6dc863899da2f3e7cb7abb06dd16ebebf51419f7", "url": "https://github.com/broadinstitute/gatk/commit/6dc863899da2f3e7cb7abb06dd16ebebf51419f7", "message": "edits", "committedDate": "2021-02-24T05:03:01Z", "type": "forcePushed"}]}