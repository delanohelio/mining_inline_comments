{"pr_number": 6624, "pr_title": "Adjusted logic for filtering zero-coverage samples and intervals in CreateReadCountPanelOfNormals.", "pr_createdAt": "2020-05-28T20:23:35Z", "pr_url": "https://github.com/broadinstitute/gatk/pull/6624", "timeline": [{"oid": "b079c79a3729e09ee7aae8ed66a21516e17fe661", "url": "https://github.com/broadinstitute/gatk/commit/b079c79a3729e09ee7aae8ed66a21516e17fe661", "message": "Adjusted logic for filtering zero-coverage samples and intervals in CreateReadCountPanelOfNormals.", "committedDate": "2020-06-14T15:08:38Z", "type": "forcePushed"}, {"oid": "a8b9577998b2b99ab107642217f2c4d47c41dec0", "url": "https://github.com/broadinstitute/gatk/commit/a8b9577998b2b99ab107642217f2c4d47c41dec0", "message": "Adjusted logic for filtering zero-coverage samples and intervals in CreateReadCountPanelOfNormals.", "committedDate": "2020-10-07T17:10:00Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk0MDY4MA==", "url": "https://github.com/broadinstitute/gatk/pull/6624#discussion_r501940680", "bodyText": "I'm a little confused, why is numZerosInSample a double rather than an int?\nIf you need it to be a double so that the fraction is a double, why not cast at the point of computing the fraction?", "author": "fleharty", "createdAt": "2020-10-08T18:50:09Z", "path": "src/main/java/org/broadinstitute/hellbender/tools/copynumber/denoising/SVDDenoisingUtils.java", "diffHunk": "@@ -230,15 +230,15 @@ private static PreprocessedStandardizedResult preprocessPanel(final RealMatrix r\n             logger.info(String.format(\"A value of 100 was provided for argument %s, so the corresponding filtering step will be skipped...\",\n                     CreateReadCountPanelOfNormals.MAXIMUM_ZEROS_IN_SAMPLE_PERCENTAGE_LONG_NAME));\n         } else {\n-            logger.info(String.format(\"Filtering samples with a fraction of zero-coverage intervals above %.2f percent...\", maximumZerosInSamplePercentage));\n-            final int maxZerosInSample = calculateMaximumZerosCount(countNumberPassingFilter(filterIntervals), maximumZerosInSamplePercentage);\n+            logger.info(String.format(\"Filtering samples with a fraction of zero-coverage intervals greater than or equal to %.2f percent...\", maximumZerosInSamplePercentage));\n+            final int numPassingIntervals = countNumberPassingFilter(filterIntervals);\n             IntStream.range(0, numOriginalSamples)\n                     .filter(sampleIndex -> !filterSamples[sampleIndex])\n                     .forEach(sampleIndex -> {\n-                        final int numZerosInSample = (int) IntStream.range(0, numOriginalIntervals)\n+                        final double numZerosInSample = (double) IntStream.range(0, numOriginalIntervals)\n                                 .filter(intervalIndex -> !filterIntervals[intervalIndex] && readCounts.getEntry(sampleIndex, intervalIndex) == 0.)\n                                 .count();\n-                        if (numZerosInSample > maxZerosInSample) {\n+                        if (numZerosInSample / numPassingIntervals >= maximumZerosInSamplePercentage / 100.) {", "originalCommit": "a8b9577998b2b99ab107642217f2c4d47c41dec0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk1Mzk1Ng==", "url": "https://github.com/broadinstitute/gatk/pull/6624#discussion_r501953956", "bodyText": "In both cases, the cast happens in the next line and the variable is not used elsewhere, so I'm OK keeping it like this. Certainly it's valid to represent an integer with a double, at least here...?", "author": "samuelklee", "createdAt": "2020-10-08T19:13:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk0MDY4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk1NzkzNQ==", "url": "https://github.com/broadinstitute/gatk/pull/6624#discussion_r501957935", "bodyText": "@samuelklee It's fine the way it is.", "author": "fleharty", "createdAt": "2020-10-08T19:20:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk0MDY4MA=="}], "type": "inlineReview"}, {"oid": "7c7599318151fcccd76640e813909ad8f1871aa2", "url": "https://github.com/broadinstitute/gatk/commit/7c7599318151fcccd76640e813909ad8f1871aa2", "message": "Added regression test and additional filter to prevent NaNs from zero-median intervals that result when median filter is disabled.", "committedDate": "2020-10-08T21:29:02Z", "type": "forcePushed"}, {"oid": "0d3f4c2dfe16206ba192e0feeaf5832324f9b8a1", "url": "https://github.com/broadinstitute/gatk/commit/0d3f4c2dfe16206ba192e0feeaf5832324f9b8a1", "message": "Added regression tests, logging, and a check for zero interval medians to prevent NaNs when running a single sample with uncovered intervals.", "committedDate": "2020-10-09T01:05:37Z", "type": "forcePushed"}, {"oid": "62daa97acb1737b09ab588927cab4186af533097", "url": "https://github.com/broadinstitute/gatk/commit/62daa97acb1737b09ab588927cab4186af533097", "message": "Added regression tests and logging.", "committedDate": "2020-10-09T01:57:38Z", "type": "forcePushed"}, {"oid": "f121251294919bd0a39ad53ab997b019be333703", "url": "https://github.com/broadinstitute/gatk/commit/f121251294919bd0a39ad53ab997b019be333703", "message": "Added regression tests and logging.", "committedDate": "2020-10-09T01:58:33Z", "type": "forcePushed"}, {"oid": "2f78de307e5b66ead3d6edd555ec1f317aa8c046", "url": "https://github.com/broadinstitute/gatk/commit/2f78de307e5b66ead3d6edd555ec1f317aa8c046", "message": "Added regression tests and logging.", "committedDate": "2020-10-09T01:59:38Z", "type": "forcePushed"}, {"oid": "766a1607fa24489bdbf0b12b9e94e8bbc4c4cef4", "url": "https://github.com/broadinstitute/gatk/commit/766a1607fa24489bdbf0b12b9e94e8bbc4c4cef4", "message": "Added regression tests and logging.", "committedDate": "2020-10-09T02:12:11Z", "type": "forcePushed"}, {"oid": "240cc3118217d02152bb81436dfbafec3275a5ae", "url": "https://github.com/broadinstitute/gatk/commit/240cc3118217d02152bb81436dfbafec3275a5ae", "message": "Added regression tests and logging.", "committedDate": "2020-10-09T02:32:21Z", "type": "forcePushed"}, {"oid": "d2f5a1f48c62d8a5fa943710db5f34d41f19275b", "url": "https://github.com/broadinstitute/gatk/commit/d2f5a1f48c62d8a5fa943710db5f34d41f19275b", "message": "Adjusted logic for filtering zero-coverage samples and intervals in CreateReadCountPanelOfNormals.", "committedDate": "2020-10-09T13:14:36Z", "type": "commit"}, {"oid": "1839075f50284b19e6535d06fbb3c0d07a95c83f", "url": "https://github.com/broadinstitute/gatk/commit/1839075f50284b19e6535d06fbb3c0d07a95c83f", "message": "Added regression tests and logging.", "committedDate": "2020-10-09T13:14:36Z", "type": "forcePushed"}, {"oid": "bc0e296fef7b19ba6e821080ee7ddb3ec163bf45", "url": "https://github.com/broadinstitute/gatk/commit/bc0e296fef7b19ba6e821080ee7ddb3ec163bf45", "message": "Added regression tests and logging.", "committedDate": "2020-10-09T13:37:11Z", "type": "forcePushed"}, {"oid": "976ddf26cf0e343619f0a7b989fc463c67988899", "url": "https://github.com/broadinstitute/gatk/commit/976ddf26cf0e343619f0a7b989fc463c67988899", "message": "Added regression tests and logging.", "committedDate": "2020-10-09T13:39:30Z", "type": "commit"}, {"oid": "976ddf26cf0e343619f0a7b989fc463c67988899", "url": "https://github.com/broadinstitute/gatk/commit/976ddf26cf0e343619f0a7b989fc463c67988899", "message": "Added regression tests and logging.", "committedDate": "2020-10-09T13:39:30Z", "type": "forcePushed"}, {"oid": "88d9fcb14eea4fd529ad405ccbc9971bb3929237", "url": "https://github.com/broadinstitute/gatk/commit/88d9fcb14eea4fd529ad405ccbc9971bb3929237", "message": "Set random seeds for shuffles.", "committedDate": "2020-10-09T15:39:41Z", "type": "commit"}, {"oid": "88d9fcb14eea4fd529ad405ccbc9971bb3929237", "url": "https://github.com/broadinstitute/gatk/commit/88d9fcb14eea4fd529ad405ccbc9971bb3929237", "message": "Set random seeds for shuffles.", "committedDate": "2020-10-09T15:39:41Z", "type": "forcePushed"}]}