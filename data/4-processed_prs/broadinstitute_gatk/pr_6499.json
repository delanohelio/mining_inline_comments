{"pr_number": 6499, "pr_title": "Enabled multisample segmentation in ModelSegments.", "pr_createdAt": "2020-03-12T17:53:00Z", "pr_url": "https://github.com/broadinstitute/gatk/pull/6499", "timeline": [{"oid": "b0239f1654466c78699e9642a2695f05fcac9685", "url": "https://github.com/broadinstitute/gatk/commit/b0239f1654466c78699e9642a2695f05fcac9685", "message": "comment out local tests", "committedDate": "2020-03-12T20:01:44Z", "type": "forcePushed"}, {"oid": "692d67847688a633c42a1f0c4d7651c7dc643c82", "url": "https://github.com/broadinstitute/gatk/commit/692d67847688a633c42a1f0c4d7651c7dc643c82", "message": "optimize imports", "committedDate": "2020-03-30T17:57:33Z", "type": "forcePushed"}, {"oid": "354121a0108751ea6fd6fd5420c23c9c544e671f", "url": "https://github.com/broadinstitute/gatk/commit/354121a0108751ea6fd6fd5420c23c9c544e671f", "message": "work", "committedDate": "2020-03-30T18:05:27Z", "type": "forcePushed"}, {"oid": "c2d34ae7be035bd985b8fd986748503ec3472465", "url": "https://github.com/broadinstitute/gatk/commit/c2d34ae7be035bd985b8fd986748503ec3472465", "message": "work", "committedDate": "2020-03-30T18:09:57Z", "type": "forcePushed"}, {"oid": "6f78819197ae0abd202d41e86f6e49960e410d85", "url": "https://github.com/broadinstitute/gatk/commit/6f78819197ae0abd202d41e86f6e49960e410d85", "message": "work", "committedDate": "2020-03-30T19:20:05Z", "type": "forcePushed"}, {"oid": "02a5c27baac36552a1ae1d701deaa14494012788", "url": "https://github.com/broadinstitute/gatk/commit/02a5c27baac36552a1ae1d701deaa14494012788", "message": "consolidated segmenters", "committedDate": "2020-04-03T17:02:52Z", "type": "forcePushed"}, {"oid": "812fd88ba02eda88e0c22cb7364db85035799f07", "url": "https://github.com/broadinstitute/gatk/commit/812fd88ba02eda88e0c22cb7364db85035799f07", "message": "more", "committedDate": "2020-04-07T18:48:30Z", "type": "forcePushed"}, {"oid": "985c3c2d0cafeea11e1783294b38d7704dd9dc4b", "url": "https://github.com/broadinstitute/gatk/commit/985c3c2d0cafeea11e1783294b38d7704dd9dc4b", "message": "sjs", "committedDate": "2020-04-08T03:02:23Z", "type": "forcePushed"}, {"oid": "3c01bfdeed7e3c16e7caefc77e3151707feba24e", "url": "https://github.com/broadinstitute/gatk/commit/3c01bfdeed7e3c16e7caefc77e3151707feba24e", "message": "more", "committedDate": "2020-04-09T02:18:41Z", "type": "forcePushed"}, {"oid": "9b6685d3fbec6d7f03ee0596c88aacb9fcdea6fb", "url": "https://github.com/broadinstitute/gatk/commit/9b6685d3fbec6d7f03ee0596c88aacb9fcdea6fb", "message": "work", "committedDate": "2020-04-09T02:25:29Z", "type": "forcePushed"}, {"oid": "aba8ff04663fb86bcbe89c9f7d2d0286feef783f", "url": "https://github.com/broadinstitute/gatk/commit/aba8ff04663fb86bcbe89c9f7d2d0286feef783f", "message": "more", "committedDate": "2020-04-09T18:26:40Z", "type": "forcePushed"}, {"oid": "a4fc769bc43252bc8d9b48f98e1b3ab018e0f2c8", "url": "https://github.com/broadinstitute/gatk/commit/a4fc769bc43252bc8d9b48f98e1b3ab018e0f2c8", "message": "more", "committedDate": "2020-04-09T18:29:09Z", "type": "forcePushed"}, {"oid": "5316a6ff3b0d666f2c34404d7120fb0dc37f66fe", "url": "https://github.com/broadinstitute/gatk/commit/5316a6ff3b0d666f2c34404d7120fb0dc37f66fe", "message": "more", "committedDate": "2020-04-09T18:31:47Z", "type": "forcePushed"}, {"oid": "28a6d21b30cbbfa614f4c1f31420a1eb89e7e500", "url": "https://github.com/broadinstitute/gatk/commit/28a6d21b30cbbfa614f4c1f31420a1eb89e7e500", "message": "more", "committedDate": "2020-04-09T19:03:36Z", "type": "forcePushed"}, {"oid": "4784001ccafb322a2d161162459929351111345f", "url": "https://github.com/broadinstitute/gatk/commit/4784001ccafb322a2d161162459929351111345f", "message": "Enabled multisample segmentation in ModelSegments.", "committedDate": "2020-04-10T18:58:53Z", "type": "forcePushed"}, {"oid": "dd905c508fdfe4f4f6e94383d81ef5c426ea0861", "url": "https://github.com/broadinstitute/gatk/commit/dd905c508fdfe4f4f6e94383d81ef5c426ea0861", "message": "Enabled multisample segmentation in ModelSegments.", "committedDate": "2020-04-10T19:23:17Z", "type": "forcePushed"}, {"oid": "940aaf92ff37c52efd9d7fa57f468a9b309d9b5c", "url": "https://github.com/broadinstitute/gatk/commit/940aaf92ff37c52efd9d7fa57f468a9b309d9b5c", "message": "Enabled multisample segmentation in ModelSegments.", "committedDate": "2020-04-13T15:52:38Z", "type": "forcePushed"}, {"oid": "797f0e207702fe01d7338ae07cd8c2e577e6c7d4", "url": "https://github.com/broadinstitute/gatk/commit/797f0e207702fe01d7338ae07cd8c2e577e6c7d4", "message": "Enabled multisample segmentation in ModelSegments.", "committedDate": "2020-04-13T16:00:22Z", "type": "forcePushed"}, {"oid": "e5631eae73a47eedd6892f1bdd0679b6fad9b376", "url": "https://github.com/broadinstitute/gatk/commit/e5631eae73a47eedd6892f1bdd0679b6fad9b376", "message": "Enabled multisample segmentation in ModelSegments.", "committedDate": "2020-04-13T16:46:59Z", "type": "forcePushed"}, {"oid": "8b3b691ecafa2108712d5bab0ec595b9caaa3bd5", "url": "https://github.com/broadinstitute/gatk/commit/8b3b691ecafa2108712d5bab0ec595b9caaa3bd5", "message": "Enabled multisample segmentation in ModelSegments.", "committedDate": "2020-04-13T19:00:57Z", "type": "forcePushed"}, {"oid": "8b69097cb5f91de4806aa4c87a2976d5e8878e22", "url": "https://github.com/broadinstitute/gatk/commit/8b69097cb5f91de4806aa4c87a2976d5e8878e22", "message": "debug", "committedDate": "2020-04-13T19:06:42Z", "type": "forcePushed"}, {"oid": "413586e29cbf65de738eef9135230d3684b17946", "url": "https://github.com/broadinstitute/gatk/commit/413586e29cbf65de738eef9135230d3684b17946", "message": "Enabled multisample segmentation in ModelSegments.", "committedDate": "2020-04-13T21:32:40Z", "type": "forcePushed"}, {"oid": "72a0e77bfa3167cfd1618c6152045e8eb769b7a7", "url": "https://github.com/broadinstitute/gatk/commit/72a0e77bfa3167cfd1618c6152045e8eb769b7a7", "message": "Enabled multisample segmentation in ModelSegments.", "committedDate": "2020-04-13T21:34:06Z", "type": "forcePushed"}, {"oid": "9e15031d43b35ef74fd47d15826b89eda19ab010", "url": "https://github.com/broadinstitute/gatk/commit/9e15031d43b35ef74fd47d15826b89eda19ab010", "message": "more", "committedDate": "2020-04-15T19:35:59Z", "type": "forcePushed"}, {"oid": "b2af1a1b0d5063617ad3a94eefe5aeb83e70738f", "url": "https://github.com/broadinstitute/gatk/commit/b2af1a1b0d5063617ad3a94eefe5aeb83e70738f", "message": "Enabled multisample segmentation in ModelSegments.", "committedDate": "2020-04-15T19:38:42Z", "type": "forcePushed"}, {"oid": "f4214bee86d9091f5655103452f616ffc6576a1c", "url": "https://github.com/broadinstitute/gatk/commit/f4214bee86d9091f5655103452f616ffc6576a1c", "message": "Enabled multisample segmentation in ModelSegments.", "committedDate": "2020-04-15T19:40:14Z", "type": "forcePushed"}, {"oid": "521b812144e79760269663d55d67bd1f10bc693c", "url": "https://github.com/broadinstitute/gatk/commit/521b812144e79760269663d55d67bd1f10bc693c", "message": "Enabled multisample segmentation in ModelSegments.", "committedDate": "2020-04-15T19:41:13Z", "type": "forcePushed"}, {"oid": "25d935016e6cb6ba9d420af37a63df2cb1db4689", "url": "https://github.com/broadinstitute/gatk/commit/25d935016e6cb6ba9d420af37a63df2cb1db4689", "message": "Enabled multisample segmentation in ModelSegments.", "committedDate": "2020-04-15T19:43:11Z", "type": "forcePushed"}, {"oid": "0a5bf73b15acdc1b50a8da95425bb5dbfc809b73", "url": "https://github.com/broadinstitute/gatk/commit/0a5bf73b15acdc1b50a8da95425bb5dbfc809b73", "message": "Enabled multisample segmentation in ModelSegments.", "committedDate": "2020-04-15T19:47:06Z", "type": "forcePushed"}, {"oid": "15a4a8dd2493d5e33a6dc0639242eebadaa163e5", "url": "https://github.com/broadinstitute/gatk/commit/15a4a8dd2493d5e33a6dc0639242eebadaa163e5", "message": "Enabled multisample segmentation in ModelSegments.", "committedDate": "2020-04-15T19:48:45Z", "type": "forcePushed"}, {"oid": "21bc4236b54f55b4a19f2c7ab8db11852d573a8d", "url": "https://github.com/broadinstitute/gatk/commit/21bc4236b54f55b4a19f2c7ab8db11852d573a8d", "message": "Enabled multisample segmentation in ModelSegments.", "committedDate": "2020-04-16T15:38:28Z", "type": "forcePushed"}, {"oid": "1dba22a70a8207ae438f75f3d3092e3e78f9b3bf", "url": "https://github.com/broadinstitute/gatk/commit/1dba22a70a8207ae438f75f3d3092e3e78f9b3bf", "message": "Enabled multisample segmentation in ModelSegments.", "committedDate": "2020-04-16T15:51:17Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTA3OTg3OQ==", "url": "https://github.com/broadinstitute/gatk/pull/6499#discussion_r441079879", "bodyText": "Let's use explicit imports.", "author": "fleharty", "createdAt": "2020-06-16T19:06:59Z", "path": "src/main/java/org/broadinstitute/hellbender/tools/copynumber/ModelSegments.java", "diffHunk": "@@ -1,46 +1,56 @@\n package org.broadinstitute.hellbender.tools.copynumber;\n \n+import com.google.common.collect.ImmutableList;\n import com.google.common.collect.ImmutableSet;\n+import htsjdk.samtools.SAMSequenceDictionary;\n+import htsjdk.samtools.util.Interval;\n+import htsjdk.samtools.util.IntervalList;\n import htsjdk.samtools.util.OverlapDetector;\n-import org.apache.commons.math3.special.Beta;\n-import org.apache.commons.math3.util.FastMath;\n+import org.broadinstitute.barclay.argparser.Advanced;\n import org.broadinstitute.barclay.argparser.Argument;\n+import org.broadinstitute.barclay.argparser.ArgumentCollection;\n import org.broadinstitute.barclay.argparser.CommandLineProgramProperties;\n import org.broadinstitute.barclay.help.DocumentedFeature;\n import org.broadinstitute.hellbender.cmdline.CommandLineProgram;\n import org.broadinstitute.hellbender.cmdline.StandardArgumentDefinitions;\n import org.broadinstitute.hellbender.cmdline.programgroups.CopyNumberProgramGroup;\n-import org.broadinstitute.hellbender.exceptions.UserException;\n-import org.broadinstitute.hellbender.tools.copynumber.arguments.CopyNumberArgumentValidationUtils;\n-import org.broadinstitute.hellbender.tools.copynumber.arguments.CopyNumberStandardArgument;\n+import org.broadinstitute.hellbender.exceptions.GATKException;\n+import org.broadinstitute.hellbender.tools.copynumber.arguments.*;", "originalCommit": "1dba22a70a8207ae438f75f3d3092e3e78f9b3bf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0ODQwMDY3OA==", "url": "https://github.com/broadinstitute/gatk/pull/6499#discussion_r648400678", "bodyText": "OK, optimized with explicit imports across source/test code in the copynumber package.", "author": "samuelklee", "createdAt": "2021-06-09T15:02:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTA3OTg3OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQ0NDQ0Mw==", "url": "https://github.com/broadinstitute/gatk/pull/6499#discussion_r534444443", "bodyText": "Explicit imports.", "author": "fleharty", "createdAt": "2020-12-02T19:59:58Z", "path": "src/main/java/org/broadinstitute/hellbender/tools/copynumber/arguments/CopyNumberArgumentValidationUtils.java", "diffHunk": "@@ -3,16 +3,15 @@\n import com.google.common.collect.Ordering;\n import htsjdk.samtools.SAMSequenceDictionary;\n import htsjdk.samtools.util.Locatable;\n+import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.Logger;\n import org.broadinstitute.hellbender.cmdline.argumentcollections.IntervalArgumentCollection;\n import org.broadinstitute.hellbender.exceptions.UserException;\n import org.broadinstitute.hellbender.tools.copynumber.DetermineGermlineContigPloidy;\n import org.broadinstitute.hellbender.tools.copynumber.GermlineCNVCaller;\n-import org.broadinstitute.hellbender.tools.copynumber.formats.collections.AbstractLocatableCollection;\n-import org.broadinstitute.hellbender.tools.copynumber.formats.collections.AnnotatedIntervalCollection;\n-import org.broadinstitute.hellbender.tools.copynumber.formats.collections.SimpleCountCollection;\n-import org.broadinstitute.hellbender.tools.copynumber.formats.collections.SimpleIntervalCollection;\n+import org.broadinstitute.hellbender.tools.copynumber.formats.collections.*;", "originalCommit": "1dba22a70a8207ae438f75f3d3092e3e78f9b3bf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQ0NDU1MA==", "url": "https://github.com/broadinstitute/gatk/pull/6499#discussion_r534444550", "bodyText": "Explicit imports", "author": "fleharty", "createdAt": "2020-12-02T20:00:10Z", "path": "src/main/java/org/broadinstitute/hellbender/tools/copynumber/arguments/CopyNumberArgumentValidationUtils.java", "diffHunk": "@@ -22,10 +21,7 @@\n \n import java.io.File;\n import java.io.IOException;\n-import java.util.HashSet;\n-import java.util.List;\n-import java.util.OptionalInt;\n-import java.util.Set;\n+import java.util.*;", "originalCommit": "1dba22a70a8207ae438f75f3d3092e3e78f9b3bf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQ4MjMxMw==", "url": "https://github.com/broadinstitute/gatk/pull/6499#discussion_r534482313", "bodyText": "This seems more like an error to me.  Is there a situation where you might like to allow sequence dictionaries to not match?", "author": "fleharty", "createdAt": "2020-12-02T21:08:22Z", "path": "src/main/java/org/broadinstitute/hellbender/tools/copynumber/arguments/CopyNumberArgumentValidationUtils.java", "diffHunk": "@@ -121,6 +120,41 @@ public static SimpleIntervalCollection resolveIntervals(final String readCountPa\n         return new SimpleIntervalCollection(metadata, intervals);\n     }\n \n+    /**\n+     * For all non-null inputs, validate that all metadata are identical and return the metadata.\n+     */\n+    @SafeVarargs\n+    @SuppressWarnings({\"varargs\"})\n+    public static <METADATA extends Metadata> METADATA getValidatedMetadata(final AbstractRecordCollection<METADATA, ?> ... recordCollections) {\n+        Utils.nonNull(recordCollections);\n+        final Set<METADATA> metadataSet = Stream.of(recordCollections)\n+                .filter(Objects::nonNull)\n+                .map(AbstractRecordCollection::getMetadata)\n+                .collect(Collectors.toSet());\n+        Utils.nonEmpty(metadataSet, \"At least one collection must be non-null.\");\n+        Utils.validateArg(metadataSet.size() == 1, \"Metadata do not match.\");\n+        return metadataSet.stream().findFirst().get();\n+    }\n+\n+    /**\n+     * For all non-null inputs, validate that all sequence dictionaries match (using {@link #isSameDictionary})\n+     * and return the sequence dictionary; otherwise, emit a warning.\n+     */\n+    public static SAMSequenceDictionary getValidatedSequenceDictionary(final AbstractLocatableCollection<?, ?> ... locatableCollections) {\n+        Utils.nonNull(locatableCollections);\n+        final List<SAMSequenceDictionary> sequenceDictionaries = Stream.of(locatableCollections)\n+                .filter(Objects::nonNull)\n+                .map(AbstractLocatableCollection::getMetadata)\n+                .map(LocatableMetadata::getSequenceDictionary)\n+                .collect(Collectors.toList());\n+        Utils.nonEmpty(sequenceDictionaries, \"At least one collection must be non-null.\");\n+        if (!IntStream.range(0, sequenceDictionaries.size() - 1).\n+                allMatch(i -> CopyNumberArgumentValidationUtils.isSameDictionary(sequenceDictionaries.get(i), sequenceDictionaries.get(i + 1)))) {\n+            logger.warn(\"Sequence dictionaries do not match across all inputs.\");", "originalCommit": "1dba22a70a8207ae438f75f3d3092e3e78f9b3bf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0ODM5Njc2Ng==", "url": "https://github.com/broadinstitute/gatk/pull/6499#discussion_r648396766", "bodyText": "I think requiring sequence dictionaries to match even caused issues in TCGA data at some point. I think there are some discussions from long ago in the dsde-methods Slack about how strict we should be about this sort of thing, generally.", "author": "samuelklee", "createdAt": "2021-06-09T14:58:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQ4MjMxMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQ5MjkwMA==", "url": "https://github.com/broadinstitute/gatk/pull/6499#discussion_r534492900", "bodyText": "Could you add  a simple test for this.", "author": "fleharty", "createdAt": "2020-12-02T21:28:22Z", "path": "src/main/java/org/broadinstitute/hellbender/tools/copynumber/arguments/CopyNumberArgumentValidationUtils.java", "diffHunk": "@@ -121,6 +120,41 @@ public static SimpleIntervalCollection resolveIntervals(final String readCountPa\n         return new SimpleIntervalCollection(metadata, intervals);\n     }\n \n+    /**\n+     * For all non-null inputs, validate that all metadata are identical and return the metadata.\n+     */\n+    @SafeVarargs\n+    @SuppressWarnings({\"varargs\"})\n+    public static <METADATA extends Metadata> METADATA getValidatedMetadata(final AbstractRecordCollection<METADATA, ?> ... recordCollections) {\n+        Utils.nonNull(recordCollections);\n+        final Set<METADATA> metadataSet = Stream.of(recordCollections)\n+                .filter(Objects::nonNull)\n+                .map(AbstractRecordCollection::getMetadata)\n+                .collect(Collectors.toSet());\n+        Utils.nonEmpty(metadataSet, \"At least one collection must be non-null.\");\n+        Utils.validateArg(metadataSet.size() == 1, \"Metadata do not match.\");\n+        return metadataSet.stream().findFirst().get();\n+    }\n+\n+    /**\n+     * For all non-null inputs, validate that all sequence dictionaries match (using {@link #isSameDictionary})\n+     * and return the sequence dictionary; otherwise, emit a warning.\n+     */\n+    public static SAMSequenceDictionary getValidatedSequenceDictionary(final AbstractLocatableCollection<?, ?> ... locatableCollections) {", "originalCommit": "1dba22a70a8207ae438f75f3d3092e3e78f9b3bf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0ODQyMzI0NQ==", "url": "https://github.com/broadinstitute/gatk/pull/6499#discussion_r648423245", "bodyText": "A bit of extra work to check for warnings, rather than errors. I don't think we care too closely about the exact behavior here (see above comment), so punting as well!", "author": "samuelklee", "createdAt": "2021-06-09T15:25:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQ5MjkwMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQ5NjE2NA==", "url": "https://github.com/broadinstitute/gatk/pull/6499#discussion_r534496164", "bodyText": "Since base qualities are typically stored in phred scale, would it make sense to use phred scale here too?", "author": "fleharty", "createdAt": "2020-12-02T21:34:30Z", "path": "src/main/java/org/broadinstitute/hellbender/tools/copynumber/arguments/SomaticGenotypingArgumentCollection.java", "diffHunk": "@@ -0,0 +1,53 @@\n+package org.broadinstitute.hellbender.tools.copynumber.arguments;\n+\n+import org.broadinstitute.barclay.argparser.Argument;\n+\n+import java.io.Serializable;\n+\n+public class SomaticGenotypingArgumentCollection implements Serializable {\n+    public static final long serialVersionUID = 1L;\n+\n+    //het genotyping argument names\n+    public static final String MINIMUM_TOTAL_ALLELE_COUNT_CASE_LONG_NAME = \"minimum-total-allele-count-case\";\n+    public static final String MINIMUM_TOTAL_ALLELE_COUNT_NORMAL_LONG_NAME = \"minimum-total-allele-count-normal\";\n+    public static final String GENOTYPING_HOMOZYGOUS_LOG_RATIO_THRESHOLD_LONG_NAME = \"genotyping-homozygous-log-ratio-threshold\";\n+    public static final String GENOTYPING_BASE_ERROR_RATE_LONG_NAME = \"genotyping-base-error-rate\";\n+\n+    @Argument(\n+            doc = \"Minimum total count for filtering allelic counts in the case sample, if available.  \" +\n+                    \"The default value of zero is appropriate for matched-normal mode; \" +\n+                    \"increase to an appropriate value for case-only mode.\",\n+            fullName = MINIMUM_TOTAL_ALLELE_COUNT_CASE_LONG_NAME,\n+            minValue = 0,\n+            optional = true\n+    )\n+    public int minTotalAlleleCountCase = 0;\n+\n+    @Argument(\n+            doc = \"Minimum total count for filtering allelic counts in the matched-normal sample, if available.\",\n+            fullName = MINIMUM_TOTAL_ALLELE_COUNT_NORMAL_LONG_NAME,\n+            minValue = 0,\n+            optional = true\n+    )\n+    public int minTotalAlleleCountNormal = 30;\n+\n+    @Argument(\n+            doc = \"Log-ratio threshold for genotyping and filtering homozygous allelic counts, if available.  \" +\n+                    \"Increasing this value will increase the number of sites assumed to be heterozygous for modeling.\",\n+            fullName = GENOTYPING_HOMOZYGOUS_LOG_RATIO_THRESHOLD_LONG_NAME,\n+            optional = true\n+    )\n+    public double genotypingHomozygousLogRatioThreshold = -10.;\n+\n+    @Argument(\n+            doc = \"Maximum base-error rate for genotyping and filtering homozygous allelic counts, if available.  \" +", "originalCommit": "1dba22a70a8207ae438f75f3d3092e3e78f9b3bf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0ODQyNDg2NA==", "url": "https://github.com/broadinstitute/gatk/pull/6499#discussion_r648424864", "bodyText": "This base-error rate is intended to model stray bases in the pileups, which could arise for reasons other than the sequencing errors corresponding to base qualities. The maximum value parameterized here is probably typically on the order of a few percent, so it doesn't seem natural to express this in phred scale.", "author": "samuelklee", "createdAt": "2021-06-09T15:27:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQ5NjE2NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIzNTg4MQ==", "url": "https://github.com/broadinstitute/gatk/pull/6499#discussion_r536235881", "bodyText": "I'm confused about why the default parameters are alpha, 1, 0, 1/2.  Why is beta = 1, and why are you scaling a = 0, and c = 1/2?  Is my interpretation correct here?", "author": "fleharty", "createdAt": "2020-12-04T16:49:09Z", "path": "src/main/java/org/broadinstitute/hellbender/tools/copynumber/arguments/SomaticModelingArgumentCollection.java", "diffHunk": "@@ -0,0 +1,106 @@\n+package org.broadinstitute.hellbender.tools.copynumber.arguments;\n+\n+import org.broadinstitute.barclay.argparser.Argument;\n+import org.broadinstitute.hellbender.utils.Utils;\n+\n+import java.io.Serializable;\n+\n+public class SomaticModelingArgumentCollection implements Serializable {\n+    public static final long serialVersionUID = 1L;\n+\n+    //MCMC argument names\n+    public static final String MINOR_ALLELE_FRACTION_PRIOR_ALPHA_LONG_NAME = \"minor-allele-fraction-prior-alpha\";\n+    public static final String NUMBER_OF_SAMPLES_COPY_RATIO_LONG_NAME = \"number-of-samples-copy-ratio\";\n+    public static final String NUMBER_OF_BURN_IN_SAMPLES_COPY_RATIO_LONG_NAME = \"number-of-burn-in-samples-copy-ratio\";\n+    public static final String NUMBER_OF_SAMPLES_ALLELE_FRACTION_LONG_NAME = \"number-of-samples-allele-fraction\";\n+    public static final String NUMBER_OF_BURN_IN_SAMPLES_ALLELE_FRACTION_LONG_NAME = \"number-of-burn-in-samples-allele-fraction\";\n+\n+    //smoothing argument names\n+    public static final String SMOOTHING_CREDIBLE_INTERVAL_THRESHOLD_COPY_RATIO_LONG_NAME = \"smoothing-credible-interval-threshold-copy-ratio\";\n+    public static final String SMOOTHING_CREDIBLE_INTERVAL_THRESHOLD_ALLELE_FRACTION_LONG_NAME = \"smoothing-credible-interval-threshold-allele-fraction\";\n+    public static final String MAXIMUM_NUMBER_OF_SMOOTHING_ITERATIONS_LONG_NAME = \"maximum-number-of-smoothing-iterations\";\n+    public static final String NUMBER_OF_SMOOTHING_ITERATIONS_PER_FIT_LONG_NAME = \"number-of-smoothing-iterations-per-fit\";\n+\n+    @Argument(\n+            doc = \"Alpha hyperparameter for the 4-parameter beta-distribution prior on segment minor-allele fraction. \" +\n+                    \"The prior for the minor-allele fraction f in each segment is assumed to be Beta(alpha, 1, 0, 1/2). \" +", "originalCommit": "1dba22a70a8207ae438f75f3d3092e3e78f9b3bf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0ODQwNDQzMA==", "url": "https://github.com/broadinstitute/gatk/pull/6499#discussion_r648404430", "bodyText": "Minor-allele fraction is supported on [0, 1/2), so we set a and c accordingly. We fix beta = 1 just to remove a degree of freedom; it seems unlikely that anyone would want to specify a prior peaked anywhere else besides 0.5, and the prior hopefully doesn't make too much of a difference with good data anyway.", "author": "samuelklee", "createdAt": "2021-06-09T15:06:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIzNTg4MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjI0OTk3MQ==", "url": "https://github.com/broadinstitute/gatk/pull/6499#discussion_r536249971", "bodyText": "What's the justification for the change from 0.1 to 0.025?\nThe test no longer passes with the value 0.1.", "author": "fleharty", "createdAt": "2020-12-04T17:13:44Z", "path": "src/test/java/org/broadinstitute/hellbender/tools/copynumber/segmentation/AlleleFractionKernelSegmenterUnitTest.java", "diffHunk": "@@ -36,19 +35,19 @@\n     public Object[][] dataAlleleFractionKernelSegmenter() {\n         final int numPoints = 10000;\n         final double noiseLevel = 0.001;\n-        final double homFraction = 0.1;     //low hom fraction minimizes uncertainty in the changepoints coming from runs of adjacent homs near the changepoints\n+        final double homFraction = 0.025;   //low hom fraction minimizes uncertainty in the changepoints coming from runs of adjacent homs near the changepoints", "originalCommit": "1dba22a70a8207ae438f75f3d3092e3e78f9b3bf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0ODQwNTE3Mw==", "url": "https://github.com/broadinstitute/gatk/pull/6499#discussion_r648405173", "bodyText": "See comment in #6499 (comment)", "author": "samuelklee", "createdAt": "2021-06-09T15:07:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjI0OTk3MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjI1MzUzNQ==", "url": "https://github.com/broadinstitute/gatk/pull/6499#discussion_r536253535", "bodyText": "Test also fails if I change the kernelVariance from 0.05 to its previous value 0.01.", "author": "fleharty", "createdAt": "2020-12-04T17:19:53Z", "path": "src/test/java/org/broadinstitute/hellbender/tools/copynumber/segmentation/AlleleFractionKernelSegmenterUnitTest.java", "diffHunk": "@@ -99,15 +98,15 @@\n \n     @Test(dataProvider = \"dataAlleleFractionKernelSegmenter\")\n     public void testAlleleFractionKernelSegmenter(final AllelicCountCollection allelicCounts,\n-                                                  final AlleleFractionSegmentCollection segmentsExpected) {\n+                                                  final SimpleIntervalCollection segmentsExpected) {\n         final int maxNumChangepointsPerChromosome = 25;\n-        final double kernelVariance = 0.01;\n+        final double kernelVariance = 0.05;", "originalCommit": "1dba22a70a8207ae438f75f3d3092e3e78f9b3bf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0ODQwNTM5NA==", "url": "https://github.com/broadinstitute/gatk/pull/6499#discussion_r648405394", "bodyText": "Again, see comment above.", "author": "samuelklee", "createdAt": "2021-06-09T15:07:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjI1MzUzNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjI1NDg3OQ==", "url": "https://github.com/broadinstitute/gatk/pull/6499#discussion_r536254879", "bodyText": "Could you set variables for 250, and 10.\nIt's not clear if this is equivalent to...\n(i % x) * y + z\nor\n(i % x) * y + y", "author": "fleharty", "createdAt": "2020-12-04T17:22:17Z", "path": "src/test/java/org/broadinstitute/hellbender/tools/copynumber/segmentation/MultisampleMultidimensionalKernelSegmenterUnitTest.java", "diffHunk": "@@ -0,0 +1,179 @@\n+package org.broadinstitute.hellbender.tools.copynumber.segmentation;\n+\n+import htsjdk.samtools.SAMSequenceDictionary;\n+import htsjdk.samtools.SAMSequenceRecord;\n+import org.broadinstitute.hellbender.GATKBaseTest;\n+import org.broadinstitute.hellbender.tools.copynumber.formats.collections.AllelicCountCollection;\n+import org.broadinstitute.hellbender.tools.copynumber.formats.collections.CopyRatioCollection;\n+import org.broadinstitute.hellbender.tools.copynumber.formats.collections.SimpleIntervalCollection;\n+import org.broadinstitute.hellbender.tools.copynumber.formats.metadata.SampleLocatableMetadata;\n+import org.broadinstitute.hellbender.tools.copynumber.formats.metadata.SimpleSampleLocatableMetadata;\n+import org.broadinstitute.hellbender.tools.copynumber.formats.records.AllelicCount;\n+import org.broadinstitute.hellbender.tools.copynumber.formats.records.CopyRatio;\n+import org.broadinstitute.hellbender.tools.copynumber.utils.segmentation.KernelSegmenterUnitTest;\n+import org.broadinstitute.hellbender.utils.SimpleInterval;\n+import org.testng.Assert;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Random;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+/**\n+ * @author Samuel Lee &lt;slee@broadinstitute.org&gt;\n+ */\n+public final class MultisampleMultidimensionalKernelSegmenterUnitTest extends GATKBaseTest {\n+    private static final int RANDOM_SEED = 1;   //reset seed before each simulated test case\n+\n+    /**\n+     * Generates same Gaussian and test data as {@link KernelSegmenterUnitTest#dataKernelSegmenter()}\n+     * and alternate-allele-fraction-like data (similar to zero-mean multimodal test data\n+     * in {@link KernelSegmenterUnitTest#dataKernelSegmenter()}),\n+     * but introduces further segments by placing data on different chromosomes.\n+     * This is just a combination of the test data from\n+     * {@link CopyRatioKernelSegmenterUnitTest} and {@link AlleleFractionKernelSegmenterUnitTest},\n+     * but for multiple samples and at lower signal-to-noise ratio.\n+     */\n+    @DataProvider(name = \"dataMultisampleMultidimensionalKernelSegmenter\")\n+    public Object[][] dataMultisampleMultidimensionalKernelSegmenter() {\n+        final Random rng = new Random(RANDOM_SEED);\n+\n+        final int numSamples = 20;\n+        final List<CopyRatioCollection> denoisedCopyRatiosPerSample = new ArrayList<>(numSamples);\n+        final List<AllelicCountCollection> allelicCountsPerSample = new ArrayList<>(numSamples);\n+\n+        final int numIntervals = 1000;\n+        final int numAllSites = 1000;\n+        final double noiseLevelCopyRatio = 1.0;\n+        final double noiseLevelAlleleFraction = 0.25;\n+        final double homFraction = 0.025;   //low hom fraction minimizes uncertainty in the changepoints coming from runs of adjacent homs near the changepoints\n+\n+        //generate intervals for copy-ratio data\n+        final List<SimpleInterval> intervals = IntStream.range(0, numIntervals).boxed()\n+                .map(i -> new SimpleInterval(\n+                        Integer.toString(i / 250 + 1),  //start a new chromosome every 250 points, which adds additional changepoints\n+                        (i % 250) * 10 + 1,\n+                        (i % 250) * 10 + 10))           //intervals for copy-ratio data points have length = 10", "originalCommit": "1dba22a70a8207ae438f75f3d3092e3e78f9b3bf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0ODQyMjM4Ng==", "url": "https://github.com/broadinstitute/gatk/pull/6499#discussion_r648422386", "bodyText": "This bit of code has already been copied to the other versions of this test, unfortunately. However, I think the inline comments are sufficient for test code/parameters that are unlikely to be changed. Punting!", "author": "samuelklee", "createdAt": "2021-06-09T15:24:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjI1NDg3OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjI2Mzc5Mg==", "url": "https://github.com/broadinstitute/gatk/pull/6499#discussion_r536263792", "bodyText": "This number seems pretty magical, is there any intuition for why this is a good default value?", "author": "fleharty", "createdAt": "2020-12-04T17:35:59Z", "path": "src/main/java/org/broadinstitute/hellbender/tools/copynumber/arguments/SomaticSegmentationArgumentCollection.java", "diffHunk": "@@ -0,0 +1,90 @@\n+package org.broadinstitute.hellbender.tools.copynumber.arguments;\n+\n+import org.broadinstitute.barclay.argparser.Argument;\n+\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+public class SomaticSegmentationArgumentCollection implements Serializable {\n+    public static final long serialVersionUID = 1L;\n+\n+    //segmentation argument names\n+    public static final String MAXIMUM_NUMBER_OF_SEGMENTS_PER_CHROMOSOME_LONG_NAME = \"maximum-number-of-segments-per-chromosome\";\n+    public static final String KERNEL_VARIANCE_COPY_RATIO_LONG_NAME = \"kernel-variance-copy-ratio\";\n+    public static final String KERNEL_VARIANCE_ALLELE_FRACTION_LONG_NAME = \"kernel-variance-allele-fraction\";\n+    public static final String KERNEL_SCALING_ALLELE_FRACTION_LONG_NAME = \"kernel-scaling-allele-fraction\";\n+    public static final String KERNEL_APPROXIMATION_DIMENSION_LONG_NAME = \"kernel-approximation-dimension\";\n+    public static final String WINDOW_SIZE_LONG_NAME = \"window-size\";\n+    public static final String NUMBER_OF_CHANGEPOINTS_PENALTY_FACTOR_LONG_NAME = \"number-of-changepoints-penalty-factor\";\n+\n+    @Argument(\n+            doc = \"Maximum number of segments allowed per chromosome.\",\n+            fullName = MAXIMUM_NUMBER_OF_SEGMENTS_PER_CHROMOSOME_LONG_NAME,\n+            minValue = 1,\n+            optional = true\n+    )\n+    public int maxNumSegmentsPerChromosome = 1000;\n+\n+    @Argument(\n+            doc = \"Variance of Gaussian kernel for copy-ratio segmentation, if performed.  If zero, a linear kernel will be used.\",\n+            fullName = KERNEL_VARIANCE_COPY_RATIO_LONG_NAME,\n+            minValue = 0.,\n+            optional = true\n+    )\n+    public double kernelVarianceCopyRatio = 0.;\n+\n+    @Argument(\n+            doc = \"Variance of Gaussian kernel for allele-fraction segmentation, if performed.  If zero, a linear kernel will be used.\",\n+            fullName = KERNEL_VARIANCE_ALLELE_FRACTION_LONG_NAME,\n+            minValue = 0.,\n+            optional = true\n+    )\n+    public double kernelVarianceAlleleFraction = 0.025;", "originalCommit": "1dba22a70a8207ae438f75f3d3092e3e78f9b3bf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0ODQxMTA1Ng==", "url": "https://github.com/broadinstitute/gatk/pull/6499#discussion_r648411056", "bodyText": "Not really. Seems to produce reasonable results on typical data. This is the sort of parameter that would need good, representative truth data and some hyperparameter optimization to tune rigorously, as it doesn't have a natural, universal scale.", "author": "samuelklee", "createdAt": "2021-06-09T15:14:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjI2Mzc5Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjI2NjQwMA==", "url": "https://github.com/broadinstitute/gatk/pull/6499#discussion_r536266400", "bodyText": "Why are so many of these ALT_NUCLEOTIDES = N?", "author": "fleharty", "createdAt": "2020-12-04T17:40:11Z", "path": "src/test/resources/org/broadinstitute/hellbender/tools/copynumber/model-segments-wes-tumor-2-allelic-counts-SM-74P4M-v1-chr20-downsampled.deduplicated.allelicCounts.tsv", "diffHunk": "@@ -0,0 +1,200 @@\n+@HD\tVN:1.5\n+@SQ\tSN:20\tLN:1000000\tUR:http://www.broadinstitute.org/ftp/pub/seq/references/Homo_sapiens_assembly19.fasta\tAS:GRCh37\tM5:0dec9660ec1efaaf33281c0d5ea2560f\tSP:Homo Sapiens\n+@RG\tID:GATKCopyNumber\tSM:SM-74P4M-2\n+CONTIG\tPOSITION\tREF_COUNT\tALT_COUNT\tREF_NUCLEOTIDE\tALT_NUCLEOTIDE\n+20\t61098\t0\t0\tC\tN", "originalCommit": "1dba22a70a8207ae438f75f3d3092e3e78f9b3bf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0ODQyNTcyMA==", "url": "https://github.com/broadinstitute/gatk/pull/6499#discussion_r648425720", "bodyText": "I think this is because these sites are uncovered in this downsampled toy data. In any case, neither the REF nor ALT nucleotides are actually used anywhere---only the counts are.", "author": "samuelklee", "createdAt": "2021-06-09T15:28:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjI2NjQwMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDU5NzI3OQ==", "url": "https://github.com/broadinstitute/gatk/pull/6499#discussion_r540597279", "bodyText": "What is N?", "author": "fleharty", "createdAt": "2020-12-11T00:19:02Z", "path": "src/main/java/org/broadinstitute/hellbender/tools/copynumber/arguments/SomaticSegmentationArgumentCollection.java", "diffHunk": "@@ -0,0 +1,90 @@\n+package org.broadinstitute.hellbender.tools.copynumber.arguments;\n+\n+import org.broadinstitute.barclay.argparser.Argument;\n+\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+public class SomaticSegmentationArgumentCollection implements Serializable {\n+    public static final long serialVersionUID = 1L;\n+\n+    //segmentation argument names\n+    public static final String MAXIMUM_NUMBER_OF_SEGMENTS_PER_CHROMOSOME_LONG_NAME = \"maximum-number-of-segments-per-chromosome\";\n+    public static final String KERNEL_VARIANCE_COPY_RATIO_LONG_NAME = \"kernel-variance-copy-ratio\";\n+    public static final String KERNEL_VARIANCE_ALLELE_FRACTION_LONG_NAME = \"kernel-variance-allele-fraction\";\n+    public static final String KERNEL_SCALING_ALLELE_FRACTION_LONG_NAME = \"kernel-scaling-allele-fraction\";\n+    public static final String KERNEL_APPROXIMATION_DIMENSION_LONG_NAME = \"kernel-approximation-dimension\";\n+    public static final String WINDOW_SIZE_LONG_NAME = \"window-size\";\n+    public static final String NUMBER_OF_CHANGEPOINTS_PENALTY_FACTOR_LONG_NAME = \"number-of-changepoints-penalty-factor\";\n+\n+    @Argument(\n+            doc = \"Maximum number of segments allowed per chromosome.\",\n+            fullName = MAXIMUM_NUMBER_OF_SEGMENTS_PER_CHROMOSOME_LONG_NAME,\n+            minValue = 1,\n+            optional = true\n+    )\n+    public int maxNumSegmentsPerChromosome = 1000;\n+\n+    @Argument(\n+            doc = \"Variance of Gaussian kernel for copy-ratio segmentation, if performed.  If zero, a linear kernel will be used.\",\n+            fullName = KERNEL_VARIANCE_COPY_RATIO_LONG_NAME,\n+            minValue = 0.,\n+            optional = true\n+    )\n+    public double kernelVarianceCopyRatio = 0.;\n+\n+    @Argument(\n+            doc = \"Variance of Gaussian kernel for allele-fraction segmentation, if performed.  If zero, a linear kernel will be used.\",\n+            fullName = KERNEL_VARIANCE_ALLELE_FRACTION_LONG_NAME,\n+            minValue = 0.,\n+            optional = true\n+    )\n+    public double kernelVarianceAlleleFraction = 0.025;\n+\n+    @Argument(\n+            doc = \"Relative scaling S of the kernel K_AF for allele-fraction segmentation to the kernel K_CR for copy-ratio segmentation.  \" +\n+                    \"If multidimensional segmentation is performed, the total kernel used will be K_CR + S * K_AF.\",\n+            fullName = KERNEL_SCALING_ALLELE_FRACTION_LONG_NAME,\n+            minValue = 0.,\n+            optional = true\n+    )\n+    public double kernelScalingAlleleFraction = 1.0;\n+\n+    @Argument(\n+            doc = \"Dimension of the kernel approximation.  A subsample containing this number of data points \" +\n+                    \"will be used to construct the approximation for each chromosome.  \" +\n+                    \"If the total number of data points in a chromosome is greater \" +\n+                    \"than this number, then all data points in the chromosome will be used.  \" +\n+                    \"Time complexity scales quadratically and space complexity scales linearly with this parameter.\",\n+            fullName = KERNEL_APPROXIMATION_DIMENSION_LONG_NAME,\n+            minValue = 1,\n+            optional = true\n+    )\n+    public int kernelApproximationDimension = 100;\n+\n+    @Argument(\n+            doc = \"Window sizes to use for calculating local changepoint costs.  \" +\n+                    \"For each window size, the cost for each data point to be a changepoint will be calculated \" +\n+                    \"assuming that the point demarcates two adjacent segments of that size.  \" +\n+                    \"Including small (large) window sizes will increase sensitivity to small (large) events.  \" +\n+                    \"Duplicate values will be ignored.\",\n+            fullName = WINDOW_SIZE_LONG_NAME,\n+            minValue = 1,\n+            optional = true\n+    )\n+    public List<Integer> windowSizes = new ArrayList<>(Arrays.asList(8, 16, 32, 64, 128, 256));\n+\n+    @Argument(\n+            doc = \"Factor A for the penalty on the number of changepoints per chromosome for segmentation.  \" +\n+                    \"Adds a penalty of the form A * C * [1 + log (N / C)], \" +", "originalCommit": "1dba22a70a8207ae438f75f3d3092e3e78f9b3bf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0ODQyODg4MQ==", "url": "https://github.com/broadinstitute/gatk/pull/6499#discussion_r648428881", "bodyText": "Fixed, thanks for catching this! N is the number of data points in the chromosome.", "author": "samuelklee", "createdAt": "2021-06-09T15:32:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDU5NzI3OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDU5ODExNQ==", "url": "https://github.com/broadinstitute/gatk/pull/6499#discussion_r540598115", "bodyText": "Because this is public, I think this should have a simple java doc.", "author": "fleharty", "createdAt": "2020-12-11T00:21:16Z", "path": "src/main/java/org/broadinstitute/hellbender/tools/copynumber/formats/metadata/SimpleLocatableMetadata.java", "diffHunk": "@@ -16,6 +16,10 @@ public SimpleLocatableMetadata(final SAMSequenceDictionary sequenceDictionary) {\n         this.sequenceDictionary = Utils.nonNull(sequenceDictionary);\n     }\n \n+    public SimpleLocatableMetadata(final LocatableMetadata metadata) {", "originalCommit": "1dba22a70a8207ae438f75f3d3092e3e78f9b3bf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0ODQxNjMwNg==", "url": "https://github.com/broadinstitute/gatk/pull/6499#discussion_r648416306", "bodyText": "These are one-liner constructors, which seem pretty self documenting to me? These metadata classes are also relatively internal to the copynumber package, as they're solely used for making sure file-format conventions can be followed. Punting, if you don't mind!", "author": "samuelklee", "createdAt": "2021-06-09T15:19:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDU5ODExNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTAyMDYzMw==", "url": "https://github.com/broadinstitute/gatk/pull/6499#discussion_r541020633", "bodyText": "explicit imports", "author": "fleharty", "createdAt": "2020-12-11T15:18:16Z", "path": "src/main/java/org/broadinstitute/hellbender/tools/copynumber/utils/genotyping/NaiveHeterozygousPileupGenotypingUtils.java", "diffHunk": "@@ -0,0 +1,254 @@\n+package org.broadinstitute.hellbender.tools.copynumber.utils.genotyping;\n+\n+import com.google.common.collect.HashMultiset;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.Multiset;\n+import htsjdk.samtools.util.Locatable;\n+import org.apache.commons.math3.special.Beta;\n+import org.apache.commons.math3.util.FastMath;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.broadinstitute.hellbender.tools.copynumber.arguments.CopyNumberArgumentValidationUtils;\n+import org.broadinstitute.hellbender.tools.copynumber.formats.collections.AbstractLocatableCollection;\n+import org.broadinstitute.hellbender.tools.copynumber.formats.collections.AllelicCountCollection;\n+import org.broadinstitute.hellbender.tools.copynumber.formats.collections.SimpleIntervalCollection;\n+import org.broadinstitute.hellbender.tools.copynumber.formats.metadata.SampleLocatableMetadata;\n+import org.broadinstitute.hellbender.tools.copynumber.formats.records.AllelicCount;\n+import org.broadinstitute.hellbender.utils.SimpleInterval;\n+import org.broadinstitute.hellbender.utils.Utils;\n+import org.broadinstitute.hellbender.utils.param.ParamUtils;\n+\n+import java.util.*;", "originalCommit": "1dba22a70a8207ae438f75f3d3092e3e78f9b3bf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTA0NjA2Mg==", "url": "https://github.com/broadinstitute/gatk/pull/6499#discussion_r541046062", "bodyText": "explicit imports", "author": "fleharty", "createdAt": "2020-12-11T15:53:31Z", "path": "src/main/java/org/broadinstitute/hellbender/tools/copynumber/segmentation/MultisampleMultidimensionalKernelSegmenter.java", "diffHunk": "@@ -0,0 +1,323 @@\n+package org.broadinstitute.hellbender.tools.copynumber.segmentation;\n+\n+import htsjdk.samtools.util.Locatable;\n+import htsjdk.samtools.util.OverlapDetector;\n+import org.apache.commons.math3.distribution.NormalDistribution;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.broadinstitute.hellbender.exceptions.GATKException;\n+import org.broadinstitute.hellbender.tools.copynumber.arguments.CopyNumberArgumentValidationUtils;\n+import org.broadinstitute.hellbender.tools.copynumber.formats.collections.AbstractLocatableCollection;\n+import org.broadinstitute.hellbender.tools.copynumber.formats.collections.AllelicCountCollection;\n+import org.broadinstitute.hellbender.tools.copynumber.formats.collections.CopyRatioCollection;\n+import org.broadinstitute.hellbender.tools.copynumber.formats.collections.SimpleIntervalCollection;\n+import org.broadinstitute.hellbender.tools.copynumber.formats.metadata.LocatableMetadata;\n+import org.broadinstitute.hellbender.tools.copynumber.formats.records.AllelicCount;\n+import org.broadinstitute.hellbender.tools.copynumber.utils.segmentation.KernelSegmenter;\n+import org.broadinstitute.hellbender.utils.SimpleInterval;\n+import org.broadinstitute.hellbender.utils.Utils;\n+import org.broadinstitute.hellbender.utils.param.ParamUtils;\n+\n+import java.util.*;", "originalCommit": "1dba22a70a8207ae438f75f3d3092e3e78f9b3bf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "89944c82241e8e182a20596dac21e0106b85eee6", "url": "https://github.com/broadinstitute/gatk/commit/89944c82241e8e182a20596dac21e0106b85eee6", "message": "Fixed minor documentation and miscellaneous issues.", "committedDate": "2021-06-09T14:56:59Z", "type": "commit"}, {"oid": "38612e35f2b1ff36fc875dca16198aefd1a8f0c5", "url": "https://github.com/broadinstitute/gatk/commit/38612e35f2b1ff36fc875dca16198aefd1a8f0c5", "message": "Extracted somatic CNV argument collections.", "committedDate": "2021-06-09T14:57:01Z", "type": "commit"}, {"oid": "3b75111c598eac9a3017f505ff67fe98b40d5159", "url": "https://github.com/broadinstitute/gatk/commit/3b75111c598eac9a3017f505ff67fe98b40d5159", "message": "Extracted genotyping utility method and added unit tests.", "committedDate": "2021-06-09T14:57:01Z", "type": "commit"}, {"oid": "5419e2e0e9b213197e00cd51669c9a3604e16855", "url": "https://github.com/broadinstitute/gatk/commit/5419e2e0e9b213197e00cd51669c9a3604e16855", "message": "Refactored KernelSegmenters to use MultisampleMultidimensionalKernelSegmenter, removed unnecessary segment classes, and changed bounds of SimpleIntervalCollection and AnnotatedIntervalCollection.", "committedDate": "2021-06-09T14:57:01Z", "type": "commit"}, {"oid": "6ab8b740164eddd9f17f0263367dbf5544c9bebf", "url": "https://github.com/broadinstitute/gatk/commit/6ab8b740164eddd9f17f0263367dbf5544c9bebf", "message": "Added test resources for ModelSegmentsIntegrationTest.", "committedDate": "2021-06-09T14:57:01Z", "type": "commit"}, {"oid": "98cd553d0e391897575c7c255ab866d864cae221", "url": "https://github.com/broadinstitute/gatk/commit/98cd553d0e391897575c7c255ab866d864cae221", "message": "Added utility methods and minor fixes for validation.", "committedDate": "2021-06-09T14:57:01Z", "type": "commit"}, {"oid": "b62fa3de3c9cd22ad610e6e0f7850b041e222122", "url": "https://github.com/broadinstitute/gatk/commit/b62fa3de3c9cd22ad610e6e0f7850b041e222122", "message": "Enabled multisample segmentation in ModelSegments.", "committedDate": "2021-06-09T14:57:01Z", "type": "commit"}, {"oid": "b62fa3de3c9cd22ad610e6e0f7850b041e222122", "url": "https://github.com/broadinstitute/gatk/commit/b62fa3de3c9cd22ad610e6e0f7850b041e222122", "message": "Enabled multisample segmentation in ModelSegments.", "committedDate": "2021-06-09T14:57:01Z", "type": "forcePushed"}, {"oid": "12b003b3e5f566b9c147c1a022a3db6ee8f3fbab", "url": "https://github.com/broadinstitute/gatk/commit/12b003b3e5f566b9c147c1a022a3db6ee8f3fbab", "message": "Optimized imports in copynumber packages using explicit imports.", "committedDate": "2021-06-09T15:00:12Z", "type": "commit"}, {"oid": "eedf857168196622d40322134c94d5f7f7903fd8", "url": "https://github.com/broadinstitute/gatk/commit/eedf857168196622d40322134c94d5f7f7903fd8", "message": "Addressed review comments.", "committedDate": "2021-06-09T15:32:32Z", "type": "commit"}]}