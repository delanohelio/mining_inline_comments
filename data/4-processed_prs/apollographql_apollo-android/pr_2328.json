{"pr_number": 2328, "pr_title": "[Doc] Add a tutorial to the docs", "pr_createdAt": "2020-06-02T16:27:22Z", "pr_url": "https://github.com/apollographql/apollo-android/pull/2328", "timeline": [{"oid": "b5b78618fc419aa22b96ddab2144580a61c3a23b", "url": "https://github.com/apollographql/apollo-android/commit/b5b78618fc419aa22b96ddab2144580a61c3a23b", "message": "Adding a tutorial based on the fullstack tutorial", "committedDate": "2020-06-03T12:39:00Z", "type": "commit"}, {"oid": "51715b81805bbaad348334a98413fbf365cc2823", "url": "https://github.com/apollographql/apollo-android/commit/51715b81805bbaad348334a98413fbf365cc2823", "message": "\"Apollo-Android\" -> \"Apollo Android\"", "committedDate": "2020-06-03T12:45:31Z", "type": "commit"}, {"oid": "51715b81805bbaad348334a98413fbf365cc2823", "url": "https://github.com/apollographql/apollo-android/commit/51715b81805bbaad348334a98413fbf365cc2823", "message": "\"Apollo-Android\" -> \"Apollo Android\"", "committedDate": "2020-06-03T12:45:31Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDY1MTM3Mg==", "url": "https://github.com/apollographql/apollo-android/pull/2328#discussion_r434651372", "bodyText": "with your recent PR I guess this should be changed?", "author": "sav007", "createdAt": "2020-06-03T15:23:10Z", "path": "docs/source/tutorial/02-add-the-graphql-schema.mdx", "diffHunk": "@@ -0,0 +1,29 @@\n+---\n+title: \"2. Add the GraphQL schema\"\n+---\n+\n+This tutorial uses a modified version of the GraphQL server you build as part of [the Apollo full-stack tutorial](https://www.apollographql.com/docs/tutorial/introduction/). You can visit [`https://apollo-fullstack-tutorial.herokuapp.com/`](https://apollo-fullstack-tutorial.herokuapp.com/) to start it up and open the GraphiQL tool to explore its schema.\n+\n+<img src=\"images/graphiql.png\" alt=\"The GraphiQL query explorer\" class=\"screenshot\"/>\n+\n+The [schema](https://graphql.org/learn/schema/) defines which GraphQL operations your server can execute. Click **Docs** on the right-hand side to view a list of types you can query (and the types of fields on those types) along with any possible mutations or subscriptions.\n+\n+<img src=\"images/graphiql_show_schema.png\" alt=\"GraphiQL showing the schema\" class=\"screenshot\">\n+</img>\n+\n+## Download your server's schema\n+\n+Apollo Android requires a schema to generate typesafe models and code from your queries. There are multiple ways to get a schema. For an exemple, you can download a json schema directly from GraphiQL by clicking **Schema > Download** in the right pane.\n+\n+In this tutorial, we will use the `apolloDownloadSchema` task that is created by the plugin automatically. Since GraphQL supports [introspection](https://graphql.org/learn/introspection/), this will work with any GraphQL endpoint.\n+\n+From the root of the project, type:\n+\n+```shell:title=(shell)\n+mkdir -p app/src/main/graphql/com/example/rocketreserver/\n+./gradlew :app:downloadApolloSchema -Pcom.apollographql.apollo.endpoint='https://apollo-fullstack-tutorial.herokuapp.com/' -Pcom.apollographql.apollo.schema='src/main/graphql/com/example/rocketreserver/schema.json'", "originalCommit": "51715b81805bbaad348334a98413fbf365cc2823", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDY1OTc2Mg==", "url": "https://github.com/apollographql/apollo-android/pull/2328#discussion_r434659762", "bodyText": "Yes. I'm still struggling to keep the doc in sync with the releases though so that most likely won't happen until 2.1.1", "author": "martinbonnin", "createdAt": "2020-06-03T15:34:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDY1MTM3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjA4NDE0NA==", "url": "https://github.com/apollographql/apollo-android/pull/2328#discussion_r436084144", "bodyText": "Out of scope: Btw, would it be possible take the schema.json location from the configuration if schemaFile property is set?", "author": "tasomaniac", "createdAt": "2020-06-05T18:10:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDY1MTM3Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDY1MzY1OQ==", "url": "https://github.com/apollographql/apollo-android/pull/2328#discussion_r434653659", "bodyText": "maybe to mention that we recommend to do so, similar to\n\nOkHttp performs best when you create a single OkHttpClient instance and reuse it for all of your HTTP calls. This is because each client holds its own connection pool and thread pools. Reusing connections and threads reduces latency and saves memory. Conversely, creating a client for each request wastes resources on idle pools.", "author": "sav007", "createdAt": "2020-06-03T15:26:13Z", "path": "docs/source/tutorial/04-execute-the-query.mdx", "diffHunk": "@@ -0,0 +1,53 @@\n+---\n+title: \"4. Execute the query\"\n+---\n+\n+To execute the query, you will need to create an `ApolloClient` and make a new call with your query.\n+\n+## Create an ApolloClient\n+\n+Create a new file named Apollo.kt in the `com.example.rocketreserver` package and add the ApolloClient:\n+\n+```kotlin:title=app/src/main/java/com/example/rocketreserver/Apollo.kt\n+val apolloClient = ApolloClient.builder()\n+    .serverUrl(\"https://apollo-fullstack-tutorial.herokuapp.com\")\n+    .build()\n+```\n+\n+`apolloClient` is a top-level variable so that it can be reused from other parts of the app later on.", "originalCommit": "51715b81805bbaad348334a98413fbf365cc2823", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDY1NTgwNg==", "url": "https://github.com/apollographql/apollo-android/pull/2328#discussion_r434655806", "bodyText": "should we cover the errors? To explain that user should check for response.errors?", "author": "sav007", "createdAt": "2020-06-03T15:28:56Z", "path": "docs/source/tutorial/05-connect-queries-to-your-ui.mdx", "diffHunk": "@@ -0,0 +1,61 @@\n+---\n+title: \"5. Connect your queries to your UI\"\n+---\n+\n+In this chapter, you are going to display a list of Launch Sites in a [RecyclerView](https://developer.android.com/guide/topics/ui/layout/recyclerview).\n+\n+## Configure LaunchListAdapter\n+\n+Open `LaunchListAdapter` and add a `launches` property:\n+\n+```kotlin:title=app/src/main/java/com/example/rocketreserver/LaunchListAdapter.kt\n+class LaunchListAdapter(val launches: List<LaunchListQuery.Launch>) :\n+    RecyclerView.Adapter<LaunchListAdapter.ViewHolder>() {\n+```\n+\n+`LaunchListQuery.Launch` is a typesafe generated model from your LaunchList.graphql query.\n+\n+## Bind the data to the UI\n+\n+Use the `launches` property to bind items to your adapter:\n+\n+```kotlin:title=app/src/main/java/com/example/rocketreserver/LaunchListAdapter.kt\n+    override fun getItemCount(): Int {\n+        return launches.size\n+    }\n+\n+    override fun onBindViewHolder(holder: ViewHolder, position: Int) {\n+        val launch = launches.get(position)\n+        holder.binding.site.text = launch.site ?: \"\"\n+    }\n+```\n+\n+## Pass the LaunchListAdapter to the RecyclerView\n+\n+Create a new Adapter and pass it to your recycler view:\n+\n+```kotlin:title=app/src/main/java/com/example/rocketreserver/LaunchListFragment.kt\n+        lifecycleScope.launchWhenResumed {\n+            val response = try {\n+                apolloClient.query(LaunchListQuery()).toDeferred().await()\n+            } catch (e: ApolloException) {\n+                Log.d(\"LaunchList\", \"Failure\", e)\n+                null\n+            }\n+\n+            val launches = response?.data?.launches?.launches?.filterNotNull()\n+            if (launches != null && !response.hasErrors()) {", "originalCommit": "51715b81805bbaad348334a98413fbf365cc2823", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDY2MDQ1MA==", "url": "https://github.com/apollographql/apollo-android/pull/2328#discussion_r434660450", "bodyText": "That'd be great, I'll see if I can trigger some meaningful error", "author": "martinbonnin", "createdAt": "2020-06-03T15:35:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDY1NTgwNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTMzOTc4Mw==", "url": "https://github.com/apollographql/apollo-android/pull/2328#discussion_r435339783", "bodyText": "I added error handling to the details view, it's easy to trigger errors there by passing wrong ids:\nSee https://jolly-kowalevski-0304f0.netlify.app/docs/android/tutorial/08-add-a-details-view/#handle-protocol-errors for a preview", "author": "martinbonnin", "createdAt": "2020-06-04T15:17:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDY1NTgwNg=="}], "type": "inlineReview"}, {"oid": "222e7c9241b69900c3218354b07fa21fffdb7a7d", "url": "https://github.com/apollographql/apollo-android/commit/222e7c9241b69900c3218354b07fa21fffdb7a7d", "message": "add a mention of threadpools/connections", "committedDate": "2020-06-04T13:00:50Z", "type": "commit"}, {"oid": "46ef40563f995f4f797986485a095c69b10b08f0", "url": "https://github.com/apollographql/apollo-android/commit/46ef40563f995f4f797986485a095c69b10b08f0", "message": "add more details about errors", "committedDate": "2020-06-04T15:03:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjA3ODcxNQ==", "url": "https://github.com/apollographql/apollo-android/pull/2328#discussion_r436078715", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * Write queries, mutations and generate the corresponding Kotlin models.\n          \n          \n            \n            * Write queries, mutations to generate the corresponding Kotlin models.", "author": "tasomaniac", "createdAt": "2020-06-05T18:01:18Z", "path": "docs/source/tutorial/00-introduction.mdx", "diffHunk": "@@ -0,0 +1,34 @@\n+---\n+title: \"0. Introduction\"\n+---\n+\n+Welcome! This tutorial demonstrates adding the Apollo Android SDK to an app to communicate with a GraphQL server. In this tutorial you will learn how to:\n+\n+* Download as schema.\n+* Write queries, mutations and generate the corresponding Kotlin models.", "originalCommit": "46ef40563f995f4f797986485a095c69b10b08f0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjEwNjU5NQ==", "url": "https://github.com/apollographql/apollo-android/pull/2328#discussion_r436106595", "bodyText": "^ minor disagreement on English structure here - probably a better change if you want it is Write queries and mutations to generate the corresponding Kotlin models.", "author": "designatednerd", "createdAt": "2020-06-05T18:54:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjA3ODcxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjExNjM3Ng==", "url": "https://github.com/apollographql/apollo-android/pull/2328#discussion_r436116376", "bodyText": "Agreed. That's better", "author": "tasomaniac", "createdAt": "2020-06-05T19:16:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjA3ODcxNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjA4MDEzNA==", "url": "https://github.com/apollographql/apollo-android/pull/2328#discussion_r436080134", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Build and run the project, you should see an empty app. That's good !\n          \n          \n            \n            Build and run the project, you should see an empty app. That's good!", "author": "tasomaniac", "createdAt": "2020-06-05T18:04:17Z", "path": "docs/source/tutorial/01-configure-project.mdx", "diffHunk": "@@ -0,0 +1,98 @@\n+---\n+title: \"1. Configure your project\"\n+---\n+\n+In this step, you will import the starter project and add the Apollo Android SDK to it.\n+\n+## Clone the starter project\n+\n+```\n+git clone https://github.com/apollographql/apollo-android-tutorial\n+cd apollo-android-tutorial\n+git checkout initial\n+```\n+\n+At any time, if you want to check the finished result, you can checkout the `master` branch that contains all the code to book your seat.\n+\n+## Open the project in Android Studio\n+\n+Android Studio will take some time to index the contents of the project. Take some time to look around. You should see 3 Fragments:\n+\n+* `LaunchListFragment` is the first fragment. You will display a list of launches there.\n+* `LaunchDetailsFragment` will display details about a launch and give you the opportunity to book a seat.\n+* `LoginFragment` will allow you to log in before booking the seat.\n+\n+Build and run the project, you should see an empty app. That's good !", "originalCommit": "46ef40563f995f4f797986485a095c69b10b08f0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjA4MDczNw==", "url": "https://github.com/apollographql/apollo-android/pull/2328#discussion_r436080737", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    classpath(\"com.android.tools.build:gradle:3.6.3\")\n          \n          \n            \n                    classpath(\"com.android.tools.build:gradle:4.0.0\")", "author": "tasomaniac", "createdAt": "2020-06-05T18:05:32Z", "path": "docs/source/tutorial/01-configure-project.mdx", "diffHunk": "@@ -0,0 +1,98 @@\n+---\n+title: \"1. Configure your project\"\n+---\n+\n+In this step, you will import the starter project and add the Apollo Android SDK to it.\n+\n+## Clone the starter project\n+\n+```\n+git clone https://github.com/apollographql/apollo-android-tutorial\n+cd apollo-android-tutorial\n+git checkout initial\n+```\n+\n+At any time, if you want to check the finished result, you can checkout the `master` branch that contains all the code to book your seat.\n+\n+## Open the project in Android Studio\n+\n+Android Studio will take some time to index the contents of the project. Take some time to look around. You should see 3 Fragments:\n+\n+* `LaunchListFragment` is the first fragment. You will display a list of launches there.\n+* `LaunchDetailsFragment` will display details about a launch and give you the opportunity to book a seat.\n+* `LoginFragment` will allow you to log in before booking the seat.\n+\n+Build and run the project, you should see an empty app. That's good !\n+\n+<img src=\"images/initial.png\" alt=\"The initial state of the project!\" class=\"screenshot\" width=\"300\"/>\n+\n+Now you will add Apollo Android to the project.\n+\n+## Get the latest version of Apollo Android\n+\n+You can find the latest version of Apollo Android from the [github releases page](https://github.com/apollographql/apollo-android/releases). It is also displayed at the top of the [apollo-android repo](https://github.com/apollographql/apollo-android/)\n+\n+This tutorial uses `2.1.0` because it is the latest version at the time of writing but feel free to use a more recent version if one is available when you're reading this.\n+\n+## Add the plugin to the buildscript\n+\n+Open the `build.gradle.kts` at the root of the project and add the Apollo Gradle plugin to the buildscript classpath:\n+\n+```kotlin:title=build.gradle.kts\n+buildscript {\n+    repositories {\n+        google()\n+        jcenter()\n+    }\n+\n+    dependencies {\n+        classpath(\"com.android.tools.build:gradle:3.6.3\")", "originalCommit": "46ef40563f995f4f797986485a095c69b10b08f0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjA4MTIwOA==", "url": "https://github.com/apollographql/apollo-android/pull/2328#discussion_r436081208", "bodyText": "Hmm \ud83e\udd14 if we apply via plugin syntax, we actually do not have to define the classpath above, right?", "author": "tasomaniac", "createdAt": "2020-06-05T18:06:26Z", "path": "docs/source/tutorial/01-configure-project.mdx", "diffHunk": "@@ -0,0 +1,98 @@\n+---\n+title: \"1. Configure your project\"\n+---\n+\n+In this step, you will import the starter project and add the Apollo Android SDK to it.\n+\n+## Clone the starter project\n+\n+```\n+git clone https://github.com/apollographql/apollo-android-tutorial\n+cd apollo-android-tutorial\n+git checkout initial\n+```\n+\n+At any time, if you want to check the finished result, you can checkout the `master` branch that contains all the code to book your seat.\n+\n+## Open the project in Android Studio\n+\n+Android Studio will take some time to index the contents of the project. Take some time to look around. You should see 3 Fragments:\n+\n+* `LaunchListFragment` is the first fragment. You will display a list of launches there.\n+* `LaunchDetailsFragment` will display details about a launch and give you the opportunity to book a seat.\n+* `LoginFragment` will allow you to log in before booking the seat.\n+\n+Build and run the project, you should see an empty app. That's good !\n+\n+<img src=\"images/initial.png\" alt=\"The initial state of the project!\" class=\"screenshot\" width=\"300\"/>\n+\n+Now you will add Apollo Android to the project.\n+\n+## Get the latest version of Apollo Android\n+\n+You can find the latest version of Apollo Android from the [github releases page](https://github.com/apollographql/apollo-android/releases). It is also displayed at the top of the [apollo-android repo](https://github.com/apollographql/apollo-android/)\n+\n+This tutorial uses `2.1.0` because it is the latest version at the time of writing but feel free to use a more recent version if one is available when you're reading this.\n+\n+## Add the plugin to the buildscript\n+\n+Open the `build.gradle.kts` at the root of the project and add the Apollo Gradle plugin to the buildscript classpath:\n+\n+```kotlin:title=build.gradle.kts\n+buildscript {\n+    repositories {\n+        google()\n+        jcenter()\n+    }\n+\n+    dependencies {\n+        classpath(\"com.android.tools.build:gradle:3.6.3\")\n+        // ...\n+        classpath(\"com.apollographql.apollo:apollo-gradle-plugin:2.1.0\")\n+    }\n+}\n+```\n+\n+## Apply the plugin\n+\n+Apply the Apollo plugin in `app/build.gradle.kts`. There are two `build.gradle.kts` in the project. Make sure to use the one in the `app` directory this time. The Apollo plugin ID is `com.apollographql.apollo`.\n+\n+```kotlin:title=app/build.gradle.kts\n+plugins {\n+    id(\"com.android.application\")\n+    // ...\n+    id(\"com.apollographql.apollo\")", "originalCommit": "46ef40563f995f4f797986485a095c69b10b08f0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjM0MTc4NQ==", "url": "https://github.com/apollographql/apollo-android/pull/2328#discussion_r436341785", "bodyText": "Good catch, thanks \ud83d\udc4d", "author": "martinbonnin", "createdAt": "2020-06-07T09:06:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjA4MTIwOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjA4ODk5NA==", "url": "https://github.com/apollographql/apollo-android/pull/2328#discussion_r436088994", "bodyText": "Applies to all pages, I was thinking we can put the last part into its own section like ### Next step. Not sure if it is necessary. Just an idea :)", "author": "tasomaniac", "createdAt": "2020-06-05T18:17:19Z", "path": "docs/source/tutorial/03-write-your-first-query.mdx", "diffHunk": "@@ -0,0 +1,108 @@\n+---\n+title: \"3. Write your first query\"\n+---\n+\n+The most common GraphQL operation is the **query**, which requests data from your graph in a structure that conforms to your server's schema. If you return to [the GraphiQL query explorer](https://apollo-fullstack-tutorial.herokuapp.com) for your server, you can see available queries in the Schema tab you opened earlier.\n+\n+## Prototype your query in GraphiQL\n+\n+Click on the `launches` query at the top for details about it.\n+\n+<img src=\"images/launches_detail.png\" class=\"screenshot\" alt=\"Detail about launches query\"/>\n+\n+In the right panel, you see both the query itself and information about what the query returns. You can use this information to write a query you will eventually add to your app.\n+\n+In the left pane, start typing an empty query:\n+\n+```graphql:title=(GraphiQL)\n+query LaunchList {\n+}\n+```\n+\n+Apollo Android requires every query to have a name (even though this isn't required by the GraphQL spec). The query above has the name `LaunchList`.\n+\n+Next, between the query's curly braces, start typing `la`. An autocomplete box pops up and shows you options based on what's in the schema:\n+\n+<img src=\"images/graphiql_autocomplete.png\" class=\"screenshot\" alt=\"Example of autocomplete\"/>\n+\n+GraphiQL is a great tool for building and verifying queries so you don't have to repeatedly rebuild your project in Android Studio to try out changes.\n+\n+As the schema indicates, the `launches` query returns a `LaunchConnection` object. This object includes a list of launches, along with fields related to pagination (`cursor` and `hasMore`). The query you write indicates exactly which fields of this `LaunchConnection` object you want to be returned, like so:\n+\n+```graphql:title=(GraphiQL)\n+query LaunchList {\n+  launches {\n+    cursor\n+    hasMore\n+  }\n+}\n+```\n+\n+If you run this query by pressing the play button in GraphiQL, the query returns results as a JSON object on the right-hand side of the page:\n+\n+<img src=\"images/completed_basic_query.png\" class=\"screenshot\" alt=\"Query JSON in GraphiQL\"/>\n+\n+This query executes successfully, but it doesn't include any information about the `launches`! That's because we didn't include the necessary field in our query.\n+\n+Update your query to fetch the `id` and `site` properties for each launch, like so:\n+\n+```graphql:title=(GraphiQL)\n+query LaunchList {\n+  launches {\n+    cursor\n+    hasMore\n+    launches {\n+      id\n+      site\n+    }\n+  }\n+}\n+```\n+\n+Run the query again, and you'll now see that in addition to the information you got back before, you're also getting a list of launches with their ID and site information:\n+\n+<img src=\"images/completed_id_query.png\" class=\"screenshot\" alt=\"Updated query JSON in GraphiQL\"/>\n+\n+## Add the query to your project\n+\n+Now that your query is fetching the right data, head back to Android Studio.\n+\n+1. Right click on the `src/main/graphql/com/example/rocketserver` folder. This folder should contain your `schema.json`. Select **New > File**:\n+\n+<img src=\"images/new_file.png\" class=\"screenshot\" alt=\"New GraphQL file\"/>\n+\n+2. Name the file `LaunchList.graphql`. Make sure it's saved at the same level as your `schema.json` file.\n+\n+3. Copy your final query from GraphiQL and paste it into `LaunchList.graphql`.\n+\n+```graphql:title=app/src/main/graphql/com/example/rocketreserver/LaunchList.graphql\n+query LaunchList {\n+  launches {\n+    cursor\n+    hasMore\n+    launches {\n+      id\n+      site\n+    }\n+  }\n+}\n+```\n+\n+## Generate the model\n+\n+Build your project to have the Apollo Android plugin generate your first model. The plugin defines a task named `generateApolloSources` to generate the models. You don't need to run it. It will be executed automatically when building your project.\n+\n+> **Note**: autocomplete won't work until you build your project. That is because autocomplete requires the generated code to work. Each time you change your queries, you should rebuild your project for Android Studio to pick up the modifications.\n+\n+## Examine generated code\n+\n+From the menu, select **Navigate > Class** and start typing `LaunchList`, Android Studio should suggest to open `LaunchList.kt`. The file should be in `build/generated/source/apollo/debug/service/com/example/rocketreserver/LaunchListQuery.kt`.\n+\n+The `LaunchListQuery.kt` file defines a root class, `LaunchListQuery`, with many nested classes. If you compare the classes to the JSON data returned in GraphiQL, you see that the structure matches. These classes include properties only for the fields that your query requests.\n+\n+Try commenting out the `id` property in `LaunchList.graphql`, saving, then building again. When the build completes, the innermost `Launch` now only includes the built-in `__typename` and the requested `site` property.\n+\n+Uncomment `id` and rebuild to restore the property.\n+\n+Now that you've generated code and had a chance to see what's in there, it's time to [execute the query](04-execute-the-query)!", "originalCommit": "46ef40563f995f4f797986485a095c69b10b08f0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjM0MjU4MA==", "url": "https://github.com/apollographql/apollo-android/pull/2328#discussion_r436342580", "bodyText": "I took that from the iOS tutorial. I kind of like that the sentence happens in the flow and doesn't require an additional step in the right menu. Having the \"next\" on the right would somehow duplicate the index on the left. No real strong feeling about it though, happy to change it if that can help following the tutorial.", "author": "martinbonnin", "createdAt": "2020-06-07T09:16:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjA4ODk5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAzMTYyOA==", "url": "https://github.com/apollographql/apollo-android/pull/2328#discussion_r437031628", "bodyText": "Yeah, it was just an idea. If iOS is doing like this, I would say consistency is good :)", "author": "tasomaniac", "createdAt": "2020-06-08T22:16:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjA4ODk5NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjA4OTUyNQ==", "url": "https://github.com/apollographql/apollo-android/pull/2328#discussion_r436089525", "bodyText": "For these, we could maybe annotate them via \u26a0\ufe0f  or \u2139\ufe0f emoji.", "author": "tasomaniac", "createdAt": "2020-06-05T18:18:24Z", "path": "docs/source/tutorial/04-execute-the-query.mdx", "diffHunk": "@@ -0,0 +1,49 @@\n+---\n+title: \"4. Execute the query\"\n+---\n+\n+To execute the query, you will need to create an `ApolloClient` and make a new call with your query.\n+\n+## Create an ApolloClient\n+\n+Create a new file named Apollo.kt in the `com.example.rocketreserver` package and add the ApolloClient:\n+\n+```kotlin:title=app/src/main/java/com/example/rocketreserver/Apollo.kt\n+val apolloClient = ApolloClient.builder()\n+    .serverUrl(\"https://apollo-fullstack-tutorial.herokuapp.com\")\n+    .build()\n+```\n+\n+`apolloClient` is a top-level variable so that it can be reused from other parts of the app later on for better performance. Reusing the `apolloClient` allows to reuse the underlying OkHttp instance and the associated threadpools and connections.", "originalCommit": "46ef40563f995f4f797986485a095c69b10b08f0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjEwNzI4OQ==", "url": "https://github.com/apollographql/apollo-android/pull/2328#discussion_r436107289", "bodyText": "I think in the iOS stuff I've been using:\n> **NOTE**: Something important please read it I beg you\nformat", "author": "designatednerd", "createdAt": "2020-06-05T18:55:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjA4OTUyNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjA5MDU5Mg==", "url": "https://github.com/apollographql/apollo-android/pull/2328#discussion_r436090592", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            class LaunchListAdapter(val launches: List<LaunchListQuery.Launch>) :\n          \n          \n            \n                RecyclerView.Adapter<LaunchListAdapter.ViewHolder>() {\n          \n          \n            \n            class LaunchListAdapter(\n          \n          \n            \n                val launches: List<LaunchListQuery.Launch>\n          \n          \n            \n            ) : RecyclerView.Adapter<LaunchListAdapter.ViewHolder>() {", "author": "tasomaniac", "createdAt": "2020-06-05T18:20:41Z", "path": "docs/source/tutorial/05-connect-queries-to-your-ui.mdx", "diffHunk": "@@ -0,0 +1,61 @@\n+---\n+title: \"5. Connect your queries to your UI\"\n+---\n+\n+In this chapter, you are going to display a list of Launch Sites in a [RecyclerView](https://developer.android.com/guide/topics/ui/layout/recyclerview).\n+\n+## Configure LaunchListAdapter\n+\n+Open `LaunchListAdapter` and add a `launches` property:\n+\n+```kotlin:title=app/src/main/java/com/example/rocketreserver/LaunchListAdapter.kt\n+class LaunchListAdapter(val launches: List<LaunchListQuery.Launch>) :\n+    RecyclerView.Adapter<LaunchListAdapter.ViewHolder>() {", "originalCommit": "46ef40563f995f4f797986485a095c69b10b08f0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjA5MTAyNA==", "url": "https://github.com/apollographql/apollo-android/pull/2328#discussion_r436091024", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Create a new Adapter and pass it to your recycler view:\n          \n          \n            \n            Create a new Adapter and pass it to your RecyclerView:", "author": "tasomaniac", "createdAt": "2020-06-05T18:21:35Z", "path": "docs/source/tutorial/05-connect-queries-to-your-ui.mdx", "diffHunk": "@@ -0,0 +1,61 @@\n+---\n+title: \"5. Connect your queries to your UI\"\n+---\n+\n+In this chapter, you are going to display a list of Launch Sites in a [RecyclerView](https://developer.android.com/guide/topics/ui/layout/recyclerview).\n+\n+## Configure LaunchListAdapter\n+\n+Open `LaunchListAdapter` and add a `launches` property:\n+\n+```kotlin:title=app/src/main/java/com/example/rocketreserver/LaunchListAdapter.kt\n+class LaunchListAdapter(val launches: List<LaunchListQuery.Launch>) :\n+    RecyclerView.Adapter<LaunchListAdapter.ViewHolder>() {\n+```\n+\n+`LaunchListQuery.Launch` is a typesafe generated model from your LaunchList.graphql query.\n+\n+## Bind the data to the UI\n+\n+Use the `launches` property to bind items to your adapter:\n+\n+```kotlin:title=app/src/main/java/com/example/rocketreserver/LaunchListAdapter.kt\n+    override fun getItemCount(): Int {\n+        return launches.size\n+    }\n+\n+    override fun onBindViewHolder(holder: ViewHolder, position: Int) {\n+        val launch = launches.get(position)\n+        holder.binding.site.text = launch.site ?: \"\"\n+    }\n+```\n+\n+## Pass the LaunchListAdapter to the RecyclerView\n+\n+Create a new Adapter and pass it to your recycler view:", "originalCommit": "46ef40563f995f4f797986485a095c69b10b08f0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjA5NDUxOA==", "url": "https://github.com/apollographql/apollo-android/pull/2328#discussion_r436094518", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * Application errors. In this case, `response.errors` will contain the application errors and response.data might be null\n          \n          \n            \n            * Application errors. In this case, `response.errors` will contain the application errors and `response.data` might be null", "author": "tasomaniac", "createdAt": "2020-06-05T18:28:53Z", "path": "docs/source/tutorial/08-add-a-details-view.mdx", "diffHunk": "@@ -0,0 +1,226 @@\n+---\n+title: \"8. Add a details view\"\n+---\n+\n+In this section, you will write your second GraphQL query to request details about a single launch.\n+\n+## Open the details fragment from the list\n+\n+In `LaunchListAdapter.kt`, add a click listener:\n+\n+```kotlin:title=app/src/main/java/com/example/rocketreserver/LaunchListAdapter.kt\n+    var onEndOfListReached: (() -> Unit)? = null\n+    var onItemClicked: ((LaunchListQuery.Launch) -> Unit)? = null\n+\n+    override fun onBindViewHolder(holder: ViewHolder, position: Int) {\n+\n+        // ...\n+\n+        holder.binding.root.setOnClickListener {\n+            onItemClicked?.invoke(launch)\n+        }\n+    }\n+```\n+\n+In `LaunchListFragment.kt`, register a click listener and navigate to the details screen:\n+\n+```kotlin:title=app/src/main/java/com/example/rocketreserver/LaunchListFragment.kt\n+    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n+\n+        // ...\n+\n+        adapter.onItemClicked = { launch ->\n+            findNavController().navigate(\n+                LaunchListFragmentDirections.openLaunchDetails(launchId = launch.id)\n+            )\n+        }\n+    }\n+```\n+\n+## Create the details query\n+\n+Create a new GraphQL query named `LaunchDetails.graphql`.\n+\n+As you did for $cursor, add a variable named `id`. Notice that this variable is a non-optional type this time. You won't be able to pass `null` like for $cursor.\n+\n+Since it is a details view, request the `LARGE` size for the missionPatch and also request the rocket type and name:\n+\n+```graphql:title=app/src/main/graphql/com/example/rocketreserver/LaunchDetails.graphql\n+query LaunchDetails($id:ID!) {\n+  launch(id: $id) {\n+    id\n+    site\n+    mission {\n+      name\n+      missionPatch(size:LARGE)\n+    }\n+    rocket {\n+      name\n+      type\n+    }\n+    isBooked\n+  }\n+}\n+```\n+\n+Remember you can always experiment in GraphiQL and type `Ctrl + Space` in GraphiQL to have a list of fields that are available.\n+\n+## Show a loading ProgressBar\n+\n+In `LaunchDetailsFragment.kt`, override `onViewCreated` and launch a new coroutine\n+\n+This time, display a progressBar while the query executes:\n+\n+```kotlin:title=app/src/main/java/com/example/rocketreserver/LaunchDetailsFragment.kt\n+    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n+        super.onViewCreated(view, savedInstanceState)\n+\n+        lifecycleScope.launchWhenResumed {\n+            binding.bookButton.visibility = View.GONE\n+            binding.bookProgressBar.visibility = View.GONE\n+            binding.progressBar.visibility = View.VISIBLE\n+            binding.error.visibility = View.GONE\n+\n+            val response = apolloClient.query(LaunchDetailsQuery(id = args.launchId)).toDeferred().await()\n+```\n+\n+## Handle protocol errors\n+\n+As you execute your query, two types of errors can happen:\n+\n+* Protocol errors such as HTTP errors or Json parsing errors will throw a `ApolloException`\n+* Application errors. In this case, `response.errors` will contain the application errors and response.data might be null", "originalCommit": "46ef40563f995f4f797986485a095c69b10b08f0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjA5NzU2MQ==", "url": "https://github.com/apollographql/apollo-android/pull/2328#discussion_r436097561", "bodyText": "I realized that you also use requireContext to get apolloClient in earlier tutorials but context is introduced just now. Is that something to fix?", "author": "tasomaniac", "createdAt": "2020-06-05T18:35:05Z", "path": "docs/source/tutorial/10-authenticate-your-queries.mdx", "diffHunk": "@@ -0,0 +1,180 @@\n+---\n+title: \"10. Authenticate your queries\"\n+---\n+\n+In this section, you will book a flight \ud83d\ude80! Booking a flight requires being authenticated to the server so the correct person is sent to space! To do that, and since Apollo Android is using [OkHttp](https://square.github.io/okhttp/) to handle HTTP requests, you will leverage the OkHttp [Interceptors](https://square.github.io/okhttp/interceptors/) to add headers to your GraphQL requests.\n+\n+## Add the interceptor\n+\n+In `Apollo.kt`, add the `AuthorizationInterceptor` class:\n+\n+```kotlin:title=app/src/main/kotlin/com/example/rocketreserver/Apollo.kt\n+private class AuthorizationInterceptor(val context: Context): Interceptor {\n+    override fun intercept(chain: Interceptor.Chain): Response {\n+        val request = chain.request().newBuilder()\n+            .addHeader(\"Authorization\", User.getToken(context) ?: \"\")\n+            .build()\n+\n+        return chain.proceed(request)\n+    }\n+}\n+```\n+\n+This interceptor will append a `\"Authorization: $token\"` HTTP header to every request.\n+\n+## Use the interceptor\n+\n+Create a custom OkHttpClient that will use this interceptor and pass it to the ApolloClient:\n+\n+```kotlin:title=app/src/main/kotlin/com/example/rocketreserver/Apollo.kt\n+    instance = ApolloClient.builder()\n+        .serverUrl(\"https://apollo-fullstack-tutorial.herokuapp.com/\")\n+        .okHttpClient(OkHttpClient.Builder()\n+            .addInterceptor(AuthorizationInterceptor(context))\n+            .build()\n+        )\n+        .build()\n+```\n+\n+Notice that `Apollo.kt` now requires a context to create the interceptor and read the token from the `EncryptedSharedPreferences`. `apolloClient` cannot be a top level variable anymore so transform it to a top-level method that takes a `context` parameter instead:", "originalCommit": "46ef40563f995f4f797986485a095c69b10b08f0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjM0NTExMg==", "url": "https://github.com/apollographql/apollo-android/pull/2328#discussion_r436345112", "bodyText": "Yup, my mistake, I copy/pasted code from the final state too early in the tutorial. I fixed one instance in step 8, \"add a details view\". Were there other instances?", "author": "martinbonnin", "createdAt": "2020-06-07T09:48:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjA5NzU2MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAzMjA2MA==", "url": "https://github.com/apollographql/apollo-android/pull/2328#discussion_r437032060", "bodyText": "I cannot see them anymore. All good.", "author": "tasomaniac", "createdAt": "2020-06-08T22:17:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjA5NzU2MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjA5OTAyNw==", "url": "https://github.com/apollographql/apollo-android/pull/2328#discussion_r436099027", "bodyText": "Would it be ok to mention that users are better to use a dependency injection to manage the singleton apolloClient instance and make it clear that this is done like this only for sample purposes.", "author": "tasomaniac", "createdAt": "2020-06-05T18:37:58Z", "path": "docs/source/tutorial/10-authenticate-your-queries.mdx", "diffHunk": "@@ -0,0 +1,180 @@\n+---\n+title: \"10. Authenticate your queries\"\n+---\n+\n+In this section, you will book a flight \ud83d\ude80! Booking a flight requires being authenticated to the server so the correct person is sent to space! To do that, and since Apollo Android is using [OkHttp](https://square.github.io/okhttp/) to handle HTTP requests, you will leverage the OkHttp [Interceptors](https://square.github.io/okhttp/interceptors/) to add headers to your GraphQL requests.\n+\n+## Add the interceptor\n+\n+In `Apollo.kt`, add the `AuthorizationInterceptor` class:\n+\n+```kotlin:title=app/src/main/kotlin/com/example/rocketreserver/Apollo.kt\n+private class AuthorizationInterceptor(val context: Context): Interceptor {\n+    override fun intercept(chain: Interceptor.Chain): Response {\n+        val request = chain.request().newBuilder()\n+            .addHeader(\"Authorization\", User.getToken(context) ?: \"\")\n+            .build()\n+\n+        return chain.proceed(request)\n+    }\n+}\n+```\n+\n+This interceptor will append a `\"Authorization: $token\"` HTTP header to every request.\n+\n+## Use the interceptor\n+\n+Create a custom OkHttpClient that will use this interceptor and pass it to the ApolloClient:\n+\n+```kotlin:title=app/src/main/kotlin/com/example/rocketreserver/Apollo.kt\n+    instance = ApolloClient.builder()\n+        .serverUrl(\"https://apollo-fullstack-tutorial.herokuapp.com/\")\n+        .okHttpClient(OkHttpClient.Builder()\n+            .addInterceptor(AuthorizationInterceptor(context))\n+            .build()\n+        )\n+        .build()\n+```\n+\n+Notice that `Apollo.kt` now requires a context to create the interceptor and read the token from the `EncryptedSharedPreferences`. `apolloClient` cannot be a top level variable anymore so transform it to a top-level method that takes a `context` parameter instead:\n+\n+```kotlin:title=app/src/main/kotlin/com/example/rocketreserver/Apollo.kt\n+fun apolloClient(context: Context): ApolloClient {\n+    return ApolloClient.builder()\n+        .serverUrl(\"https://apollo-fullstack-tutorial.herokuapp.com/\")\n+        .okHttpClient(OkHttpClient.Builder()\n+            .addInterceptor(AuthorizationInterceptor(context))\n+            .build()\n+        )\n+        .build()\n+}\n+```\n+\n+Replace all usages of `apolloClient` with `apolloClient(context)`. There is one instance in each fragment:\n+\n+```kotlin\n+// LaunchListFragment\n+apolloClient(requireContext()).query(LaunchListQuery(cursor = Input.fromNullable(cursor))).toDeferred().await()\n+\n+// LaunchDetailsFragment\n+apolloClient(requireContext()).query(LaunchDetailsQuery(id = args.launchId)).toDeferred().await()\n+\n+// LoginFragment\n+apolloClient(requireContext()).mutate(LoginMutation(email = Input.fromNullable(email))).toDeferred().await()\n+\n+```\n+\n+Make the `apolloClient` a singleton\n+\n+There is no need to create a new instance of the apolloClient for each GraphQL request. You can reuse the `apolloClient`:", "originalCommit": "46ef40563f995f4f797986485a095c69b10b08f0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjM0NTQyNw==", "url": "https://github.com/apollographql/apollo-android/pull/2328#discussion_r436345427", "bodyText": "This is a part I wasn't sure how to explain best. I'd like to avoid adding Dagger or any other DI framework to the tutorial but this is better to explicit that this is for sample use only.\nI added that note, let me know how it sounds:\n**Note**: The singleton is handled here manually for sample purposes. In a real life application, you would certainly use a dependency injection framework such as `Dagger` or `Koin`.", "author": "martinbonnin", "createdAt": "2020-06-07T09:52:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjA5OTAyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAzMTM0Mg==", "url": "https://github.com/apollographql/apollo-android/pull/2328#discussion_r437031342", "bodyText": "For sure. This sounds good.", "author": "tasomaniac", "createdAt": "2020-06-08T22:15:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjA5OTAyNw=="}], "type": "inlineReview"}, {"oid": "9585abf7229c1a5acd54a5f01b18e83b6a8d8a3f", "url": "https://github.com/apollographql/apollo-android/commit/9585abf7229c1a5acd54a5f01b18e83b6a8d8a3f", "message": "rephrase", "committedDate": "2020-06-07T09:02:48Z", "type": "commit"}, {"oid": "ead3c1490334afdca49b69287a04cfdd0f66aee8", "url": "https://github.com/apollographql/apollo-android/commit/ead3c1490334afdca49b69287a04cfdd0f66aee8", "message": "Update docs/source/tutorial/01-configure-project.mdx\n\nCo-authored-by: Said Tahsin Dane <tasomaniac@gmail.com>", "committedDate": "2020-06-07T09:03:57Z", "type": "commit"}, {"oid": "e940334867d528d0fb1a016a220f9146066d2f9a", "url": "https://github.com/apollographql/apollo-android/commit/e940334867d528d0fb1a016a220f9146066d2f9a", "message": "Merge branch 'add-tutorial' of https://github.com/apollographql/apollo-android into add-tutorial", "committedDate": "2020-06-07T09:04:20Z", "type": "commit"}, {"oid": "2c88bc0370f75ffdebf230e98f70e06d0c7eb4cb", "url": "https://github.com/apollographql/apollo-android/commit/2c88bc0370f75ffdebf230e98f70e06d0c7eb4cb", "message": "Update docs/source/tutorial/01-configure-project.mdx\n\nCo-authored-by: Said Tahsin Dane <tasomaniac@gmail.com>", "committedDate": "2020-06-07T09:04:30Z", "type": "commit"}, {"oid": "54eaed8f0cd3d3fd93cf6c4ee4dc674920bc9d9a", "url": "https://github.com/apollographql/apollo-android/commit/54eaed8f0cd3d3fd93cf6c4ee4dc674920bc9d9a", "message": "Merge branch 'add-tutorial' of https://github.com/apollographql/apollo-android into add-tutorial", "committedDate": "2020-06-07T09:04:47Z", "type": "commit"}, {"oid": "89a2897ba0c9bf16eb2e208e0c94922c078f5f33", "url": "https://github.com/apollographql/apollo-android/commit/89a2897ba0c9bf16eb2e208e0c94922c078f5f33", "message": "no need to add to the buildscript if using the plugins block", "committedDate": "2020-06-07T09:06:12Z", "type": "commit"}, {"oid": "7b313719c5d3bd8430c20bc97cb74141f432f40b", "url": "https://github.com/apollographql/apollo-android/commit/7b313719c5d3bd8430c20bc97cb74141f432f40b", "message": "emphasis", "committedDate": "2020-06-07T09:16:53Z", "type": "commit"}, {"oid": "02b5d90a64ea4e3de42831f566bb8c3b01e738ae", "url": "https://github.com/apollographql/apollo-android/commit/02b5d90a64ea4e3de42831f566bb8c3b01e738ae", "message": "Update docs/source/tutorial/05-connect-queries-to-your-ui.mdx\n\nCo-authored-by: Said Tahsin Dane <tasomaniac@gmail.com>", "committedDate": "2020-06-07T09:17:16Z", "type": "commit"}, {"oid": "3cf15027f4c5f6221933388c9c1b0514ca6c9ea6", "url": "https://github.com/apollographql/apollo-android/commit/3cf15027f4c5f6221933388c9c1b0514ca6c9ea6", "message": "Update docs/source/tutorial/08-add-a-details-view.mdx\n\nCo-authored-by: Said Tahsin Dane <tasomaniac@gmail.com>", "committedDate": "2020-06-07T09:17:30Z", "type": "commit"}, {"oid": "bf020228557e21d88e269ec2b6ebc79445fde677", "url": "https://github.com/apollographql/apollo-android/commit/bf020228557e21d88e269ec2b6ebc79445fde677", "message": "Update docs/source/tutorial/05-connect-queries-to-your-ui.mdx\n\nCo-authored-by: Said Tahsin Dane <tasomaniac@gmail.com>", "committedDate": "2020-06-07T09:17:40Z", "type": "commit"}, {"oid": "467512ac3a4e33663553579c9bb24e1e1489f9a7", "url": "https://github.com/apollographql/apollo-android/commit/467512ac3a4e33663553579c9bb24e1e1489f9a7", "message": "do not introduce `requireContext` too early", "committedDate": "2020-06-07T09:47:03Z", "type": "commit"}, {"oid": "55df998263b2f26b336d8d7d530cb569d22b01aa", "url": "https://github.com/apollographql/apollo-android/commit/55df998263b2f26b336d8d7d530cb569d22b01aa", "message": "add a note about DI", "committedDate": "2020-06-07T09:51:52Z", "type": "commit"}, {"oid": "858963f58f43e11c9362b50ae0de49b9214c8062", "url": "https://github.com/apollographql/apollo-android/commit/858963f58f43e11c9362b50ae0de49b9214c8062", "message": "Merge branch 'add-tutorial' of https://github.com/apollographql/apollo-android into add-tutorial", "committedDate": "2020-06-07T09:52:10Z", "type": "commit"}, {"oid": "45cb254bca380656747fb2f3fb51a8822f450770", "url": "https://github.com/apollographql/apollo-android/commit/45cb254bca380656747fb2f3fb51a8822f450770", "message": "rephrase", "committedDate": "2020-06-07T09:53:30Z", "type": "commit"}, {"oid": "2228916d0b56f8e935ee042bb5e69ffbc02918af", "url": "https://github.com/apollographql/apollo-android/commit/2228916d0b56f8e935ee042bb5e69ffbc02918af", "message": "Cursory edit to Android tutorial (#2353)\n\nCo-authored-by: Stephen Barlow <stephenbarlow@APOLLO-StephenBarlow.attlocal.net>", "committedDate": "2020-06-10T22:34:59Z", "type": "commit"}]}