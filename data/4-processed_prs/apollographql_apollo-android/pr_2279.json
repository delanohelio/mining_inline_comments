{"pr_number": 2279, "pr_title": "Feature to generate GraphQL enum types as sealed classes", "pr_createdAt": "2020-05-17T18:25:39Z", "pr_url": "https://github.com/apollographql/apollo-android/pull/2279", "timeline": [{"oid": "d0226dc2aad206576681d89d0df6fc47fb1ea8b6", "url": "https://github.com/apollographql/apollo-android/commit/d0226dc2aad206576681d89d0df6fc47fb1ea8b6", "message": "Feature to generate GraphQL enum types as sealed classes\n\nThis is a part one: update Kotlin compiler to generate GraphQL enum type as sealed class.\n\nPart of https://github.com/apollographql/apollo-android/issues/2065", "committedDate": "2020-05-17T18:25:14Z", "type": "commit"}, {"oid": "b71e89073bd092ce581a462c9b2b254c4b9b22ec", "url": "https://github.com/apollographql/apollo-android/commit/b71e89073bd092ce581a462c9b2b254c4b9b22ec", "message": "Second part: add gradle plugin configuration", "committedDate": "2020-05-18T03:50:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQxMTk0Nw==", "url": "https://github.com/apollographql/apollo-android/pull/2279#discussion_r426411947", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              /**\n          \n          \n            \n               * Whether to generate GraphQL enum types by matching as Kotlin sealed classes if they match one of provided regex patterns.\n          \n          \n            \n               * By default any GraphQL enum type is generated as `enum class`.\n          \n          \n            \n               */\n          \n          \n            \n              /**\n          \n          \n            \n               * A list of [Regex] patterns for GraphQL enums that should be generated as Kotlin sealed classes instead\n          \n          \n            \n               * of the default Kotlin enums.\n          \n          \n            \n               * Use this if you want your client to have access to the rawValue of the enum. This can be useful if new\n          \n          \n            \n               * GraphQL enums are added but the client was compiled against an older schema that doesn't have knowledge\n          \n          \n            \n               * of the new enums.\n          \n          \n            \n               */", "author": "martinbonnin", "createdAt": "2020-05-18T07:12:45Z", "path": "apollo-gradle-plugin/src/main/kotlin/com/apollographql/apollo/gradle/api/CompilerParams.kt", "diffHunk": "@@ -154,4 +154,10 @@ interface CompilerParams {\n    * Default value: false\n    */\n   val generateAsInternal: Property<Boolean>\n+\n+  /**\n+   * Whether to generate GraphQL enum types by matching as Kotlin sealed classes if they match one of provided regex patterns.\n+   * By default any GraphQL enum type is generated as `enum class`.\n+   */", "originalCommit": "b71e89073bd092ce581a462c9b2b254c4b9b22ec", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQxMzE5MA==", "url": "https://github.com/apollographql/apollo-android/pull/2279#discussion_r426413190", "bodyText": "Nit: Maybe name this enumAsSealedClassPatterns? generate is used above for Boolean properties and making the property plural would also hint that it is a List.\nEDIT: I just saw the property is named enumAsSealedClassPatternFilters  in GraphQLCompiler.Arguments. Maybe use that everywhere ?", "author": "martinbonnin", "createdAt": "2020-05-18T07:15:36Z", "path": "apollo-gradle-plugin/src/main/kotlin/com/apollographql/apollo/gradle/api/CompilerParams.kt", "diffHunk": "@@ -154,4 +154,10 @@ interface CompilerParams {\n    * Default value: false\n    */\n   val generateAsInternal: Property<Boolean>\n+\n+  /**\n+   * Whether to generate GraphQL enum types by matching as Kotlin sealed classes if they match one of provided regex patterns.\n+   * By default any GraphQL enum type is generated as `enum class`.\n+   */\n+  val generateEnumAsSealedClass: ListProperty<String>", "originalCommit": "b71e89073bd092ce581a462c9b2b254c4b9b22ec", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc3Mzc2Nw==", "url": "https://github.com/apollographql/apollo-android/pull/2279#discussion_r426773767", "bodyText": "Yeah, hard to come up with proper name my thought enumAsSealedClassPatternFilters   is ok for internal usage but was not great for public API.\ngenerateSealedClassForEnums, sealedClassForEnums, enumsAsClasses, enumAsSealedClassPatterns?\nOr do you think enumAsSealedClassPatternFilters should be fine?", "author": "sav007", "createdAt": "2020-05-18T17:07:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQxMzE5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjgwNzA3MQ==", "url": "https://github.com/apollographql/apollo-android/pull/2279#discussion_r426807071", "bodyText": "I also think that the one used in the code internally is not super clear for external facing extension. We can make it plural easily to indicate that. Since they're enum in GraphQL convention, I like starting with generateEnums\nWhat about\ngenerateEnumsAsSealedClassesFor\n\nor\ngenerateSealedClassesForEnums\n\n2nd one is already suggested by Ivan. First one is little uglier but make it clear that it expect complex input \ud83d\ude0a", "author": "tasomaniac", "createdAt": "2020-05-18T18:09:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQxMzE5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjgxOTE4MA==", "url": "https://github.com/apollographql/apollo-android/pull/2279#discussion_r426819180", "bodyText": "Maybe something that describes the end functionality instead of the codegen details ?\nexposeRawValueForUnknownEnums\n\nor\nexposeRawValueForEnumsMatching", "author": "martinbonnin", "createdAt": "2020-05-18T18:33:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQxMzE5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkzMjk0Nw==", "url": "https://github.com/apollographql/apollo-android/pull/2279#discussion_r426932947", "bodyText": "but then it's not clear that the end result is going to be a sealed class generated instead of regular enum, I think it's important to have sealedClass in there.\n1 - enumsAsSealedClassesMatching\n2 - enumsAsClassesMatching\n3 - sealedClassesForEnums\n4 - sealedClassesForEnumsMatching\nAnother option if this make sense make it lambda:\napollo {\n  enumsAsSealedClasses {\n    matching = [\".*\"]\n  }\n}", "author": "sav007", "createdAt": "2020-05-18T22:48:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQxMzE5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzEwOTExMw==", "url": "https://github.com/apollographql/apollo-android/pull/2279#discussion_r427109113", "bodyText": "I like sealedClassesForEnumsMatching", "author": "martinbonnin", "createdAt": "2020-05-19T08:08:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQxMzE5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzE0NjQ3OA==", "url": "https://github.com/apollographql/apollo-android/pull/2279#discussion_r427146478", "bodyText": "I definitely like that too. \ud83d\udc4d", "author": "tasomaniac", "createdAt": "2020-05-19T09:05:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQxMzE5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzE5NTMzOA==", "url": "https://github.com/apollographql/apollo-android/pull/2279#discussion_r427195338", "bodyText": "We got a winner \ud83c\udf89 \ud83d\ude03", "author": "martinbonnin", "createdAt": "2020-05-19T10:25:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQxMzE5MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQxNTU0NA==", "url": "https://github.com/apollographql/apollo-android/pull/2279#discussion_r426415544", "bodyText": "Nice \ud83d\ude03", "author": "martinbonnin", "createdAt": "2020-05-18T07:20:42Z", "path": "apollo-compiler/src/test/kotlin/com/apollographql/apollo/compiler/CodegenTest.kt", "diffHunk": "@@ -96,13 +96,19 @@ class CodeGenTest(private val folder: File) {\n         jvmTarget = \"1.8\"\n         sources = kotlinFiles\n \n-        val expectedWarnings = folder.name in listOf(\"deprecation\", \"custom_scalar_type_warnings\")\n+        val expectedWarnings = folder.name in listOf(\"deprecation\", \"custom_scalar_type_warnings\", \"arguments_complex\", \"arguments_simple\")\n         allWarningsAsErrors = expectedWarnings.not()\n         inheritClassPath = true\n         messageOutputStream = System.out // see diagnostics in real time\n       }.compile()\n \n-      assertThat(result.exitCode).isEqualTo(KotlinCompilation.ExitCode.OK)\n+      if (result.exitCode != KotlinCompilation.ExitCode.OK) {\n+        val compilationErrorMessages = \"\\\\ne: .*\\\\n+\".toRegex().find(result.messages)?.groupValues ?: emptyList()\n+        val errorMessages = compilationErrorMessages.joinToString(prefix = \"\\n\", separator = \"\\n\", postfix = \"\\n\") {\n+          \"`${it.replace(\"\\n\", \"\")}`\"\n+        }\n+        fail(\"Failed to compile generated Kotlin files due to compiler errors: $errorMessages\")", "originalCommit": "b71e89073bd092ce581a462c9b2b254c4b9b22ec", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQxNjc0Mg==", "url": "https://github.com/apollographql/apollo-android/pull/2279#discussion_r426416742", "bodyText": "Is the check for isNotEmpty() needed here ? I would expect any to return false on empty lists.", "author": "martinbonnin", "createdAt": "2020-05-18T07:23:11Z", "path": "apollo-compiler/src/main/kotlin/com/apollographql/apollo/compiler/codegen/kotlin/EnumType.kt", "diffHunk": "@@ -4,19 +4,32 @@ import com.apollographql.apollo.compiler.applyIf\n import com.apollographql.apollo.compiler.ast.EnumType\n import com.squareup.kotlinpoet.*\n \n-internal fun EnumType.typeSpec(generateAsInternal: Boolean = false) =\n-    TypeSpec\n-        .enumBuilder(name)\n-        .applyIf(description.isNotBlank()) { addKdoc(\"%L\\n\", description) }\n-        .applyIf(generateAsInternal) { addModifiers(KModifier.INTERNAL) }\n-        .primaryConstructor(primaryConstructorSpec)\n-        .addProperty(rawValuePropertySpec)\n-        .apply {\n-          values.forEach { value -> addEnumConstant(value.constName, value.enumConstTypeSpec) }\n-          addEnumConstant(\"UNKNOWN__\", unknownEnumConstTypeSpec)\n-        }\n-        .addType(companionObjectSpec)\n-        .build()\n+internal fun EnumType.typeSpec(\n+    generateAsInternal: Boolean = false,\n+    enumAsSealedClassPatternFilters: List<Regex>\n+): TypeSpec {\n+  val asSealedClass = enumAsSealedClassPatternFilters.isNotEmpty() && enumAsSealedClassPatternFilters.any { pattern ->", "originalCommit": "b71e89073bd092ce581a462c9b2b254c4b9b22ec", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "0a679f85077dd14f378dbadb444fabdf27c89ccd", "url": "https://github.com/apollographql/apollo-android/commit/0a679f85077dd14f378dbadb444fabdf27c89ccd", "message": "Update apollo-gradle-plugin/src/main/kotlin/com/apollographql/apollo/gradle/api/CompilerParams.kt\n\nCo-authored-by: Martin Bonnin <martin@mbonnin.net>", "committedDate": "2020-05-18T16:57:26Z", "type": "commit"}, {"oid": "62fd4f6abeea6c87ae0424bb8746fdc5d0be0aa4", "url": "https://github.com/apollographql/apollo-android/commit/62fd4f6abeea6c87ae0424bb8746fdc5d0be0aa4", "message": "Feedback", "committedDate": "2020-05-19T15:16:22Z", "type": "commit"}, {"oid": "62fd4f6abeea6c87ae0424bb8746fdc5d0be0aa4", "url": "https://github.com/apollographql/apollo-android/commit/62fd4f6abeea6c87ae0424bb8746fdc5d0be0aa4", "message": "Feedback", "committedDate": "2020-05-19T15:16:22Z", "type": "forcePushed"}]}