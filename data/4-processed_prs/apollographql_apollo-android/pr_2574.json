{"pr_number": 2574, "pr_title": "Deprecate toDeferred and toJob in favor of await.", "pr_createdAt": "2020-09-12T18:17:06Z", "pr_url": "https://github.com/apollographql/apollo-android/pull/2574", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzQzNTk0Mw==", "url": "https://github.com/apollographql/apollo-android/pull/2574#discussion_r487435943", "bodyText": "You should have some kind of boolean to check if you already resumed once, otherwise an exception will be thrown second time the callback is called (I assume it's possible)", "author": "recheej", "createdAt": "2020-09-12T18:30:23Z", "path": "apollo-coroutines-support/src/main/kotlin/com/apollographql/apollo/coroutines/CoroutinesExtensions.kt", "diffHunk": "@@ -73,35 +73,27 @@ fun <T> ApolloQueryWatcher<T>.toFlow(): Flow<Response<T>> = callbackFlow {\n \n \n /**\n- * Converts an [ApolloCall] to an [Deferred]. This is a convenience method that will only return the first value emitted.\n- * If the more than one response is required, for an example to retrieve cached and network response, use [toFlow] instead.\n+ * Suspends the [ApolloCall] until it completes and returns the value on success or throws an exception on failure.\n+ * The [ApolloCall] is cancelled when the coroutine running the operation is cancelled as well.\n  *\n  * @param <T>  the value type.\n- * @return the deferred\n+ * @return the response on success.\n+ * @throws ApolloException on failure.\n  */\n-fun <T> ApolloCall<T>.toDeferred(): Deferred<Response<T>> {\n-  val deferred = CompletableDeferred<Response<T>>()\n-\n-  deferred.invokeOnCompletion {\n-    if (deferred.isCancelled) {\n-      cancel()\n-    }\n-  }\n+suspend fun <T> ApolloCall<T>.await(): Response<T> = suspendCancellableCoroutine { cont ->\n   enqueue(object : ApolloCall.Callback<T>() {\n     override fun onResponse(response: Response<T>) {\n-      if (deferred.isActive) {\n-        deferred.complete(response)\n-      }\n+      cont.resume(response)", "originalCommit": "e48511201835d0cef67061732218c25f48742f9d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzQ0NjQzNg==", "url": "https://github.com/apollographql/apollo-android/pull/2574#discussion_r487446436", "bodyText": "Thanks for your notice, I've adapted the code a bit, hope it's fine now", "author": "R4md4c", "createdAt": "2020-09-12T20:37:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzQzNTk0Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzQ0ODE2NQ==", "url": "https://github.com/apollographql/apollo-android/pull/2574#discussion_r487448165", "bodyText": "You should also guard here too I guess since you can possibly get multiple failures.", "author": "recheej", "createdAt": "2020-09-12T20:57:28Z", "path": "apollo-coroutines-support/src/main/kotlin/com/apollographql/apollo/coroutines/CoroutinesExtensions.kt", "diffHunk": "@@ -73,35 +73,33 @@ fun <T> ApolloQueryWatcher<T>.toFlow(): Flow<Response<T>> = callbackFlow {\n \n \n /**\n- * Converts an [ApolloCall] to an [Deferred]. This is a convenience method that will only return the first value emitted.\n- * If the more than one response is required, for an example to retrieve cached and network response, use [toFlow] instead.\n+ * Suspends the [ApolloCall] until it completes and returns the value on success or throws an exception on failure.\n+ * The [ApolloCall] is cancelled when the coroutine running the operation is cancelled as well.\n  *\n  * @param <T>  the value type.\n- * @return the deferred\n+ * @return the response on success.\n+ * @throws ApolloException on failure.\n  */\n-fun <T> ApolloCall<T>.toDeferred(): Deferred<Response<T>> {\n-  val deferred = CompletableDeferred<Response<T>>()\n-\n-  deferred.invokeOnCompletion {\n-    if (deferred.isCancelled) {\n-      cancel()\n-    }\n-  }\n+suspend fun <T> ApolloCall<T>.await(): Response<T> = suspendCancellableCoroutine { cont ->\n   enqueue(object : ApolloCall.Callback<T>() {\n+\n+    private var resumeIsCalled = false\n+\n     override fun onResponse(response: Response<T>) {\n-      if (deferred.isActive) {\n-        deferred.complete(response)\n+      if (!resumeIsCalled) {\n+        cont.resume(response)\n+        resumeIsCalled = true\n       }\n     }\n \n     override fun onFailure(e: ApolloException) {\n-      if (deferred.isActive) {\n-        deferred.completeExceptionally(e)\n-      }\n+      cont.resumeWithException(e)", "originalCommit": "2411d3b6f3e68199d1fe89112d241e907d8cefea", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzQ0ODMyOQ==", "url": "https://github.com/apollographql/apollo-android/pull/2574#discussion_r487448329", "bodyText": "(or one success and one failure)", "author": "recheej", "createdAt": "2020-09-12T20:59:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzQ0ODE2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzQ0OTMzMA==", "url": "https://github.com/apollographql/apollo-android/pull/2574#discussion_r487449330", "bodyText": "From the documentation it says onFailure can be called at most one time, so I don't think another guard is needed here.\n\n  \n    \n      apollo-android/apollo-runtime/src/main/java/com/apollographql/apollo/ApolloCall.java\n    \n    \n         Line 103\n      in\n      9513025\n    \n    \n    \n    \n\n        \n          \n                * Will be called at most one time. It is considered a terminal event. After called,", "author": "R4md4c", "createdAt": "2020-09-12T21:12:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzQ0ODE2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzQ1MDA5MQ==", "url": "https://github.com/apollographql/apollo-android/pull/2574#discussion_r487450091", "bodyText": "Ah ok got it. What about the one failure and n successes? Can that happen?", "author": "recheej", "createdAt": "2020-09-12T21:22:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzQ0ODE2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzQ1MDM5OQ==", "url": "https://github.com/apollographql/apollo-android/pull/2574#discussion_r487450399", "bodyText": "The documentation says that onFailure is a terminal that means if it happens, onSuccess will never be called, however I'm not sure if we can get onSuccess prior the onFailure or not. Better to hear from the maintainers in that case.", "author": "R4md4c", "createdAt": "2020-09-12T21:26:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzQ0ODE2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzQ1MDU5NQ==", "url": "https://github.com/apollographql/apollo-android/pull/2574#discussion_r487450595", "bodyText": "Got it thanks for clarification! I'll leave up to to you guys who know more", "author": "recheej", "createdAt": "2020-09-12T21:29:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzQ0ODE2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzQ1NzU1MQ==", "url": "https://github.com/apollographql/apollo-android/pull/2574#discussion_r487457551", "bodyText": "onSuccess will be called several time if using the cache (one for the cache response, another for the network response for an exemple). If fetching from the network fails, there will be one onSuccess and one onFailure call.\nUsers needing to use cache responses should really usetoFlow instead but await() should not crash if that ever happens.\nAlso, I think there's no guarantee what thread the callbacks are called in so resumeIsCalled would have to be thread-safe. Maybe something like:\nresumeIsCalled = AtomicBoolean()\nif (!resumeIsCalled.getAndSet(true)) {\n   cont.resume(response)\n}", "author": "martinbonnin", "createdAt": "2020-09-12T23:03:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzQ0ODE2NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzQ0ODIzMQ==", "url": "https://github.com/apollographql/apollo-android/pull/2574#discussion_r487448231", "bodyText": "I'm not familiar with this library tbh, but reading the documentation for ApolloPrefetch says it should only be called back once so you shouldn't need this. Then again adding the check doesn't hurt. I'll let library maintainers say whether this can be called multiple times or not.", "author": "recheej", "createdAt": "2020-09-12T20:58:47Z", "path": "apollo-coroutines-support/src/main/kotlin/com/apollographql/apollo/coroutines/CoroutinesExtensions.kt", "diffHunk": "@@ -141,35 +139,34 @@ fun <T> ApolloSubscriptionCall<T>.toFlow(): Flow<Response<T>> = callbackFlow {\n }\n \n /**\n- * Converts an [ApolloPrefetch] to [Job].\n+ * Suspends the [ApolloPrefetch] until it completes and returns the value on success or throws an exception on failure.\n+ * The [ApolloPrefetch] is cancelled when the coroutine running the operation is cancelled as well.\n  *\n  * @param <T>  the value type.\n- * @return the converted job\n+ * @return the response on success.\n+ * @throws ApolloException on failure.\n  */\n-fun ApolloPrefetch.toJob(): Job {\n-  val deferred = CompletableDeferred<Unit>()\n-\n-  deferred.invokeOnCompletion {\n-    if (deferred.isCancelled) {\n-      cancel()\n-    }\n-  }\n+suspend fun ApolloPrefetch.await(): Unit = suspendCancellableCoroutine { cont ->\n \n   enqueue(object : ApolloPrefetch.Callback() {\n+\n+    private var resumedIsCalled = false", "originalCommit": "2411d3b6f3e68199d1fe89112d241e907d8cefea", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzQ1NzgxOQ==", "url": "https://github.com/apollographql/apollo-android/pull/2574#discussion_r487457819", "bodyText": "I'm not 100% sure either. I'd vote to play it safe and keep the guard there.", "author": "martinbonnin", "createdAt": "2020-09-12T23:07:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzQ0ODIzMQ=="}], "type": "inlineReview"}, {"oid": "52bf16a4981fdd89999685d35c81e1e2f0f3eba9", "url": "https://github.com/apollographql/apollo-android/commit/52bf16a4981fdd89999685d35c81e1e2f0f3eba9", "message": "Remove toDeferred in favor of await.\n\nCloses #2571", "committedDate": "2020-09-13T12:24:31Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU1MDkyMA==", "url": "https://github.com/apollographql/apollo-android/pull/2574#discussion_r487550920", "bodyText": "is there any reason to not use cont.isCancelled? There was an issue with RC but looks like it was fixed Kotlin/kotlinx.coroutines#830\nSame below", "author": "sav007", "createdAt": "2020-09-13T16:44:16Z", "path": "apollo-coroutines-support/src/main/kotlin/com/apollographql/apollo/coroutines/CoroutinesExtensions.kt", "diffHunk": "@@ -72,13 +76,49 @@ fun <T> ApolloQueryWatcher<T>.toFlow(): Flow<Response<T>> = callbackFlow {\n }\n \n \n+/**\n+ * Suspends the [ApolloCall] until it completes and returns the value on success or throws an exception on failure.\n+ * The [ApolloCall] is cancelled when the coroutine running the operation is cancelled as well.\n+ *\n+ * This is a convenience method that will only return the first value emitted. If more than one\n+ * response is required, for an example to retrieve cached and network response, use [toFlow] instead.\n+ *\n+ * @param <T>  the value type.\n+ * @return the response on success.\n+ * @throws ApolloException on failure.\n+ */\n+suspend fun <T> ApolloCall<T>.await(): Response<T> = suspendCancellableCoroutine { cont ->\n+\n+  cont.invokeOnCancellation {\n+    cancel()\n+  }\n+\n+  enqueue(object : ApolloCall.Callback<T>() {\n+\n+    private val wasCalled = AtomicBoolean(false)", "originalCommit": "52bf16a4981fdd89999685d35c81e1e2f0f3eba9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU1MzM4OA==", "url": "https://github.com/apollographql/apollo-android/pull/2574#discussion_r487553388", "bodyText": "This boolean was introduced to guard against calling resume multiple times to prevent an exception getting thrown for resuming with multiple values instead of one, same below.\nSo I'm not sure how isCancelled  would solve this particular case.", "author": "R4md4c", "createdAt": "2020-09-13T17:09:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU1MDkyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU4MDk5Mw==", "url": "https://github.com/apollographql/apollo-android/pull/2574#discussion_r487580993", "bodyText": "Sorry, my bad. I misinterpreted the description of the issue.", "author": "sav007", "createdAt": "2020-09-13T21:43:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU1MDkyMA=="}], "type": "inlineReview"}]}