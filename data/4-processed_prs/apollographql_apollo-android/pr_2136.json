{"pr_number": 2136, "pr_title": "Kotlin Multiplatform Sample", "pr_createdAt": "2020-04-05T00:40:53Z", "pr_url": "https://github.com/apollographql/apollo-android/pull/2136", "timeline": [{"oid": "3a22b3df8760b61b79868983b13d56a02d757864", "url": "https://github.com/apollographql/apollo-android/commit/3a22b3df8760b61b79868983b13d56a02d757864", "message": "Add sample for Kotlin MPP", "committedDate": "2020-04-04T23:02:29Z", "type": "commit"}, {"oid": "6d6f752aebf7bdad8857d952508b0d2fda68d458", "url": "https://github.com/apollographql/apollo-android/commit/6d6f752aebf7bdad8857d952508b0d2fda68d458", "message": "Rename .java to .kt", "committedDate": "2020-04-04T23:02:38Z", "type": "commit"}, {"oid": "0dd61cd6fa869b581c5c3c50740b7a500656de52", "url": "https://github.com/apollographql/apollo-android/commit/0dd61cd6fa869b581c5c3c50740b7a500656de52", "message": "Convert RealResponseReader to Kotlin to workaround AbstractMethodError issues\n\nhttps://youtrack.jetbrains.com/issue/KT-18489", "committedDate": "2020-04-04T23:02:38Z", "type": "commit"}, {"oid": "fcd5ffde1dce0eda6ca3a86bd32b2af2cccc6772", "url": "https://github.com/apollographql/apollo-android/commit/fcd5ffde1dce0eda6ca3a86bd32b2af2cccc6772", "message": "Add iOS sample just printing into console for now", "committedDate": "2020-04-05T00:34:50Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzY3MjE3OA==", "url": "https://github.com/apollographql/apollo-android/pull/2136#discussion_r403672178", "bodyText": "Not sure I follow. Why removing that/Why did we need that in the first place ?", "author": "martinbonnin", "createdAt": "2020-04-05T09:07:55Z", "path": "apollo-api/src/commonMain/kotlin/com/apollographql/apollo/api/internal/ResponseReader.kt", "diffHunk": "@@ -21,7 +20,6 @@ interface ResponseReader {\n \n   fun <T : Any> readObject(field: ResponseField, objectReader: ObjectReader<T>): T?\n \n-  @JvmSynthetic", "originalCommit": "0dd61cd6fa869b581c5c3c50740b7a500656de52", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzY3MjgzOA==", "url": "https://github.com/apollographql/apollo-android/pull/2136#discussion_r403672838", "bodyText": "This somehow allowed us not to implement these methods in Java since they were not visible to Jvm. I think using JvmDefault while targeting 1.8 would work but that's not available in Kotlin common.", "author": "tasomaniac", "createdAt": "2020-04-05T09:13:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzY3MjE3OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzY3MjI3Nw==", "url": "https://github.com/apollographql/apollo-android/pull/2136#discussion_r403672277", "bodyText": "So we don't need the jetbrainsAnnotations at compileTime anymore ?", "author": "martinbonnin", "createdAt": "2020-04-05T09:08:42Z", "path": "apollo-runtime/build.gradle.kts", "diffHunk": "@@ -1,13 +1,14 @@\n plugins {\n   `java-library`\n+  kotlin(\"jvm\")\n }\n \n dependencies {\n-  add(\"api\", project(\":apollo-api\")) // apollo-espresso-support uses some apollo-api internals\n-  add(\"api\", project(\":apollo-http-cache-api\"))\n-  add(\"api\", groovy.util.Eval.x(project, \"x.dep.okHttp.okHttp\"))\n-  add(\"compileOnly\", groovy.util.Eval.x(project, \"x.dep.jetbrainsAnnotations\"))\n-  add(\"implementation\", groovy.util.Eval.x(project, \"x.dep.cache\"))\n+  api(project(\":apollo-api\"))\n+  api(project(\":apollo-http-cache-api\"))\n+  api(groovy.util.Eval.x(project, \"x.dep.kotlin.stdLib\"))\n+  api(groovy.util.Eval.x(project, \"x.dep.okHttp.okHttp\"))\n+  implementation(groovy.util.Eval.x(project, \"x.dep.cache\"))", "originalCommit": "0dd61cd6fa869b581c5c3c50740b7a500656de52", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzY3MjUyMg==", "url": "https://github.com/apollographql/apollo-android/pull/2136#discussion_r403672522", "bodyText": "Once we add Kotlin we don't need them anymore. They're actually transitively added already.", "author": "tasomaniac", "createdAt": "2020-04-05T09:10:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzY3MjI3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzY3NDc4NQ==", "url": "https://github.com/apollographql/apollo-android/pull/2136#discussion_r403674785", "bodyText": "Could we remove the annotations part in the README.md ?https://github.com/apollographql/apollo-android/blame/master/README.md#L53\nThis has always confused me.", "author": "martinbonnin", "createdAt": "2020-04-05T09:31:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzY3MjI3Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzY3MjMyMQ==", "url": "https://github.com/apollographql/apollo-android/pull/2136#discussion_r403672321", "bodyText": "\ud83d\udc4d", "author": "martinbonnin", "createdAt": "2020-04-05T09:08:56Z", "path": "gradle/dependencies.gradle", "diffHunk": "@@ -1,6 +1,6 @@\n def versions = [\n     minAndroidPlugin      : '3.4.2',\n-    androidPlugin         : '3.6.1',\n+    androidPlugin         : '3.6.2',", "originalCommit": "0dd61cd6fa869b581c5c3c50740b7a500656de52", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzY3MjUzOQ==", "url": "https://github.com/apollographql/apollo-android/pull/2136#discussion_r403672539", "bodyText": "Maybe put this in apollo-android/build.gradle.kts next to the others ? \n  \n    \n      apollo-android/build.gradle.kts\n    \n    \n         Line 57\n      in\n      3e37125\n    \n    \n    \n    \n\n        \n          \n           plugins.withType(com.android.build.gradle.BasePlugin::class.java) {", "author": "martinbonnin", "createdAt": "2020-04-05T09:10:45Z", "path": "apollo-api/build.gradle.kts", "diffHunk": "@@ -58,6 +60,10 @@ kotlin {\n   }\n }\n \n+tasks.withType<KotlinCompile> {\n+  kotlinOptions.jvmTarget = \"1.8\"\n+}\n+", "originalCommit": "3a22b3df8760b61b79868983b13d56a02d757864", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzY3Mjc4NQ==", "url": "https://github.com/apollographql/apollo-android/pull/2136#discussion_r403672785", "bodyText": "No plugin marker for the kotlin-android-extensions plugin I guess ?\nAlso, I'd like to remove this to use ViewBinding instead at some point but definitely not the priority.", "author": "martinbonnin", "createdAt": "2020-04-05T09:13:27Z", "path": "samples/multiplatform/kmp-android-app/build.gradle.kts", "diffHunk": "@@ -0,0 +1,52 @@\n+import org.jetbrains.kotlin.gradle.tasks.KotlinCompile\n+\n+plugins {\n+    id(\"com.android.application\")\n+    id(\"org.jetbrains.kotlin.multiplatform\")\n+}\n+apply(plugin = \"kotlin-android-extensions\")", "originalCommit": "3a22b3df8760b61b79868983b13d56a02d757864", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzY4NjIwMg==", "url": "https://github.com/apollographql/apollo-android/pull/2136#discussion_r403686202", "bodyText": "3cb048c", "author": "tasomaniac", "createdAt": "2020-04-05T11:10:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzY3Mjc4NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzY3MzA2MA==", "url": "https://github.com/apollographql/apollo-android/pull/2136#discussion_r403673060", "bodyText": "Do we actually need the multiplatform plugin here ? This module will always be just Android, right ?", "author": "martinbonnin", "createdAt": "2020-04-05T09:15:40Z", "path": "samples/multiplatform/kmp-android-app/build.gradle.kts", "diffHunk": "@@ -0,0 +1,52 @@\n+import org.jetbrains.kotlin.gradle.tasks.KotlinCompile\n+\n+plugins {\n+    id(\"com.android.application\")\n+    id(\"org.jetbrains.kotlin.multiplatform\")", "originalCommit": "fcd5ffde1dce0eda6ca3a86bd32b2af2cccc6772", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzY4NjE4OQ==", "url": "https://github.com/apollographql/apollo-android/pull/2136#discussion_r403686189", "bodyText": "Addressed here: 3cb048c", "author": "tasomaniac", "createdAt": "2020-04-05T11:10:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzY3MzA2MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzY3MzQ4Nw==", "url": "https://github.com/apollographql/apollo-android/pull/2136#discussion_r403673487", "bodyText": "It would be nice to move the ApolloCoroutinesService class to the multiplatform lib module since it is common logic between android/ios.", "author": "martinbonnin", "createdAt": "2020-04-05T09:19:13Z", "path": "samples/multiplatform/kmp-android-app/src/main/kotlin/com/apollographql/apollo/kmpsample/data/ApolloCoroutinesService.kt", "diffHunk": "@@ -0,0 +1,49 @@\n+package com.apollographql.apollo.kmpsample.data\n+\n+import com.apollographql.apollo.ApolloClient\n+import com.apollographql.apollo.api.Response\n+import com.apollographql.apollo.coroutines.toDeferred\n+import com.apollographql.apollo.kmpsample.fragment.RepositoryFragment\n+import com.apollographql.apollo.kmpsample.GithubRepositoriesQuery\n+import com.apollographql.apollo.kmpsample.GithubRepositoryCommitsQuery\n+import com.apollographql.apollo.kmpsample.GithubRepositoryDetailQuery\n+import com.apollographql.apollo.kmpsample.fragment.RepositoryDetail\n+import com.apollographql.apollo.kmpsample.type.OrderDirection\n+import com.apollographql.apollo.kmpsample.type.PullRequestState\n+import com.apollographql.apollo.kmpsample.type.RepositoryOrderField\n+import kotlinx.coroutines.invoke\n+\n+/**\n+ * An implementation of a [GitHubDataSource] that shows how we can use coroutines to make our apollo requests.\n+ */\n+class ApolloCoroutinesService(private val apolloClient: ApolloClient) {", "originalCommit": "fcd5ffde1dce0eda6ca3a86bd32b2af2cccc6772", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzY3NDY2NA==", "url": "https://github.com/apollographql/apollo-android/pull/2136#discussion_r403674664", "bodyText": "For sure. I kind of like to do that in a separate PR. That would allow us to remove networking call from SceneDelegate. That is also misplaced atm.", "author": "tasomaniac", "createdAt": "2020-04-05T09:29:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzY3MzQ4Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzY3NDA0OA==", "url": "https://github.com/apollographql/apollo-android/pull/2136#discussion_r403674048", "bodyText": "What about adding fun Query.toJson(): String to factor this code ?", "author": "martinbonnin", "createdAt": "2020-04-05T09:24:05Z", "path": "samples/multiplatform/kmp-ios-app/kmp-ios-app/SceneDelegate.swift", "diffHunk": "@@ -0,0 +1,111 @@\n+//\n+//  SceneDelegate.swift\n+//  kmp-ios-app\n+//\n+//  Created by Taso Dane on 4/5/20.\n+//\n+\n+import UIKit\n+import SwiftUI\n+import kmp_lib_sample\n+\n+class SceneDelegate: UIResponder, UIWindowSceneDelegate {\n+\n+    var window: UIWindow?\n+\n+\n+    func scene(_ scene: UIScene, willConnectTo session: UISceneSession, options connectionOptions: UIScene.ConnectionOptions) {\n+        // Use this method to optionally configure and attach the UIWindow `window` to the provided UIWindowScene `scene`.\n+        // If using a storyboard, the `window` property will automatically be initialized and attached to the scene.\n+        // This delegate does not imply the connecting scene or session are new (see `application:configurationForConnectingSceneSession` instead).\n+        let query = GithubRepositoriesQuery(\n+            repositoriesCount: 50,\n+            orderBy: RepositoryOrderField.updatedAt,\n+            orderDirection: OrderDirection.desc\n+        )\n+        let requestPayload = \"{\" +\n+        \"\\\"operationName\\\": \\\"\" + query.name().name() + \"\\\", \" +\n+        \"\\\"query\\\": \\\"\" + query.queryDocument() + \"\\\", \" +\n+        \"\\\"variables\\\": \" + query.variables().marshal() +\n+        \"}\"", "originalCommit": "fcd5ffde1dce0eda6ca3a86bd32b2af2cccc6772", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzY3NDUzNg==", "url": "https://github.com/apollographql/apollo-android/pull/2136#discussion_r403674536", "bodyText": "Yes! definitely. I got this from our docs. I compared it with what we have in runtime. Runtime also adds more in case autoPersist is enabled. We should do that and move this to common code", "author": "tasomaniac", "createdAt": "2020-04-05T09:28:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzY3NDA0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzY4MTk0Mw==", "url": "https://github.com/apollographql/apollo-android/pull/2136#discussion_r403681943", "bodyText": "Created a follow-up on this #2137", "author": "tasomaniac", "createdAt": "2020-04-05T10:30:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzY3NDA0OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzY3NDUxMQ==", "url": "https://github.com/apollographql/apollo-android/pull/2136#discussion_r403674511", "bodyText": "\ud83d\ude4c \ud83d\ude03", "author": "martinbonnin", "createdAt": "2020-04-05T09:28:36Z", "path": "samples/multiplatform/kmp-ios-app/kmp-ios-app/SceneDelegate.swift", "diffHunk": "@@ -0,0 +1,111 @@\n+//\n+//  SceneDelegate.swift\n+//  kmp-ios-app\n+//\n+//  Created by Taso Dane on 4/5/20.\n+//\n+\n+import UIKit\n+import SwiftUI\n+import kmp_lib_sample\n+\n+class SceneDelegate: UIResponder, UIWindowSceneDelegate {\n+\n+    var window: UIWindow?\n+\n+\n+    func scene(_ scene: UIScene, willConnectTo session: UISceneSession, options connectionOptions: UIScene.ConnectionOptions) {\n+        // Use this method to optionally configure and attach the UIWindow `window` to the provided UIWindowScene `scene`.\n+        // If using a storyboard, the `window` property will automatically be initialized and attached to the scene.\n+        // This delegate does not imply the connecting scene or session are new (see `application:configurationForConnectingSceneSession` instead).\n+        let query = GithubRepositoriesQuery(\n+            repositoriesCount: 50,\n+            orderBy: RepositoryOrderField.updatedAt,\n+            orderDirection: OrderDirection.desc\n+        )\n+        let requestPayload = \"{\" +\n+        \"\\\"operationName\\\": \\\"\" + query.name().name() + \"\\\", \" +\n+        \"\\\"query\\\": \\\"\" + query.queryDocument() + \"\\\", \" +\n+        \"\\\"variables\\\": \" + query.variables().marshal() +\n+        \"}\"\n+        print(requestPayload)\n+        \n+        let url = URL(string: \"https://api.github.com/graphql\")!\n+        var request = URLRequest(url: url)\n+        request.httpMethod = \"POST\"\n+        request.setValue(\"application/json\", forHTTPHeaderField: \"Accept\")\n+        request.setValue(\"application/json\", forHTTPHeaderField: \"Content-Type\")\n+        request.setValue(query.operationId(), forHTTPHeaderField: \"X-APOLLO-OPERATION-ID\")\n+        request.setValue(query.name().name(), forHTTPHeaderField: \"X-APOLLO-OPERATION-NAME\")\n+        request.setValue(\"bearer 230a8a1fcf3b2d318b7640b4b394d469d8783970\", forHTTPHeaderField: \"Authorization\")\n+\n+        request.httpBody = requestPayload.data(using: String.Encoding.utf8)\n+        \n+        let task = URLSession.shared.dataTask(with: request) { (data, response, error) in\n+            // Check for Error\n+            if let error = error {\n+                print(\"Error took place \\(error)\")\n+                return\n+            }\n+     \n+            // Convert HTTP Response Data to a String\n+            if let data = data, let dataString = String(data: data, encoding: .utf8) {\n+                query.parse(source: OkioBuffer())\n+                print(\"Response data string:\\n\" + (dataString.data(using: .utf8)!.prettyPrintedJSONString! as String))", "originalCommit": "fcd5ffde1dce0eda6ca3a86bd32b2af2cccc6772", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "ddfdc9ffbdf5ad1a0953f58c8af97a2c97acb067", "url": "https://github.com/apollographql/apollo-android/commit/ddfdc9ffbdf5ad1a0953f58c8af97a2c97acb067", "message": "add Travis again", "committedDate": "2020-04-05T09:33:17Z", "type": "commit"}, {"oid": "642346103b00bb5e7daceba0895bd65df61dc182", "url": "https://github.com/apollographql/apollo-android/commit/642346103b00bb5e7daceba0895bd65df61dc182", "message": "Move Kotlin jvmTarget to root level", "committedDate": "2020-04-05T10:33:33Z", "type": "commit"}, {"oid": "5cb7a96b5e4c09ef8fcf0cd0dc9d0da13db54cc5", "url": "https://github.com/apollographql/apollo-android/commit/5cb7a96b5e4c09ef8fcf0cd0dc9d0da13db54cc5", "message": "Also set jvmTarget in kotlin compile testing", "committedDate": "2020-04-05T10:54:49Z", "type": "commit"}, {"oid": "33f2d280c22378d89c6d48fbd2d666daab9e5b8e", "url": "https://github.com/apollographql/apollo-android/commit/33f2d280c22378d89c6d48fbd2d666daab9e5b8e", "message": "Set jvmargs with 2G memory limit", "committedDate": "2020-04-05T10:55:17Z", "type": "commit"}, {"oid": "3cb048ceaa38c5164bf8cd946160d6f4a7457b60", "url": "https://github.com/apollographql/apollo-android/commit/3cb048ceaa38c5164bf8cd946160d6f4a7457b60", "message": "Use ViewBinding in sample", "committedDate": "2020-04-05T11:09:59Z", "type": "commit"}, {"oid": "11ba3009a58ce3d48dfea6ba14891efd493c484c", "url": "https://github.com/apollographql/apollo-android/commit/11ba3009a58ce3d48dfea6ba14891efd493c484c", "message": "Add jvmTarget also to the plugin tests", "committedDate": "2020-04-05T11:19:22Z", "type": "commit"}, {"oid": "105f55c2e9517d64d6547d74e3038c47f0092028", "url": "https://github.com/apollographql/apollo-android/commit/105f55c2e9517d64d6547d74e3038c47f0092028", "message": "Migrate to AndroidX", "committedDate": "2020-04-05T12:15:01Z", "type": "commit"}, {"oid": "7f90ac67330c917fd9cecad45674b0c9aa1543e1", "url": "https://github.com/apollographql/apollo-android/commit/7f90ac67330c917fd9cecad45674b0c9aa1543e1", "message": "Delete Travis file", "committedDate": "2020-04-05T14:13:32Z", "type": "commit"}]}