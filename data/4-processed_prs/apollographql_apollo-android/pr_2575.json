{"pr_number": 2575, "pr_title": "[Plugin] Add an option to fail on deprecated usages", "pr_createdAt": "2020-09-14T10:18:02Z", "pr_url": "https://github.com/apollographql/apollo-android/pull/2575", "timeline": [{"oid": "3d2739f71effd2e6c4aee8c380405cb40de82039", "url": "https://github.com/apollographql/apollo-android/commit/3d2739f71effd2e6c4aee8c380405cb40de82039", "message": "added 'warnOnDeprecatedUsages' and 'failOnWarnings':", "committedDate": "2020-09-14T09:44:42Z", "type": "commit"}, {"oid": "e685b72e4f4e6bca2bebd730c91bab4253bd52db", "url": "https://github.com/apollographql/apollo-android/commit/e685b72e4f4e6bca2bebd730c91bab4253bd52db", "message": "fix off by one error when clicking in the IDE", "committedDate": "2020-09-14T10:00:41Z", "type": "commit"}, {"oid": "4d1b00b732537deafb81364de20300fd36e0718e", "url": "https://github.com/apollographql/apollo-android/commit/4d1b00b732537deafb81364de20300fd36e0718e", "message": "update metalava", "committedDate": "2020-09-14T10:02:41Z", "type": "commit"}, {"oid": "5c5dfdef8ef9bc58f6fa5fc2c67f639e26937f3a", "url": "https://github.com/apollographql/apollo-android/commit/5c5dfdef8ef9bc58f6fa5fc2c67f639e26937f3a", "message": "use the fieldName, not the aliased name", "committedDate": "2020-09-14T10:13:09Z", "type": "commit"}, {"oid": "12296bc0a06e7c81aa085c293fb12229fda821a9", "url": "https://github.com/apollographql/apollo-android/commit/12296bc0a06e7c81aa085c293fb12229fda821a9", "message": "fix tests", "committedDate": "2020-09-14T12:09:56Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODIxMjIyOA==", "url": "https://github.com/apollographql/apollo-android/pull/2575#discussion_r488212228", "bodyText": "I wonder if this can be done via tailrec fun in Kotlin.  If possible, Kotlin allows recursion without the possibility of stack overflow since it optimizes the bytecode.\nIm just curious. And the end, it might look slightly better. That's all \ud83d\ude0a", "author": "tasomaniac", "createdAt": "2020-09-14T20:51:07Z", "path": "apollo-compiler/src/main/kotlin/com/apollographql/apollo/compiler/GraphQLCompiler.kt", "diffHunk": "@@ -139,6 +160,31 @@ class GraphQLCompiler {\n     }\n   }\n \n+  private class DeprecatedUsage(val filePath: String, val sourceLocation: SourceLocation, val field: Field)\n+\n+  private fun DocumentParseResult.collectDeprecatedUsages(): List<DeprecatedUsage> {\n+    return operations.flatMap { it.fields.collectDeprecatedUsages(it.filePath) } +\n+        fragments.flatMap { it.fields.collectDeprecatedUsages(it.filePath) }\n+  }\n+\n+  /**\n+   * walk the list and return any deprecated fields\n+   * TODO: add support for deprecated enums\n+   */\n+  private fun List<Field>.collectDeprecatedUsages(filePath: String): List<DeprecatedUsage> {", "originalCommit": "12296bc0a06e7c81aa085c293fb12229fda821a9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODI0NTg5Nw==", "url": "https://github.com/apollographql/apollo-android/pull/2575#discussion_r488245897", "bodyText": "I'm not sure this maps well as a tail rec function. Each Field node has multiple Field children so there would have to be several recursive calls at each depth. The only way I can see to make it tailrec is to pass the fieldsToVisit as some state:\ntailrec fun collectDeprecatedUsages(fieldsToVisit: MutableList<Field>, filePath: String, deprecatedUsages: MutableList<DeprecatedUsage>)\n\nBut that would add an additional method, plus we don't use tailrec anywhere else in the codebase so not sure it's worth it?", "author": "martinbonnin", "createdAt": "2020-09-14T22:00:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODIxMjIyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODg2NjY1Nw==", "url": "https://github.com/apollographql/apollo-android/pull/2575#discussion_r488866657", "bodyText": "Make sense. I didn't really see that it is not possible with a single fun. Don't mind me on this one \ud83d\ude0a", "author": "tasomaniac", "createdAt": "2020-09-15T18:09:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODIxMjIyOA=="}], "type": "inlineReview"}]}