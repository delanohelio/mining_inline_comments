{"pr_number": 2776, "pr_title": "Add interface for classes generated for enum types and fix sealed classes json representation", "pr_createdAt": "2020-11-26T18:11:55Z", "pr_url": "https://github.com/apollographql/apollo-android/pull/2776", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE3ODQyMQ==", "url": "https://github.com/apollographql/apollo-android/pull/2776#discussion_r531178421", "bodyText": "I kind of wanted to follow ScalarType naming, but of course can change it to whatever is more appropriate.\nAlso, @martinbonnin suggested using an interface (#2775 (comment)), but I wasn't sure it's okay to have a default method with toString implementation. And if the idea was to add a case here then of course I can also do that, it's just overriding toString feels like a good solution", "author": "lwasyl", "createdAt": "2020-11-26T18:15:30Z", "path": "apollo-api/src/commonMain/kotlin/com/apollographql/apollo/api/SealedEnumType.kt", "diffHunk": "@@ -0,0 +1,11 @@\n+package com.apollographql.apollo.api\n+\n+/**\n+ * Base class for an enum type when generating sealed Kotlin class\n+ */\n+abstract class SealedEnumType {", "originalCommit": "1d67c78800f32224143f43c65971318371c96da5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTIwNzEwNQ==", "url": "https://github.com/apollographql/apollo-android/pull/2776#discussion_r531207105", "bodyText": "I kind of wanted to follow ScalarType naming, but of course can change it to whatever is more appropriate.\n\nNaming is hard... I'm personnaly not a fan of ScalarType as it acts more like a type-safe Binding or Mapping between a GraphQL type and a Kotlin one, rather than a proper type. So I don't mind not following the logic here.\nWhat about the below:\ninterface EnumValue {\n  val rawValue: String\n}\n\n? This will be closest to the spec: https://spec.graphql.org/draft/#EnumValue\n\nAnd if the idea was to add a case here then of course I can also do that, it's just overriding toString feels like a good solution\n\nIt was the original intent. I feel it's dangerous to rely on toString() because it typically exposes to these kind of bugs that we're seeing here. The compiler cannot catch if a new type is added a someone forgets to override toString().\nUltimately, I was thinking of moving this:\nfun writeToJson(value: Any?, jsonWriter: JsonWriter) {\n\nto something more like:\nfun writeToJson(value: InputValue, jsonWriter: JsonWriter) {\n\nwhere InputValue would be an instance of an InputType as defined by https://spec.graphql.org/draft/#IsInputType(), i.e. scalar, enum or InputObject\nWe're not there yet but adding EnumValue might be a step in the good direction?", "author": "martinbonnin", "createdAt": "2020-11-26T19:56:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE3ODQyMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTIzMzQ0NQ==", "url": "https://github.com/apollographql/apollo-android/pull/2776#discussion_r531233445", "bodyText": "I changed the abstract class to interface EnumValue, following the GraphQL spec definitely makes sense! Also with that change I now could implement that interface for all enum classes, not only the ones generated as sealed classes.\nwriteToJson(value: InputValue also makes perfect sense. I originally thought it's more of a general-purpose utility, that's why I had doubts :)", "author": "lwasyl", "createdAt": "2020-11-26T21:48:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE3ODQyMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE3ODcyOQ==", "url": "https://github.com/apollographql/apollo-android/pull/2776#discussion_r531178729", "bodyText": "The primaryConstructorSpec is used also when generating enum class and for Unknown case, so we need a new one that overrides the raw value", "author": "lwasyl", "createdAt": "2020-11-26T18:16:30Z", "path": "apollo-compiler/src/main/kotlin/com/apollographql/apollo/compiler/codegen/kotlin/EnumType.kt", "diffHunk": "@@ -37,6 +38,12 @@ private val primaryConstructorSpec =\n         .addParameter(\"rawValue\", String::class)\n         .build()\n \n+private val sealedSubclassPrimaryConstructorSpec =", "originalCommit": "1d67c78800f32224143f43c65971318371c96da5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTIwNzQ4MQ==", "url": "https://github.com/apollographql/apollo-android/pull/2776#discussion_r531207481", "bodyText": "Makes sense \ud83d\udc4d", "author": "martinbonnin", "createdAt": "2020-11-26T19:57:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE3ODcyOQ=="}], "type": "inlineReview"}, {"oid": "711c2d8206fea239a0f6689549138c6df75e30ac", "url": "https://github.com/apollographql/apollo-android/commit/711c2d8206fea239a0f6689549138c6df75e30ac", "message": "Add toString implementation to sealed classes generated for enum types.\n\nObjects representing enums in sealed classes don't have stable toString() implementation: instead, they'll return the class name along with memory address for that object. This breaks SQLite-based caching for queries that accept enum parameters, as toString() is used to generate the query key, so it would change between app restarts. This commit fixes this behavior by implementing a stable toString() implementation for sealed classes representing enum types.\n\nFixes https://github.com/apollographql/apollo-android/issues/2775", "committedDate": "2020-11-26T18:48:59Z", "type": "forcePushed"}, {"oid": "2a163b0542b9aecec55f0d52701e3654feacac8b", "url": "https://github.com/apollographql/apollo-android/commit/2a163b0542b9aecec55f0d52701e3654feacac8b", "message": "added a test for sealed classes cache keys", "committedDate": "2020-11-26T21:44:29Z", "type": "forcePushed"}, {"oid": "8153582764492c37e9d16ca396beff18d6033c92", "url": "https://github.com/apollographql/apollo-android/commit/8153582764492c37e9d16ca396beff18d6033c92", "message": "added a test for sealed classes cache keys", "committedDate": "2020-11-26T21:51:51Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTI0ODg2NQ==", "url": "https://github.com/apollographql/apollo-android/pull/2776#discussion_r531248865", "bodyText": "Paranoid checks: I think this is a backward compatible change but since it touches regular enums and not only sealed classes this has the potential to impact a lot more users. Are we possibly missing a weird edge case?", "author": "martinbonnin", "createdAt": "2020-11-26T23:07:00Z", "path": "apollo-compiler/src/test/graphql/com/example/java_beans_semantic_naming/type/Episode.kt", "diffHunk": "@@ -5,15 +5,16 @@\n //\n package com.example.java_beans_semantic_naming.type\n \n+import com.apollographql.apollo.api.EnumValue\n import kotlin.Deprecated\n import kotlin.String\n \n /**\n  * The episodes in the Star Wars trilogy\n  */\n enum class Episode(\n-  val rawValue: String\n-) {\n+  override val rawValue: String\n+) : EnumValue {", "originalCommit": "8153582764492c37e9d16ca396beff18d6033c92", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTI1MTIwNA==", "url": "https://github.com/apollographql/apollo-android/pull/2776#discussion_r531251204", "bodyText": "I don't see any \ud83e\udd14 One edge case would be using jar with generated old classes (no interface) with new runtime, but it should work (just the check won't trigger). For enum classes behavior doesn't change at all, as from what I see both raw value and enum name always match (so cache won't break when updating app with new generated classes).\nI can of course revert this if you find some problem or just feel I should only fix the bug with sealed classes and let enum classes as is. It just felt weird leaving actual enum classes without having them implement EnumValue interface \ud83d\ude42", "author": "lwasyl", "createdAt": "2020-11-26T23:20:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTI0ODg2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTI1MjEyOA==", "url": "https://github.com/apollographql/apollo-android/pull/2776#discussion_r531252128", "bodyText": "Yep, I think it's safe too \ud83d\udc4d and way more uniform like this \ud83d\udc4d .", "author": "martinbonnin", "createdAt": "2020-11-26T23:25:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTI0ODg2NQ=="}], "type": "inlineReview"}, {"oid": "2cedb6c1cb0d07d14062e0cbc91ab28a2cbcb4d0", "url": "https://github.com/apollographql/apollo-android/commit/2cedb6c1cb0d07d14062e0cbc91ab28a2cbcb4d0", "message": "Make generated classes for enum types implement a common interface\n\nObjects representing enums in sealed classes don't have stable toString() implementation: instead, they'll return the class name along with memory address for that object. This breaks SQLite-based caching for queries that accept enum parameters, as toString() is used to generate the query key, so it would change between app restarts. This commit fixes this behavior by adding an EnumValue interface to types representing enums, and using its `rawValue` property to build proper cache key.\n\nFixes https://github.com/apollographql/apollo-android/issues/2775", "committedDate": "2020-11-26T23:43:26Z", "type": "commit"}, {"oid": "bf77715678d63cf96117e1f618bdc4f917d1a363", "url": "https://github.com/apollographql/apollo-android/commit/bf77715678d63cf96117e1f618bdc4f917d1a363", "message": "added a test for sealed classes cache keys", "committedDate": "2020-11-26T23:45:52Z", "type": "commit"}, {"oid": "bf77715678d63cf96117e1f618bdc4f917d1a363", "url": "https://github.com/apollographql/apollo-android/commit/bf77715678d63cf96117e1f618bdc4f917d1a363", "message": "added a test for sealed classes cache keys", "committedDate": "2020-11-26T23:45:52Z", "type": "forcePushed"}]}