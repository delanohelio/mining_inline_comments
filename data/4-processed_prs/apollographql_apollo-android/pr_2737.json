{"pr_number": 2737, "pr_title": "[Gradle plugin] Add schema upload", "pr_createdAt": "2020-11-06T16:20:26Z", "pr_url": "https://github.com/apollographql/apollo-android/pull/2737", "timeline": [{"oid": "1a3d2402762f6cc7824995ca747f8f7a592bc9fd", "url": "https://github.com/apollographql/apollo-android/commit/1a3d2402762f6cc7824995ca747f8f7a592bc9fd", "message": "add uploadApolloSchema", "committedDate": "2020-11-06T12:18:49Z", "type": "commit"}, {"oid": "5a7234f3b7cd9648ae12e247ce1fb809219320ba", "url": "https://github.com/apollographql/apollo-android/commit/5a7234f3b7cd9648ae12e247ce1fb809219320ba", "message": "add ./gradlew uploadApolloSchema", "committedDate": "2020-11-06T15:48:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk3MjI5Mw==", "url": "https://github.com/apollographql/apollo-android/pull/2737#discussion_r518972293", "bodyText": "I think key, graph, variant, and sdl should all be required String types here", "author": "zionts", "createdAt": "2020-11-06T19:56:46Z", "path": "apollo-gradle-plugin/src/main/kotlin/com/apollographql/apollo/gradle/internal/SchemaUploader.kt", "diffHunk": "@@ -0,0 +1,43 @@\n+package com.apollographql.apollo.gradle.internal\n+\n+import com.apollographql.apollo.compiler.fromJson\n+import com.apollographql.apollo.gradle.internal.SchemaDownloader.cast\n+import java.net.InetAddress\n+import java.nio.charset.StandardCharsets\n+import java.security.MessageDigest\n+import java.util.UUID\n+\n+object SchemaUploader {\n+  fun uploadSchema(key: String, graph: String, variant: String, sdl: String) {", "originalCommit": "5a7234f3b7cd9648ae12e247ce1fb809219320ba", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTMzOTY1OA==", "url": "https://github.com/apollographql/apollo-android/pull/2737#discussion_r519339658", "bodyText": "I think that's the case already?", "author": "martinbonnin", "createdAt": "2020-11-08T10:29:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk3MjI5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDExOTA5NQ==", "url": "https://github.com/apollographql/apollo-android/pull/2737#discussion_r520119095", "bodyText": "oh heh, I was reading this as GraphQL, not Kotlin \ud83d\ude02  my bad!", "author": "zionts", "createdAt": "2020-11-09T21:04:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk3MjI5Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk3MjY2MA==", "url": "https://github.com/apollographql/apollo-android/pull/2737#discussion_r518972660", "bodyText": "it may be worth having some kind of automatic retry on disconnect, but \ud83e\udd37", "author": "zionts", "createdAt": "2020-11-06T19:57:30Z", "path": "apollo-gradle-plugin/src/main/kotlin/com/apollographql/apollo/gradle/internal/SchemaHelper.kt", "diffHunk": "@@ -0,0 +1,60 @@\n+package com.apollographql.apollo.gradle.internal\n+\n+import com.apollographql.apollo.compiler.toJson\n+import com.squareup.moshi.JsonWriter\n+import okhttp3.MediaType.Companion.toMediaTypeOrNull\n+import okhttp3.OkHttpClient\n+import okhttp3.Request\n+import okhttp3.RequestBody.Companion.toRequestBody\n+import okhttp3.Response\n+import okio.buffer\n+import okio.sink\n+import java.io.ByteArrayOutputStream\n+import java.util.concurrent.TimeUnit\n+\n+internal object SchemaHelper {\n+  private fun newOkHttpClient(): OkHttpClient {\n+    val connectTimeoutSeconds = System.getProperty(\"okHttp.connectTimeout\", \"600\").toLong()", "originalCommit": "5a7234f3b7cd9648ae12e247ce1fb809219320ba", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTAzMDU0Ng==", "url": "https://github.com/apollographql/apollo-android/pull/2737#discussion_r519030546", "bodyText": "I'll keep it simple for now. Given that it's mostly used from the cli, it shouldn't be too hard to relaunch the command. But if disconnects happen too often, it shouldn't be too hard to do.", "author": "martinbonnin", "createdAt": "2020-11-06T22:10:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk3MjY2MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk3MzI3OQ==", "url": "https://github.com/apollographql/apollo-android/pull/2737#discussion_r518973279", "bodyText": "Could we call the action pushSchema instead of uploadSchema? Though we call it uploadSchema in our API, in our public documentation and existing CLI, this is called \"publishing to the registry,\" \"pushing to the registry\" and service:push, and I want to make sure we're telling a consistent message to users since the upload will actually correspond the uploaded schema as active on the graph@variant in question.", "author": "zionts", "createdAt": "2020-11-06T19:58:53Z", "path": "apollo-gradle-plugin/src/main/kotlin/com/apollographql/apollo/gradle/internal/ApolloUploadSchemaTask.kt", "diffHunk": "@@ -0,0 +1,64 @@\n+package com.apollographql.apollo.gradle.internal\n+\n+import org.gradle.api.DefaultTask\n+import org.gradle.api.provider.Property\n+import org.gradle.api.tasks.Input\n+import org.gradle.api.tasks.Optional\n+import org.gradle.api.tasks.TaskAction\n+import org.gradle.api.tasks.options.Option\n+import java.io.File\n+\n+abstract class ApolloUploadSchemaTask : DefaultTask() {\n+  @get:Input\n+  @get:Optional\n+  @get:Option(option = \"schema\", description = \"schema to upload as SDL\")\n+  abstract val schema: Property<String>\n+\n+  @get:Optional\n+  @get:Input\n+  @get:Option(option = \"key\", description = \"The Apollo API key. See https://www.apollographql.com/docs/studio/api-keys/ for more information on how to get your API key.\")\n+  abstract val key: Property<String>\n+\n+  @get:Optional\n+  @get:Input\n+  @get:Option(option = \"graph\", description = \"The identifier of the Apollo graph used to download the schema.\")\n+  abstract val graph: Property<String>\n+\n+  @get:Optional\n+  @get:Input\n+  @get:Option(option = \"graphVariant\", description = \"The variant of the Apollo graph used to download the schema.\")\n+  abstract val graphVariant: Property<String>\n+\n+\n+  private fun Property<String>.orProperty(name: String) = orElse(project.provider {\n+    (project.findProperty(\"com.apollographql.apollo.$name\") as? String)?.also {\n+      logger.lifecycle(\"Using the com.apollographql.apollo.$name property is deprecated. Use --$name instead.\")\n+    }\n+  }).orNull\n+\n+  @TaskAction\n+  fun taskAction() {\n+    val key = key.orProperty(\"key\")\n+    var graph = graph.orProperty(\"graph\")\n+    val graphVariant = graphVariant.orProperty(\"graph-variant\")\n+    val schema = schema.orNull\n+\n+    check (key != null) {\n+      \"please define key\"\n+    }\n+\n+    if (graph == null && key.startsWith(\"service:\")) {\n+      graph = key.split(\":\")[1]\n+    }\n+\n+    check (graph != null) {\n+      \"please define graph\"\n+    }\n+\n+    check (schema != null) {\n+      \"please define schema\"\n+    }\n+\n+    SchemaUploader.uploadSchema(key = key, graph = graph, variant = graphVariant ?: \"current\", File(schema).readText())", "originalCommit": "5a7234f3b7cd9648ae12e247ce1fb809219320ba", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTAzMDc4Mw==", "url": "https://github.com/apollographql/apollo-android/pull/2737#discussion_r519030783", "bodyText": "Makes sense, I'll change that.", "author": "martinbonnin", "createdAt": "2020-11-06T22:11:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk3MzI3OQ=="}], "type": "inlineReview"}, {"oid": "24e7329d01e02021021765059ef5c8f5ef5c12ee", "url": "https://github.com/apollographql/apollo-android/commit/24e7329d01e02021021765059ef5c8f5ef5c12ee", "message": "upload -> push", "committedDate": "2020-11-08T10:33:35Z", "type": "commit"}, {"oid": "b07aaf8518250a59a98208f3448d8b77473dea8f", "url": "https://github.com/apollographql/apollo-android/commit/b07aaf8518250a59a98208f3448d8b77473dea8f", "message": "exemple -> example", "committedDate": "2020-11-08T10:34:33Z", "type": "commit"}]}