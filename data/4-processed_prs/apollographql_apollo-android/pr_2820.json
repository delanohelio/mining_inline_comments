{"pr_number": 2820, "pr_title": "Cleanup the custom scalar APIs 2/3", "pr_createdAt": "2020-12-24T14:42:02Z", "pr_url": "https://github.com/apollographql/apollo-android/pull/2820", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTAyNTY3Mw==", "url": "https://github.com/apollographql/apollo-android/pull/2820#discussion_r549025673", "bodyText": "where it's used? I might missed that during reviewing PR", "author": "sav007", "createdAt": "2020-12-26T19:54:45Z", "path": "apollo-api/src/commonMain/kotlin/com/apollographql/apollo/api/CustomScalar.kt", "diffHunk": "@@ -3,15 +3,17 @@ package com.apollographql.apollo.api\n /**\n  * Represents a mapping from a custom GraphQL scalar type to a Java/Kotlin class\n  */\n-interface ScalarType {\n-\n+data class CustomScalar(\n   /**\n    * GraphQL schema custom scalar type name (e.g. `ID`, `URL`, `DateTime` etc.)\n    */\n-  val graphqlName: String\n+  val graphqlName: String,\n \n   /**\n    * Fully qualified class name this GraphQL scalar type is mapped to (e.g. `java.lang.String`, `java.net.URL`, `java.util.DateTime`)\n    */\n   val className: String\n+) {\n+  // Do not remove, this is used by generated code\n+  companion object", "originalCommit": "da7da119a3d58144aa9225955e9e7a4268b65b95", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTI4NDE5OA==", "url": "https://github.com/apollographql/apollo-android/pull/2820#discussion_r549284198", "bodyText": "My bad, it's a leftover from a previous attempt to generate CustomScalars as extension properties like CustomScalar.Date. But it leads to nasty import clashes (extension property vs java.util.Date for an exemple) so I reverted to using CustomScalars.Date (See da7da11)", "author": "martinbonnin", "createdAt": "2020-12-28T09:48:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTAyNTY3Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTAyNzAzMA==", "url": "https://github.com/apollographql/apollo-android/pull/2820#discussion_r549027030", "bodyText": "Should we skip empty object generation?", "author": "sav007", "createdAt": "2020-12-26T20:10:38Z", "path": "apollo-compiler/src/test/graphql/com/example/fragment_in_fragment/type/CustomScalars.kt", "diffHunk": "@@ -0,0 +1,8 @@\n+// AUTO-GENERATED FILE. DO NOT MODIFY.\n+//\n+// This class was automatically generated by Apollo GraphQL plugin from the GraphQL queries it found.\n+// It should not be modified by hand.\n+//\n+package com.example.fragment_in_fragment.type\n+\n+object CustomScalars", "originalCommit": "da7da119a3d58144aa9225955e9e7a4268b65b95", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTI4NTUzNw==", "url": "https://github.com/apollographql/apollo-android/pull/2820#discussion_r549285537", "bodyText": "I feel like consistency is a better dev experience and adheres to the principle of least astonishment (see #2721 for an exemple)\nNo strong feeling there though. If generating an empty object it causes any problem, we should remove it.", "author": "martinbonnin", "createdAt": "2020-12-28T09:52:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTAyNzAzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTc2MDgxNA==", "url": "https://github.com/apollographql/apollo-android/pull/2820#discussion_r549760814", "bodyText": "I think it will look odd for the user to see empty class generated and visible for import.", "author": "sav007", "createdAt": "2020-12-29T16:09:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTAyNzAzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTc2MTkxNg==", "url": "https://github.com/apollographql/apollo-android/pull/2820#discussion_r549761916", "bodyText": "Also I have a suggestion to generate additional KDoc that briefly explains the purpose of this generated class, what do you think?", "author": "sav007", "createdAt": "2020-12-29T16:12:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTAyNzAzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTc3NjMyMQ==", "url": "https://github.com/apollographql/apollo-android/pull/2820#discussion_r549776321", "bodyText": "Yup, +1000 for KDoc, I'll add that. And remove the generated class if empty.", "author": "martinbonnin", "createdAt": "2020-12-29T16:56:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTAyNzAzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTE5NTIwMA==", "url": "https://github.com/apollographql/apollo-android/pull/2820#discussion_r551195200", "bodyText": "Kdoc and skipping empty classes are added", "author": "martinbonnin", "createdAt": "2021-01-04T09:17:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTAyNzAzMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTE1MDgyOA==", "url": "https://github.com/apollographql/apollo-android/pull/2820#discussion_r549150828", "bodyText": "Idea was that this class AST supposed to be free from any specific kotlin / java poet classes and can be used with any code generation libraries. With these changes we lock AST to be used only with Kotlin Poet.", "author": "sav007", "createdAt": "2020-12-27T18:44:32Z", "path": "apollo-compiler/src/main/kotlin/com/apollographql/apollo/compiler/backend/ast/Ast.kt", "diffHunk": "@@ -1,5 +1,8 @@\n package com.apollographql.apollo.compiler.backend.ast\n \n+import com.squareup.kotlinpoet.MemberName\n+import com.squareup.kotlinpoet.TypeName\n+", "originalCommit": "da7da119a3d58144aa9225955e9e7a4268b65b95", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTI5MDMxMw==", "url": "https://github.com/apollographql/apollo-android/pull/2820#discussion_r549290313", "bodyText": "Good catch! Fixed.", "author": "martinbonnin", "createdAt": "2020-12-28T10:08:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTE1MDgyOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTE1MTMzMw==", "url": "https://github.com/apollographql/apollo-android/pull/2820#discussion_r549151333", "bodyText": "Should we introduce object CustomScalarType in CustomScalarType.kt with the const for enum name CustomScalars. Also I was thinking maybe we should use object  as namespace for any top level functions?  For example move all functions in ObjectTypeCodegen.kt into object ObjectTypeCodegen ? So any top level functions will have explicit namespaces", "author": "sav007", "createdAt": "2020-12-27T18:49:39Z", "path": "apollo-compiler/src/main/kotlin/com/apollographql/apollo/compiler/backend/ast/AstBuilder.kt", "diffHunk": "@@ -665,18 +643,14 @@ internal class AstBuilder private constructor(\n           \"BOOLEAN\" -> CodeGenerationAst.FieldType.Scalar.Boolean(nullable = true)\n           \"FLOAT\" -> CodeGenerationAst.FieldType.Scalar.Float(nullable = true)\n           else -> {\n-            val customType = checkNotNull(customScalarsMapping[schemaTypeRef.name]) {\n+            val className = checkNotNull(customScalarsMapping[schemaTypeRef.name]) {\n               \"Failed to resolve custom scalar type `${schemaTypeRef.name}`\"\n             }\n             CodeGenerationAst.FieldType.Scalar.Custom(\n                 nullable = true,\n                 schemaType = schemaTypeRef.name,\n-                type = customType,\n-                customEnumType = CodeGenerationAst.TypeRef(\n-                    name = schemaTypeRef.name,\n-                    packageName = typesPackageName,\n-                    enclosingType = CodeGenerationAst.customTypeRef(typesPackageName)\n-                )\n+                type = className,\n+                typeName = ClassName(typesPackageName, \"CustomScalars\", schemaTypeRef.name.capitalize())", "originalCommit": "da7da119a3d58144aa9225955e9e7a4268b65b95", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTI5MzQ4MA==", "url": "https://github.com/apollographql/apollo-android/pull/2820#discussion_r549293480", "bodyText": "Should we introduce object CustomScalarType in CustomScalarType.kt with the const for enum name CustomScalars\n\nNot sure I get it. CustomScalars is now a generated object. I'd rather avoid having 2 instances in 2 different packages.\n\nAlso I was thinking maybe we should use object as namespace for any top level functions?\n\nYea, it's a bit heterogeneous at the moment. I don't mind it too much since this is mostly internal compiler API. The functions in ObjectType.kt are mostly extension functions though so IntelliJ will auto-add any enclosing object and even if we wrap them, they will look the same at the call site, only the import will change:\n// this import is currently not needed because everything is in the same package.\nimport com.apollographql.apollo.compiler.backend.codegen.ObjectTypeCodegen\n\n... \n\ndataType.typeSpec()\n\nIt's still convenient being able to completely leave out the import?", "author": "martinbonnin", "createdAt": "2020-12-28T10:18:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTE1MTMzMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTE1MTU1Ng==", "url": "https://github.com/apollographql/apollo-android/pull/2820#discussion_r549151556", "bodyText": "Didn't we have PR into 2.x branch that introduces some interface for CustomScalars when it's generated as sealed class? Also I believe we had compiler option to generate this as sealed class, are we sure to change this behaviour in 3.x?", "author": "sav007", "createdAt": "2020-12-27T18:52:47Z", "path": "apollo-compiler/src/test/graphql/com/example/antlr_tokens/type/CustomScalars.kt", "diffHunk": "@@ -0,0 +1,16 @@\n+// AUTO-GENERATED FILE. DO NOT MODIFY.\n+//\n+// This class was automatically generated by Apollo GraphQL plugin from the GraphQL queries it found.\n+// It should not be modified by hand.\n+//\n+package com.example.antlr_tokens.type\n+\n+import com.apollographql.apollo.api.CustomScalar\n+\n+object CustomScalars {", "originalCommit": "da7da119a3d58144aa9225955e9e7a4268b65b95", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTI5NTU2MA==", "url": "https://github.com/apollographql/apollo-android/pull/2820#discussion_r549295560", "bodyText": "This was about Enums and the EnumValue interface: \n  \n    \n      apollo-android/apollo-api/src/commonMain/kotlin/com/apollographql/apollo/api/EnumValue.kt\n    \n    \n         Line 6\n      in\n      d59f2a1\n    \n    \n    \n    \n\n        \n          \n           interface EnumValue { \n        \n    \n  \n\n\nThis should be backported to 3.0. as part of #2813", "author": "martinbonnin", "createdAt": "2020-12-28T10:25:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTE1MTU1Ng=="}], "type": "inlineReview"}, {"oid": "2d15cd8e27b734f59e8ffdb1281c6ef0f6ae0a4f", "url": "https://github.com/apollographql/apollo-android/commit/2d15cd8e27b734f59e8ffdb1281c6ef0f6ae0a4f", "message": "add KDoc and do not generate if empty", "committedDate": "2021-01-03T17:12:01Z", "type": "forcePushed"}, {"oid": "9c9c4514a028ea3e90caa148b1ff8d6c6d688528", "url": "https://github.com/apollographql/apollo-android/commit/9c9c4514a028ea3e90caa148b1ff8d6c6d688528", "message": "ScalarType -> CustomScalar", "committedDate": "2021-01-04T09:04:31Z", "type": "commit"}, {"oid": "24f85c078339fe03045b60d383b03c12a9c370de", "url": "https://github.com/apollographql/apollo-android/commit/24f85c078339fe03045b60d383b03c12a9c370de", "message": "Generate CustomScalar as a data class", "committedDate": "2021-01-04T09:04:31Z", "type": "commit"}, {"oid": "e6b2a56b3c7d049efa51713fb64a64447351e5ea", "url": "https://github.com/apollographql/apollo-android/commit/e6b2a56b3c7d049efa51713fb64a64447351e5ea", "message": "ScalarTypeAdapter -> CustomScalarAdapter", "committedDate": "2021-01-04T09:04:31Z", "type": "commit"}, {"oid": "8ec8a912b28eaa079532b46a0579c6c453ea3f6d", "url": "https://github.com/apollographql/apollo-android/commit/8ec8a912b28eaa079532b46a0579c6c453ea3f6d", "message": "update test fixtures", "committedDate": "2021-01-04T09:04:31Z", "type": "commit"}, {"oid": "c76e6baec0e9305f18470a8b348cb0d17393da0a", "url": "https://github.com/apollographql/apollo-android/commit/c76e6baec0e9305f18470a8b348cb0d17393da0a", "message": "misc fixes", "committedDate": "2021-01-04T09:04:31Z", "type": "commit"}, {"oid": "e246c0e79722df3284261e06b743fe47cab82b09", "url": "https://github.com/apollographql/apollo-android/commit/e246c0e79722df3284261e06b743fe47cab82b09", "message": "simplify AstBuilder", "committedDate": "2021-01-04T09:04:32Z", "type": "commit"}, {"oid": "77aeec3d91f4b85841a9b7bd2a5305d70d3e7daf", "url": "https://github.com/apollographql/apollo-android/commit/77aeec3d91f4b85841a9b7bd2a5305d70d3e7daf", "message": "fix tests", "committedDate": "2021-01-04T09:04:32Z", "type": "commit"}, {"oid": "981770de9b105aacb7ef1c5c8e3d1c7ef4d816c1", "url": "https://github.com/apollographql/apollo-android/commit/981770de9b105aacb7ef1c5c8e3d1c7ef4d816c1", "message": "fix idling resource test", "committedDate": "2021-01-04T09:04:32Z", "type": "commit"}, {"oid": "01b4d93341427b1cdf1585625e09bdd7ef52def2", "url": "https://github.com/apollographql/apollo-android/commit/01b4d93341427b1cdf1585625e09bdd7ef52def2", "message": "revert to not using extension properties as it leads to nasty\nnameclashes issues like java.util.Date vs com.example.type.Date", "committedDate": "2021-01-04T09:04:32Z", "type": "commit"}, {"oid": "7f071b8e7d1595ca4edafdf2b92eb45bc79f35e7", "url": "https://github.com/apollographql/apollo-android/commit/7f071b8e7d1595ca4edafdf2b92eb45bc79f35e7", "message": "fix tests", "committedDate": "2021-01-04T09:04:32Z", "type": "commit"}, {"oid": "bc3295ad264d702b7697c2bdf79f363165bb73a2", "url": "https://github.com/apollographql/apollo-android/commit/bc3295ad264d702b7697c2bdf79f363165bb73a2", "message": "fix tests", "committedDate": "2021-01-04T09:04:32Z", "type": "commit"}, {"oid": "8ff205c6580835c07cf9b2d8119d7c248299592e", "url": "https://github.com/apollographql/apollo-android/commit/8ff205c6580835c07cf9b2d8119d7c248299592e", "message": "Better UP-TO-DATE checks (#2817)\n\n* remove the \"Build-Timestamp\" Manifest property\r\n\r\nThis makes the builds never up-to-date and compiling things over and\r\nover again\r\n\r\n* better up-to-date checks", "committedDate": "2021-01-04T09:04:32Z", "type": "commit"}, {"oid": "6f9b4a1c2d774b7478f928fb925cd5dc1f6818c7", "url": "https://github.com/apollographql/apollo-android/commit/6f9b4a1c2d774b7478f928fb925cd5dc1f6818c7", "message": "fix tests", "committedDate": "2021-01-04T09:04:32Z", "type": "commit"}, {"oid": "e9645bfc5a3f6dcac3050577f0cec8aa5c0c9774", "url": "https://github.com/apollographql/apollo-android/commit/e9645bfc5a3f6dcac3050577f0cec8aa5c0c9774", "message": "do not bind the Ast to KotlinPoet", "committedDate": "2021-01-04T09:04:32Z", "type": "commit"}, {"oid": "5a5e3c016c95debac5c75445d51f38a158b011f6", "url": "https://github.com/apollographql/apollo-android/commit/5a5e3c016c95debac5c75445d51f38a158b011f6", "message": "remove unused companion object", "committedDate": "2021-01-04T09:04:32Z", "type": "commit"}, {"oid": "e871bce43c3be0fa0c15ddab4c1b9467e8d6aecf", "url": "https://github.com/apollographql/apollo-android/commit/e871bce43c3be0fa0c15ddab4c1b9467e8d6aecf", "message": "move JsonElement subclasses to the upper level\n\nIt makes the callsite less verbose", "committedDate": "2021-01-04T09:04:32Z", "type": "commit"}, {"oid": "19b9f545fff23584f47897b671d57a3d4b5e1922", "url": "https://github.com/apollographql/apollo-android/commit/19b9f545fff23584f47897b671d57a3d4b5e1922", "message": "make compile", "committedDate": "2021-01-04T09:04:32Z", "type": "commit"}, {"oid": "0e7c32e83f9799d9a3ef0fff59fad5f0473a5a26", "url": "https://github.com/apollographql/apollo-android/commit/0e7c32e83f9799d9a3ef0fff59fad5f0473a5a26", "message": "add KDoc and do not generate if empty", "committedDate": "2021-01-04T09:04:32Z", "type": "commit"}, {"oid": "0e7c32e83f9799d9a3ef0fff59fad5f0473a5a26", "url": "https://github.com/apollographql/apollo-android/commit/0e7c32e83f9799d9a3ef0fff59fad5f0473a5a26", "message": "add KDoc and do not generate if empty", "committedDate": "2021-01-04T09:04:32Z", "type": "forcePushed"}, {"oid": "17ca4d87f3041c67d906e2600bbc65d8cda8caf9", "url": "https://github.com/apollographql/apollo-android/commit/17ca4d87f3041c67d906e2600bbc65d8cda8caf9", "message": "update test fixtures", "committedDate": "2021-01-04T09:07:20Z", "type": "commit"}]}