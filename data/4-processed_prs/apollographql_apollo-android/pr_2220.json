{"pr_number": 2220, "pr_title": "Migrate Transaction and EvictionPolicy to Kotlin (#2144)", "pr_createdAt": "2020-04-25T11:46:06Z", "pr_url": "https://github.com/apollographql/apollo-android/pull/2220", "timeline": [{"oid": "9bce212b435b5bd9335e83dd5798c71697d5d83b", "url": "https://github.com/apollographql/apollo-android/commit/9bce212b435b5bd9335e83dd5798c71697d5d83b", "message": "Migrate Transaction and EvictionPolicy to Kotlin (#2144)", "committedDate": "2020-04-25T11:38:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTEzMDg0OA==", "url": "https://github.com/apollographql/apollo-android/pull/2220#discussion_r415130848", "bodyText": "Can you remove usages of Optional and replace them with Kotlin Nullable type? Of course we need to be careful in places where these are exposed as public API. But I think it is still possible to remove as much as possible.", "author": "tasomaniac", "createdAt": "2020-04-25T19:46:59Z", "path": "apollo-normalized-cache/src/main/java/com/apollographql/apollo/cache/normalized/lru/EvictionPolicy.kt", "diffHunk": "@@ -0,0 +1,92 @@\n+package com.apollographql.apollo.cache.normalized.lru\n+\n+import com.apollographql.apollo.api.internal.Optional\n+import java.util.concurrent.TimeUnit\n+\n+/**\n+ * Controls how long a [com.apollographql.apollo.cache.normalized.Record] will\n+ * stay in a [LruNormalizedCache].\n+ */\n+class EvictionPolicy internal constructor(\n+    private val maxSizeBytes: Optional<Long>,", "originalCommit": "9bce212b435b5bd9335e83dd5798c71697d5d83b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTEzMDk2NQ==", "url": "https://github.com/apollographql/apollo-android/pull/2220#discussion_r415130965", "bodyText": "JvmStatic?", "author": "tasomaniac", "createdAt": "2020-04-25T19:47:47Z", "path": "apollo-normalized-cache/src/main/java/com/apollographql/apollo/cache/normalized/lru/EvictionPolicy.kt", "diffHunk": "@@ -0,0 +1,92 @@\n+package com.apollographql.apollo.cache.normalized.lru\n+\n+import com.apollographql.apollo.api.internal.Optional\n+import java.util.concurrent.TimeUnit\n+\n+/**\n+ * Controls how long a [com.apollographql.apollo.cache.normalized.Record] will\n+ * stay in a [LruNormalizedCache].\n+ */\n+class EvictionPolicy internal constructor(\n+    private val maxSizeBytes: Optional<Long>,\n+    private val maxEntries: Optional<Long>,\n+    private val expireAfterAccess: Optional<Long>,\n+    private val expireAfterAccessTimeUnit: Optional<TimeUnit>,\n+    private val expireAfterWrite: Optional<Long>,\n+    private val expireAfterWriteTimeUnit: Optional<TimeUnit>\n+) {\n+\n+  fun maxSizeBytes(): Optional<Long> {\n+    return maxSizeBytes\n+  }\n+\n+  fun maxEntries(): Optional<Long> {\n+    return maxEntries\n+  }\n+\n+  fun expireAfterAccess(): Optional<Long> {\n+    return expireAfterAccess\n+  }\n+\n+  fun expireAfterAccessTimeUnit(): Optional<TimeUnit> {\n+    return expireAfterAccessTimeUnit\n+  }\n+\n+  fun expireAfterWrite(): Optional<Long> {\n+    return expireAfterWrite\n+  }\n+\n+  fun expireAfterWriteTimeUnit(): Optional<TimeUnit> {\n+    return expireAfterWriteTimeUnit\n+  }\n+\n+  class Builder internal constructor() {\n+    private var maxSizeBytes = Optional.absent<Long>()\n+    private var maxEntries = Optional.absent<Long>()\n+    private var expireAfterAccess = Optional.absent<Long>()\n+    private var expireAfterAccessTimeUnit = Optional.absent<TimeUnit>()\n+    private var expireAfterWrite = Optional.absent<Long>()\n+    private var expireAfterWriteTimeUnit = Optional.absent<TimeUnit>()\n+\n+    fun maxSizeBytes(maxSizeBytes: Long): Builder {\n+      this.maxSizeBytes = Optional.of(maxSizeBytes)\n+      return this\n+    }\n+\n+    fun maxEntries(maxEntries: Long): Builder {\n+      this.maxEntries = Optional.of(maxEntries)\n+      return this\n+    }\n+\n+    fun expireAfterAccess(time: Long, timeUnit: TimeUnit): Builder {\n+      expireAfterAccess = Optional.of(time)\n+      expireAfterAccessTimeUnit = Optional.of(timeUnit)\n+      return this\n+    }\n+\n+    fun expireAfterWrite(time: Long, timeUnit: TimeUnit): Builder {\n+      expireAfterWrite = Optional.of(time)\n+      expireAfterWriteTimeUnit = Optional.of(timeUnit)\n+      return this\n+    }\n+\n+    fun build(): EvictionPolicy {\n+      return EvictionPolicy(\n+          maxSizeBytes,\n+          maxEntries,\n+          expireAfterAccess,\n+          expireAfterAccessTimeUnit,\n+          expireAfterWrite,\n+          expireAfterWriteTimeUnit\n+      )\n+    }\n+  }\n+\n+  companion object {\n+    val NO_EVICTION = builder().build()\n+    fun builder(): Builder {", "originalCommit": "9bce212b435b5bd9335e83dd5798c71697d5d83b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTEzMjY2MA==", "url": "https://github.com/apollographql/apollo-android/pull/2220#discussion_r415132660", "bodyText": "I shouldn't have missed that", "author": "SubhrajyotiSen", "createdAt": "2020-04-25T19:57:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTEzMDk2NQ=="}], "type": "inlineReview"}, {"oid": "e08de22a26c93627eac60fdd9a5b701cfc23fb49", "url": "https://github.com/apollographql/apollo-android/commit/e08de22a26c93627eac60fdd9a5b701cfc23fb49", "message": "EvictionPolicy: replace Optional with Nullable type for internal usage", "committedDate": "2020-04-25T20:05:56Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTEzNDkwMw==", "url": "https://github.com/apollographql/apollo-android/pull/2220#discussion_r415134903", "bodyText": "@tasomaniac Should I add imports for @JvmStatic and @JvmField since they are needed for Multiplatform like you mentioned on #2211", "author": "SubhrajyotiSen", "createdAt": "2020-04-25T20:11:18Z", "path": "apollo-normalized-cache/src/main/java/com/apollographql/apollo/cache/normalized/lru/EvictionPolicy.kt", "diffHunk": "@@ -0,0 +1,96 @@\n+package com.apollographql.apollo.cache.normalized.lru\n+\n+import com.apollographql.apollo.api.internal.Optional\n+import java.util.concurrent.TimeUnit\n+\n+/**\n+ * Controls how long a [com.apollographql.apollo.cache.normalized.Record] will\n+ * stay in a [LruNormalizedCache].\n+ */\n+class EvictionPolicy internal constructor(\n+    private val maxSizeBytes: Optional<Long>,\n+    private val maxEntries: Optional<Long>,\n+    private val expireAfterAccess: Optional<Long>,\n+    private val expireAfterAccessTimeUnit: Optional<TimeUnit>,\n+    private val expireAfterWrite: Optional<Long>,\n+    private val expireAfterWriteTimeUnit: Optional<TimeUnit>\n+) {\n+\n+  fun maxSizeBytes(): Optional<Long> {\n+    return maxSizeBytes\n+  }\n+\n+  fun maxEntries(): Optional<Long> {\n+    return maxEntries\n+  }\n+\n+  fun expireAfterAccess(): Optional<Long> {\n+    return expireAfterAccess\n+  }\n+\n+  fun expireAfterAccessTimeUnit(): Optional<TimeUnit> {\n+    return expireAfterAccessTimeUnit\n+  }\n+\n+  fun expireAfterWrite(): Optional<Long> {\n+    return expireAfterWrite\n+  }\n+\n+  fun expireAfterWriteTimeUnit(): Optional<TimeUnit> {\n+    return expireAfterWriteTimeUnit\n+  }\n+\n+  class Builder internal constructor() {\n+    private var maxSizeBytes: Long? = null\n+    private var maxEntries: Long? = null\n+    private var expireAfterAccess: Long? = null\n+    private var expireAfterAccessTimeUnit: TimeUnit? = null\n+    private var expireAfterWrite: Long? = null\n+    private var expireAfterWriteTimeUnit: TimeUnit? = null\n+\n+    fun maxSizeBytes(maxSizeBytes: Long): Builder {\n+      this.maxSizeBytes = maxSizeBytes\n+      return this\n+    }\n+\n+    fun maxEntries(maxEntries: Long): Builder {\n+      this.maxEntries = maxEntries\n+      return this\n+    }\n+\n+    fun expireAfterAccess(time: Long, timeUnit: TimeUnit): Builder {\n+      expireAfterAccess = time\n+      expireAfterAccessTimeUnit = timeUnit\n+      return this\n+    }\n+\n+    fun expireAfterWrite(time: Long, timeUnit: TimeUnit): Builder {\n+      expireAfterWrite = time\n+      expireAfterWriteTimeUnit = timeUnit\n+      return this\n+    }\n+\n+    fun build(): EvictionPolicy {\n+      return EvictionPolicy(\n+          Optional.fromNullable(maxSizeBytes),\n+          Optional.fromNullable(maxEntries),\n+          Optional.fromNullable(expireAfterAccess),\n+          Optional.fromNullable(expireAfterAccessTimeUnit),\n+          Optional.fromNullable(expireAfterWrite),\n+          Optional.fromNullable(expireAfterWriteTimeUnit)\n+      )\n+    }\n+  }\n+\n+  companion object {\n+\n+    @JvmField\n+    val NO_EVICTION = builder().build()\n+\n+    @JvmStatic\n+    fun builder(): Builder {", "originalCommit": "e08de22a26c93627eac60fdd9a5b701cfc23fb49", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTEzNTI5Ng==", "url": "https://github.com/apollographql/apollo-android/pull/2220#discussion_r415135296", "bodyText": "No need to do it manually. Right now, they're not needed. When we move classes to common code, IntelliJ /Android Studio does this automatically.", "author": "tasomaniac", "createdAt": "2020-04-25T20:13:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTEzNDkwMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTI5NjMyNA==", "url": "https://github.com/apollographql/apollo-android/pull/2220#discussion_r415296324", "bodyText": "These are also private. Let's remove Optionals here too. You can take a look at this class for reference. Let's make these public and expose as val maxSizeBytes: Long?\nThen we can keep the below functions with Optional for backward compatibility reasons and deprecate them.\nhttps://github.com/apollographql/apollo-android/blob/master/apollo-normalized-cache-api/src/main/java/com/apollographql/apollo/cache/normalized/NormalizedCache.kt#L129-L130", "author": "tasomaniac", "createdAt": "2020-04-26T12:15:06Z", "path": "apollo-normalized-cache/src/main/java/com/apollographql/apollo/cache/normalized/lru/EvictionPolicy.kt", "diffHunk": "@@ -0,0 +1,96 @@\n+package com.apollographql.apollo.cache.normalized.lru\n+\n+import com.apollographql.apollo.api.internal.Optional\n+import java.util.concurrent.TimeUnit\n+\n+/**\n+ * Controls how long a [com.apollographql.apollo.cache.normalized.Record] will\n+ * stay in a [LruNormalizedCache].\n+ */\n+class EvictionPolicy internal constructor(\n+    private val maxSizeBytes: Optional<Long>,", "originalCommit": "e08de22a26c93627eac60fdd9a5b701cfc23fb49", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTMzNjY3Ng==", "url": "https://github.com/apollographql/apollo-android/pull/2220#discussion_r415336676", "bodyText": "Once I make the changes, should I updated the invocations in LruNormalizedCache?", "author": "SubhrajyotiSen", "createdAt": "2020-04-26T15:35:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTI5NjMyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTM0NDk5OA==", "url": "https://github.com/apollographql/apollo-android/pull/2220#discussion_r415344998", "bodyText": "Especially if it already converted to Kotlin, why not.", "author": "tasomaniac", "createdAt": "2020-04-26T16:15:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTI5NjMyNA=="}], "type": "inlineReview"}, {"oid": "6f8fe9dc1fb7fed50879f60b90f5fb6d9ed5f4c5", "url": "https://github.com/apollographql/apollo-android/commit/6f8fe9dc1fb7fed50879f60b90f5fb6d9ed5f4c5", "message": "Use Nullable isstead of Optional in EvictionPolicy", "committedDate": "2020-04-26T16:39:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTM1MDI1Mw==", "url": "https://github.com/apollographql/apollo-android/pull/2220#discussion_r415350253", "bodyText": "@tasomaniac I had to use force unwrap here since expireAfterAccess() expects a Nonnull.\nGiven that the existing implementation does not check with isPresent() for expireAfterAccessTimeUnit, it the force unwrap here okay?", "author": "SubhrajyotiSen", "createdAt": "2020-04-26T16:43:12Z", "path": "apollo-normalized-cache/src/main/java/com/apollographql/apollo/cache/normalized/lru/LruNormalizedCache.kt", "diffHunk": "@@ -21,21 +21,21 @@ class LruNormalizedCache internal constructor(evictionPolicy: EvictionPolicy) :\n \n   private val lruCache: Cache<String, Record> =\n       CacheBuilder.newBuilder().apply {\n-        if (evictionPolicy.maxSizeBytes().isPresent) {\n-          maximumWeight(evictionPolicy.maxSizeBytes().get()).weigher(\n+        if (evictionPolicy.maxSizeBytes != null) {\n+          maximumWeight(evictionPolicy.maxSizeBytes).weigher(\n               Weigher { key: String, value: Record ->\n                 key.toByteArray(Charset.defaultCharset()).size + value.sizeEstimateBytes()\n               }\n           )\n         }\n-        if (evictionPolicy.maxEntries().isPresent) {\n-          maximumSize(evictionPolicy.maxEntries().get())\n+        if (evictionPolicy.maxEntries != null) {\n+          maximumSize(evictionPolicy.maxEntries)\n         }\n-        if (evictionPolicy.expireAfterAccess().isPresent) {\n-          expireAfterAccess(evictionPolicy.expireAfterAccess().get(), evictionPolicy.expireAfterAccessTimeUnit().get())\n+        if (evictionPolicy.expireAfterAccess != null) {\n+          expireAfterAccess(evictionPolicy.expireAfterAccess, evictionPolicy.expireAfterAccessTimeUnit!!)", "originalCommit": "6f8fe9dc1fb7fed50879f60b90f5fb6d9ed5f4c5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTM1MjE1NA==", "url": "https://github.com/apollographql/apollo-android/pull/2220#discussion_r415352154", "bodyText": "Yeah, I think this is fine. It's the exact same behavior", "author": "tasomaniac", "createdAt": "2020-04-26T16:53:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTM1MDI1Mw=="}], "type": "inlineReview"}]}