{"pr_number": 2324, "pr_title": "[Doc] use Kotlin in README.md and other updates", "pr_createdAt": "2020-06-01T17:18:16Z", "pr_url": "https://github.com/apollographql/apollo-android/pull/2324", "timeline": [{"oid": "b61897e4356f8ba361f7e91c8199bfe034bfa6f0", "url": "https://github.com/apollographql/apollo-android/commit/b61897e4356f8ba361f7e91c8199bfe034bfa6f0", "message": "update docs", "committedDate": "2020-06-01T17:02:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM4MjE5OQ==", "url": "https://github.com/apollographql/apollo-android/pull/2324#discussion_r433382199", "bodyText": "I don't think it needs to be app. What about \"In your Gradle module's build.gradle(.kts) file\"", "author": "tasomaniac", "createdAt": "2020-06-01T17:32:52Z", "path": "README.md", "diffHunk": "@@ -25,122 +25,95 @@ Apollo-android features:\n \n The latest Gradle plugin version is [ ![Download](https://api.bintray.com/packages/apollographql/android/apollo/images/download.svg) ](https://bintray.com/apollographql/android/apollo-gradle-plugin/_latestVersion)\n \n-To use this plugin, add the dependency to your project's root build.gradle file:\n+In your app Gradle file, apply the `com.apollographql.apollo` plugin and add the Apollo dependencies:", "originalCommit": "b61897e4356f8ba361f7e91c8199bfe034bfa6f0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM4ODAyNg==", "url": "https://github.com/apollographql/apollo-android/pull/2324#discussion_r433388026", "bodyText": "Yep. I chose app because I think there were other references but more generic works for me too.", "author": "martinbonnin", "createdAt": "2020-06-01T17:43:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM4MjE5OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM4MzI3NQ==", "url": "https://github.com/apollographql/apollo-android/pull/2324#discussion_r433383275", "bodyText": "Similar to these, what about adding the api too? We can have a comment like:\n// optional: if you do not want to depend on runtime, add apollo-api for generated code.\n\nIt would be really good for awareness", "author": "tasomaniac", "createdAt": "2020-06-01T17:34:54Z", "path": "README.md", "diffHunk": "@@ -25,122 +25,95 @@ Apollo-android features:\n \n The latest Gradle plugin version is [ ![Download](https://api.bintray.com/packages/apollographql/android/apollo/images/download.svg) ](https://bintray.com/apollographql/android/apollo-gradle-plugin/_latestVersion)\n \n-To use this plugin, add the dependency to your project's root build.gradle file:\n+In your app Gradle file, apply the `com.apollographql.apollo` plugin and add the Apollo dependencies:\n \n ```groovy\n-buildscript {\n-  repositories {\n-    jcenter()\n-  }\n-  dependencies {\n-    classpath(\"com.apollographql.apollo:apollo-gradle-plugin:x.y.z\")\n-  }\n+// app/build.gradle or app/build.gradle.kts\n+plugins {\n+  id(\"com.apollographql.apollo\").version(\"x.y.z\")\n }\n-```\n-\n-Then add the dependencies to your app's build.gradle and apply file and apply the `com.apollographql.apollo` plugin:\n-\n-```groovy\n-apply plugin: 'com.apollographql.apollo'\n \n repositories {\n-    jcenter()\n+  jcenter()\n }\n \n dependencies {\n   implementation(\"com.apollographql.apollo:apollo-runtime:x.y.z\")\n   \n-  // If not already on your classpath, you might need the jetbrains annotations\n-  compileOnly(\"org.jetbrains:annotations:13.0\")\n-  testCompileOnly(\"org.jetbrains:annotations:13.0\")\n+  // optional: if you want to use the normalized cache", "originalCommit": "b61897e4356f8ba361f7e91c8199bfe034bfa6f0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM4NDQwNQ==", "url": "https://github.com/apollographql/apollo-android/pull/2324#discussion_r433384405", "bodyText": "This always confused me. Explicit running of this task is not necessary. Building/assembling also works.", "author": "tasomaniac", "createdAt": "2020-06-01T17:37:05Z", "path": "README.md", "diffHunk": "@@ -25,122 +25,95 @@ Apollo-android features:\n \n The latest Gradle plugin version is [ ![Download](https://api.bintray.com/packages/apollographql/android/apollo/images/download.svg) ](https://bintray.com/apollographql/android/apollo-gradle-plugin/_latestVersion)\n \n-To use this plugin, add the dependency to your project's root build.gradle file:\n+In your app Gradle file, apply the `com.apollographql.apollo` plugin and add the Apollo dependencies:\n \n ```groovy\n-buildscript {\n-  repositories {\n-    jcenter()\n-  }\n-  dependencies {\n-    classpath(\"com.apollographql.apollo:apollo-gradle-plugin:x.y.z\")\n-  }\n+// app/build.gradle or app/build.gradle.kts\n+plugins {\n+  id(\"com.apollographql.apollo\").version(\"x.y.z\")\n }\n-```\n-\n-Then add the dependencies to your app's build.gradle and apply file and apply the `com.apollographql.apollo` plugin:\n-\n-```groovy\n-apply plugin: 'com.apollographql.apollo'\n \n repositories {\n-    jcenter()\n+  jcenter()\n }\n \n dependencies {\n   implementation(\"com.apollographql.apollo:apollo-runtime:x.y.z\")\n   \n-  // If not already on your classpath, you might need the jetbrains annotations\n-  compileOnly(\"org.jetbrains:annotations:13.0\")\n-  testCompileOnly(\"org.jetbrains:annotations:13.0\")\n+  // optional: if you want to use the normalized cache\n+  implementation(\"com.apollographql.apollo:apollo-normalized-cache-sqlite:x.y.z\")\n+  // optional: for coroutines support\n+  implementation(\"com.apollographql.apollo:apollo-coroutines-support:x.y.z\")\n+  // optional: for RxJava3 support  \n+  implementation(\"com.apollographql.apollo:apollo-rx3-support:x.y.z\")\n }\n ```\n \n-## Generating models from your queries\n+## Downloading a schema.json file\n \n-1) Create a directory for your GraphQL files like you would do for Java/Kotlin: `src/main/graphql/com/example/`. Apollo-Android will generate models in the `com.apollographql.apollo.sample` package.\n-2) Add your `schema.json` to the directory at `src/main/graphql/com/example/schema.json`. If you don't have a `schema.json` file yet, read the section about [downloading a schema file](#downloading-a-schemajson-file). \n-3) Put your GraphQL queries in a `.graphql` files. For an example: `src/main/graphql/com/example/feed.graphql`: \n+Apollo-Android requires an introspection schema. You can get a schema.json file by running an introspection query on your endpoint. The Apollo Gradle plugin exposes a `downloadApolloSchema` task to help with this. You can download a schema by specifying your endpoint and the location where you want the schema to be downloaded:\n \n+```bash\n+./gradlew downloadApolloSchema --endpoint=https://your.graphql.endpoint --schema=app/src/main/graphql/com/example/schema.json\n ```\n-query FeedQuery($type: FeedType!, $limit: Int!) {\n-  feed(type: $type, limit: $limit) {\n-    comments {\n-      ...FeedCommentFragment\n-    }\n-    repository {\n-      ...RepositoryFragment\n-    }\n-    postedBy {\n-      login\n-    }\n-  }\n-}\n \n-fragment RepositoryFragment on Repository {\n-  name\n-  full_name\n-  owner {\n-    login\n-  }\n-}\n+If your endpoint requires authentication, you can pass custom HTTP headers:\n+\n+```\n+./gradlew downloadApolloSchema --endpoint=\"https://your.graphql.endpoint\" --schema=\"app/src/main/graphql/com/example\" --header=\"Authorization: Bearer $TOKEN\"\n+```\n \n-fragment FeedCommentFragment on Comment {\n-  id\n-  postedBy {\n-    login\n+## Generating models from your queries\n+\n+1) Create a directory for your GraphQL files like you would do for Java/Kotlin: `src/main/graphql/com/example/`. Apollo-Android will generate models in the `com.apollographql.apollo.sample` package.\n+2) Add your `schema.json` to the directory at `src/main/graphql/com/example/schema.json`. If you don't have a `schema.json` file yet, read the section about [downloading a schema file](#downloading-a-schemajson-file). \n+3) Put your GraphQL queries in a `.graphql` files. For an example: `src/main/graphql/com/example/LaunchDetails.graphql`: \n+\n+```graphql\n+query LaunchDetails($id:ID!) {\n+  launch(id: $id) {\n+    id\n+    site\n+    mission {\n+      name\n+      missionPatch(size:LARGE)\n+    }\n   }\n-  content\n }\n ```\n \n 4) Decide if you want to generate Kotlin or Java models:\n \n ```groovy\n-// build.gradle or build.gradle.kts\n+// app/build.gradle or app/build.gradle.kts\n apollo {\n   generateKotlinModels.set(true) // or false for Java models\n }\n ```\n \n-5) Execute `./gradlew generateApolloSources` to generate the models from your queries. This will create a generated `FeedQuery` Java or Kotlin source file for your query.\n+5) Execute `./gradlew generateApolloSources` to generate the models from your queries. This will create a generated `LaunchDetailsQuery` Java or Kotlin source file for your query.", "originalCommit": "b61897e4356f8ba361f7e91c8199bfe034bfa6f0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM4ODI5MQ==", "url": "https://github.com/apollographql/apollo-android/pull/2324#discussion_r433388291", "bodyText": "Sounds good, I'll remove this.", "author": "martinbonnin", "createdAt": "2020-06-01T17:44:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM4NDQwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM4NTM1MA==", "url": "https://github.com/apollographql/apollo-android/pull/2324#discussion_r433385350", "bodyText": "I think this is nice since it gets picked up and be available in getting started page on the docs website", "author": "tasomaniac", "createdAt": "2020-06-01T17:38:51Z", "path": "README.md", "diffHunk": "@@ -250,20 +194,14 @@ Advanced topics are available in [the official docs](https://www.apollographql.c\n * [subscriptions.md](https://www.apollographql.com/docs/android/advanced/subscriptions/)\n * [migrations.md](https://www.apollographql.com/docs/android/essentials/migration/)\n \n-\n-## Changelog", "originalCommit": "b61897e4356f8ba361f7e91c8199bfe034bfa6f0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM4OTE1MQ==", "url": "https://github.com/apollographql/apollo-android/pull/2324#discussion_r433389151", "bodyText": "It's already there actually, Release history in the Release section. Maybe we put the changelog word there for people looking for this particular word ?", "author": "martinbonnin", "createdAt": "2020-06-01T17:45:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM4NTM1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQwNjE5Nw==", "url": "https://github.com/apollographql/apollo-android/pull/2324#discussion_r433406197", "bodyText": "Nope, I just didn't see it. I think this is all good.", "author": "tasomaniac", "createdAt": "2020-06-01T18:18:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM4NTM1MA=="}], "type": "inlineReview"}, {"oid": "0663b8b9a5c7ca9d2a08a7590d8a99e5eb5450ee", "url": "https://github.com/apollographql/apollo-android/commit/0663b8b9a5c7ca9d2a08a7590d8a99e5eb5450ee", "message": "remove app, use changelog", "committedDate": "2020-06-01T18:09:31Z", "type": "commit"}, {"oid": "f2292a17de4f6e855ee5a945d6e4b4ac023f8287", "url": "https://github.com/apollographql/apollo-android/commit/f2292a17de4f6e855ee5a945d6e4b4ac023f8287", "message": "remove the manual gradlew invocation", "committedDate": "2020-06-01T18:11:57Z", "type": "commit"}, {"oid": "0e8e996d4828b24ae35f20c12c5c7cbfb8d65689", "url": "https://github.com/apollographql/apollo-android/commit/0e8e996d4828b24ae35f20c12c5c7cbfb8d65689", "message": "add apollo-api", "committedDate": "2020-06-01T18:14:30Z", "type": "commit"}, {"oid": "c568c02c29718458977a0bf571c34eee5753e695", "url": "https://github.com/apollographql/apollo-android/commit/c568c02c29718458977a0bf571c34eee5753e695", "message": "Copyedit to Android README, etc. (#2325)\n\n* Copyedit to Android README, etc.\r\n\r\n* rename 'Apollo Client for Android' -> 'Apollo Android'\r\n\r\nCo-authored-by: Stephen Barlow <stephenbarlow@APOLLO-StephenBarlow.attlocal.net>\r\nCo-authored-by: Martin Bonnin <martin@mbonnin.net>", "committedDate": "2020-06-02T17:55:58Z", "type": "commit"}]}