{"pr_number": 2021, "pr_title": "Convert top level api classes to Kotlin", "pr_createdAt": "2020-02-27T18:56:57Z", "pr_url": "https://github.com/apollographql/apollo-android/pull/2021", "timeline": [{"oid": "a5b1a6acfb98e5bb4719cd3c413c68ef0e47a2af", "url": "https://github.com/apollographql/apollo-android/commit/a5b1a6acfb98e5bb4719cd3c413c68ef0e47a2af", "message": "Fix build", "committedDate": "2020-02-28T15:19:19Z", "type": "forcePushed"}, {"oid": "6b615d90b711c2c474844a8c6fe8200d4f1d020a", "url": "https://github.com/apollographql/apollo-android/commit/6b615d90b711c2c474844a8c6fe8200d4f1d020a", "message": "Fix build", "committedDate": "2020-02-28T15:57:17Z", "type": "forcePushed"}, {"oid": "b23bd7ab90ecd096a789f4faad75d89c0d0ccb2e", "url": "https://github.com/apollographql/apollo-android/commit/b23bd7ab90ecd096a789f4faad75d89c0d0ccb2e", "message": "Fix build", "committedDate": "2020-02-28T16:22:11Z", "type": "forcePushed"}, {"oid": "68c6bba46243ef2ab6b5219c545b5f7a1e3d2114", "url": "https://github.com/apollographql/apollo-android/commit/68c6bba46243ef2ab6b5219c545b5f7a1e3d2114", "message": "Convert top level api classes to Kotlin", "committedDate": "2020-02-28T20:58:40Z", "type": "commit"}, {"oid": "292368db7c5a7464f1061fb85cdfffea4c97f1be", "url": "https://github.com/apollographql/apollo-android/commit/292368db7c5a7464f1061fb85cdfffea4c97f1be", "message": "Fix bad migration", "committedDate": "2020-02-28T20:58:40Z", "type": "commit"}, {"oid": "2d207965ca12b4917d5f9da5e061f006e2c21cb8", "url": "https://github.com/apollographql/apollo-android/commit/2d207965ca12b4917d5f9da5e061f006e2c21cb8", "message": "Fix build", "committedDate": "2020-02-28T20:58:40Z", "type": "commit"}, {"oid": "35ac240ba8db3d498a90b8f097680034c9c353b7", "url": "https://github.com/apollographql/apollo-android/commit/35ac240ba8db3d498a90b8f097680034c9c353b7", "message": "Fix scalar type adapters", "committedDate": "2020-02-28T20:58:40Z", "type": "commit"}, {"oid": "6f5e01afb13a776427bf70d8954768b88bf44c60", "url": "https://github.com/apollographql/apollo-android/commit/6f5e01afb13a776427bf70d8954768b88bf44c60", "message": "Fix generated test fixtures", "committedDate": "2020-02-28T20:58:40Z", "type": "commit"}, {"oid": "6f5e01afb13a776427bf70d8954768b88bf44c60", "url": "https://github.com/apollographql/apollo-android/commit/6f5e01afb13a776427bf70d8954768b88bf44c60", "message": "Fix generated test fixtures", "committedDate": "2020-02-28T20:58:40Z", "type": "forcePushed"}, {"oid": "0cb52da41c0bd0ca5b8e55ed5fee8e6fc610347c", "url": "https://github.com/apollographql/apollo-android/commit/0cb52da41c0bd0ca5b8e55ed5fee8e6fc610347c", "message": "Fix build", "committedDate": "2020-02-28T23:39:38Z", "type": "forcePushed"}, {"oid": "6f7f5b372a2d642d4d2ba6b924ef26f999956673", "url": "https://github.com/apollographql/apollo-android/commit/6f7f5b372a2d642d4d2ba6b924ef26f999956673", "message": "Fix build", "committedDate": "2020-02-29T00:11:42Z", "type": "forcePushed"}, {"oid": "17c87de51892bac9064c8c7b53e22f0c80073d0b", "url": "https://github.com/apollographql/apollo-android/commit/17c87de51892bac9064c8c7b53e22f0c80073d0b", "message": "Fix build", "committedDate": "2020-02-29T01:04:11Z", "type": "commit"}, {"oid": "17c87de51892bac9064c8c7b53e22f0c80073d0b", "url": "https://github.com/apollographql/apollo-android/commit/17c87de51892bac9064c8c7b53e22f0c80073d0b", "message": "Fix build", "committedDate": "2020-02-29T01:04:11Z", "type": "forcePushed"}, {"oid": "265a7e5f75d7a4141fee77730b74be242798d518", "url": "https://github.com/apollographql/apollo-android/commit/265a7e5f75d7a4141fee77730b74be242798d518", "message": "Bump kotlin poet dependency and fix issues", "committedDate": "2020-02-29T02:41:40Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA5Nzk4Nw==", "url": "https://github.com/apollographql/apollo-android/pull/2021#discussion_r386097987", "bodyText": "Is the @JvmField required here ? It exposes a field publicly for no apparent reason.", "author": "martinbonnin", "createdAt": "2020-03-01T11:00:06Z", "path": "apollo-api/src/main/java/com/apollographql/apollo/api/Error.kt", "diffHunk": "@@ -0,0 +1,74 @@\n+package com.apollographql.apollo.api\n+\n+/**\n+ * Represents an error response returned from the GraphQL server\n+ */\n+data class Error(\n+    /**\n+     * Server error message\n+     */\n+    @JvmField\n+    val message: String,", "originalCommit": "265a7e5f75d7a4141fee77730b74be242798d518", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA5ODE2Nw==", "url": "https://github.com/apollographql/apollo-android/pull/2021#discussion_r386098167", "bodyText": "+1 for the deprecation notice \ud83d\udc4d\nI wonder how that's going to play with Java if we decide to remove @JvmField as mentioned above.", "author": "martinbonnin", "createdAt": "2020-03-01T11:02:16Z", "path": "apollo-api/src/main/java/com/apollographql/apollo/api/Error.kt", "diffHunk": "@@ -0,0 +1,74 @@\n+package com.apollographql.apollo.api\n+\n+/**\n+ * Represents an error response returned from the GraphQL server\n+ */\n+data class Error(\n+    /**\n+     * Server error message\n+     */\n+    @JvmField\n+    val message: String,\n+\n+    /**\n+     * Locations of the errors in the GraphQL operation\n+     */\n+    @JvmField\n+    val locations: List<Location> = emptyList(),\n+\n+    /**\n+     * Custom attributes associated with this error\n+     */\n+    @JvmField\n+    val customAttributes: Map<String, Any?> = emptyMap()\n+) {\n+\n+  /**\n+   * Returns server error message.\n+   */\n+  @Deprecated(message = \"Use property instead\", replaceWith = ReplaceWith(expression = \"message\"))\n+  fun message(): String? = message", "originalCommit": "265a7e5f75d7a4141fee77730b74be242798d518", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjEyMjM5Ng==", "url": "https://github.com/apollographql/apollo-android/pull/2021#discussion_r386122396", "bodyText": "On Java as far as I can see it just marked as deprecated without replace action, just a message. I think we are good here.", "author": "sav007", "createdAt": "2020-03-01T16:44:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA5ODE2Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA5ODYzNQ==", "url": "https://github.com/apollographql/apollo-android/pull/2021#discussion_r386098635", "bodyText": "Why do we need FileUpload to be a data class ?", "author": "martinbonnin", "createdAt": "2020-03-01T11:10:22Z", "path": "apollo-api/src/main/java/com/apollographql/apollo/api/FileUpload.kt", "diffHunk": "@@ -0,0 +1,5 @@\n+package com.apollographql.apollo.api\n+\n+import java.io.File\n+\n+data class FileUpload(@JvmField val mimetype: String, @JvmField val file: File)", "originalCommit": "265a7e5f75d7a4141fee77730b74be242798d518", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA5OTA0Ng==", "url": "https://github.com/apollographql/apollo-android/pull/2021#discussion_r386099046", "bodyText": "This used to have throw IOException in the signature. I don't think it's a huge problem since I think marshal is only used internally ? If that's the case, it would be worth hiding that in the .internal package at some point (can be done in a later PR)", "author": "martinbonnin", "createdAt": "2020-03-01T11:16:30Z", "path": "apollo-api/src/main/java/com/apollographql/apollo/api/Operation.kt", "diffHunk": "@@ -0,0 +1,125 @@\n+package com.apollographql.apollo.api\n+\n+import com.apollographql.apollo.api.internal.InputFieldMarshaller\n+import com.apollographql.apollo.api.internal.ResponseFieldMapper\n+import com.apollographql.apollo.api.internal.ResponseFieldMarshaller\n+import com.apollographql.apollo.api.internal.json.InputFieldJsonWriter\n+import com.apollographql.apollo.api.internal.json.JsonWriter\n+import okio.Buffer\n+import okio.BufferedSource\n+import java.io.IOException\n+\n+/**\n+ * Represents a GraphQL operation (mutation or query).\n+ */\n+interface Operation<D : Operation.Data, T, V : Operation.Variables> {\n+  /**\n+   * Returns the raw GraphQL operation String.\n+   */\n+  fun queryDocument(): String\n+\n+  /**\n+   * Returns the variables associated with this GraphQL operation.\n+   */\n+  fun variables(): V\n+\n+  /**\n+   * Returns a mapper that maps the server response data to generated model class [D].\n+   */\n+  fun responseFieldMapper(): ResponseFieldMapper<D>\n+\n+  /**\n+   * Wraps the generated response data class [D] with another class. For example, a use case for this would be to\n+   * wrap the generated response data class in an Optional i.e. Optional.fromNullable(data).\n+   */\n+  fun wrapData(data: D?): T?\n+\n+  /**\n+   * Returns GraphQL operation name [OperationName].\n+   */\n+  fun name(): OperationName\n+\n+  /**\n+   * Returns a unique identifier for this operation.\n+   */\n+  fun operationId(): String\n+\n+  /**\n+   * Parses GraphQL operation raw response from the [source] with provided [scalarTypeAdapters] and returns result [Response]\n+   */\n+  @Throws(IOException::class)\n+  fun parse(source: BufferedSource, scalarTypeAdapters: ScalarTypeAdapters): Response<T>\n+\n+  /**\n+   * Parses GraphQL operation raw response from the [source] and returns result [Response]\n+   */\n+  @Throws(IOException::class)\n+  fun parse(source: BufferedSource): Response<T>\n+\n+  /**\n+   * Abstraction for data returned by the server in response to this operation.\n+   */\n+  interface Data {\n+\n+    /**\n+     * Returns marshaller [ResponseFieldMarshaller] to serialize operation data\n+     */\n+    fun marshaller(): ResponseFieldMarshaller\n+  }\n+\n+  /**\n+   * Abstraction for the variables which are a part of the GraphQL operation.\n+   * For example, for the following GraphQL operation, Variables represents values for GraphQL '$type' and '$limit' variables:\n+   *\n+   * ```\n+   *  query FeedQuery($type: FeedType!, $limit: Int!) {\n+   *    feedEntries: feed(type: $type, limit: $limit) {\n+   *      id\n+   *      repository {\n+   *        ...RepositoryFragment\n+   *      }\n+   *      postedBy {\n+   *        login\n+   *      }\n+   *    }\n+   * }\n+   * ```\n+   */\n+  open class Variables {\n+\n+    open fun valueMap(): Map<String, Any?> {\n+      return emptyMap()\n+    }\n+\n+    open fun marshaller(): InputFieldMarshaller {\n+      return InputFieldMarshaller { }\n+    }\n+\n+    /**\n+     * Serializes variables as JSON string to be sent to the GraphQL server.\n+     */\n+    fun marshal(): String {", "originalCommit": "265a7e5f75d7a4141fee77730b74be242798d518", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "3a09ca7ba919031afdeb28a9b8fc1c393bab25ad", "url": "https://github.com/apollographql/apollo-android/commit/3a09ca7ba919031afdeb28a9b8fc1c393bab25ad", "message": "Feedback", "committedDate": "2020-03-01T17:02:11Z", "type": "commit"}, {"oid": "3a09ca7ba919031afdeb28a9b8fc1c393bab25ad", "url": "https://github.com/apollographql/apollo-android/commit/3a09ca7ba919031afdeb28a9b8fc1c393bab25ad", "message": "Feedback", "committedDate": "2020-03-01T17:02:11Z", "type": "forcePushed"}, {"oid": "98742d62a99e8b46a5944072c0af9f24f62cd067", "url": "https://github.com/apollographql/apollo-android/commit/98742d62a99e8b46a5944072c0af9f24f62cd067", "message": "Fix build", "committedDate": "2020-03-01T17:24:18Z", "type": "commit"}, {"oid": "795bf13ae1b022e927300e5c0811f7529d3587b3", "url": "https://github.com/apollographql/apollo-android/commit/795bf13ae1b022e927300e5c0811f7529d3587b3", "message": "Add equals / hashcode implementations", "committedDate": "2020-03-01T17:46:14Z", "type": "commit"}]}