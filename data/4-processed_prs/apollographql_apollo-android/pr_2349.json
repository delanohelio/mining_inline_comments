{"pr_number": 2349, "pr_title": "[Runtime] fix AbstractMethodError due to @JvmSynthetic", "pr_createdAt": "2020-06-09T12:53:23Z", "pr_url": "https://github.com/apollographql/apollo-android/pull/2349", "timeline": [{"oid": "1e55a5fd297540dde55ac229511328cef6d48e9f", "url": "https://github.com/apollographql/apollo-android/commit/1e55a5fd297540dde55ac229511328cef6d48e9f", "message": "convert CacheKeyBuilderTest to kotlin", "committedDate": "2020-06-09T12:02:40Z", "type": "commit"}, {"oid": "1f6337686774d494feda3ee3a66b7268379fa329", "url": "https://github.com/apollographql/apollo-android/commit/1f6337686774d494feda3ee3a66b7268379fa329", "message": "convert SortedInputFieldMapWriter to kotlin", "committedDate": "2020-06-09T12:42:44Z", "type": "commit"}, {"oid": "0ca57eb7e26391e2baef08dbf8890335f96bbf0b", "url": "https://github.com/apollographql/apollo-android/commit/0ca57eb7e26391e2baef08dbf8890335f96bbf0b", "message": "remove JvmSynthetic", "committedDate": "2020-06-09T12:44:58Z", "type": "commit"}, {"oid": "1669fc93878db9054ba590f6125600c128cb2fcd", "url": "https://github.com/apollographql/apollo-android/commit/1669fc93878db9054ba590f6125600c128cb2fcd", "message": "restore @JvmSynthetic on the `invoke` method", "committedDate": "2020-06-09T13:01:03Z", "type": "commit"}, {"oid": "1669fc93878db9054ba590f6125600c128cb2fcd", "url": "https://github.com/apollographql/apollo-android/commit/1669fc93878db9054ba590f6125600c128cb2fcd", "message": "restore @JvmSynthetic on the `invoke` method", "committedDate": "2020-06-09T13:01:03Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQyMjcxNw==", "url": "https://github.com/apollographql/apollo-android/pull/2349#discussion_r437422717", "bodyText": "Just curious why this test was converted to Kotlin, is it required by this PR?", "author": "sav007", "createdAt": "2020-06-09T13:37:18Z", "path": "apollo-normalized-cache/src/test/java/com/apollographql/apollo/cache/normalized/internal/CacheKeyBuilderTest.kt", "diffHunk": "@@ -0,0 +1,369 @@\n+package com.apollographql.apollo.cache.normalized.internal\n+\n+import com.apollographql.apollo.api.InputType\n+import com.apollographql.apollo.api.Operation\n+import com.apollographql.apollo.api.ResponseField\n+import com.apollographql.apollo.api.ResponseField.Companion.forString\n+import com.apollographql.apollo.api.ScalarType\n+import com.apollographql.apollo.api.internal.InputFieldMarshaller\n+import com.apollographql.apollo.api.internal.InputFieldWriter\n+import com.apollographql.apollo.api.internal.UnmodifiableMapBuilder\n+import com.google.common.truth.Truth\n+import org.junit.Test\n+import java.io.IOException\n+import java.math.BigDecimal\n+import java.util.HashMap\n+\n+class CacheKeyBuilderTest {", "originalCommit": "1669fc93878db9054ba590f6125600c128cb2fcd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQyNDc2Mg==", "url": "https://github.com/apollographql/apollo-android/pull/2349#discussion_r437424762", "bodyText": "In Kotlin, this test can make use of InputFieldWriter.writeList(String, (ListItemWriter) -> Unit) (the version that takes a block as parameter) and therefore reproduce the problem.", "author": "martinbonnin", "createdAt": "2020-06-09T13:40:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQyMjcxNw=="}], "type": "inlineReview"}, {"oid": "cead9b2efe2103d9188829c27fdf35c6ef359d2c", "url": "https://github.com/apollographql/apollo-android/commit/cead9b2efe2103d9188829c27fdf35c6ef359d2c", "message": "ignore javadoc errors for apollo-api", "committedDate": "2020-06-09T14:40:34Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzUxMzg1OQ==", "url": "https://github.com/apollographql/apollo-android/pull/2349#discussion_r437513859", "bodyText": "Instead of init, can you move this to constructor. We also shouldn't use checkNotNull in kotlin.", "author": "tasomaniac", "createdAt": "2020-06-09T15:20:36Z", "path": "apollo-normalized-cache/src/main/java/com/apollographql/apollo/cache/normalized/internal/SortedInputFieldMapWriter.kt", "diffHunk": "@@ -0,0 +1,148 @@\n+package com.apollographql.apollo.cache.normalized.internal\n+\n+import com.apollographql.apollo.api.ScalarType\n+import com.apollographql.apollo.api.internal.InputFieldMarshaller\n+import com.apollographql.apollo.api.internal.InputFieldWriter\n+import com.apollographql.apollo.api.internal.Utils.__checkNotNull\n+import java.io.IOException\n+import java.util.ArrayList\n+import java.util.Collections\n+import java.util.Comparator\n+import java.util.TreeMap\n+\n+class SortedInputFieldMapWriter(fieldNameComparator: Comparator<String>) : InputFieldWriter {\n+  private val fieldNameComparator: Comparator<String>\n+  private val buffer: MutableMap<String, Any?>\n+  fun map(): Map<String, Any?> {\n+    return Collections.unmodifiableMap(buffer)\n+  }\n+\n+  override fun writeString(fieldName: String, value: String?) {\n+    buffer[fieldName] = value\n+  }\n+\n+  override fun writeInt(fieldName: String, value: Int?) {\n+    buffer[fieldName] = value\n+  }\n+\n+  override fun writeLong(fieldName: String, value: Long?) {\n+    buffer[fieldName] = value\n+  }\n+\n+  override fun writeDouble(fieldName: String, value: Double?) {\n+    buffer[fieldName] = value\n+  }\n+\n+  override fun writeNumber(fieldName: String, value: Number?) {\n+    buffer[fieldName] = value\n+  }\n+\n+  override fun writeBoolean(fieldName: String, value: Boolean?) {\n+    buffer[fieldName] = value\n+  }\n+\n+  override fun writeCustom(fieldName: String, scalarType: ScalarType, value: Any?) {\n+    buffer[fieldName] = value\n+  }\n+\n+  @Throws(IOException::class)\n+  override fun writeObject(fieldName: String, marshaller: InputFieldMarshaller?) {\n+    if (marshaller == null) {\n+      buffer[fieldName] = null\n+    } else {\n+      val nestedWriter = SortedInputFieldMapWriter(fieldNameComparator)\n+      marshaller.marshal(nestedWriter)\n+      buffer[fieldName] = nestedWriter.buffer\n+    }\n+  }\n+\n+  @Throws(IOException::class)\n+  override fun writeList(fieldName: String, listWriter: InputFieldWriter.ListWriter?) {\n+    if (listWriter == null) {\n+      buffer[fieldName] = null\n+    } else {\n+      val listItemWriter = ListItemWriter(fieldNameComparator)\n+      listWriter.write(listItemWriter)\n+      buffer[fieldName] = listItemWriter.list\n+    }\n+  }\n+\n+  override fun writeMap(fieldName: String, value: Map<String, Any?>?) {\n+    buffer[fieldName] = value\n+  }\n+\n+  private open class ListItemWriter internal constructor(val fieldNameComparator: Comparator<String>) : InputFieldWriter.ListItemWriter {\n+    val list: MutableList<Any?> = ArrayList<Any?>()\n+    override fun writeString(value: String?) {\n+      if (value != null) {\n+        list.add(value)\n+      }\n+    }\n+\n+    override fun writeInt(value: Int?) {\n+      if (value != null) {\n+        list.add(value)\n+      }\n+    }\n+\n+    override fun writeLong(value: Long?) {\n+      if (value != null) {\n+        list.add(value)\n+      }\n+    }\n+\n+    override fun writeDouble(value: Double?) {\n+      if (value != null) {\n+        list.add(value)\n+      }\n+    }\n+\n+    override fun writeNumber(value: Number?) {\n+      if (value != null) {\n+        list.add(value)\n+      }\n+    }\n+\n+    override fun writeBoolean(value: Boolean?) {\n+      if (value != null) {\n+        list.add(value)\n+      }\n+    }\n+\n+    override fun writeCustom(scalarType: ScalarType, value: Any?) {\n+      if (value != null) {\n+        list.add(value)\n+      }\n+    }\n+\n+    @Throws(IOException::class)\n+    override fun writeObject(marshaller: InputFieldMarshaller?) {\n+      if (marshaller != null) {\n+        val nestedWriter = SortedInputFieldMapWriter(fieldNameComparator)\n+        marshaller.marshal(nestedWriter)\n+        list.add(nestedWriter.buffer)\n+      }\n+    }\n+\n+    @Throws(IOException::class)\n+    override fun writeList(listWriter: InputFieldWriter.ListWriter?) {\n+      if (listWriter != null) {\n+        val nestedListItemWriter = ListItemWriter(fieldNameComparator)\n+        listWriter.write(nestedListItemWriter)\n+        list.add(nestedListItemWriter.list)\n+      }\n+    }\n+\n+    override fun writeMap(value: Map<String, Any?>?) {\n+      if (value != null) {\n+        list.add(value)\n+      }\n+    }\n+\n+  }\n+\n+  init {\n+    this.fieldNameComparator = __checkNotNull(fieldNameComparator, \"fieldNameComparator == null\")", "originalCommit": "cead9b2efe2103d9188829c27fdf35c6ef359d2c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU0MDI2NA==", "url": "https://github.com/apollographql/apollo-android/pull/2349#discussion_r437540264", "bodyText": "Sorry I forgot to check the automatic code conversion there \ud83d\ude05. Thank for the heads up!", "author": "martinbonnin", "createdAt": "2020-06-09T15:53:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzUxMzg1OQ=="}], "type": "inlineReview"}, {"oid": "89caa22896fb7cbff6df8e362721a32bd5007a60", "url": "https://github.com/apollographql/apollo-android/commit/89caa22896fb7cbff6df8e362721a32bd5007a60", "message": "cleanup the Java -> Kotlin conversion", "committedDate": "2020-06-09T15:45:20Z", "type": "commit"}]}