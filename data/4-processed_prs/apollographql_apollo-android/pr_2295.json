{"pr_number": 2295, "pr_title": "[Runtime] convert RealResponseWriter.java to Kotlin", "pr_createdAt": "2020-05-21T10:00:18Z", "pr_url": "https://github.com/apollographql/apollo-android/pull/2295", "timeline": [{"oid": "d60f8d9b9b8a93538bb5d2696b5224c00ae67c14", "url": "https://github.com/apollographql/apollo-android/commit/d60f8d9b9b8a93538bb5d2696b5224c00ae67c14", "message": "convert RealResponseWriter to Kotlin", "committedDate": "2020-05-21T09:54:53Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODU3MTM4Mw==", "url": "https://github.com/apollographql/apollo-android/pull/2295#discussion_r428571383", "bodyText": "If this is the case, buffer above shouldn't be nullable", "author": "tasomaniac", "createdAt": "2020-05-21T10:27:37Z", "path": "apollo-runtime/src/main/java/com/apollographql/apollo/internal/response/RealResponseWriter.kt", "diffHunk": "@@ -0,0 +1,224 @@\n+package com.apollographql.apollo.internal.response\n+\n+import com.apollographql.apollo.api.CustomTypeAdapter\n+import com.apollographql.apollo.api.Operation\n+import com.apollographql.apollo.api.ResponseField\n+import com.apollographql.apollo.api.ScalarType\n+import com.apollographql.apollo.api.ScalarTypeAdapters\n+import com.apollographql.apollo.api.internal.ResolveDelegate\n+import com.apollographql.apollo.api.internal.ResponseFieldMarshaller\n+import com.apollographql.apollo.api.internal.ResponseWriter\n+import java.math.BigDecimal\n+import java.util.ArrayList\n+import java.util.LinkedHashMap\n+\n+class RealResponseWriter(private val operationVariables: Operation.Variables, private val scalarTypeAdapters: ScalarTypeAdapters) : ResponseWriter {\n+  val buffer: MutableMap<String, FieldDescriptor> = LinkedHashMap()\n+  override fun writeString(field: ResponseField, value: String?) {\n+    writeScalarFieldValue(field, value)\n+  }\n+\n+  override fun writeInt(field: ResponseField, value: Int?) {\n+    writeScalarFieldValue(field, if (value != null) BigDecimal.valueOf(value.toLong()) else null)\n+  }\n+\n+  override fun writeLong(field: ResponseField, value: Long?) {\n+    writeScalarFieldValue(field, if (value != null) BigDecimal.valueOf(value) else null)\n+  }\n+\n+  override fun writeDouble(field: ResponseField, value: Double?) {\n+    writeScalarFieldValue(field, if (value != null) BigDecimal.valueOf(value) else null)\n+  }\n+\n+  override fun writeBoolean(field: ResponseField, value: Boolean?) {\n+    writeScalarFieldValue(field, value)\n+  }\n+\n+  override fun writeCustom(field: ResponseField.CustomTypeField, value: Any?) {\n+    val typeAdapter = scalarTypeAdapters.adapterFor<Any>(field.scalarType)\n+    writeScalarFieldValue(field, if (value != null) typeAdapter.encode(value).value else null)\n+  }\n+\n+  override fun writeObject(field: ResponseField, marshaller: ResponseFieldMarshaller?) {\n+    checkFieldValue(field, marshaller)\n+    if (marshaller == null) {\n+      buffer[field.responseName] = FieldDescriptor(field, null)\n+      return\n+    }\n+    val nestedResponseWriter = RealResponseWriter(operationVariables, scalarTypeAdapters)\n+    marshaller.marshal(nestedResponseWriter)\n+    buffer[field.responseName] = FieldDescriptor(field, nestedResponseWriter.buffer)\n+  }\n+\n+  override fun writeFragment(marshaller: ResponseFieldMarshaller?) {\n+    marshaller?.marshal(this)\n+  }\n+\n+  override fun <T> writeList(field: ResponseField, values: List<T>?, listWriter: ResponseWriter.ListWriter<T>) {\n+    checkFieldValue(field, values)\n+    if (values == null) {\n+      buffer[field.responseName] = FieldDescriptor(field, null)\n+      return\n+    }\n+    val accumulated = ArrayList<Any?>()\n+    listWriter.write(values, ListItemWriter(operationVariables, scalarTypeAdapters, accumulated))\n+    buffer[field.responseName] = FieldDescriptor(field, accumulated)\n+  }\n+\n+  fun resolveFields(delegate: ResolveDelegate<Map<String, Any>?>) {\n+    resolveFields(operationVariables, delegate, buffer)\n+  }\n+\n+  private fun writeScalarFieldValue(field: ResponseField, value: Any?) {\n+    checkFieldValue(field, value)\n+    buffer[field.responseName] = FieldDescriptor(field, value)\n+  }\n+\n+  private fun rawFieldValues(buffer: Map<String, FieldDescriptor>?): Map<String, Any?> {\n+    val fieldValues: MutableMap<String, Any?> = LinkedHashMap()\n+    for ((fieldResponseName, value) in buffer!!) {", "originalCommit": "d60f8d9b9b8a93538bb5d2696b5224c00ae67c14", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODYxMjM4Ng==", "url": "https://github.com/apollographql/apollo-android/pull/2295#discussion_r428612386", "bodyText": "I could remove this !! and a few other ones. There are still a few in the file that I'm not sure we can remove easily/safely.", "author": "martinbonnin", "createdAt": "2020-05-21T12:08:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODU3MTM4Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODU3MTYxMw==", "url": "https://github.com/apollographql/apollo-android/pull/2295#discussion_r428571613", "bodyText": "Same here", "author": "tasomaniac", "createdAt": "2020-05-21T10:28:05Z", "path": "apollo-runtime/src/main/java/com/apollographql/apollo/internal/response/RealResponseWriter.kt", "diffHunk": "@@ -0,0 +1,224 @@\n+package com.apollographql.apollo.internal.response\n+\n+import com.apollographql.apollo.api.CustomTypeAdapter\n+import com.apollographql.apollo.api.Operation\n+import com.apollographql.apollo.api.ResponseField\n+import com.apollographql.apollo.api.ScalarType\n+import com.apollographql.apollo.api.ScalarTypeAdapters\n+import com.apollographql.apollo.api.internal.ResolveDelegate\n+import com.apollographql.apollo.api.internal.ResponseFieldMarshaller\n+import com.apollographql.apollo.api.internal.ResponseWriter\n+import java.math.BigDecimal\n+import java.util.ArrayList\n+import java.util.LinkedHashMap\n+\n+class RealResponseWriter(private val operationVariables: Operation.Variables, private val scalarTypeAdapters: ScalarTypeAdapters) : ResponseWriter {\n+  val buffer: MutableMap<String, FieldDescriptor> = LinkedHashMap()\n+  override fun writeString(field: ResponseField, value: String?) {\n+    writeScalarFieldValue(field, value)\n+  }\n+\n+  override fun writeInt(field: ResponseField, value: Int?) {\n+    writeScalarFieldValue(field, if (value != null) BigDecimal.valueOf(value.toLong()) else null)\n+  }\n+\n+  override fun writeLong(field: ResponseField, value: Long?) {\n+    writeScalarFieldValue(field, if (value != null) BigDecimal.valueOf(value) else null)\n+  }\n+\n+  override fun writeDouble(field: ResponseField, value: Double?) {\n+    writeScalarFieldValue(field, if (value != null) BigDecimal.valueOf(value) else null)\n+  }\n+\n+  override fun writeBoolean(field: ResponseField, value: Boolean?) {\n+    writeScalarFieldValue(field, value)\n+  }\n+\n+  override fun writeCustom(field: ResponseField.CustomTypeField, value: Any?) {\n+    val typeAdapter = scalarTypeAdapters.adapterFor<Any>(field.scalarType)\n+    writeScalarFieldValue(field, if (value != null) typeAdapter.encode(value).value else null)\n+  }\n+\n+  override fun writeObject(field: ResponseField, marshaller: ResponseFieldMarshaller?) {\n+    checkFieldValue(field, marshaller)\n+    if (marshaller == null) {\n+      buffer[field.responseName] = FieldDescriptor(field, null)\n+      return\n+    }\n+    val nestedResponseWriter = RealResponseWriter(operationVariables, scalarTypeAdapters)\n+    marshaller.marshal(nestedResponseWriter)\n+    buffer[field.responseName] = FieldDescriptor(field, nestedResponseWriter.buffer)\n+  }\n+\n+  override fun writeFragment(marshaller: ResponseFieldMarshaller?) {\n+    marshaller?.marshal(this)\n+  }\n+\n+  override fun <T> writeList(field: ResponseField, values: List<T>?, listWriter: ResponseWriter.ListWriter<T>) {\n+    checkFieldValue(field, values)\n+    if (values == null) {\n+      buffer[field.responseName] = FieldDescriptor(field, null)\n+      return\n+    }\n+    val accumulated = ArrayList<Any?>()\n+    listWriter.write(values, ListItemWriter(operationVariables, scalarTypeAdapters, accumulated))\n+    buffer[field.responseName] = FieldDescriptor(field, accumulated)\n+  }\n+\n+  fun resolveFields(delegate: ResolveDelegate<Map<String, Any>?>) {\n+    resolveFields(operationVariables, delegate, buffer)\n+  }\n+\n+  private fun writeScalarFieldValue(field: ResponseField, value: Any?) {\n+    checkFieldValue(field, value)\n+    buffer[field.responseName] = FieldDescriptor(field, value)\n+  }\n+\n+  private fun rawFieldValues(buffer: Map<String, FieldDescriptor>?): Map<String, Any?> {\n+    val fieldValues: MutableMap<String, Any?> = LinkedHashMap()\n+    for ((fieldResponseName, value) in buffer!!) {\n+      val fieldValue = value.value\n+      if (fieldValue == null) {\n+        fieldValues[fieldResponseName] = null\n+      } else if (fieldValue is Map<*, *>) {\n+        val nestedMap = rawFieldValues(fieldValue as Map<String, FieldDescriptor>?)\n+        fieldValues[fieldResponseName] = nestedMap\n+      } else if (fieldValue is List<*>) {\n+        fieldValues[fieldResponseName] = rawListFieldValues(fieldValue)\n+      } else {\n+        fieldValues[fieldResponseName] = fieldValue\n+      }\n+    }\n+    return fieldValues\n+  }\n+\n+  private fun rawListFieldValues(values: List<*>): List<*> {\n+    val listValues = ArrayList<Any?>()\n+    for (value in values) {\n+      if (value is Map<*, *>) {\n+        listValues.add(rawFieldValues(value as Map<String, FieldDescriptor>))\n+      } else if (value is List<*>) {\n+        listValues.add(rawListFieldValues(value))\n+      } else {\n+        listValues.add(value)\n+      }\n+    }\n+    return listValues\n+  }\n+\n+  private fun resolveFields(operationVariables: Operation.Variables,\n+                            delegate: ResolveDelegate<Map<String, Any>?>, buffer: Map<String, FieldDescriptor>?) {", "originalCommit": "d60f8d9b9b8a93538bb5d2696b5224c00ae67c14", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODU3MTY2MQ==", "url": "https://github.com/apollographql/apollo-android/pull/2295#discussion_r428571661", "bodyText": "Same here", "author": "tasomaniac", "createdAt": "2020-05-21T10:28:12Z", "path": "apollo-runtime/src/main/java/com/apollographql/apollo/internal/response/RealResponseWriter.kt", "diffHunk": "@@ -0,0 +1,224 @@\n+package com.apollographql.apollo.internal.response\n+\n+import com.apollographql.apollo.api.CustomTypeAdapter\n+import com.apollographql.apollo.api.Operation\n+import com.apollographql.apollo.api.ResponseField\n+import com.apollographql.apollo.api.ScalarType\n+import com.apollographql.apollo.api.ScalarTypeAdapters\n+import com.apollographql.apollo.api.internal.ResolveDelegate\n+import com.apollographql.apollo.api.internal.ResponseFieldMarshaller\n+import com.apollographql.apollo.api.internal.ResponseWriter\n+import java.math.BigDecimal\n+import java.util.ArrayList\n+import java.util.LinkedHashMap\n+\n+class RealResponseWriter(private val operationVariables: Operation.Variables, private val scalarTypeAdapters: ScalarTypeAdapters) : ResponseWriter {\n+  val buffer: MutableMap<String, FieldDescriptor> = LinkedHashMap()\n+  override fun writeString(field: ResponseField, value: String?) {\n+    writeScalarFieldValue(field, value)\n+  }\n+\n+  override fun writeInt(field: ResponseField, value: Int?) {\n+    writeScalarFieldValue(field, if (value != null) BigDecimal.valueOf(value.toLong()) else null)\n+  }\n+\n+  override fun writeLong(field: ResponseField, value: Long?) {\n+    writeScalarFieldValue(field, if (value != null) BigDecimal.valueOf(value) else null)\n+  }\n+\n+  override fun writeDouble(field: ResponseField, value: Double?) {\n+    writeScalarFieldValue(field, if (value != null) BigDecimal.valueOf(value) else null)\n+  }\n+\n+  override fun writeBoolean(field: ResponseField, value: Boolean?) {\n+    writeScalarFieldValue(field, value)\n+  }\n+\n+  override fun writeCustom(field: ResponseField.CustomTypeField, value: Any?) {\n+    val typeAdapter = scalarTypeAdapters.adapterFor<Any>(field.scalarType)\n+    writeScalarFieldValue(field, if (value != null) typeAdapter.encode(value).value else null)\n+  }\n+\n+  override fun writeObject(field: ResponseField, marshaller: ResponseFieldMarshaller?) {\n+    checkFieldValue(field, marshaller)\n+    if (marshaller == null) {\n+      buffer[field.responseName] = FieldDescriptor(field, null)\n+      return\n+    }\n+    val nestedResponseWriter = RealResponseWriter(operationVariables, scalarTypeAdapters)\n+    marshaller.marshal(nestedResponseWriter)\n+    buffer[field.responseName] = FieldDescriptor(field, nestedResponseWriter.buffer)\n+  }\n+\n+  override fun writeFragment(marshaller: ResponseFieldMarshaller?) {\n+    marshaller?.marshal(this)\n+  }\n+\n+  override fun <T> writeList(field: ResponseField, values: List<T>?, listWriter: ResponseWriter.ListWriter<T>) {\n+    checkFieldValue(field, values)\n+    if (values == null) {\n+      buffer[field.responseName] = FieldDescriptor(field, null)\n+      return\n+    }\n+    val accumulated = ArrayList<Any?>()\n+    listWriter.write(values, ListItemWriter(operationVariables, scalarTypeAdapters, accumulated))\n+    buffer[field.responseName] = FieldDescriptor(field, accumulated)\n+  }\n+\n+  fun resolveFields(delegate: ResolveDelegate<Map<String, Any>?>) {\n+    resolveFields(operationVariables, delegate, buffer)\n+  }\n+\n+  private fun writeScalarFieldValue(field: ResponseField, value: Any?) {\n+    checkFieldValue(field, value)\n+    buffer[field.responseName] = FieldDescriptor(field, value)\n+  }\n+\n+  private fun rawFieldValues(buffer: Map<String, FieldDescriptor>?): Map<String, Any?> {\n+    val fieldValues: MutableMap<String, Any?> = LinkedHashMap()\n+    for ((fieldResponseName, value) in buffer!!) {\n+      val fieldValue = value.value\n+      if (fieldValue == null) {\n+        fieldValues[fieldResponseName] = null\n+      } else if (fieldValue is Map<*, *>) {\n+        val nestedMap = rawFieldValues(fieldValue as Map<String, FieldDescriptor>?)\n+        fieldValues[fieldResponseName] = nestedMap\n+      } else if (fieldValue is List<*>) {\n+        fieldValues[fieldResponseName] = rawListFieldValues(fieldValue)\n+      } else {\n+        fieldValues[fieldResponseName] = fieldValue\n+      }\n+    }\n+    return fieldValues\n+  }\n+\n+  private fun rawListFieldValues(values: List<*>): List<*> {\n+    val listValues = ArrayList<Any?>()\n+    for (value in values) {\n+      if (value is Map<*, *>) {\n+        listValues.add(rawFieldValues(value as Map<String, FieldDescriptor>))\n+      } else if (value is List<*>) {\n+        listValues.add(rawListFieldValues(value))\n+      } else {\n+        listValues.add(value)\n+      }\n+    }\n+    return listValues\n+  }\n+\n+  private fun resolveFields(operationVariables: Operation.Variables,\n+                            delegate: ResolveDelegate<Map<String, Any>?>, buffer: Map<String, FieldDescriptor>?) {\n+    val rawFieldValues = rawFieldValues(buffer)\n+    for (fieldResponseName in buffer!!.keys) {\n+      val fieldDescriptor = buffer[fieldResponseName]\n+      val rawFieldValue = rawFieldValues[fieldResponseName]\n+      delegate.willResolve(fieldDescriptor!!.field, operationVariables, fieldDescriptor.value)\n+      when (fieldDescriptor.field.type) {\n+        ResponseField.Type.OBJECT -> {\n+          resolveObjectFields(fieldDescriptor, rawFieldValue as Map<String, Any>?, delegate)\n+        }\n+        ResponseField.Type.LIST -> {\n+          resolveListField(fieldDescriptor.field, fieldDescriptor.value as List<*>?, rawFieldValue as List<*>?, delegate)\n+        }\n+        else -> {\n+          if (rawFieldValue == null) {\n+            delegate.didResolveNull()\n+          } else {\n+            delegate.didResolveScalar(rawFieldValue)\n+          }\n+        }\n+      }\n+      delegate.didResolve(fieldDescriptor.field, operationVariables)\n+    }\n+  }\n+\n+  private fun resolveObjectFields(fieldDescriptor: FieldDescriptor?,", "originalCommit": "d60f8d9b9b8a93538bb5d2696b5224c00ae67c14", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "ef8da5b65bb2b0353ec4996b2c9c92f83bee8554", "url": "https://github.com/apollographql/apollo-android/commit/ef8da5b65bb2b0353ec4996b2c9c92f83bee8554", "message": "made the buffer parameter non-optional", "committedDate": "2020-05-21T11:52:36Z", "type": "commit"}, {"oid": "8f4770ab5284eb92b4af7f60c7285a139c16192c", "url": "https://github.com/apollographql/apollo-android/commit/8f4770ab5284eb92b4af7f60c7285a139c16192c", "message": "mark more fields as non-optional", "committedDate": "2020-05-21T11:59:56Z", "type": "commit"}, {"oid": "2a290708c0cd37f77e5f38b9a2cbc68a7178763a", "url": "https://github.com/apollographql/apollo-android/commit/2a290708c0cd37f77e5f38b9a2cbc68a7178763a", "message": "mark more fields as non-optional", "committedDate": "2020-05-21T12:01:19Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODYyODUzMA==", "url": "https://github.com/apollographql/apollo-android/pull/2295#discussion_r428628530", "bodyText": "This can be replaced with forEachWithIndex. Could be little bit better but this is also good.", "author": "tasomaniac", "createdAt": "2020-05-21T12:44:43Z", "path": "apollo-runtime/src/main/java/com/apollographql/apollo/internal/response/RealResponseWriter.kt", "diffHunk": "@@ -0,0 +1,225 @@\n+package com.apollographql.apollo.internal.response\n+\n+import com.apollographql.apollo.api.CustomTypeAdapter\n+import com.apollographql.apollo.api.Operation\n+import com.apollographql.apollo.api.ResponseField\n+import com.apollographql.apollo.api.ScalarType\n+import com.apollographql.apollo.api.ScalarTypeAdapters\n+import com.apollographql.apollo.api.internal.ResolveDelegate\n+import com.apollographql.apollo.api.internal.ResponseFieldMarshaller\n+import com.apollographql.apollo.api.internal.ResponseWriter\n+import java.math.BigDecimal\n+import java.util.ArrayList\n+import java.util.LinkedHashMap\n+\n+class RealResponseWriter(private val operationVariables: Operation.Variables, private val scalarTypeAdapters: ScalarTypeAdapters) : ResponseWriter {\n+  val buffer: MutableMap<String, FieldDescriptor> = LinkedHashMap()\n+  override fun writeString(field: ResponseField, value: String?) {\n+    writeScalarFieldValue(field, value)\n+  }\n+\n+  override fun writeInt(field: ResponseField, value: Int?) {\n+    writeScalarFieldValue(field, if (value != null) BigDecimal.valueOf(value.toLong()) else null)\n+  }\n+\n+  override fun writeLong(field: ResponseField, value: Long?) {\n+    writeScalarFieldValue(field, if (value != null) BigDecimal.valueOf(value) else null)\n+  }\n+\n+  override fun writeDouble(field: ResponseField, value: Double?) {\n+    writeScalarFieldValue(field, if (value != null) BigDecimal.valueOf(value) else null)\n+  }\n+\n+  override fun writeBoolean(field: ResponseField, value: Boolean?) {\n+    writeScalarFieldValue(field, value)\n+  }\n+\n+  override fun writeCustom(field: ResponseField.CustomTypeField, value: Any?) {\n+    val typeAdapter = scalarTypeAdapters.adapterFor<Any>(field.scalarType)\n+    writeScalarFieldValue(field, if (value != null) typeAdapter.encode(value).value else null)\n+  }\n+\n+  override fun writeObject(field: ResponseField, marshaller: ResponseFieldMarshaller?) {\n+    checkFieldValue(field, marshaller)\n+    if (marshaller == null) {\n+      buffer[field.responseName] = FieldDescriptor(field, null)\n+      return\n+    }\n+    val nestedResponseWriter = RealResponseWriter(operationVariables, scalarTypeAdapters)\n+    marshaller.marshal(nestedResponseWriter)\n+    buffer[field.responseName] = FieldDescriptor(field, nestedResponseWriter.buffer)\n+  }\n+\n+  override fun writeFragment(marshaller: ResponseFieldMarshaller?) {\n+    marshaller?.marshal(this)\n+  }\n+\n+  override fun <T> writeList(field: ResponseField, values: List<T>?, listWriter: ResponseWriter.ListWriter<T>) {\n+    checkFieldValue(field, values)\n+    if (values == null) {\n+      buffer[field.responseName] = FieldDescriptor(field, null)\n+      return\n+    }\n+    val accumulated = ArrayList<Any?>()\n+    listWriter.write(values, ListItemWriter(operationVariables, scalarTypeAdapters, accumulated))\n+    buffer[field.responseName] = FieldDescriptor(field, accumulated)\n+  }\n+\n+  fun resolveFields(delegate: ResolveDelegate<Map<String, Any>?>) {\n+    resolveFields(operationVariables, delegate, buffer)\n+  }\n+\n+  private fun writeScalarFieldValue(field: ResponseField, value: Any?) {\n+    checkFieldValue(field, value)\n+    buffer[field.responseName] = FieldDescriptor(field, value)\n+  }\n+\n+  private fun rawFieldValues(buffer: Map<String, FieldDescriptor>): Map<String, Any?> {\n+    val fieldValues: MutableMap<String, Any?> = LinkedHashMap()\n+    for ((fieldResponseName, value) in buffer) {\n+      val fieldValue = value.value\n+      if (fieldValue == null) {\n+        fieldValues[fieldResponseName] = null\n+      } else if (fieldValue is Map<*, *>) {\n+        val nestedMap = rawFieldValues(fieldValue as Map<String, FieldDescriptor>)\n+        fieldValues[fieldResponseName] = nestedMap\n+      } else if (fieldValue is List<*>) {\n+        fieldValues[fieldResponseName] = rawListFieldValues(fieldValue)\n+      } else {\n+        fieldValues[fieldResponseName] = fieldValue\n+      }\n+    }\n+    return fieldValues\n+  }\n+\n+  private fun rawListFieldValues(values: List<*>): List<*> {\n+    val listValues = ArrayList<Any?>()\n+    for (value in values) {\n+      if (value is Map<*, *>) {\n+        listValues.add(rawFieldValues(value as Map<String, FieldDescriptor>))\n+      } else if (value is List<*>) {\n+        listValues.add(rawListFieldValues(value))\n+      } else {\n+        listValues.add(value)\n+      }\n+    }\n+    return listValues\n+  }\n+\n+  private fun resolveFields(operationVariables: Operation.Variables,\n+                            delegate: ResolveDelegate<Map<String, Any>?>, buffer: Map<String, FieldDescriptor>) {\n+    val rawFieldValues = rawFieldValues(buffer)\n+    for (fieldResponseName in buffer.keys) {\n+      val fieldDescriptor = buffer[fieldResponseName]\n+      val rawFieldValue = rawFieldValues[fieldResponseName]\n+      delegate.willResolve(fieldDescriptor!!.field, operationVariables, fieldDescriptor.value)\n+      when (fieldDescriptor.field.type) {\n+        ResponseField.Type.OBJECT -> {\n+          resolveObjectFields(fieldDescriptor, rawFieldValue as Map<String, Any>?, delegate)\n+        }\n+        ResponseField.Type.LIST -> {\n+          resolveListField(fieldDescriptor.field, fieldDescriptor.value as List<*>?, rawFieldValue as List<*>?, delegate)\n+        }\n+        else -> {\n+          if (rawFieldValue == null) {\n+            delegate.didResolveNull()\n+          } else {\n+            delegate.didResolveScalar(rawFieldValue)\n+          }\n+        }\n+      }\n+      delegate.didResolve(fieldDescriptor.field, operationVariables)\n+    }\n+  }\n+\n+  private fun resolveObjectFields(fieldDescriptor: FieldDescriptor,\n+                                  rawFieldValues: Map<String, Any>?, delegate: ResolveDelegate<Map<String, Any>?>) {\n+    delegate.willResolveObject(fieldDescriptor.field, rawFieldValues)\n+    val value = fieldDescriptor.value\n+    if (value == null) {\n+      delegate.didResolveNull()\n+    } else {\n+      resolveFields(operationVariables, delegate, value as Map<String, FieldDescriptor>)\n+    }\n+    delegate.didResolveObject(fieldDescriptor.field, rawFieldValues)\n+  }\n+\n+  private fun resolveListField(listResponseField: ResponseField, fieldValues: List<*>?,\n+                               rawFieldValues: List<*>?, delegate: ResolveDelegate<Map<String, Any>?>) {\n+    if (fieldValues == null) {\n+      delegate.didResolveNull()\n+      return\n+    }\n+    for (i in fieldValues.indices) {", "originalCommit": "2a290708c0cd37f77e5f38b9a2cbc68a7178763a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "e677be08c0ce224161ee7b7527a391cc27d4b2e0", "url": "https://github.com/apollographql/apollo-android/commit/e677be08c0ce224161ee7b7527a391cc27d4b2e0", "message": "use forEachIndexed", "committedDate": "2020-05-21T13:36:43Z", "type": "commit"}]}