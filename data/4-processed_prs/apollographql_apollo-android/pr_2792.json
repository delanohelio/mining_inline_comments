{"pr_number": 2792, "pr_title": "Merge fields in backend ir", "pr_createdAt": "2020-12-08T15:24:45Z", "pr_url": "https://github.com/apollographql/apollo-android/pull/2792", "timeline": [{"oid": "e5000156a5316f70c20c76e3ed5ca61f8a89eec3", "url": "https://github.com/apollographql/apollo-android/commit/e5000156a5316f70c20c76e3ed5ca61f8a89eec3", "message": "merge fields when building the BackendIR, fixes the hero_name test case\n\nNote: the code that evaluates @skip/@include is (and AFAIK, has always\nbeen) wrong because grouped fields can have different include conditions\nthat should be combined using \"or\"", "committedDate": "2020-12-08T13:06:33Z", "type": "commit"}, {"oid": "bdabe62db325417a12a4baf271ef1cff54a47847", "url": "https://github.com/apollographql/apollo-android/commit/bdabe62db325417a12a4baf271ef1cff54a47847", "message": "handle @include/@skip with literal values", "committedDate": "2020-12-08T15:20:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTAzMzQwOA==", "url": "https://github.com/apollographql/apollo-android/pull/2792#discussion_r539033408", "bodyText": "Can we move this logic out of the BackendIrBuilder.kt into separate file? We do have FrontendIrMergeUtils, do you think it will be better to move this logic over there?", "author": "sav007", "createdAt": "2020-12-09T06:03:51Z", "path": "apollo-compiler/src/main/kotlin/com/apollographql/apollo/compiler/backend/ir/BackendIrBuilder.kt", "diffHunk": "@@ -52,6 +54,42 @@ internal class BackendIrBuilder constructor(\n     )\n   }\n \n+  /**\n+   * a GroupedField is a list of fields with the same responseName and arguments but possibly different selectionSets and directives\n+   */\n+  private data class GroupedField(val fields: List<GQLField>)\n+\n+  private fun GQLValue.toBoolean(): Boolean? = when(this) {\n+    is GQLBooleanValue -> this.value\n+    else -> null\n+  }\n+\n+  private fun GQLDirective.toBoolean(): Boolean? {\n+    return when (name) {\n+      \"include\" -> arguments!!.arguments.first().value.toBoolean()\n+      \"skip\" -> arguments!!.arguments.first().value.toBoolean()?.not()\n+      else -> null\n+    }\n+  }\n+  private fun GroupedField.removeLiteralDirectives(): GroupedField? {\n+    val newFields = fields.mapNotNull {\n+      val isAlwaysSkipped = it.directives.firstOrNull { it.toBoolean() == false } != null\n+      if (isAlwaysSkipped) {\n+        // 3.13.2 the field or fragment must not be queried if either the @skip condition is true or the @include condition is false.\n+        null\n+      } else {\n+        // Directives that are always true don't add any useful information\n+        it.copy(directives = it.directives.filter {\n+          it.toBoolean() != true\n+        })\n+      }\n+    }\n+    if (newFields.isEmpty()) {\n+      return null\n+    } else {\n+      return copy(fields = newFields)\n+    }\n+  }", "originalCommit": "bdabe62db325417a12a4baf271ef1cff54a47847", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTE1Mzg0Mw==", "url": "https://github.com/apollographql/apollo-android/pull/2792#discussion_r539153843", "bodyText": "This logic is about eliminating literal @include/@skip directives. I can move them to a separate IncludeSkipUtils file but it's not really about merging so I wouldn't use FrontendIrMergeUtils", "author": "martinbonnin", "createdAt": "2020-12-09T09:40:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTAzMzQwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQ1MjUzNQ==", "url": "https://github.com/apollographql/apollo-android/pull/2792#discussion_r539452535", "bodyText": "Yeah I would suggest to move it out from the builder as it keep growing fast, so might be good IncludeSkipUtils .", "author": "sav007", "createdAt": "2020-12-09T16:26:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTAzMzQwOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTAzMzkyOQ==", "url": "https://github.com/apollographql/apollo-android/pull/2792#discussion_r539033929", "bodyText": "Why not just merger all fields into one field?", "author": "sav007", "createdAt": "2020-12-09T06:05:15Z", "path": "apollo-compiler/src/main/kotlin/com/apollographql/apollo/compiler/backend/ir/BackendIrBuilder.kt", "diffHunk": "@@ -52,6 +54,42 @@ internal class BackendIrBuilder constructor(\n     )\n   }\n \n+  /**\n+   * a GroupedField is a list of fields with the same responseName and arguments but possibly different selectionSets and directives\n+   */\n+  private data class GroupedField(val fields: List<GQLField>)", "originalCommit": "bdabe62db325417a12a4baf271ef1cff54a47847", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTE1MTU0MA==", "url": "https://github.com/apollographql/apollo-android/pull/2792#discussion_r539151540", "bodyText": "A GQLField cannot represent exactly a list of field because:\n{\n  name @include(if: $condition1)\n  name @include(if: $condition2)\n}\n\nis not equivalent to\n  name @include(if: $condition1) @include(if: $condition2)\n\nWe could use another \"IR\" there that can represent these cases. That felt a bit overkill just for this use case but maybe there can be other uses too.", "author": "martinbonnin", "createdAt": "2020-12-09T09:37:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTAzMzkyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQ1MDI3Mw==", "url": "https://github.com/apollographql/apollo-android/pull/2792#discussion_r539450273", "bodyText": "Yeah from GraphQL execution perspective, but from codegen we don't care right? we should treat this as one field as we going to generate only one name field.", "author": "sav007", "createdAt": "2020-12-09T16:23:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTAzMzkyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQ1OTczNQ==", "url": "https://github.com/apollographql/apollo-android/pull/2792#discussion_r539459735", "bodyText": "The thing is... apollo-android is also an execution engine, kind of. When reading from the cache, we're effectively acting like a server. If we don't honor directives, we will over fetch from the cache. Maybe it's not a big deal, maybe it is, I don't know...", "author": "martinbonnin", "createdAt": "2020-12-09T16:34:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTAzMzkyOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQ0ODU4NQ==", "url": "https://github.com/apollographql/apollo-android/pull/2792#discussion_r539448585", "bodyText": "I'm curious what will happen if we add duplicate name field? I have assumption that it generator fails in this case", "author": "sav007", "createdAt": "2020-12-09T16:21:35Z", "path": "apollo-compiler/src/test/graphql/com/example/merged_include/TestOperation.graphql", "diffHunk": "@@ -0,0 +1,8 @@\n+query TestQuery {\n+    hero {\n+        name\n+    }\n+    hero @include(if: false) {\n+        id", "originalCommit": "bdabe62db325417a12a4baf271ef1cff54a47847", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQ1NDY5MA==", "url": "https://github.com/apollographql/apollo-android/pull/2792#discussion_r539454690", "bodyText": "Well, for this specific case, it doesn't change anything to the codegen since the @include(if: false) prunes any selection in hero {}", "author": "martinbonnin", "createdAt": "2020-12-09T16:28:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQ0ODU4NQ=="}], "type": "inlineReview"}, {"oid": "152b0c7d7c6a38c71ca56e1e6ebe00a052ef7e7a", "url": "https://github.com/apollographql/apollo-android/commit/152b0c7d7c6a38c71ca56e1e6ebe00a052ef7e7a", "message": "Reintroduce FrontendIr to handle complex @include/@skip conditions", "committedDate": "2020-12-14T15:51:26Z", "type": "commit"}, {"oid": "7de7a7983b8952d09a819f60143608aaec88a969", "url": "https://github.com/apollographql/apollo-android/commit/7de7a7983b8952d09a819f60143608aaec88a969", "message": "update test fixtures", "committedDate": "2020-12-14T15:52:02Z", "type": "commit"}, {"oid": "36fd4adf613f7c97ae7f1648ecc22ff96e2615fd", "url": "https://github.com/apollographql/apollo-android/commit/36fd4adf613f7c97ae7f1648ecc22ff96e2615fd", "message": "remove unused import", "committedDate": "2020-12-14T16:43:52Z", "type": "commit"}, {"oid": "c11b2b86af8fb0793e5dd36e70a03ee3382e6ba9", "url": "https://github.com/apollographql/apollo-android/commit/c11b2b86af8fb0793e5dd36e70a03ee3382e6ba9", "message": "move the github schema to SDL, the json had some badly encoded\ndefaultValues for affiliations like:\n\n\"[ \\\"OWNER\\\" ]\"", "committedDate": "2020-12-14T17:51:34Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzAyMDg1MA==", "url": "https://github.com/apollographql/apollo-android/pull/2792#discussion_r543020850", "bodyText": "why this was removed? I actually need it in my upcoming PR.", "author": "sav007", "createdAt": "2020-12-15T03:37:04Z", "path": "apollo-compiler/src/main/kotlin/com/apollographql/apollo/compiler/backend/ir/FrontendIrMergeUtils.kt", "diffHunk": "@@ -7,45 +7,6 @@ import com.apollographql.apollo.compiler.frontend.GQLSelectionSet\n import com.apollographql.apollo.compiler.frontend.responseName\n \n internal object FrontendIrMergeUtils {\n-  /**\n-   * Merges fragments that defined on the same type condition into one:\n-   *\n-   * ```\n-   * query TestOperation {\n-   *   random {\n-   *       ... on Being {\n-   *           name\n-   *           friends {\n-   *               name\n-   *           }\n-   *       }\n-   *       ... on Wookie {\n-   *          race\n-   *          friends {\n-   *            lifeExpectancy\n-   *          }\n-   *       }\n-   *       ... on Being {\n-   *           friends {\n-   *              id\n-   *           }\n-   *       }\n-   *   }\n-   *}\n-   * ```\n-   *\n-   * fragments defined on `Being` are going to be squashed into 1 while fragment `on Wookie` remains intact\n-   */\n-  fun List<GQLInlineFragment>.mergeInlineFragmentsWithSameTypeConditions(): List<GQLInlineFragment> {\n-    return this\n-        .groupBy { fragment -> fragment.typeCondition.name }\n-        .map { (_, groupedFragments) ->\n-          groupedFragments.drop(1).fold(groupedFragments.first()) { result, fragment ->\n-            result.merge(fragment)\n-          }\n-        }\n-  }\n-", "originalCommit": "c11b2b86af8fb0793e5dd36e70a03ee3382e6ba9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzEzMzE2Ng==", "url": "https://github.com/apollographql/apollo-android/pull/2792#discussion_r543133166", "bodyText": "That's done in the FrontendIr: \n  \n    \n      apollo-android/apollo-compiler/src/main/kotlin/com/apollographql/apollo/compiler/frontend/ir/gql_to_frontend_ir.kt\n    \n    \n         Line 161\n      in\n      152b0c7\n    \n    \n    \n    \n\n        \n          \n           private fun List<FrontendIr.Selection>.mergeFieldsAndInlineFragments(): List<FrontendIr.Selection> {", "author": "martinbonnin", "createdAt": "2020-12-15T08:16:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzAyMDg1MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzAyNTc1Mw==", "url": "https://github.com/apollographql/apollo-android/pull/2792#discussion_r543025753", "bodyText": "hm, why it's removed?", "author": "sav007", "createdAt": "2020-12-15T03:52:24Z", "path": "apollo-compiler/src/test/graphql/com/example/arguments_simple/fragment/HeroDetail.kt", "diffHunk": "@@ -68,20 +68,6 @@ interface HeroDetail : GraphqlFragment {\n   }\n \n   companion object {\n-    val FRAGMENT_DEFINITION: String = \"\"\"\n-        |fragment HeroDetails on Character {\n-        |  __typename\n-        |  friendsConnection(first: ${'$'}friendsCount) {\n-        |    totalCount\n-        |    edges {\n-        |      node {\n-        |        name @include(if: ${'$'}IncludeName)\n-        |      }\n-        |    }\n-        |  }\n-        |}\n-        \"\"\".trimMargin()", "originalCommit": "c11b2b86af8fb0793e5dd36e70a03ee3382e6ba9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzEzMjMyNQ==", "url": "https://github.com/apollographql/apollo-android/pull/2792#discussion_r543132325", "bodyText": "Might be an oversight. I think I remembered us saying we don' t need it but I might be confusing with something else. I'll add it back", "author": "martinbonnin", "createdAt": "2020-12-15T08:14:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzAyNTc1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzE2NjUxOQ==", "url": "https://github.com/apollographql/apollo-android/pull/2792#discussion_r543166519", "bodyText": "It's back in! I'm still curious, what is the use case for FRAGMENT_DEFINITION ?", "author": "martinbonnin", "createdAt": "2020-12-15T09:06:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzAyNTc1Mw=="}], "type": "inlineReview"}, {"oid": "2fad854feb283aef242ab59bb6db922ff89d8f2f", "url": "https://github.com/apollographql/apollo-android/commit/2fad854feb283aef242ab59bb6db922ff89d8f2f", "message": "add FRAGMENT_DEFINITION back", "committedDate": "2020-12-15T09:05:46Z", "type": "commit"}]}