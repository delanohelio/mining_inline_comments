{"pr_number": 2368, "pr_title": "[Doc] add different pages for java/kotlin multiplatform", "pr_createdAt": "2020-06-16T15:18:28Z", "pr_url": "https://github.com/apollographql/apollo-android/pull/2368", "timeline": [{"oid": "04c007c8c3cc8250d2c03575b38c447c3ef8826d", "url": "https://github.com/apollographql/apollo-android/commit/04c007c8c3cc8250d2c03575b38c447c3ef8826d", "message": "update README.md", "committedDate": "2020-06-16T12:09:00Z", "type": "commit"}, {"oid": "1b24c19bd29c92d8d2e1bf7605f04ed84c85afc5", "url": "https://github.com/apollographql/apollo-android/commit/1b24c19bd29c92d8d2e1bf7605f04ed84c85afc5", "message": "simplify the README.md", "committedDate": "2020-06-16T12:36:34Z", "type": "commit"}, {"oid": "1574ff2e1754a8edd554592ea9c8ab4fc949b8bf", "url": "https://github.com/apollographql/apollo-android/commit/1574ff2e1754a8edd554592ea9c8ab4fc949b8bf", "message": "added different Get Started pages for Java/kotlin/multiplatform", "committedDate": "2020-06-16T15:16:51Z", "type": "commit"}, {"oid": "1f5f53ada63d372162c0f65c2353fdc0d1a391d9", "url": "https://github.com/apollographql/apollo-android/commit/1f5f53ada63d372162c0f65c2353fdc0d1a391d9", "message": "add more context about multiplatform", "committedDate": "2020-06-16T15:48:56Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk3Mzc0NA==", "url": "https://github.com/apollographql/apollo-android/pull/2368#discussion_r440973744", "bodyText": "Would be nice to also put a link to our slides. \ud83e\udd18", "author": "tasomaniac", "createdAt": "2020-06-16T16:12:21Z", "path": "README.md", "diffHunk": "@@ -45,168 +66,42 @@ dependencies {\n   implementation(\"com.apollographql.apollo:apollo-coroutines-support:x.y.z\")\n   // optional: for RxJava3 support  \n   implementation(\"com.apollographql.apollo:apollo-rx3-support:x.y.z\")\n-\n-  // optional: if you just want the generated models and parser write your own HTTP code/cache code   \n+  // optional: if you just want the generated models and parsers and write your own HTTP code/cache code, you can remove apollo-runtime\n+  // and use apollo-api instead  \n   implementation(\"com.apollographql.apollo:apollo-api:x.y.z\")\n }\n ```\n \n-## Downloading a `schema.json` file\n-\n-Apollo Android requires your GraphQL server's schema as a `schema.json` file. You can obtain the contents of this file by running an introspection query on your server.\n-\n-The Apollo Gradle plugin exposes a `downloadApolloSchema` task to help you obtain your schema. Provide this task your server's GraphQL endpoint and the output location for the `schema.json` file:\n-\n-```bash\n-./gradlew downloadApolloSchema \\\n-  -Pcom.apollographql.apollo.endpoint=https://your.graphql.endpoint \\\n-  -Pcom.apollographql.apollo.schema=src/main/graphql/com/example/schema.json\n-```\n-\n-If your GraphQL endpoint requires authentication, you can pass custom HTTP headers:\n-\n-```bash\n-./gradlew downloadApolloSchema \\\n-  -Pcom.apollographql.apollo.endpoint=https://your.graphql.endpoint \\\n-  -Pcom.apollographql.apollo.schema=src/main/graphql/com/example/schema.json \\\n-  \"-Pcom.apollographql.apollo.headers=Authorization=Bearer YOUR_TOKEN\" \\\n-  \"-Pcom.apollographql.apollo.query_params=key1=value1&key2=value2\"\n-```\n-\n-## Generating models from your queries\n-\n-1. Create a directory for your GraphQL files like you would do for Java/Kotlin: `src/main/graphql/com/example/`. Apollo Android will generate models in the `com.apollographql.apollo.sample` package.\n-2. Add your `schema.json` to the directory at `src/main/graphql/com/example/schema.json`. If you don't have a `schema.json` file yet, see [Downloading a schema.json file](#downloading-a-schemajson-file). \n-3. Put each of your client's GraphQL queries in its own `.graphql` file, such as `src/main/graphql/com/example/LaunchDetails.graphql` for the following query: \n-\n-```graphql\n-query LaunchDetails($id:ID!) {\n-  launch(id: $id) {\n-    id\n-    site\n-    mission {\n-      name\n-      missionPatch(size:LARGE)\n-    }\n-  }\n-}\n-```\n-\n-4. Specify whether you want to generate Kotlin or Java models:\n-\n-```groovy\n-apollo {\n-  generateKotlinModels.set(true) // or false for Java models\n-}\n-```\n-\n-5. Build your project to generate models from your queries. In the case of the example query above, this generates a `LaunchDetailsQuery` Java or Kotlin source file.\n-\n-## Executing queries\n-\n-You use an instance of the `ApolloClient` class to interact with your server and cache.\n-\n-To make a query using your generated models:\n-\n-```kotlin\n-val apolloClient = ApolloClient.builder()\n-  .serverUrl(\"https://your.domain/graphql/endpoint\") // replace this with your actual endpoint\n-  .build()\n-\n-apolloClient.query(LaunchDetailsQuery(id = \"83\"))\n-  .enqueue(object : ApolloCall.Callback<LaunchDetailsQuery.Data>() {\n-    override fun onFailure(e: ApolloException) {\n-      Log.e(\"Apollo\", \"Error\", e)\n-    }\n-\n-    override fun onResponse(response: Response<LaunchDetailsQuery.Data>) {\n-      Log.e(\"Apollo\", \"Launch site: ${response.data?.launch?.site}\")\n-    }\n-  })\n-```\n-\n-## Custom scalar types\n-\n-Apollo supports [custom scalar types](https://www.apollographql.com/docs/apollo-server/schema/scalars-enums/), such as `Date`.\n-\n-You first need to define the mapping in your `build.gradle` file. This maps from the GraphQL type to the Java/Kotlin class to use in code.\n-\n-```groovy\n-// Java\n-apollo {\n-  customTypeMapping = [\n-    \"Date\" : \"java.util.Date\"\n-  ]\n-}\n-\n-// Kotlin\n-apollo {\n-  customTypeMapping.set(mapOf(\n-    \"Date\" to \"java.util.Date\"\n-  ))\n-}\n-```\n-\n-Next, register your custom adapter and add it to your `ApolloClient` builder:\n-\n-```kotlin\n-val dateCustomTypeAdapter = object : CustomTypeAdapter<Date> {\n-  override fun decode(value: CustomTypeValue<*>): Date {\n-    return try {\n-      DATE_FORMAT.parse(value.value.toString())\n-    } catch (e: ParseException) {\n-      throw RuntimeException(e)\n-    }\n-  }\n-    \n-  override fun encode(value: Date): CustomTypeValue<*> {\n-    return GraphQLString(DATE_FORMAT.format(value))\n-  }\n-}\n-    \n-ApolloClient.builder()\n-  .serverUrl(serverUrl)\n-  .addCustomTypeAdapter(CustomType.DATE, dateCustomTypeAdapter)\n-  .build()\n-```\n-\n-## IntelliJ Plugin\n-\n-The [JS Graphql IntelliJ Plugin](https://jimkyndemeyer.github.io/js-graphql-intellij-plugin/) provides auto-completion, error highlighting, and go-to-definition functionality for your `.graphql` files. You can create a [`.graphqlconfig`](https://jimkyndemeyer.github.io/js-graphql-intellij-plugin/docs/developer-guide#working-with-graphql-endpoints-and-scratch-files) file to use GraphQL scratch files to work with your schema outside product code (such as to write temporary queries to test resolvers).\n-\n-## Releases\n-\n-Our [changelog](https://github.com/apollographql/apollo-android/releases) has the release history. \n-\n-Releases are hosted on [jcenter](https://jcenter.bintray.com/com/apollographql/apollo/).\n-\n Latest development changes are available in Sonatype's snapshots repository:\n \n-```gradle\n+```gradle:title=build.gradle.kts\n repositories {\n-  maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }\n+  maven { \n+    url = uri(\"https://oss.sonatype.org/content/repositories/snapshots/\")\n+  }\n }\n ```\n \n-## Advanced topics\n-\n-Advanced topics are available in [the official docs](https://www.apollographql.com/docs/android/):\n+## Requirements \n \n-* [caching.md](https://www.apollographql.com/docs/android/essentials/caching/)  \n-* [plugin-configuration.md](https://www.apollographql.com/docs/android/essentials/plugin-configuration/) \n-* [android.md](https://www.apollographql.com/docs/android/advanced/android/) \n-* [file-upload.md](https://www.apollographql.com/docs/android/advanced/file-upload/)\n-* [coroutines.md](https://www.apollographql.com/docs/android/advanced/coroutines/) \n-* [rxjava2.md](https://www.apollographql.com/docs/android/advanced/rxjava2/)\n-* [rxjava3.md](https://www.apollographql.com/docs/android/advanced/rxjava3/)\n-* [persisted-queries.md](https://www.apollographql.com/docs/android/advanced/persisted-queries/)\n-* [no-runtime.md](https://www.apollographql.com/docs/android/advanced/no-runtime/) \n-* [migrations.md](https://www.apollographql.com/docs/android/essentials/migration/)\n+Apollo Android runs on the following platforms:\n \n+* Android API level 15+\n+* JDK 8+\n+* iOS 13\n+ \n ## Contributing\n \n If you'd like to contribute, please see [Contributing.md](https://github.com/apollographql/apollo-android/blob/master/Contributing.md).\n \n+## Additional resources\n+\n+- [#125, Fragmented Podcast](http://fragmentedpodcast.com/episodes/125/): Why's and How's about Apollo Android and the entire journey.", "originalCommit": "1f5f53ada63d372162c0f65c2353fdc0d1a391d9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk5NzU4MQ==", "url": "https://github.com/apollographql/apollo-android/pull/2368#discussion_r440997581", "bodyText": "\ud83d\udcaf I just added them", "author": "martinbonnin", "createdAt": "2020-06-16T16:48:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk3Mzc0NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk4MDc1Mw==", "url": "https://github.com/apollographql/apollo-android/pull/2368#discussion_r440980753", "bodyText": "These shared files are not included in the index, is that intentional?", "author": "tasomaniac", "createdAt": "2020-06-16T16:23:16Z", "path": "docs/source/shared/add-query.mdx", "diffHunk": "@@ -0,0 +1,18 @@\n+1. Create a directory for your GraphQL files: `src/main/graphql/com/example/`", "originalCommit": "1f5f53ada63d372162c0f65c2353fdc0d1a391d9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk5ODA0Mg==", "url": "https://github.com/apollographql/apollo-android/pull/2368#discussion_r440998042", "bodyText": "Yep, they are shared between the Java/Kotlin/Multiplatform pages thanks to the .mdx magic", "author": "martinbonnin", "createdAt": "2020-06-16T16:49:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk4MDc1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTAyNjg0NA==", "url": "https://github.com/apollographql/apollo-android/pull/2368#discussion_r441026844", "bodyText": "Today I learned.", "author": "tasomaniac", "createdAt": "2020-06-16T17:37:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk4MDc1Mw=="}], "type": "inlineReview"}, {"oid": "f2497f15fb752f67fa72cbdd1c273609fe2f98e2", "url": "https://github.com/apollographql/apollo-android/commit/f2497f15fb752f67fa72cbdd1c273609fe2f98e2", "message": "more details", "committedDate": "2020-06-16T16:47:06Z", "type": "commit"}]}