{"pr_number": 2298, "pr_title": "[New Runtime] Add BearerTokenInterceptor", "pr_createdAt": "2020-05-22T17:00:19Z", "pr_url": "https://github.com/apollographql/apollo-android/pull/2298", "timeline": [{"oid": "681b95d73bdb601e23e275689b1cad99f297a321", "url": "https://github.com/apollographql/apollo-android/commit/681b95d73bdb601e23e275689b1cad99f297a321", "message": "add OauthInterceptor", "committedDate": "2020-05-22T15:04:48Z", "type": "commit"}, {"oid": "515db2430f22f4838c7451cd608da5634ba903d9", "url": "https://github.com/apollographql/apollo-android/commit/515db2430f22f4838c7451cd608da5634ba903d9", "message": "use retry and lock from the interceptor itself", "committedDate": "2020-05-22T15:04:50Z", "type": "commit"}, {"oid": "1de2690f48c63f4d87b8bf085192642d04716587", "url": "https://github.com/apollographql/apollo-android/commit/1de2690f48c63f4d87b8bf085192642d04716587", "message": "rename to BearerTokenInterceptor", "committedDate": "2020-05-22T15:04:50Z", "type": "commit"}, {"oid": "c8ca6adf7c7905625fdbe65350612b1aa0bc4ab4", "url": "https://github.com/apollographql/apollo-android/commit/c8ca6adf7c7905625fdbe65350612b1aa0bc4ab4", "message": "integrate feedbacks", "committedDate": "2020-05-22T16:58:33Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY5ODA0OQ==", "url": "https://github.com/apollographql/apollo-android/pull/2298#discussion_r430698049", "bodyText": "I feel like this let only add to the default branch with emptyMap. It should add to the existing context, shouldn't it?", "author": "tasomaniac", "createdAt": "2020-05-26T20:46:27Z", "path": "apollo-runtime-kotlin/src/commonMain/kotlin/com/apollographql/apollo/interceptor/BearerTokenInterceptor.kt", "diffHunk": "@@ -0,0 +1,61 @@\n+package com.apollographql.apollo.interceptor\n+\n+import com.apollographql.apollo.ApolloException\n+import com.apollographql.apollo.ApolloHttpException\n+import com.apollographql.apollo.BearerTokenException\n+import com.apollographql.apollo.api.ApolloExperimental\n+import com.apollographql.apollo.api.Response\n+import com.apollographql.apollo.network.HttpExecutionContext\n+import kotlinx.coroutines.flow.Flow\n+import kotlinx.coroutines.flow.catch\n+import kotlinx.coroutines.flow.flatMapConcat\n+import kotlinx.coroutines.flow.flow\n+import kotlinx.coroutines.flow.retry\n+import kotlinx.coroutines.sync.Mutex\n+import kotlinx.coroutines.sync.withLock\n+\n+@ApolloExperimental\n+class BearerTokenInterceptor(private val tokenProvider: TokenProvider) : ApolloRequestInterceptor {\n+  val mutex = Mutex()\n+\n+  private fun <T> ApolloRequest<T>.withHeader(name: String, value: String): ApolloRequest<T> {\n+    val httpRequestContext = executionContext[HttpExecutionContext.Request]\n+        ?: HttpExecutionContext.Request(emptyMap())\n+            .let {", "originalCommit": "c8ca6adf7c7905625fdbe65350612b1aa0bc4ab4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDcxNjc5MQ==", "url": "https://github.com/apollographql/apollo-android/pull/2298#discussion_r430716791", "bodyText": "Oh my. Good catch, thanks !", "author": "martinbonnin", "createdAt": "2020-05-26T21:25:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY5ODA0OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY5ODg2Mg==", "url": "https://github.com/apollographql/apollo-android/pull/2298#discussion_r430698862", "bodyText": "Would it make sense to somehow extend ApolloHttpException here since this is essentially also an HttpException", "author": "tasomaniac", "createdAt": "2020-05-26T20:48:01Z", "path": "apollo-runtime-kotlin/src/commonMain/kotlin/com/apollographql/apollo/ApolloException.kt", "diffHunk": "@@ -14,3 +14,5 @@ class ApolloHttpException(\n     message: String,\n     cause: Throwable? = null\n ) : ApolloException(message = message, cause = cause)\n+\n+class BearerTokenException(message: String, cause: Throwable? = null, val token: String): ApolloException(message = message, cause = cause)", "originalCommit": "c8ca6adf7c7905625fdbe65350612b1aa0bc4ab4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDcxOTAwOQ==", "url": "https://github.com/apollographql/apollo-android/pull/2298#discussion_r430719009", "bodyText": "The reasoning was to keep the inheritance tree relatively flat. Also now that ApolloException is a sealed class, inheriting from sealed class wouldn't be working.\nIf the user wants statusCode and headers, they are still readable in BearerTokenException.cause\nPS: I prefixed with Apollo: ApolloBearerTokenException to make it consistent with the other classes above.", "author": "martinbonnin", "createdAt": "2020-05-26T21:30:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY5ODg2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTY1Nzc1OQ==", "url": "https://github.com/apollographql/apollo-android/pull/2298#discussion_r431657759", "bodyText": "Sounds good. Maybe the type of cause can be the concrete type rather than Throwable.", "author": "tasomaniac", "createdAt": "2020-05-28T08:11:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY5ODg2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTY1ODE3Ng==", "url": "https://github.com/apollographql/apollo-android/pull/2298#discussion_r431658176", "bodyText": "But tbh, I'm not sure if that's even necessary since this is not going to be used directly, right?", "author": "tasomaniac", "createdAt": "2020-05-28T08:12:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY5ODg2Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDcwMDM0NQ==", "url": "https://github.com/apollographql/apollo-android/pull/2298#discussion_r430700345", "bodyText": "I wonder how much we should follow OAuth standards here? I was thinking about refreshToken for example. That is usually used for getting a new token in such scenario.", "author": "tasomaniac", "createdAt": "2020-05-26T20:51:08Z", "path": "apollo-runtime-kotlin/src/commonMain/kotlin/com/apollographql/apollo/interceptor/TokenProvider.kt", "diffHunk": "@@ -0,0 +1,6 @@\n+package com.apollographql.apollo.interceptor\n+\n+interface TokenProvider {\n+  suspend fun currentToken(): String\n+  suspend fun renewToken(previousToken: String): String", "originalCommit": "c8ca6adf7c7905625fdbe65350612b1aa0bc4ab4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDcxOTYxMQ==", "url": "https://github.com/apollographql/apollo-android/pull/2298#discussion_r430719611", "bodyText": "Renamed. Also, that aligns perfectly with currentToken \ud83d\udc4c", "author": "martinbonnin", "createdAt": "2020-05-26T21:31:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDcwMDM0NQ=="}], "type": "inlineReview"}, {"oid": "1bdb51e205db90dd4018b020aea5619dbfde209c", "url": "https://github.com/apollographql/apollo-android/commit/1bdb51e205db90dd4018b020aea5619dbfde209c", "message": "fix let applied to the wrong expression", "committedDate": "2020-05-26T21:25:24Z", "type": "commit"}, {"oid": "43b10e8d0a1dadd3a4b0d968c27c2984fb3e576e", "url": "https://github.com/apollographql/apollo-android/commit/43b10e8d0a1dadd3a4b0d968c27c2984fb3e576e", "message": "prefix with `Apollo`", "committedDate": "2020-05-26T21:30:26Z", "type": "commit"}, {"oid": "3623a3fac3da1075177517ec2f7d9ee75eab8ae6", "url": "https://github.com/apollographql/apollo-android/commit/3623a3fac3da1075177517ec2f7d9ee75eab8ae6", "message": "renewToken -> refreshToken", "committedDate": "2020-05-26T21:31:04Z", "type": "commit"}]}