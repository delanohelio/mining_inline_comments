{"pr_number": 2535, "pr_title": "Part 2 (backend): New Kotlin codegen", "pr_createdAt": "2020-08-23T16:39:10Z", "pr_url": "https://github.com/apollographql/apollo-android/pull/2535", "timeline": [{"oid": "96e800047a806048bcf037b8a7390cee7f9b1553", "url": "https://github.com/apollographql/apollo-android/commit/96e800047a806048bcf037b8a7390cee7f9b1553", "message": "Part 2 (backend): New Kotlin codegen\n\nKotlin backend, transform generated AST to Kotlin code. Modified copy of old Kotlin code gen except generating code for fields with fragments.\n\nNamed fragment now generated as interfaces with default implementation.", "committedDate": "2020-08-23T16:41:25Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI0NDk4MA==", "url": "https://github.com/apollographql/apollo-android/pull/2535#discussion_r475244980", "bodyText": "Importing these classes would make the code easier to read", "author": "tasomaniac", "createdAt": "2020-08-23T17:34:38Z", "path": "apollo-compiler/src/main/kotlin/com/apollographql/apollo/compiler/next/codegen/Common.kt", "diffHunk": "@@ -0,0 +1,409 @@\n+package com.apollographql.apollo.compiler.next.codegen\n+\n+import com.apollographql.apollo.api.ResponseField\n+import com.apollographql.apollo.api.internal.ResponseFieldMapper\n+import com.apollographql.apollo.api.internal.ResponseFieldMarshaller\n+import com.apollographql.apollo.api.internal.ResponseReader\n+import com.apollographql.apollo.compiler.applyIf\n+import com.apollographql.apollo.compiler.codegen.kotlin.KotlinCodeGen\n+import com.apollographql.apollo.compiler.next.ast.CodeGenerationAst\n+import com.squareup.kotlinpoet.AnnotationSpec\n+import com.squareup.kotlinpoet.BOOLEAN\n+import com.squareup.kotlinpoet.ClassName\n+import com.squareup.kotlinpoet.CodeBlock\n+import com.squareup.kotlinpoet.DOUBLE\n+import com.squareup.kotlinpoet.FLOAT\n+import com.squareup.kotlinpoet.FunSpec\n+import com.squareup.kotlinpoet.INT\n+import com.squareup.kotlinpoet.KModifier\n+import com.squareup.kotlinpoet.LONG\n+import com.squareup.kotlinpoet.ParameterSpec\n+import com.squareup.kotlinpoet.ParameterizedTypeName.Companion.parameterizedBy\n+import com.squareup.kotlinpoet.PropertySpec\n+import com.squareup.kotlinpoet.TypeName\n+import com.squareup.kotlinpoet.asClassName\n+import com.squareup.kotlinpoet.asTypeName\n+import com.squareup.kotlinpoet.joinToCode\n+\n+internal fun CodeGenerationAst.FieldType.asTypeName(nullable: Boolean = false): TypeName {\n+  return when (this) {\n+    is CodeGenerationAst.FieldType.Scalar -> when (this) {\n+      is CodeGenerationAst.FieldType.Scalar.ID -> ClassName.bestGuess(type)", "originalCommit": "96e800047a806048bcf037b8a7390cee7f9b1553", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI1MzkxMg==", "url": "https://github.com/apollographql/apollo-android/pull/2535#discussion_r475253912", "bodyText": "If we do that, I wouldn't be against some kind of prefixing like ASTFieldType, IRFieldType, etc... Maybe FieldType isn't too much used in other places but we have 7 different Field classes and it's sometimes hard to get which layer is used when opening a new file.", "author": "martinbonnin", "createdAt": "2020-08-23T19:07:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI0NDk4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI3NDE5Nw==", "url": "https://github.com/apollographql/apollo-android/pull/2535#discussion_r475274197", "bodyText": "I now realized that this is in Common.kt. So my suggestion is not a good idea.", "author": "tasomaniac", "createdAt": "2020-08-23T22:20:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI0NDk4MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI0NTMzNA==", "url": "https://github.com/apollographql/apollo-android/pull/2535#discussion_r475245334", "bodyText": "Can this be just KModifier.PRIVATE", "author": "tasomaniac", "createdAt": "2020-08-23T17:37:13Z", "path": "apollo-compiler/src/main/kotlin/com/apollographql/apollo/compiler/next/codegen/Common.kt", "diffHunk": "@@ -0,0 +1,409 @@\n+package com.apollographql.apollo.compiler.next.codegen\n+\n+import com.apollographql.apollo.api.ResponseField\n+import com.apollographql.apollo.api.internal.ResponseFieldMapper\n+import com.apollographql.apollo.api.internal.ResponseFieldMarshaller\n+import com.apollographql.apollo.api.internal.ResponseReader\n+import com.apollographql.apollo.compiler.applyIf\n+import com.apollographql.apollo.compiler.codegen.kotlin.KotlinCodeGen\n+import com.apollographql.apollo.compiler.next.ast.CodeGenerationAst\n+import com.squareup.kotlinpoet.AnnotationSpec\n+import com.squareup.kotlinpoet.BOOLEAN\n+import com.squareup.kotlinpoet.ClassName\n+import com.squareup.kotlinpoet.CodeBlock\n+import com.squareup.kotlinpoet.DOUBLE\n+import com.squareup.kotlinpoet.FLOAT\n+import com.squareup.kotlinpoet.FunSpec\n+import com.squareup.kotlinpoet.INT\n+import com.squareup.kotlinpoet.KModifier\n+import com.squareup.kotlinpoet.LONG\n+import com.squareup.kotlinpoet.ParameterSpec\n+import com.squareup.kotlinpoet.ParameterizedTypeName.Companion.parameterizedBy\n+import com.squareup.kotlinpoet.PropertySpec\n+import com.squareup.kotlinpoet.TypeName\n+import com.squareup.kotlinpoet.asClassName\n+import com.squareup.kotlinpoet.asTypeName\n+import com.squareup.kotlinpoet.joinToCode\n+\n+internal fun CodeGenerationAst.FieldType.asTypeName(nullable: Boolean = false): TypeName {\n+  return when (this) {\n+    is CodeGenerationAst.FieldType.Scalar -> when (this) {\n+      is CodeGenerationAst.FieldType.Scalar.ID -> ClassName.bestGuess(type)\n+      is CodeGenerationAst.FieldType.Scalar.String -> String::class.asClassName()\n+      is CodeGenerationAst.FieldType.Scalar.Int -> INT\n+      is CodeGenerationAst.FieldType.Scalar.Boolean -> BOOLEAN\n+      is CodeGenerationAst.FieldType.Scalar.Float -> DOUBLE\n+      is CodeGenerationAst.FieldType.Scalar.Enum -> typeRef.asTypeName()\n+      is CodeGenerationAst.FieldType.Scalar.Custom -> ClassName.bestGuess(type)\n+    }\n+    is CodeGenerationAst.FieldType.Object -> typeRef.asTypeName()\n+    is CodeGenerationAst.FieldType.Array -> List::class.asClassName().parameterizedBy(rawType.asTypeName(nullable))\n+  }.copy(nullable = nullable)\n+}\n+\n+internal fun CodeGenerationAst.TypeRef.asTypeName(): TypeName {\n+  return if (enclosingType == null) {\n+    ClassName(packageName, name)\n+  } else {\n+    ClassName(packageName, enclosingType.name, name)\n+  }\n+}\n+\n+internal fun Any.toDefaultValueCodeBlock(typeName: TypeName, fieldType: CodeGenerationAst.FieldType): CodeBlock {\n+  return when {\n+    this is Number -> CodeBlock.of(\"%L%L\", castTo(typeName), if (typeName == LONG) \"L\" else \"\")\n+    fieldType is CodeGenerationAst.FieldType.Scalar.Enum -> CodeBlock.of(\"%T.safeValueOf(%S)\", typeName, this)\n+    fieldType is CodeGenerationAst.FieldType.Array -> {\n+      @Suppress(\"UNCHECKED_CAST\")\n+      (this as List<Any>).toDefaultValueCodeBlock(typeName, fieldType)\n+    }\n+    this !is String -> CodeBlock.of(\"%L\", this)\n+    else -> CodeBlock.of(\"%S\", this)\n+  }\n+}\n+\n+internal fun CodeGenerationAst.Field.asPropertySpec(initializer: CodeBlock? = null): PropertySpec {\n+  return PropertySpec\n+      .builder(\n+          name = name,\n+          type = if (type.nullable) type.asTypeName().copy(nullable = true) else type.asTypeName()\n+      )\n+      .applyIf(override) { addModifiers(KModifier.OVERRIDE) }\n+      .applyIf(deprecated) { addAnnotation(KotlinCodeGen.deprecatedAnnotation(deprecationReason)) }\n+      .applyIf(description.isNotBlank()) { addKdoc(\"%L\\n\", description) }\n+      .applyIf(initializer != null) { initializer(initializer!!) }\n+      .build()\n+}\n+\n+internal fun responseFieldsPropertySpec(fields: List<CodeGenerationAst.Field>): PropertySpec {\n+  val initializer = CodeBlock.builder()\n+      .addStatement(\"arrayOf(\")\n+      .indent()\n+      .add(fields.map { field -> field.responseFieldInitializerCode }.joinToCode(separator = \",\\n\"))\n+      .unindent()\n+      .addStatement(\"\")\n+      .add(\")\")\n+      .build()\n+  return PropertySpec\n+      .builder(\n+          name = \"RESPONSE_FIELDS\",\n+          type = Array<ResponseField>::class.asClassName().parameterizedBy(ResponseField::class.asClassName()),\n+          modifiers = *arrayOf(KModifier.PRIVATE)", "originalCommit": "96e800047a806048bcf037b8a7390cee7f9b1553", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "bcbd2de76dab353bd46ba91edd6e33712cba6a33", "url": "https://github.com/apollographql/apollo-android/commit/bcbd2de76dab353bd46ba91edd6e33712cba6a33", "message": "Part 2 (backend): New Kotlin codegen\n\nKotlin backend, transform generated AST to Kotlin code. Modified copy of old Kotlin code gen except generating code for fields with fragments.\n\nNamed fragment now generated as interfaces with default implementation.", "committedDate": "2020-08-26T03:26:48Z", "type": "commit"}, {"oid": "9628764c52c237b710ae730e655d28bf8f01d60a", "url": "https://github.com/apollographql/apollo-android/commit/9628764c52c237b710ae730e655d28bf8f01d60a", "message": "Refactoring / fixing issues after running new code gen for existing test fixtures. No breaking changes yet.", "committedDate": "2020-08-26T03:28:01Z", "type": "commit"}, {"oid": "4a3fd3e014ace06e1703400fdd023f120aa35538", "url": "https://github.com/apollographql/apollo-android/commit/4a3fd3e014ace06e1703400fdd023f120aa35538", "message": "Revert", "committedDate": "2020-08-26T03:28:04Z", "type": "commit"}, {"oid": "4a3fd3e014ace06e1703400fdd023f120aa35538", "url": "https://github.com/apollographql/apollo-android/commit/4a3fd3e014ace06e1703400fdd023f120aa35538", "message": "Revert", "committedDate": "2020-08-26T03:28:04Z", "type": "forcePushed"}, {"oid": "a06b04d14efcc17aca58a72fb28f3f61d608619b", "url": "https://github.com/apollographql/apollo-android/commit/a06b04d14efcc17aca58a72fb28f3f61d608619b", "message": "Update test fixtures", "committedDate": "2020-08-26T04:00:23Z", "type": "commit"}]}