{"pr_number": 2388, "pr_title": "Subscription connection keep alive", "pr_createdAt": "2020-06-23T01:20:34Z", "pr_url": "https://github.com/apollographql/apollo-android/pull/2388", "timeline": [{"oid": "de0dedf61347636d1a5e9fe92e66969e971b21b0", "url": "https://github.com/apollographql/apollo-android/commit/de0dedf61347636d1a5e9fe92e66969e971b21b0", "message": "Subscription connection keep alive\n\nAdd support for heart beat feature, see https://github.com/apollographql/subscriptions-transport-ws/blob/master/PROTOCOL.md#gql_connection_keep_alive\n\nAuto close web socket connection if `GQL_CONNECTION_KEEP_ALIVE` has not been received in configured timeout.\n\nPart of https://github.com/apollographql/apollo-android/issues/2222", "committedDate": "2020-06-23T01:20:00Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDA5MDIzOQ==", "url": "https://github.com/apollographql/apollo-android/pull/2388#discussion_r444090239", "bodyText": "Why is this yield required?", "author": "martinbonnin", "createdAt": "2020-06-23T09:30:05Z", "path": "apollo-runtime-kotlin/src/commonMain/kotlin/com/apollographql/apollo/network/ws/ApolloWebSocketNetworkTransport.kt", "diffHunk": "@@ -205,22 +214,34 @@ class ApolloWebSocketNetworkTransport(\n \n     private suspend fun onUnsubscribed() {\n       mutex.withLock {\n-        if (--activeSubscriptionCount == 0) scheduleAutoClose()\n+        if (--activeSubscriptionCount == 0 && idleTimeoutMs > 0) {\n+          idleTimeoutJob?.cancel()\n+          connectionKeepAliveTimeoutJob?.cancel()\n+\n+          idleTimeoutJob = coroutineScope.launch {\n+            delay(idleTimeoutMs)\n+            close()\n+          }\n+        }\n       }\n     }\n \n-    private fun scheduleAutoClose() {\n-      idleTimeoutJob?.cancel()\n-      if (idleTimeoutMs > 0) {\n-        idleTimeoutJob = coroutineScope.launch {\n-          delay(idleTimeoutMs)\n-          close()\n+    private suspend fun onConnectionKeepAlive() {\n+      mutex.withLock {\n+        if (activeSubscriptionCount > 0 && connectionKeepAliveTimeoutMs > 0) {\n+          connectionKeepAliveTimeoutJob?.cancel()\n+\n+          connectionKeepAliveTimeoutJob = coroutineScope.launch {\n+            delay(idleTimeoutMs)\n+            close()\n+          }\n         }\n       }\n     }\n \n     private suspend fun close() {\n       mutex.withLock {\n+        yield()", "originalCommit": "de0dedf61347636d1a5e9fe92e66969e971b21b0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA3Nzk5Mg==", "url": "https://github.com/apollographql/apollo-android/pull/2388#discussion_r445077992", "bodyText": "After second thought seems there is no need for it here.\nMy initial thinking was that the coroutine might have been canceled before we acquire mutex, so to handle this case we call yield  that will fail if coroutine is canceled. But mutex.withLock  is suspended function so it will be handled anyway, if coroutine is canceled then mutex.withLock will be canceled.", "author": "sav007", "createdAt": "2020-06-24T18:07:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDA5MDIzOQ=="}], "type": "inlineReview"}, {"oid": "86f8ad3d789a81d9c4397fb5e2faae48fc653ec0", "url": "https://github.com/apollographql/apollo-android/commit/86f8ad3d789a81d9c4397fb5e2faae48fc653ec0", "message": "Remove redundant `yield`", "committedDate": "2020-06-24T18:08:15Z", "type": "commit"}]}