{"pr_number": 2150, "pr_title": "Generate 'composeRequestBody' to encode GraphQL POST request payload", "pr_createdAt": "2020-04-10T19:02:17Z", "pr_url": "https://github.com/apollographql/apollo-android/pull/2150", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkyNTg3Mw==", "url": "https://github.com/apollographql/apollo-android/pull/2150#discussion_r406925873", "bodyText": "If we use use function, then this close will be called automatically and safer.", "author": "tasomaniac", "createdAt": "2020-04-10T20:21:30Z", "path": "apollo-api/src/commonMain/kotlin/com/apollographql/apollo/api/internal/OperationRequestBodyComposer.kt", "diffHunk": "@@ -0,0 +1,46 @@\n+package com.apollographql.apollo.api.internal\n+\n+import com.apollographql.apollo.api.Operation\n+import com.apollographql.apollo.api.ScalarTypeAdapters\n+import com.apollographql.apollo.api.internal.json.JsonWriter\n+import okio.Buffer\n+import okio.ByteString\n+import kotlin.jvm.JvmStatic\n+\n+object OperationRequestBodyComposer {\n+\n+  @JvmStatic\n+  fun compose(\n+      operation: Operation<*, *, *>,\n+      autoPersistQueries: Boolean,\n+      withQueryDocument: Boolean,\n+      scalarTypeAdapters: ScalarTypeAdapters\n+  ): ByteString {\n+    return Buffer().apply {\n+      JsonWriter.of(this)\n+          .apply { serializeNulls = true }\n+          .beginObject()\n+          .name(\"operationName\").value(operation.name().name())\n+          .name(\"variables\").jsonValue(operation.variables().marshal(scalarTypeAdapters))\n+          .apply {\n+            if (autoPersistQueries) {\n+              name(\"extensions\")\n+                  .beginObject()\n+                  .name(\"persistedQuery\")\n+                  .beginObject()\n+                  .name(\"version\").value(1)\n+                  .name(\"sha256Hash\").value(operation.operationId())\n+                  .endObject()\n+                  .endObject()\n+            }\n+          }\n+          .apply {\n+            if (withQueryDocument) {\n+              name(\"query\").value(operation.queryDocument())\n+            }\n+          }\n+          .endObject()\n+          .close()", "originalCommit": "8f903d87815565e84d703eb0965e40585ec6be3f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "6fd5743cd2d20d7e219032cd3c8e40214fc14255", "url": "https://github.com/apollographql/apollo-android/commit/6fd5743cd2d20d7e219032cd3c8e40214fc14255", "message": "Fix test", "committedDate": "2020-04-11T04:36:02Z", "type": "forcePushed"}, {"oid": "49b27fb85a0d43520eb1c254dac1a5b5206fff6d", "url": "https://github.com/apollographql/apollo-android/commit/49b27fb85a0d43520eb1c254dac1a5b5206fff6d", "message": "Fix test", "committedDate": "2020-04-11T16:03:03Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA4NTk4Mw==", "url": "https://github.com/apollographql/apollo-android/pull/2150#discussion_r407085983", "bodyText": "Just curious: what's the advantage of  exposing a ByteString instead of a String ? Do we support something else than utf8 ?", "author": "martinbonnin", "createdAt": "2020-04-11T16:58:34Z", "path": "apollo-api/src/commonMain/kotlin/com/apollographql/apollo/api/Operation.kt", "diffHunk": "@@ -60,6 +61,34 @@ interface Operation<D : Operation.Data, T, V : Operation.Variables> {\n   @Throws(IOException::class)\n   fun parse(source: BufferedSource): Response<T>\n \n+  /**\n+   * Composes POST JSON-encoded request body with provided [scalarTypeAdapters] to be sent to the GraphQL server.\n+   *\n+   * *Example*:\n+   * ```\n+   * {\n+   *    \"query\": \"query TestQuery($episode: Episode) { hero(episode: $episode) { name } }\",\n+   *    \"operationName\": \"TestQuery\",\n+   *    \"variables\": { \"episode\": \"JEDI\" }\n+   * }\n+   * ```\n+   */\n+  fun composeRequestBody(scalarTypeAdapters: ScalarTypeAdapters): ByteString", "originalCommit": "49b27fb85a0d43520eb1c254dac1a5b5206fff6d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEzODExNw==", "url": "https://github.com/apollographql/apollo-android/pull/2150#discussion_r407138117", "bodyText": "Sure we can make it as a String, I was optimizing for okhttp3.RequestBody\nhttps://github.com/square/okhttp/blob/master/okhttp/src/main/kotlin/okhttp3/RequestBody.kt#L105\nin case of string it will convert it to back to byte array, so we are saving here extra conversions bytestring -> string -> bytestring.", "author": "sav007", "createdAt": "2020-04-12T03:00:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA4NTk4Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA4NjMyMQ==", "url": "https://github.com/apollographql/apollo-android/pull/2150#discussion_r407086321", "bodyText": "Does this need to be in the generated models ?  What about just having that as an extension function in kotlin ? That's less codegen code to maintain and it'll make it easier to navigate the generated models ?", "author": "martinbonnin", "createdAt": "2020-04-11T17:01:53Z", "path": "apollo-compiler/src/test/graphql/com/example/arguments_complex/TestQuery.kt", "diffHunk": "@@ -72,6 +75,32 @@ data class TestQuery(\n   @Throws(IOException::class)\n   override fun parse(source: BufferedSource): Response<Data> = parse(source, DEFAULT)\n \n+  override fun composeRequestBody(scalarTypeAdapters: ScalarTypeAdapters): ByteString =\n+      OperationRequestBodyComposer.compose(\n+    operation = this,\n+    autoPersistQueries = false,\n+    withQueryDocument = true,\n+    scalarTypeAdapters = scalarTypeAdapters\n+  )\n+\n+  override fun composeRequestBody(): ByteString = OperationRequestBodyComposer.compose(\n+    operation = this,\n+    autoPersistQueries = false,\n+    withQueryDocument = true,\n+    scalarTypeAdapters = DEFAULT\n+  )\n+\n+  override fun composeRequestBody(\n+    autoPersistQueries: Boolean,\n+    withQueryDocument: Boolean,\n+    scalarTypeAdapters: ScalarTypeAdapters\n+  ): ByteString = OperationRequestBodyComposer.compose(\n+    operation = this,\n+    autoPersistQueries = autoPersistQueries,\n+    withQueryDocument = withQueryDocument,\n+    scalarTypeAdapters = scalarTypeAdapters\n+  )", "originalCommit": "49b27fb85a0d43520eb1c254dac1a5b5206fff6d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEzODc2OA==", "url": "https://github.com/apollographql/apollo-android/pull/2150#discussion_r407138768", "bodyText": "I see you concern but I think it should be part of generated models for 2 reasons:\n\nas it's a symmetric to the generated method implementation of Operation.parse\nand it's more nicer API from the iOS user perspective", "author": "sav007", "createdAt": "2020-04-12T03:09:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA4NjMyMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE4ODUwNQ==", "url": "https://github.com/apollographql/apollo-android/pull/2150#discussion_r407188505", "bodyText": "as it's a symmetric to the generated method implementation of Operation.parse\n\nCould Operation.parse be made an extension method ?\n\nand it's more nicer API from the iOS user perspective\n\nIndeed. Although I guess a lot of users might still consume this API from Kotlin but for those consuming it in Swift, that'll be way better \ud83d\udc4d", "author": "martinbonnin", "createdAt": "2020-04-12T12:02:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA4NjMyMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzI2OTk5NQ==", "url": "https://github.com/apollographql/apollo-android/pull/2150#discussion_r407269995", "bodyText": "Yeah we could make parse as extension function but again for Swift consumers it won't be very nice experience.", "author": "sav007", "createdAt": "2020-04-13T00:10:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA4NjMyMQ=="}], "type": "inlineReview"}, {"oid": "a2d73e894a669012a286bb5b7a636fe09cdacf40", "url": "https://github.com/apollographql/apollo-android/commit/a2d73e894a669012a286bb5b7a636fe09cdacf40", "message": "Fix test", "committedDate": "2020-04-12T03:13:11Z", "type": "forcePushed"}, {"oid": "4d6716033f03c994f46abc8b9cd6972f18b31a2c", "url": "https://github.com/apollographql/apollo-android/commit/4d6716033f03c994f46abc8b9cd6972f18b31a2c", "message": "Generate 'composeRequestBody' to encode GraphQL POST request payload\n\nCloses https://github.com/apollographql/apollo-android/issues/2137", "committedDate": "2020-04-12T03:32:01Z", "type": "commit"}, {"oid": "2353c151b740587c3417b2f04efa5227dc701d50", "url": "https://github.com/apollographql/apollo-android/commit/2353c151b740587c3417b2f04efa5227dc701d50", "message": "Remove default values from interface", "committedDate": "2020-04-12T03:32:01Z", "type": "commit"}, {"oid": "72a5ce680ae008100685ccfbc3f2496170749e32", "url": "https://github.com/apollographql/apollo-android/commit/72a5ce680ae008100685ccfbc3f2496170749e32", "message": "Feedback + iOS sample", "committedDate": "2020-04-12T03:32:01Z", "type": "commit"}, {"oid": "40345c931ae98d53d667d2780dd192123d19c0b5", "url": "https://github.com/apollographql/apollo-android/commit/40345c931ae98d53d667d2780dd192123d19c0b5", "message": "Update docs + fix issue with conditions to encode query document or not", "committedDate": "2020-04-12T03:32:01Z", "type": "commit"}, {"oid": "dcfd5ec600173dfa7fbf01543aa338f930a8fb80", "url": "https://github.com/apollographql/apollo-android/commit/dcfd5ec600173dfa7fbf01543aa338f930a8fb80", "message": "Fix test", "committedDate": "2020-04-12T03:32:02Z", "type": "commit"}, {"oid": "dcfd5ec600173dfa7fbf01543aa338f930a8fb80", "url": "https://github.com/apollographql/apollo-android/commit/dcfd5ec600173dfa7fbf01543aa338f930a8fb80", "message": "Fix test", "committedDate": "2020-04-12T03:32:02Z", "type": "forcePushed"}, {"oid": "5d0ea1178965fee984753e5b7a9ab5e6c9820c9e", "url": "https://github.com/apollographql/apollo-android/commit/5d0ea1178965fee984753e5b7a9ab5e6c9820c9e", "message": "Fix test fixtures", "committedDate": "2020-04-13T00:08:09Z", "type": "commit"}, {"oid": "c1bfcdfd1882529e5881ede2a86ac6434f5e5070", "url": "https://github.com/apollographql/apollo-android/commit/c1bfcdfd1882529e5881ede2a86ac6434f5e5070", "message": "Fix tests", "committedDate": "2020-04-13T02:40:47Z", "type": "commit"}]}