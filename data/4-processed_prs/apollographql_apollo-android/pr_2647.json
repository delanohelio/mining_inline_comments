{"pr_number": 2647, "pr_title": "Fix Missing Referenced Fragments in Query Document", "pr_createdAt": "2020-10-10T08:40:39Z", "pr_url": "https://github.com/apollographql/apollo-android/pull/2647", "timeline": [{"oid": "6af4dda43b9a1c676c77ec03871246b4231fdc7a", "url": "https://github.com/apollographql/apollo-android/commit/6af4dda43b9a1c676c77ec03871246b4231fdc7a", "message": "Fix Missing Referenced Fragments in Query Document", "committedDate": "2020-10-10T08:35:14Z", "type": "commit"}, {"oid": "52ad7cf20944b74a2b3064620cb418d946dcb3d0", "url": "https://github.com/apollographql/apollo-android/commit/52ad7cf20944b74a2b3064620cb418d946dcb3d0", "message": "Revert unnecessary formatting", "committedDate": "2020-10-10T08:39:49Z", "type": "commit"}, {"oid": "08c12102763abc80b390ec334a31303961c3f099", "url": "https://github.com/apollographql/apollo-android/commit/08c12102763abc80b390ec334a31303961c3f099", "message": "Clean up declarations", "committedDate": "2020-10-10T08:50:36Z", "type": "commit"}, {"oid": "1b5b275e59316fd9bc7b2132ba9f5ab2e070d811", "url": "https://github.com/apollographql/apollo-android/commit/1b5b275e59316fd9bc7b2132ba9f5ab2e070d811", "message": "Use Union over + and toSet()", "committedDate": "2020-10-10T09:13:50Z", "type": "commit"}, {"oid": "b7dcb05d691892e71cd260f47c6315c8fe863386", "url": "https://github.com/apollographql/apollo-android/commit/b7dcb05d691892e71cd260f47c6315c8fe863386", "message": "Fix nested fragments on root query and add test case", "committedDate": "2020-10-10T12:31:39Z", "type": "commit"}, {"oid": "8c3a0663242ddae8d11660f14bbdb9c59d5eabb0", "url": "https://github.com/apollographql/apollo-android/commit/8c3a0663242ddae8d11660f14bbdb9c59d5eabb0", "message": "Add Validation for Root Fragments on Invalid Type", "committedDate": "2020-10-12T07:39:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzEyNzk2Ng==", "url": "https://github.com/apollographql/apollo-android/pull/2647#discussion_r503127966", "bodyText": "Mostly nitpicking at this point but it feels a bit \"off\" that we need a special case for the root fragmentsRefs compared to field.fragmentRefs. What about moving the schema.rootTypeForOperationType(operationType) to the call site and re-using List<FragmentRef>.findFragments ?", "author": "martinbonnin", "createdAt": "2020-10-12T08:34:15Z", "path": "apollo-compiler/src/main/kotlin/com/apollographql/apollo/compiler/ir/IRBuilder.kt", "diffHunk": "@@ -188,6 +195,21 @@ class IRBuilder(private val schema: IntrospectionSchema,\n     return usedTypes\n   }\n \n+  private fun List<FragmentRef>.referencedRootFragmentNames(operationType: String, fragments: List<Fragment>, filePath: String): Set<String> {", "originalCommit": "8c3a0663242ddae8d11660f14bbdb9c59d5eabb0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzE4NzQ3OQ==", "url": "https://github.com/apollographql/apollo-android/pull/2647#discussion_r503187479", "bodyText": "Ah nice catch. A lot of code here ended up being mostly duplicated from List<FragmentRef>.findFragments and I didn't even realize. Will refactor! I think I'll keep this function here though since we still need to do some extra lookups for all the nested fragments inside the root fragment.", "author": "tylerbwong", "createdAt": "2020-10-12T10:09:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzEyNzk2Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzEyODU4Nw==", "url": "https://github.com/apollographql/apollo-android/pull/2647#discussion_r503128587", "bodyText": "\ud83d\udc4d", "author": "martinbonnin", "createdAt": "2020-10-12T08:35:02Z", "path": "apollo-compiler/src/main/kotlin/com/apollographql/apollo/compiler/ir/IRBuilder.kt", "diffHunk": "@@ -237,22 +259,26 @@ class IRBuilder(private val schema: IntrospectionSchema,\n               filePath = filePath\n           )\n \n-      when (val schemaType = schema[typeCondition]) {\n-        is IntrospectionSchema.Type.Object -> schemaType.possibleTypes(schema)\n-        is IntrospectionSchema.Type.Interface -> schemaType.possibleTypes(schema)\n-        is IntrospectionSchema.Type.Union -> schemaType.possibleTypes(schema)\n-        else -> emptySet()\n-      }.also { possibleTypes ->\n-        if (fragment.possibleTypes.intersect(possibleTypes).isEmpty()) {\n-          throw DocumentParseException(\n-              message = \"Fragment `${ref.name}` can't be spread here as result can never be of type `${fragment.typeCondition}`\",\n-              sourceLocation = ref.sourceLocation,\n-              filePath = filePath\n-          )\n-        }\n-      }\n+      fragment.validateTypeCondition(ref, typeCondition, filePath)\n \n       fragment\n     }\n   }\n+\n+  private fun Fragment.validateTypeCondition(fragmentRef: FragmentRef, typeCondition: String, filePath: String) {", "originalCommit": "8c3a0663242ddae8d11660f14bbdb9c59d5eabb0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "aaec7db5693e9c188bd4b35537cec8af9015dbe9", "url": "https://github.com/apollographql/apollo-android/commit/aaec7db5693e9c188bd4b35537cec8af9015dbe9", "message": "Re-use List<FragmentRef>.findFragments", "committedDate": "2020-10-12T20:54:16Z", "type": "commit"}]}