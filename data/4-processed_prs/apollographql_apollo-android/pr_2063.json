{"pr_number": 2063, "pr_title": "Refactor `ScalarType`", "pr_createdAt": "2020-03-13T04:41:39Z", "pr_url": "https://github.com/apollographql/apollo-android/pull/2063", "timeline": [{"oid": "77b11917a4caaac13fd82cd9098292b37a5aa10f", "url": "https://github.com/apollographql/apollo-android/commit/77b11917a4caaac13fd82cd9098292b37a5aa10f", "message": "Refactor `ScalarType`\n\nReplace `javaType(): Class<*>` with `className(): String` for better support of KN", "committedDate": "2020-03-13T22:42:43Z", "type": "commit"}, {"oid": "266075b5d0e8cec4f68a593f4769be6cd50bd371", "url": "https://github.com/apollographql/apollo-android/commit/266075b5d0e8cec4f68a593f4769be6cd50bd371", "message": "Fix tests", "committedDate": "2020-03-13T22:42:43Z", "type": "commit"}, {"oid": "3adc7d8a424e63ac6d46cfb6a6d0b315416c835f", "url": "https://github.com/apollographql/apollo-android/commit/3adc7d8a424e63ac6d46cfb6a6d0b315416c835f", "message": "Rebase + fix", "committedDate": "2020-03-13T22:55:07Z", "type": "commit"}, {"oid": "3adc7d8a424e63ac6d46cfb6a6d0b315416c835f", "url": "https://github.com/apollographql/apollo-android/commit/3adc7d8a424e63ac6d46cfb6a6d0b315416c835f", "message": "Rebase + fix", "committedDate": "2020-03-13T22:55:07Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU2NjUwMA==", "url": "https://github.com/apollographql/apollo-android/pull/2063#discussion_r392566500", "bodyText": "Is java.lang.String enough or should we also check other Strings? Like I wonder what would happen on iOS. Of course can be tackled later.", "author": "tasomaniac", "createdAt": "2020-03-14T08:00:07Z", "path": "apollo-api/src/commonMain/kotlin/com/apollographql/apollo/api/ScalarTypeAdapters.kt", "diffHunk": "@@ -1,10 +1,117 @@\n package com.apollographql.apollo.api\n \n-expect class ScalarTypeAdapters(customAdapters: Map<ScalarType, CustomTypeAdapter<*>>) {\n+import com.apollographql.apollo.api.CustomTypeValue.*\n+import com.apollographql.apollo.api.CustomTypeValue.Companion.fromRawValue\n+import com.apollographql.apollo.api.internal.json.JsonWriter\n+import com.apollographql.apollo.api.internal.json.Utils\n+import com.apollographql.apollo.api.internal.json.use\n+import okio.Buffer\n+import kotlin.jvm.JvmField\n \n-  fun <T : Any> adapterFor(scalarType: ScalarType): CustomTypeAdapter<T>\n+class ScalarTypeAdapters(customAdapters: Map<ScalarType, CustomTypeAdapter<*>>) {\n+  private val customAdapters = customAdapters.mapKeys { it.key.typeName() }\n+\n+  @Suppress(\"UNCHECKED_CAST\")\n+  fun <T : Any> adapterFor(scalarType: ScalarType): CustomTypeAdapter<T> {\n+    var customTypeAdapter: CustomTypeAdapter<*>? = customAdapters[scalarType.typeName()]\n+    if (customTypeAdapter == null) {\n+      customTypeAdapter = DEFAULT_ADAPTERS[scalarType.className()]\n+    }\n+    return requireNotNull(customTypeAdapter) {\n+      \"Can't map GraphQL type: `${scalarType.typeName()}` to: `${scalarType.className()}`. Did you forget to add a custom type adapter?\"\n+    } as CustomTypeAdapter<T>\n+  }\n \n   companion object {\n-    val DEFAULT: ScalarTypeAdapters\n+    @JvmField\n+    val DEFAULT = ScalarTypeAdapters(emptyMap())\n+\n+    private val DEFAULT_ADAPTERS = emptyMap<String, CustomTypeAdapter<*>>() +\n+        createDefaultScalarTypeAdapter(\"java.lang.String\", \"kotlin.String\") { value ->", "originalCommit": "3adc7d8a424e63ac6d46cfb6a6d0b315416c835f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjYyNDEyMQ==", "url": "https://github.com/apollographql/apollo-android/pull/2063#discussion_r392624121", "bodyText": "on iOS it must be kotlin.String as generated code is platform agnostic (common).", "author": "sav007", "createdAt": "2020-03-14T22:25:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU2NjUwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjYyNjA2Mw==", "url": "https://github.com/apollographql/apollo-android/pull/2063#discussion_r392626063", "bodyText": "\ud83d\udc4d sounds good.", "author": "tasomaniac", "createdAt": "2020-03-14T23:00:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU2NjUwMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU2NjU5NQ==", "url": "https://github.com/apollographql/apollo-android/pull/2063#discussion_r392566595", "bodyText": "Why does this say Double for FileUpload?", "author": "tasomaniac", "createdAt": "2020-03-14T08:01:28Z", "path": "apollo-api/src/commonMain/kotlin/com/apollographql/apollo/api/ScalarTypeAdapters.kt", "diffHunk": "@@ -1,10 +1,117 @@\n package com.apollographql.apollo.api\n \n-expect class ScalarTypeAdapters(customAdapters: Map<ScalarType, CustomTypeAdapter<*>>) {\n+import com.apollographql.apollo.api.CustomTypeValue.*\n+import com.apollographql.apollo.api.CustomTypeValue.Companion.fromRawValue\n+import com.apollographql.apollo.api.internal.json.JsonWriter\n+import com.apollographql.apollo.api.internal.json.Utils\n+import com.apollographql.apollo.api.internal.json.use\n+import okio.Buffer\n+import kotlin.jvm.JvmField\n \n-  fun <T : Any> adapterFor(scalarType: ScalarType): CustomTypeAdapter<T>\n+class ScalarTypeAdapters(customAdapters: Map<ScalarType, CustomTypeAdapter<*>>) {\n+  private val customAdapters = customAdapters.mapKeys { it.key.typeName() }\n+\n+  @Suppress(\"UNCHECKED_CAST\")\n+  fun <T : Any> adapterFor(scalarType: ScalarType): CustomTypeAdapter<T> {\n+    var customTypeAdapter: CustomTypeAdapter<*>? = customAdapters[scalarType.typeName()]\n+    if (customTypeAdapter == null) {\n+      customTypeAdapter = DEFAULT_ADAPTERS[scalarType.className()]\n+    }\n+    return requireNotNull(customTypeAdapter) {\n+      \"Can't map GraphQL type: `${scalarType.typeName()}` to: `${scalarType.className()}`. Did you forget to add a custom type adapter?\"\n+    } as CustomTypeAdapter<T>\n+  }\n \n   companion object {\n-    val DEFAULT: ScalarTypeAdapters\n+    @JvmField\n+    val DEFAULT = ScalarTypeAdapters(emptyMap())\n+\n+    private val DEFAULT_ADAPTERS = emptyMap<String, CustomTypeAdapter<*>>() +\n+        createDefaultScalarTypeAdapter(\"java.lang.String\", \"kotlin.String\") { value ->\n+          if (value is GraphQLJsonList || value is GraphQLJsonObject) {\n+            val buffer = Buffer()\n+            JsonWriter.of(buffer).use { writer ->\n+              Utils.writeToJson(value.value, writer)\n+            }\n+            buffer.readUtf8()\n+          } else {\n+            value.value.toString()\n+          }\n+        } +\n+        createDefaultScalarTypeAdapter(\"java.lang.Boolean\", \"kotlin.Boolean\") { value ->\n+          when (value) {\n+            is GraphQLBoolean -> value.value\n+            is GraphQLString -> value.value.toBoolean()\n+            else -> throw IllegalArgumentException(\"Can't decode: $value into Boolean\")\n+          }\n+        } +\n+        createDefaultScalarTypeAdapter(\"java.lang.Integer\", \"kotlin.Int\") { value ->\n+          when (value) {\n+            is GraphQLNumber -> value.value.toInt()\n+            is GraphQLString -> value.value.toInt()\n+            else -> throw IllegalArgumentException(\"Can't decode: $value into Integer\")\n+          }\n+        } +\n+        createDefaultScalarTypeAdapter(\"java.lang.Long\", \"kotlin.Long\") { value ->\n+          when (value) {\n+            is GraphQLNumber -> value.value.toLong()\n+            is GraphQLString -> value.value.toLong()\n+            else -> throw IllegalArgumentException(\"Can't decode: $value into Long\")\n+          }\n+        } +\n+        createDefaultScalarTypeAdapter(\"java.lang.Float\", \"kotlin.Float\") { value ->\n+          when (value) {\n+            is GraphQLNumber -> value.value.toFloat()\n+            is GraphQLString -> value.value.toFloat()\n+            else -> throw IllegalArgumentException(\"Can't decode: $value into Float\")\n+          }\n+        } +\n+        createDefaultScalarTypeAdapter(\"java.lang.Double\", \"kotlin.Double\") { value ->\n+          when (value) {\n+            is GraphQLNumber -> value.value.toDouble()\n+            is GraphQLString -> value.value.toDouble()\n+            else -> throw IllegalArgumentException(\"Can't decode: $value into Double\")\n+          }\n+        } +\n+        createDefaultScalarTypeAdapter(FileUpload::class.qualifiedName!!) { value ->\n+          when (value) {\n+            is GraphQLNumber -> value.value.toDouble()", "originalCommit": "3adc7d8a424e63ac6d46cfb6a6d0b315416c835f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjYyNDE0Ng==", "url": "https://github.com/apollographql/apollo-android/pull/2063#discussion_r392624146", "bodyText": "ogh, jeez my bad", "author": "sav007", "createdAt": "2020-03-14T22:25:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU2NjU5NQ=="}], "type": "inlineReview"}, {"oid": "f62e932c1b857411f29a3ef5fd91adf7ac743dd8", "url": "https://github.com/apollographql/apollo-android/commit/f62e932c1b857411f29a3ef5fd91adf7ac743dd8", "message": "Fix file upload scalar type adapter", "committedDate": "2020-03-14T22:37:40Z", "type": "commit"}]}