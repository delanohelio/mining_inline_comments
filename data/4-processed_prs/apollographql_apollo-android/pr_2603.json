{"pr_number": 2603, "pr_title": "[Runtime] add a client awareness OkHttp interceptor", "pr_createdAt": "2020-09-23T14:57:14Z", "pr_url": "https://github.com/apollographql/apollo-android/pull/2603", "timeline": [{"oid": "8772fff6cb84d49b42a5c9cae67a3053d898c0e6", "url": "https://github.com/apollographql/apollo-android/commit/8772fff6cb84d49b42a5c9cae67a3053d898c0e6", "message": "add client awareness", "committedDate": "2020-09-23T08:44:47Z", "type": "commit"}, {"oid": "b4a7696b1b53c23aebf5ee8db8bd559dd9398323", "url": "https://github.com/apollographql/apollo-android/commit/b4a7696b1b53c23aebf5ee8db8bd559dd9398323", "message": "update metalava", "committedDate": "2020-09-23T15:19:44Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzkyMDUzNw==", "url": "https://github.com/apollographql/apollo-android/pull/2603#discussion_r493920537", "bodyText": "If we have Context somehow, Context.packageName is the client name I guess. It is the same as Build config.APLICATION_ID.\nWe can then use the same packageName to retrieve the version from packageManager.\nGot this from here\ntry {\n    PackageInfo pInfo = context.getPackageManager().getPackageInfo(getPackageName(), 0);\n    String version = pInfo.versionName;\n} catch (PackageManager.NameNotFoundException e) {\n    e.printStackTrace();\n}", "author": "tasomaniac", "createdAt": "2020-09-23T22:01:47Z", "path": "apollo-runtime/src/main/java/com/apollographql/apollo/ApolloClientAwarenessInterceptor.kt", "diffHunk": "@@ -0,0 +1,20 @@\n+package com.apollographql.apollo\n+\n+import okhttp3.Interceptor\n+import okhttp3.Response\n+\n+/**\n+ * An [Interceptor] to add [Client Awareness](https://www.apollographql.com/docs/studio/client-awareness/).\n+ *\n+ * Add this interceptor to your [okhttp3.OkHttpClient] instance when creating your [ApolloClient]\n+ */\n+class ApolloClientAwarenessInterceptor(val clientName: String, val clientVersion: String): Interceptor {", "originalCommit": "b4a7696b1b53c23aebf5ee8db8bd559dd9398323", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzkyMTQ4NQ==", "url": "https://github.com/apollographql/apollo-android/pull/2603#discussion_r493921485", "bodyText": "Can we not put this via android-support module? Or something like this so that we access Context.\nOr I had the idea to use AndroidX startup library to retrieve the Application context and store it statically. It's pretty safe because there is only 1 application Context.", "author": "tasomaniac", "createdAt": "2020-09-23T22:04:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzkyMDUzNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzkyNjI4Ng==", "url": "https://github.com/apollographql/apollo-android/pull/2603#discussion_r493926286", "bodyText": "Can we not put this via android-support module?\n\nThat would require adding a new dependency in build.gradle[.kts], not sure this is easier than adding an interceptor. I suspect it's a common usage to have an interceptor already setup for authentication so adding the ApolloClientAwerenessInterceptor should be a single line in that case.\nAlso the functionnality should be available for non-Android users as well, which would mean splitting it between apollo-android-support (for default Android values) and apollo-runtime (for the general case). All in all it felt like a lot of hassle for something that's easy to explain with a bit of documentation.", "author": "martinbonnin", "createdAt": "2020-09-23T22:16:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzkyMDUzNw=="}], "type": "inlineReview"}]}