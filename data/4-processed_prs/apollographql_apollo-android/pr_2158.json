{"pr_number": 2158, "pr_title": "Replace legacy Android SQL with SqlDelight", "pr_createdAt": "2020-04-12T23:55:09Z", "pr_url": "https://github.com/apollographql/apollo-android/pull/2158", "timeline": [{"oid": "daed90ce6568eccdd0bbf3541cdbb134f6357f67", "url": "https://github.com/apollographql/apollo-android/commit/daed90ce6568eccdd0bbf3541cdbb134f6357f67", "message": "Initial SqlDelight integration", "committedDate": "2020-04-12T23:57:10Z", "type": "commit"}, {"oid": "84bfffaa98a3c56cb1c895c52ab69969c2365740", "url": "https://github.com/apollographql/apollo-android/commit/84bfffaa98a3c56cb1c895c52ab69969c2365740", "message": "Use it in the sample", "committedDate": "2020-04-12T23:57:10Z", "type": "commit"}, {"oid": "38a1c9c3fb75d9f53d11c4e24f41948a8b7283ff", "url": "https://github.com/apollographql/apollo-android/commit/38a1c9c3fb75d9f53d11c4e24f41948a8b7283ff", "message": "Keep API similar by keeping ApolloSqlHelper class", "committedDate": "2020-04-12T23:57:10Z", "type": "commit"}, {"oid": "a1ebd845a6a4a8dfefeff992da26c06f23c81733", "url": "https://github.com/apollographql/apollo-android/commit/a1ebd845a6a4a8dfefeff992da26c06f23c81733", "message": "Move and run SqlNormalizedCacheTest's in JVM", "committedDate": "2020-04-12T23:57:10Z", "type": "commit"}, {"oid": "5eee7b447e14c9b76fc65ede708c06bce0a25cf0", "url": "https://github.com/apollographql/apollo-android/commit/5eee7b447e14c9b76fc65ede708c06bce0a25cf0", "message": "Split cache stuff into 3 modules:\n- sqlite-cache\n- normalized-cache-api", "committedDate": "2020-04-12T23:57:10Z", "type": "commit"}, {"oid": "9c4e24ef5f9f5b48b3a4199e7eadbf5e634ef465", "url": "https://github.com/apollographql/apollo-android/commit/9c4e24ef5f9f5b48b3a4199e7eadbf5e634ef465", "message": "Make sure we have 100% backward compat by reverting the sample", "committedDate": "2020-04-12T23:57:10Z", "type": "commit"}, {"oid": "c27ce4c8d10d87def6d9cbdc0471259e49bb68fc", "url": "https://github.com/apollographql/apollo-android/commit/c27ce4c8d10d87def6d9cbdc0471259e49bb68fc", "message": "Add TODO message to cache dependency", "committedDate": "2020-04-12T23:57:10Z", "type": "commit"}, {"oid": "973b065a9dc625e606c7db494ab02413727e0db9", "url": "https://github.com/apollographql/apollo-android/commit/973b065a9dc625e606c7db494ab02413727e0db9", "message": "Revert unnecessary change", "committedDate": "2020-04-12T23:57:10Z", "type": "commit"}, {"oid": "973b065a9dc625e606c7db494ab02413727e0db9", "url": "https://github.com/apollographql/apollo-android/commit/973b065a9dc625e606c7db494ab02413727e0db9", "message": "Revert unnecessary change", "committedDate": "2020-04-12T23:57:10Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzM3OTgyMQ==", "url": "https://github.com/apollographql/apollo-android/pull/2158#discussion_r407379821", "bodyText": "Nitpicking, maybe not update key ?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            UPDATE records SET key=:key, record=:record WHERE key=:key;\n          \n          \n            \n            UPDATE records SET record=:record WHERE key=:key;", "author": "martinbonnin", "createdAt": "2020-04-13T08:38:59Z", "path": "apollo-sqlite-cache/src/main/sqldelight/com/apollographql/apollo/cache/normalized/sql/cache.sq", "diffHunk": "@@ -0,0 +1,25 @@\n+CREATE TABLE records (\n+  _id INTEGER PRIMARY KEY AUTOINCREMENT,\n+  key TEXT NOT NULL,\n+  record TEXT NOT NULL\n+);\n+\n+CREATE INDEX idx_records_key ON records(key);\n+\n+recordForKey:\n+SELECT key, record FROM records WHERE key=?;\n+\n+insert:\n+INSERT INTO records (key, record) VALUES (?,?);\n+\n+update:\n+UPDATE records SET key=:key, record=:record WHERE key=:key;", "originalCommit": "973b065a9dc625e606c7db494ab02413727e0db9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzM5MTgyMw==", "url": "https://github.com/apollographql/apollo-android/pull/2158#discussion_r407391823", "bodyText": "I saw this too but wanted to keep the same as before \ud83d\ude0a This was like this before.", "author": "tasomaniac", "createdAt": "2020-04-13T09:12:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzM3OTgyMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzM4MTI3Nw==", "url": "https://github.com/apollographql/apollo-android/pull/2158#discussion_r407381277", "bodyText": "Nitpicking about the naming: what about apollo-normalized-cache-sqldelight ?  This would:\n\nput the module next to apollo-normalized-cache and apollo-normalized-cache-api when sorted alphabetically\nmake a clear distinction between 'normalized' caches and 'http' ones.\nallow for sqlite implementation without sqldelight", "author": "martinbonnin", "createdAt": "2020-04-13T08:43:01Z", "path": "apollo-sqlite-cache/gradle.properties", "diffHunk": "@@ -0,0 +1,4 @@\n+POM_ARTIFACT_ID=apollo-sqlite-cache", "originalCommit": "973b065a9dc625e606c7db494ab02413727e0db9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzM5MzAwNw==", "url": "https://github.com/apollographql/apollo-android/pull/2158#discussion_r407393007", "bodyText": "What about apollo-normalized-cache-sqlite?\nI genuinely think that SqlDelight should be implementation detail. We provide persisted normalized cache backed by SQLite.\n\nWe wouldn't provide 2nd implementation side by side\nIf we want to replace it in the future, it's easier (not exposed)\nIf a user wants to have a different implementation, they can always implement NormalizedCache from the API", "author": "tasomaniac", "createdAt": "2020-04-13T09:15:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzM4MTI3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzQyNDg1OA==", "url": "https://github.com/apollographql/apollo-android/pull/2158#discussion_r407424858", "bodyText": "Sounds good!", "author": "martinbonnin", "createdAt": "2020-04-13T10:50:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzM4MTI3Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzM4MzQ3NA==", "url": "https://github.com/apollographql/apollo-android/pull/2158#discussion_r407383474", "bodyText": "What about SQLDelightNormalizedCache ?", "author": "martinbonnin", "createdAt": "2020-04-13T08:49:00Z", "path": "apollo-sqlite-cache/src/main/java/com/apollographql/apollo/cache/normalized/sql/SqlNormalizedCache.kt", "diffHunk": "@@ -0,0 +1,97 @@\n+package com.apollographql.apollo.cache.normalized.sql\n+\n+import com.apollographql.apollo.cache.ApolloCacheHeaders.EVICT_AFTER_READ\n+import com.apollographql.apollo.cache.CacheHeaders\n+import com.apollographql.apollo.cache.normalized.CacheKey\n+import com.apollographql.apollo.cache.normalized.NormalizedCache\n+import com.apollographql.apollo.cache.normalized.Record\n+import com.apollographql.apollo.cache.normalized.RecordFieldJsonAdapter\n+import okio.IOException\n+\n+class SqlNormalizedCache(\n+    private val recordFieldAdapter: RecordFieldJsonAdapter,\n+    private val cacheQueries: CacheQueries\n+) : NormalizedCache() {", "originalCommit": "973b065a9dc625e606c7db494ab02413727e0db9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzM5MzI5NQ==", "url": "https://github.com/apollographql/apollo-android/pull/2158#discussion_r407393295", "bodyText": "That would be backward incompatible.", "author": "tasomaniac", "createdAt": "2020-04-13T09:16:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzM4MzQ3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzQyNTcwMA==", "url": "https://github.com/apollographql/apollo-android/pull/2158#discussion_r407425700", "bodyText": "I see. Since it had queries in the constructor, I assumed it was already backward incompatible but this is only created through SqlNormalizedCacheFactory, right ? Then mark the constructor internal maybe ?", "author": "martinbonnin", "createdAt": "2020-04-13T10:53:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzM4MzQ3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzQzMjUwMw==", "url": "https://github.com/apollographql/apollo-android/pull/2158#discussion_r407432503", "bodyText": "Yes. That I missed. Before the constructor was package private. Now it is internal. It is not something users should be instantiating themselves. They should use the factory.\nBut they may assign SqlNormalizedCache to somewhere. The name is still public. I don't like it either :) but we need to keep it.", "author": "tasomaniac", "createdAt": "2020-04-13T11:15:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzM4MzQ3NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzM4NTE0MA==", "url": "https://github.com/apollographql/apollo-android/pull/2158#discussion_r407385140", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                      .executeAsList()\n          \n          \n            \n                      .firstOrNull()\n          \n          \n            \n                      .executeAsOneOrNull()", "author": "martinbonnin", "createdAt": "2020-04-13T08:53:34Z", "path": "apollo-sqlite-cache/src/main/java/com/apollographql/apollo/cache/normalized/sql/SqlNormalizedCache.kt", "diffHunk": "@@ -0,0 +1,97 @@\n+package com.apollographql.apollo.cache.normalized.sql\n+\n+import com.apollographql.apollo.cache.ApolloCacheHeaders.EVICT_AFTER_READ\n+import com.apollographql.apollo.cache.CacheHeaders\n+import com.apollographql.apollo.cache.normalized.CacheKey\n+import com.apollographql.apollo.cache.normalized.NormalizedCache\n+import com.apollographql.apollo.cache.normalized.Record\n+import com.apollographql.apollo.cache.normalized.RecordFieldJsonAdapter\n+import okio.IOException\n+\n+class SqlNormalizedCache(\n+    private val recordFieldAdapter: RecordFieldJsonAdapter,\n+    private val cacheQueries: CacheQueries\n+) : NormalizedCache() {\n+\n+  override fun loadRecord(key: String, cacheHeaders: CacheHeaders): Record? {\n+    val record = selectRecordForKey(key)\n+\n+    if (record != null) {\n+      if (cacheHeaders.hasHeader(EVICT_AFTER_READ)) {\n+        deleteRecord(key)\n+      }\n+      return record\n+    }\n+    return nextCache?.loadRecord(key, cacheHeaders)\n+  }\n+\n+  override fun clearAll() {\n+    nextCache?.clearAll()\n+    cacheQueries.deleteAll()\n+  }\n+\n+  override fun remove(cacheKey: CacheKey, cascade: Boolean): Boolean {\n+    val result: Boolean = nextCache?.remove(cacheKey, cascade) ?: false\n+    if (result) {\n+      return true\n+    }\n+    return if (cascade) {\n+      selectRecordForKey(cacheKey.key)\n+          ?.referencedFields()\n+          ?.all { remove(CacheKey(it.key()), cascade = true) }\n+          ?: false\n+    } else {\n+      deleteRecord(cacheKey.key)\n+    }\n+  }\n+\n+  override fun performMerge(apolloRecord: Record, cacheHeaders: CacheHeaders): Set<String> {\n+    val oldRecord = selectRecordForKey(apolloRecord.key())\n+    return if (oldRecord == null) {\n+      cacheQueries.insert(apolloRecord.key(), recordFieldAdapter.toJson(apolloRecord.fields()))\n+      emptySet()\n+    } else {\n+      oldRecord.mergeWith(apolloRecord).also {\n+        if (it.isNotEmpty()) {\n+          cacheQueries.update(oldRecord.key(), recordFieldAdapter.toJson(oldRecord.fields()))\n+        }\n+      }\n+    }\n+  }\n+\n+  fun selectRecordForKey(key: String): Record? {\n+    return try {\n+      cacheQueries.recordForKey(key)\n+          .executeAsList()\n+          .firstOrNull()", "originalCommit": "973b065a9dc625e606c7db494ab02413727e0db9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzQyNDg1NQ==", "url": "https://github.com/apollographql/apollo-android/pull/2158#discussion_r407424855", "bodyText": "I remember there was a specific reason why I chose asList. I will double check.", "author": "tasomaniac", "createdAt": "2020-04-13T10:50:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzM4NTE0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzQyOTQ3Ng==", "url": "https://github.com/apollographql/apollo-android/pull/2158#discussion_r407429476", "bodyText": "Ok, I see now. executeAsOneOrNull is more like singleOrNull function in Kotlin. If there are more, it crashes. The old logic was going to over the Cursor and picks the first match too. Since key in the database is not UNIQUE, we may have multiple of them.\nNot sure if we should though \ud83d\ude04 Don't really want to change the behavior now. It can be something we may look in the future.", "author": "tasomaniac", "createdAt": "2020-04-13T11:05:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzM4NTE0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzQ1ODQyNg==", "url": "https://github.com/apollographql/apollo-android/pull/2158#discussion_r407458426", "bodyText": "Makes senses \ud83d\udc4d", "author": "martinbonnin", "createdAt": "2020-04-13T12:38:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzM4NTE0MA=="}], "type": "inlineReview"}, {"oid": "d937ca3da450333abc4bda66dc9018df24324598", "url": "https://github.com/apollographql/apollo-android/commit/d937ca3da450333abc4bda66dc9018df24324598", "message": "Remove unneeded key update.\n\nCo-Authored-By: Martin Bonnin <martin@mbonnin.net>", "committedDate": "2020-04-13T10:48:42Z", "type": "commit"}, {"oid": "114c8dcf825ff726964679843f4bf2af6e92136f", "url": "https://github.com/apollographql/apollo-android/commit/114c8dcf825ff726964679843f4bf2af6e92136f", "message": "Rename module", "committedDate": "2020-04-13T11:01:30Z", "type": "commit"}, {"oid": "517572b5f23da6a93024454a413dbf6120fef0a1", "url": "https://github.com/apollographql/apollo-android/commit/517572b5f23da6a93024454a413dbf6120fef0a1", "message": "Move CacheKeyResolver.kt", "committedDate": "2020-04-13T11:06:45Z", "type": "commit"}, {"oid": "b4bbd7b7c22786fd1a962b382969837c68e88cc2", "url": "https://github.com/apollographql/apollo-android/commit/b4bbd7b7c22786fd1a962b382969837c68e88cc2", "message": "Make constructor internal", "committedDate": "2020-04-13T11:14:19Z", "type": "commit"}, {"oid": "8dc9232012c706abdbec3ab096d78e239d2967d9", "url": "https://github.com/apollographql/apollo-android/commit/8dc9232012c706abdbec3ab096d78e239d2967d9", "message": "Keep constructor internal for tests", "committedDate": "2020-04-13T11:17:39Z", "type": "commit"}, {"oid": "1c0ba701b7933103d7864a0c75baad00f199f798", "url": "https://github.com/apollographql/apollo-android/commit/1c0ba701b7933103d7864a0c75baad00f199f798", "message": "Move api related tests to api module\nConvert WriteableStore to Kotlin", "committedDate": "2020-04-13T11:26:42Z", "type": "commit"}, {"oid": "6178af7083dc1bc7d6f1139316345f6ba3c83c5a", "url": "https://github.com/apollographql/apollo-android/commit/6178af7083dc1bc7d6f1139316345f6ba3c83c5a", "message": "Add the db schema into source control", "committedDate": "2020-04-13T11:30:30Z", "type": "commit"}, {"oid": "023c4bad7a2aa715075f13a26501add1230eb1d6", "url": "https://github.com/apollographql/apollo-android/commit/023c4bad7a2aa715075f13a26501add1230eb1d6", "message": "Remove deprecated usage", "committedDate": "2020-04-13T12:36:17Z", "type": "commit"}]}