{"pr_number": 1386, "pr_title": "Fix some bugs with AudioUtils", "pr_createdAt": "2020-06-27T14:09:40Z", "pr_url": "https://github.com/quran/quran_android/pull/1386", "timeline": [{"oid": "428948a2b79d692e61f64fec395e437461adef2d", "url": "https://github.com/quran/quran_android/commit/428948a2b79d692e61f64fec395e437461adef2d", "message": "Fix some bugs with AudioUtils", "committedDate": "2020-06-27T14:09:19Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUzMDM3Ng==", "url": "https://github.com/quran/quran_android/pull/1386#discussion_r446530376", "bodyText": "never actually happened", "author": "ahmedre", "createdAt": "2020-06-27T14:09:55Z", "path": "app/src/main/java/com/quran/labs/androidquran/presenter/audio/AudioPresenter.kt", "diffHunk": "@@ -50,13 +50,8 @@ constructor(private val quranDisplayData: QuranDisplayData,\n         audioPathInfo\n       }\n \n-      val (checkedStart, checkedEnd) = if (start < end) start to end else end to start\n-      if (checkedStart != start) {\n-        Crashlytics.logException(IllegalArgumentException(\"expected $start > $end, but wasn't.\"))\n-      }", "originalCommit": "428948a2b79d692e61f64fec395e437461adef2d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUzMDU5OQ==", "url": "https://github.com/quran/quran_android/pull/1386#discussion_r446530599", "bodyText": "this was for page download amount, and there's a method for that which is also more correct than this (this code is actually wrong if you consider a case like 56:51, which was returning the sura as 57 instead of 56)", "author": "ahmedre", "createdAt": "2020-06-27T14:11:20Z", "path": "app/src/main/java/com/quran/labs/androidquran/util/AudioUtils.kt", "diffHunk": "@@ -125,19 +125,7 @@ constructor(private val quranInfo: QuranInfo, private val quranFileUtils: QuranF\n     if (page > totalPages || page < 0) {\n       return null\n     }\n-    if (page < totalPages) {\n-      val nextPage = page + 1\n-      val nextPageSura = quranInfo.getSuraNumberFromPage(nextPage)\n-      // using [page+1] as an index because we literally want the next page\n-      val nextPageAyah = quranInfo.getFirstAyahOnPage(nextPage)\n-\n-      pageLastSura = nextPageSura\n-      pageLastAyah = nextPageAyah - 1\n-      if (pageLastAyah < 1) {\n-        pageLastSura--\n-        pageLastAyah = quranInfo.getNumberOfAyahs(pageLastSura)\n-      }\n-    }", "originalCommit": "428948a2b79d692e61f64fec395e437461adef2d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUzMDY2NQ==", "url": "https://github.com/quran/quran_android/pull/1386#discussion_r446530665", "bodyText": "converted to Kotlin", "author": "ahmedre", "createdAt": "2020-06-27T14:12:03Z", "path": "app/src/test/java/com/quran/labs/androidquran/util/AudioUtilsTest.kt", "diffHunk": "@@ -0,0 +1,60 @@\n+package com.quran.labs.androidquran.util\n+\n+import com.google.common.truth.Truth.assertThat\n+import com.quran.data.core.QuranInfo\n+import com.quran.data.model.SuraAyah\n+import com.quran.data.pageinfo.common.MadaniDataSource\n+import com.quran.data.source.PageProvider\n+import org.junit.Assert\n+import org.junit.Test\n+import org.mockito.Mockito\n+import org.mockito.Mockito.`when` as whenever\n+\n+class AudioUtilsTest {", "originalCommit": "428948a2b79d692e61f64fec395e437461adef2d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUzMDY3NA==", "url": "https://github.com/quran/quran_android/pull/1386#discussion_r446530674", "bodyText": "added this test - was failing before my code change", "author": "ahmedre", "createdAt": "2020-06-27T14:12:14Z", "path": "app/src/test/java/com/quran/labs/androidquran/util/AudioUtilsTest.kt", "diffHunk": "@@ -0,0 +1,60 @@\n+package com.quran.labs.androidquran.util\n+\n+import com.google.common.truth.Truth.assertThat\n+import com.quran.data.core.QuranInfo\n+import com.quran.data.model.SuraAyah\n+import com.quran.data.pageinfo.common.MadaniDataSource\n+import com.quran.data.source.PageProvider\n+import org.junit.Assert\n+import org.junit.Test\n+import org.mockito.Mockito\n+import org.mockito.Mockito.`when` as whenever\n+\n+class AudioUtilsTest {\n+\n+  @Test\n+  fun testGetLastAyahWithNewSurahOnNextPageForMadani() {\n+    val pageProviderMock = Mockito.mock(PageProvider::class.java)\n+    whenever(pageProviderMock.getDataSource())\n+        .thenReturn(MadaniDataSource())\n+    val quranInfo = QuranInfo(MadaniDataSource())\n+    val audioUtils = AudioUtils(quranInfo, Mockito.mock(QuranFileUtils::class.java))\n+    val lastAyah = audioUtils.getLastAyahToPlay(SuraAyah(109, 1), 603, 1, false)\n+    Assert.assertNotNull(lastAyah)\n+    Assert.assertEquals(5, lastAyah!!.ayah.toLong())\n+    Assert.assertEquals(111, lastAyah.sura.toLong())\n+  }\n+\n+  @Test\n+  fun testSuraTawbaDoesNotNeedBasmallah() {\n+    val quranInfo = QuranInfo(MadaniDataSource())\n+    val audioUtils = AudioUtils(quranInfo, Mockito.mock(QuranFileUtils::class.java))\n+\n+    // start after ayah 1 of sura anfal\n+    val start = SuraAyah(8, 2)\n+    // finish in sura tawbah, so no basmallah needed here\n+    val ending = SuraAyah(9, 100)\n+\n+    // overall don't need a basmallah\n+    Assert.assertFalse(audioUtils.doesRequireBasmallah(start, ending))\n+  }\n+\n+  @Test\n+  fun testNeedBasmallahAcrossRange() {\n+    val quranInfo = QuranInfo(MadaniDataSource())\n+    val audioUtils = AudioUtils(quranInfo, Mockito.mock(QuranFileUtils::class.java))\n+    val start = SuraAyah(8, 1)\n+    val ending = SuraAyah(10, 2)\n+    // should need a basmallah due to 10:1\n+    Assert.assertTrue(audioUtils.doesRequireBasmallah(start, ending))\n+  }\n+\n+  @Test\n+  fun testLastAyahForFirstAyahWithPageDownload() {\n+    val audioUtils = AudioUtils(QuranInfo(MadaniDataSource()),\n+        Mockito.mock(QuranFileUtils::class.java))\n+    val start = SuraAyah(56, 51)\n+    val end = audioUtils.getLastAyahToPlay(start, 536, 1, false)\n+    assertThat(end).isEqualTo(SuraAyah(56, 76))\n+  }", "originalCommit": "428948a2b79d692e61f64fec395e437461adef2d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}