{"pr_number": 527, "pr_title": "Fix AMQP Outgoing metadata handling", "pr_createdAt": "2020-04-28T13:24:07Z", "pr_url": "https://github.com/smallrye/smallrye-reactive-messaging/pull/527", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjYxNDc5Nw==", "url": "https://github.com/smallrye/smallrye-reactive-messaging/pull/527#discussion_r416614797", "bodyText": "Any chance you could avoid the lambda? It doesn't bring much here so better not pay for its cost.", "author": "gsmet", "createdAt": "2020-04-28T13:31:30Z", "path": "smallrye-reactive-messaging-amqp/src/main/java/io/smallrye/reactive/messaging/amqp/AmqpConnector.java", "diffHunk": "@@ -345,19 +345,32 @@ private String getActualAddress(Message<?> message, io.vertx.mutiny.amqp.AmqpMes\n                     .contentType(JSON_CONTENT_TYPE);\n         }\n \n-        builder.address(metadata.map(OutgoingAmqpMetadata::getAddress).orElse(null));\n-        builder.applicationProperties(metadata.map(OutgoingAmqpMetadata::getProperties).orElseGet(JsonObject::new));\n-\n-        builder.contentEncoding(metadata.map(OutgoingAmqpMetadata::getContentEncoding).orElse(null));\n-        builder.contentType(metadata.map(OutgoingAmqpMetadata::getContentType).orElse(null));\n-        builder.correlationId(metadata.map(OutgoingAmqpMetadata::getCorrelationId).orElse(null));\n-        builder.groupId(metadata.map(OutgoingAmqpMetadata::getGroupId).orElse(null));\n-        builder.id(metadata.map(OutgoingAmqpMetadata::getId).orElse(null));\n-        int priority = metadata.map(OutgoingAmqpMetadata::getPriority).orElse(-1);\n-        if (priority >= 0) {\n-            builder.priority((short) priority);\n-        }\n-        builder.subject(metadata.map(OutgoingAmqpMetadata::getSubject).orElse(null));\n+        metadata.ifPresent(meta -> {", "originalCommit": "0152602d22f35d8ffb2c4a06e087b888d64b4e5c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjYxOTE3OQ==", "url": "https://github.com/smallrye/smallrye-reactive-messaging/pull/527#discussion_r416619179", "bodyText": "Reactive MEssaging and Reactive is general uses lots of lambdas. I can remove this one, but there will be tons of them around.", "author": "cescoffier", "createdAt": "2020-04-28T13:37:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjYxNDc5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjYyMzA0Mg==", "url": "https://github.com/smallrye/smallrye-reactive-messaging/pull/527#discussion_r416623042", "bodyText": "Done.", "author": "cescoffier", "createdAt": "2020-04-28T13:42:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjYxNDc5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjYyNjgxOA==", "url": "https://github.com/smallrye/smallrye-reactive-messaging/pull/527#discussion_r416626818", "bodyText": "Yeah, maybe it's just me but I fail to see how a lambda is better than a simple if (optional.isPresent()).\nI can see how it gets useful in more complex cases but I would try to avoid them for the simple ones.\nAnyway, ignore me, I'm just ranting :).", "author": "gsmet", "createdAt": "2020-04-28T13:47:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjYxNDc5Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjYxNjk1Nw==", "url": "https://github.com/smallrye/smallrye-reactive-messaging/pull/527#discussion_r416616957", "bodyText": "Is it missing builder.groupId?", "author": "kenfinnigan", "createdAt": "2020-04-28T13:34:21Z", "path": "smallrye-reactive-messaging-amqp/src/main/java/io/smallrye/reactive/messaging/amqp/AmqpConnector.java", "diffHunk": "@@ -345,19 +345,32 @@ private String getActualAddress(Message<?> message, io.vertx.mutiny.amqp.AmqpMes\n                     .contentType(JSON_CONTENT_TYPE);\n         }\n \n-        builder.address(metadata.map(OutgoingAmqpMetadata::getAddress).orElse(null));\n-        builder.applicationProperties(metadata.map(OutgoingAmqpMetadata::getProperties).orElseGet(JsonObject::new));\n-\n-        builder.contentEncoding(metadata.map(OutgoingAmqpMetadata::getContentEncoding).orElse(null));\n-        builder.contentType(metadata.map(OutgoingAmqpMetadata::getContentType).orElse(null));\n-        builder.correlationId(metadata.map(OutgoingAmqpMetadata::getCorrelationId).orElse(null));\n-        builder.groupId(metadata.map(OutgoingAmqpMetadata::getGroupId).orElse(null));\n-        builder.id(metadata.map(OutgoingAmqpMetadata::getId).orElse(null));\n-        int priority = metadata.map(OutgoingAmqpMetadata::getPriority).orElse(-1);\n-        if (priority >= 0) {\n-            builder.priority((short) priority);\n-        }\n-        builder.subject(metadata.map(OutgoingAmqpMetadata::getSubject).orElse(null));\n+        metadata.ifPresent(meta -> {\n+            if (meta.getAddress() != null) {\n+                builder.address(meta.getAddress());\n+            }\n+            if (meta.getProperties() != null && !meta.getProperties().isEmpty()) {\n+                builder.applicationProperties(meta.getProperties());\n+            }\n+            if (meta.getContentEncoding() != null) {\n+                builder.contentEncoding(meta.getContentEncoding());", "originalCommit": "0152602d22f35d8ffb2c4a06e087b888d64b4e5c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjYyMjkzNA==", "url": "https://github.com/smallrye/smallrye-reactive-messaging/pull/527#discussion_r416622934", "bodyText": "Fixed.", "author": "cescoffier", "createdAt": "2020-04-28T13:42:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjYxNjk1Nw=="}], "type": "inlineReview"}, {"oid": "5e3ea0f807d2f7eba071873c1423bdc4cde2d9fe", "url": "https://github.com/smallrye/smallrye-reactive-messaging/commit/5e3ea0f807d2f7eba071873c1423bdc4cde2d9fe", "message": "Fix AMQP Outgoing metadata handling\n\nIt was erasing the previously made decisions.\nFix https://github.com/quarkusio/quarkus/issues/8274.", "committedDate": "2020-04-28T13:41:41Z", "type": "commit"}, {"oid": "5e3ea0f807d2f7eba071873c1423bdc4cde2d9fe", "url": "https://github.com/smallrye/smallrye-reactive-messaging/commit/5e3ea0f807d2f7eba071873c1423bdc4cde2d9fe", "message": "Fix AMQP Outgoing metadata handling\n\nIt was erasing the previously made decisions.\nFix https://github.com/quarkusio/quarkus/issues/8274.", "committedDate": "2020-04-28T13:41:41Z", "type": "forcePushed"}]}