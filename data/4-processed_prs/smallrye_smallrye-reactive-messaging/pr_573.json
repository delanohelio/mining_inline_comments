{"pr_number": 573, "pr_title": "Implement new fault-tolerance model based on Message negative acknowledgement", "pr_createdAt": "2020-06-01T13:45:57Z", "pr_url": "https://github.com/smallrye/smallrye-reactive-messaging/pull/573", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI2MjI5Mw==", "url": "https://github.com/smallrye/smallrye-reactive-messaging/pull/573#discussion_r433262293", "bodyText": "What's the purpose of this extra assignment?", "author": "kenfinnigan", "createdAt": "2020-06-01T14:19:25Z", "path": "api/src/main/java/org/eclipse/microprofile/reactive/messaging/Message.java", "diffHunk": "@@ -201,49 +210,179 @@ public Metadata getMetadata() {\n         };\n     }\n \n+    /**\n+     * Create a message with the given payload, ack and nack functions.\n+     *\n+     * @param payload The payload.\n+     * @param ack The ack function, this will be invoked when the returned messages {@link #ack()} method is invoked.\n+     * @param nack The negative-ack function, this will be invoked when the returned messages {@link #nack(Throwable)}\n+     *        method is invoked.\n+     * @param <T> the type of payload\n+     * @return A message with the given payload, metadata, ack and nack functions.\n+     */\n+    @Experimental(\"nack support is a SmallRye-only feature\")\n+    static <T> Message<T> of(T payload,\n+            Supplier<CompletionStage<Void>> ack, Function<Throwable, CompletionStage<Void>> nack) {\n+        return new Message<T>() {\n+            @Override\n+            public T getPayload() {\n+                return payload;\n+            }\n+\n+            @Override\n+            public Metadata getMetadata() {\n+                return Metadata.empty();\n+            }\n+\n+            @Override\n+            public Supplier<CompletionStage<Void>> getAck() {\n+                return ack;\n+            }\n+\n+            @Override\n+            public Function<Throwable, CompletionStage<Void>> getNack() {\n+                return nack;\n+            }\n+        };\n+    }\n+\n+    /**\n+     * Create a message with the given payload, metadata and ack and nack functions.\n+     *\n+     * @param payload The payload.\n+     * @param metadata the metadata, must not be {@code null}, must not contain {@code null} values.\n+     * @param ack The ack function, this will be invoked when the returned messages {@link #ack()} method is invoked.\n+     * @param nack The negative-ack function, this will be invoked when the returned messages {@link #nack(Throwable)}\n+     *        method is invoked.\n+     * @param <T> the type of payload\n+     * @return A message with the given payload, metadata, ack and nack functions.\n+     */\n+    @Experimental(\"nack support is a SmallRye-only feature\")\n+    static <T> Message<T> of(T payload, Iterable<Object> metadata,\n+            Supplier<CompletionStage<Void>> ack, Function<Throwable, CompletionStage<Void>> nack) {\n+        Metadata validated = Metadata.from(metadata);\n+        return new Message<T>() {\n+            @Override\n+            public T getPayload() {\n+                return payload;\n+            }\n+\n+            @Override\n+            public Metadata getMetadata() {\n+                return validated;\n+            }\n+\n+            @Override\n+            public Supplier<CompletionStage<Void>> getAck() {\n+                return ack;\n+            }\n+\n+            @Override\n+            public Function<Throwable, CompletionStage<Void>> getNack() {\n+                return nack;\n+            }\n+        };\n+    }\n+\n+    /**\n+     * Create a message with the given payload, metadata and ack and nack functions.\n+     *\n+     * @param payload The payload.\n+     * @param metadata the metadata, must not be {@code null}, must not contain {@code null} values.\n+     * @param ack The ack function, this will be invoked when the returned messages {@link #ack()} method is invoked.\n+     * @param nack The negative-ack function, this will be invoked when the returned messages {@link #nack(Throwable)}\n+     *        method is invoked.\n+     * @param <T> the type of payload\n+     * @return A message with the given payload, metadata, ack and nack functions.\n+     */\n+    @Experimental(\"nack support is a SmallRye-only feature\")\n+    static <T> Message<T> of(T payload, Metadata metadata,\n+            Supplier<CompletionStage<Void>> ack, Function<Throwable, CompletionStage<Void>> nack) {\n+        if (payload == null) {\n+            throw new IllegalArgumentException(\"`payload` must not be `null`\");\n+        }\n+        if (metadata == null) {\n+            metadata = Metadata.empty();\n+        }\n+        Metadata actual = metadata;", "originalCommit": "f4c491567015f74e8c0bbf368a700e0cd466fda0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzMzNzY2Ng==", "url": "https://github.com/smallrye/smallrye-reactive-messaging/pull/573#discussion_r433337666", "bodyText": "Because it must be (implicitly) final to be used in the inner class.", "author": "cescoffier", "createdAt": "2020-06-01T16:10:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI2MjI5Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI2Mzc2MA==", "url": "https://github.com/smallrye/smallrye-reactive-messaging/pull/573#discussion_r433263760", "bodyText": "Has the throwable been logged anywhere prior to this point?\nWould it be beneficial to log out the throwable as we're swallowing it? How would a developer know something went wrong without a configured nack?", "author": "kenfinnigan", "createdAt": "2020-06-01T14:22:02Z", "path": "api/src/main/java/org/eclipse/microprofile/reactive/messaging/Message.java", "diffHunk": "@@ -297,6 +444,24 @@ default Metadata getMetadata() {\n         }\n     }\n \n+    /**\n+     * Acknowledge negatively this message.\n+     * <code>nack</code> is used to indicate that the processing of a message failed. The reason is passed as parameter.\n+     *\n+     * @param reason the reason of the nack, must not be {@code null}\n+     * @return a completion stage completed when the message is negative-acknowledgement has completed. If the\n+     *         negative acknowledgement fails, the completion stage propagates the failure.\n+     */\n+    @Experimental(\"nack support is a SmallRye-only feature\")\n+    default CompletionStage<Void> nack(Throwable reason) {\n+        Function<Throwable, CompletionStage<Void>> nack = getNack();\n+        if (nack == null) {\n+            return CompletableFuture.completedFuture(null);", "originalCommit": "f4c491567015f74e8c0bbf368a700e0cd466fda0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzMzODkzMQ==", "url": "https://github.com/smallrye/smallrye-reactive-messaging/pull/573#discussion_r433338931", "bodyText": "That's a good point. When you create an instance of Message, you should pass the nack and ack function, but I agree. If by any chance you use this default implementation, we should log the reason (if there is no nack function)", "author": "cescoffier", "createdAt": "2020-06-01T16:12:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI2Mzc2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM0OTAzMw==", "url": "https://github.com/smallrye/smallrye-reactive-messaging/pull/573#discussion_r433349033", "bodyText": "Fixed.", "author": "cescoffier", "createdAt": "2020-06-01T16:30:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI2Mzc2MA=="}], "type": "inlineReview"}, {"oid": "6d7781fe15ce60c23df10417f0095088ab0b5e2f", "url": "https://github.com/smallrye/smallrye-reactive-messaging/commit/6d7781fe15ce60c23df10417f0095088ab0b5e2f", "message": "Document failure management", "committedDate": "2020-06-01T16:29:51Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM4NDYyOQ==", "url": "https://github.com/smallrye/smallrye-reactive-messaging/pull/573#discussion_r433384629", "bodyText": "Does {} bring in the message? Thought the format was %s or the like?", "author": "kenfinnigan", "createdAt": "2020-06-01T17:37:32Z", "path": "api/src/main/java/org/eclipse/microprofile/reactive/messaging/Message.java", "diffHunk": "@@ -297,6 +449,32 @@ default Metadata getMetadata() {\n         }\n     }\n \n+    /**\n+     * Acknowledge negatively this message.\n+     * <code>nack</code> is used to indicate that the processing of a message failed. The reason is passed as parameter.\n+     *\n+     * @param reason the reason of the nack, must not be {@code null}\n+     * @return a completion stage completed when the message is negative-acknowledgement has completed. If the\n+     *         negative acknowledgement fails, the completion stage propagates the failure.\n+     */\n+    @Experimental(\"nack support is a SmallRye-only feature\")\n+    default CompletionStage<Void> nack(Throwable reason) {\n+        if (reason == null) {\n+            throw new IllegalArgumentException(\"The reason must not be `null`\");\n+        }\n+        Function<Throwable, CompletionStage<Void>> nack = getNack();\n+        if (nack == null) {\n+            LOGGER\n+                    .warn(\"A message has been nacked, but no nack function has been provided. The reason was: {}\",", "originalCommit": "6d7781fe15ce60c23df10417f0095088ab0b5e2f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM5NjEyNA==", "url": "https://github.com/smallrye/smallrye-reactive-messaging/pull/573#discussion_r433396124", "bodyText": "Using SLF4J, not JBoss logging.", "author": "cescoffier", "createdAt": "2020-06-01T17:58:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM4NDYyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQwMTE0OA==", "url": "https://github.com/smallrye/smallrye-reactive-messaging/pull/573#discussion_r433401148", "bodyText": "Ah ok, we may want to re-evaluate that in the future", "author": "kenfinnigan", "createdAt": "2020-06-01T18:08:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM4NDYyOQ=="}], "type": "inlineReview"}, {"oid": "91c41e55c356c9ae497f54a985835a5bf04d870b", "url": "https://github.com/smallrye/smallrye-reactive-messaging/commit/91c41e55c356c9ae497f54a985835a5bf04d870b", "message": "Use the SmallRye Common @Experimental annotation to mark SmallRye specific behavior", "committedDate": "2020-06-03T07:45:23Z", "type": "commit"}, {"oid": "3fb4d0ee32726856a194c666e448b44281a0f922", "url": "https://github.com/smallrye/smallrye-reactive-messaging/commit/3fb4d0ee32726856a194c666e448b44281a0f922", "message": "Add nack method to the Message class", "committedDate": "2020-06-03T07:45:23Z", "type": "commit"}, {"oid": "07ef4edfcf01b29bb73c4581c045915c0857c022", "url": "https://github.com/smallrye/smallrye-reactive-messaging/commit/07ef4edfcf01b29bb73c4581c045915c0857c022", "message": "Support nack when the emitter is used to send a payload.\n\nThe returned CompletionStage will be completed exceptionally with the nack reason.", "committedDate": "2020-06-03T07:45:23Z", "type": "commit"}, {"oid": "d4f58b7445aae4466cfbf8661eb122d45bbb661b", "url": "https://github.com/smallrye/smallrye-reactive-messaging/commit/d4f58b7445aae4466cfbf8661eb122d45bbb661b", "message": "Implement new failure management model for the Kafka connector.\n\nThe Kafka connector can now handle nack and depending on the strategy fail / ignore / or send the record to a dead-letter-queue.", "committedDate": "2020-06-03T07:45:24Z", "type": "commit"}, {"oid": "989848c23cbfce511bdc7767df14d770c415c2bb", "url": "https://github.com/smallrye/smallrye-reactive-messaging/commit/989848c23cbfce511bdc7767df14d770c415c2bb", "message": "Add nack support to the AMQP connector\n\nAlso define the source fault management strategies.", "committedDate": "2020-06-03T07:55:28Z", "type": "commit"}, {"oid": "97cf5e282cbe1dc553763adcc8a0c4da301bc40d", "url": "https://github.com/smallrye/smallrye-reactive-messaging/commit/97cf5e282cbe1dc553763adcc8a0c4da301bc40d", "message": "Update mutiny version to 0.5.2\n\nWe need the ability to deal with item and failure in one step.", "committedDate": "2020-06-03T07:55:31Z", "type": "commit"}, {"oid": "ac95ef9c9613eded21b066e038a320d0c1270524", "url": "https://github.com/smallrye/smallrye-reactive-messaging/commit/ac95ef9c9613eded21b066e038a320d0c1270524", "message": "Handle nack in subscribers (method with @Incoming only)", "committedDate": "2020-06-03T07:55:31Z", "type": "commit"}, {"oid": "6d8555563a5932cc225f10063e8214f63fd716f6", "url": "https://github.com/smallrye/smallrye-reactive-messaging/commit/6d8555563a5932cc225f10063e8214f63fd716f6", "message": "Add nack support to methods processing messages and payload and returning a single message or payload\n\nAlso skip `null` item.", "committedDate": "2020-06-03T07:55:31Z", "type": "commit"}, {"oid": "516ce7807d0611c1c35a57dde24fae46269a62ea", "url": "https://github.com/smallrye/smallrye-reactive-messaging/commit/516ce7807d0611c1c35a57dde24fae46269a62ea", "message": "It is now illegal to return null in the ack/nack method\n\n(it should have been illegal since the beginning)", "committedDate": "2020-06-03T07:55:31Z", "type": "commit"}, {"oid": "d4d286026773d56482968aff16b6939e32ce2668", "url": "https://github.com/smallrye/smallrye-reactive-messaging/commit/d4d286026773d56482968aff16b6939e32ce2668", "message": "Document skip behavior\n\nFix #566", "committedDate": "2020-06-03T07:55:31Z", "type": "commit"}, {"oid": "034ca17daf137bfa836174096a60ab7522d05366", "url": "https://github.com/smallrye/smallrye-reactive-messaging/commit/034ca17daf137bfa836174096a60ab7522d05366", "message": "Document nack", "committedDate": "2020-06-03T07:55:31Z", "type": "commit"}, {"oid": "7a73a6155d4c2497b9ec62e8e01dcec243168280", "url": "https://github.com/smallrye/smallrye-reactive-messaging/commit/7a73a6155d4c2497b9ec62e8e01dcec243168280", "message": "Add nack support to the MQTT (client) connector", "committedDate": "2020-06-03T07:55:31Z", "type": "commit"}, {"oid": "925789a0229bc1897d953cdf11e436a8eaa18255", "url": "https://github.com/smallrye/smallrye-reactive-messaging/commit/925789a0229bc1897d953cdf11e436a8eaa18255", "message": "Add nack support to the camel connector", "committedDate": "2020-06-03T07:55:31Z", "type": "commit"}, {"oid": "92508c730381008321368bfc4b01a675dbc8e41c", "url": "https://github.com/smallrye/smallrye-reactive-messaging/commit/92508c730381008321368bfc4b01a675dbc8e41c", "message": "Add failure-strategy attribute to the camel and mqtt connectors", "committedDate": "2020-06-03T07:55:31Z", "type": "commit"}, {"oid": "753f2982feb0bac532511075353aef0984db9636", "url": "https://github.com/smallrye/smallrye-reactive-messaging/commit/753f2982feb0bac532511075353aef0984db9636", "message": "Document failure management", "committedDate": "2020-06-03T07:55:31Z", "type": "commit"}, {"oid": "76065aeb2f953462e583982ab0a21ecaa3070eb5", "url": "https://github.com/smallrye/smallrye-reactive-messaging/commit/76065aeb2f953462e583982ab0a21ecaa3070eb5", "message": "The AMQP \"acknowledgement\" method must run on the event loop having created the message.", "committedDate": "2020-06-03T09:26:03Z", "type": "commit"}, {"oid": "76065aeb2f953462e583982ab0a21ecaa3070eb5", "url": "https://github.com/smallrye/smallrye-reactive-messaging/commit/76065aeb2f953462e583982ab0a21ecaa3070eb5", "message": "The AMQP \"acknowledgement\" method must run on the event loop having created the message.", "committedDate": "2020-06-03T09:26:03Z", "type": "forcePushed"}]}