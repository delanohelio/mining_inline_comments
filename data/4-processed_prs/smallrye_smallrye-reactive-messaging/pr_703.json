{"pr_number": 703, "pr_title": "Add AMQP nack strategies for the modified delivery state", "pr_createdAt": "2020-08-19T08:02:51Z", "pr_url": "https://github.com/smallrye/smallrye-reactive-messaging/pull/703", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjg1Mzc2Nw==", "url": "https://github.com/smallrye/smallrye-reactive-messaging/pull/703#discussion_r472853767", "bodyText": "This is using the same log message as the other failure handler. Seems like it should have its own variant, or the message should always indicate both the deliveryFailed and undeliverableHere value, with the latter passed in, otherwise it would be difficult to tell which handler variant actually occurred.", "author": "gemmellr", "createdAt": "2020-08-19T08:26:12Z", "path": "smallrye-reactive-messaging-amqp/src/main/java/io/smallrye/reactive/messaging/amqp/fault/AmqpModifiedFailedAndUndeliverableHere.java", "diffHunk": "@@ -0,0 +1,33 @@\n+package io.smallrye.reactive.messaging.amqp.fault;\n+\n+import static io.smallrye.reactive.messaging.amqp.i18n.AMQPLogging.log;\n+\n+import java.util.concurrent.CompletionStage;\n+\n+import io.smallrye.reactive.messaging.amqp.AmqpMessage;\n+import io.smallrye.reactive.messaging.amqp.ConnectionHolder;\n+import io.vertx.mutiny.core.Context;\n+\n+/**\n+ * This nack strategy marking the message as {@code modified} and set the {@code delivery-failed} attribute to {@code true},\n+ * as well as the {@code undeliverable-here} flag to {@code true}.\n+ * <p>\n+ * The message will not be redelivered on the same node, but may be redelivered on another node.\n+ * <p>\n+ * See http://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-messaging-v1.0-os.html#type-modified.\n+ */\n+public class AmqpModifiedFailedAndUndeliverableHere implements AmqpFailureHandler {\n+\n+    private final String channel;\n+\n+    public AmqpModifiedFailedAndUndeliverableHere(String channel) {\n+        this.channel = channel;\n+    }\n+\n+    @Override\n+    public <V> CompletionStage<Void> handle(AmqpMessage<V> msg, Context context, Throwable reason) {\n+        log.nackedModifiedFailedMessage(channel);", "originalCommit": "822dc97f87ad7c75320548a2738502f53dda788e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjg2NDAzOQ==", "url": "https://github.com/smallrye/smallrye-reactive-messaging/pull/703#discussion_r472864039", "bodyText": "+1", "author": "cescoffier", "createdAt": "2020-08-19T08:43:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjg1Mzc2Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjg1NTM1Nw==", "url": "https://github.com/smallrye/smallrye-reactive-messaging/pull/703#discussion_r472855357", "bodyText": "Seems odd to wait for >=10 but then assert exactly 13 values, this will surely be racey? Particularly as the 10th message will satistfy the await, but is also one of the ones to be redelivered.", "author": "gemmellr", "createdAt": "2020-08-19T08:28:58Z", "path": "smallrye-reactive-messaging-amqp/src/test/java/io/smallrye/reactive/messaging/amqp/AmqpFailureHandlerTest.java", "diffHunk": "@@ -131,6 +140,46 @@ public void testRejectStrategy() {\n         assertThat(isAmqpConnectorReady(connector)).isTrue();\n     }\n \n+    @Test\n+    public void testModifiedFailedStrategy() {\n+        getModifiedFailedConfig();\n+        MyReceiverBeanRecovering bean = deployRecovering();\n+        AtomicInteger counter = new AtomicInteger();\n+        AmqpConnector connector = container.getBeanManager().createInstance().select(AmqpConnector.class,\n+                ConnectorLiteral.of(AmqpConnector.CONNECTOR_NAME)).get();\n+        await().until(() -> isAmqpConnectorReady(connector));\n+        await().until(() -> isAmqpConnectorAlive(connector));\n+\n+        usage.produceTenIntegers(\"modified-failed\", counter::getAndIncrement);\n+\n+        await().atMost(2, TimeUnit.MINUTES).until(() -> bean.list().size() >= 10);", "originalCommit": "822dc97f87ad7c75320548a2738502f53dda788e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjg2NDE5MQ==", "url": "https://github.com/smallrye/smallrye-reactive-messaging/pull/703#discussion_r472864191", "bodyText": "Good point!", "author": "cescoffier", "createdAt": "2020-08-19T08:43:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjg1NTM1Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjg1OTMyNA==", "url": "https://github.com/smallrye/smallrye-reactive-messaging/pull/703#discussion_r472859324", "bodyText": "Should have been received?", "author": "gemmellr", "createdAt": "2020-08-19T08:35:21Z", "path": "smallrye-reactive-messaging-amqp/src/test/java/io/smallrye/reactive/messaging/amqp/AmqpFailureHandlerTest.java", "diffHunk": "@@ -131,6 +140,46 @@ public void testRejectStrategy() {\n         assertThat(isAmqpConnectorReady(connector)).isTrue();\n     }\n \n+    @Test\n+    public void testModifiedFailedStrategy() {\n+        getModifiedFailedConfig();\n+        MyReceiverBeanRecovering bean = deployRecovering();\n+        AtomicInteger counter = new AtomicInteger();\n+        AmqpConnector connector = container.getBeanManager().createInstance().select(AmqpConnector.class,\n+                ConnectorLiteral.of(AmqpConnector.CONNECTOR_NAME)).get();\n+        await().until(() -> isAmqpConnectorReady(connector));\n+        await().until(() -> isAmqpConnectorAlive(connector));\n+\n+        usage.produceTenIntegers(\"modified-failed\", counter::getAndIncrement);\n+\n+        await().atMost(2, TimeUnit.MINUTES).until(() -> bean.list().size() >= 10);\n+        // All messages should not have been received + 3, 6 and 9 are redelivered\n+        assertThat(bean.list()).containsExactly(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 3, 6, 9);\n+\n+        assertThat(isAmqpConnectorAlive(connector)).isTrue();\n+        assertThat(isAmqpConnectorReady(connector)).isTrue();\n+    }\n+\n+    @Test\n+    public void testModifiedFailedUndeliverableHereStrategy() {\n+        getModifiedFailedUndeliverableConfig();\n+        MyReceiverBeanRecovering bean = deployRecovering();\n+        AtomicInteger counter = new AtomicInteger();\n+        AmqpConnector connector = container.getBeanManager().createInstance().select(AmqpConnector.class,\n+                ConnectorLiteral.of(AmqpConnector.CONNECTOR_NAME)).get();\n+        await().until(() -> isAmqpConnectorReady(connector));\n+        await().until(() -> isAmqpConnectorAlive(connector));\n+\n+        usage.produceTenIntegers(\"modified-failed-undeliverable-here\", counter::getAndIncrement);\n+\n+        await().atMost(2, TimeUnit.MINUTES).until(() -> bean.list().size() >= 10);\n+        // All messages should not have been received, 3 6 and 9 are NOT redelivered", "originalCommit": "822dc97f87ad7c75320548a2738502f53dda788e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjg2NDM4Mg==", "url": "https://github.com/smallrye/smallrye-reactive-messaging/pull/703#discussion_r472864382", "bodyText": "yes, we capture the list before the failure.", "author": "cescoffier", "createdAt": "2020-08-19T08:43:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjg1OTMyNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjg1OTgxNQ==", "url": "https://github.com/smallrye/smallrye-reactive-messaging/pull/703#discussion_r472859815", "bodyText": "Should have been received?", "author": "gemmellr", "createdAt": "2020-08-19T08:36:11Z", "path": "smallrye-reactive-messaging-amqp/src/test/java/io/smallrye/reactive/messaging/amqp/AmqpFailureHandlerTest.java", "diffHunk": "@@ -131,6 +140,46 @@ public void testRejectStrategy() {\n         assertThat(isAmqpConnectorReady(connector)).isTrue();\n     }\n \n+    @Test\n+    public void testModifiedFailedStrategy() {\n+        getModifiedFailedConfig();\n+        MyReceiverBeanRecovering bean = deployRecovering();\n+        AtomicInteger counter = new AtomicInteger();\n+        AmqpConnector connector = container.getBeanManager().createInstance().select(AmqpConnector.class,\n+                ConnectorLiteral.of(AmqpConnector.CONNECTOR_NAME)).get();\n+        await().until(() -> isAmqpConnectorReady(connector));\n+        await().until(() -> isAmqpConnectorAlive(connector));\n+\n+        usage.produceTenIntegers(\"modified-failed\", counter::getAndIncrement);\n+\n+        await().atMost(2, TimeUnit.MINUTES).until(() -> bean.list().size() >= 10);\n+        // All messages should not have been received + 3, 6 and 9 are redelivered", "originalCommit": "822dc97f87ad7c75320548a2738502f53dda788e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjg2NDQ2Nw==", "url": "https://github.com/smallrye/smallrye-reactive-messaging/pull/703#discussion_r472864467", "bodyText": "yes, we capture the list before the failure.", "author": "cescoffier", "createdAt": "2020-08-19T08:43:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjg1OTgxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjkwNDkyMA==", "url": "https://github.com/smallrye/smallrye-reactive-messaging/pull/703#discussion_r472904920", "bodyText": "I mean that the comment says \"All messages should not have been received\", while the test expects they were all recieved (plus a few twice), and wont get that far unless enough were. It then goes on to assert the exact paylods, so it seems like the comment should be  \"All messages should have been received\". Or maybe \"now\" instead of \"not\" might work too.\nSame for other instance below", "author": "gemmellr", "createdAt": "2020-08-19T09:48:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjg1OTgxNQ=="}], "type": "inlineReview"}, {"oid": "bfbdbf22aacd8bbec4905fa2d8c60c681f138c52", "url": "https://github.com/smallrye/smallrye-reactive-messaging/commit/bfbdbf22aacd8bbec4905fa2d8c60c681f138c52", "message": "Fix #673\n\nAdd two new nack strategies to the AMQP connector:\n\n* modified-failed - marking the message modified and incrementing the delivery count (the message may be redelivered to the application)\n* modified-failed-undeliverable-here - marking the message modified, incrementing the delivery count, and indicating the application cannot process the message. The broker cannot redeliver the message to the application.", "committedDate": "2020-08-19T08:54:45Z", "type": "forcePushed"}, {"oid": "d631fe7a430fdfb18e6e1a3cdec577094e625e7c", "url": "https://github.com/smallrye/smallrye-reactive-messaging/commit/d631fe7a430fdfb18e6e1a3cdec577094e625e7c", "message": "Fix #673\n\nAdd two new nack strategies to the AMQP connector:\n\n* modified-failed - marking the message modified and incrementing the delivery count (the message may be redelivered to the application)\n* modified-failed-undeliverable-here - marking the message modified, incrementing the delivery count, and indicating the application cannot process the message. The broker cannot redeliver the message to the application.", "committedDate": "2020-08-19T10:44:20Z", "type": "forcePushed"}, {"oid": "93ce152c8f7c432c88df3143db5f918944b3aec9", "url": "https://github.com/smallrye/smallrye-reactive-messaging/commit/93ce152c8f7c432c88df3143db5f918944b3aec9", "message": "Fix #673\n\nAdd two new nack strategies to the AMQP connector:\n\n* modified-failed - marking the message modified and incrementing the delivery count (the message may be redelivered to the application)\n* modified-failed-undeliverable-here - marking the message modified, incrementing the delivery count, and indicating the application cannot process the message. The broker cannot redeliver the message to the application.", "committedDate": "2020-08-19T10:49:34Z", "type": "forcePushed"}, {"oid": "41b4b05ddeaf09b75fbc915c4b9d0a207bcff01a", "url": "https://github.com/smallrye/smallrye-reactive-messaging/commit/41b4b05ddeaf09b75fbc915c4b9d0a207bcff01a", "message": "Fix #673\n\nAdd two new nack strategies to the AMQP connector:\n\n* modified-failed - marking the message modified and incrementing the delivery count (the message may be redelivered to the application)\n* modified-failed-undeliverable-here - marking the message modified, incrementing the delivery count, and indicating the application cannot process the message. The broker cannot redeliver the message to the application.", "committedDate": "2020-08-19T13:38:49Z", "type": "commit"}, {"oid": "41b4b05ddeaf09b75fbc915c4b9d0a207bcff01a", "url": "https://github.com/smallrye/smallrye-reactive-messaging/commit/41b4b05ddeaf09b75fbc915c4b9d0a207bcff01a", "message": "Fix #673\n\nAdd two new nack strategies to the AMQP connector:\n\n* modified-failed - marking the message modified and incrementing the delivery count (the message may be redelivered to the application)\n* modified-failed-undeliverable-here - marking the message modified, incrementing the delivery count, and indicating the application cannot process the message. The broker cannot redeliver the message to the application.", "committedDate": "2020-08-19T13:38:49Z", "type": "forcePushed"}]}