{"pr_number": 3759, "pr_title": "feat(iOS): Refactoring configuration", "pr_createdAt": "2020-11-03T18:21:48Z", "pr_url": "https://github.com/ionic-team/capacitor/pull/3759", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDEyOTAzNQ==", "url": "https://github.com/ionic-team/capacitor/pull/3759#discussion_r520129035", "bodyText": "Since this is now defined, should we deprecate CAPPlugin.getConfigValue() ?", "author": "imhoffd", "createdAt": "2020-11-09T21:23:57Z", "path": "ios/Capacitor/Capacitor/CAPInstanceConfiguration.swift", "diffHunk": "@@ -0,0 +1,17 @@\n+import Foundation\n+\n+extension InstanceConfiguration {\n+    @objc public func getPluginConfigValue(_ pluginId: String, _ configKey: String) -> Any? {", "originalCommit": "ce2cb0176463174364668f67a1bd0a8722fbe838", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDE2MDcyOQ==", "url": "https://github.com/ionic-team/capacitor/pull/3759#discussion_r520160729", "bodyText": "This has always been defined on CAPConfig. I moved it here for compatibility as CAPPlugin.getConfigValue() is just a pass-through to this method. (having two methods to do the same thing is potentially confusing but that's the way it's always worked)\nIdeally, I think it'd be better if the plugin held its own configuration (which could be set at registration), at which point both of these methods could be deprecated. But if we pursue that approach it would be a follow-on piece of work.", "author": "ikeith", "createdAt": "2020-11-09T22:26:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDEyOTAzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDE5ODAyMw==", "url": "https://github.com/ionic-team/capacitor/pull/3759#discussion_r520198023", "bodyText": "Ideally, I think it'd be better if the plugin held its own configuration\n\n\"held\" meaning what exactly? What API do you propose for getting the plugin's config?", "author": "aparajita", "createdAt": "2020-11-09T23:59:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDEyOTAzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDY5MTk2Mg==", "url": "https://github.com/ionic-team/capacitor/pull/3759#discussion_r520691962", "bodyText": "Presently, the plugin's config is parsed from the file and held as a sub dictionary by the bridge's config. Like so:\n{\n\"plugins\": {\n  \"SplashScreen\": {\n    \"launchShowDuration\": 3000,\n    \"backgroundColor\": \"#ffffffff\"\n  }\n}}\n\nWhich means that the plugins call getConfigValue(\"backgroundColor\"), which calls bridge.getPluginConfigValue(\"SplashScreen\", \"backgroundColor\") (or they can call getPluginConfigValue directly) and the bridge looks for that key path in its store to get the value. It's unnecessarily complicated.\nInstead, the bridge could match up the name of the plugin and set the configuration at registration. So the plugin would have its own ivar that looks like:\n{\n  \"launchShowDuration\": 3000,\n  \"backgroundColor\": \"#ffffffff\"\n }\n\nSo rather than reaching up the bridge for each and every value, it would function more like CAPPluginCalls options. And that opens the possibility for the plugin's config to adopt the same typed accessors like getString, getBool, etc.", "author": "ikeith", "createdAt": "2020-11-10T16:20:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDEyOTAzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDczMzU0NQ==", "url": "https://github.com/ionic-team/capacitor/pull/3759#discussion_r520733545", "bodyText": "@ikeith Yeah, I know all about the current structure, I've pretty heavily extended CAPConfig. I figured putting the config on the plugin object itself is what you meant, because that's exactly what I would do. \ud83d\ude01\nOne thing I did in my plugins was to implement a convenience API that looks first in a call's options and then falls back to the config. So:\nfunc getString(from call: CAPPluginCall, orConfig fallback: Bool = false) -> String?\nThis ends up being quite useful.\nWhile you're rewriting so much API, have you given any thought to making the Swift API more iOS idiomatic? For example, this is idiomatic for JavaScript or Java, because there are no labeled parameters in those languages:\nfunc getString(_ call: CAPPluginCall) -> String?\nBut this is idiomatic for iOS:\nfunc getString(from call: CAPPluginCall) -> String?", "author": "aparajita", "createdAt": "2020-11-10T17:17:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDEyOTAzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDgyMDgxNw==", "url": "https://github.com/ionic-team/capacitor/pull/3759#discussion_r520820817", "bodyText": "Well, the usage of get in the name isn't idiomatic for Swift in the first place so that isn't a great example. But, yes, moving toward a more fluent, idiomatic API is a goal but not an absolute one. It's a gradual process (some of which was done in #3678) and has to be balanced against backwards compatibility, unnecessarily disruption, and expectations of developers less familiar with the native conventions.", "author": "ikeith", "createdAt": "2020-11-10T19:29:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDEyOTAzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDg1MTAyOA==", "url": "https://github.com/ionic-team/capacitor/pull/3759#discussion_r520851028", "bodyText": "You can always add idiomatic API that calls through to the non-idiomatic API. Or maybe vice versa is better since you may want to eventually deprecate the non-idiomatic API.\nI guess the most idiomatic API would be to define functions on the config object on the plugin. Something like this:\nclass CAPPluginConfig {\n  private config: [String: Any?]\n\n  func string(withKey key: String) -> String? {\n    return config[key] as? String\n  }\n\n  func int(withKey key: String) -> Int {\n    return config[key] as? Int\n  }\n\n  // and so on...\n}\n\nclass CAPPlugin {\n  public config: CAPPluginConfig\n\n  func getConfigString(_ key: String) -> String? {\n    return config.string(withKey: key)\n  }\n}\n\npublic class MyPlugin: CAPPlugin {\n  @objc func doSomething() {\n    if let foo = config.string(withKey: \"foo\") {\n      // hooray\n    }\n  }\n}\nHaving wrestled with (and read all of the source code of) the current config API, I'd be happy to work on adding something like the above.", "author": "aparajita", "createdAt": "2020-11-10T20:22:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDEyOTAzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDg2ODI4NQ==", "url": "https://github.com/ionic-team/capacitor/pull/3759#discussion_r520868285", "bodyText": "In the example of CAPPluginCall, the idiomatic way to access the parameters would be call.options[\"something] as? String ?? \"default\". The various get methods exist solely as a convenience for developers who don't want/expect Swift idioms. So any change to the plugin would follow a similar pattern. Making Swift-idiomatic wrapper methods isn't the point.", "author": "ikeith", "createdAt": "2020-11-10T20:55:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDEyOTAzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDg3NzgxMg==", "url": "https://github.com/ionic-team/capacitor/pull/3759#discussion_r520877812", "bodyText": "You are right, good point. I sometimes forget just how good Swift is.", "author": "aparajita", "createdAt": "2020-11-10T21:14:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDEyOTAzNQ=="}], "type": "inlineReview"}, {"oid": "25246d0677b5c3ae71dd6169bd5c211f2e98aa0d", "url": "https://github.com/ionic-team/capacitor/commit/25246d0677b5c3ae71dd6169bd5c211f2e98aa0d", "message": "First pass implementation of configuration objects and parsing.", "committedDate": "2020-11-10T20:37:26Z", "type": "commit"}, {"oid": "99127f0811f99c0252bd51a975fee60caf81483a", "url": "https://github.com/ionic-team/capacitor/commit/99127f0811f99c0252bd51a975fee60caf81483a", "message": "Adding type information to allowed navigation array.", "committedDate": "2020-11-10T20:37:26Z", "type": "commit"}, {"oid": "eeb5f4ce0c0a66fa6e608376e5ad1376ce29ae54", "url": "https://github.com/ionic-team/capacitor/commit/eeb5f4ce0c0a66fa6e608376e5ad1376ce29ae54", "message": "Refactored initialization, bridge view controller, and bridge to use InstanceConfiguration. Removed reference to CAPConfig from CAPLog and replaced with a static flag.", "committedDate": "2020-11-10T20:39:41Z", "type": "commit"}, {"oid": "658d02341e900d7d33f1ddac799b5fd8683d055a", "url": "https://github.com/ionic-team/capacitor/commit/658d02341e900d7d33f1ddac799b5fd8683d055a", "message": "Removing CAPConfig file.", "committedDate": "2020-11-10T20:39:47Z", "type": "commit"}, {"oid": "b641606adcbe2e9169c77e12e6da3f3e3358e74e", "url": "https://github.com/ionic-team/capacitor/commit/b641606adcbe2e9169c77e12e6da3f3e3358e74e", "message": "Adding unit tests for configuration parsing.", "committedDate": "2020-11-10T20:39:47Z", "type": "commit"}, {"oid": "e30e9278f3e15a644f68ada2000e4c9bc9afe8b2", "url": "https://github.com/ionic-team/capacitor/commit/e30e9278f3e15a644f68ada2000e4c9bc9afe8b2", "message": "Fixing logic bugs exposed by testing.", "committedDate": "2020-11-10T20:39:48Z", "type": "commit"}, {"oid": "e30e9278f3e15a644f68ada2000e4c9bc9afe8b2", "url": "https://github.com/ionic-team/capacitor/commit/e30e9278f3e15a644f68ada2000e4c9bc9afe8b2", "message": "Fixing logic bugs exposed by testing.", "committedDate": "2020-11-10T20:39:48Z", "type": "forcePushed"}, {"oid": "374b6d10f77463aa6eec97ed67cd1b5fdd242df4", "url": "https://github.com/ionic-team/capacitor/commit/374b6d10f77463aa6eec97ed67cd1b5fdd242df4", "message": "Merge branch 'main' into configuration", "committedDate": "2020-11-11T23:16:19Z", "type": "commit"}, {"oid": "99f50e7531236f4dab23512dff7d015c1627019d", "url": "https://github.com/ionic-team/capacitor/commit/99f50e7531236f4dab23512dff7d015c1627019d", "message": "Fix swiftlint errors.", "committedDate": "2020-11-12T22:11:38Z", "type": "commit"}, {"oid": "666048439992034f8c821a565487c137b8d313b1", "url": "https://github.com/ionic-team/capacitor/commit/666048439992034f8c821a565487c137b8d313b1", "message": "Swiftlint formatting", "committedDate": "2020-11-12T22:12:27Z", "type": "commit"}, {"oid": "c652616bfe1eeb45a7c459b063559e2d536e1ee0", "url": "https://github.com/ionic-team/capacitor/commit/c652616bfe1eeb45a7c459b063559e2d536e1ee0", "message": "Merge branch 'main' into configuration", "committedDate": "2020-11-12T22:12:45Z", "type": "commit"}, {"oid": "0977e832e6f222280eddc783ffa57fe32eacd2fe", "url": "https://github.com/ionic-team/capacitor/commit/0977e832e6f222280eddc783ffa57fe32eacd2fe", "message": "Merge branch 'main' into configuration", "committedDate": "2020-11-16T22:24:34Z", "type": "commit"}, {"oid": "a844c9a05876e1d1f79167c1c0f9cc1931fe2e26", "url": "https://github.com/ionic-team/capacitor/commit/a844c9a05876e1d1f79167c1c0f9cc1931fe2e26", "message": "Merge branch 'main' into configuration", "committedDate": "2020-11-18T22:53:40Z", "type": "commit"}, {"oid": "a4365ac169a825dd00849636016afc6031a8bf3b", "url": "https://github.com/ionic-team/capacitor/commit/a4365ac169a825dd00849636016afc6031a8bf3b", "message": "Merge branch 'main' into configuration", "committedDate": "2020-11-19T20:12:33Z", "type": "commit"}, {"oid": "e90f7632826ad12b5f27631d279d659038b4ee90", "url": "https://github.com/ionic-team/capacitor/commit/e90f7632826ad12b5f27631d279d659038b4ee90", "message": "Updating swiftlint exclusions.", "committedDate": "2020-11-19T20:45:46Z", "type": "commit"}, {"oid": "8ea11feba8a77dcf5524a4528136e37e8cc214b7", "url": "https://github.com/ionic-team/capacitor/commit/8ea11feba8a77dcf5524a4528136e37e8cc214b7", "message": "Merge branch 'main' into configuration", "committedDate": "2020-11-19T21:09:22Z", "type": "commit"}, {"oid": "c108546b77a6ed6e3a7d8ec6e60affdc7c36531d", "url": "https://github.com/ionic-team/capacitor/commit/c108546b77a6ed6e3a7d8ec6e60affdc7c36531d", "message": "Merge branch 'main' into configuration", "committedDate": "2020-11-19T21:44:29Z", "type": "commit"}, {"oid": "51ad4d663a0ab4380b12851736d8d2876eeb42d2", "url": "https://github.com/ionic-team/capacitor/commit/51ad4d663a0ab4380b12851736d8d2876eeb42d2", "message": "Merge branch 'main' into configuration", "committedDate": "2020-11-20T18:28:19Z", "type": "commit"}, {"oid": "1daa7f3b64c4613a5ed9999fca74a7bc46236cd4", "url": "https://github.com/ionic-team/capacitor/commit/1daa7f3b64c4613a5ed9999fca74a7bc46236cd4", "message": "Merge branch 'main' into configuration", "committedDate": "2020-11-20T18:32:37Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzk0NDYwMA==", "url": "https://github.com/ionic-team/capacitor/pull/3759#discussion_r527944600", "bodyText": "Not sure why this was public to begin with, but just noting that it is something being removed from the public API.", "author": "imhoffd", "createdAt": "2020-11-20T20:09:06Z", "path": "ios/Capacitor/Capacitor/CAPLog.swift", "diffHunk": "@@ -1,19 +1,11 @@\n public class CAPLog {\n-\n-    public static let config = CAPConfig()\n+    public static var enableLogging: Bool = true\n \n     public static func print(_ items: Any..., separator: String = \" \", terminator: String = \"\\n\") {\n-        if !self.hideLogs() {\n+        if enableLogging {\n             for (itemIndex, item) in items.enumerated() {\n                 Swift.print(item, terminator: itemIndex == items.count - 1 ? terminator : separator)\n             }\n         }\n     }\n-\n-    public static func hideLogs() -> Bool {", "originalCommit": "1daa7f3b64c4613a5ed9999fca74a7bc46236cd4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzk2NzAyNA==", "url": "https://github.com/ionic-team/capacitor/pull/3759#discussion_r527967024", "bodyText": "Yeah, its replacement property is public as well but we should probably note that.", "author": "ikeith", "createdAt": "2020-11-20T20:59:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzk0NDYwMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzk0NjczNA==", "url": "https://github.com/ionic-team/capacitor/pull/3759#discussion_r527946734", "bodyText": "I don't know swift very well, does this modify self.segments?", "author": "imhoffd", "createdAt": "2020-11-20T20:13:51Z", "path": "ios/Capacitor/Capacitor/KeyPath.swift", "diffHunk": "@@ -0,0 +1,62 @@\n+import Foundation\n+\n+public struct KeyPath {\n+    var segments: [String]\n+    var isEmpty: Bool { return segments.isEmpty }\n+    var path: String {\n+        return segments.joined(separator: \".\")\n+    }\n+\n+    // initializers\n+    init(_ string: String) {\n+        self.segments = string.components(separatedBy: \".\")\n+    }\n+\n+    init(segments: [String]) {\n+        self.segments = segments\n+    }\n+\n+    // returns a tuple of the first segment and the remaining key path. result is nil if the key path has no segments.\n+    func headAndRemainder() -> (head: String, remainder: KeyPath)? {\n+        guard !isEmpty else {\n+            return nil\n+        }\n+        var paths = segments\n+        let head = paths.removeFirst()", "originalCommit": "1daa7f3b64c4613a5ed9999fca74a7bc46236cd4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzk2OTE1Nw==", "url": "https://github.com/ionic-team/capacitor/pull/3759#discussion_r527969157", "bodyText": "Short answer: no.\nLong answer: collections are value types in Swift (unless you jump through some hoops to make a reference type) so this is only modifying paths not segments. In addition, KeyPath itself is a struct (which is a copy-on-write value types) so if this method did change segments then it would need to be marked as mutating or else it wouldn't compile.", "author": "ikeith", "createdAt": "2020-11-20T21:04:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzk0NjczNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzk3MDY5Mw==", "url": "https://github.com/ionic-team/capacitor/pull/3759#discussion_r527970693", "bodyText": "Thanks!", "author": "imhoffd", "createdAt": "2020-11-20T21:08:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzk0NjczNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzk0NzE2Mg==", "url": "https://github.com/ionic-team/capacitor/pull/3759#discussion_r527947162", "bodyText": "This is so functional \ud83d\ude0d", "author": "imhoffd", "createdAt": "2020-11-20T20:14:49Z", "path": "ios/Capacitor/Capacitor/KeyPath.swift", "diffHunk": "@@ -0,0 +1,62 @@\n+import Foundation\n+\n+public struct KeyPath {\n+    var segments: [String]\n+    var isEmpty: Bool { return segments.isEmpty }\n+    var path: String {\n+        return segments.joined(separator: \".\")\n+    }\n+\n+    // initializers\n+    init(_ string: String) {\n+        self.segments = string.components(separatedBy: \".\")\n+    }\n+\n+    init(segments: [String]) {\n+        self.segments = segments\n+    }\n+\n+    // returns a tuple of the first segment and the remaining key path. result is nil if the key path has no segments.\n+    func headAndRemainder() -> (head: String, remainder: KeyPath)? {\n+        guard !isEmpty else {\n+            return nil\n+        }\n+        var paths = segments\n+        let head = paths.removeFirst()\n+        return (head, KeyPath(segments: paths))\n+    }\n+}\n+\n+extension KeyPath: ExpressibleByStringLiteral {\n+    public init(stringLiteral value: String) {\n+        self.init(value)\n+    }\n+\n+    public init(unicodeScalarLiteral value: String) {\n+        self.init(value)\n+    }\n+\n+    public init(extendedGraphemeClusterLiteral value: String) {\n+        self.init(value)\n+    }\n+}\n+\n+extension JSObject {\n+    public subscript(keyPath keyPath: KeyPath) -> JSValue? {\n+        get {\n+            switch keyPath.headAndRemainder() {\n+            case nil: // path is empty\n+                return nil\n+            case let (head, remainder)? where remainder.isEmpty: // reached the end of the path\n+                return self[head]\n+            case let (head, remainder)?: // we have at least one level to traverse\n+                switch self[head] {\n+                case let childObject as JSObject: // iterate down the next level\n+                    return childObject[keyPath: remainder]\n+                default: // not an object, can't go any deeper\n+                    return nil\n+                }\n+            }", "originalCommit": "1daa7f3b64c4613a5ed9999fca74a7bc46236cd4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzk0OTk1Mg==", "url": "https://github.com/ionic-team/capacitor/pull/3759#discussion_r527949952", "bodyText": "How come you can't do this like in other places?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return (pluginConfigurations as? JSObject)?[keyPath: KeyPath(\"\\(pluginId).\\(configKey)\")]\n          \n          \n            \n                    return (pluginConfigurations as? JSObject)?[keyPath: \"\\(pluginId).\\(configKey)\"]", "author": "imhoffd", "createdAt": "2020-11-20T20:21:02Z", "path": "ios/Capacitor/Capacitor/CAPInstanceConfiguration.swift", "diffHunk": "@@ -0,0 +1,17 @@\n+import Foundation\n+\n+extension InstanceConfiguration {\n+    @objc public func getPluginConfigValue(_ pluginId: String, _ configKey: String) -> Any? {\n+        return (pluginConfigurations as? JSObject)?[keyPath: KeyPath(\"\\(pluginId).\\(configKey)\")]", "originalCommit": "1daa7f3b64c4613a5ed9999fca74a7bc46236cd4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzk3MzQzMg==", "url": "https://github.com/ionic-team/capacitor/pull/3759#discussion_r527973432", "bodyText": "Because this is not using a string literal (which is fully defined at compile time) like \"server.url\"; this string is assembled from variables at runtime. The other way works through some implicit type conversions to create a KeyPath from the literal automatically.\nI did consider making a second subscript operator for JSObject that accepted a string and converted it into a KeyPath but deferred to being more explicit. That felt like it was getting too clever for the sake of syntactic sugar but I don't feel that strongly about it either.", "author": "ikeith", "createdAt": "2020-11-20T21:15:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzk0OTk1Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzk1MDA1Mw==", "url": "https://github.com/ionic-team/capacitor/pull/3759#discussion_r527950053", "bodyText": "same question\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return (legacyConfig as? JSObject)?[keyPath: KeyPath(key)]\n          \n          \n            \n                    return (legacyConfig as? JSObject)?[keyPath: key]", "author": "imhoffd", "createdAt": "2020-11-20T20:21:16Z", "path": "ios/Capacitor/Capacitor/CAPInstanceConfiguration.swift", "diffHunk": "@@ -0,0 +1,17 @@\n+import Foundation\n+\n+extension InstanceConfiguration {\n+    @objc public func getPluginConfigValue(_ pluginId: String, _ configKey: String) -> Any? {\n+        return (pluginConfigurations as? JSObject)?[keyPath: KeyPath(\"\\(pluginId).\\(configKey)\")]\n+    }\n+\n+    @available(*, deprecated, message: \"Use direct property accessors\")\n+    @objc public func getValue(_ key: String) -> Any? {\n+        return (legacyConfig as? JSObject)?[keyPath: KeyPath(key)]", "originalCommit": "1daa7f3b64c4613a5ed9999fca74a7bc46236cd4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzk1MDE3NQ==", "url": "https://github.com/ionic-team/capacitor/pull/3759#discussion_r527950175", "bodyText": "same question\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return (legacyConfig as? JSObject)?[keyPath: KeyPath(key)] as? String\n          \n          \n            \n                    return (legacyConfig as? JSObject)?[keyPath: key] as? String", "author": "imhoffd", "createdAt": "2020-11-20T20:21:31Z", "path": "ios/Capacitor/Capacitor/CAPInstanceConfiguration.swift", "diffHunk": "@@ -0,0 +1,17 @@\n+import Foundation\n+\n+extension InstanceConfiguration {\n+    @objc public func getPluginConfigValue(_ pluginId: String, _ configKey: String) -> Any? {\n+        return (pluginConfigurations as? JSObject)?[keyPath: KeyPath(\"\\(pluginId).\\(configKey)\")]\n+    }\n+\n+    @available(*, deprecated, message: \"Use direct property accessors\")\n+    @objc public func getValue(_ key: String) -> Any? {\n+        return (legacyConfig as? JSObject)?[keyPath: KeyPath(key)]\n+    }\n+\n+    @available(*, deprecated, message: \"Use direct property accessors\")\n+    @objc public func getString(_ key: String) -> String? {\n+        return (legacyConfig as? JSObject)?[keyPath: KeyPath(key)] as? String", "originalCommit": "1daa7f3b64c4613a5ed9999fca74a7bc46236cd4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "250979f4f282540bf9ad8068680d96e3e1e3605c", "url": "https://github.com/ionic-team/capacitor/commit/250979f4f282540bf9ad8068680d96e3e1e3605c", "message": "Merge branch 'main' into configuration", "committedDate": "2020-11-20T21:33:44Z", "type": "commit"}, {"oid": "bc764dbc84e382d08f3b5fb95c744fdf2bcbe5a6", "url": "https://github.com/ionic-team/capacitor/commit/bc764dbc84e382d08f3b5fb95c744fdf2bcbe5a6", "message": "Removing unnecessary forward declaration.", "committedDate": "2020-11-20T21:34:43Z", "type": "commit"}, {"oid": "57549cc197fed309a983190e5f0e833fa2259714", "url": "https://github.com/ionic-team/capacitor/commit/57549cc197fed309a983190e5f0e833fa2259714", "message": "Merge branch 'main' into configuration", "committedDate": "2020-11-23T16:46:29Z", "type": "commit"}, {"oid": "043adb2722181b9d23e8a236961ec398e807a05f", "url": "https://github.com/ionic-team/capacitor/commit/043adb2722181b9d23e8a236961ec398e807a05f", "message": "Merge branch 'main' into configuration", "committedDate": "2020-11-24T13:07:12Z", "type": "commit"}, {"oid": "76b9c0167051635ec603948ec13998825194d013", "url": "https://github.com/ionic-team/capacitor/commit/76b9c0167051635ec603948ec13998825194d013", "message": "Merge branch 'main' into configuration", "committedDate": "2020-11-24T19:15:02Z", "type": "commit"}]}