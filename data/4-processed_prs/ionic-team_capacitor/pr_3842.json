{"pr_number": 3842, "pr_title": "feat(ios): add path utilities to bridge", "pr_createdAt": "2020-11-21T20:10:08Z", "pr_url": "https://github.com/ionic-team/capacitor/pull/3842", "timeline": [{"oid": "6bdd18bec87011ab8dadbbfc93ca09d81c5772b1", "url": "https://github.com/ionic-team/capacitor/commit/6bdd18bec87011ab8dadbbfc93ca09d81c5772b1", "message": "feat(ios): expose CAPFile utilities", "committedDate": "2020-11-21T20:08:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODkyOTczMA==", "url": "https://github.com/ionic-team/capacitor/pull/3842#discussion_r528929730", "bodyText": "Can this just return a URL? CAPFile is a pretty useless wrapper since it only has one property. In addition, using that object means that this method can't be exported to Obj-C because CAPFile is Swift-only.", "author": "ikeith", "createdAt": "2020-11-23T19:01:28Z", "path": "ios/Capacitor/Capacitor/CAPFile.swift", "diffHunk": "@@ -11,7 +11,7 @@ public class CAPFile {\n  * disk, in a bundle, or in another location.\n  */\n @objc public class CAPFileManager: NSObject {\n-    static func get(path: String) -> CAPFile? {\n+    public static func get(path: String) -> CAPFile? {", "originalCommit": "6bdd18bec87011ab8dadbbfc93ca09d81c5772b1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODkzMDY2Ng==", "url": "https://github.com/ionic-team/capacitor/pull/3842#discussion_r528930666", "bodyText": "I think this would benefit from a more descriptive name. This isn't getting \"getting\" anything; CAPFileManager doesn't store data. This is transforming the parameter that gets passed in but it's impossible to tell what it is expected do to from the name.", "author": "ikeith", "createdAt": "2020-11-23T19:03:07Z", "path": "ios/Capacitor/Capacitor/CAPFile.swift", "diffHunk": "@@ -11,7 +11,7 @@ public class CAPFile {\n  * disk, in a bundle, or in another location.\n  */\n @objc public class CAPFileManager: NSObject {\n-    static func get(path: String) -> CAPFile? {\n+    public static func get(path: String) -> CAPFile? {", "originalCommit": "6bdd18bec87011ab8dadbbfc93ca09d81c5772b1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "83d67bccda7d790d02e098e4a48d3205f68c7547", "url": "https://github.com/ionic-team/capacitor/commit/83d67bccda7d790d02e098e4a48d3205f68c7547", "message": "remove CAPFile in favor of using URL directly", "committedDate": "2020-11-23T19:16:55Z", "type": "commit"}, {"oid": "d959390726a4519136010476c09c2c15271aefb9", "url": "https://github.com/ionic-team/capacitor/commit/d959390726a4519136010476c09c2c15271aefb9", "message": "add path helpers on bridge itself", "committedDate": "2020-11-23T23:04:36Z", "type": "commit"}, {"oid": "23d227f59c93a63326411bbfa6cb5c5ffbf9df2a", "url": "https://github.com/ionic-team/capacitor/commit/23d227f59c93a63326411bbfa6cb5c5ffbf9df2a", "message": "Merge branch 'main' into file-access", "committedDate": "2020-11-23T23:08:01Z", "type": "commit"}, {"oid": "a966988170cc1fe7d3261f3428c52ce50d05a350", "url": "https://github.com/ionic-team/capacitor/commit/a966988170cc1fe7d3261f3428c52ce50d05a350", "message": "fix merge conflict", "committedDate": "2020-11-23T23:10:39Z", "type": "commit"}, {"oid": "511462c56dfd408e9e8728018df8715a861d211c", "url": "https://github.com/ionic-team/capacitor/commit/511462c56dfd408e9e8728018df8715a861d211c", "message": "fmt", "committedDate": "2020-11-23T23:12:47Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTA1NzgxMQ==", "url": "https://github.com/ionic-team/capacitor/pull/3842#discussion_r529057811", "bodyText": "@ikeith This is questionable. I kept the old behavior, but I'm thinking we should remove this check and let it fail whenever the file is actually used, vs when we transform the path.", "author": "imhoffd", "createdAt": "2020-11-23T23:15:47Z", "path": "ios/Capacitor/Capacitor/CapacitorBridge.swift", "diffHunk": "@@ -537,6 +537,57 @@ internal class CapacitorBridge: NSObject, CAPBridgeProtocol {\n         }\n     }\n \n+    // MARK: - CAPBridgeProtocol: Paths, Files, Assets\n+\n+    /**\n+     * Translate a URL from the web view into a file URL for native iOS.\n+     *\n+     * The web view may be handling several different types of URLs:\n+     *   - res:// (shortcut scheme to web assets)\n+     *   - file:// (fully qualified URL to file on the local device)\n+     *   - base64:// (to be implemented)\n+     *   - [web view scheme]:// (already converted once to load in the web view, to be implemented)\n+     */\n+    public func localURL(fromWebURL webURL: URL?) -> URL? {\n+        guard let inputURL = webURL else {\n+            return nil\n+        }\n+\n+        let manager = FileManager.default\n+        let url: URL\n+\n+        switch inputURL.scheme {\n+        case \"res\":\n+            let bundle = Bundle.main\n+            let resourcePath = bundle.resourcePath!\n+            url = URL(fileURLWithPath: resourcePath + \"/public\" + inputURL.path)\n+        case \"file\":\n+            url = inputURL\n+        default:\n+            return nil\n+        }\n+\n+        guard manager.fileExists(atPath: url.absoluteString.replacingOccurrences(of: \"file://\", with: \"\")) else {\n+            return nil\n+        }", "originalCommit": "511462c56dfd408e9e8728018df8715a861d211c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTc1OTczMg==", "url": "https://github.com/ionic-team/capacitor/pull/3842#discussion_r529759732", "bodyText": "I would be in favor of removing this. If we did keep it, though, it should simply pass url.path to fileExist(atPath:) instead of getting the absolute string and modifying it.", "author": "ikeith", "createdAt": "2020-11-24T17:39:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTA1NzgxMQ=="}], "type": "inlineReview"}, {"oid": "b21029f0cb914a67f682b1796f385d186482fd99", "url": "https://github.com/ionic-team/capacitor/commit/b21029f0cb914a67f682b1796f385d186482fd99", "message": "add docs for portablePath", "committedDate": "2020-11-23T23:21:13Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTA2MDYyMg==", "url": "https://github.com/ionic-team/capacitor/pull/3842#discussion_r529060622", "bodyText": "@ikeith What do you think about this also returning a proper URL, and then documenting that the plugin can use url.absoluteString?", "author": "imhoffd", "createdAt": "2020-11-23T23:22:36Z", "path": "ios/Capacitor/Capacitor/CapacitorBridge.swift", "diffHunk": "@@ -537,6 +537,60 @@ internal class CapacitorBridge: NSObject, CAPBridgeProtocol {\n         }\n     }\n \n+    // MARK: - CAPBridgeProtocol: Paths, Files, Assets\n+\n+    /**\n+     * Translate a URL from the web view into a file URL for native iOS.\n+     *\n+     * The web view may be handling several different types of URLs:\n+     *   - res:// (shortcut scheme to web assets)\n+     *   - file:// (fully qualified URL to file on the local device)\n+     *   - base64:// (to be implemented)\n+     *   - [web view scheme]:// (already converted once to load in the web view, to be implemented)\n+     */\n+    public func localURL(fromWebURL webURL: URL?) -> URL? {\n+        guard let inputURL = webURL else {\n+            return nil\n+        }\n+\n+        let manager = FileManager.default\n+        let url: URL\n+\n+        switch inputURL.scheme {\n+        case \"res\":\n+            let bundle = Bundle.main\n+            let resourcePath = bundle.resourcePath!\n+            url = URL(fileURLWithPath: resourcePath + \"/public\" + inputURL.path)\n+        case \"file\":\n+            url = inputURL\n+        default:\n+            return nil\n+        }\n+\n+        guard manager.fileExists(atPath: url.absoluteString.replacingOccurrences(of: \"file://\", with: \"\")) else {\n+            return nil\n+        }\n+\n+        return url\n+    }\n+\n+    /**\n+     * Translate a file URL for native iOS into a URL to load in the web view.\n+     */\n+    public func portablePath(fromLocalURL localURL: URL?) -> String? {", "originalCommit": "b21029f0cb914a67f682b1796f385d186482fd99", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTc2MjE0Ng==", "url": "https://github.com/ionic-team/capacitor/pull/3842#discussion_r529762146", "bodyText": "I like that better.", "author": "ikeith", "createdAt": "2020-11-24T17:43:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTA2MDYyMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTc1ODQxOQ==", "url": "https://github.com/ionic-team/capacitor/pull/3842#discussion_r529758419", "bodyText": "URL's path manipulation methods are more robust than string modifications. Also, force-unwraps are bad.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        let bundle = Bundle.main\n          \n          \n            \n                        let resourcePath = bundle.resourcePath!\n          \n          \n            \n                        url = URL(fileURLWithPath: resourcePath + \"/public\" + inputURL.path)\n          \n          \n            \n                        guard let resourcePath = Bundle.main.resourcePath else {\n          \n          \n            \n                            return nil\n          \n          \n            \n                        }\n          \n          \n            \n                        url = URL(fileURLWithPath: resourcePath).appendingPathComponent(\"public\").appendingPathComponent(inputURL.path)", "author": "ikeith", "createdAt": "2020-11-24T17:37:09Z", "path": "ios/Capacitor/Capacitor/CapacitorBridge.swift", "diffHunk": "@@ -537,6 +537,60 @@ internal class CapacitorBridge: NSObject, CAPBridgeProtocol {\n         }\n     }\n \n+    // MARK: - CAPBridgeProtocol: Paths, Files, Assets\n+\n+    /**\n+     * Translate a URL from the web view into a file URL for native iOS.\n+     *\n+     * The web view may be handling several different types of URLs:\n+     *   - res:// (shortcut scheme to web assets)\n+     *   - file:// (fully qualified URL to file on the local device)\n+     *   - base64:// (to be implemented)\n+     *   - [web view scheme]:// (already converted once to load in the web view, to be implemented)\n+     */\n+    public func localURL(fromWebURL webURL: URL?) -> URL? {\n+        guard let inputURL = webURL else {\n+            return nil\n+        }\n+\n+        let manager = FileManager.default\n+        let url: URL\n+\n+        switch inputURL.scheme {\n+        case \"res\":\n+            let bundle = Bundle.main\n+            let resourcePath = bundle.resourcePath!\n+            url = URL(fileURLWithPath: resourcePath + \"/public\" + inputURL.path)", "originalCommit": "b21029f0cb914a67f682b1796f385d186482fd99", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTc2MzAxOA==", "url": "https://github.com/ionic-team/capacitor/pull/3842#discussion_r529763018", "bodyText": "Same reasoning.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    guard let inputURL = localURL else {\n          \n          \n            \n                        return nil\n          \n          \n            \n                    }\n          \n          \n            \n            \n          \n          \n            \n                    guard let portableSchemeAndHost = self.localUrl else {\n          \n          \n            \n                        return nil\n          \n          \n            \n                    }\n          \n          \n            \n            \n          \n          \n            \n                    let url = URL(string: portableSchemeAndHost + CapacitorBridge.fileStartIdentifier + inputURL.path)\n          \n          \n            \n            \n          \n          \n            \n                    return url?.absoluteString\n          \n          \n            \n                    guard let inputURL = localURL else {\n          \n          \n            \n                        return nil\n          \n          \n            \n                    }\n          \n          \n            \n                    guard let urlString = self.localUrl, let portableURL = URL(string: urlString) else {\n          \n          \n            \n                        return nil\n          \n          \n            \n                    }\n          \n          \n            \n                    return portableURL.appendingPathComponent(CapacitorBridge.fileStartIdentifier).appendingPathComponent(inputURL.path).absoluteString", "author": "ikeith", "createdAt": "2020-11-24T17:44:24Z", "path": "ios/Capacitor/Capacitor/CapacitorBridge.swift", "diffHunk": "@@ -537,6 +537,60 @@ internal class CapacitorBridge: NSObject, CAPBridgeProtocol {\n         }\n     }\n \n+    // MARK: - CAPBridgeProtocol: Paths, Files, Assets\n+\n+    /**\n+     * Translate a URL from the web view into a file URL for native iOS.\n+     *\n+     * The web view may be handling several different types of URLs:\n+     *   - res:// (shortcut scheme to web assets)\n+     *   - file:// (fully qualified URL to file on the local device)\n+     *   - base64:// (to be implemented)\n+     *   - [web view scheme]:// (already converted once to load in the web view, to be implemented)\n+     */\n+    public func localURL(fromWebURL webURL: URL?) -> URL? {\n+        guard let inputURL = webURL else {\n+            return nil\n+        }\n+\n+        let manager = FileManager.default\n+        let url: URL\n+\n+        switch inputURL.scheme {\n+        case \"res\":\n+            let bundle = Bundle.main\n+            let resourcePath = bundle.resourcePath!\n+            url = URL(fileURLWithPath: resourcePath + \"/public\" + inputURL.path)\n+        case \"file\":\n+            url = inputURL\n+        default:\n+            return nil\n+        }\n+\n+        guard manager.fileExists(atPath: url.absoluteString.replacingOccurrences(of: \"file://\", with: \"\")) else {\n+            return nil\n+        }\n+\n+        return url\n+    }\n+\n+    /**\n+     * Translate a file URL for native iOS into a URL to load in the web view.\n+     */\n+    public func portablePath(fromLocalURL localURL: URL?) -> String? {\n+        guard let inputURL = localURL else {\n+            return nil\n+        }\n+\n+        guard let portableSchemeAndHost = self.localUrl else {\n+            return nil\n+        }\n+\n+        let url = URL(string: portableSchemeAndHost + CapacitorBridge.fileStartIdentifier + inputURL.path)\n+\n+        return url?.absoluteString", "originalCommit": "b21029f0cb914a67f682b1796f385d186482fd99", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "1aa25966dc24e03d6fddab01386edf7d53616f44", "url": "https://github.com/ionic-team/capacitor/commit/1aa25966dc24e03d6fddab01386edf7d53616f44", "message": "address PR comments", "committedDate": "2020-11-24T18:12:55Z", "type": "commit"}, {"oid": "ae4f8cd665bb5b4629a78c8ff4cbaab3c28454ab", "url": "https://github.com/ionic-team/capacitor/commit/ae4f8cd665bb5b4629a78c8ff4cbaab3c28454ab", "message": "Merge branch 'main' into file-access", "committedDate": "2020-11-24T19:09:45Z", "type": "commit"}, {"oid": "d892e86370b9acc06a3a45b9ab801328a6a900e4", "url": "https://github.com/ionic-team/capacitor/commit/d892e86370b9acc06a3a45b9ab801328a6a900e4", "message": "Merge branch 'main' into file-access", "committedDate": "2020-11-24T20:31:22Z", "type": "commit"}, {"oid": "f86dbab730227682a56f96121c3cbb822a0eacd7", "url": "https://github.com/ionic-team/capacitor/commit/f86dbab730227682a56f96121c3cbb822a0eacd7", "message": "apply changes from config PR", "committedDate": "2020-11-24T20:40:26Z", "type": "commit"}, {"oid": "6cccf378bfd2b918200beaaf925e0f3e0166beca", "url": "https://github.com/ionic-team/capacitor/commit/6cccf378bfd2b918200beaaf925e0f3e0166beca", "message": "Merge branch 'main' into file-access", "committedDate": "2020-11-25T00:43:16Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDYwODk0MQ==", "url": "https://github.com/ionic-team/capacitor/pull/3842#discussion_r530608941", "bodyText": "To support the embedded case, this should use the configuration's web app location instead of the native app bundle/public path.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        guard let resourcePath = Bundle.main.resourcePath else {\n          \n          \n            \n                            return nil\n          \n          \n            \n                        }\n          \n          \n            \n            \n          \n          \n            \n                        url = URL(fileURLWithPath: resourcePath).appendingPathComponent(\"public\").appendingPathComponent(inputURL.path)\n          \n          \n            \n                        url = config.appLocation.appendingPathComponent(inputURL.path)", "author": "ikeith", "createdAt": "2020-11-25T19:49:19Z", "path": "ios/Capacitor/Capacitor/CapacitorBridge.swift", "diffHunk": "@@ -533,6 +533,51 @@ internal class CapacitorBridge: NSObject, CAPBridgeProtocol {\n         }\n     }\n \n+    // MARK: - CAPBridgeProtocol: Paths, Files, Assets\n+\n+    /**\n+     * Translate a URL from the web view into a file URL for native iOS.\n+     *\n+     * The web view may be handling several different types of URLs:\n+     *   - res:// (shortcut scheme to web assets)\n+     *   - file:// (fully qualified URL to file on the local device)\n+     *   - base64:// (to be implemented)\n+     *   - [web view scheme]:// (already converted once to load in the web view, to be implemented)\n+     */\n+    public func localURL(fromWebURL webURL: URL?) -> URL? {\n+        guard let inputURL = webURL else {\n+            return nil\n+        }\n+\n+        let url: URL\n+\n+        switch inputURL.scheme {\n+        case \"res\":\n+            guard let resourcePath = Bundle.main.resourcePath else {\n+                return nil\n+            }\n+\n+            url = URL(fileURLWithPath: resourcePath).appendingPathComponent(\"public\").appendingPathComponent(inputURL.path)", "originalCommit": "6cccf378bfd2b918200beaaf925e0f3e0166beca", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "84f2f2ee04b8479494b337e80648d43f4aead46f", "url": "https://github.com/ionic-team/capacitor/commit/84f2f2ee04b8479494b337e80648d43f4aead46f", "message": "Update ios/Capacitor/Capacitor/CapacitorBridge.swift\n\nCo-authored-by: Ian Keith <iankeith@gmail.com>", "committedDate": "2020-11-25T20:15:45Z", "type": "commit"}, {"oid": "b7e9762bdcba7498967ee74acc3b5c1b773e6e73", "url": "https://github.com/ionic-team/capacitor/commit/b7e9762bdcba7498967ee74acc3b5c1b773e6e73", "message": "Merge branch 'main' into file-access", "committedDate": "2020-11-25T20:32:30Z", "type": "commit"}, {"oid": "2984b77febcba5142e3bc014ffd6eb94b6aca40f", "url": "https://github.com/ionic-team/capacitor/commit/2984b77febcba5142e3bc014ffd6eb94b6aca40f", "message": "Merge branch 'main' into file-access", "committedDate": "2020-11-25T23:04:16Z", "type": "commit"}]}