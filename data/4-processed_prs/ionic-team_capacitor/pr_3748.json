{"pr_number": 3748, "pr_title": "refactor(core): merge native-bridge.js into core runtime", "pr_createdAt": "2020-10-29T17:23:08Z", "pr_url": "https://github.com/ionic-team/capacitor/pull/3748", "timeline": [{"oid": "41e2d0b3584c600f78e70865cf649388e22e43aa", "url": "https://github.com/ionic-team/capacitor/commit/41e2d0b3584c600f78e70865cf649388e22e43aa", "message": "wip", "committedDate": "2020-10-29T16:34:35Z", "type": "commit"}, {"oid": "d6582e0f618367ba878f35df990c1adc27e8b16d", "url": "https://github.com/ionic-team/capacitor/commit/d6582e0f618367ba878f35df990c1adc27e8b16d", "message": "\ud83c\udf35", "committedDate": "2020-10-29T16:39:44Z", "type": "commit"}, {"oid": "c3f195fe96f7d91a3224f968ab00e849d555e671", "url": "https://github.com/ionic-team/capacitor/commit/c3f195fe96f7d91a3224f968ab00e849d555e671", "message": "\u2668\ufe0f", "committedDate": "2020-10-29T17:10:48Z", "type": "commit"}, {"oid": "d3eb713c67fe70120b9275e5f43286cebd13d3a5", "url": "https://github.com/ionic-team/capacitor/commit/d3eb713c67fe70120b9275e5f43286cebd13d3a5", "message": "\ud83d\ude82", "committedDate": "2020-10-29T17:22:19Z", "type": "commit"}, {"oid": "8339010e21b77bf105060e728e95a5e6a11db705", "url": "https://github.com/ionic-team/capacitor/commit/8339010e21b77bf105060e728e95a5e6a11db705", "message": "\ud83c\udfcf", "committedDate": "2020-10-29T18:05:14Z", "type": "commit"}, {"oid": "b218738dae3618bd878a628ce0af337922979541", "url": "https://github.com/ionic-team/capacitor/commit/b218738dae3618bd878a628ce0af337922979541", "message": "\ud83d\udc2d", "committedDate": "2020-10-29T18:32:13Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQ3NzA3Nw==", "url": "https://github.com/ionic-team/capacitor/pull/3748#discussion_r514477077", "bodyText": "Now there's a magic number if ever I saw one!\nFor the sake of others who may have to maintain this code in the future, any chance you could put that number in a named constant and document how you came up with it?", "author": "aparajita", "createdAt": "2020-10-29T18:27:27Z", "path": "core/src/bridge.ts", "diffHunk": "@@ -0,0 +1,184 @@\n+import type {\n+  CallData,\n+  CapacitorInstance,\n+  GlobalInstance,\n+  InternalState,\n+  PluginResult,\n+  StoredCallback,\n+} from './definitions';\n+import { initLogger } from './logger';\n+\n+export const initBridge = (\n+  gbl: GlobalInstance,\n+  instance: CapacitorInstance,\n+  state: InternalState,\n+): void => {\n+  // keep a collection of callbacks for native response data\n+  const callbacks = new Map<string, StoredCallback>();\n+\n+  // Counter of callback ids, randomized to avoid\n+  // any issues during reloads if a call comes back with\n+  // an existing callback id from an old session\n+  let callbackIdCount = Math.floor(Math.random() * 134217728);", "originalCommit": "8339010e21b77bf105060e728e95a5e6a11db705", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQ3ODY2Nw==", "url": "https://github.com/ionic-team/capacitor/pull/3748#discussion_r514478667", "bodyText": "JSON.stringify can throw TypeError, be sure to catch it.", "author": "aparajita", "createdAt": "2020-10-29T18:29:58Z", "path": "core/src/bridge.ts", "diffHunk": "@@ -0,0 +1,184 @@\n+import type {\n+  CallData,\n+  CapacitorInstance,\n+  GlobalInstance,\n+  InternalState,\n+  PluginResult,\n+  StoredCallback,\n+} from './definitions';\n+import { initLogger } from './logger';\n+\n+export const initBridge = (\n+  gbl: GlobalInstance,\n+  instance: CapacitorInstance,\n+  state: InternalState,\n+): void => {\n+  // keep a collection of callbacks for native response data\n+  const callbacks = new Map<string, StoredCallback>();\n+\n+  // Counter of callback ids, randomized to avoid\n+  // any issues during reloads if a call comes back with\n+  // an existing callback id from an old session\n+  let callbackIdCount = Math.floor(Math.random() * 134217728);\n+\n+  let postToNative: (data: CallData) => void | null = null;\n+\n+  // create the postToNative() fn if needed\n+  if (gbl.androidBridge) {\n+    // android platform\n+    postToNative = (data: any) => {\n+      gbl.androidBridge.postMessage(JSON.stringify(data));", "originalCommit": "8339010e21b77bf105060e728e95a5e6a11db705", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTIxMjQ2NQ==", "url": "https://github.com/ionic-team/capacitor/pull/3748#discussion_r515212465", "bodyText": "\ud83d\udc4d", "author": "adamdbradley", "createdAt": "2020-10-30T16:11:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQ3ODY2Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQ4MDMzNQ==", "url": "https://github.com/ionic-team/capacitor/pull/3748#discussion_r514480335", "bodyText": "logToNative is declared as an optional function, so it can't be any other type. Using optional chaining is simpler, cleaner, and faster at runtime:\n        if (instance.DEBUG && pluginId !== 'Console') {\n          instance.logToNative?.(callData);\n        }", "author": "aparajita", "createdAt": "2020-10-29T18:32:41Z", "path": "core/src/bridge.ts", "diffHunk": "@@ -0,0 +1,184 @@\n+import type {\n+  CallData,\n+  CapacitorInstance,\n+  GlobalInstance,\n+  InternalState,\n+  PluginResult,\n+  StoredCallback,\n+} from './definitions';\n+import { initLogger } from './logger';\n+\n+export const initBridge = (\n+  gbl: GlobalInstance,\n+  instance: CapacitorInstance,\n+  state: InternalState,\n+): void => {\n+  // keep a collection of callbacks for native response data\n+  const callbacks = new Map<string, StoredCallback>();\n+\n+  // Counter of callback ids, randomized to avoid\n+  // any issues during reloads if a call comes back with\n+  // an existing callback id from an old session\n+  let callbackIdCount = Math.floor(Math.random() * 134217728);\n+\n+  let postToNative: (data: CallData) => void | null = null;\n+\n+  // create the postToNative() fn if needed\n+  if (gbl.androidBridge) {\n+    // android platform\n+    postToNative = (data: any) => {\n+      gbl.androidBridge.postMessage(JSON.stringify(data));\n+    };\n+    state.isNative = true;\n+    state.platform = 'android';\n+  } else if (\n+    gbl.webkit &&\n+    gbl.webkit.messageHandlers &&\n+    gbl.webkit.messageHandlers.bridge\n+  ) {\n+    // ios platform\n+    postToNative = (data: any) => {\n+      data.type = 'message';\n+      gbl.webkit.messageHandlers.bridge.postMessage(data);\n+    };\n+    state.isNative = true;\n+    state.platform = 'ios';\n+  }\n+\n+  const logger = initLogger(gbl, instance, state, postToNative);\n+\n+  /**\n+   * Send a plugin method call to the native layer\n+   */\n+  instance.toNative = (\n+    pluginId: string,\n+    methodName: string,\n+    options: any,\n+    storedCallback: StoredCallback,\n+  ) => {\n+    try {\n+      if (typeof postToNative === 'function') {\n+        let callbackId = '-1';\n+\n+        if (\n+          storedCallback &&\n+          (typeof storedCallback.callback === 'function' ||\n+            typeof storedCallback.resolve === 'function')\n+        ) {\n+          // store the call for later lookup\n+          callbackId = String(++callbackIdCount);\n+          callbacks.set(callbackId, storedCallback);\n+        }\n+\n+        const callData: CallData = {\n+          callbackId: callbackId,\n+          pluginId: pluginId,\n+          methodName: methodName,\n+          options: options || {},\n+        };\n+\n+        if (\n+          instance.DEBUG &&\n+          pluginId !== 'Console' &&\n+          typeof instance.logToNative === 'function'", "originalCommit": "8339010e21b77bf105060e728e95a5e6a11db705", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQ4MTkwOQ==", "url": "https://github.com/ionic-team/capacitor/pull/3748#discussion_r514481909", "bodyText": "Since this is TypeScript, it would be nicer to use an enum for the level instead of a raw string. Or even better, create logger.warn, logger.error functions that set the level. That is a much more natural (and familiar) syntax.", "author": "aparajita", "createdAt": "2020-10-29T18:35:11Z", "path": "core/src/bridge.ts", "diffHunk": "@@ -0,0 +1,184 @@\n+import type {\n+  CallData,\n+  CapacitorInstance,\n+  GlobalInstance,\n+  InternalState,\n+  PluginResult,\n+  StoredCallback,\n+} from './definitions';\n+import { initLogger } from './logger';\n+\n+export const initBridge = (\n+  gbl: GlobalInstance,\n+  instance: CapacitorInstance,\n+  state: InternalState,\n+): void => {\n+  // keep a collection of callbacks for native response data\n+  const callbacks = new Map<string, StoredCallback>();\n+\n+  // Counter of callback ids, randomized to avoid\n+  // any issues during reloads if a call comes back with\n+  // an existing callback id from an old session\n+  let callbackIdCount = Math.floor(Math.random() * 134217728);\n+\n+  let postToNative: (data: CallData) => void | null = null;\n+\n+  // create the postToNative() fn if needed\n+  if (gbl.androidBridge) {\n+    // android platform\n+    postToNative = (data: any) => {\n+      gbl.androidBridge.postMessage(JSON.stringify(data));\n+    };\n+    state.isNative = true;\n+    state.platform = 'android';\n+  } else if (\n+    gbl.webkit &&\n+    gbl.webkit.messageHandlers &&\n+    gbl.webkit.messageHandlers.bridge\n+  ) {\n+    // ios platform\n+    postToNative = (data: any) => {\n+      data.type = 'message';\n+      gbl.webkit.messageHandlers.bridge.postMessage(data);\n+    };\n+    state.isNative = true;\n+    state.platform = 'ios';\n+  }\n+\n+  const logger = initLogger(gbl, instance, state, postToNative);\n+\n+  /**\n+   * Send a plugin method call to the native layer\n+   */\n+  instance.toNative = (\n+    pluginId: string,\n+    methodName: string,\n+    options: any,\n+    storedCallback: StoredCallback,\n+  ) => {\n+    try {\n+      if (typeof postToNative === 'function') {\n+        let callbackId = '-1';\n+\n+        if (\n+          storedCallback &&\n+          (typeof storedCallback.callback === 'function' ||\n+            typeof storedCallback.resolve === 'function')\n+        ) {\n+          // store the call for later lookup\n+          callbackId = String(++callbackIdCount);\n+          callbacks.set(callbackId, storedCallback);\n+        }\n+\n+        const callData: CallData = {\n+          callbackId: callbackId,\n+          pluginId: pluginId,\n+          methodName: methodName,\n+          options: options || {},\n+        };\n+\n+        if (\n+          instance.DEBUG &&\n+          pluginId !== 'Console' &&\n+          typeof instance.logToNative === 'function'\n+        ) {\n+          instance.logToNative(callData);\n+        }\n+\n+        // post the call data to native\n+        postToNative(callData);\n+\n+        return callbackId;\n+      } else {\n+        logger('warn', `implementation unavailable for: ${pluginId}`);", "originalCommit": "8339010e21b77bf105060e728e95a5e6a11db705", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTIxNDg4Nw==", "url": "https://github.com/ionic-team/capacitor/pull/3748#discussion_r515214887", "bodyText": "Good call. And the best part is that after I just made this update, it found what would have been a runtime error \ud83d\ude03", "author": "adamdbradley", "createdAt": "2020-10-30T16:15:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQ4MTkwOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQ4OTQ4Ng==", "url": "https://github.com/ionic-team/capacitor/pull/3748#discussion_r514489486", "bodyText": "logFromNative is declared as an optional function, so it can't be any other type. Using optional chaining is simpler, cleaner, and faster at runtime:\n        if (instance.DEBUG && result.pluginId !== 'Console') {\n          instance.logFromNative?.(result);\n        }", "author": "aparajita", "createdAt": "2020-10-29T18:48:57Z", "path": "core/src/bridge.ts", "diffHunk": "@@ -0,0 +1,184 @@\n+import type {\n+  CallData,\n+  CapacitorInstance,\n+  GlobalInstance,\n+  InternalState,\n+  PluginResult,\n+  StoredCallback,\n+} from './definitions';\n+import { initLogger } from './logger';\n+\n+export const initBridge = (\n+  gbl: GlobalInstance,\n+  instance: CapacitorInstance,\n+  state: InternalState,\n+): void => {\n+  // keep a collection of callbacks for native response data\n+  const callbacks = new Map<string, StoredCallback>();\n+\n+  // Counter of callback ids, randomized to avoid\n+  // any issues during reloads if a call comes back with\n+  // an existing callback id from an old session\n+  let callbackIdCount = Math.floor(Math.random() * 134217728);\n+\n+  let postToNative: (data: CallData) => void | null = null;\n+\n+  // create the postToNative() fn if needed\n+  if (gbl.androidBridge) {\n+    // android platform\n+    postToNative = (data: any) => {\n+      gbl.androidBridge.postMessage(JSON.stringify(data));\n+    };\n+    state.isNative = true;\n+    state.platform = 'android';\n+  } else if (\n+    gbl.webkit &&\n+    gbl.webkit.messageHandlers &&\n+    gbl.webkit.messageHandlers.bridge\n+  ) {\n+    // ios platform\n+    postToNative = (data: any) => {\n+      data.type = 'message';\n+      gbl.webkit.messageHandlers.bridge.postMessage(data);\n+    };\n+    state.isNative = true;\n+    state.platform = 'ios';\n+  }\n+\n+  const logger = initLogger(gbl, instance, state, postToNative);\n+\n+  /**\n+   * Send a plugin method call to the native layer\n+   */\n+  instance.toNative = (\n+    pluginId: string,\n+    methodName: string,\n+    options: any,\n+    storedCallback: StoredCallback,\n+  ) => {\n+    try {\n+      if (typeof postToNative === 'function') {\n+        let callbackId = '-1';\n+\n+        if (\n+          storedCallback &&\n+          (typeof storedCallback.callback === 'function' ||\n+            typeof storedCallback.resolve === 'function')\n+        ) {\n+          // store the call for later lookup\n+          callbackId = String(++callbackIdCount);\n+          callbacks.set(callbackId, storedCallback);\n+        }\n+\n+        const callData: CallData = {\n+          callbackId: callbackId,\n+          pluginId: pluginId,\n+          methodName: methodName,\n+          options: options || {},\n+        };\n+\n+        if (\n+          instance.DEBUG &&\n+          pluginId !== 'Console' &&\n+          typeof instance.logToNative === 'function'\n+        ) {\n+          instance.logToNative(callData);\n+        }\n+\n+        // post the call data to native\n+        postToNative(callData);\n+\n+        return callbackId;\n+      } else {\n+        logger('warn', `implementation unavailable for: ${pluginId}`);\n+      }\n+    } catch (e) {\n+      logger('error', e);\n+    }\n+\n+    return null;\n+  };\n+\n+  /**\n+   * Process a response from the native layer.\n+   */\n+  instance.fromNative = (result: PluginResult) => {\n+    if (", "originalCommit": "8339010e21b77bf105060e728e95a5e6a11db705", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTIxODc3OQ==", "url": "https://github.com/ionic-team/capacitor/pull/3748#discussion_r515218779", "bodyText": "Not sure why they were optional since we always set them. I'll just make the update so they're no optional, thanks", "author": "adamdbradley", "createdAt": "2020-10-30T16:21:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQ4OTQ4Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQ5MDkyMg==", "url": "https://github.com/ionic-team/capacitor/pull/3748#discussion_r514490922", "bodyText": "I'm assuming storedCall.callback is typed as an optional function, so this would suffice:\nif (storedCall.callback) {", "author": "aparajita", "createdAt": "2020-10-29T18:51:25Z", "path": "core/src/bridge.ts", "diffHunk": "@@ -0,0 +1,184 @@\n+import type {\n+  CallData,\n+  CapacitorInstance,\n+  GlobalInstance,\n+  InternalState,\n+  PluginResult,\n+  StoredCallback,\n+} from './definitions';\n+import { initLogger } from './logger';\n+\n+export const initBridge = (\n+  gbl: GlobalInstance,\n+  instance: CapacitorInstance,\n+  state: InternalState,\n+): void => {\n+  // keep a collection of callbacks for native response data\n+  const callbacks = new Map<string, StoredCallback>();\n+\n+  // Counter of callback ids, randomized to avoid\n+  // any issues during reloads if a call comes back with\n+  // an existing callback id from an old session\n+  let callbackIdCount = Math.floor(Math.random() * 134217728);\n+\n+  let postToNative: (data: CallData) => void | null = null;\n+\n+  // create the postToNative() fn if needed\n+  if (gbl.androidBridge) {\n+    // android platform\n+    postToNative = (data: any) => {\n+      gbl.androidBridge.postMessage(JSON.stringify(data));\n+    };\n+    state.isNative = true;\n+    state.platform = 'android';\n+  } else if (\n+    gbl.webkit &&\n+    gbl.webkit.messageHandlers &&\n+    gbl.webkit.messageHandlers.bridge\n+  ) {\n+    // ios platform\n+    postToNative = (data: any) => {\n+      data.type = 'message';\n+      gbl.webkit.messageHandlers.bridge.postMessage(data);\n+    };\n+    state.isNative = true;\n+    state.platform = 'ios';\n+  }\n+\n+  const logger = initLogger(gbl, instance, state, postToNative);\n+\n+  /**\n+   * Send a plugin method call to the native layer\n+   */\n+  instance.toNative = (\n+    pluginId: string,\n+    methodName: string,\n+    options: any,\n+    storedCallback: StoredCallback,\n+  ) => {\n+    try {\n+      if (typeof postToNative === 'function') {\n+        let callbackId = '-1';\n+\n+        if (\n+          storedCallback &&\n+          (typeof storedCallback.callback === 'function' ||\n+            typeof storedCallback.resolve === 'function')\n+        ) {\n+          // store the call for later lookup\n+          callbackId = String(++callbackIdCount);\n+          callbacks.set(callbackId, storedCallback);\n+        }\n+\n+        const callData: CallData = {\n+          callbackId: callbackId,\n+          pluginId: pluginId,\n+          methodName: methodName,\n+          options: options || {},\n+        };\n+\n+        if (\n+          instance.DEBUG &&\n+          pluginId !== 'Console' &&\n+          typeof instance.logToNative === 'function'\n+        ) {\n+          instance.logToNative(callData);\n+        }\n+\n+        // post the call data to native\n+        postToNative(callData);\n+\n+        return callbackId;\n+      } else {\n+        logger('warn', `implementation unavailable for: ${pluginId}`);\n+      }\n+    } catch (e) {\n+      logger('error', e);\n+    }\n+\n+    return null;\n+  };\n+\n+  /**\n+   * Process a response from the native layer.\n+   */\n+  instance.fromNative = (result: PluginResult) => {\n+    if (\n+      instance.DEBUG &&\n+      result.pluginId !== 'Console' &&\n+      typeof instance.logFromNative === 'function'\n+    ) {\n+      instance.logFromNative(result);\n+    }\n+\n+    // get the stored call, if it exists\n+    try {\n+      const storedCall = callbacks.get(result.callbackId);\n+\n+      if (storedCall) {\n+        // looks like we've got a stored call\n+\n+        if (result.error) {\n+          // ensure stacktraces by copying error properties to an Error\n+          result.error = Object.keys(result.error).reduce((err, key) => {\n+            err[key] = (result.error as any)[key];\n+            return err;\n+          }, new instance.Exception('') as any);\n+        }\n+\n+        if (typeof storedCall.callback === 'function') {", "originalCommit": "8339010e21b77bf105060e728e95a5e6a11db705", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTIyMzM3Mg==", "url": "https://github.com/ionic-team/capacitor/pull/3748#discussion_r515223372", "bodyText": "fine to double check, who knows what the runtime provided us", "author": "adamdbradley", "createdAt": "2020-10-30T16:29:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQ5MDkyMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQ5MTA4MA==", "url": "https://github.com/ionic-team/capacitor/pull/3748#discussion_r514491080", "bodyText": "Same here as above.", "author": "aparajita", "createdAt": "2020-10-29T18:51:41Z", "path": "core/src/bridge.ts", "diffHunk": "@@ -0,0 +1,184 @@\n+import type {\n+  CallData,\n+  CapacitorInstance,\n+  GlobalInstance,\n+  InternalState,\n+  PluginResult,\n+  StoredCallback,\n+} from './definitions';\n+import { initLogger } from './logger';\n+\n+export const initBridge = (\n+  gbl: GlobalInstance,\n+  instance: CapacitorInstance,\n+  state: InternalState,\n+): void => {\n+  // keep a collection of callbacks for native response data\n+  const callbacks = new Map<string, StoredCallback>();\n+\n+  // Counter of callback ids, randomized to avoid\n+  // any issues during reloads if a call comes back with\n+  // an existing callback id from an old session\n+  let callbackIdCount = Math.floor(Math.random() * 134217728);\n+\n+  let postToNative: (data: CallData) => void | null = null;\n+\n+  // create the postToNative() fn if needed\n+  if (gbl.androidBridge) {\n+    // android platform\n+    postToNative = (data: any) => {\n+      gbl.androidBridge.postMessage(JSON.stringify(data));\n+    };\n+    state.isNative = true;\n+    state.platform = 'android';\n+  } else if (\n+    gbl.webkit &&\n+    gbl.webkit.messageHandlers &&\n+    gbl.webkit.messageHandlers.bridge\n+  ) {\n+    // ios platform\n+    postToNative = (data: any) => {\n+      data.type = 'message';\n+      gbl.webkit.messageHandlers.bridge.postMessage(data);\n+    };\n+    state.isNative = true;\n+    state.platform = 'ios';\n+  }\n+\n+  const logger = initLogger(gbl, instance, state, postToNative);\n+\n+  /**\n+   * Send a plugin method call to the native layer\n+   */\n+  instance.toNative = (\n+    pluginId: string,\n+    methodName: string,\n+    options: any,\n+    storedCallback: StoredCallback,\n+  ) => {\n+    try {\n+      if (typeof postToNative === 'function') {\n+        let callbackId = '-1';\n+\n+        if (\n+          storedCallback &&\n+          (typeof storedCallback.callback === 'function' ||\n+            typeof storedCallback.resolve === 'function')\n+        ) {\n+          // store the call for later lookup\n+          callbackId = String(++callbackIdCount);\n+          callbacks.set(callbackId, storedCallback);\n+        }\n+\n+        const callData: CallData = {\n+          callbackId: callbackId,\n+          pluginId: pluginId,\n+          methodName: methodName,\n+          options: options || {},\n+        };\n+\n+        if (\n+          instance.DEBUG &&\n+          pluginId !== 'Console' &&\n+          typeof instance.logToNative === 'function'\n+        ) {\n+          instance.logToNative(callData);\n+        }\n+\n+        // post the call data to native\n+        postToNative(callData);\n+\n+        return callbackId;\n+      } else {\n+        logger('warn', `implementation unavailable for: ${pluginId}`);\n+      }\n+    } catch (e) {\n+      logger('error', e);\n+    }\n+\n+    return null;\n+  };\n+\n+  /**\n+   * Process a response from the native layer.\n+   */\n+  instance.fromNative = (result: PluginResult) => {\n+    if (\n+      instance.DEBUG &&\n+      result.pluginId !== 'Console' &&\n+      typeof instance.logFromNative === 'function'\n+    ) {\n+      instance.logFromNative(result);\n+    }\n+\n+    // get the stored call, if it exists\n+    try {\n+      const storedCall = callbacks.get(result.callbackId);\n+\n+      if (storedCall) {\n+        // looks like we've got a stored call\n+\n+        if (result.error) {\n+          // ensure stacktraces by copying error properties to an Error\n+          result.error = Object.keys(result.error).reduce((err, key) => {\n+            err[key] = (result.error as any)[key];\n+            return err;\n+          }, new instance.Exception('') as any);\n+        }\n+\n+        if (typeof storedCall.callback === 'function') {\n+          // callback\n+          if (result.success) {\n+            storedCall.callback(result.data);\n+          } else {\n+            storedCall.callback(null, result.error);\n+          }\n+        } else if (typeof storedCall.resolve === 'function') {", "originalCommit": "8339010e21b77bf105060e728e95a5e6a11db705", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQ5MzM3MQ==", "url": "https://github.com/ionic-team/capacitor/pull/3748#discussion_r514493371", "bodyText": "Is this in fact any or is it actually strictly a function or an object? If that is the case it could be typed as such.", "author": "aparajita", "createdAt": "2020-10-29T18:55:05Z", "path": "core/src/definitions.ts", "diffHunk": "@@ -101,40 +86,235 @@ declare const CapacitorException: {\n };\n \n export interface Capacitor {\n+  /**\n+   * Utility function to convert a file path into\n+   * a useful src depending on the value and environment.\n+   */\n+  convertFileSrc: (filePath: string) => string;\n+\n+  /**\n+   * The Exception class used when generating plugin Exceptions\n+   * from bridge calls.\n+   */\n   Exception: typeof CapacitorException;\n-  isNative?: boolean;\n-  platform?: string;\n+\n+  /**\n+   * Boolean if the platform is native or not. `android` and `ios`\n+   * would return `true`, otherwise `false`.\n+   */\n+  isNativePlatform: () => boolean;\n+\n+  /**\n+   * Used to check if a platform is registered and available.\n+   */\n   isPluginAvailable: (name: string) => boolean;\n-  convertFileSrc: (filePath: string) => string;\n+\n+  /**\n+   * Gets the name of the platform, such as `android`, `ios`, or `web`.\n+   */\n   getPlatform: () => string;\n-  toNative?: (\n-    pluginId: string,\n-    methodName: string,\n-    options: any,\n-    storedCallback?: StoredCallback,\n-  ) => void;\n-  fromNative?: (result: PluginResult) => void;\n-  withPlugin?: (pluginId: string, fn: (...args: any[]) => any) => void;\n+\n+  /**\n+   * Sends data over the bridge to the native layer.\n+   * Returns the Callback Id.\n+   */\n   nativeCallback?: (\n     pluginId: string,\n     methodName: string,\n     options?: any,", "originalCommit": "8339010e21b77bf105060e728e95a5e6a11db705", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTIyNDIzMA==", "url": "https://github.com/ionic-team/capacitor/pull/3748#discussion_r515224230", "bodyText": "yeah not sure what each plugin will use as its options here", "author": "adamdbradley", "createdAt": "2020-10-30T16:30:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQ5MzM3MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQ5NTY0Mg==", "url": "https://github.com/ionic-team/capacitor/pull/3748#discussion_r514495642", "bodyText": "What does \"Advance\" mean here?", "author": "aparajita", "createdAt": "2020-10-29T18:58:11Z", "path": "core/src/logger.ts", "diffHunk": "@@ -0,0 +1,196 @@\n+import type {\n+  CallData,\n+  CapacitorInstance,\n+  GlobalInstance,\n+  InternalState,\n+} from './definitions';\n+\n+export const initLogger = (\n+  gbl: GlobalInstance,\n+  instance: CapacitorInstance,\n+  state: InternalState,\n+  postToNative: (data: any) => void | null,\n+) => {\n+  // patch window.console on iOS and store original console fns\n+  const isIos = state.platform === 'ios';\n+  const orgConsole = (isIos ? {} : gbl.console) as any;\n+\n+  const useFallbackLogging =\n+    !!gbl.console && Object.keys(gbl.console).length === 0;\n+  if (useFallbackLogging && gbl.console) {\n+    gbl.console.warn('Advance console logging disabled.');", "originalCommit": "8339010e21b77bf105060e728e95a5e6a11db705", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQ5ODM1Mg==", "url": "https://github.com/ionic-team/capacitor/pull/3748#discussion_r514498352", "bodyText": "Shouldn't this logging only be done if instance.DEBUG? There's a few reasons why:\n\n\nWe really don't want to see this info most of the time. If we are doing our own logging, the spam from native calls obscures our own logs.\n\n\nThere is a very real cost at runtime. You have to go through the JS<->Native bridge code, then the bridge has to parse the call and execute a dynamic dispatch.", "author": "aparajita", "createdAt": "2020-10-29T19:02:36Z", "path": "core/src/logger.ts", "diffHunk": "@@ -0,0 +1,196 @@\n+import type {\n+  CallData,\n+  CapacitorInstance,\n+  GlobalInstance,\n+  InternalState,\n+} from './definitions';\n+\n+export const initLogger = (\n+  gbl: GlobalInstance,\n+  instance: CapacitorInstance,\n+  state: InternalState,\n+  postToNative: (data: any) => void | null,\n+) => {\n+  // patch window.console on iOS and store original console fns\n+  const isIos = state.platform === 'ios';\n+  const orgConsole = (isIos ? {} : gbl.console) as any;\n+\n+  const useFallbackLogging =\n+    !!gbl.console && Object.keys(gbl.console).length === 0;\n+  if (useFallbackLogging && gbl.console) {\n+    gbl.console.warn('Advance console logging disabled.');\n+  }\n+\n+  // list log functions bridged to native log\n+  const bridgedLevels: { [key: string]: boolean } = {\n+    debug: true,\n+    error: true,\n+    info: true,\n+    log: true,\n+    trace: true,\n+    warn: true,\n+  };\n+\n+  if (isIos && gbl.console) {\n+    Object.keys(gbl.console).forEach(level => {\n+      if (typeof gbl.console[level] === 'function') {\n+        // loop through all the console functions and keep references to the original\n+        orgConsole[level] = gbl.console[level];\n+        gbl.console[level] = function capacitorConsole() {\n+          let msgs: any[] = Array.prototype.slice.call(arguments);\n+\n+          // console log to browser\n+          orgConsole[level].apply(gbl.console, msgs);\n+\n+          if (bridgedLevels[level]) {\n+            // send log to native to print\n+            try {\n+              // convert all args to strings\n+              msgs = msgs.map(arg => {\n+                if (typeof arg === 'object') {\n+                  try {\n+                    arg = JSON.stringify(arg);\n+                  } catch (e) {}\n+                }\n+                // convert to string\n+                return String(arg);\n+              });\n+              instance.toNative('Console', 'log', {\n+                level: level,\n+                message: msgs.join(' '),\n+              });\n+            } catch (e) {\n+              // error converting/posting console messages\n+              orgConsole.error.apply(gbl.console, e);\n+            }\n+          }\n+        };\n+      }\n+    });\n+  }\n+\n+  instance.logJs = (message, level) => {\n+    switch (level) {\n+      case 'error':\n+        gbl.console.error(message);\n+        break;\n+      case 'warn':\n+        gbl.console.warn(message);\n+        break;\n+      case 'info':\n+        gbl.console.info(message);\n+        break;\n+      default:\n+        gbl.console.log(message);\n+    }\n+  };\n+\n+  instance.handleError = (e: Error) => gbl.console.error(e);\n+\n+  instance.handleWindowError = (msg, url, lineNo, columnNo, error) => {\n+    const str = msg.toLowerCase();\n+    const substring = 'script error';\n+\n+    if (str.indexOf(substring) > -1) {\n+      // Some IE issue?\n+    } else {\n+      const errObj = {\n+        type: 'js.error',\n+        error: {\n+          message: msg,\n+          url: url,\n+          line: lineNo,\n+          col: columnNo,\n+          errorObject: JSON.stringify(error),\n+        },\n+      };\n+\n+      if (error !== null) {\n+        instance.handleError(error);\n+      }\n+\n+      if (postToNative) {\n+        postToNative(errObj);\n+      }\n+    }\n+\n+    return false;\n+  };\n+\n+  if (instance.DEBUG) {\n+    window.onerror = instance.handleWindowError;\n+  }\n+\n+  instance.logToNative = (call: CallData) => {\n+    if (!useFallbackLogging) {", "originalCommit": "8339010e21b77bf105060e728e95a5e6a11db705", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQ5ODY1Ng==", "url": "https://github.com/ionic-team/capacitor/pull/3748#discussion_r514498656", "bodyText": "Same comments here as for logToNative.", "author": "aparajita", "createdAt": "2020-10-29T19:03:10Z", "path": "core/src/logger.ts", "diffHunk": "@@ -0,0 +1,196 @@\n+import type {\n+  CallData,\n+  CapacitorInstance,\n+  GlobalInstance,\n+  InternalState,\n+} from './definitions';\n+\n+export const initLogger = (\n+  gbl: GlobalInstance,\n+  instance: CapacitorInstance,\n+  state: InternalState,\n+  postToNative: (data: any) => void | null,\n+) => {\n+  // patch window.console on iOS and store original console fns\n+  const isIos = state.platform === 'ios';\n+  const orgConsole = (isIos ? {} : gbl.console) as any;\n+\n+  const useFallbackLogging =\n+    !!gbl.console && Object.keys(gbl.console).length === 0;\n+  if (useFallbackLogging && gbl.console) {\n+    gbl.console.warn('Advance console logging disabled.');\n+  }\n+\n+  // list log functions bridged to native log\n+  const bridgedLevels: { [key: string]: boolean } = {\n+    debug: true,\n+    error: true,\n+    info: true,\n+    log: true,\n+    trace: true,\n+    warn: true,\n+  };\n+\n+  if (isIos && gbl.console) {\n+    Object.keys(gbl.console).forEach(level => {\n+      if (typeof gbl.console[level] === 'function') {\n+        // loop through all the console functions and keep references to the original\n+        orgConsole[level] = gbl.console[level];\n+        gbl.console[level] = function capacitorConsole() {\n+          let msgs: any[] = Array.prototype.slice.call(arguments);\n+\n+          // console log to browser\n+          orgConsole[level].apply(gbl.console, msgs);\n+\n+          if (bridgedLevels[level]) {\n+            // send log to native to print\n+            try {\n+              // convert all args to strings\n+              msgs = msgs.map(arg => {\n+                if (typeof arg === 'object') {\n+                  try {\n+                    arg = JSON.stringify(arg);\n+                  } catch (e) {}\n+                }\n+                // convert to string\n+                return String(arg);\n+              });\n+              instance.toNative('Console', 'log', {\n+                level: level,\n+                message: msgs.join(' '),\n+              });\n+            } catch (e) {\n+              // error converting/posting console messages\n+              orgConsole.error.apply(gbl.console, e);\n+            }\n+          }\n+        };\n+      }\n+    });\n+  }\n+\n+  instance.logJs = (message, level) => {\n+    switch (level) {\n+      case 'error':\n+        gbl.console.error(message);\n+        break;\n+      case 'warn':\n+        gbl.console.warn(message);\n+        break;\n+      case 'info':\n+        gbl.console.info(message);\n+        break;\n+      default:\n+        gbl.console.log(message);\n+    }\n+  };\n+\n+  instance.handleError = (e: Error) => gbl.console.error(e);\n+\n+  instance.handleWindowError = (msg, url, lineNo, columnNo, error) => {\n+    const str = msg.toLowerCase();\n+    const substring = 'script error';\n+\n+    if (str.indexOf(substring) > -1) {\n+      // Some IE issue?\n+    } else {\n+      const errObj = {\n+        type: 'js.error',\n+        error: {\n+          message: msg,\n+          url: url,\n+          line: lineNo,\n+          col: columnNo,\n+          errorObject: JSON.stringify(error),\n+        },\n+      };\n+\n+      if (error !== null) {\n+        instance.handleError(error);\n+      }\n+\n+      if (postToNative) {\n+        postToNative(errObj);\n+      }\n+    }\n+\n+    return false;\n+  };\n+\n+  if (instance.DEBUG) {\n+    window.onerror = instance.handleWindowError;\n+  }\n+\n+  instance.logToNative = (call: CallData) => {\n+    if (!useFallbackLogging) {\n+      orgConsole.groupCollapsed(\n+        '%cnative %c' +\n+          call.pluginId +\n+          '.' +\n+          call.methodName +\n+          ' (#' +\n+          call.callbackId +\n+          ')',\n+        'font-weight: lighter; color: gray',\n+        'font-weight: bold; color: #000',\n+      );\n+      orgConsole.dir(call);\n+      orgConsole.groupEnd();\n+    } else {\n+      gbl.console.log('LOG TO NATIVE: ', call);\n+      if (state.platform === 'ios') {\n+        try {\n+          instance.toNative('Console', 'log', {\n+            message: JSON.stringify(call),\n+          });\n+        } catch (e) {\n+          gbl.console.log('Error converting/posting console messages');\n+        }\n+      }\n+    }\n+  };\n+\n+  instance.logFromNative = result => {\n+    if (!useFallbackLogging) {", "originalCommit": "8339010e21b77bf105060e728e95a5e6a11db705", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "61512b0c2fa97ac4a45506a056cab5b5eb0fcd59", "url": "https://github.com/ionic-team/capacitor/commit/61512b0c2fa97ac4a45506a056cab5b5eb0fcd59", "message": "\ud83d\udc3a", "committedDate": "2020-10-30T15:29:27Z", "type": "commit"}, {"oid": "e8122cb63e4f164dfa4644753182fbaa8364acf8", "url": "https://github.com/ionic-team/capacitor/commit/e8122cb63e4f164dfa4644753182fbaa8364acf8", "message": "\ud83c\udf7f", "committedDate": "2020-10-30T16:07:29Z", "type": "commit"}, {"oid": "f27bce3eed03d0ec1dfccc3c72a3a923cc322f24", "url": "https://github.com/ionic-team/capacitor/commit/f27bce3eed03d0ec1dfccc3c72a3a923cc322f24", "message": "\ud83d\ude96", "committedDate": "2020-10-30T16:31:26Z", "type": "commit"}, {"oid": "f7f0807e70e99c08fa2efeb180ec27845f345bf6", "url": "https://github.com/ionic-team/capacitor/commit/f7f0807e70e99c08fa2efeb180ec27845f345bf6", "message": "\ud83c\udf7b", "committedDate": "2020-10-30T17:05:08Z", "type": "commit"}, {"oid": "bca7bc27b635cfc2f77867f124ec0615ca8c933a", "url": "https://github.com/ionic-team/capacitor/commit/bca7bc27b635cfc2f77867f124ec0615ca8c933a", "message": "\u26f7", "committedDate": "2020-10-30T18:29:59Z", "type": "commit"}, {"oid": "fb1687c5bc96c5d7c4da1446f30b069ad03a9833", "url": "https://github.com/ionic-team/capacitor/commit/fb1687c5bc96c5d7c4da1446f30b069ad03a9833", "message": "\ud83c\udf5e", "committedDate": "2020-10-30T18:44:04Z", "type": "commit"}, {"oid": "bada0f9f8296fae81ee221a9e83c1ffefa54423c", "url": "https://github.com/ionic-team/capacitor/commit/bada0f9f8296fae81ee221a9e83c1ffefa54423c", "message": "\ud83d\udc0f", "committedDate": "2020-10-30T18:49:32Z", "type": "commit"}, {"oid": "c9541619493ad3034903a3db274a10e6148196da", "url": "https://github.com/ionic-team/capacitor/commit/c9541619493ad3034903a3db274a10e6148196da", "message": "\ud83d\udd4a", "committedDate": "2020-10-30T18:53:50Z", "type": "commit"}, {"oid": "a1ffd6295ce9af204ddc015cf976aed40eb762c3", "url": "https://github.com/ionic-team/capacitor/commit/a1ffd6295ce9af204ddc015cf976aed40eb762c3", "message": "\ud83c\udf0d", "committedDate": "2020-10-30T19:18:36Z", "type": "commit"}, {"oid": "9078918ccb542d12267f378926ef33f4e8dc5a17", "url": "https://github.com/ionic-team/capacitor/commit/9078918ccb542d12267f378926ef33f4e8dc5a17", "message": "\ud83d\udc1f", "committedDate": "2020-10-30T19:30:05Z", "type": "commit"}, {"oid": "57301e3b82d9351d7d7befd5522e8eddb55dc8e7", "url": "https://github.com/ionic-team/capacitor/commit/57301e3b82d9351d7d7befd5522e8eddb55dc8e7", "message": "\ud83d\ude92", "committedDate": "2020-11-03T20:45:00Z", "type": "commit"}, {"oid": "5166910075fdd737bbcefb8d5d11d2fc593fb4b0", "url": "https://github.com/ionic-team/capacitor/commit/5166910075fdd737bbcefb8d5d11d2fc593fb4b0", "message": "\ud83c\udf68", "committedDate": "2020-11-04T16:12:13Z", "type": "commit"}, {"oid": "f06f8ad57c276ad54742a12383b9fdfcfc182b0b", "url": "https://github.com/ionic-team/capacitor/commit/f06f8ad57c276ad54742a12383b9fdfcfc182b0b", "message": "\ud83c\udf75", "committedDate": "2020-11-04T22:43:14Z", "type": "commit"}, {"oid": "7575d7655fddff18cb3e399c5a6435dee406ffe8", "url": "https://github.com/ionic-team/capacitor/commit/7575d7655fddff18cb3e399c5a6435dee406ffe8", "message": "\ud83c\udfbe", "committedDate": "2020-11-04T22:58:51Z", "type": "commit"}, {"oid": "f4680588ccb658e2c10e410270fc04af0c79df0f", "url": "https://github.com/ionic-team/capacitor/commit/f4680588ccb658e2c10e410270fc04af0c79df0f", "message": "\ud83c\udf81", "committedDate": "2020-11-04T23:13:28Z", "type": "commit"}, {"oid": "b1d78474b4ef05b9307c7c5469554a6abf9d1308", "url": "https://github.com/ionic-team/capacitor/commit/b1d78474b4ef05b9307c7c5469554a6abf9d1308", "message": "\ud83d\udc20", "committedDate": "2020-11-05T04:13:48Z", "type": "commit"}, {"oid": "58ea9ae6c27e40e844c8557608974d279a1e6db5", "url": "https://github.com/ionic-team/capacitor/commit/58ea9ae6c27e40e844c8557608974d279a1e6db5", "message": "Merge branch 'main' into runtime-refactor", "committedDate": "2020-11-05T04:21:29Z", "type": "commit"}, {"oid": "16e1aa518ae231efd36f5cc9901b7d005f30d75a", "url": "https://github.com/ionic-team/capacitor/commit/16e1aa518ae231efd36f5cc9901b7d005f30d75a", "message": "\ud83d\udd2c", "committedDate": "2020-11-05T04:21:45Z", "type": "commit"}, {"oid": "43c5e9ea68e7c0ae2af75d4b22c3cbc0ec434258", "url": "https://github.com/ionic-team/capacitor/commit/43c5e9ea68e7c0ae2af75d4b22c3cbc0ec434258", "message": "\ud83d\udc12", "committedDate": "2020-11-05T04:40:37Z", "type": "commit"}, {"oid": "1a0db7d02ac3f400a9bd61711c460fd9d2576728", "url": "https://github.com/ionic-team/capacitor/commit/1a0db7d02ac3f400a9bd61711c460fd9d2576728", "message": "\ud83d\udef0", "committedDate": "2020-11-05T16:10:08Z", "type": "commit"}, {"oid": "621758407f35564a278ff636886c4ae112ac422e", "url": "https://github.com/ionic-team/capacitor/commit/621758407f35564a278ff636886c4ae112ac422e", "message": "\ud83d\udca5", "committedDate": "2020-11-05T16:23:12Z", "type": "commit"}, {"oid": "c306ef4ca52e132a7ccd8706ca0999b0dcc56606", "url": "https://github.com/ionic-team/capacitor/commit/c306ef4ca52e132a7ccd8706ca0999b0dcc56606", "message": "\ud83c\udf6f", "committedDate": "2020-11-05T16:36:30Z", "type": "commit"}, {"oid": "4de1b09c079a715d9964d645faab12034002bc20", "url": "https://github.com/ionic-team/capacitor/commit/4de1b09c079a715d9964d645faab12034002bc20", "message": "\ud83c\udfcf", "committedDate": "2020-11-05T19:16:31Z", "type": "commit"}, {"oid": "1ba1dbd37fecd6cd47dd717c934d48b17e637a66", "url": "https://github.com/ionic-team/capacitor/commit/1ba1dbd37fecd6cd47dd717c934d48b17e637a66", "message": "Merge branch 'main' into runtime-refactor", "committedDate": "2020-11-05T19:31:43Z", "type": "commit"}, {"oid": "923c0e2d72bc81181c670ba91d092eef17c3600c", "url": "https://github.com/ionic-team/capacitor/commit/923c0e2d72bc81181c670ba91d092eef17c3600c", "message": "\u26f8", "committedDate": "2020-11-05T21:44:49Z", "type": "commit"}, {"oid": "ad12f3c7b6bcee2c23cbc0ff04bb0a2f4d02a9bf", "url": "https://github.com/ionic-team/capacitor/commit/ad12f3c7b6bcee2c23cbc0ff04bb0a2f4d02a9bf", "message": "\ud83c\udfb9", "committedDate": "2020-11-06T18:55:43Z", "type": "commit"}, {"oid": "a9f06900d0399de0c4795bc8f1ae9387121826d8", "url": "https://github.com/ionic-team/capacitor/commit/a9f06900d0399de0c4795bc8f1ae9387121826d8", "message": "\u26c4\ufe0f", "committedDate": "2020-11-06T19:36:38Z", "type": "commit"}, {"oid": "1e7746fbb5e600183d97f3a4d404723092770803", "url": "https://github.com/ionic-team/capacitor/commit/1e7746fbb5e600183d97f3a4d404723092770803", "message": "Merge branch 'main' into runtime-refactor", "committedDate": "2020-11-09T17:13:44Z", "type": "commit"}, {"oid": "3892d115894a5e2fd63e25ac10c90e7ab835c524", "url": "https://github.com/ionic-team/capacitor/commit/3892d115894a5e2fd63e25ac10c90e7ab835c524", "message": "\ud83c\udf08", "committedDate": "2020-11-09T18:01:41Z", "type": "commit"}, {"oid": "84f6eec965520d917b99293ce653c96ac47641b6", "url": "https://github.com/ionic-team/capacitor/commit/84f6eec965520d917b99293ce653c96ac47641b6", "message": "\ud83c\udf4e", "committedDate": "2020-11-10T11:33:39Z", "type": "commit"}, {"oid": "5220934c98c529eca190d00d11d9342559a8e43f", "url": "https://github.com/ionic-team/capacitor/commit/5220934c98c529eca190d00d11d9342559a8e43f", "message": "chore: update capacitor site url", "committedDate": "2020-11-10T14:34:07Z", "type": "commit"}, {"oid": "e7d458f74f0667171c39281d75948c622292ffad", "url": "https://github.com/ionic-team/capacitor/commit/e7d458f74f0667171c39281d75948c622292ffad", "message": "chore: set platform package publish files", "committedDate": "2020-11-10T14:40:42Z", "type": "commit"}, {"oid": "0a6e21e3e4cdfb3937fc41612a6f5048479e1c12", "url": "https://github.com/ionic-team/capacitor/commit/0a6e21e3e4cdfb3937fc41612a6f5048479e1c12", "message": "Merge branch 'pkg-files' into runtime-refactor", "committedDate": "2020-11-10T14:45:14Z", "type": "commit"}, {"oid": "010a4147c0cf4d546ac2b40b6495eb10a7ec5a60", "url": "https://github.com/ionic-team/capacitor/commit/010a4147c0cf4d546ac2b40b6495eb10a7ec5a60", "message": "Merge branch 'site-url' into runtime-refactor", "committedDate": "2020-11-10T14:45:27Z", "type": "commit"}, {"oid": "8001a34e560e08d2d41299c4d3d9a039298851f5", "url": "https://github.com/ionic-team/capacitor/commit/8001a34e560e08d2d41299c4d3d9a039298851f5", "message": "feat(cli): bundle cli for faster startup, less deps", "committedDate": "2020-11-10T15:31:08Z", "type": "commit"}, {"oid": "45ed4a43bb259c49621bc25d3a8b110c05645ae5", "url": "https://github.com/ionic-team/capacitor/commit/45ed4a43bb259c49621bc25d3a8b110c05645ae5", "message": "writeBundle", "committedDate": "2020-11-10T15:40:23Z", "type": "commit"}, {"oid": "526121fb613bd75ad861d1d57dada79bf4794fb2", "url": "https://github.com/ionic-team/capacitor/commit/526121fb613bd75ad861d1d57dada79bf4794fb2", "message": "Merge branch 'cli-bundle' into runtime-refactor", "committedDate": "2020-11-10T16:26:01Z", "type": "commit"}, {"oid": "5bac26717541a2b0664cbcb70ebd7ba34fa83900", "url": "https://github.com/ionic-team/capacitor/commit/5bac26717541a2b0664cbcb70ebd7ba34fa83900", "message": "Merge branch 'main' into runtime-refactor", "committedDate": "2020-11-10T19:18:28Z", "type": "commit"}, {"oid": "9b9270436e47de7196ac43999414aade0d607fe9", "url": "https://github.com/ionic-team/capacitor/commit/9b9270436e47de7196ac43999414aade0d607fe9", "message": "\ud83d\udc15", "committedDate": "2020-11-10T21:12:06Z", "type": "commit"}, {"oid": "cf4d7644846e8807eaa0b284db3d1032681be3ce", "url": "https://github.com/ionic-team/capacitor/commit/cf4d7644846e8807eaa0b284db3d1032681be3ce", "message": "\ud83d\udd14", "committedDate": "2020-11-10T21:22:32Z", "type": "commit"}, {"oid": "f522ae506f51c0c05fbed5c88f39114dd04e8975", "url": "https://github.com/ionic-team/capacitor/commit/f522ae506f51c0c05fbed5c88f39114dd04e8975", "message": "prettierignore types dir", "committedDate": "2020-11-11T19:39:06Z", "type": "commit"}, {"oid": "7b65c94b06d73b79783cc91abad792f3283695e6", "url": "https://github.com/ionic-team/capacitor/commit/7b65c94b06d73b79783cc91abad792f3283695e6", "message": "fix lint", "committedDate": "2020-11-11T19:40:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTU1NDkwNQ==", "url": "https://github.com/ionic-team/capacitor/pull/3748#discussion_r521554905", "bodyText": "We can take this opportunity to switch to types (the documented way) vs typings.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              \"typings\": \"types/index.d.ts\",\n          \n          \n            \n              \"types\": \"types/index.d.ts\",", "author": "imhoffd", "createdAt": "2020-11-11T18:25:17Z", "path": "core/package.json", "diffHunk": "@@ -7,36 +7,33 @@\n   \"license\": \"MIT\",\n   \"files\": [\n     \"dist/\",\n-    \"cordova.js\",\n-    \"native-bridge.js\"\n+    \"types/\",\n+    \"cordova.js\"\n   ],\n   \"scripts\": {\n-    \"docs\": \"./node_modules/.bin/typedoc --exclude **/__test__/*.ts --json dist/docs.json --mode modules src/core-plugin-definitions.ts && node scripts/docs.js\",\n-    \"build\": \"npm run clean && npm run transpile && npm run rollup && npm run minify\",\n+    \"build\": \"npm run clean && npm run transpile && npm run rollup\",\n     \"clean\": \"rimraf dist\",\n-    \"minify\": \"terser --mangle --compress --source-map \\\"content='dist/capacitor.js.map',url='capacitor.js.map'\\\" --comments '/^/*!/' --output dist/capacitor.js dist/capacitor.js\",\n     \"prepublishOnly\": \"npm run build\",\n     \"rollup\": \"rollup --config rollup.config.js\",\n     \"transpile\": \"tsc\",\n-    \"test\": \"jest\"\n+    \"test\": \"jest\",\n+    \"test.watch\": \"jest --watchAll\",\n+    \"test.treeshaking\": \"node src/tests/build-treeshaking.js\"\n   },\n   \"main\": \"dist/index.js\",\n-  \"module\": \"dist/esm/index.js\",\n+  \"typings\": \"types/index.d.ts\",", "originalCommit": "cf4d7644846e8807eaa0b284db3d1032681be3ce", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTYyMDEwMw==", "url": "https://github.com/ionic-team/capacitor/pull/3748#discussion_r521620103", "bodyText": "yup makes sense", "author": "adamdbradley", "createdAt": "2020-11-11T20:29:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTU1NDkwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTU1NTg5MQ==", "url": "https://github.com/ionic-team/capacitor/pull/3748#discussion_r521555891", "bodyText": "We're using colons in other places. I don't care which we use, but we should be consistent\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                \"test.watch\": \"jest --watchAll\",\n          \n          \n            \n                \"test.treeshaking\": \"node src/tests/build-treeshaking.js\"\n          \n          \n            \n                \"test:watch\": \"jest --watchAll\",\n          \n          \n            \n                \"test:treeshaking\": \"node src/tests/build-treeshaking.js\"", "author": "imhoffd", "createdAt": "2020-11-11T18:27:05Z", "path": "core/package.json", "diffHunk": "@@ -7,36 +7,33 @@\n   \"license\": \"MIT\",\n   \"files\": [\n     \"dist/\",\n-    \"cordova.js\",\n-    \"native-bridge.js\"\n+    \"types/\",\n+    \"cordova.js\"\n   ],\n   \"scripts\": {\n-    \"docs\": \"./node_modules/.bin/typedoc --exclude **/__test__/*.ts --json dist/docs.json --mode modules src/core-plugin-definitions.ts && node scripts/docs.js\",\n-    \"build\": \"npm run clean && npm run transpile && npm run rollup && npm run minify\",\n+    \"build\": \"npm run clean && npm run transpile && npm run rollup\",\n     \"clean\": \"rimraf dist\",\n-    \"minify\": \"terser --mangle --compress --source-map \\\"content='dist/capacitor.js.map',url='capacitor.js.map'\\\" --comments '/^/*!/' --output dist/capacitor.js dist/capacitor.js\",\n     \"prepublishOnly\": \"npm run build\",\n     \"rollup\": \"rollup --config rollup.config.js\",\n     \"transpile\": \"tsc\",\n-    \"test\": \"jest\"\n+    \"test\": \"jest\",\n+    \"test.watch\": \"jest --watchAll\",\n+    \"test.treeshaking\": \"node src/tests/build-treeshaking.js\"", "originalCommit": "cf4d7644846e8807eaa0b284db3d1032681be3ce", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTYwNzQwOA==", "url": "https://github.com/ionic-team/capacitor/pull/3748#discussion_r521607408", "bodyText": "Dots are easier to type. No shift key required.", "author": "aparajita", "createdAt": "2020-11-11T20:04:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTU1NTg5MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTYxOTY2NA==", "url": "https://github.com/ionic-team/capacitor/pull/3748#discussion_r521619664", "bodyText": "Yeah, I'd agree with @aparajita and like using . cuz it's easier to type", "author": "adamdbradley", "createdAt": "2020-11-11T20:29:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTU1NTg5MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTYzMzYzNg==", "url": "https://github.com/ionic-team/capacitor/pull/3748#discussion_r521633636", "bodyText": "It's also more idiomatic for JS/TS. Not sure how using colons in script names became a thing.", "author": "aparajita", "createdAt": "2020-11-11T20:56:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTU1NTg5MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTcxNTEwNQ==", "url": "https://github.com/ionic-team/capacitor/pull/3748#discussion_r521715105", "bodyText": "Then it needs to change everywhere else.", "author": "imhoffd", "createdAt": "2020-11-11T23:59:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTU1NTg5MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTU1NjMyMg==", "url": "https://github.com/ionic-team/capacitor/pull/3748#discussion_r521556322", "bodyText": "What's the reason for removing this? If it's annoying while working in PRs, you can do git commit -n for \"no verify\"", "author": "imhoffd", "createdAt": "2020-11-11T18:27:56Z", "path": "package.json", "diffHunk": "@@ -9,11 +9,6 @@\n     \"swiftlint\": \"node-swiftlint\",\n     \"postinstall\": \"lerna bootstrap\"\n   },\n-  \"husky\": {\n-    \"hooks\": {\n-      \"pre-commit\": \"npm run lint\"\n-    }\n-  },", "originalCommit": "cf4d7644846e8807eaa0b284db3d1032681be3ce", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTYxOTkzMA==", "url": "https://github.com/ionic-team/capacitor/pull/3748#discussion_r521619930", "bodyText": "sorry, forgot to put it back. Didn't remove on purpose", "author": "adamdbradley", "createdAt": "2020-11-11T20:29:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTU1NjMyMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTU1NzMzNw==", "url": "https://github.com/ionic-team/capacitor/pull/3748#discussion_r521557337", "bodyText": "This may need updating", "author": "imhoffd", "createdAt": "2020-11-11T18:29:49Z", "path": "core/src/tests/fixtures/network-plugin/index.ts", "diffHunk": "@@ -0,0 +1,11 @@\n+import { registerPlugin, NativePlugin } from '../../../index';\n+\n+import type { NetworkPlugin } from './definitions';\n+\n+const Network = registerPlugin<NetworkPlugin>('Network', {\n+  android: NativePlugin,\n+  ios: NativePlugin,", "originalCommit": "cf4d7644846e8807eaa0b284db3d1032681be3ce", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTYyMjMyMA==", "url": "https://github.com/ionic-team/capacitor/pull/3748#discussion_r521622320", "bodyText": "Good catch. Those files were left over and no longer being used. Removing...", "author": "adamdbradley", "createdAt": "2020-11-11T20:34:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTU1NzMzNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTYwMTU3Nw==", "url": "https://github.com/ionic-team/capacitor/pull/3748#discussion_r521601577", "bodyText": "I don't think we can deprecate this because this is how app developers would import their own in-app plugins.\njava:\n@CapacitorPlugin(name = \"CoolThing\")\npublic class ...\njs:\nimport { Plugins } from '@capacitor/core';\nconst { CoolThing } = Plugins;", "author": "imhoffd", "createdAt": "2020-11-11T19:53:26Z", "path": "core/src/global.ts", "diffHunk": "@@ -1,25 +1,38 @@\n-import type { Capacitor as _Capacitor } from './definitions';\n-import { CapacitorWeb } from './web-runtime';\n+import { legacyRegisterWebPlugin } from './legacy/legacy-web-plugin-merge';\n+import { initCapacitorGlobal } from './runtime';\n+import type { WebPlugin } from './web-plugin';\n \n-// Create our default Capacitor instance, which will be\n-// overridden on native platforms\n-const Capacitor = ((globalThis: any): _Capacitor => {\n-  // Create a new CapacitorWeb instance if one doesn't already exist on globalThis\n-  // Ensure the global is assigned the same Capacitor instance,\n-  // then export Capacitor so it can be imported in other modules\n-  return (globalThis.Capacitor = globalThis.Capacitor || new CapacitorWeb());\n-})(\n-  // figure out the current globalThis, such as \"window\", \"self\" or \"global\"\n-  // ensure errors are not thrown in an node SSR environment or web worker\n-  typeof self !== 'undefined'\n+export const Capacitor = /*#__PURE__*/ initCapacitorGlobal(\n+  (typeof globalThis !== 'undefined'\n+    ? globalThis\n+    : typeof self !== 'undefined'\n     ? self\n     : typeof window !== 'undefined'\n     ? window\n     : typeof global !== 'undefined'\n     ? global\n-    : {},\n+    : {}) as any,\n );\n \n-const Plugins = Capacitor.Plugins;\n+export const registerPlugin = Capacitor.registerPlugin;\n \n-export { Capacitor, Plugins };\n+/**\n+ * @deprecated Provided for backwards compatibility for Capacitor v2 plugins.\n+ * Capacitor v3 plugins should import the plugin directly. This \"Plugins\"\n+ * export is deprecated in v3, and will be removed in v4.\n+ */\n+export const Plugins = Capacitor.Plugins;", "originalCommit": "cf4d7644846e8807eaa0b284db3d1032681be3ce", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "8d1380bddf2e4fe856ad70faad93365c12bf8a10", "url": "https://github.com/ionic-team/capacitor/commit/8d1380bddf2e4fe856ad70faad93365c12bf8a10", "message": "Update core/package.json\n\nCo-authored-by: Dan Imhoff <dwieeb@gmail.com>", "committedDate": "2020-11-11T20:31:08Z", "type": "commit"}, {"oid": "d430c1175061c9a73421c75d77fdd6d124b5894a", "url": "https://github.com/ionic-team/capacitor/commit/d430c1175061c9a73421c75d77fdd6d124b5894a", "message": "husky", "committedDate": "2020-11-11T20:32:44Z", "type": "commit"}, {"oid": "034d0952c12c7351f3ceeb5688ff2de592bb68da", "url": "https://github.com/ionic-team/capacitor/commit/034d0952c12c7351f3ceeb5688ff2de592bb68da", "message": "remove unused test fixtures", "committedDate": "2020-11-11T20:34:26Z", "type": "commit"}, {"oid": "a11d5c4742cfe3ed1befc1b7c64fa517a886ec9d", "url": "https://github.com/ionic-team/capacitor/commit/a11d5c4742cfe3ed1befc1b7c64fa517a886ec9d", "message": "redundant types", "committedDate": "2020-11-11T23:57:59Z", "type": "commit"}, {"oid": "fa52c7178f6eca127d75e1d0ea4bef6dd45dc6b1", "url": "https://github.com/ionic-team/capacitor/commit/fa52c7178f6eca127d75e1d0ea4bef6dd45dc6b1", "message": "Merge remote-tracking branch 'origin/main' into runtime-refactor\n\nConflicts:\n\tios/Capacitor/Capacitor/CAPBridge.swift\n\tios/Capacitor/Capacitor/JSExport.swift", "committedDate": "2020-11-12T00:03:10Z", "type": "commit"}, {"oid": "2d2f78dd7e0aa86b28236784c43c5936197087b7", "url": "https://github.com/ionic-team/capacitor/commit/2d2f78dd7e0aa86b28236784c43c5936197087b7", "message": "typo", "committedDate": "2020-11-12T00:12:58Z", "type": "commit"}, {"oid": "b7f80fb0324c1c339c1d132c5f8f6cdb3a83e625", "url": "https://github.com/ionic-team/capacitor/commit/b7f80fb0324c1c339c1d132c5f8f6cdb3a83e625", "message": "no bundle", "committedDate": "2020-11-12T00:18:44Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTczMzM0Nw==", "url": "https://github.com/ionic-team/capacitor/pull/3748#discussion_r521733347", "bodyText": "Is this a typo? I'm pretty sure this line does nothing.", "author": "imhoffd", "createdAt": "2020-11-12T00:31:42Z", "path": "core/src/legacy/legacy-handlers.ts", "diffHunk": "@@ -0,0 +1,43 @@\n+import type {\n+  CapacitorInstance,\n+  WindowCapacitor,\n+} from '../definitions-internal';\n+import { noop } from '../util';\n+\n+export const initLegacyHandlers = (\n+  win: WindowCapacitor,\n+  cap: CapacitorInstance,\n+): void => {\n+  // define cordova if it's not there already\n+  win.cordova = win.cordova || {};\n+\n+  const doc = win.document;\n+  const nav = win.navigator;\n+\n+  if (nav) {\n+    nav.app = nav.app || {};\n+    nav.app.exitApp = () => {\n+      cap.nativeCallback('App', 'exitApp', {});\n+    };\n+  }\n+\n+  if (doc) {\n+    const docAddEventListener = doc.addEventListener;\n+    doc.addEventListener = (...args: any[]) => {\n+      const eventName = args[0];\n+      const handler = args[1];\n+      if (eventName === 'deviceready' && handler) {\n+        Promise.resolve(handler);", "originalCommit": "b7f80fb0324c1c339c1d132c5f8f6cdb3a83e625", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzQzOTE4MQ==", "url": "https://github.com/ionic-team/capacitor/pull/3748#discussion_r523439181", "bodyText": "yup, fixed thanks da7b796", "author": "adamdbradley", "createdAt": "2020-11-14T16:51:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTczMzM0Nw=="}], "type": "inlineReview"}, {"oid": "da7b796e09d20294d7dc717b72f238d912b960e2", "url": "https://github.com/ionic-team/capacitor/commit/da7b796e09d20294d7dc717b72f238d912b960e2", "message": "\ud83d\udc29", "committedDate": "2020-11-14T16:50:15Z", "type": "commit"}, {"oid": "3a256e8bde01c5b7b2513116c78e030e9342b0d7", "url": "https://github.com/ionic-team/capacitor/commit/3a256e8bde01c5b7b2513116c78e030e9342b0d7", "message": "Merge branch 'main' into runtime-refactor", "committedDate": "2020-11-14T22:53:02Z", "type": "commit"}, {"oid": "bd2e4917e68b3a1ef20ce52f8e162b02da28c43b", "url": "https://github.com/ionic-team/capacitor/commit/bd2e4917e68b3a1ef20ce52f8e162b02da28c43b", "message": "always implement nativeCallback/nativePromise", "committedDate": "2020-11-16T13:10:46Z", "type": "commit"}, {"oid": "b7cd023e6f6cb0e5ddae02234bfece67cf5d685c", "url": "https://github.com/ionic-team/capacitor/commit/b7cd023e6f6cb0e5ddae02234bfece67cf5d685c", "message": "Merge branch 'main' into runtime-refactor", "committedDate": "2020-11-21T21:13:20Z", "type": "commit"}, {"oid": "fbc4bc4682ad33061ce7eb3c84dbf6e9c19063ff", "url": "https://github.com/ionic-team/capacitor/commit/fbc4bc4682ad33061ce7eb3c84dbf6e9c19063ff", "message": "Merge branch 'main' into runtime-refactor", "committedDate": "2020-11-24T18:25:51Z", "type": "commit"}]}