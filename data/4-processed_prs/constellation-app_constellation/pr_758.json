{"pr_number": 758, "pr_title": "Feature/issue364 improve uncollide performance", "pr_createdAt": "2020-08-04T02:20:53Z", "pr_url": "https://github.com/constellation-app/constellation/pull/758", "timeline": [{"oid": "28c1482933b75f3ce863a91f4fd87c59b0b1359d", "url": "https://github.com/constellation-app/constellation/commit/28c1482933b75f3ce863a91f4fd87c59b0b1359d", "message": ":fire: Deleting vestigial classes", "committedDate": "2020-08-04T00:57:25Z", "type": "commit"}, {"oid": "9eac2396fe68dc1162380d29c8cf09732c6f50ac", "url": "https://github.com/constellation-app/constellation/commit/9eac2396fe68dc1162380d29c8cf09732c6f50ac", "message": ":arrow_up: Adding AssertJ dependency.\nAssertJ is a library that provides more powerful assertion test than\nthose included in junit or testNG. In particular it allows for the\ncomarison of class instances without a bespoke equals method.", "committedDate": "2020-08-04T01:02:37Z", "type": "commit"}, {"oid": "ac895375fdacaa06f561aa9852627371d5ed96f1", "url": "https://github.com/constellation-app/constellation/commit/ac895375fdacaa06f561aa9852627371d5ed96f1", "message": ":art: Create Dimensions enumerator\nAllows for the restriction of the number of dimensions to 2 or 3 / \nthose implemented.", "committedDate": "2020-08-04T01:05:09Z", "type": "commit"}, {"oid": "35c5631a5f6ab025274f8d3cf609f1408ef1c955", "url": "https://github.com/constellation-app/constellation/commit/35c5631a5f6ab025274f8d3cf609f1408ef1c955", "message": ":art: Create ABstract Bounding Box\nCreated an AbstractBoundingBox class which bounding boxes of all \ndimensions must extend. Reduces code duplication and when combined\nwith the factory allows for further code reduction.", "committedDate": "2020-08-04T01:07:42Z", "type": "commit"}, {"oid": "bbc0fce7794952cd51511996488dd8ad5f18c6c9", "url": "https://github.com/constellation-app/constellation/commit/bbc0fce7794952cd51511996488dd8ad5f18c6c9", "message": ":art: Implement 2d and 3d bounding boxes.\nThese boxes store details of the used boundaries of the graph. They\nalso allow for the selection of subboxes of the graph based on there\nbeing 2^dimensions equal size cuboid boxes.", "committedDate": "2020-08-04T01:09:34Z", "type": "commit"}, {"oid": "ba88a6f1bad922614e5654844d7b9d4839823c27", "url": "https://github.com/constellation-app/constellation/commit/ba88a6f1bad922614e5654844d7b9d4839823c27", "message": ":art: Implement AbstractTree\nCreated an abstract tree to reduce code duplication between trees of\ndifferent dimensions. TreeFactory allows for even further reductions\nin code duplication and the abstraction of the number of dimensions\naway from some code.", "committedDate": "2020-08-04T01:11:17Z", "type": "commit"}, {"oid": "77740aacf95eb13e681ebc33a2fc4180efc34a51", "url": "https://github.com/constellation-app/constellation/commit/77740aacf95eb13e681ebc33a2fc4180efc34a51", "message": ":art: Implement 2D and 3D trees.\nThese tress are designed to split the graph into 2^dimensions equal\nsized areas for faster collision detection. Nodes can only collide if\nthey are contained within the same subsection of the graph.\nThis split can occur multiple times based on the set depth or maximum\nnumber of object in one area.", "committedDate": "2020-08-04T01:12:56Z", "type": "commit"}, {"oid": "2fee8e23f8487ad805a6d59ee26c513b66c088d8", "url": "https://github.com/constellation-app/constellation/commit/2fee8e23f8487ad805a6d59ee26c513b66c088d8", "message": ":art: :racehorse: Created new uncollidePlugin\nThe new uncollide plugin is designed to be faster and maintain more\nof the graphs structure than the original uncollide plugin.\nThe back end of the plugin has been redesigned and the plugin uses a\nnew algorithm.\nThe new algorithm separates \"twin\" nodes to a minimum distance \n(currently set by the user) and then expands the graph until there are\nno collisions. This allows for a trade off between node density and \nspeed/ maintaining graph structure.\nThis will originally be an experimental plugin to allow for feedback\nand potential changes to the behaviour and arguments exposed.", "committedDate": "2020-08-04T01:17:43Z", "type": "commit"}, {"oid": "17d63f5f76f89d42fc415357e62b80b767c6baf0", "url": "https://github.com/constellation-app/constellation/commit/17d63f5f76f89d42fc415357e62b80b767c6baf0", "message": ":art: Renamed two &three in enum to TWO & THREE respectively\nRenamed to match naming conventions.", "committedDate": "2020-08-04T01:42:59Z", "type": "commit"}, {"oid": "625a6ed79a3a88c429384ec453b255995e85dc61", "url": "https://github.com/constellation-app/constellation/commit/625a6ed79a3a88c429384ec453b255995e85dc61", "message": ":art: :bug: Renamed variables to avoid hiding other variables.\nRenamed to avoid using the same name.", "committedDate": "2020-08-04T01:49:31Z", "type": "commit"}, {"oid": "ee3f30e0d31f0ea0060318e73529319eb8b2882f", "url": "https://github.com/constellation-app/constellation/commit/ee3f30e0d31f0ea0060318e73529319eb8b2882f", "message": ":art: :bug: Added private constructor to override implicit public con.\nFrom SonarQube:\nUtility classes, which are collections of static members, are not meant to be instantiated. Even abstract utility classes, which can be extended, should not have public constructors.\n\nJava adds an implicit public constructor to every class which does not define at least one explicitly. Hence, at least one non-public constructor should be defined.", "committedDate": "2020-08-04T02:04:31Z", "type": "commit"}, {"oid": "e1ffe46a9cb35a867d5f32b4ca47b8ea193379cf", "url": "https://github.com/constellation-app/constellation/commit/e1ffe46a9cb35a867d5f32b4ca47b8ea193379cf", "message": ":art: :fire: Deleted unused code.", "committedDate": "2020-08-04T02:08:08Z", "type": "commit"}, {"oid": "2b9ba92035dba31b93ad31316fa7308da3307bdf", "url": "https://github.com/constellation-app/constellation/commit/2b9ba92035dba31b93ad31316fa7308da3307bdf", "message": ":art: Added constructor to hide implicit public constructor.\nFrom SonarQube:\nUtility classes, which are collections of static members, are not meant to be instantiated. Even abstract utility classes, which can be extended, should not have public constructors.\n\nJava adds an implicit public constructor to every class which does not define at least one explicitly. Hence, at least one non-public constructor should be defined.", "committedDate": "2020-08-04T02:09:58Z", "type": "commit"}, {"oid": "ec4d42f8b08d9be856c3c9397719cec2f81a8071", "url": "https://github.com/constellation-app/constellation/commit/ec4d42f8b08d9be856c3c9397719cec2f81a8071", "message": ":art: :fire: Removed unused code.", "committedDate": "2020-08-04T02:12:12Z", "type": "commit"}, {"oid": "d9fcf86c86f032307f17e3a927c44d9bf20a171f", "url": "https://github.com/constellation-app/constellation/commit/d9fcf86c86f032307f17e3a927c44d9bf20a171f", "message": ":art: Changed constructor to be private, public by mistake.", "committedDate": "2020-08-04T05:34:58Z", "type": "commit"}, {"oid": "d25a8be21f13a567a56a6a7a1334cb80e6aaf728", "url": "https://github.com/constellation-app/constellation/commit/d25a8be21f13a567a56a6a7a1334cb80e6aaf728", "message": ":art: Fixed minor code smells.", "committedDate": "2020-08-04T05:44:51Z", "type": "commit"}, {"oid": "0448bdcd8cdf525020a5720608eaeeb9b77dfe1a", "url": "https://github.com/constellation-app/constellation/commit/0448bdcd8cdf525020a5720608eaeeb9b77dfe1a", "message": ":art: Fixed minor code smells.", "committedDate": "2020-08-04T05:46:39Z", "type": "commit"}, {"oid": "340dcf482d59f10dd2ea157cfab7ea2fe4745ae1", "url": "https://github.com/constellation-app/constellation/commit/340dcf482d59f10dd2ea157cfab7ea2fe4745ae1", "message": ":art: Changed default value of max expansions to 20.\n20 is a reasonable number that works quite well on a large range of sizes.", "committedDate": "2020-08-04T06:05:41Z", "type": "commit"}, {"oid": "1b65ae017c6ae45330185ddf932e001e97e8e15b", "url": "https://github.com/constellation-app/constellation/commit/1b65ae017c6ae45330185ddf932e001e97e8e15b", "message": ":art: Combined nudge2D and nudge3D\nCombined the nudge2D and nudge3D methods into a single nudge method.\nThis reduces code duplication.\nAdded private nudge method to further reduce duplication.", "committedDate": "2020-08-04T22:22:31Z", "type": "commit"}, {"oid": "3788bcd93774ffdba821a1c1ae5ffdf213179676", "url": "https://github.com/constellation-app/constellation/commit/3788bcd93774ffdba821a1c1ae5ffdf213179676", "message": ":art: :White_check_mark: Improved uncollide tests.\nAdded another node to both uncollide arrangement tests so that the\nscenario where two nodes are in exactly the same location is handled.", "committedDate": "2020-08-04T22:23:51Z", "type": "commit"}, {"oid": "ebb594d638d0773bf72e8528d177451a39557507", "url": "https://github.com/constellation-app/constellation/commit/ebb594d638d0773bf72e8528d177451a39557507", "message": ":art: Changed all members of deltas==0 condition to delta = 0\nChanged the argument in an if statement from testing that every member\nof deltas is 0 to checking that the value delta is 0. These are\nfunctionally the same but this is much more readable.", "committedDate": "2020-08-04T22:26:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTA0ODk3MA==", "url": "https://github.com/constellation-app/constellation/pull/758#discussion_r465048970", "bodyText": "This sentence looks incomplete. Was there more you wanted to say here?", "author": "arcturus2", "createdAt": "2020-08-04T13:27:07Z", "path": "CoreArrangementPlugins/src/au/gov/asd/tac/constellation/plugins/arrangements/uncollide/experimental/AbstractTree.java", "diffHunk": "@@ -0,0 +1,236 @@\n+/*\n+ * Copyright 2010-2020 Australian Signals Directorate\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.constellation.plugins.arrangements.uncollide.experimental;\n+\n+import au.gov.asd.tac.constellation.graph.GraphElementType;\n+import au.gov.asd.tac.constellation.graph.GraphReadMethods;\n+import au.gov.asd.tac.constellation.graph.schema.visual.concept.VisualConcept;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * This class provides an abstract representation of a Tree designed to help\n+ * detect collisions quickly by dividing an X-dimensional space into 2^X\n+ * sub-spaces. The minimum value of X is 2.\n+ * \n+ * As constellation only", "originalCommit": "340dcf482d59f10dd2ea157cfab7ea2fe4745ae1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQwMTMzMg==", "url": "https://github.com/constellation-app/constellation/pull/758#discussion_r465401332", "bodyText": "Ahh the opposite, I didn't delete enough!", "author": "Nova-2119", "createdAt": "2020-08-05T00:22:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTA0ODk3MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTA1MDM0Ng==", "url": "https://github.com/constellation-app/constellation/pull/758#discussion_r465050346", "bodyText": "A minor comment but this paragraph tag is redundant", "author": "arcturus2", "createdAt": "2020-08-04T13:29:16Z", "path": "CoreArrangementPlugins/src/au/gov/asd/tac/constellation/plugins/arrangements/uncollide/experimental/BoundingBox2D.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright 2010-2020 Australian Signals Directorate\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.constellation.plugins.arrangements.uncollide.experimental;\n+\n+import au.gov.asd.tac.constellation.graph.GraphReadMethods;\n+\n+/**\n+ * This class is designed to provide a 2D bounding box for a graph.\n+ * <p>", "originalCommit": "340dcf482d59f10dd2ea157cfab7ea2fe4745ae1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQwMTM2Nw==", "url": "https://github.com/constellation-app/constellation/pull/758#discussion_r465401367", "bodyText": "Removed", "author": "Nova-2119", "createdAt": "2020-08-05T00:22:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTA1MDM0Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTA1MTA0Ng==", "url": "https://github.com/constellation-app/constellation/pull/758#discussion_r465051046", "bodyText": "You could add a <p> tag here.", "author": "arcturus2", "createdAt": "2020-08-04T13:30:17Z", "path": "CoreArrangementPlugins/src/au/gov/asd/tac/constellation/plugins/arrangements/uncollide/experimental/AbstractBoundingBox.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Copyright 2010-2020 Australian Signals Directorate\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.constellation.plugins.arrangements.uncollide.experimental;\n+\n+import au.gov.asd.tac.constellation.graph.GraphElementType;\n+import au.gov.asd.tac.constellation.graph.GraphReadMethods;\n+import au.gov.asd.tac.constellation.graph.schema.visual.concept.VisualConcept;\n+\n+/**\n+ * Provides an abstract representation os an N dimensional box that\n+ * represents the boundary of a graph.", "originalCommit": "340dcf482d59f10dd2ea157cfab7ea2fe4745ae1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQwMTQ0Mw==", "url": "https://github.com/constellation-app/constellation/pull/758#discussion_r465401443", "bodyText": "Done :)", "author": "Nova-2119", "createdAt": "2020-08-05T00:22:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTA1MTA0Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTA1NDc0NA==", "url": "https://github.com/constellation-app/constellation/pull/758#discussion_r465054744", "bodyText": "\ud83d\udc4d", "author": "arcturus2", "createdAt": "2020-08-04T13:36:16Z", "path": "CoreArrangementPlugins/src/au/gov/asd/tac/constellation/plugins/arrangements/uncollide/experimental/OctTree.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Copyright 2010-2020 Australian Signals Directorate\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.constellation.plugins.arrangements.uncollide.experimental;\n+\n+import au.gov.asd.tac.constellation.graph.GraphElementType;\n+import au.gov.asd.tac.constellation.graph.GraphReadMethods;\n+import au.gov.asd.tac.constellation.graph.schema.visual.concept.VisualConcept;\n+\n+/**\n+ * http://gamedev.tutsplus.com/tutorials/implementation/quick-tip-use-quadtrees-to-detect-likely-collisions-in-2d-space/", "originalCommit": "340dcf482d59f10dd2ea157cfab7ea2fe4745ae1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQwMTc4OA==", "url": "https://github.com/constellation-app/constellation/pull/758#discussion_r465401788", "bodyText": "Cant take credit for this, that link was from the original plugin, but its a really useful link right!", "author": "Nova-2119", "createdAt": "2020-08-05T00:23:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTA1NDc0NA=="}], "type": "inlineReview"}, {"oid": "b951c0f79caa30854f551cf04e7d34d6b321cb23", "url": "https://github.com/constellation-app/constellation/commit/b951c0f79caa30854f551cf04e7d34d6b321cb23", "message": ":art: :fire: Removed unused imports", "committedDate": "2020-08-04T22:30:36Z", "type": "commit"}, {"oid": "de24813d7ab3949e24ac0cda91f848fc280873ba", "url": "https://github.com/constellation-app/constellation/commit/de24813d7ab3949e24ac0cda91f848fc280873ba", "message": ":art: Improved comments.", "committedDate": "2020-08-04T22:49:54Z", "type": "commit"}, {"oid": "a919f2b27907960b785fd47f167d99cffaf814a5", "url": "https://github.com/constellation-app/constellation/commit/a919f2b27907960b785fd47f167d99cffaf814a5", "message": ":fire: Removed un-necessary toString methods.", "committedDate": "2020-08-04T22:50:26Z", "type": "commit"}, {"oid": "d34705426ecb4d66db907560bb1f0eb772a80496", "url": "https://github.com/constellation-app/constellation/commit/d34705426ecb4d66db907560bb1f0eb772a80496", "message": ":art: Renamed test to match test naming convention", "committedDate": "2020-08-04T22:55:43Z", "type": "commit"}, {"oid": "cd35a48b065897ea536950e12e8dcca23f6aa716", "url": "https://github.com/constellation-app/constellation/commit/cd35a48b065897ea536950e12e8dcca23f6aa716", "message": ":white_check_mark: testGetIndex not tests for all index values.\nThis will improve test coverage by reaching previously untested parts\nof an if statement.", "committedDate": "2020-08-04T22:56:49Z", "type": "commit"}, {"oid": "63c155822552ef79c403d95ad28914e443be998d", "url": "https://github.com/constellation-app/constellation/commit/63c155822552ef79c403d95ad28914e443be998d", "message": ":white_check_mark: testGetIndex now tests for all index values.\nThis will improve test coverage by reaching previously untested parts\nof an if statement.", "committedDate": "2020-08-04T23:11:43Z", "type": "commit"}, {"oid": "1f631385854531b5b86b9794bd908346c017792c", "url": "https://github.com/constellation-app/constellation/commit/1f631385854531b5b86b9794bd908346c017792c", "message": ":art: Made dimensions package private\nDimensions does not need to be public as no classes outside the package\nare expected top use it.\nIf other classes wanted to use it then this enum would need to be moved\nto a more central location.", "committedDate": "2020-08-04T23:16:33Z", "type": "commit"}, {"oid": "225372f0e3889ae4e1ff0494e30fd9a78308ae6c", "url": "https://github.com/constellation-app/constellation/commit/225372f0e3889ae4e1ff0494e30fd9a78308ae6c", "message": ":white_check_mark: Added test for Dimensions\nAdded test for the getOptions method in Dimensions.", "committedDate": "2020-08-04T23:33:16Z", "type": "commit"}, {"oid": "0742b2cff50e364e318679055e376b7b6555fd13", "url": "https://github.com/constellation-app/constellation/commit/0742b2cff50e364e318679055e376b7b6555fd13", "message": "Merge branch 'master' into feature/Issue364-ImproveUncollidePerformance", "committedDate": "2020-08-04T23:36:54Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQwNDY0NA==", "url": "https://github.com/constellation-app/constellation/pull/758#discussion_r465404644", "bodyText": "I'd add an access modifier here", "author": "antares1470", "createdAt": "2020-08-05T00:34:32Z", "path": "CoreArrangementPlugins/src/au/gov/asd/tac/constellation/plugins/arrangements/uncollide/experimental/AbstractBoundingBox.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Copyright 2010-2020 Australian Signals Directorate\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.constellation.plugins.arrangements.uncollide.experimental;\n+\n+import au.gov.asd.tac.constellation.graph.GraphElementType;\n+import au.gov.asd.tac.constellation.graph.GraphReadMethods;\n+import au.gov.asd.tac.constellation.graph.schema.visual.concept.VisualConcept;\n+\n+/**\n+ * Provides an abstract representation of an N dimensional box that\n+ * represents the boundary of a graph.\n+ * <p>\n+ * N must be 2 or greater.\n+ * \n+ * @author Nova\n+ */\n+public class AbstractBoundingBox {\n+    final float minX;\n+    final float minY;\n+    final float maxX;\n+    final float maxY;\n+    final float midX;\n+    final float midY;\n+\n+    /**\n+     * Generate a 2D bounding box for the graph.\n+     * <p>\n+     * This method creates a bounding box for the verticies of a given graph.\n+     * It does this by finding the extremes of both the X and Y axis.\n+     * These values are then made available as attributes of the class instance.\n+     * \n+     * @param wg  the graph\n+     * @return  instance of class BoundingBox2D based on input graph\n+     */\n+    AbstractBoundingBox(final GraphReadMethods wg) {", "originalCommit": "0742b2cff50e364e318679055e376b7b6555fd13", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQ0NDE0MA==", "url": "https://github.com/constellation-app/constellation/pull/758#discussion_r465444140", "bodyText": "Made protected.", "author": "Nova-2119", "createdAt": "2020-08-05T03:04:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQwNDY0NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQwNDk5MA==", "url": "https://github.com/constellation-app/constellation/pull/758#discussion_r465404990", "bodyText": "Add access modifier here", "author": "antares1470", "createdAt": "2020-08-05T00:35:42Z", "path": "CoreArrangementPlugins/src/au/gov/asd/tac/constellation/plugins/arrangements/uncollide/experimental/AbstractTree.java", "diffHunk": "@@ -0,0 +1,235 @@\n+/*\n+ * Copyright 2010-2020 Australian Signals Directorate\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.constellation.plugins.arrangements.uncollide.experimental;\n+\n+import au.gov.asd.tac.constellation.graph.GraphElementType;\n+import au.gov.asd.tac.constellation.graph.GraphReadMethods;\n+import au.gov.asd.tac.constellation.graph.schema.visual.concept.VisualConcept;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * This class provides an abstract representation of a Tree designed to help\n+ * detect collisions quickly by dividing an X-dimensional space into 2^X\n+ * sub-spaces. The minimum value of X is 2.\n+ * \n+ * @author Nova\n+ */\n+public abstract class AbstractTree {\n+    protected static final int MAX_OBJECTS = 50;\n+    protected static final int MAX_LEVELS = 4;\n+    \n+    protected final int xId; \n+    protected final int yId;\n+    protected final int rId;\n+    protected final GraphReadMethods wg;\n+\n+    protected final int level;\n+    protected AbstractBoundingBox box;\n+    protected List<Integer> objects;\n+    protected AbstractTree[] nodes;\n+    \n+    /**\n+     * Constructor creates QuadTree and inserts all nodes\n+     * \n+     * @param graph  The graph the QuadTree should be based on\n+     */\n+    AbstractTree(final GraphReadMethods graph, final Dimensions d) {", "originalCommit": "0742b2cff50e364e318679055e376b7b6555fd13", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQ0NDEyNA==", "url": "https://github.com/constellation-app/constellation/pull/758#discussion_r465444124", "bodyText": "Made protected", "author": "Nova-2119", "createdAt": "2020-08-05T03:03:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQwNDk5MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQwNTAxOQ==", "url": "https://github.com/constellation-app/constellation/pull/758#discussion_r465405019", "bodyText": "Add access modifier here", "author": "antares1470", "createdAt": "2020-08-05T00:35:49Z", "path": "CoreArrangementPlugins/src/au/gov/asd/tac/constellation/plugins/arrangements/uncollide/experimental/AbstractTree.java", "diffHunk": "@@ -0,0 +1,235 @@\n+/*\n+ * Copyright 2010-2020 Australian Signals Directorate\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.constellation.plugins.arrangements.uncollide.experimental;\n+\n+import au.gov.asd.tac.constellation.graph.GraphElementType;\n+import au.gov.asd.tac.constellation.graph.GraphReadMethods;\n+import au.gov.asd.tac.constellation.graph.schema.visual.concept.VisualConcept;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * This class provides an abstract representation of a Tree designed to help\n+ * detect collisions quickly by dividing an X-dimensional space into 2^X\n+ * sub-spaces. The minimum value of X is 2.\n+ * \n+ * @author Nova\n+ */\n+public abstract class AbstractTree {\n+    protected static final int MAX_OBJECTS = 50;\n+    protected static final int MAX_LEVELS = 4;\n+    \n+    protected final int xId; \n+    protected final int yId;\n+    protected final int rId;\n+    protected final GraphReadMethods wg;\n+\n+    protected final int level;\n+    protected AbstractBoundingBox box;\n+    protected List<Integer> objects;\n+    protected AbstractTree[] nodes;\n+    \n+    /**\n+     * Constructor creates QuadTree and inserts all nodes\n+     * \n+     * @param graph  The graph the QuadTree should be based on\n+     */\n+    AbstractTree(final GraphReadMethods graph, final Dimensions d) {\n+        this.level = 0;\n+        this.objects = new ArrayList<>();\n+        this.nodes = null;\n+        this.box = BoxFactory.create(graph, d);\n+        \n+        this.wg = graph;\n+        this.xId = wg.getAttribute(GraphElementType.VERTEX, VisualConcept.VertexAttribute.X.getName());\n+        this.yId = wg.getAttribute(GraphElementType.VERTEX, VisualConcept.VertexAttribute.Y.getName());\n+        this.rId = wg.getAttribute(GraphElementType.VERTEX, VisualConcept.VertexAttribute.NODE_RADIUS.getName());\n+    }\n+    \n+    /**\n+     * Create a subtree of the current tree\n+     * \n+     * @param parent\n+     * @param box \n+     */\n+    AbstractTree(AbstractTree parent, final AbstractBoundingBox box) {", "originalCommit": "0742b2cff50e364e318679055e376b7b6555fd13", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQyODI1NA==", "url": "https://github.com/constellation-app/constellation/pull/758#discussion_r465428254", "bodyText": "Made protected", "author": "Nova-2119", "createdAt": "2020-08-05T02:01:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQwNTAxOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQwNTEzNQ==", "url": "https://github.com/constellation-app/constellation/pull/758#discussion_r465405135", "bodyText": "index can be made final", "author": "antares1470", "createdAt": "2020-08-05T00:36:16Z", "path": "CoreArrangementPlugins/src/au/gov/asd/tac/constellation/plugins/arrangements/uncollide/experimental/AbstractTree.java", "diffHunk": "@@ -0,0 +1,235 @@\n+/*\n+ * Copyright 2010-2020 Australian Signals Directorate\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.constellation.plugins.arrangements.uncollide.experimental;\n+\n+import au.gov.asd.tac.constellation.graph.GraphElementType;\n+import au.gov.asd.tac.constellation.graph.GraphReadMethods;\n+import au.gov.asd.tac.constellation.graph.schema.visual.concept.VisualConcept;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * This class provides an abstract representation of a Tree designed to help\n+ * detect collisions quickly by dividing an X-dimensional space into 2^X\n+ * sub-spaces. The minimum value of X is 2.\n+ * \n+ * @author Nova\n+ */\n+public abstract class AbstractTree {\n+    protected static final int MAX_OBJECTS = 50;\n+    protected static final int MAX_LEVELS = 4;\n+    \n+    protected final int xId; \n+    protected final int yId;\n+    protected final int rId;\n+    protected final GraphReadMethods wg;\n+\n+    protected final int level;\n+    protected AbstractBoundingBox box;\n+    protected List<Integer> objects;\n+    protected AbstractTree[] nodes;\n+    \n+    /**\n+     * Constructor creates QuadTree and inserts all nodes\n+     * \n+     * @param graph  The graph the QuadTree should be based on\n+     */\n+    AbstractTree(final GraphReadMethods graph, final Dimensions d) {\n+        this.level = 0;\n+        this.objects = new ArrayList<>();\n+        this.nodes = null;\n+        this.box = BoxFactory.create(graph, d);\n+        \n+        this.wg = graph;\n+        this.xId = wg.getAttribute(GraphElementType.VERTEX, VisualConcept.VertexAttribute.X.getName());\n+        this.yId = wg.getAttribute(GraphElementType.VERTEX, VisualConcept.VertexAttribute.Y.getName());\n+        this.rId = wg.getAttribute(GraphElementType.VERTEX, VisualConcept.VertexAttribute.NODE_RADIUS.getName());\n+    }\n+    \n+    /**\n+     * Create a subtree of the current tree\n+     * \n+     * @param parent\n+     * @param box \n+     */\n+    AbstractTree(AbstractTree parent, final AbstractBoundingBox box) {\n+        this.level = parent.level + 1;\n+        this.box = box;\n+        objects = new ArrayList<>();\n+        nodes = null;   \n+        // Inherit parent values for graph based variables.\n+        wg = parent.wg;\n+        xId = parent.xId;\n+        yId = parent.yId;\n+        rId = parent.rId;\n+    }\n+    \n+    /*\n+     * Splits the node into 2^X subnodes.\n+     * <p>\n+     * Divide the node into 2^X equal parts and initialise the 2^X subnodes with the new bounds.\n+     */\n+    protected abstract void split();\n+    \n+    /*\n+     * Determine which node the object belongs to.\n+     * <p>\n+     * -1 means object cannot completely fit within a child node and is part of the parent node.\n+     * <p>\n+     * Determine where an object belongs in the quadtree by determining which node the object can fit into.\n+     */\n+    protected abstract int getIndex(final int vxId);\n+\n+    protected abstract double getDelta(final int vertex1, final int vertex2);\n+    \n+    protected abstract double getCollisionDistance(final int vertex1, final int vertex2);\n+    \n+    /*\n+     * Insert the object into the tree. If the node exceeds the capacity, it will split and add\n+     * objects that fit to their corresponding nodes.\n+     */\n+    private void insert(final int vxId) {\n+        if (nodes != null) { // if their are subnodes\n+            int index = getIndex(vxId); // find the correct subnode", "originalCommit": "0742b2cff50e364e318679055e376b7b6555fd13", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQ0NDA4MA==", "url": "https://github.com/constellation-app/constellation/pull/758#discussion_r465444080", "bodyText": "Done", "author": "Nova-2119", "createdAt": "2020-08-05T03:03:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQwNTEzNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQwNTI5OA==", "url": "https://github.com/constellation-app/constellation/pull/758#discussion_r465405298", "bodyText": "final", "author": "antares1470", "createdAt": "2020-08-05T00:36:51Z", "path": "CoreArrangementPlugins/src/au/gov/asd/tac/constellation/plugins/arrangements/uncollide/experimental/AbstractTree.java", "diffHunk": "@@ -0,0 +1,235 @@\n+/*\n+ * Copyright 2010-2020 Australian Signals Directorate\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.constellation.plugins.arrangements.uncollide.experimental;\n+\n+import au.gov.asd.tac.constellation.graph.GraphElementType;\n+import au.gov.asd.tac.constellation.graph.GraphReadMethods;\n+import au.gov.asd.tac.constellation.graph.schema.visual.concept.VisualConcept;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * This class provides an abstract representation of a Tree designed to help\n+ * detect collisions quickly by dividing an X-dimensional space into 2^X\n+ * sub-spaces. The minimum value of X is 2.\n+ * \n+ * @author Nova\n+ */\n+public abstract class AbstractTree {\n+    protected static final int MAX_OBJECTS = 50;\n+    protected static final int MAX_LEVELS = 4;\n+    \n+    protected final int xId; \n+    protected final int yId;\n+    protected final int rId;\n+    protected final GraphReadMethods wg;\n+\n+    protected final int level;\n+    protected AbstractBoundingBox box;\n+    protected List<Integer> objects;\n+    protected AbstractTree[] nodes;\n+    \n+    /**\n+     * Constructor creates QuadTree and inserts all nodes\n+     * \n+     * @param graph  The graph the QuadTree should be based on\n+     */\n+    AbstractTree(final GraphReadMethods graph, final Dimensions d) {\n+        this.level = 0;\n+        this.objects = new ArrayList<>();\n+        this.nodes = null;\n+        this.box = BoxFactory.create(graph, d);\n+        \n+        this.wg = graph;\n+        this.xId = wg.getAttribute(GraphElementType.VERTEX, VisualConcept.VertexAttribute.X.getName());\n+        this.yId = wg.getAttribute(GraphElementType.VERTEX, VisualConcept.VertexAttribute.Y.getName());\n+        this.rId = wg.getAttribute(GraphElementType.VERTEX, VisualConcept.VertexAttribute.NODE_RADIUS.getName());\n+    }\n+    \n+    /**\n+     * Create a subtree of the current tree\n+     * \n+     * @param parent\n+     * @param box \n+     */\n+    AbstractTree(AbstractTree parent, final AbstractBoundingBox box) {\n+        this.level = parent.level + 1;\n+        this.box = box;\n+        objects = new ArrayList<>();\n+        nodes = null;   \n+        // Inherit parent values for graph based variables.\n+        wg = parent.wg;\n+        xId = parent.xId;\n+        yId = parent.yId;\n+        rId = parent.rId;\n+    }\n+    \n+    /*\n+     * Splits the node into 2^X subnodes.\n+     * <p>\n+     * Divide the node into 2^X equal parts and initialise the 2^X subnodes with the new bounds.\n+     */\n+    protected abstract void split();\n+    \n+    /*\n+     * Determine which node the object belongs to.\n+     * <p>\n+     * -1 means object cannot completely fit within a child node and is part of the parent node.\n+     * <p>\n+     * Determine where an object belongs in the quadtree by determining which node the object can fit into.\n+     */\n+    protected abstract int getIndex(final int vxId);\n+\n+    protected abstract double getDelta(final int vertex1, final int vertex2);\n+    \n+    protected abstract double getCollisionDistance(final int vertex1, final int vertex2);\n+    \n+    /*\n+     * Insert the object into the tree. If the node exceeds the capacity, it will split and add\n+     * objects that fit to their corresponding nodes.\n+     */\n+    private void insert(final int vxId) {\n+        if (nodes != null) { // if their are subnodes\n+            int index = getIndex(vxId); // find the correct subnode\n+\n+            if (index != -1) { // if it fits neatly in a subnode\n+                nodes[index].insert(vxId); // insert into that subnode\n+\n+                return;\n+            }\n+        }\n+\n+        // if it fits in this node \n+        \n+        objects.add(vxId); // add to list of objects\n+\n+        if (objects.size() > MAX_OBJECTS && level < MAX_LEVELS) {\n+            if (nodes == null) { // if no subnodes then split\n+                split();\n+            }\n+\n+            int i = 0;\n+            while (i < objects.size()) { // For each object get the index and insert it into the subnode if it fits in one. If it fits in a subnode remove it from this list of objects.\n+                int index = getIndex(objects.get(i));", "originalCommit": "0742b2cff50e364e318679055e376b7b6555fd13", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQ0NDA0Mw==", "url": "https://github.com/constellation-app/constellation/pull/758#discussion_r465444043", "bodyText": "Done", "author": "Nova-2119", "createdAt": "2020-08-05T03:03:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQwNTI5OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQwNTQzNw==", "url": "https://github.com/constellation-app/constellation/pull/758#discussion_r465405437", "bodyText": "final", "author": "antares1470", "createdAt": "2020-08-05T00:37:33Z", "path": "CoreArrangementPlugins/src/au/gov/asd/tac/constellation/plugins/arrangements/uncollide/experimental/AbstractTree.java", "diffHunk": "@@ -0,0 +1,235 @@\n+/*\n+ * Copyright 2010-2020 Australian Signals Directorate\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.constellation.plugins.arrangements.uncollide.experimental;\n+\n+import au.gov.asd.tac.constellation.graph.GraphElementType;\n+import au.gov.asd.tac.constellation.graph.GraphReadMethods;\n+import au.gov.asd.tac.constellation.graph.schema.visual.concept.VisualConcept;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * This class provides an abstract representation of a Tree designed to help\n+ * detect collisions quickly by dividing an X-dimensional space into 2^X\n+ * sub-spaces. The minimum value of X is 2.\n+ * \n+ * @author Nova\n+ */\n+public abstract class AbstractTree {\n+    protected static final int MAX_OBJECTS = 50;\n+    protected static final int MAX_LEVELS = 4;\n+    \n+    protected final int xId; \n+    protected final int yId;\n+    protected final int rId;\n+    protected final GraphReadMethods wg;\n+\n+    protected final int level;\n+    protected AbstractBoundingBox box;\n+    protected List<Integer> objects;\n+    protected AbstractTree[] nodes;\n+    \n+    /**\n+     * Constructor creates QuadTree and inserts all nodes\n+     * \n+     * @param graph  The graph the QuadTree should be based on\n+     */\n+    AbstractTree(final GraphReadMethods graph, final Dimensions d) {\n+        this.level = 0;\n+        this.objects = new ArrayList<>();\n+        this.nodes = null;\n+        this.box = BoxFactory.create(graph, d);\n+        \n+        this.wg = graph;\n+        this.xId = wg.getAttribute(GraphElementType.VERTEX, VisualConcept.VertexAttribute.X.getName());\n+        this.yId = wg.getAttribute(GraphElementType.VERTEX, VisualConcept.VertexAttribute.Y.getName());\n+        this.rId = wg.getAttribute(GraphElementType.VERTEX, VisualConcept.VertexAttribute.NODE_RADIUS.getName());\n+    }\n+    \n+    /**\n+     * Create a subtree of the current tree\n+     * \n+     * @param parent\n+     * @param box \n+     */\n+    AbstractTree(AbstractTree parent, final AbstractBoundingBox box) {\n+        this.level = parent.level + 1;\n+        this.box = box;\n+        objects = new ArrayList<>();\n+        nodes = null;   \n+        // Inherit parent values for graph based variables.\n+        wg = parent.wg;\n+        xId = parent.xId;\n+        yId = parent.yId;\n+        rId = parent.rId;\n+    }\n+    \n+    /*\n+     * Splits the node into 2^X subnodes.\n+     * <p>\n+     * Divide the node into 2^X equal parts and initialise the 2^X subnodes with the new bounds.\n+     */\n+    protected abstract void split();\n+    \n+    /*\n+     * Determine which node the object belongs to.\n+     * <p>\n+     * -1 means object cannot completely fit within a child node and is part of the parent node.\n+     * <p>\n+     * Determine where an object belongs in the quadtree by determining which node the object can fit into.\n+     */\n+    protected abstract int getIndex(final int vxId);\n+\n+    protected abstract double getDelta(final int vertex1, final int vertex2);\n+    \n+    protected abstract double getCollisionDistance(final int vertex1, final int vertex2);\n+    \n+    /*\n+     * Insert the object into the tree. If the node exceeds the capacity, it will split and add\n+     * objects that fit to their corresponding nodes.\n+     */\n+    private void insert(final int vxId) {\n+        if (nodes != null) { // if their are subnodes\n+            int index = getIndex(vxId); // find the correct subnode\n+\n+            if (index != -1) { // if it fits neatly in a subnode\n+                nodes[index].insert(vxId); // insert into that subnode\n+\n+                return;\n+            }\n+        }\n+\n+        // if it fits in this node \n+        \n+        objects.add(vxId); // add to list of objects\n+\n+        if (objects.size() > MAX_OBJECTS && level < MAX_LEVELS) {\n+            if (nodes == null) { // if no subnodes then split\n+                split();\n+            }\n+\n+            int i = 0;\n+            while (i < objects.size()) { // For each object get the index and insert it into the subnode if it fits in one. If it fits in a subnode remove it from this list of objects.\n+                int index = getIndex(objects.get(i));\n+                if (index != -1) {\n+                    nodes[index].insert(objects.remove(i));\n+                } else {\n+                    i++;\n+                }\n+            }\n+        }\n+    }\n+    \n+    /**\n+     * Insert all verticies in the graph into the tree.\n+     */\n+    protected final void insertAll() {\n+        for (int position = 0; position < wg.getVertexCount(); position++) {\n+            insert(wg.getVertex(position));\n+        }\n+    }\n+    \n+    /*\n+     * Return all objects that could collide with the given object.\n+     */\n+    protected final List<Integer> getPossibleColliders(final List<Integer> colliders, final int vxId) {\n+        // Recursively find all child colliders...\n+        final int index = getIndex(vxId);\n+        if (index != -1 && nodes != null) {\n+            nodes[index].getPossibleColliders(colliders, vxId);\n+        }\n+\n+        // ...and colliders at this level.\n+        colliders.addAll(objects);\n+\n+        return colliders;\n+    }\n+    \n+    /**\n+     * Check the entire graph for collisions. \n+     *\n+     * @return  boolean indicating whether the graph contains colliding verticies\n+     */\n+    public final boolean hasCollision(){\n+        for (int position = 0; position < wg.getVertexCount(); position++) {\n+            if(nodeCollides(wg.getVertex(position))) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+    \n+    /**\n+     * Returns boolean indicating whether or not the vertex collides with any\n+     * other verticies. Two verticies in exactly the same spot are not counted\n+     * as overlapping.\n+     *\n+     * @param subject The vertex to check for collisions.\n+     * @param padding The minimum distance between the vertex's edge and the edges\n+     * of each neighbor.\n+     * @return the number of collisions.\n+     */\n+    protected final boolean nodeCollides(final int subject) {\n+        final List<Integer> possibles = new ArrayList<>();\n+        getPossibleColliders(possibles, subject);\n+\n+        // We need to deal with pathological cases such as everything at the same x,y point,\n+        // or everything co-linear.\n+        // We add a perturbation so points go different ways at different stages.\n+        for (final int possible : possibles) {\n+            if (subject != possible) {\n+                final double delta = getDelta(subject, possible);\n+                final double collisionDistance = getCollisionDistance(subject,possible);\n+                if (delta < collisionDistance) {\n+                    return true;\n+                }\n+            }\n+        }\n+        return false;\n+    }\n+    \n+    /**\n+     * Check the subject for \"twin\" verticies\n+     * \n+     * A twin verticie is defined as a verticie that falls within twinThreshold\n+     *  x (subject radius + twin radius + padding) of the subject.\n+     * The average radius is the average of the subject verticies radius and the\n+     * potential twins radius.\n+     * @param subject  The id of the vertex you wish to check for twins.\n+     * @param twinThreshold A scaling factor for the collision distance within \n+     * which the two noes are considered to be \"twins\". That is the distance\n+     * between them is so insignificant that we consider them in the same spot.\n+     * \n+     * @return  A set of vertex ideas for verticies  that are twins with the subject\n+     */\n+    public List<Integer> getTwins(final int subject, final double twinThreshold) {\n+        final List<Integer> possibles = new ArrayList<>();\n+        getPossibleColliders(possibles, subject);\n+        List<Integer> twins = new ArrayList<>();", "originalCommit": "0742b2cff50e364e318679055e376b7b6555fd13", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQzMzg2NQ==", "url": "https://github.com/constellation-app/constellation/pull/758#discussion_r465433865", "bodyText": "Done", "author": "Nova-2119", "createdAt": "2020-08-05T02:23:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQwNTQzNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQwNTkxOQ==", "url": "https://github.com/constellation-app/constellation/pull/758#discussion_r465405919", "bodyText": "Add access modifiers to this as well as constructors and functions in this file", "author": "antares1470", "createdAt": "2020-08-05T00:39:38Z", "path": "CoreArrangementPlugins/src/au/gov/asd/tac/constellation/plugins/arrangements/uncollide/experimental/BoundingBox2D.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright 2010-2020 Australian Signals Directorate\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.constellation.plugins.arrangements.uncollide.experimental;\n+\n+import au.gov.asd.tac.constellation.graph.GraphReadMethods;\n+\n+/**\n+ * This class is designed to provide a 2D bounding box for a graph.\n+ * \n+ * @author algol\n+ * @author Nova\n+ */\n+class BoundingBox2D extends AbstractBoundingBox{ ", "originalCommit": "0742b2cff50e364e318679055e376b7b6555fd13", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQ0MzkzOQ==", "url": "https://github.com/constellation-app/constellation/pull/758#discussion_r465443939", "bodyText": "If the class were public it would need to reside somewhere different as a general graph utility class. Given the only use I can see for it is to find colliders I think it is very unlikely anything else will want to use this class, hence leaving it in its current location with the default/package private access level.", "author": "Nova-2119", "createdAt": "2020-08-05T03:03:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQwNTkxOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQwNjAyNA==", "url": "https://github.com/constellation-app/constellation/pull/758#discussion_r465406024", "bodyText": "same here", "author": "antares1470", "createdAt": "2020-08-05T00:39:57Z", "path": "CoreArrangementPlugins/src/au/gov/asd/tac/constellation/plugins/arrangements/uncollide/experimental/BoundingBox3D.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/*\n+ * Copyright 2010-2020 Australian Signals Directorate\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.constellation.plugins.arrangements.uncollide.experimental;\n+\n+import au.gov.asd.tac.constellation.graph.GraphElementType;\n+import au.gov.asd.tac.constellation.graph.GraphReadMethods;\n+import au.gov.asd.tac.constellation.graph.schema.visual.concept.VisualConcept;\n+\n+/**\n+ * This class is designed to provide a 3D bounding box for a graph.\n+ * <p>\n+ * \n+ * @author algol\n+ * @author Nova\n+ */\n+class BoundingBox3D extends AbstractBoundingBox{ ", "originalCommit": "0742b2cff50e364e318679055e376b7b6555fd13", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQ0MzkxNQ==", "url": "https://github.com/constellation-app/constellation/pull/758#discussion_r465443915", "bodyText": "If the class were public it would need to reside somewhere different as a general graph utility class. Given the only use I can see for it is to find colliders I think it is very unlikely anything else will want to use this class, hence leaving it in its current location with the default/package private access level.", "author": "Nova-2119", "createdAt": "2020-08-05T03:02:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQwNjAyNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQwNjIwMQ==", "url": "https://github.com/constellation-app/constellation/pull/758#discussion_r465406201", "bodyText": "Add access modifiers", "author": "antares1470", "createdAt": "2020-08-05T00:40:37Z", "path": "CoreArrangementPlugins/src/au/gov/asd/tac/constellation/plugins/arrangements/uncollide/experimental/BoxFactory.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Copyright 2010-2020 Australian Signals Directorate\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.constellation.plugins.arrangements.uncollide.experimental;\n+\n+import au.gov.asd.tac.constellation.graph.GraphReadMethods;\n+\n+/**\n+ * \n+ * @author Nova\n+ */\n+class BoxFactory {", "originalCommit": "0742b2cff50e364e318679055e376b7b6555fd13", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQ0MTg1Nw==", "url": "https://github.com/constellation-app/constellation/pull/758#discussion_r465441857", "bodyText": "Deliberately left the class at Default/Package private access level.\nSame argument as for the AbstractBoundingBox :\nIf the class were public it would need to reside somewhere different as a general graph utility class..Currently there is no other use case and given it is a simple concept I believe a class fulfilling this role would already have been created if such a use case was likely to exist. Therefore it should remain package private.", "author": "Nova-2119", "createdAt": "2020-08-05T02:54:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQwNjIwMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQ0MTk1OQ==", "url": "https://github.com/constellation-app/constellation/pull/758#discussion_r465441959", "bodyText": "I have made the create method protected.", "author": "Nova-2119", "createdAt": "2020-08-05T02:54:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQwNjIwMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQwNjUzNQ==", "url": "https://github.com/constellation-app/constellation/pull/758#discussion_r465406535", "bodyText": "Add access modifier here", "author": "antares1470", "createdAt": "2020-08-05T00:41:59Z", "path": "CoreArrangementPlugins/src/au/gov/asd/tac/constellation/plugins/arrangements/uncollide/experimental/Dimensions.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Copyright 2010-2020 Australian Signals Directorate\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.constellation.plugins.arrangements.uncollide.experimental;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ *\n+ * @author Nova\n+ */\n+enum Dimensions {", "originalCommit": "0742b2cff50e364e318679055e376b7b6555fd13", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQ0MDgxOQ==", "url": "https://github.com/constellation-app/constellation/pull/758#discussion_r465440819", "bodyText": "Made public as it is a parameter for the plugin which must be public so that it can be registered and called from other packages.", "author": "Nova-2119", "createdAt": "2020-08-05T02:50:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQwNjUzNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQwNjU3Mw==", "url": "https://github.com/constellation-app/constellation/pull/758#discussion_r465406573", "bodyText": "final", "author": "antares1470", "createdAt": "2020-08-05T00:42:06Z", "path": "CoreArrangementPlugins/src/au/gov/asd/tac/constellation/plugins/arrangements/uncollide/experimental/Dimensions.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Copyright 2010-2020 Australian Signals Directorate\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.constellation.plugins.arrangements.uncollide.experimental;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ *\n+ * @author Nova\n+ */\n+enum Dimensions {\n+    TWO, THREE;\n+    \n+    public static List<String> getOptions() {\n+        ArrayList<String> list = new ArrayList<>();", "originalCommit": "0742b2cff50e364e318679055e376b7b6555fd13", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQzMzkxNA==", "url": "https://github.com/constellation-app/constellation/pull/758#discussion_r465433914", "bodyText": "Done", "author": "Nova-2119", "createdAt": "2020-08-05T02:23:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQwNjU3Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQwNjcxOA==", "url": "https://github.com/constellation-app/constellation/pull/758#discussion_r465406718", "bodyText": "Add access modifiers here and in constructors", "author": "antares1470", "createdAt": "2020-08-05T00:42:42Z", "path": "CoreArrangementPlugins/src/au/gov/asd/tac/constellation/plugins/arrangements/uncollide/experimental/OctTree.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Copyright 2010-2020 Australian Signals Directorate\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.constellation.plugins.arrangements.uncollide.experimental;\n+\n+import au.gov.asd.tac.constellation.graph.GraphElementType;\n+import au.gov.asd.tac.constellation.graph.GraphReadMethods;\n+import au.gov.asd.tac.constellation.graph.schema.visual.concept.VisualConcept;\n+\n+/**\n+ * http://gamedev.tutsplus.com/tutorials/implementation/quick-tip-use-quadtrees-to-detect-likely-collisions-in-2d-space/\n+ *\n+ * @author algol\n+ * @author Nova\n+ */\n+class OctTree extends AbstractTree{", "originalCommit": "0742b2cff50e364e318679055e376b7b6555fd13", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQzODQ4MQ==", "url": "https://github.com/constellation-app/constellation/pull/758#discussion_r465438481", "bodyText": "Added to constructor but class is deliberately package private.\nIf the class were public it would need to reside somewhere different as a general graph utility class. Given the only use I can see for it is to find colliders I think it is very unlikely anything else will want to use this class, hence leaving it in its current location with the default/package private access level.", "author": "Nova-2119", "createdAt": "2020-08-05T02:41:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQwNjcxOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQwNjk0NA==", "url": "https://github.com/constellation-app/constellation/pull/758#discussion_r465406944", "bodyText": "Add access modifier here and constructor", "author": "antares1470", "createdAt": "2020-08-05T00:43:41Z", "path": "CoreArrangementPlugins/src/au/gov/asd/tac/constellation/plugins/arrangements/uncollide/experimental/QuadTree.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Copyright 2010-2020 Australian Signals Directorate\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.constellation.plugins.arrangements.uncollide.experimental;\n+\n+import au.gov.asd.tac.constellation.graph.GraphReadMethods;\n+import org.python.modules.math;\n+\n+/**\n+ * http://gamedev.tutsplus.com/tutorials/implementation/quick-tip-use-quadtrees-to-detect-likely-collisions-in-2d-space/\n+ *\n+ * @author algol\n+ * @author Nova\n+ */\n+class QuadTree extends AbstractTree{", "originalCommit": "0742b2cff50e364e318679055e376b7b6555fd13", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQzODE0Mg==", "url": "https://github.com/constellation-app/constellation/pull/758#discussion_r465438142", "bodyText": "Added to constructor but class is deliberately package private.\nIf the class were public it would need to reside somewhere different as a general graph utility class. Given the only use I can see for it is to find colliders I think it is very unlikely anything else will want to use this class, hence leaving it in its current location with the default/package private access level.", "author": "Nova-2119", "createdAt": "2020-08-05T02:40:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQwNjk0NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQwNzAwOA==", "url": "https://github.com/constellation-app/constellation/pull/758#discussion_r465407008", "bodyText": "final", "author": "antares1470", "createdAt": "2020-08-05T00:43:58Z", "path": "CoreArrangementPlugins/src/au/gov/asd/tac/constellation/plugins/arrangements/uncollide/experimental/QuadTree.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Copyright 2010-2020 Australian Signals Directorate\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.constellation.plugins.arrangements.uncollide.experimental;\n+\n+import au.gov.asd.tac.constellation.graph.GraphReadMethods;\n+import org.python.modules.math;\n+\n+/**\n+ * http://gamedev.tutsplus.com/tutorials/implementation/quick-tip-use-quadtrees-to-detect-likely-collisions-in-2d-space/\n+ *\n+ * @author algol\n+ * @author Nova\n+ */\n+class QuadTree extends AbstractTree{\n+    protected static final int TOP_R = 0;\n+    protected static final int TOP_L = 1;\n+    protected static final int BOT_L = 2;\n+    protected static final int BOT_R = 3;\n+    \n+    /**\n+     * Constructor creates QuadTree and inserts all nodes\n+     * \n+     * @param graph  The graph the QuadTree should be based on\n+     */\n+    QuadTree(final GraphReadMethods graph) {\n+        super(graph, Dimensions.TWO);\n+        this.box = new BoundingBox2D(graph);\n+        insertAll();\n+    }\n+\n+    /**\n+     * Create a subtree of the current tree\n+     * \n+     * @param parent\n+     * @param box \n+     */\n+    protected QuadTree(QuadTree parent, final BoundingBox2D box) {\n+        super(parent, box);\n+    }\n+\n+    /*\n+     * Splits the node into four subnodes.\n+     * <p>\n+     * Divide the node into four equal parts and initialise the four subnodes with the new bounds.\n+     */\n+    @Override\n+    protected void split() {\n+        BoundingBox2D box2D = (BoundingBox2D) this.box;", "originalCommit": "0742b2cff50e364e318679055e376b7b6555fd13", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQzMzk1Mg==", "url": "https://github.com/constellation-app/constellation/pull/758#discussion_r465433952", "bodyText": "Done", "author": "Nova-2119", "createdAt": "2020-08-05T02:23:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQwNzAwOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQwNzMyNg==", "url": "https://github.com/constellation-app/constellation/pull/758#discussion_r465407326", "bodyText": "access modifiers", "author": "antares1470", "createdAt": "2020-08-05T00:44:58Z", "path": "CoreArrangementPlugins/src/au/gov/asd/tac/constellation/plugins/arrangements/uncollide/experimental/TreeFactory.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Copyright 2010-2020 Australian Signals Directorate\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.constellation.plugins.arrangements.uncollide.experimental;\n+\n+import au.gov.asd.tac.constellation.graph.GraphReadMethods;\n+\n+\n+/**\n+ *\n+ * @author Nova\n+ */\n+class TreeFactory {", "originalCommit": "0742b2cff50e364e318679055e376b7b6555fd13", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQzNjM3MQ==", "url": "https://github.com/constellation-app/constellation/pull/758#discussion_r465436371", "bodyText": "Deliberate leaving this at default/package private access level.\nIf it were to be public it would need to reside somewhere different as a general graph utility class. Given the only use I can see for it is to find colliders I think it is very unlikely anything else will want to use this class.", "author": "Nova-2119", "createdAt": "2020-08-05T02:33:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQwNzMyNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQwODE3NA==", "url": "https://github.com/constellation-app/constellation/pull/758#discussion_r465408174", "bodyText": "these 2 could maybe be final?", "author": "antares1470", "createdAt": "2020-08-05T00:48:23Z", "path": "CoreArrangementPlugins/src/au/gov/asd/tac/constellation/plugins/arrangements/uncollide/experimental/UncollideArrangement.java", "diffHunk": "@@ -0,0 +1,213 @@\n+/*\n+ * Copyright 2010-2020 Australian Signals Directorate\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package au.gov.asd.tac.constellation.plugins.arrangements.uncollide.experimental;\n+\n+import au.gov.asd.tac.constellation.graph.GraphConstants;\n+import au.gov.asd.tac.constellation.graph.GraphElementType;\n+import au.gov.asd.tac.constellation.graph.GraphWriteMethods;\n+import au.gov.asd.tac.constellation.graph.schema.visual.concept.VisualConcept;\n+import au.gov.asd.tac.constellation.plugins.PluginException;\n+import au.gov.asd.tac.constellation.plugins.PluginExecution;\n+import au.gov.asd.tac.constellation.plugins.PluginInteraction;\n+import au.gov.asd.tac.constellation.plugins.arrangements.ArrangementPluginRegistry;\n+import au.gov.asd.tac.constellation.plugins.arrangements.Arranger;\n+import au.gov.asd.tac.constellation.plugins.arrangements.utilities.ArrangementUtilities;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.concurrent.ThreadLocalRandom;\n+import org.openide.util.Exceptions;\n+import org.python.modules.math;\n+\n+public class UncollideArrangement implements Arranger {\n+\n+    private final Dimensions dimensions;\n+    private PluginInteraction interaction;\n+    private boolean maintainMean = false;\n+    private final double twinScaling;\n+    \n+\n+    public UncollideArrangement(final Dimensions dimensions, final int maxExpansions) {\n+        this.twinScaling = math.pow(1.1, -maxExpansions);\n+        this.dimensions = dimensions;\n+        \n+    }\n+\n+    public void setInteraction(final PluginInteraction interaction) {\n+        this.interaction = interaction;\n+    }\n+\n+    @Override\n+    public void arrange(final GraphWriteMethods wg) throws InterruptedException {\n+        final float[] oldMean = maintainMean ? ArrangementUtilities.getXyzMean(wg) : null;\n+\n+        final int vxCount = wg.getVertexCount();\n+\n+        if (vxCount > 0) {\n+            try {\n+                uncollide(wg, 2000);\n+            } catch (PluginException ex) {\n+                Exceptions.printStackTrace(ex);\n+            }\n+            if (maintainMean) {\n+                ArrangementUtilities.moveMean(wg, oldMean);\n+            }\n+        }\n+    }\n+\n+    private void uncollide(final GraphWriteMethods wg,final int iter) throws InterruptedException, PluginException {\n+        final int vertexCount = wg.getVertexCount();\n+\n+        AbstractTree tree = TreeFactory.create(wg, dimensions);\n+        int countIterations = 0;\n+        int numberNoTwins = 0;\n+        while (numberNoTwins < vertexCount) {\n+            if (Objects.nonNull(interaction)) {\n+                final String msg = String.format(\"Nodes with \\\"Twins\\\" %d of %d; iteration %d\", numberNoTwins, vertexCount, ++countIterations);\n+                interaction.setProgress(numberNoTwins, vertexCount, msg, true);\n+            }\n+            numberNoTwins = nudgeAllTwins(wg, tree);\n+            tree = TreeFactory.create(wg, dimensions);\n+        }\n+\n+        if(Objects.nonNull(interaction)) {\n+            interaction.setBusy(\"Expanding graph until there are no more colllisions\", true);\n+        }\n+        \n+        for (int i = 0; i < iter && tree.hasCollision(); i++) {\n+\n+            PluginExecution.withPlugin(ArrangementPluginRegistry.EXPAND_GRAPH).executeNow(wg);\n+\n+            tree = TreeFactory.create(wg, dimensions);\n+\n+            if (Thread.interrupted()) {\n+                throw new InterruptedException();\n+            }\n+        }\n+        if(Objects.nonNull(interaction)) {\n+            interaction.setBusy(\"Expanding graph until there are no more colllisions\", false);\n+        }\n+    }\n+    \n+    private int nudgeAllTwins(GraphWriteMethods wg, AbstractTree tree) {\n+        List<Integer> twins;\n+        int numberNoTwins = 0;\n+        for (int subject = 0; subject < wg.getVertexCount(); subject++) {\n+            twins = tree.getTwins(subject, twinScaling);\n+            if (twins.isEmpty()) {\n+                numberNoTwins++;\n+            } else {\n+                nudgeTwins(wg, subject, twins.get(0));\n+            }                  \n+        }\n+        return numberNoTwins;\n+    }\n+    \n+    /**\n+     * Nudges two nodes in approximately the same place so that they do not overlap.\n+     *\n+     * @param subject The vertex to check for twins.\n+     * @param padding The minimum distance between the vertex's edge and the edges\n+     * of each neighbor.\n+     */\n+    private void nudgeTwins(final GraphWriteMethods wg, final int subject, final int twin) {\n+        final int xId = wg.getAttribute(GraphElementType.VERTEX, VisualConcept.VertexAttribute.X.getName());\n+        final int yId = wg.getAttribute(GraphElementType.VERTEX, VisualConcept.VertexAttribute.Y.getName());\n+        final int zId = wg.getAttribute(GraphElementType.VERTEX, VisualConcept.VertexAttribute.Z.getName());\n+        final int rId = wg.getAttribute(GraphElementType.VERTEX, VisualConcept.VertexAttribute.NODE_RADIUS.getName());\n+        \n+        double[] deltas;\n+        float deltaX = wg.getFloatValue(xId, subject) - wg.getFloatValue(xId, twin);\n+        float deltaY = wg.getFloatValue(yId, subject) - wg.getFloatValue(yId, twin);\n+        float deltaZ = 0;\n+        \n+        double collisionDistance;\n+        double delta;", "originalCommit": "0742b2cff50e364e318679055e376b7b6555fd13", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQzMzk5Mw==", "url": "https://github.com/constellation-app/constellation/pull/758#discussion_r465433993", "bodyText": "They certainly can!", "author": "Nova-2119", "createdAt": "2020-08-05T02:24:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQwODE3NA=="}], "type": "inlineReview"}, {"oid": "bf08539e4b0e429807361a1375260051665ad35b", "url": "https://github.com/constellation-app/constellation/commit/bf08539e4b0e429807361a1375260051665ad35b", "message": ":art: Made classes package/default access, constructors protected.", "committedDate": "2020-08-05T02:01:46Z", "type": "commit"}, {"oid": "ebb536f668a0da426664aa251d2d39a800d0e074", "url": "https://github.com/constellation-app/constellation/commit/ebb536f668a0da426664aa251d2d39a800d0e074", "message": ":art: Made variables final where possible.", "committedDate": "2020-08-05T02:13:10Z", "type": "commit"}, {"oid": "4f14812075619015a4d106ecfa0ab9750ce8c175", "url": "https://github.com/constellation-app/constellation/commit/4f14812075619015a4d106ecfa0ab9750ce8c175", "message": ":art: Made constructor protected instead of default.\nAs suggested in review.", "committedDate": "2020-08-05T02:38:44Z", "type": "commit"}, {"oid": "6ae724fc2885ab3da2655fc9c2b1e17e016e78fc", "url": "https://github.com/constellation-app/constellation/commit/6ae724fc2885ab3da2655fc9c2b1e17e016e78fc", "message": ":art: Made constructor protected instead of default.\nAs suggested in review.", "committedDate": "2020-08-05T02:41:21Z", "type": "commit"}, {"oid": "d0ab980fa5161237d10ba1f452f26dcd91d4d37c", "url": "https://github.com/constellation-app/constellation/commit/d0ab980fa5161237d10ba1f452f26dcd91d4d37c", "message": ":art: Made Dimensions enum public\nNeeds to be public because it is an argument for the ArrangementPlugin\nwhich should remain public so that it can be registered as an \narrangement plugin and used in other places.", "committedDate": "2020-08-05T02:49:05Z", "type": "commit"}, {"oid": "f33d3d600ac877b2ff5288bb42c2bfb44526b36c", "url": "https://github.com/constellation-app/constellation/commit/f33d3d600ac877b2ff5288bb42c2bfb44526b36c", "message": ":art: Made create method protected.", "committedDate": "2020-08-05T02:56:18Z", "type": "commit"}, {"oid": "3a69f2127c55dc2cb2e617696f930bbad222423e", "url": "https://github.com/constellation-app/constellation/commit/3a69f2127c55dc2cb2e617696f930bbad222423e", "message": ":art: Changes to access modifiers\nMade get___Quadrant/Octant methods protected.\nConstructor using given boundaries has been made private. It should not\nbe used outside of the class, a bounding box for a graphs makes no\nsense without a graph.\nOther constructor has been made protected.\nDeliberately left class at default access level.", "committedDate": "2020-08-05T03:02:36Z", "type": "commit"}, {"oid": "1143cf261079abe210597985c94bbd0b49ebceb5", "url": "https://github.com/constellation-app/constellation/commit/1143cf261079abe210597985c94bbd0b49ebceb5", "message": ":art: Changed protected to default in default access classes\nAfter further discussion decided that the use of the protected access\nmodifier in package private/default access classes is incorrect\n(despite the fact it looks neater) as the extra use case of being able \nto access the method from outside the package in a subclass can not be\nachieved in a default access class.", "committedDate": "2020-08-05T03:34:41Z", "type": "commit"}, {"oid": "a0004bdeec59c56fe2c0b23f9084d4f902258da3", "url": "https://github.com/constellation-app/constellation/commit/a0004bdeec59c56fe2c0b23f9084d4f902258da3", "message": ":art: Changed protected member variables to default in default access classes\nAfter further discussion decided that the use of the protected access\nmodifier in package private/default access classes is incorrect\n(despite the fact it looks neater) as the extra use case of being able \nto access the variable from outside the package in a subclass can not be\nachieved in a default access class.", "committedDate": "2020-08-05T03:50:28Z", "type": "commit"}]}