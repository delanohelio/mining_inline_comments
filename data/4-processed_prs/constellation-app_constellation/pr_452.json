{"pr_number": 452, "pr_title": "Fix some bugs running Export Glyph Textures", "pr_createdAt": "2020-04-22T17:21:19Z", "pr_url": "https://github.com/constellation-app/constellation/pull/452", "timeline": [{"oid": "ef46fe35ccac229a1f80611e839d645b8a961e65", "url": "https://github.com/constellation-app/constellation/commit/ef46fe35ccac229a1f80611e839d645b8a961e65", "message": ":bug: Fix some bugs running Export Glyph Textures\n* Fixed some exceptions seen running Experimental -> Glphy Textures\n* Removed some comments no longer used\n* Added some finals", "committedDate": "2020-04-22T17:16:13Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQzOTE1Ng==", "url": "https://github.com/constellation-app/constellation/pull/452#discussion_r413439156", "bodyText": "out can be final, also remove the rogue space.", "author": "cygnus-x-1", "createdAt": "2020-04-23T01:16:49Z", "path": "CoreOpenGLDisplay/src/au/gov/asd/tac/constellation/visual/opengl/utilities/SharedDrawable.java", "diffHunk": "@@ -129,28 +122,39 @@ private static void init() {\n         }\n     }\n \n-    public static void exportGlyphTextures(File baseFile) {\n+    public static void exportGlyphTextures(final File baseFile) {\n \n         // Ensure that JavaFX is running\n-        Platform.startup(() -> {\n-        });\n-\n-        Platform.runLater(() -> {\n-            String baseFileName = baseFile.getAbsolutePath();\n-            int extensionStart = baseFileName.lastIndexOf('.');\n-            if (extensionStart > 0) {\n-                baseFileName = baseFileName.substring(0, extensionStart);\n-            }\n+        try {\n+            Platform.startup(() -> {\n+            });\n+        } catch (final IllegalStateException ex) {\n+            /**\n+             * there isn't a way to tell whether the JavaFX platform is running\n+             * so we'll absorb this exception and move on.\n+             */\n+        }\n \n-            for (int page = 0; page < glyphManager.getGlyphPageCount(); page++) {\n-                File outputFile = new File(baseFileName + SeparatorConstants.UNDERSCORE + page + \".png\");\n-                try (OutputStream out = new FileOutputStream(outputFile)) {\n-                    glyphManager.writeGlyphBuffer(page, out);\n-                } catch (IOException ex) {\n-                    // Nothing to do here - this is just for developer testing.\n+        if (glyphManager != null) {\n+            Platform.runLater(() -> {\n+                String baseFileName = baseFile.getAbsolutePath();\n+                final int extensionStart = baseFileName.lastIndexOf('.');\n+                if (extensionStart > 0) {\n+                    baseFileName = baseFileName.substring(0, extensionStart);\n                 }\n-            }\n-        });\n+\n+                for (int page = 0; page < glyphManager.getGlyphPageCount(); page++) {\n+                    final File outputFile = new File(baseFileName + SeparatorConstants.UNDERSCORE + page + \".png\");\n+                    try ( OutputStream out = new FileOutputStream(outputFile)) {", "originalCommit": "ef46fe35ccac229a1f80611e839d645b8a961e65", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzc4MDI5Mg==", "url": "https://github.com/constellation-app/constellation/pull/452#discussion_r413780292", "bodyText": "Good pickup regarding the final and rogue space. I added the final but the space seems to be part of the auto-formatter. I'd say that's a NB 11.3 bug.", "author": "arcturus2", "createdAt": "2020-04-23T12:39:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQzOTE1Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQ2MTU3MQ==", "url": "https://github.com/constellation-app/constellation/pull/452#discussion_r413461571", "bodyText": "is the intention to remove this once developer testing is done?", "author": "antares1470", "createdAt": "2020-04-23T02:24:50Z", "path": "CoreOpenGLDisplay/src/au/gov/asd/tac/constellation/visual/opengl/utilities/SharedDrawable.java", "diffHunk": "@@ -129,28 +122,39 @@ private static void init() {\n         }\n     }\n \n-    public static void exportGlyphTextures(File baseFile) {\n+    public static void exportGlyphTextures(final File baseFile) {\n \n         // Ensure that JavaFX is running\n-        Platform.startup(() -> {\n-        });\n-\n-        Platform.runLater(() -> {\n-            String baseFileName = baseFile.getAbsolutePath();\n-            int extensionStart = baseFileName.lastIndexOf('.');\n-            if (extensionStart > 0) {\n-                baseFileName = baseFileName.substring(0, extensionStart);\n-            }\n+        try {\n+            Platform.startup(() -> {\n+            });\n+        } catch (final IllegalStateException ex) {\n+            /**\n+             * there isn't a way to tell whether the JavaFX platform is running\n+             * so we'll absorb this exception and move on.\n+             */\n+        }\n \n-            for (int page = 0; page < glyphManager.getGlyphPageCount(); page++) {\n-                File outputFile = new File(baseFileName + SeparatorConstants.UNDERSCORE + page + \".png\");\n-                try (OutputStream out = new FileOutputStream(outputFile)) {\n-                    glyphManager.writeGlyphBuffer(page, out);\n-                } catch (IOException ex) {\n-                    // Nothing to do here - this is just for developer testing.\n+        if (glyphManager != null) {\n+            Platform.runLater(() -> {\n+                String baseFileName = baseFile.getAbsolutePath();\n+                final int extensionStart = baseFileName.lastIndexOf('.');\n+                if (extensionStart > 0) {\n+                    baseFileName = baseFileName.substring(0, extensionStart);\n                 }\n-            }\n-        });\n+\n+                for (int page = 0; page < glyphManager.getGlyphPageCount(); page++) {\n+                    final File outputFile = new File(baseFileName + SeparatorConstants.UNDERSCORE + page + \".png\");\n+                    try ( OutputStream out = new FileOutputStream(outputFile)) {\n+                        glyphManager.writeGlyphBuffer(page, out);\n+                    } catch (IOException ex) {\n+                        // Nothing to do here - this is just for developer testing.", "originalCommit": "ef46fe35ccac229a1f80611e839d645b8a961e65", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzc4NTkxMw==", "url": "https://github.com/constellation-app/constellation/pull/452#discussion_r413785913", "bodyText": "I'd like to keep this plugin around - so I've replaced the comment with a logger call.", "author": "arcturus2", "createdAt": "2020-04-23T12:47:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQ2MTU3MQ=="}], "type": "inlineReview"}, {"oid": "ed814bed5e9d16050912cf0fdfd65876bbf7926f", "url": "https://github.com/constellation-app/constellation/commit/ed814bed5e9d16050912cf0fdfd65876bbf7926f", "message": ":art: Updates based on feedback", "committedDate": "2020-04-23T12:36:35Z", "type": "commit"}, {"oid": "77d9423c06b76f257309964bec53c2a6f2aa1e73", "url": "https://github.com/constellation-app/constellation/commit/77d9423c06b76f257309964bec53c2a6f2aa1e73", "message": ":art: Log the exception rather than ignore it", "committedDate": "2020-04-23T12:43:46Z", "type": "commit"}]}