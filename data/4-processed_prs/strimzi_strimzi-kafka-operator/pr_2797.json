{"pr_number": 2797, "pr_title": "ST: Add tests for operator metrics", "pr_createdAt": "2020-04-07T09:01:31Z", "pr_url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2797", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTI3NDM0NQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2797#discussion_r405274345", "bodyText": "if adding this line, maybe the previous one is not needed anymore?", "author": "ppatierno", "createdAt": "2020-04-08T05:55:41Z", "path": "systemtest/src/main/java/io/strimzi/systemtest/utils/FileUtils.java", "diffHunk": "@@ -107,6 +107,7 @@ public static File updateNamespaceOfYamlFile(String pathToOrigin, String namespa\n \n             String yaml = new String(encoded, StandardCharsets.UTF_8);\n             yaml = yaml.replaceAll(\"namespace: .*\", \"namespace: \" + namespace);\n+            yaml = yaml.replaceAll(\"myproject\", namespace);", "originalCommit": "65dc441110ace049679b4c48a749992d195a1c9d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTI3NDg2NA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2797#discussion_r405274864", "bodyText": "what do you think about defining a constant for this metric port (9404) ?", "author": "ppatierno", "createdAt": "2020-04-08T05:57:04Z", "path": "systemtest/src/main/java/io/strimzi/systemtest/utils/specific/MetricsUtils.java", "diffHunk": "@@ -55,22 +57,37 @@ public static String collectMetrics(String podName, String metricsPath) throws I\n \n     public static HashMap<String, String> collectKafkaPodsMetrics(String clusterName) {\n         LabelSelector kafkaSelector = kubeClient().getStatefulSetSelectors(KafkaResources.kafkaStatefulSetName(clusterName));\n-        return collectMetricsFromPods(kafkaSelector);\n+        return collectMetricsFromPods(kafkaSelector, 9404);", "originalCommit": "65dc441110ace049679b4c48a749992d195a1c9d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTI3NzI0OQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2797#discussion_r405277249", "bodyText": "Pay attention at #2800 , it's going to change kafka_connect_connect_worker_metrics_connector_count to kafka_connect_worker_connector_count", "author": "ppatierno", "createdAt": "2020-04-08T06:03:01Z", "path": "systemtest/src/test/java/io/strimzi/systemtest/metrics/MetricsST.java", "diffHunk": "@@ -179,6 +187,77 @@ void testKafkaExporterDifferentSetting() throws InterruptedException, ExecutionE\n         assertThat(\"Exporter starting script has wrong setting than it's specified in CR\", runScriptContent.contains(\"--topic.filter=\\\"\" + TEST_TOPIC_NAME + \"\\\"\"));\n     }\n \n+    @Test\n+    void testClusterOperatorMetrics() {\n+        List<String> resourcesList = Arrays.asList(\"Kafka\", \"KafkaBridge\", \"KafkaConnect\", \"KafkaConnectS2I\", \"KafkaConnector\", \"KafkaMirrorMaker\", \"KafkaMirrorMaker2\");\n+\n+        for (String resource : resourcesList) {\n+            assertCoMetricNotNull(\"strimzi_reconciliations_periodical_total\", resource);\n+            assertCoMetricNotNull(\"strimzi_reconciliations_duration_seconds_count\", resource);\n+            assertCoMetricNotNull(\"strimzi_reconciliations_duration_seconds_sum\", resource);\n+            assertCoMetricNotNull(\"strimzi_reconciliations_duration_seconds_max\", resource);\n+            assertCoMetricNotNull(\"strimzi_reconciliations_locked_total\", resource);\n+            assertCoMetricNotNull(\"strimzi_reconciliations_successful_total\", resource);\n+            assertCoMetricNotNull(\"strimzi_reconciliations_periodical_total\", resource);\n+            assertCoMetricNotNull(\"strimzi_reconciliations_failed_total\", resource);\n+        }\n+\n+        Pattern connectResponse = Pattern.compile(\"strimzi_resources\\\\{kind=\\\"Kafka\\\",} ([\\\\d.][^\\\\n]+)\");\n+        ArrayList<Double> values = MetricsUtils.collectSpecificMetric(connectResponse, clusterOperatorMetricsData);\n+        assertThat(values.stream().mapToDouble(i -> i).sum(), is((double) 2));\n+\n+        connectResponse = Pattern.compile(\"strimzi_resources\\\\{kind=\\\"KafkaBridge\\\",} ([\\\\d.][^\\\\n]+)\");\n+        values = MetricsUtils.collectSpecificMetric(connectResponse, clusterOperatorMetricsData);\n+        assertThat(values.stream().mapToDouble(i -> i).sum(), is((double) 0));\n+\n+        connectResponse = Pattern.compile(\"strimzi_resources\\\\{kind=\\\"KafkaConnect\\\",} ([\\\\d.][^\\\\n]+)\");\n+        values = MetricsUtils.collectSpecificMetric(connectResponse, clusterOperatorMetricsData);\n+        assertThat(values.stream().mapToDouble(i -> i).sum(), is((double) 1));\n+\n+        connectResponse = Pattern.compile(\"strimzi_resources\\\\{kind=\\\"KafkaConnectS2I\\\",} ([\\\\d.][^\\\\n]+)\");\n+        values = MetricsUtils.collectSpecificMetric(connectResponse, clusterOperatorMetricsData);\n+        assertThat(values.stream().mapToDouble(i -> i).sum(), is((double) 0));\n+\n+        connectResponse = Pattern.compile(\"strimzi_resources\\\\{kind=\\\"KafkaMirrorMaker\\\",} ([\\\\d.][^\\\\n]+)\");\n+        values = MetricsUtils.collectSpecificMetric(connectResponse, clusterOperatorMetricsData);\n+        assertThat(values.stream().mapToDouble(i -> i).sum(), is((double) 0));\n+\n+        connectResponse = Pattern.compile(\"strimzi_resources\\\\{kind=\\\"KafkaMirrorMaker2\\\",} ([\\\\d.][^\\\\n]+)\");\n+        values = MetricsUtils.collectSpecificMetric(connectResponse, clusterOperatorMetricsData);\n+        assertThat(values.stream().mapToDouble(i -> i).sum(), is((double) 1));\n+\n+        connectResponse = Pattern.compile(\"strimzi_resources\\\\{kind=\\\"KafkaConnector\\\",} ([\\\\d.][^\\\\n]+)\");\n+        values = MetricsUtils.collectSpecificMetric(connectResponse, clusterOperatorMetricsData);\n+        assertThat(values.stream().mapToDouble(i -> i).sum(), is((double) 0));\n+    }\n+\n+    @Test\n+    void testUserOperatorMetrics() {\n+        assertCoMetricNotNull(\"strimzi_reconciliations_locked_total\", \"KafkaUser\");\n+        assertCoMetricNotNull(\"strimzi_reconciliations_successful_total\", \"KafkaUser\");\n+        assertCoMetricNotNull(\"strimzi_reconciliations_duration_seconds_count\", \"KafkaUser\");\n+        assertCoMetricNotNull(\"strimzi_reconciliations_duration_seconds_sum\", \"KafkaUser\");\n+        assertCoMetricNotNull(\"strimzi_reconciliations_duration_seconds_max\", \"KafkaUser\");\n+        assertCoMetricNotNull(\"strimzi_reconciliations_periodical_total\", \"KafkaUser\");\n+        assertCoMetricNotNull(\"strimzi_reconciliations_failed_total\", \"KafkaUser\");\n+        assertCoMetricNotNull(\"strimzi_reconciliations_total\", \"KafkaUser\");\n+\n+        Pattern connectResponse = Pattern.compile(\"strimzi_resources\\\\{kind=\\\"KafkaUser\\\",} ([\\\\d.][^\\\\n]+)\");\n+        ArrayList<Double> values = MetricsUtils.collectSpecificMetric(connectResponse, userOperatorMetricsData);\n+        assertThat(values.stream().mapToDouble(i -> i).sum(), is((double) 2));\n+    }\n+\n+    @Test\n+    void testMirrorMaker2Metrics() {\n+        Pattern connectResponse = Pattern.compile(\"kafka_connect_connect_worker_metrics_connector_count ([\\\\d.][^\\\\n]+)\");", "originalCommit": "65dc441110ace049679b4c48a749992d195a1c9d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTI3ODE1Mg==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2797#discussion_r405278152", "bodyText": "Ditto as above, it's going to be replaced by kafka_connect_worker_task_count", "author": "ppatierno", "createdAt": "2020-04-08T06:05:18Z", "path": "systemtest/src/test/java/io/strimzi/systemtest/metrics/MetricsST.java", "diffHunk": "@@ -179,6 +187,77 @@ void testKafkaExporterDifferentSetting() throws InterruptedException, ExecutionE\n         assertThat(\"Exporter starting script has wrong setting than it's specified in CR\", runScriptContent.contains(\"--topic.filter=\\\"\" + TEST_TOPIC_NAME + \"\\\"\"));\n     }\n \n+    @Test\n+    void testClusterOperatorMetrics() {\n+        List<String> resourcesList = Arrays.asList(\"Kafka\", \"KafkaBridge\", \"KafkaConnect\", \"KafkaConnectS2I\", \"KafkaConnector\", \"KafkaMirrorMaker\", \"KafkaMirrorMaker2\");\n+\n+        for (String resource : resourcesList) {\n+            assertCoMetricNotNull(\"strimzi_reconciliations_periodical_total\", resource);\n+            assertCoMetricNotNull(\"strimzi_reconciliations_duration_seconds_count\", resource);\n+            assertCoMetricNotNull(\"strimzi_reconciliations_duration_seconds_sum\", resource);\n+            assertCoMetricNotNull(\"strimzi_reconciliations_duration_seconds_max\", resource);\n+            assertCoMetricNotNull(\"strimzi_reconciliations_locked_total\", resource);\n+            assertCoMetricNotNull(\"strimzi_reconciliations_successful_total\", resource);\n+            assertCoMetricNotNull(\"strimzi_reconciliations_periodical_total\", resource);\n+            assertCoMetricNotNull(\"strimzi_reconciliations_failed_total\", resource);\n+        }\n+\n+        Pattern connectResponse = Pattern.compile(\"strimzi_resources\\\\{kind=\\\"Kafka\\\",} ([\\\\d.][^\\\\n]+)\");\n+        ArrayList<Double> values = MetricsUtils.collectSpecificMetric(connectResponse, clusterOperatorMetricsData);\n+        assertThat(values.stream().mapToDouble(i -> i).sum(), is((double) 2));\n+\n+        connectResponse = Pattern.compile(\"strimzi_resources\\\\{kind=\\\"KafkaBridge\\\",} ([\\\\d.][^\\\\n]+)\");\n+        values = MetricsUtils.collectSpecificMetric(connectResponse, clusterOperatorMetricsData);\n+        assertThat(values.stream().mapToDouble(i -> i).sum(), is((double) 0));\n+\n+        connectResponse = Pattern.compile(\"strimzi_resources\\\\{kind=\\\"KafkaConnect\\\",} ([\\\\d.][^\\\\n]+)\");\n+        values = MetricsUtils.collectSpecificMetric(connectResponse, clusterOperatorMetricsData);\n+        assertThat(values.stream().mapToDouble(i -> i).sum(), is((double) 1));\n+\n+        connectResponse = Pattern.compile(\"strimzi_resources\\\\{kind=\\\"KafkaConnectS2I\\\",} ([\\\\d.][^\\\\n]+)\");\n+        values = MetricsUtils.collectSpecificMetric(connectResponse, clusterOperatorMetricsData);\n+        assertThat(values.stream().mapToDouble(i -> i).sum(), is((double) 0));\n+\n+        connectResponse = Pattern.compile(\"strimzi_resources\\\\{kind=\\\"KafkaMirrorMaker\\\",} ([\\\\d.][^\\\\n]+)\");\n+        values = MetricsUtils.collectSpecificMetric(connectResponse, clusterOperatorMetricsData);\n+        assertThat(values.stream().mapToDouble(i -> i).sum(), is((double) 0));\n+\n+        connectResponse = Pattern.compile(\"strimzi_resources\\\\{kind=\\\"KafkaMirrorMaker2\\\",} ([\\\\d.][^\\\\n]+)\");\n+        values = MetricsUtils.collectSpecificMetric(connectResponse, clusterOperatorMetricsData);\n+        assertThat(values.stream().mapToDouble(i -> i).sum(), is((double) 1));\n+\n+        connectResponse = Pattern.compile(\"strimzi_resources\\\\{kind=\\\"KafkaConnector\\\",} ([\\\\d.][^\\\\n]+)\");\n+        values = MetricsUtils.collectSpecificMetric(connectResponse, clusterOperatorMetricsData);\n+        assertThat(values.stream().mapToDouble(i -> i).sum(), is((double) 0));\n+    }\n+\n+    @Test\n+    void testUserOperatorMetrics() {\n+        assertCoMetricNotNull(\"strimzi_reconciliations_locked_total\", \"KafkaUser\");\n+        assertCoMetricNotNull(\"strimzi_reconciliations_successful_total\", \"KafkaUser\");\n+        assertCoMetricNotNull(\"strimzi_reconciliations_duration_seconds_count\", \"KafkaUser\");\n+        assertCoMetricNotNull(\"strimzi_reconciliations_duration_seconds_sum\", \"KafkaUser\");\n+        assertCoMetricNotNull(\"strimzi_reconciliations_duration_seconds_max\", \"KafkaUser\");\n+        assertCoMetricNotNull(\"strimzi_reconciliations_periodical_total\", \"KafkaUser\");\n+        assertCoMetricNotNull(\"strimzi_reconciliations_failed_total\", \"KafkaUser\");\n+        assertCoMetricNotNull(\"strimzi_reconciliations_total\", \"KafkaUser\");\n+\n+        Pattern connectResponse = Pattern.compile(\"strimzi_resources\\\\{kind=\\\"KafkaUser\\\",} ([\\\\d.][^\\\\n]+)\");\n+        ArrayList<Double> values = MetricsUtils.collectSpecificMetric(connectResponse, userOperatorMetricsData);\n+        assertThat(values.stream().mapToDouble(i -> i).sum(), is((double) 2));\n+    }\n+\n+    @Test\n+    void testMirrorMaker2Metrics() {\n+        Pattern connectResponse = Pattern.compile(\"kafka_connect_connect_worker_metrics_connector_count ([\\\\d.][^\\\\n]+)\");\n+        ArrayList<Double> values = MetricsUtils.collectSpecificMetric(connectResponse, kafkaMirrorMaker2MetricsData);\n+        assertThat(values.stream().mapToDouble(i -> i).sum(), is((double) 3));\n+\n+        connectResponse = Pattern.compile(\"kafka_connect_connect_worker_metrics_task_count ([\\\\d.][^\\\\n]+)\");", "originalCommit": "65dc441110ace049679b4c48a749992d195a1c9d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "55462e3d11055ff82212b4fa5bce519fb3436283", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/55462e3d11055ff82212b4fa5bce519fb3436283", "message": "Add proper tags\n\nSigned-off-by: Jakub Stejskal <xstejs24@gmail.com>", "committedDate": "2020-04-08T11:49:08Z", "type": "forcePushed"}, {"oid": "16db4474f43d2c68b312b19bf61637a2257b2e8e", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/16db4474f43d2c68b312b19bf61637a2257b2e8e", "message": "Add tests for operator metrics\n\nSigned-off-by: Jakub Stejskal <xstejs24@gmail.com>", "committedDate": "2020-04-15T06:31:53Z", "type": "commit"}, {"oid": "b0aba7d0cb166e6bd78be4a90e3177b58ccae041", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/b0aba7d0cb166e6bd78be4a90e3177b58ccae041", "message": "Workin in few comments\n\nSigned-off-by: Jakub Stejskal <xstejs24@gmail.com>", "committedDate": "2020-04-15T06:31:53Z", "type": "commit"}, {"oid": "746793e125a2311cdcb9b1356726f11b3b195a0f", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/746793e125a2311cdcb9b1356726f11b3b195a0f", "message": "Remove test for prometheus service\n\nSigned-off-by: Jakub Stejskal <xstejs24@gmail.com>", "committedDate": "2020-04-15T06:31:53Z", "type": "commit"}, {"oid": "2ad1ef76282c170dc5c5e785f642d91f801e383d", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/2ad1ef76282c170dc5c5e785f642d91f801e383d", "message": "Add proper tags\n\nSigned-off-by: Jakub Stejskal <xstejs24@gmail.com>", "committedDate": "2020-04-15T06:32:24Z", "type": "commit"}, {"oid": "f1d6046e6fd3f03709d6ac10689e60d35a5ca795", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/f1d6046e6fd3f03709d6ac10689e60d35a5ca795", "message": "fixup! Add proper tags\n\nSigned-off-by: Jakub Stejskal <xstejs24@gmail.com>", "committedDate": "2020-04-15T06:32:27Z", "type": "commit"}, {"oid": "dea1f4109bd18ce5d2056b4ac6f30b45bd67d84c", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/dea1f4109bd18ce5d2056b4ac6f30b45bd67d84c", "message": "Fix mm2 examples for metrics\n\nSigned-off-by: Jakub Stejskal <xstejs24@gmail.com>", "committedDate": "2020-04-15T08:38:16Z", "type": "commit"}, {"oid": "dea1f4109bd18ce5d2056b4ac6f30b45bd67d84c", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/dea1f4109bd18ce5d2056b4ac6f30b45bd67d84c", "message": "Fix mm2 examples for metrics\n\nSigned-off-by: Jakub Stejskal <xstejs24@gmail.com>", "committedDate": "2020-04-15T08:38:16Z", "type": "forcePushed"}, {"oid": "51d05591e01fe2cfec38c0ba28df2ba73717811f", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/51d05591e01fe2cfec38c0ba28df2ba73717811f", "message": "fixup! Fix mm2 examples for metrics\n\nSigned-off-by: Jakub Stejskal <xstejs24@gmail.com>", "committedDate": "2020-04-15T14:03:29Z", "type": "commit"}]}