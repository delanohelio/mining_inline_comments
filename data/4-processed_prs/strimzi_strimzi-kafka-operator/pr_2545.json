{"pr_number": 2545, "pr_title": "Remove Kafka Connect properties from root of KafkaMirrorMaker2Spec", "pr_createdAt": "2020-02-12T14:37:51Z", "pr_url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2545", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQwMDcwMA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2545#discussion_r378400700", "bodyText": "missing .... version, resources and externalConfiguration", "author": "ppatierno", "createdAt": "2020-02-12T17:26:42Z", "path": "api/src/main/java/io/strimzi/api/kafka/model/AbstractKafkaConnectSpec.java", "diffHunk": "@@ -0,0 +1,218 @@\n+/*\n+ * Copyright Strimzi authors.\n+ * License: Apache License 2.0 (see the file LICENSE or http://apache.org/licenses/LICENSE-2.0.html).\n+ */\n+package io.strimzi.api.kafka.model;\n+\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonPropertyOrder;\n+import io.fabric8.kubernetes.api.model.Affinity;\n+import io.fabric8.kubernetes.api.model.ResourceRequirements;\n+import io.fabric8.kubernetes.api.model.Toleration;\n+import io.strimzi.api.annotations.DeprecatedProperty;\n+import io.strimzi.api.kafka.model.connect.ExternalConfiguration;\n+import io.strimzi.api.kafka.model.template.KafkaConnectTemplate;\n+import io.strimzi.api.kafka.model.tracing.Tracing;\n+import io.strimzi.crdgenerator.annotations.Description;\n+import io.strimzi.crdgenerator.annotations.KubeLink;\n+import io.sundr.builder.annotations.Buildable;\n+import io.vertx.core.cli.annotations.DefaultValue;\n+import lombok.EqualsAndHashCode;\n+\n+import java.io.Serializable;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+@Buildable(\n+        editableEnabled = false,\n+        generateBuilderPackage = false,\n+        builderPackage = \"io.fabric8.kubernetes.api.builder\"\n+)\n+@JsonInclude(JsonInclude.Include.NON_NULL)\n+@JsonPropertyOrder({ \"replicas\", \"image\",\n+        \"livenessProbe\", \"readinessProbe\", \"jvmOptions\",\n+        \"affinity\", \"tolerations\", \"logging\", \"metrics\", \"tracing\", \"template\"})", "originalCommit": "5f29861d2620b2e439fb49a819036cdb476d0bdb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQwNzAyOQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2545#discussion_r378407029", "bodyText": "I think we should add this check to the CrdGenerator, if only to deprive Paolo of these low-hanging fruit review comments.", "author": "tombentley", "createdAt": "2020-02-12T17:38:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQwMDcwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQwOTU3Ng==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2545#discussion_r378409576", "bodyText": "Good idea @tombentley ! Thanks for thinking about me :-)", "author": "ppatierno", "createdAt": "2020-02-12T17:42:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQwMDcwMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQwMTE5Mw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2545#discussion_r378401193", "bodyText": "please check missing values as comment above.", "author": "ppatierno", "createdAt": "2020-02-12T17:27:39Z", "path": "api/src/main/java/io/strimzi/api/kafka/model/KafkaConnectSpec.java", "diffHunk": "@@ -32,11 +21,11 @@\n         builderPackage = \"io.fabric8.kubernetes.api.builder\"\n )\n @JsonInclude(JsonInclude.Include.NON_NULL)\n-@JsonPropertyOrder({ \"replicas\", \"config\", \"image\",\n+@JsonPropertyOrder({ \"replicas\", \"image\", \"bootstrapServers\", \"config\",", "originalCommit": "5f29861d2620b2e439fb49a819036cdb476d0bdb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQwMTQwMg==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2545#discussion_r378401402", "bodyText": "ditto as above", "author": "ppatierno", "createdAt": "2020-02-12T17:28:01Z", "path": "api/src/main/java/io/strimzi/api/kafka/model/KafkaMirrorMaker2Spec.java", "diffHunk": "@@ -22,18 +20,17 @@\n         builderPackage = \"io.fabric8.kubernetes.api.builder\"\n )\n @JsonInclude(JsonInclude.Include.NON_NULL)\n-@JsonPropertyOrder({\"replicas\", \"connectCluster\", \"config\", \"image\",\n+@JsonPropertyOrder({\"replicas\", \"connectCluster\", \"image\",", "originalCommit": "5f29861d2620b2e439fb49a819036cdb476d0bdb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQwODIyNQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2545#discussion_r378408225", "bodyText": "Can we reword, since it's requests and limits.", "author": "tombentley", "createdAt": "2020-02-12T17:40:24Z", "path": "api/src/main/java/io/strimzi/api/kafka/model/AbstractKafkaConnectSpec.java", "diffHunk": "@@ -0,0 +1,218 @@\n+/*\n+ * Copyright Strimzi authors.\n+ * License: Apache License 2.0 (see the file LICENSE or http://apache.org/licenses/LICENSE-2.0.html).\n+ */\n+package io.strimzi.api.kafka.model;\n+\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonPropertyOrder;\n+import io.fabric8.kubernetes.api.model.Affinity;\n+import io.fabric8.kubernetes.api.model.ResourceRequirements;\n+import io.fabric8.kubernetes.api.model.Toleration;\n+import io.strimzi.api.annotations.DeprecatedProperty;\n+import io.strimzi.api.kafka.model.connect.ExternalConfiguration;\n+import io.strimzi.api.kafka.model.template.KafkaConnectTemplate;\n+import io.strimzi.api.kafka.model.tracing.Tracing;\n+import io.strimzi.crdgenerator.annotations.Description;\n+import io.strimzi.crdgenerator.annotations.KubeLink;\n+import io.sundr.builder.annotations.Buildable;\n+import io.vertx.core.cli.annotations.DefaultValue;\n+import lombok.EqualsAndHashCode;\n+\n+import java.io.Serializable;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+@Buildable(\n+        editableEnabled = false,\n+        generateBuilderPackage = false,\n+        builderPackage = \"io.fabric8.kubernetes.api.builder\"\n+)\n+@JsonInclude(JsonInclude.Include.NON_NULL)\n+@JsonPropertyOrder({ \"replicas\", \"image\",\n+        \"livenessProbe\", \"readinessProbe\", \"jvmOptions\",\n+        \"affinity\", \"tolerations\", \"logging\", \"metrics\", \"tracing\", \"template\"})\n+@EqualsAndHashCode(doNotUseGetters = true)\n+public abstract class AbstractKafkaConnectSpec implements Serializable, UnknownPropertyPreserving {\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    private Logging logging;\n+    private Integer replicas;\n+\n+    private String version;\n+    private String image;\n+    private ResourceRequirements resources;\n+    private Probe livenessProbe;\n+    private Probe readinessProbe;\n+    private JvmOptions jvmOptions;\n+    private Map<String, Object> metrics;\n+    private Tracing tracing;\n+    private Affinity affinity;\n+    private List<Toleration> tolerations;\n+    private KafkaConnectTemplate template;\n+    private ExternalConfiguration externalConfiguration;\n+\n+    private Map<String, Object> additionalProperties = new HashMap<>(0);\n+\n+    @Description(\"The number of pods in the Kafka Connect group.\")\n+    @DefaultValue(\"3\")\n+    public Integer getReplicas() {\n+        return replicas;\n+    }\n+\n+    @Description(\"Logging configuration for Kafka Connect\")\n+    @JsonInclude(value = JsonInclude.Include.NON_NULL)\n+    public Logging getLogging() {\n+        return logging == null ? new InlineLogging() : logging;\n+    }\n+\n+    public void setLogging(Logging logging) {\n+        this.logging = logging;\n+    }\n+\n+    public void setReplicas(Integer replicas) {\n+        this.replicas = replicas;\n+    }\n+\n+    @Description(\"The Kafka Connect version. Defaults to {DefaultKafkaVersion}. \" +\n+            \"Consult the user documentation to understand the process required to upgrade or downgrade the version.\")\n+    public String getVersion() {\n+        return version;\n+    }\n+\n+    public void setVersion(String version) {\n+        this.version = version;\n+    }\n+\n+    @Description(\"The docker image for the pods.\")\n+    @JsonInclude(JsonInclude.Include.NON_DEFAULT)\n+    public String getImage() {\n+        return image;\n+    }\n+\n+    public void setImage(String image) {\n+        this.image = image;\n+    }\n+\n+    @JsonInclude(JsonInclude.Include.NON_NULL)\n+    @Description(\"CPU and memory resources to reserve.\")", "originalCommit": "5f29861d2620b2e439fb49a819036cdb476d0bdb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "638b011a149095da519bb3a62dbdef414b13c6db", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/638b011a149095da519bb3a62dbdef414b13c6db", "message": "Remove Kafka Connect properties from root of KafkaMirrorMaker2Spec\n\nThis commit refactors KafkaMirrorMaker2Spec to extend a new\nAbstractKafkaConnectSpec that doesn't include the properties that\nshould only apply at the `spec.clusters` level. It also uses the\nAbstractKafkaConnectSpec as the super class of the KafkaConnectSpec.\n\nSigned-off-by: Andrew Borley <borley@uk.ibm.com>", "committedDate": "2020-02-14T11:08:05Z", "type": "commit"}, {"oid": "b2842de9804b5d488d2124fc9e317456acaef0a7", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/b2842de9804b5d488d2124fc9e317456acaef0a7", "message": "Address review comments\n\nSigned-off-by: Andrew Borley <borley@uk.ibm.com>", "committedDate": "2020-02-14T11:08:05Z", "type": "commit"}, {"oid": "b2842de9804b5d488d2124fc9e317456acaef0a7", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/b2842de9804b5d488d2124fc9e317456acaef0a7", "message": "Address review comments\n\nSigned-off-by: Andrew Borley <borley@uk.ibm.com>", "committedDate": "2020-02-14T11:08:05Z", "type": "forcePushed"}, {"oid": "c5b54b83789d7427c7a85eed7e333fb5e169698e", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/c5b54b83789d7427c7a85eed7e333fb5e169698e", "message": "Add missed helm artifacts\n\nSigned-off-by: Andrew Borley <borley@uk.ibm.com>", "committedDate": "2020-02-14T13:15:47Z", "type": "commit"}]}