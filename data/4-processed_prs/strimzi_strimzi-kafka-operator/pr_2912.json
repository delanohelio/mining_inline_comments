{"pr_number": 2912, "pr_title": "[MO] - [system test] -> cruise control tests", "pr_createdAt": "2020-04-29T13:07:28Z", "pr_url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2912", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzMxNDM2NA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2912#discussion_r417314364", "bodyText": "Why do you replace kafka instead of put CC directly into first deploy?", "author": "Frawless", "createdAt": "2020-04-29T13:29:42Z", "path": "systemtest/src/test/java/io/strimzi/systemtest/CruiseControlST.java", "diffHunk": "@@ -35,20 +49,111 @@ void setup() {\n         applyRoleBindings(NAMESPACE);\n         // 050-Deployment\n         KubernetesResource.clusterOperator(NAMESPACE).done();\n+\n+        KafkaResource.kafkaWithCruiseControl(CLUSTER_NAME, 3, 3).done();\n     }\n \n     @Test\n-    void testCCDeployment()  {\n-        KafkaResource.kafkaWithCruiseControl(CLUSTER_NAME, 3, 3).done();\n+    void testCruiseControlDeployment()  {\n+        String ccStatusCommand = \"curl -X GET localhost:\" + CRUISE_CONTROL_DEFAULT_PORT + CRUISE_CONTROL_ENDPOINT;\n \n-        String ccStatusCommand = \"curl -X GET localhost:9090/kafkacruisecontrol/state\";\n         String ccPodName = PodUtils.getFirstPodNameContaining(\"cruise-control\");\n-        LOGGER.info(\"Using pod: \" + ccPodName);\n+\n         String result = cmdKubeClient().execInPodContainer(ccPodName, \"cruise-control\",\n-                \"/bin/bash\", \"-c\", ccStatusCommand).out();\n+            \"/bin/bash\", \"-c\", ccStatusCommand).out();\n+\n+        LOGGER.info(\"Verifying that {} is running inside the Pod {} and REST API is available\", CRUISE_CONTROL_NAME, ccPodName);\n \n         assertThat(result, not(containsString(\"404\")));\n         assertThat(result, containsString(\"RUNNING\"));\n+\n+        verifyThatCruiseControlTopicsArePresent();\n+    }\n+\n+    @Test\n+    void testInstallationAndCreatedTopics() {\n+\n+        String clusterName = \"second\" + CLUSTER_NAME;\n+\n+        KafkaResource.kafkaEphemeral(clusterName + \"1\", 3, 1).done();\n+\n+        KafkaResource.replaceKafkaResource(clusterName, kafka -> {", "originalCommit": "81fd90e2ea44635a2a891625f53de46601073ae7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzkxOTc4OQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2912#discussion_r417919789", "bodyText": "Already discussed, I have reworked it. Now i using the shared kafka where i firstly remove the CC and the add him...", "author": "see-quick", "createdAt": "2020-04-30T10:44:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzMxNDM2NA=="}], "type": "inlineReview"}, {"oid": "5a5dba6f1a39b1eb884c98505c50aeb009c21a3d", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/5a5dba6f1a39b1eb884c98505c50aeb009c21a3d", "message": "[MO] - [basic tests] -> done\n\nSigned-off-by: morsak <xorsak02@stud.fit.vutbr.cz>", "committedDate": "2020-04-30T10:41:08Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzkzNDA2Mg==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2912#discussion_r417934062", "bodyText": "So we have a java client that is set up to query the state endpoint. Obviously we don;t want to pull the whole cluster-operator module into system-test but would it make sense to move the client into operator-common so that you could use it here?\nWDYT @ppatierno and @kyguy?", "author": "tomncooper", "createdAt": "2020-04-30T11:12:50Z", "path": "systemtest/src/test/java/io/strimzi/systemtest/CruiseControlST.java", "diffHunk": "@@ -4,28 +4,254 @@\n  */\n package io.strimzi.systemtest;\n \n+import io.fabric8.kubernetes.api.model.Container;\n+import io.fabric8.kubernetes.api.model.EnvVar;\n+import io.fabric8.kubernetes.api.model.Pod;\n+import io.strimzi.api.kafka.model.CruiseControlSpec;\n+import io.strimzi.api.kafka.model.KafkaResources;\n+import io.strimzi.api.kafka.model.KafkaTopic;\n+import io.strimzi.api.kafka.model.balancing.BrokerCapacity;\n import io.strimzi.systemtest.resources.KubernetesResource;\n import io.strimzi.systemtest.resources.ResourceManager;\n import io.strimzi.systemtest.resources.crd.KafkaResource;\n+import io.strimzi.systemtest.resources.crd.KafkaTopicResource;\n+import io.strimzi.systemtest.utils.kafkaUtils.KafkaTopicUtils;\n+import io.strimzi.systemtest.utils.kubeUtils.controllers.StatefulSetUtils;\n import io.strimzi.systemtest.utils.kubeUtils.objects.PodUtils;\n+import io.vertx.core.json.JsonObject;\n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.Logger;\n import org.junit.jupiter.api.BeforeAll;\n import org.junit.jupiter.api.Tag;\n import org.junit.jupiter.api.Test;\n \n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Properties;\n+\n+import static io.strimzi.api.kafka.model.KafkaResources.kafkaStatefulSetName;\n import static io.strimzi.systemtest.Constants.REGRESSION;\n import static io.strimzi.test.k8s.KubeClusterResource.cmdKubeClient;\n+import static io.strimzi.test.k8s.KubeClusterResource.kubeClient;\n+import static org.hamcrest.CoreMatchers.nullValue;\n import static org.hamcrest.MatcherAssert.assertThat;\n-import static org.hamcrest.Matchers.containsString;\n-import static org.hamcrest.Matchers.not;\n+import static org.hamcrest.CoreMatchers.containsString;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.CoreMatchers.not;\n \n @Tag(REGRESSION)\n public class CruiseControlST extends BaseST {\n \n     private static final Logger LOGGER = LogManager.getLogger(CruiseControlST.class);\n+    private static final String NAMESPACE = \"cruise-control-test\";\n+\n+    private static final String CRUISE_CONTROL_NAME = \"Cruise Control\";\n+    private static final int CRUISE_CONTROL_DEFAULT_PORT = 9090;\n+    private static final String CRUISE_CONTROL_ENDPOINT = \"/kafkacruisecontrol/state\";\n+    private static final String CRUISE_CONTROL_POD_PREFIX = CLUSTER_NAME + \"-cruise-control-\";\n+\n+    private static final String CRUISE_CONTROL_CAPACITY_FILE_PATH = \"/tmp/capacity.json\";\n+    private static final String CRUISE_CONTROL_CONFIGURATION_FILE_PATH = \"/tmp/cruisecontrol.properties\";\n+\n+    private static final String CRUISE_CONTROL_METRICS_TOPIC = \"strimzi.cruisecontrol.metrics\"; // partitions 1 , rf - 1\n+    private static final String CRUISE_CONTROL_MODEL_TRAINING_SAMPLES_TOPIC = \"strimzi.cruisecontrol.modeltrainingsamples\"; // partitions 32 , rf - 2\n+    private static final String CRUISE_CONTROL_PARTITION_METRICS_SAMPLES_TOPIC = \"strimzi.cruisecontrol.partitionmetricsamples\"; // partitions 32 , rf - 2\n+\n+    @Test\n+    void testCruiseControlDeployment()  {\n+        String ccStatusCommand = \"curl -X GET localhost:\" + CRUISE_CONTROL_DEFAULT_PORT + CRUISE_CONTROL_ENDPOINT;", "originalCommit": "5a5dba6f1a39b1eb884c98505c50aeb009c21a3d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA0MjA4Nw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2912#discussion_r418042087", "bodyText": "@tomncooper +1 We can update right after as the java client gets into master", "author": "kyguy", "createdAt": "2020-04-30T14:14:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzkzNDA2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA2NTgzOQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2912#discussion_r418065839", "bodyText": "Well it may not be worth it for one method but if it turns out we need it for more tests we could move it to operator-common", "author": "tomncooper", "createdAt": "2020-04-30T14:46:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzkzNDA2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI5Mjc5MA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2912#discussion_r418292790", "bodyText": "The difference between using curl and our Java API client is that the returned JSON could be different.\nFor example, related to the user tasks endpoint, the client manipulate the original JSON got from the HTTP request in order to produce a simplified one for the specific usage of the operator. Maybe we should avoid this manipulation and moving the logic to extract right information at the operator level? I am not sure that using a client which doesn't return the raw JSON is the right thing to do for the STs.", "author": "ppatierno", "createdAt": "2020-04-30T21:13:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzkzNDA2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDExMTE2Nw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2912#discussion_r420111167", "bodyText": "So, do you suggest to use the curl utility for all API calls? In that case, we will not be verifying the API itself on the system level, which invokes me another question. It is good approach to use the curl and not API?", "author": "see-quick", "createdAt": "2020-05-05T13:32:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzkzNDA2Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzkzNjI0MA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2912#discussion_r417936240", "bodyText": "This is a good question. My feeling is that we should leave it there (and document that it will be there) because the user might want to reactive CC at a later date. The user can always delete it manually later.\nSo the topic should stay, unless @ppatierno or @kyguy object?", "author": "tomncooper", "createdAt": "2020-04-30T11:17:36Z", "path": "systemtest/src/test/java/io/strimzi/systemtest/CruiseControlST.java", "diffHunk": "@@ -4,28 +4,254 @@\n  */\n package io.strimzi.systemtest;\n \n+import io.fabric8.kubernetes.api.model.Container;\n+import io.fabric8.kubernetes.api.model.EnvVar;\n+import io.fabric8.kubernetes.api.model.Pod;\n+import io.strimzi.api.kafka.model.CruiseControlSpec;\n+import io.strimzi.api.kafka.model.KafkaResources;\n+import io.strimzi.api.kafka.model.KafkaTopic;\n+import io.strimzi.api.kafka.model.balancing.BrokerCapacity;\n import io.strimzi.systemtest.resources.KubernetesResource;\n import io.strimzi.systemtest.resources.ResourceManager;\n import io.strimzi.systemtest.resources.crd.KafkaResource;\n+import io.strimzi.systemtest.resources.crd.KafkaTopicResource;\n+import io.strimzi.systemtest.utils.kafkaUtils.KafkaTopicUtils;\n+import io.strimzi.systemtest.utils.kubeUtils.controllers.StatefulSetUtils;\n import io.strimzi.systemtest.utils.kubeUtils.objects.PodUtils;\n+import io.vertx.core.json.JsonObject;\n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.Logger;\n import org.junit.jupiter.api.BeforeAll;\n import org.junit.jupiter.api.Tag;\n import org.junit.jupiter.api.Test;\n \n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Properties;\n+\n+import static io.strimzi.api.kafka.model.KafkaResources.kafkaStatefulSetName;\n import static io.strimzi.systemtest.Constants.REGRESSION;\n import static io.strimzi.test.k8s.KubeClusterResource.cmdKubeClient;\n+import static io.strimzi.test.k8s.KubeClusterResource.kubeClient;\n+import static org.hamcrest.CoreMatchers.nullValue;\n import static org.hamcrest.MatcherAssert.assertThat;\n-import static org.hamcrest.Matchers.containsString;\n-import static org.hamcrest.Matchers.not;\n+import static org.hamcrest.CoreMatchers.containsString;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.CoreMatchers.not;\n \n @Tag(REGRESSION)\n public class CruiseControlST extends BaseST {\n \n     private static final Logger LOGGER = LogManager.getLogger(CruiseControlST.class);\n+    private static final String NAMESPACE = \"cruise-control-test\";\n+\n+    private static final String CRUISE_CONTROL_NAME = \"Cruise Control\";\n+    private static final int CRUISE_CONTROL_DEFAULT_PORT = 9090;\n+    private static final String CRUISE_CONTROL_ENDPOINT = \"/kafkacruisecontrol/state\";\n+    private static final String CRUISE_CONTROL_POD_PREFIX = CLUSTER_NAME + \"-cruise-control-\";\n+\n+    private static final String CRUISE_CONTROL_CAPACITY_FILE_PATH = \"/tmp/capacity.json\";\n+    private static final String CRUISE_CONTROL_CONFIGURATION_FILE_PATH = \"/tmp/cruisecontrol.properties\";\n+\n+    private static final String CRUISE_CONTROL_METRICS_TOPIC = \"strimzi.cruisecontrol.metrics\"; // partitions 1 , rf - 1\n+    private static final String CRUISE_CONTROL_MODEL_TRAINING_SAMPLES_TOPIC = \"strimzi.cruisecontrol.modeltrainingsamples\"; // partitions 32 , rf - 2\n+    private static final String CRUISE_CONTROL_PARTITION_METRICS_SAMPLES_TOPIC = \"strimzi.cruisecontrol.partitionmetricsamples\"; // partitions 32 , rf - 2\n+\n+    @Test\n+    void testCruiseControlDeployment()  {\n+        String ccStatusCommand = \"curl -X GET localhost:\" + CRUISE_CONTROL_DEFAULT_PORT + CRUISE_CONTROL_ENDPOINT;\n+\n+        String ccPodName = PodUtils.getFirstPodNameContaining(\"cruise-control\");\n+\n+        String result = cmdKubeClient().execInPodContainer(ccPodName, \"cruise-control\",\n+            \"/bin/bash\", \"-c\", ccStatusCommand).out();\n+\n+        LOGGER.info(\"Verifying that {} is running inside the Pod {} and REST API is available\", CRUISE_CONTROL_NAME, ccPodName);\n+\n+        assertThat(result, not(containsString(\"404\")));\n+        assertThat(result, containsString(\"RUNNING\"));\n+\n+        verifyThatCruiseControlTopicsArePresent();\n+    }\n+\n+    @Test\n+    void testUninstallingAndInstallationCruiseControl() {\n+\n+        Map<String, String> kafkaPods = StatefulSetUtils.ssSnapshot(KafkaResources.kafkaStatefulSetName(CLUSTER_NAME));\n+\n+        KafkaResource.replaceKafkaResource(CLUSTER_NAME, kafka -> {\n+            LOGGER.info(\"Removing Cruise Control to the classic Kafka.\");\n+            kafka.getSpec().setCruiseControl(null);\n+        });\n+\n+        StatefulSetUtils.waitTillSsHasRolled(kafkaStatefulSetName(CLUSTER_NAME), 3, kafkaPods);\n+\n+        LOGGER.info(\"Verifying that in {} is not present in the Kafka cluster\", CRUISE_CONTROL_NAME);\n+        assertThat(KafkaResource.kafkaClient().inNamespace(NAMESPACE).withName(CLUSTER_NAME).get().getSpec().getCruiseControl(), nullValue());\n+\n+        LOGGER.info(\"Verifying that {} pod is not present\", CRUISE_CONTROL_NAME);\n+        assertThat(kubeClient().listPodsByPrefixInName(CRUISE_CONTROL_POD_PREFIX).size(), is(0));\n+\n+        // TODO: should topic be deleted ? CURRENTLY CC let the topics in the kafka", "originalCommit": "5a5dba6f1a39b1eb884c98505c50aeb009c21a3d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA2NjcyNA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2912#discussion_r418066724", "bodyText": "@tomncooper +1", "author": "kyguy", "createdAt": "2020-04-30T14:47:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzkzNjI0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI5NjAxNw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2912#discussion_r418296017", "bodyText": "I agree. Is that useful leaving the topic there for a sort of historical analysys of the metrics? Not sure if it's something that CC supports.", "author": "ppatierno", "createdAt": "2020-04-30T21:20:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzkzNjI0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDEwNDUyMQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2912#discussion_r420104521", "bodyText": "Good. ))", "author": "see-quick", "createdAt": "2020-05-05T13:23:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzkzNjI0MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzkzODM0NA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2912#discussion_r417938344", "bodyText": "How is this handled for Kafka? Obviously, we don't want to update the CR with all the default values. CC prints all configs to its log at startup so you could head the log and grep for the setting?", "author": "tomncooper", "createdAt": "2020-04-30T11:21:51Z", "path": "systemtest/src/test/java/io/strimzi/systemtest/CruiseControlST.java", "diffHunk": "@@ -4,28 +4,254 @@\n  */\n package io.strimzi.systemtest;\n \n+import io.fabric8.kubernetes.api.model.Container;\n+import io.fabric8.kubernetes.api.model.EnvVar;\n+import io.fabric8.kubernetes.api.model.Pod;\n+import io.strimzi.api.kafka.model.CruiseControlSpec;\n+import io.strimzi.api.kafka.model.KafkaResources;\n+import io.strimzi.api.kafka.model.KafkaTopic;\n+import io.strimzi.api.kafka.model.balancing.BrokerCapacity;\n import io.strimzi.systemtest.resources.KubernetesResource;\n import io.strimzi.systemtest.resources.ResourceManager;\n import io.strimzi.systemtest.resources.crd.KafkaResource;\n+import io.strimzi.systemtest.resources.crd.KafkaTopicResource;\n+import io.strimzi.systemtest.utils.kafkaUtils.KafkaTopicUtils;\n+import io.strimzi.systemtest.utils.kubeUtils.controllers.StatefulSetUtils;\n import io.strimzi.systemtest.utils.kubeUtils.objects.PodUtils;\n+import io.vertx.core.json.JsonObject;\n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.Logger;\n import org.junit.jupiter.api.BeforeAll;\n import org.junit.jupiter.api.Tag;\n import org.junit.jupiter.api.Test;\n \n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Properties;\n+\n+import static io.strimzi.api.kafka.model.KafkaResources.kafkaStatefulSetName;\n import static io.strimzi.systemtest.Constants.REGRESSION;\n import static io.strimzi.test.k8s.KubeClusterResource.cmdKubeClient;\n+import static io.strimzi.test.k8s.KubeClusterResource.kubeClient;\n+import static org.hamcrest.CoreMatchers.nullValue;\n import static org.hamcrest.MatcherAssert.assertThat;\n-import static org.hamcrest.Matchers.containsString;\n-import static org.hamcrest.Matchers.not;\n+import static org.hamcrest.CoreMatchers.containsString;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.CoreMatchers.not;\n \n @Tag(REGRESSION)\n public class CruiseControlST extends BaseST {\n \n     private static final Logger LOGGER = LogManager.getLogger(CruiseControlST.class);\n+    private static final String NAMESPACE = \"cruise-control-test\";\n+\n+    private static final String CRUISE_CONTROL_NAME = \"Cruise Control\";\n+    private static final int CRUISE_CONTROL_DEFAULT_PORT = 9090;\n+    private static final String CRUISE_CONTROL_ENDPOINT = \"/kafkacruisecontrol/state\";\n+    private static final String CRUISE_CONTROL_POD_PREFIX = CLUSTER_NAME + \"-cruise-control-\";\n+\n+    private static final String CRUISE_CONTROL_CAPACITY_FILE_PATH = \"/tmp/capacity.json\";\n+    private static final String CRUISE_CONTROL_CONFIGURATION_FILE_PATH = \"/tmp/cruisecontrol.properties\";\n+\n+    private static final String CRUISE_CONTROL_METRICS_TOPIC = \"strimzi.cruisecontrol.metrics\"; // partitions 1 , rf - 1\n+    private static final String CRUISE_CONTROL_MODEL_TRAINING_SAMPLES_TOPIC = \"strimzi.cruisecontrol.modeltrainingsamples\"; // partitions 32 , rf - 2\n+    private static final String CRUISE_CONTROL_PARTITION_METRICS_SAMPLES_TOPIC = \"strimzi.cruisecontrol.partitionmetricsamples\"; // partitions 32 , rf - 2\n+\n+    @Test\n+    void testCruiseControlDeployment()  {\n+        String ccStatusCommand = \"curl -X GET localhost:\" + CRUISE_CONTROL_DEFAULT_PORT + CRUISE_CONTROL_ENDPOINT;\n+\n+        String ccPodName = PodUtils.getFirstPodNameContaining(\"cruise-control\");\n+\n+        String result = cmdKubeClient().execInPodContainer(ccPodName, \"cruise-control\",\n+            \"/bin/bash\", \"-c\", ccStatusCommand).out();\n+\n+        LOGGER.info(\"Verifying that {} is running inside the Pod {} and REST API is available\", CRUISE_CONTROL_NAME, ccPodName);\n+\n+        assertThat(result, not(containsString(\"404\")));\n+        assertThat(result, containsString(\"RUNNING\"));\n+\n+        verifyThatCruiseControlTopicsArePresent();\n+    }\n+\n+    @Test\n+    void testUninstallingAndInstallationCruiseControl() {\n+\n+        Map<String, String> kafkaPods = StatefulSetUtils.ssSnapshot(KafkaResources.kafkaStatefulSetName(CLUSTER_NAME));\n+\n+        KafkaResource.replaceKafkaResource(CLUSTER_NAME, kafka -> {\n+            LOGGER.info(\"Removing Cruise Control to the classic Kafka.\");\n+            kafka.getSpec().setCruiseControl(null);\n+        });\n+\n+        StatefulSetUtils.waitTillSsHasRolled(kafkaStatefulSetName(CLUSTER_NAME), 3, kafkaPods);\n+\n+        LOGGER.info(\"Verifying that in {} is not present in the Kafka cluster\", CRUISE_CONTROL_NAME);\n+        assertThat(KafkaResource.kafkaClient().inNamespace(NAMESPACE).withName(CLUSTER_NAME).get().getSpec().getCruiseControl(), nullValue());\n+\n+        LOGGER.info(\"Verifying that {} pod is not present\", CRUISE_CONTROL_NAME);\n+        assertThat(kubeClient().listPodsByPrefixInName(CRUISE_CONTROL_POD_PREFIX).size(), is(0));\n+\n+        // TODO: should topic be deleted ? CURRENTLY CC let the topics in the kafka\n+//        verifyThatCruiseControlTopicsAreNotPresent();\n+\n+        kafkaPods = StatefulSetUtils.ssSnapshot(KafkaResources.kafkaStatefulSetName(CLUSTER_NAME));\n+\n+        KafkaResource.replaceKafkaResource(CLUSTER_NAME, kafka -> {\n+            LOGGER.info(\"Adding Cruise Control to the classic Kafka.\");\n+            kafka.getSpec().setCruiseControl(new CruiseControlSpec());\n+        });\n+\n+        StatefulSetUtils.waitTillSsHasRolled(kafkaStatefulSetName(CLUSTER_NAME), 3, kafkaPods);\n+\n+        LOGGER.info(\"Verifying that {} topics are created after CC is instantiated.\", CRUISE_CONTROL_NAME);\n+\n+        KafkaTopicUtils.waitForKafkaTopicReady(CRUISE_CONTROL_METRICS_TOPIC);\n+        KafkaTopicUtils.waitForKafkaTopicReady(CRUISE_CONTROL_MODEL_TRAINING_SAMPLES_TOPIC);\n+        KafkaTopicUtils.waitForKafkaTopicReady(CRUISE_CONTROL_PARTITION_METRICS_SAMPLES_TOPIC);\n+\n+        verifyThatCruiseControlTopicsArePresent();\n+    }\n+\n+    @Test\n+    void testConfigurationChangeTriggersRollingUpdate() {\n+\n+        Map<String, String> kafkaPods = StatefulSetUtils.ssSnapshot(KafkaResources.kafkaStatefulSetName(CLUSTER_NAME));\n+\n+        KafkaResource.replaceKafkaResource(CLUSTER_NAME, kafka -> {\n+            LOGGER.info(\"Adding Cruise Control to the classic Kafka.\");\n+            BrokerCapacity brokerCapacity = kafka.getSpec().getCruiseControl().getBrokerCapacity();\n+\n+            // TODO: this doesn't work because in the Kafka CR there is nothing using `kafka.getSpec().getCruiseControl()` only object,\n+            // TODO: which has some default values by they are not propagated to other fields...", "originalCommit": "5a5dba6f1a39b1eb884c98505c50aeb009c21a3d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI5NzIwMg==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2912#discussion_r418297202", "bodyText": "@see-quick can you elaborate a little bit more I am not sure I got what you mean.", "author": "ppatierno", "createdAt": "2020-04-30T21:23:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzkzODM0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDIxMDY4MQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2912#discussion_r420210681", "bodyText": "So the problem here is that whenever I want to customize the settings of the cruise control, for instance, change the broker capacity I am unable to do it because I will get the NPE. Is it desired? Because how can I change the properties of the Cruise Control?", "author": "see-quick", "createdAt": "2020-05-05T15:44:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzkzODM0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDg5MjQ5MQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2912#discussion_r420892491", "bodyText": "Can't we create a CruiseControlSpec and BrokerCapacity objects using the constructors? e.g.\nCruiseControlSpec cruiseControl = new CruiseControlSpec();\nBrokerCapacity capacity = new BrokerCapacity();\ncapacity.setDisk(\"20000M\");\ncruiseControl.setCapacity(capacity);\nkafka.getSpec.setCruiseControlSpec(cruiseControl);", "author": "kyguy", "createdAt": "2020-05-06T15:40:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzkzODM0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDg5NjEyNg==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2912#discussion_r420896126", "bodyText": "Ah my bad, you are talking about creating a CruiseControl object with the default fields! I had the same problem with this when writing the unit tests and should have made this code more testable back then. Anyways, to get around this, can you do something like:\nCruiseControlSpec cruiseControlSpec = new CruiseControlSpec()\ncruiseControlSpec.setConfig(CruiseControlConfiguration.getCruiseControlDefaultPropertiesMap());\n\nOr can CruiseControlConfiguration.getCruiseControlDefaultPropertiesMap()) not be accessed from system test classes?", "author": "kyguy", "createdAt": "2020-05-06T15:45:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzkzODM0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTMxNDIwMg==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2912#discussion_r421314202", "bodyText": "@kyguy it is not accesible. I have to add cluster-operator module but that does not make any sense. I have changed it like this to be more readable\nCruiseControlSpec cruiseControl = new CruiseControlSpecBuilder()\n                .withNewBrokerCapacity()\n                    .withNewDisk(\"2000M\")\n                .endBrokerCapacity()\n                .build();\n            kafka.getSpec().setCruiseControl(cruiseControl);\n\nand it works...", "author": "see-quick", "createdAt": "2020-05-07T08:02:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzkzODM0NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzkzOTM5Mw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2912#discussion_r417939393", "bodyText": "As above, you could grep the CC log.", "author": "tomncooper", "createdAt": "2020-04-30T11:24:10Z", "path": "systemtest/src/test/java/io/strimzi/systemtest/CruiseControlST.java", "diffHunk": "@@ -4,28 +4,254 @@\n  */\n package io.strimzi.systemtest;\n \n+import io.fabric8.kubernetes.api.model.Container;\n+import io.fabric8.kubernetes.api.model.EnvVar;\n+import io.fabric8.kubernetes.api.model.Pod;\n+import io.strimzi.api.kafka.model.CruiseControlSpec;\n+import io.strimzi.api.kafka.model.KafkaResources;\n+import io.strimzi.api.kafka.model.KafkaTopic;\n+import io.strimzi.api.kafka.model.balancing.BrokerCapacity;\n import io.strimzi.systemtest.resources.KubernetesResource;\n import io.strimzi.systemtest.resources.ResourceManager;\n import io.strimzi.systemtest.resources.crd.KafkaResource;\n+import io.strimzi.systemtest.resources.crd.KafkaTopicResource;\n+import io.strimzi.systemtest.utils.kafkaUtils.KafkaTopicUtils;\n+import io.strimzi.systemtest.utils.kubeUtils.controllers.StatefulSetUtils;\n import io.strimzi.systemtest.utils.kubeUtils.objects.PodUtils;\n+import io.vertx.core.json.JsonObject;\n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.Logger;\n import org.junit.jupiter.api.BeforeAll;\n import org.junit.jupiter.api.Tag;\n import org.junit.jupiter.api.Test;\n \n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Properties;\n+\n+import static io.strimzi.api.kafka.model.KafkaResources.kafkaStatefulSetName;\n import static io.strimzi.systemtest.Constants.REGRESSION;\n import static io.strimzi.test.k8s.KubeClusterResource.cmdKubeClient;\n+import static io.strimzi.test.k8s.KubeClusterResource.kubeClient;\n+import static org.hamcrest.CoreMatchers.nullValue;\n import static org.hamcrest.MatcherAssert.assertThat;\n-import static org.hamcrest.Matchers.containsString;\n-import static org.hamcrest.Matchers.not;\n+import static org.hamcrest.CoreMatchers.containsString;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.CoreMatchers.not;\n \n @Tag(REGRESSION)\n public class CruiseControlST extends BaseST {\n \n     private static final Logger LOGGER = LogManager.getLogger(CruiseControlST.class);\n+    private static final String NAMESPACE = \"cruise-control-test\";\n+\n+    private static final String CRUISE_CONTROL_NAME = \"Cruise Control\";\n+    private static final int CRUISE_CONTROL_DEFAULT_PORT = 9090;\n+    private static final String CRUISE_CONTROL_ENDPOINT = \"/kafkacruisecontrol/state\";\n+    private static final String CRUISE_CONTROL_POD_PREFIX = CLUSTER_NAME + \"-cruise-control-\";\n+\n+    private static final String CRUISE_CONTROL_CAPACITY_FILE_PATH = \"/tmp/capacity.json\";\n+    private static final String CRUISE_CONTROL_CONFIGURATION_FILE_PATH = \"/tmp/cruisecontrol.properties\";\n+\n+    private static final String CRUISE_CONTROL_METRICS_TOPIC = \"strimzi.cruisecontrol.metrics\"; // partitions 1 , rf - 1\n+    private static final String CRUISE_CONTROL_MODEL_TRAINING_SAMPLES_TOPIC = \"strimzi.cruisecontrol.modeltrainingsamples\"; // partitions 32 , rf - 2\n+    private static final String CRUISE_CONTROL_PARTITION_METRICS_SAMPLES_TOPIC = \"strimzi.cruisecontrol.partitionmetricsamples\"; // partitions 32 , rf - 2\n+\n+    @Test\n+    void testCruiseControlDeployment()  {\n+        String ccStatusCommand = \"curl -X GET localhost:\" + CRUISE_CONTROL_DEFAULT_PORT + CRUISE_CONTROL_ENDPOINT;\n+\n+        String ccPodName = PodUtils.getFirstPodNameContaining(\"cruise-control\");\n+\n+        String result = cmdKubeClient().execInPodContainer(ccPodName, \"cruise-control\",\n+            \"/bin/bash\", \"-c\", ccStatusCommand).out();\n+\n+        LOGGER.info(\"Verifying that {} is running inside the Pod {} and REST API is available\", CRUISE_CONTROL_NAME, ccPodName);\n+\n+        assertThat(result, not(containsString(\"404\")));\n+        assertThat(result, containsString(\"RUNNING\"));\n+\n+        verifyThatCruiseControlTopicsArePresent();\n+    }\n+\n+    @Test\n+    void testUninstallingAndInstallationCruiseControl() {\n+\n+        Map<String, String> kafkaPods = StatefulSetUtils.ssSnapshot(KafkaResources.kafkaStatefulSetName(CLUSTER_NAME));\n+\n+        KafkaResource.replaceKafkaResource(CLUSTER_NAME, kafka -> {\n+            LOGGER.info(\"Removing Cruise Control to the classic Kafka.\");\n+            kafka.getSpec().setCruiseControl(null);\n+        });\n+\n+        StatefulSetUtils.waitTillSsHasRolled(kafkaStatefulSetName(CLUSTER_NAME), 3, kafkaPods);\n+\n+        LOGGER.info(\"Verifying that in {} is not present in the Kafka cluster\", CRUISE_CONTROL_NAME);\n+        assertThat(KafkaResource.kafkaClient().inNamespace(NAMESPACE).withName(CLUSTER_NAME).get().getSpec().getCruiseControl(), nullValue());\n+\n+        LOGGER.info(\"Verifying that {} pod is not present\", CRUISE_CONTROL_NAME);\n+        assertThat(kubeClient().listPodsByPrefixInName(CRUISE_CONTROL_POD_PREFIX).size(), is(0));\n+\n+        // TODO: should topic be deleted ? CURRENTLY CC let the topics in the kafka\n+//        verifyThatCruiseControlTopicsAreNotPresent();\n+\n+        kafkaPods = StatefulSetUtils.ssSnapshot(KafkaResources.kafkaStatefulSetName(CLUSTER_NAME));\n+\n+        KafkaResource.replaceKafkaResource(CLUSTER_NAME, kafka -> {\n+            LOGGER.info(\"Adding Cruise Control to the classic Kafka.\");\n+            kafka.getSpec().setCruiseControl(new CruiseControlSpec());\n+        });\n+\n+        StatefulSetUtils.waitTillSsHasRolled(kafkaStatefulSetName(CLUSTER_NAME), 3, kafkaPods);\n+\n+        LOGGER.info(\"Verifying that {} topics are created after CC is instantiated.\", CRUISE_CONTROL_NAME);\n+\n+        KafkaTopicUtils.waitForKafkaTopicReady(CRUISE_CONTROL_METRICS_TOPIC);\n+        KafkaTopicUtils.waitForKafkaTopicReady(CRUISE_CONTROL_MODEL_TRAINING_SAMPLES_TOPIC);\n+        KafkaTopicUtils.waitForKafkaTopicReady(CRUISE_CONTROL_PARTITION_METRICS_SAMPLES_TOPIC);\n+\n+        verifyThatCruiseControlTopicsArePresent();\n+    }\n+\n+    @Test\n+    void testConfigurationChangeTriggersRollingUpdate() {\n+\n+        Map<String, String> kafkaPods = StatefulSetUtils.ssSnapshot(KafkaResources.kafkaStatefulSetName(CLUSTER_NAME));\n+\n+        KafkaResource.replaceKafkaResource(CLUSTER_NAME, kafka -> {\n+            LOGGER.info(\"Adding Cruise Control to the classic Kafka.\");\n+            BrokerCapacity brokerCapacity = kafka.getSpec().getCruiseControl().getBrokerCapacity();\n+\n+            // TODO: this doesn't work because in the Kafka CR there is nothing using `kafka.getSpec().getCruiseControl()` only object,\n+            // TODO: which has some default values by they are not propagated to other fields...\n+            brokerCapacity.setDisk(\"20Gi\");\n+\n+            kafka.getSpec().getCruiseControl().setBrokerCapacity(brokerCapacity);\n+        });\n+\n+        StatefulSetUtils.waitTillSsHasRolled(kafkaStatefulSetName(CLUSTER_NAME), 3, kafkaPods);\n+\n+        KafkaTopicUtils.waitForKafkaTopicReady(CRUISE_CONTROL_METRICS_TOPIC);\n+        KafkaTopicUtils.waitForKafkaTopicReady(CRUISE_CONTROL_MODEL_TRAINING_SAMPLES_TOPIC);\n+        KafkaTopicUtils.waitForKafkaTopicReady(CRUISE_CONTROL_PARTITION_METRICS_SAMPLES_TOPIC);\n+\n+        verifyThatCruiseControlTopicsArePresent();\n+    }\n+\n+    @Test\n+    void testConfigurationReflection() throws IOException {\n+        Pod cruiseControlPod = kubeClient().listPodsByPrefixInName(CRUISE_CONTROL_POD_PREFIX).get(0);\n+\n+        String cruiseControlPodName = cruiseControlPod.getMetadata().getName();\n+\n+        String configurationFileContent = cmdKubeClient().execInPod(cruiseControlPodName, \"/bin/bash\", \"-c\", \"cat \" + CRUISE_CONTROL_CONFIGURATION_FILE_PATH).out();\n \n-    public static final String NAMESPACE = \"cruise-control-test\";\n+        InputStream configurationFileStream = new ByteArrayInputStream(configurationFileContent.getBytes(StandardCharsets.UTF_8));\n+\n+        Properties fileConfiguration = new Properties();\n+        fileConfiguration.load(configurationFileStream);\n+\n+        Container cruiseControlContainer = null;\n+\n+        for (Container container : cruiseControlPod.getSpec().getContainers()) {\n+            if (container.getName().equals(\"cruise-control\")) {\n+                cruiseControlContainer = container;\n+            }\n+        }\n+\n+        EnvVar cruiseControlConfiguration = null;\n+\n+        for (EnvVar envVar : Objects.requireNonNull(cruiseControlContainer).getEnv()) {\n+            if (envVar.getName().equals(\"CRUISE_CONTROL_CONFIGURATION\")) {\n+                cruiseControlConfiguration = envVar;\n+            }\n+        }\n+\n+        InputStream configurationContainerStream = new ByteArrayInputStream(Objects.requireNonNull(cruiseControlConfiguration).getValue().getBytes(StandardCharsets.UTF_8));\n+\n+        Properties containerConfiguration = new Properties();\n+        containerConfiguration.load(configurationContainerStream);\n+\n+        LOGGER.info(\"Verifying that all configuration in the cruise control container matching the cruise control file {} properties\", CRUISE_CONTROL_CONFIGURATION_FILE_PATH);\n+\n+        assertThat(containerConfiguration.getProperty(\"num.partition.metrics.windows\"), is(fileConfiguration.getProperty(\"num.partition.metrics.windows\")));\n+        assertThat(containerConfiguration.getProperty(\"completed.user.task.retention.time.ms\"), is(fileConfiguration.getProperty(\"completed.user.task.retention.time.ms\")));\n+        assertThat(containerConfiguration.getProperty(\"num.broker.metrics.windows\"), is(fileConfiguration.getProperty(\"num.broker.metrics.windows\")));\n+        assertThat(containerConfiguration.getProperty(\"broker.metrics.window.ms\"), is(fileConfiguration.getProperty(\"broker.metrics.window.ms\")));\n+        assertThat(containerConfiguration.getProperty(\"default.goals\"), is(fileConfiguration.getProperty(\"default.goals\")));\n+        assertThat(containerConfiguration.getProperty(\"partition.metrics.window.ms\"), is(fileConfiguration.getProperty(\"partition.metrics.window.ms\")));\n+        assertThat(containerConfiguration.getProperty(\"goals\"), is(fileConfiguration.getProperty(\"goals\")));\n+\n+        // TODO: is there some way to fetch the configuration in the Kafka CR?? (it is default) -> but where i can find it", "originalCommit": "5a5dba6f1a39b1eb884c98505c50aeb009c21a3d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDIxMTk0Ng==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2912#discussion_r420211946", "bodyText": "is this only way to grep the log @tomncooper . I do not like this solution is there any alternative? If no, I will use this log but in general logs in the containers are not so reliable.", "author": "see-quick", "createdAt": "2020-05-05T15:46:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzkzOTM5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDg4MzU3OA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2912#discussion_r420883578", "bodyText": "There are no default settings for CC specified in the Kafka CR, but you could add/override CC settings in the Kafka CR and check that they match the generated CC properties file in the container", "author": "kyguy", "createdAt": "2020-05-06T15:29:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzkzOTM5Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODAzMTI1OA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2912#discussion_r418031258", "bodyText": "Is this just a formatting change or was this an accident?", "author": "kyguy", "createdAt": "2020-04-30T13:59:00Z", "path": "systemtest/src/main/java/io/strimzi/systemtest/resources/crd/KafkaResource.java", "diffHunk": "@@ -111,7 +111,8 @@ public static DoneableKafka kafkaWithMetrics(String name, int kafkaReplicas, int\n \n     public static DoneableKafka kafkaWithCruiseControl(String name, int kafkaReplicas, int zookeeperReplicas) {\n         Kafka kafka = getKafkaFromYaml(PATH_TO_KAFKA_CRUISE_CONTROL_CONFIG);\n-        return deployKafka(defaultKafka(kafka, name, kafkaReplicas, zookeeperReplicas).build());\n+        return deployKafka(defaultKafka(kafka, name, kafkaReplicas, zookeeperReplicas)\n+            .build());", "originalCommit": "5a5dba6f1a39b1eb884c98505c50aeb009c21a3d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDEyMzUyNA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2912#discussion_r420123524", "bodyText": "Good catch....accident", "author": "see-quick", "createdAt": "2020-05-05T13:49:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODAzMTI1OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI5MDc5OQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2912#discussion_r418290799", "bodyText": "It is more specifically the state endpoint", "author": "ppatierno", "createdAt": "2020-04-30T21:09:44Z", "path": "systemtest/src/test/java/io/strimzi/systemtest/CruiseControlST.java", "diffHunk": "@@ -4,28 +4,254 @@\n  */\n package io.strimzi.systemtest;\n \n+import io.fabric8.kubernetes.api.model.Container;\n+import io.fabric8.kubernetes.api.model.EnvVar;\n+import io.fabric8.kubernetes.api.model.Pod;\n+import io.strimzi.api.kafka.model.CruiseControlSpec;\n+import io.strimzi.api.kafka.model.KafkaResources;\n+import io.strimzi.api.kafka.model.KafkaTopic;\n+import io.strimzi.api.kafka.model.balancing.BrokerCapacity;\n import io.strimzi.systemtest.resources.KubernetesResource;\n import io.strimzi.systemtest.resources.ResourceManager;\n import io.strimzi.systemtest.resources.crd.KafkaResource;\n+import io.strimzi.systemtest.resources.crd.KafkaTopicResource;\n+import io.strimzi.systemtest.utils.kafkaUtils.KafkaTopicUtils;\n+import io.strimzi.systemtest.utils.kubeUtils.controllers.StatefulSetUtils;\n import io.strimzi.systemtest.utils.kubeUtils.objects.PodUtils;\n+import io.vertx.core.json.JsonObject;\n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.Logger;\n import org.junit.jupiter.api.BeforeAll;\n import org.junit.jupiter.api.Tag;\n import org.junit.jupiter.api.Test;\n \n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Properties;\n+\n+import static io.strimzi.api.kafka.model.KafkaResources.kafkaStatefulSetName;\n import static io.strimzi.systemtest.Constants.REGRESSION;\n import static io.strimzi.test.k8s.KubeClusterResource.cmdKubeClient;\n+import static io.strimzi.test.k8s.KubeClusterResource.kubeClient;\n+import static org.hamcrest.CoreMatchers.nullValue;\n import static org.hamcrest.MatcherAssert.assertThat;\n-import static org.hamcrest.Matchers.containsString;\n-import static org.hamcrest.Matchers.not;\n+import static org.hamcrest.CoreMatchers.containsString;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.CoreMatchers.not;\n \n @Tag(REGRESSION)\n public class CruiseControlST extends BaseST {\n \n     private static final Logger LOGGER = LogManager.getLogger(CruiseControlST.class);\n+    private static final String NAMESPACE = \"cruise-control-test\";\n+\n+    private static final String CRUISE_CONTROL_NAME = \"Cruise Control\";\n+    private static final int CRUISE_CONTROL_DEFAULT_PORT = 9090;\n+    private static final String CRUISE_CONTROL_ENDPOINT = \"/kafkacruisecontrol/state\";", "originalCommit": "5a5dba6f1a39b1eb884c98505c50aeb009c21a3d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI5MzYxNA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2912#discussion_r418293614", "bodyText": "As far as I remember the state endpoint return the status of various services running or not on CC. Maybe just checking that Running exists is not enough to test that CC is working properly.", "author": "ppatierno", "createdAt": "2020-04-30T21:15:41Z", "path": "systemtest/src/test/java/io/strimzi/systemtest/CruiseControlST.java", "diffHunk": "@@ -4,28 +4,254 @@\n  */\n package io.strimzi.systemtest;\n \n+import io.fabric8.kubernetes.api.model.Container;\n+import io.fabric8.kubernetes.api.model.EnvVar;\n+import io.fabric8.kubernetes.api.model.Pod;\n+import io.strimzi.api.kafka.model.CruiseControlSpec;\n+import io.strimzi.api.kafka.model.KafkaResources;\n+import io.strimzi.api.kafka.model.KafkaTopic;\n+import io.strimzi.api.kafka.model.balancing.BrokerCapacity;\n import io.strimzi.systemtest.resources.KubernetesResource;\n import io.strimzi.systemtest.resources.ResourceManager;\n import io.strimzi.systemtest.resources.crd.KafkaResource;\n+import io.strimzi.systemtest.resources.crd.KafkaTopicResource;\n+import io.strimzi.systemtest.utils.kafkaUtils.KafkaTopicUtils;\n+import io.strimzi.systemtest.utils.kubeUtils.controllers.StatefulSetUtils;\n import io.strimzi.systemtest.utils.kubeUtils.objects.PodUtils;\n+import io.vertx.core.json.JsonObject;\n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.Logger;\n import org.junit.jupiter.api.BeforeAll;\n import org.junit.jupiter.api.Tag;\n import org.junit.jupiter.api.Test;\n \n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Properties;\n+\n+import static io.strimzi.api.kafka.model.KafkaResources.kafkaStatefulSetName;\n import static io.strimzi.systemtest.Constants.REGRESSION;\n import static io.strimzi.test.k8s.KubeClusterResource.cmdKubeClient;\n+import static io.strimzi.test.k8s.KubeClusterResource.kubeClient;\n+import static org.hamcrest.CoreMatchers.nullValue;\n import static org.hamcrest.MatcherAssert.assertThat;\n-import static org.hamcrest.Matchers.containsString;\n-import static org.hamcrest.Matchers.not;\n+import static org.hamcrest.CoreMatchers.containsString;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.CoreMatchers.not;\n \n @Tag(REGRESSION)\n public class CruiseControlST extends BaseST {\n \n     private static final Logger LOGGER = LogManager.getLogger(CruiseControlST.class);\n+    private static final String NAMESPACE = \"cruise-control-test\";\n+\n+    private static final String CRUISE_CONTROL_NAME = \"Cruise Control\";\n+    private static final int CRUISE_CONTROL_DEFAULT_PORT = 9090;\n+    private static final String CRUISE_CONTROL_ENDPOINT = \"/kafkacruisecontrol/state\";\n+    private static final String CRUISE_CONTROL_POD_PREFIX = CLUSTER_NAME + \"-cruise-control-\";\n+\n+    private static final String CRUISE_CONTROL_CAPACITY_FILE_PATH = \"/tmp/capacity.json\";\n+    private static final String CRUISE_CONTROL_CONFIGURATION_FILE_PATH = \"/tmp/cruisecontrol.properties\";\n+\n+    private static final String CRUISE_CONTROL_METRICS_TOPIC = \"strimzi.cruisecontrol.metrics\"; // partitions 1 , rf - 1\n+    private static final String CRUISE_CONTROL_MODEL_TRAINING_SAMPLES_TOPIC = \"strimzi.cruisecontrol.modeltrainingsamples\"; // partitions 32 , rf - 2\n+    private static final String CRUISE_CONTROL_PARTITION_METRICS_SAMPLES_TOPIC = \"strimzi.cruisecontrol.partitionmetricsamples\"; // partitions 32 , rf - 2\n+\n+    @Test\n+    void testCruiseControlDeployment()  {\n+        String ccStatusCommand = \"curl -X GET localhost:\" + CRUISE_CONTROL_DEFAULT_PORT + CRUISE_CONTROL_ENDPOINT;\n+\n+        String ccPodName = PodUtils.getFirstPodNameContaining(\"cruise-control\");\n+\n+        String result = cmdKubeClient().execInPodContainer(ccPodName, \"cruise-control\",\n+            \"/bin/bash\", \"-c\", ccStatusCommand).out();\n+\n+        LOGGER.info(\"Verifying that {} is running inside the Pod {} and REST API is available\", CRUISE_CONTROL_NAME, ccPodName);\n+\n+        assertThat(result, not(containsString(\"404\")));\n+        assertThat(result, containsString(\"RUNNING\"));", "originalCommit": "5a5dba6f1a39b1eb884c98505c50aeb009c21a3d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDIxMjM3MQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2912#discussion_r420212371", "bodyText": "Some suggestion what is needed to verify?", "author": "see-quick", "createdAt": "2020-05-05T15:46:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI5MzYxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTMyMzEzNA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2912#discussion_r421323134", "bodyText": "this is an example of response ...\n{\n  \"AnalyzerState\": {\n    \"isProposalReady\": false,\n    \"readyGoals\": []\n  },\n  \"MonitorState\": {\n    \"trainingPct\": 0,\n    \"trained\": false,\n    \"numFlawedPartitions\": 0,\n    \"state\": \"RUNNING\",\n    \"numTotalPartitions\": 65,\n    \"numMonitoredWindows\": 0,\n    \"monitoringCoveragePct\": 0,\n    \"reasonOfLatestPauseOrResume\": \"N/A\",\n    \"numValidPartitions\": 0\n  },\n  \"ExecutorState\": {\n    \"state\": \"NO_TASK_IN_PROGRESS\"\n  },\n  \"AnomalyDetectorState\": {\n    \"recentBrokerFailures\": [],\n    \"recentGoalViolations\": [],\n    \"selfHealingDisabled\": [\n      \"DISK_FAILURE\",\n      \"BROKER_FAILURE\",\n      \"METRIC_ANOMALY\",\n      \"GOAL_VIOLATION\",\n      \"TOPIC_ANOMALY\"\n    ],\n    \"balancednessScore\": 100,\n    \"selfHealingEnabled\": [],\n    \"recentDiskFailures\": [],\n    \"metrics\": {\n      \"meanTimeToStartFixMs\": 0,\n      \"numSelfHealingStarted\": 0,\n      \"ongoingAnomalyDurationMs\": 0,\n      \"numSelfHealingFailedToStart\": 0,\n      \"meanTimeBetweenAnomaliesMs\": {\n        \"METRIC_ANOMALY\": 0,\n        \"TOPIC_ANOMALY\": 0,\n        \"DISK_FAILURE\": 0,\n        \"GOAL_VIOLATION\": 0,\n        \"BROKER_FAILURE\": 0\n      }\n    },\n    \"recentMetricAnomalies\": [],\n    \"recentTopicAnomalies\": [],\n    \"selfHealingEnabledRatio\": {\n      \"DISK_FAILURE\": 0,\n      \"BROKER_FAILURE\": 0,\n      \"METRIC_ANOMALY\": 0,\n      \"GOAL_VIOLATION\": 0,\n      \"TOPIC_ANOMALY\": 0\n    }\n  },\n  \"version\": 1\n}\n@tomncooper what do you think is the best field to check? Maybe I was wrong and checking the MonitorState is enough to check that state is RUNNING?", "author": "ppatierno", "createdAt": "2020-05-07T08:17:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI5MzYxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTMzOTE1Mg==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2912#discussion_r421339152", "bodyText": "So the load monitor state can be one of the following options:\npublic enum LoadMonitorTaskRunnerState {\n  NOT_STARTED, RUNNING, PAUSED, SAMPLING, BOOTSTRAPPING, TRAINING, LOADING\n}\n\nAny of which (except maybe NOT_STARTED) show that CC is running. Are we just trying to verify that CC is up and running correctly? Basically if you get a JSON return from the State endpoint then CC is up. However if you want to check it is actually working you should probably check for the load monitor doing someting other than NOT_STARTED or PAUSED?\nIf you want to check functionality of an active rebalance you can check the ExecutorState which can have the following values:\n  public enum State {\n    NO_TASK_IN_PROGRESS,\n    STARTING_EXECUTION,\n    INTER_BROKER_REPLICA_MOVEMENT_TASK_IN_PROGRESS,\n    INTRA_BROKER_REPLICA_MOVEMENT_TASK_IN_PROGRESS,\n    LEADER_MOVEMENT_TASK_IN_PROGRESS,\n    STOPPING_EXECUTION\n  }", "author": "tomncooper", "createdAt": "2020-05-07T08:43:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI5MzYxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQyOTk4OQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2912#discussion_r421429989", "bodyText": "How can I invoke the situation where LoadMonitor will be in the state for instance in PAUSED. It would be great if I have some reproduction procedure. @tomncooper", "author": "see-quick", "createdAt": "2020-05-07T11:22:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI5MzYxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ5NDYzNQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2912#discussion_r421494635", "bodyText": "I don't know how you would get the load monitor to pause. It is not documented anywhere. But from reading the code it is a possible state.", "author": "tomncooper", "createdAt": "2020-05-07T13:16:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI5MzYxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU2NzIyNg==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2912#discussion_r424567226", "bodyText": "So instead of looking for just RUNNING. Look for any of RUNNING, SAMPLING, BOOTSTRAPPING, TRAINING, LOADING as these are all states that indicate that the load monitor is doing useful valid work.", "author": "tomncooper", "createdAt": "2020-05-13T16:21:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI5MzYxNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI5NTMxNQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2912#discussion_r418295315", "bodyText": "Would be feasible to test that the metrics reporter is not configured anymore in the new Kafka brokers because we removed CC? We could check the Kafka pod log or maybe better the configmap containing the updated broker configuration? Wdyt @kyguy @tomncooper", "author": "ppatierno", "createdAt": "2020-04-30T21:19:08Z", "path": "systemtest/src/test/java/io/strimzi/systemtest/CruiseControlST.java", "diffHunk": "@@ -4,28 +4,254 @@\n  */\n package io.strimzi.systemtest;\n \n+import io.fabric8.kubernetes.api.model.Container;\n+import io.fabric8.kubernetes.api.model.EnvVar;\n+import io.fabric8.kubernetes.api.model.Pod;\n+import io.strimzi.api.kafka.model.CruiseControlSpec;\n+import io.strimzi.api.kafka.model.KafkaResources;\n+import io.strimzi.api.kafka.model.KafkaTopic;\n+import io.strimzi.api.kafka.model.balancing.BrokerCapacity;\n import io.strimzi.systemtest.resources.KubernetesResource;\n import io.strimzi.systemtest.resources.ResourceManager;\n import io.strimzi.systemtest.resources.crd.KafkaResource;\n+import io.strimzi.systemtest.resources.crd.KafkaTopicResource;\n+import io.strimzi.systemtest.utils.kafkaUtils.KafkaTopicUtils;\n+import io.strimzi.systemtest.utils.kubeUtils.controllers.StatefulSetUtils;\n import io.strimzi.systemtest.utils.kubeUtils.objects.PodUtils;\n+import io.vertx.core.json.JsonObject;\n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.Logger;\n import org.junit.jupiter.api.BeforeAll;\n import org.junit.jupiter.api.Tag;\n import org.junit.jupiter.api.Test;\n \n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Properties;\n+\n+import static io.strimzi.api.kafka.model.KafkaResources.kafkaStatefulSetName;\n import static io.strimzi.systemtest.Constants.REGRESSION;\n import static io.strimzi.test.k8s.KubeClusterResource.cmdKubeClient;\n+import static io.strimzi.test.k8s.KubeClusterResource.kubeClient;\n+import static org.hamcrest.CoreMatchers.nullValue;\n import static org.hamcrest.MatcherAssert.assertThat;\n-import static org.hamcrest.Matchers.containsString;\n-import static org.hamcrest.Matchers.not;\n+import static org.hamcrest.CoreMatchers.containsString;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.CoreMatchers.not;\n \n @Tag(REGRESSION)\n public class CruiseControlST extends BaseST {\n \n     private static final Logger LOGGER = LogManager.getLogger(CruiseControlST.class);\n+    private static final String NAMESPACE = \"cruise-control-test\";\n+\n+    private static final String CRUISE_CONTROL_NAME = \"Cruise Control\";\n+    private static final int CRUISE_CONTROL_DEFAULT_PORT = 9090;\n+    private static final String CRUISE_CONTROL_ENDPOINT = \"/kafkacruisecontrol/state\";\n+    private static final String CRUISE_CONTROL_POD_PREFIX = CLUSTER_NAME + \"-cruise-control-\";\n+\n+    private static final String CRUISE_CONTROL_CAPACITY_FILE_PATH = \"/tmp/capacity.json\";\n+    private static final String CRUISE_CONTROL_CONFIGURATION_FILE_PATH = \"/tmp/cruisecontrol.properties\";\n+\n+    private static final String CRUISE_CONTROL_METRICS_TOPIC = \"strimzi.cruisecontrol.metrics\"; // partitions 1 , rf - 1\n+    private static final String CRUISE_CONTROL_MODEL_TRAINING_SAMPLES_TOPIC = \"strimzi.cruisecontrol.modeltrainingsamples\"; // partitions 32 , rf - 2\n+    private static final String CRUISE_CONTROL_PARTITION_METRICS_SAMPLES_TOPIC = \"strimzi.cruisecontrol.partitionmetricsamples\"; // partitions 32 , rf - 2\n+\n+    @Test\n+    void testCruiseControlDeployment()  {\n+        String ccStatusCommand = \"curl -X GET localhost:\" + CRUISE_CONTROL_DEFAULT_PORT + CRUISE_CONTROL_ENDPOINT;\n+\n+        String ccPodName = PodUtils.getFirstPodNameContaining(\"cruise-control\");\n+\n+        String result = cmdKubeClient().execInPodContainer(ccPodName, \"cruise-control\",\n+            \"/bin/bash\", \"-c\", ccStatusCommand).out();\n+\n+        LOGGER.info(\"Verifying that {} is running inside the Pod {} and REST API is available\", CRUISE_CONTROL_NAME, ccPodName);\n+\n+        assertThat(result, not(containsString(\"404\")));\n+        assertThat(result, containsString(\"RUNNING\"));\n+\n+        verifyThatCruiseControlTopicsArePresent();\n+    }\n+\n+    @Test\n+    void testUninstallingAndInstallationCruiseControl() {\n+\n+        Map<String, String> kafkaPods = StatefulSetUtils.ssSnapshot(KafkaResources.kafkaStatefulSetName(CLUSTER_NAME));\n+\n+        KafkaResource.replaceKafkaResource(CLUSTER_NAME, kafka -> {\n+            LOGGER.info(\"Removing Cruise Control to the classic Kafka.\");\n+            kafka.getSpec().setCruiseControl(null);\n+        });\n+\n+        StatefulSetUtils.waitTillSsHasRolled(kafkaStatefulSetName(CLUSTER_NAME), 3, kafkaPods);", "originalCommit": "5a5dba6f1a39b1eb884c98505c50aeb009c21a3d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMxMjExOQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2912#discussion_r418312119", "bodyText": "That is a good idea, either or should work fine!", "author": "kyguy", "createdAt": "2020-04-30T21:57:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI5NTMxNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI5NjMyNg==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2912#discussion_r418296326", "bodyText": "As opposite to the previous comment, could we verify that the metrics reporter is configured on Kafka?", "author": "ppatierno", "createdAt": "2020-04-30T21:21:18Z", "path": "systemtest/src/test/java/io/strimzi/systemtest/CruiseControlST.java", "diffHunk": "@@ -4,28 +4,254 @@\n  */\n package io.strimzi.systemtest;\n \n+import io.fabric8.kubernetes.api.model.Container;\n+import io.fabric8.kubernetes.api.model.EnvVar;\n+import io.fabric8.kubernetes.api.model.Pod;\n+import io.strimzi.api.kafka.model.CruiseControlSpec;\n+import io.strimzi.api.kafka.model.KafkaResources;\n+import io.strimzi.api.kafka.model.KafkaTopic;\n+import io.strimzi.api.kafka.model.balancing.BrokerCapacity;\n import io.strimzi.systemtest.resources.KubernetesResource;\n import io.strimzi.systemtest.resources.ResourceManager;\n import io.strimzi.systemtest.resources.crd.KafkaResource;\n+import io.strimzi.systemtest.resources.crd.KafkaTopicResource;\n+import io.strimzi.systemtest.utils.kafkaUtils.KafkaTopicUtils;\n+import io.strimzi.systemtest.utils.kubeUtils.controllers.StatefulSetUtils;\n import io.strimzi.systemtest.utils.kubeUtils.objects.PodUtils;\n+import io.vertx.core.json.JsonObject;\n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.Logger;\n import org.junit.jupiter.api.BeforeAll;\n import org.junit.jupiter.api.Tag;\n import org.junit.jupiter.api.Test;\n \n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Properties;\n+\n+import static io.strimzi.api.kafka.model.KafkaResources.kafkaStatefulSetName;\n import static io.strimzi.systemtest.Constants.REGRESSION;\n import static io.strimzi.test.k8s.KubeClusterResource.cmdKubeClient;\n+import static io.strimzi.test.k8s.KubeClusterResource.kubeClient;\n+import static org.hamcrest.CoreMatchers.nullValue;\n import static org.hamcrest.MatcherAssert.assertThat;\n-import static org.hamcrest.Matchers.containsString;\n-import static org.hamcrest.Matchers.not;\n+import static org.hamcrest.CoreMatchers.containsString;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.CoreMatchers.not;\n \n @Tag(REGRESSION)\n public class CruiseControlST extends BaseST {\n \n     private static final Logger LOGGER = LogManager.getLogger(CruiseControlST.class);\n+    private static final String NAMESPACE = \"cruise-control-test\";\n+\n+    private static final String CRUISE_CONTROL_NAME = \"Cruise Control\";\n+    private static final int CRUISE_CONTROL_DEFAULT_PORT = 9090;\n+    private static final String CRUISE_CONTROL_ENDPOINT = \"/kafkacruisecontrol/state\";\n+    private static final String CRUISE_CONTROL_POD_PREFIX = CLUSTER_NAME + \"-cruise-control-\";\n+\n+    private static final String CRUISE_CONTROL_CAPACITY_FILE_PATH = \"/tmp/capacity.json\";\n+    private static final String CRUISE_CONTROL_CONFIGURATION_FILE_PATH = \"/tmp/cruisecontrol.properties\";\n+\n+    private static final String CRUISE_CONTROL_METRICS_TOPIC = \"strimzi.cruisecontrol.metrics\"; // partitions 1 , rf - 1\n+    private static final String CRUISE_CONTROL_MODEL_TRAINING_SAMPLES_TOPIC = \"strimzi.cruisecontrol.modeltrainingsamples\"; // partitions 32 , rf - 2\n+    private static final String CRUISE_CONTROL_PARTITION_METRICS_SAMPLES_TOPIC = \"strimzi.cruisecontrol.partitionmetricsamples\"; // partitions 32 , rf - 2\n+\n+    @Test\n+    void testCruiseControlDeployment()  {\n+        String ccStatusCommand = \"curl -X GET localhost:\" + CRUISE_CONTROL_DEFAULT_PORT + CRUISE_CONTROL_ENDPOINT;\n+\n+        String ccPodName = PodUtils.getFirstPodNameContaining(\"cruise-control\");\n+\n+        String result = cmdKubeClient().execInPodContainer(ccPodName, \"cruise-control\",\n+            \"/bin/bash\", \"-c\", ccStatusCommand).out();\n+\n+        LOGGER.info(\"Verifying that {} is running inside the Pod {} and REST API is available\", CRUISE_CONTROL_NAME, ccPodName);\n+\n+        assertThat(result, not(containsString(\"404\")));\n+        assertThat(result, containsString(\"RUNNING\"));\n+\n+        verifyThatCruiseControlTopicsArePresent();\n+    }\n+\n+    @Test\n+    void testUninstallingAndInstallationCruiseControl() {\n+\n+        Map<String, String> kafkaPods = StatefulSetUtils.ssSnapshot(KafkaResources.kafkaStatefulSetName(CLUSTER_NAME));\n+\n+        KafkaResource.replaceKafkaResource(CLUSTER_NAME, kafka -> {\n+            LOGGER.info(\"Removing Cruise Control to the classic Kafka.\");\n+            kafka.getSpec().setCruiseControl(null);\n+        });\n+\n+        StatefulSetUtils.waitTillSsHasRolled(kafkaStatefulSetName(CLUSTER_NAME), 3, kafkaPods);\n+\n+        LOGGER.info(\"Verifying that in {} is not present in the Kafka cluster\", CRUISE_CONTROL_NAME);\n+        assertThat(KafkaResource.kafkaClient().inNamespace(NAMESPACE).withName(CLUSTER_NAME).get().getSpec().getCruiseControl(), nullValue());\n+\n+        LOGGER.info(\"Verifying that {} pod is not present\", CRUISE_CONTROL_NAME);\n+        assertThat(kubeClient().listPodsByPrefixInName(CRUISE_CONTROL_POD_PREFIX).size(), is(0));\n+\n+        // TODO: should topic be deleted ? CURRENTLY CC let the topics in the kafka\n+//        verifyThatCruiseControlTopicsAreNotPresent();\n+\n+        kafkaPods = StatefulSetUtils.ssSnapshot(KafkaResources.kafkaStatefulSetName(CLUSTER_NAME));\n+\n+        KafkaResource.replaceKafkaResource(CLUSTER_NAME, kafka -> {\n+            LOGGER.info(\"Adding Cruise Control to the classic Kafka.\");\n+            kafka.getSpec().setCruiseControl(new CruiseControlSpec());\n+        });\n+\n+        StatefulSetUtils.waitTillSsHasRolled(kafkaStatefulSetName(CLUSTER_NAME), 3, kafkaPods);", "originalCommit": "5a5dba6f1a39b1eb884c98505c50aeb009c21a3d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "a33ccd4a7b103daa0303ff1ed45817c788658da3", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/a33ccd4a7b103daa0303ff1ed45817c788658da3", "message": "[MO] - done\n\nSigned-off-by: morsak <xorsak02@stud.fit.vutbr.cz>", "committedDate": "2020-05-07T11:11:02Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ5NjA2NA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2912#discussion_r421496064", "bodyText": "You should be careful with this timeout. The REST API default timeout is 10seconds so you may timeout the tests before you get a response of any kind from the server.", "author": "tomncooper", "createdAt": "2020-05-07T13:18:26Z", "path": "systemtest/src/main/java/io/strimzi/systemtest/Constants.java", "diffHunk": "@@ -47,8 +47,11 @@\n     long GLOBAL_TRACING_POLL = Duration.ofSeconds(30).toMillis();\n     long GLOBAL_TRACING_TIMEOUT =  Duration.ofMinutes(7).toMillis();\n \n+    long GLOBAL_CRUISE_CONTROL_TIMEOUT = Duration.ofSeconds(10).toMillis();", "originalCommit": "7ad2d67802debaa9d8c81df1b56635add99c1a5c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTUxMzgxOA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2912#discussion_r421513818", "bodyText": "So do you suggesting to make this GLOBAL_CRUISE_CONTROL_TIMEOUT little bit bigger? Would be suitable 30s ?", "author": "see-quick", "createdAt": "2020-05-07T13:43:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ5NjA2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTUzNDAzMQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2912#discussion_r421534031", "bodyText": "Well anything larger that 10secs, to be safe 20 should do.", "author": "tomncooper", "createdAt": "2020-05-07T14:09:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ5NjA2NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTYyNzI4Nw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2912#discussion_r421627287", "bodyText": "This is check after CC deletion or some recovery usecase?", "author": "Frawless", "createdAt": "2020-05-07T16:15:27Z", "path": "systemtest/src/main/java/io/strimzi/systemtest/utils/specific/CruiseControlUtils.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Copyright Strimzi authors.\n+ * License: Apache License 2.0 (see the file LICENSE or http://apache.org/licenses/LICENSE-2.0.html).\n+ */\n+package io.strimzi.systemtest.utils.specific;\n+\n+import io.strimzi.api.kafka.model.KafkaResources;\n+import io.strimzi.api.kafka.model.KafkaTopic;\n+import io.strimzi.systemtest.Constants;\n+import io.strimzi.systemtest.resources.crd.KafkaTopicResource;\n+import io.strimzi.systemtest.utils.kafkaUtils.KafkaTopicUtils;\n+import io.strimzi.test.TestUtils;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Map;\n+import java.util.Properties;\n+\n+import static io.strimzi.test.k8s.KubeClusterResource.kubeClient;\n+\n+public class CruiseControlUtils {\n+\n+    private static final Logger LOGGER = LogManager.getLogger(CruiseControlUtils.class);\n+\n+    private static final String CRUISE_CONTROL_METRICS_TOPIC = \"strimzi.cruisecontrol.metrics\"; // partitions 1 , rf - 1\n+    private static final String CRUISE_CONTROL_MODEL_TRAINING_SAMPLES_TOPIC = \"strimzi.cruisecontrol.modeltrainingsamples\"; // partitions 32 , rf - 2\n+    private static final String CRUISE_CONTROL_PARTITION_METRICS_SAMPLES_TOPIC = \"strimzi.cruisecontrol.partitionmetricsamples\"; // partitions 32 , rf - 2\n+\n+    private CruiseControlUtils() { }\n+\n+    @SuppressWarnings(\"BooleanExpressionComplexity\")\n+    public static void verifyCruiseControlMetricReporterConfigurationInKafkaConfigMapIsPresent(Properties kafkaProperties) {\n+        TestUtils.waitFor(\"Verify that kafka configuration \" + kafkaProperties.toString() + \" has correct cruise control metric reporter properties\",\n+            Constants.GLOBAL_POLL_INTERVAL, Constants.GLOBAL_CRUISE_CONTROL_TIMEOUT, () ->\n+            kafkaProperties.getProperty(\"cruise.control.metrics.topic\").equals(\"strimzi.cruisecontrol.metrics\") &&\n+            kafkaProperties.getProperty(\"cruise.control.metrics.reporter.ssl.endpoint.identification.algorithm\").equals(\"HTTPS\") &&\n+            kafkaProperties.getProperty(\"cruise.control.metrics.reporter.bootstrap.servers\").equals(\"my-cluster-kafka-bootstrap:9091\") &&\n+            kafkaProperties.getProperty(\"cruise.control.metrics.reporter.security.protocol\").equals(\"SSL\") &&\n+            kafkaProperties.getProperty(\"cruise.control.metrics.reporter.ssl.keystore.type\").equals(\"PKCS12\") &&\n+            kafkaProperties.getProperty(\"cruise.control.metrics.reporter.ssl.keystore.location\").equals(\"/tmp/kafka/cluster.keystore.p12\") &&\n+            kafkaProperties.getProperty(\"cruise.control.metrics.reporter.ssl.keystore.password\").equals(\"${CERTS_STORE_PASSWORD}\") &&\n+            kafkaProperties.getProperty(\"cruise.control.metrics.reporter.ssl.truststore.type\").equals(\"PKCS12\") &&\n+            kafkaProperties.getProperty(\"cruise.control.metrics.reporter.ssl.truststore.location\").equals(\"/tmp/kafka/cluster.truststore.p12\") &&\n+            kafkaProperties.getProperty(\"cruise.control.metrics.reporter.ssl.truststore.password\").equals(\"${CERTS_STORE_PASSWORD}\"));\n+    }\n+\n+    public static void verifyThatCruiseControlTopicsAreNotPresent() {", "originalCommit": "7ad2d67802debaa9d8c81df1b56635add99c1a5c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjg0OTUxOQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2912#discussion_r422849519", "bodyText": "Seems that I have no longer using this method because firstly i though that i will test that scenario with CC after he is deleted. But CC let the topics inside Kafka even CC is deleted. :)", "author": "see-quick", "createdAt": "2020-05-11T07:51:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTYyNzI4Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjg0OTYwOQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2912#discussion_r422849609", "bodyText": "I will remove it :)", "author": "see-quick", "createdAt": "2020-05-11T07:51:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTYyNzI4Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTYyNzg4Ng==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2912#discussion_r421627886", "bodyText": "Shouldn't we use some constants instead of this magic numbers?", "author": "Frawless", "createdAt": "2020-05-07T16:16:23Z", "path": "systemtest/src/main/java/io/strimzi/systemtest/utils/specific/CruiseControlUtils.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Copyright Strimzi authors.\n+ * License: Apache License 2.0 (see the file LICENSE or http://apache.org/licenses/LICENSE-2.0.html).\n+ */\n+package io.strimzi.systemtest.utils.specific;\n+\n+import io.strimzi.api.kafka.model.KafkaResources;\n+import io.strimzi.api.kafka.model.KafkaTopic;\n+import io.strimzi.systemtest.Constants;\n+import io.strimzi.systemtest.resources.crd.KafkaTopicResource;\n+import io.strimzi.systemtest.utils.kafkaUtils.KafkaTopicUtils;\n+import io.strimzi.test.TestUtils;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Map;\n+import java.util.Properties;\n+\n+import static io.strimzi.test.k8s.KubeClusterResource.kubeClient;\n+\n+public class CruiseControlUtils {\n+\n+    private static final Logger LOGGER = LogManager.getLogger(CruiseControlUtils.class);\n+\n+    private static final String CRUISE_CONTROL_METRICS_TOPIC = \"strimzi.cruisecontrol.metrics\"; // partitions 1 , rf - 1\n+    private static final String CRUISE_CONTROL_MODEL_TRAINING_SAMPLES_TOPIC = \"strimzi.cruisecontrol.modeltrainingsamples\"; // partitions 32 , rf - 2\n+    private static final String CRUISE_CONTROL_PARTITION_METRICS_SAMPLES_TOPIC = \"strimzi.cruisecontrol.partitionmetricsamples\"; // partitions 32 , rf - 2\n+\n+    private CruiseControlUtils() { }\n+\n+    @SuppressWarnings(\"BooleanExpressionComplexity\")\n+    public static void verifyCruiseControlMetricReporterConfigurationInKafkaConfigMapIsPresent(Properties kafkaProperties) {\n+        TestUtils.waitFor(\"Verify that kafka configuration \" + kafkaProperties.toString() + \" has correct cruise control metric reporter properties\",\n+            Constants.GLOBAL_POLL_INTERVAL, Constants.GLOBAL_CRUISE_CONTROL_TIMEOUT, () ->\n+            kafkaProperties.getProperty(\"cruise.control.metrics.topic\").equals(\"strimzi.cruisecontrol.metrics\") &&\n+            kafkaProperties.getProperty(\"cruise.control.metrics.reporter.ssl.endpoint.identification.algorithm\").equals(\"HTTPS\") &&\n+            kafkaProperties.getProperty(\"cruise.control.metrics.reporter.bootstrap.servers\").equals(\"my-cluster-kafka-bootstrap:9091\") &&\n+            kafkaProperties.getProperty(\"cruise.control.metrics.reporter.security.protocol\").equals(\"SSL\") &&\n+            kafkaProperties.getProperty(\"cruise.control.metrics.reporter.ssl.keystore.type\").equals(\"PKCS12\") &&\n+            kafkaProperties.getProperty(\"cruise.control.metrics.reporter.ssl.keystore.location\").equals(\"/tmp/kafka/cluster.keystore.p12\") &&\n+            kafkaProperties.getProperty(\"cruise.control.metrics.reporter.ssl.keystore.password\").equals(\"${CERTS_STORE_PASSWORD}\") &&\n+            kafkaProperties.getProperty(\"cruise.control.metrics.reporter.ssl.truststore.type\").equals(\"PKCS12\") &&\n+            kafkaProperties.getProperty(\"cruise.control.metrics.reporter.ssl.truststore.location\").equals(\"/tmp/kafka/cluster.truststore.p12\") &&\n+            kafkaProperties.getProperty(\"cruise.control.metrics.reporter.ssl.truststore.password\").equals(\"${CERTS_STORE_PASSWORD}\"));\n+    }\n+\n+    public static void verifyThatCruiseControlTopicsAreNotPresent() {\n+        KafkaTopicUtils.waitForKafkaTopicIsNotPresent(CRUISE_CONTROL_METRICS_TOPIC);\n+        KafkaTopicUtils.waitForKafkaTopicIsNotPresent(CRUISE_CONTROL_MODEL_TRAINING_SAMPLES_TOPIC);\n+        KafkaTopicUtils.waitForKafkaTopicIsNotPresent(CRUISE_CONTROL_PARTITION_METRICS_SAMPLES_TOPIC);\n+    }\n+\n+    public static void verifyThatCruiseControlTopicsArePresent() {\n+        KafkaTopic metrics = KafkaTopicResource.kafkaTopicClient().inNamespace(kubeClient().getNamespace()).withName(CRUISE_CONTROL_METRICS_TOPIC).get();\n+        KafkaTopic modelTrainingSamples = KafkaTopicResource.kafkaTopicClient().inNamespace(kubeClient().getNamespace()).withName(CRUISE_CONTROL_MODEL_TRAINING_SAMPLES_TOPIC).get();\n+        KafkaTopic partitionsMetricsSamples = KafkaTopicResource.kafkaTopicClient().inNamespace(kubeClient().getNamespace()).withName(CRUISE_CONTROL_PARTITION_METRICS_SAMPLES_TOPIC).get();\n+\n+        TestUtils.waitFor(\"Verify that kafka contains cruise control topics with related configuration.\",\n+            Constants.GLOBAL_POLL_INTERVAL, Constants.GLOBAL_CRUISE_CONTROL_TIMEOUT, () -> {\n+\n+                boolean hasTopicCorrectPartitionsCount =\n+                    metrics.getSpec().getPartitions() == 1 &&\n+                    modelTrainingSamples.getSpec().getPartitions() == 32 &&", "originalCommit": "7ad2d67802debaa9d8c81df1b56635add99c1a5c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTYyOTA0OA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2912#discussion_r421629048", "bodyText": "Add acceptance tag for this one will be useful", "author": "Frawless", "createdAt": "2020-05-07T16:18:21Z", "path": "systemtest/src/test/java/io/strimzi/systemtest/CruiseControlST.java", "diffHunk": "@@ -4,29 +4,249 @@\n  */\n package io.strimzi.systemtest;\n \n+import io.fabric8.kubernetes.api.model.Container;\n+import io.fabric8.kubernetes.api.model.EnvVar;\n+import io.fabric8.kubernetes.api.model.Pod;\n+import io.strimzi.api.kafka.model.CruiseControlSpec;\n+import io.strimzi.api.kafka.model.CruiseControlSpecBuilder;\n+import io.strimzi.api.kafka.model.KafkaResources;\n import io.strimzi.systemtest.resources.KubernetesResource;\n import io.strimzi.systemtest.resources.ResourceManager;\n import io.strimzi.systemtest.resources.crd.KafkaResource;\n+import io.strimzi.systemtest.utils.kubeUtils.controllers.DeploymentUtils;\n+import io.strimzi.systemtest.utils.kubeUtils.controllers.StatefulSetUtils;\n import io.strimzi.systemtest.utils.kubeUtils.objects.PodUtils;\n+import io.strimzi.systemtest.utils.specific.CruiseControlUtils;\n+import io.strimzi.test.WaitException;\n+import io.vertx.core.json.JsonObject;\n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.Logger;\n import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n import org.junit.jupiter.api.Tag;\n import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n \n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Properties;\n+\n+import static io.strimzi.api.kafka.model.KafkaResources.kafkaStatefulSetName;\n+import static io.strimzi.systemtest.Constants.CRUISE_CONTROL;\n import static io.strimzi.systemtest.Constants.REGRESSION;\n import static io.strimzi.test.k8s.KubeClusterResource.cmdKubeClient;\n+import static io.strimzi.test.k8s.KubeClusterResource.kubeClient;\n+import static org.hamcrest.CoreMatchers.nullValue;\n import static org.hamcrest.MatcherAssert.assertThat;\n-import static org.hamcrest.Matchers.containsString;\n-import static org.hamcrest.Matchers.not;\n+import static org.hamcrest.CoreMatchers.containsString;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.CoreMatchers.not;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n \n @Tag(REGRESSION)\n+@Tag(CRUISE_CONTROL)\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n public class CruiseControlST extends BaseST {\n \n     private static final Logger LOGGER = LogManager.getLogger(CruiseControlST.class);\n+    private static final String NAMESPACE = \"cruise-control-test\";\n+\n+    private static final String CRUISE_CONTROL_NAME = \"Cruise Control\";\n+    private static final int CRUISE_CONTROL_DEFAULT_PORT = 9090;\n+    private static final String CRUISE_CONTROL_STATE_ENDPOINT = \"/kafkacruisecontrol/state\";\n+    private static final String CRUISE_CONTROL_POD_PREFIX = CLUSTER_NAME + \"-cruise-control-\";\n+\n+    private static final String CRUISE_CONTROL_CAPACITY_FILE_PATH = \"/tmp/capacity.json\";\n+    private static final String CRUISE_CONTROL_CONFIGURATION_FILE_PATH = \"/tmp/cruisecontrol.properties\";\n+\n+    @Order(1)\n+    @Test\n+    void testCruiseControlDeployment()  {", "originalCommit": "7ad2d67802debaa9d8c81df1b56635add99c1a5c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTYyOTM4NA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2912#discussion_r421629384", "bodyText": "Strange test name", "author": "Frawless", "createdAt": "2020-05-07T16:18:52Z", "path": "systemtest/src/test/java/io/strimzi/systemtest/CruiseControlST.java", "diffHunk": "@@ -4,29 +4,249 @@\n  */\n package io.strimzi.systemtest;\n \n+import io.fabric8.kubernetes.api.model.Container;\n+import io.fabric8.kubernetes.api.model.EnvVar;\n+import io.fabric8.kubernetes.api.model.Pod;\n+import io.strimzi.api.kafka.model.CruiseControlSpec;\n+import io.strimzi.api.kafka.model.CruiseControlSpecBuilder;\n+import io.strimzi.api.kafka.model.KafkaResources;\n import io.strimzi.systemtest.resources.KubernetesResource;\n import io.strimzi.systemtest.resources.ResourceManager;\n import io.strimzi.systemtest.resources.crd.KafkaResource;\n+import io.strimzi.systemtest.utils.kubeUtils.controllers.DeploymentUtils;\n+import io.strimzi.systemtest.utils.kubeUtils.controllers.StatefulSetUtils;\n import io.strimzi.systemtest.utils.kubeUtils.objects.PodUtils;\n+import io.strimzi.systemtest.utils.specific.CruiseControlUtils;\n+import io.strimzi.test.WaitException;\n+import io.vertx.core.json.JsonObject;\n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.Logger;\n import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n import org.junit.jupiter.api.Tag;\n import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n \n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Properties;\n+\n+import static io.strimzi.api.kafka.model.KafkaResources.kafkaStatefulSetName;\n+import static io.strimzi.systemtest.Constants.CRUISE_CONTROL;\n import static io.strimzi.systemtest.Constants.REGRESSION;\n import static io.strimzi.test.k8s.KubeClusterResource.cmdKubeClient;\n+import static io.strimzi.test.k8s.KubeClusterResource.kubeClient;\n+import static org.hamcrest.CoreMatchers.nullValue;\n import static org.hamcrest.MatcherAssert.assertThat;\n-import static org.hamcrest.Matchers.containsString;\n-import static org.hamcrest.Matchers.not;\n+import static org.hamcrest.CoreMatchers.containsString;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.CoreMatchers.not;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n \n @Tag(REGRESSION)\n+@Tag(CRUISE_CONTROL)\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n public class CruiseControlST extends BaseST {\n \n     private static final Logger LOGGER = LogManager.getLogger(CruiseControlST.class);\n+    private static final String NAMESPACE = \"cruise-control-test\";\n+\n+    private static final String CRUISE_CONTROL_NAME = \"Cruise Control\";\n+    private static final int CRUISE_CONTROL_DEFAULT_PORT = 9090;\n+    private static final String CRUISE_CONTROL_STATE_ENDPOINT = \"/kafkacruisecontrol/state\";\n+    private static final String CRUISE_CONTROL_POD_PREFIX = CLUSTER_NAME + \"-cruise-control-\";\n+\n+    private static final String CRUISE_CONTROL_CAPACITY_FILE_PATH = \"/tmp/capacity.json\";\n+    private static final String CRUISE_CONTROL_CONFIGURATION_FILE_PATH = \"/tmp/cruisecontrol.properties\";\n+\n+    @Order(1)\n+    @Test\n+    void testCruiseControlDeployment()  {\n+        String ccStatusCommand = \"curl -X GET localhost:\" + CRUISE_CONTROL_DEFAULT_PORT + CRUISE_CONTROL_STATE_ENDPOINT;\n+\n+        String ccPodName = PodUtils.getFirstPodNameContaining(\"cruise-control\");\n+\n+        String result = cmdKubeClient().execInPodContainer(ccPodName, \"cruise-control\",\n+            \"/bin/bash\", \"-c\", ccStatusCommand).out();\n+\n+        LOGGER.info(\"Verifying that {} is running inside the Pod {} and REST API is available\", CRUISE_CONTROL_NAME, ccPodName);\n+\n+        assertThat(result, not(containsString(\"404\")));\n+        assertThat(result, containsString(\"RUNNING\"));\n+\n+        CruiseControlUtils.verifyThatCruiseControlTopicsArePresent();\n+    }\n+\n+    @Order(2)\n+    @Test\n+    void testCapacityFile() {\n+\n+        String cruiseControlPodName = kubeClient().listPodsByPrefixInName(CRUISE_CONTROL_POD_PREFIX).get(0).getMetadata().getName();\n+\n+        JsonObject cruiseControlCapacityFileContent =\n+            new JsonObject(cmdKubeClient().execInPod(cruiseControlPodName, \"/bin/bash\", \"-c\", \"cat \" + CRUISE_CONTROL_CAPACITY_FILE_PATH).out());\n+\n+        assertThat(cruiseControlCapacityFileContent.getJsonArray(\"brokerCapacities\"), not(nullValue()));\n+\n+        LOGGER.info(\"We got only one configuration of broker-capacities\");\n+        assertThat(cruiseControlCapacityFileContent.getJsonArray(\"brokerCapacities\").size(), is(1));\n+\n+        LOGGER.info(\"Verifying cruise control configuration.\");\n \n-    public static final String NAMESPACE = \"cruise-control-test\";\n+        JsonObject cruiseControlFirstConfiguration = cruiseControlCapacityFileContent.getJsonArray(\"brokerCapacities\").getJsonObject(0);\n+\n+        assertThat(cruiseControlFirstConfiguration.getString(\"brokerId\"), is(\"-1\"));\n+        assertThat(cruiseControlFirstConfiguration.getString(\"doc\"), not(nullValue()));\n+\n+        JsonObject cruiseControlConfigurationOfBrokerCapacity = cruiseControlFirstConfiguration.getJsonObject(\"capacity\");\n+\n+        LOGGER.info(\"Verifying default cruise control capacities\");\n+\n+        assertThat(cruiseControlConfigurationOfBrokerCapacity.getString(\"DISK\"), is(\"100000.0\"));\n+        assertThat(cruiseControlConfigurationOfBrokerCapacity.getString(\"CPU\"), is(\"100\"));\n+        assertThat(cruiseControlConfigurationOfBrokerCapacity.getString(\"NW_IN\"), is(\"10000.0\"));\n+        assertThat(cruiseControlConfigurationOfBrokerCapacity.getString(\"NW_OUT\"), is(\"10000.0\"));\n+    }\n+\n+    @Order(3)\n+    @Test\n+    void testUninstallingAndInstallationCruiseControl() throws IOException {", "originalCommit": "7ad2d67802debaa9d8c81df1b56635add99c1a5c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTYzMDEyNg==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2912#discussion_r421630126", "bodyText": "Guess you can create method for deployTestResources and use it beforeAll and in recreate", "author": "Frawless", "createdAt": "2020-05-07T16:19:59Z", "path": "systemtest/src/test/java/io/strimzi/systemtest/CruiseControlST.java", "diffHunk": "@@ -35,20 +255,14 @@ void setup() {\n         applyRoleBindings(NAMESPACE);\n         // 050-Deployment\n         KubernetesResource.clusterOperator(NAMESPACE).done();\n-    }\n \n-    @Test\n-    void testCCDeployment()  {\n         KafkaResource.kafkaWithCruiseControl(CLUSTER_NAME, 3, 3).done();\n+    }\n \n-        String ccStatusCommand = \"curl -X GET localhost:9090/kafkacruisecontrol/state\";\n-        String ccPodName = PodUtils.getFirstPodNameContaining(\"cruise-control\");\n-        LOGGER.info(\"Using pod: \" + ccPodName);\n-        String result = cmdKubeClient().execInPodContainer(ccPodName, \"cruise-control\",\n-                \"/bin/bash\", \"-c\", ccStatusCommand).out();\n+    @Override\n+    protected void recreateTestEnv(String coNamespace, List<String> bindingsNamespaces) throws InterruptedException {\n+        super.recreateTestEnv(coNamespace, bindingsNamespaces);\n \n-        assertThat(result, not(containsString(\"404\")));\n-        assertThat(result, containsString(\"RUNNING\"));\n+        KafkaResource.kafkaWithCruiseControl(CLUSTER_NAME, 3, 3).done();", "originalCommit": "7ad2d67802debaa9d8c81df1b56635add99c1a5c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTcwNDI1NA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2912#discussion_r421704254", "bodyText": "CC deployment name can be grabbed from here[1]\n[1] \n  \n    \n      strimzi-kafka-operator/api/src/main/java/io/strimzi/api/kafka/model/CruiseControlResources.java\n    \n    \n        Lines 18 to 20\n      in\n      7ad2d67\n    \n    \n    \n    \n\n        \n          \n           public static String deploymentName(String clusterName) { \n        \n\n        \n          \n               return clusterName + \"-cruise-control\"; \n        \n\n        \n          \n           }", "author": "kyguy", "createdAt": "2020-05-07T18:22:50Z", "path": "api/src/main/java/io/strimzi/api/kafka/model/KafkaResources.java", "diffHunk": "@@ -71,6 +71,17 @@ public static String entityOperatorSecretName(String clusterName) {\n         return entityOperatorDeploymentName(clusterName) + \"-certs\";\n     }\n \n+    /**\n+     * Returns the name of the Cruise Control {@code Deployment} for a {@code Kafka} cluster of the given name.\n+     * This {@code Deployment} will only exist if {@code Kafka.spec.cruiseControl} is configured in the\n+     * {@code Kafka} resource with the given name.\n+     * @param clusterName  The {@code metadata.name} of the {@code Kafka} resource.\n+     * @return The name of the corresponding Entity Operator {@code Deployment}.\n+     */\n+    public static String cruiseControlDeploymentName(String clusterName) {\n+        return clusterName + \"-cruise-control\";\n+    }\n+", "originalCommit": "7ad2d67802debaa9d8c81df1b56635add99c1a5c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "cef0d0259f37ee9d5f54e38ecf0039c9e5fc559e", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/cef0d0259f37ee9d5f54e38ecf0039c9e5fc559e", "message": "[MO] - [system test] -> cruise control tests\n\nSigned-off-by: morsak <xorsak02@stud.fit.vutbr.cz>", "committedDate": "2020-05-13T16:04:33Z", "type": "commit"}, {"oid": "7b203446d6565273a9f95af3b85b1e36193f789c", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/7b203446d6565273a9f95af3b85b1e36193f789c", "message": "[MO] - [basic tests] -> done\n\nSigned-off-by: morsak <xorsak02@stud.fit.vutbr.cz>", "committedDate": "2020-05-13T16:04:33Z", "type": "commit"}, {"oid": "0617304e361bc7ffeb77d59723eb1f0fbb74c75d", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/0617304e361bc7ffeb77d59723eb1f0fbb74c75d", "message": "[MO] - [additional stuff] -> metrircs reporter\n\nSigned-off-by: morsak <xorsak02@stud.fit.vutbr.cz>", "committedDate": "2020-05-13T16:04:33Z", "type": "commit"}, {"oid": "f77fb723582dd182ae280881be24464a978d9d7d", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/f77fb723582dd182ae280881be24464a978d9d7d", "message": "[MO] - [added\n\nSigned-off-by: morsak <xorsak02@stud.fit.vutbr.cz>", "committedDate": "2020-05-13T16:07:52Z", "type": "commit"}, {"oid": "6fd0418632c21ed23583bc86049c272708e230d4", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/6fd0418632c21ed23583bc86049c272708e230d4", "message": "s\n\nSigned-off-by: morsak <xorsak02@stud.fit.vutbr.cz>", "committedDate": "2020-05-13T16:07:52Z", "type": "commit"}, {"oid": "1d26283c8469c87e10ba001809b896a9c995e7a2", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/1d26283c8469c87e10ba001809b896a9c995e7a2", "message": "s\n\nSigned-off-by: morsak <xorsak02@stud.fit.vutbr.cz>", "committedDate": "2020-05-13T16:07:52Z", "type": "commit"}, {"oid": "86904ca674fb61b6591a5d89288c666516f8e77d", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/86904ca674fb61b6591a5d89288c666516f8e77d", "message": "s\n\nSigned-off-by: morsak <xorsak02@stud.fit.vutbr.cz>", "committedDate": "2020-05-13T16:07:52Z", "type": "commit"}, {"oid": "87b3a54f9b12a217c3c4a1d2a366af358177f5d2", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/87b3a54f9b12a217c3c4a1d2a366af358177f5d2", "message": "[MO] - [adding profile] - done\n\nSigned-off-by: morsak <xorsak02@stud.fit.vutbr.cz>", "committedDate": "2020-05-13T16:07:52Z", "type": "commit"}, {"oid": "5adf9bf17173e10a954e71d2bd7a494a753882cf", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/5adf9bf17173e10a954e71d2bd7a494a753882cf", "message": "[MO] - done\n\nSigned-off-by: morsak <xorsak02@stud.fit.vutbr.cz>", "committedDate": "2020-05-13T16:07:52Z", "type": "commit"}, {"oid": "cc4a5628bf8fb48e8ac3d53f07bf95b520a6256e", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/cc4a5628bf8fb48e8ac3d53f07bf95b520a6256e", "message": "[MO] -done\n\nSigned-off-by: morsak <xorsak02@stud.fit.vutbr.cz>", "committedDate": "2020-05-13T16:07:52Z", "type": "commit"}, {"oid": "7cab6f2f3b64e7a69adf3d7e7fd64d972385ccad", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/7cab6f2f3b64e7a69adf3d7e7fd64d972385ccad", "message": "[MO] - [cc] -> commends\n\nSigned-off-by: morsak <xorsak02@stud.fit.vutbr.cz>", "committedDate": "2020-05-13T16:07:52Z", "type": "commit"}, {"oid": "25776d38e951c69eb19c596a33f62c679b1aa33a", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/25776d38e951c69eb19c596a33f62c679b1aa33a", "message": "sdsd\n\nSigned-off-by: morsak <xorsak02@stud.fit.vutbr.cz>", "committedDate": "2020-05-13T16:07:52Z", "type": "commit"}, {"oid": "25776d38e951c69eb19c596a33f62c679b1aa33a", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/25776d38e951c69eb19c596a33f62c679b1aa33a", "message": "sdsd\n\nSigned-off-by: morsak <xorsak02@stud.fit.vutbr.cz>", "committedDate": "2020-05-13T16:07:52Z", "type": "forcePushed"}]}