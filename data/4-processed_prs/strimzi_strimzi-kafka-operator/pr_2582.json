{"pr_number": 2582, "pr_title": "[DOC] New section for MirrorMaker 2.0", "pr_createdAt": "2020-02-20T09:59:56Z", "pr_url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2582", "timeline": [{"oid": "6f306632e4fc83fd7c29c26bc4ea41370d1a4181", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/6f306632e4fc83fd7c29c26bc4ea41370d1a4181", "message": "new section for mm2\n\nSigned-off-by: prmellor <pmellor@redhat.com>", "committedDate": "2020-02-20T09:57:27Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTg5NzM0OA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2582#discussion_r381897348", "bodyText": "@scholzj - I haven't added the configuration for this, but it would be good to have it. Not sure what was needed.", "author": "PaulRMellor", "createdAt": "2020-02-20T10:02:15Z", "path": "documentation/modules/mirrormaker/proc-mirrormaker-replication.adoc", "diffHunk": "@@ -0,0 +1,104 @@\n+// Module included in the following assemblies:\n+//\n+// assembly-mirrormaker.adoc\n+\n+[id='proc-mirrormaker-replication-{context}']\n+= Synchronizing data between Kafka clusters\n+\n+Use {MirrorMaker} to synchronize data between Kafka clusters through configuration.\n+\n+The previous version of {MirrorMaker} continues to be supported.\n+If you wish to use the resources configured for the previous version,\n+they must be updated to the format supported by {MirrorMaker}.\n+\n+The configuration must specify:\n+\n+* Each Kafka cluster\n+* Connection information for each cluster, including TLS authentication\n+* The replication flow and direction\n+** Cluster to cluster\n+** Topic to topic\n+* Replication rules\n+* Committed offset tracking intervals\n+\n+Use the properties of the `KafkaMirrorMaker2` resource to configure your Kafka {MirrorMaker} deployment.\n+\n+You can configure access control for source and target clusters using TLS or SASL authentication.\n+This procedure shows a configuration that uses TLS encryption and authentication for the source and target cluster.", "originalCommit": "6f306632e4fc83fd7c29c26bc4ea41370d1a4181", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTg5ODA2OA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2582#discussion_r381898068", "bodyText": "@scholzj - The original example \".*\" was throwing the doc build, so I used this as an example. Maybe we use something else?", "author": "PaulRMellor", "createdAt": "2020-02-20T10:03:35Z", "path": "documentation/modules/mirrormaker/proc-mirrormaker-replication.adoc", "diffHunk": "@@ -0,0 +1,104 @@\n+// Module included in the following assemblies:\n+//\n+// assembly-mirrormaker.adoc\n+\n+[id='proc-mirrormaker-replication-{context}']\n+= Synchronizing data between Kafka clusters\n+\n+Use {MirrorMaker} to synchronize data between Kafka clusters through configuration.\n+\n+The previous version of {MirrorMaker} continues to be supported.\n+If you wish to use the resources configured for the previous version,\n+they must be updated to the format supported by {MirrorMaker}.\n+\n+The configuration must specify:\n+\n+* Each Kafka cluster\n+* Connection information for each cluster, including TLS authentication\n+* The replication flow and direction\n+** Cluster to cluster\n+** Topic to topic\n+* Replication rules\n+* Committed offset tracking intervals\n+\n+Use the properties of the `KafkaMirrorMaker2` resource to configure your Kafka {MirrorMaker} deployment.\n+\n+You can configure access control for source and target clusters using TLS or SASL authentication.\n+This procedure shows a configuration that uses TLS encryption and authentication for the source and target cluster.\n+\n+.Prerequisites\n+\n+* xref:cluster-operator-str[{ProductName} and Kafka is deployed]\n+* Source and target Kafka clusters are available\n+\n+.Procedure\n+\n+. Edit the `spec` properties for the `KafkaMirrorMaker` resource.\n++\n+The properties you can configure are shown in this example configuration:\n++\n+[source,yaml,subs=\"+quotes,attributes\"]\n+----\n+apiVersion: {KafkaApiVersion}\n+kind: KafkaMirrorMaker2\n+metadata:\n+  name: my-mirror-maker2\n+spec:\n+  version: {DefaultKafkaVersion} <1>\n+  replicas: 3 <2>\n+  connectCluster: \"my-cluster-target\" <3>\n+  clusters: <4>\n+  - alias: \"my-cluster-source\" <5>\n+    bootstrapServers: my-cluster-source-kafka-bootstrap:9092 <6>\n+  - alias: \"my-cluster-target\" <7>\n+    bootstrapServers: my-cluster-target-kafka-bootstrap:9092 <8>\n+    config: <9>\n+      config.storage.replication.factor: 1\n+      offset.storage.replication.factor: 1\n+      status.storage.replication.factor: 1\n+  mirrors: <10>\n+  - sourceCluster: \"my-cluster-source\" <11>\n+    targetCluster: \"my-cluster-target\" <12>\n+    sourceConnector: <13>\n+      config:\n+        replication.factor: 1 <14>\n+        offset-syncs.topic.replication.factor: 1 <15>\n+        sync.topic.acls.enabled: \"false\" <16>\n+    heartbeatConnector: <17>\n+      config:\n+        heartbeats.topic.replication.factor: 1 <18>\n+    checkpointConnector: <19>\n+      config:\n+        checkpoints.topic.replication.factor: 1 <20>\n+    topicsPattern: \".*\" <21>\n+    groupsPattern: \"group1|group2|group3\" <22>", "originalCommit": "6f306632e4fc83fd7c29c26bc4ea41370d1a4181", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjUwMTg3NQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2582#discussion_r382501875", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            This chapter describes how to configure a Kafka MirrorMaker deployment in your cluster.\n          \n          \n            \n            This chapter describes how to configure a Kafka MirrorMaker deployment in your {ProductName} cluster to replicate data between Kafka clusters.", "author": "laidan6000", "createdAt": "2020-02-21T10:17:31Z", "path": "documentation/assemblies/assembly-deployment-configuration-kafka-mirror-maker.adoc", "diffHunk": "@@ -11,30 +11,59 @@\n :parent-context-deployment-configuration-kafka-mirror-maker: {context}\n \n [id='assembly-deployment-configuration-kafka-mirror-maker-{context}']\n-= Kafka Mirror Maker configuration\n+= Kafka MirrorMaker configuration\n \n :context: deployment-configuration-kafka-mirror-maker\n \n-This chapter describes how to configure the `KafkaMirrorMaker` resource to support a Kafka Mirror Maker deployment in your cluster.\n+This chapter describes how to configure a Kafka MirrorMaker deployment in your cluster.", "originalCommit": "6f306632e4fc83fd7c29c26bc4ea41370d1a4181", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjUwMjY2Ng==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2582#discussion_r382502666", "bodyText": "Seems a bit confusing for potential contributors. Why not use {MirrorMaker2}?", "author": "laidan6000", "createdAt": "2020-02-21T10:19:11Z", "path": "documentation/assemblies/assembly-deployment-configuration-kafka-mirror-maker.adoc", "diffHunk": "@@ -11,30 +11,59 @@\n :parent-context-deployment-configuration-kafka-mirror-maker: {context}\n \n [id='assembly-deployment-configuration-kafka-mirror-maker-{context}']\n-= Kafka Mirror Maker configuration\n+= Kafka MirrorMaker configuration\n \n :context: deployment-configuration-kafka-mirror-maker\n \n-This chapter describes how to configure the `KafkaMirrorMaker` resource to support a Kafka Mirror Maker deployment in your cluster.\n+This chapter describes how to configure a Kafka MirrorMaker deployment in your cluster.\n \n-The following procedures show how the resource is configured:\n+You can use {ProductName} with MirrorMaker or {MirrorMaker}.", "originalCommit": "6f306632e4fc83fd7c29c26bc4ea41370d1a4181", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjUwNDY3Mg==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2582#discussion_r382504672", "bodyText": "At this point, you could explain that Mirror Maker 2.0 is a more efficient way to mirror data between Kafka clusters, and that it was introduced in Kafka 2.4.0.", "author": "laidan6000", "createdAt": "2020-02-21T10:23:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjUwMjY2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjYxODY4Mg==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2582#discussion_r382618682", "bodyText": "I've replaced the variable to avoid any confusion.\nI'll say that MirrorMaker 2.0 is the later version and is, essentially, better, but I'll avoid any version numbers.", "author": "PaulRMellor", "createdAt": "2020-02-21T14:44:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjUwMjY2Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjUwNzA1OQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2582#discussion_r382507059", "bodyText": "between clusters?", "author": "laidan6000", "createdAt": "2020-02-21T10:28:19Z", "path": "documentation/assemblies/assembly-deployment-configuration-kafka-mirror-maker.adoc", "diffHunk": "@@ -11,30 +11,59 @@\n :parent-context-deployment-configuration-kafka-mirror-maker: {context}\n \n [id='assembly-deployment-configuration-kafka-mirror-maker-{context}']\n-= Kafka Mirror Maker configuration\n+= Kafka MirrorMaker configuration\n \n :context: deployment-configuration-kafka-mirror-maker\n \n-This chapter describes how to configure the `KafkaMirrorMaker` resource to support a Kafka Mirror Maker deployment in your cluster.\n+This chapter describes how to configure a Kafka MirrorMaker deployment in your cluster.\n \n-The following procedures show how the resource is configured:\n+You can use {ProductName} with MirrorMaker or {MirrorMaker}.\n \n-* xref:configuring-kafka-mirror-maker-{context}[Configuring Kafka Mirror Maker]\n+[discrete]\n+== MirrorMaker\n+\n+If you are using MirrorMaker, you configure the `KafkaMirrorMaker` resource.\n+\n+The following procedure shows how the resource is configured:\n+\n+* xref:configuring-kafka-mirror-maker-{context}[Configuring Kafka MirrorMaker]\n \n Supported properties are also described in more detail for your reference:\n \n-* xref:con-configuring-mirror-maker-{context}[Kafka Mirror Maker configuration properties]\n+* xref:con-configuring-mirror-maker-{context}[Kafka MirrorMaker configuration properties]\n \n The full schema of the `KafkaMirrorMaker` resource is described in the xref:type-KafkaMirrorMaker-reference[KafkaMirrorMaker schema reference].\n \n-NOTE: Labels applied to a `KafkaMirrorMaker` resource are also applied to the Kubernetes resources comprising Kafka Mirror Maker.\n+NOTE: Labels applied to a `KafkaMirrorMaker` resource are also applied to the Kubernetes resources comprising Kafka MirrorMaker.\n This provides a convenient mechanism for resources to be labeled as required.\n \n+[discrete]\n+== {MirrorMaker}\n+\n+If you are using {MirrorMaker}, you configure the `KafkaMirrorMaker2` resource.\n+\n+{MirrorMaker} introduces an entirely new way of replicating data in clusters.", "originalCommit": "6f306632e4fc83fd7c29c26bc4ea41370d1a4181", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjUxMTI4Mw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2582#discussion_r382511283", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            {MirrorMaker} `SourceConnector` replicates topics from a source cluster to a target cluster.\n          \n          \n            \n            A {MirrorMaker} `SourceConnector` replicates topics from a source cluster to a target cluster.", "author": "laidan6000", "createdAt": "2020-02-21T10:37:16Z", "path": "documentation/modules/mirrormaker/con-mirrormaker-replication.adoc", "diffHunk": "@@ -0,0 +1,89 @@\n+// Module included in the following assemblies:\n+//\n+// assembly-mirrormaker.adoc\n+\n+[id='con-mirrormaker-{context}']\n+= {MirrorMaker} data replication\n+\n+{MirrorMaker} consumes messages from a source Kafka cluster and writes them to a target Kafka cluster.\n+\n+{MirrorMaker} uses:\n+\n+* Source cluster configuration to consume data from the source cluster\n+* Target cluster configuration to output data to the target cluster\n+\n+{MirrorMaker} is based on the Kafka Connect framework, _connectors_ managing the transfer of data between clusters.\n+{MirrorMaker} `SourceConnector` replicates topics from a source cluster to a target cluster.", "originalCommit": "6f306632e4fc83fd7c29c26bc4ea41370d1a4181", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjUxNDMwMQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2582#discussion_r382514301", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * _offset sync_ maps the source and target offsets for replicated topic partitions from record metadata\n          \n          \n            \n            * The _offset sync_ topic maps the source and target offsets for replicated topic partitions from record metadata", "author": "laidan6000", "createdAt": "2020-02-21T10:44:08Z", "path": "documentation/modules/mirrormaker/con-mirrormaker-replication.adoc", "diffHunk": "@@ -0,0 +1,89 @@\n+// Module included in the following assemblies:\n+//\n+// assembly-mirrormaker.adoc\n+\n+[id='con-mirrormaker-{context}']\n+= {MirrorMaker} data replication\n+\n+{MirrorMaker} consumes messages from a source Kafka cluster and writes them to a target Kafka cluster.\n+\n+{MirrorMaker} uses:\n+\n+* Source cluster configuration to consume data from the source cluster\n+* Target cluster configuration to output data to the target cluster\n+\n+{MirrorMaker} is based on the Kafka Connect framework, _connectors_ managing the transfer of data between clusters.\n+{MirrorMaker} `SourceConnector` replicates topics from a source cluster to a target cluster.\n+\n+The process of _mirroring_ data from one cluster to another cluster is asynchronous.\n+The recommended pattern is for messages to be produced locally alongside the source Kafka cluster, then consumed remotely close to the target Kafka cluster.\n+\n+{MirrorMaker} can support more than two active clusters.\n+\n+.Replication across two clusters\n+image::mirrormaker.png[{MirrorMaker} replication]\n+\n+= Cluster configuration\n+\n+You can use {MirrorMaker} in _active/passive_ or _active/active_ cluster configurations.\n+\n+* In an _active/passive_ configuration, the data from an active cluster is replicated in a passive cluster, which remains on standby, for example, for data recovery in the event of system failure.\n+* In an _active/active_ configuration, both clusters are active and provide the same data simultaneously, which is useful if you want  to make the same data available locally in different geographical locations.\n+\n+The expectation is that producers and consumers connect to active clusters only.\n+\n+== Bidirectional replication\n+\n+The {MirrorMaker} architecture supports bidirectional replication in an _active/active_ cluster configuration.\n+\n+Each cluster replicates the data of the other cluster using the concept of _source_ and _remote_ topics.\n+As the same topics are stored in each cluster, remote topics are automatically renamed by {MirrorMaker} to represent the source cluster.\n+\n+.Topic renaming in a bidirectional architecture\n+image::mirrormaker-renaming.png[{MirrorMaker} bidirectional architecture]\n+\n+By flagging the originating cluster, topics are not replicated back to that cluster.\n+\n+The concept of replication through _remote_ topics is useful when configuring an architecture that requires data aggregation.\n+Consumers can subscribe to source and remote topics within the same cluster, without the need for a separate aggregation cluster.\n+\n+== Topic configuration synchronization\n+\n+Topic configuration is automatically synchronized between source and target clusters.\n+By synchronizing configuration properties, the need for rebalancing is reduced.\n+\n+== ACL access to remote topics\n+\n+If `SimpleAclAuthorizer` is being used, ACL rules that manage access to brokers also apply to remote topics.\n+Users that can read a source topic can read its remote equivalent.\n+\n+NOTE: {oauth} authorization does not support access to remote topics in this way.\n+\n+== Data integrity\n+\n+{MirrorMaker} monitors source topics and propagates any configuration changes to remote topics, checking for and creating missing partitions.\n+Only {MirrorMaker} can write to remote topics.\n+\n+== Offset tracking\n+{MirrorMaker} tracks offsets for consumer groups using _internal topics_.\n+\n+* _offset sync_ maps the source and target offsets for replicated topic partitions from record metadata", "originalCommit": "6f306632e4fc83fd7c29c26bc4ea41370d1a4181", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjUxNDQxNw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2582#discussion_r382514417", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * _checkpoint_ maps the last committed offset in the source and target cluster for replicated topic partitions in each consumer group\n          \n          \n            \n            * The _checkpoint_ topic maps the last committed offset in the source and target cluster for replicated topic partitions in each consumer group", "author": "laidan6000", "createdAt": "2020-02-21T10:44:21Z", "path": "documentation/modules/mirrormaker/con-mirrormaker-replication.adoc", "diffHunk": "@@ -0,0 +1,89 @@\n+// Module included in the following assemblies:\n+//\n+// assembly-mirrormaker.adoc\n+\n+[id='con-mirrormaker-{context}']\n+= {MirrorMaker} data replication\n+\n+{MirrorMaker} consumes messages from a source Kafka cluster and writes them to a target Kafka cluster.\n+\n+{MirrorMaker} uses:\n+\n+* Source cluster configuration to consume data from the source cluster\n+* Target cluster configuration to output data to the target cluster\n+\n+{MirrorMaker} is based on the Kafka Connect framework, _connectors_ managing the transfer of data between clusters.\n+{MirrorMaker} `SourceConnector` replicates topics from a source cluster to a target cluster.\n+\n+The process of _mirroring_ data from one cluster to another cluster is asynchronous.\n+The recommended pattern is for messages to be produced locally alongside the source Kafka cluster, then consumed remotely close to the target Kafka cluster.\n+\n+{MirrorMaker} can support more than two active clusters.\n+\n+.Replication across two clusters\n+image::mirrormaker.png[{MirrorMaker} replication]\n+\n+= Cluster configuration\n+\n+You can use {MirrorMaker} in _active/passive_ or _active/active_ cluster configurations.\n+\n+* In an _active/passive_ configuration, the data from an active cluster is replicated in a passive cluster, which remains on standby, for example, for data recovery in the event of system failure.\n+* In an _active/active_ configuration, both clusters are active and provide the same data simultaneously, which is useful if you want  to make the same data available locally in different geographical locations.\n+\n+The expectation is that producers and consumers connect to active clusters only.\n+\n+== Bidirectional replication\n+\n+The {MirrorMaker} architecture supports bidirectional replication in an _active/active_ cluster configuration.\n+\n+Each cluster replicates the data of the other cluster using the concept of _source_ and _remote_ topics.\n+As the same topics are stored in each cluster, remote topics are automatically renamed by {MirrorMaker} to represent the source cluster.\n+\n+.Topic renaming in a bidirectional architecture\n+image::mirrormaker-renaming.png[{MirrorMaker} bidirectional architecture]\n+\n+By flagging the originating cluster, topics are not replicated back to that cluster.\n+\n+The concept of replication through _remote_ topics is useful when configuring an architecture that requires data aggregation.\n+Consumers can subscribe to source and remote topics within the same cluster, without the need for a separate aggregation cluster.\n+\n+== Topic configuration synchronization\n+\n+Topic configuration is automatically synchronized between source and target clusters.\n+By synchronizing configuration properties, the need for rebalancing is reduced.\n+\n+== ACL access to remote topics\n+\n+If `SimpleAclAuthorizer` is being used, ACL rules that manage access to brokers also apply to remote topics.\n+Users that can read a source topic can read its remote equivalent.\n+\n+NOTE: {oauth} authorization does not support access to remote topics in this way.\n+\n+== Data integrity\n+\n+{MirrorMaker} monitors source topics and propagates any configuration changes to remote topics, checking for and creating missing partitions.\n+Only {MirrorMaker} can write to remote topics.\n+\n+== Offset tracking\n+{MirrorMaker} tracks offsets for consumer groups using _internal topics_.\n+\n+* _offset sync_ maps the source and target offsets for replicated topic partitions from record metadata\n+* _checkpoint_ maps the last committed offset in the source and target cluster for replicated topic partitions in each consumer group", "originalCommit": "6f306632e4fc83fd7c29c26bc4ea41370d1a4181", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjUxNTU2MQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2582#discussion_r382515561", "bodyText": "...using Mirror Maker 2.0\n?", "author": "laidan6000", "createdAt": "2020-02-21T10:46:39Z", "path": "documentation/modules/mirrormaker/proc-mirrormaker-replication.adoc", "diffHunk": "@@ -0,0 +1,104 @@\n+// Module included in the following assemblies:\n+//\n+// assembly-mirrormaker.adoc\n+\n+[id='proc-mirrormaker-replication-{context}']\n+= Synchronizing data between Kafka clusters", "originalCommit": "6f306632e4fc83fd7c29c26bc4ea41370d1a4181", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjYyMDMyNg==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2582#discussion_r382620326", "bodyText": "I did wonder how much we wanted to plaster MirrorMaker 2.0 everywhere. I'm assuming MirrorMaker 1 sections will drop at some stage, but I guess we can have it in the title for now.", "author": "PaulRMellor", "createdAt": "2020-02-21T14:46:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjUxNTU2MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjUxNjg1MA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2582#discussion_r382516850", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            . Edit the `spec` properties for the `KafkaMirrorMaker` resource.\n          \n          \n            \n            . Edit the `spec` properties for the `KafkaMirrorMaker2` resource.", "author": "laidan6000", "createdAt": "2020-02-21T10:49:43Z", "path": "documentation/modules/mirrormaker/proc-mirrormaker-replication.adoc", "diffHunk": "@@ -0,0 +1,104 @@\n+// Module included in the following assemblies:\n+//\n+// assembly-mirrormaker.adoc\n+\n+[id='proc-mirrormaker-replication-{context}']\n+= Synchronizing data between Kafka clusters\n+\n+Use {MirrorMaker} to synchronize data between Kafka clusters through configuration.\n+\n+The previous version of {MirrorMaker} continues to be supported.\n+If you wish to use the resources configured for the previous version,\n+they must be updated to the format supported by {MirrorMaker}.\n+\n+The configuration must specify:\n+\n+* Each Kafka cluster\n+* Connection information for each cluster, including TLS authentication\n+* The replication flow and direction\n+** Cluster to cluster\n+** Topic to topic\n+* Replication rules\n+* Committed offset tracking intervals\n+\n+Use the properties of the `KafkaMirrorMaker2` resource to configure your Kafka {MirrorMaker} deployment.\n+\n+You can configure access control for source and target clusters using TLS or SASL authentication.\n+This procedure shows a configuration that uses TLS encryption and authentication for the source and target cluster.\n+\n+.Prerequisites\n+\n+* xref:cluster-operator-str[{ProductName} and Kafka is deployed]\n+* Source and target Kafka clusters are available\n+\n+.Procedure\n+\n+. Edit the `spec` properties for the `KafkaMirrorMaker` resource.", "originalCommit": "6f306632e4fc83fd7c29c26bc4ea41370d1a4181", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjUxODkxNg==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2582#discussion_r382518916", "bodyText": "I'm not sure there really is anything for MM2 in the KAfka docs. So maybe this is pointless?", "author": "scholzj", "createdAt": "2020-02-21T10:54:08Z", "path": "documentation/assemblies/mirrormaker/assembly-mirrormaker.adoc", "diffHunk": "@@ -0,0 +1,29 @@\n+// This assembly is included in the following assemblies:\n+//\n+// assembly-deployment-configuration-kafka-mirror-maker.adoc\n+\n+[id='assembly-mirrormaker-{context}']\n+= Using {ProductName} with {MirrorMaker}.\n+\n+This section describes using {ProductName} with {MirrorMaker}.\n+\n+{MirrorMaker} is used to replicate data between two or more active Kafka clusters, within or across data centers.\n+\n+Data replication across clusters supports scenarios that require:\n+\n+* Recovery of data in the event of a system failure\n+* Aggregation of data for analysis\n+* Restriction of data access to a specific cluster\n+* Provision of data at a specific location to improve latency\n+\n+NOTE: {MirrorMaker} has features not supported by the previous version of MirrorMaker.\n+\n+.Additional resources\n+\n+* {kafkaDoc}", "originalCommit": "6f306632e4fc83fd7c29c26bc4ea41370d1a4181", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjYyMzQ3NA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2582#discussion_r382623474", "bodyText": "Removed", "author": "PaulRMellor", "createdAt": "2020-02-21T14:52:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjUxODkxNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjUxOTI2NQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2582#discussion_r382519265", "bodyText": "Thsi is really confusing. Can you name the variable MirrorMaker2?", "author": "scholzj", "createdAt": "2020-02-21T10:54:56Z", "path": "documentation/shared/attributes.adoc", "diffHunk": "@@ -18,10 +18,13 @@\n :ContextProduct: strimzi\n :OpenShiftVersion: 3.11 and later\n :KubernetesVersion: 1.11 and later\n+:MirrorMaker: MirrorMaker 2.0", "originalCommit": "6f306632e4fc83fd7c29c26bc4ea41370d1a4181", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjYyMzg0MQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2582#discussion_r382623841", "bodyText": "I've removed the variable altogether. Nobody liked it. \ud83d\ude22", "author": "PaulRMellor", "createdAt": "2020-02-21T14:53:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjUxOTI2NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjUxOTUwOQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2582#discussion_r382519509", "bodyText": "Does this diretory host files for both MM1 and MM2? If not, can you name it mirrormaker2?", "author": "scholzj", "createdAt": "2020-02-21T10:55:29Z", "path": "documentation/assemblies/mirrormaker/modules", "diffHunk": "@@ -0,0 +1 @@\n+../../modules/mirrormaker", "originalCommit": "6f306632e4fc83fd7c29c26bc4ea41370d1a4181", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjYyNTIwNQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2582#discussion_r382625205", "bodyText": "renamed", "author": "PaulRMellor", "createdAt": "2020-02-21T14:55:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjUxOTUwOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjUyMDI4MA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2582#discussion_r382520280", "bodyText": "I think this is important distiction - it only sources the data, so it can have always only one target cluster and multiple source clusters.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            {MirrorMaker} can support more than two active clusters.\n          \n          \n            \n            {MirrorMaker} can be used with more than one source cluster.", "author": "scholzj", "createdAt": "2020-02-21T10:57:02Z", "path": "documentation/modules/mirrormaker/con-mirrormaker-replication.adoc", "diffHunk": "@@ -0,0 +1,89 @@\n+// Module included in the following assemblies:\n+//\n+// assembly-mirrormaker.adoc\n+\n+[id='con-mirrormaker-{context}']\n+= {MirrorMaker} data replication\n+\n+{MirrorMaker} consumes messages from a source Kafka cluster and writes them to a target Kafka cluster.\n+\n+{MirrorMaker} uses:\n+\n+* Source cluster configuration to consume data from the source cluster\n+* Target cluster configuration to output data to the target cluster\n+\n+{MirrorMaker} is based on the Kafka Connect framework, _connectors_ managing the transfer of data between clusters.\n+{MirrorMaker} `SourceConnector` replicates topics from a source cluster to a target cluster.\n+\n+The process of _mirroring_ data from one cluster to another cluster is asynchronous.\n+The recommended pattern is for messages to be produced locally alongside the source Kafka cluster, then consumed remotely close to the target Kafka cluster.\n+\n+{MirrorMaker} can support more than two active clusters.", "originalCommit": "6f306632e4fc83fd7c29c26bc4ea41370d1a4181", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjUyMDQ1NA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2582#discussion_r382520454", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * In an _active/active_ configuration, both clusters are active and provide the same data simultaneously, which is useful if you want  to make the same data available locally in different geographical locations.\n          \n          \n            \n            * In an _active/active_ configuration, both clusters are active and provide the same data simultaneously, which is useful if you want to make the same data available locally in different geographical locations.", "author": "scholzj", "createdAt": "2020-02-21T10:57:25Z", "path": "documentation/modules/mirrormaker/con-mirrormaker-replication.adoc", "diffHunk": "@@ -0,0 +1,89 @@\n+// Module included in the following assemblies:\n+//\n+// assembly-mirrormaker.adoc\n+\n+[id='con-mirrormaker-{context}']\n+= {MirrorMaker} data replication\n+\n+{MirrorMaker} consumes messages from a source Kafka cluster and writes them to a target Kafka cluster.\n+\n+{MirrorMaker} uses:\n+\n+* Source cluster configuration to consume data from the source cluster\n+* Target cluster configuration to output data to the target cluster\n+\n+{MirrorMaker} is based on the Kafka Connect framework, _connectors_ managing the transfer of data between clusters.\n+{MirrorMaker} `SourceConnector` replicates topics from a source cluster to a target cluster.\n+\n+The process of _mirroring_ data from one cluster to another cluster is asynchronous.\n+The recommended pattern is for messages to be produced locally alongside the source Kafka cluster, then consumed remotely close to the target Kafka cluster.\n+\n+{MirrorMaker} can support more than two active clusters.\n+\n+.Replication across two clusters\n+image::mirrormaker.png[{MirrorMaker} replication]\n+\n+= Cluster configuration\n+\n+You can use {MirrorMaker} in _active/passive_ or _active/active_ cluster configurations.\n+\n+* In an _active/passive_ configuration, the data from an active cluster is replicated in a passive cluster, which remains on standby, for example, for data recovery in the event of system failure.\n+* In an _active/active_ configuration, both clusters are active and provide the same data simultaneously, which is useful if you want  to make the same data available locally in different geographical locations.", "originalCommit": "6f306632e4fc83fd7c29c26bc4ea41370d1a4181", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjUyMTAxMw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2582#discussion_r382521013", "bodyText": "Again, this cannot be done with single MM2 - I wonder if we need to distinguish it here somehow to make it more clear.", "author": "scholzj", "createdAt": "2020-02-21T10:58:41Z", "path": "documentation/modules/mirrormaker/con-mirrormaker-replication.adoc", "diffHunk": "@@ -0,0 +1,89 @@\n+// Module included in the following assemblies:\n+//\n+// assembly-mirrormaker.adoc\n+\n+[id='con-mirrormaker-{context}']\n+= {MirrorMaker} data replication\n+\n+{MirrorMaker} consumes messages from a source Kafka cluster and writes them to a target Kafka cluster.\n+\n+{MirrorMaker} uses:\n+\n+* Source cluster configuration to consume data from the source cluster\n+* Target cluster configuration to output data to the target cluster\n+\n+{MirrorMaker} is based on the Kafka Connect framework, _connectors_ managing the transfer of data between clusters.\n+{MirrorMaker} `SourceConnector` replicates topics from a source cluster to a target cluster.\n+\n+The process of _mirroring_ data from one cluster to another cluster is asynchronous.\n+The recommended pattern is for messages to be produced locally alongside the source Kafka cluster, then consumed remotely close to the target Kafka cluster.\n+\n+{MirrorMaker} can support more than two active clusters.\n+\n+.Replication across two clusters\n+image::mirrormaker.png[{MirrorMaker} replication]\n+\n+= Cluster configuration\n+\n+You can use {MirrorMaker} in _active/passive_ or _active/active_ cluster configurations.\n+\n+* In an _active/passive_ configuration, the data from an active cluster is replicated in a passive cluster, which remains on standby, for example, for data recovery in the event of system failure.\n+* In an _active/active_ configuration, both clusters are active and provide the same data simultaneously, which is useful if you want  to make the same data available locally in different geographical locations.\n+\n+The expectation is that producers and consumers connect to active clusters only.\n+\n+== Bidirectional replication\n+\n+The {MirrorMaker} architecture supports bidirectional replication in an _active/active_ cluster configuration.", "originalCommit": "6f306632e4fc83fd7c29c26bc4ea41370d1a4181", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjYzMzA4Ng==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2582#discussion_r382633086", "bodyText": "Is this enough:\n\nA MirrorMaker 2.0 cluster is required at each target destination.", "author": "PaulRMellor", "createdAt": "2020-02-21T15:09:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjUyMTAxMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA0NDMyMA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2582#discussion_r385044320", "bodyText": "We're going to reflect this in the new image too.", "author": "PaulRMellor", "createdAt": "2020-02-27T10:38:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjUyMTAxMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjUyMTYyOA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2582#discussion_r382521628", "bodyText": "This does nto work with User Operator. So I think it should be mentioned as not supported here? Or at least just remove this whole subchapter.", "author": "scholzj", "createdAt": "2020-02-21T11:00:06Z", "path": "documentation/modules/mirrormaker/con-mirrormaker-replication.adoc", "diffHunk": "@@ -0,0 +1,89 @@\n+// Module included in the following assemblies:\n+//\n+// assembly-mirrormaker.adoc\n+\n+[id='con-mirrormaker-{context}']\n+= {MirrorMaker} data replication\n+\n+{MirrorMaker} consumes messages from a source Kafka cluster and writes them to a target Kafka cluster.\n+\n+{MirrorMaker} uses:\n+\n+* Source cluster configuration to consume data from the source cluster\n+* Target cluster configuration to output data to the target cluster\n+\n+{MirrorMaker} is based on the Kafka Connect framework, _connectors_ managing the transfer of data between clusters.\n+{MirrorMaker} `SourceConnector` replicates topics from a source cluster to a target cluster.\n+\n+The process of _mirroring_ data from one cluster to another cluster is asynchronous.\n+The recommended pattern is for messages to be produced locally alongside the source Kafka cluster, then consumed remotely close to the target Kafka cluster.\n+\n+{MirrorMaker} can support more than two active clusters.\n+\n+.Replication across two clusters\n+image::mirrormaker.png[{MirrorMaker} replication]\n+\n+= Cluster configuration\n+\n+You can use {MirrorMaker} in _active/passive_ or _active/active_ cluster configurations.\n+\n+* In an _active/passive_ configuration, the data from an active cluster is replicated in a passive cluster, which remains on standby, for example, for data recovery in the event of system failure.\n+* In an _active/active_ configuration, both clusters are active and provide the same data simultaneously, which is useful if you want  to make the same data available locally in different geographical locations.\n+\n+The expectation is that producers and consumers connect to active clusters only.\n+\n+== Bidirectional replication\n+\n+The {MirrorMaker} architecture supports bidirectional replication in an _active/active_ cluster configuration.\n+\n+Each cluster replicates the data of the other cluster using the concept of _source_ and _remote_ topics.\n+As the same topics are stored in each cluster, remote topics are automatically renamed by {MirrorMaker} to represent the source cluster.\n+\n+.Topic renaming in a bidirectional architecture\n+image::mirrormaker-renaming.png[{MirrorMaker} bidirectional architecture]\n+\n+By flagging the originating cluster, topics are not replicated back to that cluster.\n+\n+The concept of replication through _remote_ topics is useful when configuring an architecture that requires data aggregation.\n+Consumers can subscribe to source and remote topics within the same cluster, without the need for a separate aggregation cluster.\n+\n+== Topic configuration synchronization\n+\n+Topic configuration is automatically synchronized between source and target clusters.\n+By synchronizing configuration properties, the need for rebalancing is reduced.\n+\n+== ACL access to remote topics\n+\n+If `SimpleAclAuthorizer` is being used, ACL rules that manage access to brokers also apply to remote topics.", "originalCommit": "6f306632e4fc83fd7c29c26bc4ea41370d1a4181", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjY3MzY4Mg==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2582#discussion_r382673682", "bodyText": "Maybe someone might wonder what happens with ACL access? Perhaps it's better to say that it is not supported if User Operator is being used?", "author": "PaulRMellor", "createdAt": "2020-02-21T16:19:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjUyMTYyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjY3OTMyOA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2582#discussion_r382679328", "bodyText": "== ACL access to remote topics\nACL access to remote topics is possible if you are not using the User Operator.\nIf SimpleAclAuthorizer is being used, ACL rules that manage access to brokers also apply to remote topics.\nUsers that can read a source topic can read its remote equivalent.\nNOTE: {oauth} authorization does not support access to remote topics in this way.", "author": "PaulRMellor", "createdAt": "2020-02-21T16:29:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjUyMTYyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc5MzMzNQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2582#discussion_r382793335", "bodyText": "Ok, makes sense. I think we should call it more something like ACL rules synchronization. People will not understand what exactly it means under ACL access to remote topics.", "author": "scholzj", "createdAt": "2020-02-21T20:35:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjUyMTYyOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjUxMzc3MQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2582#discussion_r382513771", "bodyText": "why are we using a variable for MM2 if the name will be MirrorMaker 2?", "author": "ppatierno", "createdAt": "2020-02-21T10:42:49Z", "path": "documentation/assemblies/assembly-deployment-configuration-kafka-mirror-maker.adoc", "diffHunk": "@@ -11,30 +11,59 @@\n :parent-context-deployment-configuration-kafka-mirror-maker: {context}\n \n [id='assembly-deployment-configuration-kafka-mirror-maker-{context}']\n-= Kafka Mirror Maker configuration\n+= Kafka MirrorMaker configuration\n \n :context: deployment-configuration-kafka-mirror-maker\n \n-This chapter describes how to configure the `KafkaMirrorMaker` resource to support a Kafka Mirror Maker deployment in your cluster.\n+This chapter describes how to configure a Kafka MirrorMaker deployment in your cluster.\n \n-The following procedures show how the resource is configured:\n+You can use {ProductName} with MirrorMaker or {MirrorMaker}.", "originalCommit": "6f306632e4fc83fd7c29c26bc4ea41370d1a4181", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjY3NDE3MQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2582#discussion_r382674171", "bodyText": "Nobody liked this variable. It's gone now. \ud83d\udc4d", "author": "PaulRMellor", "createdAt": "2020-02-21T16:20:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjUxMzc3MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjUxOTIwMw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2582#discussion_r382519203", "bodyText": "actually mirror maker doesn't rename topics only in a bidirectional architecture but even when it's one direction from source to target. The topic on target will be renamed from the original one on the source.", "author": "ppatierno", "createdAt": "2020-02-21T10:54:47Z", "path": "documentation/modules/mirrormaker/con-mirrormaker-replication.adoc", "diffHunk": "@@ -0,0 +1,89 @@\n+// Module included in the following assemblies:\n+//\n+// assembly-mirrormaker.adoc\n+\n+[id='con-mirrormaker-{context}']\n+= {MirrorMaker} data replication\n+\n+{MirrorMaker} consumes messages from a source Kafka cluster and writes them to a target Kafka cluster.\n+\n+{MirrorMaker} uses:\n+\n+* Source cluster configuration to consume data from the source cluster\n+* Target cluster configuration to output data to the target cluster\n+\n+{MirrorMaker} is based on the Kafka Connect framework, _connectors_ managing the transfer of data between clusters.\n+{MirrorMaker} `SourceConnector` replicates topics from a source cluster to a target cluster.\n+\n+The process of _mirroring_ data from one cluster to another cluster is asynchronous.\n+The recommended pattern is for messages to be produced locally alongside the source Kafka cluster, then consumed remotely close to the target Kafka cluster.\n+\n+{MirrorMaker} can support more than two active clusters.\n+\n+.Replication across two clusters\n+image::mirrormaker.png[{MirrorMaker} replication]\n+\n+= Cluster configuration\n+\n+You can use {MirrorMaker} in _active/passive_ or _active/active_ cluster configurations.\n+\n+* In an _active/passive_ configuration, the data from an active cluster is replicated in a passive cluster, which remains on standby, for example, for data recovery in the event of system failure.\n+* In an _active/active_ configuration, both clusters are active and provide the same data simultaneously, which is useful if you want  to make the same data available locally in different geographical locations.\n+\n+The expectation is that producers and consumers connect to active clusters only.\n+\n+== Bidirectional replication\n+\n+The {MirrorMaker} architecture supports bidirectional replication in an _active/active_ cluster configuration.\n+\n+Each cluster replicates the data of the other cluster using the concept of _source_ and _remote_ topics.\n+As the same topics are stored in each cluster, remote topics are automatically renamed by {MirrorMaker} to represent the source cluster.\n+\n+.Topic renaming in a bidirectional architecture", "originalCommit": "6f306632e4fc83fd7c29c26bc4ea41370d1a4181", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjY3NTM3MQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2582#discussion_r382675371", "bodyText": "I changed to just .topic renaming", "author": "PaulRMellor", "createdAt": "2020-02-21T16:22:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjUxOTIwMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjUyODYxOQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2582#discussion_r382528619", "bodyText": "KafkaMirrorMaker2", "author": "ppatierno", "createdAt": "2020-02-21T11:17:15Z", "path": "documentation/modules/mirrormaker/proc-mirrormaker-replication.adoc", "diffHunk": "@@ -0,0 +1,104 @@\n+// Module included in the following assemblies:\n+//\n+// assembly-mirrormaker.adoc\n+\n+[id='proc-mirrormaker-replication-{context}']\n+= Synchronizing data between Kafka clusters\n+\n+Use {MirrorMaker} to synchronize data between Kafka clusters through configuration.\n+\n+The previous version of {MirrorMaker} continues to be supported.\n+If you wish to use the resources configured for the previous version,\n+they must be updated to the format supported by {MirrorMaker}.\n+\n+The configuration must specify:\n+\n+* Each Kafka cluster\n+* Connection information for each cluster, including TLS authentication\n+* The replication flow and direction\n+** Cluster to cluster\n+** Topic to topic\n+* Replication rules\n+* Committed offset tracking intervals\n+\n+Use the properties of the `KafkaMirrorMaker2` resource to configure your Kafka {MirrorMaker} deployment.\n+\n+You can configure access control for source and target clusters using TLS or SASL authentication.\n+This procedure shows a configuration that uses TLS encryption and authentication for the source and target cluster.\n+\n+.Prerequisites\n+\n+* xref:cluster-operator-str[{ProductName} and Kafka is deployed]\n+* Source and target Kafka clusters are available\n+\n+.Procedure\n+\n+. Edit the `spec` properties for the `KafkaMirrorMaker` resource.", "originalCommit": "6f306632e4fc83fd7c29c26bc4ea41370d1a4181", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjY3NTUyOQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2582#discussion_r382675529", "bodyText": "Caught", "author": "PaulRMellor", "createdAt": "2020-02-21T16:22:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjUyODYxOQ=="}], "type": "inlineReview"}, {"oid": "2a556e7aa3a8d8df68550502e46ed74a26974045", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/2a556e7aa3a8d8df68550502e46ed74a26974045", "message": "Apply suggestions from code review\r\n\r\nSuggestions applied from review\n\nCo-Authored-By: Daniel Laing <dlaing@redhat.com>\nCo-Authored-By: Jakub Scholz <www@scholzj.com>", "committedDate": "2020-02-21T13:16:20Z", "type": "forcePushed"}, {"oid": "a4f801727ef934b8fa122f76650c399ad0a46338", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/a4f801727ef934b8fa122f76650c399ad0a46338", "message": "Apply suggestions from code review\n\nSuggestions applied from review\n\nCo-Authored-By: Daniel Laing <dlaing@redhat.com>\nCo-Authored-By: Jakub Scholz <www@scholzj.com>\nSigned-off-by: prmellor <pmellor@redhat.com>", "committedDate": "2020-02-21T14:23:51Z", "type": "commit"}, {"oid": "a4f801727ef934b8fa122f76650c399ad0a46338", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/a4f801727ef934b8fa122f76650c399ad0a46338", "message": "Apply suggestions from code review\n\nSuggestions applied from review\n\nCo-Authored-By: Daniel Laing <dlaing@redhat.com>\nCo-Authored-By: Jakub Scholz <www@scholzj.com>\nSigned-off-by: prmellor <pmellor@redhat.com>", "committedDate": "2020-02-21T14:23:51Z", "type": "forcePushed"}, {"oid": "9531b938a61ab58faa65b1d8fab3f4bd7845ad38", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/9531b938a61ab58faa65b1d8fab3f4bd7845ad38", "message": "review edits DL\n\nSigned-off-by: prmellor <pmellor@redhat.com>", "committedDate": "2020-02-21T14:48:22Z", "type": "commit"}, {"oid": "c54eac539f57d07f7b9b6ee36e2788725674678e", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/c54eac539f57d07f7b9b6ee36e2788725674678e", "message": "review edits JS, PP\n\nSigned-off-by: prmellor <pmellor@redhat.com>", "committedDate": "2020-02-21T16:25:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzAzODM4Mw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2582#discussion_r383038383", "bodyText": "The full name for the connector is MirrorSourceConnector - in the CR I just use sourceConnector because it's already within the spec.mirrors section.", "author": "ajborley", "createdAt": "2020-02-23T21:05:17Z", "path": "documentation/modules/mirrormaker2/con-mirrormaker-replication.adoc", "diffHunk": "@@ -0,0 +1,90 @@\n+// Module included in the following assemblies:\n+//\n+// assembly-mirrormaker.adoc\n+\n+[id='con-mirrormaker-{context}']\n+= MirrorMaker 2.0 data replication\n+\n+MirrorMaker 2.0 consumes messages from a source Kafka cluster and writes them to a target Kafka cluster.\n+\n+MirrorMaker 2.0 uses:\n+\n+* Source cluster configuration to consume data from the source cluster\n+* Target cluster configuration to output data to the target cluster\n+\n+MirrorMaker 2.0 is based on the Kafka Connect framework, _connectors_ managing the transfer of data between clusters.\n+A MirrorMaker 2.0 `SourceConnector` replicates topics from a source cluster to a target cluster.", "originalCommit": "c54eac539f57d07f7b9b6ee36e2788725674678e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzAzODYwMw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2582#discussion_r383038603", "bodyText": "The full name here is MirrorCheckpointConnector.", "author": "ajborley", "createdAt": "2020-02-23T21:07:55Z", "path": "documentation/modules/mirrormaker2/con-mirrormaker-replication.adoc", "diffHunk": "@@ -0,0 +1,90 @@\n+// Module included in the following assemblies:\n+//\n+// assembly-mirrormaker.adoc\n+\n+[id='con-mirrormaker-{context}']\n+= MirrorMaker 2.0 data replication\n+\n+MirrorMaker 2.0 consumes messages from a source Kafka cluster and writes them to a target Kafka cluster.\n+\n+MirrorMaker 2.0 uses:\n+\n+* Source cluster configuration to consume data from the source cluster\n+* Target cluster configuration to output data to the target cluster\n+\n+MirrorMaker 2.0 is based on the Kafka Connect framework, _connectors_ managing the transfer of data between clusters.\n+A MirrorMaker 2.0 `SourceConnector` replicates topics from a source cluster to a target cluster.\n+\n+The process of _mirroring_ data from one cluster to another cluster is asynchronous.\n+The recommended pattern is for messages to be produced locally alongside the source Kafka cluster, then consumed remotely close to the target Kafka cluster.\n+\n+MirrorMaker 2.0 can be used with more than one source cluster.\n+\n+.Replication across two clusters\n+image::mirrormaker.png[MirrorMaker 2.0 replication]\n+\n+= Cluster configuration\n+\n+You can use MirrorMaker 2.0 in _active/passive_ or _active/active_ cluster configurations.\n+\n+* In an _active/passive_ configuration, the data from an active cluster is replicated in a passive cluster, which remains on standby, for example, for data recovery in the event of system failure.\n+* In an _active/active_ configuration, both clusters are active and provide the same data simultaneously, which is useful if you want to make the same data available locally in different geographical locations.\n+\n+The expectation is that producers and consumers connect to active clusters only.\n+\n+== Bidirectional replication\n+\n+The MirrorMaker 2.0 architecture supports bidirectional replication in an _active/active_ cluster configuration.\n+A MirrorMaker 2.0 cluster is required at each target destination.\n+\n+Each cluster replicates the data of the other cluster using the concept of _source_ and _remote_ topics.\n+As the same topics are stored in each cluster, remote topics are automatically renamed by MirrorMaker 2.0 to represent the source cluster.\n+\n+.Topic renaming\n+image::mirrormaker-renaming.png[MirrorMaker 2.0 bidirectional architecture]\n+\n+By flagging the originating cluster, topics are not replicated back to that cluster.\n+\n+The concept of replication through _remote_ topics is useful when configuring an architecture that requires data aggregation.\n+Consumers can subscribe to source and remote topics within the same cluster, without the need for a separate aggregation cluster.\n+\n+== Topic configuration synchronization\n+\n+Topic configuration is automatically synchronized between source and target clusters.\n+By synchronizing configuration properties, the need for rebalancing is reduced.\n+\n+== ACL access to remote topics\n+\n+If `SimpleAclAuthorizer` is being used, ACL rules that manage access to brokers also apply to remote topics.\n+Users that can read a source topic can read its remote equivalent.\n+\n+NOTE: {oauth} authorization does not support access to remote topics in this way.\n+\n+== Data integrity\n+\n+MirrorMaker 2.0 monitors source topics and propagates any configuration changes to remote topics, checking for and creating missing partitions.\n+Only MirrorMaker 2.0 can write to remote topics.\n+\n+== Offset tracking\n+MirrorMaker 2.0 tracks offsets for consumer groups using _internal topics_.\n+\n+* The _offset sync_ topic maps the source and target offsets for replicated topic partitions from record metadata\n+* The _checkpoint_ topic maps the last committed offset in the source and target cluster for replicated topic partitions in each consumer group\n+\n+Offsets for the _checkpoint_ topic are tracked at predetermined intervals through configuration.\n+Both topics enable replication to be fully restored from the correct offset position on failover.\n+\n+MirrorMaker 2.0 uses its `checkpointConnector` to emit _checkpoints_ for offset tracking.", "originalCommit": "c54eac539f57d07f7b9b6ee36e2788725674678e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzAzODY0MQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2582#discussion_r383038641", "bodyText": "And this one is MirrorHeartbeatConnector.", "author": "ajborley", "createdAt": "2020-02-23T21:08:23Z", "path": "documentation/modules/mirrormaker2/con-mirrormaker-replication.adoc", "diffHunk": "@@ -0,0 +1,90 @@\n+// Module included in the following assemblies:\n+//\n+// assembly-mirrormaker.adoc\n+\n+[id='con-mirrormaker-{context}']\n+= MirrorMaker 2.0 data replication\n+\n+MirrorMaker 2.0 consumes messages from a source Kafka cluster and writes them to a target Kafka cluster.\n+\n+MirrorMaker 2.0 uses:\n+\n+* Source cluster configuration to consume data from the source cluster\n+* Target cluster configuration to output data to the target cluster\n+\n+MirrorMaker 2.0 is based on the Kafka Connect framework, _connectors_ managing the transfer of data between clusters.\n+A MirrorMaker 2.0 `SourceConnector` replicates topics from a source cluster to a target cluster.\n+\n+The process of _mirroring_ data from one cluster to another cluster is asynchronous.\n+The recommended pattern is for messages to be produced locally alongside the source Kafka cluster, then consumed remotely close to the target Kafka cluster.\n+\n+MirrorMaker 2.0 can be used with more than one source cluster.\n+\n+.Replication across two clusters\n+image::mirrormaker.png[MirrorMaker 2.0 replication]\n+\n+= Cluster configuration\n+\n+You can use MirrorMaker 2.0 in _active/passive_ or _active/active_ cluster configurations.\n+\n+* In an _active/passive_ configuration, the data from an active cluster is replicated in a passive cluster, which remains on standby, for example, for data recovery in the event of system failure.\n+* In an _active/active_ configuration, both clusters are active and provide the same data simultaneously, which is useful if you want to make the same data available locally in different geographical locations.\n+\n+The expectation is that producers and consumers connect to active clusters only.\n+\n+== Bidirectional replication\n+\n+The MirrorMaker 2.0 architecture supports bidirectional replication in an _active/active_ cluster configuration.\n+A MirrorMaker 2.0 cluster is required at each target destination.\n+\n+Each cluster replicates the data of the other cluster using the concept of _source_ and _remote_ topics.\n+As the same topics are stored in each cluster, remote topics are automatically renamed by MirrorMaker 2.0 to represent the source cluster.\n+\n+.Topic renaming\n+image::mirrormaker-renaming.png[MirrorMaker 2.0 bidirectional architecture]\n+\n+By flagging the originating cluster, topics are not replicated back to that cluster.\n+\n+The concept of replication through _remote_ topics is useful when configuring an architecture that requires data aggregation.\n+Consumers can subscribe to source and remote topics within the same cluster, without the need for a separate aggregation cluster.\n+\n+== Topic configuration synchronization\n+\n+Topic configuration is automatically synchronized between source and target clusters.\n+By synchronizing configuration properties, the need for rebalancing is reduced.\n+\n+== ACL access to remote topics\n+\n+If `SimpleAclAuthorizer` is being used, ACL rules that manage access to brokers also apply to remote topics.\n+Users that can read a source topic can read its remote equivalent.\n+\n+NOTE: {oauth} authorization does not support access to remote topics in this way.\n+\n+== Data integrity\n+\n+MirrorMaker 2.0 monitors source topics and propagates any configuration changes to remote topics, checking for and creating missing partitions.\n+Only MirrorMaker 2.0 can write to remote topics.\n+\n+== Offset tracking\n+MirrorMaker 2.0 tracks offsets for consumer groups using _internal topics_.\n+\n+* The _offset sync_ topic maps the source and target offsets for replicated topic partitions from record metadata\n+* The _checkpoint_ topic maps the last committed offset in the source and target cluster for replicated topic partitions in each consumer group\n+\n+Offsets for the _checkpoint_ topic are tracked at predetermined intervals through configuration.\n+Both topics enable replication to be fully restored from the correct offset position on failover.\n+\n+MirrorMaker 2.0 uses its `checkpointConnector` to emit _checkpoints_ for offset tracking.\n+\n+== Connectivity checks\n+\n+A _heartbeat_ internal topic checks connectivity between clusters.\n+\n+The _heartbeat_ topic is replicated from the source cluster.\n+\n+Target clusters use the topic to check:\n+\n+* The connector managing connectivity between clusters is running\n+* The source cluster is available\n+\n+MirrorMaker 2.0 uses its `heartbeatConnector` to emit _heartbeats_ that perform these checks.", "originalCommit": "c54eac539f57d07f7b9b6ee36e2788725674678e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzA0MDA4Nw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2582#discussion_r383040087", "bodyText": "I'm not sure what these 2 lines mean - the MM2 CR and connectors don't require the replication factors or offset tracking intervals to be set. MM2 has default values for the configuration options, which can be left as-is if they suit the required deployment (the defaults are mostly defined here: https://github.com/apache/kafka/blob/trunk/connect/mirror/src/main/java/org/apache/kafka/connect/mirror/MirrorConnectorConfig.java ).\nFor example, the following CR would be valid and would create only the MirrorSourceConnector to replicate all topics from my-cluster-source to my-cluster-target:\napiVersion: {KafkaApiVersion}\nkind: KafkaMirrorMaker2\nmetadata:\n  name: my-mirror-maker2\nspec:\n  version: {DefaultKafkaVersion}\n  connectCluster: \"my-cluster-target\"\n  clusters:\n  - alias: \"my-cluster-source\"\n    bootstrapServers: my-cluster-source-kafka-bootstrap:9092\n  - alias: \"my-cluster-target\"\n    bootstrapServers: my-cluster-target-kafka-bootstrap:9092\n  mirrors:\n  - sourceCluster: \"my-cluster-source\"\n    targetCluster: \"my-cluster-target\"\n    sourceConnector: {}", "author": "ajborley", "createdAt": "2020-02-23T21:29:24Z", "path": "documentation/modules/mirrormaker2/proc-mirrormaker-replication.adoc", "diffHunk": "@@ -0,0 +1,104 @@\n+// Module included in the following assemblies:\n+//\n+// assembly-mirrormaker.adoc\n+\n+[id='proc-mirrormaker-replication-{context}']\n+= Synchronizing data between Kafka clusters using MirrorMaker 2.0\n+\n+Use MirrorMaker 2.0 to synchronize data between Kafka clusters through configuration.\n+\n+The previous version of MirrorMaker 2.0 continues to be supported.\n+If you wish to use the resources configured for the previous version,\n+they must be updated to the format supported by MirrorMaker 2.0.\n+\n+The configuration must specify:\n+\n+* Each Kafka cluster\n+* Connection information for each cluster, including TLS authentication\n+* The replication flow and direction\n+** Cluster to cluster\n+** Topic to topic\n+* Replication rules\n+* Committed offset tracking intervals", "originalCommit": "c54eac539f57d07f7b9b6ee36e2788725674678e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzE1MjczNw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2582#discussion_r383152737", "bodyText": "Okay @ajborley. I guess it makes sense to say something along these lines. How about including the minimum config here too:", "author": "PaulRMellor", "createdAt": "2020-02-24T09:26:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzA0MDA4Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzE1NzM5MA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2582#discussion_r383157390", "bodyText": "Looks good to me.", "author": "ajborley", "createdAt": "2020-02-24T09:36:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzA0MDA4Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzA0MjQ1Mw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2582#discussion_r383042453", "bodyText": "Again, we should probably refer to this as the MirrorSourceConnector. Also, saying that it creates remotes topics isn't quite sufficient as it does the topic creation, topic configuration and record replication. How about something like:\n<13> The configuration for the `MirrorSourceConnector` that mirrors topics from the source cluster to the target cluster.", "author": "ajborley", "createdAt": "2020-02-23T22:00:55Z", "path": "documentation/modules/mirrormaker2/proc-mirrormaker-replication.adoc", "diffHunk": "@@ -0,0 +1,104 @@\n+// Module included in the following assemblies:\n+//\n+// assembly-mirrormaker.adoc\n+\n+[id='proc-mirrormaker-replication-{context}']\n+= Synchronizing data between Kafka clusters using MirrorMaker 2.0\n+\n+Use MirrorMaker 2.0 to synchronize data between Kafka clusters through configuration.\n+\n+The previous version of MirrorMaker 2.0 continues to be supported.\n+If you wish to use the resources configured for the previous version,\n+they must be updated to the format supported by MirrorMaker 2.0.\n+\n+The configuration must specify:\n+\n+* Each Kafka cluster\n+* Connection information for each cluster, including TLS authentication\n+* The replication flow and direction\n+** Cluster to cluster\n+** Topic to topic\n+* Replication rules\n+* Committed offset tracking intervals\n+\n+Use the properties of the `KafkaMirrorMaker2` resource to configure your Kafka MirrorMaker 2.0 deployment.\n+\n+You can configure access control for source and target clusters using TLS or SASL authentication.\n+This procedure shows a configuration that uses TLS encryption and authentication for the source and target cluster.\n+\n+.Prerequisites\n+\n+* xref:cluster-operator-str[{ProductName} and Kafka is deployed]\n+* Source and target Kafka clusters are available\n+\n+.Procedure\n+\n+. Edit the `spec` properties for the `KafkaMirrorMaker2` resource.\n++\n+The properties you can configure are shown in this example configuration:\n++\n+[source,yaml,subs=\"+quotes,attributes\"]\n+----\n+apiVersion: {KafkaApiVersion}\n+kind: KafkaMirrorMaker2\n+metadata:\n+  name: my-mirror-maker2\n+spec:\n+  version: {DefaultKafkaVersion} <1>\n+  replicas: 3 <2>\n+  connectCluster: \"my-cluster-target\" <3>\n+  clusters: <4>\n+  - alias: \"my-cluster-source\" <5>\n+    bootstrapServers: my-cluster-source-kafka-bootstrap:9092 <6>\n+  - alias: \"my-cluster-target\" <7>\n+    bootstrapServers: my-cluster-target-kafka-bootstrap:9092 <8>\n+    config: <9>\n+      config.storage.replication.factor: 1\n+      offset.storage.replication.factor: 1\n+      status.storage.replication.factor: 1\n+  mirrors: <10>\n+  - sourceCluster: \"my-cluster-source\" <11>\n+    targetCluster: \"my-cluster-target\" <12>\n+    sourceConnector: <13>\n+      config:\n+        replication.factor: 1 <14>\n+        offset-syncs.topic.replication.factor: 1 <15>\n+        sync.topic.acls.enabled: \"false\" <16>\n+    heartbeatConnector: <17>\n+      config:\n+        heartbeats.topic.replication.factor: 1 <18>\n+    checkpointConnector: <19>\n+      config:\n+        checkpoints.topic.replication.factor: 1 <20>\n+    topicsPattern: \".*\" <21>\n+    groupsPattern: \"group1|group2|group3\" <22>\n+----\n+<1> The Kafka Connect version.\n+<2> The number of replica nodes.\n+<3> The cluster alias for Kafka Connect.\n+<4> Specification for the Kafka clusters being synchronized.\n+<5> The cluster alias for the source Kafka cluster.\n+<6> Bootstrap server for connection to the source Kafka cluster.\n+<7> The cluster alias for the target Kafka cluster.\n+<8> Bootstrap server for connection to the target Kafka cluster.\n+<9> xref:assembly-kafka-connect-configuration-deployment-configuration-kafka-connect[Kafka Connect configuration].\n+Standard Apache Kafka configuration may be provided, restricted to those properties not managed directly by {ProductName}.\n+<10> MirrorMaker 2.0 connectors.\n+<11> The alias of the source cluster used by the MirrorMaker 2.0 connectors.\n+<12> The alias of the target cluster used by the MirrorMaker 2.0 connectors.\n+<13> The configuration for the `sourceConnector` that creates remote topics.", "originalCommit": "c54eac539f57d07f7b9b6ee36e2788725674678e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzA0MjQ1Ng==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2582#discussion_r383042456", "bodyText": "<14>, <15> and <16> are all overriding the default configuration options for the MirrorSourceConnector.\nThis option sets the replication factor for the mirror topics that are created by the MirrorSourceConnector, something like:\n<14> The replication factor for mirrored topics created at the target cluster.", "author": "ajborley", "createdAt": "2020-02-23T22:00:59Z", "path": "documentation/modules/mirrormaker2/proc-mirrormaker-replication.adoc", "diffHunk": "@@ -0,0 +1,104 @@\n+// Module included in the following assemblies:\n+//\n+// assembly-mirrormaker.adoc\n+\n+[id='proc-mirrormaker-replication-{context}']\n+= Synchronizing data between Kafka clusters using MirrorMaker 2.0\n+\n+Use MirrorMaker 2.0 to synchronize data between Kafka clusters through configuration.\n+\n+The previous version of MirrorMaker 2.0 continues to be supported.\n+If you wish to use the resources configured for the previous version,\n+they must be updated to the format supported by MirrorMaker 2.0.\n+\n+The configuration must specify:\n+\n+* Each Kafka cluster\n+* Connection information for each cluster, including TLS authentication\n+* The replication flow and direction\n+** Cluster to cluster\n+** Topic to topic\n+* Replication rules\n+* Committed offset tracking intervals\n+\n+Use the properties of the `KafkaMirrorMaker2` resource to configure your Kafka MirrorMaker 2.0 deployment.\n+\n+You can configure access control for source and target clusters using TLS or SASL authentication.\n+This procedure shows a configuration that uses TLS encryption and authentication for the source and target cluster.\n+\n+.Prerequisites\n+\n+* xref:cluster-operator-str[{ProductName} and Kafka is deployed]\n+* Source and target Kafka clusters are available\n+\n+.Procedure\n+\n+. Edit the `spec` properties for the `KafkaMirrorMaker2` resource.\n++\n+The properties you can configure are shown in this example configuration:\n++\n+[source,yaml,subs=\"+quotes,attributes\"]\n+----\n+apiVersion: {KafkaApiVersion}\n+kind: KafkaMirrorMaker2\n+metadata:\n+  name: my-mirror-maker2\n+spec:\n+  version: {DefaultKafkaVersion} <1>\n+  replicas: 3 <2>\n+  connectCluster: \"my-cluster-target\" <3>\n+  clusters: <4>\n+  - alias: \"my-cluster-source\" <5>\n+    bootstrapServers: my-cluster-source-kafka-bootstrap:9092 <6>\n+  - alias: \"my-cluster-target\" <7>\n+    bootstrapServers: my-cluster-target-kafka-bootstrap:9092 <8>\n+    config: <9>\n+      config.storage.replication.factor: 1\n+      offset.storage.replication.factor: 1\n+      status.storage.replication.factor: 1\n+  mirrors: <10>\n+  - sourceCluster: \"my-cluster-source\" <11>\n+    targetCluster: \"my-cluster-target\" <12>\n+    sourceConnector: <13>\n+      config:\n+        replication.factor: 1 <14>\n+        offset-syncs.topic.replication.factor: 1 <15>\n+        sync.topic.acls.enabled: \"false\" <16>\n+    heartbeatConnector: <17>\n+      config:\n+        heartbeats.topic.replication.factor: 1 <18>\n+    checkpointConnector: <19>\n+      config:\n+        checkpoints.topic.replication.factor: 1 <20>\n+    topicsPattern: \".*\" <21>\n+    groupsPattern: \"group1|group2|group3\" <22>\n+----\n+<1> The Kafka Connect version.\n+<2> The number of replica nodes.\n+<3> The cluster alias for Kafka Connect.\n+<4> Specification for the Kafka clusters being synchronized.\n+<5> The cluster alias for the source Kafka cluster.\n+<6> Bootstrap server for connection to the source Kafka cluster.\n+<7> The cluster alias for the target Kafka cluster.\n+<8> Bootstrap server for connection to the target Kafka cluster.\n+<9> xref:assembly-kafka-connect-configuration-deployment-configuration-kafka-connect[Kafka Connect configuration].\n+Standard Apache Kafka configuration may be provided, restricted to those properties not managed directly by {ProductName}.\n+<10> MirrorMaker 2.0 connectors.\n+<11> The alias of the source cluster used by the MirrorMaker 2.0 connectors.\n+<12> The alias of the target cluster used by the MirrorMaker 2.0 connectors.\n+<13> The configuration for the `sourceConnector` that creates remote topics.\n+<14> The replication factor for the `sourceConnector`.", "originalCommit": "c54eac539f57d07f7b9b6ee36e2788725674678e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzA0MjUzMQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2582#discussion_r383042531", "bodyText": "The default for sync.topic.acls.enabled is true", "author": "ajborley", "createdAt": "2020-02-23T22:01:46Z", "path": "documentation/modules/mirrormaker2/proc-mirrormaker-replication.adoc", "diffHunk": "@@ -0,0 +1,104 @@\n+// Module included in the following assemblies:\n+//\n+// assembly-mirrormaker.adoc\n+\n+[id='proc-mirrormaker-replication-{context}']\n+= Synchronizing data between Kafka clusters using MirrorMaker 2.0\n+\n+Use MirrorMaker 2.0 to synchronize data between Kafka clusters through configuration.\n+\n+The previous version of MirrorMaker 2.0 continues to be supported.\n+If you wish to use the resources configured for the previous version,\n+they must be updated to the format supported by MirrorMaker 2.0.\n+\n+The configuration must specify:\n+\n+* Each Kafka cluster\n+* Connection information for each cluster, including TLS authentication\n+* The replication flow and direction\n+** Cluster to cluster\n+** Topic to topic\n+* Replication rules\n+* Committed offset tracking intervals\n+\n+Use the properties of the `KafkaMirrorMaker2` resource to configure your Kafka MirrorMaker 2.0 deployment.\n+\n+You can configure access control for source and target clusters using TLS or SASL authentication.\n+This procedure shows a configuration that uses TLS encryption and authentication for the source and target cluster.\n+\n+.Prerequisites\n+\n+* xref:cluster-operator-str[{ProductName} and Kafka is deployed]\n+* Source and target Kafka clusters are available\n+\n+.Procedure\n+\n+. Edit the `spec` properties for the `KafkaMirrorMaker2` resource.\n++\n+The properties you can configure are shown in this example configuration:\n++\n+[source,yaml,subs=\"+quotes,attributes\"]\n+----\n+apiVersion: {KafkaApiVersion}\n+kind: KafkaMirrorMaker2\n+metadata:\n+  name: my-mirror-maker2\n+spec:\n+  version: {DefaultKafkaVersion} <1>\n+  replicas: 3 <2>\n+  connectCluster: \"my-cluster-target\" <3>\n+  clusters: <4>\n+  - alias: \"my-cluster-source\" <5>\n+    bootstrapServers: my-cluster-source-kafka-bootstrap:9092 <6>\n+  - alias: \"my-cluster-target\" <7>\n+    bootstrapServers: my-cluster-target-kafka-bootstrap:9092 <8>\n+    config: <9>\n+      config.storage.replication.factor: 1\n+      offset.storage.replication.factor: 1\n+      status.storage.replication.factor: 1\n+  mirrors: <10>\n+  - sourceCluster: \"my-cluster-source\" <11>\n+    targetCluster: \"my-cluster-target\" <12>\n+    sourceConnector: <13>\n+      config:\n+        replication.factor: 1 <14>\n+        offset-syncs.topic.replication.factor: 1 <15>\n+        sync.topic.acls.enabled: \"false\" <16>\n+    heartbeatConnector: <17>\n+      config:\n+        heartbeats.topic.replication.factor: 1 <18>\n+    checkpointConnector: <19>\n+      config:\n+        checkpoints.topic.replication.factor: 1 <20>\n+    topicsPattern: \".*\" <21>\n+    groupsPattern: \"group1|group2|group3\" <22>\n+----\n+<1> The Kafka Connect version.\n+<2> The number of replica nodes.\n+<3> The cluster alias for Kafka Connect.\n+<4> Specification for the Kafka clusters being synchronized.\n+<5> The cluster alias for the source Kafka cluster.\n+<6> Bootstrap server for connection to the source Kafka cluster.\n+<7> The cluster alias for the target Kafka cluster.\n+<8> Bootstrap server for connection to the target Kafka cluster.\n+<9> xref:assembly-kafka-connect-configuration-deployment-configuration-kafka-connect[Kafka Connect configuration].\n+Standard Apache Kafka configuration may be provided, restricted to those properties not managed directly by {ProductName}.\n+<10> MirrorMaker 2.0 connectors.\n+<11> The alias of the source cluster used by the MirrorMaker 2.0 connectors.\n+<12> The alias of the target cluster used by the MirrorMaker 2.0 connectors.\n+<13> The configuration for the `sourceConnector` that creates remote topics.\n+<14> The replication factor for the `sourceConnector`.\n+<15> The replication factor for the `sourceConnector` `offset-syncs` internal topic that maps the offsets of the source and target clusters.\n+<16> When enabled, ACLs are applied to synchronized topics. The default is `false`.", "originalCommit": "c54eac539f57d07f7b9b6ee36e2788725674678e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzA0Mjc4OA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2582#discussion_r383042788", "bodyText": "Again, we should probably refer to this as the MirrorHeartbeatConnector.", "author": "ajborley", "createdAt": "2020-02-23T22:05:34Z", "path": "documentation/modules/mirrormaker2/proc-mirrormaker-replication.adoc", "diffHunk": "@@ -0,0 +1,104 @@\n+// Module included in the following assemblies:\n+//\n+// assembly-mirrormaker.adoc\n+\n+[id='proc-mirrormaker-replication-{context}']\n+= Synchronizing data between Kafka clusters using MirrorMaker 2.0\n+\n+Use MirrorMaker 2.0 to synchronize data between Kafka clusters through configuration.\n+\n+The previous version of MirrorMaker 2.0 continues to be supported.\n+If you wish to use the resources configured for the previous version,\n+they must be updated to the format supported by MirrorMaker 2.0.\n+\n+The configuration must specify:\n+\n+* Each Kafka cluster\n+* Connection information for each cluster, including TLS authentication\n+* The replication flow and direction\n+** Cluster to cluster\n+** Topic to topic\n+* Replication rules\n+* Committed offset tracking intervals\n+\n+Use the properties of the `KafkaMirrorMaker2` resource to configure your Kafka MirrorMaker 2.0 deployment.\n+\n+You can configure access control for source and target clusters using TLS or SASL authentication.\n+This procedure shows a configuration that uses TLS encryption and authentication for the source and target cluster.\n+\n+.Prerequisites\n+\n+* xref:cluster-operator-str[{ProductName} and Kafka is deployed]\n+* Source and target Kafka clusters are available\n+\n+.Procedure\n+\n+. Edit the `spec` properties for the `KafkaMirrorMaker2` resource.\n++\n+The properties you can configure are shown in this example configuration:\n++\n+[source,yaml,subs=\"+quotes,attributes\"]\n+----\n+apiVersion: {KafkaApiVersion}\n+kind: KafkaMirrorMaker2\n+metadata:\n+  name: my-mirror-maker2\n+spec:\n+  version: {DefaultKafkaVersion} <1>\n+  replicas: 3 <2>\n+  connectCluster: \"my-cluster-target\" <3>\n+  clusters: <4>\n+  - alias: \"my-cluster-source\" <5>\n+    bootstrapServers: my-cluster-source-kafka-bootstrap:9092 <6>\n+  - alias: \"my-cluster-target\" <7>\n+    bootstrapServers: my-cluster-target-kafka-bootstrap:9092 <8>\n+    config: <9>\n+      config.storage.replication.factor: 1\n+      offset.storage.replication.factor: 1\n+      status.storage.replication.factor: 1\n+  mirrors: <10>\n+  - sourceCluster: \"my-cluster-source\" <11>\n+    targetCluster: \"my-cluster-target\" <12>\n+    sourceConnector: <13>\n+      config:\n+        replication.factor: 1 <14>\n+        offset-syncs.topic.replication.factor: 1 <15>\n+        sync.topic.acls.enabled: \"false\" <16>\n+    heartbeatConnector: <17>\n+      config:\n+        heartbeats.topic.replication.factor: 1 <18>\n+    checkpointConnector: <19>\n+      config:\n+        checkpoints.topic.replication.factor: 1 <20>\n+    topicsPattern: \".*\" <21>\n+    groupsPattern: \"group1|group2|group3\" <22>\n+----\n+<1> The Kafka Connect version.\n+<2> The number of replica nodes.\n+<3> The cluster alias for Kafka Connect.\n+<4> Specification for the Kafka clusters being synchronized.\n+<5> The cluster alias for the source Kafka cluster.\n+<6> Bootstrap server for connection to the source Kafka cluster.\n+<7> The cluster alias for the target Kafka cluster.\n+<8> Bootstrap server for connection to the target Kafka cluster.\n+<9> xref:assembly-kafka-connect-configuration-deployment-configuration-kafka-connect[Kafka Connect configuration].\n+Standard Apache Kafka configuration may be provided, restricted to those properties not managed directly by {ProductName}.\n+<10> MirrorMaker 2.0 connectors.\n+<11> The alias of the source cluster used by the MirrorMaker 2.0 connectors.\n+<12> The alias of the target cluster used by the MirrorMaker 2.0 connectors.\n+<13> The configuration for the `sourceConnector` that creates remote topics.\n+<14> The replication factor for the `sourceConnector`.\n+<15> The replication factor for the `sourceConnector` `offset-syncs` internal topic that maps the offsets of the source and target clusters.\n+<16> When enabled, ACLs are applied to synchronized topics. The default is `false`.\n+<17> The configuration for the `heartbeatConnector` that performs connectivity checks.", "originalCommit": "c54eac539f57d07f7b9b6ee36e2788725674678e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzA0Mjg1Nw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2582#discussion_r383042857", "bodyText": "This option sets the replication factor for the heartbeat topic that is created by the MirrorHeartbeatConnector, something like:\n<14> The replication factor for the heartbeat topic created at the target cluster.", "author": "ajborley", "createdAt": "2020-02-23T22:06:15Z", "path": "documentation/modules/mirrormaker2/proc-mirrormaker-replication.adoc", "diffHunk": "@@ -0,0 +1,104 @@\n+// Module included in the following assemblies:\n+//\n+// assembly-mirrormaker.adoc\n+\n+[id='proc-mirrormaker-replication-{context}']\n+= Synchronizing data between Kafka clusters using MirrorMaker 2.0\n+\n+Use MirrorMaker 2.0 to synchronize data between Kafka clusters through configuration.\n+\n+The previous version of MirrorMaker 2.0 continues to be supported.\n+If you wish to use the resources configured for the previous version,\n+they must be updated to the format supported by MirrorMaker 2.0.\n+\n+The configuration must specify:\n+\n+* Each Kafka cluster\n+* Connection information for each cluster, including TLS authentication\n+* The replication flow and direction\n+** Cluster to cluster\n+** Topic to topic\n+* Replication rules\n+* Committed offset tracking intervals\n+\n+Use the properties of the `KafkaMirrorMaker2` resource to configure your Kafka MirrorMaker 2.0 deployment.\n+\n+You can configure access control for source and target clusters using TLS or SASL authentication.\n+This procedure shows a configuration that uses TLS encryption and authentication for the source and target cluster.\n+\n+.Prerequisites\n+\n+* xref:cluster-operator-str[{ProductName} and Kafka is deployed]\n+* Source and target Kafka clusters are available\n+\n+.Procedure\n+\n+. Edit the `spec` properties for the `KafkaMirrorMaker2` resource.\n++\n+The properties you can configure are shown in this example configuration:\n++\n+[source,yaml,subs=\"+quotes,attributes\"]\n+----\n+apiVersion: {KafkaApiVersion}\n+kind: KafkaMirrorMaker2\n+metadata:\n+  name: my-mirror-maker2\n+spec:\n+  version: {DefaultKafkaVersion} <1>\n+  replicas: 3 <2>\n+  connectCluster: \"my-cluster-target\" <3>\n+  clusters: <4>\n+  - alias: \"my-cluster-source\" <5>\n+    bootstrapServers: my-cluster-source-kafka-bootstrap:9092 <6>\n+  - alias: \"my-cluster-target\" <7>\n+    bootstrapServers: my-cluster-target-kafka-bootstrap:9092 <8>\n+    config: <9>\n+      config.storage.replication.factor: 1\n+      offset.storage.replication.factor: 1\n+      status.storage.replication.factor: 1\n+  mirrors: <10>\n+  - sourceCluster: \"my-cluster-source\" <11>\n+    targetCluster: \"my-cluster-target\" <12>\n+    sourceConnector: <13>\n+      config:\n+        replication.factor: 1 <14>\n+        offset-syncs.topic.replication.factor: 1 <15>\n+        sync.topic.acls.enabled: \"false\" <16>\n+    heartbeatConnector: <17>\n+      config:\n+        heartbeats.topic.replication.factor: 1 <18>\n+    checkpointConnector: <19>\n+      config:\n+        checkpoints.topic.replication.factor: 1 <20>\n+    topicsPattern: \".*\" <21>\n+    groupsPattern: \"group1|group2|group3\" <22>\n+----\n+<1> The Kafka Connect version.\n+<2> The number of replica nodes.\n+<3> The cluster alias for Kafka Connect.\n+<4> Specification for the Kafka clusters being synchronized.\n+<5> The cluster alias for the source Kafka cluster.\n+<6> Bootstrap server for connection to the source Kafka cluster.\n+<7> The cluster alias for the target Kafka cluster.\n+<8> Bootstrap server for connection to the target Kafka cluster.\n+<9> xref:assembly-kafka-connect-configuration-deployment-configuration-kafka-connect[Kafka Connect configuration].\n+Standard Apache Kafka configuration may be provided, restricted to those properties not managed directly by {ProductName}.\n+<10> MirrorMaker 2.0 connectors.\n+<11> The alias of the source cluster used by the MirrorMaker 2.0 connectors.\n+<12> The alias of the target cluster used by the MirrorMaker 2.0 connectors.\n+<13> The configuration for the `sourceConnector` that creates remote topics.\n+<14> The replication factor for the `sourceConnector`.\n+<15> The replication factor for the `sourceConnector` `offset-syncs` internal topic that maps the offsets of the source and target clusters.\n+<16> When enabled, ACLs are applied to synchronized topics. The default is `false`.\n+<17> The configuration for the `heartbeatConnector` that performs connectivity checks.\n+<18> The replication factor for the `heartbeatConnector`.", "originalCommit": "c54eac539f57d07f7b9b6ee36e2788725674678e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzA0Mjk1Nw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2582#discussion_r383042957", "bodyText": "Again (sorry), we should probably refer to this as the MirrorCheckpointConnector.", "author": "ajborley", "createdAt": "2020-02-23T22:07:18Z", "path": "documentation/modules/mirrormaker2/proc-mirrormaker-replication.adoc", "diffHunk": "@@ -0,0 +1,104 @@\n+// Module included in the following assemblies:\n+//\n+// assembly-mirrormaker.adoc\n+\n+[id='proc-mirrormaker-replication-{context}']\n+= Synchronizing data between Kafka clusters using MirrorMaker 2.0\n+\n+Use MirrorMaker 2.0 to synchronize data between Kafka clusters through configuration.\n+\n+The previous version of MirrorMaker 2.0 continues to be supported.\n+If you wish to use the resources configured for the previous version,\n+they must be updated to the format supported by MirrorMaker 2.0.\n+\n+The configuration must specify:\n+\n+* Each Kafka cluster\n+* Connection information for each cluster, including TLS authentication\n+* The replication flow and direction\n+** Cluster to cluster\n+** Topic to topic\n+* Replication rules\n+* Committed offset tracking intervals\n+\n+Use the properties of the `KafkaMirrorMaker2` resource to configure your Kafka MirrorMaker 2.0 deployment.\n+\n+You can configure access control for source and target clusters using TLS or SASL authentication.\n+This procedure shows a configuration that uses TLS encryption and authentication for the source and target cluster.\n+\n+.Prerequisites\n+\n+* xref:cluster-operator-str[{ProductName} and Kafka is deployed]\n+* Source and target Kafka clusters are available\n+\n+.Procedure\n+\n+. Edit the `spec` properties for the `KafkaMirrorMaker2` resource.\n++\n+The properties you can configure are shown in this example configuration:\n++\n+[source,yaml,subs=\"+quotes,attributes\"]\n+----\n+apiVersion: {KafkaApiVersion}\n+kind: KafkaMirrorMaker2\n+metadata:\n+  name: my-mirror-maker2\n+spec:\n+  version: {DefaultKafkaVersion} <1>\n+  replicas: 3 <2>\n+  connectCluster: \"my-cluster-target\" <3>\n+  clusters: <4>\n+  - alias: \"my-cluster-source\" <5>\n+    bootstrapServers: my-cluster-source-kafka-bootstrap:9092 <6>\n+  - alias: \"my-cluster-target\" <7>\n+    bootstrapServers: my-cluster-target-kafka-bootstrap:9092 <8>\n+    config: <9>\n+      config.storage.replication.factor: 1\n+      offset.storage.replication.factor: 1\n+      status.storage.replication.factor: 1\n+  mirrors: <10>\n+  - sourceCluster: \"my-cluster-source\" <11>\n+    targetCluster: \"my-cluster-target\" <12>\n+    sourceConnector: <13>\n+      config:\n+        replication.factor: 1 <14>\n+        offset-syncs.topic.replication.factor: 1 <15>\n+        sync.topic.acls.enabled: \"false\" <16>\n+    heartbeatConnector: <17>\n+      config:\n+        heartbeats.topic.replication.factor: 1 <18>\n+    checkpointConnector: <19>\n+      config:\n+        checkpoints.topic.replication.factor: 1 <20>\n+    topicsPattern: \".*\" <21>\n+    groupsPattern: \"group1|group2|group3\" <22>\n+----\n+<1> The Kafka Connect version.\n+<2> The number of replica nodes.\n+<3> The cluster alias for Kafka Connect.\n+<4> Specification for the Kafka clusters being synchronized.\n+<5> The cluster alias for the source Kafka cluster.\n+<6> Bootstrap server for connection to the source Kafka cluster.\n+<7> The cluster alias for the target Kafka cluster.\n+<8> Bootstrap server for connection to the target Kafka cluster.\n+<9> xref:assembly-kafka-connect-configuration-deployment-configuration-kafka-connect[Kafka Connect configuration].\n+Standard Apache Kafka configuration may be provided, restricted to those properties not managed directly by {ProductName}.\n+<10> MirrorMaker 2.0 connectors.\n+<11> The alias of the source cluster used by the MirrorMaker 2.0 connectors.\n+<12> The alias of the target cluster used by the MirrorMaker 2.0 connectors.\n+<13> The configuration for the `sourceConnector` that creates remote topics.\n+<14> The replication factor for the `sourceConnector`.\n+<15> The replication factor for the `sourceConnector` `offset-syncs` internal topic that maps the offsets of the source and target clusters.\n+<16> When enabled, ACLs are applied to synchronized topics. The default is `false`.\n+<17> The configuration for the `heartbeatConnector` that performs connectivity checks.\n+<18> The replication factor for the `heartbeatConnector`.\n+<19> The configuration for the `checkpointConnector` that tracks offsets.", "originalCommit": "c54eac539f57d07f7b9b6ee36e2788725674678e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzA0MzE1Ng==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2582#discussion_r383043156", "bodyText": "This option sets the replication factor for the checkpoint topic that is created by the MirrorCheckpointConnector, something like:\n<14> The replication factor for the checkpoints topic created at the target cluster.", "author": "ajborley", "createdAt": "2020-02-23T22:09:42Z", "path": "documentation/modules/mirrormaker2/proc-mirrormaker-replication.adoc", "diffHunk": "@@ -0,0 +1,104 @@\n+// Module included in the following assemblies:\n+//\n+// assembly-mirrormaker.adoc\n+\n+[id='proc-mirrormaker-replication-{context}']\n+= Synchronizing data between Kafka clusters using MirrorMaker 2.0\n+\n+Use MirrorMaker 2.0 to synchronize data between Kafka clusters through configuration.\n+\n+The previous version of MirrorMaker 2.0 continues to be supported.\n+If you wish to use the resources configured for the previous version,\n+they must be updated to the format supported by MirrorMaker 2.0.\n+\n+The configuration must specify:\n+\n+* Each Kafka cluster\n+* Connection information for each cluster, including TLS authentication\n+* The replication flow and direction\n+** Cluster to cluster\n+** Topic to topic\n+* Replication rules\n+* Committed offset tracking intervals\n+\n+Use the properties of the `KafkaMirrorMaker2` resource to configure your Kafka MirrorMaker 2.0 deployment.\n+\n+You can configure access control for source and target clusters using TLS or SASL authentication.\n+This procedure shows a configuration that uses TLS encryption and authentication for the source and target cluster.\n+\n+.Prerequisites\n+\n+* xref:cluster-operator-str[{ProductName} and Kafka is deployed]\n+* Source and target Kafka clusters are available\n+\n+.Procedure\n+\n+. Edit the `spec` properties for the `KafkaMirrorMaker2` resource.\n++\n+The properties you can configure are shown in this example configuration:\n++\n+[source,yaml,subs=\"+quotes,attributes\"]\n+----\n+apiVersion: {KafkaApiVersion}\n+kind: KafkaMirrorMaker2\n+metadata:\n+  name: my-mirror-maker2\n+spec:\n+  version: {DefaultKafkaVersion} <1>\n+  replicas: 3 <2>\n+  connectCluster: \"my-cluster-target\" <3>\n+  clusters: <4>\n+  - alias: \"my-cluster-source\" <5>\n+    bootstrapServers: my-cluster-source-kafka-bootstrap:9092 <6>\n+  - alias: \"my-cluster-target\" <7>\n+    bootstrapServers: my-cluster-target-kafka-bootstrap:9092 <8>\n+    config: <9>\n+      config.storage.replication.factor: 1\n+      offset.storage.replication.factor: 1\n+      status.storage.replication.factor: 1\n+  mirrors: <10>\n+  - sourceCluster: \"my-cluster-source\" <11>\n+    targetCluster: \"my-cluster-target\" <12>\n+    sourceConnector: <13>\n+      config:\n+        replication.factor: 1 <14>\n+        offset-syncs.topic.replication.factor: 1 <15>\n+        sync.topic.acls.enabled: \"false\" <16>\n+    heartbeatConnector: <17>\n+      config:\n+        heartbeats.topic.replication.factor: 1 <18>\n+    checkpointConnector: <19>\n+      config:\n+        checkpoints.topic.replication.factor: 1 <20>\n+    topicsPattern: \".*\" <21>\n+    groupsPattern: \"group1|group2|group3\" <22>\n+----\n+<1> The Kafka Connect version.\n+<2> The number of replica nodes.\n+<3> The cluster alias for Kafka Connect.\n+<4> Specification for the Kafka clusters being synchronized.\n+<5> The cluster alias for the source Kafka cluster.\n+<6> Bootstrap server for connection to the source Kafka cluster.\n+<7> The cluster alias for the target Kafka cluster.\n+<8> Bootstrap server for connection to the target Kafka cluster.\n+<9> xref:assembly-kafka-connect-configuration-deployment-configuration-kafka-connect[Kafka Connect configuration].\n+Standard Apache Kafka configuration may be provided, restricted to those properties not managed directly by {ProductName}.\n+<10> MirrorMaker 2.0 connectors.\n+<11> The alias of the source cluster used by the MirrorMaker 2.0 connectors.\n+<12> The alias of the target cluster used by the MirrorMaker 2.0 connectors.\n+<13> The configuration for the `sourceConnector` that creates remote topics.\n+<14> The replication factor for the `sourceConnector`.\n+<15> The replication factor for the `sourceConnector` `offset-syncs` internal topic that maps the offsets of the source and target clusters.\n+<16> When enabled, ACLs are applied to synchronized topics. The default is `false`.\n+<17> The configuration for the `heartbeatConnector` that performs connectivity checks.\n+<18> The replication factor for the `heartbeatConnector`.\n+<19> The configuration for the `checkpointConnector` that tracks offsets.\n+<20> The replication factor for the `checkpointConnector`.", "originalCommit": "c54eac539f57d07f7b9b6ee36e2788725674678e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "bdc43091d3b33c60cb32b465655c1e96e35919d5", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/bdc43091d3b33c60cb32b465655c1e96e35919d5", "message": "review edits JS\n\nSigned-off-by: prmellor <pmellor@redhat.com>", "committedDate": "2020-02-24T08:18:35Z", "type": "commit"}, {"oid": "4a3f0df288eff96d7fffc478c67f7abc45b7d9f0", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/4a3f0df288eff96d7fffc478c67f7abc45b7d9f0", "message": "review edits AB\n\nSigned-off-by: prmellor <pmellor@redhat.com>", "committedDate": "2020-02-24T09:28:26Z", "type": "commit"}, {"oid": "a7f246548aefee0940d89dd608589e926e697953", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/a7f246548aefee0940d89dd608589e926e697953", "message": "ref change\n\nSigned-off-by: prmellor <pmellor@redhat.com>", "committedDate": "2020-02-24T09:30:04Z", "type": "commit"}, {"oid": "dc7a9218d52eed73e3a4094ee1b367a2d701aab7", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/dc7a9218d52eed73e3a4094ee1b367a2d701aab7", "message": "Merge branch 'master' into mm2-for-strimzi-doc", "committedDate": "2020-02-24T09:33:19Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzE2MTczNg==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2582#discussion_r383161736", "bodyText": "@ajborley We haven't actually shown this (yet). Do we have an example we can insert into the task?", "author": "PaulRMellor", "createdAt": "2020-02-24T09:44:50Z", "path": "documentation/modules/mirrormaker2/proc-mirrormaker-replication.adoc", "diffHunk": "@@ -0,0 +1,125 @@\n+// Module included in the following assemblies:\n+//\n+// assembly-mirrormaker.adoc\n+\n+[id='proc-mirrormaker-replication-{context}']\n+= Synchronizing data between Kafka clusters using MirrorMaker 2.0\n+\n+Use MirrorMaker 2.0 to synchronize data between Kafka clusters through configuration.\n+\n+The previous version of MirrorMaker continues to be supported.\n+If you wish to use the resources configured for the previous version,\n+they must be updated to the format supported by MirrorMaker 2.0.\n+\n+The configuration must specify:\n+\n+* Each Kafka cluster\n+* Connection information for each cluster, including TLS authentication\n+* The replication flow and direction\n+** Cluster to cluster\n+** Topic to topic\n+\n+Use the properties of the `KafkaMirrorMaker2` resource to configure your Kafka MirrorMaker 2.0 deployment.\n+\n+MirrorMaker 2.0 provides default configuration values for properties such as replication factors.\n+A minimal configuration, with defaults left unchanged, would be something like this example:\n+\n+[source,yaml,subs=\"+quotes,attributes\"]\n+----\n+apiVersion: {KafkaApiVersion}\n+kind: KafkaMirrorMaker2\n+metadata:\n+  name: my-mirror-maker2\n+  spec:\n+    version: {DefaultKafkaVersion}\n+    connectCluster: \"my-cluster-target\"\n+    clusters:\n+    - alias: \"my-cluster-source\"\n+      bootstrapServers: my-cluster-source-kafka-bootstrap:9092\n+    - alias: \"my-cluster-target\"\n+      bootstrapServers: my-cluster-target-kafka-bootstrap:9092\n+    mirrors:\n+    - sourceCluster: \"my-cluster-source\"\n+      targetCluster: \"my-cluster-target\"\n+      sourceConnector: {}\n+----\n+\n+You can configure access control for source and target clusters using TLS or SASL authentication.\n+This procedure shows a configuration that uses TLS encryption and authentication for the source and target cluster.", "originalCommit": "dc7a9218d52eed73e3a4094ee1b367a2d701aab7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzI1Njg4MA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2582#discussion_r383256880", "bodyText": "There's nothing in examples/kafka-mirror-maker-2/ but here's an example from the system tests with TLS and TLS client authentication:\napiVersion: kafka.strimzi.io/v1alpha1\nkind: KafkaMirrorMaker2\nmetadata:\n  name: \"my-mirror-maker2\"\nspec:\n  replicas: 1\n  version: 2.4.0\n  connectCluster: \"my-cluster-target\"\n  clusters:\n  - alias: \"my-cluster-source\"\n    authentication:\n      certificateAndKey:\n        certificate: source.crt\n        key: source.key\n        secretName: my-user-source\n      type: tls\n    bootstrapServers: my-cluster-source-kafka-bootstrap:9093\n    tls:\n      trustedCertificates:\n      - certificate: ca.crt\n        secretName: my-cluster-source-cluster-ca-cert\n  - alias: \"my-cluster-target\"\n    authentication:\n      certificateAndKey:\n        certificate: target.crt\n        key: target.key\n        secretName: my-user-target\n      type: tls\n    bootstrapServers: my-cluster-target-kafka-bootstrap:9093\n    config:\n      config.storage.replication.factor: 1\n      offset.storage.replication.factor: 1\n      status.storage.replication.factor: 1\n    tls:\n      trustedCertificates:\n      - certificate: ca.crt\n        secretName: my-cluster-target-cluster-ca-cert\n  mirrors:\n  - sourceCluster: my-cluster-source\n    targetCluster: my-cluster-target\n    sourceConnector:\n      config:\n        offset-syncs.topic.replication.factor: 1\n        replication.factor: 1\n        sync.topic.acls.enabled: \"false\"\n    topicsPattern: .*\n\nThe creation of secrets for the TLS and TLS client auth follows a similar procedure as used for Kafka Connect (https://strimzi.io/docs/latest/#ref-kafka-connect-tls-deployment-configuration-kafka-connect and https://strimzi.io/docs/latest/#proc-configuring-kafka-connect-authentication-tls-deployment-configuration-kafka-connect)", "author": "ajborley", "createdAt": "2020-02-24T13:13:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzE2MTczNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDY1OTMwOA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2582#discussion_r384659308", "bodyText": "@ajborley Thanks Andrew. I've added callouts similar to how we have them for the previous version of MirrorMaker, referring to the schema ref for more details.", "author": "PaulRMellor", "createdAt": "2020-02-26T17:48:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzE2MTczNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzI1NDkwOQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2582#discussion_r383254909", "bodyText": "What does {KafkaApiVersion} resolve to? At the moment, the MM2 CR is only in the alpha API version (kafka.strimzi.io/v1alpha1).", "author": "ajborley", "createdAt": "2020-02-24T13:10:19Z", "path": "documentation/modules/mirrormaker2/proc-mirrormaker-replication.adoc", "diffHunk": "@@ -0,0 +1,125 @@\n+// Module included in the following assemblies:\n+//\n+// assembly-mirrormaker.adoc\n+\n+[id='proc-mirrormaker-replication-{context}']\n+= Synchronizing data between Kafka clusters using MirrorMaker 2.0\n+\n+Use MirrorMaker 2.0 to synchronize data between Kafka clusters through configuration.\n+\n+The previous version of MirrorMaker continues to be supported.\n+If you wish to use the resources configured for the previous version,\n+they must be updated to the format supported by MirrorMaker 2.0.\n+\n+The configuration must specify:\n+\n+* Each Kafka cluster\n+* Connection information for each cluster, including TLS authentication\n+* The replication flow and direction\n+** Cluster to cluster\n+** Topic to topic\n+\n+Use the properties of the `KafkaMirrorMaker2` resource to configure your Kafka MirrorMaker 2.0 deployment.\n+\n+MirrorMaker 2.0 provides default configuration values for properties such as replication factors.\n+A minimal configuration, with defaults left unchanged, would be something like this example:\n+\n+[source,yaml,subs=\"+quotes,attributes\"]\n+----\n+apiVersion: {KafkaApiVersion}", "originalCommit": "dc7a9218d52eed73e3a4094ee1b367a2d701aab7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDY2NDk1MQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2582#discussion_r384664951", "bodyText": "That's beta1, so I've replaced it with {KafkaApiVersionPrev}", "author": "PaulRMellor", "createdAt": "2020-02-26T17:59:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzI1NDkwOQ=="}], "type": "inlineReview"}, {"oid": "a68a9233b25f4760e99870f4fc4cf7dca8742bda", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/a68a9233b25f4760e99870f4fc4cf7dca8742bda", "message": "review edits AB\n\nSigned-off-by: prmellor <pmellor@redhat.com>", "committedDate": "2020-02-26T18:03:38Z", "type": "commit"}, {"oid": "ef55f1e8415aec547459a736dc12455197c822cf", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/ef55f1e8415aec547459a736dc12455197c822cf", "message": "merge conflict fix\n\nSigned-off-by: prmellor <pmellor@redhat.com>", "committedDate": "2020-02-28T08:16:08Z", "type": "commit"}]}