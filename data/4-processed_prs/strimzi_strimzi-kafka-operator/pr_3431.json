{"pr_number": 3431, "pr_title": "Make sure KafkaMirrorMaker2 can be scaled to zero", "pr_createdAt": "2020-08-01T20:14:49Z", "pr_url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3431", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDA1NjAyOQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3431#discussion_r464056029", "bodyText": "I think this might cause issues if in the future someone adds something to the spec in the initial block and doesn't notice this overrides the whole spec. Maybe you could use here editOrNewSpec instead of withNewSpec", "author": "scholzj", "createdAt": "2020-08-02T09:39:34Z", "path": "cluster-operator/src/test/java/io/strimzi/operator/cluster/ResourceUtils.java", "diffHunk": "@@ -545,16 +545,27 @@ public static KafkaBridge createKafkaBridgeCluster(String clusterCmNamespace, St\n     /**\n      * Generate empty Kafka MirrorMaker 2.0 ConfigMap\n      */\n-    public static KafkaMirrorMaker2 createEmptyKafkaMirrorMaker2Cluster(String clusterCmNamespace, String clusterCmName) {\n-        return new KafkaMirrorMaker2Builder()\n+    public static KafkaMirrorMaker2 createEmptyKafkaMirrorMaker2Cluster(String clusterCmNamespace, String clusterCmName, Integer replicas) {\n+        KafkaMirrorMaker2Builder kafkaMirrorMaker2Builder = new KafkaMirrorMaker2Builder()\n                 .withMetadata(new ObjectMetaBuilder()\n                         .withName(clusterCmName)\n                         .withNamespace(clusterCmNamespace)\n                         .withLabels(TestUtils.map(Labels.KUBERNETES_DOMAIN + \"part-of\", \"tests\",\n                                 \"my-user-label\", \"cromulent\"))\n-                        .build())\n-                .withNewSpec().endSpec()\n-                .build();\n+                        .build());\n+\n+        if (replicas != null) {\n+            kafkaMirrorMaker2Builder\n+                    .withNewSpec()", "originalCommit": "de1cea8f8c745c6590deff71edfc9a0ffbbc6ceb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDA1ODQ4Mw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3431#discussion_r464058483", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                .withNewSpec()\n          \n          \n            \n                                    .withReplicas(replicas)\n          \n          \n            \n                                .endSpec();\n          \n          \n            \n                                .editOrNewSpec()\n          \n          \n            \n                                    .withReplicas(replicas)\n          \n          \n            \n                                .endSpec();\n          \n      \n    \n    \n  \n\nAs Jakub suggests", "author": "samuel-hawker", "createdAt": "2020-08-02T10:06:14Z", "path": "cluster-operator/src/test/java/io/strimzi/operator/cluster/ResourceUtils.java", "diffHunk": "@@ -545,16 +545,27 @@ public static KafkaBridge createKafkaBridgeCluster(String clusterCmNamespace, St\n     /**\n      * Generate empty Kafka MirrorMaker 2.0 ConfigMap\n      */\n-    public static KafkaMirrorMaker2 createEmptyKafkaMirrorMaker2Cluster(String clusterCmNamespace, String clusterCmName) {\n-        return new KafkaMirrorMaker2Builder()\n+    public static KafkaMirrorMaker2 createEmptyKafkaMirrorMaker2Cluster(String clusterCmNamespace, String clusterCmName, Integer replicas) {\n+        KafkaMirrorMaker2Builder kafkaMirrorMaker2Builder = new KafkaMirrorMaker2Builder()\n                 .withMetadata(new ObjectMetaBuilder()\n                         .withName(clusterCmName)\n                         .withNamespace(clusterCmNamespace)\n                         .withLabels(TestUtils.map(Labels.KUBERNETES_DOMAIN + \"part-of\", \"tests\",\n                                 \"my-user-label\", \"cromulent\"))\n-                        .build())\n-                .withNewSpec().endSpec()\n-                .build();\n+                        .build());\n+\n+        if (replicas != null) {\n+            kafkaMirrorMaker2Builder\n+                    .withNewSpec()\n+                        .withReplicas(replicas)\n+                    .endSpec();", "originalCommit": "de1cea8f8c745c6590deff71edfc9a0ffbbc6ceb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDA1ODU0NQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3431#discussion_r464058545", "bodyText": "The difference being that withNewSpec overrides, whereas edit or new, edits a pre-existing spec if it exists, or creates a new one if it doesn't.", "author": "samuel-hawker", "createdAt": "2020-08-02T10:07:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDA1ODQ4Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDA1ODc4MA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3431#discussion_r464058780", "bodyText": "clusterCm is a relic of the past, from when the custom resource was actually a configmap, I planned to remove all references of this at some point, but there are stilla few left over.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    String clusterCmName = \"foo\";\n          \n          \n            \n                    String kmm2Name = \"foo\";", "author": "samuel-hawker", "createdAt": "2020-08-02T10:09:58Z", "path": "cluster-operator/src/test/java/io/strimzi/operator/cluster/operator/assembly/KafkaMirrorMaker2AssemblyOperatorTest.java", "diffHunk": "@@ -644,4 +644,86 @@ public void testCreateClusterStatusNotReady(VertxTestContext context) {\n             })));\n     }\n \n+\n+    @Test\n+    public void testCreateClusterWithZeroReplicas(VertxTestContext context) {\n+        ResourceOperatorSupplier supplier = ResourceUtils.supplierWithMocks(true);\n+        CrdOperator mockMirrorMaker2Ops = supplier.mirrorMaker2Operator;\n+        DeploymentOperator mockDcOps = supplier.deploymentOperations;\n+        PodDisruptionBudgetOperator mockPdbOps = supplier.podDisruptionBudgetOperator;\n+        ConfigMapOperator mockCmOps = supplier.configMapOperations;\n+        ServiceOperator mockServiceOps = supplier.serviceOperations;\n+        NetworkPolicyOperator mockNetPolOps = supplier.networkPolicyOperator;\n+\n+        String clusterCmName = \"foo\";", "originalCommit": "de1cea8f8c745c6590deff71edfc9a0ffbbc6ceb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDA1ODgwNw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3431#discussion_r464058807", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    String clusterCmNamespace = \"test\";\n          \n          \n            \n                    String kmm2Namespace = \"test\";", "author": "samuel-hawker", "createdAt": "2020-08-02T10:10:21Z", "path": "cluster-operator/src/test/java/io/strimzi/operator/cluster/operator/assembly/KafkaMirrorMaker2AssemblyOperatorTest.java", "diffHunk": "@@ -644,4 +644,86 @@ public void testCreateClusterStatusNotReady(VertxTestContext context) {\n             })));\n     }\n \n+\n+    @Test\n+    public void testCreateClusterWithZeroReplicas(VertxTestContext context) {\n+        ResourceOperatorSupplier supplier = ResourceUtils.supplierWithMocks(true);\n+        CrdOperator mockMirrorMaker2Ops = supplier.mirrorMaker2Operator;\n+        DeploymentOperator mockDcOps = supplier.deploymentOperations;\n+        PodDisruptionBudgetOperator mockPdbOps = supplier.podDisruptionBudgetOperator;\n+        ConfigMapOperator mockCmOps = supplier.configMapOperations;\n+        ServiceOperator mockServiceOps = supplier.serviceOperations;\n+        NetworkPolicyOperator mockNetPolOps = supplier.networkPolicyOperator;\n+\n+        String clusterCmName = \"foo\";\n+        String clusterCmNamespace = \"test\";", "originalCommit": "de1cea8f8c745c6590deff71edfc9a0ffbbc6ceb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDA1ODkyOA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3431#discussion_r464058928", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    KafkaMirrorMaker2 clusterCm = ResourceUtils.createEmptyKafkaMirrorMaker2Cluster(clusterCmNamespace, clusterCmName, 0);\n          \n          \n            \n                    KafkaMirrorMaker2 kmm2 = ResourceUtils.createEmptyKafkaMirrorMaker2Cluster(clusterCmNamespace, clusterCmName, 0);", "author": "samuel-hawker", "createdAt": "2020-08-02T10:11:44Z", "path": "cluster-operator/src/test/java/io/strimzi/operator/cluster/operator/assembly/KafkaMirrorMaker2AssemblyOperatorTest.java", "diffHunk": "@@ -644,4 +644,86 @@ public void testCreateClusterStatusNotReady(VertxTestContext context) {\n             })));\n     }\n \n+\n+    @Test\n+    public void testCreateClusterWithZeroReplicas(VertxTestContext context) {\n+        ResourceOperatorSupplier supplier = ResourceUtils.supplierWithMocks(true);\n+        CrdOperator mockMirrorMaker2Ops = supplier.mirrorMaker2Operator;\n+        DeploymentOperator mockDcOps = supplier.deploymentOperations;\n+        PodDisruptionBudgetOperator mockPdbOps = supplier.podDisruptionBudgetOperator;\n+        ConfigMapOperator mockCmOps = supplier.configMapOperations;\n+        ServiceOperator mockServiceOps = supplier.serviceOperations;\n+        NetworkPolicyOperator mockNetPolOps = supplier.networkPolicyOperator;\n+\n+        String clusterCmName = \"foo\";\n+        String clusterCmNamespace = \"test\";\n+        KafkaMirrorMaker2 clusterCm = ResourceUtils.createEmptyKafkaMirrorMaker2Cluster(clusterCmNamespace, clusterCmName, 0);", "originalCommit": "de1cea8f8c745c6590deff71edfc9a0ffbbc6ceb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDI2MjgzNA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3431#discussion_r464262834", "bodyText": "As with most of the other resources - can we make sure that the URL is listed only when it can be used? (i.e. when replicas > 0)?", "author": "scholzj", "createdAt": "2020-08-03T08:19:58Z", "path": "cluster-operator/src/test/java/io/strimzi/operator/cluster/operator/assembly/KafkaMirrorMaker2AssemblyOperatorTest.java", "diffHunk": "@@ -644,4 +644,86 @@ public void testCreateClusterStatusNotReady(VertxTestContext context) {\n             })));\n     }\n \n+\n+    @Test\n+    public void testCreateClusterWithZeroReplicas(VertxTestContext context) {\n+        ResourceOperatorSupplier supplier = ResourceUtils.supplierWithMocks(true);\n+        CrdOperator mockMirrorMaker2Ops = supplier.mirrorMaker2Operator;\n+        DeploymentOperator mockDcOps = supplier.deploymentOperations;\n+        PodDisruptionBudgetOperator mockPdbOps = supplier.podDisruptionBudgetOperator;\n+        ConfigMapOperator mockCmOps = supplier.configMapOperations;\n+        ServiceOperator mockServiceOps = supplier.serviceOperations;\n+        NetworkPolicyOperator mockNetPolOps = supplier.networkPolicyOperator;\n+\n+        String kmm2Name = \"foo\";\n+        String kmm2Namespace = \"test\";\n+        KafkaMirrorMaker2 kmm2 = ResourceUtils.createEmptyKafkaMirrorMaker2Cluster(kmm2Namespace, kmm2Name, 0);\n+\n+        when(mockMirrorMaker2Ops.get(kmm2Namespace, kmm2Name)).thenReturn(kmm2);\n+        when(mockMirrorMaker2Ops.getAsync(anyString(), anyString())).thenReturn(Future.succeededFuture(kmm2));\n+\n+        ArgumentCaptor<Service> serviceCaptor = ArgumentCaptor.forClass(Service.class);\n+        when(mockServiceOps.reconcile(anyString(), anyString(), serviceCaptor.capture())).thenReturn(Future.succeededFuture());\n+\n+        ArgumentCaptor<Deployment> dcCaptor = ArgumentCaptor.forClass(Deployment.class);\n+        when(mockDcOps.reconcile(anyString(), anyString(), dcCaptor.capture())).thenReturn(Future.succeededFuture());\n+        when(mockDcOps.scaleUp(anyString(), anyString(), anyInt())).thenReturn(Future.succeededFuture(42));\n+        when(mockDcOps.scaleDown(anyString(), anyString(), anyInt())).thenReturn(Future.succeededFuture(42));\n+        when(mockDcOps.readiness(anyString(), anyString(), anyLong(), anyLong())).thenReturn(Future.succeededFuture());\n+        when(mockDcOps.waitForObserved(anyString(), anyString(), anyLong(), anyLong())).thenReturn(Future.succeededFuture());\n+        when(mockCmOps.reconcile(anyString(), any(), any())).thenReturn(Future.succeededFuture(ReconcileResult.created(new ConfigMap())));\n+        when(mockNetPolOps.reconcile(eq(kmm2.getMetadata().getNamespace()), eq(KafkaMirrorMaker2Resources.deploymentName(kmm2.getMetadata().getName())), any())).thenReturn(Future.succeededFuture(ReconcileResult.created(new NetworkPolicy())));\n+\n+        ArgumentCaptor<PodDisruptionBudget> pdbCaptor = ArgumentCaptor.forClass(PodDisruptionBudget.class);\n+        when(mockPdbOps.reconcile(anyString(), any(), pdbCaptor.capture())).thenReturn(Future.succeededFuture());\n+\n+        ArgumentCaptor<KafkaMirrorMaker2> mirrorMaker2Captor = ArgumentCaptor.forClass(KafkaMirrorMaker2.class);\n+        when(mockMirrorMaker2Ops.updateStatusAsync(mirrorMaker2Captor.capture())).thenReturn(Future.succeededFuture());\n+\n+        KafkaConnectApi mockConnectClient = mock(KafkaConnectApi.class);\n+        when(mockConnectClient.list(anyString(), anyInt())).thenReturn(Future.succeededFuture(emptyList()));\n+\n+        KafkaMirrorMaker2AssemblyOperator ops = new KafkaMirrorMaker2AssemblyOperator(vertx, new PlatformFeaturesAvailability(true, kubernetesVersion),\n+                supplier, ResourceUtils.dummyClusterOperatorConfig(VERSIONS), x -> mockConnectClient);\n+\n+        KafkaMirrorMaker2Cluster mirrorMaker2 = KafkaMirrorMaker2Cluster.fromCrd(kmm2, VERSIONS);\n+\n+        Checkpoint async = context.checkpoint();\n+        ops.createOrUpdate(new Reconciliation(\"test-trigger\", KafkaMirrorMaker2.RESOURCE_KIND, kmm2Namespace, kmm2Name), kmm2)\n+                .onComplete(context.succeeding(v -> context.verify(() -> {\n+\n+                    // Verify service\n+                    List<Service> capturedServices = serviceCaptor.getAllValues();\n+                    assertThat(capturedServices, hasSize(1));\n+                    Service service = capturedServices.get(0);\n+                    assertThat(service.getMetadata().getName(), is(mirrorMaker2.getServiceName()));\n+                    assertThat(service, is(mirrorMaker2.generateService()));\n+\n+                    // Verify Deployment\n+                    List<Deployment> capturedDc = dcCaptor.getAllValues();\n+                    assertThat(capturedDc, hasSize(1));\n+                    Deployment dc = capturedDc.get(0);\n+                    assertThat(dc.getMetadata().getName(), is(mirrorMaker2.getName()));\n+                    Map<String, String> annotations = new HashMap<>();\n+                    annotations.put(Annotations.STRIMZI_LOGGING_ANNOTATION, LOGGING_CONFIG);\n+                    assertThat(dc, is(mirrorMaker2.generateDeployment(annotations, true, null, null)));\n+\n+                    // Verify PodDisruptionBudget\n+                    List<PodDisruptionBudget> capturedPdb = pdbCaptor.getAllValues();\n+                    assertThat(capturedPdb, hasSize(1));\n+                    PodDisruptionBudget pdb = capturedPdb.get(0);\n+                    assertThat(pdb.getMetadata().getName(), is(mirrorMaker2.getName()));\n+                    assertThat(pdb, is(mirrorMaker2.generatePodDisruptionBudget()));\n+\n+                    // Verify status\n+                    List<KafkaMirrorMaker2> capturedMirrorMaker2s = mirrorMaker2Captor.getAllValues();\n+                    assertThat(capturedMirrorMaker2s.get(0).getStatus().getUrl(), is(\"http://foo-mirrormaker2-api.test.svc:8083\"));", "originalCommit": "818c86ecc87c69fc2ca0b1638ba37faa0659ce5d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDI2MzgwMg==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3431#discussion_r464263802", "bodyText": "I think this will make sure that the readiness always returns true. This is why this test is passing even without any code changes. I think we need to remove this and fix the code.", "author": "scholzj", "createdAt": "2020-08-03T08:21:45Z", "path": "cluster-operator/src/test/java/io/strimzi/operator/cluster/operator/assembly/KafkaMirrorMaker2AssemblyOperatorTest.java", "diffHunk": "@@ -644,4 +644,86 @@ public void testCreateClusterStatusNotReady(VertxTestContext context) {\n             })));\n     }\n \n+\n+    @Test\n+    public void testCreateClusterWithZeroReplicas(VertxTestContext context) {\n+        ResourceOperatorSupplier supplier = ResourceUtils.supplierWithMocks(true);\n+        CrdOperator mockMirrorMaker2Ops = supplier.mirrorMaker2Operator;\n+        DeploymentOperator mockDcOps = supplier.deploymentOperations;\n+        PodDisruptionBudgetOperator mockPdbOps = supplier.podDisruptionBudgetOperator;\n+        ConfigMapOperator mockCmOps = supplier.configMapOperations;\n+        ServiceOperator mockServiceOps = supplier.serviceOperations;\n+        NetworkPolicyOperator mockNetPolOps = supplier.networkPolicyOperator;\n+\n+        String kmm2Name = \"foo\";\n+        String kmm2Namespace = \"test\";\n+        KafkaMirrorMaker2 kmm2 = ResourceUtils.createEmptyKafkaMirrorMaker2Cluster(kmm2Namespace, kmm2Name, 0);\n+\n+        when(mockMirrorMaker2Ops.get(kmm2Namespace, kmm2Name)).thenReturn(kmm2);\n+        when(mockMirrorMaker2Ops.getAsync(anyString(), anyString())).thenReturn(Future.succeededFuture(kmm2));\n+\n+        ArgumentCaptor<Service> serviceCaptor = ArgumentCaptor.forClass(Service.class);\n+        when(mockServiceOps.reconcile(anyString(), anyString(), serviceCaptor.capture())).thenReturn(Future.succeededFuture());\n+\n+        ArgumentCaptor<Deployment> dcCaptor = ArgumentCaptor.forClass(Deployment.class);\n+        when(mockDcOps.reconcile(anyString(), anyString(), dcCaptor.capture())).thenReturn(Future.succeededFuture());\n+        when(mockDcOps.scaleUp(anyString(), anyString(), anyInt())).thenReturn(Future.succeededFuture(42));\n+        when(mockDcOps.scaleDown(anyString(), anyString(), anyInt())).thenReturn(Future.succeededFuture(42));\n+        when(mockDcOps.readiness(anyString(), anyString(), anyLong(), anyLong())).thenReturn(Future.succeededFuture());", "originalCommit": "818c86ecc87c69fc2ca0b1638ba37faa0659ce5d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "363628c1976ef10c2cd5ca841f136a09503caccb", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/363628c1976ef10c2cd5ca841f136a09503caccb", "message": "Make sure KafkaMirrorMaker2 can be scaled to zero\n\nSigned-off-by: klalafaryan <lalafaryan@gmail.com>", "committedDate": "2020-08-04T09:26:15Z", "type": "commit"}, {"oid": "ad719cd43e8a8e1deb30f71280d02dfffcd5a8d6", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/ad719cd43e8a8e1deb30f71280d02dfffcd5a8d6", "message": "Fix code review comments and unit tests\n\nSigned-off-by: klalafaryan <lalafaryan@gmail.com>", "committedDate": "2020-08-04T09:26:15Z", "type": "commit"}, {"oid": "51a5116d7d227448dd02c1f3b73226752bb02616", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/51a5116d7d227448dd02c1f3b73226752bb02616", "message": "Make sure readiness check is passing\n\nSigned-off-by: klalafaryan <lalafaryan@gmail.com>", "committedDate": "2020-08-04T09:26:15Z", "type": "commit"}, {"oid": "ef7539419f97fa92138d47aa1d5e722949dca725", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/ef7539419f97fa92138d47aa1d5e722949dca725", "message": "Merge master into current\n\nSigned-off-by: klalafaryan <lalafaryan@gmail.com>", "committedDate": "2020-08-04T09:29:31Z", "type": "commit"}, {"oid": "e9f642e2bcf5bcc3ad8f251a04f5f4322eb5b47f", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/e9f642e2bcf5bcc3ad8f251a04f5f4322eb5b47f", "message": "Fix the scale subresource label selector merged to master in the meantime\n\nSigned-off-by: Jakub Scholz <www@scholzj.com>", "committedDate": "2020-08-04T09:32:12Z", "type": "commit"}, {"oid": "e9f642e2bcf5bcc3ad8f251a04f5f4322eb5b47f", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/e9f642e2bcf5bcc3ad8f251a04f5f4322eb5b47f", "message": "Fix the scale subresource label selector merged to master in the meantime\n\nSigned-off-by: Jakub Scholz <www@scholzj.com>", "committedDate": "2020-08-04T09:32:12Z", "type": "forcePushed"}]}