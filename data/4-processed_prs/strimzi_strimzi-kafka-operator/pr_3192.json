{"pr_number": 3192, "pr_title": "Add support for Open Policy Agent authorization", "pr_createdAt": "2020-06-12T20:28:18Z", "pr_url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3192", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc1MTEwNg==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3192#discussion_r439751106", "bodyText": "Maybe change this comment to mention OPA, what it is and a link to the docs?", "author": "samuel-hawker", "createdAt": "2020-06-13T16:27:53Z", "path": "api/src/main/java/io/strimzi/api/kafka/model/KafkaAuthorizationOpa.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Copyright Strimzi authors.\n+ * License: Apache License 2.0 (see the file LICENSE or http://apache.org/licenses/LICENSE-2.0.html).\n+ */\n+package io.strimzi.api.kafka.model;\n+\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonPropertyOrder;\n+import io.strimzi.crdgenerator.annotations.Description;\n+import io.strimzi.crdgenerator.annotations.DescriptionFile;\n+import io.strimzi.crdgenerator.annotations.Example;\n+import io.sundr.builder.annotations.Buildable;\n+import lombok.EqualsAndHashCode;\n+\n+import java.util.List;\n+\n+/**", "originalCommit": "9295c17e2ab248239ba3a9f8d038a0f4c00721a7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc1OTEyMg==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3192#discussion_r439759122", "bodyText": "I improved the comment. TBH I'm not sure about the doc link - we do not have them anywhere else and it sounds like something what will stop working after some time without being noticed.", "author": "scholzj", "createdAt": "2020-06-13T18:30:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc1MTEwNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc1MTE5Ng==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3192#discussion_r439751196", "bodyText": "Did you mean to check in docker-images/kafka/opa-authorizer-0.3.0-all.jar", "author": "samuel-hawker", "createdAt": "2020-06-13T16:29:43Z", "path": "docker-images/kafka/kafka-thirdparty-libs/2.5.x/pom.xml", "diffHunk": "@@ -181,5 +182,25 @@\n                 </exclusion>\n             </exclusions>\n         </dependency>\n+        <!-- Open Policy Authorization plugin -->\n+        <dependency>\n+            <groupId>com.bisnode.kafka.authorization</groupId>\n+            <artifactId>opa-authorizer</artifactId>\n+            <version>${opa-authorizer.version}</version>\n+            <exclusions>\n+                <exclusion>\n+                    <groupId>com.fasterxml.jackson.module</groupId>\n+                    <artifactId>jackson-module-scala_2.12</artifactId>\n+                </exclusion>\n+                <exclusion>\n+                    <groupId>org.apache.kafka</groupId>\n+                    <artifactId>kafka_2.12</artifactId>\n+                </exclusion>\n+                <exclusion>\n+                    <groupId>com.google.code.findbugs</groupId>\n+                    <artifactId>jsr305</artifactId>\n+                </exclusion>\n+            </exclusions>\n+        </dependency>\n     </dependencies>\n </project>", "originalCommit": "9295c17e2ab248239ba3a9f8d038a0f4c00721a7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc1OTAzNg==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3192#discussion_r439759036", "bodyText": "Thanks for noticing. That was for sure not intentional - left over from the original PoC when the library was not in Maven.", "author": "scholzj", "createdAt": "2020-06-13T18:29:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc1MTE5Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTgwNTE1Mw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3192#discussion_r439805153", "bodyText": "is \"token\" a leftover, OPA doesn't work with tokens, right?", "author": "ppatierno", "createdAt": "2020-06-14T08:30:03Z", "path": "api/src/main/java/io/strimzi/api/kafka/model/KafkaAuthorizationOpa.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Copyright Strimzi authors.\n+ * License: Apache License 2.0 (see the file LICENSE or http://apache.org/licenses/LICENSE-2.0.html).\n+ */\n+package io.strimzi.api.kafka.model;\n+\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonPropertyOrder;\n+import io.strimzi.crdgenerator.annotations.Description;\n+import io.strimzi.crdgenerator.annotations.DescriptionFile;\n+import io.strimzi.crdgenerator.annotations.Example;\n+import io.sundr.builder.annotations.Buildable;\n+import lombok.EqualsAndHashCode;\n+\n+import java.util.List;\n+\n+/**\n+ * Configures the broker authorization to use Open Policy Agent as an authorization and policy server.\n+ */\n+@DescriptionFile\n+@Buildable(\n+        editableEnabled = false,\n+        builderPackage = Constants.FABRIC8_KUBERNETES_API\n+)\n+@JsonInclude(JsonInclude.Include.NON_NULL)\n+@JsonPropertyOrder({\"type\", \"url\", \"allowOnError\", \"initialCacheCapacity\", \"maximumCacheSize\", \"expireAfterMs\", \"token\", \"superUsers\"})", "originalCommit": "0ca0207ccb454d65387499878370c1504820a512", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTgzMTQ1Mg==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3192#discussion_r439831452", "bodyText": "The other authorizer class which was considered supported token based authentication when connecting to OPA. The one this PR uses does not support it - so I removed it but apparently forgot to remove it here. I will fix it.", "author": "scholzj", "createdAt": "2020-06-14T13:44:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTgwNTE1Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTgwNTMwNA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3192#discussion_r439805304", "bodyText": "maybe adding more explicitly something like \"allowing access even on failure\"", "author": "ppatierno", "createdAt": "2020-06-14T08:31:41Z", "path": "api/src/main/java/io/strimzi/api/kafka/model/KafkaAuthorizationOpa.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Copyright Strimzi authors.\n+ * License: Apache License 2.0 (see the file LICENSE or http://apache.org/licenses/LICENSE-2.0.html).\n+ */\n+package io.strimzi.api.kafka.model;\n+\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonPropertyOrder;\n+import io.strimzi.crdgenerator.annotations.Description;\n+import io.strimzi.crdgenerator.annotations.DescriptionFile;\n+import io.strimzi.crdgenerator.annotations.Example;\n+import io.sundr.builder.annotations.Buildable;\n+import lombok.EqualsAndHashCode;\n+\n+import java.util.List;\n+\n+/**\n+ * Configures the broker authorization to use Open Policy Agent as an authorization and policy server.\n+ */\n+@DescriptionFile\n+@Buildable(\n+        editableEnabled = false,\n+        builderPackage = Constants.FABRIC8_KUBERNETES_API\n+)\n+@JsonInclude(JsonInclude.Include.NON_NULL)\n+@JsonPropertyOrder({\"type\", \"url\", \"allowOnError\", \"initialCacheCapacity\", \"maximumCacheSize\", \"expireAfterMs\", \"token\", \"superUsers\"})\n+@EqualsAndHashCode\n+public class KafkaAuthorizationOpa extends KafkaAuthorization {\n+    private static final long serialVersionUID = 1L;\n+\n+    public static final String TYPE_OPA = \"opa\";\n+\n+    public static final String AUTHORIZER_CLASS_NAME = \"com.bisnode.kafka.authorization.OpaAuthorizer\";\n+\n+    private List<String> superUsers;\n+    private String url;\n+    private boolean allowOnError = false;\n+    private int initialCacheCapacity = 5000;\n+    private int maximumCacheSize = 50000;\n+    private long expireAfterMs = 3600000;\n+\n+    @Description(\"Must be `\" + TYPE_OPA + \"`\")\n+    @Override\n+    public String getType() {\n+        return TYPE_OPA;\n+    }\n+\n+    @Description(\"List of super users. Should contain list of user principals which should get unlimited access rights.\")\n+    @Example(\"- CN=my-user\\n\" +\n+             \"- CN=my-other-user\")\n+    @JsonInclude(JsonInclude.Include.NON_NULL)\n+    public List<String> getSuperUsers() {\n+        return superUsers;\n+    }\n+\n+    public void setSuperUsers(List<String> superUsers) {\n+        this.superUsers = superUsers;\n+    }\n+\n+    @Description(\"URL of the OPA server with the policy name which should be queried. \" +\n+            \"This option is required.\")\n+    @Example(\"http://opa:8181/v1/data/kafka/authz/allow\")\n+    @JsonInclude(JsonInclude.Include.NON_NULL)\n+    public String getUrl() {\n+        return url;\n+    }\n+\n+    public void setUrl(String url) {\n+        this.url = url;\n+    }\n+\n+    @Description(\"Defines the authorizer behaviour when the OPA calls fail. \" +", "originalCommit": "0ca0207ccb454d65387499878370c1504820a512", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTgwNTQxMw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3192#discussion_r439805413", "bodyText": "out of curiosity ... so the address is not just the OPA server address but a specific endpoint where the Kafka related authz policy is \"exposed\"?", "author": "ppatierno", "createdAt": "2020-06-14T08:33:01Z", "path": "api/src/main/java/io/strimzi/api/kafka/model/KafkaAuthorizationOpa.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Copyright Strimzi authors.\n+ * License: Apache License 2.0 (see the file LICENSE or http://apache.org/licenses/LICENSE-2.0.html).\n+ */\n+package io.strimzi.api.kafka.model;\n+\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonPropertyOrder;\n+import io.strimzi.crdgenerator.annotations.Description;\n+import io.strimzi.crdgenerator.annotations.DescriptionFile;\n+import io.strimzi.crdgenerator.annotations.Example;\n+import io.sundr.builder.annotations.Buildable;\n+import lombok.EqualsAndHashCode;\n+\n+import java.util.List;\n+\n+/**\n+ * Configures the broker authorization to use Open Policy Agent as an authorization and policy server.\n+ */\n+@DescriptionFile\n+@Buildable(\n+        editableEnabled = false,\n+        builderPackage = Constants.FABRIC8_KUBERNETES_API\n+)\n+@JsonInclude(JsonInclude.Include.NON_NULL)\n+@JsonPropertyOrder({\"type\", \"url\", \"allowOnError\", \"initialCacheCapacity\", \"maximumCacheSize\", \"expireAfterMs\", \"token\", \"superUsers\"})\n+@EqualsAndHashCode\n+public class KafkaAuthorizationOpa extends KafkaAuthorization {\n+    private static final long serialVersionUID = 1L;\n+\n+    public static final String TYPE_OPA = \"opa\";\n+\n+    public static final String AUTHORIZER_CLASS_NAME = \"com.bisnode.kafka.authorization.OpaAuthorizer\";\n+\n+    private List<String> superUsers;\n+    private String url;\n+    private boolean allowOnError = false;\n+    private int initialCacheCapacity = 5000;\n+    private int maximumCacheSize = 50000;\n+    private long expireAfterMs = 3600000;\n+\n+    @Description(\"Must be `\" + TYPE_OPA + \"`\")\n+    @Override\n+    public String getType() {\n+        return TYPE_OPA;\n+    }\n+\n+    @Description(\"List of super users. Should contain list of user principals which should get unlimited access rights.\")\n+    @Example(\"- CN=my-user\\n\" +\n+             \"- CN=my-other-user\")\n+    @JsonInclude(JsonInclude.Include.NON_NULL)\n+    public List<String> getSuperUsers() {\n+        return superUsers;\n+    }\n+\n+    public void setSuperUsers(List<String> superUsers) {\n+        this.superUsers = superUsers;\n+    }\n+\n+    @Description(\"URL of the OPA server with the policy name which should be queried. \" +\n+            \"This option is required.\")\n+    @Example(\"http://opa:8181/v1/data/kafka/authz/allow\")", "originalCommit": "0ca0207ccb454d65387499878370c1504820a512", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTgzMjMwNg==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3192#discussion_r439832306", "bodyText": "Yes. For example in the example bove, it would query the method allow of the policy from the package kafka.authz.", "author": "scholzj", "createdAt": "2020-06-14T13:53:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTgwNTQxMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTgwNTQ1Ng==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3192#discussion_r439805456", "bodyText": "Maybe we could add more about the authorizer caching and this property defines the capacity, something like \"Initial capacity of the OPA authorizer decision cache to avoid querying the OPA server policy endpoint every time\"", "author": "ppatierno", "createdAt": "2020-06-14T08:33:36Z", "path": "api/src/main/java/io/strimzi/api/kafka/model/KafkaAuthorizationOpa.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Copyright Strimzi authors.\n+ * License: Apache License 2.0 (see the file LICENSE or http://apache.org/licenses/LICENSE-2.0.html).\n+ */\n+package io.strimzi.api.kafka.model;\n+\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonPropertyOrder;\n+import io.strimzi.crdgenerator.annotations.Description;\n+import io.strimzi.crdgenerator.annotations.DescriptionFile;\n+import io.strimzi.crdgenerator.annotations.Example;\n+import io.sundr.builder.annotations.Buildable;\n+import lombok.EqualsAndHashCode;\n+\n+import java.util.List;\n+\n+/**\n+ * Configures the broker authorization to use Open Policy Agent as an authorization and policy server.\n+ */\n+@DescriptionFile\n+@Buildable(\n+        editableEnabled = false,\n+        builderPackage = Constants.FABRIC8_KUBERNETES_API\n+)\n+@JsonInclude(JsonInclude.Include.NON_NULL)\n+@JsonPropertyOrder({\"type\", \"url\", \"allowOnError\", \"initialCacheCapacity\", \"maximumCacheSize\", \"expireAfterMs\", \"token\", \"superUsers\"})\n+@EqualsAndHashCode\n+public class KafkaAuthorizationOpa extends KafkaAuthorization {\n+    private static final long serialVersionUID = 1L;\n+\n+    public static final String TYPE_OPA = \"opa\";\n+\n+    public static final String AUTHORIZER_CLASS_NAME = \"com.bisnode.kafka.authorization.OpaAuthorizer\";\n+\n+    private List<String> superUsers;\n+    private String url;\n+    private boolean allowOnError = false;\n+    private int initialCacheCapacity = 5000;\n+    private int maximumCacheSize = 50000;\n+    private long expireAfterMs = 3600000;\n+\n+    @Description(\"Must be `\" + TYPE_OPA + \"`\")\n+    @Override\n+    public String getType() {\n+        return TYPE_OPA;\n+    }\n+\n+    @Description(\"List of super users. Should contain list of user principals which should get unlimited access rights.\")\n+    @Example(\"- CN=my-user\\n\" +\n+             \"- CN=my-other-user\")\n+    @JsonInclude(JsonInclude.Include.NON_NULL)\n+    public List<String> getSuperUsers() {\n+        return superUsers;\n+    }\n+\n+    public void setSuperUsers(List<String> superUsers) {\n+        this.superUsers = superUsers;\n+    }\n+\n+    @Description(\"URL of the OPA server with the policy name which should be queried. \" +\n+            \"This option is required.\")\n+    @Example(\"http://opa:8181/v1/data/kafka/authz/allow\")\n+    @JsonInclude(JsonInclude.Include.NON_NULL)\n+    public String getUrl() {\n+        return url;\n+    }\n+\n+    public void setUrl(String url) {\n+        this.url = url;\n+    }\n+\n+    @Description(\"Defines the authorizer behaviour when the OPA calls fail. \" +\n+            \"Defaults to `false`.\")\n+    @JsonInclude(JsonInclude.Include.NON_NULL)\n+    public boolean isAllowOnError() {\n+        return allowOnError;\n+    }\n+\n+    public void setAllowOnError(boolean allowOnError) {\n+        this.allowOnError = allowOnError;\n+    }\n+\n+    @Description(\"Initial capacity of the decision cache. \" +", "originalCommit": "0ca0207ccb454d65387499878370c1504820a512", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTgwNTU0Ng==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3192#discussion_r439805546", "bodyText": "something like the previous one related to the initial capacity cache?", "author": "ppatierno", "createdAt": "2020-06-14T08:34:54Z", "path": "api/src/main/java/io/strimzi/api/kafka/model/KafkaAuthorizationOpa.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Copyright Strimzi authors.\n+ * License: Apache License 2.0 (see the file LICENSE or http://apache.org/licenses/LICENSE-2.0.html).\n+ */\n+package io.strimzi.api.kafka.model;\n+\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonPropertyOrder;\n+import io.strimzi.crdgenerator.annotations.Description;\n+import io.strimzi.crdgenerator.annotations.DescriptionFile;\n+import io.strimzi.crdgenerator.annotations.Example;\n+import io.sundr.builder.annotations.Buildable;\n+import lombok.EqualsAndHashCode;\n+\n+import java.util.List;\n+\n+/**\n+ * Configures the broker authorization to use Open Policy Agent as an authorization and policy server.\n+ */\n+@DescriptionFile\n+@Buildable(\n+        editableEnabled = false,\n+        builderPackage = Constants.FABRIC8_KUBERNETES_API\n+)\n+@JsonInclude(JsonInclude.Include.NON_NULL)\n+@JsonPropertyOrder({\"type\", \"url\", \"allowOnError\", \"initialCacheCapacity\", \"maximumCacheSize\", \"expireAfterMs\", \"token\", \"superUsers\"})\n+@EqualsAndHashCode\n+public class KafkaAuthorizationOpa extends KafkaAuthorization {\n+    private static final long serialVersionUID = 1L;\n+\n+    public static final String TYPE_OPA = \"opa\";\n+\n+    public static final String AUTHORIZER_CLASS_NAME = \"com.bisnode.kafka.authorization.OpaAuthorizer\";\n+\n+    private List<String> superUsers;\n+    private String url;\n+    private boolean allowOnError = false;\n+    private int initialCacheCapacity = 5000;\n+    private int maximumCacheSize = 50000;\n+    private long expireAfterMs = 3600000;\n+\n+    @Description(\"Must be `\" + TYPE_OPA + \"`\")\n+    @Override\n+    public String getType() {\n+        return TYPE_OPA;\n+    }\n+\n+    @Description(\"List of super users. Should contain list of user principals which should get unlimited access rights.\")\n+    @Example(\"- CN=my-user\\n\" +\n+             \"- CN=my-other-user\")\n+    @JsonInclude(JsonInclude.Include.NON_NULL)\n+    public List<String> getSuperUsers() {\n+        return superUsers;\n+    }\n+\n+    public void setSuperUsers(List<String> superUsers) {\n+        this.superUsers = superUsers;\n+    }\n+\n+    @Description(\"URL of the OPA server with the policy name which should be queried. \" +\n+            \"This option is required.\")\n+    @Example(\"http://opa:8181/v1/data/kafka/authz/allow\")\n+    @JsonInclude(JsonInclude.Include.NON_NULL)\n+    public String getUrl() {\n+        return url;\n+    }\n+\n+    public void setUrl(String url) {\n+        this.url = url;\n+    }\n+\n+    @Description(\"Defines the authorizer behaviour when the OPA calls fail. \" +\n+            \"Defaults to `false`.\")\n+    @JsonInclude(JsonInclude.Include.NON_NULL)\n+    public boolean isAllowOnError() {\n+        return allowOnError;\n+    }\n+\n+    public void setAllowOnError(boolean allowOnError) {\n+        this.allowOnError = allowOnError;\n+    }\n+\n+    @Description(\"Initial capacity of the decision cache. \" +\n+            \"Defaults to `5000`.\")\n+    @JsonInclude(JsonInclude.Include.NON_NULL)\n+    public int getInitialCacheCapacity() {\n+        return initialCacheCapacity;\n+    }\n+\n+    public void setInitialCacheCapacity(int initialCacheCapacity) {\n+        this.initialCacheCapacity = initialCacheCapacity;\n+    }\n+\n+    @Description(\"Maximum capacity of the decision cache. \" +", "originalCommit": "0ca0207ccb454d65387499878370c1504820a512", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTgwNTU4NQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3192#discussion_r439805585", "bodyText": "ditto as above", "author": "ppatierno", "createdAt": "2020-06-14T08:35:18Z", "path": "api/src/main/java/io/strimzi/api/kafka/model/KafkaAuthorizationOpa.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Copyright Strimzi authors.\n+ * License: Apache License 2.0 (see the file LICENSE or http://apache.org/licenses/LICENSE-2.0.html).\n+ */\n+package io.strimzi.api.kafka.model;\n+\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonPropertyOrder;\n+import io.strimzi.crdgenerator.annotations.Description;\n+import io.strimzi.crdgenerator.annotations.DescriptionFile;\n+import io.strimzi.crdgenerator.annotations.Example;\n+import io.sundr.builder.annotations.Buildable;\n+import lombok.EqualsAndHashCode;\n+\n+import java.util.List;\n+\n+/**\n+ * Configures the broker authorization to use Open Policy Agent as an authorization and policy server.\n+ */\n+@DescriptionFile\n+@Buildable(\n+        editableEnabled = false,\n+        builderPackage = Constants.FABRIC8_KUBERNETES_API\n+)\n+@JsonInclude(JsonInclude.Include.NON_NULL)\n+@JsonPropertyOrder({\"type\", \"url\", \"allowOnError\", \"initialCacheCapacity\", \"maximumCacheSize\", \"expireAfterMs\", \"token\", \"superUsers\"})\n+@EqualsAndHashCode\n+public class KafkaAuthorizationOpa extends KafkaAuthorization {\n+    private static final long serialVersionUID = 1L;\n+\n+    public static final String TYPE_OPA = \"opa\";\n+\n+    public static final String AUTHORIZER_CLASS_NAME = \"com.bisnode.kafka.authorization.OpaAuthorizer\";\n+\n+    private List<String> superUsers;\n+    private String url;\n+    private boolean allowOnError = false;\n+    private int initialCacheCapacity = 5000;\n+    private int maximumCacheSize = 50000;\n+    private long expireAfterMs = 3600000;\n+\n+    @Description(\"Must be `\" + TYPE_OPA + \"`\")\n+    @Override\n+    public String getType() {\n+        return TYPE_OPA;\n+    }\n+\n+    @Description(\"List of super users. Should contain list of user principals which should get unlimited access rights.\")\n+    @Example(\"- CN=my-user\\n\" +\n+             \"- CN=my-other-user\")\n+    @JsonInclude(JsonInclude.Include.NON_NULL)\n+    public List<String> getSuperUsers() {\n+        return superUsers;\n+    }\n+\n+    public void setSuperUsers(List<String> superUsers) {\n+        this.superUsers = superUsers;\n+    }\n+\n+    @Description(\"URL of the OPA server with the policy name which should be queried. \" +\n+            \"This option is required.\")\n+    @Example(\"http://opa:8181/v1/data/kafka/authz/allow\")\n+    @JsonInclude(JsonInclude.Include.NON_NULL)\n+    public String getUrl() {\n+        return url;\n+    }\n+\n+    public void setUrl(String url) {\n+        this.url = url;\n+    }\n+\n+    @Description(\"Defines the authorizer behaviour when the OPA calls fail. \" +\n+            \"Defaults to `false`.\")\n+    @JsonInclude(JsonInclude.Include.NON_NULL)\n+    public boolean isAllowOnError() {\n+        return allowOnError;\n+    }\n+\n+    public void setAllowOnError(boolean allowOnError) {\n+        this.allowOnError = allowOnError;\n+    }\n+\n+    @Description(\"Initial capacity of the decision cache. \" +\n+            \"Defaults to `5000`.\")\n+    @JsonInclude(JsonInclude.Include.NON_NULL)\n+    public int getInitialCacheCapacity() {\n+        return initialCacheCapacity;\n+    }\n+\n+    public void setInitialCacheCapacity(int initialCacheCapacity) {\n+        this.initialCacheCapacity = initialCacheCapacity;\n+    }\n+\n+    @Description(\"Maximum capacity of the decision cache. \" +\n+            \"Defaults to `50000`.\")\n+    @JsonInclude(JsonInclude.Include.NON_NULL)\n+    public int getMaximumCacheSize() {\n+        return maximumCacheSize;\n+    }\n+\n+    public void setMaximumCacheSize(int maximumCacheSize) {\n+        this.maximumCacheSize = maximumCacheSize;\n+    }\n+\n+    @Description(\"Decision cache expiry in milliseconds. \" +", "originalCommit": "0ca0207ccb454d65387499878370c1504820a512", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTgwNTc3OA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3192#discussion_r439805778", "bodyText": "is the name of this adoc file like the FQDN of OPA authorization model purpose? it's io.strimzi.api.kafka.model.KafkaAuthorizationOpa.adoc which sounds weird to me.", "author": "ppatierno", "createdAt": "2020-06-14T08:37:57Z", "path": "documentation/api/io.strimzi.api.kafka.model.KafkaAuthorizationOpa.adoc", "diffHunk": "@@ -0,0 +1,44 @@\n+To use link:https://www.openpolicyagent.org/[Open Policy Agent^] authorization, set the `type` property in the `authorization` section to the value `opa`.", "originalCommit": "0ca0207ccb454d65387499878370c1504820a512", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTgzMTMyOQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3192#discussion_r439831329", "bodyText": "This is how the @DescriptionFile annotations works - when you set it on the class, it expects that there will be file named <package>.<class-name>.adoc which will be included into the API reference.", "author": "scholzj", "createdAt": "2020-06-14T13:42:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTgwNTc3OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTgwNTg0NQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3192#discussion_r439805845", "bodyText": "maybe this above definitions could be used to enrich the descriptions in the model as I raised before.", "author": "ppatierno", "createdAt": "2020-06-14T08:38:55Z", "path": "documentation/api/io.strimzi.api.kafka.model.KafkaAuthorizationOpa.adoc", "diffHunk": "@@ -0,0 +1,44 @@\n+To use link:https://www.openpolicyagent.org/[Open Policy Agent^] authorization, set the `type` property in the `authorization` section to the value `opa`.\n+The Open Policy Agent authorizer has several configuration options:\n+\n+`url`::\n+The URL used to connect to the Open Policy Agent server.\n+The URL has to include the policy which will be queried by the authorizer.\n+**Required.**\n+\n+`allowOnError`::\n+Defines whether Kafka client should be allowed or denied by default when the authorizer fails to query the Open Policy Agent (for example because it is temporarily unavailable).\n+Defaults to `false` - all actions will be denied.\n+\n+`initialCacheCapacity`::\n+Initial capacity of the local cache used by the authorizer.\n+Defaults to `5000`.\n+\n+`maximumCacheSize`::\n+Maximum capacity of the local cache used by the authorizer.\n+Defaults to `50000`.\n+\n+`expireAfterMs`::\n+The expiration of the records kept in the local cache.\n+In milliseconds.\n+Defaults to `3600000` milliseconds (1 hour).", "originalCommit": "0ca0207ccb454d65387499878370c1504820a512", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTgwNTkzNA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3192#discussion_r439805934", "bodyText": "is there a way for disabling cache? Setting max cache size to 0?", "author": "ppatierno", "createdAt": "2020-06-14T08:40:00Z", "path": "api/src/main/java/io/strimzi/api/kafka/model/KafkaAuthorizationOpa.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Copyright Strimzi authors.\n+ * License: Apache License 2.0 (see the file LICENSE or http://apache.org/licenses/LICENSE-2.0.html).\n+ */\n+package io.strimzi.api.kafka.model;\n+\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonPropertyOrder;\n+import io.strimzi.crdgenerator.annotations.Description;\n+import io.strimzi.crdgenerator.annotations.DescriptionFile;\n+import io.strimzi.crdgenerator.annotations.Example;\n+import io.sundr.builder.annotations.Buildable;\n+import lombok.EqualsAndHashCode;\n+\n+import java.util.List;\n+\n+/**\n+ * Configures the broker authorization to use Open Policy Agent as an authorization and policy server.\n+ */\n+@DescriptionFile\n+@Buildable(\n+        editableEnabled = false,\n+        builderPackage = Constants.FABRIC8_KUBERNETES_API\n+)\n+@JsonInclude(JsonInclude.Include.NON_NULL)\n+@JsonPropertyOrder({\"type\", \"url\", \"allowOnError\", \"initialCacheCapacity\", \"maximumCacheSize\", \"expireAfterMs\", \"token\", \"superUsers\"})\n+@EqualsAndHashCode\n+public class KafkaAuthorizationOpa extends KafkaAuthorization {\n+    private static final long serialVersionUID = 1L;\n+\n+    public static final String TYPE_OPA = \"opa\";\n+\n+    public static final String AUTHORIZER_CLASS_NAME = \"com.bisnode.kafka.authorization.OpaAuthorizer\";\n+\n+    private List<String> superUsers;\n+    private String url;\n+    private boolean allowOnError = false;\n+    private int initialCacheCapacity = 5000;\n+    private int maximumCacheSize = 50000;\n+    private long expireAfterMs = 3600000;\n+\n+    @Description(\"Must be `\" + TYPE_OPA + \"`\")\n+    @Override\n+    public String getType() {\n+        return TYPE_OPA;\n+    }\n+\n+    @Description(\"List of super users. Should contain list of user principals which should get unlimited access rights.\")\n+    @Example(\"- CN=my-user\\n\" +\n+             \"- CN=my-other-user\")\n+    @JsonInclude(JsonInclude.Include.NON_NULL)\n+    public List<String> getSuperUsers() {\n+        return superUsers;\n+    }\n+\n+    public void setSuperUsers(List<String> superUsers) {\n+        this.superUsers = superUsers;\n+    }\n+\n+    @Description(\"URL of the OPA server with the policy name which should be queried. \" +\n+            \"This option is required.\")\n+    @Example(\"http://opa:8181/v1/data/kafka/authz/allow\")\n+    @JsonInclude(JsonInclude.Include.NON_NULL)\n+    public String getUrl() {\n+        return url;\n+    }\n+\n+    public void setUrl(String url) {\n+        this.url = url;\n+    }\n+\n+    @Description(\"Defines the authorizer behaviour when the OPA calls fail. \" +\n+            \"Defaults to `false`.\")\n+    @JsonInclude(JsonInclude.Include.NON_NULL)\n+    public boolean isAllowOnError() {\n+        return allowOnError;\n+    }\n+\n+    public void setAllowOnError(boolean allowOnError) {\n+        this.allowOnError = allowOnError;\n+    }\n+\n+    @Description(\"Initial capacity of the decision cache. \" +\n+            \"Defaults to `5000`.\")\n+    @JsonInclude(JsonInclude.Include.NON_NULL)\n+    public int getInitialCacheCapacity() {\n+        return initialCacheCapacity;\n+    }\n+\n+    public void setInitialCacheCapacity(int initialCacheCapacity) {\n+        this.initialCacheCapacity = initialCacheCapacity;\n+    }\n+\n+    @Description(\"Maximum capacity of the decision cache. \" +\n+            \"Defaults to `50000`.\")\n+    @JsonInclude(JsonInclude.Include.NON_NULL)\n+    public int getMaximumCacheSize() {", "originalCommit": "0ca0207ccb454d65387499878370c1504820a512", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTgzMjAyNw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3192#discussion_r439832027", "bodyText": "I'm not sure setting it to 0 would work. I do not think disabling the cache makes really any sense given how Apache Kafka works. The ACLs are evaluated every single time. So for example without the cache, every single fetch or produce request would mean HTTP call to OPA. So disabling the cache would criple the performance on every level. The reason for these cache options is mainly to manage the cost when the cache is growing and balance the memeory consumption.", "author": "scholzj", "createdAt": "2020-06-14T13:50:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTgwNTkzNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDAxNzIxNA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3192#discussion_r440017214", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        \"`opa` is using Open Policy Agent based authorization.\")\n          \n          \n            \n                        \"`opa` authorization type uses Open Policy Agent based authorization.\")", "author": "PaulRMellor", "createdAt": "2020-06-15T08:38:33Z", "path": "api/src/main/java/io/strimzi/api/kafka/model/KafkaAuthorization.java", "diffHunk": "@@ -32,8 +33,10 @@\n     private Map<String, Object> additionalProperties;\n \n     @Description(\"Authorization type. \" +\n-            \"Currently the only supported type is `simple`. \" +\n-            \"`simple` authorization type uses Kafka's `kafka.security.auth.SimpleAclAuthorizer` class for authorization.\")\n+            \"Currently the supported types are `simple`, `keycloak`, and `opa`. \" +\n+            \"`simple` authorization type uses Kafka's `kafka.security.auth.SimpleAclAuthorizer` class for authorization. \" +\n+            \"`keycloak` authorization type uses Keycloak Authorization Services for authorization. \" +\n+            \"`opa` is using Open Policy Agent based authorization.\")", "originalCommit": "c65a17f52322eb4eddf29f6b88134a6e915ac79c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "3467481f1f84ecf4cd226bccd502748bebf29723", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/3467481f1f84ecf4cd226bccd502748bebf29723", "message": "OPA PoC using the Kafka Authorizer from OPA Contrib repo\n\nSigned-off-by: Jakub Scholz <www@scholzj.com>", "committedDate": "2020-06-15T08:40:47Z", "type": "commit"}, {"oid": "e903b455514a60400addf6fe5b156ebcfdf844b9", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/e903b455514a60400addf6fe5b156ebcfdf844b9", "message": "OPA PoC with the Bisnode opa-kafka-plugin\n\nSigned-off-by: Jakub Scholz <www@scholzj.com>", "committedDate": "2020-06-15T08:40:47Z", "type": "commit"}, {"oid": "947b46fb3d7752eed0dd9f3d1728e599dfcedf83", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/947b46fb3d7752eed0dd9f3d1728e599dfcedf83", "message": "Rebase the OPA PoC and make it up to date with docs etc.\n\nSigned-off-by: Jakub Scholz <www@scholzj.com>", "committedDate": "2020-06-15T08:40:47Z", "type": "commit"}, {"oid": "9e62f2b5741ce3a1d5167eb7c8a8fd103c961b18", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/9e62f2b5741ce3a1d5167eb7c8a8fd103c961b18", "message": "Add system test\n\nSigned-off-by: Jakub Scholz <www@scholzj.com>", "committedDate": "2020-06-15T08:40:47Z", "type": "commit"}, {"oid": "2556f464d5a216b1eae056abef5f422bddb6f0eb", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/2556f464d5a216b1eae056abef5f422bddb6f0eb", "message": "Review comments\n\nSigned-off-by: Jakub Scholz <www@scholzj.com>", "committedDate": "2020-06-15T08:40:47Z", "type": "commit"}, {"oid": "7d62c0d26bff07f49eb5ee4043e6b34e140a4c2d", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/7d62c0d26bff07f49eb5ee4043e6b34e140a4c2d", "message": "Review comments II\n\nSigned-off-by: Jakub Scholz <www@scholzj.com>", "committedDate": "2020-06-15T08:40:47Z", "type": "commit"}, {"oid": "9c710cbf06cda1e8f15dc9178675c8b8d526343e", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/9c710cbf06cda1e8f15dc9178675c8b8d526343e", "message": "Regen the docs \ud83d\ude44\n\nSigned-off-by: Jakub Scholz <www@scholzj.com>", "committedDate": "2020-06-15T08:40:47Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDAxODQ2OA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3192#discussion_r440018468", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Description(\"List of super users. Should contain list of user principals which should get unlimited access rights.\")\n          \n          \n            \n                @Description(\"List of super users, which is specifically a list of user principals that have unlimited access rights.\")", "author": "PaulRMellor", "createdAt": "2020-06-15T08:40:52Z", "path": "api/src/main/java/io/strimzi/api/kafka/model/KafkaAuthorizationOpa.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Copyright Strimzi authors.\n+ * License: Apache License 2.0 (see the file LICENSE or http://apache.org/licenses/LICENSE-2.0.html).\n+ */\n+package io.strimzi.api.kafka.model;\n+\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonPropertyOrder;\n+import io.strimzi.crdgenerator.annotations.Description;\n+import io.strimzi.crdgenerator.annotations.DescriptionFile;\n+import io.strimzi.crdgenerator.annotations.Example;\n+import io.sundr.builder.annotations.Buildable;\n+import lombok.EqualsAndHashCode;\n+\n+import java.util.List;\n+\n+/**\n+ * Configures the broker authorization to use Open Policy Agent as an authorization and policy server.\n+ */\n+@DescriptionFile\n+@Buildable(\n+        editableEnabled = false,\n+        builderPackage = Constants.FABRIC8_KUBERNETES_API\n+)\n+@JsonInclude(JsonInclude.Include.NON_NULL)\n+@JsonPropertyOrder({\"type\", \"url\", \"allowOnError\", \"initialCacheCapacity\", \"maximumCacheSize\", \"expireAfterMs\", \"superUsers\"})\n+@EqualsAndHashCode\n+public class KafkaAuthorizationOpa extends KafkaAuthorization {\n+    private static final long serialVersionUID = 1L;\n+\n+    public static final String TYPE_OPA = \"opa\";\n+\n+    public static final String AUTHORIZER_CLASS_NAME = \"com.bisnode.kafka.authorization.OpaAuthorizer\";\n+\n+    private List<String> superUsers;\n+    private String url;\n+    private boolean allowOnError = false;\n+    private int initialCacheCapacity = 5000;\n+    private int maximumCacheSize = 50000;\n+    private long expireAfterMs = 3600000;\n+\n+    @Description(\"Must be `\" + TYPE_OPA + \"`\")\n+    @Override\n+    public String getType() {\n+        return TYPE_OPA;\n+    }\n+\n+    @Description(\"List of super users. Should contain list of user principals which should get unlimited access rights.\")", "originalCommit": "c65a17f52322eb4eddf29f6b88134a6e915ac79c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDAxOTgyOQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3192#discussion_r440019829", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Description(\"Defines whether Kafka client should be allowed or denied by default when the authorizer fails to query the Open Policy Agent (for example because it is temporarily unavailable). \" +\n          \n          \n            \n                @Description(\"Defines whether a Kafka client should be allowed or denied by default when the authorizer fails to query the Open Policy Agent, for example, when it is temporarily unavailable). \" +", "author": "PaulRMellor", "createdAt": "2020-06-15T08:43:05Z", "path": "api/src/main/java/io/strimzi/api/kafka/model/KafkaAuthorizationOpa.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Copyright Strimzi authors.\n+ * License: Apache License 2.0 (see the file LICENSE or http://apache.org/licenses/LICENSE-2.0.html).\n+ */\n+package io.strimzi.api.kafka.model;\n+\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonPropertyOrder;\n+import io.strimzi.crdgenerator.annotations.Description;\n+import io.strimzi.crdgenerator.annotations.DescriptionFile;\n+import io.strimzi.crdgenerator.annotations.Example;\n+import io.sundr.builder.annotations.Buildable;\n+import lombok.EqualsAndHashCode;\n+\n+import java.util.List;\n+\n+/**\n+ * Configures the broker authorization to use Open Policy Agent as an authorization and policy server.\n+ */\n+@DescriptionFile\n+@Buildable(\n+        editableEnabled = false,\n+        builderPackage = Constants.FABRIC8_KUBERNETES_API\n+)\n+@JsonInclude(JsonInclude.Include.NON_NULL)\n+@JsonPropertyOrder({\"type\", \"url\", \"allowOnError\", \"initialCacheCapacity\", \"maximumCacheSize\", \"expireAfterMs\", \"superUsers\"})\n+@EqualsAndHashCode\n+public class KafkaAuthorizationOpa extends KafkaAuthorization {\n+    private static final long serialVersionUID = 1L;\n+\n+    public static final String TYPE_OPA = \"opa\";\n+\n+    public static final String AUTHORIZER_CLASS_NAME = \"com.bisnode.kafka.authorization.OpaAuthorizer\";\n+\n+    private List<String> superUsers;\n+    private String url;\n+    private boolean allowOnError = false;\n+    private int initialCacheCapacity = 5000;\n+    private int maximumCacheSize = 50000;\n+    private long expireAfterMs = 3600000;\n+\n+    @Description(\"Must be `\" + TYPE_OPA + \"`\")\n+    @Override\n+    public String getType() {\n+        return TYPE_OPA;\n+    }\n+\n+    @Description(\"List of super users. Should contain list of user principals which should get unlimited access rights.\")\n+    @Example(\"- CN=my-user\\n\" +\n+             \"- CN=my-other-user\")\n+    @JsonInclude(JsonInclude.Include.NON_NULL)\n+    public List<String> getSuperUsers() {\n+        return superUsers;\n+    }\n+\n+    public void setSuperUsers(List<String> superUsers) {\n+        this.superUsers = superUsers;\n+    }\n+\n+    @Description(\"The URL used to connect to the Open Policy Agent server. \" +\n+            \"The URL has to include the policy which will be queried by the authorizer. \" +\n+            \"This option is required.\")\n+    @Example(\"http://opa:8181/v1/data/kafka/authz/allow\")\n+    @JsonInclude(JsonInclude.Include.NON_NULL)\n+    public String getUrl() {\n+        return url;\n+    }\n+\n+    public void setUrl(String url) {\n+        this.url = url;\n+    }\n+\n+    @Description(\"Defines whether Kafka client should be allowed or denied by default when the authorizer fails to query the Open Policy Agent (for example because it is temporarily unavailable). \" +", "originalCommit": "c65a17f52322eb4eddf29f6b88134a6e915ac79c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDAyMDAzMg==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3192#discussion_r440020032", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Description(\"Initial capacity of the local cache used by the authorizer to avoid querying Open Policy Agent for every request \" +\n          \n          \n            \n                @Description(\"Initial capacity of the local cache used by the authorizer to avoid querying the Open Policy Agent for every request \" +", "author": "PaulRMellor", "createdAt": "2020-06-15T08:43:24Z", "path": "api/src/main/java/io/strimzi/api/kafka/model/KafkaAuthorizationOpa.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Copyright Strimzi authors.\n+ * License: Apache License 2.0 (see the file LICENSE or http://apache.org/licenses/LICENSE-2.0.html).\n+ */\n+package io.strimzi.api.kafka.model;\n+\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonPropertyOrder;\n+import io.strimzi.crdgenerator.annotations.Description;\n+import io.strimzi.crdgenerator.annotations.DescriptionFile;\n+import io.strimzi.crdgenerator.annotations.Example;\n+import io.sundr.builder.annotations.Buildable;\n+import lombok.EqualsAndHashCode;\n+\n+import java.util.List;\n+\n+/**\n+ * Configures the broker authorization to use Open Policy Agent as an authorization and policy server.\n+ */\n+@DescriptionFile\n+@Buildable(\n+        editableEnabled = false,\n+        builderPackage = Constants.FABRIC8_KUBERNETES_API\n+)\n+@JsonInclude(JsonInclude.Include.NON_NULL)\n+@JsonPropertyOrder({\"type\", \"url\", \"allowOnError\", \"initialCacheCapacity\", \"maximumCacheSize\", \"expireAfterMs\", \"superUsers\"})\n+@EqualsAndHashCode\n+public class KafkaAuthorizationOpa extends KafkaAuthorization {\n+    private static final long serialVersionUID = 1L;\n+\n+    public static final String TYPE_OPA = \"opa\";\n+\n+    public static final String AUTHORIZER_CLASS_NAME = \"com.bisnode.kafka.authorization.OpaAuthorizer\";\n+\n+    private List<String> superUsers;\n+    private String url;\n+    private boolean allowOnError = false;\n+    private int initialCacheCapacity = 5000;\n+    private int maximumCacheSize = 50000;\n+    private long expireAfterMs = 3600000;\n+\n+    @Description(\"Must be `\" + TYPE_OPA + \"`\")\n+    @Override\n+    public String getType() {\n+        return TYPE_OPA;\n+    }\n+\n+    @Description(\"List of super users. Should contain list of user principals which should get unlimited access rights.\")\n+    @Example(\"- CN=my-user\\n\" +\n+             \"- CN=my-other-user\")\n+    @JsonInclude(JsonInclude.Include.NON_NULL)\n+    public List<String> getSuperUsers() {\n+        return superUsers;\n+    }\n+\n+    public void setSuperUsers(List<String> superUsers) {\n+        this.superUsers = superUsers;\n+    }\n+\n+    @Description(\"The URL used to connect to the Open Policy Agent server. \" +\n+            \"The URL has to include the policy which will be queried by the authorizer. \" +\n+            \"This option is required.\")\n+    @Example(\"http://opa:8181/v1/data/kafka/authz/allow\")\n+    @JsonInclude(JsonInclude.Include.NON_NULL)\n+    public String getUrl() {\n+        return url;\n+    }\n+\n+    public void setUrl(String url) {\n+        this.url = url;\n+    }\n+\n+    @Description(\"Defines whether Kafka client should be allowed or denied by default when the authorizer fails to query the Open Policy Agent (for example because it is temporarily unavailable). \" +\n+            \"Defaults to `false` - all actions will be denied.\")\n+    @JsonInclude(JsonInclude.Include.NON_NULL)\n+    public boolean isAllowOnError() {\n+        return allowOnError;\n+    }\n+\n+    public void setAllowOnError(boolean allowOnError) {\n+        this.allowOnError = allowOnError;\n+    }\n+\n+    @Description(\"Initial capacity of the local cache used by the authorizer to avoid querying Open Policy Agent for every request \" +", "originalCommit": "c65a17f52322eb4eddf29f6b88134a6e915ac79c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDAyMDE4Nw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3192#discussion_r440020187", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Description(\"Maximum capacity of the local cache used by the authorizer to avoid querying Open Policy Agent for every request. \" +\n          \n          \n            \n                @Description(\"Maximum capacity of the local cache used by the authorizer to avoid querying the Open Policy Agent for every request. \" +", "author": "PaulRMellor", "createdAt": "2020-06-15T08:43:39Z", "path": "api/src/main/java/io/strimzi/api/kafka/model/KafkaAuthorizationOpa.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Copyright Strimzi authors.\n+ * License: Apache License 2.0 (see the file LICENSE or http://apache.org/licenses/LICENSE-2.0.html).\n+ */\n+package io.strimzi.api.kafka.model;\n+\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonPropertyOrder;\n+import io.strimzi.crdgenerator.annotations.Description;\n+import io.strimzi.crdgenerator.annotations.DescriptionFile;\n+import io.strimzi.crdgenerator.annotations.Example;\n+import io.sundr.builder.annotations.Buildable;\n+import lombok.EqualsAndHashCode;\n+\n+import java.util.List;\n+\n+/**\n+ * Configures the broker authorization to use Open Policy Agent as an authorization and policy server.\n+ */\n+@DescriptionFile\n+@Buildable(\n+        editableEnabled = false,\n+        builderPackage = Constants.FABRIC8_KUBERNETES_API\n+)\n+@JsonInclude(JsonInclude.Include.NON_NULL)\n+@JsonPropertyOrder({\"type\", \"url\", \"allowOnError\", \"initialCacheCapacity\", \"maximumCacheSize\", \"expireAfterMs\", \"superUsers\"})\n+@EqualsAndHashCode\n+public class KafkaAuthorizationOpa extends KafkaAuthorization {\n+    private static final long serialVersionUID = 1L;\n+\n+    public static final String TYPE_OPA = \"opa\";\n+\n+    public static final String AUTHORIZER_CLASS_NAME = \"com.bisnode.kafka.authorization.OpaAuthorizer\";\n+\n+    private List<String> superUsers;\n+    private String url;\n+    private boolean allowOnError = false;\n+    private int initialCacheCapacity = 5000;\n+    private int maximumCacheSize = 50000;\n+    private long expireAfterMs = 3600000;\n+\n+    @Description(\"Must be `\" + TYPE_OPA + \"`\")\n+    @Override\n+    public String getType() {\n+        return TYPE_OPA;\n+    }\n+\n+    @Description(\"List of super users. Should contain list of user principals which should get unlimited access rights.\")\n+    @Example(\"- CN=my-user\\n\" +\n+             \"- CN=my-other-user\")\n+    @JsonInclude(JsonInclude.Include.NON_NULL)\n+    public List<String> getSuperUsers() {\n+        return superUsers;\n+    }\n+\n+    public void setSuperUsers(List<String> superUsers) {\n+        this.superUsers = superUsers;\n+    }\n+\n+    @Description(\"The URL used to connect to the Open Policy Agent server. \" +\n+            \"The URL has to include the policy which will be queried by the authorizer. \" +\n+            \"This option is required.\")\n+    @Example(\"http://opa:8181/v1/data/kafka/authz/allow\")\n+    @JsonInclude(JsonInclude.Include.NON_NULL)\n+    public String getUrl() {\n+        return url;\n+    }\n+\n+    public void setUrl(String url) {\n+        this.url = url;\n+    }\n+\n+    @Description(\"Defines whether Kafka client should be allowed or denied by default when the authorizer fails to query the Open Policy Agent (for example because it is temporarily unavailable). \" +\n+            \"Defaults to `false` - all actions will be denied.\")\n+    @JsonInclude(JsonInclude.Include.NON_NULL)\n+    public boolean isAllowOnError() {\n+        return allowOnError;\n+    }\n+\n+    public void setAllowOnError(boolean allowOnError) {\n+        this.allowOnError = allowOnError;\n+    }\n+\n+    @Description(\"Initial capacity of the local cache used by the authorizer to avoid querying Open Policy Agent for every request \" +\n+            \"Defaults to `5000`.\")\n+    @JsonInclude(JsonInclude.Include.NON_NULL)\n+    public int getInitialCacheCapacity() {\n+        return initialCacheCapacity;\n+    }\n+\n+    public void setInitialCacheCapacity(int initialCacheCapacity) {\n+        this.initialCacheCapacity = initialCacheCapacity;\n+    }\n+\n+    @Description(\"Maximum capacity of the local cache used by the authorizer to avoid querying Open Policy Agent for every request. \" +", "originalCommit": "c65a17f52322eb4eddf29f6b88134a6e915ac79c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDAyMDM1Mw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3192#discussion_r440020353", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Description(\"The expiration of the records kept in the local cache to avoid querying Open Policy Agent for every request. \" +\n          \n          \n            \n                @Description(\"The expiration of the records kept in the local cache to avoid querying the Open Policy Agent for every request. \" +", "author": "PaulRMellor", "createdAt": "2020-06-15T08:43:56Z", "path": "api/src/main/java/io/strimzi/api/kafka/model/KafkaAuthorizationOpa.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Copyright Strimzi authors.\n+ * License: Apache License 2.0 (see the file LICENSE or http://apache.org/licenses/LICENSE-2.0.html).\n+ */\n+package io.strimzi.api.kafka.model;\n+\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonPropertyOrder;\n+import io.strimzi.crdgenerator.annotations.Description;\n+import io.strimzi.crdgenerator.annotations.DescriptionFile;\n+import io.strimzi.crdgenerator.annotations.Example;\n+import io.sundr.builder.annotations.Buildable;\n+import lombok.EqualsAndHashCode;\n+\n+import java.util.List;\n+\n+/**\n+ * Configures the broker authorization to use Open Policy Agent as an authorization and policy server.\n+ */\n+@DescriptionFile\n+@Buildable(\n+        editableEnabled = false,\n+        builderPackage = Constants.FABRIC8_KUBERNETES_API\n+)\n+@JsonInclude(JsonInclude.Include.NON_NULL)\n+@JsonPropertyOrder({\"type\", \"url\", \"allowOnError\", \"initialCacheCapacity\", \"maximumCacheSize\", \"expireAfterMs\", \"superUsers\"})\n+@EqualsAndHashCode\n+public class KafkaAuthorizationOpa extends KafkaAuthorization {\n+    private static final long serialVersionUID = 1L;\n+\n+    public static final String TYPE_OPA = \"opa\";\n+\n+    public static final String AUTHORIZER_CLASS_NAME = \"com.bisnode.kafka.authorization.OpaAuthorizer\";\n+\n+    private List<String> superUsers;\n+    private String url;\n+    private boolean allowOnError = false;\n+    private int initialCacheCapacity = 5000;\n+    private int maximumCacheSize = 50000;\n+    private long expireAfterMs = 3600000;\n+\n+    @Description(\"Must be `\" + TYPE_OPA + \"`\")\n+    @Override\n+    public String getType() {\n+        return TYPE_OPA;\n+    }\n+\n+    @Description(\"List of super users. Should contain list of user principals which should get unlimited access rights.\")\n+    @Example(\"- CN=my-user\\n\" +\n+             \"- CN=my-other-user\")\n+    @JsonInclude(JsonInclude.Include.NON_NULL)\n+    public List<String> getSuperUsers() {\n+        return superUsers;\n+    }\n+\n+    public void setSuperUsers(List<String> superUsers) {\n+        this.superUsers = superUsers;\n+    }\n+\n+    @Description(\"The URL used to connect to the Open Policy Agent server. \" +\n+            \"The URL has to include the policy which will be queried by the authorizer. \" +\n+            \"This option is required.\")\n+    @Example(\"http://opa:8181/v1/data/kafka/authz/allow\")\n+    @JsonInclude(JsonInclude.Include.NON_NULL)\n+    public String getUrl() {\n+        return url;\n+    }\n+\n+    public void setUrl(String url) {\n+        this.url = url;\n+    }\n+\n+    @Description(\"Defines whether Kafka client should be allowed or denied by default when the authorizer fails to query the Open Policy Agent (for example because it is temporarily unavailable). \" +\n+            \"Defaults to `false` - all actions will be denied.\")\n+    @JsonInclude(JsonInclude.Include.NON_NULL)\n+    public boolean isAllowOnError() {\n+        return allowOnError;\n+    }\n+\n+    public void setAllowOnError(boolean allowOnError) {\n+        this.allowOnError = allowOnError;\n+    }\n+\n+    @Description(\"Initial capacity of the local cache used by the authorizer to avoid querying Open Policy Agent for every request \" +\n+            \"Defaults to `5000`.\")\n+    @JsonInclude(JsonInclude.Include.NON_NULL)\n+    public int getInitialCacheCapacity() {\n+        return initialCacheCapacity;\n+    }\n+\n+    public void setInitialCacheCapacity(int initialCacheCapacity) {\n+        this.initialCacheCapacity = initialCacheCapacity;\n+    }\n+\n+    @Description(\"Maximum capacity of the local cache used by the authorizer to avoid querying Open Policy Agent for every request. \" +\n+            \"Defaults to `50000`.\")\n+    @JsonInclude(JsonInclude.Include.NON_NULL)\n+    public int getMaximumCacheSize() {\n+        return maximumCacheSize;\n+    }\n+\n+    public void setMaximumCacheSize(int maximumCacheSize) {\n+        this.maximumCacheSize = maximumCacheSize;\n+    }\n+\n+    @Description(\"The expiration of the records kept in the local cache to avoid querying Open Policy Agent for every request. \" +", "originalCommit": "c65a17f52322eb4eddf29f6b88134a6e915ac79c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDAyMTk4NQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3192#discussion_r440021985", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Defines whether Kafka client should be allowed or denied by default when the authorizer fails to query the Open Policy Agent (for example because it is temporarily unavailable).\n          \n          \n            \n            Defines whether a Kafka client should be allowed or denied by default when the authorizer fails to query the Open Policy Agent, for example, when it is temporarily unavailable.", "author": "PaulRMellor", "createdAt": "2020-06-15T08:46:42Z", "path": "documentation/api/io.strimzi.api.kafka.model.KafkaAuthorizationOpa.adoc", "diffHunk": "@@ -0,0 +1,45 @@\n+To use link:https://www.openpolicyagent.org/[Open Policy Agent^] authorization, set the `type` property in the `authorization` section to the value `opa`.\n+The Open Policy Agent authorizer has several configuration options:\n+\n+`url`::\n+The URL used to connect to the Open Policy Agent server.\n+The URL has to include the policy which will be queried by the authorizer.\n+**Required.**\n+\n+`allowOnError`::\n+Defines whether Kafka client should be allowed or denied by default when the authorizer fails to query the Open Policy Agent (for example because it is temporarily unavailable).", "originalCommit": "c65a17f52322eb4eddf29f6b88134a6e915ac79c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDAyMjE4Mg==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3192#discussion_r440022182", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Initial capacity of the local cache used by the authorizer to avoid querying Open Policy Agent for every request.\n          \n          \n            \n            Initial capacity of the local cache used by the authorizer to avoid querying the Open Policy Agent for every request.", "author": "PaulRMellor", "createdAt": "2020-06-15T08:47:01Z", "path": "documentation/api/io.strimzi.api.kafka.model.KafkaAuthorizationOpa.adoc", "diffHunk": "@@ -0,0 +1,45 @@\n+To use link:https://www.openpolicyagent.org/[Open Policy Agent^] authorization, set the `type` property in the `authorization` section to the value `opa`.\n+The Open Policy Agent authorizer has several configuration options:\n+\n+`url`::\n+The URL used to connect to the Open Policy Agent server.\n+The URL has to include the policy which will be queried by the authorizer.\n+**Required.**\n+\n+`allowOnError`::\n+Defines whether Kafka client should be allowed or denied by default when the authorizer fails to query the Open Policy Agent (for example because it is temporarily unavailable).\n+Defaults to `false` - all actions will be denied.\n+\n+`initialCacheCapacity`::\n+Initial capacity of the local cache used by the authorizer to avoid querying Open Policy Agent for every request.", "originalCommit": "c65a17f52322eb4eddf29f6b88134a6e915ac79c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDAyMjMzNg==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3192#discussion_r440022336", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Maximum capacity of the local cache used by the authorizer to avoid querying Open Policy Agent for every request.\n          \n          \n            \n            Maximum capacity of the local cache used by the authorizer to avoid querying the Open Policy Agent for every request.", "author": "PaulRMellor", "createdAt": "2020-06-15T08:47:15Z", "path": "documentation/api/io.strimzi.api.kafka.model.KafkaAuthorizationOpa.adoc", "diffHunk": "@@ -0,0 +1,45 @@\n+To use link:https://www.openpolicyagent.org/[Open Policy Agent^] authorization, set the `type` property in the `authorization` section to the value `opa`.\n+The Open Policy Agent authorizer has several configuration options:\n+\n+`url`::\n+The URL used to connect to the Open Policy Agent server.\n+The URL has to include the policy which will be queried by the authorizer.\n+**Required.**\n+\n+`allowOnError`::\n+Defines whether Kafka client should be allowed or denied by default when the authorizer fails to query the Open Policy Agent (for example because it is temporarily unavailable).\n+Defaults to `false` - all actions will be denied.\n+\n+`initialCacheCapacity`::\n+Initial capacity of the local cache used by the authorizer to avoid querying Open Policy Agent for every request.\n+Defaults to `5000`.\n+\n+`maximumCacheSize`::\n+Maximum capacity of the local cache used by the authorizer to avoid querying Open Policy Agent for every request.", "originalCommit": "c65a17f52322eb4eddf29f6b88134a6e915ac79c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDAyMjQ2NQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3192#discussion_r440022465", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The expiration of the records kept in the local cache to avoid querying Open Policy Agent for every request.\n          \n          \n            \n            The expiration of the records kept in the local cache to avoid querying the Open Policy Agent for every request.", "author": "PaulRMellor", "createdAt": "2020-06-15T08:47:29Z", "path": "documentation/api/io.strimzi.api.kafka.model.KafkaAuthorizationOpa.adoc", "diffHunk": "@@ -0,0 +1,45 @@\n+To use link:https://www.openpolicyagent.org/[Open Policy Agent^] authorization, set the `type` property in the `authorization` section to the value `opa`.\n+The Open Policy Agent authorizer has several configuration options:\n+\n+`url`::\n+The URL used to connect to the Open Policy Agent server.\n+The URL has to include the policy which will be queried by the authorizer.\n+**Required.**\n+\n+`allowOnError`::\n+Defines whether Kafka client should be allowed or denied by default when the authorizer fails to query the Open Policy Agent (for example because it is temporarily unavailable).\n+Defaults to `false` - all actions will be denied.\n+\n+`initialCacheCapacity`::\n+Initial capacity of the local cache used by the authorizer to avoid querying Open Policy Agent for every request.\n+Defaults to `5000`.\n+\n+`maximumCacheSize`::\n+Maximum capacity of the local cache used by the authorizer to avoid querying Open Policy Agent for every request.\n+Defaults to `50000`.\n+\n+`expireAfterMs`::\n+The expiration of the records kept in the local cache to avoid querying Open Policy Agent for every request.", "originalCommit": "c65a17f52322eb4eddf29f6b88134a6e915ac79c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDAyMzkyMA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3192#discussion_r440023920", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Defines how often will the cached authorization decisions will expire and be reloaded from the Open Policy Agent server.\n          \n          \n            \n            Defines how often the cached authorization decisions are reloaded from the Open Policy Agent server.", "author": "PaulRMellor", "createdAt": "2020-06-15T08:50:04Z", "path": "documentation/api/io.strimzi.api.kafka.model.KafkaAuthorizationOpa.adoc", "diffHunk": "@@ -0,0 +1,45 @@\n+To use link:https://www.openpolicyagent.org/[Open Policy Agent^] authorization, set the `type` property in the `authorization` section to the value `opa`.\n+The Open Policy Agent authorizer has several configuration options:\n+\n+`url`::\n+The URL used to connect to the Open Policy Agent server.\n+The URL has to include the policy which will be queried by the authorizer.\n+**Required.**\n+\n+`allowOnError`::\n+Defines whether Kafka client should be allowed or denied by default when the authorizer fails to query the Open Policy Agent (for example because it is temporarily unavailable).\n+Defaults to `false` - all actions will be denied.\n+\n+`initialCacheCapacity`::\n+Initial capacity of the local cache used by the authorizer to avoid querying Open Policy Agent for every request.\n+Defaults to `5000`.\n+\n+`maximumCacheSize`::\n+Maximum capacity of the local cache used by the authorizer to avoid querying Open Policy Agent for every request.\n+Defaults to `50000`.\n+\n+`expireAfterMs`::\n+The expiration of the records kept in the local cache to avoid querying Open Policy Agent for every request.\n+Defines how often will the cached authorization decisions will expire and be reloaded from the Open Policy Agent server.", "originalCommit": "c65a17f52322eb4eddf29f6b88134a6e915ac79c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDAyNTAwOA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3192#discussion_r440025008", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            A list of user principals which will be treated as super users and will be always allowed without querying the open Policy Agent policy.\n          \n          \n            \n            A list of user principals treated as super users, so that they are always allowed without querying the open Policy Agent policy.", "author": "PaulRMellor", "createdAt": "2020-06-15T08:51:47Z", "path": "documentation/api/io.strimzi.api.kafka.model.KafkaAuthorizationOpa.adoc", "diffHunk": "@@ -0,0 +1,45 @@\n+To use link:https://www.openpolicyagent.org/[Open Policy Agent^] authorization, set the `type` property in the `authorization` section to the value `opa`.\n+The Open Policy Agent authorizer has several configuration options:\n+\n+`url`::\n+The URL used to connect to the Open Policy Agent server.\n+The URL has to include the policy which will be queried by the authorizer.\n+**Required.**\n+\n+`allowOnError`::\n+Defines whether Kafka client should be allowed or denied by default when the authorizer fails to query the Open Policy Agent (for example because it is temporarily unavailable).\n+Defaults to `false` - all actions will be denied.\n+\n+`initialCacheCapacity`::\n+Initial capacity of the local cache used by the authorizer to avoid querying Open Policy Agent for every request.\n+Defaults to `5000`.\n+\n+`maximumCacheSize`::\n+Maximum capacity of the local cache used by the authorizer to avoid querying Open Policy Agent for every request.\n+Defaults to `50000`.\n+\n+`expireAfterMs`::\n+The expiration of the records kept in the local cache to avoid querying Open Policy Agent for every request.\n+Defines how often will the cached authorization decisions will expire and be reloaded from the Open Policy Agent server.\n+In milliseconds.\n+Defaults to `3600000` milliseconds (1 hour).\n+\n+`superUsers`::\n+A list of user principals which will be treated as super users and will be always allowed without querying the open Policy Agent policy.", "originalCommit": "c65a17f52322eb4eddf29f6b88134a6e915ac79c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDAyNTg5OQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3192#discussion_r440025899", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            |url                   1.2+<.<|The URL used to connect to the Open Policy Agent server. The URL has to include the policy which will be queried by the authorizer. This option is required.\n          \n          \n            \n            |url                   1.2+<.<|(Required) The URL used to connect to the Open Policy Agent server. The URL has to include the policy which will be queried by the authorizer.", "author": "PaulRMellor", "createdAt": "2020-06-15T08:53:10Z", "path": "documentation/modules/appendix_crds.adoc", "diffHunk": "@@ -740,13 +740,41 @@ It must have the value `simple` for the type `KafkaAuthorizationSimple`.\n |string array\n |====\n \n+[id='type-KafkaAuthorizationOpa-{context}']\n+### `KafkaAuthorizationOpa` schema reference\n+\n+Used in: xref:type-KafkaClusterSpec-{context}[`KafkaClusterSpec`]\n+\n+include::../api/io.strimzi.api.kafka.model.KafkaAuthorizationOpa.adoc[leveloffset=+1]\n+\n+The `type` property is a discriminator that distinguishes the use of the type `KafkaAuthorizationOpa` from xref:type-KafkaAuthorizationSimple-{context}[`KafkaAuthorizationSimple`], xref:type-KafkaAuthorizationKeycloak-{context}[`KafkaAuthorizationKeycloak`].\n+It must have the value `opa` for the type `KafkaAuthorizationOpa`.\n+[options=\"header\"]\n+|====\n+|Property                     |Description\n+|type                  1.2+<.<|Must be `opa`.\n+|string\n+|url                   1.2+<.<|The URL used to connect to the Open Policy Agent server. The URL has to include the policy which will be queried by the authorizer. This option is required.", "originalCommit": "c65a17f52322eb4eddf29f6b88134a6e915ac79c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDAyNjMzMQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3192#discussion_r440026331", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            |allowOnError          1.2+<.<|Defines whether Kafka client should be allowed or denied by default when the authorizer fails to query the Open Policy Agent (for example because it is temporarily unavailable). Defaults to `false` - all actions will be denied.\n          \n          \n            \n            |allowOnError          1.2+<.<|Defines whether a Kafka client should be allowed or denied by default when the authorizer fails to query the Open Policy Agent, for example, when it is temporarily unavailable. Defaults to `false` - all actions will be denied.", "author": "PaulRMellor", "createdAt": "2020-06-15T08:53:58Z", "path": "documentation/modules/appendix_crds.adoc", "diffHunk": "@@ -740,13 +740,41 @@ It must have the value `simple` for the type `KafkaAuthorizationSimple`.\n |string array\n |====\n \n+[id='type-KafkaAuthorizationOpa-{context}']\n+### `KafkaAuthorizationOpa` schema reference\n+\n+Used in: xref:type-KafkaClusterSpec-{context}[`KafkaClusterSpec`]\n+\n+include::../api/io.strimzi.api.kafka.model.KafkaAuthorizationOpa.adoc[leveloffset=+1]\n+\n+The `type` property is a discriminator that distinguishes the use of the type `KafkaAuthorizationOpa` from xref:type-KafkaAuthorizationSimple-{context}[`KafkaAuthorizationSimple`], xref:type-KafkaAuthorizationKeycloak-{context}[`KafkaAuthorizationKeycloak`].\n+It must have the value `opa` for the type `KafkaAuthorizationOpa`.\n+[options=\"header\"]\n+|====\n+|Property                     |Description\n+|type                  1.2+<.<|Must be `opa`.\n+|string\n+|url                   1.2+<.<|The URL used to connect to the Open Policy Agent server. The URL has to include the policy which will be queried by the authorizer. This option is required.\n+|string\n+|allowOnError          1.2+<.<|Defines whether Kafka client should be allowed or denied by default when the authorizer fails to query the Open Policy Agent (for example because it is temporarily unavailable). Defaults to `false` - all actions will be denied.", "originalCommit": "c65a17f52322eb4eddf29f6b88134a6e915ac79c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDAyNjQ2Mw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3192#discussion_r440026463", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            |initialCacheCapacity  1.2+<.<|Initial capacity of the local cache used by the authorizer to avoid querying Open Policy Agent for every request Defaults to `5000`.\n          \n          \n            \n            |initialCacheCapacity  1.2+<.<|Initial capacity of the local cache used by the authorizer to avoid querying the Open Policy Agent for every request. Defaults to `5000`.", "author": "PaulRMellor", "createdAt": "2020-06-15T08:54:14Z", "path": "documentation/modules/appendix_crds.adoc", "diffHunk": "@@ -740,13 +740,41 @@ It must have the value `simple` for the type `KafkaAuthorizationSimple`.\n |string array\n |====\n \n+[id='type-KafkaAuthorizationOpa-{context}']\n+### `KafkaAuthorizationOpa` schema reference\n+\n+Used in: xref:type-KafkaClusterSpec-{context}[`KafkaClusterSpec`]\n+\n+include::../api/io.strimzi.api.kafka.model.KafkaAuthorizationOpa.adoc[leveloffset=+1]\n+\n+The `type` property is a discriminator that distinguishes the use of the type `KafkaAuthorizationOpa` from xref:type-KafkaAuthorizationSimple-{context}[`KafkaAuthorizationSimple`], xref:type-KafkaAuthorizationKeycloak-{context}[`KafkaAuthorizationKeycloak`].\n+It must have the value `opa` for the type `KafkaAuthorizationOpa`.\n+[options=\"header\"]\n+|====\n+|Property                     |Description\n+|type                  1.2+<.<|Must be `opa`.\n+|string\n+|url                   1.2+<.<|The URL used to connect to the Open Policy Agent server. The URL has to include the policy which will be queried by the authorizer. This option is required.\n+|string\n+|allowOnError          1.2+<.<|Defines whether Kafka client should be allowed or denied by default when the authorizer fails to query the Open Policy Agent (for example because it is temporarily unavailable). Defaults to `false` - all actions will be denied.\n+|boolean\n+|initialCacheCapacity  1.2+<.<|Initial capacity of the local cache used by the authorizer to avoid querying Open Policy Agent for every request Defaults to `5000`.", "originalCommit": "c65a17f52322eb4eddf29f6b88134a6e915ac79c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDAyNjc3OA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3192#discussion_r440026778", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            |maximumCacheSize      1.2+<.<|Maximum capacity of the local cache used by the authorizer to avoid querying Open Policy Agent for every request. Defaults to `50000`.\n          \n          \n            \n            |maximumCacheSize      1.2+<.<|Maximum capacity of the local cache used by the authorizer to avoid querying the Open Policy Agent for every request. Defaults to `50000`.", "author": "PaulRMellor", "createdAt": "2020-06-15T08:54:46Z", "path": "documentation/modules/appendix_crds.adoc", "diffHunk": "@@ -740,13 +740,41 @@ It must have the value `simple` for the type `KafkaAuthorizationSimple`.\n |string array\n |====\n \n+[id='type-KafkaAuthorizationOpa-{context}']\n+### `KafkaAuthorizationOpa` schema reference\n+\n+Used in: xref:type-KafkaClusterSpec-{context}[`KafkaClusterSpec`]\n+\n+include::../api/io.strimzi.api.kafka.model.KafkaAuthorizationOpa.adoc[leveloffset=+1]\n+\n+The `type` property is a discriminator that distinguishes the use of the type `KafkaAuthorizationOpa` from xref:type-KafkaAuthorizationSimple-{context}[`KafkaAuthorizationSimple`], xref:type-KafkaAuthorizationKeycloak-{context}[`KafkaAuthorizationKeycloak`].\n+It must have the value `opa` for the type `KafkaAuthorizationOpa`.\n+[options=\"header\"]\n+|====\n+|Property                     |Description\n+|type                  1.2+<.<|Must be `opa`.\n+|string\n+|url                   1.2+<.<|The URL used to connect to the Open Policy Agent server. The URL has to include the policy which will be queried by the authorizer. This option is required.\n+|string\n+|allowOnError          1.2+<.<|Defines whether Kafka client should be allowed or denied by default when the authorizer fails to query the Open Policy Agent (for example because it is temporarily unavailable). Defaults to `false` - all actions will be denied.\n+|boolean\n+|initialCacheCapacity  1.2+<.<|Initial capacity of the local cache used by the authorizer to avoid querying Open Policy Agent for every request Defaults to `5000`.\n+|integer\n+|maximumCacheSize      1.2+<.<|Maximum capacity of the local cache used by the authorizer to avoid querying Open Policy Agent for every request. Defaults to `50000`.", "originalCommit": "c65a17f52322eb4eddf29f6b88134a6e915ac79c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDAyNzE5OQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3192#discussion_r440027199", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            |expireAfterMs         1.2+<.<|The expiration of the records kept in the local cache to avoid querying Open Policy Agent for every request. Defines how often will the cached authorization decisions will expire and be reloaded from the Open Policy Agent server. In milliseconds. Defaults to `3600000`.\n          \n          \n            \n            |expireAfterMs         1.2+<.<|The expiration of the records kept in the local cache to avoid querying the Open Policy Agent for every request. Defines how often the cached authorization decisions are reloaded from the Open Policy Agent server. In milliseconds. Defaults to `3600000`.", "author": "PaulRMellor", "createdAt": "2020-06-15T08:55:27Z", "path": "documentation/modules/appendix_crds.adoc", "diffHunk": "@@ -740,13 +740,41 @@ It must have the value `simple` for the type `KafkaAuthorizationSimple`.\n |string array\n |====\n \n+[id='type-KafkaAuthorizationOpa-{context}']\n+### `KafkaAuthorizationOpa` schema reference\n+\n+Used in: xref:type-KafkaClusterSpec-{context}[`KafkaClusterSpec`]\n+\n+include::../api/io.strimzi.api.kafka.model.KafkaAuthorizationOpa.adoc[leveloffset=+1]\n+\n+The `type` property is a discriminator that distinguishes the use of the type `KafkaAuthorizationOpa` from xref:type-KafkaAuthorizationSimple-{context}[`KafkaAuthorizationSimple`], xref:type-KafkaAuthorizationKeycloak-{context}[`KafkaAuthorizationKeycloak`].\n+It must have the value `opa` for the type `KafkaAuthorizationOpa`.\n+[options=\"header\"]\n+|====\n+|Property                     |Description\n+|type                  1.2+<.<|Must be `opa`.\n+|string\n+|url                   1.2+<.<|The URL used to connect to the Open Policy Agent server. The URL has to include the policy which will be queried by the authorizer. This option is required.\n+|string\n+|allowOnError          1.2+<.<|Defines whether Kafka client should be allowed or denied by default when the authorizer fails to query the Open Policy Agent (for example because it is temporarily unavailable). Defaults to `false` - all actions will be denied.\n+|boolean\n+|initialCacheCapacity  1.2+<.<|Initial capacity of the local cache used by the authorizer to avoid querying Open Policy Agent for every request Defaults to `5000`.\n+|integer\n+|maximumCacheSize      1.2+<.<|Maximum capacity of the local cache used by the authorizer to avoid querying Open Policy Agent for every request. Defaults to `50000`.\n+|integer\n+|expireAfterMs         1.2+<.<|The expiration of the records kept in the local cache to avoid querying Open Policy Agent for every request. Defines how often will the cached authorization decisions will expire and be reloaded from the Open Policy Agent server. In milliseconds. Defaults to `3600000`.", "originalCommit": "c65a17f52322eb4eddf29f6b88134a6e915ac79c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDAyODI3OA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3192#discussion_r440028278", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            |superUsers            1.2+<.<|List of super users. Should contain list of user principals which should get unlimited access rights.\n          \n          \n            \n            |superUsers            1.2+<.<|List of super users, which is specifically a list of user principals that have unlimited access rights.", "author": "PaulRMellor", "createdAt": "2020-06-15T08:57:10Z", "path": "documentation/modules/appendix_crds.adoc", "diffHunk": "@@ -740,13 +740,41 @@ It must have the value `simple` for the type `KafkaAuthorizationSimple`.\n |string array\n |====\n \n+[id='type-KafkaAuthorizationOpa-{context}']\n+### `KafkaAuthorizationOpa` schema reference\n+\n+Used in: xref:type-KafkaClusterSpec-{context}[`KafkaClusterSpec`]\n+\n+include::../api/io.strimzi.api.kafka.model.KafkaAuthorizationOpa.adoc[leveloffset=+1]\n+\n+The `type` property is a discriminator that distinguishes the use of the type `KafkaAuthorizationOpa` from xref:type-KafkaAuthorizationSimple-{context}[`KafkaAuthorizationSimple`], xref:type-KafkaAuthorizationKeycloak-{context}[`KafkaAuthorizationKeycloak`].\n+It must have the value `opa` for the type `KafkaAuthorizationOpa`.\n+[options=\"header\"]\n+|====\n+|Property                     |Description\n+|type                  1.2+<.<|Must be `opa`.\n+|string\n+|url                   1.2+<.<|The URL used to connect to the Open Policy Agent server. The URL has to include the policy which will be queried by the authorizer. This option is required.\n+|string\n+|allowOnError          1.2+<.<|Defines whether Kafka client should be allowed or denied by default when the authorizer fails to query the Open Policy Agent (for example because it is temporarily unavailable). Defaults to `false` - all actions will be denied.\n+|boolean\n+|initialCacheCapacity  1.2+<.<|Initial capacity of the local cache used by the authorizer to avoid querying Open Policy Agent for every request Defaults to `5000`.\n+|integer\n+|maximumCacheSize      1.2+<.<|Maximum capacity of the local cache used by the authorizer to avoid querying Open Policy Agent for every request. Defaults to `50000`.\n+|integer\n+|expireAfterMs         1.2+<.<|The expiration of the records kept in the local cache to avoid querying Open Policy Agent for every request. Defines how often will the cached authorization decisions will expire and be reloaded from the Open Policy Agent server. In milliseconds. Defaults to `3600000`.\n+|integer\n+|superUsers            1.2+<.<|List of super users. Should contain list of user principals which should get unlimited access rights.", "originalCommit": "c65a17f52322eb4eddf29f6b88134a6e915ac79c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDAyOTEyOQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3192#discussion_r440029129", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                  description: Defines whether Kafka client should be allowed\n          \n          \n            \n                                  description: Defines whether a Kafka client should be allowed", "author": "PaulRMellor", "createdAt": "2020-06-15T08:58:29Z", "path": "helm-charts/strimzi-kafka-operator/templates/040-Crd-kafka.yaml", "diffHunk": "@@ -963,6 +963,12 @@ spec:\n                 authorization:\n                   type: object\n                   properties:\n+                    allowOnError:\n+                      type: boolean\n+                      description: Defines whether Kafka client should be allowed", "originalCommit": "c65a17f52322eb4eddf29f6b88134a6e915ac79c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDAyOTQ3Ng==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3192#discussion_r440029476", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    Open Policy Agent (for example because it is temporarily unavailable).\n          \n          \n            \n                                    Open Policy Agent, for example, when it is temporarily unavailable.", "author": "PaulRMellor", "createdAt": "2020-06-15T08:59:03Z", "path": "helm-charts/strimzi-kafka-operator/templates/040-Crd-kafka.yaml", "diffHunk": "@@ -963,6 +963,12 @@ spec:\n                 authorization:\n                   type: object\n                   properties:\n+                    allowOnError:\n+                      type: boolean\n+                      description: Defines whether Kafka client should be allowed\n+                        or denied by default when the authorizer fails to query the\n+                        Open Policy Agent (for example because it is temporarily unavailable).", "originalCommit": "c65a17f52322eb4eddf29f6b88134a6e915ac79c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDAyOTcwMw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3192#discussion_r440029703", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    cache to avoid querying Open Policy Agent for every request.\n          \n          \n            \n                                    cache to avoid querying the Open Policy Agent for every request.", "author": "PaulRMellor", "createdAt": "2020-06-15T08:59:25Z", "path": "helm-charts/strimzi-kafka-operator/templates/040-Crd-kafka.yaml", "diffHunk": "@@ -977,6 +983,23 @@ spec:\n                       type: boolean\n                       description: Enable or disable TLS hostname verification. Default\n                         value is `false`.\n+                    expireAfterMs:\n+                      type: integer\n+                      description: The expiration of the records kept in the local\n+                        cache to avoid querying Open Policy Agent for every request.", "originalCommit": "c65a17f52322eb4eddf29f6b88134a6e915ac79c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDAzMDM4Mw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3192#discussion_r440030383", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        \"Defines how often will the cached authorization decisions will expire and be reloaded from the Open Policy Agent server. \" +\n          \n          \n            \n                        \"Defines how often the cached authorization decisions are reloaded from the Open Policy Agent server. \" +", "author": "PaulRMellor", "createdAt": "2020-06-15T09:00:33Z", "path": "api/src/main/java/io/strimzi/api/kafka/model/KafkaAuthorizationOpa.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Copyright Strimzi authors.\n+ * License: Apache License 2.0 (see the file LICENSE or http://apache.org/licenses/LICENSE-2.0.html).\n+ */\n+package io.strimzi.api.kafka.model;\n+\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonPropertyOrder;\n+import io.strimzi.crdgenerator.annotations.Description;\n+import io.strimzi.crdgenerator.annotations.DescriptionFile;\n+import io.strimzi.crdgenerator.annotations.Example;\n+import io.sundr.builder.annotations.Buildable;\n+import lombok.EqualsAndHashCode;\n+\n+import java.util.List;\n+\n+/**\n+ * Configures the broker authorization to use Open Policy Agent as an authorization and policy server.\n+ */\n+@DescriptionFile\n+@Buildable(\n+        editableEnabled = false,\n+        builderPackage = Constants.FABRIC8_KUBERNETES_API\n+)\n+@JsonInclude(JsonInclude.Include.NON_NULL)\n+@JsonPropertyOrder({\"type\", \"url\", \"allowOnError\", \"initialCacheCapacity\", \"maximumCacheSize\", \"expireAfterMs\", \"superUsers\"})\n+@EqualsAndHashCode\n+public class KafkaAuthorizationOpa extends KafkaAuthorization {\n+    private static final long serialVersionUID = 1L;\n+\n+    public static final String TYPE_OPA = \"opa\";\n+\n+    public static final String AUTHORIZER_CLASS_NAME = \"com.bisnode.kafka.authorization.OpaAuthorizer\";\n+\n+    private List<String> superUsers;\n+    private String url;\n+    private boolean allowOnError = false;\n+    private int initialCacheCapacity = 5000;\n+    private int maximumCacheSize = 50000;\n+    private long expireAfterMs = 3600000;\n+\n+    @Description(\"Must be `\" + TYPE_OPA + \"`\")\n+    @Override\n+    public String getType() {\n+        return TYPE_OPA;\n+    }\n+\n+    @Description(\"List of super users. Should contain list of user principals which should get unlimited access rights.\")\n+    @Example(\"- CN=my-user\\n\" +\n+             \"- CN=my-other-user\")\n+    @JsonInclude(JsonInclude.Include.NON_NULL)\n+    public List<String> getSuperUsers() {\n+        return superUsers;\n+    }\n+\n+    public void setSuperUsers(List<String> superUsers) {\n+        this.superUsers = superUsers;\n+    }\n+\n+    @Description(\"The URL used to connect to the Open Policy Agent server. \" +\n+            \"The URL has to include the policy which will be queried by the authorizer. \" +\n+            \"This option is required.\")\n+    @Example(\"http://opa:8181/v1/data/kafka/authz/allow\")\n+    @JsonInclude(JsonInclude.Include.NON_NULL)\n+    public String getUrl() {\n+        return url;\n+    }\n+\n+    public void setUrl(String url) {\n+        this.url = url;\n+    }\n+\n+    @Description(\"Defines whether Kafka client should be allowed or denied by default when the authorizer fails to query the Open Policy Agent (for example because it is temporarily unavailable). \" +\n+            \"Defaults to `false` - all actions will be denied.\")\n+    @JsonInclude(JsonInclude.Include.NON_NULL)\n+    public boolean isAllowOnError() {\n+        return allowOnError;\n+    }\n+\n+    public void setAllowOnError(boolean allowOnError) {\n+        this.allowOnError = allowOnError;\n+    }\n+\n+    @Description(\"Initial capacity of the local cache used by the authorizer to avoid querying Open Policy Agent for every request \" +\n+            \"Defaults to `5000`.\")\n+    @JsonInclude(JsonInclude.Include.NON_NULL)\n+    public int getInitialCacheCapacity() {\n+        return initialCacheCapacity;\n+    }\n+\n+    public void setInitialCacheCapacity(int initialCacheCapacity) {\n+        this.initialCacheCapacity = initialCacheCapacity;\n+    }\n+\n+    @Description(\"Maximum capacity of the local cache used by the authorizer to avoid querying Open Policy Agent for every request. \" +\n+            \"Defaults to `50000`.\")\n+    @JsonInclude(JsonInclude.Include.NON_NULL)\n+    public int getMaximumCacheSize() {\n+        return maximumCacheSize;\n+    }\n+\n+    public void setMaximumCacheSize(int maximumCacheSize) {\n+        this.maximumCacheSize = maximumCacheSize;\n+    }\n+\n+    @Description(\"The expiration of the records kept in the local cache to avoid querying Open Policy Agent for every request. \" +\n+            \"Defines how often will the cached authorization decisions will expire and be reloaded from the Open Policy Agent server. \" +", "originalCommit": "c65a17f52322eb4eddf29f6b88134a6e915ac79c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDAzMDc4NA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3192#discussion_r440030784", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    will expire and be reloaded from the Open Policy Agent server.\n          \n          \n            \n                                    are reloaded from the Open Policy Agent server.", "author": "PaulRMellor", "createdAt": "2020-06-15T09:01:09Z", "path": "helm-charts/strimzi-kafka-operator/templates/040-Crd-kafka.yaml", "diffHunk": "@@ -977,6 +983,23 @@ spec:\n                       type: boolean\n                       description: Enable or disable TLS hostname verification. Default\n                         value is `false`.\n+                    expireAfterMs:\n+                      type: integer\n+                      description: The expiration of the records kept in the local\n+                        cache to avoid querying Open Policy Agent for every request.\n+                        Defines how often will the cached authorization decisions\n+                        will expire and be reloaded from the Open Policy Agent server.", "originalCommit": "c65a17f52322eb4eddf29f6b88134a6e915ac79c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDAzMDk2MA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3192#discussion_r440030960", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    authorizer to avoid querying Open Policy Agent for every request\n          \n          \n            \n                                    authorizer to avoid querying the Open Policy Agent for every request.", "author": "PaulRMellor", "createdAt": "2020-06-15T09:01:27Z", "path": "helm-charts/strimzi-kafka-operator/templates/040-Crd-kafka.yaml", "diffHunk": "@@ -977,6 +983,23 @@ spec:\n                       type: boolean\n                       description: Enable or disable TLS hostname verification. Default\n                         value is `false`.\n+                    expireAfterMs:\n+                      type: integer\n+                      description: The expiration of the records kept in the local\n+                        cache to avoid querying Open Policy Agent for every request.\n+                        Defines how often will the cached authorization decisions\n+                        will expire and be reloaded from the Open Policy Agent server.\n+                        In milliseconds. Defaults to `3600000`.\n+                    initialCacheCapacity:\n+                      type: integer\n+                      description: Initial capacity of the local cache used by the\n+                        authorizer to avoid querying Open Policy Agent for every request", "originalCommit": "c65a17f52322eb4eddf29f6b88134a6e915ac79c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDAzMTQxNg==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3192#discussion_r440031416", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    authorizer to avoid querying Open Policy Agent for every request.\n          \n          \n            \n                                    authorizer to avoid querying the Open Policy Agent for every request.", "author": "PaulRMellor", "createdAt": "2020-06-15T09:02:14Z", "path": "helm-charts/strimzi-kafka-operator/templates/040-Crd-kafka.yaml", "diffHunk": "@@ -977,6 +983,23 @@ spec:\n                       type: boolean\n                       description: Enable or disable TLS hostname verification. Default\n                         value is `false`.\n+                    expireAfterMs:\n+                      type: integer\n+                      description: The expiration of the records kept in the local\n+                        cache to avoid querying Open Policy Agent for every request.\n+                        Defines how often will the cached authorization decisions\n+                        will expire and be reloaded from the Open Policy Agent server.\n+                        In milliseconds. Defaults to `3600000`.\n+                    initialCacheCapacity:\n+                      type: integer\n+                      description: Initial capacity of the local cache used by the\n+                        authorizer to avoid querying Open Policy Agent for every request\n+                        Defaults to `5000`.\n+                    maximumCacheSize:\n+                      type: integer\n+                      description: Maximum capacity of the local cache used by the\n+                        authorizer to avoid querying Open Policy Agent for every request.", "originalCommit": "c65a17f52322eb4eddf29f6b88134a6e915ac79c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDAzMTgyMw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3192#discussion_r440031823", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    Keycloak Authorization Services for authorization. `opa` is\n          \n          \n            \n                                    using Open Policy Agent based authorization.\n          \n          \n            \n                                    Keycloak Authorization Services for authorization. `opa`\n          \n          \n            \n                                    uses Open Policy Agent based authorization.", "author": "PaulRMellor", "createdAt": "2020-06-15T09:02:52Z", "path": "helm-charts/strimzi-kafka-operator/templates/040-Crd-kafka.yaml", "diffHunk": "@@ -1006,10 +1029,20 @@ spec:\n                       type: string\n                       enum:\n                       - simple\n+                      - opa\n                       - keycloak\n-                      description: Authorization type. Currently the only supported\n-                        type is `simple`. `simple` authorization type uses Kafka's\n-                        `kafka.security.auth.SimpleAclAuthorizer` class for authorization.\n+                      description: Authorization type. Currently the supported types\n+                        are `simple`, `keycloak`, and `opa`. `simple` authorization\n+                        type uses Kafka's `kafka.security.auth.SimpleAclAuthorizer`\n+                        class for authorization. `keycloak` authorization type uses\n+                        Keycloak Authorization Services for authorization. `opa` is\n+                        using Open Policy Agent based authorization.", "originalCommit": "c65a17f52322eb4eddf29f6b88134a6e915ac79c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDAzMjgxNg==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3192#discussion_r440032816", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                  description: The URL used to connect to the Open Policy Agent\n          \n          \n            \n                                  description: (Required) The URL used to connect to the Open Policy Agent", "author": "PaulRMellor", "createdAt": "2020-06-15T09:04:37Z", "path": "helm-charts/strimzi-kafka-operator/templates/040-Crd-kafka.yaml", "diffHunk": "@@ -1006,10 +1029,20 @@ spec:\n                       type: string\n                       enum:\n                       - simple\n+                      - opa\n                       - keycloak\n-                      description: Authorization type. Currently the only supported\n-                        type is `simple`. `simple` authorization type uses Kafka's\n-                        `kafka.security.auth.SimpleAclAuthorizer` class for authorization.\n+                      description: Authorization type. Currently the supported types\n+                        are `simple`, `keycloak`, and `opa`. `simple` authorization\n+                        type uses Kafka's `kafka.security.auth.SimpleAclAuthorizer`\n+                        class for authorization. `keycloak` authorization type uses\n+                        Keycloak Authorization Services for authorization. `opa` is\n+                        using Open Policy Agent based authorization.\n+                    url:\n+                      type: string\n+                      example: http://opa:8181/v1/data/kafka/authz/allow\n+                      description: The URL used to connect to the Open Policy Agent", "originalCommit": "c65a17f52322eb4eddf29f6b88134a6e915ac79c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDAzMjk5NA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3192#discussion_r440032994", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    by the authorizer. This option is required.\n          \n          \n            \n                                    by the authorizer.", "author": "PaulRMellor", "createdAt": "2020-06-15T09:04:58Z", "path": "helm-charts/strimzi-kafka-operator/templates/040-Crd-kafka.yaml", "diffHunk": "@@ -1006,10 +1029,20 @@ spec:\n                       type: string\n                       enum:\n                       - simple\n+                      - opa\n                       - keycloak\n-                      description: Authorization type. Currently the only supported\n-                        type is `simple`. `simple` authorization type uses Kafka's\n-                        `kafka.security.auth.SimpleAclAuthorizer` class for authorization.\n+                      description: Authorization type. Currently the supported types\n+                        are `simple`, `keycloak`, and `opa`. `simple` authorization\n+                        type uses Kafka's `kafka.security.auth.SimpleAclAuthorizer`\n+                        class for authorization. `keycloak` authorization type uses\n+                        Keycloak Authorization Services for authorization. `opa` is\n+                        using Open Policy Agent based authorization.\n+                    url:\n+                      type: string\n+                      example: http://opa:8181/v1/data/kafka/authz/allow\n+                      description: The URL used to connect to the Open Policy Agent\n+                        server. The URL has to include the policy which will be queried\n+                        by the authorizer. This option is required.", "originalCommit": "c65a17f52322eb4eddf29f6b88134a6e915ac79c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDAzMzI3NQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3192#discussion_r440033275", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    Open Policy Agent (for example because it is temporarily unavailable).\n          \n          \n            \n                                    Open Policy Agent, for example, when it is temporarily unavailable.", "author": "PaulRMellor", "createdAt": "2020-06-15T09:05:26Z", "path": "install/cluster-operator/040-Crd-kafka.yaml", "diffHunk": "@@ -958,6 +958,12 @@ spec:\n                 authorization:\n                   type: object\n                   properties:\n+                    allowOnError:\n+                      type: boolean\n+                      description: Defines whether Kafka client should be allowed\n+                        or denied by default when the authorizer fails to query the\n+                        Open Policy Agent (for example because it is temporarily unavailable).", "originalCommit": "c65a17f52322eb4eddf29f6b88134a6e915ac79c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDAzMzc0MQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3192#discussion_r440033741", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    Defines how often will the cached authorization decisions\n          \n          \n            \n                                    will expire and be reloaded from the Open Policy Agent server.\n          \n          \n            \n                                    Defines how often the cached authorization decisions\n          \n          \n            \n                                    are reloaded from the Open Policy Agent server.", "author": "PaulRMellor", "createdAt": "2020-06-15T09:06:10Z", "path": "install/cluster-operator/040-Crd-kafka.yaml", "diffHunk": "@@ -972,6 +978,23 @@ spec:\n                       type: boolean\n                       description: Enable or disable TLS hostname verification. Default\n                         value is `false`.\n+                    expireAfterMs:\n+                      type: integer\n+                      description: The expiration of the records kept in the local\n+                        cache to avoid querying Open Policy Agent for every request.\n+                        Defines how often will the cached authorization decisions\n+                        will expire and be reloaded from the Open Policy Agent server.", "originalCommit": "c65a17f52322eb4eddf29f6b88134a6e915ac79c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDAzMzg3Nw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3192#discussion_r440033877", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    authorizer to avoid querying Open Policy Agent for every request\n          \n          \n            \n                                    authorizer to avoid querying the Open Policy Agent for every request", "author": "PaulRMellor", "createdAt": "2020-06-15T09:06:26Z", "path": "install/cluster-operator/040-Crd-kafka.yaml", "diffHunk": "@@ -972,6 +978,23 @@ spec:\n                       type: boolean\n                       description: Enable or disable TLS hostname verification. Default\n                         value is `false`.\n+                    expireAfterMs:\n+                      type: integer\n+                      description: The expiration of the records kept in the local\n+                        cache to avoid querying Open Policy Agent for every request.\n+                        Defines how often will the cached authorization decisions\n+                        will expire and be reloaded from the Open Policy Agent server.\n+                        In milliseconds. Defaults to `3600000`.\n+                    initialCacheCapacity:\n+                      type: integer\n+                      description: Initial capacity of the local cache used by the\n+                        authorizer to avoid querying Open Policy Agent for every request", "originalCommit": "c65a17f52322eb4eddf29f6b88134a6e915ac79c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDAzNDA2Mw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3192#discussion_r440034063", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    authorizer to avoid querying Open Policy Agent for every request.\n          \n          \n            \n                                    authorizer to avoid querying the Open Policy Agent for every request.", "author": "PaulRMellor", "createdAt": "2020-06-15T09:06:46Z", "path": "install/cluster-operator/040-Crd-kafka.yaml", "diffHunk": "@@ -972,6 +978,23 @@ spec:\n                       type: boolean\n                       description: Enable or disable TLS hostname verification. Default\n                         value is `false`.\n+                    expireAfterMs:\n+                      type: integer\n+                      description: The expiration of the records kept in the local\n+                        cache to avoid querying Open Policy Agent for every request.\n+                        Defines how often will the cached authorization decisions\n+                        will expire and be reloaded from the Open Policy Agent server.\n+                        In milliseconds. Defaults to `3600000`.\n+                    initialCacheCapacity:\n+                      type: integer\n+                      description: Initial capacity of the local cache used by the\n+                        authorizer to avoid querying Open Policy Agent for every request\n+                        Defaults to `5000`.\n+                    maximumCacheSize:\n+                      type: integer\n+                      description: Maximum capacity of the local cache used by the\n+                        authorizer to avoid querying Open Policy Agent for every request.", "originalCommit": "c65a17f52322eb4eddf29f6b88134a6e915ac79c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDAzNDMzNg==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3192#discussion_r440034336", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        \"Currently the supported types are `simple`, `keycloak`, and `opa`. \" +\n          \n          \n            \n                        \"Currently, the supported types are `simple`, `keycloak`, and `opa`. \" +", "author": "PaulRMellor", "createdAt": "2020-06-15T09:07:14Z", "path": "api/src/main/java/io/strimzi/api/kafka/model/KafkaAuthorization.java", "diffHunk": "@@ -32,8 +33,10 @@\n     private Map<String, Object> additionalProperties;\n \n     @Description(\"Authorization type. \" +\n-            \"Currently the only supported type is `simple`. \" +\n-            \"`simple` authorization type uses Kafka's `kafka.security.auth.SimpleAclAuthorizer` class for authorization.\")\n+            \"Currently the supported types are `simple`, `keycloak`, and `opa`. \" +", "originalCommit": "c65a17f52322eb4eddf29f6b88134a6e915ac79c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDAzNDQ3MA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3192#discussion_r440034470", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                  description: Authorization type. Currently the supported types\n          \n          \n            \n                                  description: Authorization type. Currently, the supported types", "author": "PaulRMellor", "createdAt": "2020-06-15T09:07:30Z", "path": "helm-charts/strimzi-kafka-operator/templates/040-Crd-kafka.yaml", "diffHunk": "@@ -1006,10 +1029,20 @@ spec:\n                       type: string\n                       enum:\n                       - simple\n+                      - opa\n                       - keycloak\n-                      description: Authorization type. Currently the only supported\n-                        type is `simple`. `simple` authorization type uses Kafka's\n-                        `kafka.security.auth.SimpleAclAuthorizer` class for authorization.\n+                      description: Authorization type. Currently the supported types", "originalCommit": "c65a17f52322eb4eddf29f6b88134a6e915ac79c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDAzNDg5NA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3192#discussion_r440034894", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                  description: Authorization type. Currently the supported types\n          \n          \n            \n                                  description: Authorization type. Currently, the supported types", "author": "PaulRMellor", "createdAt": "2020-06-15T09:08:14Z", "path": "install/cluster-operator/040-Crd-kafka.yaml", "diffHunk": "@@ -1001,10 +1024,20 @@ spec:\n                       type: string\n                       enum:\n                       - simple\n+                      - opa\n                       - keycloak\n-                      description: Authorization type. Currently the only supported\n-                        type is `simple`. `simple` authorization type uses Kafka's\n-                        `kafka.security.auth.SimpleAclAuthorizer` class for authorization.\n+                      description: Authorization type. Currently the supported types", "originalCommit": "c65a17f52322eb4eddf29f6b88134a6e915ac79c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDAzODA4Mg==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3192#discussion_r440038082", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    Keycloak Authorization Services for authorization. `opa` is\n          \n          \n            \n                                    using Open Policy Agent based authorization.\n          \n          \n            \n                                    Keycloak Authorization Services for authorization. `opa` \n          \n          \n            \n                                    authorization type uses Open Policy Agent authorization.", "author": "PaulRMellor", "createdAt": "2020-06-15T09:13:40Z", "path": "helm-charts/strimzi-kafka-operator/templates/040-Crd-kafka.yaml", "diffHunk": "@@ -1006,10 +1029,20 @@ spec:\n                       type: string\n                       enum:\n                       - simple\n+                      - opa\n                       - keycloak\n-                      description: Authorization type. Currently the only supported\n-                        type is `simple`. `simple` authorization type uses Kafka's\n-                        `kafka.security.auth.SimpleAclAuthorizer` class for authorization.\n+                      description: Authorization type. Currently the supported types\n+                        are `simple`, `keycloak`, and `opa`. `simple` authorization\n+                        type uses Kafka's `kafka.security.auth.SimpleAclAuthorizer`\n+                        class for authorization. `keycloak` authorization type uses\n+                        Keycloak Authorization Services for authorization. `opa` is\n+                        using Open Policy Agent based authorization.", "originalCommit": "c65a17f52322eb4eddf29f6b88134a6e915ac79c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDAzODUxNg==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3192#discussion_r440038516", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    Keycloak Authorization Services for authorization. `opa` is\n          \n          \n            \n                                    using Open Policy Agent based authorization.\n          \n          \n            \n                                    Keycloak Authorization Services for authorization. `opa`\n          \n          \n            \n                                    authorization type uses Open Policy Agent authorization.", "author": "PaulRMellor", "createdAt": "2020-06-15T09:14:27Z", "path": "install/cluster-operator/040-Crd-kafka.yaml", "diffHunk": "@@ -1001,10 +1024,20 @@ spec:\n                       type: string\n                       enum:\n                       - simple\n+                      - opa\n                       - keycloak\n-                      description: Authorization type. Currently the only supported\n-                        type is `simple`. `simple` authorization type uses Kafka's\n-                        `kafka.security.auth.SimpleAclAuthorizer` class for authorization.\n+                      description: Authorization type. Currently the supported types\n+                        are `simple`, `keycloak`, and `opa`. `simple` authorization\n+                        type uses Kafka's `kafka.security.auth.SimpleAclAuthorizer`\n+                        class for authorization. `keycloak` authorization type uses\n+                        Keycloak Authorization Services for authorization. `opa` is\n+                        using Open Policy Agent based authorization.", "originalCommit": "c65a17f52322eb4eddf29f6b88134a6e915ac79c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDAzODc0MQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3192#discussion_r440038741", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                  description: The URL used to connect to the Open Policy Agent\n          \n          \n            \n                                  description: (Required) The URL used to connect to the Open Policy Agent", "author": "PaulRMellor", "createdAt": "2020-06-15T09:14:49Z", "path": "install/cluster-operator/040-Crd-kafka.yaml", "diffHunk": "@@ -1001,10 +1024,20 @@ spec:\n                       type: string\n                       enum:\n                       - simple\n+                      - opa\n                       - keycloak\n-                      description: Authorization type. Currently the only supported\n-                        type is `simple`. `simple` authorization type uses Kafka's\n-                        `kafka.security.auth.SimpleAclAuthorizer` class for authorization.\n+                      description: Authorization type. Currently the supported types\n+                        are `simple`, `keycloak`, and `opa`. `simple` authorization\n+                        type uses Kafka's `kafka.security.auth.SimpleAclAuthorizer`\n+                        class for authorization. `keycloak` authorization type uses\n+                        Keycloak Authorization Services for authorization. `opa` is\n+                        using Open Policy Agent based authorization.\n+                    url:\n+                      type: string\n+                      example: http://opa:8181/v1/data/kafka/authz/allow\n+                      description: The URL used to connect to the Open Policy Agent", "originalCommit": "c65a17f52322eb4eddf29f6b88134a6e915ac79c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA0MTg3Ng==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3192#discussion_r440041876", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    by the authorizer. This option is required.\n          \n          \n            \n                                    by the authorizer.", "author": "PaulRMellor", "createdAt": "2020-06-15T09:20:07Z", "path": "install/cluster-operator/040-Crd-kafka.yaml", "diffHunk": "@@ -1001,10 +1024,20 @@ spec:\n                       type: string\n                       enum:\n                       - simple\n+                      - opa\n                       - keycloak\n-                      description: Authorization type. Currently the only supported\n-                        type is `simple`. `simple` authorization type uses Kafka's\n-                        `kafka.security.auth.SimpleAclAuthorizer` class for authorization.\n+                      description: Authorization type. Currently the supported types\n+                        are `simple`, `keycloak`, and `opa`. `simple` authorization\n+                        type uses Kafka's `kafka.security.auth.SimpleAclAuthorizer`\n+                        class for authorization. `keycloak` authorization type uses\n+                        Keycloak Authorization Services for authorization. `opa` is\n+                        using Open Policy Agent based authorization.\n+                    url:\n+                      type: string\n+                      example: http://opa:8181/v1/data/kafka/authz/allow\n+                      description: The URL used to connect to the Open Policy Agent\n+                        server. The URL has to include the policy which will be queried\n+                        by the authorizer. This option is required.", "originalCommit": "c65a17f52322eb4eddf29f6b88134a6e915ac79c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "0dfe31e05b6d365c802c3cb7f1ae1ffcae6eb833", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/0dfe31e05b6d365c802c3cb7f1ae1ffcae6eb833", "message": "Rebase to Helm3\n\nSigned-off-by: Jakub Scholz <www@scholzj.com>", "committedDate": "2020-06-15T10:12:38Z", "type": "commit"}, {"oid": "0dfe31e05b6d365c802c3cb7f1ae1ffcae6eb833", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/0dfe31e05b6d365c802c3cb7f1ae1ffcae6eb833", "message": "Rebase to Helm3\n\nSigned-off-by: Jakub Scholz <www@scholzj.com>", "committedDate": "2020-06-15T10:12:38Z", "type": "forcePushed"}, {"oid": "20ff87af05a36be7468055d66004216832d5d4f9", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/20ff87af05a36be7468055d66004216832d5d4f9", "message": "Apply suggestions from code review\r\n\r\nSigned-off-by: Jakub Scholz <www@scholzj.com>\r\n\r\nCo-authored-by: prmellor <pmellor@redhat.com>\n\nCo-authored-by: PaulRMellor <47596553+PaulRMellor@users.noreply.github.com>", "committedDate": "2020-06-15T10:17:00Z", "type": "commit"}, {"oid": "fd424bd519df2cfcca27363a28a9f2d197c03c93", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/fd424bd519df2cfcca27363a28a9f2d197c03c93", "message": "Refresh generated files after suggestions\n\nSigned-off-by: Jakub Scholz <www@scholzj.com>", "committedDate": "2020-06-15T10:20:32Z", "type": "commit"}]}