{"pr_number": 3170, "pr_title": "[MO] - [system test] -> cruise control race-condition", "pr_createdAt": "2020-06-08T12:02:31Z", "pr_url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3170", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjY4MzY2Nw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3170#discussion_r436683667", "bodyText": "typo expectedPods", "author": "ppatierno", "createdAt": "2020-06-08T13:09:50Z", "path": "systemtest/src/main/java/io/strimzi/systemtest/utils/kubeUtils/objects/PodUtils.java", "diffHunk": "@@ -187,17 +187,32 @@ public static void waitUntilMessageIsInLogs(String podName, String containerName\n \n     public static void waitUntilPodContainersCount(String podNamePrefix, int numberOfContainers) {\n         LOGGER.info(\"Wait until Pod {} will have {} containers\", podNamePrefix, numberOfContainers);\n-        TestUtils.waitFor(\"Pod\" + podNamePrefix + \" will have \" + numberOfContainers + \" containers\",\n+        TestUtils.waitFor(\"Pod \" + podNamePrefix + \" will have \" + numberOfContainers + \" containers\",\n             Constants.GLOBAL_POLL_INTERVAL, Constants.GLOBAL_STATUS_TIMEOUT,\n             () -> kubeClient().listPodsByPrefixInName(podNamePrefix).get(0).getSpec().getContainers().size() == numberOfContainers);\n         LOGGER.info(\"Pod {} has {} containers\", podNamePrefix, numberOfContainers);\n     }\n \n-    public static void waitUntilPodReplicasCount(String podNamePrefix, int exceptedPods) {\n-        LOGGER.info(\"Wait until Pod {} will have {} replicas\", podNamePrefix, exceptedPods);\n+    public static void waitUntilPodStabilityReplicasCount(String podNamePrefix, int exceptedPods) {\n+        LOGGER.info(\"Wait until Pod {} will have stable {} replicas\", podNamePrefix, exceptedPods);", "originalCommit": "248d91f449bf0adac870e38984ce96d18d14530d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjY4NDgwMQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3170#discussion_r436684801", "bodyText": "I guess you are using this one element array because otherwise, you cannot increment the variable in the lambda. Maybe you can use an AtomicInteger? Or there is a specific reason for using the array?", "author": "ppatierno", "createdAt": "2020-06-08T13:10:58Z", "path": "systemtest/src/main/java/io/strimzi/systemtest/utils/kubeUtils/objects/PodUtils.java", "diffHunk": "@@ -187,17 +187,32 @@ public static void waitUntilMessageIsInLogs(String podName, String containerName\n \n     public static void waitUntilPodContainersCount(String podNamePrefix, int numberOfContainers) {\n         LOGGER.info(\"Wait until Pod {} will have {} containers\", podNamePrefix, numberOfContainers);\n-        TestUtils.waitFor(\"Pod\" + podNamePrefix + \" will have \" + numberOfContainers + \" containers\",\n+        TestUtils.waitFor(\"Pod \" + podNamePrefix + \" will have \" + numberOfContainers + \" containers\",\n             Constants.GLOBAL_POLL_INTERVAL, Constants.GLOBAL_STATUS_TIMEOUT,\n             () -> kubeClient().listPodsByPrefixInName(podNamePrefix).get(0).getSpec().getContainers().size() == numberOfContainers);\n         LOGGER.info(\"Pod {} has {} containers\", podNamePrefix, numberOfContainers);\n     }\n \n-    public static void waitUntilPodReplicasCount(String podNamePrefix, int exceptedPods) {\n-        LOGGER.info(\"Wait until Pod {} will have {} replicas\", podNamePrefix, exceptedPods);\n+    public static void waitUntilPodStabilityReplicasCount(String podNamePrefix, int exceptedPods) {\n+        LOGGER.info(\"Wait until Pod {} will have stable {} replicas\", podNamePrefix, exceptedPods);\n+        int[] stableCounter = {0};", "originalCommit": "248d91f449bf0adac870e38984ce96d18d14530d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjcxNDE5Mw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3170#discussion_r436714193", "bodyText": "Using AtomicInteger is overloading for no such benefit. Usually, I do not use AtomicInteger, unless I have a really good reason to use and the reason for using AtomicInteger might be only allowing concurrent accesses. Yes you are right, I use the static array to have strong reference inside lambda.", "author": "see-quick", "createdAt": "2020-06-08T13:46:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjY4NDgwMQ=="}], "type": "inlineReview"}, {"oid": "eefe891ecb73bc15f923fb2a5954413460527c85", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/eefe891ecb73bc15f923fb2a5954413460527c85", "message": "[MO] - [system test] -> cruise control race-condition\n\nSigned-off-by: morsak <xorsak02@stud.fit.vutbr.cz>", "committedDate": "2020-06-08T15:28:04Z", "type": "commit"}, {"oid": "f79439bf92abc3dc3f3451db305d1e1e9c89d2a8", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/f79439bf92abc3dc3f3451db305d1e1e9c89d2a8", "message": "[MO] - ipdate\n\nSigned-off-by: morsak <xorsak02@stud.fit.vutbr.cz>", "committedDate": "2020-06-08T15:28:04Z", "type": "commit"}, {"oid": "45757944dbbe87c4e053f494e7ef0290df82097a", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/45757944dbbe87c4e053f494e7ef0290df82097a", "message": "[MO] - update\n\nSigned-off-by: morsak <xorsak02@stud.fit.vutbr.cz>", "committedDate": "2020-06-08T15:28:04Z", "type": "commit"}, {"oid": "1d1b0e57461712565d65e647f558217f7f0fef37", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/1d1b0e57461712565d65e647f558217f7f0fef37", "message": "update\n\nSigned-off-by: morsak <xorsak02@stud.fit.vutbr.cz>", "committedDate": "2020-06-08T15:28:04Z", "type": "commit"}, {"oid": "c31c3e2ff533686249a6002b1a2d1b854cb28e59", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/c31c3e2ff533686249a6002b1a2d1b854cb28e59", "message": "update\n\nSigned-off-by: morsak <xorsak02@stud.fit.vutbr.cz>", "committedDate": "2020-06-08T15:28:04Z", "type": "commit"}, {"oid": "c31c3e2ff533686249a6002b1a2d1b854cb28e59", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/c31c3e2ff533686249a6002b1a2d1b854cb28e59", "message": "update\n\nSigned-off-by: morsak <xorsak02@stud.fit.vutbr.cz>", "committedDate": "2020-06-08T15:28:04Z", "type": "forcePushed"}, {"oid": "b27f4e86b08b4a235890761c46217448cff88935", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/b27f4e86b08b4a235890761c46217448cff88935", "message": "fix\n\nSigned-off-by: morsak <xorsak02@stud.fit.vutbr.cz>", "committedDate": "2020-06-08T19:14:31Z", "type": "commit"}]}