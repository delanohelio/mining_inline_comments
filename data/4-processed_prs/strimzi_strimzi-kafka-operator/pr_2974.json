{"pr_number": 2974, "pr_title": "New configuration options for Strimzi OAuth 0.5.0 features", "pr_createdAt": "2020-05-07T08:46:01Z", "pr_url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2974", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTM0OTgyMg==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2974#discussion_r421349822", "bodyText": "Can you please use the annotation in the class it self instead of addint it here?", "author": "scholzj", "createdAt": "2020-05-07T09:00:01Z", "path": ".checkstyle/suppressions.xml", "diffHunk": "@@ -57,4 +57,6 @@\n     <suppress checks=\".*\"\n               files=\"io[/\\\\]strimzi[/\\\\]api[/\\\\]kafka[/\\\\]model[/\\\\](Doneable).*\\.java\"/>\n \n+    <suppress checks=\"NPathComplexity|CyclomaticComplexity\"", "originalCommit": "9abb7e64af21038fff12eecc5b986b48249b15ca", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTM2MTk1MQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2974#discussion_r421361951", "bodyText": "I resorted to this technique because nothing I tried in the class itself worked :/", "author": "mstruk", "createdAt": "2020-05-07T09:19:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTM0OTgyMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTM2NjEwMg==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2974#discussion_r421366102", "bodyText": "Have you tried @SuppressWarnings({\"checkstyle:CyclomaticComplexity\", \"checkstyle:NPathComplexity\"})? It is used in other classes already.", "author": "scholzj", "createdAt": "2020-05-07T09:26:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTM0OTgyMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzE1ODY1NQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2974#discussion_r423158655", "bodyText": "I'd swear I had tried it but, this time it appears to work. Thanks.", "author": "mstruk", "createdAt": "2020-05-11T16:19:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTM0OTgyMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTM1MTkzNw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2974#discussion_r421351937", "bodyText": "Why is this whole fallback structure needed? Maybe we should explain a bit more in the description when to use it?", "author": "scholzj", "createdAt": "2020-05-07T09:03:36Z", "path": "api/src/main/java/io/strimzi/api/kafka/model/listener/KafkaListenerAuthenticationOAuth.java", "diffHunk": "@@ -141,6 +168,26 @@ public void setUserNameClaim(String userNameClaim) {\n         this.userNameClaim = userNameClaim;\n     }\n \n+    @Description(\"The fallback username claim to be used for user id if the claim specified by `userNameClaim` is not present. \" +", "originalCommit": "e99f7bf9c8800eecc332e7db8cad432573c00572", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTM2OTY0Mg==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2974#discussion_r421369642", "bodyText": "This is to support some fringe cases - it's hard to tell how commonly it may be used in the end. There are authorization server implementations that set preferred_username or similar into JWT token only if password authentication was used to obtain the token from token endpoint (that's using username and password). If client_credentials authentication  is used (that's using clientId and clientSecret), they set client_id or similar into JWT token. If we only have userNameClaim we would have to set it to either preferred_username or to client_id. In the first case none of the clients would have a user id in the second none of the users would have a user id. Without user id we can say that the authorization server trusts this user, but on Kafka broker we don't have an identifier what could serve for ACLs or  Keycloak authorization.", "author": "mstruk", "createdAt": "2020-05-07T09:31:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTM1MTkzNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTM4MDAyMg==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2974#discussion_r421380022", "bodyText": "Makes sense. Thanks for the explanation.", "author": "scholzj", "createdAt": "2020-05-07T09:48:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTM1MTkzNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzE1OTU4OA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2974#discussion_r423159588", "bodyText": "Added more explanation to asciidoc documentation.", "author": "mstruk", "createdAt": "2020-05-11T16:20:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTM1MTkzNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUwMTQ4Mg==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2974#discussion_r423501482", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Description(\"The fallback username claim to be used for user id if the claim specified by `userNameClaim` is not present. \" +\n          \n          \n            \n                @Description(\"The fallback username claim to be used for the user id if the claim specified by `userNameClaim` is not present. \" +", "author": "PaulRMellor", "createdAt": "2020-05-12T06:54:02Z", "path": "api/src/main/java/io/strimzi/api/kafka/model/listener/KafkaListenerAuthenticationOAuth.java", "diffHunk": "@@ -141,6 +157,28 @@ public void setUserNameClaim(String userNameClaim) {\n         this.userNameClaim = userNameClaim;\n     }\n \n+    @Description(\"The fallback username claim to be used for user id if the claim specified by `userNameClaim` is not present. \" +", "originalCommit": "30b7b8a9436242b55ac10c5fb7c0d4a9a9f399a5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUwMTg2MA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2974#discussion_r423501860", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        \"Useful when `client_credentials` authentication only results in client id being provided in another claim. \" +\n          \n          \n            \n                        \"Useful when `client_credentials` authentication only results in the client id being provided in another claim. \" +", "author": "PaulRMellor", "createdAt": "2020-05-12T06:54:51Z", "path": "api/src/main/java/io/strimzi/api/kafka/model/listener/KafkaListenerAuthenticationOAuth.java", "diffHunk": "@@ -141,6 +157,28 @@ public void setUserNameClaim(String userNameClaim) {\n         this.userNameClaim = userNameClaim;\n     }\n \n+    @Description(\"The fallback username claim to be used for user id if the claim specified by `userNameClaim` is not present. \" +\n+            \"Useful when `client_credentials` authentication only results in client id being provided in another claim. \" +", "originalCommit": "30b7b8a9436242b55ac10c5fb7c0d4a9a9f399a5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUwMzQwNQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2974#discussion_r423503405", "bodyText": "Not sure of the possible outcomes here: 'only results in the client if being provided in another claim'", "author": "PaulRMellor", "createdAt": "2020-05-12T06:57:56Z", "path": "api/src/main/java/io/strimzi/api/kafka/model/listener/KafkaListenerAuthenticationOAuth.java", "diffHunk": "@@ -141,6 +157,28 @@ public void setUserNameClaim(String userNameClaim) {\n         this.userNameClaim = userNameClaim;\n     }\n \n+    @Description(\"The fallback username claim to be used for user id if the claim specified by `userNameClaim` is not present. \" +\n+            \"Useful when `client_credentials` authentication only results in client id being provided in another claim. \" +", "originalCommit": "30b7b8a9436242b55ac10c5fb7c0d4a9a9f399a5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzc3NjI3NQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2974#discussion_r423776275", "bodyText": "Maybe: ''Useful when client_credentials authentication provides the client id in another claim, but provides no suggested username.\"", "author": "mstruk", "createdAt": "2020-05-12T14:24:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUwMzQwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQxNTQyOQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2974#discussion_r424415429", "bodyText": "Maybe: ''Useful when client_credentials authentication provides the client id in another claim, but provides no suggested username.\"\n\n@PaulRMellor WDYT about this suggestion?", "author": "mstruk", "createdAt": "2020-05-13T12:57:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUwMzQwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTAzNDMyNw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2974#discussion_r431034327", "bodyText": "@PaulRMellor test", "author": "PaulRMellor", "createdAt": "2020-05-27T11:03:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUwMzQwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUyMzkyNw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2974#discussion_r423523927", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        \"Useful to be able to map usernames and client ids into the same user id space, preventing name collisions.\")\n          \n          \n            \n                        \"Mapping usernames and client ids into the same user id space is useful in preventing name collisions.\")", "author": "PaulRMellor", "createdAt": "2020-05-12T07:37:06Z", "path": "api/src/main/java/io/strimzi/api/kafka/model/listener/KafkaListenerAuthenticationOAuth.java", "diffHunk": "@@ -141,6 +157,28 @@ public void setUserNameClaim(String userNameClaim) {\n         this.userNameClaim = userNameClaim;\n     }\n \n+    @Description(\"The fallback username claim to be used for user id if the claim specified by `userNameClaim` is not present. \" +\n+            \"Useful when `client_credentials` authentication only results in client id being provided in another claim. \" +\n+            \"It only takes effect if `userNameClaim` is set.\")\n+    public String getFallbackUserNameClaim() {\n+        return fallbackUserNameClaim;\n+    }\n+\n+    public void setFallbackUserNameClaim(String fallbackUserNameClaim) {\n+        this.fallbackUserNameClaim = fallbackUserNameClaim;\n+    }\n+\n+    @Description(\"The prefix to use with the value of `fallbackUserNameClaim` to construct the user id. \" +\n+            \"It only takes effect if `fallbackUserNameClaim` is set, and the value is present for the claim. \" +\n+            \"Useful to be able to map usernames and client ids into the same user id space, preventing name collisions.\")", "originalCommit": "30b7b8a9436242b55ac10c5fb7c0d4a9a9f399a5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUyNDI4OA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2974#discussion_r423524288", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Description(\"Configure whether the access token type check should be performed or not. This should be set to `false` \" +\n          \n          \n            \n                @Description(\"Configure whether the access token type check is performed or not. This should be set to `false` \" +", "author": "PaulRMellor", "createdAt": "2020-05-12T07:37:50Z", "path": "api/src/main/java/io/strimzi/api/kafka/model/listener/KafkaListenerAuthenticationOAuth.java", "diffHunk": "@@ -141,6 +157,28 @@ public void setUserNameClaim(String userNameClaim) {\n         this.userNameClaim = userNameClaim;\n     }\n \n+    @Description(\"The fallback username claim to be used for user id if the claim specified by `userNameClaim` is not present. \" +\n+            \"Useful when `client_credentials` authentication only results in client id being provided in another claim. \" +\n+            \"It only takes effect if `userNameClaim` is set.\")\n+    public String getFallbackUserNameClaim() {\n+        return fallbackUserNameClaim;\n+    }\n+\n+    public void setFallbackUserNameClaim(String fallbackUserNameClaim) {\n+        this.fallbackUserNameClaim = fallbackUserNameClaim;\n+    }\n+\n+    @Description(\"The prefix to use with the value of `fallbackUserNameClaim` to construct the user id. \" +\n+            \"It only takes effect if `fallbackUserNameClaim` is set, and the value is present for the claim. \" +\n+            \"Useful to be able to map usernames and client ids into the same user id space, preventing name collisions.\")\n+    public String getFallbackUserNamePrefix() {\n+        return fallbackUserNamePrefix;\n+    }\n+\n+    public void setFallbackUserNamePrefix(String fallbackUserNamePrefix) {\n+        this.fallbackUserNamePrefix = fallbackUserNamePrefix;\n+    }\n+\n     @Description(\"Configure whether the access token type check should be performed or not. This should be set to `false` \" +", "originalCommit": "30b7b8a9436242b55ac10c5fb7c0d4a9a9f399a5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUyNDU5MA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2974#discussion_r423524590", "bodyText": "Set to 'false' in any situation?", "author": "PaulRMellor", "createdAt": "2020-05-12T07:38:22Z", "path": "api/src/main/java/io/strimzi/api/kafka/model/listener/KafkaListenerAuthenticationOAuth.java", "diffHunk": "@@ -141,6 +157,28 @@ public void setUserNameClaim(String userNameClaim) {\n         this.userNameClaim = userNameClaim;\n     }\n \n+    @Description(\"The fallback username claim to be used for user id if the claim specified by `userNameClaim` is not present. \" +\n+            \"Useful when `client_credentials` authentication only results in client id being provided in another claim. \" +\n+            \"It only takes effect if `userNameClaim` is set.\")\n+    public String getFallbackUserNameClaim() {\n+        return fallbackUserNameClaim;\n+    }\n+\n+    public void setFallbackUserNameClaim(String fallbackUserNameClaim) {\n+        this.fallbackUserNameClaim = fallbackUserNameClaim;\n+    }\n+\n+    @Description(\"The prefix to use with the value of `fallbackUserNameClaim` to construct the user id. \" +\n+            \"It only takes effect if `fallbackUserNameClaim` is set, and the value is present for the claim. \" +\n+            \"Useful to be able to map usernames and client ids into the same user id space, preventing name collisions.\")\n+    public String getFallbackUserNamePrefix() {\n+        return fallbackUserNamePrefix;\n+    }\n+\n+    public void setFallbackUserNamePrefix(String fallbackUserNamePrefix) {\n+        this.fallbackUserNamePrefix = fallbackUserNamePrefix;\n+    }\n+\n     @Description(\"Configure whether the access token type check should be performed or not. This should be set to `false` \" +", "originalCommit": "30b7b8a9436242b55ac10c5fb7c0d4a9a9f399a5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzc3OTI1Mg==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2974#discussion_r423779252", "bodyText": "If this was the whole sentence the idea would be that by default it is true, and if you're setting it, you probably want to set it to false. But the sentence continues with 'if the authorization server does not include 'typ'' - so that's when it should be set to 'false'.", "author": "mstruk", "createdAt": "2020-05-12T14:28:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUyNDU5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTAzNzY1Mw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2974#discussion_r431037653", "bodyText": "@PaulRMellor Thanks", "author": "PaulRMellor", "createdAt": "2020-05-27T11:09:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUyNDU5MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUyNTIyMg==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2974#discussion_r423525222", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Description(\"Valid value for `token_type` attribute returned by Introspection Endpoint. No default value, and not checked by default.\")\n          \n          \n            \n                @Description(\"Valid value for the `token_type` attribute returned by the Introspection Endpoint. No default value, and not checked by default.\")", "author": "PaulRMellor", "createdAt": "2020-05-12T07:39:37Z", "path": "api/src/main/java/io/strimzi/api/kafka/model/listener/KafkaListenerAuthenticationOAuth.java", "diffHunk": "@@ -152,6 +190,16 @@ public void setCheckAccessTokenType(boolean checkAccessTokenType) {\n         this.checkAccessTokenType = checkAccessTokenType;\n     }\n \n+    @Description(\"Valid value for `token_type` attribute returned by Introspection Endpoint. No default value, and not checked by default.\")", "originalCommit": "30b7b8a9436242b55ac10c5fb7c0d4a9a9f399a5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUyNTg4MA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2974#discussion_r423525880", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Description(\"Configure whether the access token should be treated as JWT. This should be set to `false` if \" +\n          \n          \n            \n                @Description(\"Configure whether the access token is treated as JWT. This must be set to `false` if \" +", "author": "PaulRMellor", "createdAt": "2020-05-12T07:40:42Z", "path": "api/src/main/java/io/strimzi/api/kafka/model/listener/KafkaListenerAuthenticationOAuth.java", "diffHunk": "@@ -152,6 +190,16 @@ public void setCheckAccessTokenType(boolean checkAccessTokenType) {\n         this.checkAccessTokenType = checkAccessTokenType;\n     }\n \n+    @Description(\"Valid value for `token_type` attribute returned by Introspection Endpoint. No default value, and not checked by default.\")\n+    @JsonInclude(JsonInclude.Include.NON_DEFAULT)\n+    public String getValidTokenType() {\n+        return validTokenType;\n+    }\n+\n+    public void setValidTokenType(String validTokenType) {\n+        this.validTokenType = validTokenType;\n+    }\n+\n     @Description(\"Configure whether the access token should be treated as JWT. This should be set to `false` if \" +", "originalCommit": "30b7b8a9436242b55ac10c5fb7c0d4a9a9f399a5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUyNjE0Mw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2974#discussion_r423526143", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Description(\"URI of the User Info Endpoint to use as a fallback to obtaining user id when Introspection Endpoint \" +\n          \n          \n            \n                @Description(\"URI of the User Info Endpoint to use as a fallback to obtaining the user id when the Introspection Endpoint \" +", "author": "PaulRMellor", "createdAt": "2020-05-12T07:41:09Z", "path": "api/src/main/java/io/strimzi/api/kafka/model/listener/KafkaListenerAuthenticationOAuth.java", "diffHunk": "@@ -194,4 +242,15 @@ public boolean isEnableECDSA() {\n     public void setEnableECDSA(boolean enableECDSA) {\n         this.enableECDSA = enableECDSA;\n     }\n+\n+    @Description(\"URI of the User Info Endpoint to use as a fallback to obtaining user id when Introspection Endpoint \" +", "originalCommit": "30b7b8a9436242b55ac10c5fb7c0d4a9a9f399a5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUyNjMyMA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2974#discussion_r423526320", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        \"does not return information that could be used for user id. \")\n          \n          \n            \n                        \"does not return information that can be used for the user id. \")", "author": "PaulRMellor", "createdAt": "2020-05-12T07:41:27Z", "path": "api/src/main/java/io/strimzi/api/kafka/model/listener/KafkaListenerAuthenticationOAuth.java", "diffHunk": "@@ -194,4 +242,15 @@ public boolean isEnableECDSA() {\n     public void setEnableECDSA(boolean enableECDSA) {\n         this.enableECDSA = enableECDSA;\n     }\n+\n+    @Description(\"URI of the User Info Endpoint to use as a fallback to obtaining user id when Introspection Endpoint \" +\n+            \"does not return information that could be used for user id. \")", "originalCommit": "30b7b8a9436242b55ac10c5fb7c0d4a9a9f399a5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUyNzEzNw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2974#discussion_r423527137", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        throw new InvalidResourceException(listener + \": User Info Endpoint URI can only be used if Introspection Endpoint URI is also configured\");\n          \n          \n            \n                        throw new InvalidResourceException(listener + \": User Info Endpoint URI can only be used if the Introspection Endpoint URI is also configured\");", "author": "PaulRMellor", "createdAt": "2020-05-12T07:42:56Z", "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/model/KafkaCluster.java", "diffHunk": "@@ -1864,16 +1864,21 @@ private static void validateOauth(KafkaListenerAuthenticationOAuth oAuth, String\n             throw new InvalidResourceException(listener + \": Introspection endpoint URI or JWKS endpoint URI has to be specified\");\n         }\n \n-        if (oAuth.getValidIssuerUri() == null) {\n-            log.error(\"{}: Valid Issuer URI has to be specified\", listener);\n-            throw new InvalidResourceException(listener + \": Valid Issuer URI has to be specified\");\n+        if (oAuth.getValidIssuerUri() == null && oAuth.isCheckIssuer()) {\n+            log.error(\"{}: Valid Issuer URI has to be specified or 'checkIssuer' set to false\", listener);\n+            throw new InvalidResourceException(listener + \": Valid Issuer URI has to be specified or 'checkIssuer' set to false\");\n         }\n \n         if (oAuth.getIntrospectionEndpointUri() != null && (oAuth.getClientId() == null || oAuth.getClientSecret() == null)) {\n             log.error(\"{}: Introspection Endpoint URI needs to be configured together with clientId and clientSecret\", listener);\n             throw new InvalidResourceException(listener + \": Introspection Endpoint URI needs to be configured together with clientId and clientSecret\");\n         }\n \n+        if (oAuth.getUserInfoEndpointUri() != null && oAuth.getIntrospectionEndpointUri() == null) {\n+            log.error(\"{}: User Info Endpoint URI can only be used if Introspection Endpoint URI is also configured\", listener);\n+            throw new InvalidResourceException(listener + \": User Info Endpoint URI can only be used if Introspection Endpoint URI is also configured\");", "originalCommit": "30b7b8a9436242b55ac10c5fb7c0d4a9a9f399a5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUyODA5Nw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2974#discussion_r423528097", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            |checkAccessTokenType            1.2+<.<|Configure whether the access token type check should be performed or not. This should be set to `false` if the authorization server does not include 'typ' claim in JWT token. Defaults to `true`.\n          \n          \n            \n            |checkAccessTokenType            1.2+<.<|Configure whether the access token type check is performed or not. This must be set to `false` if the authorization server does not include 'typ' claim in JWT token. Defaults to `true`.", "author": "PaulRMellor", "createdAt": "2020-05-12T07:44:40Z", "path": "documentation/modules/appendix_crds.adoc", "diffHunk": "@@ -257,6 +257,8 @@ It must have the value `oauth` for the type `KafkaListenerAuthenticationOAuth`.\n |boolean\n |checkAccessTokenType            1.2+<.<|Configure whether the access token type check should be performed or not. This should be set to `false` if the authorization server does not include 'typ' claim in JWT token. Defaults to `true`.", "originalCommit": "30b7b8a9436242b55ac10c5fb7c0d4a9a9f399a5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUyODQ4MA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2974#discussion_r423528480", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            |checkIssuer                     1.2+<.<|Enable or disable issuer checking. By default issuer is checked using the value configured by `validIssuerUri`. Default value is `true`.\n          \n          \n            \n            |checkIssuer                     1.2+<.<|Enable or disable issuer checking. By default, the issuer is checked using the value configured for `validIssuerUri`. Default value is `true`.", "author": "PaulRMellor", "createdAt": "2020-05-12T07:45:14Z", "path": "documentation/modules/appendix_crds.adoc", "diffHunk": "@@ -257,6 +257,8 @@ It must have the value `oauth` for the type `KafkaListenerAuthenticationOAuth`.\n |boolean\n |checkAccessTokenType            1.2+<.<|Configure whether the access token type check should be performed or not. This should be set to `false` if the authorization server does not include 'typ' claim in JWT token. Defaults to `true`.\n |boolean\n+|checkIssuer                     1.2+<.<|Enable or disable issuer checking. By default issuer is checked using the value configured by `validIssuerUri`. Default value is `true`.", "originalCommit": "30b7b8a9436242b55ac10c5fb7c0d4a9a9f399a5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUyODk0Nw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2974#discussion_r423528947", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            |fallbackUserNameClaim           1.2+<.<|The fallback username claim to be used for user id if the claim specified by `userNameClaim` is not present. Useful when `client_credentials` authentication only results in client id being provided in another claim. It only takes effect if `userNameClaim` is set.\n          \n          \n            \n            |fallbackUserNameClaim           1.2+<.<|The fallback username claim used for the user id if the claim specified by `userNameClaim` is not present. Useful when `client_credentials` authentication only results in a client id being provided in another claim. It only takes effect if `userNameClaim` is set.", "author": "PaulRMellor", "createdAt": "2020-05-12T07:46:04Z", "path": "documentation/modules/appendix_crds.adoc", "diffHunk": "@@ -265,6 +267,10 @@ It must have the value `oauth` for the type `KafkaListenerAuthenticationOAuth`.\n |boolean\n |enableECDSA                     1.2+<.<|Enable or disable ECDSA support by installing BouncyCastle crypto provider. Default value is `false`.\n |boolean\n+|fallbackUserNameClaim           1.2+<.<|The fallback username claim to be used for user id if the claim specified by `userNameClaim` is not present. Useful when `client_credentials` authentication only results in client id being provided in another claim. It only takes effect if `userNameClaim` is set.", "originalCommit": "30b7b8a9436242b55ac10c5fb7c0d4a9a9f399a5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUzMDIzNw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2974#discussion_r423530237", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            |fallbackUserNamePrefix          1.2+<.<|The prefix to use with the value of `fallbackUserNameClaim` to construct the user id. It only takes effect if `fallbackUserNameClaim` is set, and the value is present for the claim. Useful to be able to map usernames and client ids into the same user id space, preventing name collisions.\n          \n          \n            \n            |fallbackUserNamePrefix          1.2+<.<|The prefix to use with the value of `fallbackUserNameClaim` to construct the user id. It only takes effect if `fallbackUserNameClaim` is set, and the value is present for the claim. Mapping usernames and client ids into the same user id space is useful in preventing name collisions.", "author": "PaulRMellor", "createdAt": "2020-05-12T07:48:19Z", "path": "documentation/modules/appendix_crds.adoc", "diffHunk": "@@ -265,6 +267,10 @@ It must have the value `oauth` for the type `KafkaListenerAuthenticationOAuth`.\n |boolean\n |enableECDSA                     1.2+<.<|Enable or disable ECDSA support by installing BouncyCastle crypto provider. Default value is `false`.\n |boolean\n+|fallbackUserNameClaim           1.2+<.<|The fallback username claim to be used for user id if the claim specified by `userNameClaim` is not present. Useful when `client_credentials` authentication only results in client id being provided in another claim. It only takes effect if `userNameClaim` is set.\n+|string\n+|fallbackUserNamePrefix          1.2+<.<|The prefix to use with the value of `fallbackUserNameClaim` to construct the user id. It only takes effect if `fallbackUserNameClaim` is set, and the value is present for the claim. Useful to be able to map usernames and client ids into the same user id space, preventing name collisions.", "originalCommit": "30b7b8a9436242b55ac10c5fb7c0d4a9a9f399a5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUzNDY3OQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2974#discussion_r423534679", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            |userInfoEndpointUri             1.2+<.<|URI of the User Info Endpoint to use as a fallback to obtaining user id when Introspection Endpoint does not return information that could be used for user id. \n          \n          \n            \n            |userInfoEndpointUri             1.2+<.<|URI of the User Info Endpoint to use as a fallback when obtaining a user id and the Introspection Endpoint has not returned information that can be used.", "author": "PaulRMellor", "createdAt": "2020-05-12T07:55:40Z", "path": "documentation/modules/appendix_crds.adoc", "diffHunk": "@@ -277,10 +283,14 @@ It must have the value `oauth` for the type `KafkaListenerAuthenticationOAuth`.\n |xref:type-CertSecretSource-{context}[`CertSecretSource`] array\n |type                            1.2+<.<|Must be `oauth`.\n |string\n-|userNameClaim                   1.2+<.<|Name of the claim from the authentication token which will be used as the user principal. Defaults to `sub`.\n+|userInfoEndpointUri             1.2+<.<|URI of the User Info Endpoint to use as a fallback to obtaining user id when Introspection Endpoint does not return information that could be used for user id. ", "originalCommit": "30b7b8a9436242b55ac10c5fb7c0d4a9a9f399a5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUzNjYxNg==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2974#discussion_r423536616", "bodyText": "'User Info Endpoint'  -- In terms of consistency, we haven't been capitalising endpoint names in the doc. Maybe we could express as: 'userinfo endpoint'  or 'user info endpoint' instead. Same comment applies throughout the descriptions.", "author": "PaulRMellor", "createdAt": "2020-05-12T07:58:41Z", "path": "documentation/modules/appendix_crds.adoc", "diffHunk": "@@ -277,10 +283,14 @@ It must have the value `oauth` for the type `KafkaListenerAuthenticationOAuth`.\n |xref:type-CertSecretSource-{context}[`CertSecretSource`] array\n |type                            1.2+<.<|Must be `oauth`.\n |string\n-|userNameClaim                   1.2+<.<|Name of the claim from the authentication token which will be used as the user principal. Defaults to `sub`.\n+|userInfoEndpointUri             1.2+<.<|URI of the User Info Endpoint to use as a fallback to obtaining user id when Introspection Endpoint does not return information that could be used for user id. ", "originalCommit": "30b7b8a9436242b55ac10c5fb7c0d4a9a9f399a5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzc4NDg1OA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2974#discussion_r423784858", "bodyText": "I don't know. These are standard OAuth 2 endpoints, mentioned in specs. In that sense they are proper names, not common words I guess.", "author": "mstruk", "createdAt": "2020-05-12T14:35:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUzNjYxNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUzNzc4Mg==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2974#discussion_r423537782", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            |userNameClaim                   1.2+<.<|Name of the claim from the JWT authentication token, Introspection Endpoint response or User Info Endpoint response which will be used to extract the user id. Defaults to `sub`.\n          \n          \n            \n            |userNameClaim                   1.2+<.<|Name of the claim from the JWT authentication token, Introspection Endpoint response or User Info Endpoint response used to extract the user id. Defaults to `sub`.", "author": "PaulRMellor", "createdAt": "2020-05-12T08:00:37Z", "path": "documentation/modules/appendix_crds.adoc", "diffHunk": "@@ -277,10 +283,14 @@ It must have the value `oauth` for the type `KafkaListenerAuthenticationOAuth`.\n |xref:type-CertSecretSource-{context}[`CertSecretSource`] array\n |type                            1.2+<.<|Must be `oauth`.\n |string\n-|userNameClaim                   1.2+<.<|Name of the claim from the authentication token which will be used as the user principal. Defaults to `sub`.\n+|userInfoEndpointUri             1.2+<.<|URI of the User Info Endpoint to use as a fallback to obtaining user id when Introspection Endpoint does not return information that could be used for user id. \n+|string\n+|userNameClaim                   1.2+<.<|Name of the claim from the JWT authentication token, Introspection Endpoint response or User Info Endpoint response which will be used to extract the user id. Defaults to `sub`.", "originalCommit": "30b7b8a9436242b55ac10c5fb7c0d4a9a9f399a5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUzOTQxMA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2974#discussion_r423539410", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            |validTokenType                  1.2+<.<|Valid value for `token_type` attribute returned by Introspection Endpoint. No default value, and not checked by default.\n          \n          \n            \n            |validTokenType                  1.2+<.<|Valid value for the `token_type` attribute returned by the Introspection Endpoint. No default value, and not checked by default.", "author": "PaulRMellor", "createdAt": "2020-05-12T08:03:31Z", "path": "documentation/modules/appendix_crds.adoc", "diffHunk": "@@ -277,10 +283,14 @@ It must have the value `oauth` for the type `KafkaListenerAuthenticationOAuth`.\n |xref:type-CertSecretSource-{context}[`CertSecretSource`] array\n |type                            1.2+<.<|Must be `oauth`.\n |string\n-|userNameClaim                   1.2+<.<|Name of the claim from the authentication token which will be used as the user principal. Defaults to `sub`.\n+|userInfoEndpointUri             1.2+<.<|URI of the User Info Endpoint to use as a fallback to obtaining user id when Introspection Endpoint does not return information that could be used for user id. \n+|string\n+|userNameClaim                   1.2+<.<|Name of the claim from the JWT authentication token, Introspection Endpoint response or User Info Endpoint response which will be used to extract the user id. Defaults to `sub`.\n |string\n |validIssuerUri                  1.2+<.<|URI of the token issuer used for authentication.\n |string\n+|validTokenType                  1.2+<.<|Valid value for `token_type` attribute returned by Introspection Endpoint. No default value, and not checked by default.", "originalCommit": "30b7b8a9436242b55ac10c5fb7c0d4a9a9f399a5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzU0NDA3NA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2974#discussion_r423544074", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            <1> Some authorization servers may not provide `iss` claim making it impossible to perform an issuer check. In that case do not specify `validIssuerUri` and set `checkIssuer` to `false`. Default is `true`.\n          \n          \n            \n            <1> If your authorization server does not provide an `iss` claim, it is not possible to perform an issuer check. In this situation, set `checkIssuer` to `false` and do not specify a `validIssuerUri`. Default is `true`.", "author": "PaulRMellor", "createdAt": "2020-05-12T08:11:14Z", "path": "documentation/modules/oauth/proc-oauth-authentication-broker-config.adoc", "diffHunk": "@@ -88,11 +88,33 @@ external:\n     clientSecret: <3>\n       secretName: my-cluster-oauth\n       key: clientSecret\n+    userNameClaim: preferred_username <4>\n ----\n --\n <1> URI of the token introspection endpoint.\n <2> Client ID to identify the client.\n <3> Client Secret and client ID is used for authentication.\n+<4> The token claim (or key) that contains the actual user name in the token. The user name is the _principal_ used to identify the user. The `userNameClaim` value will depend on the authorization server used.\n++\n+Depending on how you apply {oauth} authentication, and the type of authorization server, there are additional (optional) configuration settings you can use:\n++\n+[source,yaml,subs=\"+quotes,attributes\"]\n+----\n+  # ...\n+  authentication:\n+    type: oauth\n+    # ...\n+    checkIssuer: false <1>\n+    fallbackUserNameClaim: client_id <2>\n+    fallbackUserNamePrefix: client-account- <3>\n+    validTokenType: bearer <4>\n+    userInfoEndpointUri: <__https://<auth-server-address>/auth/realms/external/protocol/openid-connect/userinfo__> <5>\n+----\n+<1> Some authorization servers may not provide `iss` claim making it impossible to perform an issuer check. In that case do not specify `validIssuerUri` and set `checkIssuer` to `false`. Default is `true`.", "originalCommit": "30b7b8a9436242b55ac10c5fb7c0d4a9a9f399a5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzU2MDY2OA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2974#discussion_r423560668", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            <2> Some authorization servers may not provide a single attribute that can be used to identify both regular users, and clients. If client authenticates in its own name `client_id` may be provided, but if user is authenticated using username and password to obtain a refresh token or an access token, some `username` attribute may be provided in addition to `client_id`. This config option specifies the claim (attribute) to use id primary user id attribute is not available.\n          \n          \n            \n            <2> An authorization server may not provide a single attribute to identify both regular users and clients. A client authenticating in its own name might provide a `client_id`. But a user authenticating using a username and password, to obtain a refresh token or an access token, might provide a `username` attribute in addition to a `client_id`. Use this fallback option to specify the username claim (attribute) to use if a primary user id attribute is not available.", "author": "PaulRMellor", "createdAt": "2020-05-12T08:37:11Z", "path": "documentation/modules/oauth/proc-oauth-authentication-broker-config.adoc", "diffHunk": "@@ -88,11 +88,33 @@ external:\n     clientSecret: <3>\n       secretName: my-cluster-oauth\n       key: clientSecret\n+    userNameClaim: preferred_username <4>\n ----\n --\n <1> URI of the token introspection endpoint.\n <2> Client ID to identify the client.\n <3> Client Secret and client ID is used for authentication.\n+<4> The token claim (or key) that contains the actual user name in the token. The user name is the _principal_ used to identify the user. The `userNameClaim` value will depend on the authorization server used.\n++\n+Depending on how you apply {oauth} authentication, and the type of authorization server, there are additional (optional) configuration settings you can use:\n++\n+[source,yaml,subs=\"+quotes,attributes\"]\n+----\n+  # ...\n+  authentication:\n+    type: oauth\n+    # ...\n+    checkIssuer: false <1>\n+    fallbackUserNameClaim: client_id <2>\n+    fallbackUserNamePrefix: client-account- <3>\n+    validTokenType: bearer <4>\n+    userInfoEndpointUri: <__https://<auth-server-address>/auth/realms/external/protocol/openid-connect/userinfo__> <5>\n+----\n+<1> Some authorization servers may not provide `iss` claim making it impossible to perform an issuer check. In that case do not specify `validIssuerUri` and set `checkIssuer` to `false`. Default is `true`.\n+<2> Some authorization servers may not provide a single attribute that can be used to identify both regular users, and clients. If client authenticates in its own name `client_id` may be provided, but if user is authenticated using username and password to obtain a refresh token or an access token, some `username` attribute may be provided in addition to `client_id`. This config option specifies the claim (attribute) to use id primary user id attribute is not available.", "originalCommit": "30b7b8a9436242b55ac10c5fb7c0d4a9a9f399a5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzU2Mjk2MQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2974#discussion_r423562961", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            <3> In situations where `fallbackUserNameClaim` is applicable it may also be necessary to prevent name collisions between the values of username claim, and those of fallback username claim. Consider a situaction where a client called `producer` exists, but also a regular user called `producer` exists. We must be able to differenciate between the two, which we do by prefixing the user id for client.\n          \n          \n            \n            <3> In situations where `fallbackUserNameClaim` is applicable, it may also be necessary to prevent name collisions between the values of the username claim, and those of the fallback username claim. Consider a situation where a client called `producer` exists, but also a regular user called `producer` exists. In order to differentiate between the two, you can use this property to add a prefix to the user id of the client.", "author": "PaulRMellor", "createdAt": "2020-05-12T08:40:35Z", "path": "documentation/modules/oauth/proc-oauth-authentication-broker-config.adoc", "diffHunk": "@@ -88,11 +88,33 @@ external:\n     clientSecret: <3>\n       secretName: my-cluster-oauth\n       key: clientSecret\n+    userNameClaim: preferred_username <4>\n ----\n --\n <1> URI of the token introspection endpoint.\n <2> Client ID to identify the client.\n <3> Client Secret and client ID is used for authentication.\n+<4> The token claim (or key) that contains the actual user name in the token. The user name is the _principal_ used to identify the user. The `userNameClaim` value will depend on the authorization server used.\n++\n+Depending on how you apply {oauth} authentication, and the type of authorization server, there are additional (optional) configuration settings you can use:\n++\n+[source,yaml,subs=\"+quotes,attributes\"]\n+----\n+  # ...\n+  authentication:\n+    type: oauth\n+    # ...\n+    checkIssuer: false <1>\n+    fallbackUserNameClaim: client_id <2>\n+    fallbackUserNamePrefix: client-account- <3>\n+    validTokenType: bearer <4>\n+    userInfoEndpointUri: <__https://<auth-server-address>/auth/realms/external/protocol/openid-connect/userinfo__> <5>\n+----\n+<1> Some authorization servers may not provide `iss` claim making it impossible to perform an issuer check. In that case do not specify `validIssuerUri` and set `checkIssuer` to `false`. Default is `true`.\n+<2> Some authorization servers may not provide a single attribute that can be used to identify both regular users, and clients. If client authenticates in its own name `client_id` may be provided, but if user is authenticated using username and password to obtain a refresh token or an access token, some `username` attribute may be provided in addition to `client_id`. This config option specifies the claim (attribute) to use id primary user id attribute is not available.\n+<3> In situations where `fallbackUserNameClaim` is applicable it may also be necessary to prevent name collisions between the values of username claim, and those of fallback username claim. Consider a situaction where a client called `producer` exists, but also a regular user called `producer` exists. We must be able to differenciate between the two, which we do by prefixing the user id for client.", "originalCommit": "30b7b8a9436242b55ac10c5fb7c0d4a9a9f399a5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzU2NTQxNg==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2974#discussion_r423565416", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            <4> (Only applicable when using `introspectionEndpointUri`) Depending on your authorization server, the Introspection Endpoint may or may not return `token_type` attribute. Also, it may contain different values. If this configuration setting is specified the Introspection Endpoint response has to contain the `token_type` attribute having the specified value.\n          \n          \n            \n            <4> (Only applicable when using `introspectionEndpointUri`) Depending on the authorization server you are using, the Introspection Endpoint may or may not return the `token_type` attribute., or it may contain different values. You can specify a valid token type value that the response from the Introspection Endpoint has to contain.", "author": "PaulRMellor", "createdAt": "2020-05-12T08:44:28Z", "path": "documentation/modules/oauth/proc-oauth-authentication-broker-config.adoc", "diffHunk": "@@ -88,11 +88,33 @@ external:\n     clientSecret: <3>\n       secretName: my-cluster-oauth\n       key: clientSecret\n+    userNameClaim: preferred_username <4>\n ----\n --\n <1> URI of the token introspection endpoint.\n <2> Client ID to identify the client.\n <3> Client Secret and client ID is used for authentication.\n+<4> The token claim (or key) that contains the actual user name in the token. The user name is the _principal_ used to identify the user. The `userNameClaim` value will depend on the authorization server used.\n++\n+Depending on how you apply {oauth} authentication, and the type of authorization server, there are additional (optional) configuration settings you can use:\n++\n+[source,yaml,subs=\"+quotes,attributes\"]\n+----\n+  # ...\n+  authentication:\n+    type: oauth\n+    # ...\n+    checkIssuer: false <1>\n+    fallbackUserNameClaim: client_id <2>\n+    fallbackUserNamePrefix: client-account- <3>\n+    validTokenType: bearer <4>\n+    userInfoEndpointUri: <__https://<auth-server-address>/auth/realms/external/protocol/openid-connect/userinfo__> <5>\n+----\n+<1> Some authorization servers may not provide `iss` claim making it impossible to perform an issuer check. In that case do not specify `validIssuerUri` and set `checkIssuer` to `false`. Default is `true`.\n+<2> Some authorization servers may not provide a single attribute that can be used to identify both regular users, and clients. If client authenticates in its own name `client_id` may be provided, but if user is authenticated using username and password to obtain a refresh token or an access token, some `username` attribute may be provided in addition to `client_id`. This config option specifies the claim (attribute) to use id primary user id attribute is not available.\n+<3> In situations where `fallbackUserNameClaim` is applicable it may also be necessary to prevent name collisions between the values of username claim, and those of fallback username claim. Consider a situaction where a client called `producer` exists, but also a regular user called `producer` exists. We must be able to differenciate between the two, which we do by prefixing the user id for client.\n+<4> (Only applicable when using `introspectionEndpointUri`) Depending on your authorization server, the Introspection Endpoint may or may not return `token_type` attribute. Also, it may contain different values. If this configuration setting is specified the Introspection Endpoint response has to contain the `token_type` attribute having the specified value.", "originalCommit": "30b7b8a9436242b55ac10c5fb7c0d4a9a9f399a5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzU2NjM4Mg==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2974#discussion_r423566382", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            <5> (Only applicable when using `introspectionEndpointUri`) The authorization server may be configured or implemented in such a way to not provide any identifiable information in Introspection Endpoint response. In order to obtain the user id you can configure the User Info Endpoint Uri as a fallback. The `userNameClaim`, `fallbackUserNameClaim`, and `fallbackUserNamePrefix` settings would the be applied to the response of User Info Endpoint.\n          \n          \n            \n            <5> (Only applicable when using `introspectionEndpointUri`) The authorization server may be configured or implemented in such a way to not provide any identifiable information in an Introspection Endpoint response. In order to obtain the user id, you can configure the URI of the User Info Endpoint as a fallback. The `userNameClaim`, `fallbackUserNameClaim`, and `fallbackUserNamePrefix` settings are applied to the response of User Info Endpoint.", "author": "PaulRMellor", "createdAt": "2020-05-12T08:45:52Z", "path": "documentation/modules/oauth/proc-oauth-authentication-broker-config.adoc", "diffHunk": "@@ -88,11 +88,33 @@ external:\n     clientSecret: <3>\n       secretName: my-cluster-oauth\n       key: clientSecret\n+    userNameClaim: preferred_username <4>\n ----\n --\n <1> URI of the token introspection endpoint.\n <2> Client ID to identify the client.\n <3> Client Secret and client ID is used for authentication.\n+<4> The token claim (or key) that contains the actual user name in the token. The user name is the _principal_ used to identify the user. The `userNameClaim` value will depend on the authorization server used.\n++\n+Depending on how you apply {oauth} authentication, and the type of authorization server, there are additional (optional) configuration settings you can use:\n++\n+[source,yaml,subs=\"+quotes,attributes\"]\n+----\n+  # ...\n+  authentication:\n+    type: oauth\n+    # ...\n+    checkIssuer: false <1>\n+    fallbackUserNameClaim: client_id <2>\n+    fallbackUserNamePrefix: client-account- <3>\n+    validTokenType: bearer <4>\n+    userInfoEndpointUri: <__https://<auth-server-address>/auth/realms/external/protocol/openid-connect/userinfo__> <5>\n+----\n+<1> Some authorization servers may not provide `iss` claim making it impossible to perform an issuer check. In that case do not specify `validIssuerUri` and set `checkIssuer` to `false`. Default is `true`.\n+<2> Some authorization servers may not provide a single attribute that can be used to identify both regular users, and clients. If client authenticates in its own name `client_id` may be provided, but if user is authenticated using username and password to obtain a refresh token or an access token, some `username` attribute may be provided in addition to `client_id`. This config option specifies the claim (attribute) to use id primary user id attribute is not available.\n+<3> In situations where `fallbackUserNameClaim` is applicable it may also be necessary to prevent name collisions between the values of username claim, and those of fallback username claim. Consider a situaction where a client called `producer` exists, but also a regular user called `producer` exists. We must be able to differenciate between the two, which we do by prefixing the user id for client.\n+<4> (Only applicable when using `introspectionEndpointUri`) Depending on your authorization server, the Introspection Endpoint may or may not return `token_type` attribute. Also, it may contain different values. If this configuration setting is specified the Introspection Endpoint response has to contain the `token_type` attribute having the specified value.\n+<5> (Only applicable when using `introspectionEndpointUri`) The authorization server may be configured or implemented in such a way to not provide any identifiable information in Introspection Endpoint response. In order to obtain the user id you can configure the User Info Endpoint Uri as a fallback. The `userNameClaim`, `fallbackUserNameClaim`, and `fallbackUserNamePrefix` settings would the be applied to the response of User Info Endpoint.", "originalCommit": "30b7b8a9436242b55ac10c5fb7c0d4a9a9f399a5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzU2OTc2Nw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2974#discussion_r423569767", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            <4> If the authorization server requires the client to specify the `scope` when requesting the token from the token endpoint, you can provide it - in this case it is 'any'.\n          \n          \n            \n            <4> If the authorization server requires the client to specify the `scope` when requesting the token from the token endpoint, you can provide it - in this case it is `any`.", "author": "PaulRMellor", "createdAt": "2020-05-12T08:50:34Z", "path": "documentation/modules/oauth/proc-oauth-kafka-config.adoc", "diffHunk": "@@ -95,10 +95,12 @@ spec:\n     disableTlsHostnameVerification: true <1>\n     checkAccessTokenType: false <2>\n     accessTokenIsJwt: false <3>\n+    scope: any <4>\n ----\n <1> (Optional) Disable TLS hostname verification. Default is `false`.\n <2> If the authorization server does not return a `typ` (type) claim inside the JWT token, you can apply `checkAccessTokenType: false` to skip the token type check. Default is `true`.\n <3> If you are using opaque tokens, you can apply `accessTokenIsJwt: false` so that access tokens are not treated as JWT tokens.\n+<4> If the authorization server requires the client to specify the `scope` when requesting the token from the token endpoint, you can provide it - in this case it is 'any'.", "originalCommit": "30b7b8a9436242b55ac10c5fb7c0d4a9a9f399a5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzU3MDQxNw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2974#discussion_r423570417", "bodyText": "Can we use any with any authorization server that requires a scope? Or is any the default for authorizationservers that don't need a specific value?", "author": "PaulRMellor", "createdAt": "2020-05-12T08:51:34Z", "path": "documentation/modules/oauth/proc-oauth-kafka-config.adoc", "diffHunk": "@@ -95,10 +95,12 @@ spec:\n     disableTlsHostnameVerification: true <1>\n     checkAccessTokenType: false <2>\n     accessTokenIsJwt: false <3>\n+    scope: any <4>\n ----\n <1> (Optional) Disable TLS hostname verification. Default is `false`.\n <2> If the authorization server does not return a `typ` (type) claim inside the JWT token, you can apply `checkAccessTokenType: false` to skip the token type check. Default is `true`.\n <3> If you are using opaque tokens, you can apply `accessTokenIsJwt: false` so that access tokens are not treated as JWT tokens.\n+<4> If the authorization server requires the client to specify the `scope` when requesting the token from the token endpoint, you can provide it - in this case it is 'any'.", "originalCommit": "30b7b8a9436242b55ac10c5fb7c0d4a9a9f399a5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzc4ODIxOA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2974#discussion_r423788218", "bodyText": "No, this is just an example. There are no standard specified possible valiues. It can be anything - up to how security is configured on the server.", "author": "mstruk", "createdAt": "2020-05-12T14:39:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzU3MDQxNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzU3MTYxOQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2974#discussion_r423571619", "bodyText": "Don't need to wrap in quotes", "author": "PaulRMellor", "createdAt": "2020-05-12T08:53:22Z", "path": "helm-charts/strimzi-kafka-operator/templates/040-Crd-kafka.yaml", "diffHunk": "@@ -279,14 +300,26 @@ spec:\n                                 uses SASL SCRAM-SHA-512 Authentication. `tls` type\n                                 uses TLS Client Authentication. `tls` type is supported\n                                 only on TLS listeners.\n+                            userInfoEndpointUri:\n+                              type: string\n+                              description: 'URI of the User Info Endpoint to use as", "originalCommit": "30b7b8a9436242b55ac10c5fb7c0d4a9a9f399a5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzU3MjA0OQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2974#discussion_r423572049", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                            used for user id. '\n          \n          \n            \n                                            used for user id.", "author": "PaulRMellor", "createdAt": "2020-05-12T08:54:02Z", "path": "helm-charts/strimzi-kafka-operator/templates/040-Crd-kafka.yaml", "diffHunk": "@@ -451,14 +505,26 @@ spec:\n                                 uses SASL SCRAM-SHA-512 Authentication. `tls` type\n                                 uses TLS Client Authentication. `tls` type is supported\n                                 only on TLS listeners.\n+                            userInfoEndpointUri:\n+                              type: string\n+                              description: 'URI of the User Info Endpoint to use as\n+                                a fallback to obtaining user id when Introspection\n+                                Endpoint does not return information that could be\n+                                used for user id. '", "originalCommit": "30b7b8a9436242b55ac10c5fb7c0d4a9a9f399a5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzU3MjQzOQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2974#discussion_r423572439", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                            used for user id. '\n          \n          \n            \n                                            used for user id.", "author": "PaulRMellor", "createdAt": "2020-05-12T08:54:35Z", "path": "helm-charts/strimzi-kafka-operator/templates/040-Crd-kafka.yaml", "diffHunk": "@@ -647,14 +734,26 @@ spec:\n                                 uses SASL SCRAM-SHA-512 Authentication. `tls` type\n                                 uses TLS Client Authentication. `tls` type is supported\n                                 only on TLS listeners.\n+                            userInfoEndpointUri:\n+                              type: string\n+                              description: 'URI of the User Info Endpoint to use as\n+                                a fallback to obtaining user id when Introspection\n+                                Endpoint does not return information that could be\n+                                used for user id. '", "originalCommit": "30b7b8a9436242b55ac10c5fb7c0d4a9a9f399a5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzU3MzA5OA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2974#discussion_r423573098", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                            used for user id. '\n          \n          \n            \n                                            used for user id.", "author": "PaulRMellor", "createdAt": "2020-05-12T08:55:34Z", "path": "install/cluster-operator/040-Crd-kafka.yaml", "diffHunk": "@@ -274,14 +295,26 @@ spec:\n                                 uses SASL SCRAM-SHA-512 Authentication. `tls` type\n                                 uses TLS Client Authentication. `tls` type is supported\n                                 only on TLS listeners.\n+                            userInfoEndpointUri:\n+                              type: string\n+                              description: 'URI of the User Info Endpoint to use as\n+                                a fallback to obtaining user id when Introspection\n+                                Endpoint does not return information that could be\n+                                used for user id. '", "originalCommit": "30b7b8a9436242b55ac10c5fb7c0d4a9a9f399a5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzU3MzU5NQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2974#discussion_r423573595", "bodyText": "Quotes can be removed", "author": "PaulRMellor", "createdAt": "2020-05-12T08:56:18Z", "path": "install/cluster-operator/040-Crd-kafka.yaml", "diffHunk": "@@ -446,14 +500,26 @@ spec:\n                                 uses SASL SCRAM-SHA-512 Authentication. `tls` type\n                                 uses TLS Client Authentication. `tls` type is supported\n                                 only on TLS listeners.\n+                            userInfoEndpointUri:\n+                              type: string\n+                              description: 'URI of the User Info Endpoint to use as", "originalCommit": "30b7b8a9436242b55ac10c5fb7c0d4a9a9f399a5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzU3Mzk3OA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2974#discussion_r423573978", "bodyText": "Quotes can be removed", "author": "PaulRMellor", "createdAt": "2020-05-12T08:56:55Z", "path": "install/cluster-operator/040-Crd-kafka.yaml", "diffHunk": "@@ -642,14 +729,26 @@ spec:\n                                 uses SASL SCRAM-SHA-512 Authentication. `tls` type\n                                 uses TLS Client Authentication. `tls` type is supported\n                                 only on TLS listeners.\n+                            userInfoEndpointUri:\n+                              type: string\n+                              description: 'URI of the User Info Endpoint to use as", "originalCommit": "30b7b8a9436242b55ac10c5fb7c0d4a9a9f399a5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "04fe0d197f306c84e8f3abe2de79321a34bbeee6", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/04fe0d197f306c84e8f3abe2de79321a34bbeee6", "message": "Apply suggestions from code review\n\nCo-authored-by: PaulRMellor <47596553+PaulRMellor@users.noreply.github.com>\nSigned-off-by: Marko Strukelj <marko.strukelj@gmail.com>", "committedDate": "2020-05-12T14:44:29Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDI0MTYzMQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2974#discussion_r424241631", "bodyText": "Can you explain in the description the effect of not defining this, since there's \"no default\".", "author": "tombentley", "createdAt": "2020-05-13T07:53:03Z", "path": "api/src/main/java/io/strimzi/api/kafka/model/authentication/KafkaClientAuthenticationOAuth.java", "diffHunk": "@@ -56,6 +57,16 @@ public void setClientId(String clientId) {\n         this.clientId = clientId;\n     }\n \n+    @Description(\"OAuth scope to use when authenticating against the authorization server. No default value.\")", "originalCommit": "5f8268a5d4ee14609fbfc6dc6b8e9a85839775bd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY4MTc1Ng==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2974#discussion_r424681756", "bodyText": "I added some more explanation.", "author": "mstruk", "createdAt": "2020-05-13T19:32:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDI0MTYzMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDI0MjQyNw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2974#discussion_r424242427", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        \"Useful when `client_credentials` authentication only results in the client id being provided in another claim. \" +\n          \n          \n            \n                        \"This is useful when `client_credentials` authentication only results in the client id being provided in another claim. \" +", "author": "tombentley", "createdAt": "2020-05-13T07:54:24Z", "path": "api/src/main/java/io/strimzi/api/kafka/model/listener/KafkaListenerAuthenticationOAuth.java", "diffHunk": "@@ -141,7 +157,29 @@ public void setUserNameClaim(String userNameClaim) {\n         this.userNameClaim = userNameClaim;\n     }\n \n-    @Description(\"Configure whether the access token type check should be performed or not. This should be set to `false` \" +\n+    @Description(\"The fallback username claim to be used for the user id if the claim specified by `userNameClaim` is not present. \" +\n+            \"Useful when `client_credentials` authentication only results in the client id being provided in another claim. \" +", "originalCommit": "5f8268a5d4ee14609fbfc6dc6b8e9a85839775bd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDI0Mjg3Ng==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2974#discussion_r424242876", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        \"It only takes effect if `fallbackUserNameClaim` is set, and the value is present for the claim. \" +\n          \n          \n            \n                        \"This only takes effect if `fallbackUserNameClaim` is true, and the value is present for the claim. \" +", "author": "tombentley", "createdAt": "2020-05-13T07:55:10Z", "path": "api/src/main/java/io/strimzi/api/kafka/model/listener/KafkaListenerAuthenticationOAuth.java", "diffHunk": "@@ -141,7 +157,29 @@ public void setUserNameClaim(String userNameClaim) {\n         this.userNameClaim = userNameClaim;\n     }\n \n-    @Description(\"Configure whether the access token type check should be performed or not. This should be set to `false` \" +\n+    @Description(\"The fallback username claim to be used for the user id if the claim specified by `userNameClaim` is not present. \" +\n+            \"Useful when `client_credentials` authentication only results in the client id being provided in another claim. \" +\n+            \"It only takes effect if `userNameClaim` is set.\")\n+    public String getFallbackUserNameClaim() {\n+        return fallbackUserNameClaim;\n+    }\n+\n+    public void setFallbackUserNameClaim(String fallbackUserNameClaim) {\n+        this.fallbackUserNameClaim = fallbackUserNameClaim;\n+    }\n+\n+    @Description(\"The prefix to use with the value of `fallbackUserNameClaim` to construct the user id. \" +\n+            \"It only takes effect if `fallbackUserNameClaim` is set, and the value is present for the claim. \" +", "originalCommit": "5f8268a5d4ee14609fbfc6dc6b8e9a85839775bd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDI1MjA5Mw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2974#discussion_r424252093", "bodyText": "There's no need for the @SuppressWarnings if you factor out\n    static void addOption(List<String> options, String option, String value) {\n        if (value != null) options.add(String.format(\"%s=\\\"%s\\\"\", option, value));\n    }\nWhich works for all the String-valued options. For the boolean ones, is there anything to be gained by only adding the option when the value is true/false, or would it work as well if we always added the option? If the latter then the same method should work for those too.", "author": "tombentley", "createdAt": "2020-05-13T08:10:45Z", "path": "cluster-operator/src/main/java/io/strimzi/operator/cluster/model/KafkaBrokerConfigurationBuilder.java", "diffHunk": "@@ -370,19 +370,25 @@ private String getSecurityProtocol(boolean tls, boolean sasl)   {\n      * @param oauth     OAuth type authentication object\n      * @return  Returns the builder instance\n      */\n+    @SuppressWarnings({\"checkstyle:CyclomaticComplexity\", \"checkstyle:NPathComplexity\"})\n     /*test*/ static List<String> getOAuthOptions(KafkaListenerAuthenticationOAuth oauth)  {\n         List<String> options = new ArrayList<>(5);\n \n         if (oauth.getClientId() != null) options.add(String.format(\"%s=\\\"%s\\\"\", ServerConfig.OAUTH_CLIENT_ID, oauth.getClientId()));\n         if (oauth.getValidIssuerUri() != null) options.add(String.format(\"%s=\\\"%s\\\"\", ServerConfig.OAUTH_VALID_ISSUER_URI, oauth.getValidIssuerUri()));\n+        if (!oauth.isCheckIssuer()) options.add(String.format(\"%s=\\\"%s\\\"\", ServerConfig.OAUTH_CHECK_ISSUER, false));\n         if (oauth.getJwksEndpointUri() != null) options.add(String.format(\"%s=\\\"%s\\\"\", ServerConfig.OAUTH_JWKS_ENDPOINT_URI, oauth.getJwksEndpointUri()));\n         if (oauth.getJwksRefreshSeconds() != null && oauth.getJwksRefreshSeconds() > 0) options.add(String.format(\"%s=\\\"%d\\\"\", ServerConfig.OAUTH_JWKS_REFRESH_SECONDS, oauth.getJwksRefreshSeconds()));\n         if (oauth.getJwksRefreshSeconds() != null && oauth.getJwksExpirySeconds() > 0) options.add(String.format(\"%s=\\\"%d\\\"\", ServerConfig.OAUTH_JWKS_EXPIRY_SECONDS, oauth.getJwksExpirySeconds()));\n         if (oauth.isEnableECDSA()) options.add(String.format(\"%s=\\\"%s\\\"\", ServerConfig.OAUTH_CRYPTO_PROVIDER_BOUNCYCASTLE, true));\n         if (oauth.getIntrospectionEndpointUri() != null) options.add(String.format(\"%s=\\\"%s\\\"\", ServerConfig.OAUTH_INTROSPECTION_ENDPOINT_URI, oauth.getIntrospectionEndpointUri()));\n+        if (oauth.getUserInfoEndpointUri() != null) options.add(String.format(\"%s=\\\"%s\\\"\", ServerConfig.OAUTH_USERINFO_ENDPOINT_URI, oauth.getUserInfoEndpointUri()));\n         if (oauth.getUserNameClaim() != null) options.add(String.format(\"%s=\\\"%s\\\"\", ServerConfig.OAUTH_USERNAME_CLAIM, oauth.getUserNameClaim()));\n+        if (oauth.getFallbackUserNameClaim() != null) options.add(String.format(\"%s=\\\"%s\\\"\", ServerConfig.OAUTH_FALLBACK_USERNAME_CLAIM, oauth.getFallbackUserNameClaim()));\n+        if (oauth.getFallbackUserNamePrefix() != null) options.add(String.format(\"%s=\\\"%s\\\"\", ServerConfig.OAUTH_FALLBACK_USERNAME_PREFIX, oauth.getFallbackUserNamePrefix()));\n         if (!oauth.isAccessTokenIsJwt()) options.add(String.format(\"%s=\\\"%s\\\"\", ServerConfig.OAUTH_ACCESS_TOKEN_IS_JWT, false));\n         if (!oauth.isCheckAccessTokenType()) options.add(String.format(\"%s=\\\"%s\\\"\", ServerConfig.OAUTH_CHECK_ACCESS_TOKEN_TYPE, false));\n+        if (oauth.getValidTokenType() != null) options.add(String.format(\"%s=\\\"%s\\\"\", ServerConfig.OAUTH_VALID_TOKEN_TYPE, oauth.getValidTokenType()));\n         if (oauth.isDisableTlsHostnameVerification()) options.add(String.format(\"%s=\\\"%s\\\"\", ServerConfig.OAUTH_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM, \"\"));", "originalCommit": "5f8268a5d4ee14609fbfc6dc6b8e9a85839775bd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ0MjQyMQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2974#discussion_r424442421", "bodyText": "Nice solution, I'll give it a try.", "author": "mstruk", "createdAt": "2020-05-13T13:35:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDI1MjA5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY4MTkxNw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2974#discussion_r424681917", "bodyText": "Looks like it works.", "author": "mstruk", "createdAt": "2020-05-13T19:32:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDI1MjA5Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDI1NjMzOA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2974#discussion_r424256338", "bodyText": "This does make me wonder if this flat map approach is ideal, or whether we should be expressing these dependencies between parameters structurally:\nintrospectionEndpoint:\n   uri: <__https://<auth-server-address>/auth/realms/external/protocol/openid-connect/token/introspect__>\n  validTokenType: bearer\n  userInfoEndpointUri: <__https://<auth-server-address>/auth/realms/external/protocol/openid-connect/userinfo__>\nThis could be done compatibly by deprecating the introspectionEndpointUri, validTokenType and userInfoEndpointUri and adding the introspectionEndpoint as their replacement. It's not worth doing in this PR, for sure, but it might be worth considering if these dependencies get more complex in the future.", "author": "tombentley", "createdAt": "2020-05-13T08:17:48Z", "path": "documentation/modules/oauth/proc-oauth-authentication-broker-config.adoc", "diffHunk": "@@ -88,11 +88,33 @@ external:\n     clientSecret: <3>\n       secretName: my-cluster-oauth\n       key: clientSecret\n+    userNameClaim: preferred_username <4>\n ----\n --\n <1> URI of the token introspection endpoint.\n <2> Client ID to identify the client.\n <3> Client Secret and client ID is used for authentication.\n+<4> The token claim (or key) that contains the actual user name in the token. The user name is the _principal_ used to identify the user. The `userNameClaim` value will depend on the authorization server used.\n++\n+Depending on how you apply {oauth} authentication, and the type of authorization server, there are additional (optional) configuration settings you can use:\n++\n+[source,yaml,subs=\"+quotes,attributes\"]\n+----\n+  # ...\n+  authentication:\n+    type: oauth\n+    # ...\n+    checkIssuer: false <1>\n+    fallbackUserNameClaim: client_id <2>\n+    fallbackUserNamePrefix: client-account- <3>\n+    validTokenType: bearer <4>\n+    userInfoEndpointUri: <__https://<auth-server-address>/auth/realms/external/protocol/openid-connect/userinfo__> <5>\n+----\n+<1> If your authorization server does not provide an `iss` claim, it is not possible to perform an issuer check. In this situation, set `checkIssuer` to `false` and do not specify a `validIssuerUri`. Default is `true`.\n+<2> An authorization server may not provide a single attribute to identify both regular users and clients. A client authenticating in its own name might provide a `client_id`. But a user authenticating using a username and password, to obtain a refresh token or an access token, might provide a `username` attribute in addition to a `client_id`. Use this fallback option to specify the username claim (attribute) to use if a primary user id attribute is not available.\n+<3> In situations where `fallbackUserNameClaim` is applicable, it may also be necessary to prevent name collisions between the values of the username claim, and those of the fallback username claim. Consider a situation where a client called `producer` exists, but also a regular user called `producer` exists. In order to differentiate between the two, you can use this property to add a prefix to the user id of the client.\n+<4> (Only applicable when using `introspectionEndpointUri`) Depending on the authorization server you are using, the Introspection Endpoint may or may not return the `token_type` attribute., or it may contain different values. You can specify a valid token type value that the response from the Introspection Endpoint has to contain.\n+<5> (Only applicable when using `introspectionEndpointUri`) The authorization server may be configured or implemented in such a way to not provide any identifiable information in an Introspection Endpoint response. In order to obtain the user id, you can configure the URI of the User Info Endpoint as a fallback. The `userNameClaim`, `fallbackUserNameClaim`, and `fallbackUserNamePrefix` settings are applied to the response of User Info Endpoint.", "originalCommit": "5f8268a5d4ee14609fbfc6dc6b8e9a85839775bd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "f2475722fffd8e9319188f6885d78f2d88ec6a4d", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/f2475722fffd8e9319188f6885d78f2d88ec6a4d", "message": "More proper fix for NPathComplexity warning\n\nSigned-off-by: Marko Strukelj <marko.strukelj@gmail.com>", "committedDate": "2020-05-13T18:27:03Z", "type": "forcePushed"}, {"oid": "984496049653b4dc821d0a17cb9a4bc084cb0efa", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/984496049653b4dc821d0a17cb9a4bc084cb0efa", "message": "More proper fix for NPathComplexity warning\n\nSigned-off-by: Marko Strukelj <marko.strukelj@gmail.com>", "committedDate": "2020-05-13T19:26:30Z", "type": "forcePushed"}, {"oid": "202d86113d0805fa221deb9d3a75b38905e39249", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/202d86113d0805fa221deb9d3a75b38905e39249", "message": "More proper fix for NPathComplexity warning\n\nSigned-off-by: Marko Strukelj <marko.strukelj@gmail.com>", "committedDate": "2020-05-13T19:30:23Z", "type": "forcePushed"}, {"oid": "d83571fc7638f808321de7847ecd6974e7c58de7", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/d83571fc7638f808321de7847ecd6974e7c58de7", "message": "Add additional config options available in Strimzi Kafka OAuth 0.5.0\n\nSigned-off-by: Marko Strukelj <marko.strukelj@gmail.com>", "committedDate": "2020-05-14T12:12:42Z", "type": "commit"}, {"oid": "06da8af82cfc075a5ba7ca1452a0725afbcd5365", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/06da8af82cfc075a5ba7ca1452a0725afbcd5365", "message": "Add Helm charts\n\nSigned-off-by: Marko Strukelj <marko.strukelj@gmail.com>", "committedDate": "2020-05-14T12:12:48Z", "type": "commit"}, {"oid": "4b6c2db6293f73084292a7393337a884a1b0a716", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/4b6c2db6293f73084292a7393337a884a1b0a716", "message": "Relax the oauth config constraints for some options\n\nSigned-off-by: Marko Strukelj <marko.strukelj@gmail.com>", "committedDate": "2020-05-14T12:12:48Z", "type": "commit"}, {"oid": "1576bddda3fe3bb05d3ab6a0fb85982043e8d3bc", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/1576bddda3fe3bb05d3ab6a0fb85982043e8d3bc", "message": "Add staging repo for strimzi-kafka-oauth 0.5.0\n\nTODO: Remove this before merging the PR\n\nSigned-off-by: Marko Strukelj <marko.strukelj@gmail.com>", "committedDate": "2020-05-14T12:12:48Z", "type": "commit"}, {"oid": "29a7d5988c4aa9270ecc680a50ff4c6441795611", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/29a7d5988c4aa9270ecc680a50ff4c6441795611", "message": "Update staging repo for strimzi-kafka-oauth 0.5.0 (RC2)\n\nTODO: Remove this before merging the PR\n\nSigned-off-by: Marko Strukelj <marko.strukelj@gmail.com>", "committedDate": "2020-05-14T12:12:48Z", "type": "commit"}, {"oid": "981a29dbcee5b0841cc21571d696d94bd36ab74a", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/981a29dbcee5b0841cc21571d696d94bd36ab74a", "message": "Systemtests failures\n\nSigned-off-by: Marko Strukelj <marko.strukelj@gmail.com>", "committedDate": "2020-05-14T12:12:48Z", "type": "commit"}, {"oid": "fd5e8f1acca9aed0c7e33fdc1597c7c8664ab19f", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/fd5e8f1acca9aed0c7e33fdc1597c7c8664ab19f", "message": "Remove scope from listener config, and improve CRD docs.\n\nSigned-off-by: Marko Strukelj <marko.strukelj@gmail.com>", "committedDate": "2020-05-14T12:12:49Z", "type": "commit"}, {"oid": "3dedcedc72213d7a5ca7eb9bd9ea50613e10c3be", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/3dedcedc72213d7a5ca7eb9bd9ea50613e10c3be", "message": "Fix error found by spotbugs\n\nSigned-off-by: Marko Strukelj <marko.strukelj@gmail.com>", "committedDate": "2020-05-14T12:12:49Z", "type": "commit"}, {"oid": "bc6aa3526c1fb4f2a28b6b73f58c7a75ce006ac8", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/bc6aa3526c1fb4f2a28b6b73f58c7a75ce006ac8", "message": "Some documentation\n\nSigned-off-by: Marko Strukelj <marko.strukelj@gmail.com>", "committedDate": "2020-05-14T12:12:49Z", "type": "commit"}, {"oid": "2910a812f2eecc1abdc7f42efdaf700d1feeb08c", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/2910a812f2eecc1abdc7f42efdaf700d1feeb08c", "message": "Remove strimzi-kafka-oauth-0.5.0 staging repo\n\nSigned-off-by: Marko Strukelj <marko.strukelj@gmail.com>", "committedDate": "2020-05-14T12:12:49Z", "type": "commit"}, {"oid": "1adec81ad855afb4ceeb289caf719e4a5d2dcbcd", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/1adec81ad855afb4ceeb289caf719e4a5d2dcbcd", "message": "Fix documentation\n\nSigned-off-by: Marko Strukelj <marko.strukelj@gmail.com>", "committedDate": "2020-05-14T12:12:49Z", "type": "commit"}, {"oid": "ddcc23504026eee06da9f2b1202b06866ff0e7d2", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/ddcc23504026eee06da9f2b1202b06866ff0e7d2", "message": "Add @SuppressWarnings rather than use suppressions.xml\n\nSigned-off-by: Marko Strukelj <marko.strukelj@gmail.com>", "committedDate": "2020-05-14T12:12:49Z", "type": "commit"}, {"oid": "054ca8a3fea8bc9617e7bc81c96c9d947c4a4bb1", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/054ca8a3fea8bc9617e7bc81c96c9d947c4a4bb1", "message": "Apply suggestions from code review\n\nCo-authored-by: PaulRMellor <47596553+PaulRMellor@users.noreply.github.com>\nSigned-off-by: Marko Strukelj <marko.strukelj@gmail.com>", "committedDate": "2020-05-14T12:12:49Z", "type": "commit"}, {"oid": "493c367dcab5a0eb4b0e97fb986cd1fe8181b1ef", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/493c367dcab5a0eb4b0e97fb986cd1fe8181b1ef", "message": "Documentation fixes\n\nSigned-off-by: Marko Strukelj <marko.strukelj@gmail.com>", "committedDate": "2020-05-14T12:12:49Z", "type": "commit"}, {"oid": "9e248f68cbc29d0af52d4c5ecc362269e2a6257e", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/9e248f68cbc29d0af52d4c5ecc362269e2a6257e", "message": "Documentation fixes\n\nSigned-off-by: Marko Strukelj <marko.strukelj@gmail.com>", "committedDate": "2020-05-14T12:12:49Z", "type": "commit"}, {"oid": "295df105cba60f01b7d4fa777f3487bd061460cc", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/295df105cba60f01b7d4fa777f3487bd061460cc", "message": "Apply suggestions from code review\n\nCo-authored-by: Tom Bentley <tombentley@users.noreply.github.com>\nSigned-off-by: Marko Strukelj <marko.strukelj@gmail.com>", "committedDate": "2020-05-14T12:12:49Z", "type": "commit"}, {"oid": "99c9038d68765f602d56e514ef9ba131eddc6601", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/99c9038d68765f602d56e514ef9ba131eddc6601", "message": "Documentation fixes\n\nSigned-off-by: Marko Strukelj <marko.strukelj@gmail.com>", "committedDate": "2020-05-14T12:12:49Z", "type": "commit"}, {"oid": "9b74c2591ab98f29399e7497340be31438b6d8bf", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/9b74c2591ab98f29399e7497340be31438b6d8bf", "message": "More proper fix for NPathComplexity warning\n\nSigned-off-by: Marko Strukelj <marko.strukelj@gmail.com>", "committedDate": "2020-05-14T12:12:49Z", "type": "commit"}, {"oid": "00b10806e988a0f43b3b215f8fd0a4a340eb8126", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/00b10806e988a0f43b3b215f8fd0a4a340eb8126", "message": "Fix test failures for KafkaBrokerConfigurationBuilder\n\nSigned-off-by: Marko Strukelj <marko.strukelj@gmail.com>", "committedDate": "2020-05-14T12:12:49Z", "type": "commit"}, {"oid": "00b10806e988a0f43b3b215f8fd0a4a340eb8126", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/00b10806e988a0f43b3b215f8fd0a4a340eb8126", "message": "Fix test failures for KafkaBrokerConfigurationBuilder\n\nSigned-off-by: Marko Strukelj <marko.strukelj@gmail.com>", "committedDate": "2020-05-14T12:12:49Z", "type": "forcePushed"}]}