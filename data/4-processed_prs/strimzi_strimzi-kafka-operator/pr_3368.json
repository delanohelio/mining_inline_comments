{"pr_number": 3368, "pr_title": "Add option to select replica movement strategy for rebalances", "pr_createdAt": "2020-07-23T10:28:16Z", "pr_url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3368", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTM5OTYzNg==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3368#discussion_r459399636", "bodyText": "do you think we could use a List<String> ? the order should be preserved when serialized/deserialized right? or am I wrong?", "author": "ppatierno", "createdAt": "2020-07-23T12:06:36Z", "path": "api/src/main/java/io/strimzi/api/kafka/model/KafkaRebalanceSpec.java", "diffHunk": "@@ -41,6 +41,7 @@\n     private int concurrentIntraBrokerPartitionMovements;\n     private int concurrentLeaderMovements;\n     private long replicationThrottle;\n+    private String replicaMovementStrategies;", "originalCommit": "b3cc8a836ff4d67c1a599ac980ca55aa295c70ed", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQxMjMxNA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3368#discussion_r459412314", "bodyText": "The order should be preserved. This is like the goals list in the cruiseControl.spec.", "author": "tomncooper", "createdAt": "2020-07-23T12:30:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTM5OTYzNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQxMzc3Mg==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3368#discussion_r459413772", "bodyText": "So isn't it much better having a YAML array as we have for goals instead of a string with comma separated values? Just my 2 cents, but no need to change if you feel it's better in the current way. I just found YAML array a better fit for this field.", "author": "ppatierno", "createdAt": "2020-07-23T12:33:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTM5OTYzNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQxNTgzNw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3368#discussion_r459415837", "bodyText": "We don't have a YAML array for the goals config in the Kafka CR, we have a single comma separated string split over several lines:\ncruiseControl:\n    capacity:\n      networkIn: 10000KB/s\n      networkOut: 10000KB/s\n    config:\n      default.goals: >\n           com.linkedin.kafka.cruisecontrol.analyzer.goals.RackAwareGoal,\n           com.linkedin.kafka.cruisecontrol.analyzer.goals.ReplicaCapacityGoal,\n           com.linkedin.kafka.cruisecontrol.analyzer.goals.DiskCapacityGoal", "author": "tomncooper", "createdAt": "2020-07-23T12:37:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTM5OTYzNg=="}], "type": "inlineReview"}, {"oid": "1878bb85d9927fe3d205c2d73480e6f0168d75d8", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/1878bb85d9927fe3d205c2d73480e6f0168d75d8", "message": "Added option to select replica movement strategy\n\nSigned-off-by: Thomas Cooper <tcooper@redhat.com>", "committedDate": "2020-07-23T16:11:08Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTYyMzc2NA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3368#discussion_r459623764", "bodyText": "Not a native speaker ... but totally random sounds very informal for documentation. I also doubt it is really random - i.e. randomizing the list of movements ... I guess it might be just as it is generated by some algo or something like that I guess. Wouldn't something like By default BaseReplicaMovementStrategy is used, which moves the replicas without any specific order. be a bit better?", "author": "scholzj", "createdAt": "2020-07-23T17:49:04Z", "path": "api/src/main/java/io/strimzi/api/kafka/model/KafkaRebalanceSpec.java", "diffHunk": "@@ -118,6 +119,15 @@ public void setReplicationThrottle(long bandwidth) {\n         this.replicationThrottle = bandwidth;\n     }\n \n+    @Description(\"A list of strategies used to determine the execution order for the generated optimization proposal. By default BaseReplicaMovementStrategy is used, which is totally random.\")", "originalCommit": "1878bb85d9927fe3d205c2d73480e6f0168d75d8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY5OTEwOQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3368#discussion_r459699109", "bodyText": "Agreed with Jakub here, his wording looks good to me, or if it is truly random (or atleast different with the same input) - then it might be worth saying it is non-deterministic", "author": "samuel-hawker", "createdAt": "2020-07-23T20:08:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTYyMzc2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTkyODU4Mw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3368#discussion_r459928583", "bodyText": "Sorry, this is copy of CC's wording, which I removed from other docstrings but didn't change here. I will change it.", "author": "tomncooper", "createdAt": "2020-07-24T08:49:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTYyMzc2NA=="}], "type": "inlineReview"}, {"oid": "a742c5e8dc84e50c5e8fd10ebbab66a2f16e3c12", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/a742c5e8dc84e50c5e8fd10ebbab66a2f16e3c12", "message": "Added option to select replica movement strategy\n\nSigned-off-by: Thomas Cooper <tcooper@redhat.com>", "committedDate": "2020-07-24T09:10:44Z", "type": "forcePushed"}, {"oid": "3f4b2da05024220ed30e64b3bb8ed0f6986046fd", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/3f4b2da05024220ed30e64b3bb8ed0f6986046fd", "message": "Added option to select replica movement strategy\n\nSigned-off-by: Thomas Cooper <tcooper@redhat.com>", "committedDate": "2020-07-24T09:41:59Z", "type": "forcePushed"}, {"oid": "82635e5bcc77c670fb19b51e7864140be6dc1326", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/82635e5bcc77c670fb19b51e7864140be6dc1326", "message": "Added option to select replica movement strategy\n\nSigned-off-by: Thomas Cooper <tcooper@redhat.com>", "committedDate": "2020-07-29T11:17:29Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzEwMzk1MA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3368#discussion_r463103950", "bodyText": "Add an introduction to the module:\nYou can adjust several performance tuning options for cluster rebalances. These options control how partition and leadership movements in a rebalance are executed, as well as the bandwidth that is allocated to a rebalance operation.", "author": "laidan6000", "createdAt": "2020-07-30T16:00:52Z", "path": "documentation/modules/cruise-control/con-rebalance-performance.adoc", "diffHunk": "@@ -6,6 +6,8 @@\n \n = Rebalance performance tuning overview \n ", "originalCommit": "82635e5bcc77c670fb19b51e7864140be6dc1326", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU1MTA0MA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3368#discussion_r463551040", "bodyText": "Please can you rephrase this paragraph as follows\nOptimization proposals are comprised of separate partition reassignment commands. When you approve a proposal, the Cruise Control server applies these commands to the Kafka cluster.\nA partition reassignment command consists of either of the following types of operations:", "author": "laidan6000", "createdAt": "2020-07-31T11:13:23Z", "path": "documentation/modules/cruise-control/con-rebalance-performance.adoc", "diffHunk": "@@ -6,6 +6,8 @@\n \n = Rebalance performance tuning overview \n \n+== Partition reassignment commands\n+\n When an xref:con-optimization-proposals-{context}[optimization proposal] is xref:proc-approving-optimization-proposal-{context}[approved], the partition reassignment commands that comprise the proposal are applied to the Kafka cluster by the Cruise Control server. ", "originalCommit": "82635e5bcc77c670fb19b51e7864140be6dc1326", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU1NjYzMA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3368#discussion_r463556630", "bodyText": "Please rephrase the first sentence:\nCruise Control issues partition reassignment commands to the Kafka cluster in batches.", "author": "laidan6000", "createdAt": "2020-07-31T11:28:28Z", "path": "documentation/modules/cruise-control/con-rebalance-performance.adoc", "diffHunk": "@@ -17,32 +19,56 @@ These commands consist of two types of operations:\n \n Cruise Control batches up these reassignment commands and issues them to the Kafka cluster. ", "originalCommit": "82635e5bcc77c670fb19b51e7864140be6dc1326", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzYxNTUxOQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3368#discussion_r463615519", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            == Rebalance tuning options\n          \n          \n            \n            [discrete]\n          \n          \n            \n            == Rebalance tuning options", "author": "laidan6000", "createdAt": "2020-07-31T13:37:38Z", "path": "documentation/modules/cruise-control/con-rebalance-performance.adoc", "diffHunk": "@@ -17,32 +19,56 @@ These commands consist of two types of operations:\n \n Cruise Control batches up these reassignment commands and issues them to the Kafka cluster. \n The performance of the cluster during the rebalance is affected by the number of each type of movement contained in each batch.\n-Cruise Control provides several configuration options for tuning a cluster rebalance for optimal performance. \n \n+== Replica movement strategies\n+\n+Another factor that influences the rebalance performance is the _replica movement strategy_ applied to the batches of partition reassignment commands. \n+By default Cruise Control uses the `BaseReplicaMovementStrategy`, which simply applies the commands in the order they were generated.\n+However, if there are some very large reassignments early on in the proposal, then this could slow down the application of the other reassignments.\n+Cruise Control provides several other replica movement strategies that can be applied to the optimization proposals:\n+\n+* `PrioritizeSmallReplicaMovementStrategy`: Order reassignments in order of ascending size.\n+* `PrioritizeLargeReplicaMovementStrategy`: Order reassignments in order of descending size. \n+* `PostponeUrpReplicaMovementStrategy`: Prioritise reassignments for replicas whose partition have no out-of-sync replicas.\n+\n+Cruise Control can apply these strategies in a chain. \n+The strategy at the top of the chain will attempt to compare two reassignments using its internal logic, if it finds them equivalent then it will pass them onto to the next strategy in the chain for it to decide the order and so on. \n+\n+== Rebalance tuning options", "originalCommit": "82635e5bcc77c670fb19b51e7864140be6dc1326", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzYxNTY2Ng==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3368#discussion_r463615666", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            == Replica movement strategies\n          \n          \n            \n            [discrete]\n          \n          \n            \n            == Replica movement strategies", "author": "laidan6000", "createdAt": "2020-07-31T13:37:55Z", "path": "documentation/modules/cruise-control/con-rebalance-performance.adoc", "diffHunk": "@@ -17,32 +19,56 @@ These commands consist of two types of operations:\n \n Cruise Control batches up these reassignment commands and issues them to the Kafka cluster. \n The performance of the cluster during the rebalance is affected by the number of each type of movement contained in each batch.\n-Cruise Control provides several configuration options for tuning a cluster rebalance for optimal performance. \n \n+== Replica movement strategies", "originalCommit": "82635e5bcc77c670fb19b51e7864140be6dc1326", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzYxNzk2MQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3368#discussion_r463617961", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Another factor that influences the rebalance performance is the _replica movement strategy_ applied to the batches of partition reassignment commands. \n          \n          \n            \n            Cluster rebalance performance is also influenced by the _replica movement strategy_ that is applied to the batches of partition reassignment commands.", "author": "laidan6000", "createdAt": "2020-07-31T13:41:57Z", "path": "documentation/modules/cruise-control/con-rebalance-performance.adoc", "diffHunk": "@@ -17,32 +19,56 @@ These commands consist of two types of operations:\n \n Cruise Control batches up these reassignment commands and issues them to the Kafka cluster. \n The performance of the cluster during the rebalance is affected by the number of each type of movement contained in each batch.\n-Cruise Control provides several configuration options for tuning a cluster rebalance for optimal performance. \n \n+== Replica movement strategies\n+\n+Another factor that influences the rebalance performance is the _replica movement strategy_ applied to the batches of partition reassignment commands. ", "originalCommit": "82635e5bcc77c670fb19b51e7864140be6dc1326", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzYxODIxMA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3368#discussion_r463618210", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            By default Cruise Control uses the `BaseReplicaMovementStrategy`, which simply applies the commands in the order they were generated.\n          \n          \n            \n            By default, Cruise Control uses the `BaseReplicaMovementStrategy`, which simply applies the commands in the order they were generated.", "author": "laidan6000", "createdAt": "2020-07-31T13:42:25Z", "path": "documentation/modules/cruise-control/con-rebalance-performance.adoc", "diffHunk": "@@ -17,32 +19,56 @@ These commands consist of two types of operations:\n \n Cruise Control batches up these reassignment commands and issues them to the Kafka cluster. \n The performance of the cluster during the rebalance is affected by the number of each type of movement contained in each batch.\n-Cruise Control provides several configuration options for tuning a cluster rebalance for optimal performance. \n \n+== Replica movement strategies\n+\n+Another factor that influences the rebalance performance is the _replica movement strategy_ applied to the batches of partition reassignment commands. \n+By default Cruise Control uses the `BaseReplicaMovementStrategy`, which simply applies the commands in the order they were generated.", "originalCommit": "82635e5bcc77c670fb19b51e7864140be6dc1326", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzYxODQ1MQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3368#discussion_r463618451", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            However, if there are some very large reassignments early on in the proposal, then this could slow down the application of the other reassignments.\n          \n          \n            \n            However, if there are some very large partition reassignments early in the proposal, this strategy can slow down the application of the other reassignments.", "author": "laidan6000", "createdAt": "2020-07-31T13:42:53Z", "path": "documentation/modules/cruise-control/con-rebalance-performance.adoc", "diffHunk": "@@ -17,32 +19,56 @@ These commands consist of two types of operations:\n \n Cruise Control batches up these reassignment commands and issues them to the Kafka cluster. \n The performance of the cluster during the rebalance is affected by the number of each type of movement contained in each batch.\n-Cruise Control provides several configuration options for tuning a cluster rebalance for optimal performance. \n \n+== Replica movement strategies\n+\n+Another factor that influences the rebalance performance is the _replica movement strategy_ applied to the batches of partition reassignment commands. \n+By default Cruise Control uses the `BaseReplicaMovementStrategy`, which simply applies the commands in the order they were generated.\n+However, if there are some very large reassignments early on in the proposal, then this could slow down the application of the other reassignments.", "originalCommit": "82635e5bcc77c670fb19b51e7864140be6dc1326", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzYxODYyNw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3368#discussion_r463618627", "bodyText": "New paragraph", "author": "laidan6000", "createdAt": "2020-07-31T13:43:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzYxODQ1MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzYxODgwNg==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3368#discussion_r463618806", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Cruise Control provides several other replica movement strategies that can be applied to the optimization proposals:\n          \n          \n            \n            Cruise Control provides three alternative replica movement strategies that can be applied to optimization proposals:", "author": "laidan6000", "createdAt": "2020-07-31T13:43:29Z", "path": "documentation/modules/cruise-control/con-rebalance-performance.adoc", "diffHunk": "@@ -17,32 +19,56 @@ These commands consist of two types of operations:\n \n Cruise Control batches up these reassignment commands and issues them to the Kafka cluster. \n The performance of the cluster during the rebalance is affected by the number of each type of movement contained in each batch.\n-Cruise Control provides several configuration options for tuning a cluster rebalance for optimal performance. \n \n+== Replica movement strategies\n+\n+Another factor that influences the rebalance performance is the _replica movement strategy_ applied to the batches of partition reassignment commands. \n+By default Cruise Control uses the `BaseReplicaMovementStrategy`, which simply applies the commands in the order they were generated.\n+However, if there are some very large reassignments early on in the proposal, then this could slow down the application of the other reassignments.\n+Cruise Control provides several other replica movement strategies that can be applied to the optimization proposals:", "originalCommit": "82635e5bcc77c670fb19b51e7864140be6dc1326", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzYxOTA5Nw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3368#discussion_r463619097", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * `PostponeUrpReplicaMovementStrategy`: Prioritise reassignments for replicas whose partition have no out-of-sync replicas.\n          \n          \n            \n            * `PostponeUrpReplicaMovementStrategy`: Prioritize reassignments for replicas whose partitions have no out-of-sync replicas.", "author": "laidan6000", "createdAt": "2020-07-31T13:44:02Z", "path": "documentation/modules/cruise-control/con-rebalance-performance.adoc", "diffHunk": "@@ -17,32 +19,56 @@ These commands consist of two types of operations:\n \n Cruise Control batches up these reassignment commands and issues them to the Kafka cluster. \n The performance of the cluster during the rebalance is affected by the number of each type of movement contained in each batch.\n-Cruise Control provides several configuration options for tuning a cluster rebalance for optimal performance. \n \n+== Replica movement strategies\n+\n+Another factor that influences the rebalance performance is the _replica movement strategy_ applied to the batches of partition reassignment commands. \n+By default Cruise Control uses the `BaseReplicaMovementStrategy`, which simply applies the commands in the order they were generated.\n+However, if there are some very large reassignments early on in the proposal, then this could slow down the application of the other reassignments.\n+Cruise Control provides several other replica movement strategies that can be applied to the optimization proposals:\n+\n+* `PrioritizeSmallReplicaMovementStrategy`: Order reassignments in order of ascending size.\n+* `PrioritizeLargeReplicaMovementStrategy`: Order reassignments in order of descending size. \n+* `PostponeUrpReplicaMovementStrategy`: Prioritise reassignments for replicas whose partition have no out-of-sync replicas.", "originalCommit": "82635e5bcc77c670fb19b51e7864140be6dc1326", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzYxOTMyOA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3368#discussion_r463619328", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Cruise Control can apply these strategies in a chain. \n          \n          \n            \n            These strategies can be configured as a sequence.", "author": "laidan6000", "createdAt": "2020-07-31T13:44:27Z", "path": "documentation/modules/cruise-control/con-rebalance-performance.adoc", "diffHunk": "@@ -17,32 +19,56 @@ These commands consist of two types of operations:\n \n Cruise Control batches up these reassignment commands and issues them to the Kafka cluster. \n The performance of the cluster during the rebalance is affected by the number of each type of movement contained in each batch.\n-Cruise Control provides several configuration options for tuning a cluster rebalance for optimal performance. \n \n+== Replica movement strategies\n+\n+Another factor that influences the rebalance performance is the _replica movement strategy_ applied to the batches of partition reassignment commands. \n+By default Cruise Control uses the `BaseReplicaMovementStrategy`, which simply applies the commands in the order they were generated.\n+However, if there are some very large reassignments early on in the proposal, then this could slow down the application of the other reassignments.\n+Cruise Control provides several other replica movement strategies that can be applied to the optimization proposals:\n+\n+* `PrioritizeSmallReplicaMovementStrategy`: Order reassignments in order of ascending size.\n+* `PrioritizeLargeReplicaMovementStrategy`: Order reassignments in order of descending size. \n+* `PostponeUrpReplicaMovementStrategy`: Prioritise reassignments for replicas whose partition have no out-of-sync replicas.\n+\n+Cruise Control can apply these strategies in a chain. ", "originalCommit": "82635e5bcc77c670fb19b51e7864140be6dc1326", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzYxOTk0OA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3368#discussion_r463619948", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The strategy at the top of the chain will attempt to compare two reassignments using its internal logic, if it finds them equivalent then it will pass them onto to the next strategy in the chain for it to decide the order and so on. \n          \n          \n            \n            The first strategy attempts to compare two partition reassignments using its internal logic. \n          \n          \n            \n            If the reassignments are equivalent, then it passes them to the next strategy to decide the order, and so on.", "author": "laidan6000", "createdAt": "2020-07-31T13:45:33Z", "path": "documentation/modules/cruise-control/con-rebalance-performance.adoc", "diffHunk": "@@ -17,32 +19,56 @@ These commands consist of two types of operations:\n \n Cruise Control batches up these reassignment commands and issues them to the Kafka cluster. \n The performance of the cluster during the rebalance is affected by the number of each type of movement contained in each batch.\n-Cruise Control provides several configuration options for tuning a cluster rebalance for optimal performance. \n \n+== Replica movement strategies\n+\n+Another factor that influences the rebalance performance is the _replica movement strategy_ applied to the batches of partition reassignment commands. \n+By default Cruise Control uses the `BaseReplicaMovementStrategy`, which simply applies the commands in the order they were generated.\n+However, if there are some very large reassignments early on in the proposal, then this could slow down the application of the other reassignments.\n+Cruise Control provides several other replica movement strategies that can be applied to the optimization proposals:\n+\n+* `PrioritizeSmallReplicaMovementStrategy`: Order reassignments in order of ascending size.\n+* `PrioritizeLargeReplicaMovementStrategy`: Order reassignments in order of descending size. \n+* `PostponeUrpReplicaMovementStrategy`: Prioritise reassignments for replicas whose partition have no out-of-sync replicas.\n+\n+Cruise Control can apply these strategies in a chain. \n+The strategy at the top of the chain will attempt to compare two reassignments using its internal logic, if it finds them equivalent then it will pass them onto to the next strategy in the chain for it to decide the order and so on. ", "originalCommit": "82635e5bcc77c670fb19b51e7864140be6dc1326", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzYyMDYyNA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3368#discussion_r463620624", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            You can set these _tuning_ options at either the xref:ref-cruise-control-configuration-{context}[Cruise Control server] or xref:proc-generating-optimization-proposals-{context}[optimization proposal] levels:\n          \n          \n            \n            You can set these tuning options at either the xref:ref-cruise-control-configuration-{context}[Cruise Control server] or xref:proc-generating-optimization-proposals-{context}[optimization proposal] levels:", "author": "laidan6000", "createdAt": "2020-07-31T13:46:46Z", "path": "documentation/modules/cruise-control/con-rebalance-performance.adoc", "diffHunk": "@@ -17,32 +19,56 @@ These commands consist of two types of operations:\n \n Cruise Control batches up these reassignment commands and issues them to the Kafka cluster. \n The performance of the cluster during the rebalance is affected by the number of each type of movement contained in each batch.\n-Cruise Control provides several configuration options for tuning a cluster rebalance for optimal performance. \n \n+== Replica movement strategies\n+\n+Another factor that influences the rebalance performance is the _replica movement strategy_ applied to the batches of partition reassignment commands. \n+By default Cruise Control uses the `BaseReplicaMovementStrategy`, which simply applies the commands in the order they were generated.\n+However, if there are some very large reassignments early on in the proposal, then this could slow down the application of the other reassignments.\n+Cruise Control provides several other replica movement strategies that can be applied to the optimization proposals:\n+\n+* `PrioritizeSmallReplicaMovementStrategy`: Order reassignments in order of ascending size.\n+* `PrioritizeLargeReplicaMovementStrategy`: Order reassignments in order of descending size. \n+* `PostponeUrpReplicaMovementStrategy`: Prioritise reassignments for replicas whose partition have no out-of-sync replicas.\n+\n+Cruise Control can apply these strategies in a chain. \n+The strategy at the top of the chain will attempt to compare two reassignments using its internal logic, if it finds them equivalent then it will pass them onto to the next strategy in the chain for it to decide the order and so on. \n+\n+== Rebalance tuning options\n+\n+Cruise Control provides several configuration options for tuning the rebalance parameters discussed above.\n You can set these _tuning_ options at either the xref:ref-cruise-control-configuration-{context}[Cruise Control server] or xref:proc-generating-optimization-proposals-{context}[optimization proposal] levels:", "originalCommit": "82635e5bcc77c670fb19b51e7864140be6dc1326", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzYyMTMxMw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3368#discussion_r463621313", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             The list of strategies (in priority order) used to determine the execution order for generated proposals. A comma separated string for server and a YAML array for KafkaRebalance. \n          \n          \n            \n             The list of strategies (in priority order) used to determine the order in which partition reassignment commands are executed for generated proposals. Use a comma separated string for server and a YAML array for `KafkaRebalance` resources.", "author": "laidan6000", "createdAt": "2020-07-31T13:48:01Z", "path": "documentation/modules/cruise-control/con-rebalance-performance.adoc", "diffHunk": "@@ -17,32 +19,56 @@ These commands consist of two types of operations:\n \n Cruise Control batches up these reassignment commands and issues them to the Kafka cluster. \n The performance of the cluster during the rebalance is affected by the number of each type of movement contained in each batch.\n-Cruise Control provides several configuration options for tuning a cluster rebalance for optimal performance. \n \n+== Replica movement strategies\n+\n+Another factor that influences the rebalance performance is the _replica movement strategy_ applied to the batches of partition reassignment commands. \n+By default Cruise Control uses the `BaseReplicaMovementStrategy`, which simply applies the commands in the order they were generated.\n+However, if there are some very large reassignments early on in the proposal, then this could slow down the application of the other reassignments.\n+Cruise Control provides several other replica movement strategies that can be applied to the optimization proposals:\n+\n+* `PrioritizeSmallReplicaMovementStrategy`: Order reassignments in order of ascending size.\n+* `PrioritizeLargeReplicaMovementStrategy`: Order reassignments in order of descending size. \n+* `PostponeUrpReplicaMovementStrategy`: Prioritise reassignments for replicas whose partition have no out-of-sync replicas.\n+\n+Cruise Control can apply these strategies in a chain. \n+The strategy at the top of the chain will attempt to compare two reassignments using its internal logic, if it finds them equivalent then it will pass them onto to the next strategy in the chain for it to decide the order and so on. \n+\n+== Rebalance tuning options\n+\n+Cruise Control provides several configuration options for tuning the rebalance parameters discussed above.\n You can set these _tuning_ options at either the xref:ref-cruise-control-configuration-{context}[Cruise Control server] or xref:proc-generating-optimization-proposals-{context}[optimization proposal] levels:\n \n * The Cruise Control server setting can be set in the Kafka custom resource under `Kafka.spec.kafka.spec.cruiseControl.spec`. \n * The individual rebalance performance configurations can be set under `KafkaRebalance.spec`. \n \n The relevant configurations are summarised below:\n \n-|==========================================================================================================================\n-| Server Configuration                              | KafkaRebalance Configuration            | Description | Default Value \n+|============================================================================================================================\n+| Server / KafkaRebalance Configuration                | Description                                          | Default Value\n \n-| `num.concurrent.partition.movements.per.broker`   | `concurrentPartitionMovementsPerBroker` | \n-  The maximum number of inter-broker partition movements in each partition reassignment batch | 5\n+| `num.concurrent.partition.movements.per.broker`   .2+| \n+  The maximum number of inter-broker partition movements in each partition reassignment batch              .2+| 5 \n+| `concurrentPartitionMovementsPerBroker` \n \n-| `num.concurrent.intra.broker.partition.movements` | `concurrentIntraBrokerPartitionMovements`     | \n-  The maximum number of intra-broker partition movements in each partition reassignment batch | 2\n+| `num.concurrent.intra.broker.partition.movements` .2+| \n+  The maximum number of intra-broker partition movements in each partition reassignment batch              .2+| 2\n+| `concurrentIntraBrokerPartitionMovements`\n \n+| `num.concurrent.leader.movements`                 .2+| \n+  The maximum number of partition leadership changes in each partition reassignment batch                  .2+| 1000        \n+| `concurrentLeaderMovements`              \n \n-| `num.concurrent.leader.movements`                 | `concurrentLeaderMovements`             | \n-  The maximum number of partition leadership changes in each partition reassignment batch     | 1000        \n+| `default.replication.throttle`                    .2+|\n+  The bandwidth (in bytes per second) to be assigned to the reassigning of partitions                      .2+| No Limit    \n+| `replicationThrottle`\n \n+| `default.replica.movement.strategies`             .2+| \n+ The list of strategies (in priority order) used to determine the execution order for generated proposals. A comma separated string for server and a YAML array for KafkaRebalance. ", "originalCommit": "82635e5bcc77c670fb19b51e7864140be6dc1326", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzYyMTYxNA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3368#discussion_r463621614", "bodyText": "It might be best to list all the strategies here and mark one as the default.", "author": "laidan6000", "createdAt": "2020-07-31T13:48:30Z", "path": "documentation/modules/cruise-control/con-rebalance-performance.adoc", "diffHunk": "@@ -17,32 +19,56 @@ These commands consist of two types of operations:\n \n Cruise Control batches up these reassignment commands and issues them to the Kafka cluster. \n The performance of the cluster during the rebalance is affected by the number of each type of movement contained in each batch.\n-Cruise Control provides several configuration options for tuning a cluster rebalance for optimal performance. \n \n+== Replica movement strategies\n+\n+Another factor that influences the rebalance performance is the _replica movement strategy_ applied to the batches of partition reassignment commands. \n+By default Cruise Control uses the `BaseReplicaMovementStrategy`, which simply applies the commands in the order they were generated.\n+However, if there are some very large reassignments early on in the proposal, then this could slow down the application of the other reassignments.\n+Cruise Control provides several other replica movement strategies that can be applied to the optimization proposals:\n+\n+* `PrioritizeSmallReplicaMovementStrategy`: Order reassignments in order of ascending size.\n+* `PrioritizeLargeReplicaMovementStrategy`: Order reassignments in order of descending size. \n+* `PostponeUrpReplicaMovementStrategy`: Prioritise reassignments for replicas whose partition have no out-of-sync replicas.\n+\n+Cruise Control can apply these strategies in a chain. \n+The strategy at the top of the chain will attempt to compare two reassignments using its internal logic, if it finds them equivalent then it will pass them onto to the next strategy in the chain for it to decide the order and so on. \n+\n+== Rebalance tuning options\n+\n+Cruise Control provides several configuration options for tuning the rebalance parameters discussed above.\n You can set these _tuning_ options at either the xref:ref-cruise-control-configuration-{context}[Cruise Control server] or xref:proc-generating-optimization-proposals-{context}[optimization proposal] levels:\n \n * The Cruise Control server setting can be set in the Kafka custom resource under `Kafka.spec.kafka.spec.cruiseControl.spec`. \n * The individual rebalance performance configurations can be set under `KafkaRebalance.spec`. \n \n The relevant configurations are summarised below:\n \n-|==========================================================================================================================\n-| Server Configuration                              | KafkaRebalance Configuration            | Description | Default Value \n+|============================================================================================================================\n+| Server / KafkaRebalance Configuration                | Description                                          | Default Value\n \n-| `num.concurrent.partition.movements.per.broker`   | `concurrentPartitionMovementsPerBroker` | \n-  The maximum number of inter-broker partition movements in each partition reassignment batch | 5\n+| `num.concurrent.partition.movements.per.broker`   .2+| \n+  The maximum number of inter-broker partition movements in each partition reassignment batch              .2+| 5 \n+| `concurrentPartitionMovementsPerBroker` \n \n-| `num.concurrent.intra.broker.partition.movements` | `concurrentIntraBrokerPartitionMovements`     | \n-  The maximum number of intra-broker partition movements in each partition reassignment batch | 2\n+| `num.concurrent.intra.broker.partition.movements` .2+| \n+  The maximum number of intra-broker partition movements in each partition reassignment batch              .2+| 2\n+| `concurrentIntraBrokerPartitionMovements`\n \n+| `num.concurrent.leader.movements`                 .2+| \n+  The maximum number of partition leadership changes in each partition reassignment batch                  .2+| 1000        \n+| `concurrentLeaderMovements`              \n \n-| `num.concurrent.leader.movements`                 | `concurrentLeaderMovements`             | \n-  The maximum number of partition leadership changes in each partition reassignment batch     | 1000        \n+| `default.replication.throttle`                    .2+|\n+  The bandwidth (in bytes per second) to be assigned to the reassigning of partitions                      .2+| No Limit    \n+| `replicationThrottle`\n \n+| `default.replica.movement.strategies`             .2+| \n+ The list of strategies (in priority order) used to determine the execution order for generated proposals. A comma separated string for server and a YAML array for KafkaRebalance. \n+.2+| `BaseReplicaMovementStrategy`\n+| `replicaMovementStrategies`", "originalCommit": "82635e5bcc77c670fb19b51e7864140be6dc1326", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzY3NjU5NA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3368#discussion_r463676594", "bodyText": "They are listed in the section above so I think it would be redundant to list them again here.", "author": "tomncooper", "createdAt": "2020-07-31T15:24:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzYyMTYxNA=="}], "type": "inlineReview"}, {"oid": "fa3dec825953413d4c55dfbedfde192dae8cb40a", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/fa3dec825953413d4c55dfbedfde192dae8cb40a", "message": "Added option to select replica movement strategy\n\nSigned-off-by: Thomas Cooper <tcooper@redhat.com>", "committedDate": "2020-07-31T15:28:23Z", "type": "commit"}, {"oid": "fa3dec825953413d4c55dfbedfde192dae8cb40a", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/fa3dec825953413d4c55dfbedfde192dae8cb40a", "message": "Added option to select replica movement strategy\n\nSigned-off-by: Thomas Cooper <tcooper@redhat.com>", "committedDate": "2020-07-31T15:28:23Z", "type": "forcePushed"}]}