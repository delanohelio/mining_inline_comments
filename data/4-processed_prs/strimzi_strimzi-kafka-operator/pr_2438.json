{"pr_number": 2438, "pr_title": "[DOC] New doc assembly to describe Oauth 2.0 authorization", "pr_createdAt": "2020-01-22T11:02:27Z", "pr_url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2438", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDY0Njk5NQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2438#discussion_r370646995", "bodyText": "Define Keycloak Authorization Services, or provide a link for more information? Just a thought.\nAlso, if Keycloak is going to be integral to this procedure, i.e. the user needs to set up authorization there, then I feel this should be clearly explained.", "author": "laidan6000", "createdAt": "2020-01-24T14:00:47Z", "path": "documentation/assemblies/oauth/assembly-oauth-authorization.adoc", "diffHunk": "@@ -0,0 +1,32 @@\n+// This assembly is included in the following assemblies:\n+//\n+// assembly-deployment-configuration.adoc\n+\n+[id='assembly-oauth-authorization_{context}']\n+= Using {oauth} token-based authorization\n+\n+{ProductName} supports the use of {oauth} authorization through  {oauth-server} Authorization Services,", "originalCommit": "ccfdf2d04c697d540f6f3d933bc527924be7a7bd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjI3MzI4Ng==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2438#discussion_r372273286", "bodyText": "I've switched the paragraphs around in this intro to make it more clear that this is about using Keycloak.\nI've added specific a link to Authorization Services doc.", "author": "PaulRMellor", "createdAt": "2020-01-29T09:32:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDY0Njk5NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDY0ODE4Mw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2438#discussion_r370648183", "bodyText": "The title says \"OAUTH 2.0 TOKEN-BASED AUTHORIZATION\" whereas here we have \"OAuth2 authorization\". What is the full name of the feature?", "author": "laidan6000", "createdAt": "2020-01-24T14:03:17Z", "path": "documentation/assemblies/oauth/assembly-oauth-authorization.adoc", "diffHunk": "@@ -0,0 +1,32 @@\n+// This assembly is included in the following assemblies:\n+//\n+// assembly-deployment-configuration.adoc\n+\n+[id='assembly-oauth-authorization_{context}']\n+= Using {oauth} token-based authorization\n+\n+{ProductName} supports the use of {oauth} authorization through  {oauth-server} Authorization Services,", "originalCommit": "ccfdf2d04c697d540f6f3d933bc527924be7a7bd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjI4MDc4OQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2438#discussion_r372280789", "bodyText": "I've updated (and rearranged) this intro.", "author": "PaulRMellor", "createdAt": "2020-01-29T09:46:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDY0ODE4Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDY0ODU2OA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2438#discussion_r370648568", "bodyText": "Allow or allows? Worth double-checking the subject-verb agreement.", "author": "laidan6000", "createdAt": "2020-01-24T14:04:08Z", "path": "documentation/assemblies/oauth/assembly-oauth-authorization.adoc", "diffHunk": "@@ -0,0 +1,32 @@\n+// This assembly is included in the following assemblies:\n+//\n+// assembly-deployment-configuration.adoc\n+\n+[id='assembly-oauth-authorization_{context}']\n+= Using {oauth} token-based authorization\n+\n+{ProductName} supports the use of {oauth} authorization through  {oauth-server} Authorization Services,\n+which allow you to manage security policies and permissions centrally.", "originalCommit": "ccfdf2d04c697d540f6f3d933bc527924be7a7bd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjI4NTE2OA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2438#discussion_r372285168", "bodyText": "Actually, it'll be allows here. Good catch!", "author": "PaulRMellor", "createdAt": "2020-01-29T09:55:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDY0ODU2OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDY1MDg0OQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2438#discussion_r370650849", "bodyText": "I'm slightly confused. Does this describe an additional use for Keycloak, or  are authorization rules a central feature of OAuth 2.0 authorization in Strimzi (which uses Keycloak Authorization Services, as stated earlier)?\nJust making sure that we minimise the load on the reader as much as possible.", "author": "laidan6000", "createdAt": "2020-01-24T14:08:46Z", "path": "documentation/assemblies/oauth/assembly-oauth-authorization.adoc", "diffHunk": "@@ -0,0 +1,32 @@\n+// This assembly is included in the following assemblies:\n+//\n+// assembly-deployment-configuration.adoc\n+\n+[id='assembly-oauth-authorization_{context}']\n+= Using {oauth} token-based authorization\n+\n+{ProductName} supports the use of {oauth} authorization through  {oauth-server} Authorization Services,\n+which allow you to manage security policies and permissions centrally.\n+\n+Security policies and permissions are used to grant access to Kafka brokers.\n+Users and clients are matched against policies that permit access to perform specific actions on Kafka brokers.\n+\n+If you are using {oauth} with {oauth-server} for token-based authentication,\n+you can also use  {oauth-server} to configure authorization rules to constrain client access to Kafka brokers.", "originalCommit": "ccfdf2d04c697d540f6f3d933bc527924be7a7bd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjI4NTkzOA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2438#discussion_r372285938", "bodyText": "It's an additional use. But you need to be setup for authentication first.", "author": "PaulRMellor", "createdAt": "2020-01-29T09:56:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDY1MDg0OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDY1MjQwNw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2438#discussion_r370652407", "bodyText": "Great definitions -- very clear.\nPossible anthropomorphism in \"decides\"? Not that we're totally opposed to anthropomorphism...", "author": "laidan6000", "createdAt": "2020-01-24T14:11:52Z", "path": "documentation/assemblies/oauth/assembly-oauth-authorization.adoc", "diffHunk": "@@ -0,0 +1,32 @@\n+// This assembly is included in the following assemblies:\n+//\n+// assembly-deployment-configuration.adoc\n+\n+[id='assembly-oauth-authorization_{context}']\n+= Using {oauth} token-based authorization\n+\n+{ProductName} supports the use of {oauth} authorization through  {oauth-server} Authorization Services,\n+which allow you to manage security policies and permissions centrally.\n+\n+Security policies and permissions are used to grant access to Kafka brokers.\n+Users and clients are matched against policies that permit access to perform specific actions on Kafka brokers.\n+\n+If you are using {oauth} with {oauth-server} for token-based authentication,\n+you can also use  {oauth-server} to configure authorization rules to constrain client access to Kafka brokers.\n+Authentication establishes the identity of a user.\n+Authorization decides the level of access for that user.", "originalCommit": "ccfdf2d04c697d540f6f3d933bc527924be7a7bd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjI4NjYyMw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2438#discussion_r372286623", "bodyText": "I'm not sure there's a better word for clarity. I'll leave for now.", "author": "PaulRMellor", "createdAt": "2020-01-29T09:57:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDY1MjQwNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDY1NDI5Mg==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2438#discussion_r370654292", "bodyText": "A slight inconsistency in the feature name: \"OAuth 2.0 authorization with Keycloak\".", "author": "laidan6000", "createdAt": "2020-01-24T14:15:45Z", "path": "documentation/assemblies/oauth/assembly-oauth-authorization.adoc", "diffHunk": "@@ -0,0 +1,32 @@\n+// This assembly is included in the following assemblies:\n+//\n+// assembly-deployment-configuration.adoc\n+\n+[id='assembly-oauth-authorization_{context}']\n+= Using {oauth} token-based authorization\n+\n+{ProductName} supports the use of {oauth} authorization through  {oauth-server} Authorization Services,\n+which allow you to manage security policies and permissions centrally.\n+\n+Security policies and permissions are used to grant access to Kafka brokers.\n+Users and clients are matched against policies that permit access to perform specific actions on Kafka brokers.\n+\n+If you are using {oauth} with {oauth-server} for token-based authentication,\n+you can also use  {oauth-server} to configure authorization rules to constrain client access to Kafka brokers.\n+Authentication establishes the identity of a user.\n+Authorization decides the level of access for that user.\n+\n+Kafka allows all users full access to brokers by default,\n+and also provides the `SimpleACLAuthorizer` plugin to configure authorization based on Access Control Lists (ACLs).\n+ZooKeeper stores ACL rules that grant or deny access to resources based on _username_.\n+However, {oauth} authorization with  {oauth-server} offers far greater flexibility on how you wish to implement access control to Kafka brokers.", "originalCommit": "ccfdf2d04c697d540f6f3d933bc527924be7a7bd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDY1NTE0NA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2438#discussion_r370655144", "bodyText": "So SimpleACLAuthorizer does not give you OAuth 2.0 authorization. That's my understanding from reading this sentence.", "author": "laidan6000", "createdAt": "2020-01-24T14:17:17Z", "path": "documentation/assemblies/oauth/assembly-oauth-authorization.adoc", "diffHunk": "@@ -0,0 +1,32 @@\n+// This assembly is included in the following assemblies:\n+//\n+// assembly-deployment-configuration.adoc\n+\n+[id='assembly-oauth-authorization_{context}']\n+= Using {oauth} token-based authorization\n+\n+{ProductName} supports the use of {oauth} authorization through  {oauth-server} Authorization Services,\n+which allow you to manage security policies and permissions centrally.\n+\n+Security policies and permissions are used to grant access to Kafka brokers.\n+Users and clients are matched against policies that permit access to perform specific actions on Kafka brokers.\n+\n+If you are using {oauth} with {oauth-server} for token-based authentication,\n+you can also use  {oauth-server} to configure authorization rules to constrain client access to Kafka brokers.\n+Authentication establishes the identity of a user.\n+Authorization decides the level of access for that user.\n+\n+Kafka allows all users full access to brokers by default,\n+and also provides the `SimpleACLAuthorizer` plugin to configure authorization based on Access Control Lists (ACLs).\n+ZooKeeper stores ACL rules that grant or deny access to resources based on _username_.\n+However, {oauth} authorization with  {oauth-server} offers far greater flexibility on how you wish to implement access control to Kafka brokers.\n+In addition, you can configure your Kafka brokers to use {oauth} authorization and ACLs.", "originalCommit": "ccfdf2d04c697d540f6f3d933bc527924be7a7bd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjI4ODA3MQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2438#discussion_r372288071", "bodyText": "That's right.", "author": "PaulRMellor", "createdAt": "2020-01-29T10:00:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDY1NTE0NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDY1NzM4MQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2438#discussion_r370657381", "bodyText": "Suggested change:\nOAuth 2.0 authorization in Strimzi uses...", "author": "laidan6000", "createdAt": "2020-01-24T14:21:49Z", "path": "documentation/modules/oauth/con-oauth-authorization-mechanism.adoc", "diffHunk": "@@ -0,0 +1,20 @@\n+// Module included in the following assemblies:\n+//\n+// assembly-oauth-authorization.adoc\n+\n+[id='con-oauth-authorization-mechanism_{context}']\n+= {oauth} authorization mechanism\n+\n+{oauth} authorization uses {oauth-server} Authorization Services REST endpoints to extend token-based authentication with {oauth-server} by applying defined security policies on a particular user,", "originalCommit": "ccfdf2d04c697d540f6f3d933bc527924be7a7bd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDY2NzkyMw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2438#discussion_r370667923", "bodyText": "Later on, you refer to a Keycloak server endpoint. I like that.", "author": "laidan6000", "createdAt": "2020-01-24T14:41:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDY1NzM4MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDY1ODkzNA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2438#discussion_r370658934", "bodyText": "Caps: Kafka broker", "author": "laidan6000", "createdAt": "2020-01-24T14:24:43Z", "path": "documentation/modules/oauth/con-oauth-authorization-mechanism.adoc", "diffHunk": "@@ -0,0 +1,20 @@\n+// Module included in the following assemblies:\n+//\n+// assembly-oauth-authorization.adoc\n+\n+[id='con-oauth-authorization-mechanism_{context}']\n+= {oauth} authorization mechanism\n+\n+{oauth} authorization uses {oauth-server} Authorization Services REST endpoints to extend token-based authentication with {oauth-server} by applying defined security policies on a particular user,\n+and providing a list of permissions granted on different resources for that user.\n+Policies use roles and groups to match permissions to users.\n+{oauth} authorization enforces permissions locally based on the received list of grants for the user from {oauth-server} Authorization Services.\n+\n+== Kafka broker custom authorizer\n+\n+A {oauth-server} _authorizer_ (`KeycloakRBACAuthorizer`) is provided with {ProductName}.\n+To be able to use the {oauth-server} REST endpoints for Authorization Services provided by {oauth-server},\n+a custom authorizer configuration is required on the Kafka Broker.", "originalCommit": "ccfdf2d04c697d540f6f3d933bc527924be7a7bd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDY2MTY3Mg==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2438#discussion_r370661672", "bodyText": "\"a custom authorizer configuration is required on the Kafka Broker.\"\nConsider rephrasing to active voice.", "author": "laidan6000", "createdAt": "2020-01-24T14:29:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDY1ODkzNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDY2MjY0OQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2438#discussion_r370662649", "bodyText": "Why might authorization properties already be defined for the user's Kafka brokers?", "author": "laidan6000", "createdAt": "2020-01-24T14:31:40Z", "path": "documentation/modules/oauth/proc-oauth-authorization-broker-config.adoc", "diffHunk": "@@ -0,0 +1,95 @@\n+// Module included in the following module:\n+//\n+// con-oauth-config.adoc\n+\n+[id='proc-oauth-authorization-broker-config-{context}']\n+= Configuring {oauth} authorization support\n+\n+This procedure describes how to configure Kafka brokers to use {oauth} authorization using {oauth-server} Authorization Services.\n+\n+The properties used to configure authorization for Kafka brokers might already be configured for xref:proc-oauth-authentication-broker-config-{context}[{oauth} authentication].\n+If so, they are also used for authorization if specific authorization properties are not defined.", "originalCommit": "ccfdf2d04c697d540f6f3d933bc527924be7a7bd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjI5OTkzOQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2438#discussion_r372299939", "bodyText": "When you define authentication, you use equivalent properties that can also be used for authorization (if you leave them out). I've made it clear later on which ones.", "author": "PaulRMellor", "createdAt": "2020-01-29T10:24:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDY2MjY0OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDY2MzU1Nw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2438#discussion_r370663557", "bodyText": "Where can the user do this?\nInsert a serial comma after \"clients\".", "author": "laidan6000", "createdAt": "2020-01-24T14:33:31Z", "path": "documentation/modules/oauth/proc-oauth-authorization-broker-config.adoc", "diffHunk": "@@ -0,0 +1,95 @@\n+// Module included in the following module:\n+//\n+// con-oauth-config.adoc\n+\n+[id='proc-oauth-authorization-broker-config-{context}']\n+= Configuring {oauth} authorization support\n+\n+This procedure describes how to configure Kafka brokers to use {oauth} authorization using {oauth-server} Authorization Services.\n+\n+The properties used to configure authorization for Kafka brokers might already be configured for xref:proc-oauth-authentication-broker-config-{context}[{oauth} authentication].\n+If so, they are also used for authorization if specific authorization properties are not defined.\n+\n+.Before you begin\n+Consider the access you require or want to limit for certain users.\n+You can use a combination of groups, roles, clients and users to configure access.", "originalCommit": "ccfdf2d04c697d540f6f3d933bc527924be7a7bd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjMwMDUxMA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2438#discussion_r372300510", "bodyText": "...access in {oauth-server}.", "author": "PaulRMellor", "createdAt": "2020-01-29T10:25:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDY2MzU1Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDY2NjkwMQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2438#discussion_r370666901", "bodyText": "Typo: \"...on the Kafka broker\".", "author": "laidan6000", "createdAt": "2020-01-24T14:39:57Z", "path": "documentation/modules/oauth/proc-oauth-authorization-broker-config.adoc", "diffHunk": "@@ -0,0 +1,95 @@\n+// Module included in the following module:\n+//\n+// con-oauth-config.adoc\n+\n+[id='proc-oauth-authorization-broker-config-{context}']\n+= Configuring {oauth} authorization support\n+\n+This procedure describes how to configure Kafka brokers to use {oauth} authorization using {oauth-server} Authorization Services.\n+\n+The properties used to configure authorization for Kafka brokers might already be configured for xref:proc-oauth-authentication-broker-config-{context}[{oauth} authentication].\n+If so, they are also used for authorization if specific authorization properties are not defined.\n+\n+.Before you begin\n+Consider the access you require or want to limit for certain users.\n+You can use a combination of groups, roles, clients and users to configure access.\n+\n+Typically, groups are used to match users based on organizational departments or geographical locations.\n+And roles are used to match users based on their function.\n+\n+With {oauth-server}, you can store users and groups in LDAP, whereas clients and roles cannot be stored this way.\n+Storage and access to user data may be a factor in how you choose to configure authorization policies.\n+\n+NOTE: xref:ref-kafka-authorization-super-user-deployment-configuration-kafka[Super users] always have unconstrained access to a Kafka broker regardless of the authorization implemented on Kafka broker.", "originalCommit": "ccfdf2d04c697d540f6f3d933bc527924be7a7bd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDY2ODkxOA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2438#discussion_r370668918", "bodyText": "Because I've read the later procedure, I understand that these policies and permissions are set up in Keycloak, not Strimzi. Is it safe to assume that the user knows this? We shouldn't sweep Keycloak under the carpet, so to speak.", "author": "laidan6000", "createdAt": "2020-01-24T14:43:39Z", "path": "documentation/assemblies/oauth/assembly-oauth-authorization.adoc", "diffHunk": "@@ -0,0 +1,32 @@\n+// This assembly is included in the following assemblies:\n+//\n+// assembly-deployment-configuration.adoc\n+\n+[id='assembly-oauth-authorization_{context}']\n+= Using {oauth} token-based authorization\n+\n+{ProductName} supports the use of {oauth} authorization through  {oauth-server} Authorization Services,\n+which allow you to manage security policies and permissions centrally.\n+\n+Security policies and permissions are used to grant access to Kafka brokers.", "originalCommit": "ccfdf2d04c697d540f6f3d933bc527924be7a7bd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjMwMTM0Nw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2438#discussion_r372301347", "bodyText": "...defined in {oauth-server}", "author": "PaulRMellor", "createdAt": "2020-01-29T10:27:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDY2ODkxOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDY2OTgyMw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2438#discussion_r370669823", "bodyText": "Insert a serial comma after policies.", "author": "laidan6000", "createdAt": "2020-01-24T14:45:32Z", "path": "documentation/modules/oauth/proc-oauth-authorization-broker-config.adoc", "diffHunk": "@@ -0,0 +1,95 @@\n+// Module included in the following module:\n+//\n+// con-oauth-config.adoc\n+\n+[id='proc-oauth-authorization-broker-config-{context}']\n+= Configuring {oauth} authorization support\n+\n+This procedure describes how to configure Kafka brokers to use {oauth} authorization using {oauth-server} Authorization Services.\n+\n+The properties used to configure authorization for Kafka brokers might already be configured for xref:proc-oauth-authentication-broker-config-{context}[{oauth} authentication].\n+If so, they are also used for authorization if specific authorization properties are not defined.\n+\n+.Before you begin\n+Consider the access you require or want to limit for certain users.\n+You can use a combination of groups, roles, clients and users to configure access.\n+\n+Typically, groups are used to match users based on organizational departments or geographical locations.\n+And roles are used to match users based on their function.\n+\n+With {oauth-server}, you can store users and groups in LDAP, whereas clients and roles cannot be stored this way.\n+Storage and access to user data may be a factor in how you choose to configure authorization policies.\n+\n+NOTE: xref:ref-kafka-authorization-super-user-deployment-configuration-kafka[Super users] always have unconstrained access to a Kafka broker regardless of the authorization implemented on Kafka broker.\n+\n+.Prerequisites\n+\n+* {ProductName} must be configured to use {oauth} with {oauth-server} for xref:assembly-oauth-authentication_str[token-based authentication].\n+You use the same {oauth-server} server endpoint when you set up authorization.\n+* You need to understand how to manage policies and permissions for {oauth-server} Authorization Services, as described in the {oauth-keycloak-doc}.\n+\n+\n+.Procedure\n+\n+. Access the {oauth-server} Admin Console or use the {oauth-server} Admin CLI to enable Authorization Services for the Kafka broker client you created when setting up {oauth} authentication.\n+. Use Authorization Services to define resources, authorization scopes, policies and permissions for the client.", "originalCommit": "ccfdf2d04c697d540f6f3d933bc527924be7a7bd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDY3MDIzNQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2438#discussion_r370670235", "bodyText": "Earlier, this is referred to as the \"Keycloak authorizer\".", "author": "laidan6000", "createdAt": "2020-01-24T14:46:18Z", "path": "documentation/modules/oauth/proc-oauth-authorization-broker-config.adoc", "diffHunk": "@@ -0,0 +1,95 @@\n+// Module included in the following module:\n+//\n+// con-oauth-config.adoc\n+\n+[id='proc-oauth-authorization-broker-config-{context}']\n+= Configuring {oauth} authorization support\n+\n+This procedure describes how to configure Kafka brokers to use {oauth} authorization using {oauth-server} Authorization Services.\n+\n+The properties used to configure authorization for Kafka brokers might already be configured for xref:proc-oauth-authentication-broker-config-{context}[{oauth} authentication].\n+If so, they are also used for authorization if specific authorization properties are not defined.\n+\n+.Before you begin\n+Consider the access you require or want to limit for certain users.\n+You can use a combination of groups, roles, clients and users to configure access.\n+\n+Typically, groups are used to match users based on organizational departments or geographical locations.\n+And roles are used to match users based on their function.\n+\n+With {oauth-server}, you can store users and groups in LDAP, whereas clients and roles cannot be stored this way.\n+Storage and access to user data may be a factor in how you choose to configure authorization policies.\n+\n+NOTE: xref:ref-kafka-authorization-super-user-deployment-configuration-kafka[Super users] always have unconstrained access to a Kafka broker regardless of the authorization implemented on Kafka broker.\n+\n+.Prerequisites\n+\n+* {ProductName} must be configured to use {oauth} with {oauth-server} for xref:assembly-oauth-authentication_str[token-based authentication].\n+You use the same {oauth-server} server endpoint when you set up authorization.\n+* You need to understand how to manage policies and permissions for {oauth-server} Authorization Services, as described in the {oauth-keycloak-doc}.\n+\n+\n+.Procedure\n+\n+. Access the {oauth-server} Admin Console or use the {oauth-server} Admin CLI to enable Authorization Services for the Kafka broker client you created when setting up {oauth} authentication.\n+. Use Authorization Services to define resources, authorization scopes, policies and permissions for the client.\n+. Bind the permissions to users and clients by assigning them roles and groups.\n+. Configure the Kafka brokers to use the {oauth-server} authorization by updating the Kafka broker configuration (`Kafka.spec.kafka`) of your `Kafka` resource in an editor.", "originalCommit": "ccfdf2d04c697d540f6f3d933bc527924be7a7bd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjMwMjYyOQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2438#discussion_r372302629", "bodyText": "Don't think we need to mention that here.", "author": "PaulRMellor", "createdAt": "2020-01-29T10:29:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDY3MDIzNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDY3MTc2Nw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2438#discussion_r370671767", "bodyText": "\ud83d\ude3a", "author": "laidan6000", "createdAt": "2020-01-24T14:49:13Z", "path": "documentation/modules/oauth/proc-oauth-authorization-broker-config.adoc", "diffHunk": "@@ -0,0 +1,95 @@\n+// Module included in the following module:\n+//\n+// con-oauth-config.adoc\n+\n+[id='proc-oauth-authorization-broker-config-{context}']\n+= Configuring {oauth} authorization support\n+\n+This procedure describes how to configure Kafka brokers to use {oauth} authorization using {oauth-server} Authorization Services.\n+\n+The properties used to configure authorization for Kafka brokers might already be configured for xref:proc-oauth-authentication-broker-config-{context}[{oauth} authentication].\n+If so, they are also used for authorization if specific authorization properties are not defined.\n+\n+.Before you begin\n+Consider the access you require or want to limit for certain users.\n+You can use a combination of groups, roles, clients and users to configure access.\n+\n+Typically, groups are used to match users based on organizational departments or geographical locations.\n+And roles are used to match users based on their function.\n+\n+With {oauth-server}, you can store users and groups in LDAP, whereas clients and roles cannot be stored this way.\n+Storage and access to user data may be a factor in how you choose to configure authorization policies.\n+\n+NOTE: xref:ref-kafka-authorization-super-user-deployment-configuration-kafka[Super users] always have unconstrained access to a Kafka broker regardless of the authorization implemented on Kafka broker.\n+\n+.Prerequisites\n+\n+* {ProductName} must be configured to use {oauth} with {oauth-server} for xref:assembly-oauth-authentication_str[token-based authentication].\n+You use the same {oauth-server} server endpoint when you set up authorization.\n+* You need to understand how to manage policies and permissions for {oauth-server} Authorization Services, as described in the {oauth-keycloak-doc}.\n+\n+\n+.Procedure\n+\n+. Access the {oauth-server} Admin Console or use the {oauth-server} Admin CLI to enable Authorization Services for the Kafka broker client you created when setting up {oauth} authentication.\n+. Use Authorization Services to define resources, authorization scopes, policies and permissions for the client.\n+. Bind the permissions to users and clients by assigning them roles and groups.\n+. Configure the Kafka brokers to use the {oauth-server} authorization by updating the Kafka broker configuration (`Kafka.spec.kafka`) of your `Kafka` resource in an editor.\n++\n+[source,shell]\n+----\n+kubectl edit kafka my-cluster\n+----\n+\n+. Configure the Kafka broker `kafka` configuration to use `keycloak` authorization, and to be able to access the authorization server and Authorization Services.\n++\n+For example:\n++\n+[source,yaml,subs=\"+quotes,attributes\"]\n+----\n+apiVersion: {KafkaApiVersion}\n+kind: Kafka\n+metadata:\n+  name: my-cluster\n+spec:\n+  kafka\n+  # ...\n+  authorization:\n+    type: *keycloak* <1>\n+    tokenEndpointUri: <__https://<auth-server-address>/auth/realms/external/protocol/openid-connect/token/introspect__> <2>\n+    clientId: kafka <3>\n+    delegateToKafkaAcls: false <4>\n+    disableTlsHostnameVerification: false <5>\n+    superUsers: <6>\n+      - CN=fred", "originalCommit": "ccfdf2d04c697d540f6f3d933bc527924be7a7bd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjMwMjc5Ng==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2438#discussion_r372302796", "bodyText": "Same examples as used elsewhere in the doc. :-)", "author": "PaulRMellor", "createdAt": "2020-01-29T10:30:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDY3MTc2Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDY3MjQ4Ng==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2438#discussion_r370672486", "bodyText": "I think we should use Kubernetes long names in commands, although others may think differently.", "author": "laidan6000", "createdAt": "2020-01-24T14:50:42Z", "path": "documentation/modules/oauth/proc-oauth-authorization-broker-config.adoc", "diffHunk": "@@ -0,0 +1,95 @@\n+// Module included in the following module:\n+//\n+// con-oauth-config.adoc\n+\n+[id='proc-oauth-authorization-broker-config-{context}']\n+= Configuring {oauth} authorization support\n+\n+This procedure describes how to configure Kafka brokers to use {oauth} authorization using {oauth-server} Authorization Services.\n+\n+The properties used to configure authorization for Kafka brokers might already be configured for xref:proc-oauth-authentication-broker-config-{context}[{oauth} authentication].\n+If so, they are also used for authorization if specific authorization properties are not defined.\n+\n+.Before you begin\n+Consider the access you require or want to limit for certain users.\n+You can use a combination of groups, roles, clients and users to configure access.\n+\n+Typically, groups are used to match users based on organizational departments or geographical locations.\n+And roles are used to match users based on their function.\n+\n+With {oauth-server}, you can store users and groups in LDAP, whereas clients and roles cannot be stored this way.\n+Storage and access to user data may be a factor in how you choose to configure authorization policies.\n+\n+NOTE: xref:ref-kafka-authorization-super-user-deployment-configuration-kafka[Super users] always have unconstrained access to a Kafka broker regardless of the authorization implemented on Kafka broker.\n+\n+.Prerequisites\n+\n+* {ProductName} must be configured to use {oauth} with {oauth-server} for xref:assembly-oauth-authentication_str[token-based authentication].\n+You use the same {oauth-server} server endpoint when you set up authorization.\n+* You need to understand how to manage policies and permissions for {oauth-server} Authorization Services, as described in the {oauth-keycloak-doc}.\n+\n+\n+.Procedure\n+\n+. Access the {oauth-server} Admin Console or use the {oauth-server} Admin CLI to enable Authorization Services for the Kafka broker client you created when setting up {oauth} authentication.\n+. Use Authorization Services to define resources, authorization scopes, policies and permissions for the client.\n+. Bind the permissions to users and clients by assigning them roles and groups.\n+. Configure the Kafka brokers to use the {oauth-server} authorization by updating the Kafka broker configuration (`Kafka.spec.kafka`) of your `Kafka` resource in an editor.\n++\n+[source,shell]\n+----\n+kubectl edit kafka my-cluster\n+----\n+\n+. Configure the Kafka broker `kafka` configuration to use `keycloak` authorization, and to be able to access the authorization server and Authorization Services.\n++\n+For example:\n++\n+[source,yaml,subs=\"+quotes,attributes\"]\n+----\n+apiVersion: {KafkaApiVersion}\n+kind: Kafka\n+metadata:\n+  name: my-cluster\n+spec:\n+  kafka\n+  # ...\n+  authorization:\n+    type: *keycloak* <1>\n+    tokenEndpointUri: <__https://<auth-server-address>/auth/realms/external/protocol/openid-connect/token/introspect__> <2>\n+    clientId: kafka <3>\n+    delegateToKafkaAcls: false <4>\n+    disableTlsHostnameVerification: false <5>\n+    superUsers: <6>\n+      - CN=fred\n+      - sam\n+      - CN=edward\n+    tlsTrustedCertificates: <7>\n+    - secretName: oauth-server-cert\n+      certificate: ca.crt\n+  #...\n+----\n+<1> Type `keycloak` enables {oauth-server} authorization.\n+<2> URI of the {oauth-server} token introspection endpoint. For production, always use HTTPs.\n+<3> The client ID of the {oauth} client definition in {oauth-server} that has Authorization Services enabled. Typically, `kafka` is used as the ID.\n+<4> Delegate authorization to Kafka `SimpleACLAuthorizer` if access is denied by {oauth-server} Authorization Services policies.\n+The default is `false`.\n+<5> (Optional) Disable TLS hostname verification. Default is `false`.\n+<6> Designated xref:ref-kafka-authorization-super-user-deployment-configuration-kafka[super users].\n+<7> (Optional) Trusted certificates for TLS connection to the authorization server.\n++\n+If the properties are not added, the equivalent properties configured for {oauth} authentication are used.\n+\n+. Save and exit the editor, then wait for rolling updates to complete.\n+\n+. Check the update in the logs or by watching the pod state transitions:\n++\n+[source,shell,subs=\"+quotes,attributes\"]\n+----\n+kubectl logs -f ${POD_NAME} -c ${CONTAINER_NAME}\n+kubectl get po -w", "originalCommit": "ccfdf2d04c697d540f6f3d933bc527924be7a7bd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjMwNDg4OQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2438#discussion_r372304889", "bodyText": "we actually use get po more than get pods in the doc.", "author": "PaulRMellor", "createdAt": "2020-01-29T10:34:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDY3MjQ4Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDY3Nzk5OQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2438#discussion_r370677999", "bodyText": "Underscore or hyphen?", "author": "laidan6000", "createdAt": "2020-01-24T15:00:49Z", "path": "documentation/assemblies/assembly-configuring-kafka-listeners.adoc", "diffHunk": "@@ -18,7 +18,7 @@ The following types of listener are supported:\n \n .{oauth}\n If you are using {oauth} token-based authentication, you can configure the listeners to connect to your authorization server.\n-For more information, see xref:assembly-oauth-str[Using {oauth} token-based authentication].\n+For more information, see xref:assembly-oauth-authentication_str[Using {oauth} token-based authentication].", "originalCommit": "ccfdf2d04c697d540f6f3d933bc527924be7a7bd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDczMjU2NQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2438#discussion_r370732565", "bodyText": "We're meant to be using underscore before {context} now. I've started with new or updated files.", "author": "PaulRMellor", "createdAt": "2020-01-24T16:46:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDY3Nzk5OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDY3ODIyNQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2438#discussion_r370678225", "bodyText": "Any need to mention Keycloak?", "author": "laidan6000", "createdAt": "2020-01-24T15:01:15Z", "path": "documentation/assemblies/assembly-deployment-configuration.adoc", "diffHunk": "@@ -18,6 +18,7 @@ This chapter describes how to configure different aspects of the supported deplo\n * Kafka Mirror Maker\n * Kafka Bridge\n * {oauth} token-based authentication\n+* {oauth} token-based authorization", "originalCommit": "ccfdf2d04c697d540f6f3d933bc527924be7a7bd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjMwNjA2NA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2438#discussion_r372306064", "bodyText": "I'd say not", "author": "PaulRMellor", "createdAt": "2020-01-29T10:37:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDY3ODIyNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDY3ODk0MA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2438#discussion_r370678940", "bodyText": "Underscores again?", "author": "laidan6000", "createdAt": "2020-01-24T15:02:31Z", "path": "documentation/modules/con-kafka-bridge-authentication.adoc", "diffHunk": "@@ -12,7 +12,7 @@ The currently supported authentication types are:\n * TLS client authentication\n * SASL-based authentication using the SCRAM-SHA-512 mechanism\n * SASL-based authentication using the PLAIN mechanism\n-* xref:assembly-oauth-str[{oauth} token based authentication]\n+* xref:assembly-oauth-authentication_str[{oauth} token based authentication]", "originalCommit": "ccfdf2d04c697d540f6f3d933bc527924be7a7bd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjMwNjIzMA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2438#discussion_r372306230", "bodyText": "Yes. We had a directive about it.", "author": "PaulRMellor", "createdAt": "2020-01-29T10:37:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDY3ODk0MA=="}], "type": "inlineReview"}, {"oid": "cc7dae4e78983d6ba1aab26a7080ae7793da72a8", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/cc7dae4e78983d6ba1aab26a7080ae7793da72a8", "message": "new doc assembly to describe oauth authorization\n\nSigned-off-by: prmellor <pmellor@redhat.com>", "committedDate": "2020-02-11T18:18:06Z", "type": "commit"}, {"oid": "2df232c532cc390c1493cb34571c68252eb2add7", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/2df232c532cc390c1493cb34571c68252eb2add7", "message": "build fix\n\nSigned-off-by: prmellor <pmellor@redhat.com>", "committedDate": "2020-02-11T18:18:06Z", "type": "commit"}, {"oid": "6a3d7f197a450cb98f5479dbc0dfcda68ad85a80", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/6a3d7f197a450cb98f5479dbc0dfcda68ad85a80", "message": "update to config steps\n\nSigned-off-by: prmellor <pmellor@redhat.com>", "committedDate": "2020-02-11T18:18:06Z", "type": "commit"}, {"oid": "0cd074fe8b260a71eb47e7d54750e1e5c1fdead8", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/0cd074fe8b260a71eb47e7d54750e1e5c1fdead8", "message": "update intro to chapter\n\nSigned-off-by: prmellor <pmellor@redhat.com>", "committedDate": "2020-02-11T18:18:06Z", "type": "commit"}, {"oid": "cbcba4cc156d78a6886a7577509074c408618a4d", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/cbcba4cc156d78a6886a7577509074c408618a4d", "message": "review edits DL\n\nSigned-off-by: prmellor <pmellor@redhat.com>", "committedDate": "2020-02-11T18:18:06Z", "type": "commit"}, {"oid": "cbcba4cc156d78a6886a7577509074c408618a4d", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/cbcba4cc156d78a6886a7577509074c408618a4d", "message": "review edits DL\n\nSigned-off-by: prmellor <pmellor@redhat.com>", "committedDate": "2020-02-11T18:18:06Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODEwMzMxOQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2438#discussion_r378103319", "bodyText": "That's not true. If you configure authentication using oauth you have to configure the authorization part independently; it cannot use the authentication parameters.", "author": "ppatierno", "createdAt": "2020-02-12T08:36:01Z", "path": "documentation/modules/oauth/proc-oauth-authorization-broker-config.adoc", "diffHunk": "@@ -0,0 +1,95 @@\n+// Module included in the following module:\n+//\n+// con-oauth-config.adoc\n+\n+[id='proc-oauth-authorization-broker-config-{context}']\n+= Configuring {oauth} authorization support\n+\n+This procedure describes how to configure Kafka brokers to use {oauth} authorization using {oauth-server} Authorization Services.\n+\n+The properties used to configure authorization for Kafka brokers might already be configured for xref:proc-oauth-authentication-broker-config-{context}[{oauth} authentication].\n+If so, they are also used for authorization if the equivalent authorization properties are not defined.", "originalCommit": "cbcba4cc156d78a6886a7577509074c408618a4d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODMzNjk0MQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2438#discussion_r378336941", "bodyText": "Thanks @ppatierno. Marko has clarified in a later comment. And suggests we remove these sentences.", "author": "PaulRMellor", "createdAt": "2020-02-12T15:46:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODEwMzMxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODMzNzY2Mg==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2438#discussion_r378337662", "bodyText": "Removed", "author": "PaulRMellor", "createdAt": "2020-02-12T15:48:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODEwMzMxOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODEwNDY5NQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2438#discussion_r378104695", "bodyText": "it's not true.", "author": "ppatierno", "createdAt": "2020-02-12T08:38:54Z", "path": "documentation/modules/oauth/proc-oauth-authorization-broker-config.adoc", "diffHunk": "@@ -0,0 +1,95 @@\n+// Module included in the following module:\n+//\n+// con-oauth-config.adoc\n+\n+[id='proc-oauth-authorization-broker-config-{context}']\n+= Configuring {oauth} authorization support\n+\n+This procedure describes how to configure Kafka brokers to use {oauth} authorization using {oauth-server} Authorization Services.\n+\n+The properties used to configure authorization for Kafka brokers might already be configured for xref:proc-oauth-authentication-broker-config-{context}[{oauth} authentication].\n+If so, they are also used for authorization if the equivalent authorization properties are not defined.\n+\n+.Before you begin\n+Consider the access you require or want to limit for certain users.\n+You can use a combination of groups, roles, clients, and users to configure access in {oauth-server}.\n+\n+Typically, groups are used to match users based on organizational departments or geographical locations.\n+And roles are used to match users based on their function.\n+\n+With {oauth-server}, you can store users and groups in LDAP, whereas clients and roles cannot be stored this way.\n+Storage and access to user data may be a factor in how you choose to configure authorization policies.\n+\n+NOTE: xref:ref-kafka-authorization-super-user-deployment-configuration-kafka[Super users] always have unconstrained access to a Kafka broker regardless of the authorization implemented on the Kafka broker.\n+\n+.Prerequisites\n+\n+* {ProductName} must be configured to use {oauth} with {oauth-server} for xref:assembly-oauth-authentication_str[token-based authentication].\n+You use the same {oauth-server} server endpoint when you set up authorization.\n+* You need to understand how to manage policies and permissions for {oauth-server} Authorization Services, as described in the {oauth-server-doc}.\n+\n+\n+.Procedure\n+\n+. Access the {oauth-server} Admin Console or use the {oauth-server} Admin CLI to enable Authorization Services for the Kafka broker client you created when setting up {oauth} authentication.\n+. Use Authorization Services to define resources, authorization scopes, policies, and permissions for the client.\n+. Bind the permissions to users and clients by assigning them roles and groups.\n+. Configure the Kafka brokers to use {oauth-server} authorization by updating the Kafka broker configuration (`Kafka.spec.kafka`) of your `Kafka` resource in an editor.\n++\n+[source,shell]\n+----\n+kubectl edit kafka my-cluster\n+----\n+\n+. Configure the Kafka broker `kafka` configuration to use `keycloak` authorization, and to be able to access the authorization server and Authorization Services.\n++\n+For example:\n++\n+[source,yaml,subs=\"+quotes,attributes\"]\n+----\n+apiVersion: {KafkaApiVersion}\n+kind: Kafka\n+metadata:\n+  name: my-cluster\n+spec:\n+  kafka\n+  # ...\n+  authorization:\n+    type: *keycloak* <1>\n+    tokenEndpointUri: <__https://<auth-server-address>/auth/realms/external/protocol/openid-connect/token/introspect__> <2>\n+    clientId: kafka <3>\n+    delegateToKafkaAcls: false <4>\n+    disableTlsHostnameVerification: false <5>\n+    superUsers: <6>\n+      - CN=fred\n+      - sam\n+      - CN=edward\n+    tlsTrustedCertificates: <7>\n+    - secretName: oauth-server-cert\n+      certificate: ca.crt\n+  #...\n+----\n+<1> Type `keycloak` enables {oauth-server} authorization.\n+<2> URI of the {oauth-server} token introspection endpoint. For production, always use HTTPs.\n+<3> The client ID of the {oauth} client definition in {oauth-server} that has Authorization Services enabled. Typically, `kafka` is used as the ID.\n+<4> Delegate authorization to Kafka `SimpleACLAuthorizer` if access is denied by {oauth-server} Authorization Services policies.\n+The default is `false`.\n+<5> (Optional) Disable TLS hostname verification. Default is `false`.\n+<6> Designated xref:ref-kafka-authorization-super-user-deployment-configuration-kafka[super users].\n+<7> (Optional) Trusted certificates for TLS connection to the authorization server.\n++\n+If the URI, client ID and TLS properties are not added, the equivalent properties configured for {oauth} authentication are used.", "originalCommit": "cbcba4cc156d78a6886a7577509074c408618a4d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODMzODA3MA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2438#discussion_r378338070", "bodyText": "Removed.", "author": "PaulRMellor", "createdAt": "2020-02-12T15:48:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODEwNDY5NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODE1NjA4Mg==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2438#discussion_r378156082", "bodyText": "Maybe it should be slighlty more specific?:\n\"Security policies and permissions defined in {oauth-server} are used to grant access to resources on Kafka brokers.\"", "author": "mstruk", "createdAt": "2020-02-12T10:15:28Z", "path": "documentation/assemblies/oauth/assembly-oauth-authorization.adoc", "diffHunk": "@@ -0,0 +1,32 @@\n+// This assembly is included in the following assemblies:\n+//\n+// assembly-deployment-configuration.adoc\n+\n+[id='assembly-oauth-authorization_{context}']\n+= Using {oauth} token-based authorization\n+\n+If you are using {oauth} with {oauth-server} for token-based authentication,\n+you can also use  {oauth-server} to configure authorization rules to constrain client access to Kafka brokers.\n+Authentication establishes the identity of a user.\n+Authorization decides the level of access for that user.\n+\n+{ProductName} supports the use of {oauth} token-based authorization through {oauth-server} {oauth-authorization-services},\n+which allows you to manage security policies and permissions centrally.\n+\n+Security policies and permissions defined in {oauth-server} are used to grant access to Kafka brokers.", "originalCommit": "cbcba4cc156d78a6886a7577509074c408618a4d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODE2MzEzNg==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2438#discussion_r378163136", "bodyText": "This will change soon as permissions will get refreshed periodically so this sentence won't be true any more. Maybe better to just say:\n\"The authorizer fetches a list of granted permissions from the authorization server as needed, ...\"", "author": "mstruk", "createdAt": "2020-02-12T10:28:18Z", "path": "documentation/modules/oauth/con-oauth-authorization-mechanism.adoc", "diffHunk": "@@ -0,0 +1,20 @@\n+// Module included in the following assemblies:\n+//\n+// assembly-oauth-authorization.adoc\n+\n+[id='con-oauth-authorization-mechanism_{context}']\n+= {oauth} authorization mechanism\n+\n+{oauth} authorization in {ProductName} uses {oauth-server} server Authorization Services REST endpoints to extend token-based authentication with {oauth-server} by applying defined security policies on a particular user,\n+and providing a list of permissions granted on different resources for that user.\n+Policies use roles and groups to match permissions to users.\n+{oauth} authorization enforces permissions locally based on the received list of grants for the user from {oauth-server} Authorization Services.\n+\n+== Kafka broker custom authorizer\n+\n+A {oauth-server} _authorizer_ (`KeycloakRBACAuthorizer`) is provided with {ProductName}.\n+To be able to use the {oauth-server} REST endpoints for Authorization Services provided by {oauth-server},\n+you configure a custom authorizer on the Kafka broker.\n+\n+The authorizer fetches a list of granted permissions from the authorization server one-time-only,", "originalCommit": "cbcba4cc156d78a6886a7577509074c408618a4d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODM5MjgxOA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2438#discussion_r378392818", "bodyText": "Excellent suggestion", "author": "PaulRMellor", "createdAt": "2020-02-12T17:13:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODE2MzEzNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODE2Njc5MQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2438#discussion_r378166791", "bodyText": "Authorization decision is performed for each authorization request, not for user session so this sentence doesn't sound right. Maybe just say:\n\"..., making rapid authorization decision for each client request\"", "author": "mstruk", "createdAt": "2020-02-12T10:35:04Z", "path": "documentation/modules/oauth/con-oauth-authorization-mechanism.adoc", "diffHunk": "@@ -0,0 +1,20 @@\n+// Module included in the following assemblies:\n+//\n+// assembly-oauth-authorization.adoc\n+\n+[id='con-oauth-authorization-mechanism_{context}']\n+= {oauth} authorization mechanism\n+\n+{oauth} authorization in {ProductName} uses {oauth-server} server Authorization Services REST endpoints to extend token-based authentication with {oauth-server} by applying defined security policies on a particular user,\n+and providing a list of permissions granted on different resources for that user.\n+Policies use roles and groups to match permissions to users.\n+{oauth} authorization enforces permissions locally based on the received list of grants for the user from {oauth-server} Authorization Services.\n+\n+== Kafka broker custom authorizer\n+\n+A {oauth-server} _authorizer_ (`KeycloakRBACAuthorizer`) is provided with {ProductName}.\n+To be able to use the {oauth-server} REST endpoints for Authorization Services provided by {oauth-server},\n+you configure a custom authorizer on the Kafka broker.\n+\n+The authorizer fetches a list of granted permissions from the authorization server one-time-only,\n+and enforces authorization locally on the Kafka Broker, making rapid authorization decisions for each user session.", "originalCommit": "cbcba4cc156d78a6886a7577509074c408618a4d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODE3Mzc3Ng==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2438#discussion_r378173776", "bodyText": "That is in fact, like @ppatierno pointed out not true for Strimzi on Kubernetes. It is only true in very specific circumstances when manually configuring a Kafka Broker without using Strimzi Kafka Operator. It is the configuration used in strimzi-kafka-oauth project's examples and testsuite. But is not really used with Strimzi Kafka Operator.\nBest to remove the last two sentences.", "author": "mstruk", "createdAt": "2020-02-12T10:48:13Z", "path": "documentation/modules/oauth/proc-oauth-authorization-broker-config.adoc", "diffHunk": "@@ -0,0 +1,95 @@\n+// Module included in the following module:\n+//\n+// con-oauth-config.adoc\n+\n+[id='proc-oauth-authorization-broker-config-{context}']\n+= Configuring {oauth} authorization support\n+\n+This procedure describes how to configure Kafka brokers to use {oauth} authorization using {oauth-server} Authorization Services.\n+\n+The properties used to configure authorization for Kafka brokers might already be configured for xref:proc-oauth-authentication-broker-config-{context}[{oauth} authentication].\n+If so, they are also used for authorization if the equivalent authorization properties are not defined.", "originalCommit": "cbcba4cc156d78a6886a7577509074c408618a4d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODM5MzUzMA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2438#discussion_r378393530", "bodyText": "Removed", "author": "PaulRMellor", "createdAt": "2020-02-12T17:14:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODE3Mzc3Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODE3ODQwOQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2438#discussion_r378178409", "bodyText": "Here it's a bit confusing what groups we are talking about. Maybe qualify them with:\n\"You can use a combination of Keycloak groups, roles, clients, and users to configure access ...\"", "author": "mstruk", "createdAt": "2020-02-12T10:56:57Z", "path": "documentation/modules/oauth/proc-oauth-authorization-broker-config.adoc", "diffHunk": "@@ -0,0 +1,95 @@\n+// Module included in the following module:\n+//\n+// con-oauth-config.adoc\n+\n+[id='proc-oauth-authorization-broker-config-{context}']\n+= Configuring {oauth} authorization support\n+\n+This procedure describes how to configure Kafka brokers to use {oauth} authorization using {oauth-server} Authorization Services.\n+\n+The properties used to configure authorization for Kafka brokers might already be configured for xref:proc-oauth-authentication-broker-config-{context}[{oauth} authentication].\n+If so, they are also used for authorization if the equivalent authorization properties are not defined.\n+\n+.Before you begin\n+Consider the access you require or want to limit for certain users.\n+You can use a combination of groups, roles, clients, and users to configure access in {oauth-server}.", "originalCommit": "cbcba4cc156d78a6886a7577509074c408618a4d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODE4NTg2Nw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2438#discussion_r378185867", "bodyText": "This is incorrect. It should rather be:\nhttps:///auth/realms/external/protocol/openid-connect/token\nBut it should be pointed out that it's an example URI - here a realm called 'external' is assumed. Actual name will almost certainly be different.", "author": "mstruk", "createdAt": "2020-02-12T11:11:55Z", "path": "documentation/modules/oauth/proc-oauth-authorization-broker-config.adoc", "diffHunk": "@@ -0,0 +1,95 @@\n+// Module included in the following module:\n+//\n+// con-oauth-config.adoc\n+\n+[id='proc-oauth-authorization-broker-config-{context}']\n+= Configuring {oauth} authorization support\n+\n+This procedure describes how to configure Kafka brokers to use {oauth} authorization using {oauth-server} Authorization Services.\n+\n+The properties used to configure authorization for Kafka brokers might already be configured for xref:proc-oauth-authentication-broker-config-{context}[{oauth} authentication].\n+If so, they are also used for authorization if the equivalent authorization properties are not defined.\n+\n+.Before you begin\n+Consider the access you require or want to limit for certain users.\n+You can use a combination of groups, roles, clients, and users to configure access in {oauth-server}.\n+\n+Typically, groups are used to match users based on organizational departments or geographical locations.\n+And roles are used to match users based on their function.\n+\n+With {oauth-server}, you can store users and groups in LDAP, whereas clients and roles cannot be stored this way.\n+Storage and access to user data may be a factor in how you choose to configure authorization policies.\n+\n+NOTE: xref:ref-kafka-authorization-super-user-deployment-configuration-kafka[Super users] always have unconstrained access to a Kafka broker regardless of the authorization implemented on the Kafka broker.\n+\n+.Prerequisites\n+\n+* {ProductName} must be configured to use {oauth} with {oauth-server} for xref:assembly-oauth-authentication_str[token-based authentication].\n+You use the same {oauth-server} server endpoint when you set up authorization.\n+* You need to understand how to manage policies and permissions for {oauth-server} Authorization Services, as described in the {oauth-server-doc}.\n+\n+\n+.Procedure\n+\n+. Access the {oauth-server} Admin Console or use the {oauth-server} Admin CLI to enable Authorization Services for the Kafka broker client you created when setting up {oauth} authentication.\n+. Use Authorization Services to define resources, authorization scopes, policies, and permissions for the client.\n+. Bind the permissions to users and clients by assigning them roles and groups.\n+. Configure the Kafka brokers to use {oauth-server} authorization by updating the Kafka broker configuration (`Kafka.spec.kafka`) of your `Kafka` resource in an editor.\n++\n+[source,shell]\n+----\n+kubectl edit kafka my-cluster\n+----\n+\n+. Configure the Kafka broker `kafka` configuration to use `keycloak` authorization, and to be able to access the authorization server and Authorization Services.\n++\n+For example:\n++\n+[source,yaml,subs=\"+quotes,attributes\"]\n+----\n+apiVersion: {KafkaApiVersion}\n+kind: Kafka\n+metadata:\n+  name: my-cluster\n+spec:\n+  kafka\n+  # ...\n+  authorization:\n+    type: *keycloak* <1>\n+    tokenEndpointUri: <__https://<auth-server-address>/auth/realms/external/protocol/openid-connect/token/introspect__> <2>", "originalCommit": "cbcba4cc156d78a6886a7577509074c408618a4d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODE4NzUwMg==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2438#discussion_r378187502", "bodyText": "It's 'token endpoint', not 'token introspection endpoint'.", "author": "mstruk", "createdAt": "2020-02-12T11:15:19Z", "path": "documentation/modules/oauth/proc-oauth-authorization-broker-config.adoc", "diffHunk": "@@ -0,0 +1,95 @@\n+// Module included in the following module:\n+//\n+// con-oauth-config.adoc\n+\n+[id='proc-oauth-authorization-broker-config-{context}']\n+= Configuring {oauth} authorization support\n+\n+This procedure describes how to configure Kafka brokers to use {oauth} authorization using {oauth-server} Authorization Services.\n+\n+The properties used to configure authorization for Kafka brokers might already be configured for xref:proc-oauth-authentication-broker-config-{context}[{oauth} authentication].\n+If so, they are also used for authorization if the equivalent authorization properties are not defined.\n+\n+.Before you begin\n+Consider the access you require or want to limit for certain users.\n+You can use a combination of groups, roles, clients, and users to configure access in {oauth-server}.\n+\n+Typically, groups are used to match users based on organizational departments or geographical locations.\n+And roles are used to match users based on their function.\n+\n+With {oauth-server}, you can store users and groups in LDAP, whereas clients and roles cannot be stored this way.\n+Storage and access to user data may be a factor in how you choose to configure authorization policies.\n+\n+NOTE: xref:ref-kafka-authorization-super-user-deployment-configuration-kafka[Super users] always have unconstrained access to a Kafka broker regardless of the authorization implemented on the Kafka broker.\n+\n+.Prerequisites\n+\n+* {ProductName} must be configured to use {oauth} with {oauth-server} for xref:assembly-oauth-authentication_str[token-based authentication].\n+You use the same {oauth-server} server endpoint when you set up authorization.\n+* You need to understand how to manage policies and permissions for {oauth-server} Authorization Services, as described in the {oauth-server-doc}.\n+\n+\n+.Procedure\n+\n+. Access the {oauth-server} Admin Console or use the {oauth-server} Admin CLI to enable Authorization Services for the Kafka broker client you created when setting up {oauth} authentication.\n+. Use Authorization Services to define resources, authorization scopes, policies, and permissions for the client.\n+. Bind the permissions to users and clients by assigning them roles and groups.\n+. Configure the Kafka brokers to use {oauth-server} authorization by updating the Kafka broker configuration (`Kafka.spec.kafka`) of your `Kafka` resource in an editor.\n++\n+[source,shell]\n+----\n+kubectl edit kafka my-cluster\n+----\n+\n+. Configure the Kafka broker `kafka` configuration to use `keycloak` authorization, and to be able to access the authorization server and Authorization Services.\n++\n+For example:\n++\n+[source,yaml,subs=\"+quotes,attributes\"]\n+----\n+apiVersion: {KafkaApiVersion}\n+kind: Kafka\n+metadata:\n+  name: my-cluster\n+spec:\n+  kafka\n+  # ...\n+  authorization:\n+    type: *keycloak* <1>\n+    tokenEndpointUri: <__https://<auth-server-address>/auth/realms/external/protocol/openid-connect/token/introspect__> <2>\n+    clientId: kafka <3>\n+    delegateToKafkaAcls: false <4>\n+    disableTlsHostnameVerification: false <5>\n+    superUsers: <6>\n+      - CN=fred\n+      - sam\n+      - CN=edward\n+    tlsTrustedCertificates: <7>\n+    - secretName: oauth-server-cert\n+      certificate: ca.crt\n+  #...\n+----\n+<1> Type `keycloak` enables {oauth-server} authorization.\n+<2> URI of the {oauth-server} token introspection endpoint. For production, always use HTTPs.", "originalCommit": "cbcba4cc156d78a6886a7577509074c408618a4d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODE4OTA0Ng==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2438#discussion_r378189046", "bodyText": "If this is optional, so is bullet no. 4, and no. 6.", "author": "mstruk", "createdAt": "2020-02-12T11:18:40Z", "path": "documentation/modules/oauth/proc-oauth-authorization-broker-config.adoc", "diffHunk": "@@ -0,0 +1,95 @@\n+// Module included in the following module:\n+//\n+// con-oauth-config.adoc\n+\n+[id='proc-oauth-authorization-broker-config-{context}']\n+= Configuring {oauth} authorization support\n+\n+This procedure describes how to configure Kafka brokers to use {oauth} authorization using {oauth-server} Authorization Services.\n+\n+The properties used to configure authorization for Kafka brokers might already be configured for xref:proc-oauth-authentication-broker-config-{context}[{oauth} authentication].\n+If so, they are also used for authorization if the equivalent authorization properties are not defined.\n+\n+.Before you begin\n+Consider the access you require or want to limit for certain users.\n+You can use a combination of groups, roles, clients, and users to configure access in {oauth-server}.\n+\n+Typically, groups are used to match users based on organizational departments or geographical locations.\n+And roles are used to match users based on their function.\n+\n+With {oauth-server}, you can store users and groups in LDAP, whereas clients and roles cannot be stored this way.\n+Storage and access to user data may be a factor in how you choose to configure authorization policies.\n+\n+NOTE: xref:ref-kafka-authorization-super-user-deployment-configuration-kafka[Super users] always have unconstrained access to a Kafka broker regardless of the authorization implemented on the Kafka broker.\n+\n+.Prerequisites\n+\n+* {ProductName} must be configured to use {oauth} with {oauth-server} for xref:assembly-oauth-authentication_str[token-based authentication].\n+You use the same {oauth-server} server endpoint when you set up authorization.\n+* You need to understand how to manage policies and permissions for {oauth-server} Authorization Services, as described in the {oauth-server-doc}.\n+\n+\n+.Procedure\n+\n+. Access the {oauth-server} Admin Console or use the {oauth-server} Admin CLI to enable Authorization Services for the Kafka broker client you created when setting up {oauth} authentication.\n+. Use Authorization Services to define resources, authorization scopes, policies, and permissions for the client.\n+. Bind the permissions to users and clients by assigning them roles and groups.\n+. Configure the Kafka brokers to use {oauth-server} authorization by updating the Kafka broker configuration (`Kafka.spec.kafka`) of your `Kafka` resource in an editor.\n++\n+[source,shell]\n+----\n+kubectl edit kafka my-cluster\n+----\n+\n+. Configure the Kafka broker `kafka` configuration to use `keycloak` authorization, and to be able to access the authorization server and Authorization Services.\n++\n+For example:\n++\n+[source,yaml,subs=\"+quotes,attributes\"]\n+----\n+apiVersion: {KafkaApiVersion}\n+kind: Kafka\n+metadata:\n+  name: my-cluster\n+spec:\n+  kafka\n+  # ...\n+  authorization:\n+    type: *keycloak* <1>\n+    tokenEndpointUri: <__https://<auth-server-address>/auth/realms/external/protocol/openid-connect/token/introspect__> <2>\n+    clientId: kafka <3>\n+    delegateToKafkaAcls: false <4>\n+    disableTlsHostnameVerification: false <5>\n+    superUsers: <6>\n+      - CN=fred\n+      - sam\n+      - CN=edward\n+    tlsTrustedCertificates: <7>\n+    - secretName: oauth-server-cert\n+      certificate: ca.crt\n+  #...\n+----\n+<1> Type `keycloak` enables {oauth-server} authorization.\n+<2> URI of the {oauth-server} token introspection endpoint. For production, always use HTTPs.\n+<3> The client ID of the {oauth} client definition in {oauth-server} that has Authorization Services enabled. Typically, `kafka` is used as the ID.\n+<4> Delegate authorization to Kafka `SimpleACLAuthorizer` if access is denied by {oauth-server} Authorization Services policies.\n+The default is `false`.\n+<5> (Optional) Disable TLS hostname verification. Default is `false`.", "originalCommit": "cbcba4cc156d78a6886a7577509074c408618a4d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODM5NjY0OA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2438#discussion_r378396648", "bodyText": "Added to 4 and 6", "author": "PaulRMellor", "createdAt": "2020-02-12T17:19:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODE4OTA0Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODE5MDcxMA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2438#discussion_r378190710", "bodyText": "Like @ppatierno pointed out - not true, or rather - like I described previously - not applicable to Strimzi Kafka Operator.\nJust remove this sentence I guess.", "author": "mstruk", "createdAt": "2020-02-12T11:22:14Z", "path": "documentation/modules/oauth/proc-oauth-authorization-broker-config.adoc", "diffHunk": "@@ -0,0 +1,95 @@\n+// Module included in the following module:\n+//\n+// con-oauth-config.adoc\n+\n+[id='proc-oauth-authorization-broker-config-{context}']\n+= Configuring {oauth} authorization support\n+\n+This procedure describes how to configure Kafka brokers to use {oauth} authorization using {oauth-server} Authorization Services.\n+\n+The properties used to configure authorization for Kafka brokers might already be configured for xref:proc-oauth-authentication-broker-config-{context}[{oauth} authentication].\n+If so, they are also used for authorization if the equivalent authorization properties are not defined.\n+\n+.Before you begin\n+Consider the access you require or want to limit for certain users.\n+You can use a combination of groups, roles, clients, and users to configure access in {oauth-server}.\n+\n+Typically, groups are used to match users based on organizational departments or geographical locations.\n+And roles are used to match users based on their function.\n+\n+With {oauth-server}, you can store users and groups in LDAP, whereas clients and roles cannot be stored this way.\n+Storage and access to user data may be a factor in how you choose to configure authorization policies.\n+\n+NOTE: xref:ref-kafka-authorization-super-user-deployment-configuration-kafka[Super users] always have unconstrained access to a Kafka broker regardless of the authorization implemented on the Kafka broker.\n+\n+.Prerequisites\n+\n+* {ProductName} must be configured to use {oauth} with {oauth-server} for xref:assembly-oauth-authentication_str[token-based authentication].\n+You use the same {oauth-server} server endpoint when you set up authorization.\n+* You need to understand how to manage policies and permissions for {oauth-server} Authorization Services, as described in the {oauth-server-doc}.\n+\n+\n+.Procedure\n+\n+. Access the {oauth-server} Admin Console or use the {oauth-server} Admin CLI to enable Authorization Services for the Kafka broker client you created when setting up {oauth} authentication.\n+. Use Authorization Services to define resources, authorization scopes, policies, and permissions for the client.\n+. Bind the permissions to users and clients by assigning them roles and groups.\n+. Configure the Kafka brokers to use {oauth-server} authorization by updating the Kafka broker configuration (`Kafka.spec.kafka`) of your `Kafka` resource in an editor.\n++\n+[source,shell]\n+----\n+kubectl edit kafka my-cluster\n+----\n+\n+. Configure the Kafka broker `kafka` configuration to use `keycloak` authorization, and to be able to access the authorization server and Authorization Services.\n++\n+For example:\n++\n+[source,yaml,subs=\"+quotes,attributes\"]\n+----\n+apiVersion: {KafkaApiVersion}\n+kind: Kafka\n+metadata:\n+  name: my-cluster\n+spec:\n+  kafka\n+  # ...\n+  authorization:\n+    type: *keycloak* <1>\n+    tokenEndpointUri: <__https://<auth-server-address>/auth/realms/external/protocol/openid-connect/token/introspect__> <2>\n+    clientId: kafka <3>\n+    delegateToKafkaAcls: false <4>\n+    disableTlsHostnameVerification: false <5>\n+    superUsers: <6>\n+      - CN=fred\n+      - sam\n+      - CN=edward\n+    tlsTrustedCertificates: <7>\n+    - secretName: oauth-server-cert\n+      certificate: ca.crt\n+  #...\n+----\n+<1> Type `keycloak` enables {oauth-server} authorization.\n+<2> URI of the {oauth-server} token introspection endpoint. For production, always use HTTPs.\n+<3> The client ID of the {oauth} client definition in {oauth-server} that has Authorization Services enabled. Typically, `kafka` is used as the ID.\n+<4> Delegate authorization to Kafka `SimpleACLAuthorizer` if access is denied by {oauth-server} Authorization Services policies.\n+The default is `false`.\n+<5> (Optional) Disable TLS hostname verification. Default is `false`.\n+<6> Designated xref:ref-kafka-authorization-super-user-deployment-configuration-kafka[super users].\n+<7> (Optional) Trusted certificates for TLS connection to the authorization server.\n++\n+If the URI, client ID and TLS properties are not added, the equivalent properties configured for {oauth} authentication are used.", "originalCommit": "cbcba4cc156d78a6886a7577509074c408618a4d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODM5NjkwOA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2438#discussion_r378396908", "bodyText": "Removed", "author": "PaulRMellor", "createdAt": "2020-02-12T17:20:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODE5MDcxMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODE5MTU4NQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2438#discussion_r378191585", "bodyText": "I think CONTAINER_NAME can safely be assumed to be 'kafka', thus:\nkubectl logs -f ${POD_NAME} -c kafka", "author": "mstruk", "createdAt": "2020-02-12T11:24:12Z", "path": "documentation/modules/oauth/proc-oauth-authorization-broker-config.adoc", "diffHunk": "@@ -0,0 +1,95 @@\n+// Module included in the following module:\n+//\n+// con-oauth-config.adoc\n+\n+[id='proc-oauth-authorization-broker-config-{context}']\n+= Configuring {oauth} authorization support\n+\n+This procedure describes how to configure Kafka brokers to use {oauth} authorization using {oauth-server} Authorization Services.\n+\n+The properties used to configure authorization for Kafka brokers might already be configured for xref:proc-oauth-authentication-broker-config-{context}[{oauth} authentication].\n+If so, they are also used for authorization if the equivalent authorization properties are not defined.\n+\n+.Before you begin\n+Consider the access you require or want to limit for certain users.\n+You can use a combination of groups, roles, clients, and users to configure access in {oauth-server}.\n+\n+Typically, groups are used to match users based on organizational departments or geographical locations.\n+And roles are used to match users based on their function.\n+\n+With {oauth-server}, you can store users and groups in LDAP, whereas clients and roles cannot be stored this way.\n+Storage and access to user data may be a factor in how you choose to configure authorization policies.\n+\n+NOTE: xref:ref-kafka-authorization-super-user-deployment-configuration-kafka[Super users] always have unconstrained access to a Kafka broker regardless of the authorization implemented on the Kafka broker.\n+\n+.Prerequisites\n+\n+* {ProductName} must be configured to use {oauth} with {oauth-server} for xref:assembly-oauth-authentication_str[token-based authentication].\n+You use the same {oauth-server} server endpoint when you set up authorization.\n+* You need to understand how to manage policies and permissions for {oauth-server} Authorization Services, as described in the {oauth-server-doc}.\n+\n+\n+.Procedure\n+\n+. Access the {oauth-server} Admin Console or use the {oauth-server} Admin CLI to enable Authorization Services for the Kafka broker client you created when setting up {oauth} authentication.\n+. Use Authorization Services to define resources, authorization scopes, policies, and permissions for the client.\n+. Bind the permissions to users and clients by assigning them roles and groups.\n+. Configure the Kafka brokers to use {oauth-server} authorization by updating the Kafka broker configuration (`Kafka.spec.kafka`) of your `Kafka` resource in an editor.\n++\n+[source,shell]\n+----\n+kubectl edit kafka my-cluster\n+----\n+\n+. Configure the Kafka broker `kafka` configuration to use `keycloak` authorization, and to be able to access the authorization server and Authorization Services.\n++\n+For example:\n++\n+[source,yaml,subs=\"+quotes,attributes\"]\n+----\n+apiVersion: {KafkaApiVersion}\n+kind: Kafka\n+metadata:\n+  name: my-cluster\n+spec:\n+  kafka\n+  # ...\n+  authorization:\n+    type: *keycloak* <1>\n+    tokenEndpointUri: <__https://<auth-server-address>/auth/realms/external/protocol/openid-connect/token/introspect__> <2>\n+    clientId: kafka <3>\n+    delegateToKafkaAcls: false <4>\n+    disableTlsHostnameVerification: false <5>\n+    superUsers: <6>\n+      - CN=fred\n+      - sam\n+      - CN=edward\n+    tlsTrustedCertificates: <7>\n+    - secretName: oauth-server-cert\n+      certificate: ca.crt\n+  #...\n+----\n+<1> Type `keycloak` enables {oauth-server} authorization.\n+<2> URI of the {oauth-server} token introspection endpoint. For production, always use HTTPs.\n+<3> The client ID of the {oauth} client definition in {oauth-server} that has Authorization Services enabled. Typically, `kafka` is used as the ID.\n+<4> Delegate authorization to Kafka `SimpleACLAuthorizer` if access is denied by {oauth-server} Authorization Services policies.\n+The default is `false`.\n+<5> (Optional) Disable TLS hostname verification. Default is `false`.\n+<6> Designated xref:ref-kafka-authorization-super-user-deployment-configuration-kafka[super users].\n+<7> (Optional) Trusted certificates for TLS connection to the authorization server.\n++\n+If the URI, client ID and TLS properties are not added, the equivalent properties configured for {oauth} authentication are used.\n+\n+. Save and exit the editor, then wait for rolling updates to complete.\n+\n+. Check the update in the logs or by watching the pod state transitions:\n++\n+[source,shell,subs=\"+quotes,attributes\"]\n+----\n+kubectl logs -f ${POD_NAME} -c ${CONTAINER_NAME}", "originalCommit": "cbcba4cc156d78a6886a7577509074c408618a4d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "1479555dce0130dca2d73fe1208b79279aeb9015", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/1479555dce0130dca2d73fe1208b79279aeb9015", "message": "review edits PP, MS\n\nSigned-off-by: prmellor <pmellor@redhat.com>", "committedDate": "2020-02-12T17:31:06Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE2NDQ1NA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2438#discussion_r379164454", "bodyText": "Any reason to have it separately in this list from the OAuth authentication? The OAuth authorization worjks only with OAuth authentication, so I wonder if {oauth} token-based authentication and authorization would be better.", "author": "scholzj", "createdAt": "2020-02-13T22:52:32Z", "path": "documentation/assemblies/assembly-deployment-configuration.adoc", "diffHunk": "@@ -18,6 +18,7 @@ This chapter describes how to configure different aspects of the supported deplo\n * Kafka Mirror Maker\n * Kafka Bridge\n * {oauth} token-based authentication\n+* {oauth} token-based authorization", "originalCommit": "1479555dce0130dca2d73fe1208b79279aeb9015", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTMyMjY4NA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2438#discussion_r379322684", "bodyText": "To keep the layout simple, and also because we kept the authentication content generic, but the authorization is specifically Keycloak. The final section for authentication, Authorization server examples, mentions auth server options including Keycloak, which then leads into the next section on authorization. Maybe we live with it like this for now. But I wouldn't mind combining if that's the preference.", "author": "PaulRMellor", "createdAt": "2020-02-14T09:17:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE2NDQ1NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE2NDY5OA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2438#discussion_r379164698", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            you can also use  {oauth-server} to configure authorization rules to constrain client access to Kafka brokers.\n          \n          \n            \n            you can also use {oauth-server} to configure authorization rules to constrain client access to Kafka brokers.", "author": "scholzj", "createdAt": "2020-02-13T22:53:15Z", "path": "documentation/assemblies/oauth/assembly-oauth-authorization.adoc", "diffHunk": "@@ -0,0 +1,32 @@\n+// This assembly is included in the following assemblies:\n+//\n+// assembly-deployment-configuration.adoc\n+\n+[id='assembly-oauth-authorization_{context}']\n+= Using {oauth} token-based authorization\n+\n+If you are using {oauth} with {oauth-server} for token-based authentication,\n+you can also use  {oauth-server} to configure authorization rules to constrain client access to Kafka brokers.", "originalCommit": "1479555dce0130dca2d73fe1208b79279aeb9015", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE2NTMyNw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2438#discussion_r379165327", "bodyText": "Doble empty line is probably not needed.", "author": "scholzj", "createdAt": "2020-02-13T22:54:59Z", "path": "documentation/modules/oauth/proc-oauth-authorization-broker-config.adoc", "diffHunk": "@@ -0,0 +1,90 @@\n+// Module included in the following module:\n+//\n+// con-oauth-config.adoc\n+\n+[id='proc-oauth-authorization-broker-config-{context}']\n+= Configuring {oauth} authorization support\n+\n+This procedure describes how to configure Kafka brokers to use {oauth} authorization using {oauth-server} Authorization Services.\n+\n+.Before you begin\n+Consider the access you require or want to limit for certain users.\n+You can use a combination of {oauth-server} _groups_, _roles_, _clients_, and _users_ to configure access in {oauth-server}.\n+\n+Typically, groups are used to match users based on organizational departments or geographical locations.\n+And roles are used to match users based on their function.\n+\n+With {oauth-server}, you can store users and groups in LDAP, whereas clients and roles cannot be stored this way.\n+Storage and access to user data may be a factor in how you choose to configure authorization policies.\n+\n+NOTE: xref:ref-kafka-authorization-super-user-deployment-configuration-kafka[Super users] always have unconstrained access to a Kafka broker regardless of the authorization implemented on the Kafka broker.\n+\n+.Prerequisites\n+\n+* {ProductName} must be configured to use {oauth} with {oauth-server} for xref:assembly-oauth-authentication_str[token-based authentication].\n+You use the same {oauth-server} server endpoint when you set up authorization.\n+* You need to understand how to manage policies and permissions for {oauth-server} Authorization Services, as described in the {oauth-server-doc}.\n+", "originalCommit": "1479555dce0130dca2d73fe1208b79279aeb9015", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE2NjAyNw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2438#discussion_r379166027", "bodyText": "Could you please rename the variable? When reading the docs (+ updating them in the future etc.), this suggests that it is some generic term. But it is Keycloak, so maybe it should be :keycloak-server:? The same for all the other links / variables which are to Keycloak. It will make it much easier to read the raw asciidoc files.", "author": "scholzj", "createdAt": "2020-02-13T22:57:00Z", "path": "documentation/shared/attributes.adoc", "diffHunk": "@@ -38,11 +37,15 @@\n :kafka-exporter-project: link:https://github.com/danielqsj/kafka_exporter[Kafka Exporter^]\n \n //OAuth attributes and links\n+:oauth: OAuth 2.0\n :oauth2-site: link:https://oauth.net/2/[{oauth} site^]\n :oauth-artifact-version: 0.2.0\n-:oauth-blog: link:https://strimzi.io/2019/10/25/kafka-authentication-using-oauth-2.0.html[Kafka authentication using {oauth}]\n-:oauth-demo-keycloak: link:https://github.com/strimzi/strimzi-kafka-oauth/tree/master/examples[Using Keycloak as the {oauth} authorization server]\n-:oauth-demo-hydra: link:https://github.com/strimzi/strimzi-kafka-oauth/tree/master/examples/docker[Using Hydra as the {oauth} authorization server]\n+:oauth-server: Keycloak", "originalCommit": "1479555dce0130dca2d73fe1208b79279aeb9015", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTMyOTY2MA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2438#discussion_r379329660", "bodyText": "This would be a different value downstream, for example, Single Sign-On.", "author": "PaulRMellor", "createdAt": "2020-02-14T09:32:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE2NjAyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTMzMTQ4Mg==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2438#discussion_r379331482", "bodyText": "@scholzj - I would prefer we left as is, so we can use the same attribute upstream/downstream.", "author": "PaulRMellor", "createdAt": "2020-02-14T09:36:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE2NjAyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTM4NTc3Nw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2438#discussion_r379385777", "bodyText": "So why cannot the atribute downstream be keycloak? I know it will resolve to RHSSO, but I think it will still be more readable than with oauth.", "author": "scholzj", "createdAt": "2020-02-14T11:36:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE2NjAyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTM4NzE3Ng==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2438#discussion_r379387176", "bodyText": "what about authorization-server?", "author": "PaulRMellor", "createdAt": "2020-02-14T11:40:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE2NjAyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTM4ODQzNA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2438#discussion_r379388434", "bodyText": "I guss that is better. But it is still very generic name for a very specific feature whcih exists only in one project - Keycloak (+ RHSSO product).", "author": "scholzj", "createdAt": "2020-02-14T11:43:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE2NjAyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTM5MDE2OQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2438#discussion_r379390169", "bodyText": "Okay. If it makes things easier, we'll go with keycloak-server.  We only use the other keycloak attribute (oauth-server-doc) in a couple of places, and its just a link to doc, so I'll leave it as it is.", "author": "PaulRMellor", "createdAt": "2020-02-14T11:48:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE2NjAyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTM5MjIxNw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/2438#discussion_r379392217", "bodyText": "@scholzj - attribute name changed \ud83d\udc4d", "author": "PaulRMellor", "createdAt": "2020-02-14T11:53:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE2NjAyNw=="}], "type": "inlineReview"}, {"oid": "4d18cbb5aea533c55d7e4e084bbe689c4bdef28b", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/4d18cbb5aea533c55d7e4e084bbe689c4bdef28b", "message": "review edit JS\n\nSigned-off-by: prmellor <pmellor@redhat.com>", "committedDate": "2020-02-14T09:58:46Z", "type": "commit"}, {"oid": "eaef9be77d84f871275920e84daa72c50ea74a71", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/eaef9be77d84f871275920e84daa72c50ea74a71", "message": "change to attribute name\n\nSigned-off-by: prmellor <pmellor@redhat.com>", "committedDate": "2020-02-14T11:52:32Z", "type": "commit"}, {"oid": "3412d653d9f7c2ce099701116239f49c795373c9", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/3412d653d9f7c2ce099701116239f49c795373c9", "message": "further attribute changes\n\nSigned-off-by: prmellor <pmellor@redhat.com>", "committedDate": "2020-02-14T13:19:56Z", "type": "commit"}, {"oid": "497e884d56b47311e3edb29214bf7af05866cf7c", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/497e884d56b47311e3edb29214bf7af05866cf7c", "message": "intro move to facilitate reuse\n\nSigned-off-by: prmellor <pmellor@redhat.com>", "committedDate": "2020-02-14T16:44:07Z", "type": "commit"}, {"oid": "9568cedbf7c8e8fe83d4bb50a67e9e7587d8d101", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/9568cedbf7c8e8fe83d4bb50a67e9e7587d8d101", "message": "intro move to facilitate reuse\n\nSigned-off-by: prmellor <pmellor@redhat.com>", "committedDate": "2020-02-14T16:45:25Z", "type": "commit"}]}