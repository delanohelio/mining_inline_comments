{"pr_number": 3147, "pr_title": "[DOC] New procedure for config of external clients in deployment guide", "pr_createdAt": "2020-06-03T17:13:40Z", "pr_url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3147", "timeline": [{"oid": "a19adb363dea65e9868c7bd2c64f34aae0faf309", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/a19adb363dea65e9868c7bd2c64f34aae0faf309", "message": "[DOC] New procedure to show config of external clients in deployment guide\n\nSigned-off-by: prmellor <pmellor@redhat.com>", "committedDate": "2020-06-03T17:06:33Z", "type": "commit"}, {"oid": "a77951f707ac66ca4c41b1af4ac92e49c59bb715", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/a77951f707ac66ca4c41b1af4ac92e49c59bb715", "message": "Merge branch 'master' into doc-setting-up-external-clients", "committedDate": "2020-06-03T17:20:20Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc0NzQyNg==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3147#discussion_r434747426", "bodyText": "I would leave this out. This is confusing for users since it is not clear which port it is and where. It might not be the port which the users will use at the end.", "author": "scholzj", "createdAt": "2020-06-03T17:48:43Z", "path": "documentation/modules/deploying/proc-deploy-setup-external-clients.adoc", "diffHunk": "@@ -0,0 +1,262 @@\n+// Module included in the following assemblies:\n+//\n+// deploying/assembly_deploy-verify.adoc\n+// getting-started.adoc\n+\n+[id='setup-external-clients-{context}']\n+= Setting up external clients\n+\n+This procedure shows how to configure client access to a Kafka cluster from outside Kubernetes.\n+The process is the same for consumer and producer clients that need to read or write to the Kafka cluster.\n+\n+Using the address of the Kafka cluster, you can provide external access to a client on a different Kubernetes namespace or outside Kubernetes entirely.\n+\n+You configure an external Kafka listener to provide the access.\n+External listeners use port _9094_ to provide access from outside of Kubernetes.", "originalCommit": "a77951f707ac66ca4c41b1af4ac92e49c59bb715", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc0ODA1OA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3147#discussion_r434748058", "bodyText": "This seems a bit unnecedssary for me. Can't we just call the section Setting up access for clients outside of Kubernetes?", "author": "scholzj", "createdAt": "2020-06-03T17:49:44Z", "path": "documentation/modules/deploying/proc-deploy-setup-external-clients.adoc", "diffHunk": "@@ -0,0 +1,262 @@\n+// Module included in the following assemblies:\n+//\n+// deploying/assembly_deploy-verify.adoc\n+// getting-started.adoc\n+\n+[id='setup-external-clients-{context}']\n+= Setting up external clients\n+\n+This procedure shows how to configure client access to a Kafka cluster from outside Kubernetes.\n+The process is the same for consumer and producer clients that need to read or write to the Kafka cluster.", "originalCommit": "a77951f707ac66ca4c41b1af4ac92e49c59bb715", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTE0NDA1OA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3147#discussion_r435144058", "bodyText": "Removed The process is the same for consumer and producer clients that need to read or write to the Kafka cluster.", "author": "PaulRMellor", "createdAt": "2020-06-04T10:13:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc0ODA1OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTE0NDE0OA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3147#discussion_r435144148", "bodyText": "Changed title", "author": "PaulRMellor", "createdAt": "2020-06-04T10:13:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc0ODA1OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc0ODg2MQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3147#discussion_r434748861", "bodyText": "I would definitely leave out the security.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The type chosen depends on your requirements and approach to security.\n          \n          \n            \n            The type chosen depends on your requirements and environment / infrastructure.", "author": "scholzj", "createdAt": "2020-06-03T17:51:00Z", "path": "documentation/modules/deploying/proc-deploy-setup-external-clients.adoc", "diffHunk": "@@ -0,0 +1,262 @@\n+// Module included in the following assemblies:\n+//\n+// deploying/assembly_deploy-verify.adoc\n+// getting-started.adoc\n+\n+[id='setup-external-clients-{context}']\n+= Setting up external clients\n+\n+This procedure shows how to configure client access to a Kafka cluster from outside Kubernetes.\n+The process is the same for consumer and producer clients that need to read or write to the Kafka cluster.\n+\n+Using the address of the Kafka cluster, you can provide external access to a client on a different Kubernetes namespace or outside Kubernetes entirely.\n+\n+You configure an external Kafka listener to provide the access.\n+External listeners use port _9094_ to provide access from outside of Kubernetes.\n+The following external listener types are supported:\n+\n+* `route` to use OpenShift `Route` and the default HAProxy router\n+* `loadbalancer` to use loadbalancer services\n+* `nodeport` to use ports on Kubernetes nodes\n+* `ingress` to use Kubernetes _Ingress_ and the {NginxIngressController}\n+\n+The type chosen depends on your requirements and approach to security.", "originalCommit": "a77951f707ac66ca4c41b1af4ac92e49c59bb715", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc0OTgwMQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3147#discussion_r434749801", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            . An external listener is configured for the Kafka cluster, with TLS authentication and encryption, and Kafka _simple authorization_ enabled\n          \n          \n            \n            . An external listener is configured for the Kafka cluster, with TLS encryption and authentication, and Kafka _simple authorization_ enabled", "author": "scholzj", "createdAt": "2020-06-03T17:52:39Z", "path": "documentation/modules/deploying/proc-deploy-setup-external-clients.adoc", "diffHunk": "@@ -0,0 +1,262 @@\n+// Module included in the following assemblies:\n+//\n+// deploying/assembly_deploy-verify.adoc\n+// getting-started.adoc\n+\n+[id='setup-external-clients-{context}']\n+= Setting up external clients\n+\n+This procedure shows how to configure client access to a Kafka cluster from outside Kubernetes.\n+The process is the same for consumer and producer clients that need to read or write to the Kafka cluster.\n+\n+Using the address of the Kafka cluster, you can provide external access to a client on a different Kubernetes namespace or outside Kubernetes entirely.\n+\n+You configure an external Kafka listener to provide the access.\n+External listeners use port _9094_ to provide access from outside of Kubernetes.\n+The following external listener types are supported:\n+\n+* `route` to use OpenShift `Route` and the default HAProxy router\n+* `loadbalancer` to use loadbalancer services\n+* `nodeport` to use ports on Kubernetes nodes\n+* `ingress` to use Kubernetes _Ingress_ and the {NginxIngressController}\n+\n+The type chosen depends on your requirements and approach to security.\n+For example, `nodeport` is the least secure, so you might not wish to use it in a production environment.\n+\n+In this procedure:\n+\n+. An external listener is configured for the Kafka cluster, with TLS authentication and encryption, and Kafka _simple authorization_ enabled", "originalCommit": "a77951f707ac66ca4c41b1af4ac92e49c59bb715", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc1NDUyOA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3147#discussion_r434754528", "bodyText": "TBH, I'm not sure how ... but we should make it clear that this is just about TLS authentication and not TLS encryption.", "author": "scholzj", "createdAt": "2020-06-03T18:00:39Z", "path": "documentation/modules/deploying/proc-deploy-setup-external-clients.adoc", "diffHunk": "@@ -0,0 +1,262 @@\n+// Module included in the following assemblies:\n+//\n+// deploying/assembly_deploy-verify.adoc\n+// getting-started.adoc\n+\n+[id='setup-external-clients-{context}']\n+= Setting up external clients\n+\n+This procedure shows how to configure client access to a Kafka cluster from outside Kubernetes.\n+The process is the same for consumer and producer clients that need to read or write to the Kafka cluster.\n+\n+Using the address of the Kafka cluster, you can provide external access to a client on a different Kubernetes namespace or outside Kubernetes entirely.\n+\n+You configure an external Kafka listener to provide the access.\n+External listeners use port _9094_ to provide access from outside of Kubernetes.\n+The following external listener types are supported:\n+\n+* `route` to use OpenShift `Route` and the default HAProxy router\n+* `loadbalancer` to use loadbalancer services\n+* `nodeport` to use ports on Kubernetes nodes\n+* `ingress` to use Kubernetes _Ingress_ and the {NginxIngressController}\n+\n+The type chosen depends on your requirements and approach to security.\n+For example, `nodeport` is the least secure, so you might not wish to use it in a production environment.\n+\n+In this procedure:\n+\n+. An external listener is configured for the Kafka cluster, with TLS authentication and encryption, and Kafka _simple authorization_ enabled\n+. A `KafkaUser` is created for the client, with TLS authentication and Access Control Lists (ACLs) defined for _simple authorization_\n+\n+You can configure your listener to use TLS or SCRAM-SHA authentication.", "originalCommit": "a77951f707ac66ca4c41b1af4ac92e49c59bb715", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTE0OTMwMA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3147#discussion_r435149300", "bodyText": "not sure about this comment. Is it directed at line 31?", "author": "PaulRMellor", "createdAt": "2020-06-04T10:22:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc1NDUyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTE1MjkwNA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3147#discussion_r435152904", "bodyText": "It is directed at 31, yes. I think we should make it more clear here that both TLS authentication and SCRAM-SHA authentication can be used with TLS encryption. The current sentence can be IMHO a bit misleading for inexperienced reader.", "author": "scholzj", "createdAt": "2020-06-04T10:28:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc1NDUyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTE1MzM0MQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3147#discussion_r435153341", "bodyText": "Got it. Thanks", "author": "PaulRMellor", "createdAt": "2020-06-04T10:29:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc1NDUyOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc1NzUwOA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3147#discussion_r434757508", "bodyText": "I think this is confusing and should be removed. These options apply only in some situations so I think they will confuse the read rather than help. You should leave them out and just link to the using guide or to the APi reference.", "author": "scholzj", "createdAt": "2020-06-03T18:05:51Z", "path": "documentation/modules/deploying/proc-deploy-setup-external-clients.adoc", "diffHunk": "@@ -0,0 +1,262 @@\n+// Module included in the following assemblies:\n+//\n+// deploying/assembly_deploy-verify.adoc\n+// getting-started.adoc\n+\n+[id='setup-external-clients-{context}']\n+= Setting up external clients\n+\n+This procedure shows how to configure client access to a Kafka cluster from outside Kubernetes.\n+The process is the same for consumer and producer clients that need to read or write to the Kafka cluster.\n+\n+Using the address of the Kafka cluster, you can provide external access to a client on a different Kubernetes namespace or outside Kubernetes entirely.\n+\n+You configure an external Kafka listener to provide the access.\n+External listeners use port _9094_ to provide access from outside of Kubernetes.\n+The following external listener types are supported:\n+\n+* `route` to use OpenShift `Route` and the default HAProxy router\n+* `loadbalancer` to use loadbalancer services\n+* `nodeport` to use ports on Kubernetes nodes\n+* `ingress` to use Kubernetes _Ingress_ and the {NginxIngressController}\n+\n+The type chosen depends on your requirements and approach to security.\n+For example, `nodeport` is the least secure, so you might not wish to use it in a production environment.\n+\n+In this procedure:\n+\n+. An external listener is configured for the Kafka cluster, with TLS authentication and encryption, and Kafka _simple authorization_ enabled\n+. A `KafkaUser` is created for the client, with TLS authentication and Access Control Lists (ACLs) defined for _simple authorization_\n+\n+You can configure your listener to use TLS or SCRAM-SHA authentication.\n+If you are using an authorization server, you can use token-based link:{BookURLUsing}#assembly-oauth-authentication_str[{oauth} authentication] and link:{BookURLUsing}#assembly-oauth-authorization_str[{oauth} authorization].\n+\n+When you configure the `KafkaUser` authentication and authorization mechanisms, ensure they match the equivalent Kafka configuration:\n+\n+* `KafkaUser.spec.authentication` matches `Kafka.spec.kafka.listeners.*.authentication`\n+* `KafkaUser.spec.authorization` matches `Kafka.spec.kafka.authorization`\n+\n+NOTE: Authentication between Kafka users and Kafka brokers depends on the authentication settings for each.\n+For example, it is not possible to authenticate a user with TLS if it is not also enabled in the Kafka configuration.\n+\n+Strimzi operators automate the configuration process:\n+\n+* The Cluster Operator creates the listeners and sets up the cluster and client certificate authority (CA) certificates to enable authentication within the Kafka cluster.\n+* The User Operator creates the user representing the client and sets up the user CA certificates for secure access to the Kafka cluster.\n+\n+In this procedure, the certificates generated by the Cluster Operator are used, but you can replace them by link:{BookURLUsing}#installing-your-own-ca-certificates-str[installing your own certificates].\n+You can also configure your listener to link:{BookURLUsing}#kafka-listener-certificates-str[use a Kafka listener certificate managed by an external Certificate Authority].\n+\n+Certificates are available in PKCS #12 format (.p12) and PEM (.crt) formats.\n+\n+.Prerequisites\n+\n+* The Kafka cluster is available for the client\n+* The Cluster Operator and User Operator are running in the cluster\n+* A client outside the Kubernetes cluster to connect to the Kafka cluster\n+\n+.Procedure\n+\n+. Configure the Kafka cluster with an `external` Kafka listener.\n++\n+* Define the authentication required to access the Kafka broker through the listener\n+* Enable authorization on the Kafka broker\n++\n+For example:\n++\n+[source,yaml,subs=\"+quotes,attributes\"]\n+----\n+apiVersion: {KafkaApiVersion}\n+kind: Kafka\n+spec:\n+  kafka:\n+    # ...\n+    listeners: <1>\n+      external:\n+        type: _LISTENER-TYPE_ <2>\n+        tls: true <3>\n+        authentication:\n+          type: tls <4>\n+        configuration:\n+          preferredAddressType: InternalDNS <5>\n+        networkPolicyPeers: <6>\n+          - podSelector:\n+              matchLabels:\n+                app: kafka-consumer\n+          - namespaceSelector:\n+              matchLabels:\n+                project: my-project\n+        overrides: <7>\n+          bootstrap:\n+            nodePort: 32100\n+          brokers:\n+            - broker: 0\n+              nodePort: 32000\n+            - broker: 1\n+              nodePort: 32001\n+            - broker: 2\n+              nodePort: 32002", "originalCommit": "a77951f707ac66ca4c41b1af4ac92e49c59bb715", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTE0OTk2Mw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3147#discussion_r435149963", "bodyText": "Okay. I'll drop the example with # ... and leave the callout at the overrides property.", "author": "PaulRMellor", "createdAt": "2020-06-04T10:23:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc1NzUwOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc2Mjc2Ng==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3147#discussion_r434762766", "bodyText": "I think this can be removed?", "author": "scholzj", "createdAt": "2020-06-03T18:15:18Z", "path": "documentation/modules/deploying/proc-deploy-setup-external-clients.adoc", "diffHunk": "@@ -0,0 +1,262 @@\n+// Module included in the following assemblies:\n+//\n+// deploying/assembly_deploy-verify.adoc\n+// getting-started.adoc\n+\n+[id='setup-external-clients-{context}']\n+= Setting up external clients\n+\n+This procedure shows how to configure client access to a Kafka cluster from outside Kubernetes.\n+The process is the same for consumer and producer clients that need to read or write to the Kafka cluster.\n+\n+Using the address of the Kafka cluster, you can provide external access to a client on a different Kubernetes namespace or outside Kubernetes entirely.\n+\n+You configure an external Kafka listener to provide the access.\n+External listeners use port _9094_ to provide access from outside of Kubernetes.\n+The following external listener types are supported:\n+\n+* `route` to use OpenShift `Route` and the default HAProxy router\n+* `loadbalancer` to use loadbalancer services\n+* `nodeport` to use ports on Kubernetes nodes\n+* `ingress` to use Kubernetes _Ingress_ and the {NginxIngressController}\n+\n+The type chosen depends on your requirements and approach to security.\n+For example, `nodeport` is the least secure, so you might not wish to use it in a production environment.\n+\n+In this procedure:\n+\n+. An external listener is configured for the Kafka cluster, with TLS authentication and encryption, and Kafka _simple authorization_ enabled\n+. A `KafkaUser` is created for the client, with TLS authentication and Access Control Lists (ACLs) defined for _simple authorization_\n+\n+You can configure your listener to use TLS or SCRAM-SHA authentication.\n+If you are using an authorization server, you can use token-based link:{BookURLUsing}#assembly-oauth-authentication_str[{oauth} authentication] and link:{BookURLUsing}#assembly-oauth-authorization_str[{oauth} authorization].\n+\n+When you configure the `KafkaUser` authentication and authorization mechanisms, ensure they match the equivalent Kafka configuration:\n+\n+* `KafkaUser.spec.authentication` matches `Kafka.spec.kafka.listeners.*.authentication`\n+* `KafkaUser.spec.authorization` matches `Kafka.spec.kafka.authorization`\n+\n+NOTE: Authentication between Kafka users and Kafka brokers depends on the authentication settings for each.\n+For example, it is not possible to authenticate a user with TLS if it is not also enabled in the Kafka configuration.\n+\n+Strimzi operators automate the configuration process:\n+\n+* The Cluster Operator creates the listeners and sets up the cluster and client certificate authority (CA) certificates to enable authentication within the Kafka cluster.\n+* The User Operator creates the user representing the client and sets up the user CA certificates for secure access to the Kafka cluster.\n+\n+In this procedure, the certificates generated by the Cluster Operator are used, but you can replace them by link:{BookURLUsing}#installing-your-own-ca-certificates-str[installing your own certificates].\n+You can also configure your listener to link:{BookURLUsing}#kafka-listener-certificates-str[use a Kafka listener certificate managed by an external Certificate Authority].\n+\n+Certificates are available in PKCS #12 format (.p12) and PEM (.crt) formats.\n+\n+.Prerequisites\n+\n+* The Kafka cluster is available for the client\n+* The Cluster Operator and User Operator are running in the cluster\n+* A client outside the Kubernetes cluster to connect to the Kafka cluster\n+\n+.Procedure\n+\n+. Configure the Kafka cluster with an `external` Kafka listener.\n++\n+* Define the authentication required to access the Kafka broker through the listener\n+* Enable authorization on the Kafka broker\n++\n+For example:\n++\n+[source,yaml,subs=\"+quotes,attributes\"]\n+----\n+apiVersion: {KafkaApiVersion}\n+kind: Kafka\n+spec:\n+  kafka:\n+    # ...\n+    listeners: <1>\n+      external:\n+        type: _LISTENER-TYPE_ <2>\n+        tls: true <3>\n+        authentication:\n+          type: tls <4>\n+        configuration:\n+          preferredAddressType: InternalDNS <5>\n+        networkPolicyPeers: <6>\n+          - podSelector:\n+              matchLabels:\n+                app: kafka-consumer\n+          - namespaceSelector:\n+              matchLabels:\n+                project: my-project\n+        overrides: <7>\n+          bootstrap:\n+            nodePort: 32100\n+          brokers:\n+            - broker: 0\n+              nodePort: 32000\n+            - broker: 1\n+              nodePort: 32001\n+            - broker: 2\n+              nodePort: 32002\n+      authorization: <8>\n+        type: simple\n+        superUsers:\n+          - super-user-name <9>\n+  # ...\n+----\n+<1> Configuration options for enabling external listeners are described in the link:{BookURLUsing}#type-KafkaListeners-reference[Kafka listeners schema reference^]\n+<2> External listener type specified as `route`, `loadbalancer`, `nodeport` or `ingress`.\n+<3> Enables TLS encryption on the listener. Not required for `route` listeners.\n+<4> Authentication specified as `tls`.\n+<5> (Optional, for `nodeport` listeners only) Configuration to link:{BookURLUsing}#con-kafka-broker-external-listeners-nodeports-{context}[specify a preference for the first address type used by Strimzi as the node address].\n+<6> (Optional) By default, Strimzi grants access to listeners to all applications and namespaces. The `networkPolicyPeers` property restricts access to specific pods and namespaces.\n+<7> (Optional, but not applicable to `ingress` listeners) Overrides customize the bootstrap and broker addresses advertised to clients.\n+Strimzi automatically determines the addresses to advertise to clients.\n+The addresses are automatically assigned by Kubernetes.\n+Use overrides if the infrastructure on which you are running Strimzi does not provide the right address.\n+Validation is not performed on overrides.\n+The override configuration differs according to the external listener type,\n+so you can override hosts for `route`, DNS names or IP addresses for `loadbalancer`, and node ports (shown) for `nodeport`.\n+Refer to the link:{BookURLUsing}#type-KafkaListeners-reference[Kafka listeners schema reference^] for more information on external listener `overrides`.\n+<8> Authorization link:{BookURLUsing}#ref-kafka-authorization-{context}[enables `simple` authorization on the Kafka broker using the `SimpleAclAuthorizer` Kafka plugin].\n+<9> (Optional) Super users can access all brokers regardless of any access restrictions defined in ACLs.\n+\n+. Create or update the `Kafka` resource.\n++\n+[source,shell,subs=+quotes]\n+oc apply -f _KAFKA-CONFIG-FILE_\n++\n+The Kafka cluster is configured with a Kafka broker listener using TLS authentication.\n++\n+A service is created for each Kafka broker pod.\n++\n+An additional service is created to serve as the _bootstrap address_ for connection to the Kafka cluster.\n++\n+The cluster (CA) to verify the identity of the kafka brokers is also created with the same name as the `Kafka` resource.\n+\n+. Find the bootstrap address and port from the status of the `Kafka` resource.\n++\n+[source,shell, subs=+quotes]\n+kubectl get kafka _KAFKA-CLUSTER-NAME_ -o jsonpath='{.status.listeners[?(@.type==\"external\")].bootstrapServers}'\n++\n+Use the bootstrap address in your Kafka client to connect to the Kafka cluster.\n+\n+. Extract the public cluster CA certificate and password from the generated `_KAFKA-CLUSTER-NAME_-cluster-ca-cert` Secret.\n++\n+[source,shell,subs=\"+quotes\"]\n+kubectl get secret _KAFKA-CLUSTER-NAME_-cluster-ca-cert -o jsonpath='{.data.ca\\.p12}' | base64 -d > ca.p12\n++\n+[source,shell,subs=\"+quotes\"]\n+kubectl get secret _KAFKA-CLUSTER-NAME_-cluster-ca-cert -o jsonpath='{.data.ca\\.password}' | base64 -d > ca.password\n++\n+Use the certificate and password in your Kafka client to connect to the Kafka cluster.\n++\n+NOTE: Cluster CA certificates renew automatically by default. If your are using your own Kafka listener certificates,\n+you will need to link:{BookURLUsing}#renewing-your-own-ca-certificates-str[renew the certificates manually].\n+\n+. Create or modify a user representing the client that requires access to the Kafka cluster.\n++\n+* Specify the same authentication type as the `Kafka` listener.\n+* Specify the authorization ACLs for simple authorization.\n++\n+For example:\n++\n+[source,yaml,subs=\"+quotes,attributes\"]\n+----\n+apiVersion: {KafkaUserApiVersion}\n+kind: KafkaUser\n+metadata:\n+  name: my-user\n+  labels:\n+    strimzi.io/cluster: my-cluster <1>\n+spec:\n+  authentication:\n+    type: tls <2>\n+  authorization:\n+    type: simple\n+    acls: <3>\n+      - resource:\n+          type: topic\n+          name: my-topic\n+          patternType: literal\n+        operation: Read\n+      - resource:\n+          type: topic\n+          name: my-topic\n+          patternType: literal\n+        operation: Describe\n+      - resource:\n+          type: group\n+          name: my-group\n+          patternType: literal\n+        operation: Read\n+----\n+<1> The label must match the label of the Kafka cluster for the user to be created.\n+<2> Authentication specified as `tls`.\n+<3> Simple authorization requires an accompanying list of ACL rules to apply to the user.\n+The rules define the operations allowed on Kafka resources based on the _username_ (`my-user`).\n+\n+. Create or modify the `KafkaUser` resource.\n++\n+[source,shell,subs=\"+quotes,attributes\"]\n+kubectl apply -f _USER-CONFIG-FILE_\n++\n+The user is created, as well as a Secret with the same name as the `KafkaUser` resource.\n+The Secret contains a private and public key for TLS client authentication.\n++\n+For example:\n++\n+[source,yaml,subs=\"+quotes,attributes\"]\n+----\n+apiVersion: v1\n+kind: Secret\n+metadata:\n+  name: my-user\n+  labels:\n+    strimzi.io/kind: KafkaUser\n+    strimzi.io/cluster: my-cluster\n+type: Opaque\n+data:\n+  ca.crt: _PUBLIC-KEY-OF-THE-CLIENT-CA_\n+  user.crt: _USER-CERTIFICATE-CONTAINING-PUBLIC-KEY-OF-USER_\n+  user.key: _PRIVATE-KEY-OF-USER_\n+  user.p12: _P12-ARCHIVE-FILE-STORING-CERTIFICATES-AND-KEYS_\n+  user.password: _PASSWORD-PROTECTING-P12-ARCHIVE_\n+----\n+\n+. Configure your client to connect to the Kafka cluster with the properties required to make a secure connection to the Kafka cluster.\n+\n+.. Add the authentication details for the public cluster certificates:\n++\n+[source,env,subs=\"+quotes,attributes\"]\n+----\n+security.protocol: SSL <1>\n+ssl.truststore.location: _PATH-TO/ssl/keys/truststore_ <2>\n+ssl.truststore.password: _CLUSTER-CERT-PASSWORD_ <3>\n+ssl.truststore.type=PKCS12 <4>\n+----\n+<1> Enables TLS encryption (with or without TLS authentication).\n+<2> Specifies the truststore location where the certificates were imported.\n+<3> Specifies the password for accessing the truststore. This property can be omitted if it is not needed by the truststore.\n+<4> Identifies the truststore type.\n++\n+NOTE: Use `security.protocol: SASL_SSL` when using SCRAM-SHA authentication over TLS.\n+\n+.. Add the bootstrap address and port for connecting to the Kafka cluster:\n++\n+[source,env,subs=\"+quotes,attributes\"]\n+----\n+bootstrap.servers: _BOOTSTRAP-ADDRESS:PORT_\n+----\n++\n+The port number is 443 for connecting using `route` external listeners.", "originalCommit": "a77951f707ac66ca4c41b1af4ac92e49c59bb715", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "74d9dbd2ab74259359e2619500e442b3044c6875", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/74d9dbd2ab74259359e2619500e442b3044c6875", "message": "review edits JS\n\nSigned-off-by: prmellor <pmellor@redhat.com>", "committedDate": "2020-06-04T10:29:00Z", "type": "commit"}, {"oid": "e0ca4f44b71e31d8186d8796cf78c964992a2e87", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/e0ca4f44b71e31d8186d8796cf78c964992a2e87", "message": "review edits JS - tls encryption\n\nSigned-off-by: prmellor <pmellor@redhat.com>", "committedDate": "2020-06-04T10:34:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk2NTc1MQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3147#discussion_r440965751", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Having xref:deploy-tasks_{context}[deployed Strimzi], the procedures in this section show how to:\n          \n          \n            \n            After you have xref:deploy-tasks_{context}[deployed Strimzi], the procedures in this section explain how to:", "author": "laidan6000", "createdAt": "2020-06-16T16:00:14Z", "path": "documentation/assemblies/deploying/assembly-deploy-verify.adoc", "diffHunk": "@@ -3,11 +3,18 @@\n // deploying/master.adoc\n \n [id=\"deploy-verify_{context}\"]\n-= Verifying the Strimzi deployment\n+= Setting up client access to the Kafka cluster\n \n-Having xref:deploy-tasks_{context}[deployed Strimzi], the procedure in this section shows how to deploy example producer and consumer clients.\n+Having xref:deploy-tasks_{context}[deployed Strimzi], the procedures in this section show how to:", "originalCommit": "e0ca4f44b71e31d8186d8796cf78c964992a2e87", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk2NzA4Nw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3147#discussion_r440967087", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * How to set up external client access to the Kafka cluster\n          \n          \n            \n            * Set up external client access to the Kafka cluster", "author": "laidan6000", "createdAt": "2020-06-16T16:02:08Z", "path": "documentation/assemblies/deploying/assembly-deploy-verify.adoc", "diffHunk": "@@ -3,11 +3,18 @@\n // deploying/master.adoc\n \n [id=\"deploy-verify_{context}\"]\n-= Verifying the Strimzi deployment\n+= Setting up client access to the Kafka cluster\n \n-Having xref:deploy-tasks_{context}[deployed Strimzi], the procedure in this section shows how to deploy example producer and consumer clients.\n+Having xref:deploy-tasks_{context}[deployed Strimzi], the procedures in this section show how to:\n \n-The procedure assumes a Strimzi is available and running in a Kubernetes cluster.\n+* Deploy example producer and consumer clients, which you can use to verify your deployment\n+* How to set up external client access to the Kafka cluster", "originalCommit": "e0ca4f44b71e31d8186d8796cf78c964992a2e87", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk2NzYxNA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3147#discussion_r440967614", "bodyText": "Remove the +.", "author": "laidan6000", "createdAt": "2020-06-16T16:02:54Z", "path": "documentation/assemblies/deploying/assembly-deploy-verify.adoc", "diffHunk": "@@ -3,11 +3,18 @@\n // deploying/master.adoc\n \n [id=\"deploy-verify_{context}\"]\n-= Verifying the Strimzi deployment\n+= Setting up client access to the Kafka cluster\n \n-Having xref:deploy-tasks_{context}[deployed Strimzi], the procedure in this section shows how to deploy example producer and consumer clients.\n+Having xref:deploy-tasks_{context}[deployed Strimzi], the procedures in this section show how to:\n \n-The procedure assumes a Strimzi is available and running in a Kubernetes cluster.\n+* Deploy example producer and consumer clients, which you can use to verify your deployment\n+* How to set up external client access to the Kafka cluster\n++", "originalCommit": "e0ca4f44b71e31d8186d8796cf78c964992a2e87", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk3MDc5OQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3147#discussion_r440970799", "bodyText": "In fact, The sentence on line 13 confused me a little. Is it related to the second bullet point?", "author": "laidan6000", "createdAt": "2020-06-16T16:07:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk2NzYxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM2OTg2OQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3147#discussion_r441369869", "bodyText": "It is related. So I'm going to leave it with the bullet.", "author": "PaulRMellor", "createdAt": "2020-06-17T08:23:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk2NzYxNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk2ODczMQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3147#discussion_r440968731", "bodyText": "Not sure \"involved\" is friendly for localization. Maybe we can say \"more complex\" instead.\n\"The steps to set up access to the Kafka cluster for a client outside Kubernetes are more involved...\"", "author": "laidan6000", "createdAt": "2020-06-16T16:04:41Z", "path": "documentation/assemblies/deploying/assembly-deploy-verify.adoc", "diffHunk": "@@ -3,11 +3,18 @@\n // deploying/master.adoc\n \n [id=\"deploy-verify_{context}\"]\n-= Verifying the Strimzi deployment\n+= Setting up client access to the Kafka cluster\n \n-Having xref:deploy-tasks_{context}[deployed Strimzi], the procedure in this section shows how to deploy example producer and consumer clients.\n+Having xref:deploy-tasks_{context}[deployed Strimzi], the procedures in this section show how to:\n \n-The procedure assumes a Strimzi is available and running in a Kubernetes cluster.\n+* Deploy example producer and consumer clients, which you can use to verify your deployment\n+* How to set up external client access to the Kafka cluster\n++\n+The steps to set up access to the Kafka cluster for a client outside Kubernetes are a lot more involved,", "originalCommit": "e0ca4f44b71e31d8186d8796cf78c964992a2e87", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM3MjQ3Mg==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3147#discussion_r441372472", "bodyText": "Good point. I've changed.", "author": "PaulRMellor", "createdAt": "2020-06-17T08:27:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk2ODczMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk2OTcyNg==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3147#discussion_r440969726", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            and require familiarity with the process of link:{BookURLUsing}#assembly-deployment-configuration-str[configuring Kafka components^].\n          \n          \n            \n            and require familiarity with link:{BookURLUsing}#assembly-deployment-configuration-str[how to configure Kafka components^].", "author": "laidan6000", "createdAt": "2020-06-16T16:06:07Z", "path": "documentation/assemblies/deploying/assembly-deploy-verify.adoc", "diffHunk": "@@ -3,11 +3,18 @@\n // deploying/master.adoc\n \n [id=\"deploy-verify_{context}\"]\n-= Verifying the Strimzi deployment\n+= Setting up client access to the Kafka cluster\n \n-Having xref:deploy-tasks_{context}[deployed Strimzi], the procedure in this section shows how to deploy example producer and consumer clients.\n+Having xref:deploy-tasks_{context}[deployed Strimzi], the procedures in this section show how to:\n \n-The procedure assumes a Strimzi is available and running in a Kubernetes cluster.\n+* Deploy example producer and consumer clients, which you can use to verify your deployment\n+* How to set up external client access to the Kafka cluster\n++\n+The steps to set up access to the Kafka cluster for a client outside Kubernetes are a lot more involved,\n+and require familiarity with the process of link:{BookURLUsing}#assembly-deployment-configuration-str[configuring Kafka components^].", "originalCommit": "e0ca4f44b71e31d8186d8796cf78c964992a2e87", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk3MTY0MQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3147#discussion_r440971641", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * `route` to use OpenShift `Route` and the default HAProxy router\n          \n          \n            \n            * `route` to use OpenShift `Route` and the default HAProxy router.", "author": "laidan6000", "createdAt": "2020-06-16T16:09:07Z", "path": "documentation/modules/deploying/proc-deploy-setup-external-clients.adoc", "diffHunk": "@@ -0,0 +1,252 @@\n+// Module included in the following assemblies:\n+//\n+// deploying/assembly_deploy-verify.adoc\n+// getting-started.adoc\n+\n+[id='setup-external-clients-{context}']\n+= Setting up access for clients outside of Kubernetes\n+\n+This procedure shows how to configure client access to a Kafka cluster from outside Kubernetes.\n+\n+Using the address of the Kafka cluster, you can provide external access to a client on a different Kubernetes namespace or outside Kubernetes entirely.\n+\n+You configure an external Kafka listener to provide the access.\n+\n+The following external listener types are supported:\n+\n+* `route` to use OpenShift `Route` and the default HAProxy router", "originalCommit": "e0ca4f44b71e31d8186d8796cf78c964992a2e87", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM3NTM1MA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3147#discussion_r441375350", "bodyText": "I don't think we need these full stops. The bullets aren't full sentences.", "author": "PaulRMellor", "createdAt": "2020-06-17T08:32:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk3MTY0MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk3MTcyMA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3147#discussion_r440971720", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * `loadbalancer` to use loadbalancer services\n          \n          \n            \n            * `loadbalancer` to use loadbalancer services.", "author": "laidan6000", "createdAt": "2020-06-16T16:09:14Z", "path": "documentation/modules/deploying/proc-deploy-setup-external-clients.adoc", "diffHunk": "@@ -0,0 +1,252 @@\n+// Module included in the following assemblies:\n+//\n+// deploying/assembly_deploy-verify.adoc\n+// getting-started.adoc\n+\n+[id='setup-external-clients-{context}']\n+= Setting up access for clients outside of Kubernetes\n+\n+This procedure shows how to configure client access to a Kafka cluster from outside Kubernetes.\n+\n+Using the address of the Kafka cluster, you can provide external access to a client on a different Kubernetes namespace or outside Kubernetes entirely.\n+\n+You configure an external Kafka listener to provide the access.\n+\n+The following external listener types are supported:\n+\n+* `route` to use OpenShift `Route` and the default HAProxy router\n+* `loadbalancer` to use loadbalancer services", "originalCommit": "e0ca4f44b71e31d8186d8796cf78c964992a2e87", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk3MTc5NA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3147#discussion_r440971794", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * `nodeport` to use ports on Kubernetes nodes\n          \n          \n            \n            * `nodeport` to use ports on Kubernetes nodes.", "author": "laidan6000", "createdAt": "2020-06-16T16:09:20Z", "path": "documentation/modules/deploying/proc-deploy-setup-external-clients.adoc", "diffHunk": "@@ -0,0 +1,252 @@\n+// Module included in the following assemblies:\n+//\n+// deploying/assembly_deploy-verify.adoc\n+// getting-started.adoc\n+\n+[id='setup-external-clients-{context}']\n+= Setting up access for clients outside of Kubernetes\n+\n+This procedure shows how to configure client access to a Kafka cluster from outside Kubernetes.\n+\n+Using the address of the Kafka cluster, you can provide external access to a client on a different Kubernetes namespace or outside Kubernetes entirely.\n+\n+You configure an external Kafka listener to provide the access.\n+\n+The following external listener types are supported:\n+\n+* `route` to use OpenShift `Route` and the default HAProxy router\n+* `loadbalancer` to use loadbalancer services\n+* `nodeport` to use ports on Kubernetes nodes", "originalCommit": "e0ca4f44b71e31d8186d8796cf78c964992a2e87", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk3MTg1NQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3147#discussion_r440971855", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * `ingress` to use Kubernetes _Ingress_ and the {NginxIngressController}\n          \n          \n            \n            * `ingress` to use Kubernetes _Ingress_ and the {NginxIngressController}.", "author": "laidan6000", "createdAt": "2020-06-16T16:09:26Z", "path": "documentation/modules/deploying/proc-deploy-setup-external-clients.adoc", "diffHunk": "@@ -0,0 +1,252 @@\n+// Module included in the following assemblies:\n+//\n+// deploying/assembly_deploy-verify.adoc\n+// getting-started.adoc\n+\n+[id='setup-external-clients-{context}']\n+= Setting up access for clients outside of Kubernetes\n+\n+This procedure shows how to configure client access to a Kafka cluster from outside Kubernetes.\n+\n+Using the address of the Kafka cluster, you can provide external access to a client on a different Kubernetes namespace or outside Kubernetes entirely.\n+\n+You configure an external Kafka listener to provide the access.\n+\n+The following external listener types are supported:\n+\n+* `route` to use OpenShift `Route` and the default HAProxy router\n+* `loadbalancer` to use loadbalancer services\n+* `nodeport` to use ports on Kubernetes nodes\n+* `ingress` to use Kubernetes _Ingress_ and the {NginxIngressController}", "originalCommit": "e0ca4f44b71e31d8186d8796cf78c964992a2e87", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk3MjU0NA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3147#discussion_r440972544", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            . An external listener is configured for the Kafka cluster, with TLS encryption and authentication, and Kafka _simple authorization_ enabled\n          \n          \n            \n            . An external listener is configured for the Kafka cluster, with TLS encryption and authentication, and Kafka _simple authorization_ is enabled.", "author": "laidan6000", "createdAt": "2020-06-16T16:10:20Z", "path": "documentation/modules/deploying/proc-deploy-setup-external-clients.adoc", "diffHunk": "@@ -0,0 +1,252 @@\n+// Module included in the following assemblies:\n+//\n+// deploying/assembly_deploy-verify.adoc\n+// getting-started.adoc\n+\n+[id='setup-external-clients-{context}']\n+= Setting up access for clients outside of Kubernetes\n+\n+This procedure shows how to configure client access to a Kafka cluster from outside Kubernetes.\n+\n+Using the address of the Kafka cluster, you can provide external access to a client on a different Kubernetes namespace or outside Kubernetes entirely.\n+\n+You configure an external Kafka listener to provide the access.\n+\n+The following external listener types are supported:\n+\n+* `route` to use OpenShift `Route` and the default HAProxy router\n+* `loadbalancer` to use loadbalancer services\n+* `nodeport` to use ports on Kubernetes nodes\n+* `ingress` to use Kubernetes _Ingress_ and the {NginxIngressController}\n+\n+The type chosen depends on your requirements, and your environment and infrastructure.\n+For example, `nodeport` is the least secure, so you might not wish to use it in a production environment.\n+\n+In this procedure:\n+\n+. An external listener is configured for the Kafka cluster, with TLS encryption and authentication, and Kafka _simple authorization_ enabled", "originalCommit": "e0ca4f44b71e31d8186d8796cf78c964992a2e87", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk3Mjg2NQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3147#discussion_r440972865", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            . A `KafkaUser` is created for the client, with TLS authentication and Access Control Lists (ACLs) defined for _simple authorization_\n          \n          \n            \n            . A `KafkaUser` is created for the client, with TLS authentication and Access Control Lists (ACLs) defined for _simple authorization_.", "author": "laidan6000", "createdAt": "2020-06-16T16:10:51Z", "path": "documentation/modules/deploying/proc-deploy-setup-external-clients.adoc", "diffHunk": "@@ -0,0 +1,252 @@\n+// Module included in the following assemblies:\n+//\n+// deploying/assembly_deploy-verify.adoc\n+// getting-started.adoc\n+\n+[id='setup-external-clients-{context}']\n+= Setting up access for clients outside of Kubernetes\n+\n+This procedure shows how to configure client access to a Kafka cluster from outside Kubernetes.\n+\n+Using the address of the Kafka cluster, you can provide external access to a client on a different Kubernetes namespace or outside Kubernetes entirely.\n+\n+You configure an external Kafka listener to provide the access.\n+\n+The following external listener types are supported:\n+\n+* `route` to use OpenShift `Route` and the default HAProxy router\n+* `loadbalancer` to use loadbalancer services\n+* `nodeport` to use ports on Kubernetes nodes\n+* `ingress` to use Kubernetes _Ingress_ and the {NginxIngressController}\n+\n+The type chosen depends on your requirements, and your environment and infrastructure.\n+For example, `nodeport` is the least secure, so you might not wish to use it in a production environment.\n+\n+In this procedure:\n+\n+. An external listener is configured for the Kafka cluster, with TLS encryption and authentication, and Kafka _simple authorization_ enabled\n+. A `KafkaUser` is created for the client, with TLS authentication and Access Control Lists (ACLs) defined for _simple authorization_", "originalCommit": "e0ca4f44b71e31d8186d8796cf78c964992a2e87", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk3NTU1NA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3147#discussion_r440975554", "bodyText": "Is (CA) correct here?", "author": "laidan6000", "createdAt": "2020-06-16T16:15:07Z", "path": "documentation/modules/deploying/proc-deploy-setup-external-clients.adoc", "diffHunk": "@@ -0,0 +1,252 @@\n+// Module included in the following assemblies:\n+//\n+// deploying/assembly_deploy-verify.adoc\n+// getting-started.adoc\n+\n+[id='setup-external-clients-{context}']\n+= Setting up access for clients outside of Kubernetes\n+\n+This procedure shows how to configure client access to a Kafka cluster from outside Kubernetes.\n+\n+Using the address of the Kafka cluster, you can provide external access to a client on a different Kubernetes namespace or outside Kubernetes entirely.\n+\n+You configure an external Kafka listener to provide the access.\n+\n+The following external listener types are supported:\n+\n+* `route` to use OpenShift `Route` and the default HAProxy router\n+* `loadbalancer` to use loadbalancer services\n+* `nodeport` to use ports on Kubernetes nodes\n+* `ingress` to use Kubernetes _Ingress_ and the {NginxIngressController}\n+\n+The type chosen depends on your requirements, and your environment and infrastructure.\n+For example, `nodeport` is the least secure, so you might not wish to use it in a production environment.\n+\n+In this procedure:\n+\n+. An external listener is configured for the Kafka cluster, with TLS encryption and authentication, and Kafka _simple authorization_ enabled\n+. A `KafkaUser` is created for the client, with TLS authentication and Access Control Lists (ACLs) defined for _simple authorization_\n+\n+You can configure your listener to use TLS or SCRAM-SHA authentication,\n+both of which can be used with TLS encryption.\n+If you are using an authorization server, you can use token-based link:{BookURLUsing}#assembly-oauth-authentication_str[{oauth} authentication] and link:{BookURLUsing}#assembly-oauth-authorization_str[{oauth} authorization].\n+\n+When you configure the `KafkaUser` authentication and authorization mechanisms, ensure they match the equivalent Kafka configuration:\n+\n+* `KafkaUser.spec.authentication` matches `Kafka.spec.kafka.listeners.*.authentication`\n+* `KafkaUser.spec.authorization` matches `Kafka.spec.kafka.authorization`\n+\n+NOTE: Authentication between Kafka users and Kafka brokers depends on the authentication settings for each.\n+For example, it is not possible to authenticate a user with TLS if it is not also enabled in the Kafka configuration.\n+\n+Strimzi operators automate the configuration process:\n+\n+* The Cluster Operator creates the listeners and sets up the cluster and client certificate authority (CA) certificates to enable authentication within the Kafka cluster.\n+* The User Operator creates the user representing the client and sets up the user CA certificates for secure access to the Kafka cluster.\n+\n+In this procedure, the certificates generated by the Cluster Operator are used, but you can replace them by link:{BookURLUsing}#installing-your-own-ca-certificates-str[installing your own certificates].\n+You can also configure your listener to link:{BookURLUsing}#kafka-listener-certificates-str[use a Kafka listener certificate managed by an external Certificate Authority].\n+\n+Certificates are available in PKCS #12 format (.p12) and PEM (.crt) formats.\n+\n+.Prerequisites\n+\n+* The Kafka cluster is available for the client\n+* The Cluster Operator and User Operator are running in the cluster\n+* A client outside the Kubernetes cluster to connect to the Kafka cluster\n+\n+.Procedure\n+\n+. Configure the Kafka cluster with an `external` Kafka listener.\n++\n+* Define the authentication required to access the Kafka broker through the listener\n+* Enable authorization on the Kafka broker\n++\n+For example:\n++\n+[source,yaml,subs=\"+quotes,attributes\"]\n+----\n+apiVersion: {KafkaApiVersion}\n+kind: Kafka\n+spec:\n+  kafka:\n+    # ...\n+    listeners: <1>\n+      external:\n+        type: _LISTENER-TYPE_ <2>\n+        tls: true <3>\n+        authentication:\n+          type: tls <4>\n+        configuration:\n+          preferredAddressType: InternalDNS <5>\n+        networkPolicyPeers: <6>\n+          - podSelector:\n+              matchLabels:\n+                app: kafka-consumer\n+          - namespaceSelector:\n+              matchLabels:\n+                project: my-project\n+        overrides: <7>\n+          # ...\n+      authorization: <8>\n+        type: simple\n+        superUsers:\n+          - super-user-name <9>\n+  # ...\n+----\n+<1> Configuration options for enabling external listeners are described in the link:{BookURLUsing}#type-KafkaListeners-reference[Kafka listeners schema reference^]\n+<2> External listener type specified as `route`, `loadbalancer`, `nodeport` or `ingress`.\n+<3> Enables TLS encryption on the listener. Not required for `route` listeners.\n+<4> Authentication specified as `tls`.\n+<5> (Optional, for `nodeport` listeners only) Configuration to link:{BookURLUsing}#con-kafka-broker-external-listeners-nodeports-{context}[specify a preference for the first address type used by Strimzi as the node address].\n+<6> (Optional) By default, Strimzi grants access to listeners to all applications and namespaces. The `networkPolicyPeers` property restricts access to specific pods and namespaces.\n+<7> (Optional, but not applicable to `ingress` listeners) Overrides customize the bootstrap and broker addresses advertised to clients.\n+Strimzi automatically determines the addresses to advertise to clients.\n+The addresses are automatically assigned by Kubernetes.\n+Use overrides if the infrastructure on which you are running Strimzi does not provide the right address.\n+Validation is not performed on overrides.\n+The override configuration differs according to the external listener type,\n+so you can override hosts for `route`, DNS names or IP addresses for `loadbalancer`, and node ports (shown) for `nodeport`.\n+Refer to the link:{BookURLUsing}#type-KafkaListeners-reference[Kafka listeners schema reference^] for more information on external listener `overrides`.\n+<8> Authorization link:{BookURLUsing}#ref-kafka-authorization-{context}[enables `simple` authorization on the Kafka broker using the `SimpleAclAuthorizer` Kafka plugin].\n+<9> (Optional) Super users can access all brokers regardless of any access restrictions defined in ACLs.\n+\n+. Create or update the `Kafka` resource.\n++\n+[source,shell,subs=+quotes]\n+oc apply -f _KAFKA-CONFIG-FILE_\n++\n+The Kafka cluster is configured with a Kafka broker listener using TLS authentication.\n++\n+A service is created for each Kafka broker pod.\n++\n+An additional service is created to serve as the _bootstrap address_ for connection to the Kafka cluster.\n++\n+The cluster (CA) to verify the identity of the kafka brokers is also created with the same name as the `Kafka` resource.", "originalCommit": "e0ca4f44b71e31d8186d8796cf78c964992a2e87", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM4MDk3Mg==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3147#discussion_r441380972", "bodyText": "Not quite. I've changed to cluster CA certificate", "author": "PaulRMellor", "createdAt": "2020-06-17T08:41:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk3NTU1NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk3NjIwNg==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3147#discussion_r440976206", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            NOTE: Cluster CA certificates renew automatically by default. If your are using your own Kafka listener certificates,\n          \n          \n            \n            NOTE: Cluster CA certificates renew automatically by default. If you are using your own Kafka listener certificates,", "author": "laidan6000", "createdAt": "2020-06-16T16:16:05Z", "path": "documentation/modules/deploying/proc-deploy-setup-external-clients.adoc", "diffHunk": "@@ -0,0 +1,252 @@\n+// Module included in the following assemblies:\n+//\n+// deploying/assembly_deploy-verify.adoc\n+// getting-started.adoc\n+\n+[id='setup-external-clients-{context}']\n+= Setting up access for clients outside of Kubernetes\n+\n+This procedure shows how to configure client access to a Kafka cluster from outside Kubernetes.\n+\n+Using the address of the Kafka cluster, you can provide external access to a client on a different Kubernetes namespace or outside Kubernetes entirely.\n+\n+You configure an external Kafka listener to provide the access.\n+\n+The following external listener types are supported:\n+\n+* `route` to use OpenShift `Route` and the default HAProxy router\n+* `loadbalancer` to use loadbalancer services\n+* `nodeport` to use ports on Kubernetes nodes\n+* `ingress` to use Kubernetes _Ingress_ and the {NginxIngressController}\n+\n+The type chosen depends on your requirements, and your environment and infrastructure.\n+For example, `nodeport` is the least secure, so you might not wish to use it in a production environment.\n+\n+In this procedure:\n+\n+. An external listener is configured for the Kafka cluster, with TLS encryption and authentication, and Kafka _simple authorization_ enabled\n+. A `KafkaUser` is created for the client, with TLS authentication and Access Control Lists (ACLs) defined for _simple authorization_\n+\n+You can configure your listener to use TLS or SCRAM-SHA authentication,\n+both of which can be used with TLS encryption.\n+If you are using an authorization server, you can use token-based link:{BookURLUsing}#assembly-oauth-authentication_str[{oauth} authentication] and link:{BookURLUsing}#assembly-oauth-authorization_str[{oauth} authorization].\n+\n+When you configure the `KafkaUser` authentication and authorization mechanisms, ensure they match the equivalent Kafka configuration:\n+\n+* `KafkaUser.spec.authentication` matches `Kafka.spec.kafka.listeners.*.authentication`\n+* `KafkaUser.spec.authorization` matches `Kafka.spec.kafka.authorization`\n+\n+NOTE: Authentication between Kafka users and Kafka brokers depends on the authentication settings for each.\n+For example, it is not possible to authenticate a user with TLS if it is not also enabled in the Kafka configuration.\n+\n+Strimzi operators automate the configuration process:\n+\n+* The Cluster Operator creates the listeners and sets up the cluster and client certificate authority (CA) certificates to enable authentication within the Kafka cluster.\n+* The User Operator creates the user representing the client and sets up the user CA certificates for secure access to the Kafka cluster.\n+\n+In this procedure, the certificates generated by the Cluster Operator are used, but you can replace them by link:{BookURLUsing}#installing-your-own-ca-certificates-str[installing your own certificates].\n+You can also configure your listener to link:{BookURLUsing}#kafka-listener-certificates-str[use a Kafka listener certificate managed by an external Certificate Authority].\n+\n+Certificates are available in PKCS #12 format (.p12) and PEM (.crt) formats.\n+\n+.Prerequisites\n+\n+* The Kafka cluster is available for the client\n+* The Cluster Operator and User Operator are running in the cluster\n+* A client outside the Kubernetes cluster to connect to the Kafka cluster\n+\n+.Procedure\n+\n+. Configure the Kafka cluster with an `external` Kafka listener.\n++\n+* Define the authentication required to access the Kafka broker through the listener\n+* Enable authorization on the Kafka broker\n++\n+For example:\n++\n+[source,yaml,subs=\"+quotes,attributes\"]\n+----\n+apiVersion: {KafkaApiVersion}\n+kind: Kafka\n+spec:\n+  kafka:\n+    # ...\n+    listeners: <1>\n+      external:\n+        type: _LISTENER-TYPE_ <2>\n+        tls: true <3>\n+        authentication:\n+          type: tls <4>\n+        configuration:\n+          preferredAddressType: InternalDNS <5>\n+        networkPolicyPeers: <6>\n+          - podSelector:\n+              matchLabels:\n+                app: kafka-consumer\n+          - namespaceSelector:\n+              matchLabels:\n+                project: my-project\n+        overrides: <7>\n+          # ...\n+      authorization: <8>\n+        type: simple\n+        superUsers:\n+          - super-user-name <9>\n+  # ...\n+----\n+<1> Configuration options for enabling external listeners are described in the link:{BookURLUsing}#type-KafkaListeners-reference[Kafka listeners schema reference^]\n+<2> External listener type specified as `route`, `loadbalancer`, `nodeport` or `ingress`.\n+<3> Enables TLS encryption on the listener. Not required for `route` listeners.\n+<4> Authentication specified as `tls`.\n+<5> (Optional, for `nodeport` listeners only) Configuration to link:{BookURLUsing}#con-kafka-broker-external-listeners-nodeports-{context}[specify a preference for the first address type used by Strimzi as the node address].\n+<6> (Optional) By default, Strimzi grants access to listeners to all applications and namespaces. The `networkPolicyPeers` property restricts access to specific pods and namespaces.\n+<7> (Optional, but not applicable to `ingress` listeners) Overrides customize the bootstrap and broker addresses advertised to clients.\n+Strimzi automatically determines the addresses to advertise to clients.\n+The addresses are automatically assigned by Kubernetes.\n+Use overrides if the infrastructure on which you are running Strimzi does not provide the right address.\n+Validation is not performed on overrides.\n+The override configuration differs according to the external listener type,\n+so you can override hosts for `route`, DNS names or IP addresses for `loadbalancer`, and node ports (shown) for `nodeport`.\n+Refer to the link:{BookURLUsing}#type-KafkaListeners-reference[Kafka listeners schema reference^] for more information on external listener `overrides`.\n+<8> Authorization link:{BookURLUsing}#ref-kafka-authorization-{context}[enables `simple` authorization on the Kafka broker using the `SimpleAclAuthorizer` Kafka plugin].\n+<9> (Optional) Super users can access all brokers regardless of any access restrictions defined in ACLs.\n+\n+. Create or update the `Kafka` resource.\n++\n+[source,shell,subs=+quotes]\n+oc apply -f _KAFKA-CONFIG-FILE_\n++\n+The Kafka cluster is configured with a Kafka broker listener using TLS authentication.\n++\n+A service is created for each Kafka broker pod.\n++\n+An additional service is created to serve as the _bootstrap address_ for connection to the Kafka cluster.\n++\n+The cluster (CA) to verify the identity of the kafka brokers is also created with the same name as the `Kafka` resource.\n+\n+. Find the bootstrap address and port from the status of the `Kafka` resource.\n++\n+[source,shell, subs=+quotes]\n+kubectl get kafka _KAFKA-CLUSTER-NAME_ -o jsonpath='{.status.listeners[?(@.type==\"external\")].bootstrapServers}'\n++\n+Use the bootstrap address in your Kafka client to connect to the Kafka cluster.\n+\n+. Extract the public cluster CA certificate and password from the generated `_KAFKA-CLUSTER-NAME_-cluster-ca-cert` Secret.\n++\n+[source,shell,subs=\"+quotes\"]\n+kubectl get secret _KAFKA-CLUSTER-NAME_-cluster-ca-cert -o jsonpath='{.data.ca\\.p12}' | base64 -d > ca.p12\n++\n+[source,shell,subs=\"+quotes\"]\n+kubectl get secret _KAFKA-CLUSTER-NAME_-cluster-ca-cert -o jsonpath='{.data.ca\\.password}' | base64 -d > ca.password\n++\n+Use the certificate and password in your Kafka client to connect to the Kafka cluster.\n++\n+NOTE: Cluster CA certificates renew automatically by default. If your are using your own Kafka listener certificates,", "originalCommit": "e0ca4f44b71e31d8186d8796cf78c964992a2e87", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "bba17b8c09cec1caf2cd29ccfa6c470005fbade5", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/bba17b8c09cec1caf2cd29ccfa6c470005fbade5", "message": "review edits DL\n\nSigned-off-by: prmellor <pmellor@redhat.com>", "committedDate": "2020-06-17T08:42:24Z", "type": "commit"}, {"oid": "42bb3de56bfa8d4f9983a270b738508ae71e15fd", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/42bb3de56bfa8d4f9983a270b738508ae71e15fd", "message": "Merge branch 'master' of github.com:strimzi/strimzi-kafka-operator into doc-setting-up-external-clients", "committedDate": "2020-06-17T13:33:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQ5OTQzNA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3147#discussion_r447499434", "bodyText": "I don't know if it's clear for users. It should say that you should have at least one listener supporting the authentication you want to use for the KafkaUser.", "author": "ppatierno", "createdAt": "2020-06-30T08:18:48Z", "path": "documentation/modules/deploying/proc-deploy-setup-external-clients.adoc", "diffHunk": "@@ -0,0 +1,252 @@\n+// Module included in the following assemblies:\n+//\n+// deploying/assembly_deploy-verify.adoc\n+// getting-started.adoc\n+\n+[id='setup-external-clients-{context}']\n+= Setting up access for clients outside of Kubernetes\n+\n+This procedure shows how to configure client access to a Kafka cluster from outside Kubernetes.\n+\n+Using the address of the Kafka cluster, you can provide external access to a client on a different Kubernetes namespace or outside Kubernetes entirely.\n+\n+You configure an external Kafka listener to provide the access.\n+\n+The following external listener types are supported:\n+\n+* `route` to use OpenShift `Route` and the default HAProxy router\n+* `loadbalancer` to use loadbalancer services\n+* `nodeport` to use ports on Kubernetes nodes\n+* `ingress` to use Kubernetes _Ingress_ and the {NginxIngressController}\n+\n+The type chosen depends on your requirements, and your environment and infrastructure.\n+For example, `nodeport` is the least secure, so you might not wish to use it in a production environment.\n+\n+In this procedure:\n+\n+. An external listener is configured for the Kafka cluster, with TLS encryption and authentication, and Kafka _simple authorization_ is enabled.\n+. A `KafkaUser` is created for the client, with TLS authentication and Access Control Lists (ACLs) defined for _simple authorization_.\n+\n+You can configure your listener to use TLS or SCRAM-SHA authentication,\n+both of which can be used with TLS encryption.\n+If you are using an authorization server, you can use token-based link:{BookURLUsing}#assembly-oauth-authentication_str[{oauth} authentication] and link:{BookURLUsing}#assembly-oauth-authorization_str[{oauth} authorization].\n+\n+When you configure the `KafkaUser` authentication and authorization mechanisms, ensure they match the equivalent Kafka configuration:\n+\n+* `KafkaUser.spec.authentication` matches `Kafka.spec.kafka.listeners.*.authentication`", "originalCommit": "bba17b8c09cec1caf2cd29ccfa6c470005fbade5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzU0MTQ2NQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3147#discussion_r447541465", "bodyText": "Thanks. I've added as sentence after the bullets,\nYou should have at least one listener supporting the authentication you want to use for the KafkaUser.", "author": "PaulRMellor", "createdAt": "2020-06-30T09:23:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQ5OTQzNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzUwMDUxOA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3147#discussion_r447500518", "bodyText": "it doesn't create \"CA\" certificates but the private key and certificate couple for secure access so for TLS client authentication.", "author": "ppatierno", "createdAt": "2020-06-30T08:20:31Z", "path": "documentation/modules/deploying/proc-deploy-setup-external-clients.adoc", "diffHunk": "@@ -0,0 +1,252 @@\n+// Module included in the following assemblies:\n+//\n+// deploying/assembly_deploy-verify.adoc\n+// getting-started.adoc\n+\n+[id='setup-external-clients-{context}']\n+= Setting up access for clients outside of Kubernetes\n+\n+This procedure shows how to configure client access to a Kafka cluster from outside Kubernetes.\n+\n+Using the address of the Kafka cluster, you can provide external access to a client on a different Kubernetes namespace or outside Kubernetes entirely.\n+\n+You configure an external Kafka listener to provide the access.\n+\n+The following external listener types are supported:\n+\n+* `route` to use OpenShift `Route` and the default HAProxy router\n+* `loadbalancer` to use loadbalancer services\n+* `nodeport` to use ports on Kubernetes nodes\n+* `ingress` to use Kubernetes _Ingress_ and the {NginxIngressController}\n+\n+The type chosen depends on your requirements, and your environment and infrastructure.\n+For example, `nodeport` is the least secure, so you might not wish to use it in a production environment.\n+\n+In this procedure:\n+\n+. An external listener is configured for the Kafka cluster, with TLS encryption and authentication, and Kafka _simple authorization_ is enabled.\n+. A `KafkaUser` is created for the client, with TLS authentication and Access Control Lists (ACLs) defined for _simple authorization_.\n+\n+You can configure your listener to use TLS or SCRAM-SHA authentication,\n+both of which can be used with TLS encryption.\n+If you are using an authorization server, you can use token-based link:{BookURLUsing}#assembly-oauth-authentication_str[{oauth} authentication] and link:{BookURLUsing}#assembly-oauth-authorization_str[{oauth} authorization].\n+\n+When you configure the `KafkaUser` authentication and authorization mechanisms, ensure they match the equivalent Kafka configuration:\n+\n+* `KafkaUser.spec.authentication` matches `Kafka.spec.kafka.listeners.*.authentication`\n+* `KafkaUser.spec.authorization` matches `Kafka.spec.kafka.authorization`\n+\n+NOTE: Authentication between Kafka users and Kafka brokers depends on the authentication settings for each.\n+For example, it is not possible to authenticate a user with TLS if it is not also enabled in the Kafka configuration.\n+\n+Strimzi operators automate the configuration process:\n+\n+* The Cluster Operator creates the listeners and sets up the cluster and client certificate authority (CA) certificates to enable authentication within the Kafka cluster.\n+* The User Operator creates the user representing the client and sets up the user CA certificates for secure access to the Kafka cluster.", "originalCommit": "bba17b8c09cec1caf2cd29ccfa6c470005fbade5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzU2MDczOA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3147#discussion_r447560738", "bodyText": "I've changed to: and the security credentials used for client authentication, based on the chosen authentication type.\nWe go into the details in the steps", "author": "PaulRMellor", "createdAt": "2020-06-30T09:54:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzUwMDUxOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzUwMzk2MQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3147#discussion_r447503961", "bodyText": "not sure about the networkPolicyPeers section here. Are we describing how to access the Kafka cluster from outside of Kubernetes right? So it means that the Kafka client is running completely outside of Kubernetes and not in a pod in a different namespace. @scholzj am I missing something?", "author": "ppatierno", "createdAt": "2020-06-30T08:25:38Z", "path": "documentation/modules/deploying/proc-deploy-setup-external-clients.adoc", "diffHunk": "@@ -0,0 +1,252 @@\n+// Module included in the following assemblies:\n+//\n+// deploying/assembly_deploy-verify.adoc\n+// getting-started.adoc\n+\n+[id='setup-external-clients-{context}']\n+= Setting up access for clients outside of Kubernetes\n+\n+This procedure shows how to configure client access to a Kafka cluster from outside Kubernetes.\n+\n+Using the address of the Kafka cluster, you can provide external access to a client on a different Kubernetes namespace or outside Kubernetes entirely.\n+\n+You configure an external Kafka listener to provide the access.\n+\n+The following external listener types are supported:\n+\n+* `route` to use OpenShift `Route` and the default HAProxy router\n+* `loadbalancer` to use loadbalancer services\n+* `nodeport` to use ports on Kubernetes nodes\n+* `ingress` to use Kubernetes _Ingress_ and the {NginxIngressController}\n+\n+The type chosen depends on your requirements, and your environment and infrastructure.\n+For example, `nodeport` is the least secure, so you might not wish to use it in a production environment.\n+\n+In this procedure:\n+\n+. An external listener is configured for the Kafka cluster, with TLS encryption and authentication, and Kafka _simple authorization_ is enabled.\n+. A `KafkaUser` is created for the client, with TLS authentication and Access Control Lists (ACLs) defined for _simple authorization_.\n+\n+You can configure your listener to use TLS or SCRAM-SHA authentication,\n+both of which can be used with TLS encryption.\n+If you are using an authorization server, you can use token-based link:{BookURLUsing}#assembly-oauth-authentication_str[{oauth} authentication] and link:{BookURLUsing}#assembly-oauth-authorization_str[{oauth} authorization].\n+\n+When you configure the `KafkaUser` authentication and authorization mechanisms, ensure they match the equivalent Kafka configuration:\n+\n+* `KafkaUser.spec.authentication` matches `Kafka.spec.kafka.listeners.*.authentication`\n+* `KafkaUser.spec.authorization` matches `Kafka.spec.kafka.authorization`\n+\n+NOTE: Authentication between Kafka users and Kafka brokers depends on the authentication settings for each.\n+For example, it is not possible to authenticate a user with TLS if it is not also enabled in the Kafka configuration.\n+\n+Strimzi operators automate the configuration process:\n+\n+* The Cluster Operator creates the listeners and sets up the cluster and client certificate authority (CA) certificates to enable authentication within the Kafka cluster.\n+* The User Operator creates the user representing the client and sets up the user CA certificates for secure access to the Kafka cluster.\n+\n+In this procedure, the certificates generated by the Cluster Operator are used, but you can replace them by link:{BookURLUsing}#installing-your-own-ca-certificates-str[installing your own certificates].\n+You can also configure your listener to link:{BookURLUsing}#kafka-listener-certificates-str[use a Kafka listener certificate managed by an external Certificate Authority].\n+\n+Certificates are available in PKCS #12 format (.p12) and PEM (.crt) formats.\n+\n+.Prerequisites\n+\n+* The Kafka cluster is available for the client\n+* The Cluster Operator and User Operator are running in the cluster\n+* A client outside the Kubernetes cluster to connect to the Kafka cluster\n+\n+.Procedure\n+\n+. Configure the Kafka cluster with an `external` Kafka listener.\n++\n+* Define the authentication required to access the Kafka broker through the listener\n+* Enable authorization on the Kafka broker\n++\n+For example:\n++\n+[source,yaml,subs=\"+quotes,attributes\"]\n+----\n+apiVersion: {KafkaApiVersion}\n+kind: Kafka\n+spec:\n+  kafka:\n+    # ...\n+    listeners: <1>\n+      external:\n+        type: _LISTENER-TYPE_ <2>\n+        tls: true <3>\n+        authentication:\n+          type: tls <4>\n+        configuration:\n+          preferredAddressType: InternalDNS <5>\n+        networkPolicyPeers: <6>", "originalCommit": "bba17b8c09cec1caf2cd29ccfa6c470005fbade5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzYzNjI0NA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3147#discussion_r447636244", "bodyText": "Technically, the rules can cover for example source IP addresses. But I would leave it out as it would not always work and might be confusing.", "author": "scholzj", "createdAt": "2020-06-30T12:15:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzUwMzk2MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTY1MzAwMg==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3147#discussion_r449653002", "bodyText": "Thanks. I've dropped that property/callout description.", "author": "PaulRMellor", "createdAt": "2020-07-03T16:28:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzUwMzk2MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzUwNDQ3OQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3147#discussion_r447504479", "bodyText": "kubectl instead of oc", "author": "ppatierno", "createdAt": "2020-06-30T08:26:23Z", "path": "documentation/modules/deploying/proc-deploy-setup-external-clients.adoc", "diffHunk": "@@ -0,0 +1,252 @@\n+// Module included in the following assemblies:\n+//\n+// deploying/assembly_deploy-verify.adoc\n+// getting-started.adoc\n+\n+[id='setup-external-clients-{context}']\n+= Setting up access for clients outside of Kubernetes\n+\n+This procedure shows how to configure client access to a Kafka cluster from outside Kubernetes.\n+\n+Using the address of the Kafka cluster, you can provide external access to a client on a different Kubernetes namespace or outside Kubernetes entirely.\n+\n+You configure an external Kafka listener to provide the access.\n+\n+The following external listener types are supported:\n+\n+* `route` to use OpenShift `Route` and the default HAProxy router\n+* `loadbalancer` to use loadbalancer services\n+* `nodeport` to use ports on Kubernetes nodes\n+* `ingress` to use Kubernetes _Ingress_ and the {NginxIngressController}\n+\n+The type chosen depends on your requirements, and your environment and infrastructure.\n+For example, `nodeport` is the least secure, so you might not wish to use it in a production environment.\n+\n+In this procedure:\n+\n+. An external listener is configured for the Kafka cluster, with TLS encryption and authentication, and Kafka _simple authorization_ is enabled.\n+. A `KafkaUser` is created for the client, with TLS authentication and Access Control Lists (ACLs) defined for _simple authorization_.\n+\n+You can configure your listener to use TLS or SCRAM-SHA authentication,\n+both of which can be used with TLS encryption.\n+If you are using an authorization server, you can use token-based link:{BookURLUsing}#assembly-oauth-authentication_str[{oauth} authentication] and link:{BookURLUsing}#assembly-oauth-authorization_str[{oauth} authorization].\n+\n+When you configure the `KafkaUser` authentication and authorization mechanisms, ensure they match the equivalent Kafka configuration:\n+\n+* `KafkaUser.spec.authentication` matches `Kafka.spec.kafka.listeners.*.authentication`\n+* `KafkaUser.spec.authorization` matches `Kafka.spec.kafka.authorization`\n+\n+NOTE: Authentication between Kafka users and Kafka brokers depends on the authentication settings for each.\n+For example, it is not possible to authenticate a user with TLS if it is not also enabled in the Kafka configuration.\n+\n+Strimzi operators automate the configuration process:\n+\n+* The Cluster Operator creates the listeners and sets up the cluster and client certificate authority (CA) certificates to enable authentication within the Kafka cluster.\n+* The User Operator creates the user representing the client and sets up the user CA certificates for secure access to the Kafka cluster.\n+\n+In this procedure, the certificates generated by the Cluster Operator are used, but you can replace them by link:{BookURLUsing}#installing-your-own-ca-certificates-str[installing your own certificates].\n+You can also configure your listener to link:{BookURLUsing}#kafka-listener-certificates-str[use a Kafka listener certificate managed by an external Certificate Authority].\n+\n+Certificates are available in PKCS #12 format (.p12) and PEM (.crt) formats.\n+\n+.Prerequisites\n+\n+* The Kafka cluster is available for the client\n+* The Cluster Operator and User Operator are running in the cluster\n+* A client outside the Kubernetes cluster to connect to the Kafka cluster\n+\n+.Procedure\n+\n+. Configure the Kafka cluster with an `external` Kafka listener.\n++\n+* Define the authentication required to access the Kafka broker through the listener\n+* Enable authorization on the Kafka broker\n++\n+For example:\n++\n+[source,yaml,subs=\"+quotes,attributes\"]\n+----\n+apiVersion: {KafkaApiVersion}\n+kind: Kafka\n+spec:\n+  kafka:\n+    # ...\n+    listeners: <1>\n+      external:\n+        type: _LISTENER-TYPE_ <2>\n+        tls: true <3>\n+        authentication:\n+          type: tls <4>\n+        configuration:\n+          preferredAddressType: InternalDNS <5>\n+        networkPolicyPeers: <6>\n+          - podSelector:\n+              matchLabels:\n+                app: kafka-consumer\n+          - namespaceSelector:\n+              matchLabels:\n+                project: my-project\n+        overrides: <7>\n+          # ...\n+      authorization: <8>\n+        type: simple\n+        superUsers:\n+          - super-user-name <9>\n+  # ...\n+----\n+<1> Configuration options for enabling external listeners are described in the link:{BookURLUsing}#type-KafkaListeners-reference[Kafka listeners schema reference^]\n+<2> External listener type specified as `route`, `loadbalancer`, `nodeport` or `ingress`.\n+<3> Enables TLS encryption on the listener. Not required for `route` listeners.\n+<4> Authentication specified as `tls`.\n+<5> (Optional, for `nodeport` listeners only) Configuration to link:{BookURLUsing}#con-kafka-broker-external-listeners-nodeports-{context}[specify a preference for the first address type used by Strimzi as the node address].\n+<6> (Optional) By default, Strimzi grants access to listeners to all applications and namespaces. The `networkPolicyPeers` property restricts access to specific pods and namespaces.\n+<7> (Optional, but not applicable to `ingress` listeners) Overrides customize the bootstrap and broker addresses advertised to clients.\n+Strimzi automatically determines the addresses to advertise to clients.\n+The addresses are automatically assigned by Kubernetes.\n+Use overrides if the infrastructure on which you are running Strimzi does not provide the right address.\n+Validation is not performed on overrides.\n+The override configuration differs according to the external listener type,\n+so you can override hosts for `route`, DNS names or IP addresses for `loadbalancer`, and node ports (shown) for `nodeport`.\n+Refer to the link:{BookURLUsing}#type-KafkaListeners-reference[Kafka listeners schema reference^] for more information on external listener `overrides`.\n+<8> Authorization link:{BookURLUsing}#ref-kafka-authorization-{context}[enables `simple` authorization on the Kafka broker using the `SimpleAclAuthorizer` Kafka plugin].\n+<9> (Optional) Super users can access all brokers regardless of any access restrictions defined in ACLs.\n+\n+. Create or update the `Kafka` resource.\n++\n+[source,shell,subs=+quotes]\n+oc apply -f _KAFKA-CONFIG-FILE_", "originalCommit": "bba17b8c09cec1caf2cd29ccfa6c470005fbade5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzUwNTMzNA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3147#discussion_r447505334", "bodyText": "I would highlight that this is for TLS encryption.", "author": "ppatierno", "createdAt": "2020-06-30T08:27:42Z", "path": "documentation/modules/deploying/proc-deploy-setup-external-clients.adoc", "diffHunk": "@@ -0,0 +1,252 @@\n+// Module included in the following assemblies:\n+//\n+// deploying/assembly_deploy-verify.adoc\n+// getting-started.adoc\n+\n+[id='setup-external-clients-{context}']\n+= Setting up access for clients outside of Kubernetes\n+\n+This procedure shows how to configure client access to a Kafka cluster from outside Kubernetes.\n+\n+Using the address of the Kafka cluster, you can provide external access to a client on a different Kubernetes namespace or outside Kubernetes entirely.\n+\n+You configure an external Kafka listener to provide the access.\n+\n+The following external listener types are supported:\n+\n+* `route` to use OpenShift `Route` and the default HAProxy router\n+* `loadbalancer` to use loadbalancer services\n+* `nodeport` to use ports on Kubernetes nodes\n+* `ingress` to use Kubernetes _Ingress_ and the {NginxIngressController}\n+\n+The type chosen depends on your requirements, and your environment and infrastructure.\n+For example, `nodeport` is the least secure, so you might not wish to use it in a production environment.\n+\n+In this procedure:\n+\n+. An external listener is configured for the Kafka cluster, with TLS encryption and authentication, and Kafka _simple authorization_ is enabled.\n+. A `KafkaUser` is created for the client, with TLS authentication and Access Control Lists (ACLs) defined for _simple authorization_.\n+\n+You can configure your listener to use TLS or SCRAM-SHA authentication,\n+both of which can be used with TLS encryption.\n+If you are using an authorization server, you can use token-based link:{BookURLUsing}#assembly-oauth-authentication_str[{oauth} authentication] and link:{BookURLUsing}#assembly-oauth-authorization_str[{oauth} authorization].\n+\n+When you configure the `KafkaUser` authentication and authorization mechanisms, ensure they match the equivalent Kafka configuration:\n+\n+* `KafkaUser.spec.authentication` matches `Kafka.spec.kafka.listeners.*.authentication`\n+* `KafkaUser.spec.authorization` matches `Kafka.spec.kafka.authorization`\n+\n+NOTE: Authentication between Kafka users and Kafka brokers depends on the authentication settings for each.\n+For example, it is not possible to authenticate a user with TLS if it is not also enabled in the Kafka configuration.\n+\n+Strimzi operators automate the configuration process:\n+\n+* The Cluster Operator creates the listeners and sets up the cluster and client certificate authority (CA) certificates to enable authentication within the Kafka cluster.\n+* The User Operator creates the user representing the client and sets up the user CA certificates for secure access to the Kafka cluster.\n+\n+In this procedure, the certificates generated by the Cluster Operator are used, but you can replace them by link:{BookURLUsing}#installing-your-own-ca-certificates-str[installing your own certificates].\n+You can also configure your listener to link:{BookURLUsing}#kafka-listener-certificates-str[use a Kafka listener certificate managed by an external Certificate Authority].\n+\n+Certificates are available in PKCS #12 format (.p12) and PEM (.crt) formats.\n+\n+.Prerequisites\n+\n+* The Kafka cluster is available for the client\n+* The Cluster Operator and User Operator are running in the cluster\n+* A client outside the Kubernetes cluster to connect to the Kafka cluster\n+\n+.Procedure\n+\n+. Configure the Kafka cluster with an `external` Kafka listener.\n++\n+* Define the authentication required to access the Kafka broker through the listener\n+* Enable authorization on the Kafka broker\n++\n+For example:\n++\n+[source,yaml,subs=\"+quotes,attributes\"]\n+----\n+apiVersion: {KafkaApiVersion}\n+kind: Kafka\n+spec:\n+  kafka:\n+    # ...\n+    listeners: <1>\n+      external:\n+        type: _LISTENER-TYPE_ <2>\n+        tls: true <3>\n+        authentication:\n+          type: tls <4>\n+        configuration:\n+          preferredAddressType: InternalDNS <5>\n+        networkPolicyPeers: <6>\n+          - podSelector:\n+              matchLabels:\n+                app: kafka-consumer\n+          - namespaceSelector:\n+              matchLabels:\n+                project: my-project\n+        overrides: <7>\n+          # ...\n+      authorization: <8>\n+        type: simple\n+        superUsers:\n+          - super-user-name <9>\n+  # ...\n+----\n+<1> Configuration options for enabling external listeners are described in the link:{BookURLUsing}#type-KafkaListeners-reference[Kafka listeners schema reference^]\n+<2> External listener type specified as `route`, `loadbalancer`, `nodeport` or `ingress`.\n+<3> Enables TLS encryption on the listener. Not required for `route` listeners.\n+<4> Authentication specified as `tls`.\n+<5> (Optional, for `nodeport` listeners only) Configuration to link:{BookURLUsing}#con-kafka-broker-external-listeners-nodeports-{context}[specify a preference for the first address type used by Strimzi as the node address].\n+<6> (Optional) By default, Strimzi grants access to listeners to all applications and namespaces. The `networkPolicyPeers` property restricts access to specific pods and namespaces.\n+<7> (Optional, but not applicable to `ingress` listeners) Overrides customize the bootstrap and broker addresses advertised to clients.\n+Strimzi automatically determines the addresses to advertise to clients.\n+The addresses are automatically assigned by Kubernetes.\n+Use overrides if the infrastructure on which you are running Strimzi does not provide the right address.\n+Validation is not performed on overrides.\n+The override configuration differs according to the external listener type,\n+so you can override hosts for `route`, DNS names or IP addresses for `loadbalancer`, and node ports (shown) for `nodeport`.\n+Refer to the link:{BookURLUsing}#type-KafkaListeners-reference[Kafka listeners schema reference^] for more information on external listener `overrides`.\n+<8> Authorization link:{BookURLUsing}#ref-kafka-authorization-{context}[enables `simple` authorization on the Kafka broker using the `SimpleAclAuthorizer` Kafka plugin].\n+<9> (Optional) Super users can access all brokers regardless of any access restrictions defined in ACLs.\n+\n+. Create or update the `Kafka` resource.\n++\n+[source,shell,subs=+quotes]\n+oc apply -f _KAFKA-CONFIG-FILE_\n++\n+The Kafka cluster is configured with a Kafka broker listener using TLS authentication.\n++\n+A service is created for each Kafka broker pod.\n++\n+An additional service is created to serve as the _bootstrap address_ for connection to the Kafka cluster.\n++\n+The cluster CA certificate to verify the identity of the kafka brokers is also created with the same name as the `Kafka` resource.\n+\n+. Find the bootstrap address and port from the status of the `Kafka` resource.\n++\n+[source,shell, subs=+quotes]\n+kubectl get kafka _KAFKA-CLUSTER-NAME_ -o jsonpath='{.status.listeners[?(@.type==\"external\")].bootstrapServers}'\n++\n+Use the bootstrap address in your Kafka client to connect to the Kafka cluster.\n+\n+. Extract the public cluster CA certificate and password from the generated `_KAFKA-CLUSTER-NAME_-cluster-ca-cert` Secret.\n++\n+[source,shell,subs=\"+quotes\"]\n+kubectl get secret _KAFKA-CLUSTER-NAME_-cluster-ca-cert -o jsonpath='{.data.ca\\.p12}' | base64 -d > ca.p12\n++\n+[source,shell,subs=\"+quotes\"]\n+kubectl get secret _KAFKA-CLUSTER-NAME_-cluster-ca-cert -o jsonpath='{.data.ca\\.password}' | base64 -d > ca.password\n++\n+Use the certificate and password in your Kafka client to connect to the Kafka cluster.", "originalCommit": "bba17b8c09cec1caf2cd29ccfa6c470005fbade5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzUwNjgwNA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3147#discussion_r447506804", "bodyText": "\"TLS client authentication\"", "author": "ppatierno", "createdAt": "2020-06-30T08:29:45Z", "path": "documentation/modules/deploying/proc-deploy-setup-external-clients.adoc", "diffHunk": "@@ -0,0 +1,252 @@\n+// Module included in the following assemblies:\n+//\n+// deploying/assembly_deploy-verify.adoc\n+// getting-started.adoc\n+\n+[id='setup-external-clients-{context}']\n+= Setting up access for clients outside of Kubernetes\n+\n+This procedure shows how to configure client access to a Kafka cluster from outside Kubernetes.\n+\n+Using the address of the Kafka cluster, you can provide external access to a client on a different Kubernetes namespace or outside Kubernetes entirely.\n+\n+You configure an external Kafka listener to provide the access.\n+\n+The following external listener types are supported:\n+\n+* `route` to use OpenShift `Route` and the default HAProxy router\n+* `loadbalancer` to use loadbalancer services\n+* `nodeport` to use ports on Kubernetes nodes\n+* `ingress` to use Kubernetes _Ingress_ and the {NginxIngressController}\n+\n+The type chosen depends on your requirements, and your environment and infrastructure.\n+For example, `nodeport` is the least secure, so you might not wish to use it in a production environment.\n+\n+In this procedure:\n+\n+. An external listener is configured for the Kafka cluster, with TLS encryption and authentication, and Kafka _simple authorization_ is enabled.\n+. A `KafkaUser` is created for the client, with TLS authentication and Access Control Lists (ACLs) defined for _simple authorization_.\n+\n+You can configure your listener to use TLS or SCRAM-SHA authentication,\n+both of which can be used with TLS encryption.\n+If you are using an authorization server, you can use token-based link:{BookURLUsing}#assembly-oauth-authentication_str[{oauth} authentication] and link:{BookURLUsing}#assembly-oauth-authorization_str[{oauth} authorization].\n+\n+When you configure the `KafkaUser` authentication and authorization mechanisms, ensure they match the equivalent Kafka configuration:\n+\n+* `KafkaUser.spec.authentication` matches `Kafka.spec.kafka.listeners.*.authentication`\n+* `KafkaUser.spec.authorization` matches `Kafka.spec.kafka.authorization`\n+\n+NOTE: Authentication between Kafka users and Kafka brokers depends on the authentication settings for each.\n+For example, it is not possible to authenticate a user with TLS if it is not also enabled in the Kafka configuration.\n+\n+Strimzi operators automate the configuration process:\n+\n+* The Cluster Operator creates the listeners and sets up the cluster and client certificate authority (CA) certificates to enable authentication within the Kafka cluster.\n+* The User Operator creates the user representing the client and sets up the user CA certificates for secure access to the Kafka cluster.\n+\n+In this procedure, the certificates generated by the Cluster Operator are used, but you can replace them by link:{BookURLUsing}#installing-your-own-ca-certificates-str[installing your own certificates].\n+You can also configure your listener to link:{BookURLUsing}#kafka-listener-certificates-str[use a Kafka listener certificate managed by an external Certificate Authority].\n+\n+Certificates are available in PKCS #12 format (.p12) and PEM (.crt) formats.\n+\n+.Prerequisites\n+\n+* The Kafka cluster is available for the client\n+* The Cluster Operator and User Operator are running in the cluster\n+* A client outside the Kubernetes cluster to connect to the Kafka cluster\n+\n+.Procedure\n+\n+. Configure the Kafka cluster with an `external` Kafka listener.\n++\n+* Define the authentication required to access the Kafka broker through the listener\n+* Enable authorization on the Kafka broker\n++\n+For example:\n++\n+[source,yaml,subs=\"+quotes,attributes\"]\n+----\n+apiVersion: {KafkaApiVersion}\n+kind: Kafka\n+spec:\n+  kafka:\n+    # ...\n+    listeners: <1>\n+      external:\n+        type: _LISTENER-TYPE_ <2>\n+        tls: true <3>\n+        authentication:\n+          type: tls <4>\n+        configuration:\n+          preferredAddressType: InternalDNS <5>\n+        networkPolicyPeers: <6>\n+          - podSelector:\n+              matchLabels:\n+                app: kafka-consumer\n+          - namespaceSelector:\n+              matchLabels:\n+                project: my-project\n+        overrides: <7>\n+          # ...\n+      authorization: <8>\n+        type: simple\n+        superUsers:\n+          - super-user-name <9>\n+  # ...\n+----\n+<1> Configuration options for enabling external listeners are described in the link:{BookURLUsing}#type-KafkaListeners-reference[Kafka listeners schema reference^]\n+<2> External listener type specified as `route`, `loadbalancer`, `nodeport` or `ingress`.\n+<3> Enables TLS encryption on the listener. Not required for `route` listeners.\n+<4> Authentication specified as `tls`.\n+<5> (Optional, for `nodeport` listeners only) Configuration to link:{BookURLUsing}#con-kafka-broker-external-listeners-nodeports-{context}[specify a preference for the first address type used by Strimzi as the node address].\n+<6> (Optional) By default, Strimzi grants access to listeners to all applications and namespaces. The `networkPolicyPeers` property restricts access to specific pods and namespaces.\n+<7> (Optional, but not applicable to `ingress` listeners) Overrides customize the bootstrap and broker addresses advertised to clients.\n+Strimzi automatically determines the addresses to advertise to clients.\n+The addresses are automatically assigned by Kubernetes.\n+Use overrides if the infrastructure on which you are running Strimzi does not provide the right address.\n+Validation is not performed on overrides.\n+The override configuration differs according to the external listener type,\n+so you can override hosts for `route`, DNS names or IP addresses for `loadbalancer`, and node ports (shown) for `nodeport`.\n+Refer to the link:{BookURLUsing}#type-KafkaListeners-reference[Kafka listeners schema reference^] for more information on external listener `overrides`.\n+<8> Authorization link:{BookURLUsing}#ref-kafka-authorization-{context}[enables `simple` authorization on the Kafka broker using the `SimpleAclAuthorizer` Kafka plugin].\n+<9> (Optional) Super users can access all brokers regardless of any access restrictions defined in ACLs.\n+\n+. Create or update the `Kafka` resource.\n++\n+[source,shell,subs=+quotes]\n+oc apply -f _KAFKA-CONFIG-FILE_\n++\n+The Kafka cluster is configured with a Kafka broker listener using TLS authentication.\n++\n+A service is created for each Kafka broker pod.\n++\n+An additional service is created to serve as the _bootstrap address_ for connection to the Kafka cluster.\n++\n+The cluster CA certificate to verify the identity of the kafka brokers is also created with the same name as the `Kafka` resource.\n+\n+. Find the bootstrap address and port from the status of the `Kafka` resource.\n++\n+[source,shell, subs=+quotes]\n+kubectl get kafka _KAFKA-CLUSTER-NAME_ -o jsonpath='{.status.listeners[?(@.type==\"external\")].bootstrapServers}'\n++\n+Use the bootstrap address in your Kafka client to connect to the Kafka cluster.\n+\n+. Extract the public cluster CA certificate and password from the generated `_KAFKA-CLUSTER-NAME_-cluster-ca-cert` Secret.\n++\n+[source,shell,subs=\"+quotes\"]\n+kubectl get secret _KAFKA-CLUSTER-NAME_-cluster-ca-cert -o jsonpath='{.data.ca\\.p12}' | base64 -d > ca.p12\n++\n+[source,shell,subs=\"+quotes\"]\n+kubectl get secret _KAFKA-CLUSTER-NAME_-cluster-ca-cert -o jsonpath='{.data.ca\\.password}' | base64 -d > ca.password\n++\n+Use the certificate and password in your Kafka client to connect to the Kafka cluster.\n++\n+NOTE: Cluster CA certificates renew automatically by default. If your are using your own Kafka listener certificates,\n+you will need to link:{BookURLUsing}#renewing-your-own-ca-certificates-str[renew the certificates manually].\n+\n+. Create or modify a user representing the client that requires access to the Kafka cluster.\n++\n+* Specify the same authentication type as the `Kafka` listener.\n+* Specify the authorization ACLs for simple authorization.\n++\n+For example:\n++\n+[source,yaml,subs=\"+quotes,attributes\"]\n+----\n+apiVersion: {KafkaUserApiVersion}\n+kind: KafkaUser\n+metadata:\n+  name: my-user\n+  labels:\n+    strimzi.io/cluster: my-cluster <1>\n+spec:\n+  authentication:\n+    type: tls <2>\n+  authorization:\n+    type: simple\n+    acls: <3>\n+      - resource:\n+          type: topic\n+          name: my-topic\n+          patternType: literal\n+        operation: Read\n+      - resource:\n+          type: topic\n+          name: my-topic\n+          patternType: literal\n+        operation: Describe\n+      - resource:\n+          type: group\n+          name: my-group\n+          patternType: literal\n+        operation: Read\n+----\n+<1> The label must match the label of the Kafka cluster for the user to be created.\n+<2> Authentication specified as `tls`.\n+<3> Simple authorization requires an accompanying list of ACL rules to apply to the user.\n+The rules define the operations allowed on Kafka resources based on the _username_ (`my-user`).\n+\n+. Create or modify the `KafkaUser` resource.\n++\n+[source,shell,subs=\"+quotes,attributes\"]\n+kubectl apply -f _USER-CONFIG-FILE_\n++\n+The user is created, as well as a Secret with the same name as the `KafkaUser` resource.\n+The Secret contains a private and public key for TLS client authentication.\n++\n+For example:\n++\n+[source,yaml,subs=\"+quotes,attributes\"]\n+----\n+apiVersion: v1\n+kind: Secret\n+metadata:\n+  name: my-user\n+  labels:\n+    strimzi.io/kind: KafkaUser\n+    strimzi.io/cluster: my-cluster\n+type: Opaque\n+data:\n+  ca.crt: _PUBLIC-KEY-OF-THE-CLIENT-CA_\n+  user.crt: _USER-CERTIFICATE-CONTAINING-PUBLIC-KEY-OF-USER_\n+  user.key: _PRIVATE-KEY-OF-USER_\n+  user.p12: _P12-ARCHIVE-FILE-STORING-CERTIFICATES-AND-KEYS_\n+  user.password: _PASSWORD-PROTECTING-P12-ARCHIVE_\n+----\n+\n+. Configure your client to connect to the Kafka cluster with the properties required to make a secure connection to the Kafka cluster.\n+\n+.. Add the authentication details for the public cluster certificates:\n++\n+[source,env,subs=\"+quotes,attributes\"]\n+----\n+security.protocol: SSL <1>\n+ssl.truststore.location: _PATH-TO/ssl/keys/truststore_ <2>\n+ssl.truststore.password: _CLUSTER-CERT-PASSWORD_ <3>\n+ssl.truststore.type=PKCS12 <4>\n+----\n+<1> Enables TLS encryption (with or without TLS authentication).", "originalCommit": "bba17b8c09cec1caf2cd29ccfa6c470005fbade5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzUwNzM0NA==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3147#discussion_r447507344", "bodyText": "I would specify CLUSTER-CA-CERT-PASSWORD", "author": "ppatierno", "createdAt": "2020-06-30T08:30:33Z", "path": "documentation/modules/deploying/proc-deploy-setup-external-clients.adoc", "diffHunk": "@@ -0,0 +1,252 @@\n+// Module included in the following assemblies:\n+//\n+// deploying/assembly_deploy-verify.adoc\n+// getting-started.adoc\n+\n+[id='setup-external-clients-{context}']\n+= Setting up access for clients outside of Kubernetes\n+\n+This procedure shows how to configure client access to a Kafka cluster from outside Kubernetes.\n+\n+Using the address of the Kafka cluster, you can provide external access to a client on a different Kubernetes namespace or outside Kubernetes entirely.\n+\n+You configure an external Kafka listener to provide the access.\n+\n+The following external listener types are supported:\n+\n+* `route` to use OpenShift `Route` and the default HAProxy router\n+* `loadbalancer` to use loadbalancer services\n+* `nodeport` to use ports on Kubernetes nodes\n+* `ingress` to use Kubernetes _Ingress_ and the {NginxIngressController}\n+\n+The type chosen depends on your requirements, and your environment and infrastructure.\n+For example, `nodeport` is the least secure, so you might not wish to use it in a production environment.\n+\n+In this procedure:\n+\n+. An external listener is configured for the Kafka cluster, with TLS encryption and authentication, and Kafka _simple authorization_ is enabled.\n+. A `KafkaUser` is created for the client, with TLS authentication and Access Control Lists (ACLs) defined for _simple authorization_.\n+\n+You can configure your listener to use TLS or SCRAM-SHA authentication,\n+both of which can be used with TLS encryption.\n+If you are using an authorization server, you can use token-based link:{BookURLUsing}#assembly-oauth-authentication_str[{oauth} authentication] and link:{BookURLUsing}#assembly-oauth-authorization_str[{oauth} authorization].\n+\n+When you configure the `KafkaUser` authentication and authorization mechanisms, ensure they match the equivalent Kafka configuration:\n+\n+* `KafkaUser.spec.authentication` matches `Kafka.spec.kafka.listeners.*.authentication`\n+* `KafkaUser.spec.authorization` matches `Kafka.spec.kafka.authorization`\n+\n+NOTE: Authentication between Kafka users and Kafka brokers depends on the authentication settings for each.\n+For example, it is not possible to authenticate a user with TLS if it is not also enabled in the Kafka configuration.\n+\n+Strimzi operators automate the configuration process:\n+\n+* The Cluster Operator creates the listeners and sets up the cluster and client certificate authority (CA) certificates to enable authentication within the Kafka cluster.\n+* The User Operator creates the user representing the client and sets up the user CA certificates for secure access to the Kafka cluster.\n+\n+In this procedure, the certificates generated by the Cluster Operator are used, but you can replace them by link:{BookURLUsing}#installing-your-own-ca-certificates-str[installing your own certificates].\n+You can also configure your listener to link:{BookURLUsing}#kafka-listener-certificates-str[use a Kafka listener certificate managed by an external Certificate Authority].\n+\n+Certificates are available in PKCS #12 format (.p12) and PEM (.crt) formats.\n+\n+.Prerequisites\n+\n+* The Kafka cluster is available for the client\n+* The Cluster Operator and User Operator are running in the cluster\n+* A client outside the Kubernetes cluster to connect to the Kafka cluster\n+\n+.Procedure\n+\n+. Configure the Kafka cluster with an `external` Kafka listener.\n++\n+* Define the authentication required to access the Kafka broker through the listener\n+* Enable authorization on the Kafka broker\n++\n+For example:\n++\n+[source,yaml,subs=\"+quotes,attributes\"]\n+----\n+apiVersion: {KafkaApiVersion}\n+kind: Kafka\n+spec:\n+  kafka:\n+    # ...\n+    listeners: <1>\n+      external:\n+        type: _LISTENER-TYPE_ <2>\n+        tls: true <3>\n+        authentication:\n+          type: tls <4>\n+        configuration:\n+          preferredAddressType: InternalDNS <5>\n+        networkPolicyPeers: <6>\n+          - podSelector:\n+              matchLabels:\n+                app: kafka-consumer\n+          - namespaceSelector:\n+              matchLabels:\n+                project: my-project\n+        overrides: <7>\n+          # ...\n+      authorization: <8>\n+        type: simple\n+        superUsers:\n+          - super-user-name <9>\n+  # ...\n+----\n+<1> Configuration options for enabling external listeners are described in the link:{BookURLUsing}#type-KafkaListeners-reference[Kafka listeners schema reference^]\n+<2> External listener type specified as `route`, `loadbalancer`, `nodeport` or `ingress`.\n+<3> Enables TLS encryption on the listener. Not required for `route` listeners.\n+<4> Authentication specified as `tls`.\n+<5> (Optional, for `nodeport` listeners only) Configuration to link:{BookURLUsing}#con-kafka-broker-external-listeners-nodeports-{context}[specify a preference for the first address type used by Strimzi as the node address].\n+<6> (Optional) By default, Strimzi grants access to listeners to all applications and namespaces. The `networkPolicyPeers` property restricts access to specific pods and namespaces.\n+<7> (Optional, but not applicable to `ingress` listeners) Overrides customize the bootstrap and broker addresses advertised to clients.\n+Strimzi automatically determines the addresses to advertise to clients.\n+The addresses are automatically assigned by Kubernetes.\n+Use overrides if the infrastructure on which you are running Strimzi does not provide the right address.\n+Validation is not performed on overrides.\n+The override configuration differs according to the external listener type,\n+so you can override hosts for `route`, DNS names or IP addresses for `loadbalancer`, and node ports (shown) for `nodeport`.\n+Refer to the link:{BookURLUsing}#type-KafkaListeners-reference[Kafka listeners schema reference^] for more information on external listener `overrides`.\n+<8> Authorization link:{BookURLUsing}#ref-kafka-authorization-{context}[enables `simple` authorization on the Kafka broker using the `SimpleAclAuthorizer` Kafka plugin].\n+<9> (Optional) Super users can access all brokers regardless of any access restrictions defined in ACLs.\n+\n+. Create or update the `Kafka` resource.\n++\n+[source,shell,subs=+quotes]\n+oc apply -f _KAFKA-CONFIG-FILE_\n++\n+The Kafka cluster is configured with a Kafka broker listener using TLS authentication.\n++\n+A service is created for each Kafka broker pod.\n++\n+An additional service is created to serve as the _bootstrap address_ for connection to the Kafka cluster.\n++\n+The cluster CA certificate to verify the identity of the kafka brokers is also created with the same name as the `Kafka` resource.\n+\n+. Find the bootstrap address and port from the status of the `Kafka` resource.\n++\n+[source,shell, subs=+quotes]\n+kubectl get kafka _KAFKA-CLUSTER-NAME_ -o jsonpath='{.status.listeners[?(@.type==\"external\")].bootstrapServers}'\n++\n+Use the bootstrap address in your Kafka client to connect to the Kafka cluster.\n+\n+. Extract the public cluster CA certificate and password from the generated `_KAFKA-CLUSTER-NAME_-cluster-ca-cert` Secret.\n++\n+[source,shell,subs=\"+quotes\"]\n+kubectl get secret _KAFKA-CLUSTER-NAME_-cluster-ca-cert -o jsonpath='{.data.ca\\.p12}' | base64 -d > ca.p12\n++\n+[source,shell,subs=\"+quotes\"]\n+kubectl get secret _KAFKA-CLUSTER-NAME_-cluster-ca-cert -o jsonpath='{.data.ca\\.password}' | base64 -d > ca.password\n++\n+Use the certificate and password in your Kafka client to connect to the Kafka cluster.\n++\n+NOTE: Cluster CA certificates renew automatically by default. If your are using your own Kafka listener certificates,\n+you will need to link:{BookURLUsing}#renewing-your-own-ca-certificates-str[renew the certificates manually].\n+\n+. Create or modify a user representing the client that requires access to the Kafka cluster.\n++\n+* Specify the same authentication type as the `Kafka` listener.\n+* Specify the authorization ACLs for simple authorization.\n++\n+For example:\n++\n+[source,yaml,subs=\"+quotes,attributes\"]\n+----\n+apiVersion: {KafkaUserApiVersion}\n+kind: KafkaUser\n+metadata:\n+  name: my-user\n+  labels:\n+    strimzi.io/cluster: my-cluster <1>\n+spec:\n+  authentication:\n+    type: tls <2>\n+  authorization:\n+    type: simple\n+    acls: <3>\n+      - resource:\n+          type: topic\n+          name: my-topic\n+          patternType: literal\n+        operation: Read\n+      - resource:\n+          type: topic\n+          name: my-topic\n+          patternType: literal\n+        operation: Describe\n+      - resource:\n+          type: group\n+          name: my-group\n+          patternType: literal\n+        operation: Read\n+----\n+<1> The label must match the label of the Kafka cluster for the user to be created.\n+<2> Authentication specified as `tls`.\n+<3> Simple authorization requires an accompanying list of ACL rules to apply to the user.\n+The rules define the operations allowed on Kafka resources based on the _username_ (`my-user`).\n+\n+. Create or modify the `KafkaUser` resource.\n++\n+[source,shell,subs=\"+quotes,attributes\"]\n+kubectl apply -f _USER-CONFIG-FILE_\n++\n+The user is created, as well as a Secret with the same name as the `KafkaUser` resource.\n+The Secret contains a private and public key for TLS client authentication.\n++\n+For example:\n++\n+[source,yaml,subs=\"+quotes,attributes\"]\n+----\n+apiVersion: v1\n+kind: Secret\n+metadata:\n+  name: my-user\n+  labels:\n+    strimzi.io/kind: KafkaUser\n+    strimzi.io/cluster: my-cluster\n+type: Opaque\n+data:\n+  ca.crt: _PUBLIC-KEY-OF-THE-CLIENT-CA_\n+  user.crt: _USER-CERTIFICATE-CONTAINING-PUBLIC-KEY-OF-USER_\n+  user.key: _PRIVATE-KEY-OF-USER_\n+  user.p12: _P12-ARCHIVE-FILE-STORING-CERTIFICATES-AND-KEYS_\n+  user.password: _PASSWORD-PROTECTING-P12-ARCHIVE_\n+----\n+\n+. Configure your client to connect to the Kafka cluster with the properties required to make a secure connection to the Kafka cluster.\n+\n+.. Add the authentication details for the public cluster certificates:\n++\n+[source,env,subs=\"+quotes,attributes\"]\n+----\n+security.protocol: SSL <1>\n+ssl.truststore.location: _PATH-TO/ssl/keys/truststore_ <2>\n+ssl.truststore.password: _CLUSTER-CERT-PASSWORD_ <3>", "originalCommit": "bba17b8c09cec1caf2cd29ccfa6c470005fbade5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzUwODIxMQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3147#discussion_r447508211", "bodyText": "This sentence is misleading. The certificate is already signed by the client CA when it's created not when the client connects to the Kafka cluster.", "author": "ppatierno", "createdAt": "2020-06-30T08:31:47Z", "path": "documentation/modules/deploying/proc-deploy-setup-external-clients.adoc", "diffHunk": "@@ -0,0 +1,252 @@\n+// Module included in the following assemblies:\n+//\n+// deploying/assembly_deploy-verify.adoc\n+// getting-started.adoc\n+\n+[id='setup-external-clients-{context}']\n+= Setting up access for clients outside of Kubernetes\n+\n+This procedure shows how to configure client access to a Kafka cluster from outside Kubernetes.\n+\n+Using the address of the Kafka cluster, you can provide external access to a client on a different Kubernetes namespace or outside Kubernetes entirely.\n+\n+You configure an external Kafka listener to provide the access.\n+\n+The following external listener types are supported:\n+\n+* `route` to use OpenShift `Route` and the default HAProxy router\n+* `loadbalancer` to use loadbalancer services\n+* `nodeport` to use ports on Kubernetes nodes\n+* `ingress` to use Kubernetes _Ingress_ and the {NginxIngressController}\n+\n+The type chosen depends on your requirements, and your environment and infrastructure.\n+For example, `nodeport` is the least secure, so you might not wish to use it in a production environment.\n+\n+In this procedure:\n+\n+. An external listener is configured for the Kafka cluster, with TLS encryption and authentication, and Kafka _simple authorization_ is enabled.\n+. A `KafkaUser` is created for the client, with TLS authentication and Access Control Lists (ACLs) defined for _simple authorization_.\n+\n+You can configure your listener to use TLS or SCRAM-SHA authentication,\n+both of which can be used with TLS encryption.\n+If you are using an authorization server, you can use token-based link:{BookURLUsing}#assembly-oauth-authentication_str[{oauth} authentication] and link:{BookURLUsing}#assembly-oauth-authorization_str[{oauth} authorization].\n+\n+When you configure the `KafkaUser` authentication and authorization mechanisms, ensure they match the equivalent Kafka configuration:\n+\n+* `KafkaUser.spec.authentication` matches `Kafka.spec.kafka.listeners.*.authentication`\n+* `KafkaUser.spec.authorization` matches `Kafka.spec.kafka.authorization`\n+\n+NOTE: Authentication between Kafka users and Kafka brokers depends on the authentication settings for each.\n+For example, it is not possible to authenticate a user with TLS if it is not also enabled in the Kafka configuration.\n+\n+Strimzi operators automate the configuration process:\n+\n+* The Cluster Operator creates the listeners and sets up the cluster and client certificate authority (CA) certificates to enable authentication within the Kafka cluster.\n+* The User Operator creates the user representing the client and sets up the user CA certificates for secure access to the Kafka cluster.\n+\n+In this procedure, the certificates generated by the Cluster Operator are used, but you can replace them by link:{BookURLUsing}#installing-your-own-ca-certificates-str[installing your own certificates].\n+You can also configure your listener to link:{BookURLUsing}#kafka-listener-certificates-str[use a Kafka listener certificate managed by an external Certificate Authority].\n+\n+Certificates are available in PKCS #12 format (.p12) and PEM (.crt) formats.\n+\n+.Prerequisites\n+\n+* The Kafka cluster is available for the client\n+* The Cluster Operator and User Operator are running in the cluster\n+* A client outside the Kubernetes cluster to connect to the Kafka cluster\n+\n+.Procedure\n+\n+. Configure the Kafka cluster with an `external` Kafka listener.\n++\n+* Define the authentication required to access the Kafka broker through the listener\n+* Enable authorization on the Kafka broker\n++\n+For example:\n++\n+[source,yaml,subs=\"+quotes,attributes\"]\n+----\n+apiVersion: {KafkaApiVersion}\n+kind: Kafka\n+spec:\n+  kafka:\n+    # ...\n+    listeners: <1>\n+      external:\n+        type: _LISTENER-TYPE_ <2>\n+        tls: true <3>\n+        authentication:\n+          type: tls <4>\n+        configuration:\n+          preferredAddressType: InternalDNS <5>\n+        networkPolicyPeers: <6>\n+          - podSelector:\n+              matchLabels:\n+                app: kafka-consumer\n+          - namespaceSelector:\n+              matchLabels:\n+                project: my-project\n+        overrides: <7>\n+          # ...\n+      authorization: <8>\n+        type: simple\n+        superUsers:\n+          - super-user-name <9>\n+  # ...\n+----\n+<1> Configuration options for enabling external listeners are described in the link:{BookURLUsing}#type-KafkaListeners-reference[Kafka listeners schema reference^]\n+<2> External listener type specified as `route`, `loadbalancer`, `nodeport` or `ingress`.\n+<3> Enables TLS encryption on the listener. Not required for `route` listeners.\n+<4> Authentication specified as `tls`.\n+<5> (Optional, for `nodeport` listeners only) Configuration to link:{BookURLUsing}#con-kafka-broker-external-listeners-nodeports-{context}[specify a preference for the first address type used by Strimzi as the node address].\n+<6> (Optional) By default, Strimzi grants access to listeners to all applications and namespaces. The `networkPolicyPeers` property restricts access to specific pods and namespaces.\n+<7> (Optional, but not applicable to `ingress` listeners) Overrides customize the bootstrap and broker addresses advertised to clients.\n+Strimzi automatically determines the addresses to advertise to clients.\n+The addresses are automatically assigned by Kubernetes.\n+Use overrides if the infrastructure on which you are running Strimzi does not provide the right address.\n+Validation is not performed on overrides.\n+The override configuration differs according to the external listener type,\n+so you can override hosts for `route`, DNS names or IP addresses for `loadbalancer`, and node ports (shown) for `nodeport`.\n+Refer to the link:{BookURLUsing}#type-KafkaListeners-reference[Kafka listeners schema reference^] for more information on external listener `overrides`.\n+<8> Authorization link:{BookURLUsing}#ref-kafka-authorization-{context}[enables `simple` authorization on the Kafka broker using the `SimpleAclAuthorizer` Kafka plugin].\n+<9> (Optional) Super users can access all brokers regardless of any access restrictions defined in ACLs.\n+\n+. Create or update the `Kafka` resource.\n++\n+[source,shell,subs=+quotes]\n+oc apply -f _KAFKA-CONFIG-FILE_\n++\n+The Kafka cluster is configured with a Kafka broker listener using TLS authentication.\n++\n+A service is created for each Kafka broker pod.\n++\n+An additional service is created to serve as the _bootstrap address_ for connection to the Kafka cluster.\n++\n+The cluster CA certificate to verify the identity of the kafka brokers is also created with the same name as the `Kafka` resource.\n+\n+. Find the bootstrap address and port from the status of the `Kafka` resource.\n++\n+[source,shell, subs=+quotes]\n+kubectl get kafka _KAFKA-CLUSTER-NAME_ -o jsonpath='{.status.listeners[?(@.type==\"external\")].bootstrapServers}'\n++\n+Use the bootstrap address in your Kafka client to connect to the Kafka cluster.\n+\n+. Extract the public cluster CA certificate and password from the generated `_KAFKA-CLUSTER-NAME_-cluster-ca-cert` Secret.\n++\n+[source,shell,subs=\"+quotes\"]\n+kubectl get secret _KAFKA-CLUSTER-NAME_-cluster-ca-cert -o jsonpath='{.data.ca\\.p12}' | base64 -d > ca.p12\n++\n+[source,shell,subs=\"+quotes\"]\n+kubectl get secret _KAFKA-CLUSTER-NAME_-cluster-ca-cert -o jsonpath='{.data.ca\\.password}' | base64 -d > ca.password\n++\n+Use the certificate and password in your Kafka client to connect to the Kafka cluster.\n++\n+NOTE: Cluster CA certificates renew automatically by default. If your are using your own Kafka listener certificates,\n+you will need to link:{BookURLUsing}#renewing-your-own-ca-certificates-str[renew the certificates manually].\n+\n+. Create or modify a user representing the client that requires access to the Kafka cluster.\n++\n+* Specify the same authentication type as the `Kafka` listener.\n+* Specify the authorization ACLs for simple authorization.\n++\n+For example:\n++\n+[source,yaml,subs=\"+quotes,attributes\"]\n+----\n+apiVersion: {KafkaUserApiVersion}\n+kind: KafkaUser\n+metadata:\n+  name: my-user\n+  labels:\n+    strimzi.io/cluster: my-cluster <1>\n+spec:\n+  authentication:\n+    type: tls <2>\n+  authorization:\n+    type: simple\n+    acls: <3>\n+      - resource:\n+          type: topic\n+          name: my-topic\n+          patternType: literal\n+        operation: Read\n+      - resource:\n+          type: topic\n+          name: my-topic\n+          patternType: literal\n+        operation: Describe\n+      - resource:\n+          type: group\n+          name: my-group\n+          patternType: literal\n+        operation: Read\n+----\n+<1> The label must match the label of the Kafka cluster for the user to be created.\n+<2> Authentication specified as `tls`.\n+<3> Simple authorization requires an accompanying list of ACL rules to apply to the user.\n+The rules define the operations allowed on Kafka resources based on the _username_ (`my-user`).\n+\n+. Create or modify the `KafkaUser` resource.\n++\n+[source,shell,subs=\"+quotes,attributes\"]\n+kubectl apply -f _USER-CONFIG-FILE_\n++\n+The user is created, as well as a Secret with the same name as the `KafkaUser` resource.\n+The Secret contains a private and public key for TLS client authentication.\n++\n+For example:\n++\n+[source,yaml,subs=\"+quotes,attributes\"]\n+----\n+apiVersion: v1\n+kind: Secret\n+metadata:\n+  name: my-user\n+  labels:\n+    strimzi.io/kind: KafkaUser\n+    strimzi.io/cluster: my-cluster\n+type: Opaque\n+data:\n+  ca.crt: _PUBLIC-KEY-OF-THE-CLIENT-CA_\n+  user.crt: _USER-CERTIFICATE-CONTAINING-PUBLIC-KEY-OF-USER_\n+  user.key: _PRIVATE-KEY-OF-USER_\n+  user.p12: _P12-ARCHIVE-FILE-STORING-CERTIFICATES-AND-KEYS_\n+  user.password: _PASSWORD-PROTECTING-P12-ARCHIVE_\n+----\n+\n+. Configure your client to connect to the Kafka cluster with the properties required to make a secure connection to the Kafka cluster.\n+\n+.. Add the authentication details for the public cluster certificates:\n++\n+[source,env,subs=\"+quotes,attributes\"]\n+----\n+security.protocol: SSL <1>\n+ssl.truststore.location: _PATH-TO/ssl/keys/truststore_ <2>\n+ssl.truststore.password: _CLUSTER-CERT-PASSWORD_ <3>\n+ssl.truststore.type=PKCS12 <4>\n+----\n+<1> Enables TLS encryption (with or without TLS authentication).\n+<2> Specifies the truststore location where the certificates were imported.\n+<3> Specifies the password for accessing the truststore. This property can be omitted if it is not needed by the truststore.\n+<4> Identifies the truststore type.\n++\n+NOTE: Use `security.protocol: SASL_SSL` when using SCRAM-SHA authentication over TLS.\n+\n+.. Add the bootstrap address and port for connecting to the Kafka cluster:\n++\n+[source,env,subs=\"+quotes,attributes\"]\n+----\n+bootstrap.servers: _BOOTSTRAP-ADDRESS:PORT_\n+----\n+\n+.. Add the authentication details for the public user certificates:\n++\n+[source,env,subs=\"+quotes,attributes\"]\n+----\n+ssl.keystore.location: _PATH-TO/ssl/keys/user1.keystore_ <1>\n+ssl.keystore.password: _USER-CERT-PASSWORD_ <2>\n+----\n+<1> Specifies the keystore location where the certificates were imported.\n+<2> Specifies the password for accessing the keystore. This property can be omitted if it is not needed by the keystore.\n++\n+The certificate is signed by the client CA when the client connects to the Kafka cluster.", "originalCommit": "bba17b8c09cec1caf2cd29ccfa6c470005fbade5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzU3MjAxMw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3147#discussion_r447572013", "bodyText": "Changed to: The public user certificate is signed by the client CA when it is created.", "author": "PaulRMellor", "createdAt": "2020-06-30T10:13:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzUwODIxMQ=="}], "type": "inlineReview"}, {"oid": "87141fc25a75cf2cfd740968bd2a7b8aeee1fa4c", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/87141fc25a75cf2cfd740968bd2a7b8aeee1fa4c", "message": "review edits PP\n\nSigned-off-by: prmellor <pmellor@redhat.com>", "committedDate": "2020-06-30T10:14:27Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzYzNzk1OQ==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3147#discussion_r447637959", "bodyText": "I would remove this sentence. It suggests it is insecure which is not trhough. Also the evaluation might be subjective. If you want some examples why you might use one or another:\n\nLoadbalancers might not be supported on all infras (e.g. bare metal), node ports might work fine there\nLoadbalancers often generate additional costs\n\netc.", "author": "scholzj", "createdAt": "2020-06-30T12:18:42Z", "path": "documentation/modules/deploying/proc-deploy-setup-external-clients.adoc", "diffHunk": "@@ -0,0 +1,254 @@\n+// Module included in the following assemblies:\n+//\n+// deploying/assembly_deploy-verify.adoc\n+// getting-started.adoc\n+\n+[id='setup-external-clients-{context}']\n+= Setting up access for clients outside of Kubernetes\n+\n+This procedure shows how to configure client access to a Kafka cluster from outside Kubernetes.\n+\n+Using the address of the Kafka cluster, you can provide external access to a client on a different Kubernetes namespace or outside Kubernetes entirely.\n+\n+You configure an external Kafka listener to provide the access.\n+\n+The following external listener types are supported:\n+\n+* `route` to use OpenShift `Route` and the default HAProxy router\n+* `loadbalancer` to use loadbalancer services\n+* `nodeport` to use ports on Kubernetes nodes\n+* `ingress` to use Kubernetes _Ingress_ and the {NginxIngressController}\n+\n+The type chosen depends on your requirements, and your environment and infrastructure.\n+For example, `nodeport` is the least secure, so you might not wish to use it in a production environment.", "originalCommit": "87141fc25a75cf2cfd740968bd2a7b8aeee1fa4c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTY1NDI2Mw==", "url": "https://github.com/strimzi/strimzi-kafka-operator/pull/3147#discussion_r449654263", "bodyText": "I dropped the sentence and replaced with:\n\nThe type chosen depends on your requirements, and your environment and infrastructure.\nFor example, loadbalancers might not be suitable for certain infrastructure, such as bare metal, where node ports provide a better option.", "author": "PaulRMellor", "createdAt": "2020-07-03T16:33:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzYzNzk1OQ=="}], "type": "inlineReview"}, {"oid": "6c90ac9aade2dd07e2f220a98d049c2cbe3c3910", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/6c90ac9aade2dd07e2f220a98d049c2cbe3c3910", "message": "review edits JS\n\nSigned-off-by: prmellor <pmellor@redhat.com>", "committedDate": "2020-07-03T16:34:15Z", "type": "commit"}, {"oid": "b720fb0fb5da8a356fd5752c65c0369acae79a97", "url": "https://github.com/strimzi/strimzi-kafka-operator/commit/b720fb0fb5da8a356fd5752c65c0369acae79a97", "message": "review edit JS\n\nSigned-off-by: prmellor <pmellor@redhat.com>", "committedDate": "2020-07-03T16:43:12Z", "type": "commit"}]}