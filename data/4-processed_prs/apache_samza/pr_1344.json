{"pr_number": 1344, "pr_title": "SAMZA-2510: Incorrect shutdown status due to race between runloop and process callback thread", "pr_createdAt": "2020-04-14T05:30:00Z", "pr_url": "https://github.com/apache/samza/pull/1344", "timeline": [{"oid": "d7a756ca5b593df037368e13729c1449cbdc1ae7", "url": "https://github.com/apache/samza/commit/d7a756ca5b593df037368e13729c1449cbdc1ae7", "message": "SAMZA-2510: Incorrect shutdown status due to race between runloop thread and process callback thread", "committedDate": "2020-04-14T05:23:01Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQ0NTE3MA==", "url": "https://github.com/apache/samza/pull/1344#discussion_r408445170", "bodyText": "Will this test just trigger the throwable != null condition (and not the shutdownNow condition) for exiting the main while loop? It seems like the envelope0 gets submitted and then processing starts, so throwable could get set before ssp0EndOfStream even gets seen. It seems like it depends on when the context switch happens.\nIf it is non-deterministic what the test is actually covering, then maybe just turn this into a testExceptionIsPropagated test (I think this class might need a test for that anyways).\nIf you think it's worth maintaining a test for this race, maybe you could put a latch into TestTask processing somewhere, so you could make sure shutdownNow gets set (you could use RunLoop.shutdown to set the flag) before the throwable gets set.", "author": "cameronlee314", "createdAt": "2020-04-14T21:25:23Z", "path": "samza-core/src/test/java/org/apache/samza/container/TestRunLoop.java", "diffHunk": "@@ -780,4 +782,27 @@ public void testProcessBehaviourWhenAsyncCommitIsEnabled() throws InterruptedExc\n \n     commitLatch.await();\n   }\n+\n+  @Test(expected = SamzaException.class)\n+  public void testExceptionIsPropagatedAfterShutdown() {\n+    SystemConsumers consumerMultiplexer = mock(SystemConsumers.class);\n+    when(consumerMultiplexer.pollIntervalMs()).thenReturn(10);\n+    OffsetManager offsetManager = mock(OffsetManager.class);\n+\n+    TestTask task0 = new TestTask(false, false, false, null);\n+    TaskInstance t0 = createTaskInstance(task0, taskName0, ssp0, offsetManager, consumerMultiplexer);\n+\n+    Map<TaskName, TaskInstance> tasks = ImmutableMap.of(taskName0, t0);\n+\n+    int maxMessagesInFlight = 2;\n+    RunLoop runLoop = new RunLoop(tasks, executor, consumerMultiplexer, maxMessagesInFlight, windowMs, commitMs,\n+        callbackTimeoutMs, maxThrottlingDelayMs, maxIdleMs, containerMetrics,\n+        () -> 0L, false);\n+    when(consumerMultiplexer.choose(false))\n+        .thenReturn(envelope0)\n+        .thenReturn(ssp0EndOfStream)", "originalCommit": "d7a756ca5b593df037368e13729c1449cbdc1ae7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQ4NzQ2Ng==", "url": "https://github.com/apache/samza/pull/1344#discussion_r408487466", "bodyText": "Good point and let me apply your naming suggestion. As far as testing deterministically that exceptions which get set after shutdownNow is set gets propagated, let me do that in a different test by leveraging the custom hook for tests in TestTask", "author": "mynameborat", "createdAt": "2020-04-14T23:08:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQ0NTE3MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQ0NjQ0MQ==", "url": "https://github.com/apache/samza/pull/1344#discussion_r408446441", "bodyText": "Could you please put a comment about why abort has to go before doneProcess?", "author": "cameronlee314", "createdAt": "2020-04-14T21:27:48Z", "path": "samza-core/src/main/java/org/apache/samza/container/RunLoop.java", "diffHunk": "@@ -648,8 +648,8 @@ public void run() {\n     @Override\n     public void onFailure(TaskCallback callback, Throwable t) {\n       try {\n-        state.doneProcess();\n         abort(t);\n+        state.doneProcess();", "originalCommit": "d7a756ca5b593df037368e13729c1449cbdc1ae7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQ0OTc1NA==", "url": "https://github.com/apache/samza/pull/1344#discussion_r408449754", "bodyText": "Is the following scenario possible?\n\nAsync processing has a bad message in flight\nManual call to RunLoop.shutdown\nExit main while loop\nthrowable is still null since async processing is incomplete\nAsync processing throws exception\nContainer will exit with \"success\"", "author": "cameronlee314", "createdAt": "2020-04-14T21:34:22Z", "path": "samza-core/src/main/java/org/apache/samza/container/RunLoop.java", "diffHunk": "@@ -185,6 +180,11 @@ public void run() {\n           containerMetrics.utilization().set(((double) activeNs) / totalNs);\n         }\n       }\n+\n+      if (throwable != null) {", "originalCommit": "d7a756ca5b593df037368e13729c1449cbdc1ae7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQ5MDU3Mg==", "url": "https://github.com/apache/samza/pull/1344#discussion_r408490572", "bodyText": "That is correct. The semantics of manual call to RunLoop.shutdown is loosely defined in the sense that we don't wait for things in flight to finish and trigger shutdown as soon as runloop thread sees the request. So this would be in line with that and may or may not propagate the exception.", "author": "mynameborat", "createdAt": "2020-04-14T23:18:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQ0OTc1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODUxMTU5OA==", "url": "https://github.com/apache/samza/pull/1344#discussion_r408511598", "bodyText": "Could you please add a note somewhere (maybe javadoc and/or PR description) about this scenario? The PR title/description seems to refer to the general shutdown case (which would include RunLoop.shutdown), but it looks like you are focusing on the end-of-stream shutdown case in this PR.", "author": "cameronlee314", "createdAt": "2020-04-15T00:26:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQ0OTc1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAwMjgzOQ==", "url": "https://github.com/apache/samza/pull/1344#discussion_r409002839", "bodyText": "Added a java doc, updated the PR description and also added some details to the JIRA ticket to outline what is this PR targeting.", "author": "mynameborat", "createdAt": "2020-04-15T17:13:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQ0OTc1NA=="}], "type": "inlineReview"}, {"oid": "2a5256867ffafb175f51f5cca807348ed8c4b120", "url": "https://github.com/apache/samza/commit/2a5256867ffafb175f51f5cca807348ed8c4b120", "message": "Address review comments", "committedDate": "2020-04-14T23:08:11Z", "type": "commit"}, {"oid": "c29c3fbf891562d6c7b27e5f850d19a9dee25b05", "url": "https://github.com/apache/samza/commit/c29c3fbf891562d6c7b27e5f850d19a9dee25b05", "message": "Java doc update and consolidated unit tests", "committedDate": "2020-04-15T16:57:52Z", "type": "commit"}, {"oid": "58552ce8860bafe1077811b7a7566d6f4fb43e41", "url": "https://github.com/apache/samza/commit/58552ce8860bafe1077811b7a7566d6f4fb43e41", "message": "Removing the end of stream check since its indeterministic and avoids confusion on the behavior of the test", "committedDate": "2020-04-15T21:01:21Z", "type": "commit"}, {"oid": "d6d30893ea953baf44ca33095b95543154b62415", "url": "https://github.com/apache/samza/commit/d6d30893ea953baf44ca33095b95543154b62415", "message": "Remove unused imports", "committedDate": "2020-04-15T21:03:11Z", "type": "commit"}, {"oid": "4448188be36b5c1a3929aac9fdd7c8b42aba1117", "url": "https://github.com/apache/samza/commit/4448188be36b5c1a3929aac9fdd7c8b42aba1117", "message": "Remove unused code in runloop", "committedDate": "2020-04-15T21:04:51Z", "type": "commit"}]}