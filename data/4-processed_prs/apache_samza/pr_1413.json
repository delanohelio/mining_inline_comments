{"pr_number": 1413, "pr_title": "SAMZA-2578: Excessive trimming during transactional state restore", "pr_createdAt": "2020-08-12T10:50:28Z", "pr_url": "https://github.com/apache/samza/pull/1413", "timeline": [{"oid": "d0028e83b4a8e22f865d217f2e37a640cb72ade5", "url": "https://github.com/apache/samza/commit/d0028e83b4a8e22f865d217f2e37a640cb72ade5", "message": "adding bound checking for transactional state restore trimming", "committedDate": "2020-08-12T10:46:27Z", "type": "commit"}, {"oid": "ba5c9261aa9d93e625304e2989f0aeec772460c7", "url": "https://github.com/apache/samza/commit/ba5c9261aa9d93e625304e2989f0aeec772460c7", "message": "adding bound checking for transactional state restore trimming", "committedDate": "2020-08-12T10:49:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU4MjkyMA==", "url": "https://github.com/apache/samza/pull/1413#discussion_r471582920", "bodyText": "nit: group final fields together.", "author": "mynameborat", "createdAt": "2020-08-17T16:05:37Z", "path": "samza-api/src/main/java/org/apache/samza/system/BoundedSSPIterator.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.samza.system;\n+\n+import java.util.ArrayDeque;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.NoSuchElementException;\n+import java.util.Queue;\n+import java.util.Set;\n+import org.apache.samza.SamzaException;\n+\n+/**\n+ * Iterates over messages in the provided changelog {@link SystemStreamPartition} using the provided\n+ * {@link SystemConsumer} until all messages with offsets up to and including the bound offset have been consumed.\n+ */\n+public class BoundedSSPIterator {\n+\n+  protected final SystemAdmin admin;\n+\n+  private final SystemConsumer systemConsumer;\n+  private final String endOffset;\n+  private final Set<SystemStreamPartition> fetchSet;", "originalCommit": "ba5c9261aa9d93e625304e2989f0aeec772460c7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU3NTAyNw==", "url": "https://github.com/apache/samza/pull/1413#discussion_r472575027", "bodyText": "So remove line 38? I separated because of private vs protected.", "author": "bkonold", "createdAt": "2020-08-19T01:01:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU4MjkyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU4MTUyOA==", "url": "https://github.com/apache/samza/pull/1413#discussion_r472581528", "bodyText": "sure! then add a new line between private final & private fields?", "author": "mynameborat", "createdAt": "2020-08-19T01:25:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU4MjkyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU4MjU1OQ==", "url": "https://github.com/apache/samza/pull/1413#discussion_r472582559", "bodyText": "sure. will do that.", "author": "bkonold", "createdAt": "2020-08-19T01:29:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU4MjkyMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU4MzcxMQ==", "url": "https://github.com/apache/samza/pull/1413#discussion_r471583711", "bodyText": "s/changelog/input|topic", "author": "mynameborat", "createdAt": "2020-08-17T16:06:56Z", "path": "samza-api/src/main/java/org/apache/samza/system/BoundedSSPIterator.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.samza.system;\n+\n+import java.util.ArrayDeque;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.NoSuchElementException;\n+import java.util.Queue;\n+import java.util.Set;\n+import org.apache.samza.SamzaException;\n+\n+/**\n+ * Iterates over messages in the provided changelog {@link SystemStreamPartition} using the provided", "originalCommit": "ba5c9261aa9d93e625304e2989f0aeec772460c7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU3NjM0Mw==", "url": "https://github.com/apache/samza/pull/1413#discussion_r472576343", "bodyText": "I'll just remove the word altogether since I link to SSP definition", "author": "bkonold", "createdAt": "2020-08-19T01:06:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU4MzcxMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU4NDU3MQ==", "url": "https://github.com/apache/samza/pull/1413#discussion_r471584571", "bodyText": "looks like it only allows feeding one SSP. why do we need a set?", "author": "mynameborat", "createdAt": "2020-08-17T16:08:11Z", "path": "samza-api/src/main/java/org/apache/samza/system/BoundedSSPIterator.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.samza.system;\n+\n+import java.util.ArrayDeque;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.NoSuchElementException;\n+import java.util.Queue;\n+import java.util.Set;\n+import org.apache.samza.SamzaException;\n+\n+/**\n+ * Iterates over messages in the provided changelog {@link SystemStreamPartition} using the provided\n+ * {@link SystemConsumer} until all messages with offsets up to and including the bound offset have been consumed.\n+ */\n+public class BoundedSSPIterator {\n+\n+  protected final SystemAdmin admin;\n+\n+  private final SystemConsumer systemConsumer;\n+  private final String endOffset;\n+  private final Set<SystemStreamPartition> fetchSet;\n+  private Queue<IncomingMessageEnvelope> peeks;\n+\n+  public BoundedSSPIterator(SystemConsumer systemConsumer,\n+      SystemStreamPartition systemStreamPartition, String endOffset, SystemAdmin admin) {\n+    this.systemConsumer = systemConsumer;\n+    this.endOffset = endOffset;\n+    this.admin = admin;\n+    this.fetchSet = new HashSet<>();\n+    this.fetchSet.add(systemStreamPartition);", "originalCommit": "ba5c9261aa9d93e625304e2989f0aeec772460c7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU3NDY3Nw==", "url": "https://github.com/apache/samza/pull/1413#discussion_r472574677", "bodyText": "Good point. I just pulled this out of ChangelogSSPIterator. The API for SystemConsume.poll does call for a set, so having a set here would prevent redundant object creation if we were to store a single SSP as member and create a set every time we call poll.\nI don't see a problem keeping this as a set here, but maybe we could change the initialization to be a singleton set / immutable set?", "author": "bkonold", "createdAt": "2020-08-19T01:00:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU4NDU3MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU4NTU0OQ==", "url": "https://github.com/apache/samza/pull/1413#discussion_r471585549", "bodyText": "Can we add a pre-check on the endOffset as not null in the constructor? Or, do you intend have this as a UnBoundedSSPIterator in the event no endOffset? If latter, please update the java docs to reflect the contract.", "author": "mynameborat", "createdAt": "2020-08-17T16:09:50Z", "path": "samza-api/src/main/java/org/apache/samza/system/BoundedSSPIterator.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.samza.system;\n+\n+import java.util.ArrayDeque;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.NoSuchElementException;\n+import java.util.Queue;\n+import java.util.Set;\n+import org.apache.samza.SamzaException;\n+\n+/**\n+ * Iterates over messages in the provided changelog {@link SystemStreamPartition} using the provided\n+ * {@link SystemConsumer} until all messages with offsets up to and including the bound offset have been consumed.\n+ */\n+public class BoundedSSPIterator {\n+\n+  protected final SystemAdmin admin;\n+\n+  private final SystemConsumer systemConsumer;\n+  private final String endOffset;\n+  private final Set<SystemStreamPartition> fetchSet;\n+  private Queue<IncomingMessageEnvelope> peeks;\n+\n+  public BoundedSSPIterator(SystemConsumer systemConsumer,\n+      SystemStreamPartition systemStreamPartition, String endOffset, SystemAdmin admin) {\n+    this.systemConsumer = systemConsumer;\n+    this.endOffset = endOffset;\n+    this.admin = admin;\n+    this.fetchSet = new HashSet<>();\n+    this.fetchSet.add(systemStreamPartition);\n+    this.peeks = new ArrayDeque<>();\n+  }\n+\n+  public boolean hasNext() {\n+    refresh();\n+\n+    return peeks.size() > 0 && (endOffset == null || admin.offsetComparator(peeks.peek().getOffset(), endOffset) <= 0);", "originalCommit": "ba5c9261aa9d93e625304e2989f0aeec772460c7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU3NTI2NQ==", "url": "https://github.com/apache/samza/pull/1413#discussion_r472575265", "bodyText": "I left null as acceptable so we wouldn't need to unnecessarily save the current changelog offsets within NonTransactionalStateTaskRestoreManager. I'll modify the javadoc to reflect this - thanks for point out.", "author": "bkonold", "createdAt": "2020-08-19T01:02:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU4NTU0OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTYwNTg5OQ==", "url": "https://github.com/apache/samza/pull/1413#discussion_r471605899", "bodyText": "nit: can we change this to non-star imports?", "author": "mynameborat", "createdAt": "2020-08-17T16:45:10Z", "path": "samza-api/src/test/java/org/apache/samza/system/TestBoundedSSPIterator.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.samza.system;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.NoSuchElementException;\n+import org.apache.samza.Partition;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.mockito.stubbing.OngoingStubbing;\n+\n+import static org.mockito.Mockito.*;", "originalCommit": "ba5c9261aa9d93e625304e2989f0aeec772460c7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU3NTM4MA==", "url": "https://github.com/apache/samza/pull/1413#discussion_r472575380", "bodyText": "Sure", "author": "bkonold", "createdAt": "2020-08-19T01:02:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTYwNTg5OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTcwNzEwMA==", "url": "https://github.com/apache/samza/pull/1413#discussion_r471707100", "bodyText": "Can you also implement Iterator to enable callers user it with java iterator interface & semantics?", "author": "mynameborat", "createdAt": "2020-08-17T18:46:55Z", "path": "samza-api/src/main/java/org/apache/samza/system/BoundedSSPIterator.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.samza.system;\n+\n+import java.util.ArrayDeque;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.NoSuchElementException;\n+import java.util.Queue;\n+import java.util.Set;\n+import org.apache.samza.SamzaException;\n+\n+/**\n+ * Iterates over messages in the provided changelog {@link SystemStreamPartition} using the provided\n+ * {@link SystemConsumer} until all messages with offsets up to and including the bound offset have been consumed.\n+ */\n+public class BoundedSSPIterator {", "originalCommit": "ba5c9261aa9d93e625304e2989f0aeec772460c7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU3NTQ3NQ==", "url": "https://github.com/apache/samza/pull/1413#discussion_r472575475", "bodyText": "Ah, yes.", "author": "bkonold", "createdAt": "2020-08-19T01:02:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTcwNzEwMA=="}], "type": "inlineReview"}, {"oid": "0c5c9c6ccdf49d524e07dc10db718545011bbb2d", "url": "https://github.com/apache/samza/commit/0c5c9c6ccdf49d524e07dc10db718545011bbb2d", "message": "responding to review feedback", "committedDate": "2020-08-19T01:18:34Z", "type": "commit"}, {"oid": "cb5a0d678fbbf7b37e0900389d206c7d6dab6883", "url": "https://github.com/apache/samza/commit/cb5a0d678fbbf7b37e0900389d206c7d6dab6883", "message": "add line between private and private final", "committedDate": "2020-08-19T01:29:39Z", "type": "commit"}]}