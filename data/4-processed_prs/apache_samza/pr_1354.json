{"pr_number": 1354, "pr_title": "SAMZA-2518: Update JobCoordinatorLaunchUtil to fetch launch config from metadata store.", "pr_createdAt": "2020-04-30T22:06:46Z", "pr_url": "https://github.com/apache/samza/pull/1354", "timeline": [{"oid": "5ad0273e213f310e7a2a609b36bd3b8217459be7", "url": "https://github.com/apache/samza/commit/5ad0273e213f310e7a2a609b36bd3b8217459be7", "message": "SAMZA-2518: Update JobCoordinatorLaunchUtil to fetch launch config from metadata store.\n\nDesign:\nhttps://cwiki.apache.org/confluence/display/SAMZA/SEP-23%3A+Simplify+Job+Runner\n\nChanges:\n1. Add readLaunchConfigFromCoordinatorStream() in CoordinatorStreamUtil\n2. Add an extra step in JobCoordinatorLaunchUtil to invoke readLaunchConfigFromCoordinatorStream()\n\nAPI Changes:\nNone\n\nUpgrade Instructions:\nNone\n\nUsage Instructions:\nNone\n\nTests:\nUnit Tests", "committedDate": "2020-04-30T22:02:38Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY3MDQ0OA==", "url": "https://github.com/apache/samza/pull/1354#discussion_r418670448", "bodyText": "nit pick: new CoordinatorStreamStore(CoordinatorStreamUtil.buildCoordinatorStreamConfig(fullConfig), new MetricsRegistryMap());", "author": "rmatharu", "createdAt": "2020-05-01T18:21:14Z", "path": "samza-core/src/main/java/org/apache/samza/clustermanager/JobCoordinatorLaunchUtil.java", "diffHunk": "@@ -57,14 +58,17 @@ public static void run(SamzaApplication app, Config config) {\n       throw new SamzaException(\"Only support single remote job is supported.\");\n     }\n \n-    Config finalConfig = jobConfigs.get(0);\n+    Config fullConfig = jobConfigs.get(0);\n+    MetricsRegistryMap metrics = new MetricsRegistryMap();\n+    MetadataStore", "originalCommit": "5ad0273e213f310e7a2a609b36bd3b8217459be7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY3ODM3NA==", "url": "https://github.com/apache/samza/pull/1354#discussion_r418678374", "bodyText": "Cannot do it because the same MetricsRegistryMap needs to be passed in ClusterBasedJobCoordinator's constructor as well.", "author": "kw2542", "createdAt": "2020-05-01T18:38:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY3MDQ0OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY3MTA1OQ==", "url": "https://github.com/apache/samza/pull/1354#discussion_r418671059", "bodyText": "Could we use the\npublic boolean isAutosizingConfig(String configParam)\nmethod in JobConfig for this?", "author": "rmatharu", "createdAt": "2020-05-01T18:22:29Z", "path": "samza-core/src/main/java/org/apache/samza/config/JobConfig.java", "diffHunk": "@@ -132,7 +132,7 @@\n \n   // Auto-sizing related configs that take precedence over respective sizing confings job.container.count, etc,\n   // *only* when job.autosizing.enabled is true. Otherwise current behavior is maintained.\n-  private static final String JOB_AUTOSIZING_CONFIG_PREFIX = \"job.autosizing.\"; // used to determine if a config is related to autosizing\n+  public static final String JOB_AUTOSIZING_CONFIG_PREFIX = \"job.autosizing.\"; // used to determine if a config is related to autosizing", "originalCommit": "5ad0273e213f310e7a2a609b36bd3b8217459be7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY3ODA3MQ==", "url": "https://github.com/apache/samza/pull/1354#discussion_r418678071", "bodyText": "Updated", "author": "kw2542", "createdAt": "2020-05-01T18:38:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY3MTA1OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY3NTYxMA==", "url": "https://github.com/apache/samza/pull/1354#discussion_r418675610", "bodyText": "should we call it readAutosizingConfigs?", "author": "rmatharu", "createdAt": "2020-05-01T18:32:20Z", "path": "samza-core/src/main/scala/org/apache/samza/util/CoordinatorStreamUtil.scala", "diffHunk": "@@ -110,13 +111,34 @@ object CoordinatorStreamUtil extends Logging {\n       jobConfig.getJobId)\n   }\n \n+  /**\n+   * Reads and returns launch config persisted in coordinator stream. Only job.auto sizing configs are currently supported.\n+   * @param config full job config\n+   * @param metadataStore an instance of the instantiated MetadataStore\n+   * @return empty config if auto sizing is disabled, otherwise auto sizing related configs.\n+   */\n+  def readLaunchConfigFromCoordinatorStream(config: Config, metadataStore: MetadataStore): Config = {", "originalCommit": "5ad0273e213f310e7a2a609b36bd3b8217459be7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY3OTQyNQ==", "url": "https://github.com/apache/samza/pull/1354#discussion_r418679425", "bodyText": "We can make it specific to autosizing too, or we can make it generic so we may expand this method to include more when necessary, which do you prefer?", "author": "kw2542", "createdAt": "2020-05-01T18:41:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY3NTYxMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY3NjQ0MQ==", "url": "https://github.com/apache/samza/pull/1354#discussion_r418676441", "bodyText": "Could be simplified along the lines of\nJobConfig jobConfig = new JobConfig(config);\nlaunchConfig = config.map().filter(jobConfig.isAutosizingConfig(key))", "author": "rmatharu", "createdAt": "2020-05-01T18:34:18Z", "path": "samza-core/src/main/scala/org/apache/samza/util/CoordinatorStreamUtil.scala", "diffHunk": "@@ -110,13 +111,34 @@ object CoordinatorStreamUtil extends Logging {\n       jobConfig.getJobId)\n   }\n \n+  /**\n+   * Reads and returns launch config persisted in coordinator stream. Only job.auto sizing configs are currently supported.\n+   * @param config full job config\n+   * @param metadataStore an instance of the instantiated MetadataStore\n+   * @return empty config if auto sizing is disabled, otherwise auto sizing related configs.\n+   */\n+  def readLaunchConfigFromCoordinatorStream(config: Config, metadataStore: MetadataStore): Config = {\n+    if (!config.getBoolean(JobConfig.JOB_AUTOSIZING_ENABLED, false)) {\n+      new MapConfig()\n+    } else {\n+      val config = readConfigFromCoordinatorStream(metadataStore)\n+      val launchConfig: util.Map[String, String] = new util.HashMap[String, String]()\n+      for ((key:String, value:String) <- config.asScala) {\n+        if (key.startsWith(JobConfig.JOB_AUTOSIZING_CONFIG_PREFIX)) {", "originalCommit": "5ad0273e213f310e7a2a609b36bd3b8217459be7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY3OTA5MQ==", "url": "https://github.com/apache/samza/pull/1354#discussion_r418679091", "bodyText": "I was planning to do it, but it seems that this is in Scala and I cannot do\nconfig.entrySet().stream().map().collect()\ndo you know how to do it in scala?", "author": "kw2542", "createdAt": "2020-05-01T18:40:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY3NjQ0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTc2MDU1Mw==", "url": "https://github.com/apache/samza/pull/1354#discussion_r419760553", "bodyText": "How about\nlaunchConfig = config.asScala.filterKeys(x => JobConfig.isAutosizingConfig(x))", "author": "rmatharu", "createdAt": "2020-05-04T22:13:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY3NjQ0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTc4NTI3Nw==", "url": "https://github.com/apache/samza/pull/1354#discussion_r419785277", "bodyText": "This is great!", "author": "kw2542", "createdAt": "2020-05-04T23:23:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY3NjQ0MQ=="}], "type": "inlineReview"}, {"oid": "142087e76731230570115c6079b2846e815aa47e", "url": "https://github.com/apache/samza/commit/142087e76731230570115c6079b2846e815aa47e", "message": "Update to address comments", "committedDate": "2020-05-01T19:35:30Z", "type": "commit"}, {"oid": "759336d37d8bc90aebebb0b2f76c9fac3ed7400d", "url": "https://github.com/apache/samza/commit/759336d37d8bc90aebebb0b2f76c9fac3ed7400d", "message": "Simplify implementation", "committedDate": "2020-05-04T23:23:59Z", "type": "commit"}]}