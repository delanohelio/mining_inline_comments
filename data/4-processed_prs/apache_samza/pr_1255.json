{"pr_number": 1255, "pr_title": "SAMZA-2429: Update LocalApplicatoinRunner to load full job config from config loader when present.", "pr_createdAt": "2020-01-17T23:55:32Z", "pr_url": "https://github.com/apache/samza/pull/1255", "timeline": [{"oid": "88d876f956ac030dc73dd6d7dec03b27dae15643", "url": "https://github.com/apache/samza/commit/88d876f956ac030dc73dd6d7dec03b27dae15643", "message": "SAMZA-2429: Update LocalApplicatoinRunner to load full job config from config loader when present.\n\nDesign:\nhttps://cwiki.apache.org/confluence/display/SAMZA/SEP-23%3A+Simplify+Job+Runner\n\nChanges:\n1. Update unit test only public constructor of LocalApplicationRunner to take SamzaApplication and Config as well to be consistent with other constructors.\n2. Update private constructor of LocalApplicationRunner to take SamzaApplication and Config.\n3. Update private constructor of LocalApplicationRunner to load full job config when config loader is present.\n\nAPI Changes:\nN/A. This is part of a series PRs, detailed information will be provided in the last/main PR.\n\nUpgrade Instructions:\nThis is part of a series PRs, detailed information will be provided in the last/main PR.\n\nUsage Instructions:\nThis is part of a series PRs, detailed information will be provided in the last/main PR.\n\nTests\nUnit tests", "committedDate": "2020-01-17T23:53:01Z", "type": "commit"}, {"oid": "20cd9489454a8fe06cb55770a2d0992862b97cc0", "url": "https://github.com/apache/samza/commit/20cd9489454a8fe06cb55770a2d0992862b97cc0", "message": "Fix unused imports", "committedDate": "2020-01-17T23:54:31Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU2MjMwNA==", "url": "https://github.com/apache/samza/pull/1255#discussion_r371562304", "bodyText": "In the old flow, getCoordinationUtils seemed to be called with the full config. In the new flow, getCoordinationUtils will get called with the initial config, not the full config. Do you need to load the config before calling getCoordinationUtils?", "author": "cameronlee314", "createdAt": "2020-01-28T00:49:32Z", "path": "samza-core/src/main/java/org/apache/samza/runtime/LocalApplicationRunner.java", "diffHunk": "@@ -111,27 +112,35 @@ public LocalApplicationRunner(SamzaApplication app, Config config) {\n    * @param metadataStoreFactory the instance of {@link MetadataStoreFactory} to read and write to coordinator stream.\n    */\n   public LocalApplicationRunner(SamzaApplication app, Config config, MetadataStoreFactory metadataStoreFactory) {\n-    this(ApplicationDescriptorUtil.getAppDescriptor(app, config), getCoordinationUtils(config), metadataStoreFactory);\n+    this(app, config, getCoordinationUtils(config), metadataStoreFactory);", "originalCommit": "20cd9489454a8fe06cb55770a2d0992862b97cc0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU3NzYxMw==", "url": "https://github.com/apache/samza/pull/1255#discussion_r371577613", "bodyText": "Very good question, and nice catch. You are right, both getCoordinationUtils as well as getDefaultCoordinatorStreamStoreFactory need to be updated to load full config first if applicable.", "author": "kw2542", "createdAt": "2020-01-28T01:56:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU2MjMwNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU2MjQ2NA==", "url": "https://github.com/apache/samza/pull/1255#discussion_r371562464", "bodyText": "I guess this constructor is just for testing, but it does have a similar change as above where config is now just the initial config, but before it was the full config.", "author": "cameronlee314", "createdAt": "2020-01-28T00:50:08Z", "path": "samza-core/src/main/java/org/apache/samza/runtime/LocalApplicationRunner.java", "diffHunk": "@@ -111,27 +112,35 @@ public LocalApplicationRunner(SamzaApplication app, Config config) {\n    * @param metadataStoreFactory the instance of {@link MetadataStoreFactory} to read and write to coordinator stream.\n    */\n   public LocalApplicationRunner(SamzaApplication app, Config config, MetadataStoreFactory metadataStoreFactory) {\n-    this(ApplicationDescriptorUtil.getAppDescriptor(app, config), getCoordinationUtils(config), metadataStoreFactory);\n+    this(app, config, getCoordinationUtils(config), metadataStoreFactory);\n   }\n \n   /**\n    * Constructor only used in unit test to allow injection of {@link LocalJobPlanner}\n    */\n   @VisibleForTesting\n-  LocalApplicationRunner(ApplicationDescriptorImpl<? extends ApplicationDescriptor> appDesc, Optional<CoordinationUtils> coordinationUtils) {\n-    this(appDesc, coordinationUtils, getDefaultCoordinatorStreamStoreFactory(new JobConfig(appDesc.getConfig())));\n+  LocalApplicationRunner(SamzaApplication app, Config config, Optional<CoordinationUtils> coordinationUtils) {\n+    this(app, config, coordinationUtils, getDefaultCoordinatorStreamStoreFactory(new JobConfig(config)));", "originalCommit": "20cd9489454a8fe06cb55770a2d0992862b97cc0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU3Nzc0OQ==", "url": "https://github.com/apache/samza/pull/1255#discussion_r371577749", "bodyText": "Updated.", "author": "kw2542", "createdAt": "2020-01-28T01:56:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU2MjQ2NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU2MzA0MA==", "url": "https://github.com/apache/samza/pull/1255#discussion_r371563040", "bodyText": "Is this considered a semantic API change? Before, it seems like config was always the full config, but now you are allowing the initial config with only config loader properties.\nIt's ok to have this be an API change, but just wanted to make sure you note that where necessary.", "author": "cameronlee314", "createdAt": "2020-01-28T00:52:21Z", "path": "samza-core/src/main/java/org/apache/samza/runtime/LocalApplicationRunner.java", "diffHunk": "@@ -111,27 +112,35 @@ public LocalApplicationRunner(SamzaApplication app, Config config) {\n    * @param metadataStoreFactory the instance of {@link MetadataStoreFactory} to read and write to coordinator stream.\n    */\n   public LocalApplicationRunner(SamzaApplication app, Config config, MetadataStoreFactory metadataStoreFactory) {\n-    this(ApplicationDescriptorUtil.getAppDescriptor(app, config), getCoordinationUtils(config), metadataStoreFactory);\n+    this(app, config, getCoordinationUtils(config), metadataStoreFactory);\n   }\n \n   /**\n    * Constructor only used in unit test to allow injection of {@link LocalJobPlanner}\n    */\n   @VisibleForTesting\n-  LocalApplicationRunner(ApplicationDescriptorImpl<? extends ApplicationDescriptor> appDesc, Optional<CoordinationUtils> coordinationUtils) {\n-    this(appDesc, coordinationUtils, getDefaultCoordinatorStreamStoreFactory(new JobConfig(appDesc.getConfig())));\n+  LocalApplicationRunner(SamzaApplication app, Config config, Optional<CoordinationUtils> coordinationUtils) {\n+    this(app, config, coordinationUtils, getDefaultCoordinatorStreamStoreFactory(new JobConfig(config)));\n   }\n \n   private LocalApplicationRunner(", "originalCommit": "20cd9489454a8fe06cb55770a2d0992862b97cc0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU3ODM0Ng==", "url": "https://github.com/apache/samza/pull/1255#discussion_r371578346", "bodyText": "Good question, I would consider changes in samza-api module to be public facing API changes, and changes in samza-core to be internal API changes, which can be less risky.\nI will update the PR description to explicitly call out the constructor changes, also this is a backward compatible API change.", "author": "kw2542", "createdAt": "2020-01-28T01:59:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU2MzA0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU4NDA3Mg==", "url": "https://github.com/apache/samza/pull/1255#discussion_r371584072", "bodyText": "LocalApplicationRunner is kind of in that middle layer: it's not in samza-api and not quite a direct API, but it also can get used by users running standalone and it can be specified in configs as the \"app.runner.class\".", "author": "cameronlee314", "createdAt": "2020-01-28T02:29:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU2MzA0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU4NDE5Ng==", "url": "https://github.com/apache/samza/pull/1255#discussion_r371584196", "bodyText": "In my opinion, LocalApplicationRunner doesn't truly belong in samza-core, but it had to be somewhere...", "author": "cameronlee314", "createdAt": "2020-01-28T02:29:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU2MzA0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTk5MDc1OQ==", "url": "https://github.com/apache/samza/pull/1255#discussion_r371990759", "bodyText": "Got you, in addition to note this change in PR's description, anywhere else we should notify this change?", "author": "kw2542", "createdAt": "2020-01-28T18:51:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU2MzA0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjAzMTU2Nw==", "url": "https://github.com/apache/samza/pull/1255#discussion_r372031567", "bodyText": "Someone will need to remember to add this as a release note, and if we have information in the user guide about this flow, then that will need to be updated.", "author": "cameronlee314", "createdAt": "2020-01-28T20:13:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU2MzA0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjEyNTI5MA==", "url": "https://github.com/apache/samza/pull/1255#discussion_r372125290", "bodyText": "I will make sure this to be added in the OSS release when it is out and I will go through our user guide to see if we have any thing about this flow.", "author": "kw2542", "createdAt": "2020-01-28T23:57:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU2MzA0MA=="}], "type": "inlineReview"}, {"oid": "d62aa7de229de2f037a1369226e759d799b95d0c", "url": "https://github.com/apache/samza/commit/d62aa7de229de2f037a1369226e759d799b95d0c", "message": "Update getDefaultCoordinatorStreamStoreFactory and getCoordinationUtils to support initial config", "committedDate": "2020-01-28T02:01:47Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjAzMzEwNw==", "url": "https://github.com/apache/samza/pull/1255#discussion_r372033107", "bodyText": "Should we avoid multiple calls to ConfigUtil.loadConfig? You already call it in getApplicationDescriptor.\nIf the config loader logic is complex/heavy (e.g. makes remote calls), then that is going to result in inefficient calls.", "author": "cameronlee314", "createdAt": "2020-01-28T20:16:41Z", "path": "samza-core/src/main/java/org/apache/samza/runtime/LocalApplicationRunner.java", "diffHunk": "@@ -111,29 +112,41 @@ public LocalApplicationRunner(SamzaApplication app, Config config) {\n    * @param metadataStoreFactory the instance of {@link MetadataStoreFactory} to read and write to coordinator stream.\n    */\n   public LocalApplicationRunner(SamzaApplication app, Config config, MetadataStoreFactory metadataStoreFactory) {\n-    this(ApplicationDescriptorUtil.getAppDescriptor(app, config), getCoordinationUtils(config), metadataStoreFactory);\n+    this(app, config, getCoordinationUtils(config), metadataStoreFactory);\n   }\n \n   /**\n    * Constructor only used in unit test to allow injection of {@link LocalJobPlanner}\n    */\n   @VisibleForTesting\n-  LocalApplicationRunner(ApplicationDescriptorImpl<? extends ApplicationDescriptor> appDesc, Optional<CoordinationUtils> coordinationUtils) {\n-    this(appDesc, coordinationUtils, getDefaultCoordinatorStreamStoreFactory(new JobConfig(appDesc.getConfig())));\n+  LocalApplicationRunner(SamzaApplication app, Config config, Optional<CoordinationUtils> coordinationUtils) {\n+    this(app, config, coordinationUtils, getDefaultCoordinatorStreamStoreFactory(new JobConfig(config)));\n   }\n \n   private LocalApplicationRunner(\n-      ApplicationDescriptorImpl<? extends ApplicationDescriptor> appDesc,\n+      SamzaApplication app,\n+      Config config,\n       Optional<CoordinationUtils> coordinationUtils,\n       MetadataStoreFactory metadataStoreFactory) {\n-    this.appDesc = appDesc;\n+    this.appDesc = getApplicationDescriptor(app, config);\n     this.isAppModeBatch = isAppModeBatch(appDesc.getConfig());\n     this.coordinationUtils = coordinationUtils;\n     this.metadataStoreFactory = Optional.ofNullable(metadataStoreFactory);\n   }\n \n+  @VisibleForTesting\n+  static ApplicationDescriptorImpl<? extends ApplicationDescriptor> getApplicationDescriptor(SamzaApplication app, Config config) {\n+    return new JobConfig(config).getConfigLoaderFactory().isPresent()\n+        ? ApplicationDescriptorUtil.getAppDescriptor(app, ConfigUtil.loadConfig(config))\n+        : ApplicationDescriptorUtil.getAppDescriptor(app, config);\n+  }\n+\n   @VisibleForTesting\n   static MetadataStoreFactory getDefaultCoordinatorStreamStoreFactory(JobConfig jobConfig) {\n+    if (jobConfig.getConfigLoaderFactory().isPresent()) {\n+      jobConfig = new JobConfig(ConfigUtil.loadConfig(jobConfig));\n+    }", "originalCommit": "d62aa7de229de2f037a1369226e759d799b95d0c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjEyNDg4OQ==", "url": "https://github.com/apache/samza/pull/1255#discussion_r372124889", "bodyText": "Ideally yes, in order to achieve this, each constructor needs to have some if checks, thus it cannot invoke another constructor anymore. This will return in all constructors follows its own logic instead of merging into a single private constructor. Do you think this is a good trade off?", "author": "kw2542", "createdAt": "2020-01-28T23:56:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjAzMzEwNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjEyOTI2Ng==", "url": "https://github.com/apache/samza/pull/1255#discussion_r372129266", "bodyText": "I do think it is reasonable trade-off.\nOne of the challenges is that the LocalApplicationRunner(SamzaApplication app, Config config) constructor is overloaded semantically. In one case, config is already the full config, and in another case config is a partial config which needs to be loaded. And then it may seem like we can't use a single common constructor due to the need to use the full config in the constructor arguments. I do still think there is a way to share a common constructor: instead of passing individual arguments, create a LocalApplicationRunnerContext which contains all of the arguments, and then you can build that other object based on what is given to you.", "author": "cameronlee314", "createdAt": "2020-01-29T00:12:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjAzMzEwNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjEzOTQ1Mw==", "url": "https://github.com/apache/samza/pull/1255#discussion_r372139453", "bodyText": "I like the idea of LocalApplicationRunnerContext, will update the PR.", "author": "kw2542", "createdAt": "2020-01-29T00:52:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjAzMzEwNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjAzMzIzOA==", "url": "https://github.com/apache/samza/pull/1255#discussion_r372033238", "bodyText": "Same as above about multiple calls to loadConfig.", "author": "cameronlee314", "createdAt": "2020-01-28T20:16:55Z", "path": "samza-core/src/main/java/org/apache/samza/runtime/LocalApplicationRunner.java", "diffHunk": "@@ -150,6 +163,10 @@ static MetadataStoreFactory getDefaultCoordinatorStreamStoreFactory(JobConfig jo\n   }\n \n   private static Optional<CoordinationUtils> getCoordinationUtils(Config config) {\n+    if (new JobConfig(config).getConfigLoaderFactory().isPresent()) {\n+      config = ConfigUtil.loadConfig(config);\n+    }", "originalCommit": "d62aa7de229de2f037a1369226e759d799b95d0c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE0OTE3Mg==", "url": "https://github.com/apache/samza/pull/1255#discussion_r372149172", "bodyText": "Updated", "author": "kw2542", "createdAt": "2020-01-29T01:32:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjAzMzIzOA=="}], "type": "inlineReview"}, {"oid": "3e337c4e6b0854406669c535790fd95d966fd9b9", "url": "https://github.com/apache/samza/commit/3e337c4e6b0854406669c535790fd95d966fd9b9", "message": "Add LocalApplicationRunnerContext to consolidate constructors", "committedDate": "2020-01-29T01:04:26Z", "type": "commit"}, {"oid": "93b65661eabde66e0d8c4b80d1d46f7f13e1233e", "url": "https://github.com/apache/samza/commit/93b65661eabde66e0d8c4b80d1d46f7f13e1233e", "message": "Switch to config", "committedDate": "2020-01-29T01:05:40Z", "type": "commit"}, {"oid": "dba8e9f16a689b3847ce1c9d39ff335865088ae9", "url": "https://github.com/apache/samza/commit/dba8e9f16a689b3847ce1c9d39ff335865088ae9", "message": "Fix imports", "committedDate": "2020-01-29T18:23:12Z", "type": "commit"}, {"oid": "b808017ec37ebe0951c9881ff3043a9be338c3ee", "url": "https://github.com/apache/samza/commit/b808017ec37ebe0951c9881ff3043a9be338c3ee", "message": "Fix the bug in unit tests\n\nassertNull should be mapped to assertTrue\nassertNotNull should be mapped to assertFalse", "committedDate": "2020-01-30T00:58:55Z", "type": "commit"}]}