{"pr_number": 1368, "pr_title": "SAMZA-2532: Refactor MetricsSnapshotReporter and MetricsSnapshotReporterFactory", "pr_createdAt": "2020-05-27T06:12:19Z", "pr_url": "https://github.com/apache/samza/pull/1368", "timeline": [{"oid": "4bbf276c6118e6ad9d4801023ac2c90472c0898a", "url": "https://github.com/apache/samza/commit/4bbf276c6118e6ad9d4801023ac2c90472c0898a", "message": "SAMZA-2532: Refactor MetricsSnapshotReporter and MetricsSnapshotReporterFactory\n\nChanges:\nThe refactoring done to make the reporter stable when\nexceptions are encountered. The patch also breaks down the\nrun() method in the MetricsSnapshotReporter into smaller\noverridable pieces to make it more extendable/re-usable.\n\nTests: None\nAPI Changes: None\nUpgrade Instructions: None\nUsage Instructions: None", "committedDate": "2020-05-27T05:46:13Z", "type": "commit"}, {"oid": "0c712ae0122c4bfb12ba81adee3e0ed5e7adf386", "url": "https://github.com/apache/samza/commit/0c712ae0122c4bfb12ba81adee3e0ed5e7adf386", "message": "Simplify changes", "committedDate": "2020-05-27T06:49:19Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTMwODQyOA==", "url": "https://github.com/apache/samza/pull/1368#discussion_r431308428", "bodyText": "Unrelated to PR but useful: Can you change the info log below \"Blacklisted metric %s because it matched ...\" to either only be logged once with all metrics or logged at debug?", "author": "prateekm", "createdAt": "2020-05-27T17:13:19Z", "path": "samza-core/src/main/scala/org/apache/samza/metrics/reporter/MetricsSnapshotReporter.scala", "diffHunk": "@@ -160,12 +171,9 @@ class MetricsSnapshotReporter(\n         }\n       }\n     }\n-\n-\n     debug(\"Finished flushing metrics.\")\n   }\n \n-", "originalCommit": "0c712ae0122c4bfb12ba81adee3e0ed5e7adf386", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM1OTE3MA==", "url": "https://github.com/apache/samza/pull/1368#discussion_r431359170", "bodyText": "Makes sense. Fixed the log level.", "author": "abhishekshivanna", "createdAt": "2020-05-27T18:35:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTMwODQyOA=="}], "type": "inlineReview"}, {"oid": "7fa9bd204b75f78d20ac19d9c7d6ddc6c25d46be", "url": "https://github.com/apache/samza/commit/7fa9bd204b75f78d20ac19d9c7d6ddc6c25d46be", "message": "Change blacklist log level to debug", "committedDate": "2020-05-27T18:33:51Z", "type": "commit"}, {"oid": "b5ae87bb7c2e8d52128583b9f390ce9062c738ee", "url": "https://github.com/apache/samza/commit/b5ae87bb7c2e8d52128583b9f390ce9062c738ee", "message": "Exposing system producer from reporter", "committedDate": "2020-05-27T19:33:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQ0MDM5Mg==", "url": "https://github.com/apache/samza/pull/1368#discussion_r431440392", "bodyText": "why is this pollingInterval instead of reportingInterval? makes me think we poll for metrics at this interval but then the error statement above which says \"Error reporting ... pollingInterval\" is confusing.", "author": "mynameborat", "createdAt": "2020-05-27T21:02:51Z", "path": "samza-core/src/main/scala/org/apache/samza/metrics/reporter/MetricsSnapshotReporterFactory.scala", "diffHunk": "@@ -77,15 +71,48 @@ class MetricsSnapshotReporterFactory extends MetricsReporterFactory with Logging\n     } else {\n       new MetricsSnapshotSerdeV2\n     }\n-\n     info(\"Got serde %s.\" format serde)\n+    serde\n+  }\n+\n \n-    val pollingInterval: Int = metricsConfig.getMetricsSnapshotReporterInterval(name)\n+  def getBlacklist(reporterName: String, config: Config): Option[String] = {\n+    val metricsConfig = new MetricsConfig(config)\n+    val blacklist = JavaOptionals.toRichOptional(metricsConfig.getMetricsSnapshotReporterBlacklist(reporterName)).toOption\n+    info(\"Got blacklist as: %s\" format blacklist)\n+    blacklist\n+  }\n \n-    info(\"Setting polling interval to %d\" format pollingInterval)\n+  def getPollingInterval(reporterName: String, config: Config): Int = {\n+    val metricsConfig = new MetricsConfig(config)\n+    val pollingInterval = metricsConfig.getMetricsSnapshotReporterInterval(reporterName)", "originalCommit": "b5ae87bb7c2e8d52128583b9f390ce9062c738ee", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTUxOTY0NQ==", "url": "https://github.com/apache/samza/pull/1368#discussion_r431519645", "bodyText": "Good point! I'm not sure why this was called pollingInterval to begin with.\nFixed it.", "author": "abhishekshivanna", "createdAt": "2020-05-28T00:38:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQ0MDM5Mg=="}], "type": "inlineReview"}, {"oid": "071b0456a53f1ebdc6e729d7d89e45ef158e33d4", "url": "https://github.com/apache/samza/commit/071b0456a53f1ebdc6e729d7d89e45ef158e33d4", "message": "Change pollingInterval to reportingInterval", "committedDate": "2020-05-28T00:34:10Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjU4MzQ3OQ==", "url": "https://github.com/apache/samza/pull/1368#discussion_r432583479", "bodyText": "private ?", "author": "rmatharu", "createdAt": "2020-05-29T16:00:08Z", "path": "samza-core/src/main/scala/org/apache/samza/metrics/reporter/MetricsSnapshotReporterFactory.scala", "diffHunk": "@@ -19,53 +19,47 @@\n \n package org.apache.samza.metrics.reporter\n \n-import org.apache.samza.util.{Logging, ReflectionUtil, StreamUtil, Util}\n import org.apache.samza.SamzaException\n-import org.apache.samza.config.{Config, JobConfig, MetricsConfig, SerializerConfig, StreamConfig, SystemConfig}\n-import org.apache.samza.metrics.MetricsReporter\n-import org.apache.samza.metrics.MetricsReporterFactory\n-import org.apache.samza.metrics.MetricsRegistryMap\n-import org.apache.samza.serializers.{MetricsSnapshotSerdeV2, SerdeFactory}\n-import org.apache.samza.system.SystemFactory\n+import org.apache.samza.config._\n+import org.apache.samza.metrics.{MetricsRegistryMap, MetricsReporter, MetricsReporterFactory}\n+import org.apache.samza.serializers.{MetricsSnapshotSerdeV2, Serde, SerdeFactory}\n+import org.apache.samza.system.{SystemFactory, SystemProducer, SystemStream}\n import org.apache.samza.util.ScalaJavaUtil.JavaOptionals\n+import org.apache.samza.util.{Logging, ReflectionUtil, StreamUtil, Util}\n \n class MetricsSnapshotReporterFactory extends MetricsReporterFactory with Logging {\n-  def getMetricsReporter(name: String, containerName: String, config: Config): MetricsReporter = {\n-    info(\"Creating new metrics snapshot reporter.\")\n-\n-    val jobConfig = new JobConfig(config)\n-    val jobName = JavaOptionals.toRichOptional(jobConfig.getName).toOption\n-      .getOrElse(throw new SamzaException(\"Job name must be defined in config.\"))\n-    val jobId = jobConfig.getJobId\n-\n-    val metricsConfig = new MetricsConfig(config)\n-    val metricsSystemStreamName = JavaOptionals.toRichOptional(metricsConfig.getMetricsSnapshotReporterStream(name))\n-      .toOption\n-      .getOrElse(throw new SamzaException(\"No metrics stream defined in config.\"))\n-\n-    val systemStream = StreamUtil.getSystemStreamFromNames(metricsSystemStreamName)\n-\n-    info(\"Got system stream %s.\" format systemStream)\n-\n-    val systemName = systemStream.getSystem\n \n+  def getProducer(reporterName: String, config: Config, registry: MetricsRegistryMap): SystemProducer = {", "originalCommit": "071b0456a53f1ebdc6e729d7d89e45ef158e33d4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYyODA5MQ==", "url": "https://github.com/apache/samza/pull/1368#discussion_r432628091", "bodyText": "This kinda relates to @bharathkk comment - where we need to share this producer externally in DiagnosticsUtil. See changes in https://github.com/apache/samza/pull/1369/files\nDo you think if we had two separate producers for DiagnosticsManager and MetricsSnapshotReporter would pose a problem?", "author": "abhishekshivanna", "createdAt": "2020-05-29T17:19:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjU4MzQ3OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjU4MzU4Ng==", "url": "https://github.com/apache/samza/pull/1368#discussion_r432583586", "bodyText": "private ?\nsame for all the other helper methods below that are invoked only from within this class.", "author": "rmatharu", "createdAt": "2020-05-29T16:00:17Z", "path": "samza-core/src/main/scala/org/apache/samza/metrics/reporter/MetricsSnapshotReporterFactory.scala", "diffHunk": "@@ -19,53 +19,47 @@\n \n package org.apache.samza.metrics.reporter\n \n-import org.apache.samza.util.{Logging, ReflectionUtil, StreamUtil, Util}\n import org.apache.samza.SamzaException\n-import org.apache.samza.config.{Config, JobConfig, MetricsConfig, SerializerConfig, StreamConfig, SystemConfig}\n-import org.apache.samza.metrics.MetricsReporter\n-import org.apache.samza.metrics.MetricsReporterFactory\n-import org.apache.samza.metrics.MetricsRegistryMap\n-import org.apache.samza.serializers.{MetricsSnapshotSerdeV2, SerdeFactory}\n-import org.apache.samza.system.SystemFactory\n+import org.apache.samza.config._\n+import org.apache.samza.metrics.{MetricsRegistryMap, MetricsReporter, MetricsReporterFactory}\n+import org.apache.samza.serializers.{MetricsSnapshotSerdeV2, Serde, SerdeFactory}\n+import org.apache.samza.system.{SystemFactory, SystemProducer, SystemStream}\n import org.apache.samza.util.ScalaJavaUtil.JavaOptionals\n+import org.apache.samza.util.{Logging, ReflectionUtil, StreamUtil, Util}\n \n class MetricsSnapshotReporterFactory extends MetricsReporterFactory with Logging {\n-  def getMetricsReporter(name: String, containerName: String, config: Config): MetricsReporter = {\n-    info(\"Creating new metrics snapshot reporter.\")\n-\n-    val jobConfig = new JobConfig(config)\n-    val jobName = JavaOptionals.toRichOptional(jobConfig.getName).toOption\n-      .getOrElse(throw new SamzaException(\"Job name must be defined in config.\"))\n-    val jobId = jobConfig.getJobId\n-\n-    val metricsConfig = new MetricsConfig(config)\n-    val metricsSystemStreamName = JavaOptionals.toRichOptional(metricsConfig.getMetricsSnapshotReporterStream(name))\n-      .toOption\n-      .getOrElse(throw new SamzaException(\"No metrics stream defined in config.\"))\n-\n-    val systemStream = StreamUtil.getSystemStreamFromNames(metricsSystemStreamName)\n-\n-    info(\"Got system stream %s.\" format systemStream)\n-\n-    val systemName = systemStream.getSystem\n \n+  def getProducer(reporterName: String, config: Config, registry: MetricsRegistryMap): SystemProducer = {\n     val systemConfig = new SystemConfig(config)\n+    val systemName = getSystemStream(reporterName, config).getSystem\n     val systemFactoryClassName = JavaOptionals.toRichOptional(systemConfig.getSystemFactory(systemName)).toOption\n       .getOrElse(throw new SamzaException(\"Trying to fetch system factory for system %s, which isn't defined in config.\" format systemName))\n-\n     val systemFactory = ReflectionUtil.getObj(systemFactoryClassName, classOf[SystemFactory])\n \n     info(\"Got system factory %s.\" format systemFactory)\n+    val producer = systemFactory.getProducer(systemName, config, registry)\n+    info(\"Got producer %s.\" format producer)\n \n-    val registry = new MetricsRegistryMap\n+    producer\n+  }\n \n-    val producer = systemFactory.getProducer(systemName, config, registry)\n+  def getSystemStream(reporterName: String, config: Config): SystemStream = {", "originalCommit": "071b0456a53f1ebdc6e729d7d89e45ef158e33d4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYzNDQ3Nw==", "url": "https://github.com/apache/samza/pull/1368#discussion_r432634477", "bodyText": "Agreed! Except for the shared producer (discussion on this thread above) changed all these methods to be protected so custom factories that extend from this class, don't have to duplicate code.", "author": "abhishekshivanna", "createdAt": "2020-05-29T17:30:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjU4MzU4Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjU4NDM4NQ==", "url": "https://github.com/apache/samza/pull/1368#discussion_r432584385", "bodyText": "nit: For the things are just methods in jobConfig perhaps separate helper-methods are an overkill?", "author": "rmatharu", "createdAt": "2020-05-29T16:01:39Z", "path": "samza-core/src/main/scala/org/apache/samza/metrics/reporter/MetricsSnapshotReporterFactory.scala", "diffHunk": "@@ -77,29 +71,62 @@ class MetricsSnapshotReporterFactory extends MetricsReporterFactory with Logging\n     } else {\n       new MetricsSnapshotSerdeV2\n     }\n-\n     info(\"Got serde %s.\" format serde)\n+    serde\n+  }\n+\n \n-    val pollingInterval: Int = metricsConfig.getMetricsSnapshotReporterInterval(name)\n+  def getBlacklist(reporterName: String, config: Config): Option[String] = {\n+    val metricsConfig = new MetricsConfig(config)\n+    val blacklist = JavaOptionals.toRichOptional(metricsConfig.getMetricsSnapshotReporterBlacklist(reporterName)).toOption\n+    info(\"Got blacklist as: %s\" format blacklist)\n+    blacklist\n+  }\n \n-    info(\"Setting polling interval to %d\" format pollingInterval)\n+  def getReportingInterval(reporterName: String, config: Config): Int = {\n+    val metricsConfig = new MetricsConfig(config)\n+    val reportingInterval = metricsConfig.getMetricsSnapshotReporterInterval(reporterName)\n+    info(\"Got reporting interval: %d\" format reportingInterval)\n+    reportingInterval\n+  }\n+\n+  def getJobId(config: Config): String = {\n+    val jobConfig = new JobConfig(config)\n+    jobConfig.getJobId\n+  }\n+\n+  def getJobName(config: Config): String = {\n+    val jobConfig = new JobConfig(config)\n+    JavaOptionals.toRichOptional(jobConfig.getName).toOption\n+      .getOrElse(throw new SamzaException(\"Job name must be defined in config.\"))\n+  }", "originalCommit": "071b0456a53f1ebdc6e729d7d89e45ef158e33d4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYzMTE4Mg==", "url": "https://github.com/apache/samza/pull/1368#discussion_r432631182", "bodyText": "I feel it helps read the code better. Since this is not a frequently executed code path it should be fine to trade-off readability for a stack that is one level deeper.", "author": "abhishekshivanna", "createdAt": "2020-05-29T17:25:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjU4NDM4NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjU4NzMwOQ==", "url": "https://github.com/apache/samza/pull/1368#discussion_r432587309", "bodyText": "Do you think it'd be possible to add a test to test the emission logic in TestMetricsSnapshotReporter?\nSomehow it was overlooked before.", "author": "rmatharu", "createdAt": "2020-05-29T16:06:40Z", "path": "samza-core/src/main/scala/org/apache/samza/metrics/reporter/MetricsSnapshotReporter.scala", "diffHunk": "@@ -106,9 +106,20 @@ class MetricsSnapshotReporter(\n     }\n   }\n \n-  def run {\n-    debug(\"Begin flushing metrics.\")\n+  def run() {", "originalCommit": "071b0456a53f1ebdc6e729d7d89e45ef158e33d4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjcxMjI2MA==", "url": "https://github.com/apache/samza/pull/1368#discussion_r432712260", "bodyText": "Done", "author": "abhishekshivanna", "createdAt": "2020-05-29T20:10:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjU4NzMwOQ=="}], "type": "inlineReview"}, {"oid": "940d2aa595305445f45ccfb9a5b1d225fdce8134", "url": "https://github.com/apache/samza/commit/940d2aa595305445f45ccfb9a5b1d225fdce8134", "message": "made helper functions protected", "committedDate": "2020-05-29T17:30:42Z", "type": "commit"}, {"oid": "30f2eb5ab768e87e702b48663b857ecb98e3e2bf", "url": "https://github.com/apache/samza/commit/30f2eb5ab768e87e702b48663b857ecb98e3e2bf", "message": "added test for metrics emit", "committedDate": "2020-05-29T20:08:58Z", "type": "commit"}, {"oid": "9f064194aa060690499cef7f9bbee328e8fb7cc3", "url": "https://github.com/apache/samza/commit/9f064194aa060690499cef7f9bbee328e8fb7cc3", "message": "Fix checkstyle", "committedDate": "2020-05-31T01:57:18Z", "type": "commit"}, {"oid": "a5e68853b934cee9aac461734d4bf26e34e5bc54", "url": "https://github.com/apache/samza/commit/a5e68853b934cee9aac461734d4bf26e34e5bc54", "message": "remove getProducer in MSR", "committedDate": "2020-06-03T17:18:31Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDczMzY4OQ==", "url": "https://github.com/apache/samza/pull/1368#discussion_r434733689", "bodyText": "can we use explicit exports instead of wildcards?", "author": "mynameborat", "createdAt": "2020-06-03T17:24:53Z", "path": "samza-core/src/test/java/org/apache/samza/metrics/TestMetricsSnapshotReporter.java", "diffHunk": "@@ -19,23 +19,51 @@\n \n package org.apache.samza.metrics;\n \n+import java.util.List;\n+import java.util.Map;\n+import org.apache.samza.metrics.reporter.MetricsSnapshot;\n import org.apache.samza.metrics.reporter.MetricsSnapshotReporter;\n import org.apache.samza.serializers.MetricsSnapshotSerdeV2;\n+import org.apache.samza.serializers.Serializer;\n+import org.apache.samza.system.OutgoingMessageEnvelope;\n+import org.apache.samza.system.SystemProducer;\n import org.apache.samza.system.SystemStream;\n-import org.apache.samza.system.inmemory.InMemorySystemProducer;\n import org.junit.Assert;\n+import org.junit.Before;\n import org.junit.Test;\n+import org.mockito.ArgumentCaptor;\n import scala.Some;\n import scala.runtime.AbstractFunction0;\n \n+import static org.mockito.Mockito.*;", "originalCommit": "a5e68853b934cee9aac461734d4bf26e34e5bc54", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "7a17b2bb0a686ee5dacba1455073088747c54ced", "url": "https://github.com/apache/samza/commit/7a17b2bb0a686ee5dacba1455073088747c54ced", "message": "remove static import", "committedDate": "2020-06-03T17:32:44Z", "type": "commit"}]}