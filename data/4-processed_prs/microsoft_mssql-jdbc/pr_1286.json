{"pr_number": 1286, "pr_title": "Feature | Added support for authentication to Azure Key Vault using Managed Identity", "pr_createdAt": "2020-03-18T02:11:55Z", "pr_url": "https://github.com/microsoft/mssql-jdbc/pull/1286", "timeline": [{"oid": "c97b863c95385bdcd1afc897ef39cbebaf495578", "url": "https://github.com/microsoft/mssql-jdbc/commit/c97b863c95385bdcd1afc897ef39cbebaf495578", "message": "Fix AEv2 tests exclude for reqExternalSetup and cleanup (#1247)", "committedDate": "2020-02-05T19:03:48Z", "type": "commit"}, {"oid": "54b5a194e5d46552419c86e0d1f8c800f42d3de8", "url": "https://github.com/microsoft/mssql-jdbc/commit/54b5a194e5d46552419c86e0d1f8c800f42d3de8", "message": "Fix | Add null check for getObject() with LocalTime and LocalDate (#1250)", "committedDate": "2020-02-08T00:19:05Z", "type": "commit"}, {"oid": "672b7d67caae75250c53f82a760e8d3880e62a37", "url": "https://github.com/microsoft/mssql-jdbc/commit/672b7d67caae75250c53f82a760e8d3880e62a37", "message": "added all AKV tests to use reqExternalSetup tag so they will be skipped by default (#1254)\n\n* skip AKV test properly\r\n\r\n* removed enclave properties string to failed errors as enclave tests could be skipped", "committedDate": "2020-02-10T19:04:22Z", "type": "commit"}, {"oid": "32c21f5fef64d28468647f1fbab21aa767d0605f", "url": "https://github.com/microsoft/mssql-jdbc/commit/32c21f5fef64d28468647f1fbab21aa767d0605f", "message": "msi for akv", "committedDate": "2020-03-04T20:48:15Z", "type": "commit"}, {"oid": "b706fb3f0896a086b18a2c4f9edc517dbcb274d1", "url": "https://github.com/microsoft/mssql-jdbc/commit/b706fb3f0896a086b18a2c4f9edc517dbcb274d1", "message": "Merge remote-tracking branch 'upstream/dev' into msi", "committedDate": "2020-03-06T04:52:26Z", "type": "commit"}, {"oid": "9e368a578d2dc0c720c5b34c0a0dfbe2a0c0a2d1", "url": "https://github.com/microsoft/mssql-jdbc/commit/9e368a578d2dc0c720c5b34c0a0dfbe2a0c0a2d1", "message": "msi tests", "committedDate": "2020-03-09T23:36:11Z", "type": "commit"}, {"oid": "28bb1ee936deeef9790810f1cd02b57b81940414", "url": "https://github.com/microsoft/mssql-jdbc/commit/28bb1ee936deeef9790810f1cd02b57b81940414", "message": "added new props for AKV with MSI", "committedDate": "2020-03-12T02:51:07Z", "type": "commit"}, {"oid": "b75ebab8265af84257e21bc455a43ef18a42a845", "url": "https://github.com/microsoft/mssql-jdbc/commit/b75ebab8265af84257e21bc455a43ef18a42a845", "message": "fixed formatting", "committedDate": "2020-03-12T02:54:10Z", "type": "commit"}, {"oid": "3ce5ad896c2a8efbb3901e4c82de8d01c7baf4b2", "url": "https://github.com/microsoft/mssql-jdbc/commit/3ce5ad896c2a8efbb3901e4c82de8d01c7baf4b2", "message": "fixed formatting", "committedDate": "2020-03-12T03:02:47Z", "type": "commit"}, {"oid": "3a9db373a5c65488a8f7f8a0586e49a4b863b234", "url": "https://github.com/microsoft/mssql-jdbc/commit/3a9db373a5c65488a8f7f8a0586e49a4b863b234", "message": "fixed formatting", "committedDate": "2020-03-12T03:10:19Z", "type": "commit"}, {"oid": "5ba68814685fa96b13972e4223f6eb70c4aee4a1", "url": "https://github.com/microsoft/mssql-jdbc/commit/5ba68814685fa96b13972e4223f6eb70c4aee4a1", "message": "fixed formatting", "committedDate": "2020-03-12T03:14:10Z", "type": "commit"}, {"oid": "95948c1fb38755cbd652d290fa5b783610afeedb", "url": "https://github.com/microsoft/mssql-jdbc/commit/95948c1fb38755cbd652d290fa5b783610afeedb", "message": "test fixes", "committedDate": "2020-03-12T07:29:50Z", "type": "commit"}, {"oid": "beac701758c535820082a72f23eabda4b21bb35d", "url": "https://github.com/microsoft/mssql-jdbc/commit/beac701758c535820082a72f23eabda4b21bb35d", "message": "update connection property names", "committedDate": "2020-03-13T07:09:38Z", "type": "commit"}, {"oid": "86b14ee41ce14981ee4db2db556f05a27d199c86", "url": "https://github.com/microsoft/mssql-jdbc/commit/86b14ee41ce14981ee4db2db556f05a27d199c86", "message": "updated tests", "committedDate": "2020-03-16T21:23:27Z", "type": "commit"}, {"oid": "48801af43e5fc90fd3be04826be32ef30b58ac89", "url": "https://github.com/microsoft/mssql-jdbc/commit/48801af43e5fc90fd3be04826be32ef30b58ac89", "message": "removed unused", "committedDate": "2020-03-17T00:36:33Z", "type": "commit"}, {"oid": "7cf8a6889ac99106ef6a2b7bb204cc872730a848", "url": "https://github.com/microsoft/mssql-jdbc/commit/7cf8a6889ac99106ef6a2b7bb204cc872730a848", "message": "ks registration", "committedDate": "2020-03-17T00:48:42Z", "type": "commit"}, {"oid": "a64c9954e8d59c7b61662da94f71cda8a70e0f21", "url": "https://github.com/microsoft/mssql-jdbc/commit/a64c9954e8d59c7b61662da94f71cda8a70e0f21", "message": "debug", "committedDate": "2020-03-17T07:06:23Z", "type": "commit"}, {"oid": "7b013e94c41e6083557d9f439c366abdbeeecb35", "url": "https://github.com/microsoft/mssql-jdbc/commit/7b013e94c41e6083557d9f439c366abdbeeecb35", "message": "debug", "committedDate": "2020-03-17T07:12:57Z", "type": "commit"}, {"oid": "395790ff8d8736085eb45030ca772ff09aaaa272", "url": "https://github.com/microsoft/mssql-jdbc/commit/395790ff8d8736085eb45030ca772ff09aaaa272", "message": "debug", "committedDate": "2020-03-17T07:25:39Z", "type": "commit"}, {"oid": "5bb43139c021086eacd425b33f0c1f15015fc699", "url": "https://github.com/microsoft/mssql-jdbc/commit/5bb43139c021086eacd425b33f0c1f15015fc699", "message": "debug", "committedDate": "2020-03-17T07:30:37Z", "type": "commit"}, {"oid": "065a0f00500d0b0d5b7b57d14245a486c9b9cf27", "url": "https://github.com/microsoft/mssql-jdbc/commit/065a0f00500d0b0d5b7b57d14245a486c9b9cf27", "message": "remove debug", "committedDate": "2020-03-17T07:37:45Z", "type": "commit"}, {"oid": "9ed54ef1b02911ac8ef9c479c979d3d13d9694ca", "url": "https://github.com/microsoft/mssql-jdbc/commit/9ed54ef1b02911ac8ef9c479c979d3d13d9694ca", "message": "remove debug", "committedDate": "2020-03-17T07:57:22Z", "type": "commit"}, {"oid": "48369bc86980cc2e334fddbb268c7523d428c039", "url": "https://github.com/microsoft/mssql-jdbc/commit/48369bc86980cc2e334fddbb268c7523d428c039", "message": "AE connectionstring", "committedDate": "2020-03-17T08:03:08Z", "type": "commit"}, {"oid": "7a43bfdf46be6db7d7e438fa2989954286589ad5", "url": "https://github.com/microsoft/mssql-jdbc/commit/7a43bfdf46be6db7d7e438fa2989954286589ad5", "message": "more tests", "committedDate": "2020-03-17T08:23:48Z", "type": "commit"}, {"oid": "c2120a3bb8c7a0168557cc971ae1210446bba021", "url": "https://github.com/microsoft/mssql-jdbc/commit/c2120a3bb8c7a0168557cc971ae1210446bba021", "message": "more tests", "committedDate": "2020-03-17T08:28:11Z", "type": "commit"}, {"oid": "6dad2e47a5a783977e05bda542d03a322e7d205a", "url": "https://github.com/microsoft/mssql-jdbc/commit/6dad2e47a5a783977e05bda542d03a322e7d205a", "message": "more tests", "committedDate": "2020-03-17T08:34:18Z", "type": "commit"}, {"oid": "564350d7971b619c59791292ceaf5eb55e63e0ab", "url": "https://github.com/microsoft/mssql-jdbc/commit/564350d7971b619c59791292ceaf5eb55e63e0ab", "message": "fixed typo", "committedDate": "2020-03-17T08:44:45Z", "type": "commit"}, {"oid": "855b71babeef78a6398afa9779c7b5d3e381df9b", "url": "https://github.com/microsoft/mssql-jdbc/commit/855b71babeef78a6398afa9779c7b5d3e381df9b", "message": "updated tests", "committedDate": "2020-03-18T01:32:36Z", "type": "commit"}, {"oid": "355729ebebd9aa78efeaeea035f0e91c47e8cdab", "url": "https://github.com/microsoft/mssql-jdbc/commit/355729ebebd9aa78efeaeea035f0e91c47e8cdab", "message": "null check", "committedDate": "2020-03-18T01:43:49Z", "type": "commit"}, {"oid": "6ee6aa2f70d2fa089ad7c8f395c86e1b2a660ba4", "url": "https://github.com/microsoft/mssql-jdbc/commit/6ee6aa2f70d2fa089ad7c8f395c86e1b2a660ba4", "message": "javadoc", "committedDate": "2020-03-18T01:59:36Z", "type": "commit"}, {"oid": "ee800b090cabdf974f7c03cb1990f8872075ffc6", "url": "https://github.com/microsoft/mssql-jdbc/commit/ee800b090cabdf974f7c03cb1990f8872075ffc6", "message": "exclude MSI tests by default", "committedDate": "2020-03-18T07:02:52Z", "type": "commit"}, {"oid": "ca1d9d5b3fc82fc70715e33d77bd55d245617f46", "url": "https://github.com/microsoft/mssql-jdbc/commit/ca1d9d5b3fc82fc70715e33d77bd55d245617f46", "message": "formatting", "committedDate": "2020-03-18T07:48:02Z", "type": "commit"}, {"oid": "14b6efc6138ec631d2c237aaeb2b2f463a0c984e", "url": "https://github.com/microsoft/mssql-jdbc/commit/14b6efc6138ec631d2c237aaeb2b2f463a0c984e", "message": "merged conflicts", "committedDate": "2020-03-19T19:59:58Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkxNTA0Mg==", "url": "https://github.com/microsoft/mssql-jdbc/pull/1286#discussion_r395915042", "bodyText": "Please check how version is specified for other dependencies.", "author": "ulvii", "createdAt": "2020-03-20T22:22:49Z", "path": "pom.xml", "diffHunk": "@@ -94,6 +95,11 @@\n \t\t\t<version>${azure.adal4j.version}</version>\n \t\t\t<optional>true</optional>\n \t\t</dependency>\n+\t\t<dependency>\n+\t\t\t<groupId>com.microsoft.azure</groupId>\n+\t\t\t<artifactId>azure-client-authentication</artifactId>\n+\t\t\t<version>1.7.2</version>", "originalCommit": "14b6efc6138ec631d2c237aaeb2b2f463a0c984e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "604fcc3ff454df209e78657dc5418519f83a7a1e", "url": "https://github.com/microsoft/mssql-jdbc/commit/604fcc3ff454df209e78657dc5418519f83a7a1e", "message": "renamed", "committedDate": "2020-03-23T19:17:29Z", "type": "commit"}, {"oid": "7e69b3572a523405912f0f0e038a3bb10baf1023", "url": "https://github.com/microsoft/mssql-jdbc/commit/7e69b3572a523405912f0f0e038a3bb10baf1023", "message": "unreg all providers", "committedDate": "2020-03-23T20:19:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njg4MDE2Nw==", "url": "https://github.com/microsoft/mssql-jdbc/pull/1286#discussion_r396880167", "bodyText": "Why are we wrapping the exception into a RuntimeException here? Shouldn't we wrap the exception into a SQLServerException instead?", "author": "peterbae", "createdAt": "2020-03-24T03:15:10Z", "path": "src/main/java/com/microsoft/sqlserver/jdbc/KeyVaultCredential.java", "diffHunk": "@@ -37,11 +55,19 @@\n     }\n \n     public String doAuthenticate(String authorization, String resource, String scope) {\n-        String accessToken;\n+        String accessToken = null;\n         if (null == authenticationCallback) {\n-            AuthenticationResult token = getAccessTokenFromClientCredentials(authorization, resource, clientId,\n-                    clientKey);\n-            accessToken = token.getAccessToken();\n+            if (null != msiCred) {\n+                try {\n+                    accessToken = msiCred.getToken(resource);\n+                } catch (IOException e) {\n+                    throw new RuntimeException(e);", "originalCommit": "7e69b3572a523405912f0f0e038a3bb10baf1023", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM1ODQxMQ==", "url": "https://github.com/microsoft/mssql-jdbc/pull/1286#discussion_r397358411", "bodyText": "should we? I used RuntimeException to be consistent with what we're currently doing already.  getAccessTokenFromClientCredentials throws RuntimeException which just gets passed up to the caller here", "author": "lilgreenbird", "createdAt": "2020-03-24T18:04:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njg4MDE2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM3MDAzMQ==", "url": "https://github.com/microsoft/mssql-jdbc/pull/1286#discussion_r397370031", "bodyText": "ok, I see that it's being done in the other method as well...but I think we usually wrap any exception into SQLServerException. But I'm ok with following the previous code.", "author": "peterbae", "createdAt": "2020-03-24T18:23:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njg4MDE2Nw=="}], "type": "inlineReview"}, {"oid": "ab43dd760eafc1cae84d060ccb4206e3798a6c9f", "url": "https://github.com/microsoft/mssql-jdbc/commit/ab43dd760eafc1cae84d060ccb4206e3798a6c9f", "message": "fixed prop names", "committedDate": "2020-03-24T05:38:05Z", "type": "commit"}, {"oid": "7e662fe741ae99b5c629bdcbab04d691f86c03ab", "url": "https://github.com/microsoft/mssql-jdbc/commit/7e662fe741ae99b5c629bdcbab04d691f86c03ab", "message": "Merge remote-tracking branch 'upstream/dev' into msi", "committedDate": "2020-03-25T19:55:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE4MDg4OQ==", "url": "https://github.com/microsoft/mssql-jdbc/pull/1286#discussion_r398180889", "bodyText": "Add license header", "author": "peterbae", "createdAt": "2020-03-25T21:28:01Z", "path": "src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java", "diffHunk": "@@ -0,0 +1,166 @@\n+package com.microsoft.sqlserver.jdbc.AlwaysEncrypted;\r", "originalCommit": "7e662fe741ae99b5c629bdcbab04d691f86c03ab", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIyNDEwNg==", "url": "https://github.com/microsoft/mssql-jdbc/pull/1286#discussion_r398224106", "bodyText": "put license header here", "author": "peterbae", "createdAt": "2020-03-25T23:06:19Z", "path": "src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/AECommon.java", "diffHunk": "@@ -0,0 +1,302 @@\n+package com.microsoft.sqlserver.jdbc.AlwaysEncrypted;\r", "originalCommit": "7e662fe741ae99b5c629bdcbab04d691f86c03ab", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIyNTg3MQ==", "url": "https://github.com/microsoft/mssql-jdbc/pull/1286#discussion_r398225871", "bodyText": "needs @test tag", "author": "peterbae", "createdAt": "2020-03-25T23:11:03Z", "path": "src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java", "diffHunk": "@@ -0,0 +1,166 @@\n+package com.microsoft.sqlserver.jdbc.AlwaysEncrypted;\r\n+\r\n+import static org.junit.jupiter.api.Assertions.fail;\r\n+\r\n+import java.sql.Connection;\r\n+import java.sql.ResultSet;\r\n+import java.sql.SQLException;\r\n+import java.sql.Statement;\r\n+\r\n+import org.junit.jupiter.api.Tag;\r\n+import org.junit.jupiter.api.Test;\r\n+import org.junit.platform.runner.JUnitPlatform;\r\n+import org.junit.runner.RunWith;\r\n+\r\n+import com.microsoft.sqlserver.jdbc.SQLServerConnection;\r\n+import com.microsoft.sqlserver.jdbc.SQLServerDataSource;\r\n+import com.microsoft.sqlserver.jdbc.SQLServerPreparedStatement;\r\n+import com.microsoft.sqlserver.jdbc.SQLServerResultSet;\r\n+import com.microsoft.sqlserver.jdbc.SQLServerStatement;\r\n+import com.microsoft.sqlserver.jdbc.TestResource;\r\n+import com.microsoft.sqlserver.jdbc.TestUtils;\r\n+import com.microsoft.sqlserver.testframework.AbstractTest;\r\n+import com.microsoft.sqlserver.testframework.Constants;\r\n+import com.microsoft.sqlserver.testframework.PrepUtil;\r\n+\r\n+\r\n+/**\r\n+ * Tests involving MSI authentication\r\n+ */\r\n+@RunWith(JUnitPlatform.class)\r\n+@Tag(Constants.MSI)\r\n+public class MSITest extends AESetup {\r\n+    /*\r\n+     * Test basic MSI auth\r\n+     */\r\n+    @Test\r\n+    public void testAuth() throws SQLException {\r\n+        try (SQLServerConnection con = PrepUtil.getConnection(connectionString)) {} catch (Exception e) {\r\n+            fail(TestResource.getResource(\"R_loginFailed\") + e.getMessage());\r\n+        }\r\n+    }\r\n+\r\n+    /*\r\n+     * Test MSI auth using datasource\r\n+     */\r\n+    @Test\r\n+    public void testDSAuth() throws SQLException {\r\n+        SQLServerDataSource ds = new SQLServerDataSource();\r\n+        AbstractTest.updateDataSource(connectionString, ds);\r\n+\r\n+        try (Connection con = ds.getConnection(); Statement stmt = con.createStatement()) {} catch (Exception e) {\r\n+            fail(TestResource.getResource(\"R_loginFailed\") + e.getMessage());\r\n+        }\r\n+    }\r\n+\r\n+    /*\r\n+     * Test AKV with with credentials\r\n+     */\r\n+    @Test\r\n+    public void testCharAkvWithCred() throws SQLException {\r\n+        // unregister the custom providers registered in AESetup\r\n+        SQLServerConnection.unregisterColumnEncryptionKeyStoreProviders();\r\n+\r\n+        // add credentials to connection string\r\n+        AETestConnectionString = TestUtils.addOrOverrideProperty(AETestConnectionString,\r\n+                Constants.KEYSTORE_AUTHENTICATION, \"KeyVaultClientSecret\");\r\n+        AETestConnectionString = TestUtils.addOrOverrideProperty(AETestConnectionString, Constants.KEYSTORE_PRINCIPALID,\r\n+                keyStorePrincipalId);\r\n+        AETestConnectionString = TestUtils.addOrOverrideProperty(AETestConnectionString, Constants.KEYSTORE_SECRET,\r\n+                keyStoreSecret);\r\n+        testCharAkv();\r\n+    }\r\n+\r\n+    /*\r\n+     * Test AKV with MSI\r\n+     */\r\n+    public void testCharAkvWithMSI() throws SQLException {\r", "originalCommit": "7e662fe741ae99b5c629bdcbab04d691f86c03ab", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "54832b81645c811844ff2ea117fbc567c7c417fa", "url": "https://github.com/microsoft/mssql-jdbc/commit/54832b81645c811844ff2ea117fbc567c7c417fa", "message": "review updates", "committedDate": "2020-03-26T06:13:37Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk1Njk5Ng==", "url": "https://github.com/microsoft/mssql-jdbc/pull/1286#discussion_r398956996", "bodyText": "I think currently your testing might not be testing the correct inputs from the user. This AETestConnectionString is a static variable that keeps getting added more parameters as individual tests get executed, resulting in latter tests having the same connection property defined multiple times. You should reset this variable to the base connection string at the beginning of each test run.", "author": "peterbae", "createdAt": "2020-03-26T23:45:29Z", "path": "src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java", "diffHunk": "@@ -0,0 +1,171 @@\n+/*\r\n+ * Microsoft JDBC Driver for SQL Server Copyright(c) Microsoft Corporation All rights reserved. This program is made\r\n+ * available under the terms of the MIT License. See the LICENSE file in the project root for more information.\r\n+ */\r\n+package com.microsoft.sqlserver.jdbc.AlwaysEncrypted;\r\n+\r\n+import static org.junit.jupiter.api.Assertions.fail;\r\n+\r\n+import java.sql.Connection;\r\n+import java.sql.ResultSet;\r\n+import java.sql.SQLException;\r\n+import java.sql.Statement;\r\n+\r\n+import org.junit.jupiter.api.Tag;\r\n+import org.junit.jupiter.api.Test;\r\n+import org.junit.platform.runner.JUnitPlatform;\r\n+import org.junit.runner.RunWith;\r\n+\r\n+import com.microsoft.sqlserver.jdbc.SQLServerConnection;\r\n+import com.microsoft.sqlserver.jdbc.SQLServerDataSource;\r\n+import com.microsoft.sqlserver.jdbc.SQLServerPreparedStatement;\r\n+import com.microsoft.sqlserver.jdbc.SQLServerResultSet;\r\n+import com.microsoft.sqlserver.jdbc.SQLServerStatement;\r\n+import com.microsoft.sqlserver.jdbc.TestResource;\r\n+import com.microsoft.sqlserver.jdbc.TestUtils;\r\n+import com.microsoft.sqlserver.testframework.AbstractTest;\r\n+import com.microsoft.sqlserver.testframework.Constants;\r\n+import com.microsoft.sqlserver.testframework.PrepUtil;\r\n+\r\n+\r\n+/**\r\n+ * Tests involving MSI authentication\r\n+ */\r\n+@RunWith(JUnitPlatform.class)\r\n+@Tag(Constants.MSI)\r\n+public class MSITest extends AESetup {\r\n+    /*\r\n+     * Test basic MSI auth\r\n+     */\r\n+    @Test\r\n+    public void testAuth() throws SQLException {\r\n+        try (SQLServerConnection con = PrepUtil.getConnection(connectionString)) {} catch (Exception e) {\r\n+            fail(TestResource.getResource(\"R_loginFailed\") + e.getMessage());\r\n+        }\r\n+    }\r\n+\r\n+    /*\r\n+     * Test MSI auth using datasource\r\n+     */\r\n+    @Test\r\n+    public void testDSAuth() throws SQLException {\r\n+        SQLServerDataSource ds = new SQLServerDataSource();\r\n+        AbstractTest.updateDataSource(connectionString, ds);\r\n+\r\n+        try (Connection con = ds.getConnection(); Statement stmt = con.createStatement()) {} catch (Exception e) {\r\n+            fail(TestResource.getResource(\"R_loginFailed\") + e.getMessage());\r\n+        }\r\n+    }\r\n+\r\n+    /*\r\n+     * Test AKV with with credentials\r\n+     */\r\n+    @Test\r\n+    public void testCharAkvWithCred() throws SQLException {\r\n+        // unregister the custom providers registered in AESetup\r\n+        SQLServerConnection.unregisterColumnEncryptionKeyStoreProviders();\r\n+\r\n+        // add credentials to connection string\r\n+        AETestConnectionString = TestUtils.addOrOverrideProperty(AETestConnectionString,\r", "originalCommit": "54832b81645c811844ff2ea117fbc567c7c417fa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "34784c7625f98e573d680690d2a2ea40939d0063", "url": "https://github.com/microsoft/mssql-jdbc/commit/34784c7625f98e573d680690d2a2ea40939d0063", "message": "review update", "committedDate": "2020-03-27T00:46:09Z", "type": "commit"}, {"oid": "a578f1ede3074e1413711f28cdef5a894e49821b", "url": "https://github.com/microsoft/mssql-jdbc/commit/a578f1ede3074e1413711f28cdef5a894e49821b", "message": "migrate to azure-identity", "committedDate": "2020-03-28T04:38:10Z", "type": "commit"}, {"oid": "5392cc358a266e96a12940ef0e41631d4ef1f557", "url": "https://github.com/microsoft/mssql-jdbc/commit/5392cc358a266e96a12940ef0e41631d4ef1f557", "message": "remove debug lines", "committedDate": "2020-03-28T04:48:35Z", "type": "commit"}, {"oid": "942adcc154cc53dcb99a9065d400a28b625add39", "url": "https://github.com/microsoft/mssql-jdbc/commit/942adcc154cc53dcb99a9065d400a28b625add39", "message": "removed unused", "committedDate": "2020-03-28T05:05:35Z", "type": "commit"}, {"oid": "d14f398f955e27214a5665150be2f7b20905609d", "url": "https://github.com/microsoft/mssql-jdbc/commit/d14f398f955e27214a5665150be2f7b20905609d", "message": "merged with client auth", "committedDate": "2020-03-28T05:42:22Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTczMDAxNQ==", "url": "https://github.com/microsoft/mssql-jdbc/pull/1286#discussion_r399730015", "bodyText": "Aren't you adding 2 new connection properties?", "author": "ulvii", "createdAt": "2020-03-29T01:14:55Z", "path": "src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java", "diffHunk": "@@ -821,6 +821,21 @@\n      */\n     String getMSIClientId();\n \n+    /**", "originalCommit": "d14f398f955e27214a5665150be2f7b20905609d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTk0MTIzNA==", "url": "https://github.com/microsoft/mssql-jdbc/pull/1286#discussion_r399941234", "bodyText": "not anymore, latest discussion with Jakub we're aligning with ODBC so using keyStorePrincipalId (new) and keyStoreSecret (existing)", "author": "lilgreenbird", "createdAt": "2020-03-30T05:51:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTczMDAxNQ=="}], "type": "inlineReview"}, {"oid": "70b6a3c1912a003a22a538f72a3be93070e96e99", "url": "https://github.com/microsoft/mssql-jdbc/commit/70b6a3c1912a003a22a538f72a3be93070e96e99", "message": "removed azure-identities dependency", "committedDate": "2020-03-31T00:24:38Z", "type": "commit"}, {"oid": "8b7e3a9f01edc2b9995711222f1f5ec5a0f041cb", "url": "https://github.com/microsoft/mssql-jdbc/commit/8b7e3a9f01edc2b9995711222f1f5ec5a0f041cb", "message": "missed 1 file", "committedDate": "2020-03-31T00:28:22Z", "type": "commit"}, {"oid": "8c56ba6185c746fe03e057e1cc631123dd006e7f", "url": "https://github.com/microsoft/mssql-jdbc/commit/8c56ba6185c746fe03e057e1cc631123dd006e7f", "message": "merged conflicts", "committedDate": "2020-03-31T00:30:38Z", "type": "commit"}, {"oid": "ff179c14be160f612d70e3102c4a4ed8e85dd628", "url": "https://github.com/microsoft/mssql-jdbc/commit/ff179c14be160f612d70e3102c4a4ed8e85dd628", "message": "updated", "committedDate": "2020-03-31T00:36:30Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU3NjE4Mg==", "url": "https://github.com/microsoft/mssql-jdbc/pull/1286#discussion_r400576182", "bodyText": "This is not necessarily AKV user principal ID. Please align the docs with ODBC connection property documentation.", "author": "ulvii", "createdAt": "2020-03-31T00:39:46Z", "path": "src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java", "diffHunk": "@@ -821,6 +821,21 @@\n      */\n     String getMSIClientId();\n \n+    /**\n+     * Sets the Azure Key Vault (AKV) Provider user principal id.", "originalCommit": "ff179c14be160f612d70e3102c4a4ed8e85dd628", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU3NjIzMg==", "url": "https://github.com/microsoft/mssql-jdbc/pull/1286#discussion_r400576232", "bodyText": "Same here.", "author": "ulvii", "createdAt": "2020-03-31T00:39:55Z", "path": "src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java", "diffHunk": "@@ -821,6 +821,21 @@\n      */\n     String getMSIClientId();\n \n+    /**\n+     * Sets the Azure Key Vault (AKV) Provider user principal id.\n+     * \n+     * @param keyVaultPrincipalId\n+     *        principal Id of Azure Key Vault (AKV) Provider to be used for column encryption.", "originalCommit": "ff179c14be160f612d70e3102c4a4ed8e85dd628", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "49224f57565a52cb69c0e6ed464205019f4df652", "url": "https://github.com/microsoft/mssql-jdbc/commit/49224f57565a52cb69c0e6ed464205019f4df652", "message": "comment changes", "committedDate": "2020-03-31T01:20:07Z", "type": "commit"}, {"oid": "2a55d5b70b3dc899ddee573e04564d0ee6647c00", "url": "https://github.com/microsoft/mssql-jdbc/commit/2a55d5b70b3dc899ddee573e04564d0ee6647c00", "message": "remove unused", "committedDate": "2020-03-31T01:57:32Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTAzMjU3Ng==", "url": "https://github.com/microsoft/mssql-jdbc/pull/1286#discussion_r401032576", "bodyText": "Please do not call class.getName() in logger, it traverses the stack and is extremely costly performance-wise. I also recommend checking the logging level before calling these entering/exiting methods, although I'm not sure if the intent here is to always log. As for the class.getName(), just use a static string, so SQLServerConnection.class.getName() would be \"com.microsoft.sqlserver.jdbc.SQLServerConnection\".", "author": "rene-ye", "createdAt": "2020-03-31T16:03:20Z", "path": "src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java", "diffHunk": "@@ -720,6 +722,23 @@ public static synchronized void registerColumnEncryptionKeyStoreProviders(\n                         + globalCustomColumnEncryptionKeyStoreProviders.size());\n     }\n \n+    /**\n+     * Unregisters the custom key store providers from the globalCustomColumnEncryptionKeyStoreProviders.\n+     */\n+    public static synchronized void unregisterColumnEncryptionKeyStoreProviders() {\n+        loggerExternal.entering(SQLServerConnection.class.getName(), \"unregisterColumnEncryptionKeyStoreProviders\",\n+                \"Removing Column Encryption Key Store Provider\");\n+\n+        if (null != globalCustomColumnEncryptionKeyStoreProviders) {\n+            globalCustomColumnEncryptionKeyStoreProviders.clear();\n+        }\n+\n+        loggerExternal.exiting(SQLServerConnection.class.getName(), \"unregisterColumnEncryptionKeyStoreProviders\",", "originalCommit": "2a55d5b70b3dc899ddee573e04564d0ee6647c00", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTAzNDQ5Nw==", "url": "https://github.com/microsoft/mssql-jdbc/pull/1286#discussion_r401034497", "bodyText": "Feels like a waste to create a hash-map w/ 1 entry just to conform to the existing constructor. Maybe this can be done better?", "author": "rene-ye", "createdAt": "2020-03-31T16:06:07Z", "path": "src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java", "diffHunk": "@@ -1291,7 +1316,30 @@ private void registerKeyStoreProviderOnConnection(String keyStoreAuth, String ke\n                         systemColumnEncryptionKeyStoreProvider.put(provider.getName(), provider);\n                     }\n                     break;\n-\n+                case KeyVaultClientSecret:\n+                    // need a secret use use the secret method\n+                    if (null == keyStoreSecret) {\n+                        throw new SQLServerException(\n+                                SQLServerException.getErrString(\"R_keyStoreSecretOrLocationNotSet\"), null);\n+                    } else {\n+                        SQLServerColumnEncryptionAzureKeyVaultProvider provider = new SQLServerColumnEncryptionAzureKeyVaultProvider(\n+                                keyStorePrincipalId, keyStoreSecret);\n+                        Map<String, SQLServerColumnEncryptionKeyStoreProvider> keyStoreMap = new HashMap<String, SQLServerColumnEncryptionKeyStoreProvider>();\n+                        keyStoreMap.put(provider.getName(), provider);\n+                        registerColumnEncryptionKeyStoreProviders(keyStoreMap);", "originalCommit": "2a55d5b70b3dc899ddee573e04564d0ee6647c00", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTAzNjI0OA==", "url": "https://github.com/microsoft/mssql-jdbc/pull/1286#discussion_r401036248", "bodyText": "Response codes shouldn't be magic numbers, better to create constants and document a little of their meaning in comments. I think this part of the code is just moved though so please document/create a work item.", "author": "rene-ye", "createdAt": "2020-03-31T16:08:31Z", "path": "src/main/java/com/microsoft/sqlserver/jdbc/SQLServerSecurityUtility.java", "diffHunk": "@@ -215,4 +234,164 @@ static void verifyColumnMasterKeyMetadata(SQLServerConnection connection, String\n             throw new SQLServerException(SQLServerException.getErrString(\"R_VerifySignature\"), null);\r\n         }\r\n     }\r\n+\r\n+    /**\r\n+     * Get Managed Identity Authentication token\r\n+     * \r\n+     * @param resource\r\n+     *        token resource\r\n+     * @param msiClientId\r\n+     *        Managed Identity or User Assigned Managed Identity\r\n+     * @return fedauth token\r\n+     * @throws SQLServerException\r\n+     */\r\n+    static SqlFedAuthToken getMSIAuthToken(String resource, String msiClientId) throws SQLServerException {\r\n+        // IMDS upgrade time can take up to 70s\r\n+        final int imdsUpgradeTimeInMs = 70 * 1000;\r\n+        final List<Integer> retrySlots = new ArrayList<>();\r\n+        final String msiEndpoint = System.getenv(\"MSI_ENDPOINT\");\r\n+        final String msiSecret = System.getenv(\"MSI_SECRET\");\r\n+\r\n+        StringBuilder urlString = new StringBuilder();\r\n+        int retry = 1, maxRetry = 1;\r\n+\r\n+        /*\r\n+         * isAzureFunction is used for identifying if the current client application is running in a Virtual Machine\r\n+         * (without MSI environment variables) or App Service/Function (with MSI environment variables) as the APIs to\r\n+         * be called for acquiring MSI Token are different for both cases.\r\n+         */\r\n+        boolean isAzureFunction = null != msiEndpoint && !msiEndpoint.isEmpty() && null != msiSecret\r\n+                && !msiSecret.isEmpty();\r\n+\r\n+        if (isAzureFunction) {\r\n+            urlString.append(msiEndpoint).append(\"?api-version=2017-09-01&resource=\").append(resource);\r\n+        } else {\r\n+            urlString.append(ActiveDirectoryAuthentication.AZURE_REST_MSI_URL).append(\"&resource=\").append(resource);\r\n+            // Retry acquiring access token upto 20 times due to possible IMDS upgrade (Applies to VM only)\r\n+            maxRetry = 20;\r\n+            // Simplified variant of Exponential BackOff\r\n+            for (int x = 0; x < maxRetry; x++) {\r\n+                retrySlots.add(500 * ((2 << 1) - 1) / 1000);\r\n+            }\r\n+        }\r\n+\r\n+        // Append Client Id if available\r\n+        if (null != msiClientId && !msiClientId.isEmpty()) {\r\n+            if (isAzureFunction) {\r\n+                urlString.append(\"&clientid=\").append(msiClientId);\r\n+            } else {\r\n+                urlString.append(\"&client_id=\").append(msiClientId);\r\n+            }\r\n+        }\r\n+\r\n+        // Loop while maxRetry reaches its limit\r\n+        while (retry <= maxRetry) {\r\n+            HttpURLConnection connection = null;\r\n+\r\n+            try {\r\n+                connection = (HttpURLConnection) new URL(urlString.toString()).openConnection();\r\n+                connection.setRequestMethod(\"GET\");\r\n+\r\n+                if (isAzureFunction) {\r\n+                    connection.setRequestProperty(\"Secret\", msiSecret);\r\n+                    if (connectionlogger.isLoggable(Level.FINER)) {\r\n+                        connectionlogger.finer(\"Using Azure Function/App Service MSI auth: \" + urlString);\r\n+                    }\r\n+                } else {\r\n+                    connection.setRequestProperty(\"Metadata\", \"true\");\r\n+                    if (connectionlogger.isLoggable(Level.FINER)) {\r\n+                        connectionlogger.finer(\"Using Azure MSI auth: \" + urlString);\r\n+                    }\r\n+                }\r\n+\r\n+                connection.connect();\r\n+\r\n+                try (InputStream stream = connection.getInputStream()) {\r\n+\r\n+                    BufferedReader reader = new BufferedReader(new InputStreamReader(stream, UTF_8), 100);\r\n+                    String result = reader.readLine();\r\n+\r\n+                    int startIndex_AT = result.indexOf(ActiveDirectoryAuthentication.ACCESS_TOKEN_IDENTIFIER)\r\n+                            + ActiveDirectoryAuthentication.ACCESS_TOKEN_IDENTIFIER.length();\r\n+\r\n+                    String accessToken = result.substring(startIndex_AT, result.indexOf(\"\\\"\", startIndex_AT + 1));\r\n+\r\n+                    Calendar cal = new Calendar.Builder().setInstant(new Date()).build();\r\n+\r\n+                    if (isAzureFunction) {\r\n+                        // Fetch expires_on\r\n+                        int startIndex_ATX = result\r\n+                                .indexOf(ActiveDirectoryAuthentication.ACCESS_TOKEN_EXPIRES_ON_IDENTIFIER)\r\n+                                + ActiveDirectoryAuthentication.ACCESS_TOKEN_EXPIRES_ON_IDENTIFIER.length();\r\n+                        String accessTokenExpiry = result.substring(startIndex_ATX,\r\n+                                result.indexOf(\"\\\"\", startIndex_ATX + 1));\r\n+                        if (connectionlogger.isLoggable(Level.FINER)) {\r\n+                            connectionlogger.finer(\"MSI auth token expires on: \" + accessTokenExpiry);\r\n+                        }\r\n+\r\n+                        DateFormat df = new SimpleDateFormat(\r\n+                                ActiveDirectoryAuthentication.ACCESS_TOKEN_EXPIRES_ON_DATE_FORMAT);\r\n+                        cal = new Calendar.Builder().setInstant(df.parse(accessTokenExpiry)).build();\r\n+                    } else {\r\n+                        // Fetch expires_in\r\n+                        int startIndex_ATX = result\r\n+                                .indexOf(ActiveDirectoryAuthentication.ACCESS_TOKEN_EXPIRES_IN_IDENTIFIER)\r\n+                                + ActiveDirectoryAuthentication.ACCESS_TOKEN_EXPIRES_IN_IDENTIFIER.length();\r\n+                        String accessTokenExpiry = result.substring(startIndex_ATX,\r\n+                                result.indexOf(\"\\\"\", startIndex_ATX + 1));\r\n+                        cal.add(Calendar.SECOND, Integer.parseInt(accessTokenExpiry));\r\n+                    }\r\n+\r\n+                    return new SqlFedAuthToken(accessToken, cal.getTime());\r\n+                }\r\n+            } catch (Exception e) {\r\n+                retry++;\r\n+                // Below code applicable only when !isAzureFunctcion (VM)\r\n+                if (retry > maxRetry) {\r\n+                    // Do not retry if maxRetry limit has been reached.\r\n+                    break;\r\n+                } else {\r\n+                    try {\r\n+                        int responseCode = connection.getResponseCode();\r\n+                        // Check Error Response Code from Connection\r\n+                        if (410 == responseCode || 429 == responseCode || 404 == responseCode\r\n+                                || (500 <= responseCode && 599 >= responseCode)) {\r", "originalCommit": "2a55d5b70b3dc899ddee573e04564d0ee6647c00", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTA4MTI3Mg==", "url": "https://github.com/microsoft/mssql-jdbc/pull/1286#discussion_r401081272", "bodyText": "From ODBC docs, keyStorePrincipalId description:\nWhen KeyStoreAuthentication = KeyVaultPassword, set this value to a valid Azure Active Directory User Principal Name.\nWhen KeyStoreAuthetication = KeyVaultClientSecret set this value to a valid Azure Active Directory Application Client ID", "author": "ulvii", "createdAt": "2020-03-31T17:17:03Z", "path": "src/main/java/com/microsoft/sqlserver/jdbc/ISQLServerDataSource.java", "diffHunk": "@@ -821,6 +821,21 @@\n      */\n     String getMSIClientId();\n \n+    /**\n+     * Sets the Azure Active Directory Application Client ID.", "originalCommit": "2a55d5b70b3dc899ddee573e04564d0ee6647c00", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE1MzYzOQ==", "url": "https://github.com/microsoft/mssql-jdbc/pull/1286#discussion_r401153639", "bodyText": "Please set Javadoc to this\n    /**\n     * Sets the value for the connection property 'keyStorePrincipalId'.\n     * \n     * @param keyStorePrincipalId\n     * \n     *        <pre>\n     *        When keyStoreAuthentication = keyVaultPassword, set this value to a valid Azure Active Directory User Principal Name.\n     *        When keyStoreAuthentication = keyVaultClientSecret, set this value to a valid Azure Active Directory Application Client ID.\n     *        When keyStoreAuthentication = keyVaultManagedIdentity, set this value to a valid Azure Active Directory Application Object ID (optional, for user-assigned only).\n     *        </pre>\n     */", "author": "ulvii", "createdAt": "2020-03-31T19:16:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTA4MTI3Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTA4Nzg5MA==", "url": "https://github.com/microsoft/mssql-jdbc/pull/1286#discussion_r401087890", "bodyText": "Please add proper javadoc, this is a public API.", "author": "ulvii", "createdAt": "2020-03-31T17:27:29Z", "path": "src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java", "diffHunk": "@@ -720,6 +722,23 @@ public static synchronized void registerColumnEncryptionKeyStoreProviders(\n                         + globalCustomColumnEncryptionKeyStoreProviders.size());\n     }\n \n+    /**\n+     * Unregisters the custom key store providers from the globalCustomColumnEncryptionKeyStoreProviders.", "originalCommit": "2a55d5b70b3dc899ddee573e04564d0ee6647c00", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "795e653ee609c10fc71ed37f08e7174e9b78b87b", "url": "https://github.com/microsoft/mssql-jdbc/commit/795e653ee609c10fc71ed37f08e7174e9b78b87b", "message": "review updates", "committedDate": "2020-03-31T18:08:45Z", "type": "commit"}, {"oid": "88d5d708fbaeb96fc9eaa0625fdbf01f842dd248", "url": "https://github.com/microsoft/mssql-jdbc/commit/88d5d708fbaeb96fc9eaa0625fdbf01f842dd248", "message": "more review updates", "committedDate": "2020-03-31T18:45:20Z", "type": "commit"}, {"oid": "91639a5bc7eb9bf5ce36972f3a254376a3077b1c", "url": "https://github.com/microsoft/mssql-jdbc/commit/91639a5bc7eb9bf5ce36972f3a254376a3077b1c", "message": "javadoc update", "committedDate": "2020-03-31T19:33:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE4MDg5Nw==", "url": "https://github.com/microsoft/mssql-jdbc/pull/1286#discussion_r401180897", "bodyText": "R_keyStoreSecretOrLocationNotSet message does not make sense for this future.", "author": "ulvii", "createdAt": "2020-03-31T20:04:56Z", "path": "src/main/java/com/microsoft/sqlserver/jdbc/SQLServerConnection.java", "diffHunk": "@@ -1291,7 +1301,30 @@ private void registerKeyStoreProviderOnConnection(String keyStoreAuth, String ke\n                         systemColumnEncryptionKeyStoreProvider.put(provider.getName(), provider);\n                     }\n                     break;\n-\n+                case KeyVaultClientSecret:\n+                    // need a secret use use the secret method\n+                    if (null == keyStoreSecret) {\n+                        throw new SQLServerException(\n+                                SQLServerException.getErrString(\"R_keyStoreSecretOrLocationNotSet\"), null);", "originalCommit": "91639a5bc7eb9bf5ce36972f3a254376a3077b1c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "7ddd56156e31b863bb36352cc6c5015059e13380", "url": "https://github.com/microsoft/mssql-jdbc/commit/7ddd56156e31b863bb36352cc6c5015059e13380", "message": "updated SQLServerConnection loggingClassName", "committedDate": "2020-03-31T20:07:29Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE5MDUxMA==", "url": "https://github.com/microsoft/mssql-jdbc/pull/1286#discussion_r401190510", "bodyText": "How is this testing MSI auth? You are using the global connection stirng.", "author": "ulvii", "createdAt": "2020-03-31T20:21:32Z", "path": "src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/*\r\n+ * Microsoft JDBC Driver for SQL Server Copyright(c) Microsoft Corporation All rights reserved. This program is made\r\n+ * available under the terms of the MIT License. See the LICENSE file in the project root for more information.\r\n+ */\r\n+package com.microsoft.sqlserver.jdbc.AlwaysEncrypted;\r\n+\r\n+import static org.junit.jupiter.api.Assertions.fail;\r\n+\r\n+import java.sql.Connection;\r\n+import java.sql.ResultSet;\r\n+import java.sql.SQLException;\r\n+import java.sql.Statement;\r\n+\r\n+import org.junit.jupiter.api.Tag;\r\n+import org.junit.jupiter.api.Test;\r\n+import org.junit.platform.runner.JUnitPlatform;\r\n+import org.junit.runner.RunWith;\r\n+\r\n+import com.microsoft.sqlserver.jdbc.SQLServerConnection;\r\n+import com.microsoft.sqlserver.jdbc.SQLServerDataSource;\r\n+import com.microsoft.sqlserver.jdbc.SQLServerPreparedStatement;\r\n+import com.microsoft.sqlserver.jdbc.SQLServerResultSet;\r\n+import com.microsoft.sqlserver.jdbc.SQLServerStatement;\r\n+import com.microsoft.sqlserver.jdbc.TestResource;\r\n+import com.microsoft.sqlserver.jdbc.TestUtils;\r\n+import com.microsoft.sqlserver.testframework.AbstractTest;\r\n+import com.microsoft.sqlserver.testframework.Constants;\r\n+import com.microsoft.sqlserver.testframework.PrepUtil;\r\n+\r\n+\r\n+/**\r\n+ * Tests involving MSI authentication\r\n+ */\r\n+@RunWith(JUnitPlatform.class)\r\n+@Tag(Constants.MSI)\r\n+public class MSITest extends AESetup {\r\n+    /*\r\n+     * Test basic MSI auth\r\n+     */\r\n+    @Test\r\n+    public void testAuth() throws SQLException {\r\n+        try (SQLServerConnection con = PrepUtil.getConnection(connectionString)) {} catch (Exception e) {\r", "originalCommit": "7ddd56156e31b863bb36352cc6c5015059e13380", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE5MDY4NQ==", "url": "https://github.com/microsoft/mssql-jdbc/pull/1286#discussion_r401190685", "bodyText": "Same here, how is this testing MSI auth?", "author": "ulvii", "createdAt": "2020-03-31T20:21:49Z", "path": "src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/*\r\n+ * Microsoft JDBC Driver for SQL Server Copyright(c) Microsoft Corporation All rights reserved. This program is made\r\n+ * available under the terms of the MIT License. See the LICENSE file in the project root for more information.\r\n+ */\r\n+package com.microsoft.sqlserver.jdbc.AlwaysEncrypted;\r\n+\r\n+import static org.junit.jupiter.api.Assertions.fail;\r\n+\r\n+import java.sql.Connection;\r\n+import java.sql.ResultSet;\r\n+import java.sql.SQLException;\r\n+import java.sql.Statement;\r\n+\r\n+import org.junit.jupiter.api.Tag;\r\n+import org.junit.jupiter.api.Test;\r\n+import org.junit.platform.runner.JUnitPlatform;\r\n+import org.junit.runner.RunWith;\r\n+\r\n+import com.microsoft.sqlserver.jdbc.SQLServerConnection;\r\n+import com.microsoft.sqlserver.jdbc.SQLServerDataSource;\r\n+import com.microsoft.sqlserver.jdbc.SQLServerPreparedStatement;\r\n+import com.microsoft.sqlserver.jdbc.SQLServerResultSet;\r\n+import com.microsoft.sqlserver.jdbc.SQLServerStatement;\r\n+import com.microsoft.sqlserver.jdbc.TestResource;\r\n+import com.microsoft.sqlserver.jdbc.TestUtils;\r\n+import com.microsoft.sqlserver.testframework.AbstractTest;\r\n+import com.microsoft.sqlserver.testframework.Constants;\r\n+import com.microsoft.sqlserver.testframework.PrepUtil;\r\n+\r\n+\r\n+/**\r\n+ * Tests involving MSI authentication\r\n+ */\r\n+@RunWith(JUnitPlatform.class)\r\n+@Tag(Constants.MSI)\r\n+public class MSITest extends AESetup {\r\n+    /*\r\n+     * Test basic MSI auth\r\n+     */\r\n+    @Test\r\n+    public void testAuth() throws SQLException {\r\n+        try (SQLServerConnection con = PrepUtil.getConnection(connectionString)) {} catch (Exception e) {\r\n+            fail(TestResource.getResource(\"R_loginFailed\") + e.getMessage());\r\n+        }\r\n+    }\r\n+\r\n+    /*\r\n+     * Test MSI auth using datasource\r\n+     */\r\n+    @Test\r\n+    public void testDSAuth() throws SQLException {\r\n+        SQLServerDataSource ds = new SQLServerDataSource();\r\n+        AbstractTest.updateDataSource(connectionString, ds);\r", "originalCommit": "7ddd56156e31b863bb36352cc6c5015059e13380", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE5NDQyMw==", "url": "https://github.com/microsoft/mssql-jdbc/pull/1286#discussion_r401194423", "bodyText": "Login failed? This catch block implies that, the only exception that can happen inside try block is due to a login failure. Just remove the catch block and let the test throw the original exception.", "author": "ulvii", "createdAt": "2020-03-31T20:28:17Z", "path": "src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/*\r\n+ * Microsoft JDBC Driver for SQL Server Copyright(c) Microsoft Corporation All rights reserved. This program is made\r\n+ * available under the terms of the MIT License. See the LICENSE file in the project root for more information.\r\n+ */\r\n+package com.microsoft.sqlserver.jdbc.AlwaysEncrypted;\r\n+\r\n+import static org.junit.jupiter.api.Assertions.fail;\r\n+\r\n+import java.sql.Connection;\r\n+import java.sql.ResultSet;\r\n+import java.sql.SQLException;\r\n+import java.sql.Statement;\r\n+\r\n+import org.junit.jupiter.api.Tag;\r\n+import org.junit.jupiter.api.Test;\r\n+import org.junit.platform.runner.JUnitPlatform;\r\n+import org.junit.runner.RunWith;\r\n+\r\n+import com.microsoft.sqlserver.jdbc.SQLServerConnection;\r\n+import com.microsoft.sqlserver.jdbc.SQLServerDataSource;\r\n+import com.microsoft.sqlserver.jdbc.SQLServerPreparedStatement;\r\n+import com.microsoft.sqlserver.jdbc.SQLServerResultSet;\r\n+import com.microsoft.sqlserver.jdbc.SQLServerStatement;\r\n+import com.microsoft.sqlserver.jdbc.TestResource;\r\n+import com.microsoft.sqlserver.jdbc.TestUtils;\r\n+import com.microsoft.sqlserver.testframework.AbstractTest;\r\n+import com.microsoft.sqlserver.testframework.Constants;\r\n+import com.microsoft.sqlserver.testframework.PrepUtil;\r\n+\r\n+\r\n+/**\r\n+ * Tests involving MSI authentication\r\n+ */\r\n+@RunWith(JUnitPlatform.class)\r\n+@Tag(Constants.MSI)\r\n+public class MSITest extends AESetup {\r\n+    /*\r\n+     * Test basic MSI auth\r\n+     */\r\n+    @Test\r\n+    public void testAuth() throws SQLException {\r\n+        try (SQLServerConnection con = PrepUtil.getConnection(connectionString)) {} catch (Exception e) {\r\n+            fail(TestResource.getResource(\"R_loginFailed\") + e.getMessage());\r\n+        }\r\n+    }\r\n+\r\n+    /*\r\n+     * Test MSI auth using datasource\r\n+     */\r\n+    @Test\r\n+    public void testDSAuth() throws SQLException {\r\n+        SQLServerDataSource ds = new SQLServerDataSource();\r\n+        AbstractTest.updateDataSource(connectionString, ds);\r\n+\r\n+        try (Connection con = ds.getConnection(); Statement stmt = con.createStatement()) {} catch (Exception e) {\r\n+            fail(TestResource.getResource(\"R_loginFailed\") + e.getMessage());\r\n+        }\r\n+    }\r\n+\r\n+    /*\r\n+     * Test AKV with with credentials\r\n+     */\r\n+    @Test\r\n+    public void testCharAkvWithCred() throws SQLException {\r\n+        // unregister the custom providers registered in AESetup\r\n+        SQLServerConnection.unregisterColumnEncryptionKeyStoreProviders();\r\n+\r\n+        // add credentials to connection string\r\n+        String connStr = AETestConnectionString;\r\n+        connStr = TestUtils.addOrOverrideProperty(connStr, Constants.KEYSTORE_AUTHENTICATION, \"KeyVaultClientSecret\");\r\n+        connStr = TestUtils.addOrOverrideProperty(connStr, Constants.KEYSTORE_PRINCIPALID, keyStorePrincipalId);\r\n+        connStr = TestUtils.addOrOverrideProperty(connStr, Constants.KEYSTORE_SECRET, keyStoreSecret);\r\n+        testCharAkv(connStr);\r\n+    }\r\n+\r\n+    /*\r\n+     * Test AKV with MSI\r\n+     */\r\n+    @Test\r\n+    public void testCharAkvWithMSI() throws SQLException {\r\n+        // unregister the custom providers registered in AESetup\r\n+        SQLServerConnection.unregisterColumnEncryptionKeyStoreProviders();\r\n+\r\n+        // set to use Managed Identity for keystore auth\r\n+        String connStr = AETestConnectionString;\r\n+        connStr = TestUtils.addOrOverrideProperty(connStr, Constants.KEYSTORE_AUTHENTICATION,\r\n+                \"KeyVaultManagedIdentity\");\r\n+        testCharAkv(connStr);\r\n+    }\r\n+\r\n+    /*\r\n+     * Test AKV with with bad credentials\r\n+     */\r\n+    @Test\r\n+    public void testNumericAkvWithBadCred() throws SQLException {\r\n+        // unregister the custom providers registered in AESetup\r\n+        SQLServerConnection.unregisterColumnEncryptionKeyStoreProviders();\r\n+\r\n+        // add credentials to connection string\r\n+        String connStr = AETestConnectionString;\r\n+        connStr = TestUtils.addOrOverrideProperty(connStr, Constants.KEYSTORE_AUTHENTICATION, \"KeyVaultClientSecret\");\r\n+        connStr = TestUtils.addOrOverrideProperty(connStr, Constants.KEYSTORE_PRINCIPALID, \"bad\");\r\n+        connStr = TestUtils.addOrOverrideProperty(connStr, Constants.KEYSTORE_SECRET, \"bad\");\r\n+        try {\r\n+            testNumericAKV(connStr);\r\n+            fail(TestResource.getResource(\"R_expectedFailPassed\"));\r\n+        } catch (Exception e) {\r\n+            assert (e.getMessage().contains(\"AuthenticationException\"));\r\n+        }\r\n+    }\r\n+\r\n+    /*\r\n+     * Test AKV with with credentials\r\n+     */\r\n+    @Test\r\n+    public void testNumericAkvWithCred() throws SQLException {\r\n+        // unregister the custom providers registered in AESetup\r\n+        SQLServerConnection.unregisterColumnEncryptionKeyStoreProviders();\r\n+\r\n+        // add credentials to connection string\r\n+        String connStr = AETestConnectionString;\r\n+        connStr = TestUtils.addOrOverrideProperty(connStr, Constants.KEYSTORE_AUTHENTICATION, \"KeyVaultClientSecret\");\r\n+        connStr = TestUtils.addOrOverrideProperty(connStr, Constants.KEYSTORE_PRINCIPALID, keyStorePrincipalId);\r\n+        connStr = TestUtils.addOrOverrideProperty(connStr, Constants.KEYSTORE_SECRET, keyStoreSecret);\r\n+        testNumericAKV(connStr);\r\n+    }\r\n+\r\n+    /*\r\n+     * Test AKV with MSI\r\n+     */\r\n+    @Test\r\n+    public void testNumericAkvWithMSI() throws SQLException {\r\n+        // unregister the custom providers registered in AESetup\r\n+        SQLServerConnection.unregisterColumnEncryptionKeyStoreProviders();\r\n+\r\n+        // set to use Managed Identity for keystore auth\r\n+        String connStr = AETestConnectionString;\r\n+        connStr = TestUtils.addOrOverrideProperty(connStr, Constants.KEYSTORE_AUTHENTICATION,\r\n+                \"KeyVaultManagedIdentity\");\r\n+        testNumericAKV(connStr);\r\n+    }\r\n+\r\n+    private void testCharAkv(String connStr) throws SQLException {\r\n+        String sql = \"select * from \" + CHAR_TABLE_AE;\r\n+        try (SQLServerConnection con = PrepUtil.getConnection(connStr);\r\n+                SQLServerStatement stmt = (SQLServerStatement) con.createStatement();\r\n+                SQLServerPreparedStatement pstmt = (SQLServerPreparedStatement) TestUtils.getPreparedStmt(con, sql,\r\n+                        stmtColEncSetting)) {\r\n+            TestUtils.dropTableIfExists(CHAR_TABLE_AE, stmt);\r\n+            createTable(CHAR_TABLE_AE, cekAkv, charTable);\r\n+            String[] values = createCharValues(false);\r\n+            populateCharNormalCase(values);\r\n+\r\n+            try (ResultSet rs = (null == stmt) ? pstmt.executeQuery() : stmt.executeQuery(sql)) {\r\n+                int numberOfColumns = rs.getMetaData().getColumnCount();\r\n+                while (rs.next()) {\r\n+                    AECommon.testGetString(rs, numberOfColumns, values);\r\n+                    AECommon.testGetObject(rs, numberOfColumns, values);\r\n+                }\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    private void testNumericAKV(String connStr) throws SQLException {\r\n+        String sql = \"select * from \" + NUMERIC_TABLE_AE;\r\n+        try (SQLServerConnection con = PrepUtil.getConnection(connStr);\r\n+                SQLServerStatement stmt = (SQLServerStatement) con.createStatement();\r\n+                SQLServerPreparedStatement pstmt = (SQLServerPreparedStatement) TestUtils.getPreparedStmt(con, sql,\r\n+                        stmtColEncSetting)) {\r\n+            TestUtils.dropTableIfExists(NUMERIC_TABLE_AE, stmt);\r\n+            createTable(NUMERIC_TABLE_AE, cekAkv, numericTable);\r\n+            String[] values = createNumericValues(false);\r\n+            populateNumeric(values);\r\n+\r\n+            try (SQLServerResultSet rs = (null == stmt) ? (SQLServerResultSet) pstmt.executeQuery()\r\n+                                                        : (SQLServerResultSet) stmt.executeQuery(sql)) {\r\n+                int numberOfColumns = rs.getMetaData().getColumnCount();\r\n+                while (rs.next()) {\r\n+                    AECommon.testGetString(rs, numberOfColumns, values);\r\n+                    AECommon.testGetObject(rs, numberOfColumns, values);\r\n+                    AECommon.testGetBigDecimal(rs, numberOfColumns, values);\r\n+                    AECommon.testWithSpecifiedtype(rs, numberOfColumns, values);\r\n+                }\r\n+            } catch (Exception e) {\r\n+                fail(TestResource.getResource(\"R_loginFailed\") + e.getMessage());\r", "originalCommit": "7ddd56156e31b863bb36352cc6c5015059e13380", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTIwMDY3Mw==", "url": "https://github.com/microsoft/mssql-jdbc/pull/1286#discussion_r401200673", "bodyText": "I would prefer to use KeyVaultManagedIdentity here, that is what the feature is about.", "author": "ulvii", "createdAt": "2020-03-31T20:39:20Z", "path": "src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/*\r\n+ * Microsoft JDBC Driver for SQL Server Copyright(c) Microsoft Corporation All rights reserved. This program is made\r\n+ * available under the terms of the MIT License. See the LICENSE file in the project root for more information.\r\n+ */\r\n+package com.microsoft.sqlserver.jdbc.AlwaysEncrypted;\r\n+\r\n+import static org.junit.jupiter.api.Assertions.fail;\r\n+\r\n+import java.sql.Connection;\r\n+import java.sql.ResultSet;\r\n+import java.sql.SQLException;\r\n+import java.sql.Statement;\r\n+\r\n+import org.junit.jupiter.api.Tag;\r\n+import org.junit.jupiter.api.Test;\r\n+import org.junit.platform.runner.JUnitPlatform;\r\n+import org.junit.runner.RunWith;\r\n+\r\n+import com.microsoft.sqlserver.jdbc.SQLServerConnection;\r\n+import com.microsoft.sqlserver.jdbc.SQLServerDataSource;\r\n+import com.microsoft.sqlserver.jdbc.SQLServerPreparedStatement;\r\n+import com.microsoft.sqlserver.jdbc.SQLServerResultSet;\r\n+import com.microsoft.sqlserver.jdbc.SQLServerStatement;\r\n+import com.microsoft.sqlserver.jdbc.TestResource;\r\n+import com.microsoft.sqlserver.jdbc.TestUtils;\r\n+import com.microsoft.sqlserver.testframework.AbstractTest;\r\n+import com.microsoft.sqlserver.testframework.Constants;\r\n+import com.microsoft.sqlserver.testframework.PrepUtil;\r\n+\r\n+\r\n+/**\r\n+ * Tests involving MSI authentication\r\n+ */\r\n+@RunWith(JUnitPlatform.class)\r\n+@Tag(Constants.MSI)\r\n+public class MSITest extends AESetup {\r\n+    /*\r\n+     * Test basic MSI auth\r\n+     */\r\n+    @Test\r\n+    public void testAuth() throws SQLException {\r\n+        try (SQLServerConnection con = PrepUtil.getConnection(connectionString)) {} catch (Exception e) {\r\n+            fail(TestResource.getResource(\"R_loginFailed\") + e.getMessage());\r\n+        }\r\n+    }\r\n+\r\n+    /*\r\n+     * Test MSI auth using datasource\r\n+     */\r\n+    @Test\r\n+    public void testDSAuth() throws SQLException {\r\n+        SQLServerDataSource ds = new SQLServerDataSource();\r\n+        AbstractTest.updateDataSource(connectionString, ds);\r\n+\r\n+        try (Connection con = ds.getConnection(); Statement stmt = con.createStatement()) {} catch (Exception e) {\r\n+            fail(TestResource.getResource(\"R_loginFailed\") + e.getMessage());\r\n+        }\r\n+    }\r\n+\r\n+    /*\r\n+     * Test AKV with with credentials\r\n+     */\r\n+    @Test\r\n+    public void testCharAkvWithCred() throws SQLException {\r\n+        // unregister the custom providers registered in AESetup\r\n+        SQLServerConnection.unregisterColumnEncryptionKeyStoreProviders();\r\n+\r\n+        // add credentials to connection string\r\n+        String connStr = AETestConnectionString;\r\n+        connStr = TestUtils.addOrOverrideProperty(connStr, Constants.KEYSTORE_AUTHENTICATION, \"KeyVaultClientSecret\");\r\n+        connStr = TestUtils.addOrOverrideProperty(connStr, Constants.KEYSTORE_PRINCIPALID, keyStorePrincipalId);\r\n+        connStr = TestUtils.addOrOverrideProperty(connStr, Constants.KEYSTORE_SECRET, keyStoreSecret);\r\n+        testCharAkv(connStr);\r\n+    }\r\n+\r\n+    /*\r\n+     * Test AKV with MSI\r\n+     */\r\n+    @Test\r\n+    public void testCharAkvWithMSI() throws SQLException {\r\n+        // unregister the custom providers registered in AESetup\r\n+        SQLServerConnection.unregisterColumnEncryptionKeyStoreProviders();\r\n+\r\n+        // set to use Managed Identity for keystore auth\r\n+        String connStr = AETestConnectionString;\r\n+        connStr = TestUtils.addOrOverrideProperty(connStr, Constants.KEYSTORE_AUTHENTICATION,\r\n+                \"KeyVaultManagedIdentity\");\r\n+        testCharAkv(connStr);\r\n+    }\r\n+\r\n+    /*\r\n+     * Test AKV with with bad credentials\r\n+     */\r\n+    @Test\r\n+    public void testNumericAkvWithBadCred() throws SQLException {\r\n+        // unregister the custom providers registered in AESetup\r\n+        SQLServerConnection.unregisterColumnEncryptionKeyStoreProviders();\r\n+\r\n+        // add credentials to connection string\r\n+        String connStr = AETestConnectionString;\r\n+        connStr = TestUtils.addOrOverrideProperty(connStr, Constants.KEYSTORE_AUTHENTICATION, \"KeyVaultClientSecret\");\r", "originalCommit": "7ddd56156e31b863bb36352cc6c5015059e13380", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "ee0a1fbf0e356627076da3cda6b520bbb8c61f54", "url": "https://github.com/microsoft/mssql-jdbc/commit/ee0a1fbf0e356627076da3cda6b520bbb8c61f54", "message": "added tests for MSI and principal id only", "committedDate": "2020-03-31T20:57:26Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTIyNzczNg==", "url": "https://github.com/microsoft/mssql-jdbc/pull/1286#discussion_r401227736", "bodyText": "Requests", "author": "rene-ye", "createdAt": "2020-03-31T21:31:45Z", "path": "src/main/java/com/microsoft/sqlserver/jdbc/SQLServerSecurityUtility.java", "diffHunk": "@@ -5,21 +5,46 @@\n \r\n package com.microsoft.sqlserver.jdbc;\r\n \r\n+import static java.nio.charset.StandardCharsets.UTF_8;\r\n+\r\n+import java.io.BufferedReader;\r\n+import java.io.IOException;\r\n+import java.io.InputStream;\r\n+import java.io.InputStreamReader;\r\n+import java.net.HttpURLConnection;\r\n+import java.net.URL;\r\n import java.security.InvalidKeyException;\r\n import java.security.NoSuchAlgorithmException;\r\n+import java.text.DateFormat;\r\n import java.text.MessageFormat;\r\n+import java.text.SimpleDateFormat;\r\n+import java.util.ArrayList;\r\n+import java.util.Calendar;\r\n+import java.util.Date;\r\n import java.util.Iterator;\r\n import java.util.List;\r\n+import java.util.concurrent.ThreadLocalRandom;\r\n+import java.util.logging.Level;\r\n \r\n import javax.crypto.Mac;\r\n import javax.crypto.spec.SecretKeySpec;\r\n \r\n+import com.microsoft.sqlserver.jdbc.SQLServerConnection.ActiveDirectoryAuthentication;\r\n+\r\n \r\n /**\r\n  * Various SQLServer security utilities.\r\n  *\r\n  */\r\n class SQLServerSecurityUtility {\r\n+    static final private java.util.logging.Logger connectionlogger = java.util.logging.Logger\r\n+            .getLogger(\"com.microsoft.sqlserver.jdbc.internals.SQLServerConnection\");\r\n+\r\n+    static final int GONE = 410;\r\n+    static final int TOO_MANY_RESQUESTS = 429;\r", "originalCommit": "ee0a1fbf0e356627076da3cda6b520bbb8c61f54", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "906a1111568824fa48dcbc4392d7c9da90f09a56", "url": "https://github.com/microsoft/mssql-jdbc/commit/906a1111568824fa48dcbc4392d7c9da90f09a56", "message": "review updates", "committedDate": "2020-03-31T21:44:26Z", "type": "commit"}, {"oid": "19e28a736913cf56e6caee992cce8f3b9de2b090", "url": "https://github.com/microsoft/mssql-jdbc/commit/19e28a736913cf56e6caee992cce8f3b9de2b090", "message": "added more MSI auth tests", "committedDate": "2020-03-31T22:20:59Z", "type": "commit"}, {"oid": "0b0d70d10810320422c1b359acb304ff9cf639fd", "url": "https://github.com/microsoft/mssql-jdbc/commit/0b0d70d10810320422c1b359acb304ff9cf639fd", "message": "tag for testing MSI auth", "committedDate": "2020-03-31T22:35:12Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI1NzU2OQ==", "url": "https://github.com/microsoft/mssql-jdbc/pull/1286#discussion_r401257569", "bodyText": "Please also add similar tests that test ActiveDirectoryMSI along with msiClientId", "author": "ulvii", "createdAt": "2020-03-31T22:41:56Z", "path": "src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java", "diffHunk": "@@ -0,0 +1,257 @@\n+/*\r\n+ * Microsoft JDBC Driver for SQL Server Copyright(c) Microsoft Corporation All rights reserved. This program is made\r\n+ * available under the terms of the MIT License. See the LICENSE file in the project root for more information.\r\n+ */\r\n+package com.microsoft.sqlserver.jdbc.AlwaysEncrypted;\r\n+\r\n+import static org.junit.jupiter.api.Assertions.fail;\r\n+\r\n+import java.sql.Connection;\r\n+import java.sql.ResultSet;\r\n+import java.sql.SQLException;\r\n+import java.sql.Statement;\r\n+\r\n+import org.junit.jupiter.api.Tag;\r\n+import org.junit.jupiter.api.Test;\r\n+import org.junit.platform.runner.JUnitPlatform;\r\n+import org.junit.runner.RunWith;\r\n+\r\n+import com.microsoft.aad.adal4j.AuthenticationException;\r\n+import com.microsoft.sqlserver.jdbc.SQLServerConnection;\r\n+import com.microsoft.sqlserver.jdbc.SQLServerDataSource;\r\n+import com.microsoft.sqlserver.jdbc.SQLServerPreparedStatement;\r\n+import com.microsoft.sqlserver.jdbc.SQLServerResultSet;\r\n+import com.microsoft.sqlserver.jdbc.SQLServerStatement;\r\n+import com.microsoft.sqlserver.jdbc.TestResource;\r\n+import com.microsoft.sqlserver.jdbc.TestUtils;\r\n+import com.microsoft.sqlserver.testframework.AbstractTest;\r\n+import com.microsoft.sqlserver.testframework.Constants;\r\n+import com.microsoft.sqlserver.testframework.PrepUtil;\r\n+import static org.junit.jupiter.api.Assertions.assertTrue;\r\n+\r\n+\r\n+/**\r\n+ * Tests involving MSI authentication\r\n+ */\r\n+@RunWith(JUnitPlatform.class)\r\n+@Tag(Constants.MSI)\r\n+public class MSITest extends AESetup {\r\n+\r\n+    /*\r\n+     * Test MSI auth\r\n+     */\r\n+    @Tag(Constants.xSQLv12)\r\n+    @Tag(Constants.xSQLv14)\r\n+    @Tag(Constants.xSQLv15)\r\n+    @Test\r\n+    public void testMSIAuth() throws SQLException {\r", "originalCommit": "0b0d70d10810320422c1b359acb304ff9cf639fd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "8b9e6331c22499af4272e50615d3dcd428f6f622", "url": "https://github.com/microsoft/mssql-jdbc/commit/8b9e6331c22499af4272e50615d3dcd428f6f622", "message": "msi auth servers tags", "committedDate": "2020-03-31T22:45:26Z", "type": "commit"}, {"oid": "19a582e1d8750ecc746f334c0a7f43cb66121a6a", "url": "https://github.com/microsoft/mssql-jdbc/commit/19a582e1d8750ecc746f334c0a7f43cb66121a6a", "message": "added MSI auth w msiClientId tests", "committedDate": "2020-03-31T22:57:00Z", "type": "commit"}, {"oid": "9497069ad2421e9c7dbe644d7b16cea2c927555c", "url": "https://github.com/microsoft/mssql-jdbc/commit/9497069ad2421e9c7dbe644d7b16cea2c927555c", "message": "Merge remote-tracking branch 'upstream/dev' into msi", "committedDate": "2020-03-31T23:35:56Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI3NjAyNw==", "url": "https://github.com/microsoft/mssql-jdbc/pull/1286#discussion_r401276027", "bodyText": "There are unused imports here", "author": "ulvii", "createdAt": "2020-03-31T23:39:20Z", "path": "src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java", "diffHunk": "@@ -0,0 +1,307 @@\n+/*\r\n+ * Microsoft JDBC Driver for SQL Server Copyright(c) Microsoft Corporation All rights reserved. This program is made\r\n+ * available under the terms of the MIT License. See the LICENSE file in the project root for more information.\r\n+ */\r\n+package com.microsoft.sqlserver.jdbc.AlwaysEncrypted;\r\n+\r\n+import static org.junit.jupiter.api.Assertions.fail;\r\n+\r\n+import java.sql.Connection;\r\n+import java.sql.ResultSet;\r\n+import java.sql.SQLException;\r\n+import java.sql.Statement;\r\n+\r\n+import org.junit.jupiter.api.Tag;\r\n+import org.junit.jupiter.api.Test;\r\n+import org.junit.platform.runner.JUnitPlatform;\r\n+import org.junit.runner.RunWith;\r\n+\r\n+import com.microsoft.aad.adal4j.AuthenticationException;\r", "originalCommit": "19a582e1d8750ecc746f334c0a7f43cb66121a6a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI4MTMyOQ==", "url": "https://github.com/microsoft/mssql-jdbc/pull/1286#discussion_r401281329", "bodyText": "aren't you supposed to use connStr ?", "author": "ulvii", "createdAt": "2020-03-31T23:56:29Z", "path": "src/test/java/com/microsoft/sqlserver/jdbc/AlwaysEncrypted/MSITest.java", "diffHunk": "@@ -0,0 +1,307 @@\n+/*\r\n+ * Microsoft JDBC Driver for SQL Server Copyright(c) Microsoft Corporation All rights reserved. This program is made\r\n+ * available under the terms of the MIT License. See the LICENSE file in the project root for more information.\r\n+ */\r\n+package com.microsoft.sqlserver.jdbc.AlwaysEncrypted;\r\n+\r\n+import static org.junit.jupiter.api.Assertions.fail;\r\n+\r\n+import java.sql.Connection;\r\n+import java.sql.ResultSet;\r\n+import java.sql.SQLException;\r\n+import java.sql.Statement;\r\n+\r\n+import org.junit.jupiter.api.Tag;\r\n+import org.junit.jupiter.api.Test;\r\n+import org.junit.platform.runner.JUnitPlatform;\r\n+import org.junit.runner.RunWith;\r\n+\r\n+import com.microsoft.aad.adal4j.AuthenticationException;\r\n+import com.microsoft.sqlserver.jdbc.SQLServerConnection;\r\n+import com.microsoft.sqlserver.jdbc.SQLServerDataSource;\r\n+import com.microsoft.sqlserver.jdbc.SQLServerPreparedStatement;\r\n+import com.microsoft.sqlserver.jdbc.SQLServerResultSet;\r\n+import com.microsoft.sqlserver.jdbc.SQLServerStatement;\r\n+import com.microsoft.sqlserver.jdbc.TestResource;\r\n+import com.microsoft.sqlserver.jdbc.TestUtils;\r\n+import com.microsoft.sqlserver.testframework.AbstractTest;\r\n+import com.microsoft.sqlserver.testframework.Constants;\r\n+import com.microsoft.sqlserver.testframework.PrepUtil;\r\n+import static org.junit.jupiter.api.Assertions.assertTrue;\r\n+\r\n+\r\n+/**\r\n+ * Tests involving MSI authentication\r\n+ */\r\n+@RunWith(JUnitPlatform.class)\r\n+@Tag(Constants.MSI)\r\n+public class MSITest extends AESetup {\r\n+\r\n+    /*\r\n+     * Test MSI auth\r\n+     */\r\n+    @Tag(Constants.xSQLv12)\r\n+    @Tag(Constants.xSQLv14)\r\n+    @Tag(Constants.xSQLv15)\r\n+    @Test\r\n+    public void testMSIAuth() throws SQLException {\r\n+        // unregister the custom providers registered in AESetup\r\n+        SQLServerConnection.unregisterColumnEncryptionKeyStoreProviders();\r\n+\r\n+        String connStr = connectionString;\r\n+        connStr = TestUtils.addOrOverrideProperty(connStr, Constants.USER, \"\");\r\n+        connStr = TestUtils.addOrOverrideProperty(connStr, Constants.PASSWORD, \"\");\r\n+        connStr = TestUtils.addOrOverrideProperty(connStr, Constants.AUTHENTICATION, \"ActiveDirectoryMSI\");\r\n+\r\n+        try (SQLServerConnection con = PrepUtil.getConnection(connectionString)) {} catch (Exception e) {\r", "originalCommit": "19a582e1d8750ecc746f334c0a7f43cb66121a6a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "a1b7f14a1d09263b328ffb9818ae7a8f32bcc7d3", "url": "https://github.com/microsoft/mssql-jdbc/commit/a1b7f14a1d09263b328ffb9818ae7a8f32bcc7d3", "message": "fixed connectstr issue", "committedDate": "2020-04-01T00:36:01Z", "type": "commit"}, {"oid": "33edae9e8170240c486da3c1277e6c18b97de8d6", "url": "https://github.com/microsoft/mssql-jdbc/commit/33edae9e8170240c486da3c1277e6c18b97de8d6", "message": "removed unused imports", "committedDate": "2020-04-01T00:43:37Z", "type": "commit"}, {"oid": "b5f35eec9bc90a43bd250f0aa4248bb1bf6a3e27", "url": "https://github.com/microsoft/mssql-jdbc/commit/b5f35eec9bc90a43bd250f0aa4248bb1bf6a3e27", "message": "fixed resource strings", "committedDate": "2020-04-01T01:16:12Z", "type": "commit"}]}