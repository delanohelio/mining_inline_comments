{"pr_number": 3303, "pr_title": "Implement and integrate validator status logger", "pr_createdAt": "2020-11-24T22:10:57Z", "pr_url": "https://github.com/ConsenSys/teku/pull/3303", "timeline": [{"oid": "c2f17646ef0cb2db606b18a2de20da6225389532", "url": "https://github.com/ConsenSys/teku/commit/c2f17646ef0cb2db606b18a2de20da6225389532", "message": "Implement and integrate validator status logger", "committedDate": "2020-11-24T22:09:42Z", "type": "commit"}, {"oid": "c36882e9c9bcf04a0b32bd9479a84be291967de4", "url": "https://github.com/ConsenSys/teku/commit/c36882e9c9bcf04a0b32bd9479a84be291967de4", "message": "Run spotless", "committedDate": "2020-11-24T22:10:26Z", "type": "commit"}, {"oid": "59b338316caf4301fe6b29f15237dea7a289e191", "url": "https://github.com/ConsenSys/teku/commit/59b338316caf4301fe6b29f15237dea7a289e191", "message": "Merge branch 'master' into printValidatorStatuses", "committedDate": "2020-11-24T22:12:14Z", "type": "commit"}, {"oid": "e99e6dc0c938304dfe73b7b32fae3c07048d382a", "url": "https://github.com/ConsenSys/teku/commit/e99e6dc0c938304dfe73b7b32fae3c07048d382a", "message": "Fix test compilation", "committedDate": "2020-11-24T22:28:48Z", "type": "commit"}, {"oid": "3d3597caa896ea672696b9a0138db1667a473740", "url": "https://github.com/ConsenSys/teku/commit/3d3597caa896ea672696b9a0138db1667a473740", "message": "Run spotless", "committedDate": "2020-11-24T22:28:58Z", "type": "commit"}, {"oid": "0065aea51e0912f6b0aadd563107e7b1142dde06", "url": "https://github.com/ConsenSys/teku/commit/0065aea51e0912f6b0aadd563107e7b1142dde06", "message": "Run spotless", "committedDate": "2020-11-24T22:30:27Z", "type": "commit"}, {"oid": "124474aa67beebf39c551a6f18237b8abf254fb6", "url": "https://github.com/ConsenSys/teku/commit/124474aa67beebf39c551a6f18237b8abf254fb6", "message": "Fix validator api handler test", "committedDate": "2020-11-30T19:13:02Z", "type": "commit"}, {"oid": "456cbc017075a968643018786973a8665d909492", "url": "https://github.com/ConsenSys/teku/commit/456cbc017075a968643018786973a8665d909492", "message": "Run spotless", "committedDate": "2020-11-30T19:13:23Z", "type": "commit"}, {"oid": "65f9634db57d5e6420ce0bea8e34ee400033f109", "url": "https://github.com/ConsenSys/teku/commit/65f9634db57d5e6420ce0bea8e34ee400033f109", "message": "Add json ignore variables", "committedDate": "2020-11-30T22:13:33Z", "type": "commit"}, {"oid": "d0d685033429b4c64baf828dba427ce522d4d1c0", "url": "https://github.com/ConsenSys/teku/commit/d0d685033429b4c64baf828dba427ce522d4d1c0", "message": "Print summary if number of validators is greater than limit", "committedDate": "2020-11-30T22:49:06Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzY3MDY4OQ==", "url": "https://github.com/ConsenSys/teku/pull/3303#discussion_r533670689", "bodyText": "Is it possible to use a more specific type for validatorIdentifiers ?  String params are a bit confusing - requires you to dig down to figure out what they're supposed to hold / how they should be formatted.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  final List<String> validatorIdentifiers);\n          \n          \n            \n                  final List<BLSPublicKey> validatorIdentifiers);", "author": "mbaxter", "createdAt": "2020-12-01T19:35:10Z", "path": "validator/api/src/main/java/tech/pegasys/teku/validator/api/ValidatorApiChannel.java", "diffHunk": "@@ -42,6 +43,9 @@\n \n   SafeFuture<Map<BLSPublicKey, Integer>> getValidatorIndices(final List<BLSPublicKey> publicKeys);\n \n+  SafeFuture<Optional<Map<BLSPublicKey, ValidatorStatus>>> getValidatorStatuses(\n+      final List<String> validatorIdentifiers);", "originalCommit": "d0d685033429b4c64baf828dba427ce522d4d1c0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzY5NzE1Mw==", "url": "https://github.com/ConsenSys/teku/pull/3303#discussion_r533697153", "bodyText": "Very valid point. Done.", "author": "cemozerr", "createdAt": "2020-12-01T20:21:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzY3MDY4OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzY3MTkwMA==", "url": "https://github.com/ConsenSys/teku/pull/3303#discussion_r533671900", "bodyText": "Probably worth asserting !validatorPublicKeys.isEmpty() since we're requiring responses from validatorApiChannel below.", "author": "mbaxter", "createdAt": "2020-12-01T19:37:20Z", "path": "validator/client/src/main/java/tech/pegasys/teku/validator/client/ValidatorStatusLogger.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.validator.client;\n+\n+import static java.util.stream.Collectors.toList;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.atomic.AtomicReference;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import tech.pegasys.teku.api.response.v1.beacon.ValidatorStatus;\n+import tech.pegasys.teku.bls.BLSPublicKey;\n+import tech.pegasys.teku.validator.api.ValidatorApiChannel;\n+\n+public class ValidatorStatusLogger {\n+\n+  private static final Logger LOG = LogManager.getLogger();\n+\n+  private static final int VALIDATOR_KEYS_PRINT_LIMIT = 20;\n+\n+  final Set<BLSPublicKey> validatorPublicKeys;\n+  final ValidatorApiChannel validatorApiChannel;\n+  final AtomicReference<Map<BLSPublicKey, ValidatorStatus>> latestValidatorStatuses =\n+      new AtomicReference<>();\n+\n+  public ValidatorStatusLogger(\n+      Set<BLSPublicKey> validatorPublicKeys, ValidatorApiChannel validatorApiChannel) {\n+    this.validatorPublicKeys = validatorPublicKeys;", "originalCommit": "d0d685033429b4c64baf828dba427ce522d4d1c0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzcxNTQ4Mg==", "url": "https://github.com/ConsenSys/teku/pull/3303#discussion_r533715482", "bodyText": "Done.", "author": "cemozerr", "createdAt": "2020-12-01T20:55:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzY3MTkwMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzY3NTAzNA==", "url": "https://github.com/ConsenSys/teku/pull/3303#discussion_r533675034", "bodyText": "Maybe just a warning since these are printing regularly and this won't interfere with functioning of the node?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                      () -> LOG.error(\"Error retrieving status for validator {}\", publicKey));\n          \n          \n            \n                      () -> LOG.warning(\"Unable to retrieve status for validator {}\", publicKey));", "author": "mbaxter", "createdAt": "2020-12-01T19:42:54Z", "path": "validator/client/src/main/java/tech/pegasys/teku/validator/client/ValidatorStatusLogger.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.validator.client;\n+\n+import static java.util.stream.Collectors.toList;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.atomic.AtomicReference;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import tech.pegasys.teku.api.response.v1.beacon.ValidatorStatus;\n+import tech.pegasys.teku.bls.BLSPublicKey;\n+import tech.pegasys.teku.validator.api.ValidatorApiChannel;\n+\n+public class ValidatorStatusLogger {\n+\n+  private static final Logger LOG = LogManager.getLogger();\n+\n+  private static final int VALIDATOR_KEYS_PRINT_LIMIT = 20;\n+\n+  final Set<BLSPublicKey> validatorPublicKeys;\n+  final ValidatorApiChannel validatorApiChannel;\n+  final AtomicReference<Map<BLSPublicKey, ValidatorStatus>> latestValidatorStatuses =\n+      new AtomicReference<>();\n+\n+  public ValidatorStatusLogger(\n+      Set<BLSPublicKey> validatorPublicKeys, ValidatorApiChannel validatorApiChannel) {\n+    this.validatorPublicKeys = validatorPublicKeys;\n+    this.validatorApiChannel = validatorApiChannel;\n+  }\n+\n+  public void printInitialValidatorStatuses() {\n+    validatorApiChannel\n+        .getValidatorStatuses(getAsIdentifiers(validatorPublicKeys))\n+        .thenAccept(\n+            maybeValidatorStatuses -> {\n+              if (maybeValidatorStatuses.isEmpty()) {\n+                LOG.error(\"Unable to retrieve validator statuses from BeaconNode.\");\n+                return;\n+              }\n+\n+              Map<BLSPublicKey, ValidatorStatus> validatorStatuses = maybeValidatorStatuses.get();\n+              if (validatorPublicKeys.size() < VALIDATOR_KEYS_PRINT_LIMIT) {\n+                printValidatorStatusesOneByOne(validatorStatuses);\n+              } else {\n+                printValidatorStatusSummary(validatorStatuses);\n+              }\n+            })\n+        .reportExceptions();\n+  }\n+\n+  private void printValidatorStatusesOneByOne(\n+      Map<BLSPublicKey, ValidatorStatus> validatorStatuses) {\n+    for (BLSPublicKey publicKey : validatorPublicKeys) {\n+      Optional<ValidatorStatus> maybeValidatorStatus =\n+          Optional.ofNullable(validatorStatuses.get(publicKey));\n+      maybeValidatorStatus.ifPresentOrElse(\n+          validatorStatus ->\n+              LOG.info(\n+                  \"Validator {} status is \" + validatorStatus, publicKey.toAbbreviatedString()),\n+          () -> LOG.error(\"Error retrieving status for validator {}\", publicKey));", "originalCommit": "d0d685033429b4c64baf828dba427ce522d4d1c0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzcxNjAxMw==", "url": "https://github.com/ConsenSys/teku/pull/3303#discussion_r533716013", "bodyText": "Done.", "author": "cemozerr", "createdAt": "2020-12-01T20:56:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzY3NTAzNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzY3NTg1Nw==", "url": "https://github.com/ConsenSys/teku/pull/3303#discussion_r533675857", "bodyText": "For symmetry with printValidatorStatusesOneByOne, should we also include an \"unknown\" status for validators that we fail to retrieve?  Or else log an extra message about statuses we failed to retrieve?", "author": "mbaxter", "createdAt": "2020-12-01T19:44:23Z", "path": "validator/client/src/main/java/tech/pegasys/teku/validator/client/ValidatorStatusLogger.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.validator.client;\n+\n+import static java.util.stream.Collectors.toList;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.atomic.AtomicReference;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import tech.pegasys.teku.api.response.v1.beacon.ValidatorStatus;\n+import tech.pegasys.teku.bls.BLSPublicKey;\n+import tech.pegasys.teku.validator.api.ValidatorApiChannel;\n+\n+public class ValidatorStatusLogger {\n+\n+  private static final Logger LOG = LogManager.getLogger();\n+\n+  private static final int VALIDATOR_KEYS_PRINT_LIMIT = 20;\n+\n+  final Set<BLSPublicKey> validatorPublicKeys;\n+  final ValidatorApiChannel validatorApiChannel;\n+  final AtomicReference<Map<BLSPublicKey, ValidatorStatus>> latestValidatorStatuses =\n+      new AtomicReference<>();\n+\n+  public ValidatorStatusLogger(\n+      Set<BLSPublicKey> validatorPublicKeys, ValidatorApiChannel validatorApiChannel) {\n+    this.validatorPublicKeys = validatorPublicKeys;\n+    this.validatorApiChannel = validatorApiChannel;\n+  }\n+\n+  public void printInitialValidatorStatuses() {\n+    validatorApiChannel\n+        .getValidatorStatuses(getAsIdentifiers(validatorPublicKeys))\n+        .thenAccept(\n+            maybeValidatorStatuses -> {\n+              if (maybeValidatorStatuses.isEmpty()) {\n+                LOG.error(\"Unable to retrieve validator statuses from BeaconNode.\");\n+                return;\n+              }\n+\n+              Map<BLSPublicKey, ValidatorStatus> validatorStatuses = maybeValidatorStatuses.get();\n+              if (validatorPublicKeys.size() < VALIDATOR_KEYS_PRINT_LIMIT) {\n+                printValidatorStatusesOneByOne(validatorStatuses);\n+              } else {\n+                printValidatorStatusSummary(validatorStatuses);\n+              }\n+            })\n+        .reportExceptions();\n+  }\n+\n+  private void printValidatorStatusesOneByOne(\n+      Map<BLSPublicKey, ValidatorStatus> validatorStatuses) {\n+    for (BLSPublicKey publicKey : validatorPublicKeys) {\n+      Optional<ValidatorStatus> maybeValidatorStatus =\n+          Optional.ofNullable(validatorStatuses.get(publicKey));\n+      maybeValidatorStatus.ifPresentOrElse(\n+          validatorStatus ->\n+              LOG.info(\n+                  \"Validator {} status is \" + validatorStatus, publicKey.toAbbreviatedString()),\n+          () -> LOG.error(\"Error retrieving status for validator {}\", publicKey));\n+    }\n+  }\n+\n+  private void printValidatorStatusSummary(Map<BLSPublicKey, ValidatorStatus> validatorStatuses) {\n+    Map<ValidatorStatus, AtomicInteger> validatorStatusCount = new HashMap<>();\n+    for (ValidatorStatus status : validatorStatuses.values()) {\n+      AtomicInteger count =\n+          validatorStatusCount.computeIfAbsent(status, __ -> new AtomicInteger(0));\n+      count.incrementAndGet();\n+    }", "originalCommit": "d0d685033429b4c64baf828dba427ce522d4d1c0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzcyMzc1Mw==", "url": "https://github.com/ConsenSys/teku/pull/3303#discussion_r533723753", "bodyText": "Makes sense. Done.", "author": "cemozerr", "createdAt": "2020-12-01T21:11:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzY3NTg1Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzY3NzQwMA==", "url": "https://github.com/ConsenSys/teku/pull/3303#discussion_r533677400", "bodyText": "Should this be at INFO level unless the change is concerning (if the validator was slashed, for example)?", "author": "mbaxter", "createdAt": "2020-12-01T19:47:01Z", "path": "validator/client/src/main/java/tech/pegasys/teku/validator/client/ValidatorStatusLogger.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.validator.client;\n+\n+import static java.util.stream.Collectors.toList;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.atomic.AtomicReference;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import tech.pegasys.teku.api.response.v1.beacon.ValidatorStatus;\n+import tech.pegasys.teku.bls.BLSPublicKey;\n+import tech.pegasys.teku.validator.api.ValidatorApiChannel;\n+\n+public class ValidatorStatusLogger {\n+\n+  private static final Logger LOG = LogManager.getLogger();\n+\n+  private static final int VALIDATOR_KEYS_PRINT_LIMIT = 20;\n+\n+  final Set<BLSPublicKey> validatorPublicKeys;\n+  final ValidatorApiChannel validatorApiChannel;\n+  final AtomicReference<Map<BLSPublicKey, ValidatorStatus>> latestValidatorStatuses =\n+      new AtomicReference<>();\n+\n+  public ValidatorStatusLogger(\n+      Set<BLSPublicKey> validatorPublicKeys, ValidatorApiChannel validatorApiChannel) {\n+    this.validatorPublicKeys = validatorPublicKeys;\n+    this.validatorApiChannel = validatorApiChannel;\n+  }\n+\n+  public void printInitialValidatorStatuses() {\n+    validatorApiChannel\n+        .getValidatorStatuses(getAsIdentifiers(validatorPublicKeys))\n+        .thenAccept(\n+            maybeValidatorStatuses -> {\n+              if (maybeValidatorStatuses.isEmpty()) {\n+                LOG.error(\"Unable to retrieve validator statuses from BeaconNode.\");\n+                return;\n+              }\n+\n+              Map<BLSPublicKey, ValidatorStatus> validatorStatuses = maybeValidatorStatuses.get();\n+              if (validatorPublicKeys.size() < VALIDATOR_KEYS_PRINT_LIMIT) {\n+                printValidatorStatusesOneByOne(validatorStatuses);\n+              } else {\n+                printValidatorStatusSummary(validatorStatuses);\n+              }\n+            })\n+        .reportExceptions();\n+  }\n+\n+  private void printValidatorStatusesOneByOne(\n+      Map<BLSPublicKey, ValidatorStatus> validatorStatuses) {\n+    for (BLSPublicKey publicKey : validatorPublicKeys) {\n+      Optional<ValidatorStatus> maybeValidatorStatus =\n+          Optional.ofNullable(validatorStatuses.get(publicKey));\n+      maybeValidatorStatus.ifPresentOrElse(\n+          validatorStatus ->\n+              LOG.info(\n+                  \"Validator {} status is \" + validatorStatus, publicKey.toAbbreviatedString()),\n+          () -> LOG.error(\"Error retrieving status for validator {}\", publicKey));\n+    }\n+  }\n+\n+  private void printValidatorStatusSummary(Map<BLSPublicKey, ValidatorStatus> validatorStatuses) {\n+    Map<ValidatorStatus, AtomicInteger> validatorStatusCount = new HashMap<>();\n+    for (ValidatorStatus status : validatorStatuses.values()) {\n+      AtomicInteger count =\n+          validatorStatusCount.computeIfAbsent(status, __ -> new AtomicInteger(0));\n+      count.incrementAndGet();\n+    }\n+\n+    for (Map.Entry<ValidatorStatus, AtomicInteger> statusCount : validatorStatusCount.entrySet()) {\n+      LOG.info(\n+          statusCount.getValue().get()\n+              + \" validators are in \"\n+              + statusCount.getKey().name()\n+              + \" state.\");\n+    }\n+  }\n+\n+  public void checkValidatorStatusChanges() {\n+    validatorApiChannel\n+        .getValidatorStatuses(getAsIdentifiers(validatorPublicKeys))\n+        .thenAccept(\n+            maybeNewValidatorStatuses -> {\n+              if (maybeNewValidatorStatuses.isEmpty()) {\n+                LOG.error(\"Unable to retrieve validator statuses from BeaconNode.\");\n+                return;\n+              }\n+\n+              Map<BLSPublicKey, ValidatorStatus> newValidatorStatuses =\n+                  maybeNewValidatorStatuses.get();\n+\n+              Map<BLSPublicKey, ValidatorStatus> oldValidatorStatuses =\n+                  latestValidatorStatuses.getAndSet(newValidatorStatuses);\n+              if (oldValidatorStatuses == null) {\n+                return;\n+              }\n+\n+              for (BLSPublicKey key : oldValidatorStatuses.keySet()) {\n+                ValidatorStatus oldStatus = oldValidatorStatuses.get(key);\n+                ValidatorStatus newStatus = newValidatorStatuses.get(key);\n+                if (oldStatus.equals(newStatus)) {\n+                  continue;\n+                }\n+\n+                LOG.warn(", "originalCommit": "d0d685033429b4c64baf828dba427ce522d4d1c0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzcyNTE4OA==", "url": "https://github.com/ConsenSys/teku/pull/3303#discussion_r533725188", "bodyText": "I think a validator status change is important enough to merit a log.warn regardless, since there is actual money on the line.\nThe validator might have changed (or might be seen from Teku's perspective to have changed) in an error-prone way, and this could help operators see and fix that.", "author": "cemozerr", "createdAt": "2020-12-01T21:14:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzY3NzQwMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzY3OTY2OA==", "url": "https://github.com/ConsenSys/teku/pull/3303#discussion_r533679668", "bodyText": "In terms of timing, would it be better to run 1 slot after the epoch transition, so we're more likely to pull in the latest updates from the epoch transition?  I'm thinking there might be some lag in processing the latest block and updating the chain head.", "author": "mbaxter", "createdAt": "2020-12-01T19:51:09Z", "path": "validator/client/src/main/java/tech/pegasys/teku/validator/client/ValidatorTimingActions.java", "diffHunk": "@@ -35,6 +40,9 @@ public void onSlot(final UInt64 slot) {\n     validatorIndexProvider.lookupValidators();\n     blockDuties.onSlot(slot);\n     attestationDuties.onSlot(slot);\n+    if (slot.mod(SLOTS_PER_EPOCH).equals(UInt64.ONE)) {", "originalCommit": "d0d685033429b4c64baf828dba427ce522d4d1c0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzcyNTU1NA==", "url": "https://github.com/ConsenSys/teku/pull/3303#discussion_r533725554", "bodyText": "That was my exact thinking and why I'm running this method every\nslot.mod(SLOTS_PER_EPOCH).equals(UInt64.ONE))\nand not\nslot.mod(SLOTS_PER_EPOCH).equals(UInt64.ZERO))", "author": "cemozerr", "createdAt": "2020-12-01T21:14:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzY3OTY2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzcyNjM5Mg==", "url": "https://github.com/ConsenSys/teku/pull/3303#discussion_r533726392", "bodyText": "Am I missing something?", "author": "cemozerr", "createdAt": "2020-12-01T21:16:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzY3OTY2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzcyOTk0NQ==", "url": "https://github.com/ConsenSys/teku/pull/3303#discussion_r533729945", "bodyText": "ha!  no - I'm just so used to reading x % y == 0 \ud83e\udd26\u200d\u2640\ufe0f", "author": "mbaxter", "createdAt": "2020-12-01T21:23:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzY3OTY2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzczMjYwMw==", "url": "https://github.com/ConsenSys/teku/pull/3303#discussion_r533732603", "bodyText": "hahaha", "author": "cemozerr", "createdAt": "2020-12-01T21:28:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzY3OTY2OA=="}], "type": "inlineReview"}, {"oid": "d405adac60b78ccf3f7ec4efc8e9c51db41c77cc", "url": "https://github.com/ConsenSys/teku/commit/d405adac60b78ccf3f7ec4efc8e9c51db41c77cc", "message": "Incorporate feedback and print statuses on command line", "committedDate": "2020-12-01T23:10:40Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc4NzU0OQ==", "url": "https://github.com/ConsenSys/teku/pull/3303#discussion_r533787549", "bodyText": "(nit) stray semi-colon", "author": "mbaxter", "createdAt": "2020-12-01T23:18:15Z", "path": "validator/client/src/main/java/tech/pegasys/teku/validator/client/ValidatorStatusLogger.java", "diffHunk": "@@ -72,36 +69,44 @@ private void printValidatorStatusesOneByOne(\n           Optional.ofNullable(validatorStatuses.get(publicKey));\n       maybeValidatorStatus.ifPresentOrElse(\n           validatorStatus ->\n-              LOG.info(\n-                  \"Validator {} status is \" + validatorStatus, publicKey.toAbbreviatedString()),\n-          () -> LOG.error(\"Error retrieving status for validator {}\", publicKey));\n+              STATUS_LOG.validatorStatus(validatorStatus.name(), publicKey.toAbbreviatedString()),\n+          () -> STATUS_LOG.unableToRetrieveValidatorStatus(publicKey.toAbbreviatedString()));\n     }\n   }\n \n   private void printValidatorStatusSummary(Map<BLSPublicKey, ValidatorStatus> validatorStatuses) {\n     Map<ValidatorStatus, AtomicInteger> validatorStatusCount = new HashMap<>();\n-    for (ValidatorStatus status : validatorStatuses.values()) {\n-      AtomicInteger count =\n-          validatorStatusCount.computeIfAbsent(status, __ -> new AtomicInteger(0));\n-      count.incrementAndGet();\n+    final AtomicInteger unknownValidatorCountReference = new AtomicInteger(0);\n+    for (BLSPublicKey publicKey : validatorPublicKeys) {\n+      Optional<ValidatorStatus> maybeValidatorStatus =\n+          Optional.ofNullable(validatorStatuses.get(publicKey));\n+      maybeValidatorStatus.ifPresentOrElse(\n+          status -> {\n+            AtomicInteger count =\n+                validatorStatusCount.computeIfAbsent(status, __ -> new AtomicInteger(0));\n+            count.incrementAndGet();\n+          },\n+          unknownValidatorCountReference::incrementAndGet);\n     }\n \n     for (Map.Entry<ValidatorStatus, AtomicInteger> statusCount : validatorStatusCount.entrySet()) {\n-      LOG.info(\n-          statusCount.getValue().get()\n-              + \" validators are in \"\n-              + statusCount.getKey().name()\n-              + \" state.\");\n+      STATUS_LOG.validatorStatusSummary(statusCount.getValue().get(), statusCount.getKey().name());\n+    }\n+\n+    final int unknownValidatorCount = unknownValidatorCountReference.get();\n+    ;", "originalCommit": "d405adac60b78ccf3f7ec4efc8e9c51db41c77cc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "ea19376ebf2bda9ca61b1bc205f8774b55a9f1dd", "url": "https://github.com/ConsenSys/teku/commit/ea19376ebf2bda9ca61b1bc205f8774b55a9f1dd", "message": "Remove stray semi-colon", "committedDate": "2020-12-01T23:29:03Z", "type": "commit"}, {"oid": "0155b173d2274a80e405e8b1380401e83a24f949", "url": "https://github.com/ConsenSys/teku/commit/0155b173d2274a80e405e8b1380401e83a24f949", "message": "Abstract validator status logger to an interface", "committedDate": "2020-12-02T19:21:20Z", "type": "commit"}, {"oid": "0ac6c9f874eb6ba382365aedd497cc4d64a8f737", "url": "https://github.com/ConsenSys/teku/commit/0ac6c9f874eb6ba382365aedd497cc4d64a8f737", "message": "Merge remote-tracking branch 'remotes/origin/master' into printValidatorStatuses\n\n# Conflicts:\n#\tvalidator/client/src/main/java/tech/pegasys/teku/validator/client/ValidatorClientService.java", "committedDate": "2020-12-02T19:38:07Z", "type": "commit"}, {"oid": "dde166de3028fdef771051fe29c76a319e126f75", "url": "https://github.com/ConsenSys/teku/commit/dde166de3028fdef771051fe29c76a319e126f75", "message": "Disable feature until testing", "committedDate": "2020-12-03T21:00:16Z", "type": "commit"}]}