{"pr_number": 1626, "pr_title": "Replay hot blocks at startup for protoarray", "pr_createdAt": "2020-04-20T20:41:01Z", "pr_url": "https://github.com/ConsenSys/teku/pull/1626", "timeline": [{"oid": "4ec859747deab4537d207525c21f8dcb9484aed3", "url": "https://github.com/ConsenSys/teku/commit/4ec859747deab4537d207525c21f8dcb9484aed3", "message": "Replay hot blocks at startup", "committedDate": "2020-04-20T20:37:08Z", "type": "commit"}, {"oid": "4005556b3e21c4c075dbc7fbce491b5a1251cd71", "url": "https://github.com/ConsenSys/teku/commit/4005556b3e21c4c075dbc7fbce491b5a1251cd71", "message": "Run spotless", "committedDate": "2020-04-20T20:38:47Z", "type": "commit"}, {"oid": "21cd37d132ac87e55accaee43d5dd9b04c078360", "url": "https://github.com/ConsenSys/teku/commit/21cd37d132ac87e55accaee43d5dd9b04c078360", "message": "Fix stub fork choice strategy", "committedDate": "2020-04-20T20:43:35Z", "type": "commit"}, {"oid": "3c3ee821f459ee942861a5dbe40820dda9ddde7a", "url": "https://github.com/ConsenSys/teku/commit/3c3ee821f459ee942861a5dbe40820dda9ddde7a", "message": "Fix tests", "committedDate": "2020-04-20T22:41:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc0NDE4Nw==", "url": "https://github.com/ConsenSys/teku/pull/1626#discussion_r411744187", "bodyText": "You can simplify this with streams to:\n  private static void processBlocksInStoreAtStartup(ReadOnlyStore store, ProtoArray protoArray) {\n    store.getBlockRoots().stream()\n        .map(store::getBlock)\n        .sorted(Comparator.comparing(BeaconBlock::getSlot))\n        .forEach(block -> processBlockAtStartup(store, protoArray, block));\n  }\n\n  private static void processBlockAtStartup(\n      final ReadOnlyStore store, final ProtoArray protoArray, final BeaconBlock block) {\n    Bytes32 blockRoot = block.hash_tree_root();\n    protoArray.onBlock(\n        block.getSlot(),\n        blockRoot,\n        store.getBlockRoots().contains(block.getParent_root())\n            ? Optional.of(block.getParent_root())\n            : Optional.empty(),\n        block.getState_root(),\n        store.getBlockState(block.hash_tree_root()).getCurrent_justified_checkpoint().getEpoch(),\n        store.getBlockState(block.hash_tree_root()).getFinalized_checkpoint().getEpoch());\n  }", "author": "ajsutton", "createdAt": "2020-04-20T22:51:32Z", "path": "protoarray/src/main/java/tech/pegasys/artemis/protoarray/ProtoArrayForkChoiceStrategy.java", "diffHunk": "@@ -113,30 +119,30 @@ public void maybePrune(Bytes32 finalizedRoot) {\n \n   // Internal\n \n-  static ProtoArrayForkChoiceStrategy create(\n-      UnsignedLong finalizedBlockSlot,\n-      Bytes32 finalizedBlockStateRoot,\n-      UnsignedLong justifiedEpoch,\n-      UnsignedLong finalizedEpoch,\n-      Bytes32 finalizedBlockRoot) {\n-    ProtoArray protoArray =\n-        new ProtoArray(\n-            Constants.PROTOARRAY_FORKCHOICE_PRUNE_THRESHOLD,\n-            justifiedEpoch,\n-            finalizedEpoch,\n-            new ArrayList<>(),\n-            new HashMap<>());\n+  private static void processBlocksInStoreAtStartup(ReadOnlyStore store, ProtoArray protoArray) {\n+    List<BeaconBlock> blocks = new ArrayList<>();\n+    for (Bytes32 blockRoots : store.getBlockRoots()) {\n+      BeaconBlock block =\n+          checkNotNull(\n+              store.getBlock(blockRoots),\n+              \"ProtoArrayForkChoiceStrategy: Store does not contain the block of the block root it stores\");\n+      blocks.add(block);\n+    }\n \n-    protoArray.onBlock(\n-        finalizedBlockSlot,\n-        finalizedBlockRoot,\n-        Optional.empty(),\n-        finalizedBlockStateRoot,\n-        justifiedEpoch,\n-        finalizedEpoch);\n+    blocks.sort(Comparator.comparing(BeaconBlock::getSlot));\n \n-    return new ProtoArrayForkChoiceStrategy(\n-        protoArray, new ElasticList<>(VoteTracker::Default), new ArrayList<>());\n+    for (BeaconBlock block : blocks) {\n+      Bytes32 blockRoot = block.hash_tree_root();\n+      protoArray.onBlock(\n+          block.getSlot(),\n+          blockRoot,\n+          store.getBlockRoots().contains(block.getParent_root())\n+              ? Optional.of(block.getParent_root())\n+              : Optional.empty(),\n+          block.getState_root(),\n+          store.getBlockState(block.hash_tree_root()).getCurrent_justified_checkpoint().getEpoch(),\n+          store.getBlockState(block.hash_tree_root()).getFinalized_checkpoint().getEpoch());\n+    }\n   }", "originalCommit": "3c3ee821f459ee942861a5dbe40820dda9ddde7a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc0NjI2NA==", "url": "https://github.com/ConsenSys/teku/pull/1626#discussion_r411746264", "bodyText": "You could put the checkNotNull back in but I'm not sure it's worth it given that Store guarantees that it has a block for every block root (and it literally gets the block roots from the keyset of its map of blocks).", "author": "ajsutton", "createdAt": "2020-04-20T22:56:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc0NDE4Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc0NjY4Mw==", "url": "https://github.com/ConsenSys/teku/pull/1626#discussion_r411746683", "bodyText": "This is neat. Thank you.", "author": "cemozerr", "createdAt": "2020-04-20T22:57:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc0NDE4Nw=="}], "type": "inlineReview"}, {"oid": "ff8d45d397f31d7be00a4df860dc973be38dd145", "url": "https://github.com/ConsenSys/teku/commit/ff8d45d397f31d7be00a4df860dc973be38dd145", "message": "Simplify using streams", "committedDate": "2020-04-20T23:00:37Z", "type": "commit"}, {"oid": "68558847ae0cb9d418827741758e968dc4051dfb", "url": "https://github.com/ConsenSys/teku/commit/68558847ae0cb9d418827741758e968dc4051dfb", "message": "Merge branch 'master' into protoarrayReplayHotBlocksAtStartup", "committedDate": "2020-04-20T23:00:54Z", "type": "commit"}]}