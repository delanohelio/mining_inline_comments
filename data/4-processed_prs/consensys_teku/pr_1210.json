{"pr_number": 1210, "pr_title": "1162 add openapi documentation for /beacon/state", "pr_createdAt": "2020-02-20T21:26:01Z", "pr_url": "https://github.com/ConsenSys/teku/pull/1210", "timeline": [{"oid": "3179c239b172e1434a624dfdbf5957b838585009", "url": "https://github.com/ConsenSys/teku/commit/3179c239b172e1434a624dfdbf5957b838585009", "message": "1162 add openapi documentation for /beacon/state\n\nfixes\n\nSigned-off-by: Paul Harris <paul.harris@consensys.net>\n#1162", "committedDate": "2020-02-20T21:22:35Z", "type": "commit"}, {"oid": "dcbafd86535ef2922773129d374f7daafd240ad6", "url": "https://github.com/ConsenSys/teku/commit/dcbafd86535ef2922773129d374f7daafd240ad6", "message": "Merge remote-tracking branch 'upstream/master' into 1162-beacon-state-endpoint", "committedDate": "2020-02-20T21:38:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjMwNTQ1Mg==", "url": "https://github.com/ConsenSys/teku/pull/1210#discussion_r382305452", "bodyText": "trailing slash", "author": "macfarla", "createdAt": "2020-02-20T22:56:49Z", "path": "data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/BeaconStateHandler.java", "diffHunk": "@@ -13,26 +13,68 @@\n \n package tech.pegasys.artemis.beaconrestapi.beaconhandlers;\n \n+import static javax.servlet.http.HttpServletResponse.SC_NOT_FOUND;\n+\n+import io.javalin.http.Context;\n+import io.javalin.http.Handler;\n+import io.javalin.plugin.openapi.annotations.HttpMethod;\n+import io.javalin.plugin.openapi.annotations.OpenApi;\n+import io.javalin.plugin.openapi.annotations.OpenApiContent;\n+import io.javalin.plugin.openapi.annotations.OpenApiParam;\n+import io.javalin.plugin.openapi.annotations.OpenApiResponse;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n import org.apache.tuweni.bytes.Bytes32;\n-import tech.pegasys.artemis.beaconrestapi.handlerinterfaces.BeaconRestApiHandler;\n+import tech.pegasys.artemis.datastructures.state.BeaconState;\n+import tech.pegasys.artemis.provider.JsonProvider;\n import tech.pegasys.artemis.storage.ChainStorageClient;\n+import tech.pegasys.artemis.storage.Store;\n \n-public class BeaconStateHandler implements BeaconRestApiHandler {\n-\n+public class BeaconStateHandler implements Handler {\n+  public static final String ROUTE = \"/beacon/state/\";", "originalCommit": "dcbafd86535ef2922773129d374f7daafd240ad6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjMwOTY1MA==", "url": "https://github.com/ConsenSys/teku/pull/1210#discussion_r382309650", "bodyText": "or do we need that because there's a param", "author": "macfarla", "createdAt": "2020-02-20T23:08:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjMwNTQ1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjMxMjM5MQ==", "url": "https://github.com/ConsenSys/teku/pull/1210#discussion_r382312391", "bodyText": "i can try to remove it again. I had copied one that had a slash, but it may not be needed now that things are less broken", "author": "rolfyone", "createdAt": "2020-02-20T23:16:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjMwNTQ1Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjMwNjE1OA==", "url": "https://github.com/ConsenSys/teku/pull/1210#discussion_r382306158", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                      \"Request that the node return a beacon chain state that matches the provided criteria.\",\n          \n          \n            \n                      \"Request that the node return a beacon chain state that matches the specified tree hash root.\",", "author": "macfarla", "createdAt": "2020-02-20T22:58:38Z", "path": "data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/BeaconStateHandler.java", "diffHunk": "@@ -13,26 +13,68 @@\n \n package tech.pegasys.artemis.beaconrestapi.beaconhandlers;\n \n+import static javax.servlet.http.HttpServletResponse.SC_NOT_FOUND;\n+\n+import io.javalin.http.Context;\n+import io.javalin.http.Handler;\n+import io.javalin.plugin.openapi.annotations.HttpMethod;\n+import io.javalin.plugin.openapi.annotations.OpenApi;\n+import io.javalin.plugin.openapi.annotations.OpenApiContent;\n+import io.javalin.plugin.openapi.annotations.OpenApiParam;\n+import io.javalin.plugin.openapi.annotations.OpenApiResponse;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n import org.apache.tuweni.bytes.Bytes32;\n-import tech.pegasys.artemis.beaconrestapi.handlerinterfaces.BeaconRestApiHandler;\n+import tech.pegasys.artemis.datastructures.state.BeaconState;\n+import tech.pegasys.artemis.provider.JsonProvider;\n import tech.pegasys.artemis.storage.ChainStorageClient;\n+import tech.pegasys.artemis.storage.Store;\n \n-public class BeaconStateHandler implements BeaconRestApiHandler {\n-\n+public class BeaconStateHandler implements Handler {\n+  public static final String ROUTE = \"/beacon/state/\";\n+  private final Logger LOG = LogManager.getLogger();\n   private final ChainStorageClient client;\n+  private final JsonProvider jsonProvider;\n \n-  public BeaconStateHandler(ChainStorageClient client) {\n+  public BeaconStateHandler(ChainStorageClient client, JsonProvider jsonProvider) {\n     this.client = client;\n+    this.jsonProvider = jsonProvider;\n   }\n \n-  @Override\n-  public String getPath() {\n-    return \"/beacon/state\";\n+  private BeaconState queryByRootHash(String root) {\n+    Bytes32 root32 = Bytes32.fromHexString(root);\n+    Store store = client.getStore();\n+    if (store == null) {\n+      return client.getBlockState(root32).orElse(null);\n+    }\n+    return store.getBlockState(root32);\n   }\n \n+  @OpenApi(\n+      path = ROUTE,\n+      method = HttpMethod.GET,\n+      summary = \"Get the beacon chain state that matches the specified tree hash root.\",\n+      tags = {\"Beacon\"},\n+      queryParams = {\n+        @OpenApiParam(name = \"root\", description = \"Tree hash root to query (Bytes32)\")\n+      },\n+      description =\n+          \"Request that the node return a beacon chain state that matches the provided criteria.\",", "originalCommit": "dcbafd86535ef2922773129d374f7daafd240ad6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjMxMjYxNA==", "url": "https://github.com/ConsenSys/teku/pull/1210#discussion_r382312614", "bodyText": "i can do that for now and change it back to provided criteria once we add slot...", "author": "rolfyone", "createdAt": "2020-02-20T23:17:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjMwNjE1OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjMwNjMwNA==", "url": "https://github.com/ConsenSys/teku/pull/1210#discussion_r382306304", "bodyText": "query sounds weird", "author": "macfarla", "createdAt": "2020-02-20T22:58:53Z", "path": "data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/BeaconStateHandler.java", "diffHunk": "@@ -13,26 +13,68 @@\n \n package tech.pegasys.artemis.beaconrestapi.beaconhandlers;\n \n+import static javax.servlet.http.HttpServletResponse.SC_NOT_FOUND;\n+\n+import io.javalin.http.Context;\n+import io.javalin.http.Handler;\n+import io.javalin.plugin.openapi.annotations.HttpMethod;\n+import io.javalin.plugin.openapi.annotations.OpenApi;\n+import io.javalin.plugin.openapi.annotations.OpenApiContent;\n+import io.javalin.plugin.openapi.annotations.OpenApiParam;\n+import io.javalin.plugin.openapi.annotations.OpenApiResponse;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n import org.apache.tuweni.bytes.Bytes32;\n-import tech.pegasys.artemis.beaconrestapi.handlerinterfaces.BeaconRestApiHandler;\n+import tech.pegasys.artemis.datastructures.state.BeaconState;\n+import tech.pegasys.artemis.provider.JsonProvider;\n import tech.pegasys.artemis.storage.ChainStorageClient;\n+import tech.pegasys.artemis.storage.Store;\n \n-public class BeaconStateHandler implements BeaconRestApiHandler {\n-\n+public class BeaconStateHandler implements Handler {\n+  public static final String ROUTE = \"/beacon/state/\";\n+  private final Logger LOG = LogManager.getLogger();\n   private final ChainStorageClient client;\n+  private final JsonProvider jsonProvider;\n \n-  public BeaconStateHandler(ChainStorageClient client) {\n+  public BeaconStateHandler(ChainStorageClient client, JsonProvider jsonProvider) {\n     this.client = client;\n+    this.jsonProvider = jsonProvider;\n   }\n \n-  @Override\n-  public String getPath() {\n-    return \"/beacon/state\";\n+  private BeaconState queryByRootHash(String root) {\n+    Bytes32 root32 = Bytes32.fromHexString(root);\n+    Store store = client.getStore();\n+    if (store == null) {\n+      return client.getBlockState(root32).orElse(null);\n+    }\n+    return store.getBlockState(root32);\n   }\n \n+  @OpenApi(\n+      path = ROUTE,\n+      method = HttpMethod.GET,\n+      summary = \"Get the beacon chain state that matches the specified tree hash root.\",\n+      tags = {\"Beacon\"},\n+      queryParams = {\n+        @OpenApiParam(name = \"root\", description = \"Tree hash root to query (Bytes32)\")\n+      },\n+      description =\n+          \"Request that the node return a beacon chain state that matches the provided criteria.\",\n+      responses = {\n+        @OpenApiResponse(status = \"200\", content = @OpenApiContent(from = BeaconState.class)),\n+        @OpenApiResponse(\n+            status = \"404\",\n+            description = \"The beacon state matching the supplied query was not found.\")", "originalCommit": "dcbafd86535ef2922773129d374f7daafd240ad6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjMxMjc5OA==", "url": "https://github.com/ConsenSys/teku/pull/1210#discussion_r382312798", "bodyText": "query parameter?", "author": "rolfyone", "createdAt": "2020-02-20T23:17:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjMwNjMwNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjMxMDE1OQ==", "url": "https://github.com/ConsenSys/teku/pull/1210#discussion_r382310159", "bodyText": "ummm - why null?", "author": "macfarla", "createdAt": "2020-02-20T23:09:49Z", "path": "data/provider/src/main/java/tech/pegasys/artemis/provider/BitlistDeserializer.java", "diffHunk": "@@ -0,0 +1,29 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.provider;\n+\n+import com.fasterxml.jackson.core.JsonParser;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.DeserializationContext;\n+import com.fasterxml.jackson.databind.JsonDeserializer;\n+import java.io.IOException;\n+import tech.pegasys.artemis.util.SSZTypes.Bitlist;\n+\n+public class BitlistDeserializer extends JsonDeserializer<Bitlist> {\n+  @Override\n+  public Bitlist deserialize(JsonParser p, DeserializationContext ctxt)\n+      throws IOException, JsonProcessingException {\n+    return null;", "originalCommit": "dcbafd86535ef2922773129d374f7daafd240ad6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjMxMzAyMw==", "url": "https://github.com/ConsenSys/teku/pull/1210#discussion_r382313023", "bodyText": "ahm... .i wrote this last night after i did your review, that's embarrassing :(", "author": "rolfyone", "createdAt": "2020-02-20T23:18:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjMxMDE1OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjMxMDQ0Mw==", "url": "https://github.com/ConsenSys/teku/pull/1210#discussion_r382310443", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public void sszlistOfUnsignedLongShouldSerializeToJson() throws JsonProcessingException {\n          \n          \n            \n              public void sszListOfUnsignedLongShouldSerializeToJson() throws JsonProcessingException {", "author": "macfarla", "createdAt": "2020-02-20T23:10:44Z", "path": "data/provider/src/test/java/tech/pegasys/artemis/provider/JsonProviderTest.java", "diffHunk": "@@ -53,6 +54,22 @@ public void vectorShouldSerializeToJson() throws JsonProcessingException {\n     assertEquals(serialized, \"[\" + Q + \"One\" + Q + \",\" + Q + \"Two\" + Q + \"]\");\n   }\n \n+  @Test\n+  public void vectorOfUnsignedLongShouldSerializeToJson() throws JsonProcessingException {\n+    SSZVector<UnsignedLong> data =\n+        new SSZVector<>(List.of(UnsignedLong.ONE, UnsignedLong.MAX_VALUE), UnsignedLong.class);\n+    String serialized = jsonProvider.objectToJSON(data);\n+    assertEquals(serialized, \"[1,18446744073709551615]\");\n+  }\n+\n+  @Test\n+  public void sszlistOfUnsignedLongShouldSerializeToJson() throws JsonProcessingException {", "originalCommit": "dcbafd86535ef2922773129d374f7daafd240ad6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjMxMDY1OQ==", "url": "https://github.com/ConsenSys/teku/pull/1210#discussion_r382310659", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public void vectorOfUnsignedLongShouldSerializeToJson() throws JsonProcessingException {\n          \n          \n            \n              public void sszVectorOfUnsignedLongShouldSerializeToJson() throws JsonProcessingException {", "author": "macfarla", "createdAt": "2020-02-20T23:11:24Z", "path": "data/provider/src/test/java/tech/pegasys/artemis/provider/JsonProviderTest.java", "diffHunk": "@@ -53,6 +54,22 @@ public void vectorShouldSerializeToJson() throws JsonProcessingException {\n     assertEquals(serialized, \"[\" + Q + \"One\" + Q + \",\" + Q + \"Two\" + Q + \"]\");\n   }\n \n+  @Test\n+  public void vectorOfUnsignedLongShouldSerializeToJson() throws JsonProcessingException {", "originalCommit": "dcbafd86535ef2922773129d374f7daafd240ad6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjMxMTI5NQ==", "url": "https://github.com/ConsenSys/teku/pull/1210#discussion_r382311295", "bodyText": "should it say \"must have specified size > 0\"", "author": "macfarla", "createdAt": "2020-02-20T23:13:03Z", "path": "util/src/main/java/tech/pegasys/artemis/util/SSZTypes/SSZVector.java", "diffHunk": "@@ -39,6 +42,17 @@ public SSZVector(List<T> list, Class<T> classInfo) {\n     this.classInfo = classInfo;\n   }\n \n+  @JsonCreator\n+  @SuppressWarnings(\"unchecked\")\n+  public SSZVector(List<T> list) {\n+    super(list);\n+    maxSize = list.size();\n+    if (maxSize < 1) {\n+      throw new UnsupportedOperationException(\"SSZVector must have specified size\");", "originalCommit": "dcbafd86535ef2922773129d374f7daafd240ad6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjMxMzU4Ng==", "url": "https://github.com/ConsenSys/teku/pull/1210#discussion_r382313586", "bodyText": "yep it can do - this is just the operation exception from above", "author": "rolfyone", "createdAt": "2020-02-20T23:19:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjMxMTI5NQ=="}], "type": "inlineReview"}, {"oid": "78fe18117d2273bd80839da0d4790b4e6a35ded2", "url": "https://github.com/ConsenSys/teku/commit/78fe18117d2273bd80839da0d4790b4e6a35ded2", "message": "Update data/provider/src/test/java/tech/pegasys/artemis/provider/JsonProviderTest.java\n\nCo-Authored-By: Sally MacFarlane <sally.macfarlane@consensys.net>", "committedDate": "2020-02-20T23:18:56Z", "type": "commit"}, {"oid": "7c9993c89dfaf51817257d39d826f0df7921e026", "url": "https://github.com/ConsenSys/teku/commit/7c9993c89dfaf51817257d39d826f0df7921e026", "message": "Update data/provider/src/test/java/tech/pegasys/artemis/provider/JsonProviderTest.java\n\nCo-Authored-By: Sally MacFarlane <sally.macfarlane@consensys.net>", "committedDate": "2020-02-20T23:19:09Z", "type": "commit"}, {"oid": "6976a4cb586ae3a63fbb7f12d6bc7150fd159bd4", "url": "https://github.com/ConsenSys/teku/commit/6976a4cb586ae3a63fbb7f12d6bc7150fd159bd4", "message": "Update data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/BeaconStateHandler.java\n\nCo-Authored-By: Sally MacFarlane <sally.macfarlane@consensys.net>", "committedDate": "2020-02-21T00:04:40Z", "type": "commit"}, {"oid": "3ff1866ccb2fc804217dfc74b75fe91bb83bfe67", "url": "https://github.com/ConsenSys/teku/commit/3ff1866ccb2fc804217dfc74b75fe91bb83bfe67", "message": "changes per review comments.\n\nSigned-off-by: Paul Harris <paul.harris@consensys.net>", "committedDate": "2020-02-21T00:58:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM3NzQ5NA==", "url": "https://github.com/ConsenSys/teku/pull/1210#discussion_r382377494", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                      \"SSZVector must at least 1 element in the list used to initialize\");\n          \n          \n            \n                      \"SSZVector must have at least 1 element in the list used to initialize\");", "author": "macfarla", "createdAt": "2020-02-21T03:15:24Z", "path": "util/src/main/java/tech/pegasys/artemis/util/SSZTypes/SSZVector.java", "diffHunk": "@@ -39,6 +42,18 @@ public SSZVector(List<T> list, Class<T> classInfo) {\n     this.classInfo = classInfo;\n   }\n \n+  @JsonCreator\n+  @SuppressWarnings(\"unchecked\")\n+  public SSZVector(List<T> list) {\n+    super(list);\n+    maxSize = list.size();\n+    if (maxSize < 1) {\n+      throw new UnsupportedOperationException(\n+          \"SSZVector must at least 1 element in the list used to initialize\");", "originalCommit": "3ff1866ccb2fc804217dfc74b75fe91bb83bfe67", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "ff62e51972dd4bdf300b043d740d83ccc9dffc1c", "url": "https://github.com/ConsenSys/teku/commit/ff62e51972dd4bdf300b043d740d83ccc9dffc1c", "message": "Update util/src/main/java/tech/pegasys/artemis/util/SSZTypes/SSZVector.java\n\nCo-Authored-By: Sally MacFarlane <sally.macfarlane@consensys.net>", "committedDate": "2020-02-21T03:46:16Z", "type": "commit"}, {"oid": "289e3c9abe95fc71a81deb70c64ff3dd4f8eb000", "url": "https://github.com/ConsenSys/teku/commit/289e3c9abe95fc71a81deb70c64ff3dd4f8eb000", "message": "Merge remote-tracking branch 'upstream/master' into 1162-beacon-state-endpoint", "committedDate": "2020-02-21T04:01:15Z", "type": "commit"}, {"oid": "2d2a571b35d146947a92265f8c87311ae0276101", "url": "https://github.com/ConsenSys/teku/commit/2d2a571b35d146947a92265f8c87311ae0276101", "message": "Merge branch '1162-beacon-state-endpoint' of https://github.com/rolfyone/artemis into 1162-beacon-state-endpoint", "committedDate": "2020-02-21T04:01:43Z", "type": "commit"}]}