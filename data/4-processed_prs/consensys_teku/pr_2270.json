{"pr_number": 2270, "pr_title": "Implement ProtoArray disk storage utilities", "pr_createdAt": "2020-06-30T15:53:36Z", "pr_url": "https://github.com/ConsenSys/teku/pull/2270", "timeline": [{"oid": "938919ae0a5741da9d7e9be0c155aa76af764eff", "url": "https://github.com/ConsenSys/teku/commit/938919ae0a5741da9d7e9be0c155aa76af764eff", "message": "Build utilities to write protoArray to disk", "committedDate": "2020-06-30T15:54:52Z", "type": "commit"}, {"oid": "6e02cdef9b60fd6ade19c193033489c2dcafd0c4", "url": "https://github.com/ConsenSys/teku/commit/6e02cdef9b60fd6ade19c193033489c2dcafd0c4", "message": "Add override annotation", "committedDate": "2020-06-30T15:54:52Z", "type": "commit"}, {"oid": "6e02cdef9b60fd6ade19c193033489c2dcafd0c4", "url": "https://github.com/ConsenSys/teku/commit/6e02cdef9b60fd6ade19c193033489c2dcafd0c4", "message": "Add override annotation", "committedDate": "2020-06-30T15:54:52Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk3MzkyOA==", "url": "https://github.com/ConsenSys/teku/pull/2270#discussion_r447973928", "bodyText": "final", "author": "rolfyone", "createdAt": "2020-06-30T20:56:42Z", "path": "storage/src/main/java/tech/pegasys/teku/storage/server/rocksdb/serialization/ProtoArraySerializer.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.storage.server.rocksdb.serialization;\n+\n+import static java.util.stream.Collectors.toList;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import org.apache.tuweni.bytes.Bytes;\n+import org.apache.tuweni.bytes.Bytes32;\n+import org.apache.tuweni.ssz.SSZ;\n+import tech.pegasys.teku.protoarray.ProtoArray;\n+import tech.pegasys.teku.protoarray.ProtoNode;\n+import tech.pegasys.teku.util.config.Constants;\n+\n+public class ProtoArraySerializer implements RocksDbSerializer<ProtoArray> {\n+  @Override\n+  public ProtoArray deserialize(final byte[] data) {\n+    return SSZ.decode(\n+        Bytes.of(data),\n+        reader -> {\n+          final UnsignedLong justifiedEpoch = UnsignedLong.fromLongBits(reader.readUInt64());\n+          final UnsignedLong finalizedEpoch = UnsignedLong.fromLongBits(reader.readUInt64());\n+          final List<BlockInformation> blockInformationList =\n+              reader.readBytesList().stream().map(BlockInformation::fromBytes).collect(toList());\n+          ProtoArray protoArray =\n+              new ProtoArray(\n+                  Constants.PROTOARRAY_FORKCHOICE_PRUNE_THRESHOLD,\n+                  justifiedEpoch,\n+                  finalizedEpoch,\n+                  new ArrayList<>(),\n+                  new HashMap<>());\n+          blockInformationList.forEach(\n+              blockInformation ->\n+                  protoArray.onBlock(\n+                      blockInformation.blockSlot,\n+                      blockInformation.blockRoot,\n+                      blockInformation.parentRoot,\n+                      blockInformation.stateRoot,\n+                      blockInformation.justifiedEpoch,\n+                      blockInformation.finalizedEpoch));\n+          return protoArray;\n+        });\n+  }\n+\n+  @Override\n+  public byte[] serialize(final ProtoArray protoArray) {\n+    Bytes bytes =\n+        SSZ.encode(\n+            writer -> {\n+              writer.writeUInt64(protoArray.getJustifiedEpoch().longValue());\n+              writer.writeUInt64(protoArray.getFinalizedEpoch().longValue());\n+              writer.writeBytesList(\n+                  protoArray.getNodes().stream().map(BlockInformation::toBytes).collect(toList()));\n+            });\n+    return bytes.toArrayUnsafe();\n+  }\n+\n+  private static class BlockInformation {\n+    private final UnsignedLong blockSlot;\n+    private final Bytes32 blockRoot;\n+    private final Bytes32 parentRoot;\n+    private final Bytes32 stateRoot;\n+    private final UnsignedLong justifiedEpoch;\n+    private final UnsignedLong finalizedEpoch;\n+\n+    private BlockInformation(\n+        UnsignedLong blockSlot,\n+        Bytes32 blockRoot,\n+        Bytes32 parentRoot,\n+        Bytes32 stateRoot,\n+        UnsignedLong justifiedEpoch,\n+        UnsignedLong finalizedEpoch) {", "originalCommit": "6e02cdef9b60fd6ade19c193033489c2dcafd0c4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk5OTg4MQ==", "url": "https://github.com/ConsenSys/teku/pull/2270#discussion_r447999881", "bodyText": "Done.", "author": "cemozerr", "createdAt": "2020-06-30T21:50:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk3MzkyOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk3NDY4MA==", "url": "https://github.com/ConsenSys/teku/pull/2270#discussion_r447974680", "bodyText": "nit: params should probably be final", "author": "rolfyone", "createdAt": "2020-06-30T20:57:58Z", "path": "storage/src/main/java/tech/pegasys/teku/storage/server/rocksdb/serialization/ProtoArraySerializer.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.storage.server.rocksdb.serialization;\n+\n+import static java.util.stream.Collectors.toList;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import org.apache.tuweni.bytes.Bytes;\n+import org.apache.tuweni.bytes.Bytes32;\n+import org.apache.tuweni.ssz.SSZ;\n+import tech.pegasys.teku.protoarray.ProtoArray;\n+import tech.pegasys.teku.protoarray.ProtoNode;\n+import tech.pegasys.teku.util.config.Constants;\n+\n+public class ProtoArraySerializer implements RocksDbSerializer<ProtoArray> {\n+  @Override\n+  public ProtoArray deserialize(final byte[] data) {\n+    return SSZ.decode(\n+        Bytes.of(data),\n+        reader -> {\n+          final UnsignedLong justifiedEpoch = UnsignedLong.fromLongBits(reader.readUInt64());\n+          final UnsignedLong finalizedEpoch = UnsignedLong.fromLongBits(reader.readUInt64());\n+          final List<BlockInformation> blockInformationList =\n+              reader.readBytesList().stream().map(BlockInformation::fromBytes).collect(toList());\n+          ProtoArray protoArray =\n+              new ProtoArray(\n+                  Constants.PROTOARRAY_FORKCHOICE_PRUNE_THRESHOLD,\n+                  justifiedEpoch,\n+                  finalizedEpoch,\n+                  new ArrayList<>(),\n+                  new HashMap<>());\n+          blockInformationList.forEach(\n+              blockInformation ->\n+                  protoArray.onBlock(\n+                      blockInformation.blockSlot,\n+                      blockInformation.blockRoot,\n+                      blockInformation.parentRoot,\n+                      blockInformation.stateRoot,\n+                      blockInformation.justifiedEpoch,\n+                      blockInformation.finalizedEpoch));\n+          return protoArray;\n+        });\n+  }\n+\n+  @Override\n+  public byte[] serialize(final ProtoArray protoArray) {\n+    Bytes bytes =\n+        SSZ.encode(\n+            writer -> {\n+              writer.writeUInt64(protoArray.getJustifiedEpoch().longValue());\n+              writer.writeUInt64(protoArray.getFinalizedEpoch().longValue());\n+              writer.writeBytesList(\n+                  protoArray.getNodes().stream().map(BlockInformation::toBytes).collect(toList()));\n+            });\n+    return bytes.toArrayUnsafe();\n+  }\n+\n+  private static class BlockInformation {\n+    private final UnsignedLong blockSlot;\n+    private final Bytes32 blockRoot;\n+    private final Bytes32 parentRoot;\n+    private final Bytes32 stateRoot;\n+    private final UnsignedLong justifiedEpoch;\n+    private final UnsignedLong finalizedEpoch;\n+\n+    private BlockInformation(\n+        UnsignedLong blockSlot,\n+        Bytes32 blockRoot,\n+        Bytes32 parentRoot,\n+        Bytes32 stateRoot,\n+        UnsignedLong justifiedEpoch,\n+        UnsignedLong finalizedEpoch) {\n+      this.blockSlot = blockSlot;\n+      this.blockRoot = blockRoot;\n+      this.parentRoot = parentRoot;\n+      this.stateRoot = stateRoot;\n+      this.justifiedEpoch = justifiedEpoch;\n+      this.finalizedEpoch = finalizedEpoch;\n+    }\n+\n+    public static Bytes toBytes(ProtoNode node) {", "originalCommit": "6e02cdef9b60fd6ade19c193033489c2dcafd0c4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAwMDAyMQ==", "url": "https://github.com/ConsenSys/teku/pull/2270#discussion_r448000021", "bodyText": "Done.", "author": "cemozerr", "createdAt": "2020-06-30T21:51:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk3NDY4MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk2OTg4Mg==", "url": "https://github.com/ConsenSys/teku/pull/2270#discussion_r447969882", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                final SignedBlockAndState genesis = chainBuilder.generateGenesis();\n          \n          \n            \n                storageSystem.recentChainData().initializeFromGenesis(genesis.getState());\n          \n          \n            \n                storageSystem.chainUpdater().initializeGenesis();", "author": "mbaxter", "createdAt": "2020-06-30T20:49:04Z", "path": "storage/src/test/java/tech/pegasys/teku/storage/server/ProtoArrayStorageTest.java", "diffHunk": "@@ -0,0 +1,161 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.storage.server;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Optional;\n+import org.apache.tuweni.bytes.Bytes32;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import tech.pegasys.teku.bls.BLSKeyGenerator;\n+import tech.pegasys.teku.bls.BLSKeyPair;\n+import tech.pegasys.teku.core.ChainBuilder;\n+import tech.pegasys.teku.datastructures.blocks.SignedBlockAndState;\n+import tech.pegasys.teku.protoarray.ProtoArray;\n+import tech.pegasys.teku.protoarray.ProtoNode;\n+import tech.pegasys.teku.storage.storageSystem.InMemoryStorageSystem;\n+import tech.pegasys.teku.storage.storageSystem.StorageSystem;\n+import tech.pegasys.teku.util.async.SafeFuture;\n+import tech.pegasys.teku.util.config.StateStorageMode;\n+\n+public class ProtoArrayStorageTest {\n+  protected static final List<BLSKeyPair> VALIDATOR_KEYS = BLSKeyGenerator.generateKeyPairs(3);\n+  private ProtoArrayStorage protoArrayStorage;\n+\n+  protected final ChainBuilder chainBuilder = ChainBuilder.create(VALIDATOR_KEYS);\n+\n+  private final StorageSystem storageSystem =\n+      InMemoryStorageSystem.createEmptyV4StorageSystem(StateStorageMode.ARCHIVE, 1);\n+\n+  @BeforeEach\n+  public void beforeEach() {\n+    // Initialize db\n+    final SignedBlockAndState genesis = chainBuilder.generateGenesis();\n+    storageSystem.recentChainData().initializeFromGenesis(genesis.getState());", "originalCommit": "6e02cdef9b60fd6ade19c193033489c2dcafd0c4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAwMDMwMA==", "url": "https://github.com/ConsenSys/teku/pull/2270#discussion_r448000300", "bodyText": "Done.", "author": "cemozerr", "createdAt": "2020-06-30T21:51:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk2OTg4Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk3NzgyOQ==", "url": "https://github.com/ConsenSys/teku/pull/2270#discussion_r447977829", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              void updateProtoArrayOnDisk(ProtoArray protoArray);\n          \n          \n            \n              void onProtoArrayUpdate(ProtoArray protoArray);", "author": "mbaxter", "createdAt": "2020-06-30T21:04:01Z", "path": "protoarray/src/main/java/tech/pegasys/teku/protoarray/ProtoArrayStorageChannel.java", "diffHunk": "@@ -0,0 +1,24 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.protoarray;\n+\n+import java.util.Optional;\n+import tech.pegasys.teku.util.async.SafeFuture;\n+\n+public interface ProtoArrayStorageChannel {\n+\n+  void updateProtoArrayOnDisk(ProtoArray protoArray);", "originalCommit": "6e02cdef9b60fd6ade19c193033489c2dcafd0c4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk5OTk5Mw==", "url": "https://github.com/ConsenSys/teku/pull/2270#discussion_r447999993", "bodyText": "Sending the same mutable instance of ProtoArray over the event channel isn't a good idea.  We'll wind up with multiple threads accessing it and what actually gets stored won't be the same as what was there when the call to this method was made.", "author": "ajsutton", "createdAt": "2020-06-30T21:51:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk3NzgyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAwMDQ1MQ==", "url": "https://github.com/ConsenSys/teku/pull/2270#discussion_r448000451", "bodyText": "Done.", "author": "cemozerr", "createdAt": "2020-06-30T21:52:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk3NzgyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQyOTUyMg==", "url": "https://github.com/ConsenSys/teku/pull/2270#discussion_r448429522", "bodyText": "I'm thinking about my options. If I send a final ProtoArray instance we'll still wind up with multiple threads accessing it since it is only a reference. Seems like the best way forward is to convert to bytes on the client-side and send only bytes over the event channel.", "author": "cemozerr", "createdAt": "2020-07-01T15:06:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk3NzgyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQ0ODc2MQ==", "url": "https://github.com/ConsenSys/teku/pull/2270#discussion_r448448761", "bodyText": "After offline discussion with @mbaxter, I'm moving on to taking a snapshot of the ProtoArray and sending that over instead.", "author": "cemozerr", "createdAt": "2020-07-01T15:36:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk3NzgyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQ1NzE1NA==", "url": "https://github.com/ConsenSys/teku/pull/2270#discussion_r448457154", "bodyText": "Done.", "author": "cemozerr", "createdAt": "2020-07-01T15:49:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk3NzgyOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk3Nzk4Nw==", "url": "https://github.com/ConsenSys/teku/pull/2270#discussion_r447977987", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              SafeFuture<Optional<ProtoArray>> getProtoArrayFromDisk();\n          \n          \n            \n              SafeFuture<Optional<ProtoArray>> getProtoArray();", "author": "mbaxter", "createdAt": "2020-06-30T21:04:17Z", "path": "protoarray/src/main/java/tech/pegasys/teku/protoarray/ProtoArrayStorageChannel.java", "diffHunk": "@@ -0,0 +1,24 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.protoarray;\n+\n+import java.util.Optional;\n+import tech.pegasys.teku.util.async.SafeFuture;\n+\n+public interface ProtoArrayStorageChannel {\n+\n+  void updateProtoArrayOnDisk(ProtoArray protoArray);\n+\n+  SafeFuture<Optional<ProtoArray>> getProtoArrayFromDisk();", "originalCommit": "6e02cdef9b60fd6ade19c193033489c2dcafd0c4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAwMDE5Mg==", "url": "https://github.com/ConsenSys/teku/pull/2270#discussion_r448000192", "bodyText": "Loading a full ProtoArray is fine here because the server side hands it off and doesn't use it again.", "author": "ajsutton", "createdAt": "2020-06-30T21:51:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk3Nzk4Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAwMDYyOA==", "url": "https://github.com/ConsenSys/teku/pull/2270#discussion_r448000628", "bodyText": "Hmm I do like the explicitness of this method name.", "author": "cemozerr", "createdAt": "2020-06-30T21:52:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk3Nzk4Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk5NDM5OA==", "url": "https://github.com/ConsenSys/teku/pull/2270#discussion_r447994398", "bodyText": "We should probably be running this test against different versions of the db.", "author": "mbaxter", "createdAt": "2020-06-30T21:38:30Z", "path": "storage/src/test/java/tech/pegasys/teku/storage/server/ProtoArrayStorageTest.java", "diffHunk": "@@ -0,0 +1,161 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.storage.server;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Optional;\n+import org.apache.tuweni.bytes.Bytes32;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import tech.pegasys.teku.bls.BLSKeyGenerator;\n+import tech.pegasys.teku.bls.BLSKeyPair;\n+import tech.pegasys.teku.core.ChainBuilder;\n+import tech.pegasys.teku.datastructures.blocks.SignedBlockAndState;\n+import tech.pegasys.teku.protoarray.ProtoArray;\n+import tech.pegasys.teku.protoarray.ProtoNode;\n+import tech.pegasys.teku.storage.storageSystem.InMemoryStorageSystem;\n+import tech.pegasys.teku.storage.storageSystem.StorageSystem;\n+import tech.pegasys.teku.util.async.SafeFuture;\n+import tech.pegasys.teku.util.config.StateStorageMode;\n+\n+public class ProtoArrayStorageTest {\n+  protected static final List<BLSKeyPair> VALIDATOR_KEYS = BLSKeyGenerator.generateKeyPairs(3);\n+  private ProtoArrayStorage protoArrayStorage;\n+\n+  protected final ChainBuilder chainBuilder = ChainBuilder.create(VALIDATOR_KEYS);\n+\n+  private final StorageSystem storageSystem =\n+      InMemoryStorageSystem.createEmptyV4StorageSystem(StateStorageMode.ARCHIVE, 1);", "originalCommit": "6e02cdef9b60fd6ade19c193033489c2dcafd0c4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAwMDgwMQ==", "url": "https://github.com/ConsenSys/teku/pull/2270#discussion_r448000801", "bodyText": "Great point.", "author": "cemozerr", "createdAt": "2020-06-30T21:52:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk5NDM5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQ4MzgyMA==", "url": "https://github.com/ConsenSys/teku/pull/2270#discussion_r448483820", "bodyText": "Done.", "author": "cemozerr", "createdAt": "2020-07-01T16:34:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzk5NDM5OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAwMDQzMQ==", "url": "https://github.com/ConsenSys/teku/pull/2270#discussion_r448000431", "bodyText": "nit: fromDisk is implied given it's a database - probably just getProtoArray", "author": "ajsutton", "createdAt": "2020-06-30T21:52:06Z", "path": "storage/src/main/java/tech/pegasys/teku/storage/server/Database.java", "diffHunk": "@@ -70,7 +71,11 @@\n   @MustBeClosed\n   Stream<DepositsFromBlockEvent> streamDepositsFromBlocks();\n \n+  Optional<ProtoArray> getProtoArrayFromDisk();", "originalCommit": "6e02cdef9b60fd6ade19c193033489c2dcafd0c4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAwMDU1OQ==", "url": "https://github.com/ConsenSys/teku/pull/2270#discussion_r448000559", "bodyText": "nit: Probably just putProtoArray.\nActually thinking about it, probably don't need OnDisk or FromDisk anywhere - the particular storage implementation in use might not write to disk.", "author": "ajsutton", "createdAt": "2020-06-30T21:52:25Z", "path": "storage/src/main/java/tech/pegasys/teku/storage/server/Database.java", "diffHunk": "@@ -70,7 +71,11 @@\n   @MustBeClosed\n   Stream<DepositsFromBlockEvent> streamDepositsFromBlocks();\n \n+  Optional<ProtoArray> getProtoArrayFromDisk();\n+\n   void addMinGenesisTimeBlock(final MinGenesisTimeBlockEvent event);\n \n   void addDepositsFromBlockEvent(final DepositsFromBlockEvent event);\n+\n+  void updateProtoArrayOnDisk(final ProtoArray protoArray);", "originalCommit": "6e02cdef9b60fd6ade19c193033489c2dcafd0c4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQ3MTQyOA==", "url": "https://github.com/ConsenSys/teku/pull/2270#discussion_r448471428", "bodyText": "Done.", "author": "cemozerr", "createdAt": "2020-07-01T16:13:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAwMDU1OQ=="}], "type": "inlineReview"}, {"oid": "b2ce283773cf0dc81a9b7a5766cdb37ae56aa638", "url": "https://github.com/ConsenSys/teku/commit/b2ce283773cf0dc81a9b7a5766cdb37ae56aa638", "message": "Resolve comments", "committedDate": "2020-07-01T14:14:50Z", "type": "commit"}, {"oid": "3918743039ce50c5cdd2722a31ff7c7c40494072", "url": "https://github.com/ConsenSys/teku/commit/3918743039ce50c5cdd2722a31ff7c7c40494072", "message": "Save protoArray snapshot", "committedDate": "2020-07-01T16:21:51Z", "type": "commit"}, {"oid": "16a9ef25ded887f16806675d80d3ef4c58b28c42", "url": "https://github.com/ConsenSys/teku/commit/16a9ef25ded887f16806675d80d3ef4c58b28c42", "message": "Merge remote-tracking branch 'remotes/origin/master' into protoArrayToDiskUtilities\n\n# Conflicts:\n#\tstorage/src/main/java/tech/pegasys/teku/storage/server/rocksdb/RocksDbDatabase.java", "committedDate": "2020-07-01T16:23:38Z", "type": "commit"}, {"oid": "99858f01594e7a28e4373761e3e18c8b7f97122f", "url": "https://github.com/ConsenSys/teku/commit/99858f01594e7a28e4373761e3e18c8b7f97122f", "message": "Merge branch 'master' into protoArrayToDiskUtilities", "committedDate": "2020-07-01T18:52:30Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU3NDczNQ==", "url": "https://github.com/ConsenSys/teku/pull/2270#discussion_r448574735", "bodyText": "(nit) Probably a good idea to use the centralized provider so we have one location where we can update tests that depend on the database:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              @MethodSource(\"getStorageSystems\")\n          \n          \n            \n              @ArgumentsSource(StorageSystemArgumentsProvider.class)", "author": "mbaxter", "createdAt": "2020-07-01T19:34:42Z", "path": "storage/src/test/java/tech/pegasys/teku/storage/server/ProtoArrayStorageTest.java", "diffHunk": "@@ -0,0 +1,153 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.storage.server;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static tech.pegasys.teku.protoarray.ProtoArrayTestUtil.assertThatProtoArrayMatches;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Stream;\n+import org.apache.tuweni.bytes.Bytes32;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import tech.pegasys.teku.protoarray.ProtoArray;\n+import tech.pegasys.teku.protoarray.ProtoArraySnaphot;\n+import tech.pegasys.teku.storage.storageSystem.InMemoryStorageSystem;\n+import tech.pegasys.teku.storage.storageSystem.StorageSystem;\n+import tech.pegasys.teku.util.async.SafeFuture;\n+import tech.pegasys.teku.util.config.StateStorageMode;\n+\n+public class ProtoArrayStorageTest {\n+  private ProtoArrayStorage protoArrayStorage;\n+\n+  @ParameterizedTest\n+  @MethodSource(\"getStorageSystems\")", "originalCommit": "99858f01594e7a28e4373761e3e18c8b7f97122f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU5MTM0OQ==", "url": "https://github.com/ConsenSys/teku/pull/2270#discussion_r448591349", "bodyText": "Done.", "author": "cemozerr", "createdAt": "2020-07-01T20:11:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU3NDczNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU3NTE0Ng==", "url": "https://github.com/ConsenSys/teku/pull/2270#discussion_r448575146", "bodyText": "(nit) Why not just:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public ProtoNode cloneForSaving() {\n          \n          \n            \n              public ProtoNode clone() {", "author": "mbaxter", "createdAt": "2020-07-01T19:35:32Z", "path": "protoarray/src/main/java/tech/pegasys/teku/protoarray/ProtoNode.java", "diffHunk": "@@ -122,4 +123,50 @@ public void setBestChildIndex(Optional<Integer> bestChildIndex) {\n   public void setBestDescendantIndex(Optional<Integer> bestDescendantIndex) {\n     this.bestDescendantIndex = bestDescendantIndex;\n   }\n+\n+  public ProtoNode cloneForSaving() {", "originalCommit": "99858f01594e7a28e4373761e3e18c8b7f97122f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU4Nzg3NA==", "url": "https://github.com/ConsenSys/teku/pull/2270#discussion_r448587874", "bodyText": "Because we don't clone variables that are not necessary for saving such as parentIndex, weight etc.", "author": "cemozerr", "createdAt": "2020-07-01T20:03:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU3NTE0Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU3NTg5NQ==", "url": "https://github.com/ConsenSys/teku/pull/2270#discussion_r448575895", "bodyText": "(nit) \"save\" seems a bit misleading:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public static ProtoArraySnaphot save(final ProtoArray protoArray) {\n          \n          \n            \n              public static ProtoArraySnaphot create(final ProtoArray protoArray) {", "author": "mbaxter", "createdAt": "2020-07-01T19:36:53Z", "path": "protoarray/src/main/java/tech/pegasys/teku/protoarray/ProtoArraySnaphot.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.protoarray;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import tech.pegasys.teku.util.config.Constants;\n+\n+public class ProtoArraySnaphot {\n+\n+  private final UnsignedLong justifiedEpoch;\n+  private final UnsignedLong finalizedEpoch;\n+  private final List<ProtoNode> nodes;\n+\n+  private ProtoArraySnaphot(\n+      UnsignedLong justifiedEpoch, UnsignedLong finalizedEpoch, List<ProtoNode> nodes) {\n+    this.justifiedEpoch = justifiedEpoch;\n+    this.finalizedEpoch = finalizedEpoch;\n+    this.nodes = nodes;\n+  }\n+\n+  public static ProtoArraySnaphot save(final ProtoArray protoArray) {", "originalCommit": "99858f01594e7a28e4373761e3e18c8b7f97122f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU4ODgzMA==", "url": "https://github.com/ConsenSys/teku/pull/2270#discussion_r448588830", "bodyText": "done.", "author": "cemozerr", "createdAt": "2020-07-01T20:05:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU3NTg5NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU3NzAyMg==", "url": "https://github.com/ConsenSys/teku/pull/2270#discussion_r448577022", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class ProtoArraySnaphot {\n          \n          \n            \n            public class ProtoArraySnapshot {", "author": "mbaxter", "createdAt": "2020-07-01T19:39:20Z", "path": "protoarray/src/main/java/tech/pegasys/teku/protoarray/ProtoArraySnaphot.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.protoarray;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import tech.pegasys.teku.util.config.Constants;\n+\n+public class ProtoArraySnaphot {", "originalCommit": "99858f01594e7a28e4373761e3e18c8b7f97122f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU4ODQ1MA==", "url": "https://github.com/ConsenSys/teku/pull/2270#discussion_r448588450", "bodyText": "fixed.", "author": "cemozerr", "createdAt": "2020-07-01T20:04:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU3NzAyMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU3ODc1Ng==", "url": "https://github.com/ConsenSys/teku/pull/2270#discussion_r448578756", "bodyText": "(nit) I think I'd just pass the snapshot to the db.  That way the API's are a bit clearer in requiring an immutable copy of protoarray\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                database.putProtoArray(protoArraySnaphot.toProtoArray());\n          \n          \n            \n                database.putProtoArray(protoArraySnaphot);", "author": "mbaxter", "createdAt": "2020-07-01T19:43:12Z", "path": "storage/src/main/java/tech/pegasys/teku/storage/server/ProtoArrayStorage.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.storage.server;\n+\n+import java.util.Optional;\n+import tech.pegasys.teku.protoarray.ProtoArray;\n+import tech.pegasys.teku.protoarray.ProtoArraySnaphot;\n+import tech.pegasys.teku.protoarray.ProtoArrayStorageChannel;\n+import tech.pegasys.teku.util.async.SafeFuture;\n+\n+public class ProtoArrayStorage implements ProtoArrayStorageChannel {\n+  private final Database database;\n+\n+  public ProtoArrayStorage(Database database) {\n+    this.database = database;\n+  }\n+\n+  @Override\n+  public void onProtoArrayUpdate(ProtoArraySnaphot protoArraySnaphot) {\n+    database.putProtoArray(protoArraySnaphot.toProtoArray());", "originalCommit": "99858f01594e7a28e4373761e3e18c8b7f97122f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYzOTYzMA==", "url": "https://github.com/ConsenSys/teku/pull/2270#discussion_r448639630", "bodyText": "Done.", "author": "cemozerr", "createdAt": "2020-07-01T22:03:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU3ODc1Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU3OTgwMQ==", "url": "https://github.com/ConsenSys/teku/pull/2270#discussion_r448579801", "bodyText": "If we really want to enforce immutability, we should probably create a copy of the nodes list we're passing into the new ProtoArray instance.  Or else, have ProtoArray create the copy internally.", "author": "mbaxter", "createdAt": "2020-07-01T19:45:33Z", "path": "protoarray/src/main/java/tech/pegasys/teku/protoarray/ProtoArraySnaphot.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.protoarray;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import tech.pegasys.teku.util.config.Constants;\n+\n+public class ProtoArraySnaphot {\n+\n+  private final UnsignedLong justifiedEpoch;\n+  private final UnsignedLong finalizedEpoch;\n+  private final List<ProtoNode> nodes;\n+\n+  private ProtoArraySnaphot(\n+      UnsignedLong justifiedEpoch, UnsignedLong finalizedEpoch, List<ProtoNode> nodes) {\n+    this.justifiedEpoch = justifiedEpoch;\n+    this.finalizedEpoch = finalizedEpoch;\n+    this.nodes = nodes;\n+  }\n+\n+  public static ProtoArraySnaphot save(final ProtoArray protoArray) {\n+    List<ProtoNode> nodes =\n+        protoArray.getNodes().stream().map(ProtoNode::cloneForSaving).collect(Collectors.toList());\n+    UnsignedLong justifiedEpoch = protoArray.getJustifiedEpoch();\n+    UnsignedLong finalizedEpoch = protoArray.getFinalizedEpoch();\n+    return new ProtoArraySnaphot(justifiedEpoch, finalizedEpoch, nodes);\n+  }\n+\n+  public ProtoArray toProtoArray() {", "originalCommit": "99858f01594e7a28e4373761e3e18c8b7f97122f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU4OTU1OQ==", "url": "https://github.com/ConsenSys/teku/pull/2270#discussion_r448589559", "bodyText": "We create a copy of the nodes list as we're creating the ProtoArraySnapshot. What am I missing?", "author": "cemozerr", "createdAt": "2020-07-01T20:07:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU3OTgwMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYxOTUzMA==", "url": "https://github.com/ConsenSys/teku/pull/2270#discussion_r448619530", "bodyText": "The snapshot is indirectly mutable because you can do something like:\nprotoArray = snapshot.toProtoArray();\nprotoArray.onBlock(...)\n\nAnd I think those changes will then be reflected back in the snapshot.", "author": "mbaxter", "createdAt": "2020-07-01T21:14:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU3OTgwMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYyMTgxMQ==", "url": "https://github.com/ConsenSys/teku/pull/2270#discussion_r448621811", "bodyText": "Oh gotcha, makes sense.", "author": "cemozerr", "createdAt": "2020-07-01T21:19:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU3OTgwMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYyNDUyNw==", "url": "https://github.com/ConsenSys/teku/pull/2270#discussion_r448624527", "bodyText": "Actually, this is fine because it doesn't matter if the snapshot is later manipulated.", "author": "cemozerr", "createdAt": "2020-07-01T21:25:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU3OTgwMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYyNDgwOQ==", "url": "https://github.com/ConsenSys/teku/pull/2270#discussion_r448624809", "bodyText": "Because the server side hands it off and does not touch it again.", "author": "cemozerr", "createdAt": "2020-07-01T21:26:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU3OTgwMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYyNTMyMA==", "url": "https://github.com/ConsenSys/teku/pull/2270#discussion_r448625320", "bodyText": "Yeah it will work but it's not a very good pattern to have a class look like it's immutable but not actually be.  Sets you up for bugs in the future when how its used changes.", "author": "ajsutton", "createdAt": "2020-07-01T21:27:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU3OTgwMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYzNTkyMw==", "url": "https://github.com/ConsenSys/teku/pull/2270#discussion_r448635923", "bodyText": "I made the comment but the next commit will make it immutable regardless.", "author": "cemozerr", "createdAt": "2020-07-01T21:53:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU3OTgwMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYzOTY2MA==", "url": "https://github.com/ConsenSys/teku/pull/2270#discussion_r448639660", "bodyText": "Done.", "author": "cemozerr", "createdAt": "2020-07-01T22:03:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU3OTgwMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU4MDU3OQ==", "url": "https://github.com/ConsenSys/teku/pull/2270#discussion_r448580579", "bodyText": "(nit) Similarly, it might make sense to return a snapshot here", "author": "mbaxter", "createdAt": "2020-07-01T19:47:17Z", "path": "storage/src/main/java/tech/pegasys/teku/storage/server/ProtoArrayStorage.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.storage.server;\n+\n+import java.util.Optional;\n+import tech.pegasys.teku.protoarray.ProtoArray;\n+import tech.pegasys.teku.protoarray.ProtoArraySnaphot;\n+import tech.pegasys.teku.protoarray.ProtoArrayStorageChannel;\n+import tech.pegasys.teku.util.async.SafeFuture;\n+\n+public class ProtoArrayStorage implements ProtoArrayStorageChannel {\n+  private final Database database;\n+\n+  public ProtoArrayStorage(Database database) {\n+    this.database = database;\n+  }\n+\n+  @Override\n+  public void onProtoArrayUpdate(ProtoArraySnaphot protoArraySnaphot) {\n+    database.putProtoArray(protoArraySnaphot.toProtoArray());\n+  }\n+\n+  @Override\n+  public SafeFuture<Optional<ProtoArray>> getProtoArray() {", "originalCommit": "99858f01594e7a28e4373761e3e18c8b7f97122f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODYzOTcwMQ==", "url": "https://github.com/ConsenSys/teku/pull/2270#discussion_r448639701", "bodyText": "Done.", "author": "cemozerr", "createdAt": "2020-07-01T22:03:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODU4MDU3OQ=="}], "type": "inlineReview"}, {"oid": "7d98e61d4b97224733a4ff987037bd7b05fb2f95", "url": "https://github.com/ConsenSys/teku/commit/7d98e61d4b97224733a4ff987037bd7b05fb2f95", "message": "Deal only with snapshots on database & use central argument provider", "committedDate": "2020-07-01T22:02:59Z", "type": "commit"}, {"oid": "25ce9fba8fe6ff36d04cad28103921e57c741b2c", "url": "https://github.com/ConsenSys/teku/commit/25ce9fba8fe6ff36d04cad28103921e57c741b2c", "message": "Merge branch 'master' into protoArrayToDiskUtilities", "committedDate": "2020-07-01T22:03:46Z", "type": "commit"}, {"oid": "9b44eec3616abc744521fc91b331a9545e6faaff", "url": "https://github.com/ConsenSys/teku/commit/9b44eec3616abc744521fc91b331a9545e6faaff", "message": "Fix parametrized test arguments", "committedDate": "2020-07-02T14:35:12Z", "type": "commit"}, {"oid": "3512a6df165eae157845b9cc7d7d8207f54f838c", "url": "https://github.com/ConsenSys/teku/commit/3512a6df165eae157845b9cc7d7d8207f54f838c", "message": "Merge branch 'master' into protoArrayToDiskUtilities", "committedDate": "2020-07-02T15:07:21Z", "type": "commit"}]}