{"pr_number": 1621, "pr_title": "Use binary search to find the min genesis block", "pr_createdAt": "2020-04-19T23:59:09Z", "pr_url": "https://github.com/ConsenSys/teku/pull/1621", "timeline": [{"oid": "7d46f8ed68a54887241b97d9c37bf89836c4d94c", "url": "https://github.com/ConsenSys/teku/commit/7d46f8ed68a54887241b97d9c37bf89836c4d94c", "message": "Use binary search to find the min genesis block.", "committedDate": "2020-04-19T23:56:21Z", "type": "commit"}, {"oid": "fa178c97d75fa413b1d38fcc5993be034c395645", "url": "https://github.com/ConsenSys/teku/commit/fa178c97d75fa413b1d38fcc5993be034c395645", "message": "Merge branch 'master' of github.com:PegaSysEng/teku into min-genesis-binary", "committedDate": "2020-04-19T23:59:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTA1Njc5NA==", "url": "https://github.com/ConsenSys/teku/pull/1621#discussion_r411056794", "bodyText": "this test is the same as shouldAddGenesisDelayToBlockTimestampWhenConsideringIfItIsTheMinGenesisBlock", "author": "macfarla", "createdAt": "2020-04-20T02:40:28Z", "path": "pow/src/test/java/tech/pegasys/artemis/pow/MinimumGenesisTimeBlockFinderTest.java", "diffHunk": "@@ -49,115 +46,69 @@ static void tearDown() {\n   }\n \n   @Test\n-  void minGenesisBlock_belowEstimatedBlock() {\n-    Constants.SECONDS_PER_ETH1_BLOCK = UnsignedLong.valueOf(5);\n-\n-    EthBlock.Block estimationBlock = mockBlockForEth1Provider(\"0xbf\", 1000, 1000);\n-\n-    setMinGenesisTime(500);\n-\n-    // 1002 - 502 = 500, 500 / 5 = 100, the estimated genesis block number should be:\n-    // 1000 - 100 = 900\n-\n-    mockBlockForEth1Provider(\"0x11\", 900, 600);\n-\n-    // since the estimated block still had higher timestamp than min genesis, we should explore\n-    // downwards\n-\n-    mockBlockForEth1Provider(\"0x08\", 899, 510);\n-\n-    // since the second requested block still had higher timestamp than min genesis, we should\n-    // explore downwards\n-\n-    mockBlockForEth1Provider(\"0x00\", 898, 490);\n-\n-    // since the last requested block now had lower timestamp than min genesis, we should publish\n-    // the block\n-    // right before this as the first valid block\n-\n-    EthBlock.Block minGenesisTimeBlock =\n-        minimumGenesisTimeBlockFinder.findMinGenesisTimeBlockInHistory(estimationBlock).join();\n-\n-    assertThatIsBlock(minGenesisTimeBlock, \"0x08\", 899, 510);\n+  public void shouldFindMinGenesisTime() {\n+    final long[] timestamps = {0, 1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000};\n+    final Block[] blocks = withBlockTimestamps(timestamps);\n+    final int minGenesisTime = 3500;\n+    final Block expectedMinGenesisTimeBlock = blocks[4];\n+    assertMinGenesisBlock(blocks, minGenesisTime, expectedMinGenesisTimeBlock);\n   }\n \n   @Test\n-  void minGenesisBlock_AboveEstimatedBlock() {\n-    Constants.SECONDS_PER_ETH1_BLOCK = UnsignedLong.valueOf(5);\n-\n-    //    mockLatestCanonicalBlock(1000);\n-    EthBlock.Block estimationBlock = mockBlockForEth1Provider(\"0xbf\", 1000, 1000);\n-\n-    setMinGenesisTime(500);\n-\n-    // 1002 - 502 = 500, 500 / 5 = 100, the estimated genesis block number should be:\n-    // 1000 - 100 = 900\n-\n-    mockBlockForEth1Provider(\"0x08\", 900, 400);\n-\n-    // since the estimated block still had lower timestamp than min genesis, we should explore\n-    // upwards\n-\n-    mockBlockForEth1Provider(\"0x08\", 901, 450);\n-\n-    // since the second requested block still had lower timestamp than min genesis, we should\n-    // explore upwards\n-\n-    mockBlockForEth1Provider(\"0x08\", 902, 510);\n-\n-    // since the last requested block now had higher timestamp than min genesis, we should publish\n-    // the block\n-\n-    EthBlock.Block minGenesisTimeBlock =\n-        minimumGenesisTimeBlockFinder.findMinGenesisTimeBlockInHistory(estimationBlock).join();\n-\n-    assertThatIsBlock(minGenesisTimeBlock, \"0x08\", 902, 510);\n+  public void shouldAddGenesisDelayToBlockTimestampWhenConsideringIfItIsTheMinGenesisBlock() {\n+    final Block[] blocks = withBlockTimestamps(1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000);\n+    final int minGenesisTime = 3002;\n+    final Block expectedMinGenesisTimeBlock = blocks[2];\n+    assertMinGenesisBlock(blocks, minGenesisTime, expectedMinGenesisTimeBlock);\n   }\n \n   @Test\n-  void minGenesisBlock_EstimatedBlockIsTheValidBlock() {\n-    Constants.SECONDS_PER_ETH1_BLOCK = UnsignedLong.valueOf(5);\n-\n-    //    mockLatestCanonicalBlock(1000);\n-    EthBlock.Block estimationBlock = mockBlockForEth1Provider(\"0xbf\", 1000, 1000);\n-\n-    setMinGenesisTime(502);\n-\n-    // 1002 - 502 = 500, 500 / 5 = 100, the estimated genesis block number should be:\n-    // 1000 - 100 = 900\n+  public void shouldFindMinGenesisTimeBlockAtVeryStartOfChain() {\n+    final Block[] blocks = withBlockTimestamps(4000, 5000, 6000, 7000, 8000);\n+    final int minGenesisTime = 3000;\n+    final Block expectedMinGenesisTimeBlock = blocks[0];\n+    assertMinGenesisBlock(blocks, minGenesisTime, expectedMinGenesisTimeBlock);\n+  }\n \n-    mockBlockForEth1Provider(\"0x08\", 900, 500);\n+  @Test\n+  public void shouldFindMinGenesisTimeBlockAtHeadOfChain() {\n+    final Block[] blocks = withBlockTimestamps(4000, 5000, 6000, 7000, 8000);\n+    final int minGenesisTime = 8000;\n+    final Block expectedMinGenesisTimeBlock = blocks[blocks.length - 1];\n+    assertMinGenesisBlock(blocks, minGenesisTime, expectedMinGenesisTimeBlock);\n+  }\n \n-    // since the genesis time calculated from the , we should publish the block\n+  @Test\n+  public void shouldFindMinGenesisTimeWithExactMatch() {", "originalCommit": "fa178c97d75fa413b1d38fcc5993be034c395645", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTA5NjE3Ng==", "url": "https://github.com/ConsenSys/teku/pull/1621#discussion_r411096176", "bodyText": "True, only need one of them.", "author": "ajsutton", "createdAt": "2020-04-20T05:08:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTA1Njc5NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTA1NzI0MQ==", "url": "https://github.com/ConsenSys/teku/pull/1621#discussion_r411057241", "bodyText": "I don't know if this comment is useful here?", "author": "macfarla", "createdAt": "2020-04-20T02:42:23Z", "path": "pow/src/test/java/tech/pegasys/artemis/pow/MinimumGenesisTimeBlockFinderTest.java", "diffHunk": "@@ -20,27 +20,24 @@\n import com.google.common.primitives.UnsignedLong;\n import java.math.BigInteger;\n import org.junit.jupiter.api.AfterAll;\n-import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.BeforeAll;\n import org.junit.jupiter.api.Test;\n import org.web3j.protocol.core.methods.response.EthBlock;\n+import org.web3j.protocol.core.methods.response.EthBlock.Block;\n import tech.pegasys.artemis.util.async.SafeFuture;\n import tech.pegasys.artemis.util.config.Constants;\n \n public class MinimumGenesisTimeBlockFinderTest {\n \n-  private Eth1Provider eth1Provider;\n+  private Eth1Provider eth1Provider = mock(Eth1Provider.class);\n \n-  private MinimumGenesisTimeBlockFinder minimumGenesisTimeBlockFinder;\n-\n-  @BeforeEach\n-  void setUp() {\n-    eth1Provider = mock(Eth1Provider.class);\n-\n-    minimumGenesisTimeBlockFinder = new MinimumGenesisTimeBlockFinder(eth1Provider);\n+  private MinimumGenesisTimeBlockFinder minimumGenesisTimeBlockFinder =\n+      new MinimumGenesisTimeBlockFinder(eth1Provider);\n \n+  @BeforeAll\n+  static void setUp() {\n+    // calculateCandidateGenesisTimestamp will return blockTime + 2", "originalCommit": "fa178c97d75fa413b1d38fcc5993be034c395645", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTA5NjA1OA==", "url": "https://github.com/ConsenSys/teku/pull/1621#discussion_r411096058", "bodyText": "It explains why the constant is being set and the effect it has on the genesis time derived from a block timestamp. I've tidied it up a bit.", "author": "ajsutton", "createdAt": "2020-04-20T05:07:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTA1NzI0MQ=="}], "type": "inlineReview"}, {"oid": "90fea217dedf83b789cd69679724af792a7d0331", "url": "https://github.com/ConsenSys/teku/commit/90fea217dedf83b789cd69679724af792a7d0331", "message": "Merge branch 'master' of github.com:PegaSysEng/teku into min-genesis-binary", "committedDate": "2020-04-20T05:05:10Z", "type": "commit"}, {"oid": "ca1e2c51f35d011b2fe681ddfe0b6869c0f3174e", "url": "https://github.com/ConsenSys/teku/commit/ca1e2c51f35d011b2fe681ddfe0b6869c0f3174e", "message": "Review comments.", "committedDate": "2020-04-20T05:08:20Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUzMTY3MA==", "url": "https://github.com/ConsenSys/teku/pull/1621#discussion_r411531670", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                // The very first block is after min genesis so just use it\n          \n          \n            \n                                // The very first block of eth1 is after eth 2 min genesis so just use it", "author": "cemozerr", "createdAt": "2020-04-20T16:46:47Z", "path": "pow/src/main/java/tech/pegasys/artemis/pow/MinimumGenesisTimeBlockFinder.java", "diffHunk": "@@ -37,75 +42,40 @@ public MinimumGenesisTimeBlockFinder(Eth1Provider eth1Provider) {\n   /**\n    * Find first block in history that has timestamp greater than MIN_GENESIS_TIME\n    *\n-   * @param estimationBlock estimationBlock that will be used for estimation\n+   * @param headBlock block at current chain head\n    * @return min genesis time block\n    */\n-  public SafeFuture<EthBlock.Block> findMinGenesisTimeBlockInHistory(\n-      EthBlock.Block estimationBlock) {\n-    UnsignedLong estimatedBlockNumber =\n-        getEstimatedMinGenesisTimeBlockNumber(estimationBlock, Constants.SECONDS_PER_ETH1_BLOCK);\n-    return eth1Provider\n-        .getEth1BlockFuture(estimatedBlockNumber)\n-        .thenCompose(\n-            block -> {\n-              int comparison = compareBlockTimestampToMinGenesisTime(block);\n-              if (comparison > 0) {\n-                // If block timestamp is greater than min genesis time\n-                // explore blocks downwards\n-                return exploreBlocksDownwards(block);\n-              } else if (comparison < 0) {\n-                // If block timestamp is less than min genesis time\n-                // explore blocks upwards\n-                return exploreBlocksUpwards(block);\n-              } else {\n-                return SafeFuture.completedFuture(block);\n-              }\n-            });\n+  public SafeFuture<EthBlock.Block> findMinGenesisTimeBlockInHistory(EthBlock.Block headBlock) {\n+    return binarySearchLoop(new SearchContext(headBlock));\n   }\n \n-  private SafeFuture<EthBlock.Block> exploreBlocksDownwards(EthBlock.Block previousBlock) {\n-    if (previousBlock.getNumber().equals(BigInteger.ZERO)) {\n-      // We reached genesis and thus should be returning genesis as the min genesis block.\n-      return SafeFuture.completedFuture(previousBlock);\n+  private SafeFuture<EthBlock.Block> binarySearchLoop(final SearchContext searchContext) {\n+    if (searchContext.low.compareTo(searchContext.high) <= 0) {\n+      final UnsignedLong mid = searchContext.low.plus(searchContext.high).dividedBy(TWO);\n+      return eth1Provider\n+          .getEth1BlockFuture(mid)\n+          .thenCompose(\n+              midBlock -> {\n+                final int cmp = compareBlockTimestampToMinGenesisTime(midBlock);\n+                if (cmp < 0) {\n+                  searchContext.low = mid.plus(ONE);\n+                  return binarySearchLoop(searchContext);\n+                } else if (cmp > 0) {\n+                  if (mid.equals(ZERO)) {\n+                    // The very first block is after min genesis so just use it", "originalCommit": "ca1e2c51f35d011b2fe681ddfe0b6869c0f3174e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTY3ODU5NA==", "url": "https://github.com/ConsenSys/teku/pull/1621#discussion_r411678594", "bodyText": "Good idea. Done.", "author": "ajsutton", "createdAt": "2020-04-20T20:43:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUzMTY3MA=="}], "type": "inlineReview"}, {"oid": "3c5f714d6fb12d41df9d8c58cb34d85e37be4637", "url": "https://github.com/ConsenSys/teku/commit/3c5f714d6fb12d41df9d8c58cb34d85e37be4637", "message": "Improve comment.", "committedDate": "2020-04-20T20:42:55Z", "type": "commit"}, {"oid": "d0d533f13e5bdc2361c9dd704ad4034f3867616a", "url": "https://github.com/ConsenSys/teku/commit/d0d533f13e5bdc2361c9dd704ad4034f3867616a", "message": "Merge branch 'master' of github.com:PegaSysEng/teku into min-genesis-binary", "committedDate": "2020-04-20T20:43:04Z", "type": "commit"}]}