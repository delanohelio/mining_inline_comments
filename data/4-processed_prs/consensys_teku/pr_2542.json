{"pr_number": 2542, "pr_title": "Implemented Validator API method to subscribe to beacon committee", "pr_createdAt": "2020-08-10T03:04:22Z", "pr_url": "https://github.com/ConsenSys/teku/pull/2542", "timeline": [{"oid": "a683cacf675590dea00cd135362f81a00b9a416c", "url": "https://github.com/ConsenSys/teku/commit/a683cacf675590dea00cd135362f81a00b9a416c", "message": "Implemented Validator API method to subscribe to beacon committee\n\nSigned-off-by: Lucas Saldanha <lucas.saldanha@consensys.net>", "committedDate": "2020-08-10T03:00:08Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzY3MTgwMw==", "url": "https://github.com/ConsenSys/teku/pull/2542#discussion_r467671803", "bodyText": "does this format ok in swagger? might need to use markdown...", "author": "rolfyone", "createdAt": "2020-08-10T03:19:48Z", "path": "data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/handlers/validator/PostSubscribeToBeaconCommittee.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.beaconrestapi.handlers.validator;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_BAD_REQUEST;\n+import static javax.servlet.http.HttpServletResponse.SC_INTERNAL_SERVER_ERROR;\n+import static javax.servlet.http.HttpServletResponse.SC_OK;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_BAD_REQUEST;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_INTERNAL_ERROR;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_OK;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.TAG_VALIDATOR;\n+\n+import com.fasterxml.jackson.databind.JsonMappingException;\n+import io.javalin.http.Context;\n+import io.javalin.http.Handler;\n+import io.javalin.plugin.openapi.annotations.HttpMethod;\n+import io.javalin.plugin.openapi.annotations.OpenApi;\n+import io.javalin.plugin.openapi.annotations.OpenApiContent;\n+import io.javalin.plugin.openapi.annotations.OpenApiRequestBody;\n+import io.javalin.plugin.openapi.annotations.OpenApiResponse;\n+import tech.pegasys.teku.api.ValidatorDataProvider;\n+import tech.pegasys.teku.api.request.SubscribeToBeaconCommitteeRequest;\n+import tech.pegasys.teku.api.schema.SignedAggregateAndProof;\n+import tech.pegasys.teku.beaconrestapi.schema.BadRequest;\n+import tech.pegasys.teku.provider.JsonProvider;\n+\n+public class PostSubscribeToBeaconCommittee implements Handler {\n+\n+  public static final String ROUTE = \"/validator/beacon_committee_subscription\";\n+\n+  private final ValidatorDataProvider provider;\n+  private final JsonProvider jsonProvider;\n+\n+  public PostSubscribeToBeaconCommittee(\n+      final ValidatorDataProvider provider, final JsonProvider jsonProvider) {\n+    this.jsonProvider = jsonProvider;\n+    this.provider = provider;\n+  }\n+\n+  @OpenApi(\n+      path = ROUTE,\n+      method = HttpMethod.POST,\n+      summary = \"Subscribe beacon node to committee attestation subnet.\",\n+      tags = {TAG_VALIDATOR},\n+      requestBody =\n+          @OpenApiRequestBody(content = {@OpenApiContent(from = SignedAggregateAndProof.class)}),\n+      description =\n+          \"After Beacon node receives this request it has to:\\n\"", "originalCommit": "a683cacf675590dea00cd135362f81a00b9a416c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}