{"pr_number": 2129, "pr_title": "Implement attester slashing network validator", "pr_createdAt": "2020-06-11T16:51:53Z", "pr_url": "https://github.com/ConsenSys/teku/pull/2129", "timeline": [{"oid": "3df2f7343685b1c422a798d442214a260e5fd12e", "url": "https://github.com/ConsenSys/teku/commit/3df2f7343685b1c422a798d442214a260e5fd12e", "message": "Implement proposer slashing network validator", "committedDate": "2020-06-11T16:51:19Z", "type": "commit"}, {"oid": "e35a21244c2c836abd9bc24075c5b9c045715f04", "url": "https://github.com/ConsenSys/teku/commit/e35a21244c2c836abd9bc24075c5b9c045715f04", "message": "Merge branch 'master' into attesterSlashingNetworkLayerValidator", "committedDate": "2020-06-11T16:52:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk4MDE1Mw==", "url": "https://github.com/ConsenSys/teku/pull/2129#discussion_r438980153", "bodyText": "I'd probably make this method private and have a second public method that accepts a non-optional set of precalculated indices.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public Optional<OperationInvalidReason> validateSlashing(\n          \n          \n            \n                  final BeaconState state,\n          \n          \n            \n                  final AttesterSlashing attesterSlashing,\n          \n          \n            \n                  final Optional<Set<UnsignedLong>> intersectingIndices) {\n          \n          \n            \n              public Optional<OperationInvalidReason> validateSlashing(\n          \n          \n            \n                  final BeaconState state,\n          \n          \n            \n                  final AttesterSlashing attesterSlashing,\n          \n          \n            \n                  final Set<UnsignedLong> intersectingIndices) {\n          \n          \n            \n                     return validateSlashing(state, attesterSlashing, Optional.of(intersectingIndices));\n          \n          \n            \n               }\n          \n          \n            \n            \n          \n          \n            \n              private Optional<OperationInvalidReason> validateSlashing(\n          \n          \n            \n                  final BeaconState state,\n          \n          \n            \n                  final AttesterSlashing attesterSlashing,\n          \n          \n            \n                  final Optional<Set<UnsignedLong>> intersectingIndices) {", "author": "mbaxter", "createdAt": "2020-06-11T18:12:28Z", "path": "ethereum/core/src/main/java/tech/pegasys/teku/core/operationvalidators/AttesterSlashingStateTransitionValidator.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.core.operationvalidators;\n+\n+import static java.lang.Math.toIntExact;\n+import static tech.pegasys.teku.core.operationvalidators.OperationInvalidReason.check;\n+import static tech.pegasys.teku.core.operationvalidators.OperationInvalidReason.firstOf;\n+import static tech.pegasys.teku.datastructures.util.AttestationUtil.is_slashable_attestation_data;\n+import static tech.pegasys.teku.datastructures.util.AttestationUtil.is_valid_indexed_attestation;\n+import static tech.pegasys.teku.datastructures.util.BeaconStateUtil.get_current_epoch;\n+import static tech.pegasys.teku.datastructures.util.ValidatorsUtil.is_slashable_validator;\n+\n+import com.google.common.collect.Sets;\n+import com.google.common.primitives.UnsignedLong;\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.TreeSet;\n+import tech.pegasys.teku.datastructures.operations.AttesterSlashing;\n+import tech.pegasys.teku.datastructures.operations.IndexedAttestation;\n+import tech.pegasys.teku.datastructures.state.BeaconState;\n+\n+public class AttesterSlashingStateTransitionValidator {\n+\n+  private List<UnsignedLong> indicesToSlash;\n+\n+  public Optional<OperationInvalidReason> validateSlashing(\n+      final BeaconState state,\n+      final AttesterSlashing attesterSlashing,\n+      final Optional<Set<UnsignedLong>> intersectingIndices) {", "originalCommit": "e35a21244c2c836abd9bc24075c5b9c045715f04", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTAxMjQ2NQ==", "url": "https://github.com/ConsenSys/teku/pull/2129#discussion_r439012465", "bodyText": "Makes sense. Done.", "author": "cemozerr", "createdAt": "2020-06-11T19:14:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk4MDE1Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk5Nzg4OQ==", "url": "https://github.com/ConsenSys/teku/pull/2129#discussion_r438997889", "bodyText": "It feels odd to be saving this information to a member variable and resetting it on every call.  What if we instead return a SlashingValidationResult that has a slashedIndices field and an optional OperationInvalidReason?", "author": "mbaxter", "createdAt": "2020-06-11T18:46:15Z", "path": "ethereum/core/src/main/java/tech/pegasys/teku/core/operationvalidators/AttesterSlashingStateTransitionValidator.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.core.operationvalidators;\n+\n+import static java.lang.Math.toIntExact;\n+import static tech.pegasys.teku.core.operationvalidators.OperationInvalidReason.check;\n+import static tech.pegasys.teku.core.operationvalidators.OperationInvalidReason.firstOf;\n+import static tech.pegasys.teku.datastructures.util.AttestationUtil.is_slashable_attestation_data;\n+import static tech.pegasys.teku.datastructures.util.AttestationUtil.is_valid_indexed_attestation;\n+import static tech.pegasys.teku.datastructures.util.BeaconStateUtil.get_current_epoch;\n+import static tech.pegasys.teku.datastructures.util.ValidatorsUtil.is_slashable_validator;\n+\n+import com.google.common.collect.Sets;\n+import com.google.common.primitives.UnsignedLong;\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.TreeSet;\n+import tech.pegasys.teku.datastructures.operations.AttesterSlashing;\n+import tech.pegasys.teku.datastructures.operations.IndexedAttestation;\n+import tech.pegasys.teku.datastructures.state.BeaconState;\n+\n+public class AttesterSlashingStateTransitionValidator {\n+\n+  private List<UnsignedLong> indicesToSlash;\n+\n+  public Optional<OperationInvalidReason> validateSlashing(\n+      final BeaconState state,\n+      final AttesterSlashing attesterSlashing,\n+      final Optional<Set<UnsignedLong>> intersectingIndices) {\n+    indicesToSlash = new ArrayList<>();\n+    IndexedAttestation attestation_1 = attesterSlashing.getAttestation_1();\n+    IndexedAttestation attestation_2 = attesterSlashing.getAttestation_2();\n+    return firstOf(\n+        () ->\n+            check(\n+                is_slashable_attestation_data(attestation_1.getData(), attestation_2.getData()),\n+                AttesterSlashingInvalidReason.ATTESTATIONS_NOT_SLASHABLE),\n+        () ->\n+            check(\n+                is_valid_indexed_attestation(state, attestation_1).isSuccessful(),\n+                AttesterSlashingInvalidReason.ATTESTATION_1_INVALID),\n+        () ->\n+            check(\n+                is_valid_indexed_attestation(state, attestation_2).isSuccessful(),\n+                AttesterSlashingInvalidReason.ATTESTATION_2_INVALID),\n+        () -> {\n+          boolean slashed_any = false;\n+\n+          Set<UnsignedLong> indices =\n+              intersectingIndices.orElse(\n+                  Sets.intersection(\n+                      new TreeSet<>(\n+                          attestation_1\n+                              .getAttesting_indices()\n+                              .asList()), // TreeSet as must be sorted\n+                      new HashSet<>(attestation_2.getAttesting_indices().asList())));\n+\n+          for (UnsignedLong index : indices) {\n+            if (is_slashable_validator(\n+                state.getValidators().get(toIntExact(index.longValue())),\n+                get_current_epoch(state))) {\n+              indicesToSlash.add(index);", "originalCommit": "e35a21244c2c836abd9bc24075c5b9c045715f04", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTAxNDYwNw==", "url": "https://github.com/ConsenSys/teku/pull/2129#discussion_r439014607", "bodyText": "Currently we use the same utilities for by using OperationInvalidReason in all operations. I agree it's a bit odd, but I don't know a simpler way to return this information from this calculation without breaking compatibility with the utilities we use such as firstOf and check.", "author": "cemozerr", "createdAt": "2020-06-11T19:19:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk5Nzg4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTAyMTAwMg==", "url": "https://github.com/ConsenSys/teku/pull/2129#discussion_r439021002", "bodyText": "What about something like:\npublic SlashingValidationResult validateSlashing(final BeaconState state, final AttesterSlashing slashing) {\n   final List<UnsignedLong> slashedIndices = new ArrayList<>();\n   Optional<OperationInvalidReason> failureReason = runChecks(state, slashing, slashedIndices);\n   return failureReason.map(SlashingValidationResult::failedResult)\n      .orElseGet(() -> SlashingValidationResult.successful(slashedIndices));\n}\n\nprivate Optional<OperationInvalidReason> runChecks(final BeaconState state, final AttesterSlashing attesterSlashing, final List<UnsignedLong> slashedIndices) {\n  firstOf(...);\n}", "author": "mbaxter", "createdAt": "2020-06-11T19:31:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk5Nzg4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTAyNzY5Mw==", "url": "https://github.com/ConsenSys/teku/pull/2129#discussion_r439027693", "bodyText": "I don't want to create a new SlashingValidationResult object because it might make deduplication of these state transition validators in the future harder, but I like the idea of passing in a List reference.", "author": "cemozerr", "createdAt": "2020-06-11T19:44:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk5Nzg4OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk5OTY0Mw==", "url": "https://github.com/ConsenSys/teku/pull/2129#discussion_r438999643", "bodyText": "What if we move the intersecting indices calculation to AttesterSlashing.getSlashedValidatorIndices and keep a cache there?  That way we can centralize the calculation and we don't need the intersectingIndices argument.", "author": "mbaxter", "createdAt": "2020-06-11T18:49:36Z", "path": "ethereum/core/src/main/java/tech/pegasys/teku/core/operationvalidators/AttesterSlashingStateTransitionValidator.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.core.operationvalidators;\n+\n+import static java.lang.Math.toIntExact;\n+import static tech.pegasys.teku.core.operationvalidators.OperationInvalidReason.check;\n+import static tech.pegasys.teku.core.operationvalidators.OperationInvalidReason.firstOf;\n+import static tech.pegasys.teku.datastructures.util.AttestationUtil.is_slashable_attestation_data;\n+import static tech.pegasys.teku.datastructures.util.AttestationUtil.is_valid_indexed_attestation;\n+import static tech.pegasys.teku.datastructures.util.BeaconStateUtil.get_current_epoch;\n+import static tech.pegasys.teku.datastructures.util.ValidatorsUtil.is_slashable_validator;\n+\n+import com.google.common.collect.Sets;\n+import com.google.common.primitives.UnsignedLong;\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.TreeSet;\n+import tech.pegasys.teku.datastructures.operations.AttesterSlashing;\n+import tech.pegasys.teku.datastructures.operations.IndexedAttestation;\n+import tech.pegasys.teku.datastructures.state.BeaconState;\n+\n+public class AttesterSlashingStateTransitionValidator {\n+\n+  private List<UnsignedLong> indicesToSlash;\n+\n+  public Optional<OperationInvalidReason> validateSlashing(\n+      final BeaconState state,\n+      final AttesterSlashing attesterSlashing,\n+      final Optional<Set<UnsignedLong>> intersectingIndices) {\n+    indicesToSlash = new ArrayList<>();\n+    IndexedAttestation attestation_1 = attesterSlashing.getAttestation_1();\n+    IndexedAttestation attestation_2 = attesterSlashing.getAttestation_2();\n+    return firstOf(\n+        () ->\n+            check(\n+                is_slashable_attestation_data(attestation_1.getData(), attestation_2.getData()),\n+                AttesterSlashingInvalidReason.ATTESTATIONS_NOT_SLASHABLE),\n+        () ->\n+            check(\n+                is_valid_indexed_attestation(state, attestation_1).isSuccessful(),\n+                AttesterSlashingInvalidReason.ATTESTATION_1_INVALID),\n+        () ->\n+            check(\n+                is_valid_indexed_attestation(state, attestation_2).isSuccessful(),\n+                AttesterSlashingInvalidReason.ATTESTATION_2_INVALID),\n+        () -> {\n+          boolean slashed_any = false;\n+\n+          Set<UnsignedLong> indices =\n+              intersectingIndices.orElse(\n+                  Sets.intersection(\n+                      new TreeSet<>(\n+                          attestation_1\n+                              .getAttesting_indices()\n+                              .asList()), // TreeSet as must be sorted\n+                      new HashSet<>(attestation_2.getAttesting_indices().asList())));", "originalCommit": "e35a21244c2c836abd9bc24075c5b9c045715f04", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTAxNDg3Mg==", "url": "https://github.com/ConsenSys/teku/pull/2129#discussion_r439014872", "bodyText": "That makes sense. I'll try that.", "author": "cemozerr", "createdAt": "2020-06-11T19:19:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk5OTY0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTAyMDY4OA==", "url": "https://github.com/ConsenSys/teku/pull/2129#discussion_r439020688", "bodyText": "Done.", "author": "cemozerr", "createdAt": "2020-06-11T19:30:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk5OTY0Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTAwMjMyOA==", "url": "https://github.com/ConsenSys/teku/pull/2129#discussion_r439002328", "bodyText": "Do you need these block import calls?", "author": "mbaxter", "createdAt": "2020-06-11T18:54:34Z", "path": "networking/eth2/src/test/java/tech/pegasys/teku/networking/eth2/gossip/topics/validation/AttesterSlashingValidatorTest.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.networking.eth2.gossip.topics.validation;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+import static tech.pegasys.teku.networking.eth2.gossip.topics.validation.InternalValidationResult.ACCEPT;\n+import static tech.pegasys.teku.networking.eth2.gossip.topics.validation.InternalValidationResult.IGNORE;\n+import static tech.pegasys.teku.networking.eth2.gossip.topics.validation.InternalValidationResult.REJECT;\n+\n+import com.google.common.eventbus.EventBus;\n+import java.util.List;\n+import java.util.Optional;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import tech.pegasys.teku.bls.BLSKeyPair;\n+import tech.pegasys.teku.core.operationvalidators.AttesterSlashingStateTransitionValidator;\n+import tech.pegasys.teku.datastructures.operations.AttesterSlashing;\n+import tech.pegasys.teku.datastructures.util.DataStructureUtil;\n+import tech.pegasys.teku.datastructures.util.MockStartValidatorKeyPairFactory;\n+import tech.pegasys.teku.statetransition.BeaconChainUtil;\n+import tech.pegasys.teku.storage.client.MemoryOnlyRecentChainData;\n+import tech.pegasys.teku.storage.client.RecentChainData;\n+\n+public class AttesterSlashingValidatorTest {\n+  private static final List<BLSKeyPair> VALIDATOR_KEYS =\n+      new MockStartValidatorKeyPairFactory().generateKeyPairs(0, 25);\n+  private DataStructureUtil dataStructureUtil = new DataStructureUtil();\n+  private RecentChainData recentChainData;\n+  private BeaconChainUtil beaconChainUtil;\n+  private AttesterSlashingValidator attesterSlashingValidator;\n+  private AttesterSlashingStateTransitionValidator stateTransitionValidator;\n+\n+  @BeforeEach\n+  void beforeEach() {\n+    recentChainData = MemoryOnlyRecentChainData.create(new EventBus());\n+    beaconChainUtil = BeaconChainUtil.create(recentChainData, VALIDATOR_KEYS, true);\n+    stateTransitionValidator = mock(AttesterSlashingStateTransitionValidator.class);\n+    attesterSlashingValidator =\n+        new AttesterSlashingValidator(recentChainData, stateTransitionValidator);\n+  }\n+\n+  @Test\n+  public void shouldAcceptValidAttesterSlashing() throws Exception {\n+    beaconChainUtil.initializeStorage();\n+    beaconChainUtil.createAndImportBlockAtSlot(6);", "originalCommit": "e35a21244c2c836abd9bc24075c5b9c045715f04", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTAyMjg4NA==", "url": "https://github.com/ConsenSys/teku/pull/2129#discussion_r439022884", "bodyText": "Removed.", "author": "cemozerr", "createdAt": "2020-06-11T19:35:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTAwMjMyOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTAwMzA2OA==", "url": "https://github.com/ConsenSys/teku/pull/2129#discussion_r439003068", "bodyText": "(optional) ChainUpdater is a newer utility to use for importing blocks", "author": "mbaxter", "createdAt": "2020-06-11T18:55:57Z", "path": "networking/eth2/src/test/java/tech/pegasys/teku/networking/eth2/gossip/topics/validation/AttesterSlashingValidatorTest.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.networking.eth2.gossip.topics.validation;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+import static tech.pegasys.teku.networking.eth2.gossip.topics.validation.InternalValidationResult.ACCEPT;\n+import static tech.pegasys.teku.networking.eth2.gossip.topics.validation.InternalValidationResult.IGNORE;\n+import static tech.pegasys.teku.networking.eth2.gossip.topics.validation.InternalValidationResult.REJECT;\n+\n+import com.google.common.eventbus.EventBus;\n+import java.util.List;\n+import java.util.Optional;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import tech.pegasys.teku.bls.BLSKeyPair;\n+import tech.pegasys.teku.core.operationvalidators.AttesterSlashingStateTransitionValidator;\n+import tech.pegasys.teku.datastructures.operations.AttesterSlashing;\n+import tech.pegasys.teku.datastructures.util.DataStructureUtil;\n+import tech.pegasys.teku.datastructures.util.MockStartValidatorKeyPairFactory;\n+import tech.pegasys.teku.statetransition.BeaconChainUtil;\n+import tech.pegasys.teku.storage.client.MemoryOnlyRecentChainData;\n+import tech.pegasys.teku.storage.client.RecentChainData;\n+\n+public class AttesterSlashingValidatorTest {\n+  private static final List<BLSKeyPair> VALIDATOR_KEYS =\n+      new MockStartValidatorKeyPairFactory().generateKeyPairs(0, 25);\n+  private DataStructureUtil dataStructureUtil = new DataStructureUtil();\n+  private RecentChainData recentChainData;\n+  private BeaconChainUtil beaconChainUtil;", "originalCommit": "e35a21244c2c836abd9bc24075c5b9c045715f04", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTAwNDEzNg==", "url": "https://github.com/ConsenSys/teku/pull/2129#discussion_r439004136", "bodyText": "Do you need a real RecentChainData instance?  I think you can just mock it to return a best state.", "author": "mbaxter", "createdAt": "2020-06-11T18:58:00Z", "path": "networking/eth2/src/test/java/tech/pegasys/teku/networking/eth2/gossip/topics/validation/AttesterSlashingValidatorTest.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.networking.eth2.gossip.topics.validation;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+import static tech.pegasys.teku.networking.eth2.gossip.topics.validation.InternalValidationResult.ACCEPT;\n+import static tech.pegasys.teku.networking.eth2.gossip.topics.validation.InternalValidationResult.IGNORE;\n+import static tech.pegasys.teku.networking.eth2.gossip.topics.validation.InternalValidationResult.REJECT;\n+\n+import com.google.common.eventbus.EventBus;\n+import java.util.List;\n+import java.util.Optional;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import tech.pegasys.teku.bls.BLSKeyPair;\n+import tech.pegasys.teku.core.operationvalidators.AttesterSlashingStateTransitionValidator;\n+import tech.pegasys.teku.datastructures.operations.AttesterSlashing;\n+import tech.pegasys.teku.datastructures.util.DataStructureUtil;\n+import tech.pegasys.teku.datastructures.util.MockStartValidatorKeyPairFactory;\n+import tech.pegasys.teku.statetransition.BeaconChainUtil;\n+import tech.pegasys.teku.storage.client.MemoryOnlyRecentChainData;\n+import tech.pegasys.teku.storage.client.RecentChainData;\n+\n+public class AttesterSlashingValidatorTest {\n+  private static final List<BLSKeyPair> VALIDATOR_KEYS =\n+      new MockStartValidatorKeyPairFactory().generateKeyPairs(0, 25);\n+  private DataStructureUtil dataStructureUtil = new DataStructureUtil();\n+  private RecentChainData recentChainData;\n+  private BeaconChainUtil beaconChainUtil;\n+  private AttesterSlashingValidator attesterSlashingValidator;\n+  private AttesterSlashingStateTransitionValidator stateTransitionValidator;\n+\n+  @BeforeEach\n+  void beforeEach() {\n+    recentChainData = MemoryOnlyRecentChainData.create(new EventBus());", "originalCommit": "e35a21244c2c836abd9bc24075c5b9c045715f04", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTAyMzk3Ng==", "url": "https://github.com/ConsenSys/teku/pull/2129#discussion_r439023976", "bodyText": "Isn't it preferable to use a real object? I thought we preferred using real objects over mocks.", "author": "cemozerr", "createdAt": "2020-06-11T19:37:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTAwNDEzNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTAyODQxOQ==", "url": "https://github.com/ConsenSys/teku/pull/2129#discussion_r439028419", "bodyText": "Well, I was going to suggest using InMemoryStorageSystem.createEmptyV3StorageSystem which is MORE real :). But then I thought since you only need the one method maybe mocking is simpler.  And everything else is mocked basically.", "author": "mbaxter", "createdAt": "2020-06-11T19:46:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTAwNDEzNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTAzMzEyMg==", "url": "https://github.com/ConsenSys/teku/pull/2129#discussion_r439033122", "bodyText": "Switched to mocking recentChainData.", "author": "cemozerr", "createdAt": "2020-06-11T19:55:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTAwNDEzNg=="}], "type": "inlineReview"}, {"oid": "c27594fc07f08acec34e1b2136a58ee6867a2d41", "url": "https://github.com/ConsenSys/teku/commit/c27594fc07f08acec34e1b2136a58ee6867a2d41", "message": "Use memoization to retrieve the intersecting indices", "committedDate": "2020-06-11T19:31:36Z", "type": "commit"}, {"oid": "6512ed1c33b1f5ec4adec65511cee6af542322c6", "url": "https://github.com/ConsenSys/teku/commit/6512ed1c33b1f5ec4adec65511cee6af542322c6", "message": "Remove unnecessary block imports", "committedDate": "2020-06-11T19:35:30Z", "type": "commit"}, {"oid": "6e5bdd0cdc944cd99e5e5da3a531160c4b61b31c", "url": "https://github.com/ConsenSys/teku/commit/6e5bdd0cdc944cd99e5e5da3a531160c4b61b31c", "message": "Pass slahed indices list as reference, mock best state", "committedDate": "2020-06-11T19:56:28Z", "type": "commit"}, {"oid": "07e2461c5be0d81f2e13e02a0edfa63f311ea5df", "url": "https://github.com/ConsenSys/teku/commit/07e2461c5be0d81f2e13e02a0edfa63f311ea5df", "message": "Remove redundant objects", "committedDate": "2020-06-11T19:57:05Z", "type": "commit"}, {"oid": "589ed3663b1e4195162f9071a6973b16fd71f9b3", "url": "https://github.com/ConsenSys/teku/commit/589ed3663b1e4195162f9071a6973b16fd71f9b3", "message": "Run spotless", "committedDate": "2020-06-11T20:00:48Z", "type": "commit"}, {"oid": "8af187b718e5a6a81a9e286f1d64c73121aeb275", "url": "https://github.com/ConsenSys/teku/commit/8af187b718e5a6a81a9e286f1d64c73121aeb275", "message": "Add sos-ignore label to extra variable", "committedDate": "2020-06-12T14:33:29Z", "type": "commit"}, {"oid": "f6c1d0492c1088ce2fc1d0c13dd27af57b51c84f", "url": "https://github.com/ConsenSys/teku/commit/f6c1d0492c1088ce2fc1d0c13dd27af57b51c84f", "message": "Run spotless", "committedDate": "2020-06-12T14:34:44Z", "type": "commit"}, {"oid": "6148e373d161b6a9d5f0a0238106f5ae1f79cd4b", "url": "https://github.com/ConsenSys/teku/commit/6148e373d161b6a9d5f0a0238106f5ae1f79cd4b", "message": "Merge branch 'master' into attesterSlashingNetworkLayerValidator", "committedDate": "2020-06-12T15:01:22Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTEwMzI4Nw==", "url": "https://github.com/ConsenSys/teku/pull/2129#discussion_r439103287", "bodyText": "Shouldn't we actually construct a valid slashing here?", "author": "mbaxter", "createdAt": "2020-06-11T22:21:40Z", "path": "ethereum/datastructures/src/testFixtures/java/tech/pegasys/teku/datastructures/util/DataStructureUtil.java", "diffHunk": "@@ -213,7 +213,8 @@ public PendingAttestation randomPendingAttestation() {\n   }\n \n   public AttesterSlashing randomAttesterSlashing() {\n-    return new AttesterSlashing(randomIndexedAttestation(), randomIndexedAttestation());\n+    IndexedAttestation attestation = randomIndexedAttestation();\n+    return new AttesterSlashing(attestation, attestation);", "originalCommit": "589ed3663b1e4195162f9071a6973b16fd71f9b3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTUyNzc5Ng==", "url": "https://github.com/ConsenSys/teku/pull/2129#discussion_r439527796", "bodyText": "Fixed.", "author": "cemozerr", "createdAt": "2020-06-12T16:39:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTEwMzI4Nw=="}], "type": "inlineReview"}, {"oid": "d78093e681cf5c4239f19f2ecba3bf6abca7bfd3", "url": "https://github.com/ConsenSys/teku/commit/d78093e681cf5c4239f19f2ecba3bf6abca7bfd3", "message": "Run spotless", "committedDate": "2020-06-12T16:42:11Z", "type": "commit"}]}