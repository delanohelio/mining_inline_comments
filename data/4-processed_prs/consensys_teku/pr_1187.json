{"pr_number": 1187, "pr_title": "#1163 /beacon/finalized_checkpoint added OpenAPI and unit test", "pr_createdAt": "2020-02-18T03:44:26Z", "pr_url": "https://github.com/ConsenSys/teku/pull/1187", "timeline": [{"oid": "aa1f39255adecd003e26a44f9a8b1f8b111f2397", "url": "https://github.com/ConsenSys/teku/commit/aa1f39255adecd003e26a44f9a8b1f8b111f2397", "message": "added OpenAPI and unit test\n\nSigned-off-by: Sally MacFarlane <sally.macfarlane@consensys.net>", "committedDate": "2020-02-18T03:42:39Z", "type": "commit"}, {"oid": "fda5b4cc3a9e1af5f69486485714815af34e90aa", "url": "https://github.com/ConsenSys/teku/commit/fda5b4cc3a9e1af5f69486485714815af34e90aa", "message": "class\n\nSigned-off-by: Sally MacFarlane <sally.macfarlane@consensys.net>", "committedDate": "2020-02-18T03:48:32Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQ1OTk2OA==", "url": "https://github.com/ConsenSys/teku/pull/1187#discussion_r380459968", "bodyText": "I've been asked to kill off @NotNull annotations, so we should do that here too.", "author": "rolfyone", "createdAt": "2020-02-18T05:22:20Z", "path": "data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/FinalizedCheckpointHandler.java", "diffHunk": "@@ -13,36 +13,46 @@\n \n package tech.pegasys.artemis.beaconrestapi.beaconhandlers;\n \n-import java.util.HashMap;\n-import java.util.Map;\n-import tech.pegasys.artemis.beaconrestapi.handlerinterfaces.BeaconRestApiHandler;\n+import static javax.servlet.http.HttpServletResponse.SC_NO_CONTENT;\n+\n+import io.javalin.http.Context;\n+import io.javalin.http.Handler;\n+import io.javalin.plugin.openapi.annotations.HttpMethod;\n+import io.javalin.plugin.openapi.annotations.OpenApi;\n+import io.javalin.plugin.openapi.annotations.OpenApiContent;\n+import io.javalin.plugin.openapi.annotations.OpenApiResponse;\n+import org.jetbrains.annotations.NotNull;\n import tech.pegasys.artemis.datastructures.state.Checkpoint;\n+import tech.pegasys.artemis.provider.JsonProvider;\n import tech.pegasys.artemis.storage.ChainStorageClient;\n import tech.pegasys.artemis.storage.Store;\n \n-public class FinalizedCheckpointHandler implements BeaconRestApiHandler {\n+public class FinalizedCheckpointHandler implements Handler {\n \n   private final ChainStorageClient client;\n \n   public FinalizedCheckpointHandler(ChainStorageClient client) {\n     this.client = client;\n   }\n \n-  @Override\n-  public String getPath() {\n-    return \"/beacon/finalized_checkpoint\";\n-  }\n+  public static final String ROUTE = \"/beacon/finalized_checkpoint\";\n \n+  @OpenApi(\n+      path = ROUTE,\n+      method = HttpMethod.GET,\n+      summary = \"Finalized checkpoint.\",\n+      tags = {\"Node\"},\n+      description = \"Requests that the beacon node give finalized checkpoint info.\",\n+      responses = {\n+        @OpenApiResponse(status = \"200\", content = @OpenApiContent(from = Checkpoint.class)),\n+      })\n   @Override\n-  public Object handleRequest(RequestParams params) {\n+  public void handle(@NotNull Context ctx) throws Exception {", "originalCommit": "fda5b4cc3a9e1af5f69486485714815af34e90aa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQ3MTE4Nw==", "url": "https://github.com/ConsenSys/teku/pull/1187#discussion_r380471187", "bodyText": "done", "author": "macfarla", "createdAt": "2020-02-18T06:14:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQ1OTk2OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQ2MDEzNQ==", "url": "https://github.com/ConsenSys/teku/pull/1187#discussion_r380460135", "bodyText": "@OpenApiResponse(status = \"204\") as a response to satisfy below where we're returning SC_NO_CONTENT.", "author": "rolfyone", "createdAt": "2020-02-18T05:23:12Z", "path": "data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/FinalizedCheckpointHandler.java", "diffHunk": "@@ -13,36 +13,46 @@\n \n package tech.pegasys.artemis.beaconrestapi.beaconhandlers;\n \n-import java.util.HashMap;\n-import java.util.Map;\n-import tech.pegasys.artemis.beaconrestapi.handlerinterfaces.BeaconRestApiHandler;\n+import static javax.servlet.http.HttpServletResponse.SC_NO_CONTENT;\n+\n+import io.javalin.http.Context;\n+import io.javalin.http.Handler;\n+import io.javalin.plugin.openapi.annotations.HttpMethod;\n+import io.javalin.plugin.openapi.annotations.OpenApi;\n+import io.javalin.plugin.openapi.annotations.OpenApiContent;\n+import io.javalin.plugin.openapi.annotations.OpenApiResponse;\n+import org.jetbrains.annotations.NotNull;\n import tech.pegasys.artemis.datastructures.state.Checkpoint;\n+import tech.pegasys.artemis.provider.JsonProvider;\n import tech.pegasys.artemis.storage.ChainStorageClient;\n import tech.pegasys.artemis.storage.Store;\n \n-public class FinalizedCheckpointHandler implements BeaconRestApiHandler {\n+public class FinalizedCheckpointHandler implements Handler {\n \n   private final ChainStorageClient client;\n \n   public FinalizedCheckpointHandler(ChainStorageClient client) {\n     this.client = client;\n   }\n \n-  @Override\n-  public String getPath() {\n-    return \"/beacon/finalized_checkpoint\";\n-  }\n+  public static final String ROUTE = \"/beacon/finalized_checkpoint\";\n \n+  @OpenApi(\n+      path = ROUTE,\n+      method = HttpMethod.GET,\n+      summary = \"Finalized checkpoint.\",\n+      tags = {\"Node\"},\n+      description = \"Requests that the beacon node give finalized checkpoint info.\",\n+      responses = {\n+        @OpenApiResponse(status = \"200\", content = @OpenApiContent(from = Checkpoint.class)),", "originalCommit": "fda5b4cc3a9e1af5f69486485714815af34e90aa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQ3MTQ4NA==", "url": "https://github.com/ConsenSys/teku/pull/1187#discussion_r380471484", "bodyText": "done", "author": "macfarla", "createdAt": "2020-02-18T06:16:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQ2MDEzNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQ2MDQ2Nw==", "url": "https://github.com/ConsenSys/teku/pull/1187#discussion_r380460467", "bodyText": "we should have a test that shows the 'no content' response.", "author": "rolfyone", "createdAt": "2020-02-18T05:24:54Z", "path": "data/beaconrestapi/src/test/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/FinalizedCheckpointHandlerTest.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.beaconrestapi.beaconhandlers;\n+\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import io.javalin.http.Context;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Mockito;\n+import tech.pegasys.artemis.datastructures.state.Checkpoint;\n+import tech.pegasys.artemis.datastructures.util.DataStructureUtil;\n+import tech.pegasys.artemis.provider.JsonProvider;\n+import tech.pegasys.artemis.storage.ChainStorageClient;\n+import tech.pegasys.artemis.storage.Store;\n+\n+public class FinalizedCheckpointHandlerTest {\n+  private Context mockContext = Mockito.mock(Context.class);\n+  private ChainStorageClient mockClient = Mockito.mock(ChainStorageClient.class);\n+  private Store mockStore = Mockito.mock(Store.class);\n+\n+  private final Checkpoint checkpoint = DataStructureUtil.randomCheckpoint(99);\n+\n+  @Test\n+  public void shouldReturnCheckpoint() throws Exception {\n+    when(mockClient.getStore()).thenReturn(mockStore);\n+    when(mockStore.getFinalizedCheckpoint()).thenReturn(checkpoint);\n+\n+    FinalizedCheckpointHandler handler = new FinalizedCheckpointHandler(mockClient);\n+    handler.handle(mockContext);\n+\n+    verify(mockContext).result(JsonProvider.objectToJSON(checkpoint));\n+  }", "originalCommit": "fda5b4cc3a9e1af5f69486485714815af34e90aa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQ3MjkxMQ==", "url": "https://github.com/ConsenSys/teku/pull/1187#discussion_r380472911", "bodyText": "done", "author": "macfarla", "createdAt": "2020-02-18T06:21:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQ2MDQ2Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQ2ODgyMg==", "url": "https://github.com/ConsenSys/teku/pull/1187#discussion_r380468822", "bodyText": "adrian commented elsewhere to avoid using the 'mock' prefix on mock objects, because apparently its not named in that format elsewhere in Teku. I hate it, but passing on the message.", "author": "rolfyone", "createdAt": "2020-02-18T06:04:53Z", "path": "data/beaconrestapi/src/test/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/FinalizedCheckpointHandlerTest.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.beaconrestapi.beaconhandlers;\n+\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import io.javalin.http.Context;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Mockito;\n+import tech.pegasys.artemis.datastructures.state.Checkpoint;\n+import tech.pegasys.artemis.datastructures.util.DataStructureUtil;\n+import tech.pegasys.artemis.provider.JsonProvider;\n+import tech.pegasys.artemis.storage.ChainStorageClient;\n+import tech.pegasys.artemis.storage.Store;\n+\n+public class FinalizedCheckpointHandlerTest {\n+  private Context mockContext = Mockito.mock(Context.class);\n+  private ChainStorageClient mockClient = Mockito.mock(ChainStorageClient.class);\n+  private Store mockStore = Mockito.mock(Store.class);", "originalCommit": "fda5b4cc3a9e1af5f69486485714815af34e90aa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQ3Mjg3Ng==", "url": "https://github.com/ConsenSys/teku/pull/1187#discussion_r380472876", "bodyText": "gone", "author": "macfarla", "createdAt": "2020-02-18T06:21:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQ2ODgyMg=="}], "type": "inlineReview"}, {"oid": "b5fd8551eb5b551d905cf66c3a9510a9ea312ab6", "url": "https://github.com/ConsenSys/teku/commit/b5fd8551eb5b551d905cf66c3a9510a9ea312ab6", "message": "PR review\n\nSigned-off-by: Sally MacFarlane <sally.macfarlane@consensys.net>", "committedDate": "2020-02-18T06:24:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQ3NDIyNg==", "url": "https://github.com/ConsenSys/teku/pull/1187#discussion_r380474226", "bodyText": "So, yes, but check FinalizedCheckpointHandler, not GenesisTimeHandler :)", "author": "rolfyone", "createdAt": "2020-02-18T06:27:42Z", "path": "data/beaconrestapi/src/test/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/FinalizedCheckpointHandlerTest.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.beaconrestapi.beaconhandlers;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_NO_CONTENT;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import io.javalin.http.Context;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Mockito;\n+import tech.pegasys.artemis.datastructures.state.Checkpoint;\n+import tech.pegasys.artemis.datastructures.util.DataStructureUtil;\n+import tech.pegasys.artemis.provider.JsonProvider;\n+import tech.pegasys.artemis.storage.ChainStorageClient;\n+import tech.pegasys.artemis.storage.Store;\n+\n+public class FinalizedCheckpointHandlerTest {\n+  private Context context = Mockito.mock(Context.class);\n+  private ChainStorageClient client = Mockito.mock(ChainStorageClient.class);\n+  private Store store = Mockito.mock(Store.class);\n+\n+  private final Checkpoint checkpoint = DataStructureUtil.randomCheckpoint(99);\n+\n+  @Test\n+  public void shouldReturnCheckpoint() throws Exception {\n+    when(client.getStore()).thenReturn(store);\n+    when(store.getFinalizedCheckpoint()).thenReturn(checkpoint);\n+\n+    FinalizedCheckpointHandler handler = new FinalizedCheckpointHandler(client);\n+    handler.handle(context);\n+\n+    verify(context).result(JsonProvider.objectToJSON(checkpoint));\n+  }\n+\n+  @Test\n+  public void shouldReturnNoContentWhenStoreIsNull() throws Exception {\n+    GenesisTimeHandler handler = new GenesisTimeHandler(null);", "originalCommit": "b5fd8551eb5b551d905cf66c3a9510a9ea312ab6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQ3NDk3Mg==", "url": "https://github.com/ConsenSys/teku/pull/1187#discussion_r380474972", "bodyText": "You'll always have a ChainStoreClient.  Pre-genesis that client will have a null Store so I'm not sure this test makes sense.", "author": "ajsutton", "createdAt": "2020-02-18T06:30:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQ3NDIyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQ3NjIxMw==", "url": "https://github.com/ConsenSys/teku/pull/1187#discussion_r380476213", "bodyText": "oops. fixed.", "author": "macfarla", "createdAt": "2020-02-18T06:32:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQ3NDIyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQ4NzE2OQ==", "url": "https://github.com/ConsenSys/teku/pull/1187#discussion_r380487169", "bodyText": "its the window of time when we can get a 'no_content' result, so i think it's a fair test case now that we're testing against the FinalizedCheckpointHandler.", "author": "rolfyone", "createdAt": "2020-02-18T06:55:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQ3NDIyNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQ3NTk0Ng==", "url": "https://github.com/ConsenSys/teku/pull/1187#discussion_r380475946", "bodyText": "This needs a return or you'll carry on and throw a NullPointerException on line 55.", "author": "ajsutton", "createdAt": "2020-02-18T06:32:08Z", "path": "data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/FinalizedCheckpointHandler.java", "diffHunk": "@@ -13,36 +13,46 @@\n \n package tech.pegasys.artemis.beaconrestapi.beaconhandlers;\n \n-import java.util.HashMap;\n-import java.util.Map;\n-import tech.pegasys.artemis.beaconrestapi.handlerinterfaces.BeaconRestApiHandler;\n+import static javax.servlet.http.HttpServletResponse.SC_NO_CONTENT;\n+\n+import io.javalin.http.Context;\n+import io.javalin.http.Handler;\n+import io.javalin.plugin.openapi.annotations.HttpMethod;\n+import io.javalin.plugin.openapi.annotations.OpenApi;\n+import io.javalin.plugin.openapi.annotations.OpenApiContent;\n+import io.javalin.plugin.openapi.annotations.OpenApiResponse;\n import tech.pegasys.artemis.datastructures.state.Checkpoint;\n+import tech.pegasys.artemis.provider.JsonProvider;\n import tech.pegasys.artemis.storage.ChainStorageClient;\n import tech.pegasys.artemis.storage.Store;\n \n-public class FinalizedCheckpointHandler implements BeaconRestApiHandler {\n+public class FinalizedCheckpointHandler implements Handler {\n \n   private final ChainStorageClient client;\n \n   public FinalizedCheckpointHandler(ChainStorageClient client) {\n     this.client = client;\n   }\n \n-  @Override\n-  public String getPath() {\n-    return \"/beacon/finalized_checkpoint\";\n-  }\n+  public static final String ROUTE = \"/beacon/finalized_checkpoint\";\n \n+  @OpenApi(\n+      path = ROUTE,\n+      method = HttpMethod.GET,\n+      summary = \"Finalized checkpoint.\",\n+      tags = {\"Node\"},\n+      description = \"Requests that the beacon node give finalized checkpoint info.\",\n+      responses = {\n+        @OpenApiResponse(status = \"200\", content = @OpenApiContent(from = Checkpoint.class)),\n+        @OpenApiResponse(status = \"204\")\n+      })\n   @Override\n-  public Object handleRequest(RequestParams params) {\n+  public void handle(Context ctx) throws Exception {\n     Store store = client.getStore();\n     if (store == null) {\n-      return null;\n+      ctx.status(SC_NO_CONTENT);", "originalCommit": "b5fd8551eb5b551d905cf66c3a9510a9ea312ab6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQ3NzUwOQ==", "url": "https://github.com/ConsenSys/teku/pull/1187#discussion_r380477509", "bodyText": "true. fixed", "author": "macfarla", "createdAt": "2020-02-18T06:35:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQ3NTk0Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQ4NzU0Nw==", "url": "https://github.com/ConsenSys/teku/pull/1187#discussion_r380487547", "bodyText": "interesting, i'd have expected the no_content test to fail until that return was there...", "author": "rolfyone", "createdAt": "2020-02-18T06:57:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQ3NTk0Ng=="}], "type": "inlineReview"}, {"oid": "83c8d50e780ab8eda53553b524599f06d941ab43", "url": "https://github.com/ConsenSys/teku/commit/83c8d50e780ab8eda53553b524599f06d941ab43", "message": "fixed type\n\nSigned-off-by: Sally MacFarlane <sally.macfarlane@consensys.net>", "committedDate": "2020-02-18T06:32:26Z", "type": "commit"}, {"oid": "bd513474c7670cdde285463566f72ca671c79f02", "url": "https://github.com/ConsenSys/teku/commit/bd513474c7670cdde285463566f72ca671c79f02", "message": "return\n\nSigned-off-by: Sally MacFarlane <sally.macfarlane@consensys.net>", "committedDate": "2020-02-18T06:33:41Z", "type": "commit"}, {"oid": "8d8fa5060e316fa47373c42e153e03110c776d43", "url": "https://github.com/ConsenSys/teku/commit/8d8fa5060e316fa47373c42e153e03110c776d43", "message": "fixed test\n\nSigned-off-by: Sally MacFarlane <sally.macfarlane@consensys.net>", "committedDate": "2020-02-18T06:36:06Z", "type": "commit"}]}