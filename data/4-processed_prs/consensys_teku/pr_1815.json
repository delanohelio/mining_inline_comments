{"pr_number": 1815, "pr_title": "Add CI job for api doc generation on master", "pr_createdAt": "2020-05-19T19:57:53Z", "pr_url": "https://github.com/ConsenSys/teku/pull/1815", "timeline": [{"oid": "69c6b45d718be5c9a296111e048f9debdb0d8b2d", "url": "https://github.com/ConsenSys/teku/commit/69c6b45d718be5c9a296111e048f9debdb0d8b2d", "message": "update CI with new api doc jobs", "committedDate": "2020-05-19T14:29:18Z", "type": "commit"}, {"oid": "cdc442c84202384a7bfbd732c053b101e30d4cd5", "url": "https://github.com/ConsenSys/teku/commit/cdc442c84202384a7bfbd732c053b101e30d4cd5", "message": "fix comment increment issue", "committedDate": "2020-05-19T14:31:52Z", "type": "commit"}, {"oid": "43362c678c3cae480548401034d6ed3117fc2193", "url": "https://github.com/ConsenSys/teku/commit/43362c678c3cae480548401034d6ed3117fc2193", "message": "fix comment increment issue", "committedDate": "2020-05-19T14:33:37Z", "type": "commit"}, {"oid": "c4f911470b1fee20e44e82fcf05b977a7b697d8b", "url": "https://github.com/ConsenSys/teku/commit/c4f911470b1fee20e44e82fcf05b977a7b697d8b", "message": "fix comment increment issue\n\nand add executor", "committedDate": "2020-05-19T14:44:30Z", "type": "commit"}, {"oid": "22c8992588220cf3c604014bfde9d6e0007ab00b", "url": "https://github.com/ConsenSys/teku/commit/22c8992588220cf3c604014bfde9d6e0007ab00b", "message": "comment requirement to be able to test job", "committedDate": "2020-05-19T14:47:14Z", "type": "commit"}, {"oid": "56a962605bd37a4d58973c8bc88e0bedf62bc485", "url": "https://github.com/ConsenSys/teku/commit/56a962605bd37a4d58973c8bc88e0bedf62bc485", "message": "test with require assemble", "committedDate": "2020-05-19T14:49:19Z", "type": "commit"}, {"oid": "f3b988b3af4de404e86363d87a0d59565d942f92", "url": "https://github.com/ConsenSys/teku/commit/f3b988b3af4de404e86363d87a0d59565d942f92", "message": "use mocked teku to get the spec", "committedDate": "2020-05-19T18:22:08Z", "type": "commit"}, {"oid": "94e5ea611a7991178d2ce545df8d792ecf62c9f2", "url": "https://github.com/ConsenSys/teku/commit/94e5ea611a7991178d2ce545df8d792ecf62c9f2", "message": "fix git add and add artifact so we have json on every build to check", "committedDate": "2020-05-19T19:46:42Z", "type": "commit"}, {"oid": "278aff27fe4982f00167210107217371259cc1b7", "url": "https://github.com/ConsenSys/teku/commit/278aff27fe4982f00167210107217371259cc1b7", "message": "Automated update of JSON specs and version files\n\n[skip ci] Circle CI build 24199, see https://circleci.com/gh/PegaSysEng/teku/24199\n\nBranch: 1507_add_ci_for_api_doc, commit: 94e5ea611a7991178d2ce545df8d792ecf62c9f2, tag:none", "committedDate": "2020-05-19T19:52:08Z", "type": "commit"}, {"oid": "b83a50f08322bd19008b0cc66ecc9259211f374b", "url": "https://github.com/ConsenSys/teku/commit/b83a50f08322bd19008b0cc66ecc9259211f374b", "message": "Merge branch 'master' into 1507_add_ci_for_api_doc", "committedDate": "2020-05-19T19:58:30Z", "type": "commit"}, {"oid": "e531a83e9be98a0a07e9fe2f982f337503894bc6", "url": "https://github.com/ConsenSys/teku/commit/e531a83e9be98a0a07e9fe2f982f337503894bc6", "message": "Automated update of JSON specs and version files\n\n[skip ci] Circle CI build 24210, see https://circleci.com/gh/PegaSysEng/teku/24210\n\nBranch: 1507_add_ci_for_api_doc, commit: b83a50f08322bd19008b0cc66ecc9259211f374b, tag:none", "committedDate": "2020-05-19T20:04:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzYzOTA1Mg==", "url": "https://github.com/ConsenSys/teku/pull/1815#discussion_r427639052", "bodyText": "it might be worth redirecting the output of this command to a file and including that file in the build artifacts. This will make it so that you can inspect them if Teku falls over during the build.\nSomething like build/install/teku/bin/teku --network=mainnet --Xinterop-enabled=true --rest-api-docs-enabled=true 2>&1 > teku_output.log &\nand then add teku_output.log to your store_artifacts list.", "author": "benjamincburns", "createdAt": "2020-05-19T22:35:36Z", "path": ".circleci/config.yml", "diffHunk": "@@ -272,6 +276,71 @@ jobs:\n             docker login --username \"${DOCKER_USER}\" --password \"${DOCKER_PASSWORD}\"\n             ./gradlew --no-daemon --parallel \"-Pbranch=${CIRCLE_BRANCH}\" dockerUpload\n \n+  extractAPISpec:\n+    executor: medium_executor\n+    steps:\n+      - prepare\n+      - attach_workspace:\n+          at: ~/project\n+      - run:\n+          name: Build runnable Teku binaries\n+          command: |\n+            ./gradlew --no-daemon --parallel installDist\n+      - run:\n+          name: Extract OpenAPI JSON\n+          command: |\n+            build/install/teku/bin/teku --network=mainnet --Xinterop-enabled=true --rest-api-docs-enabled=true &", "originalCommit": "e531a83e9be98a0a07e9fe2f982f337503894bc6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzY0MDIxMw==", "url": "https://github.com/ConsenSys/teku/pull/1815#discussion_r427640213", "bodyText": "Also, it might be worth looking into a gradle plugin that can do this at compile time rather than having to actually start a full instance of teku and grab it via the HTTP interface. I think this plugin might do that for you: https://plugins.gradle.org/plugin/org.openapi.generator", "author": "benjamincburns", "createdAt": "2020-05-19T22:39:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzYzOTA1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzgxMTgyMQ==", "url": "https://github.com/ConsenSys/teku/pull/1815#discussion_r427811821", "bodyText": "I already searched for this kind of plugin, but I did not find any that could fit our architecture (gradle + javalin annotations). The openapi generator one is not doing that, it's generating code and doc from spec, but it doesn't generate spec. The closest one would be https://github.com/openapi-tools/swagger-maven-plugin but it's not matching our tools for what I read.", "author": "NicolasMassart", "createdAt": "2020-05-20T07:56:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzYzOTA1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzgyNjMwNg==", "url": "https://github.com/ConsenSys/teku/pull/1815#discussion_r427826306", "bodyText": "made the change on logging output", "author": "NicolasMassart", "createdAt": "2020-05-20T08:20:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzYzOTA1Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzY0NDcyOQ==", "url": "https://github.com/ConsenSys/teku/pull/1815#discussion_r427644729", "bodyText": "If wget fails because of a response error (404, 500, etc), this will still write openapi.json, but it won't contain what you want (it'll be empty, or it will contain the body of the error response). Also be aware that store_artifacts always runs, regardless if previous steps were successful. We likely want to do something like the following instead of the single wget line that's here now:\nEXIT_CODE=0\nwget -O openapi.json http://localhost:5051/swagger-docs\nif [ $? != 0 ]; then\n  rm openapi.json\n  EXIT_CODE=1\nfi\n\nkill $TEKU_PID\nexit $EXIT_CODE\nThis will cause the build to fail if the output isn't what we're expecting. There are probably more idiomatic ways to write this, however.", "author": "benjamincburns", "createdAt": "2020-05-19T22:52:26Z", "path": ".circleci/config.yml", "diffHunk": "@@ -272,6 +276,71 @@ jobs:\n             docker login --username \"${DOCKER_USER}\" --password \"${DOCKER_PASSWORD}\"\n             ./gradlew --no-daemon --parallel \"-Pbranch=${CIRCLE_BRANCH}\" dockerUpload\n \n+  extractAPISpec:\n+    executor: medium_executor\n+    steps:\n+      - prepare\n+      - attach_workspace:\n+          at: ~/project\n+      - run:\n+          name: Build runnable Teku binaries\n+          command: |\n+            ./gradlew --no-daemon --parallel installDist\n+      - run:\n+          name: Extract OpenAPI JSON\n+          command: |\n+            build/install/teku/bin/teku --network=mainnet --Xinterop-enabled=true --rest-api-docs-enabled=true &\n+            TEKU_PID=$!\n+            wget -O openapi.json http://localhost:5051/swagger-docs", "originalCommit": "e531a83e9be98a0a07e9fe2f982f337503894bc6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzgyNzkxMA==", "url": "https://github.com/ConsenSys/teku/pull/1815#discussion_r427827910", "bodyText": "added this and also added --timeout=30 and  --retry-connrefused options to make sure it tries until service started (otherwise the command exits on connection refused directly) and to be sure of the timeout length (I did not see doc about the default value, so setting it at least indicates that we know there's a retry and timeout here and it's done on purpose)", "author": "NicolasMassart", "createdAt": "2020-05-20T08:23:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzY0NDcyOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzY0NTYwMA==", "url": "https://github.com/ConsenSys/teku/pull/1815#discussion_r427645600", "bodyText": "I didn't know that the -m flag works this way. Cool!", "author": "benjamincburns", "createdAt": "2020-05-19T22:55:03Z", "path": ".circleci/config.yml", "diffHunk": "@@ -272,6 +276,71 @@ jobs:\n             docker login --username \"${DOCKER_USER}\" --password \"${DOCKER_PASSWORD}\"\n             ./gradlew --no-daemon --parallel \"-Pbranch=${CIRCLE_BRANCH}\" dockerUpload\n \n+  extractAPISpec:\n+    executor: medium_executor\n+    steps:\n+      - prepare\n+      - attach_workspace:\n+          at: ~/project\n+      - run:\n+          name: Build runnable Teku binaries\n+          command: |\n+            ./gradlew --no-daemon --parallel installDist\n+      - run:\n+          name: Extract OpenAPI JSON\n+          command: |\n+            build/install/teku/bin/teku --network=mainnet --Xinterop-enabled=true --rest-api-docs-enabled=true &\n+            TEKU_PID=$!\n+            wget -O openapi.json http://localhost:5051/swagger-docs\n+            kill $TEKU_PID\n+      - store_artifacts:\n+          path: openapi.json\n+      - persist_to_workspace:\n+          root: ~/project\n+          paths:\n+            - ./\n+\n+  publishAPIDoc:\n+    executor: node_executor\n+    steps:\n+      - checkout\n+      - attach_workspace:\n+          at: ~/project\n+      - add_ssh_keys:\n+          fingerprints:\n+            - '45:36:58:67:43:15:c6:5f:2c:58:ec:7f:71:e2:e6:ef'\n+      - run:\n+          name: Set Git user params\n+          command: |\n+            git config --global user.name $CIRCLE_USERNAME\n+            git config --global user.email \"${CIRCLE_USERNAME}@users.noreply.github.com\"\n+      - restore_cache:\n+          keys:\n+            - deps-{{ checksum \"./docs/package.json\" }}\n+      - run:\n+          name: Install dependencies\n+          working_directory: ./docs\n+          command: |\n+            npm install\n+      - save_cache:\n+          paths:\n+            - ./docs/node_modules\n+          key: deps-{{ checksum \"./docs/package.json\" }}\n+      - run:\n+          name: Generate API doc site files\n+          working_directory: ./docs\n+          command: |\n+            npm run generate-versions -- --spec=../openapi.json --tag=${CIRCLE_TAG}\n+      - deploy:\n+          name: Commit and push doc changes\n+          command: |\n+            git add docs\n+            git commit -m \"Automated update of JSON specs and version files\" \\", "originalCommit": "e531a83e9be98a0a07e9fe2f982f337503894bc6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzY0NjI4Mg==", "url": "https://github.com/ConsenSys/teku/pull/1815#discussion_r427646282", "bodyText": "I'm not familiar with this syntax - does ${CIRCLE_TAG-none} mean \"use the contents of CIRCLE_TAG, or if it's empty, use none? If so, cool. If not, you'll likely want to create a new env var for this above like so\n[ -n \"$CIRCLE_TAG\" ] && TAG_NAME=\"$CIRCLE_TAG\" || TAG_NAME=\"none\"\nthough this is probably better expressed as an if/else rather than a one-liner - it's more readable that way.", "author": "benjamincburns", "createdAt": "2020-05-19T22:56:59Z", "path": ".circleci/config.yml", "diffHunk": "@@ -272,6 +276,71 @@ jobs:\n             docker login --username \"${DOCKER_USER}\" --password \"${DOCKER_PASSWORD}\"\n             ./gradlew --no-daemon --parallel \"-Pbranch=${CIRCLE_BRANCH}\" dockerUpload\n \n+  extractAPISpec:\n+    executor: medium_executor\n+    steps:\n+      - prepare\n+      - attach_workspace:\n+          at: ~/project\n+      - run:\n+          name: Build runnable Teku binaries\n+          command: |\n+            ./gradlew --no-daemon --parallel installDist\n+      - run:\n+          name: Extract OpenAPI JSON\n+          command: |\n+            build/install/teku/bin/teku --network=mainnet --Xinterop-enabled=true --rest-api-docs-enabled=true &\n+            TEKU_PID=$!\n+            wget -O openapi.json http://localhost:5051/swagger-docs\n+            kill $TEKU_PID\n+      - store_artifacts:\n+          path: openapi.json\n+      - persist_to_workspace:\n+          root: ~/project\n+          paths:\n+            - ./\n+\n+  publishAPIDoc:\n+    executor: node_executor\n+    steps:\n+      - checkout\n+      - attach_workspace:\n+          at: ~/project\n+      - add_ssh_keys:\n+          fingerprints:\n+            - '45:36:58:67:43:15:c6:5f:2c:58:ec:7f:71:e2:e6:ef'\n+      - run:\n+          name: Set Git user params\n+          command: |\n+            git config --global user.name $CIRCLE_USERNAME\n+            git config --global user.email \"${CIRCLE_USERNAME}@users.noreply.github.com\"\n+      - restore_cache:\n+          keys:\n+            - deps-{{ checksum \"./docs/package.json\" }}\n+      - run:\n+          name: Install dependencies\n+          working_directory: ./docs\n+          command: |\n+            npm install\n+      - save_cache:\n+          paths:\n+            - ./docs/node_modules\n+          key: deps-{{ checksum \"./docs/package.json\" }}\n+      - run:\n+          name: Generate API doc site files\n+          working_directory: ./docs\n+          command: |\n+            npm run generate-versions -- --spec=../openapi.json --tag=${CIRCLE_TAG}\n+      - deploy:\n+          name: Commit and push doc changes\n+          command: |\n+            git add docs\n+            git commit -m \"Automated update of JSON specs and version files\" \\\n+                       -m \"[skip ci] Circle CI build ${CIRCLE_BUILD_NUM}, see ${CIRCLE_BUILD_URL}\" \\\n+                       -m \"Branch: ${CIRCLE_BRANCH}, commit: ${CIRCLE_SHA1}, tag:${CIRCLE_TAG-none}\"", "originalCommit": "e531a83e9be98a0a07e9fe2f982f337503894bc6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzcxMzIzOQ==", "url": "https://github.com/ConsenSys/teku/pull/1815#discussion_r427713239", "bodyText": "I've always used ${CIRCLE_TAG:-none} to mean use none unless CIRCLE_TAG is set.  Seems to work without the : too though.", "author": "ajsutton", "createdAt": "2020-05-20T02:54:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzY0NjI4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzgyNDQ3Nw==", "url": "https://github.com/ConsenSys/teku/pull/1815#discussion_r427824477", "bodyText": "${parameter-default}\u00a0and\u00a0${parameter:-default}\u00a0are almost equivalent. The extra\u00a0:\u00a0makes a difference only when\u00a0parameter\u00a0has been declared, but is null.\n\nhttps://www.tldp.org/LDP/abs/html/parameter-substitution.html", "author": "NicolasMassart", "createdAt": "2020-05-20T08:17:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzY0NjI4Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzY0NjczNQ==", "url": "https://github.com/ConsenSys/teku/pull/1815#discussion_r427646735", "bodyText": "If this file is generated, I don't think it should be committed. Instead, add the necessary steps to generate this file and include those as an earlier job in the build, similar to how you're generating the openapi.json file and persisting it via workspaces.", "author": "benjamincburns", "createdAt": "2020-05-19T22:58:20Z", "path": "docs/latest.json", "diffHunk": "@@ -1 +1 @@\n-{\"openapi\":\"3.0.1\",\"info\":{\"title\":\"Teku\",\"description\":\"A minimal API specification for the beacon node, which enables a validator to connect and perform its obligations on the Ethereum 2.0 phase 0 beacon chain.\",\"license\":{\"name\":\"Apache 2.0\",\"url\":\"https://www.apache.org/licenses/LICENSE-2.0.html\"},\"version\":\"v0.11.0-dev-6c22d2ea\"},\"paths\":{\"/admin/log_level\":{\"put\":{\"tags\":[\"Admin\"],\"summary\":\"Changes the log level without restarting.\",\"description\":\"Changes the log level without restarting. You can change the log level for all logs, or the log level for specific packages or classes.\",\"operationId\":\"putAdminLog_level\",\"requestBody\":{\"description\":\"```\\n{\\n  \\\"level\\\": (String; acceptable values: ALL, TRACE, DEBUG, INFO, ERROR, FATAL, OFF ),\\n  \\\"log_filter\\\": [(String; Optional)]\\n}\\n```\",\"content\":{\"application/json\":{\"schema\":{\"$ref\":\"#/components/schemas/LogLevel\"}}}},\"responses\":{\"204\":{\"description\":\"The LogLevel was accepted and applied\"},\"400\":{\"description\":\"Invalid body supplied.\"},\"500\":{\"description\":\"Server Error\"}}}},\"/beacon/block\":{\"get\":{\"tags\":[\"Beacon\"],\"summary\":\"Get the beacon chain block matching the criteria.\",\"description\":\"Returns the beacon chain block that matches the specified epoch, slot, or block root.\",\"operationId\":\"getBeaconBlock\",\"parameters\":[{\"name\":\"epoch\",\"in\":\"query\",\"description\":\"`UnsignedLong` Epoch number to query.\",\"schema\":{\"type\":\"string\"}},{\"name\":\"slot\",\"in\":\"query\",\"description\":\"`UnsignedLong` Slot to query in the canonical chain.\",\"schema\":{\"type\":\"string\"}},{\"name\":\"root\",\"in\":\"query\",\"description\":\"`Bytes32 Hex` Block root to query.\",\"schema\":{\"type\":\"string\"}}],\"responses\":{\"200\":{\"description\":\"OK\",\"content\":{\"application/json\":{\"schema\":{\"$ref\":\"#/components/schemas/SignedBeaconBlock\"}}}},\"400\":{\"description\":\"Invalid parameter supplied\"},\"404\":{\"description\":\"Specified block not found\"}}}},\"/beacon/chainhead\":{\"get\":{\"tags\":[\"Beacon\"],\"summary\":\"Get information about the chain head.\",\"description\":\"Returns information about the head of the beacon chain including the finalized and justified information.\",\"operationId\":\"getBeaconChainhead\",\"responses\":{\"200\":{\"description\":\"OK\",\"content\":{\"application/json\":{\"schema\":{\"$ref\":\"#/components/schemas/BeaconChainHead\"}}}},\"204\":{\"description\":\"No content may be returned if the genesis block has not been set, meaning that there is no head to query.\"},\"500\":{\"description\":\"Server Error\"}}}},\"/beacon/head\":{\"get\":{\"tags\":[\"Beacon\"],\"summary\":\"Get information about the chain head.\",\"description\":\"Returns information about the head of the beacon chain from the node\u2019s perspective.\\n\\nTo retrieve finalized and justified information, use /beacon/chainhead instead.\",\"operationId\":\"getBeaconHead\",\"responses\":{\"200\":{\"description\":\"OK\",\"content\":{\"application/json\":{\"schema\":{\"$ref\":\"#/components/schemas/BeaconHead\"}}}},\"204\":{\"description\":\"No content may be returned if the genesis block has not been set, meaning that there is no head to query.\"},\"500\":{\"description\":\"Server Error\"}}}},\"/beacon/committees\":{\"get\":{\"tags\":[\"Beacon\"],\"summary\":\"Get the committee assignments for an epoch.\",\"description\":\"Returns committee assignments for each slot in a specified epoch.\",\"operationId\":\"getBeaconCommittees\",\"parameters\":[{\"name\":\"epoch\",\"in\":\"query\",\"description\":\"`UnsignedLong` Epoch number to query.\",\"required\":true,\"schema\":{\"type\":\"string\"}}],\"responses\":{\"200\":{\"description\":\"OK\",\"content\":{\"application/json\":{\"schema\":{\"$ref\":\"#/components/schemas/Committee\"}}}},\"400\":{\"description\":\"Missing a query parameter\"},\"204\":{\"description\":\"No content may be returned if the genesis block has not been set, meaning that there is no head to query.\"},\"500\":{\"description\":\"Server Error\"}}}},\"/beacon/state\":{\"get\":{\"tags\":[\"Beacon\"],\"summary\":\"Get the beacon chain state matching the criteria.\",\"description\":\"Returns the beacon chain state that matches the specified slot or block root.\",\"operationId\":\"getBeaconState\",\"parameters\":[{\"name\":\"root\",\"in\":\"query\",\"description\":\"`Bytes32 Hex` Block root to query.\",\"schema\":{\"type\":\"string\"}},{\"name\":\"slot\",\"in\":\"query\",\"description\":\"`UnsignedLong` Slot to query in the canonical chain.\",\"schema\":{\"type\":\"string\"}}],\"responses\":{\"200\":{\"description\":\"OK\",\"content\":{\"application/json\":{\"schema\":{\"$ref\":\"#/components/schemas/BeaconState\"}}}},\"404\":{\"description\":\"The beacon state matching the supplied query parameter was not found.\"},\"400\":{\"description\":\"Missing a query parameter\"},\"204\":{\"description\":\"No content may be returned if the genesis block has not been set, meaning that there is no head to query.\"},\"500\":{\"description\":\"Server Error\"}}}},\"/beacon/state_root\":{\"get\":{\"tags\":[\"Beacon\"],\"summary\":\"Get the beacon chain state root for the specified slot.\",\"description\":\"Returns the beacon chain state root for the specified slot.\",\"operationId\":\"getBeaconState_root\",\"parameters\":[{\"name\":\"slot\",\"in\":\"query\",\"description\":\"`UnsignedLong` Slot to query in the canonical chain.\",\"schema\":{\"type\":\"string\"}}],\"responses\":{\"200\":{\"description\":\"The beacon chain `state_root`(`Bytes32`) for the specified slot.\",\"content\":{\"application/json\":{\"schema\":{\"$ref\":\"#/components/schemas/Bytes32\"}}}},\"404\":{\"description\":\"The beacon state root matching the supplied parameter was not found.\"},\"400\":{\"description\":\"Missing a query parameter.\"},\"204\":{\"description\":\"No content may be returned if the genesis block has not been set, meaning that there is no head to query.\"},\"500\":{\"description\":\"Server Error\"}}}},\"/beacon/validators\":{\"get\":{\"tags\":[\"Beacon\"],\"summary\":\"Get validators matching the specified query.\",\"description\":\"Returns validator information.\\n\\nReturns the first page of validators in the current epoch if you do not specify any parameters.\",\"operationId\":\"getBeaconValidators\",\"parameters\":[{\"name\":\"epoch\",\"in\":\"query\",\"description\":\"`UnsignedLong` Epoch number to query. Defaults to the current epoch.\",\"schema\":{\"type\":\"string\"}},{\"name\":\"active\",\"in\":\"query\",\"description\":\"Only return validators that are active in the specified `epoch`. By default, returns inactive and active validators.\\n\\n**Note**: The field accepts any value to return active validators.\",\"schema\":{\"type\":\"string\"}},{\"name\":\"pageSize\",\"in\":\"query\",\"description\":\"`Integer` The amount of results to return per page. Defaults to 250 results.\",\"schema\":{\"type\":\"integer\",\"format\":\"int32\"}},{\"name\":\"pageToken\",\"in\":\"query\",\"description\":\"`Integer` Page number to return. Defaults to page 0.\",\"schema\":{\"type\":\"integer\",\"format\":\"int32\"}}],\"responses\":{\"200\":{\"description\":\"List of validator objects.\",\"content\":{\"application/json\":{\"schema\":{\"$ref\":\"#/components/schemas/BeaconValidators\"}}}},\"204\":{\"description\":\"No content may be returned if the genesis block has not been set, meaning that there is no head to query.\"},\"500\":{\"description\":\"Server Error\"}}},\"post\":{\"tags\":[\"Beacon\"],\"summary\":\"Get validators matching specified public keys.\",\"description\":\"Returns information about validators that match the list of validator public keys and optional epoch.\\n\\nIf no epoch is specified, the validators are queried from the current state.\\n\\nPublic keys that do not match a validator are returned without validator information.\",\"operationId\":\"postBeaconValidators\",\"requestBody\":{\"description\":\"```\\n{\\n  \\\"epoch\\\": (uint64),\\n  \\\"pubkeys\\\": [(Bytes48 as Hex String)]\\n}\\n```\",\"content\":{\"application/json\":{\"schema\":{\"$ref\":\"#/components/schemas/ValidatorsRequest\"}}}},\"responses\":{\"200\":{\"description\":\"List of validator objects.\",\"content\":{\"application/json\":{\"schema\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/components/schemas/ValidatorWithIndex\"}}}}},\"204\":{\"description\":\"No content may be returned if the genesis block has not been set, meaning that there is no head to query.\"},\"400\":{\"description\":\"Invalid body supplied\"},\"500\":{\"description\":\"Server Error\"}}}},\"/network/enr\":{\"get\":{\"tags\":[\"Network\"],\"summary\":\"Get the listening ENR address of the node.\",\"description\":\"Returns the beacon node's listening Ethereum Node Record (ENR) address.\",\"operationId\":\"getNetworkEnr\",\"responses\":{\"200\":{\"description\":\"Base64-encoded ENR or an empty string if Node Discovery Protocol v5 is not used.\",\"content\":{\"text/plain\":{\"schema\":{\"type\":\"string\"}}}}}}},\"/network/listen_addresses\":{\"get\":{\"tags\":[\"Network\"],\"summary\":\"Get the addresses the client's libp2p service is listening on.\",\"description\":\"Returns the list of addresses that the client's libp2p service is listening on.\",\"operationId\":\"getNetworkListen_addresses\",\"responses\":{\"200\":{\"description\":\"OK\",\"content\":{\"text/plain\":{\"schema\":{\"type\":\"array\",\"items\":{\"type\":\"string\"}}}}},\"500\":{\"description\":\"Server Error\"}}}},\"/network/peer_id\":{\"get\":{\"tags\":[\"Network\"],\"summary\":\"Get the node PeerId.\",\"description\":\"Returns the beacon node's base58-encoded PeerId.\",\"operationId\":\"getNetworkPeer_id\",\"responses\":{\"200\":{\"description\":\"OK\",\"content\":{\"text/plain\":{\"schema\":{\"type\":\"string\"}}}},\"500\":{\"description\":\"Server Error\"}}}},\"/network/peers\":{\"get\":{\"tags\":[\"Network\"],\"summary\":\"Get the PeerIds of connected peers.\",\"description\":\"Returns the base58-encoded PeerId of each peer connected to the beacon node.\",\"operationId\":\"getNetworkPeers\",\"responses\":{\"200\":{\"description\":\"OK\",\"content\":{\"text/plain\":{\"schema\":{\"type\":\"array\",\"items\":{\"type\":\"string\"}}}}},\"500\":{\"description\":\"Server Error\"}}}},\"/network/peer_count\":{\"get\":{\"tags\":[\"Network\"],\"summary\":\"Get the number of connected peers.\",\"description\":\"Returns the number of peers connected to the beacon node.\",\"operationId\":\"getNetworkPeer_count\",\"responses\":{\"200\":{\"description\":\"Number of peers connected to the beacon node.\",\"content\":{\"application/json\":{\"schema\":{\"type\":\"integer\",\"format\":\"int64\"}}}},\"500\":{\"description\":\"Server Error\"}}}},\"/network/listen_port\":{\"get\":{\"tags\":[\"Network\"],\"summary\":\"Get the TCP listening port of the client's libp2p service.\",\"description\":\"Returns the TCP listening port of the client's libp2p service.\",\"operationId\":\"getNetworkListen_port\",\"responses\":{\"200\":{\"description\":\"Client's TCP listening port.\",\"content\":{\"application/json\":{\"schema\":{\"type\":\"integer\",\"format\":\"int32\"}}}},\"500\":{\"description\":\"Server Error\"}}}},\"/node/fork\":{\"get\":{\"tags\":[\"Node\"],\"summary\":\"Get the fork of the current head.\",\"description\":\"Returns information about the fork of the beacon chain head from the node\u2019s perspective.\",\"operationId\":\"getNodeFork\",\"responses\":{\"200\":{\"description\":\"An object containing the fork of the current head.\",\"content\":{\"application/json\":{\"schema\":{\"$ref\":\"#/components/schemas/Fork\"}}}},\"204\":{\"description\":\"No content may be returned if the genesis block has not been set, meaning that there is no head to query.\"},\"500\":{\"description\":\"Server Error\"}}}},\"/node/genesis_time\":{\"get\":{\"tags\":[\"Node\"],\"summary\":\"Get genesis time.\",\"description\":\"Returns the genesis time from the beacon node.\",\"operationId\":\"getNodeGenesis_time\",\"responses\":{\"200\":{\"description\":\"OK\",\"content\":{\"application/json\":{\"schema\":{\"$ref\":\"#/components/schemas/UnsignedLong\"}}}},\"204\":{\"description\":\"No content may be returned if the genesis block has not been set, meaning that there is no head to query.\"},\"500\":{\"description\":\"Server Error\"}}}},\"/node/syncing\":{\"get\":{\"tags\":[\"Node\"],\"summary\":\"Get synchronization status.\",\"description\":\"Returns an object with data about the synchronization status, or false if not synchronizing.\",\"operationId\":\"getNodeSyncing\",\"responses\":{\"200\":{\"description\":\"OK\",\"content\":{\"application/json\":{\"schema\":{\"$ref\":\"#/components/schemas/SyncingResponse\"}}}},\"500\":{\"description\":\"Server Error\"}}}},\"/node/version\":{\"get\":{\"tags\":[\"Node\"],\"summary\":\"Get client version.\",\"description\":\"Returns the client version.\",\"operationId\":\"getNodeVersion\",\"responses\":{\"200\":{\"description\":\"OK\",\"content\":{\"text/plain\":{\"schema\":{\"type\":\"string\"}}}},\"500\":{\"description\":\"Server Error\"}}}},\"/validator/attestation\":{\"get\":{\"tags\":[\"Validator\"],\"summary\":\"Get an unsigned attestation for a slot from the current state.\",\"description\":\"Returns an unsigned attestation for the block at the specified non-finalized slot.\\n\\nThis endpoint is not protected against slashing. Signing the returned attestation can result in a slashable offence.\",\"operationId\":\"getValidatorAttestation\",\"parameters\":[{\"name\":\"slot\",\"in\":\"query\",\"description\":\"`UnsignedLong` Non-finalized slot for which to create the attestation.\",\"required\":true,\"schema\":{\"type\":\"string\"}},{\"name\":\"committee_index\",\"in\":\"query\",\"description\":\"`Integer` Index of the committee making the attestation.\",\"required\":true,\"schema\":{\"type\":\"integer\",\"format\":\"int32\"}}],\"responses\":{\"200\":{\"description\":\"Returns an attestation object with a blank signature. The `signature` field should be replaced by a valid signature.\",\"content\":{\"application/json\":{\"schema\":{\"$ref\":\"#/components/schemas/Attestation\"}}}},\"400\":{\"description\":\"Invalid parameter supplied\"},\"404\":{\"description\":\"An attestation could not be created for the specified slot.\"}}},\"post\":{\"tags\":[\"Validator\"],\"summary\":\"Submit a signed attestation.\",\"description\":\"Submit a signed attestation to the beacon node to be validated and submitted if valid.\\n\\nThis endpoint does not protected against slashing. Signing the attestation can result in a slashable offence.\",\"operationId\":\"postValidatorAttestation\",\"requestBody\":{\"content\":{\"application/json\":{\"schema\":{\"$ref\":\"#/components/schemas/Attestation\"}}}},\"responses\":{\"204\":{\"description\":\"The Attestation was accepted, validated, and submitted\"},\"400\":{\"description\":\"Invalid body supplied.\"},\"500\":{\"description\":\"Server Error\"}}}},\"/validator/block\":{\"get\":{\"tags\":[\"Validator\"],\"summary\":\"Create and return an unsigned beacon block at the specified slot.\",\"description\":\"Create and return an unsigned beacon block at the specified slot. The `randao_reveal` and `slot` must be provided to create the block.\",\"operationId\":\"getValidatorBlock\",\"parameters\":[{\"name\":\"slot\",\"in\":\"query\",\"description\":\"`UnsignedLong` Slot in which to create the beacon block.\",\"required\":true,\"schema\":{\"type\":\"string\"}},{\"name\":\"randao_reveal\",\"in\":\"query\",\"description\":\"`BLSSignature Hex` BLS12-381 signature for the current epoch.\",\"required\":true,\"schema\":{\"type\":\"string\"}}],\"responses\":{\"200\":{\"description\":\"`BeaconBlock` object for the specified slot.\",\"content\":{\"application/json\":{\"schema\":{\"$ref\":\"#/components/schemas/BeaconBlock\"}}}},\"204\":{\"description\":\"No content may be returned if the genesis block has not been set, meaning that there is no head to query.\"},\"400\":{\"description\":\"Invalid parameter supplied\"}}}},\"/validator/duties\":{\"post\":{\"tags\":[\"Validator\"],\"summary\":\"Get the validator duties for the specified epoch.\",\"description\":\"Returns the validator duties for validators that match the specified public keys and epoch.\\n\\nPublic keys that do not match a validator are returned without validator information.\",\"operationId\":\"postValidatorDuties\",\"requestBody\":{\"description\":\"```\\n{\\n  \\\"epoch\\\": (uint64),\\n  \\\"pubkeys\\\": [(Bytes48 as Hex String)]\\n}\\n```\",\"content\":{\"application/json\":{\"schema\":{\"$ref\":\"#/components/schemas/ValidatorsRequest\"}}}},\"responses\":{\"200\":{\"description\":\"List of validators, including information about a validator's attestation committee index and block proposal slot.\",\"content\":{\"application/json\":{\"schema\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/components/schemas/ValidatorDuties\"}}}}},\"204\":{\"description\":\"No content may be returned if the genesis block has not been set, meaning that there is no head to query.\"},\"400\":{\"description\":\"Invalid body supplied.\"},\"500\":{\"description\":\"Server Error\"}}}}},\"components\":{\"schemas\":{\"LogLevel\":{\"type\":\"object\",\"properties\":{\"level\":{\"type\":\"string\"},\"log_filter\":{\"type\":\"array\",\"items\":{\"type\":\"string\"}}}},\"Attestation\":{\"type\":\"object\",\"properties\":{\"aggregation_bits\":{\"$ref\":\"#/components/schemas/Bitlist\"},\"data\":{\"$ref\":\"#/components/schemas/AttestationData\"},\"signature\":{\"$ref\":\"#/components/schemas/BLSSignature\"}}},\"AttestationData\":{\"type\":\"object\",\"properties\":{\"slot\":{\"$ref\":\"#/components/schemas/UnsignedLong\"},\"index\":{\"$ref\":\"#/components/schemas/UnsignedLong\"},\"beacon_block_root\":{\"$ref\":\"#/components/schemas/Bytes32\"},\"source\":{\"$ref\":\"#/components/schemas/Checkpoint\"},\"target\":{\"$ref\":\"#/components/schemas/Checkpoint\"}}},\"AttesterSlashing\":{\"type\":\"object\",\"properties\":{\"attestation_1\":{\"$ref\":\"#/components/schemas/IndexedAttestation\"},\"attestation_2\":{\"$ref\":\"#/components/schemas/IndexedAttestation\"}}},\"BLSPubKey\":{\"type\":\"object\"},\"BLSSignature\":{\"type\":\"object\",\"properties\":{\"bytes\":{\"$ref\":\"#/components/schemas/Bytes\"}}},\"BeaconBlock\":{\"type\":\"object\",\"properties\":{\"slot\":{\"$ref\":\"#/components/schemas/UnsignedLong\"},\"proposer_index\":{\"$ref\":\"#/components/schemas/UnsignedLong\"},\"parent_root\":{\"$ref\":\"#/components/schemas/Bytes32\"},\"state_root\":{\"$ref\":\"#/components/schemas/Bytes32\"},\"body\":{\"$ref\":\"#/components/schemas/BeaconBlockBody\"}}},\"BeaconBlockBody\":{\"type\":\"object\",\"properties\":{\"randao_reveal\":{\"$ref\":\"#/components/schemas/BLSSignature\"},\"eth1_data\":{\"$ref\":\"#/components/schemas/Eth1Data\"},\"graffiti\":{\"$ref\":\"#/components/schemas/Bytes32\"},\"proposer_slashings\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/components/schemas/ProposerSlashing\"}},\"attester_slashings\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/components/schemas/AttesterSlashing\"}},\"attestations\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/components/schemas/Attestation\"}},\"deposits\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/components/schemas/Deposit\"}},\"voluntary_exits\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/components/schemas/SignedVoluntaryExit\"}}}},\"BeaconBlockHeader\":{\"type\":\"object\",\"properties\":{\"slot\":{\"$ref\":\"#/components/schemas/UnsignedLong\"},\"proposer_index\":{\"$ref\":\"#/components/schemas/UnsignedLong\"},\"parent_root\":{\"$ref\":\"#/components/schemas/Bytes32\"},\"state_root\":{\"$ref\":\"#/components/schemas/Bytes32\"},\"body_root\":{\"$ref\":\"#/components/schemas/Bytes32\"}}},\"Bitlist\":{\"type\":\"object\",\"properties\":{\"maxSize\":{\"type\":\"integer\",\"format\":\"int64\"},\"currentSize\":{\"type\":\"integer\",\"format\":\"int32\"},\"allSetBits\":{\"type\":\"array\",\"items\":{\"type\":\"integer\",\"format\":\"int32\"}},\"allBits\":{\"$ref\":\"#/components/schemas/Bitlist\"},\"bit\":{\"type\":\"integer\",\"format\":\"int32\",\"writeOnly\":true}}},\"Bytes\":{\"type\":\"object\",\"properties\":{\"zero\":{\"type\":\"boolean\"},\"empty\":{\"type\":\"boolean\"}}},\"Bytes32\":{\"type\":\"object\",\"properties\":{\"zero\":{\"type\":\"boolean\"},\"empty\":{\"type\":\"boolean\"}}},\"Checkpoint\":{\"type\":\"object\",\"properties\":{\"epoch\":{\"$ref\":\"#/components/schemas/UnsignedLong\"},\"root\":{\"$ref\":\"#/components/schemas/Bytes32\"}}},\"Deposit\":{\"type\":\"object\",\"properties\":{\"proof\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/components/schemas/Bytes32\"}},\"data\":{\"$ref\":\"#/components/schemas/DepositData\"}}},\"DepositData\":{\"type\":\"object\",\"properties\":{\"pubkey\":{\"$ref\":\"#/components/schemas/BLSPubKey\"},\"withdrawal_credentials\":{\"$ref\":\"#/components/schemas/Bytes32\"},\"amount\":{\"$ref\":\"#/components/schemas/UnsignedLong\"},\"signature\":{\"$ref\":\"#/components/schemas/BLSSignature\"}}},\"Eth1Data\":{\"type\":\"object\",\"properties\":{\"deposit_root\":{\"$ref\":\"#/components/schemas/Bytes32\"},\"deposit_count\":{\"$ref\":\"#/components/schemas/UnsignedLong\"},\"block_hash\":{\"$ref\":\"#/components/schemas/Bytes32\"}}},\"IndexedAttestation\":{\"type\":\"object\",\"properties\":{\"attesting_indices\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/components/schemas/UnsignedLong\"}},\"data\":{\"$ref\":\"#/components/schemas/AttestationData\"},\"signature\":{\"$ref\":\"#/components/schemas/BLSSignature\"}}},\"ProposerSlashing\":{\"type\":\"object\",\"properties\":{\"header_1\":{\"$ref\":\"#/components/schemas/SignedBeaconBlockHeader\"},\"header_2\":{\"$ref\":\"#/components/schemas/SignedBeaconBlockHeader\"}}},\"SignedBeaconBlock\":{\"type\":\"object\",\"properties\":{\"message\":{\"$ref\":\"#/components/schemas/BeaconBlock\"},\"signature\":{\"$ref\":\"#/components/schemas/BLSSignature\"}}},\"SignedBeaconBlockHeader\":{\"type\":\"object\",\"properties\":{\"message\":{\"$ref\":\"#/components/schemas/BeaconBlockHeader\"},\"signature\":{\"$ref\":\"#/components/schemas/BLSSignature\"}}},\"SignedVoluntaryExit\":{\"type\":\"object\",\"properties\":{\"message\":{\"$ref\":\"#/components/schemas/VoluntaryExit\"},\"signature\":{\"$ref\":\"#/components/schemas/BLSSignature\"}}},\"UnsignedLong\":{\"type\":\"object\"},\"VoluntaryExit\":{\"type\":\"object\",\"properties\":{\"epoch\":{\"$ref\":\"#/components/schemas/UnsignedLong\"},\"validator_index\":{\"$ref\":\"#/components/schemas/UnsignedLong\"}}},\"BeaconChainHead\":{\"type\":\"object\",\"properties\":{\"head_slot\":{\"$ref\":\"#/components/schemas/UnsignedLong\"},\"head_epoch\":{\"$ref\":\"#/components/schemas/UnsignedLong\"},\"head_block_root\":{\"$ref\":\"#/components/schemas/Bytes32\"},\"finalized_slot\":{\"$ref\":\"#/components/schemas/UnsignedLong\"},\"finalized_epoch\":{\"$ref\":\"#/components/schemas/UnsignedLong\"},\"finalized_block_root\":{\"$ref\":\"#/components/schemas/Bytes32\"},\"justified_slot\":{\"$ref\":\"#/components/schemas/UnsignedLong\"},\"justified_epoch\":{\"$ref\":\"#/components/schemas/UnsignedLong\"},\"justified_block_root\":{\"$ref\":\"#/components/schemas/Bytes32\"},\"previous_justified_slot\":{\"$ref\":\"#/components/schemas/UnsignedLong\"},\"previous_justified_epoch\":{\"$ref\":\"#/components/schemas/UnsignedLong\"},\"previous_justified_block_root\":{\"$ref\":\"#/components/schemas/Bytes32\"}}},\"BeaconHead\":{\"type\":\"object\",\"properties\":{\"slot\":{\"$ref\":\"#/components/schemas/UnsignedLong\"},\"block_root\":{\"$ref\":\"#/components/schemas/Bytes32\"},\"state_root\":{\"$ref\":\"#/components/schemas/Bytes32\"}}},\"Committee\":{\"type\":\"object\",\"properties\":{\"slot\":{\"$ref\":\"#/components/schemas/UnsignedLong\"},\"index\":{\"$ref\":\"#/components/schemas/UnsignedLong\"},\"committee\":{\"type\":\"array\",\"items\":{\"type\":\"integer\",\"format\":\"int32\"}}}},\"BeaconState\":{\"type\":\"object\",\"properties\":{\"genesis_time\":{\"$ref\":\"#/components/schemas/UnsignedLong\"},\"slot\":{\"$ref\":\"#/components/schemas/UnsignedLong\"},\"fork\":{\"$ref\":\"#/components/schemas/Fork\"},\"latest_block_header\":{\"$ref\":\"#/components/schemas/BeaconBlockHeader\"},\"block_roots\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/components/schemas/Bytes32\"}},\"state_roots\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/components/schemas/Bytes32\"}},\"historical_roots\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/components/schemas/Bytes32\"}},\"eth1_data\":{\"$ref\":\"#/components/schemas/Eth1Data\"},\"eth1_data_votes\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/components/schemas/Eth1Data\"}},\"eth1_deposit_index\":{\"$ref\":\"#/components/schemas/UnsignedLong\"},\"validators\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/components/schemas/Validator\"}},\"balances\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/components/schemas/UnsignedLong\"}},\"randao_mixes\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/components/schemas/Bytes32\"}},\"slashings\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/components/schemas/UnsignedLong\"}},\"previous_epoch_attestations\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/components/schemas/PendingAttestation\"}},\"current_epoch_attestations\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/components/schemas/PendingAttestation\"}},\"justification_bits\":{\"$ref\":\"#/components/schemas/Bitvector\"},\"previous_justified_checkpoint\":{\"$ref\":\"#/components/schemas/Checkpoint\"},\"current_justified_checkpoint\":{\"$ref\":\"#/components/schemas/Checkpoint\"},\"finalized_checkpoint\":{\"$ref\":\"#/components/schemas/Checkpoint\"}}},\"Bitvector\":{\"type\":\"object\",\"properties\":{\"size\":{\"type\":\"integer\",\"format\":\"int32\"},\"bit\":{\"type\":\"integer\",\"format\":\"int32\",\"writeOnly\":true}}},\"Bytes4\":{\"type\":\"object\",\"properties\":{\"wrappedBytes\":{\"$ref\":\"#/components/schemas/Bytes\"}}},\"Fork\":{\"type\":\"object\",\"properties\":{\"previous_version\":{\"$ref\":\"#/components/schemas/Bytes4\"},\"current_version\":{\"$ref\":\"#/components/schemas/Bytes4\"},\"epoch\":{\"$ref\":\"#/components/schemas/UnsignedLong\"}}},\"PendingAttestation\":{\"type\":\"object\",\"properties\":{\"aggregation_bits\":{\"$ref\":\"#/components/schemas/Bitlist\"},\"data\":{\"$ref\":\"#/components/schemas/AttestationData\"},\"inclusion_delay\":{\"$ref\":\"#/components/schemas/UnsignedLong\"},\"proposer_index\":{\"$ref\":\"#/components/schemas/UnsignedLong\"}}},\"Validator\":{\"type\":\"object\",\"properties\":{\"pubkey\":{\"$ref\":\"#/components/schemas/BLSPubKey\"},\"withdrawal_credentials\":{\"$ref\":\"#/components/schemas/Bytes32\"},\"effective_balance\":{\"$ref\":\"#/components/schemas/UnsignedLong\"},\"slashed\":{\"type\":\"boolean\"},\"activation_eligibility_epoch\":{\"$ref\":\"#/components/schemas/UnsignedLong\"},\"activation_epoch\":{\"$ref\":\"#/components/schemas/UnsignedLong\"},\"exit_epoch\":{\"$ref\":\"#/components/schemas/UnsignedLong\"},\"withdrawable_epoch\":{\"$ref\":\"#/components/schemas/UnsignedLong\"}}},\"ValidatorsRequest\":{\"required\":[\"pubkeys\"],\"type\":\"object\",\"properties\":{\"epoch\":{\"$ref\":\"#/components/schemas/UnsignedLong\"},\"pubkeys\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/components/schemas/BLSPubKey\"}}}},\"ValidatorWithIndex\":{\"type\":\"object\",\"properties\":{\"pubkey\":{\"$ref\":\"#/components/schemas/BLSPubKey\"},\"validator_index\":{\"type\":\"integer\",\"format\":\"int32\"},\"balance\":{\"$ref\":\"#/components/schemas/UnsignedLong\"},\"validator\":{\"$ref\":\"#/components/schemas/Validator\"}}},\"SyncStatus\":{\"type\":\"object\",\"properties\":{\"starting_slot\":{\"$ref\":\"#/components/schemas/UnsignedLong\"},\"current_slot\":{\"$ref\":\"#/components/schemas/UnsignedLong\"},\"highest_slot\":{\"$ref\":\"#/components/schemas/UnsignedLong\"}}},\"SyncingResponse\":{\"type\":\"object\",\"properties\":{\"is_syncing\":{\"type\":\"boolean\"},\"sync_status\":{\"$ref\":\"#/components/schemas/SyncStatus\"}}},\"BeaconValidators\":{\"type\":\"object\",\"properties\":{\"validators\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/components/schemas/ValidatorWithIndex\"}},\"total_size\":{\"type\":\"integer\",\"format\":\"int64\"},\"next_page_token\":{\"type\":\"integer\",\"format\":\"int32\"}}},\"ValidatorDuties\":{\"type\":\"object\",\"properties\":{\"validator_pubkey\":{\"$ref\":\"#/components/schemas/BLSPubKey\"},\"aggregator_modulo\":{\"type\":\"integer\",\"format\":\"int32\"},\"validator_index\":{\"type\":\"integer\",\"format\":\"int32\"},\"attestation_committee_index\":{\"type\":\"integer\",\"format\":\"int32\"},\"attestation_committee_position\":{\"type\":\"integer\",\"format\":\"int32\"},\"block_proposal_slots\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/components/schemas/UnsignedLong\"}},\"attestation_slot\":{\"$ref\":\"#/components/schemas/UnsignedLong\"}}}}}}\n\\ No newline at end of file\n+{\"openapi\":\"3.0.1\",\"info\":{\"title\":\"Teku\",\"description\":\"A minimal API specification for the beacon node, which enables a validator to connect and perform its obligations on the Ethereum 2.0 phase 0 beacon chain.\",\"license\":{\"name\":\"Apache 2.0\",\"url\":\"https://www.apache.org/licenses/LICENSE-2.0.html\"},\"version\":\"v0.11.2-dev-b83a50f0\"},\"paths\":{\"/admin/log_level\":{\"put\":{\"tags\":[\"Admin\"],\"summary\":\"Changes the log level without restarting.\",\"description\":\"Changes the log level without restarting. You can change the log level for all logs, or the log level for specific packages or classes.\",\"operationId\":\"putAdminLog_level\",\"requestBody\":{\"description\":\"```\\n{\\n  \\\"level\\\": (String; acceptable values: ALL, TRACE, DEBUG, INFO, ERROR, FATAL, OFF ),\\n  \\\"log_filter\\\": [(String; Optional)]\\n}\\n```\",\"content\":{\"application/json\":{\"schema\":{\"$ref\":\"#/components/schemas/LogLevel\"}}}},\"responses\":{\"204\":{\"description\":\"The LogLevel was accepted and applied\"},\"400\":{\"description\":\"Invalid body supplied.\"},\"500\":{\"description\":\"Server Error\"}}}},\"/beacon/block\":{\"get\":{\"tags\":[\"Beacon\"],\"summary\":\"Get the beacon chain block matching the criteria.\",\"description\":\"Returns the beacon chain block that matches the specified epoch, slot, or block root.\",\"operationId\":\"getBeaconBlock\",\"parameters\":[{\"name\":\"epoch\",\"in\":\"query\",\"description\":\"`UnsignedLong` Epoch number to query.\",\"schema\":{\"type\":\"string\"}},{\"name\":\"slot\",\"in\":\"query\",\"description\":\"`UnsignedLong` Slot to query in the canonical chain.\",\"schema\":{\"type\":\"string\"}},{\"name\":\"root\",\"in\":\"query\",\"description\":\"`Bytes32 Hex` Block root to query.\",\"schema\":{\"type\":\"string\"}}],\"responses\":{\"200\":{\"description\":\"OK\",\"content\":{\"application/json\":{\"schema\":{\"$ref\":\"#/components/schemas/SignedBeaconBlock\"}}}},\"400\":{\"description\":\"Invalid parameter supplied\"},\"404\":{\"description\":\"Specified block not found\"}}}},\"/beacon/chainhead\":{\"get\":{\"tags\":[\"Beacon\"],\"summary\":\"Get information about the chain head.\",\"description\":\"Returns information about the head of the beacon chain including the finalized and justified information.\",\"operationId\":\"getBeaconChainhead\",\"responses\":{\"200\":{\"description\":\"OK\",\"content\":{\"application/json\":{\"schema\":{\"$ref\":\"#/components/schemas/BeaconChainHead\"}}}},\"204\":{\"description\":\"No content may be returned if the genesis block has not been set, meaning that there is no head to query.\"},\"500\":{\"description\":\"Server Error\"}}}},\"/beacon/head\":{\"get\":{\"tags\":[\"Beacon\"],\"summary\":\"Get information about the chain head.\",\"description\":\"Returns information about the head of the beacon chain from the node\u2019s perspective.\\n\\nTo retrieve finalized and justified information, use /beacon/chainhead instead.\",\"operationId\":\"getBeaconHead\",\"responses\":{\"200\":{\"description\":\"OK\",\"content\":{\"application/json\":{\"schema\":{\"$ref\":\"#/components/schemas/BeaconHead\"}}}},\"204\":{\"description\":\"No content may be returned if the genesis block has not been set, meaning that there is no head to query.\"},\"500\":{\"description\":\"Server Error\"}}}},\"/beacon/committees\":{\"get\":{\"tags\":[\"Beacon\"],\"summary\":\"Get the committee assignments for an epoch.\",\"description\":\"Returns committee assignments for each slot in a specified epoch.\",\"operationId\":\"getBeaconCommittees\",\"parameters\":[{\"name\":\"epoch\",\"in\":\"query\",\"description\":\"`UnsignedLong` Epoch number to query.\",\"required\":true,\"schema\":{\"type\":\"string\"}}],\"responses\":{\"200\":{\"description\":\"OK\",\"content\":{\"application/json\":{\"schema\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/components/schemas/Committee\"}}}}},\"400\":{\"description\":\"Missing a query parameter\"},\"204\":{\"description\":\"No content may be returned if the genesis block has not been set, meaning that there is no head to query.\"},\"500\":{\"description\":\"Server Error\"}}}},\"/beacon/state\":{\"get\":{\"tags\":[\"Beacon\"],\"summary\":\"Get the beacon chain state matching the criteria.\",\"description\":\"Returns the beacon chain state that matches the specified slot or block root.\",\"operationId\":\"getBeaconState\",\"parameters\":[{\"name\":\"root\",\"in\":\"query\",\"description\":\"`Bytes32 Hex` Block root to query.\",\"schema\":{\"type\":\"string\"}},{\"name\":\"slot\",\"in\":\"query\",\"description\":\"`UnsignedLong` Slot to query in the canonical chain.\",\"schema\":{\"type\":\"string\"}}],\"responses\":{\"200\":{\"description\":\"OK\",\"content\":{\"application/json\":{\"schema\":{\"$ref\":\"#/components/schemas/BeaconState\"}}}},\"404\":{\"description\":\"The beacon state matching the supplied query parameter was not found.\"},\"400\":{\"description\":\"Missing a query parameter\"},\"204\":{\"description\":\"No content may be returned if the genesis block has not been set, meaning that there is no head to query.\"},\"500\":{\"description\":\"Server Error\"}}}},\"/beacon/state_root\":{\"get\":{\"tags\":[\"Beacon\"],\"summary\":\"Get the beacon chain state root for the specified slot.\",\"description\":\"Returns the beacon chain state root for the specified slot.\",\"operationId\":\"getBeaconState_root\",\"parameters\":[{\"name\":\"slot\",\"in\":\"query\",\"description\":\"`UnsignedLong` Slot to query in the canonical chain.\",\"schema\":{\"type\":\"string\"}}],\"responses\":{\"200\":{\"description\":\"The beacon chain `state_root`(`Bytes32`) for the specified slot.\",\"content\":{\"text/plain\":{\"schema\":{\"type\":\"string\"}}}},\"404\":{\"description\":\"The beacon state root matching the supplied parameter was not found.\"},\"400\":{\"description\":\"Missing a query parameter.\"},\"204\":{\"description\":\"No content may be returned if the genesis block has not been set, meaning that there is no head to query.\"},\"500\":{\"description\":\"Server Error\"}}}},\"/beacon/validators\":{\"get\":{\"tags\":[\"Beacon\"],\"summary\":\"Get validators matching the specified query.\",\"description\":\"Returns validator information.\\n\\nReturns the first page of validators in the current epoch if you do not specify any parameters.\",\"operationId\":\"getBeaconValidators\",\"parameters\":[{\"name\":\"epoch\",\"in\":\"query\",\"description\":\"`UnsignedLong` Epoch number to query. Defaults to the current epoch.\",\"schema\":{\"type\":\"string\"}},{\"name\":\"active\",\"in\":\"query\",\"description\":\"Only return validators that are active in the specified `epoch`. By default, returns inactive and active validators.\\n\\n**Note**: The field accepts any value to return active validators.\",\"schema\":{\"type\":\"string\"}},{\"name\":\"pageSize\",\"in\":\"query\",\"description\":\"`Integer` The amount of results to return per page. Defaults to 250 results.\",\"schema\":{\"type\":\"integer\",\"format\":\"int32\"}},{\"name\":\"pageToken\",\"in\":\"query\",\"description\":\"`Integer` Page number to return. Defaults to page 0.\",\"schema\":{\"type\":\"integer\",\"format\":\"int32\"}}],\"responses\":{\"200\":{\"description\":\"List of validator objects.\",\"content\":{\"application/json\":{\"schema\":{\"$ref\":\"#/components/schemas/BeaconValidators\"}}}},\"204\":{\"description\":\"No content may be returned if the genesis block has not been set, meaning that there is no head to query.\"},\"500\":{\"description\":\"Server Error\"}}},\"post\":{\"tags\":[\"Beacon\"],\"summary\":\"Get validators matching specified public keys.\",\"description\":\"Returns information about validators that match the list of validator public keys and optional epoch.\\n\\nIf no epoch is specified, the validators are queried from the current state.\\n\\nPublic keys that do not match a validator are returned without validator information.\",\"operationId\":\"postBeaconValidators\",\"requestBody\":{\"description\":\"```\\n{\\n  \\\"epoch\\\": (uint64),\\n  \\\"pubkeys\\\": [(Bytes48 as Hex String)]\\n}\\n```\",\"content\":{\"application/json\":{\"schema\":{\"$ref\":\"#/components/schemas/ValidatorsRequest\"}}}},\"responses\":{\"200\":{\"description\":\"List of validator objects.\",\"content\":{\"application/json\":{\"schema\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/components/schemas/ValidatorWithIndex\"}}}}},\"204\":{\"description\":\"No content may be returned if the genesis block has not been set, meaning that there is no head to query.\"},\"400\":{\"description\":\"Invalid body supplied\"},\"500\":{\"description\":\"Server Error\"}}}},\"/network/enr\":{\"get\":{\"tags\":[\"Network\"],\"summary\":\"Get the listening ENR address of the node.\",\"description\":\"Returns the beacon node's listening Ethereum Node Record (ENR) address.\",\"operationId\":\"getNetworkEnr\",\"responses\":{\"200\":{\"description\":\"Base64-encoded ENR or an empty string if Node Discovery Protocol v5 is not used.\",\"content\":{\"text/plain\":{\"schema\":{\"type\":\"string\"}}}}}}},\"/network/listen_addresses\":{\"get\":{\"tags\":[\"Network\"],\"summary\":\"Get the addresses the client's libp2p service is listening on.\",\"description\":\"Returns the list of addresses that the client's libp2p service is listening on.\",\"operationId\":\"getNetworkListen_addresses\",\"responses\":{\"200\":{\"description\":\"OK\",\"content\":{\"text/plain\":{\"schema\":{\"type\":\"array\",\"items\":{\"type\":\"string\"}}}}},\"500\":{\"description\":\"Server Error\"}}}},\"/network/peer_id\":{\"get\":{\"tags\":[\"Network\"],\"summary\":\"Get the node PeerId.\",\"description\":\"Returns the beacon node's base58-encoded PeerId.\",\"operationId\":\"getNetworkPeer_id\",\"responses\":{\"200\":{\"description\":\"OK\",\"content\":{\"text/plain\":{\"schema\":{\"type\":\"string\"}}}},\"500\":{\"description\":\"Server Error\"}}}},\"/network/peers\":{\"get\":{\"tags\":[\"Network\"],\"summary\":\"Get the PeerIds of connected peers.\",\"description\":\"Returns the base58-encoded PeerId of each peer connected to the beacon node.\",\"operationId\":\"getNetworkPeers\",\"responses\":{\"200\":{\"description\":\"OK\",\"content\":{\"text/plain\":{\"schema\":{\"type\":\"array\",\"items\":{\"type\":\"string\"}}}}},\"500\":{\"description\":\"Server Error\"}}}},\"/network/peer_count\":{\"get\":{\"tags\":[\"Network\"],\"summary\":\"Get the number of connected peers.\",\"description\":\"Returns the number of peers connected to the beacon node.\",\"operationId\":\"getNetworkPeer_count\",\"responses\":{\"200\":{\"description\":\"Number of peers connected to the beacon node.\",\"content\":{\"application/json\":{\"schema\":{\"type\":\"integer\",\"format\":\"int64\"}}}},\"500\":{\"description\":\"Server Error\"}}}},\"/network/listen_port\":{\"get\":{\"tags\":[\"Network\"],\"summary\":\"Get the TCP listening port of the client's libp2p service.\",\"description\":\"Returns the TCP listening port of the client's libp2p service.\",\"operationId\":\"getNetworkListen_port\",\"responses\":{\"200\":{\"description\":\"Client's TCP listening port.\",\"content\":{\"application/json\":{\"schema\":{\"type\":\"integer\",\"format\":\"int32\"}}}},\"500\":{\"description\":\"Server Error\"}}}},\"/node/fork\":{\"get\":{\"tags\":[\"Node\"],\"summary\":\"Get the fork of the current head.\",\"description\":\"Returns information about the fork of the beacon chain head from the node\u2019s perspective.\",\"operationId\":\"getNodeFork\",\"responses\":{\"200\":{\"description\":\"An object containing the fork of the current head.\",\"content\":{\"application/json\":{\"schema\":{\"$ref\":\"#/components/schemas/Fork\"}}}},\"204\":{\"description\":\"No content may be returned if the genesis block has not been set, meaning that there is no head to query.\"},\"500\":{\"description\":\"Server Error\"}}}},\"/node/genesis_time\":{\"get\":{\"tags\":[\"Node\"],\"summary\":\"Get genesis time.\",\"description\":\"Returns the genesis time from the beacon node.\",\"operationId\":\"getNodeGenesis_time\",\"responses\":{\"200\":{\"description\":\"OK\",\"content\":{\"text/plain\":{\"schema\":{\"type\":\"string\"}}}},\"204\":{\"description\":\"No content may be returned if the genesis block has not been set, meaning that there is no head to query.\"},\"500\":{\"description\":\"Server Error\"}}}},\"/node/syncing\":{\"get\":{\"tags\":[\"Node\"],\"summary\":\"Get synchronization status.\",\"description\":\"Returns an object with data about the synchronization status, or false if not synchronizing.\",\"operationId\":\"getNodeSyncing\",\"responses\":{\"200\":{\"description\":\"OK\",\"content\":{\"application/json\":{\"schema\":{\"$ref\":\"#/components/schemas/SyncingResponse\"}}}},\"500\":{\"description\":\"Server Error\"}}}},\"/node/version\":{\"get\":{\"tags\":[\"Node\"],\"summary\":\"Get client version.\",\"description\":\"Returns the client version.\",\"operationId\":\"getNodeVersion\",\"responses\":{\"200\":{\"description\":\"OK\",\"content\":{\"text/plain\":{\"schema\":{\"type\":\"string\"}}}},\"500\":{\"description\":\"Server Error\"}}}},\"/validator/attestation\":{\"get\":{\"tags\":[\"Validator\"],\"summary\":\"Get an unsigned attestation for a slot from the current state.\",\"description\":\"Returns an unsigned attestation for the block at the specified non-finalized slot.\\n\\nThis endpoint is not protected against slashing. Signing the returned attestation can result in a slashable offence.\",\"operationId\":\"getValidatorAttestation\",\"parameters\":[{\"name\":\"slot\",\"in\":\"query\",\"description\":\"`UnsignedLong` Non-finalized slot for which to create the attestation.\",\"required\":true,\"schema\":{\"type\":\"string\"}},{\"name\":\"committee_index\",\"in\":\"query\",\"description\":\"`Integer` Index of the committee making the attestation.\",\"required\":true,\"schema\":{\"type\":\"integer\",\"format\":\"int32\"}}],\"responses\":{\"200\":{\"description\":\"Returns an attestation object with a blank signature. The `signature` field should be replaced by a valid signature.\",\"content\":{\"application/json\":{\"schema\":{\"$ref\":\"#/components/schemas/Attestation\"}}}},\"400\":{\"description\":\"Invalid parameter supplied\"},\"404\":{\"description\":\"An attestation could not be created for the specified slot.\"}}},\"post\":{\"tags\":[\"Validator\"],\"summary\":\"Submit a signed attestation.\",\"description\":\"Submit a signed attestation to the beacon node to be validated and submitted if valid.\\n\\nThis endpoint does not protected against slashing. Signing the attestation can result in a slashable offence.\",\"operationId\":\"postValidatorAttestation\",\"requestBody\":{\"content\":{\"application/json\":{\"schema\":{\"$ref\":\"#/components/schemas/Attestation\"}}}},\"responses\":{\"204\":{\"description\":\"The Attestation was accepted, validated, and submitted\"},\"400\":{\"description\":\"Invalid body supplied.\"},\"500\":{\"description\":\"Server Error\"}}}},\"/validator/block\":{\"get\":{\"tags\":[\"Validator\"],\"summary\":\"Create and return an unsigned beacon block at the specified slot.\",\"description\":\"Create and return an unsigned beacon block at the specified slot. The `randao_reveal` and `slot` must be provided to create the block.\",\"operationId\":\"getValidatorBlock\",\"parameters\":[{\"name\":\"slot\",\"in\":\"query\",\"description\":\"`UnsignedLong` Slot in which to create the beacon block.\",\"required\":true,\"schema\":{\"type\":\"string\"}},{\"name\":\"randao_reveal\",\"in\":\"query\",\"description\":\"`BLSSignature Hex` BLS12-381 signature for the current epoch.\",\"required\":true,\"schema\":{\"type\":\"string\"}}],\"responses\":{\"200\":{\"description\":\"`BeaconBlock` object for the specified slot.\",\"content\":{\"application/json\":{\"schema\":{\"$ref\":\"#/components/schemas/BeaconBlock\"}}}},\"204\":{\"description\":\"No content may be returned if the genesis block has not been set, meaning that there is no head to query.\"},\"400\":{\"description\":\"Invalid parameter supplied\"}}},\"post\":{\"tags\":[\"Validator\"],\"summary\":\"Submit a signed transaction to be imported.\",\"description\":\"Submit a signed beacon block to the beacon node to be imported. The beacon node performs the required validation.\",\"operationId\":\"postValidatorBlock\",\"requestBody\":{\"content\":{\"application/json\":{\"schema\":{\"$ref\":\"#/components/schemas/SignedBeaconBlock\"}}}},\"responses\":{\"200\":{\"description\":\"Block has been successfully broadcast, validated and imported.\"},\"202\":{\"description\":\"Block has been successfully broadcast, but failed validation and has not been imported.\"},\"400\":{\"description\":\"Unable to parse request body.\"},\"500\":{\"description\":\"Beacon node experienced an internal error.\"},\"503\":{\"description\":\"Beacon node is currently syncing.\"}}}},\"/validator/duties\":{\"post\":{\"tags\":[\"Validator\"],\"summary\":\"Get the validator duties for the specified epoch.\",\"description\":\"Returns the validator duties for validators that match the specified public keys and epoch.\\n\\nPublic keys that do not match a validator are returned without validator information.\",\"operationId\":\"postValidatorDuties\",\"requestBody\":{\"description\":\"```\\n{\\n  \\\"epoch\\\": (uint64),\\n  \\\"pubkeys\\\": [(Bytes48 as Hex String)]\\n}\\n```\",\"content\":{\"application/json\":{\"schema\":{\"$ref\":\"#/components/schemas/ValidatorsRequest\"}}}},\"responses\":{\"200\":{\"description\":\"List of validators, including information about a validator's attestation committee index and block proposal slot.\",\"content\":{\"application/json\":{\"schema\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/components/schemas/ValidatorDuties\"}}}}},\"204\":{\"description\":\"No content may be returned if the genesis block has not been set, meaning that there is no head to query.\"},\"400\":{\"description\":\"Invalid body supplied.\"},\"500\":{\"description\":\"Server Error\"}}}}},\"components\":{\"schemas\":{\"LogLevel\":{\"type\":\"object\",\"properties\":{\"level\":{\"type\":\"string\"},\"log_filter\":{\"type\":\"array\",\"items\":{\"type\":\"string\"}}}},\"Attestation\":{\"type\":\"object\",\"properties\":{\"aggregation_bits\":{\"type\":\"string\",\"description\":\"SSZ hexadecimal\",\"format\":\"byte\"},\"data\":{\"$ref\":\"#/components/schemas/AttestationData\"},\"signature\":{\"type\":\"string\",\"description\":\"Bytes96 hexadecimal\",\"format\":\"byte\"}}},\"AttestationData\":{\"type\":\"object\",\"properties\":{\"slot\":{\"type\":\"string\",\"format\":\"uint64\"},\"index\":{\"type\":\"string\",\"format\":\"uint64\"},\"beacon_block_root\":{\"type\":\"string\",\"description\":\"Bytes32 hexadecimal\",\"format\":\"byte\"},\"source\":{\"$ref\":\"#/components/schemas/Checkpoint\"},\"target\":{\"$ref\":\"#/components/schemas/Checkpoint\"}}},\"AttesterSlashing\":{\"type\":\"object\",\"properties\":{\"attestation_1\":{\"$ref\":\"#/components/schemas/IndexedAttestation\"},\"attestation_2\":{\"$ref\":\"#/components/schemas/IndexedAttestation\"}}},\"BeaconBlock\":{\"type\":\"object\",\"properties\":{\"slot\":{\"type\":\"string\",\"format\":\"uint64\"},\"proposer_index\":{\"type\":\"string\",\"format\":\"uint64\"},\"parent_root\":{\"type\":\"string\",\"description\":\"Bytes32 hexadecimal\",\"format\":\"byte\"},\"state_root\":{\"type\":\"string\",\"description\":\"Bytes32 hexadecimal\",\"format\":\"byte\"},\"body\":{\"$ref\":\"#/components/schemas/BeaconBlockBody\"}}},\"BeaconBlockBody\":{\"type\":\"object\",\"properties\":{\"randao_reveal\":{\"type\":\"string\",\"description\":\"Bytes96 hexadecimal\",\"format\":\"byte\"},\"eth1_data\":{\"$ref\":\"#/components/schemas/Eth1Data\"},\"graffiti\":{\"type\":\"string\",\"description\":\"Bytes32 hexadecimal\",\"format\":\"byte\"},\"proposer_slashings\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/components/schemas/ProposerSlashing\"}},\"attester_slashings\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/components/schemas/AttesterSlashing\"}},\"attestations\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/components/schemas/Attestation\"}},\"deposits\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/components/schemas/Deposit\"}},\"voluntary_exits\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/components/schemas/SignedVoluntaryExit\"}}}},\"BeaconBlockHeader\":{\"type\":\"object\",\"properties\":{\"slot\":{\"type\":\"string\",\"format\":\"uint64\"},\"proposer_index\":{\"type\":\"string\",\"format\":\"uint64\"},\"parent_root\":{\"type\":\"string\",\"description\":\"Bytes32 hexadecimal\",\"format\":\"byte\"},\"state_root\":{\"type\":\"string\",\"description\":\"Bytes32 hexadecimal\",\"format\":\"byte\"},\"body_root\":{\"type\":\"string\",\"description\":\"Bytes32 hexadecimal\",\"format\":\"byte\"}}},\"Checkpoint\":{\"type\":\"object\",\"properties\":{\"epoch\":{\"type\":\"string\",\"format\":\"uint64\"},\"root\":{\"type\":\"string\",\"description\":\"Bytes32 hexadecimal\",\"format\":\"byte\"}}},\"Deposit\":{\"type\":\"object\",\"properties\":{\"proof\":{\"type\":\"array\",\"items\":{\"type\":\"string\",\"description\":\"Bytes32 hexadecimal\",\"format\":\"byte\"}},\"data\":{\"$ref\":\"#/components/schemas/DepositData\"}}},\"DepositData\":{\"type\":\"object\",\"properties\":{\"pubkey\":{\"type\":\"string\",\"description\":\"Bytes48 hexadecimal\",\"format\":\"byte\"},\"withdrawal_credentials\":{\"type\":\"string\",\"description\":\"Bytes32 hexadecimal\",\"format\":\"byte\"},\"amount\":{\"type\":\"string\",\"format\":\"uint64\"},\"signature\":{\"type\":\"string\",\"description\":\"Bytes96 hexadecimal\",\"format\":\"byte\"}}},\"Eth1Data\":{\"type\":\"object\",\"properties\":{\"deposit_root\":{\"type\":\"string\",\"description\":\"Bytes32 hexadecimal\",\"format\":\"byte\"},\"deposit_count\":{\"type\":\"string\",\"format\":\"uint64\"},\"block_hash\":{\"type\":\"string\",\"description\":\"Bytes32 hexadecimal\",\"format\":\"byte\"}}},\"IndexedAttestation\":{\"type\":\"object\",\"properties\":{\"attesting_indices\":{\"type\":\"array\",\"items\":{\"type\":\"string\",\"format\":\"uint64\"}},\"data\":{\"$ref\":\"#/components/schemas/AttestationData\"},\"signature\":{\"type\":\"string\",\"description\":\"Bytes96 hexadecimal\",\"format\":\"byte\"}}},\"ProposerSlashing\":{\"type\":\"object\",\"properties\":{\"header_1\":{\"$ref\":\"#/components/schemas/SignedBeaconBlockHeader\"},\"header_2\":{\"$ref\":\"#/components/schemas/SignedBeaconBlockHeader\"}}},\"SignedBeaconBlock\":{\"type\":\"object\",\"properties\":{\"message\":{\"$ref\":\"#/components/schemas/BeaconBlock\"},\"signature\":{\"type\":\"string\",\"description\":\"Bytes96 hexadecimal\",\"format\":\"byte\"}}},\"SignedBeaconBlockHeader\":{\"type\":\"object\",\"properties\":{\"message\":{\"$ref\":\"#/components/schemas/BeaconBlockHeader\"},\"signature\":{\"type\":\"string\",\"description\":\"Bytes96 hexadecimal\",\"format\":\"byte\"}}},\"SignedVoluntaryExit\":{\"type\":\"object\",\"properties\":{\"message\":{\"$ref\":\"#/components/schemas/VoluntaryExit\"},\"signature\":{\"type\":\"string\",\"description\":\"Bytes96 hexadecimal\",\"format\":\"byte\"}}},\"VoluntaryExit\":{\"type\":\"object\",\"properties\":{\"epoch\":{\"type\":\"string\",\"format\":\"uint64\"},\"validator_index\":{\"type\":\"string\",\"format\":\"uint64\"}}},\"BeaconChainHead\":{\"type\":\"object\",\"properties\":{\"head_slot\":{\"type\":\"string\",\"format\":\"uint64\"},\"head_epoch\":{\"type\":\"string\",\"format\":\"uint64\"},\"head_block_root\":{\"type\":\"string\",\"description\":\"Bytes32 hexadecimal\",\"format\":\"byte\"},\"finalized_slot\":{\"type\":\"string\",\"format\":\"uint64\"},\"finalized_epoch\":{\"type\":\"string\",\"format\":\"uint64\"},\"finalized_block_root\":{\"type\":\"string\",\"description\":\"Bytes32 hexadecimal\",\"format\":\"byte\"},\"justified_slot\":{\"type\":\"string\",\"format\":\"uint64\"},\"justified_epoch\":{\"type\":\"string\",\"format\":\"uint64\"},\"justified_block_root\":{\"type\":\"string\",\"description\":\"Bytes32 hexadecimal\",\"format\":\"byte\"},\"previous_justified_slot\":{\"type\":\"string\",\"format\":\"uint64\"},\"previous_justified_epoch\":{\"type\":\"string\",\"format\":\"uint64\"},\"previous_justified_block_root\":{\"type\":\"string\",\"description\":\"Bytes32 hexadecimal\",\"format\":\"byte\"}}},\"BeaconHead\":{\"type\":\"object\",\"properties\":{\"slot\":{\"type\":\"string\",\"format\":\"uint64\"},\"block_root\":{\"type\":\"string\",\"description\":\"Bytes32 hexadecimal\",\"format\":\"byte\"},\"state_root\":{\"type\":\"string\",\"description\":\"Bytes32 hexadecimal\",\"format\":\"byte\"}}},\"Committee\":{\"type\":\"object\",\"properties\":{\"slot\":{\"type\":\"string\",\"format\":\"uint64\"},\"index\":{\"type\":\"string\",\"format\":\"uint64\"},\"committee\":{\"type\":\"array\",\"items\":{\"type\":\"integer\",\"format\":\"int32\"}}}},\"BeaconState\":{\"type\":\"object\",\"properties\":{\"genesis_time\":{\"type\":\"string\",\"format\":\"uint64\"},\"slot\":{\"type\":\"string\",\"format\":\"uint64\"},\"fork\":{\"$ref\":\"#/components/schemas/Fork\"},\"latest_block_header\":{\"$ref\":\"#/components/schemas/BeaconBlockHeader\"},\"block_roots\":{\"type\":\"array\",\"items\":{\"type\":\"string\",\"description\":\"Bytes32 hexadecimal\",\"format\":\"byte\"}},\"state_roots\":{\"type\":\"array\",\"items\":{\"type\":\"string\",\"description\":\"Bytes32 hexadecimal\",\"format\":\"byte\"}},\"historical_roots\":{\"type\":\"array\",\"items\":{\"type\":\"string\",\"description\":\"Bytes32 hexadecimal\",\"format\":\"byte\"}},\"eth1_data\":{\"$ref\":\"#/components/schemas/Eth1Data\"},\"eth1_data_votes\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/components/schemas/Eth1Data\"}},\"eth1_deposit_index\":{\"type\":\"string\",\"format\":\"uint64\"},\"validators\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/components/schemas/Validator\"}},\"balances\":{\"type\":\"array\",\"items\":{\"type\":\"string\",\"format\":\"uint64\"}},\"randao_mixes\":{\"type\":\"array\",\"items\":{\"type\":\"string\",\"description\":\"Bytes32 hexadecimal\",\"format\":\"byte\"}},\"slashings\":{\"type\":\"array\",\"items\":{\"type\":\"string\",\"format\":\"uint64\"}},\"previous_epoch_attestations\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/components/schemas/PendingAttestation\"}},\"current_epoch_attestations\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/components/schemas/PendingAttestation\"}},\"justification_bits\":{\"type\":\"string\",\"description\":\"SSZ hexadecimal\",\"format\":\"byte\"},\"previous_justified_checkpoint\":{\"$ref\":\"#/components/schemas/Checkpoint\"},\"current_justified_checkpoint\":{\"$ref\":\"#/components/schemas/Checkpoint\"},\"finalized_checkpoint\":{\"$ref\":\"#/components/schemas/Checkpoint\"}}},\"Fork\":{\"type\":\"object\",\"properties\":{\"previous_version\":{\"type\":\"string\",\"description\":\"Bytes4 hexadecimal\",\"format\":\"byte\"},\"current_version\":{\"type\":\"string\",\"description\":\"Bytes4 hexadecimal\",\"format\":\"byte\"},\"epoch\":{\"type\":\"string\",\"format\":\"uint64\"}}},\"PendingAttestation\":{\"type\":\"object\",\"properties\":{\"aggregation_bits\":{\"type\":\"string\",\"description\":\"SSZ hexadecimal\",\"format\":\"byte\"},\"data\":{\"$ref\":\"#/components/schemas/AttestationData\"},\"inclusion_delay\":{\"type\":\"string\",\"format\":\"uint64\"},\"proposer_index\":{\"type\":\"string\",\"format\":\"uint64\"}}},\"Validator\":{\"type\":\"object\",\"properties\":{\"pubkey\":{\"type\":\"string\",\"description\":\"Bytes48 hexadecimal\",\"format\":\"byte\"},\"withdrawal_credentials\":{\"type\":\"string\",\"description\":\"Bytes32 hexadecimal\",\"format\":\"byte\"},\"effective_balance\":{\"type\":\"string\",\"format\":\"uint64\"},\"slashed\":{\"type\":\"boolean\"},\"activation_eligibility_epoch\":{\"type\":\"string\",\"format\":\"uint64\"},\"activation_epoch\":{\"type\":\"string\",\"format\":\"uint64\"},\"exit_epoch\":{\"type\":\"string\",\"format\":\"uint64\"},\"withdrawable_epoch\":{\"type\":\"string\",\"format\":\"uint64\"}}},\"ValidatorsRequest\":{\"required\":[\"pubkeys\"],\"type\":\"object\",\"properties\":{\"epoch\":{\"type\":\"string\",\"format\":\"uint64\"},\"pubkeys\":{\"type\":\"array\",\"items\":{\"type\":\"string\",\"description\":\"Bytes48 hexadecimal\",\"format\":\"byte\"}}}},\"ValidatorWithIndex\":{\"type\":\"object\",\"properties\":{\"pubkey\":{\"type\":\"string\",\"description\":\"Bytes48 hexadecimal\",\"format\":\"byte\"},\"validator_index\":{\"type\":\"integer\",\"format\":\"int32\"},\"balance\":{\"type\":\"string\",\"format\":\"uint64\"},\"validator\":{\"$ref\":\"#/components/schemas/Validator\"}}},\"SyncStatus\":{\"type\":\"object\",\"properties\":{\"startingSlot\":{\"type\":\"string\",\"format\":\"uint64\"},\"currentSlot\":{\"type\":\"string\",\"format\":\"uint64\"},\"highestSlot\":{\"type\":\"string\",\"format\":\"uint64\"}}},\"SyncingResponse\":{\"type\":\"object\",\"properties\":{\"is_syncing\":{\"type\":\"boolean\"},\"sync_status\":{\"$ref\":\"#/components/schemas/SyncStatus\"}}},\"BeaconValidators\":{\"type\":\"object\",\"properties\":{\"validators\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/components/schemas/ValidatorWithIndex\"}},\"total_size\":{\"type\":\"integer\",\"format\":\"int64\"},\"next_page_token\":{\"type\":\"integer\",\"format\":\"int32\"}}},\"ValidatorDuties\":{\"type\":\"object\",\"properties\":{\"validator_pubkey\":{\"type\":\"string\",\"description\":\"Bytes48 hexadecimal\",\"format\":\"byte\"},\"aggregator_modulo\":{\"type\":\"integer\",\"format\":\"int32\"},\"validator_index\":{\"type\":\"integer\",\"format\":\"int32\"},\"attestation_committee_index\":{\"type\":\"integer\",\"format\":\"int32\"},\"attestation_committee_position\":{\"type\":\"integer\",\"format\":\"int32\"},\"block_proposal_slots\":{\"type\":\"array\",\"items\":{\"type\":\"string\",\"format\":\"uint64\"}},\"attestation_slot\":{\"type\":\"string\",\"format\":\"uint64\"}}}}}}", "originalCommit": "e531a83e9be98a0a07e9fe2f982f337503894bc6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzgyODgzNQ==", "url": "https://github.com/ConsenSys/teku/pull/1815#discussion_r427828835", "bodyText": "this file is part of the docs folder, so here it was updated by running the branch CI (see commit) and left here on purpose to show it works.", "author": "NicolasMassart", "createdAt": "2020-05-20T08:24:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzY0NjczNQ=="}], "type": "inlineReview"}, {"oid": "ace6af23efb38180724568725ecbcc9443d4f702", "url": "https://github.com/ConsenSys/teku/commit/ace6af23efb38180724568725ecbcc9443d4f702", "message": "change according to comment\n\nand tested locally first", "committedDate": "2020-05-20T08:19:11Z", "type": "commit"}, {"oid": "19c4bbd26b54f96f45be6619bf79e9981606787f", "url": "https://github.com/ConsenSys/teku/commit/19c4bbd26b54f96f45be6619bf79e9981606787f", "message": "Merge branch 'master' into 1507_add_ci_for_api_doc", "committedDate": "2020-05-20T08:19:30Z", "type": "commit"}, {"oid": "ea1b5f6a04f672cf0cf951505b6a2747dcc0e9ff", "url": "https://github.com/ConsenSys/teku/commit/ea1b5f6a04f672cf0cf951505b6a2747dcc0e9ff", "message": "Automated update of JSON specs and version files\n\n[skip ci] Circle CI build 24441, see https://circleci.com/gh/PegaSysEng/teku/24441\n\nBranch: 1507_add_ci_for_api_doc, commit: 19c4bbd26b54f96f45be6619bf79e9981606787f, tag:none", "committedDate": "2020-05-20T08:25:35Z", "type": "commit"}, {"oid": "fb549b879cc70ddd01997692dad8035f844c9cc1", "url": "https://github.com/ConsenSys/teku/commit/fb549b879cc70ddd01997692dad8035f844c9cc1", "message": "activating jobs for real on master only", "committedDate": "2020-05-20T08:42:27Z", "type": "commit"}]}