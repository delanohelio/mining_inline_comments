{"pr_number": 1419, "pr_title": "Feature/cli args", "pr_createdAt": "2020-03-19T10:06:50Z", "pr_url": "https://github.com/ConsenSys/teku/pull/1419", "timeline": [{"oid": "661e090ee22348ccae522c6db263a2d20bcbc788", "url": "https://github.com/ConsenSys/teku/commit/661e090ee22348ccae522c6db263a2d20bcbc788", "message": "break\n\npost-rebase\n\nsomewhat useable", "committedDate": "2020-03-19T17:59:56Z", "type": "forcePushed"}, {"oid": "190368d0c51c6390d43c78d0f5012ed30d79e5b1", "url": "https://github.com/ConsenSys/teku/commit/190368d0c51c6390d43c78d0f5012ed30d79e5b1", "message": "fix param labels and description", "committedDate": "2020-03-20T10:47:44Z", "type": "forcePushed"}, {"oid": "2d8895e2e856b62b450275bb3e97b1c2ab9a1ed9", "url": "https://github.com/ConsenSys/teku/commit/2d8895e2e856b62b450275bb3e97b1c2ab9a1ed9", "message": "rename configuration arguments and implement CLI options", "committedDate": "2020-03-20T13:17:27Z", "type": "forcePushed"}, {"oid": "c45bf0e76bc76a0142cb8b1829fbc2479415f9f1", "url": "https://github.com/ConsenSys/teku/commit/c45bf0e76bc76a0142cb8b1829fbc2479415f9f1", "message": "rename configuration arguments and implement CLI options", "committedDate": "2020-03-23T10:57:28Z", "type": "forcePushed"}, {"oid": "4352920dad4e9dc4987d844796d96cef284701ee", "url": "https://github.com/ConsenSys/teku/commit/4352920dad4e9dc4987d844796d96cef284701ee", "message": "break", "committedDate": "2020-03-23T15:53:17Z", "type": "forcePushed"}, {"oid": "06547b18858bf148066337194ec10ea04adec570", "url": "https://github.com/ConsenSys/teku/commit/06547b18858bf148066337194ec10ea04adec570", "message": "break", "committedDate": "2020-03-23T16:06:40Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjUxNTY1NQ==", "url": "https://github.com/ConsenSys/teku/pull/1419#discussion_r396515655", "bodyText": "I think we just want a single prefix \"TEKU_\"?", "author": "mbaxter", "createdAt": "2020-03-23T14:59:28Z", "path": "artemis/src/main/java/tech/pegasys/artemis/cli/util/EnvironmentVariableDefaultProvider.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.cli.util;\n+\n+import java.util.Arrays;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Stream;\n+import picocli.CommandLine;\n+\n+public class EnvironmentVariableDefaultProvider implements CommandLine.IDefaultValueProvider {\n+  private static final String ENV_VAR_PREFIX = \"BESU_\";\n+  private static final String LEGACY_ENV_VAR_PREFIX = \"PANTHEON_\";", "originalCommit": "c45bf0e76bc76a0142cb8b1829fbc2479415f9f1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjYwMzEzMg==", "url": "https://github.com/ConsenSys/teku/pull/1419#discussion_r396603132", "bodyText": "Class has been removed - parsing env vars is for a follow up PR.", "author": "iikirilov", "createdAt": "2020-03-23T16:54:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjUxNTY1NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjUxOTEzOA==", "url": "https://github.com/ConsenSys/teku/pull/1419#discussion_r396519138", "bodyText": "(style nit) Suggest returning early if we've already parsed the result:\nif (result != null) {\n  return;\n}", "author": "mbaxter", "createdAt": "2020-03-23T15:04:02Z", "path": "artemis/src/main/java/tech/pegasys/artemis/cli/util/TomlConfigFileDefaultProvider.java", "diffHunk": "@@ -0,0 +1,164 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.cli.util;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.math.BigInteger;\n+import java.util.Arrays;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import org.apache.tuweni.toml.Toml;\n+import org.apache.tuweni.toml.TomlParseError;\n+import org.apache.tuweni.toml.TomlParseResult;\n+import picocli.CommandLine;\n+import picocli.CommandLine.IDefaultValueProvider;\n+import picocli.CommandLine.Model.ArgSpec;\n+import picocli.CommandLine.Model.CommandSpec;\n+import picocli.CommandLine.Model.OptionSpec;\n+import picocli.CommandLine.ParameterException;\n+\n+public class TomlConfigFileDefaultProvider implements IDefaultValueProvider {\n+\n+  private final CommandLine commandLine;\n+  private final File configFile;\n+  private TomlParseResult result;\n+\n+  public TomlConfigFileDefaultProvider(final CommandLine commandLine, final File configFile) {\n+    this.commandLine = commandLine;\n+    this.configFile = configFile;\n+  }\n+\n+  @Override\n+  public String defaultValue(final ArgSpec argSpec) {\n+    loadConfigurationFromFile();\n+\n+    // only options can be used in config because a name is needed for the key\n+    // so we skip default for positional params\n+    return argSpec.isOption() ? getConfigurationValue(((OptionSpec) argSpec)) : null;\n+  }\n+\n+  private String getConfigurationValue(final OptionSpec optionSpec) {\n+    final String defaultValue;\n+    // Convert config values to the right string representation for default string value\n+    if (optionSpec.type().equals(Boolean.class) || optionSpec.type().equals(boolean.class)) {\n+      defaultValue = getBooleanEntryAsString(optionSpec);\n+    } else if (optionSpec.isMultiValue()) {\n+      defaultValue = getListEntryAsString(optionSpec);\n+    } else if (optionSpec.type().equals(Integer.class) || optionSpec.type().equals(int.class)) {\n+      defaultValue = getIntegerEntryAsString(optionSpec);\n+    } else if (optionSpec.type().equals(BigInteger.class)) {\n+      defaultValue = getIntegerEntryAsString(optionSpec);\n+    } else { // else will be treated as String\n+      defaultValue = getEntryAsString(optionSpec);\n+    }\n+    return defaultValue;\n+  }\n+\n+  private String getEntryAsString(final OptionSpec spec) {\n+    // returns the string value of the config line corresponding to the option in toml file\n+    // or null if not present in the config\n+    return getKeyName(spec).map(result::getString).orElse(null);\n+  }\n+\n+  private Optional<String> getKeyName(final OptionSpec spec) {\n+    // If any of the names of the option are used as key in the toml results\n+    // then returns the value of first one.\n+    return Arrays.stream(spec.names())\n+        // remove leading dashes on option name as we can have \"--\" or \"-\" options\n+        .map(name -> name.replaceFirst(\"^-+\", \"\"))\n+        .filter(result::contains)\n+        .findFirst();\n+  }\n+\n+  private String getListEntryAsString(final OptionSpec spec) {\n+    // returns the string representation of the array value of the config line in CLI format\n+    // corresponding to the option in toml file\n+    // or null if not present in the config\n+    return getKeyName(spec)\n+        .map(result::getArray)\n+        .map(\n+            tomlArray ->\n+                tomlArray.toList().stream().map(Object::toString).collect(Collectors.joining(\",\")))\n+        .orElse(null);\n+  }\n+\n+  private String getBooleanEntryAsString(final OptionSpec spec) {\n+    // return the string representation of the boolean value corresponding to the option in toml\n+    // file\n+    // or null if not present in the config\n+    return getKeyName(spec).map(result::getBoolean).map(Object::toString).orElse(null);\n+  }\n+\n+  private String getIntegerEntryAsString(final OptionSpec spec) {\n+    // return the string representation of the integer value corresponding to the option in toml\n+    // file\n+    // or null if not present in the config\n+    return getKeyName(spec).map(result::get).map(String::valueOf).orElse(null);\n+  }\n+\n+  private void checkConfigurationValidity() {\n+    if (result == null || result.isEmpty())\n+      throw new ParameterException(\n+          commandLine, String.format(\"Unable to read TOML configuration file %s\", configFile));\n+  }\n+\n+  private void loadConfigurationFromFile() {\n+\n+    if (result == null) {", "originalCommit": "c45bf0e76bc76a0142cb8b1829fbc2479415f9f1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjYwMjczOQ==", "url": "https://github.com/ConsenSys/teku/pull/1419#discussion_r396602739", "bodyText": "done", "author": "iikirilov", "createdAt": "2020-03-23T16:53:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjUxOTEzOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjUzMDYwMg==", "url": "https://github.com/ConsenSys/teku/pull/1419#discussion_r396530602", "bodyText": "Looks like this method name is off.  Also wondering if we can make this package-private?  Might need to move the corresponding test:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public ArtemisConfiguration getArtemisConfigurationDeprecated() {\n          \n          \n            \n              ArtemisConfiguration getArtemisConfiguration() {", "author": "mbaxter", "createdAt": "2020-03-23T15:19:20Z", "path": "artemis/src/main/java/tech/pegasys/artemis/cli/BeaconNodeCommand.java", "diffHunk": "@@ -0,0 +1,491 @@\n+/*\n+ * Copyright 2019 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.cli;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.concurrent.Callable;\n+import org.apache.logging.log4j.Level;\n+import picocli.CommandLine;\n+import picocli.CommandLine.Command;\n+import picocli.CommandLine.Option;\n+import tech.pegasys.artemis.BeaconNode;\n+import tech.pegasys.artemis.cli.subcommand.DepositCommand;\n+import tech.pegasys.artemis.cli.subcommand.GenesisCommand;\n+import tech.pegasys.artemis.cli.subcommand.PeerCommand;\n+import tech.pegasys.artemis.cli.subcommand.TransitionCommand;\n+import tech.pegasys.artemis.cli.util.CascadingDefaultProvider;\n+import tech.pegasys.artemis.cli.util.EnvironmentVariableDefaultProvider;\n+import tech.pegasys.artemis.cli.util.TomlConfigFileDefaultProvider;\n+import tech.pegasys.artemis.storage.DatabaseStorageException;\n+import tech.pegasys.artemis.util.cli.LogTypeConverter;\n+import tech.pegasys.artemis.util.cli.VersionProvider;\n+import tech.pegasys.artemis.util.config.ArtemisConfiguration;\n+import tech.pegasys.teku.logging.LoggingConfigurator;\n+\n+@SuppressWarnings(\"unused\")\n+@Command(\n+    name = \"teku\",\n+    subcommands = {\n+      TransitionCommand.class,\n+      PeerCommand.class,\n+      DepositCommand.class,\n+      GenesisCommand.class\n+    },\n+    abbreviateSynopsis = true,\n+    description = \"Run the Teku beacon chain client and validator\",\n+    mixinStandardHelpOptions = true,\n+    versionProvider = VersionProvider.class,\n+    synopsisHeading = \"%n\",\n+    descriptionHeading = \"%nDescription:%n%n\",\n+    optionListHeading = \"%nOptions:%n\",\n+    footerHeading = \"%n\",\n+    footer = \"Teku is licensed under the Apache License 2.0\")\n+public class BeaconNodeCommand implements Callable<Integer>, OptionNames, DefaultOptionValues {\n+\n+  @Option(\n+      names = {\"-l\", \"--logging\"},\n+      converter = LogTypeConverter.class,\n+      paramLabel = \"<LOG VERBOSITY LEVEL>\",\n+      description =\n+          \"Logging verbosity levels: OFF, FATAL, WARN, INFO, DEBUG, TRACE, ALL (default: INFO).\",\n+      arity = \"1\")\n+  private Level logLevel;\n+\n+  @Option(\n+      names = {\"-c\", CONFIG_FILE_OPTION_NAME},\n+      paramLabel = \"<FILENAME>\",\n+      description = \"Path/filename of the config file\",\n+      arity = \"1\")\n+  private String configFile = DEFAULT_CONFIG_FILE;\n+\n+  // Network\n+  @Option(\n+      names = {\"-n\", NETWORK_OPTION_NAME},\n+      paramLabel = \"<NETWORK>\",\n+      description = \"Represents which network to use\",\n+      arity = \"1\")\n+  private String network = DEFAULT_NETWORK;\n+\n+  // P2P\n+  @Option(\n+      names = {P2P_ENABLED_OPTION_NAME},\n+      paramLabel = \"<BOOLEAN>\",\n+      description = \"Enables peer to peer\",\n+      arity = \"1\")\n+  private boolean p2pEnabled = DEFAULT_P2P_ENABLED;\n+\n+  @Option(\n+      names = {P2P_INTERFACE_OPTION_NAME},\n+      paramLabel = \"<NETWORK>\",\n+      description = \"Peer to peer network interface\",\n+      arity = \"1\")\n+  private String p2pInterface = DEFAULT_P2P_INTERFACE;\n+\n+  @Option(\n+      names = {P2P_PORT_OPTION_NAME},\n+      paramLabel = \"<INTEGER>\",\n+      description = \"Peer to peer port\",\n+      arity = \"1\")\n+  private int p2pPort = DEFAULT_P2P_PORT;\n+\n+  @Option(\n+      names = {P2P_DISCOVERY_ENABLED_OPTION_NAME},\n+      paramLabel = \"<BOOLEAN>\",\n+      description = \"Enables discv5 discovery\",\n+      arity = \"1\")\n+  private boolean p2pDiscoveryEnabled = DEFAULT_P2P_DISCOVERY_ENABLED;\n+\n+  @Option(\n+      names = {P2P_DISCOVERY_BOOTNODES_OPTION_NAME},\n+      paramLabel = \"<enode://id@host:port>\",\n+      description = \"ENR of the bootnode\",\n+      split = \",\",\n+      arity = \"0..*\")\n+  private List<String> p2pDiscoveryBootnodes = DEFAULT_P2P_DISCOVERY_BOOTNODES;\n+\n+  @Option(\n+      names = {P2P_ADVERTISED_IP_OPTION_NAME},\n+      paramLabel = \"<NETWORK>\",\n+      description = \"Peer to peer advertised ip\",\n+      arity = \"1\")\n+  private String p2pAdvertisedIp = DEFAULT_P2P_ADVERTISED_IP;\n+\n+  @Option(\n+      names = {P2P_ADVERTISED_PORT_OPTION_NAME},\n+      paramLabel = \"<INTEGER>\",\n+      description = \"Peer to peer advertised port\",\n+      arity = \"1\")\n+  private int p2pAdvertisedPort = DEFAULT_P2P_ADVERTISED_PORT;\n+\n+  @Option(\n+      names = {P2P_PRIVATE_KEY_FILE_OPTION_NAME},\n+      paramLabel = \"<FILENAME>\",\n+      description = \"This node's private key file\",\n+      arity = \"1\")\n+  private String p2pPrivateKeyFile = DEFAULT_P2P_PRIVATE_KEY_FILE;\n+\n+  @Option(\n+      names = {P2P_PEER_LOWER_BOUND_OPTION_NAME},\n+      paramLabel = \"<INTEGER>\",\n+      description = \"Lower bound on the target number of peers\",\n+      arity = \"1\")\n+  private int p2pLowerBound = DEFAULT_P2P_PEER_LOWER_BOUND;\n+\n+  @Option(\n+      names = {P2P_PEER_UPPER_BOUND_OPTION_NAME},\n+      paramLabel = \"<INTEGER>\",\n+      description = \"Upper bound on the target number of peers\",\n+      arity = \"1\")\n+  private int p2pUpperBound = DEFAULT_P2P_PEER_UPPER_BOUND;\n+\n+  // Interop\n+\n+  @Option(\n+      names = {X_INTEROP_GENESIS_TIME_OPTION_NAME},\n+      paramLabel = \"<INTEGER>\",\n+      description = \"Time of mocked genesis\",\n+      arity = \"1\")\n+  private Integer xInteropGenesisTime = DEFAULT_X_INTEROP_GENESIS_TIME;\n+\n+  @Option(\n+      names = {X_INTEROP_OWNED_VALIDATOR_START_INDEX_OPTION_NAME},\n+      paramLabel = \"<INTEGER>\",\n+      description = \"Index of first validator owned by this node\",\n+      arity = \"1\")\n+  private int xInteropOwnerValidatorStartIndex = DEFAULT_X_INTEROP_OWNED_VALIDATOR_START_INDEX;\n+\n+  @Option(\n+      names = {X_INTEROP_OWNED_VALIDATOR_COUNT_OPTION_NAME},\n+      paramLabel = \"<INTEGER>\",\n+      description = \"Number of validators owned by this node\",\n+      arity = \"1\")\n+  private int xInteropOwnerValidatorCount = DEFAULT_X_INTEROP_OWNED_VALIDATOR_COUNT;\n+\n+  @Option(\n+      names = {X_INTEROP_START_STATE_OPTION_NAME},\n+      paramLabel = \"<STRING>\",\n+      description = \"Initial BeaconState to load\",\n+      arity = \"1\")\n+  private String xInteropStartState = DEFAULT_X_INTEROP_START_STATE;\n+\n+  @Option(\n+      names = {X_INTEROP_NUMBER_OF_VALIDATORS_OPTION_NAME},\n+      paramLabel = \"<INTEGER>\",\n+      description = \"Represents the total number of validators in the network\")\n+  private int xInteropNumberOfValidators = DEFAULT_X_INTEROP_NUMBER_OF_VALIDATORS;\n+\n+  @Option(\n+      names = {X_INTEROP_ENABLED_OPTION_NAME},\n+      paramLabel = \"<BOOLEAN>\",\n+      description = \"Enables developer options for testing\",\n+      arity = \"1\")\n+  private boolean xInteropEnabled = DEFAULT_X_INTEROP_ENABLED;\n+\n+  // Validator\n+\n+  @Option(\n+      names = {VALIDATORS_KEY_FILE_OPTION_NAME},\n+      paramLabel = \"<FILENAME>\",\n+      description = \"The file to load validator keys from\",\n+      arity = \"1\")\n+  private String validatorsKeyFile = DEFAULT_VALIDATORS_KEY_FILE;\n+\n+  @Option(\n+      names = {VALIDATORS_KEYSTORE_FILES_OPTION_NAME},\n+      paramLabel = \"<FILENAME>\",\n+      description = \"The list of encrypted keystore files to load the validator keys from\",\n+      split = \",\",\n+      arity = \"0..*\")\n+  private List<String> validatorsKeystoreFiles = DEFAULT_VALIDATORS_KEYSTORE_FILES;\n+\n+  @Option(\n+      names = {VALIDATORS_KEYSTORE_PASSWORD_FILES_OPTION_NAME},\n+      paramLabel = \"<FILENAME>\",\n+      description = \"The list of password files to decrypt the validator keystore files\",\n+      split = \",\",\n+      arity = \"0..*\")\n+  private List<String> validatorsKeystorePasswordFiles = DEFAULT_VALIDATORS_KEYSTORE_PASSWORD_FILES;\n+\n+  // Deposit\n+\n+  @Option(\n+      names = {ETH1_DEPOSIT_CONTRACT_ADDRESS_OPTION_NAME},\n+      paramLabel = \"<ADDRESS>\",\n+      description = \"Contract address for the deposit contract\",\n+      arity = \"1\")\n+  private String eth1DepositContractAddress = DEFAULT_ETH1_DEPOSIT_CONTRACT_ADDRESS;\n+\n+  @Option(\n+      names = {ETH1_ENDPOINT_OPTION_NAME},\n+      paramLabel = \"<NETWORK>\",\n+      description = \"URL for Eth 1.0 node\",\n+      arity = \"1\")\n+  private String eth1Endpoint = DEFAULT_ETH1_ENDPOINT;\n+\n+  // Logging\n+\n+  @Option(\n+      names = {LOG_COLOUR_ENABLED_OPTION_NAME},\n+      paramLabel = \"<BOOLEAN>\",\n+      description = \"Whether Status and Event log messages include a console color display code\",\n+      arity = \"1\")\n+  private boolean logColourEnabled = DEFAULT_LOG_COLOUR_ENABLED;\n+\n+  @Option(\n+      names = {LOG_INCLUDE_EVENTS_ENABLED_OPTION_NAME},\n+      paramLabel = \"<BOOLEAN>\",\n+      description =\n+          \"Whether the frequent update events are logged (e.g. every slot event, with validators and attestations))\",\n+      arity = \"1\")\n+  private boolean logIncludeEventsEnabled = DEFAULT_LOG_INCLUDE_EVENTS_ENABLED;\n+\n+  @Option(\n+      names = {LOG_DESTINATION_OPTION_NAME},\n+      paramLabel = \"<LOG_DESTINATION>\",\n+      description = \"Whether all logs go only to the console, only to the log file, or both\",\n+      arity = \"1\")\n+  private String logDestination = DEFAULT_LOG_DESTINATION;\n+\n+  @Option(\n+      names = {LOG_FILE_OPTION_NAME},\n+      paramLabel = \"<FILENAME>\",\n+      description = \"Path containing the location (relative or absolute) and the log filename.\",\n+      arity = \"1\")\n+  private String logFile = DEFAULT_LOG_FILE;\n+\n+  @Option(\n+      names = {LOG_FILE_NAME_PATTERN_OPTION_NAME},\n+      paramLabel = \"<REGEX>\",\n+      description = \"Pattern for the filename to apply to rolled over logs files.\",\n+      arity = \"1\")\n+  private String logFileNamePattern = DEFAULT_LOG_FILE_NAME_PATTERN;\n+\n+  // Output\n+\n+  @Option(\n+      names = {X_TRANSACTION_RECORD_DIRECTORY_OPTION_NAME},\n+      paramLabel = \"<FILENAME>\",\n+      description = \"Directory to record transition pre and post states\",\n+      arity = \"1\")\n+  private String xTransactionRecordDirectory = DEFAULT_X_TRANSACTION_RECORD_DIRECTORY;\n+\n+  // Metrics\n+\n+  @Option(\n+      names = {METRICS_ENABLED_OPTION_NAME},\n+      paramLabel = \"<BOOLEAN>\",\n+      description = \"Enables metrics collection via Prometheus\",\n+      arity = \"1\")\n+  private boolean metricsEnabled = DEFAULT_METRICS_ENABLED;\n+\n+  @Option(\n+      names = {METRICS_PORT_OPTION_NAME},\n+      paramLabel = \"<INTEGER>\",\n+      description = \"Metrics port to expose metrics for Prometheus\",\n+      arity = \"1\")\n+  private int metricsPort = DEFAULT_METRICS_PORT;\n+\n+  @Option(\n+      names = {METRICS_INTERFACE_OPTION_NAME},\n+      paramLabel = \"<NETWORK>\",\n+      description = \"Metrics network interface to expose metrics for Prometheus\",\n+      arity = \"1\")\n+  private String metricsInterface = DEFAULT_METRICS_INTERFACE;\n+\n+  @Option(\n+      names = {METRICS_CATEGORIES_OPTION_NAME},\n+      paramLabel = \"<METRICS_CATEGORY>\",\n+      description = \"Metric categories to enable\",\n+      split = \",\",\n+      arity = \"0..*\")\n+  private ArrayList<String> metricsCategories = DEFAULT_METRICS_CATEGORIES;\n+\n+  // Database\n+\n+  @Option(\n+      names = {DATA_PATH_OPTION_NAME},\n+      paramLabel = \"<FILENAME>\",\n+      description = \"Path to output data files\",\n+      arity = \"1\")\n+  private String dataPath = DEFAULT_DATA_PATH;\n+\n+  @Option(\n+      names = {DATA_STORAGE_MODE_OPTION_NAME},\n+      paramLabel = \"<STORAGE_MODE>\",\n+      description =\n+          \"Sets the strategy for handling historical chain state.  Supported values include: 'prune', and 'archive'\",\n+      arity = \"1\")\n+  private String dataStorageMode = DEFAULT_DATA_STORAGE_MODE;\n+\n+  // Beacon REST API\n+\n+  @Option(\n+      names = {REST_API_PORT_OPTION_NAME},\n+      paramLabel = \"<INTEGER>\",\n+      description = \"Port number of Beacon Rest API\",\n+      arity = \"1\")\n+  private int restApiPort = DEFAULT_REST_API_PORT;\n+\n+  @Option(\n+      names = {REST_API_DOCS_ENABLED_OPTION_NAME},\n+      paramLabel = \"<BOOLEAN>\",\n+      description = \"Enable swagger-docs and swagger-ui endpoints\",\n+      arity = \"1\")\n+  private boolean restApiDocsEnabled = DEFAULT_REST_API_DOCS_ENABLED;\n+\n+  @Option(\n+      names = {REST_API_ENABLED_OPTION_NAME},\n+      paramLabel = \"<BOOLEAN>\",\n+      description = \"Enables Beacon Rest API\",\n+      arity = \"1\")\n+  private boolean restApiEnabled = DEFAULT_REST_API_ENABLED;\n+\n+  @Option(\n+      names = {REST_API_INTERFACE_OPTION_NAME},\n+      paramLabel = \"<NETWORK>\",\n+      description = \"Interface of Beacon Rest API\",\n+      arity = \"1\")\n+  private String restApiInterface = DEFAULT_REST_API_INTERFACE;\n+\n+  private ArtemisConfiguration artemisConfiguration;\n+  private BeaconNode node;\n+\n+  public String getConfigFile() {\n+    return configFile;\n+  }\n+\n+  public void parse(final String[] args) {\n+    final CommandLine commandLine = new CommandLine(this).setCaseInsensitiveEnumValuesAllowed(true);\n+    final EnvironmentVariableDefaultProvider environmentVariableDefaultProvider =\n+        new EnvironmentVariableDefaultProvider(System.getenv());\n+    final CommandLine.IDefaultValueProvider defaultValueProvider;\n+    final Optional<File> maybeConfigFile = maybeFindConfigFile(commandLine, args);\n+    if (maybeConfigFile.isPresent()) {\n+      defaultValueProvider =\n+          new CascadingDefaultProvider(\n+              environmentVariableDefaultProvider,\n+              new TomlConfigFileDefaultProvider(commandLine, maybeConfigFile.get()));\n+    } else {\n+      defaultValueProvider = environmentVariableDefaultProvider;\n+    }\n+    commandLine.setDefaultValueProvider(defaultValueProvider).execute(args);\n+  }\n+\n+  @Override\n+  public Integer call() {\n+    try {\n+      setLogLevels();\n+      artemisConfiguration = artemisConfiguration();\n+      node = new BeaconNode(artemisConfiguration);\n+      node.start();\n+      // Detect SIGTERM\n+      Runtime.getRuntime()\n+          .addShutdownHook(\n+              new Thread(\n+                  () -> {\n+                    System.out.println(\"Teku is shutting down\");\n+                    node.stop();\n+                  }));\n+      return 0;\n+    } catch (DatabaseStorageException ex) {\n+      System.err.println(ex.getMessage());\n+      System.exit(1);\n+    } catch (Throwable t) {\n+      System.err.println(\"Teku failed to start.\");\n+      t.printStackTrace();\n+      System.exit(1);\n+    }\n+    return 1;\n+  }\n+\n+  @VisibleForTesting\n+  public ArtemisConfiguration getArtemisConfigurationDeprecated() {", "originalCommit": "c45bf0e76bc76a0142cb8b1829fbc2479415f9f1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjUzNTEzOQ==", "url": "https://github.com/ConsenSys/teku/pull/1419#discussion_r396535139", "bodyText": "Looks like we can package up this logic into a helper method (createConfigFile()?) that returns the file path.", "author": "mbaxter", "createdAt": "2020-03-23T15:24:59Z", "path": "artemis/src/test/java/tech/pegasys/artemis/BeaconNodeCommandTest.java", "diffHunk": "@@ -15,82 +15,162 @@\n \n import static java.nio.charset.StandardCharsets.UTF_8;\n import static org.assertj.core.api.Assertions.assertThat;\n+import static tech.pegasys.artemis.cli.OptionNames.CONFIG_FILE_OPTION_NAME;\n \n import com.google.common.io.Resources;\n import java.io.IOException;\n import java.net.URL;\n-import java.nio.file.Files;\n import java.nio.file.Path;\n import java.util.Arrays;\n import java.util.Collections;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n-import picocli.CommandLine;\n+import org.junit.jupiter.api.io.TempDir;\n+import tech.pegasys.artemis.cli.BeaconNodeCommand;\n import tech.pegasys.artemis.util.config.ArtemisConfiguration;\n+import tech.pegasys.artemis.util.config.ArtemisConfigurationBuilder;\n \n public class BeaconNodeCommandTest {\n \n+  private BeaconNodeCommand beaconNodeCommand;\n+  @TempDir Path dataPath;\n+\n+  @BeforeEach\n+  void setUp() {\n+    beaconNodeCommand = new BeaconNodeCommand();\n+  }\n+\n+  @AfterEach\n+  void tearDown() {\n+    beaconNodeCommand.stop();\n+  }\n+\n+  @Test\n+  public void overrideConfigFileValuesIfKeyIsPresentInCLIOptions() throws IOException {\n+    final URL configFile = this.getClass().getResource(\"/complete_config.toml\");\n+    final String updatedConfig =\n+        Resources.toString(configFile, UTF_8)\n+            .replace(\"data-path=\\\".\\\"\", \"data-path=\\\"\" + dataPath.toString() + \"\\\"\");\n+    final Path toml = createTempFile(\"toml\", updatedConfig.getBytes(UTF_8));", "originalCommit": "c45bf0e76bc76a0142cb8b1829fbc2479415f9f1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjYwODAwNQ==", "url": "https://github.com/ConsenSys/teku/pull/1419#discussion_r396608005", "bodyText": "done", "author": "iikirilov", "createdAt": "2020-03-23T17:01:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjUzNTEzOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjU0Mzg0NA==", "url": "https://github.com/ConsenSys/teku/pull/1419#discussion_r396543844", "bodyText": "Do we still need this class?  Looks like if we cut this from TransitionCommand, we can remove it altogether.", "author": "mbaxter", "createdAt": "2020-03-23T15:36:15Z", "path": "util/src/main/java/tech/pegasys/artemis/util/config/ArtemisConfigurationDeprecated.java", "diffHunk": "@@ -0,0 +1,456 @@\n+/*\n+ * Copyright 2019 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.util.config;\n+\n+import static java.util.Arrays.asList;\n+\n+import com.google.common.base.Strings;\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.apache.tuweni.config.Configuration;\n+import org.apache.tuweni.config.PropertyValidator;\n+import org.apache.tuweni.config.Schema;\n+import org.apache.tuweni.config.SchemaBuilder;\n+\n+/** Configuration of an instance of Artemis. */\n+public class ArtemisConfigurationDeprecated {", "originalCommit": "c45bf0e76bc76a0142cb8b1829fbc2479415f9f1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjU4NDI4Nw==", "url": "https://github.com/ConsenSys/teku/pull/1419#discussion_r396584287", "bodyText": "We do not need this class. This will be removed in a follow-up PR. I will need a bunch of the tests from ArtemisConfigurationDeprecatedTest when I implement some CLI validation logic.", "author": "iikirilov", "createdAt": "2020-03-23T16:28:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjU0Mzg0NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjU0NTkzNw==", "url": "https://github.com/ConsenSys/teku/pull/1419#discussion_r396545937", "bodyText": "Why keep this \"x\" prefix all the way through to ArtemisConfig?  I'd think that only the CLI name would have the prefix and all variables and methods would just be named normally.", "author": "mbaxter", "createdAt": "2020-03-23T15:38:54Z", "path": "artemis/src/main/java/tech/pegasys/artemis/cli/BeaconNodeCommand.java", "diffHunk": "@@ -0,0 +1,491 @@\n+/*\n+ * Copyright 2019 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.cli;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.concurrent.Callable;\n+import org.apache.logging.log4j.Level;\n+import picocli.CommandLine;\n+import picocli.CommandLine.Command;\n+import picocli.CommandLine.Option;\n+import tech.pegasys.artemis.BeaconNode;\n+import tech.pegasys.artemis.cli.subcommand.DepositCommand;\n+import tech.pegasys.artemis.cli.subcommand.GenesisCommand;\n+import tech.pegasys.artemis.cli.subcommand.PeerCommand;\n+import tech.pegasys.artemis.cli.subcommand.TransitionCommand;\n+import tech.pegasys.artemis.cli.util.CascadingDefaultProvider;\n+import tech.pegasys.artemis.cli.util.EnvironmentVariableDefaultProvider;\n+import tech.pegasys.artemis.cli.util.TomlConfigFileDefaultProvider;\n+import tech.pegasys.artemis.storage.DatabaseStorageException;\n+import tech.pegasys.artemis.util.cli.LogTypeConverter;\n+import tech.pegasys.artemis.util.cli.VersionProvider;\n+import tech.pegasys.artemis.util.config.ArtemisConfiguration;\n+import tech.pegasys.teku.logging.LoggingConfigurator;\n+\n+@SuppressWarnings(\"unused\")\n+@Command(\n+    name = \"teku\",\n+    subcommands = {\n+      TransitionCommand.class,\n+      PeerCommand.class,\n+      DepositCommand.class,\n+      GenesisCommand.class\n+    },\n+    abbreviateSynopsis = true,\n+    description = \"Run the Teku beacon chain client and validator\",\n+    mixinStandardHelpOptions = true,\n+    versionProvider = VersionProvider.class,\n+    synopsisHeading = \"%n\",\n+    descriptionHeading = \"%nDescription:%n%n\",\n+    optionListHeading = \"%nOptions:%n\",\n+    footerHeading = \"%n\",\n+    footer = \"Teku is licensed under the Apache License 2.0\")\n+public class BeaconNodeCommand implements Callable<Integer>, OptionNames, DefaultOptionValues {\n+\n+  @Option(\n+      names = {\"-l\", \"--logging\"},\n+      converter = LogTypeConverter.class,\n+      paramLabel = \"<LOG VERBOSITY LEVEL>\",\n+      description =\n+          \"Logging verbosity levels: OFF, FATAL, WARN, INFO, DEBUG, TRACE, ALL (default: INFO).\",\n+      arity = \"1\")\n+  private Level logLevel;\n+\n+  @Option(\n+      names = {\"-c\", CONFIG_FILE_OPTION_NAME},\n+      paramLabel = \"<FILENAME>\",\n+      description = \"Path/filename of the config file\",\n+      arity = \"1\")\n+  private String configFile = DEFAULT_CONFIG_FILE;\n+\n+  // Network\n+  @Option(\n+      names = {\"-n\", NETWORK_OPTION_NAME},\n+      paramLabel = \"<NETWORK>\",\n+      description = \"Represents which network to use\",\n+      arity = \"1\")\n+  private String network = DEFAULT_NETWORK;\n+\n+  // P2P\n+  @Option(\n+      names = {P2P_ENABLED_OPTION_NAME},\n+      paramLabel = \"<BOOLEAN>\",\n+      description = \"Enables peer to peer\",\n+      arity = \"1\")\n+  private boolean p2pEnabled = DEFAULT_P2P_ENABLED;\n+\n+  @Option(\n+      names = {P2P_INTERFACE_OPTION_NAME},\n+      paramLabel = \"<NETWORK>\",\n+      description = \"Peer to peer network interface\",\n+      arity = \"1\")\n+  private String p2pInterface = DEFAULT_P2P_INTERFACE;\n+\n+  @Option(\n+      names = {P2P_PORT_OPTION_NAME},\n+      paramLabel = \"<INTEGER>\",\n+      description = \"Peer to peer port\",\n+      arity = \"1\")\n+  private int p2pPort = DEFAULT_P2P_PORT;\n+\n+  @Option(\n+      names = {P2P_DISCOVERY_ENABLED_OPTION_NAME},\n+      paramLabel = \"<BOOLEAN>\",\n+      description = \"Enables discv5 discovery\",\n+      arity = \"1\")\n+  private boolean p2pDiscoveryEnabled = DEFAULT_P2P_DISCOVERY_ENABLED;\n+\n+  @Option(\n+      names = {P2P_DISCOVERY_BOOTNODES_OPTION_NAME},\n+      paramLabel = \"<enode://id@host:port>\",\n+      description = \"ENR of the bootnode\",\n+      split = \",\",\n+      arity = \"0..*\")\n+  private List<String> p2pDiscoveryBootnodes = DEFAULT_P2P_DISCOVERY_BOOTNODES;\n+\n+  @Option(\n+      names = {P2P_ADVERTISED_IP_OPTION_NAME},\n+      paramLabel = \"<NETWORK>\",\n+      description = \"Peer to peer advertised ip\",\n+      arity = \"1\")\n+  private String p2pAdvertisedIp = DEFAULT_P2P_ADVERTISED_IP;\n+\n+  @Option(\n+      names = {P2P_ADVERTISED_PORT_OPTION_NAME},\n+      paramLabel = \"<INTEGER>\",\n+      description = \"Peer to peer advertised port\",\n+      arity = \"1\")\n+  private int p2pAdvertisedPort = DEFAULT_P2P_ADVERTISED_PORT;\n+\n+  @Option(\n+      names = {P2P_PRIVATE_KEY_FILE_OPTION_NAME},\n+      paramLabel = \"<FILENAME>\",\n+      description = \"This node's private key file\",\n+      arity = \"1\")\n+  private String p2pPrivateKeyFile = DEFAULT_P2P_PRIVATE_KEY_FILE;\n+\n+  @Option(\n+      names = {P2P_PEER_LOWER_BOUND_OPTION_NAME},\n+      paramLabel = \"<INTEGER>\",\n+      description = \"Lower bound on the target number of peers\",\n+      arity = \"1\")\n+  private int p2pLowerBound = DEFAULT_P2P_PEER_LOWER_BOUND;\n+\n+  @Option(\n+      names = {P2P_PEER_UPPER_BOUND_OPTION_NAME},\n+      paramLabel = \"<INTEGER>\",\n+      description = \"Upper bound on the target number of peers\",\n+      arity = \"1\")\n+  private int p2pUpperBound = DEFAULT_P2P_PEER_UPPER_BOUND;\n+\n+  // Interop\n+\n+  @Option(\n+      names = {X_INTEROP_GENESIS_TIME_OPTION_NAME},\n+      paramLabel = \"<INTEGER>\",\n+      description = \"Time of mocked genesis\",\n+      arity = \"1\")\n+  private Integer xInteropGenesisTime = DEFAULT_X_INTEROP_GENESIS_TIME;", "originalCommit": "c45bf0e76bc76a0142cb8b1829fbc2479415f9f1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjU4NDI1Nw==", "url": "https://github.com/ConsenSys/teku/pull/1419#discussion_r396584257", "bodyText": "For consistency. I have no preference.", "author": "iikirilov", "createdAt": "2020-03-23T16:28:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjU0NTkzNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzE5NjE5MA==", "url": "https://github.com/ConsenSys/teku/pull/1419#discussion_r397196190", "bodyText": "I'd prefer to just keep the \"x\" in the cli parameter name. I don't think we need to propagate the fact that some CLI option is hidden / experimental all the way through the code.  So, something like:\nString INTEROP_GENESIS_TIME_OPTION_NAME = \"--x-interop-genesis-time\";\n\nwhere we keep the \"x\" just in the string value for the cli argument name.", "author": "mbaxter", "createdAt": "2020-03-24T14:29:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjU0NTkzNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzMyOTM2OQ==", "url": "https://github.com/ConsenSys/teku/pull/1419#discussion_r397329369", "bodyText": "sounds like a plan", "author": "iikirilov", "createdAt": "2020-03-24T17:21:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjU0NTkzNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzMzMzk4MA==", "url": "https://github.com/ConsenSys/teku/pull/1419#discussion_r397333980", "bodyText": "done", "author": "iikirilov", "createdAt": "2020-03-24T17:27:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjU0NTkzNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjU0ODE4OQ==", "url": "https://github.com/ConsenSys/teku/pull/1419#discussion_r396548189", "bodyText": "(suggestion) It would be nice if we could start trying to break up these options topically instead of having them all grouped together in 1 file.  For example, I think we could do something like have a P2POptions class that holds all p2p-related options and is included in the main command as a Mixin.", "author": "mbaxter", "createdAt": "2020-03-23T15:41:50Z", "path": "artemis/src/main/java/tech/pegasys/artemis/cli/BeaconNodeCommand.java", "diffHunk": "@@ -0,0 +1,491 @@\n+/*\n+ * Copyright 2019 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.cli;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.concurrent.Callable;\n+import org.apache.logging.log4j.Level;\n+import picocli.CommandLine;\n+import picocli.CommandLine.Command;\n+import picocli.CommandLine.Option;\n+import tech.pegasys.artemis.BeaconNode;\n+import tech.pegasys.artemis.cli.subcommand.DepositCommand;\n+import tech.pegasys.artemis.cli.subcommand.GenesisCommand;\n+import tech.pegasys.artemis.cli.subcommand.PeerCommand;\n+import tech.pegasys.artemis.cli.subcommand.TransitionCommand;\n+import tech.pegasys.artemis.cli.util.CascadingDefaultProvider;\n+import tech.pegasys.artemis.cli.util.EnvironmentVariableDefaultProvider;\n+import tech.pegasys.artemis.cli.util.TomlConfigFileDefaultProvider;\n+import tech.pegasys.artemis.storage.DatabaseStorageException;\n+import tech.pegasys.artemis.util.cli.LogTypeConverter;\n+import tech.pegasys.artemis.util.cli.VersionProvider;\n+import tech.pegasys.artemis.util.config.ArtemisConfiguration;\n+import tech.pegasys.teku.logging.LoggingConfigurator;\n+\n+@SuppressWarnings(\"unused\")\n+@Command(\n+    name = \"teku\",\n+    subcommands = {\n+      TransitionCommand.class,\n+      PeerCommand.class,\n+      DepositCommand.class,\n+      GenesisCommand.class\n+    },\n+    abbreviateSynopsis = true,\n+    description = \"Run the Teku beacon chain client and validator\",\n+    mixinStandardHelpOptions = true,\n+    versionProvider = VersionProvider.class,\n+    synopsisHeading = \"%n\",\n+    descriptionHeading = \"%nDescription:%n%n\",\n+    optionListHeading = \"%nOptions:%n\",\n+    footerHeading = \"%n\",\n+    footer = \"Teku is licensed under the Apache License 2.0\")\n+public class BeaconNodeCommand implements Callable<Integer>, OptionNames, DefaultOptionValues {\n+\n+  @Option(\n+      names = {\"-l\", \"--logging\"},\n+      converter = LogTypeConverter.class,\n+      paramLabel = \"<LOG VERBOSITY LEVEL>\",\n+      description =\n+          \"Logging verbosity levels: OFF, FATAL, WARN, INFO, DEBUG, TRACE, ALL (default: INFO).\",\n+      arity = \"1\")\n+  private Level logLevel;\n+\n+  @Option(\n+      names = {\"-c\", CONFIG_FILE_OPTION_NAME},\n+      paramLabel = \"<FILENAME>\",\n+      description = \"Path/filename of the config file\",\n+      arity = \"1\")\n+  private String configFile = DEFAULT_CONFIG_FILE;\n+\n+  // Network", "originalCommit": "c45bf0e76bc76a0142cb8b1829fbc2479415f9f1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjU4NDIzMg==", "url": "https://github.com/ConsenSys/teku/pull/1419#discussion_r396584232", "bodyText": "For follow-up PR.", "author": "iikirilov", "createdAt": "2020-03-23T16:28:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjU0ODE4OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjU1MjE0Mw==", "url": "https://github.com/ConsenSys/teku/pull/1419#discussion_r396552143", "bodyText": "Why are we dropping the toml hierarchy?", "author": "mbaxter", "createdAt": "2020-03-23T15:46:49Z", "path": "artemis/src/test/resources/complete_config.toml", "diffHunk": "@@ -1,110 +1,46 @@\n-## CURRENT VALID TOML FILE\n-\n-[node]", "originalCommit": "c45bf0e76bc76a0142cb8b1829fbc2479415f9f1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjU4NDE5Mw==", "url": "https://github.com/ConsenSys/teku/pull/1419#discussion_r396584193", "bodyText": "Most renamed options contain the hierarchy label in them... i.e. port is now p2p-port, metrics-port, rest-api-port i.e. you don't need a hierarchy. Either way, I have no strong opinion here.\nI think the plan is to move to yaml eventually.\n@ajsutton any opinion?", "author": "iikirilov", "createdAt": "2020-03-23T16:28:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjU1MjE0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIwMDI0OA==", "url": "https://github.com/ConsenSys/teku/pull/1419#discussion_r397200248", "bodyText": "Seems like we could keep the hierarchical structure, so that in the toml file, you get the nesting but at the cli level the nesting is flattened so that p2p-port would be written to the toml file as:\n[p2p]\nport = 9000\n\nBut if we're moving away from toml anyway, maybe it doesn't matter.  \ud83e\udd37\u200d\u2640 Just want to make sure we're being intentional with how this is structured.", "author": "mbaxter", "createdAt": "2020-03-24T14:34:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjU1MjE0Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjU2MzUxMw==", "url": "https://github.com/ConsenSys/teku/pull/1419#discussion_r396563513", "bodyText": "(optional) At some point, it would be nice to start breaking up these sets of options into smaller config objects like P2PConfig etc.", "author": "mbaxter", "createdAt": "2020-03-23T16:01:05Z", "path": "util/src/main/java/tech/pegasys/artemis/util/config/ArtemisConfiguration.java", "diffHunk": "@@ -13,401 +13,338 @@\n \n package tech.pegasys.artemis.util.config;\n \n-import static java.util.Arrays.asList;\n-\n-import com.google.common.base.Strings;\n-import java.io.IOException;\n-import java.io.UncheckedIOException;\n import java.nio.file.Path;\n-import java.nio.file.Paths;\n import java.util.ArrayList;\n-import java.util.Collections;\n import java.util.List;\n-import java.util.stream.Collectors;\n import org.apache.commons.lang3.tuple.Pair;\n-import org.apache.tuweni.config.Configuration;\n-import org.apache.tuweni.config.PropertyValidator;\n-import org.apache.tuweni.config.Schema;\n-import org.apache.tuweni.config.SchemaBuilder;\n \n /** Configuration of an instance of Artemis. */\n public class ArtemisConfiguration {\n-\n-  private static final int NO_VALUE = -1;\n-\n-  @SuppressWarnings({\"DoubleBraceInitialization\"})\n-  static final Schema createSchema() {\n-    SchemaBuilder builder =\n-        SchemaBuilder.create()\n-            .addString(\n-                \"node.networkMode\",\n-                \"mock\",\n-                \"represents what network to use\",\n-                PropertyValidator.anyOf(\"mock\", \"jvmlibp2p\"));\n-\n-    builder.addString(\"node.networkInterface\", \"0.0.0.0\", \"Peer to peer network interface\", null);\n-    builder.addInteger(\"node.port\", 9000, \"Peer to peer port\", PropertyValidator.inRange(0, 65535));\n-    builder.addString(\"node.advertisedIp\", \"127.0.0.1\", \"Peer to peer advertised ip\", null);\n-    builder.addInteger(\n-        \"node.advertisedPort\",\n-        NO_VALUE,\n-        \"Peer to peer advertised port\",\n-        PropertyValidator.inRange(0, 65535));\n-    builder.addString(\"node.discovery\", \"\", \"static or discv5\", null);\n-    builder.addInteger(\n-        \"node.targetPeerCountRangeLowerBound\",\n-        20,\n-        \"Lower bound on the target number of peers\",\n-        null);\n-    builder.addInteger(\n-        \"node.targetPeerCountRangeUpperBound\",\n-        30,\n-        \"Upper bound on the target number of peers\",\n-        null);\n-    builder.addListOfString(\"node.bootnodes\", Collections.emptyList(), \"ENR of the bootnode\", null);\n-    builder.addString(\n-        \"validator.validatorsKeyFile\", \"\", \"The file to load validator keys from\", null);\n-    builder.addListOfString(\n-        \"validator.keystoreFiles\",\n-        Collections.emptyList(),\n-        \"The list of encrypted keystore files to load the validator keys from\",\n-        null);\n-    builder.addListOfString(\n-        \"validator.keystorePasswordFiles\",\n-        Collections.emptyList(),\n-        \"The list of password files to decrypt the validator keystore files\",\n-        null);\n-\n-    builder.addInteger(\n-        \"deposit.numValidators\",\n-        64,\n-        \"represents the total number of validators in the network\",\n-        PropertyValidator.inRange(1, 65535));\n-    builder.addString(\"deposit.mode\", \"normal\", \"PoW Deposit Mode\", null);\n-    builder.addString(\"deposit.inputFile\", \"\", \"PoW simulation optional input file\", null);\n-    builder.addString(\"deposit.nodeUrl\", null, \"URL for Eth 1.0 node\", null);\n-    builder.addString(\n-        \"deposit.contractAddr\", null, \"Contract address for the deposit contract\", null);\n-    builder.addListOfString(\"node.peers\", Collections.emptyList(), \"Static peers\", null);\n-    builder.addLong(\n-        \"node.networkID\", 1L, \"The identifier of the network (mainnet, testnet, sidechain)\", null);\n-    builder.addString(\n-        \"node.constants\",\n-        \"minimal\",\n-        \"Determines whether to use minimal or mainnet constants\",\n-        null);\n-\n-    // Interop\n-    builder.addLong(\"interop.genesisTime\", null, \"Time of mocked genesis\", null);\n-    builder.addInteger(\n-        \"interop.ownedValidatorStartIndex\", 0, \"Index of first validator owned by this node\", null);\n-    builder.addInteger(\n-        \"interop.ownedValidatorCount\", 0, \"Number of validators owned by this node\", null);\n-    builder.addString(\"interop.startState\", \"\", \"Initial BeaconState to load\", null);\n-    builder.addString(\"interop.privateKey\", \"\", \"This node's private key\", null);\n-\n-    // Metrics\n-    builder.addBoolean(\"metrics.enabled\", false, \"Enables metrics collection via Prometheus\", null);\n-    builder.addString(\n-        \"metrics.metricsNetworkInterface\",\n-        \"0.0.0.0\",\n-        \"Metrics network interface to expose metrics for Prometheus\",\n-        null);\n-    builder.addInteger(\n-        \"metrics.metricsPort\",\n-        8008,\n-        \"Metrics port to expose metrics for Prometheus\",\n-        PropertyValidator.inRange(0, 65535));\n-    builder.addListOfString(\n-        \"metrics.metricsCategories\",\n-        asList(\"JVM\", \"PROCESS\", \"BEACONCHAIN\", \"EVENTBUS\", \"NETWORK\"),\n-        \"Metric categories to enable\",\n-        null);\n-\n-    // Logging\n-    builder.addBoolean(\n-        \"logging.colorEnabled\",\n-        true,\n-        \"Whether Status and Event log messages include a console color display code\",\n-        PropertyValidator.isPresent());\n-    builder.addBoolean(\n-        \"logging.includeEventsEnabled\",\n-        true,\n-        \"Whether the frequent update events are logged (e.g. every slot event, with validators and attestations))\",\n-        PropertyValidator.isPresent());\n-    builder.addString(\n-        \"logging.destination\",\n-        \"both\",\n-        \"Whether all logs go only to the console, only to the log file, or both\",\n-        PropertyValidator.anyOf(\"consoleOnly\", \"fileOnly\", \"both\"));\n-    builder.addString(\n-        \"logging.file\",\n-        \"teku.log\",\n-        \"Path containing the location (relative or absolute) and the log filename.\",\n-        PropertyValidator.isPresent());\n-    builder.addString(\n-        \"logging.fileNamePattern\",\n-        \"teku_%d{yyyy-MM-dd}.log\",\n-        \"Pattern for the filename to apply to rolled over logs files.\",\n-        PropertyValidator.isPresent());\n-\n-    // Outputs\n-    builder.addString(\n-        \"output.transitionRecordDir\",\n-        \"\",\n-        \"Directory to record transition pre and post states\",\n-        null);\n-\n-    // Database\n-    builder.addString(\n-        \"database.dataPath\", \".\", \"Path to output data files\", PropertyValidator.isPresent());\n-    builder.addString(\n-        \"database.stateStorageMode\",\n-        \"prune\",\n-        \"Sets the strategy for handling historical chain state.  Supported values include: 'prune', and 'archive'\",\n-        null);\n-\n-    // Beacon Rest API\n-    builder.addInteger(\"beaconrestapi.portNumber\", 5051, \"Port number of Beacon Rest API\", null);\n-    builder.addBoolean(\n-        \"beaconrestapi.enableSwagger\", false, \"Enable swagger-docs and swagger-ui endpoints\", null);\n-\n-    builder.validateConfiguration(\n-        config -> {\n-          return null;\n-        });\n-\n-    return builder.toSchema();\n-  }\n-\n-  private static final Schema schema = createSchema();\n-\n-  /**\n-   * Reads configuration from file.\n-   *\n-   * @param path a toml file to read configuration from\n-   * @return the new ArtemisConfiguration\n-   * @throws UncheckedIOException if the file is missing\n-   */\n-  public static ArtemisConfiguration fromFile(String path) {\n-    Path configPath = Paths.get(path);\n-    try {\n-      return new ArtemisConfiguration(Configuration.fromToml(configPath, schema));\n-    } catch (IOException e) {\n-      throw new UncheckedIOException(e);\n-    }\n-  }\n-\n-  /**\n-   * Reads configuration from a toml text.\n-   *\n-   * @param configText the toml text\n-   * @return the new ArtemisConfiguration\n-   */\n-  public static ArtemisConfiguration fromString(String configText) {\n-    return new ArtemisConfiguration(Configuration.fromToml(configText, schema));\n+  // Network\n+  private final String network;\n+\n+  // P2P", "originalCommit": "4352920dad4e9dc4987d844796d96cef284701ee", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjU4NDE2OQ==", "url": "https://github.com/ConsenSys/teku/pull/1419#discussion_r396584169", "bodyText": "For follow-up PR.", "author": "iikirilov", "createdAt": "2020-03-23T16:28:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjU2MzUxMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjU2NjM1NA==", "url": "https://github.com/ConsenSys/teku/pull/1419#discussion_r396566354", "bodyText": "Are these '--x' prefixed options meant to be hidden?", "author": "mbaxter", "createdAt": "2020-03-23T16:04:45Z", "path": "artemis/src/main/java/tech/pegasys/artemis/cli/BeaconNodeCommand.java", "diffHunk": "@@ -0,0 +1,499 @@\n+/*\n+ * Copyright 2019 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.cli;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.Optional;\n+import java.util.concurrent.Callable;\n+import org.apache.logging.log4j.Level;\n+import picocli.CommandLine;\n+import picocli.CommandLine.Command;\n+import picocli.CommandLine.Option;\n+import tech.pegasys.artemis.BeaconNode;\n+import tech.pegasys.artemis.cli.subcommand.DepositCommand;\n+import tech.pegasys.artemis.cli.subcommand.GenesisCommand;\n+import tech.pegasys.artemis.cli.subcommand.PeerCommand;\n+import tech.pegasys.artemis.cli.subcommand.TransitionCommand;\n+import tech.pegasys.artemis.cli.util.CascadingDefaultProvider;\n+import tech.pegasys.artemis.cli.util.EnvironmentVariableDefaultProvider;\n+import tech.pegasys.artemis.cli.util.TomlConfigFileDefaultProvider;\n+import tech.pegasys.artemis.storage.DatabaseStorageException;\n+import tech.pegasys.artemis.util.cli.LogTypeConverter;\n+import tech.pegasys.artemis.util.cli.VersionProvider;\n+import tech.pegasys.artemis.util.config.ArtemisConfiguration;\n+import tech.pegasys.teku.logging.LoggingConfigurator;\n+\n+@SuppressWarnings(\"unused\")\n+@Command(\n+    name = \"teku\",\n+    subcommands = {\n+      TransitionCommand.class,\n+      PeerCommand.class,\n+      DepositCommand.class,\n+      GenesisCommand.class\n+    },\n+    abbreviateSynopsis = true,\n+    description = \"Run the Teku beacon chain client and validator\",\n+    mixinStandardHelpOptions = true,\n+    versionProvider = VersionProvider.class,\n+    synopsisHeading = \"%n\",\n+    descriptionHeading = \"%nDescription:%n%n\",\n+    optionListHeading = \"%nOptions:%n\",\n+    footerHeading = \"%n\",\n+    footer = \"Teku is licensed under the Apache License 2.0\")\n+public class BeaconNodeCommand implements Callable<Integer>, OptionNames, DefaultOptionValues {\n+\n+  @Option(\n+      names = {\"-l\", \"--logging\"},\n+      converter = LogTypeConverter.class,\n+      paramLabel = \"<LOG VERBOSITY LEVEL>\",\n+      description =\n+          \"Logging verbosity levels: OFF, FATAL, WARN, INFO, DEBUG, TRACE, ALL (default: INFO).\",\n+      arity = \"1\")\n+  private Level logLevel;\n+\n+  @Option(\n+      names = {\"-c\", CONFIG_FILE_OPTION_NAME},\n+      paramLabel = \"<FILENAME>\",\n+      description = \"Path/filename of the config file\",\n+      arity = \"1\")\n+  private String configFile = DEFAULT_CONFIG_FILE;\n+\n+  // Network\n+  @Option(\n+      names = {\"-n\", NETWORK_OPTION_NAME},\n+      paramLabel = \"<NETWORK>\",\n+      description = \"Represents which network to use\",\n+      arity = \"1\")\n+  private String network = DEFAULT_NETWORK;\n+\n+  // P2P\n+  @Option(\n+      names = {P2P_ENABLED_OPTION_NAME},\n+      paramLabel = \"<BOOLEAN>\",\n+      description = \"Enables peer to peer\",\n+      arity = \"1\")\n+  private boolean p2pEnabled = DEFAULT_P2P_ENABLED;\n+\n+  @Option(\n+      names = {P2P_INTERFACE_OPTION_NAME},\n+      paramLabel = \"<NETWORK>\",\n+      description = \"Peer to peer network interface\",\n+      arity = \"1\")\n+  private String p2pInterface = DEFAULT_P2P_INTERFACE;\n+\n+  @Option(\n+      names = {P2P_PORT_OPTION_NAME},\n+      paramLabel = \"<INTEGER>\",\n+      description = \"Peer to peer port\",\n+      arity = \"1\")\n+  private int p2pPort = DEFAULT_P2P_PORT;\n+\n+  @Option(\n+      names = {P2P_DISCOVERY_ENABLED_OPTION_NAME},\n+      paramLabel = \"<BOOLEAN>\",\n+      description = \"Enables discv5 discovery\",\n+      arity = \"1\")\n+  private boolean p2pDiscoveryEnabled = DEFAULT_P2P_DISCOVERY_ENABLED;\n+\n+  @Option(\n+      names = {P2P_DISCOVERY_BOOTNODES_OPTION_NAME},\n+      paramLabel = \"<enode://id@host:port>\",\n+      description = \"ENR of the bootnode\",\n+      split = \",\",\n+      arity = \"0..*\")\n+  private ArrayList<String> p2pDiscoveryBootnodes = DEFAULT_P2P_DISCOVERY_BOOTNODES;\n+\n+  @Option(\n+      names = {P2P_ADVERTISED_IP_OPTION_NAME},\n+      paramLabel = \"<NETWORK>\",\n+      description = \"Peer to peer advertised ip\",\n+      arity = \"1\")\n+  private String p2pAdvertisedIp = DEFAULT_P2P_ADVERTISED_IP;\n+\n+  @Option(\n+      names = {P2P_ADVERTISED_PORT_OPTION_NAME},\n+      paramLabel = \"<INTEGER>\",\n+      description = \"Peer to peer advertised port\",\n+      arity = \"1\")\n+  private int p2pAdvertisedPort = DEFAULT_P2P_ADVERTISED_PORT;\n+\n+  @Option(\n+      names = {P2P_PRIVATE_KEY_FILE_OPTION_NAME},\n+      paramLabel = \"<FILENAME>\",\n+      description = \"This node's private key file\",\n+      arity = \"1\")\n+  private String p2pPrivateKeyFile = DEFAULT_P2P_PRIVATE_KEY_FILE;\n+\n+  @Option(\n+      names = {P2P_PEER_LOWER_BOUND_OPTION_NAME},\n+      paramLabel = \"<INTEGER>\",\n+      description = \"Lower bound on the target number of peers\",\n+      arity = \"1\")\n+  private int p2pLowerBound = DEFAULT_P2P_PEER_LOWER_BOUND;\n+\n+  @Option(\n+      names = {P2P_PEER_UPPER_BOUND_OPTION_NAME},\n+      paramLabel = \"<INTEGER>\",\n+      description = \"Upper bound on the target number of peers\",\n+      arity = \"1\")\n+  private int p2pUpperBound = DEFAULT_P2P_PEER_UPPER_BOUND;\n+\n+  @Option(\n+      names = {P2P_STATIC_PEERS_OPTION_NAME},\n+      paramLabel = \"<PEER_ADDRESSES>\",\n+      description = \"Static peers\",\n+      arity = \"1\")\n+  private ArrayList<String> p2pStaticPeers = DEFAULT_P2P_STATIC_PEERS;\n+\n+  // Interop\n+\n+  @Option(\n+      names = {X_INTEROP_GENESIS_TIME_OPTION_NAME},\n+      paramLabel = \"<INTEGER>\",\n+      description = \"Time of mocked genesis\",\n+      arity = \"1\")\n+  private Integer xInteropGenesisTime = DEFAULT_X_INTEROP_GENESIS_TIME;\n+\n+  @Option(\n+      names = {X_INTEROP_OWNED_VALIDATOR_START_INDEX_OPTION_NAME},", "originalCommit": "4352920dad4e9dc4987d844796d96cef284701ee", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjYwMTAxNQ==", "url": "https://github.com/ConsenSys/teku/pull/1419#discussion_r396601015", "bodyText": "done", "author": "iikirilov", "createdAt": "2020-03-23T16:51:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjU2NjM1NA=="}], "type": "inlineReview"}, {"oid": "953680655114a17c36e0cd48e096954872e86bd4", "url": "https://github.com/ConsenSys/teku/commit/953680655114a17c36e0cd48e096954872e86bd4", "message": "trigger CI", "committedDate": "2020-03-23T19:38:18Z", "type": "forcePushed"}, {"oid": "814219a769005d3f9f65cb2eb6e18189741d1065", "url": "https://github.com/ConsenSys/teku/commit/814219a769005d3f9f65cb2eb6e18189741d1065", "message": "spotless", "committedDate": "2020-03-23T20:39:39Z", "type": "forcePushed"}, {"oid": "6e0a5df9026de09820c75e868f032ede789aa23e", "url": "https://github.com/ConsenSys/teku/commit/6e0a5df9026de09820c75e868f032ede789aa23e", "message": "increase timeouts", "committedDate": "2020-03-23T20:55:26Z", "type": "forcePushed"}, {"oid": "cdb143b9e324f68b9a6b20dc0a9dbc0fd052bf9f", "url": "https://github.com/ConsenSys/teku/commit/cdb143b9e324f68b9a6b20dc0a9dbc0fd052bf9f", "message": "spotless", "committedDate": "2020-03-23T21:15:04Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjgzMDExNg==", "url": "https://github.com/ConsenSys/teku/pull/1419#discussion_r396830116", "bodyText": "We had deliberately kept the code for config separate between production and acceptance tests because we want the ATs to fail if we change a config option.  Breaking backwards compatibility should be a deliberate choice but is easy to do without noticing if the code is shared and the ATs automatically pick up the new config.", "author": "ajsutton", "createdAt": "2020-03-24T00:01:45Z", "path": "acceptance-tests/src/test-support/java/tech/pegasys/artemis/test/acceptance/dsl/ArtemisNode.java", "diffHunk": "@@ -278,59 +280,41 @@ public void captureDebugArtifacts(final File artifactDir) {\n \n     private final PrivKey privateKey = KeyKt.generateKeyPair(KEY_TYPE.SECP256K1).component1();\n     private final PeerId peerId = PeerId.fromPubKey(privateKey.publicKey());\n-\n-    private static final String DATABASE_SECTION = \"database\";\n-    private static final String BEACONRESTAPI_SECTION = \"beaconrestapi\";\n-    private static final String DEPOSIT_SECTION = \"deposit\";\n-    private static final String INTEROP_SECTION = \"interop\";\n-    private static final String NODE_SECTION = \"node\";\n-    private static final String VALIDATOR_SECTION = \"validator\";\n     private static final String VALIDATORS_FILE_PATH = \"/validators.yml\";\n-    private static final String OUTPUT_SECTION = \"output\";\n-    private Map<String, Map<String, Object>> options = new HashMap<>();\n+    private static final String P2P_PRIVATE_KEY_FILE_PATH = \"/p2p-private-key.key\";\n     private static final int DEFAULT_VALIDATOR_COUNT = 64;\n \n+    private ArtemisConfigurationBuilder artemisConfigurationBuilder;\n+\n     private Optional<String> validatorKeys = Optional.empty();\n     private Optional<GenesisStateConfig> genesisStateConfig = Optional.empty();\n+    private boolean p2pEnabled = false;\n \n     public Config() {\n-      final Map<String, Object> node = getSection(NODE_SECTION);\n-      setNetworkMode(\"mock\");\n-      node.put(\"networkInterface\", NetworkUtility.INADDR_ANY);\n-      node.put(\"port\", P2P_PORT);\n-      node.put(\"discovery\", \"static\");\n-      node.put(\"constants\", \"minimal\");\n-\n-      final Map<String, Object> interop = getSection(INTEROP_SECTION);\n-      interop.put(\"genesisTime\", 0);\n-      interop.put(\"ownedValidatorStartIndex\", 0);\n-      interop.put(\"ownedValidatorCount\", DEFAULT_VALIDATOR_COUNT);\n-\n-      final Map<String, Object> deposit = getSection(DEPOSIT_SECTION);\n-      setDepositMode(\"test\");\n-      deposit.put(\"numValidators\", DEFAULT_VALIDATOR_COUNT);\n-\n-      final Map<String, Object> beaconRestApi = getSection(BEACONRESTAPI_SECTION);\n-      beaconRestApi.put(\"portNumber\", REST_API_PORT);\n-      beaconRestApi.put(\"enableSwagger\", false);\n-\n-      final Map<String, Object> output = getSection(OUTPUT_SECTION);\n-      output.put(\"transitionRecordDir\", ARTIFACTS_PATH + \"transitions/\");\n-\n-      final Map<String, Object> database = getSection(DATABASE_SECTION);\n-      database.put(\"dataDir\", ARTIFACTS_PATH + \"data/\");\n+      artemisConfigurationBuilder =\n+          ArtemisConfiguration.builder()\n+              .setNetwork(\"minimal\")\n+              .setP2pEnabled(false)\n+              .setP2pDiscoveryEnabled(false)\n+              .setP2pPort(P2P_PORT)\n+              .setP2pAdvertisedPort(P2P_PORT)\n+              .setP2pInterface(NetworkUtility.INADDR_ANY)\n+              .setxInteropGenesisTime(0)\n+              .setxInteropOwnedValidatorStartIndex(0)\n+              .setxInteropOwnedValidatorCount(DEFAULT_VALIDATOR_COUNT)\n+              .setxInteropNumberOfValidators(DEFAULT_VALIDATOR_COUNT)\n+              .setxInteropEnabled(true)\n+              .setRestApiEnabled(true)\n+              .setRestApiPort(REST_API_PORT)\n+              .setRestApiDocsEnabled(false)\n+              .setxTransitionRecordDirectory(ARTIFACTS_PATH + \"transitions/\")\n+              .setDataPath(ARTIFACTS_PATH + \"data/\");", "originalCommit": "cdb143b9e324f68b9a6b20dc0a9dbc0fd052bf9f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzE4ODExNg==", "url": "https://github.com/ConsenSys/teku/pull/1419#discussion_r397188116", "bodyText": "fixed", "author": "iikirilov", "createdAt": "2020-03-24T14:19:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjgzMDExNg=="}], "type": "inlineReview"}, {"oid": "7f445e83e7726afab5e22f28b486fbaeda0a1953", "url": "https://github.com/ConsenSys/teku/commit/7f445e83e7726afab5e22f28b486fbaeda0a1953", "message": "spotless", "committedDate": "2020-03-24T09:34:22Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM3NzcwMg==", "url": "https://github.com/ConsenSys/teku/pull/1419#discussion_r397377702", "bodyText": "Stray println", "author": "mbaxter", "createdAt": "2020-03-24T18:36:21Z", "path": "acceptance-tests/src/testFixtures/java/tech/pegasys/artemis/test/acceptance/dsl/ArtemisNode.java", "diffHunk": "@@ -417,19 +391,13 @@ public String getPeerId() {\n     private void writeTo(final File configFile) throws Exception {\n       try (PrintWriter out =\n           new PrintWriter(Files.newBufferedWriter(configFile.toPath(), StandardCharsets.UTF_8))) {\n-        for (Entry<String, Map<String, Object>> entry : options.entrySet()) {\n-          String sectionName = entry.getKey();\n-          Map<String, Object> section = entry.getValue();\n-          out.println(\"[\" + tomlEscape(sectionName) + \"]\");\n-\n-          for (Entry<String, Object> e : section.entrySet()) {\n-            out.print(e.getKey() + \"=\");\n-            writeValue(e.getValue(), out);\n-            out.println();\n-          }\n+        for (final String key : configMap.keySet()) {\n+          out.print(key + \"=\");\n+          writeValue(configMap.get(key), out);\n           out.println();\n         }\n       }\n+      System.out.println();", "originalCommit": "2c8df5f5e6066bc6bbb0f8dd964209ed4ab960fe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQzNTI3Mg==", "url": "https://github.com/ConsenSys/teku/pull/1419#discussion_r397435272", "bodyText": "fixed", "author": "iikirilov", "createdAt": "2020-03-24T20:20:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM3NzcwMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM4MTI3Ng==", "url": "https://github.com/ConsenSys/teku/pull/1419#discussion_r397381276", "bodyText": "Seems cleaner to keep an explicit \"data\" directory here:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  configMap.put(\"data-path\", ARTIFACTS_PATH);\n          \n          \n            \n                  configMap.put(\"data-path\", ARTIFACTS_PATH + \"data/\");\n          \n      \n    \n    \n  \n\nBut it looks like the various db-related paths  (ARTIFACTS_DB_PATH etc) will need to be updated.", "author": "mbaxter", "createdAt": "2020-03-24T18:42:23Z", "path": "acceptance-tests/src/testFixtures/java/tech/pegasys/artemis/test/acceptance/dsl/ArtemisNode.java", "diffHunk": "@@ -278,59 +276,40 @@ public void captureDebugArtifacts(final File artifactDir) {\n \n     private final PrivKey privateKey = KeyKt.generateKeyPair(KEY_TYPE.SECP256K1).component1();\n     private final PeerId peerId = PeerId.fromPubKey(privateKey.publicKey());\n-\n-    private static final String DATABASE_SECTION = \"database\";\n-    private static final String BEACONRESTAPI_SECTION = \"beaconrestapi\";\n-    private static final String DEPOSIT_SECTION = \"deposit\";\n-    private static final String INTEROP_SECTION = \"interop\";\n-    private static final String NODE_SECTION = \"node\";\n-    private static final String VALIDATOR_SECTION = \"validator\";\n     private static final String VALIDATORS_FILE_PATH = \"/validators.yml\";\n-    private static final String OUTPUT_SECTION = \"output\";\n-    private Map<String, Map<String, Object>> options = new HashMap<>();\n+    private static final String P2P_PRIVATE_KEY_FILE_PATH = \"/p2p-private-key.key\";\n     private static final int DEFAULT_VALIDATOR_COUNT = 64;\n \n+    private Map<String, Object> configMap = new HashMap<>();\n+\n     private Optional<String> validatorKeys = Optional.empty();\n     private Optional<GenesisStateConfig> genesisStateConfig = Optional.empty();\n \n     public Config() {\n-      final Map<String, Object> node = getSection(NODE_SECTION);\n-      setNetworkMode(\"mock\");\n-      node.put(\"networkInterface\", NetworkUtility.INADDR_ANY);\n-      node.put(\"port\", P2P_PORT);\n-      node.put(\"discovery\", \"static\");\n-      node.put(\"constants\", \"minimal\");\n-\n-      final Map<String, Object> interop = getSection(INTEROP_SECTION);\n-      interop.put(\"genesisTime\", 0);\n-      interop.put(\"ownedValidatorStartIndex\", 0);\n-      interop.put(\"ownedValidatorCount\", DEFAULT_VALIDATOR_COUNT);\n-\n-      final Map<String, Object> deposit = getSection(DEPOSIT_SECTION);\n-      setDepositMode(\"test\");\n-      deposit.put(\"numValidators\", DEFAULT_VALIDATOR_COUNT);\n-\n-      final Map<String, Object> beaconRestApi = getSection(BEACONRESTAPI_SECTION);\n-      beaconRestApi.put(\"portNumber\", REST_API_PORT);\n-      beaconRestApi.put(\"enableSwagger\", false);\n-\n-      final Map<String, Object> output = getSection(OUTPUT_SECTION);\n-      output.put(\"transitionRecordDir\", ARTIFACTS_PATH + \"transitions/\");\n-\n-      final Map<String, Object> database = getSection(DATABASE_SECTION);\n-      database.put(\"dataDir\", ARTIFACTS_PATH + \"data/\");\n+      configMap.put(\"network\", \"minimal\");\n+      configMap.put(\"p2p-enabled\", false);\n+      configMap.put(\"p2p-discovery-enabled\", false);\n+      configMap.put(\"p2p-port\", P2P_PORT);\n+      configMap.put(\"p2p-advertised-port\", P2P_PORT);\n+      configMap.put(\"p2p-interface\", NetworkUtility.INADDR_ANY);\n+      configMap.put(\"x-interop-genesis-time\", 0);\n+      configMap.put(\"x-interop-owned-validator-start-index\", 0);\n+      configMap.put(\"x-interop-owned-validator-count\", DEFAULT_VALIDATOR_COUNT);\n+      configMap.put(\"x-interop-number-of-validators\", DEFAULT_VALIDATOR_COUNT);\n+      configMap.put(\"x-interop-enabled\", true);\n+      configMap.put(\"rest-api-enabled\", true);\n+      configMap.put(\"rest-api-port\", REST_API_PORT);\n+      configMap.put(\"rest-api-docs-enabled\", false);\n+      configMap.put(\"x-transaction-record-directory\", ARTIFACTS_PATH + \"transitions/\");\n+      configMap.put(\"data-path\", ARTIFACTS_PATH);", "originalCommit": "2c8df5f5e6066bc6bbb0f8dd964209ed4ab960fe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ0ODUyMA==", "url": "https://github.com/ConsenSys/teku/pull/1419#discussion_r397448520", "bodyText": "agreed", "author": "iikirilov", "createdAt": "2020-03-24T20:43:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM4MTI3Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM4MzMxMQ==", "url": "https://github.com/ConsenSys/teku/pull/1419#discussion_r397383311", "bodyText": "Do we need this update?  Changing the config format shouldn't affect this timeout ...", "author": "mbaxter", "createdAt": "2020-03-24T18:45:53Z", "path": "acceptance-tests/src/testFixtures/java/tech/pegasys/artemis/test/acceptance/dsl/ArtemisDepositSender.java", "diffHunk": "@@ -65,7 +66,7 @@ public String sendValidatorDeposits(final BesuNode eth1Node, final int numberOfV\n         \"--eth1-endpoint\",\n         eth1Node.getInternalJsonRpcUrl());\n     container.start();\n-    Waiter.waitFor(() -> assertThat(container.isRunning()).isFalse());\n+    Waiter.waitFor(() -> assertThat(container.isRunning()).isFalse(), TimeUnit.SECONDS, 60);", "originalCommit": "2c8df5f5e6066bc6bbb0f8dd964209ed4ab960fe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQzNjgzNg==", "url": "https://github.com/ConsenSys/teku/pull/1419#discussion_r397436836", "bodyText": "I will revert this and see but the ArtemisDepositSender is generally flaky here because it does retries inside the container and generally takes around 30s to start up do its thing and shut down.\nIf the pipeline fails I will put it back in.", "author": "iikirilov", "createdAt": "2020-03-24T20:22:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM4MzMxMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM5NDcwOQ==", "url": "https://github.com/ConsenSys/teku/pull/1419#discussion_r397394709", "bodyText": "Should we assert that bytes is not empty and cut the private key generation logic here?", "author": "mbaxter", "createdAt": "2020-03-24T19:05:24Z", "path": "services/beaconchain/src/main/java/tech/pegasys/artemis/services/beaconchain/BeaconChainController.java", "diffHunk": "@@ -253,27 +254,31 @@ private void initAttestationPropagationManager() {\n \n   public void initP2PNetwork() {\n     LOG.debug(\"BeaconChainController.initP2PNetwork()\");\n-    if (\"mock\".equals(config.getNetworkMode())) {\n+    if (!config.isP2pEnabled()) {\n       this.p2pNetwork = new MockP2PNetwork<>(eventBus);\n-    } else if (\"jvmlibp2p\".equals(config.getNetworkMode())) {\n-      Bytes bytes = Bytes.fromHexString(config.getInteropPrivateKey());\n+    } else {\n+      final Bytes bytes;\n+      try {\n+        bytes = Bytes.fromHexString(Files.readString(Paths.get(config.getP2pPrivateKeyFile())));\n+      } catch (IOException e) {\n+        throw new RuntimeException(\n+            \"p2p private key file not found - \" + config.getP2pPrivateKeyFile());\n+      }\n       PrivKey pk =\n           bytes.isEmpty()", "originalCommit": "2c8df5f5e6066bc6bbb0f8dd964209ed4ab960fe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQzODE3OA==", "url": "https://github.com/ConsenSys/teku/pull/1419#discussion_r397438178", "bodyText": "I don't think you need to assert here. Bytes.fromHexString(..) already asserts the input is not null.\nYes keygen logic is not necessary!", "author": "iikirilov", "createdAt": "2020-03-24T20:25:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM5NDcwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ0Nzg4Mw==", "url": "https://github.com/ConsenSys/teku/pull/1419#discussion_r397447883", "bodyText": "This is probably a bad thing because I am changing the execution paths - I think a key should be generated if the file path is not supplied - but an exception should be thrown if an invalid file path is supplied.\nI will update to reflect this.", "author": "iikirilov", "createdAt": "2020-03-24T20:42:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM5NDcwOQ=="}], "type": "inlineReview"}, {"oid": "9b6d32787839f0031a4d4e833756d63631124373", "url": "https://github.com/ConsenSys/teku/commit/9b6d32787839f0031a4d4e833756d63631124373", "message": "address comments", "committedDate": "2020-03-24T20:57:51Z", "type": "forcePushed"}, {"oid": "7696e00934c9e33d1b13d11151f620aa0feb4948", "url": "https://github.com/ConsenSys/teku/commit/7696e00934c9e33d1b13d11151f620aa0feb4948", "message": "address comments", "committedDate": "2020-03-24T22:24:42Z", "type": "forcePushed"}, {"oid": "c5fb57827e9ac4ec1b300871f751ac69021e9094", "url": "https://github.com/ConsenSys/teku/commit/c5fb57827e9ac4ec1b300871f751ac69021e9094", "message": "rename configuration arguments and implement CLI options", "committedDate": "2020-03-26T12:01:23Z", "type": "commit"}, {"oid": "cc4a06838089008f5fae5bcf3cd7ea94db42d649", "url": "https://github.com/ConsenSys/teku/commit/cc4a06838089008f5fae5bcf3cd7ea94db42d649", "message": "break", "committedDate": "2020-03-26T12:02:20Z", "type": "commit"}, {"oid": "a6666a952ede4cb4da3734b703cd08d7fc4efc80", "url": "https://github.com/ConsenSys/teku/commit/a6666a952ede4cb4da3734b703cd08d7fc4efc80", "message": "fix getter method name\n\nCo-Authored-By: mbaxter <meredith.baxter@consensys.net>", "committedDate": "2020-03-26T12:02:20Z", "type": "commit"}, {"oid": "c8864565c2b3cebb0a65d9244a415487bb53c5ab", "url": "https://github.com/ConsenSys/teku/commit/c8864565c2b3cebb0a65d9244a415487bb53c5ab", "message": "address comments", "committedDate": "2020-03-26T12:02:20Z", "type": "commit"}, {"oid": "a65bc09462724a3f60ec5b0743d2cd10bcfbce25", "url": "https://github.com/ConsenSys/teku/commit/a65bc09462724a3f60ec5b0743d2cd10bcfbce25", "message": "spotless", "committedDate": "2020-03-26T12:02:39Z", "type": "commit"}, {"oid": "1387cd7110b8e80f53411edfedcce1114d698811", "url": "https://github.com/ConsenSys/teku/commit/1387cd7110b8e80f53411edfedcce1114d698811", "message": "add test for default options when no args are passed", "committedDate": "2020-03-26T12:02:39Z", "type": "commit"}, {"oid": "5df2419886090baef9e12065740c82a5ea252d8e", "url": "https://github.com/ConsenSys/teku/commit/5df2419886090baef9e12065740c82a5ea252d8e", "message": "address comment", "committedDate": "2020-03-26T12:02:39Z", "type": "commit"}, {"oid": "099d0d492586b802c9472450edd439b5c78de3fa", "url": "https://github.com/ConsenSys/teku/commit/099d0d492586b802c9472450edd439b5c78de3fa", "message": "finish ATs", "committedDate": "2020-03-26T12:03:06Z", "type": "commit"}, {"oid": "d5531839afa0734d97f5b60ff52620bd4b32544c", "url": "https://github.com/ConsenSys/teku/commit/d5531839afa0734d97f5b60ff52620bd4b32544c", "message": "clean up", "committedDate": "2020-03-26T12:03:06Z", "type": "commit"}, {"oid": "38f7b8cbc9eb9829b3198bcb50810d6a3f9f8892", "url": "https://github.com/ConsenSys/teku/commit/38f7b8cbc9eb9829b3198bcb50810d6a3f9f8892", "message": "fix typo transactionRecordDirectory -> transitionRecordDirectory", "committedDate": "2020-03-26T12:03:06Z", "type": "commit"}, {"oid": "6b4d06ac6f37ae92f83d51fe4c0bd3c6aeed92b7", "url": "https://github.com/ConsenSys/teku/commit/6b4d06ac6f37ae92f83d51fe4c0bd3c6aeed92b7", "message": "fix dev variable names", "committedDate": "2020-03-26T12:03:06Z", "type": "commit"}, {"oid": "42788812aa5762128ae8297f6dcf9fbd116ba180", "url": "https://github.com/ConsenSys/teku/commit/42788812aa5762128ae8297f6dcf9fbd116ba180", "message": "fix scripts and static peer parsing", "committedDate": "2020-03-26T12:03:06Z", "type": "commit"}, {"oid": "80bf49a76689b961c0231aabdec9015ea342079a", "url": "https://github.com/ConsenSys/teku/commit/80bf49a76689b961c0231aabdec9015ea342079a", "message": "address comments", "committedDate": "2020-03-26T12:03:41Z", "type": "commit"}, {"oid": "268aa8f05570dd323b6b2c18abd5f01a03e20da0", "url": "https://github.com/ConsenSys/teku/commit/268aa8f05570dd323b6b2c18abd5f01a03e20da0", "message": "post rebase", "committedDate": "2020-03-26T12:03:42Z", "type": "commit"}, {"oid": "268aa8f05570dd323b6b2c18abd5f01a03e20da0", "url": "https://github.com/ConsenSys/teku/commit/268aa8f05570dd323b6b2c18abd5f01a03e20da0", "message": "post rebase", "committedDate": "2020-03-26T12:03:42Z", "type": "forcePushed"}, {"oid": "3a339d15c173fc6a01e5ed465d78e35b61448891", "url": "https://github.com/ConsenSys/teku/commit/3a339d15c173fc6a01e5ed465d78e35b61448891", "message": "fix test", "committedDate": "2020-03-26T12:27:03Z", "type": "commit"}, {"oid": "0cc9b9b168ab0bc31e3e7da2baaa99618d4717a8", "url": "https://github.com/ConsenSys/teku/commit/0cc9b9b168ab0bc31e3e7da2baaa99618d4717a8", "message": "spotless", "committedDate": "2020-03-26T12:29:24Z", "type": "commit"}]}