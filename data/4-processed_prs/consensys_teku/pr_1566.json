{"pr_number": 1566, "pr_title": "Exclude attestations that are too old from being included in blocks", "pr_createdAt": "2020-04-09T01:23:06Z", "pr_url": "https://github.com/ConsenSys/teku/pull/1566", "timeline": [{"oid": "acdfede9f45afa8a7f39bad44e6575c27e0315aa", "url": "https://github.com/ConsenSys/teku/commit/acdfede9f45afa8a7f39bad44e6575c27e0315aa", "message": "Exclude attestations that are too old from being included in blocks.", "committedDate": "2020-04-09T01:22:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTkxMDI0NA==", "url": "https://github.com/ConsenSys/teku/pull/1566#discussion_r405910244", "bodyText": "Why do you need to do epoch + 1 here?", "author": "cemozerr", "createdAt": "2020-04-09T01:46:39Z", "path": "ethereum/statetransition/src/main/java/tech/pegasys/artemis/statetransition/attestation/AggregatingAttestationPool.java", "diffHunk": "@@ -73,6 +76,16 @@ public synchronized void remove(final Attestation attestation) {\n   }\n \n   private boolean canBeIncluded(final MatchingDataAttestationGroup group, final UnsignedLong slot) {\n-    return group.getAttestationData().getEarliestSlotForProcessing().compareTo(slot) <= 0;\n+    final AttestationData attestationData = group.getAttestationData();\n+    return attestationData.getEarliestSlotForProcessing().compareTo(slot) <= 0\n+        && isPreviousEpochOrLater(attestationData, slot);\n+  }\n+\n+  private boolean isPreviousEpochOrLater(\n+      final AttestationData attestationData, final UnsignedLong slot) {\n+    return compute_epoch_at_slot(attestationData.getSlot())", "originalCommit": "acdfede9f45afa8a7f39bad44e6575c27e0315aa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTkxMTA3NA==", "url": "https://github.com/ConsenSys/teku/pull/1566#discussion_r405911074", "bodyText": "The previous epoch is allowed, so if epoch of attestation + 1 >= epoch of slot it's ok.  The more intuitive approach would have been if epoch of attestation >= epoch of slot - 1 but then you have to deal with the genesis epoch specially.", "author": "ajsutton", "createdAt": "2020-04-09T01:49:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTkxMDI0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTkxODM2NA==", "url": "https://github.com/ConsenSys/teku/pull/1566#discussion_r405918364", "bodyText": "Makes sense.", "author": "cemozerr", "createdAt": "2020-04-09T02:17:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTkxMDI0NA=="}], "type": "inlineReview"}, {"oid": "cec98618eb51fceecafeff17a188b3abdbe8627e", "url": "https://github.com/ConsenSys/teku/commit/cec98618eb51fceecafeff17a188b3abdbe8627e", "message": "Apply all slot related restrictions when selecting attestations for a block.", "committedDate": "2020-04-09T03:38:15Z", "type": "commit"}, {"oid": "4454acfffd6875eecf1dea9d79cbe15d21d3ea52", "url": "https://github.com/ConsenSys/teku/commit/4454acfffd6875eecf1dea9d79cbe15d21d3ea52", "message": "Merge branch 'master' of github.com:PegaSysEng/teku into drop-old-attestations", "committedDate": "2020-04-09T03:38:33Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk2MjA4MA==", "url": "https://github.com/ConsenSys/teku/pull/1566#discussion_r405962080", "bodyText": "this says isFalse - so it's not ok? (that's different to what the comment says)", "author": "macfarla", "createdAt": "2020-04-09T05:20:50Z", "path": "ethereum/datastructures/src/test/java/tech/pegasys/artemis/datastructures/operations/AttestationDataTest.java", "diffHunk": "@@ -61,12 +64,83 @@ void shouldNotBeProcessableBeforeFirstSlotOfTargetEpoch() {\n             UnsignedLong.valueOf(1),\n             UnsignedLong.ZERO,\n             Bytes32.ZERO,\n-            new Checkpoint(UnsignedLong.ONE, Bytes32.ZERO),\n+            new Checkpoint(ONE, Bytes32.ZERO),\n             target);\n \n     assertThat(data.getEarliestSlotForProcessing()).isEqualTo(target.getEpochStartSlot());\n   }\n \n+  @Test\n+  public void shouldNotBeAbleToIncludeInBlockBeforeSlotAfterCreationSlot() {\n+    final AttestationData data =\n+        new AttestationData(\n+            UnsignedLong.valueOf(60),\n+            UnsignedLong.ZERO,\n+            Bytes32.ZERO,\n+            new Checkpoint(ONE, Bytes32.ZERO),\n+            new Checkpoint(ONE, Bytes32.ZERO));\n+\n+    assertThat(data.canIncludeInBlockAtSlot(UnsignedLong.valueOf(60))).isFalse();\n+    assertThat(data.canIncludeInBlockAtSlot(UnsignedLong.valueOf(61))).isTrue();\n+  }\n+\n+  @Test\n+  public void shouldNotBeAbleToIncludeInBlockBeforeFirstSlotOfTargetEpoch() {\n+    final Checkpoint target = new Checkpoint(UnsignedLong.valueOf(10), Bytes32.ZERO);\n+    final AttestationData data =\n+        new AttestationData(\n+            target.getEpochStartSlot().minus(ONE),\n+            UnsignedLong.ZERO,\n+            Bytes32.ZERO,\n+            new Checkpoint(ONE, Bytes32.ZERO),\n+            target);\n+\n+    assertThat(data.canIncludeInBlockAtSlot(target.getEpochStartSlot().minus(ONE))).isFalse();\n+    assertThat(data.canIncludeInBlockAtSlot(target.getEpochStartSlot())).isTrue();\n+  }\n+\n+  @Test\n+  public void shouldNotBeAbleToIncludeInBlockTooFarAfterAttestationSlot() {\n+    final AttestationData data =\n+        new AttestationData(\n+            UnsignedLong.valueOf(60),\n+            UnsignedLong.ZERO,\n+            Bytes32.ZERO,\n+            new Checkpoint(ONE, Bytes32.ZERO),\n+            new Checkpoint(ONE, Bytes32.ZERO));\n+\n+    final UnsignedLong lastValidSlot = data.getSlot().plus(UnsignedLong.valueOf(SLOTS_PER_EPOCH));\n+    assertThat(data.canIncludeInBlockAtSlot(lastValidSlot)).isTrue();\n+    assertThat(data.canIncludeInBlockAtSlot(lastValidSlot.plus(ONE))).isFalse();\n+  }\n+\n+  @Test\n+  public void shouldNotBeAbleToIncludeInBlockMoreThanOneEpochLater() {\n+    final UnsignedLong attestationEpoch = UnsignedLong.valueOf(6);\n+    final UnsignedLong nextEpoch = attestationEpoch.plus(ONE);\n+    final UnsignedLong tooLateEpoch = nextEpoch.plus(ONE);\n+    final AttestationData data =\n+        new AttestationData(\n+            compute_start_slot_at_epoch(attestationEpoch).plus(UnsignedLong.valueOf(3)),\n+            UnsignedLong.ZERO,\n+            Bytes32.ZERO,\n+            new Checkpoint(ONE, Bytes32.ZERO),\n+            new Checkpoint(ONE, Bytes32.ZERO));\n+\n+    // In the attestation epoch, but has to be after the attestation slot\n+    assertThat(data.canIncludeInBlockAtSlot(data.getSlot().plus(ONE))).isTrue();\n+\n+    // Next epoch is ok\n+    assertThat(data.canIncludeInBlockAtSlot(compute_start_slot_at_epoch(nextEpoch))).isTrue();\n+\n+    // Very last slot of next epoch is ok\n+    assertThat(data.canIncludeInBlockAtSlot(compute_start_slot_at_epoch(tooLateEpoch).minus(ONE)))\n+        .isFalse();", "originalCommit": "4454acfffd6875eecf1dea9d79cbe15d21d3ea52", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzcwODA4OQ==", "url": "https://github.com/ConsenSys/teku/pull/1566#discussion_r407708089", "bodyText": "Good spot, comment is wrong - while it's allowed in that epoch, it's more than SLOTS_PER_EPOCH since the attestation slot so is not ok.", "author": "ajsutton", "createdAt": "2020-04-13T20:41:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk2MjA4MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM2MTg0Ng==", "url": "https://github.com/ConsenSys/teku/pull/1566#discussion_r406361846", "bodyText": "It seems to me that this check makes the notPriorToPreviousEpoch check redundant. Am I missing an edge case?", "author": "cemozerr", "createdAt": "2020-04-09T17:28:11Z", "path": "ethereum/datastructures/src/main/java/tech/pegasys/artemis/datastructures/operations/AttestationData.java", "diffHunk": "@@ -141,6 +144,24 @@ public UnsignedLong getEarliestSlotForProcessing() {\n     return max(getSlot().plus(UnsignedLong.ONE), getTarget().getEpochStartSlot());\n   }\n \n+  public boolean canIncludeInBlockAtSlot(final UnsignedLong slot) {\n+    return notPriorToPreviousEpoch(slot)\n+        && notSubmittedTooFarInHistory(slot)\n+        && notSubmittedTooQuickly(slot);\n+  }\n+\n+  public boolean notPriorToPreviousEpoch(final UnsignedLong slot) {\n+    return compute_epoch_at_slot(getSlot()).plus(ONE).compareTo(compute_epoch_at_slot(slot)) >= 0;\n+  }\n+\n+  public boolean notSubmittedTooFarInHistory(final UnsignedLong slot) {", "originalCommit": "4454acfffd6875eecf1dea9d79cbe15d21d3ea52", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzcwOTE3Nw==", "url": "https://github.com/ConsenSys/teku/pull/1566#discussion_r407709177", "bodyText": "The spec has:\nassert data.target.epoch in (get_previous_epoch(state), get_current_epoch(state))\nassert data.slot + MIN_ATTESTATION_INCLUSION_DELAY <= state.slot <= data.slot + SLOTS_PER_EPOCH\n\nso this is another issue with missing MIN_ATTESTATION_INCLUSION_DELAY.  You have to include it within SLOTS_PER_EPOCH of when it's first eligible to include, not from the attestation's slot.", "author": "ajsutton", "createdAt": "2020-04-13T20:43:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM2MTg0Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzcwOTk3Mw==", "url": "https://github.com/ConsenSys/teku/pull/1566#discussion_r407709973", "bodyText": "hmm, stil not entirely sure I'm interpreting that right - this may need coffee...", "author": "ajsutton", "createdAt": "2020-04-13T20:44:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM2MTg0Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc0NTcwNw==", "url": "https://github.com/ConsenSys/teku/pull/1566#discussion_r407745707", "bodyText": "I'm convinced that the requirement that attestation.slot is within SLOTS_PER_EPOCH of state.slot means that it can't be from before the previous epoch. Combined with the check for the state being at least MIN_ATTESTATION_INCLUSION_DELAY after the attestation slot, it also can't be a future block so winds up having to be either the current or previous epoch.  I've removed the redundant check.", "author": "ajsutton", "createdAt": "2020-04-13T21:58:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM2MTg0Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM2NTk0MQ==", "url": "https://github.com/ConsenSys/teku/pull/1566#discussion_r406365941", "bodyText": "This made me realize that our getEarliestSlotForProcessing() function is wrong. We should be waiting MIN_ATTESTATION_INCLUSION_DELAY slots until we include an attestation in a block not necessarily one slot.", "author": "cemozerr", "createdAt": "2020-04-09T17:35:33Z", "path": "ethereum/datastructures/src/main/java/tech/pegasys/artemis/datastructures/operations/AttestationData.java", "diffHunk": "@@ -141,6 +144,24 @@ public UnsignedLong getEarliestSlotForProcessing() {\n     return max(getSlot().plus(UnsignedLong.ONE), getTarget().getEpochStartSlot());\n   }\n \n+  public boolean canIncludeInBlockAtSlot(final UnsignedLong slot) {\n+    return notPriorToPreviousEpoch(slot)\n+        && notSubmittedTooFarInHistory(slot)\n+        && notSubmittedTooQuickly(slot);\n+  }\n+\n+  public boolean notPriorToPreviousEpoch(final UnsignedLong slot) {\n+    return compute_epoch_at_slot(getSlot()).plus(ONE).compareTo(compute_epoch_at_slot(slot)) >= 0;\n+  }\n+\n+  public boolean notSubmittedTooFarInHistory(final UnsignedLong slot) {\n+    return slot.compareTo(getSlot().plus(UnsignedLong.valueOf(SLOTS_PER_EPOCH))) <= 0;\n+  }\n+\n+  public boolean notSubmittedTooQuickly(final UnsignedLong slot) {\n+    return getEarliestSlotForProcessing().compareTo(slot) <= 0;", "originalCommit": "4454acfffd6875eecf1dea9d79cbe15d21d3ea52", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM2NjE0NQ==", "url": "https://github.com/ConsenSys/teku/pull/1566#discussion_r406366145", "bodyText": "That is probably better fixed in another PR though.", "author": "cemozerr", "createdAt": "2020-04-09T17:35:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM2NTk0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzcyMjcyMw==", "url": "https://github.com/ConsenSys/teku/pull/1566#discussion_r407722723", "bodyText": "Interestingly getEarliestSlotForProcessing is correct - fork choice requires only that the attestation be in the past:\n    # Attestations can only affect the fork choice of subsequent slots.\n    # Delay consideration in the fork choice until their slot is in the past.\n    assert get_current_slot(store) >= attestation.data.slot + 1\n\nSo we just need a separate calculation for inclusion in blocks.", "author": "ajsutton", "createdAt": "2020-04-13T21:09:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM2NTk0MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM3NTY5Mg==", "url": "https://github.com/ConsenSys/teku/pull/1566#discussion_r406375692", "bodyText": "Due to the MIN_ATTESTATION_INCLUSION_DELAY comment I made above, this line would need to change as well to:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                assertThat(data.canIncludeInBlockAtSlot(UnsignedLong.valueOf(61))).isTrue();\n          \n          \n            \n                assertThat(data.canIncludeInBlockAtSlot(UnsignedLong.valueOf(60).plus(MIN_ATTESTATION_INCLUSION_DELAY))).isTrue();", "author": "cemozerr", "createdAt": "2020-04-09T17:52:40Z", "path": "ethereum/datastructures/src/test/java/tech/pegasys/artemis/datastructures/operations/AttestationDataTest.java", "diffHunk": "@@ -61,12 +64,83 @@ void shouldNotBeProcessableBeforeFirstSlotOfTargetEpoch() {\n             UnsignedLong.valueOf(1),\n             UnsignedLong.ZERO,\n             Bytes32.ZERO,\n-            new Checkpoint(UnsignedLong.ONE, Bytes32.ZERO),\n+            new Checkpoint(ONE, Bytes32.ZERO),\n             target);\n \n     assertThat(data.getEarliestSlotForProcessing()).isEqualTo(target.getEpochStartSlot());\n   }\n \n+  @Test\n+  public void shouldNotBeAbleToIncludeInBlockBeforeSlotAfterCreationSlot() {\n+    final AttestationData data =\n+        new AttestationData(\n+            UnsignedLong.valueOf(60),\n+            UnsignedLong.ZERO,\n+            Bytes32.ZERO,\n+            new Checkpoint(ONE, Bytes32.ZERO),\n+            new Checkpoint(ONE, Bytes32.ZERO));\n+\n+    assertThat(data.canIncludeInBlockAtSlot(UnsignedLong.valueOf(60))).isFalse();\n+    assertThat(data.canIncludeInBlockAtSlot(UnsignedLong.valueOf(61))).isTrue();", "originalCommit": "4454acfffd6875eecf1dea9d79cbe15d21d3ea52", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM3ODkyMQ==", "url": "https://github.com/ConsenSys/teku/pull/1566#discussion_r406378921", "bodyText": "I think the changes necessary for the comment I made above will affect this test as well.", "author": "cemozerr", "createdAt": "2020-04-09T17:58:07Z", "path": "ethereum/datastructures/src/test/java/tech/pegasys/artemis/datastructures/operations/AttestationDataTest.java", "diffHunk": "@@ -61,12 +64,83 @@ void shouldNotBeProcessableBeforeFirstSlotOfTargetEpoch() {\n             UnsignedLong.valueOf(1),\n             UnsignedLong.ZERO,\n             Bytes32.ZERO,\n-            new Checkpoint(UnsignedLong.ONE, Bytes32.ZERO),\n+            new Checkpoint(ONE, Bytes32.ZERO),\n             target);\n \n     assertThat(data.getEarliestSlotForProcessing()).isEqualTo(target.getEpochStartSlot());\n   }\n \n+  @Test\n+  public void shouldNotBeAbleToIncludeInBlockBeforeSlotAfterCreationSlot() {\n+    final AttestationData data =\n+        new AttestationData(\n+            UnsignedLong.valueOf(60),\n+            UnsignedLong.ZERO,\n+            Bytes32.ZERO,\n+            new Checkpoint(ONE, Bytes32.ZERO),\n+            new Checkpoint(ONE, Bytes32.ZERO));\n+\n+    assertThat(data.canIncludeInBlockAtSlot(UnsignedLong.valueOf(60))).isFalse();\n+    assertThat(data.canIncludeInBlockAtSlot(UnsignedLong.valueOf(61))).isTrue();\n+  }\n+\n+  @Test\n+  public void shouldNotBeAbleToIncludeInBlockBeforeFirstSlotOfTargetEpoch() {\n+    final Checkpoint target = new Checkpoint(UnsignedLong.valueOf(10), Bytes32.ZERO);\n+    final AttestationData data =\n+        new AttestationData(\n+            target.getEpochStartSlot().minus(ONE),", "originalCommit": "4454acfffd6875eecf1dea9d79cbe15d21d3ea52", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "a8f8ea82c230d20faba842822e045280b84f52f0", "url": "https://github.com/ConsenSys/teku/commit/a8f8ea82c230d20faba842822e045280b84f52f0", "message": "Consider MIN_ATTESTATION_INCLUSION_DELAY when deciding if an attestation can be included in a block.", "committedDate": "2020-04-13T22:03:02Z", "type": "commit"}, {"oid": "624ed588c9ec6cc8b1fe7c857f4fabc5d07bbddd", "url": "https://github.com/ConsenSys/teku/commit/624ed588c9ec6cc8b1fe7c857f4fabc5d07bbddd", "message": "Merge branch 'master' of github.com:PegaSysEng/teku into drop-old-attestations", "committedDate": "2020-04-13T22:09:40Z", "type": "commit"}]}