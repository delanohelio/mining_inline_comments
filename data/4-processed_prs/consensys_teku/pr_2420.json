{"pr_number": 2420, "pr_title": "Handle peers limiting request block by range responses", "pr_createdAt": "2020-07-22T03:34:36Z", "pr_url": "https://github.com/ConsenSys/teku/pull/2420", "timeline": [{"oid": "e8737d0397aaf9199973f2a4bf5b37196fbebae8", "url": "https://github.com/ConsenSys/teku/commit/e8737d0397aaf9199973f2a4bf5b37196fbebae8", "message": "Handle peers that only return some of the blocks requested during sync.", "committedDate": "2020-07-20T04:14:16Z", "type": "commit"}, {"oid": "b6df572bdc19877ffd060721c8a1686fd9b56a39", "url": "https://github.com/ConsenSys/teku/commit/b6df572bdc19877ffd060721c8a1686fd9b56a39", "message": "Merge branch 'master' of github.com:PegaSysEng/teku into allow-partial-block-by-range-request", "committedDate": "2020-07-22T01:44:51Z", "type": "commit"}, {"oid": "8164c5a52a238ea8a6d1a792bb5728bb6354af32", "url": "https://github.com/ConsenSys/teku/commit/8164c5a52a238ea8a6d1a792bb5728bb6354af32", "message": "Reject peers as sync target if they are exessively throttling.", "committedDate": "2020-07-22T03:28:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODUyMzgwOA==", "url": "https://github.com/ConsenSys/teku/pull/2420#discussion_r458523808", "bodyText": "isn't this more like Completed request for {} blocks starting at {} from peer {}, got {} blocks. Next request starts from {}?", "author": "rolfyone", "createdAt": "2020-07-22T04:15:19Z", "path": "sync/src/main/java/tech/pegasys/teku/sync/PeerSync.java", "diffHunk": "@@ -119,18 +128,29 @@ public void stop() {\n               final SafeFuture<Void> readyForNextRequest =\n                   asyncRunner.getDelayedFuture(\n                       NEXT_REQUEST_TIMEOUT.toMillis(), TimeUnit.MILLISECONDS);\n-              return peer.requestBlocksByRange(startSlot, count, STEP, this::blockResponseListener)\n-                  .thenApply((res) -> readyForNextRequest);\n+              final PeerSyncBlockRequest request =\n+                  new PeerSyncBlockRequest(\n+                      readyForNextRequest, startSlot.plus(count), this::blockResponseListener);\n+              return peer.requestBlocksByRange(startSlot, count, STEP, request)\n+                  .thenApply((res) -> request);\n             })\n         .thenCompose(\n-            (readyForNextRequest) -> {\n+            (blockRequest) -> {\n+              final UnsignedLong nextSlot = blockRequest.getActualEndSlot().plus(UnsignedLong.ONE);\n               LOG.trace(\n-                  \"Completed request for {} blocks starting at {} from peer {}\",\n+                  \"Completed request for {} blocks starting at {} from peer {}. Next request starts from {}\",", "originalCommit": "8164c5a52a238ea8a6d1a792bb5728bb6354af32", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODUzNTA0OQ==", "url": "https://github.com/ConsenSys/teku/pull/2420#discussion_r458535049", "bodyText": "We don't actually count the number of blocks received - we just track what the last slot we got up to was. Reworded to talk about slots since that's technically what the range specifies.", "author": "ajsutton", "createdAt": "2020-07-22T05:00:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODUyMzgwOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODUyNDM3NA==", "url": "https://github.com/ConsenSys/teku/pull/2420#discussion_r458524374", "bodyText": "so if no blocks were returned they must have all been empty", "author": "rolfyone", "createdAt": "2020-07-22T04:17:45Z", "path": "sync/src/main/java/tech/pegasys/teku/sync/PeerSyncBlockRequest.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.sync;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import java.util.Optional;\n+import tech.pegasys.teku.datastructures.blocks.SignedBeaconBlock;\n+import tech.pegasys.teku.infrastructure.async.SafeFuture;\n+import tech.pegasys.teku.networking.eth2.rpc.core.ResponseStreamListener;\n+\n+public class PeerSyncBlockRequest implements ResponseStreamListener<SignedBeaconBlock> {\n+\n+  private final SafeFuture<Void> readyForNextRequest;\n+  private final UnsignedLong lastRequestedSlot;\n+  private final ResponseStreamListener<SignedBeaconBlock> blockResponseListener;\n+  private Optional<UnsignedLong> slotOfLastBlock = Optional.empty();\n+\n+  public PeerSyncBlockRequest(\n+      final SafeFuture<Void> readyForNextRequest,\n+      final UnsignedLong lastRequestedSlot,\n+      final ResponseStreamListener<SignedBeaconBlock> blockResponseListener) {\n+    this.readyForNextRequest = readyForNextRequest;\n+    this.lastRequestedSlot = lastRequestedSlot;\n+    this.blockResponseListener = blockResponseListener;\n+  }\n+\n+  @Override\n+  public SafeFuture<?> onResponse(final SignedBeaconBlock response) {\n+    slotOfLastBlock = Optional.of(response.getSlot());\n+    return blockResponseListener.onResponse(response);\n+  }\n+\n+  public SafeFuture<Void> getReadyForNextRequest() {\n+    return readyForNextRequest;\n+  }\n+\n+  public UnsignedLong getActualEndSlot() {\n+    // The peer must return at least one block if it has it, so if no blocks were returned they\n+    // must all of have been empty.", "originalCommit": "8164c5a52a238ea8a6d1a792bb5728bb6354af32", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODUzNDU0NQ==", "url": "https://github.com/ConsenSys/teku/pull/2420#discussion_r458534545", "bodyText": "Yes.  The spec says a peer must return at least one block if it has one in the range.  So if we get no blocks either all slots were empty or the peer is lying.  If the peer is lying the next block we get from them will have a parent root that doesn't line up or we'll get to the peers head and not have the blocks they claim to have - in either case we wind up disconnecting the peer.", "author": "ajsutton", "createdAt": "2020-07-22T04:58:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODUyNDM3NA=="}], "type": "inlineReview"}, {"oid": "f9a95a1811b78c4b4501c725b1f3b51f324ea9b2", "url": "https://github.com/ConsenSys/teku/commit/f9a95a1811b78c4b4501c725b1f3b51f324ea9b2", "message": "Tidy up PeerSyncTest.", "committedDate": "2020-07-22T04:45:29Z", "type": "commit"}, {"oid": "d57b6ff74b621b51204dfa1f9cbca6d40eeda8ce", "url": "https://github.com/ConsenSys/teku/commit/d57b6ff74b621b51204dfa1f9cbca6d40eeda8ce", "message": "Reword log message.", "committedDate": "2020-07-22T05:00:43Z", "type": "commit"}]}