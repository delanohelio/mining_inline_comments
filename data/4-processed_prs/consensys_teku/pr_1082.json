{"pr_number": 1082, "pr_title": "[BC-203] Drop pending blocks from finalized slots", "pr_createdAt": "2020-01-08T15:00:41Z", "pr_url": "https://github.com/ConsenSys/teku/pull/1082", "timeline": [{"oid": "1c48884c47673b91fe3ef9f7d786e68c84f214c9", "url": "https://github.com/ConsenSys/teku/commit/1c48884c47673b91fe3ef9f7d786e68c84f214c9", "message": "Drop pending blocks from finalized slots", "committedDate": "2020-01-08T02:10:57Z", "type": "commit"}, {"oid": "94eeedfd8e5834685d78b6592f5b890e1d26e029", "url": "https://github.com/ConsenSys/teku/commit/94eeedfd8e5834685d78b6592f5b890e1d26e029", "message": "Remove invalid comment", "committedDate": "2020-01-08T15:01:53Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDMyODUyOQ==", "url": "https://github.com/ConsenSys/teku/pull/1082#discussion_r364328529", "bodyText": "Isn't this check redundant? How can a block be in the historical limit but not before a finalized slot?", "author": "cemozerr", "createdAt": "2020-01-08T16:38:45Z", "path": "sync/src/main/java/tech/pegasys/artemis/sync/PendingBlocks.java", "diffHunk": "@@ -131,22 +134,40 @@ void onSlot(final SlotEvent slotEvent) {\n     currentSlot = slotEvent.getSlot();\n     if (currentSlot.mod(historicalBlockTolerance).equals(UnsignedLong.ZERO)) {\n       // Purge old blocks\n-      pruneBlocks(isTooOld());\n+      prune();\n     }\n   }\n \n+  @Subscribe\n+  void onFinalizedCheckpoint(final FinalizedCheckpointEvent finalizedCheckpointEvent) {\n+    this.latestFinalizedSlot = finalizedCheckpointEvent.getFinalizedSlot();\n+  }\n+\n+  @VisibleForTesting\n+  void prune() {\n+    pruneBlocks(this::isTooOld);\n+  }\n+\n   private boolean shouldIgnoreBlock(final BeaconBlock block) {\n-    return isTooOld().test(block) || isFromFuture().test(block);\n+    return isTooOld(block) || isFromFarFuture(block);\n   }\n \n-  private Predicate<BeaconBlock> isTooOld() {\n-    final UnsignedLong slot = calculateBlockAgeLimit();\n-    return (block) -> block.getSlot().compareTo(slot) <= 0;\n+  private boolean isTooOld(final BeaconBlock block) {\n+    return isFromAFinalizedSlot(block) || isOutsideOfHistoricalLimit(block);\n   }\n \n-  private Predicate<BeaconBlock> isFromFuture() {\n+  private boolean isFromFarFuture(final BeaconBlock block) {\n     final UnsignedLong slot = (calculateFutureBlockLimit());\n-    return (block) -> block.getSlot().compareTo(slot) > 0;\n+    return block.getSlot().compareTo(slot) > 0;\n+  }\n+\n+  private boolean isOutsideOfHistoricalLimit(final BeaconBlock block) {", "originalCommit": "94eeedfd8e5834685d78b6592f5b890e1d26e029", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDM3MzM5MQ==", "url": "https://github.com/ConsenSys/teku/pull/1082#discussion_r364373391", "bodyText": "This check should only matter when we're out of sync.  It will prevent us from accumulating a huge set of pending blocks while we're doing our initial sync.", "author": "mbaxter", "createdAt": "2020-01-08T18:19:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDMyODUyOQ=="}], "type": "inlineReview"}]}