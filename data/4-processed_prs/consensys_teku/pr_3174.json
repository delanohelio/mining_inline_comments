{"pr_number": 3174, "pr_title": "Implement post voluntary exit handler", "pr_createdAt": "2020-11-06T20:30:06Z", "pr_url": "https://github.com/ConsenSys/teku/pull/3174", "timeline": [{"oid": "ead4b18f9210460315cc4a64c5ad16ade01cca1e", "url": "https://github.com/ConsenSys/teku/commit/ead4b18f9210460315cc4a64c5ad16ade01cca1e", "message": "Implement post voluntary exit handler and unit tests", "committedDate": "2020-11-06T20:27:37Z", "type": "commit"}, {"oid": "1b550e29d9bb7af56387b394332d8c596ec3c523", "url": "https://github.com/ConsenSys/teku/commit/1b550e29d9bb7af56387b394332d8c596ec3c523", "message": "Run spotless", "committedDate": "2020-11-06T20:28:23Z", "type": "commit"}, {"oid": "464e30989028bc4d14a3e0e7c5d5e857f6daa186", "url": "https://github.com/ConsenSys/teku/commit/464e30989028bc4d14a3e0e7c5d5e857f6daa186", "message": "Fix async code", "committedDate": "2020-11-06T21:26:14Z", "type": "commit"}, {"oid": "c947f33d3a964befd4c5de7b043107679d627332", "url": "https://github.com/ConsenSys/teku/commit/c947f33d3a964befd4c5de7b043107679d627332", "message": "Add unit test", "committedDate": "2020-11-06T21:46:54Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTQ4MDc5Mw==", "url": "https://github.com/ConsenSys/teku/pull/3174#discussion_r519480793", "bodyText": "call other constructor (then single call to super)", "author": "rolfyone", "createdAt": "2020-11-08T21:41:29Z", "path": "data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/handlers/v1/beacon/PostVoluntaryExit.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.beaconrestapi.handlers.v1.beacon;\n+\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_BAD_REQUEST;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_INTERNAL_ERROR;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_OK;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.TAG_V1_BEACON;\n+import static tech.pegasys.teku.infrastructure.http.HttpStatusCodes.SC_BAD_REQUEST;\n+import static tech.pegasys.teku.infrastructure.http.HttpStatusCodes.SC_OK;\n+\n+import com.fasterxml.jackson.databind.JsonMappingException;\n+import io.javalin.http.Context;\n+import io.javalin.plugin.openapi.annotations.HttpMethod;\n+import io.javalin.plugin.openapi.annotations.OpenApi;\n+import io.javalin.plugin.openapi.annotations.OpenApiContent;\n+import io.javalin.plugin.openapi.annotations.OpenApiRequestBody;\n+import io.javalin.plugin.openapi.annotations.OpenApiResponse;\n+import tech.pegasys.teku.api.DataProvider;\n+import tech.pegasys.teku.api.NodeDataProvider;\n+import tech.pegasys.teku.api.schema.SignedVoluntaryExit;\n+import tech.pegasys.teku.beaconrestapi.handlers.AbstractHandler;\n+import tech.pegasys.teku.beaconrestapi.schema.BadRequest;\n+import tech.pegasys.teku.provider.JsonProvider;\n+import tech.pegasys.teku.statetransition.validation.InternalValidationResult;\n+\n+public class PostVoluntaryExit extends AbstractHandler {\n+  public static final String ROUTE = \"/eth/v1/beacon/pool/voluntary_exits\";\n+  private final NodeDataProvider nodeDataProvider;\n+\n+  public PostVoluntaryExit(final DataProvider dataProvider, final JsonProvider jsonProvider) {\n+    super(jsonProvider);\n+    this.nodeDataProvider = dataProvider.getNodeDataProvider();", "originalCommit": "c947f33d3a964befd4c5de7b043107679d627332", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTQ4MDg0MQ==", "url": "https://github.com/ConsenSys/teku/pull/3174#discussion_r519480841", "bodyText": "drop 'object'", "author": "rolfyone", "createdAt": "2020-11-08T21:41:55Z", "path": "data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/handlers/v1/beacon/PostVoluntaryExit.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.beaconrestapi.handlers.v1.beacon;\n+\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_BAD_REQUEST;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_INTERNAL_ERROR;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_OK;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.TAG_V1_BEACON;\n+import static tech.pegasys.teku.infrastructure.http.HttpStatusCodes.SC_BAD_REQUEST;\n+import static tech.pegasys.teku.infrastructure.http.HttpStatusCodes.SC_OK;\n+\n+import com.fasterxml.jackson.databind.JsonMappingException;\n+import io.javalin.http.Context;\n+import io.javalin.plugin.openapi.annotations.HttpMethod;\n+import io.javalin.plugin.openapi.annotations.OpenApi;\n+import io.javalin.plugin.openapi.annotations.OpenApiContent;\n+import io.javalin.plugin.openapi.annotations.OpenApiRequestBody;\n+import io.javalin.plugin.openapi.annotations.OpenApiResponse;\n+import tech.pegasys.teku.api.DataProvider;\n+import tech.pegasys.teku.api.NodeDataProvider;\n+import tech.pegasys.teku.api.schema.SignedVoluntaryExit;\n+import tech.pegasys.teku.beaconrestapi.handlers.AbstractHandler;\n+import tech.pegasys.teku.beaconrestapi.schema.BadRequest;\n+import tech.pegasys.teku.provider.JsonProvider;\n+import tech.pegasys.teku.statetransition.validation.InternalValidationResult;\n+\n+public class PostVoluntaryExit extends AbstractHandler {\n+  public static final String ROUTE = \"/eth/v1/beacon/pool/voluntary_exits\";\n+  private final NodeDataProvider nodeDataProvider;\n+\n+  public PostVoluntaryExit(final DataProvider dataProvider, final JsonProvider jsonProvider) {\n+    super(jsonProvider);\n+    this.nodeDataProvider = dataProvider.getNodeDataProvider();\n+  }\n+\n+  public PostVoluntaryExit(final NodeDataProvider provider, final JsonProvider jsonProvider) {\n+    super(jsonProvider);\n+    this.nodeDataProvider = provider;\n+  }\n+\n+  @OpenApi(\n+      path = ROUTE,\n+      method = HttpMethod.POST,\n+      summary = \"Submit signed voluntary exit object\",", "originalCommit": "c947f33d3a964befd4c5de7b043107679d627332", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTQ4MDg5Nw==", "url": "https://github.com/ConsenSys/teku/pull/3174#discussion_r519480897", "bodyText": "if it passes", "author": "rolfyone", "createdAt": "2020-11-08T21:42:29Z", "path": "data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/handlers/v1/beacon/PostVoluntaryExit.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.beaconrestapi.handlers.v1.beacon;\n+\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_BAD_REQUEST;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_INTERNAL_ERROR;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_OK;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.TAG_V1_BEACON;\n+import static tech.pegasys.teku.infrastructure.http.HttpStatusCodes.SC_BAD_REQUEST;\n+import static tech.pegasys.teku.infrastructure.http.HttpStatusCodes.SC_OK;\n+\n+import com.fasterxml.jackson.databind.JsonMappingException;\n+import io.javalin.http.Context;\n+import io.javalin.plugin.openapi.annotations.HttpMethod;\n+import io.javalin.plugin.openapi.annotations.OpenApi;\n+import io.javalin.plugin.openapi.annotations.OpenApiContent;\n+import io.javalin.plugin.openapi.annotations.OpenApiRequestBody;\n+import io.javalin.plugin.openapi.annotations.OpenApiResponse;\n+import tech.pegasys.teku.api.DataProvider;\n+import tech.pegasys.teku.api.NodeDataProvider;\n+import tech.pegasys.teku.api.schema.SignedVoluntaryExit;\n+import tech.pegasys.teku.beaconrestapi.handlers.AbstractHandler;\n+import tech.pegasys.teku.beaconrestapi.schema.BadRequest;\n+import tech.pegasys.teku.provider.JsonProvider;\n+import tech.pegasys.teku.statetransition.validation.InternalValidationResult;\n+\n+public class PostVoluntaryExit extends AbstractHandler {\n+  public static final String ROUTE = \"/eth/v1/beacon/pool/voluntary_exits\";\n+  private final NodeDataProvider nodeDataProvider;\n+\n+  public PostVoluntaryExit(final DataProvider dataProvider, final JsonProvider jsonProvider) {\n+    super(jsonProvider);\n+    this.nodeDataProvider = dataProvider.getNodeDataProvider();\n+  }\n+\n+  public PostVoluntaryExit(final NodeDataProvider provider, final JsonProvider jsonProvider) {\n+    super(jsonProvider);\n+    this.nodeDataProvider = provider;\n+  }\n+\n+  @OpenApi(\n+      path = ROUTE,\n+      method = HttpMethod.POST,\n+      summary = \"Submit signed voluntary exit object\",\n+      tags = {TAG_V1_BEACON},\n+      description =\n+          \"Submits signed voluntary exit object to node's pool and if passes validation node MUST broadcast it to network.\",", "originalCommit": "c947f33d3a964befd4c5de7b043107679d627332", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTQ4MTA5NQ==", "url": "https://github.com/ConsenSys/teku/pull/3174#discussion_r519481095", "bodyText": "use BadRequest.badRequest to get json", "author": "rolfyone", "createdAt": "2020-11-08T21:44:22Z", "path": "data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/handlers/v1/beacon/PostVoluntaryExit.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.beaconrestapi.handlers.v1.beacon;\n+\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_BAD_REQUEST;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_INTERNAL_ERROR;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_OK;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.TAG_V1_BEACON;\n+import static tech.pegasys.teku.infrastructure.http.HttpStatusCodes.SC_BAD_REQUEST;\n+import static tech.pegasys.teku.infrastructure.http.HttpStatusCodes.SC_OK;\n+\n+import com.fasterxml.jackson.databind.JsonMappingException;\n+import io.javalin.http.Context;\n+import io.javalin.plugin.openapi.annotations.HttpMethod;\n+import io.javalin.plugin.openapi.annotations.OpenApi;\n+import io.javalin.plugin.openapi.annotations.OpenApiContent;\n+import io.javalin.plugin.openapi.annotations.OpenApiRequestBody;\n+import io.javalin.plugin.openapi.annotations.OpenApiResponse;\n+import tech.pegasys.teku.api.DataProvider;\n+import tech.pegasys.teku.api.NodeDataProvider;\n+import tech.pegasys.teku.api.schema.SignedVoluntaryExit;\n+import tech.pegasys.teku.beaconrestapi.handlers.AbstractHandler;\n+import tech.pegasys.teku.beaconrestapi.schema.BadRequest;\n+import tech.pegasys.teku.provider.JsonProvider;\n+import tech.pegasys.teku.statetransition.validation.InternalValidationResult;\n+\n+public class PostVoluntaryExit extends AbstractHandler {\n+  public static final String ROUTE = \"/eth/v1/beacon/pool/voluntary_exits\";\n+  private final NodeDataProvider nodeDataProvider;\n+\n+  public PostVoluntaryExit(final DataProvider dataProvider, final JsonProvider jsonProvider) {\n+    super(jsonProvider);\n+    this.nodeDataProvider = dataProvider.getNodeDataProvider();\n+  }\n+\n+  public PostVoluntaryExit(final NodeDataProvider provider, final JsonProvider jsonProvider) {\n+    super(jsonProvider);\n+    this.nodeDataProvider = provider;\n+  }\n+\n+  @OpenApi(\n+      path = ROUTE,\n+      method = HttpMethod.POST,\n+      summary = \"Submit signed voluntary exit object\",\n+      tags = {TAG_V1_BEACON},\n+      description =\n+          \"Submits signed voluntary exit object to node's pool and if passes validation node MUST broadcast it to network.\",\n+      requestBody =\n+          @OpenApiRequestBody(content = {@OpenApiContent(from = SignedVoluntaryExit.class)}),\n+      responses = {\n+        @OpenApiResponse(\n+            status = RES_OK,\n+            description =\n+                \"Signed voluntary exit has been successfully validated, added to the pool, and broadcast.\"),\n+        @OpenApiResponse(\n+            status = RES_BAD_REQUEST,\n+            description = \"Invalid voluntary exit, it will never pass validation so it's rejected\"),\n+        @OpenApiResponse(status = RES_INTERNAL_ERROR),\n+      })\n+  @Override\n+  public void handle(final Context ctx) throws Exception {\n+    try {\n+      final SignedVoluntaryExit exit =\n+          jsonProvider.jsonToObject(ctx.body(), SignedVoluntaryExit.class);\n+      InternalValidationResult result = nodeDataProvider.postVoluntaryExit(exit).join();\n+      if (result.equals(InternalValidationResult.IGNORE)\n+          || result.equals(InternalValidationResult.REJECT)) {\n+        ctx.status(SC_BAD_REQUEST);\n+        ctx.result(\"Invalid voluntary exit, it will never pass validation so it's rejected\");", "originalCommit": "c947f33d3a964befd4c5de7b043107679d627332", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTQ4MTI0Ng==", "url": "https://github.com/ConsenSys/teku/pull/3174#discussion_r519481246", "bodyText": "accept the object that is the subject of the test rather than any, and rename it from slashing because its not a slashing in this test.", "author": "rolfyone", "createdAt": "2020-11-08T21:45:25Z", "path": "data/beaconrestapi/src/test/java/tech/pegasys/teku/beaconrestapi/handlers/v1/beacon/PostVoluntaryExitTest.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.beaconrestapi.handlers.v1.beacon;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_BAD_REQUEST;\n+import static javax.servlet.http.HttpServletResponse.SC_OK;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import io.javalin.http.Context;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import tech.pegasys.teku.api.NodeDataProvider;\n+import tech.pegasys.teku.api.schema.SignedVoluntaryExit;\n+import tech.pegasys.teku.datastructures.util.DataStructureUtil;\n+import tech.pegasys.teku.infrastructure.async.SafeFuture;\n+import tech.pegasys.teku.provider.JsonProvider;\n+import tech.pegasys.teku.statetransition.validation.InternalValidationResult;\n+\n+public class PostVoluntaryExitTest {\n+  private final DataStructureUtil dataStructureUtil = new DataStructureUtil();\n+  private Context context = mock(Context.class);\n+  private NodeDataProvider provider = mock(NodeDataProvider.class);\n+  private final JsonProvider jsonProvider = new JsonProvider();\n+  private PostVoluntaryExit handler;\n+\n+  @BeforeEach\n+  public void setup() {\n+    handler = new PostVoluntaryExit(provider, jsonProvider);\n+  }\n+\n+  @Test\n+  void shouldBeAbleToSubmitSlashing() throws Exception {\n+    final SignedVoluntaryExit slashing =\n+        new SignedVoluntaryExit(dataStructureUtil.randomSignedVoluntaryExit());\n+    when(context.body()).thenReturn(jsonProvider.objectToJSON(slashing));\n+    when(provider.postVoluntaryExit(any()))", "originalCommit": "c947f33d3a964befd4c5de7b043107679d627332", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTQ4MTMwNg==", "url": "https://github.com/ConsenSys/teku/pull/3174#discussion_r519481306", "bodyText": "same as above, accept object not any and rename from slashing", "author": "rolfyone", "createdAt": "2020-11-08T21:45:54Z", "path": "data/beaconrestapi/src/test/java/tech/pegasys/teku/beaconrestapi/handlers/v1/beacon/PostVoluntaryExitTest.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.beaconrestapi.handlers.v1.beacon;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_BAD_REQUEST;\n+import static javax.servlet.http.HttpServletResponse.SC_OK;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import io.javalin.http.Context;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import tech.pegasys.teku.api.NodeDataProvider;\n+import tech.pegasys.teku.api.schema.SignedVoluntaryExit;\n+import tech.pegasys.teku.datastructures.util.DataStructureUtil;\n+import tech.pegasys.teku.infrastructure.async.SafeFuture;\n+import tech.pegasys.teku.provider.JsonProvider;\n+import tech.pegasys.teku.statetransition.validation.InternalValidationResult;\n+\n+public class PostVoluntaryExitTest {\n+  private final DataStructureUtil dataStructureUtil = new DataStructureUtil();\n+  private Context context = mock(Context.class);\n+  private NodeDataProvider provider = mock(NodeDataProvider.class);\n+  private final JsonProvider jsonProvider = new JsonProvider();\n+  private PostVoluntaryExit handler;\n+\n+  @BeforeEach\n+  public void setup() {\n+    handler = new PostVoluntaryExit(provider, jsonProvider);\n+  }\n+\n+  @Test\n+  void shouldBeAbleToSubmitSlashing() throws Exception {\n+    final SignedVoluntaryExit slashing =\n+        new SignedVoluntaryExit(dataStructureUtil.randomSignedVoluntaryExit());\n+    when(context.body()).thenReturn(jsonProvider.objectToJSON(slashing));\n+    when(provider.postVoluntaryExit(any()))\n+        .thenReturn(SafeFuture.completedFuture(InternalValidationResult.ACCEPT));\n+    handler.handle(context);\n+\n+    verify(context).status(SC_OK);\n+  }\n+\n+  @Test\n+  void shouldReturnBadRequest_ifVoluntaryExitInvalid() throws Exception {\n+    final SignedVoluntaryExit slashing =\n+        new SignedVoluntaryExit(dataStructureUtil.randomSignedVoluntaryExit());\n+    when(context.body()).thenReturn(jsonProvider.objectToJSON(slashing));\n+    when(provider.postVoluntaryExit(any()))", "originalCommit": "c947f33d3a964befd4c5de7b043107679d627332", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTQ4MTM1OQ==", "url": "https://github.com/ConsenSys/teku/pull/3174#discussion_r519481359", "bodyText": "verify provider.postVoluntaryExit was never called", "author": "rolfyone", "createdAt": "2020-11-08T21:46:19Z", "path": "data/beaconrestapi/src/test/java/tech/pegasys/teku/beaconrestapi/handlers/v1/beacon/PostVoluntaryExitTest.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.beaconrestapi.handlers.v1.beacon;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_BAD_REQUEST;\n+import static javax.servlet.http.HttpServletResponse.SC_OK;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import io.javalin.http.Context;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import tech.pegasys.teku.api.NodeDataProvider;\n+import tech.pegasys.teku.api.schema.SignedVoluntaryExit;\n+import tech.pegasys.teku.datastructures.util.DataStructureUtil;\n+import tech.pegasys.teku.infrastructure.async.SafeFuture;\n+import tech.pegasys.teku.provider.JsonProvider;\n+import tech.pegasys.teku.statetransition.validation.InternalValidationResult;\n+\n+public class PostVoluntaryExitTest {\n+  private final DataStructureUtil dataStructureUtil = new DataStructureUtil();\n+  private Context context = mock(Context.class);\n+  private NodeDataProvider provider = mock(NodeDataProvider.class);\n+  private final JsonProvider jsonProvider = new JsonProvider();\n+  private PostVoluntaryExit handler;\n+\n+  @BeforeEach\n+  public void setup() {\n+    handler = new PostVoluntaryExit(provider, jsonProvider);\n+  }\n+\n+  @Test\n+  void shouldBeAbleToSubmitSlashing() throws Exception {\n+    final SignedVoluntaryExit slashing =\n+        new SignedVoluntaryExit(dataStructureUtil.randomSignedVoluntaryExit());\n+    when(context.body()).thenReturn(jsonProvider.objectToJSON(slashing));\n+    when(provider.postVoluntaryExit(any()))\n+        .thenReturn(SafeFuture.completedFuture(InternalValidationResult.ACCEPT));\n+    handler.handle(context);\n+\n+    verify(context).status(SC_OK);\n+  }\n+\n+  @Test\n+  void shouldReturnBadRequest_ifVoluntaryExitInvalid() throws Exception {\n+    final SignedVoluntaryExit slashing =\n+        new SignedVoluntaryExit(dataStructureUtil.randomSignedVoluntaryExit());\n+    when(context.body()).thenReturn(jsonProvider.objectToJSON(slashing));\n+    when(provider.postVoluntaryExit(any()))\n+        .thenReturn(SafeFuture.completedFuture(InternalValidationResult.REJECT));\n+    handler.handle(context);\n+\n+    verify(context).status(SC_BAD_REQUEST);\n+  }\n+\n+  @Test\n+  void shouldReturnBadRequest() throws Exception {\n+    when(context.body()).thenReturn(\"{\\\"a\\\": \\\"field\\\"}\");\n+    handler.handle(context);\n+\n+    verify(context).status(SC_BAD_REQUEST);", "originalCommit": "c947f33d3a964befd4c5de7b043107679d627332", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTQ4MTQxMA==", "url": "https://github.com/ConsenSys/teku/pull/3174#discussion_r519481410", "bodyText": "should really verify the provider.postVoluntaryExit was called", "author": "rolfyone", "createdAt": "2020-11-08T21:46:45Z", "path": "data/beaconrestapi/src/test/java/tech/pegasys/teku/beaconrestapi/handlers/v1/beacon/PostVoluntaryExitTest.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.beaconrestapi.handlers.v1.beacon;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_BAD_REQUEST;\n+import static javax.servlet.http.HttpServletResponse.SC_OK;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import io.javalin.http.Context;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import tech.pegasys.teku.api.NodeDataProvider;\n+import tech.pegasys.teku.api.schema.SignedVoluntaryExit;\n+import tech.pegasys.teku.datastructures.util.DataStructureUtil;\n+import tech.pegasys.teku.infrastructure.async.SafeFuture;\n+import tech.pegasys.teku.provider.JsonProvider;\n+import tech.pegasys.teku.statetransition.validation.InternalValidationResult;\n+\n+public class PostVoluntaryExitTest {\n+  private final DataStructureUtil dataStructureUtil = new DataStructureUtil();\n+  private Context context = mock(Context.class);\n+  private NodeDataProvider provider = mock(NodeDataProvider.class);\n+  private final JsonProvider jsonProvider = new JsonProvider();\n+  private PostVoluntaryExit handler;\n+\n+  @BeforeEach\n+  public void setup() {\n+    handler = new PostVoluntaryExit(provider, jsonProvider);\n+  }\n+\n+  @Test\n+  void shouldBeAbleToSubmitSlashing() throws Exception {\n+    final SignedVoluntaryExit slashing =\n+        new SignedVoluntaryExit(dataStructureUtil.randomSignedVoluntaryExit());\n+    when(context.body()).thenReturn(jsonProvider.objectToJSON(slashing));\n+    when(provider.postVoluntaryExit(any()))\n+        .thenReturn(SafeFuture.completedFuture(InternalValidationResult.ACCEPT));\n+    handler.handle(context);\n+\n+    verify(context).status(SC_OK);", "originalCommit": "c947f33d3a964befd4c5de7b043107679d627332", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "156865cb79644e15c5a59dc054f97e809f4367ad", "url": "https://github.com/ConsenSys/teku/commit/156865cb79644e15c5a59dc054f97e809f4367ad", "message": "Incorporate feedback", "committedDate": "2020-11-09T18:24:57Z", "type": "commit"}, {"oid": "fb25d14a778fc97f2e483d5c4620b9764c48c5c0", "url": "https://github.com/ConsenSys/teku/commit/fb25d14a778fc97f2e483d5c4620b9764c48c5c0", "message": "Integrate and add integration test", "committedDate": "2020-11-09T18:39:56Z", "type": "commit"}, {"oid": "fddd23bf92657b9cf7f2a12d9d15fa315233c6c8", "url": "https://github.com/ConsenSys/teku/commit/fddd23bf92657b9cf7f2a12d9d15fa315233c6c8", "message": "Clean up", "committedDate": "2020-11-09T18:47:04Z", "type": "commit"}, {"oid": "f5d5cff6fe738d586d54e0d4cbb56c6f2fd429d0", "url": "https://github.com/ConsenSys/teku/commit/f5d5cff6fe738d586d54e0d4cbb56c6f2fd429d0", "message": "Merge remote-tracking branch 'remotes/origin/master' into implementProposerSlashinPostHandler\n\n# Conflicts:\n#\tdata/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/BeaconRestApi.java\n#\tdata/provider/src/main/java/tech/pegasys/teku/api/NodeDataProvider.java", "committedDate": "2020-11-09T21:06:38Z", "type": "commit"}, {"oid": "f5d5cff6fe738d586d54e0d4cbb56c6f2fd429d0", "url": "https://github.com/ConsenSys/teku/commit/f5d5cff6fe738d586d54e0d4cbb56c6f2fd429d0", "message": "Merge remote-tracking branch 'remotes/origin/master' into implementProposerSlashinPostHandler\n\n# Conflicts:\n#\tdata/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/BeaconRestApi.java\n#\tdata/provider/src/main/java/tech/pegasys/teku/api/NodeDataProvider.java", "committedDate": "2020-11-09T21:06:38Z", "type": "forcePushed"}]}