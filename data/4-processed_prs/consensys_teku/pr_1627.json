{"pr_number": 1627, "pr_title": "Save protoarray votes on disk", "pr_createdAt": "2020-04-20T23:49:26Z", "pr_url": "https://github.com/ConsenSys/teku/pull/1627", "timeline": [{"oid": "b3c6fe9f6f83da52f819373386a471f4fb300fc0", "url": "https://github.com/ConsenSys/teku/commit/b3c6fe9f6f83da52f819373386a471f4fb300fc0", "message": "Start move to save votes on disk", "committedDate": "2020-04-20T23:48:31Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc3MjU1NA==", "url": "https://github.com/ConsenSys/teku/pull/1627#discussion_r411772554", "bodyText": "I would only add these to MutableStore.  Seems weird but VoteTracker is mutable so you can't be allowed to get one from an immutable store.", "author": "ajsutton", "createdAt": "2020-04-21T00:00:09Z", "path": "ethereum/datastructures/src/main/java/tech/pegasys/artemis/datastructures/forkchoice/ReadOnlyStore.java", "diffHunk": "@@ -48,4 +52,8 @@\n   BeaconState getCheckpointState(Checkpoint checkpoint);\n \n   boolean containsCheckpointState(Checkpoint checkpoint);\n+\n+  VoteTracker getVote(int validatorIndex);\n+\n+  Collection<VoteTracker> getVotes();", "originalCommit": "b3c6fe9f6f83da52f819373386a471f4fb300fc0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc3MzQ3MA==", "url": "https://github.com/ConsenSys/teku/pull/1627#discussion_r411773470", "bodyText": "Probably don't actually need getVotes either - just getVote and maybe a getVoteCount but not sure even that will be required.", "author": "ajsutton", "createdAt": "2020-04-21T00:02:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc3MjU1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjM3MTQxNA==", "url": "https://github.com/ConsenSys/teku/pull/1627#discussion_r412371414", "bodyText": "Makes sense.", "author": "cemozerr", "createdAt": "2020-04-21T17:57:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc3MjU1NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc3Mjg4MQ==", "url": "https://github.com/ConsenSys/teku/pull/1627#discussion_r411772881", "bodyText": "This copy should be done inside Store.  There should be no way to modify things in the Store without going via the transaction.", "author": "ajsutton", "createdAt": "2020-04-21T00:01:08Z", "path": "protoarray/src/main/java/tech/pegasys/artemis/protoarray/ProtoArrayForkChoiceStrategy.java", "diffHunk": "@@ -139,13 +139,15 @@ private static void processBlockAtStartup(\n         store.getBlockState(block.hash_tree_root()).getFinalized_checkpoint().getEpoch());\n   }\n \n-  void processAttestation(int validatorIndex, Bytes32 blockRoot, UnsignedLong targetEpoch) {\n-    VoteTracker vote = votes.get(validatorIndex);\n+  void processAttestation(MutableStore store, int validatorIndex, Bytes32 blockRoot, UnsignedLong targetEpoch) {\n+    VoteTracker vote = store.getVote(validatorIndex).copy();", "originalCommit": "b3c6fe9f6f83da52f819373386a471f4fb300fc0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjMwNzcxNg==", "url": "https://github.com/ConsenSys/teku/pull/1627#discussion_r412307716", "bodyText": "Done.", "author": "cemozerr", "createdAt": "2020-04-21T16:30:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc3Mjg4MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc3MzA3OA==", "url": "https://github.com/ConsenSys/teku/pull/1627#discussion_r411773078", "bodyText": "If you move getVote into Transaction then you won't need to do this - just get the mutable vote and edit it as needed.  When the transaction commits those changes can all be committed as well.", "author": "ajsutton", "createdAt": "2020-04-21T00:01:45Z", "path": "protoarray/src/main/java/tech/pegasys/artemis/protoarray/ProtoArrayForkChoiceStrategy.java", "diffHunk": "@@ -139,13 +139,15 @@ private static void processBlockAtStartup(\n         store.getBlockState(block.hash_tree_root()).getFinalized_checkpoint().getEpoch());\n   }\n \n-  void processAttestation(int validatorIndex, Bytes32 blockRoot, UnsignedLong targetEpoch) {\n-    VoteTracker vote = votes.get(validatorIndex);\n+  void processAttestation(MutableStore store, int validatorIndex, Bytes32 blockRoot, UnsignedLong targetEpoch) {\n+    VoteTracker vote = store.getVote(validatorIndex).copy();\n \n     if (targetEpoch.compareTo(vote.getNextEpoch()) > 0 || vote.equals(VoteTracker.Default())) {\n       vote.setNextRoot(blockRoot);\n       vote.setNextEpoch(targetEpoch);\n     }\n+\n+    store.setVote(validatorIndex, vote);", "originalCommit": "b3c6fe9f6f83da52f819373386a471f4fb300fc0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjMwNzYzOQ==", "url": "https://github.com/ConsenSys/teku/pull/1627#discussion_r412307639", "bodyText": "Makes sense.", "author": "cemozerr", "createdAt": "2020-04-21T16:30:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc3MzA3OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc3MzE4MQ==", "url": "https://github.com/ConsenSys/teku/pull/1627#discussion_r411773181", "bodyText": "This will need to be a mutable store because votes are being updated.", "author": "ajsutton", "createdAt": "2020-04-21T00:02:03Z", "path": "protoarray/src/main/java/tech/pegasys/artemis/protoarray/ProtoArrayForkChoiceStrategy.java", "diffHunk": "@@ -278,11 +280,12 @@ public boolean containsBlock(Bytes32 blockRoot) {\n    */\n   static List<Long> computeDeltas(\n       Map<Bytes32, Integer> indices,\n-      ElasticList<VoteTracker> votes,\n+      ReadOnlyStore store,", "originalCommit": "b3c6fe9f6f83da52f819373386a471f4fb300fc0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjM3MTEyMw==", "url": "https://github.com/ConsenSys/teku/pull/1627#discussion_r412371123", "bodyText": "Makes sense.", "author": "cemozerr", "createdAt": "2020-04-21T17:57:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc3MzE4MQ=="}], "type": "inlineReview"}, {"oid": "58dd1c5690dfac2bd432e2ee0daca6feb31fd354", "url": "https://github.com/ConsenSys/teku/commit/58dd1c5690dfac2bd432e2ee0daca6feb31fd354", "message": "Finish integration & start fixing tests", "committedDate": "2020-04-21T17:56:39Z", "type": "commit"}, {"oid": "35e0ef5fee8c5873bde7344e2011d9777d131224", "url": "https://github.com/ConsenSys/teku/commit/35e0ef5fee8c5873bde7344e2011d9777d131224", "message": "Update error message", "committedDate": "2020-04-21T17:58:33Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQ2MzAzMw==", "url": "https://github.com/ConsenSys/teku/pull/1627#discussion_r412463033", "bodyText": "This is only for now, I will uncomment in the future.", "author": "cemozerr", "createdAt": "2020-04-21T20:18:45Z", "path": "protoarray/src/main/java/tech/pegasys/artemis/protoarray/ProtoArrayForkChoiceStrategy.java", "diffHunk": "@@ -237,23 +238,23 @@ public boolean containsBlock(Bytes32 blockRoot) {\n     }\n   }\n \n-  public Optional<Checkpoint> latestMessage(int validatorIndex) {\n-    votesLock.readLock().lock();\n-    try {\n-      if (validatorIndex >= votes.size()) {\n-        return Optional.empty();\n-      } else {\n-        VoteTracker vote = votes.get(validatorIndex);\n-        if (vote.equals(VoteTracker.Default())) {\n-          return Optional.empty();\n-        } else {\n-          return Optional.of(new Checkpoint(vote.getNextEpoch(), vote.getNextRoot()));\n-        }\n-      }\n-    } finally {\n-      votesLock.readLock().unlock();\n-    }\n-  }\n+  //  public Optional<Checkpoint> latestMessage(int validatorIndex) {", "originalCommit": "35e0ef5fee8c5873bde7344e2011d9777d131224", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzE4OTQxNA==", "url": "https://github.com/ConsenSys/teku/pull/1627#discussion_r413189414", "bodyText": "Removed this now because latest messages are stored in Store now.", "author": "cemozerr", "createdAt": "2020-04-22T17:46:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQ2MzAzMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQ2Mzg1Mg==", "url": "https://github.com/ConsenSys/teku/pull/1627#discussion_r412463852", "bodyText": "Instead of continuing whenever the validator has never voted, we simply don't iterate through those validators now, which is also more efficient.", "author": "cemozerr", "createdAt": "2020-04-21T20:20:10Z", "path": "protoarray/src/main/java/tech/pegasys/artemis/protoarray/ProtoArrayForkChoiceStrategy.java", "diffHunk": "@@ -271,26 +272,20 @@ public boolean containsBlock(Bytes32 blockRoot) {\n    * </ul>\n    *\n    * @param indices\n-   * @param votes\n+   * @param store\n    * @param oldBalances\n    * @param newBalances\n    * @return\n    */\n   static List<Long> computeDeltas(\n+      MutableStore store,\n       Map<Bytes32, Integer> indices,\n-      ElasticList<VoteTracker> votes,\n       List<UnsignedLong> oldBalances,\n       List<UnsignedLong> newBalances) {\n     List<Long> deltas = new ArrayList<>(Collections.nCopies(indices.size(), 0L));\n \n-    for (int validatorIndex = 0; validatorIndex < votes.size(); validatorIndex++) {\n-      VoteTracker vote = votes.get(validatorIndex);\n-", "originalCommit": "35e0ef5fee8c5873bde7344e2011d9777d131224", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQ4NDE2NQ==", "url": "https://github.com/ConsenSys/teku/pull/1627#discussion_r412484165", "bodyText": "Does it matter that we will no longer iterate through votes in order of validator index? I don't think it will but worth being sure.", "author": "ajsutton", "createdAt": "2020-04-21T20:54:02Z", "path": "storage/src/main/java/tech/pegasys/artemis/storage/Store.java", "diffHunk": "@@ -235,6 +238,16 @@ public boolean containsCheckpointState(Checkpoint checkpoint) {\n     }\n   }\n \n+  @Override\n+  public Set<Integer> getVotedValidatorIndices() {\n+    readLock.lock();\n+    try {\n+      return votes.keySet();", "originalCommit": "35e0ef5fee8c5873bde7344e2011d9777d131224", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjUzNjc1NA==", "url": "https://github.com/ConsenSys/teku/pull/1627#discussion_r412536754", "bodyText": "Yep, I'm pretty sure in this scenario. The order of iterating through blocks matter but not validator indices in protoarray. Still tagging @protolambda in case he corrects me.", "author": "cemozerr", "createdAt": "2020-04-21T22:32:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQ4NDE2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjU0NTEyMg==", "url": "https://github.com/ConsenSys/teku/pull/1627#discussion_r412545122", "bodyText": "Well, don't resolve the comment then, haha. Found it though. Yes, the latest set of votes is just a sum for forkchoice, and it's a set, so no duplicates. No order required \ud83d\udc4d", "author": "protolambda", "createdAt": "2020-04-21T22:51:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQ4NDE2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjU1MTcxNQ==", "url": "https://github.com/ConsenSys/teku/pull/1627#discussion_r412551715", "bodyText": "Hahah my bad! I'm trigger happy with resolving comments :D", "author": "cemozerr", "createdAt": "2020-04-21T23:06:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQ4NDE2NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQ4NDk3OQ==", "url": "https://github.com/ConsenSys/teku/pull/1627#discussion_r412484979", "bodyText": "You'd be better off just iterating through the value set or entry set of the votes map since you need both the key and value here.\nAlso, getVotedValidatorIndices will return entries for every validator that we've ever retrieved - they may still have a current and next root of zero depending on whether anything was changed after it was retrieved.", "author": "ajsutton", "createdAt": "2020-04-21T20:55:36Z", "path": "protoarray/src/main/java/tech/pegasys/artemis/protoarray/ProtoArrayForkChoiceStrategy.java", "diffHunk": "@@ -271,26 +272,20 @@ public boolean containsBlock(Bytes32 blockRoot) {\n    * </ul>\n    *\n    * @param indices\n-   * @param votes\n+   * @param store\n    * @param oldBalances\n    * @param newBalances\n    * @return\n    */\n   static List<Long> computeDeltas(\n+      MutableStore store,\n       Map<Bytes32, Integer> indices,\n-      ElasticList<VoteTracker> votes,\n       List<UnsignedLong> oldBalances,\n       List<UnsignedLong> newBalances) {\n     List<Long> deltas = new ArrayList<>(Collections.nCopies(indices.size(), 0L));\n \n-    for (int validatorIndex = 0; validatorIndex < votes.size(); validatorIndex++) {\n-      VoteTracker vote = votes.get(validatorIndex);\n-\n-      // There is no need to create a score change if the validator has never voted\n-      // or both their votes are for the zero hash (alias to the genesis block).\n-      if (vote.getCurrentRoot().equals(Bytes32.ZERO) && vote.getNextRoot().equals(Bytes32.ZERO)) {\n-        continue;\n-      }\n+    for (int validatorIndex : store.getVotedValidatorIndices()) {\n+      VoteTracker vote = store.getVote(validatorIndex);", "originalCommit": "35e0ef5fee8c5873bde7344e2011d9777d131224", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjUzMjA3NQ==", "url": "https://github.com/ConsenSys/teku/pull/1627#discussion_r412532075", "bodyText": "We only retrieve validators that have voted because the ones that haven\u2019t voted (i.e. the ones that have current and next root zero) doesn\u2019t matter for protoarray fork choice. For the edge case where we retrieve a validator who had both roots zero, (this is the validators' first time attesting) since the validator never voted before, we have to change one of their roots to something non zero. Thus, all the votes getVotedValidatorIndices return must be non zero. @protolambda do you mind correcting me if I'm wrong?", "author": "cemozerr", "createdAt": "2020-04-21T22:22:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQ4NDk3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjUzNTA2MQ==", "url": "https://github.com/ConsenSys/teku/pull/1627#discussion_r412535061", "bodyText": "I'll still add continue for votes that have both current and next root zero, in case someone else updates votes as discussed offline.", "author": "cemozerr", "createdAt": "2020-04-21T22:29:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQ4NDk3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzE0OTM1NA==", "url": "https://github.com/ConsenSys/teku/pull/1627#discussion_r413149354", "bodyText": "@protolambda any feedback on this?", "author": "cemozerr", "createdAt": "2020-04-22T16:51:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQ4NDk3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzE1MjA4NQ==", "url": "https://github.com/ConsenSys/teku/pull/1627#discussion_r413152085", "bodyText": "looking into it now", "author": "protolambda", "createdAt": "2020-04-22T16:55:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQ4NDk3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzE1NzU1Ng==", "url": "https://github.com/ConsenSys/teku/pull/1627#discussion_r413157556", "bodyText": "I don't think it actually matters too much, but an entry set would technically be better. Both for performance, as understanding the code (get all votes is easier to get right with consistency etc. than it is to get votes one by one). Small details though, good to see this all come together in teku \ud83d\udc4d", "author": "protolambda", "createdAt": "2020-04-22T17:03:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQ4NDk3OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQ4NTY5Nw==", "url": "https://github.com/ConsenSys/teku/pull/1627#discussion_r412485697", "bodyText": "We should only copy the vote when we retrieve it from the underlying Store.  If we already have it in our modified votes we can just return the value as-is.  So probably don't want to use the either method in this case.", "author": "ajsutton", "createdAt": "2020-04-21T20:56:49Z", "path": "storage/src/main/java/tech/pegasys/artemis/storage/Store.java", "diffHunk": "@@ -294,6 +308,18 @@ public void setBestJustifiedCheckpoint(Checkpoint best_justified_checkpoint) {\n       this.best_justified_checkpoint = Optional.of(best_justified_checkpoint);\n     }\n \n+    @Override\n+    public VoteTracker getVote(int validatorIndex) {\n+      VoteTracker vote = either(validatorIndex, votes::get, Store.this.votes::get);\n+      if (vote == null) {\n+        vote = VoteTracker.Default();\n+      } else {\n+        vote = vote.copy();\n+      }\n+      votes.put(validatorIndex, vote);\n+      return vote;", "originalCommit": "35e0ef5fee8c5873bde7344e2011d9777d131224", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjUyNzYyNA==", "url": "https://github.com/ConsenSys/teku/pull/1627#discussion_r412527624", "bodyText": "done.", "author": "cemozerr", "createdAt": "2020-04-21T22:12:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQ4NTY5Nw=="}], "type": "inlineReview"}, {"oid": "90a831c6e0ad4372e1dc7eaa59881e0bff68b538", "url": "https://github.com/ConsenSys/teku/commit/90a831c6e0ad4372e1dc7eaa59881e0bff68b538", "message": "Write & read from disk", "committedDate": "2020-04-21T22:46:05Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjU0NDU2OA==", "url": "https://github.com/ConsenSys/teku/pull/1627#discussion_r412544568", "bodyText": "Nice!", "author": "ajsutton", "createdAt": "2020-04-21T22:50:06Z", "path": "ethereum/datastructures/src/main/java/tech/pegasys/artemis/datastructures/util/SimpleOffsetSerializer.java", "diffHunk": "@@ -73,47 +74,39 @@\n   public static HashMap<Class, ReflectionInformation> classReflectionInfo = new HashMap<>();\n \n   public static void setConstants() {\n-    classReflectionInfo.put(\n-        SignedBeaconBlock.class, new ReflectionInformation(SignedBeaconBlock.class));\n-    classReflectionInfo.put(BeaconBlock.class, new ReflectionInformation(BeaconBlock.class));\n-    classReflectionInfo.put(\n-        BeaconBlockBody.class, new ReflectionInformation(BeaconBlockBody.class));\n-    classReflectionInfo.put(\n-        BeaconBlockHeader.class, new ReflectionInformation(BeaconBlockHeader.class));\n-    classReflectionInfo.put(\n-        SignedBeaconBlockHeader.class, new ReflectionInformation(SignedBeaconBlockHeader.class));\n-    classReflectionInfo.put(Eth1Data.class, new ReflectionInformation(Eth1Data.class));\n-    classReflectionInfo.put(Attestation.class, new ReflectionInformation(Attestation.class));\n-    classReflectionInfo.put(\n-        AttestationData.class, new ReflectionInformation(AttestationData.class));\n-    classReflectionInfo.put(\n-        AttesterSlashing.class, new ReflectionInformation(AttesterSlashing.class));\n-    classReflectionInfo.put(Deposit.class, new ReflectionInformation(Deposit.class));\n-    classReflectionInfo.put(DepositData.class, new ReflectionInformation(DepositData.class));\n-    classReflectionInfo.put(DepositMessage.class, new ReflectionInformation(DepositMessage.class));\n-    classReflectionInfo.put(\n-        IndexedAttestation.class, new ReflectionInformation(IndexedAttestation.class));\n-    classReflectionInfo.put(\n-        ProposerSlashing.class, new ReflectionInformation(ProposerSlashing.class));\n-    classReflectionInfo.put(\n-        SignedVoluntaryExit.class, new ReflectionInformation(SignedVoluntaryExit.class));\n-    classReflectionInfo.put(VoluntaryExit.class, new ReflectionInformation(VoluntaryExit.class));\n-    classReflectionInfo.put(\n-        BeaconStateImpl.class, new ReflectionInformation(BeaconStateImpl.class));\n-    classReflectionInfo.put(Checkpoint.class, new ReflectionInformation(Checkpoint.class));\n-    classReflectionInfo.put(Fork.class, new ReflectionInformation(Fork.class));\n-    classReflectionInfo.put(\n-        HistoricalBatch.class, new ReflectionInformation(HistoricalBatch.class));\n-    classReflectionInfo.put(\n-        PendingAttestation.class, new ReflectionInformation(PendingAttestation.class));\n-    classReflectionInfo.put(Validator.class, new ReflectionInformation(Validator.class));\n-    classReflectionInfo.put(StatusMessage.class, new ReflectionInformation(StatusMessage.class));\n-    classReflectionInfo.put(GoodbyeMessage.class, new ReflectionInformation(GoodbyeMessage.class));\n-    classReflectionInfo.put(\n-        BeaconBlocksByRangeRequestMessage.class,\n-        new ReflectionInformation(BeaconBlocksByRangeRequestMessage.class));\n-    classReflectionInfo.put(\n-        AggregateAndProof.class, new ReflectionInformation(AggregateAndProof.class));\n+    List<Class> classes =\n+        List.of(\n+            SignedBeaconBlock.class,\n+            BeaconBlock.class,\n+            BeaconBlockBody.class,\n+            BeaconBlockHeader.class,\n+            SignedBeaconBlockHeader.class,\n+            Eth1Data.class,\n+            Attestation.class,\n+            AttestationData.class,\n+            AttesterSlashing.class,\n+            Deposit.class,\n+            DepositData.class,\n+            DepositMessage.class,\n+            IndexedAttestation.class,\n+            ProposerSlashing.class,\n+            SignedVoluntaryExit.class,\n+            VoluntaryExit.class,\n+            BeaconStateImpl.class,\n+            Checkpoint.class,\n+            Fork.class,\n+            HistoricalBatch.class,\n+            PendingAttestation.class,\n+            Validator.class,\n+            StatusMessage.class,\n+            GoodbyeMessage.class,\n+            BeaconBlocksByRangeRequestMessage.class,\n+            AggregateAndProof.class,\n+            VoteTracker.class);\n+\n+    for (Class classItem : classes) {\n+      classReflectionInfo.put(classItem, new ReflectionInformation(classItem));\n+    }", "originalCommit": "90a831c6e0ad4372e1dc7eaa59881e0bff68b538", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjU0NjAzNg==", "url": "https://github.com/ConsenSys/teku/pull/1627#discussion_r412546036", "bodyText": "Do we actually need to add a single vote or is addVotes all we'll actually use?", "author": "ajsutton", "createdAt": "2020-04-21T22:53:37Z", "path": "storage/src/main/java/tech/pegasys/artemis/storage/server/rocksdb/dataaccess/V3RocksDbDao.java", "diffHunk": "@@ -324,6 +330,16 @@ public void addHotStates(final Map<Bytes32, BeaconState> states) {\n       states.forEach(this::addHotState);\n     }\n \n+    @Override\n+    public void addVote(final UnsignedLong validatorIndex, final VoteTracker vote) {\n+      transaction.put(V3Schema.VOTES, validatorIndex, vote);\n+    }", "originalCommit": "90a831c6e0ad4372e1dc7eaa59881e0bff68b538", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjU1MDgyMg==", "url": "https://github.com/ConsenSys/teku/pull/1627#discussion_r412550822", "bodyText": "addVotes is all we'll actually use, so I might remove that.", "author": "cemozerr", "createdAt": "2020-04-21T23:05:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjU0NjAzNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzE4Nzc1Ng==", "url": "https://github.com/ConsenSys/teku/pull/1627#discussion_r413187756", "bodyText": "done.", "author": "cemozerr", "createdAt": "2020-04-22T17:44:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjU0NjAzNg=="}], "type": "inlineReview"}, {"oid": "b45040494015b450bd8894ff2ab90f2bbe4fb92e", "url": "https://github.com/ConsenSys/teku/commit/b45040494015b450bd8894ff2ab90f2bbe4fb92e", "message": "Revert processAttesation", "committedDate": "2020-04-21T23:03:14Z", "type": "commit"}, {"oid": "22523ca59d8d6c519747c465ac17f6bd7f06e188", "url": "https://github.com/ConsenSys/teku/commit/22523ca59d8d6c519747c465ac17f6bd7f06e188", "message": "Merge branch 'master' into saveProtoarrayVotesToDisk", "committedDate": "2020-04-22T16:52:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzE1NDUwMg==", "url": "https://github.com/ConsenSys/teku/pull/1627#discussion_r413154502", "bodyText": "So get, and then put again? Maybe just only put when it's not in there already? Not sure if really worth it though, small things.", "author": "protolambda", "createdAt": "2020-04-22T16:58:51Z", "path": "storage/src/main/java/tech/pegasys/artemis/storage/Store.java", "diffHunk": "@@ -294,6 +308,18 @@ public void setBestJustifiedCheckpoint(Checkpoint best_justified_checkpoint) {\n       this.best_justified_checkpoint = Optional.of(best_justified_checkpoint);\n     }\n \n+    @Override\n+    public VoteTracker getVote(int validatorIndex) {\n+      VoteTracker vote = either(validatorIndex, votes::get, Store.this.votes::get);\n+      if (vote == null) {\n+        vote = VoteTracker.Default();\n+      } else {\n+        vote = vote.copy();\n+      }\n+      votes.put(validatorIndex, vote);", "originalCommit": "35e0ef5fee8c5873bde7344e2011d9777d131224", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "8bcc3504832074addaccbdffcd82d827b630ced9", "url": "https://github.com/ConsenSys/teku/commit/8bcc3504832074addaccbdffcd82d827b630ced9", "message": "Remove addVote", "committedDate": "2020-04-22T17:44:54Z", "type": "commit"}, {"oid": "ad9973a59665ce27aa0229a4dc4c7319eaa77402", "url": "https://github.com/ConsenSys/teku/commit/ad9973a59665ce27aa0229a4dc4c7319eaa77402", "message": "Fix tests & resolve comments", "committedDate": "2020-04-22T18:24:31Z", "type": "commit"}, {"oid": "f561c7f1f88675b32bd4d4429b7832587d0f0a69", "url": "https://github.com/ConsenSys/teku/commit/f561c7f1f88675b32bd4d4429b7832587d0f0a69", "message": "Merge branch 'master' into saveProtoarrayVotesToDisk", "committedDate": "2020-04-22T18:27:31Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzM2MzMwMg==", "url": "https://github.com/ConsenSys/teku/pull/1627#discussion_r413363302", "bodyText": "Should we be using toIntExact here?", "author": "ajsutton", "createdAt": "2020-04-22T22:01:59Z", "path": "protoarray/src/main/java/tech/pegasys/artemis/protoarray/ProtoArrayForkChoiceStrategy.java", "diffHunk": "@@ -271,39 +261,44 @@ public boolean containsBlock(Bytes32 blockRoot) {\n    * </ul>\n    *\n    * @param indices\n-   * @param votes\n+   * @param store\n    * @param oldBalances\n    * @param newBalances\n    * @return\n    */\n   static List<Long> computeDeltas(\n+      MutableStore store,\n       Map<Bytes32, Integer> indices,\n-      ElasticList<VoteTracker> votes,\n       List<UnsignedLong> oldBalances,\n       List<UnsignedLong> newBalances) {\n     List<Long> deltas = new ArrayList<>(Collections.nCopies(indices.size(), 0L));\n \n-    for (int validatorIndex = 0; validatorIndex < votes.size(); validatorIndex++) {\n-      VoteTracker vote = votes.get(validatorIndex);\n+    for (UnsignedLong validatorIndex : store.getVotedValidatorIndices()) {\n+      VoteTracker vote = store.getVote(validatorIndex);\n \n       // There is no need to create a score change if the validator has never voted\n       // or both their votes are for the zero hash (alias to the genesis block).\n       if (vote.getCurrentRoot().equals(Bytes32.ZERO) && vote.getNextRoot().equals(Bytes32.ZERO)) {\n+        LOG.warn(\"ProtoArrayForkChoiceStrategy: Unexpected zero hashes in voted validator votes\");\n         continue;\n       }\n \n       // If the validator was not included in the oldBalances (i.e. it did not exist yet)\n       // then say its balance was zero.\n       UnsignedLong oldBalance =\n-          oldBalances.size() > validatorIndex ? oldBalances.get(validatorIndex) : UnsignedLong.ZERO;\n+          oldBalances.size() > validatorIndex.intValue()\n+              ? oldBalances.get(validatorIndex.intValue())", "originalCommit": "f561c7f1f88675b32bd4d4429b7832587d0f0a69", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzM3NzcwOA==", "url": "https://github.com/ConsenSys/teku/pull/1627#discussion_r413377708", "bodyText": "Yep, doing that now.", "author": "cemozerr", "createdAt": "2020-04-22T22:32:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzM2MzMwMg=="}], "type": "inlineReview"}, {"oid": "7affba13b56b00f258987d78b2daaa5133b18388", "url": "https://github.com/ConsenSys/teku/commit/7affba13b56b00f258987d78b2daaa5133b18388", "message": "Safely convert UnsignedLong to int", "committedDate": "2020-04-22T22:39:01Z", "type": "commit"}, {"oid": "a86666a0707e47e5cc68e59ce758dd60fd7a3be1", "url": "https://github.com/ConsenSys/teku/commit/a86666a0707e47e5cc68e59ce758dd60fd7a3be1", "message": "Merge remote-tracking branch 'remotes/origin/master' into saveProtoarrayVotesToDisk\n\n# Conflicts:\n#\tethereum/datastructures/src/main/java/tech/pegasys/artemis/datastructures/util/SimpleOffsetSerializer.java", "committedDate": "2020-04-22T22:41:00Z", "type": "commit"}, {"oid": "25ce23e226ee7d593742dce704072a65a31224df", "url": "https://github.com/ConsenSys/teku/commit/25ce23e226ee7d593742dce704072a65a31224df", "message": "Merge branch 'master' into saveProtoarrayVotesToDisk", "committedDate": "2020-04-22T22:42:40Z", "type": "commit"}]}