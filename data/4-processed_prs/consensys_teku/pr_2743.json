{"pr_number": 2743, "pr_title": "Send goodbye message to peers on shutdown", "pr_createdAt": "2020-09-07T12:11:23Z", "pr_url": "https://github.com/ConsenSys/teku/pull/2743", "timeline": [{"oid": "19dcd8eeadee5d25a1ddde8ebe1be28b5effe73b", "url": "https://github.com/ConsenSys/teku/commit/19dcd8eeadee5d25a1ddde8ebe1be28b5effe73b", "message": "Send goodbye message to peers on shutdown", "committedDate": "2020-09-07T12:10:07Z", "type": "commit"}, {"oid": "2b373108f4c098a542cdcfa91e6d6b831bdbb74d", "url": "https://github.com/ConsenSys/teku/commit/2b373108f4c098a542cdcfa91e6d6b831bdbb74d", "message": "Run spotless", "committedDate": "2020-09-07T12:11:50Z", "type": "commit"}, {"oid": "dd474eb5068648c608dfa9d6c7d24bf27a2670d6", "url": "https://github.com/ConsenSys/teku/commit/dd474eb5068648c608dfa9d6c7d24bf27a2670d6", "message": "Deal with future error", "committedDate": "2020-09-07T12:53:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDU2OTMxOA==", "url": "https://github.com/ConsenSys/teku/pull/2743#discussion_r484569318", "bodyText": "We should just tie this into the existing stop functionality rather than adding another shutdown hook.\nAlso the write is async so we need to actually wait for it to complete (as a batch, don't wait sequentially for each peer).\nWould be best to use the disconnectCleanly method as well so the peer is marked as disconnected and we don't send any other messages after disconnect.", "author": "ajsutton", "createdAt": "2020-09-07T21:23:15Z", "path": "networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/peers/Eth2PeerManager.java", "diffHunk": "@@ -91,6 +92,19 @@\n     this.eth2RpcPingInterval = eth2RpcPingInterval;\n     this.eth2RpcOutstandingPingThreshold = eth2RpcOutstandingPingThreshold;\n     this.eth2StatusUpdateInterval = eth2StatusUpdateInterval;\n+    Runtime.getRuntime()\n+        .addShutdownHook(\n+            new Thread(\n+                () ->\n+                    connectedPeerMap\n+                        .values()\n+                        .forEach(\n+                            peer ->\n+                                peer.sendGoodbye(GoodbyeMessage.REASON_CLIENT_SHUT_DOWN)\n+                                    .finish(\n+                                        err ->\n+                                            LOG.debug(\n+                                                \"Unable to send goodbye to peer {}\", peer, err)))));", "originalCommit": "dd474eb5068648c608dfa9d6c7d24bf27a2670d6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDgxNjY4Mw==", "url": "https://github.com/ConsenSys/teku/pull/2743#discussion_r484816683", "bodyText": "Done.", "author": "cemozerr", "createdAt": "2020-09-08T10:31:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDU2OTMxOA=="}], "type": "inlineReview"}, {"oid": "ffb6c2ac393ccfc9cceb64e495458d730646b276", "url": "https://github.com/ConsenSys/teku/commit/ffb6c2ac393ccfc9cceb64e495458d730646b276", "message": "Return safeFutures to stop network objects", "committedDate": "2020-09-08T09:39:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDc4OTYzMQ==", "url": "https://github.com/ConsenSys/teku/pull/2743#discussion_r484789631", "bodyText": "You don't need to sendGoodbye then disconnectCleanly - disconnectCleanly sends the goodbye.  It probably does need to be adjusted to return a future so you know when it's actually been written.", "author": "ajsutton", "createdAt": "2020-09-08T09:43:35Z", "path": "networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/peers/Eth2PeerManager.java", "diffHunk": "@@ -301,4 +289,19 @@ public BeaconChainMethods getBeaconChainMethods() {\n   private boolean peerIsReady(Eth2Peer peer) {\n     return peer.hasStatus();\n   }\n+\n+  public SafeFuture<?> sendGoodbyeToPeers() {\n+    return SafeFuture.allOf(\n+        connectedPeerMap.values().stream()\n+            .map(\n+                peer ->\n+                    peer.sendGoodbye(GoodbyeMessage.REASON_CLIENT_SHUT_DOWN)\n+                        .thenRun(() -> peer.disconnectCleanly(DisconnectReason.SHUTTING_DOWN))", "originalCommit": "ffb6c2ac393ccfc9cceb64e495458d730646b276", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDgxNjU4MQ==", "url": "https://github.com/ConsenSys/teku/pull/2743#discussion_r484816581", "bodyText": "Done.", "author": "cemozerr", "createdAt": "2020-09-08T10:31:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDc4OTYzMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDc4OTg5Mw==", "url": "https://github.com/ConsenSys/teku/pull/2743#discussion_r484789893", "bodyText": "Waiter.waitFor is probably better than .join() here and below so the test doesn't hang forever if the future doesn't complete.", "author": "ajsutton", "createdAt": "2020-09-08T09:44:01Z", "path": "networking/eth2/src/testFixtures/java/tech/pegasys/teku/networking/eth2/Eth2NetworkFactory.java", "diffHunk": "@@ -92,7 +93,7 @@ public Eth2P2PNetworkBuilder builder() {\n   }\n \n   public void stopAll() {\n-    networks.forEach(P2PNetwork::stop);\n+    SafeFuture.allOf(networks.stream().map(P2PNetwork::stop).toArray(SafeFuture[]::new)).join();", "originalCommit": "ffb6c2ac393ccfc9cceb64e495458d730646b276", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDgxNzMwNQ==", "url": "https://github.com/ConsenSys/teku/pull/2743#discussion_r484817305", "bodyText": "Done.", "author": "cemozerr", "createdAt": "2020-09-08T10:32:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDc4OTg5Mw=="}], "type": "inlineReview"}, {"oid": "d81da5823042e7d1fdb0b2702bea2008290f5a6b", "url": "https://github.com/ConsenSys/teku/commit/d81da5823042e7d1fdb0b2702bea2008290f5a6b", "message": "Return safeFuture from disconnectCleanly and use waitFor in tests", "committedDate": "2020-09-08T10:37:41Z", "type": "commit"}, {"oid": "cff32d4e6b6e32d0858870a68ab087550d188030", "url": "https://github.com/ConsenSys/teku/commit/cff32d4e6b6e32d0858870a68ab087550d188030", "message": "Merge branch 'master' into sendGoodbyeMessageOnShutdown", "committedDate": "2020-09-08T10:40:30Z", "type": "commit"}, {"oid": "aefe3d2d62d75e534866aefe09f79bf831a0710b", "url": "https://github.com/ConsenSys/teku/commit/aefe3d2d62d75e534866aefe09f79bf831a0710b", "message": "Fix unit tests", "committedDate": "2020-09-08T11:41:15Z", "type": "commit"}, {"oid": "04cd1a184a9544dbf7952f9439fa9cd4a92c87dc", "url": "https://github.com/ConsenSys/teku/commit/04cd1a184a9544dbf7952f9439fa9cd4a92c87dc", "message": "Run spotless", "committedDate": "2020-09-08T11:44:36Z", "type": "commit"}, {"oid": "f627d3afa4303550a3853b0ed3ab888f13376e3f", "url": "https://github.com/ConsenSys/teku/commit/f627d3afa4303550a3853b0ed3ab888f13376e3f", "message": "Fix unit tests timing out", "committedDate": "2020-09-08T13:42:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTIwNTY4NQ==", "url": "https://github.com/ConsenSys/teku/pull/2743#discussion_r485205685", "bodyText": "Probably always want to call super.stop now I think about this, even if sending goodbye fails.  So probably:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                return peerManager.sendGoodbyeToPeers().thenCompose(__ -> super.stop());\n          \n          \n            \n                return peerManager.sendGoodbyeToPeers().exceptionally(error -> {\n          \n          \n            \n                  LOG.debug(\"Failed to send goodby to peers on shutdown\", error);\n          \n          \n            \n                  return null;\n          \n          \n            \n                }).thenCompose(__ -> super.stop());", "author": "ajsutton", "createdAt": "2020-09-08T21:27:26Z", "path": "networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/ActiveEth2Network.java", "diffHunk": "@@ -245,7 +245,7 @@ public synchronized void stop() {\n     proposerSlashingGossipManager.shutdown();\n     attesterSlashingGossipManager.shutdown();\n     attestationSubnetService.unsubscribe(discoveryNetworkAttestationSubnetsSubscription);\n-    super.stop();\n+    return peerManager.sendGoodbyeToPeers().thenCompose(__ -> super.stop());", "originalCommit": "f627d3afa4303550a3853b0ed3ab888f13376e3f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTUxMzYxOQ==", "url": "https://github.com/ConsenSys/teku/pull/2743#discussion_r485513619", "bodyText": "Done.", "author": "cemozerr", "createdAt": "2020-09-09T10:41:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTIwNTY4NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTIwNjEzOA==", "url": "https://github.com/ConsenSys/teku/pull/2743#discussion_r485206138", "bodyText": "Since disconnectCleanly already has an exceptionally clause to handle the goodbye not sending, this should always complete normally and we can just use .reportExceptions().  If it does wind up failing, it's not for any expected reason and should be reported very loudly.", "author": "ajsutton", "createdAt": "2020-09-08T21:28:27Z", "path": "networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/peers/Eth2Peer.java", "diffHunk": "@@ -97,7 +97,8 @@ public void updateStatus(final PeerStatus status) {\n             },\n             error -> {\n               LOG.error(\"Failed to validate updated peer status\", error);\n-              disconnectCleanly(DisconnectReason.UNABLE_TO_VERIFY_NETWORK);\n+              disconnectCleanly(DisconnectReason.UNABLE_TO_VERIFY_NETWORK)\n+                  .finish(err -> LOG.debug(\"Error while disconnecting from peer {}\", this, err));", "originalCommit": "f627d3afa4303550a3853b0ed3ab888f13376e3f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTUxNDExMA==", "url": "https://github.com/ConsenSys/teku/pull/2743#discussion_r485514110", "bodyText": "Makes sense.", "author": "cemozerr", "createdAt": "2020-09-09T10:42:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTIwNjEzOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTIwNzMzOQ==", "url": "https://github.com/ConsenSys/teku/pull/2743#discussion_r485207339", "bodyText": "Can probably just drop this exceptionally clause as disconnectCleanly already has one.", "author": "ajsutton", "createdAt": "2020-09-08T21:31:07Z", "path": "networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/peers/Eth2PeerManager.java", "diffHunk": "@@ -287,4 +290,18 @@ public BeaconChainMethods getBeaconChainMethods() {\n   private boolean peerIsReady(Eth2Peer peer) {\n     return peer.hasStatus();\n   }\n+\n+  public SafeFuture<?> sendGoodbyeToPeers() {\n+    return SafeFuture.allOf(\n+        connectedPeerMap.values().stream()\n+            .map(\n+                peer ->\n+                    peer.disconnectCleanly(DisconnectReason.SHUTTING_DOWN)\n+                        .exceptionally(\n+                            err -> {\n+                              LOG.debug(\"Error while sending goodbye to peers\", err);\n+                              return null;\n+                            }))", "originalCommit": "f627d3afa4303550a3853b0ed3ab888f13376e3f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTUxNzkxMw==", "url": "https://github.com/ConsenSys/teku/pull/2743#discussion_r485517913", "bodyText": "Done.", "author": "cemozerr", "createdAt": "2020-09-09T10:49:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTIwNzMzOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTIxMzQzMQ==", "url": "https://github.com/ConsenSys/teku/pull/2743#discussion_r485213431", "bodyText": "We need to make sure this still runs regardless of whether connectionManager.stop() failed or not.  You actually want a .handleComposed method on SafeFuture I suspect.  Would be something like:\n  /**\n   * Returns a new CompletionStage that, when this stage completes either normally or exceptionally,\n   * is executed with this stage's result and exception as arguments to the supplied function.\n   *\n   * <p>When this stage is complete, the given function is invoked with the result (or {@code null}\n   * if none) and the exception (or {@code null} if none) returning another `CompletionStage`. When\n   * that stage completes, the `SafeFuture` returned by this method is completed with the same value\n   * or exception.\n   *\n   * @param fn the function to use to compute another CompletionStage\n   * @param <U> the function's return type\n   * @return the new SafeFuture\n   */\n  public <U> SafeFuture<U> handleComposed(\n      final BiFunction<? super T, Throwable, CompletionStage<U>> fn) {\n    final SafeFuture<U> result = new SafeFuture<>();\n    whenComplete(\n        (value, error) -> {\n          try {\n            propagateResult(fn.apply(value, error), result);\n          } catch (final Throwable t) {\n            result.completeExceptionally(t);\n          }\n        });\n    return result;\n  }\n\nThat's quite a useful method to have around actually.  Would need some extra tests for it.", "author": "ajsutton", "createdAt": "2020-09-08T21:44:47Z", "path": "networking/p2p/src/main/java/tech/pegasys/teku/networking/p2p/DiscoveryNetwork.java", "diffHunk": "@@ -121,19 +121,15 @@ private static DiscoveryService createDiscoveryService(\n   }\n \n   @Override\n-  public void stop() {\n-    connectionManager\n+  public SafeFuture<?> stop() {\n+    return connectionManager\n         .stop()\n         .exceptionally(\n             error -> {\n               LOG.error(\"Failed to stop connection manager\", error);\n               return null;\n             })\n-        .always(\n-            () -> {\n-              p2pNetwork.stop();\n-              discoveryService.stop().reportExceptions();\n-            });\n+        .thenCompose((__) -> SafeFuture.allOf(p2pNetwork.stop(), discoveryService.stop()));", "originalCommit": "f627d3afa4303550a3853b0ed3ab888f13376e3f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTUyNTM2Nw==", "url": "https://github.com/ConsenSys/teku/pull/2743#discussion_r485525367", "bodyText": "I actually noticed that I could just do this instead:\n  public SafeFuture<?> stop() {\n    return SafeFuture.allOf(\n            connectionManager.stop(),\n            p2pNetwork.stop(),\n            discoveryService.stop()\n    );\n\nWent with this since it's much simpler. Let me know if you don't think that's a good approach.", "author": "cemozerr", "createdAt": "2020-09-09T11:03:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTIxMzQzMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTU2MzI2Ng==", "url": "https://github.com/ConsenSys/teku/pull/2743#discussion_r485563266", "bodyText": "The tests in DiscoveryNetworkTest implied that connection manager would need to be stopped before p2pNetwork or discovery service, but after I inspected connectionManager.stop() I don't believe that's necessarily the case. Thus just simply stopping them all together makes sense to me.", "author": "cemozerr", "createdAt": "2020-09-09T12:14:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTIxMzQzMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjAwODA4Mg==", "url": "https://github.com/ConsenSys/teku/pull/2743#discussion_r486008082", "bodyText": "I don't think that's right.  The connection manager is stopped first so that it stops connecting to new peers and running discovery searches, otherwise you get an awful lot of race conditions.", "author": "ajsutton", "createdAt": "2020-09-10T01:24:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTIxMzQzMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjI3MzAwMg==", "url": "https://github.com/ConsenSys/teku/pull/2743#discussion_r486273002", "bodyText": "That makes sense. Added handleComposed and two unit tests along with it.", "author": "cemozerr", "createdAt": "2020-09-10T11:47:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTIxMzQzMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTIxNDM1OA==", "url": "https://github.com/ConsenSys/teku/pull/2743#discussion_r485214358", "bodyText": "Might be cleaner to use handle here:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    .thenRun(\n          \n          \n            \n                        () -> // Request sent now close our side\n          \n          \n            \n                        disconnectImmediately(Optional.of(reason), true))\n          \n          \n            \n                    .exceptionally(\n          \n          \n            \n                        error -> {\n          \n          \n            \n                          LOG.debug(\"Failed to disconnect from \" + getId() + \" cleanly.\", error);\n          \n          \n            \n                          disconnectImmediately(Optional.of(reason), true);\n          \n          \n            \n                          return null;\n          \n          \n            \n                        });\n          \n          \n            \n                    .handle(\n          \n          \n            \n                        (__, error) -> {\n          \n          \n            \n                          if (error != null) {\n          \n          \n            \n                            LOG.debug(\"Failed to disconnect from \" + getId() + \" cleanly.\", error);\n          \n          \n            \n                          }\n          \n          \n            \n                        disconnectImmediately(Optional.of(reason), true));\n          \n          \n            \n                        return null;\n          \n          \n            \n                     });", "author": "ajsutton", "createdAt": "2020-09-08T21:47:02Z", "path": "networking/p2p/src/main/java/tech/pegasys/teku/networking/p2p/libp2p/LibP2PPeer.java", "diffHunk": "@@ -87,18 +87,20 @@ public void disconnectImmediately(\n   }\n \n   @Override\n-  public void disconnectCleanly(final DisconnectReason reason) {\n+  public SafeFuture<?> disconnectCleanly(final DisconnectReason reason) {\n     connected.set(false);\n     disconnectReason = Optional.of(reason);\n     disconnectLocallyInitiated = true;\n-    disconnectRequestHandler\n+    return disconnectRequestHandler\n         .requestDisconnect(reason)\n-        .finish(\n-            () ->\n-                disconnectImmediately(Optional.of(reason), true), // Request sent now close our side\n+        .thenRun(\n+            () -> // Request sent now close our side\n+            disconnectImmediately(Optional.of(reason), true))\n+        .exceptionally(\n             error -> {\n               LOG.debug(\"Failed to disconnect from \" + getId() + \" cleanly.\", error);\n               disconnectImmediately(Optional.of(reason), true);\n+              return null;\n             });", "originalCommit": "f627d3afa4303550a3853b0ed3ab888f13376e3f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTUyNjY2MA==", "url": "https://github.com/ConsenSys/teku/pull/2743#discussion_r485526660", "bodyText": "Done.", "author": "cemozerr", "createdAt": "2020-09-09T11:06:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTIxNDM1OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTIxNTE4OQ==", "url": "https://github.com/ConsenSys/teku/pull/2743#discussion_r485215189", "bodyText": "If we expect the future to already be completed it can be clearer to use\n    assertThat(manager.start()).isCompleted();\n\nBoth work though and are both better than .join.", "author": "ajsutton", "createdAt": "2020-09-08T21:49:00Z", "path": "networking/p2p/src/test/java/tech/pegasys/teku/networking/p2p/discovery/ConnectionManagerTest.java", "diffHunk": "@@ -80,23 +83,25 @@ public void setUp() {\n   }\n \n   @Test\n-  public void shouldConnectToStaticPeersOnStart() {\n+  public void shouldConnectToStaticPeersOnStart()\n+      throws InterruptedException, ExecutionException, TimeoutException {\n     final ConnectionManager manager = createManager(PEER1, PEER2);\n     when(network.connect(any(PeerAddress.class))).thenReturn(SafeFuture.completedFuture(null));\n-    manager.start().join();\n+    Waiter.waitFor(manager.start());", "originalCommit": "f627d3afa4303550a3853b0ed3ab888f13376e3f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTIxNTgzNA==", "url": "https://github.com/ConsenSys/teku/pull/2743#discussion_r485215834", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        network.stop().join();\n          \n          \n            \n                        Waiter.waitFor(network.stop());", "author": "ajsutton", "createdAt": "2020-09-08T21:50:26Z", "path": "networking/p2p/src/testFixtures/java/tech/pegasys/teku/network/p2p/DiscoveryNetworkFactory.java", "diffHunk": "@@ -123,7 +125,7 @@ public DiscoveryNetworkBuilder bootnode(final String bootnode) {\n                 \"Port conflict detected, retrying with a new port. Original message: {}\",\n                 e.getMessage());\n             attempt++;\n-            network.stop();\n+            network.stop().join();", "originalCommit": "f627d3afa4303550a3853b0ed3ab888f13376e3f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "335fd7c132af5836fa302a516193cc9d0e277f3c", "url": "https://github.com/ConsenSys/teku/commit/335fd7c132af5836fa302a516193cc9d0e277f3c", "message": "Call super.stop() even if send goodbye fails", "committedDate": "2020-09-09T10:40:06Z", "type": "commit"}, {"oid": "adc494a6e5830f6e233c49a1323dd939df558cc3", "url": "https://github.com/ConsenSys/teku/commit/adc494a6e5830f6e233c49a1323dd939df558cc3", "message": "Use .reportExceptions since disconnectCleanly has its exceptionally clause", "committedDate": "2020-09-09T10:49:11Z", "type": "commit"}, {"oid": "0320588e21086d7d24428a975ed6863eaf60c813", "url": "https://github.com/ConsenSys/teku/commit/0320588e21086d7d24428a975ed6863eaf60c813", "message": "Run spotless", "committedDate": "2020-09-09T10:50:07Z", "type": "commit"}, {"oid": "c2f0253e131061fe9e40c79a8d997f990d3e6172", "url": "https://github.com/ConsenSys/teku/commit/c2f0253e131061fe9e40c79a8d997f990d3e6172", "message": "Run spotless", "committedDate": "2020-09-09T11:18:30Z", "type": "commit"}, {"oid": "3cfc73376d21794b9671de35e1d8315c426d3373", "url": "https://github.com/ConsenSys/teku/commit/3cfc73376d21794b9671de35e1d8315c426d3373", "message": "Fix errors", "committedDate": "2020-09-09T11:58:19Z", "type": "commit"}, {"oid": "f1e4cf44bab032e8c9aedcfd96429e2a99680334", "url": "https://github.com/ConsenSys/teku/commit/f1e4cf44bab032e8c9aedcfd96429e2a99680334", "message": "Merge branch 'master' into sendGoodbyeMessageOnShutdown", "committedDate": "2020-09-09T12:12:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjAwODY1NQ==", "url": "https://github.com/ConsenSys/teku/pull/2743#discussion_r486008655", "bodyText": "Probably should use Waiter.waitFor here too.", "author": "ajsutton", "createdAt": "2020-09-10T01:26:24Z", "path": "networking/p2p/src/testFixtures/java/tech/pegasys/teku/network/p2p/DiscoveryNetworkFactory.java", "diffHunk": "@@ -53,7 +55,8 @@ public DiscoveryNetworkBuilder builder() {\n   }\n \n   public void stopAll() {\n-    networks.forEach(DiscoveryNetwork::stop);\n+    SafeFuture.allOf(networks.stream().map(DiscoveryNetwork::stop).toArray(SafeFuture[]::new))\n+        .join();", "originalCommit": "f1e4cf44bab032e8c9aedcfd96429e2a99680334", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjI4Nzc4MQ==", "url": "https://github.com/ConsenSys/teku/pull/2743#discussion_r486287781", "bodyText": "Done.", "author": "cemozerr", "createdAt": "2020-09-10T12:15:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjAwODY1NQ=="}], "type": "inlineReview"}, {"oid": "0f4e0000e9873c1e34ef8a3e9c6485c005ecc9b7", "url": "https://github.com/ConsenSys/teku/commit/0f4e0000e9873c1e34ef8a3e9c6485c005ecc9b7", "message": "Add handleComposed to deal with DiscoveryNetwork shutdown", "committedDate": "2020-09-10T12:10:16Z", "type": "commit"}, {"oid": "60da0787835ba9ad53af0ec784ab254da102a8f4", "url": "https://github.com/ConsenSys/teku/commit/60da0787835ba9ad53af0ec784ab254da102a8f4", "message": "Run spotless", "committedDate": "2020-09-10T12:10:16Z", "type": "commit"}, {"oid": "6c637c7fe039d0db06e99229afeee99eba294ed0", "url": "https://github.com/ConsenSys/teku/commit/6c637c7fe039d0db06e99229afeee99eba294ed0", "message": "Use Waiter.waitFor", "committedDate": "2020-09-10T12:10:16Z", "type": "commit"}, {"oid": "5f7b468b2698e8a4ea9deae4c48f7b66ceb640a9", "url": "https://github.com/ConsenSys/teku/commit/5f7b468b2698e8a4ea9deae4c48f7b66ceb640a9", "message": "Run spotless", "committedDate": "2020-09-10T12:10:50Z", "type": "commit"}, {"oid": "c5def5f4a7b9d11be2926b87d99ae2559efcdaf3", "url": "https://github.com/ConsenSys/teku/commit/c5def5f4a7b9d11be2926b87d99ae2559efcdaf3", "message": "Merge branch 'master' into sendGoodbyeMessageOnShutdown", "committedDate": "2020-09-10T12:14:57Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY3NjUyMQ==", "url": "https://github.com/ConsenSys/teku/pull/2743#discussion_r486676521", "bodyText": "We should be able to restore these tests now.", "author": "ajsutton", "createdAt": "2020-09-10T22:51:23Z", "path": "networking/p2p/src/test/java/tech/pegasys/teku/networking/p2p/DiscoveryNetworkTest.java", "diffHunk": "@@ -96,44 +93,6 @@ public void shouldStartConnectionManagerAfterP2pAndDiscoveryStarted() {\n     assertThat(started).isCompleted();\n   }\n \n-  @Test\n-  public void shouldStopConnectionManagerBeforeNetworkAndDiscovery() {\n-    final SafeFuture<Void> connectionStop = new SafeFuture<>();\n-    doReturn(new SafeFuture<Void>()).when(discoveryService).stop();\n-    doReturn(connectionStop).when(connectionManager).stop();\n-\n-    discoveryNetwork.stop();\n-\n-    verify(connectionManager).stop();\n-    verify(discoveryService).updateCustomENRField(any(), any());\n-    verify(discoveryService).getEnr();\n-    verifyNoMoreInteractions(discoveryService);\n-    verifyNoInteractions(p2pNetwork);\n-\n-    connectionStop.complete(null);\n-    verify(p2pNetwork).stop();\n-    verify(discoveryService).stop();\n-  }\n-\n-  @Test\n-  public void shouldStopNetworkAndDiscoveryWhenConnectionManagerStopFails() {\n-    final SafeFuture<Void> connectionStop = new SafeFuture<>();\n-    doReturn(new SafeFuture<Void>()).when(discoveryService).stop();\n-    doReturn(connectionStop).when(connectionManager).stop();\n-\n-    discoveryNetwork.stop();\n-\n-    verify(connectionManager).stop();\n-    verify(discoveryService).updateCustomENRField(any(), any());\n-    verify(discoveryService).getEnr();\n-    verifyNoMoreInteractions(discoveryService);\n-    verifyNoInteractions(p2pNetwork);\n-\n-    connectionStop.completeExceptionally(new RuntimeException(\"Nope\"));\n-    verify(p2pNetwork).stop();\n-    verify(discoveryService).stop();\n-  }", "originalCommit": "c5def5f4a7b9d11be2926b87d99ae2559efcdaf3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODExMDU1MA==", "url": "https://github.com/ConsenSys/teku/pull/2743#discussion_r488110550", "bodyText": "Done.", "author": "cemozerr", "createdAt": "2020-09-14T17:41:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY3NjUyMQ=="}], "type": "inlineReview"}, {"oid": "8b040b0b9b9ffd8a5dc71c4e6b651e651b40a88d", "url": "https://github.com/ConsenSys/teku/commit/8b040b0b9b9ffd8a5dc71c4e6b651e651b40a88d", "message": "Merge branch 'master' into sendGoodbyeMessageOnShutdown", "committedDate": "2020-09-14T17:33:30Z", "type": "commit"}, {"oid": "ec761188a8e5ecf34eff32b4cc96b7b300919ea7", "url": "https://github.com/ConsenSys/teku/commit/ec761188a8e5ecf34eff32b4cc96b7b300919ea7", "message": "Restore deleted tests", "committedDate": "2020-09-14T17:41:06Z", "type": "commit"}, {"oid": "ee57fa34d2d05719cc95d0e867ee32dcf47e976d", "url": "https://github.com/ConsenSys/teku/commit/ee57fa34d2d05719cc95d0e867ee32dcf47e976d", "message": "Run spotless", "committedDate": "2020-09-14T17:41:47Z", "type": "commit"}]}