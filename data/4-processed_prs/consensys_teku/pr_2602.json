{"pr_number": 2602, "pr_title": "Fix race condition when committing changes to fork choice votes", "pr_createdAt": "2020-08-18T04:50:29Z", "pr_url": "https://github.com/ConsenSys/teku/pull/2602", "timeline": [{"oid": "89ebe7f356f4f497159b9b829b25e4008c19b371", "url": "https://github.com/ConsenSys/teku/commit/89ebe7f356f4f497159b9b829b25e4008c19b371", "message": "Wrap fork choice updates in a lock to ensure that the store transaction that changes votes are committed before the lock is released.", "committedDate": "2020-08-18T04:44:55Z", "type": "commit"}, {"oid": "9728e934ce093cbfefd2a5fc9d4d24e6c184d25b", "url": "https://github.com/ConsenSys/teku/commit/9728e934ce093cbfefd2a5fc9d4d24e6c184d25b", "message": "Ensure block updates are applied within the lock. Stop trying to be clever with store transactions.", "committedDate": "2020-08-18T05:38:22Z", "type": "commit"}, {"oid": "80a8f18ef5e2efab537d814709d4058a0fec0946", "url": "https://github.com/ConsenSys/teku/commit/80a8f18ef5e2efab537d814709d4058a0fec0946", "message": "Can't use a ReentrantLock because a different thread may release the lock than the one that acquires it.", "committedDate": "2020-08-18T05:57:45Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjAwNjA3Mw==", "url": "https://github.com/ConsenSys/teku/pull/2602#discussion_r472006073", "bodyText": "Seems like we don't check if the attestation processing was successful before committing anymore. Is this on purpose?", "author": "cemozerr", "createdAt": "2020-08-18T08:27:08Z", "path": "ethereum/statetransition/src/main/java/tech/pegasys/teku/statetransition/forkchoice/ForkChoice.java", "diffHunk": "@@ -48,97 +52,119 @@ private void initializeProtoArrayForkChoice() {\n     processHead();\n   }\n \n-  public synchronized void processHead() {\n+  private void processHead() {\n     processHead(Optional.empty());\n   }\n \n-  public synchronized void processHead(UInt64 nodeSlot) {\n+  public void processHead(UInt64 nodeSlot) {\n     processHead(Optional.of(nodeSlot));\n   }\n \n-  private synchronized void processHead(Optional<UInt64> nodeSlot) {\n-    final Checkpoint finalizedCheckpoint = recentChainData.getStore().getFinalizedCheckpoint();\n-    final Checkpoint justifiedCheckpoint = recentChainData.getStore().getJustifiedCheckpoint();\n-    recentChainData\n-        .retrieveCheckpointState(justifiedCheckpoint)\n-        .thenAccept(\n-            justifiedCheckpointState -> {\n-              StoreTransaction transaction = recentChainData.startStoreTransaction();\n-              final ForkChoiceStrategy forkChoiceStrategy = getForkChoiceStrategy();\n-              Bytes32 headBlockRoot =\n-                  forkChoiceStrategy.findHead(\n-                      transaction,\n-                      finalizedCheckpoint,\n-                      justifiedCheckpoint,\n-                      justifiedCheckpointState.orElseThrow());\n-              transaction.commit(() -> {}, \"Failed to persist validator vote changes.\");\n-\n-              recentChainData.updateHead(\n-                  headBlockRoot,\n-                  nodeSlot.orElse(\n-                      forkChoiceStrategy\n-                          .blockSlot(headBlockRoot)\n-                          .orElseThrow(\n-                              () ->\n-                                  new IllegalStateException(\n-                                      \"Unable to retrieve the slot of fork choice head\"))));\n+  private void processHead(Optional<UInt64> nodeSlot) {\n+    withLock(\n+            () -> {\n+              final Checkpoint finalizedCheckpoint =\n+                  recentChainData.getStore().getFinalizedCheckpoint();\n+              final Checkpoint justifiedCheckpoint =\n+                  recentChainData.getStore().getJustifiedCheckpoint();\n+              return recentChainData\n+                  .retrieveCheckpointState(justifiedCheckpoint)\n+                  .thenCompose(\n+                      justifiedCheckpointState -> {\n+                        final StoreTransaction transaction =\n+                            recentChainData.startStoreTransaction();\n+                        final ForkChoiceStrategy forkChoiceStrategy = getForkChoiceStrategy();\n+                        Bytes32 headBlockRoot =\n+                            forkChoiceStrategy.findHead(\n+                                transaction,\n+                                finalizedCheckpoint,\n+                                justifiedCheckpoint,\n+                                justifiedCheckpointState.orElseThrow());\n+\n+                        recentChainData.updateHead(\n+                            headBlockRoot,\n+                            nodeSlot.orElse(\n+                                forkChoiceStrategy\n+                                    .blockSlot(headBlockRoot)\n+                                    .orElseThrow(\n+                                        () ->\n+                                            new IllegalStateException(\n+                                                \"Unable to retrieve the slot of fork choice head\"))));\n+                        return transaction.commit();\n+                      });\n             })\n         .join();\n   }\n \n-  public synchronized BlockImportResult onBlock(\n+  public SafeFuture<BlockImportResult> onBlock(\n       final SignedBeaconBlock block, Optional<BeaconState> preState) {\n-    final ForkChoiceStrategy forkChoiceStrategy = getForkChoiceStrategy();\n-    StoreTransaction transaction = recentChainData.startStoreTransaction();\n-    final BlockImportResult result =\n-        on_block(\n-            transaction,\n-            block,\n-            preState,\n-            stateTransition,\n-            forkChoiceStrategy,\n-            beaconState ->\n-                transaction.putStateRoot(\n-                    beaconState.hash_tree_root(),\n-                    new SlotAndBlockRoot(\n-                        beaconState.getSlot(),\n-                        beaconState.getLatest_block_header().hash_tree_root())));\n-\n-    if (!result.isSuccessful()) {\n-      return result;\n-    }\n-\n-    transaction.commit().join();\n-    result\n-        .getBlockProcessingRecord()\n-        .ifPresent(record -> forkChoiceStrategy.onBlock(block.getMessage(), record.getPostState()));\n-\n-    return result;\n+    return withLock(\n+        () -> {\n+          final ForkChoiceStrategy forkChoiceStrategy = getForkChoiceStrategy();\n+          final StoreTransaction transaction = recentChainData.startStoreTransaction();\n+          final BlockImportResult result =\n+              on_block(\n+                  transaction,\n+                  block,\n+                  preState,\n+                  stateTransition,\n+                  forkChoiceStrategy,\n+                  beaconState ->\n+                      transaction.putStateRoot(\n+                          beaconState.hash_tree_root(),\n+                          new SlotAndBlockRoot(\n+                              beaconState.getSlot(),\n+                              beaconState.getLatest_block_header().hash_tree_root())));\n+\n+          if (!result.isSuccessful()) {\n+            return SafeFuture.completedFuture(result);\n+          }\n+          return transaction\n+              .commit()\n+              .thenRun(\n+                  () ->\n+                      result\n+                          .getBlockProcessingRecord()\n+                          .ifPresent(\n+                              record ->\n+                                  forkChoiceStrategy.onBlock(\n+                                      block.getMessage(), record.getPostState())))\n+              .thenApply(__ -> result);\n+        });\n   }\n \n   public SafeFuture<AttestationProcessingResult> onAttestation(\n       final ValidateableAttestation attestation) {\n     return recentChainData\n         .retrieveCheckpointState(attestation.getData().getTarget())\n-        .thenApply(\n-            targetState -> {\n-              StoreTransaction transaction = recentChainData.startStoreTransaction();\n-              final AttestationProcessingResult result =\n-                  on_attestation(transaction, attestation, targetState, getForkChoiceStrategy());\n-              if (result.isSuccessful()) {\n-                transaction.commit(() -> {}, \"Failed to persist attestation result\");\n-              }\n-              return result;\n-            });\n+        .thenCompose(\n+            targetState ->\n+                withLock(\n+                    () -> {\n+                      final StoreTransaction transaction = recentChainData.startStoreTransaction();\n+                      final AttestationProcessingResult result =\n+                          on_attestation(\n+                              transaction, attestation, targetState, getForkChoiceStrategy());\n+                      return transaction.commit().thenApply(__ -> result);", "originalCommit": "80a8f18ef5e2efab537d814709d4058a0fec0946", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjAyMDA2OA==", "url": "https://github.com/ConsenSys/teku/pull/2602#discussion_r472020068", "bodyText": "No. Good spot we need to fix that.", "author": "ajsutton", "createdAt": "2020-08-18T08:48:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjAwNjA3Mw=="}], "type": "inlineReview"}, {"oid": "3c34ddee4ae680d1733b71e44474943b35805781", "url": "https://github.com/ConsenSys/teku/commit/3c34ddee4ae680d1733b71e44474943b35805781", "message": "Only commit if the attestation is valid.", "committedDate": "2020-08-18T08:52:36Z", "type": "commit"}, {"oid": "b0dd1d3444186f94aac05385c6c5362993600c08", "url": "https://github.com/ConsenSys/teku/commit/b0dd1d3444186f94aac05385c6c5362993600c08", "message": "Merge branch 'master' of github.com:PegaSysEng/teku into fork-choice-locks", "committedDate": "2020-08-18T09:35:50Z", "type": "commit"}, {"oid": "b3cc9440bdd1eeb6e0a9bd96c49d0dc343bbbd98", "url": "https://github.com/ConsenSys/teku/commit/b3cc9440bdd1eeb6e0a9bd96c49d0dc343bbbd98", "message": "Merge branch 'master' of github.com:PegaSysEng/teku into fork-choice-locks", "committedDate": "2020-08-18T09:54:53Z", "type": "commit"}]}