{"pr_number": 1345, "pr_title": "Tenant qualify OIDC discovery endpoint response", "pr_createdAt": "2020-03-23T13:26:22Z", "pr_url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1345", "timeline": [{"oid": "a7a3d92223dae020f56d3e576d66cb608b9e09a9", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/commit/a7a3d92223dae020f56d3e576d66cb608b9e09a9", "message": "Tenant-qualify OIDC discovery endpoint", "committedDate": "2020-03-23T13:10:13Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjUwMDM1MA==", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1345#discussion_r396500350", "bodyText": "Changing the public method all of a sudden is not good practice as it might break any code that is relying on this particular Util method.\nBest way to introduce this change would be to introduce a new method, deprecate the old method and point to the newly introduced method for future usage.\nThen, in a major version of the component, we can remove the deprecated method.", "author": "mefarazath", "createdAt": "2020-03-23T14:39:46Z", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java", "diffHunk": "@@ -1168,33 +1168,25 @@ public static String getOAuth2TokenEPUrl() {\n             if (StringUtils.isBlank(oauth2TokenEPUrl)) {\n                 oauth2TokenEPUrl = IdentityUtil.getServerURL(\"oauth2/token\", true, false);\n             }\n-            return oauth2TokenEPUrl;\n+            return IdentityUtil.resolveURL(oauth2TokenEPUrl, true, false);\n         }\n \n-        public static String getOAuth2DCREPUrl(String tenantDomain) throws URISyntaxException {", "originalCommit": "a7a3d92223dae020f56d3e576d66cb608b9e09a9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjUwMTczMw==", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1345#discussion_r396501733", "bodyText": "Also we can change the old method's implementation to use the newly introduced method", "author": "mefarazath", "createdAt": "2020-03-23T14:41:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjUwMDM1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk1MDE1NQ==", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1345#discussion_r396950155", "bodyText": "Also we can change the old method's implementation to use the newly introduced method\n\nAgreed on introducing a new method.\nWith the URL resolver service, DefaultURLResolverService.class takes the tenant name from the ThreadLocal when qualifying paths for tenants. Therefore, the new method would not require the tenant domain as a parameter. Hence, wouldn't it be incorrect if we change the old method to consume the new method?", "author": "chamathns", "createdAt": "2020-03-24T07:37:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjUwMDM1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk2NTEyNA==", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1345#discussion_r396965124", "bodyText": "Yes. Let's leave the old method as it is and a comment to use the new method.", "author": "mefarazath", "createdAt": "2020-03-24T08:09:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjUwMDM1MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjUwMzM2Ng==", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1345#discussion_r396503366", "bodyText": "I think this is not needed. What we need to do here is to return the value set at the resident IDP.\nIt can be a random URI value. Trying to tenant qualify that is incorrect.", "author": "mefarazath", "createdAt": "2020-03-23T14:43:46Z", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java", "diffHunk": "@@ -3086,8 +3078,8 @@ public static String getIdTokenIssuer(String tenantDomain) throws IdentityOAuth2\n         FederatedAuthenticatorConfig oidcAuthenticatorConfig =\n                 IdentityApplicationManagementUtil.getFederatedAuthenticator(fedAuthnConfigs,\n                         IdentityApplicationConstants.Authenticator.OIDC.NAME);\n-        return IdentityApplicationManagementUtil.getProperty(oidcAuthenticatorConfig.getProperties(),\n-                IDP_ENTITY_ID).getValue();\n+        return IdentityUtil.resolveURL(IdentityApplicationManagementUtil", "originalCommit": "a7a3d92223dae020f56d3e576d66cb608b9e09a9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjUwNDQxMw==", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1345#discussion_r396504413", "bodyText": "For example, I set a value like \"https://myissuer.xyz.com\" at the resident IDP as the issuer value. When we use the IdentityUtil.resolveURL() method what would be the output?", "author": "mefarazath", "createdAt": "2020-03-23T14:45:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjUwMzM2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI5MjIxNA==", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1345#discussion_r397292214", "bodyText": "fixed with wso2/carbon-identity-framework@f8b4a59", "author": "chamathns", "createdAt": "2020-03-24T16:30:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjUwMzM2Ng=="}], "type": "inlineReview"}, {"oid": "fa4f7acf9ac5b084cee55c5882169c2824a78ef6", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/commit/fa4f7acf9ac5b084cee55c5882169c2824a78ef6", "message": "resolve issues", "committedDate": "2020-03-24T17:13:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzYzNDg2OA==", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1345#discussion_r397634868", "bodyText": "It would be better to define a constant for \"/api/identity/oauth2/dcr/v1.0/register\"", "author": "mefarazath", "createdAt": "2020-03-25T06:37:24Z", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java", "diffHunk": "@@ -1184,6 +1184,15 @@ public static String getOAuth2DCREPUrl(String tenantDomain) throws URISyntaxExce\n             return oauth2TokenEPUrl;\n         }\n \n+        public static String getOAuth2DCREPUrl() throws URISyntaxException {\n+\n+            String oauth2TokenEPUrl = OAuthServerConfiguration.getInstance().getOAuth2DCREPUrl();\n+            if (StringUtils.isBlank(oauth2TokenEPUrl)) {\n+                oauth2TokenEPUrl = IdentityUtil.getServerURL(\"/api/identity/oauth2/dcr/v1.0/register\", true, false);", "originalCommit": "fa4f7acf9ac5b084cee55c5882169c2824a78ef6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODI5NDIwMg==", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1345#discussion_r398294202", "bodyText": "This is fixed after adding String constants for OAuth2 endpoints.", "author": "chamathns", "createdAt": "2020-03-26T03:14:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzYzNDg2OA=="}], "type": "inlineReview"}, {"oid": "43fd748cab09c2fd4228102dbc4d1ad26f1c527d", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/commit/43fd748cab09c2fd4228102dbc4d1ad26f1c527d", "message": "Add String constants for OAuth2 endpoints.\nFix tests.", "committedDate": "2020-03-26T03:11:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODMwMTY3OA==", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1345#discussion_r398301678", "bodyText": "remove snapshot version and update to a released version", "author": "emswbandara", "createdAt": "2020-03-26T03:45:48Z", "path": "pom.xml", "diffHunk": "@@ -865,7 +865,7 @@\n         <carbon.kernel.registry.imp.pkg.version.range>[1.0.1, 2.0.0)</carbon.kernel.registry.imp.pkg.version.range>\n \n         <!-- Carbon Identity Framework version -->\n-        <carbon.identity.framework.version>5.16.119</carbon.identity.framework.version>\n+        <carbon.identity.framework.version>5.17.10-SNAPSHOT</carbon.identity.framework.version>", "originalCommit": "43fd748cab09c2fd4228102dbc4d1ad26f1c527d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "15383873bd07d9349271aeef1c92d9c7cc0df688", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/commit/15383873bd07d9349271aeef1c92d9c7cc0df688", "message": "Resolve entity ID only if it is not modified", "committedDate": "2020-03-26T18:29:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgwNDU5MQ==", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1345#discussion_r398804591", "bodyText": "This will lead to NPE if idpEntityId evaluates to null. Can we be sure that it can never be null?\nAlso can IdentityUtil.getProperty(\"OAuth.OpenIDConnect.IDTokenIssuerID\") evaluate to null in any scenario?", "author": "mefarazath", "createdAt": "2020-03-26T18:37:01Z", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java", "diffHunk": "@@ -3119,8 +3119,13 @@ public static String getIdTokenIssuer(String tenantDomain) throws IdentityOAuth2\n         FederatedAuthenticatorConfig oidcAuthenticatorConfig =\n                 IdentityApplicationManagementUtil.getFederatedAuthenticator(fedAuthnConfigs,\n                         IdentityApplicationConstants.Authenticator.OIDC.NAME);\n-        return IdentityApplicationManagementUtil.getProperty(oidcAuthenticatorConfig.getProperties(),\n+        String idpEntityId = IdentityApplicationManagementUtil.getProperty(oidcAuthenticatorConfig.getProperties(),\n                 IDP_ENTITY_ID).getValue();\n+        if (idpEntityId.equals(IdentityUtil.getProperty(\"OAuth.OpenIDConnect.IDTokenIssuerID\"))) {", "originalCommit": "15383873bd07d9349271aeef1c92d9c7cc0df688", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTAwMDcwMg==", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1345#discussion_r399000702", "bodyText": "We should add test cases for legacy mode and new mode and verify OIDC endpoints.\nShall we do that as well.", "author": "malithie", "createdAt": "2020-03-27T02:28:19Z", "path": "components/org.wso2.carbon.identity.discovery/src/test/java/org/wso2/carbon/identity/discovery/builders/ProviderConfigBuilderTest.java", "diffHunk": "@@ -113,7 +117,7 @@ public void testBuildOIDProviderConfig1() throws Exception {\n \n         mockStatic(OAuth2Util.class);\n         mockStatic(OAuth2Util.OAuthURL.class);\n-        when(OAuth2Util.OAuthURL.getOAuth2JWKSPageUrl(anyString())).thenThrow(new URISyntaxException(\"input\",\n+        when(OAuth2Util.OAuthURL.getOAuth2JWKSPageUrl()).thenThrow(new URISyntaxException(\"input\",\n                 \"URISyntaxException\"));\n         when(OAuth2Util.getIdTokenIssuer(anyString())).thenReturn(\"issuer\");\n         providerConfigBuilder.buildOIDProviderConfig(mockOidProviderRequest);", "originalCommit": "15383873bd07d9349271aeef1c92d9c7cc0df688", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "4a98d4c521da92928309f5f2cab35848b8b60811", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/commit/4a98d4c521da92928309f5f2cab35848b8b60811", "message": "Add tests for TenantURLSupport mode and fix minor issues", "committedDate": "2020-03-27T07:59:29Z", "type": "commit"}, {"oid": "e4bed35f81c6e5cd76d16ed7a21d46cf6d15bdcf", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/commit/e4bed35f81c6e5cd76d16ed7a21d46cf6d15bdcf", "message": "remove redundant test", "committedDate": "2020-03-27T10:17:28Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTIzMDEyNQ==", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1345#discussion_r399230125", "bodyText": "Add a method level comment", "author": "dewniMW", "createdAt": "2020-03-27T12:30:44Z", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java", "diffHunk": "@@ -1197,20 +1221,29 @@ public static String getOAuth2JWKSPageUrl(String tenantDomain) throws URISyntaxE\n             return auth2JWKSPageUrl;\n         }\n \n+        public static String getOAuth2JWKSPageUrl() throws URISyntaxException {", "originalCommit": "e4bed35f81c6e5cd76d16ed7a21d46cf6d15bdcf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTIzMDI2OA==", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1345#discussion_r399230268", "bodyText": "Shall we add a method level comment?", "author": "dewniMW", "createdAt": "2020-03-27T12:31:00Z", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java", "diffHunk": "@@ -1184,11 +1199,20 @@ public static String getOAuth2DCREPUrl(String tenantDomain) throws URISyntaxExce\n             return oauth2TokenEPUrl;\n         }\n \n+        public static String getOAuth2DCREPUrl() throws URISyntaxException {", "originalCommit": "e4bed35f81c6e5cd76d16ed7a21d46cf6d15bdcf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "cab7627fdfa6d1e1284e4f0a675d94f6d4e18499", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/commit/cab7627fdfa6d1e1284e4f0a675d94f6d4e18499", "message": "Add method comments.", "committedDate": "2020-03-27T12:47:37Z", "type": "commit"}]}