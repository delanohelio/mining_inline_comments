{"pr_number": 1374, "pr_title": "Add Global scope validator api", "pr_createdAt": "2020-05-04T05:01:25Z", "pr_url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1374", "timeline": [{"oid": "0dd5234a834b3eba86b992db700e56f2acd3146c", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/commit/0dd5234a834b3eba86b992db700e56f2acd3146c", "message": "Add Global scope validator api", "committedDate": "2020-05-04T05:41:58Z", "type": "forcePushed"}, {"oid": "6484d835bc4b2924832cf577776ca6b55738324a", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/commit/6484d835bc4b2924832cf577776ca6b55738324a", "message": "Add Global scope validator api", "committedDate": "2020-05-04T05:43:26Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTI1MDM2MQ==", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1374#discussion_r419250361", "bodyText": "Let's not have this API at all", "author": "malithie", "createdAt": "2020-05-04T07:20:14Z", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/validators/scope/ScopeValidator.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.oauth2.validators.scope;\n+\n+import org.wso2.carbon.identity.oauth2.IdentityOAuth2Exception;\n+import org.wso2.carbon.identity.oauth2.authz.OAuthAuthzReqMessageContext;\n+import org.wso2.carbon.identity.oauth2.model.AccessTokenDO;\n+import org.wso2.carbon.identity.oauth2.token.OAuthTokenReqMessageContext;\n+import org.wso2.carbon.user.api.UserStoreException;\n+\n+/**\n+ * This is a global level interface for scope validation. This needs to be engaged after application level validators.\n+ */\n+public interface ScopeValidator {\n+\n+    /**\n+     * Checks whether the validator can be engaged.\n+     *\n+     * @return True if it can handle, otherwise false.\n+     */\n+    boolean canHandle();\n+\n+    /**\n+     * Validates scopes in the authorization  request and manipulate the permitted scopes within the request.\n+     *\n+     * @param authzReqMessageContext Authorization request.\n+     * @return True if the user has enough permission to generate tokens or authorization codes with requested\n+     * scopes or no scopes are requested, otherwise false.\n+     * @throws IdentityOAuth2Exception\n+     */\n+    boolean validateScope(OAuthAuthzReqMessageContext authzReqMessageContext) throws UserStoreException,\n+            IdentityOAuth2Exception;\n+\n+    /**\n+     * Validates scopes in the token request and manipulate the permitted scopes within the request.\n+     *\n+     * @param tokReqMsgCtx OAuthTokenReqMessageContext.\n+     * @return True if the user has enough permission to generate tokens with requested scopes or\n+     * no scopes are requested, otherwise false.\n+     * @throws IdentityOAuth2Exception\n+     */\n+    boolean validateScope(OAuthTokenReqMessageContext tokReqMsgCtx) throws IdentityOAuth2Exception,\n+            UserStoreException;\n+\n+    /**\n+     * Validates scopes in the token validation request and manipulate the permitted scopes within the request.\n+     *\n+     * @param accessTokenDO AccessTokenDO.\n+     * @return True if the user has enough permission to access the resource with requested scopes or no scopes are\n+     * requested, otherwise false.\n+     * @throws IdentityOAuth2Exception\n+     */\n+    boolean validateScope(AccessTokenDO accessTokenDO) throws IdentityOAuth2Exception;", "originalCommit": "6484d835bc4b2924832cf577776ca6b55738324a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "75e88c09b8f1935ebd0496bf1c7b9e419f5992e0", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/commit/75e88c09b8f1935ebd0496bf1c7b9e419f5992e0", "message": "Add Global scope validator api", "committedDate": "2020-05-04T08:52:52Z", "type": "forcePushed"}, {"oid": "2e89aa9f9fc0c34564ed7dce4d88339d83d4555c", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/commit/2e89aa9f9fc0c34564ed7dce4d88339d83d4555c", "message": "Add Global scope validator api", "committedDate": "2020-05-04T08:57:21Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTI5OTExMw==", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1374#discussion_r419299113", "bodyText": "How do we intend this API to be used?", "author": "mefarazath", "createdAt": "2020-05-04T09:01:06Z", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/validators/scope/ScopeValidator.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.oauth2.validators.scope;\n+\n+import org.wso2.carbon.identity.oauth2.IdentityOAuth2Exception;\n+import org.wso2.carbon.identity.oauth2.authz.OAuthAuthzReqMessageContext;\n+import org.wso2.carbon.identity.oauth2.token.OAuthTokenReqMessageContext;\n+import org.wso2.carbon.user.api.UserStoreException;\n+\n+/**\n+ * This is a global level interface for scope validation. This needs to be engaged after application level validators.\n+ */\n+public interface ScopeValidator {\n+\n+    /**\n+     * Checks whether the validator can be engaged.\n+     *\n+     * @return True if it can handle, otherwise false.\n+     */\n+    boolean canHandle();", "originalCommit": "2e89aa9f9fc0c34564ed7dce4d88339d83d4555c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTMyMDQ2OQ==", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1374#discussion_r419320469", "bodyText": "can read the properties from config file or can have its own implementation specific to the validator implementations.", "author": "piraveena", "createdAt": "2020-05-04T09:42:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTI5OTExMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTI5OTQ0MQ==", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1374#discussion_r419299441", "bodyText": "Do we need to allow UserStoreException to be thrown from the interface?", "author": "mefarazath", "createdAt": "2020-05-04T09:01:44Z", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/validators/scope/ScopeValidator.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.oauth2.validators.scope;\n+\n+import org.wso2.carbon.identity.oauth2.IdentityOAuth2Exception;\n+import org.wso2.carbon.identity.oauth2.authz.OAuthAuthzReqMessageContext;\n+import org.wso2.carbon.identity.oauth2.token.OAuthTokenReqMessageContext;\n+import org.wso2.carbon.user.api.UserStoreException;\n+\n+/**\n+ * This is a global level interface for scope validation. This needs to be engaged after application level validators.\n+ */\n+public interface ScopeValidator {\n+\n+    /**\n+     * Checks whether the validator can be engaged.\n+     *\n+     * @return True if it can handle, otherwise false.\n+     */\n+    boolean canHandle();\n+\n+    /**\n+     * Validates scopes in the authorization  request and manipulate the permitted scopes within the request.\n+     *\n+     * @param authzReqMessageContext Authorization request.\n+     * @return True if the user has enough permission to generate tokens or authorization codes with requested\n+     * scopes or no scopes are requested, otherwise false.\n+     * @throws IdentityOAuth2Exception\n+     */\n+    boolean validateScope(OAuthAuthzReqMessageContext authzReqMessageContext) throws UserStoreException,\n+            IdentityOAuth2Exception;\n+\n+    /**\n+     * Validates scopes in the token request and manipulate the permitted scopes within the request.\n+     *\n+     * @param tokReqMsgCtx OAuthTokenReqMessageContext.\n+     * @return True if the user has enough permission to generate tokens with requested scopes or\n+     * no scopes are requested, otherwise false.\n+     * @throws IdentityOAuth2Exception\n+     */\n+    boolean validateScope(OAuthTokenReqMessageContext tokReqMsgCtx) throws IdentityOAuth2Exception,", "originalCommit": "2e89aa9f9fc0c34564ed7dce4d88339d83d4555c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTM1MDgzOA==", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1374#discussion_r419350838", "bodyText": "Should throw only 'IdentityOAuth2Exception'", "author": "malithie", "createdAt": "2020-05-04T10:45:54Z", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/validators/scope/ScopeValidator.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.oauth2.validators.scope;\n+\n+import org.wso2.carbon.identity.oauth2.IdentityOAuth2Exception;\n+import org.wso2.carbon.identity.oauth2.authz.OAuthAuthzReqMessageContext;\n+import org.wso2.carbon.identity.oauth2.token.OAuthTokenReqMessageContext;\n+import org.wso2.carbon.user.api.UserStoreException;\n+\n+/**\n+ * This is a global level interface for scope validation. This needs to be engaged after application level validators.\n+ */\n+public interface ScopeValidator {\n+\n+    /**\n+     * Checks whether the validator can be engaged.\n+     *\n+     * @return True if it can handle, otherwise false.\n+     */\n+    boolean canHandle();\n+\n+    /**\n+     * Validates scopes in the authorization  request and manipulate the permitted scopes within the request.\n+     *\n+     * @param authzReqMessageContext Authorization request.\n+     * @return True if the user has enough permission to generate tokens or authorization codes with requested\n+     * scopes or no scopes are requested, otherwise false.\n+     * @throws IdentityOAuth2Exception\n+     */\n+    boolean validateScope(OAuthAuthzReqMessageContext authzReqMessageContext) throws UserStoreException,", "originalCommit": "2e89aa9f9fc0c34564ed7dce4d88339d83d4555c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "b4f7db5beb6336150362d67a3b2d49c4ca87c49e", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/commit/b4f7db5beb6336150362d67a3b2d49c4ca87c49e", "message": "Add Global scope validator api", "committedDate": "2020-05-04T11:26:44Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQ1NTYxNA==", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1374#discussion_r419455614", "bodyText": "Shall we say 'token validation request' here", "author": "malithie", "createdAt": "2020-05-04T13:56:55Z", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/validators/scope/ScopeValidator.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.oauth2.validators.scope;\n+\n+import org.wso2.carbon.identity.oauth2.IdentityOAuth2Exception;\n+import org.wso2.carbon.identity.oauth2.authz.OAuthAuthzReqMessageContext;\n+import org.wso2.carbon.identity.oauth2.token.OAuthTokenReqMessageContext;\n+import org.wso2.carbon.identity.oauth2.validators.OAuth2TokenValidationMessageContext;\n+\n+/**\n+ * This is a global level interface for scope validation. This needs to be engaged after application level validators.\n+ */\n+public interface ScopeValidator {\n+\n+    /**\n+     * Checks whether the validator can be engaged.\n+     *\n+     * @return True if it can handle, otherwise false.\n+     */\n+    boolean canHandle();\n+\n+    /**\n+     * Validates scopes in the authorization  request and manipulate the permitted scopes within the request.\n+     *\n+     * @param authzReqMessageContext Authorization request.\n+     * @return True if the user has enough permission to generate tokens or authorization codes with requested\n+     * scopes or no scopes are requested, otherwise false.\n+     * @throws IdentityOAuth2Exception\n+     */\n+    boolean validateScope(OAuthAuthzReqMessageContext authzReqMessageContext) throws IdentityOAuth2Exception;\n+\n+    /**\n+     * Validates scopes in the token request and manipulate the permitted scopes within the request.\n+     *\n+     * @param tokReqMsgCtx OAuthTokenReqMessageContext.\n+     * @return True if the user has enough permission to generate tokens with requested scopes or\n+     * no scopes are requested, otherwise false.\n+     * @throws IdentityOAuth2Exception\n+     */\n+    boolean validateScope(OAuthTokenReqMessageContext tokReqMsgCtx) throws IdentityOAuth2Exception;\n+\n+    /**\n+     * Validates scopes in the token request and manipulate the permitted scopes within the request.", "originalCommit": "b4f7db5beb6336150362d67a3b2d49c4ca87c49e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "5dce897a9485a56733c8ffd1db2b2851f0826f82", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/commit/5dce897a9485a56733c8ffd1db2b2851f0826f82", "message": "Add Global scope validator api", "committedDate": "2020-05-04T14:19:40Z", "type": "commit"}, {"oid": "5dce897a9485a56733c8ffd1db2b2851f0826f82", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/commit/5dce897a9485a56733c8ffd1db2b2851f0826f82", "message": "Add Global scope validator api", "committedDate": "2020-05-04T14:19:40Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQ5MzMwMA==", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1374#discussion_r419493300", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Validates scopes in the authorization  request and manipulate the permitted scopes within the request. Engage\n          \n          \n            \n                 * Validates scopes in the authorization request and manipulate the permitted scopes within the request. Engage", "author": "mefarazath", "createdAt": "2020-05-04T14:48:10Z", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/validators/scope/ScopeValidator.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.oauth2.validators.scope;\n+\n+import org.wso2.carbon.identity.oauth2.IdentityOAuth2Exception;\n+import org.wso2.carbon.identity.oauth2.authz.OAuthAuthzReqMessageContext;\n+import org.wso2.carbon.identity.oauth2.token.OAuthTokenReqMessageContext;\n+import org.wso2.carbon.identity.oauth2.validators.OAuth2TokenValidationMessageContext;\n+\n+/**\n+ * This is a global level interface for scope validation. This needs to be engaged after application level validators.\n+ */\n+public interface ScopeValidator {\n+\n+    /**\n+     * Checks whether the validator can be engaged.\n+     *\n+     * @return True if it can handle, otherwise false.\n+     */\n+    boolean canHandle();\n+\n+    /**\n+     * Validates scopes in the authorization  request and manipulate the permitted scopes within the request. Engage", "originalCommit": "5dce897a9485a56733c8ffd1db2b2851f0826f82", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "9bd724e40eb69c9b80bc796d022bb291abaeff2a", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/commit/9bd724e40eb69c9b80bc796d022bb291abaeff2a", "message": "Update components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/validators/scope/ScopeValidator.java\n\nCo-authored-by: Farasath Ahamed <mefarazath@gmail.com>", "committedDate": "2020-05-04T15:04:04Z", "type": "commit"}]}