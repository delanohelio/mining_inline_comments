{"pr_number": 3272, "pr_title": "Stops using zipkin-builder Docker image", "pr_createdAt": "2020-10-31T05:02:20Z", "pr_url": "https://github.com/openzipkin/zipkin/pull/3272", "timeline": [{"oid": "59e18e8a6fe60283f6faab4fc3e24f3299dbacd2", "url": "https://github.com/openzipkin/zipkin/commit/59e18e8a6fe60283f6faab4fc3e24f3299dbacd2", "message": "Stops using zipkin-builder Docker image\n\nThis stops building a zipkin-builder image. This means that you can't\nbuild Zipkin from source using only Docker.\n\nEx. a variant of the following won't work for source, only releases from\nMaven central:\n```bash\n$ docker build https://github.com/openzipkin/zipkin\n```\n\nThis implies Docker Hub auto-builds won't work for source releases,\nwhich is not an issue as we don't use it anymore, and also Docker Hub\nquota is problematic.\n\nThe pressure to remove source builds became strong when we started to\nsupport multi-architecture builds. It is extremely time consuming to\nattempt to run Maven inside of Docker, with an arm64 emulator. This\ndisplaces effort that is sorely needed elsewhere and generally makes\nthe build unapproachable.\n\nSince the Zipkin server itself is platform independent Java and client-\nide Javascript, there's no architectural impact to re-using the same\nbinaries for N arch builds. For example, this reworks the GitHub Action\nvalidator to only build Zipkin once and use it for all the containers\nto check.\n\nFixes #3271", "committedDate": "2020-10-31T04:51:56Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQ1NjY1Mw==", "url": "https://github.com/openzipkin/zipkin/pull/3272#discussion_r515456653", "bodyText": "hoping this actually works, but can only test by watching :P", "author": "codefromthecrypt", "createdAt": "2020-10-31T05:03:30Z", "path": ".github/workflows/docker-tests.yml", "diffHunk": "@@ -6,16 +6,59 @@ on:\n   pull_request:\n \n jobs:\n-  discover-targets:\n-    name: Build target matrix\n+  prepare-docker:\n+    name: Build Zipkin and Docker target matrix\n     runs-on: ubuntu-latest\n     outputs:\n       matrix: ${{ steps.set-matrix.outputs.matrix }}\n     steps:\n-      - name: Checkout Sources\n+      - name: Checkout Repository\n         uses: actions/checkout@v2\n         with:\n-          fetch-depth: 1\n+          fetch-depth: 10\n+      # Remove apt repos that are known to break from time to time.\n+      # See https://github.com/actions/virtual-environments/issues/323\n+      - name: Remove broken apt repos [Ubuntu]\n+        if: matrix.os == 'ubuntu-latest'\n+        run: |\n+          for apt_file in `grep -lr microsoft /etc/apt/sources.list.d/`; do sudo rm $apt_file; done\n+      # Setup latest JDK. We do this to ensure users don't need to use the same version as our\n+      # release process. Release uses JDK 11, the last version that can target 1.6 bytecode.\n+      - name: Setup java\n+        uses: actions/setup-java@v1\n+        with:\n+          java-version: 15\n+      - name: Cache NPM Packages\n+        uses: actions/cache@v1\n+        with:\n+          path: ~/.npm\n+          key: npm-packages-${{ runner.os }}-${{ hashFiles('zipkin-lens/package-lock.json') }}\n+      - name: Cache Maven Modules\n+        uses: actions/cache@v1\n+        with:\n+          path: ~/.m2/repository\n+          key: m2-repository-${{ hashFiles('**/pom.xml') }}\n+      - name: Cache Maven Wrapper\n+        uses: actions/cache@v1\n+        with:\n+          path: .mvn/wrapper\n+          key: mvn-wrapper-${{ hashFiles('.mvn/wrapper/maven-wrapper.properties') }}\n+      - name: Show version\n+        run: ./mvnw -version\n+        shell: bash\n+      - name: Execute Server Build\n+        run: ./mvnw -T1C -q --batch-mode -DskipTests -Dlicense.skip=true --also-make -pl zipkin-server clean package\n+        shell: bash\n+        env:\n+          CI: true\n+      - uses: actions/upload-artifact@v2\n+        with:\n+          name: zipkin-server-jars\n+          if: ${{ success() }}\n+          if-no-files-found: error\n+          path: |", "originalCommit": "59e18e8a6fe60283f6faab4fc3e24f3299dbacd2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "9d2e7979962236a96d408f50452446900b3b1043", "url": "https://github.com/openzipkin/zipkin/commit/9d2e7979962236a96d408f50452446900b3b1043", "message": "no success then", "committedDate": "2020-10-31T05:13:40Z", "type": "commit"}, {"oid": "e918196763aa462b675fdc37500b8fd63ae407ae", "url": "https://github.com/openzipkin/zipkin/commit/e918196763aa462b675fdc37500b8fd63ae407ae", "message": "more syntax", "committedDate": "2020-10-31T05:21:39Z", "type": "commit"}, {"oid": "638f1a31e0673c58b993d35788ed2244c80f6cbb", "url": "https://github.com/openzipkin/zipkin/commit/638f1a31e0673c58b993d35788ed2244c80f6cbb", "message": "syntax", "committedDate": "2020-10-31T05:33:36Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQ2Mzc5NA==", "url": "https://github.com/openzipkin/zipkin/pull/3272#discussion_r515463794", "bodyText": "Even without the builder, does it hurt to just keep these three lines in the SNAPSHOT branch below instead of the warning message?", "author": "anuraaga", "createdAt": "2020-10-31T06:38:27Z", "path": "docker/bin/install.sh", "diffHunk": "@@ -15,33 +15,29 @@\n \n set -eux\n \n-# This script decides based on $RELEASE_FROM_CONTEXT and $RELEASE_VERSION whether to reuse, build,\n-# or download the binaries we need.\n-if [ \"$RELEASE_FROM_CONTEXT\" = \"true\" ]; then\n-  echo \"*** Reusing binaries in the Docker context...\"\n-  cp /code/zipkin-exec.jar zipkin-exec.jar\n-  cp /code/zipkin-slim.jar zipkin-slim.jar\n-elif [ \"$RELEASE_VERSION\" = \"master\" ]; then\n-  echo \"*** Building from source...\"\n-\n-  # Defensively avoid arm64+alpine problems with posix_spawn\n-  export MAVEN_OPTS=\"-Djdk.lang.Process.launchMechanism=vfork\"\n-\n-  # Use the same command as we suggest in zipkin-server/README.md\n-  #  * Uses mvn not ./mvnw to reduce layer size: we control the Maven version in Docker\n-  (cd /code; mvn -T1C -q --batch-mode -DskipTests -Dlicense.skip=true --also-make -pl zipkin-server package)", "originalCommit": "638f1a31e0673c58b993d35788ed2244c80f6cbb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQ2NjIxMg==", "url": "https://github.com/openzipkin/zipkin/pull/3272#discussion_r515466212", "bodyText": "it hurts because it is never touched and can be wrong or drift and we wouldn't know it. Explicitly unsupporting nesting builds prevents the next person from losing ages trying to get it to work on multi-arch (also laying a bomb for the next maintainer if they succeed). They'll see where it was removed and why.", "author": "codefromthecrypt", "createdAt": "2020-10-31T07:10:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQ2Mzc5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQ2NjY4Mw==", "url": "https://github.com/openzipkin/zipkin/pull/3272#discussion_r515466683", "bodyText": "But it's not so bad if it doesn't support multiarch right? If it drifts then when someone notices they can fix it. There seems to me reasonable bang for the buck in these few commands. Up to you though :)", "author": "anuraaga", "createdAt": "2020-10-31T07:16:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQ2Mzc5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQ2NjkyOA==", "url": "https://github.com/openzipkin/zipkin/pull/3272#discussion_r515466928", "bodyText": "you can add it back in a commit, but I think you will be the only user of this. I like the commit log shows how much horror this created.", "author": "codefromthecrypt", "createdAt": "2020-10-31T07:20:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQ2Mzc5NA=="}], "type": "inlineReview"}]}