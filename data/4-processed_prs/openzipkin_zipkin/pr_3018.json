{"pr_number": 3018, "pr_title": "Add Archive Trace button", "pr_createdAt": "2020-03-11T03:08:13Z", "pr_url": "https://github.com/openzipkin/zipkin/pull/3018", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDcyNjM0OQ==", "url": "https://github.com/openzipkin/zipkin/pull/3018#discussion_r390726349", "bodyText": "I think some clones incorrectly use 200", "author": "codefromthecrypt", "createdAt": "2020-03-11T03:22:05Z", "path": "zipkin-lens/src/components/TracePage/TraceSummaryHeader.jsx", "diffHunk": "@@ -104,6 +104,51 @@ const TraceSummaryHeader = React.memo(({ traceSummary, rootSpanIndex }) => {\n     ? config.logsUrl.replace('{traceId}', traceSummary.traceId)\n     : undefined;\n \n+  const archiveWriteUrl = (config.archiveWriteUrl && traceSummary)\n+    ? config.archiveWriteUrl\n+    : undefined;\n+\n+  const archiveReadUrl = (config.archiveReadUrl && traceSummary)\n+    ? config.archiveReadUrl.replace('{traceId}', traceSummary.traceId)\n+    : undefined;\n+\n+  const archiveClick = useCallback(() => {\n+    // We don't store the raw json in the browser yet, so we need to make an\n+    // HTTP call to retrieve it again.\n+    fetch(`${api.TRACE}/${traceSummary.traceId}`)\n+      .then((response) => {\n+        if (!response.ok) {\n+          throw new Error('Failed to fetch trace from backend');\n+        }\n+        return response.json();\n+      })\n+      .then((json) => {\n+        fetch(archiveWriteUrl, {\n+          method: 'POST',\n+          headers: {\n+            'Content-Type': 'application/json',\n+          },\n+          body: JSON.stringify(json),\n+        })\n+        .then((response) => {\n+          if (!response.ok || response.status != 202) {", "originalCommit": "db5c89ca73101b8bd09a5cb2557b5f4e2a9d4de3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjYxMzQ3NQ==", "url": "https://github.com/openzipkin/zipkin/pull/3018#discussion_r392613475", "bodyText": "I added this check on the status code after I mistakenly set the url to localhost:9412/zipkin. The homepage happily returned 200 to my POST request and I spent a while trying to figure out why the trace wasn't saved.\nI can remove it though", "author": "drolando", "createdAt": "2020-03-14T19:36:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDcyNjM0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjYyODg4Mw==", "url": "https://github.com/openzipkin/zipkin/pull/3018#discussion_r392628883", "bodyText": "we can wait until someone asks for 200 support. it is not following our spec to use 200 anyway.\nI'm really surprised homepage accepted POST! open an issue?", "author": "codefromthecrypt", "createdAt": "2020-03-14T23:56:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDcyNjM0OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDcyNjk5Mw==", "url": "https://github.com/openzipkin/zipkin/pull/3018#discussion_r390726993", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            archiveWriteUrl | zipkin.ui.archive-write-url | Url to archive the current trace. If specified, a button will appear on the trace page and will let you upload the current trace to the specified url. Not required.\n          \n          \n            \n            archivePostUrl | zipkin.ui.archive-post-url | Url to POST the current trace in Zipkin v2 json format. e.g. 'https://longterm/api/v2/spans'. If specified, a button will appear on the trace page accordingly. Not required.", "author": "codefromthecrypt", "createdAt": "2020-03-11T03:25:17Z", "path": "zipkin-server/README.md", "diffHunk": "@@ -172,6 +172,8 @@ searchEnabled | zipkin.ui.search-enabled | If the Find Traces screen is enabled.\n queryLimit | zipkin.ui.query-limit | Default limit for Find Traces. Defaults to 10.\n instrumented | zipkin.ui.instrumented | Which sites this Zipkin UI covers. Regex syntax. e.g. `http:\\/\\/example.com\\/.*` Defaults to match all websites (`.*`).\n logsUrl | zipkin.ui.logs-url | Logs query service url pattern. If specified, a button will appear on the trace page and will replace {traceId} in the url by the traceId. Not required.\n+archiveWriteUrl | zipkin.ui.archive-write-url | Url to archive the current trace. If specified, a button will appear on the trace page and will let you upload the current trace to the specified url. Not required.", "originalCommit": "db5c89ca73101b8bd09a5cb2557b5f4e2a9d4de3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDcyODEzMg==", "url": "https://github.com/openzipkin/zipkin/pull/3018#discussion_r390728132", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            archiveReadUrl | zipkin.ui.archive-read-url | Url to the archived trace. If specified, we will show it in the confirmation message after archiving a trace and replace {traceId} with the current traceId. Not required.\n          \n          \n            \n            archiveUrl | zipkin.ui.archive-url | Url to a web application serving an archived trace, templated by '{traceId}'. e.g. https://longterm/zipkin/trace/{traceId}'. This is shown in a confirmation message after a trace is successfully POSTed to the `archivePostUrl`. Not required.", "author": "codefromthecrypt", "createdAt": "2020-03-11T03:30:28Z", "path": "zipkin-server/README.md", "diffHunk": "@@ -172,6 +172,8 @@ searchEnabled | zipkin.ui.search-enabled | If the Find Traces screen is enabled.\n queryLimit | zipkin.ui.query-limit | Default limit for Find Traces. Defaults to 10.\n instrumented | zipkin.ui.instrumented | Which sites this Zipkin UI covers. Regex syntax. e.g. `http:\\/\\/example.com\\/.*` Defaults to match all websites (`.*`).\n logsUrl | zipkin.ui.logs-url | Logs query service url pattern. If specified, a button will appear on the trace page and will replace {traceId} in the url by the traceId. Not required.\n+archiveWriteUrl | zipkin.ui.archive-write-url | Url to archive the current trace. If specified, a button will appear on the trace page and will let you upload the current trace to the specified url. Not required.\n+archiveReadUrl | zipkin.ui.archive-read-url | Url to the archived trace. If specified, we will show it in the confirmation message after archiving a trace and replace {traceId} with the current traceId. Not required.", "originalCommit": "db5c89ca73101b8bd09a5cb2557b5f4e2a9d4de3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDc2NzM2Ng==", "url": "https://github.com/openzipkin/zipkin/pull/3018#discussion_r390767366", "bodyText": "We once thought about adding a tag, so it is easier to search for traces manually chosen. Do we want to do this?\nex. add a tag to the root span \"archived\" -> \"\" would be simplest\ncc @openzipkin/core", "author": "codefromthecrypt", "createdAt": "2020-03-11T06:29:49Z", "path": "zipkin-lens/src/components/TracePage/TraceSummaryHeader.jsx", "diffHunk": "@@ -104,6 +104,51 @@ const TraceSummaryHeader = React.memo(({ traceSummary, rootSpanIndex }) => {\n     ? config.logsUrl.replace('{traceId}', traceSummary.traceId)\n     : undefined;\n \n+  const archiveWriteUrl = (config.archiveWriteUrl && traceSummary)\n+    ? config.archiveWriteUrl\n+    : undefined;\n+\n+  const archiveReadUrl = (config.archiveReadUrl && traceSummary)\n+    ? config.archiveReadUrl.replace('{traceId}', traceSummary.traceId)\n+    : undefined;\n+\n+  const archiveClick = useCallback(() => {\n+    // We don't store the raw json in the browser yet, so we need to make an\n+    // HTTP call to retrieve it again.\n+    fetch(`${api.TRACE}/${traceSummary.traceId}`)\n+      .then((response) => {\n+        if (!response.ok) {\n+          throw new Error('Failed to fetch trace from backend');\n+        }\n+        return response.json();\n+      })\n+      .then((json) => {\n+        fetch(archiveWriteUrl, {\n+          method: 'POST',\n+          headers: {\n+            'Content-Type': 'application/json',\n+          },\n+          body: JSON.stringify(json),", "originalCommit": "db5c89ca73101b8bd09a5cb2557b5f4e2a9d4de3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDc2ODA2Ng==", "url": "https://github.com/openzipkin/zipkin/pull/3018#discussion_r390768066", "bodyText": "Sounds reasonable to me. I wonder if a user might have an archived tag for their own purposes separate from this use case. If so, perhaps we should prefix the tag with zipkin or such so it is clear this is a sort of internal tag not part of user data.", "author": "shakuzen", "createdAt": "2020-03-11T06:32:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDc2NzM2Ng=="}], "type": "inlineReview"}, {"oid": "8d44c2b18ec5b7266253616b55f51b4ef5b6e693", "url": "https://github.com/openzipkin/zipkin/commit/8d44c2b18ec5b7266253616b55f51b4ef5b6e693", "message": "Add Archive Trace button\n\nThis button lets you easily reupload the current trace to a different\nserver.\n\nThe main motivation for having this is that you can have the\narchival server have a very long retention period and use it as very\nlong term storage for traces that you care about. For example when\nsharing a trace in a jira ticket since otherwise the link would expire\nafter 1 week.\n\nDesign doc explaining the reason behind this in more details and why we\nwent with this implementation: https://github.com/openzipkin/openzipkin.github.io/wiki/Favorite-trace", "committedDate": "2020-03-15T05:36:03Z", "type": "forcePushed"}, {"oid": "cef37bf4f2065897729eada91978666e6ae59df6", "url": "https://github.com/openzipkin/zipkin/commit/cef37bf4f2065897729eada91978666e6ae59df6", "message": "Add Archive Trace button\n\nThis button lets you easily reupload the current trace to a different\nserver.\n\nThe main motivation for having this is that you can have the\narchival server have a very long retention period and use it as very\nlong term storage for traces that you care about. For example when\nsharing a trace in a jira ticket since otherwise the link would expire\nafter 1 week.\n\nDesign doc explaining the reason behind this in more details and why we\nwent with this implementation: https://github.com/openzipkin/openzipkin.github.io/wiki/Favorite-trace", "committedDate": "2020-03-15T05:38:02Z", "type": "forcePushed"}, {"oid": "62996619e8514e3cd08fc97e8dceecd582771a78", "url": "https://github.com/openzipkin/zipkin/commit/62996619e8514e3cd08fc97e8dceecd582771a78", "message": "Add Archive Trace button\n\nThis button lets you easily reupload the current trace to a different\nserver.\n\nThe main motivation for having this is that you can have the\narchival server have a very long retention period and use it as very\nlong term storage for traces that you care about. For example when\nsharing a trace in a jira ticket since otherwise the link would expire\nafter 1 week.\n\nDesign doc explaining the reason behind this in more details and why we\nwent with this implementation: https://github.com/openzipkin/openzipkin.github.io/wiki/Favorite-trace", "committedDate": "2020-03-15T17:52:40Z", "type": "forcePushed"}, {"oid": "f0b5155ab84a5e46e094794847cc5faba4f76a92", "url": "https://github.com/openzipkin/zipkin/commit/f0b5155ab84a5e46e094794847cc5faba4f76a92", "message": "Add Archive Trace button\n\nThis button lets you easily reupload the current trace to a different\nserver.\n\nThe main motivation for having this is that you can have the\narchival server have a very long retention period and use it as very\nlong term storage for traces that you care about. For example when\nsharing a trace in a jira ticket since otherwise the link would expire\nafter 1 week.\n\nDesign doc explaining the reason behind this in more details and why we\nwent with this implementation: https://github.com/openzipkin/openzipkin.github.io/wiki/Favorite-trace", "committedDate": "2020-03-15T18:16:31Z", "type": "forcePushed"}, {"oid": "19a2697afd04168f7aa32fe705d584f6fe0f6018", "url": "https://github.com/openzipkin/zipkin/commit/19a2697afd04168f7aa32fe705d584f6fe0f6018", "message": "Use react-alert for nicer alert popups", "committedDate": "2020-03-15T23:15:53Z", "type": "forcePushed"}, {"oid": "248c5fe842ff7acc9156dd4d55648958f901ca64", "url": "https://github.com/openzipkin/zipkin/commit/248c5fe842ff7acc9156dd4d55648958f901ca64", "message": "Add Archive Trace button\n\nThis button lets you easily reupload the current trace to a different\nserver.\n\nThe main motivation for having this is that you can have the\narchival server have a very long retention period and use it as very\nlong term storage for traces that you care about. For example when\nsharing a trace in a jira ticket since otherwise the link would expire\nafter 1 week.\n\nDesign doc explaining the reason behind this in more details and why we\nwent with this implementation: https://github.com/openzipkin/openzipkin.github.io/wiki/Favorite-trace", "committedDate": "2020-03-19T03:28:28Z", "type": "commit"}, {"oid": "5ccbcb4df715a842ad70cf9048dba9b449b8801d", "url": "https://github.com/openzipkin/zipkin/commit/5ccbcb4df715a842ad70cf9048dba9b449b8801d", "message": "Use notistack to show alerts", "committedDate": "2020-03-19T04:29:52Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc4NTgwOA==", "url": "https://github.com/openzipkin/zipkin/pull/3018#discussion_r394785808", "bodyText": "Instead of this nested fetching which makes it hard to read how about return the value of fetch and call .then above?", "author": "anuraaga", "createdAt": "2020-03-19T04:35:18Z", "path": "zipkin-lens/src/components/TracePage/TraceSummaryHeader.jsx", "diffHunk": "@@ -105,6 +106,81 @@ const TraceSummaryHeader = React.memo(({ traceSummary, rootSpanIndex }) => {\n       ? config.logsUrl.replace(/{traceId}/g, traceSummary.traceId)\n       : undefined;\n \n+  const archivePostUrl =\n+    config.archivePostUrl && traceSummary ? config.archivePostUrl : undefined;\n+\n+  const archiveUrl =\n+    config.archiveUrl && traceSummary\n+      ? config.archiveUrl.replace('{traceId}', traceSummary.traceId)\n+      : undefined;\n+\n+  const { enqueueSnackbar } = useSnackbar();\n+\n+  const archiveClick = useCallback(() => {\n+    const notify = function notify(message, variant) {\n+      enqueueSnackbar(message, {\n+        variant,\n+        anchorOrigin: {\n+          vertical: 'top',\n+          horizontal: 'center',\n+        },\n+        autoHideDuration: 10000, // 10 seconds\n+      });\n+    };\n+\n+    // We don't store the raw json in the browser yet, so we need to make an\n+    // HTTP call to retrieve it again.\n+    fetch(`${api.TRACE}/${traceSummary.traceId}`)\n+      .then((response) => {\n+        if (!response.ok) {\n+          throw new Error('Failed to fetch trace from backend');\n+        }\n+        return response.json();\n+      })\n+      .then((json) => {\n+        // Add zipkin.archived tag to root span\n+        /* eslint-disable-next-line no-restricted-syntax */\n+        for (const span of json) {\n+          if ('parentId' in span === false) {\n+            const tags = span.tags || {};\n+            tags['zipkin.archived'] = 'true';\n+            span.tags = tags;\n+            break;\n+          }\n+        }\n+\n+        fetch(archivePostUrl, {\n+          method: 'POST',\n+          headers: {\n+            'Content-Type': 'application/json',\n+          },\n+          body: JSON.stringify(json),\n+        })\n+          .then((response) => {", "originalCommit": "5ccbcb4df715a842ad70cf9048dba9b449b8801d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc4NTk4MA==", "url": "https://github.com/openzipkin/zipkin/pull/3018#discussion_r394785980", "bodyText": "If you use the same pattern as above of catching the error and notifying in the notication, you should be able to have a single catch instead of the nested", "author": "anuraaga", "createdAt": "2020-03-19T04:36:05Z", "path": "zipkin-lens/src/components/TracePage/TraceSummaryHeader.jsx", "diffHunk": "@@ -105,6 +106,81 @@ const TraceSummaryHeader = React.memo(({ traceSummary, rootSpanIndex }) => {\n       ? config.logsUrl.replace(/{traceId}/g, traceSummary.traceId)\n       : undefined;\n \n+  const archivePostUrl =\n+    config.archivePostUrl && traceSummary ? config.archivePostUrl : undefined;\n+\n+  const archiveUrl =\n+    config.archiveUrl && traceSummary\n+      ? config.archiveUrl.replace('{traceId}', traceSummary.traceId)\n+      : undefined;\n+\n+  const { enqueueSnackbar } = useSnackbar();\n+\n+  const archiveClick = useCallback(() => {\n+    const notify = function notify(message, variant) {\n+      enqueueSnackbar(message, {\n+        variant,\n+        anchorOrigin: {\n+          vertical: 'top',\n+          horizontal: 'center',\n+        },\n+        autoHideDuration: 10000, // 10 seconds\n+      });\n+    };\n+\n+    // We don't store the raw json in the browser yet, so we need to make an\n+    // HTTP call to retrieve it again.\n+    fetch(`${api.TRACE}/${traceSummary.traceId}`)\n+      .then((response) => {\n+        if (!response.ok) {\n+          throw new Error('Failed to fetch trace from backend');\n+        }\n+        return response.json();\n+      })\n+      .then((json) => {\n+        // Add zipkin.archived tag to root span\n+        /* eslint-disable-next-line no-restricted-syntax */\n+        for (const span of json) {\n+          if ('parentId' in span === false) {\n+            const tags = span.tags || {};\n+            tags['zipkin.archived'] = 'true';\n+            span.tags = tags;\n+            break;\n+          }\n+        }\n+\n+        fetch(archivePostUrl, {\n+          method: 'POST',\n+          headers: {\n+            'Content-Type': 'application/json',\n+          },\n+          body: JSON.stringify(json),\n+        })\n+          .then((response) => {\n+            if (\n+              !response.ok ||\n+              (response.status !== 202 && response.status === 200)\n+            ) {\n+              throw new Error('Failed to archive the trace');\n+            }\n+            if (archiveUrl) {\n+              notify(\n+                `Archive successful! This trace is now accessible at ${archiveUrl}`,\n+                'success',\n+              );\n+            } else {\n+              notify(`Archive successful!`, 'success');\n+            }\n+          })\n+          .catch((error) => {\n+            notify(`Failed to archive the trace: ${error}`, 'error');\n+          });\n+      })\n+      .catch(() => {\n+        notify('Failed to fetch trace from backend', 'error');", "originalCommit": "5ccbcb4df715a842ad70cf9048dba9b449b8801d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc4NzUzMg==", "url": "https://github.com/openzipkin/zipkin/pull/3018#discussion_r394787532", "bodyText": "const notify = (message, variant) => {...} is more natural?", "author": "tacigar", "createdAt": "2020-03-19T04:42:30Z", "path": "zipkin-lens/src/components/TracePage/TraceSummaryHeader.jsx", "diffHunk": "@@ -114,7 +114,20 @@ const TraceSummaryHeader = React.memo(({ traceSummary, rootSpanIndex }) => {\n       ? config.archiveUrl.replace('{traceId}', traceSummary.traceId)\n       : undefined;\n \n+  const { enqueueSnackbar } = useSnackbar();\n+\n   const archiveClick = useCallback(() => {\n+    const notify = function notify(message, variant) {", "originalCommit": "5ccbcb4df715a842ad70cf9048dba9b449b8801d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "59b8eb6802039c1b738ee0fe803ff948f13d74af", "url": "https://github.com/openzipkin/zipkin/commit/59b8eb6802039c1b738ee0fe803ff948f13d74af", "message": "Use notistack to show alerts", "committedDate": "2020-03-19T04:51:39Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc5MDY0Nw==", "url": "https://github.com/openzipkin/zipkin/pull/3018#discussion_r394790647", "bodyText": "Go ahead and catch the error here and include it in the message (your previous nested catch did that)", "author": "anuraaga", "createdAt": "2020-03-19T04:55:01Z", "path": "zipkin-lens/src/components/TracePage/TraceSummaryHeader.jsx", "diffHunk": "@@ -105,6 +106,80 @@ const TraceSummaryHeader = React.memo(({ traceSummary, rootSpanIndex }) => {\n       ? config.logsUrl.replace(/{traceId}/g, traceSummary.traceId)\n       : undefined;\n \n+  const archivePostUrl =\n+    config.archivePostUrl && traceSummary ? config.archivePostUrl : undefined;\n+\n+  const archiveUrl =\n+    config.archiveUrl && traceSummary\n+      ? config.archiveUrl.replace('{traceId}', traceSummary.traceId)\n+      : undefined;\n+\n+  const { enqueueSnackbar } = useSnackbar();\n+\n+  const archiveClick = useCallback(() => {\n+    const notify = (message, variant) => {\n+      enqueueSnackbar(message, {\n+        variant,\n+        anchorOrigin: {\n+          vertical: 'top',\n+          horizontal: 'center',\n+        },\n+        autoHideDuration: 10000, // 10 seconds\n+      });\n+    };\n+\n+    // We don't store the raw json in the browser yet, so we need to make an\n+    // HTTP call to retrieve it again.\n+    fetch(`${api.TRACE}/${traceSummary.traceId}`)\n+      .then((response) => {\n+        if (!response.ok) {\n+          throw new Error('Failed to fetch trace from backend');\n+        }\n+        return response.json();\n+      })\n+      .then((json) => {\n+        // Add zipkin.archived tag to root span\n+        /* eslint-disable-next-line no-restricted-syntax */\n+        for (const span of json) {\n+          if ('parentId' in span === false) {\n+            const tags = span.tags || {};\n+            tags['zipkin.archived'] = 'true';\n+            span.tags = tags;\n+            break;\n+          }\n+        }\n+        return json;\n+      })\n+      .then((json) => {\n+        return fetch(archivePostUrl, {\n+          method: 'POST',\n+          headers: {\n+            'Content-Type': 'application/json',\n+          },\n+          body: JSON.stringify(json),\n+        });\n+      })\n+      .then((response) => {\n+        if (\n+          !response.ok ||\n+          (response.status !== 202 && response.status === 200)\n+        ) {\n+          throw new Error('Failed to archive the trace');\n+        }\n+        if (archiveUrl) {\n+          notify(\n+            `Archive successful! This trace is now accessible at ${archiveUrl}`,\n+            'success',\n+          );\n+        } else {\n+          notify(`Archive successful!`, 'success');\n+        }\n+      })\n+      .catch(() => {", "originalCommit": "59b8eb6802039c1b738ee0fe803ff948f13d74af", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc5MTE1MA==", "url": "https://github.com/openzipkin/zipkin/pull/3018#discussion_r394791150", "bodyText": "I removed that because the error is usually Failed to fetch which only confuses me and doesn't really add anything useful. Maybe there's a better way to get the real http error message though", "author": "drolando", "createdAt": "2020-03-19T04:57:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc5MDY0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc5MjI5NA==", "url": "https://github.com/openzipkin/zipkin/pull/3018#discussion_r394792294", "bodyText": "Ah ok makes sense :)", "author": "anuraaga", "createdAt": "2020-03-19T05:02:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc5MDY0Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc5MjQ0OQ==", "url": "https://github.com/openzipkin/zipkin/pull/3018#discussion_r394792449", "bodyText": "do we want to comment here why SnackbarProvider? it might not be obvious that this helps with things like archive", "author": "codefromthecrypt", "createdAt": "2020-03-19T05:02:52Z", "path": "zipkin-lens/src/components/App/App.jsx", "diffHunk": "@@ -39,29 +40,31 @@ const App = () => {\n       <UiConfig>\n         <MuiPickersUtilsProvider utils={MomentUtils}>\n           <ThemeProvider theme={theme}>\n-            <UiConfigConsumer>\n-              {(config) => (\n-                <Provider store={configureStore(config)}>\n-                  <I18nProvider i18n={i18n}>\n-                    <BrowserRouter basename={BASE_PATH}>\n-                      <Layout>\n-                        <Route exact path=\"/\" component={DiscoverPage} />\n-                        <Route\n-                          exact\n-                          path=\"/dependency\"\n-                          component={DependenciesPage}\n-                        />\n-                        <Route\n-                          exact\n-                          path={['/traces/:traceId', '/traceViewer']}\n-                          component={TracePage}\n-                        />\n-                      </Layout>\n-                    </BrowserRouter>\n-                  </I18nProvider>\n-                </Provider>\n-              )}\n-            </UiConfigConsumer>\n+            <SnackbarProvider>", "originalCommit": "59b8eb6802039c1b738ee0fe803ff948f13d74af", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc5NzgyMA==", "url": "https://github.com/openzipkin/zipkin/pull/3018#discussion_r394797820", "bodyText": "Well we decided to move it here so that it could be reused in other parts of the UI and to decouple it from the trace page and archiving", "author": "drolando", "createdAt": "2020-03-19T05:27:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc5MjQ0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc5ODE2Ng==", "url": "https://github.com/openzipkin/zipkin/pull/3018#discussion_r394798166", "bodyText": "not arguing the rationale, just saying it is invisible unless looking at the comments. maybe a single-line comment about what this helps with?", "author": "codefromthecrypt", "createdAt": "2020-03-19T05:28:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc5MjQ0OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc5MjU5Mg==", "url": "https://github.com/openzipkin/zipkin/pull/3018#discussion_r394792592", "bodyText": "@jeqo @jcchavezs traducelo por favor!", "author": "codefromthecrypt", "createdAt": "2020-03-19T05:03:35Z", "path": "zipkin-lens/src/translations/es/messages.json", "diffHunk": "@@ -36,6 +36,7 @@\n   \"Trace ID\": \"ID de Traza\",\n   \"Upload JSON\": \"Subir JSON\",\n   \"View Logs\": \"Ver Logs\",\n+  \"Archive Trace\": \"\",", "originalCommit": "59b8eb6802039c1b738ee0fe803ff948f13d74af", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDg1ODU0OA==", "url": "https://github.com/openzipkin/zipkin/pull/3018#discussion_r394858548", "bodyText": "a la orden :)", "author": "jeqo", "createdAt": "2020-03-19T08:26:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc5MjU5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDg5OTk2NA==", "url": "https://github.com/openzipkin/zipkin/pull/3018#discussion_r394899964", "bodyText": "Sale!", "author": "jcchavezs", "createdAt": "2020-03-19T09:42:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc5MjU5Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc5MjgxMA==", "url": "https://github.com/openzipkin/zipkin/pull/3018#discussion_r394792810", "bodyText": "@uckyk do you mind offering some chinese translation text here?", "author": "codefromthecrypt", "createdAt": "2020-03-19T05:04:35Z", "path": "zipkin-lens/src/translations/zh-cn/messages.json", "diffHunk": "@@ -36,6 +36,7 @@\n   \"Trace ID\": \"\",\n   \"Upload JSON\": \"\",\n   \"View Logs\": \"\",\n+  \"Archive Trace\": \"\",", "originalCommit": "59b8eb6802039c1b738ee0fe803ff948f13d74af", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc5MjkyNQ==", "url": "https://github.com/openzipkin/zipkin/pull/3018#discussion_r394792925", "bodyText": "looks great", "author": "codefromthecrypt", "createdAt": "2020-03-19T05:05:10Z", "path": "zipkin-server/README.md", "diffHunk": "@@ -177,13 +177,23 @@ queryLimit | zipkin.ui.query-limit | Default limit for Find Traces. Defaults to\n instrumented | zipkin.ui.instrumented | Which sites this Zipkin UI covers. Regex syntax. e.g. `http:\\/\\/example.com\\/.*` Defaults to match all websites (`.*`).\n logsUrl | zipkin.ui.logs-url | Logs query service url pattern. If specified, a button will appear on the trace page and will replace {traceId} in the url by the traceId. Not required.\n supportUrl / zipkin.ui.support-url / A URL where a user can ask for support. If specified, a link will be placed in the side menu to this URL, for example a page to file support tickets. Not required.\n+archivePostUrl | zipkin.ui.archive-post-url | Url to POST the current trace in Zipkin v2 json format. e.g. 'https://longterm/api/v2/spans'. If specified, a button will appear on the trace page accordingly. Not required.\n+archiveUrl | zipkin.ui.archive-url | Url to a web application serving an archived trace, templated by '{traceId}'. e.g. https://longterm/zipkin/trace/{traceId}'. This is shown in a confirmation message after a trace is successfully POSTed to the `archivePostUrl`. Not required.\n dependency.lowErrorRate | zipkin.ui.dependency.low-error-rate | The rate of error calls on a dependency link that turns it yellow. Defaults to 0.5 (50%) set to >1 to disable.\n dependency.highErrorRate | zipkin.ui.dependency.high-error-rate | The rate of error calls on a dependency link that turns it red. Defaults to 0.75 (75%) set to >1 to disable.\n basePath | zipkin.ui.basepath | path prefix placed into the <base> tag in the UI HTML; useful when running behind a reverse proxy. Default \"/zipkin\"\n \n To map properties to environment variables, change them to upper-underscore case format. For\n example, if using docker you can set `ZIPKIN_UI_QUERY_LIMIT=100` to affect `$.queryLimit` in `/config.json`.\n \n+### Trace archival", "originalCommit": "59b8eb6802039c1b738ee0fe803ff948f13d74af", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc5Mzg5NQ==", "url": "https://github.com/openzipkin/zipkin/pull/3018#discussion_r394793895", "bodyText": "Are these changes still needed?", "author": "tacigar", "createdAt": "2020-03-19T05:09:30Z", "path": "zipkin-lens/src/zipkin/trace.js", "diffHunk": "@@ -291,7 +291,12 @@ function addLayoutDetails(\n   }\n }\n \n-export function detailedTraceSummary(root, logsUrl) {\n+export function detailedTraceSummary(\n+  root,\n+  logsUrl,\n+  archivePostUrl,\n+  archiveUrl,\n+) {", "originalCommit": "59b8eb6802039c1b738ee0fe803ff948f13d74af", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc5NzYyMA==", "url": "https://github.com/openzipkin/zipkin/pull/3018#discussion_r394797620", "bodyText": "I think so, as we still need to pass along the config values.", "author": "drolando", "createdAt": "2020-03-19T05:26:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc5Mzg5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDgwNDY3Nw==", "url": "https://github.com/openzipkin/zipkin/pull/3018#discussion_r394804677", "bodyText": "All configurations seems possible to be retrieved from useUiConfig hooks.\nlike:   \n  \n    \n      zipkin/zipkin-lens/src/components/TracePage/TraceSummaryHeader.jsx\n    \n    \n         Line 101\n      in\n      74759c9\n    \n    \n    \n    \n\n        \n          \n           const config = useUiConfig(); \n        \n    \n  \n\n\nAnd these parameters(archivePostUrl and archiveUrl) does not seem to be used anywhere...", "author": "tacigar", "createdAt": "2020-03-19T05:54:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc5Mzg5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDgwODY4OA==", "url": "https://github.com/openzipkin/zipkin/pull/3018#discussion_r394808688", "bodyText": "should I delete also logsUrl then?", "author": "drolando", "createdAt": "2020-03-19T06:09:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc5Mzg5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDgxMDE1OA==", "url": "https://github.com/openzipkin/zipkin/pull/3018#discussion_r394810158", "bodyText": "maybe...", "author": "tacigar", "createdAt": "2020-03-19T06:14:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc5Mzg5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDgyNjkzNA==", "url": "https://github.com/openzipkin/zipkin/pull/3018#discussion_r394826934", "bodyText": "Nice detective work finding this file - for reference in #2985 I didn't touch this file. I guess it's copy-pasted from somewhere and indeed these URL variables aren't used, so let's go ahead and delete", "author": "anuraaga", "createdAt": "2020-03-19T07:11:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc5Mzg5NQ=="}], "type": "inlineReview"}, {"oid": "b68c5142e10a96944fcf8c7928f4019189205321", "url": "https://github.com/openzipkin/zipkin/commit/b68c5142e10a96944fcf8c7928f4019189205321", "message": "Use notistack to show alerts", "committedDate": "2020-03-19T05:36:29Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDgwMTAyMQ==", "url": "https://github.com/openzipkin/zipkin/pull/3018#discussion_r394801021", "bodyText": "sweet", "author": "codefromthecrypt", "createdAt": "2020-03-19T05:40:54Z", "path": "zipkin-lens/src/components/App/App.jsx", "diffHunk": "@@ -39,29 +40,32 @@ const App = () => {\n       <UiConfig>\n         <MuiPickersUtilsProvider utils={MomentUtils}>\n           <ThemeProvider theme={theme}>\n-            <UiConfigConsumer>\n-              {(config) => (\n-                <Provider store={configureStore(config)}>\n-                  <I18nProvider i18n={i18n}>\n-                    <BrowserRouter basename={BASE_PATH}>\n-                      <Layout>\n-                        <Route exact path=\"/\" component={DiscoverPage} />\n-                        <Route\n-                          exact\n-                          path=\"/dependency\"\n-                          component={DependenciesPage}\n-                        />\n-                        <Route\n-                          exact\n-                          path={['/traces/:traceId', '/traceViewer']}\n-                          component={TracePage}\n-                        />\n-                      </Layout>\n-                    </BrowserRouter>\n-                  </I18nProvider>\n-                </Provider>\n-              )}\n-            </UiConfigConsumer>\n+            // Snackbar is used to provide popup alerts to the user", "originalCommit": "b68c5142e10a96944fcf8c7928f4019189205321", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDgwODMxNw==", "url": "https://github.com/openzipkin/zipkin/pull/3018#discussion_r394808317", "bodyText": "Should be {/* Snackbar is used to provide popup alerts to the user */}", "author": "tacigar", "createdAt": "2020-03-19T06:07:40Z", "path": "zipkin-lens/src/components/App/App.jsx", "diffHunk": "@@ -39,29 +40,32 @@ const App = () => {\n       <UiConfig>\n         <MuiPickersUtilsProvider utils={MomentUtils}>\n           <ThemeProvider theme={theme}>\n-            <UiConfigConsumer>\n-              {(config) => (\n-                <Provider store={configureStore(config)}>\n-                  <I18nProvider i18n={i18n}>\n-                    <BrowserRouter basename={BASE_PATH}>\n-                      <Layout>\n-                        <Route exact path=\"/\" component={DiscoverPage} />\n-                        <Route\n-                          exact\n-                          path=\"/dependency\"\n-                          component={DependenciesPage}\n-                        />\n-                        <Route\n-                          exact\n-                          path={['/traces/:traceId', '/traceViewer']}\n-                          component={TracePage}\n-                        />\n-                      </Layout>\n-                    </BrowserRouter>\n-                  </I18nProvider>\n-                </Provider>\n-              )}\n-            </UiConfigConsumer>\n+            // Snackbar is used to provide popup alerts to the user", "originalCommit": "b68c5142e10a96944fcf8c7928f4019189205321", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDg1ODE4Mg==", "url": "https://github.com/openzipkin/zipkin/pull/3018#discussion_r394858182", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              \"Archive Trace\": \"\",\n          \n          \n            \n              \"Archive Trace\": \"Archivar Traza\",", "author": "jeqo", "createdAt": "2020-03-19T08:26:14Z", "path": "zipkin-lens/src/translations/es/messages.json", "diffHunk": "@@ -36,6 +36,7 @@\n   \"Trace ID\": \"ID de Traza\",\n   \"Upload JSON\": \"Subir JSON\",\n   \"View Logs\": \"Ver Logs\",\n+  \"Archive Trace\": \"\",", "originalCommit": "b68c5142e10a96944fcf8c7928f4019189205321", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "902f92669282357173286beb12e4ab82c43e0dd1", "url": "https://github.com/openzipkin/zipkin/commit/902f92669282357173286beb12e4ab82c43e0dd1", "message": "Use notistack to show alerts", "committedDate": "2020-03-23T04:49:09Z", "type": "commit"}, {"oid": "902f92669282357173286beb12e4ab82c43e0dd1", "url": "https://github.com/openzipkin/zipkin/commit/902f92669282357173286beb12e4ab82c43e0dd1", "message": "Use notistack to show alerts", "committedDate": "2020-03-23T04:49:09Z", "type": "forcePushed"}]}