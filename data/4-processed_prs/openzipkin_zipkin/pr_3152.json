{"pr_number": 3152, "pr_title": "add notes about the Kafka topic configuration for this collector. Also fix minor type syntax in KafkaCollectorWorker", "pr_createdAt": "2020-07-25T12:59:28Z", "pr_url": "https://github.com/openzipkin/zipkin/pull/3152", "timeline": [{"oid": "f662e46d170c9d1d7a95f675f820a24765ceb373", "url": "https://github.com/openzipkin/zipkin/commit/f662e46d170c9d1d7a95f675f820a24765ceb373", "message": "add notes about the Kafka topic configuration for this collector. Also fix minor type syntax in KafkaCollectorWorker", "committedDate": "2020-07-25T12:55:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE4NTM5MQ==", "url": "https://github.com/openzipkin/zipkin/pull/3152#discussion_r461185391", "bodyText": "Not sure if suggesting 1 topic partition is a good default, as it will involve manually changing number of partitions and scaling consumers.\n6 could be a good starting point for production workloads as it gets evenly assigned to 1, 2, or 3 instances.", "author": "jeqo", "createdAt": "2020-07-27T21:37:48Z", "path": "zipkin-collector/kafka/README.md", "diffHunk": "@@ -44,3 +44,17 @@ for (int i = 0; i < count; i++) {\n ### Legacy encoding\n Older versions of zipkin accepted a single span per message, as opposed\n to a list per message. This practice is deprecated, but still supported.\n+\n+## Kafka topic settings\n+By default, this collector creates one instance of KafkaConsumer to poll for messages. Given that,\n+our suggestion is to create the `zipkin` topic with one partition initially. Observe the KafkaConsumer", "originalCommit": "f662e46d170c9d1d7a95f675f820a24765ceb373", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "d42de445c0fb25dab57f085dde528673a8ecc8c0", "url": "https://github.com/openzipkin/zipkin/commit/d42de445c0fb25dab57f085dde528673a8ecc8c0", "message": "rework based on feedback by @jeqo", "committedDate": "2020-07-28T19:30:00Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjE1NjU3OQ==", "url": "https://github.com/openzipkin/zipkin/pull/3152#discussion_r462156579", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * The collector starts 1 instance of `KafkaConsumer` by default. We do recommend creating the `zipkin` topic with 6 partitions however, as it allows you to easily scale out the collector later by increasing the [KAFKA_STREAMS](../../zipkin-server/README.md#kafka-collector) parameter.\n          \n          \n            \n            * The collector starts 1 instance of `KafkaConsumer` by default. We do recommend creating the `zipkin` topic with 6 or more partitions however, as it allows you to easily scale out the collector later by increasing the [KAFKA_STREAMS](../../zipkin-server/README.md#kafka-collector) parameter.", "author": "jeqo", "createdAt": "2020-07-29T09:14:14Z", "path": "zipkin-collector/kafka/README.md", "diffHunk": "@@ -44,3 +44,14 @@ for (int i = 0; i < count; i++) {\n ### Legacy encoding\n Older versions of zipkin accepted a single span per message, as opposed\n to a list per message. This practice is deprecated, but still supported.\n+\n+## Kafka configuration\n+\n+Below are a few guidelines for the Kafka infrastructure used by this collector:\n+* The collector does not explicitly create the `zipkin` topic itself. If your cluster has auto topic creation enabled then it will be created by Kafka automatically using the broker configured defaults. We recommend therefor creating the topic manually before starting the collector, using configuration parameters adapted for your Zipkin setup.\n+* The collector will not fail if the `zipkin` topic does not exist, it will instead just wait for the topic to become available.\n+* A size based retention makes more sense than the default time based (1 week), to safeguard against large bursts of span data.\n+* The collector starts 1 instance of `KafkaConsumer` by default. We do recommend creating the `zipkin` topic with 6 partitions however, as it allows you to easily scale out the collector later by increasing the [KAFKA_STREAMS](../../zipkin-server/README.md#kafka-collector) parameter.", "originalCommit": "d42de445c0fb25dab57f085dde528673a8ecc8c0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjE1NjY4OQ==", "url": "https://github.com/openzipkin/zipkin/pull/3152#discussion_r462156689", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * Monitoring the consumer lag of the collector as well as the size of the topic will help you   to decide if scaling up or down is needed.\n          \n          \n            \n            * Monitoring the consumer lag of the collector as well as the size of the topic will help you to decide if scaling up or down is needed.", "author": "jeqo", "createdAt": "2020-07-29T09:14:24Z", "path": "zipkin-collector/kafka/README.md", "diffHunk": "@@ -44,3 +44,14 @@ for (int i = 0; i < count; i++) {\n ### Legacy encoding\n Older versions of zipkin accepted a single span per message, as opposed\n to a list per message. This practice is deprecated, but still supported.\n+\n+## Kafka configuration\n+\n+Below are a few guidelines for the Kafka infrastructure used by this collector:\n+* The collector does not explicitly create the `zipkin` topic itself. If your cluster has auto topic creation enabled then it will be created by Kafka automatically using the broker configured defaults. We recommend therefor creating the topic manually before starting the collector, using configuration parameters adapted for your Zipkin setup.\n+* The collector will not fail if the `zipkin` topic does not exist, it will instead just wait for the topic to become available.\n+* A size based retention makes more sense than the default time based (1 week), to safeguard against large bursts of span data.\n+* The collector starts 1 instance of `KafkaConsumer` by default. We do recommend creating the `zipkin` topic with 6 partitions however, as it allows you to easily scale out the collector later by increasing the [KAFKA_STREAMS](../../zipkin-server/README.md#kafka-collector) parameter.\n+* As Zipkin reporter sends batches of spans which do not rely on any kind of ordering guarantee (key=null), you can increase the number of partitions without affecting ordering. It does not make sense however to have more `KafkaConsumer` instances than partitions as the instances will just be idle and not consume anything.\n+* Monitoring the consumer lag of the collector as well as the size of the topic will help you   to decide if scaling up or down is needed.", "originalCommit": "d42de445c0fb25dab57f085dde528673a8ecc8c0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "fd2f0aaf7db0223a4372050137f0b940bcfd49b5", "url": "https://github.com/openzipkin/zipkin/commit/fd2f0aaf7db0223a4372050137f0b940bcfd49b5", "message": "Update zipkin-collector/kafka/README.md\n\nCo-authored-by: Jorge Esteban Quilcate Otoya <quilcate.jorge@gmail.com>", "committedDate": "2020-07-29T09:30:29Z", "type": "commit"}, {"oid": "dff2f5be302c72e53e26c0b5e57d5e1342e0113e", "url": "https://github.com/openzipkin/zipkin/commit/dff2f5be302c72e53e26c0b5e57d5e1342e0113e", "message": "Update zipkin-collector/kafka/README.md\n\nCo-authored-by: Jorge Esteban Quilcate Otoya <quilcate.jorge@gmail.com>", "committedDate": "2020-07-29T09:30:39Z", "type": "commit"}]}