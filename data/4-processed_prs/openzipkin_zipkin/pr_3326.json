{"pr_number": 3326, "pr_title": "Ports last docker tests to jupiter", "pr_createdAt": "2020-12-07T01:59:38Z", "pr_url": "https://github.com/openzipkin/zipkin/pull/3326", "timeline": [{"oid": "61dbb2caf748b299db3ba8b539c85f6df8a654b5", "url": "https://github.com/openzipkin/zipkin/commit/61dbb2caf748b299db3ba8b539c85f6df8a654b5", "message": "Ports last docker tests to jupiter\n\nThis cleans up testcontainers fixtures and ports the two remaining\ndocker tests to jupiter (kafka and rabbit).", "committedDate": "2020-12-07T01:58:33Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzE4MjAzNw==", "url": "https://github.com/openzipkin/zipkin/pull/3326#discussion_r537182037", "bodyText": "most of the simplification here is dropping support of local connections (docker only now)", "author": "codefromthecrypt", "createdAt": "2020-12-07T02:01:28Z", "path": "zipkin-storage/cassandra/src/test/java/zipkin2/storage/cassandra/CassandraStorageExtension.java", "diffHunk": "@@ -31,57 +32,30 @@\n import org.testcontainers.containers.GenericContainer;\n import org.testcontainers.containers.output.Slf4jLogConsumer;\n import org.testcontainers.containers.wait.strategy.Wait;\n-import org.testcontainers.utility.DockerImageName;\n \n import static org.assertj.core.api.Assertions.assertThat;\n import static org.junit.jupiter.api.Assumptions.assumeTrue;\n+import static org.testcontainers.utility.DockerImageName.parse;\n import static zipkin2.Call.propagateIfFatal;\n import static zipkin2.storage.cassandra.ITCassandraStorage.SEARCH_TABLES;\n import static zipkin2.storage.cassandra.Schema.TABLE_DEPENDENCY;\n import static zipkin2.storage.cassandra.Schema.TABLE_SPAN;\n \n public class CassandraStorageExtension implements BeforeAllCallback, AfterAllCallback {\n   static final Logger LOGGER = LoggerFactory.getLogger(CassandraStorageExtension.class);\n-  static final int CASSANDRA_PORT = 9042;\n-  final DockerImageName image;\n-  GenericContainer<?> container;\n-  CqlSession globalSession;\n \n-  CassandraStorageExtension(DockerImageName image) {\n-    this.image = image;\n-  }\n+  final CassandraContainer container = new CassandraContainer();\n+  CqlSession globalSession;\n \n   @Override public void beforeAll(ExtensionContext context) {\n     if (context.getRequiredTestClass().getEnclosingClass() != null) {\n       // Only run once in outermost scope.\n       return;\n     }\n \n-    if (!\"true\".equals(System.getProperty(\"docker.skip\"))) {\n-      try {\n-        LOGGER.info(\"Starting docker image \" + image);\n-        container = new GenericContainer<>(image)\n-          .withExposedPorts(CASSANDRA_PORT)\n-          .waitingFor(Wait.forHealthcheck());\n-        container.start();\n-        container.withLogConsumer(new Slf4jLogConsumer(LOGGER));\n-      } catch (RuntimeException e) {\n-        LOGGER.warn(\"Couldn't start docker image \" + image + \": \" + e.getMessage(), e);\n-      }\n-    } else {\n-      LOGGER.info(\"Skipping startup of docker \" + image);\n-    }\n-\n-    try {\n-      globalSession = tryToInitializeSession(contactPoint());", "originalCommit": "61dbb2caf748b299db3ba8b539c85f6df8a654b5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "683a581f03488662f8060dff39eab1ba0c5ecf44", "url": "https://github.com/openzipkin/zipkin/commit/683a581f03488662f8060dff39eab1ba0c5ecf44", "message": "fuzz", "committedDate": "2020-12-07T02:15:20Z", "type": "commit"}, {"oid": "92b6da798219f23778ea397176b3d5a487076664", "url": "https://github.com/openzipkin/zipkin/commit/92b6da798219f23778ea397176b3d5a487076664", "message": "don't use old junit exception", "committedDate": "2020-12-07T02:23:12Z", "type": "commit"}, {"oid": "8765dfd5054d468caafb707b804827db9221ce91", "url": "https://github.com/openzipkin/zipkin/commit/8765dfd5054d468caafb707b804827db9221ce91", "message": "license", "committedDate": "2020-12-07T02:31:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzE5MjMwNA==", "url": "https://github.com/openzipkin/zipkin/pull/3326#discussion_r537192304", "bodyText": "Doesn't hurt but just curious, is producer ever null?", "author": "anuraaga", "createdAt": "2020-12-07T02:39:53Z", "path": "zipkin-collector/kafka/src/test/java/zipkin2/collector/kafka/ITKafkaCollector.java", "diffHunk": "@@ -68,17 +66,18 @@\n   };\n   KafkaProducer<byte[], byte[]> producer;\n \n-  @Before public void setup() {\n-    final Properties config = new Properties();\n-    config.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafka.bootstrapServers());\n+  @BeforeEach void setup() {\n+    metrics.clear();\n+    Properties config = new Properties();\n+    config.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafka.bootstrapServer());\n     producer = new KafkaProducer<>(config, new ByteArraySerializer(), new ByteArraySerializer());\n   }\n \n-  @After public void teardown() {\n-    producer.close();\n+  @AfterEach void tearDown() {\n+    if (producer != null) producer.close();", "originalCommit": "8765dfd5054d468caafb707b804827db9221ce91", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzE5NDMzMQ==", "url": "https://github.com/openzipkin/zipkin/pull/3326#discussion_r537194331", "bodyText": "I don't know if aftereach runs when beforeeach fails, if so, yeah it could be null", "author": "codefromthecrypt", "createdAt": "2020-12-07T02:46:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzE5MjMwNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzE5MjQ0Mg==", "url": "https://github.com/openzipkin/zipkin/pull/3326#discussion_r537192442", "bodyText": "Drift: lost the final (kidding)", "author": "anuraaga", "createdAt": "2020-12-07T02:40:25Z", "path": "zipkin-collector/kafka/src/test/java/zipkin2/collector/kafka/KafkaExtension.java", "diffHunk": "@@ -19,85 +19,80 @@\n import org.apache.kafka.clients.admin.AdminClient;\n import org.apache.kafka.clients.admin.AdminClientConfig;\n import org.apache.kafka.clients.admin.NewTopic;\n-import org.junit.AssumptionViolatedException;\n-import org.junit.ClassRule;\n-import org.junit.rules.ExternalResource;\n+import org.junit.jupiter.api.extension.AfterAllCallback;\n+import org.junit.jupiter.api.extension.BeforeAllCallback;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.opentest4j.TestAbortedException;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.testcontainers.containers.GenericContainer;\n import org.testcontainers.containers.InternetProtocol;\n+import org.testcontainers.containers.output.Slf4jLogConsumer;\n import org.testcontainers.containers.wait.strategy.Wait;\n-import org.testcontainers.utility.DockerImageName;\n \n import static org.testcontainers.utility.DockerImageName.parse;\n \n-/**\n- * This should be used as a {@link ClassRule} as it takes a very long time to start-up.\n- */\n-class KafkaCollectorRule extends ExternalResource {\n-  static final Logger LOGGER = LoggerFactory.getLogger(KafkaCollectorRule.class);\n-  static final DockerImageName IMAGE = parse(\"ghcr.io/openzipkin/zipkin-kafka:2.23.1\");\n+class KafkaExtension implements BeforeAllCallback, AfterAllCallback {\n+  static final Logger LOGGER = LoggerFactory.getLogger(KafkaExtension.class);\n   static final int KAFKA_PORT = 19092;\n-  static final String KAFKA_TOPIC = \"zipkin\";\n-  KafkaContainer container;\n \n-  static final class KafkaContainer extends GenericContainer<KafkaContainer> {\n-    KafkaContainer(DockerImageName image) {\n-      super(image);\n-      // 19092 is for connections from the Docker host and needs to be used as a fixed port.\n-      // TODO: someone who knows Kafka well, make ^^ comment better!\n-      addFixedExposedPort(KAFKA_PORT, KAFKA_PORT, InternetProtocol.TCP);\n-      this.waitStrategy = Wait.forHealthcheck();\n-    }\n-  }\n-\n-  @Override protected void before() {\n-    if (\"true\".equals(System.getProperty(\"docker.skip\"))) {\n-      throw new AssumptionViolatedException(\"Skipping startup of docker \" + IMAGE);\n-    }\n+  final KafkaContainer container = new KafkaContainer();\n \n-    try {\n-      LOGGER.info(\"Starting docker image \" + IMAGE);\n-      container = new KafkaContainer(IMAGE);\n-      container.start();\n-    } catch (Throwable e) {\n-      throw new AssumptionViolatedException(\n-        \"Couldn't start docker image \" + IMAGE + \": \" + e.getMessage(), e);\n+  @Override public void beforeAll(ExtensionContext context) {\n+    if (context.getRequiredTestClass().getEnclosingClass() != null) {\n+      // Only run once in outermost scope.\n+      return;\n     }\n \n-    prepareTopic(KAFKA_TOPIC, 1);\n+    container.start();\n+    LOGGER.info(\"Using bootstrapServer \" + bootstrapServer());\n   }\n \n   void prepareTopic(final String topic, final int partitions) {\n-    final Properties config = new Properties();\n-    config.put(AdminClientConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers());\n-    AdminClient adminClient = AdminClient.create(config);\n-    try {\n+    Properties config = new Properties();", "originalCommit": "8765dfd5054d468caafb707b804827db9221ce91", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzE5MzU1OQ==", "url": "https://github.com/openzipkin/zipkin/pull/3326#discussion_r537193559", "bodyText": "It's slightly nerve-racking to use the same spans for both. But that's not special to this PR anyways", "author": "anuraaga", "createdAt": "2020-12-07T02:44:16Z", "path": "zipkin-collector/rabbitmq/src/test/java/zipkin2/collector/rabbitmq/ITRabbitMQCollector.java", "diffHunk": "@@ -76,16 +116,23 @@ void messageWithMultipleSpans(SpanBytesEncoder encoder) throws Exception {\n   }\n \n   /** Ensures malformed spans don't hang the collector */\n-  @Test public void skipsMalformedData() throws Exception {\n+  @Test void skipsMalformedData() throws Exception {\n+    RabbitMQCollector.Builder builder = builder(\"decoder_exception\");\n+\n     byte[] malformed1 = \"[\\\"='\".getBytes(UTF_8); // screwed up json\n     byte[] malformed2 = \"malformed\".getBytes(UTF_8);\n-    publish(THRIFT.encodeList(spans));\n-    publish(new byte[0]);\n-    publish(malformed1);\n-    publish(malformed2);\n-    publish(THRIFT.encodeList(spans));\n-\n-    Thread.sleep(200L);\n+    produceSpans(THRIFT.encodeList(spans), builder.queue);\n+    produceSpans(new byte[0], builder.queue);\n+    produceSpans(malformed1, builder.queue);\n+    produceSpans(malformed2, builder.queue);\n+    produceSpans(THRIFT.encodeList(spans), builder.queue);\n+\n+    try (RabbitMQCollector collector = builder.build()) {\n+      collector.start();\n+      assertThat(receivedSpans.take()).containsExactlyElementsOf(spans);\n+      // the only way we could read this, is if the malformed spans were skipped.\n+      assertThat(receivedSpans.take()).containsExactlyElementsOf(spans);", "originalCommit": "8765dfd5054d468caafb707b804827db9221ce91", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzE5NTI1OA==", "url": "https://github.com/openzipkin/zipkin/pull/3326#discussion_r537195258", "bodyText": "this nerve racking repeats in a bunch of places, but I'll skip redoing that for now. agreed anyway", "author": "codefromthecrypt", "createdAt": "2020-12-07T02:50:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzE5MzU1OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzE5MzY1NQ==", "url": "https://github.com/openzipkin/zipkin/pull/3326#discussion_r537193655", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                try (RabbitMQCollector collector = builder(\"muah\").build()) {\n          \n          \n            \n                try (RabbitMQCollector collector = builder(\"bugs bunny\").build()) {", "author": "anuraaga", "createdAt": "2020-12-07T02:44:37Z", "path": "zipkin-collector/rabbitmq/src/test/java/zipkin2/collector/rabbitmq/ITRabbitMQCollector.java", "diffHunk": "@@ -95,40 +142,96 @@ void messageWithMultipleSpans(SpanBytesEncoder encoder) throws Exception {\n     assertThat(rabbitmqMetrics.spansDropped()).isZero();\n   }\n \n-  /** See GitHub issue #2068 */\n-  @Test\n-  public void startsWhenConfiguredQueueAlreadyExists() throws Exception {\n-    String differentQueue = \"zipkin-test2\";\n-\n-    rabbit.declareQueue(differentQueue);\n-    collector.close();\n-    collector = rabbit.tryToInitializeCollector(newCollectorBuilder().queue(differentQueue)).start();\n-\n-    publish(JSON_V2.encodeList(spans));\n-\n-    Thread.sleep(200L);\n-    assertThat(storage.acceptedSpanCount()).isEqualTo(spans.size());\n+  @Test void startsWhenConfiguredQueueDoesntExist() throws Exception {\n+    try (RabbitMQCollector collector = builder(\"ignored\").queue(\"zipkin-test2\").build()) {\n+      assertThat(collector.check().ok()).isTrue();\n+    }\n   }\n \n   /** Guards against errors that leak from storage, such as InvalidQueryException */\n-  @Test public void skipsOnSpanConsumerException() {\n-    // TODO: reimplement\n-  }\n+  @Test void skipsOnSpanStorageException() throws Exception {\n+    AtomicInteger counter = new AtomicInteger();\n+    consumer = (input) -> new Call.Base<Void>() {\n+      @Override protected Void doExecute() {\n+        throw new AssertionError();\n+      }\n+\n+      @Override protected void doEnqueue(Callback<Void> callback) {\n+        if (counter.getAndIncrement() == 1) {\n+          callback.onError(new RuntimeException(\"storage fell over\"));\n+        } else {\n+          receivedSpans.add(spans);\n+          callback.onSuccess(null);\n+        }\n+      }\n+\n+      @Override public Call<Void> clone() {\n+        throw new AssertionError();\n+      }\n+    };\n+    final StorageComponent storage = buildStorage(consumer);\n+    RabbitMQCollector.Builder builder = builder(\"storage_exception\").storage(storage);\n+\n+    produceSpans(THRIFT.encodeList(spans), builder.queue);\n+    produceSpans(THRIFT.encodeList(spans), builder.queue); // tossed on error\n+    produceSpans(THRIFT.encodeList(spans), builder.queue);\n+\n+    try (RabbitMQCollector collector = builder.build()) {\n+      collector.start();\n+      assertThat(receivedSpans.take()).containsExactlyElementsOf(spans);\n+      // the only way we could read this, is if the malformed span was skipped.\n+      assertThat(receivedSpans.take()).containsExactlyElementsOf(spans);\n+    }\n \n-  @Test public void messagesDistributedAcrossMultipleThreadsSuccessfully() {\n-    // TODO: reimplement\n+    assertThat(rabbitmqMetrics.messages()).isEqualTo(3);\n+    assertThat(rabbitmqMetrics.messagesDropped()).isZero(); // storage failure isn't a message failure\n+    assertThat(rabbitmqMetrics.bytes()).isEqualTo(THRIFT.encodeList(spans).length * 3);\n+    assertThat(rabbitmqMetrics.spans()).isEqualTo(spans.size() * 3);\n+    assertThat(rabbitmqMetrics.spansDropped()).isEqualTo(spans.size()); // only one dropped\n   }\n \n-  RabbitMQCollector.Builder newCollectorBuilder() {\n-    return rabbit.newCollectorBuilder().storage(storage).metrics(metrics);\n+  /**\n+   * The {@code toString()} of {@link Component} implementations appear in health check endpoints.\n+   * Since these are likely to be exposed in logs and other monitoring tools, care should be taken\n+   * to ensure {@code toString()} output is a reasonable length and does not contain sensitive\n+   * information.\n+   */\n+  @Test void toStringContainsOnlySummaryInformation() throws Exception {\n+    try (RabbitMQCollector collector = builder(\"muah\").build()) {", "originalCommit": "8765dfd5054d468caafb707b804827db9221ce91", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzE5MzcwNw==", "url": "https://github.com/openzipkin/zipkin/pull/3326#discussion_r537193707", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                      rabbit.port(), \"muah\")\n          \n          \n            \n                      rabbit.port(), \"bugs bunny\")", "author": "anuraaga", "createdAt": "2020-12-07T02:44:45Z", "path": "zipkin-collector/rabbitmq/src/test/java/zipkin2/collector/rabbitmq/ITRabbitMQCollector.java", "diffHunk": "@@ -95,40 +142,96 @@ void messageWithMultipleSpans(SpanBytesEncoder encoder) throws Exception {\n     assertThat(rabbitmqMetrics.spansDropped()).isZero();\n   }\n \n-  /** See GitHub issue #2068 */\n-  @Test\n-  public void startsWhenConfiguredQueueAlreadyExists() throws Exception {\n-    String differentQueue = \"zipkin-test2\";\n-\n-    rabbit.declareQueue(differentQueue);\n-    collector.close();\n-    collector = rabbit.tryToInitializeCollector(newCollectorBuilder().queue(differentQueue)).start();\n-\n-    publish(JSON_V2.encodeList(spans));\n-\n-    Thread.sleep(200L);\n-    assertThat(storage.acceptedSpanCount()).isEqualTo(spans.size());\n+  @Test void startsWhenConfiguredQueueDoesntExist() throws Exception {\n+    try (RabbitMQCollector collector = builder(\"ignored\").queue(\"zipkin-test2\").build()) {\n+      assertThat(collector.check().ok()).isTrue();\n+    }\n   }\n \n   /** Guards against errors that leak from storage, such as InvalidQueryException */\n-  @Test public void skipsOnSpanConsumerException() {\n-    // TODO: reimplement\n-  }\n+  @Test void skipsOnSpanStorageException() throws Exception {\n+    AtomicInteger counter = new AtomicInteger();\n+    consumer = (input) -> new Call.Base<Void>() {\n+      @Override protected Void doExecute() {\n+        throw new AssertionError();\n+      }\n+\n+      @Override protected void doEnqueue(Callback<Void> callback) {\n+        if (counter.getAndIncrement() == 1) {\n+          callback.onError(new RuntimeException(\"storage fell over\"));\n+        } else {\n+          receivedSpans.add(spans);\n+          callback.onSuccess(null);\n+        }\n+      }\n+\n+      @Override public Call<Void> clone() {\n+        throw new AssertionError();\n+      }\n+    };\n+    final StorageComponent storage = buildStorage(consumer);\n+    RabbitMQCollector.Builder builder = builder(\"storage_exception\").storage(storage);\n+\n+    produceSpans(THRIFT.encodeList(spans), builder.queue);\n+    produceSpans(THRIFT.encodeList(spans), builder.queue); // tossed on error\n+    produceSpans(THRIFT.encodeList(spans), builder.queue);\n+\n+    try (RabbitMQCollector collector = builder.build()) {\n+      collector.start();\n+      assertThat(receivedSpans.take()).containsExactlyElementsOf(spans);\n+      // the only way we could read this, is if the malformed span was skipped.\n+      assertThat(receivedSpans.take()).containsExactlyElementsOf(spans);\n+    }\n \n-  @Test public void messagesDistributedAcrossMultipleThreadsSuccessfully() {\n-    // TODO: reimplement\n+    assertThat(rabbitmqMetrics.messages()).isEqualTo(3);\n+    assertThat(rabbitmqMetrics.messagesDropped()).isZero(); // storage failure isn't a message failure\n+    assertThat(rabbitmqMetrics.bytes()).isEqualTo(THRIFT.encodeList(spans).length * 3);\n+    assertThat(rabbitmqMetrics.spans()).isEqualTo(spans.size() * 3);\n+    assertThat(rabbitmqMetrics.spansDropped()).isEqualTo(spans.size()); // only one dropped\n   }\n \n-  RabbitMQCollector.Builder newCollectorBuilder() {\n-    return rabbit.newCollectorBuilder().storage(storage).metrics(metrics);\n+  /**\n+   * The {@code toString()} of {@link Component} implementations appear in health check endpoints.\n+   * Since these are likely to be exposed in logs and other monitoring tools, care should be taken\n+   * to ensure {@code toString()} output is a reasonable length and does not contain sensitive\n+   * information.\n+   */\n+  @Test void toStringContainsOnlySummaryInformation() throws Exception {\n+    try (RabbitMQCollector collector = builder(\"muah\").build()) {\n+      collector.start();\n+\n+      assertThat(collector).hasToString(\n+        String.format(\"RabbitMQCollector{addresses=[%s:%s], queue=%s}\", rabbit.host(),\n+          rabbit.port(), \"muah\")", "originalCommit": "8765dfd5054d468caafb707b804827db9221ce91", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "47fe1b7d989bb3845b0b6a600714abe2a2f2548c", "url": "https://github.com/openzipkin/zipkin/commit/47fe1b7d989bb3845b0b6a600714abe2a2f2548c", "message": "Update zipkin-collector/rabbitmq/src/test/java/zipkin2/collector/rabbitmq/ITRabbitMQCollector.java\n\nCo-authored-by: Anuraag Agrawal <anuraaga@gmail.com>", "committedDate": "2020-12-07T02:47:41Z", "type": "commit"}, {"oid": "99e7fd7d7a35f122b220094ca4ffd3a8a209a175", "url": "https://github.com/openzipkin/zipkin/commit/99e7fd7d7a35f122b220094ca4ffd3a8a209a175", "message": "Update zipkin-collector/rabbitmq/src/test/java/zipkin2/collector/rabbitmq/ITRabbitMQCollector.java\n\nCo-authored-by: Anuraag Agrawal <anuraaga@gmail.com>", "committedDate": "2020-12-07T02:47:50Z", "type": "commit"}, {"oid": "548a833fb330d770c958c28b7a942567a49ca403", "url": "https://github.com/openzipkin/zipkin/commit/548a833fb330d770c958c28b7a942567a49ca403", "message": "missing import", "committedDate": "2020-12-07T02:55:23Z", "type": "commit"}, {"oid": "4709bb18c41535f96ae0f821309ede2ac42cf308", "url": "https://github.com/openzipkin/zipkin/commit/4709bb18c41535f96ae0f821309ede2ac42cf308", "message": "adds timeout to collector tests", "committedDate": "2020-12-07T04:22:04Z", "type": "commit"}]}