{"pr_number": 3333, "pr_title": "Adds support for Elasticsearch 7.10", "pr_createdAt": "2020-12-25T01:18:59Z", "pr_url": "https://github.com/openzipkin/zipkin/pull/3333", "timeline": [{"oid": "c86ed2f4cf74508620622a1422dfb02e198c006c", "url": "https://github.com/openzipkin/zipkin/commit/c86ed2f4cf74508620622a1422dfb02e198c006c", "message": "Adds support for Elasticsearch 7.10\n\nThis fixes a comparison bug which installed the incorrect template.\n\nWhat happened was v7.10 was mistaken for v7.1", "committedDate": "2020-12-25T01:17:32Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODc3MzA4NA==", "url": "https://github.com/openzipkin/zipkin/pull/3333#discussion_r548773084", "bodyText": "this was the bug cc @xeraa!", "author": "codefromthecrypt", "createdAt": "2020-12-25T01:20:38Z", "path": "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/ElasticsearchVersion.java", "diffHunk": "@@ -17,35 +17,93 @@\n import com.linecorp.armeria.common.AggregatedHttpRequest;\n import com.linecorp.armeria.common.HttpMethod;\n import java.io.IOException;\n+import java.util.Objects;\n import java.util.function.Supplier;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n import zipkin2.elasticsearch.internal.client.HttpCall;\n \n import static zipkin2.elasticsearch.internal.JsonReaders.enterPath;\n \n-enum ElasticsearchVersion implements HttpCall.BodyConverter<Float> {\n-  INSTANCE;\n+/** Helps avoid problems comparing versions by number. Ex 7.10 should be > 7.9 */\n+public final class ElasticsearchVersion implements Comparable<ElasticsearchVersion> {\n+  public static final ElasticsearchVersion V5_0 = new ElasticsearchVersion(5, 0);\n+  public static final ElasticsearchVersion V6_0 = new ElasticsearchVersion(6, 0);\n+  public static final ElasticsearchVersion V7_0 = new ElasticsearchVersion(7, 0);\n+  public static final ElasticsearchVersion V7_8 = new ElasticsearchVersion(7, 8);\n+  public static final ElasticsearchVersion V8_0 = new ElasticsearchVersion(8, 0);\n \n-  float get(HttpCall.Factory callFactory) throws IOException {\n-    AggregatedHttpRequest getNode = AggregatedHttpRequest.of(HttpMethod.GET, \"/\");\n-    Float version = callFactory.newCall(getNode, this, \"get-node\").execute();\n-    if (version == null) {\n-      throw new IllegalArgumentException(\"No content reading Elasticsearch version\");\n-    }\n-    return version;\n+  static ElasticsearchVersion get(HttpCall.Factory http) throws IOException {\n+    return Parser.INSTANCE.get(http);\n+  }\n+\n+  final int major, minor;\n+\n+  ElasticsearchVersion(int major, int minor) {\n+    this.major = major;\n+    this.minor = minor;\n+  }\n+\n+  @Override public int compareTo(ElasticsearchVersion other) {\n+    if (major < other.major) return -1;\n+    if (major > other.major) return 1;\n+    return Integer.compare(minor, other.minor);\n+  }\n+\n+  @Override public boolean equals(Object o) {\n+    if (o == this) return true;\n+    if (!(o instanceof ElasticsearchVersion)) return false;\n+    ElasticsearchVersion that = (ElasticsearchVersion) o;\n+    return this.major == that.major && this.minor == that.minor;\n+  }\n+\n+  @Override public int hashCode() {\n+    return Objects.hash(major, minor);\n+  }\n+\n+  @Override public String toString() {\n+    return major + \".\" + minor;\n   }\n \n-  @Override public Float convert(JsonParser parser, Supplier<String> contentString) {\n-    String version = null;\n-    try {\n-      if (enterPath(parser, \"version\", \"number\") != null) version = parser.getText();\n-    } catch (RuntimeException | IOException possiblyParseException) {\n-      // EmptyCatch ignored\n+  enum Parser implements HttpCall.BodyConverter<ElasticsearchVersion> {\n+    INSTANCE;\n+\n+    final Pattern REGEX = Pattern.compile(\"(\\\\d+)\\\\.(\\\\d+).*\");\n+\n+    ElasticsearchVersion get(HttpCall.Factory callFactory) throws IOException {\n+      AggregatedHttpRequest getNode = AggregatedHttpRequest.of(HttpMethod.GET, \"/\");\n+      ElasticsearchVersion version = callFactory.newCall(getNode, this, \"get-node\").execute();\n+      if (version == null) {\n+        throw new IllegalArgumentException(\"No content reading Elasticsearch version\");\n+      }\n+      return version;\n     }\n-    if (version == null) {\n-      throw new IllegalArgumentException(\n-        \".version.number not found in response: \" + contentString.get());\n+\n+    @Override\n+    public ElasticsearchVersion convert(JsonParser parser, Supplier<String> contentString) {\n+      String version = null;\n+      try {\n+        if (enterPath(parser, \"version\", \"number\") != null) version = parser.getText();\n+      } catch (RuntimeException | IOException possiblyParseException) {\n+        // EmptyCatch ignored\n+      }\n+      if (version == null) {\n+        throw new IllegalArgumentException(\n+          \".version.number not found in response: \" + contentString.get());\n+      }\n+\n+      Matcher matcher = REGEX.matcher(version);\n+      if (!matcher.matches()) {\n+        throw new IllegalArgumentException(\"Invalid .version.number: \" + version);\n+      }\n+\n+      try {\n+        int major = Integer.parseInt(matcher.group(1));\n+        int minor = Integer.parseInt(matcher.group(2));\n+        return new ElasticsearchVersion(major, minor);\n+      } catch (NumberFormatException e) {\n+        throw new IllegalArgumentException(\"Invalid .version.number: \" + version);\n+      }\n     }\n-    return Float.valueOf(version.substring(0, 3));", "originalCommit": "c86ed2f4cf74508620622a1422dfb02e198c006c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODkyOTgxMg==", "url": "https://github.com/openzipkin/zipkin/pull/3333#discussion_r548929812", "bodyText": "Ah, nice find. Thanks for fixing that!", "author": "xeraa", "createdAt": "2020-12-26T01:30:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODc3MzA4NA=="}], "type": "inlineReview"}, {"oid": "6727e686d1f83e35d8fea76c58e01a62b070bd5e", "url": "https://github.com/openzipkin/zipkin/commit/6727e686d1f83e35d8fea76c58e01a62b070bd5e", "message": "drift", "committedDate": "2020-12-25T01:27:52Z", "type": "commit"}]}