{"pr_number": 2454, "pr_title": "Implement SerializationBehaviors.NONE and SerializationBehaviors.METADATA_ONLY.", "pr_createdAt": "2020-01-02T19:39:19Z", "pr_url": "https://github.com/SpongePowered/Sponge/pull/2454", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzEwODQ3OQ==", "url": "https://github.com/SpongePowered/Sponge/pull/2454#discussion_r363108479", "bodyText": "this.", "author": "Zidane", "createdAt": "2020-01-05T18:10:47Z", "path": "src/main/java/org/spongepowered/common/mixin/core/world/storage/SaveHandlerMixin.java", "diffHunk": "@@ -70,9 +77,45 @@\n \n     @Shadow @Final private File worldDirectory;\n \n+    @Shadow protected abstract void setSessionLock();\n+\n     @Nullable private Exception impl$capturedException;\n     // player join stuff\n     @Nullable private Path impl$file;\n+    private Set<File> impl$directoriesToCreate = new HashSet<>();\n+\n+    @Redirect(method = \"<init>\", at = @At(value = \"INVOKE\", target = \"Ljava/io/File;mkdirs()Z\", remap = false))\n+    private boolean impl$mkdirs(File dir) {\n+        if (WorldManager.NO_FILE_CREATION) {\n+            impl$directoriesToCreate.add(dir);", "originalCommit": "a65d7632a0af47b40d95d4824a3ebe96c5d5b532", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzEyNTczMw==", "url": "https://github.com/SpongePowered/Sponge/pull/2454#discussion_r363125733", "bodyText": "That basically means \"if the SerializationBehavior is ever switched from NONE to something else, create these directories before saving anything.\" I'll change the name to something more descriptive.", "author": "JBYoshi", "createdAt": "2020-01-05T23:40:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzEwODQ3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTgzMjMxOA==", "url": "https://github.com/SpongePowered/Sponge/pull/2454#discussion_r379832318", "bodyText": "I feeel silly for commenting on this much later on... but he means turn this line into this.impl$directoriesToCreate.add(dir);", "author": "dualspiral", "createdAt": "2020-02-15T13:44:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzEwODQ3OQ=="}], "type": "inlineReview"}, {"oid": "d4b9819248b7a26862f2aff8b1558001a8a0ea23", "url": "https://github.com/SpongePowered/Sponge/commit/d4b9819248b7a26862f2aff8b1558001a8a0ea23", "message": "Implement METADATA_ONLY and fix a few bugs.", "committedDate": "2020-02-02T04:00:57Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTgzMzEzMw==", "url": "https://github.com/SpongePowered/Sponge/pull/2454#discussion_r379833133", "bodyText": "I don't like that this is an overwrite, to be honest, but I see why you've done it.\n@Zidane Should we prefer head injection and cancel in this case? I know you've done that in the past. Could also replace with a Redirect followed by a cancellable injection - but that then wanders into LVT land.", "author": "dualspiral", "createdAt": "2020-02-15T13:59:36Z", "path": "src/main/java/org/spongepowered/common/mixin/core/world/chunk/storage/RegionFileCacheMixin.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * This file is part of Sponge, licensed under the MIT License (MIT).\n+ *\n+ * Copyright (c) SpongePowered <https://www.spongepowered.org>\n+ * Copyright (c) contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.spongepowered.common.mixin.core.world.chunk.storage;\n+\n+import net.minecraft.world.chunk.storage.RegionFile;\n+import net.minecraft.world.chunk.storage.RegionFileCache;\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.Overwrite;\n+import org.spongepowered.asm.mixin.Shadow;\n+import org.spongepowered.asm.mixin.injection.Redirect;\n+\n+import java.io.DataInputStream;\n+import java.io.File;\n+\n+@Mixin(RegionFileCache.class)\n+public abstract class RegionFileCacheMixin {\n+\n+    @Shadow public static RegionFile getRegionFileIfExists(File worldDir, int chunkX, int chunkZ) {return null;}\n+\n+    /**\n+     * @author JBYoshi\n+     * @reason Support for ChunkSerializationBehaviors that don't save chunks:\n+     * don't create files if they aren't necessary. (The original method\n+     * already returns null if the chunk doesn't exist.)\n+     */\n+    @Overwrite\n+    public static DataInputStream getChunkInputStream(File worldDir, int chunkX, int chunkZ) {", "originalCommit": "d05bf2390c934dc21d9ea74696fd3240a8ea1e77", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM5NjU0Nw==", "url": "https://github.com/SpongePowered/Sponge/pull/2454#discussion_r382396547", "bodyText": "If it's been done where we're only checking that the region file is null and if it is, returning null as a fail fast, then it should be a cancellable injection at HEAD.", "author": "gabizou", "createdAt": "2020-02-21T04:52:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTgzMzEzMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQ5MTg4NA==", "url": "https://github.com/SpongePowered/Sponge/pull/2454#discussion_r383491884", "bodyText": "It would also need a redirect - the original method calls createOrLoadRegionFile instead of getRegionFileIfExists. Is that enough to merit an overwrite, or should I use the redirect and injection?", "author": "JBYoshi", "createdAt": "2020-02-24T20:18:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTgzMzEzMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUyNDM0OA==", "url": "https://github.com/SpongePowered/Sponge/pull/2454#discussion_r423524348", "bodyText": "I'd say the overwrite is fine.", "author": "gabizou", "createdAt": "2020-05-12T07:37:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTgzMzEzMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM5NjI4NQ==", "url": "https://github.com/SpongePowered/Sponge/pull/2454#discussion_r382396285", "bodyText": "s/listFiles/impl$listFilesIfDirectoryExists", "author": "gabizou", "createdAt": "2020-02-21T04:50:55Z", "path": "src/main/java/org/spongepowered/common/mixin/core/advancements/AdvancementManagerMixin.java", "diffHunk": "@@ -24,19 +24,40 @@\n  */\n package org.spongepowered.common.mixin.core.advancements;\n \n+import com.google.common.collect.ImmutableSet;\n import net.minecraft.advancements.AdvancementManager;\n+import org.apache.commons.io.FileUtils;\n import org.spongepowered.asm.mixin.Mixin;\n import org.spongepowered.asm.mixin.injection.At;\n import org.spongepowered.asm.mixin.injection.Inject;\n+import org.spongepowered.asm.mixin.injection.Redirect;\n import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;\n import org.spongepowered.common.SpongeImpl;\n import org.spongepowered.common.bridge.server.management.PlayerListBridge;\n+import org.spongepowered.common.world.WorldManager;\n+\n+import java.io.File;\n+import java.util.Collection;\n \n @Mixin(AdvancementManager.class)\n public class AdvancementManagerMixin {\n \n+    @Redirect(method = \"loadCustomAdvancements\", at = @At(value = \"INVOKE\", target = \"Ljava/io/File;mkdirs()Z\", remap = false))\n+    private boolean impl$createDirectory(File dir) {\n+        return WorldManager.mkdirsIfSaveable(dir);\n+    }\n+\n     @Inject(method = \"reload\", at = @At(\"RETURN\"))\n     private void impl$reloadAdvancementProgressforPlayerList(final CallbackInfo ci) {\n         ((PlayerListBridge) SpongeImpl.getServer().getPlayerList()).bridge$reloadAdvancementProgress();\n     }\n+\n+    @Redirect(method = \"loadCustomAdvancements\", at = @At(value = \"INVOKE\",\n+            target = \"Lorg/apache/commons/io/FileUtils;listFiles(Ljava/io/File;[Ljava/lang/String;Z)Ljava/util/Collection;\", remap = false))\n+    private Collection<File> listFiles(File directory, String[] extensions, boolean recursive) {", "originalCommit": "d05bf2390c934dc21d9ea74696fd3240a8ea1e77", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM5NjMzNQ==", "url": "https://github.com/SpongePowered/Sponge/pull/2454#discussion_r382396335", "bodyText": "Same here", "author": "gabizou", "createdAt": "2020-02-21T04:51:17Z", "path": "src/main/java/org/spongepowered/common/mixin/core/advancements/FunctionManagerMixin.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * This file is part of Sponge, licensed under the MIT License (MIT).\n+ *\n+ * Copyright (c) SpongePowered <https://www.spongepowered.org>\n+ * Copyright (c) contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.spongepowered.common.mixin.core.advancements;\n+\n+import com.google.common.collect.ImmutableSet;\n+import net.minecraft.advancements.FunctionManager;\n+import org.apache.commons.io.FileUtils;\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Inject;\n+import org.spongepowered.asm.mixin.injection.Redirect;\n+import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;\n+import org.spongepowered.common.SpongeImpl;\n+import org.spongepowered.common.bridge.server.management.PlayerListBridge;\n+import org.spongepowered.common.world.WorldManager;\n+\n+import java.io.File;\n+import java.util.Collection;\n+\n+@Mixin(FunctionManager.class)\n+public abstract class FunctionManagerMixin {\n+    @Redirect(method = \"loadFunctions\", at = @At(value = \"INVOKE\", target = \"Ljava/io/File;mkdirs()Z\", remap = false))\n+    private boolean impl$createDirectory(File dir) {\n+        return WorldManager.mkdirsIfSaveable(dir);\n+    }\n+\n+    @Redirect(method = \"loadFunctions\", at = @At(value = \"INVOKE\",\n+            target = \"Lorg/apache/commons/io/FileUtils;listFiles(Ljava/io/File;[Ljava/lang/String;Z)Ljava/util/Collection;\", remap = false))\n+    private Collection<File> listFiles(File directory, String[] extensions, boolean recursive) {", "originalCommit": "d05bf2390c934dc21d9ea74696fd3240a8ea1e77", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM5Njc2NQ==", "url": "https://github.com/SpongePowered/Sponge/pull/2454#discussion_r382396765", "bodyText": "prefix with shadow$ ( I get that this is in maintenance, and api-8 branch is moving towards prefixing shadows always, but I'd like to keep it in line here as well).", "author": "gabizou", "createdAt": "2020-02-21T04:53:09Z", "path": "src/main/java/org/spongepowered/common/mixin/core/world/gen/ChunkProviderServerMixin.java", "diffHunk": "@@ -92,6 +93,8 @@\n     @Shadow protected abstract void saveChunkExtraData(Chunk chunkIn);\n     @Shadow protected abstract void saveChunkData(Chunk chunkIn);\n \n+    @Shadow public abstract boolean canSave();", "originalCommit": "d05bf2390c934dc21d9ea74696fd3240a8ea1e77", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM5NjkwMg==", "url": "https://github.com/SpongePowered/Sponge/pull/2454#discussion_r382396902", "bodyText": "variable can be final.", "author": "gabizou", "createdAt": "2020-02-21T04:53:43Z", "path": "src/main/java/org/spongepowered/common/mixin/core/world/gen/ChunkProviderServerMixin.java", "diffHunk": "@@ -250,7 +253,14 @@ public void queueUnload(final Chunk chunkIn)\n     @Overwrite\n     public boolean tick()\n     {\n-        if (!this.world.disableLevelSaving && !((WorldBridge) this.world).bridge$isFake())\n+        // Sponge start\n+        SerializationBehavior serializationBehavior = ((WorldProperties) this.world.getWorldInfo()).getSerializationBehavior();", "originalCommit": "d05bf2390c934dc21d9ea74696fd3240a8ea1e77", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM5NzA0Mg==", "url": "https://github.com/SpongePowered/Sponge/pull/2454#discussion_r382397042", "bodyText": "method name needs to reflect what it's actually doing. impl$checkSerializationBehaviorForCanSave or something", "author": "gabizou", "createdAt": "2020-02-21T04:54:31Z", "path": "src/main/java/org/spongepowered/common/mixin/core/world/gen/ChunkProviderServerMixin.java", "diffHunk": "@@ -325,4 +335,20 @@ public boolean tick()\n         this.loadedChunks.remove(ChunkPos.asLong(chunk.x, chunk.z));\n         ((ChunkBridge) chunk).bridge$setScheduledForUnload(-1);\n     }\n+\n+    // This still returns true for METADATA_ONLY because other places (e.g. WorldServer) use it.\n+    @Inject(method = \"canSave\", at = @At(\"HEAD\"), cancellable = true)\n+    public void onCanSave(CallbackInfoReturnable<Boolean> cir) {", "originalCommit": "d05bf2390c934dc21d9ea74696fd3240a8ea1e77", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM5NzA2Mg==", "url": "https://github.com/SpongePowered/Sponge/pull/2454#discussion_r382397062", "bodyText": "Same here", "author": "gabizou", "createdAt": "2020-02-21T04:54:38Z", "path": "src/main/java/org/spongepowered/common/mixin/core/world/gen/ChunkProviderServerMixin.java", "diffHunk": "@@ -325,4 +335,20 @@ public boolean tick()\n         this.loadedChunks.remove(ChunkPos.asLong(chunk.x, chunk.z));\n         ((ChunkBridge) chunk).bridge$setScheduledForUnload(-1);\n     }\n+\n+    // This still returns true for METADATA_ONLY because other places (e.g. WorldServer) use it.\n+    @Inject(method = \"canSave\", at = @At(\"HEAD\"), cancellable = true)\n+    public void onCanSave(CallbackInfoReturnable<Boolean> cir) {\n+        if (((WorldProperties) this.world.getWorldInfo()).getSerializationBehavior() == SerializationBehaviors.NONE) {\n+            cir.setReturnValue(false);\n+        }\n+    }\n+\n+    @Inject(method = \"saveChunks\", at = @At(\"HEAD\"), cancellable = true)\n+    public void onSaveChunks(CallbackInfoReturnable<Boolean> cir) {", "originalCommit": "d05bf2390c934dc21d9ea74696fd3240a8ea1e77", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM5NzA5Mg==", "url": "https://github.com/SpongePowered/Sponge/pull/2454#discussion_r382397092", "bodyText": "Prefix with shadow$", "author": "gabizou", "createdAt": "2020-02-21T04:54:48Z", "path": "src/main/java/org/spongepowered/common/mixin/core/world/storage/SaveHandlerMixin.java", "diffHunk": "@@ -70,9 +77,45 @@\n \n     @Shadow @Final private File worldDirectory;\n \n+    @Shadow protected abstract void setSessionLock();", "originalCommit": "d05bf2390c934dc21d9ea74696fd3240a8ea1e77", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM5NzIyMA==", "url": "https://github.com/SpongePowered/Sponge/pull/2454#discussion_r382397220", "bodyText": "mkdirs should be actually named what we're doing on top of making directories.", "author": "gabizou", "createdAt": "2020-02-21T04:55:27Z", "path": "src/main/java/org/spongepowered/common/mixin/core/world/storage/SaveHandlerMixin.java", "diffHunk": "@@ -70,9 +77,45 @@\n \n     @Shadow @Final private File worldDirectory;\n \n+    @Shadow protected abstract void setSessionLock();\n+\n     @Nullable private Exception impl$capturedException;\n     // player join stuff\n     @Nullable private Path impl$file;\n+    private Set<File> impl$directoriesToCreate = new HashSet<>();\n+\n+    @Redirect(method = \"<init>\", at = @At(value = \"INVOKE\", target = \"Ljava/io/File;mkdirs()Z\", remap = false))\n+    private boolean impl$mkdirs(File dir) {", "originalCommit": "d05bf2390c934dc21d9ea74696fd3240a8ea1e77", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM5NzM3OA==", "url": "https://github.com/SpongePowered/Sponge/pull/2454#discussion_r382397378", "bodyText": "change onCheckSessionLock to actually mean what this method is doing.", "author": "gabizou", "createdAt": "2020-02-21T04:56:04Z", "path": "src/main/java/org/spongepowered/common/mixin/core/world/storage/SaveHandlerMixin.java", "diffHunk": "@@ -70,9 +77,45 @@\n \n     @Shadow @Final private File worldDirectory;\n \n+    @Shadow protected abstract void setSessionLock();\n+\n     @Nullable private Exception impl$capturedException;\n     // player join stuff\n     @Nullable private Path impl$file;\n+    private Set<File> impl$directoriesToCreate = new HashSet<>();\n+\n+    @Redirect(method = \"<init>\", at = @At(value = \"INVOKE\", target = \"Ljava/io/File;mkdirs()Z\", remap = false))\n+    private boolean impl$mkdirs(File dir) {\n+        if (WorldManager.NO_FILE_CREATION) {\n+            impl$directoriesToCreate.add(dir);\n+            return false;\n+        }\n+        return dir.mkdirs();\n+    }\n+\n+    @Redirect(method = \"<init>\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/world/storage/SaveHandler;setSessionLock()V\"))\n+    private void impl$onSetSessionLock(SaveHandler self) {\n+        if (!WorldManager.NO_FILE_CREATION) {\n+            this.setSessionLock();\n+        }\n+    }\n+\n+    @Redirect(method = \"checkSessionLock\",\n+        at = @At(value = \"NEW\", target = \"java/io/FileInputStream\", remap = false))\n+    private FileInputStream impl$onCheckSessionLock(File file) throws FileNotFoundException {", "originalCommit": "d05bf2390c934dc21d9ea74696fd3240a8ea1e77", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM5NzYyMA==", "url": "https://github.com/SpongePowered/Sponge/pull/2454#discussion_r382397620", "bodyText": "I really don't like this sort of static flag flip and check. Is it possible to add this check through an IPhaseState.allowsFileCreation() method and switching in?", "author": "gabizou", "createdAt": "2020-02-21T04:57:16Z", "path": "src/main/java/org/spongepowered/common/world/WorldManager.java", "diffHunk": "@@ -432,7 +436,14 @@ public static WorldProperties createWorldProperties(final String folderName, fin\n             return optWorldProperties.get();\n         }\n \n-        final ISaveHandler saveHandler = new AnvilSaveHandler(WorldManager.getCurrentSavesDirectory().get().toFile(), folderName, true, ((MinecraftServerAccessor) SpongeImpl.getServer()).accessor$getDataFixer());\n+        NO_FILE_CREATION = archetype.getSerializationBehavior() == SerializationBehaviors.NONE;", "originalCommit": "d05bf2390c934dc21d9ea74696fd3240a8ea1e77", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM5Nzc3OA==", "url": "https://github.com/SpongePowered/Sponge/pull/2454#discussion_r382397778", "bodyText": "Same with here.. Especially since later you do a try block with finally. It screams that the state should be switching in.", "author": "gabizou", "createdAt": "2020-02-21T04:58:02Z", "path": "src/main/java/org/spongepowered/common/world/WorldManager.java", "diffHunk": "@@ -623,12 +636,19 @@ public static void saveWorld(final WorldServer worldServer, final boolean flush)\n         }\n \n         final Path worldFolder = currentSavesDir.resolve(worldName);\n-        if (!Files.isDirectory(worldFolder)) {\n+        if (!Files.isDirectory(worldFolder) && properties.getSerializationBehavior() != SerializationBehaviors.NONE) {\n             SpongeImpl.getLogger().error(\"Unable to load world [{}]. We cannot find its folder under [{}].\", worldFolder, currentSavesDir);\n             return Optional.empty();\n         }\n \n-        final ISaveHandler saveHandler = new AnvilSaveHandler(currentSavesDir.toFile(), worldName, true, ((MinecraftServerAccessor) SpongeImpl.getServer()).accessor$getDataFixer());\n+        NO_FILE_CREATION = properties.getSerializationBehavior() == SerializationBehaviors.NONE;", "originalCommit": "d05bf2390c934dc21d9ea74696fd3240a8ea1e77", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM5NzkxNA==", "url": "https://github.com/SpongePowered/Sponge/pull/2454#discussion_r382397914", "bodyText": "Does this method have to be public?", "author": "gabizou", "createdAt": "2020-02-21T04:58:42Z", "path": "src/main/java/org/spongepowered/common/world/WorldManager.java", "diffHunk": "@@ -893,6 +911,39 @@ private static WorldServer createWorldFromProperties(\n         }\n     }\n \n+    public static boolean mkdirsIfSaveable(File dir) {", "originalCommit": "d05bf2390c934dc21d9ea74696fd3240a8ea1e77", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzA4NzYxNA==", "url": "https://github.com/SpongePowered/Sponge/pull/2454#discussion_r383087614", "bodyText": "It's used in several mixins in both SpongeCommon and SpongeForge, so making it public is the best option I can see.", "author": "JBYoshi", "createdAt": "2020-02-24T05:08:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM5NzkxNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM5ODAzNA==", "url": "https://github.com/SpongePowered/Sponge/pull/2454#discussion_r382398034", "bodyText": "If you do end up making this a PhaseTracker.getCurrentState().allowsFileCreation() check, is there a case where this should be checked for threadedness?", "author": "gabizou", "createdAt": "2020-02-21T04:59:17Z", "path": "src/main/java/org/spongepowered/common/world/WorldManager.java", "diffHunk": "@@ -893,6 +911,39 @@ private static WorldServer createWorldFromProperties(\n         }\n     }\n \n+    public static boolean mkdirsIfSaveable(File dir) {\n+        if (NO_FILE_CREATION) {", "originalCommit": "d05bf2390c934dc21d9ea74696fd3240a8ea1e77", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQ5MDAxNA==", "url": "https://github.com/SpongePowered/Sponge/pull/2454#discussion_r383490014", "bodyText": "Potentially (if a mod decides to save a world from another thread), although it's very unlikely. I'll add in a check for now, just in case.", "author": "JBYoshi", "createdAt": "2020-02-24T20:14:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM5ODAzNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM5ODA3MA==", "url": "https://github.com/SpongePowered/Sponge/pull/2454#discussion_r382398070", "bodyText": "Variable should be final", "author": "gabizou", "createdAt": "2020-02-21T04:59:31Z", "path": "src/main/java/org/spongepowered/common/world/WorldManager.java", "diffHunk": "@@ -1299,8 +1350,8 @@ public static NBTTagCompound saveDimensionDataMap() {\n         if (optWorldServer.isPresent()) {\n             return Optional.of(optWorldServer.get().getSaveHandler().getWorldDirectory().toPath());\n         } else if (SpongeImpl.getGame().getState().ordinal() >= GameState.SERVER_ABOUT_TO_START.ordinal()) {\n-            final SaveHandler saveHandler = (SaveHandler) SpongeImpl.getServer().getActiveAnvilConverter().getSaveLoader(SpongeImpl.getServer().getFolderName(), false);\n-            return Optional.of(saveHandler.getWorldDirectory().toPath());\n+            MinecraftServer server = SpongeImpl.getServer();", "originalCommit": "d05bf2390c934dc21d9ea74696fd3240a8ea1e77", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM5ODE5Mw==", "url": "https://github.com/SpongePowered/Sponge/pull/2454#discussion_r382398193", "bodyText": "Pull out the Sponge.getServer() as a local variable at this point with how many times it's being called.", "author": "gabizou", "createdAt": "2020-02-21T05:00:08Z", "path": "testplugins/src/main/java/org/spongepowered/test/MultiWorldTest.java", "diffHunk": "@@ -40,22 +40,38 @@\n \n     @Override\n     public void disable(CommandSource src) {\n-        Sponge.getServer().getWorld(\"temp\").ifPresent(world -> Sponge.getServer().unloadWorld(world));\n+        Sponge.getServer().getWorld(\"no-save\").ifPresent(world -> {", "originalCommit": "d05bf2390c934dc21d9ea74696fd3240a8ea1e77", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM5ODI0Mw==", "url": "https://github.com/SpongePowered/Sponge/pull/2454#discussion_r382398243", "bodyText": "Why the change?", "author": "gabizou", "createdAt": "2020-02-21T05:00:27Z", "path": "testplugins/src/main/java/org/spongepowered/test/MultiWorldTest.java", "diffHunk": "@@ -40,22 +40,38 @@\n \n     @Override\n     public void disable(CommandSource src) {\n-        Sponge.getServer().getWorld(\"temp\").ifPresent(world -> Sponge.getServer().unloadWorld(world));\n+        Sponge.getServer().getWorld(\"no-save\").ifPresent(world -> {\n+            Sponge.getServer().unloadWorld(world);\n+            Sponge.getServer().deleteWorld(world.getProperties());\n+        });\n+        Sponge.getServer().getWorld(\"metadata-only\").ifPresent(world -> {\n+            Sponge.getServer().unloadWorld(world);\n+            Sponge.getServer().deleteWorld(world.getProperties());\n+        });\n     }\n \n     @Override\n     public void enable(CommandSource src) {\n         try {\n-            final WorldArchetype archetype = Sponge.getRegistry().getType(WorldArchetype.class, \"multi-world-test:overnether\").orElse(\n+            final WorldArchetype archetype1 = Sponge.getRegistry().getType(WorldArchetype.class, \"multi-world-test:overnether\").orElseGet(() ->", "originalCommit": "d05bf2390c934dc21d9ea74696fd3240a8ea1e77", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM5ODQ5NQ==", "url": "https://github.com/SpongePowered/Sponge/pull/2454#discussion_r382398495", "bodyText": "Should be explicit with the types here for variable names, if there's an \"original\" and \"re-generated\" or \"nonSerializedArchetype\" make it so, otherwise this looks like obfuscated smurf naming..", "author": "gabizou", "createdAt": "2020-02-21T05:01:37Z", "path": "testplugins/src/main/java/org/spongepowered/test/MultiWorldTest.java", "diffHunk": "@@ -40,22 +40,38 @@\n \n     @Override\n     public void disable(CommandSource src) {\n-        Sponge.getServer().getWorld(\"temp\").ifPresent(world -> Sponge.getServer().unloadWorld(world));\n+        Sponge.getServer().getWorld(\"no-save\").ifPresent(world -> {\n+            Sponge.getServer().unloadWorld(world);\n+            Sponge.getServer().deleteWorld(world.getProperties());\n+        });\n+        Sponge.getServer().getWorld(\"metadata-only\").ifPresent(world -> {\n+            Sponge.getServer().unloadWorld(world);\n+            Sponge.getServer().deleteWorld(world.getProperties());\n+        });\n     }\n \n     @Override\n     public void enable(CommandSource src) {\n         try {\n-            final WorldArchetype archetype = Sponge.getRegistry().getType(WorldArchetype.class, \"multi-world-test:overnether\").orElse(\n+            final WorldArchetype archetype1 = Sponge.getRegistry().getType(WorldArchetype.class, \"multi-world-test:overnether\").orElseGet(() ->\n                 WorldArchetype.builder().\n                     from(WorldArchetypes.THE_NETHER)\n                     .serializationBehavior(SerializationBehaviors.NONE)\n                     .generator(GeneratorTypes.OVERWORLD)\n                     .build(\"multi-world-test:overnether\", \"Overnether\")\n             );\n-            final WorldProperties worldProperties = Sponge.getServer().createWorldProperties(\"temp\", archetype);\n+            final WorldProperties world1 = Sponge.getServer().createWorldProperties(\"no-save\", archetype1);\n+            Sponge.getServer().loadWorld(world1);\n \n-            Sponge.getServer().loadWorld(worldProperties);\n+            final WorldArchetype archetype2 = Sponge.getRegistry().getType(WorldArchetype.class, \"multi-world-test:overend\").orElseGet(() ->", "originalCommit": "d05bf2390c934dc21d9ea74696fd3240a8ea1e77", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "3e535caf428760e2cb428fe2e2386cf1df4e243f", "url": "https://github.com/SpongePowered/Sponge/commit/3e535caf428760e2cb428fe2e2386cf1df4e243f", "message": "Implement SerializationBehaviors.NONE and .METADATA_ONLY.\n\nFixes #2291.", "committedDate": "2020-05-05T03:14:26Z", "type": "commit"}, {"oid": "3e535caf428760e2cb428fe2e2386cf1df4e243f", "url": "https://github.com/SpongePowered/Sponge/commit/3e535caf428760e2cb428fe2e2386cf1df4e243f", "message": "Implement SerializationBehaviors.NONE and .METADATA_ONLY.\n\nFixes #2291.", "committedDate": "2020-05-05T03:14:26Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUyMjQ5OQ==", "url": "https://github.com/SpongePowered/Sponge/pull/2454#discussion_r423522499", "bodyText": "Can this potentially be pooled?", "author": "gabizou", "createdAt": "2020-05-12T07:34:32Z", "path": "src/main/java/org/spongepowered/common/event/tracking/phase/general/SaveHandlerCreationPhase.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * This file is part of Sponge, licensed under the MIT License (MIT).\n+ *\n+ * Copyright (c) SpongePowered <https://www.spongepowered.org>\n+ * Copyright (c) contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.spongepowered.common.event.tracking.phase.general;\n+\n+public class SaveHandlerCreationPhase extends GeneralState<SaveHandlerCreationContext> {\n+\n+    @Override\n+    protected SaveHandlerCreationContext createNewContext() {\n+        return new SaveHandlerCreationContext(this);", "originalCommit": "3e535caf428760e2cb428fe2e2386cf1df4e243f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODk1NDM3NQ==", "url": "https://github.com/SpongePowered/Sponge/pull/2454#discussion_r428954375", "bodyText": "I think so. The only state in there is whether files should be created or not, and that's reset every time. I've changed the phase to extend PooledPhaseState.", "author": "JBYoshi", "createdAt": "2020-05-21T22:43:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUyMjQ5OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUyMjg0Nw==", "url": "https://github.com/SpongePowered/Sponge/pull/2454#discussion_r423522847", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Redirect(method = \"loadCustomAdvancements\", at = @At(value = \"INVOKE\", target = \"Ljava/io/File;mkdirs()Z\", remap = false))\n          \n          \n            \n                @Redirect(method = \"loadCustomAdvancements\",\n          \n          \n            \n                      at = @At(value = \"INVOKE\", target = \"Ljava/io/File;mkdirs()Z\", remap = false)\n          \n          \n            \n                )", "author": "gabizou", "createdAt": "2020-05-12T07:35:11Z", "path": "src/main/java/org/spongepowered/common/mixin/core/advancements/AdvancementManagerMixin.java", "diffHunk": "@@ -24,19 +24,40 @@\n  */\n package org.spongepowered.common.mixin.core.advancements;\n \n+import com.google.common.collect.ImmutableSet;\n import net.minecraft.advancements.AdvancementManager;\n+import org.apache.commons.io.FileUtils;\n import org.spongepowered.asm.mixin.Mixin;\n import org.spongepowered.asm.mixin.injection.At;\n import org.spongepowered.asm.mixin.injection.Inject;\n+import org.spongepowered.asm.mixin.injection.Redirect;\n import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;\n import org.spongepowered.common.SpongeImpl;\n import org.spongepowered.common.bridge.server.management.PlayerListBridge;\n+import org.spongepowered.common.world.WorldManager;\n+\n+import java.io.File;\n+import java.util.Collection;\n \n @Mixin(AdvancementManager.class)\n public class AdvancementManagerMixin {\n \n+    @Redirect(method = \"loadCustomAdvancements\", at = @At(value = \"INVOKE\", target = \"Ljava/io/File;mkdirs()Z\", remap = false))", "originalCommit": "3e535caf428760e2cb428fe2e2386cf1df4e243f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUyMzgxMA==", "url": "https://github.com/SpongePowered/Sponge/pull/2454#discussion_r423523810", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Redirect(method = \"loadCustomAdvancements\", at = @At(value = \"INVOKE\",\n          \n          \n            \n                        target = \"Lorg/apache/commons/io/FileUtils;listFiles(Ljava/io/File;[Ljava/lang/String;Z)Ljava/util/Collection;\", remap = false))\n          \n          \n            \n                @Redirect(method = \"loadCustomAdvancements\", \n          \n          \n            \n                    at = @At(value = \"INVOKE\",\n          \n          \n            \n                         target = \"Lorg/apache/commons/io/FileUtils;listFiles(Ljava/io/File;[Ljava/lang/String;Z)Ljava/util/Collection;\",\n          \n          \n            \n                         remap = false\n          \n          \n            \n                    )\n          \n          \n            \n                )", "author": "gabizou", "createdAt": "2020-05-12T07:36:53Z", "path": "src/main/java/org/spongepowered/common/mixin/core/advancements/AdvancementManagerMixin.java", "diffHunk": "@@ -24,19 +24,40 @@\n  */\n package org.spongepowered.common.mixin.core.advancements;\n \n+import com.google.common.collect.ImmutableSet;\n import net.minecraft.advancements.AdvancementManager;\n+import org.apache.commons.io.FileUtils;\n import org.spongepowered.asm.mixin.Mixin;\n import org.spongepowered.asm.mixin.injection.At;\n import org.spongepowered.asm.mixin.injection.Inject;\n+import org.spongepowered.asm.mixin.injection.Redirect;\n import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;\n import org.spongepowered.common.SpongeImpl;\n import org.spongepowered.common.bridge.server.management.PlayerListBridge;\n+import org.spongepowered.common.world.WorldManager;\n+\n+import java.io.File;\n+import java.util.Collection;\n \n @Mixin(AdvancementManager.class)\n public class AdvancementManagerMixin {\n \n+    @Redirect(method = \"loadCustomAdvancements\", at = @At(value = \"INVOKE\", target = \"Ljava/io/File;mkdirs()Z\", remap = false))\n+    private boolean impl$createDirectory(File dir) {\n+        return WorldManager.mkdirsIfSaveable(dir);\n+    }\n+\n     @Inject(method = \"reload\", at = @At(\"RETURN\"))\n     private void impl$reloadAdvancementProgressforPlayerList(final CallbackInfo ci) {\n         ((PlayerListBridge) SpongeImpl.getServer().getPlayerList()).bridge$reloadAdvancementProgress();\n     }\n+\n+    @Redirect(method = \"loadCustomAdvancements\", at = @At(value = \"INVOKE\",\n+            target = \"Lorg/apache/commons/io/FileUtils;listFiles(Ljava/io/File;[Ljava/lang/String;Z)Ljava/util/Collection;\", remap = false))", "originalCommit": "3e535caf428760e2cb428fe2e2386cf1df4e243f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUyNDA2Mw==", "url": "https://github.com/SpongePowered/Sponge/pull/2454#discussion_r423524063", "bodyText": "indentation", "author": "gabizou", "createdAt": "2020-05-12T07:37:24Z", "path": "src/main/java/org/spongepowered/common/mixin/core/advancements/FunctionManagerMixin.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * This file is part of Sponge, licensed under the MIT License (MIT).\n+ *\n+ * Copyright (c) SpongePowered <https://www.spongepowered.org>\n+ * Copyright (c) contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.spongepowered.common.mixin.core.advancements;\n+\n+import com.google.common.collect.ImmutableSet;\n+import net.minecraft.advancements.FunctionManager;\n+import org.apache.commons.io.FileUtils;\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Inject;\n+import org.spongepowered.asm.mixin.injection.Redirect;\n+import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;\n+import org.spongepowered.common.SpongeImpl;\n+import org.spongepowered.common.bridge.server.management.PlayerListBridge;\n+import org.spongepowered.common.world.WorldManager;\n+\n+import java.io.File;\n+import java.util.Collection;\n+\n+@Mixin(FunctionManager.class)\n+public abstract class FunctionManagerMixin {\n+    @Redirect(method = \"loadFunctions\", at = @At(value = \"INVOKE\", target = \"Ljava/io/File;mkdirs()Z\", remap = false))\n+    private boolean impl$createDirectory(File dir) {\n+        return WorldManager.mkdirsIfSaveable(dir);\n+    }\n+\n+    @Redirect(method = \"loadFunctions\", at = @At(value = \"INVOKE\",\n+            target = \"Lorg/apache/commons/io/FileUtils;listFiles(Ljava/io/File;[Ljava/lang/String;Z)Ljava/util/Collection;\", remap = false))", "originalCommit": "3e535caf428760e2cb428fe2e2386cf1df4e243f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUyNDQ4OQ==", "url": "https://github.com/SpongePowered/Sponge/pull/2454#discussion_r423524489", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @author JBYoshi\n          \n          \n            \n                 * @author JBYoshi - February xx, 2020 - Minecraft 1.12.2", "author": "gabizou", "createdAt": "2020-05-12T07:38:11Z", "path": "src/main/java/org/spongepowered/common/mixin/core/world/chunk/storage/RegionFileCacheMixin.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * This file is part of Sponge, licensed under the MIT License (MIT).\n+ *\n+ * Copyright (c) SpongePowered <https://www.spongepowered.org>\n+ * Copyright (c) contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.spongepowered.common.mixin.core.world.chunk.storage;\n+\n+import net.minecraft.world.chunk.storage.RegionFile;\n+import net.minecraft.world.chunk.storage.RegionFileCache;\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.Overwrite;\n+import org.spongepowered.asm.mixin.Shadow;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Redirect;\n+\n+import java.io.DataInputStream;\n+import java.io.File;\n+\n+@Mixin(RegionFileCache.class)\n+public abstract class RegionFileCacheMixin {\n+\n+    @Shadow public static RegionFile getRegionFileIfExists(File worldDir, int chunkX, int chunkZ) {return null;}\n+\n+    /**\n+     * @author JBYoshi", "originalCommit": "3e535caf428760e2cb428fe2e2386cf1df4e243f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUyNDYwMg==", "url": "https://github.com/SpongePowered/Sponge/pull/2454#discussion_r423524602", "bodyText": "empty line.", "author": "gabizou", "createdAt": "2020-05-12T07:38:24Z", "path": "src/main/java/org/spongepowered/common/mixin/core/world/gen/ChunkProviderServerMixin.java", "diffHunk": "@@ -92,6 +93,8 @@\n     @Shadow protected abstract void saveChunkExtraData(Chunk chunkIn);\n     @Shadow protected abstract void saveChunkData(Chunk chunkIn);\n ", "originalCommit": "3e535caf428760e2cb428fe2e2386cf1df4e243f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUyNDg1OA==", "url": "https://github.com/SpongePowered/Sponge/pull/2454#discussion_r423524858", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    final SerializationBehavior serializationBehavior = ((WorldProperties) this.world.getWorldInfo()).getSerializationBehavior();\n          \n          \n            \n                    if (serializationBehavior != SerializationBehaviors.AUTOMATIC) {\n          \n          \n            \n                    final SerializationBehavior behavior = ((WorldProperties) this.world.getWorldInfo()).getSerializationBehavior();\n          \n          \n            \n                    if (behavior != SerializationBehaviors.AUTOMATIC) {", "author": "gabizou", "createdAt": "2020-05-12T07:38:53Z", "path": "src/main/java/org/spongepowered/common/mixin/core/world/gen/ChunkProviderServerMixin.java", "diffHunk": "@@ -250,7 +253,14 @@ public void queueUnload(final Chunk chunkIn)\n     @Overwrite\n     public boolean tick()\n     {\n-        if (!this.world.disableLevelSaving && !((WorldBridge) this.world).bridge$isFake())\n+        // Sponge start\n+        final SerializationBehavior serializationBehavior = ((WorldProperties) this.world.getWorldInfo()).getSerializationBehavior();\n+        if (serializationBehavior != SerializationBehaviors.AUTOMATIC) {", "originalCommit": "3e535caf428760e2cb428fe2e2386cf1df4e243f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUyNTA2OA==", "url": "https://github.com/SpongePowered/Sponge/pull/2454#discussion_r423525068", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    SerializationBehavior serializationBehavior = ((WorldProperties) this.world.getWorldInfo()).getSerializationBehavior();\n          \n          \n            \n                    final SerializationBehavior serializationBehavior = ((WorldProperties) this.world.getWorldInfo()).getSerializationBehavior();", "author": "gabizou", "createdAt": "2020-05-12T07:39:20Z", "path": "src/main/java/org/spongepowered/common/mixin/core/world/gen/ChunkProviderServerMixin.java", "diffHunk": "@@ -325,4 +335,20 @@ public boolean tick()\n         this.loadedChunks.remove(ChunkPos.asLong(chunk.x, chunk.z));\n         ((ChunkBridge) chunk).bridge$setScheduledForUnload(-1);\n     }\n+\n+    // This still returns true for METADATA_ONLY because other places (e.g. WorldServer) use it.\n+    @Inject(method = \"canSave\", at = @At(\"HEAD\"), cancellable = true)\n+    public void impl$checkSerializationBehaviorForCanSave(CallbackInfoReturnable<Boolean> cir) {\n+        if (((WorldProperties) this.world.getWorldInfo()).getSerializationBehavior() == SerializationBehaviors.NONE) {\n+            cir.setReturnValue(false);\n+        }\n+    }\n+\n+    @Inject(method = \"saveChunks\", at = @At(\"HEAD\"), cancellable = true)\n+    public void impl$checkSerializationBehaviorForSaveChunks(CallbackInfoReturnable<Boolean> cir) {\n+        SerializationBehavior serializationBehavior = ((WorldProperties) this.world.getWorldInfo()).getSerializationBehavior();", "originalCommit": "3e535caf428760e2cb428fe2e2386cf1df4e243f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUyNTIyOQ==", "url": "https://github.com/SpongePowered/Sponge/pull/2454#discussion_r423525229", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    SerializationBehavior serializationBehavior = ((WorldProperties) this.world.getWorldInfo()).getSerializationBehavior();\n          \n          \n            \n                    if (serializationBehavior == SerializationBehaviors.NONE || serializationBehavior == SerializationBehaviors.METADATA_ONLY) {\n          \n          \n            \n                    final SerializationBehavior behavior = ((WorldProperties) this.world.getWorldInfo()).getSerializationBehavior();\n          \n          \n            \n                    if (behavior == SerializationBehaviors.NONE || behavior == SerializationBehaviors.METADATA_ONLY) {", "author": "gabizou", "createdAt": "2020-05-12T07:39:38Z", "path": "src/main/java/org/spongepowered/common/mixin/core/world/gen/ChunkProviderServerMixin.java", "diffHunk": "@@ -325,4 +335,20 @@ public boolean tick()\n         this.loadedChunks.remove(ChunkPos.asLong(chunk.x, chunk.z));\n         ((ChunkBridge) chunk).bridge$setScheduledForUnload(-1);\n     }\n+\n+    // This still returns true for METADATA_ONLY because other places (e.g. WorldServer) use it.\n+    @Inject(method = \"canSave\", at = @At(\"HEAD\"), cancellable = true)\n+    public void impl$checkSerializationBehaviorForCanSave(CallbackInfoReturnable<Boolean> cir) {\n+        if (((WorldProperties) this.world.getWorldInfo()).getSerializationBehavior() == SerializationBehaviors.NONE) {\n+            cir.setReturnValue(false);\n+        }\n+    }\n+\n+    @Inject(method = \"saveChunks\", at = @At(\"HEAD\"), cancellable = true)\n+    public void impl$checkSerializationBehaviorForSaveChunks(CallbackInfoReturnable<Boolean> cir) {\n+        SerializationBehavior serializationBehavior = ((WorldProperties) this.world.getWorldInfo()).getSerializationBehavior();\n+        if (serializationBehavior == SerializationBehaviors.NONE || serializationBehavior == SerializationBehaviors.METADATA_ONLY) {", "originalCommit": "3e535caf428760e2cb428fe2e2386cf1df4e243f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUyNTU0Ng==", "url": "https://github.com/SpongePowered/Sponge/pull/2454#discussion_r423525546", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    IPhaseState state = PhaseTracker.getInstance().getCurrentState();\n          \n          \n            \n                    final IPhaseState state = PhaseTracker.getInstance().getCurrentState();", "author": "gabizou", "createdAt": "2020-05-12T07:40:07Z", "path": "src/main/java/org/spongepowered/common/mixin/core/world/storage/SaveHandlerMixin.java", "diffHunk": "@@ -70,9 +79,49 @@\n \n     @Shadow @Final private File worldDirectory;\n \n+    @Shadow protected abstract void shadow$setSessionLock();\n+\n     @Nullable private Exception impl$capturedException;\n     // player join stuff\n     @Nullable private Path impl$file;\n+    private Set<File> impl$directoriesToCreate = new HashSet<>();\n+\n+    @Redirect(method = \"<init>\", at = @At(value = \"INVOKE\", target = \"Ljava/io/File;mkdirs()Z\", remap = false))\n+    @SuppressWarnings({\"rawtypes\", \"unchecked\"})\n+    private boolean impl$createDirectoryIfSavingFiles(File dir) {\n+        IPhaseState state = PhaseTracker.getInstance().getCurrentState();", "originalCommit": "3e535caf428760e2cb428fe2e2386cf1df4e243f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUyNTYxNg==", "url": "https://github.com/SpongePowered/Sponge/pull/2454#discussion_r423525616", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    IPhaseState state = PhaseTracker.getInstance().getCurrentState();\n          \n          \n            \n                    final IPhaseState state = PhaseTracker.getInstance().getCurrentState();", "author": "gabizou", "createdAt": "2020-05-12T07:40:15Z", "path": "src/main/java/org/spongepowered/common/mixin/core/world/storage/SaveHandlerMixin.java", "diffHunk": "@@ -70,9 +79,49 @@\n \n     @Shadow @Final private File worldDirectory;\n \n+    @Shadow protected abstract void shadow$setSessionLock();\n+\n     @Nullable private Exception impl$capturedException;\n     // player join stuff\n     @Nullable private Path impl$file;\n+    private Set<File> impl$directoriesToCreate = new HashSet<>();\n+\n+    @Redirect(method = \"<init>\", at = @At(value = \"INVOKE\", target = \"Ljava/io/File;mkdirs()Z\", remap = false))\n+    @SuppressWarnings({\"rawtypes\", \"unchecked\"})\n+    private boolean impl$createDirectoryIfSavingFiles(File dir) {\n+        IPhaseState state = PhaseTracker.getInstance().getCurrentState();\n+        if (!state.shouldCreateWorldDirectories(PhaseTracker.getInstance().getCurrentContext())) {\n+            this.impl$directoriesToCreate.add(dir);\n+            return false;\n+        }\n+        return dir.mkdirs();\n+    }\n+\n+    @Redirect(method = \"<init>\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/world/storage/SaveHandler;setSessionLock()V\"))\n+    @SuppressWarnings({\"rawtypes\", \"unchecked\"})\n+    private void impl$setSessionLockIfCreatingFiles(SaveHandler self) {\n+        IPhaseState state = PhaseTracker.getInstance().getCurrentState();", "originalCommit": "3e535caf428760e2cb428fe2e2386cf1df4e243f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUyNTg0MA==", "url": "https://github.com/SpongePowered/Sponge/pull/2454#discussion_r423525840", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Redirect(method = \"<init>\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/world/storage/SaveHandler;setSessionLock()V\"))\n          \n          \n            \n                @Redirect(method = \"<init>\", \n          \n          \n            \n                    at = @At(value = \"INVOKE\", \n          \n          \n            \n                        target = \"Lnet/minecraft/world/storage/SaveHandler;setSessionLock()V\"\n          \n          \n            \n                    )\n          \n          \n            \n                )", "author": "gabizou", "createdAt": "2020-05-12T07:40:38Z", "path": "src/main/java/org/spongepowered/common/mixin/core/world/storage/SaveHandlerMixin.java", "diffHunk": "@@ -70,9 +79,49 @@\n \n     @Shadow @Final private File worldDirectory;\n \n+    @Shadow protected abstract void shadow$setSessionLock();\n+\n     @Nullable private Exception impl$capturedException;\n     // player join stuff\n     @Nullable private Path impl$file;\n+    private Set<File> impl$directoriesToCreate = new HashSet<>();\n+\n+    @Redirect(method = \"<init>\", at = @At(value = \"INVOKE\", target = \"Ljava/io/File;mkdirs()Z\", remap = false))\n+    @SuppressWarnings({\"rawtypes\", \"unchecked\"})\n+    private boolean impl$createDirectoryIfSavingFiles(File dir) {\n+        IPhaseState state = PhaseTracker.getInstance().getCurrentState();\n+        if (!state.shouldCreateWorldDirectories(PhaseTracker.getInstance().getCurrentContext())) {\n+            this.impl$directoriesToCreate.add(dir);\n+            return false;\n+        }\n+        return dir.mkdirs();\n+    }\n+\n+    @Redirect(method = \"<init>\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/world/storage/SaveHandler;setSessionLock()V\"))", "originalCommit": "3e535caf428760e2cb428fe2e2386cf1df4e243f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUyNjAyNQ==", "url": "https://github.com/SpongePowered/Sponge/pull/2454#discussion_r423526025", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        WorldProperties props = Sponge.getServer().getWorldProperties(this.worldDirectory.getName()).get();\n          \n          \n            \n                        final WorldProperties props = Sponge.getServer().getWorldProperties(this.worldDirectory.getName()).get();", "author": "gabizou", "createdAt": "2020-05-12T07:40:57Z", "path": "src/main/java/org/spongepowered/common/mixin/core/world/storage/SaveHandlerMixin.java", "diffHunk": "@@ -70,9 +79,49 @@\n \n     @Shadow @Final private File worldDirectory;\n \n+    @Shadow protected abstract void shadow$setSessionLock();\n+\n     @Nullable private Exception impl$capturedException;\n     // player join stuff\n     @Nullable private Path impl$file;\n+    private Set<File> impl$directoriesToCreate = new HashSet<>();\n+\n+    @Redirect(method = \"<init>\", at = @At(value = \"INVOKE\", target = \"Ljava/io/File;mkdirs()Z\", remap = false))\n+    @SuppressWarnings({\"rawtypes\", \"unchecked\"})\n+    private boolean impl$createDirectoryIfSavingFiles(File dir) {\n+        IPhaseState state = PhaseTracker.getInstance().getCurrentState();\n+        if (!state.shouldCreateWorldDirectories(PhaseTracker.getInstance().getCurrentContext())) {\n+            this.impl$directoriesToCreate.add(dir);\n+            return false;\n+        }\n+        return dir.mkdirs();\n+    }\n+\n+    @Redirect(method = \"<init>\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/world/storage/SaveHandler;setSessionLock()V\"))\n+    @SuppressWarnings({\"rawtypes\", \"unchecked\"})\n+    private void impl$setSessionLockIfCreatingFiles(SaveHandler self) {\n+        IPhaseState state = PhaseTracker.getInstance().getCurrentState();\n+        if (state.shouldCreateWorldDirectories(PhaseTracker.getInstance().getCurrentContext())) {\n+            this.shadow$setSessionLock();\n+        }\n+    }\n+\n+    @Redirect(method = \"checkSessionLock\",\n+        at = @At(value = \"NEW\", target = \"java/io/FileInputStream\", remap = false))\n+    private FileInputStream impl$createSessionLockAndCreateDirectories(File file) throws FileNotFoundException {\n+        if (!file.exists()) {\n+            WorldProperties props = Sponge.getServer().getWorldProperties(this.worldDirectory.getName()).get();", "originalCommit": "3e535caf428760e2cb428fe2e2386cf1df4e243f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUyNjEyNw==", "url": "https://github.com/SpongePowered/Sponge/pull/2454#discussion_r423526127", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private FileInputStream impl$createSessionLockAndCreateDirectories(File file) throws FileNotFoundException {\n          \n          \n            \n                private FileInputStream impl$createSessionLockAndCreateDirectories(final File file) throws FileNotFoundException {", "author": "gabizou", "createdAt": "2020-05-12T07:41:08Z", "path": "src/main/java/org/spongepowered/common/mixin/core/world/storage/SaveHandlerMixin.java", "diffHunk": "@@ -70,9 +79,49 @@\n \n     @Shadow @Final private File worldDirectory;\n \n+    @Shadow protected abstract void shadow$setSessionLock();\n+\n     @Nullable private Exception impl$capturedException;\n     // player join stuff\n     @Nullable private Path impl$file;\n+    private Set<File> impl$directoriesToCreate = new HashSet<>();\n+\n+    @Redirect(method = \"<init>\", at = @At(value = \"INVOKE\", target = \"Ljava/io/File;mkdirs()Z\", remap = false))\n+    @SuppressWarnings({\"rawtypes\", \"unchecked\"})\n+    private boolean impl$createDirectoryIfSavingFiles(File dir) {\n+        IPhaseState state = PhaseTracker.getInstance().getCurrentState();\n+        if (!state.shouldCreateWorldDirectories(PhaseTracker.getInstance().getCurrentContext())) {\n+            this.impl$directoriesToCreate.add(dir);\n+            return false;\n+        }\n+        return dir.mkdirs();\n+    }\n+\n+    @Redirect(method = \"<init>\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/world/storage/SaveHandler;setSessionLock()V\"))\n+    @SuppressWarnings({\"rawtypes\", \"unchecked\"})\n+    private void impl$setSessionLockIfCreatingFiles(SaveHandler self) {\n+        IPhaseState state = PhaseTracker.getInstance().getCurrentState();\n+        if (state.shouldCreateWorldDirectories(PhaseTracker.getInstance().getCurrentContext())) {\n+            this.shadow$setSessionLock();\n+        }\n+    }\n+\n+    @Redirect(method = \"checkSessionLock\",\n+        at = @At(value = \"NEW\", target = \"java/io/FileInputStream\", remap = false))\n+    private FileInputStream impl$createSessionLockAndCreateDirectories(File file) throws FileNotFoundException {", "originalCommit": "3e535caf428760e2cb428fe2e2386cf1df4e243f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUyNjE4OQ==", "url": "https://github.com/SpongePowered/Sponge/pull/2454#discussion_r423526189", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private void impl$setSessionLockIfCreatingFiles(SaveHandler self) {\n          \n          \n            \n                private void impl$setSessionLockIfCreatingFiles(final SaveHandler self) {", "author": "gabizou", "createdAt": "2020-05-12T07:41:15Z", "path": "src/main/java/org/spongepowered/common/mixin/core/world/storage/SaveHandlerMixin.java", "diffHunk": "@@ -70,9 +79,49 @@\n \n     @Shadow @Final private File worldDirectory;\n \n+    @Shadow protected abstract void shadow$setSessionLock();\n+\n     @Nullable private Exception impl$capturedException;\n     // player join stuff\n     @Nullable private Path impl$file;\n+    private Set<File> impl$directoriesToCreate = new HashSet<>();\n+\n+    @Redirect(method = \"<init>\", at = @At(value = \"INVOKE\", target = \"Ljava/io/File;mkdirs()Z\", remap = false))\n+    @SuppressWarnings({\"rawtypes\", \"unchecked\"})\n+    private boolean impl$createDirectoryIfSavingFiles(File dir) {\n+        IPhaseState state = PhaseTracker.getInstance().getCurrentState();\n+        if (!state.shouldCreateWorldDirectories(PhaseTracker.getInstance().getCurrentContext())) {\n+            this.impl$directoriesToCreate.add(dir);\n+            return false;\n+        }\n+        return dir.mkdirs();\n+    }\n+\n+    @Redirect(method = \"<init>\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/world/storage/SaveHandler;setSessionLock()V\"))\n+    @SuppressWarnings({\"rawtypes\", \"unchecked\"})\n+    private void impl$setSessionLockIfCreatingFiles(SaveHandler self) {", "originalCommit": "3e535caf428760e2cb428fe2e2386cf1df4e243f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUyNjI4MQ==", "url": "https://github.com/SpongePowered/Sponge/pull/2454#discussion_r423526281", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private boolean impl$createDirectoryIfSavingFiles(File dir) {\n          \n          \n            \n                private boolean impl$createDirectoryIfSavingFiles(final File dir) {", "author": "gabizou", "createdAt": "2020-05-12T07:41:24Z", "path": "src/main/java/org/spongepowered/common/mixin/core/world/storage/SaveHandlerMixin.java", "diffHunk": "@@ -70,9 +79,49 @@\n \n     @Shadow @Final private File worldDirectory;\n \n+    @Shadow protected abstract void shadow$setSessionLock();\n+\n     @Nullable private Exception impl$capturedException;\n     // player join stuff\n     @Nullable private Path impl$file;\n+    private Set<File> impl$directoriesToCreate = new HashSet<>();\n+\n+    @Redirect(method = \"<init>\", at = @At(value = \"INVOKE\", target = \"Ljava/io/File;mkdirs()Z\", remap = false))\n+    @SuppressWarnings({\"rawtypes\", \"unchecked\"})\n+    private boolean impl$createDirectoryIfSavingFiles(File dir) {", "originalCommit": "3e535caf428760e2cb428fe2e2386cf1df4e243f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "934311b4d88dff87cad2d67ff36e408a0e4a72d4", "url": "https://github.com/SpongePowered/Sponge/commit/934311b4d88dff87cad2d67ff36e408a0e4a72d4", "message": "Change SaveHandlerCreationPhase to pool contexts, and style fixes.", "committedDate": "2020-05-21T22:40:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTYxMTg4MA==", "url": "https://github.com/SpongePowered/Sponge/pull/2454#discussion_r431611880", "bodyText": "Note the MC Version (in case this can be updated for 1.14 or gets lost in transition)", "author": "gabizou", "createdAt": "2020-05-28T06:37:38Z", "path": "src/main/java/org/spongepowered/common/mixin/core/world/chunk/storage/RegionFileCacheMixin.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * This file is part of Sponge, licensed under the MIT License (MIT).\n+ *\n+ * Copyright (c) SpongePowered <https://www.spongepowered.org>\n+ * Copyright (c) contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.spongepowered.common.mixin.core.world.chunk.storage;\n+\n+import net.minecraft.world.chunk.storage.RegionFile;\n+import net.minecraft.world.chunk.storage.RegionFileCache;\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.Overwrite;\n+import org.spongepowered.asm.mixin.Shadow;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Redirect;\n+\n+import java.io.DataInputStream;\n+import java.io.File;\n+\n+@Mixin(RegionFileCache.class)\n+public abstract class RegionFileCacheMixin {\n+\n+    @Shadow public static RegionFile getRegionFileIfExists(File worldDir, int chunkX, int chunkZ) {return null;}\n+\n+    /**\n+     * @author JBYoshi - January 2, 2020", "originalCommit": "934311b4d88dff87cad2d67ff36e408a0e4a72d4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "1332c42984990349f378129fd15e45c1a08f6cd6", "url": "https://github.com/SpongePowered/Sponge/commit/1332c42984990349f378129fd15e45c1a08f6cd6", "message": "Add Minecraft version to javadoc.", "committedDate": "2020-05-28T21:14:05Z", "type": "commit"}]}