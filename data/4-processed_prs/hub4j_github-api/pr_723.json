{"pr_number": 723, "pr_title": "Complete checks api", "pr_createdAt": "2020-02-29T05:12:12Z", "pr_url": "https://github.com/hub4j/github-api/pull/723", "timeline": [{"oid": "10cc79f737bb7f0495a2bdb51ebbdb412798ad22", "url": "https://github.com/hub4j/github-api/commit/10cc79f737bb7f0495a2bdb51ebbdb412798ad22", "message": "add more properties to GHCheckRun", "committedDate": "2020-02-28T07:40:51Z", "type": "commit"}, {"oid": "05e81484f143312dbdc37fbc360573c4fe09c865", "url": "https://github.com/hub4j/github-api/commit/05e81484f143312dbdc37fbc360573c4fe09c865", "message": "format code", "committedDate": "2020-02-28T08:57:19Z", "type": "commit"}, {"oid": "73179c118b9a3555ec344eac085a8a1a1beeea6a", "url": "https://github.com/hub4j/github-api/commit/73179c118b9a3555ec344eac085a8a1a1beeea6a", "message": "Fixed typo in JavaDoc of getApp", "committedDate": "2020-02-29T05:19:14Z", "type": "commit"}, {"oid": "2242174515548a2ac50c0bb3f7cb56f09dde2dd6", "url": "https://github.com/hub4j/github-api/commit/2242174515548a2ac50c0bb3f7cb56f09dde2dd6", "message": "add Output in GHCheckRun", "committedDate": "2020-02-29T05:26:59Z", "type": "commit"}, {"oid": "e96067e3c85360916c11e2fa9ac1184d2621084a", "url": "https://github.com/hub4j/github-api/commit/e96067e3c85360916c11e2fa9ac1184d2621084a", "message": "Merge remote-tracking branch 'origin/complete-checks-api' into complete-checks-api", "committedDate": "2020-02-29T05:27:02Z", "type": "commit"}, {"oid": "5a8f8c345bc4892331172fcacd4ccb87082e9bb7", "url": "https://github.com/hub4j/github-api/commit/5a8f8c345bc4892331172fcacd4ccb87082e9bb7", "message": "parse completedAt and startedAt into Date in getters", "committedDate": "2020-02-29T10:09:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAyMjAyNQ==", "url": "https://github.com/hub4j/github-api/pull/723#discussion_r386022025", "bodyText": "I assume that empty line is not needed.", "author": "recena", "createdAt": "2020-02-29T11:31:54Z", "path": "src/main/java/org/kohsuke/github/GHCheckRun.java", "diffHunk": "@@ -62,6 +88,12 @@ public String getHeadSha() {\n         return headSha;\n     }\n \n+    /**\n+     * Gets the pull requests participated in this check run.\n+     *\n+     * @return Pull requests of this check run\n+     */\n+", "originalCommit": "5a8f8c345bc4892331172fcacd4ccb87082e9bb7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAyNDM4OQ==", "url": "https://github.com/hub4j/github-api/pull/723#discussion_r386024389", "bodyText": "Deleted. Thanks!", "author": "XiongKezhi", "createdAt": "2020-02-29T12:16:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAyMjAyNQ=="}], "type": "inlineReview"}, {"oid": "57f947576e9b114cf60213ee7de1877509383bde", "url": "https://github.com/hub4j/github-api/commit/57f947576e9b114cf60213ee7de1877509383bde", "message": "Delete empty line in JavaDoc", "committedDate": "2020-02-29T12:15:32Z", "type": "commit"}, {"oid": "f9006af04c8817a3ad6270e381537f1ea06e67ec", "url": "https://github.com/hub4j/github-api/commit/f9006af04c8817a3ad6270e381537f1ea06e67ec", "message": "Merge branch 'master' into complete-checks-api", "committedDate": "2020-02-29T23:39:38Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA2NDE5Ng==", "url": "https://github.com/hub4j/github-api/pull/723#discussion_r386064196", "bodyText": "These can be Date instances I think and Jackson will handle the conversion.", "author": "bitwiseman", "createdAt": "2020-02-29T23:49:59Z", "path": "src/main/java/org/kohsuke/github/GHCheckRun.java", "diffHunk": "@@ -21,8 +21,18 @@\n     private String conclusion;\n     private String name;\n     private String headSha;\n+    private String nodeId;\n+    private String externalId;\n+    private String startedAt;\n+    private String completedAt;", "originalCommit": "57f947576e9b114cf60213ee7de1877509383bde", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA3NjQyMg==", "url": "https://github.com/hub4j/github-api/pull/723#discussion_r386076422", "bodyText": "I just saw the GHObject uses String for such timestamps at first and convert them into Date in getters. And I think if we want to get rid of setters, we may have to do it in this way, or we will get error messages from spot-bugs like may expose internal representation.", "author": "XiongKezhi", "createdAt": "2020-03-01T04:39:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA2NDE5Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA2NDQxMA==", "url": "https://github.com/hub4j/github-api/pull/723#discussion_r386064410", "bodyText": "I think the htmlUrl and getHtmlUrl() can be inherited from GHObject.   Please confirm.", "author": "bitwiseman", "createdAt": "2020-02-29T23:55:39Z", "path": "src/main/java/org/kohsuke/github/GHCheckRun.java", "diffHunk": "@@ -21,8 +21,18 @@\n     private String conclusion;\n     private String name;\n     private String headSha;\n+    private String nodeId;\n+    private String externalId;\n+    private String startedAt;\n+    private String completedAt;\n+    private URL htmlUrl;", "originalCommit": "f9006af04c8817a3ad6270e381537f1ea06e67ec", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA3NTE0NQ==", "url": "https://github.com/hub4j/github-api/pull/723#discussion_r386075145", "bodyText": "We can inherit the url and getUrl, but the getHtmlUrl() is abstract in GHObject, so I have to overwrite it.", "author": "XiongKezhi", "createdAt": "2020-03-01T04:10:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA2NDQxMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA2NDUxMg==", "url": "https://github.com/hub4j/github-api/pull/723#discussion_r386064512", "bodyText": "Need the javadoc for this.", "author": "bitwiseman", "createdAt": "2020-02-29T23:57:27Z", "path": "src/main/java/org/kohsuke/github/GHCheckRun.java", "diffHunk": "@@ -72,11 +103,106 @@ public String getHeadSha() {\n     }\n \n     /**\n-     * @deprecated This object has no HTML URL.\n+     * Gets the HTML URL: https://github.com/[owner]/[repo-name]/runs/[check-run-id], usually an GitHub Action page of\n+     * the check run.\n+     *\n+     * @return HTML URL\n      */\n     @Override\n     public URL getHtmlUrl() {\n-        return null;\n+        return htmlUrl;\n+    }\n+\n+    /**\n+     * Gets the global node id to access most objects in GitHub.\n+     *\n+     * @see <a href=\"https://developer.github.com/v4/guides/using-global-node-ids/\">documentation</a>\n+     * @return Global node id\n+     */\n+    public String getNodeId() {\n+        return nodeId;\n+    }\n+\n+    /**\n+     * Gets a reference for the check run on the integrator's system.\n+     *\n+     * @return Reference id\n+     */\n+    public String getExternalId() {\n+        return externalId;\n+    }\n+\n+    /**\n+     * Gets the details URL from which to find full details of the check run on the integrator's site.\n+     *\n+     * @return Details URL\n+     */\n+    public URL getDetailsUrl() {\n+        return detailsUrl;\n+    }\n+\n+    /**\n+     * Gets the start time of the check run in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.\n+     *\n+     * @return Timestamp of the start time\n+     */\n+    public Date getStartedAt() {\n+        return GitHubClient.parseDate(startedAt);\n+    }\n+\n+    /**\n+     * Gets the completed time of the check run in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.\n+     *\n+     * @return Timestamp of the completed time\n+     */\n+    public Date getCompletedAt() {\n+        return GitHubClient.parseDate(completedAt);\n+    }\n+\n+    /**\n+     * Gets the GitHub app this check run belongs to, included in response.\n+     *\n+     * @return GitHub App\n+     */\n+    public GHApp getApp() {\n+        return app;\n+    }\n+\n+    public Output getOutput() {", "originalCommit": "f9006af04c8817a3ad6270e381537f1ea06e67ec", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA2NDgxNQ==", "url": "https://github.com/hub4j/github-api/pull/723#discussion_r386064815", "bodyText": "Do we have a CheckRunAnnotations yet? If not we'll need that added eventually as well.", "author": "bitwiseman", "createdAt": "2020-03-01T00:03:39Z", "path": "src/main/java/org/kohsuke/github/GHCheckRun.java", "diffHunk": "@@ -72,11 +103,106 @@ public String getHeadSha() {\n     }\n \n     /**\n-     * @deprecated This object has no HTML URL.\n+     * Gets the HTML URL: https://github.com/[owner]/[repo-name]/runs/[check-run-id], usually an GitHub Action page of\n+     * the check run.\n+     *\n+     * @return HTML URL\n      */\n     @Override\n     public URL getHtmlUrl() {\n-        return null;\n+        return htmlUrl;\n+    }\n+\n+    /**\n+     * Gets the global node id to access most objects in GitHub.\n+     *\n+     * @see <a href=\"https://developer.github.com/v4/guides/using-global-node-ids/\">documentation</a>\n+     * @return Global node id\n+     */\n+    public String getNodeId() {\n+        return nodeId;\n+    }\n+\n+    /**\n+     * Gets a reference for the check run on the integrator's system.\n+     *\n+     * @return Reference id\n+     */\n+    public String getExternalId() {\n+        return externalId;\n+    }\n+\n+    /**\n+     * Gets the details URL from which to find full details of the check run on the integrator's site.\n+     *\n+     * @return Details URL\n+     */\n+    public URL getDetailsUrl() {\n+        return detailsUrl;\n+    }\n+\n+    /**\n+     * Gets the start time of the check run in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.\n+     *\n+     * @return Timestamp of the start time\n+     */\n+    public Date getStartedAt() {\n+        return GitHubClient.parseDate(startedAt);\n+    }\n+\n+    /**\n+     * Gets the completed time of the check run in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.\n+     *\n+     * @return Timestamp of the completed time\n+     */\n+    public Date getCompletedAt() {\n+        return GitHubClient.parseDate(completedAt);\n+    }\n+\n+    /**\n+     * Gets the GitHub app this check run belongs to, included in response.\n+     *\n+     * @return GitHub App\n+     */\n+    public GHApp getApp() {\n+        return app;\n+    }\n+\n+    public Output getOutput() {\n+        return output;\n+    }\n+\n+    /**\n+     * Represents an output in a check run to include summary and other results.\n+     *\n+     * @see <a href=\"https://developer.github.com/v3/checks/runs/#output-object\">documentation</a>\n+     */\n+    public static class Output {\n+        private String title;\n+        private String summary;\n+        private String text;\n+        private int annotationsCount;\n+        private URL annotationsUrl;", "originalCommit": "f9006af04c8817a3ad6270e381537f1ea06e67ec", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA3ODE0MQ==", "url": "https://github.com/hub4j/github-api/pull/723#discussion_r386078141", "bodyText": "That's where I'm confused. The response (or event payload) from GitHub does not include annotation objects, but they are needed when users are making requests. So does our implementation have to make sure it supports both usages?", "author": "XiongKezhi", "createdAt": "2020-03-01T05:19:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA2NDgxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA5NjEzNA==", "url": "https://github.com/hub4j/github-api/pull/723#discussion_r386096134", "bodyText": "Most probably it should support. Would be beneficial for users in the longer term", "author": "sladyn98", "createdAt": "2020-03-01T10:31:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA2NDgxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI0MzgyMg==", "url": "https://github.com/hub4j/github-api/pull/723#discussion_r386243822", "bodyText": "It isn't required for this PR, I'm just noting it for later.", "author": "bitwiseman", "createdAt": "2020-03-02T08:10:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA2NDgxNQ=="}], "type": "inlineReview"}, {"oid": "10b01ca6b334b8fbbea2173d211f53bdea432fb3", "url": "https://github.com/hub4j/github-api/commit/10b01ca6b334b8fbbea2173d211f53bdea432fb3", "message": "using Date for timestamps and add more JavaDoc", "committedDate": "2020-03-01T06:01:59Z", "type": "commit"}, {"oid": "375417527be2134e72ce18bec0a6ff433090ac51", "url": "https://github.com/hub4j/github-api/commit/375417527be2134e72ce18bec0a6ff433090ac51", "message": "Change timestamps property back to String", "committedDate": "2020-03-01T07:17:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA5NjIwOQ==", "url": "https://github.com/hub4j/github-api/pull/723#discussion_r386096209", "bodyText": "@XiongKezhi I guess there are multiple states of the check run that need to be tested for, Is this the only one?", "author": "sladyn98", "createdAt": "2020-03-01T10:32:37Z", "path": "src/test/java/org/kohsuke/github/GHEventPayloadTest.java", "diffHunk": "@@ -320,8 +323,32 @@ public void checkRunEvent() throws Exception {\n                 .parseEventPayload(payload.asReader(), GHEventPayload.CheckRun.class);\n         assertThat(event.getRepository().getName(), is(\"Hello-World\"));\n         assertThat(event.getAction(), is(\"created\"));\n-        assertThat(event.getCheckRun().getName(), is(\"Octocoders-linter\"));\n-        assertThat(event.getCheckRun().getHeadSha(), is(\"ec26c3e57ca3a959ca5aad62de7213c562f8c821\"));\n+\n+        // Checks the deserialization of check_run\n+        GHCheckRun checkRun = event.getCheckRun();\n+        assertThat(checkRun.getName(), is(\"Octocoders-linter\"));\n+        assertThat(checkRun.getHeadSha(), is(\"ec26c3e57ca3a959ca5aad62de7213c562f8c821\"));\n+        assertThat(checkRun.getStatus(), is(\"completed\"));", "originalCommit": "375417527be2134e72ce18bec0a6ff433090ac51", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA5Njk2Nw==", "url": "https://github.com/hub4j/github-api/pull/723#discussion_r386096967", "bodyText": "Yeah, that's one thing we can do. Before, I just changed the original JSON in order to cover more methods for convenience, but later I found more sample responses here, they are much better and maybe we can use them later.", "author": "XiongKezhi", "createdAt": "2020-03-01T10:45:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA5NjIwOQ=="}], "type": "inlineReview"}, {"oid": "16faaae19987261bcfdde2ee5eae4ee148512366", "url": "https://github.com/hub4j/github-api/commit/16faaae19987261bcfdde2ee5eae4ee148512366", "message": "Add GHCheckSuite", "committedDate": "2020-03-01T13:59:16Z", "type": "commit"}, {"oid": "f8a8ee9b9d00f565881eda051d63b12dd22c197a", "url": "https://github.com/hub4j/github-api/commit/f8a8ee9b9d00f565881eda051d63b12dd22c197a", "message": "Format code", "committedDate": "2020-03-01T14:14:53Z", "type": "commit"}, {"oid": "f54bfd3fb55192683892390d37f3cdaa8b672525", "url": "https://github.com/hub4j/github-api/commit/f54bfd3fb55192683892390d37f3cdaa8b672525", "message": "Fixed JavaDoc warning reported by maven site", "committedDate": "2020-03-01T14:18:36Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjYyMjczMg==", "url": "https://github.com/hub4j/github-api/pull/723#discussion_r386622732", "bodyText": "This is why you want some \"recursive\" testing.  You couldn't know this was needed, but it will be for anyone wanting to take further actions from this repository instance.  (see https://github.com/github-api/github-api/pull/723/files#diff-0848153dca0376dad295a4c0fd4a9437R232)\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        return repository;\n          \n          \n            \n                        repository.root = root;\n          \n          \n            \n                        return repository;", "author": "bitwiseman", "createdAt": "2020-03-02T20:09:42Z", "path": "src/main/java/org/kohsuke/github/GHEventPayload.java", "diffHunk": "@@ -150,6 +150,47 @@ void wrapUp(GitHub root) {\n         }\n     }\n \n+    /**\n+     * A check suite event has been requested, rerequested or completed.\n+     *\n+     * @see <a href=\"https://developer.github.com/v3/activity/events/types/#checkrunevent\">authoritative source</a>\n+     */\n+    @SuppressFBWarnings(\n+            value = { \"UWF_UNWRITTEN_PUBLIC_OR_PROTECTED_FIELD\", \"UWF_UNWRITTEN_FIELD\", \"NP_UNWRITTEN_FIELD\" },\n+            justification = \"JSON API\")\n+    public static class CheckSuite extends GHEventPayload {\n+        private String action;\n+        private GHCheckSuite checkSuite;\n+        private GHRepository repository;\n+\n+        /**\n+         * Gets action.\n+         *\n+         * @return the action\n+         */\n+        public String getAction() {\n+            return action;\n+        }\n+\n+        /**\n+         * Gets the Check Suite object\n+         *\n+         * @return the Check Suite object\n+         */\n+        public GHCheckSuite getCheckSuite() {\n+            return checkSuite;\n+        }\n+\n+        /**\n+         * Gets repository.\n+         *\n+         * @return the repository\n+         */\n+        public GHRepository getRepository() {\n+            return repository;", "originalCommit": "f54bfd3fb55192683892390d37f3cdaa8b672525", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjYyODg3NQ==", "url": "https://github.com/hub4j/github-api/pull/723#discussion_r386628875", "bodyText": "I don't see it on this page: https://developer.github.com/v3/repos/commits/#get-a-single-commit\nI see this:\nhttps://developer.github.com/v3/activity/events/types/#webhook-payload-example-1\nIt possible the \"issue\" in GHCheckSuite is not a GHCommit?  But instead something else?", "author": "bitwiseman", "createdAt": "2020-03-02T20:22:35Z", "path": "src/main/java/org/kohsuke/github/GHCommit.java", "diffHunk": "@@ -38,12 +34,43 @@\n \n         private int comment_count;\n \n+        private String id;\n+        private String timestamp;\n+        private String treeId;\n+\n         static class Tree {\n             String sha;\n         }\n \n         private Tree tree;\n \n+        /**\n+         * Gets id of the commit, used by {@link GHCheckSuite} when a {@link GHEvent#CHECK_SUITE} comes\n+         *\n+         * @return id of the commit\n+         */\n+        public String getId() {\n+            return id;\n+        }\n+\n+        /**\n+         * Gets timestamp of the commit, used by {@link GHCheckSuite} when a {@link GHEvent#CHECK_SUITE} comes\n+         *\n+         * @return timestamp of the commit\n+         */\n+        public Date getTimestamp() {", "originalCommit": "f54bfd3fb55192683892390d37f3cdaa8b672525", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njc5NjUzNA==", "url": "https://github.com/hub4j/github-api/pull/723#discussion_r386796534", "bodyText": "sry, didn't notice that commit page and pay much attention to the structure. I'll add it inside GHCheckSuite.", "author": "XiongKezhi", "createdAt": "2020-03-03T04:43:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjYyODg3NQ=="}], "type": "inlineReview"}, {"oid": "ce7cfc06483a5a194008bb21a3d84e23e41268ce", "url": "https://github.com/hub4j/github-api/commit/ce7cfc06483a5a194008bb21a3d84e23e41268ce", "message": "Merge branch 'master' into complete-checks-api", "committedDate": "2020-03-03T04:57:42Z", "type": "commit"}, {"oid": "768f60709ffd0054b1f34c6ae94f3fb0d85e68cb", "url": "https://github.com/hub4j/github-api/commit/768f60709ffd0054b1f34c6ae94f3fb0d85e68cb", "message": "Add Output and more tests", "committedDate": "2020-03-03T15:45:01Z", "type": "commit"}, {"oid": "d0b23c79e21c9bbc8d702202861f9da9944f6a84", "url": "https://github.com/hub4j/github-api/commit/d0b23c79e21c9bbc8d702202861f9da9944f6a84", "message": "Merge branch 'master' into complete-checks-api", "committedDate": "2020-03-04T03:59:21Z", "type": "commit"}]}