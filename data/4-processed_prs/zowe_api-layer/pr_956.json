{"pr_number": 956, "pr_title": "Vsam storage implementation", "pr_createdAt": "2020-11-26T14:01:53Z", "pr_url": "https://github.com/zowe/api-layer/pull/956", "timeline": [{"oid": "1e3c81dae43c5c2c86e3907dec597f68a865a984", "url": "https://github.com/zowe/api-layer/commit/1e3c81dae43c5c2c86e3907dec597f68a865a984", "message": "vsam storage\n\nSigned-off-by: jandadav <janda.david@gmail.com>", "committedDate": "2020-11-26T14:01:10Z", "type": "commit"}, {"oid": "13eef7d8a1e8be26afa346f88f13ddd251a0d09e", "url": "https://github.com/zowe/api-layer/commit/13eef7d8a1e8be26afa346f88f13ddd251a0d09e", "message": "Merge branch 'master' into rip/GH863/partial-vsam-storage", "committedDate": "2020-11-27T07:33:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTA4MDYwMA==", "url": "https://github.com/zowe/api-layer/pull/956#discussion_r531080600", "bodyText": "Any reason why you actually implement ZFile and override these?", "author": "balhar-jakub", "createdAt": "2020-11-26T14:52:31Z", "path": "caching-service/src/main/java/org/zowe/apiml/caching/service/vsam/VsamFile.java", "diffHunk": "@@ -0,0 +1,165 @@\n+/*\r\n+ * This program and the accompanying materials are made available under the terms of the\r\n+ * Eclipse Public License v2.0 which accompanies this distribution, and is available at\r\n+ * https://www.eclipse.org/legal/epl-v20.html\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *\r\n+ * Copyright Contributors to the Zowe Project.\r\n+ */\r\n+\r\n+package org.zowe.apiml.caching.service.vsam;\r\n+\r\n+import lombok.extern.slf4j.Slf4j;\r\n+import org.zowe.apiml.caching.config.VsamConfig;\r\n+import org.zowe.apiml.caching.model.KeyValue;\r\n+import org.zowe.apiml.util.ClassOrDefaultProxyUtils;\r\n+import org.zowe.apiml.zfile.*;\r\n+\r\n+import java.io.Closeable;\r\n+\r\n+/**\r\n+ * ZFile wrapper providing convenience methods and implementing Closeable interface\r\n+ *\r\n+ * Creates a proxy of com.ibm.jzos.ZFileException and wraps it's methods\r\n+ *\r\n+ */\r\n+\r\n+@Slf4j\r\n+public class VsamFile implements Closeable, ZFile {\r\n+\r\n+    private ZFile zfile;\r\n+    private VsamConfig vsamConfig;\r\n+    private String options = \"ab+,type=record\";\r\n+\r\n+    public VsamFile(VsamConfig config) {\r\n+        if (config == null) {\r\n+            throw new IllegalArgumentException(\"Cannot create VsamFile with null configuration\");\r\n+        }\r\n+        this.vsamConfig = config;\r\n+        try {\r\n+            this.zfile = openZfile();\r\n+        } catch (ZFileException e) {\r\n+            throw new IllegalStateException(\"Failed to open VsamFile\");\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void close() {\r\n+\r\n+        if (zfile != null) {\r\n+            try {\r\n+                zfile.close();\r\n+            } catch (ZFileException e) {\r\n+                log.error(\"Closing ZFile failed\");\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * This method writes a record to file and deletes it immediately.\r\n+     * Use this method on freshly created empty VSAM to write the fist record\r\n+     * and to verify that records can be written.\r\n+     *\r\n+     * Exceptions are thrown to give chance to the caller to react.\r\n+     *\r\n+     * @throws ZFileException\r\n+     * @throws VsamRecordException\r\n+     */\r\n+    public void warmUpVsamFile() throws ZFileException, VsamRecordException {\r\n+\r\n+        log.info(\"Warming up the vsam file by writing and deleting a record\");\r\n+\r\n+        log.info(\"VSAM file being used: {}\", zfile.getActualFilename());\r\n+\r\n+        VsamRecord record = new VsamRecord(vsamConfig, \"delete\", new KeyValue(\"me\", \"novalue\"));\r\n+\r\n+        log.info(\"Writing Record: {}\", record);\r\n+        zfile.write(record.getBytes());\r\n+\r\n+        boolean found = zfile.locate(record.getKeyBytes(), ZFileConstants.LOCATE_KEY_EQ);\r\n+\r\n+        log.info(\"Test record for deletion found: {}\", found);\r\n+        if (found) {\r\n+            byte[] recBuf = new byte[vsamConfig.getRecordLength()];\r\n+            zfile.read(recBuf); //has to be read before update/delete\r\n+            zfile.delrec();\r\n+            log.info(\"Test record deleted.\");\r\n+        }\r\n+\r\n+    }\r\n+\r\n+    @SuppressWarnings({\"squid:S1130\", \"squid:S1192\"})\r\n+    private ZFile openZfile() throws ZFileException {\r\n+        return ClassOrDefaultProxyUtils.createProxyByConstructor(ZFile.class, \"com.ibm.jzos.ZFile\",\r\n+            ZFileDummyImpl::new,\r\n+            new Class[] {String.class, String.class},\r\n+            new Object[] {vsamConfig.getFileName(), options},\r\n+            new ClassOrDefaultProxyUtils.ByMethodName<>(\r\n+                \"com.ibm.jzos.ZFileException\", ZFileException.class,\r\n+                \"getFileName\", \"getMessage\", \"getErrnoMsg\", \"getErrno\", \"getErrno2\", \"getLastOp\", \"getAmrcBytes\",\r\n+                \"getAbendCode\", \"getAbendRc\", \"getFeedbackRc\", \"getFeedbackFtncd\", \"getFeedbackFdbk\"),\r\n+            new ClassOrDefaultProxyUtils.ByMethodName<>(\r\n+                \"com.ibm.jzos.RcException\", RcException.class,\r\n+                \"getMessage\", \"getRc\"),\r\n+            new ClassOrDefaultProxyUtils.ByMethodName<>(\r\n+                \"com.ibm.jzos.EnqueueException\", EnqueueException.class,\r\n+                \"getMessage\", \"getRc\")\r\n+        );\r\n+    }\r\n+\r\n+    @Override\r", "originalCommit": "1e3c81dae43c5c2c86e3907dec597f68a865a984", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ1NjQyMA==", "url": "https://github.com/zowe/api-layer/pull/956#discussion_r531456420", "bodyText": "Good point, you are right that we might not need to do so. The VsamFile will be refactored and abstract this away, so the storage be clean from ZFile api. There is a new task in the story for this.  Agreed to proceed to merge this, add tests and make the changes when api is under tests.", "author": "jandadav", "createdAt": "2020-11-27T08:44:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTA4MDYwMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTA4MzA0NQ==", "url": "https://github.com/zowe/api-layer/pull/956#discussion_r531083045", "bodyText": "Have you considered moving this to configuration?", "author": "balhar-jakub", "createdAt": "2020-11-26T14:56:27Z", "path": "caching-service/src/main/java/org/zowe/apiml/caching/service/vsam/VsamStorage.java", "diffHunk": "@@ -0,0 +1,240 @@\n+/*\r\n+ * This program and the accompanying materials are made available under the terms of the\r\n+ * Eclipse Public License v2.0 which accompanies this distribution, and is available at\r\n+ * https://www.eclipse.org/legal/epl-v20.html\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ *\r\n+ * Copyright Contributors to the Zowe Project.\r\n+ */\r\n+package org.zowe.apiml.caching.service.vsam;\r\n+\r\n+import lombok.extern.slf4j.Slf4j;\r\n+import org.zowe.apiml.caching.config.VsamConfig;\r\n+import org.zowe.apiml.caching.model.KeyValue;\r\n+import org.zowe.apiml.caching.service.Storage;\r\n+import org.zowe.apiml.util.ObjectUtil;\r\n+import org.zowe.apiml.zfile.*;\r\n+\r\n+import java.io.UnsupportedEncodingException;\r\n+import java.util.HashMap;\r\n+import java.util.Map;\r\n+\r\n+@Slf4j\r\n+public class VsamStorage implements Storage {\r\n+\r\n+    public static final String VSAM_RECORD_ERROR_MESSAGE = \"VsamRecordException occured: {}\";\r\n+    public static final String RECORD_FOUND_MESSAGE = \"Record found: {}\";\r\n+    public static final String UNSUPPORTED_ENCODING_MESSAGE = \"Unsupported encoding: {}\";\r\n+\r\n+    String options = \"ab+,type=record\";\r\n+\r\n+    VsamConfig vsamConfig;\r\n+    VsamKey key;\r\n+\r\n+    public VsamStorage(VsamConfig config) {\r\n+\r\n+        log.info(\"Using VSAM storage for the cached data\");\r\n+        ObjectUtil.requireNotNull(config.getFileName(), \"Vsam filename cannot be null\");\r\n+        ObjectUtil.requireNotEmpty(config.getFileName(), \"Vsam filename cannot be empty\");\r\n+\r\n+        this.vsamConfig = config;\r\n+        this.key = new VsamKey(config);\r\n+\r\n+        log.info(\"Using Vsam configuration: {}\", vsamConfig);\r\n+\r\n+        try (VsamFile file = new VsamFile(config)) {\r\n+            file.warmUpVsamFile();\r", "originalCommit": "1e3c81dae43c5c2c86e3907dec597f68a865a984", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ2MjA3NA==", "url": "https://github.com/zowe/api-layer/pull/956#discussion_r531462074", "bodyText": "Will be solved on the subsequent refactor", "author": "jandadav", "createdAt": "2020-11-27T08:55:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTA4MzA0NQ=="}], "type": "inlineReview"}]}