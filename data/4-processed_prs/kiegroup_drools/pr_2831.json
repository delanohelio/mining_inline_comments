{"pr_number": 2831, "pr_title": "KOGITO-1575 DMN assembler-free ikb-free DMNRuntime", "pr_createdAt": "2020-03-27T14:43:47Z", "pr_url": "https://github.com/kiegroup/drools/pull/2831", "timeline": [{"oid": "1abed655b5dd96fcea9c6f43ff4254601210ab01", "url": "https://github.com/kiegroup/drools/commit/1abed655b5dd96fcea9c6f43ff4254601210ab01", "message": "KOGITO-1575 DMN assembler-free ikb-free DMNRuntime\n\nikb-free DMNRuntime refactor.", "committedDate": "2020-03-26T10:09:33Z", "type": "commit"}, {"oid": "36284c7d8912a893fd110017683c0040f289067d", "url": "https://github.com/kiegroup/drools/commit/36284c7d8912a893fd110017683c0040f289067d", "message": "refactor DMNResource", "committedDate": "2020-03-26T15:15:51Z", "type": "commit"}, {"oid": "daac401a44fbe366a6a37360b5cede47224cdf29", "url": "https://github.com/kiegroup/drools/commit/daac401a44fbe366a6a37360b5cede47224cdf29", "message": "Builder internal utils", "committedDate": "2020-03-27T09:22:37Z", "type": "commit"}, {"oid": "2a100e0668f5e9eb071ff0bb8c5a567e79cb042e", "url": "https://github.com/kiegroup/drools/commit/2a100e0668f5e9eb071ff0bb8c5a567e79cb042e", "message": "with dmn profiles.", "committedDate": "2020-03-27T10:42:45Z", "type": "commit"}, {"oid": "1510b9efe91c394a3585a1de358f936cf24958e2", "url": "https://github.com/kiegroup/drools/commit/1510b9efe91c394a3585a1de358f936cf24958e2", "message": ".", "committedDate": "2020-03-27T14:41:00Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTM0MjkwMg==", "url": "https://github.com/kiegroup/drools/pull/2831#discussion_r399342902", "bodyText": "Can we replace this with stream API?", "author": "lucamolteni", "createdAt": "2020-03-27T15:21:09Z", "path": "kie-dmn/kie-dmn-core/src/main/java/org/kie/dmn/core/impl/DMNRuntimeKBWrappingIKB.java", "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.dmn.core.impl;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map.Entry;\n+import java.util.Objects;\n+\n+import org.drools.compiler.kie.builder.impl.KieContainerImpl;\n+import org.drools.compiler.kproject.models.KieBaseModelImpl;\n+import org.drools.core.definitions.InternalKnowledgePackage;\n+import org.drools.core.definitions.ResourceTypePackageRegistry;\n+import org.drools.core.impl.InternalKnowledgeBase;\n+import org.drools.core.impl.KnowledgeBaseImpl;\n+import org.kie.api.io.ResourceType;\n+import org.kie.dmn.api.core.DMNModel;\n+import org.kie.dmn.api.core.DMNPackage;\n+import org.kie.dmn.api.core.event.DMNRuntimeEventListener;\n+import org.kie.dmn.core.assembler.DMNAssemblerService;\n+import org.kie.dmn.core.compiler.DMNProfile;\n+import org.kie.dmn.core.util.Msg;\n+import org.kie.dmn.core.util.MsgUtil;\n+import org.kie.dmn.feel.util.ClassLoaderUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class DMNRuntimeKBWrappingIKB implements DMNRuntimeKB {\n+    private static final Logger logger = LoggerFactory.getLogger( DMNRuntimeKBWrappingIKB.class );\n+\n+    private final InternalKnowledgeBase        knowledgeBase;\n+\n+    public DMNRuntimeKBWrappingIKB(InternalKnowledgeBase knowledgeBase) {\n+        this.knowledgeBase = knowledgeBase;\n+    }\n+\n+    @Override\n+    public List<DMNRuntimeEventListener> getListeners() {\n+        List<DMNRuntimeEventListener> results = new ArrayList<>();\n+        if (knowledgeBase != null && knowledgeBase instanceof KnowledgeBaseImpl) {\n+            KnowledgeBaseImpl knowledgeBaseImpl = (KnowledgeBaseImpl) knowledgeBase;\n+            KieContainerImpl kieContainer = (KieContainerImpl) knowledgeBaseImpl.getKieContainer();\n+            if (kieContainer != null) {\n+                KieBaseModelImpl kieBaseModel = (KieBaseModelImpl) kieContainer.getKieProject().getKieBaseModel(knowledgeBase.getId());\n+                for (Entry<String, String> kv : kieBaseModel.getKModule().getConfigurationProperties().entrySet()) {", "originalCommit": "1510b9efe91c394a3585a1de358f936cf24958e2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQwMzA3Mg==", "url": "https://github.com/kiegroup/drools/pull/2831#discussion_r399403072", "bodyText": "Does it really give advantages?\n                kieBaseModel.getKModule().getConfigurationProperties().entrySet().stream()\n                .filter(kv -> kv.getKey() != null && kv.getKey().startsWith(DMNAssemblerService.DMN_RUNTIME_LISTENER_PREFIX))\n                .forEach(kv -> {\n                    if (ClassLoaderUtil.CAN_PLATFORM_CLASSLOAD) {\n                        try {\n                            DMNRuntimeEventListener runtimeListenerInstance = (DMNRuntimeEventListener) knowledgeBase.getRootClassLoader().loadClass(kv.getValue()).newInstance();\n                            results.add(runtimeListenerInstance);\n                        } catch (Exception e) {\n                            logger.error(\"Cannot perform classloading of runtime listener: {}\", kv, e);\n                        }\n                    } else {\n                        logger.error(\"This platform does not support classloading of runtime listener: {}\", kv);\n                    }\n                });", "author": "tarilabs", "createdAt": "2020-03-27T16:49:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTM0MjkwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQwNDM4MQ==", "url": "https://github.com/kiegroup/drools/pull/2831#discussion_r399404381", "bodyText": "or even the following, does it really give advantages?\n                kieBaseModel.getKModule().getConfigurationProperties().entrySet().stream()\n                .filter(kv -> kv.getKey() != null && kv.getKey().startsWith(DMNAssemblerService.DMN_RUNTIME_LISTENER_PREFIX))\n                .map(kv -> {\n                    if (ClassLoaderUtil.CAN_PLATFORM_CLASSLOAD) {\n                        try {\n                            DMNRuntimeEventListener runtimeListenerInstance = (DMNRuntimeEventListener) knowledgeBase.getRootClassLoader().loadClass(kv.getValue()).newInstance();\n                            return runtimeListenerInstance;\n                        } catch (Exception e) {\n                            logger.error(\"Cannot perform classloading of runtime listener: {}\", kv, e);\n                        }\n                    } else {\n                        logger.error(\"This platform does not support classloading of runtime listener: {}\", kv);\n                    }\n                    return null;\n                })\n                .filter(listener -> listener != null)\n                .collect(Collectors.toList());", "author": "tarilabs", "createdAt": "2020-03-27T16:51:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTM0MjkwMg=="}], "type": "inlineReview"}, {"oid": "1281249f8e256c28fd2d8abc661e56ab60e0f2a7", "url": "https://github.com/kiegroup/drools/commit/1281249f8e256c28fd2d8abc661e56ab60e0f2a7", "message": ".", "committedDate": "2020-03-27T16:55:21Z", "type": "commit"}, {"oid": "ba3d9b76755deb579d43e59b6c9b56ea86e243b6", "url": "https://github.com/kiegroup/drools/commit/ba3d9b76755deb579d43e59b6c9b56ea86e243b6", "message": "Implement code review feedback", "committedDate": "2020-03-30T09:41:48Z", "type": "commit"}]}