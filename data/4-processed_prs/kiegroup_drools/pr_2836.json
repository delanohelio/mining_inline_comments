{"pr_number": 2836, "pr_title": "Drools 5144 - Refactor PMML Decision Tree", "pr_createdAt": "2020-04-01T07:23:35Z", "pr_url": "https://github.com/kiegroup/drools/pull/2836", "timeline": [{"oid": "bb63f147a20d7161f2182d23d1cf4164f8a703e0", "url": "https://github.com/kiegroup/drools/commit/bb63f147a20d7161f2182d23d1cf4164f8a703e0", "message": "[DROOLS-5144] Storing missing values replaced inside PMMLContext", "committedDate": "2020-04-08T15:18:19Z", "type": "commit"}, {"oid": "23448ed58ca7252f879fbedd7ef104b3094877e1", "url": "https://github.com/kiegroup/drools/commit/23448ed58ca7252f879fbedd7ef104b3094877e1", "message": "[DROOLS-5144] Removing unused fields/classes", "committedDate": "2020-04-08T15:23:54Z", "type": "commit"}, {"oid": "d5fef28af06cbdadb335ed624b2db0aec00ebc92", "url": "https://github.com/kiegroup/drools/commit/d5fef28af06cbdadb335ed624b2db0aec00ebc92", "message": "[DROOLS-5144] Fix switches with illegal cases", "committedDate": "2020-04-08T15:39:26Z", "type": "commit"}, {"oid": "6da6d860c9677c3fa7473042560c120869464629", "url": "https://github.com/kiegroup/drools/commit/6da6d860c9677c3fa7473042560c120869464629", "message": "[DROOLS-5144] Refactor implementation for targetfields. Add javadoc", "committedDate": "2020-04-08T16:10:27Z", "type": "commit"}, {"oid": "289ea16c49082d96f89ab909df24751d94a0f094", "url": "https://github.com/kiegroup/drools/commit/289ea16c49082d96f89ab909df24751d94a0f094", "message": "[DROOLS-5144] Replaced Queue with List", "committedDate": "2020-04-09T07:37:41Z", "type": "commit"}, {"oid": "6a8b5433ba6383d80c1725133baf843340f8128c", "url": "https://github.com/kiegroup/drools/commit/6a8b5433ba6383d80c1725133baf843340f8128c", "message": "[DROOLS-5144] Autoformat sources", "committedDate": "2020-04-09T07:39:54Z", "type": "commit"}, {"oid": "d841056a7766ef2b81b37155828f667edb7cb476", "url": "https://github.com/kiegroup/drools/commit/d841056a7766ef2b81b37155828f667edb7cb476", "message": "[DROOLS-5144] Refactor overall drools-related models layout", "committedDate": "2020-04-09T08:38:18Z", "type": "commit"}, {"oid": "9a3afc08ba65e180ce2786bef49af3e798e30445", "url": "https://github.com/kiegroup/drools/commit/9a3afc08ba65e180ce2786bef49af3e798e30445", "message": "[DROOLS-5144] Package renaming", "committedDate": "2020-04-09T09:08:04Z", "type": "commit"}, {"oid": "dce121ab98ce666f28cc3380c1af396cc984a40d", "url": "https://github.com/kiegroup/drools/commit/dce121ab98ce666f28cc3380c1af396cc984a40d", "message": "[DROOLS-5144] Replaced Drooled with Drools", "committedDate": "2020-04-09T09:22:32Z", "type": "commit"}, {"oid": "ad878ef973496b86a93586bf2e0f70b5d5461c80", "url": "https://github.com/kiegroup/drools/commit/ad878ef973496b86a93586bf2e0f70b5d5461c80", "message": "[DROOLS-5144] Refactor agendaEventListener as private stataic final field", "committedDate": "2020-04-09T09:28:15Z", "type": "commit"}, {"oid": "7144181105985ea6fa619a2a104af258e0bdb306", "url": "https://github.com/kiegroup/drools/commit/7144181105985ea6fa619a2a104af258e0bdb306", "message": "[DROOLS-5144] Replaced use of \"toString\" with \"getConstraintsAsString\"", "committedDate": "2020-04-09T09:45:28Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjczNjQyMg==", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r406736422", "bodyText": "I would prefer to just keep the field and remove this method because nobody should use it. Wdyt?", "author": "danielezonca", "createdAt": "2020-04-10T12:30:20Z", "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/main/java/org/kie/pmml/models/drools/executor/DroolsModelExecutor.java", "diffHunk": "@@ -0,0 +1,127 @@\n+package org.kie.pmml.models.drools.executor;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.drools.modelcompiler.ExecutableModelProject;\n+import org.kie.api.definition.type.FactType;\n+import org.kie.api.event.rule.AfterMatchFiredEvent;\n+import org.kie.api.event.rule.AgendaEventListener;\n+import org.kie.api.event.rule.AgendaGroupPoppedEvent;\n+import org.kie.api.event.rule.AgendaGroupPushedEvent;\n+import org.kie.api.event.rule.BeforeMatchFiredEvent;\n+import org.kie.api.event.rule.MatchCancelledEvent;\n+import org.kie.api.event.rule.MatchCreatedEvent;\n+import org.kie.api.event.rule.RuleFlowGroupActivatedEvent;\n+import org.kie.api.event.rule.RuleFlowGroupDeactivatedEvent;\n+import org.kie.api.pmml.PMML4Result;\n+import org.kie.api.runtime.KieSession;\n+import org.kie.internal.utils.KieHelper;\n+import org.kie.pmml.commons.enums.ResultCode;\n+import org.kie.pmml.commons.model.KiePMMLModel;\n+import org.kie.pmml.evaluator.api.exceptions.KiePMMLModelException;\n+import org.kie.pmml.evaluator.api.executor.PMMLContext;\n+import org.kie.pmml.evaluator.core.executor.PMMLModelExecutor;\n+import org.kie.pmml.models.drools.commons.model.KiePMMLDroolsModel;\n+import org.kie.pmml.models.drools.tuples.KiePMMLOriginalTypeGeneratedType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.kie.pmml.evaluator.core.utils.Converter.getUnwrappedParametersMap;\n+\n+public abstract class DroolsModelExecutor implements PMMLModelExecutor {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(DroolsModelExecutor.class.getName());\n+\n+    private static final AgendaEventListener agendaEventListener = getAgendaEventListener();\n+\n+    private static AgendaEventListener getAgendaEventListener() {", "originalCommit": "7144181105985ea6fa619a2a104af258e0bdb306", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODAxNjgxNg==", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r408016816", "bodyText": "@danielezonca\nDone\nI took the chance to completely \"hide\" KieSession access/usage in a specific class.", "author": "gitgabrio", "createdAt": "2020-04-14T10:02:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjczNjQyMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjgxMDc0MQ==", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r406810741", "bodyText": "Comment to remove", "author": "danielezonca", "createdAt": "2020-04-10T15:32:35Z", "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-tree/kie-pmml-models-drools-tree-evaluator/src/test/java/org/kie/pmml/models/drools/tree/evaluator/CompoundPredicatesTreeTest.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.models.drools.tree.evaluator;\n+\n+import java.io.File;\n+import java.nio.file.Files;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.drools.core.impl.InternalKnowledgeBase;\n+import org.drools.core.impl.KnowledgeBaseFactory;\n+import org.drools.core.reteoo.builder.NodeFactory;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import org.kie.api.KieBase;\n+import org.kie.api.KieBaseConfiguration;\n+import org.kie.api.definition.type.FactType;\n+import org.kie.api.event.rule.AfterMatchFiredEvent;\n+import org.kie.api.event.rule.AgendaEventListener;\n+import org.kie.api.event.rule.AgendaGroupPoppedEvent;\n+import org.kie.api.event.rule.AgendaGroupPushedEvent;\n+import org.kie.api.event.rule.BeforeMatchFiredEvent;\n+import org.kie.api.event.rule.MatchCancelledEvent;\n+import org.kie.api.event.rule.MatchCreatedEvent;\n+import org.kie.api.event.rule.RuleFlowGroupActivatedEvent;\n+import org.kie.api.event.rule.RuleFlowGroupDeactivatedEvent;\n+import org.kie.api.io.ResourceType;\n+import org.kie.api.pmml.PMML4Result;\n+import org.kie.api.runtime.KieSession;\n+import org.kie.internal.builder.KnowledgeBuilder;\n+import org.kie.internal.builder.KnowledgeBuilderConfiguration;\n+import org.kie.internal.builder.KnowledgeBuilderFactory;\n+import org.kie.internal.io.ResourceFactory;\n+import org.kie.pmml.commons.enums.ResultCode;\n+import org.kie.pmml.evaluator.api.exceptions.KiePMMLModelException;\n+import org.kie.pmml.models.drools.executor.KiePMMLStatusHolder;\n+import org.kie.test.util.filesystem.FileUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.fail;\n+\n+@RunWith(Parameterized.class)\n+public class CompoundPredicatesTreeTest {\n+\n+    private static final String SOURCE_1 = \"CompoundPredicatesTree.drl\";\n+    private static final Logger logger = LoggerFactory.getLogger(CompoundPredicatesTreeTest.class);\n+    private static final String PACKAGE = \"compoundpredicatestreemodel\";\n+    private static final String TARGET_FIELD = \"result\"/* \"\"Predicted_result\"*/;", "originalCommit": "7144181105985ea6fa619a2a104af258e0bdb306", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODAxNjQ5Ng==", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r408016496", "bodyText": "@danielezonca\nDone", "author": "gitgabrio", "createdAt": "2020-04-14T10:01:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjgxMDc0MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjgxMDg2OQ==", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r406810869", "bodyText": "Can you remove them?", "author": "danielezonca", "createdAt": "2020-04-10T15:32:49Z", "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-tree/kie-pmml-models-drools-tree-evaluator/src/test/java/org/kie/pmml/models/drools/tree/evaluator/CompoundPredicatesTreeTest.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.models.drools.tree.evaluator;\n+\n+import java.io.File;\n+import java.nio.file.Files;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.drools.core.impl.InternalKnowledgeBase;\n+import org.drools.core.impl.KnowledgeBaseFactory;\n+import org.drools.core.reteoo.builder.NodeFactory;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import org.kie.api.KieBase;\n+import org.kie.api.KieBaseConfiguration;\n+import org.kie.api.definition.type.FactType;\n+import org.kie.api.event.rule.AfterMatchFiredEvent;\n+import org.kie.api.event.rule.AgendaEventListener;\n+import org.kie.api.event.rule.AgendaGroupPoppedEvent;\n+import org.kie.api.event.rule.AgendaGroupPushedEvent;\n+import org.kie.api.event.rule.BeforeMatchFiredEvent;\n+import org.kie.api.event.rule.MatchCancelledEvent;\n+import org.kie.api.event.rule.MatchCreatedEvent;\n+import org.kie.api.event.rule.RuleFlowGroupActivatedEvent;\n+import org.kie.api.event.rule.RuleFlowGroupDeactivatedEvent;\n+import org.kie.api.io.ResourceType;\n+import org.kie.api.pmml.PMML4Result;\n+import org.kie.api.runtime.KieSession;\n+import org.kie.internal.builder.KnowledgeBuilder;\n+import org.kie.internal.builder.KnowledgeBuilderConfiguration;\n+import org.kie.internal.builder.KnowledgeBuilderFactory;\n+import org.kie.internal.io.ResourceFactory;\n+import org.kie.pmml.commons.enums.ResultCode;\n+import org.kie.pmml.evaluator.api.exceptions.KiePMMLModelException;\n+import org.kie.pmml.models.drools.executor.KiePMMLStatusHolder;\n+import org.kie.test.util.filesystem.FileUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.fail;\n+\n+@RunWith(Parameterized.class)\n+public class CompoundPredicatesTreeTest {\n+\n+    private static final String SOURCE_1 = \"CompoundPredicatesTree.drl\";\n+    private static final Logger logger = LoggerFactory.getLogger(CompoundPredicatesTreeTest.class);\n+    private static final String PACKAGE = \"compoundpredicatestreemodel\";\n+    private static final String TARGET_FIELD = \"result\"/* \"\"Predicted_result\"*/;\n+    private static KieBase kbase;\n+    private double input1;\n+    private double input2;\n+    private double input3;\n+    private String expectedResult;\n+\n+    public CompoundPredicatesTreeTest(double input1, double input2, double input3, String expectedResult) {\n+        this.input1 = input1;\n+        this.input2 = input2;\n+        this.input3 = input3;\n+        this.expectedResult = expectedResult;\n+    }\n+\n+    @Parameterized.Parameters\n+    public static Collection<Object[]> data() {\n+        return Arrays.asList(new Object[][]{\n+                {7.1, 7.1, 7.1, \"classRootNode\"},\n+//                {-5.01, 0, 0, \"classOrAndNestedNode\"},\n+//                {105, -5.5, 0, \"classOrAndNestedNode\"},\n+//                {2, 2, 2, \"classOrNode\"},\n+//                {2.1, 3.5, 2.1, \"classOrNode\"},\n+//                {0.1, 10, 10, \"classAndNode\"},\n+//                {6, 7.1, 7.1, \"classXorNode\"},\n+//                {6, 6.5, 7.1, \"classRootNode\"},\n+//                {6, 6.5, 7.7, \"classXorNode\"},", "originalCommit": "7144181105985ea6fa619a2a104af258e0bdb306", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODAxNjQ1OA==", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r408016458", "bodyText": "@danielezonca\nDone", "author": "gitgabrio", "createdAt": "2020-04-14T10:01:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjgxMDg2OQ=="}], "type": "inlineReview"}, {"oid": "d58be528bbe96f6ef5308239eec74ffa5f2a886c", "url": "https://github.com/kiegroup/drools/commit/d58be528bbe96f6ef5308239eec74ffa5f2a886c", "message": "Merge remote-tracking branch 'origin/master' into DROOLS-5144\n\n# Conflicts:\n#\tkie-pmml-new/kie-pmml-models-archetype/src/test/resources-filtered/projects/generated-naivebayes/archetype.pom.properties\n#\tkie-pmml-new/kie-pmml-models-archetype/src/test/resources-filtered/projects/generated-naivebayes/archetype.properties\n#\tkie-pmml-new/kie-pmml-models-archetype/src/test/resources-filtered/projects/generated-naivebayes/reference/kie-pmml-models-naivebayes-compiler/pom.xml\n#\tkie-pmml-new/kie-pmml-models-archetype/src/test/resources-filtered/projects/generated-naivebayes/reference/kie-pmml-models-naivebayes-evaluator/pom.xml\n#\tkie-pmml-new/kie-pmml-models-archetype/src/test/resources-filtered/projects/generated-naivebayes/reference/kie-pmml-models-naivebayes-model/pom.xml\n#\tkie-pmml-new/kie-pmml-models-archetype/src/test/resources-filtered/projects/generated-naivebayes/reference/pom.xml\n#\tkie-pmml-new/kie-pmml-models-archetype/src/test/resources-filtered/projects/generated-tree/archetype.pom.properties\n#\tkie-pmml-new/kie-pmml-models-archetype/src/test/resources-filtered/projects/generated-tree/archetype.properties\n#\tkie-pmml-new/kie-pmml-models-archetype/src/test/resources-filtered/projects/generated-tree/reference/kie-pmml-models-tree-compiler/pom.xml\n#\tkie-pmml-new/kie-pmml-models-archetype/src/test/resources-filtered/projects/generated-tree/reference/kie-pmml-models-tree-evaluator/pom.xml\n#\tkie-pmml-new/kie-pmml-models-archetype/src/test/resources-filtered/projects/generated-tree/reference/kie-pmml-models-tree-model/pom.xml\n#\tkie-pmml-new/kie-pmml-models-archetype/src/test/resources-filtered/projects/generated-tree/reference/kie-pmml-models-tree-tests/pom.xml\n#\tkie-pmml-new/kie-pmml-models-archetype/src/test/resources-filtered/projects/generated-tree/reference/pom.xml", "committedDate": "2020-04-14T08:22:13Z", "type": "commit"}, {"oid": "c83f10eb9066a8cc234100807b3582e85054d8d4", "url": "https://github.com/kiegroup/drools/commit/c83f10eb9066a8cc234100807b3582e85054d8d4", "message": "[DROOLS-5144] Updated version. Isolated KieSession access inside KiePMMLSessionUtils", "committedDate": "2020-04-14T10:00:07Z", "type": "commit"}, {"oid": "b9d3615edb3f7ca58d295e4b4eee1dc87ea6398c", "url": "https://github.com/kiegroup/drools/commit/b9d3615edb3f7ca58d295e4b4eee1dc87ea6398c", "message": "[DROOLS-5144] Lowered logger level to trace", "committedDate": "2020-04-14T10:21:29Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODA3MDcwNw==", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r408070707", "bodyText": "Can you please review this method? I don't like that it is named add... but the values to add are fields.\nI would prefer one of the following:\n\nUse a field for KieSession too and rename the method like init()\nAdd pmml4Result and unwrappedInputParams as parameters too\nKeep the method as it is but rename it as initKieSession\n\nWdyt?", "author": "danielezonca", "createdAt": "2020-04-14T11:42:00Z", "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/main/java/org/kie/pmml/models/drools/utils/KiePMMLSessionUtils.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.models.drools.utils;\n+\n+import java.util.Map;\n+\n+import org.drools.compiler.lang.descr.PackageDescr;\n+import org.drools.modelcompiler.ExecutableModelProject;\n+import org.kie.api.definition.type.FactType;\n+import org.kie.api.event.rule.AgendaEventListener;\n+import org.kie.api.pmml.PMML4Result;\n+import org.kie.api.runtime.KieSession;\n+import org.kie.internal.utils.KieHelper;\n+import org.kie.pmml.evaluator.api.exceptions.KiePMMLModelException;\n+import org.kie.pmml.models.drools.executor.KiePMMLStatusHolder;\n+import org.kie.pmml.models.drools.tuples.KiePMMLOriginalTypeGeneratedType;\n+\n+/**\n+ * Class used to isolate all the <code>KieSession</code> instantiation/usage details\n+ */\n+public class KiePMMLSessionUtils {\n+\n+    private final PackageDescr packageDescr;\n+    private final PMML4Result pmml4Result;\n+    private AgendaEventListener agendaEventListener;\n+    private Map<String, Object> unwrappedInputParams;\n+    private Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap;\n+\n+    private KiePMMLSessionUtils(final PackageDescr packageDescr, final PMML4Result pmml4Result) {\n+        this.packageDescr = packageDescr;\n+        this.pmml4Result = pmml4Result;\n+    }\n+\n+    public static Builder builder(final PackageDescr packageDescr, final PMML4Result pmml4Result) {\n+        return new Builder(packageDescr, pmml4Result);\n+    }\n+\n+    public void fireAllRules() {\n+        KieSession kieSession = new KieHelper()\n+                .addContent(packageDescr)\n+                .build(ExecutableModelProject.class)\n+                .newKieSession();\n+        kieSession.addEventListener(agendaEventListener);\n+        kieSession.setGlobal(\"$pmml4Result\", pmml4Result);\n+        addExecutionsParameters(kieSession);\n+        kieSession.fireAllRules();\n+    }\n+\n+    private void addExecutionsParameters(final KieSession kieSession) {\n+        kieSession.insert(new KiePMMLStatusHolder());\n+        kieSession.insert(pmml4Result);\n+        for (Map.Entry<String, Object> entry : unwrappedInputParams.entrySet()) {\n+            if (!fieldTypeMap.containsKey(entry.getKey())) {\n+                throw new KiePMMLModelException(String.format(\"Field %s not mapped to generated type\", entry.getKey()));\n+            }\n+            try {\n+                String generatedTypeName = fieldTypeMap.get(entry.getKey()).getGeneratedType();\n+                FactType factType = kieSession.getKieBase().getFactType(packageDescr.getName(), generatedTypeName);\n+                Object toAdd = factType.newInstance();\n+                factType.set(toAdd, \"value\", entry.getValue());\n+                kieSession.insert(toAdd);\n+            } catch (Exception e) {\n+                throw new KiePMMLModelException(e.getMessage(), e);\n+            }\n+        }\n+    }", "originalCommit": "b9d3615edb3f7ca58d295e4b4eee1dc87ea6398c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODA5MTg4OA==", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r408091888", "bodyText": "@danielezonca\nFor one reason or another none of the above suggestions satisfy me by themselves, but I think I get the point.\nI've refactored/simplified the class a little bit: removed \"state\" of the class; put as much initialization as possible inside the constructor; etc.\nI still keep the method name \"addObjectsToSession\" because I think it is exactly what the method does - \"initKieSession\" looks a little bit misleading with this refactoring.", "author": "gitgabrio", "createdAt": "2020-04-14T12:21:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODA3MDcwNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODEyOTIwNQ==", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r408129205", "bodyText": "I had a look to method after the refactoring and I don't like that now the KieSession is created together with the builder but it is fine for now. We will probably have to change/adapt this code in the future so I would like not to spend other time on it now :)", "author": "danielezonca", "createdAt": "2020-04-14T13:19:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODA3MDcwNw=="}], "type": "inlineReview"}, {"oid": "b70a80a5f1e1da557b16a550648579b297e84892", "url": "https://github.com/kiegroup/drools/commit/b70a80a5f1e1da557b16a550648579b297e84892", "message": "[DROOLS-5144] Refactor due to PR comments", "committedDate": "2020-04-14T12:16:50Z", "type": "commit"}, {"oid": "4da5d5c64321ae7c793abfaee91f4e737b9d8c96", "url": "https://github.com/kiegroup/drools/commit/4da5d5c64321ae7c793abfaee91f4e737b9d8c96", "message": "[DROOLS-3339] Refactored RegressionModelEvaluator; add tests", "committedDate": "2020-02-21T15:10:38Z", "type": "commit"}, {"oid": "37f1125fa98dcef8ca3b4a3a8fe28ce1ff8b1679", "url": "https://github.com/kiegroup/drools/commit/37f1125fa98dcef8ca3b4a3a8fe28ce1ff8b1679", "message": "Merge branch 'DROOLS-3339' of github.com:gitgabrio/drools into DROOLS-3339", "committedDate": "2020-02-21T15:10:58Z", "type": "commit"}, {"oid": "00ea60ab257982a7d92000d8ec0f7bbcb226d24c", "url": "https://github.com/kiegroup/drools/commit/00ea60ab257982a7d92000d8ec0f7bbcb226d24c", "message": "[DROOLS-3339] Implemented PMMLRegressionModelUtilsTest", "committedDate": "2020-02-21T15:57:32Z", "type": "commit"}, {"oid": "14ac8f587abd3a4ebafdeac88b062bd683c009cc", "url": "https://github.com/kiegroup/drools/commit/14ac8f587abd3a4ebafdeac88b062bd683c009cc", "message": "[DROOLS-3339] Implemented PMMLRegressionModelExecutorTest", "committedDate": "2020-02-21T16:25:20Z", "type": "commit"}, {"oid": "f47b01f07d59c736a888a15ccb4658b87c449b74", "url": "https://github.com/kiegroup/drools/commit/f47b01f07d59c736a888a15ccb4658b87c449b74", "message": "[DROOLS-3339] Implemented Predictors tests", "committedDate": "2020-02-21T17:06:02Z", "type": "commit"}, {"oid": "37c74e4d74010729e0f0f251297fdbea32b4b72d", "url": "https://github.com/kiegroup/drools/commit/37c74e4d74010729e0f0f251297fdbea32b4b72d", "message": "[DROOLS-3339] Implement PMMLRegressionModelExecutorTest", "committedDate": "2020-02-24T07:34:09Z", "type": "commit"}, {"oid": "a3025a45b6a4ee98dd9adb19a23f1bb16f467c76", "url": "https://github.com/kiegroup/drools/commit/a3025a45b6a4ee98dd9adb19a23f1bb16f467c76", "message": "Merge remote-tracking branch 'origin/master' into DROOLS-3339", "committedDate": "2020-02-24T09:07:37Z", "type": "commit"}, {"oid": "854804b8b30b95811ec21b83e1dac088abe8ff69", "url": "https://github.com/kiegroup/drools/commit/854804b8b30b95811ec21b83e1dac088abe8ff69", "message": "[DROOLS-3339] Fixing Sonar remarks", "committedDate": "2020-02-24T09:36:37Z", "type": "commit"}, {"oid": "b307015ec9f007b90bed3156b0e2db163da5b9bd", "url": "https://github.com/kiegroup/drools/commit/b307015ec9f007b90bed3156b0e2db163da5b9bd", "message": "[DROOLS-3339] Fixing Sonar remarks", "committedDate": "2020-02-24T09:56:01Z", "type": "commit"}, {"oid": "d091b2956da21419b7163c689700d657a1275a20", "url": "https://github.com/kiegroup/drools/commit/d091b2956da21419b7163c689700d657a1275a20", "message": "Merge remote-tracking branch 'origin/master' into DROOLS-3339", "committedDate": "2020-02-25T09:19:48Z", "type": "commit"}, {"oid": "eba8c8d1288cbd4febfe558070fdcfa6d3c87b5c", "url": "https://github.com/kiegroup/drools/commit/eba8c8d1288cbd4febfe558070fdcfa6d3c87b5c", "message": "[DROOLS-3339] Removed \"Optional\" properties from model", "committedDate": "2020-02-25T09:35:43Z", "type": "commit"}, {"oid": "79580cb2f0f338739877d84819a59f7bf0c83e60", "url": "https://github.com/kiegroup/drools/commit/79580cb2f0f338739877d84819a59f7bf0c83e60", "message": "[DROOLS-5099] Tests for logistic regression", "committedDate": "2020-02-25T13:46:48Z", "type": "commit"}, {"oid": "0dd335e9461490fd383426b56f686a47b1621cb0", "url": "https://github.com/kiegroup/drools/commit/0dd335e9461490fd383426b56f686a47b1621cb0", "message": "[DROOLS-5099] Test also probabilities in logistic regression", "committedDate": "2020-02-26T08:33:50Z", "type": "commit"}, {"oid": "ec04311c9fa0125ce290e0a724af4742a7a5d7e1", "url": "https://github.com/kiegroup/drools/commit/ec04311c9fa0125ce290e0a724af4742a7a5d7e1", "message": "[DROOLS-3339] Simplify abstract hierarchy. Removing \"Serializable\" interfaces", "committedDate": "2020-02-26T10:55:22Z", "type": "commit"}, {"oid": "54b118f3684e399e5f7ae88415acd5017320010c", "url": "https://github.com/kiegroup/drools/commit/54b118f3684e399e5f7ae88415acd5017320010c", "message": "Merge remote-tracking branch 'gitgabrio/DROOLS-3339' into DROOLS-3339\n\n# Conflicts:\n#\tkie-pmml-new/kie-pmml-models/kie-pmml-models-regression/kie-pmml-models-regression-tests/src/test/resources/logisticRegressionIrisData.pmml", "committedDate": "2020-02-26T11:00:58Z", "type": "commit"}, {"oid": "93bb545160635776edbb2a6ba351baf8c0e9faed", "url": "https://github.com/kiegroup/drools/commit/93bb545160635776edbb2a6ba351baf8c0e9faed", "message": "[DROOLS-3339] Simplify abstract hierarchy. Removing \"Serializable\" interfaces", "committedDate": "2020-02-26T11:02:37Z", "type": "commit"}, {"oid": "d52dac54b5ed45e882205af2c9bdfbc16e251118", "url": "https://github.com/kiegroup/drools/commit/d52dac54b5ed45e882205af2c9bdfbc16e251118", "message": "Merge remote-tracking branch 'origin/master' into DROOLS-3339", "committedDate": "2020-02-26T11:42:46Z", "type": "commit"}, {"oid": "948a5663dee77d9388d8d06e62d00c30e75c7fae", "url": "https://github.com/kiegroup/drools/commit/948a5663dee77d9388d8d06e62d00c30e75c7fae", "message": "[DROOLS-3339] Fixed as per PR suggestions", "committedDate": "2020-02-26T11:43:38Z", "type": "commit"}, {"oid": "70667b0d96ec38cfcb48b5f45b3d64fd344aeadf", "url": "https://github.com/kiegroup/drools/commit/70667b0d96ec38cfcb48b5f45b3d64fd344aeadf", "message": "[DROOLS-5099] Test for normalization methods in regression", "committedDate": "2020-02-26T14:24:09Z", "type": "commit"}, {"oid": "7a5d93f55eb90d0785fe639115121f1215833e60", "url": "https://github.com/kiegroup/drools/commit/7a5d93f55eb90d0785fe639115121f1215833e60", "message": "[DROOLS-5099] WIP: Test logistic regression normalization methods", "committedDate": "2020-02-27T09:41:58Z", "type": "commit"}, {"oid": "2478197c0f7507b33b967a2ceaec11b1c6276b74", "url": "https://github.com/kiegroup/drools/commit/2478197c0f7507b33b967a2ceaec11b1c6276b74", "message": "[DROOLS-5099] Finish test for logistic regression normalization methods", "committedDate": "2020-02-27T13:20:24Z", "type": "commit"}, {"oid": "a29b4f9bb617b7b94872adb48e79931eca628f4f", "url": "https://github.com/kiegroup/drools/commit/a29b4f9bb617b7b94872adb48e79931eca628f4f", "message": "Merge remote-tracking branch 'origin/master' into DROOLS-3339_codegen", "committedDate": "2020-02-27T13:29:22Z", "type": "commit"}, {"oid": "6c0ac56e578b99255d8a2331ec59b229fbee09ee", "url": "https://github.com/kiegroup/drools/commit/6c0ac56e578b99255d8a2331ec59b229fbee09ee", "message": "Merge remote-tracking branch 'gitgabrio/DROOLS-3339' into DROOLS-3339_codegen", "committedDate": "2020-02-27T13:29:43Z", "type": "commit"}, {"oid": "9c72bcd216a2a2d242b0496f4a6b765d3077ba9d", "url": "https://github.com/kiegroup/drools/commit/9c72bcd216a2a2d242b0496f4a6b765d3077ba9d", "message": "[DROOLS-5099] Improve PMML loading", "committedDate": "2020-02-27T14:23:56Z", "type": "commit"}, {"oid": "9d0520bcca8f79bba1e5c63d0d3e476e32509774", "url": "https://github.com/kiegroup/drools/commit/9d0520bcca8f79bba1e5c63d0d3e476e32509774", "message": "[DROOLS-3339] Generating RegressionTable source", "committedDate": "2020-03-02T08:15:40Z", "type": "commit"}, {"oid": "4f0989d33321cbc62d6eaa4e134b63294c004abd", "url": "https://github.com/kiegroup/drools/commit/4f0989d33321cbc62d6eaa4e134b63294c004abd", "message": "[DROOLS-3339] Compiling generated classes. Returned new instance of generated model", "committedDate": "2020-03-04T10:25:48Z", "type": "commit"}, {"oid": "cf30eb7c0f698b780547c7ed27f58f40bb94b739", "url": "https://github.com/kiegroup/drools/commit/cf30eb7c0f698b780547c7ed27f58f40bb94b739", "message": "Merge remote-tracking branch 'origin/master' into DROOLS-3339_codegen\n\n# Conflicts:\n#\tkie-pmml-new/kie-pmml-commons/pom.xml", "committedDate": "2020-03-04T10:27:26Z", "type": "commit"}, {"oid": "530d7d82f569f6f1aa73869be59a2d2a3e64c84b", "url": "https://github.com/kiegroup/drools/commit/530d7d82f569f6f1aa73869be59a2d2a3e64c84b", "message": "Merge remote-tracking branch 'gitgabrio/DROOLS-3339' into DROOLS-3339_codegen", "committedDate": "2020-03-04T10:28:47Z", "type": "commit"}, {"oid": "a20c6672ca819280483c940657836605cc153260", "url": "https://github.com/kiegroup/drools/commit/a20c6672ca819280483c940657836605cc153260", "message": "[DROOLS-3339] Test working", "committedDate": "2020-03-04T16:51:22Z", "type": "commit"}, {"oid": "c40f0dc16c13f0ef8e06aea471bd253df4efb8c3", "url": "https://github.com/kiegroup/drools/commit/c40f0dc16c13f0ef8e06aea471bd253df4efb8c3", "message": "[DROOLS-3339] Fixing ClassificationTableTemplate - add missing import", "committedDate": "2020-03-05T11:40:06Z", "type": "commit"}, {"oid": "d9a2440e3f9f38264b2e7ea66a9cbebd9c7f7694", "url": "https://github.com/kiegroup/drools/commit/d9a2440e3f9f38264b2e7ea66a9cbebd9c7f7694", "message": "[DROOLS-3339] Begin benchmark implementation", "committedDate": "2020-03-05T14:00:34Z", "type": "commit"}, {"oid": "bcd571e4e478a331b554c97482adc11d94d44069", "url": "https://github.com/kiegroup/drools/commit/bcd571e4e478a331b554c97482adc11d94d44069", "message": "[DROOLS-3339] Updated codegen benchmark", "committedDate": "2020-03-05T16:37:42Z", "type": "commit"}, {"oid": "708945f540249a2b148252ea576f43e419185700", "url": "https://github.com/kiegroup/drools/commit/708945f540249a2b148252ea576f43e419185700", "message": "[DROOLS-3339] Refactoring inner compiler", "committedDate": "2020-03-06T08:31:33Z", "type": "commit"}, {"oid": "a92ab3198a846858bfac3d003099f0525cb8d262", "url": "https://github.com/kiegroup/drools/commit/a92ab3198a846858bfac3d003099f0525cb8d262", "message": "[DROOLS-3339] Refactoring inner compiler", "committedDate": "2020-03-06T13:19:58Z", "type": "commit"}, {"oid": "5d310e15270f28e31a8bcdce78805f1460dd51b5", "url": "https://github.com/kiegroup/drools/commit/5d310e15270f28e31a8bcdce78805f1460dd51b5", "message": "[DROOLS-3339] Keep working on Benchmarks", "committedDate": "2020-03-09T08:26:54Z", "type": "commit"}, {"oid": "ee5b1f2f9c539b5514264ae365f8891da5c2e217", "url": "https://github.com/kiegroup/drools/commit/ee5b1f2f9c539b5514264ae365f8891da5c2e217", "message": "Merge remote-tracking branch 'origin/master' into DROOLS-3339_codegen", "committedDate": "2020-03-09T09:10:50Z", "type": "commit"}, {"oid": "6c0cc347a28c948783ef233b9f218e0343315d54", "url": "https://github.com/kiegroup/drools/commit/6c0cc347a28c948783ef233b9f218e0343315d54", "message": "[DROOLS-3339] Fix broken tests", "committedDate": "2020-03-09T09:32:56Z", "type": "commit"}, {"oid": "061fd36e8bc6da2bccbcd72435e492d20a0ead51", "url": "https://github.com/kiegroup/drools/commit/061fd36e8bc6da2bccbcd72435e492d20a0ead51", "message": "[DROOLS-3339] Fix benchmarks", "committedDate": "2020-03-09T12:14:24Z", "type": "commit"}, {"oid": "b8ec487c4445c6bd0f52a071dc56819132fd20ba", "url": "https://github.com/kiegroup/drools/commit/b8ec487c4445c6bd0f52a071dc56819132fd20ba", "message": "[DROOLS-3339] Fix import", "committedDate": "2020-03-09T15:56:57Z", "type": "commit"}, {"oid": "5a68e7e68b439401a4d7a232b0f86700998e459a", "url": "https://github.com/kiegroup/drools/commit/5a68e7e68b439401a4d7a232b0f86700998e459a", "message": "[DROOLS-3339] Fix benchmark", "committedDate": "2020-03-09T16:52:43Z", "type": "commit"}, {"oid": "7543d6c235681cdd6561a8bb4e5b520cafa64c7d", "url": "https://github.com/kiegroup/drools/commit/7543d6c235681cdd6561a8bb4e5b520cafa64c7d", "message": "[DROOLS-3339] Rename test classes. Minor fix inside Classification table generation. Remove stream from templates", "committedDate": "2020-03-09T18:22:13Z", "type": "commit"}, {"oid": "4dad383552056e624197e5fe8aa6af8b64be91a6", "url": "https://github.com/kiegroup/drools/commit/4dad383552056e624197e5fe8aa6af8b64be91a6", "message": "[DROOLS-5144] Bgin implementation of Tree model", "committedDate": "2020-03-10T15:47:56Z", "type": "commit"}, {"oid": "ca6078f5e5c81ba44e5765c92a8403eb9345d642", "url": "https://github.com/kiegroup/drools/commit/ca6078f5e5c81ba44e5765c92a8403eb9345d642", "message": "[DROOLS-3339] Fix benchmark. Fix model tests", "committedDate": "2020-03-11T11:22:18Z", "type": "commit"}, {"oid": "8e4b1593329e337ba108e511b24b5f38c8b1cf5f", "url": "https://github.com/kiegroup/drools/commit/8e4b1593329e337ba108e511b24b5f38c8b1cf5f", "message": "Merge remote-tracking branch 'origin/master' into DROOLS-3339", "committedDate": "2020-03-11T11:22:24Z", "type": "commit"}, {"oid": "3c4a838980a18a8428b253ee431087beb471fe8d", "url": "https://github.com/kiegroup/drools/commit/3c4a838980a18a8428b253ee431087beb471fe8d", "message": "[DROOLS-3339] Fix as per PR suggestion", "committedDate": "2020-03-11T15:14:20Z", "type": "commit"}, {"oid": "d032ee3d28e8f722011741a0f5af75407a0a5d28", "url": "https://github.com/kiegroup/drools/commit/d032ee3d28e8f722011741a0f5af75407a0a5d28", "message": "[DROOLS-5144] Keep going with implementation of Tree model", "committedDate": "2020-03-11T15:18:05Z", "type": "commit"}, {"oid": "03a26a3ba7892321b253039e838fe20856055ae7", "url": "https://github.com/kiegroup/drools/commit/03a26a3ba7892321b253039e838fe20856055ae7", "message": "Merge remote-tracking branch 'origin/master' into DROOLS-5144", "committedDate": "2020-03-11T15:18:24Z", "type": "commit"}, {"oid": "9bfe1c692de3ba98f978212b61e0fbd8e603c8f4", "url": "https://github.com/kiegroup/drools/commit/9bfe1c692de3ba98f978212b61e0fbd8e603c8f4", "message": "Merge remote-tracking branch 'gitgabrio/DROOLS-3339' into DROOLS-5144", "committedDate": "2020-03-11T15:21:44Z", "type": "commit"}, {"oid": "7137be049ed7d893b8a50e80d3aed72a1915b057", "url": "https://github.com/kiegroup/drools/commit/7137be049ed7d893b8a50e80d3aed72a1915b057", "message": "[DROOLS-5144] Fix poms and KiePMMLModel", "committedDate": "2020-03-11T16:01:19Z", "type": "commit"}, {"oid": "77aa99536b62ac5994c04958a6b88b695103e686", "url": "https://github.com/kiegroup/drools/commit/77aa99536b62ac5994c04958a6b88b695103e686", "message": "[DROOLS-5144] Refactored KiePMMLDescrFactory. Add tests", "committedDate": "2020-03-12T13:56:17Z", "type": "commit"}, {"oid": "835d6310752a3c5f7323f26288c519093a0131a5", "url": "https://github.com/kiegroup/drools/commit/835d6310752a3c5f7323f26288c519093a0131a5", "message": "Merge remote-tracking branch 'origin/master' into DROOLS-3339", "committedDate": "2020-03-13T10:15:47Z", "type": "commit"}, {"oid": "14c3458acdaacec6300194526e8b5dca53b784dd", "url": "https://github.com/kiegroup/drools/commit/14c3458acdaacec6300194526e8b5dca53b784dd", "message": "[DROOLS-3339] Fix as per PR suggestion", "committedDate": "2020-03-13T11:12:35Z", "type": "commit"}, {"oid": "4f2afc1a728ff95ec7a817965e135f6cb56dbe37", "url": "https://github.com/kiegroup/drools/commit/4f2afc1a728ff95ec7a817965e135f6cb56dbe37", "message": "[DROOLS-3339] Missing bits. Completely remove use of optionals in factories", "committedDate": "2020-03-13T11:45:29Z", "type": "commit"}, {"oid": "bf316584fb6e289d5fc6a328051038e976ad8771", "url": "https://github.com/kiegroup/drools/commit/bf316584fb6e289d5fc6a328051038e976ad8771", "message": "[DROOLS-5144] Begin implementation of XOR", "committedDate": "2020-03-13T13:14:30Z", "type": "commit"}, {"oid": "25a86166896740e792019a5caea92bebd45b9714", "url": "https://github.com/kiegroup/drools/commit/25a86166896740e792019a5caea92bebd45b9714", "message": "Merge remote-tracking branch 'gitgabrio/DROOLS-3339' into DROOLS-5144", "committedDate": "2020-03-13T13:14:57Z", "type": "commit"}, {"oid": "51721f4340d1d21299dfc6bc0c2024295eb84250", "url": "https://github.com/kiegroup/drools/commit/51721f4340d1d21299dfc6bc0c2024295eb84250", "message": "[DROOLS-5144] Fix merge/tests", "committedDate": "2020-03-13T14:07:50Z", "type": "commit"}, {"oid": "37794e71469d489344bcfe6449b975a7656902fd", "url": "https://github.com/kiegroup/drools/commit/37794e71469d489344bcfe6449b975a7656902fd", "message": "[DROOLS-5144] Implementing xor. Work status for two predicates, not for more", "committedDate": "2020-03-17T11:11:03Z", "type": "commit"}, {"oid": "47342f28d88ab44885d924060ddbe7ba8502a1da", "url": "https://github.com/kiegroup/drools/commit/47342f28d88ab44885d924060ddbe7ba8502a1da", "message": "[DROOLS-5144] Implementing XOR. Works for 2 elements, not for more.", "committedDate": "2020-03-17T16:06:59Z", "type": "commit"}, {"oid": "b91347766a86c4bd7231b15ebef71db1a4565e79", "url": "https://github.com/kiegroup/drools/commit/b91347766a86c4bd7231b15ebef71db1a4565e79", "message": "Merge remote-tracking branch 'origin/master' into DROOLS-5144", "committedDate": "2020-03-17T16:08:14Z", "type": "commit"}, {"oid": "e3ea0a66d32ca2af681ea80069ae9f3aa507411d", "url": "https://github.com/kiegroup/drools/commit/e3ea0a66d32ca2af681ea80069ae9f3aa507411d", "message": "WIP: Tree model test module", "committedDate": "2020-03-18T12:56:05Z", "type": "commit"}, {"oid": "9a32a2d47b2b13e7629fecc428d9124a01265a6e", "url": "https://github.com/kiegroup/drools/commit/9a32a2d47b2b13e7629fecc428d9124a01265a6e", "message": "[DROOLS-5144] Populating PMML$Result inside drl. Implemented higher level missingValueReplacement", "committedDate": "2020-03-18T16:23:38Z", "type": "commit"}, {"oid": "a99cdab589a878f9b26999dc7f2f90f342e79ddc", "url": "https://github.com/kiegroup/drools/commit/a99cdab589a878f9b26999dc7f2f90f342e79ddc", "message": "Merge remote-tracking branch 'jiripetrlik/DROOLS-5144' into DROOLS-5144", "committedDate": "2020-03-18T16:28:12Z", "type": "commit"}, {"oid": "ff53ee927d397742fd244c5cd262e1c24dd71e02", "url": "https://github.com/kiegroup/drools/commit/ff53ee927d397742fd244c5cd262e1c24dd71e02", "message": "[DROOLS-5144] Fixing dotted field name issue. Implementing \"surrogate\" compound predicate", "committedDate": "2020-03-19T13:43:00Z", "type": "commit"}, {"oid": "b47018cd4d9d2fd7d759f73006b63b7db137b943", "url": "https://github.com/kiegroup/drools/commit/b47018cd4d9d2fd7d759f73006b63b7db137b943", "message": "Merge remote-tracking branch 'origin/master' into DROOLS-5144", "committedDate": "2020-03-19T13:43:24Z", "type": "commit"}, {"oid": "7dabb7de2085a5b49574b070d8f74b5226bdeceb", "url": "https://github.com/kiegroup/drools/commit/7dabb7de2085a5b49574b070d8f74b5226bdeceb", "message": "[DROOLS-5166] Finish tree model test for Iris data", "committedDate": "2020-03-19T15:21:27Z", "type": "commit"}, {"oid": "2cb4d3247574ef2251b6b6f4f8191eed91a586c0", "url": "https://github.com/kiegroup/drools/commit/2cb4d3247574ef2251b6b6f4f8191eed91a586c0", "message": "[DROOLS-5144] Minor refactoring in DescrFactory. Add some test", "committedDate": "2020-03-19T15:34:30Z", "type": "commit"}, {"oid": "e14572e8d700d70c0e9440cab273758373b7c0ee", "url": "https://github.com/kiegroup/drools/commit/e14572e8d700d70c0e9440cab273758373b7c0ee", "message": "Merge branch 'DROOLS-5144' of github.com:gitgabrio/drools into DROOLS-5144", "committedDate": "2020-03-19T15:35:16Z", "type": "commit"}, {"oid": "f4821469eb20c81950fa7b5a333d048e02c1aed4", "url": "https://github.com/kiegroup/drools/commit/f4821469eb20c81950fa7b5a333d048e02c1aed4", "message": "[DROOLS-5144] Avoid automatic type inference. Surrogate still broken", "committedDate": "2020-03-20T15:12:10Z", "type": "commit"}, {"oid": "1ef6ed0300d1c7e910bdc01791fb1581a8968f1c", "url": "https://github.com/kiegroup/drools/commit/1ef6ed0300d1c7e910bdc01791fb1581a8968f1c", "message": "[DROOLS-5144] Avoid useless \"update\" call on PMML4Result. Set PPML4Result as global variable", "committedDate": "2020-03-23T10:33:20Z", "type": "commit"}, {"oid": "81d20df3a4e0e610007489356c1618e75d07e942", "url": "https://github.com/kiegroup/drools/commit/81d20df3a4e0e610007489356c1618e75d07e942", "message": "Merge remote-tracking branch 'origin/master' into DROOLS-5144", "committedDate": "2020-03-23T10:34:09Z", "type": "commit"}, {"oid": "413782c421bd858456c17431dd2d60d954f00426", "url": "https://github.com/kiegroup/drools/commit/413782c421bd858456c17431dd2d60d954f00426", "message": "[DROOLS-5144] Update version", "committedDate": "2020-03-23T11:30:21Z", "type": "commit"}, {"oid": "3246b23c88aa8332b74457636ba56d0f6e780eb1", "url": "https://github.com/kiegroup/drools/commit/3246b23c88aa8332b74457636ba56d0f6e780eb1", "message": "[DROOLS-5166] Tree model test for Boston housing data", "committedDate": "2020-03-24T10:16:02Z", "type": "commit"}, {"oid": "6b66cb1cb510bf87bed0ae792bf6b577a951a721", "url": "https://github.com/kiegroup/drools/commit/6b66cb1cb510bf87bed0ae792bf6b577a951a721", "message": "[DROOLS-5166] Test for classification using simple tree", "committedDate": "2020-03-25T10:49:05Z", "type": "commit"}, {"oid": "afe75f5735b5e49e684a19baea2dc443901781d3", "url": "https://github.com/kiegroup/drools/commit/afe75f5735b5e49e684a19baea2dc443901781d3", "message": "[DROOLS-5166] Test for return last prediction strategy in trees", "committedDate": "2020-03-25T13:15:56Z", "type": "commit"}, {"oid": "844cf96b6fa7b6f81c9016e3c5f8187879a74a77", "url": "https://github.com/kiegroup/drools/commit/844cf96b6fa7b6f81c9016e3c5f8187879a74a77", "message": "[DROOLS-5166] Test for compound predicates in trees", "committedDate": "2020-03-26T11:47:22Z", "type": "commit"}, {"oid": "6a29b4acd58d61b8308ab9bc6e526590e013d897", "url": "https://github.com/kiegroup/drools/commit/6a29b4acd58d61b8308ab9bc6e526590e013d897", "message": "[DROOLS-5166] Test for simple set predicate in trees", "committedDate": "2020-03-26T14:48:27Z", "type": "commit"}, {"oid": "e3ab1206074e5de49c8a9850e121e7cf786f3bf6", "url": "https://github.com/kiegroup/drools/commit/e3ab1206074e5de49c8a9850e121e7cf786f3bf6", "message": "[DROOLS-5144] Implemented KiePMML drool' specific AST. Implemented TreeModel AST factory", "committedDate": "2020-03-26T15:02:15Z", "type": "commit"}, {"oid": "a2077aaeba12c152a1e9d5ccec9cc54a264069ad", "url": "https://github.com/kiegroup/drools/commit/a2077aaeba12c152a1e9d5ccec9cc54a264069ad", "message": "Merge remote-tracking branch 'origin/master' into DROOLS-5144", "committedDate": "2020-03-26T15:03:20Z", "type": "commit"}, {"oid": "20c23eee08134b679493a5d1d8f15756309cfbb5", "url": "https://github.com/kiegroup/drools/commit/20c23eee08134b679493a5d1d8f15756309cfbb5", "message": "[DROOLS-5144] Refactored AST and Descr factories. Some integration test still failing", "committedDate": "2020-03-31T07:41:38Z", "type": "commit"}, {"oid": "c46c606cc1911dfc6d36f41d5a1df997a87681ce", "url": "https://github.com/kiegroup/drools/commit/c46c606cc1911dfc6d36f41d5a1df997a87681ce", "message": "Merge remote-tracking branch 'origin/master' into DROOLS-5144", "committedDate": "2020-03-31T07:42:03Z", "type": "commit"}, {"oid": "d39e9f270cf5a06a913edcee038b1936ffe58272", "url": "https://github.com/kiegroup/drools/commit/d39e9f270cf5a06a913edcee038b1936ffe58272", "message": "Merge branch 'DROOLS-5144' of github.com:gitgabrio/drools into DROOLS-5144", "committedDate": "2020-03-31T07:42:37Z", "type": "commit"}, {"oid": "6bc8c0251c941aafd5c980b08c0202b00377097f", "url": "https://github.com/kiegroup/drools/commit/6bc8c0251c941aafd5c980b08c0202b00377097f", "message": "[DROOLS-5144] Implementing SimpleSetPredicate.", "committedDate": "2020-04-01T07:10:46Z", "type": "commit"}, {"oid": "ab2b1e0150f02e53c9b36ab9a95e09a3ab2e7249", "url": "https://github.com/kiegroup/drools/commit/ab2b1e0150f02e53c9b36ab9a95e09a3ab2e7249", "message": "Merge remote-tracking branch 'origin/master' into DROOLS-5144", "committedDate": "2020-04-01T07:12:50Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUxMTExOA==", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r401511118", "bodyText": "Can you please explain why it is good to change settings of this plugin.", "author": "jiripetrlik", "createdAt": "2020-04-01T10:23:11Z", "path": "kie-pmml-new/kie-pmml-models-archetype/pom.xml", "diffHunk": "@@ -27,6 +27,11 @@\n       <plugin>\n         <groupId>org.apache.maven.plugins</groupId>\n         <artifactId>maven-archetype-plugin</artifactId>\n+        <configuration>", "originalCommit": "ab2b1e0150f02e53c9b36ab9a95e09a3ab2e7249", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjExMTE4MQ==", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r402111181", "bodyText": "HI @jiripetrlik\nI made some changes here:\n\n(about eof) it was a to get rid of a warning during execution;\nincrease debug output to better understand what happen during execution\nReplaced statically defined version with property-defined one (this is related to warnings that are generated by some script running in CI); to implement that modification, I also had to move resources to \"filtered\" resources folder", "author": "gitgabrio", "createdAt": "2020-04-02T07:40:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUxMTExOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM3MjE1OA==", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r402372158", "bodyText": "@gitgabrio\nAnd do you plan to remove it before PR is ready to be merged?", "author": "jiripetrlik", "createdAt": "2020-04-02T14:47:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUxMTExOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM4MDMxMA==", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r402380310", "bodyText": "@jiripetrlik\nNope - this is meant to be the final (?) implementation (unless for bugs). Is there anything you would prefer to change?", "author": "gitgabrio", "createdAt": "2020-04-02T14:57:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUxMTExOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUxNTQ1Mw==", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r401515453", "bodyText": "Can you please describe the motivation behind \"drooled\" module? What is it for?", "author": "jiripetrlik", "createdAt": "2020-04-01T10:31:04Z", "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drooled/pom.xml", "diffHunk": "@@ -0,0 +1,56 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>", "originalCommit": "ab2b1e0150f02e53c9b36ab9a95e09a3ab2e7249", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjExMjQ3Mw==", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r402112473", "bodyText": "@jiripetrlik\nAll models using rule engine will have some common code (pls look at Drooled Executor and factories). Since I already know there will be more then one \"rule-based\" implementation, I've put such shared code in this module. All the rule-based implementations have to \"depend\" on this one. It will also allow me to manage common feature/behavior in one single place", "author": "gitgabrio", "createdAt": "2020-04-02T07:42:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUxNTQ1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM3MzAwNg==", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r402373006", "bodyText": "@gitgabrio Thank you for explanation.", "author": "jiripetrlik", "createdAt": "2020-04-02T14:48:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUxNTQ1Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUxNjg1Ng==", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r401516856", "bodyText": "Please handle this exception properly.", "author": "jiripetrlik", "createdAt": "2020-04-01T10:33:31Z", "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drooled/src/main/java/org/kie/pmml/models/drooled/executor/DrooledModelExecutor.java", "diffHunk": "@@ -0,0 +1,199 @@\n+package org.kie.pmml.models.drooled.executor;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.drools.compiler.lang.DrlDumper;\n+import org.drools.modelcompiler.ExecutableModelProject;\n+import org.kie.api.KieServices;\n+import org.kie.api.definition.type.FactType;\n+import org.kie.api.event.rule.AfterMatchFiredEvent;\n+import org.kie.api.event.rule.AgendaEventListener;\n+import org.kie.api.event.rule.AgendaGroupPoppedEvent;\n+import org.kie.api.event.rule.AgendaGroupPushedEvent;\n+import org.kie.api.event.rule.BeforeMatchFiredEvent;\n+import org.kie.api.event.rule.MatchCancelledEvent;\n+import org.kie.api.event.rule.MatchCreatedEvent;\n+import org.kie.api.event.rule.RuleFlowGroupActivatedEvent;\n+import org.kie.api.event.rule.RuleFlowGroupDeactivatedEvent;\n+import org.kie.api.pmml.PMML4Result;\n+import org.kie.api.runtime.KieSession;\n+import org.kie.internal.utils.KieHelper;\n+import org.kie.pmml.commons.enums.StatusCode;\n+import org.kie.pmml.commons.model.KiePMMLDrooledModel;\n+import org.kie.pmml.commons.model.KiePMMLModel;\n+import org.kie.pmml.evaluator.api.exceptions.KiePMMLModelException;\n+import org.kie.pmml.evaluator.api.executor.PMMLContext;\n+import org.kie.pmml.evaluator.core.executor.PMMLModelExecutor;\n+import org.kie.pmml.models.drooled.tuples.KiePMMLOriginalTypeGeneratedType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.kie.pmml.evaluator.core.utils.Converter.getUnwrappedParametersMap;\n+\n+public abstract class DrooledModelExecutor implements PMMLModelExecutor {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(DrooledModelExecutor.class.getName());\n+\n+    private final KieServices kieServices;\n+\n+    public DrooledModelExecutor() {\n+        this.kieServices = KieServices.Factory.get();\n+    }\n+\n+    @Override\n+    public PMML4Result evaluate(KiePMMLModel model, PMMLContext pmmlContext, String releaseId) {\n+        if (!(model instanceof KiePMMLDrooledModel)) {\n+            throw new KiePMMLModelException(\"Expected a KiePMMLDrooledModel, received a \" + model.getClass().getName());\n+        }\n+        final KiePMMLDrooledModel drooledModel = (KiePMMLDrooledModel) model;\n+        printGeneratedRules(drooledModel);\n+        KieSession kSession = new KieHelper()\n+                .addContent(drooledModel.getPackageDescr())\n+                .build(ExecutableModelProject.class)\n+                .newKieSession();\n+        final Map<String, Object> unwrappedInputParams = getUnwrappedParametersMap(pmmlContext.getRequestData().getMappedRequestParams());\n+        List<Object> executionParams = new ArrayList<>();\n+        KiePMMLStatusHolder statusHolder = new KiePMMLStatusHolder();\n+        executionParams.add(statusHolder);\n+        PMML4Result toReturn = new PMML4Result();\n+        toReturn.setResultCode(StatusCode.FAIL.getName());\n+        toReturn.setResultObjectName(drooledModel.getTargetField());\n+        executionParams.add(toReturn);\n+        final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap = drooledModel.getFieldTypeMap();\n+        for (Map.Entry<String, Object> entry : unwrappedInputParams.entrySet()) {\n+            if (!fieldTypeMap.containsKey(entry.getKey())) {\n+                throw new KiePMMLModelException(String.format(\"Field %s not mapped to generated type\", entry.getKey()));\n+            }\n+            try {\n+                String generatedTypeName = fieldTypeMap.get(entry.getKey()).getGeneratedType();\n+                FactType factType = kSession.getKieBase().getFactType(drooledModel.getPackageDescr().getName(), generatedTypeName);\n+                Object toAdd = factType.newInstance();\n+                factType.set(toAdd, \"value\", entry.getValue());\n+                executionParams.add(toAdd);\n+            } catch (Exception e) {\n+                throw new KiePMMLModelException(e.getMessage(), e);\n+            }\n+        }\n+        executionParams.forEach(kSession::insert);\n+        setupExecutionListener(kSession);\n+        kSession.setGlobal(\"$pmml4Result\", toReturn);\n+        kSession.fireAllRules();\n+        return toReturn;\n+    }\n+\n+    private void printGeneratedRules(KiePMMLDrooledModel treeModel) {\n+        try {\n+            String string = new DrlDumper().dump(treeModel.getPackageDescr());\n+            logger.info(string);\n+        } catch (Exception e) {\n+            e.printStackTrace();", "originalCommit": "ab2b1e0150f02e53c9b36ab9a95e09a3ab2e7249", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjExNDc4MA==", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r402114780", "bodyText": "@jiripetrlik\nTBH, this method is for development only - I'm not expecting rules to be dumped every time and I will remove it soon before merge (I'll add a TODO for this). Moreover, the only reasonable way I see to deal with it it would be to just ignore it, because I do not care at all if the \"dump\" does not work for some reason - what I'm concerned about is if the actual execution fails. Does this make sense? Do you have some suggestion?", "author": "gitgabrio", "createdAt": "2020-04-02T07:47:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUxNjg1Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM3NTI1OA==", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r402375258", "bodyText": "@gitgabrio\nI think that if you plan to remove it before PR is ready it is not a problem. In general I think it is good to rethrow in RuntimeException.", "author": "jiripetrlik", "createdAt": "2020-04-02T14:51:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUxNjg1Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM4MTQyNQ==", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r402381425", "bodyText": "\ud83d\udc4d\nPerfectly agree: my plan is to remove that development-only code", "author": "gitgabrio", "createdAt": "2020-04-02T14:58:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUxNjg1Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUxNzQxOA==", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r401517418", "bodyText": "Is this this code commented out intentionally?", "author": "jiripetrlik", "createdAt": "2020-04-01T10:34:31Z", "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drooled/src/main/java/org/kie/pmml/models/drooled/executor/DrooledModelExecutor.java", "diffHunk": "@@ -0,0 +1,199 @@\n+package org.kie.pmml.models.drooled.executor;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.drools.compiler.lang.DrlDumper;\n+import org.drools.modelcompiler.ExecutableModelProject;\n+import org.kie.api.KieServices;\n+import org.kie.api.definition.type.FactType;\n+import org.kie.api.event.rule.AfterMatchFiredEvent;\n+import org.kie.api.event.rule.AgendaEventListener;\n+import org.kie.api.event.rule.AgendaGroupPoppedEvent;\n+import org.kie.api.event.rule.AgendaGroupPushedEvent;\n+import org.kie.api.event.rule.BeforeMatchFiredEvent;\n+import org.kie.api.event.rule.MatchCancelledEvent;\n+import org.kie.api.event.rule.MatchCreatedEvent;\n+import org.kie.api.event.rule.RuleFlowGroupActivatedEvent;\n+import org.kie.api.event.rule.RuleFlowGroupDeactivatedEvent;\n+import org.kie.api.pmml.PMML4Result;\n+import org.kie.api.runtime.KieSession;\n+import org.kie.internal.utils.KieHelper;\n+import org.kie.pmml.commons.enums.StatusCode;\n+import org.kie.pmml.commons.model.KiePMMLDrooledModel;\n+import org.kie.pmml.commons.model.KiePMMLModel;\n+import org.kie.pmml.evaluator.api.exceptions.KiePMMLModelException;\n+import org.kie.pmml.evaluator.api.executor.PMMLContext;\n+import org.kie.pmml.evaluator.core.executor.PMMLModelExecutor;\n+import org.kie.pmml.models.drooled.tuples.KiePMMLOriginalTypeGeneratedType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.kie.pmml.evaluator.core.utils.Converter.getUnwrappedParametersMap;\n+\n+public abstract class DrooledModelExecutor implements PMMLModelExecutor {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(DrooledModelExecutor.class.getName());\n+\n+    private final KieServices kieServices;\n+\n+    public DrooledModelExecutor() {\n+        this.kieServices = KieServices.Factory.get();\n+    }\n+\n+    @Override\n+    public PMML4Result evaluate(KiePMMLModel model, PMMLContext pmmlContext, String releaseId) {\n+        if (!(model instanceof KiePMMLDrooledModel)) {\n+            throw new KiePMMLModelException(\"Expected a KiePMMLDrooledModel, received a \" + model.getClass().getName());\n+        }\n+        final KiePMMLDrooledModel drooledModel = (KiePMMLDrooledModel) model;\n+        printGeneratedRules(drooledModel);\n+        KieSession kSession = new KieHelper()\n+                .addContent(drooledModel.getPackageDescr())\n+                .build(ExecutableModelProject.class)\n+                .newKieSession();\n+        final Map<String, Object> unwrappedInputParams = getUnwrappedParametersMap(pmmlContext.getRequestData().getMappedRequestParams());\n+        List<Object> executionParams = new ArrayList<>();\n+        KiePMMLStatusHolder statusHolder = new KiePMMLStatusHolder();\n+        executionParams.add(statusHolder);\n+        PMML4Result toReturn = new PMML4Result();\n+        toReturn.setResultCode(StatusCode.FAIL.getName());\n+        toReturn.setResultObjectName(drooledModel.getTargetField());\n+        executionParams.add(toReturn);\n+        final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap = drooledModel.getFieldTypeMap();\n+        for (Map.Entry<String, Object> entry : unwrappedInputParams.entrySet()) {\n+            if (!fieldTypeMap.containsKey(entry.getKey())) {\n+                throw new KiePMMLModelException(String.format(\"Field %s not mapped to generated type\", entry.getKey()));\n+            }\n+            try {\n+                String generatedTypeName = fieldTypeMap.get(entry.getKey()).getGeneratedType();\n+                FactType factType = kSession.getKieBase().getFactType(drooledModel.getPackageDescr().getName(), generatedTypeName);\n+                Object toAdd = factType.newInstance();\n+                factType.set(toAdd, \"value\", entry.getValue());\n+                executionParams.add(toAdd);\n+            } catch (Exception e) {\n+                throw new KiePMMLModelException(e.getMessage(), e);\n+            }\n+        }\n+        executionParams.forEach(kSession::insert);\n+        setupExecutionListener(kSession);\n+        kSession.setGlobal(\"$pmml4Result\", toReturn);\n+        kSession.fireAllRules();\n+        return toReturn;\n+    }\n+\n+    private void printGeneratedRules(KiePMMLDrooledModel treeModel) {\n+        try {\n+            String string = new DrlDumper().dump(treeModel.getPackageDescr());\n+            logger.info(string);\n+        } catch (Exception e) {\n+            e.printStackTrace();\n+        }\n+    }\n+\n+    private void setupExecutionListener(final KieSession kSession) {\n+        final AgendaEventListener agendaEventListener = new AgendaEventListener() {\n+\n+            public void matchCancelled(MatchCancelledEvent event) {\n+                logger.info(event.toString());\n+            }\n+\n+            public void matchCreated(MatchCreatedEvent event) {\n+                logger.info(event.toString());\n+            }\n+\n+            public void afterMatchFired(AfterMatchFiredEvent event) {\n+                logger.info(event.toString());\n+            }\n+\n+            public void agendaGroupPopped(AgendaGroupPoppedEvent event) {\n+                logger.info(event.toString());\n+            }\n+\n+            public void agendaGroupPushed(AgendaGroupPushedEvent event) {\n+                logger.info(event.toString());\n+            }\n+\n+            public void beforeMatchFired(BeforeMatchFiredEvent event) {\n+                logger.info(event.toString());\n+            }\n+\n+            public void beforeRuleFlowGroupActivated(RuleFlowGroupActivatedEvent event) {\n+                logger.info(event.toString());\n+            }\n+\n+            public void afterRuleFlowGroupActivated(RuleFlowGroupActivatedEvent event) {\n+                logger.info(event.toString());\n+            }\n+\n+            public void beforeRuleFlowGroupDeactivated(RuleFlowGroupDeactivatedEvent event) {\n+                logger.info(event.toString());\n+            }\n+\n+            public void afterRuleFlowGroupDeactivated(RuleFlowGroupDeactivatedEvent event) {\n+                logger.info(event.toString());\n+            }\n+        };\n+        kSession.addEventListener(agendaEventListener);\n+    }\n+\n+//    @Override", "originalCommit": "ab2b1e0150f02e53c9b36ab9a95e09a3ab2e7249", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjExNTE0OA==", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r402115148", "bodyText": "@jiripetrlik\nRremoved - forgotten leftover", "author": "gitgabrio", "createdAt": "2020-04-02T07:47:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUxNzQxOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUyMDkxMQ==", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r401520911", "bodyText": "I would suggest to add the same implementation to all branches for readability.", "author": "jiripetrlik", "createdAt": "2020-04-01T10:41:10Z", "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-tree/kie-pmml-models-tree-compiler/src/main/java/org/kie/pmml/models/tree/compiler/factories/KiePMMLTreeModelCompoundPredicateASTFactory.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.models.tree.compiler.factories;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Queue;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+import org.dmg.pmml.CompoundPredicate;\n+import org.dmg.pmml.Predicate;\n+import org.dmg.pmml.SimplePredicate;\n+import org.drools.core.util.StringUtils;\n+import org.kie.pmml.commons.enums.StatusCode;\n+import org.kie.pmml.commons.exceptions.KiePMMLException;\n+import org.kie.pmml.models.drooled.ast.KiePMMLDrooledRule;\n+import org.kie.pmml.models.drooled.tuples.KiePMMLOperatorValue;\n+import org.kie.pmml.models.drooled.tuples.KiePMMLOriginalTypeGeneratedType;\n+import org.kie.pmml.models.tree.model.enums.OPERATOR;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static java.util.stream.Collectors.groupingBy;\n+import static org.kie.pmml.models.tree.compiler.factories.KiePMMLTreeModelASTFactory.STATUS_NULL;\n+import static org.kie.pmml.models.tree.compiler.factories.KiePMMLTreeModelASTFactory.STATUS_PATTERN;\n+\n+/**\n+ * Class used to generate <code>KiePMMLDrooledRule</code>s out of a <code>CompoundPredicate</code>\n+ */\n+public class KiePMMLTreeModelCompoundPredicateASTFactory {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(KiePMMLTreeModelCompoundPredicateASTFactory.class.getName());\n+    private final CompoundPredicate compoundPredicate;\n+    private final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap;\n+    private final Queue<KiePMMLDrooledRule> rules;\n+\n+    private KiePMMLTreeModelCompoundPredicateASTFactory(final CompoundPredicate compoundPredicate, final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap, final Queue<KiePMMLDrooledRule> rules) {\n+        this.compoundPredicate = compoundPredicate;\n+        this.fieldTypeMap = fieldTypeMap;\n+        this.rules = rules;\n+    }\n+\n+    public static KiePMMLTreeModelCompoundPredicateASTFactory factory(final CompoundPredicate compoundPredicate, final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap, final Queue<KiePMMLDrooledRule> rules) {\n+        return new KiePMMLTreeModelCompoundPredicateASTFactory(compoundPredicate, fieldTypeMap, rules);\n+    }\n+\n+    public void declareRuleFromCompoundPredicate(final String parentPath,\n+                                                 final String currentRule,\n+                                                 final Object result,\n+                                                 boolean isFinalLeaf) {\n+        logger.info(\"declareIntermediateRuleFromCompoundPredicate {} {} {} {}\", compoundPredicate, parentPath, currentRule, result);\n+        switch (compoundPredicate.getBooleanOperator()) {\n+            case SURROGATE:\n+                declareRuleFromCompoundPredicateSurrogate(parentPath, currentRule, result, isFinalLeaf);\n+                break;\n+            case AND:", "originalCommit": "ab2b1e0150f02e53c9b36ab9a95e09a3ab2e7249", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjExNjg1Ng==", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r402116856", "bodyText": "@jiripetrlik\nI do not follow you. Surrogate Compounds are actually dealt with as if they are a new \"Node\" - so the logic is completely different compared to the others", "author": "gitgabrio", "createdAt": "2020-04-02T07:50:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUyMDkxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM3NjkzNQ==", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r402376935", "bodyText": "I meant to put for all \"cases\" AND, OR, XOR the same call with break.", "author": "jiripetrlik", "createdAt": "2020-04-02T14:53:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUyMDkxMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUyMTE0Ng==", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r401521146", "bodyText": "Please handle exception properly.", "author": "jiripetrlik", "createdAt": "2020-04-01T10:41:39Z", "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-tree/kie-pmml-models-tree-compiler/src/main/java/org/kie/pmml/models/tree/compiler/factories/KiePMMLTreeModelFactory.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.models.tree.compiler.factories;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.dmg.pmml.DataDictionary;\n+import org.dmg.pmml.tree.TreeModel;\n+import org.drools.compiler.lang.DrlDumper;\n+import org.drools.compiler.lang.descr.PackageDescr;\n+import org.kie.pmml.commons.model.enums.MINING_FUNCTION;\n+import org.kie.pmml.models.drooled.ast.KiePMMLDrooledAST;\n+import org.kie.pmml.models.drooled.tuples.KiePMMLOriginalTypeGeneratedType;\n+import org.kie.pmml.models.tree.model.KiePMMLTreeModel;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.kie.pmml.compiler.commons.utils.ModelUtils.getTargetField;\n+import static org.kie.pmml.commons.factories.KiePMMLDescrFactory.getBaseDescr;\n+import static org.kie.pmml.models.tree.compiler.factories.KiePMMLTreeModelASTFactory.getKiePMMLDrooledAST;\n+\n+/**\n+ * Class used to generate <code>KiePMMLTreeModel</code> out of a <code>DataDictionary</code> and a <code>TreeModel</code>\n+ */\n+public class KiePMMLTreeModelFactory {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(KiePMMLTreeModelFactory.class.getName());\n+\n+    private KiePMMLTreeModelFactory() {\n+    }\n+\n+    public static KiePMMLTreeModel getKiePMMLTreeModel(DataDictionary dataDictionary, TreeModel model) {\n+        logger.info(\"getKiePMMLTreeModel {}\", model);\n+        String name = model.getModelName();\n+        Optional<String> targetFieldName = getTargetField(dataDictionary, model);\n+        final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap = new HashMap<>();\n+        final KiePMMLDrooledAST kiePMMLDrooledAST = getKiePMMLDrooledAST(dataDictionary, model, fieldTypeMap);\n+        final PackageDescr baseDescr = getBaseDescr(kiePMMLDrooledAST, name.toLowerCase());\n+        // TODO {gcardosi} Dev debug only - to be removed\n+        try {\n+            String string = new DrlDumper().dump(baseDescr);\n+            logger.info(string);\n+        } catch (Exception e) {\n+            e.printStackTrace();", "originalCommit": "ab2b1e0150f02e53c9b36ab9a95e09a3ab2e7249", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjExNzc4Nw==", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r402117787", "bodyText": "@jiripetrlik\nSee my previous answer - this snippet is to be completely removed", "author": "gitgabrio", "createdAt": "2020-04-02T07:51:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUyMTE0Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUyMjQzNg==", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r401522436", "bodyText": "Seems like implementation is missing.", "author": "jiripetrlik", "createdAt": "2020-04-01T10:44:05Z", "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-tree/kie-pmml-models-tree-compiler/src/test/java/org/kie/pmml/models/tree/compiler/factories/KiePMMLTreeModelPredicateASTFactoryTest.java", "diffHunk": "@@ -0,0 +1,27 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.pmml.models.tree.compiler.factories;\n+\n+import org.junit.Test;\n+\n+public class KiePMMLTreeModelPredicateASTFactoryTest {\n+\n+    @Test\n+    public void declareRuleFromPredicate() {", "originalCommit": "ab2b1e0150f02e53c9b36ab9a95e09a3ab2e7249", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjExOTQ4MQ==", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r402119481", "bodyText": "@jiripetrlik\nYes - not sure if this Test class is actually needed at all - basically only specific behavior is an \"instance of\".", "author": "gitgabrio", "createdAt": "2020-04-02T07:54:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUyMjQzNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUyMzQ2MA==", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r401523460", "bodyText": "Please remove debugging outputs.", "author": "jiripetrlik", "createdAt": "2020-04-01T10:45:56Z", "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-tree/kie-pmml-models-tree-evaluator/src/main/resources/org/kie/pmml/models/tree/evaluator/TreeModel.drl", "diffHunk": "@@ -0,0 +1,181 @@\n+package org.kie.pmml.models.tree.evaluator;\n+\n+import java.lang.Boolean;\n+import java.util.List;\n+\n+import org.dmg.pmml.SimplePredicate;\n+\n+\n+function boolean evaluateXORPredicates(List<Boolean> toEvaluate) {\n+   int counter = 0;\n+           for (Boolean bln : toEvaluate) {\n+               if (bln) {\n+                   counter ++;\n+               }\n+           }\n+           return counter %2 != 0;\n+}\n+/*\n+function boolean evaluateCompoundPredicate(KiePMMLCompoundPredicate toEvaluate) {\n+\n+}\n+\n+function boolean evaluateSimplePredicate(KiePMMLPredicate toEvaluate) {\n+\n+}\n+\n+function boolean evaluateTruePredicate(KiePMMLTruePredicate toEvaluate) {\n+    return true;\n+}*/\n+\n+/*function boolean evaluateNumber(Number value, OPERATOR operator, Number inputValue) {\n+        System.out.println(\"evaluateNumber \" + value + \" \" + operator + \" \" + inputValue);\n+        boolean toReturn;\n+        switch (operator) {\n+            case EQUAL:\n+                toReturn = value.equals(inputValue);\n+                break;\n+            case NOT_EQUAL:\n+                toReturn = !value.equals(inputValue);\n+                break;\n+            case LESS_THAN:\n+                toReturn = inputValue.doubleValue() < value.doubleValue();\n+                break;\n+            case LESS_OR_EQUAL:\n+                toReturn = inputValue.doubleValue() <= value.doubleValue();\n+                break;\n+            case GREATER_THAN:\n+                toReturn = inputValue.doubleValue() > value.doubleValue();\n+                break;\n+            case GREATER_OR_EQUAL:\n+                toReturn = inputValue.doubleValue() >= value.doubleValue();\n+                break;\n+            case IS_MISSING:\n+            case IS_NOT_MISSING:\n+            default:\n+                toReturn = false;\n+        }\n+        System.out.println(\"return \" + toReturn);", "originalCommit": "ab2b1e0150f02e53c9b36ab9a95e09a3ab2e7249", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUyMzU1OA==", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r401523558", "bodyText": "Please remove.", "author": "jiripetrlik", "createdAt": "2020-04-01T10:46:09Z", "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-tree/kie-pmml-models-tree-evaluator/src/main/resources/org/kie/pmml/models/tree/evaluator/TreeModel.drl", "diffHunk": "@@ -0,0 +1,181 @@\n+package org.kie.pmml.models.tree.evaluator;\n+\n+import java.lang.Boolean;\n+import java.util.List;\n+\n+import org.dmg.pmml.SimplePredicate;\n+\n+\n+function boolean evaluateXORPredicates(List<Boolean> toEvaluate) {\n+   int counter = 0;\n+           for (Boolean bln : toEvaluate) {\n+               if (bln) {\n+                   counter ++;\n+               }\n+           }\n+           return counter %2 != 0;\n+}\n+/*\n+function boolean evaluateCompoundPredicate(KiePMMLCompoundPredicate toEvaluate) {\n+\n+}\n+\n+function boolean evaluateSimplePredicate(KiePMMLPredicate toEvaluate) {\n+\n+}\n+\n+function boolean evaluateTruePredicate(KiePMMLTruePredicate toEvaluate) {\n+    return true;\n+}*/\n+\n+/*function boolean evaluateNumber(Number value, OPERATOR operator, Number inputValue) {\n+        System.out.println(\"evaluateNumber \" + value + \" \" + operator + \" \" + inputValue);\n+        boolean toReturn;\n+        switch (operator) {\n+            case EQUAL:\n+                toReturn = value.equals(inputValue);\n+                break;\n+            case NOT_EQUAL:\n+                toReturn = !value.equals(inputValue);\n+                break;\n+            case LESS_THAN:\n+                toReturn = inputValue.doubleValue() < value.doubleValue();\n+                break;\n+            case LESS_OR_EQUAL:\n+                toReturn = inputValue.doubleValue() <= value.doubleValue();\n+                break;\n+            case GREATER_THAN:\n+                toReturn = inputValue.doubleValue() > value.doubleValue();\n+                break;\n+            case GREATER_OR_EQUAL:\n+                toReturn = inputValue.doubleValue() >= value.doubleValue();\n+                break;\n+            case IS_MISSING:\n+            case IS_NOT_MISSING:\n+            default:\n+                toReturn = false;\n+        }\n+        System.out.println(\"return \" + toReturn);\n+        return toReturn;\n+}\n+\n+function boolean evaluateObject(Object value, OPERATOR operator, Object inputValue) {\n+        System.out.println(\"evaluateObject \" + value + \" \" + operator + \" \" + inputValue);\n+        boolean toReturn;\n+        switch (operator) {\n+            case EQUAL:\n+                toReturn = value.equals(inputValue);\n+                break;\n+            case NOT_EQUAL:\n+                toReturn = !value.equals(inputValue);\n+                break;\n+            case LESS_THAN:\n+            case LESS_OR_EQUAL:\n+            case GREATER_THAN:\n+            case GREATER_OR_EQUAL:\n+            case IS_MISSING:\n+            case IS_NOT_MISSING:\n+            default:\n+                toReturn = false;\n+        }\n+         System.out.println(\"return \" + toReturn);", "originalCommit": "ab2b1e0150f02e53c9b36ab9a95e09a3ab2e7249", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjEyMTQ2Ng==", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r402121466", "bodyText": "@jiripetrlik\nThose drl files where leftover - deleted them", "author": "gitgabrio", "createdAt": "2020-04-02T07:58:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUyMzU1OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUyMzc0MA==", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r401523740", "bodyText": "Is this commented out intentionally?", "author": "jiripetrlik", "createdAt": "2020-04-01T10:46:30Z", "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-tree/kie-pmml-models-tree-evaluator/src/main/resources/org/kie/pmml/models/tree/evaluator/TreeModel.drl", "diffHunk": "@@ -0,0 +1,181 @@\n+package org.kie.pmml.models.tree.evaluator;\n+\n+import java.lang.Boolean;\n+import java.util.List;\n+\n+import org.dmg.pmml.SimplePredicate;\n+\n+\n+function boolean evaluateXORPredicates(List<Boolean> toEvaluate) {\n+   int counter = 0;\n+           for (Boolean bln : toEvaluate) {\n+               if (bln) {\n+                   counter ++;\n+               }\n+           }\n+           return counter %2 != 0;\n+}\n+/*\n+function boolean evaluateCompoundPredicate(KiePMMLCompoundPredicate toEvaluate) {\n+\n+}\n+\n+function boolean evaluateSimplePredicate(KiePMMLPredicate toEvaluate) {\n+\n+}\n+\n+function boolean evaluateTruePredicate(KiePMMLTruePredicate toEvaluate) {\n+    return true;\n+}*/\n+\n+/*function boolean evaluateNumber(Number value, OPERATOR operator, Number inputValue) {\n+        System.out.println(\"evaluateNumber \" + value + \" \" + operator + \" \" + inputValue);\n+        boolean toReturn;\n+        switch (operator) {\n+            case EQUAL:\n+                toReturn = value.equals(inputValue);\n+                break;\n+            case NOT_EQUAL:\n+                toReturn = !value.equals(inputValue);\n+                break;\n+            case LESS_THAN:\n+                toReturn = inputValue.doubleValue() < value.doubleValue();\n+                break;\n+            case LESS_OR_EQUAL:\n+                toReturn = inputValue.doubleValue() <= value.doubleValue();\n+                break;\n+            case GREATER_THAN:\n+                toReturn = inputValue.doubleValue() > value.doubleValue();\n+                break;\n+            case GREATER_OR_EQUAL:\n+                toReturn = inputValue.doubleValue() >= value.doubleValue();\n+                break;\n+            case IS_MISSING:\n+            case IS_NOT_MISSING:\n+            default:\n+                toReturn = false;\n+        }\n+        System.out.println(\"return \" + toReturn);\n+        return toReturn;\n+}\n+\n+function boolean evaluateObject(Object value, OPERATOR operator, Object inputValue) {\n+        System.out.println(\"evaluateObject \" + value + \" \" + operator + \" \" + inputValue);\n+        boolean toReturn;\n+        switch (operator) {\n+            case EQUAL:\n+                toReturn = value.equals(inputValue);\n+                break;\n+            case NOT_EQUAL:\n+                toReturn = !value.equals(inputValue);\n+                break;\n+            case LESS_THAN:\n+            case LESS_OR_EQUAL:\n+            case GREATER_THAN:\n+            case GREATER_OR_EQUAL:\n+            case IS_MISSING:\n+            case IS_NOT_MISSING:\n+            default:\n+                toReturn = false;\n+        }\n+         System.out.println(\"return \" + toReturn);\n+        return toReturn;\n+}*/\n+\n+//rule \"Get Tree\"", "originalCommit": "ab2b1e0150f02e53c9b36ab9a95e09a3ab2e7249", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjEyMTYxOQ==", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r402121619", "bodyText": "@jiripetrlik\nSee above", "author": "gitgabrio", "createdAt": "2020-04-02T07:58:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUyMzc0MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUyNDMwNA==", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r401524304", "bodyText": "Please handle this exception properly.", "author": "jiripetrlik", "createdAt": "2020-04-01T10:47:39Z", "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-tree/kie-pmml-models-tree-evaluator/src/test/java/org/kie/pmml/models/tree/evaluator/TreeModelCompilationTest.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.pmml.models.tree.evaluator;\n+\n+import java.io.File;\n+import java.nio.file.Files;\n+\n+import org.drools.compiler.compiler.DrlParser;\n+import org.junit.Test;\n+import org.kie.test.util.filesystem.FileUtils;\n+\n+import static org.junit.Assert.fail;\n+\n+public class TreeModelCompilationTest {\n+\n+    @Test\n+    public void testTreeModelFile() throws Exception {\n+        DrlParser drlParser = new DrlParser();\n+        File file = FileUtils.getFile(\"TreeModel.drl\");\n+        String content = new String(Files.readAllBytes(file.toPath()));\n+        try {\n+            drlParser.parse(false, content);\n+        } catch (Exception e) {\n+            e.printStackTrace();", "originalCommit": "ab2b1e0150f02e53c9b36ab9a95e09a3ab2e7249", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUyNTQwNA==", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r401525404", "bodyText": "Can we avoid of using break here?", "author": "jiripetrlik", "createdAt": "2020-04-01T10:49:44Z", "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-tree/kie-pmml-models-tree-model/src/main/java/org/kie/pmml/models/tree/model/KiePMMLNode.java", "diffHunk": "@@ -0,0 +1,153 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.models.tree.model;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+import org.kie.pmml.commons.model.KiePMMLExtension;\n+import org.kie.pmml.commons.model.abstracts.AbstractKiePMMLBase;\n+import org.kie.pmml.models.tree.model.predicates.KiePMMLPredicate;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class KiePMMLNode extends AbstractKiePMMLBase {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(KiePMMLNode.class);\n+\n+    private String score;\n+    private String result;\n+    private KiePMMLPredicate kiePMMLPredicate;\n+    private List<KiePMMLNode> kiePMMLNodes;\n+\n+    private KiePMMLNode(String name, List<KiePMMLExtension> extensions) {\n+        super(name, extensions);\n+    }\n+\n+    /**\n+     * Builder to auto-generate the <b>id</b>\n+     * @return\n+     */\n+    public static Builder builder(String name, List<KiePMMLExtension> extensions) {\n+        return new Builder(name, extensions);\n+    }\n+\n+    public boolean evaluate(Map<String, Object> values) {\n+        result = null;\n+        logger.info(\"{}: evaluate {}\", id, this.score);\n+        if (kiePMMLPredicate != null && kiePMMLPredicate.evaluate(values)) {\n+            logger.info(\"{}: matching predicate, evaluating... \", id);\n+            logger.info(\"{}: preliminary set {}\", id, score);\n+            result = score;\n+            if (kiePMMLNodes != null) {\n+                for (KiePMMLNode kiePMMLNode : kiePMMLNodes) {\n+                    if (kiePMMLNode.evaluate(values)) {\n+                        logger.info(\"{}: matching node, update set {}\", id, kiePMMLNode.result);\n+                        result = kiePMMLNode.result;\n+                        break;", "originalCommit": "ab2b1e0150f02e53c9b36ab9a95e09a3ab2e7249", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjEyNzc1OQ==", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r402127759", "bodyText": "@jiripetrlik\nRemoved this (and others) leftover classes", "author": "gitgabrio", "createdAt": "2020-04-02T08:09:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUyNTQwNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUyNTk1Mg==", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r401525952", "bodyText": "Please split this stream to multiple lines.", "author": "jiripetrlik", "createdAt": "2020-04-01T10:50:51Z", "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-tree/kie-pmml-models-tree-model/src/main/java/org/kie/pmml/models/tree/model/enums/BOOLEAN_OPERATOR.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.models.tree.model.enums;\n+\n+import java.util.Arrays;\n+\n+import org.kie.pmml.commons.exceptions.KieEnumException;\n+\n+/**\n+ * @see <a href=http://dmg.org/pmml/v4-4/TreeModel.html#xsdElement_CompoundPredicate>CompoundPredicate</a>\n+ */\n+public enum BOOLEAN_OPERATOR {\n+\n+    OR(\"or\"),\n+    AND(\"and\"),\n+    XOR(\"xor\"),\n+    SURROGATE(\"surrogate\");\n+\n+    private String name;\n+\n+    BOOLEAN_OPERATOR(String name) {\n+        this.name = name;\n+    }\n+\n+    public static BOOLEAN_OPERATOR byName(String name) {\n+        return Arrays.stream(BOOLEAN_OPERATOR.values()).filter(value -> name.equals(value.name)).findFirst().orElseThrow(() -> new KieEnumException(\"Failed to find MODEL_TYPE with name: \" + name));", "originalCommit": "ab2b1e0150f02e53c9b36ab9a95e09a3ab2e7249", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjEzMTE0Mg==", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r402131142", "bodyText": "@jiripetrlik\nDone", "author": "gitgabrio", "createdAt": "2020-04-02T08:15:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUyNTk1Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUyNjEwMQ==", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r401526101", "bodyText": "Please split to multiple lines.", "author": "jiripetrlik", "createdAt": "2020-04-01T10:51:09Z", "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-tree/kie-pmml-models-tree-model/src/main/java/org/kie/pmml/models/tree/model/enums/OPERATOR.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.models.tree.model.enums;\n+\n+import java.util.Arrays;\n+\n+import org.kie.pmml.commons.exceptions.KieEnumException;\n+\n+/**\n+ * @see <a href=http://dmg.org/pmml/v4-4/TreeModel.html#xsdGroup_PREDICATE>PREDICATE</a>\n+ */\n+public enum OPERATOR {\n+\n+    EQUAL(\"equal\", \"==\"),\n+    NOT_EQUAL(\"notEqual\", \"!=\"),\n+    LESS_THAN(\"lessThan\", \"<\"),\n+    LESS_OR_EQUAL(\"lessOrEqual\", \"<=\"),\n+    GREATER_THAN(\"greaterThan\", \">\"),\n+    GREATER_OR_EQUAL(\"greaterOrEqual\", \">=\"),\n+    IS_MISSING(\"isMissing\", \"\"),\n+    IS_NOT_MISSING(\"isNotMissing\", \"\");\n+\n+    private final String name;\n+    private final String operator;\n+\n+    OPERATOR(String name, String operator) {\n+        this.name = name;\n+        this.operator = operator;\n+    }\n+\n+    public static OPERATOR byName(String name) {\n+        return Arrays.stream(OPERATOR.values()).filter(value -> name.equals(value.name)).findFirst().orElseThrow(() -> new KieEnumException(\"Failed to find MODEL_TYPE with name: \" + name));", "originalCommit": "ab2b1e0150f02e53c9b36ab9a95e09a3ab2e7249", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjEzMTI1OA==", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r402131258", "bodyText": "@jiripetrlik\nDone", "author": "gitgabrio", "createdAt": "2020-04-02T08:15:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUyNjEwMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUyNjY0NA==", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r401526644", "bodyText": "Please remove PMML from this file.", "author": "jiripetrlik", "createdAt": "2020-04-01T10:52:11Z", "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-tree/kie-pmml-models-tree-model/src/test/java/org/kie/pmml/models/tree/model/KiePMMLNodeTest.java", "diffHunk": "@@ -0,0 +1,239 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.pmml.models.tree.model;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.kie.pmml.models.tree.model.enums.BOOLEAN_OPERATOR;\n+import org.kie.pmml.models.tree.model.enums.OPERATOR;\n+import org.kie.pmml.models.tree.model.predicates.KiePMMLCompoundPredicate;\n+import org.kie.pmml.models.tree.model.predicates.KiePMMLPredicate;\n+import org.kie.pmml.models.tree.model.predicates.KiePMMLSimplePredicate;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+\n+public class KiePMMLNodeTest {\n+\n+    private final static List<KiePMMLNode> NODES = new ArrayList<>();\n+    private final String SCORE = \"SCORE\";\n+    private final String WILL_PLAY = \"will play\";\n+    private final String NO_PLAY = \"no play\";\n+    private final String MAY_PLAY = \"may play\";\n+    private final String HUMIDITY = \"humidity\";\n+    private final String TEMPERATURE = \"temperature\";\n+    private final String OUTLOOK = \"outlook\";\n+    private final String SUNNY = \"sunny\";\n+    private final String WINDY = \"windy\";\n+    private final String OVERCAST = \"overcast\";\n+    private final String RAIN = \"rain\";\n+\n+    private KiePMMLNode WILL_PLAY_NODE;\n+\n+    /*\n+    http://dmg.org/pmml/v4-4/TreeModel.html", "originalCommit": "ab2b1e0150f02e53c9b36ab9a95e09a3ab2e7249", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjEzMTQ2NA==", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r402131464", "bodyText": "@jiripetrlik\nDeleted file", "author": "gitgabrio", "createdAt": "2020-04-02T08:16:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUyNjY0NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUyNzc4NA==", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r401527784", "bodyText": "It is possible to ignore unfinished tests using Ignore annotation. It is better because such tests will appear in junit statistics and we will not forget to finish them.", "author": "jiripetrlik", "createdAt": "2020-04-01T10:54:20Z", "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-tree/kie-pmml-models-tree-model/src/test/java/org/kie/pmml/models/tree/model/predicates/KiePMMLCompoundPredicateTest.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.pmml.models.tree.model.predicates;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.junit.Test;\n+import org.kie.pmml.commons.model.KiePMMLExtension;\n+import org.kie.pmml.models.tree.model.enums.BOOLEAN_OPERATOR;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+\n+public class KiePMMLCompoundPredicateTest {\n+\n+    private final static List<KiePMMLExtension> EXTENSIONS = new ArrayList<>();\n+    private final static BOOLEAN_OPERATOR _BOOLEAN_OPERATOR = BOOLEAN_OPERATOR.OR;\n+    private final static List<KiePMMLPredicate> PREDICATES = new ArrayList<>();\n+\n+    @Test\n+    public void builder() {\n+        KiePMMLCompoundPredicate retrieved = KiePMMLCompoundPredicate.builder(\"CompoundPredicate\", EXTENSIONS, _BOOLEAN_OPERATOR)\n+                .build();\n+        assertNotNull(retrieved);\n+        assertEquals(EXTENSIONS, retrieved.getExtensions());\n+        assertEquals(_BOOLEAN_OPERATOR, retrieved.getBooleanOperator());\n+        assertNull(retrieved.getKiePMMLPredicates());\n+        retrieved = KiePMMLCompoundPredicate.builder(\"CompoundPredicate\", EXTENSIONS, _BOOLEAN_OPERATOR)\n+                .withKiePMMLPredicates(PREDICATES)\n+                .build();\n+        assertNotNull(retrieved);\n+        assertEquals(EXTENSIONS, retrieved.getExtensions());\n+        assertEquals(_BOOLEAN_OPERATOR, retrieved.getBooleanOperator());\n+        assertEquals(PREDICATES, retrieved.getKiePMMLPredicates());\n+    }\n+\n+    // TODO {gcardosi} re-implement with native drools rules", "originalCommit": "ab2b1e0150f02e53c9b36ab9a95e09a3ab2e7249", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjEzMTU2OA==", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r402131568", "bodyText": "@jiripetrlik\nDeleted file", "author": "gitgabrio", "createdAt": "2020-04-02T08:16:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUyNzc4NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUyNzk3Ng==", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r401527976", "bodyText": "Please rather ignore unfinished tests.", "author": "jiripetrlik", "createdAt": "2020-04-01T10:54:41Z", "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-tree/kie-pmml-models-tree-model/src/test/java/org/kie/pmml/models/tree/model/predicates/KiePMMLSimplePredicateTest.java", "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.pmml.models.tree.model.predicates;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.junit.Test;\n+import org.kie.pmml.commons.model.KiePMMLExtension;\n+import org.kie.pmml.models.tree.model.enums.OPERATOR;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+\n+public class KiePMMLSimplePredicateTest {\n+\n+    private final static String NAME = \"NAME\";\n+    private final static List<KiePMMLExtension> EXTENSIONS = new ArrayList<>();\n+    private final static OPERATOR _OPERATOR = OPERATOR.GREATER_OR_EQUAL;\n+    private final static Object VALUE = \"VALUE\";\n+\n+    @Test\n+    public void builder() {\n+        KiePMMLSimplePredicate retrieved = KiePMMLSimplePredicate.builder(NAME, EXTENSIONS, _OPERATOR)\n+                .build();\n+        assertNotNull(retrieved);\n+        assertEquals(NAME, retrieved.getName());\n+        assertEquals(EXTENSIONS, retrieved.getExtensions());\n+        assertEquals(_OPERATOR, retrieved.getOperator());\n+        assertNull(retrieved.getValue());\n+        retrieved = KiePMMLSimplePredicate.builder(NAME, EXTENSIONS, _OPERATOR)\n+                .withValue(VALUE)\n+                .build();\n+        assertNotNull(retrieved);\n+        assertEquals(NAME, retrieved.getName());\n+        assertEquals(EXTENSIONS, retrieved.getExtensions());\n+        assertEquals(_OPERATOR, retrieved.getOperator());\n+        assertEquals(VALUE, retrieved.getValue());\n+    }\n+\n+    // TODO {gcardosi} re-implement with native drools rules", "originalCommit": "ab2b1e0150f02e53c9b36ab9a95e09a3ab2e7249", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjEzMTYyOQ==", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r402131629", "bodyText": "@jiripetrlik\nDeleted file", "author": "gitgabrio", "createdAt": "2020-04-02T08:16:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUyNzk3Ng=="}], "type": "inlineReview"}, {"oid": "0982e6ddf6589d7861981c6b16a0d208547973ec", "url": "https://github.com/kiegroup/drools/commit/0982e6ddf6589d7861981c6b16a0d208547973ec", "message": "[DROOLS-5144] Implementing Surrogate predicates with agenda-group/activation-group.", "committedDate": "2020-04-01T14:50:39Z", "type": "commit"}, {"oid": "8af3a4c90a46163b4a7022cf4a28b9a2eafdacf4", "url": "https://github.com/kiegroup/drools/commit/8af3a4c90a46163b4a7022cf4a28b9a2eafdacf4", "message": "[DROOLS-5144] Refactored integration tests to avoid multiple model parsing/compilation for same test class", "committedDate": "2020-04-01T15:17:24Z", "type": "commit"}, {"oid": "67abeb019d33ee7886aaab07352c80da1d3402fd", "url": "https://github.com/kiegroup/drools/commit/67abeb019d33ee7886aaab07352c80da1d3402fd", "message": "[DROOLS-5144] Fixing PR comments", "committedDate": "2020-04-02T08:27:27Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjgyMTE5Ng==", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r402821196", "bodyText": "This is the StringUtils.join logic and it's repeated a few times", "author": "lucamolteni", "createdAt": "2020-04-03T08:17:56Z", "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drooled/src/main/java/org/kie/pmml/commons/factories/KiePMMLDescrLhsFactory.java", "diffHunk": "@@ -0,0 +1,173 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.commons.factories;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.drools.compiler.lang.api.CEDescrBuilder;\n+import org.drools.compiler.lang.api.ConditionalBranchDescrBuilder;\n+import org.drools.compiler.lang.api.PatternDescrBuilder;\n+import org.drools.compiler.lang.api.RuleDescrBuilder;\n+import org.drools.compiler.lang.descr.AndDescr;\n+import org.drools.compiler.lang.descr.ExistsDescr;\n+import org.drools.compiler.lang.descr.NotDescr;\n+import org.drools.compiler.lang.descr.OrDescr;\n+import org.kie.pmml.commons.exceptions.KiePMMLException;\n+import org.kie.pmml.models.drooled.ast.KiePMMLDrooledRule;\n+import org.kie.pmml.models.drooled.executor.KiePMMLStatusHolder;\n+import org.kie.pmml.models.drooled.tuples.KiePMMLOperatorValue;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.kie.pmml.commons.factories.KiePMMLDescrRulesFactory.BREAK_LABEL;\n+import static org.kie.pmml.commons.factories.KiePMMLDescrRulesFactory.STATUS_HOLDER;\n+\n+/**\n+ * Class used to generate <b>Rules</b> (descr) out of a <b>Queue&lt;KiePMMLDrooledRule&gt;</b>\n+ */\n+public class KiePMMLDescrLhsFactory {\n+\n+    static final String INPUT_FIELD = \"$inputField\";\n+    static final String INPUT_FIELD_CONDITIONAL = \"$inputField.getValue() %s %s\";\n+\n+    static final String VALUE_PATTERN = \"value %s %s\";\n+    private static final Logger logger = LoggerFactory.getLogger(KiePMMLDescrLhsFactory.class.getName());\n+\n+    final CEDescrBuilder<RuleDescrBuilder, AndDescr> builder;\n+\n+    private KiePMMLDescrLhsFactory(final CEDescrBuilder<RuleDescrBuilder, AndDescr> builder) {\n+        this.builder = builder;\n+    }\n+\n+    public static KiePMMLDescrLhsFactory factory(final CEDescrBuilder<RuleDescrBuilder, AndDescr> builder) {\n+        return new KiePMMLDescrLhsFactory(builder);\n+    }\n+\n+    public void declareLhs(final KiePMMLDrooledRule rule) {\n+        logger.debug(\"declareLhs {}\", rule);\n+        final PatternDescrBuilder<CEDescrBuilder<RuleDescrBuilder, AndDescr>> patternDescrBuilder = builder.pattern(KiePMMLStatusHolder.class.getSimpleName()).id(STATUS_HOLDER, false);\n+        if (rule.getStatusConstraint() != null) {\n+            patternDescrBuilder.constraint(rule.getStatusConstraint());\n+        }\n+        if (rule.getAndConstraints() != null) {\n+            rule.getAndConstraints().forEach((type, kiePMMLOperatorValues) -> declareConstraintAndOr(\"&&\", type, kiePMMLOperatorValues));\n+        }\n+        if (rule.getOrConstraints() != null) {\n+            rule.getOrConstraints().forEach((type, kiePMMLOperatorValues) -> declareConstraintAndOr(\"||\", type, kiePMMLOperatorValues));\n+        }\n+        if (rule.getXorConstraints() != null) {\n+            declareConstraintsXor(rule.getXorConstraints());\n+        }\n+        if (rule.getInConstraints() != null) {\n+            rule.getInConstraints().forEach(this::declareConstraintIn);\n+        }\n+        if (rule.getNotInConstraints() != null) {\n+            rule.getNotInConstraints().forEach(this::declareConstraintNotIn);\n+        }\n+        if (rule.getIfBreakField() != null) {\n+            declareIfBreak(rule.getIfBreakField(), rule.getIfBreakOperator(), rule.getIfBreakValue());\n+        }\n+    }\n+\n+    protected void declareConstraintAndOr(final String operator, final String patternType, final List<KiePMMLOperatorValue> kiePMMLOperatorValues) {\n+        StringBuilder constraintBuilder = new StringBuilder();\n+        for (int i = 0; i < kiePMMLOperatorValues.size(); i++) {\n+            KiePMMLOperatorValue kiePMMLOperatorValue = kiePMMLOperatorValues.get(i);\n+            if (i > 0) {\n+                constraintBuilder.append(\" \");\n+                constraintBuilder.append(operator);", "originalCommit": "67abeb019d33ee7886aaab07352c80da1d3402fd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjgyMTYzOQ==", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r402821639", "bodyText": "StringUtils.join", "author": "lucamolteni", "createdAt": "2020-04-03T08:18:27Z", "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drooled/src/main/java/org/kie/pmml/commons/factories/KiePMMLDescrLhsFactory.java", "diffHunk": "@@ -0,0 +1,173 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.commons.factories;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.drools.compiler.lang.api.CEDescrBuilder;\n+import org.drools.compiler.lang.api.ConditionalBranchDescrBuilder;\n+import org.drools.compiler.lang.api.PatternDescrBuilder;\n+import org.drools.compiler.lang.api.RuleDescrBuilder;\n+import org.drools.compiler.lang.descr.AndDescr;\n+import org.drools.compiler.lang.descr.ExistsDescr;\n+import org.drools.compiler.lang.descr.NotDescr;\n+import org.drools.compiler.lang.descr.OrDescr;\n+import org.kie.pmml.commons.exceptions.KiePMMLException;\n+import org.kie.pmml.models.drooled.ast.KiePMMLDrooledRule;\n+import org.kie.pmml.models.drooled.executor.KiePMMLStatusHolder;\n+import org.kie.pmml.models.drooled.tuples.KiePMMLOperatorValue;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.kie.pmml.commons.factories.KiePMMLDescrRulesFactory.BREAK_LABEL;\n+import static org.kie.pmml.commons.factories.KiePMMLDescrRulesFactory.STATUS_HOLDER;\n+\n+/**\n+ * Class used to generate <b>Rules</b> (descr) out of a <b>Queue&lt;KiePMMLDrooledRule&gt;</b>\n+ */\n+public class KiePMMLDescrLhsFactory {\n+\n+    static final String INPUT_FIELD = \"$inputField\";\n+    static final String INPUT_FIELD_CONDITIONAL = \"$inputField.getValue() %s %s\";\n+\n+    static final String VALUE_PATTERN = \"value %s %s\";\n+    private static final Logger logger = LoggerFactory.getLogger(KiePMMLDescrLhsFactory.class.getName());\n+\n+    final CEDescrBuilder<RuleDescrBuilder, AndDescr> builder;\n+\n+    private KiePMMLDescrLhsFactory(final CEDescrBuilder<RuleDescrBuilder, AndDescr> builder) {\n+        this.builder = builder;\n+    }\n+\n+    public static KiePMMLDescrLhsFactory factory(final CEDescrBuilder<RuleDescrBuilder, AndDescr> builder) {\n+        return new KiePMMLDescrLhsFactory(builder);\n+    }\n+\n+    public void declareLhs(final KiePMMLDrooledRule rule) {\n+        logger.debug(\"declareLhs {}\", rule);\n+        final PatternDescrBuilder<CEDescrBuilder<RuleDescrBuilder, AndDescr>> patternDescrBuilder = builder.pattern(KiePMMLStatusHolder.class.getSimpleName()).id(STATUS_HOLDER, false);\n+        if (rule.getStatusConstraint() != null) {\n+            patternDescrBuilder.constraint(rule.getStatusConstraint());\n+        }\n+        if (rule.getAndConstraints() != null) {\n+            rule.getAndConstraints().forEach((type, kiePMMLOperatorValues) -> declareConstraintAndOr(\"&&\", type, kiePMMLOperatorValues));\n+        }\n+        if (rule.getOrConstraints() != null) {\n+            rule.getOrConstraints().forEach((type, kiePMMLOperatorValues) -> declareConstraintAndOr(\"||\", type, kiePMMLOperatorValues));\n+        }\n+        if (rule.getXorConstraints() != null) {\n+            declareConstraintsXor(rule.getXorConstraints());\n+        }\n+        if (rule.getInConstraints() != null) {\n+            rule.getInConstraints().forEach(this::declareConstraintIn);\n+        }\n+        if (rule.getNotInConstraints() != null) {\n+            rule.getNotInConstraints().forEach(this::declareConstraintNotIn);\n+        }\n+        if (rule.getIfBreakField() != null) {\n+            declareIfBreak(rule.getIfBreakField(), rule.getIfBreakOperator(), rule.getIfBreakValue());\n+        }\n+    }\n+\n+    protected void declareConstraintAndOr(final String operator, final String patternType, final List<KiePMMLOperatorValue> kiePMMLOperatorValues) {\n+        StringBuilder constraintBuilder = new StringBuilder();\n+        for (int i = 0; i < kiePMMLOperatorValues.size(); i++) {\n+            KiePMMLOperatorValue kiePMMLOperatorValue = kiePMMLOperatorValues.get(i);\n+            if (i > 0) {\n+                constraintBuilder.append(\" \");\n+                constraintBuilder.append(operator);\n+                constraintBuilder.append(\" \");\n+            }\n+            constraintBuilder.append(String.format(VALUE_PATTERN, kiePMMLOperatorValue.getOperator(), kiePMMLOperatorValue.getValue()));\n+        }\n+        builder.pattern(patternType).constraint(constraintBuilder.toString());\n+    }\n+\n+    protected void declareConstraintsXor(final Map<String, List<KiePMMLOperatorValue>> xorConstraints) {\n+        if (xorConstraints.size() != 2) {\n+            throw new KiePMMLException(\"Expecting two fields for XOR constraints, retrieved \" + xorConstraints.size());\n+        }\n+        final String[] keys = xorConstraints.keySet().toArray(new String[0]);\n+        final List<KiePMMLOperatorValue>[] values = new List[xorConstraints.size()];\n+        for (int i = 0; i < keys.length; i++) {\n+            values[i] = xorConstraints.get(keys[i]);\n+        }\n+        // The builder to put in \"and\" the not and the exists constraints\n+        final CEDescrBuilder<CEDescrBuilder<RuleDescrBuilder, AndDescr>, AndDescr> andBuilder = builder.and();\n+        final CEDescrBuilder<CEDescrBuilder<CEDescrBuilder<CEDescrBuilder<RuleDescrBuilder, AndDescr>, AndDescr>, NotDescr>, AndDescr> notBuilder = andBuilder.not().and();\n+        declareNotConstraint(notBuilder, keys[0], values[0]);\n+        declareNotConstraint(notBuilder, keys[1], values[1]);\n+        final CEDescrBuilder<CEDescrBuilder<CEDescrBuilder<CEDescrBuilder<RuleDescrBuilder, AndDescr>, AndDescr>, ExistsDescr>, OrDescr> existsBuilder = andBuilder.exists().or();\n+        declareExistsConstraint(existsBuilder, keys[0], values[0]);\n+        declareExistsConstraint(existsBuilder.or(), keys[1], values[1]);\n+    }\n+\n+    protected void declareNotConstraint(final CEDescrBuilder<CEDescrBuilder<CEDescrBuilder<CEDescrBuilder<RuleDescrBuilder, AndDescr>, AndDescr>, NotDescr>, AndDescr> notBuilder, final String patternType, final List<KiePMMLOperatorValue> kiePMMLOperatorValues) {\n+        StringBuilder constraintBuilder = new StringBuilder();\n+        for (int i = 0; i < kiePMMLOperatorValues.size(); i++) {\n+            KiePMMLOperatorValue kiePMMLOperatorValue = kiePMMLOperatorValues.get(i);\n+            if (i > 0) {", "originalCommit": "67abeb019d33ee7886aaab07352c80da1d3402fd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjgyMTc0MA==", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r402821740", "bodyText": "StringUtils.join", "author": "lucamolteni", "createdAt": "2020-04-03T08:18:32Z", "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drooled/src/main/java/org/kie/pmml/commons/factories/KiePMMLDescrLhsFactory.java", "diffHunk": "@@ -0,0 +1,173 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.commons.factories;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.drools.compiler.lang.api.CEDescrBuilder;\n+import org.drools.compiler.lang.api.ConditionalBranchDescrBuilder;\n+import org.drools.compiler.lang.api.PatternDescrBuilder;\n+import org.drools.compiler.lang.api.RuleDescrBuilder;\n+import org.drools.compiler.lang.descr.AndDescr;\n+import org.drools.compiler.lang.descr.ExistsDescr;\n+import org.drools.compiler.lang.descr.NotDescr;\n+import org.drools.compiler.lang.descr.OrDescr;\n+import org.kie.pmml.commons.exceptions.KiePMMLException;\n+import org.kie.pmml.models.drooled.ast.KiePMMLDrooledRule;\n+import org.kie.pmml.models.drooled.executor.KiePMMLStatusHolder;\n+import org.kie.pmml.models.drooled.tuples.KiePMMLOperatorValue;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.kie.pmml.commons.factories.KiePMMLDescrRulesFactory.BREAK_LABEL;\n+import static org.kie.pmml.commons.factories.KiePMMLDescrRulesFactory.STATUS_HOLDER;\n+\n+/**\n+ * Class used to generate <b>Rules</b> (descr) out of a <b>Queue&lt;KiePMMLDrooledRule&gt;</b>\n+ */\n+public class KiePMMLDescrLhsFactory {\n+\n+    static final String INPUT_FIELD = \"$inputField\";\n+    static final String INPUT_FIELD_CONDITIONAL = \"$inputField.getValue() %s %s\";\n+\n+    static final String VALUE_PATTERN = \"value %s %s\";\n+    private static final Logger logger = LoggerFactory.getLogger(KiePMMLDescrLhsFactory.class.getName());\n+\n+    final CEDescrBuilder<RuleDescrBuilder, AndDescr> builder;\n+\n+    private KiePMMLDescrLhsFactory(final CEDescrBuilder<RuleDescrBuilder, AndDescr> builder) {\n+        this.builder = builder;\n+    }\n+\n+    public static KiePMMLDescrLhsFactory factory(final CEDescrBuilder<RuleDescrBuilder, AndDescr> builder) {\n+        return new KiePMMLDescrLhsFactory(builder);\n+    }\n+\n+    public void declareLhs(final KiePMMLDrooledRule rule) {\n+        logger.debug(\"declareLhs {}\", rule);\n+        final PatternDescrBuilder<CEDescrBuilder<RuleDescrBuilder, AndDescr>> patternDescrBuilder = builder.pattern(KiePMMLStatusHolder.class.getSimpleName()).id(STATUS_HOLDER, false);\n+        if (rule.getStatusConstraint() != null) {\n+            patternDescrBuilder.constraint(rule.getStatusConstraint());\n+        }\n+        if (rule.getAndConstraints() != null) {\n+            rule.getAndConstraints().forEach((type, kiePMMLOperatorValues) -> declareConstraintAndOr(\"&&\", type, kiePMMLOperatorValues));\n+        }\n+        if (rule.getOrConstraints() != null) {\n+            rule.getOrConstraints().forEach((type, kiePMMLOperatorValues) -> declareConstraintAndOr(\"||\", type, kiePMMLOperatorValues));\n+        }\n+        if (rule.getXorConstraints() != null) {\n+            declareConstraintsXor(rule.getXorConstraints());\n+        }\n+        if (rule.getInConstraints() != null) {\n+            rule.getInConstraints().forEach(this::declareConstraintIn);\n+        }\n+        if (rule.getNotInConstraints() != null) {\n+            rule.getNotInConstraints().forEach(this::declareConstraintNotIn);\n+        }\n+        if (rule.getIfBreakField() != null) {\n+            declareIfBreak(rule.getIfBreakField(), rule.getIfBreakOperator(), rule.getIfBreakValue());\n+        }\n+    }\n+\n+    protected void declareConstraintAndOr(final String operator, final String patternType, final List<KiePMMLOperatorValue> kiePMMLOperatorValues) {\n+        StringBuilder constraintBuilder = new StringBuilder();\n+        for (int i = 0; i < kiePMMLOperatorValues.size(); i++) {\n+            KiePMMLOperatorValue kiePMMLOperatorValue = kiePMMLOperatorValues.get(i);\n+            if (i > 0) {\n+                constraintBuilder.append(\" \");\n+                constraintBuilder.append(operator);\n+                constraintBuilder.append(\" \");\n+            }\n+            constraintBuilder.append(String.format(VALUE_PATTERN, kiePMMLOperatorValue.getOperator(), kiePMMLOperatorValue.getValue()));\n+        }\n+        builder.pattern(patternType).constraint(constraintBuilder.toString());\n+    }\n+\n+    protected void declareConstraintsXor(final Map<String, List<KiePMMLOperatorValue>> xorConstraints) {\n+        if (xorConstraints.size() != 2) {\n+            throw new KiePMMLException(\"Expecting two fields for XOR constraints, retrieved \" + xorConstraints.size());\n+        }\n+        final String[] keys = xorConstraints.keySet().toArray(new String[0]);\n+        final List<KiePMMLOperatorValue>[] values = new List[xorConstraints.size()];\n+        for (int i = 0; i < keys.length; i++) {\n+            values[i] = xorConstraints.get(keys[i]);\n+        }\n+        // The builder to put in \"and\" the not and the exists constraints\n+        final CEDescrBuilder<CEDescrBuilder<RuleDescrBuilder, AndDescr>, AndDescr> andBuilder = builder.and();\n+        final CEDescrBuilder<CEDescrBuilder<CEDescrBuilder<CEDescrBuilder<RuleDescrBuilder, AndDescr>, AndDescr>, NotDescr>, AndDescr> notBuilder = andBuilder.not().and();\n+        declareNotConstraint(notBuilder, keys[0], values[0]);\n+        declareNotConstraint(notBuilder, keys[1], values[1]);\n+        final CEDescrBuilder<CEDescrBuilder<CEDescrBuilder<CEDescrBuilder<RuleDescrBuilder, AndDescr>, AndDescr>, ExistsDescr>, OrDescr> existsBuilder = andBuilder.exists().or();\n+        declareExistsConstraint(existsBuilder, keys[0], values[0]);\n+        declareExistsConstraint(existsBuilder.or(), keys[1], values[1]);\n+    }\n+\n+    protected void declareNotConstraint(final CEDescrBuilder<CEDescrBuilder<CEDescrBuilder<CEDescrBuilder<RuleDescrBuilder, AndDescr>, AndDescr>, NotDescr>, AndDescr> notBuilder, final String patternType, final List<KiePMMLOperatorValue> kiePMMLOperatorValues) {\n+        StringBuilder constraintBuilder = new StringBuilder();\n+        for (int i = 0; i < kiePMMLOperatorValues.size(); i++) {\n+            KiePMMLOperatorValue kiePMMLOperatorValue = kiePMMLOperatorValues.get(i);\n+            if (i > 0) {\n+                constraintBuilder.append(\" && \");\n+            }\n+            constraintBuilder.append(String.format(VALUE_PATTERN, kiePMMLOperatorValue.getOperator(), kiePMMLOperatorValue.getValue()));\n+        }\n+        notBuilder.pattern(patternType).constraint(constraintBuilder.toString());\n+    }\n+\n+    protected void declareExistsConstraint(final CEDescrBuilder<?, ?> existsBuilder, final String patternType, final List<KiePMMLOperatorValue> kiePMMLOperatorValues) {\n+        StringBuilder constraintBuilder = new StringBuilder();\n+        for (int i = 0; i < kiePMMLOperatorValues.size(); i++) {\n+            KiePMMLOperatorValue kiePMMLOperatorValue = kiePMMLOperatorValues.get(i);\n+            if (i > 0) {\n+                constraintBuilder.append(\" || \");", "originalCommit": "67abeb019d33ee7886aaab07352c80da1d3402fd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjgyMTc5Nw==", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r402821797", "bodyText": "StringUtils.join", "author": "lucamolteni", "createdAt": "2020-04-03T08:18:38Z", "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drooled/src/main/java/org/kie/pmml/commons/factories/KiePMMLDescrLhsFactory.java", "diffHunk": "@@ -0,0 +1,173 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.commons.factories;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.drools.compiler.lang.api.CEDescrBuilder;\n+import org.drools.compiler.lang.api.ConditionalBranchDescrBuilder;\n+import org.drools.compiler.lang.api.PatternDescrBuilder;\n+import org.drools.compiler.lang.api.RuleDescrBuilder;\n+import org.drools.compiler.lang.descr.AndDescr;\n+import org.drools.compiler.lang.descr.ExistsDescr;\n+import org.drools.compiler.lang.descr.NotDescr;\n+import org.drools.compiler.lang.descr.OrDescr;\n+import org.kie.pmml.commons.exceptions.KiePMMLException;\n+import org.kie.pmml.models.drooled.ast.KiePMMLDrooledRule;\n+import org.kie.pmml.models.drooled.executor.KiePMMLStatusHolder;\n+import org.kie.pmml.models.drooled.tuples.KiePMMLOperatorValue;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.kie.pmml.commons.factories.KiePMMLDescrRulesFactory.BREAK_LABEL;\n+import static org.kie.pmml.commons.factories.KiePMMLDescrRulesFactory.STATUS_HOLDER;\n+\n+/**\n+ * Class used to generate <b>Rules</b> (descr) out of a <b>Queue&lt;KiePMMLDrooledRule&gt;</b>\n+ */\n+public class KiePMMLDescrLhsFactory {\n+\n+    static final String INPUT_FIELD = \"$inputField\";\n+    static final String INPUT_FIELD_CONDITIONAL = \"$inputField.getValue() %s %s\";\n+\n+    static final String VALUE_PATTERN = \"value %s %s\";\n+    private static final Logger logger = LoggerFactory.getLogger(KiePMMLDescrLhsFactory.class.getName());\n+\n+    final CEDescrBuilder<RuleDescrBuilder, AndDescr> builder;\n+\n+    private KiePMMLDescrLhsFactory(final CEDescrBuilder<RuleDescrBuilder, AndDescr> builder) {\n+        this.builder = builder;\n+    }\n+\n+    public static KiePMMLDescrLhsFactory factory(final CEDescrBuilder<RuleDescrBuilder, AndDescr> builder) {\n+        return new KiePMMLDescrLhsFactory(builder);\n+    }\n+\n+    public void declareLhs(final KiePMMLDrooledRule rule) {\n+        logger.debug(\"declareLhs {}\", rule);\n+        final PatternDescrBuilder<CEDescrBuilder<RuleDescrBuilder, AndDescr>> patternDescrBuilder = builder.pattern(KiePMMLStatusHolder.class.getSimpleName()).id(STATUS_HOLDER, false);\n+        if (rule.getStatusConstraint() != null) {\n+            patternDescrBuilder.constraint(rule.getStatusConstraint());\n+        }\n+        if (rule.getAndConstraints() != null) {\n+            rule.getAndConstraints().forEach((type, kiePMMLOperatorValues) -> declareConstraintAndOr(\"&&\", type, kiePMMLOperatorValues));\n+        }\n+        if (rule.getOrConstraints() != null) {\n+            rule.getOrConstraints().forEach((type, kiePMMLOperatorValues) -> declareConstraintAndOr(\"||\", type, kiePMMLOperatorValues));\n+        }\n+        if (rule.getXorConstraints() != null) {\n+            declareConstraintsXor(rule.getXorConstraints());\n+        }\n+        if (rule.getInConstraints() != null) {\n+            rule.getInConstraints().forEach(this::declareConstraintIn);\n+        }\n+        if (rule.getNotInConstraints() != null) {\n+            rule.getNotInConstraints().forEach(this::declareConstraintNotIn);\n+        }\n+        if (rule.getIfBreakField() != null) {\n+            declareIfBreak(rule.getIfBreakField(), rule.getIfBreakOperator(), rule.getIfBreakValue());\n+        }\n+    }\n+\n+    protected void declareConstraintAndOr(final String operator, final String patternType, final List<KiePMMLOperatorValue> kiePMMLOperatorValues) {\n+        StringBuilder constraintBuilder = new StringBuilder();\n+        for (int i = 0; i < kiePMMLOperatorValues.size(); i++) {\n+            KiePMMLOperatorValue kiePMMLOperatorValue = kiePMMLOperatorValues.get(i);\n+            if (i > 0) {\n+                constraintBuilder.append(\" \");\n+                constraintBuilder.append(operator);\n+                constraintBuilder.append(\" \");\n+            }\n+            constraintBuilder.append(String.format(VALUE_PATTERN, kiePMMLOperatorValue.getOperator(), kiePMMLOperatorValue.getValue()));\n+        }\n+        builder.pattern(patternType).constraint(constraintBuilder.toString());\n+    }\n+\n+    protected void declareConstraintsXor(final Map<String, List<KiePMMLOperatorValue>> xorConstraints) {\n+        if (xorConstraints.size() != 2) {\n+            throw new KiePMMLException(\"Expecting two fields for XOR constraints, retrieved \" + xorConstraints.size());\n+        }\n+        final String[] keys = xorConstraints.keySet().toArray(new String[0]);\n+        final List<KiePMMLOperatorValue>[] values = new List[xorConstraints.size()];\n+        for (int i = 0; i < keys.length; i++) {\n+            values[i] = xorConstraints.get(keys[i]);\n+        }\n+        // The builder to put in \"and\" the not and the exists constraints\n+        final CEDescrBuilder<CEDescrBuilder<RuleDescrBuilder, AndDescr>, AndDescr> andBuilder = builder.and();\n+        final CEDescrBuilder<CEDescrBuilder<CEDescrBuilder<CEDescrBuilder<RuleDescrBuilder, AndDescr>, AndDescr>, NotDescr>, AndDescr> notBuilder = andBuilder.not().and();\n+        declareNotConstraint(notBuilder, keys[0], values[0]);\n+        declareNotConstraint(notBuilder, keys[1], values[1]);\n+        final CEDescrBuilder<CEDescrBuilder<CEDescrBuilder<CEDescrBuilder<RuleDescrBuilder, AndDescr>, AndDescr>, ExistsDescr>, OrDescr> existsBuilder = andBuilder.exists().or();\n+        declareExistsConstraint(existsBuilder, keys[0], values[0]);\n+        declareExistsConstraint(existsBuilder.or(), keys[1], values[1]);\n+    }\n+\n+    protected void declareNotConstraint(final CEDescrBuilder<CEDescrBuilder<CEDescrBuilder<CEDescrBuilder<RuleDescrBuilder, AndDescr>, AndDescr>, NotDescr>, AndDescr> notBuilder, final String patternType, final List<KiePMMLOperatorValue> kiePMMLOperatorValues) {\n+        StringBuilder constraintBuilder = new StringBuilder();\n+        for (int i = 0; i < kiePMMLOperatorValues.size(); i++) {\n+            KiePMMLOperatorValue kiePMMLOperatorValue = kiePMMLOperatorValues.get(i);\n+            if (i > 0) {\n+                constraintBuilder.append(\" && \");\n+            }\n+            constraintBuilder.append(String.format(VALUE_PATTERN, kiePMMLOperatorValue.getOperator(), kiePMMLOperatorValue.getValue()));\n+        }\n+        notBuilder.pattern(patternType).constraint(constraintBuilder.toString());\n+    }\n+\n+    protected void declareExistsConstraint(final CEDescrBuilder<?, ?> existsBuilder, final String patternType, final List<KiePMMLOperatorValue> kiePMMLOperatorValues) {\n+        StringBuilder constraintBuilder = new StringBuilder();\n+        for (int i = 0; i < kiePMMLOperatorValues.size(); i++) {\n+            KiePMMLOperatorValue kiePMMLOperatorValue = kiePMMLOperatorValues.get(i);\n+            if (i > 0) {\n+                constraintBuilder.append(\" || \");\n+            }\n+            constraintBuilder.append(String.format(VALUE_PATTERN, kiePMMLOperatorValue.getOperator(), kiePMMLOperatorValue.getValue()));\n+        }\n+        existsBuilder.pattern(patternType).constraint(constraintBuilder.toString());\n+    }\n+\n+    protected void declareConstraintIn(final String patternType, final List<Object> values) {\n+        String constraints = getInNotInConstraint(values);\n+        builder.pattern(patternType).constraint(constraints);\n+    }\n+\n+    protected void declareConstraintNotIn(final String patternType, final List<Object> values) {\n+        String constraints = getInNotInConstraint(values);\n+        builder.not().pattern(patternType).constraint(constraints);\n+    }\n+\n+    protected void declareIfBreak(String ifBreakField, String ifBreakOperator, Object ifBreakValue) {\n+        builder.pattern(ifBreakField).id(INPUT_FIELD, false);\n+        final ConditionalBranchDescrBuilder<CEDescrBuilder<RuleDescrBuilder, AndDescr>> condBranchBuilder = builder.conditionalBranch();\n+        condBranchBuilder.condition().constraint(String.format(INPUT_FIELD_CONDITIONAL, ifBreakOperator, ifBreakValue));\n+        condBranchBuilder.consequence().breaking(true).name(BREAK_LABEL);\n+    }\n+\n+    protected String getInNotInConstraint(final List<Object> values) {\n+        StringBuilder constraintBuilder = new StringBuilder();\n+        constraintBuilder.append(\"(\");\n+        for (int i = 0; i < values.size(); i++) {\n+            Object value = values.get(i);\n+            if (i > 0) {\n+                constraintBuilder.append(\", \");", "originalCommit": "67abeb019d33ee7886aaab07352c80da1d3402fd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjgzMzM1OA==", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r402833358", "bodyText": "to be removed", "author": "lucamolteni", "createdAt": "2020-04-03T08:31:59Z", "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drooled/src/main/java/org/kie/pmml/models/drooled/executor/DrooledModelExecutor.java", "diffHunk": "@@ -0,0 +1,142 @@\n+package org.kie.pmml.models.drooled.executor;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.drools.compiler.lang.DrlDumper;\n+import org.drools.modelcompiler.ExecutableModelProject;\n+import org.kie.api.KieServices;\n+import org.kie.api.definition.type.FactType;\n+import org.kie.api.event.rule.AfterMatchFiredEvent;\n+import org.kie.api.event.rule.AgendaEventListener;\n+import org.kie.api.event.rule.AgendaGroupPoppedEvent;\n+import org.kie.api.event.rule.AgendaGroupPushedEvent;\n+import org.kie.api.event.rule.BeforeMatchFiredEvent;\n+import org.kie.api.event.rule.MatchCancelledEvent;\n+import org.kie.api.event.rule.MatchCreatedEvent;\n+import org.kie.api.event.rule.RuleFlowGroupActivatedEvent;\n+import org.kie.api.event.rule.RuleFlowGroupDeactivatedEvent;\n+import org.kie.api.pmml.PMML4Result;\n+import org.kie.api.runtime.KieSession;\n+import org.kie.internal.utils.KieHelper;\n+import org.kie.pmml.commons.enums.StatusCode;\n+import org.kie.pmml.commons.model.KiePMMLDrooledModel;\n+import org.kie.pmml.commons.model.KiePMMLModel;\n+import org.kie.pmml.evaluator.api.exceptions.KiePMMLModelException;\n+import org.kie.pmml.evaluator.api.executor.PMMLContext;\n+import org.kie.pmml.evaluator.core.executor.PMMLModelExecutor;\n+import org.kie.pmml.models.drooled.tuples.KiePMMLOriginalTypeGeneratedType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.kie.pmml.evaluator.core.utils.Converter.getUnwrappedParametersMap;\n+\n+public abstract class DrooledModelExecutor implements PMMLModelExecutor {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(DrooledModelExecutor.class.getName());\n+\n+    private final KieServices kieServices;\n+\n+    public DrooledModelExecutor() {\n+        this.kieServices = KieServices.Factory.get();\n+    }\n+\n+    @Override\n+    public PMML4Result evaluate(KiePMMLModel model, PMMLContext pmmlContext, String releaseId) {\n+        if (!(model instanceof KiePMMLDrooledModel)) {\n+            throw new KiePMMLModelException(\"Expected a KiePMMLDrooledModel, received a \" + model.getClass().getName());\n+        }\n+        final KiePMMLDrooledModel drooledModel = (KiePMMLDrooledModel) model;\n+        // TODO {gcardosi} Dev debug only - to be removed", "originalCommit": "67abeb019d33ee7886aaab07352c80da1d3402fd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjgzNDgxMg==", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r402834812", "bodyText": "commmented code", "author": "lucamolteni", "createdAt": "2020-04-03T08:33:41Z", "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-tree/kie-pmml-models-tree-compiler/src/main/java/org/kie/pmml/models/tree/compiler/factories/KiePMMLTreeModelNodeASTFactory.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.models.tree.compiler.factories;\n+\n+import java.util.LinkedList;\n+import java.util.Map;\n+import java.util.Queue;\n+\n+import org.dmg.pmml.False;\n+import org.dmg.pmml.Predicate;\n+import org.dmg.pmml.True;\n+import org.dmg.pmml.tree.LeafNode;\n+import org.dmg.pmml.tree.Node;\n+import org.dmg.pmml.tree.TreeModel;\n+import org.kie.pmml.models.drooled.ast.KiePMMLDrooledRule;\n+import org.kie.pmml.models.drooled.tuples.KiePMMLOriginalTypeGeneratedType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.kie.pmml.models.tree.compiler.factories.KiePMMLTreeModelASTFactory.PATH_PATTERN;\n+\n+/**\n+ * Class used to generate <code>KiePMMLDrooledRule</code>s out of a <code>Node</code>\n+ */\n+public class KiePMMLTreeModelNodeASTFactory {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(KiePMMLTreeModelNodeASTFactory.class.getName());\n+\n+    private final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap;\n+    private final TreeModel.NoTrueChildStrategy noTrueChildStrategy;\n+\n+    private KiePMMLTreeModelNodeASTFactory(final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap, final TreeModel.NoTrueChildStrategy noTrueChildStrategy) {\n+        this.fieldTypeMap = fieldTypeMap;\n+        this.noTrueChildStrategy = noTrueChildStrategy;\n+    }\n+\n+    public static KiePMMLTreeModelNodeASTFactory factory(final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap, final TreeModel.NoTrueChildStrategy noTrueChildStrategy) {\n+        return new KiePMMLTreeModelNodeASTFactory(fieldTypeMap, noTrueChildStrategy);\n+    }\n+\n+    public Queue<KiePMMLDrooledRule> declareRulesFromRootNode(final Node node, final String parentPath) {\n+        logger.debug(\"declareRulesFromRootNode {} {}\", node, parentPath);\n+        Queue<KiePMMLDrooledRule> toReturn = new LinkedList<>();\n+        declareRuleFromNode(node, parentPath, toReturn);\n+        return toReturn;\n+    }\n+\n+    protected void declareRuleFromNode(final Node node, final String parentPath,\n+                                       final Queue<KiePMMLDrooledRule> rules) {\n+        logger.debug(\"declareRuleFromNode {} {}\", node, parentPath);\n+        if (isFinalLeaf(node)) {\n+            declareFinalRuleFromNode(node, parentPath, rules);\n+        } else {\n+            declareIntermediateRuleFromNode(node, parentPath, rules);\n+            if (TreeModel.NoTrueChildStrategy.RETURN_LAST_PREDICTION.equals(noTrueChildStrategy) && node.getScore() != null) {\n+                declareDefaultRuleFromNode(node, parentPath, rules);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * This method is meant to be executed when <code>node</code> <b>is</b> a <i>final leaf</i>\n+     * @param node\n+     * @param parentPath\n+     * @param rules\n+     */\n+    protected void declareFinalRuleFromNode(final Node node,\n+                                            final String parentPath,\n+                                            final Queue<KiePMMLDrooledRule> rules) {\n+        logger.debug(\"declareFinalRuleFromNode {} {}\", node, parentPath);\n+        final Predicate predicate = node.getPredicate();\n+        // This means the rule should not be created at all.\n+        // Different semantics has to be implemented if the \"False\"/\"True\" predicates are declared inside\n+        // an XOR compound predicate\n+        if (predicate instanceof False) {\n+            return;\n+        }\n+        String currentRule = String.format(PATH_PATTERN, parentPath, node.getScore().toString());\n+        if (!(predicate instanceof True)) {\n+            KiePMMLTreeModelPredicateASTFactory.factory(fieldTypeMap, rules).declareRuleFromPredicate(predicate, parentPath, currentRule, node.getScore(), true);\n+        }\n+    }\n+\n+    /**\n+     * This method is meant to be executed when <code>node</code> <b>is not</b> a <i>final leaf</i>\n+     * @param node\n+     * @param parentPath\n+     * @param rules\n+     */\n+    protected void declareIntermediateRuleFromNode(final Node node,\n+                                                   final String parentPath,\n+                                                   final Queue<KiePMMLDrooledRule> rules) {\n+        logger.debug(\"declareIntermediateRuleFromNode {} {}\", node, parentPath);\n+        final Predicate predicate = node.getPredicate();\n+        // This means the rule should not be created at all.\n+        // Different semantics has to be implemented if the \"False\"/\"True\" predicates are declared inside\n+        // an XOR compound predicate\n+        if (predicate instanceof False) {\n+            return;\n+        }\n+        String currentRule = String.format(PATH_PATTERN, parentPath, node.getScore().toString());\n+//        if (predicate instanceof True) {", "originalCommit": "67abeb019d33ee7886aaab07352c80da1d3402fd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "f0307cffe1f1d754a1d2801d9440753db1226001", "url": "https://github.com/kiegroup/drools/commit/f0307cffe1f1d754a1d2801d9440753db1226001", "message": "[DROOLS-5144] Removed StringBuilder. Fixing correct type format for values and returns", "committedDate": "2020-04-03T10:08:56Z", "type": "commit"}, {"oid": "0ec235b9a6aece62ee56648af1fae4d385c91c72", "url": "https://github.com/kiegroup/drools/commit/0ec235b9a6aece62ee56648af1fae4d385c91c72", "message": "Merge remote-tracking branch 'origin/master' into DROOLS-5144", "committedDate": "2020-04-03T10:09:33Z", "type": "commit"}, {"oid": "adb0d6d059c6c9649a09b2759754c8a03f83ce6a", "url": "https://github.com/kiegroup/drools/commit/adb0d6d059c6c9649a09b2759754c8a03f83ce6a", "message": "[DROOLS-5144] Integration tests running (without OutputField). Begin implementation of OutputFields", "committedDate": "2020-04-07T09:45:35Z", "type": "commit"}, {"oid": "3ded427987962bdba36f530da6d0596bdf2b454a", "url": "https://github.com/kiegroup/drools/commit/3ded427987962bdba36f530da6d0596bdf2b454a", "message": "Merge remote-tracking branch 'origin/master' into DROOLS-5144", "committedDate": "2020-04-07T09:45:56Z", "type": "commit"}, {"oid": "ea9ae1c00723d5782490531ec2511b54eb453dfd", "url": "https://github.com/kiegroup/drools/commit/ea9ae1c00723d5782490531ec2511b54eb453dfd", "message": "[DROOLS-5144] Integration tests running withOutputField. Implemented OutputField (currently only predictedValue managed)", "committedDate": "2020-04-07T10:02:22Z", "type": "commit"}, {"oid": "59a2d3d6ff4494404da5fb2910d9704172ecdf06", "url": "https://github.com/kiegroup/drools/commit/59a2d3d6ff4494404da5fb2910d9704172ecdf06", "message": "[DROOLS-5144] Add \"Release.md\" file", "committedDate": "2020-04-07T10:05:16Z", "type": "commit"}, {"oid": "3d50e76fbb1875df7d8a481c8f0ab41e33584dc5", "url": "https://github.com/kiegroup/drools/commit/3d50e76fbb1875df7d8a481c8f0ab41e33584dc5", "message": "[DROOLS-5144] Fixed unit tests", "committedDate": "2020-04-07T13:55:50Z", "type": "commit"}, {"oid": "de5a31c194635e49c17aaa9fb69411a44f8b8415", "url": "https://github.com/kiegroup/drools/commit/de5a31c194635e49c17aaa9fb69411a44f8b8415", "message": "[DROOLS-5144] Minor cleanup", "committedDate": "2020-04-07T14:00:57Z", "type": "commit"}, {"oid": "cc5e7b8c8fe36b6034b545daef66a0a0cfc0505b", "url": "https://github.com/kiegroup/drools/commit/cc5e7b8c8fe36b6034b545daef66a0a0cfc0505b", "message": "[DROOLS-5144] Fix as per Sonar suggestion", "committedDate": "2020-04-07T14:05:57Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQwNjk2OQ==", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r401406969", "bodyText": "Can you add a small javadoc for each status to describe when it is used? It is not clear to me DONE vs OK/FAIL", "author": "danielezonca", "createdAt": "2020-04-01T07:26:05Z", "path": "kie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/enums/StatusCode.java", "diffHunk": "@@ -21,6 +21,7 @@\n import org.kie.pmml.commons.exceptions.KieEnumException;\n \n public enum StatusCode {\n+    DONE(\"DONE\"),", "originalCommit": "ab2b1e0150f02e53c9b36ab9a95e09a3ab2e7249", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY0MjkxOA==", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r405642918", "bodyText": "Done", "author": "gitgabrio", "createdAt": "2020-04-08T16:10:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQwNjk2OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQxMTQyMw==", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r401411423", "bodyText": "Is it possible to keep track of the fact that we are using default value for this parameter (a status field in ParameterInfo or something similar)?", "author": "danielezonca", "createdAt": "2020-04-01T07:34:59Z", "path": "kie-pmml-new/kie-pmml-evaluator/kie-pmml-evaluator-core/src/main/java/org/kie/pmml/evaluator/core/service/PMMLRuntimeImpl.java", "diffHunk": "@@ -71,10 +74,33 @@ public PMMLRuntimeImpl(KieBase knowledgeBase, PMMLModelExecutorFinderImpl pmmlMo\n     @Override\n     public PMML4Result evaluate(KiePMMLModel model, PMMLContext context, String releaseId) {\n         logger.debug(\"evaluate {} {}\", model, context);\n+        addMissingValuesReplacements(model, context);\n         Optional<PMMLModelExecutor> pmmlModelExecutor = getFromPMMLModelType(model.getPmmlMODEL());\n         return pmmlModelExecutor.isPresent() ? pmmlModelExecutor.get().evaluate(model, context, releaseId) : new PMML4Result();\n     }\n \n+    /**\n+     * Add missing input values if defined in original PMML as <b>missingValueReplacement</b>.\n+     * <p>\n+     * \"missingValueReplacement: If this attribute is specified then a missing input value is automatically replaced by the given value.\n+     * That is, the model itself works as if the given value was found in the original input. \"\n+     * @param model\n+     * @param context\n+     * @see <a href=\"http://dmg.org/pmml/v4-4/MiningSchema.html#xsdType_MISSING-VALUE-TREATMENT-METHOD\">MISSING-VALUE-TREATMENT-METHOD</a>\n+     */\n+    protected void addMissingValuesReplacements(KiePMMLModel model, PMMLContext context) {\n+        logger.debug(\"addMissingValuesReplacements {} {}\", model, context);\n+        final PMMLRequestData requestData = context.getRequestData();\n+        final Map<String, ParameterInfo> mappedRequestParams = requestData.getMappedRequestParams();\n+        final Map<String, Object> missingValueReplacementMap = model.getMissingValueReplacementMap();\n+        missingValueReplacementMap.forEach((fieldName, missingValueReplacement) -> {\n+            if (!mappedRequestParams.containsKey(fieldName)) {\n+                logger.debug(\"missingValueReplacement {} {}\", fieldName, missingValueReplacement);\n+                requestData.addRequestParam(fieldName, missingValueReplacement);", "originalCommit": "ab2b1e0150f02e53c9b36ab9a95e09a3ab2e7249", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY0Mjk1MQ==", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r405642951", "bodyText": "Done", "author": "gitgabrio", "createdAt": "2020-04-08T16:10:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQxMTQyMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQxMjM3OA==", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r401412378", "bodyText": "What does Drooled mean?", "author": "danielezonca", "createdAt": "2020-04-01T07:36:44Z", "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drooled/pom.xml", "diffHunk": "@@ -0,0 +1,56 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <parent>\n+    <groupId>org.kie</groupId>\n+    <artifactId>kie-pmml-models</artifactId>\n+    <version>7.36.0-SNAPSHOT</version>\n+  </parent>\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <artifactId>kie-pmml-models-drooled</artifactId>\n+\n+  <name>KIE :: PMML :: Models :: Drooled</name>", "originalCommit": "ab2b1e0150f02e53c9b36ab9a95e09a3ab2e7249", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjA5MDY1OA==", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r406090658", "bodyText": "Add description. Replaced with Drools", "author": "gitgabrio", "createdAt": "2020-04-09T09:54:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQxMjM3OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQ5ODM5Ng==", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r405498396", "bodyText": "Can you explain this method? Why are you returning the first element? It is deterministic only because getTargetFieldsTypeMap use a LinkedHasMap that should be an implementation detail (maybe we can use a SortedMap to make it evident?)", "author": "danielezonca", "createdAt": "2020-04-08T12:49:49Z", "path": "kie-pmml-new/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/utils/ModelUtils.java", "diffHunk": "@@ -44,10 +47,14 @@ private ModelUtils() {\n      * @param model\n      * @return\n      */\n-    public static Optional<String> getTargetField(DataDictionary dataDictionary, Model model) {\n+    public static Optional<String> getTargetFieldName(DataDictionary dataDictionary, Model model) {\n         return getTargetFields(dataDictionary, model).stream().map(KiePMMLNameOpType::getName).findFirst();\n     }\n \n+    public static DATA_TYPE getTargetFieldType(DataDictionary dataDictionary, Model model) {\n+        return getTargetFieldsTypeMap(dataDictionary, model).entrySet().iterator().next().getValue();", "originalCommit": "cc5e7b8c8fe36b6034b545daef66a0a0cfc0505b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY0MzAyMA==", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r405643020", "bodyText": "DONE", "author": "gitgabrio", "createdAt": "2020-04-08T16:11:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQ5ODM5Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTUyOTI1Ng==", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r405529256", "bodyText": "Javadoc?", "author": "danielezonca", "createdAt": "2020-04-08T13:35:06Z", "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drooled/src/main/java/org/kie/pmml/models/drooled/ast/KiePMMLDrooledConstraint.java", "diffHunk": "@@ -0,0 +1,20 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.models.drooled.ast;\n+\n+public interface KiePMMLDrooledConstraint {", "originalCommit": "cc5e7b8c8fe36b6034b545daef66a0a0cfc0505b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY0MzA2MQ==", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r405643061", "bodyText": "Removed", "author": "gitgabrio", "createdAt": "2020-04-08T16:11:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTUyOTI1Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTUyOTQ1NQ==", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r405529455", "bodyText": "Why Queue?", "author": "danielezonca", "createdAt": "2020-04-08T13:35:24Z", "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drooled/src/main/java/org/kie/pmml/models/drooled/ast/KiePMMLDrooledAST.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.models.drooled.ast;\n+\n+import java.util.Queue;\n+\n+public class KiePMMLDrooledAST {\n+\n+    private final Queue<KiePMMLDrooledType> types;\n+    private final Queue<KiePMMLDrooledRule> rules;", "originalCommit": "cc5e7b8c8fe36b6034b545daef66a0a0cfc0505b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjA3MjkwMQ==", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r406072901", "bodyText": "REplaced with List", "author": "gitgabrio", "createdAt": "2020-04-09T09:23:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTUyOTQ1NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTUzMTM3NQ==", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r405531375", "bodyText": "Can you please add a javadoc?\nIt is \"drools-agnostic\" so maybe we can remove Drools from the name?", "author": "danielezonca", "createdAt": "2020-04-08T13:38:13Z", "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drooled/src/main/java/org/kie/pmml/models/drooled/ast/KiePMMLDrooledRule.java", "diffHunk": "@@ -0,0 +1,306 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.models.drooled.ast;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.kie.pmml.commons.enums.StatusCode;\n+import org.kie.pmml.commons.model.KiePMMLOutputField;\n+\n+public class KiePMMLDrooledRule {", "originalCommit": "cc5e7b8c8fe36b6034b545daef66a0a0cfc0505b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjA3MzAyNg==", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r406073026", "bodyText": "DONE", "author": "gitgabrio", "createdAt": "2020-04-09T09:23:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTUzMTM3NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTUzMTY4MQ==", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r405531681", "bodyText": "Javadoc?", "author": "danielezonca", "createdAt": "2020-04-08T13:38:36Z", "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drooled/src/main/java/org/kie/pmml/models/drooled/ast/KiePMMLDrooledTarget.java", "diffHunk": "@@ -0,0 +1,20 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.models.drooled.ast;\n+\n+public interface KiePMMLDrooledTarget extends KiePMMLDrooledConstraint {", "originalCommit": "cc5e7b8c8fe36b6034b545daef66a0a0cfc0505b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY0MzE0Mg==", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r405643142", "bodyText": "Removed", "author": "gitgabrio", "createdAt": "2020-04-08T16:11:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTUzMTY4MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTUzMjYzNQ==", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r405532635", "bodyText": "Javadoc?\nDo you use this?", "author": "danielezonca", "createdAt": "2020-04-08T13:39:57Z", "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drooled/src/main/java/org/kie/pmml/models/drooled/ast/KiePMMLDrooledTypeField.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.models.drooled.ast;\n+\n+import java.util.Objects;\n+\n+public class KiePMMLDrooledTypeField {", "originalCommit": "cc5e7b8c8fe36b6034b545daef66a0a0cfc0505b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY0MzE5Nw==", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r405643197", "bodyText": "Removed", "author": "gitgabrio", "createdAt": "2020-04-08T16:11:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTUzMjYzNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTUzMzIxNQ==", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r405533215", "bodyText": "To be removed/refactored", "author": "danielezonca", "createdAt": "2020-04-08T13:40:48Z", "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drooled/src/main/java/org/kie/pmml/models/drooled/executor/DrooledModelExecutor.java", "diffHunk": "@@ -0,0 +1,140 @@\n+package org.kie.pmml.models.drooled.executor;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.drools.compiler.lang.DrlDumper;\n+import org.drools.modelcompiler.ExecutableModelProject;\n+import org.kie.api.definition.type.FactType;\n+import org.kie.api.event.rule.AfterMatchFiredEvent;\n+import org.kie.api.event.rule.AgendaEventListener;\n+import org.kie.api.event.rule.AgendaGroupPoppedEvent;\n+import org.kie.api.event.rule.AgendaGroupPushedEvent;\n+import org.kie.api.event.rule.BeforeMatchFiredEvent;\n+import org.kie.api.event.rule.MatchCancelledEvent;\n+import org.kie.api.event.rule.MatchCreatedEvent;\n+import org.kie.api.event.rule.RuleFlowGroupActivatedEvent;\n+import org.kie.api.event.rule.RuleFlowGroupDeactivatedEvent;\n+import org.kie.api.pmml.PMML4Result;\n+import org.kie.api.runtime.KieSession;\n+import org.kie.internal.utils.KieHelper;\n+import org.kie.pmml.commons.enums.StatusCode;\n+import org.kie.pmml.commons.exceptions.KieEnumException;\n+import org.kie.pmml.commons.model.KiePMMLDrooledModel;\n+import org.kie.pmml.commons.model.KiePMMLModel;\n+import org.kie.pmml.evaluator.api.exceptions.KiePMMLModelException;\n+import org.kie.pmml.evaluator.api.executor.PMMLContext;\n+import org.kie.pmml.evaluator.core.executor.PMMLModelExecutor;\n+import org.kie.pmml.models.drooled.tuples.KiePMMLOriginalTypeGeneratedType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.kie.pmml.evaluator.core.utils.Converter.getUnwrappedParametersMap;\n+\n+public abstract class DrooledModelExecutor implements PMMLModelExecutor {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(DrooledModelExecutor.class.getName());\n+\n+    @Override\n+    public PMML4Result evaluate(KiePMMLModel model, PMMLContext pmmlContext, String releaseId) {\n+        if (!(model instanceof KiePMMLDrooledModel)) {\n+            throw new KiePMMLModelException(\"Expected a KiePMMLDrooledModel, received a \" + model.getClass().getName());\n+        }\n+        final KiePMMLDrooledModel drooledModel = (KiePMMLDrooledModel) model;\n+        printGeneratedRules(drooledModel);", "originalCommit": "cc5e7b8c8fe36b6034b545daef66a0a0cfc0505b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY0MzI0NA==", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r405643244", "bodyText": "Removed", "author": "gitgabrio", "createdAt": "2020-04-08T16:11:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTUzMzIxNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTUzNDA1NQ==", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r405534055", "bodyText": "Can you please move it to a static final field?", "author": "danielezonca", "createdAt": "2020-04-08T13:42:02Z", "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drooled/src/main/java/org/kie/pmml/models/drooled/executor/DrooledModelExecutor.java", "diffHunk": "@@ -0,0 +1,140 @@\n+package org.kie.pmml.models.drooled.executor;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.drools.compiler.lang.DrlDumper;\n+import org.drools.modelcompiler.ExecutableModelProject;\n+import org.kie.api.definition.type.FactType;\n+import org.kie.api.event.rule.AfterMatchFiredEvent;\n+import org.kie.api.event.rule.AgendaEventListener;\n+import org.kie.api.event.rule.AgendaGroupPoppedEvent;\n+import org.kie.api.event.rule.AgendaGroupPushedEvent;\n+import org.kie.api.event.rule.BeforeMatchFiredEvent;\n+import org.kie.api.event.rule.MatchCancelledEvent;\n+import org.kie.api.event.rule.MatchCreatedEvent;\n+import org.kie.api.event.rule.RuleFlowGroupActivatedEvent;\n+import org.kie.api.event.rule.RuleFlowGroupDeactivatedEvent;\n+import org.kie.api.pmml.PMML4Result;\n+import org.kie.api.runtime.KieSession;\n+import org.kie.internal.utils.KieHelper;\n+import org.kie.pmml.commons.enums.StatusCode;\n+import org.kie.pmml.commons.exceptions.KieEnumException;\n+import org.kie.pmml.commons.model.KiePMMLDrooledModel;\n+import org.kie.pmml.commons.model.KiePMMLModel;\n+import org.kie.pmml.evaluator.api.exceptions.KiePMMLModelException;\n+import org.kie.pmml.evaluator.api.executor.PMMLContext;\n+import org.kie.pmml.evaluator.core.executor.PMMLModelExecutor;\n+import org.kie.pmml.models.drooled.tuples.KiePMMLOriginalTypeGeneratedType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.kie.pmml.evaluator.core.utils.Converter.getUnwrappedParametersMap;\n+\n+public abstract class DrooledModelExecutor implements PMMLModelExecutor {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(DrooledModelExecutor.class.getName());\n+\n+    @Override\n+    public PMML4Result evaluate(KiePMMLModel model, PMMLContext pmmlContext, String releaseId) {\n+        if (!(model instanceof KiePMMLDrooledModel)) {\n+            throw new KiePMMLModelException(\"Expected a KiePMMLDrooledModel, received a \" + model.getClass().getName());\n+        }\n+        final KiePMMLDrooledModel drooledModel = (KiePMMLDrooledModel) model;\n+        printGeneratedRules(drooledModel);\n+        KieSession kSession = new KieHelper()\n+                .addContent(drooledModel.getPackageDescr())\n+                .build(ExecutableModelProject.class)\n+                .newKieSession();\n+        final Map<String, Object> unwrappedInputParams = getUnwrappedParametersMap(pmmlContext.getRequestData().getMappedRequestParams());\n+        List<Object> executionParams = new ArrayList<>();\n+        KiePMMLStatusHolder statusHolder = new KiePMMLStatusHolder();\n+        executionParams.add(statusHolder);\n+        PMML4Result toReturn = new PMML4Result();\n+        toReturn.setResultCode(StatusCode.FAIL.getName());\n+        toReturn.setResultObjectName(drooledModel.getTargetField());\n+        executionParams.add(toReturn);\n+        final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap = drooledModel.getFieldTypeMap();\n+        for (Map.Entry<String, Object> entry : unwrappedInputParams.entrySet()) {\n+            if (!fieldTypeMap.containsKey(entry.getKey())) {\n+                throw new KiePMMLModelException(String.format(\"Field %s not mapped to generated type\", entry.getKey()));\n+            }\n+            try {\n+                String generatedTypeName = fieldTypeMap.get(entry.getKey()).getGeneratedType();\n+                FactType factType = kSession.getKieBase().getFactType(drooledModel.getPackageDescr().getName(), generatedTypeName);\n+                Object toAdd = factType.newInstance();\n+                factType.set(toAdd, \"value\", entry.getValue());\n+                executionParams.add(toAdd);\n+            } catch (Exception e) {\n+                throw new KiePMMLModelException(e.getMessage(), e);\n+            }\n+        }\n+        executionParams.forEach(kSession::insert);\n+        setupExecutionListener(kSession);\n+        kSession.setGlobal(\"$pmml4Result\", toReturn);\n+        kSession.fireAllRules();\n+        return toReturn;\n+    }\n+\n+    private void printGeneratedRules(KiePMMLDrooledModel drooledModel) {\n+        if (logger.isDebugEnabled()) {\n+            try {\n+                String string = new DrlDumper().dump(drooledModel.getPackageDescr());\n+                logger.debug(string);\n+            } catch (Exception e) {\n+                throw new KieEnumException(\"Failed to dump \" + drooledModel, e);\n+            }\n+        }\n+    }\n+\n+    private void setupExecutionListener(final KieSession kSession) {\n+        final AgendaEventListener agendaEventListener = new AgendaEventListener() {", "originalCommit": "cc5e7b8c8fe36b6034b545daef66a0a0cfc0505b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjA3NjE1OA==", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r406076158", "bodyText": "DONE", "author": "gitgabrio", "createdAt": "2020-04-09T09:28:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTUzNDA1NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTUzNjMwMg==", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r405536302", "bodyText": "It is not used", "author": "danielezonca", "createdAt": "2020-04-08T13:45:09Z", "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drooled/src/main/java/org/kie/pmml/models/drooled/provider/DrooledModelProvider.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.models.drooled.provider;\n+\n+import org.dmg.pmml.DataDictionary;\n+import org.dmg.pmml.Model;\n+import org.drools.compiler.builder.impl.KnowledgeBuilderImpl;\n+import org.kie.api.KieServices;\n+import org.kie.internal.builder.KnowledgeBuilder;\n+import org.kie.pmml.commons.exceptions.KiePMMLException;\n+import org.kie.pmml.commons.model.KiePMMLDrooledModel;\n+import org.kie.pmml.compiler.api.provider.ModelImplementationProvider;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Abstract <code>ModelImplementationProvider</code> for <b>KiePMMLDrooledModel</b>s\n+ */\n+public abstract class DrooledModelProvider<T extends Model, E extends KiePMMLDrooledModel> implements ModelImplementationProvider<T, E> {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(DrooledModelProvider.class.getName());\n+\n+    protected final KieServices kieServices;", "originalCommit": "cc5e7b8c8fe36b6034b545daef66a0a0cfc0505b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY0MzI5NQ==", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r405643295", "bodyText": "Removed", "author": "gitgabrio", "createdAt": "2020-04-08T16:11:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTUzNjMwMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU0MDE5MA==", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r405540190", "bodyText": "Can you please review Object kBuilder? Is it really needed?", "author": "danielezonca", "createdAt": "2020-04-08T13:50:28Z", "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drooled/src/main/java/org/kie/pmml/models/drooled/provider/DrooledModelProvider.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.models.drooled.provider;\n+\n+import org.dmg.pmml.DataDictionary;\n+import org.dmg.pmml.Model;\n+import org.drools.compiler.builder.impl.KnowledgeBuilderImpl;\n+import org.kie.api.KieServices;\n+import org.kie.internal.builder.KnowledgeBuilder;\n+import org.kie.pmml.commons.exceptions.KiePMMLException;\n+import org.kie.pmml.commons.model.KiePMMLDrooledModel;\n+import org.kie.pmml.compiler.api.provider.ModelImplementationProvider;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Abstract <code>ModelImplementationProvider</code> for <b>KiePMMLDrooledModel</b>s\n+ */\n+public abstract class DrooledModelProvider<T extends Model, E extends KiePMMLDrooledModel> implements ModelImplementationProvider<T, E> {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(DrooledModelProvider.class.getName());\n+\n+    protected final KieServices kieServices;\n+\n+    protected DrooledModelProvider() {\n+        this.kieServices = KieServices.Factory.get();\n+    }\n+\n+    @Override\n+    public E getKiePMMLModel(DataDictionary dataDictionary, T model, Object kBuilder) {", "originalCommit": "cc5e7b8c8fe36b6034b545daef66a0a0cfc0505b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjA4OTY2OA==", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r406089668", "bodyText": "@danielezonca\nYes, it is needed by the \"Drools\" implementations.", "author": "gitgabrio", "createdAt": "2020-04-09T09:52:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU0MDE5MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU0Mjk2NQ==", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r405542965", "bodyText": "Can you please create a asString() or similar to produce an equivalent method without overload toString with a specific meaning", "author": "danielezonca", "createdAt": "2020-04-08T13:54:06Z", "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drooled/src/main/java/org/kie/pmml/models/drooled/tuples/KiePMMLOperatorValue.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.models.drooled.tuples;\n+\n+import java.util.Objects;\n+\n+/**\n+ * Tupla representing the operator and the value to be applied to a given field\n+ */\n+public class KiePMMLOperatorValue {\n+\n+    public static final String VALUE_CONSTRAINT_PATTERN = \"value %s %s\";\n+    private final String operator;\n+    private final Object value;\n+\n+    public KiePMMLOperatorValue(String operator, Object value) {\n+        this.operator = operator;\n+        this.value = value;\n+    }\n+\n+    public String getOperator() {\n+        return operator;\n+    }\n+\n+    public Object getValue() {\n+        return value;\n+    }\n+\n+    @Override\n+    public String toString() {", "originalCommit": "cc5e7b8c8fe36b6034b545daef66a0a0cfc0505b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjA4OTc0MQ==", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r406089741", "bodyText": "DONE", "author": "gitgabrio", "createdAt": "2020-04-09T09:52:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU0Mjk2NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU0NDUxMQ==", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r405544511", "bodyText": "Please verify that this toString is not used during code generation but only for logging purposes", "author": "danielezonca", "createdAt": "2020-04-08T13:56:08Z", "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drooled/src/main/java/org/kie/pmml/models/drooled/ast/KiePMMLFieldOperatorValue.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.models.drooled.ast;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+import org.kie.pmml.models.drooled.tuples.KiePMMLOperatorValue;\n+\n+/**\n+ * Class representing a <code>Pattern</code> with the referred field, its possible <code>KiePMMLOperatorValue</code>s and, eventually, nested <code>Pattern</code>s\n+ */\n+public class KiePMMLFieldOperatorValue {\n+\n+    public static final String NO_FIELD_CONSTRAINT_PATTERN = \"(%s)\";\n+    public static final String FIELD_CONSTRAINT_PATTERN = \" %s \" + NO_FIELD_CONSTRAINT_PATTERN;\n+    private final String name;\n+    private final String operator;\n+    private final List<KiePMMLOperatorValue> kiePMMLOperatorValues;\n+    private final List<KiePMMLFieldOperatorValue> nestedKiePMMLFieldOperatorValues;\n+    private final String constraintsString;\n+    private final String toString;\n+\n+    /**\n+     * @param name The name of the type\n+     * @param operator the operator to use to join multiple <code>KiePMMLOperatorValue</code>s (if provided)\n+     * @param kiePMMLOperatorValues the inner <code>List&lt;KiePMMLOperatorValue&gt;</code>\n+     * @param nestedKiePMMLFieldOperatorValues the nested <code>List&lt;KiePMMLFieldOperatorValue&gt;</code>s\n+     */\n+    public KiePMMLFieldOperatorValue(final String name, final String operator, final List<KiePMMLOperatorValue> kiePMMLOperatorValues, final List<KiePMMLFieldOperatorValue> nestedKiePMMLFieldOperatorValues) {\n+        this.name = name;\n+        this.operator = operator != null ? operator : \"\";\n+        this.kiePMMLOperatorValues = kiePMMLOperatorValues;\n+        this.nestedKiePMMLFieldOperatorValues = nestedKiePMMLFieldOperatorValues;\n+        constraintsString = buildConstraintsString();\n+        toString = buildToString();\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public String getOperator() {\n+        return operator;\n+    }\n+\n+    public String getConstraintsAsString() {\n+        return constraintsString;\n+    }\n+\n+    public List<KiePMMLFieldOperatorValue> getNestedKiePMMLFieldOperatorValues() {\n+        return nestedKiePMMLFieldOperatorValues != null ? Collections.unmodifiableList(nestedKiePMMLFieldOperatorValues) : null;\n+    }\n+\n+    @Override\n+    public String toString() {", "originalCommit": "cc5e7b8c8fe36b6034b545daef66a0a0cfc0505b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjA4OTk5OQ==", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r406089999", "bodyText": "DONE", "author": "gitgabrio", "createdAt": "2020-04-09T09:53:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU0NDUxMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU0NjY5OQ==", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r405546699", "bodyText": "If it is Drools specific please move to a -drools module", "author": "danielezonca", "createdAt": "2020-04-08T13:59:04Z", "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-tree/kie-pmml-models-tree-compiler/src/main/java/org/kie/pmml/models/tree/compiler/executor/TreeModelImplementationProvider.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.models.tree.compiler.executor;\n+\n+import org.dmg.pmml.DataDictionary;\n+import org.dmg.pmml.tree.TreeModel;\n+import org.kie.pmml.commons.model.enums.PMML_MODEL;\n+import org.kie.pmml.models.drooled.provider.DrooledModelProvider;\n+import org.kie.pmml.models.tree.model.KiePMMLTreeModel;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.kie.pmml.models.tree.compiler.factories.KiePMMLTreeModelFactory.getKiePMMLTreeModel;\n+import static org.kie.pmml.models.tree.model.KiePMMLTreeModel.PMML_MODEL_TYPE;\n+\n+/**\n+ * Default <code>ModelImplementationProvider</code> for <b>Tree</b>\n+ */\n+public class TreeModelImplementationProvider extends DrooledModelProvider<TreeModel, KiePMMLTreeModel> {", "originalCommit": "cc5e7b8c8fe36b6034b545daef66a0a0cfc0505b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjA5MDA0Mw==", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r406090043", "bodyText": "DONE", "author": "gitgabrio", "createdAt": "2020-04-09T09:53:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU0NjY5OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU0NzQ4Ng==", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r405547486", "bodyText": "Please raise an exception like new IllegalStateException(\"This should never happen\")", "author": "danielezonca", "createdAt": "2020-04-08T14:00:06Z", "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-tree/kie-pmml-models-tree-compiler/src/main/java/org/kie/pmml/models/tree/compiler/factories/KiePMMLASTFactoryUtils.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.models.tree.compiler.factories;\n+\n+import java.util.Collections;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.dmg.pmml.CompoundPredicate;\n+import org.dmg.pmml.Predicate;\n+import org.dmg.pmml.SimplePredicate;\n+import org.kie.pmml.commons.exceptions.KiePMMLException;\n+import org.kie.pmml.commons.model.enums.DATA_TYPE;\n+import org.kie.pmml.models.drooled.ast.KiePMMLFieldOperatorValue;\n+import org.kie.pmml.models.drooled.tuples.KiePMMLOperatorValue;\n+import org.kie.pmml.models.drooled.tuples.KiePMMLOriginalTypeGeneratedType;\n+import org.kie.pmml.models.tree.model.enums.BOOLEAN_OPERATOR;\n+import org.kie.pmml.models.tree.model.enums.OPERATOR;\n+\n+import static java.util.stream.Collectors.groupingBy;\n+import static org.kie.pmml.commons.utils.DrooledModelUtils.getCorrectlyFormattedResult;\n+\n+public class KiePMMLASTFactoryUtils {\n+\n+    private KiePMMLASTFactoryUtils() {\n+        // not instatiate\n+    }\n+\n+    public static List<KiePMMLFieldOperatorValue> getConstraintEntriesFromAndOrCompoundPredicate(final CompoundPredicate compoundPredicate, final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap) {\n+        // Managing only SimplePredicates for the moment being\n+        final List<Predicate> simplePredicates = compoundPredicate.getPredicates().stream().filter(predicate -> predicate instanceof SimplePredicate).collect(Collectors.toList());\n+        if (!CompoundPredicate.BooleanOperator.AND.equals(compoundPredicate.getBooleanOperator()) &&\n+                !CompoundPredicate.BooleanOperator.OR.equals((compoundPredicate.getBooleanOperator()))) {\n+            throw new KiePMMLException(\"getConstraintEntriesFromAndOrCompoundPredicate invoked with a \" + compoundPredicate.getBooleanOperator() + \" CompoundPredicate\");\n+        }\n+        final Map<String, List<SimplePredicate>> predicatesByField = simplePredicates.stream()\n+                .map(child -> (SimplePredicate) child)\n+                .collect(groupingBy(child -> fieldTypeMap.get(child.getField().getValue()).getGeneratedType()));\n+        final List<KiePMMLFieldOperatorValue> toReturn = new LinkedList<>();\n+        switch (compoundPredicate.getBooleanOperator()) {\n+            case AND:\n+                predicatesByField.forEach((fieldName, predicates) -> toReturn.add(getConstraintEntryFromSimplePredicates(fieldName, \"&&\", predicates, fieldTypeMap)));\n+                break;\n+            case OR:\n+                predicatesByField.forEach((fieldName, predicates) -> toReturn.add(getConstraintEntryFromSimplePredicates(fieldName, \"||\", predicates, fieldTypeMap)));\n+                break;\n+            default:\n+                break;", "originalCommit": "cc5e7b8c8fe36b6034b545daef66a0a0cfc0505b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY0MzQyMA==", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r405643420", "bodyText": "Done", "author": "gitgabrio", "createdAt": "2020-04-08T16:11:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU0NzQ4Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU0ODY2NA==", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r405548664", "bodyText": "Same as above", "author": "danielezonca", "createdAt": "2020-04-08T14:01:41Z", "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-tree/kie-pmml-models-tree-compiler/src/main/java/org/kie/pmml/models/tree/compiler/factories/KiePMMLASTFactoryUtils.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.models.tree.compiler.factories;\n+\n+import java.util.Collections;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.dmg.pmml.CompoundPredicate;\n+import org.dmg.pmml.Predicate;\n+import org.dmg.pmml.SimplePredicate;\n+import org.kie.pmml.commons.exceptions.KiePMMLException;\n+import org.kie.pmml.commons.model.enums.DATA_TYPE;\n+import org.kie.pmml.models.drooled.ast.KiePMMLFieldOperatorValue;\n+import org.kie.pmml.models.drooled.tuples.KiePMMLOperatorValue;\n+import org.kie.pmml.models.drooled.tuples.KiePMMLOriginalTypeGeneratedType;\n+import org.kie.pmml.models.tree.model.enums.BOOLEAN_OPERATOR;\n+import org.kie.pmml.models.tree.model.enums.OPERATOR;\n+\n+import static java.util.stream.Collectors.groupingBy;\n+import static org.kie.pmml.commons.utils.DrooledModelUtils.getCorrectlyFormattedResult;\n+\n+public class KiePMMLASTFactoryUtils {\n+\n+    private KiePMMLASTFactoryUtils() {\n+        // not instatiate\n+    }\n+\n+    public static List<KiePMMLFieldOperatorValue> getConstraintEntriesFromAndOrCompoundPredicate(final CompoundPredicate compoundPredicate, final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap) {\n+        // Managing only SimplePredicates for the moment being\n+        final List<Predicate> simplePredicates = compoundPredicate.getPredicates().stream().filter(predicate -> predicate instanceof SimplePredicate).collect(Collectors.toList());\n+        if (!CompoundPredicate.BooleanOperator.AND.equals(compoundPredicate.getBooleanOperator()) &&\n+                !CompoundPredicate.BooleanOperator.OR.equals((compoundPredicate.getBooleanOperator()))) {\n+            throw new KiePMMLException(\"getConstraintEntriesFromAndOrCompoundPredicate invoked with a \" + compoundPredicate.getBooleanOperator() + \" CompoundPredicate\");\n+        }\n+        final Map<String, List<SimplePredicate>> predicatesByField = simplePredicates.stream()\n+                .map(child -> (SimplePredicate) child)\n+                .collect(groupingBy(child -> fieldTypeMap.get(child.getField().getValue()).getGeneratedType()));\n+        final List<KiePMMLFieldOperatorValue> toReturn = new LinkedList<>();\n+        switch (compoundPredicate.getBooleanOperator()) {\n+            case AND:\n+                predicatesByField.forEach((fieldName, predicates) -> toReturn.add(getConstraintEntryFromSimplePredicates(fieldName, \"&&\", predicates, fieldTypeMap)));\n+                break;\n+            case OR:\n+                predicatesByField.forEach((fieldName, predicates) -> toReturn.add(getConstraintEntryFromSimplePredicates(fieldName, \"||\", predicates, fieldTypeMap)));\n+                break;\n+            default:\n+                break;\n+        }\n+        final List<KiePMMLFieldOperatorValue> nestedPredicates = new LinkedList<>();\n+        final List<Predicate> compoundPredicates = compoundPredicate.getPredicates().stream().filter(predicate -> predicate instanceof CompoundPredicate).collect(Collectors.toList());\n+        compoundPredicates.forEach(nestedCompoundPredicate -> {\n+            switch (((CompoundPredicate) nestedCompoundPredicate).getBooleanOperator()) {\n+                case OR:\n+                case AND:\n+                    nestedPredicates.addAll(getConstraintEntriesFromAndOrCompoundPredicate((CompoundPredicate) nestedCompoundPredicate, fieldTypeMap));\n+                    break;\n+                case XOR:\n+                    nestedPredicates.addAll(getConstraintEntriesFromXOrCompoundPredicate((CompoundPredicate) nestedCompoundPredicate, fieldTypeMap));\n+                    break;\n+                default:\n+                    // noop", "originalCommit": "cc5e7b8c8fe36b6034b545daef66a0a0cfc0505b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY0MzQ3OQ==", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r405643479", "bodyText": "Done", "author": "gitgabrio", "createdAt": "2020-04-08T16:11:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU0ODY2NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU0OTg1Mg==", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r405549852", "bodyText": "It is not possible to reach this code (look at the if at the beginning of the method), can you please review?", "author": "danielezonca", "createdAt": "2020-04-08T14:03:19Z", "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-tree/kie-pmml-models-tree-compiler/src/main/java/org/kie/pmml/models/tree/compiler/factories/KiePMMLASTFactoryUtils.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.models.tree.compiler.factories;\n+\n+import java.util.Collections;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.dmg.pmml.CompoundPredicate;\n+import org.dmg.pmml.Predicate;\n+import org.dmg.pmml.SimplePredicate;\n+import org.kie.pmml.commons.exceptions.KiePMMLException;\n+import org.kie.pmml.commons.model.enums.DATA_TYPE;\n+import org.kie.pmml.models.drooled.ast.KiePMMLFieldOperatorValue;\n+import org.kie.pmml.models.drooled.tuples.KiePMMLOperatorValue;\n+import org.kie.pmml.models.drooled.tuples.KiePMMLOriginalTypeGeneratedType;\n+import org.kie.pmml.models.tree.model.enums.BOOLEAN_OPERATOR;\n+import org.kie.pmml.models.tree.model.enums.OPERATOR;\n+\n+import static java.util.stream.Collectors.groupingBy;\n+import static org.kie.pmml.commons.utils.DrooledModelUtils.getCorrectlyFormattedResult;\n+\n+public class KiePMMLASTFactoryUtils {\n+\n+    private KiePMMLASTFactoryUtils() {\n+        // not instatiate\n+    }\n+\n+    public static List<KiePMMLFieldOperatorValue> getConstraintEntriesFromAndOrCompoundPredicate(final CompoundPredicate compoundPredicate, final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap) {\n+        // Managing only SimplePredicates for the moment being\n+        final List<Predicate> simplePredicates = compoundPredicate.getPredicates().stream().filter(predicate -> predicate instanceof SimplePredicate).collect(Collectors.toList());\n+        if (!CompoundPredicate.BooleanOperator.AND.equals(compoundPredicate.getBooleanOperator()) &&\n+                !CompoundPredicate.BooleanOperator.OR.equals((compoundPredicate.getBooleanOperator()))) {\n+            throw new KiePMMLException(\"getConstraintEntriesFromAndOrCompoundPredicate invoked with a \" + compoundPredicate.getBooleanOperator() + \" CompoundPredicate\");\n+        }\n+        final Map<String, List<SimplePredicate>> predicatesByField = simplePredicates.stream()\n+                .map(child -> (SimplePredicate) child)\n+                .collect(groupingBy(child -> fieldTypeMap.get(child.getField().getValue()).getGeneratedType()));\n+        final List<KiePMMLFieldOperatorValue> toReturn = new LinkedList<>();\n+        switch (compoundPredicate.getBooleanOperator()) {\n+            case AND:\n+                predicatesByField.forEach((fieldName, predicates) -> toReturn.add(getConstraintEntryFromSimplePredicates(fieldName, \"&&\", predicates, fieldTypeMap)));\n+                break;\n+            case OR:\n+                predicatesByField.forEach((fieldName, predicates) -> toReturn.add(getConstraintEntryFromSimplePredicates(fieldName, \"||\", predicates, fieldTypeMap)));\n+                break;\n+            default:\n+                break;\n+        }\n+        final List<KiePMMLFieldOperatorValue> nestedPredicates = new LinkedList<>();\n+        final List<Predicate> compoundPredicates = compoundPredicate.getPredicates().stream().filter(predicate -> predicate instanceof CompoundPredicate).collect(Collectors.toList());\n+        compoundPredicates.forEach(nestedCompoundPredicate -> {\n+            switch (((CompoundPredicate) nestedCompoundPredicate).getBooleanOperator()) {\n+                case OR:\n+                case AND:\n+                    nestedPredicates.addAll(getConstraintEntriesFromAndOrCompoundPredicate((CompoundPredicate) nestedCompoundPredicate, fieldTypeMap));\n+                    break;\n+                case XOR:", "originalCommit": "cc5e7b8c8fe36b6034b545daef66a0a0cfc0505b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY0MzU1OQ==", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r405643559", "bodyText": "DONE", "author": "gitgabrio", "createdAt": "2020-04-08T16:11:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU0OTg1Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU1MTExNw==", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r405551117", "bodyText": "Why Queue?", "author": "danielezonca", "createdAt": "2020-04-08T14:05:04Z", "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-tree/kie-pmml-models-tree-compiler/src/main/java/org/kie/pmml/models/tree/compiler/factories/KiePMMLTreeModeAbstractPredicateASTFactory.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.models.tree.compiler.factories;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Queue;\n+\n+import org.kie.pmml.commons.model.KiePMMLOutputField;\n+import org.kie.pmml.models.drooled.ast.KiePMMLDrooledRule;\n+import org.kie.pmml.models.drooled.tuples.KiePMMLOriginalTypeGeneratedType;\n+\n+/**\n+ * Abstract class to be extended to generate <code>KiePMMLDrooledRule</code>s out of a <code>Predicate</code>s\n+ */\n+public class KiePMMLTreeModeAbstractPredicateASTFactory {\n+\n+    protected final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap;\n+    protected final List<KiePMMLOutputField> outputFields;\n+    protected final Queue<KiePMMLDrooledRule> rules;", "originalCommit": "cc5e7b8c8fe36b6034b545daef66a0a0cfc0505b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjA3MjQ3NA==", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r406072474", "bodyText": "Replaced with List", "author": "gitgabrio", "createdAt": "2020-04-09T09:22:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU1MTExNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU1MTgxNQ==", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r405551815", "bodyText": "What if Surrogate?", "author": "danielezonca", "createdAt": "2020-04-08T14:06:08Z", "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-tree/kie-pmml-models-tree-compiler/src/main/java/org/kie/pmml/models/tree/compiler/factories/KiePMMLTreeModelCompoundPredicateASTFactory.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.models.tree.compiler.factories;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Queue;\n+import java.util.stream.Collectors;\n+\n+import org.dmg.pmml.CompoundPredicate;\n+import org.dmg.pmml.Predicate;\n+import org.dmg.pmml.SimplePredicate;\n+import org.drools.core.util.StringUtils;\n+import org.kie.pmml.commons.enums.StatusCode;\n+import org.kie.pmml.commons.model.KiePMMLOutputField;\n+import org.kie.pmml.models.drooled.ast.KiePMMLDrooledRule;\n+import org.kie.pmml.models.drooled.ast.KiePMMLFieldOperatorValue;\n+import org.kie.pmml.models.drooled.tuples.KiePMMLOriginalTypeGeneratedType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.kie.pmml.models.tree.compiler.factories.KiePMMLASTFactoryUtils.getConstraintEntriesFromAndOrCompoundPredicate;\n+import static org.kie.pmml.models.tree.compiler.factories.KiePMMLASTFactoryUtils.getConstraintEntriesFromXOrCompoundPredicate;\n+import static org.kie.pmml.models.tree.compiler.factories.KiePMMLTreeModelASTFactory.STATUS_NULL;\n+import static org.kie.pmml.models.tree.compiler.factories.KiePMMLTreeModelASTFactory.STATUS_PATTERN;\n+import static org.kie.pmml.models.tree.compiler.factories.KiePMMLTreeModelASTFactory.SURROGATE_GROUP_PATTERN;\n+\n+/**\n+ * Class used to generate <code>KiePMMLDrooledRule</code>s out of a <code>CompoundPredicate</code>\n+ */\n+public class KiePMMLTreeModelCompoundPredicateASTFactory extends KiePMMLTreeModeAbstractPredicateASTFactory {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(KiePMMLTreeModelCompoundPredicateASTFactory.class.getName());\n+    private final CompoundPredicate compoundPredicate;\n+\n+    private KiePMMLTreeModelCompoundPredicateASTFactory(final CompoundPredicate compoundPredicate, final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap, final List<KiePMMLOutputField> outputFields, final Queue<KiePMMLDrooledRule> rules) {\n+        super(fieldTypeMap, outputFields, rules);\n+        this.compoundPredicate = compoundPredicate;\n+    }\n+\n+    public static KiePMMLTreeModelCompoundPredicateASTFactory factory(final CompoundPredicate compoundPredicate, final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap, final List<KiePMMLOutputField> outputFields, final Queue<KiePMMLDrooledRule> rules) {\n+        return new KiePMMLTreeModelCompoundPredicateASTFactory(compoundPredicate, fieldTypeMap, outputFields, rules);\n+    }\n+\n+    public void declareRuleFromCompoundPredicate(final String parentPath,\n+                                                 final String currentRule,\n+                                                 final Object result,\n+                                                 boolean isFinalLeaf) {\n+        logger.debug(\"declareIntermediateRuleFromCompoundPredicate {} {} {} {}\", compoundPredicate, parentPath, currentRule, result);\n+        switch (compoundPredicate.getBooleanOperator()) {\n+            case SURROGATE:\n+                declareRuleFromCompoundPredicateSurrogate(parentPath, currentRule, result, isFinalLeaf);\n+                break;\n+            case AND:\n+                declareRuleFromCompoundPredicateAndOrXor(parentPath, currentRule, result, isFinalLeaf);\n+                break;\n+            case OR:\n+                declareRuleFromCompoundPredicateAndOrXor(parentPath, currentRule, result, isFinalLeaf);\n+                break;\n+            case XOR:\n+                declareRuleFromCompoundPredicateAndOrXor(parentPath, currentRule, result, isFinalLeaf);\n+                break;\n+        }\n+    }\n+\n+    public void declareRuleFromCompoundPredicateAndOrXor(final String parentPath,\n+                                                         final String currentRule,\n+                                                         final Object result,\n+                                                         boolean isFinalLeaf) {\n+        logger.debug(\"declareIntermediateRuleFromCompoundPredicateAndOrXor {} {} {}\", compoundPredicate, parentPath, currentRule);\n+        String statusConstraint = StringUtils.isEmpty(parentPath) ? STATUS_NULL : String.format(STATUS_PATTERN, parentPath);\n+        List<KiePMMLFieldOperatorValue> constraints;\n+        String statusToSet = isFinalLeaf ? StatusCode.DONE.getName() : currentRule;\n+        KiePMMLDrooledRule.Builder builder = KiePMMLDrooledRule.builder(currentRule, statusToSet, outputFields)\n+                .withStatusConstraint(statusConstraint);\n+        switch (compoundPredicate.getBooleanOperator()) {\n+            case AND:\n+                constraints = getConstraintEntriesFromAndOrCompoundPredicate(compoundPredicate, fieldTypeMap);\n+                builder = builder.withAndConstraints(constraints);\n+                break;\n+            case OR:\n+                constraints = getConstraintEntriesFromAndOrCompoundPredicate(compoundPredicate, fieldTypeMap);\n+                builder = builder.withOrConstraints(constraints);\n+                break;\n+            case XOR:\n+                constraints = getConstraintEntriesFromXOrCompoundPredicate(compoundPredicate, fieldTypeMap);\n+                builder = builder.withXorConstraints(constraints);\n+                break;\n+            default:\n+                break;", "originalCommit": "cc5e7b8c8fe36b6034b545daef66a0a0cfc0505b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY0MzU5OQ==", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r405643599", "bodyText": "DONE", "author": "gitgabrio", "createdAt": "2020-04-08T16:11:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU1MTgxNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU1MjE4Ng==", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r405552186", "bodyText": "Can you please add a default case too?", "author": "danielezonca", "createdAt": "2020-04-08T14:06:40Z", "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-tree/kie-pmml-models-tree-compiler/src/main/java/org/kie/pmml/models/tree/compiler/factories/KiePMMLTreeModelCompoundPredicateASTFactory.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.models.tree.compiler.factories;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Queue;\n+import java.util.stream.Collectors;\n+\n+import org.dmg.pmml.CompoundPredicate;\n+import org.dmg.pmml.Predicate;\n+import org.dmg.pmml.SimplePredicate;\n+import org.drools.core.util.StringUtils;\n+import org.kie.pmml.commons.enums.StatusCode;\n+import org.kie.pmml.commons.model.KiePMMLOutputField;\n+import org.kie.pmml.models.drooled.ast.KiePMMLDrooledRule;\n+import org.kie.pmml.models.drooled.ast.KiePMMLFieldOperatorValue;\n+import org.kie.pmml.models.drooled.tuples.KiePMMLOriginalTypeGeneratedType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.kie.pmml.models.tree.compiler.factories.KiePMMLASTFactoryUtils.getConstraintEntriesFromAndOrCompoundPredicate;\n+import static org.kie.pmml.models.tree.compiler.factories.KiePMMLASTFactoryUtils.getConstraintEntriesFromXOrCompoundPredicate;\n+import static org.kie.pmml.models.tree.compiler.factories.KiePMMLTreeModelASTFactory.STATUS_NULL;\n+import static org.kie.pmml.models.tree.compiler.factories.KiePMMLTreeModelASTFactory.STATUS_PATTERN;\n+import static org.kie.pmml.models.tree.compiler.factories.KiePMMLTreeModelASTFactory.SURROGATE_GROUP_PATTERN;\n+\n+/**\n+ * Class used to generate <code>KiePMMLDrooledRule</code>s out of a <code>CompoundPredicate</code>\n+ */\n+public class KiePMMLTreeModelCompoundPredicateASTFactory extends KiePMMLTreeModeAbstractPredicateASTFactory {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(KiePMMLTreeModelCompoundPredicateASTFactory.class.getName());\n+    private final CompoundPredicate compoundPredicate;\n+\n+    private KiePMMLTreeModelCompoundPredicateASTFactory(final CompoundPredicate compoundPredicate, final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap, final List<KiePMMLOutputField> outputFields, final Queue<KiePMMLDrooledRule> rules) {\n+        super(fieldTypeMap, outputFields, rules);\n+        this.compoundPredicate = compoundPredicate;\n+    }\n+\n+    public static KiePMMLTreeModelCompoundPredicateASTFactory factory(final CompoundPredicate compoundPredicate, final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap, final List<KiePMMLOutputField> outputFields, final Queue<KiePMMLDrooledRule> rules) {\n+        return new KiePMMLTreeModelCompoundPredicateASTFactory(compoundPredicate, fieldTypeMap, outputFields, rules);\n+    }\n+\n+    public void declareRuleFromCompoundPredicate(final String parentPath,\n+                                                 final String currentRule,\n+                                                 final Object result,\n+                                                 boolean isFinalLeaf) {\n+        logger.debug(\"declareIntermediateRuleFromCompoundPredicate {} {} {} {}\", compoundPredicate, parentPath, currentRule, result);\n+        switch (compoundPredicate.getBooleanOperator()) {\n+            case SURROGATE:\n+                declareRuleFromCompoundPredicateSurrogate(parentPath, currentRule, result, isFinalLeaf);\n+                break;\n+            case AND:\n+                declareRuleFromCompoundPredicateAndOrXor(parentPath, currentRule, result, isFinalLeaf);\n+                break;\n+            case OR:\n+                declareRuleFromCompoundPredicateAndOrXor(parentPath, currentRule, result, isFinalLeaf);\n+                break;\n+            case XOR:\n+                declareRuleFromCompoundPredicateAndOrXor(parentPath, currentRule, result, isFinalLeaf);\n+                break;", "originalCommit": "cc5e7b8c8fe36b6034b545daef66a0a0cfc0505b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY0MzYyOA==", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r405643628", "bodyText": "DONE", "author": "gitgabrio", "createdAt": "2020-04-08T16:11:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU1MjE4Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU1MzA4Mg==", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r405553082", "bodyText": "Can you please move this class inside a -drools module?", "author": "danielezonca", "createdAt": "2020-04-08T14:07:55Z", "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-tree/kie-pmml-models-tree-evaluator/src/main/java/org/kie/pmml/models/tree/evaluator/PMMLTreeModelEvaluator.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.models.tree.evaluator;\n+\n+import org.kie.pmml.commons.model.enums.PMML_MODEL;\n+import org.kie.pmml.models.drooled.executor.DrooledModelExecutor;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Default <code>PMMLModelExecutor</code> for <b>Tree</b>\n+ */\n+public class PMMLTreeModelEvaluator extends DrooledModelExecutor {", "originalCommit": "cc5e7b8c8fe36b6034b545daef66a0a0cfc0505b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjA3MjU4Mg==", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r406072582", "bodyText": "DONE", "author": "gitgabrio", "createdAt": "2020-04-09T09:23:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU1MzA4Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU1MzQ1NQ==", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r405553455", "bodyText": "Can you please move to a -drools module?", "author": "danielezonca", "createdAt": "2020-04-08T14:08:26Z", "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-tree/kie-pmml-models-tree-model/src/main/java/org/kie/pmml/models/tree/model/KiePMMLTreeModel.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.pmml.models.tree.model;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.kie.pmml.commons.model.KiePMMLDrooledModel;\n+import org.kie.pmml.commons.model.KiePMMLExtension;\n+import org.kie.pmml.commons.model.enums.MINING_FUNCTION;\n+import org.kie.pmml.commons.model.enums.PMML_MODEL;\n+\n+public class KiePMMLTreeModel extends KiePMMLDrooledModel {", "originalCommit": "cc5e7b8c8fe36b6034b545daef66a0a0cfc0505b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjA3MjY0NQ==", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r406072645", "bodyText": "DONE", "author": "gitgabrio", "createdAt": "2020-04-09T09:23:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU1MzQ1NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU1NDg1NQ==", "url": "https://github.com/kiegroup/drools/pull/2836#discussion_r405554855", "bodyText": "@mariofusco\nCan you please double check this block? Is it the proper way to load them?\nNOTE: we will need to review them for Kogito", "author": "danielezonca", "createdAt": "2020-04-08T14:10:22Z", "path": "kie-pmml-new/kie-pmml-models/kie-pmml-models-drooled/src/main/java/org/kie/pmml/models/drooled/executor/DrooledModelExecutor.java", "diffHunk": "@@ -0,0 +1,140 @@\n+package org.kie.pmml.models.drooled.executor;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.drools.compiler.lang.DrlDumper;\n+import org.drools.modelcompiler.ExecutableModelProject;\n+import org.kie.api.definition.type.FactType;\n+import org.kie.api.event.rule.AfterMatchFiredEvent;\n+import org.kie.api.event.rule.AgendaEventListener;\n+import org.kie.api.event.rule.AgendaGroupPoppedEvent;\n+import org.kie.api.event.rule.AgendaGroupPushedEvent;\n+import org.kie.api.event.rule.BeforeMatchFiredEvent;\n+import org.kie.api.event.rule.MatchCancelledEvent;\n+import org.kie.api.event.rule.MatchCreatedEvent;\n+import org.kie.api.event.rule.RuleFlowGroupActivatedEvent;\n+import org.kie.api.event.rule.RuleFlowGroupDeactivatedEvent;\n+import org.kie.api.pmml.PMML4Result;\n+import org.kie.api.runtime.KieSession;\n+import org.kie.internal.utils.KieHelper;\n+import org.kie.pmml.commons.enums.StatusCode;\n+import org.kie.pmml.commons.exceptions.KieEnumException;\n+import org.kie.pmml.commons.model.KiePMMLDrooledModel;\n+import org.kie.pmml.commons.model.KiePMMLModel;\n+import org.kie.pmml.evaluator.api.exceptions.KiePMMLModelException;\n+import org.kie.pmml.evaluator.api.executor.PMMLContext;\n+import org.kie.pmml.evaluator.core.executor.PMMLModelExecutor;\n+import org.kie.pmml.models.drooled.tuples.KiePMMLOriginalTypeGeneratedType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.kie.pmml.evaluator.core.utils.Converter.getUnwrappedParametersMap;\n+\n+public abstract class DrooledModelExecutor implements PMMLModelExecutor {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(DrooledModelExecutor.class.getName());\n+\n+    @Override\n+    public PMML4Result evaluate(KiePMMLModel model, PMMLContext pmmlContext, String releaseId) {\n+        if (!(model instanceof KiePMMLDrooledModel)) {\n+            throw new KiePMMLModelException(\"Expected a KiePMMLDrooledModel, received a \" + model.getClass().getName());\n+        }\n+        final KiePMMLDrooledModel drooledModel = (KiePMMLDrooledModel) model;\n+        printGeneratedRules(drooledModel);\n+        KieSession kSession = new KieHelper()\n+                .addContent(drooledModel.getPackageDescr())\n+                .build(ExecutableModelProject.class)\n+                .newKieSession();", "originalCommit": "cc5e7b8c8fe36b6034b545daef66a0a0cfc0505b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "03c588ca5fd1bdeab815e6a7da73a366a70bf151", "url": "https://github.com/kiegroup/drools/commit/03c588ca5fd1bdeab815e6a7da73a366a70bf151", "message": "[DROOLS-5144] Refactored StatusCode to ResultCode. Moved \"DONE\" as String constant. Fixed som Sonar complains", "committedDate": "2020-04-08T15:08:31Z", "type": "commit"}, {"oid": "3dbecf3b9d9c2d30d888f65394e910923b10079c", "url": "https://github.com/kiegroup/drools/commit/3dbecf3b9d9c2d30d888f65394e910923b10079c", "message": "[DROOLS-4933] Scheleton implementation.", "committedDate": "2020-01-14T16:45:26Z", "type": "commit"}, {"oid": "d8d48091b32f272146d9a2957987371b22f1c659", "url": "https://github.com/kiegroup/drools/commit/d8d48091b32f272146d9a2957987371b22f1c659", "message": "[DROOLS-4933] Add UMLs", "committedDate": "2020-01-14T17:01:05Z", "type": "commit"}, {"oid": "925f1987f140893cb1322e539256872f2ccbeecd", "url": "https://github.com/kiegroup/drools/commit/925f1987f140893cb1322e539256872f2ccbeecd", "message": "Merge remote-tracking branch 'origin/master' into DROOLS-4933", "committedDate": "2020-01-15T12:03:01Z", "type": "commit"}, {"oid": "d1e0adbc1c2b8b2a96f208342cb2e7c4c571f311", "url": "https://github.com/kiegroup/drools/commit/d1e0adbc1c2b8b2a96f208342cb2e7c4c571f311", "message": "[DROOLS-4933] Refactor module layout to include KiePMMLRuntime implementation", "committedDate": "2020-01-16T13:02:50Z", "type": "commit"}, {"oid": "f3433fe23e6e8c8f5c56ed87aba9b31fc7fdb8c4", "url": "https://github.com/kiegroup/drools/commit/f3433fe23e6e8c8f5c56ed87aba9b31fc7fdb8c4", "message": "[DROOLS-4933] Refactoring", "committedDate": "2020-01-16T16:27:04Z", "type": "commit"}, {"oid": "a2e2db3f85353573027fef94ceb58c672fbb072e", "url": "https://github.com/kiegroup/drools/commit/a2e2db3f85353573027fef94ceb58c672fbb072e", "message": "[DROOLS_4933] Begin Regression model runtime implementation", "committedDate": "2020-01-21T13:20:08Z", "type": "commit"}, {"oid": "406f5aa611d29288414e56990b02cc1511fa922b", "url": "https://github.com/kiegroup/drools/commit/406f5aa611d29288414e56990b02cc1511fa922b", "message": "Merge remote-tracking branch 'origin/master' into DROOLS-4933", "committedDate": "2020-01-21T13:22:02Z", "type": "commit"}, {"oid": "acf3a796d5f83b2d0ba3c9301defc8b03d83d3ab", "url": "https://github.com/kiegroup/drools/commit/acf3a796d5f83b2d0ba3c9301defc8b03d83d3ab", "message": "[DROOLS-4933] Implemented regression model test", "committedDate": "2020-01-21T15:23:19Z", "type": "commit"}, {"oid": "46a55aeea38f0cff3394726e9d2a69fd27f29de3", "url": "https://github.com/kiegroup/drools/commit/46a55aeea38f0cff3394726e9d2a69fd27f29de3", "message": "[DROOLS-4933] Add models", "committedDate": "2020-01-21T15:28:35Z", "type": "commit"}, {"oid": "4804ecb09fa750cd3f9d55cd4862b31dc181e102", "url": "https://github.com/kiegroup/drools/commit/4804ecb09fa750cd3f9d55cd4862b31dc181e102", "message": "[DROOLS-4933] Add PMML compiler test", "committedDate": "2020-01-21T16:17:38Z", "type": "commit"}, {"oid": "f728a0545a1d660d4dcde290305e4c637b2302cd", "url": "https://github.com/kiegroup/drools/commit/f728a0545a1d660d4dcde290305e4c637b2302cd", "message": "[DROOLS-4933] Implemented compiler and assembler, with tests", "committedDate": "2020-01-22T18:28:39Z", "type": "commit"}, {"oid": "a6a17446ea7262bd11cde18697e67a7bc92a1213", "url": "https://github.com/kiegroup/drools/commit/a6a17446ea7262bd11cde18697e67a7bc92a1213", "message": "[DROOLS-4933] Switched version. Moved ResourceHelper to kie-test-util package", "committedDate": "2020-01-23T10:12:27Z", "type": "commit"}, {"oid": "7c1e01ec7a306f3d0253d261eca41867e86399c5", "url": "https://github.com/kiegroup/drools/commit/7c1e01ec7a306f3d0253d261eca41867e86399c5", "message": "Merge remote-tracking branch 'origin/master' into DROOLS-4933", "committedDate": "2020-01-23T10:30:10Z", "type": "commit"}, {"oid": "212bfb68a5ad7db74ad36f0c1387a967f40cff57", "url": "https://github.com/kiegroup/drools/commit/212bfb68a5ad7db74ad36f0c1387a967f40cff57", "message": "[DROOLS-4933] Implemented integration test module. Full roundtrip test for linear regression", "committedDate": "2020-01-23T12:24:20Z", "type": "commit"}, {"oid": "5e53facd07bdeef8aeef9e181e8db381b71568ff", "url": "https://github.com/kiegroup/drools/commit/5e53facd07bdeef8aeef9e181e8db381b71568ff", "message": "[DROOLS-4933] Implementing full roundtrip test with full kie integration - test not working", "committedDate": "2020-01-23T15:16:34Z", "type": "commit"}, {"oid": "c052f3939c806f06ba9da81d8a458306fdf821d1", "url": "https://github.com/kiegroup/drools/commit/c052f3939c806f06ba9da81d8a458306fdf821d1", "message": "[DROOLS-4933] Implementing PMMLWeaverService. Fixing integration test setup", "committedDate": "2020-01-23T17:59:13Z", "type": "commit"}, {"oid": "85c248d9f9bb20102002da13b80f30ae2c349280", "url": "https://github.com/kiegroup/drools/commit/85c248d9f9bb20102002da13b80f30ae2c349280", "message": "[DROOLS-4933] Begin implementation of drools-based Tree model", "committedDate": "2020-01-24T09:50:45Z", "type": "commit"}, {"oid": "daec25864ebfb41a5d5b24fb767a5f34018bf57a", "url": "https://github.com/kiegroup/drools/commit/daec25864ebfb41a5d5b24fb767a5f34018bf57a", "message": "[DROOLS-4933] Fixing old KieBaseTest", "committedDate": "2020-01-24T09:56:54Z", "type": "commit"}, {"oid": "414dfb3bf8436958e7ad9d2a6450cef56bd66267", "url": "https://github.com/kiegroup/drools/commit/414dfb3bf8436958e7ad9d2a6450cef56bd66267", "message": "[DROOLS-4933] Begin implementation of Tree model with tests", "committedDate": "2020-01-24T16:00:23Z", "type": "commit"}, {"oid": "4b55f05acc849c76130d70bc796fe1a395e103f4", "url": "https://github.com/kiegroup/drools/commit/4b55f05acc849c76130d70bc796fe1a395e103f4", "message": "[DROOLS-4933] Keep going with implementation of Tree model and tests", "committedDate": "2020-01-27T08:12:46Z", "type": "commit"}, {"oid": "2ea39606d4becc5dc01226cab8412f598490a1d0", "url": "https://github.com/kiegroup/drools/commit/2ea39606d4becc5dc01226cab8412f598490a1d0", "message": "Merge remote-tracking branch 'origin/master' into DROOLS-4933", "committedDate": "2020-01-27T08:13:07Z", "type": "commit"}, {"oid": "cbb1d77ac080712959f51271a356ebad6063b390", "url": "https://github.com/kiegroup/drools/commit/cbb1d77ac080712959f51271a356ebad6063b390", "message": "[DROOLS-4933] Renaming previous implementation to kie-pmml-legacy. Updating dependant modules to reflect that", "committedDate": "2020-01-27T15:58:41Z", "type": "commit"}, {"oid": "7e22de0c5d1b6dd260f93be2839f5254794a87ff", "url": "https://github.com/kiegroup/drools/commit/7e22de0c5d1b6dd260f93be2839f5254794a87ff", "message": "[DROOLS-4933] Fixing linear regression roundtrip test. Implementing finder", "committedDate": "2020-01-27T15:59:49Z", "type": "commit"}, {"oid": "a0cf0f5916cbc9c730d9d23e43fe6d313fd97f9e", "url": "https://github.com/kiegroup/drools/commit/a0cf0f5916cbc9c730d9d23e43fe6d313fd97f9e", "message": "[DROOLS-4933] Commenting execution logic from Tree model. Begin model test implementation", "committedDate": "2020-01-28T09:25:11Z", "type": "commit"}, {"oid": "6c42ce09ac28ed51ad9e6060f980685de7d06c42", "url": "https://github.com/kiegroup/drools/commit/6c42ce09ac28ed51ad9e6060f980685de7d06c42", "message": "Merge remote-tracking branch 'origin/master' into DROOLS-4933", "committedDate": "2020-01-28T09:25:18Z", "type": "commit"}, {"oid": "e483c8c449cac316f8310afe45b8ba7f31f503c2", "url": "https://github.com/kiegroup/drools/commit/e483c8c449cac316f8310afe45b8ba7f31f503c2", "message": "[DROOLS-4933] Done TreeModelImplementationProviderTest stub. Add True/False predicates.", "committedDate": "2020-01-28T10:55:43Z", "type": "commit"}, {"oid": "98bca0adc201a3fdb1ffdc38a89b31c207fe749a", "url": "https://github.com/kiegroup/drools/commit/98bca0adc201a3fdb1ffdc38a89b31c207fe749a", "message": "[DROOLS-4933] First TreeModel (drools) iteration done with empty rule", "committedDate": "2020-01-28T13:50:07Z", "type": "commit"}, {"oid": "d59116f44ded7f430ed3597ff3fa718271aa8a5a", "url": "https://github.com/kiegroup/drools/commit/d59116f44ded7f430ed3597ff3fa718271aa8a5a", "message": "[DROOLS-4933] TreeModel (drools) iteration done with golfing model example test", "committedDate": "2020-01-30T12:29:19Z", "type": "commit"}, {"oid": "a193a6dba6f6207164f8dc83bdda8b40f0a0a50b", "url": "https://github.com/kiegroup/drools/commit/a193a6dba6f6207164f8dc83bdda8b40f0a0a50b", "message": "[DROOLS-4933] Refactored builders. Begin MiningModel implementation", "committedDate": "2020-01-30T16:35:26Z", "type": "commit"}, {"oid": "19ff28abb0f692680a866b94fe2452e9e9b8b836", "url": "https://github.com/kiegroup/drools/commit/19ff28abb0f692680a866b94fe2452e9e9b8b836", "message": "[DROOLS-4933] Keep working on MiningModel implementation", "committedDate": "2020-01-31T07:36:23Z", "type": "commit"}, {"oid": "c85bd66afb70ce59af3ae6c55800dd1b55389b84", "url": "https://github.com/kiegroup/drools/commit/c85bd66afb70ce59af3ae6c55800dd1b55389b84", "message": "Merge remote-tracking branch 'origin/master' into DROOLS-4933", "committedDate": "2020-01-31T07:36:56Z", "type": "commit"}, {"oid": "8971e0cd3aac211c0b36bb00f37f229a60cbaed1", "url": "https://github.com/kiegroup/drools/commit/8971e0cd3aac211c0b36bb00f37f229a60cbaed1", "message": "[DROOLS-4933] Begin kie-pmml-mining model", "committedDate": "2020-01-31T09:03:12Z", "type": "commit"}, {"oid": "921b348434bd8348345973588725c623cc2f4173", "url": "https://github.com/kiegroup/drools/commit/921b348434bd8348345973588725c623cc2f4173", "message": "[DROOLS-4933] Cleanup poms", "committedDate": "2020-01-31T09:47:17Z", "type": "commit"}, {"oid": "713668504dd2fb49b9d52db00a34ea926765b21e", "url": "https://github.com/kiegroup/drools/commit/713668504dd2fb49b9d52db00a34ea926765b21e", "message": "[DROOLS-4933] Created pmml-models archetype", "committedDate": "2020-01-31T14:39:19Z", "type": "commit"}, {"oid": "edeeedbc693b49984609d0a178434c641b546d54", "url": "https://github.com/kiegroup/drools/commit/edeeedbc693b49984609d0a178434c641b546d54", "message": "[DROOLS-4933] Created pmml-model-mining", "committedDate": "2020-01-31T14:40:17Z", "type": "commit"}, {"oid": "459f819de6be5cf254c40942bf016eb5dfce5d4e", "url": "https://github.com/kiegroup/drools/commit/459f819de6be5cf254c40942bf016eb5dfce5d4e", "message": "[DROOLS-4933] Refactoring", "committedDate": "2020-01-31T14:52:40Z", "type": "commit"}, {"oid": "4c47c3f367473464803ed1d568c5067763442c8a", "url": "https://github.com/kiegroup/drools/commit/4c47c3f367473464803ed1d568c5067763442c8a", "message": "[DROOLS-4933] Created pmml-runtime archetype", "committedDate": "2020-01-31T15:28:33Z", "type": "commit"}, {"oid": "e3fd656e4750327cfc639ad1e3a531ac01711dc3", "url": "https://github.com/kiegroup/drools/commit/e3fd656e4750327cfc639ad1e3a531ac01711dc3", "message": "[DROOLS-4933] Created pmml-runtime-mining", "committedDate": "2020-01-31T15:29:29Z", "type": "commit"}, {"oid": "50b56a83a99b42615d75c09c8fe80892f34f69f2", "url": "https://github.com/kiegroup/drools/commit/50b56a83a99b42615d75c09c8fe80892f34f69f2", "message": "[DROOLS-4933] Implemented library-commons module", "committedDate": "2020-01-31T17:12:39Z", "type": "commit"}, {"oid": "98f66e40313bee5cf66397060cf0a8255eaa7216", "url": "https://github.com/kiegroup/drools/commit/98f66e40313bee5cf66397060cf0a8255eaa7216", "message": "[DROOLS-4933] Refactored log. Keep working on mining model.", "committedDate": "2020-02-06T09:34:57Z", "type": "commit"}, {"oid": "53c428bb16df9c3fb532619ce6d03b1375fff6c0", "url": "https://github.com/kiegroup/drools/commit/53c428bb16df9c3fb532619ce6d03b1375fff6c0", "message": "Merge remote-tracking branch 'origin/master' into DROOLS-4933", "committedDate": "2020-02-06T09:35:35Z", "type": "commit"}, {"oid": "03a4b4ddb940bf244976035b4e5a81aa490932e3", "url": "https://github.com/kiegroup/drools/commit/03a4b4ddb940bf244976035b4e5a81aa490932e3", "message": "[DROOLS-4933] Fixing archetypes' poms", "committedDate": "2020-02-06T10:03:27Z", "type": "commit"}, {"oid": "0a143a6ffe27414701ded12c9c79b611c1738491", "url": "https://github.com/kiegroup/drools/commit/0a143a6ffe27414701ded12c9c79b611c1738491", "message": "[DROOLS-4933] Add Tree model overall implementation strategy description", "committedDate": "2020-02-06T10:51:08Z", "type": "commit"}, {"oid": "a8187bbf36f4f72c35d48af1cadd94209b4e3704", "url": "https://github.com/kiegroup/drools/commit/a8187bbf36f4f72c35d48af1cadd94209b4e3704", "message": "[DROOLS-4933] Refactored log. Updated implementation.md", "committedDate": "2020-02-06T11:18:27Z", "type": "commit"}, {"oid": "7dfc36e5428b6e36354e60c0898f19b36f9bb9ab", "url": "https://github.com/kiegroup/drools/commit/7dfc36e5428b6e36354e60c0898f19b36f9bb9ab", "message": "[DROOLS-4933] First implmentation of KiePMMLDescrFactory", "committedDate": "2020-02-07T14:00:51Z", "type": "commit"}, {"oid": "0297c3edc6baa0e36efa5e52b3f0f950414c4d2e", "url": "https://github.com/kiegroup/drools/commit/0297c3edc6baa0e36efa5e52b3f0f950414c4d2e", "message": "[DROOLS-4933] Refactoring - reorganizing modules", "committedDate": "2020-02-07T14:42:45Z", "type": "commit"}, {"oid": "d44b449c659787092a93d8f45f4629bb03f9e16c", "url": "https://github.com/kiegroup/drools/commit/d44b449c659787092a93d8f45f4629bb03f9e16c", "message": "[DROOLS-4933] Fixed refactoring - Tree runtime broken", "committedDate": "2020-02-07T15:10:25Z", "type": "commit"}, {"oid": "a20e82e3baa8e74ff854ad163beeed608399d4ae", "url": "https://github.com/kiegroup/drools/commit/a20e82e3baa8e74ff854ad163beeed608399d4ae", "message": "[DROOLS-4933] Keep refactoring - moved models", "committedDate": "2020-02-07T15:59:02Z", "type": "commit"}, {"oid": "6cb5f0e6bd51bd89f1a86b7d927f556d4ffd6a48", "url": "https://github.com/kiegroup/drools/commit/6cb5f0e6bd51bd89f1a86b7d927f556d4ffd6a48", "message": "[DROOLS-4933] Adapting archetype. Not completely working", "committedDate": "2020-02-10T08:43:57Z", "type": "commit"}, {"oid": "ba41cc61bff3b65558d299472952593e4c968dcb", "url": "https://github.com/kiegroup/drools/commit/ba41cc61bff3b65558d299472952593e4c968dcb", "message": "Merge remote-tracking branch 'origin/master' into DROOLS-4933", "committedDate": "2020-02-10T08:44:33Z", "type": "commit"}, {"oid": "afc30bd72eca48f9b574ec70519d96bf6f5e604a", "url": "https://github.com/kiegroup/drools/commit/afc30bd72eca48f9b574ec70519d96bf6f5e604a", "message": "[DROOLS-4933] Renamed kie-pmml to kie-pmml-refactoring", "committedDate": "2020-02-10T17:32:10Z", "type": "commit"}, {"oid": "83bb9948d4d287964841584e03ee6be1ca0fe394", "url": "https://github.com/kiegroup/drools/commit/83bb9948d4d287964841584e03ee6be1ca0fe394", "message": "[DROOLS-4933] Restored kie-pmml-legacy to kie-pmml", "committedDate": "2020-02-10T17:46:48Z", "type": "commit"}, {"oid": "5c5b637d10f0a2249ecc693380e5e8ebe688143a", "url": "https://github.com/kiegroup/drools/commit/5c5b637d10f0a2249ecc693380e5e8ebe688143a", "message": "[DROOLS-4933] Create PMML refactoring skeleton", "committedDate": "2020-02-10T18:09:27Z", "type": "commit"}, {"oid": "67c28bfe7ced36b439175e9eba671aed5c9fb80f", "url": "https://github.com/kiegroup/drools/commit/67c28bfe7ced36b439175e9eba671aed5c9fb80f", "message": "[DROOLS-4933] Add test utility methods. Fixed pom", "committedDate": "2020-02-10T18:15:50Z", "type": "commit"}, {"oid": "6ca8e81b9d20f3aa192e74608c7325efcfc7d314", "url": "https://github.com/kiegroup/drools/commit/6ca8e81b9d20f3aa192e74608c7325efcfc7d314", "message": "[DROOLS-3339] Begin refactoring of regression model with new architecture", "committedDate": "2020-02-10T18:33:01Z", "type": "commit"}, {"oid": "1a8ad88cb113e4a42a00938dbf8856a6c02195c7", "url": "https://github.com/kiegroup/drools/commit/1a8ad88cb113e4a42a00938dbf8856a6c02195c7", "message": "[DROOLS-4933] Add tests to kie-test-util", "committedDate": "2020-02-11T08:56:44Z", "type": "commit"}, {"oid": "1073fc4f1da4d51c1d54b7f003f189699fc62e6d", "url": "https://github.com/kiegroup/drools/commit/1073fc4f1da4d51c1d54b7f003f189699fc62e6d", "message": "[DROOLS-4933] Add assertions to tests inside kie-test-util", "committedDate": "2020-02-11T09:03:08Z", "type": "commit"}, {"oid": "413738cfcbca688f64aa93deca9d5f96d2f4dc0b", "url": "https://github.com/kiegroup/drools/commit/413738cfcbca688f64aa93deca9d5f96d2f4dc0b", "message": "[DROOLS-3339] Begin Regression model implementation", "committedDate": "2020-02-11T09:39:24Z", "type": "commit"}, {"oid": "97726c0778e26fb7815b3ad35fec88ec63ebabfe", "url": "https://github.com/kiegroup/drools/commit/97726c0778e26fb7815b3ad35fec88ec63ebabfe", "message": "[DROOLS-3339] Add tests to IsRegressionModel. Make KiePMMLRegressionModel constructor protected", "committedDate": "2020-02-11T10:02:36Z", "type": "commit"}, {"oid": "47c187638b8be2d807e6d187e7627e20432b4d1a", "url": "https://github.com/kiegroup/drools/commit/47c187638b8be2d807e6d187e7627e20432b4d1a", "message": "[DROOLS-3339] Add some fixes as per sonar suggestion", "committedDate": "2020-02-11T10:20:22Z", "type": "commit"}, {"oid": "2959221c665ee2eda43afaa8b89baf75829f9f8f", "url": "https://github.com/kiegroup/drools/commit/2959221c665ee2eda43afaa8b89baf75829f9f8f", "message": "[DROOLS-4933] Format", "committedDate": "2020-02-12T10:27:46Z", "type": "commit"}, {"oid": "68213c4ef79d639bd3f4c70543a876ba9c69e6e5", "url": "https://github.com/kiegroup/drools/commit/68213c4ef79d639bd3f4c70543a876ba9c69e6e5", "message": "[DROOLS-4933] Moving kie-pmml-api to kie-pmml-commons", "committedDate": "2020-02-12T11:02:17Z", "type": "commit"}, {"oid": "a163b2d51d89d7e02401f198939201edc1123bd7", "url": "https://github.com/kiegroup/drools/commit/a163b2d51d89d7e02401f198939201edc1123bd7", "message": "[DROOLS-4933] Renamed kie-pmml-refactoring to kie-pmml-new", "committedDate": "2020-02-12T11:28:09Z", "type": "commit"}, {"oid": "6ef20f048ff6935f8b928c966440e33d4af8f127", "url": "https://github.com/kiegroup/drools/commit/6ef20f048ff6935f8b928c966440e33d4af8f127", "message": "[WIP] Renamed modules", "committedDate": "2020-02-12T11:44:16Z", "type": "commit"}, {"oid": "35439483900cb2905876ccf0bb1104b4950613f9", "url": "https://github.com/kiegroup/drools/commit/35439483900cb2905876ccf0bb1104b4950613f9", "message": "Merge branch 'DROOLS-4933' into PMML-REF-WIP\n\n# Conflicts:\n#\tkie-pmml-new/kie-pmml-commons/pom.xml\n#\tkie-pmml-new/kie-pmml-commons/src/test/java/org/kie/pmml/api/model/TestUtils.java\n#\tkie-pmml-new/kie-pmml-integration-tests/pom.xml\n#\tkie-pmml-new/kie-pmml-library/kie-pmml-library-api/pom.xml\n#\tkie-pmml-new/kie-pmml-library/kie-pmml-library-api/src/main/java/org/kie/pmml/library/api/implementations/ModelImplementationProvider.java\n#\tkie-pmml-new/kie-pmml-library/kie-pmml-library-api/src/main/java/org/kie/pmml/library/api/implementations/ModelImplementationProviderFinder.java\n#\tkie-pmml-new/kie-pmml-library/kie-pmml-library-api/src/test/java/org/kie/pmml/library/testutils/TestUtils.java\n#\tkie-pmml-new/kie-pmml-library/kie-pmml-library-commons/pom.xml\n#\tkie-pmml-new/kie-pmml-library/kie-pmml-library-commons/src/main/java/org/kie/pmml/library/commons/factories/KiePMMLExtensionFactory.java\n#\tkie-pmml-new/kie-pmml-library/kie-pmml-library-commons/src/main/java/org/kie/pmml/library/commons/factories/KiePMMLFieldRefFactory.java\n#\tkie-pmml-new/kie-pmml-library/kie-pmml-library-commons/src/main/java/org/kie/pmml/library/commons/implementations/KiePMMLModelRetriever.java\n#\tkie-pmml-new/kie-pmml-library/kie-pmml-library-commons/src/main/java/org/kie/pmml/library/commons/implementations/ModelImplementationProviderFinderImpl.java\n#\tkie-pmml-new/kie-pmml-library/kie-pmml-library-commons/src/main/java/org/kie/pmml/library/commons/utils/ModelUtils.java\n#\tkie-pmml-new/kie-pmml-library/kie-pmml-library-compiler/pom.xml\n#\tkie-pmml-new/kie-pmml-library/kie-pmml-library-compiler/src/main/java/org/kie/pmml/compiler/executor/PMMLCompiler.java\n#\tkie-pmml-new/kie-pmml-library/kie-pmml-library-compiler/src/main/java/org/kie/pmml/compiler/executor/PMMLCompilerImpl.java\n#\tkie-pmml-new/kie-pmml-library/kie-pmml-library-compiler/src/main/java/org/kie/pmml/compiler/utils/KiePMMLUtil.java\n#\tkie-pmml-new/kie-pmml-library/pom.xml\n#\tkie-pmml-new/kie-pmml-models/pom.xml\n#\tkie-pmml-new/kie-pmml-runtime/kie-pmml-runtime-api/pom.xml\n#\tkie-pmml-new/kie-pmml-runtime/kie-pmml-runtime-api/src/main/java/org/kie/pmml/runtime/api/container/PMMLPackage.java\n#\tkie-pmml-new/kie-pmml-runtime/kie-pmml-runtime-api/src/main/java/org/kie/pmml/runtime/api/exceptions/KiePMMLModelException.java\n#\tkie-pmml-new/kie-pmml-runtime/kie-pmml-runtime-api/src/main/java/org/kie/pmml/runtime/api/executor/PMMLContext.java\n#\tkie-pmml-new/kie-pmml-runtime/kie-pmml-runtime-api/src/main/java/org/kie/pmml/runtime/api/executor/PMMLRuntime.java\n#\tkie-pmml-new/kie-pmml-runtime/kie-pmml-runtime-assembler/pom.xml\n#\tkie-pmml-new/kie-pmml-runtime/kie-pmml-runtime-assembler/src/main/java/org/kie/pmml/assembler/PMMLWeaverService.java\n#\tkie-pmml-new/kie-pmml-runtime/kie-pmml-runtime-assembler/src/main/java/org/kie/pmml/assembler/container/PMMLPackageImpl.java\n#\tkie-pmml-new/kie-pmml-runtime/kie-pmml-runtime-assembler/src/main/java/org/kie/pmml/assembler/service/PMMLAssemblerService.java\n#\tkie-pmml-new/kie-pmml-runtime/kie-pmml-runtime-core/pom.xml\n#\tkie-pmml-new/kie-pmml-runtime/kie-pmml-runtime-core/src/main/java/org/kie/pmml/runtime/core/PMMLContextImpl.java\n#\tkie-pmml-new/kie-pmml-runtime/kie-pmml-runtime-core/src/main/java/org/kie/pmml/runtime/core/executor/PMMLModelExecutor.java\n#\tkie-pmml-new/kie-pmml-runtime/kie-pmml-runtime-core/src/main/java/org/kie/pmml/runtime/core/executor/PMMLModelExecutorFinderImpl.java\n#\tkie-pmml-new/kie-pmml-runtime/kie-pmml-runtime-core/src/main/java/org/kie/pmml/runtime/core/service/PMMLRuntimeImpl.java\n#\tkie-pmml-new/kie-pmml-runtime/kie-pmml-runtime-core/src/main/java/org/kie/pmml/runtime/core/utils/Converter.java\n#\tkie-pmml-new/kie-pmml-runtime/kie-pmml-runtime-core/src/main/java/org/kie/pmml/runtime/core/utils/PMMLRequestDataBuilder.java\n#\tkie-pmml-new/kie-pmml-runtime/pom.xml\n#\tkie-pmml-new/pom.xml\n#\tkie-test-util/src/main/java/org/kie/test/util/filesystem/FileUtils.java\n#\tkie-test-util/src/main/java/org/kie/test/util/filesystem/ResourceHelper.java", "committedDate": "2020-02-12T11:46:04Z", "type": "commit"}, {"oid": "84ddf7046f3f597262b7cea67a3c67975ae15de2", "url": "https://github.com/kiegroup/drools/commit/84ddf7046f3f597262b7cea67a3c67975ae15de2", "message": "[WIP] Keep renaming/refactoring", "committedDate": "2020-02-12T12:01:48Z", "type": "commit"}, {"oid": "d973ddb6be6da1b7adb0b29544cf1917aa324291", "url": "https://github.com/kiegroup/drools/commit/d973ddb6be6da1b7adb0b29544cf1917aa324291", "message": "[DROOLS-3339] Begin test implementation", "committedDate": "2020-02-12T13:07:25Z", "type": "commit"}, {"oid": "67f86b39b1294731de1a4f8afe34a1368a3f97ac", "url": "https://github.com/kiegroup/drools/commit/67f86b39b1294731de1a4f8afe34a1368a3f97ac", "message": "Merge remote-tracking branch 'gitgabrio/PMML-REF-WIP' into DROOLS-3339\n\n# Conflicts:\n#\tkie-pmml-new/kie-pmml-commons/pom.xml\n#\tkie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/functionals/FunctionUtils.java\n#\tkie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/interfaces/FunctionalWrapperFactory.java\n#\tkie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/interfaces/ThrowingFunction.java\n#\tkie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/KiePMMLModel.java\n#\tkie-pmml-new/kie-pmml-integration-tests/pom.xml\n#\tkie-pmml-new/kie-pmml-library/kie-pmml-library-commons/src/main/java/org/kie/pmml/library/commons/implementations/KiePMMLModelRetriever.java\n#\tkie-pmml-new/kie-pmml-library/kie-pmml-library-commons/src/main/java/org/kie/pmml/library/commons/utils/ModelUtils.java\n#\tkie-pmml-new/kie-pmml-library/kie-pmml-library-compiler/src/main/java/org/kie/pmml/compiler/executor/PMMLCompiler.java\n#\tkie-pmml-new/kie-pmml-models/pom.xml\n#\tkie-pmml-new/kie-pmml-runtime/kie-pmml-runtime-assembler/src/main/java/org/kie/pmml/assembler/service/PMMLAssemblerService.java\n#\tkie-pmml-new/kie-pmml-runtime/kie-pmml-runtime-core/src/main/java/org/kie/pmml/runtime/core/utils/Converter.java\n#\tkie-pmml-new/kie-pmml-runtime/kie-pmml-runtime-core/src/main/java/org/kie/pmml/runtime/core/utils/PMMLRequestDataBuilder.java", "committedDate": "2020-02-12T13:09:26Z", "type": "commit"}, {"oid": "e7a381245ae84c30b84e445cc203293d9f79aeac", "url": "https://github.com/kiegroup/drools/commit/e7a381245ae84c30b84e445cc203293d9f79aeac", "message": "[DROOLS-3339] Merge refactoring", "committedDate": "2020-02-12T13:26:28Z", "type": "commit"}, {"oid": "49777dd997b3c78dc5da7b5cede42280c4133b5d", "url": "https://github.com/kiegroup/drools/commit/49777dd997b3c78dc5da7b5cede42280c4133b5d", "message": "[DROOLS-3339] Merge refactoring", "committedDate": "2020-02-12T13:44:04Z", "type": "commit"}, {"oid": "fa2e577cd9fe6312f1bac58da2ac236dcd0ed8c4", "url": "https://github.com/kiegroup/drools/commit/fa2e577cd9fe6312f1bac58da2ac236dcd0ed8c4", "message": "[DROOLS-3339] Begin integrationg of tests from previous implementation. Refactoring predictors.", "committedDate": "2020-02-13T08:09:54Z", "type": "commit"}, {"oid": "1f79b9743dbfccc1d6e2a3e61fda9c453e06ec30", "url": "https://github.com/kiegroup/drools/commit/1f79b9743dbfccc1d6e2a3e61fda9c453e06ec30", "message": "[DROOLS-3339] Reorganizing resources in integration test. Fixing broken pmmls", "committedDate": "2020-02-13T14:27:37Z", "type": "commit"}, {"oid": "432b11e4facce1ff204aae5fa3c776132ff00eb1", "url": "https://github.com/kiegroup/drools/commit/432b11e4facce1ff204aae5fa3c776132ff00eb1", "message": "[DROOLS-3339] Fixed regression. Begin fixing classification. Add outputfields", "committedDate": "2020-02-13T17:30:34Z", "type": "commit"}, {"oid": "eefbc4f4f97343d54ef9915083817935bdd1aef4", "url": "https://github.com/kiegroup/drools/commit/eefbc4f4f97343d54ef9915083817935bdd1aef4", "message": "[DROOLS-3339] Fixed classification and add some whole-model test. Start increasing unittesting", "committedDate": "2020-02-14T13:49:39Z", "type": "commit"}, {"oid": "a71bc70ac4c0a6d2e0b7600159ce092808d66a78", "url": "https://github.com/kiegroup/drools/commit/a71bc70ac4c0a6d2e0b7600159ce092808d66a78", "message": "[DROOLS-3339] Updated name refactoring", "committedDate": "2020-02-17T14:57:27Z", "type": "commit"}, {"oid": "bb8cd4540266533d6f5365851b74a0bd45aa0e64", "url": "https://github.com/kiegroup/drools/commit/bb8cd4540266533d6f5365851b74a0bd45aa0e64", "message": "[DROOLS-3339] Changed log level.", "committedDate": "2020-02-18T08:13:11Z", "type": "commit"}, {"oid": "66fb642deaf3288f9c1c3a20d2c38bfcc60d9227", "url": "https://github.com/kiegroup/drools/commit/66fb642deaf3288f9c1c3a20d2c38bfcc60d9227", "message": "[DROOLS-3339] Sync with base pr", "committedDate": "2020-02-18T11:09:55Z", "type": "commit"}, {"oid": "ee3a56f43a5e1a7ecde49df5de863cd27ae4a2e9", "url": "https://github.com/kiegroup/drools/commit/ee3a56f43a5e1a7ecde49df5de863cd27ae4a2e9", "message": "Merge remote-tracking branch 'origin/master' into DROOLS-3339", "committedDate": "2020-02-18T11:11:08Z", "type": "commit"}, {"oid": "d5ee307ca406deddd9c11dc449fc45f93d5a33c3", "url": "https://github.com/kiegroup/drools/commit/d5ee307ca406deddd9c11dc449fc45f93d5a33c3", "message": "[DROOLS-3339] Update version", "committedDate": "2020-02-18T11:12:30Z", "type": "commit"}, {"oid": "3c478acbf8b402e1da8db4976c8d7867e2bd5b1f", "url": "https://github.com/kiegroup/drools/commit/3c478acbf8b402e1da8db4976c8d7867e2bd5b1f", "message": "Merge remote-tracking branch 'origin/master' into DROOLS-3339\n\n# Conflicts:\n#\tkie-pmml-new/.gitignore\n#\tkie-pmml-new/kie-pmml-commons/pom.xml\n#\tkie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/KiePMMLExtension.java\n#\tkie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/abstracts/KiePMMLExtensioned.java\n#\tkie-pmml-new/kie-pmml-commons/src/main/java/org/kie/pmml/commons/model/abstracts/KiePMMLNamed.java\n#\tkie-pmml-new/kie-pmml-compiler/kie-pmml-compiler-commons/pom.xml\n#\tkie-pmml-new/kie-pmml-compiler/kie-pmml-compiler-commons/src/main/java/org/kie/pmml/compiler/commons/utils/ModelUtils.java\n#\tkie-pmml-new/kie-pmml-compiler/kie-pmml-compiler-core/src/main/java/org/kie/pmml/compiler/executor/PMMLCompiler.java\n#\tkie-pmml-new/kie-pmml-compiler/kie-pmml-compiler-core/src/main/java/org/kie/pmml/compiler/executor/PMMLCompilerImpl.java\n#\tkie-pmml-new/kie-pmml-evaluator/kie-pmml-evaluator-api/src/main/java/org/kie/pmml/evaluator/api/executor/PMMLRuntime.java\n#\tkie-pmml-new/kie-pmml-evaluator/kie-pmml-evaluator-assembler/src/main/java/org/kie/pmml/evaluator/assembler/service/PMMLAssemblerService.java\n#\tkie-pmml-new/kie-pmml-evaluator/kie-pmml-evaluator-core/src/main/java/org/kie/pmml/evaluator/core/service/PMMLRuntimeImpl.java\n#\tkie-pmml-new/kie-pmml-evaluator/kie-pmml-evaluator-core/src/main/java/org/kie/pmml/evaluator/core/utils/Converter.java\n#\tkie-pmml-new/kie-pmml-integration-tests/pom.xml\n#\tkie-pmml-new/kie-pmml-models/pom.xml\n#\tkie-pmml-new/pom.xml", "committedDate": "2020-02-19T09:19:57Z", "type": "commit"}, {"oid": "0252db264590eab9cb09d736af61422c60598d13", "url": "https://github.com/kiegroup/drools/commit/0252db264590eab9cb09d736af61422c60598d13", "message": "[DROOLS-3339] Merging master", "committedDate": "2020-02-19T09:25:50Z", "type": "commit"}, {"oid": "be10d13c9c11387678bd9b952e3f755d8997f058", "url": "https://github.com/kiegroup/drools/commit/be10d13c9c11387678bd9b952e3f755d8997f058", "message": "[DROOLS-3339] Fixing merge with master", "committedDate": "2020-02-19T09:30:45Z", "type": "commit"}, {"oid": "1dfcd04225406cf68c56c831f0cefdad5dc15989", "url": "https://github.com/kiegroup/drools/commit/1dfcd04225406cf68c56c831f0cefdad5dc15989", "message": "[DROOLS-3339] Fixing merge with master", "committedDate": "2020-02-19T09:36:15Z", "type": "commit"}, {"oid": "08ba9803a700031577e4ff7b916a6c491eb4257b", "url": "https://github.com/kiegroup/drools/commit/08ba9803a700031577e4ff7b916a6c491eb4257b", "message": "[DROOLS-3339] Fixing merge with master", "committedDate": "2020-02-19T09:39:10Z", "type": "commit"}, {"oid": "f13d63392567162e43a735e023b96b803f055720", "url": "https://github.com/kiegroup/drools/commit/f13d63392567162e43a735e023b96b803f055720", "message": "[DROOLS-3339] Fix merge with master", "committedDate": "2020-02-19T09:45:59Z", "type": "commit"}, {"oid": "d006f75f08f11c53dd9070c63d563d0b3e49363d", "url": "https://github.com/kiegroup/drools/commit/d006f75f08f11c53dd9070c63d563d0b3e49363d", "message": "[DROOLS-3339] Fix merge with master", "committedDate": "2020-02-19T09:58:13Z", "type": "commit"}, {"oid": "f81dae86e4b8bbfefe4ee91f48b094f5de66054f", "url": "https://github.com/kiegroup/drools/commit/f81dae86e4b8bbfefe4ee91f48b094f5de66054f", "message": "[DROOLS-3339] Fixing merge with master", "committedDate": "2020-02-19T10:05:10Z", "type": "commit"}, {"oid": "c7f8b89211ee5b049037e45a53485c623debcfb8", "url": "https://github.com/kiegroup/drools/commit/c7f8b89211ee5b049037e45a53485c623debcfb8", "message": "Example of simple test for whole model", "committedDate": "2020-02-19T15:24:19Z", "type": "commit"}, {"oid": "eb91454321ab75ec4ce011e7a255e62939bc3095", "url": "https://github.com/kiegroup/drools/commit/eb91454321ab75ec4ce011e7a255e62939bc3095", "message": "[DROOLS-3339] Implementing factories unit tests", "committedDate": "2020-02-20T11:49:29Z", "type": "commit"}, {"oid": "c8e359bbdf01bdaf471233bd554c4d9976a46246", "url": "https://github.com/kiegroup/drools/commit/c8e359bbdf01bdaf471233bd554c4d9976a46246", "message": "Merge branch 'DROOLS-3339' of github.com:gitgabrio/drools into DROOLS-3339", "committedDate": "2020-02-20T11:49:59Z", "type": "commit"}, {"oid": "c9b6c4b41bfb33ce5732e644a6e77261ef136e01", "url": "https://github.com/kiegroup/drools/commit/c9b6c4b41bfb33ce5732e644a6e77261ef136e01", "message": "[DROOLS-3339] Changed outputfield - target field to Optional", "committedDate": "2020-02-20T12:10:16Z", "type": "commit"}, {"oid": "c7f5c4ae4d486f4839a67477dd63bdaf52691b0f", "url": "https://github.com/kiegroup/drools/commit/c7f5c4ae4d486f4839a67477dd63bdaf52691b0f", "message": "[DROOLS-3339] Add tests", "committedDate": "2020-02-20T13:22:04Z", "type": "commit"}, {"oid": "60ac6321fca21660851f05c8ea01d652119579f9", "url": "https://github.com/kiegroup/drools/commit/60ac6321fca21660851f05c8ea01d652119579f9", "message": "[DROOLS-3339] Refactoring kie-pmml-models-regression-api -> kie-pmml-models-regression-model", "committedDate": "2020-02-20T13:54:01Z", "type": "commit"}, {"oid": "37d423724f3e36ff1464a3b46014c0331244bb83", "url": "https://github.com/kiegroup/drools/commit/37d423724f3e36ff1464a3b46014c0331244bb83", "message": "Parameterize and polish NumericVariablesLinearRegressionTest", "committedDate": "2020-02-20T14:19:00Z", "type": "commit"}, {"oid": "5ff18f260a1fc55388b7db6c72fbc4cf33319eb7", "url": "https://github.com/kiegroup/drools/commit/5ff18f260a1fc55388b7db6c72fbc4cf33319eb7", "message": "[DROOLS-3339] Keep testing", "committedDate": "2020-02-21T09:37:55Z", "type": "commit"}, {"oid": "1178cffc04dd79b8ec0db806bd75e435dc8fc138", "url": "https://github.com/kiegroup/drools/commit/1178cffc04dd79b8ec0db806bd75e435dc8fc138", "message": "Merge remote-tracking branch 'gitgabrio/DROOLS-3339' into DROOLS-3339", "committedDate": "2020-02-21T09:38:42Z", "type": "commit"}, {"oid": "86523713cb68d5b422553f9649e046279682a4bc", "url": "https://github.com/kiegroup/drools/commit/86523713cb68d5b422553f9649e046279682a4bc", "message": "Change package name for PMML regression tests", "committedDate": "2020-02-21T09:50:28Z", "type": "commit"}, {"oid": "564492a1ff343a8faf391e2bd30bba51abcaa66e", "url": "https://github.com/kiegroup/drools/commit/564492a1ff343a8faf391e2bd30bba51abcaa66e", "message": "[DROOLS-3339] Fixing/refactoring ClassificationModelEvaluator. Implemented tests", "committedDate": "2020-02-21T13:24:48Z", "type": "commit"}, {"oid": "29c29482c09c29a88360f73764d9e68d9f736d7a", "url": "https://github.com/kiegroup/drools/commit/29c29482c09c29a88360f73764d9e68d9f736d7a", "message": "[DROOLS-5099] PMML tests for regression with numeric inputs", "committedDate": "2020-02-21T13:27:41Z", "type": "commit"}, {"oid": "0139a0fe1897e5db8b7a91a9b027c183b1ef1ca8", "url": "https://github.com/kiegroup/drools/commit/0139a0fe1897e5db8b7a91a9b027c183b1ef1ca8", "message": "[DROOLS-3339] Done ClassificationModelEvaluator tests", "committedDate": "2020-02-21T14:20:16Z", "type": "commit"}]}