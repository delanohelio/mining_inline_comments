{"pr_number": 2730, "pr_title": "[DROOLS-4924] LambdaConsequence without bind variable is not material\u2026", "pr_createdAt": "2020-01-21T08:00:20Z", "pr_url": "https://github.com/kiegroup/drools/pull/2730", "timeline": [{"oid": "ef5847221c2f8619473d52c53a9fd53d14445ca1", "url": "https://github.com/kiegroup/drools/commit/ef5847221c2f8619473d52c53a9fd53d14445ca1", "message": "[DROOLS-4924] LambdaConsequence without bind variable is not materialized", "committedDate": "2020-01-23T03:20:44Z", "type": "commit"}, {"oid": "ef5847221c2f8619473d52c53a9fd53d14445ca1", "url": "https://github.com/kiegroup/drools/commit/ef5847221c2f8619473d52c53a9fd53d14445ca1", "message": "[DROOLS-4924] LambdaConsequence without bind variable is not materialized", "committedDate": "2020-01-23T03:20:44Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTkxODYwMg==", "url": "https://github.com/kiegroup/drools/pull/2730#discussion_r369918602", "bodyText": "This creates a standard construct (as I see in case of simple StaticJavaParser.parseResource()) of \"D\" and \"execute\" so we will see only \"execute\" afterwards.", "author": "tkobayas", "createdAt": "2020-01-23T03:35:02Z", "path": "drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/builder/generator/Consequence.java", "diffHunk": "@@ -248,7 +248,7 @@ private MethodCallExpr executeCall(BlockStmt ruleVariablesBlock, BlockStmt ruleC\n \n \n         boolean requireDrools = rewriteRHS(ruleVariablesBlock, ruleConsequence);\n-        MethodCallExpr executeCall = new MethodCallExpr(onCall, onCall == null ? \"D.\" + EXECUTE_CALL : EXECUTE_CALL);\n+        MethodCallExpr executeCall = new MethodCallExpr(onCall != null ? onCall : new NameExpr(\"D\"), EXECUTE_CALL);", "originalCommit": "ef5847221c2f8619473d52c53a9fd53d14445ca1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDAzMTgzOQ==", "url": "https://github.com/kiegroup/drools/pull/2730#discussion_r370031839", "bodyText": "Perfect thank you @tkobayas", "author": "lucamolteni", "createdAt": "2020-01-23T10:13:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTkxODYwMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTkxODc1OA==", "url": "https://github.com/kiegroup/drools/pull/2730#discussion_r369918758", "bodyText": "This change is required to pass AmbiguousExceptionTest in drools-test-coverage/test-suite/.", "author": "tkobayas", "createdAt": "2020-01-23T03:36:15Z", "path": "drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/util/lambdareplace/MaterializedLambdaConsequence.java", "diffHunk": "@@ -49,7 +49,7 @@ void createMethodDeclaration(EnumDeclaration classDeclaration) {\n         }\n \n         MethodDeclaration methodDeclaration = classDeclaration.addMethod(\"execute\", Modifier.Keyword.PUBLIC);\n-        methodDeclaration.setThrownExceptions(NodeList.nodeList(parseClassOrInterfaceType(\"Exception\")));\n+        methodDeclaration.setThrownExceptions(NodeList.nodeList(parseClassOrInterfaceType(\"java.lang.Exception\")));", "originalCommit": "ef5847221c2f8619473d52c53a9fd53d14445ca1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}