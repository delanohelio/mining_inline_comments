{"pr_number": 2941, "pr_title": "[DROOLS-5350] Externalize lambda for \"from\" clause", "pr_createdAt": "2020-06-10T08:38:38Z", "pr_url": "https://github.com/kiegroup/drools/pull/2941", "timeline": [{"oid": "b217cfe8d669dd9afa283e7a3bc1fd3e0735ac6a", "url": "https://github.com/kiegroup/drools/commit/b217cfe8d669dd9afa283e7a3bc1fd3e0735ac6a", "message": "[DROOLS-5350] Externalize lambda for \"from\" clause", "committedDate": "2020-06-10T08:21:36Z", "type": "commit"}, {"oid": "0a1661f8c4add72008eb8bcac88d2bae98e27dd2", "url": "https://github.com/kiegroup/drools/commit/0a1661f8c4add72008eb8bcac88d2bae98e27dd2", "message": "- Fixed failure cases", "committedDate": "2020-06-11T06:15:02Z", "type": "commit"}, {"oid": "2994379974b43f9c7fea69cadd471adb2c99b922", "url": "https://github.com/kiegroup/drools/commit/2994379974b43f9c7fea69cadd471adb2c99b922", "message": "- Fixed Code Smell", "committedDate": "2020-06-11T09:52:13Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTg5NzM1NA==", "url": "https://github.com/kiegroup/drools/pull/2941#discussion_r439897354", "bodyText": "In case of \"from\", we cannot infer the return type in ExecModelLambdaPostProcessor like other cases. So I introduced lambdaReturnTypes to hold return type of lambda. lambdaReturnTypes is populated during parsing (FromVisitor) and then we can use it in ExecModelLambdaPostProcessor later.", "author": "tkobayas", "createdAt": "2020-06-15T02:02:45Z", "path": "drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/builder/PackageModel.java", "diffHunk": "@@ -148,6 +149,8 @@\n     private Map<String, CreatedClass> lambdaClasses = new HashMap<>();\n     private Set<RuleUnitDescription> ruleUnits = new HashSet<>();\n \n+    private Map<LambdaExpr, java.lang.reflect.Type> lambdaReturnTypes = new HashMap<>();", "originalCommit": "2994379974b43f9c7fea69cadd471adb2c99b922", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTg5NzQ3OQ==", "url": "https://github.com/kiegroup/drools/pull/2941#discussion_r439897479", "bodyText": "Changed to parseType() so it can handle array types as well.", "author": "tkobayas", "createdAt": "2020-06-15T02:03:31Z", "path": "drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/builder/generator/DrlxParseUtil.java", "diffHunk": "@@ -496,7 +496,7 @@ public static Expression generateLambdaWithoutParameters(Collection<String> used\n         if (!skipFirstParamAsThis) {\n             Type type;\n             if (canResolve) {\n-                type = StaticJavaParser.parseClassOrInterfaceType(patternClass.get().getCanonicalName());\n+                type = StaticJavaParser.parseType(patternClass.get().getCanonicalName());", "originalCommit": "2994379974b43f9c7fea69cadd471adb2c99b922", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "3d587008b91518ab7e02bf735eaa4883bbfba7eb", "url": "https://github.com/kiegroup/drools/commit/3d587008b91518ab7e02bf735eaa4883bbfba7eb", "message": "- Add array type test", "committedDate": "2020-06-15T02:58:08Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTkwODYwNg==", "url": "https://github.com/kiegroup/drools/pull/2941#discussion_r439908606", "bodyText": "This conditional branching is to handle cases where return types are Class (e.g. Person) or collection of classes (e.g. List<Person>). Special cases like java.util.Collection<V> will be left non-externalized so FromTest.testFromMapValues() is not yet externalized. I'll file a JIRA with minor priority.", "author": "tkobayas", "createdAt": "2020-06-15T03:03:51Z", "path": "drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/util/lambdareplace/ExecModelLambdaPostProcessor.java", "diffHunk": "@@ -178,6 +187,52 @@ private void convertBindCallForFlowDSL(MethodCallExpr methodCallExpr) {\n         extractLambdaFromMethodCall(bindAsMethodOpt.get(), () -> new MaterializedLambdaExtractor(packageName, ruleClassName, returnType));\n     }\n \n+    private void convertFromCall(MethodCallExpr methodCallExpr) {\n+        Optional<Expression> lambdaOpt = methodCallExpr.getArguments().stream().filter(Expression::isLambdaExpr).findFirst();\n+        if (!lambdaOpt.isPresent()) {\n+            return; // Don't need to handle. e.g. D.from(var_$children)\n+        }\n+\n+        java.lang.reflect.Type returnType = lambdaReturnTypes.get(lambdaOpt.get());\n+        if (returnType == null) {\n+            return;\n+        }\n+\n+        returnType = ClassUtil.boxTypePrimitive(returnType);\n+\n+        String returnTypeStr;\n+\n+        if (returnType instanceof Class) {\n+            returnTypeStr = ((Class<?>)returnType).getCanonicalName();\n+        } else if (returnType instanceof ParameterizedType) {\n+            ParameterizedType parameterizedType = (ParameterizedType) returnType;\n+            java.lang.reflect.Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();\n+            if (actualTypeArguments.length != 1) {\n+                return;\n+            }\n+            java.lang.reflect.Type argType = actualTypeArguments[0];\n+            if (argType instanceof Class) {\n+                // java.util.List<org.drools.FromTest$MyPerson> has to be resolved to canonical name java.util.List<org.drools.FromTest.MyPerson>\n+                returnTypeStr = canonicalNameParameterizedType(parameterizedType, (Class<?>)argType);\n+            } else {\n+                return; // e.g. java.util.Collection<V> (V is TypeVariable), nested ParameterizedType, GenericArrayType etc.\n+            }\n+        } else {\n+            return; // e.g. GenericArrayType etc.\n+        }\n+", "originalCommit": "3d587008b91518ab7e02bf735eaa4883bbfba7eb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "4c5f43f3d8e203b7e91c41d3e25175daefcee62d", "url": "https://github.com/kiegroup/drools/commit/4c5f43f3d8e203b7e91c41d3e25175daefcee62d", "message": "- safe cast", "committedDate": "2020-06-19T01:55:37Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM3NTc0Mg==", "url": "https://github.com/kiegroup/drools/pull/2941#discussion_r443375742", "bodyText": "Just a suggestion: what about refactoring ExecModelLambdaPostProcessor and to it a constructor that simply takes the whole PackageModel?", "author": "mariofusco", "createdAt": "2020-06-22T07:49:43Z", "path": "drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/builder/RuleWriter.java", "diffHunk": "@@ -85,6 +85,7 @@ public String getMainSource() {\n                                 pkgModel.getRulesFileNameWithPackage(),\n                                 pkgModel.getImports(),\n                                 pkgModel.getStaticImports(),\n+                                pkgModel.getLambdaReturnTypes(),", "originalCommit": "4c5f43f3d8e203b7e91c41d3e25175daefcee62d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM4NjI4Mw==", "url": "https://github.com/kiegroup/drools/pull/2941#discussion_r443386283", "bodyText": "Thank you for the suggestion. I added a new constructor. (The old constructor remains because it is used by a unit test)", "author": "tkobayas", "createdAt": "2020-06-22T08:10:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM3NTc0Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM5MjE4NA==", "url": "https://github.com/kiegroup/drools/pull/2941#discussion_r443392184", "bodyText": "There was a reason why the constructor didn't take the whole PackageModel that is the PackageModel class is gigantic and to couple directly was a bad idea IMHO.\nNevertheless, I can see why having many parameters in a constructor is strange", "author": "lucamolteni", "createdAt": "2020-06-22T08:21:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM3NTc0Mg=="}], "type": "inlineReview"}, {"oid": "0fbef2aeaf87b50868288d896e28a3ef683d4eaa", "url": "https://github.com/kiegroup/drools/commit/0fbef2aeaf87b50868288d896e28a3ef683d4eaa", "message": "- ExecModelLambdaPostProcessor constructor refactoring", "committedDate": "2020-06-22T08:08:07Z", "type": "commit"}]}