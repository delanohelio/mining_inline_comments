{"pr_number": 7742, "pr_title": "buildscripts: xDS Kubernetes Interop tests buildscript", "pr_createdAt": "2020-12-21T16:59:02Z", "pr_url": "https://github.com/grpc/grpc-java/pull/7742", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njk5NTIyOQ==", "url": "https://github.com/grpc/grpc-java/pull/7742#discussion_r546995229", "bodyText": "Probably fine as-is but want to double-check: I assume this is for manual tests, but how likely is this to lead to unintentionally testing against an old version of the test driver repo found locally?", "author": "ericgribkoff", "createdAt": "2020-12-22T00:10:47Z", "path": "buildscripts/kokoro/xds-k8s-install-test-driver.sh", "diffHunk": "@@ -0,0 +1,362 @@\n+#!/usr/bin/env bash\n+# TODO(sergiitk): move to grpc/grpc when implementing support of other languages\n+set -eo pipefail\n+\n+# Constants\n+readonly PYTHON_VERSION=\"3.6\"\n+# Test driver\n+readonly TEST_DRIVER_REPO_NAME=\"grpc\"\n+readonly TEST_DRIVER_REPO_URL=\"https://github.com/grpc/grpc.git\"\n+readonly TEST_DRIVER_BRANCH=\"${TEST_DRIVER_BRANCH:-master}\"\n+readonly TEST_DRIVER_PATH=\"tools/run_tests/xds_k8s_test_driver\"\n+readonly TEST_DRIVER_PROTOS_PATH=\"src/proto/grpc/testing\"\n+\n+#######################################\n+# Run command end report its exit code. Doesn't exit on non-zero exit code.\n+# Globals:\n+#   None\n+# Arguments:\n+#   Command to execute\n+# Outputs:\n+#   Writes the output of given command to stdout, stderr\n+#######################################\n+run_ignore_exit_code() {\n+  local exit_code=-1\n+  \"$@\" || exit_code=$?\n+  echo \"Exit code: ${exit_code}\"\n+}\n+\n+#######################################\n+# Parses information about git repository at given path to global variables.\n+# Globals:\n+#   GIT_ORIGIN_URL: Populated with the origin URL of git repo used for the build\n+#   GIT_COMMIT_SHORT: Populated with the short SHA-1 of git commit being built\n+# Arguments:\n+#   Git source dir\n+#######################################\n+parse_src_repo_git_info() {\n+  local src_dir=\"${SRC_DIR:?SRC_DIR must be set}\"\n+  readonly GIT_ORIGIN_URL=$(git -C \"${src_dir}\" remote get-url origin)\n+  readonly GIT_COMMIT_SHORT=$(git -C \"${src_dir}\" rev-parse --short HEAD)\n+}\n+\n+#######################################\n+# List GCR image tags matching given tag name.\n+# Arguments:\n+#   Image name\n+#   Tag name\n+# Outputs:\n+#   Writes the table with the list of found tags to stdout.\n+#   If no tags found, the output is an empty string.\n+#######################################\n+gcloud_gcr_list_image_tags() {\n+  gcloud container images list-tags --format=\"table[box](tags,digest,timestamp.date())\" --filter=\"tags:$2\" \"$1\"\n+}\n+\n+#######################################\n+# A helper to execute `gcloud -q components update`.\n+# Arguments:\n+#   None\n+# Outputs:\n+#   Writes the output of `gcloud` command to stdout, stderr\n+#######################################\n+gcloud_update() {\n+  echo \"Update gcloud components:\"\n+  gcloud -q components update\n+}\n+\n+#######################################\n+# Create kube context authenticated with GKE cluster, saves context name.\n+# to KUBE_CONTEXT\n+# Globals:\n+#   GKE_CLUSTER_NAME\n+#   GKE_CLUSTER_ZONE\n+#   KUBE_CONTEXT: Populated with name of kubectl context with GKE cluster access\n+# Arguments:\n+#   None\n+# Outputs:\n+#   Writes the output of `gcloud` command to stdout, stderr\n+#   Writes authorization info $HOME/.kube/config\n+#######################################\n+gcloud_get_cluster_credentials() {\n+  gcloud container clusters get-credentials \"${GKE_CLUSTER_NAME}\" --zone \"${GKE_CLUSTER_ZONE}\"\n+  readonly KUBE_CONTEXT=\"$(kubectl config current-context)\"\n+}\n+\n+#######################################\n+# Clone the source code of the test driver to $TEST_DRIVER_REPO_DIR, unless\n+# given folder exists.\n+# Globals:\n+#   TEST_DRIVER_REPO_DIR\n+#   TEST_DRIVER_REPO_URL\n+#   TEST_DRIVER_BRANCH\n+# Arguments:\n+#   None\n+# Outputs:\n+#   Writes the output of `git` command to stdout, stderr\n+#   Writes driver source code to $TEST_DRIVER_REPO_DIR\n+#######################################\n+test_driver_get_source() {\n+  if [[ -d \"${TEST_DRIVER_REPO_DIR}\" ]]; then\n+    echo \"Found driver directory: ${TEST_DRIVER_REPO_DIR}\"", "originalCommit": "9d60157223cf00819b07402df3a0ddeb072e8787", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzAwNjQzMw==", "url": "https://github.com/grpc/grpc-java/pull/7742#discussion_r547006433", "bodyText": "Good point. Yes - this is for manual tests. All our tests start with a clean VM, so unlikely. But it's also an easy fix - I'll add checkout branch + pull", "author": "sergiitk", "createdAt": "2020-12-22T00:53:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njk5NTIyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzAwODg3Nw==", "url": "https://github.com/grpc/grpc-java/pull/7742#discussion_r547008877", "bodyText": "I guess the downside of checkout + pull is that it might make intentionally testing against a locally modified version of the test driver more difficult. Will let you decide but I would be fine with leaving this as-is, the \"Found driver directory\" message is probably sufficient.", "author": "ericgribkoff", "createdAt": "2020-12-22T01:02:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njk5NTIyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzAxODkzNA==", "url": "https://github.com/grpc/grpc-java/pull/7742#discussion_r547018934", "bodyText": "Thanks! Replaced checkout + pull with explicit TEST_DRIVER_REPO_DIR_USE_EXISTING.", "author": "sergiitk", "createdAt": "2020-12-22T01:40:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njk5NTIyOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njk5NTMyNQ==", "url": "https://github.com/grpc/grpc-java/pull/7742#discussion_r546995325", "bodyText": "\"if not\" already using one?", "author": "ericgribkoff", "createdAt": "2020-12-22T00:11:13Z", "path": "buildscripts/kokoro/xds-k8s-install-test-driver.sh", "diffHunk": "@@ -0,0 +1,362 @@\n+#!/usr/bin/env bash\n+# TODO(sergiitk): move to grpc/grpc when implementing support of other languages\n+set -eo pipefail\n+\n+# Constants\n+readonly PYTHON_VERSION=\"3.6\"\n+# Test driver\n+readonly TEST_DRIVER_REPO_NAME=\"grpc\"\n+readonly TEST_DRIVER_REPO_URL=\"https://github.com/grpc/grpc.git\"\n+readonly TEST_DRIVER_BRANCH=\"${TEST_DRIVER_BRANCH:-master}\"\n+readonly TEST_DRIVER_PATH=\"tools/run_tests/xds_k8s_test_driver\"\n+readonly TEST_DRIVER_PROTOS_PATH=\"src/proto/grpc/testing\"\n+\n+#######################################\n+# Run command end report its exit code. Doesn't exit on non-zero exit code.\n+# Globals:\n+#   None\n+# Arguments:\n+#   Command to execute\n+# Outputs:\n+#   Writes the output of given command to stdout, stderr\n+#######################################\n+run_ignore_exit_code() {\n+  local exit_code=-1\n+  \"$@\" || exit_code=$?\n+  echo \"Exit code: ${exit_code}\"\n+}\n+\n+#######################################\n+# Parses information about git repository at given path to global variables.\n+# Globals:\n+#   GIT_ORIGIN_URL: Populated with the origin URL of git repo used for the build\n+#   GIT_COMMIT_SHORT: Populated with the short SHA-1 of git commit being built\n+# Arguments:\n+#   Git source dir\n+#######################################\n+parse_src_repo_git_info() {\n+  local src_dir=\"${SRC_DIR:?SRC_DIR must be set}\"\n+  readonly GIT_ORIGIN_URL=$(git -C \"${src_dir}\" remote get-url origin)\n+  readonly GIT_COMMIT_SHORT=$(git -C \"${src_dir}\" rev-parse --short HEAD)\n+}\n+\n+#######################################\n+# List GCR image tags matching given tag name.\n+# Arguments:\n+#   Image name\n+#   Tag name\n+# Outputs:\n+#   Writes the table with the list of found tags to stdout.\n+#   If no tags found, the output is an empty string.\n+#######################################\n+gcloud_gcr_list_image_tags() {\n+  gcloud container images list-tags --format=\"table[box](tags,digest,timestamp.date())\" --filter=\"tags:$2\" \"$1\"\n+}\n+\n+#######################################\n+# A helper to execute `gcloud -q components update`.\n+# Arguments:\n+#   None\n+# Outputs:\n+#   Writes the output of `gcloud` command to stdout, stderr\n+#######################################\n+gcloud_update() {\n+  echo \"Update gcloud components:\"\n+  gcloud -q components update\n+}\n+\n+#######################################\n+# Create kube context authenticated with GKE cluster, saves context name.\n+# to KUBE_CONTEXT\n+# Globals:\n+#   GKE_CLUSTER_NAME\n+#   GKE_CLUSTER_ZONE\n+#   KUBE_CONTEXT: Populated with name of kubectl context with GKE cluster access\n+# Arguments:\n+#   None\n+# Outputs:\n+#   Writes the output of `gcloud` command to stdout, stderr\n+#   Writes authorization info $HOME/.kube/config\n+#######################################\n+gcloud_get_cluster_credentials() {\n+  gcloud container clusters get-credentials \"${GKE_CLUSTER_NAME}\" --zone \"${GKE_CLUSTER_ZONE}\"\n+  readonly KUBE_CONTEXT=\"$(kubectl config current-context)\"\n+}\n+\n+#######################################\n+# Clone the source code of the test driver to $TEST_DRIVER_REPO_DIR, unless\n+# given folder exists.\n+# Globals:\n+#   TEST_DRIVER_REPO_DIR\n+#   TEST_DRIVER_REPO_URL\n+#   TEST_DRIVER_BRANCH\n+# Arguments:\n+#   None\n+# Outputs:\n+#   Writes the output of `git` command to stdout, stderr\n+#   Writes driver source code to $TEST_DRIVER_REPO_DIR\n+#######################################\n+test_driver_get_source() {\n+  if [[ -d \"${TEST_DRIVER_REPO_DIR}\" ]]; then\n+    echo \"Found driver directory: ${TEST_DRIVER_REPO_DIR}\"\n+  else\n+    echo \"Cloning driver to ${TEST_DRIVER_REPO_URL} branch ${TEST_DRIVER_BRANCH} to ${TEST_DRIVER_REPO_DIR}\"\n+    git clone -b \"${TEST_DRIVER_BRANCH}\" --depth=1 \"${TEST_DRIVER_REPO_URL}\" \"${TEST_DRIVER_REPO_DIR}\"\n+  fi\n+}\n+\n+#######################################\n+# Install Python modules from required in $TEST_DRIVER_FULL_DIR/requirements.txt\n+# to Python virtual environment. Creates and activates Python venv if necessary.\n+# Globals:\n+#   TEST_DRIVER_FULL_DIR\n+#   PYTHON_VERSION\n+# Arguments:\n+#   None\n+# Outputs:\n+#   Writes the output of `python`, `pip` commands to stdout, stderr\n+#   Writes the list of installed modules to stdout\n+#######################################\n+test_driver_pip_install() {\n+  echo \"Install python dependencies\"\n+  cd \"${TEST_DRIVER_FULL_DIR}\"\n+\n+  # Create and activate virtual environment already using one", "originalCommit": "9d60157223cf00819b07402df3a0ddeb072e8787", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njk5NTU2OA==", "url": "https://github.com/grpc/grpc-java/pull/7742#discussion_r546995568", "bodyText": "s/instead/instead of/", "author": "ericgribkoff", "createdAt": "2020-12-22T00:12:19Z", "path": "buildscripts/kokoro/xds-k8s-install-test-driver.sh", "diffHunk": "@@ -0,0 +1,362 @@\n+#!/usr/bin/env bash\n+# TODO(sergiitk): move to grpc/grpc when implementing support of other languages\n+set -eo pipefail\n+\n+# Constants\n+readonly PYTHON_VERSION=\"3.6\"\n+# Test driver\n+readonly TEST_DRIVER_REPO_NAME=\"grpc\"\n+readonly TEST_DRIVER_REPO_URL=\"https://github.com/grpc/grpc.git\"\n+readonly TEST_DRIVER_BRANCH=\"${TEST_DRIVER_BRANCH:-master}\"\n+readonly TEST_DRIVER_PATH=\"tools/run_tests/xds_k8s_test_driver\"\n+readonly TEST_DRIVER_PROTOS_PATH=\"src/proto/grpc/testing\"\n+\n+#######################################\n+# Run command end report its exit code. Doesn't exit on non-zero exit code.\n+# Globals:\n+#   None\n+# Arguments:\n+#   Command to execute\n+# Outputs:\n+#   Writes the output of given command to stdout, stderr\n+#######################################\n+run_ignore_exit_code() {\n+  local exit_code=-1\n+  \"$@\" || exit_code=$?\n+  echo \"Exit code: ${exit_code}\"\n+}\n+\n+#######################################\n+# Parses information about git repository at given path to global variables.\n+# Globals:\n+#   GIT_ORIGIN_URL: Populated with the origin URL of git repo used for the build\n+#   GIT_COMMIT_SHORT: Populated with the short SHA-1 of git commit being built\n+# Arguments:\n+#   Git source dir\n+#######################################\n+parse_src_repo_git_info() {\n+  local src_dir=\"${SRC_DIR:?SRC_DIR must be set}\"\n+  readonly GIT_ORIGIN_URL=$(git -C \"${src_dir}\" remote get-url origin)\n+  readonly GIT_COMMIT_SHORT=$(git -C \"${src_dir}\" rev-parse --short HEAD)\n+}\n+\n+#######################################\n+# List GCR image tags matching given tag name.\n+# Arguments:\n+#   Image name\n+#   Tag name\n+# Outputs:\n+#   Writes the table with the list of found tags to stdout.\n+#   If no tags found, the output is an empty string.\n+#######################################\n+gcloud_gcr_list_image_tags() {\n+  gcloud container images list-tags --format=\"table[box](tags,digest,timestamp.date())\" --filter=\"tags:$2\" \"$1\"\n+}\n+\n+#######################################\n+# A helper to execute `gcloud -q components update`.\n+# Arguments:\n+#   None\n+# Outputs:\n+#   Writes the output of `gcloud` command to stdout, stderr\n+#######################################\n+gcloud_update() {\n+  echo \"Update gcloud components:\"\n+  gcloud -q components update\n+}\n+\n+#######################################\n+# Create kube context authenticated with GKE cluster, saves context name.\n+# to KUBE_CONTEXT\n+# Globals:\n+#   GKE_CLUSTER_NAME\n+#   GKE_CLUSTER_ZONE\n+#   KUBE_CONTEXT: Populated with name of kubectl context with GKE cluster access\n+# Arguments:\n+#   None\n+# Outputs:\n+#   Writes the output of `gcloud` command to stdout, stderr\n+#   Writes authorization info $HOME/.kube/config\n+#######################################\n+gcloud_get_cluster_credentials() {\n+  gcloud container clusters get-credentials \"${GKE_CLUSTER_NAME}\" --zone \"${GKE_CLUSTER_ZONE}\"\n+  readonly KUBE_CONTEXT=\"$(kubectl config current-context)\"\n+}\n+\n+#######################################\n+# Clone the source code of the test driver to $TEST_DRIVER_REPO_DIR, unless\n+# given folder exists.\n+# Globals:\n+#   TEST_DRIVER_REPO_DIR\n+#   TEST_DRIVER_REPO_URL\n+#   TEST_DRIVER_BRANCH\n+# Arguments:\n+#   None\n+# Outputs:\n+#   Writes the output of `git` command to stdout, stderr\n+#   Writes driver source code to $TEST_DRIVER_REPO_DIR\n+#######################################\n+test_driver_get_source() {\n+  if [[ -d \"${TEST_DRIVER_REPO_DIR}\" ]]; then\n+    echo \"Found driver directory: ${TEST_DRIVER_REPO_DIR}\"\n+  else\n+    echo \"Cloning driver to ${TEST_DRIVER_REPO_URL} branch ${TEST_DRIVER_BRANCH} to ${TEST_DRIVER_REPO_DIR}\"\n+    git clone -b \"${TEST_DRIVER_BRANCH}\" --depth=1 \"${TEST_DRIVER_REPO_URL}\" \"${TEST_DRIVER_REPO_DIR}\"\n+  fi\n+}\n+\n+#######################################\n+# Install Python modules from required in $TEST_DRIVER_FULL_DIR/requirements.txt\n+# to Python virtual environment. Creates and activates Python venv if necessary.\n+# Globals:\n+#   TEST_DRIVER_FULL_DIR\n+#   PYTHON_VERSION\n+# Arguments:\n+#   None\n+# Outputs:\n+#   Writes the output of `python`, `pip` commands to stdout, stderr\n+#   Writes the list of installed modules to stdout\n+#######################################\n+test_driver_pip_install() {\n+  echo \"Install python dependencies\"\n+  cd \"${TEST_DRIVER_FULL_DIR}\"\n+\n+  # Create and activate virtual environment already using one\n+  if [[ -z \"${VIRTUAL_ENV}\" ]]; then\n+    local venv_dir=\"${TEST_DRIVER_FULL_DIR}/venv\"\n+    if [[ -d \"${venv_dir}\" ]]; then\n+      echo \"Found python virtual environment directory: ${venv_dir}\"\n+    else\n+      echo \"Creating python virtual environment: ${venv_dir}\"\n+      \"python${PYTHON_VERSION} -m venv ${venv_dir}\"\n+    fi\n+    # Intentional: No need to check python venv activate script.\n+    # shellcheck source=/dev/null\n+    source \"${venv_dir}/bin/activate\"\n+  fi\n+\n+  pip install -r requirements.txt\n+  echo \"Installed Python packages:\"\n+  pip list\n+}\n+\n+#######################################\n+# Compile proto-files needed for the test driver\n+# Globals:\n+#   TEST_DRIVER_REPO_DIR\n+#   TEST_DRIVER_FULL_DIR\n+#   TEST_DRIVER_PROTOS_PATH\n+# Arguments:\n+#   None\n+# Outputs:\n+#   Writes the output of `python -m grpc_tools.protoc` to stdout, stderr\n+#   Writes the list if compiled python code to stdout\n+#   Writes compiled python code with proto messages and grpc services to\n+#   $TEST_DRIVER_FULL_DIR/src/proto\n+#######################################\n+test_driver_compile_protos() {\n+  declare -a protos\n+  protos=(\n+    \"${TEST_DRIVER_PROTOS_PATH}/test.proto\"\n+    \"${TEST_DRIVER_PROTOS_PATH}/messages.proto\"\n+    \"${TEST_DRIVER_PROTOS_PATH}/empty.proto\"\n+  )\n+  echo \"Generate python code from grpc.testing protos: ${protos[*]}\"\n+  cd \"${TEST_DRIVER_REPO_DIR}\"\n+  python -m grpc_tools.protoc \\\n+    --proto_path=. \\\n+    --python_out=\"${TEST_DRIVER_FULL_DIR}\" \\\n+    --grpc_python_out=\"${TEST_DRIVER_FULL_DIR}\" \\\n+    \"${protos[@]}\"\n+  local protos_out_dir=\"${TEST_DRIVER_FULL_DIR}/${TEST_DRIVER_PROTOS_PATH}\"\n+  echo \"Generated files ${protos_out_dir}:\"\n+  ls -Fl \"${protos_out_dir}\"\n+}\n+\n+#######################################\n+# Installs the test driver and it's requirements.\n+# https://github.com/grpc/grpc/tree/master/tools/run_tests/xds_k8s_test_driver#installation\n+# Globals:\n+#   TEST_DRIVER_REPO_DIR: Populated with the path to the repo containing\n+#                         the test driver\n+#   TEST_DRIVER_FULL_DIR: Populated with the path to the test driver source code\n+# Arguments:\n+#   The directory for test driver's source code\n+# Outputs:\n+#   Writes the output to stdout, stderr\n+#######################################\n+test_driver_install() {\n+  readonly TEST_DRIVER_REPO_DIR=\"${1:?Usage test_driver_install TEST_DRIVER_REPO_DIR}\"\n+  readonly TEST_DRIVER_FULL_DIR=\"${TEST_DRIVER_REPO_DIR}/${TEST_DRIVER_PATH}\"\n+  test_driver_get_source\n+  test_driver_pip_install\n+  test_driver_compile_protos\n+}\n+\n+#######################################\n+# Outputs Kokoro image version and Ubuntu's lsb_release\n+# Arguments:\n+#   None\n+# Outputs:\n+#   Writes the output to stdout\n+#######################################\n+kokoro_print_version() {\n+  echo \"Kokoro VM version:\"\n+  if [[ -f /VERSION ]]; then\n+    cat /VERSION\n+  fi\n+  run_ignore_exit_code lsb_release -a\n+}\n+\n+#######################################\n+# Report extra information about the job via sponge properties.\n+# Globals:\n+#   KOKORO_ARTIFACTS_DIR\n+#   GIT_ORIGIN_URL\n+#   GIT_COMMIT_SHORT\n+# Arguments:\n+#   None\n+# Outputs:\n+#   Writes the output to stdout\n+#   Writes job properties to $KOKORO_ARTIFACTS_DIR/custom_sponge_config.csv\n+#######################################\n+kokoro_write_sponge_properties() {\n+  # CSV format: \"property_name\",\"property_value\"\n+  # Bump TESTS_FORMAT_VERSION when reported test name changed enough to when it\n+  # makes more sense to discard previous test results from a testgrid board.\n+  # Use GIT_ORIGIN_URL to exclude test runs executed against repo forks from\n+  # testgrid reports.\n+  cat >\"${KOKORO_ARTIFACTS_DIR}/custom_sponge_config.csv\" <<EOF\n+TESTS_FORMAT_VERSION,2\n+TESTGRID_EXCLUDE,0\n+GIT_ORIGIN_URL,${GIT_ORIGIN_URL:?GIT_ORIGIN_URL must be set}\n+GIT_COMMIT_SHORT,${GIT_COMMIT_SHORT:?GIT_COMMIT_SHORT must be set}\n+EOF\n+  echo \"Sponge properties:\"\n+  cat \"${KOKORO_ARTIFACTS_DIR}/custom_sponge_config.csv\"\n+}\n+\n+#######################################\n+# Export Keystore secrets assigned to the Kokoro build.\n+# Globals:\n+#   KOKORO_KEYSTORE_DIR\n+#   PRIVATE_API_KEY: Exported. Populated with name GCP project secret key.\n+#                    Used by the test driver to access private APIs\n+# Arguments:\n+#   None\n+#######################################\n+kokoro_export_secrets() {\n+  readonly PRIVATE_API_KEY=$(cat \"${KOKORO_KEYSTORE_DIR}/73836_grpc_xds_interop_tests_gcp_alpha_apis_key\")\n+  export PRIVATE_API_KEY\n+}\n+\n+#######################################\n+# Configure Python virtual environment on Kokoro VM.\n+# Arguments:\n+#   None\n+# Outputs:\n+#   Writes the output of `pyenv` commands to stdout\n+#######################################\n+kokoro_setup_python_virtual_environment() {\n+  # Kokoro provides pyenv, so use it instead `python -m venv`", "originalCommit": "9d60157223cf00819b07402df3a0ddeb072e8787", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njk5NjE5NQ==", "url": "https://github.com/grpc/grpc-java/pull/7742#discussion_r546996195", "bodyText": "Having to do this at all looks pretty scary. Instead of exporting the secret key contents, can we just put the path to the key file in PRIVATE_API_KEY and load it here?", "author": "ericgribkoff", "createdAt": "2020-12-22T00:14:58Z", "path": "buildscripts/kokoro/xds-k8s-install-test-driver.sh", "diffHunk": "@@ -0,0 +1,362 @@\n+#!/usr/bin/env bash\n+# TODO(sergiitk): move to grpc/grpc when implementing support of other languages\n+set -eo pipefail\n+\n+# Constants\n+readonly PYTHON_VERSION=\"3.6\"\n+# Test driver\n+readonly TEST_DRIVER_REPO_NAME=\"grpc\"\n+readonly TEST_DRIVER_REPO_URL=\"https://github.com/grpc/grpc.git\"\n+readonly TEST_DRIVER_BRANCH=\"${TEST_DRIVER_BRANCH:-master}\"\n+readonly TEST_DRIVER_PATH=\"tools/run_tests/xds_k8s_test_driver\"\n+readonly TEST_DRIVER_PROTOS_PATH=\"src/proto/grpc/testing\"\n+\n+#######################################\n+# Run command end report its exit code. Doesn't exit on non-zero exit code.\n+# Globals:\n+#   None\n+# Arguments:\n+#   Command to execute\n+# Outputs:\n+#   Writes the output of given command to stdout, stderr\n+#######################################\n+run_ignore_exit_code() {\n+  local exit_code=-1\n+  \"$@\" || exit_code=$?\n+  echo \"Exit code: ${exit_code}\"\n+}\n+\n+#######################################\n+# Parses information about git repository at given path to global variables.\n+# Globals:\n+#   GIT_ORIGIN_URL: Populated with the origin URL of git repo used for the build\n+#   GIT_COMMIT_SHORT: Populated with the short SHA-1 of git commit being built\n+# Arguments:\n+#   Git source dir\n+#######################################\n+parse_src_repo_git_info() {\n+  local src_dir=\"${SRC_DIR:?SRC_DIR must be set}\"\n+  readonly GIT_ORIGIN_URL=$(git -C \"${src_dir}\" remote get-url origin)\n+  readonly GIT_COMMIT_SHORT=$(git -C \"${src_dir}\" rev-parse --short HEAD)\n+}\n+\n+#######################################\n+# List GCR image tags matching given tag name.\n+# Arguments:\n+#   Image name\n+#   Tag name\n+# Outputs:\n+#   Writes the table with the list of found tags to stdout.\n+#   If no tags found, the output is an empty string.\n+#######################################\n+gcloud_gcr_list_image_tags() {\n+  gcloud container images list-tags --format=\"table[box](tags,digest,timestamp.date())\" --filter=\"tags:$2\" \"$1\"\n+}\n+\n+#######################################\n+# A helper to execute `gcloud -q components update`.\n+# Arguments:\n+#   None\n+# Outputs:\n+#   Writes the output of `gcloud` command to stdout, stderr\n+#######################################\n+gcloud_update() {\n+  echo \"Update gcloud components:\"\n+  gcloud -q components update\n+}\n+\n+#######################################\n+# Create kube context authenticated with GKE cluster, saves context name.\n+# to KUBE_CONTEXT\n+# Globals:\n+#   GKE_CLUSTER_NAME\n+#   GKE_CLUSTER_ZONE\n+#   KUBE_CONTEXT: Populated with name of kubectl context with GKE cluster access\n+# Arguments:\n+#   None\n+# Outputs:\n+#   Writes the output of `gcloud` command to stdout, stderr\n+#   Writes authorization info $HOME/.kube/config\n+#######################################\n+gcloud_get_cluster_credentials() {\n+  gcloud container clusters get-credentials \"${GKE_CLUSTER_NAME}\" --zone \"${GKE_CLUSTER_ZONE}\"\n+  readonly KUBE_CONTEXT=\"$(kubectl config current-context)\"\n+}\n+\n+#######################################\n+# Clone the source code of the test driver to $TEST_DRIVER_REPO_DIR, unless\n+# given folder exists.\n+# Globals:\n+#   TEST_DRIVER_REPO_DIR\n+#   TEST_DRIVER_REPO_URL\n+#   TEST_DRIVER_BRANCH\n+# Arguments:\n+#   None\n+# Outputs:\n+#   Writes the output of `git` command to stdout, stderr\n+#   Writes driver source code to $TEST_DRIVER_REPO_DIR\n+#######################################\n+test_driver_get_source() {\n+  if [[ -d \"${TEST_DRIVER_REPO_DIR}\" ]]; then\n+    echo \"Found driver directory: ${TEST_DRIVER_REPO_DIR}\"\n+  else\n+    echo \"Cloning driver to ${TEST_DRIVER_REPO_URL} branch ${TEST_DRIVER_BRANCH} to ${TEST_DRIVER_REPO_DIR}\"\n+    git clone -b \"${TEST_DRIVER_BRANCH}\" --depth=1 \"${TEST_DRIVER_REPO_URL}\" \"${TEST_DRIVER_REPO_DIR}\"\n+  fi\n+}\n+\n+#######################################\n+# Install Python modules from required in $TEST_DRIVER_FULL_DIR/requirements.txt\n+# to Python virtual environment. Creates and activates Python venv if necessary.\n+# Globals:\n+#   TEST_DRIVER_FULL_DIR\n+#   PYTHON_VERSION\n+# Arguments:\n+#   None\n+# Outputs:\n+#   Writes the output of `python`, `pip` commands to stdout, stderr\n+#   Writes the list of installed modules to stdout\n+#######################################\n+test_driver_pip_install() {\n+  echo \"Install python dependencies\"\n+  cd \"${TEST_DRIVER_FULL_DIR}\"\n+\n+  # Create and activate virtual environment already using one\n+  if [[ -z \"${VIRTUAL_ENV}\" ]]; then\n+    local venv_dir=\"${TEST_DRIVER_FULL_DIR}/venv\"\n+    if [[ -d \"${venv_dir}\" ]]; then\n+      echo \"Found python virtual environment directory: ${venv_dir}\"\n+    else\n+      echo \"Creating python virtual environment: ${venv_dir}\"\n+      \"python${PYTHON_VERSION} -m venv ${venv_dir}\"\n+    fi\n+    # Intentional: No need to check python venv activate script.\n+    # shellcheck source=/dev/null\n+    source \"${venv_dir}/bin/activate\"\n+  fi\n+\n+  pip install -r requirements.txt\n+  echo \"Installed Python packages:\"\n+  pip list\n+}\n+\n+#######################################\n+# Compile proto-files needed for the test driver\n+# Globals:\n+#   TEST_DRIVER_REPO_DIR\n+#   TEST_DRIVER_FULL_DIR\n+#   TEST_DRIVER_PROTOS_PATH\n+# Arguments:\n+#   None\n+# Outputs:\n+#   Writes the output of `python -m grpc_tools.protoc` to stdout, stderr\n+#   Writes the list if compiled python code to stdout\n+#   Writes compiled python code with proto messages and grpc services to\n+#   $TEST_DRIVER_FULL_DIR/src/proto\n+#######################################\n+test_driver_compile_protos() {\n+  declare -a protos\n+  protos=(\n+    \"${TEST_DRIVER_PROTOS_PATH}/test.proto\"\n+    \"${TEST_DRIVER_PROTOS_PATH}/messages.proto\"\n+    \"${TEST_DRIVER_PROTOS_PATH}/empty.proto\"\n+  )\n+  echo \"Generate python code from grpc.testing protos: ${protos[*]}\"\n+  cd \"${TEST_DRIVER_REPO_DIR}\"\n+  python -m grpc_tools.protoc \\\n+    --proto_path=. \\\n+    --python_out=\"${TEST_DRIVER_FULL_DIR}\" \\\n+    --grpc_python_out=\"${TEST_DRIVER_FULL_DIR}\" \\\n+    \"${protos[@]}\"\n+  local protos_out_dir=\"${TEST_DRIVER_FULL_DIR}/${TEST_DRIVER_PROTOS_PATH}\"\n+  echo \"Generated files ${protos_out_dir}:\"\n+  ls -Fl \"${protos_out_dir}\"\n+}\n+\n+#######################################\n+# Installs the test driver and it's requirements.\n+# https://github.com/grpc/grpc/tree/master/tools/run_tests/xds_k8s_test_driver#installation\n+# Globals:\n+#   TEST_DRIVER_REPO_DIR: Populated with the path to the repo containing\n+#                         the test driver\n+#   TEST_DRIVER_FULL_DIR: Populated with the path to the test driver source code\n+# Arguments:\n+#   The directory for test driver's source code\n+# Outputs:\n+#   Writes the output to stdout, stderr\n+#######################################\n+test_driver_install() {\n+  readonly TEST_DRIVER_REPO_DIR=\"${1:?Usage test_driver_install TEST_DRIVER_REPO_DIR}\"\n+  readonly TEST_DRIVER_FULL_DIR=\"${TEST_DRIVER_REPO_DIR}/${TEST_DRIVER_PATH}\"\n+  test_driver_get_source\n+  test_driver_pip_install\n+  test_driver_compile_protos\n+}\n+\n+#######################################\n+# Outputs Kokoro image version and Ubuntu's lsb_release\n+# Arguments:\n+#   None\n+# Outputs:\n+#   Writes the output to stdout\n+#######################################\n+kokoro_print_version() {\n+  echo \"Kokoro VM version:\"\n+  if [[ -f /VERSION ]]; then\n+    cat /VERSION\n+  fi\n+  run_ignore_exit_code lsb_release -a\n+}\n+\n+#######################################\n+# Report extra information about the job via sponge properties.\n+# Globals:\n+#   KOKORO_ARTIFACTS_DIR\n+#   GIT_ORIGIN_URL\n+#   GIT_COMMIT_SHORT\n+# Arguments:\n+#   None\n+# Outputs:\n+#   Writes the output to stdout\n+#   Writes job properties to $KOKORO_ARTIFACTS_DIR/custom_sponge_config.csv\n+#######################################\n+kokoro_write_sponge_properties() {\n+  # CSV format: \"property_name\",\"property_value\"\n+  # Bump TESTS_FORMAT_VERSION when reported test name changed enough to when it\n+  # makes more sense to discard previous test results from a testgrid board.\n+  # Use GIT_ORIGIN_URL to exclude test runs executed against repo forks from\n+  # testgrid reports.\n+  cat >\"${KOKORO_ARTIFACTS_DIR}/custom_sponge_config.csv\" <<EOF\n+TESTS_FORMAT_VERSION,2\n+TESTGRID_EXCLUDE,0\n+GIT_ORIGIN_URL,${GIT_ORIGIN_URL:?GIT_ORIGIN_URL must be set}\n+GIT_COMMIT_SHORT,${GIT_COMMIT_SHORT:?GIT_COMMIT_SHORT must be set}\n+EOF\n+  echo \"Sponge properties:\"\n+  cat \"${KOKORO_ARTIFACTS_DIR}/custom_sponge_config.csv\"\n+}\n+\n+#######################################\n+# Export Keystore secrets assigned to the Kokoro build.\n+# Globals:\n+#   KOKORO_KEYSTORE_DIR\n+#   PRIVATE_API_KEY: Exported. Populated with name GCP project secret key.\n+#                    Used by the test driver to access private APIs\n+# Arguments:\n+#   None\n+#######################################\n+kokoro_export_secrets() {\n+  readonly PRIVATE_API_KEY=$(cat \"${KOKORO_KEYSTORE_DIR}/73836_grpc_xds_interop_tests_gcp_alpha_apis_key\")\n+  export PRIVATE_API_KEY\n+}\n+\n+#######################################\n+# Configure Python virtual environment on Kokoro VM.\n+# Arguments:\n+#   None\n+# Outputs:\n+#   Writes the output of `pyenv` commands to stdout\n+#######################################\n+kokoro_setup_python_virtual_environment() {\n+  # Kokoro provides pyenv, so use it instead `python -m venv`\n+  echo \"Setup pyenv environment\"\n+  eval \"$(pyenv init -)\"\n+  eval \"$(pyenv virtualenv-init -)\"\n+  py_latest_patch=\"$(pyenv versions --bare --skip-aliases | grep -E \"^${PYTHON_VERSION}\\.[0-9]{1,2}$\" | sort --version-sort | tail -n 1)\"\n+  echo \"Activating python ${py_latest_patch} virtual environment\"\n+  pyenv virtualenv \"${py_latest_patch}\" k8s_xds_test_runner\n+  pyenv local k8s_xds_test_runner\n+  pyenv activate k8s_xds_test_runner\n+}\n+\n+#######################################\n+# Installs and configures the test driver on Kokoro VM.\n+# Globals:\n+#   KOKORO_ARTIFACTS_DIR\n+#   TEST_DRIVER_REPO_NAME\n+#   SRC_DIR: Populated with absolute path to the source repo on Kokoro VM\n+#   TEST_DRIVER_REPO_DIR: Populated with the path to the repo containing\n+#                         the test driver\n+#   TEST_DRIVER_FULL_DIR: Populated with the path to the test driver source code\n+#   TEST_DRIVER_FLAGFILE: Populated with relative path to test driver flagfile\n+#   TEST_XML_OUTPUT_DIR: Populated with the path to test xUnit XML report\n+#   KUBE_CONTEXT: Populated with name of kubectl context with GKE cluster access\n+#   PRIVATE_API_KEY: Populated with name GCP project secret key. Used by the\n+#                    test driver to access private APIs\n+#   GIT_ORIGIN_URL: Populated with the origin URL of git repo used for the build\n+#   GIT_COMMIT_SHORT: Populated with the short SHA-1 of git commit being built\n+# Arguments:\n+#   The name of github repository being built\n+# Outputs:\n+#   Writes the output to stdout, stderr, files\n+#######################################\n+kokoro_setup_test_driver() {\n+  local src_repository_name=\"${1:?Usage kokoro_setup_test_driver GITHUB_REPOSITORY_NAME}\"\n+  # Capture Kokoro VM version info in the log.\n+  kokoro_print_version\n+\n+  # Kokoro clones repo to ${KOKORO_ARTIFACTS_DIR}/github/${GITHUB_REPOSITORY}\n+  local github_root=\"${KOKORO_ARTIFACTS_DIR}/github\"\n+  readonly SRC_DIR=\"${github_root}/${src_repository_name}\"\n+  local test_driver_repo_dir=\"${github_root}/${TEST_DRIVER_REPO_NAME}\"\n+  parse_src_repo_git_info SRC_DIR\n+  kokoro_write_sponge_properties\n+\n+  # Turn off command trace print before exporting secrets.", "originalCommit": "9d60157223cf00819b07402df3a0ddeb072e8787", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzAyMjA0Nw==", "url": "https://github.com/grpc/grpc-java/pull/7742#discussion_r547022047", "bodyText": "It is possible to do that. However, I see the following tradeoffs:\n\nPassing file path to with the file key content is creating a tight couple with this specific implementation. On the other hand, using environment variables for runtime configuration is quite common\nAdditional security benefits from using file are not exactly clear. If an attacker can execute a code to read an env war, what would stop them from reading the file.\n\nAlso, this secret essentially can't be used for anything else than reading discovery documents of two private APIs (which are available in gcloud source anyway).", "author": "sergiitk", "createdAt": "2020-12-22T01:52:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njk5NjE5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzAyNDEzMg==", "url": "https://github.com/grpc/grpc-java/pull/7742#discussion_r547024132", "bodyText": "I'm not concerned about an attacker executing code to read an env var; I'm concerned about us accidentally leaking the contents of the private key into publicly accessible log output. What the secret is currently used for is also not important here, as its scope could be expanded in the future. Requiring anyone working with this environment variable to have to remember, as done here, to turn off command tracing seems very error-prone.\nI don't think concerns about tight coupling with this implementation (I'm not sure I understand what that means here, anyways - we have cross-repo shell scripts that are not exactly independent already) outweigh the potential risk of dumping the raw text of the api key into public logs.", "author": "ericgribkoff", "createdAt": "2020-12-22T01:59:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njk5NjE5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzAyODMyNg==", "url": "https://github.com/grpc/grpc-java/pull/7742#discussion_r547028326", "bodyText": "To clarify: I meant tight coupling introduced in the driver itself - reading contents of a file to get a secret seems a bit arbitrary. Ideally the driver shouldn't care if it's ran on Kokoro or anywhere else, and having secret from unstructured file seems a bit too specific to how Kokoro handles keystore.\nNevertheless, I absolutely agree with accidentally leaking secrets in public logs is much worse. Plus, this would set a bad precedent.\nI'll give this a thought, and come back here.", "author": "sergiitk", "createdAt": "2020-12-22T02:15:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njk5NjE5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA1ODA5MQ==", "url": "https://github.com/grpc/grpc-java/pull/7742#discussion_r547058091", "bodyText": "As discussed in gchat, replaced the env var with a secret from Cloud Secret Manager: grpc/grpc#25042", "author": "sergiitk", "createdAt": "2020-12-22T04:14:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njk5NjE5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA2MDEyOQ==", "url": "https://github.com/grpc/grpc-java/pull/7742#discussion_r547060129", "bodyText": "Thanks. The entire turn off/turn on command trace (+x/-x) logic here can now be removed? Or at least the comments updated. Or push into  kokoro_setup_python_virtual_environment if noise from pyenv is also an issue?", "author": "ericgribkoff", "createdAt": "2020-12-22T04:23:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njk5NjE5NQ=="}], "type": "inlineReview"}, {"oid": "d34013fa3f4f40d04c66c7f8b8add517c8047ebd", "url": "https://github.com/grpc/grpc-java/commit/d34013fa3f4f40d04c66c7f8b8add517c8047ebd", "message": "buildscripts: xDS Kubernetes Interop tests buildscript", "committedDate": "2020-12-22T15:35:03Z", "type": "commit"}, {"oid": "7db7af6ae9057f72cb1b3e44d4dbe2d6560e9706", "url": "https://github.com/grpc/grpc-java/commit/7db7af6ae9057f72cb1b3e44d4dbe2d6560e9706", "message": "Improve documentation and readability", "committedDate": "2020-12-22T15:35:03Z", "type": "commit"}, {"oid": "75b09ac7279df44fdeb4422a9a719e3a5c627cb6", "url": "https://github.com/grpc/grpc-java/commit/75b09ac7279df44fdeb4422a9a719e3a5c627cb6", "message": "Uncomment security tests", "committedDate": "2020-12-22T15:35:03Z", "type": "commit"}, {"oid": "c73755055b56c5e8596745596116f88cc673c359", "url": "https://github.com/grpc/grpc-java/commit/c73755055b56c5e8596745596116f88cc673c359", "message": "Address feedback: comments, ensure correct local branch", "committedDate": "2020-12-22T15:35:03Z", "type": "commit"}, {"oid": "d89db467811ac7a40e7b9d2f5220e5ec0bab3ecb", "url": "https://github.com/grpc/grpc-java/commit/d89db467811ac7a40e7b9d2f5220e5ec0bab3ecb", "message": "Feedback: error-proof test_driver_get_source()", "committedDate": "2020-12-22T15:35:03Z", "type": "commit"}, {"oid": "2f9d0752247bc0c16edf41cf61f99b71b7997764", "url": "https://github.com/grpc/grpc-java/commit/2f9d0752247bc0c16edf41cf61f99b71b7997764", "message": "PR feedback: load API key in the driver instead", "committedDate": "2020-12-22T15:35:03Z", "type": "commit"}, {"oid": "624dbeda57151ea8a65e50847d78f5b79a65f96d", "url": "https://github.com/grpc/grpc-java/commit/624dbeda57151ea8a65e50847d78f5b79a65f96d", "message": "Remove temporary debug off as well", "committedDate": "2020-12-22T15:35:03Z", "type": "commit"}, {"oid": "c649fd9078d9ba8a8ce69a9f9ccc994c4568a1e9", "url": "https://github.com/grpc/grpc-java/commit/c649fd9078d9ba8a8ce69a9f9ccc994c4568a1e9", "message": "Make TESTGRID_EXCLUDE a variable", "committedDate": "2020-12-22T15:35:03Z", "type": "commit"}, {"oid": "c649fd9078d9ba8a8ce69a9f9ccc994c4568a1e9", "url": "https://github.com/grpc/grpc-java/commit/c649fd9078d9ba8a8ce69a9f9ccc994c4568a1e9", "message": "Make TESTGRID_EXCLUDE a variable", "committedDate": "2020-12-22T15:35:03Z", "type": "forcePushed"}, {"oid": "2d6cb3d9a31c4f09e3ad2dfc1d35df9bc4ca44d4", "url": "https://github.com/grpc/grpc-java/commit/2d6cb3d9a31c4f09e3ad2dfc1d35df9bc4ca44d4", "message": "PR feedback: Change image naming scheme", "committedDate": "2020-12-22T18:46:22Z", "type": "commit"}, {"oid": "7af408a8b7712225113a6daf600da5ac702afd69", "url": "https://github.com/grpc/grpc-java/commit/7af408a8b7712225113a6daf600da5ac702afd69", "message": "PR feedback: use temprary dir to as a docker build dir", "committedDate": "2020-12-22T19:12:35Z", "type": "commit"}, {"oid": "33603252974366ad69c5bcdc1ec3c646b5e57eff", "url": "https://github.com/grpc/grpc-java/commit/33603252974366ad69c5bcdc1ec3c646b5e57eff", "message": "Allow setting TESTGRID_EXCLUDE; change IMAGE_BUILD_SKIP to FORCE_IMAGE_BUILD; fix logic bug", "committedDate": "2020-12-22T20:34:29Z", "type": "commit"}, {"oid": "52f796573c33161013d1ad933e3aa28f871d9691", "url": "https://github.com/grpc/grpc-java/commit/52f796573c33161013d1ad933e3aa28f871d9691", "message": "Remove forgotten keystore_resource", "committedDate": "2020-12-22T23:29:31Z", "type": "commit"}, {"oid": "eec5371e598880c2248737a1a0a5f399ac93eb2a", "url": "https://github.com/grpc/grpc-java/commit/eec5371e598880c2248737a1a0a5f399ac93eb2a", "message": "TESTGRID_EXCLUDE=0 by default", "committedDate": "2020-12-23T00:30:28Z", "type": "commit"}, {"oid": "eee8ceef79b1b6fdb0059e927c6272a77a86a4ec", "url": "https://github.com/grpc/grpc-java/commit/eee8ceef79b1b6fdb0059e927c6272a77a86a4ec", "message": "one does not simply set env_vars in kokoro job config", "committedDate": "2020-12-23T03:01:46Z", "type": "commit"}]}