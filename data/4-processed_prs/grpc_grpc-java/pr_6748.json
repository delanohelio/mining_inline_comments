{"pr_number": 6748, "pr_title": "xds: improve logging for xDS workflow", "pr_createdAt": "2020-02-25T01:15:43Z", "pr_url": "https://github.com/grpc/grpc-java/pull/6748", "timeline": [{"oid": "0dc388fd8e854e4f0c27d33f975dece8d8bcd158", "url": "https://github.com/grpc/grpc-java/commit/0dc388fd8e854e4f0c27d33f975dece8d8bcd158", "message": "Implement an XdsLogger.", "committedDate": "2020-02-21T18:24:44Z", "type": "commit"}, {"oid": "f6813c5af28e32738bb5b833e0c46988a7d74071", "url": "https://github.com/grpc/grpc-java/commit/f6813c5af28e32738bb5b833e0c46988a7d74071", "message": "Improve logging for XdsClientImpl.", "committedDate": "2020-02-21T22:41:15Z", "type": "commit"}, {"oid": "551fb49213b85353544d6cb197ec248582916514", "url": "https://github.com/grpc/grpc-java/commit/551fb49213b85353544d6cb197ec248582916514", "message": "Merge branch 'master' of github.com:grpc/grpc-java into dev/improve_xds_logging_v2", "committedDate": "2020-02-21T23:54:59Z", "type": "commit"}, {"oid": "5d7a8e7f57b19832137ba75f2962e9b58992751a", "url": "https://github.com/grpc/grpc-java/commit/5d7a8e7f57b19832137ba75f2962e9b58992751a", "message": "Improve logging in XdsNameResolver.", "committedDate": "2020-02-22T00:22:22Z", "type": "commit"}, {"oid": "e91b11f30224501b65a1cbe37ed676a5a21cb9e5", "url": "https://github.com/grpc/grpc-java/commit/e91b11f30224501b65a1cbe37ed676a5a21cb9e5", "message": "Add logging for reading bootstrap.", "committedDate": "2020-02-24T23:00:10Z", "type": "commit"}, {"oid": "e7baf4fa42864f59493d3540e0de9fff39c42d09", "url": "https://github.com/grpc/grpc-java/commit/e7baf4fa42864f59493d3540e0de9fff39c42d09", "message": "Add logging for load report client.", "committedDate": "2020-02-24T23:41:18Z", "type": "commit"}, {"oid": "3f646f2145771e9c3d4c661a6ca6b93e687f9756", "url": "https://github.com/grpc/grpc-java/commit/3f646f2145771e9c3d4c661a6ca6b93e687f9756", "message": "Add logging for LB policies.", "committedDate": "2020-02-24T23:41:36Z", "type": "commit"}, {"oid": "6fc36b3b2ccd594b5fc8b95e154698b70a8354f7", "url": "https://github.com/grpc/grpc-java/commit/6fc36b3b2ccd594b5fc8b95e154698b70a8354f7", "message": "Fix counting the wrong number of server uris.", "committedDate": "2020-02-25T00:55:06Z", "type": "commit"}, {"oid": "078384e2f0825b01e8bede2ea06df83c7c80b98b", "url": "https://github.com/grpc/grpc-java/commit/078384e2f0825b01e8bede2ea06df83c7c80b98b", "message": "Log CDS config in CdsLoadBalancer.", "committedDate": "2020-02-25T01:01:34Z", "type": "commit"}, {"oid": "a71211a27506af263aa58a6ddc9e306a0b63d5d7", "url": "https://github.com/grpc/grpc-java/commit/a71211a27506af263aa58a6ddc9e306a0b63d5d7", "message": "Fix formatting issue.", "committedDate": "2020-02-25T01:16:23Z", "type": "commit"}, {"oid": "c30979fea1d7f024032a045a78fd0b1f585a402d", "url": "https://github.com/grpc/grpc-java/commit/c30979fea1d7f024032a045a78fd0b1f585a402d", "message": "Update log prefix for bootstrapper.", "committedDate": "2020-02-25T08:44:32Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDAzMzYwOA==", "url": "https://github.com/grpc/grpc-java/pull/6748#discussion_r384033608", "bodyText": "s/ChannelLogger/XdsLogger/", "author": "dapengzhang0", "createdAt": "2020-02-25T18:05:42Z", "path": "xds/src/main/java/io/grpc/xds/XdsLogger.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.xds;\n+\n+import com.google.common.base.Preconditions;\n+import io.grpc.InternalLogId;\n+import java.text.MessageFormat;\n+import java.util.logging.Level;\n+import java.util.logging.LogRecord;\n+import java.util.logging.Logger;\n+\n+/**\n+ * An xDS-specific logger for collecting xDS specific events. Information logged here goes\n+ * to the Java logger of this class.\n+ */\n+final class XdsLogger {\n+  private static final Logger logger = Logger.getLogger(XdsLogger.class.getName());\n+\n+  private final String prefix;\n+\n+  static XdsLogger withLogId(InternalLogId logId) {\n+    Preconditions.checkNotNull(logId, \"logId\");\n+    return new XdsLogger(logId.toString());\n+  }\n+\n+  static XdsLogger withPrefix(String prefix) {\n+    return new XdsLogger(prefix);\n+  }\n+\n+  private XdsLogger(String prefix) {\n+    this.prefix = Preconditions.checkNotNull(prefix, \"prefix\");\n+  }\n+\n+  boolean isLoggable(XdsLogLevel level) {\n+    Level javaLevel = toJavaLogLevel(level);\n+    return logger.isLoggable(javaLevel);\n+  }\n+\n+  void log(XdsLogLevel level, String msg) {\n+    Level javaLevel = toJavaLogLevel(level);\n+    logOnly(prefix, javaLevel, msg);\n+  }\n+\n+  void log(XdsLogLevel level, String messageFormat, Object... args) {\n+    Level javaLogLevel = toJavaLogLevel(level);\n+    if (logger.isLoggable(javaLogLevel)) {\n+      String msg = MessageFormat.format(messageFormat, args);\n+      logOnly(prefix, javaLogLevel, msg);\n+    }\n+  }\n+\n+  private static void logOnly(String prefix, Level logLevel, String msg) {\n+    if (logger.isLoggable(logLevel)) {\n+      LogRecord lr = new LogRecord(logLevel, \"[\" + prefix + \"] \" + msg);\n+      // No resource bundle as gRPC is not localized.\n+      lr.setLoggerName(logger.getName());\n+      lr.setSourceClassName(logger.getName());\n+      lr.setSourceMethodName(\"log\");\n+      logger.log(lr);\n+    }\n+  }\n+\n+  private static Level toJavaLogLevel(XdsLogLevel level) {\n+    switch (level) {\n+      case ERROR:\n+      case WARNING:\n+        return Level.FINE;\n+      case INFO:\n+        return Level.FINER;\n+      default:\n+        return Level.FINEST;\n+    }\n+  }\n+\n+  /**\n+   * Log levels. See the table below for the mapping from the XdsLogger levels to\n+   * Java logger levels.\n+   * <pre>\n+   * +---------------------+-------------------+\n+   * | ChannelLogger Level | Java Logger Level |", "originalCommit": "c30979fea1d7f024032a045a78fd0b1f585a402d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA4NjM5NQ==", "url": "https://github.com/grpc/grpc-java/pull/6748#discussion_r384086395", "bodyText": "Done.", "author": "voidzcy", "createdAt": "2020-02-25T19:45:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDAzMzYwOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDAzNDUxMg==", "url": "https://github.com/grpc/grpc-java/pull/6748#discussion_r384034512", "bodyText": "You can pass name to the second arg of allocate()", "author": "dapengzhang0", "createdAt": "2020-02-25T18:08:11Z", "path": "xds/src/main/java/io/grpc/xds/XdsNameResolver.java", "diffHunk": "@@ -93,6 +96,8 @@\n     this.backoffPolicyProvider = checkNotNull(backoffPolicyProvider, \"backoffPolicyProvider\");\n     this.stopwatchSupplier = checkNotNull(stopwatchSupplier, \"stopwatchSupplier\");\n     this.bootstrapper = checkNotNull(bootstrapper, \"bootstrapper\");\n+    logger = XdsLogger.withLogId(InternalLogId.allocate(\"xds-resolver\", null));", "originalCommit": "c30979fea1d7f024032a045a78fd0b1f585a402d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA4NjQ0NQ==", "url": "https://github.com/grpc/grpc-java/pull/6748#discussion_r384086445", "bodyText": "Done.", "author": "voidzcy", "createdAt": "2020-02-25T19:45:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDAzNDUxMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDAzNTAxNw==", "url": "https://github.com/grpc/grpc-java/pull/6748#discussion_r384035017", "bodyText": "LOG_PREFIX", "author": "dapengzhang0", "createdAt": "2020-02-25T18:10:44Z", "path": "xds/src/main/java/io/grpc/xds/Bootstrapper.java", "diffHunk": "@@ -44,6 +45,7 @@\n @Internal\n public abstract class Bootstrapper {\n \n+  private static final String logPrefix = \"xds-bootstrap\";", "originalCommit": "c30979fea1d7f024032a045a78fd0b1f585a402d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA4NjUwMA==", "url": "https://github.com/grpc/grpc-java/pull/6748#discussion_r384086500", "bodyText": "Done.", "author": "voidzcy", "createdAt": "2020-02-25T19:45:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDAzNTAxNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDAzODY1NQ==", "url": "https://github.com/grpc/grpc-java/pull/6748#discussion_r384038655", "bodyText": "BOOTSTRAP_PATH_SYS_ENV_VAR + \"={0}\"", "author": "dapengzhang0", "createdAt": "2020-02-25T18:18:09Z", "path": "xds/src/main/java/io/grpc/xds/Bootstrapper.java", "diffHunk": "@@ -54,6 +56,9 @@ public BootstrapInfo readBootstrap() throws IOException {\n         throw\n             new IOException(\"Environment variable \" + BOOTSTRAP_PATH_SYS_ENV_VAR + \" not defined.\");\n       }\n+      XdsLogger\n+          .withPrefix(logPrefix)\n+          .log(XdsLogLevel.INFO, \"GRPC_XDS_BOOTSTRAP={0}\", filePath);", "originalCommit": "c30979fea1d7f024032a045a78fd0b1f585a402d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDEwMTUwMA==", "url": "https://github.com/grpc/grpc-java/pull/6748#discussion_r384101500", "bodyText": "Done.", "author": "voidzcy", "createdAt": "2020-02-25T20:14:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDAzODY1NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA0Mjg0Ng==", "url": "https://github.com/grpc/grpc-java/pull/6748#discussion_r384042846", "bodyText": "You can pass targetName to the 2nd arg of allocate()", "author": "dapengzhang0", "createdAt": "2020-02-25T18:25:46Z", "path": "xds/src/main/java/io/grpc/xds/XdsClientImpl.java", "diffHunk": "@@ -172,6 +173,8 @@\n       ScheduledExecutorService timeService,\n       BackoffPolicy.Provider backoffPolicyProvider,\n       Supplier<Stopwatch> stopwatchSupplier) {\n+    logId = InternalLogId.allocate(\"xds-client\", null);", "originalCommit": "c30979fea1d7f024032a045a78fd0b1f585a402d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDIyMDQzMA==", "url": "https://github.com/grpc/grpc-java/pull/6748#discussion_r384220430", "bodyText": "Done.", "author": "voidzcy", "createdAt": "2020-02-26T01:02:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA0Mjg0Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA0MzM2Mg==", "url": "https://github.com/grpc/grpc-java/pull/6748#discussion_r384043362", "bodyText": "nit: Watcher", "author": "dapengzhang0", "createdAt": "2020-02-25T18:26:47Z", "path": "xds/src/main/java/io/grpc/xds/XdsClientImpl.java", "diffHunk": "@@ -230,14 +233,15 @@ private void cleanUpResources() {\n \n   @Override\n   void watchConfigData(String hostName, int port, ConfigWatcher watcher) {\n-    checkState(configWatcher == null, \"ConfigWatcher is already registered\");\n+    checkState(configWatcher == null, \"watcher for %s already registered\", hostName);", "originalCommit": "c30979fea1d7f024032a045a78fd0b1f585a402d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA4MDk5Mw==", "url": "https://github.com/grpc/grpc-java/pull/6748#discussion_r384080993", "bodyText": "Ah... I guess I've already messed up the format of Precondition error messages. Previously I always put whole sentences (i.e., starting with capitalized word and ending with a period). But latter I found that verbose and saw other places in our codebase put error messages as concise as possible. It doesn't need to be grammatically correct and should skip words like \"a/an\", \"the\", etc. So I decided to follow that style.\nFor log messages, they still starts with capitalized word. But I may not put a period, as sometimes as period may be misleading (e.g., when the log message ends with and IP address).", "author": "voidzcy", "createdAt": "2020-02-25T19:35:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA0MzM2Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA1NTMwMA==", "url": "https://github.com/grpc/grpc-java/pull/6748#discussion_r384055300", "bodyText": "You can pass helper.getAuthority() to the 2nd arg of allocate().", "author": "dapengzhang0", "createdAt": "2020-02-25T18:48:10Z", "path": "xds/src/main/java/io/grpc/xds/CdsLoadBalancer.java", "diffHunk": "@@ -74,38 +74,28 @@\n   @VisibleForTesting\n   CdsLoadBalancer(Helper helper, LoadBalancerRegistry lbRegistry,\n       TlsContextManager tlsContextManager) {\n-    this.helper = helper;\n-    this.channelLogger = helper.getChannelLogger();\n+    logger = XdsLogger.withLogId(InternalLogId.allocate(\"cds-lb\", null));", "originalCommit": "c30979fea1d7f024032a045a78fd0b1f585a402d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA5MTE2OQ==", "url": "https://github.com/grpc/grpc-java/pull/6748#discussion_r384091169", "bodyText": "Done. Same for EDS lb policy. But I doubt if this is useful as each LB policies has its internal resource resolution with xDS resource names. We don't have separate log prefixes for the inner components (i.e., ClusterBalancer, ClusterEndpointsLoadBalancer, etc) that do the real load balancing. Anyway, it would be fine for alpha as it will not have any cluster/cluster_service switches and LB policy instances in the hierarchy do not change.", "author": "voidzcy", "createdAt": "2020-02-25T19:54:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA1NTMwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA5ODA3OQ==", "url": "https://github.com/grpc/grpc-java/pull/6748#discussion_r384098079", "bodyText": "I agree helper.getAuthority() only helps temporarily. We may have better tracking of the component tree in the future.", "author": "dapengzhang0", "createdAt": "2020-02-25T20:07:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA1NTMwMA=="}], "type": "inlineReview"}, {"oid": "c2ea77745f47e5a80a03022a3d14362f6ce53cfd", "url": "https://github.com/grpc/grpc-java/commit/c2ea77745f47e5a80a03022a3d14362f6ce53cfd", "message": "Fix typo in comments.", "committedDate": "2020-02-25T19:14:41Z", "type": "commit"}, {"oid": "44ff29c6f846eab745b7e3c1e15fea1e49c8d819", "url": "https://github.com/grpc/grpc-java/commit/44ff29c6f846eab745b7e3c1e15fea1e49c8d819", "message": "Show target name in log prefix.", "committedDate": "2020-02-25T19:41:12Z", "type": "commit"}, {"oid": "4557e9ce54df9f3c366369ae9a12a2c35d9349b7", "url": "https://github.com/grpc/grpc-java/commit/4557e9ce54df9f3c366369ae9a12a2c35d9349b7", "message": "Fix style issue.", "committedDate": "2020-02-25T19:56:29Z", "type": "commit"}, {"oid": "4557e9ce54df9f3c366369ae9a12a2c35d9349b7", "url": "https://github.com/grpc/grpc-java/commit/4557e9ce54df9f3c366369ae9a12a2c35d9349b7", "message": "Fix style issue.", "committedDate": "2020-02-25T19:56:29Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDEzMTQyNA==", "url": "https://github.com/grpc/grpc-java/pull/6748#discussion_r384131424", "bodyText": "\"Received EDS lb config:\\n{0}\", newXdsConfig", "author": "dapengzhang0", "createdAt": "2020-02-25T21:17:47Z", "path": "xds/src/main/java/io/grpc/xds/EdsLoadBalancer.java", "diffHunk": "@@ -91,29 +92,40 @@\n       LocalityStoreFactory localityStoreFactory,\n       Bootstrapper bootstrapper,\n       XdsChannelFactory channelFactory) {\n-    this.edsLbHelper = edsLbHelper;\n-    this.channelLogger = edsLbHelper.getChannelLogger();\n-    this.resourceUpdateCallback = resourceUpdateCallback;\n-    this.lbRegistry = lbRegistry;\n-    this.localityStoreFactory = localityStoreFactory;\n+    this.edsLbHelper = checkNotNull(edsLbHelper, \"edsLbHelper\");\n+    this.resourceUpdateCallback = checkNotNull(resourceUpdateCallback, \"resourceUpdateCallback\");\n+    this.lbRegistry = checkNotNull(lbRegistry, \"lbRegistry\");\n+    this.localityStoreFactory = checkNotNull(localityStoreFactory, \"localityStoreFactory\");\n+    this.bootstrapper = checkNotNull(bootstrapper, \"bootstrapper\");\n+    this.channelFactory = checkNotNull(channelFactory, \"channelFactory\");\n     this.switchingLoadBalancer = new GracefulSwitchLoadBalancer(edsLbHelper);\n-    this.bootstrapper = bootstrapper;\n-    this.channelFactory = channelFactory;\n+    logId = InternalLogId.allocate(\"eds-lb\", edsLbHelper.getAuthority());\n+    logger = XdsLogger.withLogId(logId);\n+    logger.log(XdsLogLevel.INFO, \"Created\");\n   }\n \n   @Override\n   public void handleResolvedAddresses(ResolvedAddresses resolvedAddresses) {\n-    channelLogger.log(ChannelLogLevel.DEBUG, \"Received ResolvedAddresses {0}\", resolvedAddresses);\n-\n+    logger.log(XdsLogLevel.DEBUG, \"Received resolution result: {0}\", resolvedAddresses);\n     Object lbConfig = resolvedAddresses.getLoadBalancingPolicyConfig();\n-    if (!(lbConfig instanceof XdsConfig)) {\n+    if (lbConfig == null) {\n       edsLbHelper.updateBalancingState(\n           TRANSIENT_FAILURE,\n-          new ErrorPicker(Status.UNAVAILABLE.withDescription(\n-              \"Load balancing config '\" + lbConfig + \"' is not an XdsConfig\")));\n+          new ErrorPicker(Status.UNAVAILABLE.withDescription(\"Missing EDS lb config\")));\n       return;\n     }\n     XdsConfig newXdsConfig = (XdsConfig) lbConfig;\n+    if (logger.isLoggable(XdsLogLevel.INFO)) {\n+      logger.log(\n+          XdsLogLevel.INFO,\n+          \"Received EDS lb config: cluster={0}, child_policy={1}, fallback_policy={2}, \"", "originalCommit": "4557e9ce54df9f3c366369ae9a12a2c35d9349b7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE3NDU4NA==", "url": "https://github.com/grpc/grpc-java/pull/6748#discussion_r384174584", "bodyText": "I intended to have INFO level logs being informative, descriptive and natural, and DEBUG level logs revealing the real implementation details. Printing out object's toString() always have the square bracket inclosing it. This isn't that comfortable for reading.", "author": "voidzcy", "createdAt": "2020-02-25T22:49:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDEzMTQyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE4MDU0Mg==", "url": "https://github.com/grpc/grpc-java/pull/6748#discussion_r384180542", "bodyText": "You'll have to reimplement this message every time the config is change. Look at the refactoring xds design, how complicated the child_policy will be.", "author": "dapengzhang0", "createdAt": "2020-02-25T23:04:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDEzMTQyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE4MDgxNw==", "url": "https://github.com/grpc/grpc-java/pull/6748#discussion_r384180817", "bodyText": "I don't see much benefit to separately log them in INFO level and DEBUG level, which is quite duplicate.", "author": "dapengzhang0", "createdAt": "2020-02-25T23:05:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDEzMTQyNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDEzMTgzNw==", "url": "https://github.com/grpc/grpc-java/pull/6748#discussion_r384131837", "bodyText": "\"Received CDS lb config:\\n{0}\", newCdsConfig", "author": "dapengzhang0", "createdAt": "2020-02-25T21:18:36Z", "path": "xds/src/main/java/io/grpc/xds/CdsLoadBalancer.java", "diffHunk": "@@ -74,38 +74,29 @@\n   @VisibleForTesting\n   CdsLoadBalancer(Helper helper, LoadBalancerRegistry lbRegistry,\n       TlsContextManager tlsContextManager) {\n-    this.helper = helper;\n-    this.channelLogger = helper.getChannelLogger();\n+    checkNotNull(helper, \"helper\");\n     this.lbRegistry = lbRegistry;\n     this.switchingLoadBalancer = new GracefulSwitchLoadBalancer(helper);\n     this.tlsContextManager = tlsContextManager;\n+    logger = XdsLogger.withLogId(InternalLogId.allocate(\"cds-lb\", helper.getAuthority()));\n+    logger.log(XdsLogLevel.INFO, \"Created\");\n   }\n \n   @Override\n   public void handleResolvedAddresses(ResolvedAddresses resolvedAddresses) {\n-    channelLogger.log(ChannelLogLevel.DEBUG, \"Received ResolvedAddresses {0}\", resolvedAddresses);\n+    logger.log(XdsLogLevel.DEBUG, \"Received resolution result: {0}\", resolvedAddresses);\n     if (xdsClientPool == null) {\n       xdsClientPool = resolvedAddresses.getAttributes().get(XdsAttributes.XDS_CLIENT_POOL);\n-      if (xdsClientPool == null) {\n-        // TODO(zdapeng): create a new xdsClient from bootstrap if no one exists.\n-        helper.updateBalancingState(\n-            TRANSIENT_FAILURE,\n-            new ErrorPicker(Status.UNAVAILABLE.withDescription(\n-                \"XDS_CLIENT_POOL attributes not available from resolve addresses\")));\n-        return;\n-      }\n+      checkNotNull(xdsClientPool, \"missing xDS client pool\");\n       xdsClient = xdsClientPool.getObject();\n     }\n \n     Object lbConfig = resolvedAddresses.getLoadBalancingPolicyConfig();\n-    if (!(lbConfig instanceof CdsConfig)) {\n-      helper.updateBalancingState(\n-          TRANSIENT_FAILURE,\n-          new ErrorPicker(Status.UNAVAILABLE.withDescription(\n-              \"Load balancing config '\" + lbConfig + \"' is not a CdsConfig\")));\n-      return;\n-    }\n+    checkNotNull(lbConfig, \"missing CDS lb config\");\n     CdsConfig newCdsConfig = (CdsConfig) lbConfig;\n+    logger.log(\n+        XdsLogLevel.INFO,\n+        \"Received CDS lb config: cluster={0}\", newCdsConfig.name);", "originalCommit": "4557e9ce54df9f3c366369ae9a12a2c35d9349b7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE3ODA1Mw==", "url": "https://github.com/grpc/grpc-java/pull/6748#discussion_r384178053", "bodyText": "Same as above.", "author": "voidzcy", "createdAt": "2020-02-25T22:58:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDEzMTgzNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDEzMjg5Ng==", "url": "https://github.com/grpc/grpc-java/pull/6748#discussion_r384132896", "bodyText": "Override toString() for ClusterUpdate, then\n\"Received cluster update from xDS client:\\n{0}\", newUpdate", "author": "dapengzhang0", "createdAt": "2020-02-25T21:20:42Z", "path": "xds/src/main/java/io/grpc/xds/CdsLoadBalancer.java", "diffHunk": "@@ -274,11 +272,16 @@ protected Helper delegate() {\n \n     @Override\n     public void onClusterChanged(ClusterUpdate newUpdate) {\n-      channelLogger.log(\n-          ChannelLogLevel.DEBUG, \"CDS load balancer received a cluster update: {0}\",  newUpdate);\n+      if (logger.isLoggable(XdsLogLevel.INFO)) {\n+        logger.log(\n+            XdsLogLevel.INFO,\n+            \"Received cluster update from xDS client {0}: \"", "originalCommit": "4557e9ce54df9f3c366369ae9a12a2c35d9349b7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE3OTczNQ==", "url": "https://github.com/grpc/grpc-java/pull/6748#discussion_r384179735", "bodyText": "For INFO level log, I would prefer to not print out object directly. Another reason is that, I saw Sanjay is adding other fields to ClusterUpdate, those are not things we are interested in. It's fine to print them in DEBUG level logs (since we know what's going on), but for INFO level logs, they should not be shown.", "author": "voidzcy", "createdAt": "2020-02-25T23:02:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDEzMjg5Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDEzMzg0Mg==", "url": "https://github.com/grpc/grpc-java/pull/6748#discussion_r384133842", "bodyText": "Override toString() for EndpointUpdate", "author": "dapengzhang0", "createdAt": "2020-02-25T21:22:35Z", "path": "xds/src/main/java/io/grpc/xds/EdsLoadBalancer.java", "diffHunk": "@@ -328,10 +368,17 @@ public void shutdown() {\n \n     @Override\n     public void onEndpointChanged(EndpointUpdate endpointUpdate) {\n-      channelLogger.log(\n-          ChannelLogLevel.DEBUG,\n-          \"EDS load balancer received an endpoint update: {0}\",\n-          endpointUpdate);\n+      logger.log(XdsLogLevel.DEBUG, \"Received endpoint update: {0}\", endpointUpdate);", "originalCommit": "4557e9ce54df9f3c366369ae9a12a2c35d9349b7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDIxMjE3OQ==", "url": "https://github.com/grpc/grpc-java/pull/6748#discussion_r384212179", "bodyText": "It is already overridden.", "author": "voidzcy", "createdAt": "2020-02-26T00:35:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDEzMzg0Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDEzNDMzOA==", "url": "https://github.com/grpc/grpc-java/pull/6748#discussion_r384134338", "bodyText": "Duplicate logging?", "author": "dapengzhang0", "createdAt": "2020-02-25T21:23:37Z", "path": "xds/src/main/java/io/grpc/xds/EdsLoadBalancer.java", "diffHunk": "@@ -328,10 +368,17 @@ public void shutdown() {\n \n     @Override\n     public void onEndpointChanged(EndpointUpdate endpointUpdate) {\n-      channelLogger.log(\n-          ChannelLogLevel.DEBUG,\n-          \"EDS load balancer received an endpoint update: {0}\",\n-          endpointUpdate);\n+      logger.log(XdsLogLevel.DEBUG, \"Received endpoint update: {0}\", endpointUpdate);\n+      if (logger.isLoggable(XdsLogLevel.INFO)) {\n+        logger.log(", "originalCommit": "4557e9ce54df9f3c366369ae9a12a2c35d9349b7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE3Nzk1NQ==", "url": "https://github.com/grpc/grpc-java/pull/6748#discussion_r384177955", "bodyText": "EndpointUpdate contains complex fields, printing out the whole object in INFO level seems to be too verbose.\nYes, in some places we tend to do both INFO and DEBUG logging. INFO log will let you briefly gauge what's happening and DEBUG log is helpful for debugging the implementation. I would expect normal users (i.e., people do not read the actual code) to look at INFO log for the most and implementors to look at DEBUG logs for finding out issues. That's why I would like to make INFO logs natural and reader-friendly, avoid printing out implementation details.", "author": "voidzcy", "createdAt": "2020-02-25T22:57:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDEzNDMzOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDEzNTE2MA==", "url": "https://github.com/grpc/grpc-java/pull/6748#discussion_r384135160", "bodyText": "nit: add \\n after :", "author": "dapengzhang0", "createdAt": "2020-02-25T21:25:30Z", "path": "xds/src/main/java/io/grpc/xds/EdsLoadBalancer.java", "diffHunk": "@@ -188,7 +203,7 @@ XdsClient createXdsClient() {\n \n   @Override\n   public void handleNameResolutionError(Status error) {\n-    channelLogger.log(ChannelLogLevel.ERROR, \"Name resolution error: {0}\", error);\n+    logger.log(XdsLogLevel.WARNING, \"Received name resolution error: {0}\", error);", "originalCommit": "4557e9ce54df9f3c366369ae9a12a2c35d9349b7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDIxNzU4OA==", "url": "https://github.com/grpc/grpc-java/pull/6748#discussion_r384217588", "bodyText": "New line here won't help much. The string format of Status will still be something like [... cause=<STACKTRACE>].", "author": "voidzcy", "createdAt": "2020-02-26T00:53:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDEzNTE2MA=="}], "type": "inlineReview"}, {"oid": "6500ce44bc0702530eaa498f4d446a191feb4261", "url": "https://github.com/grpc/grpc-java/commit/6500ce44bc0702530eaa498f4d446a191feb4261", "message": "Make log messages for receiving watcher error more informative. Do not print out cause stacktrace.", "committedDate": "2020-02-26T00:55:09Z", "type": "commit"}, {"oid": "67df5fee7bf278557145e82a49c4458438876873", "url": "https://github.com/grpc/grpc-java/commit/67df5fee7bf278557145e82a49c4458438876873", "message": "Merge branch 'master' of github.com:grpc/grpc-java into dev/improve_xds_logging_v2", "committedDate": "2020-02-26T01:01:41Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDIyNTkxNQ==", "url": "https://github.com/grpc/grpc-java/pull/6748#discussion_r384225915", "bodyText": "checkNotNull()?", "author": "dapengzhang0", "createdAt": "2020-02-26T01:19:09Z", "path": "xds/src/main/java/io/grpc/xds/EdsLoadBalancer.java", "diffHunk": "@@ -91,29 +92,40 @@\n       LocalityStoreFactory localityStoreFactory,\n       Bootstrapper bootstrapper,\n       XdsChannelFactory channelFactory) {\n-    this.edsLbHelper = edsLbHelper;\n-    this.channelLogger = edsLbHelper.getChannelLogger();\n-    this.resourceUpdateCallback = resourceUpdateCallback;\n-    this.lbRegistry = lbRegistry;\n-    this.localityStoreFactory = localityStoreFactory;\n+    this.edsLbHelper = checkNotNull(edsLbHelper, \"edsLbHelper\");\n+    this.resourceUpdateCallback = checkNotNull(resourceUpdateCallback, \"resourceUpdateCallback\");\n+    this.lbRegistry = checkNotNull(lbRegistry, \"lbRegistry\");\n+    this.localityStoreFactory = checkNotNull(localityStoreFactory, \"localityStoreFactory\");\n+    this.bootstrapper = checkNotNull(bootstrapper, \"bootstrapper\");\n+    this.channelFactory = checkNotNull(channelFactory, \"channelFactory\");\n     this.switchingLoadBalancer = new GracefulSwitchLoadBalancer(edsLbHelper);\n-    this.bootstrapper = bootstrapper;\n-    this.channelFactory = channelFactory;\n+    logId = InternalLogId.allocate(\"eds-lb\", edsLbHelper.getAuthority());\n+    logger = XdsLogger.withLogId(logId);\n+    logger.log(XdsLogLevel.INFO, \"Created\");\n   }\n \n   @Override\n   public void handleResolvedAddresses(ResolvedAddresses resolvedAddresses) {\n-    channelLogger.log(ChannelLogLevel.DEBUG, \"Received ResolvedAddresses {0}\", resolvedAddresses);\n-\n+    logger.log(XdsLogLevel.DEBUG, \"Received resolution result: {0}\", resolvedAddresses);\n     Object lbConfig = resolvedAddresses.getLoadBalancingPolicyConfig();\n-    if (!(lbConfig instanceof XdsConfig)) {\n+    if (lbConfig == null) {", "originalCommit": "67df5fee7bf278557145e82a49c4458438876873", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDIzNjA3NA==", "url": "https://github.com/grpc/grpc-java/pull/6748#discussion_r384236074", "bodyText": "Since we have EDS-only use case, we should be more tolerant for ResolvedAddesses received externally. For CDS policy, it's always the XdsNameResolver gives us the resolution result, so we assert it should be guaranteed to be there. Otherwise, it's our bug. But for EDS policy, in EDS-only mode we get resolution result from DnsNameResolver, which doesn't guarantee a load balancing config. If EDS policy does not receive the EDS config, it could be the remote system's issue. We should just handle that gracefully.", "author": "voidzcy", "createdAt": "2020-02-26T01:57:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDIyNTkxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDY2NjY3MA==", "url": "https://github.com/grpc/grpc-java/pull/6748#discussion_r384666670", "bodyText": "DnsNameResolver will parse the config while selecting lb policy. If it's not EDS config when EDS policy is selected it will handleResolutionError.", "author": "dapengzhang0", "createdAt": "2020-02-26T18:02:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDIyNTkxNQ=="}], "type": "inlineReview"}]}