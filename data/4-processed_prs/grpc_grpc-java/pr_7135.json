{"pr_number": 7135, "pr_title": "xds: address filtering", "pr_createdAt": "2020-06-16T17:47:57Z", "pr_url": "https://github.com/grpc/grpc-java/pull/7135", "timeline": [{"oid": "795606a25bc09d9f59316d2eaafc0b213275661a", "url": "https://github.com/grpc/grpc-java/commit/795606a25bc09d9f59316d2eaafc0b213275661a", "message": "xds: address filtering", "committedDate": "2020-06-16T17:41:09Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTEyNTUzMw==", "url": "https://github.com/grpc/grpc-java/pull/7135#discussion_r441125533", "bodyText": "Those two checkers are not useful, it's redundant code.  If the arguments are null, it breaks immediately, same as what the checkers are doing. Same for below.", "author": "voidzcy", "createdAt": "2020-06-16T20:34:29Z", "path": "xds/src/main/java/io/grpc/xds/AddressFiltering.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.xds;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import io.grpc.Attributes;\n+import io.grpc.EquivalentAddressGroup;\n+import io.grpc.NameResolver.ResolutionResultAttr;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import javax.annotation.Nullable;\n+\n+final class AddressFiltering {\n+  @ResolutionResultAttr\n+  private static final Attributes.Key<PathChain> PATH_CHAIN_KEY =\n+      Attributes.Key.create(\"io.grpc.xds.AddressFilter.PATH_CHAIN_KEY\");\n+\n+  // Prevent instantiation.\n+  private AddressFiltering() {}\n+\n+  /**\n+   * Sets a path filter to an EquivalentAddressGroup. Any preexisting path filter will be discarded.\n+   */\n+  static EquivalentAddressGroup setPathFilter(EquivalentAddressGroup address, List<String> names) {\n+    checkNotNull(address, \"address\");", "originalCommit": "795606a25bc09d9f59316d2eaafc0b213275661a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE4MDM1NQ==", "url": "https://github.com/grpc/grpc-java/pull/7135#discussion_r441180355", "bodyText": "The purpose of the checker is to provide a message (no matter it's a dummy string) rather than only a stacktrace. Because from the bug reporter's stacktrace you can only guess which field is null from the line number in the code, but the line number might be changing from commit to commit.  NPE in the stacktrace sometime does not infer which object is null. For example, in\naddress.getAttributes().get(foo).equals()\nThe null object could be (theoretically) address, address.getAttributes() or address.getAttributes().get(foo)", "author": "dapengzhang0", "createdAt": "2020-06-16T22:36:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTEyNTUzMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE4MzE1MA==", "url": "https://github.com/grpc/grpc-java/pull/7135#discussion_r441183150", "bodyText": "Whatever, not a big issue, I don't mind if you leave it there. Although, IMO, this kind of code is redundant. BTW, you do get different stacktrace for each part of address.getAttributes().get(foo).equals() being null and you can mostly tell what's wrong from there.", "author": "voidzcy", "createdAt": "2020-06-16T22:44:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTEyNTUzMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE5MTMxMQ==", "url": "https://github.com/grpc/grpc-java/pull/7135#discussion_r441191311", "bodyText": "you do get different stacktrace\n\nNot before Java 14 https://openjdk.java.net/jeps/358", "author": "dapengzhang0", "createdAt": "2020-06-16T23:09:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTEyNTUzMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE5Mjc0Mw==", "url": "https://github.com/grpc/grpc-java/pull/7135#discussion_r441192743", "bodyText": "Whatever, I'm not going to make simple things complex.", "author": "voidzcy", "createdAt": "2020-06-16T23:13:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTEyNTUzMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTEzNjY4NQ==", "url": "https://github.com/grpc/grpc-java/pull/7135#discussion_r441136685", "bodyText": "A simple List or Queue works well,  I don't see the necessity of implementing such a \"linked nodes\".", "author": "voidzcy", "createdAt": "2020-06-16T20:55:50Z", "path": "xds/src/main/java/io/grpc/xds/AddressFiltering.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.xds;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import io.grpc.Attributes;\n+import io.grpc.EquivalentAddressGroup;\n+import io.grpc.NameResolver.ResolutionResultAttr;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import javax.annotation.Nullable;\n+\n+final class AddressFiltering {\n+  @ResolutionResultAttr\n+  private static final Attributes.Key<PathChain> PATH_CHAIN_KEY =\n+      Attributes.Key.create(\"io.grpc.xds.AddressFilter.PATH_CHAIN_KEY\");\n+\n+  // Prevent instantiation.\n+  private AddressFiltering() {}\n+\n+  /**\n+   * Sets a path filter to an EquivalentAddressGroup. Any preexisting path filter will be discarded.\n+   */\n+  static EquivalentAddressGroup setPathFilter(EquivalentAddressGroup address, List<String> names) {\n+    checkNotNull(address, \"address\");\n+    checkNotNull(names, \"names\");\n+    Attributes.Builder attrBuilder = address.getAttributes().toBuilder().discard(PATH_CHAIN_KEY);\n+    PathChain pathChain = null;", "originalCommit": "795606a25bc09d9f59316d2eaafc0b213275661a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE4MjIwNA==", "url": "https://github.com/grpc/grpc-java/pull/7135#discussion_r441182204", "bodyText": "For a List, you either have to maintain an index, or make a copy sublist each time when you filter to the next hierarchy. As for Queue, the pop() method may mutate the original address.\nThe linked node is a private class hinden from the user.", "author": "dapengzhang0", "createdAt": "2020-06-16T22:41:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTEzNjY4NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE4NTY0OA==", "url": "https://github.com/grpc/grpc-java/pull/7135#discussion_r441185648", "bodyText": "LinkedList works perfectly.\n\nAs for Queue, the pop() method may mutate the original address.\n\nThis argument does not make sense. Everything happens internally inside the utility method's implementation, the only person that mutates the address is the author of this class. There is no information leaking.", "author": "voidzcy", "createdAt": "2020-06-16T22:52:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTEzNjY4NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE4ODM2Ng==", "url": "https://github.com/grpc/grpc-java/pull/7135#discussion_r441188366", "bodyText": "This argument does not make sense. Everything happens internally inside the utility method's implementation, the only person that mutates the address is the author of this class. There is no information leaking.\n\nThere is no point to use pop() for the author of this class. You still need to make a copy, because the original address should not be mutated when you call filter().", "author": "dapengzhang0", "createdAt": "2020-06-16T23:00:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTEzNjY4NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE5MjI0MQ==", "url": "https://github.com/grpc/grpc-java/pull/7135#discussion_r441192241", "bodyText": "I guess you really mean poll() or remove().\nWhy the address (except its attribute) will be mutated? Each EquivalentAddressGroup holds a LinkedList and each time you do filter, just peeks/polls the first element from the list and done. With current implementation, you holding the head of linked nodes, and each time you \"poll\" the head, you need to update the reference to point to the next node.", "author": "voidzcy", "createdAt": "2020-06-16T23:12:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTEzNjY4NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE5MzU0MA==", "url": "https://github.com/grpc/grpc-java/pull/7135#discussion_r441193540", "bodyText": "Why the address (except its attribute) will be mutated?\n\nI mean the attribute of the original address will be mutated. We should not.\nI don't mind to make a copy sublist each time calling filter() if you prefer. In that case, an ArrayList will do.", "author": "dapengzhang0", "createdAt": "2020-06-16T23:16:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTEzNjY4NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE5NjIwMw==", "url": "https://github.com/grpc/grpc-java/pull/7135#discussion_r441196203", "bodyText": "I mean the attribute of the original address will be mutated. We should not.\n\nWhy is that related to what we are discussing here? You do the same thing as what you are doing now:\nreturn new EquivalentAddressGroup(address.getAddresses(), attrBuilder.build());\nThe only change is PATH_CHAIN_KEY is a key for a List (implementation-wise, a LinkedList).\n\nI don't mind to make a copy sublist each time calling filter() if you prefer.\n\nWhy calling filter() each time will make a copy? You just poll the first element from the list, that's an O(1) operation for LinkedList.", "author": "voidzcy", "createdAt": "2020-06-16T23:25:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTEzNjY4NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE5ODgxOA==", "url": "https://github.com/grpc/grpc-java/pull/7135#discussion_r441198818", "bodyText": "I mean the attribute of the original address will be mutated. We should not.\n\n\n\nWhy is that related to what we are discussing here? You do the same thing as what you are doing now:\nreturn new EquivalentAddressGroup(address.getAddresses(), attrBuilder.build());\n\nThat's totally different (I'm not talking about setPathFilter()). The current implementation of filter() doesn't mutate the input EAGs or their attributes. The poll() will, and that's not allowed.", "author": "dapengzhang0", "createdAt": "2020-06-16T23:33:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTEzNjY4NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIwMTc0OQ==", "url": "https://github.com/grpc/grpc-java/pull/7135#discussion_r441201749", "bodyText": "The current implementation of filter() doesn't mutate the input EAGs or their attributes.\n\nNo, that should not be the case. You should not always return a new EquivalentAddressGroup. We are using PATH_CHAIN_KEY as an internal trick to mark and pass address information. This attribute is only known to those two layers of LB policies. Keeping input EquivalentAddressGroups of filter() is a redundant requirement.", "author": "voidzcy", "createdAt": "2020-06-16T23:44:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTEzNjY4NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIwNTEwMQ==", "url": "https://github.com/grpc/grpc-java/pull/7135#discussion_r441205101", "bodyText": "Keeping input EquivalentAddressGroups of filter() is a redundant requirement.\n\nNo, it is a requirement. You must not mutate the input. For example, it's possible that the input EAGs are cached and used for the child LBs next time, in which case poll() twice is illegal.", "author": "dapengzhang0", "createdAt": "2020-06-16T23:56:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTEzNjY4NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIxMjkyNw==", "url": "https://github.com/grpc/grpc-java/pull/7135#discussion_r441212927", "bodyText": "Ok, that makes sense. So these two utility methods should really be free of side effect. Then you might want to update the comments and method names, current ones are misleading.", "author": "voidzcy", "createdAt": "2020-06-17T00:24:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTEzNjY4NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTEzNzgzNw==", "url": "https://github.com/grpc/grpc-java/pull/7135#discussion_r441137837", "bodyText": "Class names should be a noun, even if it is not intended to be instantiated.", "author": "voidzcy", "createdAt": "2020-06-16T20:58:00Z", "path": "xds/src/main/java/io/grpc/xds/AddressFiltering.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.xds;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import io.grpc.Attributes;\n+import io.grpc.EquivalentAddressGroup;\n+import io.grpc.NameResolver.ResolutionResultAttr;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import javax.annotation.Nullable;\n+\n+final class AddressFiltering {", "originalCommit": "795606a25bc09d9f59316d2eaafc0b213275661a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE4MzUxNw==", "url": "https://github.com/grpc/grpc-java/pull/7135#discussion_r441183517", "bodyText": "AddressFiltering is a noun, and it implies it has no instance. Whatsoever... Refactored.", "author": "dapengzhang0", "createdAt": "2020-06-16T22:45:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTEzNzgzNw=="}], "type": "inlineReview"}, {"oid": "92e97f135b005551117be28fda46f6587c406a24", "url": "https://github.com/grpc/grpc-java/commit/92e97f135b005551117be28fda46f6587c406a24", "message": "refactor class name", "committedDate": "2020-06-16T22:43:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIxMzM4NA==", "url": "https://github.com/grpc/grpc-java/pull/7135#discussion_r441213384", "bodyText": "It may not be a good practice to make such a strong assumption for a utility method (it makes the method weak). You can just skip that address if the attribute does not exist.", "author": "voidzcy", "createdAt": "2020-06-17T00:26:17Z", "path": "xds/src/main/java/io/grpc/xds/AddressFilter.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.xds;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import io.grpc.Attributes;\n+import io.grpc.EquivalentAddressGroup;\n+import io.grpc.NameResolver.ResolutionResultAttr;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import javax.annotation.Nullable;\n+\n+final class AddressFilter {\n+  @ResolutionResultAttr\n+  private static final Attributes.Key<PathChain> PATH_CHAIN_KEY =\n+      Attributes.Key.create(\"io.grpc.xds.AddressFilter.PATH_CHAIN_KEY\");\n+\n+  // Prevent instantiation.\n+  private AddressFilter() {}\n+\n+  /**\n+   * Sets a path filter to an EquivalentAddressGroup. Any preexisting path filter will be discarded.\n+   */\n+  static EquivalentAddressGroup setPathFilter(EquivalentAddressGroup address, List<String> names) {\n+    checkNotNull(address, \"address\");\n+    checkNotNull(names, \"names\");\n+    Attributes.Builder attrBuilder = address.getAttributes().toBuilder().discard(PATH_CHAIN_KEY);\n+    PathChain pathChain = null;\n+    for (String name : names) {\n+      if (pathChain == null) {\n+        pathChain = new PathChain(name);\n+        attrBuilder.set(PATH_CHAIN_KEY, pathChain);\n+      } else {\n+        pathChain.next = new PathChain(name);\n+      }\n+    }\n+    return new EquivalentAddressGroup(address.getAddresses(), attrBuilder.build());\n+  }\n+\n+  /**\n+   * Selects addresses from the given list such that the first element in the path filter is\n+   * identical to the given name, and returns the selected addresses with that first element removed\n+   * from the path filter.\n+   */\n+  static List<EquivalentAddressGroup> filter(List<EquivalentAddressGroup> addresses, String name) {\n+    checkNotNull(addresses, \"addresses\");\n+    checkNotNull(name, \"name\");\n+    List<EquivalentAddressGroup> filteredAddresses = new ArrayList<>();\n+    for (EquivalentAddressGroup address : addresses) {\n+      PathChain pathChain =\n+          checkNotNull(address.getAttributes().get(PATH_CHAIN_KEY), \"Not a hierarchical address\");", "originalCommit": "92e97f135b005551117be28fda46f6587c406a24", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTgzMDIyMQ==", "url": "https://github.com/grpc/grpc-java/pull/7135#discussion_r441830221", "bodyText": "Skip the address now. I found C is doing the same.", "author": "dapengzhang0", "createdAt": "2020-06-17T20:58:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIxMzM4NA=="}], "type": "inlineReview"}, {"oid": "2022349fd8b5bbbc29cd59024b00355d1395ca3c", "url": "https://github.com/grpc/grpc-java/commit/2022349fd8b5bbbc29cd59024b00355d1395ca3c", "message": "improve javadoc", "committedDate": "2020-06-17T02:30:23Z", "type": "commit"}, {"oid": "fbe970574d9594b3a1062aacc85a0e59abb3ec23", "url": "https://github.com/grpc/grpc-java/commit/fbe970574d9594b3a1062aacc85a0e59abb3ec23", "message": "ignore non-hierarchical addresses", "committedDate": "2020-06-17T20:55:23Z", "type": "commit"}]}