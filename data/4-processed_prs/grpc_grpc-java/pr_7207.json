{"pr_number": 7207, "pr_title": "Add xds client flags", "pr_createdAt": "2020-07-14T00:23:32Z", "pr_url": "https://github.com/grpc/grpc-java/pull/7207", "timeline": [{"oid": "35efa232059788358fd64ea96ece1119c3b13948", "url": "https://github.com/grpc/grpc-java/commit/35efa232059788358fd64ea96ece1119c3b13948", "message": "interop-testing: add flags to xds test client", "committedDate": "2020-07-14T00:22:56Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDcyNzUzNw==", "url": "https://github.com/grpc/grpc-java/pull/7207#discussion_r454727537", "bodyText": "Let's call this field rpcs_by_method. Also updated in https://github.com/grpc/grpc/pull/23436/files", "author": "menghanl", "createdAt": "2020-07-15T00:55:49Z", "path": "interop-testing/src/main/proto/grpc/testing/messages.proto", "diffHunk": "@@ -195,4 +195,10 @@ message LoadBalancerStatsResponse {\n   map<string, int32> rpcs_by_peer = 1;\n   // The number of RPCs that failed to record a remote peer.\n   int32 num_failures = 2;\n+  message RpcsByPeer {\n+    // The number of completed RPCs for each peer.\n+    map<string, int32> rpcs_by_peer = 1;\n+  }\n+  // The number of completed RPCs for each type (UnaryCall or EmptyCall).\n+  map<string, RpcsByPeer> rpcs_by_type = 3;", "originalCommit": "35efa232059788358fd64ea96ece1119c3b13948", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI2MDQyOQ==", "url": "https://github.com/grpc/grpc-java/pull/7207#discussion_r458260429", "bodyText": "Done", "author": "ericgribkoff", "createdAt": "2020-07-21T17:16:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDcyNzUzNw=="}], "type": "inlineReview"}, {"oid": "b00f4c12c2eb3076067774c65f10033fa48cbb68", "url": "https://github.com/grpc/grpc-java/commit/b00f4c12c2eb3076067774c65f10033fa48cbb68", "message": "s/rpcs_by_type/rpcs_by_method/", "committedDate": "2020-07-21T17:16:34Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTEzNzQ5OQ==", "url": "https://github.com/grpc/grpc-java/pull/7207#discussion_r459137499", "bodyText": "Is there an easy way for the client to read both resp.Hostname and the hostname from header?\nThis will be necessary if we want to merge this PR before updating the test server image to send hostname in headers.", "author": "menghanl", "createdAt": "2020-07-22T23:21:12Z", "path": "interop-testing/src/main/java/io/grpc/testing/integration/XdsTestClient.java", "diffHunk": "@@ -197,65 +268,87 @@ public void run() {\n           savedWatchers.addAll(watchers);\n         }\n \n-        SimpleRequest request = SimpleRequest.newBuilder().setFillServerId(true).build();\n+        final Metadata headersToSend;\n+        if (metadata.containsKey(rpcType)) {\n+          headersToSend = metadata.get(rpcType);\n+        } else {\n+          headersToSend = new Metadata();\n+        }\n         ManagedChannel channel = channels.get((int) (requestId % channels.size()));\n-        final ClientCall<SimpleRequest, SimpleResponse> call =\n-            channel.newCall(\n-                TestServiceGrpc.getUnaryCallMethod(),\n-                CallOptions.DEFAULT.withDeadlineAfter(rpcTimeoutSec, TimeUnit.SECONDS));\n-        call.start(\n-            new ClientCall.Listener<SimpleResponse>() {\n-              private String hostname;\n+        TestServiceGrpc.TestServiceBlockingStub stub = TestServiceGrpc.newBlockingStub(channel);\n+        final AtomicReference<ClientCall<?, ?>> clientCallRef = new AtomicReference<>();\n+        final AtomicReference<String> hostnameRef = new AtomicReference<>();\n+        stub =\n+            stub.withDeadlineAfter(rpcTimeoutSec, TimeUnit.SECONDS)\n+                .withInterceptors(\n+                    new ClientInterceptor() {\n+                      @Override\n+                      public <ReqT, RespT> ClientCall<ReqT, RespT> interceptCall(\n+                          MethodDescriptor<ReqT, RespT> method,\n+                          CallOptions callOptions,\n+                          Channel next) {\n+                        ClientCall<ReqT, RespT> call = next.newCall(method, callOptions);\n+                        clientCallRef.set(call);\n+                        return new SimpleForwardingClientCall<ReqT, RespT>(call) {\n+                          @Override\n+                          public void start(Listener<RespT> responseListener, Metadata headers) {\n+                            headers.merge(headersToSend);\n+                            super.start(\n+                                new SimpleForwardingClientCallListener<RespT>(responseListener) {\n+                                  @Override\n+                                  public void onHeaders(Metadata headers) {\n+                                    hostnameRef.set(headers.get(XdsTestServer.HOSTNAME_KEY));\n+                                    super.onHeaders(headers);\n+                                  }\n+                                },\n+                                headers);\n+                          }\n+                        };\n+                      }\n+                    });\n \n-              @Override\n-              public void onMessage(SimpleResponse response) {\n-                hostname = response.getHostname();\n-                // TODO(ericgribkoff) Currently some test environments cannot access the stats RPC\n-                // service and rely on parsing stdout.\n-                if (printResponse) {\n-                  System.out.println(\n-                      \"Greeting: Hello world, this is \"\n-                          + hostname\n-                          + \", from \"\n-                          + call.getAttributes().get(Grpc.TRANSPORT_ATTR_REMOTE_ADDR));\n-                }\n-              }\n-\n-              @Override\n-              public void onClose(Status status, Metadata trailers) {\n-                if (printResponse && !status.isOk()) {\n-                  logger.log(Level.WARNING, \"Greeting RPC failed with status {0}\", status);\n-                }\n-                for (XdsStatsWatcher watcher : savedWatchers) {\n-                  watcher.rpcCompleted(requestId, hostname);\n-                }\n-              }\n-            },\n-            new Metadata());\n-\n-        call.sendMessage(request);\n-        call.request(1);\n-        call.halfClose();\n+        if (rpcType == RpcType.EMPTY_CALL) {\n+          stub.emptyCall(EmptyProtos.Empty.getDefaultInstance());\n+        } else if (rpcType == RpcType.UNARY_CALL) {\n+          SimpleRequest request = SimpleRequest.newBuilder().setFillServerId(true).build();\n+          SimpleResponse response = stub.unaryCall(request);", "originalCommit": "b00f4c12c2eb3076067774c65f10033fa48cbb68", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg1NjcyOA==", "url": "https://github.com/grpc/grpc-java/pull/7207#discussion_r459856728", "bodyText": "Easy enough but it will make the code a bit cluttered and doesn't seem necessary - the server will be backwards compatible itself so we can just update the server image prior to merging, right? If that's more complicated than I think, then I can add a fallback here with a TODO to remove it.", "author": "ericgribkoff", "createdAt": "2020-07-24T05:21:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTEzNzQ5OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg1ODg2OA==", "url": "https://github.com/grpc/grpc-java/pull/7207#discussion_r459858868", "bodyText": "Nevermind, added the fallback", "author": "ericgribkoff", "createdAt": "2020-07-24T05:31:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTEzNzQ5OQ=="}], "type": "inlineReview"}, {"oid": "afb2c215152e4de7f2abd7994258d78a067c9672", "url": "https://github.com/grpc/grpc-java/commit/afb2c215152e4de7f2abd7994258d78a067c9672", "message": "Fallback to response hostname", "committedDate": "2020-07-24T05:31:20Z", "type": "commit"}, {"oid": "02b91fada18eabd41645c8d1bd738d92306fa74d", "url": "https://github.com/grpc/grpc-java/commit/02b91fada18eabd41645c8d1bd738d92306fa74d", "message": "Fix default rpc timeout", "committedDate": "2020-07-24T06:08:42Z", "type": "commit"}, {"oid": "1276db3308f17286ee021f0a40212707f819cb9c", "url": "https://github.com/grpc/grpc-java/commit/1276db3308f17286ee021f0a40212707f819cb9c", "message": "Use async API, do not fail on failed rpc", "committedDate": "2020-07-24T06:43:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE5Mzk2MQ==", "url": "https://github.com/grpc/grpc-java/pull/7207#discussion_r461193961", "bodyText": "Rename to rpcTypes?", "author": "dapengzhang0", "createdAt": "2020-07-27T21:56:55Z", "path": "interop-testing/src/main/java/io/grpc/testing/integration/XdsTestClient.java", "diffHunk": "@@ -62,13 +70,24 @@\n   private int numChannels = 1;\n   private boolean printResponse = false;\n   private int qps = 1;\n-  private int rpcTimeoutSec = 2;\n+  private List<RpcType> rpc = ImmutableList.of(RpcType.UNARY_CALL);", "originalCommit": "1276db3308f17286ee021f0a40212707f819cb9c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTgwMDQ1Ng==", "url": "https://github.com/grpc/grpc-java/pull/7207#discussion_r461800456", "bodyText": "Done", "author": "ericgribkoff", "createdAt": "2020-07-28T18:53:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE5Mzk2MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTc0Njg4OA==", "url": "https://github.com/grpc/grpc-java/pull/7207#discussion_r461746888", "bodyText": "Default: UnaryCall", "author": "dapengzhang0", "createdAt": "2020-07-28T17:22:35Z", "path": "interop-testing/src/main/java/io/grpc/testing/integration/XdsTestClient.java", "diffHunk": "@@ -139,8 +162,12 @@ private void parseArgs(String[] args) {\n               + c.numChannels\n               + \"\\n  --print_response=BOOL  Write RPC response to stdout. Default: \"\n               + c.printResponse\n-              + \"\\n  --qps=INT              Qps per channel. Default: \"\n+              + \"\\n  --qps=INT              Qps per channel, for each type of RPC. Default: \"\n               + c.qps\n+              + \"\\n  --rpc=STR              Types of RPCs to make, ',' separated string. RPCs can \"\n+              + \"be EmptyCall or UnaryCall.\"", "originalCommit": "1276db3308f17286ee021f0a40212707f819cb9c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTgwMDQ5OA==", "url": "https://github.com/grpc/grpc-java/pull/7207#discussion_r461800498", "bodyText": "Done", "author": "ericgribkoff", "createdAt": "2020-07-28T18:53:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTc0Njg4OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTc1NzI5Ng==", "url": "https://github.com/grpc/grpc-java/pull/7207#discussion_r461757296", "bodyText": "Can it be EnumMap?", "author": "dapengzhang0", "createdAt": "2020-07-28T17:39:43Z", "path": "interop-testing/src/main/java/io/grpc/testing/integration/XdsTestClient.java", "diffHunk": "@@ -286,6 +429,7 @@ public void getClientStats(\n     private final long startId;\n     private final long endId;\n     private final Map<String, Integer> rpcsByPeer = new HashMap<>();\n+    private final Map<String, Map<String, Integer>> rpcsByTypeAndPeer = new HashMap<>();", "originalCommit": "1276db3308f17286ee021f0a40212707f819cb9c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTgwMDU1Mw==", "url": "https://github.com/grpc/grpc-java/pull/7207#discussion_r461800553", "bodyText": "Yes, that's better. Done", "author": "ericgribkoff", "createdAt": "2020-07-28T18:53:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTc1NzI5Ng=="}], "type": "inlineReview"}, {"oid": "1b5e7e0c44ebbeb420508c654e34be679569f341", "url": "https://github.com/grpc/grpc-java/commit/1b5e7e0c44ebbeb420508c654e34be679569f341", "message": "EnumMap, default val, rpcTypes", "committedDate": "2020-07-28T18:51:35Z", "type": "commit"}, {"oid": "5e993632a709941e6ad88a6ba48d73712a823f32", "url": "https://github.com/grpc/grpc-java/commit/5e993632a709941e6ad88a6ba48d73712a823f32", "message": "more EnumMap", "committedDate": "2020-07-28T19:00:05Z", "type": "commit"}, {"oid": "6abb8ceb80e35835846d3b74f0c8b714f5cafb90", "url": "https://github.com/grpc/grpc-java/commit/6abb8ceb80e35835846d3b74f0c8b714f5cafb90", "message": "include path_matching and header_matching tests", "committedDate": "2020-07-28T19:05:13Z", "type": "commit"}]}