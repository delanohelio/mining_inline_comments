{"pr_number": 7130, "pr_title": "xds: implement routing policy with all supported types of matcher", "pr_createdAt": "2020-06-16T04:57:55Z", "pr_url": "https://github.com/grpc/grpc-java/pull/7130", "timeline": [{"oid": "5b93b50a77c49aff2a291e5e866c279c2da06948", "url": "https://github.com/grpc/grpc-java/commit/5b93b50a77c49aff2a291e5e866c279c2da06948", "message": "Implement matches() API on RouteMatch for path and header matchings.", "committedDate": "2020-06-16T04:54:10Z", "type": "commit"}, {"oid": "887a51ed4e8d640dbab6ade2b6d7bc98a851ccf4", "url": "https://github.com/grpc/grpc-java/commit/887a51ed4e8d640dbab6ade2b6d7bc98a851ccf4", "message": "Implement a SubchannelPicker that wraps all pickers given by routed child policies and pick is delegated to the one based on matching path/headers rules.", "committedDate": "2020-06-16T09:19:50Z", "type": "commit"}, {"oid": "887a51ed4e8d640dbab6ade2b6d7bc98a851ccf4", "url": "https://github.com/grpc/grpc-java/commit/887a51ed4e8d640dbab6ade2b6d7bc98a851ccf4", "message": "Implement a SubchannelPicker that wraps all pickers given by routed child policies and pick is delegated to the one based on matching path/headers rules.", "committedDate": "2020-06-16T09:19:50Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTA4MjIxMA==", "url": "https://github.com/grpc/grpc-java/pull/7130#discussion_r441082210", "bodyText": "Why not Long?", "author": "dapengzhang0", "createdAt": "2020-06-16T19:11:13Z", "path": "xds/src/main/java/io/grpc/xds/RouteMatch.java", "diffHunk": "@@ -196,6 +239,29 @@ public String toString() {\n       this.isInvertedMatch = isInvertedMatch;\n     }\n \n+    private boolean matchesValue(String value) {\n+      boolean baseMatch;\n+      if (exactMatch != null) {\n+        baseMatch = exactMatch.equals(value);\n+      } else if (safeRegExMatch != null) {\n+        baseMatch = safeRegExMatch.matches(value);\n+      } else if (rangeMatch != null) {\n+        try {\n+          Integer numValue = Integer.parseInt(value);", "originalCommit": "887a51ed4e8d640dbab6ade2b6d7bc98a851ccf4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTgyNjE3MQ==", "url": "https://github.com/grpc/grpc-java/pull/7130#discussion_r441826171", "bodyText": "It is specified by proto:\n\nThe entire request header value must represent an integer in base 10 notation: consisting of an optional plus or minus sign followed by a sequence of digits. The rule will not match if the header value does not represent an integer. Match will fail for empty values, floating point numbers or if only a subsequence of the header value is an integer.", "author": "voidzcy", "createdAt": "2020-06-17T20:50:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTA4MjIxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTgzMTU4MA==", "url": "https://github.com/grpc/grpc-java/pull/7130#discussion_r441831580", "bodyText": "I think that \"integer\" in the spec is not Java Integer. The type is Int64, corresponding to Java Long.", "author": "dapengzhang0", "createdAt": "2020-06-17T21:00:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTA4MjIxMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc2OTk0MA==", "url": "https://github.com/grpc/grpc-java/pull/7130#discussion_r441769940", "bodyText": "What if headerMatcher.presentMatch.equals(Boolean.FALSE)? Or what if headerMatcher.presentMatch.equals(Boolean.TRUE) and headerMatcher.isInvertedMatch is true?", "author": "dapengzhang0", "createdAt": "2020-06-17T19:03:10Z", "path": "xds/src/main/java/io/grpc/xds/RouteMatch.java", "diffHunk": "@@ -48,6 +51,37 @@\n         Collections.<HeaderMatcher>emptyList(), null);\n   }\n \n+  /**\n+   * Returns {@code true} if a request with the given path and headers passes all the rules\n+   * specified by this RouteMatch.\n+   *\n+   * <p>The request's headers are given as a key-values mapping, where multiple values can\n+   * be mapped to the same key.\n+   *\n+   * <p>Match is not deterministic if a runtime fraction match rule presents in this RouteMatch.\n+   */\n+  boolean matches(String path, Map<String, Set<String>> headers) {\n+    if (!pathMatch.matches(path)) {\n+      return false;\n+    }\n+    for (HeaderMatcher headerMatcher : headerMatchers) {\n+      if (!headers.containsKey(headerMatcher.getName())) {\n+        return false;", "originalCommit": "887a51ed4e8d640dbab6ade2b6d7bc98a851ccf4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc4MTAyNA==", "url": "https://github.com/grpc/grpc-java/pull/7130#discussion_r441781024", "bodyText": "We should prepend '/' to args.getMethodDescriptor().getFullMethodName(), because the route's path or prefix in TD's config will always start with '/'. @menghanl Can you confirm?", "author": "dapengzhang0", "createdAt": "2020-06-17T19:24:32Z", "path": "xds/src/main/java/io/grpc/xds/XdsRoutingLoadBalancer.java", "diffHunk": "@@ -190,8 +192,27 @@ protected Helper delegate() {\n \n     @Override\n     public PickResult pickSubchannel(PickSubchannelArgs args) {\n-      // TODO(chengyuanzhang): to be implemented.\n-      return PickResult.withError(Status.INTERNAL.withDescription(\"routing picker unimplemented\"));\n+      // Index ASCII headers by keys.\n+      Map<String, Set<String>> asciiHeaders = new HashMap<>();\n+      Metadata headers = args.getHeaders();\n+      for (String headerName : headers.keys()) {\n+        if (headerName.endsWith(Metadata.BINARY_HEADER_SUFFIX)) {\n+          continue;\n+        }\n+        Set<String> headerValues = new HashSet<>();\n+        Metadata.Key<String> key = Metadata.Key.of(headerName, Metadata.ASCII_STRING_MARSHALLER);\n+        for (String value : headers.getAll(key)) {\n+          headerValues.add(value);\n+        }\n+        asciiHeaders.put(headerName, headerValues);\n+      }\n+      for (Map.Entry<RouteMatch, SubchannelPicker> entry : routePickers.entrySet()) {\n+        RouteMatch routeMatch = entry.getKey();\n+        if (routeMatch.matches(args.getMethodDescriptor().getFullMethodName(), asciiHeaders)) {", "originalCommit": "887a51ed4e8d640dbab6ade2b6d7bc98a851ccf4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTgyNjM5MA==", "url": "https://github.com/grpc/grpc-java/pull/7130#discussion_r441826390", "bodyText": "Path starts with \"/\", as defined in https://github.com/grpc/grpc/blob/master/doc/PROTOCOL-HTTP2.md#requests", "author": "menghanl", "createdAt": "2020-06-17T20:50:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc4MTAyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTgzMjM3Mg==", "url": "https://github.com/grpc/grpc-java/pull/7130#discussion_r441832372", "bodyText": "Path starts with \"/\", as defined in https://github.com/grpc/grpc/blob/master/doc/PROTOCOL-HTTP2.md#requests\n\nYeah, java MethodDescriptor.getFullMethodName() does not include the leading '/', so we need prepend it.", "author": "dapengzhang0", "createdAt": "2020-06-17T21:02:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc4MTAyNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTgxMjE2Ng==", "url": "https://github.com/grpc/grpc-java/pull/7130#discussion_r441812166", "bodyText": "The TODO is still valid.", "author": "dapengzhang0", "createdAt": "2020-06-17T20:25:23Z", "path": "xds/src/main/java/io/grpc/xds/XdsRoutingLoadBalancer.java", "diffHunk": "@@ -80,19 +83,15 @@ public void handleResolvedAddresses(ResolvedAddresses resolvedAddresses) {\n         routeBalancers.get(actionName).switchTo(action.getProvider());\n       }\n     }\n-\n     this.routes = xdsRoutingConfig.routes;\n     this.actions = newActions;\n-\n     for (String actionName : actions.keySet()) {\n       routeBalancers.get(actionName).handleResolvedAddresses(\n           resolvedAddresses.toBuilder()\n               .setLoadBalancingPolicyConfig(actions.get(actionName).getConfig())\n               .build());\n     }\n \n-    // Cleanup removed actions.\n-    // TODO(zdapeng): cache removed actions for 15 minutes.", "originalCommit": "887a51ed4e8d640dbab6ade2b6d7bc98a851ccf4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk2ODg3OQ==", "url": "https://github.com/grpc/grpc-java/pull/7130#discussion_r441968879", "bodyText": "Implemented.", "author": "voidzcy", "createdAt": "2020-06-18T04:59:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTgxMjE2Ng=="}], "type": "inlineReview"}, {"oid": "cbc5cf6f753164645e177947df466a415864b76a", "url": "https://github.com/grpc/grpc-java/commit/cbc5cf6f753164645e177947df466a415864b76a", "message": "Fix header matching presence matcher case.", "committedDate": "2020-06-17T22:09:14Z", "type": "commit"}, {"oid": "20591f778ff0bd81d421da83ebbfab5b27c54934", "url": "https://github.com/grpc/grpc-java/commit/20591f778ff0bd81d421da83ebbfab5b27c54934", "message": "Parse numbers as long.", "committedDate": "2020-06-17T22:13:49Z", "type": "commit"}, {"oid": "563ba55d0f0075c5abd9658bf45744ebd6c154a8", "url": "https://github.com/grpc/grpc-java/commit/563ba55d0f0075c5abd9658bf45744ebd6c154a8", "message": "Match full method name with a prepend slash", "committedDate": "2020-06-17T22:20:56Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTg4MDU3OA==", "url": "https://github.com/grpc/grpc-java/pull/7130#discussion_r441880578", "bodyText": "nit: the following might be easier to follow\nfor (String value : values) {\n  if (exactMatch != null) {\n    baseMatch = exactMatch.equals(value);\n  } else if {\n    ...\n  }\n  if (baseMatch) {\n    break;\n  }\n}", "author": "dapengzhang0", "createdAt": "2020-06-17T23:06:39Z", "path": "xds/src/main/java/io/grpc/xds/RouteMatch.java", "diffHunk": "@@ -196,6 +229,36 @@ public String toString() {\n       this.isInvertedMatch = isInvertedMatch;\n     }\n \n+    private boolean matchesValue(@Nullable Set<String> values) {\n+      if (presentMatch != null) {\n+        return (values == null) == presentMatch.equals(isInvertedMatch);\n+      }\n+      if (values == null) {\n+        return false;\n+      }\n+      boolean baseMatch = false;\n+      for (String value : values) {\n+        if (exactMatch != null) {\n+          baseMatch |= exactMatch.equals(value);", "originalCommit": "563ba55d0f0075c5abd9658bf45744ebd6c154a8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk2ODg1NQ==", "url": "https://github.com/grpc/grpc-java/pull/7130#discussion_r441968855", "bodyText": "Sure.", "author": "voidzcy", "createdAt": "2020-06-18T04:59:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTg4MDU3OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTg4MTg2MQ==", "url": "https://github.com/grpc/grpc-java/pull/7130#discussion_r441881861", "bodyText": "Why not just use Set<T> Collections.singleton(T o)", "author": "dapengzhang0", "createdAt": "2020-06-17T23:10:56Z", "path": "xds/src/test/java/io/grpc/xds/RouteMatchTest.java", "diffHunk": "@@ -0,0 +1,166 @@\n+/*\n+ * Copyright 2020 The gRPC Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.grpc.xds;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import com.google.re2j.Pattern;\n+import io.grpc.xds.RouteMatch.FractionMatcher;\n+import io.grpc.xds.RouteMatch.HeaderMatcher;\n+import io.grpc.xds.RouteMatch.HeaderMatcher.Range;\n+import io.grpc.xds.RouteMatch.PathMatcher;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+/** Tests for {@link RouteMatch}. */\n+public class RouteMatchTest {\n+\n+  private final Map<String, Set<String>> headers = new HashMap<>();\n+\n+  @Before\n+  public void setUp() {\n+    headers.put(\"content-type\", new HashSet<>(Collections.singletonList(\"application/grpc\")));", "originalCommit": "563ba55d0f0075c5abd9658bf45744ebd6c154a8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk2ODgzMw==", "url": "https://github.com/grpc/grpc-java/pull/7130#discussion_r441968833", "bodyText": "Yep, good to know.", "author": "voidzcy", "createdAt": "2020-06-18T04:59:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTg4MTg2MQ=="}], "type": "inlineReview"}, {"oid": "d9c7a2fc0c371bbdd28db183c76f4d68f81cd7f7", "url": "https://github.com/grpc/grpc-java/commit/d9c7a2fc0c371bbdd28db183c76f4d68f81cd7f7", "message": "Implement delayed child policy deletion.", "committedDate": "2020-06-18T04:53:30Z", "type": "commit"}, {"oid": "9d19b57c3a7729d661306c147ce92295504b8e8d", "url": "https://github.com/grpc/grpc-java/commit/9d19b57c3a7729d661306c147ce92295504b8e8d", "message": "Eliminate redundant list creation.", "committedDate": "2020-06-18T04:55:55Z", "type": "commit"}, {"oid": "d1c8a0825eb57d333b71f6cc5f1c60f53fb7aed3", "url": "https://github.com/grpc/grpc-java/commit/d1c8a0825eb57d333b71f6cc5f1c60f53fb7aed3", "message": "Simplify header matching flow", "committedDate": "2020-06-18T04:58:44Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjk3NzkzNQ==", "url": "https://github.com/grpc/grpc-java/pull/7130#discussion_r442977935", "bodyText": "I would not execute childLb.handleResolvedAddresses() when this.childLbStates and this.routes are in a half-baked state. In extreme case childLb.handleResolvedAddresses() may trigger balancing state update inline.", "author": "dapengzhang0", "createdAt": "2020-06-19T18:03:01Z", "path": "xds/src/main/java/io/grpc/xds/XdsRoutingLoadBalancer.java", "diffHunk": "@@ -69,54 +79,47 @@ public void handleResolvedAddresses(ResolvedAddresses resolvedAddresses) {\n     logger.log(XdsLogLevel.DEBUG, \"Received resolution result: {0}\", resolvedAddresses);\n     XdsRoutingConfig xdsRoutingConfig =\n         (XdsRoutingConfig) resolvedAddresses.getLoadBalancingPolicyConfig();\n-    checkNotNull(xdsRoutingConfig, \"Missing xds_routing lb config\");\n     Map<String, PolicySelection> newActions = xdsRoutingConfig.actions;\n     for (String actionName : newActions.keySet()) {\n       PolicySelection action = newActions.get(actionName);\n-      if (!actions.containsKey(actionName)) {\n-        RouteHelper routeHelper = new RouteHelper();\n-        GracefulSwitchLoadBalancer routeBalancer = new GracefulSwitchLoadBalancer(routeHelper);\n-        routeBalancer.switchTo(action.getProvider());\n-        routeHelpers.put(actionName, routeHelper);\n-        routeBalancers.put(actionName, routeBalancer);\n-      } else if (!action.getProvider().equals(actions.get(actionName).getProvider())) {\n-        routeBalancers.get(actionName).switchTo(action.getProvider());\n+      if (!childLbStates.containsKey(actionName)) {\n+        childLbStates.put(actionName, new ChildLbState(actionName, action.getProvider()));\n+      } else {\n+        childLbStates.get(actionName).reactivate(action.getProvider());\n       }\n+      childLbStates.get(actionName).lb\n+          .handleResolvedAddresses(", "originalCommit": "d9c7a2fc0c371bbdd28db183c76f4d68f81cd7f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzA3MjA3NA==", "url": "https://github.com/grpc/grpc-java/pull/7130#discussion_r443072074", "bodyText": "You are right. Fixed.", "author": "voidzcy", "createdAt": "2020-06-19T22:59:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjk3NzkzNQ=="}], "type": "inlineReview"}, {"oid": "a160aad06a266a67090022ee1c1c58bc08aa4135", "url": "https://github.com/grpc/grpc-java/commit/a160aad06a266a67090022ee1c1c58bc08aa4135", "message": "Pass addresses to downstream policies asynchornously that delays subchannel state updates.", "committedDate": "2020-06-19T22:58:56Z", "type": "commit"}]}