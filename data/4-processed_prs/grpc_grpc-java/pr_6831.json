{"pr_number": 6831, "pr_title": "grpclb: migrate create subchannel (minimal change)", "pr_createdAt": "2020-03-13T23:03:21Z", "pr_url": "https://github.com/grpc/grpc-java/pull/6831", "timeline": [{"oid": "3bebf72658c55fab0b643644f39765d99dc74b46", "url": "https://github.com/grpc/grpc-java/commit/3bebf72658c55fab0b643644f39765d99dc74b46", "message": "grpclb: migrate create subchannel (minimal change)", "committedDate": "2020-03-13T23:02:44Z", "type": "commit"}, {"oid": "8f8751c6c5506a731cacf0f79172fe64b415185f", "url": "https://github.com/grpc/grpc-java/commit/8f8751c6c5506a731cacf0f79172fe64b415185f", "message": "fix listener to mimic deprecated behavior, fix tests", "committedDate": "2020-03-16T23:00:13Z", "type": "commit"}, {"oid": "e53ce9b982173aa483b50f76d5ba4592b58b9dc3", "url": "https://github.com/grpc/grpc-java/commit/e53ce9b982173aa483b50f76d5ba4592b58b9dc3", "message": "remove deprecated suppressiosn", "committedDate": "2020-03-16T23:02:09Z", "type": "commit"}, {"oid": "c4c117d134d402250bd16567cdc6a5d42caf9e75", "url": "https://github.com/grpc/grpc-java/commit/c4c117d134d402250bd16567cdc6a5d42caf9e75", "message": "move passing helper to constructor", "committedDate": "2020-03-16T23:12:29Z", "type": "commit"}, {"oid": "c4430bcbfaecb945aea6b951e5cd7344a210c90f", "url": "https://github.com/grpc/grpc-java/commit/c4430bcbfaecb945aea6b951e5cd7344a210c90f", "message": "use listener instead of calling lb", "committedDate": "2020-03-16T23:44:47Z", "type": "commit"}, {"oid": "a0633183fa9705e87077b80bc68973cbd689d7d4", "url": "https://github.com/grpc/grpc-java/commit/a0633183fa9705e87077b80bc68973cbd689d7d4", "message": "do not use handleSubchannelState in lb", "committedDate": "2020-03-17T02:26:21Z", "type": "commit"}, {"oid": "f81ab87f63898f80bca48e5f78294c895dbed13f", "url": "https://github.com/grpc/grpc-java/commit/f81ab87f63898f80bca48e5f78294c895dbed13f", "message": "make pickfirst address update to call grpclb directly instead of using listener", "committedDate": "2020-03-17T02:38:22Z", "type": "commit"}, {"oid": "7c5fa7a05b54405ac2b32c05c819c32cc6fbe7c6", "url": "https://github.com/grpc/grpc-java/commit/7c5fa7a05b54405ac2b32c05c819c32cc6fbe7c6", "message": "add todo for next step, update javadoc for SubchannelPool", "committedDate": "2020-03-17T02:54:44Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM2ODE5OQ==", "url": "https://github.com/grpc/grpc-java/pull/6831#discussion_r397368199", "bodyText": "There should be no need for a multimap. When a subchannel is added to the pool it should no longer be used, which means updateAddresses shouldn't be called. When a subchannel is added this code can just call subchannel.getAddresses()/getAllAddresses() to add the subchannel to the cache map.", "author": "ejona86", "createdAt": "2020-03-24T18:20:52Z", "path": "grpclb/src/main/java/io/grpc/grpclb/CachedSubchannelPool.java", "diffHunk": "@@ -34,32 +35,46 @@\n  * A {@link SubchannelPool} that keeps returned {@link Subchannel}s for a given time before it's\n  * shut down by the pool.\n  */\n+// TODO(creamsoup) address to subchannel is not 1:1 mapping because subchannel can update its\n+//  address. Use Multimap and ForwardingSubchannel (override updateAddresses) to maintain most up to", "originalCommit": "7c5fa7a05b54405ac2b32c05c819c32cc6fbe7c6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM4Njg2Mg==", "url": "https://github.com/grpc/grpc-java/pull/6831#discussion_r397386862", "bodyText": "i think it is a bit weird that the pool has no idea about the subchannels it created. i agree that the updateAddresses shouldn't be called externally, but nothing prevent it from doing that. And it seems like blocking it by throwing exception is not an option due to the hierarchical lb policy.\nMy point is the pool should know the status of subchannels it owns (ownership of the subchannel should be on the pool not the caller). currently, user of the pool can return a subchannel created elsewhere, and the pool won't complain. also, clear just shutdowns already returned subchannels and doesn't care about subchannels currently used.\nif it was a SubchannelFactory it might look okay.", "author": "creamsoup", "createdAt": "2020-03-24T18:51:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM2ODE5OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQwNTEzNA==", "url": "https://github.com/grpc/grpc-java/pull/6831#discussion_r397405134", "bodyText": "It is very normal for pools dealing with exclusive objects have no tracking of the objects they hand out. \"Exclusive\" meaning that there can only be one user of the object at a time, like DB connections and the like. If the pool does keep track of the objects handed out, it is generally for resource limiting reasons (like a DB pool maxing out at 5 connections).\n\nAnd it seems like blocking it by throwing exception is not an option due to the hierarchical lb policy.\n\nI don't understand this. The pool could wrap the returned subchannels and override getAddresses(). When the subchannel is returned to the pool the pool sets a throwOnAddresses = true variable in the subchannel that getAddresses() checks. When the subchannel is taken from the pool, throwOnAddresses = false is set before the pool returns the subchannel.\n\nMy point is the pool should know the status of subchannels it owns (ownership of the subchannel should be on the pool not the caller)\n\nI don't think so. And it clearly makes things harder. What benefit is there to having the pool track the subchannels it has handed out? If there is no benefit, why wouldn't we do it \"the easy way?\"\n\ncurrently, user of the pool can return a subchannel created elsewhere, and the pool won't complain\n\nFair. Although that is technically true of a couple different things related to subchannels (like which ones are returned from picks). This would be trivial to check in the future because we are guaranteed to wrap subchannel to handle shutdown(), so we could do an instanceof or (if we are really paranoid) a nested class instance check (CachedSubchannelPool.this within the subchannel).\n\nalso, clear just shutdowns already returned subchannels and doesn't care about subchannels currently used.\n\nThat sounds perfect. Policies should shutdown/return the subchannels they created.", "author": "ejona86", "createdAt": "2020-03-24T19:23:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM2ODE5OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQyOTE5MQ==", "url": "https://github.com/grpc/grpc-java/pull/6831#discussion_r397429191", "bodyText": "okay thanks for the explanation. i think i went side ways by trying to get rid of the handleSubchannelState.", "author": "creamsoup", "createdAt": "2020-03-24T20:08:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM2ODE5OQ=="}], "type": "inlineReview"}, {"oid": "5c02d5925bd0063b43d3cfda9267e59c9eed20e0", "url": "https://github.com/grpc/grpc-java/commit/5c02d5925bd0063b43d3cfda9267e59c9eed20e0", "message": "remove todo", "committedDate": "2020-03-24T20:08:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUyMjM1Mw==", "url": "https://github.com/grpc/grpc-java/pull/6831#discussion_r397522353", "bodyText": "It seems you make CachedSubchannelPool#handleSubchannelState() private  and call  handleSubchannelState() here directly. Then you don't need the API SubchannelPool#handleSubchannelState(Subchannel subchannel, ConnectivityStateInfo newStateInfo) in the interface anymore.  Otherwise, PooledSubchannelStateListener#onSubchannelState() calls GrpclbState#handleSubchannelState, which calls CachedSubchannelPool#handleSubchannelState back and forth.", "author": "dapengzhang0", "createdAt": "2020-03-24T23:27:53Z", "path": "grpclb/src/main/java/io/grpc/grpclb/CachedSubchannelPool.java", "diffHunk": "@@ -38,28 +39,39 @@\n   private final HashMap<EquivalentAddressGroup, CacheEntry> cache =\n       new HashMap<>();\n \n-  private Helper helper;\n-  private LoadBalancer lb;\n+  private final Helper helper;\n+  private PooledSubchannelStateListener listener;\n \n   @VisibleForTesting\n   static final long SHUTDOWN_TIMEOUT_MS = 10000;\n \n-  @Override\n-  public void init(Helper helper, LoadBalancer lb) {\n+  public CachedSubchannelPool(Helper helper) {\n     this.helper = checkNotNull(helper, \"helper\");\n-    this.lb = checkNotNull(lb, \"lb\");\n   }\n \n   @Override\n-  @SuppressWarnings(\"deprecation\")\n+  public void registerListener(PooledSubchannelStateListener pooledSubchannelStateListener) {\n+    this.listener = checkNotNull(pooledSubchannelStateListener, \"pooledSubchannelStateListener\");\n+  }\n+\n+  @Override\n   public Subchannel takeOrCreateSubchannel(\n       EquivalentAddressGroup eag, Attributes defaultAttributes) {\n     final CacheEntry entry = cache.remove(eag);\n     final Subchannel subchannel;\n     if (entry == null) {\n-      // TODO(zhangkun83): remove the deprecation suppression on this method once migrated to the\n-      // new createSubchannel().\n-      subchannel = helper.createSubchannel(eag, defaultAttributes);\n+      subchannel =\n+          helper.createSubchannel(\n+              CreateSubchannelArgs.newBuilder()\n+                  .setAddresses(eag)\n+                  .setAttributes(defaultAttributes)\n+                  .build());\n+      subchannel.start(new SubchannelStateListener() {\n+        @Override\n+        public void onSubchannelState(ConnectivityStateInfo newState) {\n+          listener.onSubchannelState(subchannel, newState);", "originalCommit": "5c02d5925bd0063b43d3cfda9267e59c9eed20e0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU0OTEzMg==", "url": "https://github.com/grpc/grpc-java/pull/6831#discussion_r397549132", "bodyText": "i am little bit confused. first method mean Grpclb#handleSubchannelState(Subchannel, ConnectivityStateInfo)?", "author": "creamsoup", "createdAt": "2020-03-25T00:53:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUyMjM1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODAxNDY3MA==", "url": "https://github.com/grpc/grpc-java/pull/6831#discussion_r398014670", "bodyText": "I mean you can make CachedSubchannelPool#handleSubchannelState(Subchannel subchannel, ConnectivityStateInfo newStateInfo) a private method. Remove this method from interface. And call this private method directly here.\nlistener.onSubchannelState(subchannel, newState);\nhandleSubchannelState(subchannel, newState);\nDo not call this private method from the other class GrpclbState.", "author": "dapengzhang0", "createdAt": "2020-03-25T16:56:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUyMjM1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA3NTQ5Mg==", "url": "https://github.com/grpc/grpc-java/pull/6831#discussion_r398075492", "bodyText": "oh yes. done PTAL", "author": "creamsoup", "createdAt": "2020-03-25T18:23:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUyMjM1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIwNzA4Nw==", "url": "https://github.com/grpc/grpc-java/pull/6831#discussion_r398207087", "bodyText": "Then we don't even need the private method, we can just inline it here\nCacheEntry cached = cache.get(subchannel.getAddresses());\nif (cached != null && cached.subchannel != subchannel) {\n  cached.state = newState;\n}", "author": "dapengzhang0", "createdAt": "2020-03-25T22:23:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUyMjM1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODM0Nzk0OQ==", "url": "https://github.com/grpc/grpc-java/pull/6831#discussion_r398347949", "bodyText": "i don't see why having a small method is bad. even though it is short, method name is helpful to read the code.", "author": "creamsoup", "createdAt": "2020-03-26T06:47:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUyMjM1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTA5MDgxOQ==", "url": "https://github.com/grpc/grpc-java/pull/6831#discussion_r401090819", "bodyText": "There are so many methods called handleSubchannelState or similar, it's hard to tell in what difference they are doing just from the method name. You still need to jump to the method body to get useful information. I feel its readability is less than putting them inline,  the latter is absolutely clear to read.", "author": "dapengzhang0", "createdAt": "2020-03-31T17:32:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUyMjM1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE0NjI2NA==", "url": "https://github.com/grpc/grpc-java/pull/6831#discussion_r401146264", "bodyText": "okay. I believe smaller method is almost always preferred, so problem here is the method name. how about updateCachedSubchannelState?", "author": "creamsoup", "createdAt": "2020-03-31T19:03:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUyMjM1Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUyOTM5OQ==", "url": "https://github.com/grpc/grpc-java/pull/6831#discussion_r397529399", "bodyText": "Because we removed init, we don't need the subchannelPool field in this class. We can make subchannelPool a final field of GrpclbState created by GrpclbState itself.", "author": "dapengzhang0", "createdAt": "2020-03-24T23:48:08Z", "path": "grpclb/src/main/java/io/grpc/grpclb/GrpclbLoadBalancer.java", "diffHunk": "@@ -68,19 +68,10 @@\n     this.stopwatch = checkNotNull(stopwatch, \"stopwatch\");\n     this.backoffPolicyProvider = checkNotNull(backoffPolicyProvider, \"backoffPolicyProvider\");\n     this.subchannelPool = checkNotNull(subchannelPool, \"subchannelPool\");\n-    this.subchannelPool.init(helper, this);", "originalCommit": "5c02d5925bd0063b43d3cfda9267e59c9eed20e0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU0NTQxNQ==", "url": "https://github.com/grpc/grpc-java/pull/6831#discussion_r397545415", "bodyText": "good catch, i didn't do it because it makes very hard to convert existing tests because grpclb tests mocks the subchannelpool and passed it through GrpclbLoadBalancer. alternatively, I could create a provider or factory class which i thought little too much, wdyt?", "author": "creamsoup", "createdAt": "2020-03-25T00:40:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUyOTM5OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODAxMTQyMw==", "url": "https://github.com/grpc/grpc-java/pull/6831#discussion_r398011423", "bodyText": "The current test approach seems terribly wrong:\n      doAnswer(new Answer<Subchannel>() {\n        @Override\n        public Subchannel answer(InvocationOnMock invocation) throws Throwable {\n          Subchannel subchannel = mock(Subchannel.class);\n          EquivalentAddressGroup eag = (EquivalentAddressGroup) invocation.getArguments()[0];\n          Attributes attrs = (Attributes) invocation.getArguments()[1];\n          when(subchannel.getAllAddresses()).thenReturn(Arrays.asList(eag));\n          when(subchannel.getAttributes()).thenReturn(attrs);\n          mockSubchannels.add(subchannel);\n          pooledSubchannelTracker.add(subchannel);\n          return subchannel;\n        }\n      }).when(subchannelPool).takeOrCreateSubchannel(\n          any(EquivalentAddressGroup.class), any(Attributes.class));\nI think a more correct way to test is not mocking subchannelPool, but just mocking helper.createSubchannel() and keeping track of the EAGs and subchannels. But then a lot of current tests need be rewritten.\nI'm OK with using a factory in the short term if it's too hard to fix tests, but it worth rewriting some of the tests in the future.", "author": "dapengzhang0", "createdAt": "2020-03-25T16:52:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUyOTM5OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA1MzczMg==", "url": "https://github.com/grpc/grpc-java/pull/6831#discussion_r398053732", "bodyText": "i do agree that current test is not really testing anything. at best, it is testing it's own implementation via mock. fixing this (by making fake classes or using real classes instead of mock) is essentially rewriting the entire test.\ni'll use the factory approach, i am not sure how much time we want to invest to fix the test though given the state of the grpclb.", "author": "creamsoup", "createdAt": "2020-03-25T17:51:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUyOTM5OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA3Njc5Nw==", "url": "https://github.com/grpc/grpc-java/pull/6831#discussion_r398076797", "bodyText": "actually i like the factory better, because the pool is ignored/unused when it is using pick_first. using factory prevents it to create unnecessary pool. sounds like win-win.", "author": "creamsoup", "createdAt": "2020-03-25T18:25:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUyOTM5OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODAwMDYyMA==", "url": "https://github.com/grpc/grpc-java/pull/6831#discussion_r398000620", "bodyText": "There is a getter visible for testing already.", "author": "dapengzhang0", "createdAt": "2020-03-25T16:37:46Z", "path": "grpclb/src/main/java/io/grpc/grpclb/GrpclbLoadBalancer.java", "diffHunk": "@@ -54,8 +53,9 @@\n   private GrpclbConfig config = DEFAULT_CONFIG;\n \n   // All mutable states in this class are mutated ONLY from Channel Executor\n+  @VisibleForTesting", "originalCommit": "5c02d5925bd0063b43d3cfda9267e59c9eed20e0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA1MzEwMA==", "url": "https://github.com/grpc/grpc-java/pull/6831#discussion_r398053100", "bodyText": "oops done.", "author": "creamsoup", "createdAt": "2020-03-25T17:50:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODAwMDYyMA=="}], "type": "inlineReview"}, {"oid": "9a57f64a3ffb27ac8800b7ee11d784852de399b3", "url": "https://github.com/grpc/grpc-java/commit/9a57f64a3ffb27ac8800b7ee11d784852de399b3", "message": "remove handleSubchannelState from interface", "committedDate": "2020-03-25T17:41:33Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA0OTUyNw==", "url": "https://github.com/grpc/grpc-java/pull/6831#discussion_r398049527", "bodyText": "Do you need to call handleSubchannelState() in run() as well?", "author": "dapengzhang0", "createdAt": "2020-03-25T17:45:20Z", "path": "grpclb/src/main/java/io/grpc/grpclb/CachedSubchannelPool.java", "diffHunk": "@@ -87,8 +88,7 @@ public void run() {\n     return subchannel;", "originalCommit": "9a57f64a3ffb27ac8800b7ee11d784852de399b3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA3NDYyMg==", "url": "https://github.com/grpc/grpc-java/pull/6831#discussion_r398074622", "bodyText": "we don't need to do that because the state remains same.", "author": "creamsoup", "createdAt": "2020-03-25T18:22:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA0OTUyNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA1MTQ3NQ==", "url": "https://github.com/grpc/grpc-java/pull/6831#discussion_r398051475", "bodyText": "Why need check subchannelPool == null?", "author": "dapengzhang0", "createdAt": "2020-03-25T17:48:06Z", "path": "grpclb/src/main/java/io/grpc/grpclb/GrpclbState.java", "diffHunk": "@@ -196,10 +196,7 @@ void handleSubchannelState(Subchannel subchannel, ConnectivityStateInfo newState\n     if (newState.getState() == SHUTDOWN) {\n       return;\n     }\n-    if (!subchannels.values().contains(subchannel)) {\n-      if (subchannelPool != null ) {\n-        subchannelPool.handleSubchannelState(subchannel, newState);\n-      }\n+    if (subchannelPool == null && !subchannels.values().contains(subchannel)) {", "originalCommit": "9a57f64a3ffb27ac8800b7ee11d784852de399b3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA3NTAzMA==", "url": "https://github.com/grpc/grpc-java/pull/6831#discussion_r398075030", "bodyText": "removed, thanks!", "author": "creamsoup", "createdAt": "2020-03-25T18:23:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA1MTQ3NQ=="}], "type": "inlineReview"}, {"oid": "1944a772c906d74688833e72153bf4816f275141", "url": "https://github.com/grpc/grpc-java/commit/1944a772c906d74688833e72153bf4816f275141", "message": "use getter for grpclbstate", "committedDate": "2020-03-25T17:50:02Z", "type": "commit"}, {"oid": "1fd3a6f355d471dd4b7d5fe2861ddb013c733c71", "url": "https://github.com/grpc/grpc-java/commit/1fd3a6f355d471dd4b7d5fe2861ddb013c733c71", "message": "accept SubchannelPool.Factory instead of SubchannelPool in grpclb", "committedDate": "2020-03-25T18:15:50Z", "type": "commit"}, {"oid": "c7a7e61b30a27feb6411b4454557e679c238364e", "url": "https://github.com/grpc/grpc-java/commit/c7a7e61b30a27feb6411b4454557e679c238364e", "message": "pick fisrt don't use handle subchannel state", "committedDate": "2020-03-25T18:22:12Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA5NjE3Mg==", "url": "https://github.com/grpc/grpc-java/pull/6831#discussion_r398096172", "bodyText": "nit: annotate the field with @Nullable", "author": "dapengzhang0", "createdAt": "2020-03-25T18:56:42Z", "path": "grpclb/src/main/java/io/grpc/grpclb/GrpclbState.java", "diffHunk": "@@ -159,16 +162,27 @@ public String toString() {\n   GrpclbState(\n       GrpclbConfig config,\n       Helper helper,\n-      SubchannelPool subchannelPool,\n+      SubchannelPool.Factory subchannelPoolFactory,\n       TimeProvider time,\n       Stopwatch stopwatch,\n       BackoffPolicy.Provider backoffPolicyProvider) {\n     this.config = checkNotNull(config, \"config\");\n     this.helper = checkNotNull(helper, \"helper\");\n     this.syncContext = checkNotNull(helper.getSynchronizationContext(), \"syncContext\");\n-    this.subchannelPool =\n-        config.getMode() == Mode.ROUND_ROBIN\n-            ? checkNotNull(subchannelPool, \"subchannelPool\") : null;\n+    if (config.getMode() == Mode.ROUND_ROBIN) {\n+      checkNotNull(subchannelPoolFactory, \"subchannelPoolFactory\");\n+      this.subchannelPool =\n+          subchannelPoolFactory.create(\n+              new PooledSubchannelStateListener() {\n+                @Override\n+                public void onSubchannelState(\n+                    Subchannel subchannel, ConnectivityStateInfo newState) {\n+                  handleSubchannelState(subchannel, newState);\n+                }\n+              });\n+    } else {\n+      this.subchannelPool = null;", "originalCommit": "c7a7e61b30a27feb6411b4454557e679c238364e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIwNTEyOA==", "url": "https://github.com/grpc/grpc-java/pull/6831#discussion_r398205128", "bodyText": "I think still need to call GrpclbState.handleSubchannelState() otherwise it's never called for pick_first. And the test calling GrpclbState.handleSubchannelState() directly for pick_first seems cheating. It might require capturing/storing the listeners and delivering subchannel state with the listeners, could be messy.", "author": "dapengzhang0", "createdAt": "2020-03-25T22:19:23Z", "path": "grpclb/src/main/java/io/grpc/grpclb/GrpclbState.java", "diffHunk": "@@ -453,9 +460,18 @@ private void useRoundRobinLists(\n           eagList.add(new EquivalentAddressGroup(origEag.getAddresses(), eagAttrs));\n         }\n         if (subchannels.isEmpty()) {\n-          // TODO(zhangkun83): remove the deprecation suppression on this method once migrated to\n-          // the new createSubchannel().\n-          subchannel = helper.createSubchannel(eagList, createSubchannelAttrs());\n+          subchannel =\n+              helper.createSubchannel(\n+                  CreateSubchannelArgs.newBuilder()\n+                      .setAddresses(eagList)\n+                      .setAttributes(createSubchannelAttrs())\n+                      .build());\n+          subchannel.start(new SubchannelStateListener() {\n+            @Override\n+            public void onSubchannelState(ConnectivityStateInfo newState) {\n+              // No-op", "originalCommit": "c7a7e61b30a27feb6411b4454557e679c238364e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODM0ODg4OQ==", "url": "https://github.com/grpc/grpc-java/pull/6831#discussion_r398348889", "bodyText": "okay. i use that shortcut because it requires non trivial changes. converted mocked classes to fake/real classes, PTAL.", "author": "creamsoup", "createdAt": "2020-03-26T06:50:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIwNTEyOA=="}], "type": "inlineReview"}, {"oid": "d05ff707176fa13e9329abf5fcbc8906cda25606", "url": "https://github.com/grpc/grpc-java/commit/d05ff707176fa13e9329abf5fcbc8906cda25606", "message": "fix pick first channel status update, fix tests (using fakes)", "committedDate": "2020-03-26T06:30:19Z", "type": "commit"}, {"oid": "e0ed14924fdc67cf7ae73fc24df4c1c9b7e503ca", "url": "https://github.com/grpc/grpc-java/commit/e0ed14924fdc67cf7ae73fc24df4c1c9b7e503ca", "message": "fix format", "committedDate": "2020-03-26T06:45:01Z", "type": "commit"}, {"oid": "d053dba57a0ddb2f33dae1d550efb1853b1b2ec0", "url": "https://github.com/grpc/grpc-java/commit/d053dba57a0ddb2f33dae1d550efb1853b1b2ec0", "message": "Merge remote-tracking branch 'upstream/master' into grpclb_cached_pool", "committedDate": "2020-03-26T06:50:52Z", "type": "commit"}, {"oid": "40f86b7ffa16b6c6570b18e4ed9be2f4286f81f2", "url": "https://github.com/grpc/grpc-java/commit/40f86b7ffa16b6c6570b18e4ed9be2f4286f81f2", "message": "rename handleSubchannelState", "committedDate": "2020-03-31T20:03:50Z", "type": "commit"}]}