{"pr_number": 1030, "pr_title": "feat(rest): New search resource endpoint and get releases for multiple projects", "pr_createdAt": "2020-10-30T08:04:00Z", "pr_url": "https://github.com/eclipse/sw360/pull/1030", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDk5OTE3OA==", "url": "https://github.com/eclipse/sw360/pull/1030#discussion_r514999178", "bodyText": "Resuse convertToEmbeddedRelease()", "author": "JaideepPalit", "createdAt": "2020-10-30T10:25:09Z", "path": "rest/resource-server/src/main/java/org/eclipse/sw360/rest/resourceserver/core/RestControllerHelper.java", "diffHunk": "@@ -437,6 +441,31 @@ public Release convertToEmbeddedRelease(Release release) {\n         return embeddedRelease;\n     }\n \n+    public Release convertToEmbeddedReleaseWithDet(Release release) {\n+        Release embeddedRelease = new Release();\n+        embeddedRelease.setId(release.getId());", "originalCommit": "03623b16c4bcf1be7ddde069aca0244f61f68e7c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQyNTE1OQ==", "url": "https://github.com/eclipse/sw360/pull/1030#discussion_r516425159", "bodyText": "reused", "author": "smrutis1", "createdAt": "2020-11-03T04:41:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDk5OTE3OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDk5OTU4OA==", "url": "https://github.com/eclipse/sw360/pull/1030#discussion_r514999588", "bodyText": "Remove unused imports", "author": "JaideepPalit", "createdAt": "2020-10-30T10:25:58Z", "path": "rest/resource-server/src/main/java/org/eclipse/sw360/rest/resourceserver/core/RestControllerHelper.java", "diffHunk": "@@ -57,6 +59,8 @@\n import org.springframework.util.MultiValueMap;\n import org.springframework.web.servlet.support.ServletUriComponentsBuilder;\n \n+import com.google.common.collect.ImmutableSet;", "originalCommit": "03623b16c4bcf1be7ddde069aca0244f61f68e7c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTAwMjcxMg==", "url": "https://github.com/eclipse/sw360/pull/1030#discussion_r515002712", "bodyText": "Not sure, please check if Thread.currentThread() - returns main thread, in that case it should not be interrupted", "author": "JaideepPalit", "createdAt": "2020-10-30T10:32:03Z", "path": "rest/resource-server/src/main/java/org/eclipse/sw360/rest/resourceserver/project/Sw360ProjectService.java", "diffHunk": "@@ -270,4 +278,69 @@ public Project convertToEmbeddedWithExternalIds(Project sw360Object) {\n                 .flattenProjectLinkTree(SW360Utils.getLinkedProjects(project, deep, new ThriftClients(), log, user));\n         return linkedProjects.stream().map(projectLinkMapper).collect(Collectors.toList());\n     }\n+\n+    public Set<Release> getReleasesFromProjectIds(List<String> projectIds, String transitive, final User sw360User, Sw360ReleaseService releaseService) {\n+        final List<Callable<List<Release>>> callableTasksToGetReleases = new ArrayList<Callable<List<Release>>>();\n+\n+        projectIds.stream().forEach(id -> {\n+            Callable<List<Release>> getReleasesByProjectId = () -> {\n+                final Set<String> releaseIds = getReleaseIds(id, sw360User, transitive);\n+\n+                List<Release> releases = releaseIds.stream().map(relId -> wrapTException(() -> {\n+                    final Release sw360Release = releaseService.getReleaseForUserById(relId, sw360User);\n+                    return sw360Release;\n+                })).collect(Collectors.toList());\n+                return releases;\n+            };\n+            callableTasksToGetReleases.add(getReleasesByProjectId);\n+        });\n+\n+        ExecutorService  exeService = Executors.newCachedThreadPool();\n+        List<Future<List<Release>>> releasesFuture = new ArrayList<Future<List<Release>>>();\n+        try {\n+            releasesFuture = exeService.invokeAll(callableTasksToGetReleases);\n+        } catch (InterruptedException e) {\n+            throw new RuntimeException(\"Error getting releases: \" + e.getMessage());\n+        }\n+\n+        List<List<Release>> listOfreleases = releasesFuture.stream().map(fut -> {\n+            List<Release> rels = new ArrayList<Release>();\n+            try {\n+                rels = fut.get();\n+            } catch (InterruptedException | ExecutionException e) {\n+                Throwable cause = e.getCause();\n+                if (cause instanceof ResourceNotFoundException) {\n+                    throw (ResourceNotFoundException) cause;\n+                }\n+\n+                if (cause instanceof AccessDeniedException) {\n+                    throw (AccessDeniedException) cause;\n+                }\n+                throw new RuntimeException(\"Error getting releases: \" + e.getMessage());\n+            }\n+            return rels;\n+        }).collect(Collectors.toList());\n+\n+        awaitTerminationAfterShutdown(exeService);\n+\n+        final Set<Release> relList = new HashSet<Release>();\n+        listOfreleases.stream().forEach(listOfRel -> {\n+            for(Release rel : listOfRel) {\n+                relList.add(rel);\n+            }\n+        });\n+        return relList;\n+    }\n+\n+    private void awaitTerminationAfterShutdown(ExecutorService threadPool) {\n+        threadPool.shutdown();\n+        try {\n+            if (!threadPool.awaitTermination(60, TimeUnit.SECONDS)) {\n+                threadPool.shutdownNow();\n+            }\n+        } catch (InterruptedException ex) {\n+            threadPool.shutdownNow();\n+            Thread.currentThread().interrupt();", "originalCommit": "03623b16c4bcf1be7ddde069aca0244f61f68e7c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTAwNDUzMg==", "url": "https://github.com/eclipse/sw360/pull/1030#discussion_r515004532", "bodyText": "License text is missing", "author": "JaideepPalit", "createdAt": "2020-10-30T10:35:33Z", "path": "rest/resource-server/src/main/java/org/eclipse/sw360/rest/resourceserver/search/SearchController.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/**\n+ * \n+ */", "originalCommit": "03623b16c4bcf1be7ddde069aca0244f61f68e7c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTAwNTExNA==", "url": "https://github.com/eclipse/sw360/pull/1030#discussion_r515005114", "bodyText": "Maybe pagination for search resources should be added as it can give lot of result entries for text search", "author": "JaideepPalit", "createdAt": "2020-10-30T10:36:38Z", "path": "rest/resource-server/src/main/java/org/eclipse/sw360/rest/resourceserver/search/SearchController.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/**\n+ * \n+ */\n+package org.eclipse.sw360.rest.resourceserver.search;\n+\n+import static org.springframework.hateoas.mvc.ControllerLinkBuilder.linkTo;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.apache.thrift.TException;\n+import org.eclipse.sw360.datahandler.thrift.search.SearchResult;\n+import org.eclipse.sw360.datahandler.thrift.users.User;\n+import org.eclipse.sw360.rest.resourceserver.core.RestControllerHelper;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.data.rest.webmvc.BasePathAwareController;\n+import org.springframework.data.rest.webmvc.RepositoryLinksResource;\n+import org.springframework.hateoas.Resource;\n+import org.springframework.hateoas.ResourceProcessor;\n+import org.springframework.hateoas.Resources;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestMethod;\n+import org.springframework.web.bind.annotation.RequestParam;\n+\n+import lombok.NonNull;\n+import lombok.RequiredArgsConstructor;\n+\n+@BasePathAwareController\n+@RequiredArgsConstructor(onConstructor = @__(@Autowired))\n+public class SearchController implements ResourceProcessor<RepositoryLinksResource> {\n+    \n+    private static final Logger log = LogManager.getLogger(SearchController.class);\n+    \n+    public static final String SEARCH_URL = \"/search\";\n+    \n+    @Autowired\n+    private Sw360SearchService sw360SearchService;\n+    \n+    @NonNull\n+    private final RestControllerHelper restControllerHelper;\n+    \n+\n+    @RequestMapping(value = SEARCH_URL, method = RequestMethod.GET)\n+    public ResponseEntity<Resources<Resource<SearchResult>>> getSearchResult(@RequestParam(value = \"searchText\") String searchText, @RequestParam Optional<List<String>> typeMasks) throws TException {", "originalCommit": "03623b16c4bcf1be7ddde069aca0244f61f68e7c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQyNTk1Ng==", "url": "https://github.com/eclipse/sw360/pull/1030#discussion_r516425956", "bodyText": "added", "author": "smrutis1", "createdAt": "2020-11-03T04:45:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTAwNTExNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTAxMTY5OA==", "url": "https://github.com/eclipse/sw360/pull/1030#discussion_r515011698", "bodyText": "Remove commented code", "author": "JaideepPalit", "createdAt": "2020-10-30T10:49:43Z", "path": "rest/resource-server/src/test/java/org/eclipse/sw360/rest/resourceserver/restdocs/ProjectSpecTest.java", "diffHunk": "@@ -1111,6 +1140,64 @@ public void should_document_get_download_license_info() throws Exception {\n                                 parameterWithName(\"externalIds\").description(\"The external Ids of the project\"))));\n     }\n \n+    @Test\n+    public void should_document_get_projects_releases() throws Exception {\n+        String accessToken = TestHelper.getAccessToken(mockMvc, testUserId, testUserPassword);\n+        this.mockMvc.perform(get(\"/api/projects/releases\")\n+                 .header(\"Authorization\", \"Bearer \" + accessToken)\n+                 .param(\"clearingState\", ClearingState.APPROVED.toString())\n+                 .param(\"transitive\", \"false\")\n+                 .param(\"page\", \"0\")\n+                 .param(\"page_entries\", \"5\")\n+                 .param(\"sort\", \"name,desc\")\n+                 .content(this.objectMapper.writeValueAsString(List.of(\"376576\",\"376570\")))\n+                 .contentType(MediaTypes.HAL_JSON)\n+                 .accept(MediaTypes.HAL_JSON))\n+                 .andExpect(status().isOk())\n+                 .andDo(this.documentationHandler.document(\n+                             links(\n+//                                     linkWithRel(\"self\").description(\"The <<resources-releases,Releases resource>>\"),\n+                                     linkWithRel(\"curies\").description(\"Curies are used for online documentation\"),", "originalCommit": "03623b16c4bcf1be7ddde069aca0244f61f68e7c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTAxMjkxNw==", "url": "https://github.com/eclipse/sw360/pull/1030#discussion_r515012917", "bodyText": "License Text is missing", "author": "JaideepPalit", "createdAt": "2020-10-30T10:52:13Z", "path": "rest/resource-server/src/main/java/org/eclipse/sw360/rest/resourceserver/search/Sw360SearchService.java", "diffHunk": "@@ -0,0 +1,42 @@\n+package org.eclipse.sw360.rest.resourceserver.search;", "originalCommit": "03623b16c4bcf1be7ddde069aca0244f61f68e7c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTAyNTM3NQ==", "url": "https://github.com/eclipse/sw360/pull/1030#discussion_r515025375", "bodyText": "Request structure should be added in the documentation", "author": "JaideepPalit", "createdAt": "2020-10-30T11:17:05Z", "path": "rest/resource-server/src/test/java/org/eclipse/sw360/rest/resourceserver/restdocs/ProjectSpecTest.java", "diffHunk": "@@ -1111,6 +1140,64 @@ public void should_document_get_download_license_info() throws Exception {\n                                 parameterWithName(\"externalIds\").description(\"The external Ids of the project\"))));\n     }\n \n+    @Test\n+    public void should_document_get_projects_releases() throws Exception {\n+        String accessToken = TestHelper.getAccessToken(mockMvc, testUserId, testUserPassword);\n+        this.mockMvc.perform(get(\"/api/projects/releases\")\n+                 .header(\"Authorization\", \"Bearer \" + accessToken)\n+                 .param(\"clearingState\", ClearingState.APPROVED.toString())\n+                 .param(\"transitive\", \"false\")", "originalCommit": "03623b16c4bcf1be7ddde069aca0244f61f68e7c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQyNjMxNg==", "url": "https://github.com/eclipse/sw360/pull/1030#discussion_r516426316", "bodyText": "Added the request statement", "author": "smrutis1", "createdAt": "2020-11-03T04:47:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTAyNTM3NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTAzMTIyOQ==", "url": "https://github.com/eclipse/sw360/pull/1030#discussion_r515031229", "bodyText": "It is better to have FixedThreadPool since cachedThreadPool will create threads equal to project ids (which can be multiple like 100 ids),\nAlso if it can be made static and only one object is maintained like mailExecutor", "author": "JaideepPalit", "createdAt": "2020-10-30T11:27:32Z", "path": "rest/resource-server/src/main/java/org/eclipse/sw360/rest/resourceserver/project/Sw360ProjectService.java", "diffHunk": "@@ -270,4 +278,69 @@ public Project convertToEmbeddedWithExternalIds(Project sw360Object) {\n                 .flattenProjectLinkTree(SW360Utils.getLinkedProjects(project, deep, new ThriftClients(), log, user));\n         return linkedProjects.stream().map(projectLinkMapper).collect(Collectors.toList());\n     }\n+\n+    public Set<Release> getReleasesFromProjectIds(List<String> projectIds, String transitive, final User sw360User, Sw360ReleaseService releaseService) {\n+        final List<Callable<List<Release>>> callableTasksToGetReleases = new ArrayList<Callable<List<Release>>>();\n+\n+        projectIds.stream().forEach(id -> {\n+            Callable<List<Release>> getReleasesByProjectId = () -> {\n+                final Set<String> releaseIds = getReleaseIds(id, sw360User, transitive);\n+\n+                List<Release> releases = releaseIds.stream().map(relId -> wrapTException(() -> {\n+                    final Release sw360Release = releaseService.getReleaseForUserById(relId, sw360User);\n+                    return sw360Release;\n+                })).collect(Collectors.toList());\n+                return releases;\n+            };\n+            callableTasksToGetReleases.add(getReleasesByProjectId);\n+        });\n+\n+        ExecutorService  exeService = Executors.newCachedThreadPool();", "originalCommit": "03623b16c4bcf1be7ddde069aca0244f61f68e7c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQyNjc0MQ==", "url": "https://github.com/eclipse/sw360/pull/1030#discussion_r516426741", "bodyText": "Have used fixed thread pool and made it static", "author": "smrutis1", "createdAt": "2020-11-03T04:49:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTAzMTIyOQ=="}], "type": "inlineReview"}, {"oid": "67524ce245b99783123d945b0327af16a7f58180", "url": "https://github.com/eclipse/sw360/commit/67524ce245b99783123d945b0327af16a7f58180", "message": "feat(rest): New search resource endpoint and get releases for multiple projects\n\nSigned-off-by: Smruti Prakash Sahoo <smruti.sahoo@siemens.com>", "committedDate": "2020-11-02T12:33:41Z", "type": "forcePushed"}, {"oid": "9bb9d2be47a6f458d743215bef7f27b33c53e06f", "url": "https://github.com/eclipse/sw360/commit/9bb9d2be47a6f458d743215bef7f27b33c53e06f", "message": "feat(rest): New search resource endpoint and get releases for multiple projects\n\nSigned-off-by: Smruti Prakash Sahoo <smruti.sahoo@siemens.com>", "committedDate": "2020-11-02T12:50:08Z", "type": "forcePushed"}, {"oid": "1f2ec3654c54f935eb8d19f2ca16ef6efff81687", "url": "https://github.com/eclipse/sw360/commit/1f2ec3654c54f935eb8d19f2ca16ef6efff81687", "message": "feat(rest): New search resource endpoint and get releases for multiple projects\n\nSigned-off-by: Smruti Prakash Sahoo <smruti.sahoo@siemens.com>", "committedDate": "2020-11-03T04:37:45Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzgyODA4MA==", "url": "https://github.com/eclipse/sw360/pull/1030#discussion_r517828080", "bodyText": "Could it be possible to resuse this method\npublic Release convertToEmbeddedRelease(Release release, List<String> fields)", "author": "JaideepPalit", "createdAt": "2020-11-05T06:58:58Z", "path": "rest/resource-server/src/main/java/org/eclipse/sw360/rest/resourceserver/core/RestControllerHelper.java", "diffHunk": "@@ -437,6 +439,28 @@ public Release convertToEmbeddedRelease(Release release) {\n         return embeddedRelease;\n     }\n \n+    public Release convertToEmbeddedReleaseWithDet(Release release) {", "originalCommit": "1f2ec3654c54f935eb8d19f2ca16ef6efff81687", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzg5OTk3Ng==", "url": "https://github.com/eclipse/sw360/pull/1030#discussion_r517899976", "bodyText": "Done", "author": "smrutis1", "createdAt": "2020-11-05T09:17:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzgyODA4MA=="}], "type": "inlineReview"}, {"oid": "693dc596f49d6519ff8c23d77ab05bcdfb99d237", "url": "https://github.com/eclipse/sw360/commit/693dc596f49d6519ff8c23d77ab05bcdfb99d237", "message": "feat(rest): New search resource endpoint and get releases for multiple projects\n\nSigned-off-by: Smruti Prakash Sahoo <smruti.sahoo@siemens.com>", "committedDate": "2020-11-05T08:51:35Z", "type": "commit"}, {"oid": "693dc596f49d6519ff8c23d77ab05bcdfb99d237", "url": "https://github.com/eclipse/sw360/commit/693dc596f49d6519ff8c23d77ab05bcdfb99d237", "message": "feat(rest): New search resource endpoint and get releases for multiple projects\n\nSigned-off-by: Smruti Prakash Sahoo <smruti.sahoo@siemens.com>", "committedDate": "2020-11-05T08:51:35Z", "type": "forcePushed"}]}