{"pr_number": 8708, "pr_title": "Fix recursive ObjectModel initialisation", "pr_createdAt": "2020-07-09T10:24:42Z", "pr_url": "https://github.com/vaadin/flow/pull/8708", "timeline": [{"oid": "0ccd1ac37644f920cf667436c8fa4686a97f3368", "url": "https://github.com/vaadin/flow/commit/0ccd1ac37644f920cf667436c8fa4686a97f3368", "message": "Enable lazy initialisation of ObjectModel keys", "committedDate": "2020-07-09T10:22:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjIxMjIwNg==", "url": "https://github.com/vaadin/flow/pull/8708#discussion_r452212206", "bodyText": "Are these symbols a part of the public API? What's the main reason to add the symbol postfix? It looks unnecessary, at least in the auto-completion list.\n\nI would like to see shorter API names where possible, e.g. this.binder.model[keys] instead of this.binder.model[keysSymbol]. What would be the downside of renaming all xyzSymbol into xyz?", "author": "vlukashov", "createdAt": "2020-07-09T13:21:23Z", "path": "flow-client/src/main/resources/META-INF/resources/frontend/form/Models.ts", "diffHunk": "@@ -7,6 +7,7 @@ export const ItemModelSymbol = Symbol('ItemModel');\n export const parentSymbol = Symbol('parent');\n \n export const keySymbol = Symbol('key');\n+export const keysSymbol = Symbol('keys');", "originalCommit": "0ccd1ac37644f920cf667436c8fa4686a97f3368", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDI1NzIxOA==", "url": "https://github.com/vaadin/flow/pull/8708#discussion_r454257218", "bodyText": "Per offline discussion, will change to _xyz.\nBut I prefer to do it in a separate PR.", "author": "haijian-vaadin", "createdAt": "2020-07-14T10:25:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjIxMjIwNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI1MzIwOA==", "url": "https://github.com/vaadin/flow/pull/8708#discussion_r452253208", "bodyText": "In what situation would this be useful as a public API? Can we make it private?", "author": "vlukashov", "createdAt": "2020-07-09T14:19:26Z", "path": "flow-client/src/main/resources/META-INF/resources/frontend/form/Models.ts", "diffHunk": "@@ -80,14 +81,35 @@ export class StringModel extends PrimitiveModel<string> implements HasFromString\n \n export class ObjectModel<T> extends AbstractModel<T> {\n   static createEmptyValue() {\n-    const modelInstance = new this({value: undefined as any}, 'value')\n-    return Object.keys(modelInstance).reduce(\n-      (obj: any, key: keyof any) => {\n-        (obj = (obj || {}))[key] = (\n-          (modelInstance as any)[key].constructor as ModelConstructor<any, AbstractModel<any>>\n-        ).createEmptyValue();\n-        return obj;\n-      }, null);\n+    const modelInstance = new this({value: undefined as any}, 'value');\n+    let obj = {};\n+    for (let proto = Object.getPrototypeOf(modelInstance); proto !== ObjectModel.prototype; proto = Object.getPrototypeOf(proto)) {\n+      obj = Object.getOwnPropertyNames(proto)\n+        .filter(propertyName => propertyName !== 'constructor')\n+        .reduce((o, propertyName) => {\n+          (o as any)[propertyName] = (\n+            (modelInstance as any)[propertyName]\n+              .constructor as ModelConstructor<any, AbstractModel<any>>\n+          ).createEmptyValue();\n+          return o;\n+        }, obj)\n+    }\n+    return obj;\n+  }\n+\n+  [keysSymbol]: {[key in keyof T]?: AbstractModel<T[key]>} = {};", "originalCommit": "0ccd1ac37644f920cf667436c8fa4686a97f3368", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI1NjM4Mw==", "url": "https://github.com/vaadin/flow/pull/8708#discussion_r452256383", "bodyText": "This would benefit from a comment explaining what this loop does and why.", "author": "vlukashov", "createdAt": "2020-07-09T14:23:53Z", "path": "flow-client/src/main/resources/META-INF/resources/frontend/form/Models.ts", "diffHunk": "@@ -80,14 +81,35 @@ export class StringModel extends PrimitiveModel<string> implements HasFromString\n \n export class ObjectModel<T> extends AbstractModel<T> {\n   static createEmptyValue() {\n-    const modelInstance = new this({value: undefined as any}, 'value')\n-    return Object.keys(modelInstance).reduce(\n-      (obj: any, key: keyof any) => {\n-        (obj = (obj || {}))[key] = (\n-          (modelInstance as any)[key].constructor as ModelConstructor<any, AbstractModel<any>>\n-        ).createEmptyValue();\n-        return obj;\n-      }, null);\n+    const modelInstance = new this({value: undefined as any}, 'value');\n+    let obj = {};\n+    for (let proto = Object.getPrototypeOf(modelInstance); proto !== ObjectModel.prototype; proto = Object.getPrototypeOf(proto)) {", "originalCommit": "0ccd1ac37644f920cf667436c8fa4686a97f3368", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI1OTkwNQ==", "url": "https://github.com/vaadin/flow/pull/8708#discussion_r452259905", "bodyText": "The symbol name keys is very similar to key, which makes it easy to assume they are of the same type / closely related, and which seems like a wrong assumption.\nDo I understand it right that key is the own name of the modeled field, i.e. a string like 'customer', whereas keys is an object with initialized models for subfields, like { firstname: StringModel }?\nIf so, can one of them or both be renamed to avoid the possible confusion? Maybe name and properties / fields / keys?", "author": "vlukashov", "createdAt": "2020-07-09T14:28:52Z", "path": "flow-client/src/main/resources/META-INF/resources/frontend/form/Models.ts", "diffHunk": "@@ -7,6 +7,7 @@ export const ItemModelSymbol = Symbol('ItemModel');\n export const parentSymbol = Symbol('parent');\n \n export const keySymbol = Symbol('key');\n+export const keysSymbol = Symbol('keys');", "originalCommit": "0ccd1ac37644f920cf667436c8fa4686a97f3368", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI2Njc0MA==", "url": "https://github.com/vaadin/flow/pull/8708#discussion_r452266740", "bodyText": "How can we ensure no name collision could happen if a Java bean has a property called getKey? Should this be a symbol-named method?", "author": "vlukashov", "createdAt": "2020-07-09T14:38:18Z", "path": "flow-client/src/main/resources/META-INF/resources/frontend/form/Models.ts", "diffHunk": "@@ -80,14 +81,35 @@ export class StringModel extends PrimitiveModel<string> implements HasFromString\n \n export class ObjectModel<T> extends AbstractModel<T> {\n   static createEmptyValue() {\n-    const modelInstance = new this({value: undefined as any}, 'value')\n-    return Object.keys(modelInstance).reduce(\n-      (obj: any, key: keyof any) => {\n-        (obj = (obj || {}))[key] = (\n-          (modelInstance as any)[key].constructor as ModelConstructor<any, AbstractModel<any>>\n-        ).createEmptyValue();\n-        return obj;\n-      }, null);\n+    const modelInstance = new this({value: undefined as any}, 'value');\n+    let obj = {};\n+    for (let proto = Object.getPrototypeOf(modelInstance); proto !== ObjectModel.prototype; proto = Object.getPrototypeOf(proto)) {\n+      obj = Object.getOwnPropertyNames(proto)\n+        .filter(propertyName => propertyName !== 'constructor')\n+        .reduce((o, propertyName) => {\n+          (o as any)[propertyName] = (\n+            (modelInstance as any)[propertyName]\n+              .constructor as ModelConstructor<any, AbstractModel<any>>\n+          ).createEmptyValue();\n+          return o;\n+        }, obj)\n+    }\n+    return obj;\n+  }\n+\n+  [keysSymbol]: {[key in keyof T]?: AbstractModel<T[key]>} = {};\n+\n+  protected getKey<", "originalCommit": "0ccd1ac37644f920cf667436c8fa4686a97f3368", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI3MTAwOA==", "url": "https://github.com/vaadin/flow/pull/8708#discussion_r452271008", "bodyText": "+1\nI'm slightly in favor of using a helper method over a direct implementation in each generated property getter, like\nget idString() {\n  return this[keysSymbol]['idString'] ||\n    this[keysSymbol]['idString'] = new StringModel(this, 'idString');\n}\nArguably, a helper method like getKey() would be easier to understand and more size-efficient compared to a direct alternative.", "author": "vlukashov", "createdAt": "2020-07-09T14:44:02Z", "path": "flow-client/src/test/frontend/form/TestModels.ts", "diffHunk": "@@ -17,7 +18,9 @@ export interface IdEntity {\n }\n export class IdEntityModel<T extends IdEntity = IdEntity> extends ObjectModel<T> {\n   static createEmptyValue: () => IdEntity;\n-  readonly idString = new StringModel(this, 'idString');\n+  get idString(): StringModel {\n+    return this.getKey('idString', StringModel, []);", "originalCommit": "0ccd1ac37644f920cf667436c8fa4686a97f3368", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "9bec9775e6e5d8550c16e1578181a22652d32e63", "url": "https://github.com/vaadin/flow/commit/9bec9775e6e5d8550c16e1578181a22652d32e63", "message": "Introduce getKeyModelSymbol to prevent naming collisions with user fields", "committedDate": "2020-07-09T17:46:47Z", "type": "commit"}, {"oid": "d76c8539123e53ebb9fdcc0382c3a0e3c1d546cc", "url": "https://github.com/vaadin/flow/commit/d76c8539123e53ebb9fdcc0382c3a0e3c1d546cc", "message": "Generate lazy-initialised bean models", "committedDate": "2020-07-09T17:47:53Z", "type": "commit"}, {"oid": "cab6c447f8bc3336caa23cc0d0de9e8e1a902509", "url": "https://github.com/vaadin/flow/commit/cab6c447f8bc3336caa23cc0d0de9e8e1a902509", "message": "Apply review suggestions", "committedDate": "2020-07-10T08:49:06Z", "type": "commit"}, {"oid": "cfee8cc1d7e14ddf8b53cfd9a241f713290998fc", "url": "https://github.com/vaadin/flow/commit/cfee8cc1d7e14ddf8b53cfd9a241f713290998fc", "message": "Support optional properties in form models", "committedDate": "2020-07-10T17:04:03Z", "type": "commit"}, {"oid": "bb7e43d1dc8889bc24fa99b310014a95821cde8d", "url": "https://github.com/vaadin/flow/commit/bb7e43d1dc8889bc24fa99b310014a95821cde8d", "message": "Test for optional form properties initialization", "committedDate": "2020-07-13T10:43:47Z", "type": "commit"}, {"oid": "794d8afa6157559ba2e408bb8813485208ec58f7", "url": "https://github.com/vaadin/flow/commit/794d8afa6157559ba2e408bb8813485208ec58f7", "message": "Merge branch 'master' into ap/fix/forms/self-reference-recursion", "committedDate": "2020-07-13T11:38:28Z", "type": "commit"}, {"oid": "303ec9f296b4c6911ec0641e9adaa1cf91531dc6", "url": "https://github.com/vaadin/flow/commit/303ec9f296b4c6911ec0641e9adaa1cf91531dc6", "message": "fix optional parsing in model generator", "committedDate": "2020-07-14T08:25:25Z", "type": "commit"}, {"oid": "f874cbcd7ba8798e5e3fb0452fd40c25b889e763", "url": "https://github.com/vaadin/flow/commit/f874cbcd7ba8798e5e3fb0452fd40c25b889e763", "message": "fix a failed test", "committedDate": "2020-07-14T09:31:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDYzMzQxMA==", "url": "https://github.com/vaadin/flow/pull/8708#discussion_r454633410", "bodyText": "I suggest to keep consistency in naming symbols. I think it's better to pick a naming convention and follow it with all symbols used in this module. i.e. either all are called abcSymbol or all are called abc, but not a mix of those.", "author": "vlukashov", "createdAt": "2020-07-14T20:44:32Z", "path": "flow-client/src/main/resources/META-INF/resources/frontend/form/Models.ts", "diffHunk": "@@ -10,21 +10,25 @@ export const keySymbol = Symbol('key');\n export const fromStringSymbol = Symbol('fromString');\n export const validatorsSymbol = Symbol('validators');\n export const binderNodeSymbol = Symbol('binderNode');\n+export const optionalSymbol = Symbol('optional');\n+\n+export const getPropertyModel = Symbol('getPropertyModel');\n+const properties = Symbol('properties');", "originalCommit": "f874cbcd7ba8798e5e3fb0452fd40c25b889e763", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "483269dd8813e7ad8e82e2fa73f87757cc6b9bad", "url": "https://github.com/vaadin/flow/commit/483269dd8813e7ad8e82e2fa73f87757cc6b9bad", "message": "fix compile errors", "committedDate": "2020-07-15T05:52:08Z", "type": "commit"}, {"oid": "bfae29d0735198fb2899be5994b37dd924257805", "url": "https://github.com/vaadin/flow/commit/bfae29d0735198fb2899be5994b37dd924257805", "message": "fix compile errors in the generated code", "committedDate": "2020-07-15T06:18:31Z", "type": "commit"}, {"oid": "8d8d6c8ecac9cb6bb909ad772d2747f1e765b354", "url": "https://github.com/vaadin/flow/commit/8d8d6c8ecac9cb6bb909ad772d2747f1e765b354", "message": "chore: make symbols naming consistent", "committedDate": "2020-07-15T06:28:02Z", "type": "commit"}, {"oid": "dc3295131209d2c5041fb3d055f2465a29967317", "url": "https://github.com/vaadin/flow/commit/dc3295131209d2c5041fb3d055f2465a29967317", "message": "fix array item default value undefined problem", "committedDate": "2020-07-17T12:11:16Z", "type": "commit"}, {"oid": "336d5603343fa09eece771c5bb9248338f9afbea", "url": "https://github.com/vaadin/flow/commit/336d5603343fa09eece771c5bb9248338f9afbea", "message": "Merge branch 'master' into ap/fix/forms/self-reference-recursion", "committedDate": "2020-07-17T14:04:18Z", "type": "commit"}]}