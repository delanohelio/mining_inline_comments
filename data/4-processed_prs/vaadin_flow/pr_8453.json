{"pr_number": 8453, "pr_title": "AbstractDataView listener test #8345", "pr_createdAt": "2020-05-28T19:43:47Z", "pr_url": "https://github.com/vaadin/flow/pull/8453", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjI2NjcxOQ==", "url": "https://github.com/vaadin/flow/pull/8453#discussion_r432266719", "bodyText": "To make this unified with the DataCommunicator size change non communicator events should also be sent onBeforeClientResponse e.g. on the component we should use:\n        StateNode node = getElement().getNode();\n        node.runWhenAttached(ui -> ui.getInternals().getStateTree()\n                .beforeClientResponse(node, executionContext -> fireEvent(new SizeChangeEvent<>(this, newSize))));\nThis will need some more code in the test also see: https://github.com/vaadin/vaadin-grid-flow/pull/1002/files", "author": "caalador", "createdAt": "2020-05-29T05:43:16Z", "path": "flow-data/src/test/java/com/vaadin/flow/data/provider/AbstractDataViewListenerTest.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.vaadin.flow.data.provider;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.util.Arrays;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+public abstract class AbstractDataViewListenerTest {\n+\n+    private final String[] ITEMS = new String[] { \"one\", \"two\", \"three\",\n+            \"four\" };\n+\n+    @Test\n+    public void addSizeChangeListener_sizeChanged_listenersAreNotified() {\n+        HasListDataView<String, ? extends AbstractListDataView<String>> hasListDataView =\n+                getComponent();\n+        AbstractListDataView<String> dataView =\n+                hasListDataView.setDataProvider(Arrays.stream(ITEMS));\n+\n+        AtomicInteger invocationCounter = new AtomicInteger(0);\n+\n+        dataView.addSizeChangeListener(event -> invocationCounter.incrementAndGet());\n+\n+        dataView.withFilter(\"one\"::equals);\n+        dataView.withFilter(null);\n+        dataView.addItemAfter(\"five\", \"four\");\n+        dataView.addItemBefore(\"zero\", \"one\");\n+        dataView.addItem(\"last\");\n+        dataView.removeItem(\"zero\");\n+\n+        Assert.assertEquals(\n+                \"Unexpected count of size change listener invocations occurred\",\n+                6, invocationCounter.get());", "originalCommit": "bbd24993f3140d68342d31e9def189848c0c3ffe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ3ODczNA==", "url": "https://github.com/vaadin/flow/pull/8453#discussion_r432478734", "bodyText": "done", "author": "mshabarov", "createdAt": "2020-05-29T13:22:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjI2NjcxOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQzNTExNw==", "url": "https://github.com/vaadin/flow/pull/8453#discussion_r432435117", "bodyText": "Should probably be AbstractListDataViewListenerTest as the test uses the List DataView.", "author": "caalador", "createdAt": "2020-05-29T11:58:00Z", "path": "flow-data/src/test/java/com/vaadin/flow/data/provider/AbstractDataViewListenerTest.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.vaadin.flow.data.provider;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.util.Arrays;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+public abstract class AbstractDataViewListenerTest {", "originalCommit": "bbd24993f3140d68342d31e9def189848c0c3ffe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ3ODU3OA==", "url": "https://github.com/vaadin/flow/pull/8453#discussion_r432478578", "bodyText": "done", "author": "mshabarov", "createdAt": "2020-05-29T13:22:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQzNTExNw=="}], "type": "inlineReview"}, {"oid": "d7be8e57d4ec9d23f2f29eb3bebefade70c15d3a", "url": "https://github.com/vaadin/flow/commit/d7be8e57d4ec9d23f2f29eb3bebefade70c15d3a", "message": "AbstractDataView listener test #8345", "committedDate": "2020-05-29T13:55:31Z", "type": "commit"}, {"oid": "deefbb07301c0beef61435b841a8d06b2ccd0564", "url": "https://github.com/vaadin/flow/commit/deefbb07301c0beef61435b841a8d06b2ccd0564", "message": "BeforeClientResponse case is taken into account", "committedDate": "2020-05-29T13:55:31Z", "type": "commit"}, {"oid": "deefbb07301c0beef61435b841a8d06b2ccd0564", "url": "https://github.com/vaadin/flow/commit/deefbb07301c0beef61435b841a8d06b2ccd0564", "message": "BeforeClientResponse case is taken into account", "committedDate": "2020-05-29T13:55:31Z", "type": "forcePushed"}]}