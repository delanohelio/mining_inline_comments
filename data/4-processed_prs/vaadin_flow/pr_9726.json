{"pr_number": 9726, "pr_title": "chore: merge master to offline", "pr_createdAt": "2020-12-28T08:23:08Z", "pr_url": "https://github.com/vaadin/flow/pull/9726", "timeline": [{"oid": "fafc0f21a693a13a95f48c1ca307de3a548275c9", "url": "https://github.com/vaadin/flow/commit/fafc0f21a693a13a95f48c1ca307de3a548275c9", "message": "refactor: extract common config functionality and introduce add config (#9635)\n\nrefactor: extract common config functionality and introduce add config\r\n\r\npart of #9417", "committedDate": "2020-12-16T06:21:38Z", "type": "commit"}, {"oid": "f946d33f4fb0df4ce9f8f0202c6ba2f4491815f3", "url": "https://github.com/vaadin/flow/commit/f946d33f4fb0df4ce9f8f0202c6ba2f4491815f3", "message": "fix(TypeScript): binder should allow typing decimal numbers (#9604)\n\n* WIP: fix(TypeScript): binder should allow typing decimal numbers\r\n\r\nFixes #9521\r\nFixes #9522\r\n\r\n* fix linter error\r\n\r\n* fix: disallow incorrect decimal separator (,) and extra characters\r\n\r\n* fix linter errors\r\n\r\n* cleaup: remove debugger", "committedDate": "2020-12-16T10:44:34Z", "type": "commit"}, {"oid": "9e8a0618dbc7ffec22b8fff49a520b846f7f2c49", "url": "https://github.com/vaadin/flow/commit/9e8a0618dbc7ffec22b8fff49a520b846f7f2c49", "message": "chore: avoid race condition in test (#9674)", "committedDate": "2020-12-16T16:58:33Z", "type": "commit"}, {"oid": "4e3992a17ae4fe9b65810fc7cc4eae8c8bac2ac8", "url": "https://github.com/vaadin/flow/commit/4e3992a17ae4fe9b65810fc7cc4eae8c8bac2ac8", "message": "feat: allow endpoints to work on non-public classes (#9592)\n\n* Allow endpoints to work on non-public classes.\r\nFixes #8168\r\n\r\n* move testing endpoint class to fusion-endpoint module\r\n\r\nCo-authored-by: Nikolai Gorokhov <nikolai@vaadin.com>\r\nCo-authored-by: haijian <haijian@vaadin.com>", "committedDate": "2020-12-16T18:07:44Z", "type": "commit"}, {"oid": "0dee32a8d37679dc0ed6c7069ea125f392ceb2f1", "url": "https://github.com/vaadin/flow/commit/0dee32a8d37679dc0ed6c7069ea125f392ceb2f1", "message": "fix: use ordered Set for deterministic CompositeDataGenerator  (#9657)\n\nUse LinkedHashSet (not HashSet) to keep the order of data generators in CompositeDataGenerator.\r\n\r\nFixes: https://github.com/vaadin/flow/issues/9656", "committedDate": "2020-12-17T11:04:00Z", "type": "commit"}, {"oid": "ab6855122c2278112e65da4a566429d55895f808", "url": "https://github.com/vaadin/flow/commit/ab6855122c2278112e65da4a566429d55895f808", "message": "feat: document level npm css (#9559)\n\nNow there is a possibility to use the\r\n\"documentCss\" key in theme.json to\r\ninject npm css into the document rool level\r\nelement.\r\n\r\nThis is mostly for embedded web components\r\nas they do not target document by default\r\n\r\nFixes #9533\r\n\r\n* Use more targeted bookkeeping for globalCss\r\n\r\nHave a full map on where the global css\r\nhas been injected to so that if we add for\r\nshadow roots we don't add to document,\r\nbut we are able to add to other shadow roots.", "committedDate": "2020-12-17T13:38:14Z", "type": "commit"}, {"oid": "28a2c4e159fa876d4dc52c5d5c20ed528244c5f9", "url": "https://github.com/vaadin/flow/commit/28a2c4e159fa876d4dc52c5d5c20ed528244c5f9", "message": "chore: update ChromeDriver to 87.0.4280.88 (#9653)\n\nthis is a patch update", "committedDate": "2020-12-18T07:08:47Z", "type": "commit"}, {"oid": "91e8968e476f959f390557a0a741e2afa39fa513", "url": "https://github.com/vaadin/flow/commit/91e8968e476f959f390557a0a741e2afa39fa513", "message": "Fix: add the missing otf font extension. (#9686)\n\nThe file-loader didn't handle otf extensions so having a otf font-face\r\nfailed the build.\r\n\r\nFixes #9683", "committedDate": "2020-12-18T09:02:18Z", "type": "commit"}, {"oid": "a6eebc7e7a654f134d438d7cf4cb02e99616f4c5", "url": "https://github.com/vaadin/flow/commit/a6eebc7e7a654f134d438d7cf4cb02e99616f4c5", "message": "Support reusable application theme (#9650)\n\nResolves #9585", "committedDate": "2020-12-18T10:27:06Z", "type": "commit"}, {"oid": "8da57c1401b93a78f9ed1310777dcac4026f58a0", "url": "https://github.com/vaadin/flow/commit/8da57c1401b93a78f9ed1310777dcac4026f58a0", "message": "Add IT test for CSS loading order (#9613)\n\nResolves #9529", "committedDate": "2020-12-21T09:42:53Z", "type": "commit"}, {"oid": "e3821fd5036744f240634383d1046971d4b2fe24", "url": "https://github.com/vaadin/flow/commit/e3821fd5036744f240634383d1046971d4b2fe24", "message": "refactor!: Extract app config from deployment config (#9642)\n\nRemoves deprecated `VaadinServletConfiguration` and not needed `VaadinConfigurationException`.\r\n\r\nPart of #9417", "committedDate": "2020-12-22T08:41:37Z", "type": "commit"}, {"oid": "de9101c203ea87286a8aae4b12a519edf13a67d5", "url": "https://github.com/vaadin/flow/commit/de9101c203ea87286a8aae4b12a519edf13a67d5", "message": "Feat: enable having a parent theme (#9648)\n\nIt is now possible to extend a parent theme.\r\nThis means adding to theme.json the key \"parent\" with\r\nthe value of the target theme and then this will\r\nbe loaded before the application's own theme.\r\n\r\nFixes #9587", "committedDate": "2020-12-22T11:19:00Z", "type": "commit"}, {"oid": "86efdc6a54196914982bcad2a72e8649fe4338d2", "url": "https://github.com/vaadin/flow/commit/86efdc6a54196914982bcad2a72e8649fe4338d2", "message": "fix: flaky unit test due to race for port numbers (#9710)", "committedDate": "2020-12-22T11:40:36Z", "type": "commit"}, {"oid": "f38a4cc224ce61ae047d786deb64655ac42177bb", "url": "https://github.com/vaadin/flow/commit/f38a4cc224ce61ae047d786deb64655ac42177bb", "message": "fix: verify theme folder existence based on app-theme name in @Theme (#9676)\n\n* verify theme folder existence based on app-theme name used in @Theme", "committedDate": "2020-12-22T14:28:29Z", "type": "commit"}, {"oid": "e5cc24a56a9d18e5eabe040f25c62335f646f5d1", "url": "https://github.com/vaadin/flow/commit/e5cc24a56a9d18e5eabe040f25c62335f646f5d1", "message": "fix: avoid BeforeClient executions for nodes with different StateTree (#9715)\n\nfixes #9397", "committedDate": "2020-12-23T08:40:22Z", "type": "commit"}, {"oid": "1744c1bf789f1e8583062b107cd66526e3ed63c1", "url": "https://github.com/vaadin/flow/commit/1744c1bf789f1e8583062b107cd66526e3ed63c1", "message": "fix: @ServiceRanking is not handled by the osgi bundle generation tool (#9716)\n\nUse service.ranking property directly and avoid @ServiceRanking\r\nannotation which for some reason is not handled by the bnd tools and no\r\nrank is generated for the OSGI service descriptor.", "committedDate": "2020-12-23T08:40:44Z", "type": "commit"}, {"oid": "30e51d17c48fcc0ba2225252ed310b384fd167c1", "url": "https://github.com/vaadin/flow/commit/30e51d17c48fcc0ba2225252ed310b384fd167c1", "message": "fix: use proper logging for installing pnpm and its directory (#9724)\n\nFixes: #9571\r\n\r\nCo-authored-by: Johannes Eriksson <joheriks@vaadin.com>", "committedDate": "2020-12-28T06:52:10Z", "type": "commit"}, {"oid": "c3d0bc992eb4c6a2f049afede248a5c51330a928", "url": "https://github.com/vaadin/flow/commit/c3d0bc992eb4c6a2f049afede248a5c51330a928", "message": "Merge branch 'master' into merge-master-to-offline\n\n# Conflicts:\n#\tflow-server/src/main/java/com/vaadin/flow/server/DevModeHandler.java\n#\tflow-server/src/test/java/com/vaadin/flow/server/startup/DevModeInitializerTest.java", "committedDate": "2020-12-28T08:21:37Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTI3NjEyOA==", "url": "https://github.com/vaadin/flow/pull/9726#discussion_r549276128", "bodyText": "Define a constant instead of duplicating this literal \"jar!/\" 3 times.", "author": "vaadin-bot", "createdAt": "2020-12-28T09:22:27Z", "path": "flow-server/src/main/java/com/vaadin/flow/server/startup/DefaultApplicationConfigurationFactory.java", "diffHunk": "@@ -0,0 +1,246 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.server.startup;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.net.URL;\n+import java.util.Collections;\n+import java.util.Enumeration;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+import org.osgi.framework.Constants;\n+import org.osgi.service.component.annotations.Component;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.vaadin.flow.di.Lookup;\n+import com.vaadin.flow.di.ResourceProvider;\n+import com.vaadin.flow.server.AbstractPropertyConfiguration;\n+import com.vaadin.flow.server.VaadinContext;\n+import com.vaadin.flow.server.frontend.FallbackChunk;\n+import com.vaadin.flow.server.frontend.FrontendUtils;\n+\n+import elemental.json.JsonObject;\n+import elemental.json.impl.JsonUtil;\n+\n+import static com.vaadin.flow.server.Constants.VAADIN_SERVLET_RESOURCES;\n+import static com.vaadin.flow.server.InitParameters.SERVLET_PARAMETER_PRODUCTION_MODE;\n+import static com.vaadin.flow.server.frontend.FrontendUtils.TOKEN_FILE;\n+\n+/**\n+ * Default implementation of {@link ApplicationConfigurationFactory}.\n+ * \n+ * @author Vaadin Ltd\n+ * @since\n+ *\n+ */\n+@Component(service = ApplicationConfigurationFactory.class, property = Constants.SERVICE_RANKING\n+        + \":Integer=\" + Integer.MIN_VALUE)\n+public class DefaultApplicationConfigurationFactory\n+        extends AbstractConfigurationFactory\n+        implements ApplicationConfigurationFactory {\n+\n+    protected static class ApplicationConfigurationImpl extends\n+            AbstractPropertyConfiguration implements ApplicationConfiguration {\n+\n+        private final VaadinContext context;\n+\n+        private final FallbackChunk fallbackChunk;\n+\n+        protected ApplicationConfigurationImpl(VaadinContext context,\n+                FallbackChunk fallbackChunk, Map<String, String> properties) {\n+            super(properties);\n+            this.context = context;\n+            this.fallbackChunk = fallbackChunk;\n+        }\n+\n+        @Override\n+        public boolean isProductionMode() {\n+            return getBooleanProperty(SERVLET_PARAMETER_PRODUCTION_MODE, false);\n+        }\n+\n+        @Override\n+        public Enumeration<String> getPropertyNames() {\n+            return Collections.enumeration(getProperties().keySet());\n+        }\n+\n+        @Override\n+        public VaadinContext getContext() {\n+            return context;\n+        }\n+\n+        @Override\n+        public FallbackChunk getFallbackChunk() {\n+            return fallbackChunk;\n+        }\n+\n+    }\n+\n+    @Override\n+    public ApplicationConfiguration create(VaadinContext context) {\n+        Objects.requireNonNull(context);\n+        Map<String, String> props = new HashMap<>();\n+        for (final Enumeration<String> paramNames = context\n+                .getContextParameterNames(); paramNames.hasMoreElements();) {\n+            final String name = paramNames.nextElement();\n+            props.put(name, context.getContextParameter(name));\n+        }\n+        JsonObject buildInfo = null;\n+        try {\n+            String content = getTokenFileContent(props::get);\n+            if (content == null) {\n+                content = getTokenFileFromClassloader(context);\n+            }\n+            buildInfo = content == null ? null : JsonUtil.parse(content);\n+            if (buildInfo != null) {\n+                props.putAll(getConfigParametersUsingTokenData(buildInfo));\n+            }\n+        } catch (IOException exception) {\n+            throw new UncheckedIOException(exception);\n+        }\n+        return doCreate(context, buildInfo == null ? null\n+                : FrontendUtils.readFallbackChunk(buildInfo), props);\n+    }\n+\n+    /**\n+     * Creates application configuration instance based on provided data.\n+     * \n+     * @param context\n+     *            the Vaadin context, not {@code null}\n+     * @param chunk\n+     *            the fallback chunk, may be {@code null}\n+     * @param properties\n+     *            the context parameters, not {@code null}\n+     * @return a new application configuration instance\n+     */\n+    protected ApplicationConfigurationImpl doCreate(VaadinContext context,\n+            FallbackChunk chunk, Map<String, String> properties) {\n+        Objects.requireNonNull(context);\n+        Objects.requireNonNull(properties);\n+        return new ApplicationConfigurationImpl(context, chunk, properties);\n+    }\n+\n+    /**\n+     * Gets token file from the classpath using the provided {@code context}.\n+     * <p>\n+     * The {@code contextClass} may be a class which is defined in the Web\n+     * Application module/bundle and in this case it may be used to get Web\n+     * Application resources. Also a {@link VaadinContext} {@code context}\n+     * instance may be used to get a context of the Web Application (since the\n+     * {@code contextClass} may be a class not from Web Application module). In\n+     * WAR case it doesn't matter which class is used to get the resources (Web\n+     * Application classes or e.g. \"flow-server\" classes) since they are loaded\n+     * by the same {@link ClassLoader}. But in OSGi \"flow-server\" module classes\n+     * can't be used to get Web Application resources since they are in\n+     * different bundles.\n+     * \n+     * @param context\n+     *            a VaadinContext which may provide information how to get token\n+     *            file for the web application\n+     * @return the token file content\n+     * @throws IOException\n+     *             if I/O fails during access to the token file\n+     */\n+    protected String getTokenFileFromClassloader(VaadinContext context)\n+            throws IOException {\n+        String tokenResource = VAADIN_SERVLET_RESOURCES + TOKEN_FILE;\n+\n+        Lookup lookup = context.getAttribute(Lookup.class);\n+        ResourceProvider resourceProvider = lookup\n+                .lookup(ResourceProvider.class);\n+\n+        List<URL> resources = resourceProvider\n+                .getApplicationResources(tokenResource);\n+\n+        // Accept resource that doesn't contain\n+        // 'jar!/META-INF/Vaadin/config/flow-build-info.json'\n+        URL resource = resources.stream()\n+                .filter(url -> !url.getPath().endsWith(\"jar!/\" + tokenResource))", "originalCommit": "c3d0bc992eb4c6a2f049afede248a5c51330a928", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTI3NjEzNQ==", "url": "https://github.com/vaadin/flow/pull/9726#discussion_r549276135", "bodyText": "Make \"dataGenerators\" private or transient.", "author": "vaadin-bot", "createdAt": "2020-12-28T09:22:28Z", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/CompositeDataGenerator.java", "diffHunk": "@@ -39,7 +39,7 @@\n public class CompositeDataGenerator<T>\n         implements DataGenerator<T>, HasDataGenerators<T> {\n \n-    private final Set<DataGenerator<T>> dataGenerators = new HashSet<>();\n+    final Set<DataGenerator<T>> dataGenerators = new LinkedHashSet<>();", "originalCommit": "c3d0bc992eb4c6a2f049afede248a5c51330a928", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTI3NjE0MA==", "url": "https://github.com/vaadin/flow/pull/9726#discussion_r549276140", "bodyText": "Remove this use of \"APPLICATION_JSON_UTF8_VALUE\"; it is deprecated.", "author": "vaadin-bot", "createdAt": "2020-12-28T09:22:29Z", "path": "fusion-endpoint/src/main/java/com/vaadin/flow/server/connect/VaadinConnectController.java", "diffHunk": "@@ -249,8 +239,7 @@ void validateEndpointBean(EndpointNameChecker endpointNameChecker,\n      *            the current request which triggers the endpoint call\n      * @return execution result as a JSON string or an error message string\n      */\n-    @PostMapping(path = \"/{endpoint}/{method}\", produces =\n-            MediaType.APPLICATION_JSON_UTF8_VALUE)\n+    @PostMapping(path = \"/{endpoint}/{method}\", produces = MediaType.APPLICATION_JSON_UTF8_VALUE)", "originalCommit": "c3d0bc992eb4c6a2f049afede248a5c51330a928", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTI3NjE0NQ==", "url": "https://github.com/vaadin/flow/pull/9726#discussion_r549276145", "bodyText": "Refactor this method to reduce its Cognitive Complexity from 18 to the 15 allowed.", "author": "vaadin-bot", "createdAt": "2020-12-28T09:22:30Z", "path": "flow-server/src/main/java/com/vaadin/flow/server/startup/AbstractConfigurationFactory.java", "diffHunk": "@@ -0,0 +1,238 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.server.startup;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.Serializable;\n+import java.io.UncheckedIOException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.function.Function;\n+\n+import org.apache.commons.io.FileUtils;\n+\n+import com.vaadin.flow.server.InitParameters;\n+import com.vaadin.flow.server.frontend.FrontendUtils;\n+\n+import elemental.json.JsonObject;\n+\n+import static com.vaadin.flow.server.Constants.CONNECT_APPLICATION_PROPERTIES_TOKEN;\n+import static com.vaadin.flow.server.Constants.CONNECT_GENERATED_TS_DIR_TOKEN;\n+import static com.vaadin.flow.server.Constants.CONNECT_JAVA_SOURCE_FOLDER_TOKEN;\n+import static com.vaadin.flow.server.Constants.CONNECT_OPEN_API_FILE_TOKEN;\n+import static com.vaadin.flow.server.Constants.EXTERNAL_STATS_FILE;\n+import static com.vaadin.flow.server.Constants.EXTERNAL_STATS_FILE_TOKEN;\n+import static com.vaadin.flow.server.Constants.EXTERNAL_STATS_URL;\n+import static com.vaadin.flow.server.Constants.EXTERNAL_STATS_URL_TOKEN;\n+import static com.vaadin.flow.server.Constants.FRONTEND_TOKEN;\n+import static com.vaadin.flow.server.Constants.NPM_TOKEN;\n+import static com.vaadin.flow.server.Constants.VAADIN_PREFIX;\n+import static com.vaadin.flow.server.InitParameters.SERVLET_PARAMETER_ENABLE_DEV_SERVER;\n+import static com.vaadin.flow.server.InitParameters.SERVLET_PARAMETER_INITIAL_UIDL;\n+import static com.vaadin.flow.server.InitParameters.SERVLET_PARAMETER_PRODUCTION_MODE;\n+import static com.vaadin.flow.server.InitParameters.SERVLET_PARAMETER_REUSE_DEV_SERVER;\n+import static com.vaadin.flow.server.InitParameters.SERVLET_PARAMETER_USE_V14_BOOTSTRAP;\n+import static com.vaadin.flow.server.frontend.FrontendUtils.PROJECT_BASEDIR;\n+\n+/**\n+ * A configuration factory base logic which reads the token file.\n+ * \n+ * @author Vaadin Ltd\n+ * @since\n+ *\n+ */\n+public class AbstractConfigurationFactory implements Serializable {\n+\n+    public static final String DEV_FOLDER_MISSING_MESSAGE = \"Running project in development mode with no access to folder '%s'.%n\"\n+            + \"Build project in production mode instead, see https://vaadin.com/docs/v15/flow/production/tutorial-production-mode-basic.html\";\n+\n+    /**\n+     * Returns the config parameters from the token file data {@code buildInfo}.\n+     * \n+     * @param buildInfo\n+     *            the token file data\n+     * @return the config parameters\n+     */\n+    protected Map<String, String> getConfigParametersUsingTokenData(", "originalCommit": "c3d0bc992eb4c6a2f049afede248a5c51330a928", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTI3NjE0OQ==", "url": "https://github.com/vaadin/flow/pull/9726#discussion_r549276149", "bodyText": "Remove this use of \"DeprecatedPolymerPublishedEventHandler\"; it is deprecated.", "author": "vaadin-bot", "createdAt": "2020-12-28T09:22:30Z", "path": "flow-server/src/main/java/com/vaadin/flow/server/startup/LookupInitializer.java", "diffHunk": "@@ -58,7 +57,8 @@\n  */\n @HandlesTypes({ ResourceProvider.class, InstantiatorFactory.class,\n         DeprecatedPolymerPublishedEventHandler.class,", "originalCommit": "c3d0bc992eb4c6a2f049afede248a5c51330a928", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTI3NjE1NQ==", "url": "https://github.com/vaadin/flow/pull/9726#discussion_r549276155", "bodyText": "Remove the declaration of thrown exception 'javax.servlet.ServletException', as it cannot be thrown from method's body.", "author": "vaadin-bot", "createdAt": "2020-12-28T09:22:31Z", "path": "flow-server/src/main/java/com/vaadin/flow/server/VaadinServlet.java", "diffHunk": "@@ -180,14 +181,10 @@ public static VaadinServlet getCurrent() {\n      */\n     protected DeploymentConfiguration createDeploymentConfiguration()\n             throws ServletException {", "originalCommit": "c3d0bc992eb4c6a2f049afede248a5c51330a928", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTI3NjE1OA==", "url": "https://github.com/vaadin/flow/pull/9726#discussion_r549276158", "bodyText": "First sentence of Javadoc is incomplete (period is missing) or not present.", "author": "vaadin-bot", "createdAt": "2020-12-28T09:22:32Z", "path": "flow-server/src/main/java/com/vaadin/flow/server/PropertyDeploymentConfiguration.java", "diffHunk": "@@ -215,8 +244,64 @@ public Properties getInitParameters() {\n      */\n     @Override\n     public boolean isDevModeLiveReloadEnabled() {\n-        return !isProductionMode() && getBooleanProperty(\n-                SERVLET_PARAMETER_DEVMODE_ENABLE_LIVE_RELOAD, true)\n+        return !isProductionMode()\n+                && getBooleanProperty(\n+                        SERVLET_PARAMETER_DEVMODE_ENABLE_LIVE_RELOAD, true)\n                 && enableDevServer(); // gizmo excluded from prod bundle\n     }\n+\n+    /**\n+     * Checks whether the given {@code property} is the property explicitly set\n+     * in this deployment configuration (not in it's parent config).\n+     * <p>\n+     * The deployment configuration consists of properties defined in the\n+     * configuration itself and properties which are coming from the application\n+     * configuration. The properties which are defined in the deployment\n+     * configuration itself (own properties) should take precedence: their\n+     * values should override the parent config properties values.\n+     * \n+     * @param property\n+     *            a property name\n+     * @return whether the {@code property} is explicitly set in the\n+     *         configuration\n+     */\n+    protected boolean isOwnProperty(String property) {\n+        return getApplicationProperty(getProperties()::get, property) != null;\n+    }\n+\n+    /**", "originalCommit": "c3d0bc992eb4c6a2f049afede248a5c51330a928", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTI3NjE2Mg==", "url": "https://github.com/vaadin/flow/pull/9726#discussion_r549276162", "bodyText": "A \"NullPointerException\" could be thrown; \"frontendDependencies\" is nullable here.", "author": "vaadin-bot", "createdAt": "2020-12-28T09:22:33Z", "path": "flow-server/src/main/java/com/vaadin/flow/server/frontend/NodeTasks.java", "diffHunk": "@@ -605,7 +605,8 @@ private NodeTasks(Builder builder) {\n                             builder.tokenFileData, builder.enablePnpm));\n \n             commands.add(new TaskUpdateThemeImport(builder.npmFolder,\n-                frontendDependencies.getThemeDefinition()));\n+                frontendDependencies.getThemeDefinition(),", "originalCommit": "c3d0bc992eb4c6a2f049afede248a5c51330a928", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTI3NjE3MA==", "url": "https://github.com/vaadin/flow/pull/9726#discussion_r549276170", "bodyText": "Remove this use of \"Thread.sleep()\".", "author": "vaadin-bot", "createdAt": "2020-12-28T09:22:34Z", "path": "fusion-endpoint/src/test/java/com/vaadin/flow/server/startup/fusion/DevModeInitializerEndpointTest.java", "diffHunk": "@@ -128,105 +132,61 @@ public void teardown() throws Exception, SecurityException {\n     @Test\n     public void should_generateOpenApi_when_EndpointPresents()\n             throws Exception {\n-        String originalJavaSourceFolder = null;\n         File generatedOpenApiJson = Paths\n-                    .get(baseDir, DEFAULT_CONNECT_OPENAPI_JSON_FILE).toFile();\n-        try {\n-            originalJavaSourceFolder = System.getProperty(\"vaadin.\" \n-                + CONNECT_JAVA_SOURCE_FOLDER_TOKEN);\n-            // Configure a folder that has .java classes with valid endpoints\n-            // Not using `src/test/java` because there are invalid endpoint names\n-            // in some tests\n-            File src = new File(\n-                    getClass().getClassLoader().getResource(\"java\").getFile());\n-            System.setProperty(\"vaadin.\" + CONNECT_JAVA_SOURCE_FOLDER_TOKEN,\n-                    src.getAbsolutePath());\n-\n-            Assert.assertFalse(generatedOpenApiJson.exists());\n-            DevModeInitializer devModeInitializer = new DevModeInitializer();\n-            devModeInitializer.onStartup(classes, servletContext);\n-            waitForDevModeServer();\n-            Thread.sleep(200);\n-            Assert.assertTrue(\"Should generate OpenAPI spec if Endpoint is used.\",\n-                    generatedOpenApiJson.exists());\n-        } finally {\n-            if (originalJavaSourceFolder != null) {\n-                System.setProperty(\"vaadin.\" \n-                    + CONNECT_JAVA_SOURCE_FOLDER_TOKEN, originalJavaSourceFolder);\n-            } else {\n-                System.clearProperty(\"vaadin.\" \n-                    + CONNECT_JAVA_SOURCE_FOLDER_TOKEN);\n-            }\n-            generatedOpenApiJson.delete();\n-        }\n+                .get(baseDir, DEFAULT_CONNECT_OPENAPI_JSON_FILE).toFile();\n+        File src = new File(\n+                getClass().getClassLoader().getResource(\"java\").getFile());\n+        Mockito.when(appConfig.getStringProperty(\n+                Mockito.eq(CONNECT_JAVA_SOURCE_FOLDER_TOKEN),\n+                Mockito.anyString())).thenReturn(src.getAbsolutePath());\n+\n+        Assert.assertFalse(generatedOpenApiJson.exists());\n+        DevModeInitializer devModeInitializer = new DevModeInitializer();\n+        devModeInitializer.process(classes, servletContext);\n+        waitForDevModeServer();\n+        Thread.sleep(200);", "originalCommit": "c3d0bc992eb4c6a2f049afede248a5c51330a928", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTMxMTU3NA==", "url": "https://github.com/vaadin/flow/pull/9726#discussion_r549311574", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            import static org.mockito.Mockito.times;;\n          \n          \n            \n            import static org.mockito.Mockito.times;", "author": "mshabarov", "createdAt": "2020-12-28T11:19:18Z", "path": "flow-server/src/test/java/com/vaadin/flow/server/startup/DevModeInitializerTest.java", "diffHunk": "@@ -43,18 +42,16 @@\n import com.vaadin.flow.server.frontend.FallbackChunk;\n import com.vaadin.flow.server.frontend.FrontendUtils;\n \n-import static com.vaadin.flow.server.Constants.CONNECT_JAVA_SOURCE_FOLDER_TOKEN;\n import static com.vaadin.flow.server.Constants.COMPATIBILITY_RESOURCES_FRONTEND_DEFAULT;\n+import static com.vaadin.flow.server.Constants.CONNECT_JAVA_SOURCE_FOLDER_TOKEN;\n import static com.vaadin.flow.server.Constants.RESOURCES_FRONTEND_DEFAULT;\n-import static com.vaadin.flow.server.InitParameters.SERVLET_PARAMETER_PRODUCTION_MODE;\n-import static com.vaadin.flow.server.InitParameters.SERVLET_PARAMETER_REUSE_DEV_SERVER;\n import static com.vaadin.flow.server.frontend.FrontendUtils.DEFAULT_CONNECT_OPENAPI_JSON_FILE;\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertNull;\n import static org.junit.Assert.assertTrue;\n-import static org.mockito.Mockito.times;\n-import static org.mockito.Mockito.never;;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.times;;", "originalCommit": "c3d0bc992eb4c6a2f049afede248a5c51330a928", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "509cebbd5bd6840ba0b4cba94609d4e8f12414ad", "url": "https://github.com/vaadin/flow/commit/509cebbd5bd6840ba0b4cba94609d4e8f12414ad", "message": "chore: remove double semicolon\n\nCo-authored-by: Mikhail Shabarov <61410877+mshabarov@users.noreply.github.com>", "committedDate": "2020-12-28T13:48:44Z", "type": "commit"}, {"oid": "509cebbd5bd6840ba0b4cba94609d4e8f12414ad", "url": "https://github.com/vaadin/flow/commit/509cebbd5bd6840ba0b4cba94609d4e8f12414ad", "message": "chore: remove double semicolon\n\nCo-authored-by: Mikhail Shabarov <61410877+mshabarov@users.noreply.github.com>", "committedDate": "2020-12-28T13:48:44Z", "type": "forcePushed"}]}