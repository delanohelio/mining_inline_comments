{"pr_number": 8682, "pr_title": "Rename and move updateItem #8653", "pr_createdAt": "2020-07-02T15:50:14Z", "pr_url": "https://github.com/vaadin/flow/pull/8682", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTIzMjAxNg==", "url": "https://github.com/vaadin/flow/pull/8682#discussion_r449232016", "bodyText": "Why is this getting the old item and then calling refresh with that ???\nIf I look at the data provider & communicator, the latter will use the item provided by the former in the event and then update using that one - so basically this code here, to my understanding, will loose all the changes when the objects are different but even if they have matching identifiers.\nSo to explain this:\nold bean: Person:{ id=0, name=\"Liam\" }\nnew bean Person:{ id=0, name=\"William\" }\nidentifier is id field.\nWhen given the new bean to refresh, this code finds the old bean using the identifier.\nThen it passes the old bean to data provider which fires the event.\nThe data communicator gets the event and uses the old bean for refreshing things and the update is missed.\nOr am I missing something here ?", "author": "pleku", "createdAt": "2020-07-02T19:44:20Z", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/AbstractDataView.java", "diffHunk": "@@ -101,6 +104,13 @@ protected final void verifyDataProviderType(Class<?> dataProviderType) {\n         return dataProviderSupplier.get().fetch(new Query<>());\n     }\n \n+    @Override\n+    public void refreshItem(T item) {\n+        Objects.requireNonNull(item, NULL_ITEM_ERROR_MESSAGE);\n+        getItems().filter(i -> equals(item, i)).findFirst()\n+                .ifPresent(i -> dataProviderSupplier.get().refreshItem(i));", "originalCommit": "70ef8cae9a5e95b9c81fb896397ec1ee57660276", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTU1NTA0OA==", "url": "https://github.com/vaadin/flow/pull/8682#discussion_r449555048", "bodyText": "Well, seems like I overlooked the use cases on data communicator side. At least in getJsonItems and well-known getItem uses the new object passed to refreshItem method. So, yes, should be fixed.", "author": "mshabarov", "createdAt": "2020-07-03T12:21:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTIzMjAxNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTIzMzI0NA==", "url": "https://github.com/vaadin/flow/pull/8682#discussion_r449233244", "bodyText": "I would like to have a unit test using the AbstractLazyDataView where it is tested by minimum that calling the refreshItem will trigger something in the DataCommunicator - mocking or spying can be used to verify this.", "author": "pleku", "createdAt": "2020-07-02T19:47:05Z", "path": "flow-data/src/main/java/com/vaadin/flow/data/provider/DataView.java", "diffHunk": "@@ -42,6 +42,26 @@\n      */\n     Stream<T> getItems();\n \n+    /**\n+     * Notifies the component that the item has been updated and thus should be\n+     * refreshed.\n+     * <p>\n+     * For this to work properly, the item must either implement\n+     * {@link Object#equals(Object)} and {@link Object#hashCode()} to consider\n+     * both the old and the new item instances to be equal, or alternatively\n+     * use the {@link #setIdentifierProvider(IdentifierProvider)} to set\n+     * an appropriate item's identifier.\n+     * <p>\n+     * This method delegates the update to\n+     * {@link DataProvider#refreshItem(Object)}.\n+     *\n+     * @param item\n+     *            item containing updated state\n+     *\n+     * @see #setIdentifierProvider(IdentifierProvider)\n+     */\n+    void refreshItem(T item);", "originalCommit": "70ef8cae9a5e95b9c81fb896397ec1ee57660276", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTYwNDEyMg==", "url": "https://github.com/vaadin/flow/pull/8682#discussion_r449604122", "bodyText": "Done", "author": "mshabarov", "createdAt": "2020-07-03T14:13:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTIzMzI0NA=="}], "type": "inlineReview"}, {"oid": "da8b4f1ac7b3251a80df3f6353ed84a197b0de65", "url": "https://github.com/vaadin/flow/commit/da8b4f1ac7b3251a80df3f6353ed84a197b0de65", "message": "Refresh new item, not the old one, tests for lazy case", "committedDate": "2020-07-03T14:24:57Z", "type": "forcePushed"}, {"oid": "e925e097b1a0c337194ce6c037ea30fc6c8f1a13", "url": "https://github.com/vaadin/flow/commit/e925e097b1a0c337194ce6c037ea30fc6c8f1a13", "message": "Refresh new item, not the old one, tests for lazy case", "committedDate": "2020-07-04T11:03:08Z", "type": "forcePushed"}, {"oid": "c48f1ce418c035b51783d70a7f04f460206711c7", "url": "https://github.com/vaadin/flow/commit/c48f1ce418c035b51783d70a7f04f460206711c7", "message": "Rename and move updateItem #8653", "committedDate": "2020-07-06T07:12:33Z", "type": "commit"}, {"oid": "bb6019c33ff56f7c042a4b14610b5e628014a21b", "url": "https://github.com/vaadin/flow/commit/bb6019c33ff56f7c042a4b14610b5e628014a21b", "message": "Refresh new item, not the old one, tests for lazy case", "committedDate": "2020-07-06T07:13:57Z", "type": "commit"}, {"oid": "8b255ff81b3ff909ac5a1aaadaa9803f853d8116", "url": "https://github.com/vaadin/flow/commit/8b255ff81b3ff909ac5a1aaadaa9803f853d8116", "message": "Fix merge conflicts", "committedDate": "2020-07-06T07:25:18Z", "type": "commit"}, {"oid": "8b255ff81b3ff909ac5a1aaadaa9803f853d8116", "url": "https://github.com/vaadin/flow/commit/8b255ff81b3ff909ac5a1aaadaa9803f853d8116", "message": "Fix merge conflicts", "committedDate": "2020-07-06T07:25:18Z", "type": "forcePushed"}]}