{"pr_number": 9635, "pr_title": "refactor: extract common config functionality and introduce add config", "pr_createdAt": "2020-12-11T12:25:19Z", "pr_url": "https://github.com/vaadin/flow/pull/9635", "timeline": [{"oid": "13c9fe106e73a66ae4599c4c4dcd31614835e12c", "url": "https://github.com/vaadin/flow/commit/13c9fe106e73a66ae4599c4c4dcd31614835e12c", "message": "refactor: extract common config functionality and introduce add config\n\npart of #9417", "committedDate": "2020-12-11T12:14:06Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDk3OTA5MA==", "url": "https://github.com/vaadin/flow/pull/9635#discussion_r540979090", "bodyText": "Is it intentional that some of the methods have now 1-1 implementation in this interface and the introduced AbstractConfiguration, and thus the implementation here is unnecessary ? I see still at least devserver and pnpm methods are the same", "author": "pleku", "createdAt": "2020-12-11T14:18:49Z", "path": "flow-server/src/main/java/com/vaadin/flow/function/DeploymentConfiguration.java", "diffHunk": "@@ -39,23 +39,8 @@\n  * @author Vaadin Ltd\n  * @since 1.0\n  */\n-public interface DeploymentConfiguration extends Serializable {\n-\n-    /**\n-     * Returns whether Vaadin is in production mode.\n-     *\n-     * @return true if in production mode, false otherwise.\n-     */\n-    boolean isProductionMode();\n-\n-    /**\n-     * Returns whether Vaadin is running in useDeprecatedV14Bootstrapping.\n-     *\n-     * @return true if in useDeprecatedV14Bootstrapping, false otherwise.\n-     */\n-    default boolean useV14Bootstrap() {\n-        return getBooleanProperty(SERVLET_PARAMETER_USE_V14_BOOTSTRAP, false);\n-    }\n+public interface DeploymentConfiguration\n+        extends AbstractConfiguration, Serializable {", "originalCommit": "13c9fe106e73a66ae4599c4c4dcd31614835e12c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjE0MjMxOA==", "url": "https://github.com/vaadin/flow/pull/9635#discussion_r542142318", "bodyText": "No, not intentional.\nI thought I've removed them from the DeploymentConfiguration.\nMost likely cherry-pick issue.", "author": "denis-anisimov", "createdAt": "2020-12-14T06:32:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDk3OTA5MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDk3OTk0MQ==", "url": "https://github.com/vaadin/flow/pull/9635#discussion_r540979941", "bodyText": "Javadocs missing", "author": "pleku", "createdAt": "2020-12-11T14:20:04Z", "path": "flow-server/src/main/java/com/vaadin/flow/server/AbstractPropertyConfiguration.java", "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.server;\n+\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.function.Function;\n+\n+import static com.vaadin.flow.server.Constants.VAADIN_PREFIX;\n+\n+/**\n+ * @author Vaadin Ltd\n+ * @since\n+ *", "originalCommit": "13c9fe106e73a66ae4599c4c4dcd31614835e12c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjE0MjYwOA==", "url": "https://github.com/vaadin/flow/pull/9635#discussion_r542142608", "bodyText": "Done", "author": "denis-anisimov", "createdAt": "2020-12-14T06:33:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDk3OTk0MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDk4MTIwMQ==", "url": "https://github.com/vaadin/flow/pull/9635#discussion_r540981201", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \n          \n          \n            \n            /**\n          \n          \n            \n             * Constructs property based configuration based on the given properties map.\n          \n          \n            \n             * @param properties a map of the properties\n          \n          \n            \n             */\n          \n      \n    \n    \n  \n\nMissing javadocs", "author": "pleku", "createdAt": "2020-12-11T14:21:58Z", "path": "flow-server/src/main/java/com/vaadin/flow/server/AbstractPropertyConfiguration.java", "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.server;\n+\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.function.Function;\n+\n+import static com.vaadin.flow.server.Constants.VAADIN_PREFIX;\n+\n+/**\n+ * @author Vaadin Ltd\n+ * @since\n+ *\n+ */\n+public abstract class AbstractPropertyConfiguration\n+        implements AbstractConfiguration {\n+\n+    private final Map<String, String> properties;\n+", "originalCommit": "13c9fe106e73a66ae4599c4c4dcd31614835e12c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjE0MjgxMQ==", "url": "https://github.com/vaadin/flow/pull/9635#discussion_r542142811", "bodyText": "Done.", "author": "denis-anisimov", "createdAt": "2020-12-14T06:34:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDk4MTIwMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDk4MjM3Mw==", "url": "https://github.com/vaadin/flow/pull/9635#discussion_r540982373", "bodyText": "This parameter is not added to the javadocs", "author": "pleku", "createdAt": "2020-12-11T14:23:38Z", "path": "flow-server/src/main/java/com/vaadin/flow/server/PropertyDeploymentConfiguration.java", "diffHunk": "@@ -53,37 +56,22 @@\n      *            the init parameters that should make up the foundation for\n      *            this configuration\n      */\n-    public PropertyDeploymentConfiguration(Class<?> systemPropertyBaseClass,\n-            Properties initParameters) {\n-        this.initParameters = initParameters;\n+    public PropertyDeploymentConfiguration(\n+            ApplicationConfiguration parentConfig,", "originalCommit": "13c9fe106e73a66ae4599c4c4dcd31614835e12c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjE0MzEzMA==", "url": "https://github.com/vaadin/flow/pull/9635#discussion_r542143130", "bodyText": "Removed.", "author": "denis-anisimov", "createdAt": "2020-12-14T06:34:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDk4MjM3Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDk4NDExNQ==", "url": "https://github.com/vaadin/flow/pull/9635#discussion_r540984115", "bodyText": "Is initParameters a bad name for the variable ? Should it be also renamed for the constructor parameter to make it clear that it is not \"init parameters\" but \"initial parameters\" ?", "author": "pleku", "createdAt": "2020-12-11T14:26:09Z", "path": "flow-server/src/main/java/com/vaadin/flow/server/PropertyDeploymentConfiguration.java", "diffHunk": "@@ -53,37 +56,22 @@\n      *            the init parameters that should make up the foundation for\n      *            this configuration\n      */\n-    public PropertyDeploymentConfiguration(Class<?> systemPropertyBaseClass,\n-            Properties initParameters) {\n-        this.initParameters = initParameters;\n+    public PropertyDeploymentConfiguration(\n+            ApplicationConfiguration parentConfig,\n+            Class<?> systemPropertyBaseClass, Properties initParameters) {\n+        super(filterStringProperties(initParameters));\n+        initialParameters = initParameters;", "originalCommit": "13c9fe106e73a66ae4599c4c4dcd31614835e12c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjE0NTQyOA==", "url": "https://github.com/vaadin/flow/pull/9635#discussion_r542145428", "bodyText": "I think initParameters is not a bad name.\ninit parameters is something which comes from servlet (or servlet context) init parameters.\nAt least ServletContext has method getInitParameter so it's consistent.\ninitialParameters is an internal field with intentional name to distinguish the coming properties which has type Hashtable<Object,Object> from the string properties which are passed to the super CTOR.\nSo contract-wise initProperties are still init properties.", "author": "denis-anisimov", "createdAt": "2020-12-14T06:41:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDk4NDExNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDk4NjEwNQ==", "url": "https://github.com/vaadin/flow/pull/9635#discussion_r540986105", "bodyText": "Javadocs missing", "author": "pleku", "createdAt": "2020-12-11T14:28:26Z", "path": "flow-server/src/main/java/com/vaadin/flow/server/startup/AbstractConfigurationFactory.java", "diffHunk": "@@ -0,0 +1,185 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.server.startup;\n+\n+import java.io.File;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import com.vaadin.flow.server.InitParameters;\n+import com.vaadin.flow.server.frontend.FrontendUtils;\n+\n+import elemental.json.JsonObject;\n+\n+import static com.vaadin.flow.server.Constants.CONNECT_APPLICATION_PROPERTIES_TOKEN;\n+import static com.vaadin.flow.server.Constants.CONNECT_GENERATED_TS_DIR_TOKEN;\n+import static com.vaadin.flow.server.Constants.CONNECT_JAVA_SOURCE_FOLDER_TOKEN;\n+import static com.vaadin.flow.server.Constants.CONNECT_OPEN_API_FILE_TOKEN;\n+import static com.vaadin.flow.server.Constants.EXTERNAL_STATS_FILE;\n+import static com.vaadin.flow.server.Constants.EXTERNAL_STATS_FILE_TOKEN;\n+import static com.vaadin.flow.server.Constants.EXTERNAL_STATS_URL;\n+import static com.vaadin.flow.server.Constants.EXTERNAL_STATS_URL_TOKEN;\n+import static com.vaadin.flow.server.Constants.FRONTEND_TOKEN;\n+import static com.vaadin.flow.server.Constants.NPM_TOKEN;\n+import static com.vaadin.flow.server.Constants.VAADIN_PREFIX;\n+import static com.vaadin.flow.server.InitParameters.SERVLET_PARAMETER_ENABLE_DEV_SERVER;\n+import static com.vaadin.flow.server.InitParameters.SERVLET_PARAMETER_INITIAL_UIDL;\n+import static com.vaadin.flow.server.InitParameters.SERVLET_PARAMETER_PRODUCTION_MODE;\n+import static com.vaadin.flow.server.InitParameters.SERVLET_PARAMETER_REUSE_DEV_SERVER;\n+import static com.vaadin.flow.server.InitParameters.SERVLET_PARAMETER_USE_V14_BOOTSTRAP;\n+import static com.vaadin.flow.server.frontend.FrontendUtils.PROJECT_BASEDIR;\n+\n+/**\n+ * @author Vaadin Ltd\n+ * @since\n+ *", "originalCommit": "13c9fe106e73a66ae4599c4c4dcd31614835e12c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjE0NTg3OQ==", "url": "https://github.com/vaadin/flow/pull/9635#discussion_r542145879", "bodyText": "Done.", "author": "denis-anisimov", "createdAt": "2020-12-14T06:42:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDk4NjEwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTAwMjkzNQ==", "url": "https://github.com/vaadin/flow/pull/9635#discussion_r541002935", "bodyText": "Maybe not related to this PR, but I have a hard time understanding \"For no non jar build info\", my guess would be it tries to imply that \"When no token file is found from a jar and running in production mode, then check...\" but not sure", "author": "pleku", "createdAt": "2020-12-11T14:53:08Z", "path": "flow-server/src/main/java/com/vaadin/flow/server/startup/DefaultApplicationConfigurationFactory.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.server.startup;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.net.URL;\n+import java.util.Collections;\n+import java.util.Enumeration;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.vaadin.flow.di.Lookup;\n+import com.vaadin.flow.di.ResourceProvider;\n+import com.vaadin.flow.server.AbstractPropertyConfiguration;\n+import com.vaadin.flow.server.VaadinContext;\n+import com.vaadin.flow.server.frontend.FrontendUtils;\n+\n+import elemental.json.JsonObject;\n+import elemental.json.impl.JsonUtil;\n+\n+import static com.vaadin.flow.server.Constants.VAADIN_SERVLET_RESOURCES;\n+import static com.vaadin.flow.server.InitParameters.SERVLET_PARAMETER_PRODUCTION_MODE;\n+import static com.vaadin.flow.server.frontend.FrontendUtils.TOKEN_FILE;\n+\n+/**\n+ * Default implementation of {@link ApplicationConfigurationFactory}.\n+ * \n+ * @author Vaadin Ltd\n+ * @since\n+ *\n+ */\n+public class DefaultApplicationConfigurationFactory\n+        extends AbstractConfigurationFactory\n+        implements ApplicationConfigurationFactory {\n+\n+    protected static class ApplicationConfigurationImpl extends\n+            AbstractPropertyConfiguration implements ApplicationConfiguration {\n+\n+        private final VaadinContext context;\n+\n+        protected ApplicationConfigurationImpl(VaadinContext context,\n+                Map<String, String> properties) {\n+            super(properties);\n+            this.context = context;\n+        }\n+\n+        @Override\n+        public boolean isProductionMode() {\n+            return getBooleanProperty(SERVLET_PARAMETER_PRODUCTION_MODE, false);\n+        }\n+\n+        @Override\n+        public Enumeration<String> getPropertyNames() {\n+            return Collections.enumeration(getProperties().keySet());\n+        }\n+\n+        @Override\n+        public VaadinContext getContext() {\n+            return context;\n+        }\n+\n+    }\n+\n+    @Override\n+    public ApplicationConfiguration create(VaadinContext context) {\n+        Map<String, String> props = new HashMap<>();\n+        for (final Enumeration<String> e = context.getContextParameterNames(); e\n+                .hasMoreElements();) {\n+            final String name = e.nextElement();\n+            props.put(name, context.getContextParameter(name));\n+        }\n+        try {\n+            JsonObject buildInfo = JsonUtil\n+                    .parse(getTokenFileFromClassloader(context));\n+\n+            props.putAll(getInitParametersUsingTokenData(buildInfo));\n+        } catch (IOException exception) {\n+            throw new UncheckedIOException(exception);\n+        }\n+        return new ApplicationConfigurationImpl(context, props);\n+    }\n+\n+    /**\n+     * Gets token file from the classpath using the provided {@code context}.\n+     * <p>\n+     * The {@code contextClass} may be a class which is defined in the Web\n+     * Application module/bundle and in this case it may be used to get Web\n+     * Application resources. Also a {@link VaadinContext} {@code context}\n+     * instance may be used to get a context of the Web Application (since the\n+     * {@code contextClass} may be a class not from Web Application module). In\n+     * WAR case it doesn't matter which class is used to get the resources (Web\n+     * Application classes or e.g. \"flow-server\" classes) since they are loaded\n+     * by the same {@link ClassLoader}. But in OSGi \"flow-server\" module classes\n+     * can't be used to get Web Application resources since they are in\n+     * different bundles.\n+     * \n+     * @param context\n+     *            a VaadinContext which may provide information how to get token\n+     *            file for the web application\n+     * @return the token file content\n+     * @throws IOException\n+     *             if I/O fails during access to the token file\n+     */\n+    protected String getTokenFileFromClassloader(VaadinContext context)\n+            throws IOException {\n+        String tokenResource = VAADIN_SERVLET_RESOURCES + TOKEN_FILE;\n+\n+        Lookup lookup = context.getAttribute(Lookup.class);\n+        ResourceProvider resourceProvider = lookup\n+                .lookup(ResourceProvider.class);\n+\n+        List<URL> resources = resourceProvider\n+                .getApplicationResources(tokenResource);\n+\n+        // Accept resource that doesn't contain\n+        // 'jar!/META-INF/Vaadin/config/flow-build-info.json'\n+        URL resource = resources.stream()\n+                .filter(url -> !url.getPath().endsWith(\"jar!/\" + tokenResource))\n+                .findFirst().orElse(null);\n+        if (resource == null && !resources.isEmpty()) {\n+            // For no non jar build info, in production mode check for", "originalCommit": "13c9fe106e73a66ae4599c4c4dcd31614835e12c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjE0Njg0NQ==", "url": "https://github.com/vaadin/flow/pull/9635#discussion_r542146845", "bodyText": "Unfortunately I don't know the exact details of this code.\nThis is direct copy/paste of existing code in the DeploymentConfigurationFactory without any change.", "author": "denis-anisimov", "createdAt": "2020-12-14T06:44:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTAwMjkzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzMwNTQyMg==", "url": "https://github.com/vaadin/flow/pull/9635#discussion_r543305422", "bodyText": "It could say when token not found outside jar... also the whole comment should be removed as the javadoc for getPossibleJarResource is more accurate as we don't even check for production mode.", "author": "caalador", "createdAt": "2020-12-15T12:36:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTAwMjkzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzUyMTczNA==", "url": "https://github.com/vaadin/flow/pull/9635#discussion_r543521734", "bodyText": "Removed", "author": "denis-anisimov", "createdAt": "2020-12-15T17:01:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTAwMjkzNQ=="}], "type": "inlineReview"}, {"oid": "bbc8be782de9a7dc63b30a7ab93eddbd4b2a13be", "url": "https://github.com/vaadin/flow/commit/bbc8be782de9a7dc63b30a7ab93eddbd4b2a13be", "message": "fix: add javadocs, fix code", "committedDate": "2020-12-14T06:28:59Z", "type": "commit"}, {"oid": "180b39ce79eaa398b7ed358701b22de2fe53d40b", "url": "https://github.com/vaadin/flow/commit/180b39ce79eaa398b7ed358701b22de2fe53d40b", "message": "fix: correct javadocs and code", "committedDate": "2020-12-14T06:46:26Z", "type": "commit"}, {"oid": "044f61cc84aa88d301dfaaeb9cee7df5a43d1ef7", "url": "https://github.com/vaadin/flow/commit/044f61cc84aa88d301dfaaeb9cee7df5a43d1ef7", "message": "fix: fix serializability", "committedDate": "2020-12-14T07:07:23Z", "type": "commit"}, {"oid": "a537df040ae82f11b3a0c0f6a3fd0ab4ec6d8804", "url": "https://github.com/vaadin/flow/commit/a537df040ae82f11b3a0c0f6a3fd0ab4ec6d8804", "message": "fix: correct proxy deployment configuration code", "committedDate": "2020-12-14T07:58:41Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjIwODczNQ==", "url": "https://github.com/vaadin/flow/pull/9635#discussion_r542208735", "bodyText": "Define a constant instead of duplicating this literal \"jar!/\" 3 times.", "author": "vaadin-bot", "createdAt": "2020-12-14T08:51:05Z", "path": "flow-server/src/main/java/com/vaadin/flow/server/startup/DefaultApplicationConfigurationFactory.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.server.startup;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.net.URL;\n+import java.util.Collections;\n+import java.util.Enumeration;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.vaadin.flow.di.Lookup;\n+import com.vaadin.flow.di.ResourceProvider;\n+import com.vaadin.flow.server.AbstractPropertyConfiguration;\n+import com.vaadin.flow.server.VaadinContext;\n+import com.vaadin.flow.server.frontend.FrontendUtils;\n+\n+import elemental.json.JsonObject;\n+import elemental.json.impl.JsonUtil;\n+\n+import static com.vaadin.flow.server.Constants.VAADIN_SERVLET_RESOURCES;\n+import static com.vaadin.flow.server.InitParameters.SERVLET_PARAMETER_PRODUCTION_MODE;\n+import static com.vaadin.flow.server.frontend.FrontendUtils.TOKEN_FILE;\n+\n+/**\n+ * Default implementation of {@link ApplicationConfigurationFactory}.\n+ * \n+ * @author Vaadin Ltd\n+ * @since\n+ *\n+ */\n+public class DefaultApplicationConfigurationFactory\n+        extends AbstractConfigurationFactory\n+        implements ApplicationConfigurationFactory {\n+\n+    protected static class ApplicationConfigurationImpl extends\n+            AbstractPropertyConfiguration implements ApplicationConfiguration {\n+\n+        private final VaadinContext context;\n+\n+        protected ApplicationConfigurationImpl(VaadinContext context,\n+                Map<String, String> properties) {\n+            super(properties);\n+            this.context = context;\n+        }\n+\n+        @Override\n+        public boolean isProductionMode() {\n+            return getBooleanProperty(SERVLET_PARAMETER_PRODUCTION_MODE, false);\n+        }\n+\n+        @Override\n+        public Enumeration<String> getPropertyNames() {\n+            return Collections.enumeration(getProperties().keySet());\n+        }\n+\n+        @Override\n+        public VaadinContext getContext() {\n+            return context;\n+        }\n+\n+    }\n+\n+    @Override\n+    public ApplicationConfiguration create(VaadinContext context) {\n+        Map<String, String> props = new HashMap<>();\n+        for (final Enumeration<String> e = context.getContextParameterNames(); e\n+                .hasMoreElements();) {\n+            final String name = e.nextElement();\n+            props.put(name, context.getContextParameter(name));\n+        }\n+        try {\n+            JsonObject buildInfo = JsonUtil\n+                    .parse(getTokenFileFromClassloader(context));\n+\n+            props.putAll(getConfigParametersUsingTokenData(buildInfo));\n+        } catch (IOException exception) {\n+            throw new UncheckedIOException(exception);\n+        }\n+        return new ApplicationConfigurationImpl(context, props);\n+    }\n+\n+    /**\n+     * Gets token file from the classpath using the provided {@code context}.\n+     * <p>\n+     * The {@code contextClass} may be a class which is defined in the Web\n+     * Application module/bundle and in this case it may be used to get Web\n+     * Application resources. Also a {@link VaadinContext} {@code context}\n+     * instance may be used to get a context of the Web Application (since the\n+     * {@code contextClass} may be a class not from Web Application module). In\n+     * WAR case it doesn't matter which class is used to get the resources (Web\n+     * Application classes or e.g. \"flow-server\" classes) since they are loaded\n+     * by the same {@link ClassLoader}. But in OSGi \"flow-server\" module classes\n+     * can't be used to get Web Application resources since they are in\n+     * different bundles.\n+     * \n+     * @param context\n+     *            a VaadinContext which may provide information how to get token\n+     *            file for the web application\n+     * @return the token file content\n+     * @throws IOException\n+     *             if I/O fails during access to the token file\n+     */\n+    protected String getTokenFileFromClassloader(VaadinContext context)\n+            throws IOException {\n+        String tokenResource = VAADIN_SERVLET_RESOURCES + TOKEN_FILE;\n+\n+        Lookup lookup = context.getAttribute(Lookup.class);\n+        ResourceProvider resourceProvider = lookup\n+                .lookup(ResourceProvider.class);\n+\n+        List<URL> resources = resourceProvider\n+                .getApplicationResources(tokenResource);\n+\n+        // Accept resource that doesn't contain\n+        // 'jar!/META-INF/Vaadin/config/flow-build-info.json'\n+        URL resource = resources.stream()\n+                .filter(url -> !url.getPath().endsWith(\"jar!/\" + tokenResource))", "originalCommit": "a537df040ae82f11b3a0c0f6a3fd0ab4ec6d8804", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjIwODc1MA==", "url": "https://github.com/vaadin/flow/pull/9635#discussion_r542208750", "bodyText": "Refactor this method to reduce its Cognitive Complexity from 18 to the 15 allowed.", "author": "vaadin-bot", "createdAt": "2020-12-14T08:51:06Z", "path": "flow-server/src/main/java/com/vaadin/flow/server/startup/AbstractConfigurationFactory.java", "diffHunk": "@@ -0,0 +1,205 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.server.startup;\n+\n+import java.io.File;\n+import java.io.Serializable;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import com.vaadin.flow.server.InitParameters;\n+import com.vaadin.flow.server.frontend.FrontendUtils;\n+\n+import elemental.json.JsonObject;\n+\n+import static com.vaadin.flow.server.Constants.CONNECT_APPLICATION_PROPERTIES_TOKEN;\n+import static com.vaadin.flow.server.Constants.CONNECT_GENERATED_TS_DIR_TOKEN;\n+import static com.vaadin.flow.server.Constants.CONNECT_JAVA_SOURCE_FOLDER_TOKEN;\n+import static com.vaadin.flow.server.Constants.CONNECT_OPEN_API_FILE_TOKEN;\n+import static com.vaadin.flow.server.Constants.EXTERNAL_STATS_FILE;\n+import static com.vaadin.flow.server.Constants.EXTERNAL_STATS_FILE_TOKEN;\n+import static com.vaadin.flow.server.Constants.EXTERNAL_STATS_URL;\n+import static com.vaadin.flow.server.Constants.EXTERNAL_STATS_URL_TOKEN;\n+import static com.vaadin.flow.server.Constants.FRONTEND_TOKEN;\n+import static com.vaadin.flow.server.Constants.NPM_TOKEN;\n+import static com.vaadin.flow.server.Constants.VAADIN_PREFIX;\n+import static com.vaadin.flow.server.InitParameters.SERVLET_PARAMETER_ENABLE_DEV_SERVER;\n+import static com.vaadin.flow.server.InitParameters.SERVLET_PARAMETER_INITIAL_UIDL;\n+import static com.vaadin.flow.server.InitParameters.SERVLET_PARAMETER_PRODUCTION_MODE;\n+import static com.vaadin.flow.server.InitParameters.SERVLET_PARAMETER_REUSE_DEV_SERVER;\n+import static com.vaadin.flow.server.InitParameters.SERVLET_PARAMETER_USE_V14_BOOTSTRAP;\n+import static com.vaadin.flow.server.frontend.FrontendUtils.PROJECT_BASEDIR;\n+\n+/**\n+ * A configuration factory base logic which reads the token file.\n+ * \n+ * @author Vaadin Ltd\n+ * @since\n+ *\n+ */\n+public class AbstractConfigurationFactory implements Serializable {\n+\n+    public static final String DEV_FOLDER_MISSING_MESSAGE = \"Running project in development mode with no access to folder '%s'.%n\"\n+            + \"Build project in production mode instead, see https://vaadin.com/docs/v15/flow/production/tutorial-production-mode-basic.html\";\n+\n+    /**\n+     * Returns the config parameters from the token file data {@code buildInfo}.\n+     * \n+     * @param buildInfo\n+     *            the token file data\n+     * @return the config parameters\n+     */\n+    public Map<String, String> getConfigParametersUsingTokenData(", "originalCommit": "a537df040ae82f11b3a0c0f6a3fd0ab4ec6d8804", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjIwODc3Mg==", "url": "https://github.com/vaadin/flow/pull/9635#discussion_r542208772", "bodyText": "Remove this unused method parameter \"systemPropertyBaseClass\".", "author": "vaadin-bot", "createdAt": "2020-12-14T08:51:07Z", "path": "flow-server/src/main/java/com/vaadin/flow/server/DeploymentConfigurationFactory.java", "diffHunk": "@@ -187,125 +177,6 @@ private static void readBuildInfo(Class<?> systemPropertyBaseClass,\n         }\n     }\n \n-    private static void setInitParametersUsingTokenData(\n-            Properties initParameters, JsonObject buildInfo) {\n-        if (buildInfo.hasKey(SERVLET_PARAMETER_PRODUCTION_MODE)) {\n-            initParameters.setProperty(SERVLET_PARAMETER_PRODUCTION_MODE,\n-                    String.valueOf(buildInfo\n-                            .getBoolean(SERVLET_PARAMETER_PRODUCTION_MODE)));\n-        }\n-        if (buildInfo.hasKey(EXTERNAL_STATS_FILE_TOKEN)\n-                || buildInfo.hasKey(EXTERNAL_STATS_URL_TOKEN)) {\n-            // If external stats file is flagged then\n-            // dev server should be false - only variable that can\n-            // be configured, in addition to stats variables, is\n-            // production mode\n-            initParameters.setProperty(SERVLET_PARAMETER_ENABLE_DEV_SERVER,\n-                    Boolean.toString(false));\n-            initParameters.setProperty(EXTERNAL_STATS_FILE,\n-                    Boolean.toString(true));\n-            if (buildInfo.hasKey(EXTERNAL_STATS_URL_TOKEN)) {\n-                initParameters.setProperty(EXTERNAL_STATS_URL,\n-                        buildInfo.getString(EXTERNAL_STATS_URL_TOKEN));\n-            }\n-            // NO OTHER CONFIGURATION:\n-            return;\n-        }\n-        if (buildInfo.hasKey(SERVLET_PARAMETER_USE_V14_BOOTSTRAP)) {\n-            initParameters.setProperty(SERVLET_PARAMETER_USE_V14_BOOTSTRAP,\n-                    String.valueOf(buildInfo\n-                            .getBoolean(SERVLET_PARAMETER_USE_V14_BOOTSTRAP)));\n-            // Need to be sure that we remove the system property,\n-            // because it has priority in the configuration getter\n-            System.clearProperty(\n-                    VAADIN_PREFIX + SERVLET_PARAMETER_USE_V14_BOOTSTRAP);\n-        }\n-        if (buildInfo.hasKey(SERVLET_PARAMETER_INITIAL_UIDL)) {\n-            initParameters.setProperty(SERVLET_PARAMETER_INITIAL_UIDL,\n-                    String.valueOf(buildInfo\n-                            .getBoolean(SERVLET_PARAMETER_INITIAL_UIDL)));\n-            // Need to be sure that we remove the system property,\n-            // because it has priority in the configuration getter\n-            System.clearProperty(\n-                    VAADIN_PREFIX + SERVLET_PARAMETER_INITIAL_UIDL);\n-        }\n-\n-        if (buildInfo.hasKey(NPM_TOKEN)) {\n-            initParameters.setProperty(PROJECT_BASEDIR,\n-                    buildInfo.getString(NPM_TOKEN));\n-            verifyFolderExists(initParameters, buildInfo.getString(NPM_TOKEN));\n-        }\n-\n-        if (buildInfo.hasKey(FRONTEND_TOKEN)) {\n-            initParameters.setProperty(FrontendUtils.PARAM_FRONTEND_DIR,\n-                    buildInfo.getString(FRONTEND_TOKEN));\n-            // Only verify frontend folder if it's not a subfolder of the\n-            // npm folder.\n-            if (!buildInfo.hasKey(NPM_TOKEN)\n-                    || !buildInfo.getString(FRONTEND_TOKEN)\n-                            .startsWith(buildInfo.getString(NPM_TOKEN))) {\n-                verifyFolderExists(initParameters,\n-                        buildInfo.getString(FRONTEND_TOKEN));\n-            }\n-        }\n-\n-        // These should be internal only so if there is a System\n-        // property override then the user probably knows what\n-        // they are doing.\n-        if (buildInfo.hasKey(SERVLET_PARAMETER_ENABLE_DEV_SERVER)) {\n-            initParameters.setProperty(SERVLET_PARAMETER_ENABLE_DEV_SERVER,\n-                    String.valueOf(buildInfo\n-                            .getBoolean(SERVLET_PARAMETER_ENABLE_DEV_SERVER)));\n-        }\n-        if (buildInfo.hasKey(SERVLET_PARAMETER_REUSE_DEV_SERVER)) {\n-            initParameters.setProperty(SERVLET_PARAMETER_REUSE_DEV_SERVER,\n-                    String.valueOf(buildInfo\n-                            .getBoolean(SERVLET_PARAMETER_REUSE_DEV_SERVER)));\n-        }\n-        if (buildInfo.hasKey(CONNECT_JAVA_SOURCE_FOLDER_TOKEN)) {\n-            initParameters.setProperty(CONNECT_JAVA_SOURCE_FOLDER_TOKEN,\n-                    buildInfo.getString(CONNECT_JAVA_SOURCE_FOLDER_TOKEN));\n-        }\n-        if (buildInfo.hasKey(CONNECT_OPEN_API_FILE_TOKEN)) {\n-            initParameters.setProperty(CONNECT_OPEN_API_FILE_TOKEN,\n-                    buildInfo.getString(CONNECT_OPEN_API_FILE_TOKEN));\n-        }\n-        if (buildInfo.hasKey(CONNECT_APPLICATION_PROPERTIES_TOKEN)) {\n-            initParameters.setProperty(CONNECT_APPLICATION_PROPERTIES_TOKEN,\n-                    buildInfo.getString(CONNECT_APPLICATION_PROPERTIES_TOKEN));\n-        }\n-        if (buildInfo.hasKey(CONNECT_GENERATED_TS_DIR_TOKEN)) {\n-            initParameters.setProperty(CONNECT_GENERATED_TS_DIR_TOKEN,\n-                    buildInfo.getString(CONNECT_GENERATED_TS_DIR_TOKEN));\n-        }\n-\n-        setDevModePropertiesUsingTokenData(initParameters, buildInfo);\n-    }\n-\n-    private static void setDevModePropertiesUsingTokenData(\n-            Properties initParameters, JsonObject buildInfo) {\n-        // read dev mode properties from the token and set init parameter only\n-        // if it's not yet set\n-        if (initParameters.getProperty(\n-                InitParameters.SERVLET_PARAMETER_ENABLE_PNPM) == null\n-                && buildInfo\n-                        .hasKey(InitParameters.SERVLET_PARAMETER_ENABLE_PNPM)) {\n-            initParameters.setProperty(\n-                    InitParameters.SERVLET_PARAMETER_ENABLE_PNPM,\n-                    String.valueOf(buildInfo.getBoolean(\n-                            InitParameters.SERVLET_PARAMETER_ENABLE_PNPM)));\n-        }\n-        if (initParameters.getProperty(\n-                InitParameters.REQUIRE_HOME_NODE_EXECUTABLE) == null\n-                && buildInfo\n-                        .hasKey(InitParameters.REQUIRE_HOME_NODE_EXECUTABLE)) {\n-            initParameters.setProperty(\n-                    InitParameters.REQUIRE_HOME_NODE_EXECUTABLE,\n-                    String.valueOf(buildInfo.getBoolean(\n-                            InitParameters.REQUIRE_HOME_NODE_EXECUTABLE)));\n-        }\n-    }\n-\n     private static String getTokenFileContents(Class<?> systemPropertyBaseClass,", "originalCommit": "a537df040ae82f11b3a0c0f6a3fd0ab4ec6d8804", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjIwODc4MA==", "url": "https://github.com/vaadin/flow/pull/9635#discussion_r542208780", "bodyText": "Complete the task associated to this TODO comment.", "author": "vaadin-bot", "createdAt": "2020-12-14T08:51:08Z", "path": "flow-server/src/main/java/com/vaadin/flow/server/DeploymentConfigurationFactory.java", "diffHunk": "@@ -177,7 +164,10 @@ private static void readBuildInfo(Class<?> systemPropertyBaseClass,\n         // already set.\n         if (json != null) {\n             JsonObject buildInfo = JsonUtil.parse(json);\n-            setInitParametersUsingTokenData(initParameters, buildInfo);\n+            // TODO : will be rewritten properly without extra instantiation", "originalCommit": "a537df040ae82f11b3a0c0f6a3fd0ab4ec6d8804", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjIwODc5MA==", "url": "https://github.com/vaadin/flow/pull/9635#discussion_r542208790", "bodyText": "Complete the task associated to this TODO comment.", "author": "vaadin-bot", "createdAt": "2020-12-14T08:51:09Z", "path": "flow-server/src/main/java/com/vaadin/flow/server/DeploymentConfigurationFactory.java", "diffHunk": "@@ -147,6 +133,7 @@ protected static Properties createInitParameters(\n         readUiFromEnclosingClass(systemPropertyBaseClass, initParameters);\n         readConfigurationAnnotation(systemPropertyBaseClass, initParameters);\n \n+        // TODO : will be removed in futher commits", "originalCommit": "a537df040ae82f11b3a0c0f6a3fd0ab4ec6d8804", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzI1MzkzNw==", "url": "https://github.com/vaadin/flow/pull/9635#discussion_r543253937", "bodyText": "ApplicationConfigurationFactory is now on the not serializable list, but at the same time implements Serializable?\nSo should it be serializable or not. One of these is extra.", "author": "caalador", "createdAt": "2020-12-15T11:11:23Z", "path": "flow-test-generic/src/main/java/com/vaadin/flow/testutil/ClassesSerializableTest.java", "diffHunk": "@@ -105,6 +105,7 @@\n                 \"com\\\\.vaadin\\\\.flow\\\\.server\\\\.VaadinServletRequest\",\n                 \"com\\\\.vaadin\\\\.flow\\\\.server\\\\.VaadinServletResponse\",\n                 \"com\\\\.vaadin\\\\.flow\\\\.server\\\\.startup\\\\.AnnotationValidator\",\n+                \"com\\\\.vaadin\\\\.flow\\\\.server\\\\.startup\\\\.ApplicationConfigurationFactory\",", "originalCommit": "044f61cc84aa88d301dfaaeb9cee7df5a43d1ef7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzUxNTk2Mg==", "url": "https://github.com/vaadin/flow/pull/9635#discussion_r543515962", "bodyText": "Sorry, I didn't get.\nApplicationConfigurationFactory is an interface.\nIt doesn't extend Serializable.\nDefaultApplicationConfigurationFactory is a class, it implements Serializable just because its superclass implements it.\nBut the main its interface doesn't extend Serializable.", "author": "denis-anisimov", "createdAt": "2020-12-15T16:55:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzI1MzkzNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzUyMjYyNA==", "url": "https://github.com/vaadin/flow/pull/9635#discussion_r543522624", "bodyText": "Ah, I guess yo meant AbstractConfigurationFactory.\nAbstractConfigurationFactory != ApplicationConfigurationFactory", "author": "denis-anisimov", "createdAt": "2020-12-15T17:02:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzI1MzkzNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzk1OTM2NA==", "url": "https://github.com/vaadin/flow/pull/9635#discussion_r543959364", "bodyText": "Reading comprehension is not strong at the moment it seems.", "author": "caalador", "createdAt": "2020-12-16T05:05:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzI1MzkzNw=="}], "type": "inlineReview"}, {"oid": "bd2ca28a55ce6aa90511c91e966ef0392bcd1ab4", "url": "https://github.com/vaadin/flow/commit/bd2ca28a55ce6aa90511c91e966ef0392bcd1ab4", "message": "fix: remove extra comment", "committedDate": "2020-12-15T17:02:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzk1Nzg1Ng==", "url": "https://github.com/vaadin/flow/pull/9635#discussion_r543957856", "bodyText": "Is it intentional that the same function is still also available in DeploymentConfigurationFactory.java?", "author": "caalador", "createdAt": "2020-12-16T05:04:06Z", "path": "flow-server/src/main/java/com/vaadin/flow/server/startup/DefaultApplicationConfigurationFactory.java", "diffHunk": "@@ -0,0 +1,207 @@\n+/*\n+ * Copyright 2000-2020 Vaadin Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package com.vaadin.flow.server.startup;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.net.URL;\n+import java.util.Collections;\n+import java.util.Enumeration;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.vaadin.flow.di.Lookup;\n+import com.vaadin.flow.di.ResourceProvider;\n+import com.vaadin.flow.server.AbstractPropertyConfiguration;\n+import com.vaadin.flow.server.VaadinContext;\n+import com.vaadin.flow.server.frontend.FrontendUtils;\n+\n+import elemental.json.JsonObject;\n+import elemental.json.impl.JsonUtil;\n+\n+import static com.vaadin.flow.server.Constants.VAADIN_SERVLET_RESOURCES;\n+import static com.vaadin.flow.server.InitParameters.SERVLET_PARAMETER_PRODUCTION_MODE;\n+import static com.vaadin.flow.server.frontend.FrontendUtils.TOKEN_FILE;\n+\n+/**\n+ * Default implementation of {@link ApplicationConfigurationFactory}.\n+ * \n+ * @author Vaadin Ltd\n+ * @since\n+ *\n+ */\n+public class DefaultApplicationConfigurationFactory\n+        extends AbstractConfigurationFactory\n+        implements ApplicationConfigurationFactory {\n+\n+    protected static class ApplicationConfigurationImpl extends\n+            AbstractPropertyConfiguration implements ApplicationConfiguration {\n+\n+        private final VaadinContext context;\n+\n+        protected ApplicationConfigurationImpl(VaadinContext context,\n+                Map<String, String> properties) {\n+            super(properties);\n+            this.context = context;\n+        }\n+\n+        @Override\n+        public boolean isProductionMode() {\n+            return getBooleanProperty(SERVLET_PARAMETER_PRODUCTION_MODE, false);\n+        }\n+\n+        @Override\n+        public Enumeration<String> getPropertyNames() {\n+            return Collections.enumeration(getProperties().keySet());\n+        }\n+\n+        @Override\n+        public VaadinContext getContext() {\n+            return context;\n+        }\n+\n+    }\n+\n+    @Override\n+    public ApplicationConfiguration create(VaadinContext context) {\n+        Map<String, String> props = new HashMap<>();\n+        for (final Enumeration<String> e = context.getContextParameterNames(); e\n+                .hasMoreElements();) {\n+            final String name = e.nextElement();\n+            props.put(name, context.getContextParameter(name));\n+        }\n+        try {\n+            JsonObject buildInfo = JsonUtil\n+                    .parse(getTokenFileFromClassloader(context));\n+\n+            props.putAll(getConfigParametersUsingTokenData(buildInfo));\n+        } catch (IOException exception) {\n+            throw new UncheckedIOException(exception);\n+        }\n+        return new ApplicationConfigurationImpl(context, props);\n+    }\n+\n+    /**\n+     * Gets token file from the classpath using the provided {@code context}.\n+     * <p>\n+     * The {@code contextClass} may be a class which is defined in the Web\n+     * Application module/bundle and in this case it may be used to get Web\n+     * Application resources. Also a {@link VaadinContext} {@code context}\n+     * instance may be used to get a context of the Web Application (since the\n+     * {@code contextClass} may be a class not from Web Application module). In\n+     * WAR case it doesn't matter which class is used to get the resources (Web\n+     * Application classes or e.g. \"flow-server\" classes) since they are loaded\n+     * by the same {@link ClassLoader}. But in OSGi \"flow-server\" module classes\n+     * can't be used to get Web Application resources since they are in\n+     * different bundles.\n+     * \n+     * @param context\n+     *            a VaadinContext which may provide information how to get token\n+     *            file for the web application\n+     * @return the token file content\n+     * @throws IOException\n+     *             if I/O fails during access to the token file\n+     */\n+    protected String getTokenFileFromClassloader(VaadinContext context)", "originalCommit": "bd2ca28a55ce6aa90511c91e966ef0392bcd1ab4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzk5MDg0MQ==", "url": "https://github.com/vaadin/flow/pull/9635#discussion_r543990841", "bodyText": "Technically DefaultApplicationConfigurationFactory should not be in this PR.\nIt's not yet used from anywhere.\nThe main work is the configuration refactoring but I've included also DefaultApplicationConfigurationFactory  for some reasons which I don't even remember anymore.\nYou are right that the intention is to have the method in DefaultApplicationConfigurationFactory only.\nBut that will require complete PR with all things reimplemented and that will be too big.\nThis change is the next one: it's even already done. I'm writing and correcting unit tests.\nWIP: #9642", "author": "denis-anisimov", "createdAt": "2020-12-16T05:47:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzk1Nzg1Ng=="}], "type": "inlineReview"}]}