{"pr_number": 8896, "pr_title": "Only connect to devServer when it is started", "pr_createdAt": "2020-08-25T11:15:35Z", "pr_url": "https://github.com/vaadin/flow/pull/8896", "timeline": [{"oid": "461c9bc483295506857fa193db70f2a907fc5a7e", "url": "https://github.com/vaadin/flow/commit/461c9bc483295506857fa193db70f2a907fc5a7e", "message": "Only connect to devServer when it is started\n\nDo not try to connect to the dev server\nif it hasn't started yet or startup has failed.\n\nFixes #8858", "committedDate": "2020-08-25T11:48:02Z", "type": "commit"}, {"oid": "461c9bc483295506857fa193db70f2a907fc5a7e", "url": "https://github.com/vaadin/flow/commit/461c9bc483295506857fa193db70f2a907fc5a7e", "message": "Only connect to devServer when it is started\n\nDo not try to connect to the dev server\nif it hasn't started yet or startup has failed.\n\nFixes #8858", "committedDate": "2020-08-25T11:48:02Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzAzNzAxNA==", "url": "https://github.com/vaadin/flow/pull/8896#discussion_r477037014", "bodyText": "Just curious and checking - what happens now when the previously errored request (for refresh?) will now return false to back to VaadinServlet ?\nWill StaticFileHandler take the request or does VaadinServlet pass it to VaadinServletService ?\nJust looking at the code and seeing that the DevModeHandler was able the return dev-mode-not-ready.html page on these occasions, so wondering what triggered the request which lead to error.", "author": "pleku", "createdAt": "2020-08-26T05:08:57Z", "path": "flow-server/src/main/java/com/vaadin/flow/server/DevModeHandler.java", "diffHunk": "@@ -298,7 +297,8 @@ public boolean isDevModeRequest(HttpServletRequest request) {\n      */\n     public boolean serveDevModeRequest(HttpServletRequest request,\n             HttpServletResponse response) throws IOException {\n-        if (isDevServerFailedToStart.get()) {\n+        // Do not serve requests if dev server starting or failed to start.\n+        if (isDevServerFailedToStart.get() || !devServerStartFuture.isDone()) {", "originalCommit": "461c9bc483295506857fa193db70f2a907fc5a7e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA0MzI0MA==", "url": "https://github.com/vaadin/flow/pull/8896#discussion_r477043240", "bodyText": "The root problem is that the DevModeHandler handles the reload, but before the handlers are executed the servlet will check for static resources which will after initial init of DevModeHandler check the request path that should it be handled and then try to ask the at that point not running dev server if it has anything for the request.\nWith the addition of this check we will not do a request to the dev server if it has not yet started making the request hanlding continue to the DevModeHandler:handleRequest which will just return the waiting html page.", "author": "caalador", "createdAt": "2020-08-26T05:30:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzAzNzAxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA0Mzc1NA==", "url": "https://github.com/vaadin/flow/pull/8896#discussion_r477043754", "bodyText": "So initially DevModeHandler will return null, but then during init it will not be null\n        DevModeHandler handler = DevModeHandler.getDevModeHandler();\n\n        if (handler != null && handler.isDevModeRequest(request)\n                && handler.serveDevModeRequest(request, response)) {\n            return true;\n        }\n\nAnd the request handling goes through the steps\nif (handleContextOrServletRootWithoutSlash(request, response)) {\n\nif (serveStaticOrWebJarRequest(request, response)) {\n\nif (!ensureCookiesEnabled(vaadinRequest, vaadinResponse)) {\n\ngetService().handleRequest(vaadinRequest, vaadinResponse); // this runs the registered handlers", "author": "caalador", "createdAt": "2020-08-26T05:32:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzAzNzAxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA0NDg5Nw==", "url": "https://github.com/vaadin/flow/pull/8896#discussion_r477044897", "bodyText": "Right, thanks for the explanation.", "author": "pleku", "createdAt": "2020-08-26T05:36:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzAzNzAxNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzAzNzgyNg==", "url": "https://github.com/vaadin/flow/pull/8896#discussion_r477037826", "bodyText": "Should there be a unit test which makes sure that the code is not accidentally removed again and devServerStartFuture is considered?", "author": "pleku", "createdAt": "2020-08-26T05:11:52Z", "path": "flow-server/src/test/java/com/vaadin/flow/server/DevModeHandlerTest.java", "diffHunk": "@@ -208,12 +208,12 @@ public void webpackNotInstalled_throws() throws Exception {\n \n     @Test\n     public void webpackIsNotExecutable_throws() {\n-        exception.expectCause(CoreMatchers.isA(ExecutionFailedException.class));\n         // The set executable doesn't work in Windows and will always return\n         // false\n         boolean systemImplementsExecutable = new File(baseDir, WEBPACK_SERVER)\n                 .setExecutable(false);\n         if (systemImplementsExecutable) {\n+            exception.expectCause(CoreMatchers.isA(ExecutionFailedException.class));\n             DevModeHandler.start(configuration, npmFolder,\n                     CompletableFuture.completedFuture(null)).join();\n         }", "originalCommit": "461c9bc483295506857fa193db70f2a907fc5a7e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA0NDMwNA==", "url": "https://github.com/vaadin/flow/pull/8896#discussion_r477044304", "bodyText": "The test change is for windows systems that will never execute the start as windows doesn't have executable.\nThe test at the moment fails 100% of executions as windows will never throw the exception, so if the system (windows) doesn't implement executable then no exception will be thrown either making the test fail.", "author": "caalador", "createdAt": "2020-08-26T05:34:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzAzNzgyNg=="}], "type": "inlineReview"}]}