{"pr_number": 696, "pr_title": "Enable OSS support in TOKENGEN and TOKENDUMP for the secret management", "pr_createdAt": "2020-03-16T12:45:45Z", "pr_url": "https://github.com/senx/warp10-platform/pull/696", "timeline": [{"oid": "99eaf0a456e68de5aeabbf99c65af93c912be7aa", "url": "https://github.com/senx/warp10-platform/commit/99eaf0a456e68de5aeabbf99c65af93c912be7aa", "message": "Enable OSS support in TOKENGEN and TOKENDUMP for the secret management", "committedDate": "2020-03-16T12:43:26Z", "type": "commit"}, {"oid": "5bb0cca58eb9467e9ecf3020588296bbdd831c3e", "url": "https://github.com/senx/warp10-platform/commit/5bb0cca58eb9467e9ecf3020588296bbdd831c3e", "message": "Clean up useless imports", "committedDate": "2020-03-16T13:20:50Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzAyNDAwMA==", "url": "https://github.com/senx/warp10-platform/pull/696#discussion_r393024000", "bodyText": "Don't call getKeyStore multiple times, the whole keystore gets cloned when you do so.\nSpecify StandardCharsets.UTF_8 when creating the String instance.", "author": "hbs", "createdAt": "2020-03-16T13:31:58Z", "path": "warp10/src/main/java/io/warp10/script/ext/token/TokenWarpScriptExtension.java", "diffHunk": "@@ -16,57 +16,58 @@\n \n package io.warp10.script.ext.token;\n \n-import java.util.HashMap;\n-import java.util.Map;\n-import java.util.Properties;\n-\n import io.warp10.WarpConfig;\n-import io.warp10.WarpDist;\n import io.warp10.crypto.KeyStore;\n import io.warp10.standalone.Warp;\n import io.warp10.warp.sdk.WarpScriptExtension;\n \n+import java.util.HashMap;\n+import java.util.Map;\n+\n public class TokenWarpScriptExtension extends WarpScriptExtension {\n-  \n+\n   /*\n-   *  Name of configuration key with the token secret. \n+   *  Name of configuration key with the token secret.\n    */\n   public static final String CONF_TOKEN_SECRET = \"token.secret\";\n-  \n+\n   /**\n    * Current Token Secret\n    */\n   public static String TOKEN_SECRET = null;\n-  \n-  private static final Map<String,Object> functions = new HashMap<String,Object>();\n+\n+  private static final Map<String, Object> functions = new HashMap<String, Object>();\n   private static final KeyStore keystore;\n-  \n+\n   static {\n     TOKEN_SECRET = WarpConfig.getProperty(CONF_TOKEN_SECRET);\n+    if(null != Warp.getKeyStore().getKey(TokenWarpScriptExtension.CONF_TOKEN_SECRET)){\n+      TOKEN_SECRET = new String(Warp.getKeyStore().getKey(TokenWarpScriptExtension.CONF_TOKEN_SECRET)).replaceAll(\"\\n\", \"\").trim();", "originalCommit": "5bb0cca58eb9467e9ecf3020588296bbdd831c3e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzAyNTMwMg==", "url": "https://github.com/senx/warp10-platform/pull/696#discussion_r393025302", "bodyText": "Warp.getKeyStore could return null", "author": "hbs", "createdAt": "2020-03-16T13:34:03Z", "path": "warp10/src/main/java/io/warp10/script/ext/token/TokenWarpScriptExtension.java", "diffHunk": "@@ -16,57 +16,58 @@\n \n package io.warp10.script.ext.token;\n \n-import java.util.HashMap;\n-import java.util.Map;\n-import java.util.Properties;\n-\n import io.warp10.WarpConfig;\n-import io.warp10.WarpDist;\n import io.warp10.crypto.KeyStore;\n import io.warp10.standalone.Warp;\n import io.warp10.warp.sdk.WarpScriptExtension;\n \n+import java.util.HashMap;\n+import java.util.Map;\n+\n public class TokenWarpScriptExtension extends WarpScriptExtension {\n-  \n+\n   /*\n-   *  Name of configuration key with the token secret. \n+   *  Name of configuration key with the token secret.\n    */\n   public static final String CONF_TOKEN_SECRET = \"token.secret\";\n-  \n+\n   /**\n    * Current Token Secret\n    */\n   public static String TOKEN_SECRET = null;\n-  \n-  private static final Map<String,Object> functions = new HashMap<String,Object>();\n+\n+  private static final Map<String, Object> functions = new HashMap<String, Object>();\n   private static final KeyStore keystore;\n-  \n+\n   static {\n     TOKEN_SECRET = WarpConfig.getProperty(CONF_TOKEN_SECRET);\n+    if(null != Warp.getKeyStore().getKey(TokenWarpScriptExtension.CONF_TOKEN_SECRET)){", "originalCommit": "5bb0cca58eb9467e9ecf3020588296bbdd831c3e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzAyNjEyOA==", "url": "https://github.com/senx/warp10-platform/pull/696#discussion_r393026128", "bodyText": "Add a comment here and in the documentation templates explaining that warp.key.token.secret will prevail if it exists.", "author": "hbs", "createdAt": "2020-03-16T13:35:28Z", "path": "warp10/src/main/java/io/warp10/script/ext/token/TokenWarpScriptExtension.java", "diffHunk": "@@ -16,57 +16,58 @@\n \n package io.warp10.script.ext.token;\n \n-import java.util.HashMap;\n-import java.util.Map;\n-import java.util.Properties;\n-\n import io.warp10.WarpConfig;\n-import io.warp10.WarpDist;\n import io.warp10.crypto.KeyStore;\n import io.warp10.standalone.Warp;\n import io.warp10.warp.sdk.WarpScriptExtension;\n \n+import java.util.HashMap;\n+import java.util.Map;\n+\n public class TokenWarpScriptExtension extends WarpScriptExtension {\n-  \n+\n   /*\n-   *  Name of configuration key with the token secret. \n+   *  Name of configuration key with the token secret.", "originalCommit": "5bb0cca58eb9467e9ecf3020588296bbdd831c3e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzAyNjQ4Mg==", "url": "https://github.com/senx/warp10-platform/pull/696#discussion_r393026482", "bodyText": "This part of the PR doesn't have much to do with the rest!", "author": "hbs", "createdAt": "2020-03-16T13:36:01Z", "path": "warp10/src/main/java/io/warp10/json/JsonUtils.java", "diffHunk": "@@ -31,11 +31,6 @@\n import com.fasterxml.jackson.databind.ser.BeanSerializer;\n import com.fasterxml.jackson.databind.ser.BeanSerializerModifier;\n import com.fasterxml.jackson.databind.ser.impl.UnknownSerializer;", "originalCommit": "5bb0cca58eb9467e9ecf3020588296bbdd831c3e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzAyOTc5NQ==", "url": "https://github.com/senx/warp10-platform/pull/696#discussion_r393029795", "bodyText": "I know, it will be a part of a second PR.", "author": "Giwi", "createdAt": "2020-03-16T13:41:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzAyNjQ4Mg=="}], "type": "inlineReview"}, {"oid": "1b6cb486d8c9023e3398f8b638f15c9f3e7d08fe", "url": "https://github.com/senx/warp10-platform/commit/1b6cb486d8c9023e3398f8b638f15c9f3e7d08fe", "message": "Revert \"Clean up useless imports\"\n\nThis reverts commit 5bb0cca5", "committedDate": "2020-03-16T13:41:57Z", "type": "commit"}, {"oid": "8ad9f73c0884d1b83a8be2f5d819db3c2856c5c0", "url": "https://github.com/senx/warp10-platform/commit/8ad9f73c0884d1b83a8be2f5d819db3c2856c5c0", "message": "Enable OSS support in TOKENGEN and TOKENDUMP for the secret management", "committedDate": "2020-03-16T13:47:09Z", "type": "commit"}, {"oid": "b20e5fce2bb72fdb1c971a078cefe266a38b245d", "url": "https://github.com/senx/warp10-platform/commit/b20e5fce2bb72fdb1c971a078cefe266a38b245d", "message": "Specify StandardCharsets.UTF_8 when creating the String instance.", "committedDate": "2020-03-17T08:33:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzUxNjk5OA==", "url": "https://github.com/senx/warp10-platform/pull/696#discussion_r393516998", "bodyText": "Extract the key only once with nested ifs.", "author": "hbs", "createdAt": "2020-03-17T08:38:52Z", "path": "warp10/src/main/java/io/warp10/script/ext/token/TokenWarpScriptExtension.java", "diffHunk": "@@ -16,57 +16,61 @@\n \n package io.warp10.script.ext.token;\n \n-import java.util.HashMap;\n-import java.util.Map;\n-import java.util.Properties;\n-\n import io.warp10.WarpConfig;\n-import io.warp10.WarpDist;\n import io.warp10.crypto.KeyStore;\n import io.warp10.standalone.Warp;\n import io.warp10.warp.sdk.WarpScriptExtension;\n \n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n public class TokenWarpScriptExtension extends WarpScriptExtension {\n-  \n+\n   /*\n-   *  Name of configuration key with the token secret. \n+   *  Name of configuration key with the token secret.\n+   *\n+   * Must be warp.key.token.secret if handled by OSS\n    */\n   public static final String CONF_TOKEN_SECRET = \"token.secret\";\n-  \n+\n   /**\n    * Current Token Secret\n    */\n   public static String TOKEN_SECRET = null;\n-  \n-  private static final Map<String,Object> functions = new HashMap<String,Object>();\n+\n+  private static final Map<String, Object> functions = new HashMap<String, Object>();\n   private static final KeyStore keystore;\n-  \n+\n   static {\n     TOKEN_SECRET = WarpConfig.getProperty(CONF_TOKEN_SECRET);\n \n-    if (null != TOKEN_SECRET) {\n+    if (null == TOKEN_SECRET) {\n       keystore = Warp.getKeyStore();\n+      if (null != keystore && null != keystore.getKey(TokenWarpScriptExtension.CONF_TOKEN_SECRET)) {", "originalCommit": "b20e5fce2bb72fdb1c971a078cefe266a38b245d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzUxODEyNg==", "url": "https://github.com/senx/warp10-platform/pull/696#discussion_r393518126", "bodyText": "Use separate constants to make the code clearer, even though they have the same value. CONF_TOKEN_SECRET for the configuration key, KEY_TOKEN_SECRET for the KeyStore key. Clearly describe the behavior in the comments. As it is now it is rather hard to understand since you say \"Myst be warp.key.token.secret is handled by OSS\" with a constant defined below. What should I do if I want to use OSS? Recompile the code with a different value of CONF_TOKEN_SECRET?", "author": "hbs", "createdAt": "2020-03-17T08:41:07Z", "path": "warp10/src/main/java/io/warp10/script/ext/token/TokenWarpScriptExtension.java", "diffHunk": "@@ -16,57 +16,61 @@\n \n package io.warp10.script.ext.token;\n \n-import java.util.HashMap;\n-import java.util.Map;\n-import java.util.Properties;\n-\n import io.warp10.WarpConfig;\n-import io.warp10.WarpDist;\n import io.warp10.crypto.KeyStore;\n import io.warp10.standalone.Warp;\n import io.warp10.warp.sdk.WarpScriptExtension;\n \n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n public class TokenWarpScriptExtension extends WarpScriptExtension {\n-  \n+\n   /*\n-   *  Name of configuration key with the token secret. \n+   *  Name of configuration key with the token secret.\n+   *\n+   * Must be warp.key.token.secret if handled by OSS\n    */\n   public static final String CONF_TOKEN_SECRET = \"token.secret\";\n-  \n+\n   /**\n    * Current Token Secret\n    */\n   public static String TOKEN_SECRET = null;\n-  \n-  private static final Map<String,Object> functions = new HashMap<String,Object>();\n+\n+  private static final Map<String, Object> functions = new HashMap<String, Object>();\n   private static final KeyStore keystore;\n-  \n+\n   static {\n     TOKEN_SECRET = WarpConfig.getProperty(CONF_TOKEN_SECRET);", "originalCommit": "b20e5fce2bb72fdb1c971a078cefe266a38b245d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "b7ac2fec9e5bd56ab09e88a4a67676fb3b859deb", "url": "https://github.com/senx/warp10-platform/commit/b7ac2fec9e5bd56ab09e88a4a67676fb3b859deb", "message": "Use separate constants to make the code clearer and extract the key only once.", "committedDate": "2020-03-17T09:12:32Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzU2ODExMQ==", "url": "https://github.com/senx/warp10-platform/pull/696#discussion_r393568111", "bodyText": "Unwrapping of any configuration key prefixed with Configuration.WARP_KEY_PREFIX is automatic, the only thing you have to do is to attempt to retrieve the KEY_TOKEN_SECRET key and use it if it is set.\nSo KEY_TOKEN_SECRET should be \"token.secret\"", "author": "hbs", "createdAt": "2020-03-17T10:08:35Z", "path": "warp10/src/main/java/io/warp10/script/ext/token/TokenWarpScriptExtension.java", "diffHunk": "@@ -16,57 +16,73 @@\n \n package io.warp10.script.ext.token;\n \n-import java.util.HashMap;\n-import java.util.Map;\n-import java.util.Properties;\n-\n import io.warp10.WarpConfig;\n-import io.warp10.WarpDist;\n import io.warp10.crypto.KeyStore;\n import io.warp10.standalone.Warp;\n import io.warp10.warp.sdk.WarpScriptExtension;\n \n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n public class TokenWarpScriptExtension extends WarpScriptExtension {\n-  \n+\n   /*\n-   *  Name of configuration key with the token secret. \n+   * Name of configuration key with the token secret.\n    */\n   public static final String CONF_TOKEN_SECRET = \"token.secret\";\n-  \n+  /*\n+   * Name of configuration key with OSS wrapped token secret\n+   * ie: warp.key.token.secret  = wrapped:hex:xxxxx\n+   */\n+  public static final String KEY_TOKEN_SECRET = \"warp.key.token.secret\";\n+\n   /**\n    * Current Token Secret\n    */\n   public static String TOKEN_SECRET = null;\n-  \n-  private static final Map<String,Object> functions = new HashMap<String,Object>();\n+\n+  private static final Map<String, Object> functions = new HashMap<String, Object>();\n   private static final KeyStore keystore;\n-  \n+\n   static {\n     TOKEN_SECRET = WarpConfig.getProperty(CONF_TOKEN_SECRET);\n-\n-    if (null != TOKEN_SECRET) {\n-      keystore = Warp.getKeyStore();\n+    if (null == TOKEN_SECRET) {\n+      // if OSS wrapped secret exists\n+      TOKEN_SECRET = WarpConfig.getProperty(KEY_TOKEN_SECRET);", "originalCommit": "b7ac2fec9e5bd56ab09e88a4a67676fb3b859deb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzcxNTA1NQ==", "url": "https://github.com/senx/warp10-platform/pull/696#discussion_r393715055", "bodyText": "indeed", "author": "Giwi", "createdAt": "2020-03-17T14:21:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzU2ODExMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzU2ODQ0OQ==", "url": "https://github.com/senx/warp10-platform/pull/696#discussion_r393568449", "bodyText": "You need to modify the distributed configuration template too.", "author": "hbs", "createdAt": "2020-03-17T10:09:10Z", "path": "etc/conf.templates/standalone/70--extensions.conf.template", "diffHunk": "@@ -50,9 +50,14 @@\n #warpscript.extension.sensision = io.warp10.script.ext.sensision.SensisionWarpScriptExtension\n // MUTEX, SHMLOAD, SHMSTORE\n #warpscript.extension.shm = io.warp10.script.ext.shm.SharedMemoryWarpScriptExtension\n+", "originalCommit": "b7ac2fec9e5bd56ab09e88a4a67676fb3b859deb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzU2ODY2OQ==", "url": "https://github.com/senx/warp10-platform/pull/696#discussion_r393568669", "bodyText": "Explain more clearly how this is taken into account vs token.secret", "author": "hbs", "createdAt": "2020-03-17T10:09:33Z", "path": "etc/conf.templates/standalone/70--extensions.conf.template", "diffHunk": "@@ -50,9 +50,14 @@\n #warpscript.extension.sensision = io.warp10.script.ext.sensision.SensisionWarpScriptExtension\n // MUTEX, SHMLOAD, SHMSTORE\n #warpscript.extension.shm = io.warp10.script.ext.shm.SharedMemoryWarpScriptExtension\n+\n // TOKENDUMP, TOKENGEN, TOKENSECRET\n #warpscript.extension.token = io.warp10.script.ext.token.TokenWarpScriptExtension\n+// If you use OSS to handle this secret", "originalCommit": "b7ac2fec9e5bd56ab09e88a4a67676fb3b859deb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "bab691304bc7bda6a0d8dcf79a3ac09e2ad12d45", "url": "https://github.com/senx/warp10-platform/commit/bab691304bc7bda6a0d8dcf79a3ac09e2ad12d45", "message": "Merge remote-tracking branch 'origin/master'", "committedDate": "2020-03-17T14:20:57Z", "type": "commit"}, {"oid": "77ca838c38d79fd51c3bb613e7733301b983e05a", "url": "https://github.com/senx/warp10-platform/commit/77ca838c38d79fd51c3bb613e7733301b983e05a", "message": "Update configuration templates and fix the constant.", "committedDate": "2020-03-17T14:26:19Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzcyMTEyMQ==", "url": "https://github.com/senx/warp10-platform/pull/696#discussion_r393721121", "bodyText": "It's actually the name of the secret in the key store, not in the configuration.", "author": "hbs", "createdAt": "2020-03-17T14:29:31Z", "path": "warp10/src/main/java/io/warp10/script/ext/token/TokenWarpScriptExtension.java", "diffHunk": "@@ -35,7 +35,7 @@\n    * Name of configuration key with OSS wrapped token secret", "originalCommit": "77ca838c38d79fd51c3bb613e7733301b983e05a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzcyMjQxMw==", "url": "https://github.com/senx/warp10-platform/pull/696#discussion_r393722413", "bodyText": "This should test the existence of the key in the keystore, i.e. Warp.getKeyStore().getKey(KEY_TOKEN_SECRET) and then set TOKEN_SECRET accordingly, here this would always set TOKEN_SECRET to null since you already checked the same configuration key.", "author": "hbs", "createdAt": "2020-03-17T14:31:13Z", "path": "warp10/src/main/java/io/warp10/script/ext/token/TokenWarpScriptExtension.java", "diffHunk": "@@ -16,57 +16,73 @@\n \n package io.warp10.script.ext.token;\n \n-import java.util.HashMap;\n-import java.util.Map;\n-import java.util.Properties;\n-\n import io.warp10.WarpConfig;\n-import io.warp10.WarpDist;\n import io.warp10.crypto.KeyStore;\n import io.warp10.standalone.Warp;\n import io.warp10.warp.sdk.WarpScriptExtension;\n \n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n public class TokenWarpScriptExtension extends WarpScriptExtension {\n-  \n+\n   /*\n-   *  Name of configuration key with the token secret. \n+   * Name of configuration key with the token secret.\n    */\n   public static final String CONF_TOKEN_SECRET = \"token.secret\";\n-  \n+  /*\n+   * Name of configuration key with OSS wrapped token secret\n+   * ie: warp.key.token.secret  = wrapped:hex:xxxxx\n+   */\n+  public static final String KEY_TOKEN_SECRET = \"token.secret\";\n+\n   /**\n    * Current Token Secret\n    */\n   public static String TOKEN_SECRET = null;\n-  \n-  private static final Map<String,Object> functions = new HashMap<String,Object>();\n+\n+  private static final Map<String, Object> functions = new HashMap<String, Object>();\n   private static final KeyStore keystore;\n-  \n+\n   static {\n     TOKEN_SECRET = WarpConfig.getProperty(CONF_TOKEN_SECRET);\n-\n-    if (null != TOKEN_SECRET) {\n-      keystore = Warp.getKeyStore();\n+    if (null == TOKEN_SECRET) {\n+      // if OSS wrapped secret exists\n+      TOKEN_SECRET = WarpConfig.getProperty(KEY_TOKEN_SECRET);", "originalCommit": "77ca838c38d79fd51c3bb613e7733301b983e05a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzczOTUzMA==", "url": "https://github.com/senx/warp10-platform/pull/696#discussion_r393739530", "bodyText": "Rename this variable ks so it differs frankly from keystore", "author": "hbs", "createdAt": "2020-03-17T14:54:41Z", "path": "warp10/src/main/java/io/warp10/script/ext/token/TokenWarpScriptExtension.java", "diffHunk": "@@ -16,57 +16,73 @@\n \n package io.warp10.script.ext.token;\n \n-import java.util.HashMap;\n-import java.util.Map;\n-import java.util.Properties;\n-\n import io.warp10.WarpConfig;\n-import io.warp10.WarpDist;\n import io.warp10.crypto.KeyStore;\n import io.warp10.standalone.Warp;\n import io.warp10.warp.sdk.WarpScriptExtension;\n \n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n public class TokenWarpScriptExtension extends WarpScriptExtension {\n-  \n+\n   /*\n-   *  Name of configuration key with the token secret. \n+   * Name of configuration key with the token secret.\n    */\n   public static final String CONF_TOKEN_SECRET = \"token.secret\";\n-  \n+  /*\n+   * Name of configuration key with OSS wrapped token secret\n+   * ie: warp.key.token.secret  = wrapped:hex:xxxxx\n+   */\n+  public static final String KEY_TOKEN_SECRET = \"token.secret\";\n+\n   /**\n    * Current Token Secret\n    */\n   public static String TOKEN_SECRET = null;\n-  \n-  private static final Map<String,Object> functions = new HashMap<String,Object>();\n+\n+  private static final Map<String, Object> functions = new HashMap<String, Object>();\n   private static final KeyStore keystore;\n-  \n+\n   static {\n     TOKEN_SECRET = WarpConfig.getProperty(CONF_TOKEN_SECRET);\n-\n-    if (null != TOKEN_SECRET) {\n-      keystore = Warp.getKeyStore();\n+    if (null == TOKEN_SECRET) {\n+      // if OSS wrapped secret exists\n+      TOKEN_SECRET = WarpConfig.getProperty(KEY_TOKEN_SECRET);\n+      if (null == TOKEN_SECRET) { // if no configuration key\n+        keystore =  Warp.getKeyStore();\n+      } else {\n+        keystore = null;\n+        KeyStore keyStore = Warp.getKeyStore();", "originalCommit": "77ca838c38d79fd51c3bb613e7733301b983e05a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "85d94c7a1d0f2dd8b34c8b853ded200b48da151a", "url": "https://github.com/senx/warp10-platform/commit/85d94c7a1d0f2dd8b34c8b853ded200b48da151a", "message": "Variable renaming, conf keys test fix", "committedDate": "2020-03-17T15:26:13Z", "type": "commit"}, {"oid": "fe3dfa40e7f105b4952e779781a90321fc25f191", "url": "https://github.com/senx/warp10-platform/commit/fe3dfa40e7f105b4952e779781a90321fc25f191", "message": "Merge remote-tracking branch 'origin/master'", "committedDate": "2020-03-18T09:41:55Z", "type": "commit"}, {"oid": "5331263d94b96831196b29c5f6115699ecba670b", "url": "https://github.com/senx/warp10-platform/commit/5331263d94b96831196b29c5f6115699ecba670b", "message": "Simplify tests of token secret keys existence.", "committedDate": "2020-03-18T10:38:13Z", "type": "commit"}]}