{"pr_number": 639, "pr_title": "Addduration", "pr_createdAt": "2020-01-22T17:00:21Z", "pr_url": "https://github.com/senx/warp10-platform/pull/639", "timeline": [{"oid": "59947eb607d44d5ac2c908791feb0ec4156545a7", "url": "https://github.com/senx/warp10-platform/commit/59947eb607d44d5ac2c908791feb0ec4156545a7", "message": "ADDDURATION", "committedDate": "2020-01-22T16:12:28Z", "type": "commit"}, {"oid": "b548a2adc39878429c3ebd62fc9010dc65b6e9e4", "url": "https://github.com/senx/warp10-platform/commit/b548a2adc39878429c3ebd62fc9010dc65b6e9e4", "message": "registered in warpscriptlib", "committedDate": "2020-01-22T16:14:38Z", "type": "commit"}, {"oid": "fb56f37e9caab6a9b16420d867472475a3bae1ec", "url": "https://github.com/senx/warp10-platform/commit/fb56f37e9caab6a9b16420d867472475a3bae1ec", "message": "bugfix", "committedDate": "2020-01-22T16:58:13Z", "type": "commit"}, {"oid": "8b61caed4a628bd5355d3fd306337fe77f44d221", "url": "https://github.com/senx/warp10-platform/commit/8b61caed4a628bd5355d3fd306337fe77f44d221", "message": "superfluous paren fix", "committedDate": "2020-01-22T17:01:12Z", "type": "commit"}, {"oid": "1f7726b3100a2529d6193bd6a70185a54b1449c3", "url": "https://github.com/senx/warp10-platform/commit/1f7726b3100a2529d6193bd6a70185a54b1449c3", "message": "modifies DURATION to make it handle sub millis precision", "committedDate": "2020-01-23T09:59:56Z", "type": "commit"}, {"oid": "77998fa652ce0bc2187fe5da0d6704abf3d22a0e", "url": "https://github.com/senx/warp10-platform/commit/77998fa652ce0bc2187fe5da0d6704abf3d22a0e", "message": "Merge branch 'master' of github.com:senx/warp10-platform into ADDDURATION", "committedDate": "2020-01-24T09:53:33Z", "type": "commit"}, {"oid": "d0a3f09106e5f25167d36eb648b13955f835b0ab", "url": "https://github.com/senx/warp10-platform/commit/d0a3f09106e5f25167d36eb648b13955f835b0ab", "message": "add number of steps to ADDDURATION", "committedDate": "2020-01-24T10:31:40Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU3MjQ0Mg==", "url": "https://github.com/senx/warp10-platform/pull/639#discussion_r370572442", "bodyText": "move those before the constructor", "author": "hbs", "createdAt": "2020-01-24T10:44:18Z", "path": "warp10/src/main/java/io/warp10/script/functions/ADDDURATION.java", "diffHunk": "@@ -0,0 +1,150 @@\n+//\n+//   Copyright 2020  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.functions;\n+\n+import io.warp10.continuum.gts.UnsafeString;\n+import io.warp10.continuum.store.Constants;\n+import io.warp10.script.NamedWarpScriptFunction;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptLib;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WarpScriptStackFunction;\n+import org.joda.time.DateTime;\n+import org.joda.time.DateTimeZone;\n+import org.joda.time.MutablePeriod;\n+import org.joda.time.ReadWritablePeriod;\n+import org.joda.time.format.ISOPeriodFormat;\n+\n+import java.util.List;\n+import java.util.Locale;\n+\n+public class ADDDURATION extends NamedWarpScriptFunction implements WarpScriptStackFunction {\n+\n+  public ADDDURATION(String name) {\n+    super(name);\n+  }\n+  final private static WarpScriptStackFunction TSELEMENTS = new TSELEMENTS(WarpScriptLib.TSELEMENTS);", "originalCommit": "d0a3f09106e5f25167d36eb648b13955f835b0ab", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU3MjU5OQ==", "url": "https://github.com/senx/warp10-platform/pull/639#discussion_r370572599", "bodyText": "number of durationS", "author": "hbs", "createdAt": "2020-01-24T10:44:40Z", "path": "warp10/src/main/java/io/warp10/script/functions/ADDDURATION.java", "diffHunk": "@@ -0,0 +1,150 @@\n+//\n+//   Copyright 2020  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.functions;\n+\n+import io.warp10.continuum.gts.UnsafeString;\n+import io.warp10.continuum.store.Constants;\n+import io.warp10.script.NamedWarpScriptFunction;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptLib;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WarpScriptStackFunction;\n+import org.joda.time.DateTime;\n+import org.joda.time.DateTimeZone;\n+import org.joda.time.MutablePeriod;\n+import org.joda.time.ReadWritablePeriod;\n+import org.joda.time.format.ISOPeriodFormat;\n+\n+import java.util.List;\n+import java.util.Locale;\n+\n+public class ADDDURATION extends NamedWarpScriptFunction implements WarpScriptStackFunction {\n+\n+  public ADDDURATION(String name) {\n+    super(name);\n+  }\n+  final private static WarpScriptStackFunction TSELEMENTS = new TSELEMENTS(WarpScriptLib.TSELEMENTS);\n+  final private static WarpScriptStackFunction FROMTSELEMENTS = new FROMTSELEMENTS(WarpScriptLib.TSELEMENTSTO);\n+\n+  @Override\n+  public WarpScriptStack apply(WarpScriptStack stack) throws WarpScriptException {\n+\n+    //\n+    // Retrieve arguments\n+    //\n+\n+    Object top = stack.pop();\n+\n+    if (!(top instanceof String || top instanceof Long)) {\n+      throw new WarpScriptException(getName() + \" expects an ISO8601 duration (a string) on top of the stack (see http://en.wikipedia.org/wiki/ISO_8601#Durations), or a number of duration (a Long).\");", "originalCommit": "d0a3f09106e5f25167d36eb648b13955f835b0ab", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU3MzE2Mw==", "url": "https://github.com/senx/warp10-platform/pull/639#discussion_r370573163", "bodyText": "For coherency you should either use !(condA) && !(CondB) or as before !(CondA || CondB)", "author": "hbs", "createdAt": "2020-01-24T10:46:05Z", "path": "warp10/src/main/java/io/warp10/script/functions/ADDDURATION.java", "diffHunk": "@@ -0,0 +1,150 @@\n+//\n+//   Copyright 2020  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.functions;\n+\n+import io.warp10.continuum.gts.UnsafeString;\n+import io.warp10.continuum.store.Constants;\n+import io.warp10.script.NamedWarpScriptFunction;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptLib;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WarpScriptStackFunction;\n+import org.joda.time.DateTime;\n+import org.joda.time.DateTimeZone;\n+import org.joda.time.MutablePeriod;\n+import org.joda.time.ReadWritablePeriod;\n+import org.joda.time.format.ISOPeriodFormat;\n+\n+import java.util.List;\n+import java.util.Locale;\n+\n+public class ADDDURATION extends NamedWarpScriptFunction implements WarpScriptStackFunction {\n+\n+  public ADDDURATION(String name) {\n+    super(name);\n+  }\n+  final private static WarpScriptStackFunction TSELEMENTS = new TSELEMENTS(WarpScriptLib.TSELEMENTS);\n+  final private static WarpScriptStackFunction FROMTSELEMENTS = new FROMTSELEMENTS(WarpScriptLib.TSELEMENTSTO);\n+\n+  @Override\n+  public WarpScriptStack apply(WarpScriptStack stack) throws WarpScriptException {\n+\n+    //\n+    // Retrieve arguments\n+    //\n+\n+    Object top = stack.pop();\n+\n+    if (!(top instanceof String || top instanceof Long)) {\n+      throw new WarpScriptException(getName() + \" expects an ISO8601 duration (a string) on top of the stack (see http://en.wikipedia.org/wiki/ISO_8601#Durations), or a number of duration (a Long).\");\n+    }\n+\n+    String duration;\n+    long N = 1;\n+    if (top instanceof String) {\n+      duration = top.toString();\n+    } else {\n+      N = (Long) top;\n+      top = stack.pop();\n+      if (!(top instanceof String)) {\n+        throw new WarpScriptException(getName() + \" expects an ISO8601 duration (a string) in the second level of the stack (see http://en.wikipedia.org/wiki/ISO_8601#Durations).\");\n+      }\n+      duration = top.toString();\n+    }\n+\n+    String tz = null;\n+    if (stack.peek() instanceof String) {\n+      tz = stack.pop().toString();\n+      if (!(stack.peek() instanceof Long)) {\n+        throw new WarpScriptException(getName() + \" operates on a tselements list, timestamp, or timestamp and timezone.\");\n+      }\n+    } else if (!(stack.peek() instanceof List) && !(stack.peek() instanceof Long)) {", "originalCommit": "d0a3f09106e5f25167d36eb648b13955f835b0ab", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "a45ec534002887c3cc18acf673daf396e2b40027", "url": "https://github.com/senx/warp10-platform/commit/a45ec534002887c3cc18acf673daf396e2b40027", "message": "Merge branch 'master' of github.com:senx/warp10-platform into ADDDURATION", "committedDate": "2020-01-24T12:16:19Z", "type": "commit"}, {"oid": "d1de1f89a764382a5a67a3420d98d2248a1f072c", "url": "https://github.com/senx/warp10-platform/commit/d1de1f89a764382a5a67a3420d98d2248a1f072c", "message": "move functions", "committedDate": "2020-01-24T12:17:30Z", "type": "commit"}, {"oid": "a10792c4eb7d402b2191e7e252366b1444d98dfb", "url": "https://github.com/senx/warp10-platform/commit/a10792c4eb7d402b2191e7e252366b1444d98dfb", "message": "typo", "committedDate": "2020-01-24T12:18:09Z", "type": "commit"}, {"oid": "7470d2eab39f9470677dad61e166b501f8716215", "url": "https://github.com/senx/warp10-platform/commit/7470d2eab39f9470677dad61e166b501f8716215", "message": "resolve coherency comment", "committedDate": "2020-01-24T12:20:33Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDY1MDk2NA==", "url": "https://github.com/senx/warp10-platform/pull/639#discussion_r370650964", "bodyText": "Actually you could create a Double constant instead of creating a new Double on each call.", "author": "hbs", "createdAt": "2020-01-24T14:09:01Z", "path": "warp10/src/main/java/io/warp10/script/functions/ADDDURATION.java", "diffHunk": "@@ -0,0 +1,151 @@\n+//\n+//   Copyright 2020  SenX S.A.S.\n+//\n+//   Licensed under the Apache License, Version 2.0 (the \"License\");\n+//   you may not use this file except in compliance with the License.\n+//   You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+//   Unless required by applicable law or agreed to in writing, software\n+//   distributed under the License is distributed on an \"AS IS\" BASIS,\n+//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+//   See the License for the specific language governing permissions and\n+//   limitations under the License.\n+//\n+\n+package io.warp10.script.functions;\n+\n+import io.warp10.continuum.gts.UnsafeString;\n+import io.warp10.continuum.store.Constants;\n+import io.warp10.script.NamedWarpScriptFunction;\n+import io.warp10.script.WarpScriptException;\n+import io.warp10.script.WarpScriptLib;\n+import io.warp10.script.WarpScriptStack;\n+import io.warp10.script.WarpScriptStackFunction;\n+import org.joda.time.DateTime;\n+import org.joda.time.DateTimeZone;\n+import org.joda.time.MutablePeriod;\n+import org.joda.time.ReadWritablePeriod;\n+import org.joda.time.format.ISOPeriodFormat;\n+\n+import java.util.List;\n+import java.util.Locale;\n+\n+public class ADDDURATION extends NamedWarpScriptFunction implements WarpScriptStackFunction {\n+\n+  final private static WarpScriptStackFunction TSELEMENTS = new TSELEMENTS(WarpScriptLib.TSELEMENTS);\n+  final private static WarpScriptStackFunction FROMTSELEMENTS = new FROMTSELEMENTS(WarpScriptLib.TSELEMENTSTO);\n+\n+  public ADDDURATION(String name) {\n+    super(name);\n+  }\n+\n+  @Override\n+  public WarpScriptStack apply(WarpScriptStack stack) throws WarpScriptException {\n+\n+    //\n+    // Retrieve arguments\n+    //\n+\n+    Object top = stack.pop();\n+\n+    if (!(top instanceof String || top instanceof Long)) {\n+      throw new WarpScriptException(getName() + \" expects an ISO8601 duration (a string) on top of the stack (see http://en.wikipedia.org/wiki/ISO_8601#Durations), or a number of durations (a Long).\");\n+    }\n+\n+    String duration;\n+    long N = 1;\n+    if (top instanceof String) {\n+      duration = top.toString();\n+    } else {\n+      N = (Long) top;\n+      top = stack.pop();\n+      if (!(top instanceof String)) {\n+        throw new WarpScriptException(getName() + \" expects an ISO8601 duration (a string) in the second level of the stack (see http://en.wikipedia.org/wiki/ISO_8601#Durations).\");\n+      }\n+      duration = top.toString();\n+    }\n+\n+    String tz = null;\n+    if (stack.peek() instanceof String) {\n+      tz = stack.pop().toString();\n+      if (!(stack.peek() instanceof Long)) {\n+        throw new WarpScriptException(getName() + \" operates on a tselements list, timestamp, or timestamp and timezone.\");\n+      }\n+    } else if (!(stack.peek() instanceof List || stack.peek() instanceof Long)) {\n+      throw new WarpScriptException(getName() + \" operates on a tselements list, timestamp, or timestamp and timezone.\");\n+    }\n+\n+    //\n+    // Handle duration\n+    //\n+\n+    // Separate seconds from  digits below second precision\n+    String[] tokens = UnsafeString.split(duration, '.');\n+\n+    long offset = 0;\n+    if (tokens.length > 2) {\n+      throw new WarpScriptException(getName() + \"received an invalid ISO8601 duration.\");\n+    }\n+\n+    if (2 == tokens.length) {\n+      duration = tokens[0].concat(\"S\");\n+      String tmp = tokens[1].substring(0, tokens[1].length() - 1);\n+      Double d_offset = Double.valueOf(\"0.\" + tmp) * new Double(Constants.TIME_UNITS_PER_S);", "originalCommit": "7470d2eab39f9470677dad61e166b501f8716215", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "0b67ec4d1f8ac4a58835832f68cb65170eff9065", "url": "https://github.com/senx/warp10-platform/commit/0b67ec4d1f8ac4a58835832f68cb65170eff9065", "message": "create Double constant STU once", "committedDate": "2020-01-24T14:34:50Z", "type": "commit"}, {"oid": "94f8483cd7eae77144c82ac5828401b8b5fb4ed6", "url": "https://github.com/senx/warp10-platform/commit/94f8483cd7eae77144c82ac5828401b8b5fb4ed6", "message": "Merge branch 'master' of github.com:senx/warp10-platform into ADDDURATION", "committedDate": "2020-01-24T15:10:28Z", "type": "commit"}]}