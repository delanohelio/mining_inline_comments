{"pr_number": 3528, "pr_title": "#3524 Convert SpinnerLanguagesAdapter to kotlin - converted to kotlin", "pr_createdAt": "2020-03-16T14:40:09Z", "pr_url": "https://github.com/commons-app/apps-android-commons/pull/3528", "timeline": [{"oid": "0a0140ecfb403ca009db9cb23ee6b3aa0db4c5ff", "url": "https://github.com/commons-app/apps-android-commons/commit/0a0140ecfb403ca009db9cb23ee6b3aa0db4c5ff", "message": "#3524 Convert SpinnerLanguagesAdapter to kotlin - converted to kotlin", "committedDate": "2020-03-16T14:38:36Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzU0MjYwNA==", "url": "https://github.com/commons-app/apps-android-commons/pull/3528#discussion_r393542604", "bodyText": "Unnecessary whitespace?", "author": "misaochan", "createdAt": "2020-03-17T09:25:00Z", "path": "app/src/main/java/fr/free/nrw/commons/upload/SpinnerLanguagesAdapter.kt", "diffHunk": "@@ -0,0 +1,105 @@\n+package fr.free.nrw.commons.upload\n+\n+import android.content.Context\n+import android.view.LayoutInflater\n+import android.view.View\n+import android.view.ViewGroup\n+import android.widget.ArrayAdapter\n+import androidx.annotation.LayoutRes\n+import androidx.core.os.ConfigurationCompat\n+import fr.free.nrw.commons.R\n+import fr.free.nrw.commons.utils.BiMap\n+import fr.free.nrw.commons.utils.LangCodeUtils\n+import kotlinx.android.extensions.LayoutContainer\n+import kotlinx.android.synthetic.main.row_item_languages_spinner.*\n+import org.apache.commons.lang3.StringUtils\n+import java.util.*\n+\n+class SpinnerLanguagesAdapter constructor(\n+    context: Context,\n+    private val selectedLanguages: BiMap<*, String>\n+) : ArrayAdapter<Any?>(context, -1) {\n+\n+    private val languageNamesList: List<String>\n+    private val languageCodesList: List<String>\n+\n+    init {\n+        val sortedLanguages =\n+            Locale.getAvailableLocales().map(::Language).sortedBy { it.locale.displayName }\n+        languageNamesList = sortedLanguages.map { it.locale.displayName }\n+        languageCodesList = sortedLanguages.map { it.locale.language }\n+    }\n+\n+    var selectedLangCode = \"\"\n+\n+    override fun isEnabled(position: Int) = languageCodesList[position].let {\n+        it.isNotEmpty() && !(selectedLanguages.containsKey(it) || it == selectedLangCode)\n+    }\n+\n+    override fun getCount() = languageNamesList.size\n+\n+    override fun getDropDownView(position: Int, convertView: View?, parent: ViewGroup) =\n+        (convertView ?: parent.inflate(R.layout.row_item_languages_spinner).also {\n+            it.tag = DropDownViewHolder(it)\n+        }).apply {\n+            (tag as DropDownViewHolder).init(\n+                languageCodesList[position],\n+                languageNamesList[position],\n+                selectedLanguages,\n+                selectedLangCode\n+            )\n+        }\n+\n+    override fun getView(position: Int, convertView: View?, parent: ViewGroup) =\n+        (convertView ?: parent.inflate(R.layout.row_item_languages_spinner).also {\n+            it.tag = SpinnerViewHolder(it)\n+        }).apply { (tag as SpinnerViewHolder).init(languageCodesList[position]) }\n+\n+    class SpinnerViewHolder(override val containerView: View) : LayoutContainer {\n+        fun init(languageCode: String) {\n+            LangCodeUtils.fixLanguageCode(languageCode).let {\n+                tv_language.text = if (it.length > 2) it.take(2) else it\n+            }\n+        }\n+    }\n+\n+    class DropDownViewHolder(override val containerView: View) : LayoutContainer {\n+        fun init(\n+            languageCode: String,\n+            languageName: String,\n+            selectedLanguages: BiMap<*, String>,\n+            selectedLangCode: String\n+        ) {\n+            tv_language.isEnabled =\n+                !(selectedLanguages.containsKey(languageCode) && languageCode != selectedLangCode)\n+            if (languageCode.isEmpty()) {\n+                tv_language.text = StringUtils.capitalize(languageName)\n+                tv_language.textAlignment = View.TEXT_ALIGNMENT_CENTER\n+            } else {\n+                tv_language.text =\n+                    \"${StringUtils.capitalize(languageName)}\" +\n+                            \" [${LangCodeUtils.fixLanguageCode(languageCode)}]\"\n+            }\n+", "originalCommit": "0a0140ecfb403ca009db9cb23ee6b3aa0db4c5ff", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzU0MzgzMw==", "url": "https://github.com/commons-app/apps-android-commons/pull/3528#discussion_r393543833", "bodyText": "Could we get Javadocs for new classes please? They should definitely have been in the original to begin with, but we have to start somewhere - if we are rewriting an entire class I think it is a good time to start including Javadocs as well.", "author": "misaochan", "createdAt": "2020-03-17T09:26:57Z", "path": "app/src/main/java/fr/free/nrw/commons/upload/SpinnerLanguagesAdapter.kt", "diffHunk": "@@ -0,0 +1,105 @@\n+package fr.free.nrw.commons.upload\n+\n+import android.content.Context\n+import android.view.LayoutInflater\n+import android.view.View\n+import android.view.ViewGroup\n+import android.widget.ArrayAdapter\n+import androidx.annotation.LayoutRes\n+import androidx.core.os.ConfigurationCompat\n+import fr.free.nrw.commons.R\n+import fr.free.nrw.commons.utils.BiMap\n+import fr.free.nrw.commons.utils.LangCodeUtils\n+import kotlinx.android.extensions.LayoutContainer\n+import kotlinx.android.synthetic.main.row_item_languages_spinner.*\n+import org.apache.commons.lang3.StringUtils\n+import java.util.*\n+", "originalCommit": "0a0140ecfb403ca009db9cb23ee6b3aa0db4c5ff", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzU3NzEzNQ==", "url": "https://github.com/commons-app/apps-android-commons/pull/3528#discussion_r393577135", "bodyText": "Is this satisfactory? I would never have written javadocs for any sustained length of time as every company I have worked in loathed them", "author": "macgills", "createdAt": "2020-03-17T10:24:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzU0MzgzMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzU5OTY5Ng==", "url": "https://github.com/commons-app/apps-android-commons/pull/3528#discussion_r393599696", "bodyText": "Yes, thank you! :)", "author": "misaochan", "createdAt": "2020-03-17T11:06:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzU0MzgzMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzU0Mzk3MA==", "url": "https://github.com/commons-app/apps-android-commons/pull/3528#discussion_r393543970", "bodyText": "Unnecessary whitespace?", "author": "misaochan", "createdAt": "2020-03-17T09:27:12Z", "path": "app/src/main/java/fr/free/nrw/commons/upload/SpinnerLanguagesAdapter.kt", "diffHunk": "@@ -0,0 +1,105 @@\n+package fr.free.nrw.commons.upload\n+\n+import android.content.Context\n+import android.view.LayoutInflater\n+import android.view.View\n+import android.view.ViewGroup\n+import android.widget.ArrayAdapter\n+import androidx.annotation.LayoutRes\n+import androidx.core.os.ConfigurationCompat\n+import fr.free.nrw.commons.R\n+import fr.free.nrw.commons.utils.BiMap\n+import fr.free.nrw.commons.utils.LangCodeUtils\n+import kotlinx.android.extensions.LayoutContainer\n+import kotlinx.android.synthetic.main.row_item_languages_spinner.*\n+import org.apache.commons.lang3.StringUtils\n+import java.util.*\n+\n+class SpinnerLanguagesAdapter constructor(\n+    context: Context,\n+    private val selectedLanguages: BiMap<*, String>\n+) : ArrayAdapter<Any?>(context, -1) {\n+\n+    private val languageNamesList: List<String>\n+    private val languageCodesList: List<String>\n+\n+    init {\n+        val sortedLanguages =\n+            Locale.getAvailableLocales().map(::Language).sortedBy { it.locale.displayName }\n+        languageNamesList = sortedLanguages.map { it.locale.displayName }\n+        languageCodesList = sortedLanguages.map { it.locale.language }\n+    }\n+\n+    var selectedLangCode = \"\"\n+\n+    override fun isEnabled(position: Int) = languageCodesList[position].let {\n+        it.isNotEmpty() && !(selectedLanguages.containsKey(it) || it == selectedLangCode)\n+    }\n+\n+    override fun getCount() = languageNamesList.size\n+\n+    override fun getDropDownView(position: Int, convertView: View?, parent: ViewGroup) =\n+        (convertView ?: parent.inflate(R.layout.row_item_languages_spinner).also {\n+            it.tag = DropDownViewHolder(it)\n+        }).apply {\n+            (tag as DropDownViewHolder).init(\n+                languageCodesList[position],\n+                languageNamesList[position],\n+                selectedLanguages,\n+                selectedLangCode\n+            )\n+        }\n+\n+    override fun getView(position: Int, convertView: View?, parent: ViewGroup) =\n+        (convertView ?: parent.inflate(R.layout.row_item_languages_spinner).also {\n+            it.tag = SpinnerViewHolder(it)\n+        }).apply { (tag as SpinnerViewHolder).init(languageCodesList[position]) }\n+\n+    class SpinnerViewHolder(override val containerView: View) : LayoutContainer {\n+        fun init(languageCode: String) {\n+            LangCodeUtils.fixLanguageCode(languageCode).let {\n+                tv_language.text = if (it.length > 2) it.take(2) else it\n+            }\n+        }\n+    }\n+\n+    class DropDownViewHolder(override val containerView: View) : LayoutContainer {\n+        fun init(\n+            languageCode: String,\n+            languageName: String,\n+            selectedLanguages: BiMap<*, String>,\n+            selectedLangCode: String\n+        ) {\n+            tv_language.isEnabled =\n+                !(selectedLanguages.containsKey(languageCode) && languageCode != selectedLangCode)\n+            if (languageCode.isEmpty()) {\n+                tv_language.text = StringUtils.capitalize(languageName)\n+                tv_language.textAlignment = View.TEXT_ALIGNMENT_CENTER\n+            } else {\n+                tv_language.text =\n+                    \"${StringUtils.capitalize(languageName)}\" +\n+                            \" [${LangCodeUtils.fixLanguageCode(languageCode)}]\"\n+            }\n+\n+        }\n+    }\n+\n+    fun getLanguageCode(position: Int): String {\n+        return languageCodesList[position]\n+    }\n+\n+    fun getIndexOfUserDefaultLocale(context: Context): Int {\n+        return languageCodesList.indexOf(context.locale.language)\n+    }\n+\n+    fun getIndexOfLanguageCode(languageCode: String): Int {\n+        return languageCodesList.indexOf(languageCode)\n+    }\n+", "originalCommit": "0a0140ecfb403ca009db9cb23ee6b3aa0db4c5ff", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzU0NTA0OA==", "url": "https://github.com/commons-app/apps-android-commons/pull/3528#discussion_r393545048", "bodyText": "Does our codestyle mandate a specific line length? I find that this sort of formatting tends to hinder readability instead of helping it, but if the codestyle itself specifies this then I could be wrong.", "author": "misaochan", "createdAt": "2020-03-17T09:28:56Z", "path": "app/src/main/java/fr/free/nrw/commons/upload/SpinnerLanguagesAdapter.kt", "diffHunk": "@@ -0,0 +1,105 @@\n+package fr.free.nrw.commons.upload\n+\n+import android.content.Context\n+import android.view.LayoutInflater\n+import android.view.View\n+import android.view.ViewGroup\n+import android.widget.ArrayAdapter\n+import androidx.annotation.LayoutRes\n+import androidx.core.os.ConfigurationCompat\n+import fr.free.nrw.commons.R\n+import fr.free.nrw.commons.utils.BiMap\n+import fr.free.nrw.commons.utils.LangCodeUtils\n+import kotlinx.android.extensions.LayoutContainer\n+import kotlinx.android.synthetic.main.row_item_languages_spinner.*\n+import org.apache.commons.lang3.StringUtils\n+import java.util.*\n+\n+class SpinnerLanguagesAdapter constructor(\n+    context: Context,\n+    private val selectedLanguages: BiMap<*, String>\n+) : ArrayAdapter<Any?>(context, -1) {\n+\n+    private val languageNamesList: List<String>\n+    private val languageCodesList: List<String>\n+\n+    init {\n+        val sortedLanguages =\n+            Locale.getAvailableLocales().map(::Language).sortedBy { it.locale.displayName }", "originalCommit": "0a0140ecfb403ca009db9cb23ee6b3aa0db4c5ff", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzU1MzYwMg==", "url": "https://github.com/commons-app/apps-android-commons/pull/3528#discussion_r393553602", "bodyText": "Codestyle specifies it, link", "author": "macgills", "createdAt": "2020-03-17T09:43:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzU0NTA0OA=="}], "type": "inlineReview"}, {"oid": "81096dc9628e632d4d2cc2c89133c570b1ef8769", "url": "https://github.com/commons-app/apps-android-commons/commit/81096dc9628e632d4d2cc2c89133c570b1ef8769", "message": "#3524 Convert SpinnerLanguagesAdapter to kotlin - add KDoc - rework logic - format", "committedDate": "2020-03-17T10:22:54Z", "type": "commit"}]}