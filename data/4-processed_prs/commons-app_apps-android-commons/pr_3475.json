{"pr_number": 3475, "pr_title": "Added AboutActivityTest", "pr_createdAt": "2020-03-09T01:39:42Z", "pr_url": "https://github.com/commons-app/apps-android-commons/pull/3475", "timeline": [{"oid": "e4aa049d141b6c0d3f61e1d167b2caab8702319a", "url": "https://github.com/commons-app/apps-android-commons/commit/e4aa049d141b6c0d3f61e1d167b2caab8702319a", "message": "Added AboutActivityTest", "committedDate": "2020-03-09T01:37:20Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA0ODA2Mw==", "url": "https://github.com/commons-app/apps-android-commons/pull/3475#discussion_r390048063", "bodyText": "Why is the package name com.android.vending?", "author": "maskaravivek", "createdAt": "2020-03-10T01:31:38Z", "path": "app/src/main/java/fr/free/nrw/commons/Urls.kt", "diffHunk": "@@ -7,6 +7,9 @@ internal object Urls {\n     const val CREDITS_URL = \"https://github.com/commons-app/apps-android-commons/blob/master/CREDITS\"\n     const val FAQ_URL = \"https://github.com/commons-app/apps-android-commons/wiki/Frequently-Asked-Questions\"\n     const val PLAY_STORE_URL = \"https://play.google.com/store/apps/details?id=fr.free.nrw.commons\"\n+    const val PLAY_STORE_PREFIX = \"market://details?id=\"\n+    const val PLAY_STORE_URL_PREFIX = \"https://play.google.com/store/apps/details?id=\"\n+    const val PLAY_STORE_PACKAGE_NAME = \"com.android.vending\"", "originalCommit": "e4aa049d141b6c0d3f61e1d167b2caab8702319a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDcwNTExMQ==", "url": "https://github.com/commons-app/apps-android-commons/pull/3475#discussion_r390705111", "bodyText": "@madhurgupta10 Can you address this comment?", "author": "maskaravivek", "createdAt": "2020-03-11T01:51:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA0ODA2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDgxMjkwOQ==", "url": "https://github.com/commons-app/apps-android-commons/pull/3475#discussion_r390812909", "bodyText": "@maskaravivek I am unable to extract the PLAY STORE package name using context.\nInstrumentationRegistry.getInstrumentation().getTargetContext()\n\nonly gives the app package name.", "author": "madhurgupta10", "createdAt": "2020-03-11T08:36:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA0ODA2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDg4Nzk3OQ==", "url": "https://github.com/commons-app/apps-android-commons/pull/3475#discussion_r390887979", "bodyText": "@macgills Could you please suggest an alternative to Hardcoded Play Store Package name?", "author": "madhurgupta10", "createdAt": "2020-03-11T10:51:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA0ODA2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDg4ODc3MA==", "url": "https://github.com/commons-app/apps-android-commons/pull/3475#discussion_r390888770", "bodyText": "This is fine, that is the package of the play store or at least so my memory tells me", "author": "macgills", "createdAt": "2020-03-11T10:53:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA0ODA2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDg4OTQ4NA==", "url": "https://github.com/commons-app/apps-android-commons/pull/3475#discussion_r390889484", "bodyText": "But also I don't know why you are using it? Does aboutActivity send an intent with this constant in it? I don't see an update to AboutActivity to use this constant", "author": "macgills", "createdAt": "2020-03-11T10:54:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA0ODA2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDg5NTEwOA==", "url": "https://github.com/commons-app/apps-android-commons/pull/3475#discussion_r390895108", "bodyText": "@macgills I am using it because I need to check if the app actually opens the play store or not.", "author": "madhurgupta10", "createdAt": "2020-03-11T11:04:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA0ODA2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDg5NzQ4OQ==", "url": "https://github.com/commons-app/apps-android-commons/pull/3475#discussion_r390897489", "bodyText": "I bet you don't need it\n        Intents.intended(CoreMatchers.anyOf(IntentMatchers.toPackage(Urls.PLAY_STORE_PACKAGE_NAME),\n                IntentMatchers.hasData(\"${Urls.PLAY_STORE_URL_PREFIX}$appPackageName\")))\n\nThe intent doesn't magically get filled with a package we don't put in it, anyOf is just masking it. Delete hasData and I would say this will fail", "author": "macgills", "createdAt": "2020-03-11T11:09:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA0ODA2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDkyNTYwMg==", "url": "https://github.com/commons-app/apps-android-commons/pull/3475#discussion_r390925602", "bodyText": "anyOf is just masking it. Delete hasData and I would say this will fail\n\n@macgills The test passes for me when I removed the hasData and tested it with only toPackage", "author": "madhurgupta10", "createdAt": "2020-03-11T12:07:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA0ODA2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDkzOTQ1MQ==", "url": "https://github.com/commons-app/apps-android-commons/pull/3475#discussion_r390939451", "bodyText": "That is very odd. Ahhh I see my mistake\n\nMatches an intent based on the package of activity which can handle the intent.\n\nI wouldn't bother testing this, I would more assert that we have the right parameters. This is more useful in an e2e black box test scenario. Harcdoding another app's package also makes me nervous", "author": "macgills", "createdAt": "2020-03-11T12:36:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA0ODA2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk0NjA4NQ==", "url": "https://github.com/commons-app/apps-android-commons/pull/3475#discussion_r390946085", "bodyText": "@macgills Okay I will remove this also from Facebook Test!", "author": "madhurgupta10", "createdAt": "2020-03-11T12:48:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA0ODA2Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA0ODIwNA==", "url": "https://github.com/commons-app/apps-android-commons/pull/3475#discussion_r390048204", "bodyText": "Lets not hardcode package name. Use context to get current package name.", "author": "maskaravivek", "createdAt": "2020-03-10T01:32:22Z", "path": "app/src/androidTest/java/fr/free/nrw/commons/AboutActivityTest.kt", "diffHunk": "@@ -0,0 +1,116 @@\n+package fr.free.nrw.commons\n+\n+import android.app.Activity\n+import android.app.Instrumentation\n+import android.content.Intent\n+import androidx.test.core.app.ApplicationProvider.getApplicationContext\n+import androidx.test.espresso.Espresso\n+import androidx.test.espresso.action.ViewActions\n+import androidx.test.espresso.assertion.ViewAssertions\n+import androidx.test.espresso.intent.Intents\n+import androidx.test.espresso.intent.matcher.IntentMatchers\n+import androidx.test.espresso.matcher.ViewMatchers\n+import androidx.test.espresso.matcher.ViewMatchers.withText\n+import androidx.test.rule.ActivityTestRule\n+import androidx.test.runner.AndroidJUnit4\n+import fr.free.nrw.commons.utils.ConfigUtils\n+import org.hamcrest.CoreMatchers\n+import org.junit.Before\n+import org.junit.Rule\n+import org.junit.Test\n+import org.junit.runner.RunWith\n+\n+@RunWith(AndroidJUnit4::class)\n+class AboutActivityTest {\n+    @get:Rule\n+    var activityRule: ActivityTestRule<*> = ActivityTestRule(AboutActivity::class.java)\n+\n+    @Before\n+    fun setup() {\n+        Intents.init()\n+        UITestHelper.skipWelcome()\n+        UITestHelper.skipLogin()\n+        Intents.intending(CoreMatchers.not(IntentMatchers.isInternal()))\n+                .respondWith(Instrumentation.ActivityResult(Activity.RESULT_OK, null))\n+    }\n+\n+    @Test\n+    fun testBuildNumber() {\n+        Espresso.onView(ViewMatchers.withId(R.id.about_version))\n+                .check(ViewAssertions.matches(withText(ConfigUtils.getVersionNameWithSha(getApplicationContext()))))\n+    }\n+\n+    @Test\n+    fun testLaunchWebsite() {\n+        Espresso.onView(ViewMatchers.withId(R.id.website_launch_icon)).perform(ViewActions.click())\n+        Intents.intended(CoreMatchers.allOf(IntentMatchers.hasAction(Intent.ACTION_VIEW),\n+                IntentMatchers.hasData(Urls.WEBSITE_URL)))\n+    }\n+\n+    @Test\n+    fun testLaunchFacebook() {\n+        Espresso.onView(ViewMatchers.withId(R.id.facebook_launch_icon)).perform(ViewActions.click())\n+        try {\n+            Intents.intended(CoreMatchers.allOf(IntentMatchers.hasAction(Intent.ACTION_VIEW),\n+                    IntentMatchers.hasPackage(Urls.FACEBOOK_PACKAGE_NAME)))\n+        } catch (e: Exception) {\n+            Intents.intended(CoreMatchers.allOf(IntentMatchers.hasAction(Intent.ACTION_VIEW),\n+                    IntentMatchers.hasData(Urls.FACEBOOK_WEB_URL)))\n+        }\n+    }\n+\n+    @Test\n+    fun testLaunchGithub() {\n+        Espresso.onView(ViewMatchers.withId(R.id.github_launch_icon)).perform(ViewActions.click())\n+        Intents.intended(CoreMatchers.allOf(IntentMatchers.hasAction(Intent.ACTION_VIEW),\n+                IntentMatchers.hasData(Urls.GITHUB_REPO_URL)))\n+    }\n+\n+    @Test\n+    fun testLaunchRateUs() {\n+        val appPackageName = BuildConfig::class.java.getPackage().name\n+        Espresso.onView(ViewMatchers.withId(R.id.about_rate_us)).perform(ViewActions.click())\n+        try {\n+            Intents.intended(CoreMatchers.allOf(IntentMatchers.hasAction(Intent.ACTION_VIEW),\n+                    IntentMatchers.toPackage(Urls.PLAY_STORE_PACKAGE_NAME)))", "originalCommit": "e4aa049d141b6c0d3f61e1d167b2caab8702319a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE2NjkzNA==", "url": "https://github.com/commons-app/apps-android-commons/pull/3475#discussion_r390166934", "bodyText": "This rule should just launch you to AboutActivity, why do you have to launch the app from the beginning?", "author": "macgills", "createdAt": "2020-03-10T08:53:29Z", "path": "app/src/androidTest/java/fr/free/nrw/commons/AboutActivityTest.kt", "diffHunk": "@@ -0,0 +1,116 @@\n+package fr.free.nrw.commons\n+\n+import android.app.Activity\n+import android.app.Instrumentation\n+import android.content.Intent\n+import androidx.test.core.app.ApplicationProvider.getApplicationContext\n+import androidx.test.espresso.Espresso\n+import androidx.test.espresso.action.ViewActions\n+import androidx.test.espresso.assertion.ViewAssertions\n+import androidx.test.espresso.intent.Intents\n+import androidx.test.espresso.intent.matcher.IntentMatchers\n+import androidx.test.espresso.matcher.ViewMatchers\n+import androidx.test.espresso.matcher.ViewMatchers.withText\n+import androidx.test.rule.ActivityTestRule\n+import androidx.test.runner.AndroidJUnit4\n+import fr.free.nrw.commons.utils.ConfigUtils\n+import org.hamcrest.CoreMatchers\n+import org.junit.Before\n+import org.junit.Rule\n+import org.junit.Test\n+import org.junit.runner.RunWith\n+\n+@RunWith(AndroidJUnit4::class)\n+class AboutActivityTest {\n+    @get:Rule\n+    var activityRule: ActivityTestRule<*> = ActivityTestRule(AboutActivity::class.java)", "originalCommit": "e4aa049d141b6c0d3f61e1d167b2caab8702319a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDMzNjgxNQ==", "url": "https://github.com/commons-app/apps-android-commons/pull/3475#discussion_r390336815", "bodyText": "@macgills Thanks for pointing it out, I thought it was necessary to skip the welcome screen and login screen.", "author": "madhurgupta10", "createdAt": "2020-03-10T14:05:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE2NjkzNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE2ODAxOQ==", "url": "https://github.com/commons-app/apps-android-commons/pull/3475#discussion_r390168019", "bodyText": "generally a test should not be catching exceptions and especially not overly broad ones like Exception", "author": "macgills", "createdAt": "2020-03-10T08:55:26Z", "path": "app/src/androidTest/java/fr/free/nrw/commons/AboutActivityTest.kt", "diffHunk": "@@ -0,0 +1,116 @@\n+package fr.free.nrw.commons\n+\n+import android.app.Activity\n+import android.app.Instrumentation\n+import android.content.Intent\n+import androidx.test.core.app.ApplicationProvider.getApplicationContext\n+import androidx.test.espresso.Espresso\n+import androidx.test.espresso.action.ViewActions\n+import androidx.test.espresso.assertion.ViewAssertions\n+import androidx.test.espresso.intent.Intents\n+import androidx.test.espresso.intent.matcher.IntentMatchers\n+import androidx.test.espresso.matcher.ViewMatchers\n+import androidx.test.espresso.matcher.ViewMatchers.withText\n+import androidx.test.rule.ActivityTestRule\n+import androidx.test.runner.AndroidJUnit4\n+import fr.free.nrw.commons.utils.ConfigUtils\n+import org.hamcrest.CoreMatchers\n+import org.junit.Before\n+import org.junit.Rule\n+import org.junit.Test\n+import org.junit.runner.RunWith\n+\n+@RunWith(AndroidJUnit4::class)\n+class AboutActivityTest {\n+    @get:Rule\n+    var activityRule: ActivityTestRule<*> = ActivityTestRule(AboutActivity::class.java)\n+\n+    @Before\n+    fun setup() {\n+        Intents.init()\n+        UITestHelper.skipWelcome()\n+        UITestHelper.skipLogin()\n+        Intents.intending(CoreMatchers.not(IntentMatchers.isInternal()))\n+                .respondWith(Instrumentation.ActivityResult(Activity.RESULT_OK, null))\n+    }\n+\n+    @Test\n+    fun testBuildNumber() {\n+        Espresso.onView(ViewMatchers.withId(R.id.about_version))\n+                .check(ViewAssertions.matches(withText(ConfigUtils.getVersionNameWithSha(getApplicationContext()))))\n+    }\n+\n+    @Test\n+    fun testLaunchWebsite() {\n+        Espresso.onView(ViewMatchers.withId(R.id.website_launch_icon)).perform(ViewActions.click())\n+        Intents.intended(CoreMatchers.allOf(IntentMatchers.hasAction(Intent.ACTION_VIEW),\n+                IntentMatchers.hasData(Urls.WEBSITE_URL)))\n+    }\n+\n+    @Test\n+    fun testLaunchFacebook() {\n+        Espresso.onView(ViewMatchers.withId(R.id.facebook_launch_icon)).perform(ViewActions.click())\n+        try {\n+            Intents.intended(CoreMatchers.allOf(IntentMatchers.hasAction(Intent.ACTION_VIEW),\n+                    IntentMatchers.hasPackage(Urls.FACEBOOK_PACKAGE_NAME)))\n+        } catch (e: Exception) {\n+            Intents.intended(CoreMatchers.allOf(IntentMatchers.hasAction(Intent.ACTION_VIEW),\n+                    IntentMatchers.hasData(Urls.FACEBOOK_WEB_URL)))\n+        }\n+    }\n+\n+    @Test\n+    fun testLaunchGithub() {\n+        Espresso.onView(ViewMatchers.withId(R.id.github_launch_icon)).perform(ViewActions.click())\n+        Intents.intended(CoreMatchers.allOf(IntentMatchers.hasAction(Intent.ACTION_VIEW),\n+                IntentMatchers.hasData(Urls.GITHUB_REPO_URL)))\n+    }\n+\n+    @Test\n+    fun testLaunchRateUs() {\n+        val appPackageName = BuildConfig::class.java.getPackage().name\n+        Espresso.onView(ViewMatchers.withId(R.id.about_rate_us)).perform(ViewActions.click())\n+        try {\n+            Intents.intended(CoreMatchers.allOf(IntentMatchers.hasAction(Intent.ACTION_VIEW),\n+                    IntentMatchers.toPackage(Urls.PLAY_STORE_PACKAGE_NAME)))\n+        } catch (e: Exception) {", "originalCommit": "e4aa049d141b6c0d3f61e1d167b2caab8702319a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI5Nzc1NQ==", "url": "https://github.com/commons-app/apps-android-commons/pull/3475#discussion_r390297755", "bodyText": "@macgills I used the try-except to handle the different cases just as it was used in the AboutActivity but I believe there should be a better way but I can't find one.", "author": "madhurgupta10", "createdAt": "2020-03-10T13:06:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE2ODAxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDMxNjMwMw==", "url": "https://github.com/commons-app/apps-android-commons/pull/3475#discussion_r390316303", "bodyText": "This is how you can check for an installed application, link but a test shouldn't perform this.\nA test should exist for each flow, ideally you can say in the test beforehand \"report that the playstore isn't installed\". The lack of abstraction in the source will make this difficult to achieve", "author": "macgills", "createdAt": "2020-03-10T13:36:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE2ODAxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDMxODM4MA==", "url": "https://github.com/commons-app/apps-android-commons/pull/3475#discussion_r390318380", "bodyText": "It is ugly as sin but I am pretty sure you can just or EspressoMatchers so do that and avoid the try catch", "author": "macgills", "createdAt": "2020-03-10T13:39:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE2ODAxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDMzNzY3Mg==", "url": "https://github.com/commons-app/apps-android-commons/pull/3475#discussion_r390337672", "bodyText": "@macgills Should I update it to AboutActivity.java also?", "author": "madhurgupta10", "createdAt": "2020-03-10T14:06:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE2ODAxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDM0NTYyNw==", "url": "https://github.com/commons-app/apps-android-commons/pull/3475#discussion_r390345627", "bodyText": "I'd say out of scope, leave it for now", "author": "macgills", "createdAt": "2020-03-10T14:17:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE2ODAxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDM3MjIyNg==", "url": "https://github.com/commons-app/apps-android-commons/pull/3475#discussion_r390372226", "bodyText": "@macgills Can I use anyOf like this\nval appPackageName = BuildConfig::class.java.getPackage().name\n        Espresso.onView(ViewMatchers.withId(R.id.about_rate_us)).perform(ViewActions.click())\n        Intents.intended(IntentMatchers.hasAction(Intent.ACTION_VIEW))\n        Intents.intended(CoreMatchers.anyOf(IntentMatchers.toPackage(Urls.PLAY_STORE_PACKAGE_NAME),\n                IntentMatchers.hasData(\"${Urls.PLAY_STORE_URL_PREFIX}$appPackageName\")))\n\nAlso, regarding @maskaravivek suggestion, I am unable to extract the packageName for play store.", "author": "madhurgupta10", "createdAt": "2020-03-10T14:51:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE2ODAxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDM4NDQ0MA==", "url": "https://github.com/commons-app/apps-android-commons/pull/3475#discussion_r390384440", "bodyText": "Don't get the package name like that InstrumentationRegistry.getInstrumentation().getTargetContext() to get the context then get the package name from the context", "author": "macgills", "createdAt": "2020-03-10T15:06:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE2ODAxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDM5OTU0NQ==", "url": "https://github.com/commons-app/apps-android-commons/pull/3475#discussion_r390399545", "bodyText": "@macgills I have fixed the appPackageName\nBut I am still not able to get the PLAY STORE package name.", "author": "madhurgupta10", "createdAt": "2020-03-10T15:26:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE2ODAxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQwODAwMg==", "url": "https://github.com/commons-app/apps-android-commons/pull/3475#discussion_r390408002", "bodyText": "That is fine to be hardcoded, you just shouldn't hardcode our package name because we can retrieve that", "author": "macgills", "createdAt": "2020-03-10T15:37:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE2ODAxOQ=="}], "type": "inlineReview"}, {"oid": "d0132b10ac78ef926e07665505a0c160077471c5", "url": "https://github.com/commons-app/apps-android-commons/commit/d0132b10ac78ef926e07665505a0c160077471c5", "message": "Changes made as per suggestions", "committedDate": "2020-03-10T19:56:01Z", "type": "commit"}, {"oid": "b3a4b211da5fe04170012f728ab05e44865c5d2b", "url": "https://github.com/commons-app/apps-android-commons/commit/b3a4b211da5fe04170012f728ab05e44865c5d2b", "message": "Removed File to resolve conflict", "committedDate": "2020-03-10T22:21:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDg5MDM0NQ==", "url": "https://github.com/commons-app/apps-android-commons/pull/3475#discussion_r390890345", "bodyText": "oh, this should definitely be changed, it is a bad example that led you astray. context.getPackageName()", "author": "macgills", "createdAt": "2020-03-11T10:55:59Z", "path": "app/src/main/java/fr/free/nrw/commons/Utils.java", "diffHunk": "@@ -117,10 +117,10 @@ public static String fixExtension(String title, String extension) {\n     public static void rateApp(Context context) {\n         final String appPackageName = BuildConfig.class.getPackage().getName();", "originalCommit": "b3a4b211da5fe04170012f728ab05e44865c5d2b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "46ed7109c3213752170eec3c5f7353e51da7b729", "url": "https://github.com/commons-app/apps-android-commons/commit/46ed7109c3213752170eec3c5f7353e51da7b729", "message": "Removed hardcoded packagename", "committedDate": "2020-03-11T13:18:28Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk3MjMxNQ==", "url": "https://github.com/commons-app/apps-android-commons/pull/3475#discussion_r390972315", "bodyText": "hasData was still a valuable test", "author": "macgills", "createdAt": "2020-03-11T13:33:55Z", "path": "app/src/androidTest/java/fr/free/nrw/commons/AboutActivityTest.kt", "diffHunk": "@@ -63,11 +60,8 @@ class AboutActivityTest {\n \n     @Test\n     fun testLaunchRateUs() {\n-        val appPackageName = InstrumentationRegistry.getInstrumentation().targetContext.packageName\n         Espresso.onView(ViewMatchers.withId(R.id.about_rate_us)).perform(ViewActions.click())\n         Intents.intended(IntentMatchers.hasAction(Intent.ACTION_VIEW))\n-        Intents.intended(CoreMatchers.anyOf(IntentMatchers.toPackage(Urls.PLAY_STORE_PACKAGE_NAME),\n-                IntentMatchers.hasData(\"${Urls.PLAY_STORE_URL_PREFIX}$appPackageName\")))", "originalCommit": "46ed7109c3213752170eec3c5f7353e51da7b729", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTAwNTgzOA==", "url": "https://github.com/commons-app/apps-android-commons/pull/3475#discussion_r391005838", "bodyText": "@macgills This actually fails the test if the app is installed on the device because then the browser will not launch.", "author": "madhurgupta10", "createdAt": "2020-03-11T14:21:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk3MjMxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTAxOTA0Mg==", "url": "https://github.com/commons-app/apps-android-commons/pull/3475#discussion_r391019042", "bodyText": "We want to be asserting hasData whether it be for the playstore or for the browser, you can use anyOf(hasData(playStore), hasData(browser))", "author": "macgills", "createdAt": "2020-03-11T14:39:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk3MjMxNQ=="}], "type": "inlineReview"}, {"oid": "a43dda4251c063deb127baf1df4aa3bc150b412c", "url": "https://github.com/commons-app/apps-android-commons/commit/a43dda4251c063deb127baf1df4aa3bc150b412c", "message": "Changes as per suggestion", "committedDate": "2020-03-11T16:27:47Z", "type": "commit"}, {"oid": "8713ea077f4e5c841de02c84e23ad61df46bf9da", "url": "https://github.com/commons-app/apps-android-commons/commit/8713ea077f4e5c841de02c84e23ad61df46bf9da", "message": "Removed Unrelated changes", "committedDate": "2020-03-11T17:13:16Z", "type": "commit"}, {"oid": "18917da1ecb65e43ea3d9aa3815f837e0c4347c0", "url": "https://github.com/commons-app/apps-android-commons/commit/18917da1ecb65e43ea3d9aa3815f837e0c4347c0", "message": "Fixed Build Issues", "committedDate": "2020-03-11T21:32:24Z", "type": "commit"}]}