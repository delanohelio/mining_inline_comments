{"pr_number": 3324, "pr_title": "Shift contributions to use Room DB", "pr_createdAt": "2020-01-13T06:12:58Z", "pr_url": "https://github.com/commons-app/apps-android-commons/pull/3324", "timeline": [{"oid": "9e0b8f0377d8578fd552d1ddf7aab6af894638c7", "url": "https://github.com/commons-app/apps-android-commons/commit/9e0b8f0377d8578fd552d1ddf7aab6af894638c7", "message": "Part of #3127\n* Added Room Dependency\n* Shifted ContributionsDao to use RoomDB", "committedDate": "2020-01-13T06:09:19Z", "type": "commit"}, {"oid": "d37148ea98c42a7639bf2d0644578ebbcb1f8235", "url": "https://github.com/commons-app/apps-android-commons/commit/d37148ea98c42a7639bf2d0644578ebbcb1f8235", "message": "Sync with master", "committedDate": "2020-02-04T09:21:23Z", "type": "commit"}, {"oid": "3d547749d4b97e57eeecae94482b5baf839399fa", "url": "https://github.com/commons-app/apps-android-commons/commit/3d547749d4b97e57eeecae94482b5baf839399fa", "message": "Save and Fetch contributions via RoomDAO", "committedDate": "2020-02-04T16:37:14Z", "type": "commit"}, {"oid": "899885ccbde6d67820727ff486db8a61a87389b1", "url": "https://github.com/commons-app/apps-android-commons/commit/899885ccbde6d67820727ff486db8a61a87389b1", "message": "Bugfixes, fixed test cases, injected schedulers for ContributionsPresenter", "committedDate": "2020-02-23T15:20:13Z", "type": "commit"}, {"oid": "ac33ee6b25e12c438871b4de04183c4c1b623fcf", "url": "https://github.com/commons-app/apps-android-commons/commit/ac33ee6b25e12c438871b4de04183c4c1b623fcf", "message": "removed stetho", "committedDate": "2020-02-23T15:22:40Z", "type": "commit"}, {"oid": "d31fbfc7524a58ed9f08d70a0c418c40d67a9949", "url": "https://github.com/commons-app/apps-android-commons/commit/d31fbfc7524a58ed9f08d70a0c418c40d67a9949", "message": "Fixed ReviewHelperTest cases", "committedDate": "2020-02-23T17:10:02Z", "type": "commit"}, {"oid": "5e060bd041e9b718d204bf0c3995492ab1c8dae4", "url": "https://github.com/commons-app/apps-android-commons/commit/5e060bd041e9b718d204bf0c3995492ab1c8dae4", "message": "Fixed test cases in DeleteHelperTest", "committedDate": "2020-02-23T17:31:38Z", "type": "commit"}, {"oid": "85d99a005ee7a0533af8effaecf61c924b273711", "url": "https://github.com/commons-app/apps-android-commons/commit/85d99a005ee7a0533af8effaecf61c924b273711", "message": "Fetch all contributions [TODO add pagination to use this, maybe later in a seperate PR]", "committedDate": "2020-02-23T19:47:15Z", "type": "commit"}, {"oid": "37f17b6fd462774ff019406f4708ed2a33ac07f0", "url": "https://github.com/commons-app/apps-android-commons/commit/37f17b6fd462774ff019406f4708ed2a33ac07f0", "message": "Update Schema false in AppDatabase", "committedDate": "2020-02-24T10:26:40Z", "type": "commit"}, {"oid": "509ea4359315247299a37f804dda6df0d483d11d", "url": "https://github.com/commons-app/apps-android-commons/commit/509ea4359315247299a37f804dda6df0d483d11d", "message": "removed parameter from fetchControbutions", "committedDate": "2020-02-24T12:37:42Z", "type": "commit"}, {"oid": "c8962a21cc94c412f57b110a8f96dd5bac9076a3", "url": "https://github.com/commons-app/apps-android-commons/commit/c8962a21cc94c412f57b110a8f96dd5bac9076a3", "message": "Merge branch 'master' into refactor/contributions-to-room", "committedDate": "2020-02-24T15:46:27Z", "type": "commit"}, {"oid": "1424776132b7200735c82c64af7267198648b152", "url": "https://github.com/commons-app/apps-android-commons/commit/1424776132b7200735c82c64af7267198648b152", "message": "Added logs for fetch contributions", "committedDate": "2020-02-24T15:54:54Z", "type": "commit"}, {"oid": "6a5224114dffb606c1a2622a5282e9f19164e4c1", "url": "https://github.com/commons-app/apps-android-commons/commit/6a5224114dffb606c1a2622a5282e9f19164e4c1", "message": "Fixed test case ContributionsPresenter", "committedDate": "2020-02-24T16:07:51Z", "type": "commit"}, {"oid": "e7140e1a2f5161b1f41181db4e43213b2faf3bb8", "url": "https://github.com/commons-app/apps-android-commons/commit/e7140e1a2f5161b1f41181db4e43213b2faf3bb8", "message": "Added an autogenerate primary key, submit save contributions on executor", "committedDate": "2020-02-24T16:50:05Z", "type": "commit"}, {"oid": "2714df2e0b01c68e277eadc89423533b440612c8", "url": "https://github.com/commons-app/apps-android-commons/commit/2714df2e0b01c68e277eadc89423533b440612c8", "message": " fixed getItemAtPosition", "committedDate": "2020-02-24T17:05:43Z", "type": "commit"}, {"oid": "9d995278cb04a278f7f566d2f48eb6a4253b93fe", "url": "https://github.com/commons-app/apps-android-commons/commit/9d995278cb04a278f7f566d2f48eb6a4253b93fe", "message": "MainActivity Config changes +=orientation", "committedDate": "2020-02-25T07:24:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzAwODczNQ==", "url": "https://github.com/commons-app/apps-android-commons/pull/3324#discussion_r387008735", "bodyText": "I wouldn't do this, it is generally just lying to yourself about things working", "author": "macgills", "createdAt": "2020-03-03T13:12:23Z", "path": "app/src/main/AndroidManifest.xml", "diffHunk": "@@ -78,7 +78,7 @@\n             android:name=\".contributions.MainActivity\"\n             android:icon=\"@mipmap/ic_launcher\"\n             android:label=\"@string/app_name\"\n-            android:configChanges=\"screenSize|keyboard\" />\n+            android:configChanges=\"screenSize|keyboard|orientation\" />", "originalCommit": "9d995278cb04a278f7f566d2f48eb6a4253b93fe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ1NDA3Mw==", "url": "https://github.com/commons-app/apps-android-commons/pull/3324#discussion_r387454073", "bodyText": "With the way things are currently, if not this, a lot of implementations will need to be changed, which I think is beyond a scope of this PR, I do understand what you are saying, but I think we can create a separate issue for this, which would need a refactor of MediaDetailsFragment, which as of now is not independent.", "author": "ashishkumar468", "createdAt": "2020-03-04T05:21:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzAwODczNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzUyODQ2Mg==", "url": "https://github.com/commons-app/apps-android-commons/pull/3324#discussion_r387528462", "bodyText": "Code like this hides issues like this #3458 , so there are already issues to fix this.\nI was only saying to get rid of the orientation addition, if you needed to add it to make Room work then that makes no sense to me.", "author": "macgills", "createdAt": "2020-03-04T09:02:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzAwODczNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzUzMDU4MA==", "url": "https://github.com/commons-app/apps-android-commons/pull/3324#discussion_r387530580", "bodyText": "I totally understand this and of course, room does not need the orientation thing, it's that, the MediaDetailsFragment is not completely independent, it needs a provider to show media details which we loose on orientation changes, and can be solved in a separate PR, not necessarily as a part of this PR which already includes some major changes", "author": "ashishkumar468", "createdAt": "2020-03-04T09:06:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzAwODczNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg2NzQzMw==", "url": "https://github.com/commons-app/apps-android-commons/pull/3324#discussion_r387867433", "bodyText": "Also, there is a crash on master on orientation changes, which can be easily handled by this (of-course there are better ways), but this is the only one requiring the minimal amount of change. I am sure someone will pick this up, but as I said before fixing that is beyond the scope of this PR.", "author": "ashishkumar468", "createdAt": "2020-03-04T18:56:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzAwODczNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE3NjYxOA==", "url": "https://github.com/commons-app/apps-android-commons/pull/3324#discussion_r388176618", "bodyText": "There is a crash on master #3458 if it ever gets recreated. It is not about orientation. This doesn't make it better and we will not be releasing without fixing this bug. This ticket isn't about applying this bandaid so I would remove it but I am happy to let it slide, and then we remove this line whenever we fix it.", "author": "macgills", "createdAt": "2020-03-05T09:38:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzAwODczNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE3OTkyNw==", "url": "https://github.com/commons-app/apps-android-commons/pull/3324#discussion_r388179927", "bodyText": "I was not referring to this crash, the existing master is crashing on changing the device's orientation, in MediaDetailsFragment, this thing was previously there, \"configChanges=\"*|orientation\" and got removed in one of the PR's (probably mine), that's why I readded this so that at least the build is stable. I agree with your logic that there should be a better way to handle this but all I am saying that a separate issue should be created and it should be taken up from there", "author": "ashishkumar468", "createdAt": "2020-03-05T09:44:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzAwODczNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE5NzI0NQ==", "url": "https://github.com/commons-app/apps-android-commons/pull/3324#discussion_r388197245", "bodyText": "Yeah, I am marking this resolved, will be fixed later", "author": "macgills", "createdAt": "2020-03-05T10:15:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzAwODczNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzAyOTI0OQ==", "url": "https://github.com/commons-app/apps-android-commons/pull/3324#discussion_r387029249", "bodyText": "versions should be specified in gradle.properteries and be in CONSTANT_CASE", "author": "macgills", "createdAt": "2020-03-03T13:48:31Z", "path": "app/build.gradle", "diffHunk": "@@ -102,7 +102,14 @@ dependencies {\n \n     //swipe_layout\n     implementation 'com.daimajia.swipelayout:library:1.2.0@aar'\n+\n+    //Room\n+    def room_version= '2.2.3'", "originalCommit": "9d995278cb04a278f7f566d2f48eb6a4253b93fe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzgzMjI0OA==", "url": "https://github.com/commons-app/apps-android-commons/pull/3324#discussion_r387832248", "bodyText": "I could not find any such thing in the developer docs, based on the project scope it could be in the project's build.gradle or app's build.gradle, can you share relevant doc links for the same", "author": "ashishkumar468", "createdAt": "2020-03-04T17:50:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzAyOTI0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE3NDM0Ng==", "url": "https://github.com/commons-app/apps-android-commons/pull/3324#discussion_r388174346", "bodyText": "I am following the example of the project. I don't see any other dependency declared like this but I do see leakcanary, dagger, kotlin & butterknife declared in gradle.properties.\nIt also just so happens that gradle.properties is the best place to put them, particularly in a multi module project.", "author": "macgills", "createdAt": "2020-03-05T09:34:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzAyOTI0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE3NTA5Nw==", "url": "https://github.com/commons-app/apps-android-commons/pull/3324#discussion_r388175097", "bodyText": "@seannemann21 AFAIK, for multi-module projects, project-level build.gradle should be the place for such things", "author": "ashishkumar468", "createdAt": "2020-03-05T09:36:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzAyOTI0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE5OTIxMQ==", "url": "https://github.com/commons-app/apps-android-commons/pull/3324#discussion_r388199211", "bodyText": "No, best practise advice is to configure your projects using a precompiled script or a plugin in your buildsrc folder. The best place to keep your version numbers is in gradle.properties, buildsrc is a bit annoying becuse any change in there cause a recompilation of the entire project.\nUse buildsrc\nProper versioning and great library", "author": "macgills", "createdAt": "2020-03-05T10:19:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzAyOTI0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIwMTQwMg==", "url": "https://github.com/commons-app/apps-android-commons/pull/3324#discussion_r388201402", "bodyText": "Okay, well that would need pulling out other dependencies from project build.gradle and app build.gradle as well, right?, Should we not create a separate issue for the same and take it from there?", "author": "ashishkumar468", "createdAt": "2020-03-05T10:23:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzAyOTI0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIxMzA1OQ==", "url": "https://github.com/commons-app/apps-android-commons/pull/3324#discussion_r388213059", "bodyText": "Perhaps, but I am reviewing this addition. If you define a version put it in gradle.properties with the rest of them, as is evidently project style.", "author": "macgills", "createdAt": "2020-03-05T10:43:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzAyOTI0OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzAzODY2Nw==", "url": "https://github.com/commons-app/apps-android-commons/pull/3324#discussion_r387038667", "bodyText": "how could contributions be null? Create it at the field level if you want. It should also be final.\nThere are minor style violations in this file, no spaces around operators", "author": "macgills", "createdAt": "2020-03-03T14:03:41Z", "path": "app/src/main/java/fr/free/nrw/commons/contributions/ContributionsListAdapter.java", "diffHunk": "@@ -35,15 +40,23 @@ public ContributionViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int\n \n     @Override\n     public void onBindViewHolder(@NonNull ContributionViewHolder holder, int position) {\n-        final Contribution contribution = callback.getContributionForPosition(position);\n+        final Contribution contribution = contributions.get(position);\n         DisplayableContribution displayableContribution = new DisplayableContribution(contribution,\n                 position);\n         holder.init(position, displayableContribution);\n     }\n \n     @Override\n     public int getItemCount() {\n-        return callback.getNumberOfContributions();\n+        return contributions==null?0:contributions.size();", "originalCommit": "9d995278cb04a278f7f566d2f48eb6a4253b93fe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzgzMzg1Nw==", "url": "https://github.com/commons-app/apps-android-commons/pull/3324#discussion_r387833857", "bodyText": "Done", "author": "ashishkumar468", "createdAt": "2020-03-04T17:54:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzAzODY2Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzAzOTI4OQ==", "url": "https://github.com/commons-app/apps-android-commons/pull/3324#discussion_r387039289", "bodyText": "if all this does is call super then it is unnecessary and can be deleted", "author": "macgills", "createdAt": "2020-03-03T14:04:45Z", "path": "app/src/main/java/fr/free/nrw/commons/contributions/ContributionsListFragment.java", "diffHunk": "@@ -72,6 +74,12 @@\n     private String lastVisibleItemID;\n \n     private int SPAN_COUNT=3;\n+    private List<Contribution> contributions;\n+\n+    @Override\n+    public void onCreate(@Nullable Bundle savedInstanceState) {", "originalCommit": "9d995278cb04a278f7f566d2f48eb6a4253b93fe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzgzNDYxNA==", "url": "https://github.com/commons-app/apps-android-commons/pull/3324#discussion_r387834614", "bodyText": "Done", "author": "ashishkumar468", "createdAt": "2020-03-04T17:55:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzAzOTI4OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzAzOTkxNg==", "url": "https://github.com/commons-app/apps-android-commons/pull/3324#discussion_r387039916", "bodyText": "This is essentially a no-op, can be deleted", "author": "macgills", "createdAt": "2020-03-03T14:05:43Z", "path": "app/src/main/java/fr/free/nrw/commons/contributions/ContributionsListFragment.java", "diffHunk": "@@ -104,6 +112,7 @@ private void initRecyclerView() {\n         }\n \n         rvContributionsList.setAdapter(adapter);\n+        adapter.setContributions(contributions);", "originalCommit": "9d995278cb04a278f7f566d2f48eb6a4253b93fe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg1MTIxOA==", "url": "https://github.com/commons-app/apps-android-commons/pull/3324#discussion_r387851218", "bodyText": "set contributions is not always called, with the existing-current implementation, it is only called the first time or after the threshold for the fetch-contributions timestamp has passed, not maintaining a local copy with the fragment would leave it's adapter with empty list of contributions on recreations and that is why this is nescessary", "author": "ashishkumar468", "createdAt": "2020-03-04T18:26:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzAzOTkxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE4NTM5Mw==", "url": "https://github.com/commons-app/apps-android-commons/pull/3324#discussion_r388185393", "bodyText": "This is an empty list, it will always be an empty list at this moment in time. You do not persist this list in the bundle. It is a no-op.", "author": "macgills", "createdAt": "2020-03-05T09:54:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzAzOTkxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE4NTg3Nw==", "url": "https://github.com/commons-app/apps-android-commons/pull/3324#discussion_r388185877", "bodyText": "It will not always be empty, setContributions adds value to this list", "author": "ashishkumar468", "createdAt": "2020-03-05T09:55:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzAzOTkxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIwOTE3OQ==", "url": "https://github.com/commons-app/apps-android-commons/pull/3324#discussion_r388209179", "bodyText": "it will always be an empty list at this moment in time.\n\nThere is one scenario, if the fragment doesn't actually get destroyed.\n\nHow is the adapter losing the data but this list isn't? maybe that problem should be addressed", "author": "macgills", "createdAt": "2020-03-05T10:37:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzAzOTkxNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA0MDMwMw==", "url": "https://github.com/commons-app/apps-android-commons/pull/3324#discussion_r387040303", "bodyText": "delete this line and the field", "author": "macgills", "createdAt": "2020-03-03T14:06:20Z", "path": "app/src/main/java/fr/free/nrw/commons/contributions/ContributionsListFragment.java", "diffHunk": "@@ -178,16 +187,9 @@ public void showNoContributionsUI(boolean shouldShow) {\n         noContributionsYet.setVisibility(shouldShow ? VISIBLE : GONE);\n     }\n \n-    public void onDataSetChanged() {\n-        if (null != adapter) {\n-            adapter.notifyDataSetChanged();\n-            //Restoring last visible item position in cases of orientation change\n-            if (null != lastVisibleItemID) {\n-                int itemPositionWithId = callback.findItemPositionWithId(lastVisibleItemID);\n-                rvContributionsList.scrollToPosition(itemPositionWithId);\n-                lastVisibleItemID = null;//Reset the lastVisibleItemID once we have used it\n-            }\n-        }\n+    public void setContributions(List<Contribution> contributionList) {\n+        this.contributions=contributionList;", "originalCommit": "9d995278cb04a278f7f566d2f48eb6a4253b93fe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg1MTM3Ng==", "url": "https://github.com/commons-app/apps-android-commons/pull/3324#discussion_r387851376", "bodyText": "Please refer the comment above", "author": "ashishkumar468", "createdAt": "2020-03-04T18:26:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA0MDMwMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA0NDExMw==", "url": "https://github.com/commons-app/apps-android-commons/pull/3324#discussion_r387044113", "bodyText": "I'd be shocked if Room would return null for a list", "author": "macgills", "createdAt": "2020-03-03T14:12:17Z", "path": "app/src/main/java/fr/free/nrw/commons/contributions/ContributionsLocalDataSource.java", "diffHunk": "@@ -1,49 +1,80 @@\n package fr.free.nrw.commons.contributions;\n \n-import android.database.Cursor;\n+import android.app.job.JobScheduler;\n+import android.text.TextUtils;\n+\n+import androidx.lifecycle.LiveData;\n+\n+import java.util.List;\n \n import javax.inject.Inject;\n import javax.inject.Named;\n \n+import fr.free.nrw.commons.db.AppDatabase;\n import fr.free.nrw.commons.kvstore.JsonKvStore;\n+import io.reactivex.Single;\n \n /**\n  * The LocalDataSource class for Contributions\n  */\n class ContributionsLocalDataSource {\n \n-    private final ContributionDao contributionsDao;\n+    private final ContributionDao contributionDao;\n     private final JsonKvStore defaultKVStore;\n \n     @Inject\n     public ContributionsLocalDataSource(\n             @Named(\"default_preferences\") JsonKvStore defaultKVStore,\n-            ContributionDao contributionDao) {\n+            AppDatabase appDatabase) {\n         this.defaultKVStore = defaultKVStore;\n-        this.contributionsDao = contributionDao;\n+        this.contributionDao = appDatabase.getContributionDao();\n+    }\n+\n+    /**\n+     * Fetch default number of contributions to be show, based on user preferences\n+     */\n+    public String getString(String key) {\n+        return defaultKVStore.getString(key);\n     }\n \n     /**\n      * Fetch default number of contributions to be show, based on user preferences\n      */\n-    public int get(String key) {\n-        return defaultKVStore.getInt(key);\n+    public long getLong(String key) {\n+       return defaultKVStore.getLong(key);\n     }\n \n     /**\n      * Get contribution object from cursor\n-     * @param cursor\n+     * @param uri\n      * @return\n      */\n-    public Contribution getContributionFromCursor(Cursor cursor) {\n-        return contributionsDao.fromCursor(cursor);\n+    public Contribution getContributionWithFileName(String uri) {\n+        List<Contribution> contributionWithUri = contributionDao.getContributionWithTitle(uri);\n+        if(null!=contributionWithUri && contributionWithUri.size()>0){", "originalCommit": "9d995278cb04a278f7f566d2f48eb6a4253b93fe", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA1Mjk2MQ==", "url": "https://github.com/commons-app/apps-android-commons/pull/3324#discussion_r387052961", "bodyText": "Why is the CompositeDisposable being assigned twice?", "author": "macgills", "createdAt": "2020-03-03T14:25:38Z", "path": "app/src/main/java/fr/free/nrw/commons/contributions/ContributionsPresenter.java", "diffHunk": "@@ -3,104 +3,155 @@\n import android.content.Context;\n import android.database.Cursor;\n import android.database.DataSetObserver;\n-import android.os.Bundle;\n+import android.text.TextUtils;\n+import android.util.Log;\n \n-import androidx.annotation.NonNull;\n import androidx.annotation.Nullable;\n-import androidx.loader.content.CursorLoader;\n-import androidx.loader.content.Loader;\n+import androidx.lifecycle.LifecycleOwner;\n+import androidx.lifecycle.LiveData;\n+import androidx.lifecycle.Observer;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n \n import javax.inject.Inject;\n+import javax.inject.Named;\n \n+import fr.free.nrw.commons.CommonsApplication;\n import fr.free.nrw.commons.Media;\n+import fr.free.nrw.commons.auth.SessionManager;\n import fr.free.nrw.commons.contributions.ContributionsContract.UserActionListener;\n+import fr.free.nrw.commons.db.AppDatabase;\n+import fr.free.nrw.commons.di.CommonsApplicationModule;\n+import fr.free.nrw.commons.mwapi.UserClient;\n+import fr.free.nrw.commons.utils.ExecutorUtils;\n+import fr.free.nrw.commons.utils.NetworkUtils;\n+import io.reactivex.Observable;\n+import io.reactivex.Scheduler;\n+import io.reactivex.SingleObserver;\n+import io.reactivex.android.schedulers.AndroidSchedulers;\n+import io.reactivex.disposables.CompositeDisposable;\n+import io.reactivex.disposables.Disposable;\n+import io.reactivex.schedulers.Schedulers;\n import timber.log.Timber;\n \n-import static fr.free.nrw.commons.contributions.ContributionDao.Table.ALL_FIELDS;\n-import static fr.free.nrw.commons.contributions.ContributionsContentProvider.BASE_URI;\n-import static fr.free.nrw.commons.settings.Prefs.UPLOADS_SHOWING;\n+import static fr.free.nrw.commons.contributions.Contribution.STATE_COMPLETED;\n \n /**\n  * The presenter class for Contributions\n  */\n-public class ContributionsPresenter extends DataSetObserver implements UserActionListener {\n+public class ContributionsPresenter implements UserActionListener {\n \n     private final ContributionsRepository repository;\n+    private final Scheduler mainThreadScheduler;\n+    private final Scheduler ioThreadScheduler;\n+    private CompositeDisposable compositeDisposable;\n     private ContributionsContract.View view;\n-    private Cursor cursor;\n+    private List<Contribution> contributionList=new ArrayList<>();\n \n     @Inject\n     Context context;\n \n     @Inject\n-    ContributionsPresenter(ContributionsRepository repository) {\n+    UserClient userClient;\n+\n+    @Inject\n+    AppDatabase appDatabase;\n+\n+    @Inject\n+    SessionManager sessionManager;\n+    private LifecycleOwner lifeCycleOwner;\n+\n+    @Inject\n+    ContributionsPresenter(ContributionsRepository repository, @Named(CommonsApplicationModule.MAIN_THREAD) Scheduler mainThreadScheduler,@Named(CommonsApplicationModule.IO_THREAD) Scheduler ioThreadScheduler) {\n         this.repository = repository;\n+        compositeDisposable=new CompositeDisposable();", "originalCommit": "9d995278cb04a278f7f566d2f48eb6a4253b93fe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg0MzQ3Nw==", "url": "https://github.com/commons-app/apps-android-commons/pull/3324#discussion_r387843477", "bodyText": "My bad, removing it", "author": "ashishkumar468", "createdAt": "2020-03-04T18:11:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA1Mjk2MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA1NzQ2NA==", "url": "https://github.com/commons-app/apps-android-commons/pull/3324#discussion_r387057464", "bodyText": "I would generally just observe liveData in my view.\nAlso the fragment is passing in the wrong lifecycle, you need to use getViewLifecycleOwner(), see here", "author": "macgills", "createdAt": "2020-03-03T14:32:05Z", "path": "app/src/main/java/fr/free/nrw/commons/contributions/ContributionsPresenter.java", "diffHunk": "@@ -3,104 +3,155 @@\n import android.content.Context;\n import android.database.Cursor;\n import android.database.DataSetObserver;\n-import android.os.Bundle;\n+import android.text.TextUtils;\n+import android.util.Log;\n \n-import androidx.annotation.NonNull;\n import androidx.annotation.Nullable;\n-import androidx.loader.content.CursorLoader;\n-import androidx.loader.content.Loader;\n+import androidx.lifecycle.LifecycleOwner;\n+import androidx.lifecycle.LiveData;\n+import androidx.lifecycle.Observer;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n \n import javax.inject.Inject;\n+import javax.inject.Named;\n \n+import fr.free.nrw.commons.CommonsApplication;\n import fr.free.nrw.commons.Media;\n+import fr.free.nrw.commons.auth.SessionManager;\n import fr.free.nrw.commons.contributions.ContributionsContract.UserActionListener;\n+import fr.free.nrw.commons.db.AppDatabase;\n+import fr.free.nrw.commons.di.CommonsApplicationModule;\n+import fr.free.nrw.commons.mwapi.UserClient;\n+import fr.free.nrw.commons.utils.ExecutorUtils;\n+import fr.free.nrw.commons.utils.NetworkUtils;\n+import io.reactivex.Observable;\n+import io.reactivex.Scheduler;\n+import io.reactivex.SingleObserver;\n+import io.reactivex.android.schedulers.AndroidSchedulers;\n+import io.reactivex.disposables.CompositeDisposable;\n+import io.reactivex.disposables.Disposable;\n+import io.reactivex.schedulers.Schedulers;\n import timber.log.Timber;\n \n-import static fr.free.nrw.commons.contributions.ContributionDao.Table.ALL_FIELDS;\n-import static fr.free.nrw.commons.contributions.ContributionsContentProvider.BASE_URI;\n-import static fr.free.nrw.commons.settings.Prefs.UPLOADS_SHOWING;\n+import static fr.free.nrw.commons.contributions.Contribution.STATE_COMPLETED;\n \n /**\n  * The presenter class for Contributions\n  */\n-public class ContributionsPresenter extends DataSetObserver implements UserActionListener {\n+public class ContributionsPresenter implements UserActionListener {\n \n     private final ContributionsRepository repository;\n+    private final Scheduler mainThreadScheduler;\n+    private final Scheduler ioThreadScheduler;\n+    private CompositeDisposable compositeDisposable;\n     private ContributionsContract.View view;\n-    private Cursor cursor;\n+    private List<Contribution> contributionList=new ArrayList<>();\n \n     @Inject\n     Context context;\n \n     @Inject\n-    ContributionsPresenter(ContributionsRepository repository) {\n+    UserClient userClient;\n+\n+    @Inject\n+    AppDatabase appDatabase;\n+\n+    @Inject\n+    SessionManager sessionManager;\n+    private LifecycleOwner lifeCycleOwner;\n+\n+    @Inject\n+    ContributionsPresenter(ContributionsRepository repository, @Named(CommonsApplicationModule.MAIN_THREAD) Scheduler mainThreadScheduler,@Named(CommonsApplicationModule.IO_THREAD) Scheduler ioThreadScheduler) {\n         this.repository = repository;\n+        compositeDisposable=new CompositeDisposable();\n+        this.mainThreadScheduler=mainThreadScheduler;\n+        this.ioThreadScheduler=ioThreadScheduler;\n     }\n \n+    private String user;\n+\n     @Override\n     public void onAttachView(ContributionsContract.View view) {\n         this.view = view;\n-        if (null != cursor) {\n-            try {\n-                cursor.registerDataSetObserver(this);\n-            } catch (IllegalStateException e) {//Cursor might be already registered\n-                Timber.d(e);\n-            }\n-        }\n+        compositeDisposable=new CompositeDisposable();\n     }\n \n-    @Override\n-    public void onDetachView() {\n-        this.view = null;\n-        if (null != cursor) {\n-            try {\n-                cursor.unregisterDataSetObserver(this);\n-            } catch (Exception e) {//Cursor might not be already registered\n-                Timber.d(e);\n-            }\n-        }\n+    public void setLifeCycleOwner(LifecycleOwner lifeCycleOwner){", "originalCommit": "9d995278cb04a278f7f566d2f48eb6a4253b93fe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ1NTY3NQ==", "url": "https://github.com/commons-app/apps-android-commons/pull/3324#discussion_r387455675", "bodyText": "I would generally just observe liveData in my view.\n\nI would have done that too, if it was a view model, as we are following the MVP architecture, I could not find a better way(without disturbing the architecture) than making the presenter observe it for the Fragment, if you could elaborate the ill-effects of this @macgills\n\nAlso the fragment is passing in the wrong lifecycle, you need to use getViewLifecycleOwner(), see here\n\nTrue, thanks for pointing this out", "author": "ashishkumar468", "createdAt": "2020-03-04T05:29:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA1NzQ2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU0MDA1Ng==", "url": "https://github.com/commons-app/apps-android-commons/pull/3324#discussion_r387540056", "bodyText": "Yeah I just hate MVP.\nYou could do Presenter.fetchData, View.renderData(LiveData<>). It'll leak some logic though. When it comes down to it LiveData is a MVVM component, it is not meant to be used like this.\nYou could put the logic in the Presenter and return types Result(List<>) NoResults but it just isn't as cool when it isn't kotlin sealed classes, in java you are reduced to using instanceOf. MediatorLiveData exists for this case.", "author": "macgills", "createdAt": "2020-03-04T09:24:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA1NzQ2NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA1ODYxNw==", "url": "https://github.com/commons-app/apps-android-commons/pull/3324#discussion_r387058617", "bodyText": "parameter should be marked @NonNull and null check deleted", "author": "macgills", "createdAt": "2020-03-03T14:33:50Z", "path": "app/src/main/java/fr/free/nrw/commons/contributions/ContributionsPresenter.java", "diffHunk": "@@ -3,104 +3,155 @@\n import android.content.Context;\n import android.database.Cursor;\n import android.database.DataSetObserver;\n-import android.os.Bundle;\n+import android.text.TextUtils;\n+import android.util.Log;\n \n-import androidx.annotation.NonNull;\n import androidx.annotation.Nullable;\n-import androidx.loader.content.CursorLoader;\n-import androidx.loader.content.Loader;\n+import androidx.lifecycle.LifecycleOwner;\n+import androidx.lifecycle.LiveData;\n+import androidx.lifecycle.Observer;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n \n import javax.inject.Inject;\n+import javax.inject.Named;\n \n+import fr.free.nrw.commons.CommonsApplication;\n import fr.free.nrw.commons.Media;\n+import fr.free.nrw.commons.auth.SessionManager;\n import fr.free.nrw.commons.contributions.ContributionsContract.UserActionListener;\n+import fr.free.nrw.commons.db.AppDatabase;\n+import fr.free.nrw.commons.di.CommonsApplicationModule;\n+import fr.free.nrw.commons.mwapi.UserClient;\n+import fr.free.nrw.commons.utils.ExecutorUtils;\n+import fr.free.nrw.commons.utils.NetworkUtils;\n+import io.reactivex.Observable;\n+import io.reactivex.Scheduler;\n+import io.reactivex.SingleObserver;\n+import io.reactivex.android.schedulers.AndroidSchedulers;\n+import io.reactivex.disposables.CompositeDisposable;\n+import io.reactivex.disposables.Disposable;\n+import io.reactivex.schedulers.Schedulers;\n import timber.log.Timber;\n \n-import static fr.free.nrw.commons.contributions.ContributionDao.Table.ALL_FIELDS;\n-import static fr.free.nrw.commons.contributions.ContributionsContentProvider.BASE_URI;\n-import static fr.free.nrw.commons.settings.Prefs.UPLOADS_SHOWING;\n+import static fr.free.nrw.commons.contributions.Contribution.STATE_COMPLETED;\n \n /**\n  * The presenter class for Contributions\n  */\n-public class ContributionsPresenter extends DataSetObserver implements UserActionListener {\n+public class ContributionsPresenter implements UserActionListener {\n \n     private final ContributionsRepository repository;\n+    private final Scheduler mainThreadScheduler;\n+    private final Scheduler ioThreadScheduler;\n+    private CompositeDisposable compositeDisposable;\n     private ContributionsContract.View view;\n-    private Cursor cursor;\n+    private List<Contribution> contributionList=new ArrayList<>();\n \n     @Inject\n     Context context;\n \n     @Inject\n-    ContributionsPresenter(ContributionsRepository repository) {\n+    UserClient userClient;\n+\n+    @Inject\n+    AppDatabase appDatabase;\n+\n+    @Inject\n+    SessionManager sessionManager;\n+    private LifecycleOwner lifeCycleOwner;\n+\n+    @Inject\n+    ContributionsPresenter(ContributionsRepository repository, @Named(CommonsApplicationModule.MAIN_THREAD) Scheduler mainThreadScheduler,@Named(CommonsApplicationModule.IO_THREAD) Scheduler ioThreadScheduler) {\n         this.repository = repository;\n+        compositeDisposable=new CompositeDisposable();\n+        this.mainThreadScheduler=mainThreadScheduler;\n+        this.ioThreadScheduler=ioThreadScheduler;\n     }\n \n+    private String user;\n+\n     @Override\n     public void onAttachView(ContributionsContract.View view) {\n         this.view = view;\n-        if (null != cursor) {\n-            try {\n-                cursor.registerDataSetObserver(this);\n-            } catch (IllegalStateException e) {//Cursor might be already registered\n-                Timber.d(e);\n-            }\n-        }\n+        compositeDisposable=new CompositeDisposable();\n     }\n \n-    @Override\n-    public void onDetachView() {\n-        this.view = null;\n-        if (null != cursor) {\n-            try {\n-                cursor.unregisterDataSetObserver(this);\n-            } catch (Exception e) {//Cursor might not be already registered\n-                Timber.d(e);\n-            }\n-        }\n+    public void setLifeCycleOwner(LifecycleOwner lifeCycleOwner){\n+        this.lifeCycleOwner=lifeCycleOwner;\n     }\n \n-    @NonNull\n-    @Override\n-    public Loader<Cursor> onCreateLoader(int id, @Nullable Bundle args) {\n-        int preferredNumberOfUploads = repository.get(UPLOADS_SHOWING);\n-        return new CursorLoader(context, BASE_URI,\n-                ALL_FIELDS, \"\", null,\n-                ContributionDao.CONTRIBUTION_SORT + \"LIMIT \"\n-                        + (preferredNumberOfUploads>0?preferredNumberOfUploads:100));\n+    public void fetchContributions() {\n+        Timber.d(\"fetch  Contributions\");\n+        LiveData<List<Contribution>> liveDataContributions = repository.fetchContributions();\n+        if(null!=lifeCycleOwner) {\n+             liveDataContributions.observe(lifeCycleOwner, this::showContributions);\n+        }\n+\n+        if (NetworkUtils.isInternetConnectionEstablished(CommonsApplication.getInstance()) && shouldFetchContributions()) {\n+            Timber.d(\"fetching contributions: \");\n+            view.showProgress(true);\n+            this.user = sessionManager.getUserName();\n+            view.showContributions(null);\n+            compositeDisposable.add(userClient.logEvents(user)\n+                    .subscribeOn(ioThreadScheduler)\n+                    .observeOn(mainThreadScheduler)\n+                    .doOnNext(mwQueryLogEvent -> Timber.d(\"Received image %s\", mwQueryLogEvent.title()))\n+                    .filter(mwQueryLogEvent -> !mwQueryLogEvent.isDeleted()).doOnNext(mwQueryLogEvent -> Timber.d(\"Image %s passed filters\", mwQueryLogEvent.title()))\n+                    .map(image -> {\n+                        Contribution contribution = new Contribution(null, null, image.title(),\n+                                \"\", -1, image.date(), image.date(), user,\n+                                \"\", \"\", STATE_COMPLETED);\n+                        return contribution;\n+                    })\n+                    .toList()\n+                    .subscribe(this::saveContributionsToDB, error -> {\n+                        Timber.e(\"Failed to fetch contributions: %s\", error.getMessage());\n+                    }));\n+        }\n     }\n \n-    @Override\n-    public void onLoadFinished(@NonNull Loader<Cursor> loader, Cursor cursor) {\n+    private void showContributions(List<Contribution> contributions) {", "originalCommit": "9d995278cb04a278f7f566d2f48eb6a4253b93fe", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA2MDQxMg==", "url": "https://github.com/commons-app/apps-android-commons/pull/3324#discussion_r387060412", "bodyText": "if contributions ever was null this code guarantees an NPE. \"If contributions is null and is empty\"\nAlso avoid .size==0 checks, .isEmpty() is there to be used.", "author": "macgills", "createdAt": "2020-03-03T14:36:25Z", "path": "app/src/main/java/fr/free/nrw/commons/contributions/ContributionsPresenter.java", "diffHunk": "@@ -3,104 +3,155 @@\n import android.content.Context;\n import android.database.Cursor;\n import android.database.DataSetObserver;\n-import android.os.Bundle;\n+import android.text.TextUtils;\n+import android.util.Log;\n \n-import androidx.annotation.NonNull;\n import androidx.annotation.Nullable;\n-import androidx.loader.content.CursorLoader;\n-import androidx.loader.content.Loader;\n+import androidx.lifecycle.LifecycleOwner;\n+import androidx.lifecycle.LiveData;\n+import androidx.lifecycle.Observer;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n \n import javax.inject.Inject;\n+import javax.inject.Named;\n \n+import fr.free.nrw.commons.CommonsApplication;\n import fr.free.nrw.commons.Media;\n+import fr.free.nrw.commons.auth.SessionManager;\n import fr.free.nrw.commons.contributions.ContributionsContract.UserActionListener;\n+import fr.free.nrw.commons.db.AppDatabase;\n+import fr.free.nrw.commons.di.CommonsApplicationModule;\n+import fr.free.nrw.commons.mwapi.UserClient;\n+import fr.free.nrw.commons.utils.ExecutorUtils;\n+import fr.free.nrw.commons.utils.NetworkUtils;\n+import io.reactivex.Observable;\n+import io.reactivex.Scheduler;\n+import io.reactivex.SingleObserver;\n+import io.reactivex.android.schedulers.AndroidSchedulers;\n+import io.reactivex.disposables.CompositeDisposable;\n+import io.reactivex.disposables.Disposable;\n+import io.reactivex.schedulers.Schedulers;\n import timber.log.Timber;\n \n-import static fr.free.nrw.commons.contributions.ContributionDao.Table.ALL_FIELDS;\n-import static fr.free.nrw.commons.contributions.ContributionsContentProvider.BASE_URI;\n-import static fr.free.nrw.commons.settings.Prefs.UPLOADS_SHOWING;\n+import static fr.free.nrw.commons.contributions.Contribution.STATE_COMPLETED;\n \n /**\n  * The presenter class for Contributions\n  */\n-public class ContributionsPresenter extends DataSetObserver implements UserActionListener {\n+public class ContributionsPresenter implements UserActionListener {\n \n     private final ContributionsRepository repository;\n+    private final Scheduler mainThreadScheduler;\n+    private final Scheduler ioThreadScheduler;\n+    private CompositeDisposable compositeDisposable;\n     private ContributionsContract.View view;\n-    private Cursor cursor;\n+    private List<Contribution> contributionList=new ArrayList<>();\n \n     @Inject\n     Context context;\n \n     @Inject\n-    ContributionsPresenter(ContributionsRepository repository) {\n+    UserClient userClient;\n+\n+    @Inject\n+    AppDatabase appDatabase;\n+\n+    @Inject\n+    SessionManager sessionManager;\n+    private LifecycleOwner lifeCycleOwner;\n+\n+    @Inject\n+    ContributionsPresenter(ContributionsRepository repository, @Named(CommonsApplicationModule.MAIN_THREAD) Scheduler mainThreadScheduler,@Named(CommonsApplicationModule.IO_THREAD) Scheduler ioThreadScheduler) {\n         this.repository = repository;\n+        compositeDisposable=new CompositeDisposable();\n+        this.mainThreadScheduler=mainThreadScheduler;\n+        this.ioThreadScheduler=ioThreadScheduler;\n     }\n \n+    private String user;\n+\n     @Override\n     public void onAttachView(ContributionsContract.View view) {\n         this.view = view;\n-        if (null != cursor) {\n-            try {\n-                cursor.registerDataSetObserver(this);\n-            } catch (IllegalStateException e) {//Cursor might be already registered\n-                Timber.d(e);\n-            }\n-        }\n+        compositeDisposable=new CompositeDisposable();\n     }\n \n-    @Override\n-    public void onDetachView() {\n-        this.view = null;\n-        if (null != cursor) {\n-            try {\n-                cursor.unregisterDataSetObserver(this);\n-            } catch (Exception e) {//Cursor might not be already registered\n-                Timber.d(e);\n-            }\n-        }\n+    public void setLifeCycleOwner(LifecycleOwner lifeCycleOwner){\n+        this.lifeCycleOwner=lifeCycleOwner;\n     }\n \n-    @NonNull\n-    @Override\n-    public Loader<Cursor> onCreateLoader(int id, @Nullable Bundle args) {\n-        int preferredNumberOfUploads = repository.get(UPLOADS_SHOWING);\n-        return new CursorLoader(context, BASE_URI,\n-                ALL_FIELDS, \"\", null,\n-                ContributionDao.CONTRIBUTION_SORT + \"LIMIT \"\n-                        + (preferredNumberOfUploads>0?preferredNumberOfUploads:100));\n+    public void fetchContributions() {\n+        Timber.d(\"fetch  Contributions\");\n+        LiveData<List<Contribution>> liveDataContributions = repository.fetchContributions();\n+        if(null!=lifeCycleOwner) {\n+             liveDataContributions.observe(lifeCycleOwner, this::showContributions);\n+        }\n+\n+        if (NetworkUtils.isInternetConnectionEstablished(CommonsApplication.getInstance()) && shouldFetchContributions()) {\n+            Timber.d(\"fetching contributions: \");\n+            view.showProgress(true);\n+            this.user = sessionManager.getUserName();\n+            view.showContributions(null);\n+            compositeDisposable.add(userClient.logEvents(user)\n+                    .subscribeOn(ioThreadScheduler)\n+                    .observeOn(mainThreadScheduler)\n+                    .doOnNext(mwQueryLogEvent -> Timber.d(\"Received image %s\", mwQueryLogEvent.title()))\n+                    .filter(mwQueryLogEvent -> !mwQueryLogEvent.isDeleted()).doOnNext(mwQueryLogEvent -> Timber.d(\"Image %s passed filters\", mwQueryLogEvent.title()))\n+                    .map(image -> {\n+                        Contribution contribution = new Contribution(null, null, image.title(),\n+                                \"\", -1, image.date(), image.date(), user,\n+                                \"\", \"\", STATE_COMPLETED);\n+                        return contribution;\n+                    })\n+                    .toList()\n+                    .subscribe(this::saveContributionsToDB, error -> {\n+                        Timber.e(\"Failed to fetch contributions: %s\", error.getMessage());\n+                    }));\n+        }\n     }\n \n-    @Override\n-    public void onLoadFinished(@NonNull Loader<Cursor> loader, Cursor cursor) {\n+    private void showContributions(List<Contribution> contributions) {\n         view.showProgress(false);\n-        if (null != cursor && cursor.getCount() > 0) {\n+        if(!(contributions==null && contributions.size()==0)){", "originalCommit": "9d995278cb04a278f7f566d2f48eb6a4253b93fe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzUzMTUzNg==", "url": "https://github.com/commons-app/apps-android-commons/pull/3324#discussion_r387531536", "bodyText": "I must have used some IDE refactor thing, my bad, have fixed this", "author": "ashishkumar468", "createdAt": "2020-03-04T09:08:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA2MDQxMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA2MTYyMw==", "url": "https://github.com/commons-app/apps-android-commons/pull/3324#discussion_r387061623", "bodyText": "I don't think we need to observe on any particular thread", "author": "macgills", "createdAt": "2020-03-03T14:38:19Z", "path": "app/src/main/java/fr/free/nrw/commons/contributions/ContributionsPresenter.java", "diffHunk": "@@ -109,75 +160,24 @@ public Contribution getContributionsFromCursor(Cursor cursor) {\n      */\n     @Override\n     public void deleteUpload(Contribution contribution) {\n-        repository.deleteContributionFromDB(contribution);\n+        compositeDisposable.add(repository.deleteContributionFromDB(contribution)\n+        .observeOn(mainThreadScheduler)", "originalCommit": "9d995278cb04a278f7f566d2f48eb6a4253b93fe", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA2NDEzNA==", "url": "https://github.com/commons-app/apps-android-commons/pull/3324#discussion_r387064134", "bodyText": "So all our existing users Contributions data - on upgrade - will remain on disk forever?", "author": "macgills", "createdAt": "2020-03-03T14:41:50Z", "path": "app/src/main/java/fr/free/nrw/commons/CommonsApplication.java", "diffHunk": "@@ -306,7 +309,7 @@ private void updateAllDatabases() {\n         SQLiteDatabase db = dbOpenHelper.getWritableDatabase();\n \n         CategoryDao.Table.onDelete(db);\n-        ContributionDao.Table.onDelete(db);", "originalCommit": "9d995278cb04a278f7f566d2f48eb6a4253b93fe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ1NDI5NQ==", "url": "https://github.com/commons-app/apps-android-commons/pull/3324#discussion_r387454295", "bodyText": "Fair point, I will delete the existing contributions table", "author": "ashishkumar468", "createdAt": "2020-03-04T05:22:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA2NDEzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg2OTE2NA==", "url": "https://github.com/commons-app/apps-android-commons/pull/3324#discussion_r387869164", "bodyText": "Done", "author": "ashishkumar468", "createdAt": "2020-03-04T18:59:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA2NDEzNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA2OTAzMg==", "url": "https://github.com/commons-app/apps-android-commons/pull/3324#discussion_r387069032", "bodyText": "Just inject ContributionDao, testing will be a little bit more annoying if there is some indirection with the object's dependencies", "author": "macgills", "createdAt": "2020-03-03T14:47:52Z", "path": "app/src/main/java/fr/free/nrw/commons/contributions/ContributionsLocalDataSource.java", "diffHunk": "@@ -1,49 +1,80 @@\n package fr.free.nrw.commons.contributions;\n \n-import android.database.Cursor;\n+import android.app.job.JobScheduler;\n+import android.text.TextUtils;\n+\n+import androidx.lifecycle.LiveData;\n+\n+import java.util.List;\n \n import javax.inject.Inject;\n import javax.inject.Named;\n \n+import fr.free.nrw.commons.db.AppDatabase;\n import fr.free.nrw.commons.kvstore.JsonKvStore;\n+import io.reactivex.Single;\n \n /**\n  * The LocalDataSource class for Contributions\n  */\n class ContributionsLocalDataSource {\n \n-    private final ContributionDao contributionsDao;\n+    private final ContributionDao contributionDao;\n     private final JsonKvStore defaultKVStore;\n \n     @Inject\n     public ContributionsLocalDataSource(\n             @Named(\"default_preferences\") JsonKvStore defaultKVStore,\n-            ContributionDao contributionDao) {", "originalCommit": "9d995278cb04a278f7f566d2f48eb6a4253b93fe", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA3MTU5OA==", "url": "https://github.com/commons-app/apps-android-commons/pull/3324#discussion_r387071598", "bodyText": "contributionList can never be null", "author": "macgills", "createdAt": "2020-03-03T14:51:30Z", "path": "app/src/main/java/fr/free/nrw/commons/contributions/ContributionsPresenter.java", "diffHunk": "@@ -109,75 +160,24 @@ public Contribution getContributionsFromCursor(Cursor cursor) {\n      */\n     @Override\n     public void deleteUpload(Contribution contribution) {\n-        repository.deleteContributionFromDB(contribution);\n+        compositeDisposable.add(repository.deleteContributionFromDB(contribution)\n+        .observeOn(mainThreadScheduler)\n+        .subscribeOn(ioThreadScheduler)\n+        .subscribe());\n     }\n \n     /**\n      * Returns a contribution at the specified cursor position\n+     *\n      * @param i\n      * @return\n      */\n     @Nullable\n     @Override\n     public Media getItemAtPosition(int i) {\n-        if (null != cursor && cursor.moveToPosition(i)) {\n-            return getContributionsFromCursor(cursor);\n-        }\n-        return null;\n-    }\n-\n-    /**\n-     * Get contribution position  with id\n-     */\n-    public int getChildPositionWithId(String id) {\n-        int position = 0;\n-        cursor.moveToFirst();\n-        while (null != cursor && cursor.moveToNext()) {\n-            if (getContributionsFromCursor(cursor).getContentUri().getLastPathSegment()\n-                    .equals(id)) {\n-                position = cursor.getPosition();\n-                break;\n-            }\n-        }\n-        return position;\n-    }\n-\n-    @Override\n-    public void onChanged() {\n-        super.onChanged();\n-        view.onDataSetChanged();\n-    }\n-\n-    @Override\n-    public void onInvalidated() {\n-        super.onInvalidated();\n-        //Not letting the view know of this as of now, TODO discuss how to handle this and maybe show a proper ui for this\n-    }\n-\n-    /**\n-     * Swap in a new Cursor, returning the old Cursor. The returned old Cursor is <em>not</em>\n-     * closed.\n-     *\n-     * @param newCursor The new cursor to be used.\n-     * @return Returns the previously set Cursor, or null if there was not one. If the given new\n-     * Cursor is the same instance is the previously set Cursor, null is also returned.\n-     */\n-    private void swapCursor(Cursor newCursor) {\n-        try {\n-            if (newCursor == cursor) {\n-                return;\n-            }\n-            Cursor oldCursor = cursor;\n-            if (oldCursor != null) {\n-                oldCursor.unregisterDataSetObserver(this);\n-            }\n-            cursor = newCursor;\n-            if (newCursor != null) {\n-                newCursor.registerDataSetObserver(this);\n-            }\n-            view.onDataSetChanged();\n-        } catch (IllegalStateException e) {//Cursor might [not] be already registered/unregistered\n-            Timber.e(e);\n+        if (i == -1 || contributionList == null || contributionList.size() < i+1) {", "originalCommit": "9d995278cb04a278f7f566d2f48eb6a4253b93fe", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA3NTUyMA==", "url": "https://github.com/commons-app/apps-android-commons/pull/3324#discussion_r387075520", "bodyText": "/**\n     * Gson objects are very heavy. The app should ideally be using just one instance of it instead of creating new instances everywhere.\n     * @return returns a singleton Gson instance\n     */\n    @Provides\n    @Singleton\n    public Gson provideGson() {\n        return GsonUtil.getDefaultGson();\n    }\n\nIt would be handy if we could not create Gsons here though I don't know how this class is instantiated by room", "author": "macgills", "createdAt": "2020-03-03T14:57:04Z", "path": "app/src/main/java/fr/free/nrw/commons/db/Converters.java", "diffHunk": "@@ -0,0 +1,67 @@\n+package fr.free.nrw.commons.db;\n+\n+import android.net.Uri;\n+\n+import androidx.room.TypeConverter;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.reflect.TypeToken;\n+\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.HashMap;\n+\n+import fr.free.nrw.commons.location.LatLng;\n+\n+public class Converters {\n+    @TypeConverter\n+    public static Date fromTimestamp(Long value) {\n+        return value == null ? null : new Date(value);\n+    }\n+\n+    @TypeConverter\n+    public static Long dateToTimestamp(Date date) {\n+        return date == null ? null : date.getTime();\n+    }\n+\n+    @TypeConverter\n+    public static Uri fromString(String value) {\n+        return value == null ? null : Uri.parse(value);\n+    }\n+\n+    @TypeConverter\n+    public static String uriToString(Uri uri) {\n+        return uri == null ? null : uri.toString();\n+    }\n+\n+    @TypeConverter\n+    public static String listObjectToString(ArrayList<String> objectList) {\n+        return objectList == null ? null : new Gson().toJson(objectList);", "originalCommit": "9d995278cb04a278f7f566d2f48eb6a4253b93fe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg0NDg0Ng==", "url": "https://github.com/commons-app/apps-android-commons/pull/3324#discussion_r387844846", "bodyText": "Providing Gson to this class via dagger seems like a tricky thing to me, but yes, making multiple instances is bad too, adding a Singleton though for the same", "author": "ashishkumar468", "createdAt": "2020-03-04T18:14:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA3NTUyMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA3Njk4NQ==", "url": "https://github.com/commons-app/apps-android-commons/pull/3324#discussion_r387076985", "bodyText": "This should be  @Singelton", "author": "macgills", "createdAt": "2020-03-03T14:59:05Z", "path": "app/src/main/java/fr/free/nrw/commons/di/CommonsApplicationModule.java", "diffHunk": "@@ -229,4 +231,9 @@ public String provideLoggedInUsername() {\n     public QuadTree providesQuadTres() {\n         return new QuadTree<>(-180, -90, +180, +90);\n     }\n+\n+    @Provides", "originalCommit": "9d995278cb04a278f7f566d2f48eb6a4253b93fe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ1NjYyMg==", "url": "https://github.com/commons-app/apps-android-commons/pull/3324#discussion_r387456622", "bodyText": "Done, thanks for pointing this out", "author": "ashishkumar468", "createdAt": "2020-03-04T05:33:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA3Njk4NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA3NzY3Mw==", "url": "https://github.com/commons-app/apps-android-commons/pull/3324#discussion_r387077673", "bodyText": "Not using Singles here?", "author": "macgills", "createdAt": "2020-03-03T15:00:05Z", "path": "app/src/main/java/fr/free/nrw/commons/upload/UploadService.java", "diffHunk": "@@ -105,7 +106,7 @@ public void onProgress(long transferred, long total) {\n             notificationManager.notify(notificationTag, NOTIFICATION_UPLOAD_IN_PROGRESS, curNotification.build());\n \n             contribution.setTransferred(transferred);\n-            contributionDao.save(contribution);\n+            ExecutorUtils.get().submit(() -> appDatabase.getContributionDao().save(contribution));", "originalCommit": "9d995278cb04a278f7f566d2f48eb6a4253b93fe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg1NTEwMw==", "url": "https://github.com/commons-app/apps-android-commons/pull/3324#discussion_r387855103", "bodyText": "Updated to Singles, thanks for reminding :)", "author": "ashishkumar468", "createdAt": "2020-03-04T18:33:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA3NzY3Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA3ODY2Ng==", "url": "https://github.com/commons-app/apps-android-commons/pull/3324#discussion_r387078666", "bodyText": "use whenever from mockito-android instead of this workaround for avoiding the kotlin keyword when", "author": "macgills", "createdAt": "2020-03-03T15:01:27Z", "path": "app/src/test/kotlin/fr/free/nrw/commons/contributions/ContributionsPresenterTest.kt", "diffHunk": "@@ -27,84 +37,58 @@ class ContributionsPresenterTest {\n \n     lateinit var loader: Loader<Cursor>\n \n+    lateinit var liveData: LiveData<List<Contribution>>\n+\n+    @Rule @JvmField var instantTaskExecutorRule = InstantTaskExecutorRule()\n+\n+    lateinit var scheduler : Scheduler\n+\n     /**\n      * initial setup\n      */\n     @Before\n     @Throws(Exception::class)\n     fun setUp() {\n         MockitoAnnotations.initMocks(this)\n+        scheduler=TestScheduler()\n         cursor = Mockito.mock(Cursor::class.java)\n         contribution = Mockito.mock(Contribution::class.java)\n-        contributionsPresenter = ContributionsPresenter(repository)\n+        contributionsPresenter = ContributionsPresenter(repository,scheduler,scheduler)\n         loader = Mockito.mock(CursorLoader::class.java)\n         contributionsPresenter?.onAttachView(view)\n+        liveData=MutableLiveData()\n     }\n \n-\n     /**\n-     * Test presenter actions onGetContributionFromCursor\n+     * Test fetch contributions\n      */\n     @Test\n-    fun testGetContributionFromCursor() {\n-        contributionsPresenter?.getContributionsFromCursor(cursor)\n-        verify(repository)?.getContributionFromCursor(cursor)\n+    fun testFetchContributions(){\n+        Mockito.`when`(repository?.getString(ArgumentMatchers.anyString())).thenReturn(\"10\")", "originalCommit": "9d995278cb04a278f7f566d2f48eb6a4253b93fe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg3MTIzNQ==", "url": "https://github.com/commons-app/apps-android-commons/pull/3324#discussion_r387871235", "bodyText": "Done, thanks for adding this comment, I never knew this existed :)", "author": "ashishkumar468", "createdAt": "2020-03-04T19:03:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA3ODY2Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA4MDM5Ng==", "url": "https://github.com/commons-app/apps-android-commons/pull/3324#discussion_r387080396", "bodyText": "Why is contributionsPresenter & repository nullable? Fix that if you could.", "author": "macgills", "createdAt": "2020-03-03T15:03:57Z", "path": "app/src/test/kotlin/fr/free/nrw/commons/contributions/ContributionsPresenterTest.kt", "diffHunk": "@@ -27,84 +37,58 @@ class ContributionsPresenterTest {\n \n     lateinit var loader: Loader<Cursor>\n \n+    lateinit var liveData: LiveData<List<Contribution>>\n+\n+    @Rule @JvmField var instantTaskExecutorRule = InstantTaskExecutorRule()\n+\n+    lateinit var scheduler : Scheduler\n+\n     /**\n      * initial setup\n      */\n     @Before\n     @Throws(Exception::class)\n     fun setUp() {\n         MockitoAnnotations.initMocks(this)\n+        scheduler=TestScheduler()\n         cursor = Mockito.mock(Cursor::class.java)\n         contribution = Mockito.mock(Contribution::class.java)\n-        contributionsPresenter = ContributionsPresenter(repository)\n+        contributionsPresenter = ContributionsPresenter(repository,scheduler,scheduler)\n         loader = Mockito.mock(CursorLoader::class.java)\n         contributionsPresenter?.onAttachView(view)\n+        liveData=MutableLiveData()\n     }\n \n-\n     /**\n-     * Test presenter actions onGetContributionFromCursor\n+     * Test fetch contributions\n      */\n     @Test\n-    fun testGetContributionFromCursor() {\n-        contributionsPresenter?.getContributionsFromCursor(cursor)\n-        verify(repository)?.getContributionFromCursor(cursor)\n+    fun testFetchContributions(){\n+        Mockito.`when`(repository?.getString(ArgumentMatchers.anyString())).thenReturn(\"10\")\n+        Mockito.`when`(repository?.fetchContributions()).thenReturn(liveData)\n+        contributionsPresenter?.fetchContributions()", "originalCommit": "9d995278cb04a278f7f566d2f48eb6a4253b93fe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg3MTE1MA==", "url": "https://github.com/commons-app/apps-android-commons/pull/3324#discussion_r387871150", "bodyText": "This was the existing implementation, but fair point, I had already touched this, fixed that, thanks for pointing it out", "author": "ashishkumar468", "createdAt": "2020-03-04T19:03:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA4MDM5Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA5MDM3OA==", "url": "https://github.com/commons-app/apps-android-commons/pull/3324#discussion_r387090378", "bodyText": "This test barely covers this method and the coverage overall of the class is far from full , no view interactions, deleteUpload or getItemAtPosition", "author": "macgills", "createdAt": "2020-03-03T15:18:27Z", "path": "app/src/test/kotlin/fr/free/nrw/commons/contributions/ContributionsPresenterTest.kt", "diffHunk": "@@ -27,84 +37,58 @@ class ContributionsPresenterTest {\n \n     lateinit var loader: Loader<Cursor>\n \n+    lateinit var liveData: LiveData<List<Contribution>>\n+\n+    @Rule @JvmField var instantTaskExecutorRule = InstantTaskExecutorRule()\n+\n+    lateinit var scheduler : Scheduler\n+\n     /**\n      * initial setup\n      */\n     @Before\n     @Throws(Exception::class)\n     fun setUp() {\n         MockitoAnnotations.initMocks(this)\n+        scheduler=TestScheduler()\n         cursor = Mockito.mock(Cursor::class.java)\n         contribution = Mockito.mock(Contribution::class.java)\n-        contributionsPresenter = ContributionsPresenter(repository)\n+        contributionsPresenter = ContributionsPresenter(repository,scheduler,scheduler)\n         loader = Mockito.mock(CursorLoader::class.java)\n         contributionsPresenter?.onAttachView(view)\n+        liveData=MutableLiveData()\n     }\n \n-\n     /**\n-     * Test presenter actions onGetContributionFromCursor\n+     * Test fetch contributions\n      */\n     @Test\n-    fun testGetContributionFromCursor() {\n-        contributionsPresenter?.getContributionsFromCursor(cursor)\n-        verify(repository)?.getContributionFromCursor(cursor)\n+    fun testFetchContributions(){\n+        Mockito.`when`(repository?.getString(ArgumentMatchers.anyString())).thenReturn(\"10\")\n+        Mockito.`when`(repository?.fetchContributions()).thenReturn(liveData)\n+        contributionsPresenter?.fetchContributions()\n+        verify(repository)?.fetchContributions()\n     }", "originalCommit": "9d995278cb04a278f7f566d2f48eb6a4253b93fe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg3NTkxMA==", "url": "https://github.com/commons-app/apps-android-commons/pull/3324#discussion_r387875910", "bodyText": "True, this test does not justify the coverage required, someone volunteer or I will raise, else will raise a separate PR to cover the test case. In the current one, I had actually aimed not to miss the existing test cases.", "author": "ashishkumar468", "createdAt": "2020-03-04T19:12:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA5MDM3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE5NjE1MQ==", "url": "https://github.com/commons-app/apps-android-commons/pull/3324#discussion_r388196151", "bodyText": "Cool", "author": "macgills", "createdAt": "2020-03-05T10:13:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA5MDM3OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA5NDI0NQ==", "url": "https://github.com/commons-app/apps-android-commons/pull/3324#discussion_r387094245", "bodyText": "mocks should not have their fields assigned. Also I don't believe val media could be nullable", "author": "macgills", "createdAt": "2020-03-03T15:23:46Z", "path": "app/src/test/kotlin/fr/free/nrw/commons/delete/ReasonBuilderTest.kt", "diffHunk": "@@ -56,7 +56,7 @@ class ReasonBuilderTest {\n                 .thenReturn(Single.just(mock(FeedbackResponse::class.java)))\n \n         val media = mock(Media::class.java)\n-        `when`(media!!.dateUploaded).thenReturn(Date())\n+        media?.dateUploaded=Date()", "originalCommit": "9d995278cb04a278f7f566d2f48eb6a4253b93fe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg3NjkwNg==", "url": "https://github.com/commons-app/apps-android-commons/pull/3324#discussion_r387876906", "bodyText": "Yes, but, when with getter won't work for kotlin public val's and as the val needs to be public  for Room to generate the necessary classes, I was left with no other option than to manually assign values", "author": "ashishkumar468", "createdAt": "2020-03-04T19:14:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA5NDI0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIxNjgxNw==", "url": "https://github.com/commons-app/apps-android-commons/pull/3324#discussion_r388216817", "bodyText": "Then just create a Media object. Also this test passes if you pass in a null for the media object, that is preferrable", "author": "macgills", "createdAt": "2020-03-05T10:50:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA5NDI0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA1OTcwMw==", "url": "https://github.com/commons-app/apps-android-commons/pull/3324#discussion_r389059703", "bodyText": "I am not sure If passing a null object would be wise, creating the minimal media object for the same.", "author": "ashishkumar468", "createdAt": "2020-03-06T18:07:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA5NDI0NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA5NTU5NA==", "url": "https://github.com/commons-app/apps-android-commons/pull/3324#discussion_r387095594", "bodyText": "There is no need for the field", "author": "macgills", "createdAt": "2020-03-03T15:25:33Z", "path": "app/src/test/kotlin/fr/free/nrw/commons/review/ReviewHelperTest.kt", "diffHunk": "@@ -32,6 +32,8 @@ class ReviewHelperTest {\n     @InjectMocks\n     var reviewHelper: ReviewHelper? = null\n \n+    lateinit var media: Media", "originalCommit": "9d995278cb04a278f7f566d2f48eb6a4253b93fe", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "52c086f20ddd855e3765da52d7ed1f1b5736a89b", "url": "https://github.com/commons-app/apps-android-commons/commit/52c086f20ddd855e3765da52d7ed1f1b5736a89b", "message": "BugFixes\n* Make AppDataBase Singleton\n* Set _id as autogenerate primary key [replacing the previously used filename, seems like they are not unique]\n* Replace Execxutor Utils with Subscribers on Singles in UploadService\n* BugFix, Upload Progress", "committedDate": "2020-03-04T05:12:55Z", "type": "commit"}, {"oid": "adaa33c8881b5a8f01155f1e4bbe97a21a129e70", "url": "https://github.com/commons-app/apps-android-commons/commit/adaa33c8881b5a8f01155f1e4bbe97a21a129e70", "message": "Remove un-nescessary null check on contributions in ContributionsListAdapter", "committedDate": "2020-03-04T17:53:55Z", "type": "commit"}, {"oid": "c34720099d3cc5538bab628252089de0b19db5a5", "url": "https://github.com/commons-app/apps-android-commons/commit/c34720099d3cc5538bab628252089de0b19db5a5", "message": "removed ContributionsListFragment [not-implemeted]", "committedDate": "2020-03-04T17:55:14Z", "type": "commit"}, {"oid": "adb6d70c6901eef08c52b99f82b15d874df1aced", "url": "https://github.com/commons-app/apps-android-commons/commit/adb6d70c6901eef08c52b99f82b15d874df1aced", "message": "Review suggested changes\n* removed un-nescessary null checks\n* provide ContributionsDao\n* Minor bug fixes", "committedDate": "2020-03-04T18:30:53Z", "type": "commit"}, {"oid": "8e33730404930b56e37fb96b1dbc1ddd9a1af138", "url": "https://github.com/commons-app/apps-android-commons/commit/8e33730404930b56e37fb96b1dbc1ddd9a1af138", "message": "wip", "committedDate": "2020-03-04T18:45:32Z", "type": "commit"}, {"oid": "3d9189573c64dad1eccd80b215b92da4aee7a1e7", "url": "https://github.com/commons-app/apps-android-commons/commit/3d9189573c64dad1eccd80b215b92da4aee7a1e7", "message": "delete existing contributions table (from the existing db) on upgrade", "committedDate": "2020-03-04T18:58:08Z", "type": "commit"}, {"oid": "0d87140277d443847ece267f307a391aca88f0de", "url": "https://github.com/commons-app/apps-android-commons/commit/0d87140277d443847ece267f307a391aca88f0de", "message": "remove un-nescessary null checks in test classes", "committedDate": "2020-03-04T19:15:24Z", "type": "commit"}, {"oid": "3081989f322ee0f9e76989deebaa943d4fbcd512", "url": "https://github.com/commons-app/apps-android-commons/commit/3081989f322ee0f9e76989deebaa943d4fbcd512", "message": "shifted media to be a local variable in ReviewHelperTest", "committedDate": "2020-03-04T19:17:25Z", "type": "commit"}, {"oid": "0c4c783a6dc7e831d93caa7169a88032b1f98781", "url": "https://github.com/commons-app/apps-android-commons/commit/0c4c783a6dc7e831d93caa7169a88032b1f98781", "message": "removed captured folder", "committedDate": "2020-03-04T19:18:14Z", "type": "commit"}, {"oid": "2985b1c2b519e1a298d88e16f8e7172791e1eef1", "url": "https://github.com/commons-app/apps-android-commons/commit/2985b1c2b519e1a298d88e16f8e7172791e1eef1", "message": "Dispose composite disposables in UploadService", "committedDate": "2020-03-05T04:32:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE4NTYyOQ==", "url": "https://github.com/commons-app/apps-android-commons/pull/3324#discussion_r388185629", "bodyText": "This is assigned but never read, can be deleted", "author": "macgills", "createdAt": "2020-03-05T09:54:34Z", "path": "app/src/main/java/fr/free/nrw/commons/contributions/ContributionsListFragment.java", "diffHunk": "@@ -72,6 +75,7 @@\n     private String lastVisibleItemID;", "originalCommit": "2985b1c2b519e1a298d88e16f8e7172791e1eef1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE4OTk4NA==", "url": "https://github.com/commons-app/apps-android-commons/pull/3324#discussion_r388189984", "bodyText": "you could just delete all entries in the DB here, that is functionally what you want to happen right? And then the livedata will emit the empty list for you. Hmmm no we are banking too much on that web request being successful.\nActually the more I think about this the weirder it is, \"show nothing because we are loading\" was this how it worked previously?", "author": "macgills", "createdAt": "2020-03-05T10:01:48Z", "path": "app/src/main/java/fr/free/nrw/commons/contributions/ContributionsPresenter.java", "diffHunk": "@@ -3,104 +3,156 @@\n import android.content.Context;\n import android.database.Cursor;\n import android.database.DataSetObserver;\n-import android.os.Bundle;\n+import android.text.TextUtils;\n+import android.util.Log;\n \n import androidx.annotation.NonNull;\n import androidx.annotation.Nullable;\n-import androidx.loader.content.CursorLoader;\n-import androidx.loader.content.Loader;\n+import androidx.lifecycle.LifecycleOwner;\n+import androidx.lifecycle.LiveData;\n+import androidx.lifecycle.Observer;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n \n import javax.inject.Inject;\n+import javax.inject.Named;\n \n+import fr.free.nrw.commons.CommonsApplication;\n import fr.free.nrw.commons.Media;\n+import fr.free.nrw.commons.auth.SessionManager;\n import fr.free.nrw.commons.contributions.ContributionsContract.UserActionListener;\n+import fr.free.nrw.commons.db.AppDatabase;\n+import fr.free.nrw.commons.di.CommonsApplicationModule;\n+import fr.free.nrw.commons.mwapi.UserClient;\n+import fr.free.nrw.commons.utils.ExecutorUtils;\n+import fr.free.nrw.commons.utils.NetworkUtils;\n+import io.reactivex.Observable;\n+import io.reactivex.Scheduler;\n+import io.reactivex.SingleObserver;\n+import io.reactivex.android.schedulers.AndroidSchedulers;\n+import io.reactivex.disposables.CompositeDisposable;\n+import io.reactivex.disposables.Disposable;\n+import io.reactivex.schedulers.Schedulers;\n import timber.log.Timber;\n \n-import static fr.free.nrw.commons.contributions.ContributionDao.Table.ALL_FIELDS;\n-import static fr.free.nrw.commons.contributions.ContributionsContentProvider.BASE_URI;\n-import static fr.free.nrw.commons.settings.Prefs.UPLOADS_SHOWING;\n+import static fr.free.nrw.commons.contributions.Contribution.STATE_COMPLETED;\n \n /**\n  * The presenter class for Contributions\n  */\n-public class ContributionsPresenter extends DataSetObserver implements UserActionListener {\n+public class ContributionsPresenter implements UserActionListener {\n \n     private final ContributionsRepository repository;\n+    private final Scheduler mainThreadScheduler;\n+    private final Scheduler ioThreadScheduler;\n+    private CompositeDisposable compositeDisposable;\n     private ContributionsContract.View view;\n-    private Cursor cursor;\n+    private List<Contribution> contributionList=new ArrayList<>();\n \n     @Inject\n     Context context;\n \n     @Inject\n-    ContributionsPresenter(ContributionsRepository repository) {\n+    UserClient userClient;\n+\n+    @Inject\n+    AppDatabase appDatabase;\n+\n+    @Inject\n+    SessionManager sessionManager;\n+    private LifecycleOwner lifeCycleOwner;\n+\n+    @Inject\n+    ContributionsPresenter(ContributionsRepository repository, @Named(CommonsApplicationModule.MAIN_THREAD) Scheduler mainThreadScheduler,@Named(CommonsApplicationModule.IO_THREAD) Scheduler ioThreadScheduler) {\n         this.repository = repository;\n+        this.mainThreadScheduler=mainThreadScheduler;\n+        this.ioThreadScheduler=ioThreadScheduler;\n     }\n \n+    private String user;\n+\n     @Override\n     public void onAttachView(ContributionsContract.View view) {\n         this.view = view;\n-        if (null != cursor) {\n-            try {\n-                cursor.registerDataSetObserver(this);\n-            } catch (IllegalStateException e) {//Cursor might be already registered\n-                Timber.d(e);\n-            }\n-        }\n+        compositeDisposable=new CompositeDisposable();\n     }\n \n-    @Override\n-    public void onDetachView() {\n-        this.view = null;\n-        if (null != cursor) {\n-            try {\n-                cursor.unregisterDataSetObserver(this);\n-            } catch (Exception e) {//Cursor might not be already registered\n-                Timber.d(e);\n-            }\n-        }\n+    public void setLifeCycleOwner(LifecycleOwner lifeCycleOwner){\n+        this.lifeCycleOwner=lifeCycleOwner;\n     }\n \n-    @NonNull\n-    @Override\n-    public Loader<Cursor> onCreateLoader(int id, @Nullable Bundle args) {\n-        int preferredNumberOfUploads = repository.get(UPLOADS_SHOWING);\n-        return new CursorLoader(context, BASE_URI,\n-                ALL_FIELDS, \"\", null,\n-                ContributionDao.CONTRIBUTION_SORT + \"LIMIT \"\n-                        + (preferredNumberOfUploads>0?preferredNumberOfUploads:100));\n+    public void fetchContributions() {\n+        Timber.d(\"fetch  Contributions\");\n+        LiveData<List<Contribution>> liveDataContributions = repository.fetchContributions();\n+        if(null!=lifeCycleOwner) {\n+             liveDataContributions.observe(lifeCycleOwner, this::showContributions);\n+        }\n+\n+        if (NetworkUtils.isInternetConnectionEstablished(CommonsApplication.getInstance()) && shouldFetchContributions()) {\n+            Timber.d(\"fetching contributions: \");\n+            view.showProgress(true);\n+            this.user = sessionManager.getUserName();\n+            view.showContributions(Collections.emptyList());", "originalCommit": "2985b1c2b519e1a298d88e16f8e7172791e1eef1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE5MTM4Ng==", "url": "https://github.com/commons-app/apps-android-commons/pull/3324#discussion_r388191386", "bodyText": "The previous fetches were from a content sync-adapter but yes, the methods intentions were the same as the one we have now", "author": "ashishkumar468", "createdAt": "2020-03-05T10:04:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE4OTk4NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE5MDIzMg==", "url": "https://github.com/commons-app/apps-android-commons/pull/3324#discussion_r388190232", "bodyText": "isEmpty", "author": "macgills", "createdAt": "2020-03-05T10:02:15Z", "path": "app/src/main/java/fr/free/nrw/commons/contributions/ContributionsPresenter.java", "diffHunk": "@@ -3,104 +3,156 @@\n import android.content.Context;\n import android.database.Cursor;\n import android.database.DataSetObserver;\n-import android.os.Bundle;\n+import android.text.TextUtils;\n+import android.util.Log;\n \n import androidx.annotation.NonNull;\n import androidx.annotation.Nullable;\n-import androidx.loader.content.CursorLoader;\n-import androidx.loader.content.Loader;\n+import androidx.lifecycle.LifecycleOwner;\n+import androidx.lifecycle.LiveData;\n+import androidx.lifecycle.Observer;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n \n import javax.inject.Inject;\n+import javax.inject.Named;\n \n+import fr.free.nrw.commons.CommonsApplication;\n import fr.free.nrw.commons.Media;\n+import fr.free.nrw.commons.auth.SessionManager;\n import fr.free.nrw.commons.contributions.ContributionsContract.UserActionListener;\n+import fr.free.nrw.commons.db.AppDatabase;\n+import fr.free.nrw.commons.di.CommonsApplicationModule;\n+import fr.free.nrw.commons.mwapi.UserClient;\n+import fr.free.nrw.commons.utils.ExecutorUtils;\n+import fr.free.nrw.commons.utils.NetworkUtils;\n+import io.reactivex.Observable;\n+import io.reactivex.Scheduler;\n+import io.reactivex.SingleObserver;\n+import io.reactivex.android.schedulers.AndroidSchedulers;\n+import io.reactivex.disposables.CompositeDisposable;\n+import io.reactivex.disposables.Disposable;\n+import io.reactivex.schedulers.Schedulers;\n import timber.log.Timber;\n \n-import static fr.free.nrw.commons.contributions.ContributionDao.Table.ALL_FIELDS;\n-import static fr.free.nrw.commons.contributions.ContributionsContentProvider.BASE_URI;\n-import static fr.free.nrw.commons.settings.Prefs.UPLOADS_SHOWING;\n+import static fr.free.nrw.commons.contributions.Contribution.STATE_COMPLETED;\n \n /**\n  * The presenter class for Contributions\n  */\n-public class ContributionsPresenter extends DataSetObserver implements UserActionListener {\n+public class ContributionsPresenter implements UserActionListener {\n \n     private final ContributionsRepository repository;\n+    private final Scheduler mainThreadScheduler;\n+    private final Scheduler ioThreadScheduler;\n+    private CompositeDisposable compositeDisposable;\n     private ContributionsContract.View view;\n-    private Cursor cursor;\n+    private List<Contribution> contributionList=new ArrayList<>();\n \n     @Inject\n     Context context;\n \n     @Inject\n-    ContributionsPresenter(ContributionsRepository repository) {\n+    UserClient userClient;\n+\n+    @Inject\n+    AppDatabase appDatabase;\n+\n+    @Inject\n+    SessionManager sessionManager;\n+    private LifecycleOwner lifeCycleOwner;\n+\n+    @Inject\n+    ContributionsPresenter(ContributionsRepository repository, @Named(CommonsApplicationModule.MAIN_THREAD) Scheduler mainThreadScheduler,@Named(CommonsApplicationModule.IO_THREAD) Scheduler ioThreadScheduler) {\n         this.repository = repository;\n+        this.mainThreadScheduler=mainThreadScheduler;\n+        this.ioThreadScheduler=ioThreadScheduler;\n     }\n \n+    private String user;\n+\n     @Override\n     public void onAttachView(ContributionsContract.View view) {\n         this.view = view;\n-        if (null != cursor) {\n-            try {\n-                cursor.registerDataSetObserver(this);\n-            } catch (IllegalStateException e) {//Cursor might be already registered\n-                Timber.d(e);\n-            }\n-        }\n+        compositeDisposable=new CompositeDisposable();\n     }\n \n-    @Override\n-    public void onDetachView() {\n-        this.view = null;\n-        if (null != cursor) {\n-            try {\n-                cursor.unregisterDataSetObserver(this);\n-            } catch (Exception e) {//Cursor might not be already registered\n-                Timber.d(e);\n-            }\n-        }\n+    public void setLifeCycleOwner(LifecycleOwner lifeCycleOwner){\n+        this.lifeCycleOwner=lifeCycleOwner;\n     }\n \n-    @NonNull\n-    @Override\n-    public Loader<Cursor> onCreateLoader(int id, @Nullable Bundle args) {\n-        int preferredNumberOfUploads = repository.get(UPLOADS_SHOWING);\n-        return new CursorLoader(context, BASE_URI,\n-                ALL_FIELDS, \"\", null,\n-                ContributionDao.CONTRIBUTION_SORT + \"LIMIT \"\n-                        + (preferredNumberOfUploads>0?preferredNumberOfUploads:100));\n+    public void fetchContributions() {\n+        Timber.d(\"fetch  Contributions\");\n+        LiveData<List<Contribution>> liveDataContributions = repository.fetchContributions();\n+        if(null!=lifeCycleOwner) {\n+             liveDataContributions.observe(lifeCycleOwner, this::showContributions);\n+        }\n+\n+        if (NetworkUtils.isInternetConnectionEstablished(CommonsApplication.getInstance()) && shouldFetchContributions()) {\n+            Timber.d(\"fetching contributions: \");\n+            view.showProgress(true);\n+            this.user = sessionManager.getUserName();\n+            view.showContributions(Collections.emptyList());\n+            compositeDisposable.add(userClient.logEvents(user)\n+                    .subscribeOn(ioThreadScheduler)\n+                    .observeOn(mainThreadScheduler)\n+                    .doOnNext(mwQueryLogEvent -> Timber.d(\"Received image %s\", mwQueryLogEvent.title()))\n+                    .filter(mwQueryLogEvent -> !mwQueryLogEvent.isDeleted()).doOnNext(mwQueryLogEvent -> Timber.d(\"Image %s passed filters\", mwQueryLogEvent.title()))\n+                    .map(image -> {\n+                        Contribution contribution = new Contribution(null, null, image.title(),\n+                                \"\", -1, image.date(), image.date(), user,\n+                                \"\", \"\", STATE_COMPLETED);\n+                        return contribution;\n+                    })\n+                    .toList()\n+                    .subscribe(this::saveContributionsToDB, error -> {\n+                        Timber.e(\"Failed to fetch contributions: %s\", error.getMessage());\n+                    }));\n+        }\n     }\n \n-    @Override\n-    public void onLoadFinished(@NonNull Loader<Cursor> loader, Cursor cursor) {\n+    private void showContributions(@NonNull List<Contribution> contributions) {\n         view.showProgress(false);\n-        if (null != cursor && cursor.getCount() > 0) {\n-            view.showWelcomeTip(false);\n-            view.showNoContributionsUI(false);\n-            view.setUploadCount(cursor.getCount());\n-        } else {\n+        if (contributions.size() == 0) {", "originalCommit": "2985b1c2b519e1a298d88e16f8e7172791e1eef1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "faf9f4126f5472c6aa4cdaee84ad354f82d7985e", "url": "https://github.com/commons-app/apps-android-commons/commit/faf9f4126f5472c6aa4cdaee84ad354f82d7985e", "message": "replaced size check with isEmpty ContributionsPresenter", "committedDate": "2020-03-05T10:06:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE5MzQwNg==", "url": "https://github.com/commons-app/apps-android-commons/pull/3324#discussion_r388193406", "bodyText": "this could be a Single too, or a Completeable if you don't really care about the return value ehich you don't because it is void", "author": "macgills", "createdAt": "2020-03-05T10:08:26Z", "path": "app/src/main/java/fr/free/nrw/commons/contributions/ContributionsPresenter.java", "diffHunk": "@@ -3,104 +3,156 @@\n import android.content.Context;\n import android.database.Cursor;\n import android.database.DataSetObserver;\n-import android.os.Bundle;\n+import android.text.TextUtils;\n+import android.util.Log;\n \n import androidx.annotation.NonNull;\n import androidx.annotation.Nullable;\n-import androidx.loader.content.CursorLoader;\n-import androidx.loader.content.Loader;\n+import androidx.lifecycle.LifecycleOwner;\n+import androidx.lifecycle.LiveData;\n+import androidx.lifecycle.Observer;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n \n import javax.inject.Inject;\n+import javax.inject.Named;\n \n+import fr.free.nrw.commons.CommonsApplication;\n import fr.free.nrw.commons.Media;\n+import fr.free.nrw.commons.auth.SessionManager;\n import fr.free.nrw.commons.contributions.ContributionsContract.UserActionListener;\n+import fr.free.nrw.commons.db.AppDatabase;\n+import fr.free.nrw.commons.di.CommonsApplicationModule;\n+import fr.free.nrw.commons.mwapi.UserClient;\n+import fr.free.nrw.commons.utils.ExecutorUtils;\n+import fr.free.nrw.commons.utils.NetworkUtils;\n+import io.reactivex.Observable;\n+import io.reactivex.Scheduler;\n+import io.reactivex.SingleObserver;\n+import io.reactivex.android.schedulers.AndroidSchedulers;\n+import io.reactivex.disposables.CompositeDisposable;\n+import io.reactivex.disposables.Disposable;\n+import io.reactivex.schedulers.Schedulers;\n import timber.log.Timber;\n \n-import static fr.free.nrw.commons.contributions.ContributionDao.Table.ALL_FIELDS;\n-import static fr.free.nrw.commons.contributions.ContributionsContentProvider.BASE_URI;\n-import static fr.free.nrw.commons.settings.Prefs.UPLOADS_SHOWING;\n+import static fr.free.nrw.commons.contributions.Contribution.STATE_COMPLETED;\n \n /**\n  * The presenter class for Contributions\n  */\n-public class ContributionsPresenter extends DataSetObserver implements UserActionListener {\n+public class ContributionsPresenter implements UserActionListener {\n \n     private final ContributionsRepository repository;\n+    private final Scheduler mainThreadScheduler;\n+    private final Scheduler ioThreadScheduler;\n+    private CompositeDisposable compositeDisposable;\n     private ContributionsContract.View view;\n-    private Cursor cursor;\n+    private List<Contribution> contributionList=new ArrayList<>();\n \n     @Inject\n     Context context;\n \n     @Inject\n-    ContributionsPresenter(ContributionsRepository repository) {\n+    UserClient userClient;\n+\n+    @Inject\n+    AppDatabase appDatabase;\n+\n+    @Inject\n+    SessionManager sessionManager;\n+    private LifecycleOwner lifeCycleOwner;\n+\n+    @Inject\n+    ContributionsPresenter(ContributionsRepository repository, @Named(CommonsApplicationModule.MAIN_THREAD) Scheduler mainThreadScheduler,@Named(CommonsApplicationModule.IO_THREAD) Scheduler ioThreadScheduler) {\n         this.repository = repository;\n+        this.mainThreadScheduler=mainThreadScheduler;\n+        this.ioThreadScheduler=ioThreadScheduler;\n     }\n \n+    private String user;\n+\n     @Override\n     public void onAttachView(ContributionsContract.View view) {\n         this.view = view;\n-        if (null != cursor) {\n-            try {\n-                cursor.registerDataSetObserver(this);\n-            } catch (IllegalStateException e) {//Cursor might be already registered\n-                Timber.d(e);\n-            }\n-        }\n+        compositeDisposable=new CompositeDisposable();\n     }\n \n-    @Override\n-    public void onDetachView() {\n-        this.view = null;\n-        if (null != cursor) {\n-            try {\n-                cursor.unregisterDataSetObserver(this);\n-            } catch (Exception e) {//Cursor might not be already registered\n-                Timber.d(e);\n-            }\n-        }\n+    public void setLifeCycleOwner(LifecycleOwner lifeCycleOwner){\n+        this.lifeCycleOwner=lifeCycleOwner;\n     }\n \n-    @NonNull\n-    @Override\n-    public Loader<Cursor> onCreateLoader(int id, @Nullable Bundle args) {\n-        int preferredNumberOfUploads = repository.get(UPLOADS_SHOWING);\n-        return new CursorLoader(context, BASE_URI,\n-                ALL_FIELDS, \"\", null,\n-                ContributionDao.CONTRIBUTION_SORT + \"LIMIT \"\n-                        + (preferredNumberOfUploads>0?preferredNumberOfUploads:100));\n+    public void fetchContributions() {\n+        Timber.d(\"fetch  Contributions\");\n+        LiveData<List<Contribution>> liveDataContributions = repository.fetchContributions();\n+        if(null!=lifeCycleOwner) {\n+             liveDataContributions.observe(lifeCycleOwner, this::showContributions);\n+        }\n+\n+        if (NetworkUtils.isInternetConnectionEstablished(CommonsApplication.getInstance()) && shouldFetchContributions()) {\n+            Timber.d(\"fetching contributions: \");\n+            view.showProgress(true);\n+            this.user = sessionManager.getUserName();\n+            view.showContributions(Collections.emptyList());\n+            compositeDisposable.add(userClient.logEvents(user)\n+                    .subscribeOn(ioThreadScheduler)\n+                    .observeOn(mainThreadScheduler)\n+                    .doOnNext(mwQueryLogEvent -> Timber.d(\"Received image %s\", mwQueryLogEvent.title()))\n+                    .filter(mwQueryLogEvent -> !mwQueryLogEvent.isDeleted()).doOnNext(mwQueryLogEvent -> Timber.d(\"Image %s passed filters\", mwQueryLogEvent.title()))\n+                    .map(image -> {\n+                        Contribution contribution = new Contribution(null, null, image.title(),\n+                                \"\", -1, image.date(), image.date(), user,\n+                                \"\", \"\", STATE_COMPLETED);\n+                        return contribution;\n+                    })\n+                    .toList()\n+                    .subscribe(this::saveContributionsToDB, error -> {\n+                        Timber.e(\"Failed to fetch contributions: %s\", error.getMessage());\n+                    }));\n+        }\n     }\n \n-    @Override\n-    public void onLoadFinished(@NonNull Loader<Cursor> loader, Cursor cursor) {\n+    private void showContributions(@NonNull List<Contribution> contributions) {\n         view.showProgress(false);\n-        if (null != cursor && cursor.getCount() > 0) {\n-            view.showWelcomeTip(false);\n-            view.showNoContributionsUI(false);\n-            view.setUploadCount(cursor.getCount());\n-        } else {\n+        if (contributions.size() == 0) {\n             view.showWelcomeTip(true);\n             view.showNoContributionsUI(true);\n+        } else {\n+            view.showWelcomeTip(false);\n+            view.showNoContributionsUI(false);\n+            view.setUploadCount(contributions.size());\n+            view.showContributions(contributions);\n+            this.contributionList.clear();\n+            this.contributionList.addAll(contributions);\n+        }\n+    }\n+\n+    private void saveContributionsToDB(List<Contribution> contributions) {\n+        Timber.e(\"Fetched: \"+contributions.size()+\" contributions \"+\" saving to db\");\n+        ExecutorUtils.get().submit(() -> repository.save(contributions));", "originalCommit": "2985b1c2b519e1a298d88e16f8e7172791e1eef1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE5Mzk5Nw==", "url": "https://github.com/commons-app/apps-android-commons/pull/3324#discussion_r388193997", "bodyText": "Yes, I must have missed it somehow, adding it, thanks for pointing it out", "author": "ashishkumar468", "createdAt": "2020-03-05T10:09:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE5MzQwNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE5NDU3NA==", "url": "https://github.com/commons-app/apps-android-commons/pull/3324#discussion_r388194574", "bodyText": "Can we retrieve our actual gson instance? I don't care if it has to be exposed on the component level", "author": "macgills", "createdAt": "2020-03-05T10:10:33Z", "path": "app/src/main/java/fr/free/nrw/commons/db/Converters.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package fr.free.nrw.commons.db;\n+\n+import android.net.Uri;\n+\n+import androidx.room.TypeConverter;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.reflect.TypeToken;\n+\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.HashMap;\n+\n+import fr.free.nrw.commons.location.LatLng;\n+\n+public class Converters {\n+    private static Gson gson;\n+    public static Gson getGson(){\n+        if(null==gson){\n+            gson=new Gson();", "originalCommit": "2985b1c2b519e1a298d88e16f8e7172791e1eef1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE5NDk1Nw==", "url": "https://github.com/commons-app/apps-android-commons/pull/3324#discussion_r388194957", "bodyText": "You mean a static instance from there?", "author": "ashishkumar468", "createdAt": "2020-03-05T10:11:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE5NDU3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIxODQ0OA==", "url": "https://github.com/commons-app/apps-android-commons/pull/3324#discussion_r388218448", "bodyText": "You can expose the gson instance by writing a method in the component\nGson gson();\n\ncalling this method will use the rules defined in the module to give us our Gson which is a singelton, you just need to get a handle on the Component", "author": "macgills", "createdAt": "2020-03-05T10:54:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE5NDU3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA2MTcxMA==", "url": "https://github.com/commons-app/apps-android-commons/pull/3324#discussion_r389061710", "bodyText": "Used the Global Gson object, provided by the NetworkModule", "author": "ashishkumar468", "createdAt": "2020-03-06T18:12:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE5NDU3NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE5NTAyNQ==", "url": "https://github.com/commons-app/apps-android-commons/pull/3324#discussion_r388195025", "bodyText": "put appDatabase in as a parameter, we don't need to hold onto it as a field", "author": "macgills", "createdAt": "2020-03-05T10:11:22Z", "path": "app/src/main/java/fr/free/nrw/commons/di/CommonsApplicationModule.java", "diffHunk": "@@ -229,4 +232,16 @@ public String provideLoggedInUsername() {\n     public QuadTree providesQuadTres() {\n         return new QuadTree<>(-180, -90, +180, +90);\n     }\n+\n+    @Provides\n+    @Singleton\n+    public AppDatabase provideAppDataBase() {\n+        appDatabase=Room.databaseBuilder(applicationContext, AppDatabase.class, \"commons_room.db\").build();\n+        return appDatabase;\n+    }\n+\n+    @Provides\n+    public ContributionDao providesContributiosDao() {", "originalCommit": "2985b1c2b519e1a298d88e16f8e7172791e1eef1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE5NTIyMw==", "url": "https://github.com/commons-app/apps-android-commons/pull/3324#discussion_r388195223", "bodyText": "also typo Contributios", "author": "macgills", "createdAt": "2020-03-05T10:11:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE5NTAyNQ=="}], "type": "inlineReview"}, {"oid": "48c998b640e93130f0639feae3e926a09cc461ea", "url": "https://github.com/commons-app/apps-android-commons/commit/48c998b640e93130f0639feae3e926a09cc461ea", "message": "transform saveContributions to a Completable", "committedDate": "2020-03-05T10:26:12Z", "type": "commit"}, {"oid": "5d484c1ca6d7add387bebf0b8279cf7796ad8f0c", "url": "https://github.com/commons-app/apps-android-commons/commit/5d484c1ca6d7add387bebf0b8279cf7796ad8f0c", "message": "Addressed comments in review\n* Typo in Contributions\n* ReasonBuilderTest (create media object instead of mocking)\n* Use global Gson object instead of creating a new one in Converters", "committedDate": "2020-03-06T18:08:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTYyNjc0Nw==", "url": "https://github.com/commons-app/apps-android-commons/pull/3324#discussion_r389626747", "bodyText": "I was hoping to see the use of the CommonsApplicationComponent. This has the same end result but is more brittle", "author": "macgills", "createdAt": "2020-03-09T12:24:31Z", "path": "app/src/main/java/fr/free/nrw/commons/db/Converters.java", "diffHunk": "@@ -0,0 +1,71 @@\n+package fr.free.nrw.commons.db;\n+\n+import android.net.Uri;\n+\n+import androidx.room.TypeConverter;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.reflect.TypeToken;\n+\n+import org.wikipedia.json.GsonUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.HashMap;\n+\n+import fr.free.nrw.commons.location.LatLng;\n+\n+public class Converters {\n+    private static Gson gson= GsonUtil.getDefaultGson();", "originalCommit": "5d484c1ca6d7add387bebf0b8279cf7796ad8f0c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "dc4d76a44aa90f981c723df5a81bfbd8ae376092", "url": "https://github.com/commons-app/apps-android-commons/commit/dc4d76a44aa90f981c723df5a81bfbd8ae376092", "message": "Provide Gson to Converters from the CommonsApplicationComponent", "committedDate": "2020-03-09T15:49:46Z", "type": "commit"}, {"oid": "7f1c82b3503370978fa4461b7f459fee82e5bf8a", "url": "https://github.com/commons-app/apps-android-commons/commit/7f1c82b3503370978fa4461b7f459fee82e5bf8a", "message": "use static method instead of field instead of static field to provide GSON in Converters", "committedDate": "2020-03-09T16:02:08Z", "type": "commit"}, {"oid": "1181a811c4a2b4c55a6e547aacf7e92da938a014", "url": "https://github.com/commons-app/apps-android-commons/commit/1181a811c4a2b4c55a6e547aacf7e92da938a014", "message": "Modified gitignore to exclude captures/*", "committedDate": "2020-03-09T16:04:18Z", "type": "commit"}]}