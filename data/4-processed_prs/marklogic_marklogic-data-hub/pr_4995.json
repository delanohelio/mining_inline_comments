{"pr_number": 4995, "pr_title": "DHFPROD-4382: Add matching step to flow", "pr_createdAt": "2020-12-14T18:03:19Z", "pr_url": "https://github.com/marklogic/marklogic-data-hub/pull/4995", "timeline": [{"oid": "9bc80143ff499bffe6a7ede1d26a0c4d82a10aba", "url": "https://github.com/marklogic/marklogic-data-hub/commit/9bc80143ff499bffe6a7ede1d26a0c4d82a10aba", "message": "DHFPROD-4382: Add matching step to flow", "committedDate": "2020-12-14T18:08:30Z", "type": "forcePushed"}, {"oid": "3b307295223f2d04030a5ec748ed85d559cf42b6", "url": "https://github.com/marklogic/marklogic-data-hub/commit/3b307295223f2d04030a5ec748ed85d559cf42b6", "message": "DHFPROD-4382: Add matching step to flow", "committedDate": "2020-12-14T20:10:22Z", "type": "forcePushed"}, {"oid": "6abc62a8ff07aa47356f9049e588990176b6bbdc", "url": "https://github.com/marklogic/marklogic-data-hub/commit/6abc62a8ff07aa47356f9049e588990176b6bbdc", "message": "DHFPROD-4382: Add matching step to flow", "committedDate": "2020-12-15T06:28:25Z", "type": "forcePushed"}, {"oid": "6bb29109eb3537cd3906f4c4ff274c8aa57683a0", "url": "https://github.com/marklogic/marklogic-data-hub/commit/6bb29109eb3537cd3906f4c4ff274c8aa57683a0", "message": "DHFPROD-4382: Add matching step to flow", "committedDate": "2020-12-15T06:30:34Z", "type": "forcePushed"}, {"oid": "fc9143385f28332a71856f7edddefaa883321a6c", "url": "https://github.com/marklogic/marklogic-data-hub/commit/fc9143385f28332a71856f7edddefaa883321a6c", "message": "DHFPROD-4382: Add matching step to flow", "committedDate": "2020-12-15T21:13:44Z", "type": "commit"}, {"oid": "fc9143385f28332a71856f7edddefaa883321a6c", "url": "https://github.com/marklogic/marklogic-data-hub/commit/fc9143385f28332a71856f7edddefaa883321a6c", "message": "DHFPROD-4382: Add matching step to flow", "committedDate": "2020-12-15T21:13:44Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzcyNzYyNQ==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4995#discussion_r543727625", "bodyText": "@brucean52 can we also add validations for checking whether we are getting redirected to flows and the match step is added to the existing flow/the newly added flow.", "author": "ngodugu-marklogic", "createdAt": "2020-12-15T22:17:49Z", "path": "marklogic-data-hub-central/ui/src/components/entities/matching/matching-card.test.tsx", "diffHunk": "@@ -116,4 +119,161 @@ describe(\"Matching cards view component\", () => {\n     expect(queryAllByText(\"Yes\")).toHaveLength(0);\n     expect(deleteMatchingArtifact).not.toBeCalled();\n   });\n+\n+  it(\"can render/edit match steps with writeMatchMerge authority\", () => {\n+    const deleteMatchingArtifact = jest.fn();\n+    const {getByText, getByLabelText, getByTestId, queryAllByRole} =  render(\n+      <Router>\n+        <MatchingCard\n+          {...defaultProps}\n+          deleteMatchingArtifact={deleteMatchingArtifact}\n+        />\n+      </Router>\n+    );\n+\n+    expect(getByLabelText(\"icon: plus-circle\")).toBeInTheDocument();\n+    expect(getByText(\"matchCustomers\")).toBeInTheDocument();\n+    expect(getByText(\"matchCustomersEmpty\")).toBeInTheDocument();\n+\n+    //Verify if the card renders fine\n+    expect(getByTestId(\"matchCustomers-edit\")).toBeInTheDocument();\n+    expect(getByTestId(\"matchCustomersEmpty-edit\")).toBeInTheDocument();\n+    expect(queryAllByRole(\"disabled-delete-matching\")).toHaveLength(0);\n+\n+    // check if delete tooltip appears and user is able to proceed with deletion of the step\n+    userEvent.hover(getByTestId(\"matchCustomers-delete\"));\n+    wait(() => expect(getByText(\"Delete\")).toBeInTheDocument());\n+    userEvent.click(getByTestId(\"matchCustomers-delete\"));\n+    wait(() => expect(getByLabelText(\"delete-step-text\")).toBeInTheDocument());\n+    userEvent.click(getByText(\"Yes\"));\n+    expect(deleteMatchingArtifact).toBeCalled();\n+  });\n+\n+  it(\"can add a step to a new flow\", () => {\n+    const {getByText, getByTestId} =  render(\n+      <Router>\n+        <MatchingCard {...defaultProps}/>\n+      </Router>\n+    );\n+\n+    expect(getByText(\"matchCustomers\")).toBeInTheDocument();\n+    expect(getByText(\"matchCustomersEmpty\")).toBeInTheDocument();\n+    fireEvent.mouseOver(getByTestId(\"Customer-matchCustomers-step\"));\n+\n+    wait(() => {\n+      expect(getByText(\"Add Step to a new flow\")).toBeInTheDocument();\n+      userEvent.click(getByText(\"Add Step to a new flow\"));\n+    });\n+    wait(() => {\n+      expect(screen.getByText(\"NewFlow\")).toBeInTheDocument();\n+      userEvent.type(screen.getByPlaceholderText(\"Enter name\"), \"testFlow\");\n+      userEvent.click(screen.getByText(\"Save\"));\n+    });\n+    // Check if the /tiles/run/add route has been called\n+    wait(() => { expect(mockHistoryPush).toHaveBeenCalledWith(\"/tiles/run/add\"); });\n+  });\n+\n+  it(\"can add a step to new flow from run menu\", () => {\n+    const {getByText, getByTestId} =  render(\n+      <Router>\n+        <MatchingCard {...defaultProps}/>\n+      </Router>\n+    );\n+\n+    expect(getByText(\"matchCustomers\")).toBeInTheDocument();\n+    expect(getByText(\"matchCustomersEmpty\")).toBeInTheDocument();\n+    userEvent.click(getByTestId(\"matchCustomers-run\"));\n+    wait(() => {\n+      expect(getByText(\"Run Step in a new flow\")).toBeInTheDocument();\n+      userEvent.click(getByText(\"Run Step in a new flow\"));\n+    });\n+    wait(() => {\n+      expect(screen.getByText(\"NewFlow\")).toBeInTheDocument();\n+      userEvent.type(screen.getByPlaceholderText(\"Enter name\"), \"testFlow\");\n+      userEvent.click(screen.getByText(\"Save\"));\n+    });\n+    // Check if the /tiles/run/add route has been called\n+    wait(() => { expect(mockHistoryPush).toHaveBeenCalledWith(\"/tiles/run/add\"); });\n+  });\n+\n+  it(\"can add a step to an existing flow\", () => {\n+    const {getByText, getByTestId, getByLabelText, queryByText} =  render(\n+      <Router>\n+        <MatchingCard {...defaultProps}/>\n+      </Router>\n+    );\n+\n+    expect(getByText(\"matchCustomers\")).toBeInTheDocument();\n+\n+    //mouseover to trigger flow menu\n+    fireEvent.mouseOver(getByTestId(\"Customer-matchCustomers-step\"));\n+    wait(() => {\n+      expect(getByText(\"Run Step in an existing flow\")).toBeInTheDocument();\n+      //mouse out for card view\n+      fireEvent.mouseOut(getByTestId(\"Customer-matchCustomers-step\"));\n+    });\n+\n+    wait(() => {\n+      expect(queryByText(\"Run Step in an existing flow\")).toBeNull();\n+      fireEvent.mouseOver(getByTestId(\"Customer-matchCustomers-step\"));\n+    });\n+\n+    wait(() => {\n+      expect(getByText(\"Run Step in an existing flow\")).toBeInTheDocument();\n+      userEvent.click(getByTestId(\"matchCustomers-flowsList\"));\n+      userEvent.click(getByLabelText(\"customerJSONFlow-option\"));\n+    });\n+\n+    wait(() => {\n+      expect(getByLabelText(\"step-not-in-flow-run\")).toBeInTheDocument();\n+      userEvent.click(getByTestId(\"matchCustomers-to-test-Confirm\"));\n+    });\n+    // Check if the /tiles/run/add route has been called\n+    wait(() => { expect(mockHistoryPush).toHaveBeenCalledWith(\"/tiles/run/add\"); });\n+  });\n+\n+  it(\"can add a step to an existing flow from run menu\", () => {\n+    const {getByText, getByTestId, getByLabelText} =  render(\n+      <Router>\n+        <MatchingCard {...defaultProps}/>\n+      </Router>\n+    );\n+\n+    expect(getByText(\"matchCustomers\")).toBeInTheDocument();\n+    expect(getByText(\"matchCustomersEmpty\")).toBeInTheDocument();\n+    userEvent.click(getByTestId(\"matchCustomers-run\"));\n+    wait(() => {\n+      expect(getByText(\"Run Step in an existing flow\")).toBeInTheDocument();\n+      userEvent.click(getByTestId(\"matchCustomers-run-flowsList\"));\n+      userEvent.click(getByLabelText(\"customerJSONFlow-run-option\"));\n+    });\n+    wait(() => {\n+      expect(getByLabelText(\"step-not-in-flow-run\")).toBeInTheDocument();\n+      userEvent.click(getByTestId(\"matchCustomers-to-test-Confirm\"));\n+    });\n+    // Check if the /tiles/run/add route has been called\n+    wait(() => { expect(mockHistoryPush).toHaveBeenCalledWith(\"/tiles/run/add\"); });", "originalCommit": "fc9143385f28332a71856f7edddefaa883321a6c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzc0ODQxMw==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4995#discussion_r543748413", "bodyText": "As per discussion with Bruce, will be taken care as part of DHFPROD-4548.", "author": "ngodugu-marklogic", "createdAt": "2020-12-15T22:57:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzcyNzYyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mzc0OTE0OQ==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4995#discussion_r543749149", "bodyText": "As we discussed, there's already a RTL test for this and I will add additional e2e testing for this in a later PR.", "author": "brucean52", "createdAt": "2020-12-15T22:59:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzcyNzYyNQ=="}], "type": "inlineReview"}]}