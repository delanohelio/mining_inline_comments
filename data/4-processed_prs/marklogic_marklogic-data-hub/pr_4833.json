{"pr_number": 4833, "pr_title": "DHFPROD-6184:  Write records via URI Template using spark connector", "pr_createdAt": "2020-11-09T08:39:26Z", "pr_url": "https://github.com/marklogic/marklogic-data-hub/pull/4833", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTk5ODM4Mg==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4833#discussion_r519998382", "bodyText": "This test class already has too many scenarios in it - let's make a new \"WriteDataWithUriTemplateTest\" to capture all of these tests. Makes it easy to see all the test coverage for this feature.", "author": "rjrudin", "createdAt": "2020-11-09T17:41:28Z", "path": "marklogic-data-hub-spark-connector/src/test/java/com/marklogic/hub/spark/sql/sources/v2/writer/WriteDataWithOptionsTest.java", "diffHunk": "@@ -6,13 +6,102 @@\n import com.marklogic.hub.spark.sql.sources.v2.AbstractSparkConnectorTest;\n import org.junit.jupiter.api.Test;\n \n+import org.apache.spark.sql.sources.v2.writer.WriterCommitMessage;\n+\n import java.util.Set;\n \n import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n \n public class WriteDataWithOptionsTest extends AbstractSparkConnectorTest {\n \n+    @Test", "originalCommit": "61417d4a6e4f1f423494d530455c9b9c71f281bd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA3MDQwMQ==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4833#discussion_r520070401", "bodyText": "ready for commit", "author": "josvanroosmalen", "createdAt": "2020-11-09T19:35:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTk5ODM4Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTk5ODgxNA==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4833#discussion_r519998814", "bodyText": "For consistency with other tests, do this:\nRuntimeException ex = assertThrows(RuntimeException.class, () -> initializeDataWriter....);\nassertEquals(\"...\", ex.getMessage());", "author": "rjrudin", "createdAt": "2020-11-09T17:42:07Z", "path": "marklogic-data-hub-spark-connector/src/test/java/com/marklogic/hub/spark/sql/sources/v2/writer/WriteDataWithOptionsTest.java", "diffHunk": "@@ -6,13 +6,102 @@\n import com.marklogic.hub.spark.sql.sources.v2.AbstractSparkConnectorTest;\n import org.junit.jupiter.api.Test;\n \n+import org.apache.spark.sql.sources.v2.writer.WriterCommitMessage;\n+\n import java.util.Set;\n \n import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n \n public class WriteDataWithOptionsTest extends AbstractSparkConnectorTest {\n \n+    @Test\n+    void testInvalidUriTemplate1() {\n+        String uriTemplate = \"{property1.json\";\n+        try {", "originalCommit": "61417d4a6e4f1f423494d530455c9b9c71f281bd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA3NDM1Ng==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4833#discussion_r520074356", "bodyText": "Ready for commit", "author": "josvanroosmalen", "createdAt": "2020-11-09T19:42:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTk5ODgxNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTk5OTgxOA==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4833#discussion_r519999818", "bodyText": "I don't think the endpoint should have knowledge of this - let generateUri check to see if uriTemplate is specified or not.", "author": "rjrudin", "createdAt": "2020-11-09T17:43:40Z", "path": "marklogic-data-hub/src/main/resources/ml-modules/root/marklogic-data-hub-spark-connector/writeRecords.sjs", "diffHunk": "@@ -32,13 +32,16 @@ const headers = writeLib.buildHeaders(endpointConstants);\n \n const flowUtils = new FlowUtils();\n \n+const uriTemplateRegEx = endpointConstants.uritemplate ? new RegExp(\"{([^}]+)}\",'gi') : null;", "originalCommit": "61417d4a6e4f1f423494d530455c9b9c71f281bd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA3NTEyOA==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4833#discussion_r520075128", "bodyText": "I want to mention that if I do that RegExp inside the generateURI then we do that e.g. 200 times (or what the batch size is) instead of once", "author": "josvanroosmalen", "createdAt": "2020-11-09T19:44:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTk5OTgxOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDEwNjAzMg==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4833#discussion_r520106032", "bodyText": "Good point, I didn't catch that. I'd still like to keep the generateUri function args as \"record, endpointConstant\". What do you think of this:\n\nThe endpoint will check for uriTemplate, and if it exists, it will add \"uriTemplateRegex\" to endpointConstants\nThe generateUri function will check for \"uriTemplateRegex\", then for \"uriTemplate\" (and if uriTemplate exists, it will construct a regex for it)\n\nThat allows for the optimization without complicating the interface of generateUri. Thoughts?", "author": "rjrudin", "createdAt": "2020-11-09T20:40:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTk5OTgxOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDExOTI2OQ==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4833#discussion_r520119269", "bodyText": "This is an excellent idea. Ready for commit", "author": "josvanroosmalen", "createdAt": "2020-11-09T21:04:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTk5OTgxOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDAwMDY1OA==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4833#discussion_r520000658", "bodyText": "Is this for the temporal use case, where we don't want the URI to be included in the list of collections if we're doing a temporal insert? Let's leave that out of this PR, it should be in a separate ticket that includes a test to ensure the URI is discarded.", "author": "rjrudin", "createdAt": "2020-11-09T17:45:01Z", "path": "marklogic-data-hub/src/main/resources/ml-modules/root/marklogic-data-hub-spark-connector/writeRecords.sjs", "diffHunk": "@@ -32,13 +32,16 @@ const headers = writeLib.buildHeaders(endpointConstants);\n \n const flowUtils = new FlowUtils();\n \n+const uriTemplateRegEx = endpointConstants.uritemplate ? new RegExp(\"{([^}]+)}\",'gi') : null;\n+\n inputArray.forEach(record => {\n-  const uri = writeLib.generateUri(record, endpointConstants);\n+  const uri = writeLib.generateUri(uriTemplateRegEx,record, endpointConstants);\n   const envelope = flowUtils.makeEnvelope(record, headers, [], consts.JSON);\n \n   if (insertOptions.temporalCollection) {\n     temporal.documentInsert(insertOptions.temporalCollection, uri, envelope, insertOptions.options);\n   } else {\n+    insertOptions.options.collections = !insertOptions.options.collections ? insertOptions.options.collections : insertOptions.options.collections.filter(x=>x!==uri);", "originalCommit": "61417d4a6e4f1f423494d530455c9b9c71f281bd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA3NjM2MQ==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4833#discussion_r520076361", "bodyText": "Sorry that was intended for the temporal case but placed under the wrong IF branch", "author": "josvanroosmalen", "createdAt": "2020-11-09T19:46:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDAwMDY1OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA3NjQzMg==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4833#discussion_r520076432", "bodyText": "ready for cmmit", "author": "josvanroosmalen", "createdAt": "2020-11-09T19:46:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDAwMDY1OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDAwMTMwNA==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4833#discussion_r520001304", "bodyText": "I think you need to test for \"array\" as well?", "author": "rjrudin", "createdAt": "2020-11-09T17:46:00Z", "path": "marklogic-data-hub/src/main/resources/ml-modules/root/marklogic-data-hub-spark-connector/writeLib.sjs", "diffHunk": "@@ -77,9 +77,34 @@ function buildMetadata(endpointConstants) {\n   return metadata;\n }\n \n-function generateUri(record, endpointConstants) {\n-  const uriPrefix = endpointConstants.uriprefix != null ? endpointConstants.uriprefix : \"\";\n-  return uriPrefix + sem.uuidString() + \".json\";\n+/**\n+ * Generate an uri for an input object.\n+ *\n+ * @param uriTemplateRegEx The precompiled URI regular expression or null if not used.\n+ * @param record The record we want to create an URI for.\n+ * @param endpointConstants The input options\n+ * @returns A random or template generated URI based on the options.\n+ */\n+function generateUri(uriTemplateRegEx,record, endpointConstants) {\n+  if ( uriTemplateRegEx === null ) {\n+    const uriPrefix = endpointConstants.uriprefix != null ? endpointConstants.uriprefix : \"\";\n+    return uriPrefix + sem.uuidString() + \".json\";\n+  } else {\n+    return endpointConstants.uritemplate.replace(uriTemplateRegEx, function (match, group) {\n+      let propertyValue = record[group];\n+      const type = typeof propertyValue;\n+      if ( propertyValue === null ) {\n+        throw new Error(\"Property [\"+group+\"] is null. This can't be used in a uri template.\");\n+      } else if ( type === \"undefined\") {\n+        throw new Error(\"Property [\"+group+\"] is undefined. This can't be used in a uri template.\");\n+      } else if ( type === \"object\" ) {", "originalCommit": "61417d4a6e4f1f423494d530455c9b9c71f281bd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA3NzIxMw==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4833#discussion_r520077213", "bodyText": "Will not fix. typeof [] = \"object\".", "author": "josvanroosmalen", "createdAt": "2020-11-09T19:47:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDAwMTMwNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDAwMjYxMw==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4833#discussion_r520002613", "bodyText": "For the error messages, we want to have strict control over the HTTP response code. So import ds-util.sjs and do the following:\nds.throwBadRequest(\"uriTemplate \" + uriTemplate + \" cannot be applied; property '\" + group + \"' is null\");", "author": "rjrudin", "createdAt": "2020-11-09T17:48:11Z", "path": "marklogic-data-hub/src/main/resources/ml-modules/root/marklogic-data-hub-spark-connector/writeLib.sjs", "diffHunk": "@@ -77,9 +77,34 @@ function buildMetadata(endpointConstants) {\n   return metadata;\n }\n \n-function generateUri(record, endpointConstants) {\n-  const uriPrefix = endpointConstants.uriprefix != null ? endpointConstants.uriprefix : \"\";\n-  return uriPrefix + sem.uuidString() + \".json\";\n+/**\n+ * Generate an uri for an input object.\n+ *\n+ * @param uriTemplateRegEx The precompiled URI regular expression or null if not used.\n+ * @param record The record we want to create an URI for.\n+ * @param endpointConstants The input options\n+ * @returns A random or template generated URI based on the options.\n+ */\n+function generateUri(uriTemplateRegEx,record, endpointConstants) {\n+  if ( uriTemplateRegEx === null ) {\n+    const uriPrefix = endpointConstants.uriprefix != null ? endpointConstants.uriprefix : \"\";\n+    return uriPrefix + sem.uuidString() + \".json\";\n+  } else {\n+    return endpointConstants.uritemplate.replace(uriTemplateRegEx, function (match, group) {\n+      let propertyValue = record[group];\n+      const type = typeof propertyValue;\n+      if ( propertyValue === null ) {\n+        throw new Error(\"Property [\"+group+\"] is null. This can't be used in a uri template.\");", "originalCommit": "61417d4a6e4f1f423494d530455c9b9c71f281bd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA4MDUzMw==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4833#discussion_r520080533", "bodyText": "ready for commit", "author": "josvanroosmalen", "createdAt": "2020-11-09T19:53:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDAwMjYxMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDAwNDAzOQ==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4833#discussion_r520004039", "bodyText": "For consistency with my proposal for error messages in the DS endpoint, let's do a format of:\nthrow new IllegalArgumentException(\"Cannot apply uriTemplate: \" + uriTemplate + \"; closing curly bracket found without opening bracket\");\n\nIllegalArgumentException is a bit more descriptive than RuntimeException. And we don't have a precedent for using \"[\" and \"]\" to surround user-provided inputs (it's a nice pattern, we just don't do it elsewhere).", "author": "rjrudin", "createdAt": "2020-11-09T17:50:25Z", "path": "marklogic-data-hub-spark-connector/src/main/java/com/marklogic/hub/spark/sql/sources/v2/writer/HubDataSourceWriter.java", "diffHunk": "@@ -101,6 +100,48 @@ private boolean atLeastOneWriteFailed(WriterCommitMessage[] messages) {\n         return false;\n     }\n \n+    /**\n+     * Validate the URI template if present in the options.\n+     *\n+     * A valid URI template:\n+     * - Has no missing opening or closing curly brackets.\n+     * - Each token has >0 characters.\n+     * - Has no nested curcly brackets.\n+     */\n+    private void validateUriTemplateIfPresent() {\n+        String uriTemplate = options.get(\"uritemplate\");\n+        if ( uriTemplate == null ) {\n+            return;\n+        }\n+        boolean inToken = false;\n+        int tokenSize = 0;\n+        char[] chars = uriTemplate.toCharArray();\n+        for ( char ch : chars ) {\n+            if ( ch == '}' ) {\n+                if ( !inToken ) {\n+                    throw new RuntimeException(\"Closing curly bracket found without opening bracket. uritemplate=[\" + uriTemplate + \"].\");", "originalCommit": "61417d4a6e4f1f423494d530455c9b9c71f281bd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA4MzMzOQ==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4833#discussion_r520083339", "bodyText": "ready for commit.", "author": "josvanroosmalen", "createdAt": "2020-11-09T19:58:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDAwNDAzOQ=="}], "type": "inlineReview"}, {"oid": "56f76cac564e288a361ce479e4c24c482cf49cc2", "url": "https://github.com/marklogic/marklogic-data-hub/commit/56f76cac564e288a361ce479e4c24c482cf49cc2", "message": "UriTemplate\n\nUri template\n\nDHFPROD-6184\n\nDHFPROD-6184", "committedDate": "2020-11-09T20:28:15Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDEwNDY1OA==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4833#discussion_r520104658", "bodyText": "Just do a revert on this file so that there are no changes to it", "author": "rjrudin", "createdAt": "2020-11-09T20:37:37Z", "path": "marklogic-data-hub-spark-connector/src/test/java/com/marklogic/hub/spark/sql/sources/v2/writer/WriteDataWithOptionsTest.java", "diffHunk": "@@ -6,13 +6,16 @@\n import com.marklogic.hub.spark.sql.sources.v2.AbstractSparkConnectorTest;\n import org.junit.jupiter.api.Test;\n \n+import org.apache.spark.sql.sources.v2.writer.WriterCommitMessage;", "originalCommit": "56f76cac564e288a361ce479e4c24c482cf49cc2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDExOTA5Mw==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4833#discussion_r520119093", "bodyText": "ready for commit", "author": "josvanroosmalen", "createdAt": "2020-11-09T21:04:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDEwNDY1OA=="}], "type": "inlineReview"}, {"oid": "90f5c228aecb94d79618e3c3ab9d9486a19364a8", "url": "https://github.com/marklogic/marklogic-data-hub/commit/90f5c228aecb94d79618e3c3ab9d9486a19364a8", "message": "DHFPROD-6184\n\nUriTemplate\n\nUri template\n\nDHFPROD-6184\n\nDHFPROD-6184\n\nUriTemplate\n\nUri template\n\nDHFPROD-6184\n\nDHFPROD-6184\n\nDHFPROD-6184\n\nDHFPROD-6184\n\nDHFPROD-6184\n\nDHFPROD-6184\n\nDHFPROD-6184", "committedDate": "2020-11-09T21:38:52Z", "type": "commit"}, {"oid": "90f5c228aecb94d79618e3c3ab9d9486a19364a8", "url": "https://github.com/marklogic/marklogic-data-hub/commit/90f5c228aecb94d79618e3c3ab9d9486a19364a8", "message": "DHFPROD-6184\n\nUriTemplate\n\nUri template\n\nDHFPROD-6184\n\nDHFPROD-6184\n\nUriTemplate\n\nUri template\n\nDHFPROD-6184\n\nDHFPROD-6184\n\nDHFPROD-6184\n\nDHFPROD-6184\n\nDHFPROD-6184\n\nDHFPROD-6184\n\nDHFPROD-6184", "committedDate": "2020-11-09T21:38:52Z", "type": "forcePushed"}]}