{"pr_number": 3860, "pr_title": "DHFPROD-3020: Filtering, Sorting in Source/Entity Mapping tables and Column Option Selector in Entity Table", "pr_createdAt": "2020-04-22T19:32:23Z", "pr_url": "https://github.com/marklogic/marklogic-data-hub/pull/3860", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQ3NTA4Mg==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3860#discussion_r413475082", "bodyText": "Can we update placeholder to be {Search ${dataIndex}} so its unique, ie Search key for source table and Search name for entity table, instead of using data-testid. We should use data-testid sparingly if there are other possible selectors.", "author": "bsrikan", "createdAt": "2020-04-23T03:06:33Z", "path": "marklogic-data-hub-central/ui/src/components/entities/mapping/source-entity-map/source-to-entity-map.tsx", "diffHunk": "@@ -304,46 +322,150 @@ const SourceToEntityMap = (props) => {\n         return mapStyle;\n     }\n \n+    //For filter search in source table\n+    let searchInput: any;\n+    //For Source Table\n+    const [searchSourceText,setSearchSourceText] = useState('');\n+    const [searchedSourceColumn,setSearchedSourceColumn] = useState('');\n+    //For Entity table\n+    const [searchEntityText,setSearchEntityText] = useState('');\n+    const [searchedEntityColumn,setSearchedEntityColumn] = useState('');\n+\n+    const handleColSearch = (selectedKeys, confirm, dataIndex) => {\n+        confirm();\n+        if(dataIndex === 'key'){\n+            setSearchSourceText(selectedKeys[0]);\n+            setSearchedSourceColumn(dataIndex); \n+        } else {\n+            setSearchEntityText(selectedKeys[0]);\n+            setSearchedEntityColumn(dataIndex);\n+        }\n+      };\n+\n+    const handleSearchReset = (clearFilters,dataIndex) => {\n+        clearFilters();\n+        if(dataIndex === 'key'){\n+            setSearchSourceText('');\n+            setSearchedSourceColumn(''); \n+        } else {\n+            setSearchEntityText('');\n+            setSearchedEntityColumn('');\n+        }\n+    };\n+\n+    const getColumnFilterProps = dataIndex => ({\n+        filterDropdown: ({ setSelectedKeys, selectedKeys, confirm, clearFilters }) => (\n+            <div className={styles.filterContainer}>\n+                <Input\n+                    ref={node => {\n+                        searchInput = node;\n+                    }}\n+                    data-testid={`searchInput-${dataIndex}`}\n+                    placeholder={`Search name`}", "originalCommit": "18d60b37934ef7b46326d1f0e90e26c3858e5792", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzk2NTg2Mw==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3860#discussion_r413965863", "bodyText": "@bsrikan - The placeholder text is as per the design given by UX. Also, the work 'key' is used behind the scenes for that column and user might get confused here if we mention \"Search key\" as placeholder because to the user the column name is 'Name'.", "author": "xnikhil08", "createdAt": "2020-04-23T16:58:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQ3NTA4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzk3MjEyMw==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3860#discussion_r413972123", "bodyText": "You are right. Will let it be then.", "author": "bsrikan", "createdAt": "2020-04-23T17:07:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQ3NTA4Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzUzODc1MQ==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3860#discussion_r413538751", "bodyText": "for an xml doc, first key itself should be a parent.", "author": "bsrikan", "createdAt": "2020-04-23T06:18:38Z", "path": "marklogic-data-hub-central/ui/src/config/data.config.js", "diffHunk": "@@ -72,6 +72,32 @@ const mapProps = {\n     { key: '@proteinType', val: 'home' },\n     { key: 'nutFree:name', val: 'testName1' }\n   ],\n+  entityTypePropertiesUpdated : [\n+    { name: 'propId', type: 'int' },\n+    { name: 'propName', type: 'string' },\n+    {\n+      name: 'items', type: 'parent-ItemType [ ]', children: [\n+        { name: 'items/itemTypes', type: 'string' },\n+        {\n+          name: 'items/itemCategory', type: 'parent-catItem', children: [\n+            { name: 'items/itemCategory/artCraft', type: 'string' },\n+            { name: 'items/itemCategory/automobile', type: 'string' }\n+          ]\n+        }]\n+    },\n+    { name: 'gender', type: 'string' }\n+  ],\n+  sourceDataUpdated : [\n+    { key: 'proteinId', val: '123EAC' },", "originalCommit": "18d60b37934ef7b46326d1f0e90e26c3858e5792", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA5NTU1Mg==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3860#discussion_r414095552", "bodyText": "This will be taken care of in a separate story.", "author": "xnikhil08", "createdAt": "2020-04-23T20:18:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzUzODc1MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzUzOTcxMA==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3860#discussion_r413539710", "bodyText": "need to repeat this test using proper xml doc and convert this one to use json doc.", "author": "bsrikan", "createdAt": "2020-04-23T06:20:55Z", "path": "marklogic-data-hub-central/ui/src/components/entities/mapping/source-entity-map/source-to-entity-map.test.tsx", "diffHunk": "@@ -37,7 +38,225 @@ describe('RTL Source-to-entity map tests', () => {\n         fireEvent.click(getByText('Clear'));\n         expect(getByText('Clear')).toBeEnabled();\n         expect(getByText(\"concat(name,'-NEW')\")).toBeInTheDocument();\n-        console.log(container);\n+    });\n+\n+    test('Filtering Name column in Source and Entity tables',() => {", "originalCommit": "18d60b37934ef7b46326d1f0e90e26c3858e5792", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA5NTY2MA==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3860#discussion_r414095660", "bodyText": "This will be taken care of in a separate story.", "author": "xnikhil08", "createdAt": "2020-04-23T20:18:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzUzOTcxMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzU0MTQxMQ==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3860#discussion_r413541411", "bodyText": "we can create and store json and xml source data outside of mapProps and default mapProps.sourceData to use json. This way for xml usecases we can simply say sourceData={data.xmlSourceData}. In other words all the overrides can stay outside of mapProps.", "author": "bsrikan", "createdAt": "2020-04-23T06:24:54Z", "path": "marklogic-data-hub-central/ui/src/components/entities/mapping/source-entity-map/source-to-entity-map.test.tsx", "diffHunk": "@@ -37,7 +38,225 @@ describe('RTL Source-to-entity map tests', () => {\n         fireEvent.click(getByText('Clear'));\n         expect(getByText('Clear')).toBeEnabled();\n         expect(getByText(\"concat(name,'-NEW')\")).toBeInTheDocument();\n-        console.log(container);\n+    });\n+\n+    test('Filtering Name column in Source and Entity tables',() => {\n+      \n+      const { getByText,getByTestId,queryByText } = render(<SourceToEntityMap {...data.mapProps} \n+        mappingVisible={true} \n+        entityTypeProperties={data.mapProps.entityTypePropertiesUpdated} \n+        sourceData={data.mapProps.sourceDataUpdated}/>);", "originalCommit": "18d60b37934ef7b46326d1f0e90e26c3858e5792", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA5NTgwNA==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3860#discussion_r414095804", "bodyText": "Done.", "author": "xnikhil08", "createdAt": "2020-04-23T20:18:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzU0MTQxMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzU1MjM5OQ==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3860#discussion_r413552399", "bodyText": "fix typo in texting", "author": "bsrikan", "createdAt": "2020-04-23T06:47:53Z", "path": "marklogic-data-hub-central/ui/src/components/entities/mapping/source-entity-map/source-to-entity-map.test.tsx", "diffHunk": "@@ -37,7 +38,225 @@ describe('RTL Source-to-entity map tests', () => {\n         fireEvent.click(getByText('Clear'));\n         expect(getByText('Clear')).toBeEnabled();\n         expect(getByText(\"concat(name,'-NEW')\")).toBeInTheDocument();\n-        console.log(container);\n+    });\n+\n+    test('Filtering Name column in Source and Entity tables',() => {\n+      \n+      const { getByText,getByTestId,queryByText } = render(<SourceToEntityMap {...data.mapProps} \n+        mappingVisible={true} \n+        entityTypeProperties={data.mapProps.entityTypePropertiesUpdated} \n+        sourceData={data.mapProps.sourceDataUpdated}/>);\n+\n+      /* Test filter on Source table  */\n+      let filterIcon = getByTestId('filterIcon-key');\n+      expect(filterIcon).toBeInTheDocument();\n+      fireEvent.click(filterIcon);\n+      let inputSearch = getByTestId('searchInput-key');\n+      expect(inputSearch).toBeInTheDocument();\n+      fireEvent.change(inputSearch, { target: {value: \"first\" }}); //Enter a case-insensitive value in inputSearch field\n+      expect(getByTestId('submitSearch-key')).toBeInTheDocument();\n+      expect(inputSearch).toHaveValue('first');\n+      fireEvent.click(getByTestId('submitSearch-key')); //Click on Search button to apply the filter with the desired string\n+      \n+      //Check if the expected values are available/not available in search result.\n+      expect(getByText(/nutFree:/)).toBeInTheDocument();\n+      expect(getByText('NamePreferred')).toBeInTheDocument();\n+      expect(getByText('John')).toBeInTheDocument();\n+      expect(queryByText('proteinId')).not.toBeInTheDocument(); \n+      expect(queryByText('@proteinType')).not.toBeInTheDocument();\n+\n+      //Check if the entity properties are not affected by the filter on source table\n+      expect(getByText('propId')).toBeInTheDocument();\n+      expect(getByText('propName')).toBeInTheDocument();\n+      expect(getByText('artCraft')).toBeInTheDocument();\n+      expect(getByText('automobile')).toBeInTheDocument();\n+\n+      //Reset the search filter on Source table\n+      fireEvent.click(filterIcon);\n+      let resetSearch = getByTestId('ResetSearch-key');\n+      expect(resetSearch).toBeInTheDocument();\n+      fireEvent.click(resetSearch);\n+\n+      //Check if the expected values are present now after resetting the filter on source table.\n+      expect(getByText('proteinId')).toBeInTheDocument();\n+      expect(getByText('@proteinType')).toBeInTheDocument();\n+      \n+\n+      /* Test filter on Entity table  */\n+      let entityfilterIcon = getByTestId('filterIcon-name');\n+      expect(entityfilterIcon).toBeInTheDocument();\n+      fireEvent.click(entityfilterIcon);\n+      let inputSearchEntity = getByTestId('searchInput-name');\n+      expect(inputSearchEntity).toBeInTheDocument();\n+      fireEvent.change(inputSearchEntity, { target: {value: \"craft\" }}); //Enter a case-insensitive value in inputEntitySearch field\n+      expect(getByTestId('submitSearch-name')).toBeInTheDocument();\n+      expect(inputSearchEntity).toHaveValue('craft');\n+      fireEvent.click(getByTestId('submitSearch-name')); //Click on Search button to apply the filter with the desired string\n+\n+      //Check if the expected values are available/not available in search result.\n+      expect(getByText('items')).toBeInTheDocument();\n+      expect(getByText('itemTypes')).toBeInTheDocument();\n+      expect(getByText('itemCategory')).toBeInTheDocument();\n+      expect(getByText('Craft')).toBeInTheDocument();\n+      expect(queryByText('propId')).not.toBeInTheDocument(); \n+      expect(queryByText('propName')).not.toBeInTheDocument();\n+\n+      //Check if the source table properties are not affected by the filter on Entity table\n+      expect(getByText('proteinId')).toBeInTheDocument();\n+      expect(getByText('@proteinType')).toBeInTheDocument();\n+      expect(getByText('FirstNamePreferred')).toBeInTheDocument();\n+      expect(getByText('LastName')).toBeInTheDocument();\n+\n+       //Reset the search filter on Entity table\n+       fireEvent.click(entityfilterIcon);\n+       let resetEntitySearch = getByTestId('ResetSearch-name');\n+       expect(resetEntitySearch).toBeInTheDocument();\n+       fireEvent.click(resetEntitySearch);\n+ \n+       //Check if the expected values are present now after resetting the filter on Entity table.\n+       expect(getByText('propId')).toBeInTheDocument();\n+       expect(getByText('propName')).toBeInTheDocument();\n+    });\n+\n+    test('Column option selector in Entity table',() => {\n+      \n+      const { getByText,getByTestId,queryByText } = render(<SourceToEntityMap {...data.mapProps} \n+        mappingVisible={true} \n+        entityTypeProperties={data.mapProps.entityTypePropertiesUpdated} \n+        sourceData={data.mapProps.sourceDataUpdated}/>);\n+\n+      //Set the data for texting in xpath expression", "originalCommit": "18d60b37934ef7b46326d1f0e90e26c3858e5792", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA5NTg2OA==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3860#discussion_r414095868", "bodyText": "Done", "author": "xnikhil08", "createdAt": "2020-04-23T20:18:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzU1MjM5OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzU1Njg1OQ==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3860#discussion_r413556859", "bodyText": "fireEvent on exp would fail if it was not found in the DOM. So we can get rid of the assertion in line 131 and other similar assertions like this in the test, since they wont add any value to the test.", "author": "bsrikan", "createdAt": "2020-04-23T06:52:37Z", "path": "marklogic-data-hub-central/ui/src/components/entities/mapping/source-entity-map/source-to-entity-map.test.tsx", "diffHunk": "@@ -37,7 +38,225 @@ describe('RTL Source-to-entity map tests', () => {\n         fireEvent.click(getByText('Clear'));\n         expect(getByText('Clear')).toBeEnabled();\n         expect(getByText(\"concat(name,'-NEW')\")).toBeInTheDocument();\n-        console.log(container);\n+    });\n+\n+    test('Filtering Name column in Source and Entity tables',() => {\n+      \n+      const { getByText,getByTestId,queryByText } = render(<SourceToEntityMap {...data.mapProps} \n+        mappingVisible={true} \n+        entityTypeProperties={data.mapProps.entityTypePropertiesUpdated} \n+        sourceData={data.mapProps.sourceDataUpdated}/>);\n+\n+      /* Test filter on Source table  */\n+      let filterIcon = getByTestId('filterIcon-key');\n+      expect(filterIcon).toBeInTheDocument();\n+      fireEvent.click(filterIcon);\n+      let inputSearch = getByTestId('searchInput-key');\n+      expect(inputSearch).toBeInTheDocument();\n+      fireEvent.change(inputSearch, { target: {value: \"first\" }}); //Enter a case-insensitive value in inputSearch field\n+      expect(getByTestId('submitSearch-key')).toBeInTheDocument();\n+      expect(inputSearch).toHaveValue('first');\n+      fireEvent.click(getByTestId('submitSearch-key')); //Click on Search button to apply the filter with the desired string\n+      \n+      //Check if the expected values are available/not available in search result.\n+      expect(getByText(/nutFree:/)).toBeInTheDocument();\n+      expect(getByText('NamePreferred')).toBeInTheDocument();\n+      expect(getByText('John')).toBeInTheDocument();\n+      expect(queryByText('proteinId')).not.toBeInTheDocument(); \n+      expect(queryByText('@proteinType')).not.toBeInTheDocument();\n+\n+      //Check if the entity properties are not affected by the filter on source table\n+      expect(getByText('propId')).toBeInTheDocument();\n+      expect(getByText('propName')).toBeInTheDocument();\n+      expect(getByText('artCraft')).toBeInTheDocument();\n+      expect(getByText('automobile')).toBeInTheDocument();\n+\n+      //Reset the search filter on Source table\n+      fireEvent.click(filterIcon);\n+      let resetSearch = getByTestId('ResetSearch-key');\n+      expect(resetSearch).toBeInTheDocument();\n+      fireEvent.click(resetSearch);\n+\n+      //Check if the expected values are present now after resetting the filter on source table.\n+      expect(getByText('proteinId')).toBeInTheDocument();\n+      expect(getByText('@proteinType')).toBeInTheDocument();\n+      \n+\n+      /* Test filter on Entity table  */\n+      let entityfilterIcon = getByTestId('filterIcon-name');\n+      expect(entityfilterIcon).toBeInTheDocument();\n+      fireEvent.click(entityfilterIcon);\n+      let inputSearchEntity = getByTestId('searchInput-name');\n+      expect(inputSearchEntity).toBeInTheDocument();\n+      fireEvent.change(inputSearchEntity, { target: {value: \"craft\" }}); //Enter a case-insensitive value in inputEntitySearch field\n+      expect(getByTestId('submitSearch-name')).toBeInTheDocument();\n+      expect(inputSearchEntity).toHaveValue('craft');\n+      fireEvent.click(getByTestId('submitSearch-name')); //Click on Search button to apply the filter with the desired string\n+\n+      //Check if the expected values are available/not available in search result.\n+      expect(getByText('items')).toBeInTheDocument();\n+      expect(getByText('itemTypes')).toBeInTheDocument();\n+      expect(getByText('itemCategory')).toBeInTheDocument();\n+      expect(getByText('Craft')).toBeInTheDocument();\n+      expect(queryByText('propId')).not.toBeInTheDocument(); \n+      expect(queryByText('propName')).not.toBeInTheDocument();\n+\n+      //Check if the source table properties are not affected by the filter on Entity table\n+      expect(getByText('proteinId')).toBeInTheDocument();\n+      expect(getByText('@proteinType')).toBeInTheDocument();\n+      expect(getByText('FirstNamePreferred')).toBeInTheDocument();\n+      expect(getByText('LastName')).toBeInTheDocument();\n+\n+       //Reset the search filter on Entity table\n+       fireEvent.click(entityfilterIcon);\n+       let resetEntitySearch = getByTestId('ResetSearch-name');\n+       expect(resetEntitySearch).toBeInTheDocument();\n+       fireEvent.click(resetEntitySearch);\n+ \n+       //Check if the expected values are present now after resetting the filter on Entity table.\n+       expect(getByText('propId')).toBeInTheDocument();\n+       expect(getByText('propName')).toBeInTheDocument();\n+    });\n+\n+    test('Column option selector in Entity table',() => {\n+      \n+      const { getByText,getByTestId,queryByText } = render(<SourceToEntityMap {...data.mapProps} \n+        mappingVisible={true} \n+        entityTypeProperties={data.mapProps.entityTypePropertiesUpdated} \n+        sourceData={data.mapProps.sourceDataUpdated}/>);\n+\n+      //Set the data for texting in xpath expression\n+\n+      let exp = getByText('testNameInExp');\n+      expect(exp).toBeInTheDocument();\n+      fireEvent.change(exp, { target: {value: \"concat(propName,'-NEW')\" }});", "originalCommit": "18d60b37934ef7b46326d1f0e90e26c3858e5792", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA5NjI4Nw==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3860#discussion_r414096287", "bodyText": "Done", "author": "xnikhil08", "createdAt": "2020-04-23T20:19:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzU1Njg1OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzU1OTEzOQ==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3860#discussion_r413559139", "bodyText": "can we check for column options toBeChecked instead.", "author": "bsrikan", "createdAt": "2020-04-23T06:57:01Z", "path": "marklogic-data-hub-central/ui/src/components/entities/mapping/source-entity-map/source-to-entity-map.test.tsx", "diffHunk": "@@ -37,7 +38,225 @@ describe('RTL Source-to-entity map tests', () => {\n         fireEvent.click(getByText('Clear'));\n         expect(getByText('Clear')).toBeEnabled();\n         expect(getByText(\"concat(name,'-NEW')\")).toBeInTheDocument();\n-        console.log(container);\n+    });\n+\n+    test('Filtering Name column in Source and Entity tables',() => {\n+      \n+      const { getByText,getByTestId,queryByText } = render(<SourceToEntityMap {...data.mapProps} \n+        mappingVisible={true} \n+        entityTypeProperties={data.mapProps.entityTypePropertiesUpdated} \n+        sourceData={data.mapProps.sourceDataUpdated}/>);\n+\n+      /* Test filter on Source table  */\n+      let filterIcon = getByTestId('filterIcon-key');\n+      expect(filterIcon).toBeInTheDocument();\n+      fireEvent.click(filterIcon);\n+      let inputSearch = getByTestId('searchInput-key');\n+      expect(inputSearch).toBeInTheDocument();\n+      fireEvent.change(inputSearch, { target: {value: \"first\" }}); //Enter a case-insensitive value in inputSearch field\n+      expect(getByTestId('submitSearch-key')).toBeInTheDocument();\n+      expect(inputSearch).toHaveValue('first');\n+      fireEvent.click(getByTestId('submitSearch-key')); //Click on Search button to apply the filter with the desired string\n+      \n+      //Check if the expected values are available/not available in search result.\n+      expect(getByText(/nutFree:/)).toBeInTheDocument();\n+      expect(getByText('NamePreferred')).toBeInTheDocument();\n+      expect(getByText('John')).toBeInTheDocument();\n+      expect(queryByText('proteinId')).not.toBeInTheDocument(); \n+      expect(queryByText('@proteinType')).not.toBeInTheDocument();\n+\n+      //Check if the entity properties are not affected by the filter on source table\n+      expect(getByText('propId')).toBeInTheDocument();\n+      expect(getByText('propName')).toBeInTheDocument();\n+      expect(getByText('artCraft')).toBeInTheDocument();\n+      expect(getByText('automobile')).toBeInTheDocument();\n+\n+      //Reset the search filter on Source table\n+      fireEvent.click(filterIcon);\n+      let resetSearch = getByTestId('ResetSearch-key');\n+      expect(resetSearch).toBeInTheDocument();\n+      fireEvent.click(resetSearch);\n+\n+      //Check if the expected values are present now after resetting the filter on source table.\n+      expect(getByText('proteinId')).toBeInTheDocument();\n+      expect(getByText('@proteinType')).toBeInTheDocument();\n+      \n+\n+      /* Test filter on Entity table  */\n+      let entityfilterIcon = getByTestId('filterIcon-name');\n+      expect(entityfilterIcon).toBeInTheDocument();\n+      fireEvent.click(entityfilterIcon);\n+      let inputSearchEntity = getByTestId('searchInput-name');\n+      expect(inputSearchEntity).toBeInTheDocument();\n+      fireEvent.change(inputSearchEntity, { target: {value: \"craft\" }}); //Enter a case-insensitive value in inputEntitySearch field\n+      expect(getByTestId('submitSearch-name')).toBeInTheDocument();\n+      expect(inputSearchEntity).toHaveValue('craft');\n+      fireEvent.click(getByTestId('submitSearch-name')); //Click on Search button to apply the filter with the desired string\n+\n+      //Check if the expected values are available/not available in search result.\n+      expect(getByText('items')).toBeInTheDocument();\n+      expect(getByText('itemTypes')).toBeInTheDocument();\n+      expect(getByText('itemCategory')).toBeInTheDocument();\n+      expect(getByText('Craft')).toBeInTheDocument();\n+      expect(queryByText('propId')).not.toBeInTheDocument(); \n+      expect(queryByText('propName')).not.toBeInTheDocument();\n+\n+      //Check if the source table properties are not affected by the filter on Entity table\n+      expect(getByText('proteinId')).toBeInTheDocument();\n+      expect(getByText('@proteinType')).toBeInTheDocument();\n+      expect(getByText('FirstNamePreferred')).toBeInTheDocument();\n+      expect(getByText('LastName')).toBeInTheDocument();\n+\n+       //Reset the search filter on Entity table\n+       fireEvent.click(entityfilterIcon);\n+       let resetEntitySearch = getByTestId('ResetSearch-name');\n+       expect(resetEntitySearch).toBeInTheDocument();\n+       fireEvent.click(resetEntitySearch);\n+ \n+       //Check if the expected values are present now after resetting the filter on Entity table.\n+       expect(getByText('propId')).toBeInTheDocument();\n+       expect(getByText('propName')).toBeInTheDocument();\n+    });\n+\n+    test('Column option selector in Entity table',() => {\n+      \n+      const { getByText,getByTestId,queryByText } = render(<SourceToEntityMap {...data.mapProps} \n+        mappingVisible={true} \n+        entityTypeProperties={data.mapProps.entityTypePropertiesUpdated} \n+        sourceData={data.mapProps.sourceDataUpdated}/>);\n+\n+      //Set the data for texting in xpath expression\n+\n+      let exp = getByText('testNameInExp');\n+      expect(exp).toBeInTheDocument();\n+      fireEvent.change(exp, { target: {value: \"concat(propName,'-NEW')\" }});\n+      fireEvent.blur(exp);\n+      expect(getByText(\"concat(propName,'-NEW')\")).toBeInTheDocument();\n+      \n+      /* Test column option selector in Entity table  */\n+      let colOptSelect = getByText('Column Options');\n+      expect(colOptSelect).toBeInTheDocument();\n+      fireEvent.click(colOptSelect);\n+      let Name = getByTestId('columnOptionsCheckBox-name');\n+      let Type = getByTestId('columnOptionsCheckBox-type');\n+      let XPathExpression = getByTestId('columnOptionsCheckBox-key');\n+      let Value = getByTestId('columnOptionsCheckBox-value');\n+      expect(Name).toBeInTheDocument();", "originalCommit": "18d60b37934ef7b46326d1f0e90e26c3858e5792", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA5NjQwMA==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3860#discussion_r414096400", "bodyText": "Done.", "author": "xnikhil08", "createdAt": "2020-04-23T20:19:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzU1OTEzOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzU3ODE5NA==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3860#discussion_r413578194", "bodyText": "This works but if test data changes this wouldnt be reliable. An alternate suggestion is to check columns dont exist. Like so:\nlet entityTableHeaderRow = within(getByTestId('entityTableType').closest('tr'))\nexpect(entityTableHeaderRow.queryByText('Name')).not.toBeInTheDocument();\nexpect(entityTableHeaderRow.queryByText('XPath Expression')).not.toBeInTheDocument();\n\nThe same can be repurposed to verify they exist.", "author": "bsrikan", "createdAt": "2020-04-23T07:30:54Z", "path": "marklogic-data-hub-central/ui/src/components/entities/mapping/source-entity-map/source-to-entity-map.test.tsx", "diffHunk": "@@ -37,7 +38,225 @@ describe('RTL Source-to-entity map tests', () => {\n         fireEvent.click(getByText('Clear'));\n         expect(getByText('Clear')).toBeEnabled();\n         expect(getByText(\"concat(name,'-NEW')\")).toBeInTheDocument();\n-        console.log(container);\n+    });\n+\n+    test('Filtering Name column in Source and Entity tables',() => {\n+      \n+      const { getByText,getByTestId,queryByText } = render(<SourceToEntityMap {...data.mapProps} \n+        mappingVisible={true} \n+        entityTypeProperties={data.mapProps.entityTypePropertiesUpdated} \n+        sourceData={data.mapProps.sourceDataUpdated}/>);\n+\n+      /* Test filter on Source table  */\n+      let filterIcon = getByTestId('filterIcon-key');\n+      expect(filterIcon).toBeInTheDocument();\n+      fireEvent.click(filterIcon);\n+      let inputSearch = getByTestId('searchInput-key');\n+      expect(inputSearch).toBeInTheDocument();\n+      fireEvent.change(inputSearch, { target: {value: \"first\" }}); //Enter a case-insensitive value in inputSearch field\n+      expect(getByTestId('submitSearch-key')).toBeInTheDocument();\n+      expect(inputSearch).toHaveValue('first');\n+      fireEvent.click(getByTestId('submitSearch-key')); //Click on Search button to apply the filter with the desired string\n+      \n+      //Check if the expected values are available/not available in search result.\n+      expect(getByText(/nutFree:/)).toBeInTheDocument();\n+      expect(getByText('NamePreferred')).toBeInTheDocument();\n+      expect(getByText('John')).toBeInTheDocument();\n+      expect(queryByText('proteinId')).not.toBeInTheDocument(); \n+      expect(queryByText('@proteinType')).not.toBeInTheDocument();\n+\n+      //Check if the entity properties are not affected by the filter on source table\n+      expect(getByText('propId')).toBeInTheDocument();\n+      expect(getByText('propName')).toBeInTheDocument();\n+      expect(getByText('artCraft')).toBeInTheDocument();\n+      expect(getByText('automobile')).toBeInTheDocument();\n+\n+      //Reset the search filter on Source table\n+      fireEvent.click(filterIcon);\n+      let resetSearch = getByTestId('ResetSearch-key');\n+      expect(resetSearch).toBeInTheDocument();\n+      fireEvent.click(resetSearch);\n+\n+      //Check if the expected values are present now after resetting the filter on source table.\n+      expect(getByText('proteinId')).toBeInTheDocument();\n+      expect(getByText('@proteinType')).toBeInTheDocument();\n+      \n+\n+      /* Test filter on Entity table  */\n+      let entityfilterIcon = getByTestId('filterIcon-name');\n+      expect(entityfilterIcon).toBeInTheDocument();\n+      fireEvent.click(entityfilterIcon);\n+      let inputSearchEntity = getByTestId('searchInput-name');\n+      expect(inputSearchEntity).toBeInTheDocument();\n+      fireEvent.change(inputSearchEntity, { target: {value: \"craft\" }}); //Enter a case-insensitive value in inputEntitySearch field\n+      expect(getByTestId('submitSearch-name')).toBeInTheDocument();\n+      expect(inputSearchEntity).toHaveValue('craft');\n+      fireEvent.click(getByTestId('submitSearch-name')); //Click on Search button to apply the filter with the desired string\n+\n+      //Check if the expected values are available/not available in search result.\n+      expect(getByText('items')).toBeInTheDocument();\n+      expect(getByText('itemTypes')).toBeInTheDocument();\n+      expect(getByText('itemCategory')).toBeInTheDocument();\n+      expect(getByText('Craft')).toBeInTheDocument();\n+      expect(queryByText('propId')).not.toBeInTheDocument(); \n+      expect(queryByText('propName')).not.toBeInTheDocument();\n+\n+      //Check if the source table properties are not affected by the filter on Entity table\n+      expect(getByText('proteinId')).toBeInTheDocument();\n+      expect(getByText('@proteinType')).toBeInTheDocument();\n+      expect(getByText('FirstNamePreferred')).toBeInTheDocument();\n+      expect(getByText('LastName')).toBeInTheDocument();\n+\n+       //Reset the search filter on Entity table\n+       fireEvent.click(entityfilterIcon);\n+       let resetEntitySearch = getByTestId('ResetSearch-name');\n+       expect(resetEntitySearch).toBeInTheDocument();\n+       fireEvent.click(resetEntitySearch);\n+ \n+       //Check if the expected values are present now after resetting the filter on Entity table.\n+       expect(getByText('propId')).toBeInTheDocument();\n+       expect(getByText('propName')).toBeInTheDocument();\n+    });\n+\n+    test('Column option selector in Entity table',() => {\n+      \n+      const { getByText,getByTestId,queryByText } = render(<SourceToEntityMap {...data.mapProps} \n+        mappingVisible={true} \n+        entityTypeProperties={data.mapProps.entityTypePropertiesUpdated} \n+        sourceData={data.mapProps.sourceDataUpdated}/>);\n+\n+      //Set the data for texting in xpath expression\n+\n+      let exp = getByText('testNameInExp');\n+      expect(exp).toBeInTheDocument();\n+      fireEvent.change(exp, { target: {value: \"concat(propName,'-NEW')\" }});\n+      fireEvent.blur(exp);\n+      expect(getByText(\"concat(propName,'-NEW')\")).toBeInTheDocument();\n+      \n+      /* Test column option selector in Entity table  */\n+      let colOptSelect = getByText('Column Options');\n+      expect(colOptSelect).toBeInTheDocument();\n+      fireEvent.click(colOptSelect);\n+      let Name = getByTestId('columnOptionsCheckBox-name');\n+      let Type = getByTestId('columnOptionsCheckBox-type');\n+      let XPathExpression = getByTestId('columnOptionsCheckBox-key');\n+      let Value = getByTestId('columnOptionsCheckBox-value');\n+      expect(Name).toBeInTheDocument();\n+      expect(Type).toBeInTheDocument();\n+      expect(XPathExpression).toBeInTheDocument();\n+      expect(Value).toBeInTheDocument();\n+\n+      fireEvent.click(Name); //Uncheck Name column\n+\n+      //Confirm that the Name column is not visible in Entity table anymore.\n+      expect(queryByText('propId')).not.toBeInTheDocument();\n+      expect(queryByText('propName')).not.toBeInTheDocument();\n+\n+      fireEvent.click(XPathExpression); //Uncheck Name column\n+\n+      //Confirm that the XPath Expression column(Along with Name Column) is not visible in Entity table anymore.", "originalCommit": "18d60b37934ef7b46326d1f0e90e26c3858e5792", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDEwNzEyOQ==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3860#discussion_r414107129", "bodyText": "Done", "author": "xnikhil08", "createdAt": "2020-04-23T20:37:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzU3ODE5NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzU3OTY0Nw==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3860#discussion_r413579647", "bodyText": "can add filtering and then uncheck to verify column doesnt exist and filter gets reset.", "author": "bsrikan", "createdAt": "2020-04-23T07:33:18Z", "path": "marklogic-data-hub-central/ui/src/components/entities/mapping/source-entity-map/source-to-entity-map.test.tsx", "diffHunk": "@@ -37,7 +38,225 @@ describe('RTL Source-to-entity map tests', () => {\n         fireEvent.click(getByText('Clear'));\n         expect(getByText('Clear')).toBeEnabled();\n         expect(getByText(\"concat(name,'-NEW')\")).toBeInTheDocument();\n-        console.log(container);\n+    });\n+\n+    test('Filtering Name column in Source and Entity tables',() => {\n+      \n+      const { getByText,getByTestId,queryByText } = render(<SourceToEntityMap {...data.mapProps} \n+        mappingVisible={true} \n+        entityTypeProperties={data.mapProps.entityTypePropertiesUpdated} \n+        sourceData={data.mapProps.sourceDataUpdated}/>);\n+\n+      /* Test filter on Source table  */\n+      let filterIcon = getByTestId('filterIcon-key');\n+      expect(filterIcon).toBeInTheDocument();\n+      fireEvent.click(filterIcon);\n+      let inputSearch = getByTestId('searchInput-key');\n+      expect(inputSearch).toBeInTheDocument();\n+      fireEvent.change(inputSearch, { target: {value: \"first\" }}); //Enter a case-insensitive value in inputSearch field\n+      expect(getByTestId('submitSearch-key')).toBeInTheDocument();\n+      expect(inputSearch).toHaveValue('first');\n+      fireEvent.click(getByTestId('submitSearch-key')); //Click on Search button to apply the filter with the desired string\n+      \n+      //Check if the expected values are available/not available in search result.\n+      expect(getByText(/nutFree:/)).toBeInTheDocument();\n+      expect(getByText('NamePreferred')).toBeInTheDocument();\n+      expect(getByText('John')).toBeInTheDocument();\n+      expect(queryByText('proteinId')).not.toBeInTheDocument(); \n+      expect(queryByText('@proteinType')).not.toBeInTheDocument();\n+\n+      //Check if the entity properties are not affected by the filter on source table\n+      expect(getByText('propId')).toBeInTheDocument();\n+      expect(getByText('propName')).toBeInTheDocument();\n+      expect(getByText('artCraft')).toBeInTheDocument();\n+      expect(getByText('automobile')).toBeInTheDocument();\n+\n+      //Reset the search filter on Source table\n+      fireEvent.click(filterIcon);\n+      let resetSearch = getByTestId('ResetSearch-key');\n+      expect(resetSearch).toBeInTheDocument();\n+      fireEvent.click(resetSearch);\n+\n+      //Check if the expected values are present now after resetting the filter on source table.\n+      expect(getByText('proteinId')).toBeInTheDocument();\n+      expect(getByText('@proteinType')).toBeInTheDocument();\n+      \n+\n+      /* Test filter on Entity table  */\n+      let entityfilterIcon = getByTestId('filterIcon-name');\n+      expect(entityfilterIcon).toBeInTheDocument();\n+      fireEvent.click(entityfilterIcon);\n+      let inputSearchEntity = getByTestId('searchInput-name');\n+      expect(inputSearchEntity).toBeInTheDocument();\n+      fireEvent.change(inputSearchEntity, { target: {value: \"craft\" }}); //Enter a case-insensitive value in inputEntitySearch field\n+      expect(getByTestId('submitSearch-name')).toBeInTheDocument();\n+      expect(inputSearchEntity).toHaveValue('craft');\n+      fireEvent.click(getByTestId('submitSearch-name')); //Click on Search button to apply the filter with the desired string\n+\n+      //Check if the expected values are available/not available in search result.\n+      expect(getByText('items')).toBeInTheDocument();\n+      expect(getByText('itemTypes')).toBeInTheDocument();\n+      expect(getByText('itemCategory')).toBeInTheDocument();\n+      expect(getByText('Craft')).toBeInTheDocument();\n+      expect(queryByText('propId')).not.toBeInTheDocument(); \n+      expect(queryByText('propName')).not.toBeInTheDocument();\n+\n+      //Check if the source table properties are not affected by the filter on Entity table\n+      expect(getByText('proteinId')).toBeInTheDocument();\n+      expect(getByText('@proteinType')).toBeInTheDocument();\n+      expect(getByText('FirstNamePreferred')).toBeInTheDocument();\n+      expect(getByText('LastName')).toBeInTheDocument();\n+\n+       //Reset the search filter on Entity table\n+       fireEvent.click(entityfilterIcon);\n+       let resetEntitySearch = getByTestId('ResetSearch-name');\n+       expect(resetEntitySearch).toBeInTheDocument();\n+       fireEvent.click(resetEntitySearch);\n+ \n+       //Check if the expected values are present now after resetting the filter on Entity table.\n+       expect(getByText('propId')).toBeInTheDocument();\n+       expect(getByText('propName')).toBeInTheDocument();\n+    });\n+\n+    test('Column option selector in Entity table',() => {\n+      \n+      const { getByText,getByTestId,queryByText } = render(<SourceToEntityMap {...data.mapProps} \n+        mappingVisible={true} \n+        entityTypeProperties={data.mapProps.entityTypePropertiesUpdated} \n+        sourceData={data.mapProps.sourceDataUpdated}/>);\n+\n+      //Set the data for texting in xpath expression\n+\n+      let exp = getByText('testNameInExp');\n+      expect(exp).toBeInTheDocument();\n+      fireEvent.change(exp, { target: {value: \"concat(propName,'-NEW')\" }});\n+      fireEvent.blur(exp);\n+      expect(getByText(\"concat(propName,'-NEW')\")).toBeInTheDocument();\n+      \n+      /* Test column option selector in Entity table  */\n+      let colOptSelect = getByText('Column Options');\n+      expect(colOptSelect).toBeInTheDocument();\n+      fireEvent.click(colOptSelect);\n+      let Name = getByTestId('columnOptionsCheckBox-name');\n+      let Type = getByTestId('columnOptionsCheckBox-type');\n+      let XPathExpression = getByTestId('columnOptionsCheckBox-key');\n+      let Value = getByTestId('columnOptionsCheckBox-value');\n+      expect(Name).toBeInTheDocument();\n+      expect(Type).toBeInTheDocument();\n+      expect(XPathExpression).toBeInTheDocument();\n+      expect(Value).toBeInTheDocument();\n+\n+      fireEvent.click(Name); //Uncheck Name column", "originalCommit": "18d60b37934ef7b46326d1f0e90e26c3858e5792", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDEzNzE3Nw==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3860#discussion_r414137177", "bodyText": "Done. Added the test scenario in column option selector test.", "author": "xnikhil08", "createdAt": "2020-04-23T21:29:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzU3OTY0Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzU4MjMxOQ==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3860#discussion_r413582319", "bodyText": "sorting is good.\nlike the spacing & grouping of columns, makes it readable. Goes well with \"Arrange, Act, Assert\" way of writing tests.", "author": "bsrikan", "createdAt": "2020-04-23T07:37:37Z", "path": "marklogic-data-hub-central/ui/src/components/entities/mapping/source-entity-map/source-to-entity-map.test.tsx", "diffHunk": "@@ -37,7 +38,225 @@ describe('RTL Source-to-entity map tests', () => {\n         fireEvent.click(getByText('Clear'));\n         expect(getByText('Clear')).toBeEnabled();\n         expect(getByText(\"concat(name,'-NEW')\")).toBeInTheDocument();\n-        console.log(container);\n+    });\n+\n+    test('Filtering Name column in Source and Entity tables',() => {\n+      \n+      const { getByText,getByTestId,queryByText } = render(<SourceToEntityMap {...data.mapProps} \n+        mappingVisible={true} \n+        entityTypeProperties={data.mapProps.entityTypePropertiesUpdated} \n+        sourceData={data.mapProps.sourceDataUpdated}/>);\n+\n+      /* Test filter on Source table  */\n+      let filterIcon = getByTestId('filterIcon-key');\n+      expect(filterIcon).toBeInTheDocument();\n+      fireEvent.click(filterIcon);\n+      let inputSearch = getByTestId('searchInput-key');\n+      expect(inputSearch).toBeInTheDocument();\n+      fireEvent.change(inputSearch, { target: {value: \"first\" }}); //Enter a case-insensitive value in inputSearch field\n+      expect(getByTestId('submitSearch-key')).toBeInTheDocument();\n+      expect(inputSearch).toHaveValue('first');\n+      fireEvent.click(getByTestId('submitSearch-key')); //Click on Search button to apply the filter with the desired string\n+      \n+      //Check if the expected values are available/not available in search result.\n+      expect(getByText(/nutFree:/)).toBeInTheDocument();\n+      expect(getByText('NamePreferred')).toBeInTheDocument();\n+      expect(getByText('John')).toBeInTheDocument();\n+      expect(queryByText('proteinId')).not.toBeInTheDocument(); \n+      expect(queryByText('@proteinType')).not.toBeInTheDocument();\n+\n+      //Check if the entity properties are not affected by the filter on source table\n+      expect(getByText('propId')).toBeInTheDocument();\n+      expect(getByText('propName')).toBeInTheDocument();\n+      expect(getByText('artCraft')).toBeInTheDocument();\n+      expect(getByText('automobile')).toBeInTheDocument();\n+\n+      //Reset the search filter on Source table\n+      fireEvent.click(filterIcon);\n+      let resetSearch = getByTestId('ResetSearch-key');\n+      expect(resetSearch).toBeInTheDocument();\n+      fireEvent.click(resetSearch);\n+\n+      //Check if the expected values are present now after resetting the filter on source table.\n+      expect(getByText('proteinId')).toBeInTheDocument();\n+      expect(getByText('@proteinType')).toBeInTheDocument();\n+      \n+\n+      /* Test filter on Entity table  */\n+      let entityfilterIcon = getByTestId('filterIcon-name');\n+      expect(entityfilterIcon).toBeInTheDocument();\n+      fireEvent.click(entityfilterIcon);\n+      let inputSearchEntity = getByTestId('searchInput-name');\n+      expect(inputSearchEntity).toBeInTheDocument();\n+      fireEvent.change(inputSearchEntity, { target: {value: \"craft\" }}); //Enter a case-insensitive value in inputEntitySearch field\n+      expect(getByTestId('submitSearch-name')).toBeInTheDocument();\n+      expect(inputSearchEntity).toHaveValue('craft');\n+      fireEvent.click(getByTestId('submitSearch-name')); //Click on Search button to apply the filter with the desired string\n+\n+      //Check if the expected values are available/not available in search result.\n+      expect(getByText('items')).toBeInTheDocument();\n+      expect(getByText('itemTypes')).toBeInTheDocument();\n+      expect(getByText('itemCategory')).toBeInTheDocument();\n+      expect(getByText('Craft')).toBeInTheDocument();\n+      expect(queryByText('propId')).not.toBeInTheDocument(); \n+      expect(queryByText('propName')).not.toBeInTheDocument();\n+\n+      //Check if the source table properties are not affected by the filter on Entity table\n+      expect(getByText('proteinId')).toBeInTheDocument();\n+      expect(getByText('@proteinType')).toBeInTheDocument();\n+      expect(getByText('FirstNamePreferred')).toBeInTheDocument();\n+      expect(getByText('LastName')).toBeInTheDocument();\n+\n+       //Reset the search filter on Entity table\n+       fireEvent.click(entityfilterIcon);\n+       let resetEntitySearch = getByTestId('ResetSearch-name');\n+       expect(resetEntitySearch).toBeInTheDocument();\n+       fireEvent.click(resetEntitySearch);\n+ \n+       //Check if the expected values are present now after resetting the filter on Entity table.\n+       expect(getByText('propId')).toBeInTheDocument();\n+       expect(getByText('propName')).toBeInTheDocument();\n+    });\n+\n+    test('Column option selector in Entity table',() => {\n+      \n+      const { getByText,getByTestId,queryByText } = render(<SourceToEntityMap {...data.mapProps} \n+        mappingVisible={true} \n+        entityTypeProperties={data.mapProps.entityTypePropertiesUpdated} \n+        sourceData={data.mapProps.sourceDataUpdated}/>);\n+\n+      //Set the data for texting in xpath expression\n+\n+      let exp = getByText('testNameInExp');\n+      expect(exp).toBeInTheDocument();\n+      fireEvent.change(exp, { target: {value: \"concat(propName,'-NEW')\" }});\n+      fireEvent.blur(exp);\n+      expect(getByText(\"concat(propName,'-NEW')\")).toBeInTheDocument();\n+      \n+      /* Test column option selector in Entity table  */\n+      let colOptSelect = getByText('Column Options');\n+      expect(colOptSelect).toBeInTheDocument();\n+      fireEvent.click(colOptSelect);\n+      let Name = getByTestId('columnOptionsCheckBox-name');\n+      let Type = getByTestId('columnOptionsCheckBox-type');\n+      let XPathExpression = getByTestId('columnOptionsCheckBox-key');\n+      let Value = getByTestId('columnOptionsCheckBox-value');\n+      expect(Name).toBeInTheDocument();\n+      expect(Type).toBeInTheDocument();\n+      expect(XPathExpression).toBeInTheDocument();\n+      expect(Value).toBeInTheDocument();\n+\n+      fireEvent.click(Name); //Uncheck Name column\n+\n+      //Confirm that the Name column is not visible in Entity table anymore.\n+      expect(queryByText('propId')).not.toBeInTheDocument();\n+      expect(queryByText('propName')).not.toBeInTheDocument();\n+\n+      fireEvent.click(XPathExpression); //Uncheck Name column\n+\n+      //Confirm that the XPath Expression column(Along with Name Column) is not visible in Entity table anymore.\n+      expect(queryByText(\"concat(propName,'-NEW')\")).not.toBeInTheDocument();\n+      expect(queryByText('propId')).not.toBeInTheDocument();\n+      expect(queryByText('propName')).not.toBeInTheDocument();\n+\n+      //Checking the columns one by one in selector and verify that they appear in entity table\n+      fireEvent.click(Name); //Check Name column\n+      //Props below should be available now\n+      expect(getByText('propId')).toBeInTheDocument(); \n+      expect(getByText('propName')).toBeInTheDocument();\n+\n+      fireEvent.click(XPathExpression); //Check XPathExpression column\n+      //Props below should be available now\n+      expect(getByText(\"concat(propName,'-NEW')\")).toBeInTheDocument();\n+\n+    });\n+\n+    test('Sorting in Source and Entity table',() => {", "originalCommit": "18d60b37934ef7b46326d1f0e90e26c3858e5792", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "babc49fa97f371422b1074eb7eb2d636e29da2e4", "url": "https://github.com/marklogic/marklogic-data-hub/commit/babc49fa97f371422b1074eb7eb2d636e29da2e4", "message": "DHFPROD-3020: Updated test data and fixed the corresponding tests", "committedDate": "2020-04-23T21:27:23Z", "type": "forcePushed"}, {"oid": "fe0b78d4912196e890fead6db013c2912e5a1a4d", "url": "https://github.com/marklogic/marklogic-data-hub/commit/fe0b78d4912196e890fead6db013c2912e5a1a4d", "message": "DHFPROD-3020: Filtering, Sorting in Source/Entity tables and Column Option Selector in Entity Table\nDHFPROD-3020: Updated test data and fixed the corresponding tests (+1 squashed commit)\nSquashed commits:\n[57153440c] DHFPROD-3020: Filtering, Sorting in Source/Entity tables and Column Option Selector in Entity Table\nDHFPROD-3020: Added Tests for Filtering , Sorting and Column Option Selector. Also fixed few issues in sorting. (+3 squashed commits)\nSquashed commits:\n[67c5c0970] DHFPROD-3020: Adding Filter capability for nested columns in Source and Entity tables\n[c65c6b233] DHFPROD-3020: Adding the filter capability in source and entity Name columns\n[41e1ee9ea] DHFPROD-3020: Added column options dropdown menu for entity table", "committedDate": "2020-04-23T21:28:18Z", "type": "commit"}, {"oid": "fe0b78d4912196e890fead6db013c2912e5a1a4d", "url": "https://github.com/marklogic/marklogic-data-hub/commit/fe0b78d4912196e890fead6db013c2912e5a1a4d", "message": "DHFPROD-3020: Filtering, Sorting in Source/Entity tables and Column Option Selector in Entity Table\nDHFPROD-3020: Updated test data and fixed the corresponding tests (+1 squashed commit)\nSquashed commits:\n[57153440c] DHFPROD-3020: Filtering, Sorting in Source/Entity tables and Column Option Selector in Entity Table\nDHFPROD-3020: Added Tests for Filtering , Sorting and Column Option Selector. Also fixed few issues in sorting. (+3 squashed commits)\nSquashed commits:\n[67c5c0970] DHFPROD-3020: Adding Filter capability for nested columns in Source and Entity tables\n[c65c6b233] DHFPROD-3020: Adding the filter capability in source and entity Name columns\n[41e1ee9ea] DHFPROD-3020: Added column options dropdown menu for entity table", "committedDate": "2020-04-23T21:28:18Z", "type": "forcePushed"}]}