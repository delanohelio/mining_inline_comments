{"pr_number": 3613, "pr_title": "DHFPROD-3918: Bench/flows implementation", "pr_createdAt": "2020-02-25T03:44:53Z", "pr_url": "https://github.com/marklogic/marklogic-data-hub/pull/3613", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDAzMTY5Nw==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3613#discussion_r384031697", "bodyText": "@wooldridge should this be MLButton?\nThe edit feature should be similar to load data config. An operator should be able to click open the \"Edit Flow\" dialog to view.\nJust for readability, I am not too particular about this. Can properties that belong to one element be in one line? Its ok when there is only 1 or 2 elements. When there are more like in this return block to me its more readable if they are in one line.", "author": "bsrikan", "createdAt": "2020-02-25T18:00:13Z", "path": "one-ui/ui/src/components/flows/flows.tsx", "diffHunk": "@@ -0,0 +1,283 @@\n+import React, { useState, CSSProperties } from 'react';\n+import { Collapse, Button, Icon, Card, Tooltip, Modal } from 'antd';\n+import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n+import { faTrashAlt } from '@fortawesome/free-regular-svg-icons';\n+import NewFlowDialog from './new-flow-dialog/new-flow-dialog';\n+import sourceFormatOptions from '../../config/formats.config';\n+import styles from './flows.module.scss';\n+\n+const { Panel } = Collapse;\n+\n+interface Props {\n+    flows: any;\n+    loads: any;\n+    deleteFlow: any;\n+    createFlow: any;\n+    updateFlow: any;\n+    deleteStep: any;\n+    runStep: any;\n+    canReadFlows: boolean;\n+    canWriteFlows: boolean;\n+}\n+\n+const StepDefinitionTypeTitles = {\n+    'INGESTION': 'Load',\n+    'MAPPING': 'Map',\n+    'MASTERING': 'Master',\n+    'MATCHING': 'Match',\n+    'MERGING': 'Merge',\n+    'CUSTOM': 'Custom'\n+}\n+\n+const Flows: React.FC<Props> = (props) => {\n+    const [newFlow, setNewFlow] = useState(false);\n+    const [title, setTitle] = useState('');\n+    const [flowData, setFlowData] = useState({});\n+    const [dialogVisible, setDialogVisible] = useState(false);\n+    const [stepDialogVisible, setStepDialogVisible] = useState(false);\n+    const [flowName, setFlowName] = useState('');\n+    const [stepName, setStepName] = useState('');\n+\n+    const OpenAddNewDialog = () => {\n+        setTitle('New Flow');\n+        setNewFlow(true);\n+    }\n+\n+    const getLoadSourceFormat = (loadId) => {\n+        let found = props.loads.find(load => {\n+            return load.name === loadId;\n+        });\n+        return found ? found.sourceFormat : 'json';\n+    }\n+\n+    //Custom CSS for source Format\n+    const sourceFormatStyle = (sourceFmt) => {\n+        let customStyles: CSSProperties;\n+        if (!sourceFmt) {\n+            customStyles = {\n+                float: 'left',\n+                backgroundColor: '#fff',\n+                color: '#fff',\n+                padding: '5px'\n+            }\n+        } else {\n+            customStyles = {\n+                float: 'left',\n+                backgroundColor: (sourceFmt.toUpperCase() === 'XML' ? sourceFormatOptions.xml.color : (sourceFmt.toUpperCase() === 'JSON' ? sourceFormatOptions.json.color : (sourceFmt.toUpperCase() === 'CSV' ? sourceFormatOptions.csv.color : sourceFormatOptions.default.color))),\n+                fontSize: '12px',\n+                borderRadius: '50%',\n+                textAlign: 'left',\n+                color: '#ffffff',\n+                padding: '5px'\n+            }\n+        }\n+        return customStyles;\n+    }\n+\n+    const handleFlowDelete = (name) => {\n+        setDialogVisible(true);\n+        setFlowName(name);\n+    }\n+\n+    const handleStepDelete = (fName, sName) => {\n+        setStepDialogVisible(true);\n+        setFlowName(fName);\n+        setStepName(sName);\n+    }\n+\n+    const onOk = (name) => {\n+        props.deleteFlow(name)\n+        setDialogVisible(false);\n+    }\n+\n+    const onStepOk = (fName, sName) => {\n+        props.deleteStep(fName, sName)\n+        setStepDialogVisible(false);\n+    }\n+\n+    const onCancel = () => {\n+        setDialogVisible(false);\n+        setStepDialogVisible(false);\n+    }  \n+\n+    const deleteConfirmation = (\n+        <Modal\n+            visible={dialogVisible}\n+            okText='Yes'\n+            okType='primary'\n+            cancelText='No'\n+            onOk={() => onOk(flowName)}\n+            onCancel={() => onCancel()}\n+            width={350}\n+        >\n+            <div style={{fontSize: '16px', padding: '10px'}}>Are you sure you want to delete flow \"{flowName}\"?</div>\n+        </Modal>\n+    );\n+\n+    const deleteStepConfirmation = (\n+        <Modal\n+            visible={stepDialogVisible}\n+            okText='Yes'\n+            okType='primary'\n+            cancelText='No'\n+            onOk={() => onStepOk(flowName, stepName)}\n+            onCancel={() => onCancel()}\n+            width={350}\n+        >\n+            <div style={{fontSize: '16px', padding: '10px'}}>Are you sure you want to delete step \"{stepName}\" from flow \"{flowName}\"?</div>\n+        </Modal>\n+    );\n+\n+    const deleteIcon = (name) => (\n+        <span className={styles.deleteFlow}>\n+            {props.canWriteFlows ?\n+                <Tooltip \n+                    title={'Delete Flow'} \n+                    placement=\"bottom\"\n+                >\n+                    <i>\n+                        <FontAwesomeIcon \n+                            icon={faTrashAlt} \n+                            onClick={event => {\n+                                // If you don't want click extra trigger collapse, you can prevent this:\n+                                event.stopPropagation();\n+                                handleFlowDelete(name);\n+                            }}\n+                            className={styles.deleteIcon} \n+                            size=\"lg\"/>\n+                    </i>\n+                </Tooltip> :\n+                <Tooltip \n+                    title={'Delete'} \n+                    placement=\"bottom\"\n+                >\n+                    <i>\n+                        <FontAwesomeIcon \n+                            icon={faTrashAlt} \n+                            onClick={(event) => { \n+                                event.stopPropagation(); \n+                                event.preventDefault(); \n+                            }}\n+                            className={styles.disabledDeleteIcon} \n+                            size=\"lg\"/>\n+                    </i>\n+                </Tooltip> }\n+        </span>\n+    );\n+\n+    const flowHeader = (name, index) => (\n+        <Tooltip \n+            title={'Edit Flow'} \n+            placement=\"right\"\n+        >\n+            {props.canWriteFlows ?\n+                <span className={styles.flowName} onClick={(e) => OpenEditFlowDialog(e, index)}>\n+                    {name}\n+                </span>  :\n+                <span className={styles.disabledFlowName} onClick={(e) => e.stopPropagation()}>\n+                    {name}\n+                </span>\n+            }\n+        </Tooltip>\n+    );\n+\n+    const OpenEditFlowDialog = (e, index) => {\n+        e.stopPropagation();\n+        setTitle('Edit Flow');\n+        setFlowData(prevState => ({ ...prevState, ...props.flows[index]}));\n+        setNewFlow(true);\n+    }  \n+\n+    const StepDefToTitle = (stepDef) => {\n+        return (StepDefinitionTypeTitles[stepDef]) ? StepDefinitionTypeTitles[stepDef] : 'Unknown';\n+    }\n+\n+    let panels;\n+    if (props.flows) {\n+        panels = props.flows.map((flow, i) => {\n+            let name = flow.name;\n+            let indexes = Object.keys(flow.steps);\n+            let cards = indexes.map((i) => {\n+                let step = flow.steps[i];\n+                // TODO Handle steps that don't have input formats\n+                let stepFormat = (step.fileLocations) ?  getLoadSourceFormat(step.name) : 'json';\n+                return (\n+                    <Card \n+                        style={{ width: 300, marginRight: 20 }} \n+                        title={StepDefToTitle(step.stepDefinitionType)} \n+                        size=\"small\"\n+                        extra={\n+                            <div className={styles.actions}>\n+                                <div className={styles.run} onClick={() => props.runStep(step.name)}><Icon type=\"play-circle\" theme=\"filled\" /></div>\n+                                {props.canWriteFlows ?\n+                                    <Tooltip \n+                                        title={'Delete Step'} \n+                                        placement=\"bottom\"\n+                                    >\n+                                        <div className={styles.delete} onClick={() => handleStepDelete(flow.name, step.name)}><Icon type=\"close\" /></div>\n+                                    </Tooltip> :\n+                                    <Tooltip \n+                                        title={'Delete Step'} \n+                                        placement=\"bottom\"\n+                                    >\n+                                        <div className={styles.disabledDelete} onClick={(event) => { event.stopPropagation(); event.preventDefault(); }}><Icon type=\"close\" /></div>\n+                                    </Tooltip> \n+                                }\n+                            </div>\n+                        }\n+                    >\n+                        <div className={styles.cardContent}>\n+                            <div className={styles.format} style={sourceFormatStyle(stepFormat)}>{stepFormat.toUpperCase()}</div>\n+                            <div className={styles.name}>{step.name}</div>\n+                        </div>\n+                    </Card>\n+                )\n+            });\n+            return (\n+                <Panel \n+                    header={flowHeader(flow.name, i)} \n+                    key={i} \n+                    extra={deleteIcon(name)}\n+                >\n+                    <div className={styles.panelContent}>\n+                        {cards}\n+                    </div>\n+                </Panel>\n+            )\n+        })\n+    }\n+\n+   return (\n+    <div id=\"flows-container\" className={styles.flowsContainer}>\n+        {props.canReadFlows || props.canWriteFlows ?\n+            <>\n+                <div className={styles.createContainer}>\n+                    <Button ", "originalCommit": "5a601fc5ff3e49eabf8b8586e22ea1b9d1fae1b8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA3MzQ3MA==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3613#discussion_r384073470", "bodyText": "Added MlButton and committed. Let's move the discussion of general coding style out to the broader group (including the Explorer team).", "author": "wooldridge", "createdAt": "2020-02-25T19:21:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDAzMTY5Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE5NjEzMQ==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3613#discussion_r384196131", "bodyText": "I think this file shouldn't be here, because we can't support .mjs files because we have to still support ML9?", "author": "rjrudin", "createdAt": "2020-02-25T23:46:46Z", "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/impl/hub-utils/invoke-update-node-path.mjs", "diffHunk": "@@ -0,0 +1,25 @@\n+/**", "originalCommit": "c94b39cd3aad1b3cc47cd7852fd9e6a5ee602422", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDIzNzEzNw==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3613#discussion_r384237137", "bodyText": "yes. it was missed between branches. I'll add a commit to address it.", "author": "ryanjdew", "createdAt": "2020-02-26T02:01:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE5NjEzMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE5NjUwMg==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3613#discussion_r384196502", "bodyText": "No action needed in this PR, but the next time we have to touch this class, let's fold it into FlowManager.", "author": "rjrudin", "createdAt": "2020-02-25T23:47:51Z", "path": "one-ui/src/main/java/com/marklogic/hub/curation/services/FlowManagerService.java", "diffHunk": "@@ -38,6 +38,10 @@\n     private Scaffolding scaffolding;\n \n     public Flow updateFlow(String flowJson) {\n+        return updateFlow(flowJson, false);", "originalCommit": "c94b39cd3aad1b3cc47cd7852fd9e6a5ee602422", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "f325e6c36f96571cee8f5733c1c25eca4cf58d02", "url": "https://github.com/marklogic/marklogic-data-hub/commit/f325e6c36f96571cee8f5733c1c25eca4cf58d02", "message": "Updating target branch from develop to feature/5.3.0", "committedDate": "2020-02-27T00:39:43Z", "type": "commit"}, {"oid": "29605c5b4482ea548a81e9f43560b8912e6e498e", "url": "https://github.com/marklogic/marklogic-data-hub/commit/29605c5b4482ea548a81e9f43560b8912e6e498e", "message": "DHFPROD-4105: Add API for linking/removing artifacts from steps", "committedDate": "2020-02-27T00:52:25Z", "type": "commit"}, {"oid": "90bb3f6d43678bd2b4ff49c4cd43e0b234d8bbff", "url": "https://github.com/marklogic/marklogic-data-hub/commit/90bb3f6d43678bd2b4ff49c4cd43e0b234d8bbff", "message": "DHFPROD-4461: Remove mjs syntax that that survived a merge", "committedDate": "2020-02-27T00:53:29Z", "type": "commit"}, {"oid": "354281c1275830a3233a7478d3c4af5c224eb061", "url": "https://github.com/marklogic/marklogic-data-hub/commit/354281c1275830a3233a7478d3c4af5c224eb061", "message": "DHFPROD-3918: Update flowId and stepId descriptions\n\nflowId is the flow name\nstepId is a composite of '<stepName>-<stepType>'", "committedDate": "2020-02-27T00:53:29Z", "type": "commit"}, {"oid": "9fcb1b1033a8bf3c8ba54ca76e6d60cdd8bb7b34", "url": "https://github.com/marklogic/marklogic-data-hub/commit/9fcb1b1033a8bf3c8ba54ca76e6d60cdd8bb7b34", "message": "DHFPROD-3918: Bench/Flows components", "committedDate": "2020-02-27T00:56:38Z", "type": "commit"}, {"oid": "2e2a40945bef9233681cde09c21ee3d27f507123", "url": "https://github.com/marklogic/marklogic-data-hub/commit/2e2a40945bef9233681cde09c21ee3d27f507123", "message": "DHFPROD-3918: Remove edit icon and hover styles for flow name", "committedDate": "2020-02-27T00:56:38Z", "type": "commit"}, {"oid": "9b5fea713aa35ff8d711ab4d7461194282ceea37", "url": "https://github.com/marklogic/marklogic-data-hub/commit/9b5fea713aa35ff8d711ab4d7461194282ceea37", "message": "DHFPROD-3918: Mouseover links in Load Data cards", "committedDate": "2020-02-27T00:56:38Z", "type": "commit"}, {"oid": "caf8f757ed78aa616caa5e6b3d2eee47f8255620", "url": "https://github.com/marklogic/marklogic-data-hub/commit/caf8f757ed78aa616caa5e6b3d2eee47f8255620", "message": "DHFPROD-3918: Flows functionality\n\n- Update Add Flow functionality to use card overlay (instead of contextual menu)\n- Move help icons in New Flow dialog to after inputs\n- Fix confirmation dialog button color\n- Remove unneeded CSS", "committedDate": "2020-02-27T00:56:38Z", "type": "commit"}, {"oid": "c5e32e3906dc2d4751577e8b0859f901a6cb91ae", "url": "https://github.com/marklogic/marklogic-data-hub/commit/c5e32e3906dc2d4751577e8b0859f901a6cb91ae", "message": "DHFPROD-3918: Remove stale code", "committedDate": "2020-02-27T00:56:38Z", "type": "commit"}, {"oid": "3cf11cdf77854162751699049ccee234c6b745b9", "url": "https://github.com/marklogic/marklogic-data-hub/commit/3cf11cdf77854162751699049ccee234c6b745b9", "message": "DHFPROD-3918: Update flows test", "committedDate": "2020-02-27T00:56:38Z", "type": "commit"}, {"oid": "9606c0ac990b08100be5e8217a412c54d5f3f1f3", "url": "https://github.com/marklogic/marklogic-data-hub/commit/9606c0ac990b08100be5e8217a412c54d5f3f1f3", "message": "DHFPROD-3918: Disable flow edit if no privileges", "committedDate": "2020-02-27T00:56:38Z", "type": "commit"}, {"oid": "95e511e41298c71d1304b73c4263997176c0a7cb", "url": "https://github.com/marklogic/marklogic-data-hub/commit/95e511e41298c71d1304b73c4263997176c0a7cb", "message": "DHFPROD-3918: Use MlButton component for Bench view", "committedDate": "2020-02-27T00:56:38Z", "type": "commit"}, {"oid": "4ff71038d8d26d0a50fae3276d2a0fa15414b097", "url": "https://github.com/marklogic/marklogic-data-hub/commit/4ff71038d8d26d0a50fae3276d2a0fa15414b097", "message": "DHFPROD-4513: Fix operator display of flow details", "committedDate": "2020-02-27T00:56:38Z", "type": "commit"}, {"oid": "02430c294d9121be8730db235b09ea9839b8b12f", "url": "https://github.com/marklogic/marklogic-data-hub/commit/02430c294d9121be8730db235b09ea9839b8b12f", "message": "DHFPROD-3918: Don't use mjs to be compatible with ML 9", "committedDate": "2020-02-27T00:56:38Z", "type": "commit"}, {"oid": "02430c294d9121be8730db235b09ea9839b8b12f", "url": "https://github.com/marklogic/marklogic-data-hub/commit/02430c294d9121be8730db235b09ea9839b8b12f", "message": "DHFPROD-3918: Don't use mjs to be compatible with ML 9", "committedDate": "2020-02-27T00:56:38Z", "type": "forcePushed"}]}