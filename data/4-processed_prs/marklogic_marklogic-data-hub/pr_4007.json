{"pr_number": 4007, "pr_title": "DHFPROD-4932:Add 'outputURIPrefix' in ingestion step, replace \"OutputURI Replacement\" from HC", "pr_createdAt": "2020-05-27T20:22:38Z", "pr_url": "https://github.com/marklogic/marklogic-data-hub/pull/4007", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQyMjUwNA==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4007#discussion_r431422504", "bodyText": "Generally, I wouldn't bother with these assertions that verify that things were removed. Someone will wonder 6 months later - why is it important that we assert this? I think it's sufficient to just remove the feature.", "author": "rjrudin", "createdAt": "2020-05-27T20:28:51Z", "path": "marklogic-data-hub-central/ui/src/components/load-data/new-data-load-dialog/new-data-load-dialog.test.tsx", "diffHunk": "@@ -33,7 +33,16 @@ describe('New/edit load data configuration', () => {\n     expect(baseElement.querySelector('#otherSeparator')).not.toBeInTheDocument();\n     expect(baseElement.querySelector('#fileUpload')).toBeInTheDocument();\n     expect(baseElement.querySelector('#targetFormat')).toBeInTheDocument();\n-    expect(baseElement.querySelector('#outputUriReplacement')).toBeInTheDocument();\n+    expect(baseElement.querySelector('#outputUriReplacement')).not.toBeInTheDocument();", "originalCommit": "e36705c2be4bb4ffa2f29036b4c69dc74eec84eb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQyMzY2OQ==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4007#discussion_r431423669", "bodyText": "Can this be setOutputUriPrefix instead of setOutUriPrefix? I am generally against any sort of abbreviations like this - same goes for \"src\" and \"tgt\" instead of \"source\" and \"target\". If this were a local variable in a function that's just a few lines long, I think extremely short abbreviations can work. But otherwise, we should use regular words, no need for abbreviations that can potentially confuse.", "author": "rjrudin", "createdAt": "2020-05-27T20:31:08Z", "path": "marklogic-data-hub-central/ui/src/components/load-data/new-data-load-dialog/new-data-load-dialog.tsx", "diffHunk": "@@ -14,20 +14,17 @@ const NewDataLoadDialog = (props) => {\n   const [inputFilePath, setInputFilePath] = useState(props.stepData && props.stepData.inputFilePath ? props.stepData.inputFilePath : '');\n   const [srcFormat, setSrcFormat] = useState(props.stepData && props.stepData != {} ? props.stepData.sourceFormat : 'json');\n   const [tgtFormat, setTgtFormat] = useState(props.stepData && props.stepData != {} ? props.stepData.targetFormat : 'json');\n-  const [outUriReplacement, setOutUriReplacement] = useState(props.stepData && props.stepData != {} ? props.stepData.outputURIReplacement : '');\n+  const [outUriPrefix, setOutUriPrefix] = useState(props.stepData && props.stepData != {} ? props.stepData.outputURIPrefix : '');", "originalCommit": "e36705c2be4bb4ffa2f29036b4c69dc74eec84eb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQyNjUzMg==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4007#discussion_r431426532", "bodyText": "Can we do this in the loadData.sjs module instead? This endpoint should be as generic as possible; ideally, the step-type-specific logic is all in modules specific to a step type.\nLooks like validateArtifact would be a simple way to do it.", "author": "rjrudin", "createdAt": "2020-05-27T20:36:41Z", "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/data-services/step/saveStep.sjs", "diffHunk": "@@ -35,7 +35,15 @@ let existingStep = fn.head(cts.search(cts.andQuery([\n \n if (existingStep) {\n   xdmp.trace(consts.TRACE_STEP, `Step with name ${stepName} and type ${stepDefinitionType} already exists, so will update`);\n-  let updatedStep = Object.assign(existingStep.toObject(), stepProperties);\n+  const isIngestionStep = \"ingestion\" === stepDefinitionType.toLowerCase() ? true : false;", "originalCommit": "e36705c2be4bb4ffa2f29036b4c69dc74eec84eb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQyNzA5MA==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4007#discussion_r431427090", "bodyText": "Won't WriteStepRunner throw this error? I think it's fine to just handle it in one place.", "author": "rjrudin", "createdAt": "2020-05-27T20:37:42Z", "path": "marklogic-data-hub/src/main/java/com/marklogic/hub/cli/client/CommandLineFlowInputs.java", "diffHunk": "@@ -111,10 +114,20 @@\n                 runFlowString.append(\"\\n\\t\\tInput File Path: \" + inputFilePath);\n                 fileLocations.put(\"inputFilePath\", inputFilePath);\n             }\n+\n+            if (outputURIPrefix != null) {\n+                if(outputURIReplacement != null){", "originalCommit": "e36705c2be4bb4ffa2f29036b4c69dc74eec84eb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQyNzg3OQ==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4007#discussion_r431427879", "bodyText": "Shouldn't outputURIReplacement be dropped here since both exist?", "author": "rjrudin", "createdAt": "2020-05-27T20:39:12Z", "path": "marklogic-data-hub/src/test/ml-modules/root/test/suites/data-hub/5/data-services/step/convertIngestionStep.sjs", "diffHunk": "@@ -70,6 +71,7 @@ assertions.push(\n   test.assertEqual(\"xml\", flowStep.fileLocations.inputFileType),\n   test.assertEqual(\"data-sets/CustomerLoadJSON\", flowStep.fileLocations.inputFilePath),\n   test.assertEqual(\".*CustomerLoadJSON,'/customer'\", flowStep.fileLocations.outputURIReplacement),\n+  test.assertEqual(\"/customer/\", flowStep.fileLocations.outputURIPrefix),", "originalCommit": "e36705c2be4bb4ffa2f29036b4c69dc74eec84eb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "5392094621773bbf2fb6b7f326295682c17528d4", "url": "https://github.com/marklogic/marklogic-data-hub/commit/5392094621773bbf2fb6b7f326295682c17528d4", "message": "DHFPROD-4932:Add 'outputURIPrefix' in ingestion step, replace \"Output URI Replacement\" from HC", "committedDate": "2020-05-27T23:27:14Z", "type": "forcePushed"}, {"oid": "5d0823de615442f93563e8cbb4f01f23a518e474", "url": "https://github.com/marklogic/marklogic-data-hub/commit/5d0823de615442f93563e8cbb4f01f23a518e474", "message": "DHFPROD-4932:Add 'outputURIPrefix' in ingestion step, replace \"Output URI Replacement\" from HC", "committedDate": "2020-05-28T00:54:35Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTgxMTUzMw==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4007#discussion_r431811533", "bodyText": "I think it'd be good to change these checks to use a StringUtils method - e.g. hasText, isNotEmpty - because if one has a value and the other just has \"\", we're fine with that.", "author": "rjrudin", "createdAt": "2020-05-28T12:53:32Z", "path": "marklogic-data-hub/src/main/java/com/marklogic/hub/step/impl/WriteStepRunner.java", "diffHunk": "@@ -398,6 +400,10 @@ protected void loadStepRunnerParameters(){\n             this.withStopOnFailure(Boolean.parseBoolean(stepConfig.get(\"stopOnFailure\").toString()));\n         }\n \n+        if(outputURIPrefix != null && outputURIReplacement != null){", "originalCommit": "5d0823de615442f93563e8cbb4f01f23a518e474", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTgxMjg1Nw==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4007#discussion_r431812857", "bodyText": "I frequently like to put logic like this into a protected method so that it can easily unit-tested. You can even pass in the \"osName\" so you can verify the windows-specific code while not on windows. I didn't check the test coverage of all the conditions in here, but it'd be really easy to get 100% coverage of it with unit tests that will of course run very quickly too (i.e. put them in a class that doesn't extend anything, as you don't need any of the HubTestBase plumbing).", "author": "rjrudin", "createdAt": "2020-05-28T12:55:37Z", "path": "marklogic-data-hub/src/main/java/com/marklogic/hub/step/impl/WriteStepRunner.java", "diffHunk": "@@ -652,14 +658,24 @@ private RunStepResponse runIngester(RunStepResponse runStepResponse, Collection<\n     }\n \n     private void processCsv(JacksonHandle jacksonHandle, File file) {\n-        String uri = file.getParent();\n-        if(SystemUtils.OS_NAME.toLowerCase().contains(\"windows\")){\n-            uri = \"/\" + FilenameUtils.separatorsToUnix(StringUtils.replaceOnce(uri, \":\", \"\"));\n+        String uri;", "originalCommit": "5d0823de615442f93563e8cbb4f01f23a518e474", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTk3MDk5MQ==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4007#discussion_r431970991", "bodyText": "Moved uri generation for csv to a protected method and added test in WriteTestBatcherTest class", "author": "srinathgit", "createdAt": "2020-05-28T16:33:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTgxMjg1Nw=="}], "type": "inlineReview"}, {"oid": "4509ef903c799d0fb291254215151147fc149da6", "url": "https://github.com/marklogic/marklogic-data-hub/commit/4509ef903c799d0fb291254215151147fc149da6", "message": "DHFPROD-4932:Add 'outputURIPrefix' in ingestion step, replace \"Output URI Replacement\" from HC", "committedDate": "2020-05-28T16:31:50Z", "type": "commit"}, {"oid": "4509ef903c799d0fb291254215151147fc149da6", "url": "https://github.com/marklogic/marklogic-data-hub/commit/4509ef903c799d0fb291254215151147fc149da6", "message": "DHFPROD-4932:Add 'outputURIPrefix' in ingestion step, replace \"Output URI Replacement\" from HC", "committedDate": "2020-05-28T16:31:50Z", "type": "forcePushed"}]}