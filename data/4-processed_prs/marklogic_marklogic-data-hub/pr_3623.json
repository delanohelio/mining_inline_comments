{"pr_number": 3623, "pr_title": "DHFPROD-3922: Add Jobs APIs to One UI", "pr_createdAt": "2020-02-28T17:24:13Z", "pr_url": "https://github.com/marklogic/marklogic-data-hub/pull/3623", "timeline": [{"oid": "7f2f0cd4588f04f3e7755982ec36dec6bfade753", "url": "https://github.com/marklogic/marklogic-data-hub/commit/7f2f0cd4588f04f3e7755982ec36dec6bfade753", "message": "DHFPROD-3922: Add Jobs APIs to One UI", "committedDate": "2020-02-28T17:15:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgzODUwMg==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3623#discussion_r385838502", "bodyText": "I think this REST extension is prime for refactoring. The \"get\" function is difficult to understand because it supports so many operations, and the error that's thrown - \"Incorrect options\" - isn't helpful.\nWhat do you think of starting a new \"jobs\" service with a \"getLatestJobForFlows\" endpoint? (I don't think \"doc\" should be part of the name, that's an implementation detail). I understand if it's too much as I know Mike needs this right away, just throwing it out for consideration, as I do think we want to shift to a set of well-defined endpoints for jobs as soon as possible.", "author": "rjrudin", "createdAt": "2020-02-28T17:56:48Z", "path": "marklogic-data-hub/src/main/resources/ml-modules/services/mlJobs.sjs", "diffHunk": "@@ -43,7 +43,11 @@ function get(context, params) {\n     resp = datahub.jobs.getJobDocsByFlow(flow);\n   }\n   else if (fn.exists(latest)) {\n-    resp = datahub.jobs.getLastestJobDocPerFlow();\n+    flowNames = (fn.exists(flowNames)) ? datahub.hubUtils.normalizeToSequence(flowNames) : flowNames;", "originalCommit": "7f2f0cd4588f04f3e7755982ec36dec6bfade753", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgzOTIzOA==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3623#discussion_r385839238", "bodyText": "Would this be appropriate in JobDocManager, or is this logic too specific to the definition of \"getJobs\" here?", "author": "rjrudin", "createdAt": "2020-02-28T17:58:12Z", "path": "one-ui/src/main/java/com/marklogic/hub/curation/controllers/JobsController.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Copyright 2012-2019 MarkLogic Corporation\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ */\n+package com.marklogic.hub.curation.controllers;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.marklogic.hub.FlowManager;\n+import com.marklogic.hub.impl.FlowManagerImpl;\n+import com.marklogic.hub.job.JobDocManager;\n+import com.marklogic.hub.oneui.managers.SearchableManager;\n+import com.marklogic.hub.oneui.models.HubConfigSession;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.MediaType;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestMethod;\n+import org.springframework.web.bind.annotation.RequestParam;\n+import org.springframework.web.bind.annotation.ResponseBody;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+@Controller\n+@RequestMapping(value=\"/api/jobs\")\n+public class JobsController extends SearchableManager {\n+    @Autowired\n+    private HubConfigSession hubConfig;\n+\n+\n+    @RequestMapping(method = RequestMethod.GET)\n+    @ResponseBody\n+    public ResponseEntity<?> getJobs(@RequestParam(value = \"flowName\", required = false) String flowName) {\n+        JobDocManager jobDocManager = getJobDocManager();", "originalCommit": "7f2f0cd4588f04f3e7755982ec36dec6bfade753", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgzOTU3NQ==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3623#discussion_r385839575", "bodyText": "I recommend adding the jobId and the flowName to this message - e.g. \"Unable to find document with ID ${jobId} for flow ${flowName}\".", "author": "rjrudin", "createdAt": "2020-02-28T17:58:55Z", "path": "one-ui/src/main/java/com/marklogic/hub/curation/controllers/JobsController.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Copyright 2012-2019 MarkLogic Corporation\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ */\n+package com.marklogic.hub.curation.controllers;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.marklogic.hub.FlowManager;\n+import com.marklogic.hub.impl.FlowManagerImpl;\n+import com.marklogic.hub.job.JobDocManager;\n+import com.marklogic.hub.oneui.managers.SearchableManager;\n+import com.marklogic.hub.oneui.models.HubConfigSession;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.MediaType;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestMethod;\n+import org.springframework.web.bind.annotation.RequestParam;\n+import org.springframework.web.bind.annotation.ResponseBody;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+@Controller\n+@RequestMapping(value=\"/api/jobs\")\n+public class JobsController extends SearchableManager {\n+    @Autowired\n+    private HubConfigSession hubConfig;\n+\n+\n+    @RequestMapping(method = RequestMethod.GET)\n+    @ResponseBody\n+    public ResponseEntity<?> getJobs(@RequestParam(value = \"flowName\", required = false) String flowName) {\n+        JobDocManager jobDocManager = getJobDocManager();\n+        ArrayNode jobsArray;\n+        if (flowName == null) {\n+            FlowManager flowManager = new FlowManagerImpl(hubConfig);\n+            List<String> flowNames = flowManager.getFlowNames();\n+            jobsArray = new ObjectMapper().createArrayNode();\n+            flowNames.forEach((name) -> {\n+                    jobsArray.addAll((ArrayNode) getJobs(jobDocManager, null, name));\n+            });\n+        } else {\n+            jobsArray = (ArrayNode) getJobs(jobDocManager, null, flowName);\n+        }\n+        return new ResponseEntity<>(flattenJobsJson(jobsArray), HttpStatus.OK);\n+    }\n+\n+    @RequestMapping(value = \"/{jobId}\", method = RequestMethod.GET)\n+    @ResponseBody\n+    public ResponseEntity<?> getJob(@PathVariable String jobId) {\n+        JsonNode jobsObj = getJobs(getJobDocManager(), jobId, null);\n+        return new ResponseEntity<>(flattenJobsJson(jobsObj), HttpStatus.OK);\n+    }\n+\n+    @RequestMapping(value = \"latest/{flowName}\", method = RequestMethod.GET, produces = {MediaType.APPLICATION_JSON_VALUE})\n+    @ResponseBody\n+    public JsonNode getLatestJobDocForFlow(@PathVariable String flowName) {\n+        return flattenJobsJson(getJobDocManager().getLatestJobDocumentForFlow(flowName));\n+    }\n+\n+    @RequestMapping(value = \"latest\", method = RequestMethod.GET, produces = {MediaType.APPLICATION_JSON_VALUE})\n+    @ResponseBody\n+    public JsonNode getLatestJobDocsPerFlow() {\n+        return flattenJobsJson(getJobDocManager().getLatestJobDocumentForFlows(Collections.emptyList()));\n+    }\n+\n+    private JsonNode getJobs(JobDocManager jobDocManager, String jobId, String flowName) {\n+        JsonNode jobsJson = (ArrayNode) jobDocManager.getJobDocument(jobId, flowName);\n+        if (jobsJson == null) {\n+            throw new RuntimeException(\"Unable to get job document\");", "originalCommit": "7f2f0cd4588f04f3e7755982ec36dec6bfade753", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}