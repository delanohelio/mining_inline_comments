{"pr_number": 4496, "pr_title": "DHFPROD-5682:5788: Retrieve and apply keystore from cloud services", "pr_createdAt": "2020-08-28T00:27:18Z", "pr_url": "https://github.com/marklogic/marklogic-data-hub/pull/4496", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTI4OTU2Nw==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4496#discussion_r479289567", "bodyText": "Very helpful comment, thanks", "author": "rjrudin", "createdAt": "2020-08-28T13:28:34Z", "path": "marklogic-data-hub-central/build.gradle", "diffHunk": "@@ -68,6 +68,15 @@ dependencies {\n         exclude group: \"com.squareup.okhttp3\", module: \"okhttp\"\n         exclude group: \"com.squareup.okhttp3\", module: \"logging-interceptor\"\n     }\n+\n+    // Excluding okhttp3 dependency as it bumps down the dependency from 4.4.0 to 3.x", "originalCommit": "1ab1cd940020685bb4174eabcfd80be07ceb0d22", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTI5NjE0Mw==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4496#discussion_r479296143", "bodyText": "I don't think you need this, as there's no client for this interface.", "author": "rjrudin", "createdAt": "2020-08-28T13:35:53Z", "path": "marklogic-data-hub-central/src/main/java/com/marklogic/hub/central/keystore/KeyStoreInit.java", "diffHunk": "@@ -0,0 +1,26 @@\n+/*\n+ * Copyright 2012-2020 MarkLogic Corporation\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ */\n+package com.marklogic.hub.central.keystore;\n+\n+import java.io.InputStream;\n+\n+public interface KeyStoreInit {", "originalCommit": "1ab1cd940020685bb4174eabcfd80be07ceb0d22", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTI5OTAxNw==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4496#discussion_r479299017", "bodyText": "Just do \"containerName\" and \"blobName\", unless we think we're going to have other properties on objects named \"container\" and \"blob\".", "author": "rjrudin", "createdAt": "2020-08-28T13:38:58Z", "path": "marklogic-data-hub-central/src/main/java/com/marklogic/hub/central/keystore/AzureKeyStoreInit.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2012-2020 MarkLogic Corporation\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ */\n+package com.marklogic.hub.central.keystore;\n+\n+import com.azure.identity.DefaultAzureCredentialBuilder;\n+import com.azure.storage.blob.BlobClient;\n+import com.azure.storage.blob.BlobClientBuilder;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.stereotype.Component;\n+\n+import java.io.InputStream;\n+\n+@Component\n+@Profile(\"azure\")\n+public class AzureKeyStoreInit extends AbstractKeyStoreInit {\n+\n+    @Value(\"${key-store-password}\")\n+    private String keyStorePassword;\n+\n+    @Value(\"${azure.storage.endpoint}\")\n+    private String endpoint;\n+\n+    @Value(\"${azure.storage.container.name}\")", "originalCommit": "1ab1cd940020685bb4174eabcfd80be07ceb0d22", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQwMjU2NQ==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4496#discussion_r479402565", "bodyText": "This is to maintain naming consistency with the spring property (azure.keyvault.uri) added by azure-keyvault-secrets-spring-boot-starter dependency.\nPlus it allows us to easily identify the cloud platform and the cloud service that the property is being used for.", "author": "akshaysonvane", "createdAt": "2020-08-28T16:13:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTI5OTAxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQxMzg2MQ==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4496#discussion_r479413861", "bodyText": "The question is whether the \"container\" should be an object for property-naming purposes. If the property name on \"storage\" is \"container name\", then we should use \"containerName\" - we don't want to use a period as a substitute for a space. But if \"container\" is essentially a structured property of \"storage\" and \"name\" is just one property of \"container\", then \"container.name\" is correct. Same logic applies for \"bucket\".\nBasically - we want to use a period to indicate that something is conceptually an object, not as a substitute for a space.", "author": "rjrudin", "createdAt": "2020-08-28T16:33:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTI5OTAxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQ0ODE2OQ==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4496#discussion_r479448169", "bodyText": "Fair enough. I'll change this to azure.storage.containerName and make similar updates to other properties.", "author": "akshaysonvane", "createdAt": "2020-08-28T17:42:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTI5OTAxNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTMwMDA5MA==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4496#discussion_r479300090", "bodyText": "Just use \"bucketName\" and \"keyName\" unless we're certain that we'll have other properties on objects named \"bucket\" and \"key\".", "author": "rjrudin", "createdAt": "2020-08-28T13:40:05Z", "path": "marklogic-data-hub-central/src/main/java/com/marklogic/hub/central/keystore/AWSKeyStoreInit.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright 2012-2020 MarkLogic Corporation\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ */\n+package com.marklogic.hub.central.keystore;\n+\n+import com.amazonaws.services.s3.AmazonS3ClientBuilder;\n+import com.amazonaws.services.simplesystemsmanagement.AWSSimpleSystemsManagementClientBuilder;\n+import com.amazonaws.services.simplesystemsmanagement.model.GetParameterRequest;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.stereotype.Component;\n+\n+import java.io.InputStream;\n+\n+@Component\n+@Profile(\"aws\")\n+public class AWSKeyStoreInit extends AbstractKeyStoreInit {\n+\n+    @Value(\"${aws.s3.bucket.name}\")", "originalCommit": "1ab1cd940020685bb4174eabcfd80be07ceb0d22", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQwMzM5NQ==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4496#discussion_r479403395", "bodyText": "Used the same naming convention that we used for Azure i.e cloud-platform.cloud-service.property-name", "author": "akshaysonvane", "createdAt": "2020-08-28T16:14:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTMwMDA5MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTMwMzA4MA==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4496#discussion_r479303080", "bodyText": "Shouldn't this be e.g. \"azure.storage.keyStorePassword\"? It's the password that's specific to the keystore for Azure, right?", "author": "rjrudin", "createdAt": "2020-08-28T13:43:13Z", "path": "marklogic-data-hub-central/src/main/java/com/marklogic/hub/central/keystore/AzureKeyStoreInit.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2012-2020 MarkLogic Corporation\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ */\n+package com.marklogic.hub.central.keystore;\n+\n+import com.azure.identity.DefaultAzureCredentialBuilder;\n+import com.azure.storage.blob.BlobClient;\n+import com.azure.storage.blob.BlobClientBuilder;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.stereotype.Component;\n+\n+import java.io.InputStream;\n+\n+@Component\n+@Profile(\"azure\")\n+public class AzureKeyStoreInit extends AbstractKeyStoreInit {\n+\n+    @Value(\"${key-store-password}\")", "originalCommit": "1ab1cd940020685bb4174eabcfd80be07ceb0d22", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQwNjA3OQ==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4496#discussion_r479406079", "bodyText": "Azure KeyVault stores secrets as a key-value pair.\nHere the key is key-store-password and the value is the actual password.\nAzure does not allow . in key names so this is what I've used.\nAlso, the key name is kept consistent across both Azure and AWS services.\nFor AWS we'll fetch value for the key key-store-password from the AWS parameter store.", "author": "akshaysonvane", "createdAt": "2020-08-28T16:19:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTMwMzA4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQxMzA3NQ==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4496#discussion_r479413075", "bodyText": "Got it, makes sense.", "author": "rjrudin", "createdAt": "2020-08-28T16:31:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTMwMzA4MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTMwODE4Mw==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4496#discussion_r479308183", "bodyText": "I believe this and the Azure class should really be Configuration classes, as they need to configure the app when Spring is starting up. We're likely to have other AWS/Azure-specific beans, so I think this should be AWSConfiguration and the other class should be AzureConfiguration. And they should be in the com.marklogic.hub.central.cloud.(aws|azure) package.", "author": "rjrudin", "createdAt": "2020-08-28T13:48:33Z", "path": "marklogic-data-hub-central/src/main/java/com/marklogic/hub/central/keystore/AWSKeyStoreInit.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright 2012-2020 MarkLogic Corporation\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ */\n+package com.marklogic.hub.central.keystore;\n+\n+import com.amazonaws.services.s3.AmazonS3ClientBuilder;\n+import com.amazonaws.services.simplesystemsmanagement.AWSSimpleSystemsManagementClientBuilder;\n+import com.amazonaws.services.simplesystemsmanagement.model.GetParameterRequest;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.stereotype.Component;\n+\n+import java.io.InputStream;\n+\n+@Component", "originalCommit": "1ab1cd940020685bb4174eabcfd80be07ceb0d22", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTMwOTA0NQ==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4496#discussion_r479309045", "bodyText": "\"@bean\" is not inheritable, so I'm curious how these would work.\nI think the better approach is to declare both of these Bean methods on AWSConfiguration and AzureConfiguration, and then move this reusable logic into a CloudProviderUtil class in the com.marklogic.hub.central.cloud package (with the AWS class in cloud.aws and the Azure class in cloud.azure).\nGenerally, for reusing functionality, it's better to use composition instead of inheritance. Inheritance can be handy for reusing state - i.e. fields defined in a parent class.\nCloudProviderUtil would then have two methods - buildServerProperties(keyStorePassword) and configureSslStoreProvider(tomcatServletWebServerFactory, keyStorePassword, keyStoreFile).", "author": "rjrudin", "createdAt": "2020-08-28T13:49:33Z", "path": "marklogic-data-hub-central/src/main/java/com/marklogic/hub/central/keystore/AbstractKeyStoreInit.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright 2012-2020 MarkLogic Corporation\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ */\n+package com.marklogic.hub.central.keystore;\n+\n+import org.springframework.boot.autoconfigure.web.ServerProperties;\n+import org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory;\n+import org.springframework.boot.web.server.Ssl;\n+import org.springframework.boot.web.server.SslStoreProvider;\n+import org.springframework.boot.web.server.WebServerFactoryCustomizer;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Profile;\n+\n+import java.io.InputStream;\n+import java.security.KeyStore;\n+\n+@Profile({\"azure\", \"aws\"})\n+public abstract class AbstractKeyStoreInit implements KeyStoreInit {\n+\n+    public static String KEY_STORE_TYPE = \"PKCS12\";\n+\n+    @Bean\n+    public ServerProperties serverProperties() {\n+        final ServerProperties serverProperties = new ServerProperties();\n+        final Ssl ssl = new Ssl();\n+        final String keystorePassword = getKeyStorePassword();\n+        System.setProperty(\"server.ssl.key-store-password\", keystorePassword);\n+        ssl.setKeyPassword(keystorePassword);\n+        serverProperties.setSsl(ssl);\n+        return serverProperties;\n+    }\n+\n+    @Bean", "originalCommit": "1ab1cd940020685bb4174eabcfd80be07ceb0d22", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "ebf7c9c2c692ea8e99cd48a2f70c62b87163ace1", "url": "https://github.com/marklogic/marklogic-data-hub/commit/ebf7c9c2c692ea8e99cd48a2f70c62b87163ace1", "message": "DHFPROD-5682:5788: Retrieve and apply keystore from cloud services", "committedDate": "2020-08-28T22:41:01Z", "type": "forcePushed"}, {"oid": "3a61c93c8e6090d681452c80b54ac14d91e5e21d", "url": "https://github.com/marklogic/marklogic-data-hub/commit/3a61c93c8e6090d681452c80b54ac14d91e5e21d", "message": "DHFPROD-5682:5788: Retrieve and apply keystore from cloud services", "committedDate": "2020-08-28T22:54:27Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTYzODkwNw==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4496#discussion_r479638907", "bodyText": "I gave bad advice on this class package. It doesn't have anything to do with cloud providers, but it is web-specific and SSL-specific. So let's call this SslUtil and toss it com.marklogic.hub.central.web (and at some point, we probably ought to move our controllers there, but that's a separate matter).", "author": "rjrudin", "createdAt": "2020-08-29T11:15:18Z", "path": "marklogic-data-hub-central/src/main/java/com/marklogic/hub/central/cloud/CloudProviderUtil.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Copyright 2012-2020 MarkLogic Corporation\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ */\n+package com.marklogic.hub.central.cloud;", "originalCommit": "3a61c93c8e6090d681452c80b54ac14d91e5e21d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTYzOTQ1OQ==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4496#discussion_r479639459", "bodyText": "Let's add logging to both of these private methods. Nothing special - just at the start of each method, log \"Retrieving keystore password\", and then at the end, \"Retrieved keystore password\". And call this method \"retrieveKeyStorePassword\" to make it clear that this is not a getter (I like for \"get\" to imply that it's only returning the value of a local variable).\nSame for the file - \"Retrieving keystore file\" and then \"Retrieved keystore file\".\nThe two benefits are - easy confirmation that the system is using the correct profile, and we can also see how long the calls are taking too.", "author": "rjrudin", "createdAt": "2020-08-29T11:19:09Z", "path": "marklogic-data-hub-central/src/main/java/com/marklogic/hub/central/cloud/aws/AWSConfiguration.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright 2012-2020 MarkLogic Corporation\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ */\n+package com.marklogic.hub.central.cloud.aws;\n+\n+import com.amazonaws.services.s3.AmazonS3ClientBuilder;\n+import com.amazonaws.services.simplesystemsmanagement.AWSSimpleSystemsManagementClientBuilder;\n+import com.amazonaws.services.simplesystemsmanagement.model.GetParameterRequest;\n+import com.marklogic.hub.central.cloud.CloudProviderUtil;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.boot.autoconfigure.web.ServerProperties;\n+import org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory;\n+import org.springframework.boot.web.server.WebServerFactoryCustomizer;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.Profile;\n+\n+import java.io.InputStream;\n+\n+@Configuration\n+@Profile(\"aws\")\n+public class AWSConfiguration {\n+\n+    @Value(\"${aws.s3.bucketName}\")\n+    private String bucketName;\n+\n+    @Value(\"${aws.s3.keyName}\")\n+    private String keyName;\n+\n+    @Bean\n+    public ServerProperties serverProperties() {\n+        return CloudProviderUtil.buildServerProperties(getKeyStorePassword());\n+    }\n+\n+    @Bean\n+    public WebServerFactoryCustomizer<TomcatServletWebServerFactory> tomcatSslStoreCustomizer() {\n+        return CloudProviderUtil.configureSslStoreProvider(getKeyStorePassword(), getKeyStoreFile());\n+    }\n+\n+    private String getKeyStorePassword() {", "originalCommit": "3a61c93c8e6090d681452c80b54ac14d91e5e21d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "1d15885654e4064350bb7748b0e54db738e66676", "url": "https://github.com/marklogic/marklogic-data-hub/commit/1d15885654e4064350bb7748b0e54db738e66676", "message": "DHFPROD-5682:5788: Retrieve and apply keystore from cloud services", "committedDate": "2020-08-31T16:19:18Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDMyMjI2MQ==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4496#discussion_r480322261", "bodyText": "For consistency, just extend LoggingObject, which defines this for you.", "author": "rjrudin", "createdAt": "2020-08-31T18:51:12Z", "path": "marklogic-data-hub-central/src/main/java/com/marklogic/hub/central/cloud/aws/AWSConfiguration.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright 2012-2020 MarkLogic Corporation\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ */\n+package com.marklogic.hub.central.cloud.aws;\n+\n+import com.amazonaws.services.s3.AmazonS3ClientBuilder;\n+import com.amazonaws.services.simplesystemsmanagement.AWSSimpleSystemsManagementClientBuilder;\n+import com.amazonaws.services.simplesystemsmanagement.model.GetParameterRequest;\n+import com.marklogic.hub.central.web.SslUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.boot.autoconfigure.web.ServerProperties;\n+import org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory;\n+import org.springframework.boot.web.server.WebServerFactoryCustomizer;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.Profile;\n+\n+import java.io.InputStream;\n+\n+@Configuration\n+@Profile(\"aws\")\n+public class AWSConfiguration {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(AWSConfiguration.class);", "originalCommit": "1d15885654e4064350bb7748b0e54db738e66676", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDMzNTkwMA==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4496#discussion_r480335900", "bodyText": "I was going to extend LoggingObject but didn't since we are basically resuing functionality and so did not prefer to inherit.", "author": "akshaysonvane", "createdAt": "2020-08-31T19:14:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDMyMjI2MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDM2OTM2Ng==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4496#discussion_r480369366", "bodyText": "Okay - can you use the variable name \"logger\" then? Just wanted to avoid future questions of \"Why is it logger in some places but LOGGER here?\"", "author": "rjrudin", "createdAt": "2020-08-31T20:05:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDMyMjI2MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDMyMjUzMA==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4496#discussion_r480322530", "bodyText": "Same, just extend LoggingObject.", "author": "rjrudin", "createdAt": "2020-08-31T18:51:43Z", "path": "marklogic-data-hub-central/src/main/java/com/marklogic/hub/central/cloud/azure/AzureConfiguration.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Copyright 2012-2020 MarkLogic Corporation\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ */\n+package com.marklogic.hub.central.cloud.azure;\n+\n+import com.azure.identity.DefaultAzureCredentialBuilder;\n+import com.azure.storage.blob.BlobClientBuilder;\n+import com.marklogic.hub.central.web.SslUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.boot.autoconfigure.web.ServerProperties;\n+import org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory;\n+import org.springframework.boot.web.server.WebServerFactoryCustomizer;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.Profile;\n+\n+import java.io.InputStream;\n+\n+@Configuration\n+@Profile(\"azure\")\n+public class AzureConfiguration {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(AzureConfiguration.class);", "originalCommit": "1d15885654e4064350bb7748b0e54db738e66676", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "08ba5f9f0fe5b4dc95460fe79e5e23b48297e530", "url": "https://github.com/marklogic/marklogic-data-hub/commit/08ba5f9f0fe5b4dc95460fe79e5e23b48297e530", "message": "DHFPROD-5682:5788: Retrieve and apply keystore from cloud services", "committedDate": "2020-08-31T23:51:17Z", "type": "commit"}, {"oid": "08ba5f9f0fe5b4dc95460fe79e5e23b48297e530", "url": "https://github.com/marklogic/marklogic-data-hub/commit/08ba5f9f0fe5b4dc95460fe79e5e23b48297e530", "message": "DHFPROD-5682:5788: Retrieve and apply keystore from cloud services", "committedDate": "2020-08-31T23:51:17Z", "type": "forcePushed"}]}