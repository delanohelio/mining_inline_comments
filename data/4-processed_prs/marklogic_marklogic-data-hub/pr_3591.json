{"pr_number": 3591, "pr_title": "DHFPROD-4308: Middle-Tier: Create extension to existing mapping artif\u2026", "pr_createdAt": "2020-02-19T18:32:11Z", "pr_url": "https://github.com/marklogic/marklogic-data-hub/pull/3591", "timeline": [{"oid": "444132446c8b57c288c4bcd0dbf51995d5df20e5", "url": "https://github.com/marklogic/marklogic-data-hub/commit/444132446c8b57c288c4bcd0dbf51995d5df20e5", "message": "DHFPROD-4308: Middle-Tier: Create extension to existing mapping artifact API", "committedDate": "2020-02-19T18:30:19Z", "type": "commit"}, {"oid": "35af2da18b5b64fabe60abf9cfda9f32755627c7", "url": "https://github.com/marklogic/marklogic-data-hub/commit/35af2da18b5b64fabe60abf9cfda9f32755627c7", "message": "DHFPROD-4308: moved the collection api endpoint to one-ui", "committedDate": "2020-02-19T19:42:28Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTUzOTc0OQ==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3591#discussion_r381539749", "bodyText": "You don't need this loop here, just do:\nreturn cts.search(...).toArray();", "author": "rjrudin", "createdAt": "2020-02-19T20:57:23Z", "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/artifacts/core.sjs", "diffHunk": "@@ -56,11 +58,42 @@ function getArtifacts(artifactType) {\n         queriesForAnd.push(cts.collectionQuery(coll));\n     }\n     if (queriesForAnd.length) {\n-        const results = cts.search(queriesForAnd.length > 1 ? cts.andQuery(queriesForAnd) : queriesForAnd[0]);\n-        for (const result of results) {\n-            artifacts.push(result.toObject());\n+        if (artifactType == \"loadData\") {\n+            const results = cts.search(queriesForAnd.length > 1 ? cts.andQuery(queriesForAnd) : queriesForAnd[0]);\n+            for (const result of results) {", "originalCommit": "35af2da18b5b64fabe60abf9cfda9f32755627c7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU0MTgwMg==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3591#discussion_r381541802", "bodyText": "This is doing N queries, where N = entityNames.length. It's faster/better to do a single query - just pass entityNames into the cts.jsonPropertyValueQuery. Then iterate over the results with a map function. Can get it all done this simply (I often refer to https://www.w3schools.com/jsref/jsref_obj_array.asp for things like this):\nfunction getArtifactsGroupByEntity(artifactType, queriesForAnd) {\n  cts.search(cts.andQuery(queriesForAnd.concat(cts.jsonPropertyValueQuery(\"entityName\", getEntityNames())).map(config => {\n    const configByEntity = {\n      name: config.path.to.entityName (I don't know the path)\n    };\n    switch(artifactType) {\n    ....\n    }\n    return configByEntity;\n  });\n}\n\nNote the use of \"concat\" to avoid modifying the queriesForAnd array that's passed in.", "author": "rjrudin", "createdAt": "2020-02-19T21:01:22Z", "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/artifacts/core.sjs", "diffHunk": "@@ -56,11 +58,42 @@ function getArtifacts(artifactType) {\n         queriesForAnd.push(cts.collectionQuery(coll));\n     }\n     if (queriesForAnd.length) {\n-        const results = cts.search(queriesForAnd.length > 1 ? cts.andQuery(queriesForAnd) : queriesForAnd[0]);\n-        for (const result of results) {\n-            artifacts.push(result.toObject());\n+        if (artifactType == \"loadData\") {\n+            const results = cts.search(queriesForAnd.length > 1 ? cts.andQuery(queriesForAnd) : queriesForAnd[0]);\n+            for (const result of results) {\n+                artifacts.push(result.toObject());\n+            }\n+            return artifacts;\n+        } else {\n+            return getArtifactsGroupbyEntity(artifactType, queriesForAnd)\n         }\n     }\n+    return [];\n+}\n+\n+function getArtifactsGroupbyEntity(artifactType, queriesForAnd) {\n+    const artifacts = [];\n+    const entityNames = getEntityNames();\n+    for (const ename of entityNames) {", "originalCommit": "35af2da18b5b64fabe60abf9cfda9f32755627c7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTY2NjYzNg==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3591#discussion_r381666636", "bodyText": "@rjrudin Thanks for the link. We could not use map you mentioned for group by. I pinged @ryanjdew and think we can use reduce. However, it works only for some hard-coded json arrayobject. I must miss something about javascript...\n`let entities = cts.search(cts.collectionQuery(\"http://marklogic.com/entity-services/models\"))\nconst entityNames = entities.toArray().map(e => e.xpath(\"//info//title\"));\nconst res = cts.search(cts.andQuery(queriesForAnd.concat(cts.jsonPropertyValueQuery(\"targetEntity\", entityNames)))).toArray();\nlet res2 = res\n.reduce((acc, mapping) => {\nacc[mapping.entityName] = acc[mapping.entityName] || {};\nacc[mapping.entityName].config = (acc[mapping.entityName].config || []);\nacc[mapping.entityName].config.push(mapping);\nreturn acc;\n}, {});`\nI tried to use the above code in qconsole, and did not work. It gave me \"undefined\" entity name!", "author": "hao1st", "createdAt": "2020-02-20T02:03:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU0MTgwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTc4OTg4MQ==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3591#discussion_r381789881", "bodyText": "Fixed.", "author": "hao1st", "createdAt": "2020-02-20T06:10:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU0MTgwMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU0Mjk1Ng==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3591#discussion_r381542956", "bodyText": "Ideally, this service wouldn't have much knowledge of the concrete artifact types. Is it necessary to store the \"configs\" under different key names? Couldn't it just be \"config\" or \"settings\", regardless of the artifact type?", "author": "rjrudin", "createdAt": "2020-02-19T21:03:47Z", "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/artifacts/core.sjs", "diffHunk": "@@ -56,11 +58,42 @@ function getArtifacts(artifactType) {\n         queriesForAnd.push(cts.collectionQuery(coll));\n     }\n     if (queriesForAnd.length) {\n-        const results = cts.search(queriesForAnd.length > 1 ? cts.andQuery(queriesForAnd) : queriesForAnd[0]);\n-        for (const result of results) {\n-            artifacts.push(result.toObject());\n+        if (artifactType == \"loadData\") {\n+            const results = cts.search(queriesForAnd.length > 1 ? cts.andQuery(queriesForAnd) : queriesForAnd[0]);\n+            for (const result of results) {\n+                artifacts.push(result.toObject());\n+            }\n+            return artifacts;\n+        } else {\n+            return getArtifactsGroupbyEntity(artifactType, queriesForAnd)\n         }\n     }\n+    return [];\n+}\n+\n+function getArtifactsGroupbyEntity(artifactType, queriesForAnd) {\n+    const artifacts = [];\n+    const entityNames = getEntityNames();\n+    for (const ename of entityNames) {\n+        let configByEntity = {};\n+        configByEntity.name = ename;\n+        queriesForAnd.push(cts.jsonPropertyValueQuery(\"entityName\", ename));\n+        let configs = cts.search(cts.andQuery(queriesForAnd));\n+        // artifactType can be mapping, mastering, merging\n+        switch (artifactType) {\n+            case \"mapping\":", "originalCommit": "35af2da18b5b64fabe60abf9cfda9f32755627c7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTYxNjAyMw==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3591#discussion_r381616023", "bodyText": "agree. we can use config. @ryanjdew do you agree?", "author": "hao1st", "createdAt": "2020-02-19T23:56:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU0Mjk1Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU0NTIxMQ==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3591#discussion_r381545211", "bodyText": "You can use \"map\" here to cut out a good chunk of code:\ncts.search(...).toArray().map(e => e.xpath(\"//info//title\");", "author": "rjrudin", "createdAt": "2020-02-19T21:08:30Z", "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/artifacts/core.sjs", "diffHunk": "@@ -225,6 +258,16 @@ function deleteArtifactSettings(artifactType, artifactName, artifactVersion = 'l\n     return { success: true };\n }\n \n+function getEntityNames() {\n+    let entities = cts.search(cts.collectionQuery(\"http://marklogic.com/entity-services/models\"))", "originalCommit": "35af2da18b5b64fabe60abf9cfda9f32755627c7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU0NTQ1NQ==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3591#discussion_r381545455", "bodyText": "This seems like it can be deleted?", "author": "rjrudin", "createdAt": "2020-02-19T21:08:57Z", "path": "one-ui/src/main/java/com/marklogic/hub/curation/controllers/CollectionsController.java", "diffHunk": "@@ -0,0 +1,4 @@\n+package com.marklogic.hub.curation.controllers;\n+\n+public class CollectionsController {", "originalCommit": "35af2da18b5b64fabe60abf9cfda9f32755627c7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU3MDI0Mg==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3591#discussion_r381570242", "bodyText": "my bad, something wrong during commit and push.", "author": "hao1st", "createdAt": "2020-02-19T21:59:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU0NTQ1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTk5MDg5Nw==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3591#discussion_r381990897", "bodyText": "This is still in the PR, it should be removed, right?", "author": "rjrudin", "createdAt": "2020-02-20T13:16:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU0NTQ1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjU0NzM1MA==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3591#discussion_r382547350", "bodyText": "Let's put this in a separate PR for a separate sub-task under 3991. It needs a test for it, and we should instead use a new DS endpoint instead of continuing use of REST endpoints (and the mlCollections REST extension is doing too many things too, it's not just used for retrieving collections).", "author": "rjrudin", "createdAt": "2020-02-21T12:06:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU0NTQ1NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU0NjUyOA==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3591#discussion_r381546528", "bodyText": "This doesn't appear to be used anywhere, so it should be deleted.\nIf there is a need for it, I'd like to talk about it. There is nothing preventing a database from having millions of collections or more. And collections are implementation details - it's very rare that we ever want to expose them to users. So I'd want to think carefully about the requirement of \"Get me all the collections except 'internal' ones\".", "author": "rjrudin", "createdAt": "2020-02-19T21:11:10Z", "path": "one-ui/src/main/java/com/marklogic/hub/curation/services/CollectionsService.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright 2012-2019 MarkLogic Corporation\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ */\n+package com.marklogic.hub.web.service;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.marklogic.client.DatabaseClient;\n+import com.marklogic.client.extensions.ResourceManager;\n+import com.marklogic.client.extensions.ResourceServices;\n+import com.marklogic.client.io.JacksonHandle;\n+import com.marklogic.client.util.RequestParameters;\n+import com.marklogic.hub.HubConfig;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+@Service\n+public class CollectionsService {", "originalCommit": "35af2da18b5b64fabe60abf9cfda9f32755627c7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "6326a9db7939d1a13605d5827a16ffa51d3d9273", "url": "https://github.com/marklogic/marklogic-data-hub/commit/6326a9db7939d1a13605d5827a16ffa51d3d9273", "message": "DHFPROD-4308: Fixed wrong commit/push", "committedDate": "2020-02-19T21:59:02Z", "type": "commit"}, {"oid": "93f88c8007e0dd01242e91c38a11ea4295216dd3", "url": "https://github.com/marklogic/marklogic-data-hub/commit/93f88c8007e0dd01242e91c38a11ea4295216dd3", "message": "DHFPROD-4308: changed entityName to targetEntity & simplify javascript query func", "committedDate": "2020-02-20T03:37:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTc1NTY1MQ==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3591#discussion_r381755651", "bodyText": "@hao1st can we please add a test for validateArtifact?", "author": "bsrikan", "createdAt": "2020-02-20T05:01:03Z", "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/artifacts/mapping.sjs", "diffHunk": "@@ -0,0 +1,78 @@\n+/**\n+ Copyright 2012-2019 MarkLogic Corporation\n+\n+ Licensed under the Apache License, Version 2.0 (the \"License\");\n+ you may not use this file except in compliance with the License.\n+ You may obtain a copy of the License at\n+\n+ http://www.apache.org/licenses/LICENSE-2.0\n+\n+ Unless required by applicable law or agreed to in writing, software\n+ distributed under the License is distributed on an \"AS IS\" BASIS,\n+ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ See the License for the specific language governing permissions and\n+ limitations under the License.\n+ */\n+'use strict';\n+\n+const DataHubSingleton = require('/data-hub/5/datahub-singleton.sjs');\n+\n+// define constants for caching expensive operations\n+const dataHub = DataHubSingleton.instance();\n+\n+const collections = ['http://marklogic.com/data-hub/mapping-artifact'];\n+const databases = [dataHub.config.STAGINGDATABASE, dataHub.config.FINALDATABASE];\n+const permissions = [xdmp.permission(dataHub.consts.DATA_HUB_MAPPING_WRITE_ROLE, 'update'), xdmp.permission(dataHub.consts.DATA_HUB_MAPPING_READ_ROLE, 'read')];\n+const requiredProperties = ['name', 'targetEntity', 'selectedSource'];\n+\n+function getNameProperty() {\n+    return 'name';\n+}\n+\n+function getEntityNameProperty() {\n+    return 'targetEntity';\n+}\n+\n+function getSelectedSourceProperty() {\n+    return 'selectedSource';\n+}\n+\n+function getVersionProperty() {\n+    return null;\n+}\n+\n+function getCollections() {\n+    return collections;\n+}\n+\n+function getStorageDatabases() {\n+    return databases;\n+}\n+\n+function getPermissions() {\n+    return permissions;\n+}\n+\n+function getArtifactNode(artifactName, artifactVersion) {\n+    // Currently there is no versioning for loadData artifacts\n+    const results = cts.search(cts.andQuery([cts.collectionQuery(collections[0]), cts.jsonPropertyValueQuery('name', artifactName)]));\n+    return fn.head(results);\n+}\n+\n+function validateArtifact(artifact) {\n+    const missingProperties = requiredProperties.filter((propName) => !artifact[propName]);\n+    if (missingProperties.length) {\n+        return new Error(`Missing the following required properties: ${JSON.stringify(missingProperties)}`);\n+    }\n+    return artifact;\n+}\n+\n+module.exports = {", "originalCommit": "93f88c8007e0dd01242e91c38a11ea4295216dd3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTc5ODMyMw==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3591#discussion_r381798323", "bodyText": "i will talk to @ryanjdew tomorrow, and we can simplify the validateArtifact implemented in core.sjs. Actually we do not need to have this one in the artifact module.", "author": "hao1st", "createdAt": "2020-02-20T06:26:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTc1NTY1MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjA5NDgxMg==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3591#discussion_r382094812", "bodyText": "@ryanjdew In the core.sjs,\nfunction validateArtifact(artifactType, artifactName, artifact) {\n    const artifactLibrary =  getArtifactTypeLibrary(artifactType);\n    const validatedArtifact = artifactLibrary.validateArtifact(artifact, artifactName);\n    if (validatedArtifact instanceof Error) {\n        returnErrToClient(400, 'BAD REQUEST', validatedArtifact.message);\n    }\n    return validatedArtifact;\n}\n\nI think we can move the function used in loadData.sjs to core.sjs\nfunction validateArtifact(artifact) {\n    const missingProperties = requiredProperties.filter((propName) => !artifact[propName]);\n    if (missingProperties.length) {\n        return new Error(`Missing the following required properties: ${JSON.stringify(missingProperties)}`);\n    }\n    return artifact;\n}\n\nDifferent artifacts just need to expose \"requiredProperties\" so that we do not need to override/duplicate validateArtifact with the same implmentation.", "author": "hao1st", "createdAt": "2020-02-20T16:00:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTc1NTY1MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjE2MTMwOQ==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3591#discussion_r382161309", "bodyText": "@hao1st  We'll want to extend the validation to be able to encompass more than the required properties.\ne.g., for mapping, we'll want to enable the validation to eventually do the validation XPath expressions, etc. We already have the libraries for that from what we used in QS. We'll want to eventually call those from the mapping artifact library.", "author": "ryanjdew", "createdAt": "2020-02-20T17:53:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTc1NTY1MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjE4MDg3Nw==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3591#discussion_r382180877", "bodyText": "@bsrikan OK, I added the validation test case for mapping test.", "author": "hao1st", "createdAt": "2020-02-20T18:31:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTc1NTY1MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTc1NjMyNQ==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3591#discussion_r381756325", "bodyText": "Does this go with the discussion we had today. Should this be @service or @component.", "author": "bsrikan", "createdAt": "2020-02-20T05:02:26Z", "path": "one-ui/src/main/java/com/marklogic/hub/curation/services/CollectionsManager.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Copyright 2012-2019 MarkLogic Corporation\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ */\n+package com.marklogic.hub.curation.services;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.marklogic.client.DatabaseClient;\n+import com.marklogic.client.extensions.ResourceManager;\n+import com.marklogic.client.extensions.ResourceServices;\n+import com.marklogic.client.io.JacksonHandle;\n+import com.marklogic.client.util.RequestParameters;\n+import com.marklogic.hub.oneui.models.HubConfigSession;\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class CollectionsManager {", "originalCommit": "93f88c8007e0dd01242e91c38a11ea4295216dd3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTk5MTE5MQ==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3591#discussion_r381991191", "bodyText": "I don't think this class is supposed to be in here, right? It's only used by CollectionsCOntroller, which isn't used - nor seems relevant to DHFPROD-4308.", "author": "rjrudin", "createdAt": "2020-02-20T13:17:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTc1NjMyNQ=="}], "type": "inlineReview"}, {"oid": "91c8cc4f9ff194cf371ef657160fc4e217b64a84", "url": "https://github.com/marklogic/marklogic-data-hub/commit/91c8cc4f9ff194cf371ef657160fc4e217b64a84", "message": "DHFPROD-4308: Optimize query to get configs grouped by entity", "committedDate": "2020-02-20T06:09:14Z", "type": "commit"}, {"oid": "fc5368ed4abad2fd4f6f8f907be46e49b26c9a81", "url": "https://github.com/marklogic/marklogic-data-hub/commit/fc5368ed4abad2fd4f6f8f907be46e49b26c9a81", "message": "DHFPROD-4308: changed annotation from service to component", "committedDate": "2020-02-20T06:30:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTk4ODgxNw==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3591#discussion_r381988817", "bodyText": "For consistency, shouldn't this be \"mappings\" and \"Mappings\"?", "author": "rjrudin", "createdAt": "2020-02-20T13:12:34Z", "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/artifacts/core.sjs", "diffHunk": "@@ -26,7 +27,8 @@ const cachedArtifacts = {};\n const registeredArtifactTypes = {\n     loadData: LoadData,\n     flows: Flows,\n-    stepDefinitions: StepDefs\n+    stepDefinitions: StepDefs,\n+    mapping: Mapping", "originalCommit": "fc5368ed4abad2fd4f6f8f907be46e49b26c9a81", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjA4NDQxNw==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3591#discussion_r382084417", "bodyText": "@rjrudin @ryanjdew We used to have a folder like \"mappings/{mappingstepname}\" to be used to store [entity model <=> doc instance] mapping configuration with a filename like {mappingstepname}.{version}.mapping.json .\ncurrently if i use \"mapping\" as artifact type, a new \"mapping\" folder willl be created to store the mapping artifacts with filename  like {mappingName}.mapping.json. If we use \"mapings\", it will cause name conflict. I am not sure it is a good name or a better folder stucture we should define for \"mapping\" operations.", "author": "hao1st", "createdAt": "2020-02-20T15:44:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTk4ODgxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjA5ODA0Nw==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3591#discussion_r382098047", "bodyText": "I'm confused - the directory for mappings in DHF today is \"mappings\" (and \"flows\" for flows and \"step-definitions\" for step definitions). Aren't these mapping artifacts still going into the \"mappings\" directory?", "author": "rjrudin", "createdAt": "2020-02-20T16:05:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTk4ODgxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjEwMTgwNg==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3591#discussion_r382101806", "bodyText": "Yes, It can.  we have {mappingName} as subfolder. i will modify it to mappings", "author": "hao1st", "createdAt": "2020-02-20T16:11:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTk4ODgxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjEzNDAxNw==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3591#discussion_r382134017", "bodyText": "The dir structure today for mappings is mappings/<flowName-stepName>/<flowName-stepName-version>.mapping.json\nversion starts with 0 when a mapping step is created and bumped to 1 when mapping is configured after ingestion. Version remains at 1 with further changes to mapping.", "author": "bsrikan", "createdAt": "2020-02-20T17:03:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTk4ODgxNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTk5MDAyMw==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3591#discussion_r381990023", "bodyText": "Is this returning artifacts, or configs, or settings? Are \"configs\" the same as \"settings\"? I don't think this is returning artifacts, which are the actual flows/stepDefinitions/mappings/etc. The variables indicate that these are \"configs\", so I'm wondering if those are the same as \"settings\".", "author": "rjrudin", "createdAt": "2020-02-20T13:15:05Z", "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/artifacts/core.sjs", "diffHunk": "@@ -49,19 +51,31 @@ function getTypesInfo() {\n }\n \n function getArtifacts(artifactType) {\n-    const artifacts = [];\n     const queriesForAnd = [];\n     const artifactLibrary =  getArtifactTypeLibrary(artifactType);\n     for (const coll of artifactLibrary.getCollections()) {\n         queriesForAnd.push(cts.collectionQuery(coll));\n     }\n     if (queriesForAnd.length) {\n-        const results = cts.search(queriesForAnd.length > 1 ? cts.andQuery(queriesForAnd) : queriesForAnd[0]);\n-        for (const result of results) {\n-            artifacts.push(result.toObject());\n+        if (artifactType == \"loadData\") {\n+            return cts.search(queriesForAnd.length > 1 ? cts.andQuery(queriesForAnd) : queriesForAnd[0]).toArray();\n+        } else {\n+            return getArtifactsGroupByEntity(queriesForAnd)\n         }\n     }\n-    return artifacts;\n+    return [];\n+}\n+\n+function getArtifactsGroupByEntity(queriesForAnd) {", "originalCommit": "fc5368ed4abad2fd4f6f8f907be46e49b26c9a81", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjA2MzQyMQ==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3591#discussion_r382063421", "bodyText": "[\n  {\n    \"name\": \"Customer\",\n    \"config\": [\n      {\n        \"name\": \"haoMapping-xml\",\n        \"targetEntity\": \"Customer\",\n        \"description\": \"haoMapping-xml does ...\",\n        \"selectedSource\": \"query\",\n        \"sourceQuery\": \"cts.CollectionQuery(\\\"RAW-JSON-CUSTOMER\\\")\",\n        \"collections\": [],\n        \"lastUpdated\": \"2020-02-18T14:52:59.183486-08:00\"\n      }\n    ]\n  },\n  {\n    \"name\": \"Order\",\n    \"config\": [\n      {\n        \"name\": \"haoMapping-json\",\n        \"targetEntity\": \"Order\",\n        \"description\": \"haoMapping-json does ...\",\n        \"selectedSource\": \"collection\",\n        \"sourceQuery\": \"\",\n        \"collections\": [\n          \"RAW-XML-ORDER\"\n        ],\n        \"lastUpdated\": \"2020-02-18T14:52:48.899365-08:00\"\n      },\n      {\n        \"name\": \"haoMapping-json2\",\n        \"targetEntity\": \"Order\",\n        \"description\": \"haoMapping-json2 does ...\",\n        \"selectedSource\": \"collection\",\n        \"sourceQuery\": \"\",\n        \"collections\": [\n          \"RAW-XML-ORDER2\"\n        ],\n        \"lastUpdated\": \"2020-02-18T15:28:11.503124-08:00\"\n      }\n    ]\n  }\n]", "author": "hao1st", "createdAt": "2020-02-20T15:14:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTk5MDAyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjA4NzQ0OA==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3591#discussion_r382087448", "bodyText": "I guess we had better use \"configs\" rather than \"config\" in the json above.", "author": "hao1st", "createdAt": "2020-02-20T15:49:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTk5MDAyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjEwMDcwNw==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3591#discussion_r382100707", "bodyText": "So the use case is \"Get me all the artifacts for each known entity type\", right?\nIf so, shouldn't \"configs\" be replaced with \"artifacts\"? You're then returning an array of objects, where each object has an entity type (I recommend replacing \"name\" with \"entityType\") and an array of artifacts that reference the entity type.", "author": "rjrudin", "createdAt": "2020-02-20T16:09:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTk5MDAyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjEwMzA0OQ==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3591#discussion_r382103049", "bodyText": "OK, it is fine.", "author": "hao1st", "createdAt": "2020-02-20T16:13:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTk5MDAyMw=="}], "type": "inlineReview"}, {"oid": "a8096d7050cece99405ee0892eed71dcbd23ebf7", "url": "https://github.com/marklogic/marklogic-data-hub/commit/a8096d7050cece99405ee0892eed71dcbd23ebf7", "message": "DHFPROD-4308: rename mapping and artifact", "committedDate": "2020-02-20T17:31:28Z", "type": "commit"}, {"oid": "1862b59a03cf8013bee16acb9bcb8c1b5ad5d870", "url": "https://github.com/marklogic/marklogic-data-hub/commit/1862b59a03cf8013bee16acb9bcb8c1b5ad5d870", "message": "DHFPROD-4308: add validateArtifact test cases", "committedDate": "2020-02-20T18:30:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjIwNDkyMQ==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3591#discussion_r382204921", "bodyText": "One nit - I would just call this \"queries\" (the plural implying that it's an array). And then it doesn't matter if there's one or more - you can just do:\ncts.search(cts.andQuery(queries)).toArray()", "author": "rjrudin", "createdAt": "2020-02-20T19:17:57Z", "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/artifacts/core.sjs", "diffHunk": "@@ -49,19 +51,31 @@ function getTypesInfo() {\n }\n \n function getArtifacts(artifactType) {\n-    const artifacts = [];\n     const queriesForAnd = [];\n     const artifactLibrary =  getArtifactTypeLibrary(artifactType);\n     for (const coll of artifactLibrary.getCollections()) {\n         queriesForAnd.push(cts.collectionQuery(coll));\n     }\n     if (queriesForAnd.length) {\n-        const results = cts.search(queriesForAnd.length > 1 ? cts.andQuery(queriesForAnd) : queriesForAnd[0]);\n-        for (const result of results) {\n-            artifacts.push(result.toObject());\n+        if (artifactType == \"loadData\") {\n+            return cts.search(queriesForAnd.length > 1 ? cts.andQuery(queriesForAnd) : queriesForAnd[0]).toArray();", "originalCommit": "1862b59a03cf8013bee16acb9bcb8c1b5ad5d870", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjIxNjkyMw==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3591#discussion_r382216923", "bodyText": "@rjrudin Why do you think CollectionsController/Manager should be removed? I noticed that we could not reuse CollectionsService in com.marklogic.hub.web.service package and also depends on HubConfig.", "author": "hao1st", "createdAt": "2020-02-20T19:40:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjIwNDkyMQ=="}], "type": "inlineReview"}, {"oid": "b1694b237c4ba1ab2d7c7bf477cf29ab77699772", "url": "https://github.com/marklogic/marklogic-data-hub/commit/b1694b237c4ba1ab2d7c7bf477cf29ab77699772", "message": "DHFPROD-4308: rename a better variable and query simplification", "committedDate": "2020-02-20T19:48:59Z", "type": "commit"}]}