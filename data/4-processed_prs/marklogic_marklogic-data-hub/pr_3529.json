{"pr_number": 3529, "pr_title": "DHFPROD-4105: Add API for linking/removing artifacts from steps", "pr_createdAt": "2020-01-30T18:21:12Z", "pr_url": "https://github.com/marklogic/marklogic-data-hub/pull/3529", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIwNDYwMQ==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3529#discussion_r373204601", "bodyText": "I think it's easier just to rethrow this or declare throws Exception on the method.", "author": "rjrudin", "createdAt": "2020-01-30T21:32:19Z", "path": "one-ui/src/test/java/com/marklogic/hub/curation/controllers/FlowControllerTest.java", "diffHunk": "@@ -135,6 +160,9 @@ void getFlow() throws JsonProcessingException {\n             catch (Exception e){\n                 logger.info(\"Exception is expected as the step being fetched has been deleted\");\n             }\n+        } catch (Exception e) {\n+            e.printStackTrace();", "originalCommit": "03bca674dabaf585e28e4d78f45d237fe8d01d15", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzY4NDAwMA==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3529#discussion_r373684000", "bodyText": "Removed the catch, so the exception will be thrown.", "author": "ryanjdew", "createdAt": "2020-01-31T21:02:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIwNDYwMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIwNjExMQ==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3529#discussion_r373206111", "bodyText": "This seems a little awkward for a URL. I can see flowName/steps/stepId/link, as the link of a step is an actual thing that's referenceable. But I think the artifact properties should go into the RequestBody, which can be declared as a JsonNode - or by using ArtifactTypeInfo possibly?", "author": "rjrudin", "createdAt": "2020-01-30T21:36:00Z", "path": "one-ui/src/main/java/com/marklogic/hub/curation/controllers/FlowController.java", "diffHunk": "@@ -102,4 +108,38 @@\n         return new ResponseEntity<>(HttpStatus.OK);\n     }\n \n+    @RequestMapping(value = \"/{flowName}/steps/{stepId}/link/{artifactType}/{artifactName}\", method = RequestMethod.POST)\n+    @ResponseBody\n+    public ResponseEntity<?> linkArtifact(@PathVariable String flowName, @PathVariable String stepId, @PathVariable String artifactType, @PathVariable String artifactName) {\n+        return linkArtifact(flowName, stepId, artifactType, artifactName, null);\n+    }\n+\n+    @RequestMapping(value = \"/{flowName}/steps/{stepId}/link/{artifactType}/{artifactName}/{artifactVersion}\", method = RequestMethod.POST)", "originalCommit": "03bca674dabaf585e28e4d78f45d237fe8d01d15", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQ4NDA1NQ==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3529#discussion_r373484055", "bodyText": "Looking at this again, I think if there's already a pattern to toss all the inputs into the URL, then this is fine. But I feel it'd be cleaner if there was an \"ArtifactLink\" class with type/name/version properties and a RequestBody annotation on it.", "author": "rjrudin", "createdAt": "2020-01-31T13:42:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIwNjExMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzY4NDk4Ng==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3529#discussion_r373684986", "bodyText": "I'm leaving the API as is. The reasoning behind that is that the DELETE method won't allow for a body describing the link to be removed and it seems odd to me to have different URL patterns for linking and unlinking", "author": "ryanjdew", "createdAt": "2020-01-31T21:05:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIwNjExMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzY4ODkzMQ==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3529#discussion_r373688931", "bodyText": "That's a good point, sounds good.", "author": "rjrudin", "createdAt": "2020-01-31T21:16:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIwNjExMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIyNTkzNA==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3529#discussion_r373225934", "bodyText": "I may have missed it, but this seems like an ideal candidate for some nice unit tests to verify that it's doing its thing correctly, as opposed to trying to verify this in the context of a complex integration test.", "author": "rjrudin", "createdAt": "2020-01-30T22:22:20Z", "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/impl/hub-utils.sjs", "diffHunk": "@@ -192,6 +209,22 @@ class HubUtils {\n     return permissions;\n   }\n \n+  // this function can be used to create xquery/xpath templates that are safe from injection attacks\n+  xquerySanitizer(strings, ...values) {", "originalCommit": "03bca674dabaf585e28e4d78f45d237fe8d01d15", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzY4NDE4OQ==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3529#discussion_r373684189", "bodyText": "Added a simple ml-unit-test for this.", "author": "ryanjdew", "createdAt": "2020-01-31T21:03:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIyNTkzNA=="}], "type": "inlineReview"}, {"oid": "c8fac98fcd01ccd689b3b3d29519fe17ff285f50", "url": "https://github.com/marklogic/marklogic-data-hub/commit/c8fac98fcd01ccd689b3b3d29519fe17ff285f50", "message": "DHFPROD-4105: Add API for linking/removing artifacts from steps", "committedDate": "2020-01-31T20:59:07Z", "type": "commit"}, {"oid": "c8fac98fcd01ccd689b3b3d29519fe17ff285f50", "url": "https://github.com/marklogic/marklogic-data-hub/commit/c8fac98fcd01ccd689b3b3d29519fe17ff285f50", "message": "DHFPROD-4105: Add API for linking/removing artifacts from steps", "committedDate": "2020-01-31T20:59:07Z", "type": "forcePushed"}]}