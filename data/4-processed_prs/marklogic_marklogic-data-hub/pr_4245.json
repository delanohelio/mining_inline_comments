{"pr_number": 4245, "pr_title": "DHFPROD-5163: e2e tests for ingestion", "pr_createdAt": "2020-07-20T19:25:46Z", "pr_url": "https://github.com/marklogic/marklogic-data-hub/pull/4245", "timeline": [{"oid": "240399c63929dfae3a9d8388fd20d74308bb9d66", "url": "https://github.com/marklogic/marklogic-data-hub/commit/240399c63929dfae3a9d8388fd20d74308bb9d66", "message": "DHFPROD-5163: add custom commands for upload and flow verifications\n\nDHFPROD-5163: ingestion e2e tests\n\nFixing unit tests", "committedDate": "2020-07-20T19:19:36Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY0MTk5Nw==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4245#discussion_r457641997", "bodyText": "Trying to create these docs for custom commands and locators that are not self explanatory.\nProbably a good practice if we start writing tests across teams.", "author": "bsrikan", "createdAt": "2020-07-20T19:29:38Z", "path": "marklogic-data-hub-central/ui/e2e/cypress/support/index.d.ts", "diffHunk": "@@ -72,5 +72,27 @@ declare namespace Cypress {\n        * @example cy.deleteSavedQueries()\n       */\n       deleteSavedQueries(): Chainable<Element>\n+\n+      deleteFlows(...flowNames: any[]): Chainable<Element>\n+\n+      deleteSteps(stepType: string, ...stepNames: any[]): Chainable<Element>\n+\n+      waitForModalToDisappear(): void\n+\n+      verifyStepAddedToFlow(stepType: string, stepName: string): Chainable<Element>\n+\n+      /**\n+       * Custom command to upload files for running a load step.\n+       * @param filePath - a list of input file path\n+      */\n+      uploadFile(filePath: string): Chainable<Element>\n+\n+      /**\n+       * Custom command to verify status of a step when run in a flow\n+       * @param jobStatus - success, failed or failed_with_error\n+       * @param stepType - Ingestion, Mapping, Matching, Merging, Mastering or Custom\n+       * @param stepName - name of the step\n+       */\n+      verifyStepRunResult(jobStatus: string, stepType: string, stepName: string): Chainable<Element>", "originalCommit": "240399c63929dfae3a9d8388fd20d74308bb9d66", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY0MzE1NQ==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4245#discussion_r457643155", "bodyText": "more docs for locators that are self explanatory but input format is a need to know", "author": "bsrikan", "createdAt": "2020-07-20T19:31:51Z", "path": "marklogic-data-hub-central/ui/e2e/cypress/support/pages/load.tsx", "diffHunk": "@@ -0,0 +1,230 @@\n+import {FileLocation} from \"ts-loader/dist/types/interfaces\";\n+import {Simulate} from \"react-dom/test-utils\";\n+import mouseOver = Simulate.mouseOver;\n+\n+class LoadPage {\n+\n+    //Load tile list view page objects\n+    /**\n+     * @param type - accepts `table` for list-view or `th-large` for card-view\n+     */\n+    loadView(type: string) {\n+        return cy.get(`[data-icon=\"${type}\"`);\n+    }\n+\n+    /**\n+     * @param type - accepts `list` or `card`\n+     */\n+    addNewButton(type: string) {\n+        return cy.findByLabelText(`add-new-${type}`)\n+    }\n+\n+    stepName(stepName: string) {\n+        return cy.findByText(stepName);\n+    }\n+\n+    stepDescription(stepName: string) {\n+\n+    }\n+\n+    stepSourceFormat(stepName: string) {\n+\n+    }\n+\n+    stepTargetFormat(stepName: string) {\n+\n+    }\n+\n+    stepLastUpdated(stepName: string) {\n+\n+    }\n+\n+    columnSort(columnName: string) {\n+\n+    }\n+\n+    closeModal() {\n+        return cy.get('[aria-label=\"icon: close\"]')\n+    }\n+\n+    stepSettings(stepName: string) {\n+        return cy.findByTestId(`${stepName}-settings`);\n+    }\n+\n+    deleteStep(stepName: string) {\n+        return cy.findByTestId(`${stepName}-delete`);\n+    }\n+\n+    deleteConfirmation(option: string) {\n+        return cy.findByLabelText(option);\n+    }\n+\n+    pagination() {\n+\n+    }\n+\n+    /**\n+     * @param text - a string that matches any button by its label\n+     */\n+    findByButtonText(text: string) {\n+        return cy.findByLabelText(text);\n+    }\n+\n+    //New/Edit modal page objects\n+    stepNameInput() {\n+        return  cy.findByPlaceholderText('Enter name');\n+    }\n+\n+    stepDescriptionInput() {\n+        return cy.findByPlaceholderText('Enter description');\n+    }\n+\n+    selectSourceFormat(format: string) {\n+        cy.get('#sourceFormat').click();\n+        cy.findAllByText(`${format}`).last().click();\n+    }\n+\n+    selectTargetFormat(format: string) {\n+        cy.get('#targetFormat').click();\n+        cy.findAllByText(`${format}`).last().click();\n+    }\n+\n+    uriPrefixInput() {\n+        return cy.findByPlaceholderText('Enter URI Prefix');\n+    }\n+\n+    cancelButton() {\n+        return cy.findByLabelText('Cancel');\n+    }\n+\n+    confirmationOptions(option: string) {\n+        return cy.findByLabelText(option);\n+    }\n+\n+    saveButton() {\n+        return cy.findByLabelText('Save');\n+    }\n+\n+    //Settings page objects\n+    stepNameInSettings() {\n+        return cy.get('div p').last();\n+    }\n+\n+    /**\n+     * Clicks on a database option\n+     * @param db - accepts `STAGING` or `FINAL`\n+     */\n+    selectTargetDB(db: string) {\n+        cy.findByLabelText('targetDatabase-select').click();\n+        cy.findByTestId(`targetDbOptions-data-hub-${db}`).click();\n+    }\n+\n+    /**\n+     * This input field takes multiple values with special character sequences for keyboard events\n+     */\n+    targetCollectionInput() {\n+        return cy.findByLabelText('additionalColl-select');\n+    }\n+\n+    defaultCollections(collectionName: string) {\n+        return cy.findByTestId(`defaultCollections-${collectionName}`);\n+    }\n+\n+    /**\n+     * Overwrite the existing default permissions\n+     * @param permissions - accepts a comma separated text of roles and capabilities alternately\n+     * @example role1,cap1,role2,cap2\n+     */\n+    setTargetPermissions(permissions: string) {\n+        return cy.get('#targetPermissions').clear().type(permissions);\n+    }\n+\n+    /**\n+     * Add to the existing default permissions\n+     * @param permissions - accepts a comma separated text of roles and capabilities alternately\n+     * @example role1,cap1,role2,cap2\n+     */\n+    appendTargetPermissions(permissions: string) {\n+        return cy.get('#targetPermissions').type(`,${permissions}`);\n+    }\n+\n+    selectProvGranularity(options: string) {\n+        cy.get('#provGranularity').click();\n+        cy.findByTestId(`provOptions-${options}`).click();\n+    }\n+\n+    setBatchSize(batchSize: string) {\n+        cy.get('#batchSize').clear().type(batchSize);\n+    }\n+\n+    /**\n+     * Textarea that takes a file path in fixtures and pastes the json object {} in the text area\n+     * @param fixturePath - file path to headerContent json config file\n+     * @see https://docs.cypress.io/api/commands/type.html#Key-Combinations\n+     */\n+    setHeaderContent(fixturePath: string) {", "originalCommit": "240399c63929dfae3a9d8388fd20d74308bb9d66", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}