{"pr_number": 3872, "pr_title": "DHFPROD-4198:Create Save Query UI Component,DHFPROD-4628:Handle \"save\" and \"save as\" when there are unapplied changes", "pr_createdAt": "2020-04-24T22:27:30Z", "pr_url": "https://github.com/marklogic/marklogic-data-hub/pull/3872", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDkxMzc1Nw==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3872#discussion_r414913757", "bodyText": "Can you make Save button disabled if the query name input field is empty?", "author": "timur-isangulov", "createdAt": "2020-04-24T23:16:55Z", "path": "marklogic-data-hub-central/ui/src/components/queries/saving/save-query-modal/save-query-modal.tsx", "diffHunk": "@@ -0,0 +1,150 @@\n+import React, {useState, useContext} from 'react';\n+import {Modal, Form, Input, Radio, Button} from 'antd';\n+import {SearchContext} from \"../../../../util/search-context\";\n+import styles from './save-query-modal.module.scss';\n+\n+interface Props {\n+    setSaveModalVisibility: () => void;\n+    saveNewQuery: (queryName: string, queryDescription: string,facets:{}) => void;\n+    greyFacets:any[];\n+    toggleApply: (clicked:boolean) => void;\n+    toggleApplyClicked: (clicked:boolean) => void;\n+}\n+\n+\n+const SaveQueryModal: React.FC<Props> = (props) => {\n+\n+    const {\n+        clearAllGreyFacets,\n+        greyedOptions,\n+        setAllSearchFacets,\n+        searchOptions,\n+    } = useContext(SearchContext);\n+\n+\n+    const [queryName, setQueryName] = useState('');\n+    const [queryDescription, setQueryDescription] = useState('');\n+    const [radioOptionClicked, setRadioOptionClicked] = useState(0);\n+    const [queryEmpty, isQueryEmpty] = useState<any>('');\n+\n+    const layout = {\n+        labelCol: { span: 6 },\n+        wrapperCol: { span: 18 },\n+    };\n+\n+    const onCancel = () => {\n+        props.setSaveModalVisibility();\n+    }\n+\n+    const onOk = () => {\n+        let facets = {...searchOptions.selectedFacets}\n+        switch(radioOptionClicked) {\n+            case 1:\n+                setAllSearchFacets(searchOptions.selectedFacets);\n+                setAllSearchFacets(greyedOptions.selectedFacets);\n+                facets = {...facets,...greyedOptions.selectedFacets};\n+                clearAllGreyFacets();\n+                props.toggleApplyClicked(true);\n+                props.toggleApply(false);\n+                break;\n+            case 2:\n+                break;\n+            case 3:\n+                clearAllGreyFacets();\n+                props.toggleApplyClicked(true);\n+                props.toggleApply(false);\n+        }\n+\n+        if(queryName.length > 0 ){\n+            props.saveNewQuery(queryName, queryDescription, facets);\n+        } else {\n+            isQueryEmpty('error')\n+        }\n+    }\n+\n+    const handleChange = (event) => {\n+        if (event.target.id === 'save-query-name') {\n+           setQueryName(event.target.value);\n+        }\n+        if (event.target.id === 'save-query-description') {\n+           setQueryDescription(event.target.value);\n+        }\n+    }\n+\n+    const unAppliedFacets = (e) => {\n+        setRadioOptionClicked(e.target.value)\n+    }\n+\n+\n+    return (\n+        <Modal\n+            visible={true}\n+            title={'Save Query'}\n+            closable={true}\n+            onCancel={() => onCancel()}\n+            onOk={() => onOk()}\n+            maskClosable={true}\n+            footer={null}\n+            data-testid='save-query-modal'\n+        >\n+            <Form\n+                name=\"basic\"\n+                {...layout}\n+            >\n+                <Form.Item\n+                    colon={false}\n+                    label={<span className={styles.text}>\n+                           Name:&nbsp;<span className={styles.asterisk}>*</span>&nbsp;\n+                        </span>}\n+                    labelAlign=\"left\"\n+                    validateStatus={queryEmpty}\n+                    help={ queryEmpty === 'error' ? 'Query name is required' : ''}\n+                    data-testid='save-query-name'\n+                >\n+                    <Input\n+                        id=\"save-query-name\"\n+                        value={queryName}\n+                        placeholder={'Enter query name'}\n+                        onChange={handleChange}\n+                    />\n+                </Form.Item>\n+                <Form.Item\n+                    colon={false}\n+                    label='Description:'\n+                    labelAlign=\"left\"\n+                    data-testid='save-query-description'\n+                >\n+                    <Input\n+                        id=\"save-query-description\"\n+                        value={queryDescription}\n+                        onChange={handleChange}\n+                        placeholder={'Enter query description'}\n+                    />\n+                </Form.Item>\n+                {props.greyFacets.length > 0  && <Form.Item\n+                    colon={false}\n+                    label='Unapplied Facets:'\n+                    labelAlign=\"left\"\n+                    data-testid='unapplied-radio-options'\n+                >\n+                    <Radio.Group onChange={unAppliedFacets} style={{'marginTop': '11px'}}>\n+                        <Radio value={1}> Apply before saving</Radio>\n+                        <Radio value={2}> Save as is, keep unapplied facets</Radio>\n+                        <Radio value={3}> Discard unapplied facets</Radio>\n+                    </Radio.Group>\n+                </Form.Item>}\n+                <Form.Item>\n+                    <div className={styles.submitButtons}>\n+                        <Button onClick={() => onCancel()}>Cancel</Button>\n+                        &nbsp;&nbsp;\n+                        <Button type=\"primary\" htmlType=\"submit\" onClick={()=> onOk()} id='save-query-button'>Save</Button>", "originalCommit": "66dbb694308c4230f72a0cd71959f10606d727c4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "d07459f725cc0752a77460cae69bb9eeba5fe655", "url": "https://github.com/marklogic/marklogic-data-hub/commit/d07459f725cc0752a77460cae69bb9eeba5fe655", "message": "DHFPROD-4198:save queries", "committedDate": "2020-04-24T23:23:19Z", "type": "forcePushed"}, {"oid": "42b8ed486163855dbc8ce976d557115534595c2e", "url": "https://github.com/marklogic/marklogic-data-hub/commit/42b8ed486163855dbc8ce976d557115534595c2e", "message": "DHFPROD-4198:save queries", "committedDate": "2020-04-25T03:01:35Z", "type": "forcePushed"}, {"oid": "600fcdc3da776a450e1621ba572c962c650883b6", "url": "https://github.com/marklogic/marklogic-data-hub/commit/600fcdc3da776a450e1621ba572c962c650883b6", "message": "DHFPROD-4198:save queries", "committedDate": "2020-04-26T23:26:37Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTkxODEwNA==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3872#discussion_r415918104", "bodyText": "We are not supposed to be testing with admin. So can we remove/update all such references?", "author": "bsrikan", "createdAt": "2020-04-27T15:35:14Z", "path": "marklogic-data-hub-central/ui/src/assets/mock-data/query.js", "diffHunk": "@@ -1,121 +1,159 @@\n //GET\n export const getQueriesResponse = [\n-    {\n-        \"savedQuery\": {\n-            \"id\": \"edf7b2d1-62d2-481d-9bb0-2145b023ca5e\",\n-            \"name\": \"Order\",\n-            \"description\": \"saved order query\",\n-            \"query\": {\n-                \"searchText\": \"10253\",\n-                \"entityTypeIds\": [\n-                    \"Order\"\n-                ],\n-                \"selectedFacets\": {\n-                    \"orderDate\": {\n-                        \"dataType\": \"date\",\n-                        \"rangeValues\": {\n-                            \"lowerBound\": \"1994-03-01\",\n-                            \"upperBound\": \"2020-05-01\"\n-                        }\n-                    },\n-                    \"city\": {\n-                        \"dataType\": \"xs:string\",\n-                        \"stringValues\": [\n-                            \"Rio de Janeiro\"\n-                        ]\n-                    }\n-                }\n-            },\n-            \"propertiesToDisplay\": [\n-                \"facet1\",\n-                \"EntityTypeProperty1\"\n-            ],\n-            \"owner\": \"admin\",\n-            \"systemMetadata\": {\n-                \"createdBy\": \"admin\",\n-                \"createdDateTime\": \"2020-04-20T16:37:19.603846-07:00\",\n-                \"lastUpdatedBy\": \"admin\",\n-                \"lastUpdatedDateTime\": \"2020-04-20T16:37:19.603846-07:00\"\n+  {\n+    \"savedQuery\": {\n+      \"id\": \"edf7b2d1-62d2-481d-9bb0-2145b023ca5e\",\n+      \"name\": \"Order\",\n+      \"description\": \"saved order query\",\n+      \"query\": {\n+        \"searchText\": \"10253\",\n+        \"entityTypeIds\": [\n+          \"Order\"\n+        ],\n+        \"selectedFacets\": {\n+          \"orderDate\": {\n+            \"dataType\": \"date\",\n+            \"rangeValues\": {\n+              \"lowerBound\": \"1994-03-01\",\n+              \"upperBound\": \"2020-05-01\"\n             }\n+          },\n+          \"city\": {\n+            \"dataType\": \"xs:string\",\n+            \"stringValues\": [\n+              \"Rio de Janeiro\"\n+            ]\n+          }\n         }\n-    }]\n+      },\n+      \"propertiesToDisplay\": [\n+        \"facet1\",\n+        \"EntityTypeProperty1\"\n+      ],\n+      \"owner\": \"admin\",", "originalCommit": "600fcdc3da776a450e1621ba572c962c650883b6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTkxODcyOQ==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3872#discussion_r415918729", "bodyText": "I think there needs to be some basic validation for the name field. If save a query as an empty string, it doesn't show up in the save query dropdown, but it shows in the manage queries table.", "author": "brucean52", "createdAt": "2020-04-27T15:35:58Z", "path": "marklogic-data-hub-central/ui/src/components/queries/saving/save-query-modal/save-query-modal.tsx", "diffHunk": "@@ -0,0 +1,154 @@\n+import React, {useState, useContext} from 'react';\n+import {Modal, Form, Input, Radio, Button} from 'antd';\n+import {SearchContext} from \"../../../../util/search-context\";\n+import styles from './save-query-modal.module.scss';\n+\n+interface Props {\n+    setSaveModalVisibility: () => void;\n+    saveNewQuery: (queryName: string, queryDescription: string,facets:{}) => void;\n+    greyFacets:any[];\n+    toggleApply: (clicked:boolean) => void;\n+    toggleApplyClicked: (clicked:boolean) => void;\n+}\n+\n+\n+const SaveQueryModal: React.FC<Props> = (props) => {\n+\n+    const {\n+        clearAllGreyFacets,\n+        greyedOptions,\n+        setAllSearchFacets,\n+        searchOptions,\n+    } = useContext(SearchContext);\n+\n+\n+    const [queryName, setQueryName] = useState('');\n+    const [queryDescription, setQueryDescription] = useState('');\n+    const [radioOptionClicked, setRadioOptionClicked] = useState(0);\n+    const [queryEmpty, isQueryEmpty] = useState<any>('');\n+\n+    const layout = {\n+        labelCol: { span: 6 },\n+        wrapperCol: { span: 18 },\n+    };\n+\n+    const onCancel = () => {\n+        props.setSaveModalVisibility();\n+    }\n+\n+    const onOk = () => {\n+        let facets = {...searchOptions.selectedFacets}\n+        switch(radioOptionClicked) {\n+            case 1:\n+                setAllSearchFacets(searchOptions.selectedFacets);\n+                setAllSearchFacets(greyedOptions.selectedFacets);\n+                facets = {...facets,...greyedOptions.selectedFacets};\n+                clearAllGreyFacets();\n+                props.toggleApplyClicked(true);\n+                props.toggleApply(false);\n+                break;\n+            case 2:\n+                break;\n+            case 3:\n+                clearAllGreyFacets();\n+                props.toggleApplyClicked(true);\n+                props.toggleApply(false);\n+        }\n+\n+        if(queryName.length > 0 ){\n+            props.saveNewQuery(queryName, queryDescription, facets);\n+        } else {\n+            isQueryEmpty('error')\n+        }\n+    }\n+\n+    const handleChange = (event) => {\n+        if (event.target.id === 'save-query-name') {\n+           setQueryName(event.target.value);", "originalCommit": "600fcdc3da776a450e1621ba572c962c650883b6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTkzNDc5OA==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3872#discussion_r415934798", "bodyText": "It shows on the save query dropdown and manage query for me.", "author": "timur-isangulov", "createdAt": "2020-04-27T15:53:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTkxODcyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTk3NjIxMw==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3872#discussion_r415976213", "bodyText": "@brucean52 , @timur-isangulov, added the fixes.", "author": "Sanjeevani19", "createdAt": "2020-04-27T16:46:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTkxODcyOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTkyNDg3MA==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3872#discussion_r415924870", "bodyText": "I think the save query dropdown should be cleared whenever a search request is made. See examples.\nhttps://drive.google.com/file/d/1lZWZGKOkRsbywOsd6R2W1A9H7JHAiWlH/view\nhttps://drive.google.com/file/d/1BmWFT9ifZ45-ld3uit6sgoyTIs6Ip2Yy/view", "author": "brucean52", "createdAt": "2020-04-27T15:43:18Z", "path": "marklogic-data-hub-central/ui/src/components/queries/saving/save-queries-dropdown/save-queries-dropdown.tsx", "diffHunk": "@@ -0,0 +1,84 @@\n+import {Select} from \"antd\"\n+import React, {useContext} from 'react';\n+import styles from './save-queries-dropdown.module.scss';\n+import { UserContext } from \"../../../../util/user-context\";\n+import { SearchContext } from \"../../../../util/search-context\";\n+import {fetchQueryById} from \"../../../../api/queries\";\n+\n+\n+interface Props {\n+    savedQueryList: any[];\n+    toggleApply: (clicked:boolean) => void;\n+    greyFacets: any[];\n+};\n+\n+\n+const SaveQueriesDropdown: React.FC<Props> = (props) => {", "originalCommit": "600fcdc3da776a450e1621ba572c962c650883b6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjAzOTAzMw==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3872#discussion_r416039033", "bodyText": "@brucean52 fixed this issue.", "author": "Sanjeevani19", "createdAt": "2020-04-27T18:12:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTkyNDg3MA=="}], "type": "inlineReview"}, {"oid": "32ce09ed82b827cce6573b9f175913c234f27cd5", "url": "https://github.com/marklogic/marklogic-data-hub/commit/32ce09ed82b827cce6573b9f175913c234f27cd5", "message": "DHFPROD-4198:save queries", "committedDate": "2020-04-27T15:44:31Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTkxOTgyNQ==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3872#discussion_r415919825", "bodyText": "since you have a placeholder, I dont think you would need data-testid. Please try and use getByPlaceholderText instead.", "author": "bsrikan", "createdAt": "2020-04-27T15:37:18Z", "path": "marklogic-data-hub-central/ui/src/components/queries/saving/save-queries-dropdown/save-queries-dropdown.tsx", "diffHunk": "@@ -0,0 +1,84 @@\n+import {Select} from \"antd\"\n+import React, {useContext} from 'react';\n+import styles from './save-queries-dropdown.module.scss';\n+import { UserContext } from \"../../../../util/user-context\";\n+import { SearchContext } from \"../../../../util/search-context\";\n+import {fetchQueryById} from \"../../../../api/queries\";\n+\n+\n+interface Props {\n+    savedQueryList: any[];\n+    toggleApply: (clicked:boolean) => void;\n+    greyFacets: any[];\n+};\n+\n+\n+const SaveQueriesDropdown: React.FC<Props> = (props) => {\n+\n+    const {Option} = Select;\n+\n+    const {\n+        handleError,\n+        resetSessionTime\n+    } = useContext(UserContext);\n+    const {\n+        applySaveQuery,\n+        clearAllGreyFacets,\n+    } = useContext(SearchContext);\n+\n+    const savedQueryOptions = props.savedQueryList.map((key) => key.savedQuery.name);\n+\n+    const options = savedQueryOptions.map((query, index) =>\n+        <Option value={query} key={index}>{query}</Option>\n+    );\n+\n+\n+    const onItemSelect = (e) => {\n+        for(let key of props.savedQueryList)\n+        {\n+            if(key.savedQuery.name === e){\n+                getSaveQueryWithId(key);\n+                break;\n+            }\n+        }\n+    }\n+\n+    const getSaveQueryWithId = async (key) => {\n+        let searchText:string = '';\n+        let entityTypeIds:string[] = [];\n+        let selectedFacets:{} = {};\n+        try {\n+            const response = await fetchQueryById(key);\n+            if (response.data) {\n+                searchText = response.data.savedQuery.query.searchText;\n+                entityTypeIds = response.data.savedQuery.query.entityTypeIds;\n+                selectedFacets = response.data.savedQuery.query.selectedFacets;\n+                applySaveQuery(searchText, entityTypeIds, selectedFacets);\n+                if(props.greyFacets.length > 0){\n+                    clearAllGreyFacets();\n+                }\n+                props.toggleApply(false);\n+            }\n+        } catch (error) {\n+            handleError(error)\n+        } finally {\n+            resetSessionTime()\n+        }\n+    }\n+\n+    return (\n+        <Select\n+            id=\"dropdownList\"\n+            placeholder={'select a query'}\n+            defaultValue={'select a query'}\n+            className={styles.dropDownStyle}\n+            onChange={onItemSelect}\n+            data-testid={'drop-down-list'}", "originalCommit": "600fcdc3da776a450e1621ba572c962c650883b6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTkyMzI4NQ==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3872#discussion_r415923285", "bodyText": "Above test \"renders without crashing\" is redundant since this one validates its fields. If it does crash, both these tests will fail for same reason.", "author": "bsrikan", "createdAt": "2020-04-27T15:41:24Z", "path": "marklogic-data-hub-central/ui/src/components/queries/saving/save-query-modal/save-query-modal.test.tsx", "diffHunk": "@@ -0,0 +1,41 @@\n+import React from 'react';\n+import {fireEvent, render, wait} from \"@testing-library/react\";\n+import SaveQueryModal from './save-query-modal';\n+\n+describe(\"<SaveQueryModal/>\", () => {\n+\n+    let queryField, queryDescription\n+\n+    test(\"Save query modal renders without crashing\", async () => {\n+        const { getByTestId } = render(<SaveQueryModal\n+            setSaveModalVisibility={jest.fn()}\n+            saveNewQuery={jest.fn()}\n+            greyFacets= {\u00a0[{constraint:\u00a0\"lastname\",\u00a0facet:\u00a0\"Adams\",\u00a0displayName:\u00a0''},\n+            {constraint:\u00a0\"lastname\",\u00a0facet:\u00a0\"Coleman\",\u00a0displayName:\u00a0''}]}\n+            toggleApply= {jest.fn()}\n+            toggleApplyClicked={jest.fn()}\n+        />)\n+\n+        expect(getByTestId(\"save-query-name\")).toBeInTheDocument();\n+        expect(getByTestId(\"save-query-description\")).toBeInTheDocument();\n+        expect(getByTestId(\"unapplied-radio-options\")).toBeInTheDocument();\n+    });\n+\n+    test(\"Verify Save modal fields are rendered and can take input\", async () => {", "originalCommit": "600fcdc3da776a450e1621ba572c962c650883b6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTkzODg3Mg==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3872#discussion_r415938872", "bodyText": "A bunch of data-testid with no corresponding test usage. Lets try to use data-testid as a last resort. Can you pls try using getByTitle instead.", "author": "bsrikan", "createdAt": "2020-04-27T15:57:56Z", "path": "marklogic-data-hub-central/ui/src/components/queries/saving/save-query-modal/save-query-modal.tsx", "diffHunk": "@@ -0,0 +1,154 @@\n+import React, {useState, useContext} from 'react';\n+import {Modal, Form, Input, Radio, Button} from 'antd';\n+import {SearchContext} from \"../../../../util/search-context\";\n+import styles from './save-query-modal.module.scss';\n+\n+interface Props {\n+    setSaveModalVisibility: () => void;\n+    saveNewQuery: (queryName: string, queryDescription: string,facets:{}) => void;\n+    greyFacets:any[];\n+    toggleApply: (clicked:boolean) => void;\n+    toggleApplyClicked: (clicked:boolean) => void;\n+}\n+\n+\n+const SaveQueryModal: React.FC<Props> = (props) => {\n+\n+    const {\n+        clearAllGreyFacets,\n+        greyedOptions,\n+        setAllSearchFacets,\n+        searchOptions,\n+    } = useContext(SearchContext);\n+\n+\n+    const [queryName, setQueryName] = useState('');\n+    const [queryDescription, setQueryDescription] = useState('');\n+    const [radioOptionClicked, setRadioOptionClicked] = useState(0);\n+    const [queryEmpty, isQueryEmpty] = useState<any>('');\n+\n+    const layout = {\n+        labelCol: { span: 6 },\n+        wrapperCol: { span: 18 },\n+    };\n+\n+    const onCancel = () => {\n+        props.setSaveModalVisibility();\n+    }\n+\n+    const onOk = () => {\n+        let facets = {...searchOptions.selectedFacets}\n+        switch(radioOptionClicked) {\n+            case 1:\n+                setAllSearchFacets(searchOptions.selectedFacets);\n+                setAllSearchFacets(greyedOptions.selectedFacets);\n+                facets = {...facets,...greyedOptions.selectedFacets};\n+                clearAllGreyFacets();\n+                props.toggleApplyClicked(true);\n+                props.toggleApply(false);\n+                break;\n+            case 2:\n+                break;\n+            case 3:\n+                clearAllGreyFacets();\n+                props.toggleApplyClicked(true);\n+                props.toggleApply(false);\n+        }\n+\n+        if(queryName.length > 0 ){\n+            props.saveNewQuery(queryName, queryDescription, facets);\n+        } else {\n+            isQueryEmpty('error')\n+        }\n+    }\n+\n+    const handleChange = (event) => {\n+        if (event.target.id === 'save-query-name') {\n+           setQueryName(event.target.value);\n+        }\n+        if (event.target.id === 'save-query-description') {\n+           setQueryDescription(event.target.value);\n+        }\n+    }\n+\n+    const unAppliedFacets = (e) => {\n+        setRadioOptionClicked(e.target.value)\n+    }\n+\n+\n+    return (\n+        <Modal\n+            visible={true}\n+            title={'Save Query'}\n+            closable={true}\n+            onCancel={() => onCancel()}\n+            onOk={() => onOk()}\n+            maskClosable={true}\n+            footer={null}\n+            data-testid='save-query-modal'", "originalCommit": "32ce09ed82b827cce6573b9f175913c234f27cd5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTkzOTIxNw==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3872#discussion_r415939217", "bodyText": "Form labels dont need data-tetstid IMO.", "author": "bsrikan", "createdAt": "2020-04-27T15:58:22Z", "path": "marklogic-data-hub-central/ui/src/components/queries/saving/save-query-modal/save-query-modal.tsx", "diffHunk": "@@ -0,0 +1,154 @@\n+import React, {useState, useContext} from 'react';\n+import {Modal, Form, Input, Radio, Button} from 'antd';\n+import {SearchContext} from \"../../../../util/search-context\";\n+import styles from './save-query-modal.module.scss';\n+\n+interface Props {\n+    setSaveModalVisibility: () => void;\n+    saveNewQuery: (queryName: string, queryDescription: string,facets:{}) => void;\n+    greyFacets:any[];\n+    toggleApply: (clicked:boolean) => void;\n+    toggleApplyClicked: (clicked:boolean) => void;\n+}\n+\n+\n+const SaveQueryModal: React.FC<Props> = (props) => {\n+\n+    const {\n+        clearAllGreyFacets,\n+        greyedOptions,\n+        setAllSearchFacets,\n+        searchOptions,\n+    } = useContext(SearchContext);\n+\n+\n+    const [queryName, setQueryName] = useState('');\n+    const [queryDescription, setQueryDescription] = useState('');\n+    const [radioOptionClicked, setRadioOptionClicked] = useState(0);\n+    const [queryEmpty, isQueryEmpty] = useState<any>('');\n+\n+    const layout = {\n+        labelCol: { span: 6 },\n+        wrapperCol: { span: 18 },\n+    };\n+\n+    const onCancel = () => {\n+        props.setSaveModalVisibility();\n+    }\n+\n+    const onOk = () => {\n+        let facets = {...searchOptions.selectedFacets}\n+        switch(radioOptionClicked) {\n+            case 1:\n+                setAllSearchFacets(searchOptions.selectedFacets);\n+                setAllSearchFacets(greyedOptions.selectedFacets);\n+                facets = {...facets,...greyedOptions.selectedFacets};\n+                clearAllGreyFacets();\n+                props.toggleApplyClicked(true);\n+                props.toggleApply(false);\n+                break;\n+            case 2:\n+                break;\n+            case 3:\n+                clearAllGreyFacets();\n+                props.toggleApplyClicked(true);\n+                props.toggleApply(false);\n+        }\n+\n+        if(queryName.length > 0 ){\n+            props.saveNewQuery(queryName, queryDescription, facets);\n+        } else {\n+            isQueryEmpty('error')\n+        }\n+    }\n+\n+    const handleChange = (event) => {\n+        if (event.target.id === 'save-query-name') {\n+           setQueryName(event.target.value);\n+        }\n+        if (event.target.id === 'save-query-description') {\n+           setQueryDescription(event.target.value);\n+        }\n+    }\n+\n+    const unAppliedFacets = (e) => {\n+        setRadioOptionClicked(e.target.value)\n+    }\n+\n+\n+    return (\n+        <Modal\n+            visible={true}\n+            title={'Save Query'}\n+            closable={true}\n+            onCancel={() => onCancel()}\n+            onOk={() => onOk()}\n+            maskClosable={true}\n+            footer={null}\n+            data-testid='save-query-modal'\n+        >\n+            <Form\n+                name=\"basic\"\n+                {...layout}\n+            >\n+                <Form.Item\n+                    colon={false}\n+                    label={<span className={styles.text}>\n+                           Name:&nbsp;<span className={styles.asterisk}>*</span>&nbsp;\n+                        </span>}\n+                    labelAlign=\"left\"\n+                    validateStatus={queryEmpty}\n+                    help={ queryEmpty === 'error' ? 'Query name is required' : ''}\n+                    data-testid='save-query-name'", "originalCommit": "32ce09ed82b827cce6573b9f175913c234f27cd5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTk0MDQzMA==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3872#discussion_r415940430", "bodyText": "Same as above. Dont think form labels need data-testid, when the input field or the field we need to interact with in a test can be uniquely identified using non data-testid selectors.", "author": "bsrikan", "createdAt": "2020-04-27T15:59:51Z", "path": "marklogic-data-hub-central/ui/src/components/queries/saving/save-query-modal/save-query-modal.tsx", "diffHunk": "@@ -0,0 +1,154 @@\n+import React, {useState, useContext} from 'react';\n+import {Modal, Form, Input, Radio, Button} from 'antd';\n+import {SearchContext} from \"../../../../util/search-context\";\n+import styles from './save-query-modal.module.scss';\n+\n+interface Props {\n+    setSaveModalVisibility: () => void;\n+    saveNewQuery: (queryName: string, queryDescription: string,facets:{}) => void;\n+    greyFacets:any[];\n+    toggleApply: (clicked:boolean) => void;\n+    toggleApplyClicked: (clicked:boolean) => void;\n+}\n+\n+\n+const SaveQueryModal: React.FC<Props> = (props) => {\n+\n+    const {\n+        clearAllGreyFacets,\n+        greyedOptions,\n+        setAllSearchFacets,\n+        searchOptions,\n+    } = useContext(SearchContext);\n+\n+\n+    const [queryName, setQueryName] = useState('');\n+    const [queryDescription, setQueryDescription] = useState('');\n+    const [radioOptionClicked, setRadioOptionClicked] = useState(0);\n+    const [queryEmpty, isQueryEmpty] = useState<any>('');\n+\n+    const layout = {\n+        labelCol: { span: 6 },\n+        wrapperCol: { span: 18 },\n+    };\n+\n+    const onCancel = () => {\n+        props.setSaveModalVisibility();\n+    }\n+\n+    const onOk = () => {\n+        let facets = {...searchOptions.selectedFacets}\n+        switch(radioOptionClicked) {\n+            case 1:\n+                setAllSearchFacets(searchOptions.selectedFacets);\n+                setAllSearchFacets(greyedOptions.selectedFacets);\n+                facets = {...facets,...greyedOptions.selectedFacets};\n+                clearAllGreyFacets();\n+                props.toggleApplyClicked(true);\n+                props.toggleApply(false);\n+                break;\n+            case 2:\n+                break;\n+            case 3:\n+                clearAllGreyFacets();\n+                props.toggleApplyClicked(true);\n+                props.toggleApply(false);\n+        }\n+\n+        if(queryName.length > 0 ){\n+            props.saveNewQuery(queryName, queryDescription, facets);\n+        } else {\n+            isQueryEmpty('error')\n+        }\n+    }\n+\n+    const handleChange = (event) => {\n+        if (event.target.id === 'save-query-name') {\n+           setQueryName(event.target.value);\n+        }\n+        if (event.target.id === 'save-query-description') {\n+           setQueryDescription(event.target.value);\n+        }\n+    }\n+\n+    const unAppliedFacets = (e) => {\n+        setRadioOptionClicked(e.target.value)\n+    }\n+\n+\n+    return (\n+        <Modal\n+            visible={true}\n+            title={'Save Query'}\n+            closable={true}\n+            onCancel={() => onCancel()}\n+            onOk={() => onOk()}\n+            maskClosable={true}\n+            footer={null}\n+            data-testid='save-query-modal'\n+        >\n+            <Form\n+                name=\"basic\"\n+                {...layout}\n+            >\n+                <Form.Item\n+                    colon={false}\n+                    label={<span className={styles.text}>\n+                           Name:&nbsp;<span className={styles.asterisk}>*</span>&nbsp;\n+                        </span>}\n+                    labelAlign=\"left\"\n+                    validateStatus={queryEmpty}\n+                    help={ queryEmpty === 'error' ? 'Query name is required' : ''}\n+                    data-testid='save-query-name'\n+                >\n+                    <Input\n+                        id=\"save-query-name\"\n+                        value={queryName}\n+                        placeholder={'Enter query name'}\n+                        onChange={handleChange}\n+                    />\n+                </Form.Item>\n+                <Form.Item\n+                    colon={false}\n+                    label='Description:'\n+                    labelAlign=\"left\"\n+                    data-testid='save-query-description'", "originalCommit": "32ce09ed82b827cce6573b9f175913c234f27cd5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTk0MDY0Mw==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3872#discussion_r415940643", "bodyText": "Same as above.", "author": "bsrikan", "createdAt": "2020-04-27T16:00:08Z", "path": "marklogic-data-hub-central/ui/src/components/queries/saving/save-query-modal/save-query-modal.tsx", "diffHunk": "@@ -0,0 +1,154 @@\n+import React, {useState, useContext} from 'react';\n+import {Modal, Form, Input, Radio, Button} from 'antd';\n+import {SearchContext} from \"../../../../util/search-context\";\n+import styles from './save-query-modal.module.scss';\n+\n+interface Props {\n+    setSaveModalVisibility: () => void;\n+    saveNewQuery: (queryName: string, queryDescription: string,facets:{}) => void;\n+    greyFacets:any[];\n+    toggleApply: (clicked:boolean) => void;\n+    toggleApplyClicked: (clicked:boolean) => void;\n+}\n+\n+\n+const SaveQueryModal: React.FC<Props> = (props) => {\n+\n+    const {\n+        clearAllGreyFacets,\n+        greyedOptions,\n+        setAllSearchFacets,\n+        searchOptions,\n+    } = useContext(SearchContext);\n+\n+\n+    const [queryName, setQueryName] = useState('');\n+    const [queryDescription, setQueryDescription] = useState('');\n+    const [radioOptionClicked, setRadioOptionClicked] = useState(0);\n+    const [queryEmpty, isQueryEmpty] = useState<any>('');\n+\n+    const layout = {\n+        labelCol: { span: 6 },\n+        wrapperCol: { span: 18 },\n+    };\n+\n+    const onCancel = () => {\n+        props.setSaveModalVisibility();\n+    }\n+\n+    const onOk = () => {\n+        let facets = {...searchOptions.selectedFacets}\n+        switch(radioOptionClicked) {\n+            case 1:\n+                setAllSearchFacets(searchOptions.selectedFacets);\n+                setAllSearchFacets(greyedOptions.selectedFacets);\n+                facets = {...facets,...greyedOptions.selectedFacets};\n+                clearAllGreyFacets();\n+                props.toggleApplyClicked(true);\n+                props.toggleApply(false);\n+                break;\n+            case 2:\n+                break;\n+            case 3:\n+                clearAllGreyFacets();\n+                props.toggleApplyClicked(true);\n+                props.toggleApply(false);\n+        }\n+\n+        if(queryName.length > 0 ){\n+            props.saveNewQuery(queryName, queryDescription, facets);\n+        } else {\n+            isQueryEmpty('error')\n+        }\n+    }\n+\n+    const handleChange = (event) => {\n+        if (event.target.id === 'save-query-name') {\n+           setQueryName(event.target.value);\n+        }\n+        if (event.target.id === 'save-query-description') {\n+           setQueryDescription(event.target.value);\n+        }\n+    }\n+\n+    const unAppliedFacets = (e) => {\n+        setRadioOptionClicked(e.target.value)\n+    }\n+\n+\n+    return (\n+        <Modal\n+            visible={true}\n+            title={'Save Query'}\n+            closable={true}\n+            onCancel={() => onCancel()}\n+            onOk={() => onOk()}\n+            maskClosable={true}\n+            footer={null}\n+            data-testid='save-query-modal'\n+        >\n+            <Form\n+                name=\"basic\"\n+                {...layout}\n+            >\n+                <Form.Item\n+                    colon={false}\n+                    label={<span className={styles.text}>\n+                           Name:&nbsp;<span className={styles.asterisk}>*</span>&nbsp;\n+                        </span>}\n+                    labelAlign=\"left\"\n+                    validateStatus={queryEmpty}\n+                    help={ queryEmpty === 'error' ? 'Query name is required' : ''}\n+                    data-testid='save-query-name'\n+                >\n+                    <Input\n+                        id=\"save-query-name\"\n+                        value={queryName}\n+                        placeholder={'Enter query name'}\n+                        onChange={handleChange}\n+                    />\n+                </Form.Item>\n+                <Form.Item\n+                    colon={false}\n+                    label='Description:'\n+                    labelAlign=\"left\"\n+                    data-testid='save-query-description'\n+                >\n+                    <Input\n+                        id=\"save-query-description\"\n+                        value={queryDescription}\n+                        onChange={handleChange}\n+                        placeholder={'Enter query description'}\n+                    />\n+                </Form.Item>\n+                {props.greyFacets.length > 0  && <Form.Item\n+                    colon={false}\n+                    label='Unapplied Facets:'\n+                    labelAlign=\"left\"\n+                    data-testid='unapplied-radio-options'", "originalCommit": "32ce09ed82b827cce6573b9f175913c234f27cd5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTk3NjYyNw==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3872#discussion_r415976627", "bodyText": "@bsrikan removed all the data-testid references", "author": "Sanjeevani19", "createdAt": "2020-04-27T16:46:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTk0MDY0Mw=="}], "type": "inlineReview"}, {"oid": "f4a130644a2b112355d005d849279cb491289746", "url": "https://github.com/marklogic/marklogic-data-hub/commit/f4a130644a2b112355d005d849279cb491289746", "message": "DHFPROD-4198:save queries", "committedDate": "2020-04-27T16:44:45Z", "type": "forcePushed"}, {"oid": "95ff19a2619e295ce4a720a8922cde3236ed7d8a", "url": "https://github.com/marklogic/marklogic-data-hub/commit/95ff19a2619e295ce4a720a8922cde3236ed7d8a", "message": "DHFPROD-4198:save queries", "committedDate": "2020-04-27T18:11:14Z", "type": "forcePushed"}, {"oid": "fcbdd38948ffb3a5971ac3d4c00b855ef5d3b159", "url": "https://github.com/marklogic/marklogic-data-hub/commit/fcbdd38948ffb3a5971ac3d4c00b855ef5d3b159", "message": "DHFPROD-4198:save queries", "committedDate": "2020-04-27T18:59:15Z", "type": "commit"}, {"oid": "fcbdd38948ffb3a5971ac3d4c00b855ef5d3b159", "url": "https://github.com/marklogic/marklogic-data-hub/commit/fcbdd38948ffb3a5971ac3d4c00b855ef5d3b159", "message": "DHFPROD-4198:save queries", "committedDate": "2020-04-27T18:59:15Z", "type": "forcePushed"}]}