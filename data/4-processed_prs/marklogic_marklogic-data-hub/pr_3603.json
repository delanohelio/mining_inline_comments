{"pr_number": 3603, "pr_title": "DHFPROD-3922: incorporate loadData options when running ingest", "pr_createdAt": "2020-02-22T00:46:53Z", "pr_url": "https://github.com/marklogic/marklogic-data-hub/pull/3603", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzA4MjE0Mw==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3603#discussion_r383082143", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        List<String> roles = new LinkedList<>();\n          \n          \n            \n                        Set<String> roles = new HashSet<>();", "author": "hao1st", "createdAt": "2020-02-24T04:27:49Z", "path": "marklogic-data-hub/src/main/java/com/marklogic/hub/deploy/commands/LoadUserArtifactsCommand.java", "diffHunk": "@@ -188,44 +201,45 @@ public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs) th\n                     }\n                 });\n             }\n-\n-            // let's do step-definitions\n-            if (stepDefPath.toFile().exists()) {\n-                Files.walkFileTree(stepDefPath, new SimpleFileVisitor<Path>() {\n-                    @Override\n-                    public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs) throws IOException {\n-                        executeWalk(\n-                            dir,\n-                            stepDefModulesFinder,\n-                            propertiesModuleManager,\n-                            stepResourceToURI,\n-                            buildMetadata(hubConfig.getStepDefinitionPermissions(), \"http://marklogic.com/data-hub/step-definition\"),\n-                            stagingStepDefDocumentWriteSet,\n-                            finalStepDefDocumentWriteSet\n-                        );\n-                        return FileVisitResult.CONTINUE;\n-                    }\n-                });\n-            }\n-\n-\n-            // let's do flows\n-            if (flowPath.toFile().exists()) {\n-                Files.walkFileTree(flowPath, new SimpleFileVisitor<Path>() {\n-                    @Override\n-                    public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs) throws IOException {\n-                        executeWalk(\n-                            dir,\n-                            flowDefModulesFinder,\n-                            propertiesModuleManager,\n-                            flowResourceToURI,\n-                            buildMetadata(hubConfig.getFlowPermissions(), \"http://marklogic.com/data-hub/flow\"),\n-                            stagingFlowDocumentWriteSet,\n-                            finalFlowDocumentWriteSet\n-                        );\n-                        return FileVisitResult.CONTINUE;\n-                    }\n-                });\n+            ArtifactManager artifactManager = new ArtifactManagerImpl(hubConfig);\n+            List<String> roles = new LinkedList<>();", "originalCommit": "203448f1fcadfb4cebadf9a6344246d4a6d837c0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzk5OTk1MQ==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3603#discussion_r383999951", "bodyText": "Refactored to add a canUserUpdate property artifactType info, so checking the roles is no longer necessary.", "author": "ryanjdew", "createdAt": "2020-02-25T16:57:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzA4MjE0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDAwMDQwOQ==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3603#discussion_r384000409", "bodyText": "Refactored to add a canUserUpdate property artifactTypeInfo class, so checking the roles is no longer necessary.", "author": "ryanjdew", "createdAt": "2020-02-25T16:58:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzA4MjE0Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzA4MjUyMg==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3603#discussion_r383082522", "bodyText": "put the following right after for loop\nif (roles.contains(typeInfo.getUpdateRole()) { continue; }", "author": "hao1st", "createdAt": "2020-02-24T04:30:17Z", "path": "marklogic-data-hub/src/main/java/com/marklogic/hub/deploy/commands/LoadUserArtifactsCommand.java", "diffHunk": "@@ -188,44 +201,45 @@ public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs) th\n                     }\n                 });\n             }\n-\n-            // let's do step-definitions\n-            if (stepDefPath.toFile().exists()) {\n-                Files.walkFileTree(stepDefPath, new SimpleFileVisitor<Path>() {\n-                    @Override\n-                    public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs) throws IOException {\n-                        executeWalk(\n-                            dir,\n-                            stepDefModulesFinder,\n-                            propertiesModuleManager,\n-                            stepResourceToURI,\n-                            buildMetadata(hubConfig.getStepDefinitionPermissions(), \"http://marklogic.com/data-hub/step-definition\"),\n-                            stagingStepDefDocumentWriteSet,\n-                            finalStepDefDocumentWriteSet\n-                        );\n-                        return FileVisitResult.CONTINUE;\n-                    }\n-                });\n-            }\n-\n-\n-            // let's do flows\n-            if (flowPath.toFile().exists()) {\n-                Files.walkFileTree(flowPath, new SimpleFileVisitor<Path>() {\n-                    @Override\n-                    public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs) throws IOException {\n-                        executeWalk(\n-                            dir,\n-                            flowDefModulesFinder,\n-                            propertiesModuleManager,\n-                            flowResourceToURI,\n-                            buildMetadata(hubConfig.getFlowPermissions(), \"http://marklogic.com/data-hub/flow\"),\n-                            stagingFlowDocumentWriteSet,\n-                            finalFlowDocumentWriteSet\n-                        );\n-                        return FileVisitResult.CONTINUE;\n-                    }\n-                });\n+            ArtifactManager artifactManager = new ArtifactManagerImpl(hubConfig);\n+            List<String> roles = new LinkedList<>();\n+            RolesService.on(stagingClient).getRoles().elements().forEachRemaining(\n+                (roleNode) -> roles.add(roleNode.asText())\n+            );\n+            ArtifactService artifactService = ArtifactService.on(stagingClient);\n+            ObjectMapper mapper = new ObjectMapper();\n+            // New way to deploy Artifacts via Data Services\n+            for (ArtifactTypeInfo typeInfo: artifactManager.getArtifactTypeInfoList()) {\n+                final String artifactType = typeInfo.getType();\n+                final Path artifactPath = hubConfig.getHubProject().getProjectDir().toAbsolutePath().resolve(typeInfo.getDirectory().replaceAll(\"^/\",\"\")).toAbsolutePath();\n+                logger.info(\"Deploying artifacts of type '\" + artifactType + \"' located at '\"+ artifactPath.toString() +\"'\" );\n+                if (roles.contains(typeInfo.getUpdateRole()) && artifactPath.toFile().exists()) {", "originalCommit": "203448f1fcadfb4cebadf9a6344246d4a6d837c0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzI1MTcxOQ==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3603#discussion_r383251719", "bodyText": "I was thinking - first check to see if the artifactPath doesn't exist, and if not, log an info message of \"Artifact directory (directory) does not exist, so will not load any artifacts from it\". Then check to see if the user has the update role, and if so, load the artifacts; if not, log an info message stating \"User is not permitted to update artifacts of type (type), so will not load any artifacts of that type\".", "author": "rjrudin", "createdAt": "2020-02-24T13:03:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzA4MjUyMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDAwMTE3NA==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3603#discussion_r384001174", "bodyText": "Changed to use continue calls and added more specific logging as to why an artifact type may not be loaded.", "author": "ryanjdew", "createdAt": "2020-02-25T16:59:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzA4MjUyMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzI0NTg1NA==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3603#discussion_r383245854", "bodyText": "We shouldn't need this code - Jackson will automatically convert an ObjectNode into a POJO based on naming conventions. You can do objectMapper.readerFor(Class).readValue(jsonObject).", "author": "rjrudin", "createdAt": "2020-02-24T12:49:45Z", "path": "marklogic-data-hub/src/main/java/com/marklogic/hub/artifact/ArtifactTypeInfo.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Copyright 2012-2020 MarkLogic Corporation\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.marklogic.hub.artifact;\n+\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+\n+/**\n+ * Provides metadata about an artifact type\n+ */\n+public class ArtifactTypeInfo {\n+    private String type = null;\n+    private String directory = null;\n+    private String fileExtension = null;\n+    private String versionProperty = null;\n+    private String nameProperty = null;\n+    private String updateRole = null;\n+\n+    public String getType() {\n+        return type;\n+    }\n+\n+    public void setType(String type) {\n+        this.type = type;\n+    }\n+\n+    public String getDirectory() {\n+        return directory;\n+    }\n+\n+    public void setDirectory(String directory) {\n+        this.directory = directory;\n+    }\n+\n+    public String getFileExtension() {\n+        return fileExtension;\n+    }\n+\n+    public void setFileExtension(String fileExtension) {\n+        this.fileExtension = fileExtension;\n+    }\n+\n+    public String getVersionProperty() {\n+        return versionProperty;\n+    }\n+\n+    public void setVersionProperty(String versionProperty) {\n+        this.versionProperty = versionProperty;\n+    }\n+\n+    public String getNameProperty() {\n+        return nameProperty;\n+    }\n+\n+    public void setNameProperty(String nameProperty) {\n+        this.nameProperty = nameProperty;\n+    }\n+\n+    public String getUpdateRole() {\n+        return updateRole;\n+    }\n+\n+    public void setUpdateRole(String updateRole) {\n+        this.updateRole = updateRole;\n+    }\n+\n+    public static ArtifactTypeInfo deserialize(ObjectNode jsonObject) {", "originalCommit": "203448f1fcadfb4cebadf9a6344246d4a6d837c0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDAwMjE2MA==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3603#discussion_r384002160", "bodyText": "Refactored to use an ObjectMapper", "author": "ryanjdew", "createdAt": "2020-02-25T17:00:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzI0NTg1NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzI1MDg3Nw==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3603#discussion_r383250877", "bodyText": "I think this is a good method to add to HubProject. I think HubProject should be aware of an ArtifactTypeInfo, and thus have a method of:\nPath getArtifactTypePath(ArtifactTypeInfo)", "author": "rjrudin", "createdAt": "2020-02-24T13:01:25Z", "path": "marklogic-data-hub/src/main/java/com/marklogic/hub/deploy/commands/LoadUserArtifactsCommand.java", "diffHunk": "@@ -188,44 +201,45 @@ public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs) th\n                     }\n                 });\n             }\n-\n-            // let's do step-definitions\n-            if (stepDefPath.toFile().exists()) {\n-                Files.walkFileTree(stepDefPath, new SimpleFileVisitor<Path>() {\n-                    @Override\n-                    public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs) throws IOException {\n-                        executeWalk(\n-                            dir,\n-                            stepDefModulesFinder,\n-                            propertiesModuleManager,\n-                            stepResourceToURI,\n-                            buildMetadata(hubConfig.getStepDefinitionPermissions(), \"http://marklogic.com/data-hub/step-definition\"),\n-                            stagingStepDefDocumentWriteSet,\n-                            finalStepDefDocumentWriteSet\n-                        );\n-                        return FileVisitResult.CONTINUE;\n-                    }\n-                });\n-            }\n-\n-\n-            // let's do flows\n-            if (flowPath.toFile().exists()) {\n-                Files.walkFileTree(flowPath, new SimpleFileVisitor<Path>() {\n-                    @Override\n-                    public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs) throws IOException {\n-                        executeWalk(\n-                            dir,\n-                            flowDefModulesFinder,\n-                            propertiesModuleManager,\n-                            flowResourceToURI,\n-                            buildMetadata(hubConfig.getFlowPermissions(), \"http://marklogic.com/data-hub/flow\"),\n-                            stagingFlowDocumentWriteSet,\n-                            finalFlowDocumentWriteSet\n-                        );\n-                        return FileVisitResult.CONTINUE;\n-                    }\n-                });\n+            ArtifactManager artifactManager = new ArtifactManagerImpl(hubConfig);\n+            List<String> roles = new LinkedList<>();\n+            RolesService.on(stagingClient).getRoles().elements().forEachRemaining(\n+                (roleNode) -> roles.add(roleNode.asText())\n+            );\n+            ArtifactService artifactService = ArtifactService.on(stagingClient);\n+            ObjectMapper mapper = new ObjectMapper();\n+            // New way to deploy Artifacts via Data Services\n+            for (ArtifactTypeInfo typeInfo: artifactManager.getArtifactTypeInfoList()) {\n+                final String artifactType = typeInfo.getType();\n+                final Path artifactPath = hubConfig.getHubProject().getProjectDir().toAbsolutePath().resolve(typeInfo.getDirectory().replaceAll(\"^/\",\"\")).toAbsolutePath();", "originalCommit": "203448f1fcadfb4cebadf9a6344246d4a6d837c0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDAwMjAwMw==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3603#discussion_r384002003", "bodyText": "Moved the logic for the path into the HubProject", "author": "ryanjdew", "createdAt": "2020-02-25T17:00:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzI1MDg3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDAwMjIxNw==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3603#discussion_r384002217", "bodyText": "Moved the logic for the path into the HubProject", "author": "ryanjdew", "createdAt": "2020-02-25T17:01:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzI1MDg3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDAwMjg1MQ==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3603#discussion_r384002851", "bodyText": "Moved the logic for the path into the HubProject", "author": "ryanjdew", "createdAt": "2020-02-25T17:02:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzI1MDg3Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzI1Mjg5Mg==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3603#discussion_r383252892", "bodyText": "This looks like it should be a debug message or removed.", "author": "rjrudin", "createdAt": "2020-02-24T13:05:50Z", "path": "marklogic-data-hub/src/main/java/com/marklogic/hub/deploy/commands/LoadUserArtifactsCommand.java", "diffHunk": "@@ -188,44 +201,45 @@ public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs) th\n                     }\n                 });\n             }\n-\n-            // let's do step-definitions\n-            if (stepDefPath.toFile().exists()) {\n-                Files.walkFileTree(stepDefPath, new SimpleFileVisitor<Path>() {\n-                    @Override\n-                    public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs) throws IOException {\n-                        executeWalk(\n-                            dir,\n-                            stepDefModulesFinder,\n-                            propertiesModuleManager,\n-                            stepResourceToURI,\n-                            buildMetadata(hubConfig.getStepDefinitionPermissions(), \"http://marklogic.com/data-hub/step-definition\"),\n-                            stagingStepDefDocumentWriteSet,\n-                            finalStepDefDocumentWriteSet\n-                        );\n-                        return FileVisitResult.CONTINUE;\n-                    }\n-                });\n-            }\n-\n-\n-            // let's do flows\n-            if (flowPath.toFile().exists()) {\n-                Files.walkFileTree(flowPath, new SimpleFileVisitor<Path>() {\n-                    @Override\n-                    public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs) throws IOException {\n-                        executeWalk(\n-                            dir,\n-                            flowDefModulesFinder,\n-                            propertiesModuleManager,\n-                            flowResourceToURI,\n-                            buildMetadata(hubConfig.getFlowPermissions(), \"http://marklogic.com/data-hub/flow\"),\n-                            stagingFlowDocumentWriteSet,\n-                            finalFlowDocumentWriteSet\n-                        );\n-                        return FileVisitResult.CONTINUE;\n-                    }\n-                });\n+            ArtifactManager artifactManager = new ArtifactManagerImpl(hubConfig);\n+            List<String> roles = new LinkedList<>();\n+            RolesService.on(stagingClient).getRoles().elements().forEachRemaining(\n+                (roleNode) -> roles.add(roleNode.asText())\n+            );\n+            ArtifactService artifactService = ArtifactService.on(stagingClient);\n+            ObjectMapper mapper = new ObjectMapper();\n+            // New way to deploy Artifacts via Data Services\n+            for (ArtifactTypeInfo typeInfo: artifactManager.getArtifactTypeInfoList()) {\n+                final String artifactType = typeInfo.getType();\n+                final Path artifactPath = hubConfig.getHubProject().getProjectDir().toAbsolutePath().resolve(typeInfo.getDirectory().replaceAll(\"^/\",\"\")).toAbsolutePath();\n+                logger.info(\"Deploying artifacts of type '\" + artifactType + \"' located at '\"+ artifactPath.toString() +\"'\" );\n+                if (roles.contains(typeInfo.getUpdateRole()) && artifactPath.toFile().exists()) {\n+                    final String fileExtension = \"*\" + typeInfo.getFileExtension();\n+                    BaseModulesFinder modulesFinder = new BaseModulesFinder(){\n+                        @Override\n+                        protected Modules findModulesWithResolvedBaseDir(String resolvedBaseDir) {\n+                            Modules modules = new Modules();\n+                            logger.info(\"resolvedBaseDir: \" + resolvedBaseDir);", "originalCommit": "203448f1fcadfb4cebadf9a6344246d4a6d837c0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzI2MzUzNA==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3603#discussion_r383263534", "bodyText": "Similar to #3605, I'm wondering if it'd be better for the \"roles\" service to instead include true/false properties for e.g. \"canLoadMappings\", \"canLoadFlows\", etc. That prevents the Java tier from having knowledge of any roles.\nMore importantly, ML knows the answer to the question of whether a user can load a mapping, so it should be the one to determine a true/false value for that, not the Java code.", "author": "rjrudin", "createdAt": "2020-02-24T13:28:04Z", "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/artifacts/core.sjs", "diffHunk": "@@ -43,7 +43,8 @@ function getTypesInfo() {\n                 fileExtension: getArtifactFileExtension(artifactType),\n                 directory: getArtifactDirectory(artifactType),\n                 nameProperty: artifactLibrary.getNameProperty(),\n-                versionProperty: artifactLibrary.getVersionProperty()\n+                versionProperty: artifactLibrary.getVersionProperty(),\n+                updateRole: artifactLibrary.getPermissions().filter((perm) => perm.capability === 'update').map((perm) => xdmp.roleName(perm.roleId))[0]", "originalCommit": "203448f1fcadfb4cebadf9a6344246d4a6d837c0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzI2NDY1OQ==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3603#discussion_r383264659", "bodyText": "What's the benefit of saving this state in the class? Are there use cases where we may invoke multiple methods on an instance of this class for the same user?", "author": "rjrudin", "createdAt": "2020-02-24T13:30:08Z", "path": "marklogic-data-hub/src/main/java/com/marklogic/hub/impl/ArtifactManagerImpl.java", "diffHunk": "@@ -29,18 +30,20 @@\n import java.nio.file.Path;\n import java.nio.file.Paths;\n import java.util.Iterator;\n+import java.util.LinkedList;\n+import java.util.List;\n \n @Component\n public class ArtifactManagerImpl implements ArtifactManager {\n     HubConfig hubConfig;\n+    protected List<ArtifactTypeInfo> allArtifactTypeInfo = null;", "originalCommit": "203448f1fcadfb4cebadf9a6344246d4a6d837c0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDAwNDI5Mg==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3603#discussion_r384004292", "bodyText": "No longer keeping the state. With the change to deliberately state whether the current user can update an artifact type, we want to ensure that information is current anyway.", "author": "ryanjdew", "createdAt": "2020-02-25T17:04:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzI2NDY1OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzI2NDg0Mg==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3603#discussion_r383264842", "bodyText": "I think \"Component\" can be removed, right? I'd rather see the tests that are autowiring this in just instantiate an instance when it needs it (there are only 3 of them).", "author": "rjrudin", "createdAt": "2020-02-24T13:30:32Z", "path": "marklogic-data-hub/src/main/java/com/marklogic/hub/impl/ArtifactManagerImpl.java", "diffHunk": "@@ -29,18 +30,20 @@\n import java.nio.file.Path;\n import java.nio.file.Paths;\n import java.util.Iterator;\n+import java.util.LinkedList;\n+import java.util.List;\n \n @Component", "originalCommit": "203448f1fcadfb4cebadf9a6344246d4a6d837c0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzI2NTMxOQ==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3603#discussion_r383265319", "bodyText": "How about making this a protected method? Then you can easily unit test the various branches in this method without having to connect to ML or setup a test flow.", "author": "rjrudin", "createdAt": "2020-02-24T13:31:28Z", "path": "marklogic-data-hub/src/main/java/com/marklogic/hub/flow/impl/FlowRunnerImpl.java", "diffHunk": "@@ -592,4 +606,66 @@ public void setFlowManager(FlowManager flowManager) {\n     public HubConfig getHubConfig() {\n         return hubConfig;\n     }\n+\n+    // Brings in artifact settings for running a step\n+    private void applyArtifactSettings(Step step, Map<String, Object> stepConfig) {", "originalCommit": "203448f1fcadfb4cebadf9a6344246d4a6d837c0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "7edf20496a70c9277beb896aea2bdc2a1a2b6a69", "url": "https://github.com/marklogic/marklogic-data-hub/commit/7edf20496a70c9277beb896aea2bdc2a1a2b6a69", "message": "DHFPROD-3922: incorporate loadData options when running ingest", "committedDate": "2020-02-25T06:57:52Z", "type": "forcePushed"}, {"oid": "41f60b0d57fd9e0afe78804258270316c4a72176", "url": "https://github.com/marklogic/marklogic-data-hub/commit/41f60b0d57fd9e0afe78804258270316c4a72176", "message": "DHFPROD-3922: incorporate loadData options when running ingest", "committedDate": "2020-02-25T18:17:01Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDY2NDM0NQ==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3603#discussion_r384664345", "bodyText": "We do not need to initialize these member variable. They shoud be default.", "author": "hao1st", "createdAt": "2020-02-26T17:58:03Z", "path": "marklogic-data-hub/src/main/java/com/marklogic/hub/artifact/ArtifactTypeInfo.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Copyright 2012-2020 MarkLogic Corporation\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.marklogic.hub.artifact;\n+\n+/**\n+ * Provides metadata about an artifact type\n+ */\n+public class ArtifactTypeInfo {\n+    private String type = null;", "originalCommit": "41f60b0d57fd9e0afe78804258270316c4a72176", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDcwMDE3NQ==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3603#discussion_r384700175", "bodyText": "Removed unnecessary initializations and setters.", "author": "ryanjdew", "createdAt": "2020-02-26T19:03:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDY2NDM0NQ=="}], "type": "inlineReview"}, {"oid": "4c1ecbd194c0de28b144a266d5eec19db7cae9b7", "url": "https://github.com/marklogic/marklogic-data-hub/commit/4c1ecbd194c0de28b144a266d5eec19db7cae9b7", "message": "DHFPROD-3922: incorporate loadData options when running ingest", "committedDate": "2020-02-26T17:52:56Z", "type": "forcePushed"}, {"oid": "c09a88f8f9f9204ba41c0bb7f457d5c73df18125", "url": "https://github.com/marklogic/marklogic-data-hub/commit/c09a88f8f9f9204ba41c0bb7f457d5c73df18125", "message": "DHFPROD-3922: incorporate loadData options when running ingest", "committedDate": "2020-02-26T19:01:50Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTEyOTM4MA==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3603#discussion_r385129380", "bodyText": "I think we should have unit tests for this, but I'd actually like to write them. I created a subtask for the work.", "author": "rjrudin", "createdAt": "2020-02-27T13:36:59Z", "path": "marklogic-data-hub/src/main/java/com/marklogic/hub/flow/impl/FlowRunnerImpl.java", "diffHunk": "@@ -599,4 +613,66 @@ public void setFlowManager(FlowManager flowManager) {\n     public HubConfig getHubConfig() {\n         return hubConfig;\n     }\n+\n+    // Brings in artifact settings for running a step\n+    protected void applyArtifactSettings(Step step, Map<String, Object> stepConfig) {", "originalCommit": "c09a88f8f9f9204ba41c0bb7f457d5c73df18125", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "50431c31d9c64b53c631e4c468838b8b8bd29cd6", "url": "https://github.com/marklogic/marklogic-data-hub/commit/50431c31d9c64b53c631e4c468838b8b8bd29cd6", "message": "DHFPROD-3922: incorporate loadData options when running ingest", "committedDate": "2020-02-27T23:15:56Z", "type": "forcePushed"}, {"oid": "9dc6263728c1ff649cb7edac241fab91f1b051de", "url": "https://github.com/marklogic/marklogic-data-hub/commit/9dc6263728c1ff649cb7edac241fab91f1b051de", "message": "DHFPROD-3922: incorporate loadData options when running ingest", "committedDate": "2020-02-28T00:41:29Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTUwNDI2MQ==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3603#discussion_r385504261", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        const updateRoles = artifactLibrary.getPermissions().filter((perm) => perm.capability === 'update').map((perm) => perm.roleId);\n          \n          \n            \n                        const currentRoles = xdmp.getCurrentRoles().toArray();\n          \n          \n            \n                        const updateRoles = artifactLibrary.getPermissions().filter((perm) => perm.capability === 'update').map((perm) => String(perm.roleId));\n          \n          \n            \n                        const currentRoles = xdmp.getCurrentRoles().toArray().map(String);", "author": "hao1st", "createdAt": "2020-02-28T04:38:01Z", "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/artifacts/core.sjs", "diffHunk": "@@ -36,14 +36,16 @@ function getTypesInfo() {\n     for (const artifactType of Object.keys(registeredArtifactTypes)) {\n         if (registeredArtifactTypes.hasOwnProperty(artifactType)) {\n             const artifactLibrary = registeredArtifactTypes[artifactType];\n+            const updateRoles = artifactLibrary.getPermissions().filter((perm) => perm.capability === 'update').map((perm) => perm.roleId);\n+            const currentRoles = xdmp.getCurrentRoles().toArray();", "originalCommit": "9dc6263728c1ff649cb7edac241fab91f1b051de", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTcxNjg0MQ==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3603#discussion_r385716841", "bodyText": "Updated to map to strings so they're accurately compared.", "author": "ryanjdew", "createdAt": "2020-02-28T14:14:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTUwNDI2MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTUwNDgyOQ==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3603#discussion_r385504829", "bodyText": "@ryanjdew I just tested it, userCanUpdate is always false. After I did the above changes as suggestion, it works.\nAlso can we add \"userCanRead\" as part of artifact type info?", "author": "hao1st", "createdAt": "2020-02-28T04:41:02Z", "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/artifacts/core.sjs", "diffHunk": "@@ -36,14 +36,16 @@ function getTypesInfo() {\n     for (const artifactType of Object.keys(registeredArtifactTypes)) {\n         if (registeredArtifactTypes.hasOwnProperty(artifactType)) {\n             const artifactLibrary = registeredArtifactTypes[artifactType];\n+            const updateRoles = artifactLibrary.getPermissions().filter((perm) => perm.capability === 'update').map((perm) => perm.roleId);\n+            const currentRoles = xdmp.getCurrentRoles().toArray();\n+            const userCanUpdate = updateRoles.some((roleId) => currentRoles.includes(roleId));\n             typesInfo.push({\n                 type: artifactType,\n-                storageDatabases: artifactLibrary.getStorageDatabases(),\n-                collections: artifactLibrary.getCollections(),\n                 fileExtension: getArtifactFileExtension(artifactType),\n                 directory: getArtifactDirectory(artifactType),\n                 nameProperty: artifactLibrary.getNameProperty(),\n-                versionProperty: artifactLibrary.getVersionProperty()\n+                versionProperty: artifactLibrary.getVersionProperty(),\n+                userCanUpdate: userCanUpdate", "originalCommit": "9dc6263728c1ff649cb7edac241fab91f1b051de", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTcxNzA0NQ==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3603#discussion_r385717045", "bodyText": "Added the logic for userCanRead", "author": "ryanjdew", "createdAt": "2020-02-28T14:14:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTUwNDgyOQ=="}], "type": "inlineReview"}, {"oid": "d86a021d25e4cf836605137d2bf492fb8989ca36", "url": "https://github.com/marklogic/marklogic-data-hub/commit/d86a021d25e4cf836605137d2bf492fb8989ca36", "message": "DHFPROD-3922: incorporate loadData options when running ingest", "committedDate": "2020-02-28T11:27:35Z", "type": "forcePushed"}, {"oid": "e9781dff854f1ba3081acc5fbc669d2aa0ac7304", "url": "https://github.com/marklogic/marklogic-data-hub/commit/e9781dff854f1ba3081acc5fbc669d2aa0ac7304", "message": "DHFPROD-3922: incorporate loadData options when running ingest", "committedDate": "2020-02-28T14:11:26Z", "type": "forcePushed"}, {"oid": "a7f69624197ff403fea460342153f0be2d67bb59", "url": "https://github.com/marklogic/marklogic-data-hub/commit/a7f69624197ff403fea460342153f0be2d67bb59", "message": "DHFPROD-3922: incorporate loadData options when running ingest", "committedDate": "2020-02-28T19:19:22Z", "type": "forcePushed"}, {"oid": "0ac799fe92d5472d755f04a066bc02e55c68fc23", "url": "https://github.com/marklogic/marklogic-data-hub/commit/0ac799fe92d5472d755f04a066bc02e55c68fc23", "message": "DHFPROD-3922: incorporate loadData options when running ingest", "committedDate": "2020-02-29T01:40:19Z", "type": "commit"}, {"oid": "0ac799fe92d5472d755f04a066bc02e55c68fc23", "url": "https://github.com/marklogic/marklogic-data-hub/commit/0ac799fe92d5472d755f04a066bc02e55c68fc23", "message": "DHFPROD-3922: incorporate loadData options when running ingest", "committedDate": "2020-02-29T01:40:19Z", "type": "forcePushed"}]}