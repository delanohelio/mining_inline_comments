{"pr_number": 3831, "pr_title": "DHFPROD-4167: Add Entity Type", "pr_createdAt": "2020-04-16T23:19:18Z", "pr_url": "https://github.com/marklogic/marklogic-data-hub/pull/3831", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTU1ODY0NA==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3831#discussion_r411558644", "bodyText": "I would like us to avoid writing integration/e2e tests for scenarios that can be covered using RTL. Form validations and table rendering test below can be verified using RTL as unit tests.", "author": "bsrikan", "createdAt": "2020-04-20T17:27:25Z", "path": "marklogic-data-hub-central/ui/e2e/cypress/integration/scenarios.modeling.tsx", "diffHunk": "@@ -0,0 +1,72 @@\n+/// <reference types=\"cypress\"/>\n+\n+import HomePage from \"../support/pages/home\";\n+import ModelingPage from '../support/pages/modeling';\n+\n+const homePage = new HomePage();\n+const modelingPage = new ModelingPage();\n+\n+describe('Entity Modeling Page', () => {\n+\n+  //login with valid account\n+  beforeEach(() => {\n+    cy.visit('/');\n+    cy.contains('MarkLogic Data Hub');\n+    cy.fixture('users').then(user => {\n+      cy.login(user.username, user.password);\n+    })\n+    cy.wait(500);\n+    homePage.getModeling().click();\n+  });\n+\n+  it('can add an entity type', () => {\n+    modelingPage.addEntityType();\n+    modelingPage.newEntityName('New-Model');\n+    modelingPage.newEntityDescription('Description for New-Model');\n+    modelingPage.submitNewEntityForm();\n+    cy.wait(2000);\n+    modelingPage.getEntity('New-Model').should('exist');\n+  });\n+\n+  it('add entity input with invalid name', () => {", "originalCommit": "56d54d43b6d87c09531ab4658da6180f1bb6f71c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjMwODUxNA==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3831#discussion_r412308514", "bodyText": "I agree with this, I removed the integration test scenarios for now.", "author": "brucean52", "createdAt": "2020-04-21T16:31:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTU1ODY0NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTU2MDUwMQ==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3831#discussion_r411560501", "bodyText": "I would also like us to avoid using data-testid heavily and use it as a last resort. We can instead use getByTitle, getByLabelText, getByPlaceholderText etc wherever possible.", "author": "bsrikan", "createdAt": "2020-04-20T17:30:10Z", "path": "marklogic-data-hub-central/ui/src/components/modeling/entity-type-modal/entity-type-modal.tsx", "diffHunk": "@@ -0,0 +1,128 @@\n+import React, { useState, useEffect, useContext } from 'react';\n+import { Modal, Form, Input, Tooltip } from 'antd';\n+import { faQuestionCircle } from \"@fortawesome/free-solid-svg-icons\";\n+import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n+import styles from './entity-type-modal.module.scss'\n+\n+import { UserContext } from '../../../util/user-context';\n+import { createModel } from '../../../api/modeling';\n+import { ModelingTooltips } from '../../../config/tooltips.config';\n+\n+type Props = {\n+  isVisible: boolean;\n+  toggleModal: (isVisible: boolean) => void;\n+  newEntityAdded: () => void;\n+};\n+\n+const EntityTypeModal: React.FC<Props> = (props) => {\n+  const { handleError, resetSessionTime } = useContext(UserContext);\n+  // Must start with a letter & only letters, numbers, hyphens, and underscores are allowed\n+  const NAME_REGEX = new RegExp('^[A-Za-z][A-Za-z0-9_-]*$');\n+  const formItemLayout = {\n+    labelCol: { span: 4},\n+    wrapperCol: { span: 18 },\n+  };\n+\n+  const [name, setName] = useState('');\n+  const [isNameValid, toggleIsNameValid] = useState(true);\n+  const [description, setDescription] = useState('');\n+\n+  useEffect(() => {\n+    if (props.isVisible){\n+      setName('')\n+      setDescription('')\n+    }\n+  }, [props.isVisible]);\n+\n+  const handleChange = (event) => {\n+    if (event.target.id === 'name') {\n+      setName(event.target.value);\n+    }\n+    if (event.target.id === 'description') {\n+      setDescription(event.target.value);\n+    }\n+  }\n+\n+  const onOk = (event) => {\n+    event.preventDefault();\n+    if (NAME_REGEX.test(name)) {\n+      toggleIsNameValid(true);\n+      createEntityType(name, description);\n+    } else {\n+      toggleIsNameValid(false);\n+    }\n+  };\n+\n+  const createEntityType = async (entityName: string, description: string) => {\n+    try {\n+      const response = await createModel(entityName, description);\n+      if (response['data']) {\n+        props.newEntityAdded();\n+      }\n+    } catch (error) {\n+      handleError(error);\n+    } finally {\n+      resetSessionTime();\n+    }\n+  }\n+\n+  const onCancel = () => {\n+    props.toggleModal(false)\n+  };\n+\n+  return (\n+    <Modal\n+      visible={props.isVisible} \n+      closable={true}\n+      title={\"Add Entity Type\"} \n+      cancelText=\"Cancel\"\n+      onCancel={() => onCancel()} \n+      okText=\"Add\"\n+      onOk={onOk}\n+      okButtonProps={{form:'entity-type-form', htmlType: 'submit'}}\n+      maskClosable={false}\n+      data-testid=\"entity-type-modal\"", "originalCommit": "56d54d43b6d87c09531ab4658da6180f1bb6f71c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjMwOTk5MQ==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3831#discussion_r412309991", "bodyText": "I tried getByLabelText, but it didn't work with the Ant Design form. There is no placeholder for these inputs.", "author": "brucean52", "createdAt": "2020-04-21T16:33:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTU2MDUwMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTU2MTE5Ng==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3831#discussion_r411561196", "bodyText": "can replace with placeholderText similar to other input/select fields in the app.", "author": "bsrikan", "createdAt": "2020-04-20T17:31:18Z", "path": "marklogic-data-hub-central/ui/src/components/modeling/entity-type-modal/entity-type-modal.tsx", "diffHunk": "@@ -0,0 +1,128 @@\n+import React, { useState, useEffect, useContext } from 'react';\n+import { Modal, Form, Input, Tooltip } from 'antd';\n+import { faQuestionCircle } from \"@fortawesome/free-solid-svg-icons\";\n+import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n+import styles from './entity-type-modal.module.scss'\n+\n+import { UserContext } from '../../../util/user-context';\n+import { createModel } from '../../../api/modeling';\n+import { ModelingTooltips } from '../../../config/tooltips.config';\n+\n+type Props = {\n+  isVisible: boolean;\n+  toggleModal: (isVisible: boolean) => void;\n+  newEntityAdded: () => void;\n+};\n+\n+const EntityTypeModal: React.FC<Props> = (props) => {\n+  const { handleError, resetSessionTime } = useContext(UserContext);\n+  // Must start with a letter & only letters, numbers, hyphens, and underscores are allowed\n+  const NAME_REGEX = new RegExp('^[A-Za-z][A-Za-z0-9_-]*$');\n+  const formItemLayout = {\n+    labelCol: { span: 4},\n+    wrapperCol: { span: 18 },\n+  };\n+\n+  const [name, setName] = useState('');\n+  const [isNameValid, toggleIsNameValid] = useState(true);\n+  const [description, setDescription] = useState('');\n+\n+  useEffect(() => {\n+    if (props.isVisible){\n+      setName('')\n+      setDescription('')\n+    }\n+  }, [props.isVisible]);\n+\n+  const handleChange = (event) => {\n+    if (event.target.id === 'name') {\n+      setName(event.target.value);\n+    }\n+    if (event.target.id === 'description') {\n+      setDescription(event.target.value);\n+    }\n+  }\n+\n+  const onOk = (event) => {\n+    event.preventDefault();\n+    if (NAME_REGEX.test(name)) {\n+      toggleIsNameValid(true);\n+      createEntityType(name, description);\n+    } else {\n+      toggleIsNameValid(false);\n+    }\n+  };\n+\n+  const createEntityType = async (entityName: string, description: string) => {\n+    try {\n+      const response = await createModel(entityName, description);\n+      if (response['data']) {\n+        props.newEntityAdded();\n+      }\n+    } catch (error) {\n+      handleError(error);\n+    } finally {\n+      resetSessionTime();\n+    }\n+  }\n+\n+  const onCancel = () => {\n+    props.toggleModal(false)\n+  };\n+\n+  return (\n+    <Modal\n+      visible={props.isVisible} \n+      closable={true}\n+      title={\"Add Entity Type\"} \n+      cancelText=\"Cancel\"\n+      onCancel={() => onCancel()} \n+      okText=\"Add\"\n+      onOk={onOk}\n+      okButtonProps={{form:'entity-type-form', htmlType: 'submit'}}\n+      maskClosable={false}\n+      data-testid=\"entity-type-modal\"\n+    >\n+      <Form {...formItemLayout}\n+        id='entity-type-form'\n+        onSubmit={onOk} \n+      >\n+        <Form.Item \n+          label='Name'\n+          required\n+          hasFeedback\n+          validateStatus={isNameValid ? '' : 'error'}\n+          help={isNameValid ? '' : ModelingTooltips.addEntityName}\n+        >\n+          <Input\n+            id=\"name\"\n+            data-testid=\"name\"", "originalCommit": "56d54d43b6d87c09531ab4658da6180f1bb6f71c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTU2MTQ5NQ==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3831#discussion_r411561495", "bodyText": "Same as before. Can replace with placeholderText", "author": "bsrikan", "createdAt": "2020-04-20T17:31:46Z", "path": "marklogic-data-hub-central/ui/src/components/modeling/entity-type-modal/entity-type-modal.tsx", "diffHunk": "@@ -0,0 +1,128 @@\n+import React, { useState, useEffect, useContext } from 'react';\n+import { Modal, Form, Input, Tooltip } from 'antd';\n+import { faQuestionCircle } from \"@fortawesome/free-solid-svg-icons\";\n+import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n+import styles from './entity-type-modal.module.scss'\n+\n+import { UserContext } from '../../../util/user-context';\n+import { createModel } from '../../../api/modeling';\n+import { ModelingTooltips } from '../../../config/tooltips.config';\n+\n+type Props = {\n+  isVisible: boolean;\n+  toggleModal: (isVisible: boolean) => void;\n+  newEntityAdded: () => void;\n+};\n+\n+const EntityTypeModal: React.FC<Props> = (props) => {\n+  const { handleError, resetSessionTime } = useContext(UserContext);\n+  // Must start with a letter & only letters, numbers, hyphens, and underscores are allowed\n+  const NAME_REGEX = new RegExp('^[A-Za-z][A-Za-z0-9_-]*$');\n+  const formItemLayout = {\n+    labelCol: { span: 4},\n+    wrapperCol: { span: 18 },\n+  };\n+\n+  const [name, setName] = useState('');\n+  const [isNameValid, toggleIsNameValid] = useState(true);\n+  const [description, setDescription] = useState('');\n+\n+  useEffect(() => {\n+    if (props.isVisible){\n+      setName('')\n+      setDescription('')\n+    }\n+  }, [props.isVisible]);\n+\n+  const handleChange = (event) => {\n+    if (event.target.id === 'name') {\n+      setName(event.target.value);\n+    }\n+    if (event.target.id === 'description') {\n+      setDescription(event.target.value);\n+    }\n+  }\n+\n+  const onOk = (event) => {\n+    event.preventDefault();\n+    if (NAME_REGEX.test(name)) {\n+      toggleIsNameValid(true);\n+      createEntityType(name, description);\n+    } else {\n+      toggleIsNameValid(false);\n+    }\n+  };\n+\n+  const createEntityType = async (entityName: string, description: string) => {\n+    try {\n+      const response = await createModel(entityName, description);\n+      if (response['data']) {\n+        props.newEntityAdded();\n+      }\n+    } catch (error) {\n+      handleError(error);\n+    } finally {\n+      resetSessionTime();\n+    }\n+  }\n+\n+  const onCancel = () => {\n+    props.toggleModal(false)\n+  };\n+\n+  return (\n+    <Modal\n+      visible={props.isVisible} \n+      closable={true}\n+      title={\"Add Entity Type\"} \n+      cancelText=\"Cancel\"\n+      onCancel={() => onCancel()} \n+      okText=\"Add\"\n+      onOk={onOk}\n+      okButtonProps={{form:'entity-type-form', htmlType: 'submit'}}\n+      maskClosable={false}\n+      data-testid=\"entity-type-modal\"\n+    >\n+      <Form {...formItemLayout}\n+        id='entity-type-form'\n+        onSubmit={onOk} \n+      >\n+        <Form.Item \n+          label='Name'\n+          required\n+          hasFeedback\n+          validateStatus={isNameValid ? '' : 'error'}\n+          help={isNameValid ? '' : ModelingTooltips.addEntityName}\n+        >\n+          <Input\n+            id=\"name\"\n+            data-testid=\"name\"\n+            className={styles.input}\n+            value={name}\n+            onChange={handleChange}\n+            onBlur={handleChange}\n+          />\n+          <Tooltip title={ModelingTooltips.addEntityName}>\n+            <FontAwesomeIcon className={styles.icon}  icon={faQuestionCircle} />\n+          </Tooltip> \n+        </Form.Item>\n+\n+        <Form.Item label=\"Description\">\n+          <Input\n+            id=\"description\"\n+            data-testid=\"description\"", "originalCommit": "56d54d43b6d87c09531ab4658da6180f1bb6f71c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTU2MzE3OQ==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3831#discussion_r411563179", "bodyText": "Is \"Add\" button disabled in the absence of required field? Can add asserttion for that.\nCan add a test to verify form error to test Name is a required field.\nWill be good to include tests to update description(and edit entity) here, unless there is a separate story for that.", "author": "bsrikan", "createdAt": "2020-04-20T17:34:27Z", "path": "marklogic-data-hub-central/ui/src/components/modeling/entity-type-modal/entity-type-modal.test.tsx", "diffHunk": "@@ -0,0 +1,69 @@\n+import React from 'react';\n+import { render } from '@testing-library/react';\n+import userEvent from \"@testing-library/user-event\";\n+import EntityTypeModal from './entity-type-modal';\n+\n+describe('EntityTypeModal Component', () => {", "originalCommit": "56d54d43b6d87c09531ab4658da6180f1bb6f71c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjMxMTgzNQ==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3831#discussion_r412311835", "bodyText": "I've added disabling of the \"Add\" button and updated the tests. There is a separate story for editing", "author": "brucean52", "createdAt": "2020-04-21T16:35:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTU2MzE3OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTU2NzAxNA==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3831#discussion_r411567014", "bodyText": "We can get rid of corresponding cypress integration test since we have this unit test in place, to reduce duplication and run time.", "author": "bsrikan", "createdAt": "2020-04-20T17:40:21Z", "path": "marklogic-data-hub-central/ui/src/components/modeling/entity-type-table/entity-type-table.test.tsx", "diffHunk": "@@ -0,0 +1,43 @@\n+import React from 'react';\n+import { BrowserRouter as Router } from 'react-router-dom';\n+import { render } from '@testing-library/react';\n+import userEvent from \"@testing-library/user-event\";\n+import EntityTypeTable from './entity-type-table';\n+\n+import { getEntityTypes } from '../../../assets/mock-data/modeling';\n+\n+describe('EntityTypeModal Component', () => {\n+  test('Table renders with empty array prop', () => {\n+    const { getByText } =  render(\n+      <Router>\n+        <EntityTypeTable \n+          allEntityTypesData={[]}\n+        />\n+      </Router>);\n+\n+    expect(getByText(/No Data/i)).toBeInTheDocument();\n+  });\n+\n+    test('Table renders with mock data', () => {", "originalCommit": "56d54d43b6d87c09531ab4658da6180f1bb6f71c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTYyNTExOQ==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3831#discussion_r411625119", "bodyText": "We also shouldnt login via GUI for every test. Lets use cy.request('POST', '/login', {\nusername,\npassword\n}) instead to build up state without using browser\u2019s UI", "author": "bsrikan", "createdAt": "2020-04-20T19:13:25Z", "path": "marklogic-data-hub-central/ui/e2e/cypress/integration/scenarios.modeling.tsx", "diffHunk": "@@ -0,0 +1,72 @@\n+/// <reference types=\"cypress\"/>\n+\n+import HomePage from \"../support/pages/home\";\n+import ModelingPage from '../support/pages/modeling';\n+\n+const homePage = new HomePage();\n+const modelingPage = new ModelingPage();\n+\n+describe('Entity Modeling Page', () => {\n+\n+  //login with valid account\n+  beforeEach(() => {", "originalCommit": "56d54d43b6d87c09531ab4658da6180f1bb6f71c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "f5d7ab74582293710722e12c6531a95c53dfda3b", "url": "https://github.com/marklogic/marklogic-data-hub/commit/f5d7ab74582293710722e12c6531a95c53dfda3b", "message": "DHFPROD-4167: Add Entity Type\n\nDHFPROD-4167: removed integration tests, disabled add button on entity type add modal", "committedDate": "2020-04-21T16:24:29Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzk4MTYwOQ==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3831#discussion_r413981609", "bodyText": "Test is missing assertion for invalid entry.", "author": "bsrikan", "createdAt": "2020-04-23T17:21:07Z", "path": "marklogic-data-hub-central/ui/src/components/modeling/entity-type-modal/entity-type-modal.test.tsx", "diffHunk": "@@ -0,0 +1,68 @@\n+import React from 'react';\n+import { render } from '@testing-library/react';\n+import userEvent from \"@testing-library/user-event\";\n+import EntityTypeModal from './entity-type-modal';\n+\n+describe('EntityTypeModal Component', () => {\n+  test('Modal is not visible', () => {\n+    const { queryByTestId } =  render(\n+    <EntityTypeModal \n+      isVisible={false} \n+      toggleModal={jest.fn()}\n+      newEntityAdded={jest.fn()}\n+    />);\n+\n+    expect(queryByTestId('entity-type-modal')).toBeNull();\n+  });\n+\n+  test('Valid Entity name is used', async () => {\n+    const { getByTestId, getByText } =  render(\n+      <EntityTypeModal \n+        isVisible={true} \n+        toggleModal={jest.fn()}\n+        newEntityAdded={jest.fn()}\n+      />);\n+    expect(getByText(/Add Entity Type/i)).toBeInTheDocument();\n+\n+    await userEvent.type(getByTestId('name'), 'AnotherModel');\n+    expect(getByTestId('name')).toHaveAttribute('value', 'AnotherModel');\n+\n+    await userEvent.type(getByTestId('description'), 'Testing');\n+    expect(getByTestId('description')).toHaveAttribute('value', 'Testing');\n+\n+    userEvent.click(getByText('Add'));\n+  });\n+\n+  test('Invalid Entity name shows error', async () => {", "originalCommit": "f5d7ab74582293710722e12c6531a95c53dfda3b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDEyNTM2MA==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3831#discussion_r414125360", "bodyText": "I've updated the test and design to disable the button if the name isn't valid. I've added an additional test that mocks 400 error response for duplicate entity names", "author": "brucean52", "createdAt": "2020-04-23T21:08:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzk4MTYwOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzk4NjkwMg==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3831#discussion_r413986902", "bodyText": "This is about data-testid again. We seem to be using \"Add Entity Type\" text for assertion elsewhere. Since that works we can probably get rid of this data-testid? I will leave it up to you @brucean52.", "author": "bsrikan", "createdAt": "2020-04-23T17:28:35Z", "path": "marklogic-data-hub-central/ui/src/components/modeling/entity-type-modal/entity-type-modal.test.tsx", "diffHunk": "@@ -0,0 +1,68 @@\n+import React from 'react';\n+import { render } from '@testing-library/react';\n+import userEvent from \"@testing-library/user-event\";\n+import EntityTypeModal from './entity-type-modal';\n+\n+describe('EntityTypeModal Component', () => {\n+  test('Modal is not visible', () => {\n+    const { queryByTestId } =  render(\n+    <EntityTypeModal \n+      isVisible={false} \n+      toggleModal={jest.fn()}\n+      newEntityAdded={jest.fn()}\n+    />);\n+\n+    expect(queryByTestId('entity-type-modal')).toBeNull();", "originalCommit": "f5d7ab74582293710722e12c6531a95c53dfda3b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDEyNTk1Nw==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3831#discussion_r414125957", "bodyText": "I've removed this testid and I'm doing queryByText for Null checks", "author": "brucean52", "createdAt": "2020-04-23T21:09:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzk4NjkwMg=="}], "type": "inlineReview"}, {"oid": "a3b1feb58f4b781829a3ffeb13e06e22be0c8fbc", "url": "https://github.com/marklogic/marklogic-data-hub/commit/a3b1feb58f4b781829a3ffeb13e06e22be0c8fbc", "message": "DHFPROD-4167: Add Entity Type\n\nDHFPROD-4167: removed integration tests, disabled add button on entity type add modal\n\nadded error response and unit tests for add entity", "committedDate": "2020-04-23T21:05:51Z", "type": "forcePushed"}, {"oid": "8ff855335c30c3ce4505943a075ca6728a6225e8", "url": "https://github.com/marklogic/marklogic-data-hub/commit/8ff855335c30c3ce4505943a075ca6728a6225e8", "message": "DHFPROD-4167: Add Entity Type\n\nDHFPROD-4167: removed integration tests, disabled add button on entity type add modal\n\nadded error response and unit tests for add entity", "committedDate": "2020-04-28T16:09:51Z", "type": "commit"}, {"oid": "8ff855335c30c3ce4505943a075ca6728a6225e8", "url": "https://github.com/marklogic/marklogic-data-hub/commit/8ff855335c30c3ce4505943a075ca6728a6225e8", "message": "DHFPROD-4167: Add Entity Type\n\nDHFPROD-4167: removed integration tests, disabled add button on entity type add modal\n\nadded error response and unit tests for add entity", "committedDate": "2020-04-28T16:09:51Z", "type": "forcePushed"}]}