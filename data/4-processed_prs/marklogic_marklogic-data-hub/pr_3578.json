{"pr_number": 3578, "pr_title": "DHFPROD-3922: Move in flow run logic", "pr_createdAt": "2020-02-12T22:29:40Z", "pr_url": "https://github.com/marklogic/marklogic-data-hub/pull/3578", "timeline": [{"oid": "5451143626734b766150b70c70ed28d35bd65cd3", "url": "https://github.com/marklogic/marklogic-data-hub/commit/5451143626734b766150b70c70ed28d35bd65cd3", "message": "DHFPROD-3922: Move in flow run logic", "committedDate": "2020-02-12T22:23:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU4NTc1Mg==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3578#discussion_r378585752", "bodyText": "No action on this, but I'm realizing we have some naming inconsistency with Data Services, as the interface generated for DS is naturally going to be called a \"Service\". And then I was thinking that a Manager would be a layer on top that provides additional Java-based logic on top of one or more Services. But that conflicts with this usage of Service here, since it's the Service on top with Manager and other components (e.g. FlowRunner) below it.\nThat said, I'm not sure how to resolve this. My initial thought is that perhaps the logic in here should move into FlowManager and FlowRunner. But again, no action needed for now, we can move this furniture around later.", "author": "rjrudin", "createdAt": "2020-02-13T00:14:27Z", "path": "one-ui/src/main/java/com/marklogic/hub/curation/services/FlowManagerService.java", "diffHunk": "@@ -23,14 +25,21 @@\n import javax.ws.rs.NotFoundException;\n import java.io.IOException;\n import java.io.InputStream;\n-import java.util.*;\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n \n @Service\n public class FlowManagerService {", "originalCommit": "5451143626734b766150b70c70ed28d35bd65cd3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU4NjE3NA==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3578#discussion_r378586174", "bodyText": "This is interesting, as I was thinking we should define a JSON Schema for objects like this that are returned by key classes. Do you know if stepResponse is expected to be defined? That has some pretty key information in it.\nI think it's fine to leave this here, just makes me wonder what's a good way to define this stuff in one place.", "author": "rjrudin", "createdAt": "2020-02-13T00:15:58Z", "path": "one-ui/ui/api/swagger/mocks.yaml", "diffHunk": "@@ -2275,6 +2275,39 @@ definitions:\n                 - '{}'\n                 - '{}'\n             version: 0\n+    runFlowResponse:", "originalCommit": "5451143626734b766150b70c70ed28d35bd65cd3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTAzMzg2NQ==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/3578#discussion_r379033865", "bodyText": "It can be derived by the code. It is a little different than other definitions in that the property names are dynamic based on what steps are run and if they provide a response. I'm not sure if and/or how properties like that are defined in swagger yet. Perhaps I just start by adding properties \"1\" and \"2\" while noting that they are dynamic based on the steps run?", "author": "ryanjdew", "createdAt": "2020-02-13T18:16:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU4NjE3NA=="}], "type": "inlineReview"}]}