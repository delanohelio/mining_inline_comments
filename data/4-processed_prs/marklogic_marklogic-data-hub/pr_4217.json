{"pr_number": 4217, "pr_title": "DHFPROD-4400:Step run notification in the run tile", "pr_createdAt": "2020-07-15T08:37:16Z", "pr_url": "https://github.com/marklogic/marklogic-data-hub/pull/4217", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA0MzM1OA==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4217#discussion_r455043358", "bodyText": "Pinging @ryanjdew and @fsnow  about this - having to do a query on every iteration of a loop (and this is a nested loop) is often a recipe for slow performance in production. Now, in theory, the query shouldn't happen that often - it would seem rare for a user to have more than a dozen flows, and for each of those flows to average a dozen or more steps. So if we're running this query 10 to 20 times on each call, it shouldn't add that much overhead.\nBut, perhaps the performance is slightly worse because we're hitting a separate database. And we're also getting this job data every single time we get flows for the UI.\nI think before we go forward, we need to review the requirement to verify that it's worth doing this. The \"when\" in the scenario isn't valid - \"When I look at the step in the Run tile\" - that's not an event that the computer knows about. The way this implemented, it's assuming a \"when\" of \"When I click on the Run tile\" (or do something that causes the Run tile to be displayed). And is it true that we want job data every time this \"when\" happens? I don't know.\n@srinathgit  Can you organize a quick call with myself and Ryan and Justin to determine what the \"when\" should really be here? (No need to involve fsnow, just wanted to start getting him exposed to some backend code reviews)", "author": "rjrudin", "createdAt": "2020-07-15T13:17:54Z", "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/data-services/flow/getFlowsWithStepDetails.sjs", "diffHunk": "@@ -71,6 +72,27 @@ flows.map(flow => {\n       stepDetails.stepName = step.name;\n       stepDetails.stepDefinitionType = step.stepDefinitionType;\n       stepDetails.sourceFormat = step.sourceFormat;\n+\n+      const jobQueries = [];\n+      jobQueries.push(cts.collectionQuery('Job'));\n+      jobQueries.push(cts.jsonPropertyValueQuery(\"flow\",flow.name));\n+      jobQueries.push(cts.jsonPropertyValueQuery(\"stepName\",step.name));\n+\n+      let latestJob = fn.head(datahub.hubUtils.queryLatest(function() {", "originalCommit": "ad13541f050f75d52bfc87664b245c3b3ca0d143", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTIyNDk1Mw==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4217#discussion_r455224953", "bodyText": "@srinathgit @rjrudin This one is difficult to reduce to one cts search given we need to get the latest job for each step.\nHowever, reducing this to a single queryLatest call which will reduce the number of invokes to another database should be doable. That would mean iterating over the steps twice. Once to get the job info in the queryLatest call and a second time for the additional step details and incorporating the job info. Despite the additional looping, the performance would be better in most scenarios taking that direction.", "author": "ryanjdew", "createdAt": "2020-07-15T17:37:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA0MzM1OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTIyODI0OQ==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4217#discussion_r455228249", "bodyText": "We'd still have N queries against the jobs database, right? Where N = the number of steps across all the flows?\nThe overhead of the eval should be much less than N queries. We'll use the meeting today to figure out if the requirements justify N queries - that's just been a common performance issue for me in the field - but it may be mitigated enough by the rarity of there being hundreds of steps in a DHF project.", "author": "rjrudin", "createdAt": "2020-07-15T17:42:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA0MzM1OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA0NTYyNQ==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4217#discussion_r455045625", "bodyText": "Please build this into the test plumbing itself - the concept of loading static job documents for a test will likely be useful for many other unit tests. The code should go into data-hub-test-helper.xqy - make a \"load-jobs\" function that loads anything under the \"jobs\" folder (similar to \"content\", but written to the jobs data). Then this test doesn't need to do anything other than stick those two job documents under \"jobs\".\nTo account for \"batch\" documents at some point, it may be worth supporting \"test-data/job-data/jobs\" and \"test-data/job-data/batches\".", "author": "rjrudin", "createdAt": "2020-07-15T13:20:52Z", "path": "marklogic-data-hub/src/test/ml-modules/root/test/suites/data-hub/5/data-services/flow/setup.xqy", "diffHunk": "@@ -5,4 +5,23 @@ hub-test:reset-hub();\n xquery version \"1.0-ml\";\n import module namespace hub-test = \"http://marklogic.com/data-hub/test\" at \"/test/data-hub-test-helper.xqy\";\n import module namespace test = \"http://marklogic.com/test\" at \"/test/test-helper.xqy\";\n-hub-test:load-artifacts($test:__CALLER_FILE__)\n+hub-test:load-artifacts($test:__CALLER_FILE__);\n+\n+xquery version \"1.0-ml\";\n+\n+import module namespace test = \"http://marklogic.com/test\" at \"/test/test-helper.xqy\";\n+\n+xdmp:invoke-function(function() {", "originalCommit": "ad13541f050f75d52bfc87664b245c3b3ca0d143", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjIwMjM3NQ==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4217#discussion_r456202375", "bodyText": "I have made changes so that job and batch docs will be written to jobs db if they are added to test-data/jobs, test-data/batches respectively", "author": "srinathgit", "createdAt": "2020-07-17T03:46:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA0NTYyNQ=="}], "type": "inlineReview"}, {"oid": "15035bdea0cc2f7ea6596dca17e7d6c0a35ca100", "url": "https://github.com/marklogic/marklogic-data-hub/commit/15035bdea0cc2f7ea6596dca17e7d6c0a35ca100", "message": "DHFPROD-4400:Step run notification in the run tile", "committedDate": "2020-07-17T03:43:18Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjM4OTQ2NQ==", "url": "https://github.com/marklogic/marklogic-data-hub/pull/4217#discussion_r456389465", "bodyText": "I think you can get rid of a chunk of this code by moving the code in getFlowWithStepDetails.sjs into a library, which can go into the same folder as this endpoint - e.g. flow-lib.sjs (I think the impl/flow.sjs that has all the code for running a step should really be called something else besides \"flow.sjs\" at some point, but that's a separate matter).\nYou can have a function of \"getFlowsWithStepDetails(flowName)\", where flowName is an optional parameter. If it exists, you call getArtifact, else getArtifacts. Then the same code can be used for constructing the flow with all the steps. And then in this endpoint, you take the result and add the job data for the single flow.\nThat'll cut down on the duplication, and I think it'll be good to start a pattern of having a library in a DS folder for reusable code. That library could always move to a non-DS-specific location in the future, but I think the DS folder is a fine home for it for now.", "author": "rjrudin", "createdAt": "2020-07-17T11:41:33Z", "path": "marklogic-data-hub/src/main/resources/ml-modules/root/data-hub/5/data-services/flow/getFlowWithLatestJobInfo.sjs", "diffHunk": "@@ -0,0 +1,64 @@\n+'use strict';\n+\n+/**\n+ Copyright (c) 2020 MarkLogic Corporation\n+\n+ Licensed under the Apache License, Version 2.0 (the \"License\");\n+ you may not use this file except in compliance with the License.\n+ You may obtain a copy of the License at\n+\n+ http://www.apache.org/licenses/LICENSE-2.0\n+\n+ Unless required by applicable law or agreed to in writing, software\n+ distributed under the License is distributed on an \"AS IS\" BASIS,\n+ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ See the License for the specific language governing permissions and\n+ limitations under the License.\n+ */\n+'use strict';\n+const DataHubSingleton = require(\"/data-hub/5/datahub-singleton.sjs\");\n+const datahub = DataHubSingleton.instance();\n+const Artifacts = require('/data-hub/5/artifacts/core.sjs');\n+\n+var name;\n+\n+const flow = Artifacts.getArtifact(\"flow\", name);", "originalCommit": "15035bdea0cc2f7ea6596dca17e7d6c0a35ca100", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "aa2904b2dc24110178c393d25947ccb1a2f97073", "url": "https://github.com/marklogic/marklogic-data-hub/commit/aa2904b2dc24110178c393d25947ccb1a2f97073", "message": "DHFPROD-4400:Step run notification in the run tile", "committedDate": "2020-07-17T23:56:27Z", "type": "commit"}, {"oid": "aa2904b2dc24110178c393d25947ccb1a2f97073", "url": "https://github.com/marklogic/marklogic-data-hub/commit/aa2904b2dc24110178c393d25947ccb1a2f97073", "message": "DHFPROD-4400:Step run notification in the run tile", "committedDate": "2020-07-17T23:56:27Z", "type": "forcePushed"}]}