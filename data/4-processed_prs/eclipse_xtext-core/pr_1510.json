{"pr_number": 1510, "pr_title": "[#1509] Fix InjectionExtension for nested test classes", "pr_createdAt": "2020-05-29T11:46:30Z", "pr_url": "https://github.com/eclipse/xtext-core/pull/1510", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQzMTA1NQ==", "url": "https://github.com/eclipse/xtext-core/pull/1510#discussion_r432431055", "bodyText": "@kthoms @szarnekow this is the algorithm i proposed in the bugzilla.\nwhat do you think?", "author": "cdietrich", "createdAt": "2020-05-29T11:48:16Z", "path": "org.eclipse.xtext.testing/src/org/eclipse/xtext/testing/extensions/InjectionExtension.java", "diffHunk": "@@ -66,8 +74,23 @@ public void afterEach(ExtensionContext context) throws Exception {\n \t}\n \n \n+\tprivate static InjectWith getInjectWith(Class<?> cls) {", "originalCommit": "29e583e16efb9a5264f427022a94ca3716130b9f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ2MDg3MA==", "url": "https://github.com/eclipse/xtext-core/pull/1510#discussion_r432460870", "bodyText": "Looks good to me.", "author": "szarnekow", "createdAt": "2020-05-29T12:51:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQzMTA1NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ2MDgwNg==", "url": "https://github.com/eclipse/xtext-core/pull/1510#discussion_r432460806", "bodyText": "I'd go for org.junit.jupiter.api.extension.ExtensionConfigurationException instead.", "author": "szarnekow", "createdAt": "2020-05-29T12:50:56Z", "path": "org.eclipse.xtext.testing/src/org/eclipse/xtext/testing/extensions/InjectionExtension.java", "diffHunk": "@@ -66,8 +74,23 @@ public void afterEach(ExtensionContext context) throws Exception {\n \t}\n \n \n+\tprivate static InjectWith getInjectWith(Class<?> cls) {\n+\t\tInjectWith result = null;\n+\t\twhile (cls != null) {\n+\t\t\tInjectWith iw = cls.getAnnotation(InjectWith.class);\n+\t\t\tif (iw != null) {\n+\t\t\t\tif( result != null ) {\n+\t\t\t\t\tthrow new AssertionError(\"Mulitple annotations @InjectWith are found (outer/inner class). Only a single one is supported.\");", "originalCommit": "29e583e16efb9a5264f427022a94ca3716130b9f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ5ODM3MQ==", "url": "https://github.com/eclipse/xtext-core/pull/1510#discussion_r432498371", "bodyText": "done", "author": "frankbenoit", "createdAt": "2020-05-29T13:54:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ2MDgwNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjUwODc5MA==", "url": "https://github.com/eclipse/xtext-core/pull/1510#discussion_r432508790", "bodyText": "Cosmetics: unnecessary blank line.", "author": "szarnekow", "createdAt": "2020-05-29T14:11:48Z", "path": "org.eclipse.xtext.testing/src/org/eclipse/xtext/testing/extensions/InjectionExtension.java", "diffHunk": "@@ -51,11 +53,18 @@ public void beforeEach(ExtensionContext context) throws Exception {\n \t\t}\n \t\tif (injectorProvider != null) {\n \t\t\tInjector injector = injectorProvider.getInjector();\n-\t\t\tif (injector != null)\n-\t\t\t\tinjector.injectMembers(context.getRequiredTestInstance());\n+\t\t\tif (injector != null) {\n+\t\t\t\tObject testInstance = context.getRequiredTestInstance();\n+\t\t\t\tTestInstances requiredTestInstances = context.getRequiredTestInstances();\n+\t\t\t\tinjector.injectMembers(testInstance);\n+\t\t\t\tfor (Object o : requiredTestInstances.getEnclosingInstances()) {\n+\t\t\t\t\tinjector.injectMembers(o);\n+\t\t\t\t\t", "originalCommit": "34dd4b74fc13a86d6c89a89be5e16d20539dca69", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjUyMTAzNQ==", "url": "https://github.com/eclipse/xtext-core/pull/1510#discussion_r432521035", "bodyText": "done", "author": "frankbenoit", "createdAt": "2020-05-29T14:25:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjUwODc5MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjUwOTI0Nw==", "url": "https://github.com/eclipse/xtext-core/pull/1510#discussion_r432509247", "bodyText": "Please add a small note about the injection into @Nested objects to the JavaDoc", "author": "szarnekow", "createdAt": "2020-05-29T14:12:28Z", "path": "org.eclipse.xtext.testing/src/org/eclipse/xtext/testing/extensions/InjectionExtension.java", "diffHunk": "@@ -15,7 +15,9 @@\n import org.eclipse.xtext.testing.InjectWith;\n import org.junit.jupiter.api.extension.AfterEachCallback;\n import org.junit.jupiter.api.extension.BeforeEachCallback;\n+import org.junit.jupiter.api.extension.ExtensionConfigurationException;\n import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.junit.jupiter.api.extension.TestInstances;\n \n import com.google.common.collect.ClassToInstanceMap;\n import com.google.common.collect.MutableClassToInstanceMap;", "originalCommit": "34dd4b74fc13a86d6c89a89be5e16d20539dca69", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjUxODczNQ==", "url": "https://github.com/eclipse/xtext-core/pull/1510#discussion_r432518735", "bodyText": "done", "author": "frankbenoit", "createdAt": "2020-05-29T14:23:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjUwOTI0Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjUwOTY3NA==", "url": "https://github.com/eclipse/xtext-core/pull/1510#discussion_r432509674", "bodyText": "Cosmetics: Spacing looks inconsistent.", "author": "szarnekow", "createdAt": "2020-05-29T14:13:00Z", "path": "org.eclipse.xtext.testing/src/org/eclipse/xtext/testing/extensions/InjectionExtension.java", "diffHunk": "@@ -66,8 +75,26 @@ public void afterEach(ExtensionContext context) throws Exception {\n \t}\n \n \n+\tprivate static InjectWith getInjectWith(Class<?> cls) {\n+\t\tInjectWith result = null;\n+\t\tClass<?> firstClassMatched = null;\n+\t\twhile (cls != null) {\n+\t\t\tInjectWith iw = cls.getAnnotation(InjectWith.class);\n+\t\t\tif (iw != null) {\n+\t\t\t\tif( result != null ) {", "originalCommit": "34dd4b74fc13a86d6c89a89be5e16d20539dca69", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjUxODgyNA==", "url": "https://github.com/eclipse/xtext-core/pull/1510#discussion_r432518824", "bodyText": "done", "author": "frankbenoit", "createdAt": "2020-05-29T14:23:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjUwOTY3NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjUxMDI3NA==", "url": "https://github.com/eclipse/xtext-core/pull/1510#discussion_r432510274", "bodyText": "Typo in exception message: 'Mulitple'", "author": "szarnekow", "createdAt": "2020-05-29T14:13:53Z", "path": "org.eclipse.xtext.testing/src/org/eclipse/xtext/testing/extensions/InjectionExtension.java", "diffHunk": "@@ -66,8 +75,26 @@ public void afterEach(ExtensionContext context) throws Exception {\n \t}\n \n \n+\tprivate static InjectWith getInjectWith(Class<?> cls) {\n+\t\tInjectWith result = null;\n+\t\tClass<?> firstClassMatched = null;\n+\t\twhile (cls != null) {\n+\t\t\tInjectWith iw = cls.getAnnotation(InjectWith.class);\n+\t\t\tif (iw != null) {\n+\t\t\t\tif( result != null ) {\n+\t\t\t\t\tthrow new ExtensionConfigurationException(String.format(\"Mulitple annotations @InjectWith are found (%s and %s). Only a single one is supported.\",", "originalCommit": "34dd4b74fc13a86d6c89a89be5e16d20539dca69", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjUxODkyMA==", "url": "https://github.com/eclipse/xtext-core/pull/1510#discussion_r432518920", "bodyText": "done", "author": "frankbenoit", "createdAt": "2020-05-29T14:23:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjUxMDI3NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjUzOTE1Ng==", "url": "https://github.com/eclipse/xtext-core/pull/1510#discussion_r432539156", "bodyText": "This should be {@link Nested nested} test classes - could be, that the JavaDoc validation will fail if we do it like is is done right now.", "author": "szarnekow", "createdAt": "2020-05-29T14:50:16Z", "path": "org.eclipse.xtext.testing/src/org/eclipse/xtext/testing/extensions/InjectionExtension.java", "diffHunk": "@@ -28,6 +30,9 @@\n  * The extension retrieves an {@link Injector} to inject members in the instance\n  * under test before best execution and resets registries after execution.\n  * </p>\n+ * It takes care about JUnit5 @Nested test classes. That are inner classes that might", "originalCommit": "b2c850d669c6c8ab5b32214b885e73b617be1a19", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjU0NzI5OA==", "url": "https://github.com/eclipse/xtext-core/pull/1510#discussion_r432547298", "bodyText": "done", "author": "frankbenoit", "createdAt": "2020-05-29T15:02:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjUzOTE1Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjU4OTA3Mg==", "url": "https://github.com/eclipse/xtext-core/pull/1510#discussion_r432589072", "bodyText": "may be They are inner classes", "author": "miklossy", "createdAt": "2020-05-29T16:09:41Z", "path": "org.eclipse.xtext.testing/src/org/eclipse/xtext/testing/extensions/InjectionExtension.java", "diffHunk": "@@ -28,6 +31,9 @@\n  * The extension retrieves an {@link Injector} to inject members in the instance\n  * under test before best execution and resets registries after execution.\n  * </p>\n+ * It takes care about JUnit5 {@link Nested nested} test classes. That are inner classes that might", "originalCommit": "2773685c4ffde33b0df980f56f7212a3ab2fbfc3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY0MDk5NQ==", "url": "https://github.com/eclipse/xtext-core/pull/1510#discussion_r432640995", "bodyText": "done", "author": "frankbenoit", "createdAt": "2020-05-29T17:43:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjU4OTA3Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjU5MDA2NQ==", "url": "https://github.com/eclipse/xtext-core/pull/1510#discussion_r432590065", "bodyText": "Maybe: Multiple @InjectWith annotations", "author": "miklossy", "createdAt": "2020-05-29T16:11:29Z", "path": "org.eclipse.xtext.testing/src/org/eclipse/xtext/testing/extensions/InjectionExtension.java", "diffHunk": "@@ -66,8 +78,26 @@ public void afterEach(ExtensionContext context) throws Exception {\n \t}\n \n \n+\tprivate static InjectWith getInjectWith(Class<?> cls) {\n+\t\tInjectWith result = null;\n+\t\tClass<?> firstClassMatched = null;\n+\t\twhile (cls != null) {\n+\t\t\tInjectWith iw = cls.getAnnotation(InjectWith.class);\n+\t\t\tif (iw != null) {\n+\t\t\t\tif(result != null) {\n+\t\t\t\t\tthrow new ExtensionConfigurationException(String.format(\"Multiple annotations @InjectWith are found (%s and %s). Only a single one is supported.\",", "originalCommit": "2773685c4ffde33b0df980f56f7212a3ab2fbfc3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY0MDk2Mg==", "url": "https://github.com/eclipse/xtext-core/pull/1510#discussion_r432640962", "bodyText": "done", "author": "frankbenoit", "createdAt": "2020-05-29T17:43:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjU5MDA2NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjU5MDQ5Ng==", "url": "https://github.com/eclipse/xtext-core/pull/1510#discussion_r432590496", "bodyText": "Copyright Date 2020", "author": "miklossy", "createdAt": "2020-05-29T16:12:19Z", "path": "org.eclipse.xtext.testing/tests/org/eclipse/xtext/testing/tests/InjectionExtensionNested2Test.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*******************************************************************************\n+ * Copyright (c) 2018 itemis AG (http://www.itemis.eu) and others.", "originalCommit": "2773685c4ffde33b0df980f56f7212a3ab2fbfc3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY0MDkyNg==", "url": "https://github.com/eclipse/xtext-core/pull/1510#discussion_r432640926", "bodyText": "done", "author": "frankbenoit", "createdAt": "2020-05-29T17:43:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjU5MDQ5Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjU5MDk1MQ==", "url": "https://github.com/eclipse/xtext-core/pull/1510#discussion_r432590951", "bodyText": "Add . at the end of the sentence.", "author": "miklossy", "createdAt": "2020-05-29T16:13:06Z", "path": "org.eclipse.xtext.testing/tests/org/eclipse/xtext/testing/tests/InjectionExtensionNested2Test.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*******************************************************************************\n+ * Copyright (c) 2018 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.xtext.testing.tests;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+import org.eclipse.xtext.testing.IInjectorProvider;\n+import org.eclipse.xtext.testing.IRegistryConfigurator;\n+import org.eclipse.xtext.testing.InjectWith;\n+import org.eclipse.xtext.testing.extensions.InjectionExtension;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Nested;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+\n+import com.google.inject.Binder;\n+import com.google.inject.Guice;\n+import com.google.inject.Inject;\n+import com.google.inject.Injector;\n+import com.google.inject.Module;\n+\n+/**\n+ * Test for {@link InjectionExtension}.\n+ * Injection working for nested test classes", "originalCommit": "2773685c4ffde33b0df980f56f7212a3ab2fbfc3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY0MDkwMw==", "url": "https://github.com/eclipse/xtext-core/pull/1510#discussion_r432640903", "bodyText": "done", "author": "frankbenoit", "createdAt": "2020-05-29T17:43:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjU5MDk1MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjU5MTAwMQ==", "url": "https://github.com/eclipse/xtext-core/pull/1510#discussion_r432591001", "bodyText": "Add . at the end of the sentence.", "author": "miklossy", "createdAt": "2020-05-29T16:13:12Z", "path": "org.eclipse.xtext.testing/tests/org/eclipse/xtext/testing/tests/InjectionExtensionNested2Test.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*******************************************************************************\n+ * Copyright (c) 2018 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.xtext.testing.tests;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+import org.eclipse.xtext.testing.IInjectorProvider;\n+import org.eclipse.xtext.testing.IRegistryConfigurator;\n+import org.eclipse.xtext.testing.InjectWith;\n+import org.eclipse.xtext.testing.extensions.InjectionExtension;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Nested;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+\n+import com.google.inject.Binder;\n+import com.google.inject.Guice;\n+import com.google.inject.Inject;\n+import com.google.inject.Injector;\n+import com.google.inject.Module;\n+\n+/**\n+ * Test for {@link InjectionExtension}.\n+ * Injection working for nested test classes\n+ * Here the @InjectWith is attached to the inner class", "originalCommit": "2773685c4ffde33b0df980f56f7212a3ab2fbfc3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY0MDgyMg==", "url": "https://github.com/eclipse/xtext-core/pull/1510#discussion_r432640822", "bodyText": "done", "author": "frankbenoit", "createdAt": "2020-05-29T17:43:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjU5MTAwMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjU5MTQ5OQ==", "url": "https://github.com/eclipse/xtext-core/pull/1510#discussion_r432591499", "bodyText": "Copyright Date 2020", "author": "miklossy", "createdAt": "2020-05-29T16:14:07Z", "path": "org.eclipse.xtext.testing/tests/org/eclipse/xtext/testing/tests/InjectionExtensionNestedTest.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*******************************************************************************\n+ * Copyright (c) 2018 itemis AG (http://www.itemis.eu) and others.", "originalCommit": "2773685c4ffde33b0df980f56f7212a3ab2fbfc3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY0MDc4MQ==", "url": "https://github.com/eclipse/xtext-core/pull/1510#discussion_r432640781", "bodyText": "done", "author": "frankbenoit", "createdAt": "2020-05-29T17:43:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjU5MTQ5OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjU5MTgwNw==", "url": "https://github.com/eclipse/xtext-core/pull/1510#discussion_r432591807", "bodyText": "Add . at the end of the sentence.", "author": "miklossy", "createdAt": "2020-05-29T16:14:38Z", "path": "org.eclipse.xtext.testing/tests/org/eclipse/xtext/testing/tests/InjectionExtensionNestedTest.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*******************************************************************************\n+ * Copyright (c) 2018 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.xtext.testing.tests;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+import org.eclipse.xtext.testing.IInjectorProvider;\n+import org.eclipse.xtext.testing.IRegistryConfigurator;\n+import org.eclipse.xtext.testing.InjectWith;\n+import org.eclipse.xtext.testing.extensions.InjectionExtension;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Nested;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+\n+import com.google.inject.Binder;\n+import com.google.inject.Guice;\n+import com.google.inject.Inject;\n+import com.google.inject.Injector;\n+import com.google.inject.Module;\n+\n+/**\n+ * Test for {@link InjectionExtension}.\n+ * Injection working for nested test classes.\n+ * Here the @InjectWith is attached to the outer class", "originalCommit": "2773685c4ffde33b0df980f56f7212a3ab2fbfc3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY0MDcxNA==", "url": "https://github.com/eclipse/xtext-core/pull/1510#discussion_r432640714", "bodyText": "done", "author": "frankbenoit", "createdAt": "2020-05-29T17:43:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjU5MTgwNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjU5Mjg3Mw==", "url": "https://github.com/eclipse/xtext-core/pull/1510#discussion_r432592873", "bodyText": "Please remove the unnecessary empty lines.", "author": "miklossy", "createdAt": "2020-05-29T16:16:36Z", "path": "org.eclipse.xtext.testing/tests/org/eclipse/xtext/testing/tests/InjectionExtensionNested2Test.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*******************************************************************************\n+ * Copyright (c) 2018 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.xtext.testing.tests;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+import org.eclipse.xtext.testing.IInjectorProvider;\n+import org.eclipse.xtext.testing.IRegistryConfigurator;\n+import org.eclipse.xtext.testing.InjectWith;\n+import org.eclipse.xtext.testing.extensions.InjectionExtension;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Nested;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+\n+import com.google.inject.Binder;\n+import com.google.inject.Guice;\n+import com.google.inject.Inject;\n+import com.google.inject.Injector;\n+import com.google.inject.Module;\n+\n+/**\n+ * Test for {@link InjectionExtension}.\n+ * Injection working for nested test classes\n+ * Here the @InjectWith is attached to the inner class\n+ * \n+ * @author Frank Benoit - Initial contribution and API\n+ */\n+@ExtendWith(InjectionExtension.class)\n+public class InjectionExtensionNested2Test {\n+\t\n+\tpublic static class MyInjectorProvider implements IRegistryConfigurator, IInjectorProvider {\n+\n+\t\t@Override\n+\t\tpublic Injector getInjector() {\n+\t\t\treturn Guice.createInjector(new Module(){\n+\t\t\t\t@Override\n+\t\t\t\tpublic void configure(Binder binder) {\n+\t\t\t\t\tbinder.bind(String.class)\n+\t\t\t\t\t.toInstance(INJECTED);\n+\t\t\t\t}\n+\t\t\t});\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic void setupRegistry() {\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic void restoreRegistry() {\n+\t\t}\n+\t}\n+\n+\tprivate static final String NOT_INJECTED = \"not-injected\";\n+\tprivate static final String INJECTED = \"injected\";\n+\t\n+\t@Inject \n+\tString testValue1 = NOT_INJECTED;\n+\t\n+\t@Test\n+\tvoid outerTest() {\n+\t\tassertEquals(NOT_INJECTED, testValue1);\n+\t}\n+\t\n+\t@Nested\n+\t@InjectWith(InjectionExtensionNested2Test.MyInjectorProvider.class)\n+\tclass NestedClass {\n+\t\t\n+\t\t@Inject \n+\t\tString testValue2 = \"\";\n+\n+\t\t@BeforeEach\n+\t\tpublic void setUp () {\n+\t\t\tassertEquals(INJECTED, testValue1);\n+\t\t\tassertEquals(INJECTED, testValue2);\n+\t\t}\n+\t\t\n+\t\t@Test\n+\t\tvoid innerTest() {\n+\t\t\tassertEquals(INJECTED, testValue1);\n+\t\t\tassertEquals(INJECTED, testValue2);\n+\t\t}\n+\t}\n+\t\n+\t", "originalCommit": "2773685c4ffde33b0df980f56f7212a3ab2fbfc3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY0MDUyMQ==", "url": "https://github.com/eclipse/xtext-core/pull/1510#discussion_r432640521", "bodyText": "done", "author": "frankbenoit", "createdAt": "2020-05-29T17:42:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjU5Mjg3Mw=="}], "type": "inlineReview"}, {"oid": "ee1b9164307c0b2b3a51debcec3951c379609339", "url": "https://github.com/eclipse/xtext-core/commit/ee1b9164307c0b2b3a51debcec3951c379609339", "message": "[#1509] Fix InjectionExtension for nested test classes\n\nThe functional change was implemented/suggested by Christian Dietrich.\nSee https://bugs.eclipse.org/bugs/show_bug.cgi?id=563136\nCurrent restriction is, that multiple @InjectWidth (1 on outer, 1 on\ninner class) will not work. Only one is allowed.\n\nSigned-off-by: Frank Benoit <frank.rene.benoit@gmail.com>", "committedDate": "2020-05-29T17:42:24Z", "type": "commit"}]}