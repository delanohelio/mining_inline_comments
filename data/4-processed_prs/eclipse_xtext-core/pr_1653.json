{"pr_number": 1653, "pr_title": "[#1626] Use node model to generate comments with original format.", "pr_createdAt": "2020-12-18T15:07:37Z", "pr_url": "https://github.com/eclipse/xtext-core/pull/1653", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDg1NTAwOQ==", "url": "https://github.com/eclipse/xtext-core/pull/1653#discussion_r554855009", "bodyText": "wonder if we have a util for this somewhere", "author": "cdietrich", "createdAt": "2021-01-11T07:50:36Z", "path": "org.eclipse.xtext.xtext.generator/src/org/eclipse/xtext/xtext/generator/grammarAccess/GrammarAccessExtensions.xtend", "diffHunk": "@@ -396,8 +391,61 @@ class GrammarAccessExtensions {\n \t\t}\n \t}\n \t\n-\tdef String grammarFragmentToString(EObject ele, String prefix) {\n-\t\treturn serializer.grammarFragmentToString(ele, prefix)\n+\tdef String grammarFragmentToString(EObject object, String prefix) {\n+\t\tval node = NodeModelUtils.findActualNodeFor(object)\n+\t\tif (node === null) {\n+\t\t\tif (object instanceof RuleCall)\n+\t\t\t\tif (object?.rule?.name !== null)\n+\t\t\t\t\treturn process(object.rule.name, prefix)\n+\t\t\treturn \"\"\n+\t\t} else {\n+\t\t\treturn node.text.process(prefix)\n+\t\t}\n+\t}\n+\n+\tprivate def process(String input, String prefix) {\n+\t\t// remove leading and trailing blank lines", "originalCommit": "6097a10826284ab21c1bbf78421f7117f6298243", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Nzk4MzY4MQ==", "url": "https://github.com/eclipse/xtext-core/pull/1653#discussion_r557983681", "bodyText": "I can not find one.", "author": "ArneDeutsch", "createdAt": "2021-01-15T07:58:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDg1NTAwOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDg1NTU1MQ==", "url": "https://github.com/eclipse/xtext-core/pull/1653#discussion_r554855551", "bodyText": "am sure there is a util in guava or xtext this somewhere", "author": "cdietrich", "createdAt": "2021-01-11T07:51:15Z", "path": "org.eclipse.xtext.xtext.generator/src/org/eclipse/xtext/xtext/generator/grammarAccess/GrammarAccessExtensions.xtend", "diffHunk": "@@ -396,8 +391,61 @@ class GrammarAccessExtensions {\n \t\t}\n \t}\n \t\n-\tdef String grammarFragmentToString(EObject ele, String prefix) {\n-\t\treturn serializer.grammarFragmentToString(ele, prefix)\n+\tdef String grammarFragmentToString(EObject object, String prefix) {\n+\t\tval node = NodeModelUtils.findActualNodeFor(object)\n+\t\tif (node === null) {\n+\t\t\tif (object instanceof RuleCall)\n+\t\t\t\tif (object?.rule?.name !== null)\n+\t\t\t\t\treturn process(object.rule.name, prefix)\n+\t\t\treturn \"\"\n+\t\t} else {\n+\t\t\treturn node.text.process(prefix)\n+\t\t}\n+\t}\n+\n+\tprivate def process(String input, String prefix) {\n+\t\t// remove leading and trailing blank lines\n+\t\tvar lines = input.split('(\\\\r?\\\\n)')\n+\t\tvar first = 0\n+\t\twhile (isBlank(lines.get(first)))\n+\t\t\tfirst++\n+\t\tvar last = lines.length - 1\n+\t\twhile (isBlank(lines.get(last)))\n+\t\t\tlast--\n+\t\tlines = lines.subList(first, last + 1)\n+\t\t// remove common whitespace (e.g. leading blanks) and add prefix to each line\n+\t\tval commonWhitespace = commonLeadingWhitespace(lines)\n+\t\tfor (var n=0; n<lines.length; n++)\n+\t\t\tlines.set(n, prefix + lines.get(n).substring(commonWhitespace.length))\n+\t\t// generate result by joining lines\n+\t\treturn lines.join(System.lineSeparator)\n+\t}\n+\n+\tprivate def isBlank(String line) {", "originalCommit": "6097a10826284ab21c1bbf78421f7117f6298243", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Nzk4MjE2NQ==", "url": "https://github.com/eclipse/xtext-core/pull/1653#discussion_r557982165", "bodyText": "The only existing method that does more or less the same is org.apache.commons.lang.StringUtils#isBlank. But it is in a jar not currently in the classpath of the project. I would avoid adding a dependency just because of this tiny method.", "author": "ArneDeutsch", "createdAt": "2021-01-15T07:57:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDg1NTU1MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Nzk4NjQxOQ==", "url": "https://github.com/eclipse/xtext-core/pull/1653#discussion_r557986419", "bodyText": "@szarnekow do you have an idea?", "author": "cdietrich", "createdAt": "2021-01-15T07:59:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDg1NTU1MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODAxNjA1NA==", "url": "https://github.com/eclipse/xtext-core/pull/1653#discussion_r558016054", "bodyText": "eclipse/xtext-lib#247", "author": "cdietrich", "createdAt": "2021-01-15T08:19:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDg1NTU1MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODAzMzM3OQ==", "url": "https://github.com/eclipse/xtext-core/pull/1653#discussion_r558033379", "bodyText": "CharMatcher.whitespace().matchesAllOf(..)", "author": "szarnekow", "createdAt": "2021-01-15T08:31:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDg1NTU1MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODAzODc5Nw==", "url": "https://github.com/eclipse/xtext-core/pull/1653#discussion_r558038797", "bodyText": "I see but am not convinced that it would be an improvement.\n\"line.trim.empty\" vs. \"CharMatcher.whitespace().matchesAllOf(line)\" ... for me it is not more clear and longer AND depend on third party code ... I would not change it ...", "author": "ArneDeutsch", "createdAt": "2021-01-15T08:34:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDg1NTU1MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODAzNTM0OA==", "url": "https://github.com/eclipse/xtext-core/pull/1653#discussion_r558035348", "bodyText": "com.google.common.base.Strings.commonPrefix(CharSequence, CharSequence) may be handy here, too along with isBlank", "author": "szarnekow", "createdAt": "2021-01-15T08:32:34Z", "path": "org.eclipse.xtext.xtext.generator/src/org/eclipse/xtext/xtext/generator/grammarAccess/GrammarAccessExtensions.xtend", "diffHunk": "@@ -396,8 +391,61 @@ class GrammarAccessExtensions {\n \t\t}\n \t}\n \t\n-\tdef String grammarFragmentToString(EObject ele, String prefix) {\n-\t\treturn serializer.grammarFragmentToString(ele, prefix)\n+\tdef String grammarFragmentToString(EObject object, String prefix) {\n+\t\tval node = NodeModelUtils.findActualNodeFor(object)\n+\t\tif (node === null) {\n+\t\t\tif (object instanceof RuleCall)\n+\t\t\t\tif (object?.rule?.name !== null)\n+\t\t\t\t\treturn process(object.rule.name, prefix)\n+\t\t\treturn \"\"\n+\t\t} else {\n+\t\t\treturn node.text.process(prefix)\n+\t\t}\n+\t}\n+\n+\tprivate def process(String input, String prefix) {\n+\t\t// remove leading and trailing blank lines\n+\t\tvar lines = input.split('(\\\\r?\\\\n)')\n+\t\tvar first = 0\n+\t\twhile (isBlank(lines.get(first)))\n+\t\t\tfirst++\n+\t\tvar last = lines.length - 1\n+\t\twhile (isBlank(lines.get(last)))\n+\t\t\tlast--\n+\t\tlines = lines.subList(first, last + 1)\n+\t\t// remove common whitespace (e.g. leading blanks) and add prefix to each line\n+\t\tval commonWhitespace = commonLeadingWhitespace(lines)\n+\t\tfor (var n=0; n<lines.length; n++)\n+\t\t\tlines.set(n, prefix + lines.get(n).substring(commonWhitespace.length))\n+\t\t// generate result by joining lines\n+\t\treturn lines.join(System.lineSeparator)\n+\t}\n+\n+\tprivate def isBlank(String line) {\n+\t\treturn line.trim.empty\n+\t}\n+\t\n+\tprivate def String commonLeadingWhitespace(List<String> lines) {", "originalCommit": "6097a10826284ab21c1bbf78421f7117f6298243", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODA1NzQ5Mw==", "url": "https://github.com/eclipse/xtext-core/pull/1653#discussion_r558057493", "bodyText": "Have thought about this a bit. As the existing method computes the prefix for only two strings I would have to iterate all the lines, compute the common prefix with the first line, then take the shortest prefix, remove everything after the last whitespace, then return it. Do not believe it will be a noticeable improvement.", "author": "ArneDeutsch", "createdAt": "2021-01-15T08:46:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODAzNTM0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODA2ODI3Mg==", "url": "https://github.com/eclipse/xtext-core/pull/1653#discussion_r558068272", "bodyText": "I didn't test this, but my gut feeling is, that a normal loop along with the utility method is also very readable:\nString commonLeadingWS(List<String> lines) {\n  if (lines.size() < 2) return \"\";\n  // start at second line since the first is left-trimmed in any case\n  String current = Strings.repeat(\" \", tabsToSpaces(lines.get(1)).length())\n  for(int i = 1; i < lines.length; i++) {\n    String next = lines.get(i);\n    if (!isBlank(next))) {\n      current = Strings.commonPrefix(current, tabsToSpaces(next));\n    }\n  }\n  return current;\n}", "author": "szarnekow", "createdAt": "2021-01-15T08:54:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODAzNTM0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODE1NTM2MQ==", "url": "https://github.com/eclipse/xtext-core/pull/1653#discussion_r558155361", "bodyText": "Get your idea and guess it will work (we could NOT skip the first element but that is minor).\nModified it a bit to the following:\nprivate def String commonLeadingWhitespace(List<String> lines) {\n\tif(lines.size() < 2) return \"\";\n\tvar current = Strings.repeat(\" \", lines.get(0).replaceAll(\"\\t\", \"    \").length())\n\tfor (var i = 0; i < lines.length; i++) {\n\t\tval next = lines.get(i).replaceAll(\"\\t\", \"    \");\n\t\tif (!isBlank(next))\n\t\t\tcurrent = Strings.commonPrefix(current, next);\n\t}\n\treturn current;\n}\n\nDo you think a replacement of a tab with 4 spaces will work well? Or do we have to read some preferences or something like that? If the user uses tabs and spaces inconsistenly and has one tab for e.g. 2 spaces, the resulting formatting might be wrong ...", "author": "ArneDeutsch", "createdAt": "2021-01-15T09:50:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODAzNTM0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODE2NzI5Ng==", "url": "https://github.com/eclipse/xtext-core/pull/1653#discussion_r558167296", "bodyText": "It was only an idea. We could use common prefix without that replace operation.", "author": "szarnekow", "createdAt": "2021-01-15T09:58:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODAzNTM0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODE3MTQyMQ==", "url": "https://github.com/eclipse/xtext-core/pull/1653#discussion_r558171421", "bodyText": "Why I excluded the first line from the common prefix:\nSomeGrammarRule: \n  {NewThingy} ('{'\n    elements+=Element;\n  '}');\n\nWhen you look at the group in parentheses, you'd want to strip the leading space from the last two lines but the element doesn't have a leading space in the first line. I didn't check the current approach carefully though it might indeed be flawed to exclude line zero.", "author": "szarnekow", "createdAt": "2021-01-15T10:00:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODAzNTM0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODE3MTYxMQ==", "url": "https://github.com/eclipse/xtext-core/pull/1653#discussion_r558171611", "bodyText": "Ok, you are right. In case of inconsistent usage of blanks and tabs we will get wired results in any case. With or without the replace operation. In any case your solution is much more readable.", "author": "ArneDeutsch", "createdAt": "2021-01-15T10:01:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODAzNTM0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODE4NjQwNA==", "url": "https://github.com/eclipse/xtext-core/pull/1653#discussion_r558186404", "bodyText": "Because of the skipping of the first line ... maybe I get you wrong, but in your example we do not want to remove any leading whitespace ... because of the first line. In this sense it is the counter example ... we need to consider the first line.", "author": "ArneDeutsch", "createdAt": "2021-01-15T10:11:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODAzNTM0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODE5MTkzNw==", "url": "https://github.com/eclipse/xtext-core/pull/1653#discussion_r558191937", "bodyText": "The grammar rule has a body of type Group - the group has two elements: one action and another group .\nThe nested group shall be put into the grammar access as a comment. It starts at the opening parenthesis and the keyword: ('{'. So the raw text of that group is\n('{'\n    elements+=Element;\n  '}');\n\nNote the indentation of the last two lines which is off by two chars. If the first line considered in the leading WS computation, there won't be any whitespace to be trimmed. That was my line of thought.", "author": "szarnekow", "createdAt": "2021-01-15T10:15:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODAzNTM0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODIwMTc3NA==", "url": "https://github.com/eclipse/xtext-core/pull/1653#discussion_r558201774", "bodyText": "I see. In that case the algorithm will not work. On the other hand the complete rule will be misformatted in case we skip the first line. Guess it is not possible to make every case 100% \"correct\" ... hence we have to try to make the most common cases good looking. And the complete rule is probably the most important case.", "author": "ArneDeutsch", "createdAt": "2021-01-15T10:22:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODAzNTM0OA=="}], "type": "inlineReview"}, {"oid": "1352b1c58779ebc89858bb0a210ce8be63d901ec", "url": "https://github.com/eclipse/xtext-core/commit/1352b1c58779ebc89858bb0a210ce8be63d901ec", "message": "[#1626] Use node model to generate comments with original format.\n\nSigned-off-by: Arne Deutsch <Arne.Deutsch@itemis.de>", "committedDate": "2021-01-15T10:01:58Z", "type": "forcePushed"}, {"oid": "296b8aae994b108949807c1a43bf5ecd20541033", "url": "https://github.com/eclipse/xtext-core/commit/296b8aae994b108949807c1a43bf5ecd20541033", "message": "[#1626] Use node model to generate comments with original format.\n\nSigned-off-by: Arne Deutsch <Arne.Deutsch@itemis.de>", "committedDate": "2021-02-05T09:28:15Z", "type": "forcePushed"}, {"oid": "854545ce81ecd0ca479d4ac38dc99eabe7bb6046", "url": "https://github.com/eclipse/xtext-core/commit/854545ce81ecd0ca479d4ac38dc99eabe7bb6046", "message": "[#1626] Use node model to generate comments with original format.\n\nSigned-off-by: Arne Deutsch <Arne.Deutsch@itemis.de>", "committedDate": "2021-02-05T09:53:02Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDg3NzM5OQ==", "url": "https://github.com/eclipse/xtext-core/pull/1653#discussion_r570877399", "bodyText": "Nice nice!", "author": "szarnekow", "createdAt": "2021-02-05T10:41:37Z", "path": "org.eclipse.xtext.tests/src/org/eclipse/xtext/xtext/generator/GrammarAccessExtensions2Test.java", "diffHunk": "@@ -70,19 +70,20 @@ public void testGrammarFragmentToString() throws Exception {\n \t\t\t\t\"\t| '?:';\\n\";\n \t\tString expected = \n \t\t\t\t\"//OpOther:\" + NL +\n-\t\t\t\t\"//\t'->'\" + NL +", "originalCommit": "854545ce81ecd0ca479d4ac38dc99eabe7bb6046", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDg3Nzg5MA==", "url": "https://github.com/eclipse/xtext-core/pull/1653#discussion_r570877890", "bodyText": "\ud83d\udcaa", "author": "szarnekow", "createdAt": "2021-02-05T10:42:33Z", "path": "org.eclipse.xtext.xtext.generator/src/org/eclipse/xtext/xtext/generator/grammarAccess/GrammarAccessExtensions.xtend", "diffHunk": "@@ -66,9 +65,6 @@ class GrammarAccessExtensions {\n \t\t\"\\t\" -> \"tab\",\n \t\t\"\\\\\" -> \"backslash\"\n \t};\n-\tval Map<String, ISerializer> xtextSerializerByLineDelimiter = Maps.newHashMapWithExpectedSize(2)", "originalCommit": "854545ce81ecd0ca479d4ac38dc99eabe7bb6046", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDg3OTAwNQ==", "url": "https://github.com/eclipse/xtext-core/pull/1653#discussion_r570879005", "bodyText": "I thought we'd need that for the line ending?", "author": "szarnekow", "createdAt": "2021-02-05T10:44:41Z", "path": "org.eclipse.xtext.xtext.generator/src/org/eclipse/xtext/xtext/generator/grammarAccess/GrammarAccessExtensions.xtend", "diffHunk": "@@ -66,9 +65,6 @@ class GrammarAccessExtensions {\n \t\t\"\\t\" -> \"tab\",\n \t\t\"\\\\\" -> \"backslash\"\n \t};\n-\tval Map<String, ISerializer> xtextSerializerByLineDelimiter = Maps.newHashMapWithExpectedSize(2)\n-\t\n-\t@Inject CodeConfig codeConfig", "originalCommit": "854545ce81ecd0ca479d4ac38dc99eabe7bb6046", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTAyMDgzNQ==", "url": "https://github.com/eclipse/xtext-core/pull/1653#discussion_r571020835", "bodyText": "ok", "author": "ArneDeutsch", "createdAt": "2021-02-05T14:50:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDg3OTAwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDg3OTE4MQ==", "url": "https://github.com/eclipse/xtext-core/pull/1653#discussion_r570879181", "bodyText": "This should use the line ending from the code config", "author": "szarnekow", "createdAt": "2021-02-05T10:44:57Z", "path": "org.eclipse.xtext.xtext.generator/src/org/eclipse/xtext/xtext/generator/grammarAccess/GrammarAccessExtensions.xtend", "diffHunk": "@@ -396,8 +392,49 @@ class GrammarAccessExtensions {\n \t\t}\n \t}\n \t\n-\tdef String grammarFragmentToString(EObject ele, String prefix) {\n-\t\treturn serializer.grammarFragmentToString(ele, prefix)\n+\tdef String grammarFragmentToString(EObject object, String prefix) {\n+\t\tval node = NodeModelUtils.findActualNodeFor(object)\n+\t\tif (node === null) {\n+\t\t\tif (object instanceof RuleCall)\n+\t\t\t\tif (object?.rule?.name !== null)\n+\t\t\t\t\treturn process(object.rule.name, prefix)\n+\t\t\treturn \"\"\n+\t\t} else {\n+\t\t\treturn node.text.process(prefix)\n+\t\t}\n+\t}\n+\n+\tprivate def process(String input, String prefix) {\n+\t\t// remove leading and trailing blank lines\n+\t\tvar lines = input.split('(\\\\r?\\\\n)')\n+\t\tvar first = 0\n+\t\twhile (isBlank(lines.get(first)))\n+\t\t\tfirst++\n+\t\tvar last = lines.length - 1\n+\t\twhile (isBlank(lines.get(last)))\n+\t\t\tlast--\n+\t\tlines = lines.subList(first, last + 1)\n+\t\t// remove common whitespace (e.g. leading blanks) and add prefix to each line\n+\t\tval commonWhitespace = commonLeadingWhitespace(lines)\n+\t\tfor (var n=0; n<lines.length; n++)\n+\t\t\tlines.set(n, prefix + lines.get(n).substring(commonWhitespace.length))\n+\t\t// generate result by joining lines\n+\t\treturn lines.join(System.lineSeparator)", "originalCommit": "854545ce81ecd0ca479d4ac38dc99eabe7bb6046", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTAyMTc3MA==", "url": "https://github.com/eclipse/xtext-core/pull/1653#discussion_r571021770", "bodyText": "Ok.", "author": "ArneDeutsch", "createdAt": "2021-02-05T14:51:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDg3OTE4MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDg4MTE2Ng==", "url": "https://github.com/eclipse/xtext-core/pull/1653#discussion_r570881166", "bodyText": "commonLeadingWhitespace ignores blank lines. Let's assume we do have three lines:\n\n   text\n \n   more text\n\nThe commonWhitespace should be 3.\nThe second line has only a single char, though. I'd assume that the logic in line 420 will now fail: lines.get(1).substring(3) will throw an IOOBE.\nI'd say blank lines should be replaced by the prefix itself.", "author": "szarnekow", "createdAt": "2021-02-05T10:48:16Z", "path": "org.eclipse.xtext.xtext.generator/src/org/eclipse/xtext/xtext/generator/grammarAccess/GrammarAccessExtensions.xtend", "diffHunk": "@@ -396,8 +392,49 @@ class GrammarAccessExtensions {\n \t\t}\n \t}\n \t\n-\tdef String grammarFragmentToString(EObject ele, String prefix) {\n-\t\treturn serializer.grammarFragmentToString(ele, prefix)\n+\tdef String grammarFragmentToString(EObject object, String prefix) {\n+\t\tval node = NodeModelUtils.findActualNodeFor(object)\n+\t\tif (node === null) {\n+\t\t\tif (object instanceof RuleCall)\n+\t\t\t\tif (object?.rule?.name !== null)\n+\t\t\t\t\treturn process(object.rule.name, prefix)\n+\t\t\treturn \"\"\n+\t\t} else {\n+\t\t\treturn node.text.process(prefix)\n+\t\t}\n+\t}\n+\n+\tprivate def process(String input, String prefix) {\n+\t\t// remove leading and trailing blank lines\n+\t\tvar lines = input.split('(\\\\r?\\\\n)')\n+\t\tvar first = 0\n+\t\twhile (isBlank(lines.get(first)))\n+\t\t\tfirst++\n+\t\tvar last = lines.length - 1\n+\t\twhile (isBlank(lines.get(last)))\n+\t\t\tlast--\n+\t\tlines = lines.subList(first, last + 1)\n+\t\t// remove common whitespace (e.g. leading blanks) and add prefix to each line\n+\t\tval commonWhitespace = commonLeadingWhitespace(lines)", "originalCommit": "854545ce81ecd0ca479d4ac38dc99eabe7bb6046", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTAxOTg5MA==", "url": "https://github.com/eclipse/xtext-core/pull/1653#discussion_r571019890", "bodyText": "Good catch. Will fix.", "author": "ArneDeutsch", "createdAt": "2021-02-05T14:49:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDg4MTE2Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDg4MjU2Nw==", "url": "https://github.com/eclipse/xtext-core/pull/1653#discussion_r570882567", "bodyText": "If we'd use \\\\s*(\\\\r?\\\\n) we'd automatically righttrim the lines and avoid dangling whitespace in the generated grammar access. What do you think?", "author": "szarnekow", "createdAt": "2021-02-05T10:50:53Z", "path": "org.eclipse.xtext.xtext.generator/src/org/eclipse/xtext/xtext/generator/grammarAccess/GrammarAccessExtensions.xtend", "diffHunk": "@@ -396,8 +392,49 @@ class GrammarAccessExtensions {\n \t\t}\n \t}\n \t\n-\tdef String grammarFragmentToString(EObject ele, String prefix) {\n-\t\treturn serializer.grammarFragmentToString(ele, prefix)\n+\tdef String grammarFragmentToString(EObject object, String prefix) {\n+\t\tval node = NodeModelUtils.findActualNodeFor(object)\n+\t\tif (node === null) {\n+\t\t\tif (object instanceof RuleCall)\n+\t\t\t\tif (object?.rule?.name !== null)\n+\t\t\t\t\treturn process(object.rule.name, prefix)\n+\t\t\treturn \"\"\n+\t\t} else {\n+\t\t\treturn node.text.process(prefix)\n+\t\t}\n+\t}\n+\n+\tprivate def process(String input, String prefix) {\n+\t\t// remove leading and trailing blank lines\n+\t\tvar lines = input.split('(\\\\r?\\\\n)')", "originalCommit": "854545ce81ecd0ca479d4ac38dc99eabe7bb6046", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTAxMzgxNA==", "url": "https://github.com/eclipse/xtext-core/pull/1653#discussion_r571013814", "bodyText": "Yes, good idea.", "author": "ArneDeutsch", "createdAt": "2021-02-05T14:41:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDg4MjU2Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDg4MzM0OQ==", "url": "https://github.com/eclipse/xtext-core/pull/1653#discussion_r570883349", "bodyText": "Not sure if we should treat indentation by tabs specially here.", "author": "szarnekow", "createdAt": "2021-02-05T10:52:23Z", "path": "org.eclipse.xtext.xtext.generator/src/org/eclipse/xtext/xtext/generator/grammarAccess/GrammarAccessExtensions.xtend", "diffHunk": "@@ -396,8 +392,49 @@ class GrammarAccessExtensions {\n \t\t}\n \t}\n \t\n-\tdef String grammarFragmentToString(EObject ele, String prefix) {\n-\t\treturn serializer.grammarFragmentToString(ele, prefix)\n+\tdef String grammarFragmentToString(EObject object, String prefix) {\n+\t\tval node = NodeModelUtils.findActualNodeFor(object)\n+\t\tif (node === null) {\n+\t\t\tif (object instanceof RuleCall)\n+\t\t\t\tif (object?.rule?.name !== null)\n+\t\t\t\t\treturn process(object.rule.name, prefix)\n+\t\t\treturn \"\"\n+\t\t} else {\n+\t\t\treturn node.text.process(prefix)\n+\t\t}\n+\t}\n+\n+\tprivate def process(String input, String prefix) {\n+\t\t// remove leading and trailing blank lines\n+\t\tvar lines = input.split('(\\\\r?\\\\n)')\n+\t\tvar first = 0\n+\t\twhile (isBlank(lines.get(first)))\n+\t\t\tfirst++\n+\t\tvar last = lines.length - 1\n+\t\twhile (isBlank(lines.get(last)))\n+\t\t\tlast--\n+\t\tlines = lines.subList(first, last + 1)\n+\t\t// remove common whitespace (e.g. leading blanks) and add prefix to each line\n+\t\tval commonWhitespace = commonLeadingWhitespace(lines)\n+\t\tfor (var n=0; n<lines.length; n++)\n+\t\t\tlines.set(n, prefix + lines.get(n).substring(commonWhitespace.length))\n+\t\t// generate result by joining lines\n+\t\treturn lines.join(System.lineSeparator)\n+\t}\n+\n+\tprivate def isBlank(String line) {\n+\t\treturn line.trim.empty\n+\t}\n+\t\n+\tprivate def String commonLeadingWhitespace(List<String> lines) {\n+\t\tif(lines.size() < 2) return \"\";\n+\t\tvar current = Strings.repeat(\" \", lines.get(0).length())\n+\t\tfor (var i = 0; i < lines.length; i++) {\n+\t\t\tval next = lines.get(i);\n+\t\t\tif (!isBlank(next))", "originalCommit": "854545ce81ecd0ca479d4ac38dc99eabe7bb6046", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NTA5NjAzMg==", "url": "https://github.com/eclipse/xtext-core/pull/1653#discussion_r575096032", "bodyText": "Now we do. Replace each tab with four space to handle the common case where we indent with tabs.", "author": "ArneDeutsch", "createdAt": "2021-02-12T09:39:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDg4MzM0OQ=="}], "type": "inlineReview"}, {"oid": "75e12c04cd24ca1ed02438105e85b36734e1550d", "url": "https://github.com/eclipse/xtext-core/commit/75e12c04cd24ca1ed02438105e85b36734e1550d", "message": "[#1626] Use node model to generate comments with original format.\n\nSigned-off-by: Arne Deutsch <Arne.Deutsch@itemis.de>", "committedDate": "2021-02-05T14:54:37Z", "type": "forcePushed"}, {"oid": "a191eefcefe06f1a58c9f6b7ab3fe10378e4081a", "url": "https://github.com/eclipse/xtext-core/commit/a191eefcefe06f1a58c9f6b7ab3fe10378e4081a", "message": "[#1626] Use node model to generate comments with original format.\n\nSigned-off-by: Arne Deutsch <Arne.Deutsch@itemis.de>", "committedDate": "2021-02-12T07:43:06Z", "type": "forcePushed"}, {"oid": "cca239629f75dfb4740998e3600fe8d75c3ee63d", "url": "https://github.com/eclipse/xtext-core/commit/cca239629f75dfb4740998e3600fe8d75c3ee63d", "message": "[#1626] Use node model to generate comments with original format.\n\nSigned-off-by: Arne Deutsch <Arne.Deutsch@itemis.de>", "committedDate": "2021-02-12T09:28:37Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NTA5NDg5OA==", "url": "https://github.com/eclipse/xtext-core/pull/1653#discussion_r575094898", "bodyText": "Added this case for single lines.", "author": "ArneDeutsch", "createdAt": "2021-02-12T09:37:17Z", "path": "org.eclipse.xtext.xtext.generator/src/org/eclipse/xtext/xtext/generator/grammarAccess/GrammarAccessExtensions.xtend", "diffHunk": "@@ -396,8 +394,59 @@ class GrammarAccessExtensions {\n \t\t}\n \t}\n \t\n-\tdef String grammarFragmentToString(EObject ele, String prefix) {\n-\t\treturn serializer.grammarFragmentToString(ele, prefix)\n+\tdef String grammarFragmentToString(EObject object, String prefix) {\n+\t\tval node = NodeModelUtils.findActualNodeFor(object)\n+\t\tif (node === null) {\n+\t\t\tif (object instanceof RuleCall)\n+\t\t\t\tif (object?.rule?.name !== null)\n+\t\t\t\t\treturn process(object.rule.name, prefix)\n+\t\t\treturn \"\"\n+\t\t} else {\n+\t\t\treturn node.text.process(prefix)\n+\t\t}\n+\t}\n+\n+\tprivate def process(String input, String prefix) {\n+\t\t// remove leading and trailing blank lines\n+\t\tvar lines = input.split('\\\\s*(\\\\r?\\\\n)')\n+\t\tvar first = 0\n+\t\twhile (isBlank(lines.get(first)))\n+\t\t\tfirst++\n+\t\tvar last = lines.length - 1\n+\t\twhile (isBlank(lines.get(last)))\n+\t\t\tlast--\n+\t\tlines = lines.subList(first, last + 1)\n+\t\t// just one line, trim it and be done", "originalCommit": "cca239629f75dfb4740998e3600fe8d75c3ee63d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "8ab3672c97d9f10c98769c50014366c23508802b", "url": "https://github.com/eclipse/xtext-core/commit/8ab3672c97d9f10c98769c50014366c23508802b", "message": "[#1626] Use node model to generate comments with original format.\n\nSigned-off-by: Arne Deutsch <Arne.Deutsch@itemis.de>", "committedDate": "2021-02-12T10:01:11Z", "type": "commit"}, {"oid": "8ab3672c97d9f10c98769c50014366c23508802b", "url": "https://github.com/eclipse/xtext-core/commit/8ab3672c97d9f10c98769c50014366c23508802b", "message": "[#1626] Use node model to generate comments with original format.\n\nSigned-off-by: Arne Deutsch <Arne.Deutsch@itemis.de>", "committedDate": "2021-02-12T10:01:11Z", "type": "forcePushed"}]}