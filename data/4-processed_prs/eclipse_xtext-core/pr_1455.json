{"pr_number": 1455, "pr_title": "[eclipse/xtext#1679] converted Xtend code to Java", "pr_createdAt": "2020-04-25T08:40:02Z", "pr_url": "https://github.com/eclipse/xtext-core/pull/1455", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTAxNTczMA==", "url": "https://github.com/eclipse/xtext-core/pull/1455#discussion_r415015730", "bodyText": "final", "author": "cdietrich", "createdAt": "2020-04-25T08:40:23Z", "path": "org.eclipse.xtext.tests/src/org/eclipse/xtext/formatting2/internal/GenericFormatterTestRequest.java", "diffHunk": "@@ -10,24 +10,20 @@\n \n import org.eclipse.emf.ecore.EObject;\n import org.eclipse.xtend.lib.annotations.Accessors;\n-import org.eclipse.xtext.formatting2.internal.GenericFormatter;\n import org.eclipse.xtext.testing.formatter.FormatterTestRequest;\n-import org.eclipse.xtext.xbase.lib.Pure;\n \n /**\n  * @author Moritz Eysholdt - Initial contribution and API\n  */\n-@SuppressWarnings(\"all\")\n public class GenericFormatterTestRequest extends FormatterTestRequest {\n-  @Accessors\n-  private GenericFormatter<? extends EObject> formatter;\n-  \n-  @Pure\n-  public GenericFormatter<? extends EObject> getFormatter() {\n-    return this.formatter;\n-  }\n-  \n-  public void setFormatter(final GenericFormatter<? extends EObject> formatter) {\n-    this.formatter = formatter;\n-  }\n+\t@Accessors\n+\tprivate GenericFormatter<? extends EObject> formatter;\n+\n+\tpublic GenericFormatter<? extends EObject> getFormatter() {\n+\t\treturn formatter;\n+\t}\n+\n+\tpublic void setFormatter(final GenericFormatter<? extends EObject> formatter) {", "originalCommit": "d081a5527f415a5a05da783c32e2ab9ed3b4b7c3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTAxNTk2MA==", "url": "https://github.com/eclipse/xtext-core/pull/1455#discussion_r415015960", "bodyText": "this.", "author": "cdietrich", "createdAt": "2020-04-25T08:41:43Z", "path": "org.eclipse.xtext.tests/src/org/eclipse/xtext/formatting2/regionaccess/internal/RegionAccessTestHelper.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/**\n+ * Copyright (c) 2017, 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.formatting2.regionaccess.internal;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.eclipse.xtext.formatting2.debug.TextRegionAccessToString;\n+import org.eclipse.xtext.formatting2.regionaccess.ITextRegionAccess;\n+import org.eclipse.xtext.formatting2.regionaccess.ITextRegionAccessDiff;\n+import org.eclipse.xtext.formatting2.regionaccess.ITextRegionDiffBuilder;\n+import org.eclipse.xtext.formatting2.regionaccess.ITextRegionRewriter;\n+import org.eclipse.xtext.formatting2.regionaccess.ITextReplacement;\n+import org.eclipse.xtext.formatting2.regionaccess.ITextSegment;\n+import org.eclipse.xtext.formatting2.regionaccess.ITextSegmentDiff;\n+import org.eclipse.xtext.formatting2.regionaccess.TextRegionAccessBuilder;\n+import org.eclipse.xtext.formatting2.regionaccess.internal.regionaccesstestlanguage.Root;\n+import org.eclipse.xtext.resource.XtextResource;\n+import org.eclipse.xtext.testing.util.ParseHelper;\n+import org.eclipse.xtext.testing.validation.ValidationTestHelper;\n+import org.eclipse.xtext.util.Strings;\n+import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;\n+import org.junit.Assert;\n+\n+import com.google.inject.Inject;\n+import com.google.inject.Provider;\n+\n+/**\n+ * @author Moritz Eysholdt - Initial contribution and API\n+ */\n+public class RegionAccessTestHelper {\n+\t@Inject\n+\tprivate ParseHelper<Root> parseHelper;\n+\n+\t@Inject\n+\tprivate Provider<TextRegionAccessBuilder> textRegionAccessBuilder;\n+\n+\t@Inject\n+\tprivate ValidationTestHelper validationTestHelper;\n+\n+\tpublic ITextRegionAccess toTextRegionAccess(CharSequence file) throws Exception {\n+\t\tRoot obj = parseHelper.parse(file.toString().replace(\"\\r\\n\", \"\\n\").trim());\n+\t\tthis.validationTestHelper.assertNoErrors(obj);", "originalCommit": "d081a5527f415a5a05da783c32e2ab9ed3b4b7c3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTAxNjE3NA==", "url": "https://github.com/eclipse/xtext-core/pull/1455#discussion_r415016174", "bodyText": "this.", "author": "cdietrich", "createdAt": "2020-04-25T08:43:11Z", "path": "org.eclipse.xtext.tests/src/org/eclipse/xtext/xtext/generator/KeywordHelperTest.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/**\n+ * Copyright (c) 2018, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.xtext.generator;\n+\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+\n+import org.eclipse.emf.ecore.EPackage;\n+import org.eclipse.emf.ecore.xml.type.XMLTypePackage;\n+import org.eclipse.xtext.Grammar;\n+import org.eclipse.xtext.XtextStandaloneSetup;\n+import org.eclipse.xtext.resource.XtextResource;\n+import org.eclipse.xtext.testing.GlobalRegistries;\n+import org.eclipse.xtext.tests.AbstractXtextTests;\n+import org.eclipse.xtext.xbase.lib.IterableExtensions;\n+import org.eclipse.xtext.xtext.generator.grammarAccess.GrammarAccessExtensions;\n+import org.eclipse.xtext.xtext.generator.parser.antlr.KeywordHelper;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+/**\n+ * @author Christian Dietrich - Initial contribution and API\n+ */\n+public class KeywordHelperTest extends AbstractXtextTests {\n+\tprivate GlobalRegistries.GlobalStateMemento globalStateMemento;\n+\n+\t@Before\n+\t@Override\n+\tpublic void setUp() throws Exception {\n+\t\tglobalStateMemento = GlobalRegistries.makeCopyOfGlobalState();\n+\t\tsuper.setUp();\n+\t\tEPackage.Registry.INSTANCE.put(XMLTypePackage.eNS_URI, XMLTypePackage.eINSTANCE);\n+\t\twith(XtextStandaloneSetup.class);\n+\t}\n+\n+\t@After\n+\t@Override\n+\tpublic void tearDown() throws Exception {\n+\t\tsuper.tearDown();\n+\t\tglobalStateMemento.restoreGlobalState();\n+\t}\n+\n+\t@Test\n+\tpublic void testToAntlrTokenIdentifier() throws Exception {\n+\t\t// @formatter:off\n+\t\tString model =\n+\t\t\"grammar org.eclipse.xtext.xbase.Xbase with org.eclipse.xtext.common.Terminals\\n\" +\n+\t\t\"import 'http://www.eclipse.org/emf/2002/Ecore' as ecore\\n\" +\n+\t\t\"Model returns ecore::EClass : 'model' '/EOF' 'EOF' '\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd' name=ID;\";\n+\t\t// @formatter:off\n+\t\tXtextResource resource = getResourceFromString(model);\n+\t\tGrammar grammar = ((Grammar) resource.getContents().get(0));\n+\t\tKeywordHelper keywordHelper = new KeywordHelper(grammar, true, new GrammarAccessExtensions());\n+\t\tAssert.assertEquals(\"[/EOF, EOF, model, \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd]\",\n+\t\t\t\tIterableExtensions.sort(keywordHelper.getAllKeywords()).toString());\n+\t\tAssert.assertEquals(\"KW_EOF_1\", keywordHelper.getRuleName(\"/EOF\"));\n+\t\tAssert.assertEquals(\"KW_EOF\", keywordHelper.getRuleName(\"EOF\"));\n+\t\tAssert.assertEquals(\"Model\", keywordHelper.getRuleName(\"model\"));\n+\t\tAssert.assertEquals(\"AeOeUeaeOeUe\", keywordHelper.getRuleName(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\"));\n+\t}\n+\n+\t@Override\n+\tprotected InputStream getAsStream(String model) {\n+\t\treturn this.getAsStream(model, StandardCharsets.ISO_8859_1);", "originalCommit": "d081a5527f415a5a05da783c32e2ab9ed3b4b7c3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTAxNjI2MA==", "url": "https://github.com/eclipse/xtext-core/pull/1455#discussion_r415016260", "bodyText": "this.", "author": "cdietrich", "createdAt": "2020-04-25T08:43:49Z", "path": "org.eclipse.xtext.tests/src/org/eclipse/xtext/formatting2/internal/GenericFormatter.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/**\n+ * Copyright (c) 2014, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.formatting2.internal;\n+\n+import org.eclipse.emf.ecore.EObject;\n+import org.eclipse.xtext.formatting2.AbstractFormatter2;\n+import org.eclipse.xtext.formatting2.IFormattableDocument;\n+import org.eclipse.xtext.formatting2.regionaccess.ITextRegionExtensions;\n+import org.eclipse.xtext.resource.XtextResource;\n+\n+/**\n+ * @author Moritz Eysholdt - Initial contribution and API\n+ */\n+public abstract class GenericFormatter<T extends EObject> extends AbstractFormatter2 {\n+\t@SuppressWarnings(\"unchecked\")\n+\t@Override\n+\tprotected void _format(EObject obj, IFormattableDocument document) {\n+\t\tthis.format(((T) obj), getRequest().getTextRegionAccess().getExtensions(), document);", "originalCommit": "d081a5527f415a5a05da783c32e2ab9ed3b4b7c3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "8a013bc192e2830f838c5d216d84000ddbf6417c", "url": "https://github.com/eclipse/xtext-core/commit/8a013bc192e2830f838c5d216d84000ddbf6417c", "message": "[eclipse/xtext#1679] converted Xtend code to Java\n\nSigned-off-by: Christian Dietrich <christian.dietrich@itemis.de>", "committedDate": "2020-04-25T08:44:26Z", "type": "forcePushed"}, {"oid": "b3e77abdc6b8c7d59487a2c37fcd5e37d44df728", "url": "https://github.com/eclipse/xtext-core/commit/b3e77abdc6b8c7d59487a2c37fcd5e37d44df728", "message": "[eclipse/xtext#1679] converted Xtend code to Java\n\nSigned-off-by: Christian Dietrich <christian.dietrich@itemis.de>", "committedDate": "2020-04-25T09:05:22Z", "type": "forcePushed"}, {"oid": "b16953fe9fdc8fed0c7f5c5a9b597d9cda14a086", "url": "https://github.com/eclipse/xtext-core/commit/b16953fe9fdc8fed0c7f5c5a9b597d9cda14a086", "message": "[eclipse/xtext#1679] converted Xtend code to Java\n\nSigned-off-by: Christian Dietrich <christian.dietrich@itemis.de>", "committedDate": "2020-04-25T12:01:49Z", "type": "forcePushed"}, {"oid": "e40d88bffb2331a034d7d3c869a24ebf38397466", "url": "https://github.com/eclipse/xtext-core/commit/e40d88bffb2331a034d7d3c869a24ebf38397466", "message": "[eclipse/xtext#1679] converted Xtend code to Java\n\nSigned-off-by: Christian Dietrich <christian.dietrich@itemis.de>", "committedDate": "2020-04-25T12:07:37Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTI3NzY4Ng==", "url": "https://github.com/eclipse/xtext-core/pull/1455#discussion_r415277686", "bodyText": "Not final?", "author": "tivervac", "createdAt": "2020-04-26T10:37:20Z", "path": "org.eclipse.xtext.tests/src/org/eclipse/xtext/filesystem/URIBasedFileSystemAccessTest.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/**\n+ * Copyright (c) 2016, 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.filesystem;\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.UUID;\n+\n+import org.eclipse.emf.ecore.resource.impl.ExtensibleURIConverterImpl;\n+import org.eclipse.xtext.generator.IFileSystemAccess;\n+import org.eclipse.xtext.generator.IOutputConfigurationProvider;\n+import org.eclipse.xtext.generator.OutputConfiguration;\n+import org.eclipse.xtext.generator.URIBasedFileSystemAccess;\n+import org.eclipse.xtext.testing.InjectWith;\n+import org.eclipse.xtext.testing.XtextRunner;\n+import org.eclipse.xtext.tests.XtextInjectorProvider;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import com.google.common.base.StandardSystemProperty;\n+import com.google.inject.Inject;\n+\n+/**\n+ * @author akos.kitta - Initial contribution and API\n+ * \n+ * @see https://github.com/eclipse/xtext-core/issues/180\n+ */\n+@RunWith(XtextRunner.class)\n+@InjectWith(XtextInjectorProvider.class)\n+public class URIBasedFileSystemAccessTest {\n+\tprivate static String MISSING_RESOURCE_NAME = \"someMissingResource\";", "originalCommit": "e40d88bffb2331a034d7d3c869a24ebf38397466", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTI3NzcwNg==", "url": "https://github.com/eclipse/xtext-core/pull/1455#discussion_r415277706", "bodyText": "Same here", "author": "tivervac", "createdAt": "2020-04-26T10:37:28Z", "path": "org.eclipse.xtext.tests/src/org/eclipse/xtext/filesystem/URIBasedFileSystemAccessTest.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/**\n+ * Copyright (c) 2016, 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.filesystem;\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.UUID;\n+\n+import org.eclipse.emf.ecore.resource.impl.ExtensibleURIConverterImpl;\n+import org.eclipse.xtext.generator.IFileSystemAccess;\n+import org.eclipse.xtext.generator.IOutputConfigurationProvider;\n+import org.eclipse.xtext.generator.OutputConfiguration;\n+import org.eclipse.xtext.generator.URIBasedFileSystemAccess;\n+import org.eclipse.xtext.testing.InjectWith;\n+import org.eclipse.xtext.testing.XtextRunner;\n+import org.eclipse.xtext.tests.XtextInjectorProvider;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import com.google.common.base.StandardSystemProperty;\n+import com.google.inject.Inject;\n+\n+/**\n+ * @author akos.kitta - Initial contribution and API\n+ * \n+ * @see https://github.com/eclipse/xtext-core/issues/180\n+ */\n+@RunWith(XtextRunner.class)\n+@InjectWith(XtextInjectorProvider.class)\n+public class URIBasedFileSystemAccessTest {\n+\tprivate static String MISSING_RESOURCE_NAME = \"someMissingResource\";\n+\n+\tprivate static String EXISTING_RESOURCE_NAME = \"someExistingResource\";", "originalCommit": "e40d88bffb2331a034d7d3c869a24ebf38397466", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTI3Nzc0NA==", "url": "https://github.com/eclipse/xtext-core/pull/1455#discussion_r415277744", "bodyText": "Can be final", "author": "tivervac", "createdAt": "2020-04-26T10:37:49Z", "path": "org.eclipse.xtext.tests/src/org/eclipse/xtext/filesystem/URIBasedFileSystemAccessTest.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/**\n+ * Copyright (c) 2016, 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.filesystem;\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.UUID;\n+\n+import org.eclipse.emf.ecore.resource.impl.ExtensibleURIConverterImpl;\n+import org.eclipse.xtext.generator.IFileSystemAccess;\n+import org.eclipse.xtext.generator.IOutputConfigurationProvider;\n+import org.eclipse.xtext.generator.OutputConfiguration;\n+import org.eclipse.xtext.generator.URIBasedFileSystemAccess;\n+import org.eclipse.xtext.testing.InjectWith;\n+import org.eclipse.xtext.testing.XtextRunner;\n+import org.eclipse.xtext.tests.XtextInjectorProvider;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import com.google.common.base.StandardSystemProperty;\n+import com.google.inject.Inject;\n+\n+/**\n+ * @author akos.kitta - Initial contribution and API\n+ * \n+ * @see https://github.com/eclipse/xtext-core/issues/180\n+ */\n+@RunWith(XtextRunner.class)\n+@InjectWith(XtextInjectorProvider.class)\n+public class URIBasedFileSystemAccessTest {\n+\tprivate static String MISSING_RESOURCE_NAME = \"someMissingResource\";\n+\n+\tprivate static String EXISTING_RESOURCE_NAME = \"someExistingResource\";\n+\n+\t@Inject\n+\tprivate URIBasedFileSystemAccess fsa;\n+\n+\t@Inject\n+\tprivate IOutputConfigurationProvider configProvider;\n+\n+\tprivate ExtensibleURIConverterImpl uriConverter = new ExtensibleURIConverterImpl();", "originalCommit": "e40d88bffb2331a034d7d3c869a24ebf38397466", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTI3ODY3OQ==", "url": "https://github.com/eclipse/xtext-core/pull/1455#discussion_r415278679", "bodyText": "This is fixed by now though", "author": "tivervac", "createdAt": "2020-04-26T10:43:08Z", "path": "org.eclipse.xtext.tests/src/org/eclipse/xtext/generator/TypeReferenceTest.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/**\n+ * Copyright (c) 2015, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.generator;\n+\n+import org.eclipse.emf.ecore.EcorePackage;\n+import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl;\n+import org.eclipse.xtext.xtext.generator.model.TypeReference;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import com.google.common.collect.Lists;\n+\n+public class TypeReferenceTest {\n+\t/**\n+\t * See https://bugs.eclipse.org/bugs/show_bug.cgi?id=480196", "originalCommit": "e40d88bffb2331a034d7d3c869a24ebf38397466", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTI4MTY4Ng==", "url": "https://github.com/eclipse/xtext-core/pull/1455#discussion_r415281686", "bodyText": "did not want to look into the details thus is just took over the comment", "author": "cdietrich", "createdAt": "2020-04-26T10:58:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTI3ODY3OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTI3ODk3NA==", "url": "https://github.com/eclipse/xtext-core/pull/1455#discussion_r415278974", "bodyText": "Merge with comment above, it looks very weird floating by itself here", "author": "tivervac", "createdAt": "2020-04-26T10:44:53Z", "path": "org.eclipse.xtext.tests/src/org/eclipse/xtext/generator/trace/node/GeneratorNodePerformanceTest.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/**\n+ * Copyright (c) 2018 TypeFox (https://typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.generator.trace.node;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.xtext.generator.trace.LocationData;\n+import org.eclipse.xtext.generator.trace.SourceRelativeURI;\n+import org.eclipse.xtext.xbase.lib.StringExtensions;\n+import org.junit.Assert;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.Timeout;\n+\n+/**\n+ * @author Dennis Huebner - Initial contribution and API\n+ */\n+public class GeneratorNodePerformanceTest {\n+\tprivate GeneratorNodeExtensions exts = new GeneratorNodeExtensions();\n+\n+//\tprivate static final int numberOfLines = 800_000 // Before x sec - after 4.6 sec\n+//\tprivate static final int numberOfLines = 80_000 // Before 89 sec - after 0.43 sec\n+\tprivate static final int numberOfLines = 40_000; // Before 20 sec - after\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t// 0.32 sec", "originalCommit": "e40d88bffb2331a034d7d3c869a24ebf38397466", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTI4MTgzMQ==", "url": "https://github.com/eclipse/xtext-core/pull/1455#discussion_r415281831", "bodyText": "autoformatter is arggg", "author": "cdietrich", "createdAt": "2020-04-26T10:59:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTI3ODk3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTI4Mjg1NQ==", "url": "https://github.com/eclipse/xtext-core/pull/1455#discussion_r415282855", "bodyText": "Yeah, for some reason the default formatting length for comments is 80 chars. We've changed it to 120 in our codebase, same as for java lines.\nNot sure why you'd want a different allowed length for your comments than for your code", "author": "tivervac", "createdAt": "2020-04-26T11:04:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTI3ODk3NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTI3OTAxNw==", "url": "https://github.com/eclipse/xtext-core/pull/1455#discussion_r415279017", "bodyText": "Update copyright", "author": "tivervac", "createdAt": "2020-04-26T10:45:06Z", "path": "org.eclipse.xtext.tests/src/org/eclipse/xtext/generator/trace/node/GeneratorNodePerformanceTest.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/**\n+ * Copyright (c) 2018 TypeFox (https://typefox.io) and others.", "originalCommit": "e40d88bffb2331a034d7d3c869a24ebf38397466", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTI3OTEzNQ==", "url": "https://github.com/eclipse/xtext-core/pull/1455#discussion_r415279135", "bodyText": "Just use Strings.isNullOrEmpty?", "author": "tivervac", "createdAt": "2020-04-26T10:45:55Z", "path": "org.eclipse.xtext.tests/src/org/eclipse/xtext/generator/trace/node/GeneratorNodePerformanceTest.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/**\n+ * Copyright (c) 2018 TypeFox (https://typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.generator.trace.node;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.xtext.generator.trace.LocationData;\n+import org.eclipse.xtext.generator.trace.SourceRelativeURI;\n+import org.eclipse.xtext.xbase.lib.StringExtensions;\n+import org.junit.Assert;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.Timeout;\n+\n+/**\n+ * @author Dennis Huebner - Initial contribution and API\n+ */\n+public class GeneratorNodePerformanceTest {\n+\tprivate GeneratorNodeExtensions exts = new GeneratorNodeExtensions();\n+\n+//\tprivate static final int numberOfLines = 800_000 // Before x sec - after 4.6 sec\n+//\tprivate static final int numberOfLines = 80_000 // Before 89 sec - after 0.43 sec\n+\tprivate static final int numberOfLines = 40_000; // Before 20 sec - after\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t// 0.32 sec\n+//\tprivate static final int numberOfLines = 20_000 // Before 5 sec - after 0.25 sec\n+//\tprivate static final int numberOfLines = 10_000 // Before 1.8 sec - after 0.25 sec\n+\n+\t@Rule\n+\tpublic final Timeout timeout = new Timeout(1000, TimeUnit.MILLISECONDS);\n+\n+\t@Test\n+\tpublic void testBasicCreationAndProcessingPerformance() {\n+\t\tLocationData root = loc(0);\n+\t\tCompositeGeneratorNode node = exts.appendNewLine(exts.append(exts.trace(root), \"notindented\"));\n+\t\tfor (int i = 0; i < GeneratorNodePerformanceTest.numberOfLines; i++) {\n+\t\t\texts.appendNewLine(exts.append(\n+\t\t\t\t\texts.indent(exts.appendNewLine(exts.append(exts.trace(exts.indent(node), loc(1)), \"indented1\"))),\n+\t\t\t\t\t\"indented2\"));\n+\t\t}\n+\t\texts.append(exts.appendNewLine(node), \"dedented\");\n+\t\tGeneratorNodeProcessor processor = new GeneratorNodeProcessor();\n+\t\tGeneratorNodeProcessor.Result result = processor.process(node);\n+\t\tString resultAsString = null;\n+\t\tif (result != null) {\n+\t\t\tresultAsString = result.toString();\n+\t\t}\n+\t\tAssert.assertFalse(StringExtensions.isNullOrEmpty(resultAsString));", "originalCommit": "e40d88bffb2331a034d7d3c869a24ebf38397466", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTI3OTQ2MA==", "url": "https://github.com/eclipse/xtext-core/pull/1455#discussion_r415279460", "bodyText": "Copyright", "author": "tivervac", "createdAt": "2020-04-26T10:47:13Z", "path": "org.eclipse.xtext.tests/src/org/eclipse/xtext/parser/fragments/FragmentExsPlainParsingTest.java", "diffHunk": "@@ -14,12 +14,10 @@\n /**\n  * @author Sebastian Zarnekow - Initial contribution and API\n  */\n-@SuppressWarnings(\"all\")\n public class FragmentExsPlainParsingTest extends AbstractFragmentsPlainParsingTest {", "originalCommit": "e40d88bffb2331a034d7d3c869a24ebf38397466", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTI3OTQ5MQ==", "url": "https://github.com/eclipse/xtext-core/pull/1455#discussion_r415279491", "bodyText": "Copyright", "author": "tivervac", "createdAt": "2020-04-26T10:47:27Z", "path": "org.eclipse.xtext.tests/src/org/eclipse/xtext/generator/trace/TraceRegionToStringTest.xtend", "diffHunk": "@@ -8,15 +8,11 @@\n  *******************************************************************************/\n package org.eclipse.xtext.generator.trace\n \n-import java.util.List\n-import org.eclipse.xtend.lib.annotations.Accessors\n import org.eclipse.xtext.generator.trace.TraceRegionToStringTester.Location", "originalCommit": "e40d88bffb2331a034d7d3c869a24ebf38397466", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTI3OTUyOQ==", "url": "https://github.com/eclipse/xtext-core/pull/1455#discussion_r415279529", "bodyText": "Copyright", "author": "tivervac", "createdAt": "2020-04-26T10:47:44Z", "path": "org.eclipse.xtext.tests/src/org/eclipse/xtext/formatting2/regionaccess/internal/RegionAccessCommentsTest.xtend", "diffHunk": "@@ -24,7 +24,7 @@ import org.junit.runner.RunWith\n class RegionAccessCommentsTest {\n \t@Inject extension RegionAccessTestHelper\n \n-\t@Test def void testDeleteFirstRegion1() {\n+\t@Test def void testDeleteFirstRegion1() throws Exception {", "originalCommit": "e40d88bffb2331a034d7d3c869a24ebf38397466", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTI3OTU2MQ==", "url": "https://github.com/eclipse/xtext-core/pull/1455#discussion_r415279561", "bodyText": "Copyright", "author": "tivervac", "createdAt": "2020-04-26T10:47:55Z", "path": "org.eclipse.xtext.tests/src/org/eclipse/xtext/formatting2/regionaccess/internal/RegionAccessDiffTest.xtend", "diffHunk": "@@ -30,7 +30,7 @@ class RegionAccessDiffTest {\n \t@Inject extension RegionAccessTestHelper\n \t@Inject Serializer serializer\n ", "originalCommit": "e40d88bffb2331a034d7d3c869a24ebf38397466", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTI3OTc3Mw==", "url": "https://github.com/eclipse/xtext-core/pull/1455#discussion_r415279773", "bodyText": "Copyright", "author": "tivervac", "createdAt": "2020-04-26T10:48:54Z", "path": "org.eclipse.xtext.tests/src/org/eclipse/xtext/resource/containers/LiveShadowedChunkedContainerTest.xtend", "diffHunk": "@@ -10,12 +10,8 @@ package org.eclipse.xtext.resource.containers\n \n import com.google.inject.Inject\n import com.google.inject.Provider", "originalCommit": "e40d88bffb2331a034d7d3c869a24ebf38397466", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTI3OTgzMQ==", "url": "https://github.com/eclipse/xtext-core/pull/1455#discussion_r415279831", "bodyText": "final on all fields", "author": "tivervac", "createdAt": "2020-04-26T10:49:20Z", "path": "org.eclipse.xtext.tests/src/org/eclipse/xtext/resource/containers/ProjectConfig.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/**\n+ * Copyright (c) 2017, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.resource.containers;\n+\n+import java.io.File;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import org.eclipse.emf.common.util.URI;\n+import org.eclipse.xtext.util.UriUtil;\n+import org.eclipse.xtext.workspace.IProjectConfig;\n+import org.eclipse.xtext.workspace.ISourceFolder;\n+import org.eclipse.xtext.workspace.IWorkspaceConfig;\n+import org.eclipse.xtext.workspace.WorkspaceConfig;\n+\n+public class ProjectConfig implements IProjectConfig {\n+\tprivate URI path;", "originalCommit": "e40d88bffb2331a034d7d3c869a24ebf38397466", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTI3OTk2OA==", "url": "https://github.com/eclipse/xtext-core/pull/1455#discussion_r415279968", "bodyText": "Put the constructor as first method?", "author": "tivervac", "createdAt": "2020-04-26T10:50:01Z", "path": "org.eclipse.xtext.tests/src/org/eclipse/xtext/resource/containers/SourceFolder.java", "diffHunk": "@@ -0,0 +1,29 @@\n+/**\n+ * Copyright (c) 2017, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.resource.containers;\n+\n+import org.eclipse.emf.common.util.URI;\n+import org.eclipse.xtext.workspace.ISourceFolder;\n+\n+public class SourceFolder implements ISourceFolder {\n+\tprivate final URI path;\n+\n+\t@Override\n+\tpublic String getName() {\n+\t\treturn \"src\";\n+\t}\n+\n+\tpublic SourceFolder(URI path) {", "originalCommit": "e40d88bffb2331a034d7d3c869a24ebf38397466", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTI4MDE0Mg==", "url": "https://github.com/eclipse/xtext-core/pull/1455#discussion_r415280142", "bodyText": "Hmm should we also undo this?\nEPackage.Registry.INSTANCE.put(XMLTypePackage.eNS_URI, XMLTypePackage.eINSTANCE);", "author": "tivervac", "createdAt": "2020-04-26T10:51:01Z", "path": "org.eclipse.xtext.tests/src/org/eclipse/xtext/xtext/generator/KeywordHelperTest.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/**\n+ * Copyright (c) 2018, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.xtext.generator;\n+\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+\n+import org.eclipse.emf.ecore.EPackage;\n+import org.eclipse.emf.ecore.xml.type.XMLTypePackage;\n+import org.eclipse.xtext.Grammar;\n+import org.eclipse.xtext.XtextStandaloneSetup;\n+import org.eclipse.xtext.resource.XtextResource;\n+import org.eclipse.xtext.testing.GlobalRegistries;\n+import org.eclipse.xtext.tests.AbstractXtextTests;\n+import org.eclipse.xtext.xbase.lib.IterableExtensions;\n+import org.eclipse.xtext.xtext.generator.grammarAccess.GrammarAccessExtensions;\n+import org.eclipse.xtext.xtext.generator.parser.antlr.KeywordHelper;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+/**\n+ * @author Christian Dietrich - Initial contribution and API\n+ */\n+public class KeywordHelperTest extends AbstractXtextTests {\n+\tprivate GlobalRegistries.GlobalStateMemento globalStateMemento;\n+\n+\t@Before\n+\t@Override\n+\tpublic void setUp() throws Exception {\n+\t\tglobalStateMemento = GlobalRegistries.makeCopyOfGlobalState();\n+\t\tsuper.setUp();\n+\t\tEPackage.Registry.INSTANCE.put(XMLTypePackage.eNS_URI, XMLTypePackage.eINSTANCE);\n+\t\twith(XtextStandaloneSetup.class);\n+\t}\n+\n+\t@After\n+\t@Override\n+\tpublic void tearDown() throws Exception {\n+\t\tsuper.tearDown();\n+\t\tglobalStateMemento.restoreGlobalState();", "originalCommit": "e40d88bffb2331a034d7d3c869a24ebf38397466", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTI4Mjk3Ng==", "url": "https://github.com/eclipse/xtext-core/pull/1455#discussion_r415282976", "bodyText": "restoreGlobalState", "author": "cdietrich", "createdAt": "2020-04-26T11:05:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTI4MDE0Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTI4MDI5Ng==", "url": "https://github.com/eclipse/xtext-core/pull/1455#discussion_r415280296", "bodyText": "Style: move this up to the line above", "author": "tivervac", "createdAt": "2020-04-26T10:51:38Z", "path": "org.eclipse.xtext.tests/src/org/eclipse/xtext/xtext/wizard/cli/CliProjectsCreatorMainTest.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/**\n+ * Copyright (c) 2018, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.xtext.wizard.cli;\n+\n+import java.io.File;\n+import java.util.List;\n+\n+import org.eclipse.xtext.tests.TemporaryFolder;\n+import org.junit.Assert;\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+import com.google.common.collect.Lists;\n+\n+/**\n+ * @author Karsten Thoms (karsten.thoms@itemis.de) - Initial contribution and\n+ * API", "originalCommit": "e40d88bffb2331a034d7d3c869a24ebf38397466", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTI4MDcwOA==", "url": "https://github.com/eclipse/xtext-core/pull/1455#discussion_r415280708", "bodyText": "I would put this as the first method", "author": "tivervac", "createdAt": "2020-04-26T10:53:42Z", "path": "org.eclipse.xtext.xtext.wizard/src/org/eclipse/xtext/xtext/wizard/RuntimeTestProjectDescriptor.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/**\n+ * Copyright (c) 2015, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.xtext.wizard;\n+\n+import java.util.LinkedHashSet;\n+import java.util.Set;\n+\n+public class RuntimeTestProjectDescriptor extends TestProjectDescriptor {\n+\t@Override\n+\tpublic Set<ExternalDependency> getExternalDependencies() {\n+\t\tSet<ExternalDependency> deps = new LinkedHashSet<>();\n+\t\tdeps.addAll(super.getExternalDependencies());\n+\t\tExternalDependency xtextTesting = ExternalDependency.createXtextDependency(\"org.eclipse.xtext.testing\");\n+\t\txtextTesting.getMaven().setScope(Scope.TESTCOMPILE);\n+\t\tdeps.add(xtextTesting);\n+\t\tExternalDependency xbaseTesting = ExternalDependency.createXtextDependency(\"org.eclipse.xtext.xbase.testing\");\n+\t\txbaseTesting.getMaven().setScope(Scope.TESTCOMPILE);\n+\t\tdeps.add(xbaseTesting);\n+\t\treturn deps;\n+\t}\n+\n+\t@Override\n+\tpublic boolean isPartOfGradleBuild() {\n+\t\treturn getConfig().getPreferredBuildSystem() == BuildSystem.GRADLE;\n+\t}\n+\n+\t@Override\n+\tpublic boolean isPartOfMavenBuild() {\n+\t\treturn getConfig().getPreferredBuildSystem() == BuildSystem.MAVEN;\n+\t}\n+\n+\tpublic RuntimeTestProjectDescriptor(TestedProjectDescriptor testedProject) {", "originalCommit": "e40d88bffb2331a034d7d3c869a24ebf38397466", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTI4MDc1NQ==", "url": "https://github.com/eclipse/xtext-core/pull/1455#discussion_r415280755", "bodyText": "I'd put this as the first method", "author": "tivervac", "createdAt": "2020-04-26T10:53:56Z", "path": "org.eclipse.xtext.xtext.wizard/src/org/eclipse/xtext/xtext/wizard/UiTestProjectDescriptor.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/**\n+ * Copyright (c) 2015, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.xtext.wizard;\n+\n+import java.util.LinkedHashSet;\n+import java.util.Set;\n+\n+import org.eclipse.xtext.util.JUnitVersion;\n+\n+public class UiTestProjectDescriptor extends TestProjectDescriptor {\n+\t@Override\n+\tpublic Set<ExternalDependency> getExternalDependencies() {\n+\t\tSet<ExternalDependency> deps = new LinkedHashSet<>();\n+\t\tdeps.addAll(super.getExternalDependencies());\n+\t\tExternalDependency xtextTesting = ExternalDependency.createXtextDependency(\"org.eclipse.xtext.testing\");\n+\t\txtextTesting.getMaven().setScope(Scope.TESTCOMPILE);\n+\t\tdeps.add(xtextTesting);\n+\t\tExternalDependency xbaseTesting = ExternalDependency.createXtextDependency(\"org.eclipse.xtext.xbase.testing\");\n+\t\txbaseTesting.getMaven().setScope(Scope.TESTCOMPILE);\n+\t\tdeps.add(xbaseTesting);\n+\t\tif (JUnitVersion.JUNIT_4 == getConfig().getJunitVersion()) {\n+\t\t\tExternalDependency xtextJunit4 = ExternalDependency.createXtextDependency(\"org.eclipse.xtext.junit4\");\n+\t\t\txtextJunit4.getMaven().setScope(Scope.TESTCOMPILE);\n+\t\t\tdeps.add(xtextJunit4);\n+\t\t}\n+\t\tExternalDependency xbaseJunit = ExternalDependency.createXtextDependency(\"org.eclipse.xtext.xbase.junit\");\n+\t\txbaseJunit.getMaven().setScope(Scope.TESTCOMPILE);\n+\t\tdeps.add(xbaseJunit);\n+\t\treturn deps;\n+\t}\n+\n+\t@Override\n+\tpublic boolean isPartOfGradleBuild() {\n+\t\treturn false;\n+\t}\n+\n+\t@Override\n+\tpublic boolean isPartOfMavenBuild() {\n+\t\treturn true;\n+\t}\n+\n+\t@Override\n+\tpublic boolean needsUiHarness() {\n+\t\treturn true;\n+\t}\n+\n+\tpublic UiTestProjectDescriptor(TestedProjectDescriptor testedProject) {", "originalCommit": "e40d88bffb2331a034d7d3c869a24ebf38397466", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "4a29a0bf5d4244fdd52959fda3d2161ffbb7207d", "url": "https://github.com/eclipse/xtext-core/commit/4a29a0bf5d4244fdd52959fda3d2161ffbb7207d", "message": "[eclipse/xtext#1679] converted Xtend code to Java\n\nSigned-off-by: Christian Dietrich <christian.dietrich@itemis.de>", "committedDate": "2020-04-26T11:08:20Z", "type": "commit"}, {"oid": "4a29a0bf5d4244fdd52959fda3d2161ffbb7207d", "url": "https://github.com/eclipse/xtext-core/commit/4a29a0bf5d4244fdd52959fda3d2161ffbb7207d", "message": "[eclipse/xtext#1679] converted Xtend code to Java\n\nSigned-off-by: Christian Dietrich <christian.dietrich@itemis.de>", "committedDate": "2020-04-26T11:08:20Z", "type": "forcePushed"}]}