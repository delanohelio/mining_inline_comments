{"pr_number": 1486, "pr_title": "Added support for Java stub generation in the JUnitFragment", "pr_createdAt": "2020-05-11T10:49:08Z", "pr_url": "https://github.com/eclipse/xtext-core/pull/1486", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk2MjQ1OQ==", "url": "https://github.com/eclipse/xtext-core/pull/1486#discussion_r422962459", "bodyText": "wonder if we should call super.setGenerateXtendStub too", "author": "cdietrich", "createdAt": "2020-05-11T11:06:47Z", "path": "org.eclipse.xtext.xtext.generator/src/org/eclipse/xtext/xtext/generator/junit/JUnitFragment.xtend", "diffHunk": "@@ -18,40 +18,51 @@ import org.eclipse.xtext.xtext.generator.XtextGeneratorNaming\n import org.eclipse.xtext.xtext.generator.model.FileAccessFactory\n import org.eclipse.xtext.xtext.generator.model.JavaFileAccess\n import org.eclipse.xtext.xtext.generator.model.TypeReference\n+import org.eclipse.xtext.xtext.generator.util.BooleanGeneratorOption\n \n import static extension org.eclipse.xtext.GrammarUtil.*\n \n /**\n  * @since 2.14\n  */\n class JUnitFragment extends AbstractStubGeneratingFragment {\n-\t\n+\n \t@Inject extension XtextGeneratorNaming\n \t@Inject FileAccessFactory fileAccessFactory\n-\t\n+\n \t@Accessors(PUBLIC_SETTER)\n \tboolean useDeprecatedClasses\n-\t\n+\n \t@Accessors(PUBLIC_SETTER)\n \tboolean skipXbaseTestingPackage\n-\t\n+\n \tJUnitVersion junitVersion = JUnitVersion.JUNIT_4\n \t\n-\tdef void setJunitVersion (String version) {\n-\t\tjunitVersion = JUnitVersion.fromString(version)\n+\tfinal BooleanGeneratorOption generateXtendStub = new BooleanGeneratorOption(true);\n+\t\n+\toverride boolean isGenerateXtendStub() {\n+\t\treturn generateXtendStub.get();\n \t}\n \t\n+\toverride setGenerateXtendStub(boolean generateXtendStub) {\n+\t\tthis.generateXtendStub.set(generateXtendStub);", "originalCommit": "2d3a34c94f06fc1736fbd36373763585ef2c90ae", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk2NzA2Ng==", "url": "https://github.com/eclipse/xtext-core/pull/1486#discussion_r422967066", "bodyText": "I don't think it is required. JUnitFragment no more uses the generateXtendStub from the superclass.", "author": "nbhusare", "createdAt": "2020-05-11T11:16:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk2MjQ1OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzA4MjcxNw==", "url": "https://github.com/eclipse/xtext-core/pull/1486#discussion_r423082717", "bodyText": "This field here smells like a hack.\nCan we instead call setGenerateXtendStub(false) from our constructor and use the BooleanGenOption from the super class?", "author": "szarnekow", "createdAt": "2020-05-11T14:31:20Z", "path": "org.eclipse.xtext.xtext.generator/src/org/eclipse/xtext/xtext/generator/junit/JUnitFragment.xtend", "diffHunk": "@@ -18,40 +18,51 @@ import org.eclipse.xtext.xtext.generator.XtextGeneratorNaming\n import org.eclipse.xtext.xtext.generator.model.FileAccessFactory\n import org.eclipse.xtext.xtext.generator.model.JavaFileAccess\n import org.eclipse.xtext.xtext.generator.model.TypeReference\n+import org.eclipse.xtext.xtext.generator.util.BooleanGeneratorOption\n \n import static extension org.eclipse.xtext.GrammarUtil.*\n \n /**\n  * @since 2.14\n  */\n class JUnitFragment extends AbstractStubGeneratingFragment {\n-\t\n+\n \t@Inject extension XtextGeneratorNaming\n \t@Inject FileAccessFactory fileAccessFactory\n-\t\n+\n \t@Accessors(PUBLIC_SETTER)\n \tboolean useDeprecatedClasses\n-\t\n+\n \t@Accessors(PUBLIC_SETTER)\n \tboolean skipXbaseTestingPackage\n-\t\n+\n \tJUnitVersion junitVersion = JUnitVersion.JUNIT_4\n \t\n-\tdef void setJunitVersion (String version) {\n-\t\tjunitVersion = JUnitVersion.fromString(version)\n+\tfinal BooleanGeneratorOption generateXtendStub = new BooleanGeneratorOption(true);", "originalCommit": "2d3a34c94f06fc1736fbd36373763585ef2c90ae", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzA5MDY5Mg==", "url": "https://github.com/eclipse/xtext-core/pull/1486#discussion_r423090692", "bodyText": "something we should try. this idea did not came to my mind.", "author": "cdietrich", "createdAt": "2020-05-11T14:42:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzA4MjcxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUyNTA0OA==", "url": "https://github.com/eclipse/xtext-core/pull/1486#discussion_r423525048", "bodyText": "It didn't occur to me either.\nUpdated the code. Kindly review.", "author": "nbhusare", "createdAt": "2020-05-12T07:39:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzA4MjcxNw=="}], "type": "inlineReview"}, {"oid": "ad35a77cb65d9e1747923650df223576c9d18858", "url": "https://github.com/eclipse/xtext-core/commit/ad35a77cb65d9e1747923650df223576c9d18858", "message": "Added support for Java stub generation\n\nSigned-off-by: nbhusare <neerajbhusare@gmail.com>", "committedDate": "2020-05-12T08:32:21Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzU4OTk1OA==", "url": "https://github.com/eclipse/xtext-core/pull/1486#discussion_r423589958", "bodyText": "A small comment why this was done could be helpful since we don't have decent test coverage", "author": "szarnekow", "createdAt": "2020-05-12T09:21:47Z", "path": "org.eclipse.xtext.xtext.generator/src/org/eclipse/xtext/xtext/generator/junit/JUnitFragment.xtend", "diffHunk": "@@ -25,33 +25,38 @@ import static extension org.eclipse.xtext.GrammarUtil.*\n  * @since 2.14\n  */\n class JUnitFragment extends AbstractStubGeneratingFragment {\n-\t\n+\n \t@Inject extension XtextGeneratorNaming\n \t@Inject FileAccessFactory fileAccessFactory\n-\t\n+\n \t@Accessors(PUBLIC_SETTER)\n \tboolean useDeprecatedClasses\n-\t\n+\n \t@Accessors(PUBLIC_SETTER)\n \tboolean skipXbaseTestingPackage\n-\t\n+\n \tJUnitVersion junitVersion = JUnitVersion.JUNIT_4\n \t\n-\tdef void setJunitVersion (String version) {\n-\t\tjunitVersion = JUnitVersion.fromString(version)\n+\t\n+\tnew() {\n+\t\tgenerateXtendStub = true", "originalCommit": "ad35a77cb65d9e1747923650df223576c9d18858", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzc0MDA0Mg==", "url": "https://github.com/eclipse/xtext-core/pull/1486#discussion_r423740042", "bodyText": "Done.", "author": "nbhusare", "createdAt": "2020-05-12T13:38:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzU4OTk1OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzU5MDMzNQ==", "url": "https://github.com/eclipse/xtext-core/pull/1486#discussion_r423590335", "bodyText": "Shall we create Strings.join(..) instead?", "author": "szarnekow", "createdAt": "2020-05-12T09:22:24Z", "path": "org.eclipse.xtext.xtext.generator/src/org/eclipse/xtext/xtext/generator/junit/JUnitFragment.xtend", "diffHunk": "@@ -147,7 +157,54 @@ class JUnitFragment extends AbstractStubGeneratingFragment {\n \t\t\t}\n \t\t''')\n \t}\n-\t\n+\n+\tdef protected JavaFileAccess generateJavaExampleRuntimeTest() {\n+\t\tval xtextRunner = new TypeReference(testingPackage + \".XtextRunner\")\n+\t\tval runWith = new TypeReference(\"org.junit.runner.RunWith\")\n+\t\tval extendWith = new TypeReference(\"org.junit.jupiter.api.extension.ExtendWith\")\n+\t\tval injectionExtension = new TypeReference(\"org.eclipse.xtext.testing.extensions.InjectionExtension\")\n+\t\tval injectWith = new TypeReference(testingPackage + \".InjectWith\")\n+\t\tval parseHelper = new TypeReference(testingPackage + \".util.ParseHelper\")\n+\t\tval test = switch (junitVersion) {\n+\t\t\tcase JUnitVersion.JUNIT_4: new TypeReference(\"org.junit.Test\")\n+\t\t\tcase JUnitVersion.JUNIT_5: new TypeReference(\"org.junit.jupiter.api.Test\")\n+\t\t}\n+\t\tval assert = switch (junitVersion) {\n+\t\t\tcase JUnitVersion.JUNIT_4: new TypeReference(\"org.junit.Assert\")\n+\t\t\tcase JUnitVersion.JUNIT_5: new TypeReference(\"org.junit.jupiter.api.Assertions\")\n+\t\t}\n+\t\tval rootType = new TypeReference(grammar.rules.head.type.classifier as EClass, grammar.eResource.resourceSet)\n+\t\tval list = new TypeReference(\"java.util.List\")\n+\t\tval diagnostic = new TypeReference(\"org.eclipse.emf.ecore.resource\", \"Resource.Diagnostic\")\n+\t\tval iterableExtensions = new TypeReference(\"org.eclipse.xtext.xbase.lib.IterableExtensions\")\n+\t\treturn fileAccessFactory.createJavaFile(exampleRuntimeTest, '''\n+\t\t\t\ufffdIF junitVersion==JUnitVersion.JUNIT_4\ufffd\n+\t\t\t\t@\ufffdrunWith\ufffd(\ufffdxtextRunner\ufffd.class)\n+\t\t\t\ufffdENDIF\ufffd\n+\t\t\t\ufffdIF junitVersion==JUnitVersion.JUNIT_5\ufffd\n+\t\t\t\t@\ufffdextendWith\ufffd(\ufffdinjectionExtension\ufffd.class)\n+\t\t\t\ufffdENDIF\ufffd\n+\t\t\t@\ufffdinjectWith\ufffd(\ufffdinjectorProvider\ufffd.class)\n+\t\t\tpublic class \ufffdexampleRuntimeTest\ufffd {\n+\t\t\t\t@\ufffdInject\ufffd\n+\t\t\t\tprivate \ufffdparseHelper\ufffd<\ufffdrootType\ufffd> parseHelper;\n+\t\t\t\t\n+\t\t\t\t@\ufffdtest\ufffd\n+\t\t\t\tpublic void loadModel() throws Exception {\n+\t\t\t\t\tModel result = parseHelper.parse(\"Hello Xtext!\");\n+\t\t\t\t\t\ufffdassert\ufffd.assertNotNull(result);\n+\t\t\t\t\t\ufffdlist\ufffd<\ufffddiagnostic\ufffd> errors = result.eResource().getErrors();\n+\t\t\t\t\t\ufffdIF junitVersion==JUnitVersion.JUNIT_4\ufffd\n+\t\t\t\t\t\t\ufffdassert\ufffd.assertTrue(\"Unexpected errors: \" + \ufffditerableExtensions\ufffd.join(errors, \", \"), errors.isEmpty());", "originalCommit": "ad35a77cb65d9e1747923650df223576c9d18858", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzY1MjYzOQ==", "url": "https://github.com/eclipse/xtext-core/pull/1486#discussion_r423652639", "bodyText": "Please ignore this suggestion.", "author": "szarnekow", "createdAt": "2020-05-12T11:13:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzU5MDMzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzY2NTQ1Ng==", "url": "https://github.com/eclipse/xtext-core/pull/1486#discussion_r423665456", "bodyText": "I am fine. The only downside is the added verbosity. I'll make the change if it is acceptable.\n\u00ablist\u00bb<\u00abdiagnostic\u00bb> diagnostics = result.eResource().getErrors();\nCharSequence[] errors = diagnostics.stream().map(Object::toString).toArray(CharSequence[] :: new);", "author": "nbhusare", "createdAt": "2020-05-12T11:38:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzU5MDMzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzY3OTAwNw==", "url": "https://github.com/eclipse/xtext-core/pull/1486#discussion_r423679007", "bodyText": "No, please don't go down that path. IterableExtensions.join(..) is a good fit here.", "author": "szarnekow", "createdAt": "2020-05-12T12:04:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzU5MDMzNQ=="}], "type": "inlineReview"}, {"oid": "6490c2070deb0755f8c0e11aa4b5c36717ed41aa", "url": "https://github.com/eclipse/xtext-core/commit/6490c2070deb0755f8c0e11aa4b5c36717ed41aa", "message": "Added support for Java stub generation\n\nSigned-off-by: nbhusare <neerajbhusare@gmail.com>", "committedDate": "2020-05-12T13:37:28Z", "type": "commit"}, {"oid": "6490c2070deb0755f8c0e11aa4b5c36717ed41aa", "url": "https://github.com/eclipse/xtext-core/commit/6490c2070deb0755f8c0e11aa4b5c36717ed41aa", "message": "Added support for Java stub generation\n\nSigned-off-by: nbhusare <neerajbhusare@gmail.com>", "committedDate": "2020-05-12T13:37:28Z", "type": "forcePushed"}]}