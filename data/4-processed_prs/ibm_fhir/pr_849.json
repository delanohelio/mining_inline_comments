{"pr_number": 849, "pr_title": "issue #632 _typeFilter support for Bulkdata Export jobs", "pr_createdAt": "2020-03-25T13:01:31Z", "pr_url": "https://github.com/IBM/FHIR/pull/849", "timeline": [{"oid": "76417c360047d6f9e71f8d80452856f0b101f0d3", "url": "https://github.com/IBM/FHIR/commit/76417c360047d6f9e71f8d80452856f0b101f0d3", "message": "#issue 632 _typeFilter support for bulkdataexport jobs\n\nSigned-off-by: Albert Wang <xuwang@us.ibm.com>", "committedDate": "2020-03-25T12:53:24Z", "type": "commit"}, {"oid": "82d5ae5ef97ab4871123f46a61762bb00e8a72e2", "url": "https://github.com/IBM/FHIR/commit/82d5ae5ef97ab4871123f46a61762bb00e8a72e2", "message": "issue #632 _typeFilter code drop 2\n\nSigned-off-by: Albert Wang <xuwang@us.ibm.com>", "committedDate": "2020-03-25T13:00:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzg3ODA4NQ==", "url": "https://github.com/IBM/FHIR/pull/849#discussion_r397878085", "bodyText": "Totally get why it was missed!", "author": "prb112", "createdAt": "2020-03-25T14:03:11Z", "path": "fhir-operation-bulkdata/src/main/java/com/ibm/fhir/operation/bulkdata/client/BulkDataClient.java", "diffHunk": "@@ -213,6 +213,10 @@ public String submit(Instant since, List<String> types, Map<String, String> prop\n             builder.fhirSearchFromDate(\"1970-01-01\");\n         }\n \n+        if (properties.get(BulkDataConstants.PARAM_TYPE_FILTER) != null) {\n+            builder.fhirTypeFilters(properties.get(BulkDataConstants.PARAM_TYPE_FILTER));\n+        }", "originalCommit": "82d5ae5ef97ab4871123f46a61762bb00e8a72e2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzg4MTU5NA==", "url": "https://github.com/IBM/FHIR/pull/849#discussion_r397881594", "bodyText": "why would it be null?", "author": "prb112", "createdAt": "2020-03-25T14:07:54Z", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkexport/group/ChunkReader.java", "diffHunk": "@@ -144,37 +159,48 @@ private void fillChunkDataBuffer(List<Member> patientRefs) throws Exception {\n                 }\n \n                 queryParameters.put(\"_sort\", Arrays.asList(new String[] { Constants.FHIR_SEARCH_LASTUPDATED }));\n-                searchContext = SearchUtil.parseQueryParameters(\"Patient\", patientId,\n-                        ModelSupport.getResourceType(resourceTypes.get(indexOfCurrentResourceType)), queryParameters, true);\n-                do {\n-                    searchContext.setPageSize(pageSize);\n-                    searchContext.setPageNumber(compartmentPageNum);\n-                    FHIRTransactionHelper txn = new FHIRTransactionHelper(fhirPersistence.getTransaction());\n-                    txn.begin();\n-                    FHIRPersistenceContext persistenceContext = FHIRPersistenceContextFactory.createPersistenceContext(null, searchContext);\n-                    List<Resource> resources2 = fhirPersistence.search(persistenceContext, resourceType).getResource();\n-                    txn.commit();\n-                    compartmentPageNum++;\n-\n-                    for (Resource res2 : resources2) {\n-                        if (res2 == null) {\n-                            continue;\n-                        }\n-                        try {\n-                            FHIRGenerator.generator(Format.JSON).generate(res2, chunkData.getBufferStream());\n-                            chunkData.getBufferStream().write(Constants.NDJSON_LINESEPERATOR);\n-                            resSubTotal++;\n-                        } catch (FHIRGeneratorException e) {\n-                            logger.log(Level.WARNING, \"fillChunkDataBuffer: Error while writing resources with id '\"\n-                                        + patientId + \"'\", e);\n-                        } catch (IOException e) {\n-                            logger.warning(\"fillChunkDataBuffer: chunkDataBuffer written error!\");\n-                            throw e;\n-                        }\n+\n+                for (Member patientRef : patientRefs) {\n+                    if (patientRef == null) {\n+                        continue;\n                     }\n \n-                } while (searchContext.getLastPageNumber() >= compartmentPageNum);\n-            }\n+                    String patientId =  patientRef.getEntity().getReference().getValue().substring(8);\n+                    searchContext = SearchUtil.parseQueryParameters(\"Patient\", patientId,\n+                            ModelSupport.getResourceType(resourceTypes.get(indexOfCurrentResourceType)), queryParameters, true);\n+                    do {\n+                        searchContext.setPageSize(pageSize);\n+                        searchContext.setPageNumber(compartmentPageNum);\n+                        FHIRTransactionHelper txn = new FHIRTransactionHelper(fhirPersistence.getTransaction());\n+                        txn.enroll();\n+                        FHIRPersistenceContext persistenceContext = FHIRPersistenceContextFactory.createPersistenceContext(null, searchContext);\n+                        List<Resource> resources2 = fhirPersistence.search(persistenceContext, resourceType).getResource();\n+                        txn.unenroll();\n+                        compartmentPageNum++;\n+\n+                        for (Resource res2 : resources2) {\n+                            if (res2 == null) {\n+                                continue;", "originalCommit": "82d5ae5ef97ab4871123f46a61762bb00e8a72e2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzg5MTc1MA==", "url": "https://github.com/IBM/FHIR/pull/849#discussion_r397891750", "bodyText": "just for code safety, routine check. :)", "author": "albertwang-ibm", "createdAt": "2020-03-25T14:21:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzg4MTU5NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzg4MjMyMA==", "url": "https://github.com/IBM/FHIR/pull/849#discussion_r397882320", "bodyText": "so this ends in a warning... does the whole job fail?", "author": "prb112", "createdAt": "2020-03-25T14:08:51Z", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkexport/group/ChunkReader.java", "diffHunk": "@@ -144,37 +159,48 @@ private void fillChunkDataBuffer(List<Member> patientRefs) throws Exception {\n                 }\n \n                 queryParameters.put(\"_sort\", Arrays.asList(new String[] { Constants.FHIR_SEARCH_LASTUPDATED }));\n-                searchContext = SearchUtil.parseQueryParameters(\"Patient\", patientId,\n-                        ModelSupport.getResourceType(resourceTypes.get(indexOfCurrentResourceType)), queryParameters, true);\n-                do {\n-                    searchContext.setPageSize(pageSize);\n-                    searchContext.setPageNumber(compartmentPageNum);\n-                    FHIRTransactionHelper txn = new FHIRTransactionHelper(fhirPersistence.getTransaction());\n-                    txn.begin();\n-                    FHIRPersistenceContext persistenceContext = FHIRPersistenceContextFactory.createPersistenceContext(null, searchContext);\n-                    List<Resource> resources2 = fhirPersistence.search(persistenceContext, resourceType).getResource();\n-                    txn.commit();\n-                    compartmentPageNum++;\n-\n-                    for (Resource res2 : resources2) {\n-                        if (res2 == null) {\n-                            continue;\n-                        }\n-                        try {\n-                            FHIRGenerator.generator(Format.JSON).generate(res2, chunkData.getBufferStream());\n-                            chunkData.getBufferStream().write(Constants.NDJSON_LINESEPERATOR);\n-                            resSubTotal++;\n-                        } catch (FHIRGeneratorException e) {\n-                            logger.log(Level.WARNING, \"fillChunkDataBuffer: Error while writing resources with id '\"\n-                                        + patientId + \"'\", e);\n-                        } catch (IOException e) {\n-                            logger.warning(\"fillChunkDataBuffer: chunkDataBuffer written error!\");\n-                            throw e;\n-                        }\n+\n+                for (Member patientRef : patientRefs) {\n+                    if (patientRef == null) {\n+                        continue;\n                     }\n \n-                } while (searchContext.getLastPageNumber() >= compartmentPageNum);\n-            }\n+                    String patientId =  patientRef.getEntity().getReference().getValue().substring(8);\n+                    searchContext = SearchUtil.parseQueryParameters(\"Patient\", patientId,\n+                            ModelSupport.getResourceType(resourceTypes.get(indexOfCurrentResourceType)), queryParameters, true);\n+                    do {\n+                        searchContext.setPageSize(pageSize);\n+                        searchContext.setPageNumber(compartmentPageNum);\n+                        FHIRTransactionHelper txn = new FHIRTransactionHelper(fhirPersistence.getTransaction());\n+                        txn.enroll();\n+                        FHIRPersistenceContext persistenceContext = FHIRPersistenceContextFactory.createPersistenceContext(null, searchContext);\n+                        List<Resource> resources2 = fhirPersistence.search(persistenceContext, resourceType).getResource();\n+                        txn.unenroll();\n+                        compartmentPageNum++;\n+\n+                        for (Resource res2 : resources2) {\n+                            if (res2 == null) {\n+                                continue;\n+                            }\n+                            try {\n+                                FHIRGenerator.generator(Format.JSON).generate(res2, chunkData.getBufferStream());\n+                                chunkData.getBufferStream().write(Constants.NDJSON_LINESEPERATOR);\n+                                resSubTotal++;\n+                            } catch (FHIRGeneratorException e) {\n+                                logger.log(Level.WARNING, \"fillChunkDataBuffer: Error while writing resources with id '\"", "originalCommit": "82d5ae5ef97ab4871123f46a61762bb00e8a72e2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzg5MjA1MA==", "url": "https://github.com/IBM/FHIR/pull/849#discussion_r397892050", "bodyText": "just logging and continue.", "author": "albertwang-ibm", "createdAt": "2020-03-25T14:21:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzg4MjMyMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzg4NTg4OA==", "url": "https://github.com/IBM/FHIR/pull/849#discussion_r397885888", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            List<String> searchCreteria = new ArrayList<>();\n          \n          \n            \n                            List<String> searchCriteria = new ArrayList<>();", "author": "prb112", "createdAt": "2020-03-25T14:13:49Z", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkexport/patient/ChunkReader.java", "diffHunk": "@@ -110,18 +121,23 @@ public ChunkReader() {\n \n     private void fillChunkDataBuffer(List<Resource> resources) throws Exception {\n         TransientUserData chunkData = (TransientUserData) jobContext.getTransientUserData();\n+        int indexOfCurrentTypeFilter = 0;\n         int compartmentPageNum = 1;\n         int resSubTotal = 0;\n         FHIRSearchContext searchContext;\n-        Class<? extends Resource> resourceType = ModelSupport\n-                .getResourceType(resourceTypes.get(indexOfCurrentResourceType));\n+        Class<? extends Resource> resourceType = ModelSupport.getResourceType(resourceTypes.get(indexOfCurrentResourceType));\n+\n+        if (searchParametersForResoureTypes == null ) {\n+            searchParametersForResoureTypes = BulkDataUtils.getSearchParemetersFromTypeFilters(fhirTypeFilters);\n+        }\n+\n         if (chunkData != null) {\n-            for (Resource res : resources) {\n-                if (res == null) {\n-                    continue;\n-                }\n-                Patient patient = (Patient) res;\n+            do {\n                 Map<String, List<String>> queryParameters = new HashMap<>();\n+                // Add the search parameters from the current typeFilter for current resource type.\n+                if (searchParametersForResoureTypes.get(resourceType) != null) {\n+                    queryParameters.putAll(searchParametersForResoureTypes.get(resourceType).get(indexOfCurrentTypeFilter));\n+                }\n                 List<String> searchCreteria = new ArrayList<>();", "originalCommit": "82d5ae5ef97ab4871123f46a61762bb00e8a72e2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzg5MjQ2NQ==", "url": "https://github.com/IBM/FHIR/pull/849#discussion_r397892465", "bodyText": "ha, good catch, let me refactor in my eclipse.", "author": "albertwang-ibm", "createdAt": "2020-03-25T14:22:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzg4NTg4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzg5NjgzMA==", "url": "https://github.com/IBM/FHIR/pull/849#discussion_r397896830", "bodyText": "done", "author": "albertwang-ibm", "createdAt": "2020-03-25T14:27:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzg4NTg4OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzg4NjY4MQ==", "url": "https://github.com/IBM/FHIR/pull/849#discussion_r397886681", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    List<String> searchCreteria = new ArrayList<String>();\n          \n          \n            \n                    List<String> searchCriteria = new ArrayList<String>();", "author": "prb112", "createdAt": "2020-03-25T14:14:50Z", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkexport/system/ChunkReader.java", "diffHunk": "@@ -194,11 +212,16 @@ public Object readItem() throws Exception {\n         FHIRPersistenceHelper fhirPersistenceHelper = new FHIRPersistenceHelper();\n         FHIRPersistence fhirPersistence = fhirPersistenceHelper.getFHIRPersistenceImplementation();\n         Class<? extends Resource> resourceType = ModelSupport\n-                .getResourceType(ResourceTypes.get(indexOfCurrentResourceType));\n+                .getResourceType(resourceTypes.get(indexOfCurrentResourceType));\n         FHIRSearchContext searchContext;\n         FHIRPersistenceContext persistenceContext;\n         Map<String, List<String>> queryParameters = new HashMap<>();\n \n+        // Add the search parameters from the current typeFilter for current resource type.\n+        if (searchParametersForResoureTypes.get(resourceType) != null) {\n+            queryParameters.putAll(searchParametersForResoureTypes.get(resourceType).get(indexOfCurrentTypeFilter));\n+        }\n+\n         List<String> searchCreteria = new ArrayList<String>();", "originalCommit": "82d5ae5ef97ab4871123f46a61762bb00e8a72e2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzg5NjcxNw==", "url": "https://github.com/IBM/FHIR/pull/849#discussion_r397896717", "bodyText": "done", "author": "albertwang-ibm", "createdAt": "2020-03-25T14:27:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzg4NjY4MQ=="}], "type": "inlineReview"}, {"oid": "8471b2321b9bfafb1dcf1b28542d5a52a9fc901a", "url": "https://github.com/IBM/FHIR/commit/8471b2321b9bfafb1dcf1b28542d5a52a9fc901a", "message": "issue #632 fix typo error\n\nSigned-off-by: Albert Wang <xuwang@us.ibm.com>", "committedDate": "2020-03-25T14:26:41Z", "type": "commit"}, {"oid": "0b0ce5861e851bb1596281a47dcb672e738f8810", "url": "https://github.com/IBM/FHIR/commit/0b0ce5861e851bb1596281a47dcb672e738f8810", "message": "issue #632 duplication check and inherit group ChunkReader from patient\n\nSigned-off-by: Albert Wang <xuwang@us.ibm.com>", "committedDate": "2020-03-26T12:39:49Z", "type": "commit"}, {"oid": "14c9a3276164451d9f3a6d0f8d38a7fddcec7acd", "url": "https://github.com/IBM/FHIR/commit/14c9a3276164451d9f3a6d0f8d38a7fddcec7acd", "message": "issue #632 remove one debugging log line\n\nSigned-off-by: Albert Wang <xuwang@us.ibm.com>", "committedDate": "2020-03-26T12:40:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU1NDA2OQ==", "url": "https://github.com/IBM/FHIR/pull/849#discussion_r398554069", "bodyText": "Is there a specific HashSet method you are using? or best to make use of Set", "author": "prb112", "createdAt": "2020-03-26T13:03:16Z", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkexport/patient/ChunkReader.java", "diffHunk": "@@ -48,34 +50,43 @@\n  */\n public class ChunkReader extends AbstractItemReader {\n     private final static Logger logger = Logger.getLogger(ChunkReader.class.getName());\n-    int pageNum = 1;\n-    int indexOfCurrentResourceType = 0;\n+    protected int pageNum = 1;\n+    protected int indexOfCurrentResourceType = 0;\n     // Control the number of records to read in each \"item\".\n-    int pageSize = Constants.DEFAULT_SEARCH_PAGE_SIZE;\n+    protected int pageSize = Constants.DEFAULT_SEARCH_PAGE_SIZE;\n \n-    private FHIRPersistence fhirPersistence;\n-    private List<String> resourceTypes;\n+    protected FHIRPersistence fhirPersistence;\n+    protected List<String> resourceTypes;\n+\n+    // Search parameters for resource types gotten from fhir.typeFilters job parameter.\n+    Map<Class<? extends Resource>, List<Map<String, List<String>>>> searchParametersForResoureTypes = null;\n+    // Used to prevent the same resource from being exported multiple times when multiple _typeFilter for the same\n+    // resource type are used, which leads to multiple search requests which can have overlaps of resources.\n+    HashSet<String> loadedResourceIds = new HashSet<>();", "originalCommit": "14c9a3276164451d9f3a6d0f8d38a7fddcec7acd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU3NTM5MA==", "url": "https://github.com/IBM/FHIR/pull/849#discussion_r398575390", "bodyText": "changing the declaration to Set (interface) works, but what I really want is just a Hashset, not treeset, linkhashset etc, so I thought not need to use interface for the declaration.", "author": "albertwang-ibm", "createdAt": "2020-03-26T13:35:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU1NDA2OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU4OTY2OQ==", "url": "https://github.com/IBM/FHIR/pull/849#discussion_r398589669", "bodyText": "done", "author": "albertwang-ibm", "createdAt": "2020-03-26T13:53:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU1NDA2OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU1NTYyOA==", "url": "https://github.com/IBM/FHIR/pull/849#discussion_r398555628", "bodyText": "is there some documentation on this behavior?  Maybe add a comment here, just to explain when another developer sees this. (maybe on line 177)\nyou can combine this logic with line 177-178", "author": "prb112", "createdAt": "2020-03-26T13:05:51Z", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkexport/patient/ChunkReader.java", "diffHunk": "@@ -108,73 +126,88 @@ public ChunkReader() {\n         super();\n     }\n \n-    private void fillChunkDataBuffer(List<Resource> resources) throws Exception {\n+    protected void fillChunkDataBuffer(List<String> patientIds) throws Exception {\n         TransientUserData chunkData = (TransientUserData) jobContext.getTransientUserData();\n+        int indexOfCurrentTypeFilter = 0;\n         int compartmentPageNum = 1;\n         int resSubTotal = 0;\n         FHIRSearchContext searchContext;\n-        Class<? extends Resource> resourceType = ModelSupport\n-                .getResourceType(resourceTypes.get(indexOfCurrentResourceType));\n+        Class<? extends Resource> resourceType = ModelSupport.getResourceType(resourceTypes.get(indexOfCurrentResourceType));\n+\n         if (chunkData != null) {\n-            for (Resource res : resources) {\n-                if (res == null) {\n-                    continue;\n-                }\n-                Patient patient = (Patient) res;\n+            do {\n                 Map<String, List<String>> queryParameters = new HashMap<>();\n-                List<String> searchCreteria = new ArrayList<>();\n+                // Add the search parameters from the current typeFilter for current resource type.\n+                if (searchParametersForResoureTypes.get(resourceType) != null) {\n+                    queryParameters.putAll(searchParametersForResoureTypes.get(resourceType).get(indexOfCurrentTypeFilter));\n+                    if (searchParametersForResoureTypes.get(resourceType).size() > 1) {\n+                        isDoDuplicationCheck = true;\n+                    }\n+                }\n+                List<String> searchCriteria = new ArrayList<>();\n                 if (fhirSearchFromDate != null) {\n                     // https://www.hl7.org/fhir/r4/search.html#prefix\n-                    searchCreteria.add(\"ge\" + fhirSearchFromDate);\n+                    searchCriteria.add(\"ge\" + fhirSearchFromDate);\n                 }\n                 if (fhirSearchToDate != null) {\n-                    searchCreteria.add(\"lt\" + fhirSearchToDate);\n+                    searchCriteria.add(\"lt\" + fhirSearchToDate);\n                 }\n \n-                if (!searchCreteria.isEmpty()) {\n-                    queryParameters.put(Constants.FHIR_SEARCH_LASTUPDATED, searchCreteria);\n+                if (!searchCriteria.isEmpty()) {\n+                    queryParameters.put(Constants.FHIR_SEARCH_LASTUPDATED, searchCriteria);\n                 }\n \n                 queryParameters.put(\"_sort\", Arrays.asList(new String[] { Constants.FHIR_SEARCH_LASTUPDATED }));\n-                searchContext = SearchUtil.parseQueryParameters(\"Patient\", patient.getId(),\n-                        ModelSupport.getResourceType(resourceTypes.get(indexOfCurrentResourceType)), queryParameters, true);\n-                do {\n-                    searchContext.setPageSize(pageSize);\n-                    searchContext.setPageNumber(compartmentPageNum);\n-                    FHIRTransactionHelper txn = new FHIRTransactionHelper(fhirPersistence.getTransaction());\n-                    txn.begin();\n-                    FHIRPersistenceContext persistenceContext = FHIRPersistenceContextFactory.createPersistenceContext(null, searchContext);\n-                    List<Resource> resources2 = fhirPersistence.search(persistenceContext, resourceType).getResource();\n-                    txn.commit();\n-                    compartmentPageNum++;\n-\n-                    for (Resource res2 : resources2) {\n-                        if (res2 == null) {\n-                            continue;\n-                        }\n-                        try {\n-                            FHIRGenerator.generator(Format.JSON).generate(res2, chunkData.getBufferStream());\n-                            chunkData.getBufferStream().write(Constants.NDJSON_LINESEPERATOR);\n-                            resSubTotal++;\n-                        } catch (FHIRGeneratorException e) {\n-                            if (res.getId() != null) {\n-                                logger.log(Level.WARNING, \"fillChunkDataBuffer: Error while writing resources with id '\"\n-                                        + res.getId() + \"'\", e);\n-                            } else {\n-                                logger.log(Level.WARNING,\n-                                        \"fillChunkDataBuffer: Error while writing resources with unknown id\", e);\n+\n+                for (String patientId : patientIds) {\n+\n+                    searchContext = SearchUtil.parseQueryParameters(\"Patient\", patientId,\n+                            ModelSupport.getResourceType(resourceTypes.get(indexOfCurrentResourceType)), queryParameters, true);\n+                    do {\n+                        searchContext.setPageSize(pageSize);\n+                        searchContext.setPageNumber(compartmentPageNum);\n+                        FHIRTransactionHelper txn = new FHIRTransactionHelper(fhirPersistence.getTransaction());\n+                        txn.enroll();;\n+                        FHIRPersistenceContext persistenceContext = FHIRPersistenceContextFactory.createPersistenceContext(null, searchContext);\n+                        List<Resource> resources = fhirPersistence.search(persistenceContext, resourceType).getResource();\n+                        txn.unenroll();;\n+                        compartmentPageNum++;\n+\n+                        for (Resource res : resources) {\n+                            if (res == null || (isDoDuplicationCheck && loadedResourceIds.contains(res.getId()))) {\n+                                continue;\n+                            }\n+                            try {\n+                                FHIRGenerator.generator(Format.JSON).generate(res, chunkData.getBufferStream());\n+                                chunkData.getBufferStream().write(Constants.NDJSON_LINESEPERATOR);\n+                                resSubTotal++;\n+                                if (isDoDuplicationCheck) {", "originalCommit": "14c9a3276164451d9f3a6d0f8d38a7fddcec7acd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU2MDk0MQ==", "url": "https://github.com/IBM/FHIR/pull/849#discussion_r398560941", "bodyText": "please ignore", "author": "prb112", "createdAt": "2020-03-26T13:14:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU1NTYyOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU1NjEzNA==", "url": "https://github.com/IBM/FHIR/pull/849#discussion_r398556134", "bodyText": "should this be part of an operational outcome? warning only", "author": "prb112", "createdAt": "2020-03-26T13:06:39Z", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkexport/patient/ChunkReader.java", "diffHunk": "@@ -108,73 +126,88 @@ public ChunkReader() {\n         super();\n     }\n \n-    private void fillChunkDataBuffer(List<Resource> resources) throws Exception {\n+    protected void fillChunkDataBuffer(List<String> patientIds) throws Exception {\n         TransientUserData chunkData = (TransientUserData) jobContext.getTransientUserData();\n+        int indexOfCurrentTypeFilter = 0;\n         int compartmentPageNum = 1;\n         int resSubTotal = 0;\n         FHIRSearchContext searchContext;\n-        Class<? extends Resource> resourceType = ModelSupport\n-                .getResourceType(resourceTypes.get(indexOfCurrentResourceType));\n+        Class<? extends Resource> resourceType = ModelSupport.getResourceType(resourceTypes.get(indexOfCurrentResourceType));\n+\n         if (chunkData != null) {\n-            for (Resource res : resources) {\n-                if (res == null) {\n-                    continue;\n-                }\n-                Patient patient = (Patient) res;\n+            do {\n                 Map<String, List<String>> queryParameters = new HashMap<>();\n-                List<String> searchCreteria = new ArrayList<>();\n+                // Add the search parameters from the current typeFilter for current resource type.\n+                if (searchParametersForResoureTypes.get(resourceType) != null) {\n+                    queryParameters.putAll(searchParametersForResoureTypes.get(resourceType).get(indexOfCurrentTypeFilter));\n+                    if (searchParametersForResoureTypes.get(resourceType).size() > 1) {\n+                        isDoDuplicationCheck = true;\n+                    }\n+                }\n+                List<String> searchCriteria = new ArrayList<>();\n                 if (fhirSearchFromDate != null) {\n                     // https://www.hl7.org/fhir/r4/search.html#prefix\n-                    searchCreteria.add(\"ge\" + fhirSearchFromDate);\n+                    searchCriteria.add(\"ge\" + fhirSearchFromDate);\n                 }\n                 if (fhirSearchToDate != null) {\n-                    searchCreteria.add(\"lt\" + fhirSearchToDate);\n+                    searchCriteria.add(\"lt\" + fhirSearchToDate);\n                 }\n \n-                if (!searchCreteria.isEmpty()) {\n-                    queryParameters.put(Constants.FHIR_SEARCH_LASTUPDATED, searchCreteria);\n+                if (!searchCriteria.isEmpty()) {\n+                    queryParameters.put(Constants.FHIR_SEARCH_LASTUPDATED, searchCriteria);\n                 }\n \n                 queryParameters.put(\"_sort\", Arrays.asList(new String[] { Constants.FHIR_SEARCH_LASTUPDATED }));\n-                searchContext = SearchUtil.parseQueryParameters(\"Patient\", patient.getId(),\n-                        ModelSupport.getResourceType(resourceTypes.get(indexOfCurrentResourceType)), queryParameters, true);\n-                do {\n-                    searchContext.setPageSize(pageSize);\n-                    searchContext.setPageNumber(compartmentPageNum);\n-                    FHIRTransactionHelper txn = new FHIRTransactionHelper(fhirPersistence.getTransaction());\n-                    txn.begin();\n-                    FHIRPersistenceContext persistenceContext = FHIRPersistenceContextFactory.createPersistenceContext(null, searchContext);\n-                    List<Resource> resources2 = fhirPersistence.search(persistenceContext, resourceType).getResource();\n-                    txn.commit();\n-                    compartmentPageNum++;\n-\n-                    for (Resource res2 : resources2) {\n-                        if (res2 == null) {\n-                            continue;\n-                        }\n-                        try {\n-                            FHIRGenerator.generator(Format.JSON).generate(res2, chunkData.getBufferStream());\n-                            chunkData.getBufferStream().write(Constants.NDJSON_LINESEPERATOR);\n-                            resSubTotal++;\n-                        } catch (FHIRGeneratorException e) {\n-                            if (res.getId() != null) {\n-                                logger.log(Level.WARNING, \"fillChunkDataBuffer: Error while writing resources with id '\"\n-                                        + res.getId() + \"'\", e);\n-                            } else {\n-                                logger.log(Level.WARNING,\n-                                        \"fillChunkDataBuffer: Error while writing resources with unknown id\", e);\n+\n+                for (String patientId : patientIds) {\n+\n+                    searchContext = SearchUtil.parseQueryParameters(\"Patient\", patientId,\n+                            ModelSupport.getResourceType(resourceTypes.get(indexOfCurrentResourceType)), queryParameters, true);\n+                    do {\n+                        searchContext.setPageSize(pageSize);\n+                        searchContext.setPageNumber(compartmentPageNum);\n+                        FHIRTransactionHelper txn = new FHIRTransactionHelper(fhirPersistence.getTransaction());\n+                        txn.enroll();;\n+                        FHIRPersistenceContext persistenceContext = FHIRPersistenceContextFactory.createPersistenceContext(null, searchContext);\n+                        List<Resource> resources = fhirPersistence.search(persistenceContext, resourceType).getResource();\n+                        txn.unenroll();;\n+                        compartmentPageNum++;\n+\n+                        for (Resource res : resources) {\n+                            if (res == null || (isDoDuplicationCheck && loadedResourceIds.contains(res.getId()))) {\n+                                continue;\n+                            }\n+                            try {\n+                                FHIRGenerator.generator(Format.JSON).generate(res, chunkData.getBufferStream());\n+                                chunkData.getBufferStream().write(Constants.NDJSON_LINESEPERATOR);\n+                                resSubTotal++;\n+                                if (isDoDuplicationCheck) {\n+                                    loadedResourceIds.add(res.getId());\n+                                }\n+                            } catch (FHIRGeneratorException e) {\n+                                if (res.getId() != null) {\n+                                    logger.log(Level.WARNING, \"fillChunkDataBuffer: Error while writing resources with id '\"\n+                                            + res.getId() + \"'\", e);", "originalCommit": "14c9a3276164451d9f3a6d0f8d38a7fddcec7acd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU2OTM5NA==", "url": "https://github.com/IBM/FHIR/pull/849#discussion_r398569394", "bodyText": "export doesn't require operation outcome in fhir spec, and this is why I didn't add like what was did in import, so just logging ...", "author": "albertwang-ibm", "createdAt": "2020-03-26T13:26:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU1NjEzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU3NDUzMA==", "url": "https://github.com/IBM/FHIR/pull/849#discussion_r398574530", "bodyText": "definitely something we should think about.", "author": "prb112", "createdAt": "2020-03-26T13:33:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU1NjEzNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU1NjQ2NA==", "url": "https://github.com/IBM/FHIR/pull/849#discussion_r398556464", "bodyText": "same comment as prior one - operationaloutcome / warning", "author": "prb112", "createdAt": "2020-03-26T13:07:10Z", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkexport/patient/ChunkReader.java", "diffHunk": "@@ -108,73 +126,88 @@ public ChunkReader() {\n         super();\n     }\n \n-    private void fillChunkDataBuffer(List<Resource> resources) throws Exception {\n+    protected void fillChunkDataBuffer(List<String> patientIds) throws Exception {\n         TransientUserData chunkData = (TransientUserData) jobContext.getTransientUserData();\n+        int indexOfCurrentTypeFilter = 0;\n         int compartmentPageNum = 1;\n         int resSubTotal = 0;\n         FHIRSearchContext searchContext;\n-        Class<? extends Resource> resourceType = ModelSupport\n-                .getResourceType(resourceTypes.get(indexOfCurrentResourceType));\n+        Class<? extends Resource> resourceType = ModelSupport.getResourceType(resourceTypes.get(indexOfCurrentResourceType));\n+\n         if (chunkData != null) {\n-            for (Resource res : resources) {\n-                if (res == null) {\n-                    continue;\n-                }\n-                Patient patient = (Patient) res;\n+            do {\n                 Map<String, List<String>> queryParameters = new HashMap<>();\n-                List<String> searchCreteria = new ArrayList<>();\n+                // Add the search parameters from the current typeFilter for current resource type.\n+                if (searchParametersForResoureTypes.get(resourceType) != null) {\n+                    queryParameters.putAll(searchParametersForResoureTypes.get(resourceType).get(indexOfCurrentTypeFilter));\n+                    if (searchParametersForResoureTypes.get(resourceType).size() > 1) {\n+                        isDoDuplicationCheck = true;\n+                    }\n+                }\n+                List<String> searchCriteria = new ArrayList<>();\n                 if (fhirSearchFromDate != null) {\n                     // https://www.hl7.org/fhir/r4/search.html#prefix\n-                    searchCreteria.add(\"ge\" + fhirSearchFromDate);\n+                    searchCriteria.add(\"ge\" + fhirSearchFromDate);\n                 }\n                 if (fhirSearchToDate != null) {\n-                    searchCreteria.add(\"lt\" + fhirSearchToDate);\n+                    searchCriteria.add(\"lt\" + fhirSearchToDate);\n                 }\n \n-                if (!searchCreteria.isEmpty()) {\n-                    queryParameters.put(Constants.FHIR_SEARCH_LASTUPDATED, searchCreteria);\n+                if (!searchCriteria.isEmpty()) {\n+                    queryParameters.put(Constants.FHIR_SEARCH_LASTUPDATED, searchCriteria);\n                 }\n \n                 queryParameters.put(\"_sort\", Arrays.asList(new String[] { Constants.FHIR_SEARCH_LASTUPDATED }));\n-                searchContext = SearchUtil.parseQueryParameters(\"Patient\", patient.getId(),\n-                        ModelSupport.getResourceType(resourceTypes.get(indexOfCurrentResourceType)), queryParameters, true);\n-                do {\n-                    searchContext.setPageSize(pageSize);\n-                    searchContext.setPageNumber(compartmentPageNum);\n-                    FHIRTransactionHelper txn = new FHIRTransactionHelper(fhirPersistence.getTransaction());\n-                    txn.begin();\n-                    FHIRPersistenceContext persistenceContext = FHIRPersistenceContextFactory.createPersistenceContext(null, searchContext);\n-                    List<Resource> resources2 = fhirPersistence.search(persistenceContext, resourceType).getResource();\n-                    txn.commit();\n-                    compartmentPageNum++;\n-\n-                    for (Resource res2 : resources2) {\n-                        if (res2 == null) {\n-                            continue;\n-                        }\n-                        try {\n-                            FHIRGenerator.generator(Format.JSON).generate(res2, chunkData.getBufferStream());\n-                            chunkData.getBufferStream().write(Constants.NDJSON_LINESEPERATOR);\n-                            resSubTotal++;\n-                        } catch (FHIRGeneratorException e) {\n-                            if (res.getId() != null) {\n-                                logger.log(Level.WARNING, \"fillChunkDataBuffer: Error while writing resources with id '\"\n-                                        + res.getId() + \"'\", e);\n-                            } else {\n-                                logger.log(Level.WARNING,\n-                                        \"fillChunkDataBuffer: Error while writing resources with unknown id\", e);\n+\n+                for (String patientId : patientIds) {\n+\n+                    searchContext = SearchUtil.parseQueryParameters(\"Patient\", patientId,\n+                            ModelSupport.getResourceType(resourceTypes.get(indexOfCurrentResourceType)), queryParameters, true);\n+                    do {\n+                        searchContext.setPageSize(pageSize);\n+                        searchContext.setPageNumber(compartmentPageNum);\n+                        FHIRTransactionHelper txn = new FHIRTransactionHelper(fhirPersistence.getTransaction());\n+                        txn.enroll();;\n+                        FHIRPersistenceContext persistenceContext = FHIRPersistenceContextFactory.createPersistenceContext(null, searchContext);\n+                        List<Resource> resources = fhirPersistence.search(persistenceContext, resourceType).getResource();\n+                        txn.unenroll();;\n+                        compartmentPageNum++;\n+\n+                        for (Resource res : resources) {\n+                            if (res == null || (isDoDuplicationCheck && loadedResourceIds.contains(res.getId()))) {\n+                                continue;\n+                            }\n+                            try {\n+                                FHIRGenerator.generator(Format.JSON).generate(res, chunkData.getBufferStream());\n+                                chunkData.getBufferStream().write(Constants.NDJSON_LINESEPERATOR);\n+                                resSubTotal++;\n+                                if (isDoDuplicationCheck) {\n+                                    loadedResourceIds.add(res.getId());\n+                                }\n+                            } catch (FHIRGeneratorException e) {\n+                                if (res.getId() != null) {\n+                                    logger.log(Level.WARNING, \"fillChunkDataBuffer: Error while writing resources with id '\"\n+                                            + res.getId() + \"'\", e);\n+                                } else {\n+                                    logger.log(Level.WARNING,", "originalCommit": "14c9a3276164451d9f3a6d0f8d38a7fddcec7acd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU3NTc4Ng==", "url": "https://github.com/IBM/FHIR/pull/849#discussion_r398575786", "bodyText": "export doesn't require operation outcome in fhir spec, and this is why I didn't add like what was did in import, so just logging ...", "author": "albertwang-ibm", "createdAt": "2020-03-26T13:35:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU1NjQ2NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU1NjkyOA==", "url": "https://github.com/IBM/FHIR/pull/849#discussion_r398556928", "bodyText": "this didn't occur to me earlier, maybe wrap this in isLogLevel", "author": "prb112", "createdAt": "2020-03-26T13:07:52Z", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkexport/patient/ChunkReader.java", "diffHunk": "@@ -108,73 +126,88 @@ public ChunkReader() {\n         super();\n     }\n \n-    private void fillChunkDataBuffer(List<Resource> resources) throws Exception {\n+    protected void fillChunkDataBuffer(List<String> patientIds) throws Exception {\n         TransientUserData chunkData = (TransientUserData) jobContext.getTransientUserData();\n+        int indexOfCurrentTypeFilter = 0;\n         int compartmentPageNum = 1;\n         int resSubTotal = 0;\n         FHIRSearchContext searchContext;\n-        Class<? extends Resource> resourceType = ModelSupport\n-                .getResourceType(resourceTypes.get(indexOfCurrentResourceType));\n+        Class<? extends Resource> resourceType = ModelSupport.getResourceType(resourceTypes.get(indexOfCurrentResourceType));\n+\n         if (chunkData != null) {\n-            for (Resource res : resources) {\n-                if (res == null) {\n-                    continue;\n-                }\n-                Patient patient = (Patient) res;\n+            do {\n                 Map<String, List<String>> queryParameters = new HashMap<>();\n-                List<String> searchCreteria = new ArrayList<>();\n+                // Add the search parameters from the current typeFilter for current resource type.\n+                if (searchParametersForResoureTypes.get(resourceType) != null) {\n+                    queryParameters.putAll(searchParametersForResoureTypes.get(resourceType).get(indexOfCurrentTypeFilter));\n+                    if (searchParametersForResoureTypes.get(resourceType).size() > 1) {\n+                        isDoDuplicationCheck = true;\n+                    }\n+                }\n+                List<String> searchCriteria = new ArrayList<>();\n                 if (fhirSearchFromDate != null) {\n                     // https://www.hl7.org/fhir/r4/search.html#prefix\n-                    searchCreteria.add(\"ge\" + fhirSearchFromDate);\n+                    searchCriteria.add(\"ge\" + fhirSearchFromDate);\n                 }\n                 if (fhirSearchToDate != null) {\n-                    searchCreteria.add(\"lt\" + fhirSearchToDate);\n+                    searchCriteria.add(\"lt\" + fhirSearchToDate);\n                 }\n \n-                if (!searchCreteria.isEmpty()) {\n-                    queryParameters.put(Constants.FHIR_SEARCH_LASTUPDATED, searchCreteria);\n+                if (!searchCriteria.isEmpty()) {\n+                    queryParameters.put(Constants.FHIR_SEARCH_LASTUPDATED, searchCriteria);\n                 }\n \n                 queryParameters.put(\"_sort\", Arrays.asList(new String[] { Constants.FHIR_SEARCH_LASTUPDATED }));\n-                searchContext = SearchUtil.parseQueryParameters(\"Patient\", patient.getId(),\n-                        ModelSupport.getResourceType(resourceTypes.get(indexOfCurrentResourceType)), queryParameters, true);\n-                do {\n-                    searchContext.setPageSize(pageSize);\n-                    searchContext.setPageNumber(compartmentPageNum);\n-                    FHIRTransactionHelper txn = new FHIRTransactionHelper(fhirPersistence.getTransaction());\n-                    txn.begin();\n-                    FHIRPersistenceContext persistenceContext = FHIRPersistenceContextFactory.createPersistenceContext(null, searchContext);\n-                    List<Resource> resources2 = fhirPersistence.search(persistenceContext, resourceType).getResource();\n-                    txn.commit();\n-                    compartmentPageNum++;\n-\n-                    for (Resource res2 : resources2) {\n-                        if (res2 == null) {\n-                            continue;\n-                        }\n-                        try {\n-                            FHIRGenerator.generator(Format.JSON).generate(res2, chunkData.getBufferStream());\n-                            chunkData.getBufferStream().write(Constants.NDJSON_LINESEPERATOR);\n-                            resSubTotal++;\n-                        } catch (FHIRGeneratorException e) {\n-                            if (res.getId() != null) {\n-                                logger.log(Level.WARNING, \"fillChunkDataBuffer: Error while writing resources with id '\"\n-                                        + res.getId() + \"'\", e);\n-                            } else {\n-                                logger.log(Level.WARNING,\n-                                        \"fillChunkDataBuffer: Error while writing resources with unknown id\", e);\n+\n+                for (String patientId : patientIds) {\n+\n+                    searchContext = SearchUtil.parseQueryParameters(\"Patient\", patientId,\n+                            ModelSupport.getResourceType(resourceTypes.get(indexOfCurrentResourceType)), queryParameters, true);\n+                    do {\n+                        searchContext.setPageSize(pageSize);\n+                        searchContext.setPageNumber(compartmentPageNum);\n+                        FHIRTransactionHelper txn = new FHIRTransactionHelper(fhirPersistence.getTransaction());\n+                        txn.enroll();;\n+                        FHIRPersistenceContext persistenceContext = FHIRPersistenceContextFactory.createPersistenceContext(null, searchContext);\n+                        List<Resource> resources = fhirPersistence.search(persistenceContext, resourceType).getResource();\n+                        txn.unenroll();;\n+                        compartmentPageNum++;\n+\n+                        for (Resource res : resources) {\n+                            if (res == null || (isDoDuplicationCheck && loadedResourceIds.contains(res.getId()))) {\n+                                continue;\n+                            }\n+                            try {\n+                                FHIRGenerator.generator(Format.JSON).generate(res, chunkData.getBufferStream());\n+                                chunkData.getBufferStream().write(Constants.NDJSON_LINESEPERATOR);\n+                                resSubTotal++;\n+                                if (isDoDuplicationCheck) {\n+                                    loadedResourceIds.add(res.getId());\n+                                }\n+                            } catch (FHIRGeneratorException e) {\n+                                if (res.getId() != null) {\n+                                    logger.log(Level.WARNING, \"fillChunkDataBuffer: Error while writing resources with id '\"\n+                                            + res.getId() + \"'\", e);\n+                                } else {\n+                                    logger.log(Level.WARNING,\n+                                            \"fillChunkDataBuffer: Error while writing resources with unknown id\", e);\n+                                }\n+                            } catch (IOException e) {\n+                                logger.warning(\"fillChunkDataBuffer: chunkDataBuffer written error!\");\n+                                throw e;\n                             }\n-                        } catch (IOException e) {\n-                            logger.warning(\"fillChunkDataBuffer: chunkDataBuffer written error!\");\n-                            throw e;\n                         }\n-                    }\n \n-                } while (searchContext.getLastPageNumber() >= compartmentPageNum);\n-            }\n+                    } while (searchContext.getLastPageNumber() >= compartmentPageNum);\n+                }\n+\n+                indexOfCurrentTypeFilter++;\n+            } while (searchParametersForResoureTypes.get(resourceType) != null && indexOfCurrentTypeFilter < searchParametersForResoureTypes.get(resourceType).size());\n+\n             chunkData.setCurrentPartResourceNum(chunkData.getCurrentPartResourceNum() + resSubTotal);\n             logger.fine(\"fillChunkDataBuffer: Processed resources - \" + resSubTotal + \"; Bufferred data size - \"", "originalCommit": "14c9a3276164451d9f3a6d0f8d38a7fddcec7acd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU2OTg5NA==", "url": "https://github.com/IBM/FHIR/pull/849#discussion_r398569894", "bodyText": "sounds good, let me change it.", "author": "albertwang-ibm", "createdAt": "2020-03-26T13:27:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU1NjkyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU4OTUyMQ==", "url": "https://github.com/IBM/FHIR/pull/849#discussion_r398589521", "bodyText": "done", "author": "albertwang-ibm", "createdAt": "2020-03-26T13:53:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU1NjkyOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU1OTE1Ng==", "url": "https://github.com/IBM/FHIR/pull/849#discussion_r398559156", "bodyText": "I know we had a similar pattern in this code before with clear.\nI see this and I think... are there unintended side effects if not properly managed.\nMaybe add a explanation of the behavior to the initial definition.", "author": "prb112", "createdAt": "2020-03-26T13:11:21Z", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkexport/patient/ChunkReader.java", "diffHunk": "@@ -205,27 +227,11 @@ public Object readItem() throws Exception {\n                 pageNum = 1;\n                 chunkData.setPartNum(1);\n                 indexOfCurrentResourceType++;\n-            }\n-        }\n-        if (fhirTenant == null) {\n-            fhirTenant = Constants.DEFAULT_FHIR_TENANT;\n-            logger.fine(\"readItem: Set tenant to default!\");\n-        }\n-        if (fhirDatastoreId == null) {\n-            fhirDatastoreId = Constants.DEFAULT_FHIR_TENANT;\n-            logger.fine(\"readItem: Set DatastoreId to default!\");\n-        }\n-        if (fhirSearchPageSize != null) {\n-            try {\n-                pageSize = Integer.parseInt(fhirSearchPageSize);\n-                logger.fine(\"readItem: Set page size to \" + pageSize + \".\");\n-            } catch (Exception e) {\n-                logger.warning(\"readItem: Set page size to default(\" + Constants.DEFAULT_SEARCH_PAGE_SIZE + \").\");\n+                isDoDuplicationCheck = false;\n+                loadedResourceIds.clear();", "originalCommit": "14c9a3276164451d9f3a6d0f8d38a7fddcec7acd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU3NjQ1Ng==", "url": "https://github.com/IBM/FHIR/pull/849#discussion_r398576456", "bodyText": "make sense, let me add.", "author": "albertwang-ibm", "createdAt": "2020-03-26T13:36:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU1OTE1Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU4OTM4Mg==", "url": "https://github.com/IBM/FHIR/pull/849#discussion_r398589382", "bodyText": "done", "author": "albertwang-ibm", "createdAt": "2020-03-26T13:53:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU1OTE1Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU1OTg1Ng==", "url": "https://github.com/IBM/FHIR/pull/849#discussion_r398559856", "bodyText": "Nice line of code.  Very handy.", "author": "prb112", "createdAt": "2020-03-26T13:12:25Z", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkexport/patient/ChunkReader.java", "diffHunk": "@@ -268,7 +273,11 @@ public Object readItem() throws Exception {\n \n         if (resources != null) {\n             logger.fine(\"readItem(\" + resourceTypes.get(indexOfCurrentResourceType) + \"): loaded patients number - \" + resources.size());\n-            fillChunkDataBuffer(resources);\n+\n+            List<String> patientIds = resources.stream().filter(item -> item.getId() != null).map(item -> item.getId()).collect(Collectors.toList());", "originalCommit": "14c9a3276164451d9f3a6d0f8d38a7fddcec7acd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU3NjY4Nw==", "url": "https://github.com/IBM/FHIR/pull/849#discussion_r398576687", "bodyText": "yeah, sometime I like java8. :)", "author": "albertwang-ibm", "createdAt": "2020-03-26T13:36:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU1OTg1Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU2MDI3Nw==", "url": "https://github.com/IBM/FHIR/pull/849#discussion_r398560277", "bodyText": "same comment on HashSet", "author": "prb112", "createdAt": "2020-03-26T13:13:04Z", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkexport/system/ChunkReader.java", "diffHunk": "@@ -50,6 +52,17 @@\n     int indexOfCurrentResourceType = 0;\n     // Control the number of records to read in each \"item\".\n     int pageSize = Constants.DEFAULT_SEARCH_PAGE_SIZE;\n+    // Search parameters for resource types gotten from fhir.typeFilters job parameter.\n+    Map<Class<? extends Resource>, List<Map<String, List<String>>>> searchParametersForResoureTypes = null;\n+    int indexOfCurrentTypeFilter = 0;\n+\n+    // Used to prevent the same resource from being exported multiple times when multiple _typeFilter for the same\n+    // resource type are used, which leads to multiple search requests which can have overlaps of resources.\n+    HashSet<String> loadedResourceIds = new HashSet<>();", "originalCommit": "14c9a3276164451d9f3a6d0f8d38a7fddcec7acd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU4OTIwMA==", "url": "https://github.com/IBM/FHIR/pull/849#discussion_r398589200", "bodyText": "done", "author": "albertwang-ibm", "createdAt": "2020-03-26T13:53:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU2MDI3Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU2MDc2OA==", "url": "https://github.com/IBM/FHIR/pull/849#discussion_r398560768", "bodyText": "sorry I misunderstood the prior isDoDuplicationCheck logic", "author": "prb112", "createdAt": "2020-03-26T13:13:48Z", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkexport/system/ChunkReader.java", "diffHunk": "@@ -115,14 +132,17 @@ private void fillChunkDataBuffer(List<Resource> resources) throws Exception {\n         int resSubTotal = 0;\n         if (chunkData != null) {\n             for (Resource res : resources) {\n-                if (res == null) {\n+                if (res == null || (isDoDuplicationCheck && loadedResourceIds.contains(res.getId()))) {\n                     continue;\n                 }\n \n                 try {\n                     FHIRGenerator.generator(Format.JSON).generate(res, chunkData.getBufferStream());\n                     chunkData.getBufferStream().write(Constants.NDJSON_LINESEPERATOR);\n                     resSubTotal++;\n+                    if (isDoDuplicationCheck) {\n+                        loadedResourceIds.add(res.getId());", "originalCommit": "14c9a3276164451d9f3a6d0f8d38a7fddcec7acd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU2MTY4MQ==", "url": "https://github.com/IBM/FHIR/pull/849#discussion_r398561681", "bodyText": "just a thought, maybe put this in a utility class to process the query parameters", "author": "prb112", "createdAt": "2020-03-26T13:15:19Z", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkexport/system/ChunkReader.java", "diffHunk": "@@ -146,70 +166,59 @@ private void fillChunkDataBuffer(List<Resource> resources) throws Exception {\n \n     }\n \n-    /**\n-     * @see AbstractItemReader#readItem()\n-     */\n     @Override\n     public Object readItem() throws Exception {\n-        List<String> ResourceTypes = Arrays.asList(fhirResourceType.split(\"\\\\s*,\\\\s*\"));\n \n         TransientUserData chunkData = (TransientUserData) jobContext.getTransientUserData();\n+        // If the search already reaches the last page, then check if need to move to the next typeFilter or next resource type.\n         if (chunkData != null && pageNum > chunkData.getLastPageNum()) {\n-            if (ResourceTypes.size() == indexOfCurrentResourceType + 1) {\n-                // No more resource type and page to read, so return null to end the reading.\n-                return null;\n+            Class<? extends Resource> resourceType = ModelSupport.getResourceType(resourceTypes.get(indexOfCurrentResourceType));\n+            if (searchParametersForResoureTypes.get(resourceType) == null || searchParametersForResoureTypes.get(resourceType).size() <= indexOfCurrentTypeFilter + 1) {\n+                // If there is no more typeFilter to process for current resource type, then check if there is any more resource type to process.\n+                if (resourceTypes.size() == indexOfCurrentResourceType + 1) {\n+                    // No more resource type and page to read, so return null to end the reading.\n+                    return null;\n+                } else {\n+                    // More resource types to read, so reset pageNum, partNum and move resource type index to the next and reset indexOfCurrentTypeFilter.\n+                    pageNum = 1;\n+                    chunkData.setPartNum(1);\n+                    indexOfCurrentResourceType++;\n+                    indexOfCurrentTypeFilter = 0;\n+                    isDoDuplicationCheck = false;\n+                    loadedResourceIds.clear();\n+                }\n             } else {\n-                // More resource types to read, so reset pageNum, partNum and move resource type index to the next.\n+             // If there is more typeFilter to process for current resource type, then reset pageNum only and move to the next typeFilter.\n                 pageNum = 1;\n-                chunkData.setPartNum(1);\n-                indexOfCurrentResourceType++;\n+                indexOfCurrentTypeFilter++;\n             }\n         }\n-        if (fhirTenant == null) {\n-            fhirTenant = Constants.DEFAULT_FHIR_TENANT;\n-            logger.fine(\"readItem: Set tenant to default!\");\n-        }\n-        if (fhirDatastoreId == null) {\n-            fhirDatastoreId = Constants.DEFAULT_FHIR_TENANT;\n-            logger.fine(\"readItem: Set DatastoreId to default!\");\n-        }\n-        if (fhirSearchPageSize != null) {\n-            try {\n-                pageSize = Integer.parseInt(fhirSearchPageSize);\n-                logger.fine(\"readItem: Set page size to \" + pageSize + \".\");\n-            } catch (Exception e) {\n-                logger.warning(\"readItem: Set page size to default(\" + Constants.DEFAULT_SEARCH_PAGE_SIZE + \").\");\n-            }\n-        }\n-\n-        if (cosBucketObjectName != null\n-                && cosBucketObjectName.trim().length() > 0\n-                // Single COS object uploading is for single resource type export only.\n-                && ResourceTypes.size() == 1) {\n-            isSingleCosObject = true;\n-            logger.info(\"readItem: Use single COS object for uploading!\");\n-        }\n \n-        FHIRRequestContext.set(new FHIRRequestContext(fhirTenant, fhirDatastoreId));\n-        FHIRPersistenceHelper fhirPersistenceHelper = new FHIRPersistenceHelper();\n-        FHIRPersistence fhirPersistence = fhirPersistenceHelper.getFHIRPersistenceImplementation();\n         Class<? extends Resource> resourceType = ModelSupport\n-                .getResourceType(ResourceTypes.get(indexOfCurrentResourceType));\n+                .getResourceType(resourceTypes.get(indexOfCurrentResourceType));\n         FHIRSearchContext searchContext;\n         FHIRPersistenceContext persistenceContext;\n         Map<String, List<String>> queryParameters = new HashMap<>();\n \n-        List<String> searchCreteria = new ArrayList<String>();\n+        // Add the search parameters from the current typeFilter for current resource type.\n+        if (searchParametersForResoureTypes.get(resourceType) != null) {\n+            queryParameters.putAll(searchParametersForResoureTypes.get(resourceType).get(indexOfCurrentTypeFilter));\n+            if (searchParametersForResoureTypes.get(resourceType).size() > 1) {\n+                isDoDuplicationCheck = true;\n+            }\n+        }\n+\n+        List<String> searchCriteria = new ArrayList<String>();", "originalCommit": "14c9a3276164451d9f3a6d0f8d38a7fddcec7acd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU5NjMyOA==", "url": "https://github.com/IBM/FHIR/pull/849#discussion_r398596328", "bodyText": "en... good thought! will consider in the next big change for export jobs - issue #779 partitionize the export jobs.", "author": "albertwang-ibm", "createdAt": "2020-03-26T14:02:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU2MTY4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODYwNjY0Mg==", "url": "https://github.com/IBM/FHIR/pull/849#discussion_r398606642", "bodyText": "yeah - no worries - this was just a thought", "author": "prb112", "createdAt": "2020-03-26T14:16:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU2MTY4MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU2MTkyNw==", "url": "https://github.com/IBM/FHIR/pull/849#discussion_r398561927", "bodyText": "extra ;\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    txn.unenroll();;\n          \n          \n            \n                    txn.unenroll();", "author": "prb112", "createdAt": "2020-03-26T13:15:39Z", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkexport/system/ChunkReader.java", "diffHunk": "@@ -218,15 +227,14 @@ public Object readItem() throws Exception {\n         searchContext.setPageNumber(pageNum);\n         List<Resource> resources = null;\n         FHIRTransactionHelper txn = new FHIRTransactionHelper(fhirPersistence.getTransaction());\n-        txn.begin();\n+        txn.enroll();;\n         persistenceContext = FHIRPersistenceContextFactory.createPersistenceContext(null, searchContext);\n         resources = fhirPersistence.search(persistenceContext, resourceType).getResource();\n-        txn.commit();\n+        txn.unenroll();;", "originalCommit": "14c9a3276164451d9f3a6d0f8d38a7fddcec7acd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU2MjAyNQ==", "url": "https://github.com/IBM/FHIR/pull/849#discussion_r398562025", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    txn.enroll();;\n          \n          \n            \n                    txn.enroll();", "author": "prb112", "createdAt": "2020-03-26T13:15:47Z", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkexport/system/ChunkReader.java", "diffHunk": "@@ -218,15 +227,14 @@ public Object readItem() throws Exception {\n         searchContext.setPageNumber(pageNum);\n         List<Resource> resources = null;\n         FHIRTransactionHelper txn = new FHIRTransactionHelper(fhirPersistence.getTransaction());\n-        txn.begin();\n+        txn.enroll();;", "originalCommit": "14c9a3276164451d9f3a6d0f8d38a7fddcec7acd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU2MjI4MA==", "url": "https://github.com/IBM/FHIR/pull/849#discussion_r398562280", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    txn.enroll();;\n          \n          \n            \n                                    txn.enroll();", "author": "prb112", "createdAt": "2020-03-26T13:16:07Z", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkexport/patient/ChunkReader.java", "diffHunk": "@@ -108,73 +126,88 @@ public ChunkReader() {\n         super();\n     }\n \n-    private void fillChunkDataBuffer(List<Resource> resources) throws Exception {\n+    protected void fillChunkDataBuffer(List<String> patientIds) throws Exception {\n         TransientUserData chunkData = (TransientUserData) jobContext.getTransientUserData();\n+        int indexOfCurrentTypeFilter = 0;\n         int compartmentPageNum = 1;\n         int resSubTotal = 0;\n         FHIRSearchContext searchContext;\n-        Class<? extends Resource> resourceType = ModelSupport\n-                .getResourceType(resourceTypes.get(indexOfCurrentResourceType));\n+        Class<? extends Resource> resourceType = ModelSupport.getResourceType(resourceTypes.get(indexOfCurrentResourceType));\n+\n         if (chunkData != null) {\n-            for (Resource res : resources) {\n-                if (res == null) {\n-                    continue;\n-                }\n-                Patient patient = (Patient) res;\n+            do {\n                 Map<String, List<String>> queryParameters = new HashMap<>();\n-                List<String> searchCreteria = new ArrayList<>();\n+                // Add the search parameters from the current typeFilter for current resource type.\n+                if (searchParametersForResoureTypes.get(resourceType) != null) {\n+                    queryParameters.putAll(searchParametersForResoureTypes.get(resourceType).get(indexOfCurrentTypeFilter));\n+                    if (searchParametersForResoureTypes.get(resourceType).size() > 1) {\n+                        isDoDuplicationCheck = true;\n+                    }\n+                }\n+                List<String> searchCriteria = new ArrayList<>();\n                 if (fhirSearchFromDate != null) {\n                     // https://www.hl7.org/fhir/r4/search.html#prefix\n-                    searchCreteria.add(\"ge\" + fhirSearchFromDate);\n+                    searchCriteria.add(\"ge\" + fhirSearchFromDate);\n                 }\n                 if (fhirSearchToDate != null) {\n-                    searchCreteria.add(\"lt\" + fhirSearchToDate);\n+                    searchCriteria.add(\"lt\" + fhirSearchToDate);\n                 }\n \n-                if (!searchCreteria.isEmpty()) {\n-                    queryParameters.put(Constants.FHIR_SEARCH_LASTUPDATED, searchCreteria);\n+                if (!searchCriteria.isEmpty()) {\n+                    queryParameters.put(Constants.FHIR_SEARCH_LASTUPDATED, searchCriteria);\n                 }\n \n                 queryParameters.put(\"_sort\", Arrays.asList(new String[] { Constants.FHIR_SEARCH_LASTUPDATED }));\n-                searchContext = SearchUtil.parseQueryParameters(\"Patient\", patient.getId(),\n-                        ModelSupport.getResourceType(resourceTypes.get(indexOfCurrentResourceType)), queryParameters, true);\n-                do {\n-                    searchContext.setPageSize(pageSize);\n-                    searchContext.setPageNumber(compartmentPageNum);\n-                    FHIRTransactionHelper txn = new FHIRTransactionHelper(fhirPersistence.getTransaction());\n-                    txn.begin();\n-                    FHIRPersistenceContext persistenceContext = FHIRPersistenceContextFactory.createPersistenceContext(null, searchContext);\n-                    List<Resource> resources2 = fhirPersistence.search(persistenceContext, resourceType).getResource();\n-                    txn.commit();\n-                    compartmentPageNum++;\n-\n-                    for (Resource res2 : resources2) {\n-                        if (res2 == null) {\n-                            continue;\n-                        }\n-                        try {\n-                            FHIRGenerator.generator(Format.JSON).generate(res2, chunkData.getBufferStream());\n-                            chunkData.getBufferStream().write(Constants.NDJSON_LINESEPERATOR);\n-                            resSubTotal++;\n-                        } catch (FHIRGeneratorException e) {\n-                            if (res.getId() != null) {\n-                                logger.log(Level.WARNING, \"fillChunkDataBuffer: Error while writing resources with id '\"\n-                                        + res.getId() + \"'\", e);\n-                            } else {\n-                                logger.log(Level.WARNING,\n-                                        \"fillChunkDataBuffer: Error while writing resources with unknown id\", e);\n+\n+                for (String patientId : patientIds) {\n+\n+                    searchContext = SearchUtil.parseQueryParameters(\"Patient\", patientId,\n+                            ModelSupport.getResourceType(resourceTypes.get(indexOfCurrentResourceType)), queryParameters, true);\n+                    do {\n+                        searchContext.setPageSize(pageSize);\n+                        searchContext.setPageNumber(compartmentPageNum);\n+                        FHIRTransactionHelper txn = new FHIRTransactionHelper(fhirPersistence.getTransaction());\n+                        txn.enroll();;", "originalCommit": "14c9a3276164451d9f3a6d0f8d38a7fddcec7acd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU2MjM5Nw==", "url": "https://github.com/IBM/FHIR/pull/849#discussion_r398562397", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    txn.unenroll();;\n          \n          \n            \n                                    txn.unenroll();", "author": "prb112", "createdAt": "2020-03-26T13:16:15Z", "path": "fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkexport/patient/ChunkReader.java", "diffHunk": "@@ -108,73 +126,88 @@ public ChunkReader() {\n         super();\n     }\n \n-    private void fillChunkDataBuffer(List<Resource> resources) throws Exception {\n+    protected void fillChunkDataBuffer(List<String> patientIds) throws Exception {\n         TransientUserData chunkData = (TransientUserData) jobContext.getTransientUserData();\n+        int indexOfCurrentTypeFilter = 0;\n         int compartmentPageNum = 1;\n         int resSubTotal = 0;\n         FHIRSearchContext searchContext;\n-        Class<? extends Resource> resourceType = ModelSupport\n-                .getResourceType(resourceTypes.get(indexOfCurrentResourceType));\n+        Class<? extends Resource> resourceType = ModelSupport.getResourceType(resourceTypes.get(indexOfCurrentResourceType));\n+\n         if (chunkData != null) {\n-            for (Resource res : resources) {\n-                if (res == null) {\n-                    continue;\n-                }\n-                Patient patient = (Patient) res;\n+            do {\n                 Map<String, List<String>> queryParameters = new HashMap<>();\n-                List<String> searchCreteria = new ArrayList<>();\n+                // Add the search parameters from the current typeFilter for current resource type.\n+                if (searchParametersForResoureTypes.get(resourceType) != null) {\n+                    queryParameters.putAll(searchParametersForResoureTypes.get(resourceType).get(indexOfCurrentTypeFilter));\n+                    if (searchParametersForResoureTypes.get(resourceType).size() > 1) {\n+                        isDoDuplicationCheck = true;\n+                    }\n+                }\n+                List<String> searchCriteria = new ArrayList<>();\n                 if (fhirSearchFromDate != null) {\n                     // https://www.hl7.org/fhir/r4/search.html#prefix\n-                    searchCreteria.add(\"ge\" + fhirSearchFromDate);\n+                    searchCriteria.add(\"ge\" + fhirSearchFromDate);\n                 }\n                 if (fhirSearchToDate != null) {\n-                    searchCreteria.add(\"lt\" + fhirSearchToDate);\n+                    searchCriteria.add(\"lt\" + fhirSearchToDate);\n                 }\n \n-                if (!searchCreteria.isEmpty()) {\n-                    queryParameters.put(Constants.FHIR_SEARCH_LASTUPDATED, searchCreteria);\n+                if (!searchCriteria.isEmpty()) {\n+                    queryParameters.put(Constants.FHIR_SEARCH_LASTUPDATED, searchCriteria);\n                 }\n \n                 queryParameters.put(\"_sort\", Arrays.asList(new String[] { Constants.FHIR_SEARCH_LASTUPDATED }));\n-                searchContext = SearchUtil.parseQueryParameters(\"Patient\", patient.getId(),\n-                        ModelSupport.getResourceType(resourceTypes.get(indexOfCurrentResourceType)), queryParameters, true);\n-                do {\n-                    searchContext.setPageSize(pageSize);\n-                    searchContext.setPageNumber(compartmentPageNum);\n-                    FHIRTransactionHelper txn = new FHIRTransactionHelper(fhirPersistence.getTransaction());\n-                    txn.begin();\n-                    FHIRPersistenceContext persistenceContext = FHIRPersistenceContextFactory.createPersistenceContext(null, searchContext);\n-                    List<Resource> resources2 = fhirPersistence.search(persistenceContext, resourceType).getResource();\n-                    txn.commit();\n-                    compartmentPageNum++;\n-\n-                    for (Resource res2 : resources2) {\n-                        if (res2 == null) {\n-                            continue;\n-                        }\n-                        try {\n-                            FHIRGenerator.generator(Format.JSON).generate(res2, chunkData.getBufferStream());\n-                            chunkData.getBufferStream().write(Constants.NDJSON_LINESEPERATOR);\n-                            resSubTotal++;\n-                        } catch (FHIRGeneratorException e) {\n-                            if (res.getId() != null) {\n-                                logger.log(Level.WARNING, \"fillChunkDataBuffer: Error while writing resources with id '\"\n-                                        + res.getId() + \"'\", e);\n-                            } else {\n-                                logger.log(Level.WARNING,\n-                                        \"fillChunkDataBuffer: Error while writing resources with unknown id\", e);\n+\n+                for (String patientId : patientIds) {\n+\n+                    searchContext = SearchUtil.parseQueryParameters(\"Patient\", patientId,\n+                            ModelSupport.getResourceType(resourceTypes.get(indexOfCurrentResourceType)), queryParameters, true);\n+                    do {\n+                        searchContext.setPageSize(pageSize);\n+                        searchContext.setPageNumber(compartmentPageNum);\n+                        FHIRTransactionHelper txn = new FHIRTransactionHelper(fhirPersistence.getTransaction());\n+                        txn.enroll();;\n+                        FHIRPersistenceContext persistenceContext = FHIRPersistenceContextFactory.createPersistenceContext(null, searchContext);\n+                        List<Resource> resources = fhirPersistence.search(persistenceContext, resourceType).getResource();\n+                        txn.unenroll();;", "originalCommit": "14c9a3276164451d9f3a6d0f8d38a7fddcec7acd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU2NjgwNg==", "url": "https://github.com/IBM/FHIR/pull/849#discussion_r398566806", "bodyText": "good catch, my eclipse has rendering issue, I have to resize the editor window the show the correct contents sometime, seems I missed these, thanks! considering to upgrade my eclipse now, I'm still using 2019 June version ...", "author": "albertwang-ibm", "createdAt": "2020-03-26T13:22:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU2MjM5Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU2MzI5OA==", "url": "https://github.com/IBM/FHIR/pull/849#discussion_r398563298", "bodyText": "Is there another change here?", "author": "prb112", "createdAt": "2020-03-26T13:17:31Z", "path": "fhir-client/src/main/java/com/ibm/fhir/client/impl/FHIRClientImpl.java", "diffHunk": "@@ -768,6 +768,7 @@ protected synchronized Client getClient() throws Exception {\n             // Add a hostname verifier if we're using an ssl transport.\n             if (usingSSLTransport() && !isHostnameVerificationEnabled()) {\n                 cb = cb.hostnameVerifier(new HostnameVerifier() {\n+", "originalCommit": "14c9a3276164451d9f3a6d0f8d38a7fddcec7acd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU2NTA4OA==", "url": "https://github.com/IBM/FHIR/pull/849#discussion_r398565088", "bodyText": "ah, sorry, this file is added by mistake...", "author": "albertwang-ibm", "createdAt": "2020-03-26T13:20:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU2MzI5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU2NzAzNQ==", "url": "https://github.com/IBM/FHIR/pull/849#discussion_r398567035", "bodyText": "no problem - just confirming.", "author": "prb112", "createdAt": "2020-03-26T13:23:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU2MzI5OA=="}], "type": "inlineReview"}, {"oid": "99a0fa801e229492062d438ca4cb8a3948e2a35c", "url": "https://github.com/IBM/FHIR/commit/99a0fa801e229492062d438ca4cb8a3948e2a35c", "message": "Update fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkexport/patient/ChunkReader.java\r\n\r\nSigned-off-by: Albert Wang <xuwang@us.ibm.com>\n\nCo-Authored-By: Paul Bastide <pbastide@us.ibm.com>", "committedDate": "2020-03-26T13:23:08Z", "type": "commit"}, {"oid": "98103c9195e9fe682f4910911ae0e50a0c7a1800", "url": "https://github.com/IBM/FHIR/commit/98103c9195e9fe682f4910911ae0e50a0c7a1800", "message": "Update fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkexport/patient/ChunkReader.java\r\n\r\nSigned-off-by: Albert Wang <xuwang@us.ibm.com>\n\nCo-Authored-By: Paul Bastide <pbastide@us.ibm.com>", "committedDate": "2020-03-26T13:23:25Z", "type": "commit"}, {"oid": "e2cf182ba5fc73877e6c861b7589286cd8178483", "url": "https://github.com/IBM/FHIR/commit/e2cf182ba5fc73877e6c861b7589286cd8178483", "message": "Update fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkexport/system/ChunkReader.java\r\n\r\nSigned-off-by: Albert Wang <xuwang@us.ibm.com>\n\nCo-Authored-By: Paul Bastide <pbastide@us.ibm.com>", "committedDate": "2020-03-26T13:23:40Z", "type": "commit"}, {"oid": "170fc9bad103cb4c5693f5fd799be754a9a8ec95", "url": "https://github.com/IBM/FHIR/commit/170fc9bad103cb4c5693f5fd799be754a9a8ec95", "message": "Update fhir-bulkimportexport-webapp/src/main/java/com/ibm/fhir/bulkexport/system/ChunkReader.java\r\n\r\nSigned-off-by: Albert Wang <xuwang@us.ibm.com>\n\nCo-Authored-By: Paul Bastide <pbastide@us.ibm.com>", "committedDate": "2020-03-26T13:23:53Z", "type": "commit"}, {"oid": "f6f2ca7a93454925476ec08aa52c38d3a392f668", "url": "https://github.com/IBM/FHIR/commit/f6f2ca7a93454925476ec08aa52c38d3a392f668", "message": "issue #632 minor changes per review comments\n\nSigned-off-by: Albert Wang <xuwang@us.ibm.com>", "committedDate": "2020-03-26T13:53:11Z", "type": "commit"}, {"oid": "b1ac5648a7f3577149f38a53f9878bb204b4a8d3", "url": "https://github.com/IBM/FHIR/commit/b1ac5648a7f3577149f38a53f9878bb204b4a8d3", "message": "Merge branch 'Albert-Master-New' of git@github.com:IBM/FHIR.git into Albert-Master-New", "committedDate": "2020-03-26T13:56:01Z", "type": "commit"}]}