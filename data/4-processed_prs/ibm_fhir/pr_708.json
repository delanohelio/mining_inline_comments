{"pr_number": 708, "pr_title": "issue #707 - fix implicit range computations for scientific notation", "pr_createdAt": "2020-02-14T19:33:27Z", "pr_url": "https://github.com/IBM/FHIR/pull/708", "timeline": [{"oid": "d9fe9e23a7fb947845fe6dfac6750f4ed8b3aaf6", "url": "https://github.com/IBM/FHIR/commit/d9fe9e23a7fb947845fe6dfac6750f4ed8b3aaf6", "message": "issue #707 - fix implicit range computations for scientific notation\n\nSigned-off-by: Lee Surprenant <lmsurpre@us.ibm.com>", "committedDate": "2020-02-14T19:36:12Z", "type": "forcePushed"}, {"oid": "9fc920a96d97585a9f1f6fdd4d8fae98156f7891", "url": "https://github.com/IBM/FHIR/commit/9fc920a96d97585a9f1f6fdd4d8fae98156f7891", "message": "issue #707 - fix implicit range computations for scientific notation\n\nSigned-off-by: Lee Surprenant <lmsurpre@us.ibm.com>", "committedDate": "2020-02-14T19:36:45Z", "type": "forcePushed"}, {"oid": "76b342d7124b2f65e0ecb27a5d6a5e350fc77426", "url": "https://github.com/IBM/FHIR/commit/76b342d7124b2f65e0ecb27a5d6a5e350fc77426", "message": "issue #707 - fix implicit range computations for scientific notation\n\nSigned-off-by: Lee Surprenant <lmsurpre@us.ibm.com>", "committedDate": "2020-02-14T19:45:43Z", "type": "commit"}, {"oid": "76b342d7124b2f65e0ecb27a5d6a5e350fc77426", "url": "https://github.com/IBM/FHIR/commit/76b342d7124b2f65e0ecb27a5d6a5e350fc77426", "message": "issue #707 - fix implicit range computations for scientific notation\n\nSigned-off-by: Lee Surprenant <lmsurpre@us.ibm.com>", "committedDate": "2020-02-14T19:45:43Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTgzNjU2OA==", "url": "https://github.com/IBM/FHIR/pull/708#discussion_r379836568", "bodyText": "are you implying 1.0e2 equals 1e2? I didn't interpret it being the same.", "author": "prb112", "createdAt": "2020-02-15T15:06:41Z", "path": "fhir-persistence-jdbc/src/test/java/com/ibm/fhir/persistence/jdbc/test/util/NumberParmBehaviorUtilTest.java", "diffHunk": "@@ -324,77 +320,67 @@ public void testPrecisionWithMultipleDifferentApprox() throws FHIRPersistenceExc\n \n     @Test\n     public void testLowerAndUpperBounds() {\n-        // [parameter]=1.00\n-        // range [0.005 ... 1.005)\n+        // Value: 1.00\n+        // range [0.995 ... 1.005)\n         runLowerUpperTest(\"1.00\", \"0.995\", \"1.005\");\n \n-        // [parameter]=100.00\n+        // Value: 100.00\n         // significant figures precision = 5\n         // range [99.995 ... 100.005)\n         runLowerUpperTest(\"100.00\", \"99.995\", \"100.005\");\n \n-        // [parameter]=100\n+        // Value: 100\n         // significant figures precision = 3 \n         // range [99.5 ... 100.5)\n         runLowerUpperTest(\"100\", \"99.5\", \"100.5\");\n \n-        // [parameter]=1e2\n+        // Value: 1e-3\n+        // significant figures precision = 1\n+        // Implied Range: [0.0005 ... 0.0015)\n+        runLowerUpperTest(\"1e-3\", \"0.0005\", \"0.0015\");\n+\n+        // Value: 1e-2\n+        // significant figures precision = 1\n+        // Implied Range: [50 ... 150)\n+        runLowerUpperTest(\"1e-2\", \"0.005\", \"0.015\");\n+\n+        // Value: 1e-1\n+        // range [5 ... 15)\n+        runLowerUpperTest(\"1e-1\", \"0.05\", \"0.15\");\n+\n+        // Value: 1e0\n+        // range [0.5 ... 1.5)\n+        runLowerUpperTest(\"1e0\", \"0.5\", \"1.5\");\n+\n+        // Value: 1e1\n+        // range [5 ... 15)\n+        runLowerUpperTest(\"1e1\", \"5\", \"15\");\n+\n         // Value: 1e2\n         // significant figures precision = 1\n-        // Implied Range: [95 ... 105)\n-        runLowerUpperTest(\"1e2\", \"95.0\", \"105.0\");\n+        // Implied Range: [50 ... 150)\n+        runLowerUpperTest(\"1e2\", \"50\", \"150\");\n \n-        // [parameter]=1e3\n         // Value: 1e3\n-        // Implied Range: [999.5 ... 100.5)\n-        runLowerUpperTest(\"1e3\", \"999.5\", \"1000.5\");\n+        // significant figures precision = 1\n+        // Implied Range: [500 ... 1500)\n+        runLowerUpperTest(\"1e3\", \"500\", \"1500\");\n+\n+        // Value: 1.0e1\n+        // Implied Range: [9.5 ... 10.5)\n+        runLowerUpperTest(\"1.0e1\", \"9.5\", \"10.5\");\n \n-        // [parameter]=1.0e2\n         // Value: 1.0e2\n-        // Implied Range: [50 ... 150)\n-        runLowerUpperTest(\"1.0e2\", \"50.0\", \"150.0\");\n+        // Implied Range: [95 ... 105)\n+        runLowerUpperTest(\"1.0e2\", \"95\", \"105\");", "originalCommit": "76b342d7124b2f65e0ecb27a5d6a5e350fc77426", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}