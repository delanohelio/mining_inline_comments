{"pr_number": 889, "pr_title": "[plugin-web-app] Use locators for dropdown steps", "pr_createdAt": "2020-09-03T10:46:54Z", "pr_url": "https://github.com/vividus-framework/vividus/pull/889", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjk0MjM3Ng==", "url": "https://github.com/vividus-framework/vividus/pull/889#discussion_r482942376", "bodyText": "docs? :)", "author": "uarlouski", "createdAt": "2020-09-03T12:33:56Z", "path": "vividus-plugin-web-app/src/main/java/org/vividus/bdd/steps/ui/web/DropdownSteps.java", "diffHunk": "@@ -104,180 +81,92 @@ public Select isDropDownWithNameFound(String dropDownName)\n      * </tbody>\n      * </table>\n      */\n-    @Then(\"a drop down with the name '$dropDownName' contains the items: $dropDownItems\")\n-    public void doesDropDownListContainItems(String dropDownName, ExamplesTable dropDownItems)\n+    @Then(\"dropdown located by `$locator` contains options: $dropDownItems\")", "originalCommit": "3ef3091470fc915e02af9f09077e69b4cc5c2eff", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "99bbbfcf85f273ba7d150d481490799fa4ce1c2f", "url": "https://github.com/vividus-framework/vividus/commit/99bbbfcf85f273ba7d150d481490799fa4ce1c2f", "message": "[plugin-web-app] Use locators for dropdown steps", "committedDate": "2020-09-03T12:38:57Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjk5Njc2NA==", "url": "https://github.com/vividus-framework/vividus/pull/889#discussion_r482996764", "bodyText": "let's keep old foratting", "author": "valfirst", "createdAt": "2020-09-03T13:55:33Z", "path": "vividus-plugin-web-app/src/main/java/org/vividus/bdd/steps/ui/web/DropdownSteps.java", "diffHunk": "@@ -30,60 +29,38 @@\n import org.openqa.selenium.support.ui.Select;\n import org.vividus.bdd.monitor.TakeScreenshotOnFailure;\n import org.vividus.bdd.steps.ui.validation.IBaseValidations;\n-import org.vividus.bdd.steps.ui.validation.IDescriptiveSoftAssert;\n+import org.vividus.softassert.ISoftAssert;\n import org.vividus.ui.action.search.Locator;\n-import org.vividus.ui.action.search.Visibility;\n-import org.vividus.ui.web.DropDownState;\n import org.vividus.ui.web.action.IFieldActions;\n import org.vividus.ui.web.action.IWebElementActions;\n-import org.vividus.ui.web.action.search.WebLocatorType;\n-import org.vividus.ui.web.util.LocatorUtil;\n \n @TakeScreenshotOnFailure\n public class DropdownSteps\n {\n-    private static final String DROP_DOWN_WITH_NAME = \"Drop down with the name '%s'\";\n-\n-    @Inject private IWebElementActions webElementActions;\n-    @Inject private IBaseValidations baseValidations;\n-    @Inject private IDescriptiveSoftAssert descriptiveSoftAssert;\n-    @Inject private IFieldActions fieldActions;\n-\n-    /**\n-     * Checks that previously set searchContext contains a drop down with the expected <b>name</b>\n-     * <p>\n-     * <b>Drop down</b> is a drop down list with the specified options;</p>\n-     * <p>\n-     * Is created by the <i>&lt;select&gt;</i> tag. The <i>&lt;option&gt;</i> tags inside the <i>\n-     * &lt;select&gt;</i> define the available options in the list.</p>\n-     * <b>Example:</b>\n-     * <pre>\n-     *  &lt;select&gt;\n-     *   &lt;option&gt;visible text 1&lt;/option&gt;\n-     *   &lt;option&gt;visible text 2&lt;/option&gt;\n-     *   &lt;option&gt;visible text 3&lt;/option&gt;\n-     *  &lt;/select&gt;\n-     * </pre>\n-     * @param dropDownName Text value of any attribute of the drop down tag\n-     * @return WebElement\n-     */\n-    @Then(\"a drop down with the name '$dropDownName' exists\")\n-    public Select isDropDownWithNameFound(String dropDownName)\n+    private final IWebElementActions webElementActions;\n+    private final IBaseValidations baseValidations;\n+    private final ISoftAssert softAssert;\n+    private final IFieldActions fieldActions;\n+\n+    public DropdownSteps(IWebElementActions webElementActions,\n+                         IBaseValidations   baseValidations,\n+                         ISoftAssert        softAssert,\n+                         IFieldActions      fieldActions)", "originalCommit": "99bbbfcf85f273ba7d150d481490799fa4ce1c2f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzAxMzU1Mg==", "url": "https://github.com/vividus-framework/vividus/pull/889#discussion_r483013552", "bodyText": "Do you mean @Inject?", "author": "ikalinin1", "createdAt": "2020-09-03T14:18:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjk5Njc2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzUxNjI1Mg==", "url": "https://github.com/vividus-framework/vividus/pull/889#discussion_r483516252", "bodyText": "only formatting:\npublic DropdownSteps(IWebElementActions webElementActions, IBaseValidations baseValidations,\n                         ISoftAssert softAssert, IFieldActions fieldActions)", "author": "valfirst", "createdAt": "2020-09-04T09:56:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjk5Njc2NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjk5ODAzNA==", "url": "https://github.com/vividus-framework/vividus/pull/889#discussion_r482998034", "bodyText": "winner is\n...located `$locator`...", "author": "valfirst", "createdAt": "2020-09-03T13:57:10Z", "path": "vividus-plugin-web-app/src/main/java/org/vividus/bdd/steps/ui/web/DropdownSteps.java", "diffHunk": "@@ -104,180 +81,92 @@ public Select isDropDownWithNameFound(String dropDownName)\n      * </tbody>\n      * </table>\n      */\n-    @Then(\"a drop down with the name '$dropDownName' contains the items: $dropDownItems\")\n-    public void doesDropDownListContainItems(String dropDownName, ExamplesTable dropDownItems)\n+    @Then(\"dropdown located by `$locator` contains options: $dropDownItems\")", "originalCommit": "99bbbfcf85f273ba7d150d481490799fa4ce1c2f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzAwMDE1OA==", "url": "https://github.com/vividus-framework/vividus/pull/889#discussion_r483000158", "bodyText": "Then dropdown located `$locator` exists and selected option is `$option`\n\n?", "author": "valfirst", "createdAt": "2020-09-03T13:59:55Z", "path": "vividus-plugin-web-app/src/main/java/org/vividus/bdd/steps/ui/web/DropdownSteps.java", "diffHunk": "@@ -104,180 +81,92 @@ public Select isDropDownWithNameFound(String dropDownName)\n      * </tbody>\n      * </table>\n      */\n-    @Then(\"a drop down with the name '$dropDownName' contains the items: $dropDownItems\")\n-    public void doesDropDownListContainItems(String dropDownName, ExamplesTable dropDownItems)\n+    @Then(\"dropdown located by `$locator` contains options: $dropDownItems\")\n+    public void doesDropDownListContainItems(Locator locator, ExamplesTable dropDownItems)\n     {\n-        Select dropDown = isDropDownWithNameFound(dropDownName);\n-        if (dropDown != null)\n-        {\n+        runIfSelectExists(locator, dropDown -> {\n             List<WebElement> actualItems = dropDown.getOptions();\n             List<Parameters> expectedItems = dropDownItems.getRowsAsParameters(true);\n-            if (descriptiveSoftAssert.assertEquals(\"Expected dropdown is of the same size as actual dropdown: \",\n+            if (softAssert.assertEquals(\"Expected dropdown is of the same size as actual dropdown: \",\n                     expectedItems.size(), actualItems.size()))\n             {\n                 for (int i = 0; i < expectedItems.size(); i++)\n                 {\n                     WebElement option = actualItems.get(i);\n                     Map<String, String> expectedRow = expectedItems.get(i).values();\n-                    descriptiveSoftAssert.assertEquals(\n+                    softAssert.assertEquals(\n                             String.format(\"Text of actual item at position [%s]\", i + 1), expectedRow.get(\"item\"),\n                             webElementActions.getElementText(option));\n-                    descriptiveSoftAssert.assertEquals(\n+                    softAssert.assertEquals(\n                             String.format(\"State of actual item at position [%s]\", i + 1),\n                             Boolean.parseBoolean(expectedRow.get(\"state\")), option.isSelected());\n                 }\n             }\n-        }\n-    }\n-\n-    /**\n-     * Checks if a drop down with the specified <b>name</b> does not exist in context\n-     * @param dropDownName Any attribute value of the <i>&lt;select&gt;</i> tag\n-    */\n-    @Then(\"a drop down with the name '$dropDownName' does not exist\")\n-    public void doesNotDropDownExist(String dropDownName)\n-    {\n-        Locator locator = createLocator(dropDownName);\n-        locator.getSearchParameters().setVisibility(Visibility.ALL);\n-        baseValidations.assertIfElementDoesNotExist(String.format(DROP_DOWN_WITH_NAME, dropDownName), locator);\n-    }\n-\n-    /**\n-     * Checks that previously set searchContext contains a drop down with the expected <b>name</b>\n-     * and expected State\n-     * <p>\n-     * <b>Drop down</b> is a drop down list with the specified options;\n-     * </p>\n-     * <p>\n-     * Is created by the <i>&lt;select&gt;</i> tag. The <i>&lt;option&gt;</i> tags inside the <i>\n-     * &lt;select&gt;</i> define the available options in the list.</p>\n-     * <b>Example:</b>\n-     * <pre>\n-     *  &lt;select&gt;\n-     *   &lt;option&gt;visible text 1&lt;/option&gt;\n-     *   &lt;option&gt;visible text 2&lt;/option&gt;\n-     *   &lt;option&gt;visible text 3&lt;/option&gt;\n-     *  &lt;/select&gt;\n-     * </pre>\n-     * @param state A state value of the link\n-     * (<i>Possible values:</i> <b>ENABLED, DISABLED, SELECTED, NOT_SELECTED, VISIBLE, NOT_VISIBLE, SINGLE_SELECT,\n-     * MULTI_SELECT</b>)\n-     * @param dropDownName Text value of any attribute of the drop down tag\n-     */\n-    @Then(\"a [$state] drop down with the name '$dropDownName' exists\")\n-    public void isDropDownWithNameFound(DropDownState state, String dropDownName)\n-    {\n-        Select select = findDropDownList(dropDownName);\n-        baseValidations.assertElementState(\"The found drop down is \" + state, state, select);\n+        });\n     }\n \n     /**\n-     * Checks whether default value of a drop-down with the specific name\n+     * Checks whether default value of a dropdown located by locator\n      * is similar to expected\n-     * @param dropDownName Text value of any attribute of the drop down tag\n-     * @param dropDownText Text that is displayed\n+     * @param locator Locator to locate dropdown list\n+     * @param option Text that is displayed\n      */\n-    @Then(value = \"a drop down with the name '$dropDownName' and text '$dropDownText' exists\", priority = 1)\n-    public void ifDropDownWithNameExists(String dropDownName, String dropDownText)\n+    @Then(value = \"dropdown located by `$locator` and selected option `$option` exists\", priority = 1)", "originalCommit": "99bbbfcf85f273ba7d150d481490799fa4ce1c2f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzAwMTE1OA==", "url": "https://github.com/vividus-framework/vividus/pull/889#discussion_r483001158", "bodyText": "dropDownItems -> dropdownOptions\nthe same for all variables and method names:\n\ndropDown -> dropdown\nitems -> options", "author": "valfirst", "createdAt": "2020-09-03T14:01:09Z", "path": "vividus-plugin-web-app/src/main/java/org/vividus/bdd/steps/ui/web/DropdownSteps.java", "diffHunk": "@@ -104,180 +81,92 @@ public Select isDropDownWithNameFound(String dropDownName)\n      * </tbody>\n      * </table>\n      */\n-    @Then(\"a drop down with the name '$dropDownName' contains the items: $dropDownItems\")\n-    public void doesDropDownListContainItems(String dropDownName, ExamplesTable dropDownItems)\n+    @Then(\"dropdown located by `$locator` contains options: $dropDownItems\")", "originalCommit": "99bbbfcf85f273ba7d150d481490799fa4ce1c2f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzAwMjczMA==", "url": "https://github.com/vividus-framework/vividus/pull/889#discussion_r483002730", "bodyText": "from -> in? we might need to consult english language expert :)", "author": "valfirst", "createdAt": "2020-09-03T14:03:25Z", "path": "vividus-plugin-web-app/src/main/java/org/vividus/bdd/steps/ui/web/DropdownSteps.java", "diffHunk": "@@ -104,180 +81,92 @@ public Select isDropDownWithNameFound(String dropDownName)\n      * </tbody>\n      * </table>\n      */\n-    @Then(\"a drop down with the name '$dropDownName' contains the items: $dropDownItems\")\n-    public void doesDropDownListContainItems(String dropDownName, ExamplesTable dropDownItems)\n+    @Then(\"dropdown located by `$locator` contains options: $dropDownItems\")\n+    public void doesDropDownListContainItems(Locator locator, ExamplesTable dropDownItems)\n     {\n-        Select dropDown = isDropDownWithNameFound(dropDownName);\n-        if (dropDown != null)\n-        {\n+        runIfSelectExists(locator, dropDown -> {\n             List<WebElement> actualItems = dropDown.getOptions();\n             List<Parameters> expectedItems = dropDownItems.getRowsAsParameters(true);\n-            if (descriptiveSoftAssert.assertEquals(\"Expected dropdown is of the same size as actual dropdown: \",\n+            if (softAssert.assertEquals(\"Expected dropdown is of the same size as actual dropdown: \",\n                     expectedItems.size(), actualItems.size()))\n             {\n                 for (int i = 0; i < expectedItems.size(); i++)\n                 {\n                     WebElement option = actualItems.get(i);\n                     Map<String, String> expectedRow = expectedItems.get(i).values();\n-                    descriptiveSoftAssert.assertEquals(\n+                    softAssert.assertEquals(\n                             String.format(\"Text of actual item at position [%s]\", i + 1), expectedRow.get(\"item\"),\n                             webElementActions.getElementText(option));\n-                    descriptiveSoftAssert.assertEquals(\n+                    softAssert.assertEquals(\n                             String.format(\"State of actual item at position [%s]\", i + 1),\n                             Boolean.parseBoolean(expectedRow.get(\"state\")), option.isSelected());\n                 }\n             }\n-        }\n-    }\n-\n-    /**\n-     * Checks if a drop down with the specified <b>name</b> does not exist in context\n-     * @param dropDownName Any attribute value of the <i>&lt;select&gt;</i> tag\n-    */\n-    @Then(\"a drop down with the name '$dropDownName' does not exist\")\n-    public void doesNotDropDownExist(String dropDownName)\n-    {\n-        Locator locator = createLocator(dropDownName);\n-        locator.getSearchParameters().setVisibility(Visibility.ALL);\n-        baseValidations.assertIfElementDoesNotExist(String.format(DROP_DOWN_WITH_NAME, dropDownName), locator);\n-    }\n-\n-    /**\n-     * Checks that previously set searchContext contains a drop down with the expected <b>name</b>\n-     * and expected State\n-     * <p>\n-     * <b>Drop down</b> is a drop down list with the specified options;\n-     * </p>\n-     * <p>\n-     * Is created by the <i>&lt;select&gt;</i> tag. The <i>&lt;option&gt;</i> tags inside the <i>\n-     * &lt;select&gt;</i> define the available options in the list.</p>\n-     * <b>Example:</b>\n-     * <pre>\n-     *  &lt;select&gt;\n-     *   &lt;option&gt;visible text 1&lt;/option&gt;\n-     *   &lt;option&gt;visible text 2&lt;/option&gt;\n-     *   &lt;option&gt;visible text 3&lt;/option&gt;\n-     *  &lt;/select&gt;\n-     * </pre>\n-     * @param state A state value of the link\n-     * (<i>Possible values:</i> <b>ENABLED, DISABLED, SELECTED, NOT_SELECTED, VISIBLE, NOT_VISIBLE, SINGLE_SELECT,\n-     * MULTI_SELECT</b>)\n-     * @param dropDownName Text value of any attribute of the drop down tag\n-     */\n-    @Then(\"a [$state] drop down with the name '$dropDownName' exists\")\n-    public void isDropDownWithNameFound(DropDownState state, String dropDownName)\n-    {\n-        Select select = findDropDownList(dropDownName);\n-        baseValidations.assertElementState(\"The found drop down is \" + state, state, select);\n+        });\n     }\n \n     /**\n-     * Checks whether default value of a drop-down with the specific name\n+     * Checks whether default value of a dropdown located by locator\n      * is similar to expected\n-     * @param dropDownName Text value of any attribute of the drop down tag\n-     * @param dropDownText Text that is displayed\n+     * @param locator Locator to locate dropdown list\n+     * @param option Text that is displayed\n      */\n-    @Then(value = \"a drop down with the name '$dropDownName' and text '$dropDownText' exists\", priority = 1)\n-    public void ifDropDownWithNameExists(String dropDownName, String dropDownText)\n+    @Then(value = \"dropdown located by `$locator` and selected option `$option` exists\", priority = 1)\n+    public void ifDropDownWithNameExists(Locator locator, String option)\n     {\n-        Select dropDown = isDropDownWithNameFound(dropDownName);\n-        if (dropDown != null && descriptiveSoftAssert.assertTrue(\"Selected options are present in drop down\",\n+        Select dropDown = findSelect(locator).orElse(null);\n+        if (dropDown != null && softAssert.assertTrue(\"Selected options are present in drop down\",\n                 !dropDown.getAllSelectedOptions().isEmpty()))\n         {\n-            descriptiveSoftAssert.assertEquals(\"Selected option in drop down\", dropDownText,\n+            softAssert.assertEquals(\"Selected option in drop down\", option,\n                     dropDown.getFirstSelectedOption().getText().trim());\n         }\n     }\n \n     /**\n-     * Selects a desired <b>option</b> by a visible 'text' from a <b>drop-down list</b> with\n-     * a specified 'name' attribute. If any option was already selected - reselects it.\n-     * If there are several equal values in a drop-down - selects them all.\n-     * <p>\n-     * A <b>drop-down list</b> is created by the <i>&lt;select&gt;</i> tag. The <i>&lt;option&gt;</i> tags inside the<i>\n-     * &lt;select&gt;</i> define the available options in the list.</p>\n-     * <b>Example:</b>\n-     * <pre>\n-     *  &lt;select&gt;\n-     *   &lt;option&gt;visible text 1&lt;/option&gt;\n-     *   &lt;option&gt;visible text 2&lt;/option&gt;\n-     *   &lt;option&gt;visible text 3&lt;/option&gt;\n-     *  &lt;/select&gt;\n-     * </pre>\n-     * Actions performed at this step:\n-     * <ul>\n-     * <li>Finds the <b>drop-down list</b> by it's 'name' attribute\n-     * <li>Selects an <b>option</b> in the <b>drop-down list</b> by it's visible 'text'\n-     * <li>Waits for the page to load\n-     * </ul>\n-     * @param text A visible text value of the <b>option</b> in the <b>drop-down list</b>\n-     * @param dropDownListName A name attribute of the <b>drop-down list</b>\n-     * @see <a href=\"https://www.w3schools.com/tags/tag_select.asp\"><i>HTML &lt;select&gt; Tag</i></a>\n-     */\n-    @When(\"I select '$text' from a drop down with the name '$dropDownListName'\")\n-    public void selectItemInDDL(String text, String dropDownListName)\n-    {\n-        selectItemInDDL(dropDownListName, text, false);\n-    }\n-\n-    /**\n-     * Step works similarly to\n-     * <ul>\n-     * <li><i><b>When</b> I select '$text' from a drop down with the name '$dropDownListName'</i>\n-     * </ul>\n-     * step. The difference is that if any option was already selected - it remains selected.\n-     * If you apply this step to a single select drop-down it will be <i><b>failed</b></i>\n-     * @param text A visible text value of the <b>option</b> in the <b>drop-down list</b>\n-     * @param dropDownListName A name attribute of the <b>drop-down list</b>\n-     * @see DropdownSteps#selectItemInDDL(String text, String dropDownListName)\n+     * Adds the text to any option already selected. Works for multi-select dropdown lists.\n+     * If you apply this step to a single select dropdown it will be <i><b>failed</b></i>\n+     * @param option A visible text value of the <b>option</b> in the <b>dropdown list</b>\n+     * @param locator Locator to locate <b>dropdown list</b>\n      */\n-    @When(\"I add '$text' to selection in a drop down with the name '$dropDownListName'\")\n-    public void addItemInDDL(String text, String dropDownListName)\n+    @When(\"I add `$option` to selection in dropdown located by `$locator`\")\n+    public void addItemInDDL(String option, Locator locator)\n     {\n-        selectItemInDDL(dropDownListName, text, true);\n+        selectItemInDDL(locator, option, true);\n     }\n \n     /**\n-     * Selects a desired <b>option</b> by a visible <b>text</b> from a drop-down element specified by <b>locator</b>.A\n-     * <b>drop-down list</b> is created by the <i>&lt;select&gt;</i> tag. The <i>&lt;option&gt;</i> tags inside the<i>\n+     * Selects a desired <b>option</b> by a visible <b>text</b> from a dropdown element specified by <b>locator</b>.A\n+     * <b>dropdown list</b> is created by the <i>&lt;select&gt;</i> tag. The <i>&lt;option&gt;</i> tags inside the<i>\n      * &lt;select&gt;</i> define the available options in the list.\n      * <p>Actions performed at this step:</p>\n      * <ul>\n      * <li>Find an element by locator</li>\n-     * <li>Select an <b>option</b> in the <b>drop-down list</b> by it's visible 'text'</li>\n+     * <li>Select an <b>option</b> in the <b>dropdown list</b> by it's visible 'text'</li>\n      * <li>Wait for the page to load</li>\n      * </ul>\n-     * @param text A visible text value of the <b>option</b> in the <b>drop-down list</b>\n-     * @param locator Locator of a drop down element\n+     * @param option A visible text value of the <b>option</b> in the <b>dropdown list</b>\n+     * @param locator Locator of a dropdown element\n      */\n-    @When(\"I select `$text` from drop down located `$locator`\")\n-    public void selectTextFromDropDownByLocator(String text, Locator locator)\n-    {\n-        findDropDownList(\"A drop down\", locator)\n-            .ifPresent(s -> fieldActions.selectItemInDropDownList(s, text, false));\n-    }\n-\n-    private Optional<Select> findDropDownList(String businessDescription, Locator locator)\n+    @When(\"I select `$option` from dropdown located by `$locator`\")", "originalCommit": "99bbbfcf85f273ba7d150d481490799fa4ce1c2f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzAwMzA4MQ==", "url": "https://github.com/vividus-framework/vividus/pull/889#discussion_r483003081", "bodyText": "runIfSelectExists -> runIfDropdownExists", "author": "valfirst", "createdAt": "2020-09-03T14:03:54Z", "path": "vividus-plugin-web-app/src/main/java/org/vividus/bdd/steps/ui/web/DropdownSteps.java", "diffHunk": "@@ -104,180 +81,92 @@ public Select isDropDownWithNameFound(String dropDownName)\n      * </tbody>\n      * </table>\n      */\n-    @Then(\"a drop down with the name '$dropDownName' contains the items: $dropDownItems\")\n-    public void doesDropDownListContainItems(String dropDownName, ExamplesTable dropDownItems)\n+    @Then(\"dropdown located by `$locator` contains options: $dropDownItems\")\n+    public void doesDropDownListContainItems(Locator locator, ExamplesTable dropDownItems)\n     {\n-        Select dropDown = isDropDownWithNameFound(dropDownName);\n-        if (dropDown != null)\n-        {\n+        runIfSelectExists(locator, dropDown -> {\n             List<WebElement> actualItems = dropDown.getOptions();\n             List<Parameters> expectedItems = dropDownItems.getRowsAsParameters(true);\n-            if (descriptiveSoftAssert.assertEquals(\"Expected dropdown is of the same size as actual dropdown: \",\n+            if (softAssert.assertEquals(\"Expected dropdown is of the same size as actual dropdown: \",\n                     expectedItems.size(), actualItems.size()))\n             {\n                 for (int i = 0; i < expectedItems.size(); i++)\n                 {\n                     WebElement option = actualItems.get(i);\n                     Map<String, String> expectedRow = expectedItems.get(i).values();\n-                    descriptiveSoftAssert.assertEquals(\n+                    softAssert.assertEquals(\n                             String.format(\"Text of actual item at position [%s]\", i + 1), expectedRow.get(\"item\"),\n                             webElementActions.getElementText(option));\n-                    descriptiveSoftAssert.assertEquals(\n+                    softAssert.assertEquals(\n                             String.format(\"State of actual item at position [%s]\", i + 1),\n                             Boolean.parseBoolean(expectedRow.get(\"state\")), option.isSelected());\n                 }\n             }\n-        }\n-    }\n-\n-    /**\n-     * Checks if a drop down with the specified <b>name</b> does not exist in context\n-     * @param dropDownName Any attribute value of the <i>&lt;select&gt;</i> tag\n-    */\n-    @Then(\"a drop down with the name '$dropDownName' does not exist\")\n-    public void doesNotDropDownExist(String dropDownName)\n-    {\n-        Locator locator = createLocator(dropDownName);\n-        locator.getSearchParameters().setVisibility(Visibility.ALL);\n-        baseValidations.assertIfElementDoesNotExist(String.format(DROP_DOWN_WITH_NAME, dropDownName), locator);\n-    }\n-\n-    /**\n-     * Checks that previously set searchContext contains a drop down with the expected <b>name</b>\n-     * and expected State\n-     * <p>\n-     * <b>Drop down</b> is a drop down list with the specified options;\n-     * </p>\n-     * <p>\n-     * Is created by the <i>&lt;select&gt;</i> tag. The <i>&lt;option&gt;</i> tags inside the <i>\n-     * &lt;select&gt;</i> define the available options in the list.</p>\n-     * <b>Example:</b>\n-     * <pre>\n-     *  &lt;select&gt;\n-     *   &lt;option&gt;visible text 1&lt;/option&gt;\n-     *   &lt;option&gt;visible text 2&lt;/option&gt;\n-     *   &lt;option&gt;visible text 3&lt;/option&gt;\n-     *  &lt;/select&gt;\n-     * </pre>\n-     * @param state A state value of the link\n-     * (<i>Possible values:</i> <b>ENABLED, DISABLED, SELECTED, NOT_SELECTED, VISIBLE, NOT_VISIBLE, SINGLE_SELECT,\n-     * MULTI_SELECT</b>)\n-     * @param dropDownName Text value of any attribute of the drop down tag\n-     */\n-    @Then(\"a [$state] drop down with the name '$dropDownName' exists\")\n-    public void isDropDownWithNameFound(DropDownState state, String dropDownName)\n-    {\n-        Select select = findDropDownList(dropDownName);\n-        baseValidations.assertElementState(\"The found drop down is \" + state, state, select);\n+        });\n     }\n \n     /**\n-     * Checks whether default value of a drop-down with the specific name\n+     * Checks whether default value of a dropdown located by locator\n      * is similar to expected\n-     * @param dropDownName Text value of any attribute of the drop down tag\n-     * @param dropDownText Text that is displayed\n+     * @param locator Locator to locate dropdown list\n+     * @param option Text that is displayed\n      */\n-    @Then(value = \"a drop down with the name '$dropDownName' and text '$dropDownText' exists\", priority = 1)\n-    public void ifDropDownWithNameExists(String dropDownName, String dropDownText)\n+    @Then(value = \"dropdown located by `$locator` and selected option `$option` exists\", priority = 1)\n+    public void ifDropDownWithNameExists(Locator locator, String option)\n     {\n-        Select dropDown = isDropDownWithNameFound(dropDownName);\n-        if (dropDown != null && descriptiveSoftAssert.assertTrue(\"Selected options are present in drop down\",\n+        Select dropDown = findSelect(locator).orElse(null);\n+        if (dropDown != null && softAssert.assertTrue(\"Selected options are present in drop down\",\n                 !dropDown.getAllSelectedOptions().isEmpty()))\n         {\n-            descriptiveSoftAssert.assertEquals(\"Selected option in drop down\", dropDownText,\n+            softAssert.assertEquals(\"Selected option in drop down\", option,\n                     dropDown.getFirstSelectedOption().getText().trim());\n         }\n     }\n \n     /**\n-     * Selects a desired <b>option</b> by a visible 'text' from a <b>drop-down list</b> with\n-     * a specified 'name' attribute. If any option was already selected - reselects it.\n-     * If there are several equal values in a drop-down - selects them all.\n-     * <p>\n-     * A <b>drop-down list</b> is created by the <i>&lt;select&gt;</i> tag. The <i>&lt;option&gt;</i> tags inside the<i>\n-     * &lt;select&gt;</i> define the available options in the list.</p>\n-     * <b>Example:</b>\n-     * <pre>\n-     *  &lt;select&gt;\n-     *   &lt;option&gt;visible text 1&lt;/option&gt;\n-     *   &lt;option&gt;visible text 2&lt;/option&gt;\n-     *   &lt;option&gt;visible text 3&lt;/option&gt;\n-     *  &lt;/select&gt;\n-     * </pre>\n-     * Actions performed at this step:\n-     * <ul>\n-     * <li>Finds the <b>drop-down list</b> by it's 'name' attribute\n-     * <li>Selects an <b>option</b> in the <b>drop-down list</b> by it's visible 'text'\n-     * <li>Waits for the page to load\n-     * </ul>\n-     * @param text A visible text value of the <b>option</b> in the <b>drop-down list</b>\n-     * @param dropDownListName A name attribute of the <b>drop-down list</b>\n-     * @see <a href=\"https://www.w3schools.com/tags/tag_select.asp\"><i>HTML &lt;select&gt; Tag</i></a>\n-     */\n-    @When(\"I select '$text' from a drop down with the name '$dropDownListName'\")\n-    public void selectItemInDDL(String text, String dropDownListName)\n-    {\n-        selectItemInDDL(dropDownListName, text, false);\n-    }\n-\n-    /**\n-     * Step works similarly to\n-     * <ul>\n-     * <li><i><b>When</b> I select '$text' from a drop down with the name '$dropDownListName'</i>\n-     * </ul>\n-     * step. The difference is that if any option was already selected - it remains selected.\n-     * If you apply this step to a single select drop-down it will be <i><b>failed</b></i>\n-     * @param text A visible text value of the <b>option</b> in the <b>drop-down list</b>\n-     * @param dropDownListName A name attribute of the <b>drop-down list</b>\n-     * @see DropdownSteps#selectItemInDDL(String text, String dropDownListName)\n+     * Adds the text to any option already selected. Works for multi-select dropdown lists.\n+     * If you apply this step to a single select dropdown it will be <i><b>failed</b></i>\n+     * @param option A visible text value of the <b>option</b> in the <b>dropdown list</b>\n+     * @param locator Locator to locate <b>dropdown list</b>\n      */\n-    @When(\"I add '$text' to selection in a drop down with the name '$dropDownListName'\")\n-    public void addItemInDDL(String text, String dropDownListName)\n+    @When(\"I add `$option` to selection in dropdown located by `$locator`\")\n+    public void addItemInDDL(String option, Locator locator)\n     {\n-        selectItemInDDL(dropDownListName, text, true);\n+        selectItemInDDL(locator, option, true);\n     }\n \n     /**\n-     * Selects a desired <b>option</b> by a visible <b>text</b> from a drop-down element specified by <b>locator</b>.A\n-     * <b>drop-down list</b> is created by the <i>&lt;select&gt;</i> tag. The <i>&lt;option&gt;</i> tags inside the<i>\n+     * Selects a desired <b>option</b> by a visible <b>text</b> from a dropdown element specified by <b>locator</b>.A\n+     * <b>dropdown list</b> is created by the <i>&lt;select&gt;</i> tag. The <i>&lt;option&gt;</i> tags inside the<i>\n      * &lt;select&gt;</i> define the available options in the list.\n      * <p>Actions performed at this step:</p>\n      * <ul>\n      * <li>Find an element by locator</li>\n-     * <li>Select an <b>option</b> in the <b>drop-down list</b> by it's visible 'text'</li>\n+     * <li>Select an <b>option</b> in the <b>dropdown list</b> by it's visible 'text'</li>\n      * <li>Wait for the page to load</li>\n      * </ul>\n-     * @param text A visible text value of the <b>option</b> in the <b>drop-down list</b>\n-     * @param locator Locator of a drop down element\n+     * @param option A visible text value of the <b>option</b> in the <b>dropdown list</b>\n+     * @param locator Locator of a dropdown element\n      */\n-    @When(\"I select `$text` from drop down located `$locator`\")\n-    public void selectTextFromDropDownByLocator(String text, Locator locator)\n-    {\n-        findDropDownList(\"A drop down\", locator)\n-            .ifPresent(s -> fieldActions.selectItemInDropDownList(s, text, false));\n-    }\n-\n-    private Optional<Select> findDropDownList(String businessDescription, Locator locator)\n+    @When(\"I select `$option` from dropdown located by `$locator`\")\n+    public void selectTextFromDropDownByLocator(String option, Locator locator)\n     {\n-        return Optional.ofNullable(baseValidations.assertIfElementExists(businessDescription, locator))\n-                .map(Select::new);\n+        selectItemInDDL(locator, option, false);\n     }\n \n-    private Select findDropDownList(String dropDownListName)\n+    private void runIfSelectExists(Locator locator, Consumer<Select> toRun)", "originalCommit": "99bbbfcf85f273ba7d150d481490799fa4ce1c2f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "f193223995d4a749c2d25a7c77915d85dd828327", "url": "https://github.com/vividus-framework/vividus/commit/f193223995d4a749c2d25a7c77915d85dd828327", "message": "[plugin-web-app] Use locators for dropdown steps", "committedDate": "2020-09-03T21:11:58Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzUxNTgxOA==", "url": "https://github.com/vividus-framework/vividus/pull/889#discussion_r483515818", "bodyText": "Does not support...", "author": "valfirst", "createdAt": "2020-09-04T09:55:14Z", "path": "docs/modules/plugins/pages/plugin-web-app.adoc", "diffHunk": "@@ -318,6 +318,128 @@ Then number of VISIBLE elements found by `tagName(img)` is = `1`\n ----\n \n \n+=== Dropdown: verify available options.\n+\n+==== *_Info_*\n+\n+Verifies if dropdown located by locator exists and has expected list of options\n+\n+==== *_Wording_*\n+\n+[source,gherkin]\n+----\n+Then dropdown located `$locator` contains options: $option\n+----\n+\n+==== *_Parameters_*\n+\n+. `$locator` - xref:parameters:locator.adoc[Locator]\n+. `$options` - examples table describing expected options\n+\n+==== *_Usage_*\n+\n+.Dropdown.story\n+[source,gherkin]\n+----\n+Then a drop down with the name 'colors' contains the items:\n+|state|item |\n+|false|Red  |\n+|false|Green|\n+|true |Blue |\n+----\n+\n+[IMPORTANT]\n+\n+Item - is an option. State - true/false describes if option selected\n+\n+\n+=== Dropdown: verify first selected option\n+\n+==== *_Info_*\n+\n+Verifies if dropdown located by locator exists and first selected option.\n+\n+==== *_Wording_*\n+\n+[source,gherkin]\n+----\n+Then dropdown located `$locator` exists and selected option is `$option`\n+----\n+\n+==== *_Parameters_*\n+\n+. `$locator` - xref:parameters:locator.adoc[Locator]\n+. `$option` - first selected option\n+\n+==== *_Usage_*\n+\n+.Dropdown.story\n+[source,gherkin]\n+----\n+Then dropdown located `id(colors)` exists and selected option is `Blue`\n+----\n+\n+\n+=== Dropdown: add text to a mutli-select\n+\n+==== *_Info_*\n+\n+Selects option in multi-select dropdown\n+\n+[IMPORTANT]\n+Step will fail if target dropdown is not multi-select\n+\n+==== *_Wording_*\n+\n+[source,gherkin]\n+----\n+When I add `$option` to selection in dropdown located `$locator`\n+----\n+\n+==== *_Parameters_*\n+\n+. `$option` - option to select\n+. `$locator` - xref:parameters:locator.adoc[Locator]\n+\n+==== *_Usage_*\n+\n+.Dropdown.story\n+[source,gherkin]\n+----\n+When I add `Two` to selection in dropdown located `id(numbers)`\n+----\n+\n+\n+=== Dropdown: select option\n+\n+==== *_Info_*\n+\n+Selects option in dropdown\n+\n+[IMPORTANT]\n+Does not supports multi-selection", "originalCommit": "f193223995d4a749c2d25a7c77915d85dd828327", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzUxNjgxNA==", "url": "https://github.com/vividus-framework/vividus/pull/889#discussion_r483516814", "bodyText": "doesDropdownHaveFirstSelectedOption", "author": "valfirst", "createdAt": "2020-09-04T09:57:18Z", "path": "vividus-plugin-web-app/src/main/java/org/vividus/bdd/steps/ui/web/DropdownSteps.java", "diffHunk": "@@ -104,180 +81,92 @@ public Select isDropDownWithNameFound(String dropDownName)\n      * </tbody>\n      * </table>\n      */\n-    @Then(\"a drop down with the name '$dropDownName' contains the items: $dropDownItems\")\n-    public void doesDropDownListContainItems(String dropDownName, ExamplesTable dropDownItems)\n+    @Then(\"dropdown located `$locator` contains options: $options\")\n+    public void doesDropdownContainOptions(Locator locator, ExamplesTable options)\n     {\n-        Select dropDown = isDropDownWithNameFound(dropDownName);\n-        if (dropDown != null)\n-        {\n-            List<WebElement> actualItems = dropDown.getOptions();\n-            List<Parameters> expectedItems = dropDownItems.getRowsAsParameters(true);\n-            if (descriptiveSoftAssert.assertEquals(\"Expected dropdown is of the same size as actual dropdown: \",\n-                    expectedItems.size(), actualItems.size()))\n+        runIfDropdownExists(locator, dropdown -> {\n+            List<WebElement> actualOptions = dropdown.getOptions();\n+            List<Parameters> expectedOptions = options.getRowsAsParameters(true);\n+            if (softAssert.assertEquals(\"Expected dropdown is of the same size as actual dropdown: \",\n+                    expectedOptions.size(), actualOptions.size()))\n             {\n-                for (int i = 0; i < expectedItems.size(); i++)\n+                for (int i = 0; i < expectedOptions.size(); i++)\n                 {\n-                    WebElement option = actualItems.get(i);\n-                    Map<String, String> expectedRow = expectedItems.get(i).values();\n-                    descriptiveSoftAssert.assertEquals(\n-                            String.format(\"Text of actual item at position [%s]\", i + 1), expectedRow.get(\"item\"),\n+                    WebElement option = actualOptions.get(i);\n+                    Map<String, String> expectedRow = expectedOptions.get(i).values();\n+                    softAssert.assertEquals(\n+                            String.format(\"Text of actual option at position [%s]\", i + 1), expectedRow.get(\"item\"),\n                             webElementActions.getElementText(option));\n-                    descriptiveSoftAssert.assertEquals(\n-                            String.format(\"State of actual item at position [%s]\", i + 1),\n+                    softAssert.assertEquals(\n+                            String.format(\"State of actual option at position [%s]\", i + 1),\n                             Boolean.parseBoolean(expectedRow.get(\"state\")), option.isSelected());\n                 }\n             }\n-        }\n-    }\n-\n-    /**\n-     * Checks if a drop down with the specified <b>name</b> does not exist in context\n-     * @param dropDownName Any attribute value of the <i>&lt;select&gt;</i> tag\n-    */\n-    @Then(\"a drop down with the name '$dropDownName' does not exist\")\n-    public void doesNotDropDownExist(String dropDownName)\n-    {\n-        Locator locator = createLocator(dropDownName);\n-        locator.getSearchParameters().setVisibility(Visibility.ALL);\n-        baseValidations.assertIfElementDoesNotExist(String.format(DROP_DOWN_WITH_NAME, dropDownName), locator);\n-    }\n-\n-    /**\n-     * Checks that previously set searchContext contains a drop down with the expected <b>name</b>\n-     * and expected State\n-     * <p>\n-     * <b>Drop down</b> is a drop down list with the specified options;\n-     * </p>\n-     * <p>\n-     * Is created by the <i>&lt;select&gt;</i> tag. The <i>&lt;option&gt;</i> tags inside the <i>\n-     * &lt;select&gt;</i> define the available options in the list.</p>\n-     * <b>Example:</b>\n-     * <pre>\n-     *  &lt;select&gt;\n-     *   &lt;option&gt;visible text 1&lt;/option&gt;\n-     *   &lt;option&gt;visible text 2&lt;/option&gt;\n-     *   &lt;option&gt;visible text 3&lt;/option&gt;\n-     *  &lt;/select&gt;\n-     * </pre>\n-     * @param state A state value of the link\n-     * (<i>Possible values:</i> <b>ENABLED, DISABLED, SELECTED, NOT_SELECTED, VISIBLE, NOT_VISIBLE, SINGLE_SELECT,\n-     * MULTI_SELECT</b>)\n-     * @param dropDownName Text value of any attribute of the drop down tag\n-     */\n-    @Then(\"a [$state] drop down with the name '$dropDownName' exists\")\n-    public void isDropDownWithNameFound(DropDownState state, String dropDownName)\n-    {\n-        Select select = findDropDownList(dropDownName);\n-        baseValidations.assertElementState(\"The found drop down is \" + state, state, select);\n+        });\n     }\n \n     /**\n-     * Checks whether default value of a drop-down with the specific name\n+     * Checks whether default value of a dropdown located by locator\n      * is similar to expected\n-     * @param dropDownName Text value of any attribute of the drop down tag\n-     * @param dropDownText Text that is displayed\n+     * @param locator Locator to locate dropdown list\n+     * @param option Text that is displayed\n      */\n-    @Then(value = \"a drop down with the name '$dropDownName' and text '$dropDownText' exists\", priority = 1)\n-    public void ifDropDownWithNameExists(String dropDownName, String dropDownText)\n+    @Then(value = \"dropdown located `$locator` exists and selected option is `$option`\", priority = 1)\n+    public void doesDropdownHasFirstSelectedOptions(Locator locator, String option)", "originalCommit": "f193223995d4a749c2d25a7c77915d85dd828327", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzUxNzMwNw==", "url": "https://github.com/vividus-framework/vividus/pull/889#discussion_r483517307", "bodyText": "Ooption -> Option", "author": "valfirst", "createdAt": "2020-09-04T09:58:21Z", "path": "vividus-plugin-web-app/src/main/java/org/vividus/bdd/steps/ui/web/DropdownSteps.java", "diffHunk": "@@ -104,180 +81,92 @@ public Select isDropDownWithNameFound(String dropDownName)\n      * </tbody>\n      * </table>\n      */\n-    @Then(\"a drop down with the name '$dropDownName' contains the items: $dropDownItems\")\n-    public void doesDropDownListContainItems(String dropDownName, ExamplesTable dropDownItems)\n+    @Then(\"dropdown located `$locator` contains options: $options\")\n+    public void doesDropdownContainOptions(Locator locator, ExamplesTable options)\n     {\n-        Select dropDown = isDropDownWithNameFound(dropDownName);\n-        if (dropDown != null)\n-        {\n-            List<WebElement> actualItems = dropDown.getOptions();\n-            List<Parameters> expectedItems = dropDownItems.getRowsAsParameters(true);\n-            if (descriptiveSoftAssert.assertEquals(\"Expected dropdown is of the same size as actual dropdown: \",\n-                    expectedItems.size(), actualItems.size()))\n+        runIfDropdownExists(locator, dropdown -> {\n+            List<WebElement> actualOptions = dropdown.getOptions();\n+            List<Parameters> expectedOptions = options.getRowsAsParameters(true);\n+            if (softAssert.assertEquals(\"Expected dropdown is of the same size as actual dropdown: \",\n+                    expectedOptions.size(), actualOptions.size()))\n             {\n-                for (int i = 0; i < expectedItems.size(); i++)\n+                for (int i = 0; i < expectedOptions.size(); i++)\n                 {\n-                    WebElement option = actualItems.get(i);\n-                    Map<String, String> expectedRow = expectedItems.get(i).values();\n-                    descriptiveSoftAssert.assertEquals(\n-                            String.format(\"Text of actual item at position [%s]\", i + 1), expectedRow.get(\"item\"),\n+                    WebElement option = actualOptions.get(i);\n+                    Map<String, String> expectedRow = expectedOptions.get(i).values();\n+                    softAssert.assertEquals(\n+                            String.format(\"Text of actual option at position [%s]\", i + 1), expectedRow.get(\"item\"),\n                             webElementActions.getElementText(option));\n-                    descriptiveSoftAssert.assertEquals(\n-                            String.format(\"State of actual item at position [%s]\", i + 1),\n+                    softAssert.assertEquals(\n+                            String.format(\"State of actual option at position [%s]\", i + 1),\n                             Boolean.parseBoolean(expectedRow.get(\"state\")), option.isSelected());\n                 }\n             }\n-        }\n-    }\n-\n-    /**\n-     * Checks if a drop down with the specified <b>name</b> does not exist in context\n-     * @param dropDownName Any attribute value of the <i>&lt;select&gt;</i> tag\n-    */\n-    @Then(\"a drop down with the name '$dropDownName' does not exist\")\n-    public void doesNotDropDownExist(String dropDownName)\n-    {\n-        Locator locator = createLocator(dropDownName);\n-        locator.getSearchParameters().setVisibility(Visibility.ALL);\n-        baseValidations.assertIfElementDoesNotExist(String.format(DROP_DOWN_WITH_NAME, dropDownName), locator);\n-    }\n-\n-    /**\n-     * Checks that previously set searchContext contains a drop down with the expected <b>name</b>\n-     * and expected State\n-     * <p>\n-     * <b>Drop down</b> is a drop down list with the specified options;\n-     * </p>\n-     * <p>\n-     * Is created by the <i>&lt;select&gt;</i> tag. The <i>&lt;option&gt;</i> tags inside the <i>\n-     * &lt;select&gt;</i> define the available options in the list.</p>\n-     * <b>Example:</b>\n-     * <pre>\n-     *  &lt;select&gt;\n-     *   &lt;option&gt;visible text 1&lt;/option&gt;\n-     *   &lt;option&gt;visible text 2&lt;/option&gt;\n-     *   &lt;option&gt;visible text 3&lt;/option&gt;\n-     *  &lt;/select&gt;\n-     * </pre>\n-     * @param state A state value of the link\n-     * (<i>Possible values:</i> <b>ENABLED, DISABLED, SELECTED, NOT_SELECTED, VISIBLE, NOT_VISIBLE, SINGLE_SELECT,\n-     * MULTI_SELECT</b>)\n-     * @param dropDownName Text value of any attribute of the drop down tag\n-     */\n-    @Then(\"a [$state] drop down with the name '$dropDownName' exists\")\n-    public void isDropDownWithNameFound(DropDownState state, String dropDownName)\n-    {\n-        Select select = findDropDownList(dropDownName);\n-        baseValidations.assertElementState(\"The found drop down is \" + state, state, select);\n+        });\n     }\n \n     /**\n-     * Checks whether default value of a drop-down with the specific name\n+     * Checks whether default value of a dropdown located by locator\n      * is similar to expected\n-     * @param dropDownName Text value of any attribute of the drop down tag\n-     * @param dropDownText Text that is displayed\n+     * @param locator Locator to locate dropdown list\n+     * @param option Text that is displayed\n      */\n-    @Then(value = \"a drop down with the name '$dropDownName' and text '$dropDownText' exists\", priority = 1)\n-    public void ifDropDownWithNameExists(String dropDownName, String dropDownText)\n+    @Then(value = \"dropdown located `$locator` exists and selected option is `$option`\", priority = 1)\n+    public void doesDropdownHasFirstSelectedOptions(Locator locator, String option)\n     {\n-        Select dropDown = isDropDownWithNameFound(dropDownName);\n-        if (dropDown != null && descriptiveSoftAssert.assertTrue(\"Selected options are present in drop down\",\n-                !dropDown.getAllSelectedOptions().isEmpty()))\n+        Select dropdown = findDropdown(locator).orElse(null);\n+        if (dropdown != null && softAssert.assertTrue(\"Selected options are present in dropdown\",\n+                !dropdown.getAllSelectedOptions().isEmpty()))\n         {\n-            descriptiveSoftAssert.assertEquals(\"Selected option in drop down\", dropDownText,\n-                    dropDown.getFirstSelectedOption().getText().trim());\n+            softAssert.assertEquals(\"Selected option in dropdown\", option,\n+                    dropdown.getFirstSelectedOption().getText().trim());\n         }\n     }\n \n     /**\n-     * Selects a desired <b>option</b> by a visible 'text' from a <b>drop-down list</b> with\n-     * a specified 'name' attribute. If any option was already selected - reselects it.\n-     * If there are several equal values in a drop-down - selects them all.\n-     * <p>\n-     * A <b>drop-down list</b> is created by the <i>&lt;select&gt;</i> tag. The <i>&lt;option&gt;</i> tags inside the<i>\n-     * &lt;select&gt;</i> define the available options in the list.</p>\n-     * <b>Example:</b>\n-     * <pre>\n-     *  &lt;select&gt;\n-     *   &lt;option&gt;visible text 1&lt;/option&gt;\n-     *   &lt;option&gt;visible text 2&lt;/option&gt;\n-     *   &lt;option&gt;visible text 3&lt;/option&gt;\n-     *  &lt;/select&gt;\n-     * </pre>\n-     * Actions performed at this step:\n-     * <ul>\n-     * <li>Finds the <b>drop-down list</b> by it's 'name' attribute\n-     * <li>Selects an <b>option</b> in the <b>drop-down list</b> by it's visible 'text'\n-     * <li>Waits for the page to load\n-     * </ul>\n-     * @param text A visible text value of the <b>option</b> in the <b>drop-down list</b>\n-     * @param dropDownListName A name attribute of the <b>drop-down list</b>\n-     * @see <a href=\"https://www.w3schools.com/tags/tag_select.asp\"><i>HTML &lt;select&gt; Tag</i></a>\n-     */\n-    @When(\"I select '$text' from a drop down with the name '$dropDownListName'\")\n-    public void selectItemInDDL(String text, String dropDownListName)\n-    {\n-        selectItemInDDL(dropDownListName, text, false);\n-    }\n-\n-    /**\n-     * Step works similarly to\n-     * <ul>\n-     * <li><i><b>When</b> I select '$text' from a drop down with the name '$dropDownListName'</i>\n-     * </ul>\n-     * step. The difference is that if any option was already selected - it remains selected.\n-     * If you apply this step to a single select drop-down it will be <i><b>failed</b></i>\n-     * @param text A visible text value of the <b>option</b> in the <b>drop-down list</b>\n-     * @param dropDownListName A name attribute of the <b>drop-down list</b>\n-     * @see DropdownSteps#selectItemInDDL(String text, String dropDownListName)\n+     * Adds the text to any option already selected. Works for multi-select dropdown lists.\n+     * If you apply this step to a single select dropdown it will be <i><b>failed</b></i>\n+     * @param option A visible text value of the <b>option</b> in the <b>dropdown list</b>\n+     * @param locator Locator to locate <b>dropdown list</b>\n      */\n-    @When(\"I add '$text' to selection in a drop down with the name '$dropDownListName'\")\n-    public void addItemInDDL(String text, String dropDownListName)\n+    @When(\"I add `$option` to selection in dropdown located `$locator`\")\n+    public void addOptionInDropdown(String option, Locator locator)\n     {\n-        selectItemInDDL(dropDownListName, text, true);\n+        selectOptionInDropdown(locator, option, true);\n     }\n \n     /**\n-     * Selects a desired <b>option</b> by a visible <b>text</b> from a drop-down element specified by <b>locator</b>.A\n-     * <b>drop-down list</b> is created by the <i>&lt;select&gt;</i> tag. The <i>&lt;option&gt;</i> tags inside the<i>\n+     * Selects a desired <b>option</b> by a visible <b>text</b> from a dropdown element specified by <b>locator</b>.A\n+     * <b>dropdown list</b> is created by the <i>&lt;select&gt;</i> tag. The <i>&lt;option&gt;</i> tags inside the<i>\n      * &lt;select&gt;</i> define the available options in the list.\n      * <p>Actions performed at this step:</p>\n      * <ul>\n      * <li>Find an element by locator</li>\n-     * <li>Select an <b>option</b> in the <b>drop-down list</b> by it's visible 'text'</li>\n+     * <li>Select an <b>option</b> in the <b>dropdown list</b> by it's visible 'text'</li>\n      * <li>Wait for the page to load</li>\n      * </ul>\n-     * @param text A visible text value of the <b>option</b> in the <b>drop-down list</b>\n-     * @param locator Locator of a drop down element\n+     * @param option A visible text value of the <b>option</b> in the <b>dropdown list</b>\n+     * @param locator Locator of a dropdown element\n      */\n-    @When(\"I select `$text` from drop down located `$locator`\")\n-    public void selectTextFromDropDownByLocator(String text, Locator locator)\n-    {\n-        findDropDownList(\"A drop down\", locator)\n-            .ifPresent(s -> fieldActions.selectItemInDropDownList(s, text, false));\n-    }\n-\n-    private Optional<Select> findDropDownList(String businessDescription, Locator locator)\n+    @When(\"I select `$option` in dropdown located `$locator`\")\n+    public void selectOoptionInDropdown(String option, Locator locator)", "originalCommit": "f193223995d4a749c2d25a7c77915d85dd828327", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzUxNzY3NQ==", "url": "https://github.com/vividus-framework/vividus/pull/889#discussion_r483517675", "bodyText": "isAddition -> addition", "author": "valfirst", "createdAt": "2020-09-04T09:59:10Z", "path": "vividus-plugin-web-app/src/main/java/org/vividus/bdd/steps/ui/web/DropdownSteps.java", "diffHunk": "@@ -104,180 +81,92 @@ public Select isDropDownWithNameFound(String dropDownName)\n      * </tbody>\n      * </table>\n      */\n-    @Then(\"a drop down with the name '$dropDownName' contains the items: $dropDownItems\")\n-    public void doesDropDownListContainItems(String dropDownName, ExamplesTable dropDownItems)\n+    @Then(\"dropdown located `$locator` contains options: $options\")\n+    public void doesDropdownContainOptions(Locator locator, ExamplesTable options)\n     {\n-        Select dropDown = isDropDownWithNameFound(dropDownName);\n-        if (dropDown != null)\n-        {\n-            List<WebElement> actualItems = dropDown.getOptions();\n-            List<Parameters> expectedItems = dropDownItems.getRowsAsParameters(true);\n-            if (descriptiveSoftAssert.assertEquals(\"Expected dropdown is of the same size as actual dropdown: \",\n-                    expectedItems.size(), actualItems.size()))\n+        runIfDropdownExists(locator, dropdown -> {\n+            List<WebElement> actualOptions = dropdown.getOptions();\n+            List<Parameters> expectedOptions = options.getRowsAsParameters(true);\n+            if (softAssert.assertEquals(\"Expected dropdown is of the same size as actual dropdown: \",\n+                    expectedOptions.size(), actualOptions.size()))\n             {\n-                for (int i = 0; i < expectedItems.size(); i++)\n+                for (int i = 0; i < expectedOptions.size(); i++)\n                 {\n-                    WebElement option = actualItems.get(i);\n-                    Map<String, String> expectedRow = expectedItems.get(i).values();\n-                    descriptiveSoftAssert.assertEquals(\n-                            String.format(\"Text of actual item at position [%s]\", i + 1), expectedRow.get(\"item\"),\n+                    WebElement option = actualOptions.get(i);\n+                    Map<String, String> expectedRow = expectedOptions.get(i).values();\n+                    softAssert.assertEquals(\n+                            String.format(\"Text of actual option at position [%s]\", i + 1), expectedRow.get(\"item\"),\n                             webElementActions.getElementText(option));\n-                    descriptiveSoftAssert.assertEquals(\n-                            String.format(\"State of actual item at position [%s]\", i + 1),\n+                    softAssert.assertEquals(\n+                            String.format(\"State of actual option at position [%s]\", i + 1),\n                             Boolean.parseBoolean(expectedRow.get(\"state\")), option.isSelected());\n                 }\n             }\n-        }\n-    }\n-\n-    /**\n-     * Checks if a drop down with the specified <b>name</b> does not exist in context\n-     * @param dropDownName Any attribute value of the <i>&lt;select&gt;</i> tag\n-    */\n-    @Then(\"a drop down with the name '$dropDownName' does not exist\")\n-    public void doesNotDropDownExist(String dropDownName)\n-    {\n-        Locator locator = createLocator(dropDownName);\n-        locator.getSearchParameters().setVisibility(Visibility.ALL);\n-        baseValidations.assertIfElementDoesNotExist(String.format(DROP_DOWN_WITH_NAME, dropDownName), locator);\n-    }\n-\n-    /**\n-     * Checks that previously set searchContext contains a drop down with the expected <b>name</b>\n-     * and expected State\n-     * <p>\n-     * <b>Drop down</b> is a drop down list with the specified options;\n-     * </p>\n-     * <p>\n-     * Is created by the <i>&lt;select&gt;</i> tag. The <i>&lt;option&gt;</i> tags inside the <i>\n-     * &lt;select&gt;</i> define the available options in the list.</p>\n-     * <b>Example:</b>\n-     * <pre>\n-     *  &lt;select&gt;\n-     *   &lt;option&gt;visible text 1&lt;/option&gt;\n-     *   &lt;option&gt;visible text 2&lt;/option&gt;\n-     *   &lt;option&gt;visible text 3&lt;/option&gt;\n-     *  &lt;/select&gt;\n-     * </pre>\n-     * @param state A state value of the link\n-     * (<i>Possible values:</i> <b>ENABLED, DISABLED, SELECTED, NOT_SELECTED, VISIBLE, NOT_VISIBLE, SINGLE_SELECT,\n-     * MULTI_SELECT</b>)\n-     * @param dropDownName Text value of any attribute of the drop down tag\n-     */\n-    @Then(\"a [$state] drop down with the name '$dropDownName' exists\")\n-    public void isDropDownWithNameFound(DropDownState state, String dropDownName)\n-    {\n-        Select select = findDropDownList(dropDownName);\n-        baseValidations.assertElementState(\"The found drop down is \" + state, state, select);\n+        });\n     }\n \n     /**\n-     * Checks whether default value of a drop-down with the specific name\n+     * Checks whether default value of a dropdown located by locator\n      * is similar to expected\n-     * @param dropDownName Text value of any attribute of the drop down tag\n-     * @param dropDownText Text that is displayed\n+     * @param locator Locator to locate dropdown list\n+     * @param option Text that is displayed\n      */\n-    @Then(value = \"a drop down with the name '$dropDownName' and text '$dropDownText' exists\", priority = 1)\n-    public void ifDropDownWithNameExists(String dropDownName, String dropDownText)\n+    @Then(value = \"dropdown located `$locator` exists and selected option is `$option`\", priority = 1)\n+    public void doesDropdownHasFirstSelectedOptions(Locator locator, String option)\n     {\n-        Select dropDown = isDropDownWithNameFound(dropDownName);\n-        if (dropDown != null && descriptiveSoftAssert.assertTrue(\"Selected options are present in drop down\",\n-                !dropDown.getAllSelectedOptions().isEmpty()))\n+        Select dropdown = findDropdown(locator).orElse(null);\n+        if (dropdown != null && softAssert.assertTrue(\"Selected options are present in dropdown\",\n+                !dropdown.getAllSelectedOptions().isEmpty()))\n         {\n-            descriptiveSoftAssert.assertEquals(\"Selected option in drop down\", dropDownText,\n-                    dropDown.getFirstSelectedOption().getText().trim());\n+            softAssert.assertEquals(\"Selected option in dropdown\", option,\n+                    dropdown.getFirstSelectedOption().getText().trim());\n         }\n     }\n \n     /**\n-     * Selects a desired <b>option</b> by a visible 'text' from a <b>drop-down list</b> with\n-     * a specified 'name' attribute. If any option was already selected - reselects it.\n-     * If there are several equal values in a drop-down - selects them all.\n-     * <p>\n-     * A <b>drop-down list</b> is created by the <i>&lt;select&gt;</i> tag. The <i>&lt;option&gt;</i> tags inside the<i>\n-     * &lt;select&gt;</i> define the available options in the list.</p>\n-     * <b>Example:</b>\n-     * <pre>\n-     *  &lt;select&gt;\n-     *   &lt;option&gt;visible text 1&lt;/option&gt;\n-     *   &lt;option&gt;visible text 2&lt;/option&gt;\n-     *   &lt;option&gt;visible text 3&lt;/option&gt;\n-     *  &lt;/select&gt;\n-     * </pre>\n-     * Actions performed at this step:\n-     * <ul>\n-     * <li>Finds the <b>drop-down list</b> by it's 'name' attribute\n-     * <li>Selects an <b>option</b> in the <b>drop-down list</b> by it's visible 'text'\n-     * <li>Waits for the page to load\n-     * </ul>\n-     * @param text A visible text value of the <b>option</b> in the <b>drop-down list</b>\n-     * @param dropDownListName A name attribute of the <b>drop-down list</b>\n-     * @see <a href=\"https://www.w3schools.com/tags/tag_select.asp\"><i>HTML &lt;select&gt; Tag</i></a>\n-     */\n-    @When(\"I select '$text' from a drop down with the name '$dropDownListName'\")\n-    public void selectItemInDDL(String text, String dropDownListName)\n-    {\n-        selectItemInDDL(dropDownListName, text, false);\n-    }\n-\n-    /**\n-     * Step works similarly to\n-     * <ul>\n-     * <li><i><b>When</b> I select '$text' from a drop down with the name '$dropDownListName'</i>\n-     * </ul>\n-     * step. The difference is that if any option was already selected - it remains selected.\n-     * If you apply this step to a single select drop-down it will be <i><b>failed</b></i>\n-     * @param text A visible text value of the <b>option</b> in the <b>drop-down list</b>\n-     * @param dropDownListName A name attribute of the <b>drop-down list</b>\n-     * @see DropdownSteps#selectItemInDDL(String text, String dropDownListName)\n+     * Adds the text to any option already selected. Works for multi-select dropdown lists.\n+     * If you apply this step to a single select dropdown it will be <i><b>failed</b></i>\n+     * @param option A visible text value of the <b>option</b> in the <b>dropdown list</b>\n+     * @param locator Locator to locate <b>dropdown list</b>\n      */\n-    @When(\"I add '$text' to selection in a drop down with the name '$dropDownListName'\")\n-    public void addItemInDDL(String text, String dropDownListName)\n+    @When(\"I add `$option` to selection in dropdown located `$locator`\")\n+    public void addOptionInDropdown(String option, Locator locator)\n     {\n-        selectItemInDDL(dropDownListName, text, true);\n+        selectOptionInDropdown(locator, option, true);\n     }\n \n     /**\n-     * Selects a desired <b>option</b> by a visible <b>text</b> from a drop-down element specified by <b>locator</b>.A\n-     * <b>drop-down list</b> is created by the <i>&lt;select&gt;</i> tag. The <i>&lt;option&gt;</i> tags inside the<i>\n+     * Selects a desired <b>option</b> by a visible <b>text</b> from a dropdown element specified by <b>locator</b>.A\n+     * <b>dropdown list</b> is created by the <i>&lt;select&gt;</i> tag. The <i>&lt;option&gt;</i> tags inside the<i>\n      * &lt;select&gt;</i> define the available options in the list.\n      * <p>Actions performed at this step:</p>\n      * <ul>\n      * <li>Find an element by locator</li>\n-     * <li>Select an <b>option</b> in the <b>drop-down list</b> by it's visible 'text'</li>\n+     * <li>Select an <b>option</b> in the <b>dropdown list</b> by it's visible 'text'</li>\n      * <li>Wait for the page to load</li>\n      * </ul>\n-     * @param text A visible text value of the <b>option</b> in the <b>drop-down list</b>\n-     * @param locator Locator of a drop down element\n+     * @param option A visible text value of the <b>option</b> in the <b>dropdown list</b>\n+     * @param locator Locator of a dropdown element\n      */\n-    @When(\"I select `$text` from drop down located `$locator`\")\n-    public void selectTextFromDropDownByLocator(String text, Locator locator)\n-    {\n-        findDropDownList(\"A drop down\", locator)\n-            .ifPresent(s -> fieldActions.selectItemInDropDownList(s, text, false));\n-    }\n-\n-    private Optional<Select> findDropDownList(String businessDescription, Locator locator)\n+    @When(\"I select `$option` in dropdown located `$locator`\")\n+    public void selectOoptionInDropdown(String option, Locator locator)\n     {\n-        return Optional.ofNullable(baseValidations.assertIfElementExists(businessDescription, locator))\n-                .map(Select::new);\n+        selectOptionInDropdown(locator, option, false);\n     }\n \n-    private Select findDropDownList(String dropDownListName)\n+    private void runIfDropdownExists(Locator locator, Consumer<Select> toRun)\n     {\n-        WebElement element = baseValidations.assertIfElementExists(String.format(DROP_DOWN_WITH_NAME, dropDownListName),\n-                createLocator(dropDownListName));\n-        return element != null ? new Select(element) : null;\n+        findDropdown(locator).ifPresent(toRun);\n     }\n \n-    private void selectItemInDDL(String dropDownListName, String text, boolean isAddition)\n+    private Optional<Select> findDropdown(Locator locator)\n     {\n-        Select select = findDropDownList(dropDownListName);\n-        fieldActions.selectItemInDropDownList(select, text, isAddition);\n+        return Optional.ofNullable(baseValidations.assertIfElementExists(\"Dropdown\", locator))\n+                       .map(Select::new);\n     }\n \n-    private Locator createLocator(String dropDownListName)\n+    private void selectOptionInDropdown(Locator locator, String text, boolean isAddition)", "originalCommit": "f193223995d4a749c2d25a7c77915d85dd828327", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "f4ae765e9ca99969ebabc129aea737c3babbb796", "url": "https://github.com/vividus-framework/vividus/commit/f4ae765e9ca99969ebabc129aea737c3babbb796", "message": "[plugin-web-app] Use locators for dropdown steps", "committedDate": "2020-09-04T14:54:29Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzY3MjU4Mg==", "url": "https://github.com/vividus-framework/vividus/pull/889#discussion_r483672582", "bodyText": "Has -> Have", "author": "valfirst", "createdAt": "2020-09-04T14:57:55Z", "path": "vividus-plugin-web-app/src/main/java/org/vividus/bdd/steps/ui/web/DropdownSteps.java", "diffHunk": "@@ -104,180 +81,92 @@ public Select isDropDownWithNameFound(String dropDownName)\n      * </tbody>\n      * </table>\n      */\n-    @Then(\"a drop down with the name '$dropDownName' contains the items: $dropDownItems\")\n-    public void doesDropDownListContainItems(String dropDownName, ExamplesTable dropDownItems)\n+    @Then(\"dropdown located `$locator` contains options: $options\")\n+    public void doesDropdownContainOptions(Locator locator, ExamplesTable options)\n     {\n-        Select dropDown = isDropDownWithNameFound(dropDownName);\n-        if (dropDown != null)\n-        {\n-            List<WebElement> actualItems = dropDown.getOptions();\n-            List<Parameters> expectedItems = dropDownItems.getRowsAsParameters(true);\n-            if (descriptiveSoftAssert.assertEquals(\"Expected dropdown is of the same size as actual dropdown: \",\n-                    expectedItems.size(), actualItems.size()))\n+        runIfDropdownExists(locator, dropdown -> {\n+            List<WebElement> actualOptions = dropdown.getOptions();\n+            List<Parameters> expectedOptions = options.getRowsAsParameters(true);\n+            if (softAssert.assertEquals(\"Expected dropdown is of the same size as actual dropdown: \",\n+                    expectedOptions.size(), actualOptions.size()))\n             {\n-                for (int i = 0; i < expectedItems.size(); i++)\n+                for (int i = 0; i < expectedOptions.size(); i++)\n                 {\n-                    WebElement option = actualItems.get(i);\n-                    Map<String, String> expectedRow = expectedItems.get(i).values();\n-                    descriptiveSoftAssert.assertEquals(\n-                            String.format(\"Text of actual item at position [%s]\", i + 1), expectedRow.get(\"item\"),\n+                    WebElement option = actualOptions.get(i);\n+                    Map<String, String> expectedRow = expectedOptions.get(i).values();\n+                    softAssert.assertEquals(\n+                            String.format(\"Text of actual option at position [%s]\", i + 1), expectedRow.get(\"item\"),\n                             webElementActions.getElementText(option));\n-                    descriptiveSoftAssert.assertEquals(\n-                            String.format(\"State of actual item at position [%s]\", i + 1),\n+                    softAssert.assertEquals(\n+                            String.format(\"State of actual option at position [%s]\", i + 1),\n                             Boolean.parseBoolean(expectedRow.get(\"state\")), option.isSelected());\n                 }\n             }\n-        }\n-    }\n-\n-    /**\n-     * Checks if a drop down with the specified <b>name</b> does not exist in context\n-     * @param dropDownName Any attribute value of the <i>&lt;select&gt;</i> tag\n-    */\n-    @Then(\"a drop down with the name '$dropDownName' does not exist\")\n-    public void doesNotDropDownExist(String dropDownName)\n-    {\n-        Locator locator = createLocator(dropDownName);\n-        locator.getSearchParameters().setVisibility(Visibility.ALL);\n-        baseValidations.assertIfElementDoesNotExist(String.format(DROP_DOWN_WITH_NAME, dropDownName), locator);\n-    }\n-\n-    /**\n-     * Checks that previously set searchContext contains a drop down with the expected <b>name</b>\n-     * and expected State\n-     * <p>\n-     * <b>Drop down</b> is a drop down list with the specified options;\n-     * </p>\n-     * <p>\n-     * Is created by the <i>&lt;select&gt;</i> tag. The <i>&lt;option&gt;</i> tags inside the <i>\n-     * &lt;select&gt;</i> define the available options in the list.</p>\n-     * <b>Example:</b>\n-     * <pre>\n-     *  &lt;select&gt;\n-     *   &lt;option&gt;visible text 1&lt;/option&gt;\n-     *   &lt;option&gt;visible text 2&lt;/option&gt;\n-     *   &lt;option&gt;visible text 3&lt;/option&gt;\n-     *  &lt;/select&gt;\n-     * </pre>\n-     * @param state A state value of the link\n-     * (<i>Possible values:</i> <b>ENABLED, DISABLED, SELECTED, NOT_SELECTED, VISIBLE, NOT_VISIBLE, SINGLE_SELECT,\n-     * MULTI_SELECT</b>)\n-     * @param dropDownName Text value of any attribute of the drop down tag\n-     */\n-    @Then(\"a [$state] drop down with the name '$dropDownName' exists\")\n-    public void isDropDownWithNameFound(DropDownState state, String dropDownName)\n-    {\n-        Select select = findDropDownList(dropDownName);\n-        baseValidations.assertElementState(\"The found drop down is \" + state, state, select);\n+        });\n     }\n \n     /**\n-     * Checks whether default value of a drop-down with the specific name\n+     * Checks whether default value of a dropdown located by locator\n      * is similar to expected\n-     * @param dropDownName Text value of any attribute of the drop down tag\n-     * @param dropDownText Text that is displayed\n+     * @param locator Locator to locate dropdown list\n+     * @param option Text that is displayed\n      */\n-    @Then(value = \"a drop down with the name '$dropDownName' and text '$dropDownText' exists\", priority = 1)\n-    public void ifDropDownWithNameExists(String dropDownName, String dropDownText)\n+    @Then(value = \"dropdown located `$locator` exists and selected option is `$option`\", priority = 1)\n+    public void doesDropdownHasFirstSelectedOption(Locator locator, String option)", "originalCommit": "f4ae765e9ca99969ebabc129aea737c3babbb796", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzY4MTgwOA==", "url": "https://github.com/vividus-framework/vividus/pull/889#discussion_r483681808", "bodyText": "findDropdown(locator).ifPresent(dd -> {  if (softAssert.asse...) } ) to reduce assignment and null check", "author": "uarlouski", "createdAt": "2020-09-04T15:14:16Z", "path": "vividus-plugin-web-app/src/main/java/org/vividus/bdd/steps/ui/web/DropdownSteps.java", "diffHunk": "@@ -104,180 +81,92 @@ public Select isDropDownWithNameFound(String dropDownName)\n      * </tbody>\n      * </table>\n      */\n-    @Then(\"a drop down with the name '$dropDownName' contains the items: $dropDownItems\")\n-    public void doesDropDownListContainItems(String dropDownName, ExamplesTable dropDownItems)\n+    @Then(\"dropdown located `$locator` contains options: $options\")\n+    public void doesDropdownContainOptions(Locator locator, ExamplesTable options)\n     {\n-        Select dropDown = isDropDownWithNameFound(dropDownName);\n-        if (dropDown != null)\n-        {\n-            List<WebElement> actualItems = dropDown.getOptions();\n-            List<Parameters> expectedItems = dropDownItems.getRowsAsParameters(true);\n-            if (descriptiveSoftAssert.assertEquals(\"Expected dropdown is of the same size as actual dropdown: \",\n-                    expectedItems.size(), actualItems.size()))\n+        runIfDropdownExists(locator, dropdown -> {\n+            List<WebElement> actualOptions = dropdown.getOptions();\n+            List<Parameters> expectedOptions = options.getRowsAsParameters(true);\n+            if (softAssert.assertEquals(\"Expected dropdown is of the same size as actual dropdown: \",\n+                    expectedOptions.size(), actualOptions.size()))\n             {\n-                for (int i = 0; i < expectedItems.size(); i++)\n+                for (int i = 0; i < expectedOptions.size(); i++)\n                 {\n-                    WebElement option = actualItems.get(i);\n-                    Map<String, String> expectedRow = expectedItems.get(i).values();\n-                    descriptiveSoftAssert.assertEquals(\n-                            String.format(\"Text of actual item at position [%s]\", i + 1), expectedRow.get(\"item\"),\n+                    WebElement option = actualOptions.get(i);\n+                    Map<String, String> expectedRow = expectedOptions.get(i).values();\n+                    softAssert.assertEquals(\n+                            String.format(\"Text of actual option at position [%s]\", i + 1), expectedRow.get(\"item\"),\n                             webElementActions.getElementText(option));\n-                    descriptiveSoftAssert.assertEquals(\n-                            String.format(\"State of actual item at position [%s]\", i + 1),\n+                    softAssert.assertEquals(\n+                            String.format(\"State of actual option at position [%s]\", i + 1),\n                             Boolean.parseBoolean(expectedRow.get(\"state\")), option.isSelected());\n                 }\n             }\n-        }\n-    }\n-\n-    /**\n-     * Checks if a drop down with the specified <b>name</b> does not exist in context\n-     * @param dropDownName Any attribute value of the <i>&lt;select&gt;</i> tag\n-    */\n-    @Then(\"a drop down with the name '$dropDownName' does not exist\")\n-    public void doesNotDropDownExist(String dropDownName)\n-    {\n-        Locator locator = createLocator(dropDownName);\n-        locator.getSearchParameters().setVisibility(Visibility.ALL);\n-        baseValidations.assertIfElementDoesNotExist(String.format(DROP_DOWN_WITH_NAME, dropDownName), locator);\n-    }\n-\n-    /**\n-     * Checks that previously set searchContext contains a drop down with the expected <b>name</b>\n-     * and expected State\n-     * <p>\n-     * <b>Drop down</b> is a drop down list with the specified options;\n-     * </p>\n-     * <p>\n-     * Is created by the <i>&lt;select&gt;</i> tag. The <i>&lt;option&gt;</i> tags inside the <i>\n-     * &lt;select&gt;</i> define the available options in the list.</p>\n-     * <b>Example:</b>\n-     * <pre>\n-     *  &lt;select&gt;\n-     *   &lt;option&gt;visible text 1&lt;/option&gt;\n-     *   &lt;option&gt;visible text 2&lt;/option&gt;\n-     *   &lt;option&gt;visible text 3&lt;/option&gt;\n-     *  &lt;/select&gt;\n-     * </pre>\n-     * @param state A state value of the link\n-     * (<i>Possible values:</i> <b>ENABLED, DISABLED, SELECTED, NOT_SELECTED, VISIBLE, NOT_VISIBLE, SINGLE_SELECT,\n-     * MULTI_SELECT</b>)\n-     * @param dropDownName Text value of any attribute of the drop down tag\n-     */\n-    @Then(\"a [$state] drop down with the name '$dropDownName' exists\")\n-    public void isDropDownWithNameFound(DropDownState state, String dropDownName)\n-    {\n-        Select select = findDropDownList(dropDownName);\n-        baseValidations.assertElementState(\"The found drop down is \" + state, state, select);\n+        });\n     }\n \n     /**\n-     * Checks whether default value of a drop-down with the specific name\n+     * Checks whether default value of a dropdown located by locator\n      * is similar to expected\n-     * @param dropDownName Text value of any attribute of the drop down tag\n-     * @param dropDownText Text that is displayed\n+     * @param locator Locator to locate dropdown list\n+     * @param option Text that is displayed\n      */\n-    @Then(value = \"a drop down with the name '$dropDownName' and text '$dropDownText' exists\", priority = 1)\n-    public void ifDropDownWithNameExists(String dropDownName, String dropDownText)\n+    @Then(value = \"dropdown located `$locator` exists and selected option is `$option`\", priority = 1)\n+    public void doesDropdownHasFirstSelectedOption(Locator locator, String option)\n     {\n-        Select dropDown = isDropDownWithNameFound(dropDownName);\n-        if (dropDown != null && descriptiveSoftAssert.assertTrue(\"Selected options are present in drop down\",\n-                !dropDown.getAllSelectedOptions().isEmpty()))\n+        Select dropdown = findDropdown(locator).orElse(null);", "originalCommit": "f4ae765e9ca99969ebabc129aea737c3babbb796", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "4580a8a604c59a7ce8f8d68b3c3a02882f1f470e", "url": "https://github.com/vividus-framework/vividus/commit/4580a8a604c59a7ce8f8d68b3c3a02882f1f470e", "message": "[plugin-web-app] Use locators for dropdown steps", "committedDate": "2020-09-07T06:56:36Z", "type": "commit"}, {"oid": "4580a8a604c59a7ce8f8d68b3c3a02882f1f470e", "url": "https://github.com/vividus-framework/vividus/commit/4580a8a604c59a7ce8f8d68b3c3a02882f1f470e", "message": "[plugin-web-app] Use locators for dropdown steps", "committedDate": "2020-09-07T06:56:36Z", "type": "forcePushed"}]}