{"pr_number": 1135, "pr_title": "[plugin-web-app] Add possibility to mock browser's HTTP requests", "pr_createdAt": "2020-11-13T12:21:05Z", "pr_url": "https://github.com/vividus-framework/vividus/pull/1135", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjkyMjE1Nw==", "url": "https://github.com/vividus-framework/vividus/pull/1135#discussion_r522922157", "bodyText": "maybe\n@when(\"I initialize $scopes variable $variableName with binary content of file from path $path\")", "author": "uarlouski", "createdAt": "2020-11-13T12:34:13Z", "path": "vividus/src/main/java/org/vividus/bdd/steps/BddVariableSteps.java", "diffHunk": "@@ -239,6 +240,26 @@ public void initVariableWithGivenValues(Set<VariableScope> scopes, String variab\n         bddVariableContext.putVariable(scopes, variableName, listOfMaps);\n     }\n \n+    /**\n+     * Loads resource located by path as a byte array and puts this variable into context.\n+     * Could be useful for the cases when one needs to pass a variable into step as a binary data.\n+     * @param scopes The set (comma separated list of scopes e.g.: STORY, NEXT_BATCHES) of variable's scope<br>\n+     * <i>Available scopes:</i>\n+     * <ul>\n+     * <li><b>STEP</b> - the variable will be available only within the step,\n+     * <li><b>SCENARIO</b> - the variable will be available only within the scenario,\n+     * <li><b>STORY</b> - the variable will be available within the whole story,\n+     * <li><b>NEXT_BATCHES</b> - the variable will be available starting from next batch\n+     * </ul>\n+     * @param variableName A name of variable to assign the values\n+     * @param path to a file\n+     */\n+    @When(\"I initialize $scopes variable `$variableName` with content of file from path `$path`\")", "originalCommit": "67ef0a3107388f7fbec9dfa7b17e5cb076f51dd9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjk2MTQyMA==", "url": "https://github.com/vividus-framework/vividus/pull/1135#discussion_r522961420", "bodyText": "I'm really doubtful regarding this step, have you thought about Vividus expression?", "author": "valfirst", "createdAt": "2020-11-13T13:50:24Z", "path": "docs/modules/commons/pages/vividus-steps.adoc", "diffHunk": "@@ -53,3 +53,31 @@ When I execute steps at most 5 times while variable `var` is < `3`:\n |!When I set the text found in search context to the 'scenario' variable 'var'!                                         |\n Then `${var}` is = `3`\n ----\n+\n+=== Save file as binary data\n+\n+==== *_Info_*\n+\n+Saves the file content to a variable as a binary data\n+\n+==== *_Wording_*\n+\n+[source,gherkin]\n+----\n+When I initialize $scopes variable `$variableName` with content of file from path `$path`", "originalCommit": "67ef0a3107388f7fbec9dfa7b17e5cb076f51dd9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjk2MjY1Nw==", "url": "https://github.com/vividus-framework/vividus/pull/1135#discussion_r522962657", "bodyText": "we mock responses, not requests", "author": "valfirst", "createdAt": "2020-11-13T13:52:38Z", "path": "docs/modules/plugins/pages/plugin-web-app.adoc", "diffHunk": "@@ -568,6 +568,60 @@ Then number of HTTP GET requests with URL pattern `http://httpbin\\.org/get` is e\n ----\n \n \n+=== Proxy - Mock request with content", "originalCommit": "67ef0a3107388f7fbec9dfa7b17e5cb076f51dd9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjk2NTgxNg==", "url": "https://github.com/vividus-framework/vividus/pull/1135#discussion_r522965816", "bodyText": "unexpected change", "author": "valfirst", "createdAt": "2020-11-13T13:58:11Z", "path": "vividus-tests/src/main/resources/properties/configuration.properties", "diffHunk": "@@ -1,3 +1,3 @@\n-configuration.profiles=web/headless/chrome\n+configuration.profiles=web/desktop/chrome", "originalCommit": "67ef0a3107388f7fbec9dfa7b17e5cb076f51dd9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjk2NjAwMg==", "url": "https://github.com/vividus-framework/vividus/pull/1135#discussion_r522966002", "bodyText": "noisy change? no checkstyle violations?", "author": "valfirst", "createdAt": "2020-11-13T13:58:29Z", "path": "vividus-plugin-web-app/src/test/java/org/vividus/proxy/steps/ProxyStepsTests.java", "diffHunk": "@@ -70,16 +74,21 @@\n import org.vividus.ui.web.action.IWebWaitActions;\n \n import io.netty.handler.codec.http.DefaultHttpHeaders;\n+import io.netty.handler.codec.http.FullHttpResponse;\n import io.netty.handler.codec.http.HttpHeaders;\n import io.netty.handler.codec.http.HttpRequest;\n+import io.netty.handler.codec.http.HttpResponse;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import io.netty.handler.codec.http.HttpVersion;\n \n @ExtendWith(MockitoExtension.class)\n class ProxyStepsTests\n {\n+    private static final String CONTENT_LENGTH = \"Content-Length\";\n     private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n     private static final String URL = \"www.test.com\";\n     private static final String REQUESTS_MATCHING_URL_ASSERTION_PATTERN =\n-            \"Number of HTTP %s requests matching URL pattern '%s'\";\n+        \"Number of HTTP %s requests matching URL pattern '%s'\";", "originalCommit": "67ef0a3107388f7fbec9dfa7b17e5cb076f51dd9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjk2NjgxMg==", "url": "https://github.com/vividus-framework/vividus/pull/1135#discussion_r522966812", "bodyText": "remove this line to stick examples to their scenario", "author": "valfirst", "createdAt": "2020-11-13T13:59:48Z", "path": "vividus-tests/src/main/resources/story/integration/ProxyStepsTests.story", "diffHunk": "@@ -55,3 +55,47 @@ Then a JSON element from '${response}' by the JSON path '$.headers' is equal to\n     \"Testname2\": \"testValue2\"\n }\n 'IGNORING_EXTRA_FIELDS\n+\n+Scenario: Verify step When I mock http requests with URL $rule `$url` with response code `$code` and content `$content`:$headers mocking resource with bytes\n+Meta:\n+    @requirementId 1104\n+Given I am on a page with the URL '${vividus-test-site-url}/frames.html'\n+When I switch to frame located `<frameId>`\n+Then number of elements found by `<elementId>` is = `0`\n+When I initialize scenario variable `mockedPage` with content of file from path `page.html`\n+When I mock HTTP responses with request URL which CONTAINS `example.com` using response code `200`, content `${mockedPage}` and headers:\n+|name        |value    |\n+|Content-Type|text/html|\n+When I refresh the page\n+When I switch to frame located `<frameId>`\n+Then number of elements found by `<elementId>` is = `1`\n+", "originalCommit": "67ef0a3107388f7fbec9dfa7b17e5cb076f51dd9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjk2NzA2Mw==", "url": "https://github.com/vividus-framework/vividus/pull/1135#discussion_r522967063", "bodyText": "remove this line to stick examples to their scenario", "author": "valfirst", "createdAt": "2020-11-13T14:00:12Z", "path": "vividus-tests/src/main/resources/story/integration/ProxyStepsTests.story", "diffHunk": "@@ -55,3 +55,47 @@ Then a JSON element from '${response}' by the JSON path '$.headers' is equal to\n     \"Testname2\": \"testValue2\"\n }\n 'IGNORING_EXTRA_FIELDS\n+\n+Scenario: Verify step When I mock http requests with URL $rule `$url` with response code `$code` and content `$content`:$headers mocking resource with bytes\n+Meta:\n+    @requirementId 1104\n+Given I am on a page with the URL '${vividus-test-site-url}/frames.html'\n+When I switch to frame located `<frameId>`\n+Then number of elements found by `<elementId>` is = `0`\n+When I initialize scenario variable `mockedPage` with content of file from path `page.html`\n+When I mock HTTP responses with request URL which CONTAINS `example.com` using response code `200`, content `${mockedPage}` and headers:\n+|name        |value    |\n+|Content-Type|text/html|\n+When I refresh the page\n+When I switch to frame located `<frameId>`\n+Then number of elements found by `<elementId>` is = `1`\n+\n+Examples:\n+|frameId       |elementId|\n+|id(exampleCom)|id(sw)   |\n+\n+Scenario: Verify step When I mock http requests with URL $rule `$url` with response code `$code` and content `$content`:$headers mocking the page\n+Meta:\n+    @requirementId 1104\n+When I mock HTTP responses with request URL which CONTAINS `frames.html` using response code `200`, content `#{loadResource(page.html)}` and headers:\n+|name        |value    |\n+|Content-Type|text/html|\n+Given I am on a page with the URL '${vividus-test-site-url}/frames.html'\n+Then number of elements found by `id(sw)` is = `1`\n+\n+Scenario: Verify step When I mock http requests with URL $rule `$url` with response code `$code`:$headers\n+Meta:\n+    @requirementId 1104\n+Given I am on a page with the URL '${vividus-test-site-url}/frames.html'\n+When I switch to frame located `<frameId>`\n+Then number of elements found by `<elementSelector>` is = `1`\n+When I mock HTTP responses with request URL which CONTAINS `example.com` using response code `404` and headers:\n+|name          |value|\n+|Content-Length|0    |\n+When I refresh the page\n+When I switch to frame located `<frameId>`\n+Then number of elements found by `<elementSelector>` is = `0`\n+", "originalCommit": "67ef0a3107388f7fbec9dfa7b17e5cb076f51dd9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "1bf41e0459314e0d2f3ad71fa41996dba836b228", "url": "https://github.com/vividus-framework/vividus/commit/1bf41e0459314e0d2f3ad71fa41996dba836b228", "message": "Just a test objects in expressions", "committedDate": "2020-11-16T09:58:54Z", "type": "forcePushed"}, {"oid": "3736d5d62859e33d3c62b65d4d7739249674ea1b", "url": "https://github.com/vividus-framework/vividus/commit/3736d5d62859e33d3c62b65d4d7739249674ea1b", "message": "[plugin-web-app] Add possibility to mock browser's HTTP requests", "committedDate": "2020-11-26T11:43:23Z", "type": "forcePushed"}, {"oid": "1d0de581f7a513a761c739d6f9f2ec2ca29ddd81", "url": "https://github.com/vividus-framework/vividus/commit/1d0de581f7a513a761c739d6f9f2ec2ca29ddd81", "message": "[plugin-web-app] Add possibility to mock browser's HTTP requests", "committedDate": "2020-11-26T12:27:04Z", "type": "forcePushed"}, {"oid": "b5375b20b1669bf70808d863eece143e5651c42e", "url": "https://github.com/vividus-framework/vividus/commit/b5375b20b1669bf70808d863eece143e5651c42e", "message": "[plugin-web-app] Add possibility to mock browser's HTTP requests", "committedDate": "2020-11-26T13:05:13Z", "type": "forcePushed"}, {"oid": "103175bdaca07aa579df97ddbf8f273ba5d67333", "url": "https://github.com/vividus-framework/vividus/commit/103175bdaca07aa579df97ddbf8f273ba5d67333", "message": "[plugin-web-app] Add possibility to mock browser's HTTP requests", "committedDate": "2020-11-26T13:33:13Z", "type": "forcePushed"}, {"oid": "c8deb1511ac4b75e285d1258418222b5bafd7194", "url": "https://github.com/vividus-framework/vividus/commit/c8deb1511ac4b75e285d1258418222b5bafd7194", "message": "[plugin-web-app] Add possibility to mock browser's HTTP requests", "committedDate": "2020-11-26T13:53:46Z", "type": "forcePushed"}, {"oid": "535e37b011b95f048585d6098688dae8dbe9531f", "url": "https://github.com/vividus-framework/vividus/commit/535e37b011b95f048585d6098688dae8dbe9531f", "message": "[plugin-web-app] Add possibility to mock browser's HTTP requests", "committedDate": "2020-11-26T15:03:59Z", "type": "forcePushed"}, {"oid": "a74cf9e4a49f9f2db7154e7a8a2194d23e7b9d7e", "url": "https://github.com/vividus-framework/vividus/commit/a74cf9e4a49f9f2db7154e7a8a2194d23e7b9d7e", "message": "[plugin-web-app] Add possibility to mock browser's HTTP requests", "committedDate": "2020-11-26T16:20:29Z", "type": "forcePushed"}, {"oid": "7d0d2995d0056cbcc0b420fd022371fd644cf7c9", "url": "https://github.com/vividus-framework/vividus/commit/7d0d2995d0056cbcc0b420fd022371fd644cf7c9", "message": "[plugin-web-app] Add possibility to mock browser's HTTP requests", "committedDate": "2020-11-27T07:42:24Z", "type": "forcePushed"}, {"oid": "58af80e69b6a0c0f07d759cd457afac91ae13edf", "url": "https://github.com/vividus-framework/vividus/commit/58af80e69b6a0c0f07d759cd457afac91ae13edf", "message": "[plugin-web-app] Add possibility to mock browser's HTTP requests", "committedDate": "2020-11-27T08:27:30Z", "type": "forcePushed"}, {"oid": "3694010764f0365d7a5682a9d1cef610258f7aad", "url": "https://github.com/vividus-framework/vividus/commit/3694010764f0365d7a5682a9d1cef610258f7aad", "message": "[plugin-web-app] Add possibility to mock browser's HTTP requests", "committedDate": "2020-11-27T09:34:40Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTY1NzI5NQ==", "url": "https://github.com/vividus-framework/vividus/pull/1135#discussion_r531657295", "bodyText": "loadBinaryResource ?", "author": "valfirst", "createdAt": "2020-11-27T15:18:17Z", "path": "docs/modules/commons/pages/expressions.adoc", "diffHunk": "@@ -193,6 +193,25 @@ Loads the resource found at the provided path and replaces the expression with t\n When I initialize the scenario variable `my-data` with value `#{loadResource(/data/body.txt)}`\n ----\n \n+=== `loadResourceAsByteArray`", "originalCommit": "3694010764f0365d7a5682a9d1cef610258f7aad", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTY1NzQwNw==", "url": "https://github.com/vividus-framework/vividus/pull/1135#discussion_r531657407", "bodyText": "as bytes array -> as bytes", "author": "valfirst", "createdAt": "2020-11-27T15:18:32Z", "path": "docs/modules/commons/pages/expressions.adoc", "diffHunk": "@@ -193,6 +193,25 @@ Loads the resource found at the provided path and replaces the expression with t\n When I initialize the scenario variable `my-data` with value `#{loadResource(/data/body.txt)}`\n ----\n \n+=== `loadResourceAsByteArray`\n+\n+Loads the resource found at the provided path as bytes array. Could be useful for the steps that accepting raw binary data.", "originalCommit": "3694010764f0365d7a5682a9d1cef610258f7aad", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTY1NzY5OQ==", "url": "https://github.com/vividus-framework/vividus/pull/1135#discussion_r531657699", "bodyText": "the example contains invalid expression reference", "author": "valfirst", "createdAt": "2020-11-27T15:19:14Z", "path": "docs/modules/commons/pages/expressions.adoc", "diffHunk": "@@ -193,6 +193,25 @@ Loads the resource found at the provided path and replaces the expression with t\n When I initialize the scenario variable `my-data` with value `#{loadResource(/data/body.txt)}`\n ----\n \n+=== `loadResourceAsByteArray`\n+\n+Loads the resource found at the provided path as bytes array. Could be useful for the steps that accepting raw binary data.\n+\n+[source, subs=\"+quotes\"]\n+----\n+#{loadResourceAsByteArray(*$pathToResource*)}\n+----\n+\n+* {path-parameter}\n+\n+.Load data from the project resource as bytes array\n+[source,gherkin]\n+----\n+When I mock HTTP responses with request URL which CONTAINS `frames.html` using response code `200`, content `#{loadResource(page.html)}` and headers:", "originalCommit": "3694010764f0365d7a5682a9d1cef610258f7aad", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTY1ODMzOA==", "url": "https://github.com/vividus-framework/vividus/pull/1135#discussion_r531658338", "bodyText": "...I mock HTTP responses with request URL which...", "author": "valfirst", "createdAt": "2020-11-27T15:20:28Z", "path": "docs/modules/plugins/pages/plugin-web-app.adoc", "diffHunk": "@@ -588,6 +588,59 @@ Then number of HTTP GET requests with URL pattern `http://httpbin\\.org/get` is e\n ----\n \n \n+=== Proxy - Mock response with content\n+\n+{proxy}\n+Mocks HTTP response with a provided content\n+\n+[IMPORTANT]\n+No actual request will be executed. Short-circuited response will be returned.\n+\n+[source,gherkin]\n+----\n+When I mock http requests with URL $rule `$url` with response code `$code` and content `$content`:$headers", "originalCommit": "3694010764f0365d7a5682a9d1cef610258f7aad", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTY1ODg4Mw==", "url": "https://github.com/vividus-framework/vividus/pull/1135#discussion_r531658883", "bodyText": "...I mock HTTP responses with request URL which...", "author": "valfirst", "createdAt": "2020-11-27T15:21:43Z", "path": "docs/modules/plugins/pages/plugin-web-app.adoc", "diffHunk": "@@ -588,6 +588,59 @@ Then number of HTTP GET requests with URL pattern `http://httpbin\\.org/get` is e\n ----\n \n \n+=== Proxy - Mock response with content\n+\n+{proxy}\n+Mocks HTTP response with a provided content\n+\n+[IMPORTANT]\n+No actual request will be executed. Short-circuited response will be returned.\n+\n+[source,gherkin]\n+----\n+When I mock http requests with URL $rule `$url` with response code `$code` and content `$content`:$headers\n+----\n+* `$rule` - xref:parameters:string-comparison-rule.adoc[String comparison rule]\n+* `$url` - the input value of URL to filter by\n+* `$code` - response status code\n+* `$content` - content to send within a response\n+* `$headers` - ExamplesTable representing the list of the headers with columns \"name\" and \"value\" specifying HTTP header names and values respectively\n+\n+.Hijack a page\n+[source,gherkin]\n+----\n+When I mock HTTP responses with request URL which CONTAINS `example.com` using response code `200`, content `#{loadResourceAsByteArray(page.html)}` and headers:\n+|name        |value    |\n+|Content-Type|text/html|\n+----\n+\n+\n+=== Proxy - Mock response without content\n+\n+{proxy}\n+Mocks HTTP response\n+\n+[IMPORTANT]\n+No actual request will be executed. Short-circuited response will be returned.\n+\n+[source,gherkin]\n+----\n+When I mock http requests with URL $rule `$url` with response code `$code` :$headers", "originalCommit": "3694010764f0365d7a5682a9d1cef610258f7aad", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTY2MTM3MQ==", "url": "https://github.com/vividus-framework/vividus/pull/1135#discussion_r531661371", "bodyText": "configuration.properties is not the best place to configure global variables", "author": "valfirst", "createdAt": "2020-11-27T15:26:58Z", "path": "vividus-tests/src/main/resources/properties/configuration.properties", "diffHunk": "@@ -1,3 +1,5 @@\n configuration.profiles=web/headless/chrome\n configuration.suite=integration\n configuration.environments=\n+\n+bdd.variables.global.vividus-test-site-url=https://vividus-test-site.herokuapp.com", "originalCommit": "3694010764f0365d7a5682a9d1cef610258f7aad", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTY2MTU5MA==", "url": "https://github.com/vividus-framework/vividus/pull/1135#discussion_r531661590", "bodyText": "vividus-tests/src/main/resources/properties/environment/envinroment.properties ?", "author": "valfirst", "createdAt": "2020-11-27T15:27:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTY2MTM3MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTY2MTc4MQ==", "url": "https://github.com/vividus-framework/vividus/pull/1135#discussion_r531661781", "bodyText": "please update the step syntax here and below", "author": "valfirst", "createdAt": "2020-11-27T15:27:56Z", "path": "vividus-tests/src/main/resources/story/integration/ProxyStepsTests.story", "diffHunk": "@@ -55,3 +55,44 @@ Then a JSON element from '${response}' by the JSON path '$.headers' is equal to\n     \"Testname2\": \"testValue2\"\n }\n 'IGNORING_EXTRA_FIELDS\n+\n+Scenario: Verify step When I mock http requests with URL $rule `$url` with response code `$code` and content `$content`:$headers mocking resource with bytes", "originalCommit": "3694010764f0365d7a5682a9d1cef610258f7aad", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTY2NTExOA==", "url": "https://github.com/vividus-framework/vividus/pull/1135#discussion_r531665118", "bodyText": "public interface IExpressionProcessor<T>\n{\n    Optional<T> execute(String expression);\n}\n?", "author": "valfirst", "createdAt": "2020-11-27T15:35:07Z", "path": "vividus-bdd-engine/src/main/java/org/vividus/bdd/expression/IExpressionProcessor.java", "diffHunk": "@@ -20,5 +20,5 @@\n \n public interface IExpressionProcessor\n {\n-    Optional<String> execute(String expression);\n+    Optional<Object> execute(String expression);\n }", "originalCommit": "3694010764f0365d7a5682a9d1cef610258f7aad", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTY2NTcwNA==", "url": "https://github.com/vividus-framework/vividus/pull/1135#discussion_r531665704", "bodyText": "and in this case if you keep UnaryExpressionProcessor you won't need to change each and every expression processor", "author": "valfirst", "createdAt": "2020-11-27T15:36:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTY2NTExOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTY2NjIzOA==", "url": "https://github.com/vividus-framework/vividus/pull/1135#discussion_r531666238", "bodyText": "Optional<Integer> ?", "author": "valfirst", "createdAt": "2020-11-27T15:37:26Z", "path": "vividus-bdd-engine/src/main/java/org/vividus/bdd/expression/RandomIntExpressionProcessor.java", "diffHunk": "@@ -31,7 +31,7 @@\n             \"^randomInt\\\\(\" + INT_NUMBER_REGEX + \",\\\\s*\" + INT_NUMBER_REGEX + \"\\\\)$\", Pattern.CASE_INSENSITIVE);\n \n     @Override\n-    public Optional<String> execute(String expression)\n+    public Optional<Object> execute(String expression)", "originalCommit": "3694010764f0365d7a5682a9d1cef610258f7aad", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTY2NjY4Mg==", "url": "https://github.com/vividus-framework/vividus/pull/1135#discussion_r531666682", "bodyText": "I would kept UnaryExpressionProcessor as a child of FunctionalExpressionProcessor", "author": "valfirst", "createdAt": "2020-11-27T15:38:21Z", "path": "vividus-bdd-engine/src/main/java/org/vividus/bdd/expression/FunctionalExpressionProcessor.java", "diffHunk": "@@ -17,25 +17,25 @@\n package org.vividus.bdd.expression;\n \n import java.util.Optional;\n-import java.util.function.UnaryOperator;\n+import java.util.function.Function;\n import java.util.regex.Matcher;\n import java.util.regex.Pattern;\n \n-public class UnaryExpressionProcessor implements IExpressionProcessor\n+public class FunctionalExpressionProcessor implements IExpressionProcessor", "originalCommit": "3694010764f0365d7a5682a9d1cef610258f7aad", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "2f84502b16840f21929e40869c5b3000bd0e0ac3", "url": "https://github.com/vividus-framework/vividus/commit/2f84502b16840f21929e40869c5b3000bd0e0ac3", "message": "[plugin-web-app] Add possibility to mock browser's HTTP requests", "committedDate": "2020-11-30T10:08:59Z", "type": "forcePushed"}, {"oid": "61593c7e42ad80f5dcafe4a48ec28d47707bef3e", "url": "https://github.com/vividus-framework/vividus/commit/61593c7e42ad80f5dcafe4a48ec28d47707bef3e", "message": "[plugin-web-app] Add possibility to mock browser's HTTP requests", "committedDate": "2020-11-30T10:21:43Z", "type": "forcePushed"}, {"oid": "727aafa773389c39663bf6f7dae0d86a29e10da6", "url": "https://github.com/vividus-framework/vividus/commit/727aafa773389c39663bf6f7dae0d86a29e10da6", "message": "[plugin-web-app] Add possibility to mock browser's HTTP requests", "committedDate": "2020-11-30T10:27:12Z", "type": "forcePushed"}, {"oid": "e37b5ef8e7cb025d54146c4f0a242ec17af04018", "url": "https://github.com/vividus-framework/vividus/commit/e37b5ef8e7cb025d54146c4f0a242ec17af04018", "message": "[plugin-web-app] Add possibility to mock browser's HTTP requests", "committedDate": "2020-12-03T07:48:28Z", "type": "commit"}, {"oid": "e37b5ef8e7cb025d54146c4f0a242ec17af04018", "url": "https://github.com/vividus-framework/vividus/commit/e37b5ef8e7cb025d54146c4f0a242ec17af04018", "message": "[plugin-web-app] Add possibility to mock browser's HTTP requests", "committedDate": "2020-12-03T07:48:28Z", "type": "forcePushed"}]}