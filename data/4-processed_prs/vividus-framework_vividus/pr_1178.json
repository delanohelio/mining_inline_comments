{"pr_number": 1178, "pr_title": "[plugin-browserstack] Add BrowserStack local support", "pr_createdAt": "2020-11-26T14:21:57Z", "pr_url": "https://github.com/vividus-framework/vividus/pull/1178", "timeline": [{"oid": "54b6556d6c1592571b8cc5f03cdd4e034adc1799", "url": "https://github.com/vividus-framework/vividus/commit/54b6556d6c1592571b8cc5f03cdd4e034adc1799", "message": "DRAFT Add support for bs local", "committedDate": "2020-11-26T14:25:57Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTA2MTc3OA==", "url": "https://github.com/vividus-framework/vividus/pull/1178#discussion_r531061778", "bodyText": "tunnellingEnabled", "author": "valfirst", "createdAt": "2020-11-26T14:23:02Z", "path": "vividus-extension-selenium/src/main/java/org/vividus/selenium/AbstractDesiredCapabilitiesConfigurer.java", "diffHunk": "@@ -19,18 +19,31 @@\n import java.util.HashMap;\n import java.util.Map;\n import java.util.Optional;\n+import java.util.function.Consumer;\n \n+import com.google.common.eventbus.Subscribe;\n+\n+import org.openqa.selenium.Proxy;\n+import org.openqa.selenium.remote.CapabilityType;\n import org.openqa.selenium.remote.DesiredCapabilities;\n import org.vividus.bdd.context.IBddRunContext;\n import org.vividus.bdd.model.RunningStory;\n+import org.vividus.selenium.event.WebDriverQuitEvent;\n+import org.vividus.selenium.tunnel.TunnelManager;\n+import org.vividus.selenium.tunnel.TunnelOptions;\n \n-public abstract class AbstractDesiredCapabilitiesConfigurer implements DesiredCapabilitiesConfigurer\n+public abstract class AbstractDesiredCapabilitiesConfigurer<T extends TunnelOptions>\n+        implements DesiredCapabilitiesConfigurer\n {\n     private final IBddRunContext bddRunContext;\n+    private final TunnelManager<T> tunnelManager;\n+\n+    private boolean tunnelEnabled;", "originalCommit": "a532ca467d1f2a28bca41e1e46603a12ea3331fc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTA2MjcwMQ==", "url": "https://github.com/vividus-framework/vividus/pull/1178#discussion_r531062701", "bodyText": "stopTunnel", "author": "valfirst", "createdAt": "2020-11-26T14:24:29Z", "path": "vividus-extension-selenium/src/main/java/org/vividus/selenium/AbstractDesiredCapabilitiesConfigurer.java", "diffHunk": "@@ -51,4 +64,35 @@ protected void configureTestName(DesiredCapabilities desiredCapabilities, String\n                 .map(RunningStory::getName)\n                 .ifPresent(name -> putNestedCapability(desiredCapabilities, parentKey, testNameKey, name));\n     }\n+\n+    protected void configureTunnel(DesiredCapabilities desiredCapabilities, Consumer<String> tunnelIdConsumer)\n+    {\n+        Proxy proxy = (Proxy) desiredCapabilities.getCapability(CapabilityType.PROXY);\n+        if (tunnelEnabled || proxy != null)\n+        {\n+            T options = createOptions();\n+            if (proxy != null)\n+            {\n+                options.setProxy(proxy.getHttpProxy());\n+            }\n+\n+            String tunnelId = tunnelManager.start(options);\n+            desiredCapabilities.setCapability(CapabilityType.PROXY, (Object) null);\n+\n+            tunnelIdConsumer.accept(tunnelId);\n+        }\n+    }\n+\n+    protected abstract T createOptions();\n+\n+    @Subscribe\n+    public void stopSauceConnect(WebDriverQuitEvent event)", "originalCommit": "a532ca467d1f2a28bca41e1e46603a12ea3331fc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTA2NDc2NQ==", "url": "https://github.com/vividus-framework/vividus/pull/1178#discussion_r531064765", "bodyText": "Why is Selenium configurer bind to tunnelling? What about usual Selenium Grid based on Docker? it doesn't support tunnelling", "author": "valfirst", "createdAt": "2020-11-26T14:27:28Z", "path": "vividus-extension-selenium/src/main/java/org/vividus/selenium/AbstractDesiredCapabilitiesConfigurer.java", "diffHunk": "@@ -19,18 +19,31 @@\n import java.util.HashMap;\n import java.util.Map;\n import java.util.Optional;\n+import java.util.function.Consumer;\n \n+import com.google.common.eventbus.Subscribe;\n+\n+import org.openqa.selenium.Proxy;\n+import org.openqa.selenium.remote.CapabilityType;\n import org.openqa.selenium.remote.DesiredCapabilities;\n import org.vividus.bdd.context.IBddRunContext;\n import org.vividus.bdd.model.RunningStory;\n+import org.vividus.selenium.event.WebDriverQuitEvent;\n+import org.vividus.selenium.tunnel.TunnelManager;\n+import org.vividus.selenium.tunnel.TunnelOptions;\n \n-public abstract class AbstractDesiredCapabilitiesConfigurer implements DesiredCapabilitiesConfigurer\n+public abstract class AbstractDesiredCapabilitiesConfigurer<T extends TunnelOptions>", "originalCommit": "54b6556d6c1592571b8cc5f03cdd4e034adc1799", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTA2ODM2MA==", "url": "https://github.com/vividus-framework/vividus/pull/1178#discussion_r531068360", "bodyText": "is it required? isn't localIdentifier  enough?", "author": "valfirst", "createdAt": "2020-11-26T14:33:13Z", "path": "vividus-plugin-browserstack/src/main/java/org/vividus/selenium/browserstack/BrowserStackCapabilitiesConfigurer.java", "diffHunk": "@@ -20,26 +20,49 @@\n import org.vividus.bdd.context.IBddRunContext;\n import org.vividus.selenium.AbstractDesiredCapabilitiesConfigurer;\n \n-public class BrowserStackCapabilitiesConfigurer extends AbstractDesiredCapabilitiesConfigurer\n+public class BrowserStackCapabilitiesConfigurer extends AbstractDesiredCapabilitiesConfigurer<BrowserStackLocalOptions>\n {\n+    private static final String BSTACK_KEY = \"bstack:options\";\n+\n     private boolean browserStackEnabled;\n+    private String skipUrlsPattern;\n \n-    public BrowserStackCapabilitiesConfigurer(IBddRunContext bddRunContext)\n+    public BrowserStackCapabilitiesConfigurer(IBddRunContext bddRunContext,\n+            BrowserStackLocalManager browserStackLocalManager)\n     {\n-        super(bddRunContext);\n+        super(bddRunContext, browserStackLocalManager);\n     }\n \n     @Override\n     public void configure(DesiredCapabilities desiredCapabilities)\n     {\n         if (browserStackEnabled)\n         {\n-            configureTestName(desiredCapabilities, \"bstack:options\", \"sessionName\");\n+            configureTunnel(desiredCapabilities, tunnelId ->\n+            {\n+                putNestedCapability(desiredCapabilities, BSTACK_KEY, \"local\", true);", "originalCommit": "54b6556d6c1592571b8cc5f03cdd4e034adc1799", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTA5NTA1OQ==", "url": "https://github.com/vividus-framework/vividus/pull/1178#discussion_r531095059", "bodyText": "yes, both local and localId are required", "author": "uarlouski", "createdAt": "2020-11-26T15:16:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTA2ODM2MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTA2ODYyNA==", "url": "https://github.com/vividus-framework/vividus/pull/1178#discussion_r531068624", "bodyText": "BSTACK_KEY -> BSTACK_OPTIONS", "author": "valfirst", "createdAt": "2020-11-26T14:33:37Z", "path": "vividus-plugin-browserstack/src/main/java/org/vividus/selenium/browserstack/BrowserStackCapabilitiesConfigurer.java", "diffHunk": "@@ -20,26 +20,49 @@\n import org.vividus.bdd.context.IBddRunContext;\n import org.vividus.selenium.AbstractDesiredCapabilitiesConfigurer;\n \n-public class BrowserStackCapabilitiesConfigurer extends AbstractDesiredCapabilitiesConfigurer\n+public class BrowserStackCapabilitiesConfigurer extends AbstractDesiredCapabilitiesConfigurer<BrowserStackLocalOptions>\n {\n+    private static final String BSTACK_KEY = \"bstack:options\";", "originalCommit": "54b6556d6c1592571b8cc5f03cdd4e034adc1799", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTA2OTI2Ng==", "url": "https://github.com/vividus-framework/vividus/pull/1178#discussion_r531069266", "bodyText": "why is RuntimeException ?", "author": "valfirst", "createdAt": "2020-11-26T14:34:32Z", "path": "vividus-plugin-browserstack/src/main/java/org/vividus/selenium/browserstack/BrowserStackLocalException.java", "diffHunk": "@@ -0,0 +1,27 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.selenium.browserstack;\n+\n+public class BrowserStackLocalException extends RuntimeException", "originalCommit": "54b6556d6c1592571b8cc5f03cdd4e034adc1799", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTEwNjMyMg==", "url": "https://github.com/vividus-framework/vividus/pull/1178#discussion_r531106322", "bodyText": "why not? anyway we should fail fast if something wrong happened with BS", "author": "uarlouski", "createdAt": "2020-11-26T15:35:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTA2OTI2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE3ODI0MA==", "url": "https://github.com/vividus-framework/vividus/pull/1178#discussion_r531178240", "bodyText": "it would be better to have a single checked exception for both SL and BS, like: TunnelStartException", "author": "valfirst", "createdAt": "2020-11-26T18:14:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTA2OTI2Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTA2OTQ5OA==", "url": "https://github.com/vividus-framework/vividus/pull/1178#discussion_r531069498", "bodyText": "it's not saucelabs", "author": "valfirst", "createdAt": "2020-11-26T14:34:53Z", "path": "vividus-plugin-browserstack/src/main/java/org/vividus/selenium/browserstack/BrowserStackLocalManager.java", "diffHunk": "@@ -0,0 +1,195 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.selenium.browserstack;\n+\n+import java.io.IOException;\n+import java.time.Duration;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import com.browserstack.local.Local;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.vividus.selenium.tunnel.TunnelManager;\n+import org.vividus.testcontext.TestContext;\n+import org.vividus.util.ResourceUtils;\n+import org.vividus.util.wait.RetryTimesBasedWaiter;\n+\n+public class BrowserStackLocalManager implements TunnelManager<BrowserStackLocalOptions>\n+{\n+    private static final Logger LOGGER = LoggerFactory.getLogger(BrowserStackLocalManager.class);\n+    private static final Object KEY = BrowserStackLocalConnection.class;\n+\n+    private final String sauceLabsAccessKey;", "originalCommit": "54b6556d6c1592571b8cc5f03cdd4e034adc1799", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTA3MDc4NA==", "url": "https://github.com/vividus-framework/vividus/pull/1178#discussion_r531070784", "bodyText": "why is it outside synchronized block?", "author": "valfirst", "createdAt": "2020-11-26T14:36:56Z", "path": "vividus-plugin-browserstack/src/main/java/org/vividus/selenium/browserstack/BrowserStackLocalManager.java", "diffHunk": "@@ -0,0 +1,195 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.selenium.browserstack;\n+\n+import java.io.IOException;\n+import java.time.Duration;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import com.browserstack.local.Local;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.vividus.selenium.tunnel.TunnelManager;\n+import org.vividus.testcontext.TestContext;\n+import org.vividus.util.ResourceUtils;\n+import org.vividus.util.wait.RetryTimesBasedWaiter;\n+\n+public class BrowserStackLocalManager implements TunnelManager<BrowserStackLocalOptions>\n+{\n+    private static final Logger LOGGER = LoggerFactory.getLogger(BrowserStackLocalManager.class);\n+    private static final Object KEY = BrowserStackLocalConnection.class;\n+\n+    private final String sauceLabsAccessKey;\n+    private final TestContext testContext;\n+\n+    public BrowserStackLocalManager(String sauceLabsAccessKey, TestContext testContext)\n+    {\n+        this.sauceLabsAccessKey = sauceLabsAccessKey;\n+        this.testContext = testContext;\n+    }\n+\n+    private final Map<BrowserStackLocalOptions, BrowserStackLocalConnection> activeConnections = new HashMap<>();\n+\n+    @Override\n+    public String start(BrowserStackLocalOptions options)\n+    {\n+        BrowserStackLocalConnection connection = getCurrentConnection();\n+        if (connection == null)\n+        {\n+            try\n+            {\n+                connection = activeConnections.get(options);\n+                if (connection == null)\n+                {\n+                    synchronized (activeConnections)\n+                    {\n+                        connection = activeConnections.get(options);\n+                        if (connection != null)\n+                        {\n+                            putCurrentConnection(connection);\n+                            connection.waitForStart();\n+                            return connection.getLocalIdentifier();\n+                        }\n+                        connection = new BrowserStackLocalConnection(options);\n+                        putCurrentConnection(connection);\n+                        activeConnections.put(options, connection);\n+                    }\n+                }\n+                connection.startConnection();", "originalCommit": "54b6556d6c1592571b8cc5f03cdd4e034adc1799", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTEwODYyMQ==", "url": "https://github.com/vividus-framework/vividus/pull/1178#discussion_r531108621", "bodyText": "each thread with different options has its own Local instance, if options are the same, other threads will not reach this point", "author": "uarlouski", "createdAt": "2020-11-26T15:39:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTA3MDc4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE3OTA0NQ==", "url": "https://github.com/vividus-framework/vividus/pull/1178#discussion_r531179045", "bodyText": "connection = activeConnections.get(options);\nif (connection == null)\n{\n    synchronized (activeConnections)\n    {\n        connection = activeConnections.get(options);\n        if (connection == null)\n        {\n            connection = new BrowserStackLocalConnection(options);\n            connection.startConnection();\n            connection.waitForStart();\n            activeConnections.put(options, connection);\n        }\n        putCurrentConnection(connection);\n    }\n}", "author": "valfirst", "createdAt": "2020-11-26T18:17:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTA3MDc4NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTA3MTA2OQ==", "url": "https://github.com/vividus-framework/vividus/pull/1178#discussion_r531071069", "bodyText": "decrement", "author": "valfirst", "createdAt": "2020-11-26T14:37:26Z", "path": "vividus-plugin-browserstack/src/main/java/org/vividus/selenium/browserstack/BrowserStackLocalManager.java", "diffHunk": "@@ -0,0 +1,195 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.selenium.browserstack;\n+\n+import java.io.IOException;\n+import java.time.Duration;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import com.browserstack.local.Local;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.vividus.selenium.tunnel.TunnelManager;\n+import org.vividus.testcontext.TestContext;\n+import org.vividus.util.ResourceUtils;\n+import org.vividus.util.wait.RetryTimesBasedWaiter;\n+\n+public class BrowserStackLocalManager implements TunnelManager<BrowserStackLocalOptions>\n+{\n+    private static final Logger LOGGER = LoggerFactory.getLogger(BrowserStackLocalManager.class);\n+    private static final Object KEY = BrowserStackLocalConnection.class;\n+\n+    private final String sauceLabsAccessKey;\n+    private final TestContext testContext;\n+\n+    public BrowserStackLocalManager(String sauceLabsAccessKey, TestContext testContext)\n+    {\n+        this.sauceLabsAccessKey = sauceLabsAccessKey;\n+        this.testContext = testContext;\n+    }\n+\n+    private final Map<BrowserStackLocalOptions, BrowserStackLocalConnection> activeConnections = new HashMap<>();\n+\n+    @Override\n+    public String start(BrowserStackLocalOptions options)\n+    {\n+        BrowserStackLocalConnection connection = getCurrentConnection();\n+        if (connection == null)\n+        {\n+            try\n+            {\n+                connection = activeConnections.get(options);\n+                if (connection == null)\n+                {\n+                    synchronized (activeConnections)\n+                    {\n+                        connection = activeConnections.get(options);\n+                        if (connection != null)\n+                        {\n+                            putCurrentConnection(connection);\n+                            connection.waitForStart();\n+                            return connection.getLocalIdentifier();\n+                        }\n+                        connection = new BrowserStackLocalConnection(options);\n+                        putCurrentConnection(connection);\n+                        activeConnections.put(options, connection);\n+                    }\n+                }\n+                connection.startConnection();\n+            }\n+            catch (Exception e)\n+            {\n+                throw new BrowserStackLocalException(e);\n+            }\n+        }\n+        return connection.getLocalIdentifier();\n+    }\n+\n+    @Override\n+    public void stop()\n+    {\n+        if (isStarted())\n+        {\n+            synchronized (activeConnections)\n+            {\n+                if (isStarted())\n+                {\n+                    BrowserStackLocalConnection connection = getCurrentConnection();\n+                    if (connection.decreaseSessionCount() == 0)", "originalCommit": "54b6556d6c1592571b8cc5f03cdd4e034adc1799", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTA3MTQxMg==", "url": "https://github.com/vividus-framework/vividus/pull/1178#discussion_r531071412", "bodyText": "increment", "author": "valfirst", "createdAt": "2020-11-26T14:37:59Z", "path": "vividus-plugin-browserstack/src/main/java/org/vividus/selenium/browserstack/BrowserStackLocalManager.java", "diffHunk": "@@ -0,0 +1,195 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.selenium.browserstack;\n+\n+import java.io.IOException;\n+import java.time.Duration;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import com.browserstack.local.Local;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.vividus.selenium.tunnel.TunnelManager;\n+import org.vividus.testcontext.TestContext;\n+import org.vividus.util.ResourceUtils;\n+import org.vividus.util.wait.RetryTimesBasedWaiter;\n+\n+public class BrowserStackLocalManager implements TunnelManager<BrowserStackLocalOptions>\n+{\n+    private static final Logger LOGGER = LoggerFactory.getLogger(BrowserStackLocalManager.class);\n+    private static final Object KEY = BrowserStackLocalConnection.class;\n+\n+    private final String sauceLabsAccessKey;\n+    private final TestContext testContext;\n+\n+    public BrowserStackLocalManager(String sauceLabsAccessKey, TestContext testContext)\n+    {\n+        this.sauceLabsAccessKey = sauceLabsAccessKey;\n+        this.testContext = testContext;\n+    }\n+\n+    private final Map<BrowserStackLocalOptions, BrowserStackLocalConnection> activeConnections = new HashMap<>();\n+\n+    @Override\n+    public String start(BrowserStackLocalOptions options)\n+    {\n+        BrowserStackLocalConnection connection = getCurrentConnection();\n+        if (connection == null)\n+        {\n+            try\n+            {\n+                connection = activeConnections.get(options);\n+                if (connection == null)\n+                {\n+                    synchronized (activeConnections)\n+                    {\n+                        connection = activeConnections.get(options);\n+                        if (connection != null)\n+                        {\n+                            putCurrentConnection(connection);\n+                            connection.waitForStart();\n+                            return connection.getLocalIdentifier();\n+                        }\n+                        connection = new BrowserStackLocalConnection(options);\n+                        putCurrentConnection(connection);\n+                        activeConnections.put(options, connection);\n+                    }\n+                }\n+                connection.startConnection();\n+            }\n+            catch (Exception e)\n+            {\n+                throw new BrowserStackLocalException(e);\n+            }\n+        }\n+        return connection.getLocalIdentifier();\n+    }\n+\n+    @Override\n+    public void stop()\n+    {\n+        if (isStarted())\n+        {\n+            synchronized (activeConnections)\n+            {\n+                if (isStarted())\n+                {\n+                    BrowserStackLocalConnection connection = getCurrentConnection();\n+                    if (connection.decreaseSessionCount() == 0)\n+                    {\n+                        try\n+                        {\n+                            connection.stopConnection();\n+                        }\n+                        catch (Exception e)\n+                        {\n+                            throw new BrowserStackLocalException(e);\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public boolean isStarted()\n+    {\n+        return activeConnections.containsValue(getCurrentConnection());\n+    }\n+\n+    private BrowserStackLocalConnection getCurrentConnection()\n+    {\n+        return testContext.get(KEY);\n+    }\n+\n+    private void putCurrentConnection(BrowserStackLocalConnection connection)\n+    {\n+        connection.increaseSessionCount();", "originalCommit": "54b6556d6c1592571b8cc5f03cdd4e034adc1799", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTA3MjMyNw==", "url": "https://github.com/vividus-framework/vividus/pull/1178#discussion_r531072327", "bodyText": "\"pac-browserstack-\" + localIdentifier, \".js\", ?", "author": "valfirst", "createdAt": "2020-11-26T14:39:27Z", "path": "vividus-plugin-browserstack/src/main/java/org/vividus/selenium/browserstack/BrowserStackLocalManager.java", "diffHunk": "@@ -0,0 +1,195 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.selenium.browserstack;\n+\n+import java.io.IOException;\n+import java.time.Duration;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import com.browserstack.local.Local;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.vividus.selenium.tunnel.TunnelManager;\n+import org.vividus.testcontext.TestContext;\n+import org.vividus.util.ResourceUtils;\n+import org.vividus.util.wait.RetryTimesBasedWaiter;\n+\n+public class BrowserStackLocalManager implements TunnelManager<BrowserStackLocalOptions>\n+{\n+    private static final Logger LOGGER = LoggerFactory.getLogger(BrowserStackLocalManager.class);\n+    private static final Object KEY = BrowserStackLocalConnection.class;\n+\n+    private final String sauceLabsAccessKey;\n+    private final TestContext testContext;\n+\n+    public BrowserStackLocalManager(String sauceLabsAccessKey, TestContext testContext)\n+    {\n+        this.sauceLabsAccessKey = sauceLabsAccessKey;\n+        this.testContext = testContext;\n+    }\n+\n+    private final Map<BrowserStackLocalOptions, BrowserStackLocalConnection> activeConnections = new HashMap<>();\n+\n+    @Override\n+    public String start(BrowserStackLocalOptions options)\n+    {\n+        BrowserStackLocalConnection connection = getCurrentConnection();\n+        if (connection == null)\n+        {\n+            try\n+            {\n+                connection = activeConnections.get(options);\n+                if (connection == null)\n+                {\n+                    synchronized (activeConnections)\n+                    {\n+                        connection = activeConnections.get(options);\n+                        if (connection != null)\n+                        {\n+                            putCurrentConnection(connection);\n+                            connection.waitForStart();\n+                            return connection.getLocalIdentifier();\n+                        }\n+                        connection = new BrowserStackLocalConnection(options);\n+                        putCurrentConnection(connection);\n+                        activeConnections.put(options, connection);\n+                    }\n+                }\n+                connection.startConnection();\n+            }\n+            catch (Exception e)\n+            {\n+                throw new BrowserStackLocalException(e);\n+            }\n+        }\n+        return connection.getLocalIdentifier();\n+    }\n+\n+    @Override\n+    public void stop()\n+    {\n+        if (isStarted())\n+        {\n+            synchronized (activeConnections)\n+            {\n+                if (isStarted())\n+                {\n+                    BrowserStackLocalConnection connection = getCurrentConnection();\n+                    if (connection.decreaseSessionCount() == 0)\n+                    {\n+                        try\n+                        {\n+                            connection.stopConnection();\n+                        }\n+                        catch (Exception e)\n+                        {\n+                            throw new BrowserStackLocalException(e);\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public boolean isStarted()\n+    {\n+        return activeConnections.containsValue(getCurrentConnection());\n+    }\n+\n+    private BrowserStackLocalConnection getCurrentConnection()\n+    {\n+        return testContext.get(KEY);\n+    }\n+\n+    private void putCurrentConnection(BrowserStackLocalConnection connection)\n+    {\n+        connection.increaseSessionCount();\n+        testContext.put(KEY, connection);\n+    }\n+\n+    private class BrowserStackLocalConnection\n+    {\n+        private static final String PAC_FORMAT = \"function FindProxyForURL(url, host) \"\n+                + \"{ if (shExpMatch(url, \\\"%s\\\") || shExpMatch(host, \\\"*.browserstack.com\\\")) { return \\\"DIRECT\\\"; }\"\n+                + \"return \\\"PROXY %s\\\"; }\";\n+\n+        private final String localIdentifier;\n+        private final AtomicInteger sessionCount;\n+        private final Map<String, String> localParameters;\n+        private final Local local;\n+\n+        BrowserStackLocalConnection(BrowserStackLocalOptions options) throws IOException\n+        {\n+            this.localIdentifier = UUID.randomUUID().toString();\n+            this.sessionCount = new AtomicInteger(0);\n+\n+            Map<String, String> parameters = new HashMap<>();\n+            parameters.put(\"localIdentifier\", localIdentifier);\n+            parameters.put(\"forcelocal\", \"true\");\n+            parameters.put(\"key\", sauceLabsAccessKey);\n+\n+            if (options.getProxy() != null)\n+            {\n+                String pac = ResourceUtils.createTempFile(\"pac-\" + localIdentifier, \".js\",", "originalCommit": "54b6556d6c1592571b8cc5f03cdd4e034adc1799", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTA3NDM4Ng==", "url": "https://github.com/vividus-framework/vividus/pull/1178#discussion_r531074386", "bodyText": "why not to wait for start ending here?", "author": "valfirst", "createdAt": "2020-11-26T14:42:47Z", "path": "vividus-plugin-browserstack/src/main/java/org/vividus/selenium/browserstack/BrowserStackLocalManager.java", "diffHunk": "@@ -0,0 +1,195 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.selenium.browserstack;\n+\n+import java.io.IOException;\n+import java.time.Duration;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import com.browserstack.local.Local;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.vividus.selenium.tunnel.TunnelManager;\n+import org.vividus.testcontext.TestContext;\n+import org.vividus.util.ResourceUtils;\n+import org.vividus.util.wait.RetryTimesBasedWaiter;\n+\n+public class BrowserStackLocalManager implements TunnelManager<BrowserStackLocalOptions>\n+{\n+    private static final Logger LOGGER = LoggerFactory.getLogger(BrowserStackLocalManager.class);\n+    private static final Object KEY = BrowserStackLocalConnection.class;\n+\n+    private final String sauceLabsAccessKey;\n+    private final TestContext testContext;\n+\n+    public BrowserStackLocalManager(String sauceLabsAccessKey, TestContext testContext)\n+    {\n+        this.sauceLabsAccessKey = sauceLabsAccessKey;\n+        this.testContext = testContext;\n+    }\n+\n+    private final Map<BrowserStackLocalOptions, BrowserStackLocalConnection> activeConnections = new HashMap<>();\n+\n+    @Override\n+    public String start(BrowserStackLocalOptions options)\n+    {\n+        BrowserStackLocalConnection connection = getCurrentConnection();\n+        if (connection == null)\n+        {\n+            try\n+            {\n+                connection = activeConnections.get(options);\n+                if (connection == null)\n+                {\n+                    synchronized (activeConnections)\n+                    {\n+                        connection = activeConnections.get(options);\n+                        if (connection != null)\n+                        {\n+                            putCurrentConnection(connection);\n+                            connection.waitForStart();\n+                            return connection.getLocalIdentifier();\n+                        }\n+                        connection = new BrowserStackLocalConnection(options);\n+                        putCurrentConnection(connection);\n+                        activeConnections.put(options, connection);\n+                    }\n+                }\n+                connection.startConnection();\n+            }\n+            catch (Exception e)\n+            {\n+                throw new BrowserStackLocalException(e);\n+            }\n+        }\n+        return connection.getLocalIdentifier();\n+    }\n+\n+    @Override\n+    public void stop()\n+    {\n+        if (isStarted())\n+        {\n+            synchronized (activeConnections)\n+            {\n+                if (isStarted())\n+                {\n+                    BrowserStackLocalConnection connection = getCurrentConnection();\n+                    if (connection.decreaseSessionCount() == 0)\n+                    {\n+                        try\n+                        {\n+                            connection.stopConnection();\n+                        }\n+                        catch (Exception e)\n+                        {\n+                            throw new BrowserStackLocalException(e);\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public boolean isStarted()\n+    {\n+        return activeConnections.containsValue(getCurrentConnection());\n+    }\n+\n+    private BrowserStackLocalConnection getCurrentConnection()\n+    {\n+        return testContext.get(KEY);\n+    }\n+\n+    private void putCurrentConnection(BrowserStackLocalConnection connection)\n+    {\n+        connection.increaseSessionCount();\n+        testContext.put(KEY, connection);\n+    }\n+\n+    private class BrowserStackLocalConnection\n+    {\n+        private static final String PAC_FORMAT = \"function FindProxyForURL(url, host) \"\n+                + \"{ if (shExpMatch(url, \\\"%s\\\") || shExpMatch(host, \\\"*.browserstack.com\\\")) { return \\\"DIRECT\\\"; }\"\n+                + \"return \\\"PROXY %s\\\"; }\";\n+\n+        private final String localIdentifier;\n+        private final AtomicInteger sessionCount;\n+        private final Map<String, String> localParameters;\n+        private final Local local;\n+\n+        BrowserStackLocalConnection(BrowserStackLocalOptions options) throws IOException\n+        {\n+            this.localIdentifier = UUID.randomUUID().toString();\n+            this.sessionCount = new AtomicInteger(0);\n+\n+            Map<String, String> parameters = new HashMap<>();\n+            parameters.put(\"localIdentifier\", localIdentifier);\n+            parameters.put(\"forcelocal\", \"true\");\n+            parameters.put(\"key\", sauceLabsAccessKey);\n+\n+            if (options.getProxy() != null)\n+            {\n+                String pac = ResourceUtils.createTempFile(\"pac-\" + localIdentifier, \".js\",\n+                        String.format(PAC_FORMAT, options.getSkipUrlsPattern(), options.getProxy())).toString();\n+                parameters.put(\"-pac-file\", pac);\n+            }\n+\n+            this.localParameters = parameters;\n+            this.local = new Local();\n+        }\n+\n+        String getLocalIdentifier()\n+        {\n+            return localIdentifier;\n+        }\n+\n+        void startConnection() throws Exception\n+        {\n+            LOGGER.atInfo().addArgument(localIdentifier)\n+                           .log(\"Starting BrowserStack Local connection with {} identifier\");\n+            local.start(localParameters);", "originalCommit": "54b6556d6c1592571b8cc5f03cdd4e034adc1799", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTEwOTQyMA==", "url": "https://github.com/vividus-framework/vividus/pull/1178#discussion_r531109420", "bodyText": "it will not prevent other threads from using this connection", "author": "uarlouski", "createdAt": "2020-11-26T15:41:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTA3NDM4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE3OTQ2NA==", "url": "https://github.com/vividus-framework/vividus/pull/1178#discussion_r531179464", "bodyText": "but still this connection won't be operable, and extra resources will be required to synchronize start completion", "author": "valfirst", "createdAt": "2020-11-26T18:19:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTA3NDM4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQwOTM4MA==", "url": "https://github.com/vividus-framework/vividus/pull/1178#discussion_r531409380", "bodyText": "start method already contains wait logic within it, for starting thread this connection will be always operable", "author": "uarlouski", "createdAt": "2020-11-27T06:45:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTA3NDM4Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTA3NjY4MQ==", "url": "https://github.com/vividus-framework/vividus/pull/1178#discussion_r531076681", "bodyText": "\"pac-saucelabs-\" + tunnelIdentifier, \".js\"", "author": "valfirst", "createdAt": "2020-11-26T14:46:29Z", "path": "vividus-plugin-saucelabs/src/main/java/org/vividus/selenium/sauce/SauceConnectOptions.java", "diffHunk": "@@ -105,21 +91,12 @@ public String build(String tunnelIdentifier) throws IOException\n     private Path createPacFile(String tunnelIdentifier) throws IOException\n     {\n         return createTempFile(\"pac-\" + tunnelIdentifier, \".js\",", "originalCommit": "54b6556d6c1592571b8cc5f03cdd4e034adc1799", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "bd75e0c40b79acf61b5e50b67fe3e95f24d9f8ba", "url": "https://github.com/vividus-framework/vividus/commit/bd75e0c40b79acf61b5e50b67fe3e95f24d9f8ba", "message": "DRAFT Add support for bs local", "committedDate": "2020-11-27T07:19:41Z", "type": "forcePushed"}, {"oid": "c2c2ffc46e9768135d4b83a4f19b4dc050ff0e5d", "url": "https://github.com/vividus-framework/vividus/commit/c2c2ffc46e9768135d4b83a4f19b4dc050ff0e5d", "message": "DRAFT Add support for bs local", "committedDate": "2020-11-27T07:49:44Z", "type": "forcePushed"}, {"oid": "f34d42869950e8cac1228d74c2982d1cda10acbb", "url": "https://github.com/vividus-framework/vividus/commit/f34d42869950e8cac1228d74c2982d1cda10acbb", "message": "DRAFT Add support for bs local", "committedDate": "2020-11-27T08:03:30Z", "type": "forcePushed"}, {"oid": "bcfcf503bd0c09e63fc4a1eb7e7c4f815346a9c6", "url": "https://github.com/vividus-framework/vividus/commit/bcfcf503bd0c09e63fc4a1eb7e7c4f815346a9c6", "message": "DRAFT Add support for bs local", "committedDate": "2020-11-27T08:04:47Z", "type": "forcePushed"}, {"oid": "b0266e0c209cebac64b0e814f7d068476de80d96", "url": "https://github.com/vividus-framework/vividus/commit/b0266e0c209cebac64b0e814f7d068476de80d96", "message": "DRAFT Add support for bs local", "committedDate": "2020-11-27T08:31:00Z", "type": "forcePushed"}, {"oid": "753d878a9a6499c972b6130c847608d697d8492f", "url": "https://github.com/vividus-framework/vividus/commit/753d878a9a6499c972b6130c847608d697d8492f", "message": "DRAFT Add support for bs local", "committedDate": "2020-11-30T15:04:13Z", "type": "forcePushed"}, {"oid": "a43407e0bcc800360cb7279fdae29b604f32843d", "url": "https://github.com/vividus-framework/vividus/commit/a43407e0bcc800360cb7279fdae29b604f32843d", "message": "DRAFT Add support for bs local", "committedDate": "2020-11-30T18:27:55Z", "type": "forcePushed"}, {"oid": "e867444c4c05d96a49f6b74aae54294032f6a140", "url": "https://github.com/vividus-framework/vividus/commit/e867444c4c05d96a49f6b74aae54294032f6a140", "message": "DRAFT Add support for bs local", "committedDate": "2020-11-30T20:33:00Z", "type": "forcePushed"}, {"oid": "bc556f8b0d1b7a26cb3e92166ce4107c3b48cfbe", "url": "https://github.com/vividus-framework/vividus/commit/bc556f8b0d1b7a26cb3e92166ce4107c3b48cfbe", "message": "DRAFT Add support for bs local", "committedDate": "2020-12-01T09:24:09Z", "type": "forcePushed"}, {"oid": "3946e167781fb50cb802187577b589bfc9c25640", "url": "https://github.com/vividus-framework/vividus/commit/3946e167781fb50cb802187577b589bfc9c25640", "message": "DRAFT Add support for bs local", "committedDate": "2020-12-01T12:00:49Z", "type": "forcePushed"}, {"oid": "c2750554ac542befeff06e6ccadcd78590e38967", "url": "https://github.com/vividus-framework/vividus/commit/c2750554ac542befeff06e6ccadcd78590e38967", "message": "[plugin-browserstack] Add BrowserStack local support", "committedDate": "2020-12-01T14:21:39Z", "type": "forcePushed"}, {"oid": "fc1f4b327167eedf64ebe6213b569270b08ddbb3", "url": "https://github.com/vividus-framework/vividus/commit/fc1f4b327167eedf64ebe6213b569270b08ddbb3", "message": "[plugin-browserstack] Add BrowserStack local support", "committedDate": "2020-12-01T19:33:03Z", "type": "forcePushed"}, {"oid": "2249bf44a5a8aa54de411962d38395abd9a2f374", "url": "https://github.com/vividus-framework/vividus/commit/2249bf44a5a8aa54de411962d38395abd9a2f374", "message": "[plugin-browserstack] Add BrowserStack local support", "committedDate": "2020-12-03T09:27:39Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTAyODY3NQ==", "url": "https://github.com/vividus-framework/vividus/pull/1178#discussion_r535028675", "bodyText": "noisy change", "author": "valfirst", "createdAt": "2020-12-03T09:53:01Z", "path": "vividus-extension-selenium/src/test/java/org/vividus/selenium/AbstractDesiredCapabilitiesConfigurerTests.java", "diffHunk": "@@ -100,7 +100,8 @@ void shouldNotConfigureTestNameIfStoryIsNull()\n         verifyNoInteractions(desiredCapabilities);\n     }\n \n-    private static final class TestAbstractDesiredCapabilitiesConfigurer extends AbstractDesiredCapabilitiesConfigurer\n+    private static final class TestAbstractDesiredCapabilitiesConfigurer\n+            extends AbstractDesiredCapabilitiesConfigurer", "originalCommit": "2249bf44a5a8aa54de411962d38395abd9a2f374", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTAzMjU4Mw==", "url": "https://github.com/vividus-framework/vividus/pull/1178#discussion_r535032583", "bodyText": "connection = activeConnections.get(options);\nif (connection == null)\n{\n    connection = new BrowserStackLocalConnection(options);\n    connection.startConnection();\n    activeConnections.put(options, connection);\n}", "author": "valfirst", "createdAt": "2020-12-03T09:56:13Z", "path": "vividus-plugin-browserstack/src/main/java/org/vividus/selenium/browserstack/BrowserStackLocalManager.java", "diffHunk": "@@ -0,0 +1,190 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.selenium.browserstack;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import com.browserstack.local.Local;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.vividus.selenium.tunnel.TunnelException;\n+import org.vividus.selenium.tunnel.TunnelManager;\n+import org.vividus.selenium.tunnel.TunnelOptions;\n+import org.vividus.testcontext.TestContext;\n+import org.vividus.util.ResourceUtils;\n+\n+public class BrowserStackLocalManager implements TunnelManager<TunnelOptions>\n+{\n+    private static final Logger LOGGER = LoggerFactory.getLogger(BrowserStackLocalManager.class);\n+    private static final Object KEY = BrowserStackLocalConnection.class;\n+\n+    private final String browserStackAccessKey;\n+    private final TestContext testContext;\n+\n+    private final Map<TunnelOptions, BrowserStackLocalConnection> activeConnections = new HashMap<>();\n+\n+    public BrowserStackLocalManager(String browserStackAccessKey, TestContext testContext)\n+    {\n+        this.browserStackAccessKey = browserStackAccessKey;\n+        this.testContext = testContext;\n+    }\n+\n+    @Override\n+    public String start(TunnelOptions options) throws TunnelException\n+    {\n+        BrowserStackLocalConnection connection = getCurrentConnection();\n+        if (connection == null)\n+        {\n+            try\n+            {\n+                connection = activeConnections.get(options);\n+                if (connection == null)\n+                {\n+                    synchronized (activeConnections)\n+                    {\n+                        connection = activeConnections.get(options);\n+                        if (connection != null)\n+                        {\n+                            putCurrentConnection(connection);\n+                            return connection.getLocalIdentifier();\n+                        }\n+                        connection = new BrowserStackLocalConnection(options);\n+                        connection.startConnection();\n+                        activeConnections.put(options, connection);", "originalCommit": "2249bf44a5a8aa54de411962d38395abd9a2f374", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTAzNTg4NA==", "url": "https://github.com/vividus-framework/vividus/pull/1178#discussion_r535035884", "bodyText": "browserstack.browserstack-local.enabled", "author": "valfirst", "createdAt": "2020-12-03T09:59:01Z", "path": "vividus-plugin-browserstack/src/main/resources/properties/profile/browserstack/profile.properties", "diffHunk": "@@ -1,3 +1,5 @@\n selenium.grid.enabled=true\n selenium.grid.host=hub-cloud.browserstack.com\n selenium.grid.url=https://${selenium.grid.username}:${selenium.grid.password}@${selenium.grid.host}/wd/hub\n+\n+browserstack.local.enabled=false", "originalCommit": "2249bf44a5a8aa54de411962d38395abd9a2f374", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "0bc1ba6b8d91b0dd927cd7bcedc1f65a3506417c", "url": "https://github.com/vividus-framework/vividus/commit/0bc1ba6b8d91b0dd927cd7bcedc1f65a3506417c", "message": "[plugin-browserstack] Add BrowserStack local support", "committedDate": "2020-12-03T10:13:11Z", "type": "commit"}, {"oid": "0bc1ba6b8d91b0dd927cd7bcedc1f65a3506417c", "url": "https://github.com/vividus-framework/vividus/commit/0bc1ba6b8d91b0dd927cd7bcedc1f65a3506417c", "message": "[plugin-browserstack] Add BrowserStack local support", "committedDate": "2020-12-03T10:13:11Z", "type": "forcePushed"}]}