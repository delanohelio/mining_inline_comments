{"pr_number": 318, "pr_title": "Add steps to work with excel in HTTP response", "pr_createdAt": "2020-02-13T17:33:11Z", "pr_url": "https://github.com/vividus-framework/vividus/pull/318", "timeline": [{"oid": "4f79e5bd215b9617e7a0cbc20bad4126ab582cc3", "url": "https://github.com/vividus-framework/vividus/commit/4f79e5bd215b9617e7a0cbc20bad4126ab582cc3", "message": "Add steps to work with excel in HTTP response\n- Then response contains excel sheet with index \\`index\\` and records:records\n- Then response contains excel sheet with name \\`name\\` and records:records", "committedDate": "2020-02-13T17:41:05Z", "type": "forcePushed"}, {"oid": "099465670ca331b040a847cc4a6e77b05990bd25", "url": "https://github.com/vividus-framework/vividus/commit/099465670ca331b040a847cc4a6e77b05990bd25", "message": "Add steps to work with excel in HTTP response\n- Then response contains excel sheet with index \\`index\\` and records:records\n- Then response contains excel sheet with name \\`name\\` and records:records", "committedDate": "2020-02-13T17:45:37Z", "type": "forcePushed"}, {"oid": "a375a0661639122bd8f239d832ba5983c9e3ed22", "url": "https://github.com/vividus-framework/vividus/commit/a375a0661639122bd8f239d832ba5983c9e3ed22", "message": "Add steps to work with excel in HTTP response\n- Then response contains excel sheet with index \\`index\\` and records:records\n- Then response contains excel sheet with name \\`name\\` and records:records", "committedDate": "2020-02-13T17:56:24Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTA1MTA5MQ==", "url": "https://github.com/vividus-framework/vividus/pull/318#discussion_r379051091", "bodyText": "it should be vice versa: plugin-excel should depend on plugin-rest-api", "author": "valfirst", "createdAt": "2020-02-13T18:48:40Z", "path": "vividus-plugin-rest-api/build.gradle", "diffHunk": "@@ -12,6 +12,8 @@ dependencies {\n     implementation project(':vividus-test-context')\n     implementation project(':vividus-util')\n \n+    implementation project(':vividus-plugin-excel')", "originalCommit": "a375a0661639122bd8f239d832ba5983c9e3ed22", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTA1MTM5NQ==", "url": "https://github.com/vividus-framework/vividus/pull/318#discussion_r379051395", "bodyText": "plugin-rest-api should know nothing about excel, the same for all other classes", "author": "valfirst", "createdAt": "2020-02-13T18:49:14Z", "path": "vividus-plugin-rest-api/src/main/java/org/vividus/bdd/model/CellRecord.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.model;\n+\n+import java.util.Optional;\n+import java.util.regex.Pattern;\n+\n+import org.jbehave.core.annotations.AsParameters;\n+\n+@AsParameters\n+public class CellRecord", "originalCommit": "a375a0661639122bd8f239d832ba5983c9e3ed22", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "13e1eea6c741bebe929c8874167b7b3410380064", "url": "https://github.com/vividus-framework/vividus/commit/13e1eea6c741bebe929c8874167b7b3410380064", "message": "Add steps to work with excel in HTTP response\n- Then response contains excel sheet with index \\`index\\` and records:records\n- Then response contains excel sheet with name \\`name\\` and records:records", "committedDate": "2020-02-14T07:05:10Z", "type": "forcePushed"}, {"oid": "1138a91f801b8dc41933e56b0fcd55157e49ad1e", "url": "https://github.com/vividus-framework/vividus/commit/1138a91f801b8dc41933e56b0fcd55157e49ad1e", "message": "Add steps to work with excel in HTTP response\n- Then response contains excel sheet with index \\`index\\` and records:records\n- Then response contains excel sheet with name \\`name\\` and records:records", "committedDate": "2020-02-14T07:07:42Z", "type": "forcePushed"}, {"oid": "54a422a464591db3686a36e7ba130e8d37264cbe", "url": "https://github.com/vividus-framework/vividus/commit/54a422a464591db3686a36e7ba130e8d37264cbe", "message": "Add steps to work with excel in HTTP response\n- Then response contains excel sheet with index \\`index\\` and records:records\n- Then response contains excel sheet with name \\`name\\` and records:records", "committedDate": "2020-02-14T07:57:00Z", "type": "forcePushed"}, {"oid": "9ac1f46136e94acf092059fbee0e232c4179299f", "url": "https://github.com/vividus-framework/vividus/commit/9ac1f46136e94acf092059fbee0e232c4179299f", "message": "Add steps to work with excel in HTTP response\n- Then response contains excel sheet with index \\`index\\` and records:records\n- Then response contains excel sheet with name \\`name\\` and records:records", "committedDate": "2020-02-14T08:51:16Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTM3MTQyOA==", "url": "https://github.com/vividus-framework/vividus/pull/318#discussion_r379371428", "bodyText": "the the -> in the", "author": "valfirst", "createdAt": "2020-02-14T11:00:31Z", "path": "vividus-plugin-excel/src/main/java/org/vividus/bdd/steps/ExcelResponseValidationSteps.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.steps;\n+\n+import static java.util.Map.entry;\n+\n+import java.util.List;\n+import java.util.Map.Entry;\n+import java.util.Optional;\n+import java.util.function.Function;\n+import java.util.function.Predicate;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+\n+import org.apache.poi.ss.usermodel.Sheet;\n+import org.jbehave.core.annotations.Then;\n+import org.vividus.bdd.model.CellRecord;\n+import org.vividus.excel.ExcelSheetParser;\n+import org.vividus.excel.ExcelSheetsExtractor;\n+import org.vividus.excel.IExcelSheetParser;\n+import org.vividus.excel.IExcelSheetParser.CellValue;\n+import org.vividus.excel.IExcelSheetsExtractor;\n+import org.vividus.excel.WorkbookParsingException;\n+import org.vividus.http.HttpTestContext;\n+import org.vividus.softassert.ISoftAssert;\n+\n+public class ExcelResponseValidationSteps\n+{\n+    private final HttpTestContext httpTestContext;\n+    private final ISoftAssert softAssert;\n+\n+    public ExcelResponseValidationSteps(HttpTestContext httpTestContext, ISoftAssert softAssert)\n+    {\n+        this.httpTestContext = httpTestContext;\n+        this.softAssert = softAssert;\n+    }\n+\n+    /**\n+     * Checks that API response contains excel sheet with index <b>index</b> and records <b>records</b>\n+     * @param index Index of the sheet (0-based)\n+     * @param records Table of records with specified <b>cellsRange</b> and <b>valueRegex</b> that should be\n+     * matched against cells in excel sheet:\n+     * <ul>\n+     * <li>cellsRange - range of cells (e.g. \"B1:D8\", \"A1\", \"C1:C5\").\n+     * <li>valueRegex - regular expression to match a value against</li>\n+     * </ul>\n+     * <code>\n+     * Then response contains excel sheet with index `2` and records:\n+     * |cellRange|valueRegex      |<br>\n+     * |A1:E8    |\\\\w+            |<br>\n+     * |D11:H25  |                |<br>\n+     * |A1:H1    |header_\\\\d+_\\\\w+|<br>\n+     * </code>\n+     */\n+    @Then(\"response contains excel sheet with index `$index` and records:$records\")\n+    public void excelSheetWithIndexHasRecords(int index, List<CellRecord> records)\n+    {\n+        checkRecords(records, e -> e.getSheet(index), \"index \" + index);\n+    }\n+\n+    /**\n+     * Checks that API response contains excel sheet with name <b>name</b> and records <b>records</b>\n+     * @param name Name of the sheet\n+     * @param records Table of records with specified <b>cellsRange</b> and <b>valueRegex</b> that should be\n+     * matched against cells in excel sheet:\n+     * <ul>\n+     * <li>cellsRange - range of cells (e.g. \"B1:D8\", \"A1\", \"C1:C5\").\n+     * <li>valueRegex - regular expression to match a value against</li>\n+     * </ul>\n+     * <code>\n+     * Then response contains excel sheet with name `products_140220` and records:\n+     * |cellRange|valueRegex      |<br>\n+     * |A1:E8    |\\\\w+            |<br>\n+     * |D11:H25  |                |<br>\n+     * |A1:H1    |header_\\\\d+_\\\\w+|<br>\n+     * </code>\n+     */\n+    @Then(\"response contains excel sheet with name `$name` and records:$records\")\n+    public void excelSheetWithNameHasRecords(String name, List<CellRecord> records)\n+    {\n+        checkRecords(records, e -> e.getSheet(name), \"name \" + name);\n+    }\n+\n+    private void checkRecords(List<CellRecord> records, Function<IExcelSheetsExtractor, Optional<Sheet>> sheetMapper,\n+            String errorKey)\n+    {\n+        sheetMapper.apply(getExtractor()).ifPresentOrElse(s ->\n+        {\n+            IExcelSheetParser parser = new ExcelSheetParser(s);\n+            List<Entry<CellValue, Optional<Pattern>>> failedRecords = records.stream()\n+                .map(r -> parser.getDataFromRange(r.getCellsRange())\n+                        .stream()\n+                        .map(cv -> entry(cv, r.getValueRegex())))\n+                .flatMap(Function.identity())\n+                .filter(filterMatched())\n+                .collect(Collectors.toList());\n+            if (failedRecords.isEmpty())\n+            {\n+                softAssert.recordPassedAssertion(\"All records were found the the document\");", "originalCommit": "9ac1f46136e94acf092059fbee0e232c4179299f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTM3MTYxMw==", "url": "https://github.com/vividus-framework/vividus/pull/318#discussion_r379371613", "bodyText": "add cell range to the assertion message", "author": "valfirst", "createdAt": "2020-02-14T11:00:59Z", "path": "vividus-plugin-excel/src/main/java/org/vividus/bdd/steps/ExcelResponseValidationSteps.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.steps;\n+\n+import static java.util.Map.entry;\n+\n+import java.util.List;\n+import java.util.Map.Entry;\n+import java.util.Optional;\n+import java.util.function.Function;\n+import java.util.function.Predicate;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+\n+import org.apache.poi.ss.usermodel.Sheet;\n+import org.jbehave.core.annotations.Then;\n+import org.vividus.bdd.model.CellRecord;\n+import org.vividus.excel.ExcelSheetParser;\n+import org.vividus.excel.ExcelSheetsExtractor;\n+import org.vividus.excel.IExcelSheetParser;\n+import org.vividus.excel.IExcelSheetParser.CellValue;\n+import org.vividus.excel.IExcelSheetsExtractor;\n+import org.vividus.excel.WorkbookParsingException;\n+import org.vividus.http.HttpTestContext;\n+import org.vividus.softassert.ISoftAssert;\n+\n+public class ExcelResponseValidationSteps\n+{\n+    private final HttpTestContext httpTestContext;\n+    private final ISoftAssert softAssert;\n+\n+    public ExcelResponseValidationSteps(HttpTestContext httpTestContext, ISoftAssert softAssert)\n+    {\n+        this.httpTestContext = httpTestContext;\n+        this.softAssert = softAssert;\n+    }\n+\n+    /**\n+     * Checks that API response contains excel sheet with index <b>index</b> and records <b>records</b>\n+     * @param index Index of the sheet (0-based)\n+     * @param records Table of records with specified <b>cellsRange</b> and <b>valueRegex</b> that should be\n+     * matched against cells in excel sheet:\n+     * <ul>\n+     * <li>cellsRange - range of cells (e.g. \"B1:D8\", \"A1\", \"C1:C5\").\n+     * <li>valueRegex - regular expression to match a value against</li>\n+     * </ul>\n+     * <code>\n+     * Then response contains excel sheet with index `2` and records:\n+     * |cellRange|valueRegex      |<br>\n+     * |A1:E8    |\\\\w+            |<br>\n+     * |D11:H25  |                |<br>\n+     * |A1:H1    |header_\\\\d+_\\\\w+|<br>\n+     * </code>\n+     */\n+    @Then(\"response contains excel sheet with index `$index` and records:$records\")\n+    public void excelSheetWithIndexHasRecords(int index, List<CellRecord> records)\n+    {\n+        checkRecords(records, e -> e.getSheet(index), \"index \" + index);\n+    }\n+\n+    /**\n+     * Checks that API response contains excel sheet with name <b>name</b> and records <b>records</b>\n+     * @param name Name of the sheet\n+     * @param records Table of records with specified <b>cellsRange</b> and <b>valueRegex</b> that should be\n+     * matched against cells in excel sheet:\n+     * <ul>\n+     * <li>cellsRange - range of cells (e.g. \"B1:D8\", \"A1\", \"C1:C5\").\n+     * <li>valueRegex - regular expression to match a value against</li>\n+     * </ul>\n+     * <code>\n+     * Then response contains excel sheet with name `products_140220` and records:\n+     * |cellRange|valueRegex      |<br>\n+     * |A1:E8    |\\\\w+            |<br>\n+     * |D11:H25  |                |<br>\n+     * |A1:H1    |header_\\\\d+_\\\\w+|<br>\n+     * </code>\n+     */\n+    @Then(\"response contains excel sheet with name `$name` and records:$records\")\n+    public void excelSheetWithNameHasRecords(String name, List<CellRecord> records)\n+    {\n+        checkRecords(records, e -> e.getSheet(name), \"name \" + name);\n+    }\n+\n+    private void checkRecords(List<CellRecord> records, Function<IExcelSheetsExtractor, Optional<Sheet>> sheetMapper,\n+            String errorKey)\n+    {\n+        sheetMapper.apply(getExtractor()).ifPresentOrElse(s ->\n+        {\n+            IExcelSheetParser parser = new ExcelSheetParser(s);\n+            List<Entry<CellValue, Optional<Pattern>>> failedRecords = records.stream()\n+                .map(r -> parser.getDataFromRange(r.getCellsRange())\n+                        .stream()\n+                        .map(cv -> entry(cv, r.getValueRegex())))\n+                .flatMap(Function.identity())\n+                .filter(filterMatched())\n+                .collect(Collectors.toList());\n+            if (failedRecords.isEmpty())\n+            {\n+                softAssert.recordPassedAssertion(\"All records were found the the document\");", "originalCommit": "9ac1f46136e94acf092059fbee0e232c4179299f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTM3MjQ1Ng==", "url": "https://github.com/vividus-framework/vividus/pull/318#discussion_r379372456", "bodyText": "why not to use assertion mechanism? (instead of building own message)", "author": "valfirst", "createdAt": "2020-02-14T11:02:55Z", "path": "vividus-plugin-excel/src/main/java/org/vividus/bdd/steps/ExcelResponseValidationSteps.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.steps;\n+\n+import static java.util.Map.entry;\n+\n+import java.util.List;\n+import java.util.Map.Entry;\n+import java.util.Optional;\n+import java.util.function.Function;\n+import java.util.function.Predicate;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+\n+import org.apache.poi.ss.usermodel.Sheet;\n+import org.jbehave.core.annotations.Then;\n+import org.vividus.bdd.model.CellRecord;\n+import org.vividus.excel.ExcelSheetParser;\n+import org.vividus.excel.ExcelSheetsExtractor;\n+import org.vividus.excel.IExcelSheetParser;\n+import org.vividus.excel.IExcelSheetParser.CellValue;\n+import org.vividus.excel.IExcelSheetsExtractor;\n+import org.vividus.excel.WorkbookParsingException;\n+import org.vividus.http.HttpTestContext;\n+import org.vividus.softassert.ISoftAssert;\n+\n+public class ExcelResponseValidationSteps\n+{\n+    private final HttpTestContext httpTestContext;\n+    private final ISoftAssert softAssert;\n+\n+    public ExcelResponseValidationSteps(HttpTestContext httpTestContext, ISoftAssert softAssert)\n+    {\n+        this.httpTestContext = httpTestContext;\n+        this.softAssert = softAssert;\n+    }\n+\n+    /**\n+     * Checks that API response contains excel sheet with index <b>index</b> and records <b>records</b>\n+     * @param index Index of the sheet (0-based)\n+     * @param records Table of records with specified <b>cellsRange</b> and <b>valueRegex</b> that should be\n+     * matched against cells in excel sheet:\n+     * <ul>\n+     * <li>cellsRange - range of cells (e.g. \"B1:D8\", \"A1\", \"C1:C5\").\n+     * <li>valueRegex - regular expression to match a value against</li>\n+     * </ul>\n+     * <code>\n+     * Then response contains excel sheet with index `2` and records:\n+     * |cellRange|valueRegex      |<br>\n+     * |A1:E8    |\\\\w+            |<br>\n+     * |D11:H25  |                |<br>\n+     * |A1:H1    |header_\\\\d+_\\\\w+|<br>\n+     * </code>\n+     */\n+    @Then(\"response contains excel sheet with index `$index` and records:$records\")\n+    public void excelSheetWithIndexHasRecords(int index, List<CellRecord> records)\n+    {\n+        checkRecords(records, e -> e.getSheet(index), \"index \" + index);\n+    }\n+\n+    /**\n+     * Checks that API response contains excel sheet with name <b>name</b> and records <b>records</b>\n+     * @param name Name of the sheet\n+     * @param records Table of records with specified <b>cellsRange</b> and <b>valueRegex</b> that should be\n+     * matched against cells in excel sheet:\n+     * <ul>\n+     * <li>cellsRange - range of cells (e.g. \"B1:D8\", \"A1\", \"C1:C5\").\n+     * <li>valueRegex - regular expression to match a value against</li>\n+     * </ul>\n+     * <code>\n+     * Then response contains excel sheet with name `products_140220` and records:\n+     * |cellRange|valueRegex      |<br>\n+     * |A1:E8    |\\\\w+            |<br>\n+     * |D11:H25  |                |<br>\n+     * |A1:H1    |header_\\\\d+_\\\\w+|<br>\n+     * </code>\n+     */\n+    @Then(\"response contains excel sheet with name `$name` and records:$records\")\n+    public void excelSheetWithNameHasRecords(String name, List<CellRecord> records)\n+    {\n+        checkRecords(records, e -> e.getSheet(name), \"name \" + name);\n+    }\n+\n+    private void checkRecords(List<CellRecord> records, Function<IExcelSheetsExtractor, Optional<Sheet>> sheetMapper,\n+            String errorKey)\n+    {\n+        sheetMapper.apply(getExtractor()).ifPresentOrElse(s ->\n+        {\n+            IExcelSheetParser parser = new ExcelSheetParser(s);\n+            List<Entry<CellValue, Optional<Pattern>>> failedRecords = records.stream()\n+                .map(r -> parser.getDataFromRange(r.getCellsRange())\n+                        .stream()\n+                        .map(cv -> entry(cv, r.getValueRegex())))\n+                .flatMap(Function.identity())\n+                .filter(filterMatched())\n+                .collect(Collectors.toList());\n+            if (failedRecords.isEmpty())\n+            {\n+                softAssert.recordPassedAssertion(\"All records were found the the document\");\n+                return;\n+            }\n+            failedRecords.forEach(e ->\n+            {\n+                CellValue cellValue = e.getKey();\n+                String message = String.format(\"Cell at address '%s' and value '%s' is expected to %s\",\n+                        cellValue.getAddress(), cellValue.getValue(),\n+                        e.getValue().map(Pattern::pattern).map(\"match \"::concat).orElse(\"be empty\"));", "originalCommit": "9ac1f46136e94acf092059fbee0e232c4179299f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTM3NDQzMg==", "url": "https://github.com/vividus-framework/vividus/pull/318#discussion_r379374432", "bodyText": "return !pattern.isEmpty() || cellValue.getValue() != null;", "author": "valfirst", "createdAt": "2020-02-14T11:07:44Z", "path": "vividus-plugin-excel/src/main/java/org/vividus/bdd/steps/ExcelResponseValidationSteps.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.steps;\n+\n+import static java.util.Map.entry;\n+\n+import java.util.List;\n+import java.util.Map.Entry;\n+import java.util.Optional;\n+import java.util.function.Function;\n+import java.util.function.Predicate;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+\n+import org.apache.poi.ss.usermodel.Sheet;\n+import org.jbehave.core.annotations.Then;\n+import org.vividus.bdd.model.CellRecord;\n+import org.vividus.excel.ExcelSheetParser;\n+import org.vividus.excel.ExcelSheetsExtractor;\n+import org.vividus.excel.IExcelSheetParser;\n+import org.vividus.excel.IExcelSheetParser.CellValue;\n+import org.vividus.excel.IExcelSheetsExtractor;\n+import org.vividus.excel.WorkbookParsingException;\n+import org.vividus.http.HttpTestContext;\n+import org.vividus.softassert.ISoftAssert;\n+\n+public class ExcelResponseValidationSteps\n+{\n+    private final HttpTestContext httpTestContext;\n+    private final ISoftAssert softAssert;\n+\n+    public ExcelResponseValidationSteps(HttpTestContext httpTestContext, ISoftAssert softAssert)\n+    {\n+        this.httpTestContext = httpTestContext;\n+        this.softAssert = softAssert;\n+    }\n+\n+    /**\n+     * Checks that API response contains excel sheet with index <b>index</b> and records <b>records</b>\n+     * @param index Index of the sheet (0-based)\n+     * @param records Table of records with specified <b>cellsRange</b> and <b>valueRegex</b> that should be\n+     * matched against cells in excel sheet:\n+     * <ul>\n+     * <li>cellsRange - range of cells (e.g. \"B1:D8\", \"A1\", \"C1:C5\").\n+     * <li>valueRegex - regular expression to match a value against</li>\n+     * </ul>\n+     * <code>\n+     * Then response contains excel sheet with index `2` and records:\n+     * |cellRange|valueRegex      |<br>\n+     * |A1:E8    |\\\\w+            |<br>\n+     * |D11:H25  |                |<br>\n+     * |A1:H1    |header_\\\\d+_\\\\w+|<br>\n+     * </code>\n+     */\n+    @Then(\"response contains excel sheet with index `$index` and records:$records\")\n+    public void excelSheetWithIndexHasRecords(int index, List<CellRecord> records)\n+    {\n+        checkRecords(records, e -> e.getSheet(index), \"index \" + index);\n+    }\n+\n+    /**\n+     * Checks that API response contains excel sheet with name <b>name</b> and records <b>records</b>\n+     * @param name Name of the sheet\n+     * @param records Table of records with specified <b>cellsRange</b> and <b>valueRegex</b> that should be\n+     * matched against cells in excel sheet:\n+     * <ul>\n+     * <li>cellsRange - range of cells (e.g. \"B1:D8\", \"A1\", \"C1:C5\").\n+     * <li>valueRegex - regular expression to match a value against</li>\n+     * </ul>\n+     * <code>\n+     * Then response contains excel sheet with name `products_140220` and records:\n+     * |cellRange|valueRegex      |<br>\n+     * |A1:E8    |\\\\w+            |<br>\n+     * |D11:H25  |                |<br>\n+     * |A1:H1    |header_\\\\d+_\\\\w+|<br>\n+     * </code>\n+     */\n+    @Then(\"response contains excel sheet with name `$name` and records:$records\")\n+    public void excelSheetWithNameHasRecords(String name, List<CellRecord> records)\n+    {\n+        checkRecords(records, e -> e.getSheet(name), \"name \" + name);\n+    }\n+\n+    private void checkRecords(List<CellRecord> records, Function<IExcelSheetsExtractor, Optional<Sheet>> sheetMapper,\n+            String errorKey)\n+    {\n+        sheetMapper.apply(getExtractor()).ifPresentOrElse(s ->\n+        {\n+            IExcelSheetParser parser = new ExcelSheetParser(s);\n+            List<Entry<CellValue, Optional<Pattern>>> failedRecords = records.stream()\n+                .map(r -> parser.getDataFromRange(r.getCellsRange())\n+                        .stream()\n+                        .map(cv -> entry(cv, r.getValueRegex())))\n+                .flatMap(Function.identity())\n+                .filter(filterMatched())\n+                .collect(Collectors.toList());\n+            if (failedRecords.isEmpty())\n+            {\n+                softAssert.recordPassedAssertion(\"All records were found the the document\");\n+                return;\n+            }\n+            failedRecords.forEach(e ->\n+            {\n+                CellValue cellValue = e.getKey();\n+                String message = String.format(\"Cell at address '%s' and value '%s' is expected to %s\",\n+                        cellValue.getAddress(), cellValue.getValue(),\n+                        e.getValue().map(Pattern::pattern).map(\"match \"::concat).orElse(\"be empty\"));\n+                softAssert.recordFailedAssertion(message);\n+            });\n+        }, () -> softAssert.recordFailedAssertion(String.format(\"Sheet with the %s doesn't exist\", errorKey)));\n+    }\n+\n+    private IExcelSheetsExtractor getExtractor()\n+    {\n+        try\n+        {\n+            return new ExcelSheetsExtractor(httpTestContext.getResponse().getResponseBody());\n+        }\n+        catch (WorkbookParsingException e)\n+        {\n+            throw new IllegalStateException(e);\n+        }\n+    }\n+\n+    private static Predicate<Entry<CellValue, Optional<Pattern>>> filterMatched()\n+    {\n+        return e ->\n+        {\n+            Optional<Pattern> pattern = e.getValue();\n+            CellValue cellValue = e.getKey();\n+            if (pattern.isPresent() && cellValue.getValue() != null)\n+            {\n+                return !pattern.get().asMatchPredicate().test(cellValue.getValue());\n+            }\n+            if (pattern.isEmpty() && cellValue.getValue() == null)\n+            {\n+                return false;\n+            }\n+            return true;", "originalCommit": "9ac1f46136e94acf092059fbee0e232c4179299f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTM3NDg2Mw==", "url": "https://github.com/vividus-framework/vividus/pull/318#discussion_r379374863", "bodyText": "move outside interface", "author": "valfirst", "createdAt": "2020-02-14T11:08:46Z", "path": "vividus-plugin-excel/src/main/java/org/vividus/excel/IExcelSheetParser.java", "diffHunk": "@@ -37,7 +37,29 @@\n \n     Sheet getSheet();\n \n-    List<String> getDataFromRange(String range);\n+    List<CellValue> getDataFromRange(String range);\n \n     String getDataFromCell(String cellAddress);\n+\n+    class CellValue", "originalCommit": "9ac1f46136e94acf092059fbee0e232c4179299f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "57867ed9a503bf274e1e8aca6daa0ad0cc60feee", "url": "https://github.com/vividus-framework/vividus/commit/57867ed9a503bf274e1e8aca6daa0ad0cc60feee", "message": "Add steps to work with excel in HTTP response\n- Then response contains excel sheet with index \\`index\\` and records:records\n- Then response contains excel sheet with name \\`name\\` and records:records", "committedDate": "2020-02-15T12:32:35Z", "type": "forcePushed"}, {"oid": "68e74baa5ba8102c710112e9a12c2065a3fde38e", "url": "https://github.com/vividus-framework/vividus/commit/68e74baa5ba8102c710112e9a12c2065a3fde38e", "message": "Add steps to work with excel in HTTP response\n- Then response contains excel sheet with index \\`index\\` and records:records\n- Then response contains excel sheet with name \\`name\\` and records:records", "committedDate": "2020-02-15T12:35:40Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg4OTgzMA==", "url": "https://github.com/vividus-framework/vividus/pull/318#discussion_r379889830", "bodyText": "This step can be moved to Before Story steps and Examples won't be needed", "author": "valfirst", "createdAt": "2020-02-16T09:46:32Z", "path": "vividus-tests/src/main/resources/story/integration/ExcelSteps.story", "diffHunk": "@@ -0,0 +1,25 @@\n+Meta:\n+    @group vividus-plugin-excel\n+\n+Lifecycle:\n+Examples:\n+{transformer=FROM_LANDSCAPE}\n+|excelURL|https://github.com/vividus-framework/vividus/blob/master/vividus-plugin-excel/src/test/resources/TestTemplate.xlsx?raw=true|\n+\n+Scenario: Step verification 'Then response contains excel sheet with index `$index` and records:$records'\n+When I issue a HTTP GET request for a resource with the URL '<excelURL>'", "originalCommit": "68e74baa5ba8102c710112e9a12c2065a3fde38e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg4OTg3Nw==", "url": "https://github.com/vividus-framework/vividus/pull/318#discussion_r379889877", "bodyText": "we usually use present simple in the assertions", "author": "valfirst", "createdAt": "2020-02-16T09:47:34Z", "path": "vividus-plugin-excel/src/main/java/org/vividus/bdd/steps/ExcelResponseValidationSteps.java", "diffHunk": "@@ -0,0 +1,165 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.vividus.bdd.steps;\n+\n+import static java.lang.String.format;\n+import static java.util.Map.entry;\n+\n+import java.util.List;\n+import java.util.Map.Entry;\n+import java.util.Optional;\n+import java.util.function.Function;\n+import java.util.function.Predicate;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.apache.poi.ss.usermodel.Sheet;\n+import org.hamcrest.Matcher;\n+import org.hamcrest.Matchers;\n+import org.hamcrest.core.IsNull;\n+import org.jbehave.core.annotations.Then;\n+import org.vividus.bdd.model.CellRecord;\n+import org.vividus.bdd.model.CellValue;\n+import org.vividus.excel.ExcelSheetParser;\n+import org.vividus.excel.ExcelSheetsExtractor;\n+import org.vividus.excel.IExcelSheetParser;\n+import org.vividus.excel.IExcelSheetsExtractor;\n+import org.vividus.excel.WorkbookParsingException;\n+import org.vividus.http.HttpTestContext;\n+import org.vividus.softassert.ISoftAssert;\n+\n+public class ExcelResponseValidationSteps\n+{\n+    private final HttpTestContext httpTestContext;\n+    private final ISoftAssert softAssert;\n+\n+    public ExcelResponseValidationSteps(HttpTestContext httpTestContext, ISoftAssert softAssert)\n+    {\n+        this.httpTestContext = httpTestContext;\n+        this.softAssert = softAssert;\n+    }\n+\n+    /**\n+     * Checks that API response contains excel sheet with index <b>index</b> and records <b>records</b>\n+     * @param index Index of the sheet (0-based)\n+     * @param records Table of records with specified <b>cellsRange</b> and <b>valueRegex</b> that should be\n+     * matched against cells in excel sheet:\n+     * <ul>\n+     * <li>cellsRange - range of cells (e.g. \"B1:D8\", \"A1\", \"C1:C5\").\n+     * <li>valueRegex - regular expression to match a value against</li>\n+     * </ul>\n+     * <code>\n+     * Then response contains excel sheet with index `2` and records:\n+     * |cellsRange|valueRegex      |<br>\n+     * |A1:E8     |\\\\w+            |<br>\n+     * |D11:H25   |                |<br>\n+     * |A1:H1     |header_\\\\d+_\\\\w+|<br>\n+     * </code>\n+     */\n+    @Then(\"response contains excel sheet with index `$index` and records:$records\")\n+    public void excelSheetWithIndexHasRecords(int index, List<CellRecord> records)\n+    {\n+        checkRecords(records, e -> e.getSheet(index), \"index \" + index);\n+    }\n+\n+    /**\n+     * Checks that API response contains excel sheet with name <b>name</b> and records <b>records</b>\n+     * @param name Name of the sheet\n+     * @param records Table of records with specified <b>cellsRange</b> and <b>valueRegex</b> that should be\n+     * matched against cells in excel sheet:\n+     * <ul>\n+     * <li>cellsRange - range of cells (e.g. \"B1:D8\", \"A1\", \"C1:C5\").\n+     * <li>valueRegex - regular expression to match a value against</li>\n+     * </ul>\n+     * <code>\n+     * Then response contains excel sheet with name `products_140220` and records:\n+     * |cellsRange|valueRegex      |<br>\n+     * |A1:E8     |\\\\w+            |<br>\n+     * |D11:H25   |                |<br>\n+     * |A1:H1     |header_\\\\d+_\\\\w+|<br>\n+     * </code>\n+     */\n+    @Then(\"response contains excel sheet with name `$name` and records:$records\")\n+    public void excelSheetWithNameHasRecords(String name, List<CellRecord> records)\n+    {\n+        checkRecords(records, e -> e.getSheet(name), \"name \" + name);\n+    }\n+\n+    private void checkRecords(List<CellRecord> records, Function<IExcelSheetsExtractor, Optional<Sheet>> sheetMapper,\n+            String errorKey)\n+    {\n+        sheetMapper.apply(getExtractor()).ifPresentOrElse(s ->\n+        {\n+            IExcelSheetParser parser = new ExcelSheetParser(s);\n+            records.stream()\n+                .map(r -> parser.getDataFromRange(r.getCellsRange())\n+                        .stream()\n+                        .map(cv -> entry(cv, r.getValueRegex())))\n+                .flatMap(Function.identity())\n+                .filter(filterMatched())\n+                .collect(Collectors.collectingAndThen(Collectors.toList(), v ->\n+                {\n+                    reportResults(records.stream().map(CellRecord::getCellsRange), v);\n+                    return null;\n+                }));\n+        }, () -> softAssert.recordFailedAssertion(format(\"Sheet with the %s doesn't exist\", errorKey)));\n+    }\n+\n+    private void reportResults(Stream<String> ranges, List<Entry<CellValue, Optional<Pattern>>> failedRecords)\n+    {\n+        if (failedRecords.isEmpty())\n+        {\n+            softAssert.recordPassedAssertion(format(\"All records at ranges %s were matched in the document\",", "originalCommit": "68e74baa5ba8102c710112e9a12c2065a3fde38e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "ffce5bc2d35af9b3e7fb9411109b131ad8bfa219", "url": "https://github.com/vividus-framework/vividus/commit/ffce5bc2d35af9b3e7fb9411109b131ad8bfa219", "message": "Add steps to work with excel in HTTP response\n- Then response contains excel sheet with index \\`index\\` and records:records\n- Then response contains excel sheet with name \\`name\\` and records:records", "committedDate": "2020-02-17T04:19:09Z", "type": "commit"}, {"oid": "ffce5bc2d35af9b3e7fb9411109b131ad8bfa219", "url": "https://github.com/vividus-framework/vividus/commit/ffce5bc2d35af9b3e7fb9411109b131ad8bfa219", "message": "Add steps to work with excel in HTTP response\n- Then response contains excel sheet with index \\`index\\` and records:records\n- Then response contains excel sheet with name \\`name\\` and records:records", "committedDate": "2020-02-17T04:19:09Z", "type": "forcePushed"}]}