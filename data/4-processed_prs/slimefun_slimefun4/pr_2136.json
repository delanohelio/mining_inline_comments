{"pr_number": 2136, "pr_title": "Piglin drops fgithub", "pr_createdAt": "2020-07-26T00:42:58Z", "pr_url": "https://github.com/Slimefun/Slimefun4/pull/2136", "timeline": [{"oid": "9093e292a138f043b754993019e51d70b3771b18", "url": "https://github.com/Slimefun/Slimefun4/commit/9093e292a138f043b754993019e51d70b3771b18", "message": "Rebased and re-commital of Piglin barter recipe addition.", "committedDate": "2020-07-26T00:38:15Z", "type": "commit"}, {"oid": "22a0623485cf3681ef609808217baa77eaab0e78", "url": "https://github.com/Slimefun/Slimefun4/commit/22a0623485cf3681ef609808217baa77eaab0e78", "message": "fixed formatting", "committedDate": "2020-07-26T00:41:27Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDUwODIxOQ==", "url": "https://github.com/Slimefun/Slimefun4/pull/2136#discussion_r460508219", "bodyText": "This import must remain there.", "author": "TheBusyBiscuit", "createdAt": "2020-07-26T10:18:20Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/core/attributes/RandomMobDrop.java", "diffHunk": "@@ -2,7 +2,6 @@\n \r\n import org.bukkit.entity.EntityType;\r\n import org.bukkit.entity.Player;\r\n-import org.bukkit.event.entity.EntityDeathEvent;\r", "originalCommit": "22a0623485cf3681ef609808217baa77eaab0e78", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDUwODIzMw==", "url": "https://github.com/Slimefun/Slimefun4/pull/2136#discussion_r460508233", "bodyText": "*EntityDeathEvent", "author": "TheBusyBiscuit", "createdAt": "2020-07-26T10:18:23Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/core/attributes/RandomMobDrop.java", "diffHunk": "@@ -11,8 +10,8 @@\n \r\n /**\r\n  * This interface, when attached to a {@link SlimefunItem}, provides an easy method for adding\r\n- * a % chance to drop for an {@link SlimefunItem} on {@link EntityDeathEvent}, this chance is 0-100\r\n- * and used in conjunction with the MOB_DROP {@link RecipeType}.\r\n+ * a % chance to drop for an {@link SlimefunItem} on {@link entityDeathEvent} or {@link EntityItemDropEvent}, this chance is 0-100\r", "originalCommit": "22a0623485cf3681ef609808217baa77eaab0e78", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDUwODI4NQ==", "url": "https://github.com/Slimefun/Slimefun4/pull/2136#discussion_r460508285", "bodyText": "You can't just add a new docs comment below the original one, edit the description instead and add yourself as an author there.", "author": "TheBusyBiscuit", "createdAt": "2020-07-26T10:19:07Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/PiglinListener.java", "diffHunk": "@@ -20,6 +26,18 @@\n  * @author poma123\n  * \n  */\n+\n+/**\n+ * Also {@link Listener} Listens to the EntityDropItemEvent event to inject a {@link RandomMobDrop} if its dropChance() check passes.\n+ * this would only be possible if the {@link RecipeType} is of PiglinBarter type. \n+ * \n+ * @author dNiym\n+ * \n+ * @see getBarterDrops\n+ * @see RandomMobDrop\n+ * \n+ */\n+", "originalCommit": "22a0623485cf3681ef609808217baa77eaab0e78", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDUwODMzMQ==", "url": "https://github.com/Slimefun/Slimefun4/pull/2136#discussion_r460508331", "bodyText": "Remove these", "author": "TheBusyBiscuit", "createdAt": "2020-07-26T10:19:18Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/PiglinListener.java", "diffHunk": "@@ -20,6 +26,18 @@\n  * @author poma123\n  * \n  */\n+\n+/**\n+ * Also {@link Listener} Listens to the EntityDropItemEvent event to inject a {@link RandomMobDrop} if its dropChance() check passes.\n+ * this would only be possible if the {@link RecipeType} is of PiglinBarter type. \n+ * \n+ * @author dNiym\n+ * \n+ * @see getBarterDrops\n+ * @see RandomMobDrop", "originalCommit": "22a0623485cf3681ef609808217baa77eaab0e78", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDUwODU0Mw==", "url": "https://github.com/Slimefun/Slimefun4/pull/2136#discussion_r460508543", "bodyText": "Honestly I would rather recommend making a seperate PiglinBarterDrop interface for this instead. (You can also just make it extend RandomMobDrop for simplicity).\nBecause this is a bit un-intuitive.", "author": "TheBusyBiscuit", "createdAt": "2020-07-26T10:21:41Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/PiglinListener.java", "diffHunk": "@@ -38,6 +56,29 @@ public void onEntityPickup(EntityPickupItemEvent e) {\n         }\n     }\n \n+    @EventHandler\n+    public void onPiglinDropItem(EntityDropItemEvent e) {\n+        if (e.getEntity() instanceof Piglin) {\n+            Set<ItemStack> drops = SlimefunPlugin.getRegistry().getBarterDrops(); \n+            \n+            /*\n+             * NOTE:  Getting a new random number each iteration because multiple items could have the same\n+             * % chance to drop, and if one fails all items with that number will fail.  Getting a new random number\n+             * will allow multiple items with the same % chance to drop.\n+             */\n+            \n+            for (ItemStack is : drops) {\n+                SlimefunItem sfi = SlimefunItem.getByItem(is);\n+                if (sfi instanceof RandomMobDrop && ((RandomMobDrop)sfi).getMobDropChance() >= ThreadLocalRandom.current().nextInt(100)) {\n+                    Item drop = e.getEntity().getWorld().dropItemNaturally(((Piglin)e.getEntity()).getEyeLocation(), sfi.getItem());\n+                    drop.setVelocity(e.getItemDrop().getVelocity());\n+                    e.getItemDrop().remove();\n+                    return;\n+                } \n+            }\n+        }", "originalCommit": "22a0623485cf3681ef609808217baa77eaab0e78", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDUwODU4NQ==", "url": "https://github.com/Slimefun/Slimefun4/pull/2136#discussion_r460508585", "bodyText": "Also it may be wise to create some variables here, for the piglin for example as this all appears a bit cluttered.", "author": "TheBusyBiscuit", "createdAt": "2020-07-26T10:22:04Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/PiglinListener.java", "diffHunk": "@@ -38,6 +56,29 @@ public void onEntityPickup(EntityPickupItemEvent e) {\n         }\n     }\n \n+    @EventHandler\n+    public void onPiglinDropItem(EntityDropItemEvent e) {\n+        if (e.getEntity() instanceof Piglin) {\n+            Set<ItemStack> drops = SlimefunPlugin.getRegistry().getBarterDrops(); \n+            \n+            /*\n+             * NOTE:  Getting a new random number each iteration because multiple items could have the same\n+             * % chance to drop, and if one fails all items with that number will fail.  Getting a new random number\n+             * will allow multiple items with the same % chance to drop.\n+             */\n+            \n+            for (ItemStack is : drops) {\n+                SlimefunItem sfi = SlimefunItem.getByItem(is);\n+                if (sfi instanceof RandomMobDrop && ((RandomMobDrop)sfi).getMobDropChance() >= ThreadLocalRandom.current().nextInt(100)) {\n+                    Item drop = e.getEntity().getWorld().dropItemNaturally(((Piglin)e.getEntity()).getEyeLocation(), sfi.getItem());", "originalCommit": "22a0623485cf3681ef609808217baa77eaab0e78", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "ba8aafe3123425bedc47dd0f3474ebccbe59887f", "url": "https://github.com/Slimefun/Slimefun4/commit/ba8aafe3123425bedc47dd0f3474ebccbe59887f", "message": "made requested changes", "committedDate": "2020-07-26T14:20:17Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDUzNTM1Mg==", "url": "https://github.com/Slimefun/Slimefun4/pull/2136#discussion_r460535352", "bodyText": "Make a new author tag below this one.\nYou can have multiple, no need to use a comma here", "author": "TheBusyBiscuit", "createdAt": "2020-07-26T14:36:38Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/PiglinListener.java", "diffHunk": "@@ -1,25 +1,34 @@\n package io.github.thebusybiscuit.slimefun4.implementation.listeners;\n \n+import java.util.Set;\n+import java.util.concurrent.ThreadLocalRandom;\n+\n import org.bukkit.Material;\n import org.bukkit.entity.EntityType;\n+import org.bukkit.entity.Item;\n import org.bukkit.entity.Piglin;\n import org.bukkit.entity.Player;\n import org.bukkit.event.EventHandler;\n import org.bukkit.event.Listener;\n+import org.bukkit.event.entity.EntityDropItemEvent;\n import org.bukkit.event.entity.EntityPickupItemEvent;\n import org.bukkit.event.player.PlayerInteractEntityEvent;\n import org.bukkit.inventory.EquipmentSlot;\n import org.bukkit.inventory.ItemStack;\n \n+import io.github.thebusybiscuit.slimefun4.core.attributes.PiglinBarterDrop;\n+import io.github.thebusybiscuit.slimefun4.core.attributes.RandomMobDrop;\n import io.github.thebusybiscuit.slimefun4.implementation.SlimefunPlugin;\n import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SlimefunItem;\n \n /**\n- * This {@link Listener} prevents a {@link Piglin} from bartering with a {@link SlimefunItem}.\n+ * This {@link Listener} prevents a {@link Piglin} from bartering with a {@link SlimefunItem} as well as\n+ * listens to the EntityDropItemEvent to inject a {@link PiglinBarterDrop} if a dropChance() check passes.\n  *\n- * @author poma123\n+ * @author poma123, dNiym", "originalCommit": "ba8aafe3123425bedc47dd0f3474ebccbe59887f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDUzNTM5Ng==", "url": "https://github.com/Slimefun/Slimefun4/pull/2136#discussion_r460535396", "bodyText": "*piglin", "author": "TheBusyBiscuit", "createdAt": "2020-07-26T14:36:54Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/PiglinListener.java", "diffHunk": "@@ -38,6 +47,30 @@ public void onEntityPickup(EntityPickupItemEvent e) {\n         }\n     }\n \n+    @EventHandler\n+    public void onPiglinDropItem(EntityDropItemEvent e) {\n+        if (e.getEntity() instanceof Piglin) {\n+            Piglin piggy = (Piglin) e.getEntity();", "originalCommit": "ba8aafe3123425bedc47dd0f3474ebccbe59887f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDUzNTQ0OQ==", "url": "https://github.com/Slimefun/Slimefun4/pull/2136#discussion_r460535449", "bodyText": "*PiglinListener", "author": "TheBusyBiscuit", "createdAt": "2020-07-26T14:37:15Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/core/attributes/PiglinBarterDrop.java", "diffHunk": "@@ -0,0 +1,39 @@\n+package io.github.thebusybiscuit.slimefun4.core.attributes;\n+\n+import org.bukkit.entity.EntityType;\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.entity.EntityDeathEvent;\n+import org.bukkit.event.entity.EntityDropItemEvent;\n+\n+import io.github.thebusybiscuit.slimefun4.implementation.items.misc.BasicCircuitBoard;\n+import io.github.thebusybiscuit.slimefun4.implementation.listeners.MobDropListener;\n+import me.mrCookieSlime.Slimefun.Lists.RecipeType;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SlimefunItem;\n+\n+/**\n+ * This interface, when attached to a {@link SlimefunItem}, provides an easy method for adding\n+ * a % chance to drop for an {@link SlimefunItem} on {@link EntityItemDropEvent}, this chance is 0-100\n+ * and used in conjunction with the BARTER_DROP {@link RecipeType}.\n+ * \n+ * @author dNiym\n+ *\n+ * @see MobDropListener", "originalCommit": "ba8aafe3123425bedc47dd0f3474ebccbe59887f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDUzNTQ4Nw==", "url": "https://github.com/Slimefun/Slimefun4/pull/2136#discussion_r460535487", "bodyText": "Also I forgot the method was called getMobDropChance(). Maybe not extend that and just make a method called getBarteringLootChance() instead?", "author": "TheBusyBiscuit", "createdAt": "2020-07-26T14:37:49Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/core/attributes/PiglinBarterDrop.java", "diffHunk": "@@ -0,0 +1,39 @@\n+package io.github.thebusybiscuit.slimefun4.core.attributes;\n+\n+import org.bukkit.entity.EntityType;\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.entity.EntityDeathEvent;\n+import org.bukkit.event.entity.EntityDropItemEvent;\n+\n+import io.github.thebusybiscuit.slimefun4.implementation.items.misc.BasicCircuitBoard;\n+import io.github.thebusybiscuit.slimefun4.implementation.listeners.MobDropListener;\n+import me.mrCookieSlime.Slimefun.Lists.RecipeType;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SlimefunItem;\n+\n+/**\n+ * This interface, when attached to a {@link SlimefunItem}, provides an easy method for adding\n+ * a % chance to drop for an {@link SlimefunItem} on {@link EntityItemDropEvent}, this chance is 0-100\n+ * and used in conjunction with the BARTER_DROP {@link RecipeType}.\n+ * \n+ * @author dNiym\n+ *\n+ * @see MobDropListener\n+ * \n+ */\n+@FunctionalInterface\n+public interface PiglinBarterDrop extends RandomMobDrop {", "originalCommit": "ba8aafe3123425bedc47dd0f3474ebccbe59887f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDUzNTUxOA==", "url": "https://github.com/Slimefun/Slimefun4/pull/2136#discussion_r460535518", "bodyText": "This comment is no longer needed here", "author": "TheBusyBiscuit", "createdAt": "2020-07-26T14:38:04Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/core/attributes/RandomMobDrop.java", "diffHunk": "@@ -26,7 +27,15 @@\n     /**\r\n      * Implement this method to make the object have a variable chance of being\r\n      * added to the dropList when {@link EntityType} (specified in the recipe)\r\n-     * is killed by the {@link Player}\r\n+     * is killed by the {@link Player} for a MOB_DROP {@link RecipeType}.\r\n+     * \r\n+     * Alternatively if the {@link RecipeType} is set to BARTER_DROP the item\r\n+     * will then have its % chance to be dropped only by bartering with the\r\n+     * Piglin creatures.\r\n+     * \r\n+     * It is recommended that this chance is kept reasonably low to feel like\r\n+     * a vanilla drop as a 100% chance will completely override all piglin \r\n+     * barter drops.  (NOTE: this feature only exists in 1.16+)\r", "originalCommit": "ba8aafe3123425bedc47dd0f3474ebccbe59887f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDUzNTUzMQ==", "url": "https://github.com/Slimefun/Slimefun4/pull/2136#discussion_r460535531", "bodyText": "EntityDeathEvent", "author": "TheBusyBiscuit", "createdAt": "2020-07-26T14:38:15Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/core/attributes/RandomMobDrop.java", "diffHunk": "@@ -11,8 +12,8 @@\n \r\n /**\r\n  * This interface, when attached to a {@link SlimefunItem}, provides an easy method for adding\r\n- * a % chance to drop for an {@link SlimefunItem} on {@link EntityDeathEvent}, this chance is 0-100\r\n- * and used in conjunction with the MOB_DROP {@link RecipeType}.\r\n+ * a % chance to drop for an {@link SlimefunItem} on {@link entityDeathEvent} or {@link EntityItemDropEvent}, this chance is 0-100\r", "originalCommit": "ba8aafe3123425bedc47dd0f3474ebccbe59887f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDUzNTU1Nw==", "url": "https://github.com/Slimefun/Slimefun4/pull/2136#discussion_r460535557", "bodyText": "The barter drop is now its own interface", "author": "TheBusyBiscuit", "createdAt": "2020-07-26T14:38:30Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/core/attributes/RandomMobDrop.java", "diffHunk": "@@ -11,8 +12,8 @@\n \r\n /**\r\n  * This interface, when attached to a {@link SlimefunItem}, provides an easy method for adding\r\n- * a % chance to drop for an {@link SlimefunItem} on {@link EntityDeathEvent}, this chance is 0-100\r\n- * and used in conjunction with the MOB_DROP {@link RecipeType}.\r\n+ * a % chance to drop for an {@link SlimefunItem} on {@link entityDeathEvent} or {@link EntityItemDropEvent}, this chance is 0-100\r\n+ * and used in conjunction with the MOB_DROP {@link RecipeType} or the BARTER_DROP {@link RecipeType}.\r", "originalCommit": "ba8aafe3123425bedc47dd0f3474ebccbe59887f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "65f851980515b295e298d019d026baf37212cc90", "url": "https://github.com/Slimefun/Slimefun4/commit/65f851980515b295e298d019d026baf37212cc90", "message": "made requested changes", "committedDate": "2020-07-26T14:49:41Z", "type": "commit"}, {"oid": "260a6f4f6160106319ead9ec725d92d4278549ed", "url": "https://github.com/Slimefun/Slimefun4/commit/260a6f4f6160106319ead9ec725d92d4278549ed", "message": "forgot one", "committedDate": "2020-07-26T14:51:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDUzNzEzMg==", "url": "https://github.com/Slimefun/Slimefun4/pull/2136#discussion_r460537132", "bodyText": "Still a capital E at the start.", "author": "TheBusyBiscuit", "createdAt": "2020-07-26T14:53:54Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/core/attributes/RandomMobDrop.java", "diffHunk": "@@ -11,8 +12,8 @@\n \r\n /**\r\n  * This interface, when attached to a {@link SlimefunItem}, provides an easy method for adding\r\n- * a % chance to drop for an {@link SlimefunItem} on {@link EntityDeathEvent}, this chance is 0-100\r\n- * and used in conjunction with the MOB_DROP {@link RecipeType}.\r\n+ * a % chance to drop for an {@link SlimefunItem} on {@link entityDeathEvent}, this chance is 0-100\r", "originalCommit": "260a6f4f6160106319ead9ec725d92d4278549ed", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "4f5c1f6760a5e8ca3e2d1e2a9faa56e69c5c664e", "url": "https://github.com/Slimefun/Slimefun4/commit/4f5c1f6760a5e8ca3e2d1e2a9faa56e69c5c664e", "message": "made requested changes", "committedDate": "2020-07-26T16:06:06Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzMyMzAzNw==", "url": "https://github.com/Slimefun/Slimefun4/pull/2136#discussion_r463323037", "bodyText": "\"provides an easy method for adding a % chance to drop for an SlimefunItem\"\nThis doesn't make sense. Also this is one entire sentence. That's a long ass sentence. Also, grammar pls", "author": "WalshyDev", "createdAt": "2020-07-30T23:18:36Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/core/attributes/PiglinBarterDrop.java", "diffHunk": "@@ -0,0 +1,39 @@\n+package io.github.thebusybiscuit.slimefun4.core.attributes;\n+\n+import org.bukkit.entity.EntityType;\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.entity.EntityDeathEvent;\n+import org.bukkit.event.entity.EntityDropItemEvent;\n+\n+import io.github.thebusybiscuit.slimefun4.implementation.items.misc.BasicCircuitBoard;\n+import io.github.thebusybiscuit.slimefun4.implementation.listeners.MobDropListener;\n+import me.mrCookieSlime.Slimefun.Lists.RecipeType;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SlimefunItem;\n+\n+/**\n+ * This interface, when attached to a {@link SlimefunItem}, provides an easy method for adding\n+ * a % chance to drop for an {@link SlimefunItem} on {@link EntityItemDropEvent}, this chance is 0-100", "originalCommit": "4f5c1f6760a5e8ca3e2d1e2a9faa56e69c5c664e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzMyMzQ3OA==", "url": "https://github.com/Slimefun/Slimefun4/pull/2136#discussion_r463323478", "bodyText": "\"make the object have a...\"\n*Make the SlimefunItem have a...\nThen you can remove the useless addition below and just state it's used with the BARTER_DROP RecipeType", "author": "WalshyDev", "createdAt": "2020-07-30T23:20:02Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/core/attributes/PiglinBarterDrop.java", "diffHunk": "@@ -0,0 +1,39 @@\n+package io.github.thebusybiscuit.slimefun4.core.attributes;\n+\n+import org.bukkit.entity.EntityType;\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.entity.EntityDeathEvent;\n+import org.bukkit.event.entity.EntityDropItemEvent;\n+\n+import io.github.thebusybiscuit.slimefun4.implementation.items.misc.BasicCircuitBoard;\n+import io.github.thebusybiscuit.slimefun4.implementation.listeners.MobDropListener;\n+import me.mrCookieSlime.Slimefun.Lists.RecipeType;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SlimefunItem;\n+\n+/**\n+ * This interface, when attached to a {@link SlimefunItem}, provides an easy method for adding\n+ * a % chance to drop for an {@link SlimefunItem} on {@link EntityItemDropEvent}, this chance is 0-100\n+ * and used in conjunction with the BARTER_DROP {@link RecipeType}.\n+ * \n+ * @author dNiym\n+ *\n+ * @see PiglinListener\n+ * \n+ */\n+@FunctionalInterface\n+public interface PiglinBarterDrop extends ItemAttribute {\n+\n+    /**\n+     * Implement this method to make the object have a variable chance of being", "originalCommit": "4f5c1f6760a5e8ca3e2d1e2a9faa56e69c5c664e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzMyMzcyNA==", "url": "https://github.com/Slimefun/Slimefun4/pull/2136#discussion_r463323724", "bodyText": "This note should really be on a new line, hold and not have brackets. This just seems weird.", "author": "WalshyDev", "createdAt": "2020-07-30T23:20:54Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/core/attributes/PiglinBarterDrop.java", "diffHunk": "@@ -0,0 +1,39 @@\n+package io.github.thebusybiscuit.slimefun4.core.attributes;\n+\n+import org.bukkit.entity.EntityType;\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.entity.EntityDeathEvent;\n+import org.bukkit.event.entity.EntityDropItemEvent;\n+\n+import io.github.thebusybiscuit.slimefun4.implementation.items.misc.BasicCircuitBoard;\n+import io.github.thebusybiscuit.slimefun4.implementation.listeners.MobDropListener;\n+import me.mrCookieSlime.Slimefun.Lists.RecipeType;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SlimefunItem;\n+\n+/**\n+ * This interface, when attached to a {@link SlimefunItem}, provides an easy method for adding\n+ * a % chance to drop for an {@link SlimefunItem} on {@link EntityItemDropEvent}, this chance is 0-100\n+ * and used in conjunction with the BARTER_DROP {@link RecipeType}.\n+ * \n+ * @author dNiym\n+ *\n+ * @see PiglinListener\n+ * \n+ */\n+@FunctionalInterface\n+public interface PiglinBarterDrop extends ItemAttribute {\n+\n+    /**\n+     * Implement this method to make the object have a variable chance of being\n+     * dropped by Piglins when bartering with them. This interface should be used\n+     * with a {@link SlimefunItem} item that has the BARTER_DROP {@link RecipeType}.\n+     * \n+     * It is recommended that this chance is kept reasonably low to feel like\n+     * a vanilla drop as a 100% chance will completely override all Piglin \n+     * barter drops.  (NOTE: this feature only exists in 1.16+)", "originalCommit": "4f5c1f6760a5e8ca3e2d1e2a9faa56e69c5c664e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzMyMzg1Nw==", "url": "https://github.com/Slimefun/Slimefun4/pull/2136#discussion_r463323857", "bodyText": "The integer chance (0-100%) this SlimefunItem has to drop.", "author": "WalshyDev", "createdAt": "2020-07-30T23:21:28Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/core/attributes/PiglinBarterDrop.java", "diffHunk": "@@ -0,0 +1,39 @@\n+package io.github.thebusybiscuit.slimefun4.core.attributes;\n+\n+import org.bukkit.entity.EntityType;\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.entity.EntityDeathEvent;\n+import org.bukkit.event.entity.EntityDropItemEvent;\n+\n+import io.github.thebusybiscuit.slimefun4.implementation.items.misc.BasicCircuitBoard;\n+import io.github.thebusybiscuit.slimefun4.implementation.listeners.MobDropListener;\n+import me.mrCookieSlime.Slimefun.Lists.RecipeType;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SlimefunItem;\n+\n+/**\n+ * This interface, when attached to a {@link SlimefunItem}, provides an easy method for adding\n+ * a % chance to drop for an {@link SlimefunItem} on {@link EntityItemDropEvent}, this chance is 0-100\n+ * and used in conjunction with the BARTER_DROP {@link RecipeType}.\n+ * \n+ * @author dNiym\n+ *\n+ * @see PiglinListener\n+ * \n+ */\n+@FunctionalInterface\n+public interface PiglinBarterDrop extends ItemAttribute {\n+\n+    /**\n+     * Implement this method to make the object have a variable chance of being\n+     * dropped by Piglins when bartering with them. This interface should be used\n+     * with a {@link SlimefunItem} item that has the BARTER_DROP {@link RecipeType}.\n+     * \n+     * It is recommended that this chance is kept reasonably low to feel like\n+     * a vanilla drop as a 100% chance will completely override all Piglin \n+     * barter drops.  (NOTE: this feature only exists in 1.16+)\n+     * \n+     * @return The integer chance (0-100%) {@link SlimefunItem} has to drop.", "originalCommit": "4f5c1f6760a5e8ca3e2d1e2a9faa56e69c5c664e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzMyMzk4Mw==", "url": "https://github.com/Slimefun/Slimefun4/pull/2136#discussion_r463323983", "bodyText": "Not exactly sure why the period was removed here.", "author": "WalshyDev", "createdAt": "2020-07-30T23:21:52Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/core/attributes/RandomMobDrop.java", "diffHunk": "@@ -12,7 +13,7 @@\n /**\r\n  * This interface, when attached to a {@link SlimefunItem}, provides an easy method for adding\r\n  * a % chance to drop for an {@link SlimefunItem} on {@link EntityDeathEvent}, this chance is 0-100\r\n- * and used in conjunction with the MOB_DROP {@link RecipeType}.\r\n+ * and used in conjunction with the MOB_DROP {@link RecipeType} \r", "originalCommit": "4f5c1f6760a5e8ca3e2d1e2a9faa56e69c5c664e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzMyNDEwOQ==", "url": "https://github.com/Slimefun/Slimefun4/pull/2136#discussion_r463324109", "bodyText": "You can just do {@link RecipeType#MOB_DROP}", "author": "WalshyDev", "createdAt": "2020-07-30T23:22:21Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/core/attributes/RandomMobDrop.java", "diffHunk": "@@ -26,7 +27,7 @@\n     /**\r\n      * Implement this method to make the object have a variable chance of being\r\n      * added to the dropList when {@link EntityType} (specified in the recipe)\r\n-     * is killed by the {@link Player}\r\n+     * is killed by the {@link Player} for a MOB_DROP {@link RecipeType}.\r", "originalCommit": "4f5c1f6760a5e8ca3e2d1e2a9faa56e69c5c664e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzMyNTExMg==", "url": "https://github.com/Slimefun/Slimefun4/pull/2136#discussion_r463325112", "bodyText": "You make an Piglin variable but then only use it once (and use e.getEntity another). You also don't actually even use any methods in this class...", "author": "WalshyDev", "createdAt": "2020-07-30T23:25:46Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/PiglinListener.java", "diffHunk": "@@ -38,6 +48,30 @@ public void onEntityPickup(EntityPickupItemEvent e) {\n         }\n     }\n \n+    @EventHandler\n+    public void onPiglinDropItem(EntityDropItemEvent e) {\n+        if (e.getEntity() instanceof Piglin) {\n+            Piglin piglin = (Piglin) e.getEntity();", "originalCommit": "4f5c1f6760a5e8ca3e2d1e2a9faa56e69c5c664e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzMzODEyNQ==", "url": "https://github.com/Slimefun/Slimefun4/pull/2136#discussion_r463338125", "bodyText": "made piglin a variable based on a request from TheBusyBiscuit...  So should I or should I not make a variable? or just use e.getEntity()", "author": "dniym", "createdAt": "2020-07-31T00:10:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzMyNTExMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzMzODc0Mw==", "url": "https://github.com/Slimefun/Slimefun4/pull/2136#discussion_r463338743", "bodyText": "Having a variable is fine but, you just use the Piglin class for no reason. You also only use it once and then still have an e.getEntity\nUse the variable everywhere or use the longer calls.", "author": "WalshyDev", "createdAt": "2020-07-31T00:13:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzMyNTExMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzMyNTg1MA==", "url": "https://github.com/Slimefun/Slimefun4/pull/2136#discussion_r463325850", "bodyText": "You're doing a random number between 0-99 and then a greater OR equal). If I had a 1% chance this would actually be 2% (0 and 1).\nFix pls", "author": "WalshyDev", "createdAt": "2020-07-30T23:28:25Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/PiglinListener.java", "diffHunk": "@@ -38,6 +48,30 @@ public void onEntityPickup(EntityPickupItemEvent e) {\n         }\n     }\n \n+    @EventHandler\n+    public void onPiglinDropItem(EntityDropItemEvent e) {\n+        if (e.getEntity() instanceof Piglin) {\n+            Piglin piglin = (Piglin) e.getEntity();\n+            Set<ItemStack> drops = SlimefunPlugin.getRegistry().getBarterDrops(); \n+            \n+            /*\n+             * NOTE:  Getting a new random number each iteration because multiple items could have the same\n+             * % chance to drop, and if one fails all items with that number will fail.  Getting a new random number\n+             * will allow multiple items with the same % chance to drop.\n+             */\n+            \n+            for (ItemStack is : drops) {\n+                SlimefunItem sfi = SlimefunItem.getByItem(is);\n+                if (sfi instanceof PiglinBarterDrop && ((PiglinBarterDrop)sfi).getBarteringLootChance() >= ThreadLocalRandom.current().nextInt(100)) {", "originalCommit": "4f5c1f6760a5e8ca3e2d1e2a9faa56e69c5c664e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "80ee551ca27ee34bf46021ead395a2a8b212fa5a", "url": "https://github.com/Slimefun/Slimefun4/commit/80ee551ca27ee34bf46021ead395a2a8b212fa5a", "message": "Made requested changes.", "committedDate": "2020-07-31T00:14:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDA4NTg0NQ==", "url": "https://github.com/Slimefun/Slimefun4/pull/2136#discussion_r464085845", "bodyText": "This doesn't make sense anymore. \"killed by the Player RecipeType#MOB_DROP\".\nShould probably be mentioned above when the entity and recipe is mentioned.", "author": "WalshyDev", "createdAt": "2020-08-02T14:40:06Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/core/attributes/RandomMobDrop.java", "diffHunk": "@@ -26,7 +27,7 @@\n     /**\r\n      * Implement this method to make the object have a variable chance of being\r\n      * added to the dropList when {@link EntityType} (specified in the recipe)\r\n-     * is killed by the {@link Player}\r\n+     * is killed by the {@link Player} {@link RecipeType#MOB_DROP} \r", "originalCommit": "80ee551ca27ee34bf46021ead395a2a8b212fa5a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDA5Mjk3Nw==", "url": "https://github.com/Slimefun/Slimefun4/pull/2136#discussion_r464092977", "bodyText": "fixed", "author": "dniym", "createdAt": "2020-08-02T15:47:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDA4NTg0NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDA4NTk1NQ==", "url": "https://github.com/Slimefun/Slimefun4/pull/2136#discussion_r464085955", "bodyText": "RecipeType#BARTER_DROP", "author": "WalshyDev", "createdAt": "2020-08-02T14:41:06Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/core/attributes/PiglinBarterDrop.java", "diffHunk": "@@ -0,0 +1,39 @@\n+package io.github.thebusybiscuit.slimefun4.core.attributes;\n+\n+import org.bukkit.entity.EntityType;\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.entity.EntityDeathEvent;\n+import org.bukkit.event.entity.EntityDropItemEvent;\n+\n+import io.github.thebusybiscuit.slimefun4.implementation.items.misc.BasicCircuitBoard;\n+import io.github.thebusybiscuit.slimefun4.implementation.listeners.MobDropListener;\n+import me.mrCookieSlime.Slimefun.Lists.RecipeType;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SlimefunItem;\n+\n+/**\n+ * This interface, when attached to a {@link SlimefunItem}, provides a variable (0-100%) chance for\n+ * a {@link SlimefunItem} to be dropped by a piglin on {@link EntityItemDropEvent}. \n+ * \n+ * @author dNiym\n+ *\n+ * @see PiglinListener\n+ * \n+ */\n+@FunctionalInterface\n+public interface PiglinBarterDrop extends ItemAttribute {\n+\n+    /**\n+     * Implement this method to make this SlimefunItem have a variable chance of being\n+     * dropped by Piglins when bartering with them. This interface should be used\n+     * the BARTER_DROP {@link RecipeType}.", "originalCommit": "80ee551ca27ee34bf46021ead395a2a8b212fa5a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDA5Mjk4Nw==", "url": "https://github.com/Slimefun/Slimefun4/pull/2136#discussion_r464092987", "bodyText": "also fixed", "author": "dniym", "createdAt": "2020-08-02T15:47:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDA4NTk1NQ=="}], "type": "inlineReview"}, {"oid": "8305729cfb4aa8d899369193f7c13148fb788efb", "url": "https://github.com/Slimefun/Slimefun4/commit/8305729cfb4aa8d899369193f7c13148fb788efb", "message": "Update RandomMobDrop.java\n\nmade requested changes.", "committedDate": "2020-08-02T15:45:19Z", "type": "commit"}, {"oid": "eed7b873c7d15657fa612dc98c2588f1025b5da8", "url": "https://github.com/Slimefun/Slimefun4/commit/eed7b873c7d15657fa612dc98c2588f1025b5da8", "message": "Update PiglinBarterDrop.java\n\nmade requested changes", "committedDate": "2020-08-02T15:46:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDEwNTc2Mg==", "url": "https://github.com/Slimefun/Slimefun4/pull/2136#discussion_r464105762", "bodyText": "You could also just do e.getItemDrop().setItemStack(sfi.getItem().clone()) here, this would probably cause less issues with other plugins.", "author": "TheBusyBiscuit", "createdAt": "2020-08-02T18:02:33Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/PiglinListener.java", "diffHunk": "@@ -38,6 +48,30 @@ public void onEntityPickup(EntityPickupItemEvent e) {\n         }\n     }\n \n+    @EventHandler\n+    public void onPiglinDropItem(EntityDropItemEvent e) {\n+        if (e.getEntity() instanceof Piglin) {\n+            Piglin piglin = (Piglin) e.getEntity();\n+            Set<ItemStack> drops = SlimefunPlugin.getRegistry().getBarterDrops(); \n+            \n+            /*\n+             * NOTE:  Getting a new random number each iteration because multiple items could have the same\n+             * % chance to drop, and if one fails all items with that number will fail.  Getting a new random number\n+             * will allow multiple items with the same % chance to drop.\n+             */\n+            \n+            for (ItemStack is : drops) {\n+                SlimefunItem sfi = SlimefunItem.getByItem(is);\n+                if (sfi instanceof PiglinBarterDrop && ((PiglinBarterDrop)sfi).getBarteringLootChance() >= ThreadLocalRandom.current().nextInt(1,101)) {\n+                    Item drop = piglin.getWorld().dropItemNaturally(piglin.getEyeLocation(), sfi.getItem());\n+                    drop.setVelocity(e.getItemDrop().getVelocity());\n+                    e.getItemDrop().remove();", "originalCommit": "eed7b873c7d15657fa612dc98c2588f1025b5da8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDEwNTc4Ng==", "url": "https://github.com/Slimefun/Slimefun4/pull/2136#discussion_r464105786", "bodyText": "Why [1; 101] here?", "author": "TheBusyBiscuit", "createdAt": "2020-08-02T18:02:44Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/PiglinListener.java", "diffHunk": "@@ -38,6 +48,30 @@ public void onEntityPickup(EntityPickupItemEvent e) {\n         }\n     }\n \n+    @EventHandler\n+    public void onPiglinDropItem(EntityDropItemEvent e) {\n+        if (e.getEntity() instanceof Piglin) {\n+            Piglin piglin = (Piglin) e.getEntity();\n+            Set<ItemStack> drops = SlimefunPlugin.getRegistry().getBarterDrops(); \n+            \n+            /*\n+             * NOTE:  Getting a new random number each iteration because multiple items could have the same\n+             * % chance to drop, and if one fails all items with that number will fail.  Getting a new random number\n+             * will allow multiple items with the same % chance to drop.\n+             */\n+            \n+            for (ItemStack is : drops) {\n+                SlimefunItem sfi = SlimefunItem.getByItem(is);\n+                if (sfi instanceof PiglinBarterDrop && ((PiglinBarterDrop)sfi).getBarteringLootChance() >= ThreadLocalRandom.current().nextInt(1,101)) {", "originalCommit": "eed7b873c7d15657fa612dc98c2588f1025b5da8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDExOTcyMw==", "url": "https://github.com/Slimefun/Slimefun4/pull/2136#discussion_r464119723", "bodyText": "Per walshy\n#2136 (comment)", "author": "dniym", "createdAt": "2020-08-02T20:24:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDEwNTc4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDExOTkyMg==", "url": "https://github.com/Slimefun/Slimefun4/pull/2136#discussion_r464119922", "bodyText": "You can also just do greater than random(100). I think the [1; 100] here is a bit confusing, might even be helpful to add a comment there too", "author": "TheBusyBiscuit", "createdAt": "2020-08-02T20:26:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDEwNTc4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDEyMTA0Mg==", "url": "https://github.com/Slimefun/Slimefun4/pull/2136#discussion_r464121042", "bodyText": "done", "author": "dniym", "createdAt": "2020-08-02T20:38:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDEwNTc4Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDEwNTgxMQ==", "url": "https://github.com/Slimefun/Slimefun4/pull/2136#discussion_r464105811", "bodyText": "You could mark EntityDropItemEvent here as a link too.", "author": "TheBusyBiscuit", "createdAt": "2020-08-02T18:03:02Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/PiglinListener.java", "diffHunk": "@@ -1,25 +1,35 @@\n package io.github.thebusybiscuit.slimefun4.implementation.listeners;\n \n+import java.util.Set;\n+import java.util.concurrent.ThreadLocalRandom;\n+\n import org.bukkit.Material;\n import org.bukkit.entity.EntityType;\n+import org.bukkit.entity.Item;\n import org.bukkit.entity.Piglin;\n import org.bukkit.entity.Player;\n import org.bukkit.event.EventHandler;\n import org.bukkit.event.Listener;\n+import org.bukkit.event.entity.EntityDropItemEvent;\n import org.bukkit.event.entity.EntityPickupItemEvent;\n import org.bukkit.event.player.PlayerInteractEntityEvent;\n import org.bukkit.inventory.EquipmentSlot;\n import org.bukkit.inventory.ItemStack;\n \n+import io.github.thebusybiscuit.slimefun4.core.attributes.PiglinBarterDrop;\n+import io.github.thebusybiscuit.slimefun4.core.attributes.RandomMobDrop;\n import io.github.thebusybiscuit.slimefun4.implementation.SlimefunPlugin;\n import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SlimefunItem;\n \n /**\n- * This {@link Listener} prevents a {@link Piglin} from bartering with a {@link SlimefunItem}.\n+ * This {@link Listener} prevents a {@link Piglin} from bartering with a {@link SlimefunItem} as well as\n+ * listens to the EntityDropItemEvent to inject a {@link PiglinBarterDrop} if a dropChance() check passes.", "originalCommit": "eed7b873c7d15657fa612dc98c2588f1025b5da8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDEyMDE5MQ==", "url": "https://github.com/Slimefun/Slimefun4/pull/2136#discussion_r464120191", "bodyText": "Handled", "author": "dniym", "createdAt": "2020-08-02T20:29:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDEwNTgxMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDEwNTgyOA==", "url": "https://github.com/Slimefun/Slimefun4/pull/2136#discussion_r464105828", "bodyText": "You could mark SlimefunItem here as a link too.", "author": "TheBusyBiscuit", "createdAt": "2020-08-02T18:03:13Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/core/attributes/PiglinBarterDrop.java", "diffHunk": "@@ -0,0 +1,39 @@\n+package io.github.thebusybiscuit.slimefun4.core.attributes;\n+\n+import org.bukkit.entity.EntityType;\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.entity.EntityDeathEvent;\n+import org.bukkit.event.entity.EntityDropItemEvent;\n+\n+import io.github.thebusybiscuit.slimefun4.implementation.items.misc.BasicCircuitBoard;\n+import io.github.thebusybiscuit.slimefun4.implementation.listeners.MobDropListener;\n+import me.mrCookieSlime.Slimefun.Lists.RecipeType;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SlimefunItem;\n+\n+/**\n+ * This interface, when attached to a {@link SlimefunItem}, provides a variable (0-100%) chance for\n+ * a {@link SlimefunItem} to be dropped by a piglin on {@link EntityItemDropEvent}. \n+ * \n+ * @author dNiym\n+ *\n+ * @see PiglinListener\n+ * \n+ */\n+@FunctionalInterface\n+public interface PiglinBarterDrop extends ItemAttribute {\n+\n+    /**\n+     * Implement this method to make this SlimefunItem have a variable chance of being", "originalCommit": "eed7b873c7d15657fa612dc98c2588f1025b5da8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDEyMDIxNQ==", "url": "https://github.com/Slimefun/Slimefun4/pull/2136#discussion_r464120215", "bodyText": "done", "author": "dniym", "createdAt": "2020-08-02T20:29:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDEwNTgyOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDEwNTg0OQ==", "url": "https://github.com/Slimefun/Slimefun4/pull/2136#discussion_r464105849", "bodyText": "You could mark Piglin here as a link too.", "author": "TheBusyBiscuit", "createdAt": "2020-08-02T18:03:29Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/core/attributes/PiglinBarterDrop.java", "diffHunk": "@@ -0,0 +1,39 @@\n+package io.github.thebusybiscuit.slimefun4.core.attributes;\n+\n+import org.bukkit.entity.EntityType;\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.entity.EntityDeathEvent;\n+import org.bukkit.event.entity.EntityDropItemEvent;\n+\n+import io.github.thebusybiscuit.slimefun4.implementation.items.misc.BasicCircuitBoard;\n+import io.github.thebusybiscuit.slimefun4.implementation.listeners.MobDropListener;\n+import me.mrCookieSlime.Slimefun.Lists.RecipeType;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SlimefunItem;\n+\n+/**\n+ * This interface, when attached to a {@link SlimefunItem}, provides a variable (0-100%) chance for\n+ * a {@link SlimefunItem} to be dropped by a piglin on {@link EntityItemDropEvent}. \n+ * \n+ * @author dNiym\n+ *\n+ * @see PiglinListener\n+ * \n+ */\n+@FunctionalInterface\n+public interface PiglinBarterDrop extends ItemAttribute {\n+\n+    /**\n+     * Implement this method to make this SlimefunItem have a variable chance of being\n+     * dropped by Piglins when bartering with them. This interface should be used\n+     * with the {@link RecipeType#BARTER_DROP}.\n+     */\n+    \n+    /** It is recommended that this chance is kept reasonably low to feel like\n+     * a vanilla drop as a 100% chance will completely override all Piglin ", "originalCommit": "eed7b873c7d15657fa612dc98c2588f1025b5da8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDEyMDI0MA==", "url": "https://github.com/Slimefun/Slimefun4/pull/2136#discussion_r464120240", "bodyText": "of course", "author": "dniym", "createdAt": "2020-08-02T20:30:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDEwNTg0OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDEwNTg1NA==", "url": "https://github.com/Slimefun/Slimefun4/pull/2136#discussion_r464105854", "bodyText": "You could mark Piglin here as a link too.", "author": "TheBusyBiscuit", "createdAt": "2020-08-02T18:03:38Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/core/attributes/PiglinBarterDrop.java", "diffHunk": "@@ -0,0 +1,39 @@\n+package io.github.thebusybiscuit.slimefun4.core.attributes;\n+\n+import org.bukkit.entity.EntityType;\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.entity.EntityDeathEvent;\n+import org.bukkit.event.entity.EntityDropItemEvent;\n+\n+import io.github.thebusybiscuit.slimefun4.implementation.items.misc.BasicCircuitBoard;\n+import io.github.thebusybiscuit.slimefun4.implementation.listeners.MobDropListener;\n+import me.mrCookieSlime.Slimefun.Lists.RecipeType;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SlimefunItem;\n+\n+/**\n+ * This interface, when attached to a {@link SlimefunItem}, provides a variable (0-100%) chance for\n+ * a {@link SlimefunItem} to be dropped by a piglin on {@link EntityItemDropEvent}. ", "originalCommit": "eed7b873c7d15657fa612dc98c2588f1025b5da8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDEyMDI2Nw==", "url": "https://github.com/Slimefun/Slimefun4/pull/2136#discussion_r464120267", "bodyText": "your wish is my codemand", "author": "dniym", "createdAt": "2020-08-02T20:30:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDEwNTg1NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDEwNTg2Mw==", "url": "https://github.com/Slimefun/Slimefun4/pull/2136#discussion_r464105863", "bodyText": "You could mark SlimefunItem here as a link too.", "author": "TheBusyBiscuit", "createdAt": "2020-08-02T18:03:44Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/core/attributes/PiglinBarterDrop.java", "diffHunk": "@@ -0,0 +1,39 @@\n+package io.github.thebusybiscuit.slimefun4.core.attributes;\n+\n+import org.bukkit.entity.EntityType;\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.entity.EntityDeathEvent;\n+import org.bukkit.event.entity.EntityDropItemEvent;\n+\n+import io.github.thebusybiscuit.slimefun4.implementation.items.misc.BasicCircuitBoard;\n+import io.github.thebusybiscuit.slimefun4.implementation.listeners.MobDropListener;\n+import me.mrCookieSlime.Slimefun.Lists.RecipeType;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SlimefunItem;\n+\n+/**\n+ * This interface, when attached to a {@link SlimefunItem}, provides a variable (0-100%) chance for\n+ * a {@link SlimefunItem} to be dropped by a piglin on {@link EntityItemDropEvent}. \n+ * \n+ * @author dNiym\n+ *\n+ * @see PiglinListener\n+ * \n+ */\n+@FunctionalInterface\n+public interface PiglinBarterDrop extends ItemAttribute {\n+\n+    /**\n+     * Implement this method to make this SlimefunItem have a variable chance of being\n+     * dropped by Piglins when bartering with them. This interface should be used\n+     * with the {@link RecipeType#BARTER_DROP}.\n+     */\n+    \n+    /** It is recommended that this chance is kept reasonably low to feel like\n+     * a vanilla drop as a 100% chance will completely override all Piglin \n+     * barter drops.  (NOTE: this feature only exists in 1.16+)\n+     * \n+     * @return The integer chance (0-100%) this SlimefunItem has to drop.", "originalCommit": "eed7b873c7d15657fa612dc98c2588f1025b5da8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDEyMDI4OQ==", "url": "https://github.com/Slimefun/Slimefun4/pull/2136#discussion_r464120289", "bodyText": "smashed", "author": "dniym", "createdAt": "2020-08-02T20:30:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDEwNTg2Mw=="}], "type": "inlineReview"}, {"oid": "c2376b90b35621fff3677e9439691590f0987f43", "url": "https://github.com/Slimefun/Slimefun4/commit/c2376b90b35621fff3677e9439691590f0987f43", "message": "Update PiglinListener.java\n\nmade requested changes.", "committedDate": "2020-08-02T20:25:39Z", "type": "commit"}, {"oid": "9edc082230be81015ab3bc0f739df2a78cf4d074", "url": "https://github.com/Slimefun/Slimefun4/commit/9edc082230be81015ab3bc0f739df2a78cf4d074", "message": "Update PiglinBarterDrop.java", "committedDate": "2020-08-02T20:29:08Z", "type": "commit"}, {"oid": "21305ddfdb1c9d51d43a1d6c59a17aa9877999bd", "url": "https://github.com/Slimefun/Slimefun4/commit/21305ddfdb1c9d51d43a1d6c59a17aa9877999bd", "message": "Update PiglinListener.java\n\nfixed a compile error", "committedDate": "2020-08-02T20:37:19Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDEyNDMzOQ==", "url": "https://github.com/Slimefun/Slimefun4/pull/2136#discussion_r464124339", "bodyText": "No need for the 1 as the minimum here since you are now doing > instead of >=", "author": "TheBusyBiscuit", "createdAt": "2020-08-02T21:16:16Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/PiglinListener.java", "diffHunk": "@@ -38,6 +48,29 @@ public void onEntityPickup(EntityPickupItemEvent e) {\n         }\n     }\n \n+    @EventHandler\n+    public void onPiglinDropItem(EntityDropItemEvent e) {\n+        if (e.getEntity() instanceof Piglin) {\n+            Piglin piglin = (Piglin) e.getEntity();\n+            Set<ItemStack> drops = SlimefunPlugin.getRegistry().getBarterDrops(); \n+            \n+            /*\n+             * NOTE:  Getting a new random number each iteration because multiple items could have the same\n+             * % chance to drop, and if one fails all items with that number will fail.  Getting a new random number\n+             * will allow multiple items with the same % chance to drop.\n+             */\n+            \n+            for (ItemStack is : drops) {\n+                SlimefunItem sfi = SlimefunItem.getByItem(is);\n+                //Check the getBarteringLootChance and compare against a random number 1-100, if the random number is greater then replace the item.\n+                if (sfi instanceof PiglinBarterDrop && ((PiglinBarterDrop)sfi).getBarteringLootChance() > ThreadLocalRandom.current().nextInt(1,100)) {", "originalCommit": "21305ddfdb1c9d51d43a1d6c59a17aa9877999bd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDEyNDQwMw==", "url": "https://github.com/Slimefun/Slimefun4/pull/2136#discussion_r464124403", "bodyText": "No need for the space in front of the semicolon.", "author": "TheBusyBiscuit", "createdAt": "2020-08-02T21:16:49Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/core/attributes/PiglinBarterDrop.java", "diffHunk": "@@ -0,0 +1,39 @@\n+package io.github.thebusybiscuit.slimefun4.core.attributes;\n+\n+import org.bukkit.entity.EntityType;\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.entity.EntityDeathEvent;\n+import org.bukkit.event.entity.EntityDropItemEvent;\n+\n+import io.github.thebusybiscuit.slimefun4.implementation.items.misc.BasicCircuitBoard;\n+import io.github.thebusybiscuit.slimefun4.implementation.listeners.MobDropListener;\n+import me.mrCookieSlime.Slimefun.Lists.RecipeType;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SlimefunItem;\n+\n+/**\n+ * This interface, when attached to a {@link SlimefunItem}, provides a variable (0-100%) chance for\n+ * a {@link SlimefunItem} to be dropped by a {@link Piglin} on {@link EntityItemDropEvent}. \n+ * \n+ * @author dNiym\n+ *\n+ * @see PiglinListener\n+ * \n+ */\n+@FunctionalInterface\n+public interface PiglinBarterDrop extends ItemAttribute {\n+\n+    /**\n+     * Implement this method to make this {@link SlimefunItem} have a variable chance \n+     * of being dropped by a {@link Piglin} when bartering with them. This interface \n+     * should be used with the {@link RecipeType#BARTER_DROP}.\n+     */\n+    \n+    /** It is recommended that this chance is kept reasonably low to feel like\n+     * a vanilla drop as a 100% chance will completely override all {@link Piglin} \n+     * barter drops.  (NOTE: this feature only exists in 1.16+)\n+     * \n+     * @return The integer chance (0-100%) this {@link SlimefunItem} has to drop.\n+     */\n+    int getBarteringLootChance() ;", "originalCommit": "21305ddfdb1c9d51d43a1d6c59a17aa9877999bd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDEyNDQxMA==", "url": "https://github.com/Slimefun/Slimefun4/pull/2136#discussion_r464124410", "bodyText": "ou should join these two comments.", "author": "TheBusyBiscuit", "createdAt": "2020-08-02T21:16:58Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/core/attributes/PiglinBarterDrop.java", "diffHunk": "@@ -0,0 +1,39 @@\n+package io.github.thebusybiscuit.slimefun4.core.attributes;\n+\n+import org.bukkit.entity.EntityType;\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.entity.EntityDeathEvent;\n+import org.bukkit.event.entity.EntityDropItemEvent;\n+\n+import io.github.thebusybiscuit.slimefun4.implementation.items.misc.BasicCircuitBoard;\n+import io.github.thebusybiscuit.slimefun4.implementation.listeners.MobDropListener;\n+import me.mrCookieSlime.Slimefun.Lists.RecipeType;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SlimefunItem;\n+\n+/**\n+ * This interface, when attached to a {@link SlimefunItem}, provides a variable (0-100%) chance for\n+ * a {@link SlimefunItem} to be dropped by a {@link Piglin} on {@link EntityItemDropEvent}. \n+ * \n+ * @author dNiym\n+ *\n+ * @see PiglinListener\n+ * \n+ */\n+@FunctionalInterface\n+public interface PiglinBarterDrop extends ItemAttribute {\n+\n+    /**\n+     * Implement this method to make this {@link SlimefunItem} have a variable chance \n+     * of being dropped by a {@link Piglin} when bartering with them. This interface \n+     * should be used with the {@link RecipeType#BARTER_DROP}.\n+     */\n+    \n+    /** It is recommended that this chance is kept reasonably low to feel like", "originalCommit": "21305ddfdb1c9d51d43a1d6c59a17aa9877999bd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDEyNzA2MQ==", "url": "https://github.com/Slimefun/Slimefun4/pull/2136#discussion_r464127061", "bodyText": "done", "author": "dniym", "createdAt": "2020-08-02T21:45:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDEyNDQxMA=="}], "type": "inlineReview"}, {"oid": "9287e1098dbe7d2b803b0e4cdcf202f301f917e0", "url": "https://github.com/Slimefun/Slimefun4/commit/9287e1098dbe7d2b803b0e4cdcf202f301f917e0", "message": "Update PiglinListener.java\n\nfixed", "committedDate": "2020-08-02T21:43:26Z", "type": "commit"}, {"oid": "ecb3a354ff6898ab242d3033e92fb618d0345604", "url": "https://github.com/Slimefun/Slimefun4/commit/ecb3a354ff6898ab242d3033e92fb618d0345604", "message": "Update PiglinBarterDrop.java\n\nfixed", "committedDate": "2020-08-02T21:44:11Z", "type": "commit"}, {"oid": "17f84bcffd9c676483fd018c6f6bd2be10520adb", "url": "https://github.com/Slimefun/Slimefun4/commit/17f84bcffd9c676483fd018c6f6bd2be10520adb", "message": "Update PiglinBarterDrop.java\n\ndone", "committedDate": "2020-08-02T21:44:57Z", "type": "commit"}]}