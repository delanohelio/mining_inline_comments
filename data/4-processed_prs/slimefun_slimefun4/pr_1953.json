{"pr_number": 1953, "pr_title": "Added Industrial Miner & Removed Digital Miner", "pr_createdAt": "2020-06-05T12:27:16Z", "pr_url": "https://github.com/Slimefun/Slimefun4/pull/1953", "timeline": [{"oid": "0faaef9b25396473598b52f654836163aab6cf59", "url": "https://github.com/Slimefun/Slimefun4/commit/0faaef9b25396473598b52f654836163aab6cf59", "message": "Removed Digital Miners", "committedDate": "2020-06-01T12:10:22Z", "type": "commit"}, {"oid": "6da4cc6536810f6d00ff5c34419753e70e4cb7e2", "url": "https://github.com/Slimefun/Slimefun4/commit/6da4cc6536810f6d00ff5c34419753e70e4cb7e2", "message": "Merge branch 'master' of https://github.com/TheBusyBiscuit/Slimefun4", "committedDate": "2020-06-01T13:28:01Z", "type": "commit"}, {"oid": "595767ad036861951840ba625b726492004e9d79", "url": "https://github.com/Slimefun/Slimefun4/commit/595767ad036861951840ba625b726492004e9d79", "message": "Some cleanup", "committedDate": "2020-06-02T11:50:29Z", "type": "commit"}, {"oid": "31a9b69651337c2770c7546811ed3450a053411f", "url": "https://github.com/Slimefun/Slimefun4/commit/31a9b69651337c2770c7546811ed3450a053411f", "message": "Refactored Backpacks", "committedDate": "2020-06-02T11:58:03Z", "type": "commit"}, {"oid": "6c5e0447ebd970276abf8390e8c6e70330b64a07", "url": "https://github.com/Slimefun/Slimefun4/commit/6c5e0447ebd970276abf8390e8c6e70330b64a07", "message": "Merge branch 'master' of https://github.com/TheBusyBiscuit/Slimefun4", "committedDate": "2020-06-02T13:19:56Z", "type": "commit"}, {"oid": "968b3df10a11c5a389f6fc6e70cc6b6c473eceaf", "url": "https://github.com/Slimefun/Slimefun4/commit/968b3df10a11c5a389f6fc6e70cc6b6c473eceaf", "message": "Relocated Multiblock class", "committedDate": "2020-06-03T07:51:51Z", "type": "commit"}, {"oid": "7e8a63bff84690ab83328f29515cc6c5446bac8c", "url": "https://github.com/Slimefun/Slimefun4/commit/7e8a63bff84690ab83328f29515cc6c5446bac8c", "message": "Dried Kelp Blocks are now valid coal generator fuel", "committedDate": "2020-06-04T13:26:35Z", "type": "commit"}, {"oid": "618bbfff246ef97b7cb221e0f818a8cdaa98358e", "url": "https://github.com/Slimefun/Slimefun4/commit/618bbfff246ef97b7cb221e0f818a8cdaa98358e", "message": "Optimized Fuel", "committedDate": "2020-06-04T21:55:53Z", "type": "commit"}, {"oid": "aebd03301d1c959a2a50f345819ae44590cc57ea", "url": "https://github.com/Slimefun/Slimefun4/commit/aebd03301d1c959a2a50f345819ae44590cc57ea", "message": "Added new ItemStacks", "committedDate": "2020-06-04T21:56:08Z", "type": "commit"}, {"oid": "4664fb00feeef2bbec3d079be43f7d38418efc29", "url": "https://github.com/Slimefun/Slimefun4/commit/4664fb00feeef2bbec3d079be43f7d38418efc29", "message": "Added back researches", "committedDate": "2020-06-04T21:59:58Z", "type": "commit"}, {"oid": "c8f78379a17ed18cf52b3d3d2abeff2d9a75f077", "url": "https://github.com/Slimefun/Slimefun4/commit/c8f78379a17ed18cf52b3d3d2abeff2d9a75f077", "message": "Added Industrial Miner", "committedDate": "2020-06-04T22:00:07Z", "type": "commit"}, {"oid": "4f21fd03bc124298bafe3903c1c3a3c6fa8c2b30", "url": "https://github.com/Slimefun/Slimefun4/commit/4f21fd03bc124298bafe3903c1c3a3c6fa8c2b30", "message": "Finished Industrial Miner", "committedDate": "2020-06-04T22:21:45Z", "type": "commit"}, {"oid": "15aabd6a63ebaf868faf3024c7d732597f4a690e", "url": "https://github.com/Slimefun/Slimefun4/commit/15aabd6a63ebaf868faf3024c7d732597f4a690e", "message": "Attributes are now hidden", "committedDate": "2020-06-04T22:37:21Z", "type": "commit"}, {"oid": "e41eca9caa68ad65793196d5c6bc059506ec9775", "url": "https://github.com/Slimefun/Slimefun4/commit/e41eca9caa68ad65793196d5c6bc059506ec9775", "message": "Refactoring", "committedDate": "2020-06-05T12:09:32Z", "type": "commit"}, {"oid": "cd79775402d63170ad4f4c9734d180bf049ab85e", "url": "https://github.com/Slimefun/Slimefun4/commit/cd79775402d63170ad4f4c9734d180bf049ab85e", "message": "Added Advanced Industrial Miner", "committedDate": "2020-06-05T12:13:53Z", "type": "commit"}, {"oid": "fb58b5cf33b2550039acf75c85e0cfdd7aba7a82", "url": "https://github.com/Slimefun/Slimefun4/commit/fb58b5cf33b2550039acf75c85e0cfdd7aba7a82", "message": "Updated changelog", "committedDate": "2020-06-05T12:14:13Z", "type": "commit"}, {"oid": "ae0b04788f2f6057d2a9812b6b90ce98ecd327d2", "url": "https://github.com/Slimefun/Slimefun4/commit/ae0b04788f2f6057d2a9812b6b90ce98ecd327d2", "message": "Fixed Unit Tests", "committedDate": "2020-06-05T12:25:47Z", "type": "commit"}, {"oid": "8bde659daf9cd5ccc67c26e988d75e682cc84b4e", "url": "https://github.com/Slimefun/Slimefun4/commit/8bde659daf9cd5ccc67c26e988d75e682cc84b4e", "message": "The Advanced Miner now preserves buckets", "committedDate": "2020-06-05T12:34:24Z", "type": "commit"}, {"oid": "fcd17d3a5a2b4ed8a1b6599fa724450df03fa7e4", "url": "https://github.com/Slimefun/Slimefun4/commit/fcd17d3a5a2b4ed8a1b6599fa724450df03fa7e4", "message": "Updated lore for advanced industrial miner", "committedDate": "2020-06-05T12:37:31Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjM3MzM5Ng==", "url": "https://github.com/Slimefun/Slimefun4/pull/1953#discussion_r436373396", "bodyText": "There's BlockPosition in CS-CoreLib2 which would be better for this.", "author": "WalshyDev", "createdAt": "2020-06-07T15:13:54Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/multiblocks/miner/ActiveMiner.java", "diffHunk": "@@ -0,0 +1,362 @@\n+package io.github.thebusybiscuit.slimefun4.implementation.items.multiblocks.miner;\n+\n+import java.util.UUID;\n+import java.util.logging.Level;\n+\n+import org.bukkit.Bukkit;\n+import org.bukkit.Effect;\n+import org.bukkit.Location;\n+import org.bukkit.Material;\n+import org.bukkit.Particle;\n+import org.bukkit.Sound;\n+import org.bukkit.block.Block;\n+import org.bukkit.block.BlockFace;\n+import org.bukkit.block.Chest;\n+import org.bukkit.block.data.type.Piston;\n+import org.bukkit.block.data.type.PistonHead;\n+import org.bukkit.entity.Player;\n+import org.bukkit.inventory.Inventory;\n+import org.bukkit.inventory.ItemStack;\n+\n+import io.github.thebusybiscuit.cscorelib2.inventory.InvUtils;\n+import io.github.thebusybiscuit.cscorelib2.inventory.ItemUtils;\n+import io.github.thebusybiscuit.cscorelib2.protection.ProtectableAction;\n+import io.github.thebusybiscuit.cscorelib2.scheduling.TaskQueue;\n+import me.mrCookieSlime.Slimefun.SlimefunPlugin;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.abstractItems.MachineFuel;\n+import me.mrCookieSlime.Slimefun.api.Slimefun;\n+\n+/**\n+ * This represents a running instance of an {@link IndustrialMiner}.\n+ * \n+ * @author TheBusyBiscuit\n+ * \n+ * @see IndustrialMiner\n+ * @see AdvancedIndustrialMiner\n+ *\n+ */\n+class ActiveMiner implements Runnable {\n+\n+    private final IndustrialMiner miner;\n+    private final UUID owner;\n+\n+    private int fuel = 0;\n+    private int ores = 0;\n+    private boolean running = false;\n+\n+    private final Block chest;\n+    private final Block[] pistons;\n+\n+    private final Location start;\n+    private final Location end;", "originalCommit": "fcd17d3a5a2b4ed8a1b6599fa724450df03fa7e4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjM3MzY1Mw==", "url": "https://github.com/Slimefun/Slimefun4/pull/1953#discussion_r436373653", "bodyText": "We should post location info like in cargo. Better yet, have a util method in ErrorCatcher to handle it for us.\nThink we should always post coords if possible, server owners may need them depending on the issue.", "author": "WalshyDev", "createdAt": "2020-06-07T15:16:38Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/multiblocks/miner/ActiveMiner.java", "diffHunk": "@@ -0,0 +1,362 @@\n+package io.github.thebusybiscuit.slimefun4.implementation.items.multiblocks.miner;\n+\n+import java.util.UUID;\n+import java.util.logging.Level;\n+\n+import org.bukkit.Bukkit;\n+import org.bukkit.Effect;\n+import org.bukkit.Location;\n+import org.bukkit.Material;\n+import org.bukkit.Particle;\n+import org.bukkit.Sound;\n+import org.bukkit.block.Block;\n+import org.bukkit.block.BlockFace;\n+import org.bukkit.block.Chest;\n+import org.bukkit.block.data.type.Piston;\n+import org.bukkit.block.data.type.PistonHead;\n+import org.bukkit.entity.Player;\n+import org.bukkit.inventory.Inventory;\n+import org.bukkit.inventory.ItemStack;\n+\n+import io.github.thebusybiscuit.cscorelib2.inventory.InvUtils;\n+import io.github.thebusybiscuit.cscorelib2.inventory.ItemUtils;\n+import io.github.thebusybiscuit.cscorelib2.protection.ProtectableAction;\n+import io.github.thebusybiscuit.cscorelib2.scheduling.TaskQueue;\n+import me.mrCookieSlime.Slimefun.SlimefunPlugin;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.abstractItems.MachineFuel;\n+import me.mrCookieSlime.Slimefun.api.Slimefun;\n+\n+/**\n+ * This represents a running instance of an {@link IndustrialMiner}.\n+ * \n+ * @author TheBusyBiscuit\n+ * \n+ * @see IndustrialMiner\n+ * @see AdvancedIndustrialMiner\n+ *\n+ */\n+class ActiveMiner implements Runnable {\n+\n+    private final IndustrialMiner miner;\n+    private final UUID owner;\n+\n+    private int fuel = 0;\n+    private int ores = 0;\n+    private boolean running = false;\n+\n+    private final Block chest;\n+    private final Block[] pistons;\n+\n+    private final Location start;\n+    private final Location end;\n+    private final int height;\n+\n+    private int x;\n+    private int z;\n+\n+    public ActiveMiner(IndustrialMiner miner, UUID owner, Block chest, Block[] pistons, Location start, Location end) {\n+        this.miner = miner;\n+        this.owner = owner;\n+\n+        this.chest = chest;\n+        this.pistons = pistons;\n+\n+        this.start = start;\n+        this.end = end;\n+\n+        this.height = start.getBlockY();\n+        this.x = start.getBlockX();\n+        this.z = start.getBlockZ();\n+    }\n+\n+    /**\n+     * This starts the {@link IndustrialMiner} at the given {@link Block}.\n+     * \n+     * @param b\n+     *            The {@link Block} which marks the center of this {@link IndustrialMiner}\n+     */\n+    public void start(Block b) {\n+        miner.activeMiners.put(b.getLocation(), this);\n+        running = true;\n+\n+        warmUp();\n+    }\n+\n+    /**\n+     * This method stops the {@link IndustrialMiner}.\n+     */\n+    public void stop() {\n+        running = false;\n+        miner.activeMiners.remove(chest.getRelative(BlockFace.DOWN).getLocation());\n+    }\n+\n+    /**\n+     * This method stops the {@link IndustrialMiner} with an error message.\n+     * The error message is a path to the location in Slimefun's localization files.\n+     * \n+     * @param error\n+     *            The error message to send\n+     */\n+    public void stop(String error) {\n+        Player p = Bukkit.getPlayer(owner);\n+\n+        if (p != null) {\n+            SlimefunPlugin.getLocal().sendMessage(p, error);\n+        }\n+\n+        stop();\n+    }\n+\n+    /**\n+     * This method starts the warm-up animation for the {@link IndustrialMiner}.\n+     */\n+    private void warmUp() {\n+        fuel = consumeFuel();\n+\n+        if (fuel <= 0) {\n+            // This Miner has not enough fuel.\n+            stop(\"machines.INDUSTRIAL_MINER.no-fuel\");\n+            return;\n+        }\n+\n+        // This is our warm up animation\n+        // The pistons will push after another in decreasing intervals\n+        TaskQueue queue = new TaskQueue();\n+\n+        queue.thenRun(4, () -> setPistonState(pistons[0], true));\n+        queue.thenRun(10, () -> setPistonState(pistons[0], false));\n+\n+        queue.thenRun(8, () -> setPistonState(pistons[1], true));\n+        queue.thenRun(10, () -> setPistonState(pistons[1], false));\n+\n+        queue.thenRun(6, () -> setPistonState(pistons[0], true));\n+        queue.thenRun(9, () -> setPistonState(pistons[0], false));\n+\n+        queue.thenRun(4, () -> setPistonState(pistons[1], true));\n+        queue.thenRun(7, () -> setPistonState(pistons[1], false));\n+\n+        queue.thenRun(3, () -> setPistonState(pistons[0], true));\n+        queue.thenRun(5, () -> setPistonState(pistons[0], false));\n+\n+        queue.thenRun(2, () -> setPistonState(pistons[1], true));\n+        queue.thenRun(4, () -> setPistonState(pistons[1], false));\n+\n+        queue.thenRun(1, () -> setPistonState(pistons[0], true));\n+        queue.thenRun(3, () -> setPistonState(pistons[0], false));\n+\n+        queue.thenRun(1, () -> setPistonState(pistons[1], true));\n+        queue.thenRun(2, () -> setPistonState(pistons[1], false));\n+\n+        queue.thenRun(1, this);\n+        queue.execute(SlimefunPlugin.instance);\n+    }\n+\n+    @Override\n+    public void run() {\n+        if (!running) {\n+            // Don't continue if the machine has stopped\n+            return;\n+        }\n+\n+        try {\n+            TaskQueue queue = new TaskQueue();\n+\n+            queue.thenRun(1, () -> setPistonState(pistons[0], true));\n+            queue.thenRun(3, () -> setPistonState(pistons[0], false));\n+\n+            queue.thenRun(1, () -> setPistonState(pistons[1], true));\n+            queue.thenRun(3, () -> setPistonState(pistons[1], false));\n+\n+            queue.thenRun(() -> {\n+                Block furnace = chest.getRelative(BlockFace.DOWN);\n+                furnace.getWorld().playEffect(furnace.getLocation(), Effect.STEP_SOUND, Material.STONE);\n+\n+                for (int y = height; y > 0; y--) {\n+                    Block b = start.getWorld().getBlockAt(x, y, z);\n+\n+                    if (!SlimefunPlugin.getProtectionManager().hasPermission(Bukkit.getOfflinePlayer(owner), b, ProtectableAction.BREAK_BLOCK)) {\n+                        stop(\"machines.INDUSTRIAL_MINER.no-permission\");\n+                        return;\n+                    }\n+\n+                    if (miner.canMine(b.getType()) && push(miner.getOutcome(b.getType()))) {\n+                        furnace.getWorld().playEffect(furnace.getLocation(), Effect.STEP_SOUND, b.getType());\n+                        furnace.getWorld().playSound(furnace.getLocation(), Sound.ENTITY_ARROW_HIT_PLAYER, 0.2F, 1F);\n+\n+                        b.setType(Material.AIR);\n+                        fuel--;\n+                        ores++;\n+\n+                        // Repeat the same column when we hit an ore.\n+                        Slimefun.runSync(this, 4);\n+                        return;\n+                    }\n+                }\n+\n+                nextColumn();\n+            });\n+\n+            queue.execute(SlimefunPlugin.instance);\n+        }\n+        catch (Exception e) {\n+            Slimefun.getLogger().log(Level.SEVERE, \"An Error occured while running an Industrial Miner\", e);", "originalCommit": "fcd17d3a5a2b4ed8a1b6599fa724450df03fa7e4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjM3MzgzOA==", "url": "https://github.com/Slimefun/Slimefun4/pull/1953#discussion_r436373838", "bodyText": "same as said above", "author": "WalshyDev", "createdAt": "2020-06-07T15:18:43Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/multiblocks/miner/ActiveMiner.java", "diffHunk": "@@ -0,0 +1,362 @@\n+package io.github.thebusybiscuit.slimefun4.implementation.items.multiblocks.miner;\n+\n+import java.util.UUID;\n+import java.util.logging.Level;\n+\n+import org.bukkit.Bukkit;\n+import org.bukkit.Effect;\n+import org.bukkit.Location;\n+import org.bukkit.Material;\n+import org.bukkit.Particle;\n+import org.bukkit.Sound;\n+import org.bukkit.block.Block;\n+import org.bukkit.block.BlockFace;\n+import org.bukkit.block.Chest;\n+import org.bukkit.block.data.type.Piston;\n+import org.bukkit.block.data.type.PistonHead;\n+import org.bukkit.entity.Player;\n+import org.bukkit.inventory.Inventory;\n+import org.bukkit.inventory.ItemStack;\n+\n+import io.github.thebusybiscuit.cscorelib2.inventory.InvUtils;\n+import io.github.thebusybiscuit.cscorelib2.inventory.ItemUtils;\n+import io.github.thebusybiscuit.cscorelib2.protection.ProtectableAction;\n+import io.github.thebusybiscuit.cscorelib2.scheduling.TaskQueue;\n+import me.mrCookieSlime.Slimefun.SlimefunPlugin;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.abstractItems.MachineFuel;\n+import me.mrCookieSlime.Slimefun.api.Slimefun;\n+\n+/**\n+ * This represents a running instance of an {@link IndustrialMiner}.\n+ * \n+ * @author TheBusyBiscuit\n+ * \n+ * @see IndustrialMiner\n+ * @see AdvancedIndustrialMiner\n+ *\n+ */\n+class ActiveMiner implements Runnable {\n+\n+    private final IndustrialMiner miner;\n+    private final UUID owner;\n+\n+    private int fuel = 0;\n+    private int ores = 0;\n+    private boolean running = false;\n+\n+    private final Block chest;\n+    private final Block[] pistons;\n+\n+    private final Location start;\n+    private final Location end;\n+    private final int height;\n+\n+    private int x;\n+    private int z;\n+\n+    public ActiveMiner(IndustrialMiner miner, UUID owner, Block chest, Block[] pistons, Location start, Location end) {\n+        this.miner = miner;\n+        this.owner = owner;\n+\n+        this.chest = chest;\n+        this.pistons = pistons;\n+\n+        this.start = start;\n+        this.end = end;\n+\n+        this.height = start.getBlockY();\n+        this.x = start.getBlockX();\n+        this.z = start.getBlockZ();\n+    }\n+\n+    /**\n+     * This starts the {@link IndustrialMiner} at the given {@link Block}.\n+     * \n+     * @param b\n+     *            The {@link Block} which marks the center of this {@link IndustrialMiner}\n+     */\n+    public void start(Block b) {\n+        miner.activeMiners.put(b.getLocation(), this);\n+        running = true;\n+\n+        warmUp();\n+    }\n+\n+    /**\n+     * This method stops the {@link IndustrialMiner}.\n+     */\n+    public void stop() {\n+        running = false;\n+        miner.activeMiners.remove(chest.getRelative(BlockFace.DOWN).getLocation());\n+    }\n+\n+    /**\n+     * This method stops the {@link IndustrialMiner} with an error message.\n+     * The error message is a path to the location in Slimefun's localization files.\n+     * \n+     * @param error\n+     *            The error message to send\n+     */\n+    public void stop(String error) {\n+        Player p = Bukkit.getPlayer(owner);\n+\n+        if (p != null) {\n+            SlimefunPlugin.getLocal().sendMessage(p, error);\n+        }\n+\n+        stop();\n+    }\n+\n+    /**\n+     * This method starts the warm-up animation for the {@link IndustrialMiner}.\n+     */\n+    private void warmUp() {\n+        fuel = consumeFuel();\n+\n+        if (fuel <= 0) {\n+            // This Miner has not enough fuel.\n+            stop(\"machines.INDUSTRIAL_MINER.no-fuel\");\n+            return;\n+        }\n+\n+        // This is our warm up animation\n+        // The pistons will push after another in decreasing intervals\n+        TaskQueue queue = new TaskQueue();\n+\n+        queue.thenRun(4, () -> setPistonState(pistons[0], true));\n+        queue.thenRun(10, () -> setPistonState(pistons[0], false));\n+\n+        queue.thenRun(8, () -> setPistonState(pistons[1], true));\n+        queue.thenRun(10, () -> setPistonState(pistons[1], false));\n+\n+        queue.thenRun(6, () -> setPistonState(pistons[0], true));\n+        queue.thenRun(9, () -> setPistonState(pistons[0], false));\n+\n+        queue.thenRun(4, () -> setPistonState(pistons[1], true));\n+        queue.thenRun(7, () -> setPistonState(pistons[1], false));\n+\n+        queue.thenRun(3, () -> setPistonState(pistons[0], true));\n+        queue.thenRun(5, () -> setPistonState(pistons[0], false));\n+\n+        queue.thenRun(2, () -> setPistonState(pistons[1], true));\n+        queue.thenRun(4, () -> setPistonState(pistons[1], false));\n+\n+        queue.thenRun(1, () -> setPistonState(pistons[0], true));\n+        queue.thenRun(3, () -> setPistonState(pistons[0], false));\n+\n+        queue.thenRun(1, () -> setPistonState(pistons[1], true));\n+        queue.thenRun(2, () -> setPistonState(pistons[1], false));\n+\n+        queue.thenRun(1, this);\n+        queue.execute(SlimefunPlugin.instance);\n+    }\n+\n+    @Override\n+    public void run() {\n+        if (!running) {\n+            // Don't continue if the machine has stopped\n+            return;\n+        }\n+\n+        try {\n+            TaskQueue queue = new TaskQueue();\n+\n+            queue.thenRun(1, () -> setPistonState(pistons[0], true));\n+            queue.thenRun(3, () -> setPistonState(pistons[0], false));\n+\n+            queue.thenRun(1, () -> setPistonState(pistons[1], true));\n+            queue.thenRun(3, () -> setPistonState(pistons[1], false));\n+\n+            queue.thenRun(() -> {\n+                Block furnace = chest.getRelative(BlockFace.DOWN);\n+                furnace.getWorld().playEffect(furnace.getLocation(), Effect.STEP_SOUND, Material.STONE);\n+\n+                for (int y = height; y > 0; y--) {\n+                    Block b = start.getWorld().getBlockAt(x, y, z);\n+\n+                    if (!SlimefunPlugin.getProtectionManager().hasPermission(Bukkit.getOfflinePlayer(owner), b, ProtectableAction.BREAK_BLOCK)) {\n+                        stop(\"machines.INDUSTRIAL_MINER.no-permission\");\n+                        return;\n+                    }\n+\n+                    if (miner.canMine(b.getType()) && push(miner.getOutcome(b.getType()))) {\n+                        furnace.getWorld().playEffect(furnace.getLocation(), Effect.STEP_SOUND, b.getType());\n+                        furnace.getWorld().playSound(furnace.getLocation(), Sound.ENTITY_ARROW_HIT_PLAYER, 0.2F, 1F);\n+\n+                        b.setType(Material.AIR);\n+                        fuel--;\n+                        ores++;\n+\n+                        // Repeat the same column when we hit an ore.\n+                        Slimefun.runSync(this, 4);\n+                        return;\n+                    }\n+                }\n+\n+                nextColumn();\n+            });\n+\n+            queue.execute(SlimefunPlugin.instance);\n+        }\n+        catch (Exception e) {\n+            Slimefun.getLogger().log(Level.SEVERE, \"An Error occured while running an Industrial Miner\", e);\n+            stop();\n+        }\n+    }\n+\n+    /**\n+     * This advanced the {@link IndustrialMiner} to the next column\n+     */\n+    private void nextColumn() {\n+        if (x < end.getBlockX()) {\n+            x++;\n+        }\n+        else if (z < end.getBlockZ()) {\n+            x = start.getBlockX();\n+            z++;\n+        }\n+        else {\n+            // The Miner has finished\n+            stop();\n+\n+            Player p = Bukkit.getPlayer(owner);\n+\n+            if (p != null) {\n+                p.playSound(p.getLocation(), Sound.ENTITY_ARROW_HIT_PLAYER, 0.4F, 1F);\n+                SlimefunPlugin.getLocal().sendMessage(p, \"machines.INDUSTRIAL_MINER.finished\", msg -> msg.replace(\"%ores%\", String.valueOf(ores)));\n+            }\n+\n+            return;\n+        }\n+\n+        Slimefun.runSync(this, 5);\n+    }\n+\n+    /**\n+     * This refuels the {@link IndustrialMiner} and pushes the given {@link ItemStack} to\n+     * its {@link Chest}.\n+     * \n+     * @param item\n+     *            The {@link ItemStack} to push to the {@link Chest}.\n+     * \n+     * @return Whether the operation was successful\n+     */\n+    private boolean push(ItemStack item) {\n+        if (fuel < 1) {\n+            // Restock fuel\n+            fuel = consumeFuel();\n+        }\n+\n+        // Check if there is enough fuel to run\n+        if (fuel > 0) {\n+            if (chest.getType() == Material.CHEST) {\n+                Inventory inv = ((Chest) chest.getState()).getBlockInventory();\n+\n+                if (InvUtils.fits(inv, item)) {\n+                    inv.addItem(item);\n+                    return true;\n+                }\n+                else {\n+                    stop(\"machines.INDUSTRIAL_MINER.chest-full\");\n+                }\n+            }\n+            else {\n+                // The chest has been destroyed\n+                stop(\"machines.INDUSTRIAL_MINER.destroyed\");\n+            }\n+        }\n+        else {\n+            stop(\"machines.INDUSTRIAL_MINER.no-fuel\");\n+        }\n+\n+        return false;\n+    }\n+\n+    /**\n+     * This consumes fuel from the given {@link Chest}.\n+     * \n+     * @return The gained fuel value\n+     */\n+    private int consumeFuel() {\n+        if (chest.getType() == Material.CHEST) {\n+            Inventory inv = ((Chest) chest.getState()).getBlockInventory();\n+\n+            for (int i = 0; i < inv.getSize(); i++) {\n+                for (MachineFuel fuelType : miner.fuelTypes) {\n+                    ItemStack item = inv.getContents()[i];\n+\n+                    if (fuelType.test(item)) {\n+                        ItemUtils.consumeItem(item, false);\n+\n+                        if (miner instanceof AdvancedIndustrialMiner) {\n+                            inv.addItem(new ItemStack(Material.BUCKET));\n+                        }\n+\n+                        return fuelType.getTicks();\n+                    }\n+                }\n+            }\n+        }\n+\n+        return 0;\n+    }\n+\n+    private void setPistonState(Block block, boolean extended) {\n+        if (!running) {\n+            return;\n+        }\n+\n+        try {\n+            // Smoke Particles around the Chest for dramatic effect\n+            Location particleLoc = chest.getLocation().clone().add(0, -1, 0);\n+            block.getWorld().spawnParticle(Particle.SMOKE_NORMAL, particleLoc, 20, 0.7, 0.7, 0.7, 0);\n+\n+            if (block.getType() == Material.MOVING_PISTON) {\n+                // Yeah it isn't really cool when this happens\n+                block.getRelative(BlockFace.UP).setType(Material.AIR);\n+            }\n+            else if (block.getType() == Material.PISTON) {\n+                Block above = block.getRelative(BlockFace.UP);\n+\n+                if (above.isEmpty() || above.getType() == Material.PISTON_HEAD) {\n+                    Piston piston = (Piston) block.getBlockData();\n+\n+                    if (piston.getFacing() == BlockFace.UP) {\n+                        piston.setExtended(extended);\n+                        block.setBlockData(piston, false);\n+\n+                        // Updating the Piston Head\n+                        if (extended) {\n+                            PistonHead head = (PistonHead) Material.PISTON_HEAD.createBlockData();\n+                            head.setFacing(BlockFace.UP);\n+\n+                            block.getRelative(BlockFace.UP).setBlockData(head, false);\n+                        }\n+                        else {\n+                            block.getRelative(BlockFace.UP).setType(Material.AIR);\n+                        }\n+\n+                        block.getWorld().playSound(block.getLocation(), extended ? Sound.BLOCK_PISTON_EXTEND : Sound.BLOCK_PISTON_CONTRACT, 0.1F, 1F);\n+                    }\n+                    else {\n+                        // The pistons must be facing upwards\n+                        stop(\"machines.INDUSTRIAL_MINER.piston-facing\");\n+                    }\n+                }\n+                else {\n+                    // The pistons must be facing upwards\n+                    stop(\"machines.INDUSTRIAL_MINER.piston-space\");\n+                }\n+            }\n+            else {\n+                // The piston has been destroyed\n+                stop(\"machines.INDUSTRIAL_MINER.destroyed\");\n+            }\n+        }\n+        catch (Exception e) {\n+            Slimefun.getLogger().log(Level.SEVERE, \"An Error occured while moving a Piston for an Industrial Miner\", e);", "originalCommit": "fcd17d3a5a2b4ed8a1b6599fa724450df03fa7e4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjM3Mzk0NQ==", "url": "https://github.com/Slimefun/Slimefun4/pull/1953#discussion_r436373945", "bodyText": "does this need to be a list? If you need order a LinkedHashSet may be better.", "author": "WalshyDev", "createdAt": "2020-06-07T15:20:06Z", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/multiblocks/miner/IndustrialMiner.java", "diffHunk": "@@ -0,0 +1,213 @@\n+package io.github.thebusybiscuit.slimefun4.implementation.items.multiblocks.miner;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Random;\n+import java.util.concurrent.ThreadLocalRandom;\n+\n+import org.apache.commons.lang.Validate;\n+import org.bukkit.Location;\n+import org.bukkit.Material;\n+import org.bukkit.Tag;\n+import org.bukkit.block.Block;\n+import org.bukkit.block.BlockFace;\n+import org.bukkit.enchantments.Enchantment;\n+import org.bukkit.entity.Player;\n+import org.bukkit.inventory.ItemStack;\n+import org.bukkit.inventory.meta.ItemMeta;\n+\n+import io.github.thebusybiscuit.cscorelib2.chat.ChatColors;\n+import io.github.thebusybiscuit.cscorelib2.item.CustomItem;\n+import io.github.thebusybiscuit.slimefun4.api.MinecraftVersion;\n+import me.mrCookieSlime.Slimefun.SlimefunPlugin;\n+import me.mrCookieSlime.Slimefun.Objects.Category;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.abstractItems.MachineFuel;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.multiblocks.MultiBlockMachine;\n+import me.mrCookieSlime.Slimefun.api.SlimefunItemStack;\n+\n+/**\n+ * The {@link IndustrialMiner} is a {@link MultiBlockMachine} that can mine any\n+ * ores it finds in a given range underneath where it was placed.\n+ * \n+ * <i>And for those of you who are wondering... yes this is the replacement for the\n+ * long-time deprecated Digital Miner.</i>\n+ * \n+ * @author TheBusyBiscuit\n+ * \n+ * @see AdvancedIndustrialMiner\n+ * @see ActiveMiner\n+ *\n+ */\n+public class IndustrialMiner extends MultiBlockMachine {\n+\n+    protected final Map<Location, ActiveMiner> activeMiners = new HashMap<>();\n+    protected final List<MachineFuel> fuelTypes = new ArrayList<>();", "originalCommit": "fcd17d3a5a2b4ed8a1b6599fa724450df03fa7e4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjM3NDc1MA==", "url": "https://github.com/Slimefun/Slimefun4/pull/1953#discussion_r436374750", "bodyText": "It does need to be consistently ordered, don't really see the benefits of using a LinkedHashSet though here, an ArrayList is just fine for this purpose.", "author": "TheBusyBiscuit", "createdAt": "2020-06-07T15:29:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjM3Mzk0NQ=="}], "type": "inlineReview"}, {"oid": "615e0c07a2e963fbfc461d0bdf1a6b12f5bc134d", "url": "https://github.com/Slimefun/Slimefun4/commit/615e0c07a2e963fbfc461d0bdf1a6b12f5bc134d", "message": "Minor changes", "committedDate": "2020-06-07T15:48:10Z", "type": "commit"}, {"oid": "013696a7594a939febe92c8db8dff95dda6ad98e", "url": "https://github.com/Slimefun/Slimefun4/commit/013696a7594a939febe92c8db8dff95dda6ad98e", "message": "Merge branch 'master' into feature/miner", "committedDate": "2020-06-08T22:12:33Z", "type": "commit"}]}